; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\home\public\Desktop\projects\ciphershed.build\src\Common\Dlgcode.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BC@KMEHMKJJ@truecrypt?9x64?4sys?$AA@	; `string'
PUBLIC	??_C@_0O@OJENBJKN@truecrypt?4sys?$AA@		; `string'
PUBLIC	??_C@_0BG@NHCNJMON@CipherShed?5Format?4exe?$AA@	; `string'
PUBLIC	??_C@_0P@KEOPEMDF@CipherShed?4exe?$AA@		; `string'
PUBLIC	??_C@_0M@HNDLNFKG@License?4txt?$AA@		; `string'
PUBLIC	??_C@_0BK@LMECBCPP@CipherShed?5User?5Guide?4pdf?$AA@ ; `string'
PUBLIC	??_C@_0BG@PCIEDLBB@ACipherShed?5Setup?4exe?$AA@	; `string'
PUBLIC	??_C@_0P@KPKCHNJD@Dtruecrypt?4sys?$AA@		; `string'
PUBLIC	??_C@_0BD@ILLOKAML@Atruecrypt?9x64?4sys?$AA@	; `string'
PUBLIC	??_C@_0P@JMCFMDBI@Atruecrypt?4sys?$AA@		; `string'
PUBLIC	??_C@_0BH@JDBNPKKN@ACipherShed?5Format?4exe?$AA@ ; `string'
PUBLIC	??_C@_0BA@BPJBGDOM@ACipherShed?4exe?$AA@	; `string'
PUBLIC	??_C@_0N@GJIBBNGF@ALicense?4txt?$AA@		; `string'
PUBLIC	??_C@_0BL@MFPLEOCK@ACipherShed?5User?5Guide?4pdf?$AA@ ; `string'
PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
PUBLIC	?hSplashClass@@3GA				; hSplashClass
PUBLIC	_szHelpFile2
PUBLIC	?SysDriveDevicePath@@3PADA			; SysDriveDevicePath
PUBLIC	_ConfigBuffer
PUBLIC	?SysPartitionDevicePath@@3PADA			; SysPartitionDevicePath
PUBLIC	?SystemFileSelectorCallerThreadId@@3KA		; SystemFileSelectorCallerThreadId
PUBLIC	_LastMountedVolumeDirty
PUBLIC	_LastDialogId
PUBLIC	?DriverVersion@@3JA				; DriverVersion
PUBLIC	_SecurityTokenLibraryPath
PUBLIC	_WindowTitleBarFont
PUBLIC	_defaultKeyFilesParam
PUBLIC	_szHelpFile
PUBLIC	?hDlgClass@@3GA					; hDlgClass
PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?RescueIsoImageSize@BootEncryption@CipherShed@@1IB ; CipherShed::BootEncryption::RescueIsoImageSize
PUBLIC	?MaxPasswordLength@SecurityToken@CipherShed@@2IB ; CipherShed::SecurityToken::MaxPasswordLength
PUBLIC	_hFixedDigitFont
PUBLIC	_hBoldFont
PUBLIC	_hTitleFont
PUBLIC	_hFixedFont
PUBLIC	_hUserFont
PUBLIC	_hUserUnderlineFont
PUBLIC	_hUserBoldFont
PUBLIC	?hUserUnderlineBoldFont@@3PAUHFONT__@@A		; hUserUnderlineBoldFont
PUBLIC	_ScreenDPI
PUBLIC	?DPIScaleFactorX@@3NA				; DPIScaleFactorX
PUBLIC	?DPIScaleFactorY@@3NA				; DPIScaleFactorY
PUBLIC	_DlgAspectRatio
PUBLIC	_MainDlg
PUBLIC	_lpszTitle
PUBLIC	_bPreserveTimestamp
PUBLIC	_bStartOnLogon
PUBLIC	_bMountDevicesOnLogon
PUBLIC	_bMountFavoritesOnLogon
PUBLIC	_bHistory
PUBLIC	_HiddenSectorDetectionStatus
PUBLIC	_nCurrentOS
PUBLIC	_CurrentOSMajor
PUBLIC	_CurrentOSMinor
PUBLIC	_CurrentOSServicePack
PUBLIC	_RemoteSession
PUBLIC	?bPortableModeConfirmed@@3HA			; bPortableModeConfirmed
PUBLIC	_bInPlaceEncNonSysPending
PUBLIC	_KeyFilesEnable
PUBLIC	_FirstKeyFile
PUBLIC	_IgnoreWmDeviceChange
PUBLIC	_DeviceChangeBroadcastDisabled
PUBLIC	_MountVolumesAsSystemFavorite
PUBLIC	_FavoriteMountOnArrivalInProgress
PUBLIC	_MultipleMountOperationInProgress
PUBLIC	_hDriver
PUBLIC	?hSysEncMutex@@3RAXA				; hSysEncMutex
PUBLIC	?hNonSysInplaceEncMutex@@3RAXA			; hNonSysInplaceEncMutex
PUBLIC	?hDriverSetupMutex@@3RAXA			; hDriverSetupMutex
PUBLIC	?hAppSetupMutex@@3RAXA				; hAppSetupMutex
PUBLIC	_hInst
PUBLIC	_SystemEncryptionStatus
PUBLIC	_nWipeMode
PUBLIC	_bSysPartitionSelected
PUBLIC	_bSysDriveSelected
PUBLIC	?bCachedSysDevicePathsValid@@3DA		; bCachedSysDevicePathsValid
PUBLIC	_bHyperLinkBeingTracked
PUBLIC	?WrongPwdRetryCounter@@3HA			; WrongPwdRetryCounter
PUBLIC	?SystemFileSelectorCallPending@@3HA		; SystemFileSelectorCallPending
_BSS	SEGMENT
?hSplashClass@@3GA DW 01H DUP (?)			; hSplashClass
	ALIGN	4

_szHelpFile2 DB	0104H DUP (?)
?SysDriveDevicePath@@3PADA DB 0104H DUP (?)		; SysDriveDevicePath
_ConfigBuffer DD 01H DUP (?)
?SysPartitionDevicePath@@3PADA DB 0104H DUP (?)		; SysPartitionDevicePath
?SystemFileSelectorCallerThreadId@@3KA DD 01H DUP (?)	; SystemFileSelectorCallerThreadId
_LastMountedVolumeDirty DD 01H DUP (?)
_LastDialogId DD 01H DUP (?)
?DriverVersion@@3JA DD 01H DUP (?)			; DriverVersion
_SecurityTokenLibraryPath DB 0104H DUP (?)
_WindowTitleBarFont DD 01H DUP (?)
	ALIGN	8

_defaultKeyFilesParam DQ 01H DUP (?)
_szHelpFile DB	0104H DUP (?)
?hDlgClass@@3GA DW 01H DUP (?)				; hDlgClass
	ALIGN	4

_hFixedDigitFont DD 01H DUP (?)
_hBoldFont DD	01H DUP (?)
_hTitleFont DD	01H DUP (?)
_hFixedFont DD	01H DUP (?)
_hUserFont DD	01H DUP (?)
_hUserUnderlineFont DD 01H DUP (?)
_hUserBoldFont DD 01H DUP (?)
?hUserUnderlineBoldFont@@3PAUHFONT__@@A DD 01H DUP (?)	; hUserUnderlineBoldFont
_MainDlg DD	01H DUP (?)
_lpszTitle DD	01H DUP (?)
_bStartOnLogon DD 01H DUP (?)
_bMountDevicesOnLogon DD 01H DUP (?)
_bMountFavoritesOnLogon DD 01H DUP (?)
_bHistory DD	01H DUP (?)
_HiddenSectorDetectionStatus DD 01H DUP (?)
_nCurrentOS DD	01H DUP (?)
_CurrentOSMajor DD 01H DUP (?)
_CurrentOSMinor DD 01H DUP (?)
_CurrentOSServicePack DD 01H DUP (?)
_RemoteSession DD 01H DUP (?)
?bPortableModeConfirmed@@3HA DD 01H DUP (?)		; bPortableModeConfirmed
_bInPlaceEncNonSysPending DD 01H DUP (?)
_KeyFilesEnable DD 01H DUP (?)
_FirstKeyFile DD 01H DUP (?)
_IgnoreWmDeviceChange DD 01H DUP (?)
_DeviceChangeBroadcastDisabled DD 01H DUP (?)
_MountVolumesAsSystemFavorite DD 01H DUP (?)
_FavoriteMountOnArrivalInProgress DD 01H DUP (?)
_MultipleMountOperationInProgress DD 01H DUP (?)
?hSysEncMutex@@3RAXA DD 01H DUP (?)			; hSysEncMutex
?hNonSysInplaceEncMutex@@3RAXA DD 01H DUP (?)		; hNonSysInplaceEncMutex
?hDriverSetupMutex@@3RAXA DD 01H DUP (?)		; hDriverSetupMutex
?hAppSetupMutex@@3RAXA DD 01H DUP (?)			; hAppSetupMutex
_hInst	DD	01H DUP (?)
_SystemEncryptionStatus DD 01H DUP (?)
_nWipeMode DD	01H DUP (?)
_bSysPartitionSelected DD 01H DUP (?)
_bSysDriveSelected DD 01H DUP (?)
?bCachedSysDevicePathsValid@@3DA DB 01H DUP (?)		; bCachedSysDevicePathsValid
	ALIGN	4

_bHyperLinkBeingTracked DD 01H DUP (?)
?WrongPwdRetryCounter@@3HA DD 01H DUP (?)		; WrongPwdRetryCounter
?SystemFileSelectorCallPending@@3HA DD 01H DUP (?)	; SystemFileSelectorCallPending
_StaticModelessWaitDlgHandle DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BC@KMEHMKJJ@truecrypt?9x64?4sys?$AA@
CONST	SEGMENT
??_C@_0BC@KMEHMKJJ@truecrypt?9x64?4sys?$AA@ DB 'truecrypt-x64.sys', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OJENBJKN@truecrypt?4sys?$AA@
CONST	SEGMENT
??_C@_0O@OJENBJKN@truecrypt?4sys?$AA@ DB 'truecrypt.sys', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NHCNJMON@CipherShed?5Format?4exe?$AA@
CONST	SEGMENT
??_C@_0BG@NHCNJMON@CipherShed?5Format?4exe?$AA@ DB 'CipherShed Format.exe'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KEOPEMDF@CipherShed?4exe?$AA@
CONST	SEGMENT
??_C@_0P@KEOPEMDF@CipherShed?4exe?$AA@ DB 'CipherShed.exe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HNDLNFKG@License?4txt?$AA@
CONST	SEGMENT
??_C@_0M@HNDLNFKG@License?4txt?$AA@ DB 'License.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LMECBCPP@CipherShed?5User?5Guide?4pdf?$AA@
CONST	SEGMENT
??_C@_0BK@LMECBCPP@CipherShed?5User?5Guide?4pdf?$AA@ DB 'CipherShed User '
	DB	'Guide.pdf', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PCIEDLBB@ACipherShed?5Setup?4exe?$AA@
CONST	SEGMENT
??_C@_0BG@PCIEDLBB@ACipherShed?5Setup?4exe?$AA@ DB 'ACipherShed Setup.exe'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KPKCHNJD@Dtruecrypt?4sys?$AA@
CONST	SEGMENT
??_C@_0P@KPKCHNJD@Dtruecrypt?4sys?$AA@ DB 'Dtruecrypt.sys', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@ILLOKAML@Atruecrypt?9x64?4sys?$AA@
CONST	SEGMENT
??_C@_0BD@ILLOKAML@Atruecrypt?9x64?4sys?$AA@ DB 'Atruecrypt-x64.sys', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JMCFMDBI@Atruecrypt?4sys?$AA@
CONST	SEGMENT
??_C@_0P@JMCFMDBI@Atruecrypt?4sys?$AA@ DB 'Atruecrypt.sys', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JDBNPKKN@ACipherShed?5Format?4exe?$AA@
CONST	SEGMENT
??_C@_0BH@JDBNPKKN@ACipherShed?5Format?4exe?$AA@ DB 'ACipherShed Format.e'
	DB	'xe', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BPJBGDOM@ACipherShed?4exe?$AA@
CONST	SEGMENT
??_C@_0BA@BPJBGDOM@ACipherShed?4exe?$AA@ DB 'ACipherShed.exe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GJIBBNGF@ALicense?4txt?$AA@
CONST	SEGMENT
??_C@_0N@GJIBBNGF@ALicense?4txt?$AA@ DB 'ALicense.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MFPLEOCK@ACipherShed?5User?5Guide?4pdf?$AA@
CONST	SEGMENT
??_C@_0BL@MFPLEOCK@ACipherShed?5User?5Guide?4pdf?$AA@ DB 'ACipherShed Use'
	DB	'r Guide.pdf', 00H				; `string'
CONST	ENDS
;	COMDAT ?MaxPasswordLength@SecurityToken@CipherShed@@2IB
CONST	SEGMENT
?MaxPasswordLength@SecurityToken@CipherShed@@2IB DD 080H ; CipherShed::SecurityToken::MaxPasswordLength
CONST	ENDS
;	COMDAT ?RescueIsoImageSize@BootEncryption@CipherShed@@1IB
CONST	SEGMENT
?RescueIsoImageSize@BootEncryption@CipherShed@@1IB DD 01c0000H ; CipherShed::BootEncryption::RescueIsoImageSize
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
_szFiles DD	FLAT:??_C@_0BL@MFPLEOCK@ACipherShed?5User?5Guide?4pdf?$AA@
	DD	FLAT:??_C@_0N@GJIBBNGF@ALicense?4txt?$AA@
	DD	FLAT:??_C@_0BA@BPJBGDOM@ACipherShed?4exe?$AA@
	DD	FLAT:??_C@_0BH@JDBNPKKN@ACipherShed?5Format?4exe?$AA@
	DD	FLAT:??_C@_0P@JMCFMDBI@Atruecrypt?4sys?$AA@
	DD	FLAT:??_C@_0BD@ILLOKAML@Atruecrypt?9x64?4sys?$AA@
	DD	FLAT:??_C@_0P@KPKCHNJD@Dtruecrypt?4sys?$AA@
	DD	FLAT:??_C@_0BG@PCIEDLBB@ACipherShed?5Setup?4exe?$AA@
_szCompressedFiles DD FLAT:??_C@_0BK@LMECBCPP@CipherShed?5User?5Guide?4pdf?$AA@
	DD	FLAT:??_C@_0M@HNDLNFKG@License?4txt?$AA@
	DD	FLAT:??_C@_0P@KEOPEMDF@CipherShed?4exe?$AA@
	DD	FLAT:??_C@_0BG@NHCNJMON@CipherShed?5Format?4exe?$AA@
	DD	FLAT:??_C@_0O@OJENBJKN@truecrypt?4sys?$AA@
	DD	FLAT:??_C@_0BC@KMEHMKJJ@truecrypt?9x64?4sys?$AA@
_ScreenDPI DD	060H
?DPIScaleFactorX@@3NA DQ 03ff0000000000000r	; 1	; DPIScaleFactorX
?DPIScaleFactorY@@3NA DQ 03ff0000000000000r	; 1	; DPIScaleFactorY
_DlgAspectRatio DQ 03ff0000000000000r		; 1
_bPreserveTimestamp DD 01H
_hDriver DD	0ffffffffH
_DATA	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
CONST	ENDS
PUBLIC	?strchr@@YAPADPADH@Z				; strchr
EXTRN	_strchr:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string.h
;	COMDAT ?strchr@@YAPADPADH@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strchr@@YAPADPADH@Z PROC				; strchr, COMDAT

; 184  : 	{ return (char*)strchr((const char*)_Str, _Ch); }

  00000	e9 00 00 00 00	 jmp	 _strchr
?strchr@@YAPADPADH@Z ENDP				; strchr
_TEXT	ENDS
PUBLIC	?strrchr@@YAPADPADH@Z				; strrchr
EXTRN	_strrchr:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?strrchr@@YAPADPADH@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strrchr@@YAPADPADH@Z PROC				; strrchr, COMDAT

; 188  : 	{ return (char*)strrchr((const char*)_Str, _Ch); }

  00000	e9 00 00 00 00	 jmp	 _strrchr
?strrchr@@YAPADPADH@Z ENDP				; strrchr
_TEXT	ENDS
PUBLIC	?strstr@@YAPADPADPBD@Z				; strstr
EXTRN	_strstr:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?strstr@@YAPADPADPBD@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__SubStr$ = 12						; size = 4
?strstr@@YAPADPADPBD@Z PROC				; strstr, COMDAT

; 190  : 	{ return (char*)strstr((const char*)_Str, _SubStr); }

  00000	e9 00 00 00 00	 jmp	 _strstr
?strstr@@YAPADPADPBD@Z ENDP				; strstr
_TEXT	ENDS
PUBLIC	?wcsrchr@@YAPA_WPA_W_W@Z			; wcsrchr
EXTRN	_wcsrchr:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?wcsrchr@@YAPA_WPA_W_W@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 2
?wcsrchr@@YAPA_WPA_W_W@Z PROC				; wcsrchr, COMDAT

; 335  :         {return ((wchar_t *)wcsrchr((const wchar_t *)_Str, _Ch)); }

  00000	e9 00 00 00 00	 jmp	 _wcsrchr
?wcsrchr@@YAPA_WPA_W_W@Z ENDP				; wcsrchr
_TEXT	ENDS
PUBLIC	_RtlSecureZeroMemory
; Function compile flags: /Ogtpy
; File c:\program files\microsoft sdks\windows\v7.1\include\winnt.h
;	COMDAT _RtlSecureZeroMemory
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_cnt$ = 12						; size = 4
_RtlSecureZeroMemory PROC				; COMDAT

; 13070:     volatile char *vptr = (volatile char *)ptr;
; 13071: 
; 13072: #if defined(_M_AMD64)
; 13073: 
; 13074:         __stosb((PBYTE )((DWORD64)vptr), 0, cnt);
; 13075: 
; 13076: #else
; 13077: 
; 13078:     while (cnt) {

  00000	8b 54 24 08	 mov	 edx, DWORD PTR _cnt$[esp-4]
  00004	8b 44 24 04	 mov	 eax, DWORD PTR _ptr$[esp-4]
  00008	8b c8		 mov	 ecx, eax
  0000a	85 d2		 test	 edx, edx
  0000c	74 0b		 je	 SHORT $LN1@RtlSecureZ
  0000e	8b ff		 npad	 2
$LL2@RtlSecureZ:

; 13079:         *vptr = 0;

  00010	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 13080:         vptr++;

  00013	41		 inc	 ecx

; 13081:         cnt--;

  00014	83 ea 01	 sub	 edx, 1
  00017	75 f7		 jne	 SHORT $LL2@RtlSecureZ
$LN1@RtlSecureZ:

; 13082:     }
; 13083: 
; 13084: #endif
; 13085: 
; 13086:     return ptr;
; 13087: }

  00019	c3		 ret	 0
_RtlSecureZeroMemory ENDP
_TEXT	ENDS
PUBLIC	?swprintf@@YAHPA_WPB_WZZ			; swprintf
EXTRN	__vswprintf:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\swprintf.inl
;	COMDAT ?swprintf@@YAHPA_WPB_WZZ
_TEXT	SEGMENT
__String$ = 8						; size = 4
__Format$ = 12						; size = 4
?swprintf@@YAHPA_WPB_WZZ PROC				; swprintf, COMDAT

; 87   :     va_list _Arglist;
; 88   :     _crt_va_start(_Arglist, _Format);
; 89   :     int _Ret = _vswprintf(_String, _Format, _Arglist);

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Format$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __String$[esp-4]
  00008	8d 44 24 0c	 lea	 eax, DWORD PTR __Format$[esp]
  0000c	50		 push	 eax
  0000d	51		 push	 ecx
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 __vswprintf
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 90   :     _crt_va_end(_Arglist);
; 91   :     return _Ret;
; 92   : }

  00017	c3		 ret	 0
?swprintf@@YAHPA_WPB_WZZ ENDP				; swprintf
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

  00000	56		 push	 esi
  00001	8d 44 24 08	 lea	 eax, DWORD PTR __Message$[esp]
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtpy
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00009	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000e	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00013	74 09		 je	 SHORT $LN6@scalar
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
$LN6@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	return (_Where);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Where$[esp-4]

; 60   : 	}

  00004	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	_wmemcpy_s
EXTRN	_memcpy_s:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\wchar.h
;	COMDAT _wmemcpy_s
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__N1$ = 12						; size = 4
__S2$ = 16						; size = 4
__N$ = 20						; size = 4
_wmemcpy_s PROC						; COMDAT

; 1232 : #pragma warning( push )
; 1233 : #pragma warning( disable : 6386 )
; 1234 :             return memcpy_s(_S1, _N1*sizeof(wchar_t), _S2, _N*sizeof(wchar_t));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __N$[esp-4]
  00004	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00007	89 4c 24 10	 mov	 DWORD PTR __N$[esp-4], ecx
  0000b	8b 44 24 08	 mov	 eax, DWORD PTR __N1$[esp-4]
  0000f	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00012	89 4c 24 08	 mov	 DWORD PTR __N1$[esp-4], ecx
  00016	e9 00 00 00 00	 jmp	 _memcpy_s
_wmemcpy_s ENDP
_TEXT	ENDS
PUBLIC	_wmemmove_s
EXTRN	_memmove_s:PROC
; Function compile flags: /Ogtpy
;	COMDAT _wmemmove_s
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__N1$ = 12						; size = 4
__S2$ = 16						; size = 4
__N$ = 20						; size = 4
_wmemmove_s PROC					; COMDAT

; 1252 : #pragma warning( push )
; 1253 : #pragma warning( disable : 6386 )
; 1254 :             return memmove_s(_S1, _N1*sizeof(wchar_t), _S2, _N*sizeof(wchar_t));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __N$[esp-4]
  00004	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00007	89 4c 24 10	 mov	 DWORD PTR __N$[esp-4], ecx
  0000b	8b 44 24 08	 mov	 eax, DWORD PTR __N1$[esp-4]
  0000f	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00012	89 4c 24 08	 mov	 DWORD PTR __N1$[esp-4], ecx
  00016	e9 00 00 00 00	 jmp	 _memmove_s
_wmemmove_s ENDP
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z	; std::char_traits<wchar_t>::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z PROC	; std::char_traits<wchar_t>::assign, COMDAT

; 310  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	66 8b 08	 mov	 cx, WORD PTR [eax]
  00007	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000b	66 89 0a	 mov	 WORD PTR [edx], cx

; 311  : 		}

  0000e	c3		 ret	 0
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ENDP	; std::char_traits<wchar_t>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@_W@std@@SAIPB_W@Z		; std::char_traits<wchar_t>::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@_W@std@@SAIPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@_W@std@@SAIPB_W@Z PROC		; std::char_traits<wchar_t>::length, COMDAT

; 333  : //		_DEBUG_POINTER(_First);
; 334  : 		return (::wcslen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL3@length:
  00007	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000a	83 c0 02	 add	 eax, 2
  0000d	66 85 c9	 test	 cx, cx
  00010	75 f5		 jne	 SHORT $LL3@length
  00012	2b c2		 sub	 eax, edx
  00014	d1 f8		 sar	 eax, 1

; 335  : 		}

  00016	c3		 ret	 0
?length@?$char_traits@_W@std@@SAIPB_W@Z ENDP		; std::char_traits<wchar_t>::length
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ; std::char_traits<wchar_t>::_Copy_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_words$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z PROC	; std::char_traits<wchar_t>::_Copy_s, COMDAT

; 348  : //		_DEBUG_POINTER(_First1);
; 349  : //		_DEBUG_POINTER(_First2);
; 350  : 		_CRT_SECURE_WMEMCPY(_First1, _Size_in_words, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size_in_words$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 351  : 		return _First1;

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 352  : 		}

  00026	c3		 ret	 0
?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ENDP	; std::char_traits<wchar_t>::_Copy_s
_TEXT	ENDS
PUBLIC	?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ; std::char_traits<wchar_t>::_Move_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_words$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z PROC	; std::char_traits<wchar_t>::_Move_s, COMDAT

; 372  : //		_DEBUG_POINTER(_First1);
; 373  : //		_DEBUG_POINTER(_First2);
; 374  : 		_CRT_SECURE_WMEMMOVE(_First1, _Size_in_words, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size_in_words$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 375  : 		return (_Elem *)_First1;

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 376  : 		}

  00026	c3		 ret	 0
?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ENDP	; std::char_traits<wchar_t>::_Move_s
_TEXT	ENDS
PUBLIC	?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z	; std::char_traits<wchar_t>::to_int_type
; Function compile flags: /Ogtpy
;	COMDAT ?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z PROC	; std::char_traits<wchar_t>::to_int_type, COMDAT

; 391  : 		return (_Ch);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	66 8b 00	 mov	 ax, WORD PTR [eax]

; 392  : 		}

  00007	c3		 ret	 0
?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z ENDP	; std::char_traits<wchar_t>::to_int_type
_TEXT	ENDS
PUBLIC	?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z	; std::char_traits<wchar_t>::eq_int_type
; Function compile flags: /Ogtpy
;	COMDAT ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z PROC	; std::char_traits<wchar_t>::eq_int_type, COMDAT

; 397  : 		return (_Left == _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	66 8b 08	 mov	 cx, WORD PTR [eax]
  00007	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000b	33 c0		 xor	 eax, eax
  0000d	66 3b 0a	 cmp	 cx, WORD PTR [edx]
  00010	0f 94 c0	 sete	 al

; 398  : 		}

  00013	c3		 ret	 0
?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z ENDP	; std::char_traits<wchar_t>::eq_int_type
_TEXT	ENDS
PUBLIC	?eof@?$char_traits@_W@std@@SAGXZ		; std::char_traits<wchar_t>::eof
; Function compile flags: /Ogtpy
;	COMDAT ?eof@?$char_traits@_W@std@@SAGXZ
_TEXT	SEGMENT
?eof@?$char_traits@_W@std@@SAGXZ PROC			; std::char_traits<wchar_t>::eof, COMDAT

; 402  : 		return (WEOF);

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 403  : 		}

  00005	c3		 ret	 0
?eof@?$char_traits@_W@std@@SAGXZ ENDP			; std::char_traits<wchar_t>::eof
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 425  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 426  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?eq@?$char_traits@D@std@@SA_NABD0@Z		; std::char_traits<char>::eq
; Function compile flags: /Ogtpy
;	COMDAT ?eq@?$char_traits@D@std@@SA_NABD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq@?$char_traits@D@std@@SA_NABD0@Z PROC		; std::char_traits<char>::eq, COMDAT

; 430  : 		return (_Left == _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000a	33 c0		 xor	 eax, eax
  0000c	3a 0a		 cmp	 cl, BYTE PTR [edx]
  0000e	0f 94 c0	 sete	 al

; 431  : 		}

  00011	c3		 ret	 0
?eq@?$char_traits@D@std@@SA_NABD0@Z ENDP		; std::char_traits<char>::eq
_TEXT	ENDS
PUBLIC	?compare@?$char_traits@D@std@@SAHPBD0I@Z	; std::char_traits<char>::compare
; Function compile flags: /Ogtpy
;	COMDAT ?compare@?$char_traits@D@std@@SAHPBD0I@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$char_traits@D@std@@SAHPBD0I@Z PROC		; std::char_traits<char>::compare, COMDAT

; 441  : //		_DEBUG_POINTER(_First1);
; 442  : //		_DEBUG_POINTER(_First2);
; 443  : 		return (::memcmp(_First1, _First2, _Count));

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First1$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 10	 mov	 esi, DWORD PTR __Count$[esp]
  0000d	57		 push	 edi
  0000e	83 fe 04	 cmp	 esi, 4
  00011	72 14		 jb	 SHORT $LN11@compare
$LL4@compare:
  00013	8b 02		 mov	 eax, DWORD PTR [edx]
  00015	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00017	75 12		 jne	 SHORT $LN5@compare
  00019	83 ee 04	 sub	 esi, 4
  0001c	83 c1 04	 add	 ecx, 4
  0001f	83 c2 04	 add	 edx, 4
  00022	83 fe 04	 cmp	 esi, 4
  00025	73 ec		 jae	 SHORT $LL4@compare
$LN11@compare:
  00027	85 f6		 test	 esi, esi
  00029	74 44		 je	 SHORT $LN6@compare
$LN5@compare:
  0002b	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0002e	0f b6 39	 movzx	 edi, BYTE PTR [ecx]
  00031	2b c7		 sub	 eax, edi
  00033	75 31		 jne	 SHORT $LN7@compare
  00035	83 fe 01	 cmp	 esi, 1
  00038	76 35		 jbe	 SHORT $LN6@compare
  0003a	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  0003e	0f b6 79 01	 movzx	 edi, BYTE PTR [ecx+1]
  00042	2b c7		 sub	 eax, edi
  00044	75 20		 jne	 SHORT $LN7@compare
  00046	83 fe 02	 cmp	 esi, 2
  00049	76 24		 jbe	 SHORT $LN6@compare
  0004b	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  0004f	0f b6 79 02	 movzx	 edi, BYTE PTR [ecx+2]
  00053	2b c7		 sub	 eax, edi
  00055	75 0f		 jne	 SHORT $LN7@compare
  00057	83 fe 03	 cmp	 esi, 3
  0005a	76 13		 jbe	 SHORT $LN6@compare
  0005c	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  00060	0f b6 49 03	 movzx	 ecx, BYTE PTR [ecx+3]
  00064	2b c1		 sub	 eax, ecx
$LN7@compare:
  00066	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  00069	5f		 pop	 edi
  0006a	83 c8 01	 or	 eax, 1
  0006d	5e		 pop	 esi

; 444  : 		}

  0006e	c3		 ret	 0
$LN6@compare:
  0006f	5f		 pop	 edi

; 441  : //		_DEBUG_POINTER(_First1);
; 442  : //		_DEBUG_POINTER(_First2);
; 443  : 		return (::memcmp(_First1, _First2, _Count));

  00070	33 c0		 xor	 eax, eax
  00072	5e		 pop	 esi

; 444  : 		}

  00073	c3		 ret	 0
?compare@?$char_traits@D@std@@SAHPBD0I@Z ENDP		; std::char_traits<char>::compare
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 448  : //		_DEBUG_POINTER(_First);
; 449  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@length@2:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $LL3@length@2
  0000e	2b c2		 sub	 eax, edx

; 450  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Copy_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Copy_s, COMDAT

; 463  : //		_DEBUG_POINTER(_First1);
; 464  : //		_DEBUG_POINTER(_First2);
; 465  : 		_CRT_SECURE_MEMCPY(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 466  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 467  : 		}

  00020	c3		 ret	 0
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Copy_s
_TEXT	ENDS
PUBLIC	?find@?$char_traits@D@std@@SAPBDPBDIABD@Z	; std::char_traits<char>::find
EXTRN	_memchr:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?find@?$char_traits@D@std@@SAPBDPBDIABD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 4
?find@?$char_traits@D@std@@SAPBDPBDIABD@Z PROC		; std::char_traits<char>::find, COMDAT

; 472  : //		_DEBUG_POINTER(_First);
; 473  : 		return ((const _Elem *)::memchr(_First, _Ch, _Count));

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ch$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00008	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0000b	50		 push	 eax
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __First$[esp]
  00010	52		 push	 edx
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _memchr
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 474  : 		}

  0001a	c3		 ret	 0
?find@?$char_traits@D@std@@SAPBDPBDIABD@Z ENDP		; std::char_traits<char>::find
_TEXT	ENDS
PUBLIC	?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Move_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Move_s, COMDAT

; 487  : //		_DEBUG_POINTER(_First1);
; 488  : //		_DEBUG_POINTER(_First2);
; 489  : 		_CRT_SECURE_MEMMOVE(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 490  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 491  : 		}

  00020	c3		 ret	 0
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Move_s
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAPADPADID@Z	; std::char_traits<char>::assign
EXTRN	_memset:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$char_traits@D@std@@SAPADPADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADPADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 495  : //		_DEBUG_POINTER(_First);
; 496  : 		return ((_Elem *)::memset(_First, _Ch, _Count));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	0f be 4c 24 0c	 movsx	 ecx, BYTE PTR __Ch$[esp-4]
  00009	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	52		 push	 edx
  00010	e8 00 00 00 00	 call	 _memset
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 497  : 		}

  00018	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPADPADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHABD@Z	; std::char_traits<char>::to_int_type
; Function compile flags: /Ogtpy
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		; std::char_traits<char>::to_int_type, COMDAT

; 506  : 		return ((unsigned char)_Ch);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 507  : 		}

  00007	c3		 ret	 0
?to_int_type@?$char_traits@D@std@@SAHABD@Z ENDP		; std::char_traits<char>::to_int_type
_TEXT	ENDS
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
; Function compile flags: /Ogtpy
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 512  : 		return (_Left == _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000a	33 c0		 xor	 eax, eax
  0000c	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0000e	0f 94 c0	 sete	 al

; 513  : 		}

  00011	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
; Function compile flags: /Ogtpy
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 517  : 		return (EOF);

  00000	83 c8 ff	 or	 eax, -1

; 518  : 		}

  00003	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
PUBLIC	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Pcont$ = 8						; size = 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z PROC	; std::_Aux_cont::_Aux_cont, COMDAT
; _this$ = ecx

; 364  : 	explicit _Aux_cont(const _Container_base_aux * const _Pcont)

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pcont$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx
  00008	c2 04 00	 ret	 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ENDP	; std::_Aux_cont::_Aux_cont
_TEXT	ENDS
PUBLIC	?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Aux_cont::_Getcont
; Function compile flags: /Ogtpy
;	COMDAT ?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Aux_cont::_Getcont, COMDAT
; _this$ = ecx

; 369  : 		return _Mycontainer;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 370  : 		}

  00002	c3		 ret	 0
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Aux_cont::_Getcont
_TEXT	ENDS
PUBLIC	??0_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::_Container_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??0_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::_Container_base_aux, COMDAT
; _this$ = ecx

; 379  : 	_Container_base_aux()

  00000	8b c1		 mov	 eax, ecx

; 380  : 		{
; 381  : 		// Do nothing: _Container_base_aux_alloc_real() will construct the aux object.
; 382  : 		}

  00002	c3		 ret	 0
??0_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::_Container_base_aux
_TEXT	ENDS
PUBLIC	??1_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::~_Container_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??1_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??1_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::~_Container_base_aux, COMDAT
; _this$ = ecx

; 403  : 		// Do nothing: ~_Container_base_aux_alloc_real() previously destroyed the aux object.
; 404  : 		}

  00000	c3		 ret	 0
??1_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::~_Container_base_aux
_TEXT	ENDS
PUBLIC	??0_Iterator_base_aux@std@@QAE@XZ		; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??0_Iterator_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iterator_base_aux@std@@QAE@XZ PROC			; std::_Iterator_base_aux::_Iterator_base_aux, COMDAT
; _this$ = ecx

; 448  : 	_Iterator_base_aux()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0_Iterator_base_aux@std@@QAE@XZ ENDP			; std::_Iterator_base_aux::_Iterator_base_aux
_TEXT	ENDS
PUBLIC	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z
_TEXT	SEGMENT
__Pcont$ = 8						; size = 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z PROC ; std::_Iterator_base_aux::_Set_container, COMDAT
; _this$ = ecx

; 453  : 		_Myaux = _Pcont->_Myownedaux;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pcont$[esp-4]
  00004	8b 10		 mov	 edx, DWORD PTR [eax]
  00006	89 11		 mov	 DWORD PTR [ecx], edx

; 454  : 		}

  00008	c2 04 00	 ret	 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ENDP ; std::_Iterator_base_aux::_Set_container
_TEXT	ENDS
PUBLIC	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
; Function compile flags: /Ogtpy
;	COMDAT ?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Iterator_base_aux::_Getmycont, COMDAT
; _this$ = ecx

; 458  : 		return _Myaux ? _Myaux->_Getcont() : 0;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	74 03		 je	 SHORT $LN3@Getmycont
  00006	8b 00		 mov	 eax, DWORD PTR [eax]

; 459  : 		}

  00008	c3		 ret	 0
$LN3@Getmycont:

; 458  : 		return _Myaux ? _Myaux->_Getcont() : 0;

  00009	33 c0		 xor	 eax, eax

; 459  : 		}

  0000b	c3		 ret	 0
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Iterator_base_aux::_Getmycont
_TEXT	ENDS
PUBLIC	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z PROC ; std::_Iterator_base_aux::_Same_container, COMDAT
; _this$ = ecx

; 463  : 		return _Myaux == _Other._Myaux;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Other$[esp-4]
  00006	33 c9		 xor	 ecx, ecx
  00008	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000a	0f 94 c1	 sete	 cl
  0000d	8a c1		 mov	 al, cl

; 464  : 		}

  0000f	c2 04 00	 ret	 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ENDP ; std::_Iterator_base_aux::_Same_container
_TEXT	ENDS
PUBLIC	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ	; std::_Iterator_base_aux::_Has_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Has_container@_Iterator_base_aux@std@@QBE_NXZ
_TEXT	SEGMENT
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ PROC	; std::_Iterator_base_aux::_Has_container, COMDAT
; _this$ = ecx

; 468  : 		return _Myaux != 0;

  00000	33 c0		 xor	 eax, eax
  00002	39 01		 cmp	 DWORD PTR [ecx], eax
  00004	0f 95 c0	 setne	 al

; 469  : 		}

  00007	c3		 ret	 0
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ENDP	; std::_Iterator_base_aux::_Has_container
_TEXT	ENDS
PUBLIC	?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ	; std::_Locinfo::_Getctype
EXTRN	__Getctype:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
;	COMDAT ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ
_TEXT	SEGMENT
$T151120 = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ PROC	; std::_Locinfo::_Getctype, COMDAT
; _this$ = ecx

; 123  : 		{	// return ctype stuff

  00000	83 ec 10	 sub	 esp, 16			; 00000010H

; 124  : 		return (::_Getctype());

  00003	8d 04 24	 lea	 eax, DWORD PTR $T151120[esp+16]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 __Getctype
  0000c	8b 4c 24 18	 mov	 ecx, DWORD PTR ___$ReturnUdt$[esp+16]
  00010	8b 10		 mov	 edx, DWORD PTR [eax]
  00012	89 11		 mov	 DWORD PTR [ecx], edx
  00014	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00017	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0001a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0001d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00020	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00023	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00026	8b c1		 mov	 eax, ecx

; 125  : 		}

  00028	83 c4 14	 add	 esp, 20			; 00000014H
  0002b	c2 04 00	 ret	 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ENDP	; std::_Locinfo::_Getctype
_TEXT	ENDS
PUBLIC	?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ	; std::_Locinfo::_Getcvt
EXTRN	__Getcvt:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ PROC		; std::_Locinfo::_Getcvt, COMDAT
; _this$ = ecx

; 129  : 		return (::_Getcvt());

  00000	e8 00 00 00 00	 call	 __Getcvt
  00005	8b c8		 mov	 ecx, eax
  00007	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx
  0000d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 130  : 		}

  00010	c2 04 00	 ret	 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ ENDP		; std::_Locinfo::_Getcvt
_TEXT	ENDS
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 73   : 			{	// construct with specified stamp value

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Val$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 74   : 			}

  00008	c2 04 00	 ret	 4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
PUBLIC	??Bid@locale@std@@QAEIXZ			; std::locale::id::operator unsigned int
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
; Function compile flags: /Ogtpy
;	COMDAT ??Bid@locale@std@@QAEIXZ
_TEXT	SEGMENT
__Lock$125299 = -4					; size = 4
??Bid@locale@std@@QAEIXZ PROC				; std::locale::id::operator unsigned int, COMDAT
; _this$ = ecx

; 77   : 			{	// get stamp, with lazy allocation

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 78   : 			if (_Id == 0)

  00004	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00007	75 26		 jne	 SHORT $LN6@operator

; 79   : 				{	// still zero, allocate stamp
; 80   : 				_BEGIN_LOCK(_LOCK_LOCALE)

  00009	6a 00		 push	 0
  0000b	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$125299[esp+12]
  0000f	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 81   : 					if (_Id == 0)

  00014	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00017	75 0d		 jne	 SHORT $LN1@operator

; 82   : 						_Id = ++_Id_cnt;

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  0001e	40		 inc	 eax
  0001f	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00024	89 06		 mov	 DWORD PTR [esi], eax
$LN1@operator:

; 83   : 				_END_LOCK()

  00026	8d 4c 24 04	 lea	 ecx, DWORD PTR __Lock$125299[esp+8]
  0002a	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN6@operator:

; 84   : 				}
; 85   : 			return (_Id);

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	5e		 pop	 esi

; 86   : 			}

  00032	59		 pop	 ecx
  00033	c3		 ret	 0
??Bid@locale@std@@QAEIXZ ENDP				; std::locale::id::operator unsigned int
_TEXT	ENDS
PUBLIC	?_Incref@facet@locale@std@@QAEXXZ		; std::locale::facet::_Incref
; Function compile flags: /Ogtpy
;	COMDAT ?_Incref@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
__Lock$125305 = -4					; size = 4
?_Incref@facet@locale@std@@QAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 117  : 			{	// safely increment the reference count

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 118  : 			_BEGIN_LOCK(_LOCK_LOCALE)

  00004	6a 00		 push	 0
  00006	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$125305[esp+12]
  0000a	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 119  : 				if (_Refs < (size_t)(-1))

  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	83 f8 ff	 cmp	 eax, -1
  00015	73 04		 jae	 SHORT $LN1@Incref

; 120  : 					++_Refs;

  00017	40		 inc	 eax
  00018	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@Incref:

; 121  : 			_END_LOCK()

  0001b	8d 4c 24 04	 lea	 ecx, DWORD PTR __Lock$125305[esp+8]
  0001f	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00024	5e		 pop	 esi

; 122  : 			}

  00025	59		 pop	 ecx
  00026	c3		 ret	 0
?_Incref@facet@locale@std@@QAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
PUBLIC	?_Decref@facet@locale@std@@QAEPAV123@XZ		; std::locale::facet::_Decref
; Function compile flags: /Ogtpy
;	COMDAT ?_Decref@facet@locale@std@@QAEPAV123@XZ
_TEXT	SEGMENT
__Lock$125310 = -4					; size = 4
?_Decref@facet@locale@std@@QAEPAV123@XZ PROC		; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 125  : 			{	// safely decrement the reference count, return this when dead

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 126  : 			_BEGIN_LOCK(_LOCK_LOCALE)

  00005	6a 00		 push	 0
  00007	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$125310[esp+16]
  0000b	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 127  : 				if (0 < _Refs && _Refs < (size_t)(-1))

  00010	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00013	85 c0		 test	 eax, eax
  00015	76 09		 jbe	 SHORT $LN1@Decref
  00017	83 f8 ff	 cmp	 eax, -1
  0001a	73 04		 jae	 SHORT $LN1@Decref

; 128  : 					--_Refs;

  0001c	48		 dec	 eax
  0001d	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN1@Decref:

; 129  : 				return (_Refs == 0 ? this : 0);

  00020	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00023	f7 de		 neg	 esi
  00025	1b f6		 sbb	 esi, esi
  00027	f7 d6		 not	 esi
  00029	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$125310[esp+12]
  0002d	23 f7		 and	 esi, edi
  0002f	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00034	5f		 pop	 edi
  00035	8b c6		 mov	 eax, esi
  00037	5e		 pop	 esi

; 130  : 			_END_LOCK()
; 131  : 			}

  00038	59		 pop	 ecx
  00039	c3		 ret	 0
?_Decref@facet@locale@std@@QAEPAV123@XZ ENDP		; std::locale::facet::_Decref
_TEXT	ENDS
PUBLIC	?_Register@facet@locale@std@@QAEXXZ		; std::locale::facet::_Register
EXTRN	?facet_Register@facet@locale@std@@CAXPAV123@@Z:PROC ; std::locale::facet::facet_Register
; Function compile flags: /Ogtpy
;	COMDAT ?_Register@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
?_Register@facet@locale@std@@QAEXXZ PROC		; std::locale::facet::_Register, COMDAT
; _this$ = ecx

; 135  : #if defined(_M_CEE)
; 136  : 			facet_Register_m(this);
; 137  : #else
; 138  : 			facet_Register(this);

  00000	51		 push	 ecx
  00001	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  00006	59		 pop	 ecx

; 139  : #endif
; 140  : 			}

  00007	c3		 ret	 0
?_Register@facet@locale@std@@QAEXXZ ENDP		; std::locale::facet::_Register
_TEXT	ENDS
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??1facet@locale@std@@UAE@XZ			; std::locale::facet::~facet
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Efacet@locale@std@@UAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1facet@locale@std@@UAE@XZ
_TEXT	SEGMENT
??1facet@locale@std@@UAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx

; 170  : 			{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@

; 171  : 			}

  00006	c3		 ret	 0
??1facet@locale@std@@UAE@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
PUBLIC	??0facet@locale@std@@IAE@I@Z			; std::locale::facet::facet
; Function compile flags: /Ogtpy
;	COMDAT ??0facet@locale@std@@IAE@I@Z
_TEXT	SEGMENT
__Initrefs$ = 8						; size = 4
??0facet@locale@std@@IAE@I@Z PROC			; std::locale::facet::facet, COMDAT
; _this$ = ecx

; 176  : 			{	// construct with initial reference count

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Initrefs$[esp-4]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7facet@locale@std@@6B@
  0000c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 177  : 			}

  0000f	c2 04 00	 ret	 4
??0facet@locale@std@@IAE@I@Z ENDP			; std::locale::facet::facet
_TEXT	ENDS
PUBLIC	??0locale@std@@QAE@XZ				; std::locale::locale
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	?_Init@locale@std@@CAPAV_Locimp@12@XZ:PROC	; std::locale::_Init
; Function compile flags: /Ogtpy
;	COMDAT ??0locale@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$151147 = -4					; size = 4
??0locale@std@@QAE@XZ PROC				; std::locale::locale, COMDAT
; _this$ = ecx

; 324  : 		{	// construct from current locale

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Init
  0000a	89 07		 mov	 DWORD PTR [edi], eax

; 325  : 		_Getgloballocale()->_Incref();

  0000c	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  00011	6a 00		 push	 0
  00013	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$151147[esp+16]
  00017	8b f0		 mov	 esi, eax
  00019	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0001e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00021	83 f8 ff	 cmp	 eax, -1
  00024	73 04		 jae	 SHORT $LN3@locale
  00026	40		 inc	 eax
  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN3@locale:
  0002a	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$151147[esp+12]
  0002e	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 326  : 		}

  00033	8b c7		 mov	 eax, edi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	59		 pop	 ecx
  00038	c3		 ret	 0
??0locale@std@@QAE@XZ ENDP				; std::locale::locale
_TEXT	ENDS
PUBLIC	??0locale@std@@QAE@ABV01@@Z			; std::locale::locale
; Function compile flags: /Ogtpy
;	COMDAT ??0locale@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Lock$151155 = 8					; size = 4
__Right$ = 8						; size = 4
??0locale@std@@QAE@ABV01@@Z PROC			; std::locale::locale, COMDAT
; _this$ = ecx

; 334  : 		{	// construct by copying

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	56		 push	 esi
  00005	8b 30		 mov	 esi, DWORD PTR [eax]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 335  : 		_Ptr->_Incref();

  0000a	6a 00		 push	 0
  0000c	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$151155[esp+8]
  00010	89 37		 mov	 DWORD PTR [edi], esi
  00012	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	83 f8 ff	 cmp	 eax, -1
  0001d	73 04		 jae	 SHORT $LN3@locale@2
  0001f	40		 inc	 eax
  00020	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN3@locale@2:
  00023	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$151155[esp+4]
  00027	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 336  : 		}

  0002c	8b c7		 mov	 eax, edi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c2 04 00	 ret	 4
??0locale@std@@QAE@ABV01@@Z ENDP			; std::locale::locale
_TEXT	ENDS
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
; Function compile flags: /Ogtpy
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$151168 = -4					; size = 4
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 390  : 		{	// destroy the object

  00000	51		 push	 ecx
  00001	57		 push	 edi

; 391  : 		if (_Ptr != 0)

  00002	8b 39		 mov	 edi, DWORD PTR [ecx]
  00004	85 ff		 test	 edi, edi
  00006	74 3f		 je	 SHORT $LN4@locale@3

; 392  : 			_DELETE_CRT(_Ptr->_Decref());

  00008	6a 00		 push	 0
  0000a	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$151168[esp+12]
  0000e	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00013	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00016	85 c0		 test	 eax, eax
  00018	76 09		 jbe	 SHORT $LN6@locale@3
  0001a	83 f8 ff	 cmp	 eax, -1
  0001d	73 04		 jae	 SHORT $LN6@locale@3
  0001f	48		 dec	 eax
  00020	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN6@locale@3:
  00023	56		 push	 esi
  00024	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00027	f7 de		 neg	 esi
  00029	1b f6		 sbb	 esi, esi
  0002b	f7 d6		 not	 esi
  0002d	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$151168[esp+12]
  00031	23 f7		 and	 esi, edi
  00033	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00038	85 f6		 test	 esi, esi
  0003a	74 0a		 je	 SHORT $LN9@locale@3
  0003c	8b 06		 mov	 eax, DWORD PTR [esi]
  0003e	8b 10		 mov	 edx, DWORD PTR [eax]
  00040	6a 01		 push	 1
  00042	8b ce		 mov	 ecx, esi
  00044	ff d2		 call	 edx
$LN9@locale@3:
  00046	5e		 pop	 esi
$LN4@locale@3:
  00047	5f		 pop	 edi

; 393  : 		}

  00048	59		 pop	 ecx
  00049	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
; Function compile flags: /Ogtpy
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 413  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 414  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	56		 push	 esi
  00003	8b 74 24 08	 mov	 esi, DWORD PTR __Id$[esp]
  00007	3b 71 0c	 cmp	 esi, DWORD PTR [ecx+12]
  0000a	73 24		 jae	 SHORT $LN6@Getfacet
  0000c	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000f	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]

; 415  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00012	85 c0		 test	 eax, eax
  00014	75 20		 jne	 SHORT $LN1@Getfacet
$LN10@Getfacet:
  00016	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  0001a	74 1a		 je	 SHORT $LN1@Getfacet

; 416  : 			return (_Facptr);	// found facet or not transparent, return pointer
; 417  : 		else
; 418  : 			{	// look in current locale
; 419  : 			locale::_Locimp *_Ptr = _Getgloballocale();

  0001c	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 420  : 			return (_Id < _Ptr->_Facetcount
; 421  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 422  : 				: 0);	// no entry in current locale

  00021	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00024	73 0e		 jae	 SHORT $LN8@Getfacet
  00026	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00029	8b 04 b1	 mov	 eax, DWORD PTR [ecx+esi*4]
  0002c	5e		 pop	 esi

; 423  : 			}
; 424  : 		}

  0002d	c2 04 00	 ret	 4
$LN6@Getfacet:

; 413  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 414  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  00030	33 c0		 xor	 eax, eax

; 415  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00032	eb e2		 jmp	 SHORT $LN10@Getfacet
$LN8@Getfacet:

; 420  : 			return (_Id < _Ptr->_Facetcount
; 421  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 422  : 				: 0);	// no entry in current locale

  00034	33 c0		 xor	 eax, eax
$LN1@Getfacet:
  00036	5e		 pop	 esi

; 423  : 			}
; 424  : 		}

  00037	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gfacet@locale@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@UAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0000e	74 09		 je	 SHORT $LN6@scalar@2
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN6@scalar@2:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_Gfacet@locale@std@@UAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??0ctype_base@std@@QAE@I@Z			; std::ctype_base::ctype_base
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Ectype_base@std@@UAEPAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD FLAT:??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD FLAT:??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT
??_R0?AUctype_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUctype_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 00H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUctype_base@std@@@8
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DD FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DD	FLAT:??_Ectype_base@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0ctype_base@std@@QAE@I@Z
_TEXT	SEGMENT
__Refs$ = 8						; size = 4
??0ctype_base@std@@QAE@I@Z PROC				; std::ctype_base::ctype_base, COMDAT
; _this$ = ecx

; 1358 : 		{	// default constructor

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Refs$[esp-4]
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ctype_base@std@@6B@

; 1359 : 		}

  0000f	c2 04 00	 ret	 4
??0ctype_base@std@@QAE@I@Z ENDP				; std::ctype_base::ctype_base
_TEXT	ENDS
PUBLIC	??1ctype_base@std@@UAE@XZ			; std::ctype_base::~ctype_base
; Function compile flags: /Ogtpy
;	COMDAT ??1ctype_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ctype_base@std@@UAE@XZ PROC				; std::ctype_base::~ctype_base, COMDAT
; _this$ = ecx

; 1363 : 		}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
  00006	c3		 ret	 0
??1ctype_base@std@@UAE@XZ ENDP				; std::ctype_base::~ctype_base
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gctype_base@std@@UAEPAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0000e	74 09		 je	 SHORT $LN8@scalar@3
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN8@scalar@3:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_Gctype_base@std@@UAEPAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?widen@?$ctype@D@std@@QBEDD@Z			; std::ctype<char>::widen
; Function compile flags: /Ogtpy
;	COMDAT ?widen@?$ctype@D@std@@QBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?widen@?$ctype@D@std@@QBEDD@Z PROC			; std::ctype<char>::widen, COMDAT
; _this$ = ecx

; 1716 : 		return (do_widen(_Byte));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00005	ff e0		 jmp	 eax
?widen@?$ctype@D@std@@QBEDD@Z ENDP			; std::ctype<char>::widen
_TEXT	ENDS
PUBLIC	?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z	; std::ctype<char>::_Init
; Function compile flags: /Ogtpy
;	COMDAT ?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
$T151222 = -16						; size = 16
__Lobj$ = 8						; size = 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z PROC		; std::ctype<char>::_Init, COMDAT
; _this$ = ecx

; 1807 : 		{	// initialize from _Lobj

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	56		 push	 esi

; 1808 : 		_Ctype = _Lobj._Getctype();

  00004	8d 44 24 04	 lea	 eax, DWORD PTR $T151222[esp+20]
  00008	50		 push	 eax
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 __Getctype
  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00015	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00018	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  0001b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001e	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00021	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00024	83 c4 04	 add	 esp, 4
  00027	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0002a	5e		 pop	 esi

; 1809 : 		}

  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	c2 04 00	 ret	 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z ENDP		; std::ctype<char>::_Init
_TEXT	ENDS
PUBLIC	?widen@?$ctype@_W@std@@QBE_WD@Z			; std::ctype<wchar_t>::widen
; Function compile flags: /Ogtpy
;	COMDAT ?widen@?$ctype@_W@std@@QBE_WD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?widen@?$ctype@_W@std@@QBE_WD@Z PROC			; std::ctype<wchar_t>::widen, COMDAT
; _this$ = ecx

; 1965 : 		return (do_widen(_Byte));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00005	ff e0		 jmp	 eax
?widen@?$ctype@_W@std@@QBE_WD@Z ENDP			; std::ctype<wchar_t>::widen
_TEXT	ENDS
PUBLIC	?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z	; std::ctype<wchar_t>::_Init
; Function compile flags: /Ogtpy
;	COMDAT ?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
$T151236 = -16						; size = 16
__Lobj$ = 8						; size = 4
?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z PROC	; std::ctype<wchar_t>::_Init, COMDAT
; _this$ = ecx

; 2047 : 		{	// initialize from _Lobj

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	56		 push	 esi

; 2048 : 		_Ctype = _Lobj._Getctype();

  00004	8d 44 24 04	 lea	 eax, DWORD PTR $T151236[esp+20]
  00008	50		 push	 eax
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 __Getctype
  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00015	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00018	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  0001b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001e	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00021	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00024	83 c4 04	 add	 esp, 4
  00027	89 56 14	 mov	 DWORD PTR [esi+20], edx

; 2049 : 		_Cvt = _Lobj._Getcvt();

  0002a	e8 00 00 00 00	 call	 __Getcvt
  0002f	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00032	89 56 1c	 mov	 DWORD PTR [esi+28], edx
  00035	5e		 pop	 esi

; 2050 : 		}

  00036	83 c4 10	 add	 esp, 16			; 00000010H
  00039	c2 04 00	 ret	 4
?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z ENDP	; std::ctype<wchar_t>::_Init
_TEXT	ENDS
PUBLIC	?rdstate@ios_base@std@@QBEHXZ			; std::ios_base::rdstate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
;	COMDAT ?rdstate@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?rdstate@ios_base@std@@QBEHXZ PROC			; std::ios_base::rdstate, COMDAT
; _this$ = ecx

; 311  : 		return (_Mystate);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 312  : 		}

  00003	c3		 ret	 0
?rdstate@ios_base@std@@QBEHXZ ENDP			; std::ios_base::rdstate
_TEXT	ENDS
PUBLIC	?good@ios_base@std@@QBE_NXZ			; std::ios_base::good
; Function compile flags: /Ogtpy
;	COMDAT ?good@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?good@ios_base@std@@QBE_NXZ PROC			; std::ios_base::good, COMDAT
; _this$ = ecx

; 334  : 		return (rdstate() == goodbit);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  00005	0f 94 c0	 sete	 al

; 335  : 		}

  00008	c3		 ret	 0
?good@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::good
_TEXT	ENDS
PUBLIC	?fail@ios_base@std@@QBE_NXZ			; std::ios_base::fail
; Function compile flags: /Ogtpy
;	COMDAT ?fail@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?fail@ios_base@std@@QBE_NXZ PROC			; std::ios_base::fail, COMDAT
; _this$ = ecx

; 344  : 		return (((int)rdstate()
; 345  : 			& ((int)badbit | (int)failbit)) != 0);

  00000	f6 41 08 06	 test	 BYTE PTR [ecx+8], 6
  00004	b8 00 00 00 00	 mov	 eax, 0
  00009	0f 95 c0	 setne	 al

; 346  : 		}

  0000c	c3		 ret	 0
?fail@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::fail
_TEXT	ENDS
PUBLIC	?flags@ios_base@std@@QBEHXZ			; std::ios_base::flags
; Function compile flags: /Ogtpy
;	COMDAT ?flags@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?flags@ios_base@std@@QBEHXZ PROC			; std::ios_base::flags, COMDAT
; _this$ = ecx

; 374  : 		return (_Fmtfl);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 375  : 		}

  00003	c3		 ret	 0
?flags@ios_base@std@@QBEHXZ ENDP			; std::ios_base::flags
_TEXT	ENDS
PUBLIC	?setf@ios_base@std@@QAEHHH@Z			; std::ios_base::setf
; Function compile flags: /Ogtpy
;	COMDAT ?setf@ios_base@std@@QAEHHH@Z
_TEXT	SEGMENT
__Newfmtflags$ = 8					; size = 4
__Mask$ = 12						; size = 4
?setf@ios_base@std@@QAEHHH@Z PROC			; std::ios_base::setf, COMDAT
; _this$ = ecx

; 394  : 		ios_base::fmtflags _Oldfmtflags = _Fmtfl;
; 395  : 		_Fmtfl = (fmtflags)(((int)_Fmtfl & (int)~_Mask)
; 396  : 			| ((int)_Newfmtflags & (int)_Mask & (int)_Fmtmask));

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Mask$[esp-4]
  00004	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7c 24 0c	 mov	 edi, DWORD PTR __Newfmtflags$[esp+4]
  0000d	8b f2		 mov	 esi, edx
  0000f	f7 d6		 not	 esi
  00011	23 fa		 and	 edi, edx
  00013	23 f0		 and	 esi, eax
  00015	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  0001b	0b f7		 or	 esi, edi
  0001d	5f		 pop	 edi
  0001e	89 71 10	 mov	 DWORD PTR [ecx+16], esi
  00021	5e		 pop	 esi

; 397  : 		return (_Oldfmtflags);
; 398  : 		}

  00022	c2 08 00	 ret	 8
?setf@ios_base@std@@QAEHHH@Z ENDP			; std::ios_base::setf
_TEXT	ENDS
PUBLIC	?width@ios_base@std@@QBEHXZ			; std::ios_base::width
; Function compile flags: /Ogtpy
;	COMDAT ?width@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?width@ios_base@std@@QBEHXZ PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 419  : 		return (_Wide);

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 420  : 		}

  00003	c3		 ret	 0
?width@ios_base@std@@QBEHXZ ENDP			; std::ios_base::width
_TEXT	ENDS
PUBLIC	?width@ios_base@std@@QAEHH@Z			; std::ios_base::width
; Function compile flags: /Ogtpy
;	COMDAT ?width@ios_base@std@@QAEHH@Z
_TEXT	SEGMENT
__Newwidth$ = 8						; size = 4
?width@ios_base@std@@QAEHH@Z PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 424  : 		streamsize _Oldwidth = _Wide;
; 425  : 		_Wide = _Newwidth;

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Newwidth$[esp-4]
  00004	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00007	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 426  : 		return (_Oldwidth);
; 427  : 		}

  0000a	c2 04 00	 ret	 4
?width@ios_base@std@@QAEHH@Z ENDP			; std::ios_base::width
_TEXT	ENDS
PUBLIC	?getloc@ios_base@std@@QBE?AVlocale@2@XZ		; std::ios_base::getloc
; Function compile flags: /Ogtpy
;	COMDAT ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
_TEXT	SEGMENT
$T151267 = -4						; size = 4
__Lock$151280 = 8					; size = 4
___$ReturnUdt$ = 8					; size = 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ PROC		; std::ios_base::getloc, COMDAT
; _this$ = ecx

; 430  : 		{	// get locale

  00000	51		 push	 ecx

; 431  : 		return (*_Ploc);

  00001	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00004	56		 push	 esi
  00005	8b 30		 mov	 esi, DWORD PTR [eax]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	6a 00		 push	 0
  0000e	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$151280[esp+12]
  00012	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T151267[esp+16], 0
  0001a	89 37		 mov	 DWORD PTR [edi], esi
  0001c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00021	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00024	83 f8 ff	 cmp	 eax, -1
  00027	73 04		 jae	 SHORT $LN7@getloc
  00029	40		 inc	 eax
  0002a	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@getloc:
  0002d	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$151280[esp+8]
  00031	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00036	8b c7		 mov	 eax, edi
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi

; 432  : 		}

  0003a	59		 pop	 ecx
  0003b	c2 04 00	 ret	 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ ENDP		; std::ios_base::getloc
_TEXT	ENDS
PUBLIC	??_7ios_base@std@@6B@				; std::ios_base::`vftable'
PUBLIC	??1ios_base@std@@UAE@XZ				; std::ios_base::~ios_base
PUBLIC	??_R4ios_base@std@@6B@				; std::ios_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z:PROC	; std::ios_base::_Ios_base_dtor
EXTRN	??_Eios_base@std@@UAEPAXI@Z:PROC		; std::ios_base::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
_DATA	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
_DATA	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ios_base@std@@6B@
rdata$r	SEGMENT
??_R4ios_base@std@@6B@ DD 00H				; std::ios_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVios_base@std@@@8
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7ios_base@std@@6B@
CONST	SEGMENT
??_7ios_base@std@@6B@ DD FLAT:??_R4ios_base@std@@6B@	; std::ios_base::`vftable'
	DD	FLAT:??_Eios_base@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ios_base@std@@UAE@XZ PROC				; std::ios_base::~ios_base, COMDAT
; _this$ = ecx

; 494  :         _Ios_base_dtor(this);

  00000	51		 push	 ecx
  00001	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00007	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000c	59		 pop	 ecx

; 495  :         }

  0000d	c3		 ret	 0
??1ios_base@std@@UAE@XZ ENDP				; std::ios_base::~ios_base
_TEXT	ENDS
PUBLIC	??0ios_base@std@@IAE@XZ				; std::ios_base::ios_base
; Function compile flags: /Ogtpy
;	COMDAT ??0ios_base@std@@IAE@XZ
_TEXT	SEGMENT
??0ios_base@std@@IAE@XZ PROC				; std::ios_base::ios_base, COMDAT
; _this$ = ecx

; 510  : 	__CLR_OR_THIS_CALL ios_base()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@

; 511  : 		{	// default constructor
; 512  : 		}

  00008	c3		 ret	 0
??0ios_base@std@@IAE@XZ ENDP				; std::ios_base::ios_base
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gios_base@std@@UAEPAXI@Z PROC			; std::ios_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	56		 push	 esi
  00004	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0000a	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000f	83 c4 04	 add	 esp, 4
  00012	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00017	74 09		 je	 SHORT $LN6@scalar@4
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	83 c4 04	 add	 esp, 4
$LN6@scalar@4:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c2 04 00	 ret	 4
??_Gios_base@std@@UAEPAXI@Z ENDP			; std::ios_base::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?dec@std@@YAAAVios_base@1@AAV21@@Z		; std::dec
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?dec@std@@YAAAVios_base@1@AAV21@@Z
_TEXT	SEGMENT
__Iosbase$ = 8						; size = 4
?dec@std@@YAAAVios_base@1@AAV21@@Z PROC			; std::dec, COMDAT

; 179  : 	_Iosbase.setf(ios_base::dec, ios_base::basefield);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Iosbase$[esp-4]
  00004	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00007	81 e1 ff f3 ff
	ff		 and	 ecx, -3073		; fffff3ffH
  0000d	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  00013	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 180  : 	return (_Iosbase);
; 181  : 	}

  00016	c3		 ret	 0
?dec@std@@YAAAVios_base@1@AAV21@@Z ENDP			; std::dec
_TEXT	ENDS
PUBLIC	?hex@std@@YAAAVios_base@1@AAV21@@Z		; std::hex
; Function compile flags: /Ogtpy
;	COMDAT ?hex@std@@YAAAVios_base@1@AAV21@@Z
_TEXT	SEGMENT
__Iosbase$ = 8						; size = 4
?hex@std@@YAAAVios_base@1@AAV21@@Z PROC			; std::hex, COMDAT

; 191  : 	_Iosbase.setf(ios_base::hex, ios_base::basefield);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Iosbase$[esp-4]
  00004	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00007	81 e1 ff f9 ff
	ff		 and	 ecx, -1537		; fffff9ffH
  0000d	81 c9 00 08 00
	00		 or	 ecx, 2048		; 00000800H
  00013	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 192  : 	return (_Iosbase);
; 193  : 	}

  00016	c3		 ret	 0
?hex@std@@YAAAVios_base@1@AAV21@@Z ENDP			; std::hex
_TEXT	ENDS
PUBLIC	??_7Container@ForEach@CipherShed@@6B@		; CipherShed::ForEach::Container::`vftable'
PUBLIC	??0Container@ForEach@CipherShed@@QAE@XZ		; CipherShed::ForEach::Container::Container
PUBLIC	??_R4Container@ForEach@CipherShed@@6B@		; CipherShed::ForEach::Container::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUContainer@ForEach@CipherShed@@@8	; CipherShed::ForEach::Container `RTTI Type Descriptor'
PUBLIC	??_R3Container@ForEach@CipherShed@@8		; CipherShed::ForEach::Container::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Container@ForEach@CipherShed@@8		; CipherShed::ForEach::Container::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Container@ForEach@CipherShed@@8	; CipherShed::ForEach::Container::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EContainer@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::Container::`vector deleting destructor'
EXTRN	__purecall:PROC
;	COMDAT ??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
rdata$r	SEGMENT
??_R1A@?0A@EA@Container@ForEach@CipherShed@@8 DD FLAT:??_R0?AUContainer@ForEach@CipherShed@@@8 ; CipherShed::ForEach::Container::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2Container@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2Container@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8 ; CipherShed::ForEach::Container::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Container@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3Container@ForEach@CipherShed@@8 DD 00H		; CipherShed::ForEach::Container::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUContainer@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUContainer@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::Container `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUContainer@ForEach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Container@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4Container@ForEach@CipherShed@@6B@ DD 00H		; CipherShed::ForEach::Container::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUContainer@ForEach@CipherShed@@@8
	DD	FLAT:??_R3Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7Container@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7Container@ForEach@CipherShed@@6B@ DD FLAT:??_R4Container@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::Container::`vftable'
	DD	FLAT:??_EContainer@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0Container@ForEach@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0Container@ForEach@CipherShed@@QAE@XZ PROC		; CipherShed::ForEach::Container::Container, COMDAT
; _this$ = ecx

; 19   : 			Container () : InnerContinue (true), InnerEndCondition (false) { }

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00008	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  0000c	c6 40 05 00	 mov	 BYTE PTR [eax+5], 0
  00010	c3		 ret	 0
??0Container@ForEach@CipherShed@@QAE@XZ ENDP		; CipherShed::ForEach::Container::Container
_TEXT	ENDS
PUBLIC	??1Container@ForEach@CipherShed@@UAE@XZ		; CipherShed::ForEach::Container::~Container
; Function compile flags: /Ogtpy
;	COMDAT ??1Container@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
??1Container@ForEach@CipherShed@@UAE@XZ PROC		; CipherShed::ForEach::Container::~Container, COMDAT
; _this$ = ecx

; 20   : 			virtual ~Container () { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00006	c3		 ret	 0
??1Container@ForEach@CipherShed@@UAE@XZ ENDP		; CipherShed::ForEach::Container::~Container
_TEXT	ENDS
PUBLIC	?Continue@Container@ForEach@CipherShed@@QBEXXZ	; CipherShed::ForEach::Container::Continue
; Function compile flags: /Ogtpy
;	COMDAT ?Continue@Container@ForEach@CipherShed@@QBEXXZ
_TEXT	SEGMENT
?Continue@Container@ForEach@CipherShed@@QBEXXZ PROC	; CipherShed::ForEach::Container::Continue, COMDAT
; _this$ = ecx

; 22   : 			void Continue () const { InnerContinue = true; }

  00000	c6 41 04 01	 mov	 BYTE PTR [ecx+4], 1
  00004	c3		 ret	 0
?Continue@Container@ForEach@CipherShed@@QBEXXZ ENDP	; CipherShed::ForEach::Container::Continue
_TEXT	ENDS
PUBLIC	?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ ; CipherShed::ForEach::Container::InnerIsNotEnd
; Function compile flags: /Ogtpy
;	COMDAT ?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ
_TEXT	SEGMENT
?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ PROC ; CipherShed::ForEach::Container::InnerIsNotEnd, COMDAT
; _this$ = ecx

; 23   : 			bool InnerIsNotEnd () const { return InnerEndCondition = !InnerEndCondition; }

  00000	80 79 05 00	 cmp	 BYTE PTR [ecx+5], 0
  00004	0f 94 c0	 sete	 al
  00007	88 41 05	 mov	 BYTE PTR [ecx+5], al
  0000a	c3		 ret	 0
?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ ENDP ; CipherShed::ForEach::Container::InnerIsNotEnd
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_GContainer@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GContainer@ForEach@CipherShed@@UAEPAXI@Z PROC	; CipherShed::ForEach::Container::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  0000e	74 09		 je	 SHORT $LN6@scalar@5
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN6@scalar@5:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_GContainer@ForEach@CipherShed@@UAEPAXI@Z ENDP	; CipherShed::ForEach::Container::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_06DIBEOEIP@?2?2?4?2?$CFs?$AA@		; `string'
PUBLIC	??_C@_0N@ILHOJEMA@truecrypt?$CFlu?$AA@		; `string'
PUBLIC	_FakeDosNameForDevice
EXTRN	__imp__DefineDosDeviceA@12:PROC
EXTRN	_sprintf:PROC
EXTRN	__imp__GetCurrentProcessId@0:PROC
;	COMDAT ??_C@_06DIBEOEIP@?2?2?4?2?$CFs?$AA@
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
CONST	SEGMENT
??_C@_06DIBEOEIP@?2?2?4?2?$CFs?$AA@ DB '\\.\%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@ILHOJEMA@truecrypt?$CFlu?$AA@
CONST	SEGMENT
??_C@_0N@ILHOJEMA@truecrypt?$CFlu?$AA@ DB 'truecrypt%lu', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _FakeDosNameForDevice
_TEXT	SEGMENT
_lpszDiskFile$ = 8					; size = 4
_lpszDosDevice$ = 12					; size = 4
_lpszCFDevice$ = 16					; size = 4
_bNameOnly$ = 20					; size = 4
_FakeDosNameForDevice PROC				; COMDAT

; 318  : {

  00000	56		 push	 esi

; 319  : 	BOOL bDosLinkCreated = TRUE;
; 320  :     //todo: get buffer size as function parameter
; 321  : 	sprintf (lpszDosDevice, "truecrypt%lu", GetCurrentProcessId ());

  00001	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcessId@0
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR _lpszDosDevice$[esp]
  0000b	50		 push	 eax
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0N@ILHOJEMA@truecrypt?$CFlu?$AA@
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 _sprintf
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 322  : 
; 323  : 	if (bNameOnly == FALSE)

  0001a	83 7c 24 14 00	 cmp	 DWORD PTR _bNameOnly$[esp], 0
  0001f	75 19		 jne	 SHORT $LN2@FakeDosNam

; 324  : 		bDosLinkCreated = DefineDosDevice (DDD_RAW_TARGET_PATH, lpszDosDevice, lpszDiskFile);

  00021	8b 44 24 08	 mov	 eax, DWORD PTR _lpszDiskFile$[esp]
  00025	50		 push	 eax
  00026	56		 push	 esi
  00027	6a 01		 push	 1
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefineDosDeviceA@12

; 325  : 
; 326  : 	if (bDosLinkCreated == FALSE)

  0002f	85 c0		 test	 eax, eax
  00031	75 07		 jne	 SHORT $LN2@FakeDosNam

; 327  : 		return ERR_OS_ERROR;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	5e		 pop	 esi

; 332  : }

  00039	c3		 ret	 0
$LN2@FakeDosNam:

; 328  : 	else
; 329  : 		sprintf (lpszCFDevice, "\\\\.\\%s", lpszDosDevice); //todo: get buffer size as function parameter

  0003a	8b 4c 24 10	 mov	 ecx, DWORD PTR _lpszCFDevice$[esp]
  0003e	56		 push	 esi
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_06DIBEOEIP@?2?2?4?2?$CFs?$AA@
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 _sprintf
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 330  : 
; 331  : 	return 0;

  0004d	33 c0		 xor	 eax, eax
  0004f	5e		 pop	 esi

; 332  : }

  00050	c3		 ret	 0
_FakeDosNameForDevice ENDP
_TEXT	ENDS
PUBLIC	_RemoveFakeDosName
; Function compile flags: /Ogtpy
;	COMDAT _RemoveFakeDosName
_TEXT	SEGMENT
_lpszDiskFile$ = 8					; size = 4
_lpszDosDevice$ = 12					; size = 4
_RemoveFakeDosName PROC					; COMDAT

; 336  : 	BOOL bDosLinkRemoved = DefineDosDevice (DDD_RAW_TARGET_PATH | DDD_EXACT_MATCH_ON_REMOVE |
; 337  : 			DDD_REMOVE_DEFINITION, lpszDosDevice, lpszDiskFile);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _lpszDiskFile$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR _lpszDosDevice$[esp-4]
  00008	50		 push	 eax
  00009	51		 push	 ecx
  0000a	6a 07		 push	 7
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefineDosDeviceA@12

; 338  : 	if (bDosLinkRemoved == FALSE)

  00012	f7 d8		 neg	 eax
  00014	1b c0		 sbb	 eax, eax
  00016	40		 inc	 eax

; 339  : 	{
; 340  : 		return ERR_OS_ERROR;
; 341  : 	}
; 342  : 
; 343  : 	return 0;
; 344  : }

  00017	c3		 ret	 0
_RemoveFakeDosName ENDP
_TEXT	ENDS
PUBLIC	_AbortProcess
EXTRN	_exit:PROC
EXTRN	__imp__MessageBoxW@16:PROC
EXTRN	_GetString:PROC
EXTRN	__imp__MessageBeep@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _AbortProcess
_TEXT	SEGMENT
_stringId$ = 8						; size = 4
_AbortProcess PROC					; COMDAT

; 349  : 	// Note that this function also causes localcleanup() to be called (see atexit())
; 350  : 	MessageBeep (MB_ICONEXCLAMATION);

  00000	6a 30		 push	 48			; 00000030H
  00002	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBeep@4

; 351  : 	MessageBoxW (NULL, GetString (stringId), lpszTitle, ICON_HAND);

  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  0000d	8b 4c 24 04	 mov	 ecx, DWORD PTR _stringId$[esp-4]
  00011	6a 10		 push	 16			; 00000010H
  00013	50		 push	 eax
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 _GetString
  0001a	83 c4 04	 add	 esp, 4
  0001d	50		 push	 eax
  0001e	6a 00		 push	 0
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 352  : 	exit (1);

  00026	6a 01		 push	 1
  00028	e8 00 00 00 00	 call	 _exit
$LN3@AbortProce:
  0002d	cc		 int	 3
_AbortProcess ENDP
_TEXT	ENDS
PUBLIC	_AbortProcessSilent
; Function compile flags: /Ogtpy
;	COMDAT _AbortProcessSilent
_TEXT	SEGMENT
_AbortProcessSilent PROC				; COMDAT

; 357  : 	// Note that this function also causes localcleanup() to be called (see atexit())
; 358  : 	exit (1);

  00000	6a 01		 push	 1
  00002	e8 00 00 00 00	 call	 _exit
$LN3@AbortProce@2:
  00007	cc		 int	 3
_AbortProcessSilent ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@		; `string'
PUBLIC	_err_malloc
EXTRN	_malloc:PROC
;	COMDAT ??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@
CONST	SEGMENT
??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@ DB 'OUTOFMEMORY', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _err_malloc
_TEXT	SEGMENT
_size$ = 8						; size = 4
_err_malloc PROC					; COMDAT

; 367  : 	void *z = (void *) TCalloc (size);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _size$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 _malloc
  0000a	83 c4 04	 add	 esp, 4

; 368  : 	if (z)

  0000d	85 c0		 test	 eax, eax

; 369  : 		return z;

  0000f	75 0a		 jne	 SHORT $LN2@err_malloc

; 370  : 	AbortProcess ("OUTOFMEMORY");

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@
  00016	e8 00 00 00 00	 call	 _AbortProcess
$LN2@err_malloc:

; 371  : 	return 0;
; 372  : }

  0001b	c3		 ret	 0
$LN4@err_malloc:
_err_malloc ENDP
_TEXT	ENDS
PUBLIC	_err_strdup
EXTRN	_memmove:PROC
; Function compile flags: /Ogtpy
;	COMDAT _err_strdup
_TEXT	SEGMENT
_lpszText$ = 8						; size = 4
_err_strdup PROC					; COMDAT

; 378  : {

  00000	53		 push	 ebx

; 379  : 	int j = (strlen (lpszText) + 1) * sizeof (char);

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _lpszText$[esp]
  00005	56		 push	 esi
  00006	8b c3		 mov	 eax, ebx
  00008	57		 push	 edi
  00009	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000c	8d 64 24 00	 npad	 4
$LL7@err_strdup:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL7@err_strdup
  00017	2b c2		 sub	 eax, edx
  00019	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 380  : 	char *z = (char *) err_malloc (j);

  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 _malloc
  00022	8b f0		 mov	 esi, eax
  00024	83 c4 04	 add	 esp, 4
  00027	85 f6		 test	 esi, esi
  00029	74 11		 je	 SHORT $LN3@err_strdup

; 381  : 	memmove (z, lpszText, j);

  0002b	57		 push	 edi
  0002c	53		 push	 ebx
  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 _memmove
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	5f		 pop	 edi

; 382  : 	return z;

  00037	8b c6		 mov	 eax, esi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx

; 383  : }

  0003b	c3		 ret	 0
$LN3@err_strdup:
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@
  00041	e8 00 00 00 00	 call	 _AbortProcess
$LN8@err_strdup:
  00046	cc		 int	 3
_err_strdup ENDP
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	__real@3feff7ced916872b
PUBLIC	_CompensateDPIFont
EXTRN	_ceil:PROC
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
EXTRN	_floor:PROC
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3feff7ced916872b
CONST	SEGMENT
__real@3feff7ced916872b DQ 03feff7ced916872br	; 0.999
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _CompensateDPIFont
_TEXT	SEGMENT
_val$ = 8						; size = 4
_CompensateDPIFont PROC					; COMDAT

; 393  : 	if (ScreenDPI == USER_DEFAULT_SCREEN_DPI)

  00000	83 3d 00 00 00
	00 60		 cmp	 DWORD PTR _ScreenDPI, 96 ; 00000060H
  00007	75 05		 jne	 SHORT $LN4@Compensate

; 394  : 		return val;

  00009	8b 44 24 04	 mov	 eax, DWORD PTR _val$[esp-4]

; 403  : 	}
; 404  : }

  0000d	c3		 ret	 0
$LN4@Compensate:

; 395  : 	else
; 396  : 	{
; 397  : 		double tmpVal = (double) val * DPIScaleFactorY * DlgAspectRatio * 0.999;

  0000e	db 44 24 04	 fild	 DWORD PTR _val$[esp-4]

; 398  : 
; 399  : 		if (tmpVal > 0)
; 400  : 			return (int) floor(tmpVal);

  00012	83 ec 08	 sub	 esp, 8
  00015	dc 0d 00 00 00
	00		 fmul	 QWORD PTR ?DPIScaleFactorY@@3NA ; DPIScaleFactorY
  0001b	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _DlgAspectRatio
  00021	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3feff7ced916872b
  00027	d9 ee		 fldz
  00029	d8 d9		 fcomp	 ST(1)
  0002b	df e0		 fnstsw	 ax
  0002d	dd 1c 24	 fstp	 QWORD PTR [esp]
  00030	f6 c4 05	 test	 ah, 5
  00033	7a 0d		 jp	 SHORT $LN2@Compensate
  00035	e8 00 00 00 00	 call	 _floor
  0003a	83 c4 08	 add	 esp, 8
  0003d	e9 00 00 00 00	 jmp	 __ftol2_sse
$LN2@Compensate:

; 401  : 		else
; 402  : 			return (int) ceil(tmpVal);

  00042	e8 00 00 00 00	 call	 _ceil
  00047	83 c4 08	 add	 esp, 8
  0004a	e9 00 00 00 00	 jmp	 __ftol2_sse
_CompensateDPIFont ENDP
_TEXT	ENDS
PUBLIC	_CompensateXDPI
; Function compile flags: /Ogtpy
;	COMDAT _CompensateXDPI
_TEXT	SEGMENT
_val$ = 8						; size = 4
_CompensateXDPI PROC					; COMDAT

; 411  : 	if (ScreenDPI == USER_DEFAULT_SCREEN_DPI)

  00000	83 3d 00 00 00
	00 60		 cmp	 DWORD PTR _ScreenDPI, 96 ; 00000060H
  00007	75 05		 jne	 SHORT $LN4@Compensate@2

; 412  : 		return val;

  00009	8b 44 24 04	 mov	 eax, DWORD PTR _val$[esp-4]

; 421  : 	}
; 422  : }

  0000d	c3		 ret	 0
$LN4@Compensate@2:

; 413  : 	else
; 414  : 	{
; 415  : 		double tmpVal = (double) val * DPIScaleFactorX;

  0000e	db 44 24 04	 fild	 DWORD PTR _val$[esp-4]

; 416  : 
; 417  : 		if (tmpVal > 0)
; 418  : 			return (int) floor(tmpVal);

  00012	83 ec 08	 sub	 esp, 8
  00015	dc 0d 00 00 00
	00		 fmul	 QWORD PTR ?DPIScaleFactorX@@3NA ; DPIScaleFactorX
  0001b	d9 ee		 fldz
  0001d	d8 d9		 fcomp	 ST(1)
  0001f	df e0		 fnstsw	 ax
  00021	dd 1c 24	 fstp	 QWORD PTR [esp]
  00024	f6 c4 05	 test	 ah, 5
  00027	7a 0d		 jp	 SHORT $LN2@Compensate@2
  00029	e8 00 00 00 00	 call	 _floor
  0002e	83 c4 08	 add	 esp, 8
  00031	e9 00 00 00 00	 jmp	 __ftol2_sse
$LN2@Compensate@2:

; 419  : 		else
; 420  : 			return (int) ceil(tmpVal);

  00036	e8 00 00 00 00	 call	 _ceil
  0003b	83 c4 08	 add	 esp, 8
  0003e	e9 00 00 00 00	 jmp	 __ftol2_sse
_CompensateXDPI ENDP
_TEXT	ENDS
PUBLIC	_CompensateYDPI
; Function compile flags: /Ogtpy
;	COMDAT _CompensateYDPI
_TEXT	SEGMENT
_val$ = 8						; size = 4
_CompensateYDPI PROC					; COMDAT

; 429  : 	if (ScreenDPI == USER_DEFAULT_SCREEN_DPI)

  00000	83 3d 00 00 00
	00 60		 cmp	 DWORD PTR _ScreenDPI, 96 ; 00000060H
  00007	75 05		 jne	 SHORT $LN4@Compensate@3

; 430  : 		return val;

  00009	8b 44 24 04	 mov	 eax, DWORD PTR _val$[esp-4]

; 439  : 	}
; 440  : }

  0000d	c3		 ret	 0
$LN4@Compensate@3:

; 431  : 	else
; 432  : 	{
; 433  : 		double tmpVal = (double) val * DPIScaleFactorY;

  0000e	db 44 24 04	 fild	 DWORD PTR _val$[esp-4]

; 434  : 
; 435  : 		if (tmpVal > 0)
; 436  : 			return (int) floor(tmpVal);

  00012	83 ec 08	 sub	 esp, 8
  00015	dc 0d 00 00 00
	00		 fmul	 QWORD PTR ?DPIScaleFactorY@@3NA ; DPIScaleFactorY
  0001b	d9 ee		 fldz
  0001d	d8 d9		 fcomp	 ST(1)
  0001f	df e0		 fnstsw	 ax
  00021	dd 1c 24	 fstp	 QWORD PTR [esp]
  00024	f6 c4 05	 test	 ah, 5
  00027	7a 0d		 jp	 SHORT $LN2@Compensate@3
  00029	e8 00 00 00 00	 call	 _floor
  0002e	83 c4 08	 add	 esp, 8
  00031	e9 00 00 00 00	 jmp	 __ftol2_sse
$LN2@Compensate@3:

; 437  : 		else
; 438  : 			return (int) ceil(tmpVal);

  00036	e8 00 00 00 00	 call	 _ceil
  0003b	83 c4 08	 add	 esp, 8
  0003e	e9 00 00 00 00	 jmp	 __ftol2_sse
_CompensateYDPI ENDP
_TEXT	ENDS
PUBLIC	_GetTextGfxWidth
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__GetTextMetricsA@8:PROC
EXTRN	__imp__GetTextExtentPoint32W@16:PROC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	__imp__GetDC@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _GetTextGfxWidth
_TEXT	SEGMENT
_sizes$ = -64						; size = 8
_textMetrics$ = -56					; size = 56
_hwndDlgItem$ = 8					; size = 4
_text$ = 12						; size = 4
_hFont$ = 16						; size = 4
_GetTextGfxWidth PROC					; COMDAT

; 444  : {

  00000	83 ec 40	 sub	 esp, 64			; 00000040H
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 445  : 	SIZE sizes;
; 446  : 	TEXTMETRIC textMetrics;
; 447  : 	HDC hdc = GetDC (hwndDlgItem); 

  00006	8b 7c 24 50	 mov	 edi, DWORD PTR _hwndDlgItem$[esp+72]
  0000a	57		 push	 edi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  00011	8b f0		 mov	 esi, eax

; 448  : 
; 449  : 	SelectObject(hdc, (HGDIOBJ) hFont);

  00013	8b 44 24 58	 mov	 eax, DWORD PTR _hFont$[esp+72]
  00017	50		 push	 eax
  00018	56		 push	 esi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 450  : 
; 451  : 	GetTextExtentPoint32W (hdc, text, wcslen (text), &sizes);

  0001f	8b 54 24 54	 mov	 edx, DWORD PTR _text$[esp+72]
  00023	8b c2		 mov	 eax, edx
  00025	8d 58 02	 lea	 ebx, DWORD PTR [eax+2]
  00028	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL3@GetTextGfx:
  00030	66 8b 08	 mov	 cx, WORD PTR [eax]
  00033	83 c0 02	 add	 eax, 2
  00036	66 85 c9	 test	 cx, cx
  00039	75 f5		 jne	 SHORT $LL3@GetTextGfx
  0003b	2b c3		 sub	 eax, ebx
  0003d	8d 4c 24 0c	 lea	 ecx, DWORD PTR _sizes$[esp+76]
  00041	51		 push	 ecx
  00042	d1 f8		 sar	 eax, 1
  00044	50		 push	 eax
  00045	52		 push	 edx
  00046	56		 push	 esi
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextExtentPoint32W@16

; 452  : 
; 453  : 	GetTextMetrics(hdc, &textMetrics);	// Necessary for non-TrueType raster fonts (tmOverhang)

  0004d	8d 54 24 14	 lea	 edx, DWORD PTR _textMetrics$[esp+76]
  00051	52		 push	 edx
  00052	56		 push	 esi
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextMetricsA@8

; 454  : 
; 455  : 	ReleaseDC (hwndDlgItem, hdc); 

  00059	56		 push	 esi
  0005a	57		 push	 edi
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8

; 456  : 
; 457  : 	return ((int) sizes.cx - (int) textMetrics.tmOverhang);

  00061	8b 44 24 0c	 mov	 eax, DWORD PTR _sizes$[esp+76]
  00065	2b 44 24 34	 sub	 eax, DWORD PTR _textMetrics$[esp+108]
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx

; 458  : }

  0006c	83 c4 40	 add	 esp, 64			; 00000040H
  0006f	c3		 ret	 0
_GetTextGfxWidth ENDP
_TEXT	ENDS
PUBLIC	_GetTextGfxHeight
; Function compile flags: /Ogtpy
;	COMDAT _GetTextGfxHeight
_TEXT	SEGMENT
_sizes$ = -8						; size = 8
_hwndDlgItem$ = 8					; size = 4
_text$ = 12						; size = 4
_hFont$ = 16						; size = 4
_GetTextGfxHeight PROC					; COMDAT

; 462  : {

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 463  : 	SIZE sizes;
; 464  : 	HDC hdc = GetDC (hwndDlgItem); 

  00006	8b 7c 24 18	 mov	 edi, DWORD PTR _hwndDlgItem$[esp+16]
  0000a	57		 push	 edi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  00011	8b f0		 mov	 esi, eax

; 465  : 
; 466  : 	SelectObject(hdc, (HGDIOBJ) hFont);

  00013	8b 44 24 20	 mov	 eax, DWORD PTR _hFont$[esp+16]
  00017	50		 push	 eax
  00018	56		 push	 esi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 467  : 
; 468  : 	GetTextExtentPoint32W (hdc, text, wcslen (text), &sizes);

  0001f	8b 54 24 1c	 mov	 edx, DWORD PTR _text$[esp+16]
  00023	8b c2		 mov	 eax, edx
  00025	8d 58 02	 lea	 ebx, DWORD PTR [eax+2]
  00028	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL3@GetTextGfx@2:
  00030	66 8b 08	 mov	 cx, WORD PTR [eax]
  00033	83 c0 02	 add	 eax, 2
  00036	66 85 c9	 test	 cx, cx
  00039	75 f5		 jne	 SHORT $LL3@GetTextGfx@2
  0003b	2b c3		 sub	 eax, ebx
  0003d	8d 4c 24 0c	 lea	 ecx, DWORD PTR _sizes$[esp+20]
  00041	51		 push	 ecx
  00042	d1 f8		 sar	 eax, 1
  00044	50		 push	 eax
  00045	52		 push	 edx
  00046	56		 push	 esi
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextExtentPoint32W@16

; 469  : 
; 470  : 	ReleaseDC (hwndDlgItem, hdc); 

  0004d	56		 push	 esi
  0004e	57		 push	 edi
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8

; 471  : 
; 472  : 	return ((int) sizes.cy);

  00055	8b 44 24 10	 mov	 eax, DWORD PTR _sizes$[esp+24]
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx

; 473  : }

  0005c	83 c4 08	 add	 esp, 8
  0005f	c3		 ret	 0
_GetTextGfxHeight ENDP
_TEXT	ENDS
EXTRN	_HandCursor:PROC
EXTRN	__imp__TrackMouseEvent@4:PROC
EXTRN	_NormalCursor:PROC
EXTRN	__imp__CallWindowProcA@20:PROC
EXTRN	__imp__GetWindowLongA@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?HyperlinkProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_trackMouseEvent$138090 = -16				; size = 16
_hwnd$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?HyperlinkProc@@YGJPAUHWND__@@IIJ@Z PROC		; HyperlinkProc, COMDAT

; 501  : {

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	56		 push	 esi

; 502  : 	WNDPROC wp = (WNDPROC) GetWindowLongPtr (hwnd, GWLP_USERDATA);

  00004	8b 74 24 18	 mov	 esi, DWORD PTR _hwnd$[esp+16]
  00008	6a eb		 push	 -21			; ffffffebH
  0000a	56		 push	 esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8

; 503  : 
; 504  : 	switch (message)

  00011	8b 4c 24 1c	 mov	 ecx, DWORD PTR _message$[esp+16]
  00015	83 f9 20	 cmp	 ecx, 32			; 00000020H
  00018	74 3a		 je	 SHORT $LN3@HyperlinkP
  0001a	81 f9 a3 02 00
	00		 cmp	 ecx, 675		; 000002a3H
  00020	74 1a		 je	 SHORT $LN1@HyperlinkP

; 524  : 		return 0;
; 525  : 	}
; 526  : 
; 527  : 	return CallWindowProc (wp, hwnd, message, wParam, lParam);

  00022	8b 54 24 24	 mov	 edx, DWORD PTR _lParam$[esp+16]
  00026	52		 push	 edx
  00027	8b 54 24 24	 mov	 edx, DWORD PTR _wParam$[esp+20]
  0002b	52		 push	 edx
  0002c	51		 push	 ecx
  0002d	56		 push	 esi
  0002e	50		 push	 eax
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20
  00035	5e		 pop	 esi

; 528  : }

  00036	83 c4 10	 add	 esp, 16			; 00000010H
  00039	c2 10 00	 ret	 16			; 00000010H
$LN1@HyperlinkP:

; 520  : 
; 521  : 	case WM_MOUSELEAVE:
; 522  : 		bHyperLinkBeingTracked = FALSE;

  0003c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bHyperLinkBeingTracked, 0

; 523  : 		NormalCursor();

  00046	e8 00 00 00 00	 call	 _NormalCursor
  0004b	33 c0		 xor	 eax, eax
  0004d	5e		 pop	 esi

; 528  : }

  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	c2 10 00	 ret	 16			; 00000010H
$LN3@HyperlinkP:

; 505  : 	{
; 506  : 	case WM_SETCURSOR:
; 507  : 		if (!bHyperLinkBeingTracked)

  00054	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bHyperLinkBeingTracked, 0
  0005b	75 29		 jne	 SHORT $LN2@HyperlinkP

; 508  : 		{
; 509  : 			TRACKMOUSEEVENT	trackMouseEvent;
; 510  : 
; 511  : 			trackMouseEvent.cbSize = sizeof(trackMouseEvent);
; 512  : 			trackMouseEvent.dwFlags = TME_LEAVE;
; 513  : 			trackMouseEvent.hwndTrack = hwnd;
; 514  : 
; 515  : 			bHyperLinkBeingTracked = TrackMouseEvent(&trackMouseEvent);

  0005d	8d 44 24 04	 lea	 eax, DWORD PTR _trackMouseEvent$138090[esp+20]
  00061	50		 push	 eax
  00062	c7 44 24 08 10
	00 00 00	 mov	 DWORD PTR _trackMouseEvent$138090[esp+24], 16 ; 00000010H
  0006a	c7 44 24 0c 02
	00 00 00	 mov	 DWORD PTR _trackMouseEvent$138090[esp+28], 2
  00072	89 74 24 10	 mov	 DWORD PTR _trackMouseEvent$138090[esp+32], esi
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TrackMouseEvent@4
  0007c	a3 00 00 00 00	 mov	 DWORD PTR _bHyperLinkBeingTracked, eax

; 516  : 
; 517  : 			HandCursor();

  00081	e8 00 00 00 00	 call	 _HandCursor
$LN2@HyperlinkP:

; 518  : 		}
; 519  : 		return 0;

  00086	33 c0		 xor	 eax, eax
  00088	5e		 pop	 esi

; 528  : }

  00089	83 c4 10	 add	 esp, 16			; 00000010H
  0008c	c2 10 00	 ret	 16			; 00000010H
?HyperlinkProc@@YGJPAUHWND__@@IIJ@Z ENDP		; HyperlinkProc
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_AccommodateTextField
EXTRN	__imp__InvalidateRect@12:PROC
EXTRN	__imp__SetWindowPos@28:PROC
EXTRN	__imp__MoveWindow@24:PROC
EXTRN	__imp__GetWindowInfo@8:PROC
EXTRN	__imp__GetSystemMetrics@4:PROC
EXTRN	__imp__GetWindowRect@8:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__GetWindowTextW@12:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
; Function compile flags: /Ogtpy
;	COMDAT _AccommodateTextField
_TEXT	SEGMENT
_height$ = -4296					; size = 4
_alignPosDiff$ = -4296					; size = 4
_vertSubOffset$ = -4292					; size = 4
_width$ = -4292						; size = 4
_horizSubOffset$ = -4288				; size = 4
_origHeight$ = -4284					; size = 4
_rec$ = -4280						; size = 16
_wrec$ = -4264						; size = 16
_trec$ = -4248						; size = 16
_windowInfo$ = -4232					; size = 60
_text$ = -4172						; size = 4168
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_ctrlId$ = 12						; size = 4
_bFirstUpdate$ = 16					; size = 4
_hFont$ = 20						; size = 4
_AccommodateTextField PROC				; COMDAT

; 559  : {

  00000	b8 c8 10 00 00	 mov	 eax, 4296		; 000010c8H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 c4 10
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+4296], eax

; 560  : 	RECT rec, wrec, trec;
; 561  : 	HWND hwndCtrl = GetDlgItem (hwndDlg, ctrlId);

  00018	8b 84 24 d0 10
	00 00		 mov	 eax, DWORD PTR _ctrlId$[esp+4292]
  0001f	53		 push	 ebx
  00020	8b 9c 24 d0 10
	00 00		 mov	 ebx, DWORD PTR _hwndDlg$[esp+4296]
  00027	55		 push	 ebp
  00028	8b ac 24 e0 10
	00 00		 mov	 ebp, DWORD PTR _hFont$[esp+4300]
  0002f	56		 push	 esi
  00030	57		 push	 edi
  00031	50		 push	 eax
  00032	53		 push	 ebx
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8

; 562  : 	int width, origWidth, height, origHeight;
; 563  : 	int horizSubOffset, vertSubOffset, vertOffset, alignPosDiff = 0;
; 564  : 	wchar_t text [MAX_URL_LENGTH];
; 565  : 	WINDOWINFO windowInfo;
; 566  : 	BOOL bBorderlessWindow = !(GetWindowLongPtr (hwndDlg, GWL_STYLE) & (WS_BORDER | WS_DLGFRAME));

  00039	6a f0		 push	 -16			; fffffff0H
  0003b	53		 push	 ebx
  0003c	8b f8		 mov	 edi, eax
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  00044	8b f0		 mov	 esi, eax
  00046	81 e6 00 00 c0
	00		 and	 esi, 12582912		; 00c00000H

; 567  : 
; 568  : 	// Resize the field according to its length and font size and move if centered or right-aligned
; 569  : 
; 570  : 	GetWindowTextW (hwndCtrl, text, sizeof (text) / sizeof (wchar_t));

  0004c	68 24 08 00 00	 push	 2084			; 00000824H
  00051	8d 8c 24 90 00
	00 00		 lea	 ecx, DWORD PTR _text$[esp+4316]
  00058	f7 de		 neg	 esi
  0005a	51		 push	 ecx
  0005b	1b f6		 sbb	 esi, esi
  0005d	57		 push	 edi
  0005e	46		 inc	 esi
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextW@12

; 571  : 
; 572  : 	width = GetTextGfxWidth (hwndCtrl, text, hFont);

  00065	55		 push	 ebp
  00066	8d 94 24 90 00
	00 00		 lea	 edx, DWORD PTR _text$[esp+4316]
  0006d	52		 push	 edx
  0006e	57		 push	 edi
  0006f	e8 00 00 00 00	 call	 _GetTextGfxWidth
  00074	89 44 24 20	 mov	 DWORD PTR _width$[esp+4324], eax

; 573  : 	height = GetTextGfxHeight (hwndCtrl, text, hFont);

  00078	55		 push	 ebp
  00079	8d 84 24 9c 00
	00 00		 lea	 eax, DWORD PTR _text$[esp+4328]
  00080	50		 push	 eax
  00081	57		 push	 edi
  00082	e8 00 00 00 00	 call	 _GetTextGfxHeight
  00087	83 c4 18	 add	 esp, 24			; 00000018H

; 574  : 
; 575  : 	GetClientRect (hwndCtrl, &rec);		

  0008a	8d 4c 24 20	 lea	 ecx, DWORD PTR _rec$[esp+4312]
  0008e	51		 push	 ecx
  0008f	57		 push	 edi
  00090	89 44 24 18	 mov	 DWORD PTR _height$[esp+4320], eax
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 576  : 	origWidth = rec.right;
; 577  : 	origHeight = rec.bottom;
; 578  : 
; 579  : 	if (width >= 0
; 580  : 		&& (!bFirstUpdate || origWidth > width))	// The original width of the field is the maximum allowed size 

  0009a	8b 54 24 14	 mov	 edx, DWORD PTR _width$[esp+4312]
  0009e	8b 44 24 28	 mov	 eax, DWORD PTR _rec$[esp+4320]
  000a2	8b 4c 24 2c	 mov	 ecx, DWORD PTR _rec$[esp+4324]
  000a6	8b e8		 mov	 ebp, eax
  000a8	89 4c 24 1c	 mov	 DWORD PTR _origHeight$[esp+4312], ecx
  000ac	85 d2		 test	 edx, edx
  000ae	0f 8c 1b 01 00
	00		 jl	 $LN7@Accommodat
  000b4	83 bc 24 e4 10
	00 00 00	 cmp	 DWORD PTR _bFirstUpdate$[esp+4308], 0
  000bc	74 08		 je	 SHORT $LN6@Accommodat
  000be	3b c2		 cmp	 eax, edx
  000c0	0f 8e 09 01 00
	00		 jle	 $LN7@Accommodat
$LN6@Accommodat:

; 581  : 	{
; 582  : 		horizSubOffset = origWidth - width;
; 583  : 		vertSubOffset = origHeight - height;

  000c6	2b 4c 24 10	 sub	 ecx, DWORD PTR _height$[esp+4312]
  000ca	2b c2		 sub	 eax, edx

; 584  : 
; 585  : 		// Window coords
; 586  : 		GetWindowRect(hwndDlg, &wrec);

  000cc	8d 54 24 30	 lea	 edx, DWORD PTR _wrec$[esp+4312]
  000d0	52		 push	 edx
  000d1	53		 push	 ebx
  000d2	89 44 24 20	 mov	 DWORD PTR _horizSubOffset$[esp+4320], eax
  000d6	89 4c 24 1c	 mov	 DWORD PTR _vertSubOffset$[esp+4320], ecx
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 587  : 		GetClientRect(hwndDlg, &trec);

  000e0	8d 44 24 40	 lea	 eax, DWORD PTR _trec$[esp+4312]
  000e4	50		 push	 eax
  000e5	53		 push	 ebx
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 588  : 
; 589  : 		// Vertical "title bar" offset
; 590  : 		vertOffset = wrec.bottom - wrec.top - trec.bottom - (bBorderlessWindow ? 0 : GetSystemMetrics(SM_CYFIXEDFRAME));

  000ec	85 f6		 test	 esi, esi
  000ee	74 04		 je	 SHORT $LN10@Accommodat
  000f0	33 c0		 xor	 eax, eax
  000f2	eb 08		 jmp	 SHORT $LN11@Accommodat
$LN10@Accommodat:
  000f4	6a 08		 push	 8
  000f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
$LN11@Accommodat:
  000fc	8b 5c 24 3c	 mov	 ebx, DWORD PTR _wrec$[esp+4324]
  00100	2b d8		 sub	 ebx, eax
  00102	2b 5c 24 4c	 sub	 ebx, DWORD PTR _trec$[esp+4324]

; 591  : 
; 592  : 		// Text field coords
; 593  : 		GetWindowRect(hwndCtrl, &rec);

  00106	8d 4c 24 20	 lea	 ecx, DWORD PTR _rec$[esp+4312]
  0010a	2b 5c 24 34	 sub	 ebx, DWORD PTR _wrec$[esp+4316]
  0010e	51		 push	 ecx
  0010f	57		 push	 edi
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 594  : 
; 595  : 		// Alignment offset
; 596  : 		windowInfo.cbSize = sizeof(windowInfo);
; 597  : 		GetWindowInfo (hwndCtrl, &windowInfo);

  00116	8d 54 24 50	 lea	 edx, DWORD PTR _windowInfo$[esp+4312]
  0011a	52		 push	 edx
  0011b	57		 push	 edi
  0011c	c7 44 24 58 3c
	00 00 00	 mov	 DWORD PTR _windowInfo$[esp+4320], 60 ; 0000003cH
  00124	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowInfo@8

; 598  : 
; 599  : 		if (windowInfo.dwStyle & SS_CENTER)

  0012a	8a 44 24 74	 mov	 al, BYTE PTR _windowInfo$[esp+4348]
  0012e	a8 01		 test	 al, 1
  00130	74 0b		 je	 SHORT $LN5@Accommodat

; 600  : 			alignPosDiff = horizSubOffset / 2;

  00132	8b 44 24 18	 mov	 eax, DWORD PTR _horizSubOffset$[esp+4312]
  00136	99		 cdq
  00137	2b c2		 sub	 eax, edx
  00139	d1 f8		 sar	 eax, 1
  0013b	eb 08		 jmp	 SHORT $LN15@Accommodat
$LN5@Accommodat:

; 601  : 		else if (windowInfo.dwStyle & SS_RIGHT)

  0013d	a8 02		 test	 al, 2
  0013f	74 53		 je	 SHORT $LN14@Accommodat

; 602  : 			alignPosDiff = horizSubOffset;

  00141	8b 44 24 18	 mov	 eax, DWORD PTR _horizSubOffset$[esp+4312]
$LN15@Accommodat:
  00145	89 44 24 10	 mov	 DWORD PTR _alignPosDiff$[esp+4312], eax

; 603  : 		
; 604  : 		// Resize/move
; 605  : 		if (alignPosDiff > 0)

  00149	85 c0		 test	 eax, eax
  0014b	7e 47		 jle	 SHORT $LN14@Accommodat

; 606  : 		{
; 607  : 			// Resize and move the text field
; 608  : 			MoveWindow (hwndCtrl,
; 609  : 				rec.left - wrec.left - (bBorderlessWindow ? 0 : GetSystemMetrics(SM_CXFIXEDFRAME)) + alignPosDiff,
; 610  : 				rec.top - wrec.top - vertOffset,
; 611  : 				origWidth - horizSubOffset,
; 612  : 				origHeight - vertSubOffset,
; 613  : 				TRUE);

  0014d	85 f6		 test	 esi, esi
  0014f	74 04		 je	 SHORT $LN12@Accommodat
  00151	33 d2		 xor	 edx, edx
  00153	eb 0e		 jmp	 SHORT $LN13@Accommodat
$LN12@Accommodat:
  00155	6a 07		 push	 7
  00157	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  0015d	8b d0		 mov	 edx, eax
  0015f	8b 44 24 10	 mov	 eax, DWORD PTR _alignPosDiff$[esp+4312]
$LN13@Accommodat:
  00163	8b 4c 24 1c	 mov	 ecx, DWORD PTR _origHeight$[esp+4312]
  00167	2b 4c 24 14	 sub	 ecx, DWORD PTR _vertSubOffset$[esp+4312]
  0016b	2b 6c 24 18	 sub	 ebp, DWORD PTR _horizSubOffset$[esp+4312]
  0016f	6a 01		 push	 1
  00171	51		 push	 ecx
  00172	8b 4c 24 2c	 mov	 ecx, DWORD PTR _rec$[esp+4324]
  00176	2b 4c 24 3c	 sub	 ecx, DWORD PTR _wrec$[esp+4324]
  0017a	55		 push	 ebp
  0017b	2b cb		 sub	 ecx, ebx
  0017d	51		 push	 ecx
  0017e	8b 4c 24 30	 mov	 ecx, DWORD PTR _rec$[esp+4328]
  00182	2b ca		 sub	 ecx, edx
  00184	2b 4c 24 40	 sub	 ecx, DWORD PTR _wrec$[esp+4328]
  00188	03 c8		 add	 ecx, eax
  0018a	51		 push	 ecx
  0018b	57		 push	 edi
  0018c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24

; 614  : 		}
; 615  : 		else

  00192	eb 1d		 jmp	 SHORT $LN1@Accommodat
$LN14@Accommodat:

; 616  : 		{
; 617  : 			// Resize the text field
; 618  : 			SetWindowPos (hwndCtrl, 0, 0, 0,
; 619  : 				origWidth - horizSubOffset,
; 620  : 				origHeight - vertSubOffset,
; 621  : 				SWP_NOMOVE | SWP_NOZORDER);

  00194	8b 44 24 1c	 mov	 eax, DWORD PTR _origHeight$[esp+4312]
  00198	2b 44 24 14	 sub	 eax, DWORD PTR _vertSubOffset$[esp+4312]
  0019c	2b 6c 24 18	 sub	 ebp, DWORD PTR _horizSubOffset$[esp+4312]
  001a0	6a 06		 push	 6
  001a2	50		 push	 eax
  001a3	55		 push	 ebp
  001a4	6a 00		 push	 0
  001a6	6a 00		 push	 0
  001a8	6a 00		 push	 0
  001aa	57		 push	 edi
  001ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28
$LN1@Accommodat:

; 622  : 		}
; 623  : 
; 624  : 		SetWindowPos (hwndCtrl, HWND_BOTTOM, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE);

  001b1	6a 03		 push	 3
  001b3	6a 00		 push	 0
  001b5	6a 00		 push	 0
  001b7	6a 00		 push	 0
  001b9	6a 00		 push	 0
  001bb	6a 01		 push	 1
  001bd	57		 push	 edi
  001be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28

; 625  : 
; 626  : 		InvalidateRect (hwndCtrl, NULL, TRUE);

  001c4	6a 01		 push	 1
  001c6	6a 00		 push	 0
  001c8	57		 push	 edi
  001c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
$LN7@Accommodat:

; 627  : 	}
; 628  : }

  001cf	8b 8c 24 d4 10
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+4312]
  001d6	5f		 pop	 edi
  001d7	5e		 pop	 esi
  001d8	5d		 pop	 ebp
  001d9	5b		 pop	 ebx
  001da	33 cc		 xor	 ecx, esp
  001dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e1	81 c4 c8 10 00
	00		 add	 esp, 4296		; 000010c8H
  001e7	c3		 ret	 0
_AccommodateTextField ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?BootPwdFieldProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?BootPwdFieldProc@@YGJPAUHWND__@@IIJ@Z PROC		; BootPwdFieldProc, COMDAT

; 633  : {

  00000	56		 push	 esi

; 634  : 	WNDPROC wp = (WNDPROC) GetWindowLongPtr (hwnd, GWLP_USERDATA);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _hwnd$[esp]
  00005	6a eb		 push	 -21			; ffffffebH
  00007	56		 push	 esi
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8

; 635  : 
; 636  : 	switch (message)

  0000e	8b 4c 24 0c	 mov	 ecx, DWORD PTR _message$[esp]
  00012	81 f9 02 03 00
	00		 cmp	 ecx, 770		; 00000302H
  00018	74 17		 je	 SHORT $LN1@BootPwdFie

; 640  : 	}
; 641  : 
; 642  : 	return CallWindowProc (wp, hwnd, message, wParam, lParam);

  0001a	8b 54 24 14	 mov	 edx, DWORD PTR _lParam$[esp]
  0001e	52		 push	 edx
  0001f	8b 54 24 14	 mov	 edx, DWORD PTR _wParam$[esp+4]
  00023	52		 push	 edx
  00024	51		 push	 ecx
  00025	56		 push	 esi
  00026	50		 push	 eax
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20
  0002d	5e		 pop	 esi

; 643  : }

  0002e	c2 10 00	 ret	 16			; 00000010H
$LN1@BootPwdFie:

; 637  : 	{
; 638  : 	case WM_PASTE:
; 639  : 		return 1;

  00031	b8 01 00 00 00	 mov	 eax, 1
  00036	5e		 pop	 esi

; 643  : }

  00037	c2 10 00	 ret	 16			; 00000010H
?BootPwdFieldProc@@YGJPAUHWND__@@IIJ@Z ENDP		; BootPwdFieldProc
_TEXT	ENDS
PUBLIC	_ToBootPwdField
EXTRN	__imp__SetWindowLongA@12:PROC
; Function compile flags: /Ogtpy
;	COMDAT _ToBootPwdField
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_ctrlId$ = 12						; size = 4
_ToBootPwdField PROC					; COMDAT

; 651  : 	HWND hwndCtrl = GetDlgItem (hwndDlg, ctrlId);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _ctrlId$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR _hwndDlg$[esp-4]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	50		 push	 eax
  0000b	51		 push	 ecx
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00012	8b f0		 mov	 esi, eax

; 652  : 
; 653  : 	SetWindowLongPtr (hwndCtrl, GWLP_USERDATA, (LONG_PTR) GetWindowLongPtr (hwndCtrl, GWLP_WNDPROC));

  00014	6a fc		 push	 -4			; fffffffcH
  00016	56		 push	 esi
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  0001d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowLongA@12
  00023	50		 push	 eax
  00024	6a eb		 push	 -21			; ffffffebH
  00026	56		 push	 esi
  00027	ff d7		 call	 edi

; 654  : 	SetWindowLongPtr (hwndCtrl, GWLP_WNDPROC, (LONG_PTR) BootPwdFieldProc);

  00029	68 00 00 00 00	 push	 OFFSET ?BootPwdFieldProc@@YGJPAUHWND__@@IIJ@Z ; BootPwdFieldProc
  0002e	6a fc		 push	 -4			; fffffffcH
  00030	56		 push	 esi
  00031	ff d7		 call	 edi
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi

; 655  : }

  00035	c3		 ret	 0
_ToBootPwdField ENDP
_TEXT	ENDS
PUBLIC	__real@407ca00000000000
PUBLIC	__real@407a700000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	?AuxiliaryDlgProc@@YGHPAUHWND__@@IIJ@Z		; AuxiliaryDlgProc
EXTRN	__imp__EndDialog@8:PROC
EXTRN	__imp__GetDeviceCaps@8:PROC
;	COMDAT __real@407ca00000000000
CONST	SEGMENT
__real@407ca00000000000 DQ 0407ca00000000000r	; 458
CONST	ENDS
;	COMDAT __real@407a700000000000
CONST	SEGMENT
__real@407a700000000000 DQ 0407a700000000000r	; 423
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?AuxiliaryDlgProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_trec$138168 = -16					; size = 16
_hwndDlg$ = 8						; size = 4
_msg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?AuxiliaryDlgProc@@YGHPAUHWND__@@IIJ@Z PROC		; AuxiliaryDlgProc, COMDAT

; 665  : 	switch (msg)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _msg$[esp-4]
  00004	83 ec 10	 sub	 esp, 16			; 00000010H
  00007	83 f8 10	 cmp	 eax, 16			; 00000010H
  0000a	0f 84 bc 00 00
	00		 je	 $LN1@AuxiliaryD
  00010	3d 10 01 00 00	 cmp	 eax, 272		; 00000110H
  00015	74 08		 je	 SHORT $LN4@AuxiliaryD

; 708  : 	}
; 709  : 
; 710  : 	return 0;

  00017	33 c0		 xor	 eax, eax

; 711  : }

  00019	83 c4 10	 add	 esp, 16			; 00000010H
  0001c	c2 10 00	 ret	 16			; 00000010H
$LN4@AuxiliaryD:
  0001f	56		 push	 esi

; 666  : 	{
; 667  : 	case WM_INITDIALOG:
; 668  : 		{
; 669  : 			HDC hDC = GetDC (hwndDlg);

  00020	8b 74 24 18	 mov	 esi, DWORD PTR _hwndDlg$[esp+16]
  00024	57		 push	 edi
  00025	56		 push	 esi
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  0002c	8b f8		 mov	 edi, eax

; 670  : 
; 671  : 			ScreenDPI = GetDeviceCaps (hDC, LOGPIXELSY);

  0002e	6a 5a		 push	 90			; 0000005aH
  00030	57		 push	 edi
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDeviceCaps@8

; 672  : 			ReleaseDC (hwndDlg, hDC); 

  00037	57		 push	 edi
  00038	56		 push	 esi
  00039	a3 00 00 00 00	 mov	 DWORD PTR _ScreenDPI, eax
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8

; 673  : 
; 674  : 			DPIScaleFactorX = 1;

  00044	d9 e8		 fld1
  00046	dd 15 00 00 00
	00		 fst	 QWORD PTR ?DPIScaleFactorX@@3NA ; DPIScaleFactorX

; 675  : 			DPIScaleFactorY = 1;
; 676  : 			DlgAspectRatio = 1;
; 677  : 
; 678  : 			if (ScreenDPI != USER_DEFAULT_SCREEN_DPI)

  0004c	33 ff		 xor	 edi, edi
  0004e	83 3d 00 00 00
	00 60		 cmp	 DWORD PTR _ScreenDPI, 96 ; 00000060H
  00055	dd 15 00 00 00
	00		 fst	 QWORD PTR ?DPIScaleFactorY@@3NA ; DPIScaleFactorY
  0005b	dd 1d 00 00 00
	00		 fstp	 QWORD PTR _DlgAspectRatio
  00061	74 54		 je	 SHORT $LN2@AuxiliaryD

; 679  : 			{
; 680  : 				// Windows skews the GUI aspect ratio if the user has a non-default DPI. Hence, working with 
; 681  : 				// actual screen DPI is redundant and leads to incorrect results. What really matters here is
; 682  : 				// how Windows actually renders our GUI. This is determined by comparing the expected and current
; 683  : 				// sizes of a hidden calibration text field.
; 684  : 
; 685  : 				RECT trec;
; 686  : 
; 687  : 				trec.right = 0;
; 688  : 				trec.bottom = 0;
; 689  : 
; 690  : 				GetClientRect (GetDlgItem (hwndDlg, IDC_ASPECT_RATIO_CALIBRATION_BOX), &trec);

  00063	8d 44 24 08	 lea	 eax, DWORD PTR _trec$138168[esp+24]
  00067	50		 push	 eax
  00068	68 ec 13 00 00	 push	 5100			; 000013ecH
  0006d	56		 push	 esi
  0006e	89 7c 24 1c	 mov	 DWORD PTR _trec$138168[esp+44], edi
  00072	89 7c 24 20	 mov	 DWORD PTR _trec$138168[esp+48], edi
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0007c	50		 push	 eax
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 691  : 
; 692  : 				if (trec.right != 0 && trec.bottom != 0)

  00083	39 7c 24 10	 cmp	 DWORD PTR _trec$138168[esp+32], edi
  00087	74 2e		 je	 SHORT $LN2@AuxiliaryD
  00089	39 7c 24 14	 cmp	 DWORD PTR _trec$138168[esp+36], edi
  0008d	74 28		 je	 SHORT $LN2@AuxiliaryD

; 693  : 				{
; 694  : 					// The size of the 282x282 IDC_ASPECT_RATIO_CALIBRATION_BOX rendered at the default DPI (96) is 423x458
; 695  : 					DPIScaleFactorX = (double) trec.right / 423;

  0008f	db 44 24 10	 fild	 DWORD PTR _trec$138168[esp+32]
  00093	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@407a700000000000
  00099	dd 15 00 00 00
	00		 fst	 QWORD PTR ?DPIScaleFactorX@@3NA ; DPIScaleFactorX

; 696  : 					DPIScaleFactorY = (double) trec.bottom / 458;

  0009f	db 44 24 14	 fild	 DWORD PTR _trec$138168[esp+36]
  000a3	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@407ca00000000000
  000a9	dd 15 00 00 00
	00		 fst	 QWORD PTR ?DPIScaleFactorY@@3NA ; DPIScaleFactorY

; 697  : 					DlgAspectRatio = DPIScaleFactorX / DPIScaleFactorY;

  000af	de f9		 fdivp	 ST(1), ST(0)
  000b1	dd 1d 00 00 00
	00		 fstp	 QWORD PTR _DlgAspectRatio
$LN2@AuxiliaryD:

; 698  : 				}
; 699  : 			}
; 700  : 
; 701  : 			EndDialog (hwndDlg, 0);

  000b7	57		 push	 edi
  000b8	56		 push	 esi
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
  000bf	5f		 pop	 edi
  000c0	5e		 pop	 esi

; 707  : 		return 1;

  000c1	b8 01 00 00 00	 mov	 eax, 1

; 711  : }

  000c6	83 c4 10	 add	 esp, 16			; 00000010H
  000c9	c2 10 00	 ret	 16			; 00000010H
$LN1@AuxiliaryD:

; 702  : 			return 1;
; 703  : 		}
; 704  : 
; 705  : 	case WM_CLOSE:
; 706  : 		EndDialog (hwndDlg, 0);

  000cc	8b 4c 24 14	 mov	 ecx, DWORD PTR _hwndDlg$[esp+12]
  000d0	6a 00		 push	 0
  000d2	51		 push	 ecx
  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 707  : 		return 1;

  000d9	b8 01 00 00 00	 mov	 eax, 1

; 711  : }

  000de	83 c4 10	 add	 esp, 16			; 00000010H
  000e1	c2 10 00	 ret	 16			; 00000010H
?AuxiliaryDlgProc@@YGHPAUHWND__@@IIJ@Z ENDP		; AuxiliaryDlgProc
_TEXT	ENDS
PUBLIC	_CloseStaticModelessWaitDlg
EXTRN	__imp__DestroyWindow@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _CloseStaticModelessWaitDlg
_TEXT	SEGMENT
_CloseStaticModelessWaitDlg PROC			; COMDAT

; 877  : 	if (StaticModelessWaitDlgHandle == NULL)

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _StaticModelessWaitDlgHandle
  00005	85 c0		 test	 eax, eax
  00007	74 07		 je	 SHORT $LN2@CloseStati

; 878  : 		return;	// Not shown
; 879  : 
; 880  : 	DestroyWindow (StaticModelessWaitDlgHandle);

  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
$LN2@CloseStati:

; 881  : }

  00010	c3		 ret	 0
_CloseStaticModelessWaitDlg ENDP
_TEXT	ENDS
PUBLIC	_IsButtonChecked
EXTRN	__imp__SendMessageA@16:PROC
; Function compile flags: /Ogtpy
;	COMDAT _IsButtonChecked
_TEXT	SEGMENT
_hButton$ = 8						; size = 4
_IsButtonChecked PROC					; COMDAT

; 886  : 	if (SendMessage (hButton, BM_GETCHECK, 0, 0) == BST_CHECKED)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _hButton$[esp-4]
  00004	6a 00		 push	 0
  00006	6a 00		 push	 0
  00008	68 f0 00 00 00	 push	 240			; 000000f0H
  0000d	50		 push	 eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00014	48		 dec	 eax
  00015	f7 d8		 neg	 eax
  00017	1b c0		 sbb	 eax, eax
  00019	40		 inc	 eax

; 887  : 		return TRUE;
; 888  : 	else
; 889  : 		return FALSE;
; 890  : }

  0001a	c3		 ret	 0
_IsButtonChecked ENDP
_TEXT	ENDS
PUBLIC	_CheckButton
; Function compile flags: /Ogtpy
;	COMDAT _CheckButton
_TEXT	SEGMENT
_hButton$ = 8						; size = 4
_CheckButton PROC					; COMDAT

; 895  : 	SendMessage (hButton, BM_SETCHECK, BST_CHECKED, 0);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _hButton$[esp-4]
  00004	6a 00		 push	 0
  00006	6a 01		 push	 1
  00008	68 f1 00 00 00	 push	 241			; 000000f1H
  0000d	50		 push	 eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 896  : }

  00014	c3		 ret	 0
_CheckButton ENDP
_TEXT	ENDS
PUBLIC	??_C@_08KAINEBEN@ABOUTBOX?$AA@			; `string'
PUBLIC	??_C@_1BO@CJPKCNHF@?$AAL?$AAu?$AAc?$AAi?$AAd?$AAa?$AA?5?$AAC?$AAo?$AAn?$AAs?$AAo?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_0L@MOFKMHPH@font_fixed?$AA@		; `string'
PUBLIC	??_C@_1CA@MBPOLHGL@?$AAT?$AAi?$AAm?$AAe?$AAs?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAR?$AAo?$AAm?$AAa?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_0L@NMFINBBB@font_title?$AA@		; `string'
PUBLIC	??_C@_1M@KAKMLIHO@?$AAA?$AAr?$AAi?$AAa?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_09KDCDAOMH@font_bold?$AA@			; `string'
PUBLIC	??_C@_06DILOELAE@NOFONT?$AA@			; `string'
PUBLIC	??_C@_1BI@GNONBDFP@?$AAC?$AAo?$AAu?$AAr?$AAi?$AAe?$AAr?$AA?5?$AAN?$AAe?$AAw?$AA?$AA@ ; `string'
PUBLIC	__real@c028000000000000
PUBLIC	??_C@_1O@FPBPJIKI@?$AAT?$AAa?$AAh?$AAo?$AAm?$AAa?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@HANLFFFG@?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_0M@IGCGEGAM@font_normal?$AA@		; `string'
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_InitDialog
EXTRN	__imp__AppendMenuW@16:PROC
EXTRN	__imp__AppendMenuA@16:PROC
EXTRN	__imp__GetSystemMenu@8:PROC
EXTRN	_handleWin32Error:PROC
EXTRN	_wcsncpy:PROC
EXTRN	_IsOSAtLeast:PROC
EXTRN	__imp__CreateFontIndirectW@4:PROC
EXTRN	__imp__SystemParametersInfoW@16:PROC
EXTRN	_GetFont:PROC
;	COMDAT ?aboutMenuAppended@?1??InitDialog@@9@4HA
_BSS	SEGMENT
?aboutMenuAppended@?1??InitDialog@@9@4HA DD 01H DUP (?)	; `InitDialog'::`2'::aboutMenuAppended
_BSS	ENDS
;	COMDAT ??_C@_08KAINEBEN@ABOUTBOX?$AA@
CONST	SEGMENT
??_C@_08KAINEBEN@ABOUTBOX?$AA@ DB 'ABOUTBOX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@CJPKCNHF@?$AAL?$AAu?$AAc?$AAi?$AAd?$AAa?$AA?5?$AAC?$AAo?$AAn?$AAs?$AAo?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@CJPKCNHF@?$AAL?$AAu?$AAc?$AAi?$AAd?$AAa?$AA?5?$AAC?$AAo?$AAn?$AAs?$AAo?$AAl?$AAe?$AA?$AA@ DB 'L'
	DB	00H, 'u', 00H, 'c', 00H, 'i', 00H, 'd', 00H, 'a', 00H, ' ', 00H
	DB	'C', 00H, 'o', 00H, 'n', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MOFKMHPH@font_fixed?$AA@
CONST	SEGMENT
??_C@_0L@MOFKMHPH@font_fixed?$AA@ DB 'font_fixed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@MBPOLHGL@?$AAT?$AAi?$AAm?$AAe?$AAs?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAR?$AAo?$AAm?$AAa?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@MBPOLHGL@?$AAT?$AAi?$AAm?$AAe?$AAs?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAR?$AAo?$AAm?$AAa?$AAn?$AA?$AA@ DB 'T'
	DB	00H, 'i', 00H, 'm', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'N', 00H
	DB	'e', 00H, 'w', 00H, ' ', 00H, 'R', 00H, 'o', 00H, 'm', 00H, 'a'
	DB	00H, 'n', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NMFINBBB@font_title?$AA@
CONST	SEGMENT
??_C@_0L@NMFINBBB@font_title?$AA@ DB 'font_title', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@KAKMLIHO@?$AAA?$AAr?$AAi?$AAa?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1M@KAKMLIHO@?$AAA?$AAr?$AAi?$AAa?$AAl?$AA?$AA@ DB 'A', 00H, 'r', 00H
	DB	'i', 00H, 'a', 00H, 'l', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KDCDAOMH@font_bold?$AA@
CONST	SEGMENT
??_C@_09KDCDAOMH@font_bold?$AA@ DB 'font_bold', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06DILOELAE@NOFONT?$AA@
CONST	SEGMENT
??_C@_06DILOELAE@NOFONT?$AA@ DB 'NOFONT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@GNONBDFP@?$AAC?$AAo?$AAu?$AAr?$AAi?$AAe?$AAr?$AA?5?$AAN?$AAe?$AAw?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@GNONBDFP@?$AAC?$AAo?$AAu?$AAr?$AAi?$AAe?$AAr?$AA?5?$AAN?$AAe?$AAw?$AA?$AA@ DB 'C'
	DB	00H, 'o', 00H, 'u', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, 'N', 00H, 'e', 00H, 'w', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT __real@c028000000000000
CONST	SEGMENT
__real@c028000000000000 DQ 0c028000000000000r	; -12
CONST	ENDS
;	COMDAT ??_C@_1O@FPBPJIKI@?$AAT?$AAa?$AAh?$AAo?$AAm?$AAa?$AA?$AA@
CONST	SEGMENT
??_C@_1O@FPBPJIKI@?$AAT?$AAa?$AAh?$AAo?$AAm?$AAa?$AA?$AA@ DB 'T', 00H, 'a'
	DB	00H, 'h', 00H, 'o', 00H, 'm', 00H, 'a', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@HANLFFFG@?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@HANLFFFG@?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA?$AA@ DB 'd', 00H
	DB	'e', 00H, 'f', 00H, 'a', 00H, 'u', 00H, 'l', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IGCGEGAM@font_normal?$AA@
CONST	SEGMENT
??_C@_0M@IGCGEGAM@font_normal?$AA@ DB 'font_normal', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _InitDialog
_TEXT	SEGMENT
_hwndDlg$GSCopy$ = -600					; size = 4
_lf$ = -596						; size = 92
_metric$ = -504						; size = 500
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_InitDialog PROC					; COMDAT

; 904  : {

  00000	81 ec 58 02 00
	00		 sub	 esp, 600		; 00000258H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 54 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+600], eax
  00014	8b 84 24 5c 02
	00 00		 mov	 eax, DWORD PTR _hwndDlg$[esp+596]
  0001b	53		 push	 ebx
  0001c	56		 push	 esi
  0001d	57		 push	 edi

; 905  : 	NONCLIENTMETRICSW metric;
; 906  : 	static BOOL aboutMenuAppended = FALSE;
; 907  : 
; 908  : 	int nHeight;
; 909  : 	LOGFONTW lf;
; 910  : 	HMENU hMenu;
; 911  : 	Font *font;
; 912  : 
; 913  : 	/* Fonts */
; 914  : 
; 915  : 	memset (&lf, 0, sizeof(lf));

  0001e	6a 5c		 push	 92			; 0000005cH
  00020	33 db		 xor	 ebx, ebx
  00022	8d 4c 24 14	 lea	 ecx, DWORD PTR _lf$[esp+616]
  00026	53		 push	 ebx
  00027	51		 push	 ecx

; 1005 : 
; 1006 : 	nHeight = CompensateDPIFont (!font ? -12 : -font->Size);

  00028	89 44 24 18	 mov	 DWORD PTR _hwndDlg$GSCopy$[esp+624], eax
  0002c	e8 00 00 00 00	 call	 _memset
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IGCGEGAM@font_normal?$AA@
  00036	e8 00 00 00 00	 call	 _GetFont
  0003b	83 c4 10	 add	 esp, 16			; 00000010H
  0003e	53		 push	 ebx
  0003f	8d 54 24 70	 lea	 edx, DWORD PTR _metric$[esp+616]
  00043	52		 push	 edx
  00044	68 f4 01 00 00	 push	 500			; 000001f4H
  00049	6a 29		 push	 41			; 00000029H
  0004b	8b f0		 mov	 esi, eax
  0004d	c7 44 24 7c f4
	01 00 00	 mov	 DWORD PTR _metric$[esp+628], 500 ; 000001f4H
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemParametersInfoW@16
  0005b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__CreateFontIndirectW@4
  00061	8d 84 24 84 00
	00 00		 lea	 eax, DWORD PTR _metric$[esp+636]
  00068	50		 push	 eax
  00069	ff d7		 call	 edi
  0006b	a3 00 00 00 00	 mov	 DWORD PTR _WindowTitleBarFont, eax
  00070	3b f3		 cmp	 esi, ebx
  00072	75 05		 jne	 SHORT $LN11@InitDialog

; 916  : 
; 917  : 	// Normal
; 918  : 	font = GetFont ("font_normal");
; 919  : 
; 920  : 	metric.cbSize = sizeof (metric);
; 921  : 	SystemParametersInfoW (SPI_GETNONCLIENTMETRICS, sizeof(metric), &metric, 0);
; 922  : 
; 923  : 	WindowTitleBarFont = CreateFontIndirectW (&metric.lfCaptionFont);
; 924  : 
; 925  : 	metric.lfMessageFont.lfHeight = CompensateDPIFont (!font ? -11 : -font->Size);

  00074	8d 43 f5	 lea	 eax, DWORD PTR [ebx-11]
  00077	eb 05		 jmp	 SHORT $LN12@InitDialog
$LN11@InitDialog:
  00079	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0007c	f7 d8		 neg	 eax
$LN12@InitDialog:
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 _CompensateDPIFont
  00084	83 c4 04	 add	 esp, 4
  00087	89 84 24 04 02
	00 00		 mov	 DWORD PTR _metric$[esp+1020], eax

; 926  : 	metric.lfMessageFont.lfWidth = 0;

  0008e	89 9c 24 08 02
	00 00		 mov	 DWORD PTR _metric$[esp+1024], ebx

; 927  : 
; 928  : 	if (font && wcscmp (font->FaceName, L"default") != 0)

  00095	3b f3		 cmp	 esi, ebx
  00097	74 45		 je	 SHORT $LN8@InitDialog
  00099	8b 36		 mov	 esi, DWORD PTR [esi]
  0009b	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_1BA@HANLFFFG@?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA?$AA@
  000a0	8b c6		 mov	 eax, esi
$LL33@InitDialog:
  000a2	66 8b 10	 mov	 dx, WORD PTR [eax]
  000a5	66 3b 11	 cmp	 dx, WORD PTR [ecx]
  000a8	75 1e		 jne	 SHORT $LN34@InitDialog
  000aa	66 3b d3	 cmp	 dx, bx
  000ad	74 15		 je	 SHORT $LN35@InitDialog
  000af	66 8b 50 02	 mov	 dx, WORD PTR [eax+2]
  000b3	66 3b 51 02	 cmp	 dx, WORD PTR [ecx+2]
  000b7	75 0f		 jne	 SHORT $LN34@InitDialog
  000b9	83 c0 04	 add	 eax, 4
  000bc	83 c1 04	 add	 ecx, 4
  000bf	66 3b d3	 cmp	 dx, bx
  000c2	75 de		 jne	 SHORT $LL33@InitDialog
$LN35@InitDialog:
  000c4	33 c0		 xor	 eax, eax
  000c6	eb 05		 jmp	 SHORT $LN36@InitDialog
$LN34@InitDialog:
  000c8	1b c0		 sbb	 eax, eax
  000ca	83 d8 ff	 sbb	 eax, -1
$LN36@InitDialog:
  000cd	3b c3		 cmp	 eax, ebx
  000cf	74 0d		 je	 SHORT $LN8@InitDialog

; 929  : 	{
; 930  : 		wcsncpy ((WCHAR *)metric.lfMessageFont.lfFaceName, font->FaceName, sizeof (metric.lfMessageFont.lfFaceName)/2);

  000d1	6a 20		 push	 32			; 00000020H
  000d3	56		 push	 esi
  000d4	8d 8c 24 28 02
	00 00		 lea	 ecx, DWORD PTR _metric$[esp+1056]
  000db	51		 push	 ecx
  000dc	eb 1d		 jmp	 SHORT $LN41@InitDialog
$LN8@InitDialog:

; 931  : 	}
; 932  : 	else if (IsOSAtLeast (WIN_VISTA))

  000de	6a 0b		 push	 11			; 0000000bH
  000e0	e8 00 00 00 00	 call	 _IsOSAtLeast
  000e5	83 c4 04	 add	 esp, 4
  000e8	85 c0		 test	 eax, eax
  000ea	74 17		 je	 SHORT $LN6@InitDialog

; 933  : 	{
; 934  : 		// Vista's new default font (size and spacing) breaks compatibility with Windows 2k/XP applications.
; 935  : 		// Force use of Tahoma (as Microsoft does in many dialogs) until a native Vista look is implemented.
; 936  : 		wcsncpy ((WCHAR *)metric.lfMessageFont.lfFaceName, L"Tahoma", sizeof (metric.lfMessageFont.lfFaceName)/2);

  000ec	6a 20		 push	 32			; 00000020H
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_1O@FPBPJIKI@?$AAT?$AAa?$AAh?$AAo?$AAm?$AAa?$AA?$AA@
  000f3	8d 94 24 28 02
	00 00		 lea	 edx, DWORD PTR _metric$[esp+1056]
  000fa	52		 push	 edx
$LN41@InitDialog:
  000fb	e8 00 00 00 00	 call	 _wcsncpy
  00100	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@InitDialog:

; 937  : 	}
; 938  : 
; 939  : 	hUserFont = CreateFontIndirectW (&metric.lfMessageFont);

  00103	8d 84 24 04 02
	00 00		 lea	 eax, DWORD PTR _metric$[esp+1020]
  0010a	50		 push	 eax
  0010b	ff d7		 call	 edi

; 940  : 
; 941  : 	metric.lfMessageFont.lfUnderline = TRUE;
; 942  : 	hUserUnderlineFont = CreateFontIndirectW (&metric.lfMessageFont);

  0010d	8d 8c 24 04 02
	00 00		 lea	 ecx, DWORD PTR _metric$[esp+1020]
  00114	51		 push	 ecx
  00115	a3 00 00 00 00	 mov	 DWORD PTR _hUserFont, eax
  0011a	c6 84 24 1d 02
	00 00 01	 mov	 BYTE PTR _metric$[esp+1045], 1
  00122	ff d7		 call	 edi

; 943  : 
; 944  : 	metric.lfMessageFont.lfUnderline = FALSE;
; 945  : 	metric.lfMessageFont.lfWeight = FW_BOLD;
; 946  : 	hUserBoldFont = CreateFontIndirectW (&metric.lfMessageFont);

  00124	8d 94 24 04 02
	00 00		 lea	 edx, DWORD PTR _metric$[esp+1020]
  0012b	be bc 02 00 00	 mov	 esi, 700		; 000002bcH
  00130	52		 push	 edx
  00131	a3 00 00 00 00	 mov	 DWORD PTR _hUserUnderlineFont, eax
  00136	88 9c 24 1d 02
	00 00		 mov	 BYTE PTR _metric$[esp+1045], bl
  0013d	89 b4 24 18 02
	00 00		 mov	 DWORD PTR _metric$[esp+1040], esi
  00144	ff d7		 call	 edi
  00146	a3 00 00 00 00	 mov	 DWORD PTR _hUserBoldFont, eax

; 947  : 
; 948  : 	metric.lfMessageFont.lfUnderline = TRUE;
; 949  : 	metric.lfMessageFont.lfWeight = FW_BOLD;
; 950  : 	hUserUnderlineBoldFont = CreateFontIndirectW (&metric.lfMessageFont);

  0014b	8d 84 24 04 02
	00 00		 lea	 eax, DWORD PTR _metric$[esp+1020]
  00152	50		 push	 eax
  00153	c6 84 24 1d 02
	00 00 01	 mov	 BYTE PTR _metric$[esp+1045], 1
  0015b	89 b4 24 18 02
	00 00		 mov	 DWORD PTR _metric$[esp+1040], esi
  00162	ff d7		 call	 edi

; 951  : 
; 952  : 	// Fixed-size (hexadecimal digits)
; 953  : 	nHeight = CompensateDPIFont (-12);

  00164	83 3d 00 00 00
	00 60		 cmp	 DWORD PTR _ScreenDPI, 96 ; 00000060H
  0016b	a3 00 00 00 00	 mov	 DWORD PTR ?hUserUnderlineBoldFont@@3PAUHFONT__@@A, eax ; hUserUnderlineBoldFont
  00170	75 07		 jne	 SHORT $LN29@InitDialog
  00172	b8 f4 ff ff ff	 mov	 eax, -12		; fffffff4H
  00177	eb 3d		 jmp	 SHORT $LN26@InitDialog
$LN29@InitDialog:
  00179	dd 05 00 00 00
	00		 fld	 QWORD PTR ?DPIScaleFactorY@@3NA ; DPIScaleFactorY
  0017f	83 ec 08	 sub	 esp, 8
  00182	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@c028000000000000
  00188	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _DlgAspectRatio
  0018e	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3feff7ced916872b
  00194	d9 ee		 fldz
  00196	d8 d9		 fcomp	 ST(1)
  00198	df e0		 fnstsw	 ax
  0019a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0019d	f6 c4 05	 test	 ah, 5
  001a0	7a 07		 jp	 SHORT $LN27@InitDialog
  001a2	e8 00 00 00 00	 call	 _floor
  001a7	eb 05		 jmp	 SHORT $LN42@InitDialog
$LN27@InitDialog:
  001a9	e8 00 00 00 00	 call	 _ceil
$LN42@InitDialog:
  001ae	83 c4 08	 add	 esp, 8
  001b1	e8 00 00 00 00	 call	 __ftol2_sse
$LN26@InitDialog:

; 954  : 	lf.lfHeight = nHeight;

  001b6	89 44 24 10	 mov	 DWORD PTR _lf$[esp+612], eax

; 955  : 	lf.lfWidth = 0;

  001ba	89 5c 24 14	 mov	 DWORD PTR _lf$[esp+616], ebx

; 956  : 	lf.lfEscapement = 0;

  001be	89 5c 24 18	 mov	 DWORD PTR _lf$[esp+620], ebx

; 957  : 	lf.lfOrientation = 0;

  001c2	89 5c 24 1c	 mov	 DWORD PTR _lf$[esp+624], ebx

; 958  : 	lf.lfWeight = FW_NORMAL;

  001c6	c7 44 24 20 90
	01 00 00	 mov	 DWORD PTR _lf$[esp+628], 400 ; 00000190H

; 959  : 	lf.lfItalic = FALSE;

  001ce	88 5c 24 24	 mov	 BYTE PTR _lf$[esp+632], bl

; 960  : 	lf.lfUnderline = FALSE;

  001d2	88 5c 24 25	 mov	 BYTE PTR _lf$[esp+633], bl

; 961  : 	lf.lfStrikeOut = FALSE;

  001d6	88 5c 24 26	 mov	 BYTE PTR _lf$[esp+634], bl

; 962  : 	lf.lfCharSet = DEFAULT_CHARSET;

  001da	c6 44 24 27 01	 mov	 BYTE PTR _lf$[esp+635], 1

; 963  : 	lf.lfOutPrecision = OUT_DEFAULT_PRECIS;

  001df	88 5c 24 28	 mov	 BYTE PTR _lf$[esp+636], bl

; 964  : 	lf.lfClipPrecision = CLIP_DEFAULT_PRECIS;

  001e3	88 5c 24 29	 mov	 BYTE PTR _lf$[esp+637], bl

; 965  : 	lf.lfQuality = PROOF_QUALITY;

  001e7	c6 44 24 2a 02	 mov	 BYTE PTR _lf$[esp+638], 2

; 966  : 	lf.lfPitchAndFamily = FF_DONTCARE;

  001ec	88 5c 24 2b	 mov	 BYTE PTR _lf$[esp+639], bl

; 967  : 	wcscpy (lf.lfFaceName, L"Courier New");

  001f0	33 c0		 xor	 eax, eax
  001f2	eb 0c 8d a4 24
	00 00 00 00 eb
	03 8d 49 00	 npad	 14
$LL13@InitDialog:
  00200	0f b7 88 00 00
	00 00		 movzx	 ecx, WORD PTR ??_C@_1BI@GNONBDFP@?$AAC?$AAo?$AAu?$AAr?$AAi?$AAe?$AAr?$AA?5?$AAN?$AAe?$AAw?$AA?$AA@[eax]
  00207	66 89 4c 04 2c	 mov	 WORD PTR _lf$[esp+eax+640], cx
  0020c	83 c0 02	 add	 eax, 2
  0020f	66 3b cb	 cmp	 cx, bx
  00212	75 ec		 jne	 SHORT $LL13@InitDialog

; 968  : 	hFixedDigitFont = CreateFontIndirectW (&lf);

  00214	8d 4c 24 10	 lea	 ecx, DWORD PTR _lf$[esp+612]
  00218	51		 push	 ecx
  00219	ff d7		 call	 edi
  0021b	a3 00 00 00 00	 mov	 DWORD PTR _hFixedDigitFont, eax

; 969  : 	if (hFixedDigitFont == NULL)

  00220	3b c3		 cmp	 eax, ebx
  00222	75 17		 jne	 SHORT $LN5@InitDialog

; 970  : 	{
; 971  : 		handleWin32Error (hwndDlg);

  00224	8b 54 24 0c	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[esp+612]
  00228	52		 push	 edx
  00229	e8 00 00 00 00	 call	 _handleWin32Error
  0022e	83 c4 04	 add	 esp, 4

; 972  : 		AbortProcess ("NOFONT");

  00231	68 00 00 00 00	 push	 OFFSET ??_C@_06DILOELAE@NOFONT?$AA@
  00236	e8 00 00 00 00	 call	 _AbortProcess
$LN5@InitDialog:

; 973  : 	}
; 974  : 
; 975  : 	// Bold
; 976  : 	font = GetFont ("font_bold");

  0023b	68 00 00 00 00	 push	 OFFSET ??_C@_09KDCDAOMH@font_bold?$AA@
  00240	e8 00 00 00 00	 call	 _GetFont
  00245	8b f0		 mov	 esi, eax
  00247	83 c4 04	 add	 esp, 4

; 977  : 
; 978  : 	nHeight = CompensateDPIFont (!font ? -13 : -font->Size);

  0024a	3b f3		 cmp	 esi, ebx
  0024c	75 07		 jne	 SHORT $LN14@InitDialog
  0024e	b8 f3 ff ff ff	 mov	 eax, -13		; fffffff3H
  00253	eb 05		 jmp	 SHORT $LN15@InitDialog
$LN14@InitDialog:
  00255	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00258	f7 d8		 neg	 eax
$LN15@InitDialog:
  0025a	50		 push	 eax
  0025b	e8 00 00 00 00	 call	 _CompensateDPIFont
  00260	83 c4 04	 add	 esp, 4

; 979  : 	lf.lfHeight = nHeight;

  00263	89 44 24 10	 mov	 DWORD PTR _lf$[esp+612], eax

; 980  : 	lf.lfWeight = FW_BLACK;

  00267	c7 44 24 20 84
	03 00 00	 mov	 DWORD PTR _lf$[esp+628], 900 ; 00000384H

; 981  : 	wcsncpy (lf.lfFaceName, !font ? L"Arial" : font->FaceName, sizeof (lf.lfFaceName)/2);

  0026f	3b f3		 cmp	 esi, ebx
  00271	75 07		 jne	 SHORT $LN16@InitDialog
  00273	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_1M@KAKMLIHO@?$AAA?$AAr?$AAi?$AAa?$AAl?$AA?$AA@
  00278	eb 02		 jmp	 SHORT $LN17@InitDialog
$LN16@InitDialog:
  0027a	8b 36		 mov	 esi, DWORD PTR [esi]
$LN17@InitDialog:
  0027c	6a 20		 push	 32			; 00000020H
  0027e	8d 44 24 30	 lea	 eax, DWORD PTR _lf$[esp+644]
  00282	56		 push	 esi
  00283	50		 push	 eax
  00284	e8 00 00 00 00	 call	 _wcsncpy
  00289	83 c4 0c	 add	 esp, 12			; 0000000cH

; 982  : 	hBoldFont = CreateFontIndirectW (&lf);

  0028c	8d 4c 24 10	 lea	 ecx, DWORD PTR _lf$[esp+612]
  00290	51		 push	 ecx
  00291	ff d7		 call	 edi
  00293	a3 00 00 00 00	 mov	 DWORD PTR _hBoldFont, eax

; 983  : 	if (hBoldFont == NULL)

  00298	3b c3		 cmp	 eax, ebx
  0029a	75 17		 jne	 SHORT $LN4@InitDialog

; 984  : 	{
; 985  : 		handleWin32Error (hwndDlg);

  0029c	8b 54 24 0c	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[esp+612]
  002a0	52		 push	 edx
  002a1	e8 00 00 00 00	 call	 _handleWin32Error
  002a6	83 c4 04	 add	 esp, 4

; 986  : 		AbortProcess ("NOFONT");

  002a9	68 00 00 00 00	 push	 OFFSET ??_C@_06DILOELAE@NOFONT?$AA@
  002ae	e8 00 00 00 00	 call	 _AbortProcess
$LN4@InitDialog:

; 987  : 	}
; 988  : 
; 989  : 	// Title
; 990  : 	font = GetFont ("font_title");

  002b3	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NMFINBBB@font_title?$AA@
  002b8	e8 00 00 00 00	 call	 _GetFont
  002bd	8b f0		 mov	 esi, eax
  002bf	83 c4 04	 add	 esp, 4

; 991  : 
; 992  : 	nHeight = CompensateDPIFont (!font ? -21 : -font->Size);

  002c2	3b f3		 cmp	 esi, ebx
  002c4	75 07		 jne	 SHORT $LN18@InitDialog
  002c6	b8 eb ff ff ff	 mov	 eax, -21		; ffffffebH
  002cb	eb 05		 jmp	 SHORT $LN19@InitDialog
$LN18@InitDialog:
  002cd	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  002d0	f7 d8		 neg	 eax
$LN19@InitDialog:
  002d2	50		 push	 eax
  002d3	e8 00 00 00 00	 call	 _CompensateDPIFont
  002d8	83 c4 04	 add	 esp, 4

; 993  : 	lf.lfHeight = nHeight;

  002db	89 44 24 10	 mov	 DWORD PTR _lf$[esp+612], eax

; 994  : 	lf.lfWeight = FW_REGULAR;

  002df	c7 44 24 20 90
	01 00 00	 mov	 DWORD PTR _lf$[esp+628], 400 ; 00000190H

; 995  : 	wcsncpy (lf.lfFaceName, !font ? L"Times New Roman" : font->FaceName, sizeof (lf.lfFaceName)/2);

  002e7	3b f3		 cmp	 esi, ebx
  002e9	75 07		 jne	 SHORT $LN20@InitDialog
  002eb	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_1CA@MBPOLHGL@?$AAT?$AAi?$AAm?$AAe?$AAs?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAR?$AAo?$AAm?$AAa?$AAn?$AA?$AA@
  002f0	eb 02		 jmp	 SHORT $LN21@InitDialog
$LN20@InitDialog:
  002f2	8b 36		 mov	 esi, DWORD PTR [esi]
$LN21@InitDialog:
  002f4	6a 20		 push	 32			; 00000020H
  002f6	8d 44 24 30	 lea	 eax, DWORD PTR _lf$[esp+644]
  002fa	56		 push	 esi
  002fb	50		 push	 eax
  002fc	e8 00 00 00 00	 call	 _wcsncpy
  00301	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 	hTitleFont = CreateFontIndirectW (&lf);

  00304	8d 4c 24 10	 lea	 ecx, DWORD PTR _lf$[esp+612]
  00308	51		 push	 ecx
  00309	ff d7		 call	 edi
  0030b	a3 00 00 00 00	 mov	 DWORD PTR _hTitleFont, eax

; 997  : 	if (hTitleFont == NULL)

  00310	3b c3		 cmp	 eax, ebx
  00312	75 17		 jne	 SHORT $LN3@InitDialog

; 998  : 	{
; 999  : 		handleWin32Error (hwndDlg);

  00314	8b 54 24 0c	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[esp+612]
  00318	52		 push	 edx
  00319	e8 00 00 00 00	 call	 _handleWin32Error
  0031e	83 c4 04	 add	 esp, 4

; 1000 : 		AbortProcess ("NOFONT");

  00321	68 00 00 00 00	 push	 OFFSET ??_C@_06DILOELAE@NOFONT?$AA@
  00326	e8 00 00 00 00	 call	 _AbortProcess
$LN3@InitDialog:

; 1001 : 	}
; 1002 : 
; 1003 : 	// Fixed-size
; 1004 : 	font = GetFont ("font_fixed");

  0032b	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MOFKMHPH@font_fixed?$AA@
  00330	e8 00 00 00 00	 call	 _GetFont
  00335	8b f0		 mov	 esi, eax
  00337	83 c4 04	 add	 esp, 4

; 1005 : 
; 1006 : 	nHeight = CompensateDPIFont (!font ? -12 : -font->Size);

  0033a	3b f3		 cmp	 esi, ebx
  0033c	75 07		 jne	 SHORT $LN22@InitDialog
  0033e	b8 f4 ff ff ff	 mov	 eax, -12		; fffffff4H
  00343	eb 05		 jmp	 SHORT $LN23@InitDialog
$LN22@InitDialog:
  00345	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00348	f7 d8		 neg	 eax
$LN23@InitDialog:
  0034a	50		 push	 eax
  0034b	e8 00 00 00 00	 call	 _CompensateDPIFont
  00350	83 c4 04	 add	 esp, 4

; 1007 : 	lf.lfHeight = nHeight;

  00353	89 44 24 10	 mov	 DWORD PTR _lf$[esp+612], eax

; 1008 : 	lf.lfWidth = 0;

  00357	89 5c 24 14	 mov	 DWORD PTR _lf$[esp+616], ebx

; 1009 : 	lf.lfEscapement = 0;

  0035b	89 5c 24 18	 mov	 DWORD PTR _lf$[esp+620], ebx

; 1010 : 	lf.lfOrientation = 0;

  0035f	89 5c 24 1c	 mov	 DWORD PTR _lf$[esp+624], ebx

; 1011 : 	lf.lfWeight = FW_NORMAL;

  00363	c7 44 24 20 90
	01 00 00	 mov	 DWORD PTR _lf$[esp+628], 400 ; 00000190H

; 1012 : 	lf.lfItalic = FALSE;

  0036b	88 5c 24 24	 mov	 BYTE PTR _lf$[esp+632], bl

; 1013 : 	lf.lfUnderline = FALSE;

  0036f	88 5c 24 25	 mov	 BYTE PTR _lf$[esp+633], bl

; 1014 : 	lf.lfStrikeOut = FALSE;

  00373	88 5c 24 26	 mov	 BYTE PTR _lf$[esp+634], bl

; 1015 : 	lf.lfCharSet = DEFAULT_CHARSET;

  00377	c6 44 24 27 01	 mov	 BYTE PTR _lf$[esp+635], 1

; 1016 : 	lf.lfOutPrecision = OUT_DEFAULT_PRECIS;

  0037c	88 5c 24 28	 mov	 BYTE PTR _lf$[esp+636], bl

; 1017 : 	lf.lfClipPrecision = CLIP_DEFAULT_PRECIS;

  00380	88 5c 24 29	 mov	 BYTE PTR _lf$[esp+637], bl

; 1018 : 	lf.lfQuality = PROOF_QUALITY;

  00384	c6 44 24 2a 02	 mov	 BYTE PTR _lf$[esp+638], 2

; 1019 : 	lf.lfPitchAndFamily = FF_DONTCARE;

  00389	88 5c 24 2b	 mov	 BYTE PTR _lf$[esp+639], bl

; 1020 : 	wcsncpy (lf.lfFaceName, !font ? L"Lucida Console" : font->FaceName, sizeof (lf.lfFaceName)/2);

  0038d	3b f3		 cmp	 esi, ebx
  0038f	75 07		 jne	 SHORT $LN24@InitDialog
  00391	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_1BO@CJPKCNHF@?$AAL?$AAu?$AAc?$AAi?$AAd?$AAa?$AA?5?$AAC?$AAo?$AAn?$AAs?$AAo?$AAl?$AAe?$AA?$AA@
  00396	eb 02		 jmp	 SHORT $LN25@InitDialog
$LN24@InitDialog:
  00398	8b 36		 mov	 esi, DWORD PTR [esi]
$LN25@InitDialog:
  0039a	6a 20		 push	 32			; 00000020H
  0039c	8d 44 24 30	 lea	 eax, DWORD PTR _lf$[esp+644]
  003a0	56		 push	 esi
  003a1	50		 push	 eax
  003a2	e8 00 00 00 00	 call	 _wcsncpy
  003a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1021 : 	hFixedFont = CreateFontIndirectW (&lf);

  003aa	8d 4c 24 10	 lea	 ecx, DWORD PTR _lf$[esp+612]
  003ae	51		 push	 ecx
  003af	ff d7		 call	 edi
  003b1	a3 00 00 00 00	 mov	 DWORD PTR _hFixedFont, eax

; 1022 : 	if (hFixedFont == NULL)

  003b6	3b c3		 cmp	 eax, ebx
  003b8	75 17		 jne	 SHORT $LN2@InitDialog

; 1023 : 	{
; 1024 : 		handleWin32Error (hwndDlg);

  003ba	8b 54 24 0c	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[esp+612]
  003be	52		 push	 edx
  003bf	e8 00 00 00 00	 call	 _handleWin32Error
  003c4	83 c4 04	 add	 esp, 4

; 1025 : 		AbortProcess ("NOFONT");

  003c7	68 00 00 00 00	 push	 OFFSET ??_C@_06DILOELAE@NOFONT?$AA@
  003cc	e8 00 00 00 00	 call	 _AbortProcess
$LN2@InitDialog:

; 1026 : 	}
; 1027 : 
; 1028 : 	if (!aboutMenuAppended)

  003d1	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?aboutMenuAppended@?1??InitDialog@@9@4HA, ebx
  003d7	75 41		 jne	 SHORT $LN1@InitDialog

; 1029 : 	{
; 1030 : 		hMenu = GetSystemMenu (hwndDlg, FALSE);

  003d9	8b 44 24 0c	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[esp+612]
  003dd	53		 push	 ebx
  003de	50		 push	 eax
  003df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMenu@8

; 1031 : 		AppendMenu (hMenu, MF_SEPARATOR, 0, NULL);

  003e5	53		 push	 ebx
  003e6	53		 push	 ebx
  003e7	8b f0		 mov	 esi, eax
  003e9	68 00 08 00 00	 push	 2048			; 00000800H
  003ee	56		 push	 esi
  003ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16

; 1032 : 		AppendMenuW (hMenu, MF_ENABLED | MF_STRING, IDC_ABOUT, GetString ("ABOUTBOX"));

  003f5	68 00 00 00 00	 push	 OFFSET ??_C@_08KAINEBEN@ABOUTBOX?$AA@
  003fa	e8 00 00 00 00	 call	 _GetString
  003ff	83 c4 04	 add	 esp, 4
  00402	50		 push	 eax
  00403	68 ff 7f 00 00	 push	 32767			; 00007fffH
  00408	53		 push	 ebx
  00409	56		 push	 esi
  0040a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuW@16

; 1033 : 
; 1034 : 		aboutMenuAppended = TRUE;

  00410	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?aboutMenuAppended@?1??InitDialog@@9@4HA, 1
$LN1@InitDialog:

; 1035 : 	}
; 1036 : }

  0041a	8b 8c 24 60 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+612]
  00421	5f		 pop	 edi
  00422	5e		 pop	 esi
  00423	5b		 pop	 ebx
  00424	33 cc		 xor	 ecx, esp
  00426	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0042b	81 c4 58 02 00
	00		 add	 esp, 600		; 00000258H
  00431	c3		 ret	 0
$LN40@InitDialog:
_InitDialog ENDP
_TEXT	ENDS
PUBLIC	_ProcessPaintMessages
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
; Function compile flags: /Ogtpy
;	COMDAT _ProcessPaintMessages
_TEXT	SEGMENT
_paintMsg$ = -28					; size = 28
_hwnd$ = 8						; size = 4
_maxMessagesToProcess$ = 12				; size = 4
_ProcessPaintMessages PROC				; COMDAT

; 1041 : {

  00000	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00003	55		 push	 ebp

; 1042 : 	MSG paintMsg;
; 1043 : 	int msgCounter = maxMessagesToProcess;	

  00004	8b 6c 24 28	 mov	 ebp, DWORD PTR _maxMessagesToProcess$[esp+28]
  00008	56		 push	 esi

; 1044 : 
; 1045 : 	while (PeekMessage (&paintMsg, hwnd, 0, 0, PM_REMOVE | PM_QS_PAINT) != 0 && msgCounter-- > 0)

  00009	8b 74 24 28	 mov	 esi, DWORD PTR _hwnd$[esp+32]
  0000d	57		 push	 edi
  0000e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__PeekMessageA@20
  00014	68 01 00 20 00	 push	 2097153			; 00200001H
  00019	6a 00		 push	 0
  0001b	6a 00		 push	 0
  0001d	56		 push	 esi
  0001e	8d 44 24 1c	 lea	 eax, DWORD PTR _paintMsg$[esp+56]
  00022	50		 push	 eax
  00023	ff d7		 call	 edi
  00025	85 c0		 test	 eax, eax
  00027	74 2b		 je	 SHORT $LN1@ProcessPai
  00029	53		 push	 ebx
  0002a	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__DispatchMessageA@4
$LL2@ProcessPai:
  00030	8b cd		 mov	 ecx, ebp
  00032	4d		 dec	 ebp
  00033	85 c9		 test	 ecx, ecx
  00035	7e 1c		 jle	 SHORT $LN7@ProcessPai

; 1046 : 	{
; 1047 : 		DispatchMessage (&paintMsg);

  00037	8d 54 24 10	 lea	 edx, DWORD PTR _paintMsg$[esp+44]
  0003b	52		 push	 edx
  0003c	ff d3		 call	 ebx
  0003e	68 01 00 20 00	 push	 2097153			; 00200001H
  00043	6a 00		 push	 0
  00045	6a 00		 push	 0
  00047	56		 push	 esi
  00048	8d 44 24 20	 lea	 eax, DWORD PTR _paintMsg$[esp+60]
  0004c	50		 push	 eax
  0004d	ff d7		 call	 edi
  0004f	85 c0		 test	 eax, eax
  00051	75 dd		 jne	 SHORT $LL2@ProcessPai
$LN7@ProcessPai:
  00053	5b		 pop	 ebx
$LN1@ProcessPai:
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5d		 pop	 ebp

; 1048 : 	}
; 1049 : }

  00057	83 c4 1c	 add	 esp, 28			; 0000001cH
  0005a	c3		 ret	 0
_ProcessPaintMessages ENDP
_TEXT	ENDS
PUBLIC	_CreateMemBitmap
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__SetMapMode@8:PROC
EXTRN	__imp__CreateCompatibleDC@4:PROC
EXTRN	__imp__LoadBitmapA@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT _CreateMemBitmap
_TEXT	SEGMENT
_hInstance$ = 8						; size = 4
_hwnd$ = 12						; size = 4
_resource$ = 16						; size = 4
_CreateMemBitmap PROC					; COMDAT

; 1054 : 	HBITMAP picture = LoadBitmap (hInstance, resource);

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR _resource$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR _hInstance$[esp-4]
  00008	53		 push	 ebx
  00009	55		 push	 ebp
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	50		 push	 eax
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8

; 1055 : 	HDC viewDC = GetDC (hwnd), dcMem;

  00014	8b 6c 24 18	 mov	 ebp, DWORD PTR _hwnd$[esp+12]
  00018	55		 push	 ebp
  00019	8b f8		 mov	 edi, eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  00021	8b d8		 mov	 ebx, eax

; 1056 : 
; 1057 : 	dcMem = CreateCompatibleDC (viewDC);

  00023	53		 push	 ebx
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4
  0002a	8b f0		 mov	 esi, eax

; 1058 : 
; 1059 : 	SetMapMode (dcMem, MM_TEXT);

  0002c	6a 01		 push	 1
  0002e	56		 push	 esi
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMapMode@8

; 1060 : 
; 1061 : 	SelectObject (dcMem, picture);

  00035	57		 push	 edi
  00036	56		 push	 esi
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 1062 : 
; 1063 : 	DeleteObject (picture);

  0003d	57		 push	 edi
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 1064 : 
; 1065 : 	ReleaseDC (hwnd, viewDC);

  00044	53		 push	 ebx
  00045	55		 push	 ebp
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8
  0004c	5f		 pop	 edi

; 1066 : 
; 1067 : 	return dcMem;

  0004d	8b c6		 mov	 eax, esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	5b		 pop	 ebx

; 1068 : }

  00052	c3		 ret	 0
_CreateMemBitmap ENDP
_TEXT	ENDS
PUBLIC	_RenderBitmap
EXTRN	__imp__BitBlt@36:PROC
EXTRN	__imp__DeleteDC@4:PROC
EXTRN	__imp__StretchBlt@44:PROC
EXTRN	__imp__SetStretchBltMode@8:PROC
EXTRN	__imp__CreateCompatibleBitmap@12:PROC
EXTRN	__imp__GetObjectA@12:PROC
EXTRN	__imp__GetCurrentObject@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT _RenderBitmap
_TEXT	SEGMENT
_hbmpRescaled$ = -44					; size = 4
_rec$138330 = -40					; size = 16
_bitmap$ = -24						; size = 24
_resource$ = 8						; size = 4
_hwndDest$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_nWidth$ = 24						; size = 4
_nHeight$ = 28						; size = 4
_bDirectRender$ = 32					; size = 4
_bKeepAspectRatio$ = 36					; size = 4
_RenderBitmap PROC					; COMDAT

; 1084 : 	LRESULT lResult = 0;
; 1085 : 
; 1086 : 	HDC hdcSrc = CreateMemBitmap (hInst, hwndDest, resource);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _resource$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR _hwndDest$[esp-4]
  00008	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  0000e	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00011	53		 push	 ebx
  00012	55		 push	 ebp
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 _CreateMemBitmap
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	8b f8		 mov	 edi, eax

; 1087 : 
; 1088 : 	HGDIOBJ picture = GetCurrentObject (hdcSrc, OBJ_BITMAP);

  00022	6a 07		 push	 7
  00024	57		 push	 edi
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentObject@8

; 1089 : 
; 1090 : 	HBITMAP hbmpRescaled;
; 1091 : 	BITMAP bitmap;
; 1092 : 
; 1093 : 	HDC hdcRescaled;
; 1094 : 
; 1095 : 	if (!bDirectRender && nWidth == 0 && nHeight == 0)

  0002b	83 7c 24 58 00	 cmp	 DWORD PTR _bDirectRender$[esp+56], 0
  00030	8b 6c 24 50	 mov	 ebp, DWORD PTR _nWidth$[esp+56]
  00034	8b 5c 24 54	 mov	 ebx, DWORD PTR _nHeight$[esp+56]
  00038	8b f0		 mov	 esi, eax
  0003a	75 73		 jne	 SHORT $LN4@RenderBitm
  0003c	85 ed		 test	 ebp, ebp
  0003e	75 6f		 jne	 SHORT $LN4@RenderBitm
  00040	85 db		 test	 ebx, ebx
  00042	75 6b		 jne	 SHORT $LN4@RenderBitm

; 1096 : 	{
; 1097 : 		RECT rec;
; 1098 : 
; 1099 : 		GetClientRect (hwndDest, &rec);

  00044	8b 4c 24 44	 mov	 ecx, DWORD PTR _hwndDest$[esp+56]
  00048	8d 44 24 14	 lea	 eax, DWORD PTR _rec$138330[esp+60]
  0004c	50		 push	 eax
  0004d	51		 push	 ecx
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 1100 : 
; 1101 : 		if (bKeepAspectRatio)

  00054	39 5c 24 5c	 cmp	 DWORD PTR _bKeepAspectRatio$[esp+56], ebx
  00058	74 3a		 je	 SHORT $LN7@RenderBitm

; 1102 : 		{
; 1103 : 			if (DlgAspectRatio > 1)

  0005a	d9 e8		 fld1
  0005c	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR _DlgAspectRatio
  00062	df e0		 fnstsw	 ax
  00064	f6 c4 05	 test	 ah, 5
  00067	7a 13		 jp	 SHORT $LN6@RenderBitm

; 1104 : 			{
; 1105 : 				// Do not fix this, it's correct. We use the Y scale factor intentionally for both
; 1106 : 				// directions to maintain aspect ratio (see above for more info).
; 1107 : 				nWidth = CompensateYDPI (rec.right);

  00069	8b 54 24 1c	 mov	 edx, DWORD PTR _rec$138330[esp+68]
  0006d	52		 push	 edx
  0006e	e8 00 00 00 00	 call	 _CompensateYDPI
  00073	8b e8		 mov	 ebp, eax

; 1108 : 				nHeight = CompensateYDPI (rec.bottom);

  00075	8b 44 24 24	 mov	 eax, DWORD PTR _rec$138330[esp+76]
  00079	50		 push	 eax

; 1109 : 			}
; 1110 : 			else

  0007a	eb 29		 jmp	 SHORT $LN13@RenderBitm
$LN6@RenderBitm:

; 1111 : 			{
; 1112 : 				// Do not fix this, it's correct. We use the X scale factor intentionally for both
; 1113 : 				// directions to maintain aspect ratio (see above for more info).
; 1114 : 				nWidth = CompensateXDPI (rec.right);

  0007c	8b 4c 24 1c	 mov	 ecx, DWORD PTR _rec$138330[esp+68]
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 _CompensateXDPI

; 1115 : 				nHeight = CompensateXDPI (rec.bottom);

  00086	8b 54 24 24	 mov	 edx, DWORD PTR _rec$138330[esp+76]
  0008a	52		 push	 edx
  0008b	8b e8		 mov	 ebp, eax
  0008d	e8 00 00 00 00	 call	 _CompensateXDPI

; 1116 : 			}
; 1117 : 		}
; 1118 : 		else

  00092	eb 16		 jmp	 SHORT $LN14@RenderBitm
$LN7@RenderBitm:

; 1119 : 		{
; 1120 : 			nWidth = CompensateXDPI (rec.right);

  00094	8b 44 24 1c	 mov	 eax, DWORD PTR _rec$138330[esp+68]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 _CompensateXDPI

; 1121 : 			nHeight = CompensateYDPI (rec.bottom);

  0009e	8b 4c 24 24	 mov	 ecx, DWORD PTR _rec$138330[esp+76]
  000a2	8b e8		 mov	 ebp, eax
  000a4	51		 push	 ecx
$LN13@RenderBitm:
  000a5	e8 00 00 00 00	 call	 _CompensateYDPI
$LN14@RenderBitm:
  000aa	83 c4 08	 add	 esp, 8
  000ad	8b d8		 mov	 ebx, eax
$LN4@RenderBitm:

; 1122 : 		}
; 1123 : 	}
; 1124 : 
; 1125 : 	GetObject (picture, sizeof (BITMAP), &bitmap);

  000af	8d 54 24 24	 lea	 edx, DWORD PTR _bitmap$[esp+60]
  000b3	52		 push	 edx
  000b4	6a 18		 push	 24			; 00000018H
  000b6	56		 push	 esi
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetObjectA@12

; 1126 : 
; 1127 :     hdcRescaled = CreateCompatibleDC (hdcSrc); 

  000bd	57		 push	 edi
  000be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4

; 1128 :  
; 1129 :     hbmpRescaled = CreateCompatibleBitmap (hdcSrc, nWidth, nHeight); 

  000c4	53		 push	 ebx
  000c5	55		 push	 ebp
  000c6	57		 push	 edi
  000c7	8b f0		 mov	 esi, eax
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleBitmap@12

; 1130 :  
; 1131 :     SelectObject (hdcRescaled, hbmpRescaled);

  000cf	50		 push	 eax
  000d0	56		 push	 esi
  000d1	89 44 24 18	 mov	 DWORD PTR _hbmpRescaled$[esp+68], eax
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 1132 : 
; 1133 : 	/* Anti-aliasing mode (HALFTONE is the only anti-aliasing algorithm natively supported by Windows 2000.
; 1134 : 	   TODO: GDI+ offers higher quality -- InterpolationModeHighQualityBicubic) */
; 1135 : 	SetStretchBltMode (hdcRescaled, HALFTONE);

  000db	6a 04		 push	 4
  000dd	56		 push	 esi
  000de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetStretchBltMode@8

; 1136 : 
; 1137 : 	StretchBlt (hdcRescaled,
; 1138 : 		0,
; 1139 : 		0,
; 1140 : 		nWidth,
; 1141 : 		nHeight,
; 1142 : 		hdcSrc,
; 1143 : 		0,
; 1144 : 		0,
; 1145 : 		bitmap.bmWidth, 
; 1146 : 		bitmap.bmHeight,
; 1147 : 		SRCCOPY);

  000e4	8b 44 24 2c	 mov	 eax, DWORD PTR _bitmap$[esp+68]
  000e8	8b 4c 24 28	 mov	 ecx, DWORD PTR _bitmap$[esp+64]
  000ec	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  000f1	50		 push	 eax
  000f2	51		 push	 ecx
  000f3	6a 00		 push	 0
  000f5	6a 00		 push	 0
  000f7	57		 push	 edi
  000f8	53		 push	 ebx
  000f9	55		 push	 ebp
  000fa	6a 00		 push	 0
  000fc	6a 00		 push	 0
  000fe	56		 push	 esi
  000ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__StretchBlt@44

; 1148 : 
; 1149 : 	DeleteDC (hdcSrc);

  00105	57		 push	 edi
  00106	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteDC@4

; 1150 : 
; 1151 : 	if (bDirectRender)

  0010c	83 7c 24 58 00	 cmp	 DWORD PTR _bDirectRender$[esp+56], 0

; 1152 : 	{
; 1153 : 		HDC hdcDest = GetDC (hwndDest);

  00111	8b 54 24 44	 mov	 edx, DWORD PTR _hwndDest$[esp+56]
  00115	74 42		 je	 SHORT $LN3@RenderBitm
  00117	52		 push	 edx
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4

; 1154 : 
; 1155 : 		BitBlt (hdcDest, x, y, nWidth, nHeight, hdcRescaled, 0, 0, SRCCOPY);

  0011e	8b 4c 24 48	 mov	 ecx, DWORD PTR _x$[esp+56]
  00122	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  00127	6a 00		 push	 0
  00129	6a 00		 push	 0
  0012b	56		 push	 esi
  0012c	53		 push	 ebx
  0012d	8b f8		 mov	 edi, eax
  0012f	8b 44 24 60	 mov	 eax, DWORD PTR _y$[esp+76]
  00133	55		 push	 ebp
  00134	50		 push	 eax
  00135	51		 push	 ecx
  00136	57		 push	 edi
  00137	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BitBlt@36

; 1156 : 		DeleteDC (hdcDest);

  0013d	57		 push	 edi
  0013e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteDC@4

; 1157 : 	}
; 1158 : 	else

  00144	8b 7c 24 10	 mov	 edi, DWORD PTR _hbmpRescaled$[esp+60]

; 1165 : 
; 1166 : 	DeleteDC (hdcRescaled);

  00148	56		 push	 esi
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteDC@4

; 1167 : 
; 1168 : 	return hbmpRescaled;

  0014f	8b c7		 mov	 eax, edi
  00151	5f		 pop	 edi
  00152	5e		 pop	 esi
  00153	5d		 pop	 ebp
  00154	5b		 pop	 ebx

; 1169 : }

  00155	83 c4 2c	 add	 esp, 44			; 0000002cH
  00158	c3		 ret	 0
$LN3@RenderBitm:

; 1159 : 	{
; 1160 : 		lResult = SendMessage (hwndDest, (UINT) STM_SETIMAGE, (WPARAM) IMAGE_BITMAP, (LPARAM) (HANDLE) hbmpRescaled);

  00159	8b 7c 24 10	 mov	 edi, DWORD PTR _hbmpRescaled$[esp+60]
  0015d	57		 push	 edi
  0015e	6a 00		 push	 0
  00160	68 72 01 00 00	 push	 370			; 00000172H
  00165	52		 push	 edx
  00166	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1161 : 	}
; 1162 : 
; 1163 : 	if ((HGDIOBJ) lResult != NULL && (HGDIOBJ) lResult != (HGDIOBJ) hbmpRescaled)

  0016c	85 c0		 test	 eax, eax
  0016e	74 0b		 je	 SHORT $LN1@RenderBitm
  00170	3b c7		 cmp	 eax, edi
  00172	74 07		 je	 SHORT $LN1@RenderBitm

; 1164 : 		DeleteObject ((HGDIOBJ) lResult);

  00174	50		 push	 eax
  00175	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
$LN1@RenderBitm:

; 1165 : 
; 1166 : 	DeleteDC (hdcRescaled);

  0017b	56		 push	 esi
  0017c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteDC@4

; 1167 : 
; 1168 : 	return hbmpRescaled;

  00182	8b c7		 mov	 eax, edi
  00184	5f		 pop	 edi
  00185	5e		 pop	 esi
  00186	5d		 pop	 ebp
  00187	5b		 pop	 ebx

; 1169 : }

  00188	83 c4 2c	 add	 esp, 44			; 0000002cH
  0018b	c3		 ret	 0
_RenderBitmap ENDP
_TEXT	ENDS
PUBLIC	_hwnd$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_RedTick@16
EXTRN	__imp__EndPaint@8:PROC
EXTRN	__imp__LineTo@12:PROC
EXTRN	__imp__MoveToEx@16:PROC
EXTRN	__imp__GetDialogBaseUnits@0:PROC
EXTRN	__imp__CreatePen@12:PROC
EXTRN	__imp__DefWindowProcA@16:PROC
EXTRN	__imp__BeginPaint@8:PROC
EXTRN	__imp__GetUpdateRect@12:PROC
; Function compile flags: /Ogtpy
;	COMDAT _RedTick@16
_TEXT	SEGMENT
_bEndPaint$138366 = -100				; size = 4
_Rect$138367 = -96					; size = 16
_hObj$138378 = -80					; size = 4
_bx$138379 = -76					; size = 2
_hwnd$GSCopy$ = -72					; size = 4
_tmp$138363 = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_RedTick@16 PROC					; COMDAT

; 1174 : {

  00000	83 ec 64	 sub	 esp, 100		; 00000064H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 60	 mov	 DWORD PTR __$ArrayPad$[esp+100], eax

; 1175 : 	if (uMsg == WM_CREATE)

  0000e	8b 44 24 6c	 mov	 eax, DWORD PTR _uMsg$[esp+96]
  00012	57		 push	 edi
  00013	8b 7c 24 6c	 mov	 edi, DWORD PTR _hwnd$[esp+100]

; 1209 : 		{
; 1210 : 			HGDIOBJ hObj = SelectObject (hDC, hPen);

  00017	89 7c 24 20	 mov	 DWORD PTR _hwnd$GSCopy$[esp+104], edi
  0001b	83 f8 01	 cmp	 eax, 1
  0001e	0f 84 9a 01 00
	00		 je	 $LN7@RedTick

; 1176 : 	{
; 1177 : 	}
; 1178 : 	else if (uMsg == WM_DESTROY)

  00024	83 f8 02	 cmp	 eax, 2
  00027	0f 84 91 01 00
	00		 je	 $LN7@RedTick

; 1179 : 	{
; 1180 : 	}
; 1181 : 	else if (uMsg == WM_TIMER)

  0002d	3d 13 01 00 00	 cmp	 eax, 275		; 00000113H
  00032	0f 84 86 01 00
	00		 je	 $LN7@RedTick

; 1182 : 	{
; 1183 : 	}
; 1184 : 	else if (uMsg == WM_PAINT)

  00038	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  0003b	0f 85 7d 01 00
	00		 jne	 $LN7@RedTick
  00041	56		 push	 esi

; 1185 : 	{
; 1186 : 		PAINTSTRUCT tmp;
; 1187 : 		HPEN hPen;
; 1188 : 		HDC hDC;
; 1189 : 		BOOL bEndPaint;
; 1190 : 		RECT Rect;
; 1191 : 
; 1192 : 		if (GetUpdateRect (hwnd, NULL, FALSE))

  00042	6a 00		 push	 0
  00044	6a 00		 push	 0
  00046	57		 push	 edi
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetUpdateRect@12
  0004d	85 c0		 test	 eax, eax
  0004f	74 40		 je	 SHORT $LN6@RedTick

; 1193 : 		{
; 1194 : 			hDC = BeginPaint (hwnd, &tmp);

  00051	8d 44 24 28	 lea	 eax, DWORD PTR _tmp$138363[esp+108]
  00055	50		 push	 eax
  00056	57		 push	 edi
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BeginPaint@8
  0005d	8b f0		 mov	 esi, eax

; 1195 : 			bEndPaint = TRUE;

  0005f	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR _bEndPaint$138366[esp+108], 1

; 1196 : 			if (hDC == NULL)

  00067	85 f6		 test	 esi, esi
  00069	75 37		 jne	 SHORT $LN4@RedTick

; 1197 : 				return DefWindowProc (hwnd, uMsg, wParam, lParam);

  0006b	8b 4c 24 7c	 mov	 ecx, DWORD PTR _lParam$[esp+104]
  0006f	8b 54 24 78	 mov	 edx, DWORD PTR _wParam$[esp+104]
  00073	51		 push	 ecx
  00074	52		 push	 edx
  00075	6a 0f		 push	 15			; 0000000fH
  00077	57		 push	 edi
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16
  0007e	5e		 pop	 esi
  0007f	5f		 pop	 edi

; 1233 : }

  00080	8b 4c 24 60	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+100]
  00084	33 cc		 xor	 ecx, esp
  00086	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008b	83 c4 64	 add	 esp, 100		; 00000064H
  0008e	c2 10 00	 ret	 16			; 00000010H
$LN6@RedTick:

; 1198 : 		}
; 1199 : 		else
; 1200 : 		{
; 1201 : 			hDC = GetDC (hwnd);

  00091	57		 push	 edi
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  00098	8b f0		 mov	 esi, eax

; 1202 : 			bEndPaint = FALSE;

  0009a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _bEndPaint$138366[esp+108], 0
$LN4@RedTick:
  000a2	53		 push	 ebx

; 1203 : 		}
; 1204 : 
; 1205 : 		GetClientRect (hwnd, &Rect);

  000a3	8d 44 24 10	 lea	 eax, DWORD PTR _Rect$138367[esp+112]
  000a7	50		 push	 eax
  000a8	57		 push	 edi
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 1206 : 
; 1207 : 		hPen = CreatePen (PS_SOLID, 2, RGB (0, 255, 0));

  000af	68 00 ff 00 00	 push	 65280			; 0000ff00H
  000b4	6a 02		 push	 2
  000b6	6a 00		 push	 0
  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePen@12
  000be	8b d8		 mov	 ebx, eax

; 1208 : 		if (hPen != NULL)

  000c0	85 db		 test	 ebx, ebx
  000c2	0f 84 aa 00 00
	00		 je	 $LN3@RedTick
  000c8	55		 push	 ebp

; 1209 : 		{
; 1210 : 			HGDIOBJ hObj = SelectObject (hDC, hPen);

  000c9	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SelectObject@8
  000cf	53		 push	 ebx
  000d0	56		 push	 esi
  000d1	ff d5		 call	 ebp

; 1211 : 			WORD bx = LOWORD (GetDialogBaseUnits ());

  000d3	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDialogBaseUnits@0
  000d9	89 44 24 24	 mov	 DWORD PTR _hObj$138378[esp+116], eax
  000dd	ff d7		 call	 edi
  000df	0f b7 c8	 movzx	 ecx, ax
  000e2	89 4c 24 28	 mov	 DWORD PTR _bx$138379[esp+116], ecx

; 1212 : 			WORD by = HIWORD (GetDialogBaseUnits ());

  000e6	ff d7		 call	 edi

; 1213 : 
; 1214 : 			MoveToEx (hDC, (Rect.right - Rect.left) / 2, Rect.bottom, NULL);

  000e8	8b 54 24 20	 mov	 edx, DWORD PTR _Rect$138367[esp+128]
  000ec	8b f8		 mov	 edi, eax
  000ee	8b 44 24 1c	 mov	 eax, DWORD PTR _Rect$138367[esp+124]
  000f2	2b 44 24 14	 sub	 eax, DWORD PTR _Rect$138367[esp+116]
  000f6	6a 00		 push	 0
  000f8	52		 push	 edx
  000f9	99		 cdq
  000fa	2b c2		 sub	 eax, edx
  000fc	d1 f8		 sar	 eax, 1
  000fe	50		 push	 eax
  000ff	56		 push	 esi
  00100	c1 ef 10	 shr	 edi, 16			; 00000010H
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveToEx@16

; 1215 : 			LineTo (hDC, Rect.right, Rect.top);

  00109	8b 44 24 18	 mov	 eax, DWORD PTR _Rect$138367[esp+120]
  0010d	8b 4c 24 1c	 mov	 ecx, DWORD PTR _Rect$138367[esp+124]
  00111	50		 push	 eax
  00112	51		 push	 ecx
  00113	56		 push	 esi
  00114	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LineTo@12

; 1216 : 			MoveToEx (hDC, (Rect.right - Rect.left) / 2, Rect.bottom, NULL);

  0011a	8b 44 24 1c	 mov	 eax, DWORD PTR _Rect$138367[esp+124]
  0011e	2b 44 24 14	 sub	 eax, DWORD PTR _Rect$138367[esp+116]
  00122	8b 54 24 20	 mov	 edx, DWORD PTR _Rect$138367[esp+128]
  00126	6a 00		 push	 0
  00128	52		 push	 edx
  00129	99		 cdq
  0012a	2b c2		 sub	 eax, edx
  0012c	d1 f8		 sar	 eax, 1
  0012e	50		 push	 eax
  0012f	56		 push	 esi
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveToEx@16

; 1217 : 
; 1218 : 			LineTo (hDC, (3 * bx) / 4, (2 * by) / 8);

  00136	0f b7 c7	 movzx	 eax, di
  00139	03 c0		 add	 eax, eax
  0013b	99		 cdq
  0013c	83 e2 07	 and	 edx, 7
  0013f	03 c2		 add	 eax, edx
  00141	c1 f8 03	 sar	 eax, 3
  00144	50		 push	 eax
  00145	0f b7 44 24 2c	 movzx	 eax, WORD PTR _bx$138379[esp+120]
  0014a	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0014d	99		 cdq
  0014e	83 e2 03	 and	 edx, 3
  00151	03 c2		 add	 eax, edx
  00153	c1 f8 02	 sar	 eax, 2
  00156	50		 push	 eax
  00157	56		 push	 esi
  00158	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LineTo@12

; 1219 : 
; 1220 : 			SelectObject (hDC, hObj);

  0015e	8b 44 24 24	 mov	 eax, DWORD PTR _hObj$138378[esp+116]
  00162	50		 push	 eax
  00163	56		 push	 esi
  00164	ff d5		 call	 ebp

; 1221 : 			DeleteObject (hPen);

  00166	53		 push	 ebx
  00167	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
  0016d	8b 7c 24 2c	 mov	 edi, DWORD PTR _hwnd$GSCopy$[esp+116]
  00171	5d		 pop	 ebp
$LN3@RedTick:

; 1222 : 		}
; 1223 : 
; 1224 : 		if (bEndPaint)

  00172	83 7c 24 0c 00	 cmp	 DWORD PTR _bEndPaint$138366[esp+112], 0
  00177	5b		 pop	 ebx
  00178	74 24		 je	 SHORT $LN2@RedTick

; 1225 : 			EndPaint (hwnd, &tmp);

  0017a	8d 4c 24 28	 lea	 ecx, DWORD PTR _tmp$138363[esp+108]
  0017e	51		 push	 ecx
  0017f	57		 push	 edi
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndPaint@8
  00186	5e		 pop	 esi

; 1228 : 
; 1229 : 		return TRUE;

  00187	b8 01 00 00 00	 mov	 eax, 1
  0018c	5f		 pop	 edi

; 1233 : }

  0018d	8b 4c 24 60	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+100]
  00191	33 cc		 xor	 ecx, esp
  00193	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00198	83 c4 64	 add	 esp, 100		; 00000064H
  0019b	c2 10 00	 ret	 16			; 00000010H
$LN2@RedTick:

; 1226 : 		else
; 1227 : 			ReleaseDC (hwnd, hDC);

  0019e	56		 push	 esi
  0019f	57		 push	 edi
  001a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8
  001a6	5e		 pop	 esi

; 1228 : 
; 1229 : 		return TRUE;

  001a7	b8 01 00 00 00	 mov	 eax, 1
  001ac	5f		 pop	 edi

; 1233 : }

  001ad	8b 4c 24 60	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+100]
  001b1	33 cc		 xor	 ecx, esp
  001b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b8	83 c4 64	 add	 esp, 100		; 00000064H
  001bb	c2 10 00	 ret	 16			; 00000010H
$LN7@RedTick:

; 1230 : 	}
; 1231 : 
; 1232 : 	return DefWindowProc (hwnd, uMsg, wParam, lParam);

  001be	8b 54 24 78	 mov	 edx, DWORD PTR _lParam$[esp+100]
  001c2	8b 4c 24 74	 mov	 ecx, DWORD PTR _wParam$[esp+100]
  001c6	52		 push	 edx
  001c7	51		 push	 ecx
  001c8	50		 push	 eax
  001c9	57		 push	 edi
  001ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16

; 1233 : }

  001d0	8b 4c 24 64	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+104]
  001d4	5f		 pop	 edi
  001d5	33 cc		 xor	 ecx, esp
  001d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001dc	83 c4 64	 add	 esp, 100		; 00000064H
  001df	c2 10 00	 ret	 16			; 00000010H
_RedTick@16 ENDP
_TEXT	ENDS
PUBLIC	??_C@_07EFPKBNGC@REDTICK?$AA@			; `string'
PUBLIC	_RegisterRedTick
EXTRN	__imp__RegisterClassA@4:PROC
EXTRN	__imp__GetStockObject@4:PROC
EXTRN	__imp__LoadIconA@8:PROC
;	COMDAT ??_C@_07EFPKBNGC@REDTICK?$AA@
CONST	SEGMENT
??_C@_07EFPKBNGC@REDTICK?$AA@ DB 'REDTICK', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _RegisterRedTick
_TEXT	SEGMENT
_wc$ = -40						; size = 40
_hInstance$ = 8						; size = 4
_RegisterRedTick PROC					; COMDAT

; 1237 : {

  00000	83 ec 28	 sub	 esp, 40			; 00000028H

; 1238 :   WNDCLASS wc;
; 1239 :   ULONG rc;
; 1240 : 
; 1241 :   memset(&wc, 0 , sizeof wc);

  00003	33 c0		 xor	 eax, eax
  00005	89 44 24 08	 mov	 DWORD PTR _wc$[esp+48], eax
  00009	89 04 24	 mov	 DWORD PTR _wc$[esp+40], eax
  0000c	89 44 24 0c	 mov	 DWORD PTR _wc$[esp+52], eax
  00010	89 44 24 10	 mov	 DWORD PTR _wc$[esp+56], eax
  00014	89 44 24 04	 mov	 DWORD PTR _wc$[esp+44], eax
  00018	89 44 24 14	 mov	 DWORD PTR _wc$[esp+60], eax
  0001c	89 44 24 18	 mov	 DWORD PTR _wc$[esp+64], eax
  00020	89 44 24 1c	 mov	 DWORD PTR _wc$[esp+68], eax
  00024	89 44 24 20	 mov	 DWORD PTR _wc$[esp+72], eax
  00028	89 44 24 24	 mov	 DWORD PTR _wc$[esp+76], eax

; 1242 : 
; 1243 :   wc.style = CS_HREDRAW | CS_VREDRAW;
; 1244 :   wc.cbClsExtra = 0;

  0002c	89 44 24 08	 mov	 DWORD PTR _wc$[esp+48], eax

; 1245 :   wc.cbWndExtra = 4;
; 1246 :   wc.hInstance = hInstance;

  00030	8b 44 24 2c	 mov	 eax, DWORD PTR _hInstance$[esp+36]

; 1247 :   wc.hIcon = LoadIcon (NULL, IDI_APPLICATION);

  00034	68 00 7f 00 00	 push	 32512			; 00007f00H
  00039	6a 00		 push	 0
  0003b	c7 44 24 08 03
	00 00 00	 mov	 DWORD PTR _wc$[esp+48], 3
  00043	c7 44 24 14 04
	00 00 00	 mov	 DWORD PTR _wc$[esp+60], 4
  0004b	89 44 24 18	 mov	 DWORD PTR _wc$[esp+64], eax
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadIconA@8

; 1248 :   wc.hCursor = NULL;
; 1249 :   wc.hbrBackground = (HBRUSH) GetStockObject (LTGRAY_BRUSH);

  00055	6a 01		 push	 1
  00057	89 44 24 18	 mov	 DWORD PTR _wc$[esp+64], eax
  0005b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR _wc$[esp+68], 0
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStockObject@4

; 1250 :   wc.lpszClassName = "REDTICK";
; 1251 :   wc.lpfnWndProc = &RedTick; 
; 1252 :   
; 1253 :   rc = (ULONG) RegisterClass (&wc);

  00069	8d 0c 24	 lea	 ecx, DWORD PTR _wc$[esp+40]
  0006c	51		 push	 ecx
  0006d	89 44 24 20	 mov	 DWORD PTR _wc$[esp+72], eax
  00071	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR _wc$[esp+80], OFFSET ??_C@_07EFPKBNGC@REDTICK?$AA@
  00079	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _wc$[esp+48], OFFSET _RedTick@16
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassA@4

; 1254 : 
; 1255 :   return rc == 0 ? FALSE : TRUE;

  00087	33 d2		 xor	 edx, edx
  00089	66 85 c0	 test	 ax, ax
  0008c	0f 95 c2	 setne	 dl
  0008f	8b c2		 mov	 eax, edx

; 1256 : }

  00091	83 c4 28	 add	 esp, 40			; 00000028H
  00094	c3		 ret	 0
_RegisterRedTick ENDP
_TEXT	ENDS
PUBLIC	_UnregisterRedTick
EXTRN	__imp__UnregisterClassA@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT _UnregisterRedTick
_TEXT	SEGMENT
_hInstance$ = 8						; size = 4
_UnregisterRedTick PROC					; COMDAT

; 1261 :   return UnregisterClass ("REDTICK", hInstance);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _hInstance$[esp-4]
  00004	50		 push	 eax
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_07EFPKBNGC@REDTICK?$AA@
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnregisterClassA@8

; 1262 : }

  00010	c3		 ret	 0
_UnregisterRedTick ENDP
_TEXT	ENDS
PUBLIC	_SplashDlgProc@16
EXTRN	__imp__DefDlgProcA@16:PROC
; Function compile flags: /Ogtpy
;	COMDAT _SplashDlgProc@16
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_SplashDlgProc@16 PROC					; COMDAT

; 1267 : 	return DefDlgProc (hwnd, uMsg, wParam, lParam);

  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__DefDlgProcA@16
_SplashDlgProc@16 ENDP
_TEXT	ENDS
PUBLIC	_AddComboPair
; Function compile flags: /Ogtpy
;	COMDAT _AddComboPair
_TEXT	SEGMENT
_hComboBox$ = 8						; size = 4
_lpszItem$ = 12						; size = 4
_value$ = 16						; size = 4
_AddComboPair PROC					; COMDAT

; 1275 : 	LPARAM nIndex;
; 1276 : 
; 1277 : 	nIndex = SendMessage (hComboBox, CB_ADDSTRING, 0, (LPARAM) lpszItem);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _lpszItem$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 08	 mov	 esi, DWORD PTR _hComboBox$[esp]
  00009	57		 push	 edi
  0000a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  00010	50		 push	 eax
  00011	6a 00		 push	 0
  00013	68 43 01 00 00	 push	 323			; 00000143H
  00018	56		 push	 esi
  00019	ff d7		 call	 edi

; 1278 : 	nIndex = SendMessage (hComboBox, CB_SETITEMDATA, nIndex, (LPARAM) value);

  0001b	8b 4c 24 14	 mov	 ecx, DWORD PTR _value$[esp+4]
  0001f	51		 push	 ecx
  00020	50		 push	 eax
  00021	68 51 01 00 00	 push	 337			; 00000151H
  00026	56		 push	 esi
  00027	ff d7		 call	 edi
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi

; 1279 : }

  0002b	c3		 ret	 0
_AddComboPair ENDP
_TEXT	ENDS
PUBLIC	_AddComboPairW
EXTRN	__imp__SendMessageW@16:PROC
; Function compile flags: /Ogtpy
;	COMDAT _AddComboPairW
_TEXT	SEGMENT
_hComboBox$ = 8						; size = 4
_lpszItem$ = 12						; size = 4
_value$ = 16						; size = 4
_AddComboPairW PROC					; COMDAT

; 1284 : 	LPARAM nIndex;
; 1285 : 
; 1286 : 	nIndex = SendMessageW (hComboBox, CB_ADDSTRING, 0, (LPARAM) lpszItem);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _lpszItem$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 08	 mov	 esi, DWORD PTR _hComboBox$[esp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	68 43 01 00 00	 push	 323			; 00000143H
  00011	56		 push	 esi
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageW@16

; 1287 : 	nIndex = SendMessage (hComboBox, CB_SETITEMDATA, nIndex, (LPARAM) value);

  00018	8b 4c 24 10	 mov	 ecx, DWORD PTR _value$[esp]
  0001c	51		 push	 ecx
  0001d	50		 push	 eax
  0001e	68 51 01 00 00	 push	 337			; 00000151H
  00023	56		 push	 esi
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0002a	5e		 pop	 esi

; 1288 : }

  0002b	c3		 ret	 0
_AddComboPairW ENDP
_TEXT	ENDS
PUBLIC	_SelectAlgo
; Function compile flags: /Ogtpy
;	COMDAT _SelectAlgo
_TEXT	SEGMENT
_nCount$ = -4						; size = 4
_hComboBox$ = 8						; size = 4
_algo_id$ = 12						; size = 4
_SelectAlgo PROC					; COMDAT

; 1292 : {

  00000	51		 push	 ecx
  00001	53		 push	 ebx

; 1293 : 	LPARAM nCount = SendMessage (hComboBox, CB_GETCOUNT, 0, 0);

  00002	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  00008	55		 push	 ebp
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 7c 24 18	 mov	 edi, DWORD PTR _hComboBox$[esp+16]
  0000f	6a 00		 push	 0
  00011	6a 00		 push	 0
  00013	68 46 01 00 00	 push	 326			; 00000146H
  00018	57		 push	 edi
  00019	ff d3		 call	 ebx

; 1294 : 	LPARAM x, i;
; 1295 : 
; 1296 : 	for (i = 0; i < nCount; i++)

  0001b	8b 6c 24 1c	 mov	 ebp, DWORD PTR _algo_id$[esp+16]
  0001f	33 f6		 xor	 esi, esi
  00021	89 44 24 10	 mov	 DWORD PTR _nCount$[esp+20], eax
  00025	85 c0		 test	 eax, eax
  00027	7e 1e		 jle	 SHORT $LN2@SelectAlgo
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL4@SelectAlgo:

; 1297 : 	{
; 1298 : 		x = SendMessage (hComboBox, CB_GETITEMDATA, i, 0);

  00030	6a 00		 push	 0
  00032	56		 push	 esi
  00033	68 50 01 00 00	 push	 336			; 00000150H
  00038	57		 push	 edi
  00039	ff d3		 call	 ebx

; 1299 : 		if (x == (LPARAM) *algo_id)

  0003b	3b 45 00	 cmp	 eax, DWORD PTR [ebp]
  0003e	74 28		 je	 SHORT $LN8@SelectAlgo
  00040	46		 inc	 esi
  00041	3b 74 24 10	 cmp	 esi, DWORD PTR _nCount$[esp+20]
  00045	7c e9		 jl	 SHORT $LL4@SelectAlgo
$LN2@SelectAlgo:

; 1302 : 			return;
; 1303 : 		}
; 1304 : 	}
; 1305 : 
; 1306 : 	/* Something went wrong ; couldn't find the requested algo id so we drop
; 1307 : 	   back to a default */
; 1308 : 
; 1309 : 	*algo_id = SendMessage (hComboBox, CB_GETITEMDATA, 0, 0);

  00047	6a 00		 push	 0
  00049	6a 00		 push	 0
  0004b	68 50 01 00 00	 push	 336			; 00000150H
  00050	57		 push	 edi
  00051	ff d3		 call	 ebx

; 1310 : 
; 1311 : 	SendMessage (hComboBox, CB_SETCURSEL, 0, 0);

  00053	6a 00		 push	 0
  00055	6a 00		 push	 0
  00057	68 4e 01 00 00	 push	 334			; 0000014eH
  0005c	57		 push	 edi
  0005d	89 45 00	 mov	 DWORD PTR [ebp], eax
  00060	ff d3		 call	 ebx
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5d		 pop	 ebp
  00065	5b		 pop	 ebx

; 1312 : 
; 1313 : }

  00066	59		 pop	 ecx
  00067	c3		 ret	 0
$LN8@SelectAlgo:

; 1300 : 		{
; 1301 : 			SendMessage (hComboBox, CB_SETCURSEL, i, 0);

  00068	6a 00		 push	 0
  0006a	56		 push	 esi

; 1310 : 
; 1311 : 	SendMessage (hComboBox, CB_SETCURSEL, 0, 0);

  0006b	68 4e 01 00 00	 push	 334			; 0000014eH
  00070	57		 push	 edi
  00071	ff d3		 call	 ebx
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5d		 pop	 ebp
  00076	5b		 pop	 ebx

; 1312 : 
; 1313 : }

  00077	59		 pop	 ecx
  00078	c3		 ret	 0
_SelectAlgo ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@OGMMPIGE@WIPE_MODE_35_GUTMANN?$AA@	; `string'
PUBLIC	??_C@_0BF@JKLBNOMP@WIPE_MODE_7_DOD_5220?$AA@	; `string'
PUBLIC	??_C@_0BF@CKGIKNEN@WIPE_MODE_3_DOD_5220?$AA@	; `string'
PUBLIC	??_C@_0BB@NCGBCPHN@WIPE_MODE_1_RAND?$AA@	; `string'
PUBLIC	??_C@_0P@GHLKBIBG@WIPE_MODE_NONE?$AA@		; `string'
PUBLIC	??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@ ; `string'
PUBLIC	_PopulateWipeModeCombo
;	COMDAT ??_C@_0BF@OGMMPIGE@WIPE_MODE_35_GUTMANN?$AA@
CONST	SEGMENT
??_C@_0BF@OGMMPIGE@WIPE_MODE_35_GUTMANN?$AA@ DB 'WIPE_MODE_35_GUTMANN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JKLBNOMP@WIPE_MODE_7_DOD_5220?$AA@
CONST	SEGMENT
??_C@_0BF@JKLBNOMP@WIPE_MODE_7_DOD_5220?$AA@ DB 'WIPE_MODE_7_DOD_5220', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CKGIKNEN@WIPE_MODE_3_DOD_5220?$AA@
CONST	SEGMENT
??_C@_0BF@CKGIKNEN@WIPE_MODE_3_DOD_5220?$AA@ DB 'WIPE_MODE_3_DOD_5220', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NCGBCPHN@WIPE_MODE_1_RAND?$AA@
CONST	SEGMENT
??_C@_0BB@NCGBCPHN@WIPE_MODE_1_RAND?$AA@ DB 'WIPE_MODE_1_RAND', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GHLKBIBG@WIPE_MODE_NONE?$AA@
CONST	SEGMENT
??_C@_0P@GHLKBIBG@WIPE_MODE_NONE?$AA@ DB 'WIPE_MODE_NONE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@
CONST	SEGMENT
??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@ DB 'NOT_APPLICABL'
	DB	'E_OR_NOT_AVAILABLE', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PopulateWipeModeCombo
_TEXT	SEGMENT
_hComboBox$ = 8						; size = 4
_bNA$ = 12						; size = 4
_bInPlaceEncryption$ = 16				; size = 4
_PopulateWipeModeCombo PROC				; COMDAT

; 1317 : 	if (bNA)

  00000	83 7c 24 08 00	 cmp	 DWORD PTR _bNA$[esp-4], 0
  00005	56		 push	 esi
  00006	74 31		 je	 SHORT $LN4@PopulateWi

; 1318 : 	{
; 1319 : 		AddComboPairW (hComboBox, GetString ("NOT_APPLICABLE_OR_NOT_AVAILABLE"), TC_WIPE_NONE);

  00008	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@
  0000d	e8 00 00 00 00	 call	 _GetString
  00012	8b 74 24 0c	 mov	 esi, DWORD PTR _hComboBox$[esp+4]
  00016	83 c4 04	 add	 esp, 4
  00019	50		 push	 eax
  0001a	6a 00		 push	 0
  0001c	68 43 01 00 00	 push	 323			; 00000143H
  00021	56		 push	 esi
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageW@16
  00028	6a 00		 push	 0
  0002a	50		 push	 eax
  0002b	68 51 01 00 00	 push	 337			; 00000151H
  00030	56		 push	 esi
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00037	5e		 pop	 esi

; 1331 : 	}
; 1332 : }

  00038	c3		 ret	 0
$LN4@PopulateWi:

; 1320 : 	}
; 1321 : 	else
; 1322 : 	{
; 1323 : 		if (bInPlaceEncryption)

  00039	83 7c 24 10 00	 cmp	 DWORD PTR _bInPlaceEncryption$[esp], 0
  0003e	53		 push	 ebx
  0003f	57		 push	 edi
  00040	74 26		 je	 SHORT $LN2@PopulateWi

; 1324 : 			AddComboPairW (hComboBox, GetString ("WIPE_MODE_NONE"), TC_WIPE_NONE);

  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GHLKBIBG@WIPE_MODE_NONE?$AA@
  00047	e8 00 00 00 00	 call	 _GetString
  0004c	8b 74 24 14	 mov	 esi, DWORD PTR _hComboBox$[esp+12]
  00050	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageW@16
  00056	83 c4 04	 add	 esp, 4
  00059	50		 push	 eax
  0005a	6a 00		 push	 0
  0005c	68 43 01 00 00	 push	 323			; 00000143H
  00061	56		 push	 esi
  00062	ff d7		 call	 edi
  00064	6a 00		 push	 0

; 1325 : 		else

  00066	eb 24		 jmp	 SHORT $LN19@PopulateWi
$LN2@PopulateWi:

; 1326 : 			AddComboPairW (hComboBox, GetString ("WIPE_MODE_1_RAND"), TC_WIPE_1_RAND);

  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@NCGBCPHN@WIPE_MODE_1_RAND?$AA@
  0006d	e8 00 00 00 00	 call	 _GetString
  00072	8b 74 24 14	 mov	 esi, DWORD PTR _hComboBox$[esp+12]
  00076	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageW@16
  0007c	83 c4 04	 add	 esp, 4
  0007f	50		 push	 eax
  00080	6a 00		 push	 0
  00082	68 43 01 00 00	 push	 323			; 00000143H
  00087	56		 push	 esi
  00088	ff d7		 call	 edi
  0008a	6a 64		 push	 100			; 00000064H
$LN19@PopulateWi:
  0008c	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  00092	50		 push	 eax
  00093	68 51 01 00 00	 push	 337			; 00000151H
  00098	56		 push	 esi
  00099	ff d3		 call	 ebx

; 1327 : 
; 1328 : 		AddComboPairW (hComboBox, GetString ("WIPE_MODE_3_DOD_5220"), TC_WIPE_3_DOD_5220);

  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@CKGIKNEN@WIPE_MODE_3_DOD_5220?$AA@
  000a0	e8 00 00 00 00	 call	 _GetString
  000a5	83 c4 04	 add	 esp, 4
  000a8	50		 push	 eax
  000a9	6a 00		 push	 0
  000ab	68 43 01 00 00	 push	 323			; 00000143H
  000b0	56		 push	 esi
  000b1	ff d7		 call	 edi
  000b3	68 2c 01 00 00	 push	 300			; 0000012cH
  000b8	50		 push	 eax
  000b9	68 51 01 00 00	 push	 337			; 00000151H
  000be	56		 push	 esi
  000bf	ff d3		 call	 ebx

; 1329 : 		AddComboPairW (hComboBox, GetString ("WIPE_MODE_7_DOD_5220"), TC_WIPE_7_DOD_5220);

  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@JKLBNOMP@WIPE_MODE_7_DOD_5220?$AA@
  000c6	e8 00 00 00 00	 call	 _GetString
  000cb	83 c4 04	 add	 esp, 4
  000ce	50		 push	 eax
  000cf	6a 00		 push	 0
  000d1	68 43 01 00 00	 push	 323			; 00000143H
  000d6	56		 push	 esi
  000d7	ff d7		 call	 edi
  000d9	68 bc 02 00 00	 push	 700			; 000002bcH
  000de	50		 push	 eax
  000df	68 51 01 00 00	 push	 337			; 00000151H
  000e4	56		 push	 esi
  000e5	ff d3		 call	 ebx

; 1330 : 		AddComboPairW (hComboBox, GetString ("WIPE_MODE_35_GUTMANN"), TC_WIPE_35_GUTMANN);

  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OGMMPIGE@WIPE_MODE_35_GUTMANN?$AA@
  000ec	e8 00 00 00 00	 call	 _GetString
  000f1	83 c4 04	 add	 esp, 4
  000f4	50		 push	 eax
  000f5	6a 00		 push	 0
  000f7	68 43 01 00 00	 push	 323			; 00000143H
  000fc	56		 push	 esi
  000fd	ff d7		 call	 edi
  000ff	68 ac 0d 00 00	 push	 3500			; 00000dacH
  00104	50		 push	 eax
  00105	68 51 01 00 00	 push	 337			; 00000151H
  0010a	56		 push	 esi
  0010b	ff d3		 call	 ebx
  0010d	5f		 pop	 edi
  0010e	5b		 pop	 ebx
  0010f	5e		 pop	 esi

; 1331 : 	}
; 1332 : }

  00110	c3		 ret	 0
_PopulateWipeModeCombo ENDP
_TEXT	ENDS
PUBLIC	_GetWipeModeName
; Function compile flags: /Ogtpy
;	COMDAT _GetWipeModeName
_TEXT	SEGMENT
_modeId$ = 8						; size = 4
_GetWipeModeName PROC					; COMDAT

; 1336 : 	switch (modeId)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _modeId$[esp-4]
  00004	3d 2c 01 00 00	 cmp	 eax, 300		; 0000012cH
  00009	7f 32		 jg	 SHORT $LN11@GetWipeMod
  0000b	74 23		 je	 SHORT $LN4@GetWipeMod
  0000d	85 c0		 test	 eax, eax
  0000f	74 12		 je	 SHORT $LN6@GetWipeMod
  00011	83 f8 64	 cmp	 eax, 100		; 00000064H
  00014	75 35		 jne	 SHORT $LN1@GetWipeMod

; 1340 : 
; 1341 : 	case TC_WIPE_1_RAND:
; 1342 : 		return GetString ("WIPE_MODE_1_RAND");

  00016	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR _modeId$[esp-4], OFFSET ??_C@_0BB@NCGBCPHN@WIPE_MODE_1_RAND?$AA@
  0001e	e9 00 00 00 00	 jmp	 _GetString
$LN6@GetWipeMod:

; 1337 : 	{
; 1338 : 	case TC_WIPE_NONE:
; 1339 : 		return GetString ("WIPE_MODE_NONE");

  00023	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR _modeId$[esp-4], OFFSET ??_C@_0P@GHLKBIBG@WIPE_MODE_NONE?$AA@
  0002b	e9 00 00 00 00	 jmp	 _GetString
$LN4@GetWipeMod:

; 1343 : 
; 1344 : 	case TC_WIPE_3_DOD_5220:
; 1345 : 		return GetString ("WIPE_MODE_3_DOD_5220");

  00030	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR _modeId$[esp-4], OFFSET ??_C@_0BF@CKGIKNEN@WIPE_MODE_3_DOD_5220?$AA@
  00038	e9 00 00 00 00	 jmp	 _GetString
$LN11@GetWipeMod:

; 1336 : 	switch (modeId)

  0003d	3d bc 02 00 00	 cmp	 eax, 700		; 000002bcH
  00042	74 21		 je	 SHORT $LN3@GetWipeMod
  00044	3d ac 0d 00 00	 cmp	 eax, 3500		; 00000dacH
  00049	74 0d		 je	 SHORT $LN2@GetWipeMod
$LN1@GetWipeMod:

; 1352 : 
; 1353 : 	default:
; 1354 : 		return GetString ("NOT_APPLICABLE_OR_NOT_AVAILABLE");

  0004b	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR _modeId$[esp-4], OFFSET ??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@
  00053	e9 00 00 00 00	 jmp	 _GetString
$LN2@GetWipeMod:

; 1349 : 
; 1350 : 	case TC_WIPE_35_GUTMANN:
; 1351 : 		return GetString ("WIPE_MODE_35_GUTMANN");

  00058	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR _modeId$[esp-4], OFFSET ??_C@_0BF@OGMMPIGE@WIPE_MODE_35_GUTMANN?$AA@
  00060	e9 00 00 00 00	 jmp	 _GetString
$LN3@GetWipeMod:

; 1346 : 
; 1347 : 	case TC_WIPE_7_DOD_5220:
; 1348 : 		return GetString ("WIPE_MODE_7_DOD_5220");

  00065	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR _modeId$[esp-4], OFFSET ??_C@_0BF@JKLBNOMP@WIPE_MODE_7_DOD_5220?$AA@
  0006d	e9 00 00 00 00	 jmp	 _GetString
_GetWipeModeName ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@CGMNKFDG@DEVICE_LOWER_CASE?$AA@	; `string'
PUBLIC	??_C@_0BC@EBLCOINE@DEVICE_UPPER_CASE?$AA@	; `string'
PUBLIC	??_C@_0BC@OHAOKKGN@VOLUME_LOWER_CASE?$AA@	; `string'
PUBLIC	??_C@_0BC@IAHBOHIP@VOLUME_UPPER_CASE?$AA@	; `string'
PUBLIC	??_C@_0P@KFCBFOIJ@HarddiskVolume?$AA@		; `string'
PUBLIC	??_C@_0BF@DEJBIFMK@PARTITION_LOWER_CASE?$AA@	; `string'
PUBLIC	??_C@_0BF@FDOOMICI@PARTITION_UPPER_CASE?$AA@	; `string'
PUBLIC	??_C@_0L@MAFJOMBB@Partition0?$AA@		; `string'
PUBLIC	??_C@_09MFFJIMND@Partition?$AA@			; `string'
PUBLIC	_GetPathType
;	COMDAT ??_C@_0BC@CGMNKFDG@DEVICE_LOWER_CASE?$AA@
CONST	SEGMENT
??_C@_0BC@CGMNKFDG@DEVICE_LOWER_CASE?$AA@ DB 'DEVICE_LOWER_CASE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EBLCOINE@DEVICE_UPPER_CASE?$AA@
CONST	SEGMENT
??_C@_0BC@EBLCOINE@DEVICE_UPPER_CASE?$AA@ DB 'DEVICE_UPPER_CASE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OHAOKKGN@VOLUME_LOWER_CASE?$AA@
CONST	SEGMENT
??_C@_0BC@OHAOKKGN@VOLUME_LOWER_CASE?$AA@ DB 'VOLUME_LOWER_CASE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IAHBOHIP@VOLUME_UPPER_CASE?$AA@
CONST	SEGMENT
??_C@_0BC@IAHBOHIP@VOLUME_UPPER_CASE?$AA@ DB 'VOLUME_UPPER_CASE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KFCBFOIJ@HarddiskVolume?$AA@
CONST	SEGMENT
??_C@_0P@KFCBFOIJ@HarddiskVolume?$AA@ DB 'HarddiskVolume', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DEJBIFMK@PARTITION_LOWER_CASE?$AA@
CONST	SEGMENT
??_C@_0BF@DEJBIFMK@PARTITION_LOWER_CASE?$AA@ DB 'PARTITION_LOWER_CASE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FDOOMICI@PARTITION_UPPER_CASE?$AA@
CONST	SEGMENT
??_C@_0BF@FDOOMICI@PARTITION_UPPER_CASE?$AA@ DB 'PARTITION_UPPER_CASE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MAFJOMBB@Partition0?$AA@
CONST	SEGMENT
??_C@_0L@MAFJOMBB@Partition0?$AA@ DB 'Partition0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MFFJIMND@Partition?$AA@
CONST	SEGMENT
??_C@_09MFFJIMND@Partition?$AA@ DB 'Partition', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _GetPathType
_TEXT	SEGMENT
_path$ = 8						; size = 4
_bUpperCase$ = 12					; size = 4
_bIsPartition$ = 16					; size = 4
_GetPathType PROC					; COMDAT

; 1359 : {

  00000	56		 push	 esi

; 1360 : 	if (strstr (path, "Partition")
; 1361 : 		&& strstr (path, "Partition0") == NULL)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _path$[esp]
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_09MFFJIMND@Partition?$AA@
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 _strstr
  00010	83 c4 08	 add	 esp, 8
  00013	85 c0		 test	 eax, eax
  00015	74 38		 je	 SHORT $LN3@GetPathTyp
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MAFJOMBB@Partition0?$AA@
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _strstr
  00022	83 c4 08	 add	 esp, 8
  00025	85 c0		 test	 eax, eax
  00027	75 26		 jne	 SHORT $LN3@GetPathTyp

; 1362 : 	{
; 1363 : 		*bIsPartition = TRUE;
; 1364 : 		return GetString (bUpperCase ? "PARTITION_UPPER_CASE" : "PARTITION_LOWER_CASE");

  00029	83 7c 24 0c 00	 cmp	 DWORD PTR _bUpperCase$[esp], 0
  0002e	8b 44 24 10	 mov	 eax, DWORD PTR _bIsPartition$[esp]
  00032	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
  00038	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@FDOOMICI@PARTITION_UPPER_CASE?$AA@
  0003d	75 63		 jne	 SHORT $LN11@GetPathTyp
  0003f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@DEJBIFMK@PARTITION_LOWER_CASE?$AA@

; 1370 : 	}
; 1371 : 
; 1372 : 	*bIsPartition = FALSE;
; 1373 : 	return GetString (bUpperCase ? "DEVICE_UPPER_CASE" : "DEVICE_LOWER_CASE");

  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _GetString
  0004a	83 c4 04	 add	 esp, 4
  0004d	5e		 pop	 esi

; 1374 : }

  0004e	c3		 ret	 0
$LN3@GetPathTyp:

; 1365 : 	}
; 1366 : 	else if (strstr (path, "HarddiskVolume"))

  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KFCBFOIJ@HarddiskVolume?$AA@
  00054	56		 push	 esi
  00055	e8 00 00 00 00	 call	 _strstr
  0005a	83 c4 08	 add	 esp, 8
  0005d	85 c0		 test	 eax, eax
  0005f	74 26		 je	 SHORT $LN1@GetPathTyp

; 1367 : 	{
; 1368 : 		*bIsPartition = TRUE;
; 1369 : 		return GetString (bUpperCase ? "VOLUME_UPPER_CASE" : "VOLUME_LOWER_CASE");

  00061	83 7c 24 0c 00	 cmp	 DWORD PTR _bUpperCase$[esp], 0
  00066	8b 4c 24 10	 mov	 ecx, DWORD PTR _bIsPartition$[esp]
  0006a	c7 01 01 00 00
	00		 mov	 DWORD PTR [ecx], 1
  00070	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@IAHBOHIP@VOLUME_UPPER_CASE?$AA@
  00075	75 2b		 jne	 SHORT $LN11@GetPathTyp
  00077	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@OHAOKKGN@VOLUME_LOWER_CASE?$AA@

; 1370 : 	}
; 1371 : 
; 1372 : 	*bIsPartition = FALSE;
; 1373 : 	return GetString (bUpperCase ? "DEVICE_UPPER_CASE" : "DEVICE_LOWER_CASE");

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 _GetString
  00082	83 c4 04	 add	 esp, 4
  00085	5e		 pop	 esi

; 1374 : }

  00086	c3		 ret	 0
$LN1@GetPathTyp:

; 1370 : 	}
; 1371 : 
; 1372 : 	*bIsPartition = FALSE;
; 1373 : 	return GetString (bUpperCase ? "DEVICE_UPPER_CASE" : "DEVICE_LOWER_CASE");

  00087	83 7c 24 0c 00	 cmp	 DWORD PTR _bUpperCase$[esp], 0
  0008c	8b 54 24 10	 mov	 edx, DWORD PTR _bIsPartition$[esp]
  00090	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00096	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EBLCOINE@DEVICE_UPPER_CASE?$AA@
  0009b	75 05		 jne	 SHORT $LN11@GetPathTyp
  0009d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@CGMNKFDG@DEVICE_LOWER_CASE?$AA@
$LN11@GetPathTyp:
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 _GetString
  000a8	83 c4 04	 add	 esp, 4
  000ab	5e		 pop	 esi

; 1374 : }

  000ac	c3		 ret	 0
_GetPathType ENDP
_TEXT	ENDS
PUBLIC	_CustomDlgProc@16
EXTRN	__imp__SetCursor@4:PROC
EXTRN	_hCursor:DWORD
; Function compile flags: /Ogtpy
;	COMDAT _CustomDlgProc@16
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_CustomDlgProc@16 PROC					; COMDAT

; 1378 : 	if (uMsg == WM_SETCURSOR && hCursor != NULL)

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR _uMsg$[esp-4]
  00004	83 f9 20	 cmp	 ecx, 32			; 00000020H
  00007	75 18		 jne	 SHORT $LN1@CustomDlgP
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCursor
  0000e	85 c0		 test	 eax, eax
  00010	74 0f		 je	 SHORT $LN1@CustomDlgP

; 1379 : 	{
; 1380 : 		SetCursor (hCursor);

  00012	50		 push	 eax
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCursor@4

; 1381 : 		return TRUE;

  00019	b8 01 00 00 00	 mov	 eax, 1

; 1385 : }

  0001e	c2 10 00	 ret	 16			; 00000010H
$LN1@CustomDlgP:

; 1382 : 	}
; 1383 : 
; 1384 : 	return DefDlgProc (hwnd, uMsg, wParam, lParam);

  00021	89 4c 24 08	 mov	 DWORD PTR _uMsg$[esp-4], ecx
  00025	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__DefDlgProcA@16
_CustomDlgProc@16 ENDP
_TEXT	ENDS
EXTRN	__imp__VirtualQuery@12:PROC
;	COMDAT ?codeEnd@?1??IsReturnAddress@@YAH_K@Z@4IA
_BSS	SEGMENT
?codeEnd@?1??IsReturnAddress@@YAH_K@Z@4IA DD 01H DUP (?) ; `IsReturnAddress'::`2'::codeEnd
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT ?IsReturnAddress@@YAH_K@Z
_TEXT	SEGMENT
_mi$138495 = -28					; size = 28
_address$ = 8						; size = 8
?IsReturnAddress@@YAH_K@Z PROC				; IsReturnAddress, COMDAT

; 1389 : {

  00000	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 1390 : 	static size_t codeEnd = 0;
; 1391 : 	byte *sp = (byte *) address;
; 1392 : 
; 1393 : 	if (codeEnd == 0)

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?codeEnd@?1??IsReturnAddress@@YAH_K@Z@4IA, 0
  0000a	75 26		 jne	 SHORT $LN3@IsReturnAd

; 1394 : 	{
; 1395 : 		MEMORY_BASIC_INFORMATION mi;
; 1396 : 		if (VirtualQuery ((LPCVOID) 0x401000, &mi, sizeof (mi)) >= sizeof (mi))

  0000c	6a 1c		 push	 28			; 0000001cH
  0000e	8d 44 24 04	 lea	 eax, DWORD PTR _mi$138495[esp+32]
  00012	50		 push	 eax
  00013	68 00 10 40 00	 push	 4198400			; 00401000H
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualQuery@12
  0001e	83 f8 1c	 cmp	 eax, 28			; 0000001cH
  00021	72 0f		 jb	 SHORT $LN3@IsReturnAd

; 1397 : 			codeEnd = (size_t) mi.BaseAddress + mi.RegionSize;

  00023	8b 4c 24 0c	 mov	 ecx, DWORD PTR _mi$138495[esp+40]
  00027	8b 14 24	 mov	 edx, DWORD PTR _mi$138495[esp+28]
  0002a	03 ca		 add	 ecx, edx
  0002c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?codeEnd@?1??IsReturnAddress@@YAH_K@Z@4IA, ecx
$LN3@IsReturnAd:

; 1398 : 	}
; 1399 : 
; 1400 : 	if (address < 0x401000 + 8 || address > codeEnd)

  00032	8b 54 24 24	 mov	 edx, DWORD PTR _address$[esp+28]
  00036	8b 44 24 20	 mov	 eax, DWORD PTR _address$[esp+24]
  0003a	85 d2		 test	 edx, edx
  0003c	77 07		 ja	 SHORT $LN11@IsReturnAd
  0003e	3d 08 10 40 00	 cmp	 eax, 4198408		; 00401008H
  00043	72 3b		 jb	 SHORT $LN1@IsReturnAd
$LN11@IsReturnAd:
  00045	33 c9		 xor	 ecx, ecx
  00047	3b d1		 cmp	 edx, ecx
  00049	77 35		 ja	 SHORT $LN1@IsReturnAd
  0004b	72 08		 jb	 SHORT $LN12@IsReturnAd
  0004d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?codeEnd@?1??IsReturnAddress@@YAH_K@Z@4IA
  00053	77 2b		 ja	 SHORT $LN1@IsReturnAd
$LN12@IsReturnAd:

; 1402 : 
; 1403 : 	return sp[-5] == 0xe8									// call ADDR
; 1404 : 		|| (sp[-6] == 0xff && sp[-5] == 0x15)				// call [ADDR]
; 1405 : 		|| (sp[-2] == 0xff && (sp[-1] & 0xf0) == 0xd0);		// call REG

  00055	8a 48 fb	 mov	 cl, BYTE PTR [eax-5]
  00058	80 f9 e8	 cmp	 cl, 232			; 000000e8H
  0005b	74 1a		 je	 SHORT $LN8@IsReturnAd
  0005d	b2 ff		 mov	 dl, 255			; 000000ffH
  0005f	38 50 fa	 cmp	 BYTE PTR [eax-6], dl
  00062	75 05		 jne	 SHORT $LN7@IsReturnAd
  00064	80 f9 15	 cmp	 cl, 21			; 00000015H
  00067	74 0e		 je	 SHORT $LN8@IsReturnAd
$LN7@IsReturnAd:
  00069	38 50 fe	 cmp	 BYTE PTR [eax-2], dl
  0006c	75 12		 jne	 SHORT $LN1@IsReturnAd
  0006e	8a 40 ff	 mov	 al, BYTE PTR [eax-1]
  00071	24 f0		 and	 al, 240			; 000000f0H
  00073	3c d0		 cmp	 al, 208			; 000000d0H
  00075	75 09		 jne	 SHORT $LN1@IsReturnAd
$LN8@IsReturnAd:
  00077	b8 01 00 00 00	 mov	 eax, 1

; 1406 : }

  0007c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0007f	c3		 ret	 0
$LN1@IsReturnAd:

; 1401 : 		return FALSE;

  00080	33 c0		 xor	 eax, eax

; 1406 : }

  00082	83 c4 1c	 add	 esp, 28			; 0000001cH
  00085	c3		 ret	 0
?IsReturnAddress@@YAH_K@Z ENDP				; IsReturnAddress
_TEXT	ENDS
PUBLIC	?InvalidParameterHandler@@YAXPB_W00II@Z		; InvalidParameterHandler
; Function compile flags: /Ogtpy
;	COMDAT ?InvalidParameterHandler@@YAXPB_W00II@Z
_TEXT	SEGMENT
_expression$ = 8					; size = 4
_function$ = 12						; size = 4
_file$ = 16						; size = 4
_line$ = 20						; size = 4
_reserved$ = 24						; size = 4
?InvalidParameterHandler@@YAXPB_W00II@Z PROC		; InvalidParameterHandler, COMDAT

; 1642 : 	TC_THROW_FATAL_EXCEPTION;

  00000	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0

; 1643 : }

  00007	c3		 ret	 0
?InvalidParameterHandler@@YAXPB_W00II@Z ENDP		; InvalidParameterHandler
_TEXT	ENDS
PUBLIC	_InstanceHasSysEncMutex
; Function compile flags: /Ogtpy
;	COMDAT _InstanceHasSysEncMutex
_TEXT	SEGMENT
_InstanceHasSysEncMutex PROC				; COMDAT

; 1662 : 	return (hSysEncMutex != NULL);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hSysEncMutex@@3RAXA ; hSysEncMutex
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	f7 d8		 neg	 eax

; 1663 : }

  0000b	c3		 ret	 0
_InstanceHasSysEncMutex ENDP
_TEXT	ENDS
PUBLIC	_InstanceHasNonSysInplaceEncMutex
; Function compile flags: /Ogtpy
;	COMDAT _InstanceHasNonSysInplaceEncMutex
_TEXT	SEGMENT
_InstanceHasNonSysInplaceEncMutex PROC			; COMDAT

; 1682 : 	return (hNonSysInplaceEncMutex != NULL);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA ; hNonSysInplaceEncMutex
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	f7 d8		 neg	 eax

; 1683 : }

  0000b	c3		 ret	 0
_InstanceHasNonSysInplaceEncMutex ENDP
_TEXT	ENDS
PUBLIC	_TCCreateMutex
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__ReleaseMutex@4:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__CreateMutexA@12:PROC
; Function compile flags: /Ogtpy
;	COMDAT _TCCreateMutex
_TEXT	SEGMENT
_hMutex$ = 8						; size = 4
_name$ = 12						; size = 4
_TCCreateMutex PROC					; COMDAT

; 1735 : {

  00000	56		 push	 esi

; 1736 : 	if (*hMutex != NULL)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _hMutex$[esp]
  00005	8b 06		 mov	 eax, DWORD PTR [esi]
  00007	85 c0		 test	 eax, eax

; 1737 : 		return TRUE;	// This instance already has the mutex

  00009	75 3f		 jne	 SHORT $LN1@TCCreateMu

; 1738 : 
; 1739 : 	*hMutex = CreateMutex (NULL, TRUE, name);

  0000b	8b 4c 24 0c	 mov	 ecx, DWORD PTR _name$[esp]
  0000f	51		 push	 ecx
  00010	6a 01		 push	 1
  00012	50		 push	 eax
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateMutexA@12
  00019	89 06		 mov	 DWORD PTR [esi], eax

; 1740 : 	if (*hMutex == NULL)

  0001b	8b 16		 mov	 edx, DWORD PTR [esi]
  0001d	85 d2		 test	 edx, edx

; 1741 : 	{
; 1742 : 		// In multi-user configurations, the OS returns "Access is denied" here when a user attempts
; 1743 : 		// to acquire the mutex if another user already has. However, on Vista, "Access is denied" is
; 1744 : 		// returned also if the mutex is owned by a process with admin rights while we have none.
; 1745 : 
; 1746 : 		return FALSE;

  0001f	74 25		 je	 SHORT $LN6@TCCreateMu

; 1747 : 	}
; 1748 : 
; 1749 : 	if (GetLastError () == ERROR_ALREADY_EXISTS)

  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00027	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  0002c	75 1c		 jne	 SHORT $LN1@TCCreateMu

; 1750 : 	{
; 1751 : 		ReleaseMutex (*hMutex);

  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	50		 push	 eax
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4

; 1752 : 		CloseHandle (*hMutex);

  00037	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00039	51		 push	 ecx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 1753 : 
; 1754 : 		*hMutex = NULL;

  00040	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN6@TCCreateMu:

; 1755 : 		return FALSE;

  00046	33 c0		 xor	 eax, eax
  00048	5e		 pop	 esi

; 1759 : }

  00049	c3		 ret	 0
$LN1@TCCreateMu:

; 1756 : 	}
; 1757 : 
; 1758 : 	return TRUE;

  0004a	b8 01 00 00 00	 mov	 eax, 1
  0004f	5e		 pop	 esi

; 1759 : }

  00050	c3		 ret	 0
_TCCreateMutex ENDP
_TEXT	ENDS
PUBLIC	_TCCloseMutex
; Function compile flags: /Ogtpy
;	COMDAT _TCCloseMutex
_TEXT	SEGMENT
_hMutex$ = 8						; size = 4
_TCCloseMutex PROC					; COMDAT

; 1763 : {

  00000	56		 push	 esi

; 1764 : 	if (*hMutex != NULL)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _hMutex$[esp]
  00005	8b 06		 mov	 eax, DWORD PTR [esi]
  00007	85 c0		 test	 eax, eax
  00009	74 20		 je	 SHORT $LN1@TCCloseMut

; 1765 : 	{
; 1766 : 		if (ReleaseMutex (*hMutex)
; 1767 : 			&& CloseHandle (*hMutex))

  0000b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  00014	85 c0		 test	 eax, eax
  00016	74 13		 je	 SHORT $LN1@TCCloseMut
  00018	8b 16		 mov	 edx, DWORD PTR [esi]
  0001a	52		 push	 edx
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00021	85 c0		 test	 eax, eax
  00023	74 06		 je	 SHORT $LN1@TCCloseMut

; 1768 : 			*hMutex = NULL;

  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN1@TCCloseMut:
  0002b	5e		 pop	 esi

; 1769 : 	}
; 1770 : }

  0002c	c3		 ret	 0
_TCCloseMutex ENDP
_TEXT	ENDS
PUBLIC	_MutexExistsOnSystem
EXTRN	__imp__OpenMutexA@12:PROC
; Function compile flags: /Ogtpy
;	COMDAT _MutexExistsOnSystem
_TEXT	SEGMENT
_name$ = 8						; size = 4
_MutexExistsOnSystem PROC				; COMDAT

; 1776 : 	if (name[0] == 0)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _name$[esp-4]
  00004	80 38 00	 cmp	 BYTE PTR [eax], 0
  00007	75 03		 jne	 SHORT $LN4@MutexExist

; 1777 : 		return FALSE;

  00009	33 c0		 xor	 eax, eax

; 1795 : }

  0000b	c3		 ret	 0
$LN4@MutexExist:

; 1778 : 
; 1779 : 	HANDLE hMutex = OpenMutex (MUTEX_ALL_ACCESS, FALSE, name);

  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	68 01 00 1f 00	 push	 2031617			; 001f0001H
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenMutexA@12

; 1780 : 
; 1781 : 	if (hMutex == NULL)

  0001a	85 c0		 test	 eax, eax
  0001c	75 20		 jne	 SHORT $LN3@MutexExist
  0001e	56		 push	 esi

; 1782 : 	{
; 1783 : 		if (GetLastError () == ERROR_FILE_NOT_FOUND)

  0001f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetLastError@0
  00025	ff d6		 call	 esi
  00027	83 f8 02	 cmp	 eax, 2
  0002a	75 04		 jne	 SHORT $LN2@MutexExist

; 1784 : 			return FALSE;

  0002c	33 c0		 xor	 eax, eax
  0002e	5e		 pop	 esi

; 1795 : }

  0002f	c3		 ret	 0
$LN2@MutexExist:

; 1785 : 
; 1786 : 		if (GetLastError () == ERROR_ACCESS_DENIED) // On Vista, this is returned if the owner of the mutex is elevated while we are not

  00030	ff d6		 call	 esi
  00032	33 c9		 xor	 ecx, ecx
  00034	83 f8 05	 cmp	 eax, 5
  00037	0f 94 c1	 sete	 cl
  0003a	5e		 pop	 esi
  0003b	8b c1		 mov	 eax, ecx

; 1795 : }

  0003d	c3		 ret	 0
$LN3@MutexExist:

; 1787 : 			return TRUE;		
; 1788 : 
; 1789 : 		// The call failed and it is not certain whether the mutex exists or not
; 1790 : 		return FALSE;
; 1791 : 	}
; 1792 : 
; 1793 : 	CloseHandle (hMutex);

  0003e	50		 push	 eax
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 1794 : 	return TRUE;

  00045	b8 01 00 00 00	 mov	 eax, 1

; 1795 : }

  0004a	c3		 ret	 0
_MutexExistsOnSystem ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@CEEDGJNL@SYSTEM?2CurrentControlSet?2Service@ ; `string'
PUBLIC	??_C@_0BA@DGAECNJJ@TrueCryptConfig?$AA@		; `string'
PUBLIC	_ReadDriverConfigurationFlags
EXTRN	_ReadLocalMachineRegistryDword:PROC
;	COMDAT ??_C@_0CM@CEEDGJNL@SYSTEM?2CurrentControlSet?2Service@
CONST	SEGMENT
??_C@_0CM@CEEDGJNL@SYSTEM?2CurrentControlSet?2Service@ DB 'SYSTEM\Current'
	DB	'ControlSet\Services\truecrypt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DGAECNJJ@TrueCryptConfig?$AA@
CONST	SEGMENT
??_C@_0BA@DGAECNJJ@TrueCryptConfig?$AA@ DB 'TrueCryptConfig', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _ReadDriverConfigurationFlags
_TEXT	SEGMENT
_configMap$ = -4					; size = 4
_ReadDriverConfigurationFlags PROC			; COMDAT

; 1799 : {

  00000	51		 push	 ecx

; 1800 : 	DWORD configMap;
; 1801 : 
; 1802 : 	if (!ReadLocalMachineRegistryDword ("SYSTEM\\CurrentControlSet\\Services\\truecrypt", TC_DRIVER_CONFIG_REG_VALUE_NAME, &configMap))

  00001	8d 04 24	 lea	 eax, DWORD PTR _configMap$[esp+4]
  00004	50		 push	 eax
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DGAECNJJ@TrueCryptConfig?$AA@
  0000a	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@CEEDGJNL@SYSTEM?2CurrentControlSet?2Service@
  0000f	e8 00 00 00 00	 call	 _ReadLocalMachineRegistryDword
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	85 c0		 test	 eax, eax
  00019	75 02		 jne	 SHORT $LN4@ReadDriver

; 1806 : }

  0001b	59		 pop	 ecx
  0001c	c3		 ret	 0
$LN4@ReadDriver:

; 1803 : 		configMap = 0;
; 1804 : 
; 1805 : 	return configMap;

  0001d	8b 04 24	 mov	 eax, DWORD PTR _configMap$[esp+4]

; 1806 : }

  00020	59		 pop	 ecx
  00021	c3		 ret	 0
_ReadDriverConfigurationFlags ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@NOOFMILL@TrueCryptEncryptionFreeCpuCount?$AA@ ; `string'
PUBLIC	_ReadEncryptionThreadPoolFreeCpuCountLimit
;	COMDAT ??_C@_0CA@NOOFMILL@TrueCryptEncryptionFreeCpuCount?$AA@
CONST	SEGMENT
??_C@_0CA@NOOFMILL@TrueCryptEncryptionFreeCpuCount?$AA@ DB 'TrueCryptEncr'
	DB	'yptionFreeCpuCount', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _ReadEncryptionThreadPoolFreeCpuCountLimit
_TEXT	SEGMENT
_count$ = -4						; size = 4
_ReadEncryptionThreadPoolFreeCpuCountLimit PROC		; COMDAT

; 1810 : {

  00000	51		 push	 ecx

; 1811 : 	DWORD count;
; 1812 : 
; 1813 : 	if (!ReadLocalMachineRegistryDword ("SYSTEM\\CurrentControlSet\\Services\\truecrypt", TC_ENCRYPTION_FREE_CPU_COUNT_REG_VALUE_NAME, &count))

  00001	8d 04 24	 lea	 eax, DWORD PTR _count$[esp+4]
  00004	50		 push	 eax
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NOOFMILL@TrueCryptEncryptionFreeCpuCount?$AA@
  0000a	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@CEEDGJNL@SYSTEM?2CurrentControlSet?2Service@
  0000f	e8 00 00 00 00	 call	 _ReadLocalMachineRegistryDword
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	85 c0		 test	 eax, eax
  00019	75 02		 jne	 SHORT $LN4@ReadEncryp

; 1817 : }

  0001b	59		 pop	 ecx
  0001c	c3		 ret	 0
$LN4@ReadEncryp:

; 1814 : 		count = 0;
; 1815 : 
; 1816 : 	return count;

  0001d	8b 04 24	 mov	 eax, DWORD PTR _count$[esp+4]

; 1817 : }

  00020	59		 pop	 ecx
  00021	c3		 ret	 0
_ReadEncryptionThreadPoolFreeCpuCountLimit ENDP
_TEXT	ENDS
PUBLIC	??_C@_09IDILIKHG@NO_OS_VER?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_InitOSVersionInfo
EXTRN	_IsServerOS:PROC
EXTRN	__imp__GetVersionExA@4:PROC
;	COMDAT ??_C@_09IDILIKHG@NO_OS_VER?$AA@
CONST	SEGMENT
??_C@_09IDILIKHG@NO_OS_VER?$AA@ DB 'NO_OS_VER', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _InitOSVersionInfo
_TEXT	SEGMENT
_osEx$139738 = -308					; size = 156
_osEx$139730 = -308					; size = 156
_os$ = -152						; size = 148
__$ArrayPad$ = -4					; size = 4
_InitOSVersionInfo PROC					; COMDAT

; 1984 : {

  00000	81 ec 34 01 00
	00		 sub	 esp, 308		; 00000134H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 30 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+308], eax
  00014	56		 push	 esi

; 1985 : 	OSVERSIONINFO os;
; 1986 : 	os.dwOSVersionInfoSize = sizeof (OSVERSIONINFO);
; 1987 : 
; 1988 : 	if (GetVersionEx (&os) == FALSE)

  00015	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetVersionExA@4
  0001b	8d 84 24 a0 00
	00 00		 lea	 eax, DWORD PTR _os$[esp+312]
  00022	50		 push	 eax
  00023	c7 84 24 a4 00
	00 00 94 00 00
	00		 mov	 DWORD PTR _os$[esp+316], 148 ; 00000094H
  0002e	ff d6		 call	 esi
  00030	85 c0		 test	 eax, eax
  00032	75 0a		 jne	 SHORT $LN33@InitOSVers

; 1989 : 		AbortProcess ("NO_OS_VER");

  00034	68 00 00 00 00	 push	 OFFSET ??_C@_09IDILIKHG@NO_OS_VER?$AA@
  00039	e8 00 00 00 00	 call	 _AbortProcess
$LN33@InitOSVers:

; 1990 : 
; 1991 : 	CurrentOSMajor = os.dwMajorVersion;
; 1992 : 	CurrentOSMinor = os.dwMinorVersion;
; 1993 : 
; 1994 : 	if (os.dwPlatformId == VER_PLATFORM_WIN32_NT && CurrentOSMajor == 5 && CurrentOSMinor == 0)

  0003e	8b 94 24 b0 00
	00 00		 mov	 edx, DWORD PTR _os$[esp+328]
  00045	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR _os$[esp+316]
  0004c	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR _os$[esp+320]
  00053	89 0d 00 00 00
	00		 mov	 DWORD PTR _CurrentOSMajor, ecx
  00059	a3 00 00 00 00	 mov	 DWORD PTR _CurrentOSMinor, eax
  0005e	83 fa 02	 cmp	 edx, 2
  00061	0f 85 09 02 00
	00		 jne	 $LN10@InitOSVers
  00067	83 f9 05	 cmp	 ecx, 5
  0006a	0f 85 b0 00 00
	00		 jne	 $LN38@InitOSVers
  00070	85 c0		 test	 eax, eax
  00072	75 20		 jne	 SHORT $LN39@InitOSVers

; 1995 : 		nCurrentOS = WIN_2000;

  00074	c7 05 00 00 00
	00 07 00 00 00	 mov	 DWORD PTR _nCurrentOS, 7
  0007e	5e		 pop	 esi

; 2044 : }

  0007f	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+308]
  00086	33 cc		 xor	 ecx, esp
  00088	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008d	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  00093	c3		 ret	 0
$LN39@InitOSVers:

; 1996 : 	else if (os.dwPlatformId == VER_PLATFORM_WIN32_NT && CurrentOSMajor == 5 && CurrentOSMinor == 1)

  00094	83 f8 01	 cmp	 eax, 1
  00097	75 20		 jne	 SHORT $LN40@InitOSVers

; 1997 : 		nCurrentOS = WIN_XP;

  00099	c7 05 00 00 00
	00 08 00 00 00	 mov	 DWORD PTR _nCurrentOS, 8
  000a3	5e		 pop	 esi

; 2044 : }

  000a4	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+308]
  000ab	33 cc		 xor	 ecx, esp
  000ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b2	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  000b8	c3		 ret	 0
$LN40@InitOSVers:

; 1998 : 	else if (os.dwPlatformId == VER_PLATFORM_WIN32_NT && CurrentOSMajor == 5 && CurrentOSMinor == 2)

  000b9	83 f8 02	 cmp	 eax, 2
  000bc	0f 85 34 02 00
	00		 jne	 $LN2@InitOSVers

; 1999 : 	{
; 2000 : 		OSVERSIONINFOEX osEx;
; 2001 : 
; 2002 : 		osEx.dwOSVersionInfoSize = sizeof (OSVERSIONINFOEX);
; 2003 : 		GetVersionEx ((LPOSVERSIONINFOA) &osEx);

  000c2	8d 4c 24 04	 lea	 ecx, DWORD PTR _osEx$139730[esp+312]
  000c6	51		 push	 ecx
  000c7	c7 44 24 08 9c
	00 00 00	 mov	 DWORD PTR _osEx$139730[esp+316], 156 ; 0000009cH
  000cf	ff d6		 call	 esi

; 2004 : 
; 2005 : 		if (osEx.wProductType == VER_NT_SERVER || osEx.wProductType == VER_NT_DOMAIN_CONTROLLER)

  000d1	8a 84 24 9e 00
	00 00		 mov	 al, BYTE PTR _osEx$139730[esp+466]
  000d8	3c 03		 cmp	 al, 3
  000da	74 24		 je	 SHORT $LN26@InitOSVers
  000dc	3c 02		 cmp	 al, 2
  000de	74 20		 je	 SHORT $LN26@InitOSVers

; 2007 : 		else
; 2008 : 			nCurrentOS = WIN_XP64;

  000e0	c7 05 00 00 00
	00 09 00 00 00	 mov	 DWORD PTR _nCurrentOS, 9
  000ea	5e		 pop	 esi

; 2044 : }

  000eb	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+308]
  000f2	33 cc		 xor	 ecx, esp
  000f4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f9	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  000ff	c3		 ret	 0
$LN26@InitOSVers:

; 2006 : 			nCurrentOS = WIN_SERVER_2003;

  00100	c7 05 00 00 00
	00 0a 00 00 00	 mov	 DWORD PTR _nCurrentOS, 10 ; 0000000aH
  0010a	5e		 pop	 esi

; 2044 : }

  0010b	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+308]
  00112	33 cc		 xor	 ecx, esp
  00114	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00119	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  0011f	c3		 ret	 0
$LN38@InitOSVers:

; 2009 : 	}
; 2010 : 
; 2011 : 	else if (os.dwPlatformId == VER_PLATFORM_WIN32_NT && CurrentOSMajor == 6 && CurrentOSMinor == 0)

  00120	83 f9 06	 cmp	 ecx, 6
  00123	0f 85 1e 01 00
	00		 jne	 $LN45@InitOSVers
  00129	85 c0		 test	 eax, eax
  0012b	75 5e		 jne	 SHORT $LN46@InitOSVers

; 2012 : 	{
; 2013 : 		OSVERSIONINFOEX osEx;
; 2014 : 
; 2015 : 		osEx.dwOSVersionInfoSize = sizeof (OSVERSIONINFOEX);
; 2016 : 		GetVersionEx ((LPOSVERSIONINFOA) &osEx);

  0012d	8d 54 24 04	 lea	 edx, DWORD PTR _osEx$139738[esp+312]
  00131	52		 push	 edx
  00132	c7 44 24 08 9c
	00 00 00	 mov	 DWORD PTR _osEx$139738[esp+316], 156 ; 0000009cH
  0013a	ff d6		 call	 esi

; 2017 : 
; 2018 : 		if (osEx.wProductType == VER_NT_SERVER || osEx.wProductType == VER_NT_DOMAIN_CONTROLLER)

  0013c	8a 84 24 9e 00
	00 00		 mov	 al, BYTE PTR _osEx$139738[esp+466]
  00143	3c 03		 cmp	 al, 3
  00145	74 24		 je	 SHORT $LN21@InitOSVers
  00147	3c 02		 cmp	 al, 2
  00149	74 20		 je	 SHORT $LN21@InitOSVers

; 2020 : 		else
; 2021 : 			nCurrentOS = WIN_VISTA;

  0014b	c7 05 00 00 00
	00 0b 00 00 00	 mov	 DWORD PTR _nCurrentOS, 11 ; 0000000bH
  00155	5e		 pop	 esi

; 2044 : }

  00156	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+308]
  0015d	33 cc		 xor	 ecx, esp
  0015f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00164	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  0016a	c3		 ret	 0
$LN21@InitOSVers:

; 2019 : 			nCurrentOS = WIN_SERVER_2008;

  0016b	c7 05 00 00 00
	00 0c 00 00 00	 mov	 DWORD PTR _nCurrentOS, 12 ; 0000000cH
  00175	5e		 pop	 esi

; 2044 : }

  00176	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+308]
  0017d	33 cc		 xor	 ecx, esp
  0017f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00184	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  0018a	c3		 ret	 0
$LN46@InitOSVers:

; 2022 : 	}
; 2023 : 	else if (os.dwPlatformId == VER_PLATFORM_WIN32_NT && CurrentOSMajor == 6 && CurrentOSMinor == 1)

  0018b	83 f8 01	 cmp	 eax, 1
  0018e	75 29		 jne	 SHORT $LN47@InitOSVers

; 2024 : 		nCurrentOS = (IsServerOS() ? WIN_SERVER_2008_R2 : WIN_7);

  00190	e8 00 00 00 00	 call	 _IsServerOS
  00195	f7 d8		 neg	 eax
  00197	1b c0		 sbb	 eax, eax
  00199	f7 d8		 neg	 eax
  0019b	83 c0 0d	 add	 eax, 13			; 0000000dH
  0019e	a3 00 00 00 00	 mov	 DWORD PTR _nCurrentOS, eax
  001a3	5e		 pop	 esi

; 2044 : }

  001a4	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+308]
  001ab	33 cc		 xor	 ecx, esp
  001ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b2	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  001b8	c3		 ret	 0
$LN47@InitOSVers:

; 2025 : 	else if (os.dwPlatformId == VER_PLATFORM_WIN32_NT && CurrentOSMajor == 6 && CurrentOSMinor == 2)

  001b9	83 f8 02	 cmp	 eax, 2
  001bc	75 29		 jne	 SHORT $LN48@InitOSVers

; 2026 : 		nCurrentOS = (IsServerOS() ? WIN_SERVER_2012 : WIN_8);

  001be	e8 00 00 00 00	 call	 _IsServerOS
  001c3	f7 d8		 neg	 eax
  001c5	1b c0		 sbb	 eax, eax
  001c7	f7 d8		 neg	 eax
  001c9	83 c0 0f	 add	 eax, 15			; 0000000fH
  001cc	a3 00 00 00 00	 mov	 DWORD PTR _nCurrentOS, eax
  001d1	5e		 pop	 esi

; 2044 : }

  001d2	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+308]
  001d9	33 cc		 xor	 ecx, esp
  001db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e0	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  001e6	c3		 ret	 0
$LN48@InitOSVers:

; 2027 : 	else if (os.dwPlatformId == VER_PLATFORM_WIN32_NT && CurrentOSMajor == 6 && CurrentOSMinor == 3)

  001e7	83 f8 03	 cmp	 eax, 3
  001ea	75 29		 jne	 SHORT $LN49@InitOSVers

; 2028 : 		nCurrentOS = (IsServerOS() ? WIN_SERVER_2012_R2 : WIN_8_1);

  001ec	e8 00 00 00 00	 call	 _IsServerOS
  001f1	f7 d8		 neg	 eax
  001f3	1b c0		 sbb	 eax, eax
  001f5	f7 d8		 neg	 eax
  001f7	83 c0 11	 add	 eax, 17			; 00000011H
  001fa	a3 00 00 00 00	 mov	 DWORD PTR _nCurrentOS, eax
  001ff	5e		 pop	 esi

; 2044 : }

  00200	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+308]
  00207	33 cc		 xor	 ecx, esp
  00209	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020e	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  00214	c3		 ret	 0
$LN49@InitOSVers:

; 2029 : 	else if (os.dwPlatformId == VER_PLATFORM_WIN32_NT && CurrentOSMajor == 6 && CurrentOSMinor == 4)

  00215	83 f8 04	 cmp	 eax, 4
  00218	0f 85 d8 00 00
	00		 jne	 $LN2@InitOSVers

; 2030 : 		nCurrentOS = (IsServerOS() ? WIN_SERVER_2016 : WIN_10);

  0021e	e8 00 00 00 00	 call	 _IsServerOS
  00223	f7 d8		 neg	 eax
  00225	1b c0		 sbb	 eax, eax
  00227	f7 d8		 neg	 eax
  00229	83 c0 13	 add	 eax, 19			; 00000013H
  0022c	a3 00 00 00 00	 mov	 DWORD PTR _nCurrentOS, eax
  00231	5e		 pop	 esi

; 2044 : }

  00232	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+308]
  00239	33 cc		 xor	 ecx, esp
  0023b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00240	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  00246	c3		 ret	 0
$LN45@InitOSVers:

; 2031 : 
; 2032 : 	else if (os.dwPlatformId == VER_PLATFORM_WIN32_NT && CurrentOSMajor == 4)

  00247	83 f9 04	 cmp	 ecx, 4
  0024a	0f 85 a6 00 00
	00		 jne	 $LN2@InitOSVers

; 2033 : 		nCurrentOS = WIN_NT4;

  00250	c7 05 00 00 00
	00 06 00 00 00	 mov	 DWORD PTR _nCurrentOS, 6
  0025a	5e		 pop	 esi

; 2044 : }

  0025b	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+308]
  00262	33 cc		 xor	 ecx, esp
  00264	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00269	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  0026f	c3		 ret	 0
$LN10@InitOSVers:

; 2034 : 	else if (os.dwPlatformId == VER_PLATFORM_WIN32_WINDOWS && os.dwMajorVersion == 4 && os.dwMinorVersion == 0)

  00270	83 fa 01	 cmp	 edx, 1
  00273	75 73		 jne	 SHORT $LN4@InitOSVers
  00275	83 f9 04	 cmp	 ecx, 4
  00278	75 7c		 jne	 SHORT $LN2@InitOSVers
  0027a	85 c0		 test	 eax, eax
  0027c	75 20		 jne	 SHORT $LN52@InitOSVers

; 2035 : 		nCurrentOS = WIN_95;

  0027e	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR _nCurrentOS, 2
  00288	5e		 pop	 esi

; 2044 : }

  00289	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+308]
  00290	33 cc		 xor	 ecx, esp
  00292	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00297	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  0029d	c3		 ret	 0
$LN52@InitOSVers:

; 2036 : 	else if (os.dwPlatformId == VER_PLATFORM_WIN32_WINDOWS && os.dwMajorVersion == 4 && os.dwMinorVersion == 10)

  0029e	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  002a1	75 20		 jne	 SHORT $LN53@InitOSVers

; 2037 : 		nCurrentOS = WIN_98;

  002a3	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR _nCurrentOS, 3
  002ad	5e		 pop	 esi

; 2044 : }

  002ae	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+308]
  002b5	33 cc		 xor	 ecx, esp
  002b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002bc	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  002c2	c3		 ret	 0
$LN53@InitOSVers:

; 2038 : 	else if (os.dwPlatformId == VER_PLATFORM_WIN32_WINDOWS && os.dwMajorVersion == 4 && os.dwMinorVersion == 90)

  002c3	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  002c6	75 2e		 jne	 SHORT $LN2@InitOSVers

; 2039 : 		nCurrentOS = WIN_ME;

  002c8	c7 05 00 00 00
	00 04 00 00 00	 mov	 DWORD PTR _nCurrentOS, 4
  002d2	5e		 pop	 esi

; 2044 : }

  002d3	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+308]
  002da	33 cc		 xor	 ecx, esp
  002dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002e1	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  002e7	c3		 ret	 0
$LN4@InitOSVers:

; 2040 : 	else if (os.dwPlatformId == VER_PLATFORM_WIN32s)
; 2041 : 		nCurrentOS = WIN_31;

  002e8	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _nCurrentOS, 1
  002f2	85 d2		 test	 edx, edx
  002f4	74 0a		 je	 SHORT $LN1@InitOSVers
$LN2@InitOSVers:

; 2042 : 	else
; 2043 : 		nCurrentOS = WIN_UNKNOWN;

  002f6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _nCurrentOS, 0
$LN1@InitOSVers:

; 2044 : }

  00300	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+312]
  00307	5e		 pop	 esi
  00308	33 cc		 xor	 ecx, esp
  0030a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0030f	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  00315	c3		 ret	 0
$LN54@InitOSVers:
_InitOSVersionInfo ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@EOEFIMME@CipherShed?5User?5Guide?4?$CFs?4pdf?$AA@ ; `string'
PUBLIC	??_C@_02LFNMGJAP@en?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_InitHelpFileName
EXTRN	_sprintf_s:PROC
EXTRN	_GetPreferredLangId:PROC
EXTRN	__imp__GetModuleFileNameA@12:PROC
;	COMDAT ??_C@_0BN@EOEFIMME@CipherShed?5User?5Guide?4?$CFs?4pdf?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string.h
CONST	SEGMENT
??_C@_0BN@EOEFIMME@CipherShed?5User?5Guide?4?$CFs?4pdf?$AA@ DB 'CipherShe'
	DB	'd User Guide.%s.pdf', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LFNMGJAP@en?$AA@
CONST	SEGMENT
??_C@_02LFNMGJAP@en?$AA@ DB 'en', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
CONST	ENDS
;	COMDAT _InitHelpFileName
_TEXT	SEGMENT
_szTemp$139841 = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_InitHelpFileName PROC					; COMDAT

; 2278 : {

  00000	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 04 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+264], eax
  00014	53		 push	 ebx

; 2279 : 	char *lpszTmp;
; 2280 : 
; 2281 : 	GetModuleFileName (NULL, szHelpFile, sizeof (szHelpFile));

  00015	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetModuleFileNameA@12
  0001b	57		 push	 edi
  0001c	68 04 01 00 00	 push	 260			; 00000104H
  00021	68 00 00 00 00	 push	 OFFSET _szHelpFile
  00026	6a 00		 push	 0
  00028	ff d3		 call	 ebx

; 2282 : 	lpszTmp = strrchr (szHelpFile, '\\');

  0002a	6a 5c		 push	 92			; 0000005cH
  0002c	68 00 00 00 00	 push	 OFFSET _szHelpFile
  00031	e8 00 00 00 00	 call	 _strrchr
  00036	8b f8		 mov	 edi, eax
  00038	83 c4 08	 add	 esp, 8

; 2283 : 	if (lpszTmp)

  0003b	85 ff		 test	 edi, edi
  0003d	0f 84 bb 00 00
	00		 je	 $LN1@InitHelpFi
  00043	56		 push	 esi

; 2284 : 	{
; 2285 : 		char szTemp[TC_MAX_PATH];
; 2286 : 
; 2287 : 		// Primary file name
; 2288 : 		if (strcmp (GetPreferredLangId(), "en") == 0
; 2289 : 			|| GetPreferredLangId() == NULL)

  00044	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_02LFNMGJAP@en?$AA@
  00049	e8 00 00 00 00	 call	 _GetPreferredLangId
  0004e	8b ff		 npad	 2
$LL14@InitHelpFi:
  00050	8a 08		 mov	 cl, BYTE PTR [eax]
  00052	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00054	75 1a		 jne	 SHORT $LN15@InitHelpFi
  00056	84 c9		 test	 cl, cl
  00058	74 12		 je	 SHORT $LN16@InitHelpFi
  0005a	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0005d	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00060	75 0e		 jne	 SHORT $LN15@InitHelpFi
  00062	83 c0 02	 add	 eax, 2
  00065	83 c6 02	 add	 esi, 2
  00068	84 c9		 test	 cl, cl
  0006a	75 e4		 jne	 SHORT $LL14@InitHelpFi
$LN16@InitHelpFi:
  0006c	33 c0		 xor	 eax, eax
  0006e	eb 05		 jmp	 SHORT $LN17@InitHelpFi
$LN15@InitHelpFi:
  00070	1b c0		 sbb	 eax, eax
  00072	83 d8 ff	 sbb	 eax, -1
$LN17@InitHelpFi:
  00075	85 c0		 test	 eax, eax
  00077	74 43		 je	 SHORT $LN3@InitHelpFi
  00079	e8 00 00 00 00	 call	 _GetPreferredLangId
  0007e	85 c0		 test	 eax, eax
  00080	74 3a		 je	 SHORT $LN3@InitHelpFi

; 2292 : 		}
; 2293 : 		else
; 2294 : 		{
; 2295 : 			snprintf (szTemp, ARRAY_LENGTH(szTemp), "CipherShed User Guide.%s.pdf", GetPreferredLangId());

  00082	e8 00 00 00 00	 call	 _GetPreferredLangId
  00087	50		 push	 eax
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@EOEFIMME@CipherShed?5User?5Guide?4?$CFs?4pdf?$AA@
  0008d	8d 44 24 14	 lea	 eax, DWORD PTR _szTemp$139841[esp+284]
  00091	68 04 01 00 00	 push	 260			; 00000104H
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 _sprintf_s

; 2296 : 			strcpy (++lpszTmp, szTemp);

  0009c	8d 44 24 1c	 lea	 eax, DWORD PTR _szTemp$139841[esp+292]
  000a0	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
  000a3	8b c8		 mov	 ecx, eax
  000a5	83 c4 10	 add	 esp, 16			; 00000010H
  000a8	2b d1		 sub	 edx, ecx
  000aa	8d 9b 00 00 00
	00		 npad	 6
$LL8@InitHelpFi:
  000b0	8a 08		 mov	 cl, BYTE PTR [eax]
  000b2	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000b5	40		 inc	 eax
  000b6	84 c9		 test	 cl, cl
  000b8	75 f6		 jne	 SHORT $LL8@InitHelpFi
  000ba	eb 0f		 jmp	 SHORT $LN2@InitHelpFi
$LN3@InitHelpFi:

; 2290 : 		{
; 2291 : 			strcpy (++lpszTmp, "CipherShed User Guide.pdf");

  000bc	47		 inc	 edi
  000bd	b9 06 00 00 00	 mov	 ecx, 6
  000c2	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BK@LMECBCPP@CipherShed?5User?5Guide?4pdf?$AA@
  000c7	f3 a5		 rep movsd
  000c9	66 a5		 movsw
$LN2@InitHelpFi:

; 2297 : 		}
; 2298 : 
; 2299 : 		// Secondary file name (used when localized documentation is not found).
; 2300 : 		GetModuleFileName (NULL, szHelpFile2, sizeof (szHelpFile2));

  000cb	68 04 01 00 00	 push	 260			; 00000104H
  000d0	68 00 00 00 00	 push	 OFFSET _szHelpFile2
  000d5	6a 00		 push	 0
  000d7	ff d3		 call	 ebx

; 2301 : 		lpszTmp = strrchr (szHelpFile2, '\\');

  000d9	6a 5c		 push	 92			; 0000005cH
  000db	68 00 00 00 00	 push	 OFFSET _szHelpFile2
  000e0	e8 00 00 00 00	 call	 _strrchr
  000e5	83 c4 08	 add	 esp, 8

; 2302 : 		if (lpszTmp)

  000e8	85 c0		 test	 eax, eax
  000ea	74 11		 je	 SHORT $LN18@InitHelpFi

; 2303 : 		{
; 2304 : 			strcpy (++lpszTmp, "CipherShed User Guide.pdf");

  000ec	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  000ef	b9 06 00 00 00	 mov	 ecx, 6
  000f4	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BK@LMECBCPP@CipherShed?5User?5Guide?4pdf?$AA@
  000f9	f3 a5		 rep movsd
  000fb	66 a5		 movsw
$LN18@InitHelpFi:
  000fd	5e		 pop	 esi
$LN1@InitHelpFi:

; 2305 : 		}
; 2306 : 	}
; 2307 : }

  000fe	8b 8c 24 0c 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+272]
  00105	5f		 pop	 edi
  00106	5b		 pop	 ebx
  00107	33 cc		 xor	 ecx, esp
  00109	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010e	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  00114	c3		 ret	 0
_InitHelpFileName ENDP
_TEXT	ENDS
PUBLIC	_OpenDevice
EXTRN	__imp__DeviceIoControl@32:PROC
EXTRN	_ToUNICODE:PROC
; Function compile flags: /Ogtpy
;	COMDAT _OpenDevice
_TEXT	SEGMENT
_dwResult$ = 8						; size = 4
_lpszPath$ = 8						; size = 4
_driver$ = 12						; size = 4
_detectFilesystem$ = 16					; size = 4
_OpenDevice PROC					; COMDAT

; 2311 : 	DWORD dwResult;
; 2312 : 	BOOL bResult;
; 2313 : 
; 2314 : 	strcpy ((char *) &driver->wszFileName[0], lpszPath);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _lpszPath$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR _driver$[esp]
  00009	8b d6		 mov	 edx, esi
  0000b	2b d0		 sub	 edx, eax
  0000d	8d 49 00	 npad	 3
$LL7@OpenDevice:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00015	40		 inc	 eax
  00016	84 c9		 test	 cl, cl
  00018	75 f6		 jne	 SHORT $LL7@OpenDevice

; 2315 : 	ToUNICODE ((char *) &driver->wszFileName[0]);

  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _ToUNICODE

; 2316 : 
; 2317 : 	driver->bDetectTCBootLoader = FALSE;
; 2318 : 	driver->DetectFilesystem = detectFilesystem;

  00020	8b 44 24 14	 mov	 eax, DWORD PTR _detectFilesystem$[esp+4]
  00024	83 c4 04	 add	 esp, 4

; 2319 : 
; 2320 : 	bResult = DeviceIoControl (hDriver, TC_IOCTL_OPEN_TEST,
; 2321 : 				   driver, sizeof (OPEN_TEST_STRUCT),
; 2322 : 				   driver, sizeof (OPEN_TEST_STRUCT),
; 2323 : 				   &dwResult, NULL);

  00027	6a 00		 push	 0
  00029	8d 4c 24 0c	 lea	 ecx, DWORD PTR _dwResult$[esp+4]
  0002d	51		 push	 ecx
  0002e	68 18 02 00 00	 push	 536			; 00000218H
  00033	56		 push	 esi
  00034	68 18 02 00 00	 push	 536			; 00000218H
  00039	56		 push	 esi
  0003a	c7 86 08 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+520], 0
  00044	89 86 10 02 00
	00		 mov	 DWORD PTR [esi+528], eax
  0004a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hDriver
  00050	68 34 20 22 00	 push	 2236468			; 00222034H
  00055	52		 push	 edx
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 2324 : 
; 2325 : 	if (bResult == FALSE)

  0005c	85 c0		 test	 eax, eax
  0005e	75 28		 jne	 SHORT $LN1@OpenDevice

; 2326 : 	{
; 2327 : 		dwResult = GetLastError ();

  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 2328 : 
; 2329 : 		if (dwResult == ERROR_SHARING_VIOLATION || dwResult == ERROR_NOT_READY)

  00066	83 f8 20	 cmp	 eax, 32			; 00000020H
  00069	74 09		 je	 SHORT $LN2@OpenDevice
  0006b	83 f8 15	 cmp	 eax, 21			; 00000015H
  0006e	74 04		 je	 SHORT $LN2@OpenDevice

; 2333 : 			return TRUE;
; 2334 : 		}
; 2335 : 		else
; 2336 : 			return FALSE;

  00070	33 c0		 xor	 eax, eax
  00072	5e		 pop	 esi

; 2340 : }

  00073	c3		 ret	 0
$LN2@OpenDevice:

; 2330 : 		{
; 2331 : 			driver->TCBootLoaderDetected = FALSE;

  00074	c7 86 0c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+524], 0

; 2332 : 			driver->FilesystemDetected = FALSE;

  0007e	c7 86 14 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+532], 0
$LN1@OpenDevice:

; 2337 : 	}
; 2338 : 		
; 2339 : 	return TRUE;

  00088	b8 01 00 00 00	 mov	 eax, 1
  0008d	5e		 pop	 esi

; 2340 : }

  0008e	c3		 ret	 0
_OpenDevice ENDP
_TEXT	ENDS
PUBLIC	_NotifyDriverOfPortableMode
; Function compile flags: /Ogtpy
;	COMDAT _NotifyDriverOfPortableMode
_TEXT	SEGMENT
_dwResult$139874 = -4					; size = 4
_NotifyDriverOfPortableMode PROC			; COMDAT

; 2345 : {

  00000	51		 push	 ecx

; 2346 : 	if (hDriver != INVALID_HANDLE_VALUE)

  00001	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDriver
  00006	83 f8 ff	 cmp	 eax, -1
  00009	74 1b		 je	 SHORT $LN1@NotifyDriv

; 2347 : 	{
; 2348 : 		DWORD dwResult;
; 2349 : 
; 2350 : 		DeviceIoControl (hDriver, TC_IOCTL_SET_PORTABLE_MODE_STATUS, NULL, 0, NULL, 0, &dwResult, NULL);

  0000b	6a 00		 push	 0
  0000d	8d 4c 24 04	 lea	 ecx, DWORD PTR _dwResult$139874[esp+8]
  00011	51		 push	 ecx
  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	6a 00		 push	 0
  00018	6a 00		 push	 0
  0001a	68 68 20 22 00	 push	 2236520			; 00222068H
  0001f	50		 push	 eax
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
$LN1@NotifyDriv:

; 2351 : 	}
; 2352 : }

  00026	59		 pop	 ecx
  00027	c3		 ret	 0
_NotifyDriverOfPortableMode ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_GetDriveLabel
EXTRN	__imp__GetVolumeInformationW@32:PROC
; Function compile flags: /Ogtpy
;	COMDAT _GetDriveLabel
_TEXT	SEGMENT
_fileSystemFlags$ = -16					; size = 4
_root$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_driveNo$ = 8						; size = 4
_label$ = 12						; size = 4
_labelSize$ = 16					; size = 4
_GetDriveLabel PROC					; COMDAT

; 2356 : {

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 0c	 mov	 DWORD PTR __$ArrayPad$[esp+16], eax

; 2357 : 	DWORD fileSystemFlags;
; 2358 : 	wchar_t root[] = { L'A' + (wchar_t) driveNo, L':', L'\\', 0 };

  0000e	8b 44 24 14	 mov	 eax, DWORD PTR _driveNo$[esp+12]
  00012	8b 4c 24 18	 mov	 ecx, DWORD PTR _label$[esp+12]
  00016	83 c0 41	 add	 eax, 65			; 00000041H
  00019	66 89 44 24 04	 mov	 WORD PTR _root$[esp+16], ax
  0001e	ba 3a 00 00 00	 mov	 edx, 58			; 0000003aH
  00023	66 89 54 24 06	 mov	 WORD PTR _root$[esp+18], dx
  00028	33 d2		 xor	 edx, edx

; 2359 : 
; 2360 : 	return GetVolumeInformationW (root, label, labelSize / 2, NULL, NULL, &fileSystemFlags, NULL, 0);

  0002a	52		 push	 edx
  0002b	52		 push	 edx
  0002c	b8 5c 00 00 00	 mov	 eax, 92			; 0000005cH
  00031	66 89 44 24 10	 mov	 WORD PTR _root$[esp+28], ax
  00036	8d 44 24 08	 lea	 eax, DWORD PTR _fileSystemFlags$[esp+24]
  0003a	50		 push	 eax
  0003b	8b 44 24 28	 mov	 eax, DWORD PTR _labelSize$[esp+24]
  0003f	52		 push	 edx
  00040	52		 push	 edx
  00041	66 89 54 24 1e	 mov	 WORD PTR _root$[esp+42], dx
  00046	99		 cdq
  00047	2b c2		 sub	 eax, edx
  00049	d1 f8		 sar	 eax, 1
  0004b	50		 push	 eax
  0004c	51		 push	 ecx
  0004d	8d 4c 24 20	 lea	 ecx, DWORD PTR _root$[esp+44]
  00051	51		 push	 ecx
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumeInformationW@32

; 2361 : }

  00058	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16]
  0005c	33 cc		 xor	 ecx, esp
  0005e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00063	83 c4 10	 add	 esp, 16			; 00000010H
  00066	c3		 ret	 0
_GetDriveLabel ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@NAJKGDG@DRIVER_INSTALL_FAILED?$AA@	; `string'
PUBLIC	??_C@_0BA@NDPFMBFD@STARTING_DRIVER?$AA@		; `string'
PUBLIC	??_C@_09EFLFAGB@truecrypt?$AA@			; `string'
PUBLIC	??_C@_0BP@MGAEPBHO@System32?2drivers?2truecrypt?4sys?$AA@ ; `string'
PUBLIC	??_C@_0BC@ECEMIBMM@INSTALLING_DRIVER?$AA@	; `string'
PUBLIC	_DoDriverInstall
EXTRN	__imp__StartServiceA@12:PROC
EXTRN	__imp__OpenServiceA@12:PROC
EXTRN	__imp__CreateServiceA@52:PROC
EXTRN	_StatusMessage:PROC
EXTRN	__imp__CloseServiceHandle@4:PROC
EXTRN	__imp__OpenSCManagerA@12:PROC
EXTRN	_SystemEncryptionUpdate:DWORD
;	COMDAT ??_C@_0BG@NAJKGDG@DRIVER_INSTALL_FAILED?$AA@
CONST	SEGMENT
??_C@_0BG@NAJKGDG@DRIVER_INSTALL_FAILED?$AA@ DB 'DRIVER_INSTALL_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NDPFMBFD@STARTING_DRIVER?$AA@
CONST	SEGMENT
??_C@_0BA@NDPFMBFD@STARTING_DRIVER?$AA@ DB 'STARTING_DRIVER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EFLFAGB@truecrypt?$AA@
CONST	SEGMENT
??_C@_09EFLFAGB@truecrypt?$AA@ DB 'truecrypt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MGAEPBHO@System32?2drivers?2truecrypt?4sys?$AA@
CONST	SEGMENT
??_C@_0BP@MGAEPBHO@System32?2drivers?2truecrypt?4sys?$AA@ DB 'System32\dr'
	DB	'ivers\truecrypt.sys', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ECEMIBMM@INSTALLING_DRIVER?$AA@
CONST	SEGMENT
??_C@_0BC@ECEMIBMM@INSTALLING_DRIVER?$AA@ DB 'INSTALLING_DRIVER', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _DoDriverInstall
_TEXT	SEGMENT
_bOK$ = -4						; size = 4
_hwndDlg$ = 8						; size = 4
_DoDriverInstall PROC					; COMDAT

; 2987 : {

  00000	51		 push	 ecx
  00001	56		 push	 esi

; 2988 : #ifdef SETUP
; 2989 : 	if (SystemEncryptionUpdate)

  00002	33 f6		 xor	 esi, esi
  00004	39 35 00 00 00
	00		 cmp	 DWORD PTR _SystemEncryptionUpdate, esi
  0000a	74 06		 je	 SHORT $LN14@DoDriverIn

; 2990 : 		return TRUE;

  0000c	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0000f	5e		 pop	 esi

; 3044 : }

  00010	59		 pop	 ecx
  00011	c3		 ret	 0
$LN14@DoDriverIn:
  00012	53		 push	 ebx
  00013	55		 push	 ebp
  00014	57		 push	 edi

; 2991 : #endif
; 2992 : 
; 2993 : 	SC_HANDLE hManager, hService = NULL;
; 2994 : 	BOOL bOK = FALSE, bRet;
; 2995 : 
; 2996 : 	hManager = OpenSCManager (NULL, NULL, SC_MANAGER_ALL_ACCESS);

  00015	68 3f 00 0f 00	 push	 983103			; 000f003fH
  0001a	56		 push	 esi
  0001b	56		 push	 esi
  0001c	89 74 24 1c	 mov	 DWORD PTR _bOK$[esp+32], esi
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenSCManagerA@12

; 2997 : 	if (hManager == NULL)

  00026	8b 5c 24 18	 mov	 ebx, DWORD PTR _hwndDlg$[esp+16]
  0002a	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__CloseServiceHandle@4
  00030	8b f8		 mov	 edi, eax
  00032	3b fe		 cmp	 edi, esi
  00034	74 76		 je	 SHORT $LN17@DoDriverIn

; 2998 : 		goto error;
; 2999 : 
; 3000 : #ifdef SETUP
; 3001 : 	StatusMessage (hwndDlg, "INSTALLING_DRIVER");

  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@ECEMIBMM@INSTALLING_DRIVER?$AA@
  0003b	53		 push	 ebx
  0003c	e8 00 00 00 00	 call	 _StatusMessage
  00041	83 c4 08	 add	 esp, 8

; 3002 : #endif
; 3003 : 
; 3004 : 	hService = CreateService (hManager, "truecrypt", "truecrypt",
; 3005 : 		SERVICE_ALL_ACCESS, SERVICE_KERNEL_DRIVER, SERVICE_SYSTEM_START, SERVICE_ERROR_NORMAL,
; 3006 : 		"System32\\drivers\\truecrypt.sys",
; 3007 : 		NULL, NULL, NULL, NULL, NULL);

  00044	6a 00		 push	 0
  00046	6a 00		 push	 0
  00048	6a 00		 push	 0
  0004a	6a 00		 push	 0
  0004c	6a 00		 push	 0
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MGAEPBHO@System32?2drivers?2truecrypt?4sys?$AA@
  00053	6a 01		 push	 1
  00055	6a 01		 push	 1
  00057	6a 01		 push	 1
  00059	68 ff 01 0f 00	 push	 983551			; 000f01ffH
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_09EFLFAGB@truecrypt?$AA@
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_09EFLFAGB@truecrypt?$AA@
  00068	57		 push	 edi
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateServiceA@52
  0006f	8b f0		 mov	 esi, eax

; 3008 : 
; 3009 : 	if (hService == NULL)

  00071	85 f6		 test	 esi, esi
  00073	74 37		 je	 SHORT $LN17@DoDriverIn

; 3010 : 		goto error;
; 3011 : 	else
; 3012 : 		CloseServiceHandle (hService);

  00075	56		 push	 esi
  00076	ff d5		 call	 ebp

; 3013 : 
; 3014 : 	hService = OpenService (hManager, "truecrypt", SERVICE_ALL_ACCESS);

  00078	68 ff 01 0f 00	 push	 983551			; 000f01ffH
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_09EFLFAGB@truecrypt?$AA@
  00082	57		 push	 edi
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenServiceA@12
  00089	8b f0		 mov	 esi, eax

; 3015 : 	if (hService == NULL)

  0008b	85 f6		 test	 esi, esi
  0008d	74 1d		 je	 SHORT $LN17@DoDriverIn

; 3016 : 		goto error;
; 3017 : 
; 3018 : #ifdef SETUP
; 3019 : 	StatusMessage (hwndDlg, "STARTING_DRIVER");

  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NDPFMBFD@STARTING_DRIVER?$AA@
  00094	53		 push	 ebx
  00095	e8 00 00 00 00	 call	 _StatusMessage
  0009a	83 c4 08	 add	 esp, 8

; 3020 : #endif
; 3021 : 
; 3022 : 	bRet = StartService (hService, 0, NULL);

  0009d	6a 00		 push	 0
  0009f	6a 00		 push	 0
  000a1	56		 push	 esi
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__StartServiceA@12

; 3023 : 	if (bRet == FALSE)

  000a8	85 c0		 test	 eax, eax

; 3024 : 		goto error;
; 3025 : 
; 3026 : 	bOK = TRUE;
; 3027 : 
; 3028 : error:
; 3029 : 	if (bOK == FALSE && GetLastError () != ERROR_SERVICE_ALREADY_RUNNING)

  000aa	75 39		 jne	 SHORT $LN4@DoDriverIn
$LN17@DoDriverIn:
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000b2	3d 20 04 00 00	 cmp	 eax, 1056		; 00000420H
  000b7	74 2c		 je	 SHORT $LN4@DoDriverIn

; 3030 : 	{
; 3031 : 		handleWin32Error (hwndDlg);

  000b9	53		 push	 ebx
  000ba	e8 00 00 00 00	 call	 _handleWin32Error

; 3032 : 		MessageBoxW (hwndDlg, GetString ("DRIVER_INSTALL_FAILED"), lpszTitle, MB_ICONHAND);

  000bf	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  000c4	83 c4 04	 add	 esp, 4
  000c7	6a 10		 push	 16			; 00000010H
  000c9	50		 push	 eax
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NAJKGDG@DRIVER_INSTALL_FAILED?$AA@
  000cf	e8 00 00 00 00	 call	 _GetString
  000d4	83 c4 04	 add	 esp, 4
  000d7	50		 push	 eax
  000d8	53		 push	 ebx
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 3033 : 	}
; 3034 : 	else

  000df	8b 5c 24 10	 mov	 ebx, DWORD PTR _bOK$[esp+20]
  000e3	eb 05		 jmp	 SHORT $LN3@DoDriverIn
$LN4@DoDriverIn:

; 3035 : 		bOK = TRUE;

  000e5	bb 01 00 00 00	 mov	 ebx, 1
$LN3@DoDriverIn:

; 3036 : 
; 3037 : 	if (hService != NULL)

  000ea	85 f6		 test	 esi, esi
  000ec	74 03		 je	 SHORT $LN2@DoDriverIn

; 3038 : 		CloseServiceHandle (hService);

  000ee	56		 push	 esi
  000ef	ff d5		 call	 ebp
$LN2@DoDriverIn:

; 3039 : 
; 3040 : 	if (hManager != NULL)

  000f1	85 ff		 test	 edi, edi
  000f3	74 03		 je	 SHORT $LN1@DoDriverIn

; 3041 : 		CloseServiceHandle (hManager);

  000f5	57		 push	 edi
  000f6	ff d5		 call	 ebp
$LN1@DoDriverIn:
  000f8	5f		 pop	 edi
  000f9	5d		 pop	 ebp

; 3042 : 
; 3043 : 	return bOK;

  000fa	8b c3		 mov	 eax, ebx
  000fc	5b		 pop	 ebx
  000fd	5e		 pop	 esi

; 3044 : }

  000fe	59		 pop	 ecx
  000ff	c3		 ret	 0
_DoDriverInstall ENDP
_TEXT	ENDS
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
PUBLIC	_SelectMultipleFilesNext
EXTRN	_strncpy:PROC
_BSS	SEGMENT
_SelectMultipleFilesPath DB 020000H DUP (?)
_SelectMultipleFilesOffset DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _SelectMultipleFilesNext
_TEXT	SEGMENT
_lpszFileName$ = 8					; size = 4
_SelectMultipleFilesNext PROC				; COMDAT

; 3523 : 	if (SelectMultipleFilesOffset == 0)

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SelectMultipleFilesOffset, 0
  00007	75 03		 jne	 SHORT $LN3@SelectMult

; 3524 : 		return FALSE;

  00009	33 c0		 xor	 eax, eax

; 3539 : }

  0000b	c3		 ret	 0
$LN3@SelectMult:
  0000c	53		 push	 ebx
  0000d	55		 push	 ebp

; 3525 : 
; 3526 : 	strncpy (lpszFileName, SelectMultipleFilesPath, TC_MAX_PATH);

  0000e	8b 6c 24 0c	 mov	 ebp, DWORD PTR _lpszFileName$[esp+4]
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	68 04 01 00 00	 push	 260			; 00000104H
  00019	68 00 00 00 00	 push	 OFFSET _SelectMultipleFilesPath
  0001e	55		 push	 ebp
  0001f	e8 00 00 00 00	 call	 _strncpy

; 3527 : 	lpszFileName[TC_MAX_PATH - 1] = 0;
; 3528 : 
; 3529 : 	if (lpszFileName[strlen (lpszFileName) - 1] != '\\')

  00024	8b c5		 mov	 eax, ebp
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	c6 85 03 01 00
	00 00		 mov	 BYTE PTR [ebp+259], 0
  00030	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL6@SelectMult:
  00033	8a 08		 mov	 cl, BYTE PTR [eax]
  00035	40		 inc	 eax
  00036	84 c9		 test	 cl, cl
  00038	75 f9		 jne	 SHORT $LL6@SelectMult
  0003a	2b c2		 sub	 eax, edx
  0003c	80 7c 28 ff 5c	 cmp	 BYTE PTR [eax+ebp-1], 92 ; 0000005cH
  00041	74 14		 je	 SHORT $LN2@SelectMult

; 3530 : 		strcat (lpszFileName, "\\");

  00043	8b fd		 mov	 edi, ebp
  00045	4f		 dec	 edi
$LL7@SelectMult:
  00046	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00049	47		 inc	 edi
  0004a	84 c0		 test	 al, al
  0004c	75 f8		 jne	 SHORT $LL7@SelectMult
  0004e	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
  00054	66 89 07	 mov	 WORD PTR [edi], ax
$LN2@SelectMult:

; 3531 : 
; 3532 : 	strcat (lpszFileName, SelectMultipleFilesPath + SelectMultipleFilesOffset);

  00057	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR _SelectMultipleFilesOffset
  0005d	8d 9b 00 00 00
	00		 lea	 ebx, DWORD PTR _SelectMultipleFilesPath[ebx]
  00063	8b cb		 mov	 ecx, ebx
  00065	8b d3		 mov	 edx, ebx
$LL8@SelectMult:
  00067	8a 01		 mov	 al, BYTE PTR [ecx]
  00069	41		 inc	 ecx
  0006a	84 c0		 test	 al, al
  0006c	75 f9		 jne	 SHORT $LL8@SelectMult
  0006e	2b ca		 sub	 ecx, edx
  00070	4d		 dec	 ebp
  00071	8b f2		 mov	 esi, edx
  00073	8b d1		 mov	 edx, ecx
  00075	8b fd		 mov	 edi, ebp
$LL9@SelectMult:
  00077	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  0007a	47		 inc	 edi
  0007b	84 c9		 test	 cl, cl
  0007d	75 f8		 jne	 SHORT $LL9@SelectMult
  0007f	8b ca		 mov	 ecx, edx
  00081	c1 e9 02	 shr	 ecx, 2
  00084	f3 a5		 rep movsd
  00086	8b ca		 mov	 ecx, edx
  00088	83 e1 03	 and	 ecx, 3
  0008b	f3 a4		 rep movsb
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi

; 3533 : 
; 3534 : 	SelectMultipleFilesOffset += strlen (SelectMultipleFilesPath + SelectMultipleFilesOffset) + 1;

  0008f	8b c3		 mov	 eax, ebx
  00091	5d		 pop	 ebp
  00092	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00095	5b		 pop	 ebx
$LL10@SelectMult:
  00096	8a 08		 mov	 cl, BYTE PTR [eax]
  00098	40		 inc	 eax
  00099	84 c9		 test	 cl, cl
  0009b	75 f9		 jne	 SHORT $LL10@SelectMult
  0009d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SelectMultipleFilesOffset
  000a3	2b c2		 sub	 eax, edx
  000a5	8d 44 01 01	 lea	 eax, DWORD PTR [ecx+eax+1]

; 3535 : 	if (SelectMultipleFilesPath[SelectMultipleFilesOffset] == 0)

  000a9	80 b8 00 00 00
	00 00		 cmp	 BYTE PTR _SelectMultipleFilesPath[eax], 0
  000b0	a3 00 00 00 00	 mov	 DWORD PTR _SelectMultipleFilesOffset, eax
  000b5	75 0a		 jne	 SHORT $LN1@SelectMult

; 3536 : 		SelectMultipleFilesOffset = 0;

  000b7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _SelectMultipleFilesOffset, 0
$LN1@SelectMult:

; 3537 : 
; 3538 : 	return TRUE;

  000c1	b8 01 00 00 00	 mov	 eax, 1

; 3539 : }

  000c6	c3		 ret	 0
_SelectMultipleFilesNext ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp__SHGetPathFromIDListA@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT _BrowseCallbackProc@16
_TEXT	SEGMENT
_szDir$141428 = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_lp$ = 16						; size = 4
_pData$ = 20						; size = 4
_BrowseCallbackProc@16 PROC				; COMDAT

; 3543 : {

  00000	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 04 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+264], eax

; 3544 : 	switch(uMsg) {

  00014	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR _uMsg$[esp+260]
  0001b	83 e8 01	 sub	 eax, 1
  0001e	8b 8c 24 14 01
	00 00		 mov	 ecx, DWORD PTR _lp$[esp+260]
  00025	56		 push	 esi
  00026	8b b4 24 10 01
	00 00		 mov	 esi, DWORD PTR _hwnd$[esp+264]
  0002d	74 23		 je	 SHORT $LN4@BrowseCall
  0002f	83 e8 01	 sub	 eax, 1
  00032	75 34		 jne	 SHORT $LN10@BrowseCall

; 3550 : 	   break;
; 3551 : 	}
; 3552 : 
; 3553 : 	case BFFM_SELCHANGED: 
; 3554 : 	{
; 3555 : 		char szDir[TC_MAX_PATH];
; 3556 : 
; 3557 : 	   /* Set the status window to the currently selected path. */
; 3558 : 	   if (SHGetPathFromIDList((LPITEMIDLIST) lp ,szDir)) 

  00034	8d 44 24 04	 lea	 eax, DWORD PTR _szDir$141428[esp+268]
  00038	50		 push	 eax
  00039	51		 push	 ecx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetPathFromIDListA@8
  00040	85 c0		 test	 eax, eax
  00042	74 24		 je	 SHORT $LN10@BrowseCall

; 3559 : 	   {
; 3560 : 		  SendMessage (hwnd,BFFM_SETSTATUSTEXT,0,(LPARAM)szDir);

  00044	8d 4c 24 04	 lea	 ecx, DWORD PTR _szDir$141428[esp+268]
  00048	51		 push	 ecx
  00049	6a 00		 push	 0
  0004b	68 64 04 00 00	 push	 1124			; 00000464H

; 3561 : 	   }
; 3562 : 	   break;

  00050	eb 0f		 jmp	 SHORT $LN11@BrowseCall
$LN4@BrowseCall:

; 3545 : 	case BFFM_INITIALIZED: 
; 3546 : 	{
; 3547 : 	  /* WParam is TRUE since we are passing a path.
; 3548 : 	   It would be FALSE if we were passing a pidl. */
; 3549 : 	   SendMessage (hwnd,BFFM_SETSELECTION,TRUE,(LPARAM)pData);

  00052	8b 94 24 1c 01
	00 00		 mov	 edx, DWORD PTR _pData$[esp+264]
  00059	52		 push	 edx
  0005a	6a 01		 push	 1
  0005c	68 66 04 00 00	 push	 1126			; 00000466H
$LN11@BrowseCall:
  00061	56		 push	 esi
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$LN10@BrowseCall:

; 3563 : 	}
; 3564 : 
; 3565 : 	default:
; 3566 : 	   break;
; 3567 : 	}
; 3568 : 
; 3569 : 	return 0;
; 3570 : }

  00068	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+268]
  0006f	5e		 pop	 esi
  00070	33 cc		 xor	 ecx, esp
  00072	33 c0		 xor	 eax, eax
  00074	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00079	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  0007f	c2 10 00	 ret	 16			; 00000010H
_BrowseCallbackProc@16 ENDP
_TEXT	ENDS
PUBLIC	_BrowseDirectories
EXTRN	__imp__CoUninitialize@0:PROC
EXTRN	__imp__SHBrowseForFolderW@4:PROC
EXTRN	__imp__SHGetMalloc@4:PROC
EXTRN	__imp__CoInitialize@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _BrowseDirectories
_TEXT	SEGMENT
_pMalloc$ = -36						; size = 4
_bi$ = -32						; size = 32
_hwndDlg$ = 8						; size = 4
_lpszTitle$ = 12					; size = 4
_dirName$ = 16						; size = 4
_BrowseDirectories PROC					; COMDAT

; 3574 : {

  00000	83 ec 24	 sub	 esp, 36			; 00000024H
  00003	53		 push	 ebx

; 3575 : 	BROWSEINFOW bi;
; 3576 : 	LPITEMIDLIST pidl;
; 3577 : 	LPMALLOC pMalloc;
; 3578 : 	BOOL bOK  = FALSE;

  00004	33 db		 xor	 ebx, ebx

; 3579 : 
; 3580 : 	CoInitialize (NULL);

  00006	53		 push	 ebx
  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoInitialize@4

; 3581 : 
; 3582 : 	if (SUCCEEDED (SHGetMalloc (&pMalloc))) 

  0000d	8d 44 24 04	 lea	 eax, DWORD PTR _pMalloc$[esp+40]
  00011	50		 push	 eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetMalloc@4
  00018	85 c0		 test	 eax, eax
  0001a	0f 8c 9a 00 00
	00		 jl	 $LN2@BrowseDire

; 3583 : 	{
; 3584 : 		ZeroMemory (&bi, sizeof(bi));
; 3585 : 		bi.hwndOwner = hwndDlg;
; 3586 : 		bi.pszDisplayName = 0;
; 3587 : 		bi.lpszTitle = GetString (lpszTitle);

  00020	8b 54 24 30	 mov	 edx, DWORD PTR _lpszTitle$[esp+36]
  00024	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hwndDlg$[esp+36]
  00028	33 c0		 xor	 eax, eax
  0002a	56		 push	 esi
  0002b	57		 push	 edi
  0002c	89 44 24 10	 mov	 DWORD PTR _bi$[esp+48], eax
  00030	89 44 24 18	 mov	 DWORD PTR _bi$[esp+56], eax
  00034	52		 push	 edx
  00035	89 44 24 18	 mov	 DWORD PTR _bi$[esp+56], eax
  00039	89 44 24 20	 mov	 DWORD PTR _bi$[esp+64], eax
  0003d	89 44 24 24	 mov	 DWORD PTR _bi$[esp+68], eax
  00041	89 44 24 28	 mov	 DWORD PTR _bi$[esp+72], eax
  00045	89 44 24 2c	 mov	 DWORD PTR _bi$[esp+76], eax
  00049	89 44 24 30	 mov	 DWORD PTR _bi$[esp+80], eax
  0004d	89 4c 24 14	 mov	 DWORD PTR _bi$[esp+52], ecx
  00051	89 5c 24 1c	 mov	 DWORD PTR _bi$[esp+60], ebx
  00055	e8 00 00 00 00	 call	 _GetString

; 3588 : 		bi.pidlRoot = 0;
; 3589 : 		bi.ulFlags = BIF_RETURNONLYFSDIRS | BIF_STATUSTEXT;
; 3590 : 		bi.lpfn = BrowseCallbackProc;
; 3591 : 		bi.lParam = (LPARAM)dirName;

  0005a	8b 7c 24 40	 mov	 edi, DWORD PTR _dirName$[esp+48]
  0005e	89 44 24 20	 mov	 DWORD PTR _bi$[esp+64], eax
  00062	83 c4 04	 add	 esp, 4

; 3592 : 
; 3593 : 		pidl = SHBrowseForFolderW (&bi);

  00065	8d 44 24 10	 lea	 eax, DWORD PTR _bi$[esp+48]
  00069	50		 push	 eax
  0006a	89 5c 24 18	 mov	 DWORD PTR _bi$[esp+56], ebx
  0006e	c7 44 24 24 05
	00 00 00	 mov	 DWORD PTR _bi$[esp+68], 5
  00076	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR _bi$[esp+72], OFFSET _BrowseCallbackProc@16
  0007e	89 7c 24 2c	 mov	 DWORD PTR _bi$[esp+76], edi
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHBrowseForFolderW@4
  00088	8b f0		 mov	 esi, eax

; 3594 : 		if (pidl != NULL) 

  0008a	3b f3		 cmp	 esi, ebx
  0008c	74 2a		 je	 SHORT $LN6@BrowseDire

; 3595 : 		{
; 3596 : 			if (SHGetPathFromIDList(pidl, dirName)) 

  0008e	57		 push	 edi
  0008f	56		 push	 esi
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetPathFromIDListA@8
  00096	85 c0		 test	 eax, eax
  00098	74 05		 je	 SHORT $LN1@BrowseDire

; 3597 : 			{
; 3598 : 				bOK = TRUE;

  0009a	bb 01 00 00 00	 mov	 ebx, 1
$LN1@BrowseDire:

; 3599 : 			}
; 3600 : 
; 3601 : 			pMalloc->Free (pidl);

  0009f	8b 44 24 0c	 mov	 eax, DWORD PTR _pMalloc$[esp+48]
  000a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a5	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000a8	56		 push	 esi
  000a9	50		 push	 eax
  000aa	ff d2		 call	 edx

; 3602 : 			pMalloc->Release();

  000ac	8b 44 24 0c	 mov	 eax, DWORD PTR _pMalloc$[esp+48]
  000b0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b2	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000b5	50		 push	 eax
  000b6	ff d2		 call	 edx
$LN6@BrowseDire:
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
$LN2@BrowseDire:

; 3603 : 		}
; 3604 : 	}
; 3605 : 
; 3606 : 	CoUninitialize();

  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoUninitialize@0

; 3607 : 
; 3608 : 	return bOK;

  000c0	8b c3		 mov	 eax, ebx
  000c2	5b		 pop	 ebx

; 3609 : }

  000c3	83 c4 24	 add	 esp, 36			; 00000024H
  000c6	c3		 ret	 0
_BrowseDirectories ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@BADKJOBO@CANNOT_WRITE_FILE_X?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_CheckFileStreamWriteErrors
EXTRN	_ErrorDirect:PROC
EXTRN	_swprintf_s:PROC
EXTRN	_ferror:PROC
;	COMDAT ??_C@_0BE@BADKJOBO@CANNOT_WRITE_FILE_X?$AA@
CONST	SEGMENT
??_C@_0BE@BADKJOBO@CANNOT_WRITE_FILE_X?$AA@ DB 'CANNOT_WRITE_FILE_X', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _CheckFileStreamWriteErrors
_TEXT	SEGMENT
_s$141452 = -524					; size = 520
__$ArrayPad$ = -4					; size = 4
_file$ = 8						; size = 4
_fileName$ = 12						; size = 4
_CheckFileStreamWriteErrors PROC			; COMDAT

; 3616 : {

  00000	81 ec 0c 02 00
	00		 sub	 esp, 524		; 0000020cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 08 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+524], eax
  00014	8b 84 24 10 02
	00 00		 mov	 eax, DWORD PTR _file$[esp+520]
  0001b	56		 push	 esi
  0001c	8b b4 24 18 02
	00 00		 mov	 esi, DWORD PTR _fileName$[esp+524]

; 3617 : 	if (ferror (file))

  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _ferror
  00029	83 c4 04	 add	 esp, 4
  0002c	85 c0		 test	 eax, eax
  0002e	74 43		 je	 SHORT $LN1@CheckFileS

; 3618 : 	{
; 3619 : 		wchar_t s[TC_MAX_PATH];
; 3620 : 		swprintf_s (s, ARRAYSIZE (s), GetString ("CANNOT_WRITE_FILE_X"), fileName);

  00030	56		 push	 esi
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BADKJOBO@CANNOT_WRITE_FILE_X?$AA@
  00036	e8 00 00 00 00	 call	 _GetString
  0003b	83 c4 04	 add	 esp, 4
  0003e	50		 push	 eax
  0003f	8d 44 24 0c	 lea	 eax, DWORD PTR _s$141452[esp+536]
  00043	68 04 01 00 00	 push	 260			; 00000104H
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _swprintf_s

; 3621 : 		ErrorDirect (s);

  0004e	8d 4c 24 14	 lea	 ecx, DWORD PTR _s$141452[esp+544]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 _ErrorDirect
  00058	83 c4 14	 add	 esp, 20			; 00000014H

; 3622 : 
; 3623 : 		return FALSE;

  0005b	33 c0		 xor	 eax, eax
  0005d	5e		 pop	 esi

; 3624 : 	}
; 3625 : 
; 3626 : 	return TRUE;
; 3627 : }

  0005e	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+524]
  00065	33 cc		 xor	 ecx, esp
  00067	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006c	81 c4 0c 02 00
	00		 add	 esp, 524		; 0000020cH
  00072	c3		 ret	 0
$LN1@CheckFileS:
  00073	8b 8c 24 0c 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+528]
  0007a	5e		 pop	 esi
  0007b	33 cc		 xor	 ecx, esp
  0007d	b8 01 00 00 00	 mov	 eax, 1
  00082	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00087	81 c4 0c 02 00
	00		 add	 esp, 524		; 0000020cH
  0008d	c3		 ret	 0
_CheckFileStreamWriteErrors ENDP
_TEXT	ENDS
PUBLIC	??_C@_06KJMEDNIB@Static?$AA@			; `string'
PUBLIC	??_C@_06LKBCGDFD@Button?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp__SetWindowTextW@8:PROC
EXTRN	_GetDictionaryValueByInt:PROC
EXTRN	__stricmp:PROC
EXTRN	__imp__GetClassNameA@12:PROC
EXTRN	__imp__GetDlgCtrlID@4:PROC
EXTRN	_LocalizationActive:DWORD
;	COMDAT ??_C@_06KJMEDNIB@Static?$AA@
CONST	SEGMENT
??_C@_06KJMEDNIB@Static?$AA@ DB 'Static', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LKBCGDFD@Button?$AA@
CONST	SEGMENT
??_C@_06LKBCGDFD@Button?$AA@ DB 'Button', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?LocalizeDialogEnum@@YGHPAUHWND__@@J@Z
_TEXT	SEGMENT
_name$141466 = -16					; size = 10
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_font$ = 12						; size = 4
?LocalizeDialogEnum@@YGHPAUHWND__@@J@Z PROC		; LocalizeDialogEnum, COMDAT

; 3631 : {

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 0c	 mov	 DWORD PTR __$ArrayPad$[esp+16], eax

; 3632 : 	// Localization of controls
; 3633 : 
; 3634 : 	if (LocalizationActive)

  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _LocalizationActive, 0
  00015	56		 push	 esi
  00016	8b 74 24 18	 mov	 esi, DWORD PTR _hwnd$[esp+16]
  0001a	74 71		 je	 SHORT $LN1@LocalizeDi
  0001c	57		 push	 edi

; 3635 : 	{
; 3636 : 		int ctrlId = GetDlgCtrlID (hwnd);

  0001d	56		 push	 esi
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgCtrlID@4
  00024	8b f8		 mov	 edi, eax

; 3637 : 		if (ctrlId != 0)

  00026	85 ff		 test	 edi, edi
  00028	74 62		 je	 SHORT $LN8@LocalizeDi

; 3638 : 		{
; 3639 : 			char name[10] = { 0 };

  0002a	33 c0		 xor	 eax, eax
  0002c	89 44 24 09	 mov	 DWORD PTR _name$141466[esp+25], eax
  00030	89 44 24 0d	 mov	 DWORD PTR _name$141466[esp+29], eax
  00034	88 44 24 11	 mov	 BYTE PTR _name$141466[esp+33], al

; 3640 : 			GetClassName (hwnd, name, sizeof (name));

  00038	6a 0a		 push	 10			; 0000000aH
  0003a	8d 44 24 0c	 lea	 eax, DWORD PTR _name$141466[esp+28]
  0003e	50		 push	 eax
  0003f	56		 push	 esi
  00040	c6 44 24 14 00	 mov	 BYTE PTR _name$141466[esp+36], 0
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClassNameA@12

; 3641 : 
; 3642 : 			if (_stricmp (name, "Button") == 0 || _stricmp (name, "Static") == 0)

  0004b	8d 4c 24 08	 lea	 ecx, DWORD PTR _name$141466[esp+24]
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_06LKBCGDFD@Button?$AA@
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 __stricmp
  0005a	83 c4 08	 add	 esp, 8
  0005d	85 c0		 test	 eax, eax
  0005f	74 16		 je	 SHORT $LN2@LocalizeDi
  00061	8d 54 24 08	 lea	 edx, DWORD PTR _name$141466[esp+24]
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_06KJMEDNIB@Static?$AA@
  0006a	52		 push	 edx
  0006b	e8 00 00 00 00	 call	 __stricmp
  00070	83 c4 08	 add	 esp, 8
  00073	85 c0		 test	 eax, eax
  00075	75 15		 jne	 SHORT $LN8@LocalizeDi
$LN2@LocalizeDi:

; 3643 : 			{
; 3644 : 				wchar_t *str = (wchar_t *) GetDictionaryValueByInt (ctrlId);

  00077	57		 push	 edi
  00078	e8 00 00 00 00	 call	 _GetDictionaryValueByInt
  0007d	83 c4 04	 add	 esp, 4

; 3645 : 				if (str != NULL)

  00080	85 c0		 test	 eax, eax
  00082	74 08		 je	 SHORT $LN8@LocalizeDi

; 3646 : 					SetWindowTextW (hwnd, str);

  00084	50		 push	 eax
  00085	56		 push	 esi
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
$LN8@LocalizeDi:
  0008c	5f		 pop	 edi
$LN1@LocalizeDi:

; 3647 : 			}
; 3648 : 		}
; 3649 : 	}
; 3650 : 
; 3651 : 	// Font
; 3652 : 	SendMessage (hwnd, WM_SETFONT, (WPARAM) font, 0);

  0008d	8b 44 24 1c	 mov	 eax, DWORD PTR _font$[esp+16]
  00091	6a 00		 push	 0
  00093	50		 push	 eax
  00094	6a 30		 push	 48			; 00000030H
  00096	56		 push	 esi
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3653 : 	
; 3654 : 	return TRUE;
; 3655 : }

  0009d	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  000a1	5e		 pop	 esi
  000a2	33 cc		 xor	 ecx, esp
  000a4	b8 01 00 00 00	 mov	 eax, 1
  000a9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ae	83 c4 10	 add	 esp, 16			; 00000010H
  000b1	c2 08 00	 ret	 8
?LocalizeDialogEnum@@YGHPAUHWND__@@J@Z ENDP		; LocalizeDialogEnum
_TEXT	ENDS
PUBLIC	??_C@_1BG@INDNNNCG@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?$AA@ ; `string'
PUBLIC	_LocalizeDialog
EXTRN	__imp__EnumChildWindows@12:PROC
;	COMDAT ??_C@_1BG@INDNNNCG@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@INDNNNCG@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?$AA@ DB 'C'
	DB	00H, 'i', 00H, 'p', 00H, 'h', 00H, 'e', 00H, 'r', 00H, 'S', 00H
	DB	'h', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _LocalizeDialog
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_stringId$ = 12						; size = 4
_LocalizeDialog PROC					; COMDAT

; 3658 : {

  00000	56		 push	 esi

; 3659 : 	LastDialogId = stringId;
; 3660 : 
; 3661 : 	/* Modifying 'TRUE' can introduce incompatibility with previous versions. */
; 3662 : 	SetWindowLongPtr (hwnd, GWLP_USERDATA, (LONG_PTR) 'TRUE');

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _hwnd$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR _stringId$[esp+4]
  0000a	68 45 55 52 54	 push	 1414681925		; 54525545H
  0000f	6a eb		 push	 -21			; ffffffebH
  00011	56		 push	 esi
  00012	89 3d 00 00 00
	00		 mov	 DWORD PTR _LastDialogId, edi
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12

; 3663 : 	SendMessage (hwnd, WM_SETFONT, (WPARAM) hUserFont, 0);

  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserFont
  00023	6a 00		 push	 0
  00025	50		 push	 eax
  00026	6a 30		 push	 48			; 00000030H
  00028	56		 push	 esi
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3664 : 
; 3665 : 	if (stringId == NULL)

  0002f	85 ff		 test	 edi, edi
  00031	75 07		 jne	 SHORT $LN3@LocalizeDi@2

; 3666 : 		SetWindowTextW(hwnd, L"CipherShed");

  00033	68 00 00 00 00	 push	 OFFSET ??_C@_1BG@INDNNNCG@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?$AA@

; 3667 : 	else

  00038	eb 0a		 jmp	 SHORT $LN6@LocalizeDi@2
$LN3@LocalizeDi@2:

; 3668 : 		SetWindowTextW (hwnd, GetString (stringId));

  0003a	57		 push	 edi
  0003b	e8 00 00 00 00	 call	 _GetString
  00040	83 c4 04	 add	 esp, 4
  00043	50		 push	 eax
$LN6@LocalizeDi@2:
  00044	56		 push	 esi
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3669 : 	
; 3670 : 	if (hUserFont != 0)

  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserFont
  00050	85 c0		 test	 eax, eax
  00052	74 0d		 je	 SHORT $LN1@LocalizeDi@2

; 3671 : 		EnumChildWindows (hwnd, LocalizeDialogEnum, (LPARAM) hUserFont);

  00054	50		 push	 eax
  00055	68 00 00 00 00	 push	 OFFSET ?LocalizeDialogEnum@@YGHPAUHWND__@@J@Z ; LocalizeDialogEnum
  0005a	56		 push	 esi
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumChildWindows@12
$LN1@LocalizeDi@2:
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi

; 3672 : }

  00063	c3		 ret	 0
_LocalizeDialog ENDP
_TEXT	ENDS
PUBLIC	??_C@_04PMOCAHAA@open?$AA@			; `string'
PUBLIC	??_C@_04CGJNICGF@?$CFc?3?2?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_OpenVolumeExplorerWindow
EXTRN	__imp__ShellExecuteA@24:PROC
EXTRN	__imp__SHGetFileInfoA@20:PROC
;	COMDAT ??_C@_04PMOCAHAA@open?$AA@
CONST	SEGMENT
??_C@_04PMOCAHAA@open?$AA@ DB 'open', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CGJNICGF@?$CFc?3?2?$AA@
CONST	SEGMENT
??_C@_04CGJNICGF@?$CFc?3?2?$AA@ DB '%c:\', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _OpenVolumeExplorerWindow
_TEXT	SEGMENT
_fInfo$ = -364						; size = 352
_dosName$ = -12						; size = 5
__$ArrayPad$ = -4					; size = 4
_driveNo$ = 8						; size = 4
_OpenVolumeExplorerWindow PROC				; COMDAT

; 3675 : {

  00000	81 ec 6c 01 00
	00		 sub	 esp, 364		; 0000016cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 68 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+364], eax

; 3676 : 	char dosName[5];
; 3677 : 	SHFILEINFO fInfo;
; 3678 : 
; 3679 : 	snprintf (dosName, ARRAY_LENGTH(dosName), "%c:\\", (char) driveNo + 'A');

  00014	0f be 84 24 70
	01 00 00	 movsx	 eax, BYTE PTR _driveNo$[esp+360]
  0001c	83 c0 41	 add	 eax, 65			; 00000041H
  0001f	50		 push	 eax
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_04CGJNICGF@?$CFc?3?2?$AA@
  00025	8d 8c 24 68 01
	00 00		 lea	 ecx, DWORD PTR _dosName$[esp+372]
  0002c	6a 05		 push	 5
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 _sprintf_s
  00034	83 c4 10	 add	 esp, 16			; 00000010H

; 3680 : 
; 3681 : 	// Force explorer to discover the drive
; 3682 : 	SHGetFileInfo (dosName, 0, &fInfo, sizeof (fInfo), 0);

  00037	6a 00		 push	 0
  00039	68 60 01 00 00	 push	 352			; 00000160H
  0003e	8d 54 24 08	 lea	 edx, DWORD PTR _fInfo$[esp+372]
  00042	52		 push	 edx
  00043	6a 00		 push	 0
  00045	8d 84 24 70 01
	00 00		 lea	 eax, DWORD PTR _dosName$[esp+380]
  0004c	50		 push	 eax
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetFileInfoA@20

; 3683 : 
; 3684 : 	ShellExecute (NULL, "open", dosName, NULL, NULL, SW_SHOWNORMAL);

  00053	6a 01		 push	 1
  00055	6a 00		 push	 0
  00057	6a 00		 push	 0
  00059	8d 8c 24 6c 01
	00 00		 lea	 ecx, DWORD PTR _dosName$[esp+376]
  00060	51		 push	 ecx
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_04PMOCAHAA@open?$AA@
  00066	6a 00		 push	 0
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24

; 3685 : }

  0006e	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+364]
  00075	33 cc		 xor	 ecx, esp
  00077	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007c	81 c4 6c 01 00
	00		 add	 esp, 364		; 0000016cH
  00082	c3		 ret	 0
_OpenVolumeExplorerWindow ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp__PostMessageA@16:PROC
_BSS	SEGMENT
_explorerCloseSent DD 01H DUP (?)
_explorerTopLevelWindow DD 01H DUP (?)
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT ?CloseVolumeExplorerWindowsChildEnum@@YGHPAUHWND__@@J@Z
_TEXT	SEGMENT
_s$ = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_driveStr$ = 12						; size = 4
?CloseVolumeExplorerWindowsChildEnum@@YGHPAUHWND__@@J@Z PROC ; CloseVolumeExplorerWindowsChildEnum, COMDAT

; 3691 : {

  00000	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 04 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+264], eax
  00014	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR _hwnd$[esp+260]
  0001b	56		 push	 esi
  0001c	8b b4 24 14 01
	00 00		 mov	 esi, DWORD PTR _driveStr$[esp+264]

; 3692 : 	char s[MAX_PATH];
; 3693 : 	SendMessage (hwnd, WM_GETTEXT, sizeof (s), (LPARAM) s);

  00023	8d 4c 24 04	 lea	 ecx, DWORD PTR _s$[esp+268]
  00027	51		 push	 ecx
  00028	68 04 01 00 00	 push	 260			; 00000104H
  0002d	6a 0d		 push	 13			; 0000000dH
  0002f	50		 push	 eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3694 : 
; 3695 : 	if (strstr (s, (char *) driveStr) != NULL)

  00036	8d 54 24 04	 lea	 edx, DWORD PTR _s$[esp+268]
  0003a	56		 push	 esi
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 _strstr
  00041	83 c4 08	 add	 esp, 8
  00044	5e		 pop	 esi
  00045	85 c0		 test	 eax, eax
  00047	74 35		 je	 SHORT $LN1@CloseVolum

; 3696 : 	{
; 3697 : 		PostMessage (explorerTopLevelWindow, WM_CLOSE, 0, 0);

  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR _explorerTopLevelWindow
  0004e	6a 00		 push	 0
  00050	6a 00		 push	 0
  00052	6a 10		 push	 16			; 00000010H
  00054	50		 push	 eax
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 3698 : 		explorerCloseSent = TRUE;

  0005b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _explorerCloseSent, 1

; 3699 : 		return FALSE;

  00065	33 c0		 xor	 eax, eax

; 3700 : 	}
; 3701 : 
; 3702 : 	return TRUE;
; 3703 : }

  00067	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+264]
  0006e	33 cc		 xor	 ecx, esp
  00070	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00075	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  0007b	c2 08 00	 ret	 8
$LN1@CloseVolum:
  0007e	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+264]
  00085	33 cc		 xor	 ecx, esp
  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00091	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  00097	c2 08 00	 ret	 8
?CloseVolumeExplorerWindowsChildEnum@@YGHPAUHWND__@@J@Z ENDP ; CloseVolumeExplorerWindowsChildEnum
_TEXT	ENDS
PUBLIC	??_C@_0O@DMIKDLEM@CabinetWClass?$AA@		; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp__GetWindowTextA@12:PROC
;	COMDAT ??_C@_0O@DMIKDLEM@CabinetWClass?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string.h
CONST	SEGMENT
??_C@_0O@DMIKDLEM@CabinetWClass?$AA@ DB 'CabinetWClass', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
CONST	ENDS
;	COMDAT _CloseVolumeExplorerWindowsEnum@8
_TEXT	SEGMENT
_driveStr$ = -276					; size = 10
_s$ = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_driveNo$ = 12						; size = 4
_CloseVolumeExplorerWindowsEnum@8 PROC			; COMDAT

; 3706 : {

  00000	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 10 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+276], eax

; 3707 : 	char driveStr[10];
; 3708 : 	char s[MAX_PATH];
; 3709 : 
; 3710 : 	snprintf (driveStr, sizeof(driveStr), "%c:\\", driveNo + 'A');

  00014	8b 84 24 1c 01
	00 00		 mov	 eax, DWORD PTR _driveNo$[esp+272]
  0001b	56		 push	 esi
  0001c	8b b4 24 1c 01
	00 00		 mov	 esi, DWORD PTR _hwnd$[esp+276]
  00023	83 c0 41	 add	 eax, 65			; 00000041H
  00026	50		 push	 eax
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_04CGJNICGF@?$CFc?3?2?$AA@
  0002c	8d 4c 24 0c	 lea	 ecx, DWORD PTR _driveStr$[esp+288]
  00030	6a 0a		 push	 10			; 0000000aH
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 _sprintf_s
  00038	83 c4 10	 add	 esp, 16			; 00000010H

; 3711 : 
; 3712 : 	GetClassName (hwnd, s, sizeof s);

  0003b	68 04 01 00 00	 push	 260			; 00000104H
  00040	8d 54 24 14	 lea	 edx, DWORD PTR _s$[esp+284]
  00044	52		 push	 edx
  00045	56		 push	 esi
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClassNameA@12

; 3713 : 	if (strcmp (s, "CabinetWClass") == 0)

  0004c	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0O@DMIKDLEM@CabinetWClass?$AA@
  00051	8d 44 24 10	 lea	 eax, DWORD PTR _s$[esp+280]
$LL7@CloseVolum@2:
  00055	8a 10		 mov	 dl, BYTE PTR [eax]
  00057	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00059	75 1a		 jne	 SHORT $LN8@CloseVolum@2
  0005b	84 d2		 test	 dl, dl
  0005d	74 12		 je	 SHORT $LN9@CloseVolum@2
  0005f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00062	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00065	75 0e		 jne	 SHORT $LN8@CloseVolum@2
  00067	83 c0 02	 add	 eax, 2
  0006a	83 c1 02	 add	 ecx, 2
  0006d	84 d2		 test	 dl, dl
  0006f	75 e4		 jne	 SHORT $LL7@CloseVolum@2
$LN9@CloseVolum@2:
  00071	33 c0		 xor	 eax, eax
  00073	eb 05		 jmp	 SHORT $LN10@CloseVolum@2
$LN8@CloseVolum@2:
  00075	1b c0		 sbb	 eax, eax
  00077	83 d8 ff	 sbb	 eax, -1
$LN10@CloseVolum@2:
  0007a	85 c0		 test	 eax, eax
  0007c	75 6d		 jne	 SHORT $LN2@CloseVolum@2

; 3714 : 	{
; 3715 : 		GetWindowTextA(hwnd, s, sizeof s);

  0007e	68 04 01 00 00	 push	 260			; 00000104H
  00083	8d 44 24 14	 lea	 eax, DWORD PTR _s$[esp+284]
  00087	50		 push	 eax
  00088	56		 push	 esi
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 3716 : 		if (strstr (s, driveStr) != NULL)

  0008f	8d 4c 24 04	 lea	 ecx, DWORD PTR _driveStr$[esp+280]
  00093	51		 push	 ecx
  00094	8d 54 24 14	 lea	 edx, DWORD PTR _s$[esp+284]
  00098	52		 push	 edx
  00099	e8 00 00 00 00	 call	 _strstr
  0009e	83 c4 08	 add	 esp, 8
  000a1	85 c0		 test	 eax, eax
  000a3	74 2f		 je	 SHORT $LN1@CloseVolum@2

; 3717 : 		{
; 3718 : 			PostMessage (hwnd, WM_CLOSE, 0, 0);

  000a5	6a 00		 push	 0
  000a7	6a 00		 push	 0
  000a9	6a 10		 push	 16			; 00000010H
  000ab	56		 push	 esi
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 3719 : 			explorerCloseSent = TRUE;

  000b2	b8 01 00 00 00	 mov	 eax, 1
  000b7	a3 00 00 00 00	 mov	 DWORD PTR _explorerCloseSent, eax
  000bc	5e		 pop	 esi

; 3725 : 	}
; 3726 : 
; 3727 : 	return TRUE;
; 3728 : }

  000bd	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+276]
  000c4	33 cc		 xor	 ecx, esp
  000c6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cb	81 c4 14 01 00
	00		 add	 esp, 276		; 00000114H
  000d1	c2 08 00	 ret	 8
$LN1@CloseVolum@2:

; 3720 : 			return TRUE;
; 3721 : 		}
; 3722 : 
; 3723 : 		explorerTopLevelWindow = hwnd;
; 3724 : 		EnumChildWindows (hwnd, CloseVolumeExplorerWindowsChildEnum, (LPARAM) driveStr);

  000d4	8d 44 24 04	 lea	 eax, DWORD PTR _driveStr$[esp+280]
  000d8	50		 push	 eax
  000d9	68 00 00 00 00	 push	 OFFSET ?CloseVolumeExplorerWindowsChildEnum@@YGHPAUHWND__@@J@Z ; CloseVolumeExplorerWindowsChildEnum
  000de	56		 push	 esi
  000df	89 35 00 00 00
	00		 mov	 DWORD PTR _explorerTopLevelWindow, esi
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumChildWindows@12
$LN2@CloseVolum@2:

; 3725 : 	}
; 3726 : 
; 3727 : 	return TRUE;
; 3728 : }

  000eb	8b 8c 24 14 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+280]
  000f2	5e		 pop	 esi
  000f3	33 cc		 xor	 ecx, esp
  000f5	b8 01 00 00 00	 mov	 eax, 1
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	81 c4 14 01 00
	00		 add	 esp, 276		; 00000114H
  00105	c2 08 00	 ret	 8
_CloseVolumeExplorerWindowsEnum@8 ENDP
_TEXT	ENDS
PUBLIC	_CloseVolumeExplorerWindows
EXTRN	__imp__EnumWindows@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT _CloseVolumeExplorerWindows
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_driveNo$ = 12						; size = 4
_CloseVolumeExplorerWindows PROC			; COMDAT

; 3732 : 	if (driveNo >= 0)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _driveNo$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	7c 16		 jl	 SHORT $LN4@CloseVolum@3

; 3733 : 	{
; 3734 : 		explorerCloseSent = FALSE;
; 3735 : 		EnumWindows (CloseVolumeExplorerWindowsEnum, (LPARAM) driveNo);

  00008	50		 push	 eax
  00009	68 00 00 00 00	 push	 OFFSET _CloseVolumeExplorerWindowsEnum@8
  0000e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _explorerCloseSent, 0
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumWindows@8
$LN4@CloseVolum@3:

; 3736 : 	}
; 3737 : 
; 3738 : 	return explorerCloseSent;

  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR _explorerCloseSent

; 3739 : }

  00023	c3		 ret	 0
_CloseVolumeExplorerWindows ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BA@PMDFMIGE@?$AA?$CF?$AA?4?$AA1?$AAf?$AA?5?$AA?$CF?$AAs?$AA?$AA@ ; `string'
PUBLIC	__real@3f50000000000000
PUBLIC	??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_04ELFAHOMP@BYTE?$AA@			; `string'
PUBLIC	??_C@_02KOENCFNK@PB?$AA@			; `string'
PUBLIC	??_C@_02KJEEINAG@TB?$AA@			; `string'
PUBLIC	??_C@_02LHCEJACP@GB?$AA@			; `string'
PUBLIC	??_C@_02LKLDBFPJ@MB?$AA@			; `string'
PUBLIC	??_C@_02LODOGJEL@KB?$AA@			; `string'
PUBLIC	_GetSizeString
EXTRN	_LocalizationSerialNo:DWORD
;	COMDAT ?pb@?1??GetSizeString@@9@4PA_WA
_BSS	SEGMENT
?pb@?1??GetSizeString@@9@4PA_WA DD 01H DUP (?)		; `GetSizeString'::`2'::pb
_BSS	ENDS
;	COMDAT ?tb@?1??GetSizeString@@9@4PA_WA
_BSS	SEGMENT
?tb@?1??GetSizeString@@9@4PA_WA DD 01H DUP (?)		; `GetSizeString'::`2'::tb
_BSS	ENDS
;	COMDAT ?gb@?1??GetSizeString@@9@4PA_WA
_BSS	SEGMENT
?gb@?1??GetSizeString@@9@4PA_WA DD 01H DUP (?)		; `GetSizeString'::`2'::gb
_BSS	ENDS
;	COMDAT ?mb@?1??GetSizeString@@9@4PA_WA
_BSS	SEGMENT
?mb@?1??GetSizeString@@9@4PA_WA DD 01H DUP (?)		; `GetSizeString'::`2'::mb
_BSS	ENDS
;	COMDAT ?kb@?1??GetSizeString@@9@4PA_WA
_BSS	SEGMENT
?kb@?1??GetSizeString@@9@4PA_WA DD 01H DUP (?)		; `GetSizeString'::`2'::kb
_BSS	ENDS
;	COMDAT ?serNo@?1??GetSizeString@@9@4HA
_BSS	SEGMENT
?serNo@?1??GetSizeString@@9@4HA DD 01H DUP (?)		; `GetSizeString'::`2'::serNo
_BSS	ENDS
;	COMDAT ?b@?1??GetSizeString@@9@4PA_WA
_BSS	SEGMENT
?b@?1??GetSizeString@@9@4PA_WA DD 01H DUP (?)		; `GetSizeString'::`2'::b
_BSS	ENDS
;	COMDAT ??_C@_1BA@PMDFMIGE@?$AA?$CF?$AA?4?$AA1?$AAf?$AA?5?$AA?$CF?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@PMDFMIGE@?$AA?$CF?$AA?4?$AA1?$AAf?$AA?5?$AA?$CF?$AAs?$AA?$AA@ DB '%'
	DB	00H, '.', 00H, '1', 00H, 'f', 00H, ' ', 00H, '%', 00H, 's', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT __real@3f50000000000000
CONST	SEGMENT
__real@3f50000000000000 DQ 03f50000000000000r	; 0.000976563
CONST	ENDS
;	COMDAT ??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@ DB '%'
	DB	00H, 'I', 00H, '6', 00H, '4', 00H, 'd', 00H, ' ', 00H, '%', 00H
	DB	's', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04ELFAHOMP@BYTE?$AA@
CONST	SEGMENT
??_C@_04ELFAHOMP@BYTE?$AA@ DB 'BYTE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KOENCFNK@PB?$AA@
CONST	SEGMENT
??_C@_02KOENCFNK@PB?$AA@ DB 'PB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KJEEINAG@TB?$AA@
CONST	SEGMENT
??_C@_02KJEEINAG@TB?$AA@ DB 'TB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LHCEJACP@GB?$AA@
CONST	SEGMENT
??_C@_02LHCEJACP@GB?$AA@ DB 'GB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LKLDBFPJ@MB?$AA@
CONST	SEGMENT
??_C@_02LKLDBFPJ@MB?$AA@ DB 'MB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LODOGJEL@KB?$AA@
CONST	SEGMENT
??_C@_02LODOGJEL@KB?$AA@ DB 'KB', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _GetSizeString
_TEXT	SEGMENT
tv309 = -8						; size = 8
tv306 = -8						; size = 8
tv240 = -8						; size = 8
tv237 = -8						; size = 8
tv219 = -8						; size = 8
tv216 = -8						; size = 8
tv180 = -8						; size = 8
tv167 = -8						; size = 8
_size$ = 8						; size = 8
_str$ = 16						; size = 4
_GetSizeString PROC					; COMDAT

; 3757 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 c0	 and	 esp, -64		; ffffffc0H

; 3758 : 	static wchar_t *b, *kb, *mb, *gb, *tb, *pb;
; 3759 : 	static int serNo;
; 3760 : 
; 3761 : 	if (b == NULL || serNo != LocalizationSerialNo)

  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?b@?1??GetSizeString@@9@4PA_WA
  0000b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _LocalizationSerialNo
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	56		 push	 esi
  00015	33 f6		 xor	 esi, esi
  00017	3b c6		 cmp	 eax, esi
  00019	74 08		 je	 SHORT $LN19@GetSizeStr
  0001b	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?serNo@?1??GetSizeString@@9@4HA, ecx
  00021	74 63		 je	 SHORT $LN20@GetSizeStr
$LN19@GetSizeStr:

; 3762 : 	{
; 3763 : 		serNo = LocalizationSerialNo;
; 3764 : 		kb = GetString ("KB");

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_02LODOGJEL@KB?$AA@
  00028	89 0d 00 00 00
	00		 mov	 DWORD PTR ?serNo@?1??GetSizeString@@9@4HA, ecx
  0002e	e8 00 00 00 00	 call	 _GetString

; 3765 : 		mb = GetString ("MB");

  00033	68 00 00 00 00	 push	 OFFSET ??_C@_02LKLDBFPJ@MB?$AA@
  00038	a3 00 00 00 00	 mov	 DWORD PTR ?kb@?1??GetSizeString@@9@4PA_WA, eax
  0003d	e8 00 00 00 00	 call	 _GetString

; 3766 : 		gb = GetString ("GB");

  00042	68 00 00 00 00	 push	 OFFSET ??_C@_02LHCEJACP@GB?$AA@
  00047	a3 00 00 00 00	 mov	 DWORD PTR ?mb@?1??GetSizeString@@9@4PA_WA, eax
  0004c	e8 00 00 00 00	 call	 _GetString

; 3767 : 		tb = GetString ("TB");

  00051	68 00 00 00 00	 push	 OFFSET ??_C@_02KJEEINAG@TB?$AA@
  00056	a3 00 00 00 00	 mov	 DWORD PTR ?gb@?1??GetSizeString@@9@4PA_WA, eax
  0005b	e8 00 00 00 00	 call	 _GetString

; 3768 : 		pb = GetString ("PB");

  00060	68 00 00 00 00	 push	 OFFSET ??_C@_02KOENCFNK@PB?$AA@
  00065	a3 00 00 00 00	 mov	 DWORD PTR ?tb@?1??GetSizeString@@9@4PA_WA, eax
  0006a	e8 00 00 00 00	 call	 _GetString

; 3769 : 		b = GetString ("BYTE");

  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_04ELFAHOMP@BYTE?$AA@
  00074	a3 00 00 00 00	 mov	 DWORD PTR ?pb@?1??GetSizeString@@9@4PA_WA, eax
  00079	e8 00 00 00 00	 call	 _GetString
  0007e	83 c4 18	 add	 esp, 24			; 00000018H
  00081	a3 00 00 00 00	 mov	 DWORD PTR ?b@?1??GetSizeString@@9@4PA_WA, eax
$LN20@GetSizeStr:

; 3770 : 	}
; 3771 : 
; 3772 : 	if (size > 1024I64*1024*1024*1024*1024*99)

  00086	8b 4d 0c	 mov	 ecx, DWORD PTR _size$[ebp+4]
  00089	8b 55 08	 mov	 edx, DWORD PTR _size$[ebp]
  0008c	81 f9 00 00 8c
	01		 cmp	 ecx, 25952256		; 018c0000H
  00092	72 27		 jb	 SHORT $LN18@GetSizeStr
  00094	77 04		 ja	 SHORT $LN23@GetSizeStr
  00096	3b d6		 cmp	 edx, esi
  00098	76 21		 jbe	 SHORT $LN18@GetSizeStr
$LN23@GetSizeStr:

; 3773 : 		swprintf (str, L"%I64d %s", size/1024/1024/1024/1024/1024, pb);

  0009a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pb@?1??GetSizeString@@9@4PA_WA
  0009f	50		 push	 eax
  000a0	c1 e9 12	 shr	 ecx, 18			; 00000012H
  000a3	56		 push	 esi
  000a4	51		 push	 ecx
  000a5	8b 4d 10	 mov	 ecx, DWORD PTR _str$[ebp]
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@
  000ad	51		 push	 ecx

; 3790 : 	else
; 3791 : 		swprintf (str, L"%I64d %s", size, b);

  000ae	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf
  000b3	83 c4 14	 add	 esp, 20			; 00000014H

; 3792 : }

  000b6	5e		 pop	 esi
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
$LN18@GetSizeStr:

; 3774 : 	else if (size > 1024I64*1024*1024*1024*1024)

  000bb	81 f9 00 00 04
	00		 cmp	 ecx, 262144		; 00040000H
  000c1	72 61		 jb	 SHORT $LN16@GetSizeStr
  000c3	77 04		 ja	 SHORT $LN24@GetSizeStr
  000c5	3b d6		 cmp	 edx, esi
  000c7	76 5b		 jbe	 SHORT $LN16@GetSizeStr
$LN24@GetSizeStr:

; 3775 : 		swprintf (str, L"%.1f %s",(double)(size/1024.0/1024/1024/1024/1024), pb);

  000c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pb@?1??GetSizeString@@9@4PA_WA
  000ce	50		 push	 eax
  000cf	8b c1		 mov	 eax, ecx
  000d1	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  000d7	89 54 24 3c	 mov	 DWORD PTR tv240[esp+68], edx
  000db	89 4c 24 40	 mov	 DWORD PTR tv240[esp+72], ecx
  000df	df 6c 24 3c	 fild	 QWORD PTR tv240[esp+68]
  000e3	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  000e8	89 44 24 40	 mov	 DWORD PTR tv237[esp+72], eax
  000ec	89 74 24 3c	 mov	 DWORD PTR tv237[esp+68], esi
  000f0	df 6c 24 3c	 fild	 QWORD PTR tv237[esp+68]
  000f4	d9 e0		 fchs
  000f6	de c1		 faddp	 ST(1), ST(0)
  000f8	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3f50000000000000
  000fe	dc c9		 fmul	 ST(1), ST(0)
$LN33@GetSizeStr:
  00100	dc c9		 fmul	 ST(1), ST(0)
$LN35@GetSizeStr:
  00102	dc c9		 fmul	 ST(1), ST(0)
$LN36@GetSizeStr:
  00104	8b 4d 10	 mov	 ecx, DWORD PTR _str$[ebp]
  00107	dc c9		 fmul	 ST(1), ST(0)
  00109	83 ec 08	 sub	 esp, 8
  0010c	de c9		 fmulp	 ST(1), ST(0)
  0010e	dd 1c 24	 fstp	 QWORD PTR [esp]
  00111	68 00 00 00 00	 push	 OFFSET ??_C@_1BA@PMDFMIGE@?$AA?$CF?$AA?4?$AA1?$AAf?$AA?5?$AA?$CF?$AAs?$AA?$AA@
  00116	51		 push	 ecx

; 3790 : 	else
; 3791 : 		swprintf (str, L"%I64d %s", size, b);

  00117	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf
  0011c	83 c4 14	 add	 esp, 20			; 00000014H

; 3792 : }

  0011f	5e		 pop	 esi
  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c3		 ret	 0
$LN16@GetSizeStr:

; 3776 : 	else if (size > 1024I64*1024*1024*1024*99)

  00124	81 f9 00 63 00
	00		 cmp	 ecx, 25344		; 00006300H
  0012a	72 28		 jb	 SHORT $LN14@GetSizeStr
  0012c	77 04		 ja	 SHORT $LN25@GetSizeStr
  0012e	3b d6		 cmp	 edx, esi
  00130	76 22		 jbe	 SHORT $LN14@GetSizeStr
$LN25@GetSizeStr:

; 3777 : 		swprintf (str, L"%I64d %s",size/1024/1024/1024/1024, tb);

  00132	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?tb@?1??GetSizeString@@9@4PA_WA
  00138	8b 45 10	 mov	 eax, DWORD PTR _str$[ebp]
  0013b	52		 push	 edx
  0013c	56		 push	 esi
  0013d	c1 e9 08	 shr	 ecx, 8
  00140	51		 push	 ecx
  00141	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@
  00146	50		 push	 eax

; 3790 : 	else
; 3791 : 		swprintf (str, L"%I64d %s", size, b);

  00147	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf
  0014c	83 c4 14	 add	 esp, 20			; 00000014H

; 3792 : }

  0014f	5e		 pop	 esi
  00150	8b e5		 mov	 esp, ebp
  00152	5d		 pop	 ebp
  00153	c3		 ret	 0
$LN14@GetSizeStr:

; 3778 : 	else if (size > 1024I64*1024*1024*1024)

  00154	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  0015a	72 40		 jb	 SHORT $LN12@GetSizeStr
  0015c	77 04		 ja	 SHORT $LN26@GetSizeStr
  0015e	3b d6		 cmp	 edx, esi
  00160	76 3a		 jbe	 SHORT $LN12@GetSizeStr
$LN26@GetSizeStr:

; 3779 : 		swprintf (str, L"%.1f %s",(double)(size/1024.0/1024/1024/1024), tb);

  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tb@?1??GetSizeString@@9@4PA_WA
  00167	50		 push	 eax
  00168	8b c1		 mov	 eax, ecx
  0016a	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  00170	89 54 24 3c	 mov	 DWORD PTR tv180[esp+68], edx
  00174	89 4c 24 40	 mov	 DWORD PTR tv180[esp+72], ecx
  00178	df 6c 24 3c	 fild	 QWORD PTR tv180[esp+68]
  0017c	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00181	89 44 24 40	 mov	 DWORD PTR tv167[esp+72], eax
  00185	89 74 24 3c	 mov	 DWORD PTR tv167[esp+68], esi
  00189	df 6c 24 3c	 fild	 QWORD PTR tv167[esp+68]
  0018d	d9 e0		 fchs
  0018f	de c1		 faddp	 ST(1), ST(0)
  00191	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3f50000000000000
  00197	e9 64 ff ff ff	 jmp	 $LN33@GetSizeStr
$LN12@GetSizeStr:

; 3780 : 	else if (size > 1024I64*1024*1024*99)

  0019c	83 f9 18	 cmp	 ecx, 24			; 00000018H
  0019f	72 2f		 jb	 SHORT $LN10@GetSizeStr
  001a1	77 08		 ja	 SHORT $LN27@GetSizeStr
  001a3	81 fa 00 00 00
	c0		 cmp	 edx, -1073741824	; c0000000H
  001a9	76 25		 jbe	 SHORT $LN10@GetSizeStr
$LN27@GetSizeStr:

; 3781 : 		swprintf (str, L"%I64d %s",size/1024/1024/1024, gb);

  001ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gb@?1??GetSizeString@@9@4PA_WA
  001b0	50		 push	 eax
  001b1	0f ac ca 1e	 shrd	 edx, ecx, 30
  001b5	c1 e9 1e	 shr	 ecx, 30			; 0000001eH
  001b8	51		 push	 ecx
  001b9	8b 4d 10	 mov	 ecx, DWORD PTR _str$[ebp]
  001bc	52		 push	 edx
  001bd	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@
  001c2	51		 push	 ecx

; 3790 : 	else
; 3791 : 		swprintf (str, L"%I64d %s", size, b);

  001c3	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf
  001c8	83 c4 14	 add	 esp, 20			; 00000014H

; 3792 : }

  001cb	5e		 pop	 esi
  001cc	8b e5		 mov	 esp, ebp
  001ce	5d		 pop	 ebp
  001cf	c3		 ret	 0
$LN10@GetSizeStr:

; 3782 : 	else if (size > 1024I64*1024*1024)

  001d0	3b ce		 cmp	 ecx, esi
  001d2	77 08		 ja	 SHORT $LN28@GetSizeStr
  001d4	81 fa 00 00 00
	40		 cmp	 edx, 1073741824		; 40000000H
  001da	76 3a		 jbe	 SHORT $LN8@GetSizeStr
$LN28@GetSizeStr:

; 3783 : 		swprintf (str, L"%.1f %s",(double)(size/1024.0/1024/1024), gb);

  001dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gb@?1??GetSizeString@@9@4PA_WA
  001e1	50		 push	 eax
  001e2	8b c1		 mov	 eax, ecx
  001e4	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  001ea	89 54 24 3c	 mov	 DWORD PTR tv216[esp+68], edx
  001ee	89 4c 24 40	 mov	 DWORD PTR tv216[esp+72], ecx
  001f2	df 6c 24 3c	 fild	 QWORD PTR tv216[esp+68]
  001f6	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001fb	89 44 24 40	 mov	 DWORD PTR tv219[esp+72], eax
  001ff	89 74 24 3c	 mov	 DWORD PTR tv219[esp+68], esi
  00203	df 6c 24 3c	 fild	 QWORD PTR tv219[esp+68]
  00207	d9 e0		 fchs
  00209	de c1		 faddp	 ST(1), ST(0)
  0020b	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3f50000000000000
  00211	e9 ec fe ff ff	 jmp	 $LN35@GetSizeStr
$LN8@GetSizeStr:

; 3784 : 	else if (size > 1024I64*1024*99)

  00216	3b ce		 cmp	 ecx, esi
  00218	77 08		 ja	 SHORT $LN29@GetSizeStr
  0021a	81 fa 00 00 30
	06		 cmp	 edx, 103809024		; 06300000H
  00220	76 25		 jbe	 SHORT $LN6@GetSizeStr
$LN29@GetSizeStr:

; 3785 : 		swprintf (str, L"%I64d %s", size/1024/1024, mb);

  00222	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mb@?1??GetSizeString@@9@4PA_WA
  00227	50		 push	 eax
  00228	0f ac ca 14	 shrd	 edx, ecx, 20
  0022c	c1 e9 14	 shr	 ecx, 20			; 00000014H
  0022f	51		 push	 ecx
  00230	8b 4d 10	 mov	 ecx, DWORD PTR _str$[ebp]
  00233	52		 push	 edx
  00234	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@
  00239	51		 push	 ecx

; 3790 : 	else
; 3791 : 		swprintf (str, L"%I64d %s", size, b);

  0023a	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf
  0023f	83 c4 14	 add	 esp, 20			; 00000014H

; 3792 : }

  00242	5e		 pop	 esi
  00243	8b e5		 mov	 esp, ebp
  00245	5d		 pop	 ebp
  00246	c3		 ret	 0
$LN6@GetSizeStr:

; 3786 : 	else if (size > 1024I64*1024)

  00247	3b ce		 cmp	 ecx, esi
  00249	77 08		 ja	 SHORT $LN30@GetSizeStr
  0024b	81 fa 00 00 10
	00		 cmp	 edx, 1048576		; 00100000H
  00251	76 3a		 jbe	 SHORT $LN4@GetSizeStr
$LN30@GetSizeStr:

; 3787 : 		swprintf (str, L"%.1f %s",(double)(size/1024.0/1024), mb);

  00253	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mb@?1??GetSizeString@@9@4PA_WA
  00258	50		 push	 eax
  00259	8b c1		 mov	 eax, ecx
  0025b	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  00261	89 54 24 3c	 mov	 DWORD PTR tv306[esp+68], edx
  00265	89 4c 24 40	 mov	 DWORD PTR tv306[esp+72], ecx
  00269	df 6c 24 3c	 fild	 QWORD PTR tv306[esp+68]
  0026d	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00272	89 44 24 40	 mov	 DWORD PTR tv309[esp+72], eax
  00276	89 74 24 3c	 mov	 DWORD PTR tv309[esp+68], esi
  0027a	df 6c 24 3c	 fild	 QWORD PTR tv309[esp+68]
  0027e	d9 e0		 fchs
  00280	de c1		 faddp	 ST(1), ST(0)
  00282	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3f50000000000000
  00288	e9 77 fe ff ff	 jmp	 $LN36@GetSizeStr
$LN4@GetSizeStr:

; 3788 : 	else if (size >= 1024I64)

  0028d	3b ce		 cmp	 ecx, esi
  0028f	77 08		 ja	 SHORT $LN31@GetSizeStr
  00291	81 fa 00 04 00
	00		 cmp	 edx, 1024		; 00000400H
  00297	72 25		 jb	 SHORT $LN2@GetSizeStr
$LN31@GetSizeStr:

; 3789 : 		swprintf (str, L"%I64d %s", size/1024, kb);

  00299	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kb@?1??GetSizeString@@9@4PA_WA
  0029e	50		 push	 eax
  0029f	0f ac ca 0a	 shrd	 edx, ecx, 10
  002a3	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  002a6	51		 push	 ecx
  002a7	8b 4d 10	 mov	 ecx, DWORD PTR _str$[ebp]
  002aa	52		 push	 edx
  002ab	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@
  002b0	51		 push	 ecx

; 3790 : 	else
; 3791 : 		swprintf (str, L"%I64d %s", size, b);

  002b1	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf
  002b6	83 c4 14	 add	 esp, 20			; 00000014H

; 3792 : }

  002b9	5e		 pop	 esi
  002ba	8b e5		 mov	 esp, ebp
  002bc	5d		 pop	 ebp
  002bd	c3		 ret	 0
$LN2@GetSizeStr:

; 3790 : 	else
; 3791 : 		swprintf (str, L"%I64d %s", size, b);

  002be	50		 push	 eax
  002bf	51		 push	 ecx
  002c0	52		 push	 edx
  002c1	8b 55 10	 mov	 edx, DWORD PTR _str$[ebp]
  002c4	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@
  002c9	52		 push	 edx
  002ca	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf
  002cf	83 c4 14	 add	 esp, 20			; 00000014H

; 3792 : }

  002d2	5e		 pop	 esi
  002d3	8b e5		 mov	 esp, ebp
  002d5	5d		 pop	 ebp
  002d6	c3		 ret	 0
_GetSizeString ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@MKBGBFGO@CAPSLOCK_ON?$AA@		; `string'
PUBLIC	_CheckCapsLock
EXTRN	__imp__GetKeyState@4:PROC
;	COMDAT ??_C@_0M@MKBGBFGO@CAPSLOCK_ON?$AA@
CONST	SEGMENT
??_C@_0M@MKBGBFGO@CAPSLOCK_ON?$AA@ DB 'CAPSLOCK_ON', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _CheckCapsLock
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_quiet$ = 12						; size = 4
_CheckCapsLock PROC					; COMDAT

; 5405 : 	if ((GetKeyState(VK_CAPITAL) & 1) != 0)	

  00000	6a 14		 push	 20			; 00000014H
  00002	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyState@4
  00008	a8 01		 test	 al, 1
  0000a	74 2e		 je	 SHORT $LN2@CheckCapsL

; 5406 : 	{
; 5407 : 		if (!quiet)

  0000c	83 7c 24 08 00	 cmp	 DWORD PTR _quiet$[esp-4], 0
  00011	75 21		 jne	 SHORT $LN1@CheckCapsL

; 5408 : 		{
; 5409 : 			MessageBoxW (hwnd, GetString ("CAPSLOCK_ON"), lpszTitle, MB_ICONEXCLAMATION);

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  00018	6a 30		 push	 48			; 00000030H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MKBGBFGO@CAPSLOCK_ON?$AA@
  00020	e8 00 00 00 00	 call	 _GetString
  00025	8b 4c 24 10	 mov	 ecx, DWORD PTR _hwnd$[esp+8]
  00029	83 c4 04	 add	 esp, 4
  0002c	50		 push	 eax
  0002d	51		 push	 ecx
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN1@CheckCapsL:

; 5410 : 		}
; 5411 : 		return TRUE;

  00034	b8 01 00 00 00	 mov	 eax, 1

; 5414 : }

  00039	c3		 ret	 0
$LN2@CheckCapsL:

; 5412 : 	}
; 5413 : 	return FALSE;

  0003a	33 c0		 xor	 eax, eax

; 5414 : }

  0003c	c3		 ret	 0
_CheckCapsLock ENDP
_TEXT	ENDS
PUBLIC	_CheckFileExtension
PUBLIC	??_C@_04OOOHIFAO@?4asa?$AA@			; `string'
PUBLIC	??_C@_04LNDOKGBO@?4asp?$AA@			; `string'
PUBLIC	??_C@_05BNFEPADL@?4aspx?$AA@			; `string'
PUBLIC	??_C@_03DAKFKKAH@?4ax?$AA@			; `string'
PUBLIC	??_C@_04JLAECNCN@?4bas?$AA@			; `string'
PUBLIC	??_C@_04NEEFLLOK@?4bat?$AA@			; `string'
PUBLIC	??_C@_04GKHLBAIJ@?4bin?$AA@			; `string'
PUBLIC	??_C@_04DNKKNDNF@?4cer?$AA@			; `string'
PUBLIC	??_C@_04PICIEOBI@?4chm?$AA@			; `string'
PUBLIC	??_C@_04HILJPKAL@?4clb?$AA@			; `string'
PUBLIC	??_C@_04CPCBDHLK@?4cmd?$AA@			; `string'
PUBLIC	??_C@_04GHKFJLLC@?4cnt?$AA@			; `string'
PUBLIC	??_C@_04FFJDPJDA@?4cnv?$AA@			; `string'
PUBLIC	??_C@_04PNGHFIJN@?4com?$AA@			; `string'
PUBLIC	??_C@_04PDAGINJB@?4cpl?$AA@			; `string'
PUBLIC	??_C@_04NNKIFKME@?4cpx?$AA@			; `string'
PUBLIC	??_C@_04HCJJMBKG@?4crt?$AA@			; `string'
PUBLIC	??_C@_04JFCMPGMM@?4csh?$AA@			; `string'
PUBLIC	??_C@_04HLONOPDM@?4dll?$AA@			; `string'
PUBLIC	??_C@_04NNHIJLJN@?4drv?$AA@			; `string'
PUBLIC	??_C@_04KBABJHPM@?4dtd?$AA@			; `string'
PUBLIC	??_C@_04JLMDILM@?4exe?$AA@			; `string'
PUBLIC	??_C@_04CMLMHBEG@?4fxp?$AA@			; `string'
PUBLIC	??_C@_04JJJHJDPF@?4grp?$AA@			; `string'
PUBLIC	??_C@_04JIAFODPJ@?4h1s?$AA@			; `string'
PUBLIC	??_C@_04NHEMANNJ@?4hlp?$AA@			; `string'
PUBLIC	??_C@_04JGKANMAB@?4hta?$AA@			; `string'
PUBLIC	??_C@_04FJIHOGJP@?4ime?$AA@			; `string'
PUBLIC	??_C@_04HAOMALAF@?4inf?$AA@			; `string'
PUBLIC	??_C@_04EHFJONBB@?4ins?$AA@			; `string'
PUBLIC	??_C@_04HIIKIOPB@?4isp?$AA@			; `string'
PUBLIC	??_C@_04FGOIMLLH@?4its?$AA@			; `string'
PUBLIC	??_C@_03NPAEJMCN@?4js?$AA@			; `string'
PUBLIC	??_C@_04FNIKMHAL@?4jse?$AA@			; `string'
PUBLIC	??_C@_04FAJINOCD@?4ksh?$AA@			; `string'
PUBLIC	??_C@_04PCJMIFHK@?4lnk?$AA@			; `string'
PUBLIC	??_C@_04MGOELJON@?4mad?$AA@			; `string'
PUBLIC	??_C@_04PENCNLGP@?4maf?$AA@			; `string'
PUBLIC	??_C@_04ONMJOKCO@?4mag?$AA@			; `string'
PUBLIC	??_C@_04BHCGACKE@?4mam?$AA@			; `string'
PUBLIC	??_C@_04DMALFBGH@?4man?$AA@			; `string'
PUBLIC	??_C@_04PBFBFPPJ@?4maq?$AA@			; `string'
PUBLIC	??_C@_04NKHMAMDK@?4mar?$AA@			; `string'
PUBLIC	??_C@_04MDGHDNHL@?4mas?$AA@			; `string'
PUBLIC	??_C@_04IMCGKLLM@?4mat?$AA@			; `string'
PUBLIC	??_C@_04JFDNJKPN@?4mau?$AA@			; `string'
PUBLIC	??_C@_04LOBAMJDO@?4mav?$AA@			; `string'
PUBLIC	??_C@_04KHALPIHP@?4maw?$AA@			; `string'
PUBLIC	??_C@_04LNFIIPED@?4mda?$AA@			; `string'
PUBLIC	??_C@_04JGHFNMIA@?4mdb?$AA@			; `string'
PUBLIC	??_C@_04NJDEEKEH@?4mde?$AA@			; `string'
PUBLIC	??_C@_04IKONGJFH@?4mdt?$AA@			; `string'
PUBLIC	??_C@_04KBMADKJE@?4mdw?$AA@			; `string'
PUBLIC	??_C@_04BEGOEENJ@?4mdz?$AA@			; `string'
PUBLIC	??_C@_04JGAHFIDE@?4msc?$AA@			; `string'
PUBLIC	??_C@_04GMOILALO@?4msi?$AA@			; `string'
PUBLIC	??_C@_04PHOIBJKG@?4msp?$AA@			; `string'
PUBLIC	??_C@_04JDIENMKC@?4mst?$AA@			; `string'
PUBLIC	??_C@_04GIGFMMAM@?4mui?$AA@			; `string'
PUBLIC	??_C@_04NJAKABMG@?4nls?$AA@			; `string'
PUBLIC	??_C@_04IJBOPIFF@?4ocx?$AA@			; `string'
PUBLIC	??_C@_04HEIKDMLH@?4ops?$AA@			; `string'
PUBLIC	??_C@_04KMEOLMKH@?4pal?$AA@			; `string'
PUBLIC	??_C@_04GHBDOCMB@?4pcd?$AA@			; `string'
PUBLIC	??_C@_04FILCAFJF@?4pif?$AA@			; `string'
PUBLIC	??_C@_04EIMBEJAE@?4prf?$AA@			; `string'
PUBLIC	??_C@_04FBNKHIEF@?4prg?$AA@			; `string'
PUBLIC	??_C@_04DBPHFDOA@?4pst?$AA@			; `string'
PUBLIC	??_C@_04OCLKAFDL@?4reg?$AA@			; `string'
PUBLIC	??_C@_04EHJACPKN@?4scf?$AA@			; `string'
PUBLIC	??_C@_04GJDOPIPI@?4scr?$AA@			; `string'
PUBLIC	??_C@_04DPGEFPHO@?4sct?$AA@			; `string'
PUBLIC	??_C@_04CPKJAFEI@?4shb?$AA@			; `string'
PUBLIC	??_C@_04HMHACGFI@?4shs?$AA@			; `string'
PUBLIC	??_C@_04GBJEOPBP@?4sys?$AA@			; `string'
PUBLIC	??_C@_04LFHHJFCN@?4tlb?$AA@			; `string'
PUBLIC	??_C@_04NKPJABLD@?4tsp?$AA@			; `string'
PUBLIC	??_C@_04IFPAFBLM@?4url?$AA@			; `string'
PUBLIC	??_C@_03JJOBOFCJ@?4vb?$AA@			; `string'
PUBLIC	??_C@_04FKKBOGGL@?4vbe?$AA@			; `string'
PUBLIC	??_C@_04EGDJFDLM@?4vbs?$AA@			; `string'
PUBLIC	??_C@_09JNHDLKLO@?4vsmacros?$AA@		; `string'
PUBLIC	??_C@_04FLNNJKPL@?4vss?$AA@			; `string'
PUBLIC	??_C@_04BEJMAMDM@?4vst?$AA@			; `string'
PUBLIC	??_C@_04DPLBFPPP@?4vsw?$AA@			; `string'
PUBLIC	??_C@_03MLPKKMAO@?4ws?$AA@			; `string'
PUBLIC	??_C@_04KJKDOPMP@?4wsc?$AA@			; `string'
PUBLIC	??_C@_04NENEBLIK@?4wsf?$AA@			; `string'
PUBLIC	??_C@_04EKFHDGAE@?4wsh?$AA@			; `string'
PUBLIC	??_C@_04LOIBGJFO@?4xsd?$AA@			; `string'
PUBLIC	??_C@_04HGFIODFG@?4xsl?$AA@			; `string'
PUBLIC	??_C@_04GNGOLJF@?4386?$AA@			; `string'
PUBLIC	??_C@_04FOHEGJHC@?4acm?$AA@			; `string'
PUBLIC	??_C@_04JDOCPFPP@?4ade?$AA@			; `string'
PUBLIC	??_C@_04KEFHBDOL@?4adp?$AA@			; `string'
PUBLIC	??_C@_04DCMADPCF@?4ani?$AA@			; `string'
PUBLIC	??_C@_04LPHIBIEH@?4app?$AA@			; `string'
PUBLIC	??_C@_04JDJAHBEL@?4asd?$AA@			; `string'
PUBLIC	??_C@_04KBKGBDMJ@?4asf?$AA@			; `string'
PUBLIC	??_C@_04HFOHCMBG@?4asx?$AA@			; `string'
PUBLIC	??_C@_04HCOOIEMK@?4awx?$AA@			; `string'
PUBLIC	??_C@_04HHONFNHK@?4boo?$AA@			; `string'
PUBLIC	??_C@_04GCBFBPPI@?4bz2?$AA@			; `string'
PUBLIC	??_C@_04BCMGGOLH@?4cdf?$AA@			; `string'
PUBLIC	??_C@_06POIMOJKC@?4class?$AA@			; `string'
PUBLIC	??_C@_05GCBAOBBN@?4dhtm?$AA@			; `string'
PUBLIC	??_C@_06KKCMFIJD@?4dhtml?$AA@			; `string'
PUBLIC	??_C@_04FAMALMPP@?4dlo?$AA@			; `string'
PUBLIC	??_C@_04DIHMAKOE@?4emf?$AA@			; `string'
PUBLIC	??_C@_04MCJDOCGO@?4eml?$AA@			; `string'
PUBLIC	??_C@_04FDPPLPOO@?4flt?$AA@			; `string'
PUBLIC	??_C@_04FBLJABLH@?4fot?$AA@			; `string'
PUBLIC	??_C@_03GBOLEDH@?4gz?$AA@			; `string'
PUBLIC	??_C@_04DKBFJDAN@?4htm?$AA@			; `string'
PUBLIC	??_C@_05LHMDENIF@?4html?$AA@			; `string'
PUBLIC	??_C@_04PHHEBHMK@?4ini?$AA@			; `string'
PUBLIC	??_C@_04LCFBANHC@?4j2k?$AA@			; `string'
PUBLIC	??_C@_04EHKLDEID@?4jar?$AA@			; `string'
PUBLIC	??_C@_04GMEKPFFD@?4jff?$AA@			; `string'
PUBLIC	??_C@_04GHBGLCGO@?4jif?$AA@			; `string'
PUBLIC	??_C@_04POJMDHDM@?4jmh?$AA@			; `string'
PUBLIC	??_C@_04HLECJFKK@?4jng?$AA@			; `string'
PUBLIC	??_C@_04KKDGLCMB@?4jp2?$AA@			; `string'
PUBLIC	??_C@_04FPMMHJFC@?4jpe?$AA@			; `string'
PUBLIC	??_C@_05KPIGABMB@?4jpeg?$AA@			; `string'
PUBLIC	??_C@_04GNPKBLNA@?4jpg?$AA@			; `string'
PUBLIC	??_C@_04EPFEHOMD@?4lsp?$AA@			; `string'
PUBLIC	??_C@_04MMHKJEOH@?4mod?$AA@			; `string'
PUBLIC	??_C@_04MJHJENFH@?4nws?$AA@			; `string'
PUBLIC	??_C@_04PACIOCLB@?4obj?$AA@			; `string'
PUBLIC	??_C@_04DCGPEFLD@?4olb?$AA@			; `string'
PUBLIC	??_C@_04HDEPAGHI@?4osd?$AA@			; `string'
PUBLIC	??_C@_04LCEIGNIC@?4ov1?$AA@			; `string'
PUBLIC	??_C@_04JJGFDOEB@?4ov2?$AA@			; `string'
PUBLIC	??_C@_04IAHOAPAA@?4ov3?$AA@			; `string'
PUBLIC	??_C@_04LNFNEOJL@?4ovl?$AA@			; `string'
PUBLIC	??_C@_04GJBMHBEE@?4ovr?$AA@			; `string'
PUBLIC	??_C@_04HOMEEBJD@?4pdr?$AA@			; `string'
PUBLIC	??_C@_04LBNIPBFE@?4pgm?$AA@			; `string'
PUBLIC	??_C@_04EFOINKHF@?4php?$AA@			; `string'
PUBLIC	??_C@_04ECCNOALK@?4pkg?$AA@			; `string'
PUBLIC	??_C@_03DOPLEBF@?4pl?$AA@			; `string'
PUBLIC	??_C@_04EEOGCCFB@?4png?$AA@			; `string'
PUBLIC	??_C@_04CEMLAJPE@?4pot?$AA@			; `string'
PUBLIC	??_C@_04HMPAHLHO@?4pps?$AA@			; `string'
PUBLIC	??_C@_04DDLBONLJ@?4ppt?$AA@			; `string'
PUBLIC	??_C@_04LMPJOIKA@?4ps1?$AA@			; `string'
PUBLIC	??_C@_07KMHCJKCL@?4ps1xml?$AA@			; `string'
PUBLIC	??_C@_05HPAPKHGM@?4psc1?$AA@			; `string'
PUBLIC	??_C@_04NCAGELPD@?4rar?$AA@			; `string'
PUBLIC	??_C@_04BLKDLNGL@?4rpl?$AA@			; `string'
PUBLIC	??_C@_04OGEFPNDN@?4rtf?$AA@			; `string'
PUBLIC	??_C@_04EGFCEFJK@?4sbf?$AA@			; `string'
PUBLIC	??_C@_07PPFPDIDE@?4script?$AA@			; `string'
PUBLIC	??_C@_03GFMFMPEI@?4sh?$AA@			; `string'
PUBLIC	??_C@_04EIEFGIL@?4sha?$AA@			; `string'
PUBLIC	??_C@_05LANAKKIP@?4shtm?$AA@			; `string'
PUBLIC	??_C@_06LEPPGKLA@?4shtml?$AA@			; `string'
PUBLIC	??_C@_04KDBPNKAO@?4spl?$AA@			; `string'
PUBLIC	??_C@_04FMLPCEAB@?4swf?$AA@			; `string'
PUBLIC	??_C@_04PHGNBECP@?4tar?$AA@			; `string'
PUBLIC	??_C@_04DLDJOCJF@?4tgz?$AA@			; `string'
PUBLIC	??_C@_04MMEBIPMJ@?4tmp?$AA@			; `string'
PUBLIC	??_C@_04MDCOKCOB@?4ttf?$AA@			; `string'
PUBLIC	??_C@_04EHPLDJIL@?4vcs?$AA@			; `string'
PUBLIC	??_C@_04JIOGEBGJ@?4vlm?$AA@			; `string'
PUBLIC	??_C@_04FCALPBIM@?4vxd?$AA@			; `string'
PUBLIC	??_C@_04LBPPCIEH@?4vxo?$AA@			; `string'
PUBLIC	??_C@_04CDBCGAHB@?4wiz?$AA@			; `string'
PUBLIC	??_C@_04DJEBBHEN@?4wll?$AA@			; `string'
PUBLIC	??_C@_04PAFKPHHC@?4wmd?$AA@			; `string'
PUBLIC	??_C@_04MCGMJFPA@?4wmf?$AA@			; `string'
PUBLIC	??_C@_04PFNJHDOE@?4wms?$AA@			; `string'
PUBLIC	??_C@_04CEBLMIKN@?4wmz?$AA@			; `string'
PUBLIC	??_C@_04KLOFFBJG@?4wpc?$AA@			; `string'
PUBLIC	??_C@_04GGHDMNBL@?4wwk?$AA@			; `string'
PUBLIC	??_C@_05MHAAJLJO@?4xhtm?$AA@			; `string'
PUBLIC	??_C@_06NODIJKHD@?4xhtml?$AA@			; `string'
PUBLIC	??_C@_03NPMOFKN@?4xl?$AA@			; `string'
PUBLIC	??_C@_04GAOAGNCM@?4xml?$AA@			; `string'
PUBLIC	??_C@_04CLJHFACG@?4zip?$AA@			; `string'
PUBLIC	??_C@_03GKKCJKIH@?47z?$AA@			; `string'
;	COMDAT ??_C@_03GKKCJKIH@?47z?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string.h
CONST	SEGMENT
??_C@_03GKKCJKIH@?47z?$AA@ DB '.7z', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CLJHFACG@?4zip?$AA@
CONST	SEGMENT
??_C@_04CLJHFACG@?4zip?$AA@ DB '.zip', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GAOAGNCM@?4xml?$AA@
CONST	SEGMENT
??_C@_04GAOAGNCM@?4xml?$AA@ DB '.xml', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NPMOFKN@?4xl?$AA@
CONST	SEGMENT
??_C@_03NPMOFKN@?4xl?$AA@ DB '.xl', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NODIJKHD@?4xhtml?$AA@
CONST	SEGMENT
??_C@_06NODIJKHD@?4xhtml?$AA@ DB '.xhtml', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MHAAJLJO@?4xhtm?$AA@
CONST	SEGMENT
??_C@_05MHAAJLJO@?4xhtm?$AA@ DB '.xhtm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GGHDMNBL@?4wwk?$AA@
CONST	SEGMENT
??_C@_04GGHDMNBL@?4wwk?$AA@ DB '.wwk', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KLOFFBJG@?4wpc?$AA@
CONST	SEGMENT
??_C@_04KLOFFBJG@?4wpc?$AA@ DB '.wpc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CEBLMIKN@?4wmz?$AA@
CONST	SEGMENT
??_C@_04CEBLMIKN@?4wmz?$AA@ DB '.wmz', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PFNJHDOE@?4wms?$AA@
CONST	SEGMENT
??_C@_04PFNJHDOE@?4wms?$AA@ DB '.wms', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MCGMJFPA@?4wmf?$AA@
CONST	SEGMENT
??_C@_04MCGMJFPA@?4wmf?$AA@ DB '.wmf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PAFKPHHC@?4wmd?$AA@
CONST	SEGMENT
??_C@_04PAFKPHHC@?4wmd?$AA@ DB '.wmd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DJEBBHEN@?4wll?$AA@
CONST	SEGMENT
??_C@_04DJEBBHEN@?4wll?$AA@ DB '.wll', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CDBCGAHB@?4wiz?$AA@
CONST	SEGMENT
??_C@_04CDBCGAHB@?4wiz?$AA@ DB '.wiz', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBPPCIEH@?4vxo?$AA@
CONST	SEGMENT
??_C@_04LBPPCIEH@?4vxo?$AA@ DB '.vxo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FCALPBIM@?4vxd?$AA@
CONST	SEGMENT
??_C@_04FCALPBIM@?4vxd?$AA@ DB '.vxd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JIOGEBGJ@?4vlm?$AA@
CONST	SEGMENT
??_C@_04JIOGEBGJ@?4vlm?$AA@ DB '.vlm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EHPLDJIL@?4vcs?$AA@
CONST	SEGMENT
??_C@_04EHPLDJIL@?4vcs?$AA@ DB '.vcs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MDCOKCOB@?4ttf?$AA@
CONST	SEGMENT
??_C@_04MDCOKCOB@?4ttf?$AA@ DB '.ttf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MMEBIPMJ@?4tmp?$AA@
CONST	SEGMENT
??_C@_04MMEBIPMJ@?4tmp?$AA@ DB '.tmp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DLDJOCJF@?4tgz?$AA@
CONST	SEGMENT
??_C@_04DLDJOCJF@?4tgz?$AA@ DB '.tgz', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PHGNBECP@?4tar?$AA@
CONST	SEGMENT
??_C@_04PHGNBECP@?4tar?$AA@ DB '.tar', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FMLPCEAB@?4swf?$AA@
CONST	SEGMENT
??_C@_04FMLPCEAB@?4swf?$AA@ DB '.swf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KDBPNKAO@?4spl?$AA@
CONST	SEGMENT
??_C@_04KDBPNKAO@?4spl?$AA@ DB '.spl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LEPPGKLA@?4shtml?$AA@
CONST	SEGMENT
??_C@_06LEPPGKLA@?4shtml?$AA@ DB '.shtml', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LANAKKIP@?4shtm?$AA@
CONST	SEGMENT
??_C@_05LANAKKIP@?4shtm?$AA@ DB '.shtm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EIEFGIL@?4sha?$AA@
CONST	SEGMENT
??_C@_04EIEFGIL@?4sha?$AA@ DB '.sha', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GFMFMPEI@?4sh?$AA@
CONST	SEGMENT
??_C@_03GFMFMPEI@?4sh?$AA@ DB '.sh', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PPFPDIDE@?4script?$AA@
CONST	SEGMENT
??_C@_07PPFPDIDE@?4script?$AA@ DB '.script', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04EGFCEFJK@?4sbf?$AA@
CONST	SEGMENT
??_C@_04EGFCEFJK@?4sbf?$AA@ DB '.sbf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OGEFPNDN@?4rtf?$AA@
CONST	SEGMENT
??_C@_04OGEFPNDN@?4rtf?$AA@ DB '.rtf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BLKDLNGL@?4rpl?$AA@
CONST	SEGMENT
??_C@_04BLKDLNGL@?4rpl?$AA@ DB '.rpl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NCAGELPD@?4rar?$AA@
CONST	SEGMENT
??_C@_04NCAGELPD@?4rar?$AA@ DB '.rar', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HPAPKHGM@?4psc1?$AA@
CONST	SEGMENT
??_C@_05HPAPKHGM@?4psc1?$AA@ DB '.psc1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KMHCJKCL@?4ps1xml?$AA@
CONST	SEGMENT
??_C@_07KMHCJKCL@?4ps1xml?$AA@ DB '.ps1xml', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04LMPJOIKA@?4ps1?$AA@
CONST	SEGMENT
??_C@_04LMPJOIKA@?4ps1?$AA@ DB '.ps1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DDLBONLJ@?4ppt?$AA@
CONST	SEGMENT
??_C@_04DDLBONLJ@?4ppt?$AA@ DB '.ppt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HMPAHLHO@?4pps?$AA@
CONST	SEGMENT
??_C@_04HMPAHLHO@?4pps?$AA@ DB '.pps', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CEMLAJPE@?4pot?$AA@
CONST	SEGMENT
??_C@_04CEMLAJPE@?4pot?$AA@ DB '.pot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EEOGCCFB@?4png?$AA@
CONST	SEGMENT
??_C@_04EEOGCCFB@?4png?$AA@ DB '.png', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DOPLEBF@?4pl?$AA@
CONST	SEGMENT
??_C@_03DOPLEBF@?4pl?$AA@ DB '.pl', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04ECCNOALK@?4pkg?$AA@
CONST	SEGMENT
??_C@_04ECCNOALK@?4pkg?$AA@ DB '.pkg', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EFOINKHF@?4php?$AA@
CONST	SEGMENT
??_C@_04EFOINKHF@?4php?$AA@ DB '.php', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBNIPBFE@?4pgm?$AA@
CONST	SEGMENT
??_C@_04LBNIPBFE@?4pgm?$AA@ DB '.pgm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HOMEEBJD@?4pdr?$AA@
CONST	SEGMENT
??_C@_04HOMEEBJD@?4pdr?$AA@ DB '.pdr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GJBMHBEE@?4ovr?$AA@
CONST	SEGMENT
??_C@_04GJBMHBEE@?4ovr?$AA@ DB '.ovr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LNFNEOJL@?4ovl?$AA@
CONST	SEGMENT
??_C@_04LNFNEOJL@?4ovl?$AA@ DB '.ovl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IAHOAPAA@?4ov3?$AA@
CONST	SEGMENT
??_C@_04IAHOAPAA@?4ov3?$AA@ DB '.ov3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JJGFDOEB@?4ov2?$AA@
CONST	SEGMENT
??_C@_04JJGFDOEB@?4ov2?$AA@ DB '.ov2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LCEIGNIC@?4ov1?$AA@
CONST	SEGMENT
??_C@_04LCEIGNIC@?4ov1?$AA@ DB '.ov1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDEPAGHI@?4osd?$AA@
CONST	SEGMENT
??_C@_04HDEPAGHI@?4osd?$AA@ DB '.osd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DCGPEFLD@?4olb?$AA@
CONST	SEGMENT
??_C@_04DCGPEFLD@?4olb?$AA@ DB '.olb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PACIOCLB@?4obj?$AA@
CONST	SEGMENT
??_C@_04PACIOCLB@?4obj?$AA@ DB '.obj', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MJHJENFH@?4nws?$AA@
CONST	SEGMENT
??_C@_04MJHJENFH@?4nws?$AA@ DB '.nws', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MMHKJEOH@?4mod?$AA@
CONST	SEGMENT
??_C@_04MMHKJEOH@?4mod?$AA@ DB '.mod', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EPFEHOMD@?4lsp?$AA@
CONST	SEGMENT
??_C@_04EPFEHOMD@?4lsp?$AA@ DB '.lsp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GNPKBLNA@?4jpg?$AA@
CONST	SEGMENT
??_C@_04GNPKBLNA@?4jpg?$AA@ DB '.jpg', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KPIGABMB@?4jpeg?$AA@
CONST	SEGMENT
??_C@_05KPIGABMB@?4jpeg?$AA@ DB '.jpeg', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FPMMHJFC@?4jpe?$AA@
CONST	SEGMENT
??_C@_04FPMMHJFC@?4jpe?$AA@ DB '.jpe', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KKDGLCMB@?4jp2?$AA@
CONST	SEGMENT
??_C@_04KKDGLCMB@?4jp2?$AA@ DB '.jp2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HLECJFKK@?4jng?$AA@
CONST	SEGMENT
??_C@_04HLECJFKK@?4jng?$AA@ DB '.jng', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04POJMDHDM@?4jmh?$AA@
CONST	SEGMENT
??_C@_04POJMDHDM@?4jmh?$AA@ DB '.jmh', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHBGLCGO@?4jif?$AA@
CONST	SEGMENT
??_C@_04GHBGLCGO@?4jif?$AA@ DB '.jif', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GMEKPFFD@?4jff?$AA@
CONST	SEGMENT
??_C@_04GMEKPFFD@?4jff?$AA@ DB '.jff', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EHKLDEID@?4jar?$AA@
CONST	SEGMENT
??_C@_04EHKLDEID@?4jar?$AA@ DB '.jar', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LCFBANHC@?4j2k?$AA@
CONST	SEGMENT
??_C@_04LCFBANHC@?4j2k?$AA@ DB '.j2k', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PHHEBHMK@?4ini?$AA@
CONST	SEGMENT
??_C@_04PHHEBHMK@?4ini?$AA@ DB '.ini', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LHMDENIF@?4html?$AA@
CONST	SEGMENT
??_C@_05LHMDENIF@?4html?$AA@ DB '.html', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DKBFJDAN@?4htm?$AA@
CONST	SEGMENT
??_C@_04DKBFJDAN@?4htm?$AA@ DB '.htm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GBOLEDH@?4gz?$AA@
CONST	SEGMENT
??_C@_03GBOLEDH@?4gz?$AA@ DB '.gz', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FBLJABLH@?4fot?$AA@
CONST	SEGMENT
??_C@_04FBLJABLH@?4fot?$AA@ DB '.fot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FDPPLPOO@?4flt?$AA@
CONST	SEGMENT
??_C@_04FDPPLPOO@?4flt?$AA@ DB '.flt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MCJDOCGO@?4eml?$AA@
CONST	SEGMENT
??_C@_04MCJDOCGO@?4eml?$AA@ DB '.eml', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DIHMAKOE@?4emf?$AA@
CONST	SEGMENT
??_C@_04DIHMAKOE@?4emf?$AA@ DB '.emf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FAMALMPP@?4dlo?$AA@
CONST	SEGMENT
??_C@_04FAMALMPP@?4dlo?$AA@ DB '.dlo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KKCMFIJD@?4dhtml?$AA@
CONST	SEGMENT
??_C@_06KKCMFIJD@?4dhtml?$AA@ DB '.dhtml', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GCBAOBBN@?4dhtm?$AA@
CONST	SEGMENT
??_C@_05GCBAOBBN@?4dhtm?$AA@ DB '.dhtm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06POIMOJKC@?4class?$AA@
CONST	SEGMENT
??_C@_06POIMOJKC@?4class?$AA@ DB '.class', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BCMGGOLH@?4cdf?$AA@
CONST	SEGMENT
??_C@_04BCMGGOLH@?4cdf?$AA@ DB '.cdf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GCBFBPPI@?4bz2?$AA@
CONST	SEGMENT
??_C@_04GCBFBPPI@?4bz2?$AA@ DB '.bz2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HHONFNHK@?4boo?$AA@
CONST	SEGMENT
??_C@_04HHONFNHK@?4boo?$AA@ DB '.boo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HCOOIEMK@?4awx?$AA@
CONST	SEGMENT
??_C@_04HCOOIEMK@?4awx?$AA@ DB '.awx', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HFOHCMBG@?4asx?$AA@
CONST	SEGMENT
??_C@_04HFOHCMBG@?4asx?$AA@ DB '.asx', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KBKGBDMJ@?4asf?$AA@
CONST	SEGMENT
??_C@_04KBKGBDMJ@?4asf?$AA@ DB '.asf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JDJAHBEL@?4asd?$AA@
CONST	SEGMENT
??_C@_04JDJAHBEL@?4asd?$AA@ DB '.asd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LPHIBIEH@?4app?$AA@
CONST	SEGMENT
??_C@_04LPHIBIEH@?4app?$AA@ DB '.app', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DCMADPCF@?4ani?$AA@
CONST	SEGMENT
??_C@_04DCMADPCF@?4ani?$AA@ DB '.ani', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KEFHBDOL@?4adp?$AA@
CONST	SEGMENT
??_C@_04KEFHBDOL@?4adp?$AA@ DB '.adp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JDOCPFPP@?4ade?$AA@
CONST	SEGMENT
??_C@_04JDOCPFPP@?4ade?$AA@ DB '.ade', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FOHEGJHC@?4acm?$AA@
CONST	SEGMENT
??_C@_04FOHEGJHC@?4acm?$AA@ DB '.acm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GNGOLJF@?4386?$AA@
CONST	SEGMENT
??_C@_04GNGOLJF@?4386?$AA@ DB '.386', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HGFIODFG@?4xsl?$AA@
CONST	SEGMENT
??_C@_04HGFIODFG@?4xsl?$AA@ DB '.xsl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOIBGJFO@?4xsd?$AA@
CONST	SEGMENT
??_C@_04LOIBGJFO@?4xsd?$AA@ DB '.xsd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EKFHDGAE@?4wsh?$AA@
CONST	SEGMENT
??_C@_04EKFHDGAE@?4wsh?$AA@ DB '.wsh', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NENEBLIK@?4wsf?$AA@
CONST	SEGMENT
??_C@_04NENEBLIK@?4wsf?$AA@ DB '.wsf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KJKDOPMP@?4wsc?$AA@
CONST	SEGMENT
??_C@_04KJKDOPMP@?4wsc?$AA@ DB '.wsc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03MLPKKMAO@?4ws?$AA@
CONST	SEGMENT
??_C@_03MLPKKMAO@?4ws?$AA@ DB '.ws', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DPLBFPPP@?4vsw?$AA@
CONST	SEGMENT
??_C@_04DPLBFPPP@?4vsw?$AA@ DB '.vsw', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BEJMAMDM@?4vst?$AA@
CONST	SEGMENT
??_C@_04BEJMAMDM@?4vst?$AA@ DB '.vst', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FLNNJKPL@?4vss?$AA@
CONST	SEGMENT
??_C@_04FLNNJKPL@?4vss?$AA@ DB '.vss', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JNHDLKLO@?4vsmacros?$AA@
CONST	SEGMENT
??_C@_09JNHDLKLO@?4vsmacros?$AA@ DB '.vsmacros', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04EGDJFDLM@?4vbs?$AA@
CONST	SEGMENT
??_C@_04EGDJFDLM@?4vbs?$AA@ DB '.vbs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FKKBOGGL@?4vbe?$AA@
CONST	SEGMENT
??_C@_04FKKBOGGL@?4vbe?$AA@ DB '.vbe', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JJOBOFCJ@?4vb?$AA@
CONST	SEGMENT
??_C@_03JJOBOFCJ@?4vb?$AA@ DB '.vb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IFPAFBLM@?4url?$AA@
CONST	SEGMENT
??_C@_04IFPAFBLM@?4url?$AA@ DB '.url', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NKPJABLD@?4tsp?$AA@
CONST	SEGMENT
??_C@_04NKPJABLD@?4tsp?$AA@ DB '.tsp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LFHHJFCN@?4tlb?$AA@
CONST	SEGMENT
??_C@_04LFHHJFCN@?4tlb?$AA@ DB '.tlb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GBJEOPBP@?4sys?$AA@
CONST	SEGMENT
??_C@_04GBJEOPBP@?4sys?$AA@ DB '.sys', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HMHACGFI@?4shs?$AA@
CONST	SEGMENT
??_C@_04HMHACGFI@?4shs?$AA@ DB '.shs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CPKJAFEI@?4shb?$AA@
CONST	SEGMENT
??_C@_04CPKJAFEI@?4shb?$AA@ DB '.shb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DPGEFPHO@?4sct?$AA@
CONST	SEGMENT
??_C@_04DPGEFPHO@?4sct?$AA@ DB '.sct', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GJDOPIPI@?4scr?$AA@
CONST	SEGMENT
??_C@_04GJDOPIPI@?4scr?$AA@ DB '.scr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EHJACPKN@?4scf?$AA@
CONST	SEGMENT
??_C@_04EHJACPKN@?4scf?$AA@ DB '.scf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OCLKAFDL@?4reg?$AA@
CONST	SEGMENT
??_C@_04OCLKAFDL@?4reg?$AA@ DB '.reg', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DBPHFDOA@?4pst?$AA@
CONST	SEGMENT
??_C@_04DBPHFDOA@?4pst?$AA@ DB '.pst', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FBNKHIEF@?4prg?$AA@
CONST	SEGMENT
??_C@_04FBNKHIEF@?4prg?$AA@ DB '.prg', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EIMBEJAE@?4prf?$AA@
CONST	SEGMENT
??_C@_04EIMBEJAE@?4prf?$AA@ DB '.prf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FILCAFJF@?4pif?$AA@
CONST	SEGMENT
??_C@_04FILCAFJF@?4pif?$AA@ DB '.pif', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHBDOCMB@?4pcd?$AA@
CONST	SEGMENT
??_C@_04GHBDOCMB@?4pcd?$AA@ DB '.pcd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KMEOLMKH@?4pal?$AA@
CONST	SEGMENT
??_C@_04KMEOLMKH@?4pal?$AA@ DB '.pal', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HEIKDMLH@?4ops?$AA@
CONST	SEGMENT
??_C@_04HEIKDMLH@?4ops?$AA@ DB '.ops', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IJBOPIFF@?4ocx?$AA@
CONST	SEGMENT
??_C@_04IJBOPIFF@?4ocx?$AA@ DB '.ocx', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NJAKABMG@?4nls?$AA@
CONST	SEGMENT
??_C@_04NJAKABMG@?4nls?$AA@ DB '.nls', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GIGFMMAM@?4mui?$AA@
CONST	SEGMENT
??_C@_04GIGFMMAM@?4mui?$AA@ DB '.mui', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JDIENMKC@?4mst?$AA@
CONST	SEGMENT
??_C@_04JDIENMKC@?4mst?$AA@ DB '.mst', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PHOIBJKG@?4msp?$AA@
CONST	SEGMENT
??_C@_04PHOIBJKG@?4msp?$AA@ DB '.msp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GMOILALO@?4msi?$AA@
CONST	SEGMENT
??_C@_04GMOILALO@?4msi?$AA@ DB '.msi', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JGAHFIDE@?4msc?$AA@
CONST	SEGMENT
??_C@_04JGAHFIDE@?4msc?$AA@ DB '.msc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BEGOEENJ@?4mdz?$AA@
CONST	SEGMENT
??_C@_04BEGOEENJ@?4mdz?$AA@ DB '.mdz', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KBMADKJE@?4mdw?$AA@
CONST	SEGMENT
??_C@_04KBMADKJE@?4mdw?$AA@ DB '.mdw', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IKONGJFH@?4mdt?$AA@
CONST	SEGMENT
??_C@_04IKONGJFH@?4mdt?$AA@ DB '.mdt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NJDEEKEH@?4mde?$AA@
CONST	SEGMENT
??_C@_04NJDEEKEH@?4mde?$AA@ DB '.mde', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JGHFNMIA@?4mdb?$AA@
CONST	SEGMENT
??_C@_04JGHFNMIA@?4mdb?$AA@ DB '.mdb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LNFIIPED@?4mda?$AA@
CONST	SEGMENT
??_C@_04LNFIIPED@?4mda?$AA@ DB '.mda', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KHALPIHP@?4maw?$AA@
CONST	SEGMENT
??_C@_04KHALPIHP@?4maw?$AA@ DB '.maw', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOBAMJDO@?4mav?$AA@
CONST	SEGMENT
??_C@_04LOBAMJDO@?4mav?$AA@ DB '.mav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JFDNJKPN@?4mau?$AA@
CONST	SEGMENT
??_C@_04JFDNJKPN@?4mau?$AA@ DB '.mau', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IMCGKLLM@?4mat?$AA@
CONST	SEGMENT
??_C@_04IMCGKLLM@?4mat?$AA@ DB '.mat', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MDGHDNHL@?4mas?$AA@
CONST	SEGMENT
??_C@_04MDGHDNHL@?4mas?$AA@ DB '.mas', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NKHMAMDK@?4mar?$AA@
CONST	SEGMENT
??_C@_04NKHMAMDK@?4mar?$AA@ DB '.mar', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PBFBFPPJ@?4maq?$AA@
CONST	SEGMENT
??_C@_04PBFBFPPJ@?4maq?$AA@ DB '.maq', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DMALFBGH@?4man?$AA@
CONST	SEGMENT
??_C@_04DMALFBGH@?4man?$AA@ DB '.man', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BHCGACKE@?4mam?$AA@
CONST	SEGMENT
??_C@_04BHCGACKE@?4mam?$AA@ DB '.mam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04ONMJOKCO@?4mag?$AA@
CONST	SEGMENT
??_C@_04ONMJOKCO@?4mag?$AA@ DB '.mag', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PENCNLGP@?4maf?$AA@
CONST	SEGMENT
??_C@_04PENCNLGP@?4maf?$AA@ DB '.maf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MGOELJON@?4mad?$AA@
CONST	SEGMENT
??_C@_04MGOELJON@?4mad?$AA@ DB '.mad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PCJMIFHK@?4lnk?$AA@
CONST	SEGMENT
??_C@_04PCJMIFHK@?4lnk?$AA@ DB '.lnk', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FAJINOCD@?4ksh?$AA@
CONST	SEGMENT
??_C@_04FAJINOCD@?4ksh?$AA@ DB '.ksh', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FNIKMHAL@?4jse?$AA@
CONST	SEGMENT
??_C@_04FNIKMHAL@?4jse?$AA@ DB '.jse', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NPAEJMCN@?4js?$AA@
CONST	SEGMENT
??_C@_03NPAEJMCN@?4js?$AA@ DB '.js', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FGOIMLLH@?4its?$AA@
CONST	SEGMENT
??_C@_04FGOIMLLH@?4its?$AA@ DB '.its', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HIIKIOPB@?4isp?$AA@
CONST	SEGMENT
??_C@_04HIIKIOPB@?4isp?$AA@ DB '.isp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EHFJONBB@?4ins?$AA@
CONST	SEGMENT
??_C@_04EHFJONBB@?4ins?$AA@ DB '.ins', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HAOMALAF@?4inf?$AA@
CONST	SEGMENT
??_C@_04HAOMALAF@?4inf?$AA@ DB '.inf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FJIHOGJP@?4ime?$AA@
CONST	SEGMENT
??_C@_04FJIHOGJP@?4ime?$AA@ DB '.ime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JGKANMAB@?4hta?$AA@
CONST	SEGMENT
??_C@_04JGKANMAB@?4hta?$AA@ DB '.hta', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NHEMANNJ@?4hlp?$AA@
CONST	SEGMENT
??_C@_04NHEMANNJ@?4hlp?$AA@ DB '.hlp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JIAFODPJ@?4h1s?$AA@
CONST	SEGMENT
??_C@_04JIAFODPJ@?4h1s?$AA@ DB '.h1s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JJJHJDPF@?4grp?$AA@
CONST	SEGMENT
??_C@_04JJJHJDPF@?4grp?$AA@ DB '.grp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CMLMHBEG@?4fxp?$AA@
CONST	SEGMENT
??_C@_04CMLMHBEG@?4fxp?$AA@ DB '.fxp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JLMDILM@?4exe?$AA@
CONST	SEGMENT
??_C@_04JLMDILM@?4exe?$AA@ DB '.exe', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KBABJHPM@?4dtd?$AA@
CONST	SEGMENT
??_C@_04KBABJHPM@?4dtd?$AA@ DB '.dtd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NNHIJLJN@?4drv?$AA@
CONST	SEGMENT
??_C@_04NNHIJLJN@?4drv?$AA@ DB '.drv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HLONOPDM@?4dll?$AA@
CONST	SEGMENT
??_C@_04HLONOPDM@?4dll?$AA@ DB '.dll', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JFCMPGMM@?4csh?$AA@
CONST	SEGMENT
??_C@_04JFCMPGMM@?4csh?$AA@ DB '.csh', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HCJJMBKG@?4crt?$AA@
CONST	SEGMENT
??_C@_04HCJJMBKG@?4crt?$AA@ DB '.crt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NNKIFKME@?4cpx?$AA@
CONST	SEGMENT
??_C@_04NNKIFKME@?4cpx?$AA@ DB '.cpx', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PDAGINJB@?4cpl?$AA@
CONST	SEGMENT
??_C@_04PDAGINJB@?4cpl?$AA@ DB '.cpl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PNGHFIJN@?4com?$AA@
CONST	SEGMENT
??_C@_04PNGHFIJN@?4com?$AA@ DB '.com', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FFJDPJDA@?4cnv?$AA@
CONST	SEGMENT
??_C@_04FFJDPJDA@?4cnv?$AA@ DB '.cnv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHKFJLLC@?4cnt?$AA@
CONST	SEGMENT
??_C@_04GHKFJLLC@?4cnt?$AA@ DB '.cnt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CPCBDHLK@?4cmd?$AA@
CONST	SEGMENT
??_C@_04CPCBDHLK@?4cmd?$AA@ DB '.cmd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HILJPKAL@?4clb?$AA@
CONST	SEGMENT
??_C@_04HILJPKAL@?4clb?$AA@ DB '.clb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PICIEOBI@?4chm?$AA@
CONST	SEGMENT
??_C@_04PICIEOBI@?4chm?$AA@ DB '.chm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DNKKNDNF@?4cer?$AA@
CONST	SEGMENT
??_C@_04DNKKNDNF@?4cer?$AA@ DB '.cer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GKHLBAIJ@?4bin?$AA@
CONST	SEGMENT
??_C@_04GKHLBAIJ@?4bin?$AA@ DB '.bin', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NEEFLLOK@?4bat?$AA@
CONST	SEGMENT
??_C@_04NEEFLLOK@?4bat?$AA@ DB '.bat', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JLAECNCN@?4bas?$AA@
CONST	SEGMENT
??_C@_04JLAECNCN@?4bas?$AA@ DB '.bas', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DAKFKKAH@?4ax?$AA@
CONST	SEGMENT
??_C@_03DAKFKKAH@?4ax?$AA@ DB '.ax', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BNFEPADL@?4aspx?$AA@
CONST	SEGMENT
??_C@_05BNFEPADL@?4aspx?$AA@ DB '.aspx', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LNDOKGBO@?4asp?$AA@
CONST	SEGMENT
??_C@_04LNDOKGBO@?4asp?$AA@ DB '.asp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OOOHIFAO@?4asa?$AA@
CONST	SEGMENT
??_C@_04OOOHIFAO@?4asa?$AA@ DB '.asa', 00H		; `string'
CONST	ENDS
;	COMDAT ?problemFileExt@?1??CheckFileExtension@@9@4PAPADA
_DATA	SEGMENT
?problemFileExt@?1??CheckFileExtension@@9@4PAPADA DD FLAT:??_C@_04OOOHIFAO@?4asa?$AA@ ; `CheckFileExtension'::`2'::problemFileExt
	DD	FLAT:??_C@_04LNDOKGBO@?4asp?$AA@
	DD	FLAT:??_C@_05BNFEPADL@?4aspx?$AA@
	DD	FLAT:??_C@_03DAKFKKAH@?4ax?$AA@
	DD	FLAT:??_C@_04JLAECNCN@?4bas?$AA@
	DD	FLAT:??_C@_04NEEFLLOK@?4bat?$AA@
	DD	FLAT:??_C@_04GKHLBAIJ@?4bin?$AA@
	DD	FLAT:??_C@_04DNKKNDNF@?4cer?$AA@
	DD	FLAT:??_C@_04PICIEOBI@?4chm?$AA@
	DD	FLAT:??_C@_04HILJPKAL@?4clb?$AA@
	DD	FLAT:??_C@_04CPCBDHLK@?4cmd?$AA@
	DD	FLAT:??_C@_04GHKFJLLC@?4cnt?$AA@
	DD	FLAT:??_C@_04FFJDPJDA@?4cnv?$AA@
	DD	FLAT:??_C@_04PNGHFIJN@?4com?$AA@
	DD	FLAT:??_C@_04PDAGINJB@?4cpl?$AA@
	DD	FLAT:??_C@_04NNKIFKME@?4cpx?$AA@
	DD	FLAT:??_C@_04HCJJMBKG@?4crt?$AA@
	DD	FLAT:??_C@_04JFCMPGMM@?4csh?$AA@
	DD	FLAT:??_C@_04HLONOPDM@?4dll?$AA@
	DD	FLAT:??_C@_04NNHIJLJN@?4drv?$AA@
	DD	FLAT:??_C@_04KBABJHPM@?4dtd?$AA@
	DD	FLAT:??_C@_04JLMDILM@?4exe?$AA@
	DD	FLAT:??_C@_04CMLMHBEG@?4fxp?$AA@
	DD	FLAT:??_C@_04JJJHJDPF@?4grp?$AA@
	DD	FLAT:??_C@_04JIAFODPJ@?4h1s?$AA@
	DD	FLAT:??_C@_04NHEMANNJ@?4hlp?$AA@
	DD	FLAT:??_C@_04JGKANMAB@?4hta?$AA@
	DD	FLAT:??_C@_04FJIHOGJP@?4ime?$AA@
	DD	FLAT:??_C@_04HAOMALAF@?4inf?$AA@
	DD	FLAT:??_C@_04EHFJONBB@?4ins?$AA@
	DD	FLAT:??_C@_04HIIKIOPB@?4isp?$AA@
	DD	FLAT:??_C@_04FGOIMLLH@?4its?$AA@
	DD	FLAT:??_C@_03NPAEJMCN@?4js?$AA@
	DD	FLAT:??_C@_04FNIKMHAL@?4jse?$AA@
	DD	FLAT:??_C@_04FAJINOCD@?4ksh?$AA@
	DD	FLAT:??_C@_04PCJMIFHK@?4lnk?$AA@
	DD	FLAT:??_C@_04MGOELJON@?4mad?$AA@
	DD	FLAT:??_C@_04PENCNLGP@?4maf?$AA@
	DD	FLAT:??_C@_04ONMJOKCO@?4mag?$AA@
	DD	FLAT:??_C@_04BHCGACKE@?4mam?$AA@
	DD	FLAT:??_C@_04DMALFBGH@?4man?$AA@
	DD	FLAT:??_C@_04PBFBFPPJ@?4maq?$AA@
	DD	FLAT:??_C@_04NKHMAMDK@?4mar?$AA@
	DD	FLAT:??_C@_04MDGHDNHL@?4mas?$AA@
	DD	FLAT:??_C@_04IMCGKLLM@?4mat?$AA@
	DD	FLAT:??_C@_04JFDNJKPN@?4mau?$AA@
	DD	FLAT:??_C@_04LOBAMJDO@?4mav?$AA@
	DD	FLAT:??_C@_04KHALPIHP@?4maw?$AA@
	DD	FLAT:??_C@_04LNFIIPED@?4mda?$AA@
	DD	FLAT:??_C@_04JGHFNMIA@?4mdb?$AA@
	DD	FLAT:??_C@_04NJDEEKEH@?4mde?$AA@
	DD	FLAT:??_C@_04IKONGJFH@?4mdt?$AA@
	DD	FLAT:??_C@_04KBMADKJE@?4mdw?$AA@
	DD	FLAT:??_C@_04BEGOEENJ@?4mdz?$AA@
	DD	FLAT:??_C@_04JGAHFIDE@?4msc?$AA@
	DD	FLAT:??_C@_04GMOILALO@?4msi?$AA@
	DD	FLAT:??_C@_04PHOIBJKG@?4msp?$AA@
	DD	FLAT:??_C@_04JDIENMKC@?4mst?$AA@
	DD	FLAT:??_C@_04GIGFMMAM@?4mui?$AA@
	DD	FLAT:??_C@_04NJAKABMG@?4nls?$AA@
	DD	FLAT:??_C@_04IJBOPIFF@?4ocx?$AA@
	DD	FLAT:??_C@_04HEIKDMLH@?4ops?$AA@
	DD	FLAT:??_C@_04KMEOLMKH@?4pal?$AA@
	DD	FLAT:??_C@_04GHBDOCMB@?4pcd?$AA@
	DD	FLAT:??_C@_04FILCAFJF@?4pif?$AA@
	DD	FLAT:??_C@_04EIMBEJAE@?4prf?$AA@
	DD	FLAT:??_C@_04FBNKHIEF@?4prg?$AA@
	DD	FLAT:??_C@_04DBPHFDOA@?4pst?$AA@
	DD	FLAT:??_C@_04OCLKAFDL@?4reg?$AA@
	DD	FLAT:??_C@_04EHJACPKN@?4scf?$AA@
	DD	FLAT:??_C@_04GJDOPIPI@?4scr?$AA@
	DD	FLAT:??_C@_04DPGEFPHO@?4sct?$AA@
	DD	FLAT:??_C@_04CPKJAFEI@?4shb?$AA@
	DD	FLAT:??_C@_04HMHACGFI@?4shs?$AA@
	DD	FLAT:??_C@_04GBJEOPBP@?4sys?$AA@
	DD	FLAT:??_C@_04LFHHJFCN@?4tlb?$AA@
	DD	FLAT:??_C@_04NKPJABLD@?4tsp?$AA@
	DD	FLAT:??_C@_04IFPAFBLM@?4url?$AA@
	DD	FLAT:??_C@_03JJOBOFCJ@?4vb?$AA@
	DD	FLAT:??_C@_04FKKBOGGL@?4vbe?$AA@
	DD	FLAT:??_C@_04EGDJFDLM@?4vbs?$AA@
	DD	FLAT:??_C@_09JNHDLKLO@?4vsmacros?$AA@
	DD	FLAT:??_C@_04FLNNJKPL@?4vss?$AA@
	DD	FLAT:??_C@_04BEJMAMDM@?4vst?$AA@
	DD	FLAT:??_C@_04DPLBFPPP@?4vsw?$AA@
	DD	FLAT:??_C@_03MLPKKMAO@?4ws?$AA@
	DD	FLAT:??_C@_04KJKDOPMP@?4wsc?$AA@
	DD	FLAT:??_C@_04NENEBLIK@?4wsf?$AA@
	DD	FLAT:??_C@_04EKFHDGAE@?4wsh?$AA@
	DD	FLAT:??_C@_04LOIBGJFO@?4xsd?$AA@
	DD	FLAT:??_C@_04HGFIODFG@?4xsl?$AA@
	DD	FLAT:??_C@_04GNGOLJF@?4386?$AA@
	DD	FLAT:??_C@_04FOHEGJHC@?4acm?$AA@
	DD	FLAT:??_C@_04JDOCPFPP@?4ade?$AA@
	DD	FLAT:??_C@_04KEFHBDOL@?4adp?$AA@
	DD	FLAT:??_C@_04DCMADPCF@?4ani?$AA@
	DD	FLAT:??_C@_04LPHIBIEH@?4app?$AA@
	DD	FLAT:??_C@_04JDJAHBEL@?4asd?$AA@
	DD	FLAT:??_C@_04KBKGBDMJ@?4asf?$AA@
	DD	FLAT:??_C@_04HFOHCMBG@?4asx?$AA@
	DD	FLAT:??_C@_04HCOOIEMK@?4awx?$AA@
	DD	FLAT:??_C@_03DAKFKKAH@?4ax?$AA@
	DD	FLAT:??_C@_04HHONFNHK@?4boo?$AA@
	DD	FLAT:??_C@_04GCBFBPPI@?4bz2?$AA@
	DD	FLAT:??_C@_04BCMGGOLH@?4cdf?$AA@
	DD	FLAT:??_C@_06POIMOJKC@?4class?$AA@
	DD	FLAT:??_C@_05GCBAOBBN@?4dhtm?$AA@
	DD	FLAT:??_C@_06KKCMFIJD@?4dhtml?$AA@
	DD	FLAT:??_C@_04FAMALMPP@?4dlo?$AA@
	DD	FLAT:??_C@_04DIHMAKOE@?4emf?$AA@
	DD	FLAT:??_C@_04MCJDOCGO@?4eml?$AA@
	DD	FLAT:??_C@_04FDPPLPOO@?4flt?$AA@
	DD	FLAT:??_C@_04FBLJABLH@?4fot?$AA@
	DD	FLAT:??_C@_03GBOLEDH@?4gz?$AA@
	DD	FLAT:??_C@_04NHEMANNJ@?4hlp?$AA@
	DD	FLAT:??_C@_04DKBFJDAN@?4htm?$AA@
	DD	FLAT:??_C@_05LHMDENIF@?4html?$AA@
	DD	FLAT:??_C@_04PHHEBHMK@?4ini?$AA@
	DD	FLAT:??_C@_04LCFBANHC@?4j2k?$AA@
	DD	FLAT:??_C@_04EHKLDEID@?4jar?$AA@
	DD	FLAT:??_C@_04GMEKPFFD@?4jff?$AA@
	DD	FLAT:??_C@_04GHBGLCGO@?4jif?$AA@
	DD	FLAT:??_C@_04POJMDHDM@?4jmh?$AA@
	DD	FLAT:??_C@_04HLECJFKK@?4jng?$AA@
	DD	FLAT:??_C@_04KKDGLCMB@?4jp2?$AA@
	DD	FLAT:??_C@_04FPMMHJFC@?4jpe?$AA@
	DD	FLAT:??_C@_05KPIGABMB@?4jpeg?$AA@
	DD	FLAT:??_C@_04GNPKBLNA@?4jpg?$AA@
	DD	FLAT:??_C@_04EPFEHOMD@?4lsp?$AA@
	DD	FLAT:??_C@_04MMHKJEOH@?4mod?$AA@
	DD	FLAT:??_C@_04MJHJENFH@?4nws?$AA@
	DD	FLAT:??_C@_04PACIOCLB@?4obj?$AA@
	DD	FLAT:??_C@_04DCGPEFLD@?4olb?$AA@
	DD	FLAT:??_C@_04HDEPAGHI@?4osd?$AA@
	DD	FLAT:??_C@_04LCEIGNIC@?4ov1?$AA@
	DD	FLAT:??_C@_04JJGFDOEB@?4ov2?$AA@
	DD	FLAT:??_C@_04IAHOAPAA@?4ov3?$AA@
	DD	FLAT:??_C@_04LNFNEOJL@?4ovl?$AA@
	DD	FLAT:??_C@_04LNFNEOJL@?4ovl?$AA@
	DD	FLAT:??_C@_04GJBMHBEE@?4ovr?$AA@
	DD	FLAT:??_C@_04HOMEEBJD@?4pdr?$AA@
	DD	FLAT:??_C@_04LBNIPBFE@?4pgm?$AA@
	DD	FLAT:??_C@_04EFOINKHF@?4php?$AA@
	DD	FLAT:??_C@_04ECCNOALK@?4pkg?$AA@
	DD	FLAT:??_C@_03DOPLEBF@?4pl?$AA@
	DD	FLAT:??_C@_04EEOGCCFB@?4png?$AA@
	DD	FLAT:??_C@_04CEMLAJPE@?4pot?$AA@
	DD	FLAT:??_C@_04HMPAHLHO@?4pps?$AA@
	DD	FLAT:??_C@_04DDLBONLJ@?4ppt?$AA@
	DD	FLAT:??_C@_04LMPJOIKA@?4ps1?$AA@
	DD	FLAT:??_C@_07KMHCJKCL@?4ps1xml?$AA@
	DD	FLAT:??_C@_05HPAPKHGM@?4psc1?$AA@
	DD	FLAT:??_C@_04NCAGELPD@?4rar?$AA@
	DD	FLAT:??_C@_04BLKDLNGL@?4rpl?$AA@
	DD	FLAT:??_C@_04OGEFPNDN@?4rtf?$AA@
	DD	FLAT:??_C@_04EGFCEFJK@?4sbf?$AA@
	DD	FLAT:??_C@_07PPFPDIDE@?4script?$AA@
	DD	FLAT:??_C@_03GFMFMPEI@?4sh?$AA@
	DD	FLAT:??_C@_04EIEFGIL@?4sha?$AA@
	DD	FLAT:??_C@_05LANAKKIP@?4shtm?$AA@
	DD	FLAT:??_C@_06LEPPGKLA@?4shtml?$AA@
	DD	FLAT:??_C@_04KDBPNKAO@?4spl?$AA@
	DD	FLAT:??_C@_04FMLPCEAB@?4swf?$AA@
	DD	FLAT:??_C@_04PHGNBECP@?4tar?$AA@
	DD	FLAT:??_C@_04DLDJOCJF@?4tgz?$AA@
	DD	FLAT:??_C@_04MMEBIPMJ@?4tmp?$AA@
	DD	FLAT:??_C@_04MDCOKCOB@?4ttf?$AA@
	DD	FLAT:??_C@_04EHPLDJIL@?4vcs?$AA@
	DD	FLAT:??_C@_04JIOGEBGJ@?4vlm?$AA@
	DD	FLAT:??_C@_04FCALPBIM@?4vxd?$AA@
	DD	FLAT:??_C@_04LBPPCIEH@?4vxo?$AA@
	DD	FLAT:??_C@_04CDBCGAHB@?4wiz?$AA@
	DD	FLAT:??_C@_04DJEBBHEN@?4wll?$AA@
	DD	FLAT:??_C@_04PAFKPHHC@?4wmd?$AA@
	DD	FLAT:??_C@_04MCGMJFPA@?4wmf?$AA@
	DD	FLAT:??_C@_04PFNJHDOE@?4wms?$AA@
	DD	FLAT:??_C@_04CEBLMIKN@?4wmz?$AA@
	DD	FLAT:??_C@_04KLOFFBJG@?4wpc?$AA@
	DD	FLAT:??_C@_04KJKDOPMP@?4wsc?$AA@
	DD	FLAT:??_C@_04EKFHDGAE@?4wsh?$AA@
	DD	FLAT:??_C@_04GGHDMNBL@?4wwk?$AA@
	DD	FLAT:??_C@_05MHAAJLJO@?4xhtm?$AA@
	DD	FLAT:??_C@_06NODIJKHD@?4xhtml?$AA@
	DD	FLAT:??_C@_03NPMOFKN@?4xl?$AA@
	DD	FLAT:??_C@_04GAOAGNCM@?4xml?$AA@
	DD	FLAT:??_C@_04CLJHFACG@?4zip?$AA@
	DD	FLAT:??_C@_03GKKCJKIH@?47z?$AA@
	DD	00H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
_DATA	ENDS
;	COMDAT _CheckFileExtension
_TEXT	SEGMENT
_fileName$ = 8						; size = 4
_CheckFileExtension PROC				; COMDAT

; 5421 : 	int i = 0;
; 5422 : 	char *ext = strrchr (fileName, '.');

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _fileName$[esp-4]
  00004	57		 push	 edi
  00005	6a 2e		 push	 46			; 0000002eH
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 _strrchr
  0000d	8b f8		 mov	 edi, eax
  0000f	83 c4 08	 add	 esp, 8

; 5423 : 	static char *problemFileExt[] = {
; 5424 : 		// These are protected by the Windows Resource Protection
; 5425 : 		".asa", ".asp", ".aspx", ".ax", ".bas", ".bat", ".bin", ".cer", ".chm", ".clb", ".cmd", ".cnt", ".cnv",
; 5426 : 		".com", ".cpl", ".cpx", ".crt", ".csh", ".dll", ".drv", ".dtd", ".exe", ".fxp", ".grp", ".h1s", ".hlp",
; 5427 : 		".hta", ".ime", ".inf", ".ins", ".isp", ".its", ".js", ".jse", ".ksh", ".lnk", ".mad", ".maf", ".mag",
; 5428 : 		".mam", ".man", ".maq", ".mar", ".mas", ".mat", ".mau", ".mav", ".maw", ".mda", ".mdb", ".mde", ".mdt",
; 5429 : 		".mdw", ".mdz", ".msc", ".msi", ".msp", ".mst", ".mui", ".nls", ".ocx", ".ops", ".pal", ".pcd", ".pif",
; 5430 : 		".prf", ".prg", ".pst", ".reg", ".scf", ".scr", ".sct", ".shb", ".shs", ".sys", ".tlb", ".tsp", ".url",
; 5431 : 		".vb", ".vbe", ".vbs", ".vsmacros", ".vss", ".vst", ".vsw", ".ws", ".wsc", ".wsf", ".wsh", ".xsd", ".xsl",
; 5432 : 		// These additional file extensions are usually watched by antivirus programs
; 5433 : 		".386", ".acm", ".ade", ".adp", ".ani", ".app", ".asd", ".asf", ".asx", ".awx", ".ax", ".boo", ".bz2", ".cdf",
; 5434 : 		".class", ".dhtm", ".dhtml",".dlo", ".emf", ".eml", ".flt", ".fot", ".gz", ".hlp", ".htm", ".html", ".ini", 
; 5435 : 		".j2k", ".jar", ".jff", ".jif", ".jmh", ".jng", ".jp2", ".jpe", ".jpeg", ".jpg", ".lsp", ".mod", ".nws",
; 5436 : 		".obj", ".olb", ".osd", ".ov1", ".ov2", ".ov3", ".ovl", ".ovl", ".ovr", ".pdr", ".pgm", ".php", ".pkg",
; 5437 : 		".pl", ".png", ".pot", ".pps", ".ppt", ".ps1", ".ps1xml", ".psc1", ".rar", ".rpl", ".rtf", ".sbf", ".script", ".sh", ".sha", ".shtm",
; 5438 : 		".shtml", ".spl", ".swf", ".tar", ".tgz", ".tmp", ".ttf", ".vcs", ".vlm", ".vxd", ".vxo", ".wiz", ".wll", ".wmd",
; 5439 : 		".wmf",	".wms", ".wmz", ".wpc", ".wsc", ".wsh", ".wwk", ".xhtm", ".xhtml", ".xl", ".xml", ".zip", ".7z", 0};
; 5440 : 
; 5441 : 	if (!ext)

  00012	85 ff		 test	 edi, edi
  00014	75 02		 jne	 SHORT $LN9@CheckFileE
  00016	5f		 pop	 edi

; 5451 : }

  00017	c3		 ret	 0
$LN9@CheckFileE:

; 5442 : 		return FALSE;
; 5443 : 
; 5444 : 	while (problemFileExt[i])

  00018	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?problemFileExt@?1??CheckFileExtension@@9@4PAPADA, 0
  0001f	56		 push	 esi
  00020	74 1d		 je	 SHORT $LN2@CheckFileE
  00022	be 00 00 00 00	 mov	 esi, OFFSET ?problemFileExt@?1??CheckFileExtension@@9@4PAPADA
$LL3@CheckFileE:

; 5445 : 	{
; 5446 : 		if (!_stricmp (ext, problemFileExt[i++]))

  00027	8b 06		 mov	 eax, DWORD PTR [esi]
  00029	50		 push	 eax
  0002a	57		 push	 edi
  0002b	e8 00 00 00 00	 call	 __stricmp
  00030	83 c4 08	 add	 esp, 8
  00033	83 c6 04	 add	 esi, 4
  00036	85 c0		 test	 eax, eax
  00038	74 0a		 je	 SHORT $LN10@CheckFileE

; 5442 : 		return FALSE;
; 5443 : 
; 5444 : 	while (problemFileExt[i])

  0003a	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0003d	75 e8		 jne	 SHORT $LL3@CheckFileE
$LN2@CheckFileE:
  0003f	5e		 pop	 esi

; 5448 : 	}
; 5449 : 
; 5450 : 	return FALSE;

  00040	33 c0		 xor	 eax, eax
  00042	5f		 pop	 edi

; 5451 : }

  00043	c3		 ret	 0
$LN10@CheckFileE:
  00044	5e		 pop	 esi

; 5447 : 			return TRUE;

  00045	b8 01 00 00 00	 mov	 eax, 1
  0004a	5f		 pop	 edi

; 5451 : }

  0004b	c3		 ret	 0
_CheckFileExtension ENDP
_TEXT	ENDS
PUBLIC	_IncreaseWrongPwdRetryCount
; Function compile flags: /Ogtpy
;	COMDAT _IncreaseWrongPwdRetryCount
_TEXT	SEGMENT
_count$ = 8						; size = 4
_IncreaseWrongPwdRetryCount PROC			; COMDAT

; 5456 : 	WrongPwdRetryCounter += count;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _count$[esp-4]
  00004	01 05 00 00 00
	00		 add	 DWORD PTR ?WrongPwdRetryCounter@@3HA, eax ; WrongPwdRetryCounter

; 5457 : }

  0000a	c3		 ret	 0
_IncreaseWrongPwdRetryCount ENDP
_TEXT	ENDS
PUBLIC	_ResetWrongPwdRetryCount
; Function compile flags: /Ogtpy
;	COMDAT _ResetWrongPwdRetryCount
_TEXT	SEGMENT
_ResetWrongPwdRetryCount PROC				; COMDAT

; 5462 : 	WrongPwdRetryCounter = 0;

  00000	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?WrongPwdRetryCounter@@3HA, 0 ; WrongPwdRetryCounter

; 5463 : }

  0000a	c3		 ret	 0
_ResetWrongPwdRetryCount ENDP
_TEXT	ENDS
PUBLIC	_WrongPwdRetryCountOverLimit
; Function compile flags: /Ogtpy
;	COMDAT _WrongPwdRetryCountOverLimit
_TEXT	SEGMENT
_WrongPwdRetryCountOverLimit PROC			; COMDAT

; 5468 : 	return (WrongPwdRetryCounter > TC_TRY_HEADER_BAK_AFTER_NBR_WRONG_PWD_TRIES);

  00000	33 c0		 xor	 eax, eax
  00002	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?WrongPwdRetryCounter@@3HA, 2 ; WrongPwdRetryCounter
  00009	0f 9f c0	 setg	 al

; 5469 : }

  0000c	c3		 ret	 0
_WrongPwdRetryCountOverLimit ENDP
_TEXT	ENDS
PUBLIC	_GetFirstAvailableDrive
EXTRN	__imp__GetLogicalDrives@0:PROC
; Function compile flags: /Ogtpy
;	COMDAT _GetFirstAvailableDrive
_TEXT	SEGMENT
_GetFirstAvailableDrive PROC				; COMDAT

; 5474 : 	DWORD dwUsedDrives = GetLogicalDrives();

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLogicalDrives@0

; 5475 : 	int i;
; 5476 : 
; 5477 : 	for (i = 3; i < 26; i++)

  00006	b9 03 00 00 00	 mov	 ecx, 3
  0000b	eb 03 8d 49 00	 npad	 5
$LL4@GetFirstAv:

; 5478 : 	{
; 5479 : 		if (!(dwUsedDrives & 1 << i))

  00010	ba 01 00 00 00	 mov	 edx, 1
  00015	d3 e2		 shl	 edx, cl
  00017	85 d0		 test	 edx, eax
  00019	74 0a		 je	 SHORT $LN8@GetFirstAv
  0001b	41		 inc	 ecx
  0001c	83 f9 1a	 cmp	 ecx, 26			; 0000001aH
  0001f	7c ef		 jl	 SHORT $LL4@GetFirstAv

; 5481 : 	}
; 5482 : 
; 5483 : 	return -1;

  00021	83 c8 ff	 or	 eax, -1

; 5484 : }

  00024	c3		 ret	 0
$LN8@GetFirstAv:

; 5480 : 			return i;

  00025	8b c1		 mov	 eax, ecx

; 5484 : }

  00027	c3		 ret	 0
_GetFirstAvailableDrive ENDP
_TEXT	ENDS
PUBLIC	_GetLastAvailableDrive
; Function compile flags: /Ogtpy
;	COMDAT _GetLastAvailableDrive
_TEXT	SEGMENT
_GetLastAvailableDrive PROC				; COMDAT

; 5489 : 	DWORD dwUsedDrives = GetLogicalDrives();

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLogicalDrives@0

; 5490 : 	int i;
; 5491 : 
; 5492 : 	for (i = 25; i > 2; i--)

  00006	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  0000b	eb 03 8d 49 00	 npad	 5
$LL4@GetLastAva:

; 5493 : 	{
; 5494 : 		if (!(dwUsedDrives & 1 << i))

  00010	ba 01 00 00 00	 mov	 edx, 1
  00015	d3 e2		 shl	 edx, cl
  00017	85 d0		 test	 edx, eax
  00019	74 0a		 je	 SHORT $LN8@GetLastAva
  0001b	49		 dec	 ecx
  0001c	83 f9 02	 cmp	 ecx, 2
  0001f	7f ef		 jg	 SHORT $LL4@GetLastAva

; 5496 : 	}
; 5497 : 
; 5498 : 	return -1;

  00021	83 c8 ff	 or	 eax, -1

; 5499 : }

  00024	c3		 ret	 0
$LN8@GetLastAva:

; 5495 : 			return i;

  00025	8b c1		 mov	 eax, ecx

; 5499 : }

  00027	c3		 ret	 0
_GetLastAvailableDrive ENDP
_TEXT	ENDS
PUBLIC	_IsDriveAvailable
; Function compile flags: /Ogtpy
;	COMDAT _IsDriveAvailable
_TEXT	SEGMENT
_driveNo$ = 8						; size = 4
_IsDriveAvailable PROC					; COMDAT

; 5504 : 	return (GetLogicalDrives() & (1 << driveNo)) == 0;

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLogicalDrives@0
  00006	8b 4c 24 04	 mov	 ecx, DWORD PTR _driveNo$[esp-4]
  0000a	ba 01 00 00 00	 mov	 edx, 1
  0000f	d3 e2		 shl	 edx, cl
  00011	23 c2		 and	 eax, edx
  00013	f7 d8		 neg	 eax
  00015	1b c0		 sbb	 eax, eax
  00017	40		 inc	 eax

; 5505 : }

  00018	c3		 ret	 0
_IsDriveAvailable ENDP
_TEXT	ENDS
PUBLIC	_IsDeviceMounted
EXTRN	__imp__CreateFileA@28:PROC
; Function compile flags: /Ogtpy
;	COMDAT _IsDeviceMounted
_TEXT	SEGMENT
_dwResult$ = -4						; size = 4
_deviceName$ = 8					; size = 4
_IsDeviceMounted PROC					; COMDAT

; 5509 : {

  00000	51		 push	 ecx

; 5510 : 	BOOL bResult = FALSE;
; 5511 : 	DWORD dwResult;
; 5512 : 	HANDLE dev = INVALID_HANDLE_VALUE;
; 5513 : 
; 5514 : 	if ((dev = CreateFile (deviceName,
; 5515 : 		GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE,
; 5516 : 		NULL,
; 5517 : 		OPEN_EXISTING,
; 5518 : 		0,
; 5519 : 		NULL)) != INVALID_HANDLE_VALUE)

  00001	8b 44 24 08	 mov	 eax, DWORD PTR _deviceName$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	33 ff		 xor	 edi, edi
  00009	57		 push	 edi
  0000a	57		 push	 edi
  0000b	6a 03		 push	 3
  0000d	57		 push	 edi
  0000e	6a 03		 push	 3
  00010	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0001c	8b f0		 mov	 esi, eax
  0001e	83 fe ff	 cmp	 esi, -1
  00021	74 1f		 je	 SHORT $LN4@IsDeviceMo

; 5520 : 	{
; 5521 : 		bResult = DeviceIoControl (dev, FSCTL_IS_VOLUME_MOUNTED, NULL, 0, NULL, 0, &dwResult, NULL);

  00023	57		 push	 edi
  00024	8d 4c 24 0c	 lea	 ecx, DWORD PTR _dwResult$[esp+16]
  00028	51		 push	 ecx
  00029	57		 push	 edi
  0002a	57		 push	 edi
  0002b	57		 push	 edi
  0002c	57		 push	 edi
  0002d	68 28 00 09 00	 push	 589864			; 00090028H
  00032	56		 push	 esi
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 5522 : 		CloseHandle (dev);

  00039	56		 push	 esi
  0003a	8b f8		 mov	 edi, eax
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN4@IsDeviceMo:

; 5523 : 	}
; 5524 : 
; 5525 : 	return bResult;

  00042	8b c7		 mov	 eax, edi
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 5526 : }

  00046	59		 pop	 ecx
  00047	c3		 ret	 0
_IsDeviceMounted ENDP
_TEXT	ENDS
PUBLIC	_DriverUnmountVolume
; Function compile flags: /Ogtpy
;	COMDAT _DriverUnmountVolume
_TEXT	SEGMENT
_unmount$ = -16						; size = 16
_hwndDlg$ = 8						; size = 4
_dwResult$ = 12						; size = 4
_nDosDriveNo$ = 12					; size = 4
_forced$ = 16						; size = 4
_DriverUnmountVolume PROC				; COMDAT

; 5530 : {

  00000	83 ec 10	 sub	 esp, 16			; 00000010H

; 5531 : 	UNMOUNT_STRUCT unmount;
; 5532 : 	DWORD dwResult;
; 5533 : 
; 5534 : 	BOOL bResult;
; 5535 : 	
; 5536 : 	unmount.nDosDriveNo = nDosDriveNo;

  00003	8b 44 24 18	 mov	 eax, DWORD PTR _nDosDriveNo$[esp+12]

; 5537 : 	unmount.ignoreOpenFiles = forced;

  00007	8b 4c 24 1c	 mov	 ecx, DWORD PTR _forced$[esp+12]

; 5538 : 
; 5539 : 	bResult = DeviceIoControl (hDriver, TC_IOCTL_DISMOUNT_VOLUME, &unmount,
; 5540 : 		sizeof (unmount), &unmount, sizeof (unmount), &dwResult, NULL);

  0000b	6a 00		 push	 0
  0000d	8d 54 24 1c	 lea	 edx, DWORD PTR _dwResult$[esp+16]
  00011	52		 push	 edx
  00012	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hDriver
  00018	6a 10		 push	 16			; 00000010H
  0001a	89 44 24 0c	 mov	 DWORD PTR _unmount$[esp+28], eax
  0001e	8d 44 24 0c	 lea	 eax, DWORD PTR _unmount$[esp+28]
  00022	50		 push	 eax
  00023	6a 10		 push	 16			; 00000010H
  00025	89 4c 24 18	 mov	 DWORD PTR _unmount$[esp+40], ecx
  00029	8b c8		 mov	 ecx, eax
  0002b	51		 push	 ecx
  0002c	68 10 20 22 00	 push	 2236432			; 00222010H
  00031	52		 push	 edx
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 5541 : 
; 5542 : 	if (bResult == FALSE)

  00038	85 c0		 test	 eax, eax
  0003a	75 16		 jne	 SHORT $LN1@DriverUnmo

; 5543 : 	{
; 5544 : 		handleWin32Error (hwndDlg);

  0003c	8b 44 24 14	 mov	 eax, DWORD PTR _hwndDlg$[esp+12]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 _handleWin32Error
  00046	83 c4 04	 add	 esp, 4

; 5545 : 		return 1;

  00049	b8 01 00 00 00	 mov	 eax, 1

; 5565 : }

  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	c3		 ret	 0
$LN1@DriverUnmo:

; 5546 : 	}
; 5547 : 
; 5548 : #ifdef TCMOUNT
; 5549 : 
; 5550 : 	if (unmount.nReturnCode == ERR_SUCCESS
; 5551 : 		&& unmount.HiddenVolumeProtectionTriggered
; 5552 : 		&& !VolumeNotificationsList.bHidVolDamagePrevReported [nDosDriveNo])
; 5553 : 	{
; 5554 : 		wchar_t msg[4096];
; 5555 : 
; 5556 : 		VolumeNotificationsList.bHidVolDamagePrevReported [nDosDriveNo] = TRUE;
; 5557 : 		swprintf (msg, GetString ("DAMAGE_TO_HIDDEN_VOLUME_PREVENTED"), nDosDriveNo + 'A');
; 5558 : 		SetForegroundWindow (hwndDlg);
; 5559 : 		MessageBoxW (hwndDlg, msg, lpszTitle, MB_ICONWARNING | MB_SETFOREGROUND | MB_TOPMOST);
; 5560 : 	}
; 5561 : 
; 5562 : #endif	// #ifdef TCMOUNT
; 5563 : 
; 5564 : 	return unmount.nReturnCode;

  00052	8b 44 24 0c	 mov	 eax, DWORD PTR _unmount$[esp+28]

; 5565 : }

  00056	83 c4 10	 add	 esp, 16			; 00000010H
  00059	c3		 ret	 0
_DriverUnmountVolume ENDP
_TEXT	ENDS
PUBLIC	??_C@_05EMECODII@?$CFls?$CFc?$AA@		; `string'
PUBLIC	??_C@_1DA@GMJGMIMP@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAT?$AAr?$AAu?$AAe?$AAC?$AAr?$AAy?$AAp?$AAt?$AAV?$AAo?$AAl?$AAu?$AAm?$AAe?$AA?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_BroadcastDeviceChange
EXTRN	__imp__SendMessageTimeoutA@28:PROC
EXTRN	__imp__SHChangeNotify@16:PROC
;	COMDAT ??_C@_05EMECODII@?$CFls?$CFc?$AA@
CONST	SEGMENT
??_C@_05EMECODII@?$CFls?$CFc?$AA@ DB '%ls%c', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@GMJGMIMP@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAT?$AAr?$AAu?$AAe?$AAC?$AAr?$AAy?$AAp?$AAt?$AAV?$AAo?$AAl?$AAu?$AAm?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@GMJGMIMP@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAT?$AAr?$AAu?$AAe?$AAC?$AAr?$AAy?$AAp?$AAt?$AAV?$AAo?$AAl?$AAu?$AAm?$AAe?$AA?$AA@ DB '\'
	DB	00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'\', 00H, 'T', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 'C', 00H, 'r'
	DB	00H, 'y', 00H, 'p', 00H, 't', 00H, 'V', 00H, 'o', 00H, 'l', 00H
	DB	'u', 00H, 'm', 00H, 'e', 00H, 00H, 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _BroadcastDeviceChange
_TEXT	SEGMENT
_root$142030 = -64					; size = 4
_dwResult$ = -60					; size = 4
_dbv$ = -56						; size = 20
_target$142033 = -36					; size = 32
__$ArrayPad$ = -4					; size = 4
_message$ = 8						; size = 4
_nDosDriveNo$ = 12					; size = 4
_driveMap$ = 16						; size = 4
_BroadcastDeviceChange PROC				; COMDAT

; 5569 : {

  00000	83 ec 40	 sub	 esp, 64			; 00000040H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 3c	 mov	 DWORD PTR __$ArrayPad$[esp+64], eax
  0000e	57		 push	 edi

; 5570 : 	DEV_BROADCAST_VOLUME dbv;
; 5571 : 	DWORD_PTR dwResult;
; 5572 : 	LONG eventId = 0;

  0000f	33 ff		 xor	 edi, edi

; 5573 : 	int i;
; 5574 : 
; 5575 : 	if (DeviceChangeBroadcastDisabled)

  00011	39 3d 00 00 00
	00		 cmp	 DWORD PTR _DeviceChangeBroadcastDisabled, edi
  00017	0f 85 ad 01 00
	00		 jne	 $LN19@BroadcastD
  0001d	55		 push	 ebp

; 5576 : 		return;
; 5577 : 
; 5578 : 	if (message == DBT_DEVICEARRIVAL)

  0001e	8b 6c 24 4c	 mov	 ebp, DWORD PTR _message$[esp+68]
  00022	56		 push	 esi
  00023	81 fd 00 80 00
	00		 cmp	 ebp, 32768		; 00008000H
  00029	75 07		 jne	 SHORT $LN17@BroadcastD

; 5579 : 		eventId = SHCNE_DRIVEADD;

  0002b	bf 00 01 00 00	 mov	 edi, 256		; 00000100H
  00030	eb 23		 jmp	 SHORT $LN13@BroadcastD
$LN17@BroadcastD:

; 5580 : 	else if (message == DBT_DEVICEREMOVECOMPLETE)

  00032	81 fd 04 80 00
	00		 cmp	 ebp, 32772		; 00008004H

; 5581 : 		eventId = SHCNE_DRIVEREMOVED;

  00038	74 16		 je	 SHORT $LN26@BroadcastD

; 5582 : 	else if (IsOSAtLeast (WIN_7) && message == DBT_DEVICEREMOVEPENDING) // Explorer on Windows 7 holds open handles of all drives when 'Computer' is expanded in navigation pane. SHCNE_DRIVEREMOVED must be used as DBT_DEVICEREMOVEPENDING is ignored.

  0003a	6a 0d		 push	 13			; 0000000dH
  0003c	e8 00 00 00 00	 call	 _IsOSAtLeast
  00041	83 c4 04	 add	 esp, 4
  00044	85 c0		 test	 eax, eax
  00046	74 0d		 je	 SHORT $LN13@BroadcastD
  00048	81 fd 03 80 00
	00		 cmp	 ebp, 32771		; 00008003H
  0004e	75 05		 jne	 SHORT $LN13@BroadcastD
$LN26@BroadcastD:

; 5583 : 		eventId = SHCNE_DRIVEREMOVED;

  00050	bf 80 00 00 00	 mov	 edi, 128		; 00000080H
$LN13@BroadcastD:

; 5584 : 
; 5585 : 	if (driveMap == 0)

  00055	83 7c 24 58 00	 cmp	 DWORD PTR _driveMap$[esp+72], 0
  0005a	75 0f		 jne	 SHORT $LN23@BroadcastD

; 5586 : 		driveMap = (1 << nDosDriveNo);

  0005c	8b 4c 24 54	 mov	 ecx, DWORD PTR _nDosDriveNo$[esp+72]
  00060	b8 01 00 00 00	 mov	 eax, 1
  00065	d3 e0		 shl	 eax, cl
  00067	89 44 24 58	 mov	 DWORD PTR _driveMap$[esp+72], eax
$LN23@BroadcastD:

; 5587 : 
; 5588 : 	if (eventId != 0)

  0006b	85 ff		 test	 edi, edi
  0006d	0f 84 b5 00 00
	00		 je	 $LN25@BroadcastD

; 5589 : 	{
; 5590 : 		for (i = 0; i < 26; i++)

  00073	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SHChangeNotify@16
  00079	53		 push	 ebx
  0007a	33 db		 xor	 ebx, ebx
  0007c	8d 64 24 00	 npad	 4
$LL10@BroadcastD:

; 5591 : 		{
; 5592 : 			if (driveMap & (1 << i))

  00080	8b cb		 mov	 ecx, ebx
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	d3 e0		 shl	 eax, cl
  00089	8b 4c 24 5c	 mov	 ecx, DWORD PTR _driveMap$[esp+76]
  0008d	85 c1		 test	 eax, ecx
  0008f	0f 84 88 00 00
	00		 je	 $LN9@BroadcastD

; 5593 : 			{
; 5594 : 				char root[] = { (char) i + 'A', ':', '\\', 0 };
; 5595 : 				SHChangeNotify (eventId, SHCNF_PATH, root, NULL);

  00095	6a 00		 push	 0
  00097	8d 44 24 14	 lea	 eax, DWORD PTR _root$142030[esp+84]
  0009b	50		 push	 eax
  0009c	8a d3		 mov	 dl, bl
  0009e	6a 01		 push	 1
  000a0	80 c2 41	 add	 dl, 65			; 00000041H
  000a3	57		 push	 edi
  000a4	88 54 24 20	 mov	 BYTE PTR _root$142030[esp+96], dl
  000a8	c6 44 24 21 3a	 mov	 BYTE PTR _root$142030[esp+97], 58 ; 0000003aH
  000ad	c6 44 24 22 5c	 mov	 BYTE PTR _root$142030[esp+98], 92 ; 0000005cH
  000b2	c6 44 24 23 00	 mov	 BYTE PTR _root$142030[esp+99], 0
  000b7	ff d6		 call	 esi

; 5596 : 
; 5597 : 				if (nCurrentOS == WIN_2000 && RemoteSession)

  000b9	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _nCurrentOS, 7
  000c0	75 5b		 jne	 SHORT $LN9@BroadcastD
  000c2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _RemoteSession, 0
  000c9	74 52		 je	 SHORT $LN9@BroadcastD

; 5598 : 				{
; 5599 : 					char target[32];
; 5600 : 					snprintf (target, ARRAY_LENGTH(target), "%ls%c", TC_MOUNT_PREFIX, i + 'A');

  000cb	8d 4b 41	 lea	 ecx, DWORD PTR [ebx+65]
  000ce	51		 push	 ecx
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_1DA@GMJGMIMP@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAT?$AAr?$AAu?$AAe?$AAC?$AAr?$AAy?$AAp?$AAt?$AAV?$AAo?$AAl?$AAu?$AAm?$AAe?$AA?$AA@
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_05EMECODII@?$CFls?$CFc?$AA@
  000d9	8d 54 24 38	 lea	 edx, DWORD PTR _target$142033[esp+92]
  000dd	6a 20		 push	 32			; 00000020H
  000df	52		 push	 edx
  000e0	e8 00 00 00 00	 call	 _sprintf_s
  000e5	83 c4 14	 add	 esp, 20			; 00000014H

; 5601 : 					root[2] = 0;

  000e8	c6 44 24 12 00	 mov	 BYTE PTR _root$142030[esp+82], 0

; 5602 : 
; 5603 : 					if (message == DBT_DEVICEARRIVAL)

  000ed	81 fd 00 80 00
	00		 cmp	 ebp, 32768		; 00008000H
  000f3	75 0e		 jne	 SHORT $LN5@BroadcastD

; 5604 : 						DefineDosDevice (DDD_RAW_TARGET_PATH, root, target);

  000f5	8d 44 24 2c	 lea	 eax, DWORD PTR _target$142033[esp+80]
  000f9	50		 push	 eax
  000fa	8d 4c 24 14	 lea	 ecx, DWORD PTR _root$142030[esp+84]
  000fe	51		 push	 ecx
  000ff	6a 01		 push	 1
  00101	eb 14		 jmp	 SHORT $LN27@BroadcastD
$LN5@BroadcastD:

; 5605 : 					else if (message == DBT_DEVICEREMOVECOMPLETE)

  00103	81 fd 04 80 00
	00		 cmp	 ebp, 32772		; 00008004H
  00109	75 12		 jne	 SHORT $LN9@BroadcastD

; 5606 : 						DefineDosDevice (DDD_RAW_TARGET_PATH| DDD_REMOVE_DEFINITION
; 5607 : 						| DDD_EXACT_MATCH_ON_REMOVE, root, target);

  0010b	8d 54 24 2c	 lea	 edx, DWORD PTR _target$142033[esp+80]
  0010f	52		 push	 edx
  00110	8d 44 24 14	 lea	 eax, DWORD PTR _root$142030[esp+84]
  00114	50		 push	 eax
  00115	6a 07		 push	 7
$LN27@BroadcastD:
  00117	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefineDosDeviceA@12
$LN9@BroadcastD:

; 5589 : 	{
; 5590 : 		for (i = 0; i < 26; i++)

  0011d	43		 inc	 ebx
  0011e	83 fb 1a	 cmp	 ebx, 26			; 0000001aH
  00121	0f 8c 59 ff ff
	ff		 jl	 $LL10@BroadcastD
  00127	5b		 pop	 ebx
$LN25@BroadcastD:

; 5608 : 				}
; 5609 : 			}
; 5610 : 		}
; 5611 : 	}
; 5612 : 
; 5613 : 	dbv.dbcv_size = sizeof (dbv); 
; 5614 : 	dbv.dbcv_devicetype = DBT_DEVTYP_VOLUME; 
; 5615 : 	dbv.dbcv_reserved = 0;
; 5616 : 	dbv.dbcv_unitmask = driveMap;

  00128	8b 4c 24 58	 mov	 ecx, DWORD PTR _driveMap$[esp+72]

; 5617 : 	dbv.dbcv_flags = 0; 

  0012c	33 d2		 xor	 edx, edx

; 5618 : 
; 5619 : 	UINT timeOut = 1000;
; 5620 : 
; 5621 : 	// SHChangeNotify() works on Vista, so the Explorer does not require WM_DEVICECHANGE
; 5622 : 	if (CurrentOSMajor >= 6)

  0012e	bf 06 00 00 00	 mov	 edi, 6
  00133	39 3d 00 00 00
	00		 cmp	 DWORD PTR _CurrentOSMajor, edi
  00139	c7 44 24 14 14
	00 00 00	 mov	 DWORD PTR _dbv$[esp+76], 20 ; 00000014H
  00141	c7 44 24 18 02
	00 00 00	 mov	 DWORD PTR _dbv$[esp+80], 2
  00149	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR _dbv$[esp+84], 0
  00151	89 4c 24 20	 mov	 DWORD PTR _dbv$[esp+88], ecx
  00155	66 89 54 24 24	 mov	 WORD PTR _dbv$[esp+92], dx
  0015a	b8 e8 03 00 00	 mov	 eax, 1000		; 000003e8H
  0015f	7c 05		 jl	 SHORT $LN2@BroadcastD

; 5623 : 		timeOut = 100;

  00161	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
$LN2@BroadcastD:

; 5624 : 
; 5625 : 	IgnoreWmDeviceChange = TRUE;
; 5626 : 	SendMessageTimeout (HWND_BROADCAST, WM_DEVICECHANGE, message, (LPARAM)(&dbv), SMTO_ABORTIFHUNG, timeOut, &dwResult);

  00166	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SendMessageTimeoutA@28
  0016c	8d 4c 24 10	 lea	 ecx, DWORD PTR _dwResult$[esp+76]
  00170	51		 push	 ecx
  00171	50		 push	 eax
  00172	6a 02		 push	 2
  00174	8d 54 24 20	 lea	 edx, DWORD PTR _dbv$[esp+88]
  00178	52		 push	 edx
  00179	55		 push	 ebp
  0017a	68 19 02 00 00	 push	 537			; 00000219H
  0017f	68 ff ff 00 00	 push	 65535			; 0000ffffH
  00184	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _IgnoreWmDeviceChange, 1
  0018e	ff d6		 call	 esi

; 5627 : 
; 5628 : 	// Explorer prior Vista sometimes fails to register a new drive
; 5629 : 	if (CurrentOSMajor < 6 && message == DBT_DEVICEARRIVAL)

  00190	39 3d 00 00 00
	00		 cmp	 DWORD PTR _CurrentOSMajor, edi
  00196	7d 26		 jge	 SHORT $LN1@BroadcastD
  00198	81 fd 00 80 00
	00		 cmp	 ebp, 32768		; 00008000H
  0019e	75 1e		 jne	 SHORT $LN1@BroadcastD

; 5630 : 		SendMessageTimeout (HWND_BROADCAST, WM_DEVICECHANGE, message, (LPARAM)(&dbv), SMTO_ABORTIFHUNG, 200, &dwResult);

  001a0	8d 44 24 10	 lea	 eax, DWORD PTR _dwResult$[esp+76]
  001a4	50		 push	 eax
  001a5	68 c8 00 00 00	 push	 200			; 000000c8H
  001aa	6a 02		 push	 2
  001ac	8d 4c 24 20	 lea	 ecx, DWORD PTR _dbv$[esp+88]
  001b0	51		 push	 ecx
  001b1	55		 push	 ebp
  001b2	68 19 02 00 00	 push	 537			; 00000219H
  001b7	68 ff ff 00 00	 push	 65535			; 0000ffffH
  001bc	ff d6		 call	 esi
$LN1@BroadcastD:
  001be	5e		 pop	 esi

; 5631 : 
; 5632 : 	IgnoreWmDeviceChange = FALSE;

  001bf	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _IgnoreWmDeviceChange, 0
  001c9	5d		 pop	 ebp
$LN19@BroadcastD:

; 5633 : }

  001ca	8b 4c 24 40	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+68]
  001ce	5f		 pop	 edi
  001cf	33 cc		 xor	 ecx, esp
  001d1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d6	83 c4 40	 add	 esp, 64			; 00000040H
  001d9	c3		 ret	 0
_BroadcastDeviceChange ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@INOOLPM@UNMOUNT_FAILED?$AA@		; `string'
PUBLIC	??_C@_0BE@NAPDCKKE@UNMOUNT_LOCK_FAILED?$AA@	; `string'
PUBLIC	_UnmountVolume
EXTRN	_Error:PROC
EXTRN	_AskWarnYesNoTopmost:PROC
EXTRN	_Silent:DWORD
EXTRN	__imp__Sleep@4:PROC
;	COMDAT ??_C@_0P@INOOLPM@UNMOUNT_FAILED?$AA@
CONST	SEGMENT
??_C@_0P@INOOLPM@UNMOUNT_FAILED?$AA@ DB 'UNMOUNT_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NAPDCKKE@UNMOUNT_LOCK_FAILED?$AA@
CONST	SEGMENT
??_C@_0BE@NAPDCKKE@UNMOUNT_LOCK_FAILED?$AA@ DB 'UNMOUNT_LOCK_FAILED', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _UnmountVolume
_TEXT	SEGMENT
_unmount$151735 = -16					; size = 16
_hwndDlg$ = 8						; size = 4
_nDosDriveNo$ = 12					; size = 4
_dwResult$151736 = 16					; size = 4
_root$142222 = 16					; size = 4
_forceUnmount$ = 16					; size = 4
_UnmountVolume PROC					; COMDAT

; 5951 : {

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	53		 push	 ebx

; 5952 : 	int result;
; 5953 : 	BOOL forced = forceUnmount;
; 5954 : 	int dismountMaxRetries = UNMOUNT_MAX_AUTO_RETRIES;

  00004	8b 5c 24 1c	 mov	 ebx, DWORD PTR _nDosDriveNo$[esp+16]
  00008	55		 push	 ebp
  00009	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__DeviceIoControl@32
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	8b 7c 24 2c	 mov	 edi, DWORD PTR _forceUnmount$[esp+28]
  00015	be 1e 00 00 00	 mov	 esi, 30			; 0000001eH
  0001a	8d 9b 00 00 00
	00		 npad	 6
$retry$142211:

; 5955 : 
; 5956 : retry:
; 5957 : 	BroadcastDeviceChange (DBT_DEVICEREMOVEPENDING, nDosDriveNo, 0);

  00020	6a 00		 push	 0
  00022	53		 push	 ebx
  00023	68 03 80 00 00	 push	 32771			; 00008003H
  00028	e8 00 00 00 00	 call	 _BroadcastDeviceChange
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LL9@UnmountVol:

; 5958 : 
; 5959 : 	do
; 5960 : 	{
; 5961 : 		result = DriverUnmountVolume (hwndDlg, nDosDriveNo, forced);

  00030	6a 00		 push	 0
  00032	8d 44 24 30	 lea	 eax, DWORD PTR _dwResult$151736[esp+32]
  00036	50		 push	 eax
  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDriver
  0003c	6a 10		 push	 16			; 00000010H
  0003e	8d 4c 24 1c	 lea	 ecx, DWORD PTR _unmount$151735[esp+44]
  00042	51		 push	 ecx
  00043	6a 10		 push	 16			; 00000010H
  00045	8b d1		 mov	 edx, ecx
  00047	52		 push	 edx
  00048	68 10 20 22 00	 push	 2236432			; 00222010H
  0004d	50		 push	 eax
  0004e	89 5c 24 30	 mov	 DWORD PTR _unmount$151735[esp+64], ebx
  00052	89 7c 24 34	 mov	 DWORD PTR _unmount$151735[esp+68], edi
  00056	ff d5		 call	 ebp
  00058	85 c0		 test	 eax, eax
  0005a	74 51		 je	 SHORT $LN19@UnmountVol

; 5962 : 
; 5963 : 		if (result == ERR_FILES_OPEN)

  0005c	8b 44 24 1c	 mov	 eax, DWORD PTR _unmount$151735[esp+44]
  00060	83 f8 06	 cmp	 eax, 6
  00063	75 2d		 jne	 SHORT $LN7@UnmountVol

; 5964 : 			Sleep (UNMOUNT_AUTO_RETRY_DELAY);

  00065	6a 32		 push	 50			; 00000032H
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 5965 : 		else
; 5966 : 			break;
; 5967 : 
; 5968 : 	} while (--dismountMaxRetries > 0);

  0006d	4e		 dec	 esi
  0006e	85 f6		 test	 esi, esi
  00070	7f be		 jg	 SHORT $LL9@UnmountVol

; 5971 : 	{
; 5972 : 		if (result == ERR_FILES_OPEN && !Silent)

  00072	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  00079	75 1b		 jne	 SHORT $LN3@UnmountVol

; 5973 : 		{
; 5974 : 			if (IDYES == AskWarnYesNoTopmost ("UNMOUNT_LOCK_FAILED"))

  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NAPDCKKE@UNMOUNT_LOCK_FAILED?$AA@
  00080	e8 00 00 00 00	 call	 _AskWarnYesNoTopmost
  00085	83 c4 04	 add	 esp, 4
  00088	83 f8 06	 cmp	 eax, 6
  0008b	75 2f		 jne	 SHORT $LN2@UnmountVol

; 5975 : 			{
; 5976 : 				forced = TRUE;

  0008d	8d 78 fb	 lea	 edi, DWORD PTR [eax-5]

; 5977 : 				goto retry;

  00090	eb 8e		 jmp	 SHORT $retry$142211
$LN7@UnmountVol:

; 5969 : 
; 5970 : 	if (result != 0)

  00092	85 c0		 test	 eax, eax
  00094	74 68		 je	 SHORT $LN4@UnmountVol
$LN3@UnmountVol:

; 5988 : 		}
; 5989 : 
; 5990 : 		Error ("UNMOUNT_FAILED");

  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0P@INOOLPM@UNMOUNT_FAILED?$AA@
  0009b	e8 00 00 00 00	 call	 _Error
  000a0	83 c4 04	 add	 esp, 4
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5d		 pop	 ebp

; 5991 : 
; 5992 : 		return FALSE;

  000a6	33 c0		 xor	 eax, eax
  000a8	5b		 pop	 ebx

; 5998 : }

  000a9	83 c4 10	 add	 esp, 16			; 00000010H
  000ac	c3		 ret	 0
$LN19@UnmountVol:

; 5958 : 
; 5959 : 	do
; 5960 : 	{
; 5961 : 		result = DriverUnmountVolume (hwndDlg, nDosDriveNo, forced);

  000ad	8b 4c 24 24	 mov	 ecx, DWORD PTR _hwndDlg$[esp+28]
  000b1	51		 push	 ecx
  000b2	e8 00 00 00 00	 call	 _handleWin32Error
  000b7	83 c4 04	 add	 esp, 4
  000ba	eb da		 jmp	 SHORT $LN3@UnmountVol
$LN2@UnmountVol:

; 5978 : 			}
; 5979 : 
; 5980 : 			if (IsOSAtLeast (WIN_7))

  000bc	6a 0d		 push	 13			; 0000000dH
  000be	e8 00 00 00 00	 call	 _IsOSAtLeast
  000c3	83 c4 04	 add	 esp, 4
  000c6	85 c0		 test	 eax, eax
  000c8	74 2a		 je	 SHORT $LN1@UnmountVol

; 5981 : 			{
; 5982 : 				// Undo SHCNE_DRIVEREMOVED
; 5983 : 				char root[] = { (char) nDosDriveNo + 'A', ':', '\\', 0 };
; 5984 : 				SHChangeNotify (SHCNE_DRIVEADD, SHCNF_PATH, root, NULL);

  000ca	6a 00		 push	 0
  000cc	8d 54 24 30	 lea	 edx, DWORD PTR _root$142222[esp+32]
  000d0	52		 push	 edx
  000d1	6a 01		 push	 1
  000d3	80 c3 41	 add	 bl, 65			; 00000041H
  000d6	68 00 01 00 00	 push	 256			; 00000100H
  000db	88 5c 24 3c	 mov	 BYTE PTR _root$142222[esp+44], bl
  000df	c6 44 24 3d 3a	 mov	 BYTE PTR _root$142222[esp+45], 58 ; 0000003aH
  000e4	c6 44 24 3e 5c	 mov	 BYTE PTR _root$142222[esp+46], 92 ; 0000005cH
  000e9	c6 44 24 3f 00	 mov	 BYTE PTR _root$142222[esp+47], 0
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHChangeNotify@16
$LN1@UnmountVol:
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5d		 pop	 ebp

; 5985 : 			}
; 5986 : 
; 5987 : 			return FALSE;

  000f7	33 c0		 xor	 eax, eax
  000f9	5b		 pop	 ebx

; 5998 : }

  000fa	83 c4 10	 add	 esp, 16			; 00000010H
  000fd	c3		 ret	 0
$LN4@UnmountVol:

; 5993 : 	} 
; 5994 : 	
; 5995 : 	BroadcastDeviceChange (DBT_DEVICEREMOVECOMPLETE, nDosDriveNo, 0);

  000fe	6a 00		 push	 0
  00100	53		 push	 ebx
  00101	68 04 80 00 00	 push	 32772			; 00008004H
  00106	e8 00 00 00 00	 call	 _BroadcastDeviceChange
  0010b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi
  00110	5d		 pop	 ebp

; 5996 : 
; 5997 : 	return TRUE;

  00111	b8 01 00 00 00	 mov	 eax, 1
  00116	5b		 pop	 ebx

; 5998 : }

  00117	83 c4 10	 add	 esp, 16			; 00000010H
  0011a	c3		 ret	 0
_UnmountVolume ENDP
_TEXT	ENDS
PUBLIC	_IsPasswordCacheEmpty
; Function compile flags: /Ogtpy
;	COMDAT _IsPasswordCacheEmpty
_TEXT	SEGMENT
_dw$ = -4						; size = 4
_IsPasswordCacheEmpty PROC				; COMDAT

; 6002 : {

  00000	51		 push	 ecx

; 6003 : 	DWORD dw;
; 6004 : 	return !DeviceIoControl (hDriver, TC_IOCTL_GET_PASSWORD_CACHE_STATUS, 0, 0, 0, 0, &dw, 0);

  00001	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hDriver
  00007	6a 00		 push	 0
  00009	8d 44 24 04	 lea	 eax, DWORD PTR _dw$[esp+8]
  0000d	50		 push	 eax
  0000e	6a 00		 push	 0
  00010	6a 00		 push	 0
  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	68 2c 20 22 00	 push	 2236460			; 0022202cH
  0001b	51		 push	 ecx
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  00022	f7 d8		 neg	 eax
  00024	1b c0		 sbb	 eax, eax
  00026	40		 inc	 eax

; 6005 : }

  00027	59		 pop	 ecx
  00028	c3		 ret	 0
_IsPasswordCacheEmpty ENDP
_TEXT	ENDS
PUBLIC	??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs?$AA?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_GetPartitionInfo
EXTRN	__snwprintf:PROC
;	COMDAT ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs?$AA?$AA@ DB '%', 00H, 'h', 00H, 's', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _GetPartitionInfo
_TEXT	SEGMENT
_dwResult$ = -568					; size = 4
_dpi$ = -564						; size = 560
__$ArrayPad$ = -4					; size = 4
_deviceName$ = 8					; size = 4
_rpartInfo$ = 12					; size = 4
_GetPartitionInfo PROC					; COMDAT

; 6017 : {

  00000	81 ec 38 02 00
	00		 sub	 esp, 568		; 00000238H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 34 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+568], eax
  00014	56		 push	 esi
  00015	8b b4 24 40 02
	00 00		 mov	 esi, DWORD PTR _deviceName$[esp+568]
  0001c	57		 push	 edi
  0001d	8b bc 24 48 02
	00 00		 mov	 edi, DWORD PTR _rpartInfo$[esp+572]

; 6018 : 	BOOL bResult;
; 6019 : 	DWORD dwResult;
; 6020 : 	DISK_PARTITION_INFO_STRUCT dpi;
; 6021 : 
; 6022 : 	memset (&dpi, 0, sizeof(dpi));

  00024	68 30 02 00 00	 push	 560			; 00000230H
  00029	8d 44 24 10	 lea	 eax, DWORD PTR _dpi$[esp+580]
  0002d	6a 00		 push	 0
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 _memset

; 6023 : 	_snwprintf ((PWSTR) &dpi.deviceName, ARRAY_LENGTH(dpi.deviceName), L"%hs", deviceName);

  00035	56		 push	 esi
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs?$AA?$AA@
  0003b	8d 4c 24 20	 lea	 ecx, DWORD PTR _dpi$[esp+596]
  0003f	68 04 01 00 00	 push	 260			; 00000104H
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 __snwprintf
  0004a	83 c4 1c	 add	 esp, 28			; 0000001cH

; 6024 : 
; 6025 : 	bResult = DeviceIoControl (hDriver, TC_IOCTL_GET_DRIVE_PARTITION_INFO, &dpi,
; 6026 : 		sizeof (dpi), &dpi, sizeof (dpi), &dwResult, NULL);

  0004d	6a 00		 push	 0
  0004f	8d 54 24 0c	 lea	 edx, DWORD PTR _dwResult$[esp+580]
  00053	52		 push	 edx
  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hDriver
  0005a	68 30 02 00 00	 push	 560			; 00000230H
  0005f	8d 44 24 18	 lea	 eax, DWORD PTR _dpi$[esp+588]
  00063	50		 push	 eax
  00064	68 30 02 00 00	 push	 560			; 00000230H
  00069	8b c8		 mov	 ecx, eax
  0006b	51		 push	 ecx
  0006c	68 38 20 22 00	 push	 2236472			; 00222038H
  00071	52		 push	 edx
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 6027 : 
; 6028 : 	memcpy (rpartInfo, &dpi.partInfo, sizeof (PARTITION_INFORMATION));

  00078	b9 08 00 00 00	 mov	 ecx, 8
  0007d	8d b4 24 14 02
	00 00		 lea	 esi, DWORD PTR _dpi$[esp+1096]
  00084	f3 a5		 rep movsd

; 6029 : 	return bResult;
; 6030 : }

  00086	8b 8c 24 3c 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+576]
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	33 cc		 xor	 ecx, esp
  00091	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00096	81 c4 38 02 00
	00		 add	 esp, 568		; 00000238H
  0009c	c3		 ret	 0
_GetPartitionInfo ENDP
_TEXT	ENDS
PUBLIC	__real@4059000000000000
PUBLIC	??_C@_0BB@FNOFFGJI@CANT_GET_VOLSIZE?$AA@	; `string'
PUBLIC	??_C@_0BC@LBACDGOD@CANNOT_CALC_SPACE?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_GetStatsFreeSpaceOnPartition
EXTRN	__imp__GetDiskFreeSpaceExA@16:PROC
EXTRN	_GetDiskDeviceDriveLetter:PROC
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT ??_C@_0BB@FNOFFGJI@CANT_GET_VOLSIZE?$AA@
CONST	SEGMENT
??_C@_0BB@FNOFFGJI@CANT_GET_VOLSIZE?$AA@ DB 'CANT_GET_VOLSIZE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LBACDGOD@CANNOT_CALC_SPACE?$AA@
CONST	SEGMENT
??_C@_0BC@LBACDGOD@CANNOT_CALC_SPACE?$AA@ DB 'CANNOT_CALC_SPACE', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _GetStatsFreeSpaceOnPartition
_TEXT	SEGMENT
_szRootPath$ = -584					; size = 4
tv186 = -580						; size = 8
tv183 = -580						; size = 8
_freeSpaceSize$ = -580					; size = 8
_totalNumberOfFreeBytes$ = -572				; size = 8
_partitionInfo$142258 = -564				; size = 32
_totalNumberOfBytes$ = -532				; size = 8
_devPath$ = -524					; size = 520
__$ArrayPad$ = -4					; size = 4
_devicePath$ = 8					; size = 4
_percentFree$ = 12					; size = 4
_occupiedBytes$ = 16					; size = 4
_silent$ = 20						; size = 4
_GetStatsFreeSpaceOnPartition PROC			; COMDAT

; 6043 : {

  00000	81 ec 48 02 00
	00		 sub	 esp, 584		; 00000248H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 44 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+584], eax
  00014	55		 push	 ebp
  00015	8b ac 24 54 02
	00 00		 mov	 ebp, DWORD PTR _percentFree$[esp+584]
  0001c	56		 push	 esi
  0001d	8b b4 24 54 02
	00 00		 mov	 esi, DWORD PTR _devicePath$[esp+588]

; 6044 : 	WCHAR devPath [MAX_PATH];
; 6045 : 	int driveLetterNo = -1;
; 6046 : 	char szRootPath[4] = {0, ':', '\\', 0};
; 6047 : 	ULARGE_INTEGER freeSpaceSize;
; 6048 : 	ULARGE_INTEGER totalNumberOfBytes;
; 6049 : 	ULARGE_INTEGER totalNumberOfFreeBytes;
; 6050 : 
; 6051 : 	strcpy ((char *) devPath, devicePath);

  00024	8d 54 24 44	 lea	 edx, DWORD PTR _devPath$[esp+592]
  00028	57		 push	 edi
  00029	8b bc 24 60 02
	00 00		 mov	 edi, DWORD PTR _occupiedBytes$[esp+592]
  00030	c6 44 24 0c 00	 mov	 BYTE PTR _szRootPath$[esp+596], 0
  00035	c6 44 24 0d 3a	 mov	 BYTE PTR _szRootPath$[esp+597], 58 ; 0000003aH
  0003a	c6 44 24 0e 5c	 mov	 BYTE PTR _szRootPath$[esp+598], 92 ; 0000005cH
  0003f	c6 44 24 0f 00	 mov	 BYTE PTR _szRootPath$[esp+599], 0
  00044	8b c6		 mov	 eax, esi
  00046	2b d6		 sub	 edx, esi
$LL11@GetStatsFr:
  00048	8a 08		 mov	 cl, BYTE PTR [eax]
  0004a	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0004d	40		 inc	 eax
  0004e	84 c9		 test	 cl, cl
  00050	75 f6		 jne	 SHORT $LL11@GetStatsFr

; 6052 : 	ToUNICODE ((char *) devPath);

  00052	8d 44 24 48	 lea	 eax, DWORD PTR _devPath$[esp+596]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _ToUNICODE

; 6053 : 
; 6054 : 	driveLetterNo = GetDiskDeviceDriveLetter (devPath);

  0005c	8d 4c 24 4c	 lea	 ecx, DWORD PTR _devPath$[esp+600]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 _GetDiskDeviceDriveLetter
  00066	83 c4 08	 add	 esp, 8

; 6055 : 	szRootPath[0] = (char) driveLetterNo + 'A';

  00069	04 41		 add	 al, 65			; 00000041H

; 6056 : 
; 6057 : 
; 6058 : 	if (!GetDiskFreeSpaceEx (szRootPath, &freeSpaceSize, &totalNumberOfBytes, &totalNumberOfFreeBytes))

  0006b	8d 54 24 18	 lea	 edx, DWORD PTR _totalNumberOfFreeBytes$[esp+596]
  0006f	52		 push	 edx
  00070	88 44 24 10	 mov	 BYTE PTR _szRootPath$[esp+600], al
  00074	8d 44 24 44	 lea	 eax, DWORD PTR _totalNumberOfBytes$[esp+600]
  00078	50		 push	 eax
  00079	8d 4c 24 18	 lea	 ecx, DWORD PTR _freeSpaceSize$[esp+604]
  0007d	51		 push	 ecx
  0007e	8d 54 24 18	 lea	 edx, DWORD PTR _szRootPath$[esp+608]
  00082	52		 push	 edx
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDiskFreeSpaceExA@16
  00089	85 c0		 test	 eax, eax
  0008b	75 3e		 jne	 SHORT $LN8@GetStatsFr

; 6059 : 	{
; 6060 : 		if (!silent)

  0008d	39 84 24 64 02
	00 00		 cmp	 DWORD PTR _silent$[esp+592], eax
  00094	75 18		 jne	 SHORT $LN7@GetStatsFr

; 6061 : 		{
; 6062 : 			handleWin32Error (MainDlg);

  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 _handleWin32Error

; 6063 : 			Error ("CANNOT_CALC_SPACE");

  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LBACDGOD@CANNOT_CALC_SPACE?$AA@
  000a6	e8 00 00 00 00	 call	 _Error
  000ab	83 c4 08	 add	 esp, 8
$LN7@GetStatsFr:
  000ae	5f		 pop	 edi

; 6064 : 		}
; 6065 : 
; 6066 : 		return -1;

  000af	83 c8 ff	 or	 eax, -1
  000b2	5e		 pop	 esi
  000b3	0b d0		 or	 edx, eax
  000b5	5d		 pop	 ebp

; 6091 : 	}
; 6092 : 
; 6093 : 	return freeSpaceSize.QuadPart;
; 6094 : }

  000b6	8b 8c 24 44 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+584]
  000bd	33 cc		 xor	 ecx, esp
  000bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c4	81 c4 48 02 00
	00		 add	 esp, 584		; 00000248H
  000ca	c3		 ret	 0
$LN8@GetStatsFr:

; 6067 : 	}
; 6068 : 
; 6069 : 
; 6070 : 	if (percentFree != NULL || occupiedBytes != NULL)

  000cb	85 ed		 test	 ebp, ebp
  000cd	75 08		 jne	 SHORT $LN5@GetStatsFr
  000cf	85 ff		 test	 edi, edi
  000d1	0f 84 c9 00 00
	00		 je	 $LN13@GetStatsFr
$LN5@GetStatsFr:

; 6071 : 	{
; 6072 : 		// Determine occupied space and % of free space
; 6073 : 
; 6074 : 		PARTITION_INFORMATION partitionInfo;
; 6075 : 
; 6076 : 		if (!GetPartitionInfo (devicePath, &partitionInfo))

  000d7	8d 4c 24 20	 lea	 ecx, DWORD PTR _partitionInfo$142258[esp+596]
  000db	51		 push	 ecx
  000dc	56		 push	 esi
  000dd	e8 00 00 00 00	 call	 _GetPartitionInfo
  000e2	83 c4 08	 add	 esp, 8
  000e5	85 c0		 test	 eax, eax
  000e7	75 3f		 jne	 SHORT $LN4@GetStatsFr

; 6077 : 		{
; 6078 : 			if (!silent)

  000e9	39 84 24 64 02
	00 00		 cmp	 DWORD PTR _silent$[esp+592], eax
  000f0	75 bc		 jne	 SHORT $LN7@GetStatsFr

; 6079 : 			{
; 6080 : 				handleWin32Error (MainDlg);

  000f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  000f8	52		 push	 edx
  000f9	e8 00 00 00 00	 call	 _handleWin32Error

; 6081 : 				Error ("CANT_GET_VOLSIZE");

  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FNOFFGJI@CANT_GET_VOLSIZE?$AA@
  00103	e8 00 00 00 00	 call	 _Error
  00108	83 c4 08	 add	 esp, 8
  0010b	5f		 pop	 edi

; 6082 : 			}
; 6083 : 			return -1;

  0010c	83 c8 ff	 or	 eax, -1
  0010f	5e		 pop	 esi
  00110	0b d0		 or	 edx, eax
  00112	5d		 pop	 ebp

; 6091 : 	}
; 6092 : 
; 6093 : 	return freeSpaceSize.QuadPart;
; 6094 : }

  00113	8b 8c 24 44 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+584]
  0011a	33 cc		 xor	 ecx, esp
  0011c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00121	81 c4 48 02 00
	00		 add	 esp, 584		; 00000248H
  00127	c3		 ret	 0
$LN4@GetStatsFr:

; 6084 : 		}
; 6085 : 
; 6086 : 		if (occupiedBytes != NULL)

  00128	8b 54 24 14	 mov	 edx, DWORD PTR _freeSpaceSize$[esp+600]
  0012c	8b 44 24 10	 mov	 eax, DWORD PTR _freeSpaceSize$[esp+596]
  00130	85 ff		 test	 edi, edi
  00132	74 11		 je	 SHORT $LN2@GetStatsFr

; 6087 : 			*occupiedBytes = partitionInfo.PartitionLength.QuadPart - freeSpaceSize.QuadPart;

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR _partitionInfo$142258[esp+604]
  00138	8b 74 24 2c	 mov	 esi, DWORD PTR _partitionInfo$142258[esp+608]
  0013c	2b c8		 sub	 ecx, eax
  0013e	1b f2		 sbb	 esi, edx
  00140	89 0f		 mov	 DWORD PTR [edi], ecx
  00142	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN2@GetStatsFr:

; 6088 : 
; 6089 : 		if (percentFree != NULL)

  00145	85 ed		 test	 ebp, ebp
  00147	74 5f		 je	 SHORT $LN9@GetStatsFr

; 6090 : 			*percentFree = (float) ((double) freeSpaceSize.QuadPart / (double) partitionInfo.PartitionLength.QuadPart * 100.0);

  00149	8b ca		 mov	 ecx, edx
  0014b	8b f2		 mov	 esi, edx
  0014d	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  00153	89 44 24 10	 mov	 DWORD PTR tv186[esp+596], eax
  00157	89 4c 24 14	 mov	 DWORD PTR tv186[esp+600], ecx
  0015b	df 6c 24 10	 fild	 QWORD PTR tv186[esp+596]
  0015f	81 e6 00 00 00
	80		 and	 esi, -2147483648	; 80000000H
  00165	89 74 24 14	 mov	 DWORD PTR tv183[esp+600], esi
  00169	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR tv183[esp+596], 0
  00171	df 6c 24 10	 fild	 QWORD PTR tv183[esp+596]
  00175	5f		 pop	 edi
  00176	5e		 pop	 esi
  00177	d9 e0		 fchs
  00179	de c1		 faddp	 ST(1), ST(0)
  0017b	df 6c 24 20	 fild	 QWORD PTR _partitionInfo$142258[esp+596]
  0017f	de f9		 fdivp	 ST(1), ST(0)
  00181	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  00187	d9 5d 00	 fstp	 DWORD PTR [ebp]
  0018a	5d		 pop	 ebp

; 6091 : 	}
; 6092 : 
; 6093 : 	return freeSpaceSize.QuadPart;
; 6094 : }

  0018b	8b 8c 24 44 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+584]
  00192	33 cc		 xor	 ecx, esp
  00194	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00199	81 c4 48 02 00
	00		 add	 esp, 584		; 00000248H
  0019f	c3		 ret	 0
$LN13@GetStatsFr:

; 6090 : 			*percentFree = (float) ((double) freeSpaceSize.QuadPart / (double) partitionInfo.PartitionLength.QuadPart * 100.0);

  001a0	8b 54 24 14	 mov	 edx, DWORD PTR _freeSpaceSize$[esp+600]
  001a4	8b 44 24 10	 mov	 eax, DWORD PTR _freeSpaceSize$[esp+596]
$LN9@GetStatsFr:

; 6091 : 	}
; 6092 : 
; 6093 : 	return freeSpaceSize.QuadPart;
; 6094 : }

  001a8	8b 8c 24 50 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+596]
  001af	5f		 pop	 edi
  001b0	5e		 pop	 esi
  001b1	5d		 pop	 ebp
  001b2	33 cc		 xor	 ecx, esp
  001b4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b9	81 c4 48 02 00
	00		 add	 esp, 584		; 00000248H
  001bf	c3		 ret	 0
_GetStatsFreeSpaceOnPartition ENDP
_TEXT	ENDS
PUBLIC	_GetDeviceSize
; Function compile flags: /Ogtpy
;	COMDAT _GetDeviceSize
_TEXT	SEGMENT
_partitionInfo$ = -32					; size = 32
_devicePath$ = 8					; size = 4
_GetDeviceSize PROC					; COMDAT

; 6100 : 	PARTITION_INFORMATION partitionInfo;
; 6101 : 
; 6102 : 	if (!GetPartitionInfo (devicePath, &partitionInfo))

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _devicePath$[esp-4]
  00004	83 ec 20	 sub	 esp, 32			; 00000020H
  00007	8d 04 24	 lea	 eax, DWORD PTR _partitionInfo$[esp+32]
  0000a	50		 push	 eax
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 _GetPartitionInfo
  00011	83 c4 08	 add	 esp, 8
  00014	85 c0		 test	 eax, eax
  00016	75 09		 jne	 SHORT $LN1@GetDeviceS

; 6103 : 		return -1;

  00018	83 c8 ff	 or	 eax, -1
  0001b	0b d0		 or	 edx, eax

; 6106 : }

  0001d	83 c4 20	 add	 esp, 32			; 00000020H
  00020	c3		 ret	 0
$LN1@GetDeviceS:

; 6104 : 
; 6105 : 	return partitionInfo.PartitionLength.QuadPart;

  00021	8b 44 24 08	 mov	 eax, DWORD PTR _partitionInfo$[esp+40]
  00025	8b 54 24 0c	 mov	 edx, DWORD PTR _partitionInfo$[esp+44]

; 6106 : }

  00029	83 c4 20	 add	 esp, 32			; 00000020H
  0002c	c3		 ret	 0
_GetDeviceSize ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_DismountDrive
; Function compile flags: /Ogtpy
;	COMDAT _DismountDrive
_TEXT	SEGMENT
_dwResult$ = -528					; size = 4
_devPath$ = -524					; size = 520
__$ArrayPad$ = -4					; size = 4
_devName$ = 8						; size = 4
_devicePath$ = 12					; size = 4
_DismountDrive PROC					; COMDAT

; 6110 : {

  00000	81 ec 10 02 00
	00		 sub	 esp, 528		; 00000210H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 0c 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+528], eax

; 6111 : 	DWORD dwResult;
; 6112 : 	HANDLE hVolume;
; 6113 : 	BOOL bResult = FALSE;
; 6114 : 	int attempt = UNMOUNT_MAX_AUTO_RETRIES;
; 6115 : 	int driveLetterNo = -1;
; 6116 : 	WCHAR devPath [MAX_PATH];
; 6117 : 
; 6118 : 	strcpy ((char *) devPath, devicePath);

  00014	8b 84 24 18 02
	00 00		 mov	 eax, DWORD PTR _devicePath$[esp+524]
  0001b	53		 push	 ebx
  0001c	56		 push	 esi
  0001d	8b b4 24 1c 02
	00 00		 mov	 esi, DWORD PTR _devName$[esp+532]
  00024	8d 54 24 0c	 lea	 edx, DWORD PTR _devPath$[esp+536]
  00028	57		 push	 edi
  00029	bb 1e 00 00 00	 mov	 ebx, 30			; 0000001eH
  0002e	2b d0		 sub	 edx, eax
$LL9@DismountDr:
  00030	8a 08		 mov	 cl, BYTE PTR [eax]
  00032	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00035	40		 inc	 eax
  00036	84 c9		 test	 cl, cl
  00038	75 f6		 jne	 SHORT $LL9@DismountDr

; 6119 : 	ToUNICODE ((char *) devPath);

  0003a	8d 44 24 10	 lea	 eax, DWORD PTR _devPath$[esp+540]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _ToUNICODE

; 6120 : 	driveLetterNo = GetDiskDeviceDriveLetter (devPath);

  00044	8d 4c 24 14	 lea	 ecx, DWORD PTR _devPath$[esp+544]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 _GetDiskDeviceDriveLetter
  0004e	83 c4 08	 add	 esp, 8

; 6121 : 
; 6122 : 
; 6123 : 	hVolume = CreateFile (devName, GENERIC_READ | GENERIC_WRITE,
; 6124 : 		FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00051	6a 00		 push	 0
  00053	6a 00		 push	 0
  00055	6a 03		 push	 3
  00057	6a 00		 push	 0
  00059	6a 03		 push	 3
  0005b	68 00 00 00 c0	 push	 -1073741824		; c0000000H
  00060	56		 push	 esi
  00061	8b f8		 mov	 edi, eax
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00069	8b f0		 mov	 esi, eax

; 6125 : 
; 6126 : 	if (hVolume == INVALID_HANDLE_VALUE)

  0006b	83 fe ff	 cmp	 esi, -1
  0006e	75 1a		 jne	 SHORT $LN6@DismountDr
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi

; 6127 : 		return INVALID_HANDLE_VALUE;

  00072	0b c0		 or	 eax, eax
  00074	5b		 pop	 ebx

; 6158 : }

  00075	8b 8c 24 0c 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+528]
  0007c	33 cc		 xor	 ecx, esp
  0007e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00083	81 c4 10 02 00
	00		 add	 esp, 528		; 00000210H
  00089	c3		 ret	 0
$LN6@DismountDr:

; 6128 : 
; 6129 : 
; 6130 : 	// Try to lock the volume first so that dismount is not forced. 
; 6131 : 	// If we fail, we will dismount anyway even if it needs to be forced.
; 6132 : 
; 6133 : 	CloseVolumeExplorerWindows (MainDlg, driveLetterNo);

  0008a	85 ff		 test	 edi, edi
  0008c	7c 16		 jl	 SHORT $LN16@DismountDr
  0008e	57		 push	 edi
  0008f	68 00 00 00 00	 push	 OFFSET _CloseVolumeExplorerWindowsEnum@8
  00094	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _explorerCloseSent, 0
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumWindows@8
$LN16@DismountDr:

; 6134 : 
; 6135 : 	while (!(bResult = DeviceIoControl (hVolume, FSCTL_LOCK_VOLUME, NULL, 0, NULL, 0, &dwResult, NULL)) 
; 6136 : 		&& attempt > 0)

  000a4	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__DeviceIoControl@32
  000aa	55		 push	 ebp
  000ab	6a 00		 push	 0
  000ad	8d 54 24 14	 lea	 edx, DWORD PTR _dwResult$[esp+548]
  000b1	52		 push	 edx
  000b2	6a 00		 push	 0
  000b4	6a 00		 push	 0
  000b6	6a 00		 push	 0
  000b8	6a 00		 push	 0
  000ba	68 18 00 09 00	 push	 589848			; 00090018H
  000bf	56		 push	 esi
  000c0	ff d7		 call	 edi
  000c2	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__Sleep@4
  000c8	85 c0		 test	 eax, eax
  000ca	75 28		 jne	 SHORT $LN4@DismountDr
  000cc	8d 64 24 00	 npad	 4
$LL5@DismountDr:
  000d0	85 db		 test	 ebx, ebx
  000d2	7e 20		 jle	 SHORT $LN4@DismountDr

; 6137 : 	{
; 6138 : 		Sleep (UNMOUNT_AUTO_RETRY_DELAY);

  000d4	6a 32		 push	 50			; 00000032H
  000d6	ff d5		 call	 ebp
  000d8	6a 00		 push	 0
  000da	8d 44 24 14	 lea	 eax, DWORD PTR _dwResult$[esp+548]
  000de	50		 push	 eax
  000df	6a 00		 push	 0
  000e1	6a 00		 push	 0
  000e3	6a 00		 push	 0
  000e5	6a 00		 push	 0
  000e7	68 18 00 09 00	 push	 589848			; 00090018H
  000ec	56		 push	 esi

; 6139 : 		attempt--;

  000ed	4b		 dec	 ebx
  000ee	ff d7		 call	 edi
  000f0	85 c0		 test	 eax, eax
  000f2	74 dc		 je	 SHORT $LL5@DismountDr
$LN4@DismountDr:

; 6140 : 	}
; 6141 : 
; 6142 : 
; 6143 : 	// Try to dismount the volume
; 6144 : 
; 6145 : 	attempt = UNMOUNT_MAX_AUTO_RETRIES;
; 6146 : 
; 6147 : 	while (!(bResult = DeviceIoControl (hVolume, FSCTL_DISMOUNT_VOLUME, NULL, 0, NULL, 0, &dwResult, NULL)) 
; 6148 : 		&& attempt > 0)

  000f4	6a 00		 push	 0
  000f6	8d 4c 24 14	 lea	 ecx, DWORD PTR _dwResult$[esp+548]
  000fa	51		 push	 ecx
  000fb	6a 00		 push	 0
  000fd	6a 00		 push	 0
  000ff	6a 00		 push	 0
  00101	6a 00		 push	 0
  00103	68 20 00 09 00	 push	 589856			; 00090020H
  00108	56		 push	 esi
  00109	bb 1e 00 00 00	 mov	 ebx, 30			; 0000001eH
  0010e	ff d7		 call	 edi
  00110	85 c0		 test	 eax, eax
  00112	75 24		 jne	 SHORT $LN20@DismountDr
$LL3@DismountDr:
  00114	85 db		 test	 ebx, ebx
  00116	7e 24		 jle	 SHORT $LN2@DismountDr

; 6149 : 	{
; 6150 : 		Sleep (UNMOUNT_AUTO_RETRY_DELAY);

  00118	6a 32		 push	 50			; 00000032H
  0011a	ff d5		 call	 ebp
  0011c	6a 00		 push	 0
  0011e	8d 54 24 14	 lea	 edx, DWORD PTR _dwResult$[esp+548]
  00122	52		 push	 edx
  00123	6a 00		 push	 0
  00125	6a 00		 push	 0
  00127	6a 00		 push	 0
  00129	6a 00		 push	 0
  0012b	68 20 00 09 00	 push	 589856			; 00090020H
  00130	56		 push	 esi

; 6151 : 		attempt--;

  00131	4b		 dec	 ebx
  00132	ff d7		 call	 edi
  00134	85 c0		 test	 eax, eax
  00136	74 dc		 je	 SHORT $LL3@DismountDr
$LN20@DismountDr:

; 6156 : 
; 6157 : 	return (bResult ? hVolume : INVALID_HANDLE_VALUE);

  00138	8b c6		 mov	 eax, esi
  0013a	eb 0e		 jmp	 SHORT $LN11@DismountDr
$LN2@DismountDr:

; 6152 : 	}
; 6153 : 
; 6154 : 	if (!bResult)

  0013c	85 c0		 test	 eax, eax
  0013e	75 f8		 jne	 SHORT $LN20@DismountDr

; 6155 : 		CloseHandle (hVolume);

  00140	56		 push	 esi
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 6156 : 
; 6157 : 	return (bResult ? hVolume : INVALID_HANDLE_VALUE);

  00147	83 c8 ff	 or	 eax, -1
$LN11@DismountDr:

; 6158 : }

  0014a	8b 8c 24 1c 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+544]
  00151	5d		 pop	 ebp
  00152	5f		 pop	 edi
  00153	5e		 pop	 esi
  00154	5b		 pop	 ebx
  00155	33 cc		 xor	 ecx, esp
  00157	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015c	81 c4 10 02 00
	00		 add	 esp, 528		; 00000210H
  00162	c3		 ret	 0
_DismountDrive ENDP
_TEXT	ENDS
PUBLIC	_FindString
; Function compile flags: /Ogtpy
;	COMDAT _FindString
_TEXT	SEGMENT
$T151797 = -8						; size = 8
_buf$ = 8						; size = 4
_str$ = 12						; size = 4
_bufLen$ = 16						; size = 8
_strLen$ = 24						; size = 4
_startOffset$ = 28					; size = 8
_FindString PROC					; COMDAT

; 6164 : {

  00000	83 ec 08	 sub	 esp, 8

; 6165 : 	if (buf == NULL 
; 6166 : 		|| str == NULL 
; 6167 : 		|| strLen > bufLen
; 6168 : 		|| bufLen < 1
; 6169 : 		|| strLen < 1
; 6170 : 		|| startOffset > bufLen - strLen)

  00003	83 7c 24 0c 00	 cmp	 DWORD PTR _buf$[esp+4], 0
  00008	53		 push	 ebx
  00009	55		 push	 ebp
  0000a	0f 84 e5 00 00
	00		 je	 $LN5@FindString
  00010	83 7c 24 18 00	 cmp	 DWORD PTR _str$[esp+12], 0
  00015	0f 84 da 00 00
	00		 je	 $LN5@FindString
  0001b	8b 44 24 20	 mov	 eax, DWORD PTR _bufLen$[esp+16]
  0001f	8b 6c 24 24	 mov	 ebp, DWORD PTR _strLen$[esp+12]
  00023	33 d2		 xor	 edx, edx
  00025	3b d0		 cmp	 edx, eax
  00027	0f 8f c8 00 00
	00		 jg	 $LN5@FindString
  0002d	8b 4c 24 1c	 mov	 ecx, DWORD PTR _bufLen$[esp+12]
  00031	7c 08		 jl	 SHORT $LN20@FindString
  00033	3b e9		 cmp	 ebp, ecx
  00035	0f 87 ba 00 00
	00		 ja	 $LN5@FindString
$LN20@FindString:
  0003b	85 c0		 test	 eax, eax
  0003d	0f 8c b2 00 00
	00		 jl	 $LN5@FindString
  00043	7f 09		 jg	 SHORT $LN24@FindString
  00045	83 f9 01	 cmp	 ecx, 1
  00048	0f 82 a7 00 00
	00		 jb	 $LN5@FindString
$LN24@FindString:
  0004e	83 fd 01	 cmp	 ebp, 1
  00051	0f 82 9e 00 00
	00		 jb	 $LN5@FindString
  00057	2b cd		 sub	 ecx, ebp
  00059	1b c2		 sbb	 eax, edx
  0005b	8b 54 24 2c	 mov	 edx, DWORD PTR _startOffset$[esp+16]
  0005f	3b d0		 cmp	 edx, eax
  00061	0f 8f 8e 00 00
	00		 jg	 $LN5@FindString
  00067	8b 5c 24 28	 mov	 ebx, DWORD PTR _startOffset$[esp+12]
  0006b	7c 08		 jl	 SHORT $LN22@FindString
  0006d	3b d9		 cmp	 ebx, ecx
  0006f	0f 87 80 00 00
	00		 ja	 $LN5@FindString
$LN22@FindString:
  00075	56		 push	 esi
  00076	89 4c 24 0c	 mov	 DWORD PTR $T151797[esp+20], ecx

; 6173 : 	}
; 6174 : 
; 6175 : 	for (int64 i = startOffset; i <= bufLen - strLen; i++)

  0007a	89 44 24 10	 mov	 DWORD PTR $T151797[esp+24], eax
  0007e	57		 push	 edi
  0007f	90		 npad	 1
$LL25@FindString:

; 6176 : 	{
; 6177 : 		if (memcmp (buf + i, str, strLen) == 0)

  00080	8b 44 24 1c	 mov	 eax, DWORD PTR _buf$[esp+20]
  00084	8b 74 24 20	 mov	 esi, DWORD PTR _str$[esp+20]
  00088	8b cd		 mov	 ecx, ebp
  0008a	8d 3c 03	 lea	 edi, DWORD PTR [ebx+eax]
  0008d	83 fd 04	 cmp	 ebp, 4
  00090	72 14		 jb	 SHORT $LN16@FindString
$LL10@FindString:
  00092	8b 07		 mov	 eax, DWORD PTR [edi]
  00094	3b 06		 cmp	 eax, DWORD PTR [esi]
  00096	75 32		 jne	 SHORT $LN3@FindString
  00098	83 e9 04	 sub	 ecx, 4
  0009b	83 c6 04	 add	 esi, 4
  0009e	83 c7 04	 add	 edi, 4
  000a1	83 f9 04	 cmp	 ecx, 4
  000a4	73 ec		 jae	 SHORT $LL10@FindString
$LN16@FindString:
  000a6	85 c9		 test	 ecx, ecx
  000a8	74 41		 je	 SHORT $LN17@FindString
  000aa	8a 06		 mov	 al, BYTE PTR [esi]
  000ac	3a 07		 cmp	 al, BYTE PTR [edi]
  000ae	75 1a		 jne	 SHORT $LN3@FindString
  000b0	83 f9 01	 cmp	 ecx, 1
  000b3	76 36		 jbe	 SHORT $LN17@FindString
  000b5	8a 46 01	 mov	 al, BYTE PTR [esi+1]
  000b8	3a 47 01	 cmp	 al, BYTE PTR [edi+1]
  000bb	75 0d		 jne	 SHORT $LN3@FindString
  000bd	83 f9 02	 cmp	 ecx, 2
  000c0	76 29		 jbe	 SHORT $LN17@FindString
  000c2	8a 4e 02	 mov	 cl, BYTE PTR [esi+2]
  000c5	3a 4f 02	 cmp	 cl, BYTE PTR [edi+2]
  000c8	74 21		 je	 SHORT $LN17@FindString
$LN3@FindString:

; 6173 : 	}
; 6174 : 
; 6175 : 	for (int64 i = startOffset; i <= bufLen - strLen; i++)

  000ca	83 c3 01	 add	 ebx, 1
  000cd	83 d2 00	 adc	 edx, 0
  000d0	3b 54 24 14	 cmp	 edx, DWORD PTR $T151797[esp+28]
  000d4	7c aa		 jl	 SHORT $LL25@FindString
  000d6	7f 06		 jg	 SHORT $LN2@FindString
  000d8	3b 5c 24 10	 cmp	 ebx, DWORD PTR $T151797[esp+24]
  000dc	76 a2		 jbe	 SHORT $LL25@FindString
$LN2@FindString:
  000de	5f		 pop	 edi
  000df	5e		 pop	 esi

; 6179 : 	}
; 6180 : 
; 6181 : 	return -1;

  000e0	83 c8 ff	 or	 eax, -1
  000e3	5d		 pop	 ebp
  000e4	0b d0		 or	 edx, eax
  000e6	5b		 pop	 ebx

; 6182 : }

  000e7	83 c4 08	 add	 esp, 8
  000ea	c3		 ret	 0
$LN17@FindString:
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	5d		 pop	 ebp

; 6178 : 			return i;

  000ee	8b c3		 mov	 eax, ebx
  000f0	5b		 pop	 ebx

; 6182 : }

  000f1	83 c4 08	 add	 esp, 8
  000f4	c3		 ret	 0
$LN5@FindString:

; 6171 : 	{
; 6172 : 		return -1;

  000f5	83 c8 ff	 or	 eax, -1
  000f8	5d		 pop	 ebp
  000f9	0b d0		 or	 edx, eax
  000fb	5b		 pop	 ebx

; 6182 : }

  000fc	83 c4 08	 add	 esp, 8
  000ff	c3		 ret	 0
_FindString ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_FileExists
EXTRN	__access:PROC
; Function compile flags: /Ogtpy
;	COMDAT _FileExists
_TEXT	SEGMENT
_filePath$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_filePathPtr$ = 8					; size = 4
_FileExists PROC					; COMDAT

; 6186 : {

  00000	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 04 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+264], eax

; 6187 : 	char filePath [TC_MAX_PATH];
; 6188 : 
; 6189 : 	// Strip quotation marks (if any)
; 6190 : 	if (filePathPtr [0] == '"')

  00014	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR _filePathPtr$[esp+260]
  0001b	80 38 22	 cmp	 BYTE PTR [eax], 34	; 00000022H

; 6191 : 	{
; 6192 : 		strcpy (filePath, filePathPtr + 1);

  0001e	8d 14 24	 lea	 edx, DWORD PTR _filePath$[esp+264]
  00021	75 0f		 jne	 SHORT $LN3@FileExists
  00023	40		 inc	 eax
  00024	2b d0		 sub	 edx, eax
$LL6@FileExists:
  00026	8a 08		 mov	 cl, BYTE PTR [eax]
  00028	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0002b	40		 inc	 eax
  0002c	84 c9		 test	 cl, cl
  0002e	75 f6		 jne	 SHORT $LL6@FileExists

; 6193 : 	}
; 6194 : 	else

  00030	eb 0c		 jmp	 SHORT $LN2@FileExists
$LN3@FileExists:

; 6195 : 	{
; 6196 : 		strcpy (filePath, filePathPtr);

  00032	2b d0		 sub	 edx, eax
$LL7@FileExists:
  00034	8a 08		 mov	 cl, BYTE PTR [eax]
  00036	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00039	40		 inc	 eax
  0003a	84 c9		 test	 cl, cl
  0003c	75 f6		 jne	 SHORT $LL7@FileExists
$LN2@FileExists:

; 6197 : 	}
; 6198 : 
; 6199 : 	// Strip quotation marks (if any)
; 6200 : 	if (filePath [strlen (filePath) - 1] == '"')

  0003e	8d 04 24	 lea	 eax, DWORD PTR _filePath$[esp+264]
  00041	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL10@FileExists:
  00044	8a 08		 mov	 cl, BYTE PTR [eax]
  00046	40		 inc	 eax
  00047	84 c9		 test	 cl, cl
  00049	75 f9		 jne	 SHORT $LL10@FileExists
  0004b	2b c2		 sub	 eax, edx
  0004d	80 7c 04 ff 22	 cmp	 BYTE PTR _filePath$[esp+eax+263], 34 ; 00000022H
  00052	75 19		 jne	 SHORT $LN1@FileExists

; 6201 : 		filePath [strlen (filePath) - 1] = 0;

  00054	8d 04 24	 lea	 eax, DWORD PTR _filePath$[esp+264]
  00057	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0005a	8d 9b 00 00 00
	00		 npad	 6
$LL11@FileExists:
  00060	8a 08		 mov	 cl, BYTE PTR [eax]
  00062	40		 inc	 eax
  00063	84 c9		 test	 cl, cl
  00065	75 f9		 jne	 SHORT $LL11@FileExists
  00067	2b c2		 sub	 eax, edx
  00069	88 4c 04 ff	 mov	 BYTE PTR _filePath$[esp+eax+263], cl
$LN1@FileExists:

; 6202 : 
; 6203 :     return (_access (filePath, 0) != -1);

  0006d	8d 04 24	 lea	 eax, DWORD PTR _filePath$[esp+264]
  00070	6a 00		 push	 0
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 __access
  00078	33 c9		 xor	 ecx, ecx
  0007a	83 c4 08	 add	 esp, 8
  0007d	83 f8 ff	 cmp	 eax, -1
  00080	0f 95 c1	 setne	 cl
  00083	8b c1		 mov	 eax, ecx

; 6204 : }

  00085	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+264]
  0008c	33 cc		 xor	 ecx, esp
  0008e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00093	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  00099	c3		 ret	 0
_FileExists ENDP
_TEXT	ENDS
PUBLIC	_TCCopyFile
EXTRN	_free:PROC
EXTRN	__imp__SetFileTime@16:PROC
EXTRN	__imp__GetFileTime@16:PROC
EXTRN	__imp__WriteFile@20:PROC
EXTRN	__imp__ReadFile@20:PROC
; Function compile flags: /Ogtpy
;	COMDAT _TCCopyFile
_TEXT	SEGMENT
_bytesRead$ = -16					; size = 4
_bytesWritten$ = -12					; size = 4
_fileTime$ = -8						; size = 8
_sourceFileName$ = 8					; size = 4
_destinationFile$ = 12					; size = 4
_TCCopyFile PROC					; COMDAT

; 6285 : 	__int8 *buffer;
; 6286 : 	HANDLE src, dst;
; 6287 : 	FILETIME fileTime;
; 6288 : 	DWORD bytesRead, bytesWritten;
; 6289 : 	BOOL res;
; 6290 : 
; 6291 : 	src = CreateFile (sourceFileName,
; 6292 : 		GENERIC_READ,
; 6293 : 		FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _sourceFileName$[esp-4]
  00004	83 ec 10	 sub	 esp, 16			; 00000010H
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__CreateFileA@28
  0000f	6a 00		 push	 0
  00011	6a 00		 push	 0
  00013	6a 03		 push	 3
  00015	6a 00		 push	 0
  00017	6a 03		 push	 3
  00019	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0001e	50		 push	 eax
  0001f	ff d6		 call	 esi
  00021	8b d8		 mov	 ebx, eax

; 6294 : 
; 6295 : 	if (src == INVALID_HANDLE_VALUE)

  00023	83 fb ff	 cmp	 ebx, -1
  00026	75 08		 jne	 SHORT $LN8@TCCopyFile
  00028	5e		 pop	 esi

; 6296 : 		return FALSE;

  00029	33 c0		 xor	 eax, eax
  0002b	5b		 pop	 ebx

; 6340 : }

  0002c	83 c4 10	 add	 esp, 16			; 00000010H
  0002f	c3		 ret	 0
$LN8@TCCopyFile:

; 6297 : 
; 6298 : 	dst = CreateFile (destinationFile,
; 6299 : 		GENERIC_WRITE,
; 6300 : 		0, NULL, CREATE_ALWAYS, 0, NULL);

  00030	8b 4c 24 20	 mov	 ecx, DWORD PTR _destinationFile$[esp+20]
  00034	55		 push	 ebp
  00035	6a 00		 push	 0
  00037	6a 00		 push	 0
  00039	6a 02		 push	 2
  0003b	6a 00		 push	 0
  0003d	6a 00		 push	 0
  0003f	68 00 00 00 40	 push	 1073741824		; 40000000H
  00044	51		 push	 ecx
  00045	ff d6		 call	 esi
  00047	8b e8		 mov	 ebp, eax

; 6301 : 
; 6302 : 	if (dst == INVALID_HANDLE_VALUE)

  00049	83 fd ff	 cmp	 ebp, -1
  0004c	75 10		 jne	 SHORT $LN7@TCCopyFile

; 6303 : 	{
; 6304 : 		CloseHandle (src);

  0004e	53		 push	 ebx
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00055	5d		 pop	 ebp
  00056	5e		 pop	 esi

; 6305 : 		return FALSE;

  00057	33 c0		 xor	 eax, eax
  00059	5b		 pop	 ebx

; 6340 : }

  0005a	83 c4 10	 add	 esp, 16			; 00000010H
  0005d	c3		 ret	 0
$LN7@TCCopyFile:
  0005e	57		 push	 edi

; 6306 : 	}
; 6307 : 
; 6308 : 	buffer = (char *) malloc (64 * 1024);

  0005f	68 00 00 01 00	 push	 65536			; 00010000H
  00064	e8 00 00 00 00	 call	 _malloc
  00069	8b f8		 mov	 edi, eax
  0006b	83 c4 04	 add	 esp, 4

; 6309 : 	if (!buffer)

  0006e	85 ff		 test	 edi, edi
  00070	75 16		 jne	 SHORT $LN11@TCCopyFile

; 6310 : 	{
; 6311 : 		CloseHandle (src);

  00072	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__CloseHandle@4
  00078	53		 push	 ebx
  00079	ff d6		 call	 esi

; 6312 : 		CloseHandle (dst);

  0007b	55		 push	 ebp
  0007c	ff d6		 call	 esi
  0007e	5f		 pop	 edi
  0007f	5d		 pop	 ebp
  00080	5e		 pop	 esi

; 6313 : 		return FALSE;

  00081	33 c0		 xor	 eax, eax
  00083	5b		 pop	 ebx

; 6340 : }

  00084	83 c4 10	 add	 esp, 16			; 00000010H
  00087	c3		 ret	 0
$LN11@TCCopyFile:

; 6314 : 	}
; 6315 : 
; 6316 : 	while (res = ReadFile (src, buffer, 64 * 1024, &bytesRead, NULL))

  00088	6a 00		 push	 0
  0008a	8d 54 24 14	 lea	 edx, DWORD PTR _bytesRead$[esp+36]
  0008e	52		 push	 edx
  0008f	68 00 00 01 00	 push	 65536			; 00010000H
  00094	57		 push	 edi
  00095	53		 push	 ebx
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  0009c	8b f0		 mov	 esi, eax
  0009e	85 f6		 test	 esi, esi
  000a0	74 4b		 je	 SHORT $LN4@TCCopyFile
$LL5@TCCopyFile:

; 6317 : 	{
; 6318 : 		if (bytesRead == 0)

  000a2	8b 44 24 10	 mov	 eax, DWORD PTR _bytesRead$[esp+32]
  000a6	85 c0		 test	 eax, eax
  000a8	74 3a		 je	 SHORT $LN12@TCCopyFile

; 6322 : 		}
; 6323 : 
; 6324 : 		if (!WriteFile (dst, buffer, bytesRead, &bytesWritten, NULL)
; 6325 : 			|| bytesRead != bytesWritten)

  000aa	6a 00		 push	 0
  000ac	8d 4c 24 18	 lea	 ecx, DWORD PTR _bytesWritten$[esp+36]
  000b0	51		 push	 ecx
  000b1	50		 push	 eax
  000b2	57		 push	 edi
  000b3	55		 push	 ebp
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteFile@20
  000ba	85 c0		 test	 eax, eax
  000bc	74 2d		 je	 SHORT $LN13@TCCopyFile
  000be	8b 54 24 10	 mov	 edx, DWORD PTR _bytesRead$[esp+32]
  000c2	3b 54 24 14	 cmp	 edx, DWORD PTR _bytesWritten$[esp+32]
  000c6	75 23		 jne	 SHORT $LN13@TCCopyFile
  000c8	6a 00		 push	 0
  000ca	8d 44 24 14	 lea	 eax, DWORD PTR _bytesRead$[esp+36]
  000ce	50		 push	 eax
  000cf	68 00 00 01 00	 push	 65536			; 00010000H
  000d4	57		 push	 edi
  000d5	53		 push	 ebx
  000d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  000dc	8b f0		 mov	 esi, eax
  000de	85 f6		 test	 esi, esi
  000e0	75 c0		 jne	 SHORT $LL5@TCCopyFile
  000e2	eb 09		 jmp	 SHORT $LN4@TCCopyFile
$LN12@TCCopyFile:

; 6319 : 		{
; 6320 : 			res = 1;

  000e4	be 01 00 00 00	 mov	 esi, 1

; 6321 : 			break;

  000e9	eb 02		 jmp	 SHORT $LN4@TCCopyFile
$LN13@TCCopyFile:

; 6326 : 		{
; 6327 : 			res = 0;

  000eb	33 f6		 xor	 esi, esi
$LN4@TCCopyFile:

; 6328 : 			break;
; 6329 : 		}
; 6330 : 	}
; 6331 : 
; 6332 : 	GetFileTime (src, NULL, NULL, &fileTime);

  000ed	8d 4c 24 18	 lea	 ecx, DWORD PTR _fileTime$[esp+32]
  000f1	51		 push	 ecx
  000f2	6a 00		 push	 0
  000f4	6a 00		 push	 0
  000f6	53		 push	 ebx
  000f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileTime@16

; 6333 : 	SetFileTime (dst, NULL, NULL, &fileTime);

  000fd	8d 54 24 18	 lea	 edx, DWORD PTR _fileTime$[esp+32]
  00101	52		 push	 edx
  00102	6a 00		 push	 0
  00104	6a 00		 push	 0
  00106	55		 push	 ebp
  00107	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFileTime@16

; 6334 : 
; 6335 : 	CloseHandle (src);

  0010d	53		 push	 ebx
  0010e	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__CloseHandle@4
  00114	ff d3		 call	 ebx

; 6336 : 	CloseHandle (dst);

  00116	55		 push	 ebp
  00117	ff d3		 call	 ebx

; 6337 : 
; 6338 : 	free (buffer);

  00119	57		 push	 edi
  0011a	e8 00 00 00 00	 call	 _free
  0011f	83 c4 04	 add	 esp, 4
  00122	5f		 pop	 edi

; 6339 : 	return res != 0;

  00123	33 c0		 xor	 eax, eax
  00125	5d		 pop	 ebp
  00126	85 f6		 test	 esi, esi
  00128	5e		 pop	 esi
  00129	0f 95 c0	 setne	 al
  0012c	5b		 pop	 ebx

; 6340 : }

  0012d	83 c4 10	 add	 esp, 16			; 00000010H
  00130	c3		 ret	 0
_TCCopyFile ENDP
_TEXT	ENDS
PUBLIC	_SaveBufferToFile
EXTRN	_remove:PROC
EXTRN	__imp__SetFilePointer@16:PROC
; Function compile flags: /Ogtpy
;	COMDAT _SaveBufferToFile
_TEXT	SEGMENT
_inputBuffer$ = 8					; size = 4
_destinationFile$ = 12					; size = 4
_inputLength$ = 16					; size = 4
_bytesWritten$ = 20					; size = 4
_bAppend$ = 20						; size = 4
_SaveBufferToFile PROC					; COMDAT

; 6345 : {

  00000	53		 push	 ebx

; 6346 : 	HANDLE dst;
; 6347 : 	DWORD bytesWritten;
; 6348 : 	BOOL res = TRUE;
; 6349 : 
; 6350 : 	dst = CreateFile (destinationFile,
; 6351 : 		GENERIC_WRITE,
; 6352 : 		FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, bAppend ? OPEN_EXISTING : CREATE_ALWAYS, 0, NULL);

  00001	8b 4c 24 0c	 mov	 ecx, DWORD PTR _destinationFile$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 1c	 mov	 edi, DWORD PTR _bAppend$[esp+8]
  0000b	33 c0		 xor	 eax, eax
  0000d	85 ff		 test	 edi, edi
  0000f	0f 95 c0	 setne	 al
  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	bb 01 00 00 00	 mov	 ebx, 1
  0001b	83 c0 02	 add	 eax, 2
  0001e	50		 push	 eax
  0001f	6a 00		 push	 0
  00021	6a 03		 push	 3
  00023	68 00 00 00 40	 push	 1073741824		; 40000000H
  00028	51		 push	 ecx
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0002f	8b f0		 mov	 esi, eax

; 6353 : 
; 6354 : 	if (dst == INVALID_HANDLE_VALUE)

  00031	83 fe ff	 cmp	 esi, -1
  00034	75 15		 jne	 SHORT $LN8@SaveBuffer

; 6355 : 	{
; 6356 : 		handleWin32Error (MainDlg);

  00036	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0003c	52		 push	 edx
  0003d	e8 00 00 00 00	 call	 _handleWin32Error
  00042	83 c4 04	 add	 esp, 4
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 6357 : 		return FALSE;

  00047	33 c0		 xor	 eax, eax
  00049	5b		 pop	 ebx

; 6383 : }

  0004a	c3		 ret	 0
$LN8@SaveBuffer:

; 6358 : 	}
; 6359 : 
; 6360 : 	if (bAppend)

  0004b	85 ff		 test	 edi, edi
  0004d	74 0d		 je	 SHORT $LN7@SaveBuffer

; 6361 : 		SetFilePointer (dst, 0, NULL, FILE_END);

  0004f	6a 02		 push	 2
  00051	6a 00		 push	 0
  00053	6a 00		 push	 0
  00055	56		 push	 esi
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16
$LN7@SaveBuffer:

; 6362 : 
; 6363 : 	if (!WriteFile (dst, inputBuffer, inputLength, &bytesWritten, NULL)
; 6364 : 		|| inputLength != bytesWritten)

  0005c	8b 4c 24 10	 mov	 ecx, DWORD PTR _inputBuffer$[esp+8]
  00060	55		 push	 ebp
  00061	8b 6c 24 1c	 mov	 ebp, DWORD PTR _inputLength$[esp+12]
  00065	6a 00		 push	 0
  00067	8d 44 24 24	 lea	 eax, DWORD PTR _bytesWritten$[esp+16]
  0006b	50		 push	 eax
  0006c	55		 push	 ebp
  0006d	51		 push	 ecx
  0006e	56		 push	 esi
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteFile@20
  00075	85 c0		 test	 eax, eax
  00077	74 06		 je	 SHORT $LN5@SaveBuffer
  00079	3b 6c 24 20	 cmp	 ebp, DWORD PTR _bytesWritten$[esp+12]
  0007d	74 22		 je	 SHORT $LN12@SaveBuffer
$LN5@SaveBuffer:

; 6365 : 	{
; 6366 : 		res = FALSE;

  0007f	33 db		 xor	 ebx, ebx

; 6367 : 	}
; 6368 : 
; 6369 : 	if (!res)
; 6370 : 	{
; 6371 : 		// If CREATE_ALWAYS is used, ERROR_ALREADY_EXISTS is returned after successful overwrite
; 6372 : 		// of an existing file (it's not an error)
; 6373 : 		if (! (GetLastError() == ERROR_ALREADY_EXISTS && !bAppend) )	

  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00087	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  0008c	75 04		 jne	 SHORT $LN2@SaveBuffer
  0008e	85 ff		 test	 edi, edi
  00090	74 0f		 je	 SHORT $LN12@SaveBuffer
$LN2@SaveBuffer:

; 6374 : 			handleWin32Error (MainDlg);

  00092	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00098	52		 push	 edx
  00099	e8 00 00 00 00	 call	 _handleWin32Error
  0009e	83 c4 04	 add	 esp, 4
$LN12@SaveBuffer:

; 6375 : 	}
; 6376 : 
; 6377 : 	CloseHandle (dst);

  000a1	56		 push	 esi
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  000a8	5d		 pop	 ebp

; 6378 : 
; 6379 : 	if (!res && !bAppend)

  000a9	85 db		 test	 ebx, ebx
  000ab	75 11		 jne	 SHORT $LN1@SaveBuffer
  000ad	85 ff		 test	 edi, edi
  000af	75 0d		 jne	 SHORT $LN1@SaveBuffer

; 6380 : 		remove (destinationFile);

  000b1	8b 44 24 14	 mov	 eax, DWORD PTR _destinationFile$[esp+8]
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _remove
  000bb	83 c4 04	 add	 esp, 4
$LN1@SaveBuffer:
  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi

; 6381 : 
; 6382 : 	return res;

  000c0	8b c3		 mov	 eax, ebx
  000c2	5b		 pop	 ebx

; 6383 : }

  000c3	c3		 ret	 0
_SaveBufferToFile ENDP
_TEXT	ENDS
PUBLIC	_TCFlushFile
EXTRN	__imp__FlushFileBuffers@4:PROC
EXTRN	_fflush:PROC
EXTRN	__get_osfhandle:PROC
EXTRN	__fileno:PROC
; Function compile flags: /Ogtpy
;	COMDAT _TCFlushFile
_TEXT	SEGMENT
_f$ = 8							; size = 4
_TCFlushFile PROC					; COMDAT

; 6388 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 6389 : 	HANDLE hf = (HANDLE) _get_osfhandle (_fileno (f));

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _f$[esp+4]
  00006	57		 push	 edi
  00007	e8 00 00 00 00	 call	 __fileno
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 __get_osfhandle

; 6390 : 
; 6391 : 	fflush (f);

  00012	57		 push	 edi
  00013	8b f0		 mov	 esi, eax
  00015	e8 00 00 00 00	 call	 _fflush
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6392 : 
; 6393 : 	if (hf == INVALID_HANDLE_VALUE)

  0001d	83 fe ff	 cmp	 esi, -1
  00020	75 05		 jne	 SHORT $LN1@TCFlushFil
  00022	5f		 pop	 edi

; 6394 : 		return FALSE;

  00023	33 c0		 xor	 eax, eax
  00025	5e		 pop	 esi

; 6397 : }

  00026	c3		 ret	 0
$LN1@TCFlushFil:

; 6395 : 
; 6396 : 	return FlushFileBuffers (hf) != 0;

  00027	56		 push	 esi
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FlushFileBuffers@4
  0002e	f7 d8		 neg	 eax
  00030	1b c0		 sbb	 eax, eax
  00032	5f		 pop	 edi
  00033	f7 d8		 neg	 eax
  00035	5e		 pop	 esi

; 6397 : }

  00036	c3		 ret	 0
_TCFlushFile ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DO@FLBIDANE@Software?2Microsoft?2Windows?2Curre@ ; `string'
PUBLIC	??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@	; `string'
PUBLIC	??_C@_0M@EMLNMOID@?2TrueCrypt?2?$AA@		; `string'
PUBLIC	??_C@_0O@GDPBNEAJ@?2?2?4?2TrueCrypt?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_IsNonInstallMode
EXTRN	__imp__RegCloseKey@4:PROC
EXTRN	__imp__RegOpenKeyExA@20:PROC
EXTRN	_IsUacSupported:PROC
EXTRN	_IsAdmin:PROC
EXTRN	__imp__SHGetFolderPathA@20:PROC
;	COMDAT ??_C@_0DO@FLBIDANE@Software?2Microsoft?2Windows?2Curre@
CONST	SEGMENT
??_C@_0DO@FLBIDANE@Software?2Microsoft?2Windows?2Curre@ DB 'Software\Micr'
	DB	'osoft\Windows\CurrentVersion\Uninstall\TrueCrypt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@
CONST	SEGMENT
??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@ DB 'System Encryption.xml'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EMLNMOID@?2TrueCrypt?2?$AA@
CONST	SEGMENT
??_C@_0M@EMLNMOID@?2TrueCrypt?2?$AA@ DB '\TrueCrypt\', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GDPBNEAJ@?2?2?4?2TrueCrypt?$AA@
CONST	SEGMENT
??_C@_0O@GDPBNEAJ@?2?2?4?2TrueCrypt?$AA@ DB '\\.\TrueCrypt', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _IsNonInstallMode
_TEXT	SEGMENT
_hkey$ = -532						; size = 4
_dw$ = -528						; size = 4
_path$142442 = -524					; size = 520
__$ArrayPad$ = -4					; size = 4
_IsNonInstallMode PROC					; COMDAT

; 6455 : {

  00000	81 ec 14 02 00
	00		 sub	 esp, 532		; 00000214H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 10 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+532], eax

; 6456 : 	HKEY hkey;
; 6457 : 	DWORD dw;
; 6458 : 
; 6459 : 	if (bPortableModeConfirmed)

  00014	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bPortableModeConfirmed@@3HA, 0 ; bPortableModeConfirmed

; 6460 : 		return TRUE;

  0001b	0f 85 31 01 00
	00		 jne	 $LN2@IsNonInsta

; 6461 : 
; 6462 : 	if (hDriver != INVALID_HANDLE_VALUE)

  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDriver

; 6463 : 	{
; 6464 : 		// The driver is running
; 6465 : 		if (DeviceIoControl (hDriver, TC_IOCTL_GET_PORTABLE_MODE_STATUS, NULL, 0, NULL, 0, &dw, 0))

  00026	6a 00		 push	 0
  00028	83 f8 ff	 cmp	 eax, -1
  0002b	74 40		 je	 SHORT $LN11@IsNonInsta
  0002d	8d 4c 24 08	 lea	 ecx, DWORD PTR _dw$[esp+536]
  00031	51		 push	 ecx
  00032	6a 00		 push	 0
  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	6a 00		 push	 0
  0003a	68 64 20 22 00	 push	 2236516			; 00222064H
  0003f	50		 push	 eax
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  00046	85 c0		 test	 eax, eax
  00048	0f 84 4e 01 00
	00		 je	 $LN4@IsNonInsta

; 6466 : 		{
; 6467 : 			bPortableModeConfirmed = TRUE;

  0004e	b8 01 00 00 00	 mov	 eax, 1
  00053	a3 00 00 00 00	 mov	 DWORD PTR ?bPortableModeConfirmed@@3HA, eax ; bPortableModeConfirmed

; 6524 : }

  00058	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+532]
  0005f	33 cc		 xor	 ecx, esp
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	81 c4 14 02 00
	00		 add	 esp, 532		; 00000214H
  0006c	c3		 ret	 0
$LN11@IsNonInsta:

; 6468 : 			return TRUE;
; 6469 : 		}
; 6470 : 		else
; 6471 : 		{
; 6472 : 			// This is also returned if we fail to determine the status (it does not mean that portable mode is disproved).
; 6473 : 			return FALSE;	
; 6474 : 		}
; 6475 : 	}
; 6476 : 	else
; 6477 : 	{
; 6478 : 		// The tests in this block are necessary because this function is in some cases called before DriverAttach().
; 6479 : 
; 6480 : 		HANDLE hDriverTmp = CreateFile (WIN32_ROOT_PREFIX, 0, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  0006d	6a 00		 push	 0
  0006f	6a 03		 push	 3
  00071	6a 00		 push	 0
  00073	6a 03		 push	 3
  00075	6a 00		 push	 0
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GDPBNEAJ@?2?2?4?2TrueCrypt?$AA@
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28

; 6481 : 
; 6482 : 		if (hDriverTmp == INVALID_HANDLE_VALUE)

  00082	83 f8 ff	 cmp	 eax, -1
  00085	0f 85 e1 00 00
	00		 jne	 $LN7@IsNonInsta

; 6483 : 		{
; 6484 : 			// The driver was not found in the system path
; 6485 : 
; 6486 : 			char path[MAX_PATH * 2] = { 0 };

  0008b	68 07 02 00 00	 push	 519			; 00000207H
  00090	8d 54 24 0d	 lea	 edx, DWORD PTR _path$142442[esp+537]
  00094	6a 00		 push	 0
  00096	52		 push	 edx
  00097	c6 44 24 14 00	 mov	 BYTE PTR _path$142442[esp+544], 0
  0009c	e8 00 00 00 00	 call	 _memset
  000a1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6487 : 
; 6488 : 			// We can't use GetConfigPath() here because it would call us back (indirect recursion)
; 6489 : 			if (SUCCEEDED(SHGetFolderPath (NULL, CSIDL_APPDATA, NULL, 0, path)))

  000a4	8d 44 24 08	 lea	 eax, DWORD PTR _path$142442[esp+532]
  000a8	50		 push	 eax
  000a9	6a 00		 push	 0
  000ab	6a 00		 push	 0
  000ad	6a 1a		 push	 26			; 0000001aH
  000af	6a 00		 push	 0
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetFolderPathA@20
  000b7	85 c0		 test	 eax, eax
  000b9	0f 8c 93 00 00
	00		 jl	 $LN2@IsNonInsta

; 6490 : 			{
; 6491 : 				strcat (path, "\\TrueCrypt\\");

  000bf	8d 44 24 08	 lea	 eax, DWORD PTR _path$142442[esp+532]
  000c3	48		 dec	 eax
$LL15@IsNonInsta:
  000c4	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000c7	40		 inc	 eax
  000c8	84 c9		 test	 cl, cl
  000ca	75 f8		 jne	 SHORT $LL15@IsNonInsta
  000cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@EMLNMOID@?2TrueCrypt?2?$AA@
  000d2	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0M@EMLNMOID@?2TrueCrypt?2?$AA@+4
  000d8	89 08		 mov	 DWORD PTR [eax], ecx
  000da	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@EMLNMOID@?2TrueCrypt?2?$AA@+8
  000e0	89 50 04	 mov	 DWORD PTR [eax+4], edx
  000e3	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 6492 : 				strcat (path, TC_APPD_FILENAME_SYSTEM_ENCRYPTION);

  000e6	8d 44 24 08	 lea	 eax, DWORD PTR _path$142442[esp+532]
  000ea	48		 dec	 eax
  000eb	eb 03 8d 49 00	 npad	 5
$LL16@IsNonInsta:
  000f0	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000f3	40		 inc	 eax
  000f4	84 c9		 test	 cl, cl
  000f6	75 f8		 jne	 SHORT $LL16@IsNonInsta
  000f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@
  000fe	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@+4
  00104	89 10		 mov	 DWORD PTR [eax], edx
  00106	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@+8
  0010c	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0010f	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@+12
  00115	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00118	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@+16
  0011e	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00121	66 8b 0d 14 00
	00 00		 mov	 cx, WORD PTR ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@+20
  00128	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 6493 : 
; 6494 : 				if (FileExists (path))

  0012b	8d 54 24 08	 lea	 edx, DWORD PTR _path$142442[esp+532]
  0012f	52		 push	 edx
  00130	66 89 48 14	 mov	 WORD PTR [eax+20], cx
  00134	e8 00 00 00 00	 call	 _FileExists
  00139	83 c4 04	 add	 esp, 4
  0013c	85 c0		 test	 eax, eax
  0013e	74 12		 je	 SHORT $LN2@IsNonInsta

; 6495 : 				{
; 6496 : 					// To maintain consistency and safety, if the system encryption config file exits, we cannot
; 6497 : 					// allow portable mode. (This happens e.g. when the pretest fails and the user selects 
; 6498 : 					// "Last Known Good Configuration" from the Windows boot menu.)
; 6499 : 
; 6500 : 					// However, if UAC elevation is needed, we have to confirm portable mode first (after we are elevated, we won't).
; 6501 : 					if (!IsAdmin () && IsUacSupported ())

  00140	e8 00 00 00 00	 call	 _IsAdmin
  00145	85 c0		 test	 eax, eax
  00147	75 53		 jne	 SHORT $LN4@IsNonInsta
  00149	e8 00 00 00 00	 call	 _IsUacSupported
  0014e	85 c0		 test	 eax, eax

; 6502 : 						return TRUE;

  00150	74 4a		 je	 SHORT $LN4@IsNonInsta
$LN2@IsNonInsta:

; 6520 : 		return FALSE;
; 6521 : 	}
; 6522 : 	else
; 6523 : 		return TRUE;

  00152	b8 01 00 00 00	 mov	 eax, 1

; 6524 : }

  00157	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+532]
  0015e	33 cc		 xor	 ecx, esp
  00160	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00165	81 c4 14 02 00
	00		 add	 esp, 532		; 00000214H
  0016b	c3		 ret	 0
$LN7@IsNonInsta:

; 6503 : 
; 6504 : 					return FALSE;
; 6505 : 				}
; 6506 : 			}
; 6507 : 
; 6508 : 			// As the driver was not found in the system path, we can predict that we will run in portable mode
; 6509 : 			return TRUE;	
; 6510 : 		}
; 6511 : 		else
; 6512 : 			CloseHandle (hDriverTmp);

  0016c	50		 push	 eax
  0016d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 6513 : 	}
; 6514 : 
; 6515 : 	// The following test may be unreliable in some cases (e.g. after the user selects restore "Last Known Good
; 6516 : 	// Configuration" from the Windows boot menu).
; 6517 : 	if (RegOpenKeyEx (HKEY_LOCAL_MACHINE, "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\TrueCrypt", 0, KEY_READ, &hkey) == ERROR_SUCCESS)

  00173	8d 04 24	 lea	 eax, DWORD PTR _hkey$[esp+532]
  00176	50		 push	 eax
  00177	68 19 00 02 00	 push	 131097			; 00020019H
  0017c	6a 00		 push	 0
  0017e	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@FLBIDANE@Software?2Microsoft?2Windows?2Curre@
  00183	68 02 00 00 80	 push	 -2147483646		; 80000002H
  00188	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  0018e	85 c0		 test	 eax, eax
  00190	75 c0		 jne	 SHORT $LN2@IsNonInsta

; 6518 : 	{
; 6519 : 		RegCloseKey (hkey);

  00192	8b 0c 24	 mov	 ecx, DWORD PTR _hkey$[esp+532]
  00195	51		 push	 ecx
  00196	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
$LN4@IsNonInsta:

; 6524 : }

  0019c	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+532]
  001a3	33 cc		 xor	 ecx, esp
  001a5	33 c0		 xor	 eax, eax
  001a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ac	81 c4 14 02 00
	00		 add	 esp, 532		; 00000214H
  001b2	c3		 ret	 0
_IsNonInstallMode ENDP
_TEXT	ENDS
PUBLIC	_SetCheckBox
EXTRN	__imp__SendDlgItemMessageA@20:PROC
; Function compile flags: /Ogtpy
;	COMDAT _SetCheckBox
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_dlgItem$ = 12						; size = 4
_state$ = 16						; size = 4
_SetCheckBox PROC					; COMDAT

; 6529 : 	return SendDlgItemMessage (hwndDlg, dlgItem, BM_SETCHECK, state ? BST_CHECKED : BST_UNCHECKED, 0);

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR _dlgItem$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR _hwndDlg$[esp-4]
  00008	33 c0		 xor	 eax, eax
  0000a	39 44 24 0c	 cmp	 DWORD PTR _state$[esp-4], eax
  0000e	6a 00		 push	 0
  00010	0f 95 c0	 setne	 al
  00013	50		 push	 eax
  00014	68 f1 00 00 00	 push	 241			; 000000f1H
  00019	51		 push	 ecx
  0001a	52		 push	 edx
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendDlgItemMessageA@20

; 6530 : }

  00021	c3		 ret	 0
_SetCheckBox ENDP
_TEXT	ENDS
PUBLIC	_GetCheckBox
; Function compile flags: /Ogtpy
;	COMDAT _GetCheckBox
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_dlgItem$ = 12						; size = 4
_GetCheckBox PROC					; COMDAT

; 6535 : 	return IsButtonChecked (GetDlgItem (hwndDlg, dlgItem));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _dlgItem$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR _hwndDlg$[esp-4]
  00008	50		 push	 eax
  00009	51		 push	 ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00010	6a 00		 push	 0
  00012	6a 00		 push	 0
  00014	68 f0 00 00 00	 push	 240			; 000000f0H
  00019	50		 push	 eax
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00020	48		 dec	 eax
  00021	f7 d8		 neg	 eax
  00023	1b c0		 sbb	 eax, eax
  00025	40		 inc	 eax

; 6536 : }

  00026	c3		 ret	 0
_GetCheckBox ENDP
_TEXT	ENDS
PUBLIC	_SetListScrollHPos
; Function compile flags: /Ogtpy
;	COMDAT _SetListScrollHPos
_TEXT	SEGMENT
_hList$ = 8						; size = 4
_topMostVisibleItem$ = 12				; size = 4
_SetListScrollHPos PROC					; COMDAT

; 6541 : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 6542 : 	int testedPos = 0;

  00002	8b 6c 24 10	 mov	 ebp, DWORD PTR _topMostVisibleItem$[esp+4]
  00006	56		 push	 esi
  00007	8b 74 24 10	 mov	 esi, DWORD PTR _hList$[esp+8]
  0000b	57		 push	 edi
  0000c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  00012	33 db		 xor	 ebx, ebx
$LL4@SetListScr:

; 6543 : 
; 6544 : 	do
; 6545 : 	{
; 6546 : 		SendMessage (hList, LVM_SCROLL, 0, testedPos);

  00014	53		 push	 ebx
  00015	6a 00		 push	 0
  00017	68 14 10 00 00	 push	 4116			; 00001014H
  0001c	56		 push	 esi
  0001d	ff d7		 call	 edi

; 6547 : 
; 6548 : 	} while (ListView_GetTopIndex (hList) < topMostVisibleItem && ++testedPos < 10000);

  0001f	6a 00		 push	 0
  00021	6a 00		 push	 0
  00023	68 27 10 00 00	 push	 4135			; 00001027H
  00028	56		 push	 esi
  00029	ff d7		 call	 edi
  0002b	3b c5		 cmp	 eax, ebp
  0002d	7d 09		 jge	 SHORT $LN1@SetListScr
  0002f	43		 inc	 ebx
  00030	81 fb 10 27 00
	00		 cmp	 ebx, 10000		; 00002710H
  00036	7c dc		 jl	 SHORT $LL4@SetListScr
$LN1@SetListScr:
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5d		 pop	 ebp
  0003b	5b		 pop	 ebx

; 6549 : }

  0003c	c3		 ret	 0
_SetListScrollHPos ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@LOPOCHJI@?5?1a?5favorites?$AA@		; `string'
PUBLIC	??_C@_0M@JCEADJGE@?5?1a?5devices?$AA@		; `string'
PUBLIC	??_C@_0BK@NFGDLGMG@?$CC?5?1q?5preferences?5?1a?5logon?$AA@ ; `string'
PUBLIC	??_C@_0L@FEEFGEIL@CipherShed?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_ManageStartupSeq
EXTRN	_WriteRegistryString:PROC
EXTRN	_DeleteRegistryValue:PROC
EXTRN	_GetStartupRegKeyName:PROC
;	COMDAT ??_C@_0O@LOPOCHJI@?5?1a?5favorites?$AA@
CONST	SEGMENT
??_C@_0O@LOPOCHJI@?5?1a?5favorites?$AA@ DB ' /a favorites', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JCEADJGE@?5?1a?5devices?$AA@
CONST	SEGMENT
??_C@_0M@JCEADJGE@?5?1a?5devices?$AA@ DB ' /a devices', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NFGDLGMG@?$CC?5?1q?5preferences?5?1a?5logon?$AA@
CONST	SEGMENT
??_C@_0BK@NFGDLGMG@?$CC?5?1q?5preferences?5?1a?5logon?$AA@ DB '" /q prefe'
	DB	'rences /a logon', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FEEFGEIL@CipherShed?$AA@
CONST	SEGMENT
??_C@_0L@FEEFGEIL@CipherShed?$AA@ DB 'CipherShed', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _ManageStartupSeq
_TEXT	SEGMENT
_regk$142478 = -588					; size = 64
_exe$142481 = -524					; size = 520
__$ArrayPad$ = -4					; size = 4
_ManageStartupSeq PROC					; COMDAT

; 6554 : {

  00000	81 ec 4c 02 00
	00		 sub	 esp, 588		; 0000024cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 48 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+588], eax

; 6555 : 	if (!IsNonInstallMode ())

  00014	e8 00 00 00 00	 call	 _IsNonInstallMode
  00019	85 c0		 test	 eax, eax
  0001b	0f 85 19 01 00
	00		 jne	 $LN1@ManageStar

; 6556 : 	{
; 6557 : 		char regk [64];
; 6558 : 
; 6559 : 		GetStartupRegKeyName (regk);

  00021	8d 04 24	 lea	 eax, DWORD PTR _regk$142478[esp+588]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _GetStartupRegKeyName
  0002a	83 c4 04	 add	 esp, 4

; 6560 : 
; 6561 : 		if (bStartOnLogon || bMountDevicesOnLogon || bMountFavoritesOnLogon)

  0002d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bStartOnLogon, 0
  00034	75 38		 jne	 SHORT $LN4@ManageStar
  00036	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bMountDevicesOnLogon, 0
  0003d	75 2f		 jne	 SHORT $LN4@ManageStar
  0003f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bMountFavoritesOnLogon, 0
  00046	75 26		 jne	 SHORT $LN4@ManageStar

; 6581 : 		}
; 6582 : 		else
; 6583 : 			DeleteRegistryValue (regk, "CipherShed");

  00048	8d 0c 24	 lea	 ecx, DWORD PTR _regk$142478[esp+588]
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FEEFGEIL@CipherShed?$AA@
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 _DeleteRegistryValue
  00056	83 c4 08	 add	 esp, 8

; 6584 : 	}
; 6585 : }

  00059	8b 8c 24 48 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+588]
  00060	33 cc		 xor	 ecx, esp
  00062	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00067	81 c4 4c 02 00
	00		 add	 esp, 588		; 0000024cH
  0006d	c3		 ret	 0
$LN4@ManageStar:
  0006e	56		 push	 esi
  0006f	57		 push	 edi

; 6562 : 		{
; 6563 : 			char exe[MAX_PATH * 2] = { '"' };

  00070	68 07 02 00 00	 push	 519			; 00000207H
  00075	8d 54 24 4d	 lea	 edx, DWORD PTR _exe$142481[esp+601]
  00079	6a 00		 push	 0
  0007b	52		 push	 edx
  0007c	c6 44 24 54 22	 mov	 BYTE PTR _exe$142481[esp+608], 34 ; 00000022H
  00081	e8 00 00 00 00	 call	 _memset
  00086	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6564 : 
; 6565 : 			GetModuleFileName (NULL, exe + 1, sizeof (exe) - 1);

  00089	68 07 02 00 00	 push	 519			; 00000207H
  0008e	8d 44 24 4d	 lea	 eax, DWORD PTR _exe$142481[esp+601]
  00092	50		 push	 eax
  00093	6a 00		 push	 0
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12

; 6566 : 
; 6567 : #ifdef VOLFORMAT
; 6568 : 			{
; 6569 : 				char *tmp = NULL;
; 6570 : 
; 6571 : 				if (tmp = strrchr (exe, '\\'))
; 6572 : 					strcpy (++tmp, "CipherShed.exe");
; 6573 : 			}
; 6574 : #endif
; 6575 : 			strcat (exe, "\" /q preferences /a logon");

  0009b	8d 7c 24 48	 lea	 edi, DWORD PTR _exe$142481[esp+596]
  0009f	4f		 dec	 edi
$LL9@ManageStar:
  000a0	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  000a3	47		 inc	 edi
  000a4	84 c0		 test	 al, al
  000a6	75 f8		 jne	 SHORT $LL9@ManageStar

; 6576 : 
; 6577 : 			if (bMountDevicesOnLogon) strcat (exe, " /a devices");

  000a8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bMountDevicesOnLogon, 0
  000af	b9 06 00 00 00	 mov	 ecx, 6
  000b4	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BK@NFGDLGMG@?$CC?5?1q?5preferences?5?1a?5logon?$AA@
  000b9	f3 a5		 rep movsd
  000bb	66 a5		 movsw
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	74 27		 je	 SHORT $LN3@ManageStar
  000c1	8d 44 24 40	 lea	 eax, DWORD PTR _exe$142481[esp+588]
  000c5	48		 dec	 eax
$LL10@ManageStar:
  000c6	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000c9	40		 inc	 eax
  000ca	84 c9		 test	 cl, cl
  000cc	75 f8		 jne	 SHORT $LL10@ManageStar
  000ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@JCEADJGE@?5?1a?5devices?$AA@
  000d4	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0M@JCEADJGE@?5?1a?5devices?$AA@+4
  000da	89 08		 mov	 DWORD PTR [eax], ecx
  000dc	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@JCEADJGE@?5?1a?5devices?$AA@+8
  000e2	89 50 04	 mov	 DWORD PTR [eax+4], edx
  000e5	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN3@ManageStar:

; 6578 : 			if (bMountFavoritesOnLogon) strcat (exe, " /a favorites");

  000e8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bMountFavoritesOnLogon, 0
  000ef	74 32		 je	 SHORT $LN2@ManageStar
  000f1	8d 44 24 40	 lea	 eax, DWORD PTR _exe$142481[esp+588]
  000f5	48		 dec	 eax
$LL11@ManageStar:
  000f6	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000f9	40		 inc	 eax
  000fa	84 c9		 test	 cl, cl
  000fc	75 f8		 jne	 SHORT $LL11@ManageStar
  000fe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0O@LOPOCHJI@?5?1a?5favorites?$AA@
  00104	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0O@LOPOCHJI@?5?1a?5favorites?$AA@+4
  0010a	89 10		 mov	 DWORD PTR [eax], edx
  0010c	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0O@LOPOCHJI@?5?1a?5favorites?$AA@+8
  00112	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00115	66 8b 0d 0c 00
	00 00		 mov	 cx, WORD PTR ??_C@_0O@LOPOCHJI@?5?1a?5favorites?$AA@+12
  0011c	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0011f	66 89 48 0c	 mov	 WORD PTR [eax+12], cx
$LN2@ManageStar:

; 6579 : 
; 6580 : 			WriteRegistryString (regk, "CipherShed", exe);

  00123	8d 54 24 40	 lea	 edx, DWORD PTR _exe$142481[esp+588]
  00127	52		 push	 edx
  00128	8d 44 24 04	 lea	 eax, DWORD PTR _regk$142478[esp+592]
  0012c	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FEEFGEIL@CipherShed?$AA@
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 _WriteRegistryString
  00137	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@ManageStar:

; 6584 : 	}
; 6585 : }

  0013a	8b 8c 24 48 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+588]
  00141	33 cc		 xor	 ecx, esp
  00143	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00148	81 c4 4c 02 00
	00		 add	 esp, 588		; 0000024cH
  0014e	c3		 ret	 0
_ManageStartupSeq ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@KCBPKCIG@CipherShed?5Format?$AA@	; `string'
PUBLIC	??_C@_02KOPDJAMB@?$CC?5?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_ManageStartupSeqWiz
;	COMDAT ??_C@_0BC@KCBPKCIG@CipherShed?5Format?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string.h
CONST	SEGMENT
??_C@_0BC@KCBPKCIG@CipherShed?5Format?$AA@ DB 'CipherShed Format', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KOPDJAMB@?$CC?5?$AA@
CONST	SEGMENT
??_C@_02KOPDJAMB@?$CC?5?$AA@ DB '" ', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
CONST	ENDS
;	COMDAT _ManageStartupSeqWiz
_TEXT	SEGMENT
tv85 = -592						; size = 4
_regk$ = -588						; size = 64
_exe$142494 = -524					; size = 520
__$ArrayPad$ = -4					; size = 4
_bRemove$ = 8						; size = 4
_arg$ = 12						; size = 4
_ManageStartupSeqWiz PROC				; COMDAT

; 6590 : {

  00000	81 ec 50 02 00
	00		 sub	 esp, 592		; 00000250H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 4c 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+592], eax
  00014	56		 push	 esi
  00015	8b b4 24 5c 02
	00 00		 mov	 esi, DWORD PTR _arg$[esp+592]

; 6591 : 	char regk [64];
; 6592 : 
; 6593 : 	GetStartupRegKeyName (regk);

  0001c	8d 44 24 08	 lea	 eax, DWORD PTR _regk$[esp+596]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _GetStartupRegKeyName
  00026	83 c4 04	 add	 esp, 4

; 6594 : 
; 6595 : 	if (!bRemove)

  00029	83 bc 24 58 02
	00 00 00	 cmp	 DWORD PTR _bRemove$[esp+592], 0
  00031	0f 85 fd 00 00
	00		 jne	 $LN4@ManageStar@2

; 6596 : 	{
; 6597 : 		char exe[MAX_PATH * 2] = { '"' };

  00037	68 07 02 00 00	 push	 519			; 00000207H
  0003c	8d 4c 24 4d	 lea	 ecx, DWORD PTR _exe$142494[esp+601]
  00040	6a 00		 push	 0
  00042	51		 push	 ecx
  00043	c6 44 24 54 22	 mov	 BYTE PTR _exe$142494[esp+608], 34 ; 00000022H
  00048	e8 00 00 00 00	 call	 _memset
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6598 : 		GetModuleFileName (NULL, exe + 1, sizeof (exe) - 1);

  00050	68 07 02 00 00	 push	 519			; 00000207H
  00055	8d 54 24 4d	 lea	 edx, DWORD PTR _exe$142494[esp+601]
  00059	52		 push	 edx
  0005a	6a 00		 push	 0
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12

; 6599 : 
; 6600 : #ifndef VOLFORMAT
; 6601 : 			{
; 6602 : 				char *tmp = NULL;
; 6603 : 
; 6604 : 				if (tmp = strrchr (exe, '\\'))

  00062	8d 44 24 48	 lea	 eax, DWORD PTR _exe$142494[esp+596]
  00066	6a 5c		 push	 92			; 0000005cH
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 _strrchr
  0006e	83 c4 08	 add	 esp, 8
  00071	85 c0		 test	 eax, eax
  00073	74 38		 je	 SHORT $LN3@ManageStar@2

; 6605 : 					strcpy (++tmp, "CipherShed Format.exe");

  00075	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0BG@NHCNJMON@CipherShed?5Format?4exe?$AA@
  0007b	89 48 01	 mov	 DWORD PTR [eax+1], ecx
  0007e	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0BG@NHCNJMON@CipherShed?5Format?4exe?$AA@+4
  00084	89 50 05	 mov	 DWORD PTR [eax+5], edx
  00087	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0BG@NHCNJMON@CipherShed?5Format?4exe?$AA@+8
  0008d	89 48 09	 mov	 DWORD PTR [eax+9], ecx
  00090	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0BG@NHCNJMON@CipherShed?5Format?4exe?$AA@+12
  00096	89 50 0d	 mov	 DWORD PTR [eax+13], edx
  00099	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0BG@NHCNJMON@CipherShed?5Format?4exe?$AA@+16
  0009f	89 48 11	 mov	 DWORD PTR [eax+17], ecx
  000a2	66 8b 15 14 00
	00 00		 mov	 dx, WORD PTR ??_C@_0BG@NHCNJMON@CipherShed?5Format?4exe?$AA@+20
  000a9	66 89 50 15	 mov	 WORD PTR [eax+21], dx
$LN3@ManageStar@2:

; 6606 : 			}
; 6607 : #endif
; 6608 : 
; 6609 : 		if (strlen (arg) > 0)

  000ad	8b c6		 mov	 eax, esi
  000af	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL9@ManageStar@2:
  000b2	8a 08		 mov	 cl, BYTE PTR [eax]
  000b4	40		 inc	 eax
  000b5	84 c9		 test	 cl, cl
  000b7	75 f9		 jne	 SHORT $LL9@ManageStar@2
  000b9	2b c2		 sub	 eax, edx
  000bb	74 4a		 je	 SHORT $LN2@ManageStar@2

; 6610 : 		{
; 6611 : 			strcat (exe, "\" ");

  000bd	8d 44 24 48	 lea	 eax, DWORD PTR _exe$142494[esp+596]
  000c1	48		 dec	 eax
$LL10@ManageStar@2:
  000c2	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000c5	40		 inc	 eax
  000c6	84 c9		 test	 cl, cl
  000c8	75 f8		 jne	 SHORT $LL10@ManageStar@2
  000ca	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ??_C@_02KOPDJAMB@?$CC?5?$AA@
  000d1	8a 15 02 00 00
	00		 mov	 dl, BYTE PTR ??_C@_02KOPDJAMB@?$CC?5?$AA@+2
  000d7	66 89 08	 mov	 WORD PTR [eax], cx
  000da	88 50 02	 mov	 BYTE PTR [eax+2], dl

; 6612 : 			strcat (exe, arg);

  000dd	8b c6		 mov	 eax, esi
  000df	8b ce		 mov	 ecx, esi
$LL11@ManageStar@2:
  000e1	8a 10		 mov	 dl, BYTE PTR [eax]
  000e3	40		 inc	 eax
  000e4	84 d2		 test	 dl, dl
  000e6	75 f9		 jne	 SHORT $LL11@ManageStar@2
  000e8	57		 push	 edi
  000e9	8d 7c 24 4c	 lea	 edi, DWORD PTR _exe$142494[esp+600]
  000ed	2b c1		 sub	 eax, ecx
  000ef	4f		 dec	 edi
$LL12@ManageStar@2:
  000f0	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  000f3	47		 inc	 edi
  000f4	84 c9		 test	 cl, cl
  000f6	75 f8		 jne	 SHORT $LL12@ManageStar@2
  000f8	8b c8		 mov	 ecx, eax
  000fa	c1 e9 02	 shr	 ecx, 2
  000fd	f3 a5		 rep movsd
  000ff	8b c8		 mov	 ecx, eax
  00101	83 e1 03	 and	 ecx, 3
  00104	f3 a4		 rep movsb
  00106	5f		 pop	 edi
$LN2@ManageStar@2:

; 6613 : 		}
; 6614 : 
; 6615 : 		WriteRegistryString (regk, "CipherShed Format", exe);

  00107	8d 44 24 48	 lea	 eax, DWORD PTR _exe$142494[esp+596]
  0010b	50		 push	 eax
  0010c	8d 4c 24 0c	 lea	 ecx, DWORD PTR _regk$[esp+600]
  00110	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KCBPKCIG@CipherShed?5Format?$AA@
  00115	51		 push	 ecx
  00116	e8 00 00 00 00	 call	 _WriteRegistryString
  0011b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011e	5e		 pop	 esi

; 6619 : }

  0011f	8b 8c 24 4c 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+592]
  00126	33 cc		 xor	 ecx, esp
  00128	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012d	81 c4 50 02 00
	00		 add	 esp, 592		; 00000250H
  00133	c3		 ret	 0
$LN4@ManageStar@2:

; 6616 : 	}
; 6617 : 	else
; 6618 : 		DeleteRegistryValue (regk, "CipherShed Format");

  00134	8d 54 24 08	 lea	 edx, DWORD PTR _regk$[esp+596]
  00138	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KCBPKCIG@CipherShed?5Format?$AA@
  0013d	52		 push	 edx
  0013e	e8 00 00 00 00	 call	 _DeleteRegistryValue

; 6619 : }

  00143	8b 8c 24 58 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+604]
  0014a	83 c4 08	 add	 esp, 8
  0014d	5e		 pop	 esi
  0014e	33 cc		 xor	 ecx, esp
  00150	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00155	81 c4 50 02 00
	00		 add	 esp, 592		; 00000250H
  0015b	c3		 ret	 0
_ManageStartupSeqWiz ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EL@PILLFCOM@Software?2Microsoft?2Windows?2Curre@ ; `string'
PUBLIC	??_C@_07GIFPBEK@MRUList?$AA@			; `string'
PUBLIC	??_C@_0EP@FIHCEBDK@Software?2Microsoft?2Windows?2Curre@ ; `string'
PUBLIC	??_C@_09FBJLNPFF@MRUListEx?$AA@			; `string'
PUBLIC	??_C@_0BE@KHAIBFAM@CLEAN_WINMRU_FAILED?$AA@	; `string'
PUBLIC	??_C@_02HAOIJKIC@?$CFc?$AA@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_0EN@FCPBNDLP@Software?2Microsoft?2Windows?2Curre@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_04MBHGDIPH@Pidl?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_CleanLastVisitedMRU
EXTRN	_ReadRegistryString:PROC
EXTRN	_WriteRegistryBytes:PROC
EXTRN	__wcsicmp:PROC
EXTRN	_ReadRegistryBytes:PROC
EXTRN	__imp__GetModuleFileNameW@12:PROC
;	COMDAT ??_C@_0EL@PILLFCOM@Software?2Microsoft?2Windows?2Curre@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string.h
CONST	SEGMENT
??_C@_0EL@PILLFCOM@Software?2Microsoft?2Windows?2Curre@ DB 'Software\Micr'
	DB	'osoft\Windows\CurrentVersion\Explorer\ComDlg32\LastVisitedMRU'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_07GIFPBEK@MRUList?$AA@
CONST	SEGMENT
??_C@_07GIFPBEK@MRUList?$AA@ DB 'MRUList', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@FIHCEBDK@Software?2Microsoft?2Windows?2Curre@
CONST	SEGMENT
??_C@_0EP@FIHCEBDK@Software?2Microsoft?2Windows?2Curre@ DB 'Software\Micr'
	DB	'osoft\Windows\CurrentVersion\Explorer\ComDlg32\LastVisitedPid'
	DB	'lMRU', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09FBJLNPFF@MRUListEx?$AA@
CONST	SEGMENT
??_C@_09FBJLNPFF@MRUListEx?$AA@ DB 'MRUListEx', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KHAIBFAM@CLEAN_WINMRU_FAILED?$AA@
CONST	SEGMENT
??_C@_0BE@KHAIBFAM@CLEAN_WINMRU_FAILED?$AA@ DB 'CLEAN_WINMRU_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02HAOIJKIC@?$CFc?$AA@
CONST	SEGMENT
??_C@_02HAOIJKIC@?$CFc?$AA@ DB '%c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@FCPBNDLP@Software?2Microsoft?2Windows?2Curre@
CONST	SEGMENT
??_C@_0EN@FCPBNDLP@Software?2Microsoft?2Windows?2Curre@ DB 'Software\Micr'
	DB	'osoft\Windows\CurrentVersion\Explorer\ComDlg32\LastVisited%sM'
	DB	'RU', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04MBHGDIPH@Pidl?$AA@
CONST	SEGMENT
??_C@_04MBHGDIPH@Pidl?$AA@ DB 'Pidl', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
CONST	ENDS
;	COMDAT _CleanLastVisitedMRU
_TEXT	SEGMENT
_key$ = -139980						; size = 64
_regPath$ = -139916					; size = 128
_exeFilename$ = -139788					; size = 520
_buf$142521 = -139268					; size = 65568
_strTmp$ = -73732					; size = 8192
_bufout$142522 = -65540					; size = 65536
__$ArrayPad$ = -4					; size = 4
_CleanLastVisitedMRU PROC				; COMDAT

; 6624 : {

  00000	b8 cc 22 02 00	 mov	 eax, 139980		; 000222ccH
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 c8 22
	02 00		 mov	 DWORD PTR __$ArrayPad$[esp+139980], eax
  00018	53		 push	 ebx
  00019	56		 push	 esi

; 6625 : 	WCHAR exeFilename[MAX_PATH];
; 6626 : 	WCHAR *strToMatch;
; 6627 : 
; 6628 : 	WCHAR strTmp[4096];
; 6629 : 	char regPath[128];
; 6630 : 	char key[64];
; 6631 : 	int id, len;
; 6632 : 
; 6633 : 	GetModuleFileNameW (NULL, exeFilename, sizeof (exeFilename) / sizeof(exeFilename[0]));

  0001a	68 04 01 00 00	 push	 260			; 00000104H
  0001f	8d 84 24 cc 00
	00 00		 lea	 eax, DWORD PTR _exeFilename$[esp+139992]
  00026	50		 push	 eax
  00027	6a 00		 push	 0
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameW@12

; 6634 : 	strToMatch = wcsrchr (exeFilename, '\\') + 1;

  0002f	8d 8c 24 c8 00
	00 00		 lea	 ecx, DWORD PTR _exeFilename$[esp+139988]
  00036	6a 5c		 push	 92			; 0000005cH
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 _wcsrchr
  0003e	8b d8		 mov	 ebx, eax

; 6635 : 
; 6636 : 	snprintf (regPath, ARRAY_LENGTH(regPath), "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\LastVisited%sMRU", IsOSAtLeast (WIN_VISTA) ? "Pidl" : "");

  00040	6a 0b		 push	 11			; 0000000bH
  00042	83 c3 02	 add	 ebx, 2
  00045	e8 00 00 00 00	 call	 _IsOSAtLeast
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004d	85 c0		 test	 eax, eax
  0004f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04MBHGDIPH@Pidl?$AA@
  00054	75 05		 jne	 SHORT $LN18@CleanLastV
  00056	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN18@CleanLastV:
  0005b	50		 push	 eax
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FCPBNDLP@Software?2Microsoft?2Windows?2Curre@
  00061	8d 54 24 50	 lea	 edx, DWORD PTR _regPath$[esp+139996]
  00065	68 80 00 00 00	 push	 128			; 00000080H
  0006a	52		 push	 edx
  0006b	e8 00 00 00 00	 call	 _sprintf_s

; 6637 : 
; 6638 : 	for (id = (IsOSAtLeast (WIN_VISTA) ? 0 : 'a'); id <= (IsOSAtLeast (WIN_VISTA) ? 1000 : 'z'); id++)

  00070	6a 0b		 push	 11			; 0000000bH
  00072	e8 00 00 00 00	 call	 _IsOSAtLeast
  00077	8b f0		 mov	 esi, eax
  00079	f7 de		 neg	 esi
  0007b	1b f6		 sbb	 esi, esi
  0007d	83 e6 9f	 and	 esi, -97		; ffffff9fH
  00080	6a 0b		 push	 11			; 0000000bH
  00082	83 c6 61	 add	 esi, 97			; 00000061H
  00085	e8 00 00 00 00	 call	 _IsOSAtLeast
  0008a	83 c4 18	 add	 esp, 24			; 00000018H
  0008d	f7 d8		 neg	 eax
  0008f	1b c0		 sbb	 eax, eax
  00091	25 6e 03 00 00	 and	 eax, 878		; 0000036eH
  00096	83 c0 7a	 add	 eax, 122		; 0000007aH
  00099	3b f0		 cmp	 esi, eax
  0009b	0f 8f e7 01 00
	00		 jg	 $LN4@CleanLastV
  000a1	57		 push	 edi
$LL14@CleanLastV:

; 6639 : 	{
; 6640 : 		*strTmp = 0;

  000a2	33 c0		 xor	 eax, eax

; 6641 : 		snprintf (key, ARRAY_LENGTH(key), (IsOSAtLeast (WIN_VISTA) ? "%d" : "%c"), id);

  000a4	6a 0b		 push	 11			; 0000000bH
  000a6	66 89 84 24 d8
	02 01 00	 mov	 WORD PTR _strTmp$[esp+139996], ax
  000ae	e8 00 00 00 00	 call	 _IsOSAtLeast
  000b3	83 c4 04	 add	 esp, 4
  000b6	85 c0		 test	 eax, eax
  000b8	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  000bd	75 05		 jne	 SHORT $LN20@CleanLastV
  000bf	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_02HAOIJKIC@?$CFc?$AA@
$LN20@CleanLastV:
  000c4	56		 push	 esi
  000c5	50		 push	 eax
  000c6	8d 4c 24 14	 lea	 ecx, DWORD PTR _key$[esp+140000]
  000ca	6a 40		 push	 64			; 00000040H
  000cc	51		 push	 ecx
  000cd	e8 00 00 00 00	 call	 _sprintf_s

; 6642 : 
; 6643 : 		if ((len = ReadRegistryBytes (regPath, key, (char *) strTmp, sizeof (strTmp))) > 0)

  000d2	68 00 20 00 00	 push	 8192			; 00002000H
  000d7	8d 94 24 e8 02
	01 00		 lea	 edx, DWORD PTR _strTmp$[esp+140012]
  000de	52		 push	 edx
  000df	8d 44 24 24	 lea	 eax, DWORD PTR _key$[esp+140016]
  000e3	50		 push	 eax
  000e4	8d 4c 24 68	 lea	 ecx, DWORD PTR _regPath$[esp+140020]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 _ReadRegistryBytes
  000ee	8b f8		 mov	 edi, eax
  000f0	83 c4 20	 add	 esp, 32			; 00000020H
  000f3	85 ff		 test	 edi, edi
  000f5	7e 15		 jle	 SHORT $LN13@CleanLastV

; 6644 : 		{
; 6645 : 			if (_wcsicmp (strTmp, strToMatch) == 0) 

  000f7	8d 94 24 d4 02
	01 00		 lea	 edx, DWORD PTR _strTmp$[esp+139992]
  000fe	53		 push	 ebx
  000ff	52		 push	 edx
  00100	e8 00 00 00 00	 call	 __wcsicmp
  00105	83 c4 08	 add	 esp, 8
  00108	85 c0		 test	 eax, eax
  0010a	74 37		 je	 SHORT $LN28@CleanLastV
$LN13@CleanLastV:

; 6637 : 
; 6638 : 	for (id = (IsOSAtLeast (WIN_VISTA) ? 0 : 'a'); id <= (IsOSAtLeast (WIN_VISTA) ? 1000 : 'z'); id++)

  0010c	6a 0b		 push	 11			; 0000000bH
  0010e	46		 inc	 esi
  0010f	e8 00 00 00 00	 call	 _IsOSAtLeast
  00114	83 c4 04	 add	 esp, 4
  00117	f7 d8		 neg	 eax
  00119	1b c0		 sbb	 eax, eax
  0011b	25 6e 03 00 00	 and	 eax, 878		; 0000036eH
  00120	83 c0 7a	 add	 eax, 122		; 0000007aH
  00123	3b f0		 cmp	 esi, eax
  00125	0f 8e 77 ff ff
	ff		 jle	 $LL14@CleanLastV
  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi
  0012d	5b		 pop	 ebx

; 6697 : 				}
; 6698 : 
; 6699 : 				break;
; 6700 : 			}
; 6701 : 		}
; 6702 : 	}
; 6703 : }

  0012e	8b 8c 24 c8 22
	02 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+139980]
  00135	33 cc		 xor	 ecx, esp
  00137	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013c	81 c4 cc 22 02
	00		 add	 esp, 139980		; 000222ccH
  00142	c3		 ret	 0
$LN28@CleanLastV:

; 6646 : 			{
; 6647 : 				char buf[65536], bufout[sizeof (buf)];
; 6648 : 
; 6649 : 				// Overwrite the entry with zeroes while keeping its original size
; 6650 : 				memset (strTmp, 0, len);

  00143	57		 push	 edi
  00144	8d 84 24 d8 02
	01 00		 lea	 eax, DWORD PTR _strTmp$[esp+139996]
  0014b	6a 00		 push	 0
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 _memset

; 6651 : 				if (!WriteRegistryBytes (regPath, key, (char *) strTmp, len))

  00153	57		 push	 edi
  00154	8d 8c 24 e4 02
	01 00		 lea	 ecx, DWORD PTR _strTmp$[esp+140008]
  0015b	51		 push	 ecx
  0015c	8d 54 24 20	 lea	 edx, DWORD PTR _key$[esp+140012]
  00160	52		 push	 edx
  00161	8d 44 24 64	 lea	 eax, DWORD PTR _regPath$[esp+140016]
  00165	50		 push	 eax
  00166	e8 00 00 00 00	 call	 _WriteRegistryBytes
  0016b	83 c4 1c	 add	 esp, 28			; 0000001cH
  0016e	85 c0		 test	 eax, eax
  00170	75 1f		 jne	 SHORT $LN9@CleanLastV

; 6652 : 					MessageBoxW (NULL, GetString ("CLEAN_WINMRU_FAILED"), lpszTitle, ICON_HAND);

  00172	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  00178	6a 10		 push	 16			; 00000010H
  0017a	51		 push	 ecx
  0017b	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@KHAIBFAM@CLEAN_WINMRU_FAILED?$AA@
  00180	e8 00 00 00 00	 call	 _GetString
  00185	83 c4 04	 add	 esp, 4
  00188	50		 push	 eax
  00189	6a 00		 push	 0
  0018b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN9@CleanLastV:

; 6653 : 
; 6654 : 				DeleteRegistryValue (regPath, key);

  00191	8d 54 24 0c	 lea	 edx, DWORD PTR _key$[esp+139992]
  00195	52		 push	 edx
  00196	8d 44 24 50	 lea	 eax, DWORD PTR _regPath$[esp+139996]
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _DeleteRegistryValue

; 6655 : 
; 6656 : 				// Remove ID from MRUList
; 6657 : 				if (IsOSAtLeast (WIN_VISTA))

  001a0	6a 0b		 push	 11			; 0000000bH
  001a2	e8 00 00 00 00	 call	 _IsOSAtLeast
  001a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6658 : 				{
; 6659 : 					int *p = (int *)buf;

  001aa	8d bc 24 d4 02
	00 00		 lea	 edi, DWORD PTR _buf$142521[esp+139992]

; 6660 : 					int *pout = (int *)bufout;

  001b1	8d 9c 24 d4 22
	01 00		 lea	 ebx, DWORD PTR _bufout$142522[esp+139992]

; 6661 : 					int l;
; 6662 : 
; 6663 : 					l = len = ReadRegistryBytes ("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\LastVisitedPidlMRU", "MRUListEx", buf, sizeof (buf));

  001b8	68 00 00 01 00	 push	 65536			; 00010000H
  001bd	85 c0		 test	 eax, eax
  001bf	74 6e		 je	 SHORT $LN8@CleanLastV
  001c1	8b cf		 mov	 ecx, edi
  001c3	51		 push	 ecx
  001c4	68 00 00 00 00	 push	 OFFSET ??_C@_09FBJLNPFF@MRUListEx?$AA@
  001c9	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FIHCEBDK@Software?2Microsoft?2Windows?2Curre@
  001ce	e8 00 00 00 00	 call	 _ReadRegistryBytes
  001d3	83 c4 10	 add	 esp, 16			; 00000010H

; 6664 : 					while (l > 0)

  001d6	85 c0		 test	 eax, eax
  001d8	7e 22		 jle	 SHORT $LN6@CleanLastV
  001da	8d 50 ff	 lea	 edx, DWORD PTR [eax-1]
  001dd	c1 ea 02	 shr	 edx, 2
  001e0	42		 inc	 edx
$LL7@CleanLastV:

; 6665 : 					{
; 6666 : 						l -= sizeof (int);
; 6667 : 
; 6668 : 						if (*p == id)

  001e1	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001e3	3b ce		 cmp	 ecx, esi
  001e5	75 08		 jne	 SHORT $LN5@CleanLastV

; 6669 : 						{
; 6670 : 							p++;

  001e7	83 c7 04	 add	 edi, 4

; 6671 : 							len -= sizeof (int);

  001ea	83 e8 04	 sub	 eax, 4

; 6672 : 							continue;

  001ed	eb 08		 jmp	 SHORT $LN30@CleanLastV
$LN5@CleanLastV:

; 6673 : 						}
; 6674 : 						*pout++ = *p++;

  001ef	89 0b		 mov	 DWORD PTR [ebx], ecx
  001f1	83 c3 04	 add	 ebx, 4
  001f4	83 c7 04	 add	 edi, 4
$LN30@CleanLastV:

; 6664 : 					while (l > 0)

  001f7	83 ea 01	 sub	 edx, 1
  001fa	75 e5		 jne	 SHORT $LL7@CleanLastV
$LN6@CleanLastV:

; 6675 : 					}
; 6676 : 
; 6677 : 					WriteRegistryBytes ("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\LastVisitedPidlMRU", "MRUListEx", bufout, len);

  001fc	50		 push	 eax
  001fd	8d 94 24 d8 22
	01 00		 lea	 edx, DWORD PTR _bufout$142522[esp+139996]
  00204	52		 push	 edx
  00205	68 00 00 00 00	 push	 OFFSET ??_C@_09FBJLNPFF@MRUListEx?$AA@
  0020a	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FIHCEBDK@Software?2Microsoft?2Windows?2Curre@
  0020f	e8 00 00 00 00	 call	 _WriteRegistryBytes
  00214	83 c4 10	 add	 esp, 16			; 00000010H
  00217	5f		 pop	 edi
  00218	5e		 pop	 esi
  00219	5b		 pop	 ebx

; 6697 : 				}
; 6698 : 
; 6699 : 				break;
; 6700 : 			}
; 6701 : 		}
; 6702 : 	}
; 6703 : }

  0021a	8b 8c 24 c8 22
	02 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+139980]
  00221	33 cc		 xor	 ecx, esp
  00223	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00228	81 c4 cc 22 02
	00		 add	 esp, 139980		; 000222ccH
  0022e	c3		 ret	 0
$LN8@CleanLastV:

; 6678 : 				}
; 6679 : 				else
; 6680 : 				{
; 6681 : 					char *p = buf;
; 6682 : 					char *pout = bufout;
; 6683 : 
; 6684 : 					ReadRegistryString ("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\LastVisitedMRU", "MRUList", "", buf, sizeof (buf));

  0022f	8d 84 24 d8 02
	00 00		 lea	 eax, DWORD PTR _buf$142521[esp+139996]
  00236	50		 push	 eax
  00237	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0023c	68 00 00 00 00	 push	 OFFSET ??_C@_07GIFPBEK@MRUList?$AA@
  00241	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@PILLFCOM@Software?2Microsoft?2Windows?2Curre@
  00246	e8 00 00 00 00	 call	 _ReadRegistryString
  0024b	83 c4 14	 add	 esp, 20			; 00000014H

; 6685 : 					while (*p)

  0024e	80 bc 24 d4 02
	00 00 00	 cmp	 BYTE PTR _buf$142521[esp+139992], 0
  00256	74 12		 je	 SHORT $LN2@CleanLastV
$LL3@CleanLastV:

; 6686 : 					{
; 6687 : 						if (*p == id)

  00258	8a 07		 mov	 al, BYTE PTR [edi]
  0025a	0f be c8	 movsx	 ecx, al
  0025d	3b ce		 cmp	 ecx, esi

; 6688 : 						{
; 6689 : 							p++;
; 6690 : 							continue;

  0025f	74 03		 je	 SHORT $LN33@CleanLastV

; 6691 : 						}
; 6692 : 						*pout++ = *p++;

  00261	88 03		 mov	 BYTE PTR [ebx], al
  00263	43		 inc	 ebx
$LN33@CleanLastV:
  00264	47		 inc	 edi
  00265	80 3f 00	 cmp	 BYTE PTR [edi], 0
  00268	75 ee		 jne	 SHORT $LL3@CleanLastV
$LN2@CleanLastV:

; 6693 : 					}
; 6694 : 					*pout++ = 0;
; 6695 : 
; 6696 : 					WriteRegistryString ("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\LastVisitedMRU", "MRUList", bufout);

  0026a	8d 94 24 d4 22
	01 00		 lea	 edx, DWORD PTR _bufout$142522[esp+139992]
  00271	52		 push	 edx
  00272	68 00 00 00 00	 push	 OFFSET ??_C@_07GIFPBEK@MRUList?$AA@
  00277	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@PILLFCOM@Software?2Microsoft?2Windows?2Curre@
  0027c	c6 03 00	 mov	 BYTE PTR [ebx], 0
  0027f	e8 00 00 00 00	 call	 _WriteRegistryString
  00284	83 c4 0c	 add	 esp, 12			; 0000000cH
  00287	5f		 pop	 edi
$LN4@CleanLastV:

; 6697 : 				}
; 6698 : 
; 6699 : 				break;
; 6700 : 			}
; 6701 : 		}
; 6702 : 	}
; 6703 : }

  00288	8b 8c 24 d0 22
	02 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+139988]
  0028f	5e		 pop	 esi
  00290	5b		 pop	 ebx
  00291	33 cc		 xor	 ecx, esp
  00293	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00298	81 c4 cc 22 02
	00		 add	 esp, 139980		; 000222ccH
  0029e	c3		 ret	 0
_CleanLastVisitedMRU ENDP
_TEXT	ENDS
PUBLIC	_ListItemAdd
; Function compile flags: /Ogtpy
;	COMDAT _ListItemAdd
_TEXT	SEGMENT
_li$ = -52						; size = 52
_list$ = 8						; size = 4
_index$ = 12						; size = 4
_string$ = 16						; size = 4
_ListItemAdd PROC					; COMDAT

; 6722 : {

  00000	83 ec 34	 sub	 esp, 52			; 00000034H

; 6723 : 	LVITEM li;
; 6724 : 	memset (&li, 0, sizeof(li));

  00003	6a 34		 push	 52			; 00000034H
  00005	8d 44 24 04	 lea	 eax, DWORD PTR _li$[esp+56]
  00009	6a 00		 push	 0
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _memset

; 6725 : 
; 6726 : 	li.mask = LVIF_TEXT;
; 6727 : 	li.pszText = string;

  00011	8b 4c 24 4c	 mov	 ecx, DWORD PTR _string$[esp+60]

; 6728 : 	li.iItem = index; 

  00015	8b 54 24 48	 mov	 edx, DWORD PTR _index$[esp+60]
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6729 : 	li.iSubItem = 0;
; 6730 : 	return ListView_InsertItem (list, &li);

  0001c	8d 04 24	 lea	 eax, DWORD PTR _li$[esp+52]
  0001f	50		 push	 eax
  00020	6a 00		 push	 0
  00022	89 4c 24 1c	 mov	 DWORD PTR _li$[esp+80], ecx
  00026	8b 4c 24 40	 mov	 ecx, DWORD PTR _list$[esp+56]
  0002a	68 07 10 00 00	 push	 4103			; 00001007H
  0002f	51		 push	 ecx
  00030	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR _li$[esp+68], 1
  00038	89 54 24 14	 mov	 DWORD PTR _li$[esp+72], edx
  0003c	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR _li$[esp+76], 0
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 6731 : }

  0004a	83 c4 34	 add	 esp, 52			; 00000034H
  0004d	c3		 ret	 0
_ListItemAdd ENDP
_TEXT	ENDS
PUBLIC	_ListItemAddW
; Function compile flags: /Ogtpy
;	COMDAT _ListItemAddW
_TEXT	SEGMENT
_li$ = -52						; size = 52
_list$ = 8						; size = 4
_index$ = 12						; size = 4
_string$ = 16						; size = 4
_ListItemAddW PROC					; COMDAT

; 6735 : {

  00000	83 ec 34	 sub	 esp, 52			; 00000034H

; 6736 : 	LVITEMW li;
; 6737 : 	memset (&li, 0, sizeof(li));

  00003	6a 34		 push	 52			; 00000034H
  00005	8d 44 24 04	 lea	 eax, DWORD PTR _li$[esp+56]
  00009	6a 00		 push	 0
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _memset

; 6738 : 
; 6739 : 	li.mask = LVIF_TEXT;
; 6740 : 	li.pszText = string;

  00011	8b 4c 24 4c	 mov	 ecx, DWORD PTR _string$[esp+60]

; 6741 : 	li.iItem = index; 

  00015	8b 54 24 48	 mov	 edx, DWORD PTR _index$[esp+60]
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6742 : 	li.iSubItem = 0;
; 6743 : 	return SendMessageW (list, LVM_INSERTITEMW, 0, (LPARAM)(&li));

  0001c	8d 04 24	 lea	 eax, DWORD PTR _li$[esp+52]
  0001f	50		 push	 eax
  00020	6a 00		 push	 0
  00022	89 4c 24 1c	 mov	 DWORD PTR _li$[esp+80], ecx
  00026	8b 4c 24 40	 mov	 ecx, DWORD PTR _list$[esp+56]
  0002a	68 4d 10 00 00	 push	 4173			; 0000104dH
  0002f	51		 push	 ecx
  00030	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR _li$[esp+68], 1
  00038	89 54 24 14	 mov	 DWORD PTR _li$[esp+72], edx
  0003c	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR _li$[esp+76], 0
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageW@16

; 6744 : }

  0004a	83 c4 34	 add	 esp, 52			; 00000034H
  0004d	c3		 ret	 0
_ListItemAddW ENDP
_TEXT	ENDS
PUBLIC	_ListSubItemSet
; Function compile flags: /Ogtpy
;	COMDAT _ListSubItemSet
_TEXT	SEGMENT
_li$ = -52						; size = 52
_list$ = 8						; size = 4
_index$ = 12						; size = 4
_subIndex$ = 16						; size = 4
_string$ = 20						; size = 4
_ListSubItemSet PROC					; COMDAT

; 6748 : {

  00000	83 ec 34	 sub	 esp, 52			; 00000034H

; 6749 : 	LVITEM li;
; 6750 : 	memset (&li, 0, sizeof(li));

  00003	6a 34		 push	 52			; 00000034H
  00005	8d 44 24 04	 lea	 eax, DWORD PTR _li$[esp+56]
  00009	6a 00		 push	 0
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _memset

; 6751 : 
; 6752 : 	li.mask = LVIF_TEXT;
; 6753 : 	li.pszText = string;

  00011	8b 4c 24 50	 mov	 ecx, DWORD PTR _string$[esp+60]

; 6754 : 	li.iItem = index; 

  00015	8b 54 24 48	 mov	 edx, DWORD PTR _index$[esp+60]

; 6755 : 	li.iSubItem = subIndex;

  00019	8b 44 24 4c	 mov	 eax, DWORD PTR _subIndex$[esp+60]
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	89 4c 24 14	 mov	 DWORD PTR _li$[esp+72], ecx

; 6756 : 	return ListView_SetItem (list, &li);

  00024	8d 0c 24	 lea	 ecx, DWORD PTR _li$[esp+52]
  00027	51		 push	 ecx
  00028	6a 00		 push	 0
  0002a	89 54 24 0c	 mov	 DWORD PTR _li$[esp+64], edx
  0002e	8b 54 24 40	 mov	 edx, DWORD PTR _list$[esp+56]
  00032	68 06 10 00 00	 push	 4102			; 00001006H
  00037	52		 push	 edx
  00038	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR _li$[esp+68], 1
  00040	89 44 24 18	 mov	 DWORD PTR _li$[esp+76], eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 6757 : }

  0004a	83 c4 34	 add	 esp, 52			; 00000034H
  0004d	c3		 ret	 0
_ListSubItemSet ENDP
_TEXT	ENDS
PUBLIC	_ListSubItemSetW
; Function compile flags: /Ogtpy
;	COMDAT _ListSubItemSetW
_TEXT	SEGMENT
_li$ = -52						; size = 52
_list$ = 8						; size = 4
_index$ = 12						; size = 4
_subIndex$ = 16						; size = 4
_string$ = 20						; size = 4
_ListSubItemSetW PROC					; COMDAT

; 6761 : {

  00000	83 ec 34	 sub	 esp, 52			; 00000034H

; 6762 : 	LVITEMW li;
; 6763 : 	memset (&li, 0, sizeof(li));

  00003	6a 34		 push	 52			; 00000034H
  00005	8d 44 24 04	 lea	 eax, DWORD PTR _li$[esp+56]
  00009	6a 00		 push	 0
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _memset

; 6764 : 
; 6765 : 	li.mask = LVIF_TEXT;
; 6766 : 	li.pszText = string;

  00011	8b 4c 24 50	 mov	 ecx, DWORD PTR _string$[esp+60]

; 6767 : 	li.iItem = index; 

  00015	8b 54 24 48	 mov	 edx, DWORD PTR _index$[esp+60]

; 6768 : 	li.iSubItem = subIndex;

  00019	8b 44 24 4c	 mov	 eax, DWORD PTR _subIndex$[esp+60]
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	89 4c 24 14	 mov	 DWORD PTR _li$[esp+72], ecx

; 6769 : 	return SendMessageW (list, LVM_SETITEMW, 0, (LPARAM)(&li));

  00024	8d 0c 24	 lea	 ecx, DWORD PTR _li$[esp+52]
  00027	51		 push	 ecx
  00028	6a 00		 push	 0
  0002a	89 54 24 0c	 mov	 DWORD PTR _li$[esp+64], edx
  0002e	8b 54 24 40	 mov	 edx, DWORD PTR _list$[esp+56]
  00032	68 4c 10 00 00	 push	 4172			; 0000104cH
  00037	52		 push	 edx
  00038	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR _li$[esp+68], 1
  00040	89 44 24 18	 mov	 DWORD PTR _li$[esp+76], eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageW@16

; 6770 : }

  0004a	83 c4 34	 add	 esp, 52			; 00000034H
  0004d	c3		 ret	 0
_ListSubItemSetW ENDP
_TEXT	ENDS
PUBLIC	_GetMountList
; Function compile flags: /Ogtpy
;	COMDAT _GetMountList
_TEXT	SEGMENT
_dwResult$ = -4						; size = 4
_list$ = 8						; size = 4
_GetMountList PROC					; COMDAT

; 6774 : {

  00000	51		 push	 ecx
  00001	56		 push	 esi

; 6775 : 	DWORD dwResult;
; 6776 : 
; 6777 : 	memset (list, 0, sizeof (*list));

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR _list$[esp+4]
  00006	68 74 36 00 00	 push	 13940			; 00003674H
  0000b	6a 00		 push	 0
  0000d	56		 push	 esi
  0000e	e8 00 00 00 00	 call	 _memset

; 6778 : 	return DeviceIoControl (hDriver, TC_IOCTL_GET_MOUNTED_VOLUMES, list,
; 6779 : 		sizeof (*list), list, sizeof (*list), &dwResult,
; 6780 : 		NULL);

  00013	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hDriver
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	6a 00		 push	 0
  0001e	8d 44 24 08	 lea	 eax, DWORD PTR _dwResult$[esp+12]
  00022	50		 push	 eax
  00023	68 74 36 00 00	 push	 13940			; 00003674H
  00028	56		 push	 esi
  00029	68 74 36 00 00	 push	 13940			; 00003674H
  0002e	56		 push	 esi
  0002f	68 18 20 22 00	 push	 2236440			; 00222018H
  00034	51		 push	 ecx
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  0003b	5e		 pop	 esi

; 6781 : }

  0003c	59		 pop	 ecx
  0003d	c3		 ret	 0
_GetMountList ENDP
_TEXT	ENDS
PUBLIC	_GetDriverRefCount
; Function compile flags: /Ogtpy
;	COMDAT _GetDriverRefCount
_TEXT	SEGMENT
_refCount$ = -8						; size = 4
_dwResult$ = -4						; size = 4
_GetDriverRefCount PROC					; COMDAT

; 6785 : {

  00000	83 ec 08	 sub	 esp, 8

; 6786 : 	DWORD dwResult;
; 6787 : 	BOOL bResult;
; 6788 : 	int refCount;
; 6789 : 
; 6790 : 	bResult = DeviceIoControl (hDriver, TC_IOCTL_GET_DEVICE_REFCOUNT, &refCount, sizeof (refCount), &refCount,
; 6791 : 		sizeof (refCount), &dwResult, NULL);

  00003	6a 00		 push	 0
  00005	8d 44 24 08	 lea	 eax, DWORD PTR _dwResult$[esp+12]
  00009	50		 push	 eax
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDriver
  0000f	6a 04		 push	 4
  00011	8d 4c 24 0c	 lea	 ecx, DWORD PTR _refCount$[esp+20]
  00015	51		 push	 ecx
  00016	6a 04		 push	 4
  00018	8b d1		 mov	 edx, ecx
  0001a	52		 push	 edx
  0001b	68 20 20 22 00	 push	 2236448			; 00222020H
  00020	50		 push	 eax
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 6792 : 
; 6793 : 	if (bResult)

  00027	85 c0		 test	 eax, eax
  00029	74 07		 je	 SHORT $LN2@GetDriverR

; 6794 : 		return refCount;

  0002b	8b 04 24	 mov	 eax, DWORD PTR _refCount$[esp+8]

; 6797 : }

  0002e	83 c4 08	 add	 esp, 8
  00031	c3		 ret	 0
$LN2@GetDriverR:

; 6795 : 	else
; 6796 : 		return -1;

  00032	83 c8 ff	 or	 eax, -1

; 6797 : }

  00035	83 c4 08	 add	 esp, 8
  00038	c3		 ret	 0
_GetDriverRefCount ENDP
_TEXT	ENDS
PUBLIC	_LoadInt32
EXTRN	__imp__SetFilePointerEx@20:PROC
; Function compile flags: /Ogtpy
;	COMDAT _LoadInt32
_TEXT	SEGMENT
_bytesRead$ = -12					; size = 4
_seekOffsetNew$ = -8					; size = 8
_filePath$ = 8						; size = 4
_result$ = 12						; size = 4
_fileOffset$ = 16					; size = 8
_LoadInt32 PROC						; COMDAT

; 6802 : {

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 6803 : 	size_t bufSize = sizeof(__int32);
; 6804 : 	unsigned char *buffer = (unsigned char *) malloc (bufSize);

  00005	6a 04		 push	 4
  00007	e8 00 00 00 00	 call	 _malloc
  0000c	8b f0		 mov	 esi, eax
  0000e	83 c4 04	 add	 esp, 4

; 6805 : 	unsigned char *bufferPtr = buffer;
; 6806 : 	HANDLE src = NULL;
; 6807 : 	DWORD bytesRead;
; 6808 : 	LARGE_INTEGER seekOffset, seekOffsetNew;
; 6809 : 	BOOL retVal = FALSE;

  00011	33 db		 xor	 ebx, ebx

; 6810 : 
; 6811 : 	if (buffer == NULL)

  00013	85 f6		 test	 esi, esi
  00015	75 09		 jne	 SHORT $LN7@LoadInt32
  00017	5e		 pop	 esi

; 6812 : 		return -1;

  00018	83 c8 ff	 or	 eax, -1
  0001b	5b		 pop	 ebx

; 6841 : }

  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001f	c3		 ret	 0
$LN7@LoadInt32:

; 6813 : 
; 6814 : 	src = CreateFile (filePath, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00020	8b 44 24 18	 mov	 eax, DWORD PTR _filePath$[esp+16]
  00024	57		 push	 edi
  00025	6a 00		 push	 0
  00027	6a 00		 push	 0
  00029	6a 03		 push	 3
  0002b	6a 00		 push	 0
  0002d	6a 03		 push	 3
  0002f	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00034	50		 push	 eax
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0003b	8b f8		 mov	 edi, eax

; 6815 : 
; 6816 : 	if (src == INVALID_HANDLE_VALUE)

  0003d	83 ff ff	 cmp	 edi, -1
  00040	75 12		 jne	 SHORT $LN6@LoadInt32

; 6817 : 	{
; 6818 : 		free (buffer);

  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 _free
  00048	83 c4 04	 add	 esp, 4
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi

; 6819 : 		return FALSE;

  0004d	33 c0		 xor	 eax, eax
  0004f	5b		 pop	 ebx

; 6841 : }

  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	c3		 ret	 0
$LN6@LoadInt32:

; 6820 : 	}
; 6821 : 
; 6822 : 	seekOffset.QuadPart = fileOffset;
; 6823 : 
; 6824 : 	if (SetFilePointerEx (src, seekOffset, &seekOffsetNew, FILE_BEGIN) == 0)

  00054	8b 54 24 28	 mov	 edx, DWORD PTR _fileOffset$[esp+24]
  00058	8b 44 24 24	 mov	 eax, DWORD PTR _fileOffset$[esp+20]
  0005c	6a 00		 push	 0
  0005e	8d 4c 24 14	 lea	 ecx, DWORD PTR _seekOffsetNew$[esp+28]
  00062	51		 push	 ecx
  00063	52		 push	 edx
  00064	50		 push	 eax
  00065	57		 push	 edi
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointerEx@20
  0006c	85 c0		 test	 eax, eax
  0006e	74 45		 je	 SHORT $fsif_end$142614

; 6825 : 		goto fsif_end;
; 6826 : 
; 6827 : 	if (ReadFile (src, buffer, bufSize, &bytesRead, NULL) == 0 
; 6828 : 		|| bytesRead != bufSize)

  00070	6a 00		 push	 0
  00072	8d 4c 24 10	 lea	 ecx, DWORD PTR _bytesRead$[esp+28]
  00076	51		 push	 ecx
  00077	6a 04		 push	 4
  00079	56		 push	 esi
  0007a	57		 push	 edi
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  00081	85 c0		 test	 eax, eax
  00083	74 30		 je	 SHORT $fsif_end$142614
  00085	83 7c 24 0c 04	 cmp	 DWORD PTR _bytesRead$[esp+24], 4
  0008a	75 29		 jne	 SHORT $fsif_end$142614

; 6829 : 		goto fsif_end;
; 6830 : 
; 6831 : 
; 6832 : 	retVal = TRUE;
; 6833 : 
; 6834 : 	*result = mgetLong(bufferPtr);

  0008c	0f b6 16	 movzx	 edx, BYTE PTR [esi]
  0008f	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  00093	0f b6 4e 02	 movzx	 ecx, BYTE PTR [esi+2]
  00097	c1 e2 08	 shl	 edx, 8
  0009a	0b d0		 or	 edx, eax
  0009c	0f b6 46 03	 movzx	 eax, BYTE PTR [esi+3]
  000a0	c1 e2 08	 shl	 edx, 8
  000a3	0b d1		 or	 edx, ecx
  000a5	8b 4c 24 20	 mov	 ecx, DWORD PTR _result$[esp+20]
  000a9	c1 e2 08	 shl	 edx, 8
  000ac	0b d0		 or	 edx, eax
  000ae	bb 01 00 00 00	 mov	 ebx, 1
  000b3	89 11		 mov	 DWORD PTR [ecx], edx
$fsif_end$142614:

; 6835 : 
; 6836 : fsif_end:
; 6837 : 	CloseHandle (src);

  000b5	57		 push	 edi
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 6838 : 	free (buffer);

  000bc	56		 push	 esi
  000bd	e8 00 00 00 00	 call	 _free
  000c2	83 c4 04	 add	 esp, 4
  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi

; 6839 : 
; 6840 : 	return retVal;

  000c7	8b c3		 mov	 eax, ebx
  000c9	5b		 pop	 ebx

; 6841 : }

  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cd	c3		 ret	 0
_LoadInt32 ENDP
_TEXT	ENDS
PUBLIC	_LoadInt16
; Function compile flags: /Ogtpy
;	COMDAT _LoadInt16
_TEXT	SEGMENT
_bytesRead$ = -12					; size = 4
_seekOffsetNew$ = -8					; size = 8
_filePath$ = 8						; size = 4
_result$ = 12						; size = 4
_fileOffset$ = 16					; size = 8
_LoadInt16 PROC						; COMDAT

; 6846 : {

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 6847 : 	size_t bufSize = sizeof(__int16);
; 6848 : 	unsigned char *buffer = (unsigned char *) malloc (bufSize);

  00005	6a 02		 push	 2
  00007	e8 00 00 00 00	 call	 _malloc
  0000c	8b f0		 mov	 esi, eax
  0000e	83 c4 04	 add	 esp, 4

; 6849 : 	unsigned char *bufferPtr = buffer;
; 6850 : 	HANDLE src = NULL;
; 6851 : 	DWORD bytesRead;
; 6852 : 	LARGE_INTEGER seekOffset, seekOffsetNew;
; 6853 : 	BOOL retVal = FALSE;

  00011	33 db		 xor	 ebx, ebx

; 6854 : 
; 6855 : 	if (buffer == NULL)

  00013	85 f6		 test	 esi, esi
  00015	75 09		 jne	 SHORT $LN7@LoadInt16
  00017	5e		 pop	 esi

; 6856 : 		return -1;

  00018	83 c8 ff	 or	 eax, -1
  0001b	5b		 pop	 ebx

; 6885 : }

  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001f	c3		 ret	 0
$LN7@LoadInt16:

; 6857 : 
; 6858 : 	src = CreateFile (filePath, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00020	8b 44 24 18	 mov	 eax, DWORD PTR _filePath$[esp+16]
  00024	57		 push	 edi
  00025	6a 00		 push	 0
  00027	6a 00		 push	 0
  00029	6a 03		 push	 3
  0002b	6a 00		 push	 0
  0002d	6a 03		 push	 3
  0002f	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00034	50		 push	 eax
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0003b	8b f8		 mov	 edi, eax

; 6859 : 
; 6860 : 	if (src == INVALID_HANDLE_VALUE)

  0003d	83 ff ff	 cmp	 edi, -1
  00040	75 12		 jne	 SHORT $LN6@LoadInt16

; 6861 : 	{
; 6862 : 		free (buffer);

  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 _free
  00048	83 c4 04	 add	 esp, 4
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi

; 6863 : 		return FALSE;

  0004d	33 c0		 xor	 eax, eax
  0004f	5b		 pop	 ebx

; 6885 : }

  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	c3		 ret	 0
$LN6@LoadInt16:

; 6864 : 	}
; 6865 : 
; 6866 : 	seekOffset.QuadPart = fileOffset;
; 6867 : 
; 6868 : 	if (SetFilePointerEx (src, seekOffset, &seekOffsetNew, FILE_BEGIN) == 0)

  00054	8b 54 24 28	 mov	 edx, DWORD PTR _fileOffset$[esp+24]
  00058	8b 44 24 24	 mov	 eax, DWORD PTR _fileOffset$[esp+20]
  0005c	6a 00		 push	 0
  0005e	8d 4c 24 14	 lea	 ecx, DWORD PTR _seekOffsetNew$[esp+28]
  00062	51		 push	 ecx
  00063	52		 push	 edx
  00064	50		 push	 eax
  00065	57		 push	 edi
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointerEx@20
  0006c	85 c0		 test	 eax, eax
  0006e	74 33		 je	 SHORT $fsif_end$142643

; 6869 : 		goto fsif_end;
; 6870 : 
; 6871 : 	if (ReadFile (src, buffer, bufSize, &bytesRead, NULL) == 0 
; 6872 : 		|| bytesRead != bufSize)

  00070	6a 00		 push	 0
  00072	8d 4c 24 10	 lea	 ecx, DWORD PTR _bytesRead$[esp+28]
  00076	51		 push	 ecx
  00077	6a 02		 push	 2
  00079	56		 push	 esi
  0007a	57		 push	 edi
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  00081	85 c0		 test	 eax, eax
  00083	74 1e		 je	 SHORT $fsif_end$142643
  00085	83 7c 24 0c 02	 cmp	 DWORD PTR _bytesRead$[esp+24], 2
  0008a	75 17		 jne	 SHORT $fsif_end$142643

; 6873 : 		goto fsif_end;
; 6874 : 
; 6875 : 
; 6876 : 	retVal = TRUE;
; 6877 : 
; 6878 : 	*result = mgetWord(bufferPtr);

  0008c	0f b6 16	 movzx	 edx, BYTE PTR [esi]
  0008f	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  00093	8b 4c 24 20	 mov	 ecx, DWORD PTR _result$[esp+20]
  00097	c1 e2 08	 shl	 edx, 8
  0009a	0b d0		 or	 edx, eax
  0009c	bb 01 00 00 00	 mov	 ebx, 1
  000a1	89 11		 mov	 DWORD PTR [ecx], edx
$fsif_end$142643:

; 6879 : 
; 6880 : fsif_end:
; 6881 : 	CloseHandle (src);

  000a3	57		 push	 edi
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 6882 : 	free (buffer);

  000aa	56		 push	 esi
  000ab	e8 00 00 00 00	 call	 _free
  000b0	83 c4 04	 add	 esp, 4
  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi

; 6883 : 
; 6884 : 	return retVal;

  000b5	8b c3		 mov	 eax, ebx
  000b7	5b		 pop	 ebx

; 6885 : }

  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bb	c3		 ret	 0
_LoadInt16 ENDP
_TEXT	ENDS
PUBLIC	_LoadFile
EXTRN	__imp__GetFileSize@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT _LoadFile
_TEXT	SEGMENT
_fileName$ = 8						; size = 4
_size$ = 12						; size = 4
_LoadFile PROC						; COMDAT

; 6890 : 	char *buf;
; 6891 : 	HANDLE h = CreateFile (fileName, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _fileName$[esp-4]
  00004	53		 push	 ebx
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	6a 03		 push	 3
  0000b	6a 00		 push	 0
  0000d	6a 03		 push	 3
  0000f	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0001b	8b d8		 mov	 ebx, eax

; 6892 : 	if (h == INVALID_HANDLE_VALUE)

  0001d	83 fb ff	 cmp	 ebx, -1
  00020	75 04		 jne	 SHORT $LN3@LoadFile

; 6893 : 		return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	5b		 pop	 ebx

; 6914 : }

  00025	c3		 ret	 0
$LN3@LoadFile:
  00026	56		 push	 esi
  00027	57		 push	 edi

; 6894 : 
; 6895 : 	*size = GetFileSize (h, NULL);

  00028	6a 00		 push	 0
  0002a	53		 push	 ebx
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSize@8
  00031	8b 7c 24 14	 mov	 edi, DWORD PTR _size$[esp+8]
  00035	89 07		 mov	 DWORD PTR [edi], eax

; 6896 : 	buf = (char *) malloc (*size + 1);

  00037	40		 inc	 eax
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _malloc
  0003e	8b f0		 mov	 esi, eax
  00040	83 c4 04	 add	 esp, 4

; 6897 : 
; 6898 : 	if (buf == NULL)

  00043	85 f6		 test	 esi, esi
  00045	75 0d		 jne	 SHORT $LN2@LoadFile

; 6899 : 	{
; 6900 : 		CloseHandle (h);

  00047	53		 push	 ebx
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi

; 6901 : 		return NULL;

  00050	33 c0		 xor	 eax, eax
  00052	5b		 pop	 ebx

; 6914 : }

  00053	c3		 ret	 0
$LN2@LoadFile:

; 6902 : 	}
; 6903 : 
; 6904 : 	ZeroMemory (buf, *size + 1);

  00054	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00056	41		 inc	 ecx
  00057	51		 push	 ecx
  00058	6a 00		 push	 0
  0005a	56		 push	 esi
  0005b	e8 00 00 00 00	 call	 _memset

; 6905 : 
; 6906 : 	if (!ReadFile (h, buf, *size, size, NULL))

  00060	8b 17		 mov	 edx, DWORD PTR [edi]
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH
  00065	6a 00		 push	 0
  00067	57		 push	 edi
  00068	52		 push	 edx
  00069	56		 push	 esi
  0006a	53		 push	 ebx
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  00071	85 c0		 test	 eax, eax
  00073	75 0b		 jne	 SHORT $LN1@LoadFile

; 6907 : 	{
; 6908 : 		free (buf);

  00075	56		 push	 esi
  00076	e8 00 00 00 00	 call	 _free
  0007b	83 c4 04	 add	 esp, 4

; 6909 : 		buf = NULL;

  0007e	33 f6		 xor	 esi, esi
$LN1@LoadFile:

; 6910 : 	}
; 6911 : 
; 6912 : 	CloseHandle (h);

  00080	53		 push	 ebx
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00087	5f		 pop	 edi

; 6913 : 	return buf;

  00088	8b c6		 mov	 eax, esi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx

; 6914 : }

  0008c	c3		 ret	 0
_LoadFile ENDP
_TEXT	ENDS
PUBLIC	_LoadFileBlock
; Function compile flags: /Ogtpy
;	COMDAT _LoadFileBlock
_TEXT	SEGMENT
_bytesRead$ = -12					; size = 4
_seekOffsetNew$ = -8					; size = 8
_fileName$ = 8						; size = 4
_fileOffset$ = 12					; size = 8
_count$ = 20						; size = 4
_LoadFileBlock PROC					; COMDAT

; 6919 : {

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 6920 : 	char *buf;
; 6921 : 	DWORD bytesRead = 0;
; 6922 : 	LARGE_INTEGER seekOffset, seekOffsetNew;
; 6923 : 
; 6924 : 	HANDLE h = CreateFile (fileName, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00003	8b 44 24 10	 mov	 eax, DWORD PTR _fileName$[esp+8]
  00007	56		 push	 esi
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	6a 03		 push	 3
  0000e	6a 00		 push	 0
  00010	6a 03		 push	 3
  00012	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00017	50		 push	 eax
  00018	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _bytesRead$[esp+44], 0
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00026	8b f0		 mov	 esi, eax

; 6925 : 	if (h == INVALID_HANDLE_VALUE)

  00028	83 fe ff	 cmp	 esi, -1

; 6926 : 		return NULL;

  0002b	74 23		 je	 SHORT $LN10@LoadFileBl

; 6927 : 
; 6928 : 	seekOffset.QuadPart = fileOffset;
; 6929 : 
; 6930 : 	if (SetFilePointerEx (h, seekOffset, &seekOffsetNew, FILE_BEGIN) == 0)

  0002d	8b 54 24 1c	 mov	 edx, DWORD PTR _fileOffset$[esp+16]
  00031	8b 44 24 18	 mov	 eax, DWORD PTR _fileOffset$[esp+12]
  00035	6a 00		 push	 0
  00037	8d 4c 24 0c	 lea	 ecx, DWORD PTR _seekOffsetNew$[esp+20]
  0003b	51		 push	 ecx
  0003c	52		 push	 edx
  0003d	50		 push	 eax
  0003e	56		 push	 esi
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointerEx@20
  00045	85 c0		 test	 eax, eax
  00047	75 0e		 jne	 SHORT $LN4@LoadFileBl

; 6931 : 	{
; 6932 : 		CloseHandle (h);

  00049	56		 push	 esi
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN10@LoadFileBl:

; 6933 : 		return NULL;

  00050	33 c0		 xor	 eax, eax
  00052	5e		 pop	 esi

; 6958 : }

  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	c3		 ret	 0
$LN4@LoadFileBl:
  00057	53		 push	 ebx

; 6934 : 	}
; 6935 : 
; 6936 : 	buf = (char *) malloc (count);

  00058	8b 5c 24 24	 mov	 ebx, DWORD PTR _count$[esp+16]
  0005c	57		 push	 edi
  0005d	53		 push	 ebx
  0005e	e8 00 00 00 00	 call	 _malloc
  00063	8b f8		 mov	 edi, eax
  00065	83 c4 04	 add	 esp, 4

; 6937 : 
; 6938 : 	if (buf == NULL)

  00068	85 ff		 test	 edi, edi
  0006a	75 10		 jne	 SHORT $LN3@LoadFileBl

; 6939 : 	{
; 6940 : 		CloseHandle (h);

  0006c	56		 push	 esi
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00073	5f		 pop	 edi
  00074	5b		 pop	 ebx

; 6941 : 		return NULL;

  00075	33 c0		 xor	 eax, eax
  00077	5e		 pop	 esi

; 6958 : }

  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007b	c3		 ret	 0
$LN3@LoadFileBl:

; 6942 : 	}
; 6943 :  
; 6944 : 	ZeroMemory (buf, count);

  0007c	53		 push	 ebx
  0007d	6a 00		 push	 0
  0007f	57		 push	 edi
  00080	e8 00 00 00 00	 call	 _memset
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6945 : 
; 6946 : 	if (buf != NULL)
; 6947 : 		ReadFile (h, buf, count, &bytesRead, NULL);

  00088	6a 00		 push	 0
  0008a	8d 4c 24 10	 lea	 ecx, DWORD PTR _bytesRead$[esp+28]
  0008e	51		 push	 ecx
  0008f	53		 push	 ebx
  00090	57		 push	 edi
  00091	56		 push	 esi
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20

; 6948 : 
; 6949 : 	CloseHandle (h);

  00098	56		 push	 esi
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 6950 : 
; 6951 : 	if (bytesRead != count)

  0009f	39 5c 24 0c	 cmp	 DWORD PTR _bytesRead$[esp+24], ebx
  000a3	74 12		 je	 SHORT $LN1@LoadFileBl

; 6952 : 	{
; 6953 : 		free (buf);

  000a5	57		 push	 edi
  000a6	e8 00 00 00 00	 call	 _free
  000ab	83 c4 04	 add	 esp, 4
  000ae	5f		 pop	 edi
  000af	5b		 pop	 ebx

; 6954 : 		return NULL;

  000b0	33 c0		 xor	 eax, eax
  000b2	5e		 pop	 esi

; 6958 : }

  000b3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b6	c3		 ret	 0
$LN1@LoadFileBl:

; 6955 : 	}
; 6956 : 
; 6957 : 	return buf;

  000b7	8b c7		 mov	 eax, edi
  000b9	5f		 pop	 edi
  000ba	5b		 pop	 ebx
  000bb	5e		 pop	 esi

; 6958 : }

  000bc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bf	c3		 ret	 0
_LoadFileBlock ENDP
_TEXT	ENDS
PUBLIC	_GetFileSize64
EXTRN	__imp__GetFileSizeEx@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT _GetFileSize64
_TEXT	SEGMENT
_size$ = -8						; size = 8
_path$ = 8						; size = 4
_GetFileSize64 PROC					; COMDAT

; 6964 :   	HANDLE h = CreateFile (path, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _path$[esp-4]
  00004	83 ec 08	 sub	 esp, 8
  00007	56		 push	 esi
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	6a 03		 push	 3
  0000e	6a 00		 push	 0
  00010	6a 03		 push	 3
  00012	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00017	50		 push	 eax
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0001e	8b f0		 mov	 esi, eax

; 6965 : 	LARGE_INTEGER size;
; 6966 : 
; 6967 : 	if (h == INVALID_HANDLE_VALUE)

  00020	83 fe ff	 cmp	 esi, -1
  00023	75 0a		 jne	 SHORT $LN2@GetFileSiz
$LN5@GetFileSiz:

; 6968 : 		return -1;

  00025	83 c8 ff	 or	 eax, -1
  00028	0b d0		 or	 edx, eax
  0002a	5e		 pop	 esi

; 6976 : }

  0002b	83 c4 08	 add	 esp, 8
  0002e	c3		 ret	 0
$LN2@GetFileSiz:

; 6969 : 
; 6970 : 	if (GetFileSizeEx (h, &size) == 0)

  0002f	8d 4c 24 04	 lea	 ecx, DWORD PTR _size$[esp+12]
  00033	51		 push	 ecx
  00034	56		 push	 esi
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSizeEx@8
  0003b	85 c0		 test	 eax, eax

; 6971 : 		return -1;

  0003d	74 e6		 je	 SHORT $LN5@GetFileSiz

; 6972 : 
; 6973 : 	CloseHandle (h);

  0003f	56		 push	 esi
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 6974 : 
; 6975 : 	return size.QuadPart;

  00046	8b 44 24 04	 mov	 eax, DWORD PTR _size$[esp+12]
  0004a	8b 54 24 08	 mov	 edx, DWORD PTR _size$[esp+16]
  0004e	5e		 pop	 esi

; 6976 : }

  0004f	83 c4 08	 add	 esp, 8
  00052	c3		 ret	 0
_GetFileSize64 ENDP
_TEXT	ENDS
PUBLIC	_GetModPath
; Function compile flags: /Ogtpy
;	COMDAT _GetModPath
_TEXT	SEGMENT
_path$ = 8						; size = 4
_maxSize$ = 12						; size = 4
_GetModPath PROC					; COMDAT

; 6981 : 	GetModuleFileName (NULL, path, maxSize);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _maxSize$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 08	 mov	 esi, DWORD PTR _path$[esp]
  00009	50		 push	 eax
  0000a	56		 push	 esi
  0000b	6a 00		 push	 0
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12

; 6982 : 	strrchr (path, '\\')[1] = 0;

  00013	6a 5c		 push	 92			; 0000005cH
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 _strrchr
  0001b	83 c4 08	 add	 esp, 8
  0001e	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 6983 : 	return path;

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi

; 6984 : }

  00025	c3		 ret	 0
_GetModPath ENDP
_TEXT	ENDS
PUBLIC	_GetConfigPath
EXTRN	__imp__CreateDirectoryA@8:PROC
;	COMDAT ?path@?1??GetConfigPath@@9@4PADA
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string.h
_BSS	SEGMENT
?path@?1??GetConfigPath@@9@4PADA DB 0208H DUP (?)	; `GetConfigPath'::`2'::path
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
_BSS	ENDS
;	COMDAT _GetConfigPath
_TEXT	SEGMENT
_fileName$ = 8						; size = 4
_GetConfigPath PROC					; COMDAT

; 6988 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 6989 : 	static char path[MAX_PATH * 2] = { 0 };
; 6990 : 
; 6991 : 	if (IsNonInstallMode ())

  00002	e8 00 00 00 00	 call	 _IsNonInstallMode
  00007	85 c0		 test	 eax, eax
  00009	74 5a		 je	 SHORT $LN3@GetConfigP

; 6992 : 	{
; 6993 : 		GetModPath (path, sizeof (path));

  0000b	68 08 02 00 00	 push	 520			; 00000208H
  00010	68 00 00 00 00	 push	 OFFSET ?path@?1??GetConfigPath@@9@4PADA
  00015	6a 00		 push	 0
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12
  0001d	6a 5c		 push	 92			; 0000005cH
  0001f	68 00 00 00 00	 push	 OFFSET ?path@?1??GetConfigPath@@9@4PADA
  00024	e8 00 00 00 00	 call	 _strrchr
  00029	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 6994 : 		strcat (path, fileName);

  0002d	8b 44 24 14	 mov	 eax, DWORD PTR _fileName$[esp+12]
  00031	83 c4 08	 add	 esp, 8
  00034	8b c8		 mov	 ecx, eax
$LL10@GetConfigP:
  00036	8a 10		 mov	 dl, BYTE PTR [eax]
  00038	40		 inc	 eax
  00039	84 d2		 test	 dl, dl
  0003b	75 f9		 jne	 SHORT $LL10@GetConfigP
  0003d	bf 00 00 00 00	 mov	 edi, OFFSET ?path@?1??GetConfigPath@@9@4PADA
  00042	2b c1		 sub	 eax, ecx
  00044	8b f1		 mov	 esi, ecx
  00046	4f		 dec	 edi
$LL11@GetConfigP:
  00047	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  0004a	47		 inc	 edi
  0004b	84 c9		 test	 cl, cl
  0004d	75 f8		 jne	 SHORT $LL11@GetConfigP
  0004f	8b c8		 mov	 ecx, eax
  00051	c1 e9 02	 shr	 ecx, 2
  00054	f3 a5		 rep movsd
  00056	8b c8		 mov	 ecx, eax
  00058	83 e1 03	 and	 ecx, 3
  0005b	f3 a4		 rep movsb
  0005d	5f		 pop	 edi

; 7007 : 
; 7008 : 	return path;

  0005e	b8 00 00 00 00	 mov	 eax, OFFSET ?path@?1??GetConfigPath@@9@4PADA
  00063	5e		 pop	 esi

; 7009 : }

  00064	c3		 ret	 0
$LN3@GetConfigP:

; 6995 : 
; 6996 : 		return path;
; 6997 : 	}
; 6998 : 
; 6999 : 	if (SUCCEEDED(SHGetFolderPath (NULL, CSIDL_APPDATA | CSIDL_FLAG_CREATE, NULL, 0, path)))

  00065	68 00 00 00 00	 push	 OFFSET ?path@?1??GetConfigPath@@9@4PADA
  0006a	6a 00		 push	 0
  0006c	6a 00		 push	 0
  0006e	68 1a 80 00 00	 push	 32794			; 0000801aH
  00073	6a 00		 push	 0
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetFolderPathA@20
  0007b	85 c0		 test	 eax, eax
  0007d	7c 70		 jl	 SHORT $LN2@GetConfigP

; 7000 : 	{
; 7001 : 		strcat (path, "\\TrueCrypt\\");

  0007f	b8 00 00 00 00	 mov	 eax, OFFSET ?path@?1??GetConfigPath@@9@4PADA
  00084	48		 dec	 eax
$LL12@GetConfigP:
  00085	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00088	40		 inc	 eax
  00089	84 c9		 test	 cl, cl
  0008b	75 f8		 jne	 SHORT $LL12@GetConfigP
  0008d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@EMLNMOID@?2TrueCrypt?2?$AA@
  00093	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0M@EMLNMOID@?2TrueCrypt?2?$AA@+4
  00099	89 08		 mov	 DWORD PTR [eax], ecx
  0009b	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@EMLNMOID@?2TrueCrypt?2?$AA@+8

; 7002 : 		CreateDirectory (path, NULL);

  000a1	6a 00		 push	 0
  000a3	89 50 04	 mov	 DWORD PTR [eax+4], edx
  000a6	68 00 00 00 00	 push	 OFFSET ?path@?1??GetConfigPath@@9@4PADA
  000ab	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8

; 7003 : 		strcat (path, fileName);

  000b4	8b 44 24 0c	 mov	 eax, DWORD PTR _fileName$[esp+4]
  000b8	8b c8		 mov	 ecx, eax
  000ba	8d 9b 00 00 00
	00		 npad	 6
$LL13@GetConfigP:
  000c0	8a 10		 mov	 dl, BYTE PTR [eax]
  000c2	40		 inc	 eax
  000c3	84 d2		 test	 dl, dl
  000c5	75 f9		 jne	 SHORT $LL13@GetConfigP
  000c7	bf 00 00 00 00	 mov	 edi, OFFSET ?path@?1??GetConfigPath@@9@4PADA
  000cc	2b c1		 sub	 eax, ecx
  000ce	8b f1		 mov	 esi, ecx
  000d0	4f		 dec	 edi
$LL14@GetConfigP:
  000d1	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  000d4	47		 inc	 edi
  000d5	84 c9		 test	 cl, cl
  000d7	75 f8		 jne	 SHORT $LL14@GetConfigP
  000d9	8b c8		 mov	 ecx, eax
  000db	c1 e9 02	 shr	 ecx, 2
  000de	f3 a5		 rep movsd
  000e0	8b c8		 mov	 ecx, eax
  000e2	83 e1 03	 and	 ecx, 3
  000e5	f3 a4		 rep movsb
  000e7	5f		 pop	 edi

; 7007 : 
; 7008 : 	return path;

  000e8	b8 00 00 00 00	 mov	 eax, OFFSET ?path@?1??GetConfigPath@@9@4PADA
  000ed	5e		 pop	 esi

; 7009 : }

  000ee	c3		 ret	 0
$LN2@GetConfigP:
  000ef	5f		 pop	 edi

; 7004 : 	}
; 7005 : 	else
; 7006 : 		path[0] = 0;

  000f0	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?path@?1??GetConfigPath@@9@4PADA, 0

; 7007 : 
; 7008 : 	return path;

  000f7	b8 00 00 00 00	 mov	 eax, OFFSET ?path@?1??GetConfigPath@@9@4PADA
  000fc	5e		 pop	 esi

; 7009 : }

  000fd	c3		 ret	 0
_GetConfigPath ENDP
_TEXT	ENDS
PUBLIC	_GetProgramConfigPath
;	COMDAT ?path@?1??GetProgramConfigPath@@9@4PADA
_BSS	SEGMENT
?path@?1??GetProgramConfigPath@@9@4PADA DB 0208H DUP (?) ; `GetProgramConfigPath'::`2'::path
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT _GetProgramConfigPath
_TEXT	SEGMENT
_fileName$ = 8						; size = 4
_GetProgramConfigPath PROC				; COMDAT

; 7014 : 	static char path[MAX_PATH * 2] = { 0 };
; 7015 : 
; 7016 : 	if (SUCCEEDED (SHGetFolderPath (NULL, CSIDL_COMMON_APPDATA | CSIDL_FLAG_CREATE, NULL, 0, path)))

  00000	68 00 00 00 00	 push	 OFFSET ?path@?1??GetProgramConfigPath@@9@4PADA
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	68 23 80 00 00	 push	 32803			; 00008023H
  0000e	6a 00		 push	 0
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetFolderPathA@20
  00016	85 c0		 test	 eax, eax

; 7017 : 	{
; 7018 : 		strcat (path, "\\TrueCrypt\\");

  00018	b8 00 00 00 00	 mov	 eax, OFFSET ?path@?1??GetProgramConfigPath@@9@4PADA
  0001d	7c 67		 jl	 SHORT $LN2@GetProgram
  0001f	48		 dec	 eax
$LL5@GetProgram:
  00020	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00023	40		 inc	 eax
  00024	84 c9		 test	 cl, cl
  00026	75 f8		 jne	 SHORT $LL5@GetProgram
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@EMLNMOID@?2TrueCrypt?2?$AA@
  0002e	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0M@EMLNMOID@?2TrueCrypt?2?$AA@+4
  00034	89 08		 mov	 DWORD PTR [eax], ecx
  00036	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@EMLNMOID@?2TrueCrypt?2?$AA@+8

; 7019 : 		CreateDirectory (path, NULL);

  0003c	6a 00		 push	 0
  0003e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00041	68 00 00 00 00	 push	 OFFSET ?path@?1??GetProgramConfigPath@@9@4PADA
  00046	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8

; 7020 : 		strcat (path, fileName);

  0004f	8b 44 24 04	 mov	 eax, DWORD PTR _fileName$[esp-4]
  00053	8b c8		 mov	 ecx, eax
$LL6@GetProgram:
  00055	8a 10		 mov	 dl, BYTE PTR [eax]
  00057	40		 inc	 eax
  00058	84 d2		 test	 dl, dl
  0005a	75 f9		 jne	 SHORT $LL6@GetProgram
  0005c	56		 push	 esi
  0005d	57		 push	 edi
  0005e	bf 00 00 00 00	 mov	 edi, OFFSET ?path@?1??GetProgramConfigPath@@9@4PADA
  00063	2b c1		 sub	 eax, ecx
  00065	8b f1		 mov	 esi, ecx
  00067	4f		 dec	 edi
$LL7@GetProgram:
  00068	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  0006b	47		 inc	 edi
  0006c	84 c9		 test	 cl, cl
  0006e	75 f8		 jne	 SHORT $LL7@GetProgram
  00070	8b c8		 mov	 ecx, eax
  00072	c1 e9 02	 shr	 ecx, 2
  00075	f3 a5		 rep movsd
  00077	8b c8		 mov	 ecx, eax
  00079	83 e1 03	 and	 ecx, 3
  0007c	f3 a4		 rep movsb
  0007e	5f		 pop	 edi

; 7024 : 
; 7025 : 	return path;

  0007f	b8 00 00 00 00	 mov	 eax, OFFSET ?path@?1??GetProgramConfigPath@@9@4PADA
  00084	5e		 pop	 esi

; 7026 : }

  00085	c3		 ret	 0
$LN2@GetProgram:

; 7021 : 	}
; 7022 : 	else
; 7023 : 		path[0] = 0;

  00086	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?path@?1??GetProgramConfigPath@@9@4PADA, 0

; 7026 : }

  0008d	c3		 ret	 0
_GetProgramConfigPath ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_GetSystemDriveLetter
EXTRN	_toupper:PROC
EXTRN	__imp__GetSystemDirectoryA@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT _GetSystemDriveLetter
_TEXT	SEGMENT
_systemDir$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_GetSystemDriveLetter PROC				; COMDAT

; 7049 : {

  00000	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 04 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+264], eax

; 7050 : 	char systemDir [MAX_PATH];
; 7051 : 
; 7052 : 	if (GetSystemDirectory (systemDir, sizeof (systemDir)))

  00014	68 04 01 00 00	 push	 260			; 00000104H
  00019	8d 44 24 04	 lea	 eax, DWORD PTR _systemDir$[esp+268]
  0001d	50		 push	 eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemDirectoryA@8
  00024	85 c0		 test	 eax, eax
  00026	74 22		 je	 SHORT $LN2@GetSystemD

; 7053 : 		return (char) (toupper (systemDir [0]));

  00028	0f be 0c 24	 movsx	 ecx, BYTE PTR _systemDir$[esp+264]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 _toupper
  00032	83 c4 04	 add	 esp, 4

; 7054 : 	else
; 7055 : 		return 0;
; 7056 : }

  00035	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+264]
  0003c	33 cc		 xor	 ecx, esp
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  00049	c3		 ret	 0
$LN2@GetSystemD:
  0004a	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+264]
  00051	33 cc		 xor	 ecx, esp
  00053	32 c0		 xor	 al, al
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  00060	c3		 ret	 0
_GetSystemDriveLetter ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@COHEMPD@?6?7?$DMconfiguration?$DO?$AA@ ; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_0BC@FNANDAA@Configuration?4xml?$AA@	; `string'
PUBLIC	_ConfigWriteBegin
EXTRN	_fputs:PROC
EXTRN	_XmlWriteHeader:PROC
EXTRN	_fopen:PROC
_BSS	SEGMENT
_ConfigFileHandle DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BC@COHEMPD@?6?7?$DMconfiguration?$DO?$AA@
CONST	SEGMENT
??_C@_0BC@COHEMPD@?6?7?$DMconfiguration?$DO?$AA@ DB 0aH, 09H, '<configura'
	DB	'tion>', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FNANDAA@Configuration?4xml?$AA@
CONST	SEGMENT
??_C@_0BC@FNANDAA@Configuration?4xml?$AA@ DB 'Configuration.xml', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _ConfigWriteBegin
_TEXT	SEGMENT
_size$ = -4						; size = 4
_ConfigWriteBegin PROC					; COMDAT

; 7082 : {

  00000	51		 push	 ecx

; 7083 : 	DWORD size;
; 7084 : 	if (ConfigFileHandle != NULL) 

  00001	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _ConfigFileHandle, 0

; 7085 : 		return FALSE;

  00008	75 65		 jne	 SHORT $LN6@ConfigWrit

; 7086 : 
; 7087 : 	if (ConfigBuffer == NULL)

  0000a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _ConfigBuffer, 0
  00011	75 1f		 jne	 SHORT $LN2@ConfigWrit

; 7088 : 		ConfigBuffer = LoadFile (GetConfigPath (TC_APPD_FILENAME_CONFIGURATION), &size);

  00013	8d 04 24	 lea	 eax, DWORD PTR _size$[esp+4]
  00016	50		 push	 eax
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FNANDAA@Configuration?4xml?$AA@
  0001c	e8 00 00 00 00	 call	 _GetConfigPath
  00021	83 c4 04	 add	 esp, 4
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _LoadFile
  0002a	83 c4 08	 add	 esp, 8
  0002d	a3 00 00 00 00	 mov	 DWORD PTR _ConfigBuffer, eax
$LN2@ConfigWrit:

; 7089 : 
; 7090 : 	ConfigFileHandle = fopen (GetConfigPath (TC_APPD_FILENAME_CONFIGURATION), "w");

  00032	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w?$AA@
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FNANDAA@Configuration?4xml?$AA@
  0003c	e8 00 00 00 00	 call	 _GetConfigPath
  00041	83 c4 04	 add	 esp, 4
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _fopen
  0004a	83 c4 08	 add	 esp, 8
  0004d	a3 00 00 00 00	 mov	 DWORD PTR _ConfigFileHandle, eax

; 7091 : 	if (ConfigFileHandle == NULL)

  00052	85 c0		 test	 eax, eax
  00054	75 1d		 jne	 SHORT $LN1@ConfigWrit

; 7092 : 	{
; 7093 : 		free (ConfigBuffer);

  00056	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _ConfigBuffer
  0005c	51		 push	 ecx
  0005d	e8 00 00 00 00	 call	 _free
  00062	83 c4 04	 add	 esp, 4

; 7094 : 		ConfigBuffer = NULL;

  00065	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _ConfigBuffer, 0
$LN6@ConfigWrit:

; 7095 : 		return FALSE;

  0006f	33 c0		 xor	 eax, eax

; 7101 : }

  00071	59		 pop	 ecx
  00072	c3		 ret	 0
$LN1@ConfigWrit:

; 7096 : 	}
; 7097 : 	XmlWriteHeader (ConfigFileHandle);

  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 _XmlWriteHeader

; 7098 : 	fputs ("\n\t<configuration>", ConfigFileHandle);

  00079	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ConfigFileHandle
  0007f	52		 push	 edx
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@COHEMPD@?6?7?$DMconfiguration?$DO?$AA@
  00085	e8 00 00 00 00	 call	 _fputs
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7099 : 
; 7100 : 	return TRUE;

  0008d	b8 01 00 00 00	 mov	 eax, 1

; 7101 : }

  00092	59		 pop	 ecx
  00093	c3		 ret	 0
_ConfigWriteBegin ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@CKNEEBKA@?6?7?$DM?1configuration?$DO?$AA@ ; `string'
PUBLIC	??_C@_0CA@EGANCHGG@?6?7?7?$DMconfig?5key?$DN?$CC?$CFs?$CC?$DO?$CFs?$DM?1config?$DO?$AA@ ; `string'
PUBLIC	??_C@_03ICHNJLJF@key?$AA@			; `string'
PUBLIC	??_C@_06HEJKKHEK@config?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_ConfigWriteEnd
EXTRN	_fclose:PROC
EXTRN	_XmlWriteFooter:PROC
EXTRN	_fprintf:PROC
EXTRN	_XmlGetNodeText:PROC
EXTRN	_XmlGetAttributeText:PROC
EXTRN	_XmlFindElement:PROC
;	COMDAT ??_C@_0BD@CKNEEBKA@?6?7?$DM?1configuration?$DO?$AA@
CONST	SEGMENT
??_C@_0BD@CKNEEBKA@?6?7?$DM?1configuration?$DO?$AA@ DB 0aH, 09H, '</confi'
	DB	'guration>', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@EGANCHGG@?6?7?7?$DMconfig?5key?$DN?$CC?$CFs?$CC?$DO?$CFs?$DM?1config?$DO?$AA@
CONST	SEGMENT
??_C@_0CA@EGANCHGG@?6?7?7?$DMconfig?5key?$DN?$CC?$CFs?$CC?$DO?$CFs?$DM?1config?$DO?$AA@ DB 0aH
	DB	09H, 09H, '<config key="%s">%s</config>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03ICHNJLJF@key?$AA@
CONST	SEGMENT
??_C@_03ICHNJLJF@key?$AA@ DB 'key', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06HEJKKHEK@config?$AA@
CONST	SEGMENT
??_C@_06HEJKKHEK@config?$AA@ DB 'config', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _ConfigWriteEnd
_TEXT	SEGMENT
_size$142764 = -2184					; size = 4
_key$ = -2180						; size = 128
_value$ = -2052						; size = 2048
__$ArrayPad$ = -4					; size = 4
_ConfigWriteEnd PROC					; COMDAT

; 7105 : {

  00000	81 ec 88 08 00
	00		 sub	 esp, 2184		; 00000888H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 84 08
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+2184], eax

; 7106 : 	char *xml = ConfigBuffer;
; 7107 : 	char key[128], value[2048];
; 7108 : 
; 7109 : 	if (ConfigFileHandle == NULL) return FALSE;

  00014	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _ConfigFileHandle, 0
  0001b	56		 push	 esi
  0001c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _ConfigBuffer
  00022	75 18		 jne	 SHORT $LN10@ConfigWrit@2
  00024	33 c0		 xor	 eax, eax
  00026	5e		 pop	 esi

; 7136 : 	}
; 7137 : 
; 7138 : 	return TRUE;
; 7139 : }

  00027	8b 8c 24 84 08
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+2184]
  0002e	33 cc		 xor	 ecx, esp
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	81 c4 88 08 00
	00		 add	 esp, 2184		; 00000888H
  0003b	c3		 ret	 0
$LN10@ConfigWrit@2:

; 7110 : 
; 7111 : 	// Write unmodified values
; 7112 : 	while (xml && (xml = XmlFindElement (xml, "config")))

  0003c	85 f6		 test	 esi, esi
  0003e	74 62		 je	 SHORT $LN12@ConfigWrit@2
$LL3@ConfigWrit@2:
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_06HEJKKHEK@config?$AA@
  00045	56		 push	 esi
  00046	e8 00 00 00 00	 call	 _XmlFindElement
  0004b	8b f0		 mov	 esi, eax
  0004d	83 c4 08	 add	 esp, 8
  00050	85 f6		 test	 esi, esi
  00052	74 4e		 je	 SHORT $LN12@ConfigWrit@2

; 7113 : 	{
; 7114 : 		XmlGetAttributeText (xml, "key", key, sizeof (key));

  00054	68 80 00 00 00	 push	 128			; 00000080H
  00059	8d 44 24 0c	 lea	 eax, DWORD PTR _key$[esp+2192]
  0005d	50		 push	 eax
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_03ICHNJLJF@key?$AA@
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 _XmlGetAttributeText

; 7115 : 		XmlGetNodeText (xml, value, sizeof (value));

  00069	68 00 08 00 00	 push	 2048			; 00000800H
  0006e	8d 8c 24 9c 00
	00 00		 lea	 ecx, DWORD PTR _value$[esp+2208]
  00075	51		 push	 ecx
  00076	56		 push	 esi
  00077	e8 00 00 00 00	 call	 _XmlGetNodeText

; 7116 : 
; 7117 : 		fprintf (ConfigFileHandle, "\n\t\t<config key=\"%s\">%s</config>", key, value);

  0007c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _ConfigFileHandle
  00082	8d 94 24 a4 00
	00 00		 lea	 edx, DWORD PTR _value$[esp+2216]
  00089	52		 push	 edx
  0008a	8d 44 24 28	 lea	 eax, DWORD PTR _key$[esp+2220]
  0008e	50		 push	 eax
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@EGANCHGG@?6?7?7?$DMconfig?5key?$DN?$CC?$CFs?$CC?$DO?$CFs?$DM?1config?$DO?$AA@
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 _fprintf
  0009a	83 c4 2c	 add	 esp, 44			; 0000002cH

; 7118 : 		xml++;

  0009d	83 c6 01	 add	 esi, 1
  000a0	75 9e		 jne	 SHORT $LL3@ConfigWrit@2
$LN12@ConfigWrit@2:

; 7119 : 	}
; 7120 : 
; 7121 : 	fputs ("\n\t</configuration>", ConfigFileHandle);

  000a2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ConfigFileHandle
  000a8	57		 push	 edi
  000a9	52		 push	 edx
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@CKNEEBKA@?6?7?$DM?1configuration?$DO?$AA@
  000af	e8 00 00 00 00	 call	 _fputs

; 7122 : 	XmlWriteFooter (ConfigFileHandle);

  000b4	a1 00 00 00 00	 mov	 eax, DWORD PTR _ConfigFileHandle
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 _XmlWriteFooter

; 7123 : 
; 7124 : 	TCFlushFile (ConfigFileHandle);

  000bf	a1 00 00 00 00	 mov	 eax, DWORD PTR _ConfigFileHandle
  000c4	50		 push	 eax
  000c5	8b f8		 mov	 edi, eax
  000c7	e8 00 00 00 00	 call	 __fileno
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 __get_osfhandle
  000d2	57		 push	 edi
  000d3	8b f0		 mov	 esi, eax
  000d5	e8 00 00 00 00	 call	 _fflush
  000da	83 c4 18	 add	 esp, 24			; 00000018H
  000dd	5f		 pop	 edi
  000de	83 fe ff	 cmp	 esi, -1
  000e1	74 07		 je	 SHORT $LN8@ConfigWrit@2
  000e3	56		 push	 esi
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FlushFileBuffers@4
$LN8@ConfigWrit@2:

; 7125 : 
; 7126 : 	CheckFileStreamWriteErrors (ConfigFileHandle, TC_APPD_FILENAME_CONFIGURATION);

  000ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _ConfigFileHandle
  000f0	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FNANDAA@Configuration?4xml?$AA@
  000f5	51		 push	 ecx
  000f6	e8 00 00 00 00	 call	 _CheckFileStreamWriteErrors

; 7127 : 
; 7128 : 	fclose (ConfigFileHandle);

  000fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ConfigFileHandle
  00101	52		 push	 edx
  00102	e8 00 00 00 00	 call	 _fclose

; 7129 : 	ConfigFileHandle = NULL;
; 7130 : 
; 7131 : 	if (ConfigBuffer != NULL)

  00107	a1 00 00 00 00	 mov	 eax, DWORD PTR _ConfigBuffer
  0010c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _ConfigFileHandle, 0
  00119	85 c0		 test	 eax, eax
  0011b	74 29		 je	 SHORT $LN1@ConfigWrit@2

; 7132 : 	{
; 7133 : 		DWORD size;
; 7134 : 		free (ConfigBuffer);

  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 _free
  00123	83 c4 04	 add	 esp, 4

; 7135 : 		ConfigBuffer = LoadFile (GetConfigPath (TC_APPD_FILENAME_CONFIGURATION), &size);

  00126	8d 44 24 04	 lea	 eax, DWORD PTR _size$142764[esp+2188]
  0012a	50		 push	 eax
  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FNANDAA@Configuration?4xml?$AA@
  00130	e8 00 00 00 00	 call	 _GetConfigPath
  00135	83 c4 04	 add	 esp, 4
  00138	50		 push	 eax
  00139	e8 00 00 00 00	 call	 _LoadFile
  0013e	83 c4 08	 add	 esp, 8
  00141	a3 00 00 00 00	 mov	 DWORD PTR _ConfigBuffer, eax
$LN1@ConfigWrit@2:

; 7136 : 	}
; 7137 : 
; 7138 : 	return TRUE;
; 7139 : }

  00146	8b 8c 24 88 08
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+2188]
  0014d	5e		 pop	 esi
  0014e	33 cc		 xor	 ecx, esp
  00150	b8 01 00 00 00	 mov	 eax, 1
  00155	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015a	81 c4 88 08 00
	00		 add	 esp, 2184		; 00000888H
  00160	c3		 ret	 0
_ConfigWriteEnd ENDP
_TEXT	ENDS
PUBLIC	_ConfigWriteString
EXTRN	_XmlFindElementByAttributeValue:PROC
; Function compile flags: /Ogtpy
;	COMDAT _ConfigWriteString
_TEXT	SEGMENT
_configKey$ = 8						; size = 4
_configValue$ = 12					; size = 4
_ConfigWriteString PROC					; COMDAT

; 7144 : 	char *c;
; 7145 : 	if (ConfigFileHandle == NULL)

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _ConfigFileHandle, 0
  00007	75 03		 jne	 SHORT $LN3@ConfigWrit@3

; 7146 : 		return FALSE;

  00009	33 c0		 xor	 eax, eax

; 7159 : }

  0000b	c3		 ret	 0
$LN3@ConfigWrit@3:

; 7147 : 
; 7148 : 	// Mark previous config value as updated
; 7149 : 	if (ConfigBuffer != NULL)

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR _ConfigBuffer
  00011	56		 push	 esi
  00012	8b 74 24 08	 mov	 esi, DWORD PTR _configKey$[esp]
  00016	85 c0		 test	 eax, eax
  00018	74 1c		 je	 SHORT $LN6@ConfigWrit@3

; 7150 : 	{
; 7151 : 		c = XmlFindElementByAttributeValue (ConfigBuffer, "config", "key", configKey);

  0001a	56		 push	 esi
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_03ICHNJLJF@key?$AA@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06HEJKKHEK@config?$AA@
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _XmlFindElementByAttributeValue
  0002b	83 c4 10	 add	 esp, 16			; 00000010H

; 7152 : 		if (c != NULL)

  0002e	85 c0		 test	 eax, eax
  00030	74 04		 je	 SHORT $LN6@ConfigWrit@3

; 7153 : 			c[1] = '!';

  00032	c6 40 01 21	 mov	 BYTE PTR [eax+1], 33	; 00000021H
$LN6@ConfigWrit@3:

; 7154 : 	}
; 7155 : 
; 7156 : 	return 0 != fprintf (
; 7157 : 		ConfigFileHandle, "\n\t\t<config key=\"%s\">%s</config>",
; 7158 : 		configKey, configValue);

  00036	8b 44 24 0c	 mov	 eax, DWORD PTR _configValue$[esp]
  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _ConfigFileHandle
  00040	50		 push	 eax
  00041	56		 push	 esi
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@EGANCHGG@?6?7?7?$DMconfig?5key?$DN?$CC?$CFs?$CC?$DO?$CFs?$DM?1config?$DO?$AA@
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 _fprintf
  0004d	83 c4 10	 add	 esp, 16			; 00000010H
  00050	f7 d8		 neg	 eax
  00052	1b c0		 sbb	 eax, eax
  00054	f7 d8		 neg	 eax
  00056	5e		 pop	 esi

; 7159 : }

  00057	c3		 ret	 0
_ConfigWriteString ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ConfigWriteInt
; Function compile flags: /Ogtpy
;	COMDAT _ConfigWriteInt
_TEXT	SEGMENT
_val$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_configKey$ = 8						; size = 4
_configValue$ = 12					; size = 4
_ConfigWriteInt PROC					; COMDAT

; 7163 : {

  00000	83 ec 24	 sub	 esp, 36			; 00000024H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 20	 mov	 DWORD PTR __$ArrayPad$[esp+36], eax

; 7164 : 	char val[32];
; 7165 : 	snprintf (val, ARRAY_LENGTH(val), "%d", configValue);

  0000e	8b 44 24 2c	 mov	 eax, DWORD PTR _configValue$[esp+32]
  00012	56		 push	 esi
  00013	8b 74 24 2c	 mov	 esi, DWORD PTR _configKey$[esp+36]
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  0001d	8d 4c 24 0c	 lea	 ecx, DWORD PTR _val$[esp+48]
  00021	6a 20		 push	 32			; 00000020H
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 _sprintf_s

; 7166 : 	return ConfigWriteString (configKey, val);

  00029	8d 54 24 14	 lea	 edx, DWORD PTR _val$[esp+56]
  0002d	52		 push	 edx
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 _ConfigWriteString

; 7167 : }

  00034	8b 4c 24 3c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+64]
  00038	83 c4 18	 add	 esp, 24			; 00000018H
  0003b	5e		 pop	 esi
  0003c	33 cc		 xor	 ecx, esp
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	83 c4 24	 add	 esp, 36			; 00000024H
  00046	c3		 ret	 0
_ConfigWriteInt ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?ConfigRead@@YAHPAD0H@Z
_TEXT	SEGMENT
_size$ = -4						; size = 4
_configKey$ = 8						; size = 4
_configValue$ = 12					; size = 4
_maxValueSize$ = 16					; size = 4
?ConfigRead@@YAHPAD0H@Z PROC				; ConfigRead, COMDAT

; 7171 : {

  00000	51		 push	 ecx

; 7172 : 	DWORD size;
; 7173 : 	char *xml;
; 7174 : 
; 7175 : 	if (ConfigBuffer == NULL)

  00001	a1 00 00 00 00	 mov	 eax, DWORD PTR _ConfigBuffer
  00006	85 c0		 test	 eax, eax
  00008	75 23		 jne	 SHORT $LN7@ConfigRead

; 7176 : 		ConfigBuffer = LoadFile (GetConfigPath (TC_APPD_FILENAME_CONFIGURATION), &size);

  0000a	8d 04 24	 lea	 eax, DWORD PTR _size$[esp+4]
  0000d	50		 push	 eax
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FNANDAA@Configuration?4xml?$AA@
  00013	e8 00 00 00 00	 call	 _GetConfigPath
  00018	83 c4 04	 add	 esp, 4
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _LoadFile
  00021	83 c4 08	 add	 esp, 8
  00024	a3 00 00 00 00	 mov	 DWORD PTR _ConfigBuffer, eax

; 7177 : 
; 7178 : 	xml = ConfigBuffer;
; 7179 : 	if (xml != NULL)

  00029	85 c0		 test	 eax, eax
  0002b	74 36		 je	 SHORT $LN1@ConfigRead
$LN7@ConfigRead:

; 7180 : 	{
; 7181 : 		xml = XmlFindElementByAttributeValue (xml, "config", "key", configKey);

  0002d	8b 4c 24 08	 mov	 ecx, DWORD PTR _configKey$[esp]
  00031	51		 push	 ecx
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_03ICHNJLJF@key?$AA@
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_06HEJKKHEK@config?$AA@
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _XmlFindElementByAttributeValue
  00042	83 c4 10	 add	 esp, 16			; 00000010H

; 7182 : 		if (xml != NULL)

  00045	85 c0		 test	 eax, eax
  00047	74 1a		 je	 SHORT $LN1@ConfigRead

; 7183 : 		{
; 7184 : 			XmlGetNodeText (xml, configValue, maxValueSize);

  00049	8b 54 24 10	 mov	 edx, DWORD PTR _maxValueSize$[esp]
  0004d	8b 4c 24 0c	 mov	 ecx, DWORD PTR _configValue$[esp]
  00051	52		 push	 edx
  00052	51		 push	 ecx
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 _XmlGetNodeText
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7185 : 			return TRUE;

  0005c	b8 01 00 00 00	 mov	 eax, 1

; 7190 : }

  00061	59		 pop	 ecx
  00062	c3		 ret	 0
$LN1@ConfigRead:

; 7186 : 		}
; 7187 : 	}
; 7188 : 
; 7189 : 	return FALSE;

  00063	33 c0		 xor	 eax, eax

; 7190 : }

  00065	59		 pop	 ecx
  00066	c3		 ret	 0
?ConfigRead@@YAHPAD0H@Z ENDP				; ConfigRead
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ConfigReadInt
EXTRN	_atoi:PROC
; Function compile flags: /Ogtpy
;	COMDAT _ConfigReadInt
_TEXT	SEGMENT
_s$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_configKey$ = 8						; size = 4
_defaultValue$ = 12					; size = 4
_ConfigReadInt PROC					; COMDAT

; 7194 : {

  00000	83 ec 24	 sub	 esp, 36			; 00000024H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 20	 mov	 DWORD PTR __$ArrayPad$[esp+36], eax
  0000e	8b 44 24 28	 mov	 eax, DWORD PTR _configKey$[esp+32]

; 7195 : 	char s[32];
; 7196 : 
; 7197 : 	if (ConfigRead (configKey, s, sizeof (s)))

  00012	6a 20		 push	 32			; 00000020H
  00014	8d 4c 24 04	 lea	 ecx, DWORD PTR _s$[esp+40]
  00018	51		 push	 ecx
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?ConfigRead@@YAHPAD0H@Z	; ConfigRead
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00022	85 c0		 test	 eax, eax
  00024	74 1b		 je	 SHORT $LN2@ConfigRead@2

; 7198 : 		return atoi (s);

  00026	8d 14 24	 lea	 edx, DWORD PTR _s$[esp+36]
  00029	52		 push	 edx
  0002a	e8 00 00 00 00	 call	 _atoi
  0002f	83 c4 04	 add	 esp, 4

; 7199 : 	else
; 7200 : 		return defaultValue;
; 7201 : }

  00032	8b 4c 24 20	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+36]
  00036	33 cc		 xor	 ecx, esp
  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	83 c4 24	 add	 esp, 36			; 00000024H
  00040	c3		 ret	 0
$LN2@ConfigRead@2:
  00041	8b 4c 24 20	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+36]
  00045	8b 44 24 2c	 mov	 eax, DWORD PTR _defaultValue$[esp+32]
  00049	33 cc		 xor	 ecx, esp
  0004b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00050	83 c4 24	 add	 esp, 36			; 00000024H
  00053	c3		 ret	 0
_ConfigReadInt ENDP
_TEXT	ENDS
PUBLIC	_ConfigReadString
; Function compile flags: /Ogtpy
;	COMDAT _ConfigReadString
_TEXT	SEGMENT
_configKey$ = 8						; size = 4
_defaultValue$ = 12					; size = 4
_str$ = 16						; size = 4
_maxLen$ = 20						; size = 4
_ConfigReadString PROC					; COMDAT

; 7206 : 	if (ConfigRead (configKey, str, maxLen))

  00000	8b 44 24 10	 mov	 eax, DWORD PTR _maxLen$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR _configKey$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 10	 mov	 esi, DWORD PTR _str$[esp]
  0000d	50		 push	 eax
  0000e	56		 push	 esi
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 ?ConfigRead@@YAHPAD0H@Z	; ConfigRead
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH
  00018	85 c0		 test	 eax, eax

; 7207 : 		return str;

  0001a	8b c6		 mov	 eax, esi
  0001c	75 04		 jne	 SHORT $LN1@ConfigRead@3

; 7208 : 	else
; 7209 : 		return defaultValue;

  0001e	8b 44 24 0c	 mov	 eax, DWORD PTR _defaultValue$[esp]
$LN1@ConfigRead@3:
  00022	5e		 pop	 esi

; 7210 : }

  00023	c3		 ret	 0
_ConfigReadString ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_Debug
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__vsnprintf:PROC
; Function compile flags: /Ogtpy
;	COMDAT _Debug
_TEXT	SEGMENT
_buf$ = -1028						; size = 1024
__$ArrayPad$ = -4					; size = 4
_format$ = 8						; size = 4
_Debug	PROC						; COMDAT

; 7293 : {

  00000	81 ec 04 04 00
	00		 sub	 esp, 1028		; 00000404H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 00 04
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+1028], eax

; 7294 : 	char buf[1024];
; 7295 : 	va_list val;
; 7296 : 
; 7297 : 	va_start(val, format);
; 7298 : 	_vsnprintf (buf, sizeof (buf), format, val);

  00014	8b 8c 24 08 04
	00 00		 mov	 ecx, DWORD PTR _format$[esp+1024]
  0001b	8d 84 24 0c 04
	00 00		 lea	 eax, DWORD PTR _format$[esp+1028]
  00022	50		 push	 eax
  00023	51		 push	 ecx
  00024	8d 54 24 08	 lea	 edx, DWORD PTR _buf$[esp+1036]
  00028	68 00 04 00 00	 push	 1024			; 00000400H
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 __vsnprintf
  00033	83 c4 10	 add	 esp, 16			; 00000010H

; 7299 : 	va_end(val);
; 7300 : 
; 7301 : 	OutputDebugString (buf);

  00036	8d 04 24	 lea	 eax, DWORD PTR _buf$[esp+1028]
  00039	50		 push	 eax
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4

; 7302 : }

  00040	8b 8c 24 00 04
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1028]
  00047	33 cc		 xor	 ecx, esp
  00049	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004e	81 c4 04 04 00
	00		 add	 esp, 1028		; 00000404H
  00054	c3		 ret	 0
_Debug	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@DLBJPPEL@CipherShed?5debug?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_DebugMsgBox
EXTRN	__imp__MessageBoxA@16:PROC
;	COMDAT ??_C@_0BB@DLBJPPEL@CipherShed?5debug?$AA@
CONST	SEGMENT
??_C@_0BB@DLBJPPEL@CipherShed?5debug?$AA@ DB 'CipherShed debug', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _DebugMsgBox
_TEXT	SEGMENT
_buf$ = -1028						; size = 1024
__$ArrayPad$ = -4					; size = 4
_format$ = 8						; size = 4
_DebugMsgBox PROC					; COMDAT

; 7306 : {

  00000	81 ec 04 04 00
	00		 sub	 esp, 1028		; 00000404H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 00 04
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+1028], eax

; 7307 : 	char buf[1024];
; 7308 : 	va_list val;
; 7309 : 
; 7310 : 	va_start(val, format);
; 7311 : 	_vsnprintf (buf, sizeof (buf), format, val);

  00014	8b 8c 24 08 04
	00 00		 mov	 ecx, DWORD PTR _format$[esp+1024]
  0001b	8d 84 24 0c 04
	00 00		 lea	 eax, DWORD PTR _format$[esp+1028]
  00022	50		 push	 eax
  00023	51		 push	 ecx
  00024	8d 54 24 08	 lea	 edx, DWORD PTR _buf$[esp+1036]
  00028	68 00 04 00 00	 push	 1024			; 00000400H
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 __vsnprintf

; 7312 : 	va_end(val);
; 7313 : 
; 7314 : 	MessageBox (MainDlg, buf, "CipherShed debug", 0);

  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00039	83 c4 10	 add	 esp, 16			; 00000010H
  0003c	6a 00		 push	 0
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DLBJPPEL@CipherShed?5debug?$AA@
  00043	8d 44 24 08	 lea	 eax, DWORD PTR _buf$[esp+1036]
  00047	50		 push	 eax
  00048	51		 push	 ecx
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 7315 : }

  0004f	8b 8c 24 00 04
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1028]
  00056	33 cc		 xor	 ecx, esp
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	81 c4 04 04 00
	00		 add	 esp, 1028		; 00000404H
  00063	c3		 ret	 0
_DebugMsgBox ENDP
_TEXT	ENDS
PUBLIC	_IsHiddenOSRunning
EXTRN	??1BootEncryption@CipherShed@@QAE@XZ:PROC	; CipherShed::BootEncryption::~BootEncryption
EXTRN	?IsHiddenSystemRunning@BootEncryption@CipherShed@@QAE_NXZ:PROC ; CipherShed::BootEncryption::IsHiddenSystemRunning
EXTRN	??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z:PROC ; CipherShed::BootEncryption::BootEncryption
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT ?hiddenOSRunning@?1??IsHiddenOSRunning@@9@4HA
_BSS	SEGMENT
?hiddenOSRunning@?1??IsHiddenOSRunning@@9@4HA DD 01H DUP (?) ; `IsHiddenOSRunning'::`2'::hiddenOSRunning
_BSS	ENDS
;	COMDAT ?statusCached@?1??IsHiddenOSRunning@@9@4HA
_BSS	SEGMENT
?statusCached@?1??IsHiddenOSRunning@@9@4HA DD 01H DUP (?) ; `IsHiddenOSRunning'::`2'::statusCached
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_IsHiddenOSRunning$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_IsHiddenOSRunning$0
__tryblocktable$_IsHiddenOSRunning DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$_IsHiddenOSRunning$3
__unwindtable$_IsHiddenOSRunning DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$_IsHiddenOSRunning$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$_IsHiddenOSRunning DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$_IsHiddenOSRunning
	DD	01H
	DD	FLAT:__tryblocktable$_IsHiddenOSRunning
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _IsHiddenOSRunning
_TEXT	SEGMENT
$T151990 = -1576					; size = 1560
__$EHRec$ = -16						; size = 16
_IsHiddenOSRunning PROC					; COMDAT

; 7323 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_IsHiddenOSRunning
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 1c 06 00
	00		 sub	 esp, 1564		; 0000061cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 7324 : 	static BOOL statusCached = FALSE;
; 7325 : 	static BOOL hiddenOSRunning;
; 7326 : 
; 7327 : 	if (!statusCached)

  0002e	33 db		 xor	 ebx, ebx
  00030	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?statusCached@?1??IsHiddenOSRunning@@9@4HA, ebx
  00036	75 40		 jne	 SHORT $LN11@IsHiddenOS

; 7328 : 	{
; 7329 : 		try
; 7330 : 		{
; 7331 : 			hiddenOSRunning = BootEncryption (MainDlg).IsHiddenSystemRunning();

  00038	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0003d	50		 push	 eax
  0003e	8d 8d d8 f9 ff
	ff		 lea	 ecx, DWORD PTR $T151990[ebp]
  00044	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00047	e8 00 00 00 00	 call	 ??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z ; CipherShed::BootEncryption::BootEncryption
  0004c	8b c8		 mov	 ecx, eax
  0004e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00052	e8 00 00 00 00	 call	 ?IsHiddenSystemRunning@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::IsHiddenSystemRunning
  00057	0f b6 c8	 movzx	 ecx, al
  0005a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?hiddenOSRunning@?1??IsHiddenOSRunning@@9@4HA, ecx
  00060	8d 8d d8 f9 ff
	ff		 lea	 ecx, DWORD PTR $T151990[ebp]
  00066	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00069	e8 00 00 00 00	 call	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
$LN9@IsHiddenOS:

; 7337 : 
; 7338 : 		statusCached = TRUE;

  0006e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?statusCached@?1??IsHiddenOSRunning@@9@4HA, 1
$LN11@IsHiddenOS:

; 7339 : 	}
; 7340 : 
; 7341 : 	return hiddenOSRunning;

  00078	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenOSRunning@?1??IsHiddenOSRunning@@9@4HA

; 7342 : }

  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
__catch$_IsHiddenOSRunning$0:

; 7332 : 		}
; 7333 : 		catch (...)
; 7334 : 		{
; 7335 : 			hiddenOSRunning = FALSE;

  0008f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hiddenOSRunning@?1??IsHiddenOSRunning@@9@4HA, 0

; 7336 : 		}

  00099	b8 00 00 00 00	 mov	 eax, $LN9@IsHiddenOS
  0009e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_IsHiddenOSRunning$2:
  00000	8d 8d d8 f9 ff
	ff		 lea	 ecx, DWORD PTR $T151990[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
__ehhandler$_IsHiddenOSRunning:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a d4 f9 ff
	ff		 mov	 ecx, DWORD PTR [edx-1580]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_IsHiddenOSRunning
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_IsHiddenOSRunning ENDP
PUBLIC	??_C@_08PNLNEKOB@kernel32?$AA@			; `string'
PUBLIC	??_C@_0BO@LNOCKJOB@Wow64EnableWow64FsRedirection?$AA@ ; `string'
PUBLIC	_EnableWow64FsRedirection
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__GetModuleHandleA@4:PROC
;	COMDAT ??_C@_08PNLNEKOB@kernel32?$AA@
CONST	SEGMENT
??_C@_08PNLNEKOB@kernel32?$AA@ DB 'kernel32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LNOCKJOB@Wow64EnableWow64FsRedirection?$AA@
CONST	SEGMENT
??_C@_0BO@LNOCKJOB@Wow64EnableWow64FsRedirection?$AA@ DB 'Wow64EnableWow6'
	DB	'4FsRedirection', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _EnableWow64FsRedirection
_TEXT	SEGMENT
_enable$ = 8						; size = 4
_EnableWow64FsRedirection PROC				; COMDAT

; 7347 : 	typedef BOOLEAN (__stdcall *Wow64EnableWow64FsRedirection_t) (BOOL enable);
; 7348 : 	Wow64EnableWow64FsRedirection_t wow64EnableWow64FsRedirection = (Wow64EnableWow64FsRedirection_t) GetProcAddress (GetModuleHandle ("kernel32"), "Wow64EnableWow64FsRedirection");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@LNOCKJOB@Wow64EnableWow64FsRedirection?$AA@
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_08PNLNEKOB@kernel32?$AA@
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4
  00010	50		 push	 eax
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8

; 7349 : 
; 7350 :     if (!wow64EnableWow64FsRedirection)

  00017	85 c0		 test	 eax, eax
  00019	75 01		 jne	 SHORT $LN1@EnableWow6

; 7354 : }

  0001b	c3		 ret	 0
$LN1@EnableWow6:

; 7351 : 		return FALSE;
; 7352 : 
; 7353 :     return wow64EnableWow64FsRedirection (enable);

  0001c	8b 4c 24 04	 mov	 ecx, DWORD PTR _enable$[esp-4]
  00020	51		 push	 ecx
  00021	ff d0		 call	 eax
  00023	0f b6 c0	 movzx	 eax, al

; 7354 : }

  00026	c3		 ret	 0
_EnableWow64FsRedirection ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@POPFGFGJ@SeShutdownPrivilege?$AA@	; `string'
PUBLIC	_RestartComputer
EXTRN	__imp__ExitWindowsEx@8:PROC
EXTRN	__imp__AdjustTokenPrivileges@24:PROC
EXTRN	__imp__LookupPrivilegeValueA@12:PROC
EXTRN	__imp__OpenProcessToken@12:PROC
EXTRN	__imp__GetCurrentProcess@0:PROC
;	COMDAT ??_C@_0BE@POPFGFGJ@SeShutdownPrivilege?$AA@
CONST	SEGMENT
??_C@_0BE@POPFGFGJ@SeShutdownPrivilege?$AA@ DB 'SeShutdownPrivilege', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _RestartComputer
_TEXT	SEGMENT
_hTkn$ = -20						; size = 4
_tokenPrivil$ = -16					; size = 16
_RestartComputer PROC					; COMDAT

; 7358 : {

  00000	83 ec 14	 sub	 esp, 20			; 00000014H

; 7359 : 	TOKEN_PRIVILEGES tokenPrivil; 
; 7360 : 	HANDLE hTkn; 
; 7361 : 
; 7362 : 	if (!OpenProcessToken (GetCurrentProcess (), TOKEN_QUERY|TOKEN_ADJUST_PRIVILEGES, &hTkn))

  00003	8d 04 24	 lea	 eax, DWORD PTR _hTkn$[esp+20]
  00006	50		 push	 eax
  00007	6a 28		 push	 40			; 00000028H
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcess@0
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenProcessToken@12
  00016	85 c0		 test	 eax, eax
  00018	75 06		 jne	 SHORT $LN3@RestartCom
$LN6@RestartCom:

; 7363 : 	{
; 7364 : 		return false; 

  0001a	33 c0		 xor	 eax, eax

; 7377 : 		return false; 
; 7378 : 
; 7379 : 	return true;
; 7380 : }

  0001c	83 c4 14	 add	 esp, 20			; 00000014H
  0001f	c3		 ret	 0
$LN3@RestartCom:

; 7365 : 	}
; 7366 : 
; 7367 : 	LookupPrivilegeValue (NULL, SE_SHUTDOWN_NAME, &tokenPrivil.Privileges[0].Luid); 

  00020	8d 4c 24 08	 lea	 ecx, DWORD PTR _tokenPrivil$[esp+24]
  00024	51		 push	 ecx
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@POPFGFGJ@SeShutdownPrivilege?$AA@
  0002a	6a 00		 push	 0
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LookupPrivilegeValueA@12

; 7368 : 	tokenPrivil.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED; 
; 7369 : 	tokenPrivil.PrivilegeCount = 1;    
; 7370 : 
; 7371 : 	AdjustTokenPrivileges (hTkn, false, &tokenPrivil, 0, (PTOKEN_PRIVILEGES) NULL, 0); 

  00032	8b 04 24	 mov	 eax, DWORD PTR _hTkn$[esp+20]
  00035	6a 00		 push	 0
  00037	6a 00		 push	 0
  00039	6a 00		 push	 0
  0003b	8d 54 24 10	 lea	 edx, DWORD PTR _tokenPrivil$[esp+32]
  0003f	52		 push	 edx
  00040	6a 00		 push	 0
  00042	50		 push	 eax
  00043	c7 44 24 28 02
	00 00 00	 mov	 DWORD PTR _tokenPrivil$[esp+56], 2
  0004b	c7 44 24 1c 01
	00 00 00	 mov	 DWORD PTR _tokenPrivil$[esp+44], 1
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AdjustTokenPrivileges@24

; 7372 : 	if (GetLastError() != ERROR_SUCCESS) 

  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0005f	85 c0		 test	 eax, eax

; 7373 : 		return false; 

  00061	75 b7		 jne	 SHORT $LN6@RestartCom

; 7374 : 
; 7375 : 	if (!ExitWindowsEx (EWX_REBOOT,
; 7376 : 		SHTDN_REASON_MAJOR_OTHER | SHTDN_REASON_MINOR_OTHER | SHTDN_REASON_FLAG_PLANNED)) 

  00063	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00068	6a 02		 push	 2
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExitWindowsEx@8
  00070	f7 d8		 neg	 eax
  00072	1b c0		 sbb	 eax, eax
  00074	f7 d8		 neg	 eax

; 7377 : 		return false; 
; 7378 : 
; 7379 : 	return true;
; 7380 : }

  00076	83 c4 14	 add	 esp, 20			; 00000014H
  00079	c3		 ret	 0
_RestartComputer ENDP
_TEXT	ENDS
PUBLIC	??_C@_07HBPFMAGN@Volume?$HL?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_RelativePath2Absolute
EXTRN	__imp__GetCurrentDirectoryA@8:PROC
;	COMDAT ??_C@_07HBPFMAGN@Volume?$HL?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string.h
CONST	SEGMENT
??_C@_07HBPFMAGN@Volume?$HL?$AA@ DB 'Volume{', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
CONST	ENDS
;	COMDAT _RelativePath2Absolute
_TEXT	SEGMENT
_path$142966 = -524					; size = 520
__$ArrayPad$ = -4					; size = 4
_szFileName$ = 8					; size = 4
_RelativePath2Absolute PROC				; COMDAT

; 7499 : {

  00000	81 ec 0c 02 00
	00		 sub	 esp, 524		; 0000020cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 08 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+524], eax
  00014	53		 push	 ebx
  00015	8b 9c 24 14 02
	00 00		 mov	 ebx, DWORD PTR _szFileName$[esp+524]

; 7500 : 	if (szFileName[0] != '\\'
; 7501 : 		&& strchr (szFileName, ':') == 0
; 7502 : 		&& strstr (szFileName, "Volume{") != szFileName)

  0001c	80 3b 5c	 cmp	 BYTE PTR [ebx], 92	; 0000005cH
  0001f	0f 84 ac 00 00
	00		 je	 $LN15@RelativePa
  00025	6a 3a		 push	 58			; 0000003aH
  00027	53		 push	 ebx
  00028	e8 00 00 00 00	 call	 _strchr
  0002d	83 c4 08	 add	 esp, 8
  00030	85 c0		 test	 eax, eax
  00032	0f 85 99 00 00
	00		 jne	 $LN15@RelativePa
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_07HBPFMAGN@Volume?$HL?$AA@
  0003d	53		 push	 ebx
  0003e	e8 00 00 00 00	 call	 _strstr
  00043	83 c4 08	 add	 esp, 8
  00046	3b c3		 cmp	 eax, ebx
  00048	0f 84 83 00 00
	00		 je	 $LN15@RelativePa

; 7503 : 	{
; 7504 : 		char path[MAX_PATH*2];
; 7505 : 		GetCurrentDirectory (MAX_PATH, path);

  0004e	8d 44 24 04	 lea	 eax, DWORD PTR _path$142966[esp+528]
  00052	50		 push	 eax
  00053	68 04 01 00 00	 push	 260			; 00000104H
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentDirectoryA@8

; 7506 : 
; 7507 : 		if (path[strlen (path) - 1] != '\\')

  0005e	8d 44 24 04	 lea	 eax, DWORD PTR _path$142966[esp+528]
  00062	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL9@RelativePa:
  00065	8a 08		 mov	 cl, BYTE PTR [eax]
  00067	40		 inc	 eax
  00068	84 c9		 test	 cl, cl
  0006a	75 f9		 jne	 SHORT $LL9@RelativePa
  0006c	2b c2		 sub	 eax, edx
  0006e	80 7c 04 03 5c	 cmp	 BYTE PTR _path$142966[esp+eax+527], 92 ; 0000005cH
  00073	56		 push	 esi
  00074	57		 push	 edi
  00075	74 1b		 je	 SHORT $LN1@RelativePa

; 7508 : 			strcat (path, "\\");

  00077	8d 7c 24 0c	 lea	 edi, DWORD PTR _path$142966[esp+536]
  0007b	4f		 dec	 edi
  0007c	8d 64 24 00	 npad	 4
$LL10@RelativePa:
  00080	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00083	47		 inc	 edi
  00084	84 c0		 test	 al, al
  00086	75 f8		 jne	 SHORT $LL10@RelativePa
  00088	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
  0008f	66 89 0f	 mov	 WORD PTR [edi], cx
$LN1@RelativePa:

; 7509 : 
; 7510 : 		strcat (path, szFileName);

  00092	8b c3		 mov	 eax, ebx
  00094	8b d3		 mov	 edx, ebx
$LL11@RelativePa:
  00096	8a 08		 mov	 cl, BYTE PTR [eax]
  00098	40		 inc	 eax
  00099	84 c9		 test	 cl, cl
  0009b	75 f9		 jne	 SHORT $LL11@RelativePa
  0009d	8d 7c 24 0c	 lea	 edi, DWORD PTR _path$142966[esp+536]
  000a1	2b c2		 sub	 eax, edx
  000a3	4f		 dec	 edi
$LL12@RelativePa:
  000a4	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  000a7	47		 inc	 edi
  000a8	84 c9		 test	 cl, cl
  000aa	75 f8		 jne	 SHORT $LL12@RelativePa
  000ac	8b c8		 mov	 ecx, eax
  000ae	c1 e9 02	 shr	 ecx, 2
  000b1	8b f2		 mov	 esi, edx
  000b3	f3 a5		 rep movsd

; 7511 : 		strncpy (szFileName, path, MAX_PATH-1);

  000b5	68 03 01 00 00	 push	 259			; 00000103H
  000ba	8d 54 24 10	 lea	 edx, DWORD PTR _path$142966[esp+540]
  000be	8b c8		 mov	 ecx, eax
  000c0	52		 push	 edx
  000c1	83 e1 03	 and	 ecx, 3
  000c4	53		 push	 ebx
  000c5	f3 a4		 rep movsb
  000c7	e8 00 00 00 00	 call	 _strncpy
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
$LN15@RelativePa:

; 7512 : 	}
; 7513 : 
; 7514 : 	return szFileName;
; 7515 : }

  000d1	8b 8c 24 0c 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+528]
  000d8	8b c3		 mov	 eax, ebx
  000da	5b		 pop	 ebx
  000db	33 cc		 xor	 ecx, esp
  000dd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e2	81 c4 0c 02 00
	00		 add	 esp, 524		; 0000020cH
  000e8	c3		 ret	 0
_RelativePath2Absolute ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@KELIABGB@DEVICE_NOT_READY_ERROR?$AA@	; `string'
PUBLIC	??_C@_0BI@GBJLPDI@SYS_ASSIGN_DRIVE_LETTER?$AA@	; `string'
PUBLIC	??_C@_0BH@DCKIMKAI@SYS_AUTOMOUNT_DISABLED?$AA@	; `string'
PUBLIC	??_C@_0M@PNKDIFLK@NoAutoMount?$AA@		; `string'
PUBLIC	??_C@_0CL@PBEPCFPL@SYSTEM?2CurrentControlSet?2Service@ ; `string'
PUBLIC	_HandleDriveNotReadyError
EXTRN	_Warning:PROC
EXTRN	__imp__RegQueryValueExA@24:PROC
;	COMDAT ??_C@_0BH@KELIABGB@DEVICE_NOT_READY_ERROR?$AA@
CONST	SEGMENT
??_C@_0BH@KELIABGB@DEVICE_NOT_READY_ERROR?$AA@ DB 'DEVICE_NOT_READY_ERROR'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GBJLPDI@SYS_ASSIGN_DRIVE_LETTER?$AA@
CONST	SEGMENT
??_C@_0BI@GBJLPDI@SYS_ASSIGN_DRIVE_LETTER?$AA@ DB 'SYS_ASSIGN_DRIVE_LETTE'
	DB	'R', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DCKIMKAI@SYS_AUTOMOUNT_DISABLED?$AA@
CONST	SEGMENT
??_C@_0BH@DCKIMKAI@SYS_AUTOMOUNT_DISABLED?$AA@ DB 'SYS_AUTOMOUNT_DISABLED'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PNKDIFLK@NoAutoMount?$AA@
CONST	SEGMENT
??_C@_0M@PNKDIFLK@NoAutoMount?$AA@ DB 'NoAutoMount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@PBEPCFPL@SYSTEM?2CurrentControlSet?2Service@
CONST	SEGMENT
??_C@_0CL@PBEPCFPL@SYSTEM?2CurrentControlSet?2Service@ DB 'SYSTEM\Current'
	DB	'ControlSet\Services\MountMgr', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _HandleDriveNotReadyError
_TEXT	SEGMENT
_hkey$ = -12						; size = 4
_value$ = -8						; size = 4
_size$ = -4						; size = 4
_HandleDriveNotReadyError PROC				; COMDAT

; 7519 : {

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 7520 : 	HKEY hkey = 0;
; 7521 : 	DWORD value = 0, size = sizeof (DWORD);
; 7522 : 
; 7523 : 	if (RegOpenKeyEx (HKEY_LOCAL_MACHINE, "SYSTEM\\CurrentControlSet\\Services\\MountMgr",
; 7524 : 		0, KEY_READ, &hkey) != ERROR_SUCCESS)

  00003	8d 04 24	 lea	 eax, DWORD PTR _hkey$[esp+12]
  00006	50		 push	 eax
  00007	68 19 00 02 00	 push	 131097			; 00020019H
  0000c	6a 00		 push	 0
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@PBEPCFPL@SYSTEM?2CurrentControlSet?2Service@
  00013	68 02 00 00 80	 push	 -2147483646		; 80000002H
  00018	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR _hkey$[esp+32], 0
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR _value$[esp+32], 0
  00028	c7 44 24 1c 04
	00 00 00	 mov	 DWORD PTR _size$[esp+32], 4
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  00036	85 c0		 test	 eax, eax
  00038	75 5e		 jne	 SHORT $LN6@HandleDriv

; 7525 : 		return;
; 7526 : 
; 7527 : 	if (RegQueryValueEx (hkey, "NoAutoMount", 0, 0, (LPBYTE) &value, &size) == ERROR_SUCCESS 
; 7528 : 		&& value != 0)

  0003a	8d 4c 24 08	 lea	 ecx, DWORD PTR _size$[esp+12]
  0003e	51		 push	 ecx
  0003f	8d 54 24 08	 lea	 edx, DWORD PTR _value$[esp+16]
  00043	52		 push	 edx
  00044	50		 push	 eax
  00045	50		 push	 eax
  00046	8b 44 24 10	 mov	 eax, DWORD PTR _hkey$[esp+28]
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PNKDIFLK@NoAutoMount?$AA@
  0004f	50		 push	 eax
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24
  00056	85 c0		 test	 eax, eax
  00058	75 0d		 jne	 SHORT $LN4@HandleDriv
  0005a	39 44 24 04	 cmp	 DWORD PTR _value$[esp+12], eax
  0005e	74 07		 je	 SHORT $LN4@HandleDriv

; 7529 : 	{
; 7530 : 		Warning ("SYS_AUTOMOUNT_DISABLED");

  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@DCKIMKAI@SYS_AUTOMOUNT_DISABLED?$AA@
  00065	eb 1e		 jmp	 SHORT $LN8@HandleDriv
$LN4@HandleDriv:

; 7531 : 	}
; 7532 : 	else if (nCurrentOS == WIN_VISTA && CurrentOSServicePack < 1)

  00067	83 3d 00 00 00
	00 0b		 cmp	 DWORD PTR _nCurrentOS, 11 ; 0000000bH
  0006e	75 10		 jne	 SHORT $LN2@HandleDriv
  00070	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _CurrentOSServicePack, 1
  00077	7d 07		 jge	 SHORT $LN2@HandleDriv

; 7533 : 		Warning ("SYS_ASSIGN_DRIVE_LETTER");

  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@GBJLPDI@SYS_ASSIGN_DRIVE_LETTER?$AA@

; 7534 : 	else

  0007e	eb 05		 jmp	 SHORT $LN8@HandleDriv
$LN2@HandleDriv:

; 7535 : 		Warning ("DEVICE_NOT_READY_ERROR");

  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KELIABGB@DEVICE_NOT_READY_ERROR?$AA@
$LN8@HandleDriv:
  00085	e8 00 00 00 00	 call	 _Warning

; 7536 : 
; 7537 : 	RegCloseKey (hkey);

  0008a	8b 4c 24 04	 mov	 ecx, DWORD PTR _hkey$[esp+16]
  0008e	83 c4 04	 add	 esp, 4
  00091	51		 push	 ecx
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
$LN6@HandleDriv:

; 7538 : }

  00098	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009b	c3		 ret	 0
_HandleDriveNotReadyError ENDP
_TEXT	ENDS
PUBLIC	??_C@_09EMKKFGIH@TrueCrypt?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_CloseTCWindowsEnum@8
;	COMDAT ??_C@_09EMKKFGIH@TrueCrypt?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string.h
CONST	SEGMENT
??_C@_09EMKKFGIH@TrueCrypt?$AA@ DB 'TrueCrypt', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
CONST	ENDS
;	COMDAT _CloseTCWindowsEnum@8
_TEXT	SEGMENT
_name$142994 = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_lParam$ = 12						; size = 4
_CloseTCWindowsEnum@8 PROC				; COMDAT

; 7542 : {

  00000	81 ec 04 04 00
	00		 sub	 esp, 1028		; 00000404H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 00 04
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+1028], eax
  00014	53		 push	 ebx
  00015	8b 9c 24 10 04
	00 00		 mov	 ebx, DWORD PTR _lParam$[esp+1028]
  0001c	56		 push	 esi
  0001d	8b b4 24 10 04
	00 00		 mov	 esi, DWORD PTR _hwnd$[esp+1032]

; 7543 : 	/* Modifying 'TRUE' can introduce incompatibility with previous versions. */
; 7544 : 	if (GetWindowLongPtr (hwnd, GWLP_USERDATA) == (LONG_PTR) 'TRUE')

  00024	6a eb		 push	 -21			; ffffffebH
  00026	56		 push	 esi
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  0002d	3d 45 55 52 54	 cmp	 eax, 1414681925		; 54525545H
  00032	0f 85 9d 00 00
	00		 jne	 $LN15@CloseTCWin

; 7545 : 	{
; 7546 : 		char name[1024] = { 0 };

  00038	68 ff 03 00 00	 push	 1023			; 000003ffH
  0003d	8d 44 24 0d	 lea	 eax, DWORD PTR _name$142994[esp+1041]
  00041	6a 00		 push	 0
  00043	50		 push	 eax
  00044	c6 44 24 14 00	 mov	 BYTE PTR _name$142994[esp+1048], 0
  00049	e8 00 00 00 00	 call	 _memset
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7547 : 		GetWindowTextA(hwnd, name, sizeof (name) - 1);

  00051	68 ff 03 00 00	 push	 1023			; 000003ffH
  00056	8d 4c 24 0c	 lea	 ecx, DWORD PTR _name$142994[esp+1040]
  0005a	51		 push	 ecx
  0005b	56		 push	 esi
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 7548 : 		if (hwnd != MainDlg && (strstr (name, "CipherShed") || strstr (name, "TrueCrypt")))

  00062	3b 35 00 00 00
	00		 cmp	 esi, DWORD PTR _MainDlg
  00068	74 6b		 je	 SHORT $LN15@CloseTCWin
  0006a	8d 54 24 08	 lea	 edx, DWORD PTR _name$142994[esp+1036]
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FEEFGEIL@CipherShed?$AA@
  00073	52		 push	 edx
  00074	e8 00 00 00 00	 call	 _strstr
  00079	83 c4 08	 add	 esp, 8
  0007c	85 c0		 test	 eax, eax
  0007e	75 16		 jne	 SHORT $LN3@CloseTCWin
  00080	8d 44 24 08	 lea	 eax, DWORD PTR _name$142994[esp+1036]
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_09EMKKFGIH@TrueCrypt?$AA@
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _strstr
  0008f	83 c4 08	 add	 esp, 8
  00092	85 c0		 test	 eax, eax
  00094	74 3f		 je	 SHORT $LN15@CloseTCWin
$LN3@CloseTCWin:
  00096	57		 push	 edi

; 7549 : 		{
; 7550 : 			PostMessage (hwnd, TC_APPMSG_CLOSE_BKG_TASK, 0, 0);

  00097	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__PostMessageA@16
  0009d	6a 00		 push	 0
  0009f	6a 00		 push	 0
  000a1	68 04 80 00 00	 push	 32772			; 00008004H
  000a6	56		 push	 esi
  000a7	ff d7		 call	 edi

; 7551 : 
; 7552 : 			if (DriverVersion < 0x0430)

  000a9	81 3d 00 00 00
	00 30 04 00 00	 cmp	 DWORD PTR ?DriverVersion@@3JA, 1072 ; DriverVersion, 00000430H
  000b3	7d 09		 jge	 SHORT $LN2@CloseTCWin

; 7553 : 				PostMessage (hwnd, WM_ENDSESSION, 0, 0);

  000b5	6a 00		 push	 0
  000b7	6a 00		 push	 0
  000b9	6a 16		 push	 22			; 00000016H
  000bb	56		 push	 esi
  000bc	ff d7		 call	 edi
$LN2@CloseTCWin:

; 7554 : 
; 7555 : 			PostMessage (hwnd, WM_CLOSE, 0, 0);

  000be	6a 00		 push	 0
  000c0	6a 00		 push	 0
  000c2	6a 10		 push	 16			; 00000010H
  000c4	56		 push	 esi
  000c5	ff d7		 call	 edi
  000c7	5f		 pop	 edi

; 7559 : 		}
; 7560 : 	}
; 7561 : 	return TRUE;

  000c8	b8 01 00 00 00	 mov	 eax, 1
  000cd	85 db		 test	 ebx, ebx
  000cf	74 09		 je	 SHORT $LN1@CloseTCWin

; 7556 : 
; 7557 : 			if (lParam != 0)
; 7558 : 				*((BOOL *)lParam) = TRUE;

  000d1	89 03		 mov	 DWORD PTR [ebx], eax
  000d3	eb 05		 jmp	 SHORT $LN1@CloseTCWin
$LN15@CloseTCWin:

; 7559 : 		}
; 7560 : 	}
; 7561 : 	return TRUE;

  000d5	b8 01 00 00 00	 mov	 eax, 1
$LN1@CloseTCWin:

; 7562 : }

  000da	8b 8c 24 08 04
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1036]
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	33 cc		 xor	 ecx, esp
  000e5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ea	81 c4 04 04 00
	00		 add	 esp, 1028		; 00000404H
  000f0	c2 08 00	 ret	 8
_CloseTCWindowsEnum@8 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_FindTCWindowEnum@8
; Function compile flags: /Ogtpy
;	COMDAT _FindTCWindowEnum@8
_TEXT	SEGMENT
_name$143009 = -36					; size = 32
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_lParam$ = 12						; size = 4
_FindTCWindowEnum@8 PROC				; COMDAT

; 7565 : {

  00000	83 ec 24	 sub	 esp, 36			; 00000024H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 20	 mov	 DWORD PTR __$ArrayPad$[esp+36], eax
  0000e	56		 push	 esi
  0000f	8b 74 24 2c	 mov	 esi, DWORD PTR _hwnd$[esp+36]
  00013	57		 push	 edi
  00014	8b 7c 24 34	 mov	 edi, DWORD PTR _lParam$[esp+40]

; 7566 : 	if (*(HWND *)lParam == hwnd)

  00018	39 37		 cmp	 DWORD PTR [edi], esi

; 7567 : 		return TRUE;

  0001a	0f 84 bd 00 00
	00		 je	 $LN1@FindTCWind

; 7568 : 
; 7569 : 	/* Modifying 'TRUE' can introduce incompatibility with previous versions. */
; 7570 : 	if (GetWindowLongPtr (hwnd, GWLP_USERDATA) == (LONG_PTR) 'TRUE')

  00020	6a eb		 push	 -21			; ffffffebH
  00022	56		 push	 esi
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  00029	3d 45 55 52 54	 cmp	 eax, 1414681925		; 54525545H
  0002e	0f 85 a9 00 00
	00		 jne	 $LN1@FindTCWind

; 7571 : 	{
; 7572 : 		char name[32] = { 0 };

  00034	33 c0		 xor	 eax, eax
  00036	89 44 24 09	 mov	 DWORD PTR _name$143009[esp+45], eax
  0003a	89 44 24 0d	 mov	 DWORD PTR _name$143009[esp+49], eax
  0003e	89 44 24 11	 mov	 DWORD PTR _name$143009[esp+53], eax
  00042	89 44 24 15	 mov	 DWORD PTR _name$143009[esp+57], eax
  00046	89 44 24 19	 mov	 DWORD PTR _name$143009[esp+61], eax
  0004a	89 44 24 1d	 mov	 DWORD PTR _name$143009[esp+65], eax
  0004e	89 44 24 21	 mov	 DWORD PTR _name$143009[esp+69], eax
  00052	66 89 44 24 25	 mov	 WORD PTR _name$143009[esp+73], ax
  00057	88 44 24 27	 mov	 BYTE PTR _name$143009[esp+75], al

; 7573 : 		GetWindowTextA(hwnd, name, sizeof (name) - 1);

  0005b	6a 1f		 push	 31			; 0000001fH
  0005d	8d 44 24 0c	 lea	 eax, DWORD PTR _name$143009[esp+48]
  00061	50		 push	 eax
  00062	56		 push	 esi
  00063	c6 44 24 14 00	 mov	 BYTE PTR _name$143009[esp+56], 0
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 7574 : 		if (hwnd != MainDlg && (strcmp (name, "CipherShed") == 0 || strcmp (name, "TrueCrypt") == 0))

  0006e	3b 35 00 00 00
	00		 cmp	 esi, DWORD PTR _MainDlg
  00074	74 67		 je	 SHORT $LN1@FindTCWind
  00076	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0L@FEEFGEIL@CipherShed?$AA@
  0007b	8d 44 24 08	 lea	 eax, DWORD PTR _name$143009[esp+44]
  0007f	90		 npad	 1
$LL8@FindTCWind:
  00080	8a 10		 mov	 dl, BYTE PTR [eax]
  00082	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00084	75 1a		 jne	 SHORT $LN9@FindTCWind
  00086	84 d2		 test	 dl, dl
  00088	74 12		 je	 SHORT $LN10@FindTCWind
  0008a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0008d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00090	75 0e		 jne	 SHORT $LN9@FindTCWind
  00092	83 c0 02	 add	 eax, 2
  00095	83 c1 02	 add	 ecx, 2
  00098	84 d2		 test	 dl, dl
  0009a	75 e4		 jne	 SHORT $LL8@FindTCWind
$LN10@FindTCWind:
  0009c	33 c0		 xor	 eax, eax
  0009e	eb 05		 jmp	 SHORT $LN11@FindTCWind
$LN9@FindTCWind:
  000a0	1b c0		 sbb	 eax, eax
  000a2	83 d8 ff	 sbb	 eax, -1
$LN11@FindTCWind:
  000a5	85 c0		 test	 eax, eax
  000a7	74 32		 je	 SHORT $LN2@FindTCWind
  000a9	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09EMKKFGIH@TrueCrypt?$AA@
  000ae	8d 44 24 08	 lea	 eax, DWORD PTR _name$143009[esp+44]
$LL12@FindTCWind:
  000b2	8a 10		 mov	 dl, BYTE PTR [eax]
  000b4	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000b6	75 1a		 jne	 SHORT $LN13@FindTCWind
  000b8	84 d2		 test	 dl, dl
  000ba	74 12		 je	 SHORT $LN14@FindTCWind
  000bc	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000bf	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000c2	75 0e		 jne	 SHORT $LN13@FindTCWind
  000c4	83 c0 02	 add	 eax, 2
  000c7	83 c1 02	 add	 ecx, 2
  000ca	84 d2		 test	 dl, dl
  000cc	75 e4		 jne	 SHORT $LL12@FindTCWind
$LN14@FindTCWind:
  000ce	33 c0		 xor	 eax, eax
  000d0	eb 05		 jmp	 SHORT $LN15@FindTCWind
$LN13@FindTCWind:
  000d2	1b c0		 sbb	 eax, eax
  000d4	83 d8 ff	 sbb	 eax, -1
$LN15@FindTCWind:
  000d7	85 c0		 test	 eax, eax
  000d9	75 02		 jne	 SHORT $LN1@FindTCWind
$LN2@FindTCWind:

; 7575 : 		{
; 7576 : 			if (lParam != 0)
; 7577 : 				*((HWND *)lParam) = hwnd;

  000db	89 37		 mov	 DWORD PTR [edi], esi
$LN1@FindTCWind:

; 7578 : 		}
; 7579 : 	}
; 7580 : 	return TRUE;
; 7581 : }

  000dd	8b 4c 24 28	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+44]
  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	33 cc		 xor	 ecx, esp
  000e5	b8 01 00 00 00	 mov	 eax, 1
  000ea	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ef	83 c4 24	 add	 esp, 36			; 00000024H
  000f2	c2 08 00	 ret	 8
_FindTCWindowEnum@8 ENDP
_TEXT	ENDS
PUBLIC	_MapResource
EXTRN	__imp__LockResource@4:PROC
EXTRN	__imp__SizeofResource@8:PROC
EXTRN	__imp__LoadResource@8:PROC
EXTRN	__imp__FindResourceA@12:PROC
; Function compile flags: /Ogtpy
;	COMDAT _MapResource
_TEXT	SEGMENT
_resourceType$ = 8					; size = 4
_resourceId$ = 12					; size = 4
_size$ = 16						; size = 4
_MapResource PROC					; COMDAT

; 7586 : 	HGLOBAL hResL; 
; 7587 :     HRSRC hRes;
; 7588 : 
; 7589 : 	hRes = FindResource (NULL, MAKEINTRESOURCE(resourceId), resourceType);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _resourceType$[esp-4]
  00004	0f b7 4c 24 08	 movzx	 ecx, WORD PTR _resourceId$[esp-4]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	50		 push	 eax
  0000d	51		 push	 ecx
  0000e	6a 00		 push	 0
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindResourceA@12
  00016	8b f0		 mov	 esi, eax

; 7590 : 	hResL = LoadResource (NULL, hRes);

  00018	56		 push	 esi
  00019	6a 00		 push	 0
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadResource@8

; 7591 : 
; 7592 : 	if (size != NULL)

  00021	8b 7c 24 18	 mov	 edi, DWORD PTR _size$[esp+8]
  00025	8b d8		 mov	 ebx, eax
  00027	85 ff		 test	 edi, edi
  00029	74 0b		 je	 SHORT $LN1@MapResourc

; 7593 : 		*size = SizeofResource (NULL, hRes);

  0002b	56		 push	 esi
  0002c	6a 00		 push	 0
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SizeofResource@8
  00034	89 07		 mov	 DWORD PTR [edi], eax
$LN1@MapResourc:

; 7594 :   
; 7595 : 	return (BYTE *) LockResource (hResL);

  00036	53		 push	 ebx
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LockResource@4
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx

; 7596 : }

  00040	c3		 ret	 0
_MapResource ENDP
_TEXT	ENDS
PUBLIC	??_C@_03EJABLKAK@?$DP?3?2?$AA@			; `string'
PUBLIC	??_C@_0ED@FMLJHJOD@System?2CurrentControlSet?2Control@ ; `string'
PUBLIC	??_C@_0M@BHFNFFHI@PagingFiles?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_IsPagingFileWildcardActive
EXTRN	_ReadLocalMachineRegistryMultiString:PROC
EXTRN	_ReadLocalMachineRegistryString:PROC
;	COMDAT ??_C@_03EJABLKAK@?$DP?3?2?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string.h
CONST	SEGMENT
??_C@_03EJABLKAK@?$DP?3?2?$AA@ DB '?:\', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@FMLJHJOD@System?2CurrentControlSet?2Control@
CONST	SEGMENT
??_C@_0ED@FMLJHJOD@System?2CurrentControlSet?2Control@ DB 'System\Current'
	DB	'ControlSet\Control\Session Manager\Memory Management', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BHFNFFHI@PagingFiles?$AA@
CONST	SEGMENT
??_C@_0M@BHFNFFHI@PagingFiles?$AA@ DB 'PagingFiles', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
CONST	ENDS
;	COMDAT _IsPagingFileWildcardActive
_TEXT	SEGMENT
_size$ = -65544						; size = 4
_pagingFiles$ = -65540					; size = 65536
__$ArrayPad$ = -4					; size = 4
_IsPagingFileWildcardActive PROC			; COMDAT

; 7910 : {

  00000	b8 08 00 01 00	 mov	 eax, 65544		; 00010008H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 04 00
	01 00		 mov	 DWORD PTR __$ArrayPad$[esp+65544], eax

; 7911 : 	char pagingFiles[65536];
; 7912 : 	DWORD size = sizeof (pagingFiles);
; 7913 : 	char *mmKey = "System\\CurrentControlSet\\Control\\Session Manager\\Memory Management";
; 7914 : 
; 7915 : 	if (!ReadLocalMachineRegistryString (mmKey, "PagingFiles", pagingFiles, &size))

  00018	8d 04 24	 lea	 eax, DWORD PTR _size$[esp+65544]
  0001b	50		 push	 eax
  0001c	8d 4c 24 08	 lea	 ecx, DWORD PTR _pagingFiles$[esp+65548]
  00020	51		 push	 ecx
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BHFNFFHI@PagingFiles?$AA@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@FMLJHJOD@System?2CurrentControlSet?2Control@
  0002b	c7 44 24 10 00
	00 01 00	 mov	 DWORD PTR _size$[esp+65560], 65536 ; 00010000H
  00033	e8 00 00 00 00	 call	 _ReadLocalMachineRegistryString
  00038	83 c4 10	 add	 esp, 16			; 00000010H
  0003b	85 c0		 test	 eax, eax
  0003d	75 27		 jne	 SHORT $LN1@IsPagingFi

; 7916 : 	{
; 7917 : 		size = sizeof (pagingFiles);
; 7918 : 		if (!ReadLocalMachineRegistryMultiString (mmKey, "PagingFiles", pagingFiles, &size))

  0003f	8d 14 24	 lea	 edx, DWORD PTR _size$[esp+65544]
  00042	52		 push	 edx
  00043	8d 44 24 08	 lea	 eax, DWORD PTR _pagingFiles$[esp+65548]
  00047	50		 push	 eax
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BHFNFFHI@PagingFiles?$AA@
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@FMLJHJOD@System?2CurrentControlSet?2Control@
  00052	c7 44 24 10 00
	00 01 00	 mov	 DWORD PTR _size$[esp+65560], 65536 ; 00010000H
  0005a	e8 00 00 00 00	 call	 _ReadLocalMachineRegistryMultiString
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	85 c0		 test	 eax, eax

; 7919 : 			size = 0;
; 7920 : 	}
; 7921 : 
; 7922 : 	return size > 0 && strstr (pagingFiles, "?:\\") == pagingFiles;

  00064	74 3a		 je	 SHORT $LN5@IsPagingFi
$LN1@IsPagingFi:
  00066	83 3c 24 00	 cmp	 DWORD PTR _size$[esp+65544], 0
  0006a	76 34		 jbe	 SHORT $LN5@IsPagingFi
  0006c	8d 4c 24 04	 lea	 ecx, DWORD PTR _pagingFiles$[esp+65544]
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_03EJABLKAK@?$DP?3?2?$AA@
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 _strstr
  0007b	8d 54 24 0c	 lea	 edx, DWORD PTR _pagingFiles$[esp+65552]
  0007f	83 c4 08	 add	 esp, 8
  00082	3b c2		 cmp	 eax, edx
  00084	75 1a		 jne	 SHORT $LN5@IsPagingFi
  00086	b8 01 00 00 00	 mov	 eax, 1

; 7923 : }

  0008b	8b 8c 24 04 00
	01 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+65544]
  00092	33 cc		 xor	 ecx, esp
  00094	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00099	81 c4 08 00 01
	00		 add	 esp, 65544		; 00010008H
  0009f	c3		 ret	 0
$LN5@IsPagingFi:
  000a0	8b 8c 24 04 00
	01 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+65544]
  000a7	33 cc		 xor	 ecx, esp
  000a9	33 c0		 xor	 eax, eax
  000ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b0	81 c4 08 00 01
	00		 add	 esp, 65544		; 00010008H
  000b6	c3		 ret	 0
_IsPagingFileWildcardActive ENDP
_TEXT	ENDS
PUBLIC	_DisablePagingFile
EXTRN	_WriteLocalMachineRegistryMultiString:PROC
; Function compile flags: /Ogtpy
;	COMDAT _DisablePagingFile
_TEXT	SEGMENT
_empty$ = -4						; size = 2
_DisablePagingFile PROC					; COMDAT

; 7927 : {

  00000	51		 push	 ecx

; 7928 : 	char empty[] = { 0, 0 };

  00001	32 c0		 xor	 al, al
  00003	88 04 24	 mov	 BYTE PTR _empty$[esp+4], al
  00006	88 44 24 01	 mov	 BYTE PTR _empty$[esp+5], al

; 7929 : 	return WriteLocalMachineRegistryMultiString ("System\\CurrentControlSet\\Control\\Session Manager\\Memory Management", "PagingFiles", empty, sizeof (empty));

  0000a	6a 02		 push	 2
  0000c	8d 44 24 04	 lea	 eax, DWORD PTR _empty$[esp+8]
  00010	50		 push	 eax
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BHFNFFHI@PagingFiles?$AA@
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@FMLJHJOD@System?2CurrentControlSet?2Control@
  0001b	e8 00 00 00 00	 call	 _WriteLocalMachineRegistryMultiString

; 7930 : }

  00020	83 c4 14	 add	 esp, 20			; 00000014H
  00023	c3		 ret	 0
_DisablePagingFile ENDP
_TEXT	ENDS
PUBLIC	_FileHasReadOnlyAttribute
EXTRN	__imp__GetFileAttributesA@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _FileHasReadOnlyAttribute
_TEXT	SEGMENT
_path$ = 8						; size = 4
_FileHasReadOnlyAttribute PROC				; COMDAT

; 8575 : 	DWORD attributes = GetFileAttributes (path);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _path$[esp-4]
  00004	50		 push	 eax
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileAttributesA@4

; 8576 : 	return attributes != INVALID_FILE_ATTRIBUTES && (attributes & FILE_ATTRIBUTE_READONLY) != 0;

  0000b	83 f8 ff	 cmp	 eax, -1
  0000e	74 0a		 je	 SHORT $LN3@FileHasRea
  00010	a8 01		 test	 al, 1
  00012	74 06		 je	 SHORT $LN3@FileHasRea
  00014	b8 01 00 00 00	 mov	 eax, 1

; 8577 : }

  00019	c3		 ret	 0
$LN3@FileHasRea:

; 8576 : 	return attributes != INVALID_FILE_ATTRIBUTES && (attributes & FILE_ATTRIBUTE_READONLY) != 0;

  0001a	33 c0		 xor	 eax, eax

; 8577 : }

  0001c	c3		 ret	 0
_FileHasReadOnlyAttribute ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_IsFileOnReadOnlyFilesystem
EXTRN	__imp__GetVolumeInformationA@32:PROC
EXTRN	__imp__GetVolumePathNameA@12:PROC
; Function compile flags: /Ogtpy
;	COMDAT _IsFileOnReadOnlyFilesystem
_TEXT	SEGMENT
_flags$ = -272						; size = 4
_d$ = -268						; size = 4
_root$ = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
_path$ = 8						; size = 4
_IsFileOnReadOnlyFilesystem PROC			; COMDAT

; 8581 : {

  00000	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 0c 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+272], eax
  00014	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR _path$[esp+268]

; 8582 : 	char root[MAX_PATH];
; 8583 : 	if (!GetVolumePathName (path, root, sizeof (root)))

  0001b	68 04 01 00 00	 push	 260			; 00000104H
  00020	8d 4c 24 0c	 lea	 ecx, DWORD PTR _root$[esp+276]
  00024	51		 push	 ecx
  00025	50		 push	 eax
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumePathNameA@12
  0002c	85 c0		 test	 eax, eax
  0002e	75 17		 jne	 SHORT $LN2@IsFileOnRe
$LN5@IsFileOnRe:

; 8584 : 		return FALSE;

  00030	33 c0		 xor	 eax, eax

; 8591 : }

  00032	8b 8c 24 0c 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+272]
  00039	33 cc		 xor	 ecx, esp
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	81 c4 10 01 00
	00		 add	 esp, 272		; 00000110H
  00046	c3		 ret	 0
$LN2@IsFileOnRe:

; 8585 : 
; 8586 : 	DWORD flags, d;
; 8587 : 	if (!GetVolumeInformation (root, NULL, 0,  NULL, &d, &flags, NULL, 0))

  00047	6a 00		 push	 0
  00049	6a 00		 push	 0
  0004b	8d 54 24 08	 lea	 edx, DWORD PTR _flags$[esp+280]
  0004f	52		 push	 edx
  00050	8d 44 24 10	 lea	 eax, DWORD PTR _d$[esp+284]
  00054	50		 push	 eax
  00055	6a 00		 push	 0
  00057	6a 00		 push	 0
  00059	6a 00		 push	 0
  0005b	8d 4c 24 24	 lea	 ecx, DWORD PTR _root$[esp+300]
  0005f	51		 push	 ecx
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumeInformationA@32
  00066	85 c0		 test	 eax, eax

; 8588 : 		return FALSE;

  00068	74 c6		 je	 SHORT $LN5@IsFileOnRe

; 8589 : 
; 8590 : 	return (flags & FILE_READ_ONLY_VOLUME) ? TRUE : FALSE;

  0006a	8b 04 24	 mov	 eax, DWORD PTR _flags$[esp+272]

; 8591 : }

  0006d	8b 8c 24 0c 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+272]
  00074	c1 e8 13	 shr	 eax, 19			; 00000013H
  00077	33 cc		 xor	 ecx, esp
  00079	83 e0 01	 and	 eax, 1
  0007c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00081	81 c4 10 01 00
	00		 add	 esp, 272		; 00000110H
  00087	c3		 ret	 0
_IsFileOnReadOnlyFilesystem ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BA@DBKIDAPL@?$AAc?$AAm?$AAd?$AA?4?$AAe?$AAx?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_19BDAJEHDN@?$AAo?$AAp?$AAe?$AAn?$AA?$AA@	; `string'
PUBLIC	??_C@_1M@CDHIAJCD@?$AAr?$AAu?$AAn?$AAa?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EA@HMCMLJPJ@?$AA?1?$AAC?$AA?5?$AAe?$AAc?$AAh?$AAo?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CG?$AA?5?$AAc?$AAh?$AAk?$AAd?$AAs?$AAk?$AA?5?$AA?$CF?$AAh?$AAs?$AA?5?$AA?$CG?$AA?5?$AAp?$AAa?$AAu?$AAs?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EM@PJNCBGHJ@?$AA?1?$AAC?$AA?5?$AAe?$AAc?$AAh?$AAo?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CG?$AA?5?$AAc?$AAh?$AAk?$AAd?$AAs?$AAk?$AA?5?$AA?$CF?$AAh?$AAs?$AA?5?$AA?1?$AAF?$AA?5?$AA?1?$AAX?$AA?5?$AA?$CG?$AA?5@ ; `string'
PUBLIC	??_C@_0M@DMNKLGFJ@CHECKING_FS?$AA@		; `string'
PUBLIC	??_C@_0N@CFJEDEAE@REPAIRING_FS?$AA@		; `string'
PUBLIC	??_C@_0BO@JFNCHGE@FILESYS_REPAIR_CONFIRM_BACKUP?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_CheckFilesystem
EXTRN	__imp__ShellExecuteW@24:PROC
EXTRN	_AskWarnYesNo:PROC
;	COMDAT ??_C@_1BA@DBKIDAPL@?$AAc?$AAm?$AAd?$AA?4?$AAe?$AAx?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@DBKIDAPL@?$AAc?$AAm?$AAd?$AA?4?$AAe?$AAx?$AAe?$AA?$AA@ DB 'c', 00H
	DB	'm', 00H, 'd', 00H, '.', 00H, 'e', 00H, 'x', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_19BDAJEHDN@?$AAo?$AAp?$AAe?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_19BDAJEHDN@?$AAo?$AAp?$AAe?$AAn?$AA?$AA@ DB 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@CDHIAJCD@?$AAr?$AAu?$AAn?$AAa?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1M@CDHIAJCD@?$AAr?$AAu?$AAn?$AAa?$AAs?$AA?$AA@ DB 'r', 00H, 'u', 00H
	DB	'n', 00H, 'a', 00H, 's', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@HMCMLJPJ@?$AA?1?$AAC?$AA?5?$AAe?$AAc?$AAh?$AAo?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CG?$AA?5?$AAc?$AAh?$AAk?$AAd?$AAs?$AAk?$AA?5?$AA?$CF?$AAh?$AAs?$AA?5?$AA?$CG?$AA?5?$AAp?$AAa?$AAu?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@HMCMLJPJ@?$AA?1?$AAC?$AA?5?$AAe?$AAc?$AAh?$AAo?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CG?$AA?5?$AAc?$AAh?$AAk?$AAd?$AAs?$AAk?$AA?5?$AA?$CF?$AAh?$AAs?$AA?5?$AA?$CG?$AA?5?$AAp?$AAa?$AAu?$AAs?$AAe?$AA?$AA@ DB '/'
	DB	00H, 'C', 00H, ' ', 00H, 'e', 00H, 'c', 00H, 'h', 00H, 'o', 00H
	DB	' ', 00H, '%', 00H, 's', 00H, ' ', 00H, '&', 00H, ' ', 00H, 'c'
	DB	00H, 'h', 00H, 'k', 00H, 'd', 00H, 's', 00H, 'k', 00H, ' ', 00H
	DB	'%', 00H, 'h', 00H, 's', 00H, ' ', 00H, '&', 00H, ' ', 00H, 'p'
	DB	00H, 'a', 00H, 'u', 00H, 's', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@PJNCBGHJ@?$AA?1?$AAC?$AA?5?$AAe?$AAc?$AAh?$AAo?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CG?$AA?5?$AAc?$AAh?$AAk?$AAd?$AAs?$AAk?$AA?5?$AA?$CF?$AAh?$AAs?$AA?5?$AA?1?$AAF?$AA?5?$AA?1?$AAX?$AA?5?$AA?$CG?$AA?5@
CONST	SEGMENT
??_C@_1EM@PJNCBGHJ@?$AA?1?$AAC?$AA?5?$AAe?$AAc?$AAh?$AAo?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CG?$AA?5?$AAc?$AAh?$AAk?$AAd?$AAs?$AAk?$AA?5?$AA?$CF?$AAh?$AAs?$AA?5?$AA?1?$AAF?$AA?5?$AA?1?$AAX?$AA?5?$AA?$CG?$AA?5@ DB '/'
	DB	00H, 'C', 00H, ' ', 00H, 'e', 00H, 'c', 00H, 'h', 00H, 'o', 00H
	DB	' ', 00H, '%', 00H, 's', 00H, ' ', 00H, '&', 00H, ' ', 00H, 'c'
	DB	00H, 'h', 00H, 'k', 00H, 'd', 00H, 's', 00H, 'k', 00H, ' ', 00H
	DB	'%', 00H, 'h', 00H, 's', 00H, ' ', 00H, '/', 00H, 'F', 00H, ' '
	DB	00H, '/', 00H, 'X', 00H, ' ', 00H, '&', 00H, ' ', 00H, 'p', 00H
	DB	'a', 00H, 'u', 00H, 's', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DMNKLGFJ@CHECKING_FS?$AA@
CONST	SEGMENT
??_C@_0M@DMNKLGFJ@CHECKING_FS?$AA@ DB 'CHECKING_FS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CFJEDEAE@REPAIRING_FS?$AA@
CONST	SEGMENT
??_C@_0N@CFJEDEAE@REPAIRING_FS?$AA@ DB 'REPAIRING_FS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JFNCHGE@FILESYS_REPAIR_CONFIRM_BACKUP?$AA@
CONST	SEGMENT
??_C@_0BO@JFNCHGE@FILESYS_REPAIR_CONFIRM_BACKUP?$AA@ DB 'FILESYS_REPAIR_C'
	DB	'ONFIRM_BACKUP', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _CheckFilesystem
_TEXT	SEGMENT
_driveRoot$ = -4104					; size = 3
_msg$ = -4100						; size = 2048
_param$ = -2052						; size = 2048
__$ArrayPad$ = -4					; size = 4
_driveNo$ = 8						; size = 4
_fixErrors$ = 12					; size = 4
_CheckFilesystem PROC					; COMDAT

; 8595 : {

  00000	b8 08 10 00 00	 mov	 eax, 4104		; 00001008H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 04 10
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+4104], eax

; 8596 : 	wchar_t msg[1024], param[1024];
; 8597 : 	char driveRoot[] = { 'A' + (char) driveNo, ':', 0 };

  00018	8a 84 24 0c 10
	00 00		 mov	 al, BYTE PTR _driveNo$[esp+4100]
  0001f	56		 push	 esi

; 8598 : 
; 8599 : 	if (fixErrors && AskWarnYesNo ("FILESYS_REPAIR_CONFIRM_BACKUP") == IDNO)

  00020	8b b4 24 14 10
	00 00		 mov	 esi, DWORD PTR _fixErrors$[esp+4104]
  00027	04 41		 add	 al, 65			; 00000041H
  00029	88 44 24 04	 mov	 BYTE PTR _driveRoot$[esp+4108], al
  0002d	c6 44 24 05 3a	 mov	 BYTE PTR _driveRoot$[esp+4109], 58 ; 0000003aH
  00032	c6 44 24 06 00	 mov	 BYTE PTR _driveRoot$[esp+4110], 0
  00037	85 f6		 test	 esi, esi
  00039	74 1d		 je	 SHORT $LN4@CheckFiles
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@JFNCHGE@FILESYS_REPAIR_CONFIRM_BACKUP?$AA@
  00040	e8 00 00 00 00	 call	 _AskWarnYesNo
  00045	83 c4 04	 add	 esp, 4
  00048	83 f8 07	 cmp	 eax, 7
  0004b	0f 84 91 00 00
	00		 je	 $LN2@CheckFiles

; 8600 : 		return;
; 8601 : 
; 8602 : 	_snwprintf (msg, ARRAY_LENGTH(msg), GetString (fixErrors ? "REPAIRING_FS" : "CHECKING_FS"), driveRoot);

  00051	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0N@CFJEDEAE@REPAIRING_FS?$AA@
  00056	eb 05		 jmp	 SHORT $LN5@CheckFiles
$LN4@CheckFiles:
  00058	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@DMNKLGFJ@CHECKING_FS?$AA@
$LN5@CheckFiles:
  0005d	8d 4c 24 04	 lea	 ecx, DWORD PTR _driveRoot$[esp+4108]
  00061	51		 push	 ecx
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 _GetString
  00068	83 c4 04	 add	 esp, 4
  0006b	50		 push	 eax
  0006c	8d 54 24 10	 lea	 edx, DWORD PTR _msg$[esp+4116]
  00070	68 00 04 00 00	 push	 1024			; 00000400H
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 __snwprintf
  0007b	83 c4 10	 add	 esp, 16			; 00000010H

; 8603 : 	_snwprintf (param, ARRAY_LENGTH(param), fixErrors ? L"/C echo %s & chkdsk %hs /F /X & pause" : L"/C echo %s & chkdsk %hs & pause", msg, driveRoot);

  0007e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1EM@PJNCBGHJ@?$AA?1?$AAC?$AA?5?$AAe?$AAc?$AAh?$AAo?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CG?$AA?5?$AAc?$AAh?$AAk?$AAd?$AAs?$AAk?$AA?5?$AA?$CF?$AAh?$AAs?$AA?5?$AA?1?$AAF?$AA?5?$AA?1?$AAX?$AA?5?$AA?$CG?$AA?5@
  00083	85 f6		 test	 esi, esi
  00085	75 05		 jne	 SHORT $LN7@CheckFiles
  00087	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1EA@HMCMLJPJ@?$AA?1?$AAC?$AA?5?$AAe?$AAc?$AAh?$AAo?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CG?$AA?5?$AAc?$AAh?$AAk?$AAd?$AAs?$AAk?$AA?5?$AA?$CF?$AAh?$AAs?$AA?5?$AA?$CG?$AA?5?$AAp?$AAa?$AAu?$AAs?$AAe?$AA?$AA@
$LN7@CheckFiles:
  0008c	8d 4c 24 04	 lea	 ecx, DWORD PTR _driveRoot$[esp+4108]
  00090	51		 push	 ecx
  00091	8d 54 24 0c	 lea	 edx, DWORD PTR _msg$[esp+4112]
  00095	52		 push	 edx
  00096	50		 push	 eax
  00097	8d 84 24 14 08
	00 00		 lea	 eax, DWORD PTR _param$[esp+4120]
  0009e	68 00 04 00 00	 push	 1024			; 00000400H
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 __snwprintf
  000a9	83 c4 14	 add	 esp, 20			; 00000014H

; 8604 : 
; 8605 : 	ShellExecuteW (NULL, (!IsAdmin() && IsUacSupported()) ? L"runas" : L"open", L"cmd.exe", param, NULL, SW_SHOW);

  000ac	e8 00 00 00 00	 call	 _IsAdmin
  000b1	85 c0		 test	 eax, eax
  000b3	75 0e		 jne	 SHORT $LN8@CheckFiles
  000b5	e8 00 00 00 00	 call	 _IsUacSupported
  000ba	85 c0		 test	 eax, eax
  000bc	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1M@CDHIAJCD@?$AAr?$AAu?$AAn?$AAa?$AAs?$AA?$AA@
  000c1	75 05		 jne	 SHORT $LN9@CheckFiles
$LN8@CheckFiles:
  000c3	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_19BDAJEHDN@?$AAo?$AAp?$AAe?$AAn?$AA?$AA@
$LN9@CheckFiles:
  000c8	6a 05		 push	 5
  000ca	6a 00		 push	 0
  000cc	8d 8c 24 10 08
	00 00		 lea	 ecx, DWORD PTR _param$[esp+4116]
  000d3	51		 push	 ecx
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_1BA@DBKIDAPL@?$AAc?$AAm?$AAd?$AA?4?$AAe?$AAx?$AAe?$AA?$AA@
  000d9	50		 push	 eax
  000da	6a 00		 push	 0
  000dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteW@24
$LN2@CheckFiles:

; 8606 : }

  000e2	8b 8c 24 08 10
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+4108]
  000e9	5e		 pop	 esi
  000ea	33 cc		 xor	 ecx, esp
  000ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f1	81 c4 08 10 00
	00		 add	 esp, 4104		; 00001008H
  000f7	c3		 ret	 0
_CheckFilesystem ENDP
_TEXT	ENDS
PUBLIC	_BufferContainsString
; Function compile flags: /Ogtpy
;	COMDAT _BufferContainsString
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_bufferSize$ = 12					; size = 4
_str$ = 16						; size = 4
_BufferContainsString PROC				; COMDAT

; 8611 : 	size_t strLen = strlen (str);

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR _str$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL19@BufferCont:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $LL19@BufferCont
  0000e	2b c2		 sub	 eax, edx
  00010	57		 push	 edi
  00011	8b f8		 mov	 edi, eax

; 8612 : 
; 8613 : 	if (bufferSize < strLen)

  00013	39 7c 24 0c	 cmp	 DWORD PTR _bufferSize$[esp], edi
  00017	73 04		 jae	 SHORT $LN5@BufferCont

; 8614 : 		return FALSE;

  00019	33 c0		 xor	 eax, eax
  0001b	5f		 pop	 edi

; 8625 : }

  0001c	c3		 ret	 0
$LN5@BufferCont:

; 8615 : 
; 8616 : 	bufferSize -= strLen;

  0001d	29 7c 24 0c	 sub	 DWORD PTR _bufferSize$[esp], edi
  00021	53		 push	 ebx
  00022	55		 push	 ebp
  00023	56		 push	 esi

; 8617 : 
; 8618 : 	for (size_t i = 0; i < bufferSize; ++i)

  00024	bd 00 00 00 00	 mov	 ebp, 0
  00029	74 54		 je	 SHORT $LN2@BufferCont
  0002b	8b 54 24 14	 mov	 edx, DWORD PTR _buffer$[esp+12]
  0002f	90		 npad	 1
$LL20@BufferCont:

; 8619 : 	{
; 8620 : 		if (memcmp (buffer + i, str, strLen) == 0)

  00030	8b 4c 24 1c	 mov	 ecx, DWORD PTR _str$[esp+12]
  00034	8b c7		 mov	 eax, edi
  00036	8d 34 2a	 lea	 esi, DWORD PTR [edx+ebp]
  00039	83 ff 04	 cmp	 edi, 4
  0003c	72 16		 jb	 SHORT $LN15@BufferCont
  0003e	8b ff		 npad	 2
$LL9@BufferCont:
  00040	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00042	3b 19		 cmp	 ebx, DWORD PTR [ecx]
  00044	75 32		 jne	 SHORT $LN3@BufferCont
  00046	83 e8 04	 sub	 eax, 4
  00049	83 c1 04	 add	 ecx, 4
  0004c	83 c6 04	 add	 esi, 4
  0004f	83 f8 04	 cmp	 eax, 4
  00052	73 ec		 jae	 SHORT $LL9@BufferCont
$LN15@BufferCont:
  00054	85 c0		 test	 eax, eax
  00056	74 2e		 je	 SHORT $LN21@BufferCont
  00058	8a 19		 mov	 bl, BYTE PTR [ecx]
  0005a	3a 1e		 cmp	 bl, BYTE PTR [esi]
  0005c	75 1a		 jne	 SHORT $LN3@BufferCont
  0005e	83 f8 01	 cmp	 eax, 1
  00061	76 23		 jbe	 SHORT $LN21@BufferCont
  00063	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00066	3a 5e 01	 cmp	 bl, BYTE PTR [esi+1]
  00069	75 0d		 jne	 SHORT $LN3@BufferCont
  0006b	83 f8 02	 cmp	 eax, 2
  0006e	76 16		 jbe	 SHORT $LN21@BufferCont
  00070	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00073	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00076	74 0e		 je	 SHORT $LN21@BufferCont
$LN3@BufferCont:

; 8617 : 
; 8618 : 	for (size_t i = 0; i < bufferSize; ++i)

  00078	45		 inc	 ebp
  00079	3b 6c 24 18	 cmp	 ebp, DWORD PTR _bufferSize$[esp+12]
  0007d	72 b1		 jb	 SHORT $LL20@BufferCont
$LN2@BufferCont:
  0007f	5e		 pop	 esi
  00080	5d		 pop	 ebp
  00081	5b		 pop	 ebx

; 8622 : 	}
; 8623 : 
; 8624 : 	return FALSE;

  00082	33 c0		 xor	 eax, eax
  00084	5f		 pop	 edi

; 8625 : }

  00085	c3		 ret	 0
$LN21@BufferCont:
  00086	5e		 pop	 esi
  00087	5d		 pop	 ebp
  00088	5b		 pop	 ebx

; 8621 : 			return TRUE;

  00089	b8 01 00 00 00	 mov	 eax, 1
  0008e	5f		 pop	 edi

; 8625 : }

  0008f	c3		 ret	 0
_BufferContainsString ENDP
_TEXT	ENDS
PUBLIC	??_C@_05KPBLJGDL@runas?$AA@			; `string'
PUBLIC	??_C@_05DAJPPLDE@exit?6?$AA@			; `string'
PUBLIC	??_C@_0DG@HAFOMLKA@select?5partition?5?$CFd?6attributes?5v@ ; `string'
PUBLIC	??_C@_0CP@DIEKEDPA@select?5disk?5?$CFd?6attributes?5disk?5c@ ; `string'
PUBLIC	??_C@_0CI@FDJHAAPA@?$EAdiskpart?5?1s?5?$CC?$CFs?$CC?6?$EApause?6?$EAdel?5?$CC?$CF@ ; `string'
PUBLIC	??_C@_0DA@NHHHGBII@?$CFs?2CipherShed_Write_Protection_R@ ; `string'
PUBLIC	??_C@_0CL@CNEGPLGJ@?$CFs?2CipherShed_Write_Protection_R@ ; `string'
PUBLIC	??_C@_0BP@MDCLODBD@?2Device?2Harddisk?$CFd?2Partition?$CFd?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_RemoveDeviceWriteProtection
EXTRN	__imp__DeleteFileA@4:PROC
EXTRN	__snprintf:PROC
EXTRN	__imp__GetTempPathA@8:PROC
EXTRN	_sscanf:PROC
;	COMDAT ??_C@_05KPBLJGDL@runas?$AA@
CONST	SEGMENT
??_C@_05KPBLJGDL@runas?$AA@ DB 'runas', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DAJPPLDE@exit?6?$AA@
CONST	SEGMENT
??_C@_05DAJPPLDE@exit?6?$AA@ DB 'exit', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@HAFOMLKA@select?5partition?5?$CFd?6attributes?5v@
CONST	SEGMENT
??_C@_0DG@HAFOMLKA@select?5partition?5?$CFd?6attributes?5v@ DB 'select pa'
	DB	'rtition %d', 0aH, 'attributes volume clear readonly', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@DIEKEDPA@select?5disk?5?$CFd?6attributes?5disk?5c@
CONST	SEGMENT
??_C@_0CP@DIEKEDPA@select?5disk?5?$CFd?6attributes?5disk?5c@ DB 'select d'
	DB	'isk %d', 0aH, 'attributes disk clear readonly', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FDJHAAPA@?$EAdiskpart?5?1s?5?$CC?$CFs?$CC?6?$EApause?6?$EAdel?5?$CC?$CF@
CONST	SEGMENT
??_C@_0CI@FDJHAAPA@?$EAdiskpart?5?1s?5?$CC?$CFs?$CC?6?$EApause?6?$EAdel?5?$CC?$CF@ DB '@'
	DB	'diskpart /s "%s"', 0aH, '@pause', 0aH, '@del "%s" "%s"', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@NHHHGBII@?$CFs?2CipherShed_Write_Protection_R@
CONST	SEGMENT
??_C@_0DA@NHHHGBII@?$CFs?2CipherShed_Write_Protection_R@ DB '%s\CipherShe'
	DB	'd_Write_Protection_Removal.diskpart', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@CNEGPLGJ@?$CFs?2CipherShed_Write_Protection_R@
CONST	SEGMENT
??_C@_0CL@CNEGPLGJ@?$CFs?2CipherShed_Write_Protection_R@ DB '%s\CipherShe'
	DB	'd_Write_Protection_Removal.cmd', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MDCLODBD@?2Device?2Harddisk?$CFd?2Partition?$CFd?$AA@
CONST	SEGMENT
??_C@_0BP@MDCLODBD@?2Device?2Harddisk?$CFd?2Partition?$CFd?$AA@ DB '\Devi'
	DB	'ce\Harddisk%d\Partition%d', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _RemoveDeviceWriteProtection
_TEXT	SEGMENT
_driveNumber$ = -1572					; size = 4
_partitionNumber$ = -1568				; size = 4
_cmdBatch$ = -1564					; size = 520
_diskpartScript$ = -1044				; size = 520
_temp$ = -524						; size = 520
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_devicePath$ = 12					; size = 4
_RemoveDeviceWriteProtection PROC			; COMDAT

; 8656 : {

  00000	81 ec 24 06 00
	00		 sub	 esp, 1572		; 00000624H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 20 06
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+1572], eax
  00014	8b 84 24 2c 06
	00 00		 mov	 eax, DWORD PTR _devicePath$[esp+1568]
  0001b	57		 push	 edi
  0001c	8b bc 24 2c 06
	00 00		 mov	 edi, DWORD PTR _hwndDlg$[esp+1572]

; 8657 : 	int driveNumber;
; 8658 : 	int partitionNumber;
; 8659 : 
; 8660 : 	char temp[MAX_PATH*2];
; 8661 : 	char cmdBatch[MAX_PATH*2];
; 8662 : 	char diskpartScript[MAX_PATH*2];
; 8663 : 
; 8664 : 	if (sscanf (devicePath, "\\Device\\Harddisk%d\\Partition%d", &driveNumber, &partitionNumber) != 2)

  00023	8d 4c 24 08	 lea	 ecx, DWORD PTR _partitionNumber$[esp+1576]
  00027	51		 push	 ecx
  00028	8d 54 24 08	 lea	 edx, DWORD PTR _driveNumber$[esp+1580]
  0002c	52		 push	 edx
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MDCLODBD@?2Device?2Harddisk?$CFd?2Partition?$CFd?$AA@
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 _sscanf
  00038	83 c4 10	 add	 esp, 16			; 00000010H
  0003b	83 f8 02	 cmp	 eax, 2
  0003e	74 18		 je	 SHORT $LN5@RemoveDevi
$LN11@RemoveDevi:

; 8665 : 		return FALSE;

  00040	33 c0		 xor	 eax, eax
  00042	5f		 pop	 edi

; 8704 : 
; 8705 : 	return TRUE;
; 8706 : }

  00043	8b 8c 24 20 06
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1572]
  0004a	33 cc		 xor	 ecx, esp
  0004c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00051	81 c4 24 06 00
	00		 add	 esp, 1572		; 00000624H
  00057	c3		 ret	 0
$LN5@RemoveDevi:

; 8666 : 
; 8667 : 	if (GetTempPath (sizeof (temp), temp) == 0)

  00058	8d 84 24 1c 04
	00 00		 lea	 eax, DWORD PTR _temp$[esp+1576]
  0005f	50		 push	 eax
  00060	68 08 02 00 00	 push	 520			; 00000208H
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTempPathA@8
  0006b	85 c0		 test	 eax, eax

; 8668 : 		return FALSE;

  0006d	74 d1		 je	 SHORT $LN11@RemoveDevi
  0006f	56		 push	 esi

; 8669 : 
; 8670 : 	_snprintf (cmdBatch, sizeof (cmdBatch), "%s\\CipherShed_Write_Protection_Removal.cmd", temp);

  00070	8d 8c 24 20 04
	00 00		 lea	 ecx, DWORD PTR _temp$[esp+1580]
  00077	51		 push	 ecx
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@CNEGPLGJ@?$CFs?2CipherShed_Write_Protection_R@
  0007d	8d 54 24 18	 lea	 edx, DWORD PTR _cmdBatch$[esp+1588]
  00081	68 08 02 00 00	 push	 520			; 00000208H
  00086	52		 push	 edx
  00087	e8 00 00 00 00	 call	 __snprintf

; 8671 : 	_snprintf (diskpartScript, sizeof (diskpartScript), "%s\\CipherShed_Write_Protection_Removal.diskpart", temp);

  0008c	8d 84 24 30 04
	00 00		 lea	 eax, DWORD PTR _temp$[esp+1596]
  00093	50		 push	 eax
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@NHHHGBII@?$CFs?2CipherShed_Write_Protection_R@
  00099	8d 8c 24 30 02
	00 00		 lea	 ecx, DWORD PTR _diskpartScript$[esp+1604]
  000a0	68 08 02 00 00	 push	 520			; 00000208H
  000a5	51		 push	 ecx
  000a6	e8 00 00 00 00	 call	 __snprintf

; 8672 : 
; 8673 : 	FILE *f = fopen (cmdBatch, "w");

  000ab	8d 54 24 30	 lea	 edx, DWORD PTR _cmdBatch$[esp+1612]
  000af	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w?$AA@
  000b4	52		 push	 edx
  000b5	e8 00 00 00 00	 call	 _fopen
  000ba	8b f0		 mov	 esi, eax
  000bc	83 c4 28	 add	 esp, 40			; 00000028H

; 8674 : 	if (!f)

  000bf	85 f6		 test	 esi, esi
  000c1	75 22		 jne	 SHORT $LN3@RemoveDevi

; 8675 : 	{
; 8676 : 		handleWin32Error (hwndDlg);

  000c3	57		 push	 edi
  000c4	e8 00 00 00 00	 call	 _handleWin32Error
  000c9	83 c4 04	 add	 esp, 4
  000cc	5e		 pop	 esi

; 8677 : 		return FALSE;

  000cd	33 c0		 xor	 eax, eax
  000cf	5f		 pop	 edi

; 8704 : 
; 8705 : 	return TRUE;
; 8706 : }

  000d0	8b 8c 24 20 06
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1572]
  000d7	33 cc		 xor	 ecx, esp
  000d9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000de	81 c4 24 06 00
	00		 add	 esp, 1572		; 00000624H
  000e4	c3		 ret	 0
$LN3@RemoveDevi:

; 8678 : 	}
; 8679 : 
; 8680 : 	fprintf (f, "@diskpart /s \"%s\"\n@pause\n@del \"%s\" \"%s\"", diskpartScript, diskpartScript, cmdBatch);

  000e5	8d 44 24 10	 lea	 eax, DWORD PTR _cmdBatch$[esp+1580]
  000e9	50		 push	 eax
  000ea	8d 8c 24 1c 02
	00 00		 lea	 ecx, DWORD PTR _diskpartScript$[esp+1584]
  000f1	51		 push	 ecx
  000f2	8b d1		 mov	 edx, ecx
  000f4	52		 push	 edx
  000f5	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FDJHAAPA@?$EAdiskpart?5?1s?5?$CC?$CFs?$CC?6?$EApause?6?$EAdel?5?$CC?$CF@
  000fa	56		 push	 esi
  000fb	e8 00 00 00 00	 call	 _fprintf

; 8681 : 
; 8682 : 	CheckFileStreamWriteErrors (f, cmdBatch);

  00100	8d 44 24 24	 lea	 eax, DWORD PTR _cmdBatch$[esp+1600]
  00104	50		 push	 eax
  00105	56		 push	 esi
  00106	e8 00 00 00 00	 call	 _CheckFileStreamWriteErrors

; 8683 : 	fclose (f);

  0010b	56		 push	 esi
  0010c	e8 00 00 00 00	 call	 _fclose

; 8684 : 
; 8685 : 	f = fopen (diskpartScript, "w");

  00111	8d 8c 24 38 02
	00 00		 lea	 ecx, DWORD PTR _diskpartScript$[esp+1612]
  00118	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w?$AA@
  0011d	51		 push	 ecx
  0011e	e8 00 00 00 00	 call	 _fopen
  00123	8b f0		 mov	 esi, eax
  00125	83 c4 28	 add	 esp, 40			; 00000028H

; 8686 : 	if (!f)

  00128	85 f6		 test	 esi, esi
  0012a	75 2d		 jne	 SHORT $LN2@RemoveDevi

; 8687 : 	{
; 8688 : 		handleWin32Error (hwndDlg);

  0012c	57		 push	 edi
  0012d	e8 00 00 00 00	 call	 _handleWin32Error
  00132	83 c4 04	 add	 esp, 4

; 8689 : 		DeleteFile (cmdBatch);

  00135	8d 54 24 10	 lea	 edx, DWORD PTR _cmdBatch$[esp+1580]
  00139	52		 push	 edx
  0013a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteFileA@4
  00140	5e		 pop	 esi

; 8690 : 		return FALSE;

  00141	33 c0		 xor	 eax, eax
  00143	5f		 pop	 edi

; 8704 : 
; 8705 : 	return TRUE;
; 8706 : }

  00144	8b 8c 24 20 06
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1572]
  0014b	33 cc		 xor	 ecx, esp
  0014d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00152	81 c4 24 06 00
	00		 add	 esp, 1572		; 00000624H
  00158	c3		 ret	 0
$LN2@RemoveDevi:

; 8691 : 	}
; 8692 : 
; 8693 : 	fprintf (f, "select disk %d\nattributes disk clear readonly\n", driveNumber);

  00159	8b 44 24 08	 mov	 eax, DWORD PTR _driveNumber$[esp+1580]
  0015d	50		 push	 eax
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@DIEKEDPA@select?5disk?5?$CFd?6attributes?5disk?5c@
  00163	56		 push	 esi
  00164	e8 00 00 00 00	 call	 _fprintf

; 8694 : 
; 8695 : 	if (partitionNumber != 0)

  00169	8b 44 24 18	 mov	 eax, DWORD PTR _partitionNumber$[esp+1592]
  0016d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00170	85 c0		 test	 eax, eax
  00172	74 0f		 je	 SHORT $LN1@RemoveDevi

; 8696 : 		fprintf (f, "select partition %d\nattributes volume clear readonly\n", partitionNumber);

  00174	50		 push	 eax
  00175	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@HAFOMLKA@select?5partition?5?$CFd?6attributes?5v@
  0017a	56		 push	 esi
  0017b	e8 00 00 00 00	 call	 _fprintf
  00180	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@RemoveDevi:

; 8697 : 
; 8698 : 	fprintf (f, "exit\n");

  00183	68 00 00 00 00	 push	 OFFSET ??_C@_05DAJPPLDE@exit?6?$AA@
  00188	56		 push	 esi
  00189	e8 00 00 00 00	 call	 _fprintf

; 8699 : 
; 8700 : 	CheckFileStreamWriteErrors (f, diskpartScript);

  0018e	8d 8c 24 20 02
	00 00		 lea	 ecx, DWORD PTR _diskpartScript$[esp+1588]
  00195	51		 push	 ecx
  00196	56		 push	 esi
  00197	e8 00 00 00 00	 call	 _CheckFileStreamWriteErrors

; 8701 : 	fclose (f);

  0019c	56		 push	 esi
  0019d	e8 00 00 00 00	 call	 _fclose
  001a2	83 c4 14	 add	 esp, 20			; 00000014H

; 8702 : 
; 8703 : 	ShellExecute (NULL, (!IsAdmin() && IsUacSupported()) ? "runas" : "open", cmdBatch, NULL, NULL, SW_SHOW);

  001a5	e8 00 00 00 00	 call	 _IsAdmin
  001aa	85 c0		 test	 eax, eax
  001ac	75 0e		 jne	 SHORT $LN8@RemoveDevi
  001ae	e8 00 00 00 00	 call	 _IsUacSupported
  001b3	85 c0		 test	 eax, eax
  001b5	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05KPBLJGDL@runas?$AA@
  001ba	75 05		 jne	 SHORT $LN9@RemoveDevi
$LN8@RemoveDevi:
  001bc	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04PMOCAHAA@open?$AA@
$LN9@RemoveDevi:
  001c1	6a 05		 push	 5
  001c3	6a 00		 push	 0
  001c5	6a 00		 push	 0
  001c7	8d 54 24 1c	 lea	 edx, DWORD PTR _cmdBatch$[esp+1592]
  001cb	52		 push	 edx
  001cc	50		 push	 eax
  001cd	6a 00		 push	 0
  001cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24

; 8704 : 
; 8705 : 	return TRUE;
; 8706 : }

  001d5	8b 8c 24 28 06
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1580]
  001dc	5e		 pop	 esi
  001dd	5f		 pop	 edi
  001de	33 cc		 xor	 ecx, esp
  001e0	b8 01 00 00 00	 mov	 eax, 1
  001e5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ea	81 c4 24 06 00
	00		 add	 esp, 1572		; 00000624H
  001f0	c3		 ret	 0
_RemoveDeviceWriteProtection ENDP
_TEXT	ENDS
PUBLIC	_DisableFileCompression
; Function compile flags: /Ogtpy
;	COMDAT _DisableFileCompression
_TEXT	SEGMENT
_format$ = -8						; size = 2
_bytesOut$ = -4						; size = 4
_file$ = 8						; size = 4
_DisableFileCompression PROC				; COMDAT

; 8712 : {

  00000	83 ec 08	 sub	 esp, 8
  00003	56		 push	 esi

; 8713 : 	USHORT format;
; 8714 : 	DWORD bytesOut;
; 8715 : 
; 8716 : 	if (!DeviceIoControl (file, FSCTL_GET_COMPRESSION, NULL, 0, &format, sizeof (format), &bytesOut, NULL))

  00004	8b 74 24 10	 mov	 esi, DWORD PTR _file$[esp+8]
  00008	57		 push	 edi
  00009	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__DeviceIoControl@32
  0000f	6a 00		 push	 0
  00011	8d 44 24 10	 lea	 eax, DWORD PTR _bytesOut$[esp+20]
  00015	50		 push	 eax
  00016	6a 02		 push	 2
  00018	8d 4c 24 14	 lea	 ecx, DWORD PTR _format$[esp+28]
  0001c	51		 push	 ecx
  0001d	6a 00		 push	 0
  0001f	6a 00		 push	 0
  00021	68 3c 00 09 00	 push	 589884			; 0009003cH
  00026	56		 push	 esi
  00027	ff d7		 call	 edi
  00029	85 c0		 test	 eax, eax
  0002b	75 06		 jne	 SHORT $LN2@DisableFil
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi

; 8724 : }

  0002f	83 c4 08	 add	 esp, 8
  00032	c3		 ret	 0
$LN2@DisableFil:

; 8717 : 		return FALSE;
; 8718 : 
; 8719 : 	if (format == COMPRESSION_FORMAT_NONE)

  00033	66 83 7c 24 08
	00		 cmp	 WORD PTR _format$[esp+16], 0
  00039	75 0b		 jne	 SHORT $LN1@DisableFil
  0003b	5f		 pop	 edi

; 8720 : 		return TRUE;

  0003c	b8 01 00 00 00	 mov	 eax, 1
  00041	5e		 pop	 esi

; 8724 : }

  00042	83 c4 08	 add	 esp, 8
  00045	c3		 ret	 0
$LN1@DisableFil:

; 8721 : 
; 8722 : 	format = COMPRESSION_FORMAT_NONE;
; 8723 : 	return DeviceIoControl (file, FSCTL_SET_COMPRESSION, &format, sizeof (format), NULL, 0, &bytesOut, NULL); 

  00046	6a 00		 push	 0
  00048	8d 54 24 10	 lea	 edx, DWORD PTR _bytesOut$[esp+20]
  0004c	52		 push	 edx
  0004d	6a 00		 push	 0
  0004f	6a 00		 push	 0
  00051	6a 02		 push	 2
  00053	8d 44 24 1c	 lea	 eax, DWORD PTR _format$[esp+36]
  00057	50		 push	 eax
  00058	68 40 c0 09 00	 push	 639040			; 0009c040H
  0005d	56		 push	 esi
  0005e	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR _format$[esp+48], 0
  00066	ff d7		 call	 edi
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi

; 8724 : }

  0006a	83 c4 08	 add	 esp, 8
  0006d	c3		 ret	 0
_DisableFileCompression ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@HOCBKDMB@?2isoburn?4exe?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_IsWindowsIsoBurnerAvailable
;	COMDAT ??_C@_0N@HOCBKDMB@?2isoburn?4exe?$AA@
CONST	SEGMENT
??_C@_0N@HOCBKDMB@?2isoburn?4exe?$AA@ DB '\isoburn.exe', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _IsWindowsIsoBurnerAvailable
_TEXT	SEGMENT
_path$ = -524						; size = 520
__$ArrayPad$ = -4					; size = 4
_IsWindowsIsoBurnerAvailable PROC			; COMDAT

; 8750 : {

  00000	81 ec 0c 02 00
	00		 sub	 esp, 524		; 0000020cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 08 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+524], eax

; 8751 : 	char path[MAX_PATH*2] = { 0 };

  00014	68 07 02 00 00	 push	 519			; 00000207H
  00019	8d 44 24 05	 lea	 eax, DWORD PTR _path$[esp+529]
  0001d	6a 00		 push	 0
  0001f	50		 push	 eax
  00020	c6 44 24 0c 00	 mov	 BYTE PTR _path$[esp+536], 0
  00025	e8 00 00 00 00	 call	 _memset

; 8752 : 
; 8753 : 	if (!IsOSAtLeast (WIN_7))

  0002a	6a 0d		 push	 13			; 0000000dH
  0002c	e8 00 00 00 00	 call	 _IsOSAtLeast
  00031	83 c4 10	 add	 esp, 16			; 00000010H
  00034	85 c0		 test	 eax, eax

; 8754 : 	{
; 8755 : 		return FALSE;

  00036	74 66		 je	 SHORT $LN1@IsWindowsI

; 8756 : 	}
; 8757 : 
; 8758 : 	if (SUCCEEDED(SHGetFolderPath (NULL, CSIDL_SYSTEM, NULL, 0, path)))

  00038	8d 0c 24	 lea	 ecx, DWORD PTR _path$[esp+524]
  0003b	51		 push	 ecx
  0003c	6a 00		 push	 0
  0003e	6a 00		 push	 0
  00040	6a 25		 push	 37			; 00000025H
  00042	6a 00		 push	 0
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetFolderPathA@20
  0004a	85 c0		 test	 eax, eax
  0004c	7c 50		 jl	 SHORT $LN1@IsWindowsI

; 8759 : 	{
; 8760 : 		strcat (path, "\\" ISO_BURNER_TOOL);

  0004e	8d 04 24	 lea	 eax, DWORD PTR _path$[esp+524]
  00051	48		 dec	 eax
$LL5@IsWindowsI:
  00052	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00055	40		 inc	 eax
  00056	84 c9		 test	 cl, cl
  00058	75 f8		 jne	 SHORT $LL5@IsWindowsI
  0005a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0N@HOCBKDMB@?2isoburn?4exe?$AA@
  00060	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0N@HOCBKDMB@?2isoburn?4exe?$AA@+4
  00066	89 10		 mov	 DWORD PTR [eax], edx
  00068	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0N@HOCBKDMB@?2isoburn?4exe?$AA@+8
  0006e	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00071	8a 0d 0c 00 00
	00		 mov	 cl, BYTE PTR ??_C@_0N@HOCBKDMB@?2isoburn?4exe?$AA@+12
  00077	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 8761 : 
; 8762 : 		return (FileExists (path));

  0007a	8d 14 24	 lea	 edx, DWORD PTR _path$[esp+524]
  0007d	52		 push	 edx
  0007e	88 48 0c	 mov	 BYTE PTR [eax+12], cl
  00081	e8 00 00 00 00	 call	 _FileExists
  00086	83 c4 04	 add	 esp, 4

; 8763 : 	}
; 8764 : 
; 8765 : 	return FALSE;
; 8766 : }

  00089	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+524]
  00090	33 cc		 xor	 ecx, esp
  00092	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00097	81 c4 0c 02 00
	00		 add	 esp, 524		; 0000020cH
  0009d	c3		 ret	 0
$LN1@IsWindowsI:
  0009e	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+524]
  000a5	33 cc		 xor	 ecx, esp
  000a7	33 c0		 xor	 eax, eax
  000a9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ae	81 c4 0c 02 00
	00		 add	 esp, 524		; 0000020cH
  000b4	c3		 ret	 0
_IsWindowsIsoBurnerAvailable ENDP
_TEXT	ENDS
PUBLIC	?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length, COMDAT
; _this$ = ecx

; 1661 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1662 : 		}

  00003	c3		 ret	 0
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1666 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1667 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
; Function compile flags: /Ogtpy
;	COMDAT ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty, COMDAT
; _this$ = ecx

; 1705 : 		return (_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 14	 cmp	 DWORD PTR [ecx+20], eax
  00005	0f 94 c0	 sete	 al

; 1706 : 		}

  00008	c3		 ret	 0
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
_TEXT	ENDS
PUBLIC	?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length, COMDAT
; _this$ = ecx

; 1661 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1662 : 		}

  00003	c3		 ret	 0
?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
_TEXT	ENDS
PUBLIC	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size, COMDAT
; _this$ = ecx

; 1666 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1667 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
_TEXT	ENDS
PUBLIC	?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::empty
; Function compile flags: /Ogtpy
;	COMDAT ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::empty, COMDAT
; _this$ = ecx

; 1705 : 		return (_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 14	 cmp	 DWORD PTR [ecx+20], eax
  00005	0f 94 c0	 sete	 al

; 1706 : 		}

  00008	c3		 ret	 0
?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::empty
_TEXT	ENDS
PUBLIC	??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
PUBLIC	??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R13A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,0,4,64)'
EXTRN	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R13A@3EA@?$_Iosb@H@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
rdata$r	SEGMENT
??_R13A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,0,4,64)'
	DD	00H
	DD	04H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 63   : 		{	// destroy the object

  00000	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a fc 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@

; 64   : 		}

  0000e	c3		 ret	 0
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
; Function compile flags: /Ogtpy
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z
_TEXT	SEGMENT
__Pfn$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 184  : 		{	// call ios_base manipulator

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 185  : 		_DEBUG_POINTER(_Pfn);
; 186  : 		(*_Pfn)(*(ios_base *)this);

  00003	85 f6		 test	 esi, esi
  00005	75 10		 jne	 SHORT $LN3@operator@2
  00007	33 c0		 xor	 eax, eax
  00009	50		 push	 eax
  0000a	ff 54 24 0c	 call	 DWORD PTR __Pfn$[esp+4]
  0000e	83 c4 04	 add	 esp, 4

; 187  : 		return (*this);

  00011	8b c6		 mov	 eax, esi
  00013	5e		 pop	 esi

; 188  : 		}

  00014	c2 04 00	 ret	 4
$LN3@operator@2:

; 185  : 		_DEBUG_POINTER(_Pfn);
; 186  : 		(*_Pfn)(*(ios_base *)this);

  00017	8b 06		 mov	 eax, DWORD PTR [esi]
  00019	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001c	03 c6		 add	 eax, esi
  0001e	50		 push	 eax
  0001f	ff 54 24 0c	 call	 DWORD PTR __Pfn$[esp+4]
  00023	83 c4 04	 add	 esp, 4

; 187  : 		return (*this);

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi

; 188  : 		}

  00029	c2 04 00	 ret	 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
_TEXT	ENDS
PUBLIC	??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 39   : 		}

  00000	51		 push	 ecx
  00001	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00007	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
; Function compile flags: /Ogtpy
;	COMDAT ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::rdbuf, COMDAT
; _this$ = ecx

; 85   : 		return (_Mystrbuf);

  00000	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]

; 86   : 		}

  00003	c3		 ret	 0
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::rdbuf
_TEXT	ENDS
PUBLIC	??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::~basic_ostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::~basic_ostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 63   : 		{	// destroy the object

  00000	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a fc 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@

; 64   : 		}

  0000e	c3		 ret	 0
??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::~basic_ostream<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 39   : 		}

  00000	51		 push	 ecx
  00001	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00007	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::rdbuf
; Function compile flags: /Ogtpy
;	COMDAT ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
_TEXT	SEGMENT
?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::rdbuf, COMDAT
; _this$ = ecx

; 85   : 		return (_Mystrbuf);

  00000	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]

; 86   : 		}

  00003	c3		 ret	 0
?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::rdbuf
_TEXT	ENDS
PUBLIC	??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`vftable'
PUBLIC	??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a f8 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-8], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@

; 43   : 		}

  0000e	c3		 ret	 0
??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a f8 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-8], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@

; 43   : 		}

  0000e	c3		 ret	 0
??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	?size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::size, COMDAT
; _this$ = ecx

; 726  : 		return (_Mylast - _Myfirst);

  00000	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00003	2b 51 0c	 sub	 edx, DWORD PTR [ecx+12]
  00006	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0000b	f7 ea		 imul	 edx
  0000d	c1 fa 06	 sar	 edx, 6
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx

; 727  : 		}

  00017	c3		 ret	 0
?size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::empty
; Function compile flags: /Ogtpy
;	COMDAT ?empty@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::empty, COMDAT
; _this$ = ecx

; 736  : 		return (size() == 0);

  00000	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00003	2b 51 0c	 sub	 edx, DWORD PTR [ecx+12]
  00006	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0000b	f7 ea		 imul	 edx
  0000d	c1 fa 06	 sar	 edx, 6
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx
  00017	f7 d8		 neg	 eax
  00019	1b c0		 sbb	 eax, eax
  0001b	40		 inc	 eax

; 737  : 		}

  0001c	c3		 ret	 0
?empty@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@I@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::operator[]
EXTRN	__invalid_parameter_noinfo:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??A?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@I@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

  00003	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00006	2b 4e 0c	 sub	 ecx, DWORD PTR [esi+12]
  00009	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0000e	f7 e9		 imul	 ecx
  00010	c1 fa 06	 sar	 edx, 6
  00013	8b c2		 mov	 eax, edx
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	57		 push	 edi
  00019	8b 7c 24 0c	 mov	 edi, DWORD PTR __Pos$[esp+4]
  0001d	03 c2		 add	 eax, edx
  0001f	3b f8		 cmp	 edi, eax
  00021	72 05		 jb	 SHORT $LN3@operator@3
  00023	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@3:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

  00028	8b c7		 mov	 eax, edi
  0002a	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  00030	03 46 0c	 add	 eax, DWORD PTR [esi+12]
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi

; 786  : 		}

  00035	c2 04 00	 ret	 4
??A?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@I@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::operator[]
_TEXT	ENDS
PUBLIC	??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_iostream<char,std::char_traits<char> >::`vftable'
PUBLIC	??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_iostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (8,-1,0,64)'
EXTRN	??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_iostream<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	03H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	09H
	DD	FLAT:??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_iostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	0cH
	DD	00H
	DD	FLAT:??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_iostream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 918  : 		{	// destroy the object

  00000	8b 41 f4	 mov	 eax, DWORD PTR [ecx-12]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a f4 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-12], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@

; 919  : 		}

  0000e	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	c7 44 0a fc 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0001c	8b 41 f4	 mov	 eax, DWORD PTR [ecx-12]
  0001f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00022	c7 44 0a f4 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-12], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0002a	c3		 ret	 0
??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	?size@?$list@KV?$allocator@K@std@@@std@@QBEIXZ	; std::list<unsigned long,std::allocator<unsigned long> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?size@?$list@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$list@KV?$allocator@K@std@@@std@@QBEIXZ PROC	; std::list<unsigned long,std::allocator<unsigned long> >::size, COMDAT
; _this$ = ecx

; 620  : 		return (_Mysize);

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 621  : 		}

  00003	c3		 ret	 0
?size@?$list@KV?$allocator@K@std@@@std@@QBEIXZ ENDP	; std::list<unsigned long,std::allocator<unsigned long> >::size
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEABUHostDevice@@XZ ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEABUHostDevice@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEABUHostDevice@@XZ PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator*, COMDAT
; _this$ = ecx

; 91   : 		{	// return designated object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 92   : 
; 93   :  #if _HAS_ITERATOR_DEBUGGING
; 94   : 		if (this->_Mycont == 0
; 95   : 			|| _Myptr < ((_Myvec *)this->_Mycont)->_Myfirst
; 96   : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 97   : 			{
; 98   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 99   : 			_SCL_SECURE_OUT_OF_RANGE;
; 100  : 			}
; 101  :  #else
; 102  :  		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN19@operator@4
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 103  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN15@operator@4
$LN19@operator@4:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN16@operator@4
$LN15@operator@4:
  00018	33 c0		 xor	 eax, eax
$LN16@operator@4:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 0a		 jb	 SHORT $LN20@operator@4
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	5e		 pop	 esi

; 107  : 		}

  0002b	c3		 ret	 0
$LN20@operator@4:

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

  0002c	8b c1		 mov	 eax, ecx
  0002e	5e		 pop	 esi

; 107  : 		}

  0002f	c3		 ret	 0
??D?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEABUHostDevice@@XZ ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator*
_TEXT	ENDS
PUBLIC	??8const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::operator==
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 299  : 			{	// test for iterator equality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 300  : 
; 301  :  #if _HAS_ITERATOR_DEBUGGING
; 302  : 			if (this->_Mycont == 0 || this->_Mycont != _Right._Mycont)
; 303  : 				{
; 304  : 				_DEBUG_ERROR("map/set iterators incompatible");
; 305  : 				_SCL_SECURE_INVALID_ARGUMENT;
; 306  : 				}
; 307  :  #else
; 308  : 			_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN4@operator@5
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN3@operator@5
$LN4@operator@5:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@5:

; 309  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 310  : 
; 311  : 			return (_Ptr == _Right._Ptr);

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 94 c1	 sete	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 312  : 			}

  00026	c2 04 00	 ret	 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::operator==
_TEXT	ENDS
PUBLIC	??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (8,-1,0,64)'
EXTRN	??_E?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	03H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	09H
	DD	FLAT:??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	0cH
	DD	00H
	DD	FLAT:??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 918  : 		{	// destroy the object

  00000	8b 41 f4	 mov	 eax, DWORD PTR [ecx-12]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a f4 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-12], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@

; 919  : 		}

  0000e	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	c7 44 0a fc 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  0001c	8b 41 f4	 mov	 eax, DWORD PTR [ecx-12]
  0001f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00022	c7 44 0a f4 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-12], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0002a	c3		 ret	 0
??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??_Glocale@std@@QAEPAXI@Z			; std::locale::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_Glocale@std@@QAEPAXI@Z
_TEXT	SEGMENT
__Lock$152258 = -4					; size = 4
___flags$ = 8						; size = 4
??_Glocale@std@@QAEPAXI@Z PROC				; std::locale::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	8b d9		 mov	 ebx, ecx
  00004	57		 push	 edi
  00005	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00007	85 ff		 test	 edi, edi
  00009	74 3f		 je	 SHORT $LN7@scalar@6
  0000b	6a 00		 push	 0
  0000d	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$152258[esp+16]
  00011	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00016	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00019	85 c0		 test	 eax, eax
  0001b	76 09		 jbe	 SHORT $LN9@scalar@6
  0001d	83 f8 ff	 cmp	 eax, -1
  00020	73 04		 jae	 SHORT $LN9@scalar@6
  00022	48		 dec	 eax
  00023	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN9@scalar@6:
  00026	56		 push	 esi
  00027	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0002a	f7 de		 neg	 esi
  0002c	1b f6		 sbb	 esi, esi
  0002e	f7 d6		 not	 esi
  00030	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$152258[esp+16]
  00034	23 f7		 and	 esi, edi
  00036	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0003b	85 f6		 test	 esi, esi
  0003d	74 0a		 je	 SHORT $LN13@scalar@6
  0003f	8b 06		 mov	 eax, DWORD PTR [esi]
  00041	8b 10		 mov	 edx, DWORD PTR [eax]
  00043	6a 01		 push	 1
  00045	8b ce		 mov	 ecx, esi
  00047	ff d2		 call	 edx
$LN13@scalar@6:
  00049	5e		 pop	 esi
$LN7@scalar@6:
  0004a	f6 44 24 10 01	 test	 BYTE PTR ___flags$[esp+8], 1
  0004f	74 09		 je	 SHORT $LN12@scalar@6
  00051	53		 push	 ebx
  00052	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00057	83 c4 04	 add	 esp, 4
$LN12@scalar@6:
  0005a	5f		 pop	 edi
  0005b	8b c3		 mov	 eax, ebx
  0005d	5b		 pop	 ebx
  0005e	59		 pop	 ecx
  0005f	c2 04 00	 ret	 4
??_Glocale@std@@QAEPAXI@Z ENDP				; std::locale::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00011	50		 push	 eax
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00018	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  00011	50		 push	 eax
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00018	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00003	8b 48 f8	 mov	 ecx, DWORD PTR [eax-8]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 f8 00
	00 00 00	 mov	 DWORD PTR [edx+eax-8], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00011	50		 push	 eax
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00018	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00003	8b 48 f8	 mov	 ecx, DWORD PTR [eax-8]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 f8 00
	00 00 00	 mov	 DWORD PTR [edx+eax-8], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00011	50		 push	 eax
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00018	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_iostream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_iostream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00003	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  00011	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0001f	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00022	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00025	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0002d	50		 push	 eax
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00034	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00039	59		 pop	 ecx
  0003a	c3		 ret	 0
??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_iostream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00003	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
  00011	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  0001f	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00022	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00025	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0002d	50		 push	 eax
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00034	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00039	59		 pop	 ecx
  0003a	c3		 ret	 0
??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  00009	c3		 ret	 0
$LN3@Myptr:

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@2:

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN3@Myptr@3
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@3:

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@_W@std@@QAE@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@_W@std@@QAE@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@_W@std@@QAE@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z	; std::allocator<wchar_t>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
PUBLIC	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
_TEXT	SEGMENT
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ PROC ; std::basic_ios<char,std::char_traits<char> >::fill, COMDAT
; _this$ = ecx

; 106  : 		return (_Fillch);

  00000	8a 41 30	 mov	 al, BYTE PTR [ecx+48]

; 107  : 		}

  00003	c3		 ret	 0
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ENDP ; std::basic_ios<char,std::char_traits<char> >::fill
_TEXT	ENDS
PUBLIC	??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
PUBLIC	??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
EXTRN	??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ios<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
rdata$r	SEGMENT
??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
CONST	ENDS
;	COMDAT ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 146  : 	__CLR_OR_THIS_CALL basic_ios()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@

; 147  : 		{	// default constructor, do nothing
; 148  : 		}

  00008	c3		 ret	 0
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	56		 push	 esi
  00004	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0000a	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000f	83 c4 04	 add	 esp, 4
  00012	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00017	74 09		 je	 SHORT $LN9@scalar@7
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	83 c4 04	 add	 esp, 4
$LN9@scalar@7:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c2 04 00	 ret	 4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::basic_ios<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
EXTRN	??_E?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
rdata$r	SEGMENT
??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
CONST	ENDS
;	COMDAT ??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::basic_ios<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 146  : 	__CLR_OR_THIS_CALL basic_ios()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@

; 147  : 		{	// default constructor, do nothing
; 148  : 		}

  00008	c3		 ret	 0
??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::basic_ios<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	56		 push	 esi
  00004	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0000a	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000f	83 c4 04	 add	 esp, 4
  00012	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00017	74 09		 je	 SHORT $LN9@scalar@8
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	83 c4 04	 add	 esp, 4
$LN9@scalar@8:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c2 04 00	 ret	 4
??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pubsync, COMDAT
; _this$ = ecx

; 100  : 		return (sync());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00005	ff e2		 jmp	 edx
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
_TEXT	ENDS
PUBLIC	?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
EXTRN	?_Unlock@_Mutex@std@@QAEXXZ:PROC		; std::_Mutex::_Unlock
; Function compile flags: /Ogtpy
;	COMDAT ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 178  : 		_Mylock._Unlock();

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
PUBLIC	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
; Function compile flags: /Ogtpy
;	COMDAT ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::eback, COMDAT
; _this$ = ecx

; 185  : 		return (*_IGfirst);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 186  : 		}

  00005	c3		 ret	 0
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::eback
_TEXT	ENDS
PUBLIC	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
; Function compile flags: /Ogtpy
;	COMDAT ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::gptr, COMDAT
; _this$ = ecx

; 190  : 		return (*_IGnext);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 191  : 		}

  00005	c3		 ret	 0
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gptr
_TEXT	ENDS
PUBLIC	?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pbase
; Function compile flags: /Ogtpy
;	COMDAT ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbase, COMDAT
; _this$ = ecx

; 195  : 		return (*_IPfirst);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 196  : 		}

  00005	c3		 ret	 0
?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbase
_TEXT	ENDS
PUBLIC	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
; Function compile flags: /Ogtpy
;	COMDAT ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pptr, COMDAT
; _this$ = ecx

; 200  : 		return (*_IPnext);

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 201  : 		}

  00005	c3		 ret	 0
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pptr
_TEXT	ENDS
PUBLIC	?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
; Function compile flags: /Ogtpy
;	COMDAT ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::egptr, COMDAT
; _this$ = ecx

; 205  : 		return (*_IGnext + *_IGcount);

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	03 01		 add	 eax, DWORD PTR [ecx]

; 206  : 		}

  0000a	c3		 ret	 0
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::egptr
_TEXT	ENDS
PUBLIC	?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg
; Function compile flags: /Ogtpy
;	COMDAT ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setg, COMDAT
; _this$ = ecx

; 216  : 		*_IGfirst = _First;

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00007	89 10		 mov	 DWORD PTR [eax], edx

; 217  : 		*_IGnext = _Next;

  00009	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __Next$[esp-4]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 218  : 		*_IGcount = (int)(_Last - _Next);

  00012	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp-4]
  00016	2b d0		 sub	 edx, eax
  00018	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0001b	89 10		 mov	 DWORD PTR [eax], edx

; 219  : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setg
_TEXT	ENDS
PUBLIC	?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
; Function compile flags: /Ogtpy
;	COMDAT ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::epptr, COMDAT
; _this$ = ecx

; 223  : 		return (*_IPnext + *_IPcount);

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	03 01		 add	 eax, DWORD PTR [ecx]

; 224  : 		}

  0000a	c3		 ret	 0
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::epptr
_TEXT	ENDS
PUBLIC	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
; Function compile flags: /Ogtpy
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT
; _this$ = ecx

; 257  : 		*_IPfirst = _First;

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00007	89 02		 mov	 DWORD PTR [edx], eax

; 258  : 		*_IPnext = _First;

  00009	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 259  : 		*_IPcount = (int)(_Last - _First);

  0000e	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00012	2b d0		 sub	 edx, eax
  00014	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00017	89 10		 mov	 DWORD PTR [eax], edx

; 260  : 		}

  00019	c2 08 00	 ret	 8
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
_TEXT	ENDS
PUBLIC	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
; Function compile flags: /Ogtpy
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT
; _this$ = ecx

; 264  : 		*_IPfirst = _First;

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00007	89 10		 mov	 DWORD PTR [eax], edx

; 265  : 		*_IPnext = _Next;

  00009	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __Next$[esp-4]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 266  : 		*_IPcount = (int)(_Last - _Next);

  00012	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp-4]
  00016	2b d0		 sub	 edx, eax
  00018	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0001b	89 10		 mov	 DWORD PTR [eax], edx

; 267  : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
_TEXT	ENDS
PUBLIC	?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
; Function compile flags: /Ogtpy
;	COMDAT ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc, COMDAT
; _this$ = ecx

; 271  : 		--*_IPcount;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 272  : 		return ((*_IPnext)++);

  00005	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 273  : 		}

  0000f	c3		 ret	 0
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
_TEXT	ENDS
PUBLIC	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
; Function compile flags: /Ogtpy
;	COMDAT ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ
_TEXT	SEGMENT
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail, COMDAT
; _this$ = ecx

; 277  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 06		 je	 SHORT $LN3@Pnavail
  00008	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 278  : 		}

  0000d	c3		 ret	 0
$LN3@Pnavail:

; 277  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  0000e	33 c0		 xor	 eax, eax

; 278  : 		}

  00010	c3		 ret	 0
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
_TEXT	ENDS
PUBLIC	?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pubsync
; Function compile flags: /Ogtpy
;	COMDAT ?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ
_TEXT	SEGMENT
?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pubsync, COMDAT
; _this$ = ecx

; 100  : 		return (sync());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00005	ff e2		 jmp	 edx
?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pubsync
_TEXT	ENDS
PUBLIC	?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Unlock
; Function compile flags: /Ogtpy
;	COMDAT ?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Unlock, COMDAT
; _this$ = ecx

; 178  : 		_Mylock._Unlock();

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Unlock
_TEXT	ENDS
PUBLIC	?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::eback
; Function compile flags: /Ogtpy
;	COMDAT ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::eback, COMDAT
; _this$ = ecx

; 185  : 		return (*_IGfirst);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 186  : 		}

  00005	c3		 ret	 0
?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::eback
_TEXT	ENDS
PUBLIC	?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gptr
; Function compile flags: /Ogtpy
;	COMDAT ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gptr, COMDAT
; _this$ = ecx

; 190  : 		return (*_IGnext);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 191  : 		}

  00005	c3		 ret	 0
?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gptr
_TEXT	ENDS
PUBLIC	?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbase
; Function compile flags: /Ogtpy
;	COMDAT ?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbase, COMDAT
; _this$ = ecx

; 195  : 		return (*_IPfirst);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 196  : 		}

  00005	c3		 ret	 0
?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbase
_TEXT	ENDS
PUBLIC	?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pptr
; Function compile flags: /Ogtpy
;	COMDAT ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pptr, COMDAT
; _this$ = ecx

; 200  : 		return (*_IPnext);

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 201  : 		}

  00005	c3		 ret	 0
?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pptr
_TEXT	ENDS
PUBLIC	?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::egptr
; Function compile flags: /Ogtpy
;	COMDAT ?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::egptr, COMDAT
; _this$ = ecx

; 205  : 		return (*_IGnext + *_IGcount);

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00008	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000a	8d 04 51	 lea	 eax, DWORD PTR [ecx+edx*2]

; 206  : 		}

  0000d	c3		 ret	 0
?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::egptr
_TEXT	ENDS
PUBLIC	?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setg
; Function compile flags: /Ogtpy
;	COMDAT ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setg, COMDAT
; _this$ = ecx

; 216  : 		*_IGfirst = _First;

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00007	89 10		 mov	 DWORD PTR [eax], edx

; 217  : 		*_IGnext = _Next;

  00009	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __Next$[esp-4]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 218  : 		*_IGcount = (int)(_Last - _Next);

  00012	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp-4]
  00016	2b d0		 sub	 edx, eax
  00018	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0001b	d1 fa		 sar	 edx, 1
  0001d	89 10		 mov	 DWORD PTR [eax], edx

; 219  : 		}

  0001f	c2 0c 00	 ret	 12			; 0000000cH
?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setg
_TEXT	ENDS
PUBLIC	?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::epptr
; Function compile flags: /Ogtpy
;	COMDAT ?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::epptr, COMDAT
; _this$ = ecx

; 223  : 		return (*_IPnext + *_IPcount);

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00008	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000a	8d 04 51	 lea	 eax, DWORD PTR [ecx+edx*2]

; 224  : 		}

  0000d	c3		 ret	 0
?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::epptr
_TEXT	ENDS
PUBLIC	?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp
; Function compile flags: /Ogtpy
;	COMDAT ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp, COMDAT
; _this$ = ecx

; 257  : 		*_IPfirst = _First;

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00007	89 02		 mov	 DWORD PTR [edx], eax

; 258  : 		*_IPnext = _First;

  00009	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 259  : 		*_IPcount = (int)(_Last - _First);

  0000e	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00012	2b d0		 sub	 edx, eax
  00014	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00017	d1 fa		 sar	 edx, 1
  00019	89 10		 mov	 DWORD PTR [eax], edx

; 260  : 		}

  0001b	c2 08 00	 ret	 8
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp
_TEXT	ENDS
PUBLIC	?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp
; Function compile flags: /Ogtpy
;	COMDAT ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp, COMDAT
; _this$ = ecx

; 264  : 		*_IPfirst = _First;

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00007	89 10		 mov	 DWORD PTR [eax], edx

; 265  : 		*_IPnext = _Next;

  00009	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __Next$[esp-4]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 266  : 		*_IPcount = (int)(_Last - _Next);

  00012	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp-4]
  00016	2b d0		 sub	 edx, eax
  00018	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0001b	d1 fa		 sar	 edx, 1
  0001d	89 10		 mov	 DWORD PTR [eax], edx

; 267  : 		}

  0001f	c2 0c 00	 ret	 12			; 0000000cH
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp
_TEXT	ENDS
PUBLIC	?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pninc
; Function compile flags: /Ogtpy
;	COMDAT ?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ
_TEXT	SEGMENT
?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pninc, COMDAT
; _this$ = ecx

; 271  : 		--*_IPcount;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 272  : 		return ((*_IPnext)++);

  00005	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 273  : 		}

  0000f	c3		 ret	 0
?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pninc
_TEXT	ENDS
PUBLIC	?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail
; Function compile flags: /Ogtpy
;	COMDAT ?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ
_TEXT	SEGMENT
?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail, COMDAT
; _this$ = ecx

; 277  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 06		 je	 SHORT $LN3@Pnavail@2
  00008	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 278  : 		}

  0000d	c3		 ret	 0
$LN3@Pnavail@2:

; 277  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  0000e	33 c0		 xor	 eax, eax

; 278  : 		}

  00010	c3		 ret	 0
?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::capacity
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::capacity, COMDAT
; _this$ = ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	85 c0		 test	 eax, eax
  00005	75 01		 jne	 SHORT $LN3@capacity

; 636  : 		}

  00007	c3		 ret	 0
$LN3@capacity:

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00008	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0000b	2b c8		 sub	 ecx, eax
  0000d	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00012	f7 e9		 imul	 ecx
  00014	c1 fa 06	 sar	 edx, 6
  00017	8b c2		 mov	 eax, edx
  00019	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001c	03 c2		 add	 eax, edx

; 636  : 		}

  0001e	c3		 ret	 0
?capacity@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::capacity
_TEXT	ENDS
PUBLIC	??0?$allocator@UHostDevice@@@std@@QAE@XZ	; std::allocator<HostDevice>::allocator<HostDevice>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UHostDevice@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UHostDevice@@@std@@QAE@XZ PROC		; std::allocator<HostDevice>::allocator<HostDevice>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@UHostDevice@@@std@@QAE@XZ ENDP		; std::allocator<HostDevice>::allocator<HostDevice>
_TEXT	ENDS
PUBLIC	??0?$allocator@UHostDevice@@@std@@QAE@ABV01@@Z	; std::allocator<HostDevice>::allocator<HostDevice>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@UHostDevice@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UHostDevice@@@std@@QAE@ABV01@@Z PROC	; std::allocator<HostDevice>::allocator<HostDevice>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UHostDevice@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<HostDevice>::allocator<HostDevice>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@I@Z ; std::allocator<HostDevice>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@I@Z PROC ; std::allocator<HostDevice>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@I@Z ENDP ; std::allocator<HostDevice>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@K@std@@QAE@XZ			; std::allocator<unsigned long>::allocator<unsigned long>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@K@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@K@std@@QAE@XZ PROC			; std::allocator<unsigned long>::allocator<unsigned long>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@K@std@@QAE@XZ ENDP			; std::allocator<unsigned long>::allocator<unsigned long>
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 300  : 		{	// discard any allocated buffer and clear pointers

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 301  : 		if (_Mystate & _Allocated)

  00003	f6 46 40 01	 test	 BYTE PTR [esi+64], 1
  00007	74 0e		 je	 SHORT $LN16@Tidy

; 302  : 			_Al.deallocate(_Mysb::eback(),
; 303  : 				(_Mysb::pptr() != 0 ? _Mysb::epptr()
; 304  : 					: _Mysb::egptr()) - _Mysb::eback());

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
$LN16@Tidy:

; 305  : 		_Mysb::setg(0, 0, 0);

  00017	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0001a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00020	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00023	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00029	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0002c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 306  : 		_Mysb::setp(0, 0);

  00032	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00035	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0003b	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0003e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00044	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00047	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 307  : 		_Seekhigh = 0;
; 308  : 		_Mystate &= ~_Allocated;

  0004d	83 66 40 fe	 and	 DWORD PTR [esi+64], -2	; fffffffeH
  00051	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00058	5e		 pop	 esi

; 309  : 		}

  00059	c3		 ret	 0
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Myval@?$list@KV?$allocator@K@std@@@std@@KAAAKPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Myval
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Myval@?$list@KV?$allocator@K@std@@@std@@KAAAKPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$list@KV?$allocator@K@std@@@std@@KAAAKPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Myval, COMDAT

; 125  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 126  : 		}

  00007	c3		 ret	 0
?_Myval@?$list@KV?$allocator@K@std@@@std@@KAAAKPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Myval
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@std@@QAE@XZ ; std::allocator<std::pair<int const ,HostDevice> >::allocator<std::pair<int const ,HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@std@@QAE@XZ PROC ; std::allocator<std::pair<int const ,HostDevice> >::allocator<std::pair<int const ,HostDevice> >, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<int const ,HostDevice> >::allocator<std::pair<int const ,HostDevice> >
_TEXT	ENDS
PUBLIC	??R?$less@H@std@@QBE_NABH0@Z			; std::less<int>::operator()
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\functional
;	COMDAT ??R?$less@H@std@@QBE_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@H@std@@QBE_NABH0@Z PROC			; std::less<int>::operator(), COMDAT
; _this$ = ecx

; 143  : 		return (_Left < _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000a	33 c0		 xor	 eax, eax
  0000c	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0000e	0f 9c c0	 setl	 al

; 144  : 		}

  00011	c2 08 00	 ret	 8
??R?$less@H@std@@QBE_NABH0@Z ENDP			; std::less<int>::operator()
_TEXT	ENDS
PUBLIC	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::_Mynode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@3@XZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::_Mynode, COMDAT
; _this$ = ecx

; 410  : 			return (_Ptr);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 411  : 			}

  00003	c3		 ret	 0
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@3@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::_Mynode
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx

; 300  : 		{	// discard any allocated buffer and clear pointers

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 301  : 		if (_Mystate & _Allocated)

  00003	f6 46 40 01	 test	 BYTE PTR [esi+64], 1
  00007	74 0e		 je	 SHORT $LN16@Tidy@2

; 302  : 			_Al.deallocate(_Mysb::eback(),
; 303  : 				(_Mysb::pptr() != 0 ? _Mysb::epptr()
; 304  : 					: _Mysb::egptr()) - _Mysb::eback());

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
$LN16@Tidy@2:

; 305  : 		_Mysb::setg(0, 0, 0);

  00017	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0001a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00020	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00023	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00029	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0002c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 306  : 		_Mysb::setp(0, 0);

  00032	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00035	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0003b	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0003e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00044	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00047	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 307  : 		_Seekhigh = 0;
; 308  : 		_Mystate &= ~_Allocated;

  0004d	83 66 40 fe	 and	 DWORD PTR [esi+64], -2	; fffffffeH
  00051	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00058	5e		 pop	 esi

; 309  : 		}

  00059	c3		 ret	 0
?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 116  : 			return (_Ok);

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]

; 117  : 			}

  00003	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
PUBLIC	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 1079 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00000	8b 54 24 18	 mov	 edx, DWORD PTR __Val$[esp-4]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00009	56		 push	 esi
  0000a	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  0000e	52		 push	 edx
  0000f	8b 54 24 1c	 mov	 edx, DWORD PTR __Fill$[esp+4]
  00013	52		 push	 edx
  00014	8b 54 24 1c	 mov	 edx, DWORD PTR __Iosbase$[esp+8]
  00018	52		 push	 edx
  00019	8b 54 24 1c	 mov	 edx, DWORD PTR __Dest$[esp+16]
  0001d	52		 push	 edx
  0001e	8b 54 24 1c	 mov	 edx, DWORD PTR __Dest$[esp+16]
  00022	52		 push	 edx
  00023	56		 push	 esi
  00024	ff d0		 call	 eax
  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi

; 1080 : 		}

  00029	c2 18 00	 ret	 24			; 00000018H
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
PUBLIC	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
; Function compile flags: /Ogtpy
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 1085 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00000	8b 54 24 18	 mov	 edx, DWORD PTR __Val$[esp-4]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00009	56		 push	 esi
  0000a	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  0000e	52		 push	 edx
  0000f	8b 54 24 1c	 mov	 edx, DWORD PTR __Fill$[esp+4]
  00013	52		 push	 edx
  00014	8b 54 24 1c	 mov	 edx, DWORD PTR __Iosbase$[esp+8]
  00018	52		 push	 edx
  00019	8b 54 24 1c	 mov	 edx, DWORD PTR __Dest$[esp+16]
  0001d	52		 push	 edx
  0001e	8b 54 24 1c	 mov	 edx, DWORD PTR __Dest$[esp+16]
  00022	52		 push	 edx
  00023	56		 push	 esi
  00024	ff d0		 call	 eax
  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi

; 1086 : 		}

  00029	c2 18 00	 ret	 24			; 00000018H
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
PUBLIC	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
; Function compile flags: /Ogtpy
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 1098 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00000	8b 54 24 1c	 mov	 edx, DWORD PTR __Val$[esp]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00009	56		 push	 esi
  0000a	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  0000e	52		 push	 edx
  0000f	8b 54 24 20	 mov	 edx, DWORD PTR __Val$[esp+4]
  00013	52		 push	 edx
  00014	8b 54 24 20	 mov	 edx, DWORD PTR __Fill$[esp+8]
  00018	52		 push	 edx
  00019	8b 54 24 20	 mov	 edx, DWORD PTR __Iosbase$[esp+12]
  0001d	52		 push	 edx
  0001e	8b 54 24 20	 mov	 edx, DWORD PTR __Dest$[esp+20]
  00022	52		 push	 edx
  00023	8b 54 24 20	 mov	 edx, DWORD PTR __Dest$[esp+20]
  00027	52		 push	 edx
  00028	56		 push	 esi
  00029	ff d0		 call	 eax
  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi

; 1099 : 		}

  0002e	c2 1c 00	 ret	 28			; 0000001cH
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
PUBLIC	??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
_TEXT	SEGMENT
__Sb$ = 8						; size = 4
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 583  : 		{	// construct from stream buffer _Sb

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Sb$[esp-4]
  00006	c6 00 00	 mov	 BYTE PTR [eax], 0
  00009	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 584  : 		}

  0000c	c2 04 00	 ret	 4
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
; Function compile flags: /Ogtpy
;	COMDAT ?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed, COMDAT
; _this$ = ecx

; 617  : 		return (_Failed);

  00000	8a 01		 mov	 al, BYTE PTR [ecx]

; 618  : 		}

  00002	c3		 ret	 0
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
_TEXT	ENDS
PUBLIC	??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 116  : 			return (_Ok);

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]

; 117  : 			}

  00003	c3		 ret	 0
??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
_TEXT	ENDS
PUBLIC	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign, COMDAT
; _this$ = ecx

; 2076 : 		if (_Count == 1)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	83 f8 01	 cmp	 eax, 1
  00007	75 28		 jne	 SHORT $LN2@Chassign

; 2077 : 			_Traits::assign(*(_Myptr() + _Off), _Ch);

  00009	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  0000d	72 11		 jb	 SHORT $LN7@Chassign
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	8a 44 24 0c	 mov	 al, BYTE PTR __Ch$[esp-4]
  00016	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  0001a	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 2080 : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH

; 2077 : 			_Traits::assign(*(_Myptr() + _Off), _Ch);

$LN7@Chassign:
  00020	8a 44 24 0c	 mov	 al, BYTE PTR __Ch$[esp-4]
  00024	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00028	83 c1 04	 add	 ecx, 4
  0002b	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 2080 : 		}

  0002e	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Chassign:

; 2078 : 		else
; 2079 : 			_Traits::assign(_Myptr() + _Off, _Count, _Ch);

  00031	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00035	72 05		 jb	 SHORT $LN13@Chassign
  00037	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0003a	eb 03		 jmp	 SHORT $LN14@Chassign
$LN13@Chassign:
  0003c	83 c1 04	 add	 ecx, 4
$LN14@Chassign:
  0003f	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00043	50		 push	 eax
  00044	0f be 44 24 10	 movsx	 eax, BYTE PTR __Ch$[esp]
  00049	50		 push	 eax
  0004a	03 ca		 add	 ecx, edx
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 _memset
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2080 : 		}

  00055	c2 0c 00	 ret	 12			; 0000000cH
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogtpy
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2133 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2134 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 2c		 je	 SHORT $LN2@Inside
  0000a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0000d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00010	83 fe 10	 cmp	 esi, 16			; 00000010H
  00013	72 04		 jb	 SHORT $LN8@Inside
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN9@Inside
$LN8@Inside:
  00019	8b d0		 mov	 edx, eax
$LN9@Inside:
  0001b	3b fa		 cmp	 edi, edx
  0001d	72 17		 jb	 SHORT $LN2@Inside
  0001f	83 fe 10	 cmp	 esi, 16			; 00000010H
  00022	72 02		 jb	 SHORT $LN12@Inside
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@Inside:
  00026	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00029	03 c8		 add	 ecx, eax
  0002b	3b cf		 cmp	 ecx, edi
  0002d	76 07		 jbe	 SHORT $LN2@Inside
  0002f	5f		 pop	 edi

; 2136 : 		else
; 2137 : 			return (true);

  00030	b0 01		 mov	 al, 1
  00032	5e		 pop	 esi

; 2138 : 		}

  00033	c2 04 00	 ret	 4
$LN2@Inside:
  00036	5f		 pop	 edi

; 2135 : 			return (false);	// don't ask

  00037	32 c0		 xor	 al, al
  00039	5e		 pop	 esi

; 2138 : 		}

  0003a	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN3@Myptr@4
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@4:

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@_W@std@@QAE@ABV01@@Z		; std::allocator<wchar_t>::allocator<wchar_t>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@_W@std@@QAE@ABV01@@Z PROC		; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@_W@std@@QAE@ABV01@@Z ENDP		; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
PUBLIC	??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
EXTRN	?_Addstd@ios_base@std@@SAXPAV12@@Z:PROC		; std::ios_base::_Addstd
;	COMDAT ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
	DD	04H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z$0
__ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
_TEXT	SEGMENT
$T152649 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
__Addit$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 56   : 	__CLR_OR_THIS_CALL basic_ostream(_Uninitialized, bool _Addit = true)

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0002a	33 c0		 xor	 eax, eax
  0002c	89 44 24 08	 mov	 DWORD PTR $T152649[esp+28], eax
  00030	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+24], eax
  00034	74 19		 je	 SHORT $LN2@basic_ostr
  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
  0003c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  00043	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  00047	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR $T152649[esp+28], 1
$LN2@basic_ostr:
  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00054	c7 04 16 00 00
	00 00		 mov	 DWORD PTR [esi+edx], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@

; 57   : 		{	// construct uninitialized
; 58   : 		if (_Addit)

  0005b	38 44 24 24	 cmp	 BYTE PTR __Addit$[esp+24], al
  0005f	74 10		 je	 SHORT $LN13@basic_ostr

; 59   : 			ios_base::_Addstd(this);	// suppress for basic_iostream

  00061	8b 06		 mov	 eax, DWORD PTR [esi]
  00063	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00066	03 c6		 add	 eax, esi
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  0006e	83 c4 04	 add	 esp, 4
$LN13@basic_ostr:

; 60   : 		}

  00071	8b c6		 mov	 eax, esi
  00073	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5e		 pop	 esi
  00080	83 c4 14	 add	 esp, 20			; 00000014H
  00083	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T152649[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN8@basic_ostr
  0000c	83 65 ec fe	 and	 DWORD PTR $T152649[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 04	 add	 ecx, 4
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN8@basic_ostr:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
PUBLIC	?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::tie, COMDAT
; _this$ = ecx

; 73   : 		return (_Tiestr);

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]

; 74   : 		}

  00003	c3		 ret	 0
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::tie
_TEXT	ENDS
PUBLIC	??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::basic_ostream<wchar_t,std::char_traits<wchar_t> >
;	COMDAT ??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@ DD 00H ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	04H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z$0
__ehfuncinfo$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
_TEXT	SEGMENT
$T152674 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
__Addit$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::basic_ostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 56   : 	__CLR_OR_THIS_CALL basic_ostream(_Uninitialized, bool _Addit = true)

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0002a	33 c0		 xor	 eax, eax
  0002c	89 44 24 08	 mov	 DWORD PTR $T152674[esp+28], eax
  00030	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+24], eax
  00034	74 19		 je	 SHORT $LN2@basic_ostr@2
  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@
  0003c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  00043	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  00047	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR $T152674[esp+28], 1
$LN2@basic_ostr@2:
  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00054	c7 04 16 00 00
	00 00		 mov	 DWORD PTR [esi+edx], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@

; 57   : 		{	// construct uninitialized
; 58   : 		if (_Addit)

  0005b	38 44 24 24	 cmp	 BYTE PTR __Addit$[esp+24], al
  0005f	74 10		 je	 SHORT $LN13@basic_ostr@2

; 59   : 			ios_base::_Addstd(this);	// suppress for basic_iostream

  00061	8b 06		 mov	 eax, DWORD PTR [esi]
  00063	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00066	03 c6		 add	 eax, esi
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  0006e	83 c4 04	 add	 esp, 4
$LN13@basic_ostr@2:

; 60   : 		}

  00071	8b c6		 mov	 eax, esi
  00073	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5e		 pop	 esi
  00080	83 c4 14	 add	 esp, 20			; 00000014H
  00083	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T152674[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN8@basic_ostr@2
  0000c	83 65 ec fe	 and	 DWORD PTR $T152674[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 04	 add	 ecx, 4
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN8@basic_ostr@2:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::basic_ostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::tie
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ
_TEXT	SEGMENT
?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::tie, COMDAT
; _this$ = ecx

; 73   : 		return (_Tiestr);

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]

; 74   : 		}

  00003	c3		 ret	 0
?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::tie
_TEXT	ENDS
PUBLIC	?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
EXTRN	?_Lock@_Mutex@std@@QAEXXZ:PROC			; std::_Mutex::_Lock
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 173  : 		_Mylock._Lock();

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
PUBLIC	?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Lock
; Function compile flags: /Ogtpy
;	COMDAT ?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Lock, COMDAT
; _this$ = ecx

; 173  : 		_Mylock._Lock();

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Lock
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@K@std@@QAE@ABV01@@Z		; std::allocator<unsigned long>::allocator<unsigned long>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@K@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@K@std@@QAE@ABV01@@Z PROC			; std::allocator<unsigned long>::allocator<unsigned long>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@K@std@@QAE@ABV01@@Z ENDP			; std::allocator<unsigned long>::allocator<unsigned long>
_TEXT	ENDS
PUBLIC	?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z
_TEXT	SEGMENT
__Mode$ = 8						; size = 4
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate, COMDAT
; _this$ = ecx

; 318  : 		_Strstate _State = (_Strstate)0;
; 319  : 		if (!(_Mode & ios_base::in))

  00000	8a 4c 24 04	 mov	 cl, BYTE PTR __Mode$[esp-4]
  00004	33 c0		 xor	 eax, eax
  00006	f6 c1 01	 test	 cl, 1
  00009	75 05		 jne	 SHORT $LN4@Getstate

; 320  : 			_State |= _Noread;

  0000b	b8 04 00 00 00	 mov	 eax, 4
$LN4@Getstate:

; 321  : 		if (!(_Mode & ios_base::out))

  00010	f6 c1 02	 test	 cl, 2
  00013	75 03		 jne	 SHORT $LN3@Getstate

; 322  : 			_State |= _Constant;

  00015	83 c8 02	 or	 eax, 2
$LN3@Getstate:

; 323  : 		if (_Mode & ios_base::app)

  00018	f6 c1 08	 test	 cl, 8
  0001b	74 03		 je	 SHORT $LN2@Getstate

; 324  : 			_State |= _Append;

  0001d	83 c8 08	 or	 eax, 8
$LN2@Getstate:

; 325  : 		if (_Mode & ios_base::ate)

  00020	f6 c1 04	 test	 cl, 4
  00023	74 03		 je	 SHORT $LN1@Getstate

; 326  : 			_State |= _Atend;

  00025	83 c8 10	 or	 eax, 16			; 00000010H
$LN1@Getstate:

; 327  : 		return (_State);
; 328  : 		}

  00028	c2 04 00	 ret	 4
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
_TEXT	ENDS
PUBLIC	?_Nextnode@?$list@KV?$allocator@K@std@@@std@@KAAAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Nextnode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Nextnode@?$list@KV?$allocator@K@std@@@std@@KAAAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$list@KV?$allocator@K@std@@@std@@KAAAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Nextnode, COMDAT

; 115  : 		return ((_Nodepref)(*_Pnode)._Next);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 116  : 		}

  00004	c3		 ret	 0
?_Nextnode@?$list@KV?$allocator@K@std@@@std@@KAAAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Prevnode@?$list@KV?$allocator@K@std@@@std@@KAAAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Prevnode
; Function compile flags: /Ogtpy
;	COMDAT ?_Prevnode@?$list@KV?$allocator@K@std@@@std@@KAAAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$list@KV?$allocator@K@std@@@std@@KAAAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Prevnode, COMDAT

; 120  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 121  : 		}

  00007	c3		 ret	 0
?_Prevnode@?$list@KV?$allocator@K@std@@@std@@KAAAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Prevnode
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@I@Z ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::deallocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??8?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator==
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??8?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator==, COMDAT
; _this$ = ecx

; 290  : 			{	// test for iterator equality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 291  : 
; 292  :  #if _HAS_ITERATOR_DEBUGGING
; 293  : 			_Compat(_Right);
; 294  :  #else
; 295  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN4@operator@6
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN3@operator@6
$LN4@operator@6:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@6:

; 296  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 297  : 
; 298  : 			return (_Ptr == _Right._Ptr);

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 94 c1	 sete	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 299  : 			}

  00026	c2 04 00	 ret	 4
??8?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@3@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::_Mynode
; Function compile flags: /Ogtpy
;	COMDAT ?_Mynode@?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@3@XZ PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::_Mynode, COMDAT
; _this$ = ecx

; 308  : 			return (_Ptr);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 309  : 			}

  00003	c3		 ret	 0
?_Mynode@?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@3@XZ ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::_Mynode
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator-
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??G?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator-, COMDAT
; _this$ = ecx

; 186  : 		{	// return difference of iterators

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 187  : 
; 188  :  #if _HAS_ITERATOR_DEBUGGING
; 189  : 		_Compat(_Right);
; 190  :  #else
; 191  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN4@operator@7
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN3@operator@7
$LN4@operator@7:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@7:

; 192  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 193  : 
; 194  : 		return (_Myptr - _Right._Myptr);

  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	2b 4f 04	 sub	 ecx, DWORD PTR [edi+4]
  0001d	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00022	f7 e9		 imul	 ecx
  00024	c1 fa 06	 sar	 edx, 6
  00027	8b c2		 mov	 eax, edx
  00029	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002c	5f		 pop	 edi
  0002d	03 c2		 add	 eax, edx
  0002f	5e		 pop	 esi

; 195  : 		}

  00030	c2 04 00	 ret	 4
??G?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator-
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator==
; Function compile flags: /Ogtpy
;	COMDAT ??8?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN4@operator@8
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN3@operator@8
$LN4@operator@8:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@8:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 94 c1	 sete	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 212  : 		}

  00026	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator==
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Isnil
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Isnil, COMDAT

; 157  : 		return ((_Charref)(*_Pnode)._Isnil);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	05 a1 00 00 00	 add	 eax, 161		; 000000a1H

; 158  : 		}

  00009	c3		 ret	 0
?_Isnil@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Left
; Function compile flags: /Ogtpy
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Left, COMDAT

; 167  : 		return ((_Nodepref)(*_Pnode)._Left);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 168  : 		}

  00004	c3		 ret	 0
?_Left@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Parent
; Function compile flags: /Ogtpy
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Parent, COMDAT

; 172  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 173  : 		}

  00007	c3		 ret	 0
?_Parent@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Parent
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Right
; Function compile flags: /Ogtpy
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Right, COMDAT

; 177  : 		return ((_Nodepref)(*_Pnode)._Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 178  : 		}

  00007	c3		 ret	 0
?_Right@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Right
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBHUHostDevice@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Myval
; Function compile flags: /Ogtpy
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBHUHostDevice@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBHUHostDevice@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Myval, COMDAT

; 182  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 10	 add	 eax, 16			; 00000010H

; 183  : 		}

  00007	c3		 ret	 0
?_Myval@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBHUHostDevice@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Myval
_TEXT	ENDS
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::size, COMDAT
; _this$ = ecx

; 601  : 		return (_Mysize);

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]

; 602  : 		}

  00003	c3		 ret	 0
?size@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::size
_TEXT	ENDS
PUBLIC	?_Kfn@?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHUHostDevice@@@2@@Z ; std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0>::_Kfn
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\map
;	COMDAT ?_Kfn@?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHUHostDevice@@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHUHostDevice@@@2@@Z PROC ; std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0>::_Kfn, COMDAT

; 65   : 		return (_Val.first);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]

; 66   : 		}

  00004	c3		 ret	 0
?_Kfn@?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHUHostDevice@@@2@@Z ENDP ; std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0>::_Kfn
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<int const ,HostDevice> >::allocator<std::pair<int const ,HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::pair<int const ,HostDevice> >::allocator<std::pair<int const ,HostDevice> >, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::pair<int const ,HostDevice> >::allocator<std::pair<int const ,HostDevice> >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBHUHostDevice@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBHUHostDevice@@@2@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBHUHostDevice@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 249  : 			{	// return designated value

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 250  : 
; 251  :  #if _HAS_ITERATOR_DEBUGGING
; 252  : 			if (this->_Mycont == 0
; 253  : 				|| _Ptr == 0
; 254  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 255  : 				{
; 256  : 				_DEBUG_ERROR("map/set iterator not dereferencable");
; 257  : 				_SCL_SECURE_OUT_OF_RANGE;
; 258  : 				}
; 259  :  #else
; 260  : 			_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN21@operator@9
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 261  : 			_SCL_SECURE_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN15@operator@9
$LN21@operator@9:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN16@operator@9
$LN15@operator@9:
  00018	33 c0		 xor	 eax, eax
$LN16@operator@9:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00020	75 05		 jne	 SHORT $LN3@operator@9
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@9:

; 262  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 263  : 
; 264  : 			return (_Myval(_Ptr));

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	83 c0 10	 add	 eax, 16			; 00000010H
  0002d	5e		 pop	 esi

; 265  : 			}

  0002e	c3		 ret	 0
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBHUHostDevice@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getstate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z
_TEXT	SEGMENT
__Mode$ = 8						; size = 4
?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getstate, COMDAT
; _this$ = ecx

; 318  : 		_Strstate _State = (_Strstate)0;
; 319  : 		if (!(_Mode & ios_base::in))

  00000	8a 4c 24 04	 mov	 cl, BYTE PTR __Mode$[esp-4]
  00004	33 c0		 xor	 eax, eax
  00006	f6 c1 01	 test	 cl, 1
  00009	75 05		 jne	 SHORT $LN4@Getstate@2

; 320  : 			_State |= _Noread;

  0000b	b8 04 00 00 00	 mov	 eax, 4
$LN4@Getstate@2:

; 321  : 		if (!(_Mode & ios_base::out))

  00010	f6 c1 02	 test	 cl, 2
  00013	75 03		 jne	 SHORT $LN3@Getstate@2

; 322  : 			_State |= _Constant;

  00015	83 c8 02	 or	 eax, 2
$LN3@Getstate@2:

; 323  : 		if (_Mode & ios_base::app)

  00018	f6 c1 08	 test	 cl, 8
  0001b	74 03		 je	 SHORT $LN2@Getstate@2

; 324  : 			_State |= _Append;

  0001d	83 c8 08	 or	 eax, 8
$LN2@Getstate@2:

; 325  : 		if (_Mode & ios_base::ate)

  00020	f6 c1 04	 test	 cl, 4
  00023	74 03		 je	 SHORT $LN1@Getstate@2

; 326  : 			_State |= _Atend;

  00025	83 c8 10	 or	 eax, 16			; 00000010H
$LN1@Getstate@2:

; 327  : 		return (_State);
; 328  : 		}

  00028	c2 04 00	 ret	 4
?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getstate
_TEXT	ENDS
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 75   : 			{	// lock the stream buffer, if there

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ostr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 06		 mov	 DWORD PTR [esi], eax

; 76   : 			if (_Myostr.rdbuf() != 0)

  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000e	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  00012	85 c0		 test	 eax, eax
  00014	74 08		 je	 SHORT $LN10@Sentry_bas

; 77   : 				_Myostr.rdbuf()->_Lock();

  00016	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00019	e8 00 00 00 00	 call	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
$LN10@Sentry_bas:

; 78   : 			}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtpy
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 82   : 			if (_Myostr.rdbuf() != 0)

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00007	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  0000b	85 c0		 test	 eax, eax
  0000d	74 08		 je	 SHORT $LN8@Sentry_bas@2

; 83   : 				_Myostr.rdbuf()->_Unlock();

  0000f	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00012	e9 00 00 00 00	 jmp	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN8@Sentry_bas@2:

; 84   : 			}

  00017	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
PUBLIC	??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
; Function compile flags: /Ogtpy
;	COMDAT ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 75   : 			{	// lock the stream buffer, if there

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ostr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 06		 mov	 DWORD PTR [esi], eax

; 76   : 			if (_Myostr.rdbuf() != 0)

  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000e	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  00012	85 c0		 test	 eax, eax
  00014	74 08		 je	 SHORT $LN10@Sentry_bas@3

; 77   : 				_Myostr.rdbuf()->_Lock();

  00016	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00019	e8 00 00 00 00	 call	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
$LN10@Sentry_bas@3:

; 78   : 			}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
PUBLIC	??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtpy
;	COMDAT ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 82   : 			if (_Myostr.rdbuf() != 0)

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00007	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  0000b	85 c0		 test	 eax, eax
  0000d	74 08		 je	 SHORT $LN8@Sentry_bas@4

; 83   : 				_Myostr.rdbuf()->_Unlock();

  0000f	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00012	e9 00 00 00 00	 jmp	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN8@Sentry_bas@4:

; 84   : 			}

  00017	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UHostDevice@@HPBU3@ABU3@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UHostDevice@@HPBU3@ABU3@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UHostDevice@@HPBU3@ABU3@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UHostDevice@@HPBU3@ABU3@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUHostDevice@@@2@HPBU32@ABU32@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::bidirectional_iterator_tag,std::pair<int const ,HostDevice>,int,std::pair<int const ,HostDevice> const *,std::pair<int const ,HostDevice> const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,std::pair<int const ,HostDevice>,int,std::pair<int const ,HostDevice> const *,std::pair<int const ,HostDevice> const &,std::_Iterator_base_aux>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUHostDevice@@@2@HPBU32@ABU32@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUHostDevice@@@2@HPBU32@ABU32@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::bidirectional_iterator_tag,std::pair<int const ,HostDevice>,int,std::pair<int const ,HostDevice> const *,std::pair<int const ,HostDevice> const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,std::pair<int const ,HostDevice>,int,std::pair<int const ,HostDevice> const *,std::pair<int const ,HostDevice> const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUHostDevice@@@2@HPBU32@ABU32@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::bidirectional_iterator_tag,std::pair<int const ,HostDevice>,int,std::pair<int const ,HostDevice> const *,std::pair<int const ,HostDevice> const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,std::pair<int const ,HostDevice>,int,std::pair<int const ,HostDevice> const *,std::pair<int const ,HostDevice> const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside, COMDAT
; _this$ = ecx

; 2133 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2134 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 2d		 je	 SHORT $LN2@Inside@2
  0000a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0000d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00010	83 fe 08	 cmp	 esi, 8
  00013	72 04		 jb	 SHORT $LN8@Inside@2
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN9@Inside@2
$LN8@Inside@2:
  00019	8b d0		 mov	 edx, eax
$LN9@Inside@2:
  0001b	3b fa		 cmp	 edi, edx
  0001d	72 18		 jb	 SHORT $LN2@Inside@2
  0001f	83 fe 08	 cmp	 esi, 8
  00022	72 02		 jb	 SHORT $LN12@Inside@2
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@Inside@2:
  00026	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00029	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  0002c	3b d7		 cmp	 edx, edi
  0002e	76 07		 jbe	 SHORT $LN2@Inside@2
  00030	5f		 pop	 edi

; 2136 : 		else
; 2137 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	5e		 pop	 esi

; 2138 : 		}

  00034	c2 04 00	 ret	 4
$LN2@Inside@2:
  00037	5f		 pop	 edi

; 2135 : 			return (false);	// don't ask

  00038	32 c0		 xor	 al, al
  0003a	5e		 pop	 esi

; 2138 : 		}

  0003b	c2 04 00	 ret	 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
_TEXT	ENDS
PUBLIC	?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 282  : 		_IGfirst = &_Gfirst, _IPfirst = &_Pfirst;
; 283  : 		_IGnext = &_Gnext, _IPnext = &_Pnext;

  00000	8d 51 18	 lea	 edx, DWORD PTR [ecx+24]
  00003	89 51 20	 mov	 DWORD PTR [ecx+32], edx
  00006	8d 51 1c	 lea	 edx, DWORD PTR [ecx+28]
  00009	89 51 24	 mov	 DWORD PTR [ecx+36], edx
  0000c	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  0000f	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 284  : 		_IGcount = &_Gcount, _IPcount = &_Pcount;

  00012	8d 51 28	 lea	 edx, DWORD PTR [ecx+40]
  00015	89 51 30	 mov	 DWORD PTR [ecx+48], edx
  00018	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  0001b	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0001e	8d 51 2c	 lea	 edx, DWORD PTR [ecx+44]
  00021	89 51 34	 mov	 DWORD PTR [ecx+52], edx

; 285  : 		setp(0, 0), setg(0, 0, 0);

  00024	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002a	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00033	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00036	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0003c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00045	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00048	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0004e	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00051	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 286  : 		}

  00057	c3		 ret	 0
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
PUBLIC	?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Init
; Function compile flags: /Ogtpy
;	COMDAT ?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Init, COMDAT
; _this$ = ecx

; 282  : 		_IGfirst = &_Gfirst, _IPfirst = &_Pfirst;
; 283  : 		_IGnext = &_Gnext, _IPnext = &_Pnext;

  00000	8d 51 18	 lea	 edx, DWORD PTR [ecx+24]
  00003	89 51 20	 mov	 DWORD PTR [ecx+32], edx
  00006	8d 51 1c	 lea	 edx, DWORD PTR [ecx+28]
  00009	89 51 24	 mov	 DWORD PTR [ecx+36], edx
  0000c	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  0000f	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 284  : 		_IGcount = &_Gcount, _IPcount = &_Pcount;

  00012	8d 51 28	 lea	 edx, DWORD PTR [ecx+40]
  00015	89 51 30	 mov	 DWORD PTR [ecx+48], edx
  00018	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  0001b	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0001e	8d 51 2c	 lea	 edx, DWORD PTR [ecx+44]
  00021	89 51 34	 mov	 DWORD PTR [ecx+52], edx

; 285  : 		setp(0, 0), setg(0, 0, 0);

  00024	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002a	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00033	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00036	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0003c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00045	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00048	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0004e	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00051	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 286  : 		}

  00057	c3		 ret	 0
?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Init
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UHostDevice@@@std@@QBEIXZ	; std::allocator<HostDevice>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UHostDevice@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UHostDevice@@@std@@QBEIXZ PROC	; std::allocator<HostDevice>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 e1 e1 e1 01	 mov	 eax, 31580641		; 01e1e1e1H

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UHostDevice@@@std@@QBEIXZ ENDP	; std::allocator<HostDevice>::max_size
_TEXT	ENDS
PUBLIC	?_Color@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Color
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Color, COMDAT

; 152  : 		return ((_Charref)(*_Pnode)._Color);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	05 a0 00 00 00	 add	 eax, 160		; 000000a0H

; 153  : 		}

  00009	c3		 ret	 0
?_Color@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Color
_TEXT	ENDS
PUBLIC	??9const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::operator!=
; Function compile flags: /Ogtpy
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::operator!=, COMDAT
; _this$ = ecx

; 315  : 			{	// test for iterator inequality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 316  : 			return (!(*this == _Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN6@operator@10
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN5@operator@10
$LN6@operator@10:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@10:
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 95 c1	 setne	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 317  : 			}

  00026	c2 04 00	 ret	 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::operator!=
_TEXT	ENDS
PUBLIC	??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@1@AB_N@Z ; std::pair<std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::iterator,bool>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
;	COMDAT ??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@1@AB_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@1@AB_N@Z PROC ; std::pair<std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::iterator,bool>, COMDAT
; _this$ = ecx

; 50   : 		{	// construct from specified values

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Val1$[esp-4]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	89 10		 mov	 DWORD PTR [eax], edx
  0000a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000d	8b 54 24 08	 mov	 edx, DWORD PTR __Val2$[esp-4]
  00011	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00014	8a 0a		 mov	 cl, BYTE PTR [edx]
  00016	88 48 08	 mov	 BYTE PTR [eax+8], cl

; 51   : 		}

  00019	c2 08 00	 ret	 8
??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@1@AB_N@Z ENDP ; std::pair<std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::iterator,bool>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@KHPBKABKV_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::bidirectional_iterator_tag,unsigned long,int,unsigned long const *,unsigned long const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,unsigned long,int,unsigned long const *,unsigned long const &,std::_Iterator_base_aux>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@KHPBKABKV_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@KHPBKABKV_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::bidirectional_iterator_tag,unsigned long,int,unsigned long const *,unsigned long const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,unsigned long,int,unsigned long const *,unsigned long const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@KHPBKABKV_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::bidirectional_iterator_tag,unsigned long,int,unsigned long const *,unsigned long const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,unsigned long,int,unsigned long const *,unsigned long const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 167  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@_W@std@@QBEIXZ		; std::allocator<wchar_t>::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@_W@std@@QBEIXZ PROC		; std::allocator<wchar_t>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@_W@std@@QBEIXZ ENDP		; std::allocator<wchar_t>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@K@std@@QBEIXZ		; std::allocator<unsigned long>::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@K@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@K@std@@QBEIXZ PROC		; std::allocator<unsigned long>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@K@std@@QBEIXZ ENDP		; std::allocator<unsigned long>::max_size
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	85 c0		 test	 eax, eax
  00008	75 0b		 jne	 SHORT $LN26@operator@11
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	85 c0		 test	 eax, eax
  00013	74 04		 je	 SHORT $LN16@operator@11
$LN26@operator@11:
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN17@operator@11
$LN16@operator@11:
  00019	33 c9		 xor	 ecx, ecx
$LN17@operator@11:
  0001b	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  0001f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00022	69 ff 88 00 00
	00		 imul	 edi, 136		; 00000088H
  00028	03 d7		 add	 edx, edi
  0002a	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  0002d	77 0f		 ja	 SHORT $LN4@operator@11
  0002f	85 c0		 test	 eax, eax
  00031	74 04		 je	 SHORT $LN22@operator@11
  00033	8b 00		 mov	 eax, DWORD PTR [eax]
  00035	eb 02		 jmp	 SHORT $LN23@operator@11
$LN22@operator@11:
  00037	33 c0		 xor	 eax, eax
$LN23@operator@11:
  00039	3b 50 0c	 cmp	 edx, DWORD PTR [eax+12]
  0003c	73 05		 jae	 SHORT $LN27@operator@11
$LN4@operator@11:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

  0003e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN27@operator@11:

; 164  : 		_Myptr += _Off;

  00043	01 7e 04	 add	 DWORD PTR [esi+4], edi
  00046	5f		 pop	 edi

; 165  : 		return (*this);

  00047	8b c6		 mov	 eax, esi
  00049	5e		 pop	 esi

; 166  : 		}

  0004a	c2 04 00	 ret	 4
??Y?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator+=
_TEXT	ENDS
PUBLIC	?_Max@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Max
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Max, COMDAT

; 1306 : 		while (!_Isnil(_Right(_Pnode)))

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00007	80 b9 a1 00 00
	00 00		 cmp	 BYTE PTR [ecx+161], 0
  0000e	75 0e		 jne	 SHORT $LN1@Max
$LL2@Max:

; 1307 : 			_Pnode = _Right(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00015	80 b9 a1 00 00
	00 00		 cmp	 BYTE PTR [ecx+161], 0
  0001c	74 f2		 je	 SHORT $LL2@Max
$LN1@Max:

; 1308 : 		return (_Pnode);
; 1309 : 		}

  0001e	c3		 ret	 0
?_Max@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Max
_TEXT	ENDS
PUBLIC	?_Min@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Min
; Function compile flags: /Ogtpy
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Min, COMDAT

; 1313 : 		while (!_Isnil(_Left(_Pnode)))

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	80 b9 a1 00 00
	00 00		 cmp	 BYTE PTR [ecx+161], 0
  0000d	75 0e		 jne	 SHORT $LN1@Min
  0000f	90		 npad	 1
$LL2@Min:

; 1314 : 			_Pnode = _Left(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	80 b9 a1 00 00
	00 00		 cmp	 BYTE PTR [ecx+161], 0
  0001b	74 f3		 je	 SHORT $LL2@Min
$LN1@Min:

; 1315 : 		return (_Pnode);
; 1316 : 		}

  0001d	c3		 ret	 0
?_Min@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Min
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@std@@QBEIXZ ; std::allocator<std::pair<int const ,HostDevice> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@std@@QBEIXZ PROC ; std::allocator<std::pair<int const ,HostDevice> >::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 71 1c c7 01	 mov	 eax, 29826161		; 01c71c71H

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@std@@QBEIXZ ENDP ; std::allocator<std::pair<int const ,HostDevice> >::max_size
_TEXT	ENDS
PUBLIC	??$ToTypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z ; CipherShed::ForEach::ToTypeWrapper<std::list<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
;	COMDAT ??$ToTypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??$ToTypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z PROC ; CipherShed::ForEach::ToTypeWrapper<std::list<unsigned long,std::allocator<unsigned long> > >, COMDAT

; 85   : 		static TypeWrapper <T> ToTypeWrapper (const T &x) { return TypeWrapper <T> (); }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
??$ToTypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z ENDP ; CipherShed::ForEach::ToTypeWrapper<std::list<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	??$?BV?$list@KV?$allocator@K@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@12@XZ ; CipherShed::ForEach::TypeWrapperDummy::operator<std::list<unsigned long,std::allocator<unsigned long> > > CipherShed::ForEach::TypeWrapper<std::list<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$?BV?$list@KV?$allocator@K@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$?BV?$list@KV?$allocator@K@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@12@XZ PROC ; CipherShed::ForEach::TypeWrapperDummy::operator<std::list<unsigned long,std::allocator<unsigned long> > > CipherShed::ForEach::TypeWrapper<std::list<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 90   : 			operator TypeWrapper <T> () const { return TypeWrapper <T> (); }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	c2 04 00	 ret	 4
??$?BV?$list@KV?$allocator@K@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@12@XZ ENDP ; CipherShed::ForEach::TypeWrapperDummy::operator<std::list<unsigned long,std::allocator<unsigned long> > > CipherShed::ForEach::TypeWrapper<std::list<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@01@@Z ; CipherShed::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@01@@Z
_TEXT	SEGMENT
_forEachContainer$ = 8					; size = 4
___formal$ = 12						; size = 4
??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@01@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >, COMDAT

; 96   : 			return static_cast <const ContainerForward <T> &> (forEachContainer);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _forEachContainer$[esp-4]

; 97   : 		}

  00004	c3		 ret	 0
??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@01@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	??$ToTypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::ToTypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$ToTypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??$ToTypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z PROC ; CipherShed::ForEach::ToTypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT

; 85   : 		static TypeWrapper <T> ToTypeWrapper (const T &x) { return TypeWrapper <T> (); }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
??$ToTypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::ToTypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	??$?BV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@12@XZ ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<HostDevice,std::allocator<HostDevice> > > CipherShed::ForEach::TypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$?BV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$?BV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@12@XZ PROC ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<HostDevice,std::allocator<HostDevice> > > CipherShed::ForEach::TypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT
; _this$ = ecx

; 90   : 			operator TypeWrapper <T> () const { return TypeWrapper <T> (); }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	c2 04 00	 ret	 4
??$?BV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@12@XZ ENDP ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<HostDevice,std::allocator<HostDevice> > > CipherShed::ForEach::TypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@@Z
_TEXT	SEGMENT
_forEachContainer$ = 8					; size = 4
___formal$ = 12						; size = 4
??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT

; 96   : 			return static_cast <const ContainerForward <T> &> (forEachContainer);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _forEachContainer$[esp-4]

; 97   : 		}

  00004	c3		 ret	 0
??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T153012 = -12						; size = 12
$T153017 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 0f		 ja	 SHORT $LN3@Allocate

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00013	83 c4 04	 add	 esp, 4

; 44   : 	}

  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	c3		 ret	 0
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001a	83 c8 ff	 or	 eax, -1
  0001d	33 d2		 xor	 edx, edx
  0001f	f7 f1		 div	 ecx
  00021	83 f8 01	 cmp	 eax, 1
  00024	73 e7		 jae	 SHORT $LN1@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T153017[esp+8]
  0002a	50		 push	 eax
  0002b	8d 4c 24 04	 lea	 ecx, DWORD PTR $T153012[esp+16]
  0002f	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T153017[esp+12], 0
  00037	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003c	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00041	8d 4c 24 04	 lea	 ecx, DWORD PTR $T153012[esp+16]
  00045	51		 push	 ecx
  00046	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T153012[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate:
  00053	cc		 int	 3
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Allocate@_W@std@@YAPA_WIPA_W@Z		; std::_Allocate<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT
$T153024 = -12						; size = 12
$T153028 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@_W@std@@YAPA_WIPA_W@Z PROC			; std::_Allocate<wchar_t>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 12		 ja	 SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00016	83 c4 04	 add	 esp, 4

; 44   : 	}

  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	c3		 ret	 0
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001d	83 c8 ff	 or	 eax, -1
  00020	33 d2		 xor	 edx, edx
  00022	f7 f1		 div	 ecx
  00024	83 f8 02	 cmp	 eax, 2
  00027	73 e4		 jae	 SHORT $LN1@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00029	8d 44 24 10	 lea	 eax, DWORD PTR $T153028[esp+8]
  0002d	50		 push	 eax
  0002e	8d 4c 24 04	 lea	 ecx, DWORD PTR $T153024[esp+16]
  00032	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T153028[esp+12], 0
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003f	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00044	8d 4c 24 04	 lea	 ecx, DWORD PTR $T153024[esp+16]
  00048	51		 push	 ecx
  00049	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T153024[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@2:
  00056	cc		 int	 3
??$_Allocate@_W@std@@YAPA_WIPA_W@Z ENDP			; std::_Allocate<wchar_t>
_TEXT	ENDS
PUBLIC	??$?0UHostDevice@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UHostDevice@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><HostDevice>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0UHostDevice@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UHostDevice@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0UHostDevice@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UHostDevice@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><HostDevice>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0UHostDevice@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UHostDevice@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><HostDevice>
_TEXT	ENDS
PUBLIC	??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ; std::_Allocate<HostDevice>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z
_TEXT	SEGMENT
$T153034 = -12						; size = 12
$T153038 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z PROC ; std::_Allocate<HostDevice>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 15		 ja	 SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	69 c9 88 00 00
	00		 imul	 ecx, 136		; 00000088H
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00019	83 c4 04	 add	 esp, 4

; 44   : 	}

  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001f	c3		 ret	 0
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00020	83 c8 ff	 or	 eax, -1
  00023	33 d2		 xor	 edx, edx
  00025	f7 f1		 div	 ecx
  00027	3d 88 00 00 00	 cmp	 eax, 136		; 00000088H
  0002c	73 df		 jae	 SHORT $LN1@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002e	8d 44 24 10	 lea	 eax, DWORD PTR $T153038[esp+8]
  00032	50		 push	 eax
  00033	8d 4c 24 04	 lea	 ecx, DWORD PTR $T153034[esp+16]
  00037	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T153038[esp+12], 0
  0003f	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00044	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00049	8d 4c 24 04	 lea	 ecx, DWORD PTR $T153034[esp+16]
  0004d	51		 push	 ecx
  0004e	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T153034[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00056	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@3:
  0005b	cc		 int	 3
??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ENDP ; std::_Allocate<HostDevice>
_TEXT	ENDS
PUBLIC	??$?0K@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAE@ABV?$allocator@K@1@@Z ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *><unsigned long>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0K@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAE@ABV?$allocator@K@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0K@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAE@ABV?$allocator@K@1@@Z PROC ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *><unsigned long>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0K@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAE@ABV?$allocator@K@1@@Z ENDP ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *><unsigned long>
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T153044 = -12						; size = 12
$T153048 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 16		 ja	 SHORT $LN3@Allocate@4

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@4:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 49	 lea	 edx, DWORD PTR [ecx+ecx*2]
  00010	03 d2		 add	 edx, edx
  00012	03 d2		 add	 edx, edx
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4

; 44   : 	}

  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	c3		 ret	 0
$LN3@Allocate@4:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00021	83 c8 ff	 or	 eax, -1
  00024	33 d2		 xor	 edx, edx
  00026	f7 f1		 div	 ecx
  00028	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  0002b	73 e0		 jae	 SHORT $LN1@Allocate@4

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002d	8d 44 24 10	 lea	 eax, DWORD PTR $T153048[esp+8]
  00031	50		 push	 eax
  00032	8d 4c 24 04	 lea	 ecx, DWORD PTR $T153044[esp+16]
  00036	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T153048[esp+12], 0
  0003e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00043	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00048	8d 4c 24 04	 lea	 ecx, DWORD PTR $T153044[esp+16]
  0004c	51		 push	 ecx
  0004d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T153044[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00055	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@4:
  0005a	cc		 int	 3
??$_Allocate@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@ABQAU120@@Z ; std::_Construct<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *,std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Construct@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@ABQAU120@@Z PROC ; std::_Construct<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *,std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>, COMDAT

; 51   : 	void _FARQ *_Vptr = _Ptr;
; 52   : 	::new (_Vptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN3@Construct
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN3@Construct:

; 53   : 	}

  00010	c3		 ret	 0
??$_Construct@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *,std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@@Z ; std::_Destroy<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@0@@Z ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@0@@Z PROC ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node *>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@0@@Z ENDP ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z
_TEXT	SEGMENT
$T153064 = -12						; size = 12
$T153068 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z PROC ; std::_Allocate<std::_Aux_cont>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 16		 ja	 SHORT $LN3@Allocate@5

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@5:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4

; 44   : 	}

  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	c3		 ret	 0
$LN3@Allocate@5:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00021	83 c8 ff	 or	 eax, -1
  00024	33 d2		 xor	 edx, edx
  00026	f7 f1		 div	 ecx
  00028	83 f8 04	 cmp	 eax, 4
  0002b	73 e0		 jae	 SHORT $LN1@Allocate@5

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002d	8d 44 24 10	 lea	 eax, DWORD PTR $T153068[esp+8]
  00031	50		 push	 eax
  00032	8d 4c 24 04	 lea	 ecx, DWORD PTR $T153064[esp+16]
  00036	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T153068[esp+12], 0
  0003e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00043	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00048	8d 4c 24 04	 lea	 ecx, DWORD PTR $T153064[esp+16]
  0004c	51		 push	 ecx
  0004d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T153064[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00055	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@5:
  0005a	cc		 int	 3
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ENDP ; std::_Allocate<std::_Aux_cont>
_TEXT	ENDS
PUBLIC	??$_Construct@KK@std@@YAXPAKABK@Z		; std::_Construct<unsigned long,unsigned long>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Construct@KK@std@@YAXPAKABK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@KK@std@@YAXPAKABK@Z PROC			; std::_Construct<unsigned long,unsigned long>, COMDAT

; 51   : 	void _FARQ *_Vptr = _Ptr;
; 52   : 	::new (_Vptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN3@Construct@2
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN3@Construct@2:

; 53   : 	}

  00010	c3		 ret	 0
??$_Construct@KK@std@@YAXPAKABK@Z ENDP			; std::_Construct<unsigned long,unsigned long>
_TEXT	ENDS
PUBLIC	??$?0K@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAE@ABV?$allocator@K@1@@Z ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node><unsigned long>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0K@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAE@ABV?$allocator@K@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0K@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAE@ABV?$allocator@K@1@@Z PROC ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node><unsigned long>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0K@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAE@ABV?$allocator@K@1@@Z ENDP ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node><unsigned long>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@@Z ; std::_Destroy<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

  00000	c3		 ret	 0
??$_Destroy@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>
_TEXT	ENDS
PUBLIC	??$swap@D@std@@YAXAAD0@Z			; std::swap<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@D@std@@YAXAAD0@Z PROC				; std::swap<char>, COMDAT

; 18   : 	if (&_Left != &_Right)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00008	3b c1		 cmp	 eax, ecx
  0000a	74 0a		 je	 SHORT $LN1@swap

; 19   : 		{	// different, worth swapping
; 20   : 		_Ty _Tmp = _Left;

  0000c	8a 10		 mov	 dl, BYTE PTR [eax]
  0000e	53		 push	 ebx

; 21   : 
; 22   : 		_Left = _Right;

  0000f	8a 19		 mov	 bl, BYTE PTR [ecx]
  00011	88 18		 mov	 BYTE PTR [eax], bl

; 23   : 		_Right = _Tmp;

  00013	88 11		 mov	 BYTE PTR [ecx], dl
  00015	5b		 pop	 ebx
$LN1@swap:

; 24   : 		}
; 25   : 	}

  00016	c3		 ret	 0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBHUHostDevice@@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node *><std::pair<int const ,HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$?0U?$pair@$$CBHUHostDevice@@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBHUHostDevice@@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node *><std::pair<int const ,HostDevice> >, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBHUHostDevice@@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node *><std::pair<int const ,HostDevice> >
_TEXT	ENDS
PUBLIC	??$?0K@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@K@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><unsigned long>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0K@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@K@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0K@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@K@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><unsigned long>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0K@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@K@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><unsigned long>
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBHUHostDevice@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node><std::pair<int const ,HostDevice> >
; Function compile flags: /Ogtpy
;	COMDAT ??$?0U?$pair@$$CBHUHostDevice@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBHUHostDevice@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node><std::pair<int const ,HostDevice> >, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBHUHostDevice@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node><std::pair<int const ,HostDevice> >
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T153092 = -12						; size = 12
$T153096 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 15		 ja	 SHORT $LN3@Allocate@6

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@6:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	69 c9 a8 00 00
	00		 imul	 ecx, 168		; 000000a8H
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00019	83 c4 04	 add	 esp, 4

; 44   : 	}

  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001f	c3		 ret	 0
$LN3@Allocate@6:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00020	83 c8 ff	 or	 eax, -1
  00023	33 d2		 xor	 edx, edx
  00025	f7 f1		 div	 ecx
  00027	3d a8 00 00 00	 cmp	 eax, 168		; 000000a8H
  0002c	73 df		 jae	 SHORT $LN1@Allocate@6

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002e	8d 44 24 10	 lea	 eax, DWORD PTR $T153096[esp+8]
  00032	50		 push	 eax
  00033	8d 4c 24 04	 lea	 ecx, DWORD PTR $T153092[esp+16]
  00037	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T153096[esp+12], 0
  0003f	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00044	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00049	8d 4c 24 04	 lea	 ecx, DWORD PTR $T153092[esp+16]
  0004d	51		 push	 ecx
  0004e	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T153092[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00056	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@6:
  0005b	cc		 int	 3
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@0@ABQAU120@@Z PROC ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node *>, COMDAT

; 51   : 	void _FARQ *_Vptr = _Ptr;
; 52   : 	::new (_Vptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN3@Construct@3
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN3@Construct@3:

; 53   : 	}

  00010	c3		 ret	 0
??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node *>
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBHUHostDevice@@@std@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><std::pair<int const ,HostDevice> >
; Function compile flags: /Ogtpy
;	COMDAT ??$?0U?$pair@$$CBHUHostDevice@@@std@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBHUHostDevice@@@std@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><std::pair<int const ,HostDevice> >, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBHUHostDevice@@@std@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><std::pair<int const ,HostDevice> >
_TEXT	ENDS
PUBLIC	?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::fill
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ
_TEXT	SEGMENT
?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::fill, COMDAT
; _this$ = ecx

; 106  : 		return (_Fillch);

  00000	66 8b 41 30	 mov	 ax, WORD PTR [ecx+48]

; 107  : 		}

  00004	c3		 ret	 0
?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::fill
_TEXT	ENDS
PUBLIC	?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHPBDH@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHPBDH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHPBDH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputn, COMDAT
; _this$ = ecx

; 168  : 		return (xsputn(_Ptr, _Count));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00005	ff e0		 jmp	 eax
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHPBDH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputn
_TEXT	ENDS
PUBLIC	?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
__Lobj$ = 8						; size = 4
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init, COMDAT
; _this$ = ecx

; 1046 : 		{	// initialize from _Locinfo object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1047 : 		_Cvt = _Lobj._Getcvt();

  00003	e8 00 00 00 00	 call	 __Getcvt
  00008	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0000b	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  0000e	5e		 pop	 esi

; 1048 : 		}

  0000f	c2 04 00	 ret	 4
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
_TEXT	ENDS
PUBLIC	??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<char> >, COMDAT

; 575  : 	{

  00000	51		 push	 ecx

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Secure$[esp+4]

; 578  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 624  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 625  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 598  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<wchar_t> >, COMDAT

; 575  : 	{

  00000	51		 push	 ecx

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Secure$[esp+4]

; 578  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 598  : 	}

  00026	c3		 ret	 0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUHostDevice@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUHostDevice@@0@Z ; std::_Iter_random<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_random@PAUHostDevice@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUHostDevice@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUHostDevice@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUHostDevice@@0@Z PROC ; std::_Iter_random<HostDevice *,HostDevice *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

  00004	c3		 ret	 0
??$_Iter_random@PAUHostDevice@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUHostDevice@@0@Z ENDP ; std::_Iter_random<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUHostDevice@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUHostDevice@@0@Z ; std::_Ptr_cat<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAUHostDevice@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUHostDevice@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUHostDevice@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUHostDevice@@0@Z PROC ; std::_Ptr_cat<HostDevice *,HostDevice *>, COMDAT

; 1509 : 	{

  00000	51		 push	 ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@PAUHostDevice@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUHostDevice@@0@Z ENDP ; std::_Ptr_cat<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 624  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 625  : 	}

  00026	c3		 ret	 0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$_Move_cat@PAUHostDevice@@@std@@YA?AU_Undefined_move_tag@0@ABQAUHostDevice@@@Z ; std::_Move_cat<HostDevice *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Move_cat@PAUHostDevice@@@std@@YA?AU_Undefined_move_tag@0@ABQAUHostDevice@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAUHostDevice@@@std@@YA?AU_Undefined_move_tag@0@ABQAUHostDevice@@@Z PROC ; std::_Move_cat<HostDevice *>, COMDAT

; 1200 : 	{

  00000	51		 push	 ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1203 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Move_cat@PAUHostDevice@@@std@@YA?AU_Undefined_move_tag@0@ABQAUHostDevice@@@Z ENDP ; std::_Move_cat<HostDevice *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@AAPAUHostDevice@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@AAPAUHostDevice@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@AAPAUHostDevice@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *>, COMDAT

; 1509 : 	{

  00000	51		 push	 ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@AAPAUHostDevice@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *>
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<HostDevice *>, COMDAT

; 1147 : 		return _It;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]

; 1148 : 	}

  00006	c3		 ret	 0
??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<HostDevice *>
_TEXT	ENDS
PUBLIC	??4HostDevice@@QAEAAU0@ABU0@@Z			; HostDevice::operator=
PUBLIC	??$_Copy_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	53		 push	 ebx

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 23		 je	 SHORT $LN200@Copy_opt
  0000e	57		 push	 edi
  0000f	8b 7c 24 18	 mov	 edi, DWORD PTR __Dest$[esp+8]
$LL3@Copy_opt:

; 2472 : 		*_Dest = *_First;

  00013	56		 push	 esi
  00014	8b cf		 mov	 ecx, edi
  00016	e8 00 00 00 00	 call	 ??4HostDevice@@QAEAAU0@ABU0@@Z
  0001b	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00021	81 c7 88 00 00
	00		 add	 edi, 136		; 00000088H
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL3@Copy_opt

; 2473 : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 2474 : 	}

  00030	c3		 ret	 0
$LN200@Copy_opt:

; 2473 : 	return (_Dest);

  00031	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 2474 : 	}

  00037	c3		 ret	 0
??$_Copy_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Iter_cat@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@0@@Z ; std::_Iter_cat<std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Iter_cat@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@0@@Z PROC ; std::_Iter_cat<std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1> >, COMDAT

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 955  : 	}

  00004	c3		 ret	 0
??$_Iter_cat@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@0@@Z ENDP ; std::_Iter_cat<std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1> >
_TEXT	ENDS
PUBLIC	??F?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAEAAV012@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator--
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??F?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??F?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAEAAV012@XZ PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator--, COMDAT
; _this$ = ecx

; 262  : 			{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 263  : 
; 264  :  #if _HAS_ITERATOR_DEBUGGING
; 265  : 			if (this->_Mycont == 0
; 266  : 				|| _Ptr == 0
; 267  : 				|| (_Ptr = _Prevnode(_Ptr))
; 268  : 					== ((_Myt *)this->_Mycont)->_Myhead)
; 269  : 				{
; 270  : 				_DEBUG_ERROR("list iterator not decrementable");
; 271  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 272  : 				}
; 273  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 274  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	75 05		 jne	 SHORT $LN8@operator@12
  00008	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN8@operator@12:

; 275  : 			_Ptr = _Prevnode(_Ptr);

  0000d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00010	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 276  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00018	85 c0		 test	 eax, eax
  0001a	74 04		 je	 SHORT $LN19@operator@12
  0001c	8b 00		 mov	 eax, DWORD PTR [eax]
  0001e	eb 02		 jmp	 SHORT $LN20@operator@12
$LN19@operator@12:
  00020	33 c0		 xor	 eax, eax
$LN20@operator@12:
  00022	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00025	75 05		 jne	 SHORT $LN23@operator@12
  00027	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN23@operator@12:

; 277  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 278  : 
; 279  : 			return (*this);

  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi

; 280  : 			}

  0002f	c3		 ret	 0
??F?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAEAAV012@XZ ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator--
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEPBUHostDevice@@XZ ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Checked_iterator_base
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEPBUHostDevice@@XZ
_TEXT	SEGMENT
?_Checked_iterator_base@?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEPBUHostDevice@@XZ PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 47   : 		return _Myptr;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 48   : 	}

  00003	c3		 ret	 0
?_Checked_iterator_base@?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEPBUHostDevice@@XZ ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Checked_iterator_base
_TEXT	ENDS
PUBLIC	??_7?$ctype@D@std@@6B@				; std::ctype<char>::`vftable'
PUBLIC	??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z		; std::ctype<char>::ctype<char>
PUBLIC	??_R4?$ctype@D@std@@6B@				; std::ctype<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@D@std@@@8			; std::ctype<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@D@std@@8				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@D@std@@8				; std::ctype<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@D@std@@8			; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_tolower
PUBLIC	?do_tolower@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_tolower
PUBLIC	?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_toupper
PUBLIC	?do_toupper@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_toupper
PUBLIC	?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z	; std::ctype<char>::do_widen
PUBLIC	?do_widen@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_widen
PUBLIC	?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z	; std::ctype<char>::_Do_widen_s
PUBLIC	?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z	; std::ctype<char>::do_narrow
PUBLIC	?do_narrow@?$ctype@D@std@@MBEDDD@Z		; std::ctype<char>::do_narrow
PUBLIC	?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z	; std::ctype<char>::_Do_narrow_s
EXTRN	??_E?$ctype@D@std@@MAEPAXI@Z:PROC		; std::ctype<char>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ctype@D@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@D@std@@8 DD FLAT:??_R0?AV?$ctype@D@std@@@8 ; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT
??_R2?$ctype@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT
??_R3?$ctype@D@std@@8 DD 00H				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT
??_R0?AV?$ctype@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@D@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@D@std@@6B@ DD 00H				; std::ctype<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@D@std@@@8
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$ctype@D@std@@6B@
CONST	SEGMENT
??_7?$ctype@D@std@@6B@ DD FLAT:??_R4?$ctype@D@std@@6B@	; std::ctype<char>::`vftable'
	DD	FLAT:??_E?$ctype@D@std@@MAEPAXI@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEDDD@Z
	DD	FLAT:?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
CONST	ENDS
;	COMDAT ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
$T153674 = -16						; size = 16
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z PROC		; std::ctype<char>::ctype<char>, COMDAT
; _this$ = ecx

; 1784 : 		{	// construct from current locale

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Refs$[esp-4]
  00004	83 ec 10	 sub	 esp, 16			; 00000010H
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 1785 : 		_Init(_Lobj);

  0000a	8d 4c 24 04	 lea	 ecx, DWORD PTR $T153674[esp+20]
  0000e	51		 push	 ecx
  0000f	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
  00018	e8 00 00 00 00	 call	 __Getctype
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00022	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00025	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00028	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0002b	89 56 10	 mov	 DWORD PTR [esi+16], edx
  0002e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00031	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00034	83 c4 04	 add	 esp, 4

; 1786 : 		}

  00037	8b c6		 mov	 eax, esi
  00039	5e		 pop	 esi
  0003a	83 c4 10	 add	 esp, 16			; 00000010H
  0003d	c2 08 00	 ret	 8
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z ENDP		; std::ctype<char>::ctype<char>
_TEXT	ENDS
PUBLIC	?_Tidy@?$ctype@D@std@@IAEXXZ			; std::ctype<char>::_Tidy
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$ctype@D@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$ctype@D@std@@IAEXXZ PROC			; std::ctype<char>::_Tidy, COMDAT
; _this$ = ecx

; 1813 : 		if (0 < _Ctype._Delfl)

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	85 c0		 test	 eax, eax
  00005	7e 0d		 jle	 SHORT $LN6@Tidy@3

; 1814 : 			free((void *)_Ctype._Table);

  00007	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 _free
  00010	83 c4 04	 add	 esp, 4

; 1817 : 		}

  00013	c3		 ret	 0
$LN6@Tidy@3:

; 1815 : 		else if (_Ctype._Delfl < 0)

  00014	7d 0a		 jge	 SHORT $LN1@Tidy@3

; 1816 : 			delete[] (void *)_Ctype._Table;

  00016	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001f	59		 pop	 ecx
$LN1@Tidy@3:

; 1817 : 		}

  00020	c3		 ret	 0
?_Tidy@?$ctype@D@std@@IAEXXZ ENDP			; std::ctype<char>::_Tidy
_TEXT	ENDS
EXTRN	__Tolower:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_tolower@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 1821 : 		return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));

  00000	0f b6 44 24 04	 movzx	 eax, BYTE PTR __Ch$[esp-4]
  00005	83 c1 08	 add	 ecx, 8
  00008	51		 push	 ecx
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __Tolower
  0000f	83 c4 08	 add	 esp, 8

; 1822 : 		}

  00012	c2 04 00	 ret	 4
?do_tolower@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_tolower
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 1826 : 		{	// convert [_First, _Last) in place to lower case

  00000	53		 push	 ebx

; 1827 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 1828 : 		for (; _First != _Last; ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 19		 je	 SHORT $LN8@do_tolower
  0000e	57		 push	 edi
  0000f	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
$LL3@do_tolower:

; 1829 : 			*_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);

  00012	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __Tolower
  0001c	88 06		 mov	 BYTE PTR [esi], al
  0001e	46		 inc	 esi
  0001f	83 c4 08	 add	 esp, 8
  00022	3b f3		 cmp	 esi, ebx
  00024	75 ec		 jne	 SHORT $LL3@do_tolower
  00026	5f		 pop	 edi
$LN8@do_tolower:

; 1830 : 		return ((const _Elem *)_First);

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx

; 1831 : 		}

  0002b	c2 08 00	 ret	 8
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_tolower
_TEXT	ENDS
EXTRN	__Toupper:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_toupper@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 1835 : 		return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));

  00000	0f b6 44 24 04	 movzx	 eax, BYTE PTR __Ch$[esp-4]
  00005	83 c1 08	 add	 ecx, 8
  00008	51		 push	 ecx
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __Toupper
  0000f	83 c4 08	 add	 esp, 8

; 1836 : 		}

  00012	c2 04 00	 ret	 4
?do_toupper@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_toupper
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 1840 : 		{	// convert [_First, _Last) in place to upper case

  00000	53		 push	 ebx

; 1841 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 1842 : 		for (; _First != _Last; ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 19		 je	 SHORT $LN8@do_toupper
  0000e	57		 push	 edi
  0000f	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
$LL3@do_toupper:

; 1843 : 			*_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);

  00012	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __Toupper
  0001c	88 06		 mov	 BYTE PTR [esi], al
  0001e	46		 inc	 esi
  0001f	83 c4 08	 add	 esp, 8
  00022	3b f3		 cmp	 esi, ebx
  00024	75 ec		 jne	 SHORT $LL3@do_toupper
  00026	5f		 pop	 edi
$LN8@do_toupper:

; 1844 : 		return ((const _Elem *)_First);

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx

; 1845 : 		}

  0002b	c2 08 00	 ret	 8
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_toupper
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?do_widen@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 1849 : 		return (_Byte);

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Byte$[esp-4]

; 1850 : 		}

  00004	c2 04 00	 ret	 4
?do_widen@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_widen
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z PROC		; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 1856 : 		// assume there is enough space in _Dest
; 1857 : 		return _Do_widen_s(_First, _Last, _Dest, _Last - _First);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	56		 push	 esi
  00009	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000b	57		 push	 edi
  0000c	8b f8		 mov	 edi, eax
  0000e	2b fa		 sub	 edi, edx
  00010	57		 push	 edi
  00011	8b 7c 24 18	 mov	 edi, DWORD PTR __Dest$[esp+8]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0001a	52		 push	 edx
  0001b	ff d0		 call	 eax
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi

; 1858 : 		}

  0001f	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::do_widen
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Dest_size$ = 20					; size = 4
?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z PROC	; std::ctype<char>::_Do_widen_s, COMDAT
; _this$ = ecx

; 1862 : 		{	// widen chars in [_First, _Last)

  00000	53		 push	 ebx

; 1863 : 		_DEBUG_RANGE(_First, _Last);
; 1864 : 		_DEBUG_POINTER(_Dest);
; 1865 : 		_SCL_SECURE_ALWAYS_VALIDATE_RANGE(_Dest_size >= (size_t)(_Last - _First));

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __First$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 18	 mov	 ebp, DWORD PTR __Dest_size$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7c 24 18	 mov	 edi, DWORD PTR __Last$[esp+12]
  00010	8b f7		 mov	 esi, edi
  00012	2b f3		 sub	 esi, ebx
  00014	3b ee		 cmp	 ebp, esi
  00016	73 05		 jae	 SHORT $LN3@Do_widen_s
  00018	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Do_widen_s:

; 1866 : 		_CRT_SECURE_MEMCPY(_Dest, _Dest_size, _First, _Last - _First);

  0001d	8b 44 24 1c	 mov	 eax, DWORD PTR __Dest$[esp+12]
  00021	56		 push	 esi
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _memcpy_s
  0002a	83 c4 10	 add	 esp, 16			; 00000010H

; 1867 : 		return (_Last);

  0002d	8b c7		 mov	 eax, edi
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	5b		 pop	 ebx

; 1868 : 		}

  00033	c2 10 00	 ret	 16			; 00000010H
?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z ENDP	; std::ctype<char>::_Do_widen_s
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEDDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
___formal$ = 12						; size = 1
?do_narrow@?$ctype@D@std@@MBEDDD@Z PROC			; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 1872 : 		return (_Ch);

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Ch$[esp-4]

; 1873 : 		}

  00004	c2 08 00	 ret	 8
?do_narrow@?$ctype@D@std@@MBEDDD@Z ENDP			; std::ctype<char>::do_narrow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dflt$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z PROC		; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 1880 : 		// assume there is enough space in _Dest
; 1881 : 		return _Do_narrow_s(_First, _Last, _Dflt, _Dest, _Last - _First);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	56		 push	 esi
  00009	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000b	57		 push	 edi
  0000c	8b f8		 mov	 edi, eax
  0000e	2b fa		 sub	 edi, edx
  00010	57		 push	 edi
  00011	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dest$[esp+8]
  00015	57		 push	 edi
  00016	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dflt$[esp+12]
  0001a	57		 push	 edi
  0001b	50		 push	 eax
  0001c	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0001f	52		 push	 edx
  00020	ff d0		 call	 eax
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 1882 : 		}

  00024	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z ENDP		; std::ctype<char>::do_narrow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
__Dest$ = 20						; size = 4
__Dest_size$ = 24					; size = 4
?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z PROC	; std::ctype<char>::_Do_narrow_s, COMDAT
; _this$ = ecx

; 1887 : 		{	// narrow elements in [_First, _Last) to chars

  00000	53		 push	 ebx

; 1888 : 		_DEBUG_RANGE(_First, _Last);
; 1889 : 		_DEBUG_POINTER(_Dest);
; 1890 : 		_SCL_SECURE_ALWAYS_VALIDATE_RANGE(_Dest_size >= (size_t)(_Last - _First));

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __First$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 1c	 mov	 ebp, DWORD PTR __Dest_size$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7c 24 18	 mov	 edi, DWORD PTR __Last$[esp+12]
  00010	8b f7		 mov	 esi, edi
  00012	2b f3		 sub	 esi, ebx
  00014	3b ee		 cmp	 ebp, esi
  00016	73 05		 jae	 SHORT $LN3@Do_narrow_
  00018	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Do_narrow_:

; 1891 : 		_CRT_SECURE_MEMCPY(_Dest, _Dest_size, _First, _Last - _First);

  0001d	8b 44 24 20	 mov	 eax, DWORD PTR __Dest$[esp+12]
  00021	56		 push	 esi
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _memcpy_s
  0002a	83 c4 10	 add	 esp, 16			; 00000010H

; 1892 : 		return (_Last);

  0002d	8b c7		 mov	 eax, edi
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	5b		 pop	 ebx

; 1893 : 		}

  00033	c2 14 00	 ret	 20			; 00000014H
?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z ENDP	; std::ctype<char>::_Do_narrow_s
_TEXT	ENDS
PUBLIC	??1?$ctype@D@std@@MAE@XZ			; std::ctype<char>::~ctype<char>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$ctype@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$ctype@D@std@@MAE@XZ PROC				; std::ctype<char>::~ctype<char>, COMDAT
; _this$ = ecx

; 1801 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1802 : 		_Tidy();

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
  0000c	85 c0		 test	 eax, eax
  0000e	7e 14		 jle	 SHORT $LN14@ctype
  00010	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _free
  00019	83 c4 04	 add	 esp, 4

; 1803 : 		}

  0001c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00022	5e		 pop	 esi
  00023	c3		 ret	 0
$LN14@ctype:

; 1802 : 		_Tidy();

  00024	7d 0c		 jge	 SHORT $LN13@ctype
  00026	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0002f	83 c4 04	 add	 esp, 4
$LN13@ctype:

; 1803 : 		}

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00038	5e		 pop	 esi
  00039	c3		 ret	 0
??1?$ctype@D@std@@MAE@XZ ENDP				; std::ctype<char>::~ctype<char>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ctype@D@std@@MAEPAXI@Z PROC			; std::ctype<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
  0000c	85 c0		 test	 eax, eax
  0000e	7e 0b		 jle	 SHORT $LN16@scalar@9
  00010	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _free
  00019	eb 0b		 jmp	 SHORT $LN17@scalar@9
$LN16@scalar@9:
  0001b	7d 0c		 jge	 SHORT $LN6@scalar@9
  0001d	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00020	51		 push	 ecx
  00021	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN17@scalar@9:
  00026	83 c4 04	 add	 esp, 4
$LN6@scalar@9:
  00029	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0002e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00034	74 09		 je	 SHORT $LN15@scalar@9
  00036	56		 push	 esi
  00037	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003c	83 c4 04	 add	 esp, 4
$LN15@scalar@9:
  0003f	8b c6		 mov	 eax, esi
  00041	5e		 pop	 esi
  00042	c2 04 00	 ret	 4
??_G?$ctype@D@std@@MAEPAXI@Z ENDP			; std::ctype<char>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7?$ctype@_W@std@@6B@				; std::ctype<wchar_t>::`vftable'
PUBLIC	??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z	; std::ctype<wchar_t>::ctype<wchar_t>
PUBLIC	??_R4?$ctype@_W@std@@6B@			; std::ctype<wchar_t>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@_W@std@@@8			; std::ctype<wchar_t> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@_W@std@@8				; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@_W@std@@8				; std::ctype<wchar_t>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@_W@std@@8			; std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z	; std::ctype<wchar_t>::do_is
PUBLIC	?do_is@?$ctype@_W@std@@MBE_NF_W@Z		; std::ctype<wchar_t>::do_is
PUBLIC	?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z	; std::ctype<wchar_t>::do_scan_is
PUBLIC	?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z	; std::ctype<wchar_t>::do_scan_not
PUBLIC	?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z	; std::ctype<wchar_t>::do_tolower
PUBLIC	?do_tolower@?$ctype@_W@std@@MBE_W_W@Z		; std::ctype<wchar_t>::do_tolower
PUBLIC	?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z	; std::ctype<wchar_t>::do_toupper
PUBLIC	?do_toupper@?$ctype@_W@std@@MBE_W_W@Z		; std::ctype<wchar_t>::do_toupper
PUBLIC	?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z	; std::ctype<wchar_t>::do_widen
PUBLIC	?do_widen@?$ctype@_W@std@@MBE_WD@Z		; std::ctype<wchar_t>::do_widen
PUBLIC	?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z	; std::ctype<wchar_t>::_Do_widen_s
PUBLIC	?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z	; std::ctype<wchar_t>::do_narrow
PUBLIC	?do_narrow@?$ctype@_W@std@@MBED_WD@Z		; std::ctype<wchar_t>::do_narrow
PUBLIC	?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z ; std::ctype<wchar_t>::_Do_narrow_s
EXTRN	??_E?$ctype@_W@std@@MAEPAXI@Z:PROC		; std::ctype<wchar_t>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ctype@_W@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@_W@std@@8 DD FLAT:??_R0?AV?$ctype@_W@std@@@8 ; std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT
??_R2?$ctype@_W@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@_W@std@@8 ; std::ctype<wchar_t>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT
??_R3?$ctype@_W@std@@8 DD 00H				; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT
??_R0?AV?$ctype@_W@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<wchar_t> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@_W@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@_W@std@@6B@ DD 00H				; std::ctype<wchar_t>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@_W@std@@@8
	DD	FLAT:??_R3?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$ctype@_W@std@@6B@
CONST	SEGMENT
??_7?$ctype@_W@std@@6B@ DD FLAT:??_R4?$ctype@_W@std@@6B@ ; std::ctype<wchar_t>::`vftable'
	DD	FLAT:??_E?$ctype@_W@std@@MAEPAXI@Z
	DD	FLAT:?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z
	DD	FLAT:?do_is@?$ctype@_W@std@@MBE_NF_W@Z
	DD	FLAT:?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
	DD	FLAT:?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
	DD	FLAT:?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
	DD	FLAT:?do_tolower@?$ctype@_W@std@@MBE_W_W@Z
	DD	FLAT:?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
	DD	FLAT:?do_toupper@?$ctype@_W@std@@MBE_W_W@Z
	DD	FLAT:?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z
	DD	FLAT:?do_widen@?$ctype@_W@std@@MBE_WD@Z
	DD	FLAT:?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z
	DD	FLAT:?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@_W@std@@MBED_WD@Z
	DD	FLAT:?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
CONST	ENDS
;	COMDAT ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
$T153795 = -16						; size = 16
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z PROC		; std::ctype<wchar_t>::ctype<wchar_t>, COMDAT
; _this$ = ecx

; 2025 : 		{	// construct from specified locale

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Refs$[esp-4]
  00004	83 ec 10	 sub	 esp, 16			; 00000010H
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 2026 : 		_Init(_Lobj);

  0000a	8d 4c 24 04	 lea	 ecx, DWORD PTR $T153795[esp+20]
  0000e	51		 push	 ecx
  0000f	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
  00018	e8 00 00 00 00	 call	 __Getctype
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00022	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00025	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00028	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0002b	89 56 10	 mov	 DWORD PTR [esi+16], edx
  0002e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00031	83 c4 04	 add	 esp, 4
  00034	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00037	e8 00 00 00 00	 call	 __Getcvt
  0003c	89 46 18	 mov	 DWORD PTR [esi+24], eax
  0003f	89 56 1c	 mov	 DWORD PTR [esi+28], edx

; 2027 : 		}

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	83 c4 10	 add	 esp, 16			; 00000010H
  00048	c2 08 00	 ret	 8
??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z ENDP		; std::ctype<wchar_t>::ctype<wchar_t>
_TEXT	ENDS
PUBLIC	?is@?$ctype@_W@std@@QBE_NF_W@Z			; std::ctype<wchar_t>::is
; Function compile flags: /Ogtpy
;	COMDAT ?is@?$ctype@_W@std@@QBE_NF_W@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__Ch$ = 12						; size = 2
?is@?$ctype@_W@std@@QBE_NF_W@Z PROC			; std::ctype<wchar_t>::is, COMDAT
; _this$ = ecx

; 1922 : 		return (do_is(_Maskval, _Ch));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00005	ff e0		 jmp	 eax
?is@?$ctype@_W@std@@QBE_NF_W@Z ENDP			; std::ctype<wchar_t>::is
_TEXT	ENDS
PUBLIC	??1?$ctype@_W@std@@MAE@XZ			; std::ctype<wchar_t>::~ctype<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$ctype@_W@std@@MAE@XZ
_TEXT	SEGMENT
??1?$ctype@_W@std@@MAE@XZ PROC				; std::ctype<wchar_t>::~ctype<wchar_t>, COMDAT
; _this$ = ecx

; 2040 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2041 : 		if (_Ctype._Delfl)

  00003	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
  0000d	74 0c		 je	 SHORT $LN9@ctype@2

; 2042 : 			free((void *)_Ctype._Table);

  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _free
  00018	83 c4 04	 add	 esp, 4
$LN9@ctype@2:

; 2043 : 		}

  0001b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00021	5e		 pop	 esi
  00022	c3		 ret	 0
??1?$ctype@_W@std@@MAE@XZ ENDP				; std::ctype<wchar_t>::~ctype<wchar_t>
_TEXT	ENDS
EXTRN	__Getwctype:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_is@?$ctype@_W@std@@MBE_NF_W@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__Ch$ = 12						; size = 2
?do_is@?$ctype@_W@std@@MBE_NF_W@Z PROC			; std::ctype<wchar_t>::do_is, COMDAT
; _this$ = ecx

; 2054 : 		return ((::_Getwctype(_Ch, &_Ctype) & _Maskval) != 0);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	51		 push	 ecx
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 __Getwctype
  0000e	83 c4 08	 add	 esp, 8
  00011	66 85 44 24 04	 test	 WORD PTR __Maskval$[esp-4], ax
  00016	b8 00 00 00 00	 mov	 eax, 0
  0001b	0f 95 c0	 setne	 al

; 2055 : 		}

  0001e	c2 08 00	 ret	 8
?do_is@?$ctype@_W@std@@MBE_NF_W@Z ENDP			; std::ctype<wchar_t>::do_is
_TEXT	ENDS
EXTRN	__Getwctypes:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z PROC		; std::ctype<wchar_t>::do_is, COMDAT
; _this$ = ecx

; 2060 : 		_DEBUG_RANGE(_First, _Last);
; 2061 : 		_DEBUG_POINTER(_Dest);
; 2062 : 		return (::_Getwctypes(_First, _Last, _Dest, &_Ctype));

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Dest$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	83 c1 08	 add	 ecx, 8
  0000b	51		 push	 ecx
  0000c	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Last$[esp]
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	52		 push	 edx
  00013	e8 00 00 00 00	 call	 __Getwctypes
  00018	83 c4 10	 add	 esp, 16			; 00000010H

; 2063 : 		}

  0001b	c2 0c 00	 ret	 12			; 0000000cH
?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z ENDP		; std::ctype<wchar_t>::do_is
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z PROC	; std::ctype<wchar_t>::do_scan_is, COMDAT
; _this$ = ecx

; 2067 : 		{	// find first in [_First, _Last) that fits mask classification

  00000	55		 push	 ebp

; 2068 : 		_DEBUG_RANGE(_First, _Last);
; 2069 : 		for (; _First != _Last && !is(_Maskval, *_First); ++_First)

  00001	8b 6c 24 10	 mov	 ebp, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	3b f5		 cmp	 esi, ebp
  0000f	74 1f		 je	 SHORT $LN10@do_scan_is
  00011	53		 push	 ebx
  00012	8b 5c 24 14	 mov	 ebx, DWORD PTR __Maskval$[esp+12]
$LL3@do_scan_is:
  00016	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00019	8b 17		 mov	 edx, DWORD PTR [edi]
  0001b	50		 push	 eax
  0001c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001f	53		 push	 ebx
  00020	8b cf		 mov	 ecx, edi
  00022	ff d0		 call	 eax
  00024	84 c0		 test	 al, al
  00026	75 07		 jne	 SHORT $LN11@do_scan_is
  00028	83 c6 02	 add	 esi, 2
  0002b	3b f5		 cmp	 esi, ebp
  0002d	75 e7		 jne	 SHORT $LL3@do_scan_is
$LN11@do_scan_is:
  0002f	5b		 pop	 ebx
$LN10@do_scan_is:
  00030	5f		 pop	 edi

; 2070 : 			;
; 2071 : 		return (_First);

  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp

; 2072 : 		}

  00035	c2 0c 00	 ret	 12			; 0000000cH
?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z ENDP	; std::ctype<wchar_t>::do_scan_is
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z PROC	; std::ctype<wchar_t>::do_scan_not, COMDAT
; _this$ = ecx

; 2076 : 		{	// find first in [_First, _Last) not fitting mask classification

  00000	55		 push	 ebp

; 2077 : 		_DEBUG_RANGE(_First, _Last);
; 2078 : 		for (; _First != _Last && is(_Maskval, *_First); ++_First)

  00001	8b 6c 24 10	 mov	 ebp, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	3b f5		 cmp	 esi, ebp
  0000f	74 1f		 je	 SHORT $LN10@do_scan_no
  00011	53		 push	 ebx
  00012	8b 5c 24 14	 mov	 ebx, DWORD PTR __Maskval$[esp+12]
$LL3@do_scan_no:
  00016	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00019	8b 17		 mov	 edx, DWORD PTR [edi]
  0001b	50		 push	 eax
  0001c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001f	53		 push	 ebx
  00020	8b cf		 mov	 ecx, edi
  00022	ff d0		 call	 eax
  00024	84 c0		 test	 al, al
  00026	74 07		 je	 SHORT $LN11@do_scan_no
  00028	83 c6 02	 add	 esi, 2
  0002b	3b f5		 cmp	 esi, ebp
  0002d	75 e7		 jne	 SHORT $LL3@do_scan_no
$LN11@do_scan_no:
  0002f	5b		 pop	 ebx
$LN10@do_scan_no:
  00030	5f		 pop	 edi

; 2079 : 			;
; 2080 : 		return (_First);

  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp

; 2081 : 		}

  00035	c2 0c 00	 ret	 12			; 0000000cH
?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z ENDP	; std::ctype<wchar_t>::do_scan_not
_TEXT	ENDS
EXTRN	__Towlower:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_tolower@?$ctype@_W@std@@MBE_W_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 2
?do_tolower@?$ctype@_W@std@@MBE_W_W@Z PROC		; std::ctype<wchar_t>::do_tolower, COMDAT
; _this$ = ecx

; 2085 : 		return (_Towlower(_Ch, &_Ctype));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	51		 push	 ecx
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 __Towlower
  0000e	83 c4 08	 add	 esp, 8

; 2086 : 		}

  00011	c2 04 00	 ret	 4
?do_tolower@?$ctype@_W@std@@MBE_W_W@Z ENDP		; std::ctype<wchar_t>::do_tolower
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z PROC	; std::ctype<wchar_t>::do_tolower, COMDAT
; _this$ = ecx

; 2090 : 		{	// convert [_First, _Last) in place to lower case

  00000	53		 push	 ebx

; 2091 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2092 : 		for (; _First != _Last; ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 1c		 je	 SHORT $LN8@do_tolower@2
  0000e	57		 push	 edi
  0000f	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
$LL3@do_tolower@2:

; 2093 : 			*_First = _Towlower(*_First, &_Ctype);

  00012	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __Towlower
  0001c	66 89 06	 mov	 WORD PTR [esi], ax
  0001f	83 c6 02	 add	 esi, 2
  00022	83 c4 08	 add	 esp, 8
  00025	3b f3		 cmp	 esi, ebx
  00027	75 e9		 jne	 SHORT $LL3@do_tolower@2
  00029	5f		 pop	 edi
$LN8@do_tolower@2:

; 2094 : 		return ((const _Elem *)_First);

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx

; 2095 : 		}

  0002e	c2 08 00	 ret	 8
?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z ENDP	; std::ctype<wchar_t>::do_tolower
_TEXT	ENDS
EXTRN	__Towupper:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_toupper@?$ctype@_W@std@@MBE_W_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 2
?do_toupper@?$ctype@_W@std@@MBE_W_W@Z PROC		; std::ctype<wchar_t>::do_toupper, COMDAT
; _this$ = ecx

; 2099 : 		return (_Towupper(_Ch, &_Ctype));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	51		 push	 ecx
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 __Towupper
  0000e	83 c4 08	 add	 esp, 8

; 2100 : 		}

  00011	c2 04 00	 ret	 4
?do_toupper@?$ctype@_W@std@@MBE_W_W@Z ENDP		; std::ctype<wchar_t>::do_toupper
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z PROC	; std::ctype<wchar_t>::do_toupper, COMDAT
; _this$ = ecx

; 2104 : 		{	// convert [_First, _Last) in place to upper case

  00000	53		 push	 ebx

; 2105 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2106 : 		for (; _First != _Last; ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 1c		 je	 SHORT $LN8@do_toupper@2
  0000e	57		 push	 edi
  0000f	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
$LL3@do_toupper@2:

; 2107 : 			*_First = _Towupper(*_First, &_Ctype);

  00012	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __Towupper
  0001c	66 89 06	 mov	 WORD PTR [esi], ax
  0001f	83 c6 02	 add	 esi, 2
  00022	83 c4 08	 add	 esp, 8
  00025	3b f3		 cmp	 esi, ebx
  00027	75 e9		 jne	 SHORT $LL3@do_toupper@2
  00029	5f		 pop	 edi
$LN8@do_toupper@2:

; 2108 : 		return ((const _Elem *)_First);

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx

; 2109 : 		}

  0002e	c2 08 00	 ret	 8
?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z ENDP	; std::ctype<wchar_t>::do_toupper
_TEXT	ENDS
PUBLIC	?_Dowiden@?$ctype@_W@std@@IBE_WD@Z		; std::ctype<wchar_t>::_Dowiden
EXTRN	__Mbrtowc:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Dowiden@?$ctype@_W@std@@IBE_WD@Z
_TEXT	SEGMENT
__Wc$ = -8						; size = 2
__Mbst$ = -4						; size = 4
__Byte$ = 8						; size = 1
?_Dowiden@?$ctype@_W@std@@IBE_WD@Z PROC			; std::ctype<wchar_t>::_Dowiden, COMDAT
; _this$ = ecx

; 2112 : 		{	// widen char

  00000	83 ec 08	 sub	 esp, 8

; 2113 : 		_Mbstinit(_Mbst);
; 2114 : 		wchar_t _Wc;
; 2115 : 		return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
; 2116 : 			? (wchar_t)WEOF : _Wc);

  00003	83 c1 18	 add	 ecx, 24			; 00000018H
  00006	51		 push	 ecx
  00007	8d 44 24 08	 lea	 eax, DWORD PTR __Mbst$[esp+12]
  0000b	50		 push	 eax
  0000c	6a 01		 push	 1
  0000e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Byte$[esp+16]
  00012	51		 push	 ecx
  00013	8d 54 24 10	 lea	 edx, DWORD PTR __Wc$[esp+24]
  00017	52		 push	 edx
  00018	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __Mbst$[esp+28], 0
  00020	e8 00 00 00 00	 call	 __Mbrtowc
  00025	83 c4 14	 add	 esp, 20			; 00000014H
  00028	85 c0		 test	 eax, eax
  0002a	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0002f	7c 04		 jl	 SHORT $LN4@Dowiden
  00031	0f b7 04 24	 movzx	 eax, WORD PTR __Wc$[esp+8]
$LN4@Dowiden:

; 2117 : 		}

  00035	83 c4 08	 add	 esp, 8
  00038	c2 04 00	 ret	 4
?_Dowiden@?$ctype@_W@std@@IBE_WD@Z ENDP			; std::ctype<wchar_t>::_Dowiden
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@_W@std@@MBE_WD@Z
_TEXT	SEGMENT
__Wc$153869 = -8					; size = 2
__Mbst$153868 = -4					; size = 4
$T153870 = 8						; size = 1
__Byte$ = 8						; size = 1
?do_widen@?$ctype@_W@std@@MBE_WD@Z PROC			; std::ctype<wchar_t>::do_widen, COMDAT
; _this$ = ecx

; 2120 : 		{	// widen char

  00000	83 ec 08	 sub	 esp, 8

; 2121 : 		return (_Dowiden(_Byte));

  00003	8a 44 24 0c	 mov	 al, BYTE PTR __Byte$[esp+4]
  00007	83 c1 18	 add	 ecx, 24			; 00000018H
  0000a	51		 push	 ecx
  0000b	8d 4c 24 08	 lea	 ecx, DWORD PTR __Mbst$153868[esp+12]
  0000f	51		 push	 ecx
  00010	6a 01		 push	 1
  00012	8d 54 24 18	 lea	 edx, DWORD PTR $T153870[esp+16]
  00016	88 44 24 18	 mov	 BYTE PTR $T153870[esp+16], al
  0001a	52		 push	 edx
  0001b	8d 44 24 10	 lea	 eax, DWORD PTR __Wc$153869[esp+24]
  0001f	50		 push	 eax
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __Mbst$153868[esp+28], 0
  00028	e8 00 00 00 00	 call	 __Mbrtowc
  0002d	83 c4 14	 add	 esp, 20			; 00000014H
  00030	85 c0		 test	 eax, eax
  00032	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00037	7c 04		 jl	 SHORT $LN6@do_widen
  00039	0f b7 04 24	 movzx	 eax, WORD PTR __Wc$153869[esp+8]
$LN6@do_widen:

; 2122 : 		}

  0003d	83 c4 08	 add	 esp, 8
  00040	c2 04 00	 ret	 4
?do_widen@?$ctype@_W@std@@MBE_WD@Z ENDP			; std::ctype<wchar_t>::do_widen
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z PROC		; std::ctype<wchar_t>::do_widen, COMDAT
; _this$ = ecx

; 2128 : 		// assume there is enough space in _Dest
; 2129 : 		return _Do_widen_s(_First, _Last, _Dest, _Last - _First);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	56		 push	 esi
  00009	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000b	57		 push	 edi
  0000c	8b f8		 mov	 edi, eax
  0000e	2b fa		 sub	 edi, edx
  00010	57		 push	 edi
  00011	8b 7c 24 18	 mov	 edi, DWORD PTR __Dest$[esp+8]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0001a	52		 push	 edx
  0001b	ff d0		 call	 eax
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi

; 2130 : 		}

  0001f	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z ENDP		; std::ctype<wchar_t>::do_widen
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z
_TEXT	SEGMENT
__Wc$153883 = 8						; size = 2
__First$ = 8						; size = 4
$T153884 = 12						; size = 1
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Mbst$153882 = 20					; size = 4
__Dest_size$ = 20					; size = 4
?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z PROC	; std::ctype<wchar_t>::_Do_widen_s, COMDAT
; _this$ = ecx

; 2134 : 		{	// widen chars in [_First, _Last)

  00000	53		 push	 ebx

; 2135 : 		_DEBUG_RANGE(_First, _Last);
; 2136 : 		_DEBUG_POINTER(_Dest);
; 2137 : 		_SCL_SECURE_ALWAYS_VALIDATE_RANGE(_Dest_size >= (size_t)(_Last - _First));

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	8b c3		 mov	 eax, ebx
  0000c	2b c6		 sub	 eax, esi
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx
  00011	39 44 24 1c	 cmp	 DWORD PTR __Dest_size$[esp+8], eax
  00015	73 05		 jae	 SHORT $LN6@Do_widen_s@2
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN6@Do_widen_s@2:

; 2138 : 		for (; _First != _Last; ++_First, ++_Dest)

  0001c	3b f3		 cmp	 esi, ebx
  0001e	74 4a		 je	 SHORT $LN16@Do_widen_s@2
  00020	55		 push	 ebp
  00021	8d 6f 18	 lea	 ebp, DWORD PTR [edi+24]
  00024	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dest$[esp+12]
$LL3@Do_widen_s@2:

; 2139 : 			*_Dest = _Dowiden(*_First);

  00028	8a 0e		 mov	 cl, BYTE PTR [esi]
  0002a	55		 push	 ebp
  0002b	8d 54 24 24	 lea	 edx, DWORD PTR __Mbst$153882[esp+16]
  0002f	52		 push	 edx
  00030	6a 01		 push	 1
  00032	8d 44 24 24	 lea	 eax, DWORD PTR $T153884[esp+24]
  00036	88 4c 24 24	 mov	 BYTE PTR $T153884[esp+24], cl
  0003a	50		 push	 eax
  0003b	8d 4c 24 24	 lea	 ecx, DWORD PTR __Wc$153883[esp+28]
  0003f	51		 push	 ecx
  00040	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR __Mbst$153882[esp+32], 0
  00048	e8 00 00 00 00	 call	 __Mbrtowc
  0004d	83 c4 14	 add	 esp, 20			; 00000014H
  00050	85 c0		 test	 eax, eax
  00052	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00057	7c 05		 jl	 SHORT $LN13@Do_widen_s@2
  00059	0f b7 44 24 14	 movzx	 eax, WORD PTR __Wc$153883[esp+12]
$LN13@Do_widen_s@2:
  0005e	66 89 07	 mov	 WORD PTR [edi], ax
  00061	46		 inc	 esi
  00062	83 c7 02	 add	 edi, 2
  00065	3b f3		 cmp	 esi, ebx
  00067	75 bf		 jne	 SHORT $LL3@Do_widen_s@2
  00069	5d		 pop	 ebp
$LN16@Do_widen_s@2:
  0006a	5f		 pop	 edi

; 2140 : 		return (_First);

  0006b	8b c6		 mov	 eax, esi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx

; 2141 : 		}

  0006f	c2 10 00	 ret	 16			; 00000010H
?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z ENDP	; std::ctype<wchar_t>::_Do_widen_s
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?_Donarrow@?$ctype@_W@std@@IBED_WD@Z		; std::ctype<wchar_t>::_Donarrow
EXTRN	__Wcrtomb:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Donarrow@?$ctype@_W@std@@IBED_WD@Z
_TEXT	SEGMENT
__Mbst$ = -16						; size = 4
__Buf$ = -12						; size = 5
__$ArrayPad$ = -4					; size = 4
__Ch$ = 8						; size = 2
__Dflt$ = 12						; size = 1
?_Donarrow@?$ctype@_W@std@@IBED_WD@Z PROC		; std::ctype<wchar_t>::_Donarrow, COMDAT
; _this$ = ecx

; 2144 : 		{	// narrow element to char

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 0c	 mov	 DWORD PTR __$ArrayPad$[esp+16], eax

; 2145 : 		char _Buf[MB_LEN_MAX];
; 2146 : 		_Mbstinit(_Mbst);
; 2147 : 		return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
; 2148 : 			? _Dflt : _Buf[0]);

  0000e	83 c1 18	 add	 ecx, 24			; 00000018H
  00011	51		 push	 ecx
  00012	8b 4c 24 18	 mov	 ecx, DWORD PTR __Ch$[esp+16]
  00016	8d 44 24 04	 lea	 eax, DWORD PTR __Mbst$[esp+20]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	8d 54 24 10	 lea	 edx, DWORD PTR __Buf$[esp+28]
  00020	52		 push	 edx
  00021	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __Mbst$[esp+32], 0
  00029	e8 00 00 00 00	 call	 __Wcrtomb
  0002e	83 c4 10	 add	 esp, 16			; 00000010H
  00031	83 f8 01	 cmp	 eax, 1
  00034	8a 44 24 18	 mov	 al, BYTE PTR __Dflt$[esp+12]
  00038	75 04		 jne	 SHORT $LN4@Donarrow
  0003a	8a 44 24 04	 mov	 al, BYTE PTR __Buf$[esp+16]
$LN4@Donarrow:

; 2149 : 		}

  0003e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16]
  00042	33 cc		 xor	 ecx, esp
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	83 c4 10	 add	 esp, 16			; 00000010H
  0004c	c2 08 00	 ret	 8
?_Donarrow@?$ctype@_W@std@@IBED_WD@Z ENDP		; std::ctype<wchar_t>::_Donarrow
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT ?do_narrow@?$ctype@_W@std@@MBED_WD@Z
_TEXT	SEGMENT
__Mbst$153906 = -16					; size = 4
__Buf$153905 = -12					; size = 5
__$ArrayPad$ = -4					; size = 4
__Ch$ = 8						; size = 2
__Dflt$ = 12						; size = 1
?do_narrow@?$ctype@_W@std@@MBED_WD@Z PROC		; std::ctype<wchar_t>::do_narrow, COMDAT
; _this$ = ecx

; 2152 : 		{	// narrow element to char

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 0c	 mov	 DWORD PTR __$ArrayPad$[esp+16], eax

; 2153 : 		return (_Donarrow(_Ch, _Dflt));

  0000e	83 c1 18	 add	 ecx, 24			; 00000018H
  00011	51		 push	 ecx
  00012	8b 4c 24 18	 mov	 ecx, DWORD PTR __Ch$[esp+16]
  00016	8d 44 24 04	 lea	 eax, DWORD PTR __Mbst$153906[esp+20]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	8d 54 24 10	 lea	 edx, DWORD PTR __Buf$153905[esp+28]
  00020	52		 push	 edx
  00021	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __Mbst$153906[esp+32], 0
  00029	e8 00 00 00 00	 call	 __Wcrtomb
  0002e	83 c4 10	 add	 esp, 16			; 00000010H
  00031	83 f8 01	 cmp	 eax, 1
  00034	8a 44 24 18	 mov	 al, BYTE PTR __Dflt$[esp+12]
  00038	75 04		 jne	 SHORT $LN6@do_narrow
  0003a	8a 44 24 04	 mov	 al, BYTE PTR __Buf$153905[esp+16]
$LN6@do_narrow:

; 2154 : 		}

  0003e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16]
  00042	33 cc		 xor	 ecx, esp
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	83 c4 10	 add	 esp, 16			; 00000010H
  0004c	c2 08 00	 ret	 8
?do_narrow@?$ctype@_W@std@@MBED_WD@Z ENDP		; std::ctype<wchar_t>::do_narrow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dflt$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z PROC	; std::ctype<wchar_t>::do_narrow, COMDAT
; _this$ = ecx

; 2161 : 		// assume there is enough space in _Dest
; 2162 : 		return _Do_narrow_s(_First, _Last, _Dflt, _Dest, _Last - _First);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	56		 push	 esi
  00009	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000b	57		 push	 edi
  0000c	8b f8		 mov	 edi, eax
  0000e	2b fa		 sub	 edi, edx
  00010	d1 ff		 sar	 edi, 1
  00012	57		 push	 edi
  00013	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dest$[esp+8]
  00017	57		 push	 edi
  00018	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dflt$[esp+12]
  0001c	57		 push	 edi
  0001d	50		 push	 eax
  0001e	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00021	52		 push	 edx
  00022	ff d0		 call	 eax
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi

; 2163 : 		}

  00026	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z ENDP	; std::ctype<wchar_t>::do_narrow
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT ?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z
_TEXT	SEGMENT
__Mbst$153922 = -16					; size = 4
__Buf$153921 = -12					; size = 5
__$ArrayPad$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dflt$ = 16						; size = 1
__Dest$ = 20						; size = 4
__Dest_size$ = 24					; size = 4
?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z PROC	; std::ctype<wchar_t>::_Do_narrow_s, COMDAT
; _this$ = ecx

; 2169 : 		{	// narrow elements in [_First, _Last) to chars

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 0c	 mov	 DWORD PTR __$ArrayPad$[esp+16], eax
  0000e	53		 push	 ebx
  0000f	55		 push	 ebp

; 2170 : 		_DEBUG_RANGE(_First, _Last);
; 2171 : 		_DEBUG_POINTER(_Dest);
; 2172 : 		_SCL_SECURE_ALWAYS_VALIDATE_RANGE(_Dest_size >= (size_t)(_Last - _First));

  00010	8b 6c 24 20	 mov	 ebp, DWORD PTR __Last$[esp+20]
  00014	56		 push	 esi
  00015	8b 74 24 20	 mov	 esi, DWORD PTR __First$[esp+24]
  00019	8b c5		 mov	 eax, ebp
  0001b	2b c6		 sub	 eax, esi
  0001d	d1 f8		 sar	 eax, 1
  0001f	57		 push	 edi
  00020	8b 7c 24 30	 mov	 edi, DWORD PTR __Dest$[esp+28]
  00024	8b d9		 mov	 ebx, ecx
  00026	39 44 24 34	 cmp	 DWORD PTR __Dest_size$[esp+28], eax
  0002a	73 05		 jae	 SHORT $LN6@Do_narrow_@2
  0002c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN6@Do_narrow_@2:

; 2173 : 		for (; _First != _Last; ++_First, ++_Dest)

  00031	3b f5		 cmp	 esi, ebp
  00033	74 39		 je	 SHORT $LN16@Do_narrow_@2
  00035	83 c3 18	 add	 ebx, 24			; 00000018H
$LL3@Do_narrow_@2:

; 2174 : 			*_Dest = _Donarrow(*_First, _Dflt);

  00038	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0003b	53		 push	 ebx
  0003c	8d 4c 24 14	 lea	 ecx, DWORD PTR __Mbst$153922[esp+36]
  00040	51		 push	 ecx
  00041	50		 push	 eax
  00042	8d 54 24 20	 lea	 edx, DWORD PTR __Buf$153921[esp+44]
  00046	52		 push	 edx
  00047	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR __Mbst$153922[esp+48], 0
  0004f	e8 00 00 00 00	 call	 __Wcrtomb
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	83 f8 01	 cmp	 eax, 1
  0005a	8a 44 24 2c	 mov	 al, BYTE PTR __Dflt$[esp+28]
  0005e	75 04		 jne	 SHORT $LN13@Do_narrow_@2
  00060	8a 44 24 14	 mov	 al, BYTE PTR __Buf$153921[esp+32]
$LN13@Do_narrow_@2:
  00064	88 07		 mov	 BYTE PTR [edi], al
  00066	83 c6 02	 add	 esi, 2
  00069	47		 inc	 edi
  0006a	3b f5		 cmp	 esi, ebp
  0006c	75 ca		 jne	 SHORT $LL3@Do_narrow_@2
$LN16@Do_narrow_@2:

; 2175 : 		return (_First);
; 2176 : 		}

  0006e	8b 4c 24 1c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+32]
  00072	5f		 pop	 edi
  00073	8b c6		 mov	 eax, esi
  00075	5e		 pop	 esi
  00076	5d		 pop	 ebp
  00077	5b		 pop	 ebx
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	c2 14 00	 ret	 20			; 00000014H
?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z ENDP	; std::ctype<wchar_t>::_Do_narrow_s
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ctype@_W@std@@MAEPAXI@Z PROC			; std::ctype<wchar_t>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
  0000d	74 0c		 je	 SHORT $LN4@scalar@10
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _free
  00018	83 c4 04	 add	 esp, 4
$LN4@scalar@10:
  0001b	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00026	74 09		 je	 SHORT $LN11@scalar@10
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4
$LN11@scalar@10:
  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	c2 04 00	 ret	 4
??_G?$ctype@_W@std@@MAEPAXI@Z ENDP			; std::ctype<wchar_t>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	_ToCustHyperlink
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
;	COMDAT _ToCustHyperlink
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_ctrlId$ = 12						; size = 4
_hFont$ = 16						; size = 4
_ToCustHyperlink PROC					; COMDAT

; 538  : {

  00000	53		 push	 ebx

; 539  : 	HWND hwndCtrl = GetDlgItem (hwndDlg, ctrlId);

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _hwndDlg$[esp]
  00005	55		 push	 ebp
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7c 24 18	 mov	 edi, DWORD PTR _ctrlId$[esp+12]
  0000c	57		 push	 edi
  0000d	53		 push	 ebx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8

; 540  : 
; 541  : 	SendMessage (hwndCtrl, WM_SETFONT, (WPARAM) hFont, 0);

  00014	8b 6c 24 1c	 mov	 ebp, DWORD PTR _hFont$[esp+12]
  00018	6a 00		 push	 0
  0001a	55		 push	 ebp
  0001b	8b f0		 mov	 esi, eax
  0001d	6a 30		 push	 48			; 00000030H
  0001f	56		 push	 esi
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 542  : 
; 543  : 	SetWindowLongPtr (hwndCtrl, GWLP_USERDATA, (LONG_PTR) GetWindowLongPtr (hwndCtrl, GWLP_WNDPROC));

  00026	6a fc		 push	 -4			; fffffffcH
  00028	56		 push	 esi
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  0002f	50		 push	 eax
  00030	6a eb		 push	 -21			; ffffffebH
  00032	56		 push	 esi
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12

; 544  : 	SetWindowLongPtr (hwndCtrl, GWLP_WNDPROC, (LONG_PTR) HyperlinkProc);

  00039	68 00 00 00 00	 push	 OFFSET ?HyperlinkProc@@YGJPAUHWND__@@IIJ@Z ; HyperlinkProc
  0003e	6a fc		 push	 -4			; fffffffcH
  00040	56		 push	 esi
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12

; 545  : 
; 546  : 	// Resize the field according to its actual size in pixels and move it if centered or right-aligned.
; 547  : 	// This should be done again if the link text changes.
; 548  : 	AccommodateTextField (hwndDlg, ctrlId, TRUE, hFont);

  00047	55		 push	 ebp
  00048	6a 01		 push	 1
  0004a	57		 push	 edi
  0004b	53		 push	 ebx
  0004c	e8 00 00 00 00	 call	 _AccommodateTextField
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5d		 pop	 ebp

; 549  : 
; 550  : 	return TRUE;

  00057	b8 01 00 00 00	 mov	 eax, 1
  0005c	5b		 pop	 ebx

; 551  : }

  0005d	c3		 ret	 0
_ToCustHyperlink ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _StaticModelessWaitDlgProc@16
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_msg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_StaticModelessWaitDlgProc@16 PROC			; COMDAT

; 831  : 	WORD lw = LOWORD (wParam);
; 832  : 
; 833  : 	switch (msg)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _msg$[esp-4]
  00004	83 e8 10	 sub	 eax, 16			; 00000010H
  00007	74 77		 je	 SHORT $LN1@StaticMode
  00009	2d 00 01 00 00	 sub	 eax, 256		; 00000100H
  0000e	74 1a		 je	 SHORT $LN5@StaticMode
  00010	83 e8 01	 sub	 eax, 1

; 854  : 	}
; 855  : 
; 856  : 	return 0;

  00013	75 10		 jne	 SHORT $LN15@StaticMode
  00015	8b 44 24 0c	 mov	 eax, DWORD PTR _wParam$[esp-4]
  00019	66 83 f8 01	 cmp	 ax, 1
  0001d	74 78		 je	 SHORT $LN2@StaticMode

; 840  : 		}
; 841  : 
; 842  : 	case WM_COMMAND:
; 843  : 
; 844  : 		if (lw == IDOK || lw == IDCANCEL)

  0001f	66 83 f8 02	 cmp	 ax, 2
  00023	74 72		 je	 SHORT $LN2@StaticMode
$LN15@StaticMode:

; 845  : 			return 1;
; 846  : 
; 847  : 		return 0;

  00025	33 c0		 xor	 eax, eax

; 857  : }

  00027	c2 10 00	 ret	 16			; 00000010H
$LN5@StaticMode:
  0002a	56		 push	 esi

; 834  : 	{
; 835  : 	case WM_INITDIALOG:
; 836  : 		{
; 837  : 			LocalizeDialog (hwndDlg, NULL);

  0002b	8b 74 24 08	 mov	 esi, DWORD PTR _hwndDlg$[esp]
  0002f	68 45 55 52 54	 push	 1414681925		; 54525545H
  00034	6a eb		 push	 -21			; ffffffebH
  00036	56		 push	 esi
  00037	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LastDialogId, 0
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserFont
  0004c	6a 00		 push	 0
  0004e	50		 push	 eax
  0004f	6a 30		 push	 48			; 00000030H
  00051	56		 push	 esi
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_1BG@INDNNNCG@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?$AA@
  0005d	56		 push	 esi
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserFont
  00069	85 c0		 test	 eax, eax
  0006b	74 0d		 je	 SHORT $LN10@StaticMode
  0006d	50		 push	 eax
  0006e	68 00 00 00 00	 push	 OFFSET ?LocalizeDialogEnum@@YGHPAUHWND__@@J@Z ; LocalizeDialogEnum
  00073	56		 push	 esi
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumChildWindows@12
$LN10@StaticMode:

; 838  : 
; 839  : 			return 0;

  0007a	33 c0		 xor	 eax, eax
  0007c	5e		 pop	 esi

; 857  : }

  0007d	c2 10 00	 ret	 16			; 00000010H
$LN1@StaticMode:

; 848  : 
; 849  : 
; 850  : 	case WM_CLOSE:
; 851  : 		StaticModelessWaitDlgHandle = NULL;
; 852  : 		EndDialog (hwndDlg, 0);

  00080	8b 4c 24 04	 mov	 ecx, DWORD PTR _hwndDlg$[esp-4]
  00084	6a 00		 push	 0
  00086	51		 push	 ecx
  00087	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _StaticModelessWaitDlgHandle, 0
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
$LN2@StaticMode:

; 853  : 		return 1;

  00097	b8 01 00 00 00	 mov	 eax, 1

; 857  : }

  0009c	c2 10 00	 ret	 16			; 00000010H
_StaticModelessWaitDlgProc@16 ENDP
_TEXT	ENDS
PUBLIC	_DisplayStaticModelessWaitDlg
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__CreateDialogParamW@20:PROC
; Function compile flags: /Ogtpy
;	COMDAT _DisplayStaticModelessWaitDlg
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_DisplayStaticModelessWaitDlg PROC			; COMDAT

; 863  : 	if (StaticModelessWaitDlgHandle != NULL)

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _StaticModelessWaitDlgHandle, 0
  00007	75 40		 jne	 SHORT $LN2@DisplaySta

; 864  : 		return;	// Already shown
; 865  : 
; 866  : 	StaticModelessWaitDlgHandle = CreateDialogParamW (hInst, MAKEINTRESOURCEW (IDD_STATIC_MODELESS_WAIT_DLG), parent, (DLGPROC) StaticModelessWaitDlgProc, (LPARAM) 0);

  00009	8b 44 24 04	 mov	 eax, DWORD PTR _parent$[esp-4]
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00013	6a 00		 push	 0
  00015	68 00 00 00 00	 push	 OFFSET _StaticModelessWaitDlgProc@16
  0001a	50		 push	 eax
  0001b	68 99 13 00 00	 push	 5017			; 00001399H
  00020	51		 push	 ecx
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20

; 867  : 
; 868  : 	ShowWindow (StaticModelessWaitDlgHandle, SW_SHOWNORMAL);

  00027	6a 01		 push	 1
  00029	50		 push	 eax
  0002a	a3 00 00 00 00	 mov	 DWORD PTR _StaticModelessWaitDlgHandle, eax
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 869  : 
; 870  : 	// Allow synchronous use with the GUI being instantly and fully rendered
; 871  : 	ProcessPaintMessages (StaticModelessWaitDlgHandle, 500);

  00035	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _StaticModelessWaitDlgHandle
  0003b	68 f4 01 00 00	 push	 500			; 000001f4H
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 _ProcessPaintMessages
  00046	83 c4 08	 add	 esp, 8
$LN2@DisplaySta:

; 872  : }

  00049	c3		 ret	 0
_DisplayStaticModelessWaitDlg ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@CMNICGGD@Global?2TrueCrypt?5System?5Encrypti@ ; `string'
PUBLIC	_CreateSysEncMutex
;	COMDAT ??_C@_0CK@CMNICGGD@Global?2TrueCrypt?5System?5Encrypti@
CONST	SEGMENT
??_C@_0CK@CMNICGGD@Global?2TrueCrypt?5System?5Encrypti@ DB 'Global\TrueCr'
	DB	'ypt System Encryption Wizard', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _CreateSysEncMutex
_TEXT	SEGMENT
_CreateSysEncMutex PROC					; COMDAT

; 1656 : 	return TCCreateMutex (&hSysEncMutex, TC_MUTEX_NAME_SYSENC);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hSysEncMutex@@3RAXA ; hSysEncMutex
  00005	85 c0		 test	 eax, eax
  00007	75 50		 jne	 SHORT $LN3@CreateSysE
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@CMNICGGD@Global?2TrueCrypt?5System?5Encrypti@
  0000e	6a 01		 push	 1
  00010	50		 push	 eax
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateMutexA@12
  00017	a3 00 00 00 00	 mov	 DWORD PTR ?hSysEncMutex@@3RAXA, eax ; hSysEncMutex
  0001c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hSysEncMutex@@3RAXA ; hSysEncMutex
  00022	85 c9		 test	 ecx, ecx
  00024	74 30		 je	 SHORT $LN8@CreateSysE
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0002c	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  00031	75 26		 jne	 SHORT $LN3@CreateSysE
  00033	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hSysEncMutex@@3RAXA ; hSysEncMutex
  00039	52		 push	 edx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hSysEncMutex@@3RAXA ; hSysEncMutex
  00045	50		 push	 eax
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  0004c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hSysEncMutex@@3RAXA, 0 ; hSysEncMutex
$LN8@CreateSysE:
  00056	33 c0		 xor	 eax, eax

; 1657 : }

  00058	c3		 ret	 0

; 1656 : 	return TCCreateMutex (&hSysEncMutex, TC_MUTEX_NAME_SYSENC);

$LN3@CreateSysE:
  00059	b8 01 00 00 00	 mov	 eax, 1

; 1657 : }

  0005e	c3		 ret	 0
_CreateSysEncMutex ENDP
_TEXT	ENDS
PUBLIC	_CloseSysEncMutex
; Function compile flags: /Ogtpy
;	COMDAT _CloseSysEncMutex
_TEXT	SEGMENT
_CloseSysEncMutex PROC					; COMDAT

; 1669 : 	TCCloseMutex (&hSysEncMutex);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hSysEncMutex@@3RAXA ; hSysEncMutex
  00005	85 c0		 test	 eax, eax
  00007	74 2c		 je	 SHORT $LN3@CloseSysEn
  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hSysEncMutex@@3RAXA ; hSysEncMutex
  0000f	51		 push	 ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  00016	85 c0		 test	 eax, eax
  00018	74 1b		 je	 SHORT $LN3@CloseSysEn
  0001a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hSysEncMutex@@3RAXA ; hSysEncMutex
  00020	52		 push	 edx
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00027	85 c0		 test	 eax, eax
  00029	74 0a		 je	 SHORT $LN3@CloseSysEn
  0002b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hSysEncMutex@@3RAXA, 0 ; hSysEncMutex
$LN3@CloseSysEn:

; 1670 : }

  00035	c3		 ret	 0
_CloseSysEncMutex ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@NNPMGACL@Global?2TrueCrypt?5In?9Place?5Encryp@ ; `string'
PUBLIC	_CreateNonSysInplaceEncMutex
;	COMDAT ??_C@_0CM@NNPMGACL@Global?2TrueCrypt?5In?9Place?5Encryp@
CONST	SEGMENT
??_C@_0CM@NNPMGACL@Global?2TrueCrypt?5In?9Place?5Encryp@ DB 'Global\TrueC'
	DB	'rypt In-Place Encryption Wizard', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _CreateNonSysInplaceEncMutex
_TEXT	SEGMENT
_CreateNonSysInplaceEncMutex PROC			; COMDAT

; 1676 : 	return TCCreateMutex (&hNonSysInplaceEncMutex, TC_MUTEX_NAME_NONSYS_INPLACE_ENC);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA ; hNonSysInplaceEncMutex
  00005	85 c0		 test	 eax, eax
  00007	75 50		 jne	 SHORT $LN3@CreateNonS
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@NNPMGACL@Global?2TrueCrypt?5In?9Place?5Encryp@
  0000e	6a 01		 push	 1
  00010	50		 push	 eax
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateMutexA@12
  00017	a3 00 00 00 00	 mov	 DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA, eax ; hNonSysInplaceEncMutex
  0001c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA ; hNonSysInplaceEncMutex
  00022	85 c9		 test	 ecx, ecx
  00024	74 30		 je	 SHORT $LN8@CreateNonS
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0002c	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  00031	75 26		 jne	 SHORT $LN3@CreateNonS
  00033	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA ; hNonSysInplaceEncMutex
  00039	52		 push	 edx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA ; hNonSysInplaceEncMutex
  00045	50		 push	 eax
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  0004c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA, 0 ; hNonSysInplaceEncMutex
$LN8@CreateNonS:
  00056	33 c0		 xor	 eax, eax

; 1677 : }

  00058	c3		 ret	 0

; 1676 : 	return TCCreateMutex (&hNonSysInplaceEncMutex, TC_MUTEX_NAME_NONSYS_INPLACE_ENC);

$LN3@CreateNonS:
  00059	b8 01 00 00 00	 mov	 eax, 1

; 1677 : }

  0005e	c3		 ret	 0
_CreateNonSysInplaceEncMutex ENDP
_TEXT	ENDS
PUBLIC	_CloseNonSysInplaceEncMutex
; Function compile flags: /Ogtpy
;	COMDAT _CloseNonSysInplaceEncMutex
_TEXT	SEGMENT
_CloseNonSysInplaceEncMutex PROC			; COMDAT

; 1688 : 	TCCloseMutex (&hNonSysInplaceEncMutex);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA ; hNonSysInplaceEncMutex
  00005	85 c0		 test	 eax, eax
  00007	74 2c		 je	 SHORT $LN3@CloseNonSy
  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA ; hNonSysInplaceEncMutex
  0000f	51		 push	 ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  00016	85 c0		 test	 eax, eax
  00018	74 1b		 je	 SHORT $LN3@CloseNonSy
  0001a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA ; hNonSysInplaceEncMutex
  00020	52		 push	 edx
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00027	85 c0		 test	 eax, eax
  00029	74 0a		 je	 SHORT $LN3@CloseNonSy
  0002b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA, 0 ; hNonSysInplaceEncMutex
$LN3@CloseNonSy:

; 1689 : }

  00035	c3		 ret	 0
_CloseNonSysInplaceEncMutex ENDP
_TEXT	ENDS
PUBLIC	_NonSysInplaceEncInProgressElsewhere
; Function compile flags: /Ogtpy
;	COMDAT _NonSysInplaceEncInProgressElsewhere
_TEXT	SEGMENT
_NonSysInplaceEncInProgressElsewhere PROC		; COMDAT

; 1695 : 	return (!InstanceHasNonSysInplaceEncMutex () 
; 1696 : 		&& MutexExistsOnSystem (TC_MUTEX_NAME_NONSYS_INPLACE_ENC));

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA ; hNonSysInplaceEncMutex
  00005	85 c0		 test	 eax, eax
  00007	75 17		 jne	 SHORT $LN3@NonSysInpl
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@NNPMGACL@Global?2TrueCrypt?5In?9Place?5Encryp@
  0000e	e8 00 00 00 00	 call	 _MutexExistsOnSystem
  00013	83 c4 04	 add	 esp, 4
  00016	85 c0		 test	 eax, eax
  00018	74 06		 je	 SHORT $LN3@NonSysInpl
  0001a	b8 01 00 00 00	 mov	 eax, 1

; 1697 : }

  0001f	c3		 ret	 0
$LN3@NonSysInpl:

; 1695 : 	return (!InstanceHasNonSysInplaceEncMutex () 
; 1696 : 		&& MutexExistsOnSystem (TC_MUTEX_NAME_NONSYS_INPLACE_ENC));

  00020	33 c0		 xor	 eax, eax

; 1697 : }

  00022	c3		 ret	 0
_NonSysInplaceEncInProgressElsewhere ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@MBMDLLNJ@Global?2TrueCrypt?5Driver?5Setup?$AA@ ; `string'
PUBLIC	_CreateDriverSetupMutex
;	COMDAT ??_C@_0BO@MBMDLLNJ@Global?2TrueCrypt?5Driver?5Setup?$AA@
CONST	SEGMENT
??_C@_0BO@MBMDLLNJ@Global?2TrueCrypt?5Driver?5Setup?$AA@ DB 'Global\TrueC'
	DB	'rypt Driver Setup', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _CreateDriverSetupMutex
_TEXT	SEGMENT
_CreateDriverSetupMutex PROC				; COMDAT

; 1705 : 	return TCCreateMutex (&hDriverSetupMutex, TC_MUTEX_NAME_DRIVER_SETUP);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hDriverSetupMutex@@3RAXA ; hDriverSetupMutex
  00005	85 c0		 test	 eax, eax
  00007	75 50		 jne	 SHORT $LN3@CreateDriv
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@MBMDLLNJ@Global?2TrueCrypt?5Driver?5Setup?$AA@
  0000e	6a 01		 push	 1
  00010	50		 push	 eax
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateMutexA@12
  00017	a3 00 00 00 00	 mov	 DWORD PTR ?hDriverSetupMutex@@3RAXA, eax ; hDriverSetupMutex
  0001c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hDriverSetupMutex@@3RAXA ; hDriverSetupMutex
  00022	85 c9		 test	 ecx, ecx
  00024	74 30		 je	 SHORT $LN8@CreateDriv
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0002c	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  00031	75 26		 jne	 SHORT $LN3@CreateDriv
  00033	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hDriverSetupMutex@@3RAXA ; hDriverSetupMutex
  00039	52		 push	 edx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hDriverSetupMutex@@3RAXA ; hDriverSetupMutex
  00045	50		 push	 eax
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  0004c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hDriverSetupMutex@@3RAXA, 0 ; hDriverSetupMutex
$LN8@CreateDriv:
  00056	33 c0		 xor	 eax, eax

; 1706 : }

  00058	c3		 ret	 0

; 1705 : 	return TCCreateMutex (&hDriverSetupMutex, TC_MUTEX_NAME_DRIVER_SETUP);

$LN3@CreateDriv:
  00059	b8 01 00 00 00	 mov	 eax, 1

; 1706 : }

  0005e	c3		 ret	 0
_CreateDriverSetupMutex ENDP
_TEXT	ENDS
PUBLIC	_CloseDriverSetupMutex
; Function compile flags: /Ogtpy
;	COMDAT _CloseDriverSetupMutex
_TEXT	SEGMENT
_CloseDriverSetupMutex PROC				; COMDAT

; 1711 : 	TCCloseMutex (&hDriverSetupMutex);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hDriverSetupMutex@@3RAXA ; hDriverSetupMutex
  00005	85 c0		 test	 eax, eax
  00007	74 2c		 je	 SHORT $LN3@CloseDrive
  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hDriverSetupMutex@@3RAXA ; hDriverSetupMutex
  0000f	51		 push	 ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  00016	85 c0		 test	 eax, eax
  00018	74 1b		 je	 SHORT $LN3@CloseDrive
  0001a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hDriverSetupMutex@@3RAXA ; hDriverSetupMutex
  00020	52		 push	 edx
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00027	85 c0		 test	 eax, eax
  00029	74 0a		 je	 SHORT $LN3@CloseDrive
  0002b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hDriverSetupMutex@@3RAXA, 0 ; hDriverSetupMutex
$LN3@CloseDrive:

; 1712 : }

  00035	c3		 ret	 0
_CloseDriverSetupMutex ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@HKGDHIEL@Global?2TrueCrypt?5Setup?$AA@ ; `string'
PUBLIC	_CreateAppSetupMutex
;	COMDAT ??_C@_0BH@HKGDHIEL@Global?2TrueCrypt?5Setup?$AA@
CONST	SEGMENT
??_C@_0BH@HKGDHIEL@Global?2TrueCrypt?5Setup?$AA@ DB 'Global\TrueCrypt Set'
	DB	'up', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _CreateAppSetupMutex
_TEXT	SEGMENT
_CreateAppSetupMutex PROC				; COMDAT

; 1717 : 	return TCCreateMutex (&hAppSetupMutex, TC_MUTEX_NAME_APP_SETUP);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hAppSetupMutex@@3RAXA ; hAppSetupMutex
  00005	85 c0		 test	 eax, eax
  00007	75 50		 jne	 SHORT $LN3@CreateAppS
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@HKGDHIEL@Global?2TrueCrypt?5Setup?$AA@
  0000e	6a 01		 push	 1
  00010	50		 push	 eax
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateMutexA@12
  00017	a3 00 00 00 00	 mov	 DWORD PTR ?hAppSetupMutex@@3RAXA, eax ; hAppSetupMutex
  0001c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hAppSetupMutex@@3RAXA ; hAppSetupMutex
  00022	85 c9		 test	 ecx, ecx
  00024	74 30		 je	 SHORT $LN8@CreateAppS
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0002c	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  00031	75 26		 jne	 SHORT $LN3@CreateAppS
  00033	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hAppSetupMutex@@3RAXA ; hAppSetupMutex
  00039	52		 push	 edx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hAppSetupMutex@@3RAXA ; hAppSetupMutex
  00045	50		 push	 eax
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  0004c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hAppSetupMutex@@3RAXA, 0 ; hAppSetupMutex
$LN8@CreateAppS:
  00056	33 c0		 xor	 eax, eax

; 1718 : }

  00058	c3		 ret	 0

; 1717 : 	return TCCreateMutex (&hAppSetupMutex, TC_MUTEX_NAME_APP_SETUP);

$LN3@CreateAppS:
  00059	b8 01 00 00 00	 mov	 eax, 1

; 1718 : }

  0005e	c3		 ret	 0
_CreateAppSetupMutex ENDP
_TEXT	ENDS
PUBLIC	_CloseAppSetupMutex
; Function compile flags: /Ogtpy
;	COMDAT _CloseAppSetupMutex
_TEXT	SEGMENT
_CloseAppSetupMutex PROC				; COMDAT

; 1723 : 	TCCloseMutex (&hAppSetupMutex);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hAppSetupMutex@@3RAXA ; hAppSetupMutex
  00005	85 c0		 test	 eax, eax
  00007	74 2c		 je	 SHORT $LN3@CloseAppSe
  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hAppSetupMutex@@3RAXA ; hAppSetupMutex
  0000f	51		 push	 ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  00016	85 c0		 test	 eax, eax
  00018	74 1b		 je	 SHORT $LN3@CloseAppSe
  0001a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hAppSetupMutex@@3RAXA ; hAppSetupMutex
  00020	52		 push	 edx
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00027	85 c0		 test	 eax, eax
  00029	74 0a		 je	 SHORT $LN3@CloseAppSe
  0002b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hAppSetupMutex@@3RAXA, 0 ; hAppSetupMutex
$LN3@CloseAppSe:

; 1724 : }

  00035	c3		 ret	 0
_CloseAppSetupMutex ENDP
_TEXT	ENDS
PUBLIC	_IsCipherShedInstallerRunning
; Function compile flags: /Ogtpy
;	COMDAT _IsCipherShedInstallerRunning
_TEXT	SEGMENT
_IsCipherShedInstallerRunning PROC			; COMDAT

; 1729 : 	return (MutexExistsOnSystem (TC_MUTEX_NAME_APP_SETUP));

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@HKGDHIEL@Global?2TrueCrypt?5Setup?$AA@
  00005	6a 00		 push	 0
  00007	68 01 00 1f 00	 push	 2031617			; 001f0001H
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenMutexA@12
  00012	85 c0		 test	 eax, eax
  00014	75 20		 jne	 SHORT $LN5@IsCipherSh
  00016	56		 push	 esi
  00017	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetLastError@0
  0001d	ff d6		 call	 esi
  0001f	83 f8 02	 cmp	 eax, 2
  00022	75 04		 jne	 SHORT $LN4@IsCipherSh
  00024	33 c0		 xor	 eax, eax
  00026	5e		 pop	 esi

; 1730 : }

  00027	c3		 ret	 0

; 1729 : 	return (MutexExistsOnSystem (TC_MUTEX_NAME_APP_SETUP));

$LN4@IsCipherSh:
  00028	ff d6		 call	 esi
  0002a	33 c9		 xor	 ecx, ecx
  0002c	83 f8 05	 cmp	 eax, 5
  0002f	0f 94 c1	 sete	 cl
  00032	5e		 pop	 esi
  00033	8b c1		 mov	 eax, ecx

; 1730 : }

  00035	c3		 ret	 0

; 1729 : 	return (MutexExistsOnSystem (TC_MUTEX_NAME_APP_SETUP));

$LN5@IsCipherSh:
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  0003d	b8 01 00 00 00	 mov	 eax, 1

; 1730 : }

  00042	c3		 ret	 0
_IsCipherShedInstallerRunning ENDP
_TEXT	ENDS
PUBLIC	??_C@_08OAECLFAP@WipeMode?$AA@			; `string'
PUBLIC	??_C@_0BH@GJIMGGMJ@SystemEncryptionStatus?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_LoadSysEncSettings
;	COMDAT ??_C@_08OAECLFAP@WipeMode?$AA@
CONST	SEGMENT
??_C@_08OAECLFAP@WipeMode?$AA@ DB 'WipeMode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GJIMGGMJ@SystemEncryptionStatus?$AA@
CONST	SEGMENT
??_C@_0BH@GJIMGGMJ@SystemEncryptionStatus?$AA@ DB 'SystemEncryptionStatus'
	DB	00H						; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _LoadSysEncSettings
_TEXT	SEGMENT
_newSystemEncryptionStatus$ = -372			; size = 4
_size$ = -368						; size = 4
_paramName$ = -364					; size = 100
_paramVal$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_LoadSysEncSettings PROC				; COMDAT

; 1821 : {

  00000	81 ec 74 01 00
	00		 sub	 esp, 372		; 00000174H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 70 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+372], eax
  00014	53		 push	 ebx
  00015	55		 push	 ebp
  00016	57		 push	 edi

; 1822 : 	BOOL status = TRUE;
; 1823 : 	DWORD size = 0;
; 1824 : 	char *sysEncCfgFileBuf = LoadFile (GetConfigPath (TC_APPD_FILENAME_SYSTEM_ENCRYPTION), &size);

  00017	8d 44 24 10	 lea	 eax, DWORD PTR _size$[esp+384]
  0001b	50		 push	 eax
  0001c	33 db		 xor	 ebx, ebx
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@
  00023	89 5c 24 18	 mov	 DWORD PTR _size$[esp+392], ebx
  00027	e8 00 00 00 00	 call	 _GetConfigPath
  0002c	83 c4 04	 add	 esp, 4
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 _LoadFile

; 1825 : 	char *xml = sysEncCfgFileBuf;
; 1826 : 	char paramName[100], paramVal[MAX_PATH];
; 1827 : 
; 1828 : 	// Defaults
; 1829 : 	int newSystemEncryptionStatus = SYSENC_STATUS_NONE;
; 1830 : 	WipeAlgorithmId newnWipeMode = TC_WIPE_NONE;
; 1831 : 
; 1832 : 	if (!FileExists (GetConfigPath (TC_APPD_FILENAME_SYSTEM_ENCRYPTION)))

  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@
  0003a	8b f8		 mov	 edi, eax
  0003c	89 5c 24 18	 mov	 DWORD PTR _newSystemEncryptionStatus$[esp+396], ebx
  00040	33 ed		 xor	 ebp, ebp
  00042	e8 00 00 00 00	 call	 _GetConfigPath
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 _FileExists
  0004d	83 c4 10	 add	 esp, 16			; 00000010H
  00050	85 c0		 test	 eax, eax
  00052	75 0c		 jne	 SHORT $LN7@LoadSysEnc

; 1833 : 	{
; 1834 : 		SystemEncryptionStatus = newSystemEncryptionStatus;

  00054	89 1d 00 00 00
	00		 mov	 DWORD PTR _SystemEncryptionStatus, ebx

; 1835 : 		nWipeMode = newnWipeMode;

  0005a	89 1d 00 00 00
	00		 mov	 DWORD PTR _nWipeMode, ebx
$LN7@LoadSysEnc:

; 1836 : 	}
; 1837 : 
; 1838 : 	if (xml == NULL)

  00060	3b fb		 cmp	 edi, ebx
  00062	75 1a		 jne	 SHORT $LN10@LoadSysEnc
  00064	5f		 pop	 edi
  00065	5d		 pop	 ebp

; 1839 : 	{
; 1840 : 		return FALSE;

  00066	33 c0		 xor	 eax, eax
  00068	5b		 pop	 ebx

; 1864 : 	return status;
; 1865 : }

  00069	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+372]
  00070	33 cc		 xor	 ecx, esp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	81 c4 74 01 00
	00		 add	 esp, 372		; 00000174H
  0007d	c3		 ret	 0
$LN10@LoadSysEnc:
  0007e	56		 push	 esi

; 1841 : 	}
; 1842 : 
; 1843 : 	while (xml = XmlFindElement (xml, "config"))

  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_06HEJKKHEK@config?$AA@
  00084	57		 push	 edi
  00085	e8 00 00 00 00	 call	 _XmlFindElement
  0008a	8b f0		 mov	 esi, eax
  0008c	83 c4 08	 add	 esp, 8
  0008f	3b f3		 cmp	 esi, ebx
  00091	0f 84 ca 00 00
	00		 je	 $LN4@LoadSysEnc
$LL5@LoadSysEnc:

; 1844 : 	{
; 1845 : 		XmlGetAttributeText (xml, "key", paramName, sizeof (paramName));

  00097	6a 64		 push	 100			; 00000064H
  00099	8d 4c 24 1c	 lea	 ecx, DWORD PTR _paramName$[esp+392]
  0009d	51		 push	 ecx
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_03ICHNJLJF@key?$AA@
  000a3	56		 push	 esi
  000a4	e8 00 00 00 00	 call	 _XmlGetAttributeText

; 1846 : 		XmlGetNodeText (xml, paramVal, sizeof (paramVal));

  000a9	68 04 01 00 00	 push	 260			; 00000104H
  000ae	8d 94 24 90 00
	00 00		 lea	 edx, DWORD PTR _paramVal$[esp+408]
  000b5	52		 push	 edx
  000b6	56		 push	 esi
  000b7	e8 00 00 00 00	 call	 _XmlGetNodeText
  000bc	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1847 : 
; 1848 : 		if (strcmp (paramName, "SystemEncryptionStatus") == 0)

  000bf	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BH@GJIMGGMJ@SystemEncryptionStatus?$AA@
  000c4	8d 44 24 18	 lea	 eax, DWORD PTR _paramName$[esp+388]
$LL12@LoadSysEnc:
  000c8	8a 10		 mov	 dl, BYTE PTR [eax]
  000ca	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000cc	75 1a		 jne	 SHORT $LN13@LoadSysEnc
  000ce	3a d3		 cmp	 dl, bl
  000d0	74 12		 je	 SHORT $LN14@LoadSysEnc
  000d2	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000d5	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000d8	75 0e		 jne	 SHORT $LN13@LoadSysEnc
  000da	83 c0 02	 add	 eax, 2
  000dd	83 c1 02	 add	 ecx, 2
  000e0	3a d3		 cmp	 dl, bl
  000e2	75 e4		 jne	 SHORT $LL12@LoadSysEnc
$LN14@LoadSysEnc:
  000e4	33 c0		 xor	 eax, eax
  000e6	eb 05		 jmp	 SHORT $LN15@LoadSysEnc
$LN13@LoadSysEnc:
  000e8	1b c0		 sbb	 eax, eax
  000ea	83 d8 ff	 sbb	 eax, -1
$LN15@LoadSysEnc:
  000ed	3b c3		 cmp	 eax, ebx
  000ef	75 10		 jne	 SHORT $LN3@LoadSysEnc

; 1849 : 		{
; 1850 : 			newSystemEncryptionStatus = atoi (paramVal);

  000f1	8d 44 24 7c	 lea	 eax, DWORD PTR _paramVal$[esp+388]
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 _atoi
  000fb	89 44 24 14	 mov	 DWORD PTR _newSystemEncryptionStatus$[esp+392], eax
  000ff	eb 44		 jmp	 SHORT $LN20@LoadSysEnc
$LN3@LoadSysEnc:

; 1851 : 		}
; 1852 : 		else if (strcmp (paramName, "WipeMode") == 0)

  00101	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_08OAECLFAP@WipeMode?$AA@
  00106	8d 44 24 18	 lea	 eax, DWORD PTR _paramName$[esp+388]
  0010a	8d 9b 00 00 00
	00		 npad	 6
$LL16@LoadSysEnc:
  00110	8a 10		 mov	 dl, BYTE PTR [eax]
  00112	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00114	75 1a		 jne	 SHORT $LN17@LoadSysEnc
  00116	3a d3		 cmp	 dl, bl
  00118	74 12		 je	 SHORT $LN18@LoadSysEnc
  0011a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0011d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00120	75 0e		 jne	 SHORT $LN17@LoadSysEnc
  00122	83 c0 02	 add	 eax, 2
  00125	83 c1 02	 add	 ecx, 2
  00128	3a d3		 cmp	 dl, bl
  0012a	75 e4		 jne	 SHORT $LL16@LoadSysEnc
$LN18@LoadSysEnc:
  0012c	33 c0		 xor	 eax, eax
  0012e	eb 05		 jmp	 SHORT $LN19@LoadSysEnc
$LN17@LoadSysEnc:
  00130	1b c0		 sbb	 eax, eax
  00132	83 d8 ff	 sbb	 eax, -1
$LN19@LoadSysEnc:
  00135	3b c3		 cmp	 eax, ebx
  00137	75 0f		 jne	 SHORT $LN1@LoadSysEnc

; 1853 : 		{
; 1854 : 			newnWipeMode = (WipeAlgorithmId) atoi (paramVal);

  00139	8d 4c 24 7c	 lea	 ecx, DWORD PTR _paramVal$[esp+388]
  0013d	51		 push	 ecx
  0013e	e8 00 00 00 00	 call	 _atoi
  00143	8b e8		 mov	 ebp, eax
$LN20@LoadSysEnc:
  00145	83 c4 04	 add	 esp, 4
$LN1@LoadSysEnc:

; 1841 : 	}
; 1842 : 
; 1843 : 	while (xml = XmlFindElement (xml, "config"))

  00148	68 00 00 00 00	 push	 OFFSET ??_C@_06HEJKKHEK@config?$AA@

; 1855 : 		}
; 1856 : 
; 1857 : 		xml++;

  0014d	46		 inc	 esi
  0014e	56		 push	 esi
  0014f	e8 00 00 00 00	 call	 _XmlFindElement
  00154	8b f0		 mov	 esi, eax
  00156	83 c4 08	 add	 esp, 8
  00159	3b f3		 cmp	 esi, ebx
  0015b	0f 85 36 ff ff
	ff		 jne	 $LL5@LoadSysEnc
$LN4@LoadSysEnc:

; 1858 : 	}
; 1859 : 
; 1860 : 	SystemEncryptionStatus = newSystemEncryptionStatus;

  00161	8b 54 24 10	 mov	 edx, DWORD PTR _newSystemEncryptionStatus$[esp+388]

; 1861 : 	nWipeMode = newnWipeMode;
; 1862 : 
; 1863 : 	free (sysEncCfgFileBuf);

  00165	57		 push	 edi
  00166	89 15 00 00 00
	00		 mov	 DWORD PTR _SystemEncryptionStatus, edx
  0016c	89 2d 00 00 00
	00		 mov	 DWORD PTR _nWipeMode, ebp
  00172	e8 00 00 00 00	 call	 _free

; 1864 : 	return status;
; 1865 : }

  00177	8b 8c 24 84 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+392]
  0017e	83 c4 04	 add	 esp, 4
  00181	5e		 pop	 esi
  00182	5f		 pop	 edi
  00183	5d		 pop	 ebp
  00184	5b		 pop	 ebx
  00185	33 cc		 xor	 ecx, esp
  00187	b8 01 00 00 00	 mov	 eax, 1
  0018c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00191	81 c4 74 01 00
	00		 add	 esp, 372		; 00000174H
  00197	c3		 ret	 0
_LoadSysEncSettings ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@IBNLKCDC@In?9Place?5Encryption?5Wipe?5Algo?$AA@ ; `string'
PUBLIC	??_C@_0BE@NLGDPAAC@In?9Place?5Encryption?$AA@	; `string'
PUBLIC	_LoadNonSysInPlaceEncSettings
;	COMDAT ??_C@_0BO@IBNLKCDC@In?9Place?5Encryption?5Wipe?5Algo?$AA@
CONST	SEGMENT
??_C@_0BO@IBNLKCDC@In?9Place?5Encryption?5Wipe?5Algo?$AA@ DB 'In-Place En'
	DB	'cryption Wipe Algo', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NLGDPAAC@In?9Place?5Encryption?$AA@
CONST	SEGMENT
??_C@_0BE@NLGDPAAC@In?9Place?5Encryption?$AA@ DB 'In-Place Encryption', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _LoadNonSysInPlaceEncSettings
_TEXT	SEGMENT
_size2$ = -4						; size = 4
_size$ = 8						; size = 4
_wipeAlgorithm$ = 8					; size = 4
_LoadNonSysInPlaceEncSettings PROC			; COMDAT

; 1871 : {

  00000	51		 push	 ecx
  00001	53		 push	 ebx

; 1872 : 	char *fileBuf = NULL;
; 1873 : 	char *fileBuf2 = NULL;
; 1874 : 	DWORD size, size2;
; 1875 : 	int count;
; 1876 : 
; 1877 : 	*wipeAlgorithm = TC_WIPE_NONE;

  00002	8b 5c 24 0c	 mov	 ebx, DWORD PTR _wipeAlgorithm$[esp+4]
  00006	56		 push	 esi
  00007	33 f6		 xor	 esi, esi

; 1878 : 
; 1879 : 	if (!FileExists (GetConfigPath (TC_APPD_FILENAME_NONSYS_INPLACE_ENC)))

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NLGDPAAC@In?9Place?5Encryption?$AA@
  0000e	89 33		 mov	 DWORD PTR [ebx], esi
  00010	e8 00 00 00 00	 call	 _GetConfigPath
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 _FileExists
  0001b	83 c4 08	 add	 esp, 8
  0001e	85 c0		 test	 eax, eax
  00020	75 04		 jne	 SHORT $LN6@LoadNonSys
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx

; 1900 : }

  00024	59		 pop	 ecx
  00025	c3		 ret	 0
$LN6@LoadNonSys:
  00026	57		 push	 edi

; 1880 : 		return 0;
; 1881 : 
; 1882 : 	if ((fileBuf = LoadFile (GetConfigPath (TC_APPD_FILENAME_NONSYS_INPLACE_ENC), &size)) == NULL)

  00027	8d 44 24 14	 lea	 eax, DWORD PTR _size$[esp+12]
  0002b	50		 push	 eax
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NLGDPAAC@In?9Place?5Encryption?$AA@
  00031	e8 00 00 00 00	 call	 _GetConfigPath
  00036	83 c4 04	 add	 esp, 4
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _LoadFile
  0003f	8b f8		 mov	 edi, eax
  00041	83 c4 08	 add	 esp, 8
  00044	85 ff		 test	 edi, edi
  00046	75 05		 jne	 SHORT $LN5@LoadNonSys
  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx

; 1900 : }

  0004b	59		 pop	 ecx
  0004c	c3		 ret	 0
$LN5@LoadNonSys:

; 1883 : 		return 0;
; 1884 : 
; 1885 : 	if (FileExists (GetConfigPath (TC_APPD_FILENAME_NONSYS_INPLACE_ENC_WIPE)))

  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IBNLKCDC@In?9Place?5Encryption?5Wipe?5Algo?$AA@
  00052	e8 00 00 00 00	 call	 _GetConfigPath
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 _FileExists
  0005d	83 c4 08	 add	 esp, 8
  00060	85 c0		 test	 eax, eax
  00062	74 2c		 je	 SHORT $LN3@LoadNonSys

; 1886 : 	{
; 1887 : 		if ((fileBuf2 = LoadFile (GetConfigPath (TC_APPD_FILENAME_NONSYS_INPLACE_ENC_WIPE), &size2)) != NULL)

  00064	8d 4c 24 0c	 lea	 ecx, DWORD PTR _size2$[esp+16]
  00068	51		 push	 ecx
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IBNLKCDC@In?9Place?5Encryption?5Wipe?5Algo?$AA@
  0006e	e8 00 00 00 00	 call	 _GetConfigPath
  00073	83 c4 04	 add	 esp, 4
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 _LoadFile
  0007c	8b f0		 mov	 esi, eax
  0007e	83 c4 08	 add	 esp, 8
  00081	85 f6		 test	 esi, esi
  00083	74 0b		 je	 SHORT $LN3@LoadNonSys

; 1888 : 			*wipeAlgorithm = (WipeAlgorithmId) atoi (fileBuf2);

  00085	56		 push	 esi
  00086	e8 00 00 00 00	 call	 _atoi
  0008b	83 c4 04	 add	 esp, 4
  0008e	89 03		 mov	 DWORD PTR [ebx], eax
$LN3@LoadNonSys:

; 1889 : 	}
; 1890 : 
; 1891 : 	count = atoi (fileBuf);

  00090	57		 push	 edi
  00091	e8 00 00 00 00	 call	 _atoi

; 1892 : 
; 1893 : 	if (fileBuf != NULL)
; 1894 : 		TCfree (fileBuf);

  00096	57		 push	 edi
  00097	8b d8		 mov	 ebx, eax
  00099	e8 00 00 00 00	 call	 _free
  0009e	83 c4 08	 add	 esp, 8

; 1895 : 
; 1896 : 	if (fileBuf2 != NULL)

  000a1	85 f6		 test	 esi, esi
  000a3	74 09		 je	 SHORT $LN1@LoadNonSys

; 1897 : 		TCfree (fileBuf2);

  000a5	56		 push	 esi
  000a6	e8 00 00 00 00	 call	 _free
  000ab	83 c4 04	 add	 esp, 4
$LN1@LoadNonSys:
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi

; 1898 : 
; 1899 : 	return (count);

  000b0	8b c3		 mov	 eax, ebx
  000b2	5b		 pop	 ebx

; 1900 : }

  000b3	59		 pop	 ecx
  000b4	c3		 ret	 0
_LoadNonSysInPlaceEncSettings ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_RemoveNonSysInPlaceEncNotifications
; Function compile flags: /Ogtpy
;	COMDAT _RemoveNonSysInPlaceEncNotifications
_TEXT	SEGMENT
_regk$154082 = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_RemoveNonSysInPlaceEncNotifications PROC		; COMDAT

; 1904 : {

  00000	83 ec 44	 sub	 esp, 68			; 00000044H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 40	 mov	 DWORD PTR __$ArrayPad$[esp+68], eax

; 1905 : 	if (FileExists (GetConfigPath (TC_APPD_FILENAME_NONSYS_INPLACE_ENC)))

  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NLGDPAAC@In?9Place?5Encryption?$AA@
  00013	e8 00 00 00 00	 call	 _GetConfigPath
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 _FileExists
  0001e	83 c4 08	 add	 esp, 8
  00021	85 c0		 test	 eax, eax
  00023	74 13		 je	 SHORT $LN3@RemoveNonS

; 1906 : 		remove (GetConfigPath (TC_APPD_FILENAME_NONSYS_INPLACE_ENC));

  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NLGDPAAC@In?9Place?5Encryption?$AA@
  0002a	e8 00 00 00 00	 call	 _GetConfigPath
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 _remove
  00035	83 c4 08	 add	 esp, 8
$LN3@RemoveNonS:

; 1907 : 
; 1908 : 	if (FileExists (GetConfigPath (TC_APPD_FILENAME_NONSYS_INPLACE_ENC_WIPE)))

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IBNLKCDC@In?9Place?5Encryption?5Wipe?5Algo?$AA@
  0003d	e8 00 00 00 00	 call	 _GetConfigPath
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 _FileExists
  00048	83 c4 08	 add	 esp, 8
  0004b	85 c0		 test	 eax, eax
  0004d	74 13		 je	 SHORT $LN2@RemoveNonS

; 1909 : 		remove (GetConfigPath (TC_APPD_FILENAME_NONSYS_INPLACE_ENC_WIPE));

  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IBNLKCDC@In?9Place?5Encryption?5Wipe?5Algo?$AA@
  00054	e8 00 00 00 00	 call	 _GetConfigPath
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _remove
  0005f	83 c4 08	 add	 esp, 8
$LN2@RemoveNonS:

; 1910 : 
; 1911 : 	if (!IsNonInstallMode () && SystemEncryptionStatus == SYSENC_STATUS_NONE)

  00062	e8 00 00 00 00	 call	 _IsNonInstallMode
  00067	85 c0		 test	 eax, eax
  00069	75 23		 jne	 SHORT $LN6@RemoveNonS
  0006b	39 05 00 00 00
	00		 cmp	 DWORD PTR _SystemEncryptionStatus, eax
  00071	75 1b		 jne	 SHORT $LN6@RemoveNonS

; 1912 : 		ManageStartupSeqWiz (TRUE, "");

  00073	8d 04 24	 lea	 eax, DWORD PTR _regk$154082[esp+68]
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 _GetStartupRegKeyName
  0007c	8d 4c 24 04	 lea	 ecx, DWORD PTR _regk$154082[esp+72]
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KCBPKCIG@CipherShed?5Format?$AA@
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 _DeleteRegistryValue
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@RemoveNonS:

; 1913 : }

  0008e	8b 4c 24 40	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+68]
  00092	33 cc		 xor	 ecx, esp
  00094	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00099	83 c4 44	 add	 esp, 68			; 00000044H
  0009c	c3		 ret	 0
_RemoveNonSysInPlaceEncNotifications ENDP
_TEXT	ENDS
PUBLIC	??_C@_01HIHLOKLC@1?$AA@				; `string'
PUBLIC	??_C@_0BN@CCKGMGAA@Post?9Install?5Task?5?9?5Tutorial?$AA@ ; `string'
PUBLIC	??_C@_0CC@PPOKIEIE@Post?9Install?5Task?5?9?5Release?5Note@ ; `string'
PUBLIC	_SavePostInstallTasksSettings
;	COMDAT ??_C@_01HIHLOKLC@1?$AA@
CONST	SEGMENT
??_C@_01HIHLOKLC@1?$AA@ DB '1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CCKGMGAA@Post?9Install?5Task?5?9?5Tutorial?$AA@
CONST	SEGMENT
??_C@_0BN@CCKGMGAA@Post?9Install?5Task?5?9?5Tutorial?$AA@ DB 'Post-Instal'
	DB	'l Task - Tutorial', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@PPOKIEIE@Post?9Install?5Task?5?9?5Release?5Note@
CONST	SEGMENT
??_C@_0CC@PPOKIEIE@Post?9Install?5Task?5?9?5Release?5Note@ DB 'Post-Insta'
	DB	'll Task - Release Notes', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _SavePostInstallTasksSettings
_TEXT	SEGMENT
_command$ = 8						; size = 4
_SavePostInstallTasksSettings PROC			; COMDAT

; 1918 : 	FILE *f = NULL;
; 1919 : 
; 1920 : 	if (IsNonInstallMode() && command != TC_POST_INSTALL_CFG_REMOVE_ALL)

  00000	e8 00 00 00 00	 call	 _IsNonInstallMode
  00005	85 c0		 test	 eax, eax
  00007	8b 44 24 04	 mov	 eax, DWORD PTR _command$[esp-4]
  0000b	74 08		 je	 SHORT $LN9@SavePostIn
  0000d	85 c0		 test	 eax, eax
  0000f	0f 85 8f 00 00
	00		 jne	 $LN10@SavePostIn
$LN9@SavePostIn:

; 1921 : 		return;
; 1922 : 
; 1923 : 	switch (command)

  00015	83 e8 00	 sub	 eax, 0
  00018	74 55		 je	 SHORT $LN6@SavePostIn
  0001a	83 e8 01	 sub	 eax, 1
  0001d	56		 push	 esi
  0001e	74 11		 je	 SHORT $LN5@SavePostIn
  00020	83 e8 01	 sub	 eax, 1
  00023	75 7e		 jne	 SHORT $LN12@SavePostIn

; 1932 : 		break;
; 1933 : 
; 1934 : 	case TC_POST_INSTALL_CFG_RELEASE_NOTES:
; 1935 : 		f = fopen (GetConfigPath (TC_APPD_FILENAME_POST_INSTALL_TASK_RELEASE_NOTES), "w");

  00025	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w?$AA@
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@PPOKIEIE@Post?9Install?5Task?5?9?5Release?5Note@

; 1936 : 		break;

  0002f	eb 0a		 jmp	 SHORT $LN14@SavePostIn
$LN5@SavePostIn:

; 1928 : 		break;
; 1929 : 
; 1930 : 	case TC_POST_INSTALL_CFG_TUTORIAL:
; 1931 : 		f = fopen (GetConfigPath (TC_APPD_FILENAME_POST_INSTALL_TASK_TUTORIAL), "w");

  00031	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w?$AA@
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CCKGMGAA@Post?9Install?5Task?5?9?5Tutorial?$AA@
$LN14@SavePostIn:
  0003b	e8 00 00 00 00	 call	 _GetConfigPath
  00040	83 c4 04	 add	 esp, 4
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _fopen
  00049	8b f0		 mov	 esi, eax
  0004b	83 c4 08	 add	 esp, 8

; 1937 : 
; 1938 : 	default:
; 1939 : 		return;
; 1940 : 	}
; 1941 : 
; 1942 : 	if (f == NULL)

  0004e	85 f6		 test	 esi, esi
  00050	74 51		 je	 SHORT $LN12@SavePostIn

; 1943 : 		return;
; 1944 : 
; 1945 : 	if (fputs ("1", f) < 0)

  00052	56		 push	 esi
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_01HIHLOKLC@1?$AA@
  00058	e8 00 00 00 00	 call	 _fputs
  0005d	83 c4 08	 add	 esp, 8

; 1946 : 	{
; 1947 : 		// Error
; 1948 : 		fclose (f);

  00060	56		 push	 esi
  00061	85 c0		 test	 eax, eax
  00063	7d 30		 jge	 SHORT $LN1@SavePostIn
  00065	e8 00 00 00 00	 call	 _fclose
  0006a	83 c4 04	 add	 esp, 4
  0006d	5e		 pop	 esi

; 1955 : }

  0006e	c3		 ret	 0
$LN6@SavePostIn:

; 1924 : 	{
; 1925 : 	case TC_POST_INSTALL_CFG_REMOVE_ALL:
; 1926 : 		remove (GetConfigPath (TC_APPD_FILENAME_POST_INSTALL_TASK_TUTORIAL));

  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CCKGMGAA@Post?9Install?5Task?5?9?5Tutorial?$AA@
  00074	e8 00 00 00 00	 call	 _GetConfigPath
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 _remove

; 1927 : 		remove (GetConfigPath (TC_APPD_FILENAME_POST_INSTALL_TASK_RELEASE_NOTES));

  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@PPOKIEIE@Post?9Install?5Task?5?9?5Release?5Note@
  00084	e8 00 00 00 00	 call	 _GetConfigPath
  00089	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008c	89 44 24 04	 mov	 DWORD PTR _command$[esp-4], eax
  00090	e9 00 00 00 00	 jmp	 _remove
$LN1@SavePostIn:

; 1949 : 		return;
; 1950 : 	}
; 1951 : 
; 1952 : 	TCFlushFile (f);

  00095	e8 00 00 00 00	 call	 _TCFlushFile

; 1953 : 
; 1954 : 	fclose (f);

  0009a	56		 push	 esi
  0009b	e8 00 00 00 00	 call	 _fclose
  000a0	83 c4 08	 add	 esp, 8
$LN12@SavePostIn:
  000a3	5e		 pop	 esi
$LN10@SavePostIn:

; 1955 : }

  000a4	c3		 ret	 0
_SavePostInstallTasksSettings ENDP
_TEXT	ENDS
PUBLIC	??_C@_04OJAHODMC@Text?$AA@			; `string'
PUBLIC	_GetLegalNotices
EXTRN	_memcpy:PROC
;	COMDAT ?size@?1??GetLegalNotices@@9@4KA
_BSS	SEGMENT
?size@?1??GetLegalNotices@@9@4KA DD 01H DUP (?)		; `GetLegalNotices'::`2'::size
_BSS	ENDS
;	COMDAT ?resource@?1??GetLegalNotices@@9@4PADA
_BSS	SEGMENT
?resource@?1??GetLegalNotices@@9@4PADA DD 01H DUP (?)	; `GetLegalNotices'::`2'::resource
_BSS	ENDS
;	COMDAT ??_C@_04OJAHODMC@Text?$AA@
CONST	SEGMENT
??_C@_04OJAHODMC@Text?$AA@ DB 'Text', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _GetLegalNotices
_TEXT	SEGMENT
_GetLegalNotices PROC					; COMDAT

; 2650 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 2651 : 	static char *resource;
; 2652 : 	static DWORD size;
; 2653 : 	char *buf = NULL;
; 2654 : 
; 2655 : 	if (resource == NULL)

  00003	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?resource@?1??GetLegalNotices@@9@4PADA
  00009	33 db		 xor	 ebx, ebx
  0000b	85 ff		 test	 edi, edi
  0000d	75 3d		 jne	 SHORT $LN9@GetLegalNo

; 2656 : 		resource = (char *) MapResource ("Text", IDR_LICENSE, &size);

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_04OJAHODMC@Text?$AA@
  00014	68 03 02 00 00	 push	 515			; 00000203H
  00019	57		 push	 edi
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindResourceA@12
  00020	8b f0		 mov	 esi, eax
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadResource@8
  0002a	56		 push	 esi
  0002b	53		 push	 ebx
  0002c	8b f8		 mov	 edi, eax
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SizeofResource@8
  00034	57		 push	 edi
  00035	a3 00 00 00 00	 mov	 DWORD PTR ?size@?1??GetLegalNotices@@9@4KA, eax
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LockResource@4
  00040	8b f8		 mov	 edi, eax
  00042	89 3d 00 00 00
	00		 mov	 DWORD PTR ?resource@?1??GetLegalNotices@@9@4PADA, edi

; 2657 : 
; 2658 : 	if (resource != NULL)

  00048	85 ff		 test	 edi, edi
  0004a	74 30		 je	 SHORT $LN11@GetLegalNo
$LN9@GetLegalNo:

; 2659 : 	{
; 2660 : 		buf = (char *) malloc (size + 1);

  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?size@?1??GetLegalNotices@@9@4KA
  00051	40		 inc	 eax
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 _malloc
  00058	8b f0		 mov	 esi, eax
  0005a	83 c4 04	 add	 esp, 4

; 2661 : 		if (buf != NULL)

  0005d	85 f6		 test	 esi, esi
  0005f	74 15		 je	 SHORT $LN10@GetLegalNo

; 2662 : 		{
; 2663 : 			memcpy (buf, resource, size);

  00061	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?size@?1??GetLegalNotices@@9@4KA
  00067	53		 push	 ebx
  00068	57		 push	 edi
  00069	56		 push	 esi
  0006a	e8 00 00 00 00	 call	 _memcpy
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2664 : 			buf[size] = 0;

  00072	c6 04 33 00	 mov	 BYTE PTR [ebx+esi], 0
$LN10@GetLegalNo:
  00076	5f		 pop	 edi

; 2665 : 		}
; 2666 : 	}
; 2667 : 
; 2668 : 	return buf;

  00077	8b c6		 mov	 eax, esi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx

; 2669 : }

  0007b	c3		 ret	 0
$LN11@GetLegalNo:
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi

; 2665 : 		}
; 2666 : 	}
; 2667 : 
; 2668 : 	return buf;

  0007e	8b c3		 mov	 eax, ebx
  00080	5b		 pop	 ebx

; 2669 : }

  00081	c3		 ret	 0
_GetLegalNotices ENDP
_TEXT	ENDS
PUBLIC	_DriverUnload
EXTRN	__imp__ControlService@12:PROC
EXTRN	__imp__QueryServiceStatus@8:PROC
EXTRN	?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ:PROC ; CipherShed::BootEncryption::GetStatus
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_DriverUnload$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_DriverUnload$0
__tryblocktable$_DriverUnload DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$_DriverUnload$7
__unwindtable$_DriverUnload DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$_DriverUnload$6
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$_DriverUnload DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$_DriverUnload
	DD	01H
	DD	FLAT:__tryblocktable$_DriverUnload
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _DriverUnload
_TEXT	SEGMENT
_driver$ = -15656					; size = 13940
$T154113 = -1716					; size = 1560
$T154114 = -154						; size = 94
_status$ = -60						; size = 28
_dwResult$ = -32					; size = 4
_hManager$ = -28					; size = 4
_volumesMounted$ = -24					; size = 4
_driverUnloaded$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_DriverUnload PROC					; COMDAT

; 3123 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_DriverUnload
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	b8 18 3d 00 00	 mov	 eax, 15640		; 00003d18H
  00017	e8 00 00 00 00	 call	 __chkstk
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 3124 : 	MOUNT_LIST_STRUCT driver;
; 3125 : 	int refCount;
; 3126 : 	int volumesMounted;
; 3127 : 	DWORD dwResult;
; 3128 : 	BOOL bResult;
; 3129 : 
; 3130 : 	SC_HANDLE hManager, hService = NULL;
; 3131 : 	BOOL bRet;
; 3132 : 	SERVICE_STATUS status;
; 3133 : 	int x;
; 3134 : 	BOOL driverUnloaded = FALSE;

  00033	33 ff		 xor	 edi, edi

; 3135 : 
; 3136 : 	if (hDriver == INVALID_HANDLE_VALUE)

  00035	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR _hDriver, -1
  0003c	89 7d ec	 mov	 DWORD PTR _driverUnloaded$[ebp], edi

; 3137 : 		return TRUE;

  0003f	0f 84 8c 01 00
	00		 je	 $LN21@DriverUnlo

; 3138 : 	
; 3139 : 	try
; 3140 : 	{
; 3141 : 		if (BootEncryption (NULL).GetStatus().DeviceFilterActive)

  00045	57		 push	 edi
  00046	8d 8d 4c f9 ff
	ff		 lea	 ecx, DWORD PTR $T154113[ebp]
  0004c	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  0004f	e8 00 00 00 00	 call	 ??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z ; CipherShed::BootEncryption::BootEncryption
  00054	8d 8d 66 ff ff
	ff		 lea	 ecx, DWORD PTR $T154114[ebp]
  0005a	51		 push	 ecx
  0005b	8b c8		 mov	 ecx, eax
  0005d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00061	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00066	8b 30		 mov	 esi, DWORD PTR [eax]
  00068	8d 8d 4c f9 ff
	ff		 lea	 ecx, DWORD PTR $T154113[ebp]
  0006e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00072	e8 00 00 00 00	 call	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
  00077	3b f7		 cmp	 esi, edi
  00079	74 1a		 je	 SHORT $LN33@DriverUnlo
$LN45@DriverUnlo:

; 3142 : 			return FALSE;

  0007b	33 c0		 xor	 eax, eax

; 3219 : 		return TRUE;
; 3220 : 	}
; 3221 : 
; 3222 : 	return FALSE;
; 3223 : }

  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
__catch$_DriverUnload$0:

; 3143 : 	}
; 3144 : 	catch (...) { }

  0008f	b8 00 00 00 00	 mov	 eax, $LN33@DriverUnlo
  00094	c3		 ret	 0
$LN33@DriverUnlo:

; 3145 : 
; 3146 : 	// Test for mounted volumes
; 3147 : 	bResult = DeviceIoControl (hDriver, TC_IOCTL_IS_ANY_VOLUME_MOUNTED, NULL, 0, &volumesMounted, sizeof (volumesMounted), &dwResult, NULL);

  00095	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hDriver
  0009b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__DeviceIoControl@32
  000a1	6a 00		 push	 0
  000a3	8d 55 e0	 lea	 edx, DWORD PTR _dwResult$[ebp]
  000a6	52		 push	 edx
  000a7	6a 04		 push	 4
  000a9	8d 45 e8	 lea	 eax, DWORD PTR _volumesMounted$[ebp]
  000ac	50		 push	 eax
  000ad	6a 00		 push	 0
  000af	6a 00		 push	 0
  000b1	68 28 20 22 00	 push	 2236456			; 00222028H
  000b6	51		 push	 ecx
  000b7	ff d6		 call	 esi

; 3148 : 
; 3149 : 	if (!bResult)

  000b9	85 c0		 test	 eax, eax
  000bb	75 34		 jne	 SHORT $LN39@DriverUnlo

; 3150 : 	{
; 3151 : 		bResult = DeviceIoControl (hDriver, TC_IOCTL_LEGACY_GET_MOUNTED_VOLUMES, NULL, 0, &driver, sizeof (driver), &dwResult, NULL);

  000bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hDriver
  000c3	50		 push	 eax
  000c4	8d 55 e0	 lea	 edx, DWORD PTR _dwResult$[ebp]
  000c7	52		 push	 edx
  000c8	68 74 36 00 00	 push	 13940			; 00003674H
  000cd	8d 85 d8 c2 ff
	ff		 lea	 eax, DWORD PTR _driver$[ebp]
  000d3	50		 push	 eax
  000d4	6a 00		 push	 0
  000d6	6a 00		 push	 0
  000d8	68 04 20 07 00	 push	 466948			; 00072004H
  000dd	51		 push	 ecx
  000de	ff d6		 call	 esi

; 3152 : 		if (bResult)

  000e0	85 c0		 test	 eax, eax
  000e2	0f 84 e9 00 00
	00		 je	 $LN21@DriverUnlo

; 3153 : 			volumesMounted = driver.ulMountedDrives;

  000e8	8b 95 d8 c2 ff
	ff		 mov	 edx, DWORD PTR _driver$[ebp]
  000ee	89 55 e8	 mov	 DWORD PTR _volumesMounted$[ebp], edx
$LN39@DriverUnlo:

; 3154 : 	}
; 3155 : 
; 3156 : 	if (bResult)
; 3157 : 	{
; 3158 : 		if (volumesMounted != 0)

  000f1	83 7d e8 00	 cmp	 DWORD PTR _volumesMounted$[ebp], 0

; 3159 : 			return FALSE;

  000f5	75 84		 jne	 SHORT $LN45@DriverUnlo

; 3163 : 
; 3164 : 	// Test for any applications attached to driver
; 3165 : 	refCount = GetDriverRefCount ();

  000f7	e8 00 00 00 00	 call	 _GetDriverRefCount

; 3166 : 
; 3167 : 	if (refCount > 1)

  000fc	bb 01 00 00 00	 mov	 ebx, 1
  00101	3b c3		 cmp	 eax, ebx

; 3168 : 		return FALSE;

  00103	0f 8f 72 ff ff
	ff		 jg	 $LN45@DriverUnlo

; 3169 : 
; 3170 : 	CloseHandle (hDriver);

  00109	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDriver
  0010e	50		 push	 eax
  0010f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 3171 : 	hDriver = INVALID_HANDLE_VALUE;
; 3172 : 
; 3173 : 	// Stop driver service
; 3174 : 
; 3175 : 	hManager = OpenSCManager (NULL, NULL, SC_MANAGER_ALL_ACCESS);

  00115	68 3f 00 0f 00	 push	 983103			; 000f003fH
  0011a	6a 00		 push	 0
  0011c	6a 00		 push	 0
  0011e	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _hDriver, -1
  00128	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenSCManagerA@12
  0012e	8b f0		 mov	 esi, eax
  00130	89 75 e4	 mov	 DWORD PTR _hManager$[ebp], esi

; 3176 : 	if (hManager == NULL)

  00133	85 f6		 test	 esi, esi
  00135	0f 84 40 ff ff
	ff		 je	 $LN45@DriverUnlo

; 3177 : 		goto error;
; 3178 : 
; 3179 : 	hService = OpenService (hManager, "truecrypt", SERVICE_ALL_ACCESS);

  0013b	68 ff 01 0f 00	 push	 983551			; 000f01ffH
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_09EFLFAGB@truecrypt?$AA@
  00145	56		 push	 esi
  00146	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenServiceA@12
  0014c	8b f8		 mov	 edi, eax

; 3180 : 	if (hService == NULL)

  0014e	85 ff		 test	 edi, edi
  00150	74 64		 je	 SHORT $LN3@DriverUnlo

; 3181 : 		goto error;
; 3182 : 
; 3183 : 	bRet = QueryServiceStatus (hService, &status);

  00152	8d 4d c4	 lea	 ecx, DWORD PTR _status$[ebp]
  00155	51		 push	 ecx
  00156	57		 push	 edi
  00157	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__QueryServiceStatus@8

; 3184 : 	if (bRet != TRUE)

  0015d	3b c3		 cmp	 eax, ebx
  0015f	75 4b		 jne	 SHORT $error$141298

; 3185 : 		goto error;
; 3186 : 
; 3187 : 	if (status.dwCurrentState != SERVICE_STOPPED)

  00161	39 5d c8	 cmp	 DWORD PTR _status$[ebp+4], ebx
  00164	74 43		 je	 SHORT $LN11@DriverUnlo

; 3188 : 	{
; 3189 : 		ControlService (hService, SERVICE_CONTROL_STOP, &status);

  00166	8d 55 c4	 lea	 edx, DWORD PTR _status$[ebp]
  00169	52		 push	 edx
  0016a	53		 push	 ebx
  0016b	57		 push	 edi
  0016c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ControlService@12

; 3190 : 
; 3191 : 		for (x = 0; x < 10; x++)

  00172	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__Sleep@4
  00178	33 f6		 xor	 esi, esi
  0017a	8d 9b 00 00 00
	00		 npad	 6
$LL10@DriverUnlo:

; 3192 : 		{
; 3193 : 			bRet = QueryServiceStatus (hService, &status);

  00180	8d 45 c4	 lea	 eax, DWORD PTR _status$[ebp]
  00183	50		 push	 eax
  00184	57		 push	 edi
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__QueryServiceStatus@8

; 3194 : 			if (bRet != TRUE)

  0018b	83 f8 01	 cmp	 eax, 1
  0018e	75 1c		 jne	 SHORT $error$141298

; 3195 : 				goto error;
; 3196 : 
; 3197 : 			if (status.dwCurrentState == SERVICE_STOPPED)

  00190	39 45 c8	 cmp	 DWORD PTR _status$[ebp+4], eax
  00193	74 0f		 je	 SHORT $LN37@DriverUnlo

; 3200 : 				break;
; 3201 : 			}
; 3202 : 
; 3203 : 			Sleep (200);

  00195	68 c8 00 00 00	 push	 200			; 000000c8H
  0019a	ff d3		 call	 ebx
  0019c	46		 inc	 esi
  0019d	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  001a0	7c de		 jl	 SHORT $LL10@DriverUnlo

; 3195 : 				goto error;
; 3196 : 
; 3197 : 			if (status.dwCurrentState == SERVICE_STOPPED)

  001a2	eb 08		 jmp	 SHORT $error$141298
$LN37@DriverUnlo:

; 3198 : 			{
; 3199 : 				driverUnloaded = TRUE;

  001a4	89 45 ec	 mov	 DWORD PTR _driverUnloaded$[ebp], eax

; 3204 : 		}
; 3205 : 	}
; 3206 : 	else

  001a7	eb 03		 jmp	 SHORT $error$141298
$LN11@DriverUnlo:

; 3207 : 		driverUnloaded = TRUE;

  001a9	89 5d ec	 mov	 DWORD PTR _driverUnloaded$[ebp], ebx
$error$141298:

; 3208 : 
; 3209 : error:
; 3210 : 	if (hService != NULL)
; 3211 : 		CloseServiceHandle (hService);

  001ac	57		 push	 edi
  001ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseServiceHandle@4
  001b3	8b 75 e4	 mov	 esi, DWORD PTR _hManager$[ebp]
$LN3@DriverUnlo:

; 3212 : 
; 3213 : 	if (hManager != NULL)
; 3214 : 		CloseServiceHandle (hManager);

  001b6	56		 push	 esi
  001b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseServiceHandle@4

; 3215 : 
; 3216 : 	if (driverUnloaded)

  001bd	83 7d ec 00	 cmp	 DWORD PTR _driverUnloaded$[ebp], 0
  001c1	0f 84 b4 fe ff
	ff		 je	 $LN45@DriverUnlo

; 3217 : 	{
; 3218 : 		hDriver = INVALID_HANDLE_VALUE;

  001c7	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _hDriver, -1
$LN21@DriverUnlo:

; 3160 : 	}
; 3161 : 	else
; 3162 : 		return TRUE;

  001d1	b8 01 00 00 00	 mov	 eax, 1

; 3219 : 		return TRUE;
; 3220 : 	}
; 3221 : 
; 3222 : 	return FALSE;
; 3223 : }

  001d6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001d9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e0	59		 pop	 ecx
  001e1	5f		 pop	 edi
  001e2	5e		 pop	 esi
  001e3	5b		 pop	 ebx
  001e4	8b e5		 mov	 esp, ebp
  001e6	5d		 pop	 ebp
  001e7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_DriverUnload$6:
  00000	8d 8d 4c f9 ff
	ff		 lea	 ecx, DWORD PTR $T154113[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
__ehhandler$_DriverUnload:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a d4 c2 ff
	ff		 mov	 ecx, DWORD PTR [edx-15660]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_DriverUnload
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_DriverUnload ENDP
PUBLIC	_DriverAttach
; Function compile flags: /Ogtpy
;	COMDAT _DriverAttach
_TEXT	SEGMENT
_dwResult$141330 = -4					; size = 4
_DriverAttach PROC					; COMDAT

; 3227 : {

  00000	51		 push	 ecx

; 3228 : 	/* Try to open a handle to the device driver. It will be closed later. */
; 3229 : 
; 3230 : #ifndef SETUP
; 3231 : 
; 3232 : 	int nLoadRetryCount = 0;
; 3233 : start:
; 3234 : 
; 3235 : #endif
; 3236 : 
; 3237 : 	/* Open CipherSheds driver. */
; 3238 : 	hDriver = CreateFile (WIN32_ROOT_PREFIX, 0, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00001	6a 00		 push	 0
  00003	6a 00		 push	 0
  00005	6a 03		 push	 3
  00007	6a 00		 push	 0
  00009	6a 03		 push	 3
  0000b	6a 00		 push	 0
  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GDPBNEAJ@?2?2?4?2TrueCrypt?$AA@
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00018	a3 00 00 00 00	 mov	 DWORD PTR _hDriver, eax

; 3239 : 
; 3240 : 	if (hDriver == INVALID_HANDLE_VALUE)

  0001d	83 f8 ff	 cmp	 eax, -1
  00020	75 07		 jne	 SHORT $LN4@DriverAtta

; 3241 : 	{
; 3242 : #ifndef SETUP
; 3243 : 
; 3244 : 		LoadSysEncSettings (NULL);
; 3245 : 
; 3246 : 		if (!CreateDriverSetupMutex ())
; 3247 : 		{
; 3248 : 			// Another instance is already attempting to install, register or start the driver
; 3249 : 
; 3250 : 			while (!CreateDriverSetupMutex ())
; 3251 : 			{
; 3252 : 				Sleep (100);	// Wait until the other instance finishes
; 3253 : 			}
; 3254 : 
; 3255 : 			// Try to open a handle to the driver again (keep the mutex in case the other instance failed)
; 3256 : 			goto start;		
; 3257 : 		}
; 3258 : 		else
; 3259 : 		{
; 3260 : 			// No other instance is currently attempting to install, register or start the driver
; 3261 : 
; 3262 : 			if (SystemEncryptionStatus != SYSENC_STATUS_NONE)
; 3263 : 			{
; 3264 : 				// This is an inconsistent state. The config file indicates system encryption should be
; 3265 : 				// active, but the driver is not running. This may happen e.g. when the pretest fails and 
; 3266 : 				// the user selects "Last Known Good Configuration" from the Windows boot menu.
; 3267 : 				// To fix this, we're going to reinstall the driver, start it, and register it for boot.
; 3268 : 
; 3269 : 				if (DoDriverInstall (NULL))
; 3270 : 				{
; 3271 : 					Sleep (1000);
; 3272 : 					hDriver = CreateFile (WIN32_ROOT_PREFIX, 0, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);
; 3273 : 
; 3274 : 					try
; 3275 : 					{
; 3276 : 						BootEncryption bootEnc (NULL);
; 3277 : 						bootEnc.RegisterBootDriver (bootEnc.GetHiddenOSCreationPhase() != TC_HIDDEN_OS_CREATION_PHASE_NONE ? true : false);
; 3278 : 					}
; 3279 : 					catch (Exception &e)
; 3280 : 					{
; 3281 : 						e.Show (NULL);
; 3282 : 					}
; 3283 : 				}
; 3284 : 
; 3285 : 				CloseDriverSetupMutex ();
; 3286 : 			}
; 3287 : 			else
; 3288 : 			{
; 3289 : 				// Attempt to load the driver (non-install/portable mode)
; 3290 : load:
; 3291 : 				BOOL res = DriverLoad ();
; 3292 : 
; 3293 : 				CloseDriverSetupMutex ();
; 3294 : 
; 3295 : 				if (res != ERROR_SUCCESS)
; 3296 : 					return res;
; 3297 : 
; 3298 : 				bPortableModeConfirmed = TRUE;
; 3299 : 
; 3300 : 				hDriver = CreateFile (WIN32_ROOT_PREFIX, 0, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);
; 3301 : 			}
; 3302 : 
; 3303 : 			if (bPortableModeConfirmed)
; 3304 : 				NotifyDriverOfPortableMode ();
; 3305 : 		}
; 3306 : 
; 3307 : #endif	// #ifndef SETUP
; 3308 : 
; 3309 : 		if (hDriver == INVALID_HANDLE_VALUE)
; 3310 : 			return ERR_OS_ERROR;

  00022	b8 01 00 00 00	 mov	 eax, 1

; 3347 : }

  00027	59		 pop	 ecx
  00028	c3		 ret	 0
$LN4@DriverAtta:

; 3311 : 	}
; 3312 : 
; 3313 : 	CloseDriverSetupMutex ();

  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hDriverSetupMutex@@3RAXA ; hDriverSetupMutex
  0002e	85 c0		 test	 eax, eax
  00030	74 2c		 je	 SHORT $LN10@DriverAtta
  00032	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hDriverSetupMutex@@3RAXA ; hDriverSetupMutex
  00038	51		 push	 ecx
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  0003f	85 c0		 test	 eax, eax
  00041	74 1b		 je	 SHORT $LN10@DriverAtta
  00043	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hDriverSetupMutex@@3RAXA ; hDriverSetupMutex
  00049	52		 push	 edx
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00050	85 c0		 test	 eax, eax
  00052	74 0a		 je	 SHORT $LN10@DriverAtta
  00054	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hDriverSetupMutex@@3RAXA, 0 ; hDriverSetupMutex
$LN10@DriverAtta:

; 3314 : 
; 3315 : 	if (hDriver != INVALID_HANDLE_VALUE)

  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDriver
  00063	83 f8 ff	 cmp	 eax, -1
  00066	74 4b		 je	 SHORT $LN1@DriverAtta
  00068	56		 push	 esi

; 3316 : 	{
; 3317 : 		DWORD dwResult;
; 3318 : 
; 3319 : 		BOOL bResult = DeviceIoControl (hDriver, TC_IOCTL_GET_DRIVER_VERSION, NULL, 0, &DriverVersion, sizeof (DriverVersion), &dwResult, NULL);

  00069	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__DeviceIoControl@32
  0006f	6a 00		 push	 0
  00071	8d 4c 24 08	 lea	 ecx, DWORD PTR _dwResult$141330[esp+12]
  00075	51		 push	 ecx
  00076	6a 04		 push	 4
  00078	68 00 00 00 00	 push	 OFFSET ?DriverVersion@@3JA ; DriverVersion
  0007d	6a 00		 push	 0
  0007f	6a 00		 push	 0
  00081	68 04 20 22 00	 push	 2236420			; 00222004H
  00086	50		 push	 eax
  00087	ff d6		 call	 esi

; 3320 : 
; 3321 : 		if (!bResult)

  00089	85 c0		 test	 eax, eax
  0008b	75 25		 jne	 SHORT $LN15@DriverAtta

; 3322 : 			bResult = DeviceIoControl (hDriver, TC_IOCTL_LEGACY_GET_DRIVER_VERSION, NULL, 0, &DriverVersion, sizeof (DriverVersion), &dwResult, NULL);

  0008d	50		 push	 eax
  0008e	8d 54 24 08	 lea	 edx, DWORD PTR _dwResult$141330[esp+12]
  00092	52		 push	 edx
  00093	6a 04		 push	 4
  00095	68 00 00 00 00	 push	 OFFSET ?DriverVersion@@3JA ; DriverVersion
  0009a	50		 push	 eax
  0009b	50		 push	 eax
  0009c	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDriver
  000a1	68 18 20 07 00	 push	 466968			; 00072018H
  000a6	50		 push	 eax
  000a7	ff d6		 call	 esi

; 3323 : 
; 3324 : #ifndef SETUP // Don't check version during setup to allow removal of another version
; 3325 : 		if (bResult == FALSE)
; 3326 : 		{
; 3327 : 			return ERR_OS_ERROR;
; 3328 : 		}
; 3329 : 		else if (DriverVersion != VERSION_NUM)
; 3330 : 		{
; 3331 : 			// Unload an incompatbile version of the driver loaded in non-install mode and load the required version
; 3332 : 			if (IsNonInstallMode () && CreateDriverSetupMutex () && DriverUnload () && nLoadRetryCount++ < 3)
; 3333 : 				goto load;
; 3334 : 
; 3335 : 			CloseDriverSetupMutex ();
; 3336 : 			CloseHandle (hDriver);
; 3337 : 			hDriver = INVALID_HANDLE_VALUE;
; 3338 : 			return ERR_DRIVER_VERSION;
; 3339 : 		}
; 3340 : #else
; 3341 : 		if (!bResult)

  000a9	85 c0		 test	 eax, eax
  000ab	75 05		 jne	 SHORT $LN15@DriverAtta

; 3342 : 			DriverVersion = 0;

  000ad	a3 00 00 00 00	 mov	 DWORD PTR ?DriverVersion@@3JA, eax ; DriverVersion
$LN15@DriverAtta:
  000b2	5e		 pop	 esi
$LN1@DriverAtta:

; 3343 : #endif
; 3344 : 	}
; 3345 : 
; 3346 : 	return 0;

  000b3	33 c0		 xor	 eax, eax

; 3347 : }

  000b5	59		 pop	 ecx
  000b6	c3		 ret	 0
_DriverAttach ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ResetCurrentDirectory
EXTRN	__imp__SetCurrentDirectoryA@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _ResetCurrentDirectory
_TEXT	SEGMENT
_p$ = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
_ResetCurrentDirectory PROC				; COMDAT

; 3351 : {

  00000	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 04 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+264], eax

; 3352 : 	char p[MAX_PATH];
; 3353 : 	if (!IsNonInstallMode () && SHGetFolderPath (NULL, CSIDL_PROFILE, NULL, 0, p) == ERROR_SUCCESS)

  00014	e8 00 00 00 00	 call	 _IsNonInstallMode
  00019	85 c0		 test	 eax, eax
  0001b	75 16		 jne	 SHORT $LN2@ResetCurre
  0001d	8d 04 24	 lea	 eax, DWORD PTR _p$[esp+264]
  00020	50		 push	 eax
  00021	6a 00		 push	 0
  00023	6a 00		 push	 0
  00025	6a 28		 push	 40			; 00000028H
  00027	6a 00		 push	 0
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetFolderPathA@20
  0002f	85 c0		 test	 eax, eax

; 3354 : 	{
; 3355 : 		SetCurrentDirectory (p);
; 3356 : 	}
; 3357 : 	else

  00031	74 24		 je	 SHORT $LN9@ResetCurre
$LN2@ResetCurre:

; 3358 : 	{
; 3359 : 		GetModPath (p, sizeof (p));

  00033	68 04 01 00 00	 push	 260			; 00000104H
  00038	8d 54 24 04	 lea	 edx, DWORD PTR _p$[esp+268]
  0003c	52		 push	 edx
  0003d	6a 00		 push	 0
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12
  00045	8d 04 24	 lea	 eax, DWORD PTR _p$[esp+264]
  00048	6a 5c		 push	 92			; 0000005cH
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 _strrchr
  00050	83 c4 08	 add	 esp, 8
  00053	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
$LN9@ResetCurre:

; 3360 : 		SetCurrentDirectory (p);

  00057	8d 0c 24	 lea	 ecx, DWORD PTR _p$[esp+264]
  0005a	51		 push	 ecx
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCurrentDirectoryA@4

; 3361 : 	}
; 3362 : }

  00061	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+264]
  00068	33 cc		 xor	 ecx, esp
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  00075	c3		 ret	 0
_ResetCurrentDirectory ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EK@MEIFFNPL@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AA?$CK?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AA?$CK?$AA?$CF?$AAc?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AAt?$AAc?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AAt?$AAc@ ; `string'
PUBLIC	??_C@_09EEODDAII@ALL_FILES?$AA@			; `string'
PUBLIC	??_C@_0L@KDKDGGJA@TC_VOLUMES?$AA@		; `string'
PUBLIC	_defaultExtension$GSCopy$
PUBLIC	_stringId$GSCopy$
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?BrowseFilesInDir@@YAHPAUHWND__@@PAD11HHPA_WPB_W3@Z ; BrowseFilesInDir
EXTRN	__imp__WideCharToMultiByte@32:PROC
EXTRN	__imp__GetSaveFileNameW@4:PROC
EXTRN	__imp__GetOpenFileNameW@4:PROC
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	_wcscpy_s:PROC
;	COMDAT ??_C@_1EK@MEIFFNPL@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AA?$CK?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AA?$CK?$AA?$CF?$AAc?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AAt?$AAc?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AAt?$AAc@
CONST	SEGMENT
??_C@_1EK@MEIFFNPL@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AA?$CK?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AA?$CK?$AA?$CF?$AAc?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AAt?$AAc?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AAt?$AAc@ DB '%'
	DB	00H, 'l', 00H, 's', 00H, ' ', 00H, '(', 00H, '*', 00H, '.', 00H
	DB	'*', 00H, ')', 00H, '%', 00H, 'c', 00H, '*', 00H, '.', 00H, '*'
	DB	00H, '%', 00H, 'c', 00H, '%', 00H, 'l', 00H, 's', 00H, ' ', 00H
	DB	'(', 00H, '*', 00H, '.', 00H, 't', 00H, 'c', 00H, ')', 00H, '%'
	DB	00H, 'c', 00H, '*', 00H, '.', 00H, 't', 00H, 'c', 00H, '%', 00H
	DB	'c', 00H, '%', 00H, 'c', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EEODDAII@ALL_FILES?$AA@
CONST	SEGMENT
??_C@_09EEODDAII@ALL_FILES?$AA@ DB 'ALL_FILES', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KDKDGGJA@TC_VOLUMES?$AA@
CONST	SEGMENT
??_C@_0L@KDKDGGJA@TC_VOLUMES?$AA@ DB 'TC_VOLUMES', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?BrowseFilesInDir@@YAHPAUHWND__@@PAD11HHPA_WPB_W3@Z
_TEXT	SEGMENT
_status$ = -3196					; size = 4
_defaultExtension$GSCopy$ = -3192			; size = 4
_stringId$GSCopy$ = -3188				; size = 4
_hwndDlg$GSCopy$ = -3184				; size = 4
_ofn$ = -3180						; size = 88
_file$ = -3092						; size = 520
_wInitialDir$ = -2572					; size = 520
_filter$ = -2052					; size = 2048
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_stringId$ = 12						; size = 4
_initialDir$ = 16					; size = 4
_lpszFileName$ = 20					; size = 4
_keepHistory$ = 24					; size = 4
_saveMode$ = 28						; size = 4
_browseFilter$ = 32					; size = 4
_initialFileName$ = 36					; size = 4
_defaultExtension$ = 40					; size = 4
?BrowseFilesInDir@@YAHPAUHWND__@@PAD11HHPA_WPB_W3@Z PROC ; BrowseFilesInDir, COMDAT

; 3372 : {

  00000	81 ec 7c 0c 00
	00		 sub	 esp, 3196		; 00000c7cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 78 0c
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+3196], eax
  00014	8b 84 24 80 0c
	00 00		 mov	 eax, DWORD PTR _hwndDlg$[esp+3192]
  0001b	8b 8c 24 84 0c
	00 00		 mov	 ecx, DWORD PTR _stringId$[esp+3192]
  00022	8b 94 24 a0 0c
	00 00		 mov	 edx, DWORD PTR _defaultExtension$[esp+3192]
  00029	53		 push	 ebx
  0002a	8b 9c 24 9c 0c
	00 00		 mov	 ebx, DWORD PTR _browseFilter$[esp+3196]
  00031	55		 push	 ebp
  00032	8b ac 24 a4 0c
	00 00		 mov	 ebp, DWORD PTR _initialFileName$[esp+3200]
  00039	56		 push	 esi
  0003a	8b b4 24 94 0c
	00 00		 mov	 esi, DWORD PTR _initialDir$[esp+3204]
  00041	57		 push	 edi
  00042	8b bc 24 9c 0c
	00 00		 mov	 edi, DWORD PTR _lpszFileName$[esp+3208]

; 3373 : 	OPENFILENAMEW ofn;
; 3374 : 	wchar_t file[TC_MAX_PATH] = { 0 };
; 3375 : 	wchar_t wInitialDir[TC_MAX_PATH] = { 0 };
; 3376 : 	wchar_t filter[1024];
; 3377 : 	BOOL status = FALSE;

  00049	89 44 24 1c	 mov	 DWORD PTR _hwndDlg$GSCopy$[esp+3212], eax
  0004d	33 c0		 xor	 eax, eax
  0004f	68 06 02 00 00	 push	 518			; 00000206H
  00054	89 4c 24 1c	 mov	 DWORD PTR _stringId$GSCopy$[esp+3216], ecx
  00058	50		 push	 eax
  00059	8d 8c 24 82 00
	00 00		 lea	 ecx, DWORD PTR _file$[esp+3222]
  00060	51		 push	 ecx
  00061	89 54 24 20	 mov	 DWORD PTR _defaultExtension$GSCopy$[esp+3224], edx
  00065	66 89 84 24 84
	00 00 00	 mov	 WORD PTR _file$[esp+3224], ax
  0006d	e8 00 00 00 00	 call	 _memset
  00072	33 d2		 xor	 edx, edx
  00074	68 06 02 00 00	 push	 518			; 00000206H
  00079	52		 push	 edx
  0007a	8d 84 24 96 02
	00 00		 lea	 eax, DWORD PTR _wInitialDir$[esp+3234]
  00081	50		 push	 eax
  00082	66 89 94 24 98
	02 00 00	 mov	 WORD PTR _wInitialDir$[esp+3236], dx
  0008a	e8 00 00 00 00	 call	 _memset
  0008f	83 c4 18	 add	 esp, 24			; 00000018H

; 3378 : 
; 3379 : 	CoInitialize (NULL);

  00092	6a 00		 push	 0
  00094	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR _status$[esp+3216], 0
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoInitialize@4

; 3380 : 
; 3381 : 	ZeroMemory (&ofn, sizeof (ofn));

  000a2	6a 58		 push	 88			; 00000058H
  000a4	8d 4c 24 24	 lea	 ecx, DWORD PTR _ofn$[esp+3216]
  000a8	6a 00		 push	 0
  000aa	51		 push	 ecx
  000ab	e8 00 00 00 00	 call	 _memset
  000b0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3382 : 	*lpszFileName = 0;

  000b3	c6 07 00	 mov	 BYTE PTR [edi], 0

; 3383 : 
; 3384 : 	if (initialDir)

  000b6	85 f6		 test	 esi, esi
  000b8	74 26		 je	 SHORT $LN15@BrowseFile

; 3385 : 	{
; 3386 : 		swprintf_s (wInitialDir, ARRAY_LENGTH(wInitialDir), L"%hs", initialDir);

  000ba	56		 push	 esi
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs?$AA?$AA@
  000c0	8d 94 24 88 02
	00 00		 lea	 edx, DWORD PTR _wInitialDir$[esp+3220]
  000c7	68 04 01 00 00	 push	 260			; 00000104H
  000cc	52		 push	 edx
  000cd	e8 00 00 00 00	 call	 _swprintf_s

; 3387 : 		ofn.lpstrInitialDir			= wInitialDir;

  000d2	8d 84 24 90 02
	00 00		 lea	 eax, DWORD PTR _wInitialDir$[esp+3228]
  000d9	83 c4 10	 add	 esp, 16			; 00000010H
  000dc	89 44 24 4c	 mov	 DWORD PTR _ofn$[esp+3256], eax
$LN15@BrowseFile:

; 3388 : 	}
; 3389 : 
; 3390 : 	if (initialFileName)

  000e0	85 ed		 test	 ebp, ebp
  000e2	74 13		 je	 SHORT $LN17@BrowseFile

; 3391 : 		wcscpy_s (file, array_capacity (file), initialFileName);

  000e4	55		 push	 ebp
  000e5	8d 4c 24 7c	 lea	 ecx, DWORD PTR _file$[esp+3216]
  000e9	68 04 01 00 00	 push	 260			; 00000104H
  000ee	51		 push	 ecx
  000ef	e8 00 00 00 00	 call	 _wcscpy_s
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN17@BrowseFile:

; 3392 : 
; 3393 : 	ofn.lStructSize				= sizeof (ofn);
; 3394 : 	ofn.hwndOwner				= hwndDlg;

  000f7	8b 54 24 1c	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[esp+3212]

; 3395 : 
; 3396 : 	_snwprintf (filter, ARRAY_LENGTH(filter), L"%ls (*.*)%c*.*%c%ls (*.tc)%c*.tc%c%c",
; 3397 : 		GetString ("ALL_FILES"), 0, 0, GetString ("TC_VOLUMES"), 0, 0, 0);

  000fb	6a 00		 push	 0
  000fd	6a 00		 push	 0
  000ff	6a 00		 push	 0
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_0L@KDKDGGJA@TC_VOLUMES?$AA@
  00106	c7 44 24 30 58
	00 00 00	 mov	 DWORD PTR _ofn$[esp+3228], 88 ; 00000058H
  0010e	89 54 24 34	 mov	 DWORD PTR _ofn$[esp+3232], edx
  00112	e8 00 00 00 00	 call	 _GetString
  00117	83 c4 04	 add	 esp, 4
  0011a	50		 push	 eax
  0011b	6a 00		 push	 0
  0011d	6a 00		 push	 0
  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_09EEODDAII@ALL_FILES?$AA@
  00124	e8 00 00 00 00	 call	 _GetString
  00129	83 c4 04	 add	 esp, 4
  0012c	50		 push	 eax
  0012d	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@MEIFFNPL@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AA?$CK?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AA?$CK?$AA?$CF?$AAc?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AAt?$AAc?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AAt?$AAc@
  00132	8d 84 24 a8 04
	00 00		 lea	 eax, DWORD PTR _filter$[esp+3244]
  00139	68 00 04 00 00	 push	 1024			; 00000400H
  0013e	50		 push	 eax
  0013f	e8 00 00 00 00	 call	 __snwprintf
  00144	83 c4 28	 add	 esp, 40			; 00000028H

; 3398 : 	ofn.lpstrFilter				= browseFilter ? browseFilter : filter;

  00147	85 db		 test	 ebx, ebx
  00149	74 06		 je	 SHORT $LN13@BrowseFile
  0014b	89 5c 24 2c	 mov	 DWORD PTR _ofn$[esp+3224], ebx
  0014f	eb 0b		 jmp	 SHORT $LN14@BrowseFile
$LN13@BrowseFile:
  00151	8d 8c 24 88 04
	00 00		 lea	 ecx, DWORD PTR _filter$[esp+3212]
  00158	89 4c 24 2c	 mov	 DWORD PTR _ofn$[esp+3224], ecx
$LN14@BrowseFile:

; 3399 : 	ofn.nFilterIndex			= 1;
; 3400 : 	ofn.lpstrFile				= file;
; 3401 : 	ofn.nMaxFile				= sizeof (file) / sizeof (file[0]);
; 3402 : 	ofn.lpstrTitle				= GetString (stringId);

  0015c	8b 44 24 18	 mov	 eax, DWORD PTR _stringId$GSCopy$[esp+3212]
  00160	8d 54 24 78	 lea	 edx, DWORD PTR _file$[esp+3212]
  00164	bd 01 00 00 00	 mov	 ebp, 1
  00169	50		 push	 eax
  0016a	89 6c 24 3c	 mov	 DWORD PTR _ofn$[esp+3240], ebp
  0016e	89 54 24 40	 mov	 DWORD PTR _ofn$[esp+3244], edx
  00172	c7 44 24 44 04
	01 00 00	 mov	 DWORD PTR _ofn$[esp+3248], 260 ; 00000104H
  0017a	e8 00 00 00 00	 call	 _GetString

; 3403 : 	ofn.lpstrDefExt				= defaultExtension;
; 3404 : 	ofn.Flags					= OFN_HIDEREADONLY
; 3405 : 		| OFN_PATHMUSTEXIST
; 3406 : 		| (keepHistory ? 0 : OFN_DONTADDTORECENT)
; 3407 : 		| (saveMode ? OFN_OVERWRITEPROMPT : 0);

  0017f	8b b4 24 a4 0c
	00 00		 mov	 esi, DWORD PTR _keepHistory$[esp+3212]
  00186	8b 9c 24 a8 0c
	00 00		 mov	 ebx, DWORD PTR _saveMode$[esp+3212]
  0018d	8b 4c 24 18	 mov	 ecx, DWORD PTR _defaultExtension$GSCopy$[esp+3216]
  00191	83 c4 04	 add	 esp, 4
  00194	8b d6		 mov	 edx, esi
  00196	f7 da		 neg	 edx
  00198	1b d2		 sbb	 edx, edx
  0019a	81 e2 00 00 00
	fe		 and	 edx, -33554432		; fe000000H
  001a0	89 44 24 50	 mov	 DWORD PTR _ofn$[esp+3260], eax
  001a4	81 c2 00 00 00
	02		 add	 edx, 33554432		; 02000000H
  001aa	8b c3		 mov	 eax, ebx
  001ac	f7 d8		 neg	 eax
  001ae	1b c0		 sbb	 eax, eax
  001b0	83 e0 02	 and	 eax, 2
  001b3	0b d0		 or	 edx, eax
  001b5	81 ca 04 08 00
	00		 or	 edx, 2052		; 00000804H
  001bb	89 4c 24 5c	 mov	 DWORD PTR _ofn$[esp+3272], ecx
  001bf	89 54 24 54	 mov	 DWORD PTR _ofn$[esp+3264], edx

; 3408 : 
; 3409 : 	if (!keepHistory)

  001c3	85 f6		 test	 esi, esi
  001c5	75 05		 jne	 SHORT $LN8@BrowseFile

; 3410 : 		CleanLastVisitedMRU ();

  001c7	e8 00 00 00 00	 call	 _CleanLastVisitedMRU
$LN8@BrowseFile:

; 3411 : 
; 3412 : 	SystemFileSelectorCallerThreadId = GetCurrentThreadId();

  001cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThreadId@0
  001d2	a3 00 00 00 00	 mov	 DWORD PTR ?SystemFileSelectorCallerThreadId@@3KA, eax ; SystemFileSelectorCallerThreadId

; 3413 : 	SystemFileSelectorCallPending = TRUE;

  001d7	89 2d 00 00 00
	00		 mov	 DWORD PTR ?SystemFileSelectorCallPending@@3HA, ebp ; SystemFileSelectorCallPending

; 3414 : 
; 3415 : 	if (!saveMode)

  001dd	85 db		 test	 ebx, ebx
  001df	75 0d		 jne	 SHORT $LN7@BrowseFile

; 3416 : 	{
; 3417 : 		if (!GetOpenFileNameW (&ofn))

  001e1	8d 4c 24 20	 lea	 ecx, DWORD PTR _ofn$[esp+3212]
  001e5	51		 push	 ecx
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetOpenFileNameW@4

; 3418 : 			goto ret;
; 3419 : 	}
; 3420 : 	else

  001ec	eb 0b		 jmp	 SHORT $LN19@BrowseFile
$LN7@BrowseFile:

; 3421 : 	{
; 3422 : 		if (!GetSaveFileNameW (&ofn))

  001ee	8d 54 24 20	 lea	 edx, DWORD PTR _ofn$[esp+3212]
  001f2	52		 push	 edx
  001f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSaveFileNameW@4
$LN19@BrowseFile:
  001f9	85 c0		 test	 eax, eax
  001fb	74 35		 je	 SHORT $LN16@BrowseFile

; 3423 : 			goto ret;
; 3424 : 	}
; 3425 : 
; 3426 : 	SystemFileSelectorCallPending = FALSE;
; 3427 : 
; 3428 : 	WideCharToMultiByte (CP_ACP, 0, file, -1, lpszFileName, MAX_PATH, NULL, NULL);

  001fd	6a 00		 push	 0
  001ff	6a 00		 push	 0
  00201	68 04 01 00 00	 push	 260			; 00000104H
  00206	57		 push	 edi
  00207	6a ff		 push	 -1
  00209	8d 84 24 8c 00
	00 00		 lea	 eax, DWORD PTR _file$[esp+3232]
  00210	50		 push	 eax
  00211	6a 00		 push	 0
  00213	6a 00		 push	 0
  00215	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SystemFileSelectorCallPending@@3HA, 0 ; SystemFileSelectorCallPending
  0021f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32

; 3429 : 
; 3430 : 	if (!keepHistory)

  00225	85 f6		 test	 esi, esi
  00227	75 05		 jne	 SHORT $LN1@BrowseFile

; 3431 : 		CleanLastVisitedMRU ();

  00229	e8 00 00 00 00	 call	 _CleanLastVisitedMRU
$LN1@BrowseFile:

; 3432 : 
; 3433 : 	status = TRUE;

  0022e	8b f5		 mov	 esi, ebp
  00230	eb 04		 jmp	 SHORT $ret$141377
$LN16@BrowseFile:
  00232	8b 74 24 10	 mov	 esi, DWORD PTR _status$[esp+3212]
$ret$141377:

; 3434 : 
; 3435 : ret:
; 3436 : 	SystemFileSelectorCallPending = FALSE;

  00236	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SystemFileSelectorCallPending@@3HA, 0 ; SystemFileSelectorCallPending

; 3437 : 	ResetCurrentDirectory();

  00240	e8 00 00 00 00	 call	 _ResetCurrentDirectory

; 3438 : 	CoUninitialize();

  00245	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoUninitialize@0

; 3439 : 
; 3440 : 	return status;
; 3441 : }

  0024b	8b 8c 24 88 0c
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+3212]
  00252	5f		 pop	 edi
  00253	8b c6		 mov	 eax, esi
  00255	5e		 pop	 esi
  00256	5d		 pop	 ebp
  00257	5b		 pop	 ebx
  00258	33 cc		 xor	 ecx, esp
  0025a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025f	81 c4 7c 0c 00
	00		 add	 esp, 3196		; 00000c7cH
  00265	c3		 ret	 0
?BrowseFilesInDir@@YAHPAUHWND__@@PAD11HHPA_WPB_W3@Z ENDP ; BrowseFilesInDir
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_SelectMultipleFiles
; Function compile flags: /Ogtpy
;	COMDAT _SelectMultipleFiles
_TEXT	SEGMENT
_ofn$ = -264280						; size = 88
_filter$ = -264192					; size = 2048
_file$ = -262144					; size = 262140
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_stringId$ = 12						; size = 4
_lpszFileName$ = 16					; size = 4
_keepHistory$ = 20					; size = 4
_SelectMultipleFiles PROC				; COMDAT

; 3448 : {

  00000	b8 58 08 04 00	 mov	 eax, 264280		; 00040858H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 54 08
	04 00		 mov	 DWORD PTR __$ArrayPad$[esp+264280], eax
  00018	53		 push	 ebx
  00019	8b 9c 24 68 08
	04 00		 mov	 ebx, DWORD PTR _lpszFileName$[esp+264280]
  00020	55		 push	 ebp
  00021	56		 push	 esi
  00022	8b b4 24 68 08
	04 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+264288]
  00029	57		 push	 edi
  0002a	8b bc 24 70 08
	04 00		 mov	 edi, DWORD PTR _stringId$[esp+264292]

; 3449 : 	OPENFILENAMEW ofn;
; 3450 : 	wchar_t file[0xffff * 2] = { 0 };	// The size must not exceed 0xffff*2 due to a bug in Windows 2000 and XP SP1

  00031	33 c0		 xor	 eax, eax
  00033	68 fa ff 03 00	 push	 262138			; 0003fffaH
  00038	50		 push	 eax
  00039	8d 8c 24 72 08
	00 00		 lea	 ecx, DWORD PTR _file$[esp+264306]
  00040	51		 push	 ecx
  00041	66 89 84 24 74
	08 00 00	 mov	 WORD PTR _file$[esp+264308], ax
  00049	e8 00 00 00 00	 call	 _memset
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3451 : 	wchar_t filter[1024];
; 3452 : 	BOOL status = FALSE;

  00051	33 ed		 xor	 ebp, ebp

; 3453 : 
; 3454 : 	CoInitialize (NULL);

  00053	55		 push	 ebp
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoInitialize@4

; 3455 : 
; 3456 : 	ZeroMemory (&ofn, sizeof (ofn));

  0005a	6a 58		 push	 88			; 00000058H
  0005c	8d 54 24 14	 lea	 edx, DWORD PTR _ofn$[esp+264300]
  00060	55		 push	 ebp
  00061	52		 push	 edx
  00062	e8 00 00 00 00	 call	 _memset
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3457 : 
; 3458 : 	*lpszFileName = 0;
; 3459 : 	ofn.lStructSize				= sizeof (ofn);
; 3460 : 	ofn.hwndOwner				= hwndDlg;

  0006a	89 74 24 14	 mov	 DWORD PTR _ofn$[esp+264300], esi

; 3461 : 	_snwprintf (filter, ARRAY_LENGTH(filter), L"%ls (*.*)%c*.*%c%ls (*.tc)%c*.tc%c%c",
; 3462 : 		GetString ("ALL_FILES"), 0, 0, GetString ("TC_VOLUMES"), 0, 0, 0);

  0006e	33 f6		 xor	 esi, esi
  00070	56		 push	 esi
  00071	56		 push	 esi
  00072	56		 push	 esi
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0L@KDKDGGJA@TC_VOLUMES?$AA@
  00078	c6 03 00	 mov	 BYTE PTR [ebx], 0
  0007b	c7 44 24 20 58
	00 00 00	 mov	 DWORD PTR _ofn$[esp+264312], 88 ; 00000058H
  00083	e8 00 00 00 00	 call	 _GetString
  00088	83 c4 04	 add	 esp, 4
  0008b	50		 push	 eax
  0008c	56		 push	 esi
  0008d	56		 push	 esi
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_09EEODDAII@ALL_FILES?$AA@
  00093	e8 00 00 00 00	 call	 _GetString
  00098	83 c4 04	 add	 esp, 4
  0009b	50		 push	 eax
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@MEIFFNPL@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AA?$CK?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AA?$CK?$AA?$CF?$AAc?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AAt?$AAc?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AAt?$AAc@
  000a1	8d 84 24 88 00
	00 00		 lea	 eax, DWORD PTR _filter$[esp+264328]
  000a8	68 00 04 00 00	 push	 1024			; 00000400H
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 __snwprintf

; 3463 : 	ofn.lpstrFilter				= filter;

  000b3	8d 8c 24 90 00
	00 00		 lea	 ecx, DWORD PTR _filter$[esp+264336]

; 3464 : 	ofn.nFilterIndex			= 1;
; 3465 : 	ofn.lpstrFile				= file;

  000ba	8d 94 24 90 08
	00 00		 lea	 edx, DWORD PTR _file$[esp+264336]

; 3466 : 	ofn.nMaxFile				= sizeof (file) / sizeof (file[0]);
; 3467 : 	ofn.lpstrTitle				= GetString (stringId);

  000c1	57		 push	 edi
  000c2	89 4c 24 48	 mov	 DWORD PTR _ofn$[esp+264352], ecx
  000c6	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR _ofn$[esp+264364], 1
  000ce	89 54 24 58	 mov	 DWORD PTR _ofn$[esp+264368], edx
  000d2	c7 44 24 5c fe
	ff 01 00	 mov	 DWORD PTR _ofn$[esp+264372], 131070 ; 0001fffeH
  000da	e8 00 00 00 00	 call	 _GetString

; 3468 : 	ofn.Flags					= OFN_HIDEREADONLY
; 3469 : 		| OFN_EXPLORER
; 3470 : 		| OFN_PATHMUSTEXIST
; 3471 : 		| OFN_ALLOWMULTISELECT
; 3472 : 		| (keepHistory ? 0 : OFN_DONTADDTORECENT);

  000df	8b bc 24 a4 08
	04 00		 mov	 edi, DWORD PTR _keepHistory$[esp+264336]
  000e6	89 44 24 6c	 mov	 DWORD PTR _ofn$[esp+264388], eax
  000ea	83 c4 2c	 add	 esp, 44			; 0000002cH
  000ed	8b c7		 mov	 eax, edi
  000ef	f7 d8		 neg	 eax
  000f1	1b c0		 sbb	 eax, eax
  000f3	25 00 00 00 fe	 and	 eax, -33554432		; fe000000H
  000f8	05 00 00 00 02	 add	 eax, 33554432		; 02000000H
  000fd	0d 04 0a 08 00	 or	 eax, 526852		; 00080a04H
  00102	89 44 24 44	 mov	 DWORD PTR _ofn$[esp+264348], eax

; 3473 : 	
; 3474 : 	if (!keepHistory)

  00106	3b fe		 cmp	 edi, esi
  00108	75 05		 jne	 SHORT $LN8@SelectMult@2

; 3475 : 		CleanLastVisitedMRU ();

  0010a	e8 00 00 00 00	 call	 _CleanLastVisitedMRU
$LN8@SelectMult@2:

; 3476 : 
; 3477 : 	SystemFileSelectorCallerThreadId = GetCurrentThreadId();

  0010f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThreadId@0

; 3478 : 	SystemFileSelectorCallPending = TRUE;
; 3479 : 
; 3480 : 	if (!GetOpenFileNameW (&ofn))

  00115	8d 4c 24 10	 lea	 ecx, DWORD PTR _ofn$[esp+264296]
  00119	51		 push	 ecx
  0011a	a3 00 00 00 00	 mov	 DWORD PTR ?SystemFileSelectorCallerThreadId@@3KA, eax ; SystemFileSelectorCallerThreadId
  0011f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?SystemFileSelectorCallPending@@3HA, 1 ; SystemFileSelectorCallPending
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetOpenFileNameW@4
  0012f	85 c0		 test	 eax, eax
  00131	0f 84 b1 00 00
	00		 je	 $ret$141397

; 3481 : 		goto ret;
; 3482 : 
; 3483 : 	SystemFileSelectorCallPending = FALSE;
; 3484 : 
; 3485 : 	if (file[ofn.nFileOffset - 1] != 0)

  00137	0f b7 54 24 48	 movzx	 edx, WORD PTR _ofn$[esp+264352]
  0013c	89 35 00 00 00
	00		 mov	 DWORD PTR ?SystemFileSelectorCallPending@@3HA, esi ; SystemFileSelectorCallPending
  00142	66 39 b4 54 66
	08 00 00	 cmp	 WORD PTR _file$[esp+edx*2+264294], si
  0014a	74 22		 je	 SHORT $LN5@SelectMult@2

; 3486 : 	{
; 3487 : 		// Single file selected
; 3488 : 		WideCharToMultiByte (CP_ACP, 0, file, -1, lpszFileName, MAX_PATH, NULL, NULL);

  0014c	56		 push	 esi
  0014d	56		 push	 esi
  0014e	68 04 01 00 00	 push	 260			; 00000104H
  00153	53		 push	 ebx
  00154	6a ff		 push	 -1
  00156	8d 84 24 7c 08
	00 00		 lea	 eax, DWORD PTR _file$[esp+264316]
  0015d	50		 push	 eax
  0015e	56		 push	 esi
  0015f	56		 push	 esi
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32

; 3489 : 		SelectMultipleFilesOffset = 0;

  00166	89 35 00 00 00
	00		 mov	 DWORD PTR _SelectMultipleFilesOffset, esi

; 3490 : 	}
; 3491 : 	else

  0016c	eb 6c		 jmp	 SHORT $LN4@SelectMult@2
$LN5@SelectMult@2:

; 3492 : 	{
; 3493 : 		// Multiple files selected
; 3494 : 		int n;
; 3495 : 		wchar_t *f = file;
; 3496 : 		char *s = SelectMultipleFilesPath;
; 3497 : 		while ((n = WideCharToMultiByte (CP_ACP, 0, f, -1, s, MAX_PATH, NULL, NULL)) > 1)

  0016e	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__WideCharToMultiByte@32
  00174	6a 00		 push	 0
  00176	6a 00		 push	 0
  00178	68 04 01 00 00	 push	 260			; 00000104H
  0017d	bf 00 00 00 00	 mov	 edi, OFFSET _SelectMultipleFilesPath
  00182	57		 push	 edi
  00183	6a ff		 push	 -1
  00185	8d b4 24 7c 08
	00 00		 lea	 esi, DWORD PTR _file$[esp+264316]
  0018c	8b ce		 mov	 ecx, esi
  0018e	51		 push	 ecx
  0018f	6a 00		 push	 0
  00191	6a 00		 push	 0
  00193	ff d5		 call	 ebp
  00195	83 f8 01	 cmp	 eax, 1
  00198	7e 23		 jle	 SHORT $LN2@SelectMult@2
  0019a	8d 9b 00 00 00
	00		 npad	 6
$LL3@SelectMult@2:
  001a0	6a 00		 push	 0
  001a2	6a 00		 push	 0
  001a4	68 04 01 00 00	 push	 260			; 00000104H

; 3498 : 		{
; 3499 : 			f += n;
; 3500 : 			s += n;

  001a9	03 f8		 add	 edi, eax
  001ab	57		 push	 edi
  001ac	6a ff		 push	 -1
  001ae	8d 34 46	 lea	 esi, DWORD PTR [esi+eax*2]
  001b1	56		 push	 esi
  001b2	6a 00		 push	 0
  001b4	6a 00		 push	 0
  001b6	ff d5		 call	 ebp
  001b8	83 f8 01	 cmp	 eax, 1
  001bb	7f e3		 jg	 SHORT $LL3@SelectMult@2
$LN2@SelectMult@2:

; 3501 : 		}
; 3502 : 
; 3503 : 		SelectMultipleFilesOffset = ofn.nFileOffset;

  001bd	0f b7 54 24 48	 movzx	 edx, WORD PTR _ofn$[esp+264352]

; 3504 : 		SelectMultipleFilesNext (lpszFileName);

  001c2	53		 push	 ebx
  001c3	89 15 00 00 00
	00		 mov	 DWORD PTR _SelectMultipleFilesOffset, edx
  001c9	e8 00 00 00 00	 call	 _SelectMultipleFilesNext
  001ce	8b bc 24 7c 08
	04 00		 mov	 edi, DWORD PTR _keepHistory$[esp+264296]
  001d5	83 c4 04	 add	 esp, 4
  001d8	33 f6		 xor	 esi, esi
$LN4@SelectMult@2:

; 3505 : 	}
; 3506 : 
; 3507 : 	if (!keepHistory)

  001da	3b fe		 cmp	 edi, esi
  001dc	75 05		 jne	 SHORT $LN1@SelectMult@2

; 3508 : 		CleanLastVisitedMRU ();

  001de	e8 00 00 00 00	 call	 _CleanLastVisitedMRU
$LN1@SelectMult@2:

; 3509 : 
; 3510 : 	status = TRUE;

  001e3	bd 01 00 00 00	 mov	 ebp, 1
$ret$141397:

; 3511 : 	
; 3512 : ret:
; 3513 : 	SystemFileSelectorCallPending = FALSE;

  001e8	89 35 00 00 00
	00		 mov	 DWORD PTR ?SystemFileSelectorCallPending@@3HA, esi ; SystemFileSelectorCallPending

; 3514 : 	ResetCurrentDirectory();

  001ee	e8 00 00 00 00	 call	 _ResetCurrentDirectory

; 3515 : 	CoUninitialize();

  001f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoUninitialize@0

; 3516 : 
; 3517 : 	return status;
; 3518 : }

  001f9	8b 8c 24 64 08
	04 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+264296]
  00200	5f		 pop	 edi
  00201	5e		 pop	 esi
  00202	8b c5		 mov	 eax, ebp
  00204	5d		 pop	 ebp
  00205	5b		 pop	 ebx
  00206	33 cc		 xor	 ecx, esp
  00208	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020d	81 c4 58 08 04
	00		 add	 esp, 264280		; 00040858H
  00213	c3		 ret	 0
_SelectMultipleFiles ENDP
_TEXT	ENDS
PUBLIC	??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@		; `string'
PUBLIC	_MultiChoiceDialogProc@16
;	COMDAT ??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@ DB 0aH, 00H, 00H, 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _MultiChoiceDialogProc@16
_TEXT	SEGMENT
_horizSubOffset$ = -160					; size = 4
_pwStr$141719 = -160					; size = 4
_vertMsgHeightOffset$ = -156				; size = 4
_bResolve$ = -156					; size = 4
_nMainTextLenInChars$ = -152				; size = 4
_nStr$ = -152						; size = 4
tv698 = -148						; size = 8
tv265 = -148						; size = 4
_nTextGfxLineHeight$ = -148				; size = 4
_nLongestButtonCaptionCharLen$ = -148			; size = 4
tv717 = -140						; size = 4
tv569 = -140						; size = 4
_nBaseButtonWidth$ = -140				; size = 4
_vertSubOffset$ = -136					; size = 4
_nActiveChoices$ = -136					; size = 4
tv661 = -132						; size = 4
tv662 = -128						; size = 4
_offset$141741 = -124					; size = 8
_nLongestButtonCaptionWidth$ = -124			; size = 4
_newLineSeqCount$ = -116				; size = 4
_wrec$ = -112						; size = 16
_rec$ = -96						; size = 16
_trec$ = -80						; size = 16
_nBaseButtonHeight$ = -64				; size = 4
_nChoiceIDs$ = -60					; size = 44
_wtrec$ = -16						; size = 16
_hwndDlg$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_MultiChoiceDialogProc@16 PROC				; COMDAT

; 5182 : {

  00000	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H

; 5183 : 	int nChoiceIDs [MAX_MULTI_CHOICES+1] = { IDC_MULTI_CHOICE_MSG, IDC_CHOICE1, IDC_CHOICE2, IDC_CHOICE3,
; 5184 : 		IDC_CHOICE4, IDC_CHOICE5, IDC_CHOICE6, IDC_CHOICE7, IDC_CHOICE8, IDC_CHOICE9, IDC_CHOICE10 };
; 5185 : 	int nBaseButtonWidth = 0;
; 5186 : 	int nBaseButtonHeight = 0;
; 5187 : 	int nActiveChoices = -1;
; 5188 : 	int nStr = 0;
; 5189 : 	int vertSubOffset, horizSubOffset, vertMsgHeightOffset;
; 5190 : 	int vertOffset = 0;
; 5191 : 	int nLongestButtonCaptionWidth = 6;
; 5192 : 	int nLongestButtonCaptionCharLen = 1;
; 5193 : 	int nTextGfxLineHeight = 0;
; 5194 : 	int nMainTextLenInChars = 0;
; 5195 : 	int newLineSeqCount = 0;
; 5196 : 	RECT rec, wrec, wtrec, trec;
; 5197 : 	BOOL bResolve;
; 5198 : 
; 5199 : 	WORD lw = LOWORD (wParam);
; 5200 : 
; 5201 : 	switch (uMsg)

  00006	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR _uMsg$[esp+156]
  0000d	57		 push	 edi
  0000e	33 ff		 xor	 edi, edi
  00010	83 e8 10	 sub	 eax, 16			; 00000010H
  00013	c7 44 24 68 dc
	13 00 00	 mov	 DWORD PTR _nChoiceIDs$[esp+164], 5084 ; 000013dcH
  0001b	c7 44 24 6c dd
	13 00 00	 mov	 DWORD PTR _nChoiceIDs$[esp+168], 5085 ; 000013ddH
  00023	c7 44 24 70 df
	13 00 00	 mov	 DWORD PTR _nChoiceIDs$[esp+172], 5087 ; 000013dfH
  0002b	c7 44 24 74 e0
	13 00 00	 mov	 DWORD PTR _nChoiceIDs$[esp+176], 5088 ; 000013e0H
  00033	c7 44 24 78 e1
	13 00 00	 mov	 DWORD PTR _nChoiceIDs$[esp+180], 5089 ; 000013e1H
  0003b	c7 44 24 7c de
	13 00 00	 mov	 DWORD PTR _nChoiceIDs$[esp+184], 5086 ; 000013deH
  00043	c7 84 24 80 00
	00 00 e2 13 00
	00		 mov	 DWORD PTR _nChoiceIDs$[esp+188], 5090 ; 000013e2H
  0004e	c7 84 24 84 00
	00 00 e3 13 00
	00		 mov	 DWORD PTR _nChoiceIDs$[esp+192], 5091 ; 000013e3H
  00059	c7 84 24 88 00
	00 00 e4 13 00
	00		 mov	 DWORD PTR _nChoiceIDs$[esp+196], 5092 ; 000013e4H
  00064	c7 84 24 8c 00
	00 00 e5 13 00
	00		 mov	 DWORD PTR _nChoiceIDs$[esp+200], 5093 ; 000013e5H
  0006f	c7 84 24 90 00
	00 00 e6 13 00
	00		 mov	 DWORD PTR _nChoiceIDs$[esp+204], 5094 ; 000013e6H
  0007a	c7 44 24 1c ff
	ff ff ff	 mov	 DWORD PTR _nActiveChoices$[esp+164], -1
  00082	89 7c 24 0c	 mov	 DWORD PTR _nStr$[esp+164], edi
  00086	c7 44 24 28 06
	00 00 00	 mov	 DWORD PTR _nLongestButtonCaptionWidth$[esp+164], 6
  0008e	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR _nLongestButtonCaptionCharLen$[esp+164], 1
  00096	89 7c 24 30	 mov	 DWORD PTR _newLineSeqCount$[esp+164], edi
  0009a	0f 84 4d 07 00
	00		 je	 $LN1@MultiChoic
  000a0	2d 00 01 00 00	 sub	 eax, 256		; 00000100H
  000a5	74 4c		 je	 SHORT $LN25@MultiChoic
  000a7	83 e8 01	 sub	 eax, 1
  000aa	75 27		 jne	 SHORT $LN3@MultiChoic

; 5372 : 
; 5373 : 			return 1;
; 5374 : 		}
; 5375 : 
; 5376 : 	case WM_COMMAND:
; 5377 : 
; 5378 : 		if (lw == IDCLOSE || lw == IDCANCEL)

  000ac	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR _wParam$[esp+160]
  000b3	66 83 f9 08	 cmp	 cx, 8
  000b7	74 2c		 je	 SHORT $LN6@MultiChoic
  000b9	66 83 f9 02	 cmp	 cx, 2
  000bd	74 26		 je	 SHORT $LN6@MultiChoic

; 5382 : 		}
; 5383 : 
; 5384 : 		for (nStr = 1; nStr < MAX_MULTI_CHOICES+1; nStr++)

  000bf	b8 01 00 00 00	 mov	 eax, 1
  000c4	0f b7 c9	 movzx	 ecx, cx
$LL5@MultiChoic:

; 5385 : 		{
; 5386 : 			if (lw == nChoiceIDs[nStr])

  000c7	3b 4c 84 68	 cmp	 ecx, DWORD PTR _nChoiceIDs$[esp+eax*4+164]
  000cb	74 12		 je	 SHORT $LN75@MultiChoic
  000cd	40		 inc	 eax
  000ce	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  000d1	7c f4		 jl	 SHORT $LL5@MultiChoic
$LN3@MultiChoic:

; 5397 : 	}
; 5398 : 
; 5399 : 	return 0;

  000d3	33 c0		 xor	 eax, eax
  000d5	5f		 pop	 edi

; 5400 : }

  000d6	81 c4 a0 00 00
	00		 add	 esp, 160		; 000000a0H
  000dc	c2 10 00	 ret	 16			; 00000010H
$LN75@MultiChoic:

; 5387 : 			{
; 5388 : 				EndDialog (hwndDlg, nStr);

  000df	50		 push	 eax

; 5389 : 				return 1;

  000e0	e9 09 07 00 00	 jmp	 $LN83@MultiChoic
$LN6@MultiChoic:

; 5379 : 		{
; 5380 : 			EndDialog (hwndDlg, 0);

  000e5	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR _hwndDlg$[esp+160]
  000ec	57		 push	 edi
  000ed	51		 push	 ecx

; 5381 : 			return 1;

  000ee	e9 03 07 00 00	 jmp	 $LN84@MultiChoic
$LN25@MultiChoic:
  000f3	53		 push	 ebx

; 5202 : 	{
; 5203 : 	case WM_INITDIALOG:
; 5204 : 		{
; 5205 : 			char **pStr = (char **) ((MULTI_CHOICE_DLGPROC_PARAMS *) lParam)->strings;

  000f4	8b 9c 24 b8 00
	00 00		 mov	 ebx, DWORD PTR _lParam$[esp+164]
  000fb	55		 push	 ebp
  000fc	8b 2b		 mov	 ebp, DWORD PTR [ebx]
  000fe	56		 push	 esi

; 5206 : 			char **pStrOrig = pStr;
; 5207 : 			wchar_t **pwStr = (wchar_t **) ((MULTI_CHOICE_DLGPROC_PARAMS *) lParam)->strings;
; 5208 : 			wchar_t **pwStrOrig = pwStr;
; 5209 : 
; 5210 : 			LocalizeDialog (hwndDlg, NULL);

  000ff	8b b4 24 b4 00
	00 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+172]
  00106	68 45 55 52 54	 push	 1414681925		; 54525545H
  0010b	6a eb		 push	 -21			; ffffffebH
  0010d	56		 push	 esi
  0010e	89 3d 00 00 00
	00		 mov	 DWORD PTR _LastDialogId, edi
  00114	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
  0011a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hUserFont
  00120	57		 push	 edi
  00121	52		 push	 edx
  00122	6a 30		 push	 48			; 00000030H
  00124	56		 push	 esi
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_1BG@INDNNNCG@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?$AA@
  00130	56		 push	 esi
  00131	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
  00137	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserFont
  0013c	3b c7		 cmp	 eax, edi
  0013e	74 0d		 je	 SHORT $LN66@MultiChoic
  00140	50		 push	 eax
  00141	68 00 00 00 00	 push	 OFFSET ?LocalizeDialogEnum@@YGHPAUHWND__@@J@Z ; LocalizeDialogEnum
  00146	56		 push	 esi
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumChildWindows@12
$LN66@MultiChoic:

; 5211 : 
; 5212 : 			SetWindowPos (hwndDlg, HWND_TOPMOST, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE);

  0014d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowPos@28
  00153	6a 03		 push	 3
  00155	6a 00		 push	 0
  00157	6a 00		 push	 0
  00159	6a 00		 push	 0
  0015b	6a 00		 push	 0
  0015d	6a ff		 push	 -1
  0015f	56		 push	 esi
  00160	ff d7		 call	 edi

; 5213 : 			SetWindowPos (hwndDlg, HWND_NOTOPMOST, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE);

  00162	6a 03		 push	 3
  00164	6a 00		 push	 0
  00166	6a 00		 push	 0
  00168	6a 00		 push	 0
  0016a	6a 00		 push	 0
  0016c	6a fe		 push	 -2			; fffffffeH
  0016e	56		 push	 esi
  0016f	ff d7		 call	 edi

; 5214 : 
; 5215 : 			bResolve = (*pStr == NULL);
; 5216 : 
; 5217 : 			// Style
; 5218 : 			if (((MULTI_CHOICE_DLGPROC_PARAMS *) lParam)->bold)

  00171	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00177	33 c0		 xor	 eax, eax
  00179	39 45 00	 cmp	 DWORD PTR [ebp], eax
  0017c	0f 94 c0	 sete	 al
  0017f	83 7b 04 00	 cmp	 DWORD PTR [ebx+4], 0
  00183	89 44 24 14	 mov	 DWORD PTR _bResolve$[esp+176], eax
  00187	74 1a		 je	 SHORT $LN82@MultiChoic

; 5219 : 			{
; 5220 : 				SendMessage (GetDlgItem (hwndDlg, IDC_MULTI_CHOICE_MSG), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  00189	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hUserBoldFont
  0018f	6a 01		 push	 1
  00191	51		 push	 ecx
  00192	6a 30		 push	 48			; 00000030H
  00194	68 dc 13 00 00	 push	 5084			; 000013dcH
  00199	56		 push	 esi
  0019a	ff d7		 call	 edi
  0019c	50		 push	 eax
  0019d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$LN82@MultiChoic:

; 5221 : 			}
; 5222 : 
; 5223 : 			// Process the strings
; 5224 : 			pStr++;

  001a3	8d 5d 04	 lea	 ebx, DWORD PTR [ebp+4]

; 5225 : 			pwStr++;

  001a6	83 c5 04	 add	 ebp, 4
  001a9	89 6c 24 30	 mov	 DWORD PTR tv662[esp+176], ebp
  001ad	89 6c 24 10	 mov	 DWORD PTR _pwStr$141719[esp+176], ebp
  001b1	8b 6c 24 18	 mov	 ebp, DWORD PTR _nStr$[esp+176]
  001b5	89 5c 24 2c	 mov	 DWORD PTR tv661[esp+176], ebx
  001b9	8d a4 24 00 00
	00 00		 npad	 7
$LL23@MultiChoic:

; 5226 : 
; 5227 : 			do 
; 5228 : 			{
; 5229 : 				if (*pStr != 0)

  001c0	8b 03		 mov	 eax, DWORD PTR [ebx]
  001c2	85 c0		 test	 eax, eax
  001c4	0f 84 17 01 00
	00		 je	 $LN20@MultiChoic

; 5230 : 				{
; 5231 : 					SetWindowTextW (GetDlgItem(hwndDlg, nChoiceIDs[nStr]), bResolve ? GetString(*pStr) : *pwStr);

  001ca	83 7c 24 14 00	 cmp	 DWORD PTR _bResolve$[esp+176], 0
  001cf	74 0b		 je	 SHORT $LN30@MultiChoic
  001d1	50		 push	 eax
  001d2	e8 00 00 00 00	 call	 _GetString
  001d7	83 c4 04	 add	 esp, 4
  001da	eb 06		 jmp	 SHORT $LN31@MultiChoic
$LN30@MultiChoic:
  001dc	8b 54 24 10	 mov	 edx, DWORD PTR _pwStr$141719[esp+176]
  001e0	8b 02		 mov	 eax, DWORD PTR [edx]
$LN31@MultiChoic:
  001e2	50		 push	 eax
  001e3	8b 44 ac 78	 mov	 eax, DWORD PTR _nChoiceIDs$[esp+ebp*4+180]
  001e7	50		 push	 eax
  001e8	56		 push	 esi
  001e9	ff d7		 call	 edi
  001eb	50		 push	 eax
  001ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 5232 : 
; 5233 : 					if (nStr > 0)

  001f2	85 ed		 test	 ebp, ebp
  001f4	0f 8e d9 00 00
	00		 jle	 $LN43@MultiChoic

; 5234 : 					{
; 5235 : 						nLongestButtonCaptionWidth = max (
; 5236 : 							GetTextGfxWidth (GetDlgItem(hwndDlg, IDC_CHOICE1),
; 5237 : 											bResolve ? GetString(*pStr) : *pwStr,
; 5238 : 											hUserFont),
; 5239 : 							nLongestButtonCaptionWidth);

  001fa	83 7c 24 14 00	 cmp	 DWORD PTR _bResolve$[esp+176], 0
  001ff	74 0d		 je	 SHORT $LN32@MultiChoic
  00201	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00203	51		 push	 ecx
  00204	e8 00 00 00 00	 call	 _GetString
  00209	83 c4 04	 add	 esp, 4
  0020c	eb 06		 jmp	 SHORT $LN33@MultiChoic
$LN32@MultiChoic:
  0020e	8b 54 24 10	 mov	 edx, DWORD PTR _pwStr$141719[esp+176]
  00212	8b 02		 mov	 eax, DWORD PTR [edx]
$LN33@MultiChoic:
  00214	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hUserFont
  0021a	51		 push	 ecx
  0021b	50		 push	 eax
  0021c	68 dd 13 00 00	 push	 5085			; 000013ddH
  00221	56		 push	 esi
  00222	ff d7		 call	 edi
  00224	50		 push	 eax
  00225	e8 00 00 00 00	 call	 _GetTextGfxWidth
  0022a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0022d	3b 44 24 34	 cmp	 eax, DWORD PTR _nLongestButtonCaptionWidth$[esp+176]
  00231	7e 37		 jle	 SHORT $LN36@MultiChoic
  00233	83 7c 24 14 00	 cmp	 DWORD PTR _bResolve$[esp+176], 0
  00238	74 0d		 je	 SHORT $LN34@MultiChoic
  0023a	8b 13		 mov	 edx, DWORD PTR [ebx]
  0023c	52		 push	 edx
  0023d	e8 00 00 00 00	 call	 _GetString
  00242	83 c4 04	 add	 esp, 4
  00245	eb 06		 jmp	 SHORT $LN35@MultiChoic
$LN34@MultiChoic:
  00247	8b 44 24 10	 mov	 eax, DWORD PTR _pwStr$141719[esp+176]
  0024b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN35@MultiChoic:
  0024d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hUserFont
  00253	51		 push	 ecx
  00254	50		 push	 eax
  00255	68 dd 13 00 00	 push	 5085			; 000013ddH
  0025a	56		 push	 esi
  0025b	ff d7		 call	 edi
  0025d	50		 push	 eax
  0025e	e8 00 00 00 00	 call	 _GetTextGfxWidth
  00263	83 c4 0c	 add	 esp, 12			; 0000000cH
  00266	89 44 24 34	 mov	 DWORD PTR _nLongestButtonCaptionWidth$[esp+176], eax
$LN36@MultiChoic:

; 5240 : 
; 5241 : 						nLongestButtonCaptionCharLen = max (nLongestButtonCaptionCharLen, 
; 5242 : 							(int) wcslen ((const wchar_t *) (bResolve ? GetString(*pStr) : *pwStr)));

  0026a	83 7c 24 14 00	 cmp	 DWORD PTR _bResolve$[esp+176], 0
  0026f	74 0d		 je	 SHORT $LN38@MultiChoic
  00271	8b 13		 mov	 edx, DWORD PTR [ebx]
  00273	52		 push	 edx
  00274	e8 00 00 00 00	 call	 _GetString
  00279	83 c4 04	 add	 esp, 4
  0027c	eb 06		 jmp	 SHORT $LN39@MultiChoic
$LN38@MultiChoic:
  0027e	8b 44 24 10	 mov	 eax, DWORD PTR _pwStr$141719[esp+176]
  00282	8b 00		 mov	 eax, DWORD PTR [eax]
$LN39@MultiChoic:
  00284	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL78@MultiChoic:
  00287	66 8b 08	 mov	 cx, WORD PTR [eax]
  0028a	83 c0 02	 add	 eax, 2
  0028d	66 85 c9	 test	 cx, cx
  00290	75 f5		 jne	 SHORT $LL78@MultiChoic
  00292	2b c2		 sub	 eax, edx
  00294	d1 f8		 sar	 eax, 1
  00296	39 44 24 1c	 cmp	 DWORD PTR _nLongestButtonCaptionCharLen$[esp+176], eax
  0029a	7f 37		 jg	 SHORT $LN43@MultiChoic
  0029c	83 7c 24 14 00	 cmp	 DWORD PTR _bResolve$[esp+176], 0
  002a1	74 0d		 je	 SHORT $LN40@MultiChoic
  002a3	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  002a5	51		 push	 ecx
  002a6	e8 00 00 00 00	 call	 _GetString
  002ab	83 c4 04	 add	 esp, 4
  002ae	eb 06		 jmp	 SHORT $LN41@MultiChoic
$LN40@MultiChoic:
  002b0	8b 54 24 10	 mov	 edx, DWORD PTR _pwStr$141719[esp+176]
  002b4	8b 02		 mov	 eax, DWORD PTR [edx]
$LN41@MultiChoic:
  002b6	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  002b9	8d a4 24 00 00
	00 00		 npad	 7
$LL79@MultiChoic:
  002c0	66 8b 08	 mov	 cx, WORD PTR [eax]
  002c3	83 c0 02	 add	 eax, 2
  002c6	66 85 c9	 test	 cx, cx
  002c9	75 f5		 jne	 SHORT $LL79@MultiChoic
  002cb	2b c2		 sub	 eax, edx
  002cd	d1 f8		 sar	 eax, 1
  002cf	89 44 24 1c	 mov	 DWORD PTR _nLongestButtonCaptionCharLen$[esp+176], eax
$LN43@MultiChoic:

; 5243 : 					}
; 5244 : 
; 5245 : 					nActiveChoices++;

  002d3	ff 44 24 28	 inc	 DWORD PTR _nActiveChoices$[esp+176]

; 5246 : 					pStr++;

  002d7	83 c3 04	 add	 ebx, 4

; 5247 : 					pwStr++;

  002da	83 44 24 10 04	 add	 DWORD PTR _pwStr$141719[esp+176], 4

; 5248 : 				}
; 5249 : 				else

  002df	eb 11		 jmp	 SHORT $LN18@MultiChoic
$LN20@MultiChoic:

; 5250 : 				{
; 5251 : 					ShowWindow(GetDlgItem(hwndDlg, nChoiceIDs[nStr]), SW_HIDE);

  002e1	8b 44 ac 74	 mov	 eax, DWORD PTR _nChoiceIDs$[esp+ebp*4+176]
  002e5	6a 00		 push	 0
  002e7	50		 push	 eax
  002e8	56		 push	 esi
  002e9	ff d7		 call	 edi
  002eb	50		 push	 eax
  002ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$LN18@MultiChoic:

; 5252 : 				}
; 5253 : 				nStr++;

  002f2	45		 inc	 ebp

; 5254 : 
; 5255 : 			} while (nStr < MAX_MULTI_CHOICES+1);

  002f3	83 fd 0b	 cmp	 ebp, 11			; 0000000bH
  002f6	0f 8c c4 fe ff
	ff		 jl	 $LL23@MultiChoic

; 5256 : 
; 5257 : 			// Length of main message in characters (not bytes)
; 5258 : 			nMainTextLenInChars = wcslen ((const wchar_t *) (bResolve ? GetString(*(pStrOrig+1)) : *(pwStrOrig+1)));

  002fc	83 7c 24 14 00	 cmp	 DWORD PTR _bResolve$[esp+176], 0
  00301	74 11		 je	 SHORT $LN44@MultiChoic
  00303	8b 4c 24 2c	 mov	 ecx, DWORD PTR tv661[esp+176]
  00307	8b 11		 mov	 edx, DWORD PTR [ecx]
  00309	52		 push	 edx
  0030a	e8 00 00 00 00	 call	 _GetString
  0030f	83 c4 04	 add	 esp, 4
  00312	eb 06		 jmp	 SHORT $LN45@MultiChoic
$LN44@MultiChoic:
  00314	8b 44 24 30	 mov	 eax, DWORD PTR tv662[esp+176]
  00318	8b 00		 mov	 eax, DWORD PTR [eax]
$LN45@MultiChoic:
  0031a	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  0031d	8d 49 00	 npad	 3
$LL80@MultiChoic:
  00320	66 8b 08	 mov	 cx, WORD PTR [eax]
  00323	83 c0 02	 add	 eax, 2
  00326	66 85 c9	 test	 cx, cx
  00329	75 f5		 jne	 SHORT $LL80@MultiChoic
  0032b	2b c2		 sub	 eax, edx
  0032d	d1 f8		 sar	 eax, 1
  0032f	8b c8		 mov	 ecx, eax

; 5259 : 
; 5260 : 			if (nMainTextLenInChars > 200 
; 5261 : 				&& nMainTextLenInChars / nLongestButtonCaptionCharLen >= 10)

  00331	81 f9 c8 00 00
	00		 cmp	 ecx, 200		; 000000c8H
  00337	89 4c 24 18	 mov	 DWORD PTR _nMainTextLenInChars$[esp+176], ecx
  0033b	7e 3f		 jle	 SHORT $LN17@MultiChoic
  0033d	99		 cdq
  0033e	f7 7c 24 1c	 idiv	 DWORD PTR _nLongestButtonCaptionCharLen$[esp+176]
  00342	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00345	7c 35		 jl	 SHORT $LN17@MultiChoic

; 5262 : 			{
; 5263 : 				// As the main text is longer than 200 characters, we will "pad" the widest button caption with 
; 5264 : 				// spaces (if it is not wide enough) so as to increase the width of the whole dialog window. 
; 5265 : 				// Otherwise, it would look too tall (dialog boxes look better when they are more wide than tall).
; 5266 : 				nLongestButtonCaptionWidth = CompensateXDPI (max (
; 5267 : 					nLongestButtonCaptionWidth, 
; 5268 : 					min (350, nMainTextLenInChars)));

  00347	81 f9 5e 01 00
	00		 cmp	 ecx, 350		; 0000015eH
  0034d	b8 5e 01 00 00	 mov	 eax, 350		; 0000015eH
  00352	7f 02		 jg	 SHORT $LN47@MultiChoic
  00354	8b c1		 mov	 eax, ecx
$LN47@MultiChoic:
  00356	8b 54 24 34	 mov	 edx, DWORD PTR _nLongestButtonCaptionWidth$[esp+176]
  0035a	3b d0		 cmp	 edx, eax
  0035c	7e 04		 jle	 SHORT $LN50@MultiChoic
  0035e	8b ca		 mov	 ecx, edx
  00360	eb 0d		 jmp	 SHORT $LN48@MultiChoic
$LN50@MultiChoic:
  00362	81 f9 5e 01 00
	00		 cmp	 ecx, 350		; 0000015eH
  00368	7e 05		 jle	 SHORT $LN48@MultiChoic
  0036a	b9 5e 01 00 00	 mov	 ecx, 350		; 0000015eH
$LN48@MultiChoic:
  0036f	51		 push	 ecx
  00370	e8 00 00 00 00	 call	 _CompensateXDPI
  00375	83 c4 04	 add	 esp, 4
  00378	89 44 24 34	 mov	 DWORD PTR _nLongestButtonCaptionWidth$[esp+176], eax
$LN17@MultiChoic:

; 5269 : 			}
; 5270 : 
; 5271 : 			// Get the window coords
; 5272 : 			GetWindowRect(hwndDlg, &wrec);

  0037c	8d 4c 24 40	 lea	 ecx, DWORD PTR _wrec$[esp+176]
  00380	51		 push	 ecx
  00381	56		 push	 esi
  00382	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 5273 : 
; 5274 : 			// Get the base button size
; 5275 : 			GetClientRect(GetDlgItem(hwndDlg, IDC_CHOICE1), &rec);

  00388	8d 54 24 50	 lea	 edx, DWORD PTR _rec$[esp+176]
  0038c	52		 push	 edx
  0038d	68 dd 13 00 00	 push	 5085			; 000013ddH
  00392	56		 push	 esi
  00393	ff d7		 call	 edi
  00395	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__GetClientRect@8
  0039b	50		 push	 eax
  0039c	ff d5		 call	 ebp

; 5276 : 			nBaseButtonWidth = rec.right + 2;

  0039e	8b 44 24 58	 mov	 eax, DWORD PTR _rec$[esp+184]

; 5277 : 			nBaseButtonHeight = rec.bottom + 2;

  003a2	8b 4c 24 5c	 mov	 ecx, DWORD PTR _rec$[esp+188]

; 5278 : 
; 5279 : 			// Increase in width based on the gfx length of the widest button caption
; 5280 : 			horizSubOffset = min (CompensateXDPI (500), max (0, nLongestButtonCaptionWidth + CompensateXDPI (50) - nBaseButtonWidth));

  003a6	8b 5c 24 34	 mov	 ebx, DWORD PTR _nLongestButtonCaptionWidth$[esp+176]
  003aa	83 c0 02	 add	 eax, 2
  003ad	83 c1 02	 add	 ecx, 2
  003b0	6a 32		 push	 50			; 00000032H
  003b2	89 44 24 28	 mov	 DWORD PTR _nBaseButtonWidth$[esp+180], eax
  003b6	89 4c 24 74	 mov	 DWORD PTR _nBaseButtonHeight$[esp+180], ecx
  003ba	2b d8		 sub	 ebx, eax
  003bc	e8 00 00 00 00	 call	 _CompensateXDPI
  003c1	83 c4 04	 add	 esp, 4
  003c4	03 c3		 add	 eax, ebx
  003c6	79 0a		 jns	 SHORT $LN52@MultiChoic
  003c8	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR tv265[esp+176], 0
  003d0	eb 10		 jmp	 SHORT $LN53@MultiChoic
$LN52@MultiChoic:
  003d2	6a 32		 push	 50			; 00000032H
  003d4	e8 00 00 00 00	 call	 _CompensateXDPI
  003d9	83 c4 04	 add	 esp, 4
  003dc	03 c3		 add	 eax, ebx
  003de	89 44 24 1c	 mov	 DWORD PTR tv265[esp+176], eax
$LN53@MultiChoic:
  003e2	68 f4 01 00 00	 push	 500			; 000001f4H
  003e7	e8 00 00 00 00	 call	 _CompensateXDPI
  003ec	83 c4 04	 add	 esp, 4
  003ef	3b 44 24 1c	 cmp	 eax, DWORD PTR tv265[esp+176]
  003f3	7d 0f		 jge	 SHORT $LN56@MultiChoic
  003f5	68 f4 01 00 00	 push	 500			; 000001f4H
  003fa	e8 00 00 00 00	 call	 _CompensateXDPI
  003ff	83 c4 04	 add	 esp, 4
  00402	eb 24		 jmp	 SHORT $LN85@MultiChoic
$LN56@MultiChoic:
  00404	6a 32		 push	 50			; 00000032H
  00406	e8 00 00 00 00	 call	 _CompensateXDPI
  0040b	83 c4 04	 add	 esp, 4
  0040e	03 c3		 add	 eax, ebx
  00410	79 0a		 jns	 SHORT $LN54@MultiChoic
  00412	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR _horizSubOffset$[esp+176], 0
  0041a	eb 10		 jmp	 SHORT $LN55@MultiChoic
$LN54@MultiChoic:
  0041c	6a 32		 push	 50			; 00000032H
  0041e	e8 00 00 00 00	 call	 _CompensateXDPI
  00423	83 c4 04	 add	 esp, 4
  00426	03 c3		 add	 eax, ebx
$LN85@MultiChoic:
  00428	89 44 24 10	 mov	 DWORD PTR _horizSubOffset$[esp+176], eax
$LN55@MultiChoic:

; 5281 : 
; 5282 : 			// Vertical "title bar" offset
; 5283 : 			GetClientRect(hwndDlg, &wtrec);

  0042c	8d 94 24 a0 00
	00 00		 lea	 edx, DWORD PTR _wtrec$[esp+176]
  00433	52		 push	 edx
  00434	56		 push	 esi
  00435	ff d5		 call	 ebp

; 5284 : 			vertOffset = wrec.bottom - wrec.top - wtrec.bottom - GetSystemMetrics(SM_CYFIXEDFRAME);

  00437	6a 08		 push	 8
  00439	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  0043f	8b 5c 24 4c	 mov	 ebx, DWORD PTR _wrec$[esp+188]
  00443	2b 9c 24 ac 00
	00 00		 sub	 ebx, DWORD PTR _wtrec$[esp+188]
  0044a	2b 5c 24 44	 sub	 ebx, DWORD PTR _wrec$[esp+180]
  0044e	2b d8		 sub	 ebx, eax

; 5285 : 
; 5286 : 			// Height/width of the message text
; 5287 : 			GetClientRect(GetDlgItem(hwndDlg, IDC_MULTI_CHOICE_MSG), &trec);

  00450	8d 44 24 60	 lea	 eax, DWORD PTR _trec$[esp+176]
  00454	50		 push	 eax
  00455	68 dc 13 00 00	 push	 5084			; 000013dcH
  0045a	56		 push	 esi
  0045b	ff d7		 call	 edi
  0045d	50		 push	 eax
  0045e	ff d5		 call	 ebp

; 5288 : 
; 5289 : 			// Determine the number of newlines contained in the message text
; 5290 : 			{
; 5291 : 				int64 offset = -1;

  00460	8b 44 24 18	 mov	 eax, DWORD PTR _nMainTextLenInChars$[esp+176]
  00464	83 cd ff	 or	 ebp, -1
  00467	03 c0		 add	 eax, eax

; 5302 : 
; 5303 : 				} while (offset != -1);

  00469	99		 cdq
  0046a	89 6c 24 38	 mov	 DWORD PTR _offset$141741[esp+180], ebp
  0046e	89 44 24 1c	 mov	 DWORD PTR tv698[esp+176], eax
  00472	89 54 24 20	 mov	 DWORD PTR tv698[esp+180], edx
$LL16@MultiChoic:

; 5292 : 
; 5293 : 				do
; 5294 : 				{
; 5295 : 					offset = FindString ((char *) (bResolve ? GetString(*(pStrOrig+1)) : *(pwStrOrig+1)), 
; 5296 : 						(char *) L"\n",
; 5297 : 						nMainTextLenInChars * 2, 
; 5298 : 						wcslen (L"\n") * 2, 
; 5299 : 						offset + 1);

  00476	83 7c 24 14 00	 cmp	 DWORD PTR _bResolve$[esp+176], 0
  0047b	74 11		 je	 SHORT $LN58@MultiChoic
  0047d	8b 4c 24 2c	 mov	 ecx, DWORD PTR tv661[esp+176]
  00481	8b 11		 mov	 edx, DWORD PTR [ecx]
  00483	52		 push	 edx
  00484	e8 00 00 00 00	 call	 _GetString
  00489	83 c4 04	 add	 esp, 4
  0048c	eb 06		 jmp	 SHORT $LN59@MultiChoic
$LN58@MultiChoic:
  0048e	8b 44 24 30	 mov	 eax, DWORD PTR tv662[esp+176]
  00492	8b 00		 mov	 eax, DWORD PTR [eax]
$LN59@MultiChoic:
  00494	8b 4c 24 38	 mov	 ecx, DWORD PTR _offset$141741[esp+180]
  00498	8b 54 24 20	 mov	 edx, DWORD PTR tv698[esp+180]
  0049c	83 c5 01	 add	 ebp, 1
  0049f	83 d1 00	 adc	 ecx, 0
  004a2	51		 push	 ecx
  004a3	8b 4c 24 20	 mov	 ecx, DWORD PTR tv698[esp+180]
  004a7	55		 push	 ebp
  004a8	6a 02		 push	 2
  004aa	52		 push	 edx
  004ab	51		 push	 ecx
  004ac	68 00 00 00 00	 push	 OFFSET ??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@
  004b1	50		 push	 eax
  004b2	e8 00 00 00 00	 call	 _FindString

; 5300 : 
; 5301 : 					newLineSeqCount++;

  004b7	ff 44 24 58	 inc	 DWORD PTR _newLineSeqCount$[esp+204]
  004bb	8b e8		 mov	 ebp, eax

; 5302 : 
; 5303 : 				} while (offset != -1);

  004bd	23 c2		 and	 eax, edx
  004bf	83 c4 1c	 add	 esp, 28			; 0000001cH
  004c2	89 54 24 38	 mov	 DWORD PTR _offset$141741[esp+180], edx
  004c6	83 f8 ff	 cmp	 eax, -1
  004c9	75 ab		 jne	 SHORT $LL16@MultiChoic

; 5304 : 			}
; 5305 : 
; 5306 : 			nTextGfxLineHeight = GetTextGfxHeight (GetDlgItem(hwndDlg, IDC_MULTI_CHOICE_MSG),
; 5307 : 								bResolve ? GetString(*(pStrOrig+1)) : *(pwStrOrig+1),
; 5308 : 								hUserFont);

  004cb	83 7c 24 14 00	 cmp	 DWORD PTR _bResolve$[esp+176], 0
  004d0	74 11		 je	 SHORT $LN60@MultiChoic
  004d2	8b 4c 24 2c	 mov	 ecx, DWORD PTR tv661[esp+176]
  004d6	8b 11		 mov	 edx, DWORD PTR [ecx]
  004d8	52		 push	 edx
  004d9	e8 00 00 00 00	 call	 _GetString
  004de	83 c4 04	 add	 esp, 4
  004e1	eb 06		 jmp	 SHORT $LN61@MultiChoic
$LN60@MultiChoic:
  004e3	8b 44 24 30	 mov	 eax, DWORD PTR tv662[esp+176]
  004e7	8b 00		 mov	 eax, DWORD PTR [eax]
$LN61@MultiChoic:
  004e9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hUserFont
  004ef	51		 push	 ecx
  004f0	50		 push	 eax
  004f1	68 dc 13 00 00	 push	 5084			; 000013dcH
  004f6	56		 push	 esi
  004f7	ff d7		 call	 edi
  004f9	50		 push	 eax
  004fa	e8 00 00 00 00	 call	 _GetTextGfxHeight
  004ff	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5309 : 
; 5310 : 			vertMsgHeightOffset = ((GetTextGfxWidth (GetDlgItem(hwndDlg, IDC_MULTI_CHOICE_MSG),
; 5311 : 								bResolve ? GetString(*(pStrOrig+1)) : *(pwStrOrig+1),
; 5312 : 								hUserFont) / (trec.right + horizSubOffset) + 1)	* nTextGfxLineHeight) - trec.bottom;

  00502	83 7c 24 14 00	 cmp	 DWORD PTR _bResolve$[esp+176], 0
  00507	8b e8		 mov	 ebp, eax
  00509	89 6c 24 1c	 mov	 DWORD PTR _nTextGfxLineHeight$[esp+176], ebp
  0050d	74 11		 je	 SHORT $LN62@MultiChoic
  0050f	8b 54 24 2c	 mov	 edx, DWORD PTR tv661[esp+176]
  00513	8b 02		 mov	 eax, DWORD PTR [edx]
  00515	50		 push	 eax
  00516	e8 00 00 00 00	 call	 _GetString
  0051b	83 c4 04	 add	 esp, 4
  0051e	eb 06		 jmp	 SHORT $LN63@MultiChoic
$LN62@MultiChoic:
  00520	8b 4c 24 30	 mov	 ecx, DWORD PTR tv662[esp+176]
  00524	8b 01		 mov	 eax, DWORD PTR [ecx]
$LN63@MultiChoic:
  00526	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hUserFont
  0052c	52		 push	 edx
  0052d	50		 push	 eax
  0052e	68 dc 13 00 00	 push	 5084			; 000013dcH
  00533	56		 push	 esi
  00534	ff d7		 call	 edi
  00536	50		 push	 eax
  00537	e8 00 00 00 00	 call	 _GetTextGfxWidth
  0053c	8b 4c 24 74	 mov	 ecx, DWORD PTR _trec$[esp+196]
  00540	8b 54 24 1c	 mov	 edx, DWORD PTR _horizSubOffset$[esp+188]
  00544	03 ca		 add	 ecx, edx
  00546	99		 cdq
  00547	f7 f9		 idiv	 ecx

; 5313 : 
; 5314 : 			vertMsgHeightOffset = min (CompensateYDPI (350), vertMsgHeightOffset + newLineSeqCount * nTextGfxLineHeight + (trec.bottom + vertMsgHeightOffset) / 10);	// As reserve, we are adding 10% and the number of lines equal to the number of newlines in the message

  00549	68 5e 01 00 00	 push	 350			; 0000015eH
  0054e	8b c8		 mov	 ecx, eax
  00550	8b 44 24 7c	 mov	 eax, DWORD PTR _trec$[esp+204]
  00554	41		 inc	 ecx
  00555	0f af cd	 imul	 ecx, ebp
  00558	2b c8		 sub	 ecx, eax
  0055a	8d 14 08	 lea	 edx, DWORD PTR [eax+ecx]
  0055d	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00562	f7 ea		 imul	 edx
  00564	8b 44 24 4c	 mov	 eax, DWORD PTR _newLineSeqCount$[esp+192]
  00568	0f af 44 24 2c	 imul	 eax, DWORD PTR _nTextGfxLineHeight$[esp+192]
  0056d	c1 fa 02	 sar	 edx, 2
  00570	8b ea		 mov	 ebp, edx
  00572	c1 ed 1f	 shr	 ebp, 31			; 0000001fH
  00575	03 ea		 add	 ebp, edx
  00577	03 e9		 add	 ebp, ecx
  00579	03 e8		 add	 ebp, eax
  0057b	e8 00 00 00 00	 call	 _CompensateYDPI
  00580	83 c4 10	 add	 esp, 16			; 00000010H
  00583	3b c5		 cmp	 eax, ebp
  00585	7d 13		 jge	 SHORT $LN64@MultiChoic
  00587	68 5e 01 00 00	 push	 350			; 0000015eH
  0058c	e8 00 00 00 00	 call	 _CompensateYDPI
  00591	83 c4 04	 add	 esp, 4
  00594	89 44 24 14	 mov	 DWORD PTR _vertMsgHeightOffset$[esp+176], eax
  00598	eb 04		 jmp	 SHORT $LN65@MultiChoic
$LN64@MultiChoic:
  0059a	89 6c 24 14	 mov	 DWORD PTR _vertMsgHeightOffset$[esp+176], ebp
$LN65@MultiChoic:

; 5315 : 
; 5316 : 			// Reduction in height according to the number of shown buttons
; 5317 : 			vertSubOffset = ((MAX_MULTI_CHOICES - nActiveChoices) * nBaseButtonHeight);
; 5318 : 
; 5319 : 			if (horizSubOffset > 0 
; 5320 : 				|| vertMsgHeightOffset > 0 
; 5321 : 				|| vertOffset > 0)

  0059e	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__MoveWindow@24
  005a4	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  005a9	2b 44 24 28	 sub	 eax, DWORD PTR _nActiveChoices$[esp+176]
  005ad	0f af 44 24 70	 imul	 eax, DWORD PTR _nBaseButtonHeight$[esp+176]
  005b2	89 44 24 28	 mov	 DWORD PTR _vertSubOffset$[esp+176], eax
  005b6	8b 44 24 10	 mov	 eax, DWORD PTR _horizSubOffset$[esp+176]
  005ba	85 c0		 test	 eax, eax
  005bc	7f 0f		 jg	 SHORT $LN12@MultiChoic
  005be	83 7c 24 14 00	 cmp	 DWORD PTR _vertMsgHeightOffset$[esp+176], 0
  005c3	7f 08		 jg	 SHORT $LN12@MultiChoic
  005c5	85 db		 test	 ebx, ebx
  005c7	0f 8e ba 01 00
	00		 jle	 $LN81@MultiChoic
$LN12@MultiChoic:

; 5322 : 			{
; 5323 : 				// Resize/move each button if necessary
; 5324 : 				for (nStr = 1; nStr < MAX_MULTI_CHOICES+1; nStr++)

  005cd	8b 4c 24 24	 mov	 ecx, DWORD PTR _nBaseButtonWidth$[esp+176]
  005d1	03 c1		 add	 eax, ecx
  005d3	c7 44 24 18 01
	00 00 00	 mov	 DWORD PTR _nStr$[esp+176], 1
  005db	89 44 24 24	 mov	 DWORD PTR tv717[esp+176], eax
  005df	90		 npad	 1
$LL11@MultiChoic:

; 5325 : 				{
; 5326 : 					GetWindowRect(GetDlgItem(hwndDlg, nChoiceIDs[nStr]), &rec);

  005e0	8b 54 24 18	 mov	 edx, DWORD PTR _nStr$[esp+176]
  005e4	8b 44 94 74	 mov	 eax, DWORD PTR _nChoiceIDs$[esp+edx*4+176]
  005e8	8d 4c 24 50	 lea	 ecx, DWORD PTR _rec$[esp+176]
  005ec	51		 push	 ecx
  005ed	50		 push	 eax
  005ee	56		 push	 esi
  005ef	ff d7		 call	 edi
  005f1	50		 push	 eax
  005f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 5327 : 
; 5328 : 					MoveWindow (GetDlgItem(hwndDlg, nChoiceIDs[nStr]),
; 5329 : 						rec.left - wrec.left - GetSystemMetrics(SM_CXFIXEDFRAME),
; 5330 : 						rec.top - wrec.top - vertOffset + vertMsgHeightOffset,
; 5331 : 						nBaseButtonWidth + horizSubOffset,
; 5332 : 						nBaseButtonHeight,
; 5333 : 						TRUE);

  005f8	8b 4c 24 54	 mov	 ecx, DWORD PTR _rec$[esp+180]
  005fc	2b 4c 24 44	 sub	 ecx, DWORD PTR _wrec$[esp+180]
  00600	8b 54 24 70	 mov	 edx, DWORD PTR _nBaseButtonHeight$[esp+176]
  00604	8b 44 24 24	 mov	 eax, DWORD PTR tv717[esp+176]
  00608	6a 01		 push	 1
  0060a	52		 push	 edx
  0060b	2b cb		 sub	 ecx, ebx
  0060d	03 4c 24 1c	 add	 ecx, DWORD PTR _vertMsgHeightOffset$[esp+184]
  00611	50		 push	 eax
  00612	51		 push	 ecx
  00613	6a 07		 push	 7
  00615	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  0061b	8b 54 24 60	 mov	 edx, DWORD PTR _rec$[esp+192]
  0061f	2b 54 24 50	 sub	 edx, DWORD PTR _wrec$[esp+192]
  00623	2b d0		 sub	 edx, eax
  00625	8b 44 24 28	 mov	 eax, DWORD PTR _nStr$[esp+192]
  00629	8b 84 84 84 00
	00 00		 mov	 eax, DWORD PTR _nChoiceIDs$[esp+eax*4+192]
  00630	52		 push	 edx
  00631	50		 push	 eax
  00632	56		 push	 esi
  00633	ff d7		 call	 edi
  00635	50		 push	 eax
  00636	ff d5		 call	 ebp
  00638	8b 44 24 18	 mov	 eax, DWORD PTR _nStr$[esp+176]
  0063c	40		 inc	 eax
  0063d	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00640	89 44 24 18	 mov	 DWORD PTR _nStr$[esp+176], eax
  00644	7c 9a		 jl	 SHORT $LL11@MultiChoic

; 5334 : 				}
; 5335 : 
; 5336 : 				// Resize/move the remaining GUI elements
; 5337 : 				GetWindowRect(GetDlgItem(hwndDlg, IDC_MULTI_CHOICE_MSG), &rec);

  00646	8d 4c 24 50	 lea	 ecx, DWORD PTR _rec$[esp+176]
  0064a	51		 push	 ecx
  0064b	68 dc 13 00 00	 push	 5084			; 000013dcH
  00650	56		 push	 esi
  00651	ff d7		 call	 edi
  00653	50		 push	 eax
  00654	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 5338 : 				GetClientRect(GetDlgItem(hwndDlg, IDC_MULTI_CHOICE_MSG), &trec);

  0065a	8d 54 24 60	 lea	 edx, DWORD PTR _trec$[esp+176]
  0065e	52		 push	 edx
  0065f	68 dc 13 00 00	 push	 5084			; 000013dcH
  00664	56		 push	 esi
  00665	ff d7		 call	 edi
  00667	50		 push	 eax
  00668	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 5339 : 				MoveWindow (GetDlgItem(hwndDlg, IDC_MULTI_CHOICE_MSG),
; 5340 : 					rec.left - wrec.left - GetSystemMetrics(SM_CXFIXEDFRAME),
; 5341 : 					rec.top - wrec.top - vertOffset,
; 5342 : 					trec.right + 2 + horizSubOffset,
; 5343 : 					trec.bottom + 2 + vertMsgHeightOffset,
; 5344 : 					TRUE);

  0066e	8b 44 24 6c	 mov	 eax, DWORD PTR _trec$[esp+188]
  00672	8b 4c 24 14	 mov	 ecx, DWORD PTR _vertMsgHeightOffset$[esp+176]
  00676	8d 54 08 02	 lea	 edx, DWORD PTR [eax+ecx+2]
  0067a	8b 44 24 68	 mov	 eax, DWORD PTR _trec$[esp+184]
  0067e	8b 4c 24 10	 mov	 ecx, DWORD PTR _horizSubOffset$[esp+176]
  00682	6a 01		 push	 1
  00684	52		 push	 edx
  00685	8d 54 08 02	 lea	 edx, DWORD PTR [eax+ecx+2]
  00689	8b 44 24 5c	 mov	 eax, DWORD PTR _rec$[esp+188]
  0068d	2b 44 24 4c	 sub	 eax, DWORD PTR _wrec$[esp+188]
  00691	52		 push	 edx
  00692	2b c3		 sub	 eax, ebx
  00694	50		 push	 eax
  00695	6a 07		 push	 7
  00697	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  0069d	8b 4c 24 60	 mov	 ecx, DWORD PTR _rec$[esp+192]
  006a1	2b 4c 24 50	 sub	 ecx, DWORD PTR _wrec$[esp+192]
  006a5	2b c8		 sub	 ecx, eax
  006a7	51		 push	 ecx
  006a8	68 dc 13 00 00	 push	 5084			; 000013dcH
  006ad	56		 push	 esi
  006ae	ff d7		 call	 edi
  006b0	50		 push	 eax
  006b1	ff d5		 call	 ebp

; 5345 : 
; 5346 : 				GetWindowRect(GetDlgItem(hwndDlg, IDC_MC_DLG_HR1), &rec);

  006b3	8d 54 24 50	 lea	 edx, DWORD PTR _rec$[esp+176]
  006b7	52		 push	 edx
  006b8	68 e7 13 00 00	 push	 5095			; 000013e7H
  006bd	56		 push	 esi
  006be	ff d7		 call	 edi
  006c0	50		 push	 eax
  006c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 5347 : 				GetClientRect(GetDlgItem(hwndDlg, IDC_MC_DLG_HR1), &trec);

  006c7	8d 44 24 60	 lea	 eax, DWORD PTR _trec$[esp+176]
  006cb	50		 push	 eax
  006cc	68 e7 13 00 00	 push	 5095			; 000013e7H
  006d1	56		 push	 esi
  006d2	ff d7		 call	 edi
  006d4	50		 push	 eax
  006d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 5348 : 				MoveWindow (GetDlgItem(hwndDlg, IDC_MC_DLG_HR1),
; 5349 : 					rec.left - wrec.left - GetSystemMetrics(SM_CXFIXEDFRAME),
; 5350 : 					rec.top - wrec.top - vertOffset,
; 5351 : 					trec.right + 2 + horizSubOffset,
; 5352 : 					trec.bottom + 2,
; 5353 : 					TRUE);

  006db	8b 4c 24 6c	 mov	 ecx, DWORD PTR _trec$[esp+188]
  006df	8b 54 24 68	 mov	 edx, DWORD PTR _trec$[esp+184]
  006e3	8b 44 24 10	 mov	 eax, DWORD PTR _horizSubOffset$[esp+176]
  006e7	6a 01		 push	 1
  006e9	83 c1 02	 add	 ecx, 2
  006ec	51		 push	 ecx
  006ed	8d 4c 02 02	 lea	 ecx, DWORD PTR [edx+eax+2]
  006f1	8b 54 24 5c	 mov	 edx, DWORD PTR _rec$[esp+188]
  006f5	2b 54 24 4c	 sub	 edx, DWORD PTR _wrec$[esp+188]
  006f9	51		 push	 ecx
  006fa	2b d3		 sub	 edx, ebx
  006fc	52		 push	 edx
  006fd	6a 07		 push	 7
  006ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  00705	8b 4c 24 60	 mov	 ecx, DWORD PTR _rec$[esp+192]
  00709	2b 4c 24 50	 sub	 ecx, DWORD PTR _wrec$[esp+192]
  0070d	2b c8		 sub	 ecx, eax
  0070f	51		 push	 ecx
  00710	68 e7 13 00 00	 push	 5095			; 000013e7H
  00715	56		 push	 esi
  00716	ff d7		 call	 edi
  00718	50		 push	 eax
  00719	ff d5		 call	 ebp

; 5354 : 				
; 5355 : 				GetWindowRect(GetDlgItem(hwndDlg, IDC_MC_DLG_HR2), &rec);

  0071b	8d 54 24 50	 lea	 edx, DWORD PTR _rec$[esp+176]
  0071f	52		 push	 edx
  00720	68 e8 13 00 00	 push	 5096			; 000013e8H
  00725	56		 push	 esi
  00726	ff d7		 call	 edi
  00728	50		 push	 eax
  00729	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 5356 : 				GetClientRect(GetDlgItem(hwndDlg, IDC_MC_DLG_HR2), &trec);

  0072f	8d 44 24 60	 lea	 eax, DWORD PTR _trec$[esp+176]
  00733	50		 push	 eax
  00734	68 e8 13 00 00	 push	 5096			; 000013e8H
  00739	56		 push	 esi
  0073a	ff d7		 call	 edi
  0073c	50		 push	 eax
  0073d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 5357 : 				MoveWindow (GetDlgItem(hwndDlg, IDC_MC_DLG_HR2),
; 5358 : 					rec.left - wrec.left - GetSystemMetrics(SM_CXFIXEDFRAME),
; 5359 : 					rec.top - wrec.top - vertOffset + vertMsgHeightOffset,
; 5360 : 					trec.right + 2 + horizSubOffset,
; 5361 : 					trec.bottom + 2,
; 5362 : 					TRUE);

  00743	8b 4c 24 6c	 mov	 ecx, DWORD PTR _trec$[esp+188]
  00747	8b 54 24 68	 mov	 edx, DWORD PTR _trec$[esp+184]
  0074b	8b 44 24 10	 mov	 eax, DWORD PTR _horizSubOffset$[esp+176]
  0074f	6a 01		 push	 1
  00751	83 c1 02	 add	 ecx, 2
  00754	51		 push	 ecx
  00755	8d 4c 02 02	 lea	 ecx, DWORD PTR [edx+eax+2]
  00759	8b 54 24 5c	 mov	 edx, DWORD PTR _rec$[esp+188]
  0075d	2b 54 24 4c	 sub	 edx, DWORD PTR _wrec$[esp+188]
  00761	51		 push	 ecx
  00762	2b d3		 sub	 edx, ebx
  00764	03 54 24 20	 add	 edx, DWORD PTR _vertMsgHeightOffset$[esp+188]
  00768	52		 push	 edx
  00769	6a 07		 push	 7
  0076b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  00771	8b 4c 24 60	 mov	 ecx, DWORD PTR _rec$[esp+192]
  00775	2b 4c 24 50	 sub	 ecx, DWORD PTR _wrec$[esp+192]
  00779	2b c8		 sub	 ecx, eax
  0077b	51		 push	 ecx
  0077c	68 e8 13 00 00	 push	 5096			; 000013e8H
  00781	56		 push	 esi
  00782	ff d7		 call	 edi
  00784	50		 push	 eax
  00785	ff d5		 call	 ebp
$LN81@MultiChoic:

; 5363 : 			}
; 5364 : 
; 5365 : 			// Resize the window according to number of shown buttons and the longest button caption
; 5366 : 			MoveWindow (hwndDlg,
; 5367 : 				wrec.left - horizSubOffset / 2,
; 5368 : 				wrec.top + vertSubOffset / 2 - vertMsgHeightOffset / 2,
; 5369 : 				wrec.right - wrec.left + horizSubOffset,
; 5370 : 				wrec.bottom - wrec.top - vertSubOffset + 1 + vertMsgHeightOffset,
; 5371 : 				TRUE);

  00787	8b 5c 24 14	 mov	 ebx, DWORD PTR _vertMsgHeightOffset$[esp+176]
  0078b	8b 44 24 28	 mov	 eax, DWORD PTR _vertSubOffset$[esp+176]
  0078f	8b 7c 24 44	 mov	 edi, DWORD PTR _wrec$[esp+180]
  00793	8b 4c 24 4c	 mov	 ecx, DWORD PTR _wrec$[esp+188]
  00797	8b d3		 mov	 edx, ebx
  00799	2b d0		 sub	 edx, eax
  0079b	2b d7		 sub	 edx, edi
  0079d	8d 54 0a 01	 lea	 edx, DWORD PTR [edx+ecx+1]
  007a1	8b 4c 24 40	 mov	 ecx, DWORD PTR _wrec$[esp+176]
  007a5	6a 01		 push	 1
  007a7	52		 push	 edx
  007a8	8b 54 24 50	 mov	 edx, DWORD PTR _wrec$[esp+192]
  007ac	2b d1		 sub	 edx, ecx
  007ae	03 54 24 18	 add	 edx, DWORD PTR _horizSubOffset$[esp+184]
  007b2	52		 push	 edx
  007b3	99		 cdq
  007b4	2b c2		 sub	 eax, edx
  007b6	d1 f8		 sar	 eax, 1
  007b8	89 44 24 30	 mov	 DWORD PTR tv569[esp+188], eax
  007bc	8b c3		 mov	 eax, ebx
  007be	99		 cdq
  007bf	2b c2		 sub	 eax, edx
  007c1	8b 54 24 30	 mov	 edx, DWORD PTR tv569[esp+188]
  007c5	d1 f8		 sar	 eax, 1
  007c7	2b d0		 sub	 edx, eax
  007c9	8b 44 24 1c	 mov	 eax, DWORD PTR _horizSubOffset$[esp+188]
  007cd	03 d7		 add	 edx, edi
  007cf	52		 push	 edx
  007d0	99		 cdq
  007d1	2b c2		 sub	 eax, edx
  007d3	d1 f8		 sar	 eax, 1
  007d5	2b c8		 sub	 ecx, eax
  007d7	51		 push	 ecx
  007d8	56		 push	 esi
  007d9	ff d5		 call	 ebp
  007db	5e		 pop	 esi
  007dc	5d		 pop	 ebp
  007dd	5b		 pop	 ebx

; 5396 : 		return 1;

  007de	b8 01 00 00 00	 mov	 eax, 1
  007e3	5f		 pop	 edi

; 5400 : }

  007e4	81 c4 a0 00 00
	00		 add	 esp, 160		; 000000a0H
  007ea	c2 10 00	 ret	 16			; 00000010H
$LN1@MultiChoic:

; 5390 : 			}
; 5391 : 		}
; 5392 : 		break;
; 5393 : 
; 5394 : 	case WM_CLOSE:
; 5395 : 		EndDialog (hwndDlg, 0);

  007ed	57		 push	 edi
$LN83@MultiChoic:
  007ee	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR _hwndDlg$[esp+164]
  007f5	50		 push	 eax
$LN84@MultiChoic:
  007f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 5396 : 		return 1;

  007fc	b8 01 00 00 00	 mov	 eax, 1
  00801	5f		 pop	 edi

; 5400 : }

  00802	81 c4 a0 00 00
	00		 add	 esp, 160		; 000000a0H
  00808	c2 10 00	 ret	 16			; 00000010H
_MultiChoiceDialogProc@16 ENDP
_TEXT	ENDS
PUBLIC	_FindStringInFile
; Function compile flags: /Ogtpy
;	COMDAT _FindStringInFile
_TEXT	SEGMENT
_z$154261 = -48						; size = 4
_bExit$ = -44						; size = 4
_src$ = -40						; size = 4
_bytesRead$ = -36					; size = 4
_retVal$ = -32						; size = 8
_filePos$ = -24						; size = 8
tv200 = -16						; size = 8
_seekOffsetNew$ = -8					; size = 8
_filePath$ = 8						; size = 4
_str$ = 12						; size = 4
_strLen$ = 16						; size = 4
_FindStringInFile PROC					; COMDAT

; 6211 : {

  00000	83 ec 30	 sub	 esp, 48			; 00000030H

; 6212 : 	int bufSize = 64 * BYTES_PER_KB;
; 6213 : 	char *buffer = (char *) err_malloc (bufSize);

  00003	68 00 00 01 00	 push	 65536			; 00010000H
  00008	e8 00 00 00 00	 call	 _malloc
  0000d	83 c4 04	 add	 esp, 4
  00010	89 04 24	 mov	 DWORD PTR _z$154261[esp+48], eax
  00013	85 c0		 test	 eax, eax
  00015	0f 84 c1 01 00
	00		 je	 $LN23@FindString@2
  0001b	53		 push	 ebx
  0001c	55		 push	 ebp
  0001d	56		 push	 esi

; 6214 : 	HANDLE src = NULL;
; 6215 : 	DWORD bytesRead;
; 6216 : 	BOOL readRetVal;
; 6217 : 	__int64 filePos = GetFileSize64 (filePath);

  0001e	8b 74 24 40	 mov	 esi, DWORD PTR _filePath$[esp+56]
  00022	57		 push	 edi
  00023	56		 push	 esi
  00024	e8 00 00 00 00	 call	 _GetFileSize64
  00029	8b f8		 mov	 edi, eax

; 6218 : 	int bufPos = 0;
; 6219 : 	LARGE_INTEGER seekOffset, seekOffsetNew;
; 6220 : 	BOOL bExit = FALSE;
; 6221 : 	int filePosStep;
; 6222 : 	__int64 retVal = -1;

  0002b	83 c8 ff	 or	 eax, -1
  0002e	8b da		 mov	 ebx, edx
  00030	83 c4 04	 add	 esp, 4
  00033	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR _bExit$[esp+64], 0
  0003b	89 44 24 20	 mov	 DWORD PTR _retVal$[esp+64], eax
  0003f	89 44 24 24	 mov	 DWORD PTR _retVal$[esp+68], eax

; 6223 : 
; 6224 : 	if (filePos <= 0 
; 6225 : 		|| buffer == NULL 
; 6226 : 		|| strLen > bufSize
; 6227 : 		|| strLen < 1)

  00043	85 db		 test	 ebx, ebx
  00045	0f 8c 87 01 00
	00		 jl	 $LN15@FindString@2
  0004b	7f 08		 jg	 SHORT $LN38@FindString@2
  0004d	85 ff		 test	 edi, edi
  0004f	0f 86 7d 01 00
	00		 jbe	 $LN15@FindString@2
$LN38@FindString@2:
  00055	8b 6c 24 4c	 mov	 ebp, DWORD PTR _strLen$[esp+60]
  00059	81 fd 00 00 01
	00		 cmp	 ebp, 65536		; 00010000H
  0005f	0f 8f 6d 01 00
	00		 jg	 $LN15@FindString@2
  00065	83 fd 01	 cmp	 ebp, 1
  00068	0f 8c 64 01 00
	00		 jl	 $LN15@FindString@2

; 6229 : 
; 6230 : 	src = CreateFile (filePath, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  0006e	6a 00		 push	 0
  00070	6a 00		 push	 0
  00072	6a 03		 push	 3
  00074	6a 00		 push	 0
  00076	6a 03		 push	 3
  00078	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0007d	56		 push	 esi
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00084	8b f0		 mov	 esi, eax
  00086	89 74 24 18	 mov	 DWORD PTR _src$[esp+64], esi

; 6231 : 
; 6232 : 	if (src == INVALID_HANDLE_VALUE)

  0008a	83 fe ff	 cmp	 esi, -1
  0008d	75 19		 jne	 SHORT $LN14@FindString@2

; 6233 : 	{
; 6234 : 		free (buffer);

  0008f	8b 44 24 10	 mov	 eax, DWORD PTR _z$154261[esp+64]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 _free
  00099	83 c4 04	 add	 esp, 4
  0009c	5f		 pop	 edi

; 6235 : 		return -1;

  0009d	0b c6		 or	 eax, esi
  0009f	0b d6		 or	 edx, esi
  000a1	5e		 pop	 esi
  000a2	5d		 pop	 ebp
  000a3	5b		 pop	 ebx

; 6279 : }

  000a4	83 c4 30	 add	 esp, 48			; 00000030H
  000a7	c3		 ret	 0
$LN14@FindString@2:

; 6236 : 	}
; 6237 : 
; 6238 : 	filePosStep = bufSize - strLen + 1;

  000a8	b8 01 00 01 00	 mov	 eax, 65537		; 00010001H
  000ad	2b c5		 sub	 eax, ebp

; 6270 : 		}
; 6271 : 
; 6272 : 	} while (!bExit);

  000af	99		 cdq
  000b0	89 44 24 30	 mov	 DWORD PTR tv200[esp+64], eax
  000b4	89 54 24 34	 mov	 DWORD PTR tv200[esp+68], edx
  000b8	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL13@FindString@2:
  000c0	2b 7c 24 30	 sub	 edi, DWORD PTR tv200[esp+64]
  000c4	1b 5c 24 34	 sbb	 ebx, DWORD PTR tv200[esp+68]
  000c8	89 7c 24 28	 mov	 DWORD PTR _filePos$[esp+64], edi
  000cc	85 db		 test	 ebx, ebx
  000ce	7f 1c		 jg	 SHORT $LN10@FindString@2

; 6239 : 
; 6240 : 	do
; 6241 : 	{
; 6242 : 		filePos -= filePosStep;
; 6243 : 
; 6244 : 		if (filePos < 0)

  000d0	7c 04		 jl	 SHORT $LN39@FindString@2
  000d2	85 ff		 test	 edi, edi
  000d4	73 16		 jae	 SHORT $LN10@FindString@2
$LN39@FindString@2:

; 6245 : 		{
; 6246 : 			filePos = 0;

  000d6	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR _filePos$[esp+64], 0

; 6247 : 			bExit = TRUE;

  000de	8b 7c 24 28	 mov	 edi, DWORD PTR _filePos$[esp+64]
  000e2	33 db		 xor	 ebx, ebx
  000e4	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR _bExit$[esp+64], 1
$LN10@FindString@2:

; 6248 : 		}
; 6249 : 
; 6250 : 		seekOffset.QuadPart = filePos;
; 6251 : 
; 6252 : 		if (SetFilePointerEx (src, seekOffset, &seekOffsetNew, FILE_BEGIN) == 0)

  000ec	6a 00		 push	 0
  000ee	8d 4c 24 3c	 lea	 ecx, DWORD PTR _seekOffsetNew$[esp+68]
  000f2	51		 push	 ecx
  000f3	53		 push	 ebx
  000f4	57		 push	 edi
  000f5	56		 push	 esi
  000f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointerEx@20
  000fc	85 c0		 test	 eax, eax
  000fe	0f 84 aa 00 00
	00		 je	 $fsif_end$142347

; 6253 : 			goto fsif_end;
; 6254 : 
; 6255 : 		if ((readRetVal = ReadFile (src, buffer, bufSize, &bytesRead, NULL)) == 0 
; 6256 : 			|| bytesRead == 0)

  00104	8b 44 24 10	 mov	 eax, DWORD PTR _z$154261[esp+64]
  00108	6a 00		 push	 0
  0010a	8d 54 24 20	 lea	 edx, DWORD PTR _bytesRead$[esp+68]
  0010e	52		 push	 edx
  0010f	68 00 00 01 00	 push	 65536			; 00010000H
  00114	50		 push	 eax
  00115	56		 push	 esi
  00116	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  0011c	85 c0		 test	 eax, eax
  0011e	0f 84 8a 00 00
	00		 je	 $fsif_end$142347
  00124	8b 7c 24 1c	 mov	 edi, DWORD PTR _bytesRead$[esp+64]
  00128	85 ff		 test	 edi, edi
  0012a	0f 84 7e 00 00
	00		 je	 $fsif_end$142347

; 6257 : 			goto fsif_end;
; 6258 : 
; 6259 : 		bufPos = bytesRead - strLen;

  00130	2b fd		 sub	 edi, ebp

; 6260 : 
; 6261 : 		while (bufPos > 0)

  00132	85 ff		 test	 edi, edi
  00134	7e 53		 jle	 SHORT $LN12@FindString@2
$LL4@FindString@2:
  00136	8b 44 24 10	 mov	 eax, DWORD PTR _z$154261[esp+64]

; 6262 : 		{
; 6263 : 			if (memcmp (buffer + bufPos, str, strLen) == 0)

  0013a	8b 54 24 48	 mov	 edx, DWORD PTR _str$[esp+60]
  0013e	8b cd		 mov	 ecx, ebp
  00140	8d 34 38	 lea	 esi, DWORD PTR [eax+edi]
  00143	83 fd 04	 cmp	 ebp, 4
  00146	72 14		 jb	 SHORT $LN31@FindString@2
$LL20@FindString@2:
  00148	8b 06		 mov	 eax, DWORD PTR [esi]
  0014a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0014c	75 32		 jne	 SHORT $LN2@FindString@2
  0014e	83 e9 04	 sub	 ecx, 4
  00151	83 c2 04	 add	 edx, 4
  00154	83 c6 04	 add	 esi, 4
  00157	83 f9 04	 cmp	 ecx, 4
  0015a	73 ec		 jae	 SHORT $LL20@FindString@2
$LN31@FindString@2:
  0015c	85 c9		 test	 ecx, ecx
  0015e	74 39		 je	 SHORT $LN32@FindString@2
  00160	8a 02		 mov	 al, BYTE PTR [edx]
  00162	3a 06		 cmp	 al, BYTE PTR [esi]
  00164	75 1a		 jne	 SHORT $LN2@FindString@2
  00166	83 f9 01	 cmp	 ecx, 1
  00169	76 2e		 jbe	 SHORT $LN32@FindString@2
  0016b	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  0016e	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00171	75 0d		 jne	 SHORT $LN2@FindString@2
  00173	83 f9 02	 cmp	 ecx, 2
  00176	76 21		 jbe	 SHORT $LN32@FindString@2
  00178	8a 4a 02	 mov	 cl, BYTE PTR [edx+2]
  0017b	3a 4e 02	 cmp	 cl, BYTE PTR [esi+2]
  0017e	74 19		 je	 SHORT $LN32@FindString@2
$LN2@FindString@2:

; 6267 : 				goto fsif_end;
; 6268 : 			}
; 6269 : 			bufPos--;

  00180	4f		 dec	 edi
  00181	85 ff		 test	 edi, edi
  00183	7f b1		 jg	 SHORT $LL4@FindString@2

; 6260 : 
; 6261 : 		while (bufPos > 0)

  00185	8b 74 24 18	 mov	 esi, DWORD PTR _src$[esp+64]
$LN12@FindString@2:

; 6270 : 		}
; 6271 : 
; 6272 : 	} while (!bExit);

  00189	83 7c 24 14 00	 cmp	 DWORD PTR _bExit$[esp+64], 0
  0018e	75 1e		 jne	 SHORT $fsif_end$142347
  00190	8b 7c 24 28	 mov	 edi, DWORD PTR _filePos$[esp+64]
  00194	e9 27 ff ff ff	 jmp	 $LL13@FindString@2
$LN32@FindString@2:

; 6264 : 			{
; 6265 : 				// String found
; 6266 : 				retVal = filePos + bufPos;

  00199	8b 74 24 18	 mov	 esi, DWORD PTR _src$[esp+64]
  0019d	8b c7		 mov	 eax, edi
  0019f	99		 cdq
  001a0	03 44 24 28	 add	 eax, DWORD PTR _filePos$[esp+64]
  001a4	13 d3		 adc	 edx, ebx
  001a6	89 44 24 20	 mov	 DWORD PTR _retVal$[esp+64], eax
  001aa	89 54 24 24	 mov	 DWORD PTR _retVal$[esp+68], edx
$fsif_end$142347:

; 6273 : 
; 6274 : fsif_end:
; 6275 : 	CloseHandle (src);

  001ae	56		 push	 esi
  001af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 6276 : 	free (buffer);

  001b5	8b 54 24 10	 mov	 edx, DWORD PTR _z$154261[esp+64]
  001b9	52		 push	 edx
  001ba	e8 00 00 00 00	 call	 _free

; 6277 : 
; 6278 : 	return retVal;

  001bf	8b 44 24 24	 mov	 eax, DWORD PTR _retVal$[esp+68]
  001c3	8b 54 24 28	 mov	 edx, DWORD PTR _retVal$[esp+72]
  001c7	83 c4 04	 add	 esp, 4
  001ca	5f		 pop	 edi
  001cb	5e		 pop	 esi
  001cc	5d		 pop	 ebp
  001cd	5b		 pop	 ebx

; 6279 : }

  001ce	83 c4 30	 add	 esp, 48			; 00000030H
  001d1	c3		 ret	 0
$LN15@FindString@2:
  001d2	5f		 pop	 edi
  001d3	5e		 pop	 esi
  001d4	5d		 pop	 ebp

; 6228 : 		return -1;

  001d5	8b d0		 mov	 edx, eax
  001d7	5b		 pop	 ebx

; 6279 : }

  001d8	83 c4 30	 add	 esp, 48			; 00000030H
  001db	c3		 ret	 0

; 6212 : 	int bufSize = 64 * BYTES_PER_KB;
; 6213 : 	char *buffer = (char *) err_malloc (bufSize);

$LN23@FindString@2:
  001dc	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@
  001e1	e8 00 00 00 00	 call	 _AbortProcess
$LN47@FindString@2:
  001e6	cc		 int	 3
_FindStringInFile ENDP
_TEXT	ENDS
PUBLIC	??_C@_07MAJILGNB@notepad?$AA@			; `string'
PUBLIC	??_C@_01BJJEKLCA@?$CC?$AA@			; `string'
PUBLIC	??_C@_02DEBJNODD@?$PP?$PO?$AA@			; `string'
PUBLIC	_text$GSCopy$
PUBLIC	??_C@_04IOIMBAGL@?1p?5?$CC?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_PrintHardCopyTextUTF16
EXTRN	_WaitCursor:PROC
;	COMDAT ??_C@_07MAJILGNB@notepad?$AA@
CONST	SEGMENT
??_C@_07MAJILGNB@notepad?$AA@ DB 'notepad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01BJJEKLCA@?$CC?$AA@
CONST	SEGMENT
??_C@_01BJJEKLCA@?$CC?$AA@ DB '"', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DEBJNODD@?$PP?$PO?$AA@
CONST	SEGMENT
??_C@_02DEBJNODD@?$PP?$PO?$AA@ DB 0ffH, 0feH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IOIMBAGL@?1p?5?$CC?$AA@
CONST	SEGMENT
??_C@_04IOIMBAGL@?1p?5?$CC?$AA@ DB '/p "', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PrintHardCopyTextUTF16
_TEXT	SEGMENT
_bytesWritten$154308 = -1576				; size = 4
_bytesWritten$154293 = -1576				; size = 4
_text$GSCopy$ = -1572					; size = 4
_path$ = -1568						; size = 520
_filename$ = -1048					; size = 261
_cl$ = -784						; size = 780
__$ArrayPad$ = -4					; size = 4
_text$ = 8						; size = 4
_title$ = 12						; size = 4
_textByteLen$ = 16					; size = 4
_PrintHardCopyTextUTF16 PROC				; COMDAT

; 6404 : {

  00000	81 ec 28 06 00
	00		 sub	 esp, 1576		; 00000628H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 24 06
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+1576], eax
  00014	8b 84 24 2c 06
	00 00		 mov	 eax, DWORD PTR _text$[esp+1572]

; 6405 : 	char cl [MAX_PATH*3] = {"/p \""};

  0001b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_04IOIMBAGL@?1p?5?$CC?$AA@
  00021	8a 15 04 00 00
	00		 mov	 dl, BYTE PTR ??_C@_04IOIMBAGL@?1p?5?$CC?$AA@+4
  00027	68 07 03 00 00	 push	 775			; 00000307H

; 6431 : 	}
; 6432 : 
; 6433 : 	// Write the actual text
; 6434 : 	if (!SaveBufferToFile ((char *) text, path, textByteLen, TRUE))

  0002c	89 44 24 08	 mov	 DWORD PTR _text$GSCopy$[esp+1580], eax
  00030	8d 84 24 21 03
	00 00		 lea	 eax, DWORD PTR _cl$[esp+1585]
  00037	6a 00		 push	 0
  00039	50		 push	 eax
  0003a	89 8c 24 24 03
	00 00		 mov	 DWORD PTR _cl$[esp+1588], ecx
  00041	88 94 24 28 03
	00 00		 mov	 BYTE PTR _cl$[esp+1592], dl
  00048	e8 00 00 00 00	 call	 _memset
  0004d	68 07 02 00 00	 push	 519			; 00000207H
  00052	8d 4c 24 19	 lea	 ecx, DWORD PTR _path$[esp+1593]
  00056	6a 00		 push	 0
  00058	51		 push	 ecx
  00059	c6 44 24 20 00	 mov	 BYTE PTR _path$[esp+1600], 0
  0005e	e8 00 00 00 00	 call	 _memset
  00063	68 04 01 00 00	 push	 260			; 00000104H
  00068	8d 94 24 2d 02
	00 00		 lea	 edx, DWORD PTR _filename$[esp+1605]
  0006f	6a 00		 push	 0
  00071	52		 push	 edx
  00072	c6 84 24 34 02
	00 00 00	 mov	 BYTE PTR _filename$[esp+1612], 0
  0007a	e8 00 00 00 00	 call	 _memset
  0007f	8b 84 24 54 06
	00 00		 mov	 eax, DWORD PTR _title$[esp+1608]
  00086	8d 94 24 34 02
	00 00		 lea	 edx, DWORD PTR _filename$[esp+1612]
  0008d	83 c4 24	 add	 esp, 36			; 00000024H
  00090	2b d0		 sub	 edx, eax
$LL8@PrintHardC:
  00092	8a 08		 mov	 cl, BYTE PTR [eax]
  00094	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00097	40		 inc	 eax
  00098	84 c9		 test	 cl, cl
  0009a	75 f6		 jne	 SHORT $LL8@PrintHardC
  0009c	56		 push	 esi
  0009d	57		 push	 edi
  0009e	8d 44 24 10	 lea	 eax, DWORD PTR _path$[esp+1584]
  000a2	50		 push	 eax
  000a3	68 08 02 00 00	 push	 520			; 00000208H
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTempPathA@8
  000ae	8d 4c 24 10	 lea	 ecx, DWORD PTR _path$[esp+1584]
  000b2	51		 push	 ecx
  000b3	e8 00 00 00 00	 call	 _FileExists
  000b8	83 c4 04	 add	 esp, 4
  000bb	85 c0		 test	 eax, eax
  000bd	75 4c		 jne	 SHORT $LN5@PrintHardC
  000bf	8d 94 24 18 02
	00 00		 lea	 edx, DWORD PTR _filename$[esp+1584]
  000c6	52		 push	 edx
  000c7	e8 00 00 00 00	 call	 _GetConfigPath
  000cc	83 c4 04	 add	 esp, 4
  000cf	8d 54 24 10	 lea	 edx, DWORD PTR _path$[esp+1584]
$LL9@PrintHardC:
  000d3	8a 08		 mov	 cl, BYTE PTR [eax]
  000d5	88 0a		 mov	 BYTE PTR [edx], cl
  000d7	40		 inc	 eax
  000d8	42		 inc	 edx
  000d9	84 c9		 test	 cl, cl
  000db	75 f6		 jne	 SHORT $LL9@PrintHardC
  000dd	8d 44 24 10	 lea	 eax, DWORD PTR _path$[esp+1584]
  000e1	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL36@PrintHardC:
  000e4	8a 08		 mov	 cl, BYTE PTR [eax]
  000e6	40		 inc	 eax
  000e7	84 c9		 test	 cl, cl
  000e9	75 f9		 jne	 SHORT $LL36@PrintHardC
  000eb	2b c2		 sub	 eax, edx
  000ed	83 f8 02	 cmp	 eax, 2
  000f0	73 48		 jae	 SHORT $LN42@PrintHardC
  000f2	5f		 pop	 edi
  000f3	33 c0		 xor	 eax, eax
  000f5	5e		 pop	 esi

; 6451 : }

  000f6	8b 8c 24 24 06
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1576]
  000fd	33 cc		 xor	 ecx, esp
  000ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00104	81 c4 28 06 00
	00		 add	 esp, 1576		; 00000628H
  0010a	c3		 ret	 0
$LN5@PrintHardC:

; 6406 : 	char path [MAX_PATH * 2] = { 0 };
; 6407 : 	char filename [MAX_PATH + 1] = { 0 };
; 6408 : 
; 6409 : 	strcpy (filename, title);
; 6410 : 	//strcat (filename, ".txt");
; 6411 : 
; 6412 : 	GetTempPath (sizeof (path), path);
; 6413 : 
; 6414 : 	if (!FileExists (path))
; 6415 : 	{
; 6416 : 		strcpy (path, GetConfigPath (filename));
; 6417 : 
; 6418 : 		if (strlen(path) < 2)
; 6419 : 			return FALSE;
; 6420 : 	}
; 6421 : 	else
; 6422 : 	{
; 6423 : 		strcat (path, filename);

  0010b	8d 84 24 18 02
	00 00		 lea	 eax, DWORD PTR _filename$[esp+1584]
  00112	8b d0		 mov	 edx, eax
$LL37@PrintHardC:
  00114	8a 08		 mov	 cl, BYTE PTR [eax]
  00116	40		 inc	 eax
  00117	84 c9		 test	 cl, cl
  00119	75 f9		 jne	 SHORT $LL37@PrintHardC
  0011b	8d 7c 24 10	 lea	 edi, DWORD PTR _path$[esp+1584]
  0011f	2b c2		 sub	 eax, edx
  00121	4f		 dec	 edi
$LL38@PrintHardC:
  00122	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  00125	47		 inc	 edi
  00126	84 c9		 test	 cl, cl
  00128	75 f8		 jne	 SHORT $LL38@PrintHardC
  0012a	8b c8		 mov	 ecx, eax
  0012c	c1 e9 02	 shr	 ecx, 2
  0012f	8b f2		 mov	 esi, edx
  00131	f3 a5		 rep movsd
  00133	8b c8		 mov	 ecx, eax
  00135	83 e1 03	 and	 ecx, 3
  00138	f3 a4		 rep movsb
$LN42@PrintHardC:
  0013a	53		 push	 ebx
  0013b	55		 push	 ebp

; 6424 : 	}
; 6425 : 
; 6426 : 	// Write the Unicode signature
; 6427 : 	if (!SaveBufferToFile ("\xFF\xFE", path, 2, FALSE))

  0013c	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__CreateFileA@28
  00142	6a 00		 push	 0
  00144	6a 00		 push	 0
  00146	6a 02		 push	 2
  00148	6a 00		 push	 0
  0014a	6a 03		 push	 3
  0014c	68 00 00 00 40	 push	 1073741824		; 40000000H
  00151	8d 44 24 30	 lea	 eax, DWORD PTR _path$[esp+1616]
  00155	50		 push	 eax
  00156	bf 01 00 00 00	 mov	 edi, 1
  0015b	ff d5		 call	 ebp
  0015d	8b f0		 mov	 esi, eax
  0015f	83 fe ff	 cmp	 esi, -1
  00162	75 0e		 jne	 SHORT $LN17@PrintHardC
$LN47@PrintHardC:
  00164	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0016a	51		 push	 ecx
  0016b	e8 00 00 00 00	 call	 _handleWin32Error
  00170	eb 54		 jmp	 SHORT $LN46@PrintHardC
$LN17@PrintHardC:
  00172	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__WriteFile@20
  00178	6a 00		 push	 0
  0017a	8d 54 24 14	 lea	 edx, DWORD PTR _bytesWritten$154293[esp+1596]
  0017e	52		 push	 edx
  0017f	6a 02		 push	 2
  00181	68 00 00 00 00	 push	 OFFSET ??_C@_02DEBJNODD@?$PP?$PO?$AA@
  00186	56		 push	 esi
  00187	ff d3		 call	 ebx
  00189	85 c0		 test	 eax, eax
  0018b	74 07		 je	 SHORT $LN14@PrintHardC
  0018d	83 7c 24 10 02	 cmp	 DWORD PTR _bytesWritten$154293[esp+1592], 2
  00192	74 1d		 je	 SHORT $LN12@PrintHardC
$LN14@PrintHardC:
  00194	33 ff		 xor	 edi, edi
  00196	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0019c	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  001a1	74 0e		 je	 SHORT $LN12@PrintHardC
  001a3	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  001a8	50		 push	 eax
  001a9	e8 00 00 00 00	 call	 _handleWin32Error
  001ae	83 c4 04	 add	 esp, 4
$LN12@PrintHardC:
  001b1	56		 push	 esi
  001b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  001b8	85 ff		 test	 edi, edi
  001ba	75 21		 jne	 SHORT $LN2@PrintHardC
  001bc	8d 4c 24 18	 lea	 ecx, DWORD PTR _path$[esp+1592]
  001c0	51		 push	 ecx
  001c1	e8 00 00 00 00	 call	 _remove
$LN46@PrintHardC:
  001c6	83 c4 04	 add	 esp, 4
$LN34@PrintHardC:

; 6428 : 	{
; 6429 : 		remove (path);

  001c9	8d 54 24 18	 lea	 edx, DWORD PTR _path$[esp+1592]
  001cd	52		 push	 edx
  001ce	e8 00 00 00 00	 call	 _remove
  001d3	83 c4 04	 add	 esp, 4

; 6430 : 		return FALSE;

  001d6	33 c0		 xor	 eax, eax
  001d8	e9 0a 01 00 00	 jmp	 $LN44@PrintHardC
$LN2@PrintHardC:

; 6431 : 	}
; 6432 : 
; 6433 : 	// Write the actual text
; 6434 : 	if (!SaveBufferToFile ((char *) text, path, textByteLen, TRUE))

  001dd	6a 00		 push	 0
  001df	6a 00		 push	 0
  001e1	6a 03		 push	 3
  001e3	6a 00		 push	 0
  001e5	6a 03		 push	 3
  001e7	68 00 00 00 40	 push	 1073741824		; 40000000H
  001ec	8d 44 24 30	 lea	 eax, DWORD PTR _path$[esp+1616]
  001f0	50		 push	 eax
  001f1	bf 01 00 00 00	 mov	 edi, 1
  001f6	ff d5		 call	 ebp
  001f8	8b f0		 mov	 esi, eax
  001fa	83 fe ff	 cmp	 esi, -1
  001fd	0f 84 61 ff ff
	ff		 je	 $LN47@PrintHardC
  00203	6a 02		 push	 2
  00205	6a 00		 push	 0
  00207	6a 00		 push	 0
  00209	56		 push	 esi
  0020a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16
  00210	8b ac 24 44 06
	00 00		 mov	 ebp, DWORD PTR _textByteLen$[esp+1588]
  00217	8b 44 24 14	 mov	 eax, DWORD PTR _text$GSCopy$[esp+1592]
  0021b	6a 00		 push	 0
  0021d	8d 54 24 14	 lea	 edx, DWORD PTR _bytesWritten$154308[esp+1596]
  00221	52		 push	 edx
  00222	55		 push	 ebp
  00223	50		 push	 eax
  00224	56		 push	 esi
  00225	ff d3		 call	 ebx
  00227	85 c0		 test	 eax, eax
  00229	74 06		 je	 SHORT $LN24@PrintHardC
  0022b	3b 6c 24 10	 cmp	 ebp, DWORD PTR _bytesWritten$154308[esp+1592]
  0022f	74 17		 je	 SHORT $LN43@PrintHardC
$LN24@PrintHardC:
  00231	33 ff		 xor	 edi, edi
  00233	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00239	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0023f	51		 push	 ecx
  00240	e8 00 00 00 00	 call	 _handleWin32Error
  00245	83 c4 04	 add	 esp, 4
$LN43@PrintHardC:
  00248	56		 push	 esi
  00249	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  0024f	85 ff		 test	 edi, edi

; 6435 : 	{
; 6436 : 		remove (path);
; 6437 : 		return FALSE;

  00251	0f 84 72 ff ff
	ff		 je	 $LN34@PrintHardC

; 6438 : 	}
; 6439 : 
; 6440 : 	strcat (cl, path);

  00257	8d 44 24 18	 lea	 eax, DWORD PTR _path$[esp+1592]
  0025b	8b d0		 mov	 edx, eax
  0025d	8d 49 00	 npad	 3
$LL39@PrintHardC:
  00260	8a 08		 mov	 cl, BYTE PTR [eax]
  00262	40		 inc	 eax
  00263	84 c9		 test	 cl, cl
  00265	75 f9		 jne	 SHORT $LL39@PrintHardC
  00267	8d bc 24 28 03
	00 00		 lea	 edi, DWORD PTR _cl$[esp+1592]
  0026e	2b c2		 sub	 eax, edx
  00270	4f		 dec	 edi
$LL40@PrintHardC:
  00271	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  00274	47		 inc	 edi
  00275	84 c9		 test	 cl, cl
  00277	75 f8		 jne	 SHORT $LL40@PrintHardC
  00279	8b c8		 mov	 ecx, eax
  0027b	c1 e9 02	 shr	 ecx, 2
  0027e	8b f2		 mov	 esi, edx
  00280	f3 a5		 rep movsd
  00282	8b c8		 mov	 ecx, eax
  00284	83 e1 03	 and	 ecx, 3
  00287	f3 a4		 rep movsb

; 6441 : 	strcat (cl, "\"");

  00289	8d bc 24 28 03
	00 00		 lea	 edi, DWORD PTR _cl$[esp+1592]
  00290	4f		 dec	 edi
$LL41@PrintHardC:
  00291	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00294	47		 inc	 edi
  00295	84 c0		 test	 al, al
  00297	75 f8		 jne	 SHORT $LL41@PrintHardC
  00299	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01BJJEKLCA@?$CC?$AA@
  0029f	66 89 07	 mov	 WORD PTR [edi], ax

; 6442 : 
; 6443 : 	WaitCursor ();

  002a2	e8 00 00 00 00	 call	 _WaitCursor

; 6444 : 	ShellExecute (NULL, "open", PRINT_TOOL, cl, NULL, SW_HIDE);

  002a7	6a 00		 push	 0
  002a9	6a 00		 push	 0
  002ab	8d 8c 24 30 03
	00 00		 lea	 ecx, DWORD PTR _cl$[esp+1600]
  002b2	51		 push	 ecx
  002b3	68 00 00 00 00	 push	 OFFSET ??_C@_07MAJILGNB@notepad?$AA@
  002b8	68 00 00 00 00	 push	 OFFSET ??_C@_04PMOCAHAA@open?$AA@
  002bd	6a 00		 push	 0
  002bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24

; 6445 : 	Sleep (6000);

  002c5	68 70 17 00 00	 push	 6000			; 00001770H
  002ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 6446 : 	NormalCursor();

  002d0	e8 00 00 00 00	 call	 _NormalCursor

; 6447 : 
; 6448 : 	remove (path);

  002d5	8d 54 24 18	 lea	 edx, DWORD PTR _path$[esp+1592]
  002d9	52		 push	 edx
  002da	e8 00 00 00 00	 call	 _remove
  002df	83 c4 04	 add	 esp, 4

; 6449 : 
; 6450 : 	return TRUE;

  002e2	b8 01 00 00 00	 mov	 eax, 1
$LN44@PrintHardC:

; 6451 : }

  002e7	8b 8c 24 34 06
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1592]
  002ee	5d		 pop	 ebp
  002ef	5b		 pop	 ebx
  002f0	5f		 pop	 edi
  002f1	5e		 pop	 esi
  002f2	33 cc		 xor	 ecx, esp
  002f4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002f9	81 c4 28 06 00
	00		 add	 esp, 1576		; 00000628H
  002ff	c3		 ret	 0
_PrintHardCopyTextUTF16 ENDP
_TEXT	ENDS
PUBLIC	_AskMultiChoice
EXTRN	__imp__DialogBoxParamW@20:PROC
; Function compile flags: /Ogtpy
;	COMDAT _AskMultiChoice
_TEXT	SEGMENT
_params$ = -8						; size = 8
_strings$ = 8						; size = 4
_bBold$ = 12						; size = 4
_AskMultiChoice PROC					; COMDAT

; 7069 : {

  00000	83 ec 08	 sub	 esp, 8

; 7070 : 	MULTI_CHOICE_DLGPROC_PARAMS params;
; 7071 : 
; 7072 : 	params.strings = &strings[0];

  00003	8b 44 24 0c	 mov	 eax, DWORD PTR _strings$[esp+4]

; 7073 : 	params.bold = bBold;

  00007	8b 4c 24 10	 mov	 ecx, DWORD PTR _bBold$[esp+4]

; 7074 : 
; 7075 : 	return DialogBoxParamW (hInst, 
; 7076 : 		MAKEINTRESOURCEW (IDD_MULTI_CHOICE_DLG), MainDlg,
; 7077 : 		(DLGPROC) MultiChoiceDialogProc, (LPARAM) &params);

  0000b	8d 14 24	 lea	 edx, DWORD PTR _params$[esp+8]
  0000e	52		 push	 edx
  0000f	68 00 00 00 00	 push	 OFFSET _MultiChoiceDialogProc@16
  00014	89 44 24 08	 mov	 DWORD PTR _params$[esp+16], eax
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0001d	50		 push	 eax
  0001e	89 4c 24 10	 mov	 DWORD PTR _params$[esp+24], ecx
  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00028	68 97 13 00 00	 push	 5015			; 00001397H
  0002d	51		 push	 ecx
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 7078 : }

  00034	83 c4 08	 add	 esp, 8
  00037	c3		 ret	 0
_AskMultiChoice ENDP
_TEXT	ENDS
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 1557 : 		{	// subscript mutable sequence

  00000	56		 push	 esi
  00001	57		 push	 edi

; 1558 : 
; 1559 :  #if _HAS_ITERATOR_DEBUGGING
; 1560 : 		// skip debug checks if the container is initizialed with _IGNORE_MYITERLIST
; 1561 : 		if (this->_Myfirstiter != _IGNORE_MYITERLIST)
; 1562 : 			{
; 1563 : 			if (_Mysize < _Off)
; 1564 : 				{
; 1565 : 				_DEBUG_ERROR("string subscript out of range");
; 1566 : 				_SCL_SECURE_OUT_OF_RANGE;
; 1567 : 				}
; 1568 : 			}
; 1569 :  #else
; 1570 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= _Mysize);

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	3b 7e 14	 cmp	 edi, DWORD PTR [esi+20]
  0000b	76 05		 jbe	 SHORT $LN3@operator@13
  0000d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@13:

; 1571 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1572 : 
; 1573 : 		return (_Myptr()[_Off]);

  00012	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00016	72 0b		 jb	 SHORT $LN9@operator@13
  00018	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  0001b	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 1574 : 		}

  00020	c2 04 00	 ret	 4

; 1571 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1572 : 
; 1573 : 		return (_Myptr()[_Off]);

$LN9@operator@13:
  00023	8d 44 3e 04	 lea	 eax, DWORD PTR [esi+edi+4]
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi

; 1574 : 		}

  00029	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogtpy
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1651 : 		return (_Myptr());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN5@c_str
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  00009	c3		 ret	 0

; 1651 : 		return (_Myptr());

$LN5@c_str:
  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  0000d	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
; Function compile flags: /Ogtpy
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str, COMDAT
; _this$ = ecx

; 1651 : 		return (_Myptr());

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN5@c_str@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  00009	c3		 ret	 0

; 1651 : 		return (_Myptr());

$LN5@c_str@2:
  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  0000d	c3		 ret	 0
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
_TEXT	ENDS
PUBLIC	??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
PUBLIC	?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::uflow
PUBLIC	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
PUBLIC	?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z ; std::basic_streambuf<char,std::char_traits<char> >::_Xsgetn_s
PUBLIC	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
PUBLIC	?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<char,std::char_traits<char> >::imbue
EXTRN	??1_Mutex@std@@QAE@XZ:PROC			; std::_Mutex::~_Mutex
EXTRN	??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z
	DD	FLAT:?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z
	DD	FLAT:?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z
	DD	FLAT:?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
CONST	ENDS
;	COMDAT ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
__Lock$154413 = -4					; size = 4
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	55		 push	 ebp
  00003	8b e9		 mov	 ebp, ecx

; 43   : 		_DELETE_CRT(_Plocale);

  00005	8b 5d 38	 mov	 ebx, DWORD PTR [ebp+56]
  00008	c7 45 00 00 00
	00 00		 mov	 DWORD PTR [ebp], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  0000f	85 db		 test	 ebx, ebx
  00011	74 50		 je	 SHORT $LN3@basic_stre
  00013	57		 push	 edi
  00014	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00016	85 ff		 test	 edi, edi
  00018	74 3f		 je	 SHORT $LN12@basic_stre
  0001a	6a 00		 push	 0
  0001c	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$154413[esp+20]
  00020	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00025	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00028	85 c0		 test	 eax, eax
  0002a	76 09		 jbe	 SHORT $LN14@basic_stre
  0002c	83 f8 ff	 cmp	 eax, -1
  0002f	73 04		 jae	 SHORT $LN14@basic_stre
  00031	48		 dec	 eax
  00032	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN14@basic_stre:
  00035	56		 push	 esi
  00036	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00039	f7 de		 neg	 esi
  0003b	1b f6		 sbb	 esi, esi
  0003d	f7 d6		 not	 esi
  0003f	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$154413[esp+20]
  00043	23 f7		 and	 esi, edi
  00045	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0004a	85 f6		 test	 esi, esi
  0004c	74 0a		 je	 SHORT $LN18@basic_stre
  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	8b 10		 mov	 edx, DWORD PTR [eax]
  00052	6a 01		 push	 1
  00054	8b ce		 mov	 ecx, esi
  00056	ff d2		 call	 edx
$LN18@basic_stre:
  00058	5e		 pop	 esi
$LN12@basic_stre:
  00059	53		 push	 ebx
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005f	83 c4 04	 add	 esp, 4
  00062	5f		 pop	 edi
$LN3@basic_stre:

; 44   : 		}

  00063	8d 4d 04	 lea	 ecx, DWORD PTR [ebp+4]
  00066	5d		 pop	 ebp
  00067	5b		 pop	 ebx
  00068	83 c4 04	 add	 esp, 4
  0006b	e9 00 00 00 00	 jmp	 ??1_Mutex@std@@QAE@XZ	; std::_Mutex::~_Mutex
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
_TEXT	ENDS
PUBLIC	?to_char_type@?$char_traits@D@std@@SADABH@Z	; std::char_traits<char>::to_char_type
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@D@std@@SADABH@Z PROC	; std::char_traits<char>::to_char_type, COMDAT

; 501  : 		return ((_Elem)_Meta);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Meta$[esp-4]
  00004	8a 00		 mov	 al, BYTE PTR [eax]

; 502  : 		}

  00006	c3		 ret	 0
?to_char_type@?$char_traits@D@std@@SADABH@Z ENDP	; std::char_traits<char>::to_char_type
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 298  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 299  : 		}

  00003	c2 04 00	 ret	 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::overflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 303  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 304  : 		}

  00003	c2 04 00	 ret	 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc, COMDAT
; _this$ = ecx

; 308  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 309  : 		}

  00002	c3		 ret	 0
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 313  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 314  : 		}

  00003	c3		 ret	 0
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::underflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn, COMDAT
; _this$ = ecx

; 326  : 		// assume the destination buffer is large enough
; 327  : 		return _Xsgetn_s(_Ptr, (size_t)-1, _Count);

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Count$[esp-4]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00009	52		 push	 edx
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR __Ptr$[esp]
  0000e	6a ff		 push	 -1
  00010	52		 push	 edx
  00011	ff d0		 call	 eax

; 328  : 		}

  00013	c2 08 00	 ret	 8
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 403  : 		{	// offer buffer to external agent (do nothing)

  00000	8b c1		 mov	 eax, ecx

; 404  : 		return (this);
; 405  : 		}

  00002	c2 08 00	 ret	 8
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 409  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 410  : 		}

  00002	c3		 ret	 0
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sync
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 414  : 		}

  00000	c2 04 00	 ret	 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
PUBLIC	?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump
; Function compile flags: /Ogtpy
;	COMDAT ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::gbump, COMDAT
; _this$ = ecx

; 210  : 		*_IGcount -= _Off;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00007	29 10		 sub	 DWORD PTR [eax], edx

; 211  : 		*_IGnext += _Off;

  00009	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0000c	01 11		 add	 DWORD PTR [ecx], edx

; 212  : 		}

  0000e	c2 04 00	 ret	 4
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gbump
_TEXT	ENDS
PUBLIC	?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
; Function compile flags: /Ogtpy
;	COMDAT ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc, COMDAT
; _this$ = ecx

; 234  : 		--*_IGcount;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 235  : 		return ((*_IGnext)++);

  00005	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 236  : 		}

  0000f	c3		 ret	 0
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
_TEXT	ENDS
PUBLIC	?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
; Function compile flags: /Ogtpy
;	COMDAT ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ
_TEXT	SEGMENT
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail, COMDAT
; _this$ = ecx

; 246  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 06		 je	 SHORT $LN3@Gnavail
  00008	8b 49 30	 mov	 ecx, DWORD PTR [ecx+48]
  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 247  : 		}

  0000d	c3		 ret	 0
$LN3@Gnavail:

; 246  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  0000e	33 c0		 xor	 eax, eax

; 247  : 		}

  00010	c3		 ret	 0
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
_TEXT	ENDS
PUBLIC	?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbump
; Function compile flags: /Ogtpy
;	COMDAT ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbump, COMDAT
; _this$ = ecx

; 251  : 		*_IPcount -= _Off;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00007	29 10		 sub	 DWORD PTR [eax], edx

; 252  : 		*_IPnext += _Off;

  00009	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0000c	01 11		 add	 DWORD PTR [ecx], edx

; 253  : 		}

  0000e	c2 04 00	 ret	 4
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbump
_TEXT	ENDS
PUBLIC	??0?$fpos@H@std@@QAE@J@Z			; std::fpos<int>::fpos<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??0?$fpos@H@std@@QAE@J@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??0?$fpos@H@std@@QAE@J@Z PROC				; std::fpos<int>::fpos<int>, COMDAT
; _this$ = ecx

; 54   : 		{	// construct with stream offset

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx
  00008	33 c9		 xor	 ecx, ecx
  0000a	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000d	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00010	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 55   : 		}

  00013	c2 04 00	 ret	 4
??0?$fpos@H@std@@QAE@J@Z ENDP				; std::fpos<int>::fpos<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 317  : 		{	// get a character from stream, point past it

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 318  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 319  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00008	ff d2		 call	 edx
  0000a	83 f8 ff	 cmp	 eax, -1
  0000d	75 04		 jne	 SHORT $LN3@uflow
  0000f	0b c0		 or	 eax, eax
  00011	5e		 pop	 esi

; 320  : 		}

  00012	c3		 ret	 0
$LN3@uflow:

; 318  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 319  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

  00013	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00016	ff 08		 dec	 DWORD PTR [eax]
  00018	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00020	89 10		 mov	 DWORD PTR [eax], edx
  00022	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00025	5e		 pop	 esi

; 320  : 		}

  00026	c3		 ret	 0
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::uflow
_TEXT	ENDS
EXTRN	?_BADOFF@std@@3JB:DWORD				; std::_BADOFF
; Function compile flags: /Ogtpy
;	COMDAT ?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 393  : 		return (streampos(_BADOFF));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	33 c9		 xor	 ecx, ecx
  0000e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00011	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00014	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 394  : 		}

  00017	c2 10 00	 ret	 16			; 00000010H
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 399  : 		return (streampos(_BADOFF));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	33 c9		 xor	 ecx, ecx
  0000e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00011	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00014	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 400  : 		}

  00017	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
PUBLIC	??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::overflow
PUBLIC	?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbackfail
PUBLIC	?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::showmanyc
PUBLIC	?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::underflow
PUBLIC	?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::uflow
PUBLIC	?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsgetn
PUBLIC	?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Xsgetn_s
PUBLIC	?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsputn
PUBLIC	?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekoff
PUBLIC	?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekpos
PUBLIC	?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setbuf
PUBLIC	?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sync
PUBLIC	?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::imbue
EXTRN	??_E?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
	DD	FLAT:?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
	DD	FLAT:?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	FLAT:?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z
	DD	FLAT:?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z
	DD	FLAT:?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z
	DD	FLAT:?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z
	DD	FLAT:?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z
	DD	FLAT:?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
CONST	ENDS
;	COMDAT ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
__Lock$154538 = -4					; size = 4
??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	55		 push	 ebp
  00003	8b e9		 mov	 ebp, ecx

; 43   : 		_DELETE_CRT(_Plocale);

  00005	8b 5d 38	 mov	 ebx, DWORD PTR [ebp+56]
  00008	c7 45 00 00 00
	00 00		 mov	 DWORD PTR [ebp], OFFSET ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
  0000f	85 db		 test	 ebx, ebx
  00011	74 50		 je	 SHORT $LN3@basic_stre@2
  00013	57		 push	 edi
  00014	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00016	85 ff		 test	 edi, edi
  00018	74 3f		 je	 SHORT $LN12@basic_stre@2
  0001a	6a 00		 push	 0
  0001c	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$154538[esp+20]
  00020	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00025	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00028	85 c0		 test	 eax, eax
  0002a	76 09		 jbe	 SHORT $LN14@basic_stre@2
  0002c	83 f8 ff	 cmp	 eax, -1
  0002f	73 04		 jae	 SHORT $LN14@basic_stre@2
  00031	48		 dec	 eax
  00032	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN14@basic_stre@2:
  00035	56		 push	 esi
  00036	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00039	f7 de		 neg	 esi
  0003b	1b f6		 sbb	 esi, esi
  0003d	f7 d6		 not	 esi
  0003f	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$154538[esp+20]
  00043	23 f7		 and	 esi, edi
  00045	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0004a	85 f6		 test	 esi, esi
  0004c	74 0a		 je	 SHORT $LN18@basic_stre@2
  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	8b 10		 mov	 edx, DWORD PTR [eax]
  00052	6a 01		 push	 1
  00054	8b ce		 mov	 ecx, esi
  00056	ff d2		 call	 edx
$LN18@basic_stre@2:
  00058	5e		 pop	 esi
$LN12@basic_stre@2:
  00059	53		 push	 ebx
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005f	83 c4 04	 add	 esp, 4
  00062	5f		 pop	 edi
$LN3@basic_stre@2:

; 44   : 		}

  00063	8d 4d 04	 lea	 ecx, DWORD PTR [ebp+4]
  00066	5d		 pop	 ebp
  00067	5b		 pop	 ebx
  00068	83 c4 04	 add	 esp, 4
  0006b	e9 00 00 00 00	 jmp	 ??1_Mutex@std@@QAE@XZ	; std::_Mutex::~_Mutex
??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	?to_char_type@?$char_traits@_W@std@@SA_WABG@Z	; std::char_traits<wchar_t>::to_char_type
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@_W@std@@SA_WABG@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@_W@std@@SA_WABG@Z PROC	; std::char_traits<wchar_t>::to_char_type, COMDAT

; 386  : 		return (_Meta);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Meta$[esp-4]
  00004	66 8b 00	 mov	 ax, WORD PTR [eax]

; 387  : 		}

  00007	c3		 ret	 0
?to_char_type@?$char_traits@_W@std@@SA_WABG@Z ENDP	; std::char_traits<wchar_t>::to_char_type
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 2
?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::overflow, COMDAT
; _this$ = ecx

; 298  : 		return (_Traits::eof());

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 299  : 		}

  00005	c2 04 00	 ret	 4
?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::overflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 2
?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbackfail, COMDAT
; _this$ = ecx

; 303  : 		return (_Traits::eof());

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 304  : 		}

  00005	c2 04 00	 ret	 4
?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbackfail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::showmanyc, COMDAT
; _this$ = ecx

; 308  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 309  : 		}

  00002	c3		 ret	 0
?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::showmanyc
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
_TEXT	SEGMENT
?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::underflow, COMDAT
; _this$ = ecx

; 313  : 		return (_Traits::eof());

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 314  : 		}

  00005	c3		 ret	 0
?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::underflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsgetn, COMDAT
; _this$ = ecx

; 326  : 		// assume the destination buffer is large enough
; 327  : 		return _Xsgetn_s(_Ptr, (size_t)-1, _Count);

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Count$[esp-4]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00009	52		 push	 edx
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR __Ptr$[esp]
  0000e	6a ff		 push	 -1
  00010	52		 push	 edx
  00011	ff d0		 call	 eax

; 328  : 		}

  00013	c2 08 00	 ret	 8
?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsgetn
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setbuf, COMDAT
; _this$ = ecx

; 403  : 		{	// offer buffer to external agent (do nothing)

  00000	8b c1		 mov	 eax, ecx

; 404  : 		return (this);
; 405  : 		}

  00002	c2 08 00	 ret	 8
?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setbuf
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sync, COMDAT
; _this$ = ecx

; 409  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 410  : 		}

  00002	c3		 ret	 0
?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sync
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::imbue, COMDAT
; _this$ = ecx

; 414  : 		}

  00000	c2 04 00	 ret	 4
?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::imbue
_TEXT	ENDS
PUBLIC	?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gbump
; Function compile flags: /Ogtpy
;	COMDAT ?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gbump, COMDAT
; _this$ = ecx

; 210  : 		*_IGcount -= _Off;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00007	29 10		 sub	 DWORD PTR [eax], edx

; 211  : 		*_IGnext += _Off;

  00009	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0000c	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  0000f	01 01		 add	 DWORD PTR [ecx], eax

; 212  : 		}

  00011	c2 04 00	 ret	 4
?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gbump
_TEXT	ENDS
PUBLIC	?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gninc
; Function compile flags: /Ogtpy
;	COMDAT ?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ
_TEXT	SEGMENT
?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gninc, COMDAT
; _this$ = ecx

; 234  : 		--*_IGcount;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 235  : 		return ((*_IGnext)++);

  00005	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 236  : 		}

  0000f	c3		 ret	 0
?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gninc
_TEXT	ENDS
PUBLIC	?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail
; Function compile flags: /Ogtpy
;	COMDAT ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ
_TEXT	SEGMENT
?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail, COMDAT
; _this$ = ecx

; 246  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 06		 je	 SHORT $LN3@Gnavail@2
  00008	8b 49 30	 mov	 ecx, DWORD PTR [ecx+48]
  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 247  : 		}

  0000d	c3		 ret	 0
$LN3@Gnavail@2:

; 246  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  0000e	33 c0		 xor	 eax, eax

; 247  : 		}

  00010	c3		 ret	 0
?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail
_TEXT	ENDS
PUBLIC	?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbump
; Function compile flags: /Ogtpy
;	COMDAT ?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbump, COMDAT
; _this$ = ecx

; 251  : 		*_IPcount -= _Off;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00007	29 10		 sub	 DWORD PTR [eax], edx

; 252  : 		*_IPnext += _Off;

  00009	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0000c	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  0000f	01 01		 add	 DWORD PTR [ecx], eax

; 253  : 		}

  00011	c2 04 00	 ret	 4
?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbump
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
_TEXT	SEGMENT
?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::uflow, COMDAT
; _this$ = ecx

; 317  : 		{	// get a character from stream, point past it

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 318  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 319  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00008	ff d2		 call	 edx
  0000a	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0000f	66 3b c8	 cmp	 cx, ax
  00012	75 04		 jne	 SHORT $LN3@uflow@2
  00014	8b c1		 mov	 eax, ecx
  00016	5e		 pop	 esi

; 320  : 		}

  00017	c3		 ret	 0
$LN3@uflow@2:

; 318  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 319  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

  00018	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0001b	ff 08		 dec	 DWORD PTR [eax]
  0001d	8b 76 20	 mov	 esi, DWORD PTR [esi+32]
  00020	8b 06		 mov	 eax, DWORD PTR [esi]
  00022	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  00025	89 16		 mov	 DWORD PTR [esi], edx
  00027	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0002a	5e		 pop	 esi

; 320  : 		}

  0002b	c3		 ret	 0
?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::uflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekoff, COMDAT
; _this$ = ecx

; 393  : 		return (streampos(_BADOFF));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	33 c9		 xor	 ecx, ecx
  0000e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00011	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00014	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 394  : 		}

  00017	c2 10 00	 ret	 16			; 00000010H
?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekoff
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekpos, COMDAT
; _this$ = ecx

; 399  : 		return (streampos(_BADOFF));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	33 c9		 xor	 ecx, ecx
  0000e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00011	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00014	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 400  : 		}

  00017	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekpos
_TEXT	ENDS
PUBLIC	??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
EXTRN	??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocato'
	DB	'r@D@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
	DD	FLAT:?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z
	DD	FLAT:?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z
	DD	FLAT:?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z
	DD	FLAT:?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@

; 43   : 		_Tidy();

  00009	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 44   : 		}

  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?not_eof@?$char_traits@D@std@@SAHABH@Z		; std::char_traits<char>::not_eof
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?not_eof@?$char_traits@D@std@@SAHABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?not_eof@?$char_traits@D@std@@SAHABH@Z PROC		; std::char_traits<char>::not_eof, COMDAT

; 522  : 		return (_Meta != eof() ? _Meta : !eof());

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Meta$[esp-4]
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	8b c1		 mov	 eax, ecx
  00008	40		 inc	 eax
  00009	f7 d8		 neg	 eax
  0000b	1b c0		 sbb	 eax, eax
  0000d	23 c1		 and	 eax, ecx

; 523  : 		}

  0000f	c3		 ret	 0
?not_eof@?$char_traits@D@std@@SAHABH@Z ENDP		; std::char_traits<char>::not_eof
_TEXT	ENDS
PUBLIC	??B?$fpos@H@std@@QBEJXZ				; std::fpos<int>::operator long
; Function compile flags: /Ogtpy
;	COMDAT ??B?$fpos@H@std@@QBEJXZ
_TEXT	SEGMENT
??B?$fpos@H@std@@QBEJXZ PROC				; std::fpos<int>::operator long, COMDAT
; _this$ = ecx

; 79   : 		return ((streamoff)(_Myoff + _FPOSOFF(_Fpos)));

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	03 01		 add	 eax, DWORD PTR [ecx]

; 80   : 		}

  00005	c3		 ret	 0
??B?$fpos@H@std@@QBEJXZ ENDP				; std::fpos<int>::operator long
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail, COMDAT
; _this$ = ecx

; 157  : 		if (_Mysb::gptr() == 0
; 158  : 			|| _Mysb::gptr() <= _Mysb::eback()
; 159  : 			|| !_Traits::eq_int_type(_Traits::eof(), _Meta)
; 160  : 			&& !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
; 161  : 			&& _Mystate & _Constant)

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]
  00005	85 c0		 test	 eax, eax
  00007	74 3b		 je	 SHORT $LN3@pbackfail
  00009	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0000c	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000e	76 34		 jbe	 SHORT $LN3@pbackfail
  00010	8b 54 24 04	 mov	 edx, DWORD PTR __Meta$[esp-4]
  00014	83 fa ff	 cmp	 edx, -1
  00017	74 0b		 je	 SHORT $LN4@pbackfail
  00019	3a 50 ff	 cmp	 dl, BYTE PTR [eax-1]
  0001c	74 06		 je	 SHORT $LN4@pbackfail
  0001e	f6 41 40 02	 test	 BYTE PTR [ecx+64], 2
  00022	75 20		 jne	 SHORT $LN3@pbackfail
$LN4@pbackfail:

; 163  : 		else
; 164  : 			{	// back up one position and store put-back character
; 165  : 			_Mysb::gbump(-1);

  00024	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00027	ff 00		 inc	 DWORD PTR [eax]
  00029	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0002c	ff 08		 dec	 DWORD PTR [eax]

; 166  : 			if (!_Traits::eq_int_type(_Traits::eof(), _Meta))

  0002e	83 fa ff	 cmp	 edx, -1
  00031	74 0c		 je	 SHORT $LN37@pbackfail

; 167  : 				*_Mysb::gptr() = _Traits::to_char_type(_Meta);

  00033	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	88 11		 mov	 BYTE PTR [ecx], dl

; 168  : 			return (_Traits::not_eof(_Meta));

  0003a	8b c2		 mov	 eax, edx

; 169  : 			}
; 170  : 		}

  0003c	c2 04 00	 ret	 4

; 168  : 			return (_Traits::not_eof(_Meta));

$LN37@pbackfail:
  0003f	33 c0		 xor	 eax, eax

; 169  : 			}
; 170  : 		}

  00041	c2 04 00	 ret	 4
$LN3@pbackfail:

; 162  : 			return (_Traits::eof());	// can't put back, fail

  00044	83 c8 ff	 or	 eax, -1

; 169  : 			}
; 170  : 		}

  00047	c2 04 00	 ret	 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow, COMDAT
; _this$ = ecx

; 174  : 		if (_Mysb::gptr() == 0)

  00000	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00003	56		 push	 esi
  00004	8b 32		 mov	 esi, DWORD PTR [edx]
  00006	85 f6		 test	 esi, esi
  00008	75 05		 jne	 SHORT $LN8@underflow

; 175  : 			return (_Traits::eof());	// no character buffer, fail

  0000a	83 c8 ff	 or	 eax, -1
  0000d	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  0000e	c3		 ret	 0
$LN8@underflow:
  0000f	53		 push	 ebx
  00010	57		 push	 edi

; 176  : 		else if (_Mysb::gptr() < _Mysb::egptr())

  00011	8b 79 30	 mov	 edi, DWORD PTR [ecx+48]
  00014	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00016	8b c6		 mov	 eax, esi
  00018	03 d8		 add	 ebx, eax
  0001a	3b c3		 cmp	 eax, ebx
  0001c	73 07		 jae	 SHORT $LN6@underflow

; 177  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  0001e	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx
  00023	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00024	c3		 ret	 0
$LN6@underflow:

; 178  : 		else if (_Mystate & _Noread || _Mysb::pptr() == 0
; 179  : 			|| _Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr())

  00025	f6 41 40 04	 test	 BYTE PTR [ecx+64], 4
  00029	75 2f		 jne	 SHORT $LN3@underflow
  0002b	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0002e	8b 00		 mov	 eax, DWORD PTR [eax]
  00030	85 c0		 test	 eax, eax
  00032	74 26		 je	 SHORT $LN3@underflow
  00034	3b c6		 cmp	 eax, esi
  00036	77 05		 ja	 SHORT $LN4@underflow
  00038	39 71 3c	 cmp	 DWORD PTR [ecx+60], esi
  0003b	76 1d		 jbe	 SHORT $LN3@underflow
$LN4@underflow:

; 181  : 		else
; 182  : 			{	// extend read buffer into written area, then return buffered
; 183  : 			if (_Seekhigh < _Mysb::pptr())

  0003d	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  00040	73 03		 jae	 SHORT $LN1@underflow

; 184  : 				_Seekhigh = _Mysb::pptr();

  00042	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN1@underflow:

; 185  : 			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);

  00045	8b 12		 mov	 edx, DWORD PTR [edx]
  00047	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0004a	2b c2		 sub	 eax, edx
  0004c	89 07		 mov	 DWORD PTR [edi], eax

; 186  : 			return (_Traits::to_int_type(*_Mysb::gptr()));

  0004e	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00051	8b 11		 mov	 edx, DWORD PTR [ecx]
  00053	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00056	5f		 pop	 edi
  00057	5b		 pop	 ebx
  00058	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00059	c3		 ret	 0
$LN3@underflow:
  0005a	5f		 pop	 edi
  0005b	5b		 pop	 ebx

; 180  : 			return (_Traits::eof());	// can't read, fail

  0005c	83 c8 ff	 or	 eax, -1
  0005f	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00060	c3		 ret	 0
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Way$ = 16						; size = 4
__Which$ = 20						; size = 4
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff, COMDAT
; _this$ = ecx

; 194  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  00000	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00003	8b 02		 mov	 eax, DWORD PTR [edx]
  00005	85 c0		 test	 eax, eax
  00007	74 08		 je	 SHORT $LN20@seekoff
  00009	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  0000c	73 03		 jae	 SHORT $LN20@seekoff

; 195  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  0000e	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN20@seekoff:
  00011	53		 push	 ebx

; 196  : 
; 197  : 		if (_Which & ios_base::in && _Mysb::gptr() != 0)

  00012	8a 5c 24 14	 mov	 bl, BYTE PTR __Which$[esp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	f6 c3 01	 test	 bl, 1
  0001b	0f 84 a8 00 00
	00		 je	 $LN19@seekoff
  00021	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00024	8b 30		 mov	 esi, DWORD PTR [eax]
  00026	85 f6		 test	 esi, esi
  00028	0f 84 9b 00 00
	00		 je	 $LN19@seekoff

; 198  : 			{	// position within read buffer
; 199  : 			if (_Way == ios_base::end)

  0002e	8b 44 24 18	 mov	 eax, DWORD PTR __Way$[esp+8]
  00032	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  00038	83 f8 02	 cmp	 eax, 2
  0003b	75 10		 jne	 SHORT $LN18@seekoff

; 200  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  0003d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00040	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00043	2b 02		 sub	 eax, DWORD PTR [edx]
  00045	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
  00049	03 d0		 add	 edx, eax

; 201  : 			else if (_Way == ios_base::cur

  0004b	eb 25		 jmp	 SHORT $LN14@seekoff
$LN18@seekoff:

; 202  : 				&& (_Which & ios_base::out) == 0)

  0004d	83 f8 01	 cmp	 eax, 1
  00050	75 14		 jne	 SHORT $LN16@seekoff
  00052	f6 c3 02	 test	 bl, 2
  00055	75 13		 jne	 SHORT $LN73@seekoff

; 203  : 				_Off += (off_type)(_Mysb::gptr() - _Mysb::eback());

  00057	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0005a	8b c6		 mov	 eax, esi
  0005c	2b 02		 sub	 eax, DWORD PTR [edx]
  0005e	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
  00062	03 d0		 add	 edx, eax
  00064	eb 0c		 jmp	 SHORT $LN14@seekoff
$LN16@seekoff:

; 204  : 			else if (_Way != ios_base::beg)

  00066	85 c0		 test	 eax, eax
  00068	74 04		 je	 SHORT $LN74@seekoff
$LN73@seekoff:

; 205  : 				_Off = _BADOFF;

  0006a	8b d7		 mov	 edx, edi
  0006c	eb 04		 jmp	 SHORT $LN14@seekoff
$LN74@seekoff:
  0006e	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
$LN14@seekoff:

; 206  : 
; 207  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00072	85 d2		 test	 edx, edx
  00074	0f 8c b9 00 00
	00		 jl	 $LN3@seekoff
  0007a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0007d	8b 00		 mov	 eax, DWORD PTR [eax]
  0007f	55		 push	 ebp
  00080	8b 69 3c	 mov	 ebp, DWORD PTR [ecx+60]
  00083	2b e8		 sub	 ebp, eax
  00085	3b d5		 cmp	 edx, ebp
  00087	5d		 pop	 ebp
  00088	0f 8f a5 00 00
	00		 jg	 $LN3@seekoff

; 208  : 				{	// change read position
; 209  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  0008e	2b c6		 sub	 eax, esi
  00090	8b 71 30	 mov	 esi, DWORD PTR [ecx+48]
  00093	03 c2		 add	 eax, edx
  00095	29 06		 sub	 DWORD PTR [esi], eax
  00097	8b 71 20	 mov	 esi, DWORD PTR [ecx+32]
  0009a	01 06		 add	 DWORD PTR [esi], eax

; 210  : 				if (_Which & ios_base::out && _Mysb::pptr() != 0)

  0009c	f6 c3 02	 test	 bl, 2
  0009f	0f 84 98 00 00
	00		 je	 $LN77@seekoff
  000a5	8b 79 24	 mov	 edi, DWORD PTR [ecx+36]
  000a8	8b 1f		 mov	 ebx, DWORD PTR [edi]
  000aa	85 db		 test	 ebx, ebx
  000ac	0f 84 8b 00 00
	00		 je	 $LN77@seekoff

; 211  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 212  : 						_Mysb::epptr());	// change write position to match

  000b2	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  000b5	8b 30		 mov	 esi, DWORD PTR [eax]
  000b7	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  000ba	8b 00		 mov	 eax, DWORD PTR [eax]
  000bc	03 c3		 add	 eax, ebx
  000be	89 37		 mov	 DWORD PTR [edi], esi
  000c0	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  000c3	2b c6		 sub	 eax, esi
  000c5	89 01		 mov	 DWORD PTR [ecx], eax

; 213  : 				}
; 214  : 			else

  000c7	eb 74		 jmp	 SHORT $LN77@seekoff
$LN19@seekoff:

; 215  : 				_Off = _BADOFF;
; 216  : 			}
; 217  : 		else if (_Which & ios_base::out && _Mysb::pptr() != 0)

  000c9	f6 c3 02	 test	 bl, 2
  000cc	74 69		 je	 SHORT $LN9@seekoff
  000ce	8b 32		 mov	 esi, DWORD PTR [edx]
  000d0	85 f6		 test	 esi, esi
  000d2	74 63		 je	 SHORT $LN9@seekoff

; 218  : 			{	// position within write buffer
; 219  : 			if (_Way == ios_base::end)

  000d4	8b 44 24 18	 mov	 eax, DWORD PTR __Way$[esp+8]
  000d8	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  000de	83 f8 02	 cmp	 eax, 2
  000e1	75 10		 jne	 SHORT $LN8@seekoff

; 220  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  000e3	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000e6	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  000e9	2b 02		 sub	 eax, DWORD PTR [edx]
  000eb	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
  000ef	03 d0		 add	 edx, eax
  000f1	eb 1e		 jmp	 SHORT $LN4@seekoff
$LN8@seekoff:

; 221  : 			else if (_Way == ios_base::cur)

  000f3	83 f8 01	 cmp	 eax, 1
  000f6	75 0f		 jne	 SHORT $LN6@seekoff

; 222  : 				_Off += (off_type)(_Mysb::pptr() - _Mysb::eback());

  000f8	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000fb	8b c6		 mov	 eax, esi
  000fd	2b 02		 sub	 eax, DWORD PTR [edx]
  000ff	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
  00103	03 d0		 add	 edx, eax
  00105	eb 0a		 jmp	 SHORT $LN4@seekoff
$LN6@seekoff:

; 223  : 			else if (_Way != ios_base::beg)
; 224  : 				_Off = _BADOFF;

  00107	8b d7		 mov	 edx, edi
  00109	85 c0		 test	 eax, eax
  0010b	75 04		 jne	 SHORT $LN4@seekoff
  0010d	8b 54 24 14	 mov	 edx, DWORD PTR __Off$[esp+8]
$LN4@seekoff:

; 225  : 
; 226  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00111	85 d2		 test	 edx, edx
  00113	7c 1e		 jl	 SHORT $LN3@seekoff
  00115	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00118	8b 00		 mov	 eax, DWORD PTR [eax]
  0011a	8b 59 3c	 mov	 ebx, DWORD PTR [ecx+60]
  0011d	2b d8		 sub	 ebx, eax
  0011f	3b d3		 cmp	 edx, ebx
  00121	7f 10		 jg	 SHORT $LN3@seekoff

; 227  : 				_Mysb::pbump((int)(_Mysb::eback()
; 228  : 					- _Mysb::pptr() + _Off));	// change write position

  00123	2b c6		 sub	 eax, esi
  00125	8b 71 34	 mov	 esi, DWORD PTR [ecx+52]
  00128	03 c2		 add	 eax, edx
  0012a	29 06		 sub	 DWORD PTR [esi], eax
  0012c	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0012f	01 01		 add	 DWORD PTR [ecx], eax

; 229  : 			else

  00131	eb 0a		 jmp	 SHORT $LN77@seekoff
$LN3@seekoff:

; 230  : 				_Off = _BADOFF;

  00133	8b d7		 mov	 edx, edi

; 231  : 			}
; 232  : 		else

  00135	eb 06		 jmp	 SHORT $LN77@seekoff
$LN9@seekoff:

; 233  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  00137	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
$LN77@seekoff:

; 234  : 		return (pos_type(_Off));

  0013d	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  00141	5f		 pop	 edi
  00142	33 c9		 xor	 ecx, ecx
  00144	5e		 pop	 esi
  00145	89 10		 mov	 DWORD PTR [eax], edx
  00147	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0014a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0014d	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00150	5b		 pop	 ebx

; 235  : 		}

  00151	c2 10 00	 ret	 16			; 00000010H
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@JHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Ptr$ = 12						; size = 24
__Mode$ = 36						; size = 4
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos, COMDAT
; _this$ = ecx

; 240  : 		streamoff _Off = (streamoff)_Ptr;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Ptr$[esp+4]
  00008	55		 push	 ebp
  00009	57		 push	 edi

; 241  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  0000a	8b 79 24	 mov	 edi, DWORD PTR [ecx+36]
  0000d	03 d0		 add	 edx, eax
  0000f	8b 07		 mov	 eax, DWORD PTR [edi]
  00011	85 c0		 test	 eax, eax
  00013	74 08		 je	 SHORT $LN12@seekpos
  00015	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  00018	73 03		 jae	 SHORT $LN12@seekpos

; 242  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  0001a	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN12@seekpos:

; 243  : 
; 244  : 		if (_Off == _BADOFF)

  0001d	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  00023	3b d5		 cmp	 edx, ebp
  00025	0f 84 8a 00 00
	00		 je	 $LN56@seekpos
  0002b	53		 push	 ebx

; 245  : 			;
; 246  : 		else if (_Mode & ios_base::in && _Mysb::gptr() != 0)

  0002c	8a 5c 24 2c	 mov	 bl, BYTE PTR __Mode$[esp+8]
  00030	56		 push	 esi
  00031	f6 c3 01	 test	 bl, 1
  00034	74 4e		 je	 SHORT $LN55@seekpos
  00036	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00039	8b 30		 mov	 esi, DWORD PTR [eax]
  0003b	85 f6		 test	 esi, esi
  0003d	74 45		 je	 SHORT $LN55@seekpos

; 247  : 			{	// position within read buffer
; 248  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  0003f	85 d2		 test	 edx, edx
  00041	7c 6e		 jl	 SHORT $LN4@seekpos
  00043	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00046	8b 00		 mov	 eax, DWORD PTR [eax]
  00048	8b 79 3c	 mov	 edi, DWORD PTR [ecx+60]
  0004b	2b f8		 sub	 edi, eax
  0004d	3b d7		 cmp	 edx, edi
  0004f	7f 60		 jg	 SHORT $LN4@seekpos

; 249  : 				{	// change read position
; 250  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  00051	2b c6		 sub	 eax, esi
  00053	8b 71 30	 mov	 esi, DWORD PTR [ecx+48]
  00056	03 c2		 add	 eax, edx
  00058	29 06		 sub	 DWORD PTR [esi], eax
  0005a	8b 71 20	 mov	 esi, DWORD PTR [ecx+32]
  0005d	01 06		 add	 DWORD PTR [esi], eax

; 251  : 				if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  0005f	f6 c3 02	 test	 bl, 2
  00062	74 4f		 je	 SHORT $LN57@seekpos
  00064	8b 79 24	 mov	 edi, DWORD PTR [ecx+36]
  00067	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00069	85 db		 test	 ebx, ebx
  0006b	74 46		 je	 SHORT $LN57@seekpos

; 252  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 253  : 						_Mysb::epptr());	// change write position to match

  0006d	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00070	8b 30		 mov	 esi, DWORD PTR [eax]
  00072	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00075	8b 00		 mov	 eax, DWORD PTR [eax]
  00077	03 c3		 add	 eax, ebx
  00079	89 37		 mov	 DWORD PTR [edi], esi
  0007b	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  0007e	2b c6		 sub	 eax, esi
  00080	89 01		 mov	 DWORD PTR [ecx], eax

; 254  : 				}
; 255  : 			else
; 256  : 				_Off = _BADOFF;

  00082	eb 2f		 jmp	 SHORT $LN57@seekpos
$LN55@seekpos:

; 257  : 			}
; 258  : 		else if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  00084	f6 c3 02	 test	 bl, 2
  00087	74 28		 je	 SHORT $LN4@seekpos
  00089	8b 3f		 mov	 edi, DWORD PTR [edi]
  0008b	85 ff		 test	 edi, edi
  0008d	74 22		 je	 SHORT $LN4@seekpos

; 259  : 			{	// position within write buffer
; 260  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  0008f	85 d2		 test	 edx, edx
  00091	7c 1e		 jl	 SHORT $LN4@seekpos
  00093	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00096	8b 00		 mov	 eax, DWORD PTR [eax]
  00098	8b 71 3c	 mov	 esi, DWORD PTR [ecx+60]
  0009b	2b f0		 sub	 esi, eax
  0009d	3b d6		 cmp	 edx, esi
  0009f	7f 10		 jg	 SHORT $LN4@seekpos

; 261  : 				_Mysb::pbump((int)(_Mysb::eback()
; 262  : 					- _Mysb::pptr() + _Off));	// change write position

  000a1	8b 71 34	 mov	 esi, DWORD PTR [ecx+52]
  000a4	2b c7		 sub	 eax, edi
  000a6	03 c2		 add	 eax, edx
  000a8	29 06		 sub	 DWORD PTR [esi], eax
  000aa	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000ad	01 01		 add	 DWORD PTR [ecx], eax

; 263  : 			else

  000af	eb 02		 jmp	 SHORT $LN57@seekpos
$LN4@seekpos:

; 264  : 				_Off = _BADOFF;
; 265  : 			}
; 266  : 		else
; 267  : 			_Off = _BADOFF;

  000b1	8b d5		 mov	 edx, ebp
$LN57@seekpos:
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx
$LN56@seekpos:

; 268  : 		return (streampos(_Off));

  000b5	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  000b9	33 c9		 xor	 ecx, ecx
  000bb	5f		 pop	 edi
  000bc	89 10		 mov	 DWORD PTR [eax], edx
  000be	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000c1	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  000c4	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  000c7	5d		 pop	 ebp

; 269  : 		}

  000c8	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
_TEXT	ENDS
PUBLIC	??D?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBEABKXZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??D?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBEABKXZ
_TEXT	SEGMENT
??D?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBEABKXZ PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator*, COMDAT
; _this$ = ecx

; 211  : 			{	// return designated value

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 212  : 
; 213  :  #if _HAS_ITERATOR_DEBUGGING
; 214  : 			if (this->_Mycont == 0
; 215  : 				|| _Ptr == 0
; 216  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 217  : 				{
; 218  : 				_DEBUG_ERROR("list iterator not dereferencable");
; 219  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 220  : 				}
; 221  :  #else
; 222  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN23@operator@14
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 223  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN17@operator@14
$LN23@operator@14:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN18@operator@14
$LN17@operator@14:
  00018	33 c0		 xor	 eax, eax
$LN18@operator@14:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00020	75 05		 jne	 SHORT $LN3@operator@14
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@14:

; 224  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 225  : 
; 226  : 			return (_Myval(_Ptr));

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	83 c0 08	 add	 eax, 8
  0002d	5e		 pop	 esi

; 227  : 			}

  0002e	c3		 ret	 0
??D?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBEABKXZ ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator*
_TEXT	ENDS
PUBLIC	??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
PUBLIC	??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekpos
EXTRN	??_E?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD 00H ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$alloca'
	DB	'tor@_W@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD 00H ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD FLAT:??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
	DD	FLAT:?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
	DD	FLAT:?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ
	DD	FLAT:?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z
	DD	FLAT:?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z
	DD	FLAT:?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z
	DD	FLAT:?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z
	DD	FLAT:?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z
	DD	FLAT:?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@

; 43   : 		_Tidy();

  00009	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy

; 44   : 		}

  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?eq@?$char_traits@_W@std@@SA_NAB_W0@Z		; std::char_traits<wchar_t>::eq
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?eq@?$char_traits@_W@std@@SA_NAB_W0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq@?$char_traits@_W@std@@SA_NAB_W0@Z PROC		; std::char_traits<wchar_t>::eq, COMDAT

; 315  : 		return (_Left == _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	66 8b 08	 mov	 cx, WORD PTR [eax]
  00007	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000b	33 c0		 xor	 eax, eax
  0000d	66 3b 0a	 cmp	 cx, WORD PTR [edx]
  00010	0f 94 c0	 sete	 al

; 316  : 		}

  00013	c3		 ret	 0
?eq@?$char_traits@_W@std@@SA_NAB_W0@Z ENDP		; std::char_traits<wchar_t>::eq
_TEXT	ENDS
PUBLIC	?not_eof@?$char_traits@_W@std@@SAGABG@Z		; std::char_traits<wchar_t>::not_eof
; Function compile flags: /Ogtpy
;	COMDAT ?not_eof@?$char_traits@_W@std@@SAGABG@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?not_eof@?$char_traits@_W@std@@SAGABG@Z PROC		; std::char_traits<wchar_t>::not_eof, COMDAT

; 407  : 		return (_Meta != eof() ? _Meta : !eof());

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Meta$[esp-4]
  00004	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00007	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0000c	66 3b c1	 cmp	 ax, cx
  0000f	74 04		 je	 SHORT $LN3@not_eof
  00011	0f b7 c0	 movzx	 eax, ax

; 408  : 		}

  00014	c3		 ret	 0
$LN3@not_eof:

; 407  : 		return (_Meta != eof() ? _Meta : !eof());

  00015	33 c0		 xor	 eax, eax

; 408  : 		}

  00017	c3		 ret	 0
?not_eof@?$char_traits@_W@std@@SAGABG@Z ENDP		; std::char_traits<wchar_t>::not_eof
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 2
?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::pbackfail, COMDAT
; _this$ = ecx

; 157  : 		if (_Mysb::gptr() == 0
; 158  : 			|| _Mysb::gptr() <= _Mysb::eback()
; 159  : 			|| !_Traits::eq_int_type(_Traits::eof(), _Meta)
; 160  : 			&& !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
; 161  : 			&& _Mystate & _Constant)

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]
  00005	85 c0		 test	 eax, eax
  00007	74 4c		 je	 SHORT $LN3@pbackfail@2
  00009	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0000c	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000e	76 45		 jbe	 SHORT $LN3@pbackfail@2
  00010	66 8b 54 24 04	 mov	 dx, WORD PTR __Meta$[esp-4]
  00015	56		 push	 esi
  00016	be ff ff 00 00	 mov	 esi, 65535		; 0000ffffH
  0001b	66 3b f2	 cmp	 si, dx
  0001e	5e		 pop	 esi
  0001f	74 0c		 je	 SHORT $LN4@pbackfail@2
  00021	66 3b 50 fe	 cmp	 dx, WORD PTR [eax-2]
  00025	74 06		 je	 SHORT $LN4@pbackfail@2
  00027	f6 41 40 02	 test	 BYTE PTR [ecx+64], 2
  0002b	75 28		 jne	 SHORT $LN3@pbackfail@2
$LN4@pbackfail@2:

; 163  : 		else
; 164  : 			{	// back up one position and store put-back character
; 165  : 			_Mysb::gbump(-1);

  0002d	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00030	ff 00		 inc	 DWORD PTR [eax]
  00032	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00035	83 00 fe	 add	 DWORD PTR [eax], -2	; fffffffeH

; 166  : 			if (!_Traits::eq_int_type(_Traits::eof(), _Meta))

  00038	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0003d	66 3b c2	 cmp	 ax, dx
  00040	74 0e		 je	 SHORT $LN37@pbackfail@2

; 167  : 				*_Mysb::gptr() = _Traits::to_char_type(_Meta);

  00042	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00045	8b 01		 mov	 eax, DWORD PTR [ecx]
  00047	66 89 10	 mov	 WORD PTR [eax], dx

; 168  : 			return (_Traits::not_eof(_Meta));

  0004a	0f b7 c2	 movzx	 eax, dx

; 169  : 			}
; 170  : 		}

  0004d	c2 04 00	 ret	 4

; 168  : 			return (_Traits::not_eof(_Meta));

$LN37@pbackfail@2:
  00050	33 c0		 xor	 eax, eax

; 169  : 			}
; 170  : 		}

  00052	c2 04 00	 ret	 4
$LN3@pbackfail@2:

; 162  : 			return (_Traits::eof());	// can't put back, fail

  00055	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 169  : 			}
; 170  : 		}

  0005a	c2 04 00	 ret	 4
?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::pbackfail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ
_TEXT	SEGMENT
?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::underflow, COMDAT
; _this$ = ecx

; 174  : 		if (_Mysb::gptr() == 0)

  00000	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00003	56		 push	 esi
  00004	8b 32		 mov	 esi, DWORD PTR [edx]
  00006	85 f6		 test	 esi, esi
  00008	75 07		 jne	 SHORT $LN8@underflow@2

; 175  : 			return (_Traits::eof());	// no character buffer, fail

  0000a	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0000f	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00010	c3		 ret	 0
$LN8@underflow@2:
  00011	53		 push	 ebx
  00012	57		 push	 edi

; 176  : 		else if (_Mysb::gptr() < _Mysb::egptr())

  00013	8b 79 30	 mov	 edi, DWORD PTR [ecx+48]
  00016	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00018	8b c6		 mov	 eax, esi
  0001a	8d 1c 58	 lea	 ebx, DWORD PTR [eax+ebx*2]
  0001d	3b c3		 cmp	 eax, ebx
  0001f	73 07		 jae	 SHORT $LN6@underflow@2

; 177  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  00021	66 8b 06	 mov	 ax, WORD PTR [esi]
  00024	5f		 pop	 edi
  00025	5b		 pop	 ebx
  00026	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00027	c3		 ret	 0
$LN6@underflow@2:

; 178  : 		else if (_Mystate & _Noread || _Mysb::pptr() == 0
; 179  : 			|| _Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr())

  00028	f6 41 40 04	 test	 BYTE PTR [ecx+64], 4
  0002c	75 31		 jne	 SHORT $LN3@underflow@2
  0002e	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00031	8b 00		 mov	 eax, DWORD PTR [eax]
  00033	85 c0		 test	 eax, eax
  00035	74 28		 je	 SHORT $LN3@underflow@2
  00037	3b c6		 cmp	 eax, esi
  00039	77 05		 ja	 SHORT $LN4@underflow@2
  0003b	39 71 3c	 cmp	 DWORD PTR [ecx+60], esi
  0003e	76 1f		 jbe	 SHORT $LN3@underflow@2
$LN4@underflow@2:

; 181  : 		else
; 182  : 			{	// extend read buffer into written area, then return buffered
; 183  : 			if (_Seekhigh < _Mysb::pptr())

  00040	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  00043	73 03		 jae	 SHORT $LN1@underflow@2

; 184  : 				_Seekhigh = _Mysb::pptr();

  00045	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN1@underflow@2:

; 185  : 			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);

  00048	8b 12		 mov	 edx, DWORD PTR [edx]
  0004a	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0004d	2b c2		 sub	 eax, edx
  0004f	d1 f8		 sar	 eax, 1
  00051	89 07		 mov	 DWORD PTR [edi], eax

; 186  : 			return (_Traits::to_int_type(*_Mysb::gptr()));

  00053	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00056	8b 11		 mov	 edx, DWORD PTR [ecx]
  00058	66 8b 02	 mov	 ax, WORD PTR [edx]
  0005b	5f		 pop	 edi
  0005c	5b		 pop	 ebx
  0005d	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  0005e	c3		 ret	 0
$LN3@underflow@2:
  0005f	5f		 pop	 edi
  00060	5b		 pop	 ebx

; 180  : 			return (_Traits::eof());	// can't read, fail

  00061	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00066	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00067	c3		 ret	 0
?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::underflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Way$ = 16						; size = 4
__Which$ = 20						; size = 4
?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekoff, COMDAT
; _this$ = ecx

; 193  : 		{	// change position by _Off, according to _Way, _Mode

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 194  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  00003	8b 71 24	 mov	 esi, DWORD PTR [ecx+36]
  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	57		 push	 edi
  00009	85 c0		 test	 eax, eax
  0000b	74 08		 je	 SHORT $LN20@seekoff@2
  0000d	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  00010	73 03		 jae	 SHORT $LN20@seekoff@2

; 195  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  00012	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN20@seekoff@2:

; 196  : 
; 197  : 		if (_Which & ios_base::in && _Mysb::gptr() != 0)

  00015	8a 5c 24 20	 mov	 bl, BYTE PTR __Which$[esp+12]
  00019	f6 c3 01	 test	 bl, 1
  0001c	0f 84 b5 00 00
	00		 je	 $LN19@seekoff@2
  00022	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00025	8b 10		 mov	 edx, DWORD PTR [eax]
  00027	85 d2		 test	 edx, edx
  00029	0f 84 a8 00 00
	00		 je	 $LN19@seekoff@2

; 198  : 			{	// position within read buffer
; 199  : 			if (_Way == ios_base::end)

  0002f	8b 44 24 1c	 mov	 eax, DWORD PTR __Way$[esp+12]
  00033	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  00039	83 f8 02	 cmp	 eax, 2
  0003c	75 12		 jne	 SHORT $LN18@seekoff@2

; 200  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  0003e	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00041	8b 69 3c	 mov	 ebp, DWORD PTR [ecx+60]
  00044	2b 28		 sub	 ebp, DWORD PTR [eax]
  00046	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
  0004a	d1 fd		 sar	 ebp, 1
  0004c	03 f5		 add	 esi, ebp

; 201  : 			else if (_Way == ios_base::cur

  0004e	eb 27		 jmp	 SHORT $LN14@seekoff@2
$LN18@seekoff@2:

; 202  : 				&& (_Which & ios_base::out) == 0)

  00050	83 f8 01	 cmp	 eax, 1
  00053	75 16		 jne	 SHORT $LN16@seekoff@2
  00055	f6 c3 02	 test	 bl, 2
  00058	75 15		 jne	 SHORT $LN71@seekoff@2

; 203  : 				_Off += (off_type)(_Mysb::gptr() - _Mysb::eback());

  0005a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0005d	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
  00061	8b ea		 mov	 ebp, edx
  00063	2b 28		 sub	 ebp, DWORD PTR [eax]
  00065	d1 fd		 sar	 ebp, 1
  00067	03 f5		 add	 esi, ebp
  00069	eb 0c		 jmp	 SHORT $LN14@seekoff@2
$LN16@seekoff@2:

; 204  : 			else if (_Way != ios_base::beg)

  0006b	85 c0		 test	 eax, eax
  0006d	74 04		 je	 SHORT $LN72@seekoff@2
$LN71@seekoff@2:

; 205  : 				_Off = _BADOFF;

  0006f	8b f7		 mov	 esi, edi
  00071	eb 04		 jmp	 SHORT $LN14@seekoff@2
$LN72@seekoff@2:
  00073	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
$LN14@seekoff@2:

; 206  : 
; 207  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00077	85 f6		 test	 esi, esi
  00079	0f 8c cd 00 00
	00		 jl	 $LN3@seekoff@2
  0007f	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00082	8b 00		 mov	 eax, DWORD PTR [eax]
  00084	8b 69 3c	 mov	 ebp, DWORD PTR [ecx+60]
  00087	2b e8		 sub	 ebp, eax
  00089	d1 fd		 sar	 ebp, 1
  0008b	3b f5		 cmp	 esi, ebp
  0008d	0f 8f b9 00 00
	00		 jg	 $LN3@seekoff@2

; 208  : 				{	// change read position
; 209  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  00093	2b c2		 sub	 eax, edx
  00095	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00098	d1 f8		 sar	 eax, 1
  0009a	03 c6		 add	 eax, esi
  0009c	29 02		 sub	 DWORD PTR [edx], eax
  0009e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000a1	03 c0		 add	 eax, eax
  000a3	01 02		 add	 DWORD PTR [edx], eax

; 210  : 				if (_Which & ios_base::out && _Mysb::pptr() != 0)

  000a5	f6 c3 02	 test	 bl, 2
  000a8	0f 84 a8 00 00
	00		 je	 $LN75@seekoff@2
  000ae	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000b1	8b 02		 mov	 eax, DWORD PTR [edx]
  000b3	85 c0		 test	 eax, eax
  000b5	0f 84 9b 00 00
	00		 je	 $LN75@seekoff@2

; 211  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 212  : 						_Mysb::epptr());	// change write position to match

  000bb	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  000be	8b 12		 mov	 edx, DWORD PTR [edx]
  000c0	8d 04 50	 lea	 eax, DWORD PTR [eax+edx*2]
  000c3	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000c6	50		 push	 eax
  000c7	8b 02		 mov	 eax, DWORD PTR [edx]
  000c9	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000cc	50		 push	 eax
  000cd	8b 02		 mov	 eax, DWORD PTR [edx]
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp

; 213  : 				}
; 214  : 			else

  000d5	eb 7f		 jmp	 SHORT $LN75@seekoff@2
$LN19@seekoff@2:

; 215  : 				_Off = _BADOFF;
; 216  : 			}
; 217  : 		else if (_Which & ios_base::out && _Mysb::pptr() != 0)

  000d7	f6 c3 02	 test	 bl, 2
  000da	74 74		 je	 SHORT $LN9@seekoff@2
  000dc	8b 16		 mov	 edx, DWORD PTR [esi]
  000de	85 d2		 test	 edx, edx
  000e0	74 6e		 je	 SHORT $LN9@seekoff@2

; 218  : 			{	// position within write buffer
; 219  : 			if (_Way == ios_base::end)

  000e2	8b 44 24 1c	 mov	 eax, DWORD PTR __Way$[esp+12]
  000e6	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  000ec	83 f8 02	 cmp	 eax, 2
  000ef	75 12		 jne	 SHORT $LN8@seekoff@2

; 220  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  000f1	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  000f4	8b 59 3c	 mov	 ebx, DWORD PTR [ecx+60]
  000f7	2b 18		 sub	 ebx, DWORD PTR [eax]
  000f9	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
  000fd	d1 fb		 sar	 ebx, 1
  000ff	03 f3		 add	 esi, ebx
  00101	eb 20		 jmp	 SHORT $LN4@seekoff@2
$LN8@seekoff@2:

; 221  : 			else if (_Way == ios_base::cur)

  00103	83 f8 01	 cmp	 eax, 1
  00106	75 11		 jne	 SHORT $LN6@seekoff@2

; 222  : 				_Off += (off_type)(_Mysb::pptr() - _Mysb::eback());

  00108	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0010b	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
  0010f	8b da		 mov	 ebx, edx
  00111	2b 18		 sub	 ebx, DWORD PTR [eax]
  00113	d1 fb		 sar	 ebx, 1
  00115	03 f3		 add	 esi, ebx
  00117	eb 0a		 jmp	 SHORT $LN4@seekoff@2
$LN6@seekoff@2:

; 223  : 			else if (_Way != ios_base::beg)
; 224  : 				_Off = _BADOFF;

  00119	8b f7		 mov	 esi, edi
  0011b	85 c0		 test	 eax, eax
  0011d	75 04		 jne	 SHORT $LN4@seekoff@2
  0011f	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
$LN4@seekoff@2:

; 225  : 
; 226  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00123	85 f6		 test	 esi, esi
  00125	7c 25		 jl	 SHORT $LN3@seekoff@2
  00127	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0012a	8b 00		 mov	 eax, DWORD PTR [eax]
  0012c	8b 59 3c	 mov	 ebx, DWORD PTR [ecx+60]
  0012f	2b d8		 sub	 ebx, eax
  00131	d1 fb		 sar	 ebx, 1
  00133	3b f3		 cmp	 esi, ebx
  00135	7f 15		 jg	 SHORT $LN3@seekoff@2

; 227  : 				_Mysb::pbump((int)(_Mysb::eback()
; 228  : 					- _Mysb::pptr() + _Off));	// change write position

  00137	2b c2		 sub	 eax, edx
  00139	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0013c	d1 f8		 sar	 eax, 1
  0013e	03 c6		 add	 eax, esi
  00140	29 02		 sub	 DWORD PTR [edx], eax
  00142	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00145	8d 14 00	 lea	 edx, DWORD PTR [eax+eax]
  00148	01 11		 add	 DWORD PTR [ecx], edx

; 229  : 			else

  0014a	eb 0a		 jmp	 SHORT $LN75@seekoff@2
$LN3@seekoff@2:

; 230  : 				_Off = _BADOFF;

  0014c	8b f7		 mov	 esi, edi

; 231  : 			}
; 232  : 		else

  0014e	eb 06		 jmp	 SHORT $LN75@seekoff@2
$LN9@seekoff@2:

; 233  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  00150	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
$LN75@seekoff@2:

; 234  : 		return (pos_type(_Off));

  00156	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  0015a	5f		 pop	 edi
  0015b	89 30		 mov	 DWORD PTR [eax], esi
  0015d	5e		 pop	 esi
  0015e	33 c9		 xor	 ecx, ecx
  00160	5d		 pop	 ebp
  00161	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00164	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00167	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0016a	5b		 pop	 ebx

; 235  : 		}

  0016b	c2 10 00	 ret	 16			; 00000010H
?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekoff
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Ptr$ = 12						; size = 24
__Mode$ = 36						; size = 4
?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekpos, COMDAT
; _this$ = ecx

; 240  : 		streamoff _Off = (streamoff)_Ptr;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Ptr$[esp+4]
  00008	55		 push	 ebp
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 241  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  0000b	8b 79 24	 mov	 edi, DWORD PTR [ecx+36]
  0000e	8d 34 02	 lea	 esi, DWORD PTR [edx+eax]
  00011	8b 07		 mov	 eax, DWORD PTR [edi]
  00013	85 c0		 test	 eax, eax
  00015	74 08		 je	 SHORT $LN12@seekpos@2
  00017	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  0001a	73 03		 jae	 SHORT $LN12@seekpos@2

; 242  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  0001c	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN12@seekpos@2:

; 243  : 
; 244  : 		if (_Off == _BADOFF)

  0001f	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  00025	3b f5		 cmp	 esi, ebp
  00027	0f 84 99 00 00
	00		 je	 $LN54@seekpos@2
  0002d	53		 push	 ebx

; 245  : 			;
; 246  : 		else if (_Mode & ios_base::in && _Mysb::gptr() != 0)

  0002e	8a 5c 24 30	 mov	 bl, BYTE PTR __Mode$[esp+12]
  00032	f6 c3 01	 test	 bl, 1
  00035	74 59		 je	 SHORT $LN53@seekpos@2
  00037	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0003a	8b 10		 mov	 edx, DWORD PTR [eax]
  0003c	85 d2		 test	 edx, edx
  0003e	74 50		 je	 SHORT $LN53@seekpos@2

; 247  : 			{	// position within read buffer
; 248  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00040	85 f6		 test	 esi, esi
  00042	7c 7f		 jl	 SHORT $LN4@seekpos@2
  00044	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00047	8b 00		 mov	 eax, DWORD PTR [eax]
  00049	8b 79 3c	 mov	 edi, DWORD PTR [ecx+60]
  0004c	2b f8		 sub	 edi, eax
  0004e	d1 ff		 sar	 edi, 1
  00050	3b f7		 cmp	 esi, edi
  00052	7f 6f		 jg	 SHORT $LN4@seekpos@2

; 249  : 				{	// change read position
; 250  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  00054	2b c2		 sub	 eax, edx
  00056	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00059	d1 f8		 sar	 eax, 1
  0005b	03 c6		 add	 eax, esi
  0005d	29 02		 sub	 DWORD PTR [edx], eax
  0005f	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00062	03 c0		 add	 eax, eax
  00064	01 02		 add	 DWORD PTR [edx], eax

; 251  : 				if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  00066	f6 c3 02	 test	 bl, 2
  00069	74 5a		 je	 SHORT $LN55@seekpos@2
  0006b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0006e	8b 02		 mov	 eax, DWORD PTR [edx]
  00070	85 c0		 test	 eax, eax
  00072	74 51		 je	 SHORT $LN55@seekpos@2

; 252  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 253  : 						_Mysb::epptr());	// change write position to match

  00074	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00077	8b 12		 mov	 edx, DWORD PTR [edx]
  00079	8d 04 50	 lea	 eax, DWORD PTR [eax+edx*2]
  0007c	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0007f	50		 push	 eax
  00080	8b 02		 mov	 eax, DWORD PTR [edx]
  00082	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00085	50		 push	 eax
  00086	8b 02		 mov	 eax, DWORD PTR [edx]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp

; 254  : 				}
; 255  : 			else
; 256  : 				_Off = _BADOFF;

  0008e	eb 35		 jmp	 SHORT $LN55@seekpos@2
$LN53@seekpos@2:

; 257  : 			}
; 258  : 		else if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  00090	f6 c3 02	 test	 bl, 2
  00093	74 2e		 je	 SHORT $LN4@seekpos@2
  00095	8b 3f		 mov	 edi, DWORD PTR [edi]
  00097	85 ff		 test	 edi, edi
  00099	74 28		 je	 SHORT $LN4@seekpos@2

; 259  : 			{	// position within write buffer
; 260  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  0009b	85 f6		 test	 esi, esi
  0009d	7c 24		 jl	 SHORT $LN4@seekpos@2
  0009f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000a2	8b 02		 mov	 eax, DWORD PTR [edx]
  000a4	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  000a7	2b d0		 sub	 edx, eax
  000a9	d1 fa		 sar	 edx, 1
  000ab	3b f2		 cmp	 esi, edx
  000ad	7f 14		 jg	 SHORT $LN4@seekpos@2

; 261  : 				_Mysb::pbump((int)(_Mysb::eback()
; 262  : 					- _Mysb::pptr() + _Off));	// change write position

  000af	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  000b2	2b c7		 sub	 eax, edi
  000b4	d1 f8		 sar	 eax, 1
  000b6	03 c6		 add	 eax, esi
  000b8	29 02		 sub	 DWORD PTR [edx], eax
  000ba	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000bd	03 c0		 add	 eax, eax
  000bf	01 01		 add	 DWORD PTR [ecx], eax

; 263  : 			else

  000c1	eb 02		 jmp	 SHORT $LN55@seekpos@2
$LN4@seekpos@2:

; 264  : 				_Off = _BADOFF;
; 265  : 			}
; 266  : 		else
; 267  : 			_Off = _BADOFF;

  000c3	8b f5		 mov	 esi, ebp
$LN55@seekpos@2:
  000c5	5b		 pop	 ebx
$LN54@seekpos@2:

; 268  : 		return (streampos(_Off));

  000c6	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  000ca	5f		 pop	 edi
  000cb	33 c9		 xor	 ecx, ecx
  000cd	89 30		 mov	 DWORD PTR [eax], esi
  000cf	5e		 pop	 esi
  000d0	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000d3	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  000d6	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  000d9	5d		 pop	 ebp

; 269  : 		}

  000da	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekpos
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 fc	 lea	 esi, DWORD PTR [ecx-4]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0000c	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00014	50		 push	 eax
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  0001b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00020	83 c4 04	 add	 esp, 4
  00023	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00028	74 09		 je	 SHORT $LN13@scalar@11
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
$LN13@scalar@11:
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 fc	 lea	 esi, DWORD PTR [ecx-4]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0000c	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  00014	50		 push	 eax
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  0001b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00020	83 c4 04	 add	 esp, 4
  00023	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00028	74 09		 je	 SHORT $LN13@scalar@12
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
$LN13@scalar@12:
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 f8	 lea	 esi, DWORD PTR [ecx-8]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0000c	c7 44 02 f8 00
	00 00 00	 mov	 DWORD PTR [edx+eax-8], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00014	50		 push	 eax
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  0001b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00020	83 c4 04	 add	 esp, 4
  00023	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00028	74 09		 je	 SHORT $LN13@scalar@13
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
$LN13@scalar@13:
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@14
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@14:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 f8	 lea	 esi, DWORD PTR [ecx-8]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0000c	c7 44 02 f8 00
	00 00 00	 mov	 DWORD PTR [edx+eax-8], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00014	50		 push	 eax
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  0001b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00020	83 c4 04	 add	 esp, 4
  00023	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00028	74 09		 je	 SHORT $LN13@scalar@15
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
$LN13@scalar@15:
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@16
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@16:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_iostream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 f4	 lea	 esi, DWORD PTR [ecx-12]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0000c	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  00014	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00022	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00025	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00028	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00030	50		 push	 eax
  00031	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00037	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0003c	83 c4 04	 add	 esp, 4
  0003f	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00044	74 09		 je	 SHORT $LN17@scalar@17
  00046	56		 push	 esi
  00047	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004c	83 c4 04	 add	 esp, 4
$LN17@scalar@17:
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	c2 04 00	 ret	 4
??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_iostream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00009	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
  00015	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0001a	74 09		 je	 SHORT $LN7@scalar@18
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$LN7@scalar@18:
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	c2 04 00	 ret	 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 f4	 lea	 esi, DWORD PTR [ecx-12]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0000c	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
  00014	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  00022	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00025	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00028	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00030	50		 push	 eax
  00031	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00037	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0003c	83 c4 04	 add	 esp, 4
  0003f	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00044	74 09		 je	 SHORT $LN17@scalar@19
  00046	56		 push	 esi
  00047	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004c	83 c4 04	 add	 esp, 4
$LN17@scalar@19:
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	c2 04 00	 ret	 4
??_G?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  00009	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
  00015	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0001a	74 09		 je	 SHORT $LN7@scalar@20
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$LN7@scalar@20:
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	c2 04 00	 ret	 4
??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
tv206 = 12						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 1770 : 		{	// look for [_Ptr, _Ptr + _Count) beginnng at or after _Off

  00000	51		 push	 ecx

; 1771 : 
; 1772 :  #if _HAS_ITERATOR_DEBUGGING
; 1773 : 		if (_Count != 0)
; 1774 : 			_DEBUG_POINTER(_Ptr);
; 1775 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1776 : 
; 1777 : 		if (_Count == 0 && _Off <= _Mysize)

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Count$[esp]
  00005	8b 44 24 0c	 mov	 eax, DWORD PTR __Off$[esp]
  00009	89 0c 24	 mov	 DWORD PTR _this$[esp+4], ecx
  0000c	85 d2		 test	 edx, edx
  0000e	75 09		 jne	 SHORT $LN6@find
  00010	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]

; 1778 : 			return (_Off);	// null string always matches (if inside string)

  00013	0f 86 86 00 00
	00		 jbe	 $LN7@find
$LN6@find:
  00019	53		 push	 ebx
  0001a	55		 push	 ebp
  0001b	56		 push	 esi
  0001c	57		 push	 edi

; 1779 : 
; 1780 : 		size_type _Nm;
; 1781 : 		if (_Off < _Mysize && _Count <= (_Nm = _Mysize - _Off))

  0001d	8b 79 14	 mov	 edi, DWORD PTR [ecx+20]
  00020	3b c7		 cmp	 eax, edi
  00022	73 74		 jae	 SHORT $LN2@find
  00024	2b f8		 sub	 edi, eax
  00026	3b d7		 cmp	 edx, edi
  00028	77 6e		 ja	 SHORT $LN2@find

; 1782 : 			{	// room for match, look for it
; 1783 : 			const _Elem *_Uptr, *_Vptr;
; 1784 : 			for (_Nm -= _Count - 1, _Vptr = _Myptr() + _Off;

  0002a	be 01 00 00 00	 mov	 esi, 1
  0002f	2b f2		 sub	 esi, edx
  00031	03 fe		 add	 edi, esi
  00033	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00037	72 0b		 jb	 SHORT $LN11@find
  00039	83 c1 04	 add	 ecx, 4
  0003c	89 4c 24 1c	 mov	 DWORD PTR tv206[esp+16], ecx
  00040	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00042	eb 07		 jmp	 SHORT $LN12@find
$LN11@find:
  00044	83 c1 04	 add	 ecx, 4
  00047	89 4c 24 1c	 mov	 DWORD PTR tv206[esp+16], ecx
$LN12@find:

; 1785 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1786 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)

  0004b	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  0004f	8d 1c 01	 lea	 ebx, DWORD PTR [ecx+eax]
  00052	0f be 45 00	 movsx	 eax, BYTE PTR [ebp]
  00056	57		 push	 edi
  00057	50		 push	 eax
  00058	53		 push	 ebx
  00059	e8 00 00 00 00	 call	 _memchr
  0005e	8b f0		 mov	 esi, eax
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH
  00063	85 f6		 test	 esi, esi
  00065	74 31		 je	 SHORT $LN2@find
$LL4@find:

; 1787 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)

  00067	8b 4c 24 20	 mov	 ecx, DWORD PTR __Count$[esp+16]
  0006b	51		 push	 ecx
  0006c	55		 push	 ebp
  0006d	56		 push	 esi
  0006e	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH
  00076	85 c0		 test	 eax, eax
  00078	74 29		 je	 SHORT $LN20@find
  0007a	0f be 55 00	 movsx	 edx, BYTE PTR [ebp]
  0007e	2b de		 sub	 ebx, esi
  00080	8d 7c 1f ff	 lea	 edi, DWORD PTR [edi+ebx-1]
  00084	57		 push	 edi
  00085	52		 push	 edx
  00086	8d 5e 01	 lea	 ebx, DWORD PTR [esi+1]
  00089	53		 push	 ebx
  0008a	e8 00 00 00 00	 call	 _memchr
  0008f	8b f0		 mov	 esi, eax
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH
  00094	85 f6		 test	 esi, esi
  00096	75 cf		 jne	 SHORT $LL4@find
$LN2@find:
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5d		 pop	 ebp

; 1789 : 			}
; 1790 : 
; 1791 : 		return (npos);	// no match

  0009b	83 c8 ff	 or	 eax, -1
  0009e	5b		 pop	 ebx
$LN7@find:

; 1792 : 		}

  0009f	59		 pop	 ecx
  000a0	c2 0c 00	 ret	 12			; 0000000cH
$LN20@find:

; 1788 : 					return (_Uptr - _Myptr());	// found a match

  000a3	8b 44 24 10	 mov	 eax, DWORD PTR _this$[esp+20]
  000a7	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  000ab	8b 4c 24 1c	 mov	 ecx, DWORD PTR tv206[esp+16]
  000af	72 02		 jb	 SHORT $LN18@find
  000b1	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN18@find:
  000b3	5f		 pop	 edi
  000b4	8b c6		 mov	 eax, esi
  000b6	5e		 pop	 esi
  000b7	5d		 pop	 ebp
  000b8	2b c1		 sub	 eax, ecx
  000ba	5b		 pop	 ebx

; 1792 : 		}

  000bb	59		 pop	 ecx
  000bc	c2 0c 00	 ret	 12			; 0000000cH
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
PUBLIC	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
; Function compile flags: /Ogtpy
;	COMDAT ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
tv170 = 12						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind, COMDAT
; _this$ = ecx

; 1813 : 
; 1814 :  #if _HAS_ITERATOR_DEBUGGING
; 1815 : 		if (_Count != 0)
; 1816 : 			_DEBUG_POINTER(_Ptr);
; 1817 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1818 : 
; 1819 : 		if (_Count == 0)

  00000	8b 54 24 0c	 mov	 edx, DWORD PTR __Count$[esp-4]
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 1820 : 			return (_Off < _Mysize ? _Off : _Mysize);	// null always matches

  00007	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0000a	85 d2		 test	 edx, edx
  0000c	75 12		 jne	 SHORT $LN8@rfind
  0000e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Off$[esp]
  00012	3b c8		 cmp	 ecx, eax
  00014	0f 83 85 00 00
	00		 jae	 $LN9@rfind
  0001a	8b c1		 mov	 eax, ecx
  0001c	5f		 pop	 edi

; 1834 : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH
$LN8@rfind:
  00020	53		 push	 ebx
  00021	55		 push	 ebp
  00022	56		 push	 esi

; 1821 : 		if (_Count <= _Mysize)

  00023	3b d0		 cmp	 edx, eax
  00025	77 72		 ja	 SHORT $LN27@rfind

; 1822 : 			{	// room for match, look for it
; 1823 : 			const _Elem *_Uptr = _Myptr() +
; 1824 : 				(_Off < _Mysize - _Count ? _Off : _Mysize - _Count);

  00027	8b 4c 24 18	 mov	 ecx, DWORD PTR __Off$[esp+12]
  0002b	2b c2		 sub	 eax, edx
  0002d	3b c8		 cmp	 ecx, eax
  0002f	73 02		 jae	 SHORT $LN13@rfind
  00031	8b c1		 mov	 eax, ecx
$LN13@rfind:
  00033	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00036	89 4c 24 18	 mov	 DWORD PTR tv170[esp+12], ecx
  0003a	8d 5f 04	 lea	 ebx, DWORD PTR [edi+4]
  0003d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00040	72 04		 jb	 SHORT $LN17@rfind
  00042	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00044	eb 02		 jmp	 SHORT $LN18@rfind
$LN17@rfind:
  00046	8b cb		 mov	 ecx, ebx
$LN18@rfind:
  00048	8b 6c 24 14	 mov	 ebp, DWORD PTR __Ptr$[esp+12]
  0004c	8d 34 01	 lea	 esi, DWORD PTR [ecx+eax]
  0004f	90		 npad	 1
$LL6@rfind:

; 1825 : 			for (; ; --_Uptr)
; 1826 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1827 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)

  00050	8a 45 00	 mov	 al, BYTE PTR [ebp]
  00053	38 06		 cmp	 BYTE PTR [esi], al
  00055	75 0f		 jne	 SHORT $LN3@rfind
  00057	52		 push	 edx
  00058	55		 push	 ebp
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	85 c0		 test	 eax, eax
  00064	74 12		 je	 SHORT $LN26@rfind
$LN3@rfind:

; 1829 : 				else if (_Uptr == _Myptr())

  00066	8b cf		 mov	 ecx, edi
  00068	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  0006d	3b f0		 cmp	 esi, eax
  0006f	74 28		 je	 SHORT $LN27@rfind
  00071	8b 54 24 1c	 mov	 edx, DWORD PTR __Count$[esp+12]
  00075	4e		 dec	 esi
  00076	eb d8		 jmp	 SHORT $LL6@rfind
$LN26@rfind:

; 1828 : 					return (_Uptr - _Myptr());	// found a match

  00078	83 7c 24 18 10	 cmp	 DWORD PTR tv170[esp+12], 16 ; 00000010H
  0007d	72 0d		 jb	 SHORT $LN23@rfind
  0007f	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00081	8b c6		 mov	 eax, esi
  00083	5e		 pop	 esi
  00084	5d		 pop	 ebp
  00085	5b		 pop	 ebx
  00086	2b c1		 sub	 eax, ecx
  00088	5f		 pop	 edi

; 1834 : 		}

  00089	c2 0c 00	 ret	 12			; 0000000cH

; 1828 : 					return (_Uptr - _Myptr());	// found a match

$LN23@rfind:
  0008c	8b c6		 mov	 eax, esi
  0008e	5e		 pop	 esi
  0008f	5d		 pop	 ebp
  00090	8b cb		 mov	 ecx, ebx
  00092	5b		 pop	 ebx
  00093	2b c1		 sub	 eax, ecx
  00095	5f		 pop	 edi

; 1834 : 		}

  00096	c2 0c 00	 ret	 12			; 0000000cH
$LN27@rfind:
  00099	5e		 pop	 esi
  0009a	5d		 pop	 ebp

; 1830 : 					break;	// at beginning, no more chance for match
; 1831 : 			}
; 1832 : 
; 1833 : 		return (npos);	// no match

  0009b	83 c8 ff	 or	 eax, -1
  0009e	5b		 pop	 ebx
$LN9@rfind:
  0009f	5f		 pop	 edi

; 1834 : 		}

  000a0	c2 0c 00	 ret	 12			; 0000000cH
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
EXTRN	?_Xran@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xran
; Function compile flags: /Ogtpy
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
__Ptr$ = 16						; size = 4
__Count$ = 20						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 2038 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 2039 : 
; 2040 :  #if _HAS_ITERATOR_DEBUGGING
; 2041 : 		if (_Count != 0)
; 2042 : 			_DEBUG_POINTER(_Ptr);
; 2043 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2044 : 
; 2045 : 		if (_Mysize < _Off)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Off$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	39 6f 14	 cmp	 DWORD PTR [edi+20], ebp
  0000d	73 05		 jae	 SHORT $LN2@compare@2

; 2046 : 			_String_base::_Xran();	// _Off off end

  0000f	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN2@compare@2:

; 2047 : 		if (_Mysize - _Off < _N0)

  00014	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00017	8b 74 24 18	 mov	 esi, DWORD PTR __N0$[esp+12]
  0001b	2b c5		 sub	 eax, ebp
  0001d	3b c6		 cmp	 eax, esi
  0001f	73 02		 jae	 SHORT $LN1@compare@2

; 2048 : 			_N0 = _Mysize - _Off;	// trim _N0 to size

  00021	8b f0		 mov	 esi, eax
$LN1@compare@2:

; 2049 : 
; 2050 : 		size_type _Ans = _Traits::compare(_Myptr() + _Off, _Ptr,
; 2051 : 			_N0 < _Count ? _N0 : _Count);

  00023	8b 5c 24 20	 mov	 ebx, DWORD PTR __Count$[esp+12]
  00027	8b c6		 mov	 eax, esi
  00029	3b f3		 cmp	 esi, ebx
  0002b	72 02		 jb	 SHORT $LN6@compare@2
  0002d	8b c3		 mov	 eax, ebx
$LN6@compare@2:
  0002f	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  00033	72 05		 jb	 SHORT $LN13@compare@2
  00035	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  00038	eb 03		 jmp	 SHORT $LN14@compare@2
$LN13@compare@2:
  0003a	83 c7 04	 add	 edi, 4
$LN14@compare@2:
  0003d	50		 push	 eax
  0003e	8b 44 24 20	 mov	 eax, DWORD PTR __Ptr$[esp+16]
  00042	50		 push	 eax
  00043	03 fd		 add	 edi, ebp
  00045	57		 push	 edi
  00046	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2052 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2053 : 			: _N0 == _Count ? 0 : +1);

  0004e	85 c0		 test	 eax, eax
  00050	75 15		 jne	 SHORT $LN8@compare@2
  00052	3b f3		 cmp	 esi, ebx
  00054	73 0a		 jae	 SHORT $LN7@compare@2
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5d		 pop	 ebp
  00059	83 c8 ff	 or	 eax, -1
  0005c	5b		 pop	 ebx

; 2054 : 		}

  0005d	c2 10 00	 ret	 16			; 00000010H
$LN7@compare@2:

; 2052 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2053 : 			: _N0 == _Count ? 0 : +1);

  00060	33 c0		 xor	 eax, eax
  00062	3b f3		 cmp	 esi, ebx
  00064	0f 95 c0	 setne	 al
$LN8@compare@2:
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5d		 pop	 ebp
  0006a	5b		 pop	 ebx

; 2054 : 		}

  0006b	c2 10 00	 ret	 16			; 00000010H
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
; Function compile flags: /Ogtpy
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$ = ecx

; 2058 : 		return (_Mybase::_Alval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 2059 : 		}

  00004	c2 04 00	 ret	 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogtpy
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $LN5@Eos
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 2115 : 		}

  00014	c2 04 00	 ret	 4

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$LN5@Eos:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 2115 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 472  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 473  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 478  : 		{	// copy constructor

  00000	8b c1		 mov	 eax, ecx

; 479  : #if defined(_DEBUG)
; 480  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 481  : 			{
; 482  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 483  : 			}
; 484  : #endif
; 485  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z PROC ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 472  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 473  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z ENDP ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 478  : 		{	// copy constructor

  00000	8b c1		 mov	 eax, ecx

; 479  : #if defined(_DEBUG)
; 480  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 481  : 			{
; 482  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 483  : 			}
; 484  : #endif
; 485  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@_W@std@@QAEPA_WI@Z	; std::allocator<wchar_t>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z PROC		; std::allocator<wchar_t>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z ENDP		; std::allocator<wchar_t>::allocate
_TEXT	ENDS
PUBLIC	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputc, COMDAT
; _this$ = ecx

; 161  : 		return (0 < _Pnavail()
; 162  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 163  : 			: overflow(_Traits::to_int_type(_Ch)));

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 22		 je	 SHORT $LN3@sputc
  00008	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0000b	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0000e	7e 1a		 jle	 SHORT $LN3@sputc
  00010	8b c2		 mov	 eax, edx
  00012	ff 08		 dec	 DWORD PTR [eax]
  00014	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0001c	89 11		 mov	 DWORD PTR [ecx], edx
  0001e	8a 4c 24 04	 mov	 cl, BYTE PTR __Ch$[esp-4]
  00022	88 08		 mov	 BYTE PTR [eax], cl
  00024	0f b6 c1	 movzx	 eax, cl

; 164  : 		}

  00027	c2 04 00	 ret	 4
$LN3@sputc:

; 161  : 		return (0 < _Pnavail()
; 162  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 163  : 			: overflow(_Traits::to_int_type(_Ch)));

  0002a	0f b6 54 24 04	 movzx	 edx, BYTE PTR __Ch$[esp-4]
  0002f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00034	89 54 24 04	 mov	 DWORD PTR __Ch$[esp-4], edx
  00038	ff e0		 jmp	 eax
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputc
_TEXT	ENDS
PUBLIC	?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputc
; Function compile flags: /Ogtpy
;	COMDAT ?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 2
?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputc, COMDAT
; _this$ = ecx

; 161  : 		return (0 < _Pnavail()
; 162  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 163  : 			: overflow(_Traits::to_int_type(_Ch)));

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 23		 je	 SHORT $LN3@sputc@2
  00008	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0000b	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0000e	7e 1b		 jle	 SHORT $LN3@sputc@2
  00010	8b c2		 mov	 eax, edx
  00012	ff 08		 dec	 DWORD PTR [eax]
  00014	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  0001c	89 11		 mov	 DWORD PTR [ecx], edx
  0001e	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ch$[esp-4]
  00022	66 89 08	 mov	 WORD PTR [eax], cx
  00025	0f b7 c1	 movzx	 eax, cx

; 164  : 		}

  00028	c2 04 00	 ret	 4
$LN3@sputc@2:

; 161  : 		return (0 < _Pnavail()
; 162  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 163  : 			: overflow(_Traits::to_int_type(_Ch)));

  0002b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002d	8b 54 24 04	 mov	 edx, DWORD PTR __Ch$[esp-4]
  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00034	52		 push	 edx
  00035	ff d0		 call	 eax
  00037	0f b7 c0	 movzx	 eax, ax

; 164  : 		}

  0003a	c2 04 00	 ret	 4
?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputc
_TEXT	ENDS
PUBLIC	??1HostDevice@@QAE@XZ				; HostDevice::~HostDevice
PUBLIC	?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi

; 1124 : 		if (_Myfirst != 0)

  00004	8b 73 0c	 mov	 esi, DWORD PTR [ebx+12]
  00007	85 f6		 test	 esi, esi
  00009	74 26		 je	 SHORT $LN112@Tidy@4
  0000b	57		 push	 edi

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

  0000c	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
  0000f	3b f7		 cmp	 esi, edi
  00011	74 11		 je	 SHORT $LN10@Tidy@4
$LL12@Tidy@4:
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  0001a	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00020	3b f7		 cmp	 esi, edi
  00022	75 ef		 jne	 SHORT $LL12@Tidy@4
$LN10@Tidy@4:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  00024	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	83 c4 04	 add	 esp, 4
  00030	5f		 pop	 edi
$LN112@Tidy@4:
  00031	5e		 pop	 esi

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00032	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
  00039	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  00040	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
  00047	5b		 pop	 ebx

; 1135 : 		}

  00048	c3		 ret	 0
?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::~_Container_base_aux_alloc_real<std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::~_Container_base_aux_alloc_real<std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx

; 440  : 		}

  00009	c3		 ret	 0
??1?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::~_Container_base_aux_alloc_real<std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@K@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<unsigned long> >::~_Container_base_aux_alloc_real<std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@K@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_real@V?$allocator@K@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<unsigned long> >::~_Container_base_aux_alloc_real<std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx

; 440  : 		}

  00009	c3		 ret	 0
??1?$_Container_base_aux_alloc_real@V?$allocator@K@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<unsigned long> >::~_Container_base_aux_alloc_real<std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??E?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAEAAV012@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??E?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??E?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAEAAV012@XZ PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator++, COMDAT
; _this$ = ecx

; 235  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 236  : 
; 237  :  #if _HAS_ITERATOR_DEBUGGING
; 238  : 			if (this->_Mycont == 0
; 239  : 				|| _Ptr == 0
; 240  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 241  : 				{
; 242  : 				_DEBUG_ERROR("list iterator not incrementable");
; 243  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 244  : 				}
; 245  :  #else
; 246  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN23@operator@15
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 247  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN17@operator@15
$LN23@operator@15:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN18@operator@15
$LN17@operator@15:
  00018	33 c0		 xor	 eax, eax
$LN18@operator@15:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00020	75 05		 jne	 SHORT $LN3@operator@15
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@15:

; 248  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 249  : 
; 250  : 			_Ptr = _Nextnode(_Ptr);

  00027	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002a	8b 02		 mov	 eax, DWORD PTR [edx]
  0002c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 251  : 			return (*this);

  0002f	8b c6		 mov	 eax, esi
  00031	5e		 pop	 esi

; 252  : 			}

  00032	c3		 ret	 0
??E?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAEAAV012@XZ ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator++
_TEXT	ENDS
PUBLIC	??9?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator!=
; Function compile flags: /Ogtpy
;	COMDAT ??9?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator!=, COMDAT
; _this$ = ecx

; 302  : 			{	// test for iterator inequality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 303  : 			return (!(*this == _Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN6@operator@16
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN5@operator@16
$LN6@operator@16:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@16:
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 95 c1	 setne	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 304  : 			}

  00026	c2 04 00	 ret	 4
??9?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator!=
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator!=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 216  : 		return (!(*this == _Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN6@operator@17
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN5@operator@17
$LN6@operator@17:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@17:
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 95 c1	 setne	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 217  : 		}

  00026	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator!=
_TEXT	ENDS
PUBLIC	?_Key@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAABHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Key
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAABHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAABHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Key, COMDAT

; 162  : 		return (_Mybase::_Kfn(_Myval(_Pnode)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 10	 add	 eax, 16			; 00000010H

; 163  : 		}

  00007	c3		 ret	 0
?_Key@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAABHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Key
_TEXT	ENDS
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lmost
; Function compile flags: /Ogtpy
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1281 : 		return (_Left(_Myhead));

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 1282 : 		}

  00003	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lmost
_TEXT	ENDS
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Rmost
; Function compile flags: /Ogtpy
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 1320 : 		return (_Right(_Myhead));

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	83 c0 08	 add	 eax, 8

; 1321 : 		}

  00006	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Rmost
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Root
; Function compile flags: /Ogtpy
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1325 : 		return (_Parent(_Myhead));

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	83 c0 04	 add	 eax, 4

; 1326 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Root
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<int const ,HostDevice> > >::~_Container_base_aux_alloc_real<std::allocator<std::pair<int const ,HostDevice> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<int const ,HostDevice> > >::~_Container_base_aux_alloc_real<std::allocator<std::pair<int const ,HostDevice> > >, COMDAT
; _this$ = ecx

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx

; 440  : 		}

  00009	c3		 ret	 0
??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<int const ,HostDevice> > >::~_Container_base_aux_alloc_real<std::allocator<std::pair<int const ,HostDevice> > >
_TEXT	ENDS
PUBLIC	??Diterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBHUHostDevice@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::iterator::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBHUHostDevice@@@2@XZ
_TEXT	SEGMENT
??Diterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBHUHostDevice@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::iterator::operator*, COMDAT
; _this$ = ecx

; 464  : 			{	// return designated value

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 465  : 			return ((reference)**(const_iterator *)this);

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN23@operator@18
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN17@operator@18
$LN23@operator@18:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN18@operator@18
$LN17@operator@18:
  00018	33 c0		 xor	 eax, eax
$LN18@operator@18:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00020	75 05		 jne	 SHORT $LN5@operator@18
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@18:
  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	83 c0 10	 add	 eax, 16			; 00000010H
  0002d	5e		 pop	 esi

; 466  : 			}

  0002e	c3		 ret	 0
??Diterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBHUHostDevice@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::iterator::operator*
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos, COMDAT
; _this$ = ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00004	33 d2		 xor	 edx, edx
  00006	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  0000a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000d	72 0a		 jb	 SHORT $LN5@Eos@2
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 2115 : 		}

  00016	c2 04 00	 ret	 4

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$LN5@Eos@2:
  00019	66 89 54 41 04	 mov	 WORD PTR [ecx+eax*2+4], dx

; 2115 : 		}

  0001e	c2 04 00	 ret	 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
_TEXT	ENDS
PUBLIC	??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
EXTRN	??0_Mutex@std@@QAE@XZ:PROC			; std::_Mutex::_Mutex
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__unwindtable$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ$0
__ehfuncinfo$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	ENDS
;	COMDAT ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
__Lock$156167 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 28   : 		{	// construct with no buffers

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b d9		 mov	 ebx, ecx
  00028	89 5c 24 14	 mov	 DWORD PTR _this$[esp+36], ebx
  0002c	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0002f	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  00035	e8 00 00 00 00	 call	 ??0_Mutex@std@@QAE@XZ	; std::_Mutex::_Mutex
  0003a	6a 04		 push	 4
  0003c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 0
  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00049	8b f0		 mov	 esi, eax
  0004b	83 c4 04	 add	 esp, 4
  0004e	85 f6		 test	 esi, esi
  00050	74 30		 je	 SHORT $LN3@basic_stre@3
  00052	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Init
  00057	89 06		 mov	 DWORD PTR [esi], eax
  00059	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0005e	6a 00		 push	 0
  00060	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$156167[esp+40]
  00064	8b f8		 mov	 edi, eax
  00066	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0006b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0006e	83 f8 ff	 cmp	 eax, -1
  00071	73 04		 jae	 SHORT $LN8@basic_stre@3
  00073	40		 inc	 eax
  00074	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN8@basic_stre@3:
  00077	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$156167[esp+36]
  0007b	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00080	eb 02		 jmp	 SHORT $LN4@basic_stre@3
$LN3@basic_stre@3:
  00082	33 f6		 xor	 esi, esi
$LN4@basic_stre@3:

; 29   : 		_Init();

  00084	8b cb		 mov	 ecx, ebx
  00086	89 73 38	 mov	 DWORD PTR [ebx+56], esi
  00089	e8 00 00 00 00	 call	 ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init

; 30   : 		}

  0008e	8b c3		 mov	 eax, ebx
  00090	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  00094	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009b	59		 pop	 ecx
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	83 c4 14	 add	 esp, 20			; 00000014H
  000a2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1_Mutex@std@@QAE@XZ	; std::_Mutex::~_Mutex
__ehhandler$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  00012	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
PUBLIC	??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__unwindtable$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ$0
__ehfuncinfo$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	ENDS
;	COMDAT ??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
_TEXT	SEGMENT
__Lock$156193 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 28   : 		{	// construct with no buffers

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b d9		 mov	 ebx, ecx
  00028	89 5c 24 14	 mov	 DWORD PTR _this$[esp+36], ebx
  0002c	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0002f	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
  00035	e8 00 00 00 00	 call	 ??0_Mutex@std@@QAE@XZ	; std::_Mutex::_Mutex
  0003a	6a 04		 push	 4
  0003c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 0
  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00049	8b f0		 mov	 esi, eax
  0004b	83 c4 04	 add	 esp, 4
  0004e	85 f6		 test	 esi, esi
  00050	74 30		 je	 SHORT $LN3@basic_stre@4
  00052	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Init
  00057	89 06		 mov	 DWORD PTR [esi], eax
  00059	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0005e	6a 00		 push	 0
  00060	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$156193[esp+40]
  00064	8b f8		 mov	 edi, eax
  00066	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0006b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0006e	83 f8 ff	 cmp	 eax, -1
  00071	73 04		 jae	 SHORT $LN8@basic_stre@4
  00073	40		 inc	 eax
  00074	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN8@basic_stre@4:
  00077	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$156193[esp+36]
  0007b	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00080	eb 02		 jmp	 SHORT $LN4@basic_stre@4
$LN3@basic_stre@4:
  00082	33 f6		 xor	 esi, esi
$LN4@basic_stre@4:

; 29   : 		_Init();

  00084	8b cb		 mov	 ecx, ebx
  00086	89 73 38	 mov	 DWORD PTR [ebx+56], esi
  00089	e8 00 00 00 00	 call	 ?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Init

; 30   : 		}

  0008e	8b c3		 mov	 eax, ebx
  00090	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  00094	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009b	59		 pop	 ecx
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	83 c4 14	 add	 esp, 20			; 00000014H
  000a2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1_Mutex@std@@QAE@XZ	; std::_Mutex::~_Mutex
__ehhandler$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  00012	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
PUBLIC	?max_size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::max_size, COMDAT
; _this$ = ecx

; 731  : 		return (this->_Alval.max_size());

  00000	b8 e1 e1 e1 01	 mov	 eax, 31580641		; 01e1e1e1H

; 732  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z ; std::allocator<HostDevice>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z PROC ; std::allocator<HostDevice>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ; std::_Allocate<HostDevice>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z ENDP ; std::allocator<HostDevice>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@I@Z ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::allocate
; Function compile flags: /Ogtpy
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@YAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>::construct
; Function compile flags: /Ogtpy
;	COMDAT ?construct@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@ABQAU342@@Z PROC ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN5@construct
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN5@construct:

; 156  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>::destroy
; Function compile flags: /Ogtpy
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z PROC ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	?_Lbound@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lbound
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABH@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
?_Lbound@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lbound, COMDAT
; _this$ = ecx

; 1264 : 		_Nodeptr _Pnode = _Root();

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1265 : 		_Nodeptr _Wherenode = _Myhead;	// end() if search fails
; 1266 : 
; 1267 : 		while (!_Isnil(_Pnode))

  00006	80 b9 a1 00 00
	00 00		 cmp	 BYTE PTR [ecx+161], 0
  0000d	75 1d		 jne	 SHORT $LN3@Lbound
  0000f	8b 54 24 04	 mov	 edx, DWORD PTR __Keyval$[esp-4]
  00013	8b 12		 mov	 edx, DWORD PTR [edx]
$LL4@Lbound:

; 1268 : 			if (_DEBUG_LT_PRED(this->comp, _Key(_Pnode), _Keyval))

  00015	39 51 10	 cmp	 DWORD PTR [ecx+16], edx
  00018	7d 05		 jge	 SHORT $LN2@Lbound

; 1269 : 				_Pnode = _Right(_Pnode);	// descend right subtree

  0001a	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 1270 : 			else

  0001d	eb 04		 jmp	 SHORT $LN1@Lbound
$LN2@Lbound:

; 1271 : 				{	// _Pnode not less than _Keyval, remember it
; 1272 : 				_Wherenode = _Pnode;

  0001f	8b c1		 mov	 eax, ecx

; 1273 : 				_Pnode = _Left(_Pnode);	// descend left subtree

  00021	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN1@Lbound:

; 1265 : 		_Nodeptr _Wherenode = _Myhead;	// end() if search fails
; 1266 : 
; 1267 : 		while (!_Isnil(_Pnode))

  00023	80 b9 a1 00 00
	00 00		 cmp	 BYTE PTR [ecx+161], 0
  0002a	74 e9		 je	 SHORT $LL4@Lbound
$LN3@Lbound:

; 1274 : 				}
; 1275 : 
; 1276 : 		return (_Wherenode);	// return best remembered candidate
; 1277 : 		}

  0002c	c2 04 00	 ret	 4
?_Lbound@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lbound
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node *>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	??0?$_Ranit@UHostDevice@@HPBU1@ABU1@@std@@QAE@XZ ; std::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Ranit@UHostDevice@@HPBU1@ABU1@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Ranit@UHostDevice@@HPBU1@ABU1@@std@@QAE@XZ PROC	; std::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Ranit@UHostDevice@@HPBU1@ABU1@@std@@QAE@XZ ENDP	; std::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>
_TEXT	ENDS
PUBLIC	??0?$_Bidit@U?$pair@$$CBHUHostDevice@@@std@@HPBU12@ABU12@@std@@QAE@XZ ; std::_Bidit<std::pair<int const ,HostDevice>,int,std::pair<int const ,HostDevice> const *,std::pair<int const ,HostDevice> const &>::_Bidit<std::pair<int const ,HostDevice>,int,std::pair<int const ,HostDevice> const *,std::pair<int const ,HostDevice> const &>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Bidit@U?$pair@$$CBHUHostDevice@@@std@@HPBU12@ABU12@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Bidit@U?$pair@$$CBHUHostDevice@@@std@@HPBU12@ABU12@@std@@QAE@XZ PROC ; std::_Bidit<std::pair<int const ,HostDevice>,int,std::pair<int const ,HostDevice> const *,std::pair<int const ,HostDevice> const &>::_Bidit<std::pair<int const ,HostDevice>,int,std::pair<int const ,HostDevice> const *,std::pair<int const ,HostDevice> const &>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Bidit@U?$pair@$$CBHUHostDevice@@@std@@HPBU12@ABU12@@std@@QAE@XZ ENDP ; std::_Bidit<std::pair<int const ,HostDevice>,int,std::pair<int const ,HostDevice> const *,std::pair<int const ,HostDevice> const &>::_Bidit<std::pair<int const ,HostDevice>,int,std::pair<int const ,HostDevice> const *,std::pair<int const ,HostDevice> const &>
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1671 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1672 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1673 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 1671 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1672 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH

; 1673 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::allocate
_TEXT	ENDS
PUBLIC	?construct@?$allocator@K@std@@QAEXPAKABK@Z	; std::allocator<unsigned long>::construct
; Function compile flags: /Ogtpy
;	COMDAT ?construct@?$allocator@K@std@@QAEXPAKABK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@K@std@@QAEXPAKABK@Z PROC		; std::allocator<unsigned long>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN5@construct@2
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN5@construct@2:

; 156  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@K@std@@QAEXPAKABK@Z ENDP		; std::allocator<unsigned long>::construct
_TEXT	ENDS
PUBLIC	?max_size@?$list@KV?$allocator@K@std@@@std@@QBEIXZ ; std::list<unsigned long,std::allocator<unsigned long> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?max_size@?$list@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$list@KV?$allocator@K@std@@@std@@QBEIXZ PROC	; std::list<unsigned long,std::allocator<unsigned long> >::max_size, COMDAT
; _this$ = ecx

; 625  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 626  : 		}

  00005	c3		 ret	 0
?max_size@?$list@KV?$allocator@K@std@@@std@@QBEIXZ ENDP	; std::list<unsigned long,std::allocator<unsigned long> >::max_size
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z PROC ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@KV?$allocator@K@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::max_size, COMDAT
; _this$ = ecx

; 606  : 		return (this->_Alval.max_size());

  00000	b8 71 1c c7 01	 mov	 eax, 29826161		; 01c71c71H

; 607  : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::max_size
_TEXT	ENDS
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lrotate
; Function compile flags: /Ogtpy
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1286 : 		_Nodeptr _Pnode = _Right(_Wherenode);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Wherenode$[esp-4]
  00004	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00007	56		 push	 esi

; 1287 : 		_Right(_Wherenode) = _Left(_Pnode);

  00008	8b 30		 mov	 esi, DWORD PTR [eax]
  0000a	89 72 08	 mov	 DWORD PTR [edx+8], esi

; 1288 : 
; 1289 : 		if (!_Isnil(_Left(_Pnode)))

  0000d	8b 30		 mov	 esi, DWORD PTR [eax]
  0000f	80 be a1 00 00
	00 00		 cmp	 BYTE PTR [esi+161], 0
  00016	75 03		 jne	 SHORT $LN5@Lrotate

; 1290 : 			_Parent(_Left(_Pnode)) = _Wherenode;

  00018	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Lrotate:

; 1291 : 		_Parent(_Pnode) = _Parent(_Wherenode);

  0001b	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001e	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1292 : 
; 1293 : 		if (_Wherenode == _Root())

  00021	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00024	5e		 pop	 esi
  00025	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00028	75 0b		 jne	 SHORT $LN4@Lrotate

; 1294 : 			_Root() = _Pnode;

  0002a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1299 : 
; 1300 : 		_Left(_Pnode) = _Wherenode;

  0002d	89 10		 mov	 DWORD PTR [eax], edx

; 1301 : 		_Parent(_Wherenode) = _Pnode;

  0002f	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1302 : 		}

  00032	c2 04 00	 ret	 4
$LN4@Lrotate:

; 1295 : 		else if (_Wherenode == _Left(_Parent(_Wherenode)))

  00035	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00038	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0003a	75 0a		 jne	 SHORT $LN2@Lrotate

; 1296 : 			_Left(_Parent(_Wherenode)) = _Pnode;

  0003c	89 01		 mov	 DWORD PTR [ecx], eax

; 1299 : 
; 1300 : 		_Left(_Pnode) = _Wherenode;

  0003e	89 10		 mov	 DWORD PTR [eax], edx

; 1301 : 		_Parent(_Wherenode) = _Pnode;

  00040	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1302 : 		}

  00043	c2 04 00	 ret	 4
$LN2@Lrotate:

; 1297 : 		else
; 1298 : 			_Right(_Parent(_Wherenode)) = _Pnode;

  00046	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1299 : 
; 1300 : 		_Left(_Pnode) = _Wherenode;

  00049	89 10		 mov	 DWORD PTR [eax], edx

; 1301 : 		_Parent(_Wherenode) = _Pnode;

  0004b	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1302 : 		}

  0004e	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lrotate
_TEXT	ENDS
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Rrotate
; Function compile flags: /Ogtpy
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1330 : 		_Nodeptr _Pnode = _Left(_Wherenode);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Wherenode$[esp-4]
  00004	8b 02		 mov	 eax, DWORD PTR [edx]
  00006	56		 push	 esi

; 1331 : 		_Left(_Wherenode) = _Right(_Pnode);

  00007	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0000a	89 32		 mov	 DWORD PTR [edx], esi

; 1332 : 
; 1333 : 		if (!_Isnil(_Right(_Pnode)))

  0000c	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0000f	80 be a1 00 00
	00 00		 cmp	 BYTE PTR [esi+161], 0
  00016	75 03		 jne	 SHORT $LN5@Rrotate@2

; 1334 : 			_Parent(_Right(_Pnode)) = _Wherenode;

  00018	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Rrotate@2:

; 1335 : 		_Parent(_Pnode) = _Parent(_Wherenode);

  0001b	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001e	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1336 : 
; 1337 : 		if (_Wherenode == _Root())

  00021	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00024	5e		 pop	 esi
  00025	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00028	75 0c		 jne	 SHORT $LN4@Rrotate@2

; 1338 : 			_Root() = _Pnode;

  0002a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1343 : 
; 1344 : 		_Right(_Pnode) = _Wherenode;

  0002d	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1345 : 		_Parent(_Wherenode) = _Pnode;

  00030	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1346 : 		}

  00033	c2 04 00	 ret	 4
$LN4@Rrotate@2:

; 1339 : 		else if (_Wherenode == _Right(_Parent(_Wherenode)))

  00036	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00039	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003c	75 0c		 jne	 SHORT $LN2@Rrotate@2

; 1340 : 			_Right(_Parent(_Wherenode)) = _Pnode;

  0003e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1343 : 
; 1344 : 		_Right(_Pnode) = _Wherenode;

  00041	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1345 : 		_Parent(_Wherenode) = _Pnode;

  00044	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1346 : 		}

  00047	c2 04 00	 ret	 4
$LN2@Rrotate@2:

; 1341 : 		else
; 1342 : 			_Left(_Parent(_Wherenode)) = _Pnode;

  0004a	89 01		 mov	 DWORD PTR [ecx], eax

; 1343 : 
; 1344 : 		_Right(_Pnode) = _Wherenode;

  0004c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1345 : 		_Parent(_Wherenode) = _Pnode;

  0004f	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1346 : 		}

  00052	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::_Dec
; Function compile flags: /Ogtpy
;	COMDAT ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::_Dec, COMDAT
; _this$ = ecx

; 320  : 			{	// move to node with next smaller value

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 321  : 
; 322  :  #if _HAS_ITERATOR_DEBUGGING
; 323  : 			if (this->_Mycont == 0
; 324  : 				|| _Ptr == 0)
; 325  : 				{
; 326  : 				_DEBUG_ERROR("map/set iterator not decrementable");
; 327  : 				_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 				}
; 329  :  #else
; 330  : 			_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	75 05		 jne	 SHORT $LN12@Dec
  00008	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN12@Dec:

; 331  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 332  : 
; 333  : 			if (_Isnil(_Ptr))

  0000d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00010	80 b8 a1 00 00
	00 00		 cmp	 BYTE PTR [eax+161], 0
  00017	74 15		 je	 SHORT $LN9@Dec

; 334  : 			{
; 335  : 				_Ptr = _Right(_Ptr);	// end() ==> rightmost

  00019	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 336  :    				if (_Isnil(_Ptr))

  0001f	80 b8 a1 00 00
	00 00		 cmp	 BYTE PTR [eax+161], 0
  00026	74 75		 je	 SHORT $LN1@Dec
  00028	5e		 pop	 esi

; 337  : #if _HAS_ITERATOR_DEBUGGING
; 338  : 				{
; 339  : 					_DEBUG_ERROR("map/set iterator not decrementable");
; 340  : 					_SCL_SECURE_OUT_OF_RANGE;
; 341  : 				}
; 342  : #elif _SECURE_SCL
; 343  : 				{
; 344  :     				_SCL_SECURE_OUT_OF_RANGE;

  00029	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo
$LN9@Dec:

; 345  : 				}
; 346  : #else
; 347  : 				return;	// begin() shouldn't be incremented, don't move
; 348  : #endif
; 349  : 			}
; 350  : 			else if (!_Isnil(_Left(_Ptr)))

  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	80 b9 a1 00 00
	00 00		 cmp	 BYTE PTR [ecx+161], 0
  00037	75 2a		 jne	 SHORT $LN49@Dec

; 351  : 				_Ptr = _Max(_Left(_Ptr));	// ==> largest of left subtree

  00039	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0003c	80 b8 a1 00 00
	00 00		 cmp	 BYTE PTR [eax+161], 0
  00043	75 19		 jne	 SHORT $LN30@Dec
  00045	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL31@Dec:
  00050	8b c8		 mov	 ecx, eax
  00052	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00055	80 b8 a1 00 00
	00 00		 cmp	 BYTE PTR [eax+161], 0
  0005c	74 f2		 je	 SHORT $LL31@Dec
$LN30@Dec:
  0005e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00061	5e		 pop	 esi

; 373  : 				}
; 374  : 			}

  00062	c3		 ret	 0
$LN49@Dec:

; 352  : 			else
; 353  : 				{	// climb looking for left subtree
; 354  : 				_Nodeptr _Pnode;
; 355  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 356  : 					&& _Ptr == _Left(_Pnode))

  00063	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00066	80 b8 a1 00 00
	00 00		 cmp	 BYTE PTR [eax+161], 0
  0006d	75 19		 jne	 SHORT $LN3@Dec
  0006f	90		 npad	 1
$LL4@Dec:
  00070	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00073	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00075	75 11		 jne	 SHORT $LN3@Dec

; 357  : 					_Ptr = _Pnode;	// ==> parent while left subtree

  00077	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0007a	8b d0		 mov	 edx, eax
  0007c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0007f	80 b8 a1 00 00
	00 00		 cmp	 BYTE PTR [eax+161], 0
  00086	74 e8		 je	 SHORT $LL4@Dec
$LN3@Dec:

; 358  : 				if (_Isnil(_Ptr))

  00088	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0008b	80 b9 a1 00 00
	00 00		 cmp	 BYTE PTR [ecx+161], 0
  00092	74 06		 je	 SHORT $LN2@Dec
  00094	5e		 pop	 esi

; 359  :  #if _HAS_ITERATOR_DEBUGGING
; 360  :  					{
; 361  : 					_DEBUG_ERROR("map/set iterator not decrementable");
; 362  : 					_SCL_SECURE_OUT_OF_RANGE;
; 363  : 					}
; 364  :  #elif _SECURE_SCL
; 365  : 					{
; 366  : 					_SCL_SECURE_OUT_OF_RANGE;

  00095	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo
$LN2@Dec:

; 367  : 					}
; 368  :  #else
; 369  : 					return;	// begin() shouldn't be incremented, don't move
; 370  :  #endif
; 371  : 				else
; 372  : 					_Ptr = _Pnode;	// ==> parent if not head

  0009a	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@Dec:
  0009d	5e		 pop	 esi

; 373  : 				}
; 374  : 			}

  0009e	c3		 ret	 0
?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::_Dec
_TEXT	ENDS
PUBLIC	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::_Inc
; Function compile flags: /Ogtpy
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::_Inc, COMDAT
; _this$ = ecx

; 377  : 			{	// move to node with next larger value

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 378  : 
; 379  :  #if _HAS_ITERATOR_DEBUGGING
; 380  : 			if (this->_Mycont == 0
; 381  : 				|| _Ptr == 0
; 382  : 				|| _Isnil(_Ptr))
; 383  : 				{
; 384  : 				_DEBUG_ERROR("map/set iterator not incrementable");
; 385  : 				_SCL_SECURE_OUT_OF_RANGE;
; 386  : 				}
; 387  :  #else
; 388  : 			_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	75 05		 jne	 SHORT $LN9@Inc
  00008	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@Inc:

; 389  : 			if (_Isnil(_Ptr))

  0000d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00010	80 b8 a1 00 00
	00 00		 cmp	 BYTE PTR [eax+161], 0
  00017	74 06		 je	 SHORT $LN6@Inc
  00019	5e		 pop	 esi

; 390  : 				{
; 391  : 				_SCL_SECURE_OUT_OF_RANGE;

  0001a	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo
$LN6@Inc:

; 392  : 				// end() shouldn't be incremented, don't move if _SCL_SECURE is not turned on
; 393  : 				}
; 394  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 395  : 
; 396  : 			else if (!_Isnil(_Right(_Ptr)))

  0001f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00022	80 b9 a1 00 00
	00 00		 cmp	 BYTE PTR [ecx+161], 0
  00029	75 27		 jne	 SHORT $LN40@Inc

; 397  : 				_Ptr = _Min(_Right(_Ptr));	// ==> smallest of right subtree

  0002b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002d	80 b8 a1 00 00
	00 00		 cmp	 BYTE PTR [eax+161], 0
  00034	75 17		 jne	 SHORT $LN23@Inc
  00036	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL24@Inc:
  00040	8b c8		 mov	 ecx, eax
  00042	8b 01		 mov	 eax, DWORD PTR [ecx]
  00044	80 b8 a1 00 00
	00 00		 cmp	 BYTE PTR [eax+161], 0
  0004b	74 f3		 je	 SHORT $LL24@Inc
$LN23@Inc:
  0004d	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00050	5e		 pop	 esi

; 405  : 				}
; 406  : 			}

  00051	c3		 ret	 0
$LN40@Inc:

; 398  : 			else
; 399  : 				{	// climb looking for right subtree
; 400  : 				_Nodeptr _Pnode;
; 401  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 402  : 					&& _Ptr == _Right(_Pnode))

  00052	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00055	80 b8 a1 00 00
	00 00		 cmp	 BYTE PTR [eax+161], 0
  0005c	75 1b		 jne	 SHORT $LN1@Inc
  0005e	8b ff		 npad	 2
$LL2@Inc:
  00060	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00063	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00066	75 11		 jne	 SHORT $LN1@Inc

; 403  : 					_Ptr = _Pnode;	// ==> parent while right subtree

  00068	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0006b	8b d0		 mov	 edx, eax
  0006d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00070	80 b8 a1 00 00
	00 00		 cmp	 BYTE PTR [eax+161], 0
  00077	74 e7		 je	 SHORT $LL2@Inc
$LN1@Inc:

; 404  : 				_Ptr = _Pnode;	// ==> parent (head if end())

  00079	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0007c	5e		 pop	 esi

; 405  : 				}
; 406  : 			}

  0007d	c3		 ret	 0
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::_Inc
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??Y?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 375  : 		(*(_Mybase *)this) += _Off;

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	85 c0		 test	 eax, eax
  00008	75 0b		 jne	 SHORT $LN28@operator@19
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	85 c0		 test	 eax, eax
  00013	74 04		 je	 SHORT $LN18@operator@19
$LN28@operator@19:
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN19@operator@19
$LN18@operator@19:
  00019	33 c9		 xor	 ecx, ecx
$LN19@operator@19:
  0001b	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  0001f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00022	69 ff 88 00 00
	00		 imul	 edi, 136		; 00000088H
  00028	03 d7		 add	 edx, edi
  0002a	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  0002d	77 0f		 ja	 SHORT $LN6@operator@19
  0002f	85 c0		 test	 eax, eax
  00031	74 04		 je	 SHORT $LN24@operator@19
  00033	8b 00		 mov	 eax, DWORD PTR [eax]
  00035	eb 02		 jmp	 SHORT $LN25@operator@19
$LN24@operator@19:
  00037	33 c0		 xor	 eax, eax
$LN25@operator@19:
  00039	3b 50 0c	 cmp	 edx, DWORD PTR [eax+12]
  0003c	73 05		 jae	 SHORT $LN29@operator@19
$LN6@operator@19:
  0003e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN29@operator@19:
  00043	01 7e 04	 add	 DWORD PTR [esi+4], edi
  00046	5f		 pop	 edi

; 376  : 		return (*this);

  00047	8b c6		 mov	 eax, esi
  00049	5e		 pop	 esi

; 377  : 		}

  0004a	c2 04 00	 ret	 4
??Y?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+=
_TEXT	ENDS
PUBLIC	??0?$_Bidit@KHPBKABK@std@@QAE@XZ		; std::_Bidit<unsigned long,int,unsigned long const *,unsigned long const &>::_Bidit<unsigned long,int,unsigned long const *,unsigned long const &>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Bidit@KHPBKABK@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Bidit@KHPBKABK@std@@QAE@XZ PROC			; std::_Bidit<unsigned long,int,unsigned long const *,unsigned long const &>::_Bidit<unsigned long,int,unsigned long const *,unsigned long const &>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Bidit@KHPBKABK@std@@QAE@XZ ENDP			; std::_Bidit<unsigned long,int,unsigned long const *,unsigned long const &>::_Bidit<unsigned long,int,unsigned long const *,unsigned long const &>
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<unsigned long> >::_Container_base_aux_alloc_real<std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<unsigned long> >::_Container_base_aux_alloc_real<std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 419  : 		{

  00000	56		 push	 esi

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN3@Container_
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4
$LN3@Container_:

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Container_base_aux_alloc_real@V?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<unsigned long> >::_Container_base_aux_alloc_real<std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABQAU342@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node *>::construct
; Function compile flags: /Ogtpy
;	COMDAT ?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABQAU342@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node *>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN5@construct@3
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN5@construct@3:

; 156  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node *>::construct
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<int const ,HostDevice> > >::_Container_base_aux_alloc_real<std::allocator<std::pair<int const ,HostDevice> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<int const ,HostDevice> > >::_Container_base_aux_alloc_real<std::allocator<std::pair<int const ,HostDevice> > >, COMDAT
; _this$ = ecx

; 419  : 		{

  00000	56		 push	 esi

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN3@Container_@2
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4
$LN3@Container_@2:

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@IAE@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<int const ,HostDevice> > >::_Container_base_aux_alloc_real<std::allocator<std::pair<int const ,HostDevice> > >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 616  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 617  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 590  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 590  : 	}

  00026	c3		 ret	 0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 616  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 617  : 	}

  00026	c3		 ret	 0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
PUBLIC	??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
EXTRN	??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z:PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
rdata$r	SEGMENT
??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@'
	DB	'std@@@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
CONST	SEGMENT
??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD FLAT:??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
	DD	FLAT:??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1063 : 		{	// construct from specified locale

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Refs$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@

; 1064 : 		_Init(_Lobj);

  00010	e8 00 00 00 00	 call	 __Getcvt
  00015	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00018	89 56 0c	 mov	 DWORD PTR [esi+12], edx

; 1065 : 		}

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 08 00	 ret	 8
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
_TEXT	ENDS
PUBLIC	?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ	; std::_Locinfo::_Getlconv
EXTRN	_localeconv:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
;	COMDAT ?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ
_TEXT	SEGMENT
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ PROC		; std::_Locinfo::_Getlconv, COMDAT
; _this$ = ecx

; 134  : 		return (localeconv());

  00000	e9 00 00 00 00	 jmp	 _localeconv
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ ENDP		; std::_Locinfo::_Getlconv
_TEXT	ENDS
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	?_Getfalse@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Getfalse
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?_Getfalse@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Getfalse@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Getfalse, COMDAT
; _this$ = ecx

; 172  : 		return ("false");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05LAPONLG@false?$AA@

; 173  : 		}

  00005	c3		 ret	 0
?_Getfalse@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Getfalse
_TEXT	ENDS
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	?_Gettrue@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Gettrue
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?_Gettrue@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Gettrue@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Gettrue, COMDAT
; _this$ = ecx

; 177  : 		return ("true");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04LOAJBDKD@true?$AA@

; 178  : 		}

  00005	c3		 ret	 0
?_Gettrue@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Gettrue
_TEXT	ENDS
PUBLIC	?precision@ios_base@std@@QBEHXZ			; std::ios_base::precision
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
;	COMDAT ?precision@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?precision@ios_base@std@@QBEHXZ PROC			; std::ios_base::precision, COMDAT
; _this$ = ecx

; 407  : 		return (_Prec);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 408  : 		}

  00003	c3		 ret	 0
?precision@ios_base@std@@QBEHXZ ENDP			; std::ios_base::precision
_TEXT	ENDS
PUBLIC	??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ
_TEXT	SEGMENT
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1042 : 		}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
  00006	c3		 ret	 0
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0000e	74 09		 je	 SHORT $LN8@scalar@21
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN8@scalar@21:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
; Function compile flags: /Ogtpy
;	COMDAT ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 1
__Flags$ = 20						; size = 4
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt, COMDAT

; 1289 : 		char *_Ptr = _Fmt;
; 1290 : 		*_Ptr++ = '%';

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Fmt$[esp-4]

; 1291 : 
; 1292 : 		if (_Flags & ios_base::showpos)

  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Flags$[esp-4]
  00008	c6 00 25	 mov	 BYTE PTR [eax], 37	; 00000025H
  0000b	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000e	f6 c2 20	 test	 dl, 32			; 00000020H
  00011	74 04		 je	 SHORT $LN3@Ffmt

; 1293 : 			*_Ptr++ = '+';

  00013	c6 01 2b	 mov	 BYTE PTR [ecx], 43	; 0000002bH
  00016	41		 inc	 ecx
$LN3@Ffmt:

; 1294 : 		if (_Flags & ios_base::showpoint)

  00017	f6 c2 10	 test	 dl, 16			; 00000010H
  0001a	74 04		 je	 SHORT $LN2@Ffmt

; 1295 : 			*_Ptr++ = '#';

  0001c	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  0001f	41		 inc	 ecx
$LN2@Ffmt:

; 1296 : 		*_Ptr++ = '.';

  00020	c6 01 2e	 mov	 BYTE PTR [ecx], 46	; 0000002eH
  00023	41		 inc	 ecx
  00024	53		 push	 ebx

; 1297 : 		*_Ptr++ = '*';	// for precision argument
; 1298 : 		if (_Spec != '\0')

  00025	8a 5c 24 10	 mov	 bl, BYTE PTR __Spec$[esp]
  00029	c6 01 2a	 mov	 BYTE PTR [ecx], 42	; 0000002aH
  0002c	41		 inc	 ecx
  0002d	84 db		 test	 bl, bl
  0002f	74 03		 je	 SHORT $LN1@Ffmt

; 1299 : 			*_Ptr++ = _Spec;	// 'L' qualifier for long double only

  00031	88 19		 mov	 BYTE PTR [ecx], bl
  00033	41		 inc	 ecx
$LN1@Ffmt:

; 1300 : 
; 1301 : 		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;

  00034	81 e2 00 30 00
	00		 and	 edx, 12288		; 00003000H
  0003a	5b		 pop	 ebx

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0003b	81 fa 00 20 00
	00		 cmp	 edx, 8192		; 00002000H
  00041	75 09		 jne	 SHORT $LN8@Ffmt
  00043	b2 66		 mov	 dl, 102			; 00000066H
  00045	88 11		 mov	 BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

  00047	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

  0004b	c3		 ret	 0
$LN8@Ffmt:

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0004c	81 fa 00 30 00
	00		 cmp	 edx, 12288		; 00003000H
  00052	75 09		 jne	 SHORT $LN6@Ffmt
  00054	b2 61		 mov	 dl, 97			; 00000061H
  00056	88 11		 mov	 BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

  00058	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

  0005c	c3		 ret	 0
$LN6@Ffmt:

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0005d	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00063	0f 95 c2	 setne	 dl
  00066	8d 54 12 65	 lea	 edx, DWORD PTR [edx+edx+101]
  0006a	88 11		 mov	 BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

  0006c	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

  00070	c3		 ret	 0
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
_TEXT	ENDS
PUBLIC	?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
; Function compile flags: /Ogtpy
;	COMDAT ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 4
__Flags$ = 20						; size = 4
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt, COMDAT

; 1432 : 		char *_Ptr = _Fmt;
; 1433 : 		*_Ptr++ = '%';

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Fmt$[esp-4]

; 1434 : 
; 1435 : 		if (_Flags & ios_base::showpos)

  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Flags$[esp-4]
  00008	c6 00 25	 mov	 BYTE PTR [eax], 37	; 00000025H
  0000b	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000e	f6 c2 20	 test	 dl, 32			; 00000020H
  00011	74 04		 je	 SHORT $LN4@Ifmt

; 1436 : 			*_Ptr++ = '+';

  00013	c6 01 2b	 mov	 BYTE PTR [ecx], 43	; 0000002bH
  00016	41		 inc	 ecx
$LN4@Ifmt:

; 1437 : 		if (_Flags & ios_base::showbase)

  00017	f6 c2 08	 test	 dl, 8
  0001a	74 04		 je	 SHORT $LN3@Ifmt

; 1438 : 			*_Ptr++ = '#';

  0001c	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  0001f	41		 inc	 ecx
$LN3@Ifmt:
  00020	53		 push	 ebx
  00021	56		 push	 esi
  00022	57		 push	 edi

; 1439 : 		if (_Spec[0] != 'L')

  00023	8b 7c 24 18	 mov	 edi, DWORD PTR __Spec$[esp+8]
  00027	8a 1f		 mov	 bl, BYTE PTR [edi]
  00029	80 fb 4c	 cmp	 bl, 76			; 0000004cH
  0002c	74 04		 je	 SHORT $LN2@Ifmt

; 1440 : 			*_Ptr++ = _Spec[0];	// qualifier

  0002e	88 19		 mov	 BYTE PTR [ecx], bl

; 1441 : 		else

  00030	eb 0b		 jmp	 SHORT $LN11@Ifmt
$LN2@Ifmt:

; 1442 : 			{	/* change L to I64 */
; 1443 : 			*_Ptr++ = 'I';

  00032	c6 01 49	 mov	 BYTE PTR [ecx], 73	; 00000049H
  00035	41		 inc	 ecx

; 1444 : 			*_Ptr++ = '6';

  00036	c6 01 36	 mov	 BYTE PTR [ecx], 54	; 00000036H
  00039	41		 inc	 ecx

; 1445 : 			*_Ptr++ = '4';

  0003a	c6 01 34	 mov	 BYTE PTR [ecx], 52	; 00000034H
$LN11@Ifmt:

; 1446 : 			}
; 1447 : 
; 1448 : 		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  0003d	8b f2		 mov	 esi, edx
  0003f	81 e6 00 0e 00
	00		 and	 esi, 3584		; 00000e00H
  00045	41		 inc	 ecx

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  00046	81 fe 00 04 00
	00		 cmp	 esi, 1024		; 00000400H
  0004c	75 0c		 jne	 SHORT $LN9@Ifmt
  0004e	5f		 pop	 edi
  0004f	b2 6f		 mov	 dl, 111			; 0000006fH
  00051	5e		 pop	 esi
  00052	88 11		 mov	 BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

  00054	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  00058	5b		 pop	 ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

  00059	c3		 ret	 0
$LN9@Ifmt:

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  0005a	81 fe 00 08 00
	00		 cmp	 esi, 2048		; 00000800H
  00060	74 0d		 je	 SHORT $LN7@Ifmt
  00062	8a 57 01	 mov	 dl, BYTE PTR [edi+1]
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	88 11		 mov	 BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

  00069	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  0006d	5b		 pop	 ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

  0006e	c3		 ret	 0
$LN7@Ifmt:

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  0006f	02 d2		 add	 dl, dl
  00071	02 d2		 add	 dl, dl
  00073	02 d2		 add	 dl, dl
  00075	f6 d2		 not	 dl
  00077	80 e2 20	 and	 dl, 32			; 00000020H
  0007a	5f		 pop	 edi
  0007b	80 ca 58	 or	 dl, 88			; 00000058H
  0007e	5e		 pop	 esi
  0007f	88 11		 mov	 BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

  00081	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  00085	5b		 pop	 ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

  00086	c3		 ret	 0
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
_TEXT	ENDS
PUBLIC	??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*, COMDAT
; _this$ = ecx

; 601  : 		{	// pretend to get designated element

  00000	8b c1		 mov	 eax, ecx

; 602  : 		return (*this);
; 603  : 		}

  00002	c3		 ret	 0
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
_TEXT	ENDS
PUBLIC	??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++, COMDAT
; _this$ = ecx

; 606  : 		{	// pretend to preincrement

  00000	8b c1		 mov	 eax, ecx

; 607  : 		return (*this);
; 608  : 		}

  00002	c3		 ret	 0
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
_TEXT	ENDS
PUBLIC	?decimal_point@?$numpunct@D@std@@QBEDXZ		; std::numpunct<char>::decimal_point
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?decimal_point@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
?decimal_point@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::decimal_point, COMDAT
; _this$ = ecx

; 70   : 		return (do_decimal_point());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00005	ff e2		 jmp	 edx
?decimal_point@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::decimal_point
_TEXT	ENDS
PUBLIC	?thousands_sep@?$numpunct@D@std@@QBEDXZ		; std::numpunct<char>::thousands_sep
; Function compile flags: /Ogtpy
;	COMDAT ?thousands_sep@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
?thousands_sep@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::thousands_sep, COMDAT
; _this$ = ecx

; 75   : 		return (do_thousands_sep());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00005	ff e2		 jmp	 edx
?thousands_sep@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::thousands_sep
_TEXT	ENDS
PUBLIC	?_Tidy@?$numpunct@D@std@@AAEXXZ			; std::numpunct<char>::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$numpunct@D@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$numpunct@D@std@@AAEXXZ PROC			; std::numpunct<char>::_Tidy, COMDAT
; _this$ = ecx

; 190  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 191  : 		_DELETE_CRT_VEC((void *)_Grouping);

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 192  : 		_DELETE_CRT_VEC((void *)_Falsename);

  0000c	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 193  : 		_DELETE_CRT_VEC((void *)_Truename);

  00015	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00018	52		 push	 edx
  00019	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	5e		 pop	 esi

; 194  : 		}

  00022	c3		 ret	 0
?_Tidy@?$numpunct@D@std@@AAEXXZ ENDP			; std::numpunct<char>::_Tidy
_TEXT	ENDS
PUBLIC	??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z	; std::_Maklocchr<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z PROC		; std::_Maklocchr<char>, COMDAT

; 603  : 	return ((_Elem)(unsigned char)_Byte);

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Byte$[esp-4]

; 604  : 	}

  00004	c3		 ret	 0
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z ENDP		; std::_Maklocchr<char>
_TEXT	ENDS
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
; Function compile flags: /Ogtpy
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 624  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	56		 push	 esi
  00001	57		 push	 edi

; 625  : 	size_t _Count = ::strlen(_Ptr) + 1;

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	8b c7		 mov	 eax, edi
  00008	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL8@Maklocstr:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL8@Maklocstr
  00017	2b c2		 sub	 eax, edx
  00019	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 626  : 	_Elem *_Ptrdest = _NEW_CRT _Elem[_Count];

  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00022	83 c4 04	 add	 esp, 4

; 627  : 
; 628  : #pragma warning(push)
; 629  : #pragma warning(disable: 6011)
; 630  : 	/* prefast noise */
; 631  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  00025	8b c8		 mov	 ecx, eax
  00027	85 f6		 test	 esi, esi
  00029	76 10		 jbe	 SHORT $LN1@Maklocstr
  0002b	eb 03 8d 49 00	 npad	 5
$LL3@Maklocstr:

; 632  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  00030	8a 17		 mov	 dl, BYTE PTR [edi]
  00032	88 11		 mov	 BYTE PTR [ecx], dl
  00034	4e		 dec	 esi
  00035	41		 inc	 ecx
  00036	47		 inc	 edi
  00037	85 f6		 test	 esi, esi
  00039	77 f5		 ja	 SHORT $LL3@Maklocstr
$LN1@Maklocstr:
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi

; 633  : 	return (_Ptrdest);
; 634  : #pragma warning(pop)
; 635  : 	}

  0003d	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
PUBLIC	??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 1
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=, COMDAT
; _this$ = ecx

; 592  : 		{	// store element and increment

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 593  : 		if (_Strbuf == 0
; 594  : 			|| traits_type::eq_int_type(_Traits::eof(),
; 595  : 				_Strbuf->sputc(_Right)))

  00003	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00006	85 c9		 test	 ecx, ecx
  00008	74 3b		 je	 SHORT $LN1@operator@20
  0000a	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0000d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00010	74 21		 je	 SHORT $LN7@operator@20
  00012	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00015	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00018	7e 19		 jle	 SHORT $LN7@operator@20
  0001a	8b c2		 mov	 eax, edx
  0001c	ff 08		 dec	 DWORD PTR [eax]
  0001e	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00026	89 11		 mov	 DWORD PTR [ecx], edx
  00028	8a 4c 24 08	 mov	 cl, BYTE PTR __Right$[esp]
  0002c	88 08		 mov	 BYTE PTR [eax], cl
  0002e	0f b6 c1	 movzx	 eax, cl
  00031	eb 0d		 jmp	 SHORT $LN8@operator@20
$LN7@operator@20:
  00033	0f b6 54 24 08	 movzx	 edx, BYTE PTR __Right$[esp]
  00038	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003d	52		 push	 edx
  0003e	ff d0		 call	 eax
$LN8@operator@20:
  00040	83 f8 ff	 cmp	 eax, -1
  00043	75 03		 jne	 SHORT $LN23@operator@20
$LN1@operator@20:

; 596  : 			_Failed = true;

  00045	c6 06 01	 mov	 BYTE PTR [esi], 1
$LN23@operator@20:

; 597  : 		return (*this);

  00048	8b c6		 mov	 eax, esi
  0004a	5e		 pop	 esi

; 598  : 		}

  0004b	c2 04 00	 ret	 4
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
_TEXT	ENDS
PUBLIC	?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z	; std::numpunct<char>::_Init
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0
__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2
__ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
_TEXT	SEGMENT
$T157025 = -28						; size = 8
_this$ = -24						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Lobj$ = 8						; size = 4
__Isdef$ = 12						; size = 1
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z PROC	; std::numpunct<char>::_Init, COMDAT
; _this$ = ecx

; 135  : 		{	// initialize from _Lobj

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d e8	 mov	 DWORD PTR _this$[ebp], ebx

; 136  : 		const lconv *_Ptr = _Lobj._Getlconv();

  00030	e8 00 00 00 00	 call	 _localeconv
  00035	8b f0		 mov	 esi, eax

; 137  : 
; 138  : 		_Grouping = 0;

  00037	33 c0		 xor	 eax, eax
  00039	89 75 ec	 mov	 DWORD PTR __Ptr$[ebp], esi
  0003c	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 139  : 		_Falsename = 0;

  0003f	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 140  : 		_Truename = 0;

  00042	89 43 14	 mov	 DWORD PTR [ebx+20], eax

; 141  : 
; 142  : 		_TRY_BEGIN

  00045	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], eax

; 143  : 		_Grouping = _MAKLOCSTR(char, _Ptr->grouping, _Lobj._Getcvt());

  00048	e8 00 00 00 00	 call	 __Getcvt
  0004d	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00050	8b c7		 mov	 eax, edi
  00052	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL58@Init:
  00055	8a 08		 mov	 cl, BYTE PTR [eax]
  00057	40		 inc	 eax
  00058	84 c9		 test	 cl, cl
  0005a	75 f9		 jne	 SHORT $LL58@Init
  0005c	2b c2		 sub	 eax, edx
  0005e	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00067	83 c4 04	 add	 esp, 4
  0006a	8b c8		 mov	 ecx, eax
  0006c	8d 64 24 00	 npad	 4
$LL15@Init:
  00070	85 f6		 test	 esi, esi
  00072	76 09		 jbe	 SHORT $LN13@Init
  00074	8a 17		 mov	 dl, BYTE PTR [edi]
  00076	88 11		 mov	 BYTE PTR [ecx], dl
  00078	4e		 dec	 esi
  00079	41		 inc	 ecx
  0007a	47		 inc	 edi
  0007b	eb f3		 jmp	 SHORT $LL15@Init
$LN13@Init:
  0007d	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 144  : 		_Falsename = _MAKLOCSTR(_Elem, _Lobj._Getfalse(), _Lobj._Getcvt());

  00080	e8 00 00 00 00	 call	 __Getcvt
  00085	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_05LAPONLG@false?$AA@
  0008a	8b c7		 mov	 eax, edi
  0008c	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0008f	90		 npad	 1
$LL59@Init:
  00090	8a 08		 mov	 cl, BYTE PTR [eax]
  00092	40		 inc	 eax
  00093	84 c9		 test	 cl, cl
  00095	75 f9		 jne	 SHORT $LL59@Init
  00097	2b c2		 sub	 eax, edx
  00099	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0009c	56		 push	 esi
  0009d	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000a2	83 c4 04	 add	 esp, 4
  000a5	8b c8		 mov	 ecx, eax
$LL24@Init:
  000a7	85 f6		 test	 esi, esi
  000a9	76 09		 jbe	 SHORT $LN22@Init
  000ab	8a 17		 mov	 dl, BYTE PTR [edi]
  000ad	88 11		 mov	 BYTE PTR [ecx], dl
  000af	4e		 dec	 esi
  000b0	41		 inc	 ecx
  000b1	47		 inc	 edi
  000b2	eb f3		 jmp	 SHORT $LL24@Init
$LN22@Init:
  000b4	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 145  : 		_Truename = _MAKLOCSTR(_Elem, _Lobj._Gettrue(), _Lobj._Getcvt());

  000b7	e8 00 00 00 00	 call	 __Getcvt
  000bc	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_04LOAJBDKD@true?$AA@
  000c1	8b c7		 mov	 eax, edi
  000c3	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL60@Init:
  000c6	8a 08		 mov	 cl, BYTE PTR [eax]
  000c8	40		 inc	 eax
  000c9	84 c9		 test	 cl, cl
  000cb	75 f9		 jne	 SHORT $LL60@Init
  000cd	2b c2		 sub	 eax, edx
  000cf	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  000d2	56		 push	 esi
  000d3	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000d8	83 c4 04	 add	 esp, 4
  000db	8b c8		 mov	 ecx, eax
  000dd	8d 49 00	 npad	 3
$LL33@Init:
  000e0	85 f6		 test	 esi, esi
  000e2	76 09		 jbe	 SHORT $LN31@Init
  000e4	8a 17		 mov	 dl, BYTE PTR [edi]
  000e6	88 11		 mov	 BYTE PTR [ecx], dl
  000e8	4e		 dec	 esi
  000e9	41		 inc	 ecx
  000ea	47		 inc	 edi
  000eb	eb f3		 jmp	 SHORT $LL33@Init
$LN31@Init:
  000ed	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  000f0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 149  : 		_CATCH_END
; 150  : 
; 151  : 		_Dp = _MAKLOCCHR(_Elem, _Ptr->decimal_point[0], _Lobj._Getcvt());

  000f7	e8 00 00 00 00	 call	 __Getcvt
  000fc	8b 75 ec	 mov	 esi, DWORD PTR __Ptr$[ebp]
  000ff	8b 06		 mov	 eax, DWORD PTR [esi]
  00101	8a 08		 mov	 cl, BYTE PTR [eax]
  00103	88 4b 0c	 mov	 BYTE PTR [ebx+12], cl

; 152  : 		_Kseparator =
; 153  : 			_MAKLOCCHR(_Elem, _Ptr->thousands_sep[0], _Lobj._Getcvt());

  00106	e8 00 00 00 00	 call	 __Getcvt

; 154  : 
; 155  : 		if (_Isdef)

  0010b	80 7d 0c 00	 cmp	 BYTE PTR __Isdef$[ebp], 0
  0010f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00112	8a 02		 mov	 al, BYTE PTR [edx]
  00114	88 43 0d	 mov	 BYTE PTR [ebx+13], al
  00117	74 2d		 je	 SHORT $LN1@Init

; 156  : 			{	// apply defaults for required facets
; 157  : 			_Grouping = _MAKLOCSTR(char, "", _Lobj._Getcvt());

  00119	e8 00 00 00 00	 call	 __Getcvt
  0011e	8d 4d e4	 lea	 ecx, DWORD PTR $T157025[ebp]
  00121	51		 push	 ecx
  00122	6a 00		 push	 0
  00124	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00129	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  0012e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00131	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 158  : 			_Dp = _MAKLOCCHR(_Elem, '.', _Lobj._Getcvt());

  00134	e8 00 00 00 00	 call	 __Getcvt
  00139	c6 43 0c 2e	 mov	 BYTE PTR [ebx+12], 46	; 0000002eH

; 159  : 			_Kseparator = _MAKLOCCHR(_Elem, ',', _Lobj._Getcvt());

  0013d	e8 00 00 00 00	 call	 __Getcvt
  00142	c6 43 0d 2c	 mov	 BYTE PTR [ebx+13], 44	; 0000002cH
$LN1@Init:

; 160  : 			}
; 161  : 		}

  00146	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00149	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00150	59		 pop	 ecx
  00151	5f		 pop	 edi
  00152	5e		 pop	 esi
  00153	5b		 pop	 ebx
  00154	8b e5		 mov	 esp, ebp
  00156	5d		 pop	 ebp
  00157	c2 08 00	 ret	 8
__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0:

; 146  : 		_CATCH_ALL
; 147  : 		_Tidy();

  0015a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0015d	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@D@std@@AAEXXZ ; std::numpunct<char>::_Tidy

; 148  : 		_RERAISE;

  00162	6a 00		 push	 0
  00164	6a 00		 push	 0
  00166	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN62@Init:
  0016b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ENDP	; std::numpunct<char>::_Init
PUBLIC	??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@@Z ; std::_Checked_base<HostDevice *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@@Z PROC ; std::_Checked_base<HostDevice *>, COMDAT

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]

; 1166 : 	}

  00006	c3		 ret	 0
??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@@Z ENDP ; std::_Checked_base<HostDevice *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T157154 = -8						; size = 1
$T157155 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
$T157156 = 16						; size = 1
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<HostDevice *,HostDevice *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

  00000	83 ec 08	 sub	 esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);
; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

  00003	8b 54 24 14	 mov	 edx, DWORD PTR $T157156[esp+4]
  00007	53		 push	 ebx
  00008	8b 5c 24 10	 mov	 ebx, DWORD PTR __First$[esp+8]
  0000c	56		 push	 esi
  0000d	8b 74 24 18	 mov	 esi, DWORD PTR __Last$[esp+12]
  00011	57		 push	 edi
  00012	8b 7c 24 20	 mov	 edi, DWORD PTR __Dest$[esp+16]
  00016	32 c0		 xor	 al, al
  00018	88 44 24 10	 mov	 BYTE PTR $T157155[esp+20], al
  0001c	8b 4c 24 10	 mov	 ecx, DWORD PTR $T157155[esp+20]
  00020	88 44 24 0c	 mov	 BYTE PTR $T157154[esp+20], al
  00024	8b 44 24 0c	 mov	 eax, DWORD PTR $T157154[esp+20]
  00028	50		 push	 eax
  00029	51		 push	 ecx
  0002a	52		 push	 edx
  0002b	57		 push	 edi
  0002c	56		 push	 esi
  0002d	53		 push	 ebx
  0002e	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
  00033	2b f3		 sub	 esi, ebx
  00035	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0003a	f7 ee		 imul	 esi
  0003c	c1 fa 06	 sar	 edx, 6
  0003f	8b c2		 mov	 eax, edx
  00041	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00044	03 c2		 add	 eax, edx
  00046	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	03 c7		 add	 eax, edi
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx

; 2486 : 	return _Result;
; 2487 : 	}

  00054	83 c4 08	 add	 esp, 8
  00057	c3		 ret	 0
??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	??E?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE?AV012@H@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??E?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE?AV012@H@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator++, COMDAT
; _this$ = ecx

; 255  : 			{	// postincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 256  : 			_Myt_iter _Tmp = *this;

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00008	57		 push	 edi
  00009	8b 7c 24 0c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000d	89 07		 mov	 DWORD PTR [edi], eax
  0000f	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 257  : 			++*this;

  00012	85 c0		 test	 eax, eax
  00014	75 0b		 jne	 SHORT $LN25@operator@21
  00016	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0001b	8b 06		 mov	 eax, DWORD PTR [esi]
  0001d	85 c0		 test	 eax, eax
  0001f	74 04		 je	 SHORT $LN19@operator@21
$LN25@operator@21:
  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	eb 02		 jmp	 SHORT $LN20@operator@21
$LN19@operator@21:
  00025	33 c0		 xor	 eax, eax
$LN20@operator@21:
  00027	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002a	3b 50 14	 cmp	 edx, DWORD PTR [eax+20]
  0002d	75 05		 jne	 SHORT $LN5@operator@21
  0002f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@21:
  00034	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]

; 258  : 			return (_Tmp);

  00039	8b c7		 mov	 eax, edi
  0003b	5f		 pop	 edi
  0003c	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0003f	5e		 pop	 esi

; 259  : 			}

  00040	c2 08 00	 ret	 8
??E?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE?AV012@H@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator++
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1139 : 		return _It._Checked_iterator_base();

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1140 : 	}

  00007	c3		 ret	 0
??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	??_C@_09EPIDNIBP@SplashDlg?$AA@			; `string'
PUBLIC	??_C@_09ODDMBMG@CustomDlg?$AA@			; `string'
PUBLIC	_cleanup
;	COMDAT ??_C@_09EPIDNIBP@SplashDlg?$AA@
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
CONST	SEGMENT
??_C@_09EPIDNIBP@SplashDlg?$AA@ DB 'SplashDlg', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09ODDMBMG@CustomDlg?$AA@
CONST	SEGMENT
??_C@_09ODDMBMG@CustomDlg?$AA@ DB 'CustomDlg', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _cleanup
_TEXT	SEGMENT
_driverUnloadDisabled$137961 = -8			; size = 4
_dwResult$137962 = -4					; size = 4
_cleanup PROC						; COMDAT

; 238  : 	/* Cleanup the GDI fonts */
; 239  : 	if (hFixedFont != NULL)

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _hFixedFont
  00005	83 ec 08	 sub	 esp, 8
  00008	56		 push	 esi
  00009	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__DeleteObject@4
  0000f	57		 push	 edi
  00010	85 c0		 test	 eax, eax
  00012	74 03		 je	 SHORT $LN17@cleanup

; 240  : 		DeleteObject (hFixedFont);

  00014	50		 push	 eax
  00015	ff d6		 call	 esi
$LN17@cleanup:

; 241  : 	if (hFixedDigitFont != NULL)

  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR _hFixedDigitFont
  0001c	85 c0		 test	 eax, eax
  0001e	74 03		 je	 SHORT $LN16@cleanup

; 242  : 		DeleteObject (hFixedDigitFont);

  00020	50		 push	 eax
  00021	ff d6		 call	 esi
$LN16@cleanup:

; 243  : 	if (hBoldFont != NULL)

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR _hBoldFont
  00028	85 c0		 test	 eax, eax
  0002a	74 03		 je	 SHORT $LN15@cleanup

; 244  : 		DeleteObject (hBoldFont);

  0002c	50		 push	 eax
  0002d	ff d6		 call	 esi
$LN15@cleanup:

; 245  : 	if (hTitleFont != NULL)

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR _hTitleFont
  00034	85 c0		 test	 eax, eax
  00036	74 03		 je	 SHORT $LN14@cleanup

; 246  : 		DeleteObject (hTitleFont);

  00038	50		 push	 eax
  00039	ff d6		 call	 esi
$LN14@cleanup:

; 247  : 	if (hUserFont != NULL)

  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserFont
  00040	85 c0		 test	 eax, eax
  00042	74 03		 je	 SHORT $LN13@cleanup

; 248  : 		DeleteObject (hUserFont);

  00044	50		 push	 eax
  00045	ff d6		 call	 esi
$LN13@cleanup:

; 249  : 	if (hUserUnderlineFont != NULL)

  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserUnderlineFont
  0004c	85 c0		 test	 eax, eax
  0004e	74 03		 je	 SHORT $LN12@cleanup

; 250  : 		DeleteObject (hUserUnderlineFont);

  00050	50		 push	 eax
  00051	ff d6		 call	 esi
$LN12@cleanup:

; 251  : 	if (hUserBoldFont != NULL)

  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserBoldFont
  00058	85 c0		 test	 eax, eax
  0005a	74 03		 je	 SHORT $LN11@cleanup

; 252  : 		DeleteObject (hUserBoldFont);

  0005c	50		 push	 eax
  0005d	ff d6		 call	 esi
$LN11@cleanup:

; 253  : 	if (hUserUnderlineBoldFont != NULL)

  0005f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hUserUnderlineBoldFont@@3PAUHFONT__@@A ; hUserUnderlineBoldFont
  00064	85 c0		 test	 eax, eax
  00066	74 03		 je	 SHORT $LN10@cleanup

; 254  : 		DeleteObject (hUserUnderlineBoldFont);

  00068	50		 push	 eax
  00069	ff d6		 call	 esi
$LN10@cleanup:

; 255  : 
; 256  : 	/* Cleanup our dialog class */
; 257  : 	if (hDlgClass)

  0006b	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?hDlgClass@@3GA, 0 ; hDlgClass
  00073	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__UnregisterClassA@8
  00079	74 0d		 je	 SHORT $LN9@cleanup

; 258  : 		UnregisterClass (TC_DLG_CLASS, hInst);

  0007b	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  00080	50		 push	 eax
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_09ODDMBMG@CustomDlg?$AA@
  00086	ff d6		 call	 esi
$LN9@cleanup:

; 259  : 	if (hSplashClass)

  00088	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?hSplashClass@@3GA, 0 ; hSplashClass
  00090	74 0e		 je	 SHORT $LN8@cleanup

; 260  : 		UnregisterClass (TC_SPLASH_CLASS, hInst);

  00092	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00098	51		 push	 ecx
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_09EPIDNIBP@SplashDlg?$AA@
  0009e	ff d6		 call	 esi
$LN8@cleanup:

; 261  : 
; 262  : 	/* Close the device driver handle */
; 263  : 	if (hDriver != INVALID_HANDLE_VALUE)

  000a0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__CloseHandle@4
  000a6	83 ce ff	 or	 esi, -1
  000a9	39 35 00 00 00
	00		 cmp	 DWORD PTR _hDriver, esi
  000af	74 61		 je	 SHORT $LN2@cleanup

; 264  : 	{
; 265  : 		// Unload driver mode if possible (non-install mode) 
; 266  : 		if (IsNonInstallMode ())

  000b1	e8 00 00 00 00	 call	 _IsNonInstallMode
  000b6	85 c0		 test	 eax, eax
  000b8	74 4a		 je	 SHORT $LN6@cleanup

; 267  : 		{
; 268  : 			// If a dismount was forced in the lifetime of the driver, Windows may later prevent it to be loaded again from
; 269  : 			// the same path. Therefore, the driver will not be unloaded even though it was loaded in non-install mode.
; 270  : 			int driverUnloadDisabled;
; 271  : 			DWORD dwResult;
; 272  : 
; 273  : 			if (!DeviceIoControl (hDriver, TC_IOCTL_IS_DRIVER_UNLOAD_DISABLED, NULL, 0, &driverUnloadDisabled, sizeof (driverUnloadDisabled), &dwResult, NULL))

  000ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hDriver
  000c0	6a 00		 push	 0
  000c2	8d 54 24 10	 lea	 edx, DWORD PTR _dwResult$137962[esp+20]
  000c6	52		 push	 edx
  000c7	6a 04		 push	 4
  000c9	8d 44 24 14	 lea	 eax, DWORD PTR _driverUnloadDisabled$137961[esp+28]
  000cd	50		 push	 eax
  000ce	6a 00		 push	 0
  000d0	6a 00		 push	 0
  000d2	68 24 20 22 00	 push	 2236452			; 00222024H
  000d7	51		 push	 ecx
  000d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  000de	85 c0		 test	 eax, eax
  000e0	75 0b		 jne	 SHORT $LN5@cleanup

; 274  : 				driverUnloadDisabled = 0;

  000e2	89 44 24 08	 mov	 DWORD PTR _driverUnloadDisabled$137961[esp+16], eax

; 277  : 				DriverUnload ();

  000e6	e8 00 00 00 00	 call	 _DriverUnload

; 278  : 			else

  000eb	eb 25		 jmp	 SHORT $LN2@cleanup
$LN5@cleanup:

; 275  : 
; 276  : 			if (!driverUnloadDisabled)

  000ed	83 7c 24 08 00	 cmp	 DWORD PTR _driverUnloadDisabled$137961[esp+16], 0
  000f2	75 07		 jne	 SHORT $LN4@cleanup

; 277  : 				DriverUnload ();

  000f4	e8 00 00 00 00	 call	 _DriverUnload

; 278  : 			else

  000f9	eb 17		 jmp	 SHORT $LN2@cleanup
$LN4@cleanup:

; 279  : 			{
; 280  : 				CloseHandle (hDriver);

  000fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hDriver
  00101	52		 push	 edx

; 281  : 				hDriver = INVALID_HANDLE_VALUE;
; 282  : 			}
; 283  : 		}
; 284  : 		else

  00102	eb 06		 jmp	 SHORT $LN27@cleanup
$LN6@cleanup:

; 285  : 		{
; 286  : 			CloseHandle (hDriver);

  00104	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDriver
  00109	50		 push	 eax
$LN27@cleanup:
  0010a	ff d7		 call	 edi

; 287  : 			hDriver = INVALID_HANDLE_VALUE;

  0010c	89 35 00 00 00
	00		 mov	 DWORD PTR _hDriver, esi
$LN2@cleanup:

; 288  : 		}
; 289  : 	}
; 290  : 
; 291  : 	if (ConfigBuffer != NULL)

  00112	a1 00 00 00 00	 mov	 eax, DWORD PTR _ConfigBuffer
  00117	85 c0		 test	 eax, eax
  00119	74 13		 je	 SHORT $LN1@cleanup

; 292  : 	{
; 293  : 		free (ConfigBuffer);

  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 _free
  00121	83 c4 04	 add	 esp, 4

; 294  : 		ConfigBuffer = NULL;

  00124	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _ConfigBuffer, 0
$LN1@cleanup:

; 295  : 	}
; 296  : 
; 297  : 	CoUninitialize ();

  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoUninitialize@0

; 298  : 
; 299  : 	CloseSysEncMutex ();

  00134	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hSysEncMutex@@3RAXA ; hSysEncMutex
  0013a	85 c9		 test	 ecx, ecx
  0013c	74 27		 je	 SHORT $LN22@cleanup
  0013e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hSysEncMutex@@3RAXA ; hSysEncMutex
  00144	52		 push	 edx
  00145	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  0014b	85 c0		 test	 eax, eax
  0014d	74 16		 je	 SHORT $LN22@cleanup
  0014f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hSysEncMutex@@3RAXA ; hSysEncMutex
  00154	50		 push	 eax
  00155	ff d7		 call	 edi
  00157	85 c0		 test	 eax, eax
  00159	74 0a		 je	 SHORT $LN22@cleanup
  0015b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hSysEncMutex@@3RAXA, 0 ; hSysEncMutex
$LN22@cleanup:
  00165	5f		 pop	 edi
  00166	5e		 pop	 esi

; 300  : 
; 301  : #ifndef SETUP
; 302  : 	try
; 303  : 	{
; 304  : 		if (SecurityToken::IsInitialized())
; 305  : 			SecurityToken::CloseLibrary();
; 306  : 	}
; 307  : 	catch (...) { }
; 308  : 
; 309  : 	EncryptionThreadPoolStop();
; 310  : #endif
; 311  : }

  00167	83 c4 08	 add	 esp, 8
  0016a	c3		 ret	 0
_cleanup ENDP
_TEXT	ENDS
PUBLIC	_ToHyperlink
; Function compile flags: /Ogtpy
;	COMDAT _ToHyperlink
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_ctrlId$ = 12						; size = 4
_ToHyperlink PROC					; COMDAT

; 533  : 	return ToCustHyperlink (hwndDlg, ctrlId, hUserUnderlineFont);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserUnderlineFont
  00005	8b 4c 24 08	 mov	 ecx, DWORD PTR _ctrlId$[esp-4]
  00009	8b 54 24 04	 mov	 edx, DWORD PTR _hwndDlg$[esp-4]
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	52		 push	 edx
  00010	e8 00 00 00 00	 call	 _ToCustHyperlink
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 534  : }

  00018	c3		 ret	 0
_ToHyperlink ENDP
_TEXT	ENDS
PUBLIC	_BrowseFiles
; Function compile flags: /Ogtpy
;	COMDAT _BrowseFiles
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_stringId$ = 12						; size = 4
_lpszFileName$ = 16					; size = 4
_keepHistory$ = 20					; size = 4
_saveMode$ = 24						; size = 4
_browseFilter$ = 28					; size = 4
_BrowseFiles PROC					; COMDAT

; 3367 : 	return BrowseFilesInDir (hwndDlg, stringId, NULL, lpszFileName, keepHistory, saveMode, browseFilter);

  00000	8b 44 24 18	 mov	 eax, DWORD PTR _browseFilter$[esp-4]
  00004	8b 4c 24 14	 mov	 ecx, DWORD PTR _saveMode$[esp-4]
  00008	8b 54 24 10	 mov	 edx, DWORD PTR _keepHistory$[esp-4]
  0000c	6a 00		 push	 0
  0000e	6a 00		 push	 0
  00010	50		 push	 eax
  00011	8b 44 24 18	 mov	 eax, DWORD PTR _lpszFileName$[esp+8]
  00015	51		 push	 ecx
  00016	8b 4c 24 18	 mov	 ecx, DWORD PTR _stringId$[esp+12]
  0001a	52		 push	 edx
  0001b	8b 54 24 18	 mov	 edx, DWORD PTR _hwndDlg$[esp+16]
  0001f	50		 push	 eax
  00020	6a 00		 push	 0
  00022	51		 push	 ecx
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?BrowseFilesInDir@@YAHPAUHWND__@@PAD11HHPA_WPB_W3@Z ; BrowseFilesInDir
  00029	83 c4 24	 add	 esp, 36			; 00000024H

; 3368 : }

  0002c	c3		 ret	 0
_BrowseFiles ENDP
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
tv130 = 8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1262 : 		{	// erase elements [_Off, _Off + _Count)

  00000	53		 push	 ebx

; 1263 : 		if (_Mysize < _Off)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	73 05		 jae	 SHORT $LN3@erase

; 1264 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@erase:

; 1265 : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c3		 sub	 eax, ebx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $LN2@erase

; 1266 : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$LN2@erase:

; 1267 : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 55		 jbe	 SHORT $LN30@erase

; 1268 : 			{	// move elements down
; 1269 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1270 : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	55		 push	 ebp
  0002a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0002d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00030	72 09		 jb	 SHORT $LN8@erase
  00032	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00035	89 54 24 14	 mov	 DWORD PTR tv130[esp+12], edx
  00039	eb 04		 jmp	 SHORT $LN9@erase
$LN8@erase:
  0003b	89 6c 24 14	 mov	 DWORD PTR tv130[esp+12], ebp
$LN9@erase:
  0003f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00042	72 05		 jb	 SHORT $LN12@erase
  00044	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00047	eb 02		 jmp	 SHORT $LN13@erase
$LN12@erase:
  00049	8b d5		 mov	 edx, ebp
$LN13@erase:
  0004b	2b c7		 sub	 eax, edi
  0004d	50		 push	 eax
  0004e	8b 44 24 18	 mov	 eax, DWORD PTR tv130[esp+16]
  00052	03 c3		 add	 eax, ebx
  00054	03 c7		 add	 eax, edi
  00056	50		 push	 eax
  00057	2b cb		 sub	 ecx, ebx
  00059	51		 push	 ecx
  0005a	03 d3		 add	 edx, ebx
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _memmove_s

; 1271 : 			size_type _Newsize = _Mysize - _Count;

  00062	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00065	2b c7		 sub	 eax, edi
  00067	83 c4 10	 add	 esp, 16			; 00000010H

; 1272 : 			_Eos(_Newsize);

  0006a	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0006e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00071	72 03		 jb	 SHORT $LN26@erase
  00073	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN26@erase:
  00076	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  0007a	5d		 pop	 ebp
$LN30@erase:
  0007b	5f		 pop	 edi

; 1273 : 			}
; 1274 : 		return (*this);

  0007c	8b c6		 mov	 eax, esi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx

; 1275 : 		}

  00080	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Function compile flags: /Ogtpy
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 1795 : 		{	// look for [_Ptr, <null>) beginnng at or after _Off

  00000	56		 push	 esi

; 1796 : 		_DEBUG_POINTER(_Ptr);
; 1797 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@find@2:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@find@2
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	8b 44 24 14	 mov	 eax, DWORD PTR __Off$[esp+8]
  0001e	50		 push	 eax
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 1798 : 		}

  00027	c2 08 00	 ret	 8
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
PUBLIC	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
; Function compile flags: /Ogtpy
;	COMDAT ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind, COMDAT
; _this$ = ecx

; 1837 : 		{	// look for [_Ptr, <null>) beginning before _Off

  00000	56		 push	 esi

; 1838 : 		_DEBUG_POINTER(_Ptr);
; 1839 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@rfind@2:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@rfind@2
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	8b 44 24 14	 mov	 eax, DWORD PTR __Off$[esp+8]
  0001e	50		 push	 eax
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 1840 : 		}

  00027	c2 08 00	 ret	 8
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Ogtpy
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 2025 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)

  00000	56		 push	 esi

; 2026 : 		_DEBUG_POINTER(_Ptr);
; 2027 : 		return (compare(0, _Mysize, _Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@compare@3:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@compare@3
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001d	56		 push	 esi
  0001e	50		 push	 eax
  0001f	6a 00		 push	 0
  00021	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 2028 : 		}

  00028	c2 04 00	 ret	 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z
_TEXT	SEGMENT
__Copied$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Ptr_size$ = 12					; size = 4
__Count$ = 16						; size = 4
?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Xsgetn_s, COMDAT
; _this$ = ecx

; 332  : 		{	// get _Count characters from stream

  00000	51		 push	 ecx
  00001	55		 push	 ebp

; 333  : 		int_type _Meta;
; 334  : 		streamsize _Stream_size, _Size, _Copied;
; 335  : 
; 336  : 		for (_Copied = 0; 0 < _Count; )

  00002	8b 6c 24 14	 mov	 ebp, DWORD PTR __Count$[esp+4]
  00006	56		 push	 esi
  00007	33 f6		 xor	 esi, esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	89 74 24 0c	 mov	 DWORD PTR __Copied$[esp+16], esi
  00010	85 ed		 test	 ebp, ebp
  00012	7e 71		 jle	 SHORT $LN31@Xsgetn_s
  00014	53		 push	 ebx
  00015	8b 5c 24 18	 mov	 ebx, DWORD PTR __Ptr$[esp+16]
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL7@Xsgetn_s:

; 337  : 			if (0 < (_Stream_size = _Gnavail()))

  00020	8b cf		 mov	 ecx, edi
  00022	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
  00027	85 c0		 test	 eax, eax
  00029	7e 35		 jle	 SHORT $LN5@Xsgetn_s

; 338  : 				{	// copy from read buffer
; 339  : 				_Size = _Stream_size;
; 340  : 				if (_Count < _Size)

  0002b	3b e8		 cmp	 ebp, eax
  0002d	8b f0		 mov	 esi, eax
  0002f	7d 02		 jge	 SHORT $LN4@Xsgetn_s

; 341  : 					_Size = _Count;

  00031	8b f5		 mov	 esi, ebp
$LN4@Xsgetn_s:

; 342  : 				_Traits_helper::copy_s<_Traits>(_Ptr, _Ptr_size, gptr(), _Size);

  00033	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	8b 54 24 1c	 mov	 edx, DWORD PTR __Ptr_size$[esp+16]
  0003c	56		 push	 esi
  0003d	51		 push	 ecx
  0003e	52		 push	 edx
  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 _memcpy_s

; 343  : 				_Ptr += _Size;
; 344  : 				_Copied += _Size;
; 345  : 				_Count -= _Size;
; 346  : 				gbump((int)_Size);

  00045	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00048	29 30		 sub	 DWORD PTR [eax], esi
  0004a	01 74 24 20	 add	 DWORD PTR __Copied$[esp+36], esi
  0004e	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00051	03 de		 add	 ebx, esi
  00053	2b ee		 sub	 ebp, esi
  00055	83 c4 10	 add	 esp, 16			; 00000010H
  00058	01 30		 add	 DWORD PTR [eax], esi
  0005a	8b 74 24 10	 mov	 esi, DWORD PTR __Copied$[esp+20]
  0005e	eb 17		 jmp	 SHORT $LN1@Xsgetn_s
$LN5@Xsgetn_s:

; 347  : 				}
; 348  : 			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  00060	8b 07		 mov	 eax, DWORD PTR [edi]
  00062	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00065	8b cf		 mov	 ecx, edi
  00067	ff d2		 call	 edx
  00069	83 f8 ff	 cmp	 eax, -1
  0006c	74 0d		 je	 SHORT $LN30@Xsgetn_s

; 349  : 				break;	// end of file, quit
; 350  : 			else
; 351  : 				{	// get a single character
; 352  : 				*_Ptr++ = _Traits::to_char_type(_Meta);
; 353  : 				++_Copied;

  0006e	46		 inc	 esi
  0006f	88 03		 mov	 BYTE PTR [ebx], al
  00071	43		 inc	 ebx
  00072	89 74 24 10	 mov	 DWORD PTR __Copied$[esp+20], esi

; 354  : 				--_Count;

  00076	4d		 dec	 ebp
$LN1@Xsgetn_s:

; 333  : 		int_type _Meta;
; 334  : 		streamsize _Stream_size, _Size, _Copied;
; 335  : 
; 336  : 		for (_Copied = 0; 0 < _Count; )

  00077	85 ed		 test	 ebp, ebp
  00079	7f a5		 jg	 SHORT $LL7@Xsgetn_s
$LN30@Xsgetn_s:
  0007b	5b		 pop	 ebx
  0007c	5f		 pop	 edi

; 355  : 				}
; 356  : 
; 357  : 		return (_Copied);

  0007d	8b c6		 mov	 eax, esi
  0007f	5e		 pop	 esi
  00080	5d		 pop	 ebp

; 358  : 		}

  00081	59		 pop	 ecx
  00082	c2 0c 00	 ret	 12			; 0000000cH
$LN31@Xsgetn_s:
  00085	5f		 pop	 edi

; 355  : 				}
; 356  : 
; 357  : 		return (_Copied);

  00086	8b c6		 mov	 eax, esi
  00088	5e		 pop	 esi
  00089	5d		 pop	 ebp

; 358  : 		}

  0008a	59		 pop	 ecx
  0008b	c2 0c 00	 ret	 12			; 0000000cH
?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Xsgetn_s
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z
_TEXT	SEGMENT
__Copied$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn, COMDAT
; _this$ = ecx

; 362  : 		{	// put _Count characters to stream

  00000	51		 push	 ecx
  00001	55		 push	 ebp

; 363  : 		streamsize _Stream_size, _Size, _Copied;
; 364  : 
; 365  : 		for (_Copied = 0; 0 < _Count; )

  00002	8b 6c 24 10	 mov	 ebp, DWORD PTR __Count$[esp+4]
  00006	56		 push	 esi
  00007	33 f6		 xor	 esi, esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	89 74 24 0c	 mov	 DWORD PTR __Copied$[esp+16], esi
  00010	85 ed		 test	 ebp, ebp
  00012	7e 6f		 jle	 SHORT $LN31@xsputn
  00014	53		 push	 ebx
  00015	8b 5c 24 18	 mov	 ebx, DWORD PTR __Ptr$[esp+16]
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL7@xsputn:

; 366  : 			if (0 < (_Stream_size = _Pnavail()))

  00020	8b cf		 mov	 ecx, edi
  00022	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
  00027	85 c0		 test	 eax, eax
  00029	7e 31		 jle	 SHORT $LN5@xsputn

; 367  : 				{	// copy to write buffer
; 368  : 				_Size = _Stream_size;
; 369  : 				if (_Count < _Size)

  0002b	3b e8		 cmp	 ebp, eax
  0002d	8b f0		 mov	 esi, eax
  0002f	7d 02		 jge	 SHORT $LN4@xsputn

; 370  : 					_Size = _Count;

  00031	8b f5		 mov	 esi, ebp
$LN4@xsputn:

; 371  : 				_Traits_helper::copy_s<_Traits>(pptr(), _Stream_size, _Ptr, _Size);

  00033	56		 push	 esi
  00034	53		 push	 ebx
  00035	50		 push	 eax
  00036	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 _memcpy_s

; 372  : 				_Ptr += _Size;
; 373  : 				_Copied += _Size;
; 374  : 				_Count -= _Size;
; 375  : 				pbump((int)_Size);

  00041	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00044	29 30		 sub	 DWORD PTR [eax], esi
  00046	01 74 24 20	 add	 DWORD PTR __Copied$[esp+36], esi
  0004a	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  0004d	03 de		 add	 ebx, esi
  0004f	2b ee		 sub	 ebp, esi
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	01 30		 add	 DWORD PTR [eax], esi

; 376  : 				}
; 377  : 			else if (_Traits::eq_int_type(_Traits::eof(),

  00056	8b 74 24 10	 mov	 esi, DWORD PTR __Copied$[esp+20]
  0005a	eb 19		 jmp	 SHORT $LN1@xsputn
$LN5@xsputn:

; 378  : 				overflow(_Traits::to_int_type(*_Ptr))))

  0005c	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  0005f	8b 17		 mov	 edx, DWORD PTR [edi]
  00061	50		 push	 eax
  00062	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00065	8b cf		 mov	 ecx, edi
  00067	ff d0		 call	 eax
  00069	83 f8 ff	 cmp	 eax, -1
  0006c	74 0b		 je	 SHORT $LN30@xsputn

; 379  : 				break;	// single character put failed, quit
; 380  : 			else
; 381  : 				{	// count character successfully put
; 382  : 				++_Ptr;
; 383  : 				++_Copied;

  0006e	46		 inc	 esi
  0006f	43		 inc	 ebx
  00070	89 74 24 10	 mov	 DWORD PTR __Copied$[esp+20], esi

; 384  : 				--_Count;

  00074	4d		 dec	 ebp
$LN1@xsputn:

; 363  : 		streamsize _Stream_size, _Size, _Copied;
; 364  : 
; 365  : 		for (_Copied = 0; 0 < _Count; )

  00075	85 ed		 test	 ebp, ebp
  00077	7f a7		 jg	 SHORT $LL7@xsputn
$LN30@xsputn:
  00079	5b		 pop	 ebx
  0007a	5f		 pop	 edi

; 385  : 				}
; 386  : 
; 387  : 		return (_Copied);

  0007b	8b c6		 mov	 eax, esi
  0007d	5e		 pop	 esi
  0007e	5d		 pop	 ebp

; 388  : 		}

  0007f	59		 pop	 ecx
  00080	c2 08 00	 ret	 8
$LN31@xsputn:
  00083	5f		 pop	 edi

; 385  : 				}
; 386  : 
; 387  : 		return (_Copied);

  00084	8b c6		 mov	 eax, esi
  00086	5e		 pop	 esi
  00087	5d		 pop	 ebp

; 388  : 		}

  00088	59		 pop	 ecx
  00089	c2 08 00	 ret	 8
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z
_TEXT	SEGMENT
__Copied$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Ptr_size$ = 12					; size = 4
__Count$ = 16						; size = 4
?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Xsgetn_s, COMDAT
; _this$ = ecx

; 332  : 		{	// get _Count characters from stream

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	56		 push	 esi
  00003	57		 push	 edi

; 333  : 		int_type _Meta;
; 334  : 		streamsize _Stream_size, _Size, _Copied;
; 335  : 
; 336  : 		for (_Copied = 0; 0 < _Count; )

  00004	8b 7c 24 1c	 mov	 edi, DWORD PTR __Count$[esp+12]
  00008	33 f6		 xor	 esi, esi
  0000a	8b d9		 mov	 ebx, ecx
  0000c	89 74 24 0c	 mov	 DWORD PTR __Copied$[esp+16], esi
  00010	85 ff		 test	 edi, edi
  00012	0f 8e 89 00 00
	00		 jle	 $LN33@Xsgetn_s@2
  00018	55		 push	 ebp
  00019	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  0001d	8d 49 00	 npad	 3
$LL7@Xsgetn_s@2:

; 337  : 			if (0 < (_Stream_size = _Gnavail()))

  00020	8b cb		 mov	 ecx, ebx
  00022	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail
  00027	85 c0		 test	 eax, eax
  00029	7e 41		 jle	 SHORT $LN5@Xsgetn_s@2

; 338  : 				{	// copy from read buffer
; 339  : 				_Size = _Stream_size;
; 340  : 				if (_Count < _Size)

  0002b	3b f8		 cmp	 edi, eax
  0002d	8b f0		 mov	 esi, eax
  0002f	7d 02		 jge	 SHORT $LN4@Xsgetn_s@2

; 341  : 					_Size = _Count;

  00031	8b f7		 mov	 esi, edi
$LN4@Xsgetn_s@2:

; 342  : 				_Traits_helper::copy_s<_Traits>(_Ptr, _Ptr_size, gptr(), _Size);

  00033	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	8b 54 24 1c	 mov	 edx, DWORD PTR __Ptr_size$[esp+16]
  0003c	8d 3c 36	 lea	 edi, DWORD PTR [esi+esi]
  0003f	57		 push	 edi
  00040	51		 push	 ecx
  00041	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  00044	50		 push	 eax
  00045	55		 push	 ebp
  00046	e8 00 00 00 00	 call	 _memcpy_s

; 343  : 				_Ptr += _Size;
; 344  : 				_Copied += _Size;
; 345  : 				_Count -= _Size;
; 346  : 				gbump((int)_Size);

  0004b	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  0004e	29 30		 sub	 DWORD PTR [eax], esi
  00050	29 74 24 30	 sub	 DWORD PTR __Count$[esp+32], esi
  00054	01 74 24 20	 add	 DWORD PTR __Copied$[esp+36], esi
  00058	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  0005b	8b 74 24 20	 mov	 esi, DWORD PTR __Copied$[esp+36]
  0005f	03 ef		 add	 ebp, edi
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	01 38		 add	 DWORD PTR [eax], edi
  00066	8b 7c 24 20	 mov	 edi, DWORD PTR __Count$[esp+16]
  0006a	eb 27		 jmp	 SHORT $LN1@Xsgetn_s@2
$LN5@Xsgetn_s@2:

; 347  : 				}
; 348  : 			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  0006c	8b 13		 mov	 edx, DWORD PTR [ebx]
  0006e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00071	8b cb		 mov	 ecx, ebx
  00073	ff d0		 call	 eax
  00075	0f b7 c0	 movzx	 eax, ax
  00078	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0007d	66 3b c8	 cmp	 cx, ax
  00080	74 15		 je	 SHORT $LN32@Xsgetn_s@2

; 349  : 				break;	// end of file, quit
; 350  : 			else
; 351  : 				{	// get a single character
; 352  : 				*_Ptr++ = _Traits::to_char_type(_Meta);

  00082	66 89 45 00	 mov	 WORD PTR [ebp], ax

; 353  : 				++_Copied;

  00086	46		 inc	 esi
  00087	83 c5 02	 add	 ebp, 2

; 354  : 				--_Count;

  0008a	4f		 dec	 edi
  0008b	89 74 24 10	 mov	 DWORD PTR __Copied$[esp+20], esi
  0008f	89 7c 24 20	 mov	 DWORD PTR __Count$[esp+16], edi
$LN1@Xsgetn_s@2:

; 333  : 		int_type _Meta;
; 334  : 		streamsize _Stream_size, _Size, _Copied;
; 335  : 
; 336  : 		for (_Copied = 0; 0 < _Count; )

  00093	85 ff		 test	 edi, edi
  00095	7f 89		 jg	 SHORT $LL7@Xsgetn_s@2
$LN32@Xsgetn_s@2:
  00097	5d		 pop	 ebp
  00098	5f		 pop	 edi

; 355  : 				}
; 356  : 
; 357  : 		return (_Copied);

  00099	8b c6		 mov	 eax, esi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx

; 358  : 		}

  0009d	59		 pop	 ecx
  0009e	c2 0c 00	 ret	 12			; 0000000cH
$LN33@Xsgetn_s@2:
  000a1	5f		 pop	 edi

; 355  : 				}
; 356  : 
; 357  : 		return (_Copied);

  000a2	8b c6		 mov	 eax, esi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx

; 358  : 		}

  000a6	59		 pop	 ecx
  000a7	c2 0c 00	 ret	 12			; 0000000cH
?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Xsgetn_s
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z
_TEXT	SEGMENT
__Copied$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsputn, COMDAT
; _this$ = ecx

; 362  : 		{	// put _Count characters to stream

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	56		 push	 esi
  00003	57		 push	 edi

; 363  : 		streamsize _Stream_size, _Size, _Copied;
; 364  : 
; 365  : 		for (_Copied = 0; 0 < _Count; )

  00004	8b 7c 24 18	 mov	 edi, DWORD PTR __Count$[esp+12]
  00008	33 f6		 xor	 esi, esi
  0000a	8b d9		 mov	 ebx, ecx
  0000c	89 74 24 0c	 mov	 DWORD PTR __Copied$[esp+16], esi
  00010	85 ff		 test	 edi, edi
  00012	0f 8e 82 00 00
	00		 jle	 $LN33@xsputn@2
  00018	55		 push	 ebp
  00019	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  0001d	8d 49 00	 npad	 3
$LL7@xsputn@2:

; 366  : 			if (0 < (_Stream_size = _Pnavail()))

  00020	8b cb		 mov	 ecx, ebx
  00022	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail
  00027	85 c0		 test	 eax, eax
  00029	7e 3c		 jle	 SHORT $LN5@xsputn@2

; 367  : 				{	// copy to write buffer
; 368  : 				_Size = _Stream_size;
; 369  : 				if (_Count < _Size)

  0002b	3b f8		 cmp	 edi, eax
  0002d	8b f0		 mov	 esi, eax
  0002f	7d 02		 jge	 SHORT $LN4@xsputn@2

; 370  : 					_Size = _Count;

  00031	8b f7		 mov	 esi, edi
$LN4@xsputn@2:

; 371  : 				_Traits_helper::copy_s<_Traits>(pptr(), _Stream_size, _Ptr, _Size);

  00033	8b 4b 24	 mov	 ecx, DWORD PTR [ebx+36]
  00036	8b 11		 mov	 edx, DWORD PTR [ecx]
  00038	8d 3c 36	 lea	 edi, DWORD PTR [esi+esi]
  0003b	57		 push	 edi
  0003c	55		 push	 ebp
  0003d	03 c0		 add	 eax, eax
  0003f	50		 push	 eax
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 _memcpy_s

; 372  : 				_Ptr += _Size;
; 373  : 				_Copied += _Size;
; 374  : 				_Count -= _Size;
; 375  : 				pbump((int)_Size);

  00046	8b 43 34	 mov	 eax, DWORD PTR [ebx+52]
  00049	29 30		 sub	 DWORD PTR [eax], esi
  0004b	29 74 24 2c	 sub	 DWORD PTR __Count$[esp+32], esi
  0004f	01 74 24 20	 add	 DWORD PTR __Copied$[esp+36], esi
  00053	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]

; 376  : 				}
; 377  : 			else if (_Traits::eq_int_type(_Traits::eof(),

  00056	8b 74 24 20	 mov	 esi, DWORD PTR __Copied$[esp+36]
  0005a	03 ef		 add	 ebp, edi
  0005c	83 c4 10	 add	 esp, 16			; 00000010H
  0005f	01 38		 add	 DWORD PTR [eax], edi
  00061	8b 7c 24 1c	 mov	 edi, DWORD PTR __Count$[esp+16]
  00065	eb 25		 jmp	 SHORT $LN1@xsputn@2
$LN5@xsputn@2:

; 378  : 				overflow(_Traits::to_int_type(*_Ptr))))

  00067	0f b7 45 00	 movzx	 eax, WORD PTR [ebp]
  0006b	8b 13		 mov	 edx, DWORD PTR [ebx]
  0006d	50		 push	 eax
  0006e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00071	8b cb		 mov	 ecx, ebx
  00073	ff d0		 call	 eax
  00075	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0007a	66 3b c8	 cmp	 cx, ax
  0007d	74 11		 je	 SHORT $LN32@xsputn@2

; 379  : 				break;	// single character put failed, quit
; 380  : 			else
; 381  : 				{	// count character successfully put
; 382  : 				++_Ptr;
; 383  : 				++_Copied;

  0007f	46		 inc	 esi
  00080	83 c5 02	 add	 ebp, 2

; 384  : 				--_Count;

  00083	4f		 dec	 edi
  00084	89 74 24 10	 mov	 DWORD PTR __Copied$[esp+20], esi
  00088	89 7c 24 1c	 mov	 DWORD PTR __Count$[esp+16], edi
$LN1@xsputn@2:

; 363  : 		streamsize _Stream_size, _Size, _Copied;
; 364  : 
; 365  : 		for (_Copied = 0; 0 < _Count; )

  0008c	85 ff		 test	 edi, edi
  0008e	7f 90		 jg	 SHORT $LL7@xsputn@2
$LN32@xsputn@2:
  00090	5d		 pop	 ebp
  00091	5f		 pop	 edi

; 385  : 				}
; 386  : 
; 387  : 		return (_Copied);

  00092	8b c6		 mov	 eax, esi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx

; 388  : 		}

  00096	59		 pop	 ecx
  00097	c2 08 00	 ret	 8
$LN33@xsputn@2:
  0009a	5f		 pop	 edi

; 385  : 				}
; 386  : 
; 387  : 		return (_Copied);

  0009b	8b c6		 mov	 eax, esi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx

; 388  : 		}

  0009f	59		 pop	 ecx
  000a0	c2 08 00	 ret	 8
?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsputn
_TEXT	ENDS
PUBLIC	??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R17?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	0aH
	DD	FLAT:??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$alloc'
	DB	'ator@D@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	054H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$0
__ehfuncinfo$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 495  : 		{	// destroy the object

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	89 4c 24 08	 mov	 DWORD PTR _this$[esp+24], ecx
  00026	8b 41 ac	 mov	 eax, DWORD PTR [ecx-84]
  00029	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002c	c7 44 0a ac 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-84], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@

; 496  : 		}

  00034	8d 71 b8	 lea	 esi, DWORD PTR [ecx-72]
  00037	8b ce		 mov	 ecx, esi
  00039	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00047	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
  00053	8b 46 f4	 mov	 eax, DWORD PTR [esi-12]
  00056	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00059	c7 44 31 f4 00
	00 00 00	 mov	 DWORD PTR [ecx+esi-12], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  00061	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00064	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00067	c7 44 30 fc 00
	00 00 00	 mov	 DWORD PTR [eax+esi-4], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0006f	8b 4e f4	 mov	 ecx, DWORD PTR [esi-12]
  00072	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00075	c7 44 32 f4 00
	00 00 00	 mov	 DWORD PTR [edx+esi-12], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0007d	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00088	59		 pop	 ecx
  00089	5e		 pop	 esi
  0008a	83 c4 10	 add	 esp, 16			; 00000010H
  0008d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 e9 48	 sub	 ecx, 72			; 00000048H
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
__ehhandler$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00012	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
__Newsize$144325 = -4					; size = 4
__Meta$ = 8						; size = 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow, COMDAT
; _this$ = ecx

; 87   : 		{	// put an element to stream

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 88   : 		if (_Mystate & _Append
; 89   : 			&& _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)

  00004	f6 46 40 08	 test	 BYTE PTR [esi+64], 8
  00008	57		 push	 edi
  00009	74 20		 je	 SHORT $LN102@overflow
  0000b	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  0000e	8b 17		 mov	 edx, DWORD PTR [edi]
  00010	85 d2		 test	 edx, edx
  00012	74 17		 je	 SHORT $LN102@overflow
  00014	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  00017	3b d1		 cmp	 edx, ecx
  00019	73 10		 jae	 SHORT $LN102@overflow

; 90   : 			_Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

  0001b	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]
  00020	03 c2		 add	 eax, edx
  00022	89 0f		 mov	 DWORD PTR [edi], ecx
  00024	2b c1		 sub	 eax, ecx
  00026	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00029	89 01		 mov	 DWORD PTR [ecx], eax
$LN102@overflow:

; 91   : 
; 92   : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0002b	8b 44 24 10	 mov	 eax, DWORD PTR __Meta$[esp+8]
  0002f	83 f8 ff	 cmp	 eax, -1
  00032	75 08		 jne	 SHORT $LN17@overflow
  00034	5f		 pop	 edi

; 93   : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  00035	33 c0		 xor	 eax, eax
  00037	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  00038	59		 pop	 ecx
  00039	c2 04 00	 ret	 4
$LN17@overflow:

; 94   : 		else if (_Mysb::pptr() != 0
; 95   : 			&& _Mysb::pptr() < _Mysb::epptr())

  0003c	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  0003f	8b 3a		 mov	 edi, DWORD PTR [edx]
  00041	53		 push	 ebx
  00042	85 ff		 test	 edi, edi
  00044	74 22		 je	 SHORT $LN15@overflow
  00046	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00049	8b 19		 mov	 ebx, DWORD PTR [ecx]
  0004b	8b d7		 mov	 edx, edi
  0004d	03 da		 add	 ebx, edx
  0004f	3b d3		 cmp	 edx, ebx
  00051	73 15		 jae	 SHORT $LN15@overflow

; 96   : 			{	// room in buffer, store it
; 97   : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  00053	ff 09		 dec	 DWORD PTR [ecx]
  00055	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  00058	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005a	5b		 pop	 ebx
  0005b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0005e	89 16		 mov	 DWORD PTR [esi], edx
  00060	5f		 pop	 edi
  00061	88 01		 mov	 BYTE PTR [ecx], al
  00063	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  00064	59		 pop	 ecx
  00065	c2 04 00	 ret	 4
$LN15@overflow:

; 98   : 			return (_Meta);
; 99   : 			}
; 100  : 		else if (_Mystate & _Constant)

  00068	f6 46 40 02	 test	 BYTE PTR [esi+64], 2
  0006c	74 0a		 je	 SHORT $LN13@overflow
  0006e	5b		 pop	 ebx
  0006f	5f		 pop	 edi

; 101  : 			return (_Traits::eof());	// array nonmutable, fail

  00070	83 c8 ff	 or	 eax, -1
  00073	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  00074	59		 pop	 ecx
  00075	c2 04 00	 ret	 4
$LN13@overflow:
  00078	55		 push	 ebp

; 102  : 		else
; 103  : 			{	// grow buffer and store element
; 104  : 			size_t _Oldsize = _Mysb::pptr() == 0
; 105  : 				? 0 : _Mysb::epptr() - _Mysb::eback();

  00079	85 ff		 test	 edi, edi
  0007b	75 04		 jne	 SHORT $LN21@overflow
  0007d	33 ed		 xor	 ebp, ebp
  0007f	eb 0c		 jmp	 SHORT $LN22@overflow
$LN21@overflow:
  00081	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00084	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00087	8b 28		 mov	 ebp, DWORD PTR [eax]
  00089	2b 29		 sub	 ebp, DWORD PTR [ecx]
  0008b	03 ef		 add	 ebp, edi
$LN22@overflow:

; 106  : 			size_t _Newsize = _Oldsize;
; 107  : 			size_t _Inc = _Newsize / 2 < _MINSIZE
; 108  : 				? _MINSIZE : _Newsize / 2;	// grow by 50 per cent

  0008d	8b c5		 mov	 eax, ebp
  0008f	d1 e8		 shr	 eax, 1
  00091	83 f8 20	 cmp	 eax, 32			; 00000020H
  00094	73 07		 jae	 SHORT $LN23@overflow
  00096	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0009b	eb 04		 jmp	 SHORT $LL11@overflow
$LN23@overflow:

; 109  : 
; 110  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  0009d	85 c0		 test	 eax, eax
  0009f	76 11		 jbe	 SHORT $LN106@overflow
$LL11@overflow:
  000a1	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
  000a6	2b d0		 sub	 edx, eax
  000a8	3b d5		 cmp	 edx, ebp
  000aa	73 04		 jae	 SHORT $LN10@overflow

; 111  : 				_Inc /= 2;	// increment causes overflow, halve it

  000ac	d1 e8		 shr	 eax, 1

; 109  : 
; 110  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  000ae	75 f1		 jne	 SHORT $LL11@overflow
$LN10@overflow:

; 112  : 			if (_Inc == 0)

  000b0	85 c0		 test	 eax, eax
$LN106@overflow:
  000b2	75 0b		 jne	 SHORT $LN9@overflow
  000b4	5d		 pop	 ebp
  000b5	5b		 pop	 ebx
  000b6	5f		 pop	 edi

; 113  : 				return (_Traits::eof());	// buffer can't grow, fail

  000b7	83 c8 ff	 or	 eax, -1
  000ba	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  000bb	59		 pop	 ecx
  000bc	c2 04 00	 ret	 4
$LN9@overflow:

; 114  : 
; 115  : 			_Newsize += _Inc;

  000bf	03 c5		 add	 eax, ebp

; 116  : 
; 117  : 			_Elem *_Newptr = _Al.allocate(_Newsize);

  000c1	6a 00		 push	 0
  000c3	50		 push	 eax
  000c4	89 44 24 18	 mov	 DWORD PTR __Newsize$144325[esp+28], eax
  000c8	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  000cd	8b f8		 mov	 edi, eax

; 118  : 			_Elem *_Oldptr = _Mysb::eback();

  000cf	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000d2	8b 18		 mov	 ebx, DWORD PTR [eax]
  000d4	83 c4 08	 add	 esp, 8

; 119  : 
; 120  : 			if (0 < _Oldsize)

  000d7	85 ed		 test	 ebp, ebp
  000d9	76 12		 jbe	 SHORT $LN107@overflow

; 121  : 				_Traits_helper::copy_s<_Traits>(_Newptr, _Newsize, _Oldptr, _Oldsize);

  000db	8b 4c 24 10	 mov	 ecx, DWORD PTR __Newsize$144325[esp+20]
  000df	55		 push	 ebp
  000e0	53		 push	 ebx
  000e1	51		 push	 ecx
  000e2	57		 push	 edi
  000e3	e8 00 00 00 00	 call	 ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
  000e8	83 c4 10	 add	 esp, 16			; 00000010H

; 122  : 
; 123  : 			if (_Oldsize == 0)

  000eb	85 ed		 test	 ebp, ebp
$LN107@overflow:
  000ed	75 3e		 jne	 SHORT $LN7@overflow

; 124  : 				{	// first growth, set up pointers
; 125  : 				_Seekhigh = _Newptr;
; 126  : 				_Mysb::setp(_Newptr, _Newptr + _Newsize);

  000ef	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000f2	89 7e 3c	 mov	 DWORD PTR [esi+60], edi
  000f5	89 3a		 mov	 DWORD PTR [edx], edi
  000f7	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  000fa	8b 54 24 10	 mov	 edx, DWORD PTR __Newsize$144325[esp+20]
  000fe	89 38		 mov	 DWORD PTR [eax], edi
  00100	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00103	89 11		 mov	 DWORD PTR [ecx], edx

; 127  : 				if (_Mystate & _Noread)
; 128  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  00105	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00108	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  0010c	89 38		 mov	 DWORD PTR [eax], edi
  0010e	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00111	74 0d		 je	 SHORT $LN6@overflow
  00113	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00119	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0011c	89 3a		 mov	 DWORD PTR [edx], edi

; 129  : 				else

  0011e	eb 73		 jmp	 SHORT $LN89@overflow
$LN6@overflow:

; 130  : 					_Mysb::setg(_Newptr, _Newptr, _Newptr + 1);

  00120	89 39		 mov	 DWORD PTR [ecx], edi
  00122	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  00125	c7 02 01 00 00
	00		 mov	 DWORD PTR [edx], 1

; 131  : 				}
; 132  : 			else

  0012b	eb 66		 jmp	 SHORT $LN89@overflow
$LN7@overflow:

; 133  : 				{	// not first growth, adjust pointers
; 134  : 				_Seekhigh = _Newptr + (_Seekhigh - _Oldptr);
; 135  : 				_Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),
; 136  : 					_Newptr + (_Mysb::pptr() - _Oldptr),
; 137  : 					_Newptr + _Newsize);

  0012d	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00130	8b c7		 mov	 eax, edi
  00132	2b c3		 sub	 eax, ebx
  00134	01 46 3c	 add	 DWORD PTR [esi+60], eax
  00137	8b 01		 mov	 eax, DWORD PTR [ecx]
  00139	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0013c	8b d7		 mov	 edx, edi
  0013e	2b d3		 sub	 edx, ebx
  00140	01 11		 add	 DWORD PTR [ecx], edx
  00142	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00145	2b c3		 sub	 eax, ebx
  00147	03 c7		 add	 eax, edi
  00149	8b d7		 mov	 edx, edi
  0014b	2b d0		 sub	 edx, eax
  0014d	03 54 24 10	 add	 edx, DWORD PTR __Newsize$144325[esp+20]
  00151	89 01		 mov	 DWORD PTR [ecx], eax
  00153	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00156	89 10		 mov	 DWORD PTR [eax], edx

; 138  : 				if (_Mystate & _Noread)

  00158	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  0015c	74 15		 je	 SHORT $LN3@overflow

; 139  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  0015e	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00161	89 39		 mov	 DWORD PTR [ecx], edi
  00163	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  00166	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0016c	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0016f	89 38		 mov	 DWORD PTR [eax], edi

; 140  : 				else

  00171	eb 20		 jmp	 SHORT $LN89@overflow
$LN3@overflow:

; 141  : 					_Mysb::setg(_Newptr,
; 142  : 						_Newptr + (_Mysb::gptr() - _Oldptr),
; 143  : 						_Mysb::pptr() + 1);

  00173	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  00176	8b 02		 mov	 eax, DWORD PTR [edx]
  00178	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0017b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0017d	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00180	2b c3		 sub	 eax, ebx
  00182	03 c7		 add	 eax, edi
  00184	89 3a		 mov	 DWORD PTR [edx], edi
  00186	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  00189	2b c8		 sub	 ecx, eax
  0018b	89 02		 mov	 DWORD PTR [edx], eax
  0018d	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00190	41		 inc	 ecx
  00191	89 08		 mov	 DWORD PTR [eax], ecx
$LN89@overflow:

; 144  : 				}
; 145  : 
; 146  : 			if (_Mystate & _Allocated)

  00193	f6 46 40 01	 test	 BYTE PTR [esi+64], 1
  00197	74 09		 je	 SHORT $LN91@overflow

; 147  : 				_Al.deallocate(_Oldptr, _Oldsize);

  00199	53		 push	 ebx
  0019a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0019f	83 c4 04	 add	 esp, 4
$LN91@overflow:

; 148  : 			_Mystate |= _Allocated;
; 149  : 
; 150  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  001a2	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  001a5	83 4e 40 01	 or	 DWORD PTR [esi+64], 1
  001a9	ff 08		 dec	 DWORD PTR [eax]
  001ab	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  001ae	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001b0	8b 44 24 18	 mov	 eax, DWORD PTR __Meta$[esp+16]
  001b4	5d		 pop	 ebp
  001b5	5b		 pop	 ebx
  001b6	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  001b9	89 16		 mov	 DWORD PTR [esi], edx
  001bb	5f		 pop	 edi
  001bc	88 01		 mov	 BYTE PTR [ecx], al
  001be	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  001bf	59		 pop	 ecx
  001c0	c2 04 00	 ret	 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
_TEXT	ENDS
PUBLIC	??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
PUBLIC	??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	0aH
	DD	FLAT:??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$all'
	DB	'ocator@_W@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
	DD	054H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD FLAT:??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$0
__ehfuncinfo$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 495  : 		{	// destroy the object

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	89 4c 24 08	 mov	 DWORD PTR _this$[esp+24], ecx
  00026	8b 41 ac	 mov	 eax, DWORD PTR [ecx-84]
  00029	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002c	c7 44 0a ac 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-84], OFFSET ??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@

; 496  : 		}

  00034	8d 71 b8	 lea	 esi, DWORD PTR [ecx-72]
  00037	8b ce		 mov	 ecx, esi
  00039	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  00047	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
  00053	8b 46 f4	 mov	 eax, DWORD PTR [esi-12]
  00056	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00059	c7 44 31 f4 00
	00 00 00	 mov	 DWORD PTR [ecx+esi-12], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
  00061	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00064	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00067	c7 44 30 fc 00
	00 00 00	 mov	 DWORD PTR [eax+esi-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  0006f	8b 4e f4	 mov	 ecx, DWORD PTR [esi-12]
  00072	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00075	c7 44 32 f4 00
	00 00 00	 mov	 DWORD PTR [edx+esi-12], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0007d	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00088	59		 pop	 ecx
  00089	5e		 pop	 esi
  0008a	83 c4 10	 add	 esp, 16			; 00000010H
  0008d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 e9 48	 sub	 ecx, 72			; 00000048H
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00012	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
_TEXT	SEGMENT
__Newsize$144606 = -4					; size = 4
__Meta$ = 8						; size = 2
?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::overflow, COMDAT
; _this$ = ecx

; 87   : 		{	// put an element to stream

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 88   : 		if (_Mystate & _Append
; 89   : 			&& _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)

  00004	f6 46 40 08	 test	 BYTE PTR [esi+64], 8
  00008	57		 push	 edi
  00009	74 23		 je	 SHORT $LN98@overflow@2
  0000b	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  0000e	8b 02		 mov	 eax, DWORD PTR [edx]
  00010	85 c0		 test	 eax, eax
  00012	74 1a		 je	 SHORT $LN98@overflow@2
  00014	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  00017	3b c1		 cmp	 eax, ecx
  00019	73 13		 jae	 SHORT $LN98@overflow@2

; 90   : 			_Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

  0001b	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
  0001e	8b 3f		 mov	 edi, DWORD PTR [edi]
  00020	8d 04 78	 lea	 eax, DWORD PTR [eax+edi*2]
  00023	2b c1		 sub	 eax, ecx
  00025	89 0a		 mov	 DWORD PTR [edx], ecx
  00027	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  0002a	d1 f8		 sar	 eax, 1
  0002c	89 01		 mov	 DWORD PTR [ecx], eax
$LN98@overflow@2:

; 91   : 
; 92   : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0002e	66 8b 44 24 10	 mov	 ax, WORD PTR __Meta$[esp+8]
  00033	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00038	66 3b d0	 cmp	 dx, ax
  0003b	75 08		 jne	 SHORT $LN17@overflow@2
  0003d	5f		 pop	 edi

; 93   : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  0003e	33 c0		 xor	 eax, eax
  00040	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  00041	59		 pop	 ecx
  00042	c2 04 00	 ret	 4
$LN17@overflow@2:

; 94   : 		else if (_Mysb::pptr() != 0
; 95   : 			&& _Mysb::pptr() < _Mysb::epptr())

  00045	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  00048	8b 3a		 mov	 edi, DWORD PTR [edx]
  0004a	53		 push	 ebx
  0004b	85 ff		 test	 edi, edi
  0004d	74 24		 je	 SHORT $LN15@overflow@2
  0004f	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00052	8b 19		 mov	 ebx, DWORD PTR [ecx]
  00054	8b d7		 mov	 edx, edi
  00056	8d 1c 5a	 lea	 ebx, DWORD PTR [edx+ebx*2]
  00059	3b d3		 cmp	 edx, ebx
  0005b	73 16		 jae	 SHORT $LN15@overflow@2

; 96   : 			{	// room in buffer, store it
; 97   : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  0005d	ff 09		 dec	 DWORD PTR [ecx]

; 149  : 
; 150  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  0005f	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  00062	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00064	5b		 pop	 ebx
  00065	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  00068	89 16		 mov	 DWORD PTR [esi], edx
  0006a	5f		 pop	 edi
  0006b	66 89 01	 mov	 WORD PTR [ecx], ax
  0006e	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  0006f	59		 pop	 ecx
  00070	c2 04 00	 ret	 4
$LN15@overflow@2:

; 98   : 			return (_Meta);
; 99   : 			}
; 100  : 		else if (_Mystate & _Constant)

  00073	f6 46 40 02	 test	 BYTE PTR [esi+64], 2

; 101  : 			return (_Traits::eof());	// array nonmutable, fail

  00077	75 3f		 jne	 SHORT $LN105@overflow@2

; 102  : 		else
; 103  : 			{	// grow buffer and store element
; 104  : 			size_t _Oldsize = _Mysb::pptr() == 0
; 105  : 				? 0 : _Mysb::epptr() - _Mysb::eback();

  00079	85 ff		 test	 edi, edi
  0007b	75 04		 jne	 SHORT $LN21@overflow@2
  0007d	33 db		 xor	 ebx, ebx
  0007f	eb 10		 jmp	 SHORT $LN22@overflow@2
$LN21@overflow@2:
  00081	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00084	8b 18		 mov	 ebx, DWORD PTR [eax]
  00086	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00089	03 db		 add	 ebx, ebx
  0008b	2b 19		 sub	 ebx, DWORD PTR [ecx]
  0008d	03 df		 add	 ebx, edi
  0008f	d1 fb		 sar	 ebx, 1
$LN22@overflow@2:

; 106  : 			size_t _Newsize = _Oldsize;
; 107  : 			size_t _Inc = _Newsize / 2 < _MINSIZE
; 108  : 				? _MINSIZE : _Newsize / 2;	// grow by 50 per cent

  00091	8b c3		 mov	 eax, ebx
  00093	d1 e8		 shr	 eax, 1
  00095	83 f8 20	 cmp	 eax, 32			; 00000020H
  00098	73 07		 jae	 SHORT $LN23@overflow@2
  0009a	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0009f	eb 04		 jmp	 SHORT $LL11@overflow@2
$LN23@overflow@2:

; 109  : 
; 110  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  000a1	85 c0		 test	 eax, eax
  000a3	76 11		 jbe	 SHORT $LN102@overflow@2
$LL11@overflow@2:
  000a5	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
  000aa	2b d0		 sub	 edx, eax
  000ac	3b d3		 cmp	 edx, ebx
  000ae	73 04		 jae	 SHORT $LN10@overflow@2

; 111  : 				_Inc /= 2;	// increment causes overflow, halve it

  000b0	d1 e8		 shr	 eax, 1

; 109  : 
; 110  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  000b2	75 f1		 jne	 SHORT $LL11@overflow@2
$LN10@overflow@2:

; 112  : 			if (_Inc == 0)

  000b4	85 c0		 test	 eax, eax
$LN102@overflow@2:
  000b6	75 0c		 jne	 SHORT $LN9@overflow@2
$LN105@overflow@2:
  000b8	5b		 pop	 ebx
  000b9	5f		 pop	 edi

; 113  : 				return (_Traits::eof());	// buffer can't grow, fail

  000ba	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  000bf	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  000c0	59		 pop	 ecx
  000c1	c2 04 00	 ret	 4
$LN9@overflow@2:
  000c4	55		 push	 ebp

; 114  : 
; 115  : 			_Newsize += _Inc;

  000c5	03 c3		 add	 eax, ebx

; 116  : 
; 117  : 			_Elem *_Newptr = _Al.allocate(_Newsize);

  000c7	6a 00		 push	 0
  000c9	50		 push	 eax
  000ca	89 44 24 18	 mov	 DWORD PTR __Newsize$144606[esp+28], eax
  000ce	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  000d3	8b f8		 mov	 edi, eax

; 118  : 			_Elem *_Oldptr = _Mysb::eback();

  000d5	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000d8	8b 28		 mov	 ebp, DWORD PTR [eax]
  000da	83 c4 08	 add	 esp, 8

; 119  : 
; 120  : 			if (0 < _Oldsize)

  000dd	85 db		 test	 ebx, ebx
  000df	76 12		 jbe	 SHORT $LN103@overflow@2

; 121  : 				_Traits_helper::copy_s<_Traits>(_Newptr, _Newsize, _Oldptr, _Oldsize);

  000e1	8b 4c 24 10	 mov	 ecx, DWORD PTR __Newsize$144606[esp+20]
  000e5	53		 push	 ebx
  000e6	55		 push	 ebp
  000e7	51		 push	 ecx
  000e8	57		 push	 edi
  000e9	e8 00 00 00 00	 call	 ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
  000ee	83 c4 10	 add	 esp, 16			; 00000010H

; 122  : 
; 123  : 			if (_Oldsize == 0)

  000f1	85 db		 test	 ebx, ebx
$LN103@overflow@2:
  000f3	75 42		 jne	 SHORT $LN7@overflow@2

; 124  : 				{	// first growth, set up pointers
; 125  : 				_Seekhigh = _Newptr;
; 126  : 				_Mysb::setp(_Newptr, _Newptr + _Newsize);

  000f5	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000f8	8b 4c 24 10	 mov	 ecx, DWORD PTR __Newsize$144606[esp+20]
  000fc	89 7e 3c	 mov	 DWORD PTR [esi+60], edi
  000ff	89 3a		 mov	 DWORD PTR [edx], edi
  00101	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00104	89 38		 mov	 DWORD PTR [eax], edi
  00106	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00109	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  0010c	d1 fa		 sar	 edx, 1
  0010e	89 10		 mov	 DWORD PTR [eax], edx

; 127  : 				if (_Mystate & _Noread)

  00110	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  00114	74 1a		 je	 SHORT $LN6@overflow@2

; 128  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  00116	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00119	89 39		 mov	 DWORD PTR [ecx], edi
  0011b	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0011e	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00124	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00127	d1 ff		 sar	 edi, 1
  00129	89 38		 mov	 DWORD PTR [eax], edi

; 129  : 				else

  0012b	e9 80 00 00 00	 jmp	 $LN2@overflow@2
$LN6@overflow@2:

; 130  : 					_Mysb::setg(_Newptr, _Newptr, _Newptr + 1);

  00130	8d 4f 02	 lea	 ecx, DWORD PTR [edi+2]
  00133	51		 push	 ecx
  00134	57		 push	 edi

; 131  : 				}
; 132  : 			else

  00135	eb 71		 jmp	 SHORT $LN104@overflow@2
$LN7@overflow@2:

; 133  : 				{	// not first growth, adjust pointers
; 134  : 				_Seekhigh = _Newptr + (_Seekhigh - _Oldptr);

  00137	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]

; 135  : 				_Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),
; 136  : 					_Newptr + (_Mysb::pptr() - _Oldptr),
; 137  : 					_Newptr + _Newsize);

  0013a	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0013d	2b d5		 sub	 edx, ebp
  0013f	d1 fa		 sar	 edx, 1
  00141	8d 04 57	 lea	 eax, DWORD PTR [edi+edx*2]
  00144	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00147	8b 11		 mov	 edx, DWORD PTR [ecx]
  00149	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0014c	2b d5		 sub	 edx, ebp
  0014e	d1 fa		 sar	 edx, 1
  00150	8d 04 57	 lea	 eax, DWORD PTR [edi+edx*2]
  00153	8b 11		 mov	 edx, DWORD PTR [ecx]
  00155	2b d5		 sub	 edx, ebp
  00157	d1 fa		 sar	 edx, 1
  00159	8d 14 57	 lea	 edx, DWORD PTR [edi+edx*2]
  0015c	89 11		 mov	 DWORD PTR [ecx], edx
  0015e	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00161	8b 54 24 10	 mov	 edx, DWORD PTR __Newsize$144606[esp+20]
  00165	89 01		 mov	 DWORD PTR [ecx], eax
  00167	8d 0c 12	 lea	 ecx, DWORD PTR [edx+edx]
  0016a	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  0016d	2b c8		 sub	 ecx, eax
  0016f	03 cf		 add	 ecx, edi
  00171	d1 f9		 sar	 ecx, 1
  00173	89 0a		 mov	 DWORD PTR [edx], ecx

; 138  : 				if (_Mystate & _Noread)

  00175	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  00179	74 17		 je	 SHORT $LN3@overflow@2

; 139  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  0017b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0017e	89 38		 mov	 DWORD PTR [eax], edi
  00180	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00183	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00189	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0018c	d1 ff		 sar	 edi, 1
  0018e	89 3a		 mov	 DWORD PTR [edx], edi

; 140  : 				else

  00190	eb 1e		 jmp	 SHORT $LN2@overflow@2
$LN3@overflow@2:

; 141  : 					_Mysb::setg(_Newptr,
; 142  : 						_Newptr + (_Mysb::gptr() - _Oldptr),
; 143  : 						_Mysb::pptr() + 1);

  00192	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00195	8b 08		 mov	 ecx, DWORD PTR [eax]
  00197	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0019a	8b 02		 mov	 eax, DWORD PTR [edx]
  0019c	83 c1 02	 add	 ecx, 2
  0019f	2b c5		 sub	 eax, ebp
  001a1	51		 push	 ecx
  001a2	d1 f8		 sar	 eax, 1
  001a4	8d 0c 47	 lea	 ecx, DWORD PTR [edi+eax*2]
  001a7	51		 push	 ecx
$LN104@overflow@2:
  001a8	57		 push	 edi
  001a9	8b ce		 mov	 ecx, esi
  001ab	e8 00 00 00 00	 call	 ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setg
$LN2@overflow@2:

; 144  : 				}
; 145  : 
; 146  : 			if (_Mystate & _Allocated)

  001b0	bb 01 00 00 00	 mov	 ebx, 1
  001b5	84 5e 40	 test	 BYTE PTR [esi+64], bl
  001b8	74 09		 je	 SHORT $LN87@overflow@2

; 147  : 				_Al.deallocate(_Oldptr, _Oldsize);

  001ba	55		 push	 ebp
  001bb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001c0	83 c4 04	 add	 esp, 4
$LN87@overflow@2:

; 148  : 			_Mystate |= _Allocated;

  001c3	09 5e 40	 or	 DWORD PTR [esi+64], ebx

; 149  : 
; 150  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  001c6	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  001c9	ff 08		 dec	 DWORD PTR [eax]
  001cb	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  001ce	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001d0	66 8b 44 24 18	 mov	 ax, WORD PTR __Meta$[esp+16]
  001d5	5d		 pop	 ebp
  001d6	5b		 pop	 ebx
  001d7	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  001da	89 16		 mov	 DWORD PTR [esi], edx
  001dc	5f		 pop	 edi
  001dd	66 89 01	 mov	 WORD PTR [ecx], ax
  001e0	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  001e1	59		 pop	 ecx
  001e2	c2 04 00	 ret	 4
?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::overflow
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::~_Vector_val<HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::~_Vector_val<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::~_Vector_val<HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??1?$_List_nod@KV?$allocator@K@std@@@std@@QAE@XZ ; std::_List_nod<unsigned long,std::allocator<unsigned long> >::~_List_nod<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_nod@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_nod@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::_List_nod<unsigned long,std::allocator<unsigned long> >::~_List_nod<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_nod@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::_List_nod<unsigned long,std::allocator<unsigned long> >::~_List_nod<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??1?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@QAE@XZ ; std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0>::~_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@QAE@XZ PROC ; std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0>::~_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0>, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@QAE@XZ ENDP ; std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0>::~_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0>
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2149 : 		if (!_Built)

  00000	80 7c 24 04 00	 cmp	 BYTE PTR __Built$[esp-4], 0
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 27		 je	 SHORT $LN15@Tidy@5

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

  0000f	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00013	72 21		 jb	 SHORT $LN15@Tidy@5

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

  00015	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00018	53		 push	 ebx
  00019	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2154 : 			if (0 < _Newsize)

  0001b	85 ff		 test	 edi, edi
  0001d	76 0d		 jbe	 SHORT $LN13@Tidy@5

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

  0001f	57		 push	 edi
  00020	53		 push	 ebx
  00021	6a 10		 push	 16			; 00000010H
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _memcpy_s
  00029	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@Tidy@5:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  0002c	53		 push	 ebx
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00032	83 c4 04	 add	 esp, 4
  00035	5b		 pop	 ebx
$LN15@Tidy@5:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;
; 2159 : 		_Eos(_Newsize);

  00036	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00039	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00040	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 2160 : 		}

  00047	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx

; 2149 : 		if (!_Built)

  00000	80 7c 24 04 00	 cmp	 BYTE PTR __Built$[esp-4], 0
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 2a		 je	 SHORT $LN17@Tidy@6

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

  0000f	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00013	72 24		 jb	 SHORT $LN17@Tidy@6

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

  00015	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00018	53		 push	 ebx
  00019	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2154 : 			if (0 < _Newsize)

  0001b	85 ff		 test	 edi, edi
  0001d	76 10		 jbe	 SHORT $LN15@Tidy@6

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

  0001f	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  00022	51		 push	 ecx
  00023	53		 push	 ebx
  00024	6a 10		 push	 16			; 00000010H
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _memcpy_s
  0002c	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@Tidy@6:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  0002f	53		 push	 ebx
  00030	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00035	83 c4 04	 add	 esp, 4
  00038	5b		 pop	 ebx
$LN17@Tidy@6:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;
; 2159 : 		_Eos(_Newsize);

  00039	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0003c	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00043	33 d2		 xor	 edx, edx
  00045	66 89 54 7e 04	 mov	 WORD PTR [esi+edi*2+4], dx
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi

; 2160 : 		}

  0004c	c2 08 00	 ret	 8
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@XZ
_TEXT	SEGMENT
?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@XZ PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode, COMDAT
; _this$ = ecx

; 1172 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  00000	6a 0c		 push	 12			; 0000000cH
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 1173 : 		int _Linkcnt = 0;
; 1174 : 
; 1175 : 		_TRY_BEGIN
; 1176 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Pnode);

  0000a	85 c0		 test	 eax, eax
  0000c	74 02		 je	 SHORT $LN26@Buynode
  0000e	89 00		 mov	 DWORD PTR [eax], eax
$LN26@Buynode:

; 1177 : 		++_Linkcnt;
; 1178 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Pnode);

  00010	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00013	85 c9		 test	 ecx, ecx
  00015	74 02		 je	 SHORT $LN36@Buynode
  00017	89 01		 mov	 DWORD PTR [ecx], eax
$LN36@Buynode:

; 1179 : 		_CATCH_ALL
; 1180 : 		if (0 < _Linkcnt)
; 1181 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1182 : 		this->_Alnod.deallocate(_Pnode, 1);
; 1183 : 		_RERAISE;
; 1184 : 		_CATCH_END
; 1185 : 		return (_Pnode);
; 1186 : 		}

  00019	c3		 ret	 0
?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@XZ ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
tv133 = 8						; size = 4
__Off$ = 8						; size = 4
tv139 = 12						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx

; 1262 : 		{	// erase elements [_Off, _Off + _Count)

  00000	53		 push	 ebx

; 1263 : 		if (_Mysize < _Off)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	73 05		 jae	 SHORT $LN3@erase@2

; 1264 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@erase@2:

; 1265 : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c3		 sub	 eax, ebx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $LN2@erase@2

; 1266 : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$LN2@erase@2:

; 1267 : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 69		 jbe	 SHORT $LN32@erase@2

; 1268 : 			{	// move elements down
; 1269 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1270 : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	55		 push	 ebp
  0002a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0002d	83 f9 08	 cmp	 ecx, 8
  00030	72 09		 jb	 SHORT $LN8@erase@2
  00032	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00035	89 54 24 14	 mov	 DWORD PTR tv133[esp+12], edx
  00039	eb 04		 jmp	 SHORT $LN9@erase@2
$LN8@erase@2:
  0003b	89 6c 24 14	 mov	 DWORD PTR tv133[esp+12], ebp
$LN9@erase@2:
  0003f	83 f9 08	 cmp	 ecx, 8
  00042	72 09		 jb	 SHORT $LN12@erase@2
  00044	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00047	89 54 24 18	 mov	 DWORD PTR tv139[esp+12], edx
  0004b	eb 04		 jmp	 SHORT $LN13@erase@2
$LN12@erase@2:
  0004d	89 6c 24 18	 mov	 DWORD PTR tv139[esp+12], ebp
$LN13@erase@2:
  00051	8b 54 24 14	 mov	 edx, DWORD PTR tv133[esp+12]
  00055	2b c7		 sub	 eax, edi
  00057	03 c0		 add	 eax, eax
  00059	50		 push	 eax
  0005a	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  0005d	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  00060	2b cb		 sub	 ecx, ebx
  00062	50		 push	 eax
  00063	03 c9		 add	 ecx, ecx
  00065	51		 push	 ecx
  00066	8b 4c 24 24	 mov	 ecx, DWORD PTR tv139[esp+24]
  0006a	8d 14 59	 lea	 edx, DWORD PTR [ecx+ebx*2]
  0006d	52		 push	 edx
  0006e	e8 00 00 00 00	 call	 _memmove_s

; 1271 : 			size_type _Newsize = _Mysize - _Count;

  00073	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00076	2b c7		 sub	 eax, edi
  00078	83 c4 10	 add	 esp, 16			; 00000010H

; 1272 : 			_Eos(_Newsize);

  0007b	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  0007f	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00082	72 03		 jb	 SHORT $LN28@erase@2
  00084	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN28@erase@2:
  00087	33 c9		 xor	 ecx, ecx
  00089	66 89 4c 45 00	 mov	 WORD PTR [ebp+eax*2], cx
  0008e	5d		 pop	 ebp
$LN32@erase@2:
  0008f	5f		 pop	 edi

; 1273 : 			}
; 1274 : 		return (*this);

  00090	8b c6		 mov	 eax, esi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 1275 : 		}

  00094	c2 08 00	 ret	 8
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::_Container_base_aux_alloc_real<std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::_Container_base_aux_alloc_real<std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 419  : 		{

  00000	56		 push	 esi

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN3@Container_@3
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4
$LN3@Container_@3:

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::_Container_base_aux_alloc_real<std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__State$ = 16						; size = 4
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init, COMDAT
; _this$ = ecx

; 274  : 		_Seekhigh = 0;
; 275  : 		_Mystate = _State;

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __State$[esp-4]
  00004	53		 push	 ebx

; 276  : 
; 277  : 		if (_Count != 0
; 278  : 			&& (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))

  00005	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Count$[esp]
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00013	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00016	85 db		 test	 ebx, ebx
  00018	0f 84 81 00 00
	00		 je	 $LN4@Init@2
  0001e	83 e0 06	 and	 eax, 6
  00021	3c 06		 cmp	 al, 6
  00023	74 7a		 je	 SHORT $LN4@Init@2
  00025	57		 push	 edi

; 279  : 			{	// finite buffer that can be read or written, set it up
; 280  : 			_Elem *_Pnew = _Al.allocate(_Count);

  00026	6a 00		 push	 0
  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0002e	8b f8		 mov	 edi, eax

; 281  : 			_Traits_helper::copy_s<_Traits>(_Pnew, _Count, _Ptr, _Count);

  00030	8b 44 24 18	 mov	 eax, DWORD PTR __Ptr$[esp+16]
  00034	53		 push	 ebx
  00035	50		 push	 eax
  00036	53		 push	 ebx
  00037	57		 push	 edi
  00038	e8 00 00 00 00	 call	 _memcpy_s
  0003d	83 c4 18	 add	 esp, 24			; 00000018H

; 282  : 			_Seekhigh = _Pnew + _Count;
; 283  : 
; 284  : 			if (!(_Mystate & _Noread))

  00040	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  00044	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  00047	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  0004a	75 0f		 jne	 SHORT $LN19@Init@2

; 285  : 				_Mysb::setg(_Pnew, _Pnew,
; 286  : 					_Pnew + _Count);	// setup read buffer

  0004c	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0004f	89 39		 mov	 DWORD PTR [ecx], edi
  00051	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  00054	89 3a		 mov	 DWORD PTR [edx], edi
  00056	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00059	89 19		 mov	 DWORD PTR [ecx], ebx
$LN19@Init@2:

; 287  : 			if (!(_Mystate & _Constant))

  0005b	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  0005e	f6 c1 02	 test	 cl, 2
  00061	75 37		 jne	 SHORT $LN25@Init@2

; 288  : 				{	// setup write buffer, and maybe read buffer
; 289  : 				_Mysb::setp(_Pnew,
; 290  : 					(_Mystate & _Atend) ? _Pnew + _Count : _Pnew,
; 291  : 					_Pnew + _Count);

  00063	f6 c1 10	 test	 cl, 16			; 00000010H
  00066	75 02		 jne	 SHORT $LN8@Init@2
  00068	8b c7		 mov	 eax, edi
$LN8@Init@2:
  0006a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0006d	89 3a		 mov	 DWORD PTR [edx], edi
  0006f	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00072	89 01		 mov	 DWORD PTR [ecx], eax
  00074	8b d7		 mov	 edx, edi
  00076	2b d0		 sub	 edx, eax
  00078	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0007b	03 d3		 add	 edx, ebx
  0007d	89 10		 mov	 DWORD PTR [eax], edx

; 292  : 				if (_Mysb::gptr() == 0)

  0007f	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00082	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00085	75 13		 jne	 SHORT $LN25@Init@2

; 293  : 					_Mysb::setg(_Pnew, 0, _Pnew);

  00087	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0008a	89 3a		 mov	 DWORD PTR [edx], edi
  0008c	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0008f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00095	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00098	89 39		 mov	 DWORD PTR [ecx], edi
$LN25@Init@2:

; 294  : 				}
; 295  : 			_Mystate |= _Allocated;

  0009a	83 4e 40 01	 or	 DWORD PTR [esi+64], 1
  0009e	5f		 pop	 edi
$LN4@Init@2:
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx

; 296  : 			}
; 297  : 		}

  000a1	c2 0c 00	 ret	 12			; 0000000cH
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
_TEXT	ENDS
PUBLIC	?clear@?$list@KV?$allocator@K@std@@@std@@QAEXXZ	; std::list<unsigned long,std::allocator<unsigned long> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?clear@?$list@KV?$allocator@K@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@KV?$allocator@K@std@@@std@@QAEXXZ PROC	; std::list<unsigned long,std::allocator<unsigned long> >::clear, COMDAT
; _this$ = ecx

; 825  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 826  : 
; 827  :  #if _HAS_ITERATOR_DEBUGGING
; 828  : 		this->_Orphan_ptr(*this, 0);
; 829  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 830  : 
; 831  : 		_Nodeptr _Pnext;
; 832  : 		_Nodeptr _Pnode = _Nextnode(_Myhead);

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 833  : 		_Nextnode(_Myhead) = _Myhead;

  00008	89 09		 mov	 DWORD PTR [ecx], ecx

; 834  : 		_Prevnode(_Myhead) = _Myhead;

  0000a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000d	89 49 04	 mov	 DWORD PTR [ecx+4], ecx

; 835  : 		_Mysize = 0;

  00010	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 836  : 
; 837  : 		for (; _Pnode != _Myhead; _Pnode = _Pnext)

  00017	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  0001a	74 17		 je	 SHORT $LN1@clear
  0001c	57		 push	 edi
  0001d	8d 49 00	 npad	 3
$LL3@clear:

; 838  : 			{	// delete an element
; 839  : 			_Pnext = _Nextnode(_Pnode);

  00020	8b 38		 mov	 edi, DWORD PTR [eax]

; 840  : 			this->_Alnod.destroy(_Pnode);
; 841  : 			this->_Alnod.deallocate(_Pnode, 1);

  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	83 c4 04	 add	 esp, 4
  0002b	8b c7		 mov	 eax, edi
  0002d	3b 7e 14	 cmp	 edi, DWORD PTR [esi+20]
  00030	75 ee		 jne	 SHORT $LL3@clear
  00032	5f		 pop	 edi
$LN1@clear:
  00033	5e		 pop	 esi

; 842  : 			}
; 843  : 		}

  00034	c3		 ret	 0
?clear@?$list@KV?$allocator@K@std@@@std@@QAEXXZ ENDP	; std::list<unsigned long,std::allocator<unsigned long> >::clear
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@0ABK@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode
; Function compile flags: /Ogtpy
;	COMDAT ?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@0ABK@Z
_TEXT	SEGMENT
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@0ABK@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode, COMDAT
; _this$ = ecx

; 1191 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  00000	6a 0c		 push	 12			; 0000000cH
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 1192 : 		int _Linkcnt = 0;
; 1193 : 
; 1194 : 		_TRY_BEGIN
; 1195 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Next);

  0000a	85 c0		 test	 eax, eax
  0000c	74 06		 je	 SHORT $LN27@Buynode@2
  0000e	8b 4c 24 04	 mov	 ecx, DWORD PTR __Next$[esp-4]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
$LN27@Buynode@2:

; 1196 : 		++_Linkcnt;
; 1197 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Prev);

  00014	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00017	85 c9		 test	 ecx, ecx
  00019	74 06		 je	 SHORT $LN37@Buynode@2
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR __Prev$[esp-4]
  0001f	89 11		 mov	 DWORD PTR [ecx], edx
$LN37@Buynode@2:

; 1198 : 		++_Linkcnt;
; 1199 : 		this->_Alval.construct(&_Myval(_Pnode), _Val);

  00021	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
  00024	85 c9		 test	 ecx, ecx
  00026	74 08		 je	 SHORT $LN47@Buynode@2
  00028	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  0002c	8b 12		 mov	 edx, DWORD PTR [edx]
  0002e	89 11		 mov	 DWORD PTR [ecx], edx
$LN47@Buynode@2:

; 1200 : 		_CATCH_ALL
; 1201 : 		if (1 < _Linkcnt)
; 1202 : 			this->_Alptr.destroy(&_Prevnode(_Pnode));
; 1203 : 		if (0 < _Linkcnt)
; 1204 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1205 : 		this->_Alnod.deallocate(_Pnode, 1);
; 1206 : 		_RERAISE;
; 1207 : 		_CATCH_END
; 1208 : 		return (_Pnode);
; 1209 : 		}

  00030	c2 0c 00	 ret	 12			; 0000000cH
?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@0ABK@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

  00000	53		 push	 ebx

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 14	 mov	 edi, DWORD PTR __Pvector$[esp+8]
  0000b	8b f1		 mov	 esi, ecx
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	85 ff		 test	 edi, edi
  00015	74 0a		 je	 SHORT $LN4@Vector_con
  00017	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  0001a	77 05		 ja	 SHORT $LN4@Vector_con
  0001c	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0001f	76 05		 jbe	 SHORT $LN3@Vector_con
$LN4@Vector_con:
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Vector_con:

; 79   : 		this->_Set_container(_Pvector);

  00026	8b 07		 mov	 eax, DWORD PTR [edi]
  00028	89 06		 mov	 DWORD PTR [esi], eax
  0002a	5f		 pop	 edi

; 80   : 		_Myptr = _Ptr;

  0002b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 81   : 		}

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 217  : 			{	// construct with null node pointer

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 218  : 			}

  0000f	c3		 ret	 0
??0const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PBV12@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogtpy
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PBV12@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PBV12@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 234  : 			{	// construct with node pointer _Pnode

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi

; 235  : 			_SCL_SECURE_VALIDATE(_Plist != NULL);

  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Plist$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN3@const_iter
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@const_iter:

; 236  : 			this->_Set_container(_Plist);

  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx

; 237  : 			}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PBV12@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??Econst_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Econst_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::operator++, COMDAT
; _this$ = ecx

; 273  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 274  : 			_Inc();

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::_Inc

; 275  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 276  : 			}

  0000b	c3		 ret	 0
??Econst_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::operator++
_TEXT	ENDS
PUBLIC	??Fconst_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::operator--
; Function compile flags: /Ogtpy
;	COMDAT ??Fconst_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Fconst_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::operator--, COMDAT
; _this$ = ecx

; 286  : 			{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 287  : 			_Dec();

  00003	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::_Dec

; 288  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 289  : 			}

  0000b	c3		 ret	 0
??Fconst_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::operator--
_TEXT	ENDS
PUBLIC	?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__State$ = 16						; size = 4
?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Init, COMDAT
; _this$ = ecx

; 274  : 		_Seekhigh = 0;
; 275  : 		_Mystate = _State;

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __State$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi

; 276  : 
; 277  : 		if (_Count != 0
; 278  : 			&& (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))

  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Count$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00013	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00016	85 ff		 test	 edi, edi
  00018	0f 84 8d 00 00
	00		 je	 $LN4@Init@3
  0001e	83 e0 06	 and	 eax, 6
  00021	3c 06		 cmp	 al, 6
  00023	0f 84 82 00 00
	00		 je	 $LN4@Init@3
  00029	53		 push	 ebx

; 279  : 			{	// finite buffer that can be read or written, set it up
; 280  : 			_Elem *_Pnew = _Al.allocate(_Count);

  0002a	6a 00		 push	 0
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00032	8b d8		 mov	 ebx, eax

; 281  : 			_Traits_helper::copy_s<_Traits>(_Pnew, _Count, _Ptr, _Count);

  00034	8b 44 24 18	 mov	 eax, DWORD PTR __Ptr$[esp+16]
  00038	03 ff		 add	 edi, edi
  0003a	57		 push	 edi
  0003b	50		 push	 eax
  0003c	57		 push	 edi
  0003d	53		 push	 ebx
  0003e	e8 00 00 00 00	 call	 _memcpy_s
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 282  : 			_Seekhigh = _Pnew + _Count;
; 283  : 
; 284  : 			if (!(_Mystate & _Noread))

  00046	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  0004a	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  0004d	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00050	75 13		 jne	 SHORT $LN21@Init@3

; 285  : 				_Mysb::setg(_Pnew, _Pnew,
; 286  : 					_Pnew + _Count);	// setup read buffer

  00052	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00055	89 19		 mov	 DWORD PTR [ecx], ebx
  00057	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0005a	89 1a		 mov	 DWORD PTR [edx], ebx
  0005c	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0005f	8b cf		 mov	 ecx, edi
  00061	d1 f9		 sar	 ecx, 1
  00063	89 0a		 mov	 DWORD PTR [edx], ecx
$LN21@Init@3:

; 287  : 			if (!(_Mystate & _Constant))

  00065	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00068	f6 c1 02	 test	 cl, 2
  0006b	75 39		 jne	 SHORT $LN27@Init@3

; 288  : 				{	// setup write buffer, and maybe read buffer
; 289  : 				_Mysb::setp(_Pnew,
; 290  : 					(_Mystate & _Atend) ? _Pnew + _Count : _Pnew,
; 291  : 					_Pnew + _Count);

  0006d	f6 c1 10	 test	 cl, 16			; 00000010H
  00070	75 02		 jne	 SHORT $LN8@Init@3
  00072	8b c3		 mov	 eax, ebx
$LN8@Init@3:
  00074	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00077	89 19		 mov	 DWORD PTR [ecx], ebx
  00079	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  0007c	2b f8		 sub	 edi, eax
  0007e	89 02		 mov	 DWORD PTR [edx], eax
  00080	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00083	03 fb		 add	 edi, ebx
  00085	d1 ff		 sar	 edi, 1
  00087	89 38		 mov	 DWORD PTR [eax], edi

; 292  : 				if (_Mysb::gptr() == 0)

  00089	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0008c	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0008f	75 15		 jne	 SHORT $LN27@Init@3

; 293  : 					_Mysb::setg(_Pnew, 0, _Pnew);

  00091	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00094	89 1a		 mov	 DWORD PTR [edx], ebx
  00096	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00099	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0009f	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  000a2	d1 fb		 sar	 ebx, 1
  000a4	89 19		 mov	 DWORD PTR [ecx], ebx
$LN27@Init@3:

; 294  : 				}
; 295  : 			_Mystate |= _Allocated;

  000a6	83 4e 40 01	 or	 DWORD PTR [esi+64], 1
  000aa	5b		 pop	 ebx
$LN4@Init@3:
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi

; 296  : 			}
; 297  : 		}

  000ad	c2 0c 00	 ret	 12			; 0000000cH
?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Init
_TEXT	ENDS
PUBLIC	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put, COMDAT

; 1510 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00000	8b 4c 24 10	 mov	 ecx, DWORD PTR __Dest$[esp]
  00004	55		 push	 ebp
  00005	8b 6c 24 1c	 mov	 ebp, DWORD PTR __Count$[esp]
  00009	85 ed		 test	 ebp, ebp
  0000b	76 52		 jbe	 SHORT $LN1@Put
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7c 24 20	 mov	 edi, DWORD PTR __Ptr$[esp+8]
$LL3@Put:

; 1511 : 			*_Dest = *_Ptr;

  00013	85 c9		 test	 ecx, ecx
  00015	74 3b		 je	 SHORT $LN10@Put
  00017	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0001a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001d	8a 17		 mov	 dl, BYTE PTR [edi]
  0001f	8d 71 24	 lea	 esi, DWORD PTR [ecx+36]
  00022	74 1a		 je	 SHORT $LN16@Put
  00024	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00027	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002a	7e 12		 jle	 SHORT $LN16@Put
  0002c	ff 08		 dec	 DWORD PTR [eax]
  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  00035	89 30		 mov	 DWORD PTR [eax], esi
  00037	88 11		 mov	 BYTE PTR [ecx], dl
  00039	0f b6 c2	 movzx	 eax, dl
  0003c	eb 0b		 jmp	 SHORT $LN17@Put
$LN16@Put:
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00043	0f b6 d2	 movzx	 edx, dl
  00046	52		 push	 edx
  00047	ff d0		 call	 eax
$LN17@Put:
  00049	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Dest$[esp+12]
  0004d	83 f8 ff	 cmp	 eax, -1
  00050	75 05		 jne	 SHORT $LN2@Put
$LN10@Put:
  00052	c6 44 24 18 01	 mov	 BYTE PTR __Dest$[esp+8], 1
$LN2@Put:

; 1510 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00057	4d		 dec	 ebp
  00058	47		 inc	 edi
  00059	85 ed		 test	 ebp, ebp
  0005b	77 b6		 ja	 SHORT $LL3@Put
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
$LN1@Put:

; 1512 : 		return (_Dest);

  0005f	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  00063	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  00067	89 10		 mov	 DWORD PTR [eax], edx
  00069	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0006c	5d		 pop	 ebp

; 1513 : 		}

  0006d	c3		 ret	 0
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
_TEXT	ENDS
PUBLIC	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
; Function compile flags: /Ogtpy
;	COMDAT ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ch$ = 24						; size = 1
__Count$ = 28						; size = 4
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep, COMDAT

; 1545 : 		for (; 0 < _Count; --_Count, ++_Dest)

  00000	8b 4c 24 10	 mov	 ecx, DWORD PTR __Dest$[esp]
  00004	56		 push	 esi
  00005	8b 74 24 1c	 mov	 esi, DWORD PTR __Count$[esp]
  00009	85 f6		 test	 esi, esi
  0000b	76 4d		 jbe	 SHORT $LN1@Rep
  0000d	53		 push	 ebx
  0000e	8a 5c 24 1c	 mov	 bl, BYTE PTR __Ch$[esp+4]
$LL6@Rep:

; 1546 : 			*_Dest = _Ch;

  00012	85 c9		 test	 ecx, ecx
  00014	74 39		 je	 SHORT $LN10@Rep
  00016	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00019	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001c	8d 51 24	 lea	 edx, DWORD PTR [ecx+36]
  0001f	74 1a		 je	 SHORT $LN16@Rep
  00021	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00024	83 38 00	 cmp	 DWORD PTR [eax], 0
  00027	7e 12		 jle	 SHORT $LN16@Rep
  00029	ff 08		 dec	 DWORD PTR [eax]
  0002b	8b 02		 mov	 eax, DWORD PTR [edx]
  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002f	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00032	89 10		 mov	 DWORD PTR [eax], edx
  00034	88 19		 mov	 BYTE PTR [ecx], bl
  00036	0f b6 c3	 movzx	 eax, bl
  00039	eb 0b		 jmp	 SHORT $LN17@Rep
$LN16@Rep:
  0003b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00040	0f b6 d3	 movzx	 edx, bl
  00043	52		 push	 edx
  00044	ff d0		 call	 eax
$LN17@Rep:
  00046	8b 4c 24 18	 mov	 ecx, DWORD PTR __Dest$[esp+8]
  0004a	83 f8 ff	 cmp	 eax, -1
  0004d	75 05		 jne	 SHORT $LN2@Rep
$LN10@Rep:
  0004f	c6 44 24 14 01	 mov	 BYTE PTR __Dest$[esp+4], 1
$LN2@Rep:

; 1545 : 		for (; 0 < _Count; --_Count, ++_Dest)

  00054	83 ee 01	 sub	 esi, 1
  00057	75 b9		 jne	 SHORT $LL6@Rep
  00059	5b		 pop	 ebx
$LN1@Rep:

; 1547 : 		return (_Dest);

  0005a	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  0005e	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  00062	89 10		 mov	 DWORD PTR [eax], edx
  00064	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00067	5e		 pop	 esi

; 1548 : 		}

  00068	c3		 ret	 0
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_iterator<HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_iterator<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

  00000	53		 push	 ebx
  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 14	 mov	 edi, DWORD PTR __Pvector$[esp+8]
  0000b	8b f1		 mov	 esi, ecx
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	85 ff		 test	 edi, edi
  00015	74 0a		 je	 SHORT $LN6@Vector_ite
  00017	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  0001a	77 05		 ja	 SHORT $LN6@Vector_ite
  0001c	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0001f	76 05		 jbe	 SHORT $LN5@Vector_ite
$LN6@Vector_ite:
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Vector_ite:
  00026	8b 07		 mov	 eax, DWORD PTR [edi]
  00028	89 06		 mov	 DWORD PTR [esi], eax
  0002a	5f		 pop	 edi
  0002b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 328  : 		}

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	c2 08 00	 ret	 8
??0?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_iterator<HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+
; Function compile flags: /Ogtpy
;	COMDAT ??H?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

  00000	56		 push	 esi

; 381  : 		_Myt _Tmp = *this;

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]
  00003	57		 push	 edi
  00004	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]

; 382  : 		return (_Tmp += _Off);

  00007	85 f6		 test	 esi, esi
  00009	75 20		 jne	 SHORT $LN30@operator@22
  0000b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00010	33 c0		 xor	 eax, eax
$LN21@operator@22:
  00012	8b 4c 24 10	 mov	 ecx, DWORD PTR __Off$[esp+4]
  00016	69 c9 88 00 00
	00		 imul	 ecx, 136		; 00000088H
  0001c	03 f9		 add	 edi, ecx
  0001e	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
  00021	77 13		 ja	 SHORT $LN8@operator@22
  00023	85 f6		 test	 esi, esi
  00025	74 08		 je	 SHORT $LN26@operator@22
  00027	8b 06		 mov	 eax, DWORD PTR [esi]
  00029	eb 06		 jmp	 SHORT $LN27@operator@22
$LN30@operator@22:
  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	eb e3		 jmp	 SHORT $LN21@operator@22
$LN26@operator@22:
  0002f	33 c0		 xor	 eax, eax
$LN27@operator@22:
  00031	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  00034	73 05		 jae	 SHORT $LN7@operator@22
$LN8@operator@22:
  00036	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@operator@22:
  0003b	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  0003f	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00042	5f		 pop	 edi
  00043	89 30		 mov	 DWORD PTR [eax], esi
  00045	5e		 pop	 esi

; 383  : 		}

  00046	c2 08 00	 ret	 8
??H?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2083 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 2084 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 0f	 or	 esi, 15			; 0000000fH

; 2085 : 		if (max_size() < _Newres)

  00038	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0003b	76 04		 jbe	 SHORT $LN6@Copy

; 2086 : 			_Newres = _Newsize;	// undo roundup if too big

  0003d	8b f0		 mov	 esi, eax

; 2087 : 		else if (_Newres / 3 < _Myres / 2

  0003f	eb 22		 jmp	 SHORT $LN4@Copy
$LN6@Copy:

; 2088 : 			&& _Myres <= max_size() - _Myres / 2)

  00041	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00044	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00049	f7 e6		 mul	 esi
  0004b	8b cb		 mov	 ecx, ebx
  0004d	d1 e9		 shr	 ecx, 1
  0004f	d1 ea		 shr	 edx, 1
  00051	3b d1		 cmp	 edx, ecx
  00053	73 0e		 jae	 SHORT $LN4@Copy
  00055	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0005a	2b c1		 sub	 eax, ecx
  0005c	3b d8		 cmp	 ebx, eax
  0005e	77 03		 ja	 SHORT $LN4@Copy

; 2089 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00060	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
$LN4@Copy:

; 2090 : 		_Elem *_Ptr = 0;
; 2091 : 
; 2092 : 		_TRY_BEGIN
; 2093 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00063	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00066	6a 00		 push	 0
  00068	51		 push	 ecx
  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00070	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00075	83 c4 08	 add	 esp, 8
  00078	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0007b	eb 28		 jmp	 SHORT $LN16@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0:

; 2094 : 		_CATCH_ALL
; 2095 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007d	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00080	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00083	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 2096 : 			_TRY_BEGIN
; 2097 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00086	40		 inc	 eax
  00087	6a 00		 push	 0
  00089	50		 push	 eax
  0008a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0008e	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00093	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00096	83 c4 08	 add	 esp, 8

; 2101 : 			_CATCH_END
; 2102 : 		_CATCH_END

  00099	b8 00 00 00 00	 mov	 eax, $LN106@Copy
  0009e	c3		 ret	 0
$LN106@Copy:
  0009f	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000a2	8b 75 e8	 mov	 esi, DWORD PTR __Newres$[ebp]
$LN16@Copy:

; 2103 : 
; 2104 : 		if (0 < _Oldlen)

  000a5	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  000a8	85 db		 test	 ebx, ebx
  000aa	76 20		 jbe	 SHORT $LN71@Copy

; 2105 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

  000ac	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000b0	72 05		 jb	 SHORT $LN63@Copy
  000b2	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000b5	eb 03		 jmp	 SHORT $LN64@Copy
$LN63@Copy:
  000b7	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN64@Copy:
  000ba	53		 push	 ebx
  000bb	50		 push	 eax
  000bc	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000bf	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _memcpy_s
  000c9	83 c4 10	 add	 esp, 16			; 00000010H
$LN71@Copy:

; 2106 : 		_Tidy(true);

  000cc	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000d0	72 0c		 jb	 SHORT $LN87@Copy
  000d2	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000db	83 c4 04	 add	 esp, 4
$LN87@Copy:

; 2107 : 		_Bx._Ptr = _Ptr;

  000de	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000e1	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000e4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e7	89 08		 mov	 DWORD PTR [eax], ecx

; 2108 : 		_Myres = _Newres;

  000e9	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 2109 : 		_Eos(_Oldlen);

  000ec	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  000ef	83 fe 10	 cmp	 esi, 16			; 00000010H
  000f2	72 02		 jb	 SHORT $LN101@Copy
  000f4	8b c1		 mov	 eax, ecx
$LN101@Copy:
  000f6	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 2110 : 		}

  000fa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00104	59		 pop	 ecx
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1:

; 2098 : 			_CATCH_ALL
; 2099 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010e	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00111	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00115	72 0c		 jb	 SHORT $LN51@Copy
  00117	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0011a	52		 push	 edx
  0011b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00120	83 c4 04	 add	 esp, 4
$LN51@Copy:

; 2100 : 			_RERAISE;

  00123	6a 00		 push	 0
  00125	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0012c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00133	6a 00		 push	 0
  00135	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00139	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN109@Copy:
  0013e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Ptr$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newres$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy, COMDAT
; _this$ = ecx

; 2083 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 2084 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 07	 or	 esi, 7

; 2085 : 		if (max_size() < _Newres)

  00038	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH
  0003e	76 04		 jbe	 SHORT $LN6@Copy@2

; 2086 : 			_Newres = _Newsize;	// undo roundup if too big

  00040	8b f0		 mov	 esi, eax

; 2087 : 		else if (_Newres / 3 < _Myres / 2

  00042	eb 22		 jmp	 SHORT $LN4@Copy@2
$LN6@Copy@2:

; 2088 : 			&& _Myres <= max_size() - _Myres / 2)

  00044	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00047	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0004c	f7 e6		 mul	 esi
  0004e	8b cb		 mov	 ecx, ebx
  00050	d1 e9		 shr	 ecx, 1
  00052	d1 ea		 shr	 edx, 1
  00054	3b d1		 cmp	 edx, ecx
  00056	73 0e		 jae	 SHORT $LN4@Copy@2
  00058	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  0005d	2b c1		 sub	 eax, ecx
  0005f	3b d8		 cmp	 ebx, eax
  00061	77 03		 ja	 SHORT $LN4@Copy@2

; 2089 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00063	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
$LN4@Copy@2:

; 2090 : 		_Elem *_Ptr = 0;
; 2091 : 
; 2092 : 		_TRY_BEGIN
; 2093 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00066	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00069	6a 00		 push	 0
  0006b	51		 push	 ecx
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00073	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00078	83 c4 08	 add	 esp, 8
  0007b	8b d8		 mov	 ebx, eax
  0007d	eb 2b		 jmp	 SHORT $LN16@Copy@2
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$0:

; 2094 : 		_CATCH_ALL
; 2095 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007f	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00082	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00085	89 45 08	 mov	 DWORD PTR __Newres$[ebp], eax

; 2096 : 			_TRY_BEGIN
; 2097 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00088	40		 inc	 eax
  00089	6a 00		 push	 0
  0008b	50		 push	 eax
  0008c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00090	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00095	89 45 e8	 mov	 DWORD PTR __Ptr$[ebp], eax
  00098	83 c4 08	 add	 esp, 8

; 2101 : 			_CATCH_END
; 2102 : 		_CATCH_END

  0009b	b8 00 00 00 00	 mov	 eax, $LN112@Copy@2
  000a0	c3		 ret	 0
$LN112@Copy@2:
  000a1	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000a4	8b 75 08	 mov	 esi, DWORD PTR __Newres$[ebp]
  000a7	8b 5d e8	 mov	 ebx, DWORD PTR __Ptr$[ebp]
$LN16@Copy@2:

; 2103 : 
; 2104 : 		if (0 < _Oldlen)

  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000ad	85 c9		 test	 ecx, ecx
  000af	76 24		 jbe	 SHORT $LN75@Copy@2

; 2105 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

  000b1	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  000b5	72 05		 jb	 SHORT $LN65@Copy@2
  000b7	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000ba	eb 03		 jmp	 SHORT $LN66@Copy@2
$LN65@Copy@2:
  000bc	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN66@Copy@2:
  000bf	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	8d 44 36 02	 lea	 eax, DWORD PTR [esi+esi+2]
  000c8	50		 push	 eax
  000c9	53		 push	 ebx
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000d2	83 c4 10	 add	 esp, 16			; 00000010H
$LN75@Copy@2:

; 2106 : 		_Tidy(true);

  000d5	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  000d9	72 0f		 jb	 SHORT $LN93@Copy@2
  000db	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000de	51		 push	 ecx
  000df	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000e7	83 c4 04	 add	 esp, 4
$LN93@Copy@2:
  000ea	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000ed	33 d2		 xor	 edx, edx

; 2107 : 		_Bx._Ptr = _Ptr;

  000ef	89 18		 mov	 DWORD PTR [eax], ebx

; 2108 : 		_Myres = _Newres;

  000f1	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 2109 : 		_Eos(_Oldlen);

  000f4	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  000f7	83 fe 08	 cmp	 esi, 8
  000fa	72 02		 jb	 SHORT $LN107@Copy@2
  000fc	8b c3		 mov	 eax, ebx
$LN107@Copy@2:
  000fe	33 d2		 xor	 edx, edx
  00100	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 2110 : 		}

  00104	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00107	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010e	59		 pop	 ecx
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$1:

; 2098 : 			_CATCH_ALL
; 2099 : 			_Tidy(true);	// failed again, discard storage and reraise

  00118	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0011b	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  0011f	72 0c		 jb	 SHORT $LN53@Copy@2
  00121	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0012a	83 c4 04	 add	 esp, 4
$LN53@Copy@2:
  0012d	33 c9		 xor	 ecx, ecx

; 2100 : 			_RERAISE;

  0012f	51		 push	 ecx
  00130	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00137	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0013e	51		 push	 ecx
  0013f	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00143	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN115@Copy@2:
  00148	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
PUBLIC	??0?$_List_nod@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z ; std::_List_nod<unsigned long,std::allocator<unsigned long> >::_List_nod<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_List_nod@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_nod@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z PROC ; std::_List_nod<unsigned long,std::allocator<unsigned long> >::_List_nod<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN8@List_nod
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 48   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 47   : 		{	// construct allocator from _Al

$LN8@List_nod:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 48   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_nod@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z ENDP ; std::_List_nod<unsigned long,std::allocator<unsigned long> >::_List_nod<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??0?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PBV12@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::_Const_iterator<1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PBV12@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PBV12@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::_Const_iterator<1>, COMDAT
; _this$ = ecx

; 176  : 			{	// construct with node pointer _Pnode

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi

; 177  : 			_SCL_SECURE_TRAITS_VALIDATE(_Plist != NULL);

  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Plist$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN3@Const_iter
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Const_iter:

; 178  : 			this->_Set_container(_Plist);

  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx

; 179  : 			}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PBV12@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::_Const_iterator<1>
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buynode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 1384 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  00000	68 a8 00 00 00	 push	 168			; 000000a8H
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 1385 : 		int _Linkcnt = 0;
; 1386 : 
; 1387 : 		_TRY_BEGIN
; 1388 : 		this->_Alptr.construct(&_Left(_Wherenode), 0);

  0000d	85 c0		 test	 eax, eax
  0000f	74 06		 je	 SHORT $LN27@Buynode@3
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN27@Buynode@3:

; 1389 : 		++_Linkcnt;
; 1390 : 		this->_Alptr.construct(&_Parent(_Wherenode), 0);

  00017	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 06		 je	 SHORT $LN37@Buynode@3
  0001e	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN37@Buynode@3:

; 1391 : 		++_Linkcnt;
; 1392 : 		this->_Alptr.construct(&_Right(_Wherenode), 0);

  00024	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
  00027	85 c9		 test	 ecx, ecx
  00029	74 06		 je	 SHORT $LN47@Buynode@3
  0002b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN47@Buynode@3:

; 1393 : 		_CATCH_ALL
; 1394 : 		if (1 < _Linkcnt)
; 1395 : 			this->_Alptr.destroy(&_Parent(_Wherenode));
; 1396 : 		if (0 < _Linkcnt)
; 1397 : 			this->_Alptr.destroy(&_Left(_Wherenode));
; 1398 : 		this->_Alnod.deallocate(_Wherenode, 1);
; 1399 : 		_RERAISE;
; 1400 : 		_CATCH_END
; 1401 : 		_Color(_Wherenode) = _Black;

  00031	c6 80 a0 00 00
	00 01		 mov	 BYTE PTR [eax+160], 1

; 1402 : 		_Isnil(_Wherenode) = false;

  00038	c6 80 a1 00 00
	00 00		 mov	 BYTE PTR [eax+161], 0

; 1403 : 		return (_Wherenode);
; 1404 : 		}

  0003f	c3		 ret	 0
?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buynode
_TEXT	ENDS
PUBLIC	??Fiterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::iterator::operator--
; Function compile flags: /Ogtpy
;	COMDAT ??Fiterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Fiterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::iterator::operator--, COMDAT
; _this$ = ecx

; 487  : 			{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 488  : 			--(*(const_iterator *)this);

  00003	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::_Dec

; 489  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 490  : 			}

  0000b	c3		 ret	 0
??Fiterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::iterator::operator--
_TEXT	ENDS
PUBLIC	??Econst_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??Econst_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::operator++, COMDAT
; _this$ = ecx

; 280  : 			const_iterator _Tmp = *this;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00005	56		 push	 esi
  00006	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  0000a	89 06		 mov	 DWORD PTR [esi], eax
  0000c	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 281  : 			++*this;

  0000f	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::_Inc

; 282  : 			return (_Tmp);

  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi

; 283  : 			}

  00017	c2 08 00	 ret	 8
??Econst_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::operator++
_TEXT	ENDS
PUBLIC	?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc, COMDAT

; 1518 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00000	8b 4c 24 10	 mov	 ecx, DWORD PTR __Dest$[esp]
  00004	55		 push	 ebp
  00005	8b 6c 24 1c	 mov	 ebp, DWORD PTR __Count$[esp]
  00009	85 ed		 test	 ebp, ebp
  0000b	76 52		 jbe	 SHORT $LN1@Putc
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7c 24 20	 mov	 edi, DWORD PTR __Ptr$[esp+8]
$LL3@Putc:

; 1519 : 			*_Dest = _MAKLOCCHR(_Elem, *_Ptr, _Cvt);

  00013	85 c9		 test	 ecx, ecx
  00015	74 3b		 je	 SHORT $LN12@Putc
  00017	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0001a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001d	8a 17		 mov	 dl, BYTE PTR [edi]
  0001f	8d 71 24	 lea	 esi, DWORD PTR [ecx+36]
  00022	74 1a		 je	 SHORT $LN18@Putc
  00024	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00027	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002a	7e 12		 jle	 SHORT $LN18@Putc
  0002c	ff 08		 dec	 DWORD PTR [eax]
  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  00035	89 30		 mov	 DWORD PTR [eax], esi
  00037	88 11		 mov	 BYTE PTR [ecx], dl
  00039	0f b6 c2	 movzx	 eax, dl
  0003c	eb 0b		 jmp	 SHORT $LN19@Putc
$LN18@Putc:
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00043	0f b6 d2	 movzx	 edx, dl
  00046	52		 push	 edx
  00047	ff d0		 call	 eax
$LN19@Putc:
  00049	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Dest$[esp+12]
  0004d	83 f8 ff	 cmp	 eax, -1
  00050	75 05		 jne	 SHORT $LN2@Putc
$LN12@Putc:
  00052	c6 44 24 18 01	 mov	 BYTE PTR __Dest$[esp+8], 1
$LN2@Putc:

; 1518 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00057	4d		 dec	 ebp
  00058	47		 inc	 edi
  00059	85 ed		 test	 ebp, ebp
  0005b	77 b6		 ja	 SHORT $LL3@Putc
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
$LN1@Putc:

; 1520 : 		return (_Dest);

  0005f	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  00063	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  00067	89 10		 mov	 DWORD PTR [eax], edx
  00069	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0006c	5d		 pop	 ebp

; 1521 : 		}

  0006d	c3		 ret	 0
?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
_TEXT	ENDS
PUBLIC	?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
; Function compile flags: /Ogtpy
;	COMDAT ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z
_TEXT	SEGMENT
$T159829 = -16						; size = 8
$T159830 = -8						; size = 8
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
__Kseparator$ = 32					; size = 1
?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped, COMDAT

; 1525 : 		{	// put char sequence [_Ptr, _Ptr + _Count) to _Dest with commas

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	53		 push	 ebx
  0000a	8b 5d 1c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7d 18	 mov	 edi, DWORD PTR __Ptr$[ebp]
$LL5@Putgrouped:

; 1526 : 		for (; ; ++_Ptr, --_Count)
; 1527 : 			{	// put field with thousands separators for NULs
; 1528 : 			const char *_Pend =
; 1529 : 				(const char *)::memchr(_Ptr, '\0', _Count);

  00012	53		 push	 ebx
  00013	6a 00		 push	 0
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 _memchr
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1530 : 			size_t _Groupsize = _Pend != 0 ? _Pend - _Ptr : _Count;

  0001e	85 c0		 test	 eax, eax
  00020	74 06		 je	 SHORT $LN8@Putgrouped
  00022	2b c7		 sub	 eax, edi
  00024	8b f0		 mov	 esi, eax
  00026	eb 02		 jmp	 SHORT $LN9@Putgrouped
$LN8@Putgrouped:
  00028	8b f3		 mov	 esi, ebx
$LN9@Putgrouped:

; 1531 : 
; 1532 : 			_Dest = _Putc(_Dest, _Ptr, _Groupsize);

  0002a	8b 45 14	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  0002d	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00036	51		 push	 ecx
  00037	8d 54 24 20	 lea	 edx, DWORD PTR $T159829[esp+48]
  0003b	52		 push	 edx
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00047	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0004a	83 c4 18	 add	 esp, 24			; 00000018H

; 1533 : 			_Ptr += _Groupsize, _Count -= _Groupsize;

  0004d	03 fe		 add	 edi, esi
  0004f	2b de		 sub	 ebx, esi
  00051	89 55 14	 mov	 DWORD PTR __Dest$[ebp+4], edx

; 1534 : 			if (_Count == 0)

  00054	74 31		 je	 SHORT $LN12@Putgrouped

; 1535 : 				break;
; 1536 : 			if (_Kseparator != (_Elem)0)

  00056	8b 4d 20	 mov	 ecx, DWORD PTR __Kseparator$[ebp]
  00059	84 c9		 test	 cl, cl
  0005b	74 26		 je	 SHORT $LN4@Putgrouped

; 1537 : 				_Dest = _Rep(_Dest, _Kseparator, 1);

  0005d	8b 10		 mov	 edx, DWORD PTR [eax]
  0005f	6a 01		 push	 1
  00061	51		 push	 ecx
  00062	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00065	51		 push	 ecx
  00066	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	52		 push	 edx
  0006a	8d 44 24 28	 lea	 eax, DWORD PTR $T159830[esp+48]
  0006e	50		 push	 eax
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00075	8b 10		 mov	 edx, DWORD PTR [eax]
  00077	89 55 10	 mov	 DWORD PTR __Dest$[ebp], edx
  0007a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0007d	83 c4 18	 add	 esp, 24			; 00000018H
  00080	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
$LN4@Putgrouped:
  00083	47		 inc	 edi
  00084	4b		 dec	 ebx
  00085	eb 8b		 jmp	 SHORT $LL5@Putgrouped
$LN12@Putgrouped:

; 1538 : 			}
; 1539 : 		return (_Dest);

  00087	8b 10		 mov	 edx, DWORD PTR [eax]
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0008c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1540 : 		}

  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00094	89 11		 mov	 DWORD PTR [ecx], edx
  00096	8b c1		 mov	 eax, ecx
  00098	5b		 pop	 ebx
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
_TEXT	ENDS
PUBLIC	??0?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@QAE@U?$less@H@1@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z ; std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0>::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\map
;	COMDAT ??0?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@QAE@U?$less@H@1@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 1
__Al$ = 12						; size = 1
??0?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@QAE@U?$less@H@1@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z PROC ; std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0>::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0>, COMDAT
; _this$ = ecx

; 39   : 		{	// construct with specified comparator

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN8@Tmap_trait
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 40   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 08 00	 ret	 8

; 39   : 		{	// construct with specified comparator

$LN8@Tmap_trait:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 40   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 08 00	 ret	 8
??0?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@QAE@U?$less@H@1@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z ENDP ; std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0>::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0>
_TEXT	ENDS
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 94   : 	return (_Left.compare(_Right) == 0);

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  00004	8b c2		 mov	 eax, edx
  00006	56		 push	 esi
  00007	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000a	8d 9b 00 00 00
	00		 npad	 6
$LL7@operator@23:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL7@operator@23
  00017	8b 4c 24 08	 mov	 ecx, DWORD PTR __Left$[esp]
  0001b	2b c6		 sub	 eax, esi
  0001d	50		 push	 eax
  0001e	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00021	52		 push	 edx
  00022	50		 push	 eax
  00023	6a 00		 push	 0
  00025	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  0002a	f7 d8		 neg	 eax
  0002c	1b c0		 sbb	 eax, eax
  0002e	40		 inc	 eax
  0002f	5e		 pop	 esi

; 95   : 	}

  00030	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ; stdext::unchecked_copy<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z
_TEXT	SEGMENT
$T159926 = -4						; size = 1
__First$ = 8						; size = 4
__Cat$159932 = 12					; size = 1
$T159928 = 12						; size = 1
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z PROC ; stdext::unchecked_copy<HostDevice *,HostDevice *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

  00000	51		 push	 ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Cat$159932[esp]
  00005	8b 54 24 0c	 mov	 edx, DWORD PTR $T159928[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T159926[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T159926[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *>

; 3607 : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$unchecked_copy@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ENDP ; stdext::unchecked_copy<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	?begin@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?begin@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ PROC ; std::list<unsigned long,std::allocator<unsigned long> >::begin, COMDAT
; _this$ = ecx

; 539  : 		return (const_iterator(_Nextnode(_Myhead), this));

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 540  : 		}

  00010	c2 04 00	 ret	 4
?begin@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ PROC ; std::list<unsigned long,std::allocator<unsigned long> >::end, COMDAT
; _this$ = ecx

; 549  : 		return (const_iterator(_Myhead, this));

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00009	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 550  : 		}

  0000e	c2 04 00	 ret	 4
?end@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::end
_TEXT	ENDS
PUBLIC	??_7?$numpunct@D@std@@6B@			; std::numpunct<char>::`vftable'
PUBLIC	??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z	; std::numpunct<char>::numpunct<char>
PUBLIC	??_R4?$numpunct@D@std@@6B@			; std::numpunct<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$numpunct@D@std@@@8			; std::numpunct<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$numpunct@D@std@@8		; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_decimal_point@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_decimal_point
PUBLIC	?do_thousands_sep@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_thousands_sep
PUBLIC	?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_grouping
PUBLIC	?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_falsename
PUBLIC	?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_truename
EXTRN	??_E?$numpunct@D@std@@MAEPAXI@Z:PROC		; std::numpunct<char>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$numpunct@D@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
rdata$r	SEGMENT
??_R1A@?0A@EA@?$numpunct@D@std@@8 DD FLAT:??_R0?AV?$numpunct@D@std@@@8 ; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R2?$numpunct@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$numpunct@D@std@@8 ; std::numpunct<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R3?$numpunct@D@std@@8 DD 00H				; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
_DATA	SEGMENT
??_R0?AV?$numpunct@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::numpunct<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$numpunct@D@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT
??_R4?$numpunct@D@std@@6B@ DD 00H			; std::numpunct<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$numpunct@D@std@@@8
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$numpunct@D@std@@6B@
CONST	SEGMENT
??_7?$numpunct@D@std@@6B@ DD FLAT:??_R4?$numpunct@D@std@@6B@ ; std::numpunct<char>::`vftable'
	DD	FLAT:??_E?$numpunct@D@std@@MAEPAXI@Z
	DD	FLAT:?do_decimal_point@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0
__ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
__Isdef$ = 16						; size = 1
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z PROC	; std::numpunct<char>::numpunct<char>, COMDAT
; _this$ = ecx

; 106  : 		{	// construct from specified locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	8b 44 24 20	 mov	 eax, DWORD PTR __Refs$[esp+20]
  0002c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 107  : 		_Init(_Lobj, _Isdef);

  0002f	8b 4c 24 24	 mov	 ecx, DWORD PTR __Isdef$[esp+20]
  00033	8b 54 24 1c	 mov	 edx, DWORD PTR __Lobj$[esp+20]
  00037	51		 push	 ecx
  00038	52		 push	 edx
  00039	8b ce		 mov	 ecx, esi
  0003b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+40], 0
  00043	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  00049	e8 00 00 00 00	 call	 ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init

; 108  : 		}

  0004e	8b c6		 mov	 eax, esi
  00050	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	5e		 pop	 esi
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@UAE@XZ ; std::locale::facet::~facet
__ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z ENDP	; std::numpunct<char>::numpunct<char>
; Function compile flags: /Ogtpy
;	COMDAT ?do_decimal_point@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_decimal_point@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_decimal_point, COMDAT
; _this$ = ecx

; 165  : 		return (_Dp);

  00000	8a 41 0c	 mov	 al, BYTE PTR [ecx+12]

; 166  : 		}

  00003	c3		 ret	 0
?do_decimal_point@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_decimal_point
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_thousands_sep, COMDAT
; _this$ = ecx

; 170  : 		return (_Kseparator);

  00000	8a 41 0d	 mov	 al, BYTE PTR [ecx+13]

; 171  : 		}

  00003	c3		 ret	 0
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_thousands_sep
_TEXT	ENDS
PUBLIC	??1?$numpunct@D@std@@MAE@XZ			; std::numpunct<char>::~numpunct<char>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$numpunct@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$numpunct@D@std@@MAE@XZ PROC			; std::numpunct<char>::~numpunct<char>, COMDAT
; _this$ = ecx

; 121  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 122  : 		_Tidy();

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	50		 push	 eax
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  0000d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00012	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 123  : 		}

  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0002d	5e		 pop	 esi
  0002e	c3		 ret	 0
??1?$numpunct@D@std@@MAE@XZ ENDP			; std::numpunct<char>::~numpunct<char>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$numpunct@D@std@@MAEPAXI@Z PROC			; std::numpunct<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	50		 push	 eax
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  0000d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00012	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00032	74 09		 je	 SHORT $LN10@scalar@22
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4
$LN10@scalar@22:
  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	c2 04 00	 ret	 4
??_G?$numpunct@D@std@@MAEPAXI@Z ENDP			; std::numpunct<char>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 84   : 	return (_Right.compare(_Left) == 0);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  00004	8b c2		 mov	 eax, edx
  00006	56		 push	 esi
  00007	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000a	8d 9b 00 00 00
	00		 npad	 6
$LL7@operator@24:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL7@operator@24
  00017	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Right$[esp]
  0001b	2b c6		 sub	 eax, esi
  0001d	50		 push	 eax
  0001e	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00021	52		 push	 edx
  00022	50		 push	 eax
  00023	6a 00		 push	 0
  00025	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  0002a	f7 d8		 neg	 eax
  0002c	1b c0		 sbb	 eax, eax
  0002e	40		 inc	 eax
  0002f	5e		 pop	 esi

; 85   : 	}

  00030	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >, COMDAT

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1166 : 	}

  00007	c3		 ret	 0
??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 54	 lea	 esi, DWORD PTR [ecx+84]
  00004	8b ce		 mov	 ecx, esi
  00006	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  0000b	56		 push	 esi
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00012	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00017	83 c4 04	 add	 esp, 4
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 54	 lea	 esi, DWORD PTR [ecx+84]
  00004	8b ce		 mov	 ecx, esi
  00006	e8 00 00 00 00	 call	 ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0000b	56		 push	 esi
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00012	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00017	83 c4 04	 add	 esp, 4
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 565  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 566  : 		_Tidy();

  00002	33 c9		 xor	 ecx, ecx
  00004	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH
  0000b	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  0000e	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 567  : 		}

  00011	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 906  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $LN17@basic_stri
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN17@basic_stri:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 907  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 565  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 566  : 		_Tidy();

  00002	33 c9		 xor	 ecx, ecx
  00004	c7 40 18 07 00
	00 00		 mov	 DWORD PTR [eax+24], 7
  0000b	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
  00012	66 89 48 04	 mov	 WORD PTR [eax+4], cx

; 567  : 		}

  00016	c3		 ret	 0
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 906  : 		_Tidy(true);

  00003	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00007	72 0c		 jb	 SHORT $LN19@basic_stri@2
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN19@basic_stri@2:
  00015	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  0001c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00023	33 c9		 xor	 ecx, ecx
  00025	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00029	5e		 pop	 esi

; 907  : 		}

  0002a	c3		 ret	 0
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0

; 559  : 		_Tidy();

  00030	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy

; 560  : 		}

  00035	8b 06		 mov	 eax, DWORD PTR [esi]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003d	83 c4 04	 add	 esp, 4
  00040	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00044	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004b	59		 pop	 ecx
  0004c	5e		 pop	 esi
  0004d	83 c4 10	 add	 esp, 16			; 00000010H
  00050	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
;	COMDAT ??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8d 79 ac	 lea	 edi, DWORD PTR [ecx-84]
  00005	8d 77 54	 lea	 esi, DWORD PTR [edi+84]
  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  0000f	56		 push	 esi
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00016	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001b	83 c4 04	 add	 esp, 4
  0001e	f6 44 24 0c 01	 test	 BYTE PTR ___flags$[esp+4], 1
  00023	74 09		 je	 SHORT $LN11@scalar@23
  00025	57		 push	 edi
  00026	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002b	83 c4 04	 add	 esp, 4
$LN11@scalar@23:
  0002e	8b c7		 mov	 eax, edi
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	c2 04 00	 ret	 4
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8d 79 ac	 lea	 edi, DWORD PTR [ecx-84]
  00005	8d 77 54	 lea	 esi, DWORD PTR [edi+84]
  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0000f	56		 push	 esi
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00016	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001b	83 c4 04	 add	 esp, 4
  0001e	f6 44 24 0c 01	 test	 BYTE PTR ___flags$[esp+4], 1
  00023	74 09		 je	 SHORT $LN11@scalar@24
  00025	57		 push	 edi
  00026	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002b	83 c4 04	 add	 esp, 4
$LN11@scalar@24:
  0002e	8b c7		 mov	 eax, edi
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	c2 04 00	 ret	 4
??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$_List_ptr@KV?$allocator@K@std@@@std@@QAE@XZ ; std::_List_ptr<unsigned long,std::allocator<unsigned long> >::~_List_ptr<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_ptr@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_ptr@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::_List_ptr<unsigned long,std::allocator<unsigned long> >::~_List_ptr<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_ptr@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::_List_ptr<unsigned long,std::allocator<unsigned long> >::~_List_ptr<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??1?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::~_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::~_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::~_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 641  : 		return (iterator(_Myfirst, this));

  00004	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  00015	76 05		 jbe	 SHORT $LN7@begin
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@begin:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 642  : 		}

  00028	c2 04 00	 ret	 4
?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::begin
_TEXT	ENDS
PUBLIC	?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 646  : 		return (const_iterator(_Myfirst, this));

  00004	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  00015	76 05		 jbe	 SHORT $LN5@begin@2
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@begin@2:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 647  : 		}

  00028	c2 04 00	 ret	 4
?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 651  : 		return (iterator(_Mylast, this));

  00004	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	39 5e 0c	 cmp	 DWORD PTR [esi+12], ebx
  00015	76 05		 jbe	 SHORT $LN7@end
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@end:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 652  : 		}

  00028	c2 04 00	 ret	 4
?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::end
_TEXT	ENDS
PUBLIC	?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 656  : 		return (const_iterator(_Mylast, this));

  00004	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	39 5e 0c	 cmp	 DWORD PTR [esi+12], ebx
  00015	76 05		 jbe	 SHORT $LN5@end@2
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@end@2:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 657  : 		}

  00028	c2 04 00	 ret	 4
?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::end
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::_Vector_val<HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z PROC ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::_Vector_val<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN8@Vector_val
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 426  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 425  : 		{	// construct allocator from _Al

$LN8@Vector_val:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 426  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z ENDP ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::_Vector_val<HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
__ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 29   : 	explicit __CLR_OR_THIS_CALL basic_stringbuf(ios_base::openmode _Mode =

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	e8 00 00 00 00	 call	 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >

; 30   : 		ios_base::in | ios_base::out)
; 31   : 		{	// construct empty character buffer from mode
; 32   : 		_Init(0, 0, _Getstate(_Mode));

  00029	8a 4c 24 1c	 mov	 cl, BYTE PTR __Mode$[esp+20]
  0002d	33 c0		 xor	 eax, eax
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00035	f6 c1 01	 test	 cl, 1
  00038	75 05		 jne	 SHORT $LN9@basic_stri@3
  0003a	b8 04 00 00 00	 mov	 eax, 4
$LN9@basic_stri@3:
  0003f	f6 c1 02	 test	 cl, 2
  00042	75 03		 jne	 SHORT $LN8@basic_stri@3
  00044	83 c8 02	 or	 eax, 2
$LN8@basic_stri@3:
  00047	f6 c1 08	 test	 cl, 8
  0004a	74 03		 je	 SHORT $LN7@basic_stri@3
  0004c	83 c8 08	 or	 eax, 8
$LN7@basic_stri@3:
  0004f	f6 c1 04	 test	 cl, 4
  00052	74 03		 je	 SHORT $LN6@basic_stri@3
  00054	83 c8 10	 or	 eax, 16			; 00000010H
$LN6@basic_stri@3:
  00057	89 46 40	 mov	 DWORD PTR [esi+64], eax
  0005a	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0

; 33   : 		}

  00061	8b c6		 mov	 eax, esi
  00063	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5e		 pop	 esi
  00070	83 c4 10	 add	 esp, 16			; 00000010H
  00073	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Tidy@?$list@KV?$allocator@K@std@@@std@@IAEXXZ	; std::list<unsigned long,std::allocator<unsigned long> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Tidy@?$list@KV?$allocator@K@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@KV?$allocator@K@std@@@std@@IAEXXZ PROC	; std::list<unsigned long,std::allocator<unsigned long> >::_Tidy, COMDAT
; _this$ = ecx

; 1212 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1213 : 		clear();

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	89 09		 mov	 DWORD PTR [ecx], ecx
  0000a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000d	89 49 04	 mov	 DWORD PTR [ecx+4], ecx
  00010	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00017	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  0001a	74 17		 je	 SHORT $LN3@Tidy@7
  0001c	57		 push	 edi
  0001d	8d 49 00	 npad	 3
$LL5@Tidy@7:
  00020	8b 38		 mov	 edi, DWORD PTR [eax]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	83 c4 04	 add	 esp, 4
  0002b	8b c7		 mov	 eax, edi
  0002d	3b 7e 14	 cmp	 edi, DWORD PTR [esi+20]
  00030	75 ee		 jne	 SHORT $LL5@Tidy@7
  00032	5f		 pop	 edi
$LN3@Tidy@7:

; 1214 : 		this->_Alptr.destroy(&_Nextnode(_Myhead));
; 1215 : 		this->_Alptr.destroy(&_Prevnode(_Myhead));
; 1216 : 		this->_Alnod.deallocate(_Myhead, 1);

  00033	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003c	83 c4 04	 add	 esp, 4

; 1217 : 		_Myhead = 0;

  0003f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00046	5e		 pop	 esi

; 1218 : 		}

  00047	c3		 ret	 0
?_Tidy@?$list@KV?$allocator@K@std@@@std@@IAEXXZ ENDP	; std::list<unsigned long,std::allocator<unsigned long> >::_Tidy
_TEXT	ENDS
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PBV12@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::iterator::iterator
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PBV12@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PBV12@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::iterator::iterator, COMDAT
; _this$ = ecx

; 451  : 			{	// construct with node pointer _Pnode

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Plist$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN5@iterator
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@iterator:
  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx

; 452  : 			}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PBV12@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0
__ehfuncinfo$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 29   : 	explicit __CLR_OR_THIS_CALL basic_stringbuf(ios_base::openmode _Mode =

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	e8 00 00 00 00	 call	 ??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >

; 30   : 		ios_base::in | ios_base::out)
; 31   : 		{	// construct empty character buffer from mode
; 32   : 		_Init(0, 0, _Getstate(_Mode));

  00029	8a 4c 24 1c	 mov	 cl, BYTE PTR __Mode$[esp+20]
  0002d	33 c0		 xor	 eax, eax
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  00035	f6 c1 01	 test	 cl, 1
  00038	75 05		 jne	 SHORT $LN9@basic_stri@4
  0003a	b8 04 00 00 00	 mov	 eax, 4
$LN9@basic_stri@4:
  0003f	f6 c1 02	 test	 cl, 2
  00042	75 03		 jne	 SHORT $LN8@basic_stri@4
  00044	83 c8 02	 or	 eax, 2
$LN8@basic_stri@4:
  00047	f6 c1 08	 test	 cl, 8
  0004a	74 03		 je	 SHORT $LN7@basic_stri@4
  0004c	83 c8 08	 or	 eax, 8
$LN7@basic_stri@4:
  0004f	f6 c1 04	 test	 cl, 4
  00052	74 03		 je	 SHORT $LN6@basic_stri@4
  00054	83 c8 10	 or	 eax, 16			; 00000010H
$LN6@basic_stri@4:
  00057	89 46 40	 mov	 DWORD PTR [esi+64], eax
  0005a	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0

; 33   : 		}

  00061	8b c6		 mov	 eax, esi
  00063	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5e		 pop	 esi
  00070	83 c4 10	 add	 esp, 16			; 00000010H
  00073	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xlen
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2119 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	53		 push	 ebx

; 2120 : 			if (max_size() < _Newsize)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Newsize$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  0000b	76 05		 jbe	 SHORT $LN6@Grow

; 2121 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN6@Grow:

; 2122 : 		if (_Myres < _Newsize)

  00012	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00015	3b c3		 cmp	 eax, ebx
  00017	73 19		 jae	 SHORT $LN5@Grow

; 2123 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001c	50		 push	 eax
  0001d	53		 push	 ebx
  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c9		 xor	 ecx, ecx
  00027	3b cb		 cmp	 ecx, ebx
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5b		 pop	 ebx

; 2130 : 		}

  0002f	c2 08 00	 ret	 8
$LN5@Grow:

; 2124 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	80 7c 24 10 00	 cmp	 BYTE PTR __Trim$[esp+4], 0
  00037	74 52		 je	 SHORT $LN3@Grow
  00039	83 fb 10	 cmp	 ebx, 16			; 00000010H
  0003c	73 4d		 jae	 SHORT $LN3@Grow
  0003e	57		 push	 edi

; 2125 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2126 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  0003f	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00042	3b df		 cmp	 ebx, edi
  00044	73 02		 jae	 SHORT $LN9@Grow
  00046	8b fb		 mov	 edi, ebx
$LN9@Grow:
  00048	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004b	72 21		 jb	 SHORT $LN33@Grow
  0004d	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00050	55		 push	 ebp
  00051	8b 28		 mov	 ebp, DWORD PTR [eax]
  00053	85 ff		 test	 edi, edi
  00055	76 0d		 jbe	 SHORT $LN31@Grow
  00057	57		 push	 edi
  00058	55		 push	 ebp
  00059	6a 10		 push	 16			; 00000010H
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _memcpy_s
  00061	83 c4 10	 add	 esp, 16			; 00000010H
$LN31@Grow:
  00064	55		 push	 ebp
  00065	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006a	83 c4 04	 add	 esp, 4
  0006d	5d		 pop	 ebp
$LN33@Grow:
  0006e	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00071	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00078	33 c9		 xor	 ecx, ecx
  0007a	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  0007f	3b cb		 cmp	 ecx, ebx
  00081	5f		 pop	 edi
  00082	1b c0		 sbb	 eax, eax
  00084	5e		 pop	 esi
  00085	f7 d8		 neg	 eax
  00087	5b		 pop	 ebx

; 2130 : 		}

  00088	c2 08 00	 ret	 8
$LN3@Grow:

; 2127 : 		else if (_Newsize == 0)

  0008b	85 db		 test	 ebx, ebx
  0008d	75 20		 jne	 SHORT $LN49@Grow

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

  0008f	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00092	83 f8 10	 cmp	 eax, 16			; 00000010H
  00095	72 12		 jb	 SHORT $LN47@Grow
  00097	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  0009a	33 c9		 xor	 ecx, ecx
  0009c	3b cb		 cmp	 ecx, ebx
  0009e	88 1e		 mov	 BYTE PTR [esi], bl
  000a0	1b c0		 sbb	 eax, eax
  000a2	5e		 pop	 esi
  000a3	f7 d8		 neg	 eax
  000a5	5b		 pop	 ebx

; 2130 : 		}

  000a6	c2 08 00	 ret	 8

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

$LN47@Grow:
  000a9	83 c6 04	 add	 esi, 4
  000ac	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN49@Grow:

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000af	33 c9		 xor	 ecx, ecx
  000b1	3b cb		 cmp	 ecx, ebx
  000b3	1b c0		 sbb	 eax, eax
  000b5	5e		 pop	 esi
  000b6	f7 d8		 neg	 eax
  000b8	5b		 pop	 ebx

; 2130 : 		}

  000b9	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
; Function compile flags: /Ogtpy
;	COMDAT ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow, COMDAT
; _this$ = ecx

; 2119 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp

; 2120 : 			if (max_size() < _Newsize)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Newsize$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	81 fd fe ff ff
	7f		 cmp	 ebp, 2147483646		; 7ffffffeH
  0000e	76 05		 jbe	 SHORT $LN6@Grow@2

; 2121 : 			_String_base::_Xlen();	// result too long

  00010	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN6@Grow@2:

; 2122 : 		if (_Myres < _Newsize)

  00015	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00018	3b c5		 cmp	 eax, ebp
  0001a	73 19		 jae	 SHORT $LN5@Grow@2

; 2123 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  0001c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001f	50		 push	 eax
  00020	55		 push	 ebp
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00028	33 c9		 xor	 ecx, ecx
  0002a	3b cd		 cmp	 ecx, ebp
  0002c	1b c0		 sbb	 eax, eax
  0002e	5e		 pop	 esi
  0002f	f7 d8		 neg	 eax
  00031	5d		 pop	 ebp

; 2130 : 		}

  00032	c2 08 00	 ret	 8
$LN5@Grow@2:

; 2124 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00035	80 7c 24 10 00	 cmp	 BYTE PTR __Trim$[esp+4], 0
  0003a	74 57		 je	 SHORT $LN3@Grow@2
  0003c	83 fd 08	 cmp	 ebp, 8
  0003f	73 52		 jae	 SHORT $LN3@Grow@2
  00041	57		 push	 edi

; 2125 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2126 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00042	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00045	3b ef		 cmp	 ebp, edi
  00047	73 02		 jae	 SHORT $LN9@Grow@2
  00049	8b fd		 mov	 edi, ebp
$LN9@Grow@2:
  0004b	83 f8 08	 cmp	 eax, 8
  0004e	72 24		 jb	 SHORT $LN35@Grow@2
  00050	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00053	53		 push	 ebx
  00054	8b 18		 mov	 ebx, DWORD PTR [eax]
  00056	85 ff		 test	 edi, edi
  00058	76 10		 jbe	 SHORT $LN33@Grow@2
  0005a	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  0005d	51		 push	 ecx
  0005e	53		 push	 ebx
  0005f	6a 10		 push	 16			; 00000010H
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _memcpy_s
  00067	83 c4 10	 add	 esp, 16			; 00000010H
$LN33@Grow@2:
  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00070	83 c4 04	 add	 esp, 4
  00073	5b		 pop	 ebx
$LN35@Grow@2:
  00074	33 d2		 xor	 edx, edx
  00076	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00079	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00080	33 c9		 xor	 ecx, ecx
  00082	66 89 54 7e 04	 mov	 WORD PTR [esi+edi*2+4], dx
  00087	3b cd		 cmp	 ecx, ebp
  00089	5f		 pop	 edi
  0008a	1b c0		 sbb	 eax, eax
  0008c	5e		 pop	 esi
  0008d	f7 d8		 neg	 eax
  0008f	5d		 pop	 ebp

; 2130 : 		}

  00090	c2 08 00	 ret	 8
$LN3@Grow@2:

; 2127 : 		else if (_Newsize == 0)

  00093	85 ed		 test	 ebp, ebp
  00095	75 25		 jne	 SHORT $LN51@Grow@2

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

  00097	89 6e 14	 mov	 DWORD PTR [esi+20], ebp
  0009a	83 f8 08	 cmp	 eax, 8
  0009d	72 15		 jb	 SHORT $LN49@Grow@2
  0009f	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000a2	33 c0		 xor	 eax, eax

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000a4	33 c9		 xor	 ecx, ecx
  000a6	3b cd		 cmp	 ecx, ebp
  000a8	66 89 06	 mov	 WORD PTR [esi], ax
  000ab	1b c0		 sbb	 eax, eax
  000ad	5e		 pop	 esi
  000ae	f7 d8		 neg	 eax
  000b0	5d		 pop	 ebp

; 2130 : 		}

  000b1	c2 08 00	 ret	 8

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

$LN49@Grow@2:
  000b4	83 c6 04	 add	 esi, 4
  000b7	33 c0		 xor	 eax, eax
  000b9	66 89 06	 mov	 WORD PTR [esi], ax
$LN51@Grow@2:

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000bc	33 c9		 xor	 ecx, ecx
  000be	3b cd		 cmp	 ecx, ebp
  000c0	1b c0		 sbb	 eax, eax
  000c2	5e		 pop	 esi
  000c3	f7 d8		 neg	 eax
  000c5	5d		 pop	 ebp

; 2130 : 		}

  000c6	c2 08 00	 ret	 8
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Make_iter
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Make_iter@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

  00000	56		 push	 esi
  00001	57		 push	 edi

; 661  : 		return (iterator(_Where._Myptr, this));

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0000e	85 f6		 test	 esi, esi
  00010	74 0e		 je	 SHORT $LN8@Make_iter
  00012	8b 44 24 14	 mov	 eax, DWORD PTR __Where$[esp+8]
  00016	39 46 0c	 cmp	 DWORD PTR [esi+12], eax
  00019	77 05		 ja	 SHORT $LN8@Make_iter
  0001b	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  0001e	76 09		 jbe	 SHORT $LN7@Make_iter
$LN8@Make_iter:
  00020	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00025	8b 44 24 14	 mov	 eax, DWORD PTR __Where$[esp+8]
$LN7@Make_iter:
  00029	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002b	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0002e	89 0f		 mov	 DWORD PTR [edi], ecx
  00030	8b c7		 mov	 eax, edi
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi

; 662  : 		}

  00034	c2 0c 00	 ret	 12			; 0000000cH
?_Make_iter@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Make_iter
_TEXT	ENDS
PUBLIC	??0?$_List_ptr@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z ; std::_List_ptr<unsigned long,std::allocator<unsigned long> >::_List_ptr<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_List_ptr@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_ptr@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z PROC ; std::_List_ptr<unsigned long,std::allocator<unsigned long> >::_List_ptr<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 67   : 		{	// construct base, and allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN13@List_ptr
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 68   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 67   : 		{	// construct base, and allocator from _Al

$LN13@List_ptr:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 68   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_ptr@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z ENDP ; std::_List_ptr<unsigned long,std::allocator<unsigned long> >::_List_ptr<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::begin, COMDAT
; _this$ = ecx

; 556  : 		return (_TREE_ITERATOR(_Lmost()));

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 557  : 		}

  00010	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::begin
_TEXT	ENDS
PUBLIC	?_Init@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Init
; Function compile flags: /Ogtpy
;	COMDAT ?_Init@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Init, COMDAT
; _this$ = ecx

; 1177 : 		{	// create head/nil node and make tree empty

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1178 : 		_Myhead = _Buynode();

  00003	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buynode
  00008	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 1179 : 		_Isnil(_Myhead) = true;

  0000b	c6 80 a1 00 00
	00 01		 mov	 BYTE PTR [eax+161], 1

; 1180 : 		_Root() = _Myhead;

  00012	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00015	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1181 : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

  00018	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0001b	89 00		 mov	 DWORD PTR [eax], eax
  0001d	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00020	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1182 : 		_Mysize = 0;

  00023	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  0002a	5e		 pop	 esi

; 1183 : 		}

  0002b	c3		 ret	 0
?_Init@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Init
_TEXT	ENDS
PUBLIC	??0?$_Iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PBV12@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Iterator<1>::_Iterator<1>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_Iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PBV12@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PBV12@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Iterator<1>::_Iterator<1>, COMDAT
; _this$ = ecx

; 361  : 			{	// construct with node pointer _Pnode

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Plist$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN5@Iterator
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Iterator:
  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx

; 362  : 			}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0?$_Iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAE@PAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PBV12@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Iterator<1>::_Iterator<1>
_TEXT	ENDS
PUBLIC	?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T161792 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::falsename, COMDAT
; _this$ = ecx

; 84   : 		{	// return name for false

  00000	51		 push	 ecx

; 85   : 		return (do_falsename());

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00006	56		 push	 esi
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000b	56		 push	 esi
  0000c	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T161792[esp+12], 0
  00014	ff d2		 call	 edx
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 86   : 		}

  00019	59		 pop	 ecx
  0001a	c2 04 00	 ret	 4
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::falsename
_TEXT	ENDS
PUBLIC	?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
; Function compile flags: /Ogtpy
;	COMDAT ?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T161797 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::truename, COMDAT
; _this$ = ecx

; 89   : 		{	// return name for true

  00000	51		 push	 ecx

; 90   : 		return (do_truename());

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00006	56		 push	 esi
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000b	56		 push	 esi
  0000c	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T161797[esp+12], 0
  00014	ff d2		 call	 edx
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 91   : 		}

  00019	59		 pop	 ecx
  0001a	c2 04 00	 ret	 4
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::truename
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z
_TEXT	SEGMENT
tv188 = 8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1196 : 		{	// insert _Count * _Ch at _Off

  00000	55		 push	 ebp
  00001	56		 push	 esi
  00002	57		 push	 edi

; 1197 : 		if (_Mysize < _Off)

  00003	8b 7c 24 10	 mov	 edi, DWORD PTR __Off$[esp+8]
  00007	8b f1		 mov	 esi, ecx
  00009	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0000c	73 05		 jae	 SHORT $LN3@insert

; 1198 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@insert:

; 1199 : 		if (npos - _Mysize <= _Count)

  00013	8b 6c 24 14	 mov	 ebp, DWORD PTR __Count$[esp+8]
  00017	83 c8 ff	 or	 eax, -1
  0001a	2b 46 14	 sub	 eax, DWORD PTR [esi+20]
  0001d	3b c5		 cmp	 eax, ebp
  0001f	77 05		 ja	 SHORT $LN2@insert

; 1200 : 			_String_base::_Xlen();	// result too long

  00021	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN2@insert:

; 1201 : 		size_type _Num;
; 1202 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00026	85 ed		 test	 ebp, ebp
  00028	0f 86 c7 00 00
	00		 jbe	 $LN80@insert
  0002e	53		 push	 ebx
  0002f	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00032	03 dd		 add	 ebx, ebp
  00034	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00037	76 05		 jbe	 SHORT $LN11@insert
  00039	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN11@insert:
  0003e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00041	3b c3		 cmp	 eax, ebx
  00043	73 25		 jae	 SHORT $LN10@insert
  00045	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00048	51		 push	 ecx
  00049	53		 push	 ebx
  0004a	8b ce		 mov	 ecx, esi
  0004c	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00051	85 db		 test	 ebx, ebx
$LN83@insert:
  00053	0f 86 9b 00 00
	00		 jbe	 $LN81@insert

; 1203 : 			{	// make room and insert new stuff
; 1204 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off + _Count, _Myres - _Off - _Count,
; 1205 : 				_Myptr() + _Off, _Mysize - _Off);	// empty out hole

  00059	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005c	83 f8 10	 cmp	 eax, 16			; 00000010H
  0005f	72 32		 jb	 SHORT $LN58@insert
  00061	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00064	89 54 24 14	 mov	 DWORD PTR tv188[esp+12], edx
  00068	eb 30		 jmp	 SHORT $LN59@insert

; 1201 : 		size_type _Num;
; 1202 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN10@insert:
  0006a	85 db		 test	 ebx, ebx
  0006c	75 e5		 jne	 SHORT $LN83@insert
  0006e	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00071	83 f8 10	 cmp	 eax, 16			; 00000010H
  00074	72 0e		 jb	 SHORT $LN52@insert
  00076	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00079	88 18		 mov	 BYTE PTR [eax], bl
  0007b	5b		 pop	 ebx
  0007c	5f		 pop	 edi

; 1208 : 			}
; 1209 : 		return (*this);

  0007d	8b c6		 mov	 eax, esi
  0007f	5e		 pop	 esi
  00080	5d		 pop	 ebp

; 1210 : 		}

  00081	c2 0c 00	 ret	 12			; 0000000cH

; 1201 : 		size_type _Num;
; 1202 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN52@insert:
  00084	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00087	5b		 pop	 ebx
  00088	5f		 pop	 edi
  00089	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1208 : 			}
; 1209 : 		return (*this);

  0008c	8b c6		 mov	 eax, esi
  0008e	5e		 pop	 esi
  0008f	5d		 pop	 ebp

; 1210 : 		}

  00090	c2 0c 00	 ret	 12			; 0000000cH

; 1203 : 			{	// make room and insert new stuff
; 1204 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off + _Count, _Myres - _Off - _Count,
; 1205 : 				_Myptr() + _Off, _Mysize - _Off);	// empty out hole

$LN58@insert:
  00093	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00096	89 4c 24 14	 mov	 DWORD PTR tv188[esp+12], ecx
$LN59@insert:
  0009a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009d	72 05		 jb	 SHORT $LN62@insert
  0009f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000a2	eb 03		 jmp	 SHORT $LN63@insert
$LN62@insert:
  000a4	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
$LN63@insert:
  000a7	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000aa	2b d7		 sub	 edx, edi
  000ac	52		 push	 edx
  000ad	8b 54 24 18	 mov	 edx, DWORD PTR tv188[esp+16]
  000b1	03 d7		 add	 edx, edi
  000b3	2b c7		 sub	 eax, edi
  000b5	52		 push	 edx
  000b6	2b c5		 sub	 eax, ebp
  000b8	03 cf		 add	 ecx, edi
  000ba	50		 push	 eax
  000bb	03 cd		 add	 ecx, ebp
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 _memmove_s

; 1206 : 			_Chassign(_Off, _Count, _Ch);	// fill hole

  000c3	8b 44 24 2c	 mov	 eax, DWORD PTR __Ch$[esp+28]
  000c7	83 c4 10	 add	 esp, 16			; 00000010H
  000ca	50		 push	 eax
  000cb	55		 push	 ebp
  000cc	57		 push	 edi
  000cd	8b ce		 mov	 ecx, esi
  000cf	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1207 : 			_Eos(_Num);

  000d4	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000d8	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  000db	72 10		 jb	 SHORT $LN76@insert
  000dd	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000e0	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0
  000e4	5b		 pop	 ebx
  000e5	5f		 pop	 edi

; 1208 : 			}
; 1209 : 		return (*this);

  000e6	8b c6		 mov	 eax, esi
  000e8	5e		 pop	 esi
  000e9	5d		 pop	 ebp

; 1210 : 		}

  000ea	c2 0c 00	 ret	 12			; 0000000cH

; 1207 : 			_Eos(_Num);

$LN76@insert:
  000ed	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000f0	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0
$LN81@insert:
  000f4	5b		 pop	 ebx
$LN80@insert:
  000f5	5f		 pop	 edi

; 1208 : 			}
; 1209 : 		return (*this);

  000f6	8b c6		 mov	 eax, esi
  000f8	5e		 pop	 esi
  000f9	5d		 pop	 ebp

; 1210 : 		}

  000fa	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?_Make_iter@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBE?AViterator@12@Vconst_iterator@12@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Make_iter
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Make_iter@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBE?AViterator@12@Vconst_iterator@12@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBE?AViterator@12@Vconst_iterator@12@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Make_iter, COMDAT
; _this$ = ecx

; 575  : 		{	// make iterator from const_iterator

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 576  : 		return (iterator(_TREE_ITERATOR(_Where._Ptr)));

  00004	8b 7c 24 14	 mov	 edi, DWORD PTR __Where$[esp+8]
  00008	85 f6		 test	 esi, esi
  0000a	75 05		 jne	 SHORT $LN7@Make_iter@2
  0000c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@Make_iter@2:
  00011	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  00015	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00017	89 78 04	 mov	 DWORD PTR [eax+4], edi
  0001a	5f		 pop	 edi
  0001b	89 08		 mov	 DWORD PTR [eax], ecx
  0001d	5e		 pop	 esi

; 577  : 		}

  0001e	c2 0c 00	 ret	 12			; 0000000cH
?_Make_iter@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBE?AViterator@12@Vconst_iterator@12@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Make_iter
_TEXT	ENDS
PUBLIC	?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T162105 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::grouping, COMDAT
; _this$ = ecx

; 79   : 		{	// return grouping string

  00000	51		 push	 ecx

; 80   : 		return (do_grouping());

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00006	56		 push	 esi
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000b	56		 push	 esi
  0000c	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T162105[esp+12], 0
  00014	ff d2		 call	 edx
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 81   : 		}

  00019	59		 pop	 ecx
  0001a	c2 04 00	 ret	 4
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::grouping
_TEXT	ENDS
PUBLIC	??0?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z ; std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z PROC ; std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >, COMDAT
; _this$ = ecx

; 52   : 		{	// construct traits from _Parg and allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN13@Tree_nod
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 53   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 08 00	 ret	 8

; 52   : 		{	// construct traits from _Parg and allocator from _Al

$LN13@Tree_nod:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 53   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 08 00	 ret	 8
??0?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
_TEXT	ENDS
PUBLIC	??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
;	COMDAT ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 114  : 	return (!(_Left == _Right));

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  00004	8b c2		 mov	 eax, edx
  00006	56		 push	 esi
  00007	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000a	8d 9b 00 00 00
	00		 npad	 6
$LL9@operator@25:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL9@operator@25
  00017	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Right$[esp]
  0001b	2b c6		 sub	 eax, esi
  0001d	50		 push	 eax
  0001e	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00021	52		 push	 edx
  00022	50		 push	 eax
  00023	6a 00		 push	 0
  00025	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  0002a	f7 d8		 neg	 eax
  0002c	1b c0		 sbb	 eax, eax
  0002e	f7 d8		 neg	 eax
  00030	5e		 pop	 esi

; 115  : 	}

  00031	c3		 ret	 0
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?begin@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?begin@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ PROC ; std::list<unsigned long,std::allocator<unsigned long> >::begin, COMDAT
; _this$ = ecx

; 534  : 		return (iterator(_Nextnode(_Myhead), this));

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 535  : 		}

  00010	c2 04 00	 ret	 4
?begin@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::begin
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 951  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 952  : 		if (_Right.size() < _Roff)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7c 24 18	 mov	 edi, DWORD PTR __Roff$[esp+12]
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 7d 14	 cmp	 DWORD PTR [ebp+20], edi
  00011	73 05		 jae	 SHORT $LN5@append

; 953  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@append:

; 954  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]

; 955  : 		if (_Num < _Count)

  0001b	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Count$[esp+12]
  0001f	2b c7		 sub	 eax, edi
  00021	3b c3		 cmp	 eax, ebx
  00023	73 02		 jae	 SHORT $LN4@append

; 956  : 			_Count = _Num;	// trim _Count to size

  00025	8b d8		 mov	 ebx, eax
$LN4@append:

; 957  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00027	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002a	83 c9 ff	 or	 ecx, -1
  0002d	2b c8		 sub	 ecx, eax
  0002f	3b cb		 cmp	 ecx, ebx
  00031	76 07		 jbe	 SHORT $LN2@append
  00033	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]
  00036	3b d0		 cmp	 edx, eax
  00038	73 05		 jae	 SHORT $LN3@append
$LN2@append:

; 958  : 			_String_base::_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append:

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  0003f	85 db		 test	 ebx, ebx
  00041	0f 86 bd 00 00
	00		 jbe	 $LN91@append
  00047	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0004a	03 fb		 add	 edi, ebx
  0004c	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00052	76 05		 jbe	 SHORT $LN17@append
  00054	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@append:
  00059	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005c	3b c7		 cmp	 eax, edi
  0005e	73 1f		 jae	 SHORT $LN16@append
  00060	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00063	50		 push	 eax
  00064	57		 push	 edi
  00065	8b ce		 mov	 ecx, esi
  00067	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0006c	85 ff		 test	 edi, edi
$LN92@append:
  0006e	0f 86 90 00 00
	00		 jbe	 $LN91@append

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

  00074	83 7d 18 08	 cmp	 DWORD PTR [ebp+24], 8
  00078	72 33		 jb	 SHORT $LN66@append
  0007a	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]
  0007d	eb 31		 jmp	 SHORT $LN67@append

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN16@append:
  0007f	85 ff		 test	 edi, edi
  00081	75 eb		 jne	 SHORT $LN92@append
  00083	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00086	83 f8 08	 cmp	 eax, 8
  00089	72 11		 jb	 SHORT $LN60@append
  0008b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008e	33 c9		 xor	 ecx, ecx
  00090	5f		 pop	 edi
  00091	66 89 08	 mov	 WORD PTR [eax], cx

; 965  : 			}
; 966  : 		return (*this);

  00094	8b c6		 mov	 eax, esi
  00096	5e		 pop	 esi
  00097	5d		 pop	 ebp
  00098	5b		 pop	 ebx

; 967  : 		}

  00099	c2 0c 00	 ret	 12			; 0000000cH

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN60@append:
  0009c	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0009f	33 c9		 xor	 ecx, ecx
  000a1	5f		 pop	 edi
  000a2	66 89 08	 mov	 WORD PTR [eax], cx

; 965  : 			}
; 966  : 		return (*this);

  000a5	8b c6		 mov	 eax, esi
  000a7	5e		 pop	 esi
  000a8	5d		 pop	 ebp
  000a9	5b		 pop	 ebx

; 967  : 		}

  000aa	c2 0c 00	 ret	 12			; 0000000cH

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

$LN66@append:
  000ad	83 c5 04	 add	 ebp, 4
$LN67@append:
  000b0	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000b3	83 f8 08	 cmp	 eax, 8
  000b6	72 05		 jb	 SHORT $LN70@append
  000b8	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000bb	eb 03		 jmp	 SHORT $LN71@append
$LN70@append:
  000bd	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN71@append:
  000c0	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000c3	03 db		 add	 ebx, ebx
  000c5	53		 push	 ebx
  000c6	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Roff$[esp+16]
  000ca	2b c1		 sub	 eax, ecx
  000cc	8d 5c 5d 00	 lea	 ebx, DWORD PTR [ebp+ebx*2]
  000d0	53		 push	 ebx
  000d1	03 c0		 add	 eax, eax
  000d3	50		 push	 eax
  000d4	8d 14 4a	 lea	 edx, DWORD PTR [edx+ecx*2]
  000d7	52		 push	 edx
  000d8	e8 00 00 00 00	 call	 _memcpy_s
  000dd	83 c4 10	 add	 esp, 16			; 00000010H

; 964  : 			_Eos(_Num);

  000e0	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000e4	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000e7	72 12		 jb	 SHORT $LN86@append
  000e9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ec	33 c9		 xor	 ecx, ecx
  000ee	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
  000f2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000f3	8b c6		 mov	 eax, esi
  000f5	5e		 pop	 esi
  000f6	5d		 pop	 ebp
  000f7	5b		 pop	 ebx

; 967  : 		}

  000f8	c2 0c 00	 ret	 12			; 0000000cH

; 964  : 			_Eos(_Num);

$LN86@append:
  000fb	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000fe	33 c9		 xor	 ecx, ecx
  00100	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
$LN91@append:
  00104	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  00105	8b c6		 mov	 eax, esi
  00107	5e		 pop	 esi
  00108	5d		 pop	 ebp
  00109	5b		 pop	 ebx

; 967  : 		}

  0010a	c2 0c 00	 ret	 12			; 0000000cH
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	?_Make_iter@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Make_iter
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Make_iter@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Make_iter, COMDAT
; _this$ = ecx

; 554  : 		return (iterator(_Where._Ptr, this));

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Where$[esp]
  00004	56		 push	 esi
  00005	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN7@Make_iter@3
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@Make_iter@3:
  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 555  : 		}

  00026	c2 0c 00	 ret	 12			; 0000000cH
?_Make_iter@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Make_iter
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@

; 31   : 		}

  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN19@logic_erro
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN19@logic_erro:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 35   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN7@what
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 36   : 		}

  00009	c3		 ret	 0

; 35   : 		return (_Str.c_str());

$LN7@what:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 36   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN22@scalar@25
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN22@scalar@25:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN32@scalar@25
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN32@scalar@25:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?what@runtime_error@std@@UBEPBDXZ		; std::runtime_error::what
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@runtime_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	ENDS
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx

; 157  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@

; 158  : 		}

  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN19@runtime_er
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN19@runtime_er:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?what@runtime_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@runtime_error@std@@UBEPBDXZ PROC			; std::runtime_error::what, COMDAT
; _this$ = ecx

; 162  : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN7@what@2
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 163  : 		}

  00009	c3		 ret	 0

; 162  : 		return (_Str.c_str());

$LN7@what@2:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 163  : 		}

  0000d	c3		 ret	 0
?what@runtime_error@std@@UBEPBDXZ ENDP			; std::runtime_error::what
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN22@scalar@26
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN22@scalar@26:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN32@scalar@26
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN32@scalar@26:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:PROC ; std::_Locinfo::_Locinfo_ctor
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$4
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
xdata$x	ENDS
;	COMDAT ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_locstr$ = 8						; size = 4
??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Locinfo::_Locinfo, COMDAT
; _this$ = ecx

; 96   : 		{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	33 db		 xor	 ebx, ebx
  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00031	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  00036	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00039	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  0003c	89 5c 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], ebx
  00040	88 5e 08	 mov	 BYTE PTR [esi+8], bl
  00043	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00046	89 5e 34	 mov	 DWORD PTR [esi+52], ebx
  00049	88 5e 24	 mov	 BYTE PTR [esi+36], bl
  0004c	89 46 54	 mov	 DWORD PTR [esi+84], eax
  0004f	89 5e 50	 mov	 DWORD PTR [esi+80], ebx
  00052	88 5e 40	 mov	 BYTE PTR [esi+64], bl
  00055	89 46 70	 mov	 DWORD PTR [esi+112], eax
  00058	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  0005b	88 5e 5c	 mov	 BYTE PTR [esi+92], bl

; 97   :         _Locinfo_ctor(this, locstr);

  0005e	8b 44 24 20	 mov	 eax, DWORD PTR _locstr$[esp+24]
  00062	50		 push	 eax
  00063	56		 push	 esi
  00064	c6 44 24 20 04	 mov	 BYTE PTR __$EHRec$[esp+44], 4
  00069	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Locinfo::_Locinfo_ctor
  0006e	83 c4 08	 add	 esp, 8

; 98   : 		}

  00071	8b c6		 mov	 eax, esi
  00073	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	83 c4 10	 add	 esp, 16			; 00000010H
  00084	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 20	 add	 ecx, 32			; 00000020H
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 58	 add	 ecx, 88			; 00000058H
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0003b	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__ehfuncinfo$??1_Locinfo@std@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1_Locinfo@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1_Locinfo@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
xdata$x	ENDS
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT
; _this$ = ecx

; 101  :         {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1_Locinfo@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	55		 push	 ebp
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 14	 mov	 DWORD PTR _this$[esp+36], esi

; 102  :         _Locinfo_dtor(this);

  0002b	56		 push	 esi
  0002c	c7 44 24 24 04
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 4
  00034	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor

; 103  :         }

  00039	bd 10 00 00 00	 mov	 ebp, 16			; 00000010H
  0003e	83 c4 04	 add	 esp, 4
  00041	39 6e 70	 cmp	 DWORD PTR [esi+112], ebp
  00044	72 0c		 jb	 SHORT $LN24@Locinfo
  00046	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004f	83 c4 04	 add	 esp, 4
$LN24@Locinfo:
  00052	33 db		 xor	 ebx, ebx
  00054	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00059	89 7e 70	 mov	 DWORD PTR [esi+112], edi
  0005c	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  0005f	88 5e 5c	 mov	 BYTE PTR [esi+92], bl
  00062	39 6e 54	 cmp	 DWORD PTR [esi+84], ebp
  00065	72 0c		 jb	 SHORT $LN50@Locinfo
  00067	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00070	83 c4 04	 add	 esp, 4
$LN50@Locinfo:
  00073	89 7e 54	 mov	 DWORD PTR [esi+84], edi
  00076	89 5e 50	 mov	 DWORD PTR [esi+80], ebx
  00079	88 5e 40	 mov	 BYTE PTR [esi+64], bl
  0007c	39 6e 38	 cmp	 DWORD PTR [esi+56], ebp
  0007f	72 0c		 jb	 SHORT $LN76@Locinfo
  00081	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008a	83 c4 04	 add	 esp, 4
$LN76@Locinfo:
  0008d	89 7e 38	 mov	 DWORD PTR [esi+56], edi
  00090	89 5e 34	 mov	 DWORD PTR [esi+52], ebx
  00093	88 5e 24	 mov	 BYTE PTR [esi+36], bl
  00096	39 6e 1c	 cmp	 DWORD PTR [esi+28], ebp
  00099	72 0c		 jb	 SHORT $LN102@Locinfo
  0009b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a4	83 c4 04	 add	 esp, 4
$LN102@Locinfo:
  000a7	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  000aa	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000ad	8b ce		 mov	 ecx, esi
  000af	88 5e 08	 mov	 BYTE PTR [esi+8], bl
  000b2	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+44], -1
  000ba	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000bf	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ca	59		 pop	 ecx
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5d		 pop	 ebp
  000ce	5b		 pop	 ebx
  000cf	83 c4 10	 add	 esp, 16			; 00000010H
  000d2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 20	 add	 ecx, 32			; 00000020H
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 58	 add	 ecx, 88			; 00000058H
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??1_Locinfo@std@@QAE@XZ:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0003b	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??1HostDevice@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1HostDevice@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1HostDevice@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1HostDevice@@QAE@XZ$2
__ehfuncinfo$??1HostDevice@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1HostDevice@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.h
xdata$x	ENDS
;	COMDAT ??1HostDevice@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1HostDevice@@QAE@XZ PROC				; HostDevice::~HostDevice, COMDAT
; _this$ = ecx

; 478  : 	~HostDevice () { }

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1HostDevice@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  0002c	c7 44 24 18 02
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+36], 2
  00034	e8 00 00 00 00	 call	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
  00039	83 7e 58 10	 cmp	 DWORD PTR [esi+88], 16	; 00000010H
  0003d	72 0c		 jb	 SHORT $LN23@HostDevice
  0003f	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00048	83 c4 04	 add	 esp, 4
$LN23@HostDevice:
  0004b	33 db		 xor	 ebx, ebx
  0004d	c7 46 58 0f 00
	00 00		 mov	 DWORD PTR [esi+88], 15	; 0000000fH
  00054	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
  00057	88 5e 44	 mov	 BYTE PTR [esi+68], bl
  0005a	83 7e 3c 08	 cmp	 DWORD PTR [esi+60], 8
  0005e	72 0c		 jb	 SHORT $LN51@HostDevice
  00060	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00069	83 c4 04	 add	 esp, 4
$LN51@HostDevice:
  0006c	33 d2		 xor	 edx, edx
  0006e	c7 46 3c 07 00
	00 00		 mov	 DWORD PTR [esi+60], 7
  00075	89 5e 38	 mov	 DWORD PTR [esi+56], ebx
  00078	66 89 56 28	 mov	 WORD PTR [esi+40], dx
  0007c	83 7e 20 10	 cmp	 DWORD PTR [esi+32], 16	; 00000010H
  00080	72 0c		 jb	 SHORT $LN77@HostDevice
  00082	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008b	83 c4 04	 add	 esp, 4
$LN77@HostDevice:
  0008e	c7 46 20 0f 00
	00 00		 mov	 DWORD PTR [esi+32], 15	; 0000000fH
  00095	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx
  00098	88 5e 0c	 mov	 BYTE PTR [esi+12], bl
  0009b	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	83 c4 10	 add	 esp, 16			; 00000010H
  000ac	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1HostDevice@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1HostDevice@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 24	 add	 ecx, 36			; 00000024H
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$??1HostDevice@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 40	 add	 ecx, 64			; 00000040H
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??1HostDevice@@QAE@XZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  00028	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1HostDevice@@QAE@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1HostDevice@@QAE@XZ ENDP				; HostDevice::~HostDevice
PUBLIC	??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::~ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ$0
__ehfuncinfo$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::~ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0002b	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00033	e8 00 00 00 00	 call	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
  00038	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  0003e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00042	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00049	59		 pop	 ecx
  0004a	5e		 pop	 esi
  0004b	83 c4 10	 add	 esp, 16			; 00000010H
  0004e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::~ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::end
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::end, COMDAT
; _this$ = ecx

; 566  : 		return (_TREE_ITERATOR(_Myhead));

  00000	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00009	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 567  : 		}

  0000e	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::end
_TEXT	ENDS
PUBLIC	??1?$_List_val@KV?$allocator@K@std@@@std@@QAE@XZ ; std::_List_val<unsigned long,std::allocator<unsigned long> >::~_List_val<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_val@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_val@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::_List_val<unsigned long,std::allocator<unsigned long> >::~_List_val<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_val@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::_List_val<unsigned long,std::allocator<unsigned long> >::~_List_val<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??1?$pair@$$CBHUHostDevice@@@std@@QAE@XZ	; std::pair<int const ,HostDevice>::~pair<int const ,HostDevice>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$pair@$$CBHUHostDevice@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBHUHostDevice@@@std@@QAE@XZ PROC		; std::pair<int const ,HostDevice>::~pair<int const ,HostDevice>, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
??1?$pair@$$CBHUHostDevice@@@std@@QAE@XZ ENDP		; std::pair<int const ,HostDevice>::~pair<int const ,HostDevice>
_TEXT	ENDS
PUBLIC	??1?$_Tree_ptr@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree_ptr<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::~_Tree_ptr<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Tree_ptr@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_ptr@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_ptr<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::~_Tree_ptr<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_Tree_ptr@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_ptr<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::~_Tree_ptr<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 998  : 		{	// append _Count * _Ch

  00000	53		 push	 ebx

; 999  : 			if (npos - _Mysize <= _Count)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Count$[esp]
  00005	56		 push	 esi
  00006	83 c8 ff	 or	 eax, -1
  00009	8b f1		 mov	 esi, ecx
  0000b	2b 46 14	 sub	 eax, DWORD PTR [esi+20]
  0000e	3b c3		 cmp	 eax, ebx
  00010	77 05		 ja	 SHORT $LN2@append@2

; 1000 : 			_String_base::_Xlen();	// result too long

  00012	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN2@append@2:

; 1001 : 
; 1002 : 		size_type _Num;
; 1003 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00017	85 db		 test	 ebx, ebx
  00019	0f 86 80 00 00
	00		 jbe	 $LN63@append@2
  0001f	57		 push	 edi
  00020	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00023	03 fb		 add	 edi, ebx
  00025	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00028	76 05		 jbe	 SHORT $LN10@append@2
  0002a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN10@append@2:
  0002f	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00032	3b c7		 cmp	 eax, edi
  00034	73 39		 jae	 SHORT $LN9@append@2
  00036	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00039	51		 push	 ecx
  0003a	57		 push	 edi
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00042	85 ff		 test	 edi, edi
$LN66@append@2:
  00044	76 58		 jbe	 SHORT $LN64@append@2

; 1004 : 			{	// make room and append new stuff using assign
; 1005 : 			_Chassign(_Mysize, _Count, _Ch);

  00046	8b 54 24 14	 mov	 edx, DWORD PTR __Ch$[esp+8]
  0004a	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0004d	52		 push	 edx
  0004e	53		 push	 ebx
  0004f	50		 push	 eax
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1006 : 			_Eos(_Num);

  00057	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0005b	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0005e	72 37		 jb	 SHORT $LN59@append@2
  00060	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00063	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  00067	5f		 pop	 edi

; 1007 : 			}
; 1008 : 		return (*this);

  00068	8b c6		 mov	 eax, esi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx

; 1009 : 		}

  0006c	c2 08 00	 ret	 8

; 1001 : 
; 1002 : 		size_type _Num;
; 1003 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN9@append@2:
  0006f	85 ff		 test	 edi, edi
  00071	75 d1		 jne	 SHORT $LN66@append@2
  00073	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00076	83 f8 10	 cmp	 eax, 16			; 00000010H
  00079	72 0e		 jb	 SHORT $LN51@append@2
  0007b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0007e	5f		 pop	 edi
  0007f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1007 : 			}
; 1008 : 		return (*this);

  00082	8b c6		 mov	 eax, esi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx

; 1009 : 		}

  00086	c2 08 00	 ret	 8

; 1001 : 
; 1002 : 		size_type _Num;
; 1003 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN51@append@2:
  00089	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0008c	5f		 pop	 edi
  0008d	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1007 : 			}
; 1008 : 		return (*this);

  00090	8b c6		 mov	 eax, esi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 1009 : 		}

  00094	c2 08 00	 ret	 8

; 1006 : 			_Eos(_Num);

$LN59@append@2:
  00097	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0009a	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN64@append@2:
  0009e	5f		 pop	 edi
$LN63@append@2:

; 1007 : 			}
; 1008 : 		return (*this);

  0009f	8b c6		 mov	 eax, esi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx

; 1009 : 		}

  000a3	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1046 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx

; 1047 : 		if (_Right.size() < _Roff)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Right$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 10	 mov	 ebp, DWORD PTR __Roff$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 6b 14	 cmp	 DWORD PTR [ebx+20], ebp
  00011	73 05		 jae	 SHORT $LN5@assign

; 1048 : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@assign:

; 1049 : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]

; 1050 : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b fd		 sub	 edi, ebp
  00021	3b c7		 cmp	 eax, edi
  00023	73 02		 jae	 SHORT $LN4@assign

; 1051 : 			_Num = _Count;	// trim _Num to size

  00025	8b f8		 mov	 edi, eax
$LN4@assign:

; 1052 : 
; 1053 : 		if (this == &_Right)

  00027	3b f3		 cmp	 esi, ebx
  00029	75 1f		 jne	 SHORT $LN3@assign

; 1054 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 fd		 add	 edi, ebp
  0002f	57		 push	 edi
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	55		 push	 ebp
  00038	6a 00		 push	 0
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	5b		 pop	 ebx

; 1061 : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign:

; 1055 : 		else if (_Grow(_Num))

  0004a	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0004d	76 05		 jbe	 SHORT $LN17@assign
  0004f	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@assign:
  00054	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00057	3b c7		 cmp	 eax, edi
  00059	73 1b		 jae	 SHORT $LN16@assign
  0005b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0005e	50		 push	 eax
  0005f	57		 push	 edi
  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00067	85 ff		 test	 edi, edi
$LN87@assign:
  00069	76 66		 jbe	 SHORT $LN86@assign

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

  0006b	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0006f	72 2f		 jb	 SHORT $LN64@assign
  00071	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00074	eb 2d		 jmp	 SHORT $LN65@assign

; 1055 : 		else if (_Grow(_Num))

$LN16@assign:
  00076	85 ff		 test	 edi, edi
  00078	75 ef		 jne	 SHORT $LN87@assign
  0007a	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0007d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00080	72 0f		 jb	 SHORT $LN58@assign
  00082	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00085	5f		 pop	 edi
  00086	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00089	8b c6		 mov	 eax, esi
  0008b	5e		 pop	 esi
  0008c	5d		 pop	 ebp
  0008d	5b		 pop	 ebx

; 1061 : 		}

  0008e	c2 0c 00	 ret	 12			; 0000000cH

; 1055 : 		else if (_Grow(_Num))

$LN58@assign:
  00091	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00098	8b c6		 mov	 eax, esi
  0009a	5e		 pop	 esi
  0009b	5d		 pop	 ebp
  0009c	5b		 pop	 ebx

; 1061 : 		}

  0009d	c2 0c 00	 ret	 12			; 0000000cH

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

$LN64@assign:
  000a0	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN65@assign:
  000a3	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000a6	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000a9	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000ac	72 04		 jb	 SHORT $LN68@assign
  000ae	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b0	eb 02		 jmp	 SHORT $LN69@assign
$LN68@assign:
  000b2	8b c3		 mov	 eax, ebx
$LN69@assign:
  000b4	57		 push	 edi
  000b5	03 d5		 add	 edx, ebp
  000b7	52		 push	 edx
  000b8	51		 push	 ecx
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 _memcpy_s
  000bf	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 			_Eos(_Num);

  000c2	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c9	72 02		 jb	 SHORT $LN82@assign
  000cb	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN82@assign:
  000cd	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
$LN86@assign:
  000d1	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  000d2	8b c6		 mov	 eax, esi
  000d4	5e		 pop	 esi
  000d5	5d		 pop	 ebp
  000d6	5b		 pop	 ebx

; 1061 : 		}

  000d7	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1046 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx

; 1047 : 		if (_Right.size() < _Roff)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Roff$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 5d 14	 cmp	 DWORD PTR [ebp+20], ebx
  00011	73 05		 jae	 SHORT $LN5@assign@2

; 1048 : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@assign@2:

; 1049 : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 7d 14	 mov	 edi, DWORD PTR [ebp+20]

; 1050 : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b fb		 sub	 edi, ebx
  00021	3b c7		 cmp	 eax, edi
  00023	73 02		 jae	 SHORT $LN4@assign@2

; 1051 : 			_Num = _Count;	// trim _Num to size

  00025	8b f8		 mov	 edi, eax
$LN4@assign@2:

; 1052 : 
; 1053 : 		if (this == &_Right)

  00027	3b f5		 cmp	 esi, ebp
  00029	75 1f		 jne	 SHORT $LN3@assign@2

; 1054 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 fb		 add	 edi, ebx
  0002f	57		 push	 edi
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00037	53		 push	 ebx
  00038	6a 00		 push	 0
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00041	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	5b		 pop	 ebx

; 1061 : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign@2:

; 1055 : 		else if (_Grow(_Num))

  0004a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00050	76 05		 jbe	 SHORT $LN17@assign@2
  00052	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@assign@2:
  00057	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005a	3b c7		 cmp	 eax, edi
  0005c	73 1b		 jae	 SHORT $LN16@assign@2
  0005e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00061	50		 push	 eax
  00062	57		 push	 edi
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0006a	85 ff		 test	 edi, edi
$LN91@assign@2:
  0006c	76 7a		 jbe	 SHORT $LN90@assign@2

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

  0006e	83 7d 18 08	 cmp	 DWORD PTR [ebp+24], 8
  00072	72 33		 jb	 SHORT $LN66@assign@2
  00074	8b 4d 04	 mov	 ecx, DWORD PTR [ebp+4]
  00077	eb 31		 jmp	 SHORT $LN67@assign@2

; 1055 : 		else if (_Grow(_Num))

$LN16@assign@2:
  00079	85 ff		 test	 edi, edi
  0007b	75 ef		 jne	 SHORT $LN91@assign@2
  0007d	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00080	83 f8 08	 cmp	 eax, 8
  00083	72 11		 jb	 SHORT $LN60@assign@2
  00085	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00088	33 c9		 xor	 ecx, ecx
  0008a	5f		 pop	 edi
  0008b	66 89 08	 mov	 WORD PTR [eax], cx

; 1059 : 			}
; 1060 : 		return (*this);

  0008e	8b c6		 mov	 eax, esi
  00090	5e		 pop	 esi
  00091	5d		 pop	 ebp
  00092	5b		 pop	 ebx

; 1061 : 		}

  00093	c2 0c 00	 ret	 12			; 0000000cH

; 1055 : 		else if (_Grow(_Num))

$LN60@assign@2:
  00096	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00099	33 c9		 xor	 ecx, ecx
  0009b	5f		 pop	 edi
  0009c	66 89 08	 mov	 WORD PTR [eax], cx

; 1059 : 			}
; 1060 : 		return (*this);

  0009f	8b c6		 mov	 eax, esi
  000a1	5e		 pop	 esi
  000a2	5d		 pop	 ebp
  000a3	5b		 pop	 ebx

; 1061 : 		}

  000a4	c2 0c 00	 ret	 12			; 0000000cH

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

$LN66@assign@2:
  000a7	8d 4d 04	 lea	 ecx, DWORD PTR [ebp+4]
$LN67@assign@2:
  000aa	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000ae	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  000b1	72 05		 jb	 SHORT $LN70@assign@2
  000b3	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  000b6	eb 02		 jmp	 SHORT $LN71@assign@2
$LN70@assign@2:
  000b8	8b c5		 mov	 eax, ebp
$LN71@assign@2:
  000ba	8b 54 24 18	 mov	 edx, DWORD PTR __Roff$[esp+12]
  000be	8d 0c 51	 lea	 ecx, DWORD PTR [ecx+edx*2]
  000c1	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  000c4	53		 push	 ebx
  000c5	51		 push	 ecx
  000c6	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000c9	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  000cc	52		 push	 edx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 _memcpy_s
  000d3	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 			_Eos(_Num);

  000d6	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000da	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000dd	72 03		 jb	 SHORT $LN86@assign@2
  000df	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN86@assign@2:
  000e2	33 c0		 xor	 eax, eax
  000e4	66 89 04 2b	 mov	 WORD PTR [ebx+ebp], ax
$LN90@assign@2:
  000e8	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  000e9	8b c6		 mov	 eax, esi
  000eb	5e		 pop	 esi
  000ec	5d		 pop	 ebp
  000ed	5b		 pop	 ebx

; 1061 : 		}

  000ee	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?end@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::end
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?end@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ PROC ; std::list<unsigned long,std::allocator<unsigned long> >::end, COMDAT
; _this$ = ecx

; 544  : 		return (iterator(_Myhead, this));

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00009	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 545  : 		}

  0000e	c2 04 00	 ret	 4
?end@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::end
_TEXT	ENDS
PUBLIC	??0?$_List_val@KV?$allocator@K@std@@@std@@QAE@V?$allocator@K@1@@Z ; std::_List_val<unsigned long,std::allocator<unsigned long> >::_List_val<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_List_val@KV?$allocator@K@std@@@std@@QAE@V?$allocator@K@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_val@KV?$allocator@K@std@@@std@@QAE@V?$allocator@K@1@@Z PROC ; std::_List_val<unsigned long,std::allocator<unsigned long> >::_List_val<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 85   : 		{	// construct base, and allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN18@List_val
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 86   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 85   : 		{	// construct base, and allocator from _Al

$LN18@List_val:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 86   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_val@KV?$allocator@K@std@@@std@@QAE@V?$allocator@K@1@@Z ENDP ; std::_List_val<unsigned long,std::allocator<unsigned long> >::_List_val<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABH@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::lower_bound
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1004 : 		return (_TREE_ITERATOR(_Lbound(_Keyval)));

  00000	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00003	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00006	80 b8 a1 00 00
	00 00		 cmp	 BYTE PTR [eax+161], 0
  0000d	75 1f		 jne	 SHORT $LN5@lower_boun
  0000f	56		 push	 esi
  00010	8b 74 24 0c	 mov	 esi, DWORD PTR __Keyval$[esp]
  00014	8b 36		 mov	 esi, DWORD PTR [esi]
$LL6@lower_boun:
  00016	39 70 10	 cmp	 DWORD PTR [eax+16], esi
  00019	7d 05		 jge	 SHORT $LN4@lower_boun
  0001b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001e	eb 04		 jmp	 SHORT $LN3@lower_boun
$LN4@lower_boun:
  00020	8b d0		 mov	 edx, eax
  00022	8b 00		 mov	 eax, DWORD PTR [eax]
$LN3@lower_boun:
  00024	80 b8 a1 00 00
	00 00		 cmp	 BYTE PTR [eax+161], 0
  0002b	74 e9		 je	 SHORT $LL6@lower_boun
  0002d	5e		 pop	 esi
$LN5@lower_boun:
  0002e	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00032	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00034	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00037	89 08		 mov	 DWORD PTR [eax], ecx

; 1005 : 		}

  00039	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::lower_bound
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 951  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 952  : 		if (_Right.size() < _Roff)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7c 24 18	 mov	 edi, DWORD PTR __Roff$[esp+12]
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 7d 14	 cmp	 DWORD PTR [ebp+20], edi
  00011	73 05		 jae	 SHORT $LN5@append@3

; 953  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@append@3:

; 954  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]

; 955  : 		if (_Num < _Count)

  0001b	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Count$[esp+12]
  0001f	2b c7		 sub	 eax, edi
  00021	3b c3		 cmp	 eax, ebx
  00023	73 02		 jae	 SHORT $LN4@append@3

; 956  : 			_Count = _Num;	// trim _Count to size

  00025	8b d8		 mov	 ebx, eax
$LN4@append@3:

; 957  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00027	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002a	83 c9 ff	 or	 ecx, -1
  0002d	2b c8		 sub	 ecx, eax
  0002f	3b cb		 cmp	 ecx, ebx
  00031	76 07		 jbe	 SHORT $LN2@append@3
  00033	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]
  00036	3b d0		 cmp	 edx, eax
  00038	73 05		 jae	 SHORT $LN3@append@3
$LN2@append@3:

; 958  : 			_String_base::_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@3:

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  0003f	85 db		 test	 ebx, ebx
  00041	0f 86 ab 00 00
	00		 jbe	 $LN87@append@3
  00047	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0004a	03 fb		 add	 edi, ebx
  0004c	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0004f	76 05		 jbe	 SHORT $LN17@append@3
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@append@3:
  00056	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00059	3b c7		 cmp	 eax, edi
  0005b	73 1f		 jae	 SHORT $LN16@append@3
  0005d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00060	50		 push	 eax
  00061	57		 push	 edi
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ff		 test	 edi, edi
$LN88@append@3:
  0006b	0f 86 81 00 00
	00		 jbe	 $LN87@append@3

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

  00071	83 7d 18 10	 cmp	 DWORD PTR [ebp+24], 16	; 00000010H
  00075	72 2f		 jb	 SHORT $LN64@append@3
  00077	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]
  0007a	eb 2d		 jmp	 SHORT $LN65@append@3

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN16@append@3:
  0007c	85 ff		 test	 edi, edi
  0007e	75 eb		 jne	 SHORT $LN88@append@3
  00080	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00083	83 f8 10	 cmp	 eax, 16			; 00000010H
  00086	72 0f		 jb	 SHORT $LN58@append@3
  00088	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008b	5f		 pop	 edi
  0008c	c6 00 00	 mov	 BYTE PTR [eax], 0

; 965  : 			}
; 966  : 		return (*this);

  0008f	8b c6		 mov	 eax, esi
  00091	5e		 pop	 esi
  00092	5d		 pop	 ebp
  00093	5b		 pop	 ebx

; 967  : 		}

  00094	c2 0c 00	 ret	 12			; 0000000cH

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN58@append@3:
  00097	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0009a	5f		 pop	 edi
  0009b	c6 00 00	 mov	 BYTE PTR [eax], 0

; 965  : 			}
; 966  : 		return (*this);

  0009e	8b c6		 mov	 eax, esi
  000a0	5e		 pop	 esi
  000a1	5d		 pop	 ebp
  000a2	5b		 pop	 ebx

; 967  : 		}

  000a3	c2 0c 00	 ret	 12			; 0000000cH

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

$LN64@append@3:
  000a6	83 c5 04	 add	 ebp, 4
$LN65@append@3:
  000a9	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000ac	83 f8 10	 cmp	 eax, 16			; 00000010H
  000af	72 05		 jb	 SHORT $LN68@append@3
  000b1	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000b4	eb 03		 jmp	 SHORT $LN69@append@3
$LN68@append@3:
  000b6	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN69@append@3:
  000b9	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000bc	53		 push	 ebx
  000bd	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Roff$[esp+16]
  000c1	03 eb		 add	 ebp, ebx
  000c3	2b c1		 sub	 eax, ecx
  000c5	55		 push	 ebp
  000c6	50		 push	 eax
  000c7	03 ca		 add	 ecx, edx
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	83 c4 10	 add	 esp, 16			; 00000010H

; 964  : 			_Eos(_Num);

  000d2	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000d6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000d9	72 10		 jb	 SHORT $LN82@append@3
  000db	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000de	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000e2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000e3	8b c6		 mov	 eax, esi
  000e5	5e		 pop	 esi
  000e6	5d		 pop	 ebp
  000e7	5b		 pop	 ebx

; 967  : 		}

  000e8	c2 0c 00	 ret	 12			; 0000000cH

; 964  : 			_Eos(_Num);

$LN82@append@3:
  000eb	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000ee	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN87@append@3:
  000f2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000f3	8b c6		 mov	 eax, esi
  000f5	5e		 pop	 esi
  000f6	5d		 pop	 ebp
  000f7	5b		 pop	 ebx

; 967  : 		}

  000f8	c2 0c 00	 ret	 12			; 0000000cH
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 971  : 
; 972  :  #if _HAS_ITERATOR_DEBUGGING
; 973  : 		if (_Count != 0)
; 974  : 			_DEBUG_POINTER(_Ptr);
; 975  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 976  : 
; 977  : 		if (_Inside(_Ptr))

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	74 46		 je	 SHORT $LN4@append@4
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 10	 cmp	 edi, 16			; 00000010H
  00016	72 04		 jb	 SHORT $LN14@append@4
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN15@append@4
$LN14@append@4:
  0001c	8b c8		 mov	 ecx, eax
$LN15@append@4:
  0001e	3b d1		 cmp	 edx, ecx
  00020	72 31		 jb	 SHORT $LN4@append@4
  00022	83 ff 10	 cmp	 edi, 16			; 00000010H
  00025	72 04		 jb	 SHORT $LN18@append@4
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN19@append@4
$LN18@append@4:
  0002b	8b c8		 mov	 ecx, eax
$LN19@append@4:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	03 d9		 add	 ebx, ecx
  00032	3b da		 cmp	 ebx, edx
  00034	76 1d		 jbe	 SHORT $LN4@append@4

; 978  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

  00036	83 ff 10	 cmp	 edi, 16			; 00000010H
  00039	72 02		 jb	 SHORT $LN22@append@4
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN22@append@4:
  0003d	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00041	51		 push	 ecx
  00042	2b d0		 sub	 edx, eax
  00044	52		 push	 edx
  00045	56		 push	 esi
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx

; 989  : 		}

  00050	c2 08 00	 ret	 8
$LN4@append@4:

; 979  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	83 ca ff	 or	 edx, -1
  00059	55		 push	 ebp
  0005a	8b 6c 24 18	 mov	 ebp, DWORD PTR __Count$[esp+12]
  0005e	2b d0		 sub	 edx, eax
  00060	3b d5		 cmp	 edx, ebp
  00062	76 07		 jbe	 SHORT $LN2@append@4
  00064	8d 0c 28	 lea	 ecx, DWORD PTR [eax+ebp]
  00067	3b c8		 cmp	 ecx, eax
  00069	73 05		 jae	 SHORT $LN3@append@4
$LN2@append@4:

; 980  : 			_String_base::_Xlen();	// result too long

  0006b	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@4:

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00070	85 ed		 test	 ebp, ebp
  00072	0f 86 87 00 00
	00		 jbe	 $LN92@append@4
  00078	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0007b	03 fd		 add	 edi, ebp
  0007d	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00080	76 05		 jbe	 SHORT $LN29@append@4
  00082	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN29@append@4:
  00087	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0008a	3b c7		 cmp	 eax, edi
  0008c	73 1f		 jae	 SHORT $LN28@append@4
  0008e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00091	52		 push	 edx
  00092	57		 push	 edi
  00093	8b ce		 mov	 ecx, esi
  00095	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0009a	85 ff		 test	 edi, edi
$LN95@append@4:
  0009c	76 61		 jbe	 SHORT $LN92@append@4

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

  0009e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000a1	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000a4	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a7	72 2e		 jb	 SHORT $LN76@append@4
  000a9	8b 13		 mov	 edx, DWORD PTR [ebx]
  000ab	eb 2c		 jmp	 SHORT $LN77@append@4

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN28@append@4:
  000ad	85 ff		 test	 edi, edi
  000af	75 eb		 jne	 SHORT $LN95@append@4
  000b1	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000b4	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b7	72 0f		 jb	 SHORT $LN70@append@4
  000b9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000bc	5d		 pop	 ebp
  000bd	5f		 pop	 edi
  000be	c6 00 00	 mov	 BYTE PTR [eax], 0

; 987  : 			}
; 988  : 		return (*this);

  000c1	8b c6		 mov	 eax, esi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx

; 989  : 		}

  000c5	c2 08 00	 ret	 8

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN70@append@4:
  000c8	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000cb	5d		 pop	 ebp
  000cc	5f		 pop	 edi
  000cd	c6 00 00	 mov	 BYTE PTR [eax], 0

; 987  : 			}
; 988  : 		return (*this);

  000d0	8b c6		 mov	 eax, esi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx

; 989  : 		}

  000d4	c2 08 00	 ret	 8

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

$LN76@append@4:
  000d7	8b d3		 mov	 edx, ebx
$LN77@append@4:
  000d9	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000dc	55		 push	 ebp
  000dd	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  000e1	2b c1		 sub	 eax, ecx
  000e3	55		 push	 ebp
  000e4	50		 push	 eax
  000e5	03 ca		 add	 ecx, edx
  000e7	51		 push	 ecx
  000e8	e8 00 00 00 00	 call	 _memcpy_s
  000ed	83 c4 10	 add	 esp, 16			; 00000010H

; 986  : 			_Eos(_Num);

  000f0	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000f4	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000f7	72 02		 jb	 SHORT $LN90@append@4
  000f9	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN90@append@4:
  000fb	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
$LN92@append@4:
  000ff	5d		 pop	 ebp
  00100	5f		 pop	 edi

; 987  : 			}
; 988  : 		return (*this);

  00101	8b c6		 mov	 eax, esi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx

; 989  : 		}

  00105	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1064 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp

; 1065 : 
; 1066 :  #if _HAS_ITERATOR_DEBUGGING
; 1067 : 		if (_Count != 0)
; 1068 : 			_DEBUG_POINTER(_Ptr);
; 1069 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1070 : 
; 1071 : 		if (_Inside(_Ptr))

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 ed		 test	 ebp, ebp
  0000b	74 46		 je	 SHORT $LN93@assign@3
  0000d	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 fa 10	 cmp	 edx, 16			; 00000010H
  00016	72 04		 jb	 SHORT $LN12@assign@3
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN13@assign@3
$LN12@assign@3:
  0001c	8b c8		 mov	 ecx, eax
$LN13@assign@3:
  0001e	3b e9		 cmp	 ebp, ecx
  00020	72 31		 jb	 SHORT $LN93@assign@3
  00022	83 fa 10	 cmp	 edx, 16			; 00000010H
  00025	72 04		 jb	 SHORT $LN16@assign@3
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN17@assign@3
$LN16@assign@3:
  0002b	8b c8		 mov	 ecx, eax
$LN17@assign@3:
  0002d	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00030	03 f9		 add	 edi, ecx
  00032	3b fd		 cmp	 edi, ebp
  00034	76 1d		 jbe	 SHORT $LN93@assign@3

; 1072 : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00036	83 fa 10	 cmp	 edx, 16			; 00000010H
  00039	72 02		 jb	 SHORT $LN20@assign@3
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@assign@3:
  0003d	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00041	51		 push	 ecx
  00042	2b e8		 sub	 ebp, eax
  00044	55		 push	 ebp
  00045	56		 push	 esi
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp

; 1080 : 		}

  00050	c2 08 00	 ret	 8
$LN93@assign@3:

; 1073 : 
; 1074 : 		if (_Grow(_Count))

  00053	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  00057	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0005a	76 05		 jbe	 SHORT $LN27@assign@3
  0005c	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN27@assign@3:
  00061	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00064	3b c7		 cmp	 eax, edi
  00066	73 20		 jae	 SHORT $LN26@assign@3
  00068	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0006b	52		 push	 edx
  0006c	57		 push	 edi
  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00074	85 ff		 test	 edi, edi
$LN94@assign@3:
  00076	76 56		 jbe	 SHORT $LN90@assign@3

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

  00078	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0007b	53		 push	 ebx
  0007c	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  0007f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00082	72 2c		 jb	 SHORT $LN74@assign@3
  00084	8b 03		 mov	 eax, DWORD PTR [ebx]
  00086	eb 2a		 jmp	 SHORT $LN75@assign@3

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN26@assign@3:
  00088	85 ff		 test	 edi, edi
  0008a	75 ea		 jne	 SHORT $LN94@assign@3
  0008c	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0008f	83 f8 10	 cmp	 eax, 16			; 00000010H
  00092	72 0e		 jb	 SHORT $LN68@assign@3
  00094	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00097	5f		 pop	 edi
  00098	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  0009b	8b c6		 mov	 eax, esi
  0009d	5e		 pop	 esi
  0009e	5d		 pop	 ebp

; 1080 : 		}

  0009f	c2 08 00	 ret	 8

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN68@assign@3:
  000a2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000a5	5f		 pop	 edi
  000a6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  000a9	8b c6		 mov	 eax, esi
  000ab	5e		 pop	 esi
  000ac	5d		 pop	 ebp

; 1080 : 		}

  000ad	c2 08 00	 ret	 8

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

$LN74@assign@3:
  000b0	8b c3		 mov	 eax, ebx
$LN75@assign@3:
  000b2	57		 push	 edi
  000b3	55		 push	 ebp
  000b4	51		 push	 ecx
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _memcpy_s
  000bb	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 			_Eos(_Count);

  000be	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c2	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c5	72 02		 jb	 SHORT $LN88@assign@3
  000c7	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN88@assign@3:
  000c9	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
  000cd	5b		 pop	 ebx
$LN90@assign@3:
  000ce	5f		 pop	 edi

; 1078 : 			}
; 1079 : 		return (*this);

  000cf	8b c6		 mov	 eax, esi
  000d1	5e		 pop	 esi
  000d2	5d		 pop	 ebp

; 1080 : 		}

  000d3	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z
_TEXT	SEGMENT
__Num$ = 8						; size = 4
__Off$ = 8						; size = 4
__Right$ = 12						; size = 4
tv140 = 16						; size = 4
__Roff$ = 16						; size = 4
__Count$ = 20						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1136 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off

  00000	53		 push	 ebx

; 1137 : 		if (_Mysize < _Off || _Right.size() < _Roff)

  00001	8b 5c 24 10	 mov	 ebx, DWORD PTR __Roff$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 10	 mov	 ebp, DWORD PTR __Right$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7c 24 14	 mov	 edi, DWORD PTR __Off$[esp+12]
  00010	8b f1		 mov	 esi, ecx
  00012	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  00015	72 05		 jb	 SHORT $LN6@insert@2
  00017	39 5d 14	 cmp	 DWORD PTR [ebp+20], ebx
  0001a	73 05		 jae	 SHORT $LN7@insert@2
$LN6@insert@2:

; 1138 : 			_String_base::_Xran();	// _Off or _Roff off end

  0001c	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN7@insert@2:

; 1139 : 		size_type _Num = _Right.size() - _Roff;

  00021	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  00024	2b c3		 sub	 eax, ebx

; 1140 : 		if (_Num < _Count)

  00026	8b 5c 24 20	 mov	 ebx, DWORD PTR __Count$[esp+12]
  0002a	3b c3		 cmp	 eax, ebx
  0002c	73 02		 jae	 SHORT $LN5@insert@2

; 1141 : 			_Count = _Num;	// trim _Count to size

  0002e	8b d8		 mov	 ebx, eax
$LN5@insert@2:

; 1142 : 		if (npos - _Mysize <= _Count)

  00030	83 c8 ff	 or	 eax, -1
  00033	2b 46 14	 sub	 eax, DWORD PTR [esi+20]
  00036	3b c3		 cmp	 eax, ebx
  00038	77 05		 ja	 SHORT $LN4@insert@2

; 1143 : 			_String_base::_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN4@insert@2:

; 1144 : 
; 1145 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  0003f	85 db		 test	 ebx, ebx
  00041	0f 86 1e 01 00
	00		 jbe	 $LN123@insert@2
  00047	8b 6e 14	 mov	 ebp, DWORD PTR [esi+20]
  0004a	03 eb		 add	 ebp, ebx
  0004c	89 6c 24 14	 mov	 DWORD PTR __Num$[esp+12], ebp
  00050	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  00053	76 05		 jbe	 SHORT $LN21@insert@2
  00055	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN21@insert@2:
  0005a	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005d	3b c5		 cmp	 eax, ebp
  0005f	73 23		 jae	 SHORT $LN20@insert@2
  00061	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00064	51		 push	 ecx
  00065	55		 push	 ebp
  00066	8b ce		 mov	 ecx, esi
  00068	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0006d	85 ed		 test	 ebp, ebp
$LN124@insert@2:
  0006f	0f 86 f0 00 00
	00		 jbe	 $LN123@insert@2

; 1146 : 			{	// make room and insert new stuff
; 1147 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off + _Count, _Myres - _Off - _Count,
; 1148 : 				_Myptr() + _Off, _Mysize - _Off);	// empty out hole

  00075	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00078	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0007b	83 f8 10	 cmp	 eax, 16			; 00000010H
  0007e	72 2e		 jb	 SHORT $LN68@insert@2
  00080	8b 11		 mov	 edx, DWORD PTR [ecx]
  00082	eb 2c		 jmp	 SHORT $LN69@insert@2

; 1144 : 
; 1145 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN20@insert@2:
  00084	85 ed		 test	 ebp, ebp
  00086	75 e7		 jne	 SHORT $LN124@insert@2
  00088	89 6e 14	 mov	 DWORD PTR [esi+20], ebp
  0008b	83 f8 10	 cmp	 eax, 16			; 00000010H
  0008e	72 0f		 jb	 SHORT $LN62@insert@2
  00090	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00093	5f		 pop	 edi
  00094	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1157 : 			}
; 1158 : 		return (*this);

  00097	8b c6		 mov	 eax, esi
  00099	5e		 pop	 esi
  0009a	5d		 pop	 ebp
  0009b	5b		 pop	 ebx

; 1159 : 		}

  0009c	c2 10 00	 ret	 16			; 00000010H

; 1144 : 
; 1145 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN62@insert@2:
  0009f	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000a2	5f		 pop	 edi
  000a3	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1157 : 			}
; 1158 : 		return (*this);

  000a6	8b c6		 mov	 eax, esi
  000a8	5e		 pop	 esi
  000a9	5d		 pop	 ebp
  000aa	5b		 pop	 ebx

; 1159 : 		}

  000ab	c2 10 00	 ret	 16			; 00000010H

; 1146 : 			{	// make room and insert new stuff
; 1147 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off + _Count, _Myres - _Off - _Count,
; 1148 : 				_Myptr() + _Off, _Mysize - _Off);	// empty out hole

$LN68@insert@2:
  000ae	8b d1		 mov	 edx, ecx
$LN69@insert@2:
  000b0	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b3	72 02		 jb	 SHORT $LN72@insert@2
  000b5	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN72@insert@2:
  000b7	8b 6e 14	 mov	 ebp, DWORD PTR [esi+20]
  000ba	2b ef		 sub	 ebp, edi
  000bc	55		 push	 ebp
  000bd	03 d7		 add	 edx, edi
  000bf	2b c7		 sub	 eax, edi
  000c1	52		 push	 edx
  000c2	2b c3		 sub	 eax, ebx
  000c4	03 cf		 add	 ecx, edi
  000c6	50		 push	 eax
  000c7	03 cb		 add	 ecx, ebx
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 _memmove_s

; 1149 : 			if (this == &_Right)

  000cf	8b 44 24 28	 mov	 eax, DWORD PTR __Right$[esp+28]
  000d3	83 c4 10	 add	 esp, 16			; 00000010H
  000d6	3b f0		 cmp	 esi, eax
  000d8	75 41		 jne	 SHORT $LN2@insert@2

; 1150 : 				_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off,
; 1151 : 					_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1152 : 						_Count);	// substring

  000da	8b 44 24 1c	 mov	 eax, DWORD PTR __Roff$[esp+12]
  000de	3b f8		 cmp	 edi, eax
  000e0	73 02		 jae	 SHORT $LN10@insert@2
  000e2	03 c3		 add	 eax, ebx
$LN10@insert@2:
  000e4	89 44 24 1c	 mov	 DWORD PTR tv140[esp+12], eax
  000e8	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000eb	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  000ee	83 f8 10	 cmp	 eax, 16			; 00000010H
  000f1	72 05		 jb	 SHORT $LN84@insert@2
  000f3	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  000f6	eb 02		 jmp	 SHORT $LN85@insert@2
$LN84@insert@2:
  000f8	8b d5		 mov	 edx, ebp
$LN85@insert@2:
  000fa	83 f8 10	 cmp	 eax, 16			; 00000010H
  000fd	72 05		 jb	 SHORT $LN88@insert@2
  000ff	8b 4d 00	 mov	 ecx, DWORD PTR [ebp]
  00102	eb 02		 jmp	 SHORT $LN89@insert@2
$LN88@insert@2:
  00104	8b cd		 mov	 ecx, ebp
$LN89@insert@2:
  00106	53		 push	 ebx
  00107	8b 5c 24 20	 mov	 ebx, DWORD PTR tv140[esp+16]
  0010b	03 d3		 add	 edx, ebx
  0010d	52		 push	 edx
  0010e	2b c7		 sub	 eax, edi
  00110	50		 push	 eax
  00111	03 cf		 add	 ecx, edi
  00113	51		 push	 ecx
  00114	e8 00 00 00 00	 call	 _memmove_s

; 1153 : 			else

  00119	eb 33		 jmp	 SHORT $LN125@insert@2
$LN2@insert@2:

; 1154 : 				_Traits_helper::copy_s<_Traits>(_Myptr() + _Off, _Myres - _Off,
; 1155 : 					_Right._Myptr() + _Roff, _Count);	// fill hole

  0011b	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  0011f	72 05		 jb	 SHORT $LN100@insert@2
  00121	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00124	eb 03		 jmp	 SHORT $LN101@insert@2
$LN100@insert@2:
  00126	8d 50 04	 lea	 edx, DWORD PTR [eax+4]
$LN101@insert@2:
  00129	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0012c	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0012f	83 f8 10	 cmp	 eax, 16			; 00000010H
  00132	72 05		 jb	 SHORT $LN104@insert@2
  00134	8b 4d 00	 mov	 ecx, DWORD PTR [ebp]
  00137	eb 02		 jmp	 SHORT $LN105@insert@2
$LN104@insert@2:
  00139	8b cd		 mov	 ecx, ebp
$LN105@insert@2:
  0013b	53		 push	 ebx
  0013c	8b 5c 24 20	 mov	 ebx, DWORD PTR __Roff$[esp+16]
  00140	03 d3		 add	 edx, ebx
  00142	52		 push	 edx
  00143	2b c7		 sub	 eax, edi
  00145	50		 push	 eax
  00146	03 cf		 add	 ecx, edi
  00148	51		 push	 ecx
  00149	e8 00 00 00 00	 call	 _memcpy_s
$LN125@insert@2:

; 1156 : 			_Eos(_Num);

  0014e	8b 44 24 24	 mov	 eax, DWORD PTR __Num$[esp+28]
  00152	83 c4 10	 add	 esp, 16			; 00000010H
  00155	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00159	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0015c	72 03		 jb	 SHORT $LN118@insert@2
  0015e	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN118@insert@2:
  00161	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$LN123@insert@2:
  00165	5f		 pop	 edi

; 1157 : 			}
; 1158 : 		return (*this);

  00166	8b c6		 mov	 eax, esi
  00168	5e		 pop	 esi
  00169	5d		 pop	 ebp
  0016a	5b		 pop	 ebx

; 1159 : 		}

  0016b	c2 10 00	 ret	 16			; 00000010H
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1064 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 1065 : 
; 1066 :  #if _HAS_ITERATOR_DEBUGGING
; 1067 : 		if (_Count != 0)
; 1068 : 			_DEBUG_POINTER(_Ptr);
; 1069 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1070 : 
; 1071 : 		if (_Inside(_Ptr))

  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00008	57		 push	 edi
  00009	85 c9		 test	 ecx, ecx
  0000b	74 49		 je	 SHORT $LN97@assign@4
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 08	 cmp	 edi, 8
  00016	72 04		 jb	 SHORT $LN12@assign@4
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN13@assign@4
$LN12@assign@4:
  0001c	8b d0		 mov	 edx, eax
$LN13@assign@4:
  0001e	3b ca		 cmp	 ecx, edx
  00020	72 34		 jb	 SHORT $LN97@assign@4
  00022	83 ff 08	 cmp	 edi, 8
  00025	72 04		 jb	 SHORT $LN16@assign@4
  00027	8b 10		 mov	 edx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN17@assign@4
$LN16@assign@4:
  0002b	8b d0		 mov	 edx, eax
$LN17@assign@4:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	8d 14 5a	 lea	 edx, DWORD PTR [edx+ebx*2]
  00033	3b d1		 cmp	 edx, ecx
  00035	76 1f		 jbe	 SHORT $LN97@assign@4

; 1072 : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00037	83 ff 08	 cmp	 edi, 8
  0003a	72 02		 jb	 SHORT $LN20@assign@4
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@assign@4:
  0003e	8b 54 24 14	 mov	 edx, DWORD PTR __Count$[esp+8]
  00042	2b c8		 sub	 ecx, eax
  00044	52		 push	 edx
  00045	d1 f9		 sar	 ecx, 1
  00047	51		 push	 ecx
  00048	56		 push	 esi
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx

; 1080 : 		}

  00053	c2 08 00	 ret	 8
$LN97@assign@4:

; 1073 : 
; 1074 : 		if (_Grow(_Count))

  00056	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0005a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00060	76 05		 jbe	 SHORT $LN27@assign@4
  00062	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN27@assign@4:
  00067	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0006a	3b c7		 cmp	 eax, edi
  0006c	73 21		 jae	 SHORT $LN26@assign@4
  0006e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00071	50		 push	 eax
  00072	57		 push	 edi
  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0007a	85 ff		 test	 edi, edi
$LN98@assign@4:
  0007c	76 67		 jbe	 SHORT $LN94@assign@4

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

  0007e	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00081	55		 push	 ebp
  00082	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  00085	83 f9 08	 cmp	 ecx, 8
  00088	72 31		 jb	 SHORT $LN76@assign@4
  0008a	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  0008d	eb 2e		 jmp	 SHORT $LN77@assign@4

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN26@assign@4:
  0008f	85 ff		 test	 edi, edi
  00091	75 e9		 jne	 SHORT $LN98@assign@4
  00093	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00096	83 f8 08	 cmp	 eax, 8
  00099	72 10		 jb	 SHORT $LN70@assign@4
  0009b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009e	33 c9		 xor	 ecx, ecx
  000a0	5f		 pop	 edi
  000a1	66 89 08	 mov	 WORD PTR [eax], cx

; 1078 : 			}
; 1079 : 		return (*this);

  000a4	8b c6		 mov	 eax, esi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx

; 1080 : 		}

  000a8	c2 08 00	 ret	 8

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN70@assign@4:
  000ab	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000ae	33 c9		 xor	 ecx, ecx
  000b0	5f		 pop	 edi
  000b1	66 89 08	 mov	 WORD PTR [eax], cx

; 1078 : 			}
; 1079 : 		return (*this);

  000b4	8b c6		 mov	 eax, esi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx

; 1080 : 		}

  000b8	c2 08 00	 ret	 8

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

$LN76@assign@4:
  000bb	8b c5		 mov	 eax, ebp
$LN77@assign@4:
  000bd	8b 54 24 14	 mov	 edx, DWORD PTR __Ptr$[esp+12]
  000c1	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  000c4	53		 push	 ebx
  000c5	52		 push	 edx
  000c6	03 c9		 add	 ecx, ecx
  000c8	51		 push	 ecx
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 			_Eos(_Count);

  000d2	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000d6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000d9	72 03		 jb	 SHORT $LN92@assign@4
  000db	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN92@assign@4:
  000de	33 d2		 xor	 edx, edx
  000e0	66 89 14 2b	 mov	 WORD PTR [ebx+ebp], dx
  000e4	5d		 pop	 ebp
$LN94@assign@4:
  000e5	5f		 pop	 edi

; 1078 : 			}
; 1079 : 		return (*this);

  000e6	8b c6		 mov	 eax, esi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx

; 1080 : 		}

  000ea	c2 08 00	 ret	 8
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	??0?$_Tree_ptr@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z ; std::_Tree_ptr<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tree_ptr<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??0?$_Tree_ptr@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_ptr@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z PROC ; std::_Tree_ptr<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tree_ptr<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >, COMDAT
; _this$ = ecx

; 78   : 		{	// construct base, and allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN18@Tree_ptr
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 79   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 08 00	 ret	 8

; 78   : 		{	// construct base, and allocator from _Al

$LN18@Tree_ptr:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 79   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 08 00	 ret	 8
??0?$_Tree_ptr@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z ENDP ; std::_Tree_ptr<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tree_ptr<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
_TEXT	ENDS
PUBLIC	??1_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node::~_Node
; Function compile flags: /Ogtpy
;	COMDAT ??1_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node::~_Node, COMDAT
; _this$ = ecx
  00000	83 c1 18	 add	 ecx, 24			; 00000018H
  00003	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
??1_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node::~_Node
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 970  : 		{	// append [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 971  : 
; 972  :  #if _HAS_ITERATOR_DEBUGGING
; 973  : 		if (_Count != 0)
; 974  : 			_DEBUG_POINTER(_Ptr);
; 975  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 976  : 
; 977  : 		if (_Inside(_Ptr))

  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00008	57		 push	 edi
  00009	85 c9		 test	 ecx, ecx
  0000b	74 49		 je	 SHORT $LN4@append@5
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 08	 cmp	 edi, 8
  00016	72 04		 jb	 SHORT $LN14@append@5
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN15@append@5
$LN14@append@5:
  0001c	8b d0		 mov	 edx, eax
$LN15@append@5:
  0001e	3b ca		 cmp	 ecx, edx
  00020	72 34		 jb	 SHORT $LN4@append@5
  00022	83 ff 08	 cmp	 edi, 8
  00025	72 04		 jb	 SHORT $LN18@append@5
  00027	8b 10		 mov	 edx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN19@append@5
$LN18@append@5:
  0002b	8b d0		 mov	 edx, eax
$LN19@append@5:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	8d 14 5a	 lea	 edx, DWORD PTR [edx+ebx*2]
  00033	3b d1		 cmp	 edx, ecx
  00035	76 1f		 jbe	 SHORT $LN4@append@5

; 978  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

  00037	83 ff 08	 cmp	 edi, 8
  0003a	72 02		 jb	 SHORT $LN22@append@5
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN22@append@5:
  0003e	8b 54 24 14	 mov	 edx, DWORD PTR __Count$[esp+8]
  00042	2b c8		 sub	 ecx, eax
  00044	52		 push	 edx
  00045	d1 f9		 sar	 ecx, 1
  00047	51		 push	 ecx
  00048	56		 push	 esi
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx

; 989  : 		}

  00053	c2 08 00	 ret	 8
$LN4@append@5:

; 979  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00056	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00059	83 c9 ff	 or	 ecx, -1
  0005c	55		 push	 ebp
  0005d	8b 6c 24 18	 mov	 ebp, DWORD PTR __Count$[esp+12]
  00061	2b c8		 sub	 ecx, eax
  00063	3b cd		 cmp	 ecx, ebp
  00065	76 07		 jbe	 SHORT $LN2@append@5
  00067	8d 14 28	 lea	 edx, DWORD PTR [eax+ebp]
  0006a	3b d0		 cmp	 edx, eax
  0006c	73 05		 jae	 SHORT $LN3@append@5
$LN2@append@5:

; 980  : 			_String_base::_Xlen();	// result too long

  0006e	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@5:

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00073	85 ed		 test	 ebp, ebp
  00075	0f 86 95 00 00
	00		 jbe	 $LN96@append@5
  0007b	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0007e	03 fd		 add	 edi, ebp
  00080	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00086	76 05		 jbe	 SHORT $LN29@append@5
  00088	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN29@append@5:
  0008d	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00090	3b c7		 cmp	 eax, edi
  00092	73 1f		 jae	 SHORT $LN28@append@5
  00094	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00097	50		 push	 eax
  00098	57		 push	 edi
  00099	8b ce		 mov	 ecx, esi
  0009b	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  000a0	85 ff		 test	 edi, edi
$LN99@append@5:
  000a2	76 6c		 jbe	 SHORT $LN96@append@5

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

  000a4	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000a7	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000aa	83 f8 08	 cmp	 eax, 8
  000ad	72 32		 jb	 SHORT $LN78@append@5
  000af	8b 13		 mov	 edx, DWORD PTR [ebx]
  000b1	eb 30		 jmp	 SHORT $LN79@append@5

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN28@append@5:
  000b3	85 ff		 test	 edi, edi
  000b5	75 eb		 jne	 SHORT $LN99@append@5
  000b7	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000ba	83 f8 08	 cmp	 eax, 8
  000bd	72 11		 jb	 SHORT $LN72@append@5
  000bf	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c2	5d		 pop	 ebp
  000c3	33 c9		 xor	 ecx, ecx
  000c5	5f		 pop	 edi
  000c6	66 89 08	 mov	 WORD PTR [eax], cx

; 987  : 			}
; 988  : 		return (*this);

  000c9	8b c6		 mov	 eax, esi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx

; 989  : 		}

  000cd	c2 08 00	 ret	 8

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN72@append@5:
  000d0	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000d3	5d		 pop	 ebp
  000d4	33 c9		 xor	 ecx, ecx
  000d6	5f		 pop	 edi
  000d7	66 89 08	 mov	 WORD PTR [eax], cx

; 987  : 			}
; 988  : 		return (*this);

  000da	8b c6		 mov	 eax, esi
  000dc	5e		 pop	 esi
  000dd	5b		 pop	 ebx

; 989  : 		}

  000de	c2 08 00	 ret	 8

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

$LN78@append@5:
  000e1	8b d3		 mov	 edx, ebx
$LN79@append@5:
  000e3	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000e6	03 ed		 add	 ebp, ebp
  000e8	55		 push	 ebp
  000e9	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  000ed	2b c1		 sub	 eax, ecx
  000ef	55		 push	 ebp
  000f0	03 c0		 add	 eax, eax
  000f2	50		 push	 eax
  000f3	8d 14 4a	 lea	 edx, DWORD PTR [edx+ecx*2]
  000f6	52		 push	 edx
  000f7	e8 00 00 00 00	 call	 _memcpy_s
  000fc	83 c4 10	 add	 esp, 16			; 00000010H

; 986  : 			_Eos(_Num);

  000ff	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00103	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00106	72 02		 jb	 SHORT $LN94@append@5
  00108	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN94@append@5:
  0010a	33 c0		 xor	 eax, eax
  0010c	66 89 04 7b	 mov	 WORD PTR [ebx+edi*2], ax
$LN96@append@5:
  00110	5d		 pop	 ebp
  00111	5f		 pop	 edi

; 987  : 			}
; 988  : 		return (*this);

  00112	8b c6		 mov	 eax, esi
  00114	5e		 pop	 esi
  00115	5b		 pop	 ebx

; 989  : 		}

  00116	c2 08 00	 ret	 8
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	??_GHostDevice@@QAEPAXI@Z			; HostDevice::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_GHostDevice@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GHostDevice@@QAEPAXI@Z PROC				; HostDevice::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@27
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@27:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GHostDevice@@QAEPAXI@Z ENDP				; HostDevice::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?erase@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?erase@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z
_TEXT	SEGMENT
$T167703 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?erase@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::erase, COMDAT
; _this$ = ecx

; 786  : 		{	// erase element at _Where

  00000	83 ec 08	 sub	 esp, 8

; 787  : 
; 788  :  #if _HAS_ITERATOR_DEBUGGING
; 789  : 		if (_Where._Mycont != this || _Where._Ptr == _Myhead)
; 790  : 			_DEBUG_ERROR("list erase iterator outside range");
; 791  : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 792  : 		_Orphan_ptr(*this, _Pnode);
; 793  : 
; 794  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 795  : 		_Nodeptr _Pnode = (_Where++)._Mynode();

  00003	8b 44 24 10	 mov	 eax, DWORD PTR __Where$[esp+4]
  00007	56		 push	 esi
  00008	8b 74 24 18	 mov	 esi, DWORD PTR __Where$[esp+12]
  0000c	57		 push	 edi
  0000d	8b f9		 mov	 edi, ecx
  0000f	89 44 24 08	 mov	 DWORD PTR $T167703[esp+16], eax
  00013	85 c0		 test	 eax, eax
  00015	75 0d		 jne	 SHORT $LN63@erase@3
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0001c	8b 44 24 18	 mov	 eax, DWORD PTR __Where$[esp+12]
  00020	85 c0		 test	 eax, eax
  00022	74 04		 je	 SHORT $LN22@erase@3
$LN63@erase@3:
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	eb 02		 jmp	 SHORT $LN23@erase@3
$LN22@erase@3:
  00028	33 c0		 xor	 eax, eax
$LN23@erase@3:
  0002a	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Where$[esp+16]
  0002e	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00031	75 05		 jne	 SHORT $LN8@erase@3
  00033	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN8@erase@3:
  00038	8b 54 24 1c	 mov	 edx, DWORD PTR __Where$[esp+16]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	89 44 24 1c	 mov	 DWORD PTR __Where$[esp+16], eax

; 796  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 797  : 
; 798  : 		if (_Pnode != _Myhead)

  00042	3b 77 14	 cmp	 esi, DWORD PTR [edi+20]
  00045	74 1b		 je	 SHORT $LN1@erase@3

; 799  : 			{	// not list head, safe to erase
; 800  : 			_Nextnode(_Prevnode(_Pnode)) = _Nextnode(_Pnode);

  00047	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0004a	8b 16		 mov	 edx, DWORD PTR [esi]
  0004c	89 11		 mov	 DWORD PTR [ecx], edx

; 801  : 			_Prevnode(_Nextnode(_Pnode)) = _Prevnode(_Pnode);

  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 802  : 			this->_Alnod.destroy(_Pnode);
; 803  : 			this->_Alnod.deallocate(_Pnode, 1);

  00053	56		 push	 esi
  00054	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00057	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005c	83 c4 04	 add	 esp, 4

; 804  : 			--_Mysize;

  0005f	ff 4f 18	 dec	 DWORD PTR [edi+24]
$LN1@erase@3:

; 805  : 			}
; 806  : 		return (_Make_iter(_Where));

  00062	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00064	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  00068	8b 54 24 1c	 mov	 edx, DWORD PTR __Where$[esp+16]
  0006c	5f		 pop	 edi
  0006d	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00070	89 08		 mov	 DWORD PTR [eax], ecx
  00072	5e		 pop	 esi

; 807  : 		}

  00073	83 c4 08	 add	 esp, 8
  00076	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::erase
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 721  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 722  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 723  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 724  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 941  : 		return (append((size_type)1, _Ch));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	50		 push	 eax
  00005	6a 01		 push	 1
  00007	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 942  : 		}

  0000c	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 721  : 		{	// construct by copying _Right

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 722  : 		_Tidy();
; 723  : 		assign(_Right, 0, npos);

  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR __Right$[esp]
  00007	33 c0		 xor	 eax, eax
  00009	6a ff		 push	 -1
  0000b	50		 push	 eax
  0000c	51		 push	 ecx
  0000d	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	8b ce		 mov	 ecx, esi
  0001d	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 724  : 		}

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ	; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 436  : 		{	// construct empty list

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	6a 04		 push	 4
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	83 c4 04	 add	 esp, 4
  00032	85 c0		 test	 eax, eax
  00034	74 04		 je	 SHORT $LN23@list
  00036	89 30		 mov	 DWORD PTR [eax], esi
  00038	eb 02		 jmp	 SHORT $LN24@list
$LN23@list:
  0003a	33 c0		 xor	 eax, eax
$LN24@list:
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	8b ce		 mov	 ecx, esi
  00040	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00048	e8 00 00 00 00	 call	 ?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode
  0004d	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00050	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 437  : 		}

  00057	8b c6		 mov	 eax, esi
  00059	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5e		 pop	 esi
  00066	83 c4 10	 add	 esp, 16			; 00000010H
  00069	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_val@KV?$allocator@K@std@@@std@@QAE@XZ
__ehhandler$??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >
PUBLIC	??1?$list@KV?$allocator@K@std@@@std@@QAE@XZ	; std::list<unsigned long,std::allocator<unsigned long> >::~list<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$list@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::list<unsigned long,std::allocator<unsigned long> >::~list<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 520  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 521  : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?_Tidy@?$list@KV?$allocator@K@std@@@std@@IAEXXZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Tidy

; 522  : 		}

  00008	8b 06		 mov	 eax, DWORD PTR [esi]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
  00013	5e		 pop	 esi
  00014	c3		 ret	 0
??1?$list@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::list<unsigned long,std::allocator<unsigned long> >::~list<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABH@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::find
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABH@Z
_TEXT	SEGMENT
__Where$ = -16						; size = 8
$T168333 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::find, COMDAT
; _this$ = ecx

; 977  : 		{	// find an element in mutable sequence that matches _Keyval

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	53		 push	 ebx

; 978  : 		iterator _Where = lower_bound(_Keyval);

  00004	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Keyval$[esp+16]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	53		 push	 ebx
  0000b	8d 44 24 10	 lea	 eax, DWORD PTR __Where$[esp+32]
  0000f	50		 push	 eax
  00010	8b f1		 mov	 esi, ecx
  00012	e8 00 00 00 00	 call	 ?lower_bound@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABH@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::lower_bound

; 979  : 		return (_Where == end()
; 980  : 			|| _DEBUG_LT_PRED(this->comp,
; 981  : 				_Keyval, _Key(_Where._Mynode()))
; 982  : 					? end() : _Where);

  00017	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Where$[esp+28]
  0001b	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	85 c9		 test	 ecx, ecx
  00022	74 04		 je	 SHORT $LN26@find@3
  00024	3b c8		 cmp	 ecx, eax
  00026	74 05		 je	 SHORT $LN25@find@3
$LN26@find@3:
  00028	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN25@find@3:
  0002d	8b 44 24 10	 mov	 eax, DWORD PTR __Where$[esp+32]
  00031	3b c7		 cmp	 eax, edi
  00033	74 0d		 je	 SHORT $LN3@find@3
  00035	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00037	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0003a	7c 06		 jl	 SHORT $LN3@find@3
  0003c	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Where$[esp+28]
  00040	eb 11		 jmp	 SHORT $LN4@find@3
$LN3@find@3:
  00042	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00045	8b 06		 mov	 eax, DWORD PTR [esi]
  00047	89 54 24 18	 mov	 DWORD PTR $T168333[esp+32], edx
  0004b	89 44 24 14	 mov	 DWORD PTR $T168333[esp+28], eax
  0004f	8d 4c 24 14	 lea	 ecx, DWORD PTR $T168333[esp+28]
$LN4@find@3:
  00053	8b 11		 mov	 edx, DWORD PTR [ecx]
  00055	8b 44 24 20	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+24]
  00059	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	89 10		 mov	 DWORD PTR [eax], edx
  00060	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00063	5b		 pop	 ebx

; 983  : 		}

  00064	83 c4 10	 add	 esp, 16			; 00000010H
  00067	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::find
_TEXT	ENDS
PUBLIC	??1?$_Tree_val@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::~_Tree_val<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Tree_val@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_val@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::~_Tree_val<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_Tree_val@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::~_Tree_val<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
__Al$ = 20						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 625  : #if _HAS_ITERATOR_DEBUGGING
; 626  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 627  : 			{
; 628  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 629  : 			}
; 630  : #endif
; 631  : 		_Tidy();
; 632  : 		assign(_Right, _Roff, _Count);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Right$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Roff$[esp]
  0000b	33 c0		 xor	 eax, eax
  0000d	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00010	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00017	88 46 04	 mov	 BYTE PTR [esi+4], al
  0001a	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 633  : 		}

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	c2 10 00	 ret	 16			; 00000010H
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 946  : 		return (append(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 947  : 		}

  0000e	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 992  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 993  : 		_DEBUG_POINTER(_Ptr);
; 994  : 		return (append(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@append@6:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@append@6
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 995  : 		}

  00022	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1041 : 		return (assign(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1042 : 		}

  0000e	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1083 : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 1084 : 		_DEBUG_POINTER(_Ptr);
; 1085 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@assign@5:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@assign@5
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 1086 : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z
_TEXT	SEGMENT
tv232 = 8						; size = 4
__Off$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1164 : 
; 1165 :  #if _HAS_ITERATOR_DEBUGGING
; 1166 : 		if (_Count != 0)
; 1167 : 			_DEBUG_POINTER(_Ptr);
; 1168 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1169 : 
; 1170 : 		if (_Inside(_Ptr))

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	74 4b		 je	 SHORT $LN4@insert@3
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 10	 cmp	 edi, 16			; 00000010H
  00016	72 04		 jb	 SHORT $LN14@insert@3
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN15@insert@3
$LN14@insert@3:
  0001c	8b c8		 mov	 ecx, eax
$LN15@insert@3:
  0001e	3b d1		 cmp	 edx, ecx
  00020	72 36		 jb	 SHORT $LN4@insert@3
  00022	83 ff 10	 cmp	 edi, 16			; 00000010H
  00025	72 04		 jb	 SHORT $LN18@insert@3
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN19@insert@3
$LN18@insert@3:
  0002b	8b c8		 mov	 ecx, eax
$LN19@insert@3:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	03 d9		 add	 ebx, ecx
  00032	3b da		 cmp	 ebx, edx
  00034	76 22		 jbe	 SHORT $LN4@insert@3

; 1171 : 			return (insert(_Off, *this,
; 1172 : 				_Ptr - _Myptr(), _Count));	// substring

  00036	83 ff 10	 cmp	 edi, 16			; 00000010H
  00039	72 02		 jb	 SHORT $LN22@insert@3
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN22@insert@3:
  0003d	8b 4c 24 18	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00041	51		 push	 ecx
  00042	2b d0		 sub	 edx, eax
  00044	52		 push	 edx
  00045	8b 54 24 18	 mov	 edx, DWORD PTR __Off$[esp+16]
  00049	56		 push	 esi
  0004a	52		 push	 edx
  0004b	8b ce		 mov	 ecx, esi
  0004d	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx

; 1186 : 		}

  00055	c2 0c 00	 ret	 12			; 0000000cH
$LN4@insert@3:

; 1173 : 		if (_Mysize < _Off)

  00058	8b 7c 24 10	 mov	 edi, DWORD PTR __Off$[esp+8]
  0005c	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0005f	73 05		 jae	 SHORT $LN3@insert@3

; 1174 : 			_String_base::_Xran();	// _Off off end

  00061	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@insert@3:

; 1175 : 		if (npos - _Mysize <= _Count)

  00066	8b 5c 24 18	 mov	 ebx, DWORD PTR __Count$[esp+8]
  0006a	83 c8 ff	 or	 eax, -1
  0006d	2b 46 14	 sub	 eax, DWORD PTR [esi+20]
  00070	3b c3		 cmp	 eax, ebx
  00072	77 05		 ja	 SHORT $LN2@insert@3

; 1176 : 			_String_base::_Xlen();	// result too long

  00074	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN2@insert@3:

; 1177 : 		size_type _Num;
; 1178 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00079	85 db		 test	 ebx, ebx
  0007b	0f 86 de 00 00
	00		 jbe	 $LN108@insert@3
  00081	55		 push	 ebp
  00082	8b 6e 14	 mov	 ebp, DWORD PTR [esi+20]
  00085	03 eb		 add	 ebp, ebx
  00087	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  0008a	76 05		 jbe	 SHORT $LN29@insert@3
  0008c	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN29@insert@3:
  00091	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00094	3b c5		 cmp	 eax, ebp
  00096	73 25		 jae	 SHORT $LN28@insert@3
  00098	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0009b	51		 push	 ecx
  0009c	55		 push	 ebp
  0009d	8b ce		 mov	 ecx, esi
  0009f	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  000a4	85 ed		 test	 ebp, ebp
$LN112@insert@3:
  000a6	0f 86 b2 00 00
	00		 jbe	 $LN111@insert@3

; 1179 : 			{	// make room and insert new stuff
; 1180 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off + _Count, _Myres - _Off - _Count,
; 1181 : 				_Myptr() + _Off, _Mysize - _Off);	// empty out hole

  000ac	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000af	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b2	72 33		 jb	 SHORT $LN76@insert@3
  000b4	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000b7	89 54 24 14	 mov	 DWORD PTR tv232[esp+12], edx
  000bb	eb 31		 jmp	 SHORT $LN77@insert@3

; 1177 : 		size_type _Num;
; 1178 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN28@insert@3:
  000bd	85 ed		 test	 ebp, ebp
  000bf	75 e5		 jne	 SHORT $LN112@insert@3
  000c1	89 6e 14	 mov	 DWORD PTR [esi+20], ebp
  000c4	83 f8 10	 cmp	 eax, 16			; 00000010H
  000c7	72 0f		 jb	 SHORT $LN70@insert@3
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	5d		 pop	 ebp
  000cd	5f		 pop	 edi
  000ce	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1184 : 			}
; 1185 : 		return (*this);

  000d1	8b c6		 mov	 eax, esi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx

; 1186 : 		}

  000d5	c2 0c 00	 ret	 12			; 0000000cH

; 1177 : 		size_type _Num;
; 1178 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN70@insert@3:
  000d8	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000db	5d		 pop	 ebp
  000dc	5f		 pop	 edi
  000dd	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1184 : 			}
; 1185 : 		return (*this);

  000e0	8b c6		 mov	 eax, esi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx

; 1186 : 		}

  000e4	c2 0c 00	 ret	 12			; 0000000cH

; 1179 : 			{	// make room and insert new stuff
; 1180 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off + _Count, _Myres - _Off - _Count,
; 1181 : 				_Myptr() + _Off, _Mysize - _Off);	// empty out hole

$LN76@insert@3:
  000e7	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  000ea	89 4c 24 14	 mov	 DWORD PTR tv232[esp+12], ecx
$LN77@insert@3:
  000ee	83 f8 10	 cmp	 eax, 16			; 00000010H
  000f1	72 05		 jb	 SHORT $LN80@insert@3
  000f3	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000f6	eb 03		 jmp	 SHORT $LN81@insert@3
$LN80@insert@3:
  000f8	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
$LN81@insert@3:
  000fb	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000fe	2b d7		 sub	 edx, edi
  00100	52		 push	 edx
  00101	8b 54 24 18	 mov	 edx, DWORD PTR tv232[esp+16]
  00105	03 d7		 add	 edx, edi
  00107	2b c7		 sub	 eax, edi
  00109	52		 push	 edx
  0010a	2b c3		 sub	 eax, ebx
  0010c	03 cf		 add	 ecx, edi
  0010e	50		 push	 eax
  0010f	03 cb		 add	 ecx, ebx
  00111	51		 push	 ecx
  00112	e8 00 00 00 00	 call	 _memmove_s

; 1182 : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Ptr, _Count);	// fill hole

  00117	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0011a	83 c4 10	 add	 esp, 16			; 00000010H
  0011d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00120	72 05		 jb	 SHORT $LN92@insert@3
  00122	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00125	eb 03		 jmp	 SHORT $LN93@insert@3
$LN92@insert@3:
  00127	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
$LN93@insert@3:
  0012a	8b 54 24 18	 mov	 edx, DWORD PTR __Ptr$[esp+12]
  0012e	53		 push	 ebx
  0012f	52		 push	 edx
  00130	2b c7		 sub	 eax, edi
  00132	50		 push	 eax
  00133	03 cf		 add	 ecx, edi
  00135	51		 push	 ecx
  00136	e8 00 00 00 00	 call	 _memcpy_s
  0013b	83 c4 10	 add	 esp, 16			; 00000010H

; 1183 : 			_Eos(_Num);

  0013e	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00142	89 6e 14	 mov	 DWORD PTR [esi+20], ebp
  00145	72 10		 jb	 SHORT $LN106@insert@3
  00147	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0014a	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  0014e	5d		 pop	 ebp
  0014f	5f		 pop	 edi

; 1184 : 			}
; 1185 : 		return (*this);

  00150	8b c6		 mov	 eax, esi
  00152	5e		 pop	 esi
  00153	5b		 pop	 ebx

; 1186 : 		}

  00154	c2 0c 00	 ret	 12			; 0000000cH

; 1183 : 			_Eos(_Num);

$LN106@insert@3:
  00157	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0015a	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$LN111@insert@3:
  0015e	5d		 pop	 ebp
$LN108@insert@3:
  0015f	5f		 pop	 edi

; 1184 : 			}
; 1185 : 		return (*this);

  00160	8b c6		 mov	 eax, esi
  00162	5e		 pop	 esi
  00163	5b		 pop	 ebx

; 1186 : 		}

  00164	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1041 : 		return (assign(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 1042 : 		}

  0000e	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1083 : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 1084 : 		_DEBUG_POINTER(_Ptr);
; 1085 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@assign@6:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL5@assign@6
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 1086 : 		}

  00028	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 637  : 		{	// construct from [_Ptr, _Ptr + _Count)

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 638  : 		_Tidy();
; 639  : 		assign(_Ptr, _Count);

  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR __Ptr$[esp]
  00007	33 c0		 xor	 eax, eax
  00009	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00013	88 46 04	 mov	 BYTE PTR [esi+4], al
  00016	8b 44 24 0c	 mov	 eax, DWORD PTR __Count$[esp]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 640  : 		}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 638  : 		_Tidy();
; 639  : 		assign(_Ptr, _Count);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp]
  0000b	51		 push	 ecx
  0000c	33 c0		 xor	 eax, eax
  0000e	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00015	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001c	52		 push	 edx
  0001d	8b ce		 mov	 ecx, esi
  0001f	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00023	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 640  : 		}

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	c2 08 00	 ret	 8
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??0?$_Tree_val@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tree_val<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_val@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tree_val<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >, COMDAT
; _this$ = ecx

; 97   : 		{	// construct base, and allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN23@Tree_val
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 98   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 08 00	 ret	 8

; 97   : 		{	// construct base, and allocator from _Al

$LN23@Tree_val:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 98   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 08 00	 ret	 8
??0?$_Tree_val@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tree_val<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
_TEXT	ENDS
PUBLIC	??_G_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAXI@Z ; std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_G_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAXI@Z PROC ; std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00006	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  0000b	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00010	74 09		 je	 SHORT $LN10@scalar@28
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN10@scalar@28:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 04 00	 ret	 4
??_G_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAXI@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 992  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 993  : 		_DEBUG_POINTER(_Ptr);
; 994  : 		return (append(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@append@7:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL5@append@7
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 995  : 		}

  00028	c2 04 00	 ret	 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	??$_Destroy@UHostDevice@@@std@@YAXPAUHostDevice@@@Z ; std::_Destroy<HostDevice>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UHostDevice@@@std@@YAXPAUHostDevice@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UHostDevice@@@std@@YAXPAUHostDevice@@@Z PROC ; std::_Destroy<HostDevice>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
??$_Destroy@UHostDevice@@@std@@YAXPAUHostDevice@@@Z ENDP ; std::_Destroy<HostDevice>
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@std@@QAE@XZ:PROC			; std::exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0002d	33 c0		 xor	 eax, eax
  0002f	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00038	6a ff		 push	 -1
  0003a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0003d	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00044	50		 push	 eax
  00045	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  00049	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004c	8b 44 24 24	 mov	 eax, DWORD PTR __Message$[esp+28]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 27   : 		}

  00056	8b c6		 mov	 eax, esi
  00058	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5e		 pop	 esi
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogtpy
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 110  : 		}

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN21@length_err
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN21@length_err:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN24@scalar@29
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN24@scalar@29:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN34@scalar@29
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN34@scalar@29:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??_R4out_of_range@std@@6B@			; std::out_of_range::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	??_R3out_of_range@std@@8			; std::out_of_range::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2out_of_range@std@@8			; std::out_of_range::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@out_of_range@std@@8		; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:PROC		; std::out_of_range::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@out_of_range@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@out_of_range@std@@8 DD FLAT:??_R0?AVout_of_range@std@@@8 ; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R2out_of_range@std@@8
rdata$r	SEGMENT
??_R2out_of_range@std@@8 DD FLAT:??_R1A@?0A@EA@out_of_range@std@@8 ; std::out_of_range::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3out_of_range@std@@8
rdata$r	SEGMENT
??_R3out_of_range@std@@8 DD 00H				; std::out_of_range::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4out_of_range@std@@6B@
rdata$r	SEGMENT
??_R4out_of_range@std@@6B@ DD 00H			; std::out_of_range::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_R4out_of_range@std@@6B@ ; std::out_of_range::`vftable'
	DD	FLAT:??_Eout_of_range@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 129  : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7out_of_range@std@@6B@

; 130  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
_TEXT	ENDS
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
; Function compile flags: /Ogtpy
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
??1out_of_range@std@@UAE@XZ PROC			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx

; 133  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 134  : 		}

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN21@out_of_ran
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN21@out_of_ran:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC			; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN24@scalar@30
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN24@scalar@30:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN34@scalar@30
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN34@scalar@30:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 153  : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0002d	33 c0		 xor	 eax, eax
  0002f	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00038	6a ff		 push	 -1
  0003a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0003d	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00044	50		 push	 eax
  00045	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  00049	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004c	8b 44 24 24	 mov	 eax, DWORD PTR __Message$[esp+28]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 154  : 		}

  00056	8b c6		 mov	 eax, esi
  00058	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5e		 pop	 esi
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::runtime_error::runtime_error
PUBLIC	?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T170360 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::locale::name, COMDAT
; _this$ = ecx

; 407  : 		{	// return locale name

  00000	51		 push	 ecx

; 408  : 		return (_Ptr->_Name);

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	56		 push	 esi
  00004	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00008	33 d2		 xor	 edx, edx
  0000a	6a ff		 push	 -1
  0000c	83 c0 18	 add	 eax, 24			; 00000018H
  0000f	52		 push	 edx
  00010	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00017	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0001a	50		 push	 eax
  0001b	8b ce		 mov	 ecx, esi
  0001d	89 54 24 10	 mov	 DWORD PTR $T170360[esp+20], edx
  00021	88 56 04	 mov	 BYTE PTR [esi+4], dl
  00024	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi

; 409  : 		}

  0002c	59		 pop	 ecx
  0002d	c2 04 00	 ret	 4
?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::locale::name
_TEXT	ENDS
PUBLIC	?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	ENDS
;	COMDAT ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T170482 = -164						; size = 4
$T170476 = -160						; size = 4
$T170478 = -156						; size = 28
$T170477 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::ctype<char>::_Getcat, COMDAT

; 1790 : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1791 : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b bc 24 b8 00
	00 00		 mov	 edi, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T170482[esp+180], ebx
  00039	85 ff		 test	 edi, edi
  0003b	0f 84 9c 00 00
	00		 je	 $LN42@Getcat
  00041	39 1f		 cmp	 DWORD PTR [edi], ebx
  00043	0f 85 94 00 00
	00		 jne	 $LN42@Getcat

; 1792 : 			*_Ppf = _NEW_CRT ctype<_Elem>(
; 1793 : 				_Locinfo(_Ploc->name()));

  00049	6a 18		 push	 24			; 00000018H
  0004b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00050	8b f0		 mov	 esi, eax
  00052	83 c4 04	 add	 esp, 4
  00055	89 74 24 14	 mov	 DWORD PTR $T170476[esp+180], esi
  00059	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00060	85 f6		 test	 esi, esi
  00062	74 3c		 je	 SHORT $LN4@Getcat
  00064	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006b	8d 44 24 18	 lea	 eax, DWORD PTR $T170478[esp+180]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00075	50		 push	 eax
  00076	8d 4c 24 38	 lea	 ecx, DWORD PTR $T170477[esp+184]
  0007a	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00082	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T170482[esp+184], 1
  0008a	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  0008f	6a 00		 push	 0
  00091	50		 push	 eax
  00092	8b ce		 mov	 ecx, esi
  00094	bb 03 00 00 00	 mov	 ebx, 3
  00099	e8 00 00 00 00	 call	 ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z ; std::ctype<char>::ctype<char>
  0009e	eb 02		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  000a0	33 c0		 xor	 eax, eax
$LN5@Getcat:
  000a2	c7 84 24 b0 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 2
  000ad	89 07		 mov	 DWORD PTR [edi], eax
  000af	f6 c3 02	 test	 bl, 2
  000b2	74 10		 je	 SHORT $LN11@Getcat
  000b4	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000b7	8d 4c 24 34	 lea	 ecx, DWORD PTR $T170477[esp+180]
  000bb	89 5c 24 10	 mov	 DWORD PTR $T170482[esp+180], ebx
  000bf	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat:
  000c4	f6 c3 01	 test	 bl, 1
  000c7	74 14		 je	 SHORT $LN42@Getcat
  000c9	83 7c 24 30 10	 cmp	 DWORD PTR $T170478[esp+204], 16 ; 00000010H
  000ce	72 0d		 jb	 SHORT $LN42@Getcat
  000d0	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T170478[esp+184]
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000da	83 c4 04	 add	 esp, 4
$LN42@Getcat:

; 1794 : 		return (_X_CTYPE);

  000dd	b8 02 00 00 00	 mov	 eax, 2

; 1795 : 		}

  000e2	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f0	59		 pop	 ecx
  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  000fa	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T170476[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T170482[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T170482[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T170478[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat:
  0002f	c3		 ret	 0
__ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  0003a	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::ctype<char>::_Getcat
PUBLIC	?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<wchar_t>::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	ENDS
;	COMDAT ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T170618 = -164						; size = 4
$T170612 = -160						; size = 4
$T170614 = -156						; size = 28
$T170613 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::ctype<wchar_t>::_Getcat, COMDAT

; 2031 : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2032 : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b bc 24 b8 00
	00 00		 mov	 edi, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T170618[esp+180], ebx
  00039	85 ff		 test	 edi, edi
  0003b	0f 84 9c 00 00
	00		 je	 $LN42@Getcat@2
  00041	39 1f		 cmp	 DWORD PTR [edi], ebx
  00043	0f 85 94 00 00
	00		 jne	 $LN42@Getcat@2

; 2033 : 			*_Ppf = _NEW_CRT ctype<_Elem>(
; 2034 : 				_Locinfo(_Ploc->name()));

  00049	6a 20		 push	 32			; 00000020H
  0004b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00050	8b f0		 mov	 esi, eax
  00052	83 c4 04	 add	 esp, 4
  00055	89 74 24 14	 mov	 DWORD PTR $T170612[esp+180], esi
  00059	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00060	85 f6		 test	 esi, esi
  00062	74 3c		 je	 SHORT $LN4@Getcat@2
  00064	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006b	8d 44 24 18	 lea	 eax, DWORD PTR $T170614[esp+180]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00075	50		 push	 eax
  00076	8d 4c 24 38	 lea	 ecx, DWORD PTR $T170613[esp+184]
  0007a	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00082	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T170618[esp+184], 1
  0008a	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  0008f	6a 00		 push	 0
  00091	50		 push	 eax
  00092	8b ce		 mov	 ecx, esi
  00094	bb 03 00 00 00	 mov	 ebx, 3
  00099	e8 00 00 00 00	 call	 ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z ; std::ctype<wchar_t>::ctype<wchar_t>
  0009e	eb 02		 jmp	 SHORT $LN5@Getcat@2
$LN4@Getcat@2:
  000a0	33 c0		 xor	 eax, eax
$LN5@Getcat@2:
  000a2	c7 84 24 b0 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 2
  000ad	89 07		 mov	 DWORD PTR [edi], eax
  000af	f6 c3 02	 test	 bl, 2
  000b2	74 10		 je	 SHORT $LN11@Getcat@2
  000b4	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000b7	8d 4c 24 34	 lea	 ecx, DWORD PTR $T170613[esp+180]
  000bb	89 5c 24 10	 mov	 DWORD PTR $T170618[esp+180], ebx
  000bf	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat@2:
  000c4	f6 c3 01	 test	 bl, 1
  000c7	74 14		 je	 SHORT $LN42@Getcat@2
  000c9	83 7c 24 30 10	 cmp	 DWORD PTR $T170614[esp+204], 16 ; 00000010H
  000ce	72 0d		 jb	 SHORT $LN42@Getcat@2
  000d0	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T170614[esp+184]
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000da	83 c4 04	 add	 esp, 4
$LN42@Getcat@2:

; 2035 : 		return (_X_CTYPE);

  000dd	b8 02 00 00 00	 mov	 eax, 2

; 2036 : 		}

  000e2	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f0	59		 pop	 ecx
  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  000fa	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T170612[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T170618[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat@2
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T170618[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T170614[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat@2:
  0002f	c3		 ret	 0
__ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  0003a	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::ctype<wchar_t>::_Getcat
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::ios_base::failure::failure
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Efailure@ios_base@std@@UAEPAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD FLAT:??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfailure@ios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 00H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DD FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DD	FLAT:??_Efailure@ios_base@std@@UAEPAXI@Z
	DD	FLAT:?what@runtime_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::ios_base::failure::failure, COMDAT
; _this$ = ecx

; 220  : 			{	// construct with message

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@

; 221  : 			}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::ios_base::failure::failure
_TEXT	ENDS
PUBLIC	??1failure@ios_base@std@@UAE@XZ			; std::ios_base::failure::~failure
; Function compile flags: /Ogtpy
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1failure@ios_base@std@@UAE@XZ PROC			; std::ios_base::failure::~failure, COMDAT
; _this$ = ecx

; 224  : 			{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 225  : 			}

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN21@failure
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN21@failure:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1failure@ios_base@std@@UAE@XZ ENDP			; std::ios_base::failure::~failure
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfailure@ios_base@std@@UAEPAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN24@scalar@31
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN24@scalar@31:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN34@scalar@31
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN34@scalar@31:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Gfailure@ios_base@std@@UAEPAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::~ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
??1?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAE@XZ PROC ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::~ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
  00004	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  00007	8b cf		 mov	 ecx, edi
  00009	e8 00 00 00 00	 call	 ?_Tidy@?$list@KV?$allocator@K@std@@@std@@IAEXXZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Tidy
  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
  00019	5f		 pop	 edi
  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00020	5e		 pop	 esi
  00021	c3		 ret	 0
??1?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAE@XZ ENDP ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::~ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 652  : 		_Tidy();
; 653  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$LL37@basic_stri@5:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL37@basic_stri@5
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 654  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 916  : 		return (assign(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 917  : 		}

  0000e	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 920  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 921  : 		return (assign(_Ptr));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL7@operator@26:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL7@operator@26
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 922  : 		}

  00022	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 931  : 		return (append(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 932  : 		}

  0000e	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 935  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 936  : 		return (append(_Ptr));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL7@operator@27:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL7@operator@27
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 937  : 		}

  00022	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBD@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Ptr$ = 12						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1189 : 		{	// insert [_Ptr, <null>) at _Off

  00000	56		 push	 esi

; 1190 : 		_DEBUG_POINTER(_Ptr);
; 1191 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@insert@4:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@insert@4
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	8b 44 24 10	 mov	 eax, DWORD PTR __Off$[esp+8]
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 1192 : 		}

  00027	c2 08 00	 ret	 8
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
; Function compile flags: /Ogtpy
;	COMDAT ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
_TEXT	SEGMENT
$T171294 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr, COMDAT
; _this$ = ecx

; 1998 : 		{	// return [_Off, _Off + _Count) as new string

  00000	51		 push	 ecx

; 1999 : 		return (_Myt(*this, _Off, _Count, get_allocator()));

  00001	8b 54 24 0c	 mov	 edx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	33 c0		 xor	 eax, eax
  0000c	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000f	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00016	89 44 24 04	 mov	 DWORD PTR $T171294[esp+8], eax
  0001a	88 46 04	 mov	 BYTE PTR [esi+4], al
  0001d	8b 44 24 14	 mov	 eax, DWORD PTR __Count$[esp+4]
  00021	50		 push	 eax
  00022	52		 push	 edx
  00023	51		 push	 ecx
  00024	8b ce		 mov	 ecx, esi
  00026	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi

; 2000 : 		}

  0002e	59		 pop	 ecx
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 652  : 		_Tidy();
; 653  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c0		 xor	 eax, eax
  00009	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00010	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00017	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0001b	8b c2		 mov	 eax, edx
  0001d	57		 push	 edi
  0001e	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
$LL39@basic_stri@6:
  00021	66 8b 08	 mov	 cx, WORD PTR [eax]
  00024	83 c0 02	 add	 eax, 2
  00027	66 85 c9	 test	 cx, cx
  0002a	75 f5		 jne	 SHORT $LL39@basic_stri@6
  0002c	2b c7		 sub	 eax, edi
  0002e	d1 f8		 sar	 eax, 1
  00030	50		 push	 eax
  00031	52		 push	 edx
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00039	5f		 pop	 edi

; 654  : 		}

  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 916  : 		return (assign(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 917  : 		}

  0000e	c2 04 00	 ret	 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 920  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 921  : 		return (assign(_Ptr));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL7@operator@28:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL7@operator@28
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 922  : 		}

  00028	c2 04 00	 ret	 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$3
__ehfuncinfo$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T171573 = -76						; size = 4
__Str$145254 = -72					; size = 28
__Str$145251 = -72					; size = 28
__Nul$145256 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 60   : 		{	// return string copy of character array

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 40	 sub	 esp, 64			; 00000040H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 3c	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c4		 xor	 eax, esp
  00026	50		 push	 eax
  00027	8d 44 24 50	 lea	 eax, DWORD PTR __$EHRec$[esp+92]
  0002b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 61   : 		if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)

  00031	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00034	8b 74 24 60	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+88]
  00038	33 db		 xor	 ebx, ebx
  0003a	89 5c 24 10	 mov	 DWORD PTR $T171573[esp+92], ebx
  0003e	f6 c2 02	 test	 dl, 2
  00041	75 63		 jne	 SHORT $LN4@str
  00043	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00046	39 18		 cmp	 DWORD PTR [eax], ebx
  00048	74 5c		 je	 SHORT $LN4@str

; 62   : 			{	// writable, make string from write buffer
; 63   : 			_Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()
; 64   : 				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());

  0004a	8b 00		 mov	 eax, DWORD PTR [eax]
  0004c	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0004f	3b d0		 cmp	 edx, eax
  00051	72 02		 jb	 SHORT $LN8@str
  00053	8b c2		 mov	 eax, edx
$LN8@str:
  00055	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00058	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0005a	2b c1		 sub	 eax, ecx
  0005c	50		 push	 eax
  0005d	51		 push	 ecx
  0005e	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00063	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$145251[esp+100]
  00067	89 7c 24 34	 mov	 DWORD PTR __Str$145251[esp+124], edi
  0006b	89 5c 24 30	 mov	 DWORD PTR __Str$145251[esp+120], ebx
  0006f	88 5c 24 20	 mov	 BYTE PTR __Str$145251[esp+104], bl
  00073	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00078	89 5c 24 58	 mov	 DWORD PTR __$EHRec$[esp+100], ebx
$LN286@str:

; 65   : 			return (_Str);

  0007c	6a ff		 push	 -1
  0007e	53		 push	 ebx
  0007f	8d 54 24 1c	 lea	 edx, DWORD PTR __Str$145251[esp+100]
  00083	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  00086	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00089	52		 push	 edx
  0008a	8b ce		 mov	 ecx, esi
  0008c	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  0008f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00094	83 7c 24 2c 10	 cmp	 DWORD PTR __Str$145251[esp+116], 16 ; 00000010H
  00099	0f 82 8c 00 00
	00		 jb	 $LN274@str
  0009f	8b 44 24 18	 mov	 eax, DWORD PTR __Str$145251[esp+96]
  000a3	50		 push	 eax
  000a4	eb 7d		 jmp	 SHORT $LN285@str
$LN4@str:

; 66   : 			}
; 67   : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)

  000a6	f6 c2 04	 test	 dl, 4
  000a9	75 3b		 jne	 SHORT $LN2@str
  000ab	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000ae	39 1a		 cmp	 DWORD PTR [edx], ebx
  000b0	74 34		 je	 SHORT $LN2@str

; 68   : 			{	// readable, make string from read buffer
; 69   : 			_Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());

  000b2	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  000b5	8b 00		 mov	 eax, DWORD PTR [eax]
  000b7	03 02		 add	 eax, DWORD PTR [edx]
  000b9	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  000bc	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000be	2b c1		 sub	 eax, ecx
  000c0	50		 push	 eax
  000c1	51		 push	 ecx
  000c2	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  000c7	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$145254[esp+100]
  000cb	89 7c 24 34	 mov	 DWORD PTR __Str$145254[esp+124], edi
  000cf	89 5c 24 30	 mov	 DWORD PTR __Str$145254[esp+120], ebx
  000d3	88 5c 24 20	 mov	 BYTE PTR __Str$145254[esp+104], bl
  000d7	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000dc	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+100], 1

; 70   : 			return (_Str);

  000e4	eb 96		 jmp	 SHORT $LN286@str
$LN2@str:

; 71   : 			}
; 72   : 		else
; 73   : 			{	// inaccessible, return empty string
; 74   : 			_Mystr _Nul;

  000e6	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  000eb	89 7c 24 48	 mov	 DWORD PTR __Nul$145256[esp+116], edi
  000ef	89 5c 24 44	 mov	 DWORD PTR __Nul$145256[esp+112], ebx
  000f3	88 5c 24 34	 mov	 BYTE PTR __Nul$145256[esp+96], bl

; 75   : 			return (_Nul);

  000f7	6a ff		 push	 -1
  000f9	53		 push	 ebx
  000fa	8d 4c 24 38	 lea	 ecx, DWORD PTR __Nul$145256[esp+100]
  000fe	51		 push	 ecx
  000ff	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  00102	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00105	8b ce		 mov	 ecx, esi
  00107	c7 44 24 64 02
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+112], 2
  0010f	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00112	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00117	83 7c 24 48 10	 cmp	 DWORD PTR __Nul$145256[esp+116], 16 ; 00000010H
  0011c	72 0d		 jb	 SHORT $LN274@str
  0011e	8b 54 24 34	 mov	 edx, DWORD PTR __Nul$145256[esp+96]
  00122	52		 push	 edx
$LN285@str:
  00123	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00128	83 c4 04	 add	 esp, 4
$LN274@str:
  0012b	8b c6		 mov	 eax, esi

; 76   : 			}
; 77   : 		}

  0012d	8b 4c 24 50	 mov	 ecx, DWORD PTR __$EHRec$[esp+92]
  00131	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00138	59		 pop	 ecx
  00139	5f		 pop	 edi
  0013a	5e		 pop	 esi
  0013b	5b		 pop	 ebx
  0013c	8b 4c 24 3c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+76]
  00140	33 cc		 xor	 ecx, esp
  00142	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00147	83 c4 4c	 add	 esp, 76			; 0000004cH
  0014a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR __Str$145251[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$2:
  00008	8d 4d b8	 lea	 ecx, DWORD PTR __Str$145254[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$3:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR __Nul$145256[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 b4	 lea	 eax, DWORD PTR [edx-76]
  0001f	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	83 c0 0c	 add	 eax, 12			; 0000000cH
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	??0?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	SEGMENT
__unwindtable$??0?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >, COMDAT
; _this$ = ecx

; 509  : 		{	// construct empty tree

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	6a 04		 push	 4
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	83 c4 04	 add	 esp, 4
  00032	85 c0		 test	 eax, eax
  00034	74 04		 je	 SHORT $LN28@Tree
  00036	89 30		 mov	 DWORD PTR [eax], esi
  00038	eb 02		 jmp	 SHORT $LN29@Tree
$LN28@Tree:
  0003a	33 c0		 xor	 eax, eax
$LN29@Tree:
  0003c	89 06		 mov	 DWORD PTR [esi], eax

; 510  : 		_Init();

  0003e	8b ce		 mov	 ecx, esi
  00040	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00048	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buynode
  0004d	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00050	c6 80 a1 00 00
	00 01		 mov	 BYTE PTR [eax+161], 1
  00057	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005a	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0005d	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00060	89 00		 mov	 DWORD PTR [eax], eax
  00062	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00065	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00068	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 511  : 		}

  0006f	8b c6		 mov	 eax, esi
  00071	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00075	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007c	59		 pop	 ecx
  0007d	5e		 pop	 esi
  0007e	83 c4 10	 add	 esp, 16			; 00000010H
  00081	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
PUBLIC	__$ArrayPad$
PUBLIC	?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$3
__ehfuncinfo$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T173012 = -76						; size = 4
__Str$145473 = -72					; size = 28
__Str$145470 = -72					; size = 28
__Nul$145475 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str, COMDAT
; _this$ = ecx

; 60   : 		{	// return string copy of character array

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 40	 sub	 esp, 64			; 00000040H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 3c	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c4		 xor	 eax, esp
  00026	50		 push	 eax
  00027	8d 44 24 50	 lea	 eax, DWORD PTR __$EHRec$[esp+92]
  0002b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00031	8b c1		 mov	 eax, ecx

; 61   : 		if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)

  00033	8b 50 40	 mov	 edx, DWORD PTR [eax+64]
  00036	8b 74 24 60	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+88]
  0003a	33 ff		 xor	 edi, edi
  0003c	89 7c 24 10	 mov	 DWORD PTR $T173012[esp+92], edi
  00040	f6 c2 02	 test	 dl, 2
  00043	75 6e		 jne	 SHORT $LN4@str@2
  00045	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00048	39 39		 cmp	 DWORD PTR [ecx], edi
  0004a	74 67		 je	 SHORT $LN4@str@2

; 62   : 			{	// writable, make string from write buffer
; 63   : 			_Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()
; 64   : 				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());

  0004c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0004e	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  00051	3b d1		 cmp	 edx, ecx
  00053	72 02		 jb	 SHORT $LN8@str@2
  00055	8b ca		 mov	 ecx, edx
$LN8@str@2:
  00057	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0005a	8b 00		 mov	 eax, DWORD PTR [eax]
  0005c	2b c8		 sub	 ecx, eax
  0005e	d1 f9		 sar	 ecx, 1
  00060	51		 push	 ecx
  00061	33 d2		 xor	 edx, edx
  00063	bb 07 00 00 00	 mov	 ebx, 7
  00068	50		 push	 eax
  00069	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$145470[esp+100]
  0006d	89 5c 24 34	 mov	 DWORD PTR __Str$145470[esp+124], ebx
  00071	89 7c 24 30	 mov	 DWORD PTR __Str$145470[esp+120], edi
  00075	66 89 54 24 20	 mov	 WORD PTR __Str$145470[esp+104], dx
  0007a	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0007f	89 7c 24 58	 mov	 DWORD PTR __$EHRec$[esp+100], edi
$LN304@str@2:

; 65   : 			return (_Str);

  00083	6a ff		 push	 -1
  00085	57		 push	 edi
  00086	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$145470[esp+100]
  0008a	33 c0		 xor	 eax, eax
  0008c	51		 push	 ecx
  0008d	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  00090	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00093	8b ce		 mov	 ecx, esi
  00095	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00099	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0009e	83 7c 24 2c 08	 cmp	 DWORD PTR __Str$145470[esp+116], 8
  000a3	0f 82 9d 00 00
	00		 jb	 $LN292@str@2
  000a9	8b 54 24 18	 mov	 edx, DWORD PTR __Str$145470[esp+96]
  000ad	52		 push	 edx
  000ae	e9 8b 00 00 00	 jmp	 $LN303@str@2
$LN4@str@2:

; 66   : 			}
; 67   : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)

  000b3	f6 c2 04	 test	 dl, 4
  000b6	75 43		 jne	 SHORT $LN2@str@2
  000b8	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000bb	39 39		 cmp	 DWORD PTR [ecx], edi
  000bd	74 3c		 je	 SHORT $LN2@str@2

; 68   : 			{	// readable, make string from read buffer
; 69   : 			_Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());

  000bf	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000c1	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  000c4	8b 12		 mov	 edx, DWORD PTR [edx]
  000c6	8d 0c 51	 lea	 ecx, DWORD PTR [ecx+edx*2]
  000c9	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  000cc	8b 02		 mov	 eax, DWORD PTR [edx]
  000ce	2b c8		 sub	 ecx, eax
  000d0	d1 f9		 sar	 ecx, 1
  000d2	51		 push	 ecx
  000d3	33 d2		 xor	 edx, edx
  000d5	bb 07 00 00 00	 mov	 ebx, 7
  000da	50		 push	 eax
  000db	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$145473[esp+100]
  000df	89 5c 24 34	 mov	 DWORD PTR __Str$145473[esp+124], ebx
  000e3	89 7c 24 30	 mov	 DWORD PTR __Str$145473[esp+120], edi
  000e7	66 89 54 24 20	 mov	 WORD PTR __Str$145473[esp+104], dx
  000ec	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  000f1	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+100], 1

; 70   : 			return (_Str);

  000f9	eb 88		 jmp	 SHORT $LN304@str@2
$LN2@str@2:

; 71   : 			}
; 72   : 		else
; 73   : 			{	// inaccessible, return empty string
; 74   : 			_Mystr _Nul;

  000fb	bb 07 00 00 00	 mov	 ebx, 7
  00100	33 c0		 xor	 eax, eax
  00102	89 5c 24 48	 mov	 DWORD PTR __Nul$145475[esp+116], ebx
  00106	89 7c 24 44	 mov	 DWORD PTR __Nul$145475[esp+112], edi
  0010a	66 89 44 24 34	 mov	 WORD PTR __Nul$145475[esp+96], ax

; 75   : 			return (_Nul);

  0010f	6a ff		 push	 -1
  00111	33 c9		 xor	 ecx, ecx
  00113	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  00116	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00119	57		 push	 edi
  0011a	8d 54 24 38	 lea	 edx, DWORD PTR __Nul$145475[esp+100]
  0011e	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00122	52		 push	 edx
  00123	8b ce		 mov	 ecx, esi
  00125	c7 44 24 64 02
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+112], 2
  0012d	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00132	83 7c 24 48 08	 cmp	 DWORD PTR __Nul$145475[esp+116], 8
  00137	72 0d		 jb	 SHORT $LN292@str@2
  00139	8b 44 24 34	 mov	 eax, DWORD PTR __Nul$145475[esp+96]
  0013d	50		 push	 eax
$LN303@str@2:
  0013e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00143	83 c4 04	 add	 esp, 4
$LN292@str@2:
  00146	8b c6		 mov	 eax, esi

; 76   : 			}
; 77   : 		}

  00148	8b 4c 24 50	 mov	 ecx, DWORD PTR __$EHRec$[esp+92]
  0014c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00153	59		 pop	 ecx
  00154	5f		 pop	 edi
  00155	5e		 pop	 esi
  00156	5b		 pop	 ebx
  00157	8b 4c 24 3c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+76]
  0015b	33 cc		 xor	 ecx, esp
  0015d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00162	83 c4 4c	 add	 esp, 76			; 0000004cH
  00165	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR __Str$145470[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$2:
  00008	8d 4d b8	 lea	 ecx, DWORD PTR __Str$145473[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$3:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR __Nul$145475[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 b4	 lea	 eax, DWORD PTR [edx-76]
  0001f	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	83 c0 0c	 add	 eax, 12			; 0000000cH
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T174235 = -80						; size = 28
$T174234 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 44	 sub	 esp, 68			; 00000044H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 48	 lea	 eax, DWORD PTR __$EHRec$[esp+84]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

  00023	6a 12		 push	 18			; 00000012H
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0002a	8d 4c 24 0c	 lea	 ecx, DWORD PTR $T174235[esp+92]
  0002e	c7 44 24 24 0f
	00 00 00	 mov	 DWORD PTR $T174235[esp+116], 15 ; 0000000fH
  00036	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T174235[esp+112], 0
  0003e	c6 44 24 10 00	 mov	 BYTE PTR $T174235[esp+96], 0
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00048	8d 44 24 04	 lea	 eax, DWORD PTR $T174235[esp+84]
  0004c	50		 push	 eax
  0004d	8d 4c 24 24	 lea	 ecx, DWORD PTR $T174234[esp+88]
  00051	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+96], 0
  00059	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0005e	68 00 00 00 00	 push	 OFFSET __TI3?AVlength_error@std@@
  00063	8d 4c 24 24	 lea	 ecx, DWORD PTR $T174234[esp+88]
  00067	51		 push	 ecx
  00068	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR $T174234[esp+92], OFFSET ??_7length_error@std@@6B@
  00070	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN44@Xlen:
  00075	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T174235[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 bc	 lea	 eax, DWORD PTR [edx-68]
  0000f	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	8b 7c 24 20	 mov	 edi, DWORD PTR ___that$[esp+24]
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00033	33 d2		 xor	 edx, edx
  00035	6a ff		 push	 -1
  00037	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00040	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00043	52		 push	 edx
  00044	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0004b	89 51 14	 mov	 DWORD PTR [ecx+20], edx
  0004e	50		 push	 eax
  0004f	89 54 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], edx
  00053	88 51 04	 mov	 BYTE PTR [ecx+4], dl
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	8b c6		 mov	 eax, esi
  0005d	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00068	59		 pop	 ecx
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Incsize
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z$0
__ehfuncinfo$?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
$T174516 = -80						; size = 28
$T174515 = -52						; size = 40
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Incsize, COMDAT
; _this$ = ecx

; 1239 : 		{	// alter element count, with checking

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 44	 sub	 esp, 68			; 00000044H
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 4c	 lea	 eax, DWORD PTR __$EHRec$[esp+88]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1240 : 		if (max_size() - _Mysize < _Count)

  00024	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00027	8b 54 24 5c	 mov	 edx, DWORD PTR __Count$[esp+84]
  0002b	be ff ff ff 3f	 mov	 esi, 1073741823		; 3fffffffH
  00030	2b f0		 sub	 esi, eax
  00032	3b f2		 cmp	 esi, edx
  00034	73 52		 jae	 SHORT $LN1@Incsize

; 1241 : 			_THROW(length_error, "list<T> too long");

  00036	6a 10		 push	 16			; 00000010H
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0003d	8d 4c 24 10	 lea	 ecx, DWORD PTR $T174516[esp+96]
  00041	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T174516[esp+120], 15 ; 0000000fH
  00049	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T174516[esp+116], 0
  00051	c6 44 24 14 00	 mov	 BYTE PTR $T174516[esp+100], 0
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	8d 44 24 08	 lea	 eax, DWORD PTR $T174516[esp+88]
  0005f	50		 push	 eax
  00060	8d 4c 24 28	 lea	 ecx, DWORD PTR $T174515[esp+92]
  00064	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+100], 0
  0006c	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00071	68 00 00 00 00	 push	 OFFSET __TI3?AVlength_error@std@@
  00076	8d 4c 24 28	 lea	 ecx, DWORD PTR $T174515[esp+92]
  0007a	51		 push	 ecx
  0007b	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR $T174515[esp+96], OFFSET ??_7length_error@std@@6B@
  00083	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@Incsize:

; 1242 : 		_Mysize += _Count;

  00088	03 c2		 add	 eax, edx
  0008a	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 1243 : 		}

  0008d	8b 4c 24 4c	 mov	 ecx, DWORD PTR __$EHRec$[esp+88]
  00091	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00098	59		 pop	 ecx
  00099	5e		 pop	 esi
  0009a	83 c4 50	 add	 esp, 80			; 00000050H
  0009d	c2 04 00	 ret	 4
$LN51@Incsize:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T174516[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 b8	 lea	 eax, DWORD PTR [edx-72]
  0000f	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Incsize
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T174691 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_grouping, COMDAT
; _this$ = ecx

; 174  : 		{	// return grouping string

  00000	51		 push	 ecx

; 175  : 		return (string(_Grouping));

  00001	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00009	8b c1		 mov	 eax, ecx
  0000b	57		 push	 edi
  0000c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00013	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T174691[esp+12], 0
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL41@do_groupin:
  00030	8a 10		 mov	 dl, BYTE PTR [eax]
  00032	40		 inc	 eax
  00033	84 d2		 test	 dl, dl
  00035	75 f9		 jne	 SHORT $LL41@do_groupin
  00037	2b c7		 sub	 eax, edi
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00042	5f		 pop	 edi
  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi

; 176  : 		}

  00046	59		 pop	 ecx
  00047	c2 04 00	 ret	 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_grouping
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T174841 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_falsename, COMDAT
; _this$ = ecx

; 179  : 		{	// return name for false

  00000	51		 push	 ecx

; 180  : 		return (string_type(_Falsename));

  00001	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00009	8b c1		 mov	 eax, ecx
  0000b	57		 push	 edi
  0000c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00013	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T174841[esp+12], 0
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL41@do_falsena:
  00030	8a 10		 mov	 dl, BYTE PTR [eax]
  00032	40		 inc	 eax
  00033	84 d2		 test	 dl, dl
  00035	75 f9		 jne	 SHORT $LL41@do_falsena
  00037	2b c7		 sub	 eax, edi
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00042	5f		 pop	 edi
  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi

; 181  : 		}

  00046	59		 pop	 ecx
  00047	c2 04 00	 ret	 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_falsename
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T174991 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_truename, COMDAT
; _this$ = ecx

; 184  : 		{	// return name for true

  00000	51		 push	 ecx

; 185  : 		return (string_type(_Truename));

  00001	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00009	8b c1		 mov	 eax, ecx
  0000b	57		 push	 edi
  0000c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00013	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T174991[esp+12], 0
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL41@do_truenam:
  00030	8a 10		 mov	 dl, BYTE PTR [eax]
  00032	40		 inc	 eax
  00033	84 d2		 test	 dl, dl
  00035	75 f9		 jne	 SHORT $LL41@do_truenam
  00037	2b c7		 sub	 eax, edi
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00042	5f		 pop	 edi
  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi

; 186  : 		}

  00046	59		 pop	 ecx
  00047	c2 04 00	 ret	 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_truename
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
EXTRN	??0bad_cast@std@@QAE@PBD@Z:PROC			; std::bad_cast::bad_cast
EXTRN	?id@?$ctype@D@std@@2V0locale@2@A:DWORD		; std::ctype<char>::id
EXTRN	??1bad_cast@std@@UAE@XZ:PROC			; std::bad_cast::~bad_cast
EXTRN	??0bad_cast@std@@QAE@ABV01@@Z:PROC		; std::bad_cast::bad_cast
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$146908 = -36					; size = 4
__Lock$175151 = -32					; size = 4
__Lock$146907 = -28					; size = 4
$T175143 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$175173 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$146907[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, 0 ; std::ctype<char>::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$146908[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet@2
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$175151[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, 0 ; std::ctype<char>::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet@2
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, eax ; std::ctype<char>::id
$LN10@use_facet@2:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$175151[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet@2:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet@2
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet@2
$LN30@use_facet@2:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet@2
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet@2
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet@2
$LN20@use_facet@2:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet@2
$LN16@use_facet@2:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet@2:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet@2
$LN31@use_facet@2:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet@2

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet@2
$LN4@use_facet@2:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$146908[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet@2

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T175143[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T175143[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet@2:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$146908[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$175173[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::ctype<char> >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet@2
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet@2:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$175173[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet@2:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$146907[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$146907[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
PUBLIC	??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
EXTRN	?id@?$ctype@_W@std@@2V0locale@2@A:DWORD		; std::ctype<wchar_t>::id
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$146943 = -36					; size = 4
__Lock$175198 = -32					; size = 4
__Lock$146942 = -28					; size = 4
$T175190 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$175220 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<wchar_t> >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$146942[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A, 0 ; std::ctype<wchar_t>::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$146943[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet@3
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$175198[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A, 0 ; std::ctype<wchar_t>::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet@3
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A, eax ; std::ctype<wchar_t>::id
$LN10@use_facet@3:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$175198[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet@3:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A ; std::ctype<wchar_t>::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet@3
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet@3
$LN30@use_facet@3:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet@3
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet@3
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet@3
$LN20@use_facet@3:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet@3
$LN16@use_facet@3:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet@3:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet@3
$LN31@use_facet@3:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet@3

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet@3
$LN4@use_facet@3:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$146943[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<wchar_t>::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet@3

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T175190[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T175190[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet@3:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$146943[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$175220[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet@3
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet@3:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$175220[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet@3:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$146942[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$146942[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<wchar_t> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
_TEXT	SEGMENT
$T175240 = -44						; size = 4
$T175237 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 33   : 	{	// return NTCS + string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 34   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 54 24 40	 mov	 edx, DWORD PTR __Left$[esp+52]
  00029	33 db		 xor	 ebx, ebx
  0002b	8b c2		 mov	 eax, edx
  0002d	89 5c 24 0c	 mov	 DWORD PTR $T175240[esp+56], ebx
  00031	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T175237[esp+80], 15 ; 0000000fH
  00039	89 5c 24 24	 mov	 DWORD PTR $T175237[esp+76], ebx
  0003d	88 5c 24 14	 mov	 BYTE PTR $T175237[esp+60], bl
  00041	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL98@operator@29:
  00044	8a 08		 mov	 cl, BYTE PTR [eax]
  00046	40		 inc	 eax
  00047	3a cb		 cmp	 cl, bl
  00049	75 f9		 jne	 SHORT $LL98@operator@29
  0004b	2b c6		 sub	 eax, esi
  0004d	50		 push	 eax
  0004e	52		 push	 edx
  0004f	8d 4c 24 18	 lea	 ecx, DWORD PTR $T175237[esp+64]
  00053	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00058	8b 44 24 44	 mov	 eax, DWORD PTR __Right$[esp+52]
  0005c	6a ff		 push	 -1
  0005e	53		 push	 ebx
  0005f	50		 push	 eax
  00060	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T175237[esp+68]
  00064	89 5c 24 40	 mov	 DWORD PTR __$EHRec$[esp+76], ebx
  00068	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0006d	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00071	6a ff		 push	 -1
  00073	53		 push	 ebx
  00074	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0007b	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0007e	50		 push	 eax
  0007f	8b ce		 mov	 ecx, esi
  00081	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00084	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00089	83 7c 24 28 10	 cmp	 DWORD PTR $T175237[esp+80], 16 ; 00000010H
  0008e	72 0d		 jb	 SHORT $LN99@operator@29
  00090	8b 4c 24 14	 mov	 ecx, DWORD PTR $T175237[esp+60]
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0009a	83 c4 04	 add	 esp, 4
$LN99@operator@29:
  0009d	8b c6		 mov	 eax, esi

; 35   : 	}

  0009f	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  000a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000aa	59		 pop	 ecx
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	83 c4 2c	 add	 esp, 44			; 0000002cH
  000b0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T175237[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
_TEXT	SEGMENT
$T175628 = -44						; size = 4
$T175625 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 53   : 	{	// return string + NTCS

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 54   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 44 24 40	 mov	 eax, DWORD PTR __Left$[esp+52]
  00029	33 db		 xor	 ebx, ebx
  0002b	6a ff		 push	 -1
  0002d	53		 push	 ebx
  0002e	50		 push	 eax
  0002f	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T175625[esp+68]
  00033	89 5c 24 18	 mov	 DWORD PTR $T175628[esp+68], ebx
  00037	c7 44 24 34 0f
	00 00 00	 mov	 DWORD PTR $T175625[esp+92], 15 ; 0000000fH
  0003f	89 5c 24 30	 mov	 DWORD PTR $T175625[esp+88], ebx
  00043	88 5c 24 20	 mov	 BYTE PTR $T175625[esp+72], bl
  00047	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004c	8b 54 24 44	 mov	 edx, DWORD PTR __Right$[esp+52]
  00050	8b c2		 mov	 eax, edx
  00052	89 5c 24 34	 mov	 DWORD PTR __$EHRec$[esp+64], ebx
  00056	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL90@operator@30:
  00060	8a 08		 mov	 cl, BYTE PTR [eax]
  00062	40		 inc	 eax
  00063	3a cb		 cmp	 cl, bl
  00065	75 f9		 jne	 SHORT $LL90@operator@30
  00067	2b c6		 sub	 eax, esi
  00069	50		 push	 eax
  0006a	52		 push	 edx
  0006b	8d 4c 24 18	 lea	 ecx, DWORD PTR $T175625[esp+64]
  0006f	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00074	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00078	6a ff		 push	 -1
  0007a	53		 push	 ebx
  0007b	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00082	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00085	50		 push	 eax
  00086	8b ce		 mov	 ecx, esi
  00088	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  0008b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00090	83 7c 24 28 10	 cmp	 DWORD PTR $T175625[esp+80], 16 ; 00000010H
  00095	72 0d		 jb	 SHORT $LN91@operator@30
  00097	8b 4c 24 14	 mov	 ecx, DWORD PTR $T175625[esp+60]
  0009b	51		 push	 ecx
  0009c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a1	83 c4 04	 add	 esp, 4
$LN91@operator@30:
  000a4	8b c6		 mov	 eax, esi

; 55   : 	}

  000a6	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  000aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b1	59		 pop	 ecx
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	83 c4 2c	 add	 esp, 44			; 0000002cH
  000b7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T175625[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
_TEXT	SEGMENT
$T175990 = -44						; size = 4
$T175987 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 23   : 	{	// return string + string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 24   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 44 24 40	 mov	 eax, DWORD PTR __Left$[esp+52]
  00029	33 db		 xor	 ebx, ebx
  0002b	6a ff		 push	 -1
  0002d	53		 push	 ebx
  0002e	50		 push	 eax
  0002f	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T175987[esp+68]
  00033	89 5c 24 18	 mov	 DWORD PTR $T175990[esp+68], ebx
  00037	c7 44 24 34 0f
	00 00 00	 mov	 DWORD PTR $T175987[esp+92], 15 ; 0000000fH
  0003f	89 5c 24 30	 mov	 DWORD PTR $T175987[esp+88], ebx
  00043	88 5c 24 20	 mov	 BYTE PTR $T175987[esp+72], bl
  00047	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004c	8b 4c 24 44	 mov	 ecx, DWORD PTR __Right$[esp+52]
  00050	6a ff		 push	 -1
  00052	53		 push	 ebx
  00053	51		 push	 ecx
  00054	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T175987[esp+68]
  00058	89 5c 24 40	 mov	 DWORD PTR __$EHRec$[esp+76], ebx
  0005c	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00061	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00065	6a ff		 push	 -1
  00067	53		 push	 ebx
  00068	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0006f	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00072	50		 push	 eax
  00073	8b ce		 mov	 ecx, esi
  00075	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00078	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0007d	83 7c 24 28 10	 cmp	 DWORD PTR $T175987[esp+80], 16 ; 00000010H
  00082	72 0d		 jb	 SHORT $LN88@operator@31
  00084	8b 54 24 14	 mov	 edx, DWORD PTR $T175987[esp+60]
  00088	52		 push	 edx
  00089	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008e	83 c4 04	 add	 esp, 4
$LN88@operator@31:
  00091	8b c6		 mov	 eax, esi

; 25   : 	}

  00093	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  00097	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009e	59		 pop	 ecx
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	83 c4 2c	 add	 esp, 44			; 0000002cH
  000a4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T175987[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@0@@Z ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@0@@Z PROC ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	83 c1 18	 add	 ecx, 24			; 00000018H
  00007	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@0@@Z ENDP ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=, COMDAT
; _this$ = ecx

; 935  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 936  : 		return (append(_Ptr));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL7@operator@32:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL7@operator@32
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 937  : 		}

  00028	c2 04 00	 ret	 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
_TEXT	ENDS
PUBLIC	?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T176381 = -164						; size = 4
$T176375 = -160						; size = 4
$T176377 = -156						; size = 28
$T176376 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat, COMDAT

; 1030 : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	55		 push	 ebp
  00016	56		 push	 esi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1031 : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b ac 24 b8 00
	00 00		 mov	 ebp, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T176381[esp+180], ebx
  00039	85 ed		 test	 ebp, ebp
  0003b	0f 84 ac 00 00
	00		 je	 $LN50@Getcat@3
  00041	39 5d 00	 cmp	 DWORD PTR [ebp], ebx
  00044	0f 85 a3 00 00
	00		 jne	 $LN50@Getcat@3

; 1032 : 			*_Ppf = _NEW_CRT num_put<_Elem, _OutIt>(
; 1033 : 				_Locinfo(_Ploc->name()));

  0004a	6a 10		 push	 16			; 00000010H
  0004c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00051	8b f0		 mov	 esi, eax
  00053	83 c4 04	 add	 esp, 4
  00056	89 74 24 14	 mov	 DWORD PTR $T176375[esp+180], esi
  0005a	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00061	85 f6		 test	 esi, esi
  00063	74 4a		 je	 SHORT $LN4@Getcat@3
  00065	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006c	8d 44 24 18	 lea	 eax, DWORD PTR $T176377[esp+180]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00076	50		 push	 eax
  00077	8d 4c 24 38	 lea	 ecx, DWORD PTR $T176376[esp+184]
  0007b	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00083	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T176381[esp+184], 1
  0008b	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  00090	bb 03 00 00 00	 mov	 ebx, 3
  00095	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0009c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
  000a2	e8 00 00 00 00	 call	 __Getcvt
  000a7	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000aa	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  000ad	eb 02		 jmp	 SHORT $LN5@Getcat@3
$LN4@Getcat@3:
  000af	33 f6		 xor	 esi, esi
$LN5@Getcat@3:
  000b1	c7 84 24 b0 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 2
  000bc	89 75 00	 mov	 DWORD PTR [ebp], esi
  000bf	f6 c3 02	 test	 bl, 2
  000c2	74 10		 je	 SHORT $LN11@Getcat@3
  000c4	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000c7	8d 4c 24 34	 lea	 ecx, DWORD PTR $T176376[esp+180]
  000cb	89 5c 24 10	 mov	 DWORD PTR $T176381[esp+180], ebx
  000cf	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat@3:
  000d4	f6 c3 01	 test	 bl, 1
  000d7	74 14		 je	 SHORT $LN50@Getcat@3
  000d9	83 7c 24 30 10	 cmp	 DWORD PTR $T176377[esp+204], 16 ; 00000010H
  000de	72 0d		 jb	 SHORT $LN50@Getcat@3
  000e0	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T176377[esp+184]
  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ea	83 c4 04	 add	 esp, 4
$LN50@Getcat@3:

; 1034 : 		return (_X_NUMERIC);

  000ed	b8 04 00 00 00	 mov	 eax, 4

; 1035 : 		}

  000f2	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00100	59		 pop	 ecx
  00101	5e		 pop	 esi
  00102	5d		 pop	 ebp
  00103	5b		 pop	 ebx
  00104	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  0010a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T176375[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T176381[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat@3
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T176381[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T176377[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat@3:
  0002f	c3		 ret	 0
__ehhandler$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  0003a	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
PUBLIC	?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<char>::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	03H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T176544 = -164						; size = 4
$T176538 = -160						; size = 4
$T176540 = -156						; size = 28
$T176539 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::numpunct<char>::_Getcat, COMDAT

; 112  : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 113  : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b bc 24 b8 00
	00 00		 mov	 edi, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T176544[esp+180], ebx
  00039	85 ff		 test	 edi, edi
  0003b	0f 84 ad 00 00
	00		 je	 $LN42@Getcat@4
  00041	39 1f		 cmp	 DWORD PTR [edi], ebx
  00043	0f 85 a5 00 00
	00		 jne	 $LN42@Getcat@4

; 114  : 			*_Ppf = _NEW_CRT numpunct<_Elem>(
; 115  : 				_Locinfo(_Ploc->name()), 0, true);

  00049	6a 18		 push	 24			; 00000018H
  0004b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00050	8b f0		 mov	 esi, eax
  00052	83 c4 04	 add	 esp, 4
  00055	89 74 24 14	 mov	 DWORD PTR $T176538[esp+180], esi
  00059	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00060	85 f6		 test	 esi, esi
  00062	74 4d		 je	 SHORT $LN4@Getcat@4
  00064	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006b	8d 44 24 18	 lea	 eax, DWORD PTR $T176540[esp+180]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00075	50		 push	 eax
  00076	8d 4c 24 38	 lea	 ecx, DWORD PTR $T176539[esp+184]
  0007a	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00082	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T176544[esp+184], 1
  0008a	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  0008f	6a 01		 push	 1
  00091	6a 00		 push	 0
  00093	bb 03 00 00 00	 mov	 ebx, 3
  00098	50		 push	 eax
  00099	8b ce		 mov	 ecx, esi
  0009b	c7 84 24 bc 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+200], 2
  000a6	89 5c 24 1c	 mov	 DWORD PTR $T176544[esp+192], ebx
  000aa	e8 00 00 00 00	 call	 ??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z ; std::numpunct<char>::numpunct<char>
  000af	eb 02		 jmp	 SHORT $LN5@Getcat@4
$LN4@Getcat@4:
  000b1	33 c0		 xor	 eax, eax
$LN5@Getcat@4:
  000b3	89 07		 mov	 DWORD PTR [edi], eax
  000b5	c7 84 24 b0 00
	00 00 03 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 3
  000c0	f6 c3 02	 test	 bl, 2
  000c3	74 10		 je	 SHORT $LN11@Getcat@4
  000c5	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000c8	8d 4c 24 34	 lea	 ecx, DWORD PTR $T176539[esp+180]
  000cc	89 5c 24 10	 mov	 DWORD PTR $T176544[esp+180], ebx
  000d0	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat@4:
  000d5	f6 c3 01	 test	 bl, 1
  000d8	74 14		 je	 SHORT $LN42@Getcat@4
  000da	83 7c 24 30 10	 cmp	 DWORD PTR $T176540[esp+204], 16 ; 00000010H
  000df	72 0d		 jb	 SHORT $LN42@Getcat@4
  000e1	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T176540[esp+184]
  000e5	51		 push	 ecx
  000e6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000eb	83 c4 04	 add	 esp, 4
$LN42@Getcat@4:

; 116  : 		return (_X_NUMERIC);

  000ee	b8 04 00 00 00	 mov	 eax, 4

; 117  : 		}

  000f3	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000fa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00101	59		 pop	 ecx
  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx
  00105	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  0010b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T176538[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T176544[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat@4
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T176544[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T176540[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat@4:
  0002f	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2:
  00030	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T176544[ebp]
  00036	83 e0 02	 and	 eax, 2
  00039	0f 84 0f 00 00
	00		 je	 $LN10@Getcat@4
  0003f	83 a5 5c ff ff
	ff fd		 and	 DWORD PTR $T176544[ebp], -3 ; fffffffdH
  00046	8d 4d 80	 lea	 ecx, DWORD PTR $T176539[ebp]
  00049	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN10@Getcat@4:
  0004e	c3		 ret	 0
__ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0004f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00053	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  00059	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  0005f	33 c8		 xor	 ecx, eax
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0006b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::numpunct<char>::_Getcat
PUBLIC	?destroy@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@@Z ; std::allocator<HostDevice>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@@Z PROC ; std::allocator<HostDevice>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice

; 161  : 		}

  00009	c2 04 00	 ret	 4
?destroy@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@@Z ENDP ; std::allocator<HostDevice>::destroy
_TEXT	ENDS
PUBLIC	??0HostDevice@@QAE@ABU0@@Z			; HostDevice::HostDevice
PUBLIC	??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$7
__unwindtable$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T177066 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Vptr$177072 = 8					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

  0002b	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 128  : 
; 129  : 	_TRY_BEGIN

  0002e	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00031	33 db		 xor	 ebx, ebx
  00033	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL6@Uninit_cop@2:

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

  00040	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  00043	74 55		 je	 SHORT $LN4@Uninit_cop@2

; 131  : 		_Al.construct(_Dest, *_First);

  00045	89 75 08	 mov	 DWORD PTR __Vptr$177072[ebp], esi
  00048	89 75 e8	 mov	 DWORD PTR $T177066[ebp], esi
  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004f	3b f3		 cmp	 esi, ebx
  00051	74 08		 je	 SHORT $LN18@Uninit_cop@2
  00053	57		 push	 edi
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN18@Uninit_cop@2:
  0005b	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00061	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00064	89 75 10	 mov	 DWORD PTR __Dest$[ebp], esi
  00067	81 c7 88 00 00
	00		 add	 edi, 136		; 00000088H
  0006d	eb d1		 jmp	 SHORT $LL6@Uninit_cop@2
__catch$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00072	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00075	3b f7		 cmp	 esi, edi
  00077	74 18		 je	 SHORT $LN1@Uninit_cop@2
  00079	8d a4 24 00 00
	00 00		 npad	 7
$LL3@Uninit_cop@2:

; 134  : 		_Al.destroy(_Next);

  00080	8b ce		 mov	 ecx, esi
  00082	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00087	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0008d	3b f7		 cmp	 esi, edi
  0008f	75 ef		 jne	 SHORT $LL3@Uninit_cop@2
$LN1@Uninit_cop@2:

; 135  : 	_RERAISE;

  00091	33 db		 xor	 ebx, ebx
  00093	53		 push	 ebx
  00094	53		 push	 ebx
  00095	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Uninit_cop@2:

; 136  : 	_CATCH_END
; 137  : 	return (_Dest);

  0009a	8b c6		 mov	 eax, esi

; 138  : 	}

  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
$LN121@Uninit_cop@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Vptr$177072[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T177066[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ ; `string'
PUBLIC	__TI3?AVfailure@ios_base@std@@
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@	; `string'
PUBLIC	?clear@ios_base@std@@QAEXH_N@Z			; std::ios_base::clear
PUBLIC	__CTA3?AVfailure@ios_base@std@@
PUBLIC	__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40
PUBLIC	??0failure@ios_base@std@@QAE@ABV012@@Z		; std::ios_base::failure::failure
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40
xdata$x	SEGMENT
__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40 DD 00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0failure@ios_base@std@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__CTA3?AVfailure@ios_base@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ DB 'ios_base::failbit se'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT __TI3?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__TI3?AVfailure@ios_base@std@@ DD 00H
	DD	FLAT:??1failure@ios_base@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@ DB 'ios_base::badbit set', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?clear@ios_base@std@@QAEXH_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$2
__ehfuncinfo$?clear@ios_base@std@@QAEXH_N@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?clear@ios_base@std@@QAEXH_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?clear@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT
$T177107 = -148						; size = 40
$T177105 = -148						; size = 40
$T177108 = -108						; size = 28
$T177106 = -108						; size = 28
$T177109 = -80						; size = 40
$T177110 = -40						; size = 28
__$EHRec$ = -12						; size = 12
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@ios_base@std@@QAEXH_N@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 285  :         {	// set state, possibly reraise exception

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?clear@ios_base@std@@QAEXH_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 84 24 8c 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+152]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 286  :         _Mystate = (iostate)(_State & _Statmask);

  00029	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR __State$[esp+148]
  00030	83 e0 17	 and	 eax, 23			; 00000017H
  00033	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 287  :         if ((_Mystate & _Except) == 0)

  00036	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00039	23 c8		 and	 ecx, eax
  0003b	0f 84 d7 00 00
	00		 je	 $LN1@clear@2

; 288  :             ;
; 289  :         else if (_Reraise)

  00041	80 bc 24 a0 00
	00 00 00	 cmp	 BYTE PTR __Reraise$[esp+148], 0
  00049	74 09		 je	 SHORT $LN6@clear@2

; 290  :             _RERAISE;

  0004b	6a 00		 push	 0
  0004d	6a 00		 push	 0
  0004f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN6@clear@2:

; 291  :         else if (_Mystate & _Except & badbit)

  00054	f6 c1 04	 test	 cl, 4
  00057	74 3e		 je	 SHORT $LN4@clear@2

; 292  :             _THROW_NCEE(failure, "ios_base::badbit set");

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
  0005e	8d 4c 24 30	 lea	 ecx, DWORD PTR $T177106[esp+156]
  00062	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00067	8d 44 24 2c	 lea	 eax, DWORD PTR $T177106[esp+152]
  0006b	50		 push	 eax
  0006c	8d 4c 24 08	 lea	 ecx, DWORD PTR $T177105[esp+156]
  00070	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+164], 0
  0007b	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  00080	68 00 00 00 00	 push	 OFFSET __TI3?AVfailure@ios_base@std@@
  00085	8d 4c 24 08	 lea	 ecx, DWORD PTR $T177105[esp+156]
  00089	51		 push	 ecx
  0008a	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T177105[esp+160], OFFSET ??_7failure@ios_base@std@@6B@
  00092	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@clear@2:

; 293  :         else if (_Mystate & _Except & failbit)

  00097	f6 c1 02	 test	 cl, 2
  0009a	74 3e		 je	 SHORT $LN2@clear@2

; 294  :             _THROW_NCEE(failure, "ios_base::failbit set");

  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  000a1	8d 4c 24 30	 lea	 ecx, DWORD PTR $T177108[esp+156]
  000a5	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000aa	8d 54 24 2c	 lea	 edx, DWORD PTR $T177108[esp+152]
  000ae	52		 push	 edx
  000af	8d 4c 24 08	 lea	 ecx, DWORD PTR $T177107[esp+156]
  000b3	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+164], 1
  000be	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  000c3	68 00 00 00 00	 push	 OFFSET __TI3?AVfailure@ios_base@std@@
  000c8	8d 44 24 08	 lea	 eax, DWORD PTR $T177107[esp+156]
  000cc	50		 push	 eax
  000cd	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T177107[esp+160], OFFSET ??_7failure@ios_base@std@@6B@
  000d5	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@clear@2:

; 295  :         else
; 296  :             _THROW_NCEE(failure, "ios_base::eofbit set");

  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  000df	8d 4c 24 74	 lea	 ecx, DWORD PTR $T177110[esp+156]
  000e3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000e8	8d 4c 24 70	 lea	 ecx, DWORD PTR $T177110[esp+152]
  000ec	51		 push	 ecx
  000ed	8d 4c 24 4c	 lea	 ecx, DWORD PTR $T177109[esp+156]
  000f1	c7 84 24 98 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+164], 2
  000fc	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  00101	68 00 00 00 00	 push	 OFFSET __TI3?AVfailure@ios_base@std@@
  00106	8d 54 24 4c	 lea	 edx, DWORD PTR $T177109[esp+156]
  0010a	52		 push	 edx
  0010b	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR $T177109[esp+160], OFFSET ??_7failure@ios_base@std@@6B@
  00113	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@clear@2:

; 297  :         }

  00118	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+152]
  0011f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00126	59		 pop	 ecx
  00127	81 c4 94 00 00
	00		 add	 esp, 148		; 00000094H
  0012d	c2 08 00	 ret	 8
$LN24@clear@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$0:
  00000	8d 4d 94	 lea	 ecx, DWORD PTR $T177106[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$1:
  00008	8d 4d 94	 lea	 ecx, DWORD PTR $T177108[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$2:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR $T177110[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?clear@ios_base@std@@QAEXH_N@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 82 78 ff ff
	ff		 lea	 eax, DWORD PTR [edx-136]
  00022	8b 8a 74 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-140]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@ios_base@std@@QAEXH_N@Z
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@ios_base@std@@QAEXH_N@Z ENDP			; std::ios_base::clear
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0runtime_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	8b 7c 24 20	 mov	 edi, DWORD PTR ___that$[esp+24]
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00033	33 d2		 xor	 edx, edx
  00035	6a ff		 push	 -1
  00037	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00040	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00043	52		 push	 edx
  00044	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0004b	89 51 14	 mov	 DWORD PTR [ecx+20], edx
  0004e	50		 push	 eax
  0004f	89 54 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], edx
  00053	88 51 04	 mov	 BYTE PTR [ecx+4], dl
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	8b c6		 mov	 eax, esi
  0005d	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00068	59		 pop	 ecx
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0runtime_error@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
; Function compile flags: /Ogtpy
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV012@@Z ENDP		; std::ios_base::failure::failure
_TEXT	ENDS
PUBLIC	?clear@ios_base@std@@QAEXH@Z			; std::ios_base::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@ios_base@std@@QAEXH@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
?clear@ios_base@std@@QAEXH@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 301  : 		clear(_State, false);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __State$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 302  : 		}

  0000c	c2 04 00	 ret	 4
?clear@ios_base@std@@QAEXH@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
PUBLIC	?_Init@ios_base@std@@IAEXXZ			; std::ios_base::_Init
; Function compile flags: /Ogtpy
;	COMDAT ?_Init@ios_base@std@@IAEXXZ
_TEXT	SEGMENT
__Lock$177279 = -4					; size = 4
?_Init@ios_base@std@@IAEXXZ PROC			; std::ios_base::_Init, COMDAT
; _this$ = ecx

; 515  :         {	// initialize a new ios_base

  00000	51		 push	 ecx
  00001	55		 push	 ebp

; 516  :         _Ploc = 0;

  00002	33 ed		 xor	 ebp, ebp
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 517  :         _Stdstr = 0;
; 518  :         _Except = goodbit;
; 519  :         _Fmtfl = skipws | dec;
; 520  :         _Prec = 6;
; 521  :         _Wide = 0;
; 522  :         _Arr = 0;
; 523  :         _Calls = 0;
; 524  :         clear(goodbit);

  00008	55		 push	 ebp
  00009	55		 push	 ebp
  0000a	89 6e 24	 mov	 DWORD PTR [esi+36], ebp
  0000d	89 6e 04	 mov	 DWORD PTR [esi+4], ebp
  00010	89 6e 0c	 mov	 DWORD PTR [esi+12], ebp
  00013	c7 46 10 01 02
	00 00		 mov	 DWORD PTR [esi+16], 513	; 00000201H
  0001a	c7 46 14 06 00
	00 00		 mov	 DWORD PTR [esi+20], 6
  00021	89 6e 18	 mov	 DWORD PTR [esi+24], ebp
  00024	89 6e 1c	 mov	 DWORD PTR [esi+28], ebp
  00027	89 6e 20	 mov	 DWORD PTR [esi+32], ebp
  0002a	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 525  :         _Ploc = _NEW_CRT locale;

  0002f	6a 04		 push	 4
  00031	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00036	8b f8		 mov	 edi, eax
  00038	83 c4 04	 add	 esp, 4
  0003b	3b fd		 cmp	 edi, ebp
  0003d	74 37		 je	 SHORT $LN3@Init@4
  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Init
  00045	89 07		 mov	 DWORD PTR [edi], eax
  00047	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0004c	55		 push	 ebp
  0004d	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$177279[esp+24]
  00051	8b d8		 mov	 ebx, eax
  00053	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00058	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0005b	83 f8 ff	 cmp	 eax, -1
  0005e	73 04		 jae	 SHORT $LN9@Init@4
  00060	40		 inc	 eax
  00061	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN9@Init@4:
  00064	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$177279[esp+20]
  00068	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0006d	5b		 pop	 ebx
  0006e	89 7e 24	 mov	 DWORD PTR [esi+36], edi
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5d		 pop	 ebp

; 526  :         }

  00074	59		 pop	 ecx
  00075	c3		 ret	 0
$LN3@Init@4:
  00076	5f		 pop	 edi

; 525  :         _Ploc = _NEW_CRT locale;

  00077	89 6e 24	 mov	 DWORD PTR [esi+36], ebp
  0007a	5e		 pop	 esi
  0007b	5d		 pop	 ebp

; 526  :         }

  0007c	59		 pop	 ecx
  0007d	c3		 ret	 0
?_Init@ios_base@std@@IAEXXZ ENDP			; std::ios_base::_Init
_TEXT	ENDS
PUBLIC	_hwnd$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z ; FitPathInGfxWidth
EXTRN	__imp__DrawTextA@20:PROC
EXTRN	_strcpy_s:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z$0
__ehfuncinfo$?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
xdata$x	ENDS
;	COMDAT ?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z
_TEXT	SEGMENT
_hwnd$GSCopy$ = -308					; size = 4
$T177286 = -304						; size = 4
_hdc$ = -300						; size = 4
_rect$ = -296						; size = 16
___$ReturnUdt$GSCopy$ = -280				; size = 4
_pathBuf$ = -276					; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_hwnd$ = 12						; size = 4
_hFont$ = 16						; size = 4
_width$ = 20						; size = 4
_path$ = 24						; size = 4
?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z PROC ; FitPathInGfxWidth, COMDAT

; 477  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 24 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+308], eax
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c4		 xor	 eax, esp
  0002d	50		 push	 eax
  0002e	8d 84 24 3c 01
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+328]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	8b b4 24 4c 01
	00 00		 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+324]
  00042	8b 84 24 50 01
	00 00		 mov	 eax, DWORD PTR _hwnd$[esp+324]
  00049	8b ac 24 54 01
	00 00		 mov	 ebp, DWORD PTR _hFont$[esp+324]
  00050	8b bc 24 5c 01
	00 00		 mov	 edi, DWORD PTR _path$[esp+324]
  00057	33 db		 xor	 ebx, ebx
  00059	89 5c 24 18	 mov	 DWORD PTR $T177286[esp+328], ebx

; 478  : 	string newPath;

  0005d	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00064	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00067	89 74 24 30	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+328], esi

; 479  : 
; 480  : 	RECT rect;
; 481  : 	rect.left = 0;
; 482  : 	rect.top = 0;
; 483  : 	rect.right = width;
; 484  : 	rect.bottom = LONG_MAX;
; 485  : 
; 486  : 	HDC hdc = GetDC (hwnd); 

  0006b	89 44 24 14	 mov	 DWORD PTR _hwnd$GSCopy$[esp+328], eax
  0006f	88 5e 04	 mov	 BYTE PTR [esi+4], bl

; 496  : 	return newPath;

  00072	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR _width$[esp+324]
  00079	50		 push	 eax
  0007a	89 9c 24 48 01
	00 00		 mov	 DWORD PTR __$EHRec$[esp+340], ebx
  00081	c7 44 24 1c 01
	00 00 00	 mov	 DWORD PTR $T177286[esp+332], 1
  00089	89 5c 24 24	 mov	 DWORD PTR _rect$[esp+332], ebx
  0008d	89 5c 24 28	 mov	 DWORD PTR _rect$[esp+336], ebx
  00091	89 4c 24 2c	 mov	 DWORD PTR _rect$[esp+340], ecx
  00095	c7 44 24 30 ff
	ff ff 7f	 mov	 DWORD PTR _rect$[esp+344], 2147483647 ; 7fffffffH
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  000a3	55		 push	 ebp
  000a4	50		 push	 eax
  000a5	89 44 24 24	 mov	 DWORD PTR _hdc$[esp+336], eax
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  000af	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000b3	72 05		 jb	 SHORT $LN42@FitPathInG

; 487  : 	SelectObject (hdc, (HGDIOBJ) hFont);
; 488  : 
; 489  : 	char pathBuf[TC_MAX_PATH];
; 490  : 	strcpy_s (pathBuf, sizeof (pathBuf), path.c_str());

  000b5	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000b8	eb 03		 jmp	 SHORT $LN43@FitPathInG
$LN42@FitPathInG:
  000ba	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN43@FitPathInG:
  000bd	50		 push	 eax
  000be	8d 54 24 38	 lea	 edx, DWORD PTR _pathBuf$[esp+332]
  000c2	68 04 01 00 00	 push	 260			; 00000104H
  000c7	52		 push	 edx
  000c8	e8 00 00 00 00	 call	 _strcpy_s

; 491  : 
; 492  : 	if (DrawText (hdc, pathBuf, path.size(), &rect, DT_CALCRECT | DT_MODIFYSTRING | DT_PATH_ELLIPSIS | DT_SINGLELINE) != 0)

  000cd	8b 7f 14	 mov	 edi, DWORD PTR [edi+20]
  000d0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d3	68 20 44 01 00	 push	 82976			; 00014420H
  000d8	8d 44 24 24	 lea	 eax, DWORD PTR _rect$[esp+332]
  000dc	50		 push	 eax
  000dd	57		 push	 edi
  000de	8b 7c 24 28	 mov	 edi, DWORD PTR _hdc$[esp+340]
  000e2	8d 4c 24 40	 lea	 ecx, DWORD PTR _pathBuf$[esp+340]
  000e6	51		 push	 ecx
  000e7	57		 push	 edi
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawTextA@20
  000ee	85 c0		 test	 eax, eax
  000f0	74 24		 je	 SHORT $LN46@FitPathInG

; 493  : 		newPath = pathBuf;

  000f2	8d 44 24 34	 lea	 eax, DWORD PTR _pathBuf$[esp+328]
  000f6	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  000f9	8d a4 24 00 00
	00 00		 npad	 7
$LL52@FitPathInG:
  00100	8a 08		 mov	 cl, BYTE PTR [eax]
  00102	40		 inc	 eax
  00103	3a cb		 cmp	 cl, bl
  00105	75 f9		 jne	 SHORT $LL52@FitPathInG
  00107	2b c2		 sub	 eax, edx
  00109	50		 push	 eax
  0010a	8d 54 24 38	 lea	 edx, DWORD PTR _pathBuf$[esp+332]
  0010e	52		 push	 edx
  0010f	8b ce		 mov	 ecx, esi
  00111	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN46@FitPathInG:

; 494  : 
; 495  : 	ReleaseDC (hwnd, hdc); 

  00116	8b 44 24 14	 mov	 eax, DWORD PTR _hwnd$GSCopy$[esp+328]
  0011a	57		 push	 edi
  0011b	50		 push	 eax
  0011c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8

; 496  : 	return newPath;

  00122	8b c6		 mov	 eax, esi

; 497  : }

  00124	8b 8c 24 3c 01
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+328]
  0012b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00132	59		 pop	 ecx
  00133	5f		 pop	 edi
  00134	5e		 pop	 esi
  00135	5d		 pop	 ebp
  00136	5b		 pop	 ebx
  00137	8b 8c 24 24 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+308]
  0013e	33 cc		 xor	 ecx, esp
  00140	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00145	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  0014b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z$0:
  00000	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR $T177286[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 12 00 00
	00		 je	 $LN5@FitPathInG
  0000f	83 a5 d0 fe ff
	ff fe		 and	 DWORD PTR $T177286[ebp], -2 ; fffffffeH
  00016	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@FitPathInG:
  00021	c3		 ret	 0
__ehhandler$?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z:
  00022	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00026	8d 82 c8 fe ff
	ff		 lea	 eax, DWORD PTR [edx-312]
  0002c	8b 8a c4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-316]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	83 c0 10	 add	 eax, 16			; 00000010H
  0003c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003f	33 c8		 xor	 ecx, eax
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z
  0004b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z ENDP ; FitPathInGfxWidth
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	??_C@_02NJNOFBBI@?$CFx?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; GetUserFriendlyVersionString
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJNOFBBI@?$CFx?$AA@
CONST	SEGMENT
??_C@_02NJNOFBBI@?$CFx?$AA@ DB '%x', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$0
__ehfuncinfo$?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
xdata$x	ENDS
;	COMDAT ?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
_TEXT	SEGMENT
$T177467 = -88						; size = 4
___$ReturnUdt$GSCopy$ = -84				; size = 4
_szTmp$ = -80						; size = 64
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_version$ = 12						; size = 4
?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z PROC ; GetUserFriendlyVersionString, COMDAT

; 3742 : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+88], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 44 24 60	 lea	 eax, DWORD PTR __$EHRec$[esp+108]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 3743 : 	char szTmp [64];
; 3744 : 	snprintf (szTmp, sizeof(szTmp), "%x", version);

  00032	8b 7c 24 74	 mov	 edi, DWORD PTR _version$[esp+104]
  00036	8b 74 24 70	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+104]
  0003a	57		 push	 edi
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_02NJNOFBBI@?$CFx?$AA@
  00040	8d 44 24 24	 lea	 eax, DWORD PTR _szTmp$[esp+116]
  00044	33 db		 xor	 ebx, ebx
  00046	6a 40		 push	 64			; 00000040H
  00048	50		 push	 eax
  00049	89 5c 24 78	 mov	 DWORD PTR __$EHRec$[esp+132], ebx
  0004d	89 74 24 28	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+124], esi
  00051	89 5c 24 24	 mov	 DWORD PTR $T177467[esp+124], ebx
  00055	e8 00 00 00 00	 call	 _sprintf_s

; 3745 : 
; 3746 : 	string versionString (szTmp);

  0005a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0005d	8d 44 24 2c	 lea	 eax, DWORD PTR _szTmp$[esp+124]
  00061	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00068	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	88 5d 00	 mov	 BYTE PTR [ebp], bl
  00071	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL60@GetUserFri:
  00074	8a 08		 mov	 cl, BYTE PTR [eax]
  00076	40		 inc	 eax
  00077	3a cb		 cmp	 cl, bl
  00079	75 f9		 jne	 SHORT $LL60@GetUserFri
  0007b	2b c2		 sub	 eax, edx
  0007d	50		 push	 eax
  0007e	8d 4c 24 20	 lea	 ecx, DWORD PTR _szTmp$[esp+112]
  00082	51		 push	 ecx
  00083	8b ce		 mov	 ecx, esi
  00085	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 3752 : 
; 3753 : 	return (versionString);

  0008a	33 d2		 xor	 edx, edx
  0008c	81 ff ff 0f 00
	00		 cmp	 edi, 4095		; 00000fffH
  00092	0f 9f c2	 setg	 dl
  00095	6a 01		 push	 1
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_01LFCBOECM@?4?$AA@
  0009c	8b ce		 mov	 ecx, esi
  0009e	89 5c 24 70	 mov	 DWORD PTR __$EHRec$[esp+124], ebx
  000a2	c7 44 24 1c 01
	00 00 00	 mov	 DWORD PTR $T177467[esp+116], 1
  000aa	42		 inc	 edx
  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
  000b1	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000b4	8d 78 ff	 lea	 edi, DWORD PTR [eax-1]
  000b7	3b f8		 cmp	 edi, eax
  000b9	76 05		 jbe	 SHORT $LN50@GetUserFri

; 3747 : 
; 3748 : 	versionString.insert (version > 0xfff ? 2 : 1,".");
; 3749 : 
; 3750 : 	if (versionString[versionString.length()-1] == '0')

  000bb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN50@GetUserFri:
  000c0	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c4	72 03		 jb	 SHORT $LN56@GetUserFri
  000c6	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN56@GetUserFri:
  000c9	80 3c 2f 30	 cmp	 BYTE PTR [edi+ebp], 48	; 00000030H
  000cd	75 0e		 jne	 SHORT $LN61@GetUserFri

; 3751 : 		versionString.erase (versionString.length()-1, 1); 

  000cf	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000d2	6a 01		 push	 1
  000d4	48		 dec	 eax
  000d5	50		 push	 eax
  000d6	8b ce		 mov	 ecx, esi
  000d8	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
$LN61@GetUserFri:

; 3752 : 
; 3753 : 	return (versionString);

  000dd	8b c6		 mov	 eax, esi

; 3754 : }

  000df	8b 4c 24 60	 mov	 ecx, DWORD PTR __$EHRec$[esp+108]
  000e3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ea	59		 pop	 ecx
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	5d		 pop	 ebp
  000ee	5b		 pop	 ebx
  000ef	8b 4c 24 48	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+88]
  000f3	33 cc		 xor	 ecx, esp
  000f5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fa	83 c4 58	 add	 esp, 88			; 00000058H
  000fd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$0:
  00000	8b 45 a8	 mov	 eax, DWORD PTR $T177467[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@GetUserFri
  0000c	83 65 a8 fe	 and	 DWORD PTR $T177467[ebp], -2 ; fffffffeH
  00010	8b 4d ac	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@GetUserFri:
  00018	c3		 ret	 0
__ehhandler$?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 a4	 lea	 eax, DWORD PTR [edx-92]
  00020	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	83 c0 10	 add	 eax, 16			; 00000010H
  0002d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ENDP ; GetUserFriendlyVersionString
PUBLIC	??_C@_0BJ@FNCHKEAA@GetSystemWow64DirectoryA?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; GetServiceConfigPath
EXTRN	_Is64BitOs:PROC
;	COMDAT ??_C@_0BJ@FNCHKEAA@GetSystemWow64DirectoryA?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0BJ@FNCHKEAA@GetSystemWow64DirectoryA?$AA@ DB 'GetSystemWow64Direct'
	DB	'oryA', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$1
__ehfuncinfo$?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
xdata$x	ENDS
;	COMDAT ?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
_TEXT	SEGMENT
$T177659 = -336						; size = 28
$T177664 = -308						; size = 4
$T177660 = -304						; size = 28
_sysPath$ = -276					; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_fileName$ = 12						; size = 4
?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z PROC ; GetServiceConfigPath, COMDAT

; 7030 : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 40 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+336], eax
  00022	53		 push	 ebx
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c4		 xor	 eax, esp
  0002c	50		 push	 eax
  0002d	8d 84 24 54 01
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+352]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	8b b4 24 64 01
	00 00		 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+348]
  00041	8b bc 24 68 01
	00 00		 mov	 edi, DWORD PTR _fileName$[esp+348]
  00048	33 db		 xor	 ebx, ebx
  0004a	89 5c 24 2c	 mov	 DWORD PTR $T177664[esp+352], ebx

; 7031 : 	char sysPath[TC_MAX_PATH];
; 7032 : 	
; 7033 : 	if (Is64BitOs())

  0004e	e8 00 00 00 00	 call	 _Is64BitOs
  00053	85 c0		 test	 eax, eax
  00055	74 25		 je	 SHORT $LN2@GetService

; 7034 : 	{
; 7035 : 		typedef UINT (WINAPI *GetSystemWow64Directory_t) (LPTSTR lpBuffer, UINT uSize);
; 7036 : 
; 7037 : 		GetSystemWow64Directory_t getSystemWow64Directory = (GetSystemWow64Directory_t) GetProcAddress (GetModuleHandle ("kernel32"), "GetSystemWow64DirectoryA");

  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@FNCHKEAA@GetSystemWow64DirectoryA?$AA@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_08PNLNEKOB@kernel32?$AA@
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4
  00067	50		 push	 eax
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8

; 7038 : 		getSystemWow64Directory (sysPath, sizeof (sysPath));

  0006e	68 04 01 00 00	 push	 260			; 00000104H
  00073	8d 4c 24 50	 lea	 ecx, DWORD PTR _sysPath$[esp+356]
  00077	51		 push	 ecx
  00078	ff d0		 call	 eax

; 7039 : 	}
; 7040 : 	else

  0007a	eb 10		 jmp	 SHORT $LN1@GetService
$LN2@GetService:

; 7041 : 		GetSystemDirectory (sysPath, sizeof (sysPath));

  0007c	68 04 01 00 00	 push	 260			; 00000104H
  00081	8d 54 24 50	 lea	 edx, DWORD PTR _sysPath$[esp+356]
  00085	52		 push	 edx
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemDirectoryA@8
$LN1@GetService:

; 7042 : 
; 7043 : 	return string (sysPath) + "\\" + fileName;

  0008c	8d 44 24 4c	 lea	 eax, DWORD PTR _sysPath$[esp+352]
  00090	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T177659[esp+376], 15 ; 0000000fH
  00098	89 5c 24 24	 mov	 DWORD PTR $T177659[esp+372], ebx
  0009c	88 5c 24 14	 mov	 BYTE PTR $T177659[esp+356], bl
  000a0	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL97@GetService:
  000a3	8a 08		 mov	 cl, BYTE PTR [eax]
  000a5	40		 inc	 eax
  000a6	3a cb		 cmp	 cl, bl
  000a8	75 f9		 jne	 SHORT $LL97@GetService
  000aa	2b c2		 sub	 eax, edx
  000ac	50		 push	 eax
  000ad	8d 44 24 50	 lea	 eax, DWORD PTR _sysPath$[esp+356]
  000b1	50		 push	 eax
  000b2	8d 4c 24 18	 lea	 ecx, DWORD PTR $T177659[esp+360]
  000b6	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_01KICIPPFI@?2?$AA@
  000c0	8d 4c 24 14	 lea	 ecx, DWORD PTR $T177659[esp+356]
  000c4	51		 push	 ecx
  000c5	8d 54 24 38	 lea	 edx, DWORD PTR $T177660[esp+360]
  000c9	52		 push	 edx
  000ca	89 9c 24 68 01
	00 00		 mov	 DWORD PTR __$EHRec$[esp+372], ebx
  000d1	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000d6	57		 push	 edi
  000d7	50		 push	 eax
  000d8	56		 push	 esi
  000d9	c6 84 24 74 01
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+384], 1
  000e1	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000e6	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  000eb	83 c4 18	 add	 esp, 24			; 00000018H
  000ee	39 7c 24 48	 cmp	 DWORD PTR $T177660[esp+376], edi
  000f2	72 0d		 jb	 SHORT $LN61@GetService
  000f4	8b 44 24 34	 mov	 eax, DWORD PTR $T177660[esp+356]
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000fe	83 c4 04	 add	 esp, 4
$LN61@GetService:
  00101	c7 44 24 48 0f
	00 00 00	 mov	 DWORD PTR $T177660[esp+376], 15 ; 0000000fH
  00109	89 5c 24 44	 mov	 DWORD PTR $T177660[esp+372], ebx
  0010d	88 5c 24 34	 mov	 BYTE PTR $T177660[esp+356], bl
  00111	39 7c 24 28	 cmp	 DWORD PTR $T177659[esp+376], edi
  00115	72 0d		 jb	 SHORT $LN98@GetService
  00117	8b 4c 24 14	 mov	 ecx, DWORD PTR $T177659[esp+356]
  0011b	51		 push	 ecx
  0011c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00121	83 c4 04	 add	 esp, 4
$LN98@GetService:
  00124	8b c6		 mov	 eax, esi

; 7044 : }

  00126	8b 8c 24 54 01
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+352]
  0012d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00134	59		 pop	 ecx
  00135	5f		 pop	 edi
  00136	5e		 pop	 esi
  00137	5b		 pop	 ebx
  00138	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+336]
  0013f	33 cc		 xor	 ecx, esp
  00141	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00146	81 c4 50 01 00
	00		 add	 esp, 336		; 00000150H
  0014c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$0:
  00000	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR $T177659[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$1:
  0000b	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T177660[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 82 b0 fe ff
	ff		 lea	 eax, DWORD PTR [edx-336]
  00020	8b 8a ac fe ff
	ff		 mov	 ecx, DWORD PTR [edx-340]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	83 c0 0c	 add	 eax, 12			; 0000000cH
  00030	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ENDP ; GetServiceConfigPath
PUBLIC	??_C@_0BA@OFMBGJKB@X?3?2pagefile?4sys?$AA@	; `string'
PUBLIC	??_C@_06EFIGOLMA@?2?2?4?2X?3?$AA@		; `string'
PUBLIC	??_C@_0P@NDJDHMAP@UAC_INIT_ERROR?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_IsPagingFileActive
;	COMDAT ??_C@_0BA@OFMBGJKB@X?3?2pagefile?4sys?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0BA@OFMBGJKB@X?3?2pagefile?4sys?$AA@ DB 'X:\pagefile.sys', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EFIGOLMA@?2?2?4?2X?3?$AA@
CONST	SEGMENT
??_C@_06EFIGOLMA@?2?2?4?2X?3?$AA@ DB '\\.\X:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NDJDHMAP@UAC_INIT_ERROR?$AA@
CONST	SEGMENT
??_C@_0P@NDJDHMAP@UAC_INIT_ERROR?$AA@ DB 'UAC_INIT_ERROR', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
CONST	ENDS
;	COMDAT _IsPagingFileActive
_TEXT	SEGMENT
_drive$143037 = -65889					; size = 1
_size$ = -65888						; size = 4
_dwResult$143051 = -65884				; size = 4
_driveInfo$143050 = -65880				; size = 24
_drivePath$143041 = -65856				; size = 28
_path$143053 = -65828					; size = 28
_sysDir$143044 = -65800					; size = 260
_data$ = -65540						; size = 65536
__$ArrayPad$ = -4					; size = 4
_checkNonWindowsPartitionsOnly$ = 8			; size = 4
_IsPagingFileActive PROC				; COMDAT

; 7848 : {

  00000	b8 64 01 01 00	 mov	 eax, 65892		; 00010164H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 60 01
	01 00		 mov	 DWORD PTR __$ArrayPad$[esp+65892], eax

; 7849 : 	// GlobalMemoryStatusEx() cannot be used to determine if a paging file is active
; 7850 : 
; 7851 : 	char data[65536];
; 7852 : 	DWORD size = sizeof (data);

  00018	c7 44 24 04 00
	00 01 00	 mov	 DWORD PTR _size$[esp+65892], 65536 ; 00010000H

; 7853 : 	
; 7854 : 	if (IsPagingFileWildcardActive())

  00020	e8 00 00 00 00	 call	 _IsPagingFileWildcardActive
  00025	85 c0		 test	 eax, eax
  00027	74 1a		 je	 SHORT $LN13@IsPagingFi@2

; 7855 : 		return TRUE;

  00029	b8 01 00 00 00	 mov	 eax, 1

; 7906 : }

  0002e	8b 8c 24 60 01
	01 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+65892]
  00035	33 cc		 xor	 ecx, esp
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	81 c4 64 01 01
	00		 add	 esp, 65892		; 00010164H
  00042	c3		 ret	 0
$LN13@IsPagingFi@2:
  00043	53		 push	 ebx

; 7856 : 
; 7857 : 	if (ReadLocalMachineRegistryMultiString ("System\\CurrentControlSet\\Control\\Session Manager\\Memory Management", "PagingFiles", data, &size)
; 7858 : 		&& size > 12 && !checkNonWindowsPartitionsOnly)

  00044	8d 44 24 08	 lea	 eax, DWORD PTR _size$[esp+65896]
  00048	50		 push	 eax
  00049	8d 8c 24 68 01
	00 00		 lea	 ecx, DWORD PTR _data$[esp+65900]
  00050	51		 push	 ecx
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BHFNFFHI@PagingFiles?$AA@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@FMLJHJOD@System?2CurrentControlSet?2Control@
  0005b	e8 00 00 00 00	 call	 _ReadLocalMachineRegistryMultiString
  00060	83 c4 10	 add	 esp, 16			; 00000010H
  00063	33 db		 xor	 ebx, ebx
  00065	85 c0		 test	 eax, eax
  00067	74 29		 je	 SHORT $LN253@IsPagingFi@2
  00069	83 7c 24 08 0c	 cmp	 DWORD PTR _size$[esp+65896], 12 ; 0000000cH
  0006e	76 22		 jbe	 SHORT $LN253@IsPagingFi@2
  00070	39 9c 24 6c 01
	01 00		 cmp	 DWORD PTR _checkNonWindowsPartitionsOnly$[esp+65892], ebx
  00077	75 19		 jne	 SHORT $LN253@IsPagingFi@2

; 7859 : 		return TRUE;

  00079	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0007c	5b		 pop	 ebx

; 7906 : }

  0007d	8b 8c 24 60 01
	01 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+65892]
  00084	33 cc		 xor	 ecx, esp
  00086	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008b	81 c4 64 01 01
	00		 add	 esp, 65892		; 00010164H
  00091	c3		 ret	 0
$LN253@IsPagingFi@2:

; 7860 : 
; 7861 : 	if (!IsAdmin())

  00092	e8 00 00 00 00	 call	 _IsAdmin
  00097	85 c0		 test	 eax, eax
  00099	75 0a		 jne	 SHORT $LN11@IsPagingFi@2

; 7862 : 		AbortProcess ("UAC_INIT_ERROR");

  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NDJDHMAP@UAC_INIT_ERROR?$AA@
  000a0	e8 00 00 00 00	 call	 _AbortProcess
$LN11@IsPagingFi@2:
  000a5	55		 push	 ebp
  000a6	57		 push	 edi

; 7863 : 
; 7864 : 	for (char drive = 'C'; drive <= 'Z'; ++drive)

  000a7	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__CreateFileA@28
  000ad	c6 44 24 0f 43	 mov	 BYTE PTR _drive$143037[esp+65904], 67 ; 00000043H
  000b2	bd 10 00 00 00	 mov	 ebp, 16			; 00000010H
  000b7	56		 push	 esi
  000b8	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL10@IsPagingFi@2:

; 7865 : 	{
; 7866 : 		// Query geometry of the drive first to prevent "no medium" pop-ups
; 7867 : 		string drivePath = "\\\\.\\X:";

  000c0	6a 06		 push	 6
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_06EFIGOLMA@?2?2?4?2X?3?$AA@
  000c7	8d 4c 24 3c	 lea	 ecx, DWORD PTR _drivePath$143041[esp+65916]
  000cb	c7 44 24 54 0f
	00 00 00	 mov	 DWORD PTR _drivePath$143041[esp+65940], 15 ; 0000000fH
  000d3	89 5c 24 50	 mov	 DWORD PTR _drivePath$143041[esp+65936], ebx
  000d7	88 5c 24 40	 mov	 BYTE PTR _drivePath$143041[esp+65920], bl
  000db	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 7868 : 		drivePath[4] = drive;

  000e0	83 7c 24 48 04	 cmp	 DWORD PTR _drivePath$143041[esp+65928], 4
  000e5	73 05		 jae	 SHORT $LN54@IsPagingFi@2
  000e7	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN54@IsPagingFi@2:
  000ec	8b 44 24 38	 mov	 eax, DWORD PTR _drivePath$143041[esp+65912]
  000f0	39 6c 24 4c	 cmp	 DWORD PTR _drivePath$143041[esp+65932], ebp
  000f4	73 04		 jae	 SHORT $LN61@IsPagingFi@2
  000f6	8d 44 24 38	 lea	 eax, DWORD PTR _drivePath$143041[esp+65912]
$LN61@IsPagingFi@2:
  000fa	8a 54 24 13	 mov	 dl, BYTE PTR _drive$143037[esp+65908]
  000fe	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 7869 : 
; 7870 : 		if (checkNonWindowsPartitionsOnly)

  00101	39 9c 24 78 01
	01 00		 cmp	 DWORD PTR _checkNonWindowsPartitionsOnly$[esp+65904], ebx
  00108	74 3f		 je	 SHORT $LN6@IsPagingFi@2

; 7871 : 		{
; 7872 : 			char sysDir[MAX_PATH];
; 7873 : 			if (GetSystemDirectory (sysDir, sizeof (sysDir)) != 0 && toupper (sysDir[0]) == drive)

  0010a	68 04 01 00 00	 push	 260			; 00000104H
  0010f	8d 44 24 70	 lea	 eax, DWORD PTR _sysDir$143044[esp+65912]
  00113	50		 push	 eax
  00114	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemDirectoryA@8
  0011a	85 c0		 test	 eax, eax
  0011c	74 2b		 je	 SHORT $LN6@IsPagingFi@2
  0011e	0f be 4c 24 6c	 movsx	 ecx, BYTE PTR _sysDir$143044[esp+65908]
  00123	51		 push	 ecx
  00124	e8 00 00 00 00	 call	 _toupper
  00129	0f be 54 24 17	 movsx	 edx, BYTE PTR _drive$143037[esp+65912]
  0012e	83 c4 04	 add	 esp, 4
  00131	3b c2		 cmp	 eax, edx
  00133	75 14		 jne	 SHORT $LN6@IsPagingFi@2

; 7874 : 				continue;

  00135	39 6c 24 4c	 cmp	 DWORD PTR _drivePath$143041[esp+65932], ebp
  00139	0f 82 01 01 00
	00		 jb	 $LN9@IsPagingFi@2
  0013f	8b 44 24 38	 mov	 eax, DWORD PTR _drivePath$143041[esp+65912]
  00143	50		 push	 eax
  00144	e9 ef 00 00 00	 jmp	 $LN260@IsPagingFi@2
$LN6@IsPagingFi@2:

; 7875 : 		}
; 7876 : 
; 7877 : 		HANDLE handle = CreateFile (drivePath.c_str(), GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00149	8b 44 24 38	 mov	 eax, DWORD PTR _drivePath$143041[esp+65912]
  0014d	39 6c 24 4c	 cmp	 DWORD PTR _drivePath$143041[esp+65932], ebp
  00151	73 04		 jae	 SHORT $LN93@IsPagingFi@2
  00153	8d 44 24 38	 lea	 eax, DWORD PTR _drivePath$143041[esp+65912]
$LN93@IsPagingFi@2:
  00157	53		 push	 ebx
  00158	53		 push	 ebx
  00159	6a 03		 push	 3
  0015b	53		 push	 ebx
  0015c	6a 03		 push	 3
  0015e	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00163	50		 push	 eax
  00164	ff d7		 call	 edi
  00166	8b f0		 mov	 esi, eax

; 7878 : 		
; 7879 : 		if (handle == INVALID_HANDLE_VALUE)

  00168	83 fe ff	 cmp	 esi, -1

; 7880 : 			continue;

  0016b	0f 84 bc 00 00
	00		 je	 $LN262@IsPagingFi@2

; 7881 : 
; 7882 : 		DISK_GEOMETRY driveInfo;
; 7883 : 		DWORD dwResult;
; 7884 : 
; 7885 : 		if (!DeviceIoControl (handle, IOCTL_DISK_GET_DRIVE_GEOMETRY, NULL, 0, &driveInfo, sizeof (driveInfo), &dwResult, NULL))

  00171	53		 push	 ebx
  00172	8d 54 24 1c	 lea	 edx, DWORD PTR _dwResult$143051[esp+65912]
  00176	52		 push	 edx
  00177	6a 18		 push	 24			; 00000018H
  00179	8d 44 24 28	 lea	 eax, DWORD PTR _driveInfo$143050[esp+65920]
  0017d	50		 push	 eax
  0017e	53		 push	 ebx
  0017f	53		 push	 ebx
  00180	68 00 00 07 00	 push	 458752			; 00070000H
  00185	56		 push	 esi
  00186	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 7886 : 		{
; 7887 : 			CloseHandle (handle);

  0018c	56		 push	 esi
  0018d	85 c0		 test	 eax, eax
  0018f	75 0b		 jne	 SHORT $LN4@IsPagingFi@2
  00191	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 7888 : 			continue;

  00197	e9 91 00 00 00	 jmp	 $LN262@IsPagingFi@2
$LN4@IsPagingFi@2:

; 7889 : 		}
; 7890 : 
; 7891 : 		CloseHandle (handle);

  0019c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__CloseHandle@4
  001a2	ff d6		 call	 esi

; 7892 : 
; 7893 : 		// Test if a paging file exists and is locked by another process
; 7894 : 		string path = "X:\\pagefile.sys";

  001a4	6a 0f		 push	 15			; 0000000fH
  001a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@OFMBGJKB@X?3?2pagefile?4sys?$AA@
  001ab	8d 4c 24 58	 lea	 ecx, DWORD PTR _path$143053[esp+65916]
  001af	c7 44 24 70 0f
	00 00 00	 mov	 DWORD PTR _path$143053[esp+65940], 15 ; 0000000fH
  001b7	89 5c 24 6c	 mov	 DWORD PTR _path$143053[esp+65936], ebx
  001bb	88 5c 24 5c	 mov	 BYTE PTR _path$143053[esp+65920], bl
  001bf	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 7895 : 		path[0] = drive;

  001c4	8b 44 24 54	 mov	 eax, DWORD PTR _path$143053[esp+65912]
  001c8	39 6c 24 68	 cmp	 DWORD PTR _path$143053[esp+65932], ebp
  001cc	73 04		 jae	 SHORT $LN191@IsPagingFi@2
  001ce	8d 44 24 54	 lea	 eax, DWORD PTR _path$143053[esp+65912]
$LN191@IsPagingFi@2:
  001d2	8a 54 24 13	 mov	 dl, BYTE PTR _drive$143037[esp+65908]
  001d6	88 10		 mov	 BYTE PTR [eax], dl

; 7896 : 
; 7897 : 		handle = CreateFile (path.c_str(), GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);

  001d8	8b 44 24 54	 mov	 eax, DWORD PTR _path$143053[esp+65912]
  001dc	39 6c 24 68	 cmp	 DWORD PTR _path$143053[esp+65932], ebp
  001e0	73 04		 jae	 SHORT $LN197@IsPagingFi@2
  001e2	8d 44 24 54	 lea	 eax, DWORD PTR _path$143053[esp+65912]
$LN197@IsPagingFi@2:
  001e6	53		 push	 ebx
  001e7	53		 push	 ebx
  001e8	6a 03		 push	 3
  001ea	53		 push	 ebx
  001eb	6a 01		 push	 1
  001ed	68 00 00 00 80	 push	 -2147483648		; 80000000H
  001f2	50		 push	 eax
  001f3	ff d7		 call	 edi

; 7898 : 		
; 7899 : 		if (handle != INVALID_HANDLE_VALUE)

  001f5	83 f8 ff	 cmp	 eax, -1
  001f8	74 05		 je	 SHORT $LN3@IsPagingFi@2

; 7900 : 			CloseHandle (handle);

  001fa	50		 push	 eax
  001fb	ff d6		 call	 esi
  001fd	eb 0b		 jmp	 SHORT $LN1@IsPagingFi@2
$LN3@IsPagingFi@2:

; 7901 : 		else if (GetLastError() == ERROR_SHARING_VIOLATION)

  001ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00205	83 f8 20	 cmp	 eax, 32			; 00000020H
  00208	74 63		 je	 SHORT $LN251@IsPagingFi@2
$LN1@IsPagingFi@2:

; 7903 : 	}

  0020a	39 6c 24 68	 cmp	 DWORD PTR _path$143053[esp+65932], ebp
  0020e	72 0d		 jb	 SHORT $LN214@IsPagingFi@2
  00210	8b 44 24 54	 mov	 eax, DWORD PTR _path$143053[esp+65912]
  00214	50		 push	 eax
  00215	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0021a	83 c4 04	 add	 esp, 4
$LN214@IsPagingFi@2:
  0021d	c7 44 24 68 0f
	00 00 00	 mov	 DWORD PTR _path$143053[esp+65932], 15 ; 0000000fH
  00225	89 5c 24 64	 mov	 DWORD PTR _path$143053[esp+65928], ebx
  00229	88 5c 24 54	 mov	 BYTE PTR _path$143053[esp+65912], bl
$LN262@IsPagingFi@2:
  0022d	39 6c 24 4c	 cmp	 DWORD PTR _drivePath$143041[esp+65932], ebp
  00231	72 0d		 jb	 SHORT $LN9@IsPagingFi@2
  00233	8b 4c 24 38	 mov	 ecx, DWORD PTR _drivePath$143041[esp+65912]
  00237	51		 push	 ecx
$LN260@IsPagingFi@2:
  00238	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0023d	83 c4 04	 add	 esp, 4
$LN9@IsPagingFi@2:
  00240	8a 44 24 13	 mov	 al, BYTE PTR _drive$143037[esp+65908]
  00244	fe c0		 inc	 al
  00246	3c 5a		 cmp	 al, 90			; 0000005aH
  00248	88 44 24 13	 mov	 BYTE PTR _drive$143037[esp+65908], al
  0024c	0f 8e 6e fe ff
	ff		 jle	 $LL10@IsPagingFi@2

; 7904 : 
; 7905 : 	return FALSE;

  00252	33 c0		 xor	 eax, eax
$LN258@IsPagingFi@2:

; 7906 : }

  00254	8b 8c 24 70 01
	01 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+65908]
  0025b	5e		 pop	 esi
  0025c	5f		 pop	 edi
  0025d	5d		 pop	 ebp
  0025e	5b		 pop	 ebx
  0025f	33 cc		 xor	 ecx, esp
  00261	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00266	81 c4 64 01 01
	00		 add	 esp, 65892		; 00010164H
  0026c	c3		 ret	 0
$LN251@IsPagingFi@2:

; 7902 : 			return TRUE;

  0026d	8d 4c 24 50	 lea	 ecx, DWORD PTR _path$143053[esp+65908]
  00271	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00276	8d 4c 24 34	 lea	 ecx, DWORD PTR _drivePath$143041[esp+65908]
  0027a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0027f	b8 01 00 00 00	 mov	 eax, 1
  00284	eb ce		 jmp	 SHORT $LN258@IsPagingFi@2
$LN259@IsPagingFi@2:
_IsPagingFileActive ENDP
_TEXT	ENDS
PUBLIC	??_C@_02EKJJMPLG@?$HN?2?$AA@			; `string'
PUBLIC	??_C@_0M@CJEJOKNC@?2?2?$DP?2Volume?$HL?$AA@	; `string'
PUBLIC	??_C@_08FALOLEII@?2DEVICE?2?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_VolumePathExists
EXTRN	__imp__QueryDosDeviceA@12:PROC
EXTRN	_UpperCaseCopy:PROC
;	COMDAT ??_C@_02EKJJMPLG@?$HN?2?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_02EKJJMPLG@?$HN?2?$AA@ DB '}\', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CJEJOKNC@?2?2?$DP?2Volume?$HL?$AA@
CONST	SEGMENT
??_C@_0M@CJEJOKNC@?2?2?$DP?2Volume?$HL?$AA@ DB '\\?\Volume{', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08FALOLEII@?2DEVICE?2?$AA@
CONST	SEGMENT
??_C@_08FALOLEII@?2DEVICE?2?$AA@ DB '\DEVICE\', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
CONST	ENDS
;	COMDAT _VolumePathExists
_TEXT	SEGMENT
$T178960 = -1116					; size = 28
_path$ = -1088						; size = 28
_openTest$ = -1060					; size = 536
_upperCasePath$ = -524					; size = 260
_devicePath$143404 = -264				; size = 260
__$ArrayPad$ = -4					; size = 4
_volumePath$ = 8					; size = 4
_VolumePathExists PROC					; COMDAT

; 8728 : {

  00000	81 ec 5c 04 00
	00		 sub	 esp, 1116		; 0000045cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 58 04
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+1116], eax
  00014	56		 push	 esi
  00015	8b b4 24 64 04
	00 00		 mov	 esi, DWORD PTR _volumePath$[esp+1116]

; 8729 : 	OPEN_TEST_STRUCT openTest;
; 8730 : 	char upperCasePath[TC_MAX_PATH];
; 8731 : 
; 8732 : 	UpperCaseCopy (upperCasePath, volumePath);

  0001c	8d 84 24 54 02
	00 00		 lea	 eax, DWORD PTR _upperCasePath$[esp+1120]
  00023	56		 push	 esi
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _UpperCaseCopy

; 8733 : 
; 8734 : 	if (strstr (upperCasePath, "\\DEVICE\\") == upperCasePath)

  0002a	8d 8c 24 5c 02
	00 00		 lea	 ecx, DWORD PTR _upperCasePath$[esp+1128]
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_08FALOLEII@?2DEVICE?2?$AA@
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 _strstr
  0003c	8d 94 24 64 02
	00 00		 lea	 edx, DWORD PTR _upperCasePath$[esp+1136]
  00043	83 c4 10	 add	 esp, 16			; 00000010H
  00046	3b c2		 cmp	 eax, edx
  00048	75 26		 jne	 SHORT $LN3@VolumePath

; 8735 : 		return OpenDevice (volumePath, &openTest, FALSE);

  0004a	6a 00		 push	 0
  0004c	8d 44 24 40	 lea	 eax, DWORD PTR _openTest$[esp+1124]
  00050	50		 push	 eax
  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 _OpenDevice
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	5e		 pop	 esi

; 8746 : }

  0005b	8b 8c 24 58 04
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1116]
  00062	33 cc		 xor	 ecx, esp
  00064	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00069	81 c4 5c 04 00
	00		 add	 esp, 1116		; 0000045cH
  0006f	c3		 ret	 0
$LN3@VolumePath:

; 8736 : 
; 8737 : 	string path = volumePath;

  00070	8b c6		 mov	 eax, esi
  00072	c7 44 24 38 0f
	00 00 00	 mov	 DWORD PTR _path$[esp+1144], 15 ; 0000000fH
  0007a	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR _path$[esp+1140], 0
  00082	c6 44 24 24 00	 mov	 BYTE PTR _path$[esp+1124], 0
  00087	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0008a	8d 9b 00 00 00
	00		 npad	 6
$LL114@VolumePath:
  00090	8a 08		 mov	 cl, BYTE PTR [eax]
  00092	40		 inc	 eax
  00093	84 c9		 test	 cl, cl
  00095	75 f9		 jne	 SHORT $LL114@VolumePath
  00097	2b c2		 sub	 eax, edx
  00099	50		 push	 eax
  0009a	56		 push	 esi
  0009b	8d 4c 24 28	 lea	 ecx, DWORD PTR _path$[esp+1128]
  0009f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 8738 : 	if (path.find ("\\\\?\\Volume{") == 0 && path.rfind ("}\\") == path.size() - 2)

  000a4	6a 0b		 push	 11			; 0000000bH
  000a6	6a 00		 push	 0
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CJEJOKNC@?2?2?$DP?2Volume?$HL?$AA@
  000ad	8d 4c 24 2c	 lea	 ecx, DWORD PTR _path$[esp+1132]
  000b1	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  000b6	85 c0		 test	 eax, eax
  000b8	0f 85 96 00 00
	00		 jne	 $LN1@VolumePath
  000be	6a 02		 push	 2
  000c0	6a ff		 push	 -1
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_02EKJJMPLG@?$HN?2?$AA@
  000c7	8d 4c 24 2c	 lea	 ecx, DWORD PTR _path$[esp+1132]
  000cb	e8 00 00 00 00	 call	 ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
  000d0	8b 4c 24 34	 mov	 ecx, DWORD PTR _path$[esp+1140]
  000d4	8d 51 fe	 lea	 edx, DWORD PTR [ecx-2]
  000d7	3b c2		 cmp	 eax, edx
  000d9	75 79		 jne	 SHORT $LN1@VolumePath

; 8739 : 	{
; 8740 : 		char devicePath[TC_MAX_PATH];
; 8741 : 		if (QueryDosDevice (path.substr (4, path.size() - 5).c_str(), devicePath, TC_MAX_PATH) != 0)

  000db	83 c1 fb	 add	 ecx, -5			; fffffffbH
  000de	51		 push	 ecx
  000df	6a 04		 push	 4
  000e1	8d 44 24 0c	 lea	 eax, DWORD PTR $T178960[esp+1128]
  000e5	50		 push	 eax
  000e6	8d 4c 24 2c	 lea	 ecx, DWORD PTR _path$[esp+1132]
  000ea	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  000ef	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  000f3	72 05		 jb	 SHORT $LN60@VolumePath
  000f5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000f8	eb 03		 jmp	 SHORT $LN61@VolumePath
$LN60@VolumePath:
  000fa	83 c0 04	 add	 eax, 4
$LN61@VolumePath:
  000fd	53		 push	 ebx
  000fe	68 04 01 00 00	 push	 260			; 00000104H
  00103	8d 8c 24 60 03
	00 00		 lea	 ecx, DWORD PTR _devicePath$143404[esp+1128]
  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__QueryDosDeviceA@12
  00112	85 c0		 test	 eax, eax
  00114	0f 95 c3	 setne	 bl
  00117	83 7c 24 20 10	 cmp	 DWORD PTR $T178960[esp+1148], 16 ; 00000010H
  0011c	72 0d		 jb	 SHORT $LN78@VolumePath
  0011e	8b 54 24 0c	 mov	 edx, DWORD PTR $T178960[esp+1128]
  00122	52		 push	 edx
  00123	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00128	83 c4 04	 add	 esp, 4
$LN78@VolumePath:
  0012b	84 db		 test	 bl, bl
  0012d	5b		 pop	 ebx
  0012e	74 24		 je	 SHORT $LN1@VolumePath

; 8742 : 			return TRUE;

  00130	8d 4c 24 20	 lea	 ecx, DWORD PTR _path$[esp+1120]
  00134	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00139	b8 01 00 00 00	 mov	 eax, 1
  0013e	5e		 pop	 esi

; 8746 : }

  0013f	8b 8c 24 58 04
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1116]
  00146	33 cc		 xor	 ecx, esp
  00148	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014d	81 c4 5c 04 00
	00		 add	 esp, 1116		; 0000045cH
  00153	c3		 ret	 0
$LN1@VolumePath:

; 8743 : 	}
; 8744 : 
; 8745 : 	return _access (volumePath, 0) == 0;

  00154	6a 00		 push	 0
  00156	56		 push	 esi
  00157	e8 00 00 00 00	 call	 __access
  0015c	83 c4 08	 add	 esp, 8
  0015f	8b f0		 mov	 esi, eax
  00161	f7 de		 neg	 esi
  00163	1b f6		 sbb	 esi, esi
  00165	46		 inc	 esi
  00166	83 7c 24 38 10	 cmp	 DWORD PTR _path$[esp+1144], 16 ; 00000010H
  0016b	72 0d		 jb	 SHORT $LN104@VolumePath
  0016d	8b 44 24 24	 mov	 eax, DWORD PTR _path$[esp+1124]
  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00177	83 c4 04	 add	 esp, 4
$LN104@VolumePath:

; 8746 : }

  0017a	8b 8c 24 5c 04
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1120]
  00181	8b c6		 mov	 eax, esi
  00183	5e		 pop	 esi
  00184	33 cc		 xor	 ecx, esp
  00186	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018b	81 c4 5c 04 00
	00		 add	 esp, 1116		; 0000045cH
  00191	c3		 ret	 0
_VolumePathExists ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@JJLAKNKG@isoburn?4exe?$AA@		; `string'
PUBLIC	_LaunchWindowsIsoBurner
EXTRN	__imp__SetLastError@4:PROC
;	COMDAT ??_C@_0M@JJLAKNKG@isoburn?4exe?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0M@JJLAKNKG@isoburn?4exe?$AA@ DB 'isoburn.exe', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
CONST	ENDS
;	COMDAT _LaunchWindowsIsoBurner
_TEXT	SEGMENT
$T179373 = -84						; size = 28
$T179375 = -56						; size = 28
$T179374 = -28						; size = 28
_hwnd$ = 8						; size = 4
_isoPath$ = 12						; size = 4
_LaunchWindowsIsoBurner PROC				; COMDAT

; 8770 : {

  00000	83 ec 54	 sub	 esp, 84			; 00000054H
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	57		 push	 edi

; 8771 : 	int r = (int) ShellExecute (hwnd, "open", ISO_BURNER_TOOL, (string ("\"") + isoPath + "\"").c_str(), NULL, SW_SHOWNORMAL);

  00007	6a 01		 push	 1
  00009	33 db		 xor	 ebx, ebx
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_01BJJEKLCA@?$CC?$AA@
  00010	8d 4c 24 18	 lea	 ecx, DWORD PTR $T179373[esp+108]
  00014	c7 44 24 30 0f
	00 00 00	 mov	 DWORD PTR $T179373[esp+132], 15 ; 0000000fH
  0001c	89 5c 24 2c	 mov	 DWORD PTR $T179373[esp+128], ebx
  00020	88 5c 24 1c	 mov	 BYTE PTR $T179373[esp+112], bl
  00024	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00029	8b 44 24 6c	 mov	 eax, DWORD PTR _isoPath$[esp+96]
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_01BJJEKLCA@?$CC?$AA@
  00032	50		 push	 eax
  00033	8d 4c 24 18	 lea	 ecx, DWORD PTR $T179373[esp+108]
  00037	51		 push	 ecx
  00038	8d 54 24 54	 lea	 edx, DWORD PTR $T179374[esp+112]
  0003c	52		 push	 edx
  0003d	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	50		 push	 eax
  00046	8d 44 24 34	 lea	 eax, DWORD PTR $T179375[esp+108]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00050	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
  00058	39 70 18	 cmp	 DWORD PTR [eax+24], esi
  0005b	72 05		 jb	 SHORT $LN44@LaunchWind
  0005d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00060	eb 03		 jmp	 SHORT $LN45@LaunchWind
$LN44@LaunchWind:
  00062	83 c0 04	 add	 eax, 4
$LN45@LaunchWind:
  00065	8b 6c 24 68	 mov	 ebp, DWORD PTR _hwnd$[esp+96]
  00069	6a 01		 push	 1
  0006b	53		 push	 ebx
  0006c	50		 push	 eax
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JJLAKNKG@isoburn?4exe?$AA@
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_04PMOCAHAA@open?$AA@
  00077	55		 push	 ebp
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24
  0007e	8b f8		 mov	 edi, eax
  00080	39 74 24 44	 cmp	 DWORD PTR $T179375[esp+124], esi
  00084	72 0d		 jb	 SHORT $LN62@LaunchWind
  00086	8b 4c 24 30	 mov	 ecx, DWORD PTR $T179375[esp+104]
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00090	83 c4 04	 add	 esp, 4
$LN62@LaunchWind:
  00093	c7 44 24 44 0f
	00 00 00	 mov	 DWORD PTR $T179375[esp+124], 15 ; 0000000fH
  0009b	89 5c 24 40	 mov	 DWORD PTR $T179375[esp+120], ebx
  0009f	88 5c 24 30	 mov	 BYTE PTR $T179375[esp+104], bl
  000a3	39 74 24 60	 cmp	 DWORD PTR $T179374[esp+124], esi
  000a7	72 0d		 jb	 SHORT $LN88@LaunchWind
  000a9	8b 54 24 4c	 mov	 edx, DWORD PTR $T179374[esp+104]
  000ad	52		 push	 edx
  000ae	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000b3	83 c4 04	 add	 esp, 4
$LN88@LaunchWind:
  000b6	c7 44 24 60 0f
	00 00 00	 mov	 DWORD PTR $T179374[esp+124], 15 ; 0000000fH
  000be	89 5c 24 5c	 mov	 DWORD PTR $T179374[esp+120], ebx
  000c2	88 5c 24 4c	 mov	 BYTE PTR $T179374[esp+104], bl
  000c6	39 74 24 28	 cmp	 DWORD PTR $T179373[esp+124], esi
  000ca	72 0d		 jb	 SHORT $LN114@LaunchWind
  000cc	8b 44 24 14	 mov	 eax, DWORD PTR $T179373[esp+104]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d6	83 c4 04	 add	 esp, 4
$LN114@LaunchWind:

; 8772 : 
; 8773 : 	if (r <= 32)

  000d9	83 ff 20	 cmp	 edi, 32			; 00000020H
  000dc	7f 1a		 jg	 SHORT $LN1@LaunchWind

; 8774 : 	{
; 8775 : 		SetLastError (r);

  000de	57		 push	 edi
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 8776 : 		handleWin32Error (hwnd);

  000e5	55		 push	 ebp
  000e6	e8 00 00 00 00	 call	 _handleWin32Error
  000eb	83 c4 04	 add	 esp, 4
  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	5d		 pop	 ebp

; 8777 : 
; 8778 : 		return FALSE;

  000f1	33 c0		 xor	 eax, eax
  000f3	5b		 pop	 ebx

; 8782 : }

  000f4	83 c4 54	 add	 esp, 84			; 00000054H
  000f7	c3		 ret	 0
$LN1@LaunchWind:
  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	5d		 pop	 ebp

; 8779 : 	}
; 8780 : 
; 8781 : 	return TRUE;

  000fb	b8 01 00 00 00	 mov	 eax, 1
  00100	5b		 pop	 ebx

; 8782 : }

  00101	83 c4 54	 add	 esp, 84			; 00000054H
  00104	c3		 ret	 0
_LaunchWindowsIsoBurner ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@MLHPPPJP@DisplayName?$AA@		; `string'
PUBLIC	??_C@_01HCONENDN@?$HL?$AA@			; `string'
PUBLIC	_appName$GSCopy$
PUBLIC	??_C@_0DE@HOJDGFDM@Software?2Microsoft?2Windows?2Curre@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_IsApplicationInstalled
EXTRN	_ReadLocalMachineRegistryStringNonReflected:PROC
EXTRN	__imp__RegEnumKeyExA@32:PROC
;	COMDAT ??_C@_0M@MLHPPPJP@DisplayName?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0M@MLHPPPJP@DisplayName?$AA@ DB 'DisplayName', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01HCONENDN@?$HL?$AA@
CONST	SEGMENT
??_C@_01HCONENDN@?$HL?$AA@ DB '{', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@HOJDGFDM@Software?2Microsoft?2Windows?2Curre@
CONST	SEGMENT
??_C@_0DE@HOJDGFDM@Software?2Microsoft?2Windows?2Curre@ DB 'Software\Micr'
	DB	'osoft\Windows\CurrentVersion\Uninstall', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
CONST	ENDS
;	COMDAT _IsApplicationInstalled
_TEXT	SEGMENT
_regNameSize$ = -1132					; size = 4
_unistallKey$ = -1128					; size = 4
_installed$ = -1124					; size = 4
_index$ = -1120						; size = 4
_appName$GSCopy$ = -1116				; size = 4
$T179868 = -1112					; size = 28
$T179870 = -1084					; size = 28
$T179869 = -1056					; size = 28
_regName$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_appName$ = 8						; size = 4
_IsApplicationInstalled PROC				; COMDAT

; 8789 : {

  00000	81 ec 6c 04 00
	00		 sub	 esp, 1132		; 0000046cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 68 04
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+1132], eax

; 8790 : 	const char *uninstallRegName = "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall";
; 8791 : 	BOOL installed = FALSE;
; 8792 : 	HKEY unistallKey;
; 8793 : 	LONG res = RegOpenKeyEx (HKEY_LOCAL_MACHINE, uninstallRegName, 0, KEY_READ | KEY_WOW64_64KEY, &unistallKey);
; 8794 : 	if (res != ERROR_SUCCESS)
; 8795 : 	{
; 8796 : 		SetLastError (res);
; 8797 : 		return FALSE;
; 8798 : 	}
; 8799 : 
; 8800 : 	char regName[1024];
; 8801 : 	DWORD regNameSize = sizeof (regName);
; 8802 : 	DWORD index = 0;
; 8803 : 	while (RegEnumKeyEx (unistallKey, index++, regName, &regNameSize, NULL, NULL, NULL, NULL) == ERROR_SUCCESS)

  00014	8b 84 24 70 04
	00 00		 mov	 eax, DWORD PTR _appName$[esp+1128]
  0001b	57		 push	 edi
  0001c	8d 4c 24 08	 lea	 ecx, DWORD PTR _unistallKey$[esp+1136]
  00020	51		 push	 ecx
  00021	68 19 01 02 00	 push	 131353			; 00020119H
  00026	33 ff		 xor	 edi, edi
  00028	57		 push	 edi
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@HOJDGFDM@Software?2Microsoft?2Windows?2Curre@
  0002e	68 02 00 00 80	 push	 -2147483646		; 80000002H
  00033	89 44 24 28	 mov	 DWORD PTR _appName$GSCopy$[esp+1156], eax
  00037	89 7c 24 20	 mov	 DWORD PTR _installed$[esp+1156], edi
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  00041	3b c7		 cmp	 eax, edi
  00043	74 1f		 je	 SHORT $LN6@IsApplicat
  00045	50		 push	 eax
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4
  0004c	33 c0		 xor	 eax, eax
  0004e	5f		 pop	 edi

; 8822 : 	return installed;
; 8823 : }

  0004f	8b 8c 24 68 04
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1132]
  00056	33 cc		 xor	 ecx, esp
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	81 c4 6c 04 00
	00		 add	 esp, 1132		; 0000046cH
  00063	c3		 ret	 0
$LN6@IsApplicat:

; 8790 : 	const char *uninstallRegName = "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall";
; 8791 : 	BOOL installed = FALSE;
; 8792 : 	HKEY unistallKey;
; 8793 : 	LONG res = RegOpenKeyEx (HKEY_LOCAL_MACHINE, uninstallRegName, 0, KEY_READ | KEY_WOW64_64KEY, &unistallKey);
; 8794 : 	if (res != ERROR_SUCCESS)
; 8795 : 	{
; 8796 : 		SetLastError (res);
; 8797 : 		return FALSE;
; 8798 : 	}
; 8799 : 
; 8800 : 	char regName[1024];
; 8801 : 	DWORD regNameSize = sizeof (regName);
; 8802 : 	DWORD index = 0;
; 8803 : 	while (RegEnumKeyEx (unistallKey, index++, regName, &regNameSize, NULL, NULL, NULL, NULL) == ERROR_SUCCESS)

  00064	8b 4c 24 08	 mov	 ecx, DWORD PTR _unistallKey$[esp+1136]
  00068	53		 push	 ebx
  00069	57		 push	 edi
  0006a	57		 push	 edi
  0006b	57		 push	 edi
  0006c	57		 push	 edi
  0006d	8d 54 24 18	 lea	 edx, DWORD PTR _regNameSize$[esp+1156]
  00071	52		 push	 edx
  00072	8d 84 24 84 00
	00 00		 lea	 eax, DWORD PTR _regName$[esp+1160]
  00079	50		 push	 eax
  0007a	57		 push	 edi
  0007b	51		 push	 ecx
  0007c	c7 44 24 28 00
	04 00 00	 mov	 DWORD PTR _regNameSize$[esp+1172], 1024 ; 00000400H
  00084	33 db		 xor	 ebx, ebx
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegEnumKeyExA@32
  0008c	85 c0		 test	 eax, eax
  0008e	0f 85 6a 01 00
	00		 jne	 $LN133@IsApplicat
  00094	55		 push	 ebp
  00095	56		 push	 esi
  00096	8d 6b 0f	 lea	 ebp, DWORD PTR [ebx+15]
  00099	8d 73 10	 lea	 esi, DWORD PTR [ebx+16]
  0009c	8d 64 24 00	 npad	 4
$LL5@IsApplicat:

; 8804 : 	{
; 8805 : 		if (strstr (regName, "{") == regName)

  000a0	8d 54 24 78	 lea	 edx, DWORD PTR _regName$[esp+1148]
  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_01HCONENDN@?$HL?$AA@
  000a9	43		 inc	 ebx
  000aa	52		 push	 edx
  000ab	89 5c 24 24	 mov	 DWORD PTR _index$[esp+1156], ebx
  000af	e8 00 00 00 00	 call	 _strstr
  000b4	8d 8c 24 80 00
	00 00		 lea	 ecx, DWORD PTR _regName$[esp+1156]
  000bb	83 c4 08	 add	 esp, 8
  000be	3b c1		 cmp	 eax, ecx
  000c0	0f 85 e5 00 00
	00		 jne	 $LN136@IsApplicat

; 8806 : 		{
; 8807 : 			regNameSize = sizeof (regName);
; 8808 : 			if (!ReadLocalMachineRegistryStringNonReflected ((string (uninstallRegName) + "\\" + regName).c_str(), "DisplayName", regName, &regNameSize))

  000c6	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0DE@HOJDGFDM@Software?2Microsoft?2Windows?2Curre@
  000cb	c7 44 24 10 00
	04 00 00	 mov	 DWORD PTR _regNameSize$[esp+1148], 1024 ; 00000400H
  000d3	89 6c 24 3c	 mov	 DWORD PTR $T179868[esp+1172], ebp
  000d7	89 7c 24 38	 mov	 DWORD PTR $T179868[esp+1168], edi
  000db	c6 44 24 28 00	 mov	 BYTE PTR $T179868[esp+1152], 0
  000e0	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL135@IsApplicat:
  000e3	8a 08		 mov	 cl, BYTE PTR [eax]
  000e5	40		 inc	 eax
  000e6	84 c9		 test	 cl, cl
  000e8	75 f9		 jne	 SHORT $LL135@IsApplicat
  000ea	2b c2		 sub	 eax, edx
  000ec	50		 push	 eax
  000ed	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@HOJDGFDM@Software?2Microsoft?2Windows?2Curre@
  000f2	8d 4c 24 2c	 lea	 ecx, DWORD PTR $T179868[esp+1156]
  000f6	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000fb	8d 54 24 78	 lea	 edx, DWORD PTR _regName$[esp+1148]
  000ff	52		 push	 edx
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_01KICIPPFI@?2?$AA@
  00105	8d 44 24 2c	 lea	 eax, DWORD PTR $T179868[esp+1156]
  00109	50		 push	 eax
  0010a	8d 4c 24 68	 lea	 ecx, DWORD PTR $T179869[esp+1160]
  0010e	51		 push	 ecx
  0010f	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00114	83 c4 0c	 add	 esp, 12			; 0000000cH
  00117	50		 push	 eax
  00118	8d 54 24 48	 lea	 edx, DWORD PTR $T179870[esp+1156]
  0011c	52		 push	 edx
  0011d	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00122	83 c4 0c	 add	 esp, 12			; 0000000cH
  00125	39 70 18	 cmp	 DWORD PTR [eax+24], esi
  00128	72 05		 jb	 SHORT $LN51@IsApplicat
  0012a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0012d	eb 03		 jmp	 SHORT $LN52@IsApplicat
$LN51@IsApplicat:
  0012f	83 c0 04	 add	 eax, 4
$LN52@IsApplicat:
  00132	8d 4c 24 10	 lea	 ecx, DWORD PTR _regNameSize$[esp+1148]
  00136	51		 push	 ecx
  00137	8d 54 24 7c	 lea	 edx, DWORD PTR _regName$[esp+1152]
  0013b	52		 push	 edx
  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MLHPPPJP@DisplayName?$AA@
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 _ReadLocalMachineRegistryStringNonReflected
  00147	83 c4 10	 add	 esp, 16			; 00000010H
  0014a	85 c0		 test	 eax, eax
  0014c	0f 94 c3	 sete	 bl
  0014f	39 74 24 58	 cmp	 DWORD PTR $T179870[esp+1172], esi
  00153	72 0d		 jb	 SHORT $LN69@IsApplicat
  00155	8b 44 24 44	 mov	 eax, DWORD PTR $T179870[esp+1152]
  00159	50		 push	 eax
  0015a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0015f	83 c4 04	 add	 esp, 4
$LN69@IsApplicat:
  00162	89 6c 24 58	 mov	 DWORD PTR $T179870[esp+1172], ebp
  00166	89 7c 24 54	 mov	 DWORD PTR $T179870[esp+1168], edi
  0016a	c6 44 24 44 00	 mov	 BYTE PTR $T179870[esp+1152], 0
  0016f	39 74 24 74	 cmp	 DWORD PTR $T179869[esp+1172], esi
  00173	72 0d		 jb	 SHORT $LN95@IsApplicat
  00175	8b 4c 24 60	 mov	 ecx, DWORD PTR $T179869[esp+1152]
  00179	51		 push	 ecx
  0017a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0017f	83 c4 04	 add	 esp, 4
$LN95@IsApplicat:
  00182	89 6c 24 74	 mov	 DWORD PTR $T179869[esp+1172], ebp
  00186	89 7c 24 70	 mov	 DWORD PTR $T179869[esp+1168], edi
  0018a	c6 44 24 60 00	 mov	 BYTE PTR $T179869[esp+1152], 0
  0018f	39 74 24 3c	 cmp	 DWORD PTR $T179868[esp+1172], esi
  00193	72 0d		 jb	 SHORT $LN121@IsApplicat
  00195	8b 54 24 28	 mov	 edx, DWORD PTR $T179868[esp+1152]
  00199	52		 push	 edx
  0019a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0019f	83 c4 04	 add	 esp, 4
$LN121@IsApplicat:
  001a2	84 db		 test	 bl, bl
  001a4	74 05		 je	 SHORT $LN136@IsApplicat

; 8809 : 				regName[0] = 0;

  001a6	c6 44 24 78 00	 mov	 BYTE PTR _regName$[esp+1148], 0
$LN136@IsApplicat:

; 8810 : 		}
; 8811 : 
; 8812 : 		if (_stricmp (regName, appName) == 0)

  001ab	8b 44 24 20	 mov	 eax, DWORD PTR _appName$GSCopy$[esp+1148]
  001af	50		 push	 eax
  001b0	8d 4c 24 7c	 lea	 ecx, DWORD PTR _regName$[esp+1152]
  001b4	51		 push	 ecx
  001b5	e8 00 00 00 00	 call	 __stricmp
  001ba	83 c4 08	 add	 esp, 8
  001bd	85 c0		 test	 eax, eax
  001bf	74 33		 je	 SHORT $LN132@IsApplicat
  001c1	8b 5c 24 1c	 mov	 ebx, DWORD PTR _index$[esp+1148]
  001c5	8b 4c 24 14	 mov	 ecx, DWORD PTR _unistallKey$[esp+1148]
  001c9	57		 push	 edi
  001ca	57		 push	 edi
  001cb	57		 push	 edi
  001cc	57		 push	 edi
  001cd	8d 54 24 20	 lea	 edx, DWORD PTR _regNameSize$[esp+1164]
  001d1	52		 push	 edx
  001d2	8d 84 24 8c 00
	00 00		 lea	 eax, DWORD PTR _regName$[esp+1168]
  001d9	50		 push	 eax
  001da	53		 push	 ebx
  001db	51		 push	 ecx

; 8815 : 			break;
; 8816 : 		}
; 8817 : 
; 8818 : 		regNameSize = sizeof (regName);

  001dc	c7 44 24 30 00
	04 00 00	 mov	 DWORD PTR _regNameSize$[esp+1180], 1024 ; 00000400H
  001e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegEnumKeyExA@32
  001ea	85 c0		 test	 eax, eax
  001ec	0f 84 ae fe ff
	ff		 je	 $LL5@IsApplicat

; 8810 : 		}
; 8811 : 
; 8812 : 		if (_stricmp (regName, appName) == 0)

  001f2	eb 08		 jmp	 SHORT $LN137@IsApplicat
$LN132@IsApplicat:

; 8813 : 		{
; 8814 : 			installed = TRUE;

  001f4	c7 44 24 18 01
	00 00 00	 mov	 DWORD PTR _installed$[esp+1148], 1
$LN137@IsApplicat:
  001fc	5e		 pop	 esi
  001fd	5d		 pop	 ebp
$LN133@IsApplicat:

; 8819 : 	}
; 8820 : 
; 8821 : 	RegCloseKey (unistallKey);

  001fe	8b 54 24 0c	 mov	 edx, DWORD PTR _unistallKey$[esp+1140]
  00202	52		 push	 edx
  00203	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4

; 8822 : 	return installed;
; 8823 : }

  00209	8b 8c 24 70 04
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1140]
  00210	8b 44 24 10	 mov	 eax, DWORD PTR _installed$[esp+1140]
  00214	5b		 pop	 ebx
  00215	5f		 pop	 edi
  00216	33 cc		 xor	 ecx, esp
  00218	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021d	81 c4 6c 04 00
	00		 add	 esp, 1132		; 0000046cH
  00223	c3		 ret	 0
_IsApplicationInstalled ENDP
_TEXT	ENDS
PUBLIC	??_C@_02DJGKEECL@?4?4?$AA@			; `string'
PUBLIC	_directory$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z ; FindLatestFileOrDirectory
EXTRN	__imp__FindClose@4:PROC
EXTRN	__imp__FindNextFileA@8:PROC
EXTRN	__imp__FindFirstFileA@8:PROC
;	COMDAT ??_C@_02DJGKEECL@?4?4?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_02DJGKEECL@?4?4?$AA@ DB '..', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z$5
__ehfuncinfo$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
xdata$x	ENDS
;	COMDAT ?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z
_TEXT	SEGMENT
$T180382 = -436						; size = 4
_find$ = -436						; size = 4
$T180376 = -432						; size = 28
$T180375 = -432						; size = 28
_directory$GSCopy$ = -404				; size = 4
$T180377 = -400						; size = 28
$T180374 = -400						; size = 28
_latestTime$ = -372					; size = 8
_name$ = -364						; size = 28
_findData$ = -336					; size = 320
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_directory$ = 12					; size = 4
_namePattern$ = 16					; size = 4
_findDirectory$ = 20					; size = 1
_findFile$ = 24						; size = 1
?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z PROC ; FindLatestFileOrDirectory, COMDAT

; 8827 : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec a8 01 00
	00		 sub	 esp, 424		; 000001a8H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 a4 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+436], eax
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c4		 xor	 eax, esp
  0002d	50		 push	 eax
  0002e	8d 84 24 bc 01
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+456]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	8b 84 24 d0 01
	00 00		 mov	 eax, DWORD PTR _directory$[esp+452]
  00042	8b bc 24 cc 01
	00 00		 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+452]
  00049	8b b4 24 d4 01
	00 00		 mov	 esi, DWORD PTR _namePattern$[esp+452]

; 8834 : 	if (find != INVALID_HANDLE_VALUE)

  00050	33 db		 xor	 ebx, ebx
  00052	89 44 24 34	 mov	 DWORD PTR _directory$GSCopy$[esp+456], eax
  00056	89 5c 24 14	 mov	 DWORD PTR $T180382[esp+456], ebx
  0005a	c7 44 24 74 0f
	00 00 00	 mov	 DWORD PTR _name$[esp+480], 15 ; 0000000fH
  00062	89 5c 24 70	 mov	 DWORD PTR _name$[esp+476], ebx
  00066	88 5c 24 60	 mov	 BYTE PTR _name$[esp+460], bl
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_01KICIPPFI@?2?$AA@
  0006f	50		 push	 eax
  00070	8d 44 24 40	 lea	 eax, DWORD PTR $T180374[esp+464]
  00074	50		 push	 eax
  00075	89 9c 24 d0 01
	00 00		 mov	 DWORD PTR __$EHRec$[esp+476], ebx
  0007c	33 ed		 xor	 ebp, ebp
  0007e	89 5c 24 64	 mov	 DWORD PTR _latestTime$[esp+472], ebx
  00082	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00087	56		 push	 esi
  00088	50		 push	 eax
  00089	8d 4c 24 2c	 lea	 ecx, DWORD PTR $T180375[esp+476]
  0008d	51		 push	 ecx
  0008e	c6 84 24 dc 01
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+488], 1
  00096	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0009b	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  000a0	83 c4 18	 add	 esp, 24			; 00000018H
  000a3	39 70 18	 cmp	 DWORD PTR [eax+24], esi
  000a6	72 05		 jb	 SHORT $LN57@FindLatest

; 8828 : 	string name;
; 8829 : 	ULARGE_INTEGER latestTime;
; 8830 : 	latestTime.QuadPart = 0;
; 8831 : 	WIN32_FIND_DATA findData;
; 8832 : 
; 8833 : 	HANDLE find = FindFirstFile ((directory + "\\" + namePattern).c_str(), &findData);

  000a8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ab	eb 03		 jmp	 SHORT $LN58@FindLatest
$LN57@FindLatest:
  000ad	83 c0 04	 add	 eax, 4
$LN58@FindLatest:
  000b0	8d 54 24 78	 lea	 edx, DWORD PTR _findData$[esp+456]
  000b4	52		 push	 edx
  000b5	50		 push	 eax
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindFirstFileA@8
  000bc	89 44 24 14	 mov	 DWORD PTR _find$[esp+456], eax
  000c0	39 74 24 30	 cmp	 DWORD PTR $T180375[esp+480], esi
  000c4	72 0d		 jb	 SHORT $LN75@FindLatest
  000c6	8b 44 24 1c	 mov	 eax, DWORD PTR $T180375[esp+460]
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d0	83 c4 04	 add	 esp, 4
$LN75@FindLatest:
  000d3	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  000d8	89 44 24 30	 mov	 DWORD PTR $T180375[esp+480], eax
  000dc	89 5c 24 2c	 mov	 DWORD PTR $T180375[esp+476], ebx
  000e0	88 5c 24 1c	 mov	 BYTE PTR $T180375[esp+460], bl
  000e4	88 9c 24 c4 01
	00 00		 mov	 BYTE PTR __$EHRec$[esp+464], bl
  000eb	39 74 24 50	 cmp	 DWORD PTR $T180374[esp+480], esi
  000ef	72 12		 jb	 SHORT $LN101@FindLatest
  000f1	8b 4c 24 3c	 mov	 ecx, DWORD PTR $T180374[esp+460]
  000f5	51		 push	 ecx
  000f6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000fb	83 c4 04	 add	 esp, 4
  000fe	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
$LN101@FindLatest:

; 8834 : 	if (find != INVALID_HANDLE_VALUE)

  00103	83 7c 24 14 ff	 cmp	 DWORD PTR _find$[esp+456], -1
  00108	89 44 24 50	 mov	 DWORD PTR $T180374[esp+480], eax
  0010c	89 5c 24 4c	 mov	 DWORD PTR $T180374[esp+476], ebx
  00110	88 5c 24 3c	 mov	 BYTE PTR $T180374[esp+460], bl
  00114	0f 84 18 01 00
	00		 je	 $LN11@FindLatest
  0011a	8d 9b 00 00 00
	00		 npad	 6
$LL10@FindLatest:

; 8835 : 	{
; 8836 : 		do
; 8837 : 		{
; 8838 : 			if (strcmp (findData.cFileName, ".") == 0 || strcmp (findData.cFileName, "..") == 0)

  00120	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01LFCBOECM@?4?$AA@
  00125	8d 84 24 a4 00
	00 00		 lea	 eax, DWORD PTR _findData$[esp+500]
  0012c	8d 64 24 00	 npad	 4
$LL276@FindLatest:
  00130	8a 10		 mov	 dl, BYTE PTR [eax]
  00132	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00134	75 1a		 jne	 SHORT $LN277@FindLatest
  00136	3a d3		 cmp	 dl, bl
  00138	74 12		 je	 SHORT $LN278@FindLatest
  0013a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0013d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00140	75 0e		 jne	 SHORT $LN277@FindLatest
  00142	83 c0 02	 add	 eax, 2
  00145	83 c1 02	 add	 ecx, 2
  00148	3a d3		 cmp	 dl, bl
  0014a	75 e4		 jne	 SHORT $LL276@FindLatest
$LN278@FindLatest:
  0014c	33 c0		 xor	 eax, eax
  0014e	eb 05		 jmp	 SHORT $LN279@FindLatest
$LN277@FindLatest:
  00150	1b c0		 sbb	 eax, eax
  00152	83 d8 ff	 sbb	 eax, -1
$LN279@FindLatest:
  00155	3b c3		 cmp	 eax, ebx
  00157	0f 84 ad 00 00
	00		 je	 $LN9@FindLatest
  0015d	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_02DJGKEECL@?4?4?$AA@
  00162	8d 84 24 a4 00
	00 00		 lea	 eax, DWORD PTR _findData$[esp+500]
  00169	8d a4 24 00 00
	00 00		 npad	 7
$LL280@FindLatest:
  00170	8a 10		 mov	 dl, BYTE PTR [eax]
  00172	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00174	75 1a		 jne	 SHORT $LN281@FindLatest
  00176	3a d3		 cmp	 dl, bl
  00178	74 12		 je	 SHORT $LN282@FindLatest
  0017a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0017d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00180	75 0e		 jne	 SHORT $LN281@FindLatest
  00182	83 c0 02	 add	 eax, 2
  00185	83 c1 02	 add	 ecx, 2
  00188	3a d3		 cmp	 dl, bl
  0018a	75 e4		 jne	 SHORT $LL280@FindLatest
$LN282@FindLatest:
  0018c	33 c0		 xor	 eax, eax
  0018e	eb 05		 jmp	 SHORT $LN283@FindLatest
$LN281@FindLatest:
  00190	1b c0		 sbb	 eax, eax
  00192	83 d8 ff	 sbb	 eax, -1
$LN283@FindLatest:
  00195	3b c3		 cmp	 eax, ebx
  00197	74 71		 je	 SHORT $LN9@FindLatest

; 8839 : 				continue;
; 8840 : 
; 8841 : 			ULARGE_INTEGER writeTime;
; 8842 : 			writeTime.LowPart = findData.ftLastWriteTime.dwLowDateTime;

  00199	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR _findData$[esp+476]

; 8843 : 			writeTime.HighPart = findData.ftLastWriteTime.dwHighDateTime;

  001a0	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR _findData$[esp+480]

; 8844 : 
; 8845 : 			if ((!findFile && !(findData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY))
; 8846 : 				|| (!findDirectory && (findData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)))

  001a7	8a 54 24 78	 mov	 dl, BYTE PTR _findData$[esp+456]
  001ab	38 9c 24 dc 01
	00 00		 cmp	 BYTE PTR _findFile$[esp+452], bl
  001b2	75 05		 jne	 SHORT $LN3@FindLatest
  001b4	f6 c2 10	 test	 dl, 16			; 00000010H
  001b7	74 51		 je	 SHORT $LN9@FindLatest
$LN3@FindLatest:
  001b9	80 bc 24 d8 01
	00 00 00	 cmp	 BYTE PTR _findDirectory$[esp+452], 0
  001c1	75 05		 jne	 SHORT $LN5@FindLatest
  001c3	f6 c2 10	 test	 dl, 16			; 00000010H

; 8847 : 				continue;

  001c6	75 3b		 jne	 SHORT $LN287@FindLatest
$LN5@FindLatest:

; 8848 : 
; 8849 : 			if (latestTime.QuadPart < writeTime.QuadPart)

  001c8	39 4c 24 58	 cmp	 DWORD PTR _latestTime$[esp+460], ecx
  001cc	77 35		 ja	 SHORT $LN287@FindLatest
  001ce	72 04		 jb	 SHORT $LN284@FindLatest
  001d0	3b e8		 cmp	 ebp, eax
  001d2	73 2f		 jae	 SHORT $LN287@FindLatest
$LN284@FindLatest:

; 8850 : 			{
; 8851 : 				latestTime = writeTime;

  001d4	8b e8		 mov	 ebp, eax

; 8852 : 				name = findData.cFileName;

  001d6	8d 84 24 a4 00
	00 00		 lea	 eax, DWORD PTR _findData$[esp+500]
  001dd	89 4c 24 58	 mov	 DWORD PTR _latestTime$[esp+460], ecx
  001e1	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  001e4	33 db		 xor	 ebx, ebx
$LL285@FindLatest:
  001e6	8a 08		 mov	 cl, BYTE PTR [eax]
  001e8	40		 inc	 eax
  001e9	3a cb		 cmp	 cl, bl
  001eb	75 f9		 jne	 SHORT $LL285@FindLatest
  001ed	2b c2		 sub	 eax, edx
  001ef	50		 push	 eax
  001f0	8d 94 24 a8 00
	00 00		 lea	 edx, DWORD PTR _findData$[esp+504]
  001f7	52		 push	 edx
  001f8	8d 4c 24 64	 lea	 ecx, DWORD PTR _name$[esp+464]
  001fc	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00201	eb 02		 jmp	 SHORT $LN289@FindLatest
$LN287@FindLatest:
  00203	33 db		 xor	 ebx, ebx
$LN289@FindLatest:
  00205	be 10 00 00 00	 mov	 esi, 16			; 00000010H
$LN9@FindLatest:

; 8853 : 			}
; 8854 : 		}
; 8855 : 		while (FindNextFile (find, &findData));

  0020a	8b 4c 24 14	 mov	 ecx, DWORD PTR _find$[esp+456]
  0020e	8d 44 24 78	 lea	 eax, DWORD PTR _findData$[esp+456]
  00212	50		 push	 eax
  00213	51		 push	 ecx
  00214	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindNextFileA@8
  0021a	85 c0		 test	 eax, eax
  0021c	0f 85 fe fe ff
	ff		 jne	 $LL10@FindLatest

; 8856 : 
; 8857 : 		FindClose (find);

  00222	8b 54 24 14	 mov	 edx, DWORD PTR _find$[esp+456]
  00226	52		 push	 edx
  00227	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindClose@4
  0022d	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
$LN11@FindLatest:

; 8858 : 	}
; 8859 : 
; 8860 : 	if (name.empty())
; 8861 : 		return name;

  00232	6a ff		 push	 -1
  00234	53		 push	 ebx
  00235	39 5c 24 78	 cmp	 DWORD PTR _name$[esp+484], ebx
  00239	75 29		 jne	 SHORT $LN1@FindLatest
  0023b	89 47 18	 mov	 DWORD PTR [edi+24], eax
  0023e	8d 44 24 64	 lea	 eax, DWORD PTR _name$[esp+464]
  00242	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  00245	50		 push	 eax
  00246	8b cf		 mov	 ecx, edi
  00248	88 5f 04	 mov	 BYTE PTR [edi+4], bl
  0024b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00250	39 74 24 74	 cmp	 DWORD PTR _name$[esp+480], esi
  00254	0f 82 ad 00 00
	00		 jb	 $LN265@FindLatest
  0025a	8b 4c 24 60	 mov	 ecx, DWORD PTR _name$[esp+460]
  0025e	51		 push	 ecx
  0025f	e9 9b 00 00 00	 jmp	 $LN290@FindLatest
$LN1@FindLatest:

; 8862 : 
; 8863 : 	return string (directory) + "\\" + name;

  00264	8b 54 24 3c	 mov	 edx, DWORD PTR _directory$GSCopy$[esp+464]
  00268	52		 push	 edx
  00269	8d 4c 24 24	 lea	 ecx, DWORD PTR $T180376[esp+468]
  0026d	89 44 24 3c	 mov	 DWORD PTR $T180376[esp+492], eax
  00271	89 5c 24 38	 mov	 DWORD PTR $T180376[esp+488], ebx
  00275	88 5c 24 28	 mov	 BYTE PTR $T180376[esp+472], bl
  00279	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0027e	68 00 00 00 00	 push	 OFFSET ??_C@_01KICIPPFI@?2?$AA@
  00283	8d 44 24 1c	 lea	 eax, DWORD PTR $T180376[esp+460]
  00287	50		 push	 eax
  00288	8d 4c 24 40	 lea	 ecx, DWORD PTR $T180377[esp+464]
  0028c	51		 push	 ecx
  0028d	c6 84 24 d0 01
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+476], 2
  00295	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0029a	8d 54 24 68	 lea	 edx, DWORD PTR _name$[esp+468]
  0029e	52		 push	 edx
  0029f	50		 push	 eax
  002a0	57		 push	 edi
  002a1	c6 84 24 dc 01
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+488], 3
  002a9	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  002ae	83 c4 18	 add	 esp, 24			; 00000018H
  002b1	39 74 24 50	 cmp	 DWORD PTR $T180377[esp+480], esi
  002b5	72 0d		 jb	 SHORT $LN213@FindLatest
  002b7	8b 44 24 3c	 mov	 eax, DWORD PTR $T180377[esp+460]
  002bb	50		 push	 eax
  002bc	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002c1	83 c4 04	 add	 esp, 4
$LN213@FindLatest:
  002c4	bd 0f 00 00 00	 mov	 ebp, 15			; 0000000fH
  002c9	89 6c 24 50	 mov	 DWORD PTR $T180377[esp+480], ebp
  002cd	89 5c 24 4c	 mov	 DWORD PTR $T180377[esp+476], ebx
  002d1	88 5c 24 3c	 mov	 BYTE PTR $T180377[esp+460], bl
  002d5	39 74 24 30	 cmp	 DWORD PTR $T180376[esp+480], esi
  002d9	72 0d		 jb	 SHORT $LN239@FindLatest
  002db	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T180376[esp+460]
  002df	51		 push	 ecx
  002e0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002e5	83 c4 04	 add	 esp, 4
$LN239@FindLatest:
  002e8	89 6c 24 30	 mov	 DWORD PTR $T180376[esp+480], ebp
  002ec	89 5c 24 2c	 mov	 DWORD PTR $T180376[esp+476], ebx
  002f0	88 5c 24 1c	 mov	 BYTE PTR $T180376[esp+460], bl
  002f4	39 74 24 74	 cmp	 DWORD PTR _name$[esp+480], esi
  002f8	72 0d		 jb	 SHORT $LN265@FindLatest
  002fa	8b 54 24 60	 mov	 edx, DWORD PTR _name$[esp+460]
  002fe	52		 push	 edx
$LN290@FindLatest:
  002ff	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00304	83 c4 04	 add	 esp, 4
$LN265@FindLatest:
  00307	8b c7		 mov	 eax, edi

; 8864 : }

  00309	8b 8c 24 bc 01
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+456]
  00310	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00317	59		 pop	 ecx
  00318	5f		 pop	 edi
  00319	5e		 pop	 esi
  0031a	5d		 pop	 ebp
  0031b	5b		 pop	 ebx
  0031c	8b 8c 24 a4 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+436]
  00323	33 cc		 xor	 ecx, esp
  00325	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0032a	81 c4 b4 01 00
	00		 add	 esp, 436		; 000001b4H
  00330	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z$0:
  00000	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _name$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z$1:
  0000b	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T180374[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z$4:
  00016	8d 8d 50 fe ff
	ff		 lea	 ecx, DWORD PTR $T180376[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z$5:
  00021	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T180377[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z:
  0002c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00030	8d 82 48 fe ff
	ff		 lea	 eax, DWORD PTR [edx-440]
  00036	8b 8a 44 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-444]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	83 c0 10	 add	 eax, 16			; 00000010H
  00046	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00049	33 c8		 xor	 ecx, eax
  0004b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00050	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z
  00055	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z ENDP ; FindLatestFileOrDirectory
PUBLIC	?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T181457 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 504  : 		{	// return string copy of character array

  00000	51		 push	 ecx
  00001	56		 push	 esi

; 505  : 		return (_Stringbuffer.str());

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	56		 push	 esi
  00007	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T181457[esp+12], 0
  00012	e8 00 00 00 00	 call	 ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi

; 506  : 		}

  0001a	59		 pop	 ecx
  0001b	c2 04 00	 ret	 4
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
PUBLIC	?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
; Function compile flags: /Ogtpy
;	COMDAT ?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T181462 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str, COMDAT
; _this$ = ecx

; 504  : 		{	// return string copy of character array

  00000	51		 push	 ecx
  00001	56		 push	 esi

; 505  : 		return (_Stringbuffer.str());

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	56		 push	 esi
  00007	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T181462[esp+12], 0
  00012	e8 00 00 00 00	 call	 ?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi

; 506  : 		}

  0001a	59		 pop	 ecx
  0001b	c2 04 00	 ret	 4
?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
_TEXT	ENDS
PUBLIC	?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::clear, COMDAT
; _this$ = ecx

; 43   : 		ios_base::clear((iostate)(_Mystrbuf == 0
; 44   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  00000	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __State$[esp-4]
  00008	75 03		 jne	 SHORT $LN4@clear@3
  0000a	83 c8 04	 or	 eax, 4
$LN4@clear@3:
  0000d	89 44 24 04	 mov	 DWORD PTR __State$[esp-4], eax
  00011	e9 00 00 00 00	 jmp	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::clear
_TEXT	ENDS
PUBLIC	?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::clear, COMDAT
; _this$ = ecx

; 43   : 		ios_base::clear((iostate)(_Mystrbuf == 0
; 44   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  00000	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __State$[esp-4]
  00008	75 03		 jne	 SHORT $LN4@clear@4
  0000a	83 c8 04	 or	 eax, 4
$LN4@clear@4:
  0000d	89 44 24 04	 mov	 DWORD PTR __State$[esp-4], eax
  00011	e9 00 00 00 00	 jmp	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::clear
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Buy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

  00000	56		 push	 esi

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;
; 1104 : 		if (_Capacity == 0)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Capacity$[esp]
  00005	33 c0		 xor	 eax, eax
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  0000d	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00010	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00013	3b f0		 cmp	 esi, eax
  00015	75 07		 jne	 SHORT $LN4@Buy
  00017	5f		 pop	 edi

; 1105 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	5e		 pop	 esi

; 1115 : 		}

  0001b	c2 04 00	 ret	 4
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

  0001e	81 fe e1 e1 e1
	01		 cmp	 esi, 31580641		; 01e1e1e1H
  00024	76 05		 jbe	 SHORT $LN2@Buy

; 1107 : 			_Xlen();	// result too long

  00026	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen
$LN2@Buy:

; 1108 : 		else
; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

  0002b	50		 push	 eax
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 ??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ; std::_Allocate<HostDevice>

; 1111 : 			_Mylast = _Myfirst;
; 1112 : 			_Myend = _Myfirst + _Capacity;

  00032	69 f6 88 00 00
	00		 imul	 esi, 136		; 00000088H
  00038	03 f0		 add	 esi, eax
  0003a	83 c4 08	 add	 esp, 8
  0003d	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00040	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00043	89 77 14	 mov	 DWORD PTR [edi+20], esi
  00046	5f		 pop	 edi

; 1113 : 			}
; 1114 : 		return (true);

  00047	b0 01		 mov	 al, 1
  00049	5e		 pop	 esi

; 1115 : 		}

  0004a	c2 04 00	 ret	 4
$LN15@Buy:
?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Buy
_TEXT	ENDS
PUBLIC	?_Insert@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABK@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Insert@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABK@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 8
__Val$ = 16						; size = 4
?_Insert@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABK@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert, COMDAT
; _this$ = ecx

; 711  : 
; 712  :  #if _HAS_ITERATOR_DEBUGGING
; 713  : 		if (_Where._Mycont != this)
; 714  : 			_DEBUG_ERROR("list insert iterator outside range");
; 715  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 716  : 
; 717  : 		_Nodeptr _Pnode = _Where._Mynode();
; 718  : 		_Nodeptr _Newnode = _Buynode(_Pnode, _Prevnode(_Pnode), _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Where$[esp]
  00004	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	8b 4c 24 18	 mov	 ecx, DWORD PTR __Val$[esp+8]
  00010	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]
  00013	51		 push	 ecx
  00014	52		 push	 edx
  00015	50		 push	 eax
  00016	8b cf		 mov	 ecx, edi
  00018	e8 00 00 00 00	 call	 ?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@0ABK@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode

; 719  : 		_Incsize(1);

  0001d	6a 01		 push	 1
  0001f	8b cf		 mov	 ecx, edi
  00021	8b f0		 mov	 esi, eax
  00023	e8 00 00 00 00	 call	 ?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Incsize

; 720  : 		_Prevnode(_Pnode) = _Newnode;

  00028	89 33		 mov	 DWORD PTR [ebx], esi

; 721  : 		_Nextnode(_Prevnode(_Newnode)) = _Newnode;

  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	5f		 pop	 edi
  0002e	89 30		 mov	 DWORD PTR [eax], esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx

; 722  : 		}

  00032	c2 0c 00	 ret	 12			; 0000000cH
?_Insert@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABK@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	83 c1 18	 add	 ecx, 24			; 00000018H
  00007	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice

; 161  : 		}

  0000c	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	__TI3?AVout_of_range@std@@
PUBLIC	??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ ; `string'
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::erase
PUBLIC	__CTA3?AVout_of_range@std@@
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT
__CTA3?AVout_of_range@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT
__TI3?AVout_of_range@std@@ DD 00H
	DD	FLAT:??1out_of_range@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVout_of_range@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
CONST	SEGMENT
??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ DB 'invalid '
	DB	'map/set<T> iterator', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z$0
__ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z
_TEXT	SEGMENT
__Erasednode$ = -84					; size = 4
$T181548 = -80						; size = 28
$T181547 = -52						; size = 40
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::erase, COMDAT
; _this$ = ecx

; 764  : 		{	// erase element at _Where

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 48	 sub	 esp, 72			; 00000048H
  00011	53		 push	 ebx
  00012	55		 push	 ebp
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c4		 xor	 eax, esp
  0001c	50		 push	 eax
  0001d	8d 44 24 5c	 lea	 eax, DWORD PTR __$EHRec$[esp+104]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b e9		 mov	 ebp, ecx

; 765  : 
; 766  :  #if _HAS_ITERATOR_DEBUGGING
; 767  : 		if (_Where._Mycont != this || _Isnil(_Where._Mynode()))
; 768  : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 769  : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 770  : 		++_Where;	// save successor iterator for return
; 771  : 		_Orphan_ptr(*this, _Erasednode);
; 772  : 
; 773  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 774  : 		if (_Isnil(_Where._Mynode()))

  00029	8b 44 24 74	 mov	 eax, DWORD PTR __Where$[esp+104]
  0002d	80 b8 a1 00 00
	00 00		 cmp	 BYTE PTR [eax+161], 0
  00034	74 4c		 je	 SHORT $LN40@erase@4

; 775  : 			_THROW(out_of_range, "invalid map/set<T> iterator");

  00036	6a 1b		 push	 27			; 0000001bH
  00038	33 f6		 xor	 esi, esi
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
  0003f	8d 4c 24 20	 lea	 ecx, DWORD PTR $T181548[esp+112]
  00043	c7 44 24 38 0f
	00 00 00	 mov	 DWORD PTR $T181548[esp+136], 15 ; 0000000fH
  0004b	89 74 24 34	 mov	 DWORD PTR $T181548[esp+132], esi
  0004f	c6 44 24 24 00	 mov	 BYTE PTR $T181548[esp+116], 0
  00054	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00059	8d 44 24 18	 lea	 eax, DWORD PTR $T181548[esp+104]
  0005d	50		 push	 eax
  0005e	8d 4c 24 38	 lea	 ecx, DWORD PTR $T181547[esp+108]
  00062	89 74 24 68	 mov	 DWORD PTR __$EHRec$[esp+116], esi
  00066	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0006b	68 00 00 00 00	 push	 OFFSET __TI3?AVout_of_range@std@@
  00070	8d 4c 24 38	 lea	 ecx, DWORD PTR $T181547[esp+108]
  00074	51		 push	 ecx
  00075	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR $T181547[esp+112], OFFSET ??_7out_of_range@std@@6B@
  0007d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN40@erase@4:

; 776  : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase

  00082	8b d8		 mov	 ebx, eax

; 777  : 		++_Where;	// save successor iterator for return

  00084	8d 4c 24 70	 lea	 ecx, DWORD PTR __Where$[esp+100]
  00088	89 5c 24 14	 mov	 DWORD PTR __Erasednode$[esp+104], ebx
  0008c	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::_Inc

; 778  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 779  : 
; 780  : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 781  : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 782  : 		_Nodeptr _Pnode = _Erasednode;
; 783  : 
; 784  : 		if (_Isnil(_Left(_Pnode)))

  00091	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00093	80 b9 a1 00 00
	00 00		 cmp	 BYTE PTR [ecx+161], 0
  0009a	74 05		 je	 SHORT $LN39@erase@4

; 785  : 			_Fixnode = _Right(_Pnode);	// must stitch up right subtree

  0009c	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]
  0009f	eb 1e		 jmp	 SHORT $LN345@erase@4
$LN39@erase@4:

; 786  : 		else if (_Isnil(_Right(_Pnode)))

  000a1	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  000a4	80 ba a1 00 00
	00 00		 cmp	 BYTE PTR [edx+161], 0
  000ab	74 04		 je	 SHORT $LN37@erase@4

; 787  : 			_Fixnode = _Left(_Pnode);	// must stitch up left subtree

  000ad	8b f9		 mov	 edi, ecx

; 788  : 		else

  000af	eb 0e		 jmp	 SHORT $LN345@erase@4
$LN37@erase@4:

; 789  : 			{	// two subtrees, must lift successor node to replace erased
; 790  : 			_Pnode = _Where._Mynode();	// _Pnode is successor node

  000b1	8b 44 24 74	 mov	 eax, DWORD PTR __Where$[esp+104]

; 791  : 			_Fixnode = _Right(_Pnode);	// _Fixnode is its only subtree

  000b5	8b 78 08	 mov	 edi, DWORD PTR [eax+8]
  000b8	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 792  : 			}
; 793  : 
; 794  : 		if (_Pnode == _Erasednode)

  000bb	3b c3		 cmp	 eax, ebx
  000bd	75 78		 jne	 SHORT $LN35@erase@4
$LN345@erase@4:

; 795  : 			{	// at most one subtree, relink it
; 796  : 			_Fixnodeparent = _Parent(_Erasednode);
; 797  : 			if (!_Isnil(_Fixnode))

  000bf	80 bf a1 00 00
	00 00		 cmp	 BYTE PTR [edi+161], 0
  000c6	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  000c9	75 03		 jne	 SHORT $LN34@erase@4

; 798  : 				_Parent(_Fixnode) = _Fixnodeparent;	// link up

  000cb	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN34@erase@4:

; 799  : 
; 800  : 			if (_Root() == _Erasednode)

  000ce	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  000d1	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  000d4	75 05		 jne	 SHORT $LN33@erase@4

; 801  : 				_Root() = _Fixnode;	// link down from root

  000d6	89 78 04	 mov	 DWORD PTR [eax+4], edi
  000d9	eb 0b		 jmp	 SHORT $LN30@erase@4
$LN33@erase@4:

; 802  : 			else if (_Left(_Fixnodeparent) == _Erasednode)

  000db	39 1e		 cmp	 DWORD PTR [esi], ebx
  000dd	75 04		 jne	 SHORT $LN31@erase@4

; 803  : 				_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  000df	89 3e		 mov	 DWORD PTR [esi], edi

; 804  : 			else

  000e1	eb 03		 jmp	 SHORT $LN30@erase@4
$LN31@erase@4:

; 805  : 				_Right(_Fixnodeparent) = _Fixnode;	// link down to right

  000e3	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN30@erase@4:

; 806  : 
; 807  : 			if (_Lmost() == _Erasednode)

  000e6	8b 5d 18	 mov	 ebx, DWORD PTR [ebp+24]
  000e9	8b 03		 mov	 eax, DWORD PTR [ebx]
  000eb	3b 44 24 14	 cmp	 eax, DWORD PTR __Erasednode$[esp+104]
  000ef	75 18		 jne	 SHORT $LN29@erase@4

; 808  : 				_Lmost() = _Isnil(_Fixnode)
; 809  : 					? _Fixnodeparent	// smallest is parent of erased node
; 810  : 					: _Min(_Fixnode);	// smallest in relinked subtree

  000f1	80 bf a1 00 00
	00 00		 cmp	 BYTE PTR [edi+161], 0
  000f8	74 04		 je	 SHORT $LN43@erase@4
  000fa	8b c6		 mov	 eax, esi
  000fc	eb 09		 jmp	 SHORT $LN44@erase@4
$LN43@erase@4:
  000fe	57		 push	 edi
  000ff	e8 00 00 00 00	 call	 ?_Min@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Min
  00104	83 c4 04	 add	 esp, 4
$LN44@erase@4:
  00107	89 03		 mov	 DWORD PTR [ebx], eax
$LN29@erase@4:

; 811  : 
; 812  : 			if (_Rmost() == _Erasednode)

  00109	8b 5d 18	 mov	 ebx, DWORD PTR [ebp+24]
  0010c	8b 4c 24 14	 mov	 ecx, DWORD PTR __Erasednode$[esp+104]
  00110	39 4b 08	 cmp	 DWORD PTR [ebx+8], ecx
  00113	0f 85 82 00 00
	00		 jne	 $LN205@erase@4

; 813  : 				_Rmost() = _Isnil(_Fixnode)
; 814  : 					? _Fixnodeparent	// largest is parent of erased node
; 815  : 					: _Max(_Fixnode);	// largest in relinked subtree

  00119	80 bf a1 00 00
	00 00		 cmp	 BYTE PTR [edi+161], 0
  00120	74 07		 je	 SHORT $LN45@erase@4
  00122	8b c6		 mov	 eax, esi
  00124	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 816  : 			}
; 817  : 		else

  00127	eb 72		 jmp	 SHORT $LN205@erase@4
$LN45@erase@4:

; 813  : 				_Rmost() = _Isnil(_Fixnode)
; 814  : 					? _Fixnodeparent	// largest is parent of erased node
; 815  : 					: _Max(_Fixnode);	// largest in relinked subtree

  00129	57		 push	 edi
  0012a	e8 00 00 00 00	 call	 ?_Max@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Max
  0012f	83 c4 04	 add	 esp, 4
  00132	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 816  : 			}
; 817  : 		else

  00135	eb 64		 jmp	 SHORT $LN205@erase@4
$LN35@erase@4:

; 818  : 			{	// erased has two subtrees, _Pnode is successor to erased
; 819  : 			_Parent(_Left(_Erasednode)) = _Pnode;	// link left up

  00137	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 820  : 			_Left(_Pnode) = _Left(_Erasednode);	// link successor down

  0013a	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0013c	89 08		 mov	 DWORD PTR [eax], ecx

; 821  : 
; 822  : 			if (_Pnode == _Right(_Erasednode))

  0013e	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  00141	75 04		 jne	 SHORT $LN26@erase@4

; 823  : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  00143	8b f0		 mov	 esi, eax

; 824  : 			else

  00145	eb 1c		 jmp	 SHORT $LN25@erase@4
$LN26@erase@4:

; 825  : 				{	// successor further down, link in place of erased
; 826  : 				_Fixnodeparent = _Parent(_Pnode);	// parent is successor's
; 827  : 				if (!_Isnil(_Fixnode))

  00147	80 bf a1 00 00
	00 00		 cmp	 BYTE PTR [edi+161], 0
  0014e	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00151	75 03		 jne	 SHORT $LN24@erase@4

; 828  : 					_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  00153	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN24@erase@4:

; 829  : 				_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  00156	89 3e		 mov	 DWORD PTR [esi], edi

; 830  : 				_Right(_Pnode) = _Right(_Erasednode);	// link successor down

  00158	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0015b	89 0a		 mov	 DWORD PTR [edx], ecx

; 831  : 				_Parent(_Right(_Erasednode)) = _Pnode;	// link right up

  0015d	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00160	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN25@erase@4:

; 832  : 				}
; 833  : 
; 834  : 			if (_Root() == _Erasednode)

  00163	8b 4d 18	 mov	 ecx, DWORD PTR [ebp+24]
  00166	39 59 04	 cmp	 DWORD PTR [ecx+4], ebx
  00169	75 05		 jne	 SHORT $LN23@erase@4

; 835  : 				_Root() = _Pnode;	// link down from root

  0016b	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0016e	eb 0e		 jmp	 SHORT $LN20@erase@4
$LN23@erase@4:

; 836  : 			else if (_Left(_Parent(_Erasednode)) == _Erasednode)

  00170	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00173	39 19		 cmp	 DWORD PTR [ecx], ebx
  00175	75 04		 jne	 SHORT $LN21@erase@4

; 837  : 				_Left(_Parent(_Erasednode)) = _Pnode;	// link down to left

  00177	89 01		 mov	 DWORD PTR [ecx], eax

; 838  : 			else

  00179	eb 03		 jmp	 SHORT $LN20@erase@4
$LN21@erase@4:

; 839  : 				_Right(_Parent(_Erasednode)) = _Pnode;	// link down to right

  0017b	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN20@erase@4:

; 840  : 
; 841  : 			_Parent(_Pnode) = _Parent(_Erasednode);	// link successor up

  0017e	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00181	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 842  : 			_STD swap(_Color(_Pnode), _Color(_Erasednode));	// recolor it

  00184	8d 8b a0 00 00
	00		 lea	 ecx, DWORD PTR [ebx+160]
  0018a	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  0018f	3b c1		 cmp	 eax, ecx
  00191	74 08		 je	 SHORT $LN205@erase@4
  00193	8a 19		 mov	 bl, BYTE PTR [ecx]
  00195	8a 10		 mov	 dl, BYTE PTR [eax]
  00197	88 18		 mov	 BYTE PTR [eax], bl
  00199	88 11		 mov	 BYTE PTR [ecx], dl
$LN205@erase@4:

; 843  : 			}
; 844  : 
; 845  : 		if (_Color(_Erasednode) == _Black)

  0019b	8b 54 24 14	 mov	 edx, DWORD PTR __Erasednode$[esp+104]
  0019f	b3 01		 mov	 bl, 1
  001a1	38 9a a0 00 00
	00		 cmp	 BYTE PTR [edx+160], bl
  001a7	0f 85 64 01 00
	00		 jne	 $LN19@erase@4

; 846  : 			{	// erasing black link, must recolor/rebalance tree
; 847  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 848  : 				_Fixnodeparent = _Parent(_Fixnode))

  001ad	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  001b0	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  001b3	0f 84 52 01 00
	00		 je	 $LN16@erase@4
  001b9	8d a4 24 00 00
	00 00		 npad	 7
$LL18@erase@4:
  001c0	38 9f a0 00 00
	00		 cmp	 BYTE PTR [edi+160], bl
  001c6	0f 85 3f 01 00
	00		 jne	 $LN16@erase@4

; 849  : 				if (_Fixnode == _Left(_Fixnodeparent))

  001cc	8b 06		 mov	 eax, DWORD PTR [esi]
  001ce	3b f8		 cmp	 edi, eax
  001d0	0f 85 97 00 00
	00		 jne	 $LN15@erase@4

; 850  : 					{	// fixup left subtree
; 851  : 					_Pnode = _Right(_Fixnodeparent);

  001d6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 852  : 					if (_Color(_Pnode) == _Red)

  001d9	80 b8 a0 00 00
	00 00		 cmp	 BYTE PTR [eax+160], 0
  001e0	75 18		 jne	 SHORT $LN14@erase@4

; 853  : 						{	// rotate red up from right subtree
; 854  : 						_Color(_Pnode) = _Black;

  001e2	88 98 a0 00 00
	00		 mov	 BYTE PTR [eax+160], bl

; 855  : 						_Color(_Fixnodeparent) = _Red;
; 856  : 						_Lrotate(_Fixnodeparent);

  001e8	56		 push	 esi
  001e9	8b cd		 mov	 ecx, ebp
  001eb	c6 86 a0 00 00
	00 00		 mov	 BYTE PTR [esi+160], 0
  001f2	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lrotate

; 857  : 						_Pnode = _Right(_Fixnodeparent);

  001f7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
$LN14@erase@4:

; 858  : 						}
; 859  : 
; 860  : 					if (_Isnil(_Pnode))

  001fa	80 b8 a1 00 00
	00 00		 cmp	 BYTE PTR [eax+161], 0

; 861  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 862  : 					else if (_Color(_Left(_Pnode)) == _Black

  00201	0f 85 ab 00 00
	00		 jne	 $LN348@erase@4

; 863  : 						&& _Color(_Right(_Pnode)) == _Black)

  00207	8b 08		 mov	 ecx, DWORD PTR [eax]
  00209	38 99 a0 00 00
	00		 cmp	 BYTE PTR [ecx+160], bl
  0020f	75 0f		 jne	 SHORT $LN11@erase@4
  00211	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00214	38 9a a0 00 00
	00		 cmp	 BYTE PTR [edx+160], bl
  0021a	0f 84 8b 00 00
	00		 je	 $LN349@erase@4
$LN11@erase@4:

; 864  : 						{	// redden right subtree with black children
; 865  : 						_Color(_Pnode) = _Red;
; 866  : 						_Fixnode = _Fixnodeparent;
; 867  : 						}
; 868  : 					else
; 869  : 						{	// must rearrange right subtree
; 870  : 						if (_Color(_Right(_Pnode)) == _Black)

  00220	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00223	38 99 a0 00 00
	00		 cmp	 BYTE PTR [ecx+160], bl
  00229	75 1a		 jne	 SHORT $LN9@erase@4

; 871  : 							{	// rotate red up from left sub-subtree
; 872  : 							_Color(_Left(_Pnode)) = _Black;

  0022b	8b 10		 mov	 edx, DWORD PTR [eax]
  0022d	88 9a a0 00 00
	00		 mov	 BYTE PTR [edx+160], bl

; 873  : 							_Color(_Pnode) = _Red;
; 874  : 							_Rrotate(_Pnode);

  00233	50		 push	 eax
  00234	8b cd		 mov	 ecx, ebp
  00236	c6 80 a0 00 00
	00 00		 mov	 BYTE PTR [eax+160], 0
  0023d	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Rrotate

; 875  : 							_Pnode = _Right(_Fixnodeparent);

  00242	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
$LN9@erase@4:

; 876  : 							}
; 877  : 
; 878  : 						_Color(_Pnode) = _Color(_Fixnodeparent);

  00245	8a 8e a0 00 00
	00		 mov	 cl, BYTE PTR [esi+160]
  0024b	88 88 a0 00 00
	00		 mov	 BYTE PTR [eax+160], cl

; 879  : 						_Color(_Fixnodeparent) = _Black;

  00251	88 9e a0 00 00
	00		 mov	 BYTE PTR [esi+160], bl

; 880  : 						_Color(_Right(_Pnode)) = _Black;

  00257	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 881  : 						_Lrotate(_Fixnodeparent);

  0025a	56		 push	 esi
  0025b	8b cd		 mov	 ecx, ebp
  0025d	88 9a a0 00 00
	00		 mov	 BYTE PTR [edx+160], bl
  00263	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lrotate

; 882  : 						break;	// tree now recolored/rebalanced

  00268	e9 9e 00 00 00	 jmp	 $LN16@erase@4
$LN15@erase@4:

; 883  : 						}
; 884  : 					}
; 885  : 				else
; 886  : 					{	// fixup right subtree
; 887  : 					_Pnode = _Left(_Fixnodeparent);
; 888  : 					if (_Color(_Pnode) == _Red)

  0026d	80 b8 a0 00 00
	00 00		 cmp	 BYTE PTR [eax+160], 0
  00274	75 17		 jne	 SHORT $LN7@erase@4

; 889  : 						{	// rotate red up from left subtree
; 890  : 						_Color(_Pnode) = _Black;

  00276	88 98 a0 00 00
	00		 mov	 BYTE PTR [eax+160], bl

; 891  : 						_Color(_Fixnodeparent) = _Red;
; 892  : 						_Rrotate(_Fixnodeparent);

  0027c	56		 push	 esi
  0027d	8b cd		 mov	 ecx, ebp
  0027f	c6 86 a0 00 00
	00 00		 mov	 BYTE PTR [esi+160], 0
  00286	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Rrotate

; 893  : 						_Pnode = _Left(_Fixnodeparent);

  0028b	8b 06		 mov	 eax, DWORD PTR [esi]
$LN7@erase@4:

; 894  : 						}
; 895  : 					if (_Isnil(_Pnode))

  0028d	80 b8 a1 00 00
	00 00		 cmp	 BYTE PTR [eax+161], 0

; 896  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 897  : 					else if (_Color(_Right(_Pnode)) == _Black

  00294	75 1c		 jne	 SHORT $LN348@erase@4

; 898  : 						&& _Color(_Left(_Pnode)) == _Black)

  00296	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00299	38 99 a0 00 00
	00		 cmp	 BYTE PTR [ecx+160], bl
  0029f	75 24		 jne	 SHORT $LN4@erase@4
  002a1	8b 10		 mov	 edx, DWORD PTR [eax]
  002a3	38 9a a0 00 00
	00		 cmp	 BYTE PTR [edx+160], bl
  002a9	75 1a		 jne	 SHORT $LN4@erase@4
$LN349@erase@4:

; 899  : 						{	// redden left subtree with black children
; 900  : 						_Color(_Pnode) = _Red;

  002ab	c6 80 a0 00 00
	00 00		 mov	 BYTE PTR [eax+160], 0
$LN348@erase@4:

; 846  : 			{	// erasing black link, must recolor/rebalance tree
; 847  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 848  : 				_Fixnodeparent = _Parent(_Fixnode))

  002b2	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]

; 901  : 						_Fixnode = _Fixnodeparent;

  002b5	8b fe		 mov	 edi, esi
  002b7	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  002ba	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  002bd	0f 85 fd fe ff
	ff		 jne	 $LL18@erase@4

; 846  : 			{	// erasing black link, must recolor/rebalance tree
; 847  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 848  : 				_Fixnodeparent = _Parent(_Fixnode))

  002c3	eb 46		 jmp	 SHORT $LN16@erase@4
$LN4@erase@4:

; 902  : 						}
; 903  : 					else
; 904  : 						{	// must rearrange left subtree
; 905  : 						if (_Color(_Left(_Pnode)) == _Black)

  002c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  002c7	38 99 a0 00 00
	00		 cmp	 BYTE PTR [ecx+160], bl
  002cd	75 1a		 jne	 SHORT $LN2@erase@4

; 906  : 							{	// rotate red up from right sub-subtree
; 907  : 							_Color(_Right(_Pnode)) = _Black;

  002cf	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  002d2	88 9a a0 00 00
	00		 mov	 BYTE PTR [edx+160], bl

; 908  : 							_Color(_Pnode) = _Red;
; 909  : 							_Lrotate(_Pnode);

  002d8	50		 push	 eax
  002d9	8b cd		 mov	 ecx, ebp
  002db	c6 80 a0 00 00
	00 00		 mov	 BYTE PTR [eax+160], 0
  002e2	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lrotate

; 910  : 							_Pnode = _Left(_Fixnodeparent);

  002e7	8b 06		 mov	 eax, DWORD PTR [esi]
$LN2@erase@4:

; 911  : 							}
; 912  : 
; 913  : 						_Color(_Pnode) = _Color(_Fixnodeparent);

  002e9	8a 8e a0 00 00
	00		 mov	 cl, BYTE PTR [esi+160]
  002ef	88 88 a0 00 00
	00		 mov	 BYTE PTR [eax+160], cl

; 914  : 						_Color(_Fixnodeparent) = _Black;

  002f5	88 9e a0 00 00
	00		 mov	 BYTE PTR [esi+160], bl

; 915  : 						_Color(_Left(_Pnode)) = _Black;

  002fb	8b 10		 mov	 edx, DWORD PTR [eax]

; 916  : 						_Rrotate(_Fixnodeparent);

  002fd	56		 push	 esi
  002fe	8b cd		 mov	 ecx, ebp
  00300	88 9a a0 00 00
	00		 mov	 BYTE PTR [edx+160], bl
  00306	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Rrotate
$LN16@erase@4:

; 917  : 						break;	// tree now recolored/rebalanced
; 918  : 						}
; 919  : 					}
; 920  : 
; 921  : 			_Color(_Fixnode) = _Black;	// ensure stopping node is black

  0030b	88 9f a0 00 00
	00		 mov	 BYTE PTR [edi+160], bl
$LN19@erase@4:

; 922  : 			}
; 923  : 
; 924  : 		this->_Alnod.destroy(_Erasednode);	// destroy, free erased node

  00311	8b 4c 24 14	 mov	 ecx, DWORD PTR __Erasednode$[esp+104]
  00315	83 c1 18	 add	 ecx, 24			; 00000018H
  00318	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice

; 925  : 		this->_Alnod.deallocate(_Erasednode, 1);

  0031d	8b 44 24 14	 mov	 eax, DWORD PTR __Erasednode$[esp+104]
  00321	50		 push	 eax
  00322	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 926  : 
; 927  : 		if (0 < _Mysize)

  00327	8b 45 1c	 mov	 eax, DWORD PTR [ebp+28]
  0032a	83 c4 04	 add	 esp, 4
  0032d	85 c0		 test	 eax, eax
  0032f	76 04		 jbe	 SHORT $LN1@erase@4

; 928  : 			--_Mysize;

  00331	48		 dec	 eax
  00332	89 45 1c	 mov	 DWORD PTR [ebp+28], eax
$LN1@erase@4:

; 929  : 
; 930  : 		return (_Make_iter(_Where));	// return successor iterator

  00335	8b 44 24 6c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+100]
  00339	8b 4c 24 74	 mov	 ecx, DWORD PTR __Where$[esp+104]
  0033d	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00340	89 10		 mov	 DWORD PTR [eax], edx
  00342	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 931  : 		}

  00345	8b 4c 24 5c	 mov	 ecx, DWORD PTR __$EHRec$[esp+104]
  00349	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00350	59		 pop	 ecx
  00351	5f		 pop	 edi
  00352	5e		 pop	 esi
  00353	5d		 pop	 ebp
  00354	5b		 pop	 ebx
  00355	83 c4 54	 add	 esp, 84			; 00000054H
  00358	c2 0c 00	 ret	 12			; 0000000cH
$LN347@erase@4:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T181548[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 a8	 lea	 eax, DWORD PTR [edx-88]
  0000f	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::erase
; Function compile flags: /Ogtpy
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC			; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7out_of_range@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
_TEXT	ENDS
PUBLIC	?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0
__ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	ENDS
;	COMDAT ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
_TEXT	SEGMENT
$T182194 = -20						; size = 4
__Lock$182218 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Byte$ = 8						; size = 1
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z PROC ; std::basic_ios<char,std::char_traits<char> >::widen, COMDAT
; _this$ = ecx

; 123  : 		{	// convert _Byte to character using imbued locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 124  : 		const _Ctype& _Ctype_fac = _USE(getloc(), _Ctype);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T182194[esp+36]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00030	50		 push	 eax
  00031	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 0
  00039	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  0003e	8b 7c 24 14	 mov	 edi, DWORD PTR $T182194[esp+40]
  00042	83 c4 04	 add	 esp, 4
  00045	8b d8		 mov	 ebx, eax
  00047	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+44], -1
  0004f	85 ff		 test	 edi, edi
  00051	74 3d		 je	 SHORT $LN7@widen
  00053	6a 00		 push	 0
  00055	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$182218[esp+40]
  00059	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0005e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00061	85 c0		 test	 eax, eax
  00063	76 09		 jbe	 SHORT $LN9@widen
  00065	83 f8 ff	 cmp	 eax, -1
  00068	73 04		 jae	 SHORT $LN9@widen
  0006a	48		 dec	 eax
  0006b	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN9@widen:
  0006e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00071	f7 de		 neg	 esi
  00073	1b f6		 sbb	 esi, esi
  00075	f7 d6		 not	 esi
  00077	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$182218[esp+36]
  0007b	23 f7		 and	 esi, edi
  0007d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00082	85 f6		 test	 esi, esi
  00084	74 0a		 je	 SHORT $LN7@widen
  00086	8b 16		 mov	 edx, DWORD PTR [esi]
  00088	8b 02		 mov	 eax, DWORD PTR [edx]
  0008a	6a 01		 push	 1
  0008c	8b ce		 mov	 ecx, esi
  0008e	ff d0		 call	 eax
$LN7@widen:

; 125  : 		return (_Ctype_fac.widen(_Byte));

  00090	8b 13		 mov	 edx, DWORD PTR [ebx]
  00092	8b 44 24 28	 mov	 eax, DWORD PTR __Byte$[esp+32]
  00096	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  00099	50		 push	 eax
  0009a	8b cb		 mov	 ecx, ebx
  0009c	ff d2		 call	 edx

; 126  : 		}

  0009e	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a9	59		 pop	 ecx
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	83 c4 14	 add	 esp, 20			; 00000014H
  000b0	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T182194[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::widen
PUBLIC	?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__unwindtable$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z$0
__ehfuncinfo$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	ENDS
;	COMDAT ?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
_TEXT	SEGMENT
$T182233 = -20						; size = 4
__Lock$182257 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Byte$ = 8						; size = 1
?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen, COMDAT
; _this$ = ecx

; 123  : 		{	// convert _Byte to character using imbued locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 124  : 		const _Ctype& _Ctype_fac = _USE(getloc(), _Ctype);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T182233[esp+36]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00030	50		 push	 eax
  00031	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 0
  00039	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
  0003e	8b 7c 24 14	 mov	 edi, DWORD PTR $T182233[esp+40]
  00042	83 c4 04	 add	 esp, 4
  00045	8b d8		 mov	 ebx, eax
  00047	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+44], -1
  0004f	85 ff		 test	 edi, edi
  00051	74 3d		 je	 SHORT $LN7@widen@2
  00053	6a 00		 push	 0
  00055	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$182257[esp+40]
  00059	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0005e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00061	85 c0		 test	 eax, eax
  00063	76 09		 jbe	 SHORT $LN9@widen@2
  00065	83 f8 ff	 cmp	 eax, -1
  00068	73 04		 jae	 SHORT $LN9@widen@2
  0006a	48		 dec	 eax
  0006b	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN9@widen@2:
  0006e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00071	f7 de		 neg	 esi
  00073	1b f6		 sbb	 esi, esi
  00075	f7 d6		 not	 esi
  00077	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$182257[esp+36]
  0007b	23 f7		 and	 esi, edi
  0007d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00082	85 f6		 test	 esi, esi
  00084	74 0a		 je	 SHORT $LN7@widen@2
  00086	8b 16		 mov	 edx, DWORD PTR [esi]
  00088	8b 02		 mov	 eax, DWORD PTR [edx]
  0008a	6a 01		 push	 1
  0008c	8b ce		 mov	 ecx, esi
  0008e	ff d0		 call	 eax
$LN7@widen@2:

; 125  : 		return (_Ctype_fac.widen(_Byte));

  00090	8b 13		 mov	 edx, DWORD PTR [ebx]
  00092	8b 44 24 28	 mov	 eax, DWORD PTR __Byte$[esp+32]
  00096	8b 52 28	 mov	 edx, DWORD PTR [edx+40]
  00099	50		 push	 eax
  0009a	8b cb		 mov	 ecx, ebx
  0009c	ff d2		 call	 edx

; 126  : 		}

  0009e	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a9	59		 pop	 ecx
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	83 c4 14	 add	 esp, 20			; 00000014H
  000b0	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T182233[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$0
__ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
_TEXT	SEGMENT
$T182275 = -44						; size = 4
$T182272 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 53   : 	{	// return string + NTCS

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 54   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 4c 24 40	 mov	 ecx, DWORD PTR __Left$[esp+52]
  00029	33 ff		 xor	 edi, edi
  0002b	6a ff		 push	 -1
  0002d	57		 push	 edi
  0002e	33 c0		 xor	 eax, eax
  00030	51		 push	 ecx
  00031	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T182272[esp+68]
  00035	89 7c 24 18	 mov	 DWORD PTR $T182275[esp+68], edi
  00039	c7 44 24 34 07
	00 00 00	 mov	 DWORD PTR $T182272[esp+92], 7
  00041	89 7c 24 30	 mov	 DWORD PTR $T182272[esp+88], edi
  00045	66 89 44 24 20	 mov	 WORD PTR $T182272[esp+72], ax
  0004a	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0004f	8b 54 24 44	 mov	 edx, DWORD PTR __Right$[esp+52]
  00053	8b c2		 mov	 eax, edx
  00055	89 7c 24 34	 mov	 DWORD PTR __$EHRec$[esp+64], edi
  00059	8d 70 02	 lea	 esi, DWORD PTR [eax+2]
  0005c	8d 64 24 00	 npad	 4
$LL96@operator@33:
  00060	66 8b 08	 mov	 cx, WORD PTR [eax]
  00063	83 c0 02	 add	 eax, 2
  00066	66 3b cf	 cmp	 cx, di
  00069	75 f5		 jne	 SHORT $LL96@operator@33
  0006b	2b c6		 sub	 eax, esi
  0006d	d1 f8		 sar	 eax, 1
  0006f	50		 push	 eax
  00070	52		 push	 edx
  00071	8d 4c 24 18	 lea	 ecx, DWORD PTR $T182272[esp+64]
  00075	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  0007a	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  0007e	6a ff		 push	 -1
  00080	57		 push	 edi
  00081	33 d2		 xor	 edx, edx
  00083	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  0008a	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0008d	50		 push	 eax
  0008e	8b ce		 mov	 ecx, esi
  00090	66 89 56 04	 mov	 WORD PTR [esi+4], dx
  00094	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00099	83 7c 24 28 08	 cmp	 DWORD PTR $T182272[esp+80], 8
  0009e	72 0d		 jb	 SHORT $LN97@operator@33
  000a0	8b 44 24 14	 mov	 eax, DWORD PTR $T182272[esp+60]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000aa	83 c4 04	 add	 esp, 4
$LN97@operator@33:
  000ad	8b c6		 mov	 eax, esi

; 55   : 	}

  000af	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	83 c4 2c	 add	 esp, 44			; 0000002cH
  000c0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T182272[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
PUBLIC	??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
;	COMDAT ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$147171 = -36					; size = 4
__Lock$182680 = -32					; size = 4
__Lock$147170 = -28					; size = 4
$T182673 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$182702 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$147170[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, 0 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$147171[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet@4
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$182680[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, 0 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet@4
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, eax ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
$LN10@use_facet@4:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$182680[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet@4:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet@4
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet@4
$LN30@use_facet@4:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet@4
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet@4
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet@4
$LN20@use_facet@4:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet@4
$LN16@use_facet@4:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet@4:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet@4
$LN31@use_facet@4:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet@4

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet@4
$LN4@use_facet@4:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$147171[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet@4

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T182673[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T182673[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet@4:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$147171[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$182702[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet@4
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet@4:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$182702[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet@4:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$147170[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet@4:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$147170[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
PUBLIC	?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
PUBLIC	??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::numpunct<char> >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$147532 = -36					; size = 4
__Lock$182727 = -32					; size = 4
__Lock$147531 = -28					; size = 4
$T182720 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$182749 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::numpunct<char> >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$147531[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, 0 ; std::numpunct<char>::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$147532[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet@5
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$182727[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, 0 ; std::numpunct<char>::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet@5
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, eax ; std::numpunct<char>::id
$LN10@use_facet@5:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$182727[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet@5:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet@5
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet@5
$LN30@use_facet@5:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet@5
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet@5
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet@5
$LN20@use_facet@5:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet@5
$LN16@use_facet@5:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet@5:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet@5
$LN31@use_facet@5:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet@5

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet@5
$LN4@use_facet@5:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$147532[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<char>::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet@5

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T182720[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T182720[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet@5:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$147532[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$182749[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::numpunct<char> >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet@5
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet@5:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$182749[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet@5:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$147531[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet@5:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$147531[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::numpunct<char> >
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@V?$allocator@UHostDevice@@@2@@stdext@@YAPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@0PAU1@AAV?$allocator@UHostDevice@@@3@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@V?$allocator@UHostDevice@@@2@@stdext@@YAPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@0PAU1@AAV?$allocator@UHostDevice@@@3@@Z
_TEXT	SEGMENT
$T182767 = -4						; size = 1
__First$ = 8						; size = 8
__Cat$182772 = 16					; size = 1
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@V?$allocator@UHostDevice@@@2@@stdext@@YAPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@0PAU1@AAV?$allocator@UHostDevice@@@3@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$182772[esp]
  00005	8b 54 24 1c	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T182767[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T182767[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 1c	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Last$[esp+12]
  0001a	52		 push	 edx
  0001b	8b 54 24 18	 mov	 edx, DWORD PTR __First$[esp+16]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >

; 823  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@V?$allocator@UHostDevice@@@2@@stdext@@YAPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@0PAU1@AAV?$allocator@UHostDevice@@@3@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<HostDevice> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

  00000	56		 push	 esi

; 233  : 	for (; _First != _Last; ++_First)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 13		 je	 SHORT $LN1@Destroy_ra
  0000e	8b ff		 npad	 2
$LL3@Destroy_ra:

; 234  : 		_Al.destroy(_First);

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00017	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0001d	3b f7		 cmp	 esi, edi
  0001f	75 ef		 jne	 SHORT $LL3@Destroy_ra
$LN1@Destroy_ra:
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 235  : 	}

  00023	c3		 ret	 0
??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert<std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	SEGMENT
__catchsym$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$0
__unwindtable$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$2
__ehfuncinfo$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
$T182831 = -40						; size = 8
__Next$ = -32						; size = 8
__Before$148349 = -24					; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__First$ = 16						; size = 8
__Last$ = 24						; size = 8
___formal$ = 32						; size = 1
??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert<std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1> >, COMDAT
; _this$ = ecx

; 762  : 		void _Insert(const_iterator _Where,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d ec	 mov	 DWORD PTR _this$[ebp], ebx

; 763  : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 764  : 		{	// insert [_First, _Last) at _Where, forward iterators
; 765  : 
; 766  :  #if _HAS_ITERATOR_DEBUGGING
; 767  : 		_DEBUG_RANGE(_First, _Last);
; 768  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 769  : 
; 770  : 		_Iter _Next = _First;

  00030	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  00033	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  00036	89 45 e0	 mov	 DWORD PTR __Next$[ebp], eax
  00039	89 4d e4	 mov	 DWORD PTR __Next$[ebp+4], ecx

; 771  : 
; 772  : 		_TRY_BEGIN

  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 773  : 		for (; _First != _Last; ++_First)

$LL24@Insert:
  00043	85 c0		 test	 eax, eax
  00045	74 05		 je	 SHORT $LN41@Insert
  00047	3b 45 18	 cmp	 eax, DWORD PTR __Last$[ebp]
  0004a	74 08		 je	 SHORT $LN40@Insert
$LN41@Insert:
  0004c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00051	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
$LN40@Insert:
  00054	8b 55 14	 mov	 edx, DWORD PTR __First$[ebp+4]
  00057	3b 55 1c	 cmp	 edx, DWORD PTR __Last$[ebp+4]
  0005a	0f 84 de 00 00
	00		 je	 $LN4@Insert

; 774  : 			_Insert(_Where, *_First);

  00060	85 c0		 test	 eax, eax
  00062	75 0c		 jne	 SHORT $LN89@Insert
  00064	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00069	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  0006c	85 c0		 test	 eax, eax
  0006e	74 04		 je	 SHORT $LN66@Insert
$LN89@Insert:
  00070	8b 00		 mov	 eax, DWORD PTR [eax]
  00072	eb 02		 jmp	 SHORT $LN67@Insert
$LN66@Insert:
  00074	33 c0		 xor	 eax, eax
$LN67@Insert:
  00076	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  00079	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0007c	75 05		 jne	 SHORT $LN52@Insert
  0007e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN52@Insert:
  00083	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp+4]
  00086	8b 45 14	 mov	 eax, DWORD PTR __First$[ebp+4]
  00089	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0008c	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
  0008f	83 c0 08	 add	 eax, 8
  00092	50		 push	 eax
  00093	52		 push	 edx
  00094	51		 push	 ecx
  00095	8b cb		 mov	 ecx, ebx
  00097	e8 00 00 00 00	 call	 ?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@0ABK@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode
  0009c	6a 01		 push	 1
  0009e	8b cb		 mov	 ecx, ebx
  000a0	8b f0		 mov	 esi, eax
  000a2	e8 00 00 00 00	 call	 ?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Incsize
  000a7	89 37		 mov	 DWORD PTR [edi], esi
  000a9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ac	89 30		 mov	 DWORD PTR [eax], esi
  000ae	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  000b1	85 c0		 test	 eax, eax
  000b3	75 0c		 jne	 SHORT $LN88@Insert
  000b5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000ba	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  000bd	85 c0		 test	 eax, eax
  000bf	74 04		 je	 SHORT $LN30@Insert
$LN88@Insert:

; 773  : 		for (; _First != _Last; ++_First)

  000c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c3	eb 02		 jmp	 SHORT $LN31@Insert
$LN30@Insert:
  000c5	33 c9		 xor	 ecx, ecx
$LN31@Insert:
  000c7	8b 55 14	 mov	 edx, DWORD PTR __First$[ebp+4]
  000ca	3b 51 14	 cmp	 edx, DWORD PTR [ecx+20]
  000cd	75 08		 jne	 SHORT $LN16@Insert
  000cf	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000d4	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
$LN16@Insert:
  000d7	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  000da	8b 11		 mov	 edx, DWORD PTR [ecx]
  000dc	89 55 14	 mov	 DWORD PTR __First$[ebp+4], edx
  000df	e9 5f ff ff ff	 jmp	 $LL24@Insert
__catch$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$0:

; 775  : 		_CATCH_ALL
; 776  : 		for (; _Next != _First; ++_Next)

  000e4	8d 45 10	 lea	 eax, DWORD PTR __First$[ebp]
  000e7	50		 push	 eax
  000e8	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  000eb	e8 00 00 00 00	 call	 ??9?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator!=
  000f0	84 c0		 test	 al, al
  000f2	74 41		 je	 SHORT $LN1@Insert
  000f4	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
$LL3@Insert:

; 777  : 			{	// undo inserts
; 778  : 			const_iterator _Before = _Where;

  000f7	8b 4d 08	 mov	 ecx, DWORD PTR __Where$[ebp]
  000fa	8b 55 0c	 mov	 edx, DWORD PTR __Where$[ebp+4]
  000fd	89 4d e8	 mov	 DWORD PTR __Before$148349[ebp], ecx

; 779  : 			erase(--_Before);

  00100	8d 4d e8	 lea	 ecx, DWORD PTR __Before$148349[ebp]
  00103	89 55 ec	 mov	 DWORD PTR __Before$148349[ebp+4], edx
  00106	e8 00 00 00 00	 call	 ??F?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAEAAV012@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator--
  0010b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0010e	8b 10		 mov	 edx, DWORD PTR [eax]
  00110	51		 push	 ecx
  00111	52		 push	 edx
  00112	8d 45 d8	 lea	 eax, DWORD PTR $T182831[ebp]
  00115	50		 push	 eax
  00116	8b ce		 mov	 ecx, esi
  00118	e8 00 00 00 00	 call	 ?erase@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::erase
  0011d	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  00120	e8 00 00 00 00	 call	 ??E?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QAEAAV012@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator++
  00125	8d 4d 10	 lea	 ecx, DWORD PTR __First$[ebp]
  00128	51		 push	 ecx
  00129	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  0012c	e8 00 00 00 00	 call	 ??9?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1>::operator!=
  00131	84 c0		 test	 al, al
  00133	75 c2		 jne	 SHORT $LL3@Insert
$LN1@Insert:

; 780  : 			}
; 781  : 		_RERAISE;

  00135	6a 00		 push	 0
  00137	6a 00		 push	 0
  00139	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Insert:

; 782  : 		_CATCH_END
; 783  : 		}

  0013e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00141	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00148	59		 pop	 ecx
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 1c 00	 ret	 28			; 0000001cH
$LN91@Insert:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert<std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1> >
PUBLIC	??_C@_0CH@LFBCKMNM@SYS_ENCRYPTION_PRETEST_INFO2_POR@ ; `string'
PUBLIC	??_C@_0CH@PKFDDKBL@SYS_ENCRYPTION_PRETEST_INFO2_POR@ ; `string'
PUBLIC	??_C@_0CH@ODEIALFK@SYS_ENCRYPTION_PRETEST_INFO2_POR@ ; `string'
PUBLIC	??_C@_0CH@MIGFFIJJ@SYS_ENCRYPTION_PRETEST_INFO2_POR@ ; `string'
PUBLIC	?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetSysEncryptionPretestInfo2String
;	COMDAT ??_C@_0CH@LFBCKMNM@SYS_ENCRYPTION_PRETEST_INFO2_POR@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0CH@LFBCKMNM@SYS_ENCRYPTION_PRETEST_INFO2_POR@ DB 'SYS_ENCRYPTION_P'
	DB	'RETEST_INFO2_PORTION_4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@PKFDDKBL@SYS_ENCRYPTION_PRETEST_INFO2_POR@
CONST	SEGMENT
??_C@_0CH@PKFDDKBL@SYS_ENCRYPTION_PRETEST_INFO2_POR@ DB 'SYS_ENCRYPTION_P'
	DB	'RETEST_INFO2_PORTION_3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@ODEIALFK@SYS_ENCRYPTION_PRETEST_INFO2_POR@
CONST	SEGMENT
??_C@_0CH@ODEIALFK@SYS_ENCRYPTION_PRETEST_INFO2_POR@ DB 'SYS_ENCRYPTION_P'
	DB	'RETEST_INFO2_PORTION_2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@MIGFFIJJ@SYS_ENCRYPTION_PRETEST_INFO2_POR@
CONST	SEGMENT
??_C@_0CH@MIGFFIJJ@SYS_ENCRYPTION_PRETEST_INFO2_POR@ DB 'SYS_ENCRYPTION_P'
	DB	'RETEST_INFO2_PORTION_1', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$3
__ehfuncinfo$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
xdata$x	ENDS
;	COMDAT ?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
_TEXT	SEGMENT
$T183013 = -128						; size = 4
$T183004 = -124						; size = 28
$T183007 = -96						; size = 28
$T183006 = -68						; size = 28
$T183005 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ PROC ; GetSysEncryptionPretestInfo2String, COMDAT

; 2458 : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 74	 sub	 esp, 116		; 00000074H
  00011	53		 push	 ebx
  00012	55		 push	 ebp
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c4		 xor	 eax, esp
  0001c	50		 push	 eax
  0001d	8d 84 24 88 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+148]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2459 : 	// This huge string is divided into smaller portions to make it easier for translators to
; 2460 : 	// re-translate it when a minor modification is made to it (the whole huge string will not be
; 2461 : 	// reverted to English, so they will have to translate only a small portion of it).
; 2462 : 	return (wstring (L"\n")

  0002a	6a 01		 push	 1
  0002c	33 f6		 xor	 esi, esi
  0002e	33 c0		 xor	 eax, eax
  00030	bb 07 00 00 00	 mov	 ebx, 7
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@
  0003a	8d 4c 24 20	 lea	 ecx, DWORD PTR $T183004[esp+156]
  0003e	89 74 24 1c	 mov	 DWORD PTR $T183013[esp+156], esi
  00042	89 5c 24 38	 mov	 DWORD PTR $T183004[esp+180], ebx
  00046	89 74 24 34	 mov	 DWORD PTR $T183004[esp+176], esi
  0004a	66 89 44 24 24	 mov	 WORD PTR $T183004[esp+160], ax
  0004f	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MIGFFIJJ@SYS_ENCRYPTION_PRETEST_INFO2_POR@
  00059	89 b4 24 94 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+160], esi
  00060	e8 00 00 00 00	 call	 _GetString
  00065	50		 push	 eax
  00066	8d 4c 24 20	 lea	 ecx, DWORD PTR $T183004[esp+156]
  0006a	51		 push	 ecx
  0006b	8d 54 24 78	 lea	 edx, DWORD PTR $T183005[esp+160]
  0006f	52		 push	 edx
  00070	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00075	8b f8		 mov	 edi, eax
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@ODEIALFK@SYS_ENCRYPTION_PRETEST_INFO2_POR@
  0007c	c6 84 24 a4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+176], 1
  00084	e8 00 00 00 00	 call	 _GetString
  00089	50		 push	 eax
  0008a	8d 44 24 68	 lea	 eax, DWORD PTR $T183006[esp+172]
  0008e	57		 push	 edi
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00095	8b f8		 mov	 edi, eax
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@PKFDDKBL@SYS_ENCRYPTION_PRETEST_INFO2_POR@
  0009c	c6 84 24 b4 00
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+192], 2
  000a4	e8 00 00 00 00	 call	 _GetString
  000a9	50		 push	 eax
  000aa	8d 4c 24 5c	 lea	 ecx, DWORD PTR $T183007[esp+188]
  000ae	57		 push	 edi
  000af	51		 push	 ecx
  000b0	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000b5	8b f8		 mov	 edi, eax
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@LFBCKMNM@SYS_ENCRYPTION_PRETEST_INFO2_POR@
  000bc	c6 84 24 c4 00
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+208], 3
  000c4	e8 00 00 00 00	 call	 _GetString
  000c9	8b ac 24 cc 00
	00 00		 mov	 ebp, DWORD PTR ___$ReturnUdt$[esp+196]
  000d0	50		 push	 eax
  000d1	57		 push	 edi
  000d2	55		 push	 ebp
  000d3	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000d8	bf 08 00 00 00	 mov	 edi, 8
  000dd	83 c4 40	 add	 esp, 64			; 00000040H
  000e0	39 7c 24 4c	 cmp	 DWORD PTR $T183007[esp+172], edi
  000e4	72 0d		 jb	 SHORT $LN65@GetSysEncr
  000e6	8b 54 24 38	 mov	 edx, DWORD PTR $T183007[esp+152]
  000ea	52		 push	 edx
  000eb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000f0	83 c4 04	 add	 esp, 4
$LN65@GetSysEncr:
  000f3	33 c0		 xor	 eax, eax
  000f5	89 5c 24 4c	 mov	 DWORD PTR $T183007[esp+172], ebx
  000f9	89 74 24 48	 mov	 DWORD PTR $T183007[esp+168], esi
  000fd	66 89 44 24 38	 mov	 WORD PTR $T183007[esp+152], ax
  00102	39 7c 24 68	 cmp	 DWORD PTR $T183006[esp+172], edi
  00106	72 0d		 jb	 SHORT $LN93@GetSysEncr
  00108	8b 4c 24 54	 mov	 ecx, DWORD PTR $T183006[esp+152]
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00112	83 c4 04	 add	 esp, 4
$LN93@GetSysEncr:
  00115	33 d2		 xor	 edx, edx
  00117	89 5c 24 68	 mov	 DWORD PTR $T183006[esp+172], ebx
  0011b	89 74 24 64	 mov	 DWORD PTR $T183006[esp+168], esi
  0011f	66 89 54 24 54	 mov	 WORD PTR $T183006[esp+152], dx
  00124	39 bc 24 84 00
	00 00		 cmp	 DWORD PTR $T183005[esp+172], edi
  0012b	72 0d		 jb	 SHORT $LN121@GetSysEncr
  0012d	8b 44 24 70	 mov	 eax, DWORD PTR $T183005[esp+152]
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00137	83 c4 04	 add	 esp, 4
$LN121@GetSysEncr:
  0013a	33 c9		 xor	 ecx, ecx
  0013c	89 9c 24 84 00
	00 00		 mov	 DWORD PTR $T183005[esp+172], ebx
  00143	89 b4 24 80 00
	00 00		 mov	 DWORD PTR $T183005[esp+168], esi
  0014a	66 89 4c 24 70	 mov	 WORD PTR $T183005[esp+152], cx
  0014f	39 7c 24 30	 cmp	 DWORD PTR $T183004[esp+172], edi
  00153	72 0d		 jb	 SHORT $LN159@GetSysEncr
  00155	8b 54 24 1c	 mov	 edx, DWORD PTR $T183004[esp+152]
  00159	52		 push	 edx
  0015a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0015f	83 c4 04	 add	 esp, 4
$LN159@GetSysEncr:
  00162	8b c5		 mov	 eax, ebp

; 2463 : 		+ GetString ("SYS_ENCRYPTION_PRETEST_INFO2_PORTION_1")
; 2464 : 		+ GetString ("SYS_ENCRYPTION_PRETEST_INFO2_PORTION_2")
; 2465 : 		+ GetString ("SYS_ENCRYPTION_PRETEST_INFO2_PORTION_3")
; 2466 : 		+ GetString ("SYS_ENCRYPTION_PRETEST_INFO2_PORTION_4"));
; 2467 : }

  00164	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+148]
  0016b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00172	59		 pop	 ecx
  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	5d		 pop	 ebp
  00176	5b		 pop	 ebx
  00177	81 c4 80 00 00
	00		 add	 esp, 128		; 00000080H
  0017d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0:
  00000	8d 4d 84	 lea	 ecx, DWORD PTR $T183004[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T183005[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$2:
  00010	8d 4d bc	 lea	 ecx, DWORD PTR $T183006[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$3:
  00018	8d 4d a0	 lea	 ecx, DWORD PTR $T183007[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 82 7c ff ff
	ff		 lea	 eax, DWORD PTR [edx-132]
  0002a	8b 8a 78 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-136]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ENDP ; GetSysEncryptionPretestInfo2String
PUBLIC	??_C@_0BL@BIFKAJPO@RESCUE_DISK_HELP_PORTION_9?$AA@ ; `string'
PUBLIC	??_C@_0BL@BEBDILP@RESCUE_DISK_HELP_PORTION_8?$AA@ ; `string'
PUBLIC	??_C@_0BL@IGNJCEHA@RESCUE_DISK_HELP_PORTION_7?$AA@ ; `string'
PUBLIC	??_C@_0BL@JPMCBFDB@RESCUE_DISK_HELP_PORTION_6?$AA@ ; `string'
PUBLIC	??_C@_0BL@LEOPEGPC@RESCUE_DISK_HELP_PORTION_5?$AA@ ; `string'
PUBLIC	??_C@_0BL@KNPEHHLD@RESCUE_DISK_HELP_PORTION_4?$AA@ ; `string'
PUBLIC	??_C@_0BL@OCLFOBHE@RESCUE_DISK_HELP_PORTION_3?$AA@ ; `string'
PUBLIC	??_C@_0BL@PLKONADF@RESCUE_DISK_HELP_PORTION_2?$AA@ ; `string'
PUBLIC	??_C@_0BL@NAIDIDPG@RESCUE_DISK_HELP_PORTION_1?$AA@ ; `string'
PUBLIC	?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetRescueDiskHelpString
;	COMDAT ??_C@_0BL@BIFKAJPO@RESCUE_DISK_HELP_PORTION_9?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0BL@BIFKAJPO@RESCUE_DISK_HELP_PORTION_9?$AA@ DB 'RESCUE_DISK_HELP_P'
	DB	'ORTION_9', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BEBDILP@RESCUE_DISK_HELP_PORTION_8?$AA@
CONST	SEGMENT
??_C@_0BL@BEBDILP@RESCUE_DISK_HELP_PORTION_8?$AA@ DB 'RESCUE_DISK_HELP_PO'
	DB	'RTION_8', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IGNJCEHA@RESCUE_DISK_HELP_PORTION_7?$AA@
CONST	SEGMENT
??_C@_0BL@IGNJCEHA@RESCUE_DISK_HELP_PORTION_7?$AA@ DB 'RESCUE_DISK_HELP_P'
	DB	'ORTION_7', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JPMCBFDB@RESCUE_DISK_HELP_PORTION_6?$AA@
CONST	SEGMENT
??_C@_0BL@JPMCBFDB@RESCUE_DISK_HELP_PORTION_6?$AA@ DB 'RESCUE_DISK_HELP_P'
	DB	'ORTION_6', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LEOPEGPC@RESCUE_DISK_HELP_PORTION_5?$AA@
CONST	SEGMENT
??_C@_0BL@LEOPEGPC@RESCUE_DISK_HELP_PORTION_5?$AA@ DB 'RESCUE_DISK_HELP_P'
	DB	'ORTION_5', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KNPEHHLD@RESCUE_DISK_HELP_PORTION_4?$AA@
CONST	SEGMENT
??_C@_0BL@KNPEHHLD@RESCUE_DISK_HELP_PORTION_4?$AA@ DB 'RESCUE_DISK_HELP_P'
	DB	'ORTION_4', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OCLFOBHE@RESCUE_DISK_HELP_PORTION_3?$AA@
CONST	SEGMENT
??_C@_0BL@OCLFOBHE@RESCUE_DISK_HELP_PORTION_3?$AA@ DB 'RESCUE_DISK_HELP_P'
	DB	'ORTION_3', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PLKONADF@RESCUE_DISK_HELP_PORTION_2?$AA@
CONST	SEGMENT
??_C@_0BL@PLKONADF@RESCUE_DISK_HELP_PORTION_2?$AA@ DB 'RESCUE_DISK_HELP_P'
	DB	'ORTION_2', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NAIDIDPG@RESCUE_DISK_HELP_PORTION_1?$AA@
CONST	SEGMENT
??_C@_0BL@NAIDIDPG@RESCUE_DISK_HELP_PORTION_1?$AA@ DB 'RESCUE_DISK_HELP_P'
	DB	'ORTION_1', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$7
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
xdata$x	ENDS
;	COMDAT ?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
_TEXT	SEGMENT
$T183689 = -240						; size = 4
$T183672 = -236						; size = 28
$T183677 = -208						; size = 28
$T183676 = -180						; size = 28
$T183675 = -152						; size = 28
$T183679 = -124						; size = 28
$T183674 = -96						; size = 28
$T183678 = -68						; size = 28
$T183673 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ PROC ; GetRescueDiskHelpString, COMDAT

; 2471 : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00014	53		 push	 ebx
  00015	55		 push	 ebp
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c4		 xor	 eax, esp
  0001f	50		 push	 eax
  00020	8d 84 24 f8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+260]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2472 : 	// This huge string is divided into smaller portions to make it easier for translators to
; 2473 : 	// re-translate it when a minor modification is made to it (the whole huge string will not be
; 2474 : 	// reverted to English, so they will have to translate only a small portion of it).
; 2475 : 	return (wstring (

  0002d	33 ff		 xor	 edi, edi
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@NAIDIDPG@RESCUE_DISK_HELP_PORTION_1?$AA@
  00034	89 7c 24 18	 mov	 DWORD PTR $T183689[esp+264], edi
  00038	e8 00 00 00 00	 call	 _GetString
  0003d	83 c4 04	 add	 esp, 4
  00040	33 c9		 xor	 ecx, ecx
  00042	66 89 4c 24 1c	 mov	 WORD PTR $T183672[esp+264], cx
  00047	bb 07 00 00 00	 mov	 ebx, 7
  0004c	8b c8		 mov	 ecx, eax
  0004e	89 5c 24 30	 mov	 DWORD PTR $T183672[esp+284], ebx
  00052	89 7c 24 2c	 mov	 DWORD PTR $T183672[esp+280], edi
  00056	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL275@GetRescueD:
  00060	66 8b 31	 mov	 si, WORD PTR [ecx]
  00063	83 c1 02	 add	 ecx, 2
  00066	66 3b f7	 cmp	 si, di
  00069	75 f5		 jne	 SHORT $LL275@GetRescueD
  0006b	2b ca		 sub	 ecx, edx
  0006d	d1 f9		 sar	 ecx, 1
  0006f	51		 push	 ecx
  00070	50		 push	 eax
  00071	8d 4c 24 20	 lea	 ecx, DWORD PTR $T183672[esp+268]
  00075	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PLKONADF@RESCUE_DISK_HELP_PORTION_2?$AA@
  0007f	89 bc 24 04 01
	00 00		 mov	 DWORD PTR __$EHRec$[esp+272], edi
  00086	e8 00 00 00 00	 call	 _GetString
  0008b	50		 push	 eax
  0008c	8d 54 24 20	 lea	 edx, DWORD PTR $T183672[esp+268]
  00090	52		 push	 edx
  00091	8d 84 24 e8 00
	00 00		 lea	 eax, DWORD PTR $T183673[esp+272]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0009e	8b f0		 mov	 esi, eax
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@OCLFOBHE@RESCUE_DISK_HELP_PORTION_3?$AA@
  000a5	c6 84 24 14 01
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+288], 1
  000ad	e8 00 00 00 00	 call	 _GetString
  000b2	50		 push	 eax
  000b3	8d 8c 24 bc 00
	00 00		 lea	 ecx, DWORD PTR $T183674[esp+284]
  000ba	56		 push	 esi
  000bb	51		 push	 ecx
  000bc	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000c1	8b f0		 mov	 esi, eax
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@KNPEHHLD@RESCUE_DISK_HELP_PORTION_4?$AA@
  000c8	c6 84 24 24 01
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+304], 2
  000d0	e8 00 00 00 00	 call	 _GetString
  000d5	50		 push	 eax
  000d6	8d 94 24 94 00
	00 00		 lea	 edx, DWORD PTR $T183675[esp+300]
  000dd	56		 push	 esi
  000de	52		 push	 edx
  000df	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000e4	8b f0		 mov	 esi, eax
  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LEOPEGPC@RESCUE_DISK_HELP_PORTION_5?$AA@
  000eb	c6 84 24 34 01
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+320], 3
  000f3	e8 00 00 00 00	 call	 _GetString
  000f8	50		 push	 eax
  000f9	8d 84 24 88 00
	00 00		 lea	 eax, DWORD PTR $T183676[esp+316]
  00100	56		 push	 esi
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00107	83 c4 40	 add	 esp, 64			; 00000040H
  0010a	8b f0		 mov	 esi, eax
  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JPMCBFDB@RESCUE_DISK_HELP_PORTION_6?$AA@
  00111	c6 84 24 04 01
	00 00 04	 mov	 BYTE PTR __$EHRec$[esp+272], 4
  00119	e8 00 00 00 00	 call	 _GetString
  0011e	50		 push	 eax
  0011f	8d 4c 24 3c	 lea	 ecx, DWORD PTR $T183677[esp+268]
  00123	56		 push	 esi
  00124	51		 push	 ecx
  00125	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0012a	8b f0		 mov	 esi, eax
  0012c	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@IGNJCEHA@RESCUE_DISK_HELP_PORTION_7?$AA@
  00131	c6 84 24 14 01
	00 00 05	 mov	 BYTE PTR __$EHRec$[esp+288], 5
  00139	e8 00 00 00 00	 call	 _GetString
  0013e	50		 push	 eax
  0013f	8d 94 24 d8 00
	00 00		 lea	 edx, DWORD PTR $T183678[esp+284]
  00146	56		 push	 esi
  00147	52		 push	 edx
  00148	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0014d	8b f0		 mov	 esi, eax
  0014f	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@BEBDILP@RESCUE_DISK_HELP_PORTION_8?$AA@
  00154	c6 84 24 24 01
	00 00 06	 mov	 BYTE PTR __$EHRec$[esp+304], 6
  0015c	e8 00 00 00 00	 call	 _GetString
  00161	50		 push	 eax
  00162	8d 84 24 b0 00
	00 00		 lea	 eax, DWORD PTR $T183679[esp+300]
  00169	56		 push	 esi
  0016a	50		 push	 eax
  0016b	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00170	8b f0		 mov	 esi, eax
  00172	88 9c 24 30 01
	00 00		 mov	 BYTE PTR __$EHRec$[esp+316], bl
  00179	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@BIFKAJPO@RESCUE_DISK_HELP_PORTION_9?$AA@
  0017e	e8 00 00 00 00	 call	 _GetString
  00183	8b ac 24 3c 01
	00 00		 mov	 ebp, DWORD PTR ___$ReturnUdt$[esp+308]
  0018a	50		 push	 eax
  0018b	56		 push	 esi
  0018c	55		 push	 ebp
  0018d	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00192	be 08 00 00 00	 mov	 esi, 8
  00197	83 c4 40	 add	 esp, 64			; 00000040H
  0019a	39 b4 24 a0 00
	00 00		 cmp	 DWORD PTR $T183679[esp+284], esi
  001a1	72 10		 jb	 SHORT $LN69@GetRescueD
  001a3	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR $T183679[esp+264]
  001aa	51		 push	 ecx
  001ab	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001b0	83 c4 04	 add	 esp, 4
$LN69@GetRescueD:
  001b3	33 d2		 xor	 edx, edx
  001b5	89 9c 24 a0 00
	00 00		 mov	 DWORD PTR $T183679[esp+284], ebx
  001bc	89 bc 24 9c 00
	00 00		 mov	 DWORD PTR $T183679[esp+280], edi
  001c3	66 89 94 24 8c
	00 00 00	 mov	 WORD PTR $T183679[esp+264], dx
  001cb	39 b4 24 d8 00
	00 00		 cmp	 DWORD PTR $T183678[esp+284], esi
  001d2	72 10		 jb	 SHORT $LN97@GetRescueD
  001d4	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR $T183678[esp+264]
  001db	50		 push	 eax
  001dc	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001e1	83 c4 04	 add	 esp, 4
$LN97@GetRescueD:
  001e4	33 c9		 xor	 ecx, ecx
  001e6	89 9c 24 d8 00
	00 00		 mov	 DWORD PTR $T183678[esp+284], ebx
  001ed	89 bc 24 d4 00
	00 00		 mov	 DWORD PTR $T183678[esp+280], edi
  001f4	66 89 8c 24 c4
	00 00 00	 mov	 WORD PTR $T183678[esp+264], cx
  001fc	39 74 24 4c	 cmp	 DWORD PTR $T183677[esp+284], esi
  00200	72 0d		 jb	 SHORT $LN125@GetRescueD
  00202	8b 54 24 38	 mov	 edx, DWORD PTR $T183677[esp+264]
  00206	52		 push	 edx
  00207	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0020c	83 c4 04	 add	 esp, 4
$LN125@GetRescueD:
  0020f	33 c0		 xor	 eax, eax
  00211	89 5c 24 4c	 mov	 DWORD PTR $T183677[esp+284], ebx
  00215	89 7c 24 48	 mov	 DWORD PTR $T183677[esp+280], edi
  00219	66 89 44 24 38	 mov	 WORD PTR $T183677[esp+264], ax
  0021e	39 74 24 68	 cmp	 DWORD PTR $T183676[esp+284], esi
  00222	72 0d		 jb	 SHORT $LN153@GetRescueD
  00224	8b 4c 24 54	 mov	 ecx, DWORD PTR $T183676[esp+264]
  00228	51		 push	 ecx
  00229	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0022e	83 c4 04	 add	 esp, 4
$LN153@GetRescueD:
  00231	33 d2		 xor	 edx, edx
  00233	89 5c 24 68	 mov	 DWORD PTR $T183676[esp+284], ebx
  00237	89 7c 24 64	 mov	 DWORD PTR $T183676[esp+280], edi
  0023b	66 89 54 24 54	 mov	 WORD PTR $T183676[esp+264], dx
  00240	39 b4 24 84 00
	00 00		 cmp	 DWORD PTR $T183675[esp+284], esi
  00247	72 0d		 jb	 SHORT $LN181@GetRescueD
  00249	8b 44 24 70	 mov	 eax, DWORD PTR $T183675[esp+264]
  0024d	50		 push	 eax
  0024e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00253	83 c4 04	 add	 esp, 4
$LN181@GetRescueD:
  00256	33 c9		 xor	 ecx, ecx
  00258	89 9c 24 84 00
	00 00		 mov	 DWORD PTR $T183675[esp+284], ebx
  0025f	89 bc 24 80 00
	00 00		 mov	 DWORD PTR $T183675[esp+280], edi
  00266	66 89 4c 24 70	 mov	 WORD PTR $T183675[esp+264], cx
  0026b	39 b4 24 bc 00
	00 00		 cmp	 DWORD PTR $T183674[esp+284], esi
  00272	72 10		 jb	 SHORT $LN209@GetRescueD
  00274	8b 94 24 a8 00
	00 00		 mov	 edx, DWORD PTR $T183674[esp+264]
  0027b	52		 push	 edx
  0027c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00281	83 c4 04	 add	 esp, 4
$LN209@GetRescueD:
  00284	33 c0		 xor	 eax, eax
  00286	89 9c 24 bc 00
	00 00		 mov	 DWORD PTR $T183674[esp+284], ebx
  0028d	89 bc 24 b8 00
	00 00		 mov	 DWORD PTR $T183674[esp+280], edi
  00294	66 89 84 24 a8
	00 00 00	 mov	 WORD PTR $T183674[esp+264], ax
  0029c	39 b4 24 f4 00
	00 00		 cmp	 DWORD PTR $T183673[esp+284], esi
  002a3	72 10		 jb	 SHORT $LN237@GetRescueD
  002a5	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR $T183673[esp+264]
  002ac	51		 push	 ecx
  002ad	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002b2	83 c4 04	 add	 esp, 4
$LN237@GetRescueD:
  002b5	33 d2		 xor	 edx, edx
  002b7	89 9c 24 f4 00
	00 00		 mov	 DWORD PTR $T183673[esp+284], ebx
  002be	89 bc 24 f0 00
	00 00		 mov	 DWORD PTR $T183673[esp+280], edi
  002c5	66 89 94 24 e0
	00 00 00	 mov	 WORD PTR $T183673[esp+264], dx
  002cd	39 74 24 30	 cmp	 DWORD PTR $T183672[esp+284], esi
  002d1	72 0d		 jb	 SHORT $LN276@GetRescueD
  002d3	8b 44 24 1c	 mov	 eax, DWORD PTR $T183672[esp+264]
  002d7	50		 push	 eax
  002d8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002dd	83 c4 04	 add	 esp, 4
$LN276@GetRescueD:
  002e0	8b c5		 mov	 eax, ebp

; 2476 : 		GetString ("RESCUE_DISK_HELP_PORTION_1"))
; 2477 : 		+ GetString ("RESCUE_DISK_HELP_PORTION_2")
; 2478 : 		+ GetString ("RESCUE_DISK_HELP_PORTION_3")
; 2479 : 		+ GetString ("RESCUE_DISK_HELP_PORTION_4")
; 2480 : 		+ GetString ("RESCUE_DISK_HELP_PORTION_5")
; 2481 : 		+ GetString ("RESCUE_DISK_HELP_PORTION_6")
; 2482 : 		+ GetString ("RESCUE_DISK_HELP_PORTION_7")
; 2483 : 		+ GetString ("RESCUE_DISK_HELP_PORTION_8")
; 2484 : 		+ GetString ("RESCUE_DISK_HELP_PORTION_9"));
; 2485 : }

  002e2	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+260]
  002e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002f0	59		 pop	 ecx
  002f1	5f		 pop	 edi
  002f2	5e		 pop	 esi
  002f3	5d		 pop	 ebp
  002f4	5b		 pop	 ebx
  002f5	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  002fb	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0:
  00000	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR $T183672[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$1:
  0000b	8d 4d d8	 lea	 ecx, DWORD PTR $T183673[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$2:
  00013	8d 4d a0	 lea	 ecx, DWORD PTR $T183674[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$3:
  0001b	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T183675[ebp]
  00021	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$4:
  00026	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T183676[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$5:
  00031	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T183677[ebp]
  00037	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$6:
  0003c	8d 4d bc	 lea	 ecx, DWORD PTR $T183678[ebp]
  0003f	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$7:
  00044	8d 4d 84	 lea	 ecx, DWORD PTR $T183679[ebp]
  00047	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ:
  0004c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00050	8d 82 0c ff ff
	ff		 lea	 eax, DWORD PTR [edx-244]
  00056	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  0005c	33 c8		 xor	 ecx, eax
  0005e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00063	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
  00068	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ENDP ; GetRescueDiskHelpString
PUBLIC	??_C@_0CB@MBHBFDO@DECOY_OS_INSTRUCTIONS_PORTION_18@ ; `string'
PUBLIC	??_C@_0CB@ILIPAJPB@DECOY_OS_INSTRUCTIONS_PORTION_17@ ; `string'
PUBLIC	??_C@_0CB@JCJEDILA@DECOY_OS_INSTRUCTIONS_PORTION_16@ ; `string'
PUBLIC	??_C@_0CB@LJLJGLHD@DECOY_OS_INSTRUCTIONS_PORTION_15@ ; `string'
PUBLIC	??_C@_0CB@KAKCFKDC@DECOY_OS_INSTRUCTIONS_PORTION_14@ ; `string'
PUBLIC	??_C@_0CB@OPODMMPF@DECOY_OS_INSTRUCTIONS_PORTION_13@ ; `string'
PUBLIC	??_C@_0CB@PGPIPNLE@DECOY_OS_INSTRUCTIONS_PORTION_12@ ; `string'
PUBLIC	??_C@_0CB@NNNFKOHH@DECOY_OS_INSTRUCTIONS_PORTION_11@ ; `string'
PUBLIC	??_C@_0CB@MEMOJPDG@DECOY_OS_INSTRUCTIONS_PORTION_10@ ; `string'
PUBLIC	??_C@_0CA@EBNFDEFN@DECOY_OS_INSTRUCTIONS_PORTION_9?$AA@ ; `string'
PUBLIC	??_C@_0CA@FIMOAFBM@DECOY_OS_INSTRUCTIONS_PORTION_8?$AA@ ; `string'
PUBLIC	??_C@_0CA@NPFGBJND@DECOY_OS_INSTRUCTIONS_PORTION_7?$AA@ ; `string'
PUBLIC	??_C@_0CA@MGENCIJC@DECOY_OS_INSTRUCTIONS_PORTION_6?$AA@ ; `string'
PUBLIC	??_C@_0CA@ONGAHLFB@DECOY_OS_INSTRUCTIONS_PORTION_5?$AA@ ; `string'
PUBLIC	??_C@_0CA@PEHLEKBA@DECOY_OS_INSTRUCTIONS_PORTION_4?$AA@ ; `string'
PUBLIC	??_C@_0CA@LLDKNMNH@DECOY_OS_INSTRUCTIONS_PORTION_3?$AA@ ; `string'
PUBLIC	??_C@_0CA@KCCBONJG@DECOY_OS_INSTRUCTIONS_PORTION_2?$AA@ ; `string'
PUBLIC	??_C@_0CA@IJAMLOFF@DECOY_OS_INSTRUCTIONS_PORTION_1?$AA@ ; `string'
PUBLIC	?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetDecoyOsInstructionsString
;	COMDAT ??_C@_0CB@MBHBFDO@DECOY_OS_INSTRUCTIONS_PORTION_18@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0CB@MBHBFDO@DECOY_OS_INSTRUCTIONS_PORTION_18@ DB 'DECOY_OS_INSTRUCT'
	DB	'IONS_PORTION_18', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@ILIPAJPB@DECOY_OS_INSTRUCTIONS_PORTION_17@
CONST	SEGMENT
??_C@_0CB@ILIPAJPB@DECOY_OS_INSTRUCTIONS_PORTION_17@ DB 'DECOY_OS_INSTRUC'
	DB	'TIONS_PORTION_17', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@JCJEDILA@DECOY_OS_INSTRUCTIONS_PORTION_16@
CONST	SEGMENT
??_C@_0CB@JCJEDILA@DECOY_OS_INSTRUCTIONS_PORTION_16@ DB 'DECOY_OS_INSTRUC'
	DB	'TIONS_PORTION_16', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LJLJGLHD@DECOY_OS_INSTRUCTIONS_PORTION_15@
CONST	SEGMENT
??_C@_0CB@LJLJGLHD@DECOY_OS_INSTRUCTIONS_PORTION_15@ DB 'DECOY_OS_INSTRUC'
	DB	'TIONS_PORTION_15', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KAKCFKDC@DECOY_OS_INSTRUCTIONS_PORTION_14@
CONST	SEGMENT
??_C@_0CB@KAKCFKDC@DECOY_OS_INSTRUCTIONS_PORTION_14@ DB 'DECOY_OS_INSTRUC'
	DB	'TIONS_PORTION_14', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OPODMMPF@DECOY_OS_INSTRUCTIONS_PORTION_13@
CONST	SEGMENT
??_C@_0CB@OPODMMPF@DECOY_OS_INSTRUCTIONS_PORTION_13@ DB 'DECOY_OS_INSTRUC'
	DB	'TIONS_PORTION_13', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PGPIPNLE@DECOY_OS_INSTRUCTIONS_PORTION_12@
CONST	SEGMENT
??_C@_0CB@PGPIPNLE@DECOY_OS_INSTRUCTIONS_PORTION_12@ DB 'DECOY_OS_INSTRUC'
	DB	'TIONS_PORTION_12', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NNNFKOHH@DECOY_OS_INSTRUCTIONS_PORTION_11@
CONST	SEGMENT
??_C@_0CB@NNNFKOHH@DECOY_OS_INSTRUCTIONS_PORTION_11@ DB 'DECOY_OS_INSTRUC'
	DB	'TIONS_PORTION_11', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MEMOJPDG@DECOY_OS_INSTRUCTIONS_PORTION_10@
CONST	SEGMENT
??_C@_0CB@MEMOJPDG@DECOY_OS_INSTRUCTIONS_PORTION_10@ DB 'DECOY_OS_INSTRUC'
	DB	'TIONS_PORTION_10', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@EBNFDEFN@DECOY_OS_INSTRUCTIONS_PORTION_9?$AA@
CONST	SEGMENT
??_C@_0CA@EBNFDEFN@DECOY_OS_INSTRUCTIONS_PORTION_9?$AA@ DB 'DECOY_OS_INST'
	DB	'RUCTIONS_PORTION_9', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FIMOAFBM@DECOY_OS_INSTRUCTIONS_PORTION_8?$AA@
CONST	SEGMENT
??_C@_0CA@FIMOAFBM@DECOY_OS_INSTRUCTIONS_PORTION_8?$AA@ DB 'DECOY_OS_INST'
	DB	'RUCTIONS_PORTION_8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NPFGBJND@DECOY_OS_INSTRUCTIONS_PORTION_7?$AA@
CONST	SEGMENT
??_C@_0CA@NPFGBJND@DECOY_OS_INSTRUCTIONS_PORTION_7?$AA@ DB 'DECOY_OS_INST'
	DB	'RUCTIONS_PORTION_7', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MGENCIJC@DECOY_OS_INSTRUCTIONS_PORTION_6?$AA@
CONST	SEGMENT
??_C@_0CA@MGENCIJC@DECOY_OS_INSTRUCTIONS_PORTION_6?$AA@ DB 'DECOY_OS_INST'
	DB	'RUCTIONS_PORTION_6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@ONGAHLFB@DECOY_OS_INSTRUCTIONS_PORTION_5?$AA@
CONST	SEGMENT
??_C@_0CA@ONGAHLFB@DECOY_OS_INSTRUCTIONS_PORTION_5?$AA@ DB 'DECOY_OS_INST'
	DB	'RUCTIONS_PORTION_5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PEHLEKBA@DECOY_OS_INSTRUCTIONS_PORTION_4?$AA@
CONST	SEGMENT
??_C@_0CA@PEHLEKBA@DECOY_OS_INSTRUCTIONS_PORTION_4?$AA@ DB 'DECOY_OS_INST'
	DB	'RUCTIONS_PORTION_4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LLDKNMNH@DECOY_OS_INSTRUCTIONS_PORTION_3?$AA@
CONST	SEGMENT
??_C@_0CA@LLDKNMNH@DECOY_OS_INSTRUCTIONS_PORTION_3?$AA@ DB 'DECOY_OS_INST'
	DB	'RUCTIONS_PORTION_3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KCCBONJG@DECOY_OS_INSTRUCTIONS_PORTION_2?$AA@
CONST	SEGMENT
??_C@_0CA@KCCBONJG@DECOY_OS_INSTRUCTIONS_PORTION_2?$AA@ DB 'DECOY_OS_INST'
	DB	'RUCTIONS_PORTION_2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IJAMLOFF@DECOY_OS_INSTRUCTIONS_PORTION_1?$AA@
CONST	SEGMENT
??_C@_0CA@IJAMLOFF@DECOY_OS_INSTRUCTIONS_PORTION_1?$AA@ DB 'DECOY_OS_INST'
	DB	'RUCTIONS_PORTION_1', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 019930522H
	DD	011H
	DD	FLAT:__unwindtable$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$13
	DD	0dH
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$14
	DD	0eH
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$15
	DD	0fH
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$16
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
xdata$x	ENDS
;	COMDAT ?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
_TEXT	SEGMENT
$T184877 = -492						; size = 4
$T184842 = -488						; size = 28
$T184852 = -460						; size = 28
$T184850 = -432						; size = 28
$T184857 = -404						; size = 28
$T184849 = -376						; size = 28
$T184855 = -348						; size = 28
$T184848 = -320						; size = 28
$T184853 = -292						; size = 28
$T184847 = -264						; size = 28
$T184851 = -236						; size = 28
$T184846 = -208						; size = 28
$T184854 = -180						; size = 28
$T184845 = -152						; size = 28
$T184856 = -124						; size = 28
$T184844 = -96						; size = 28
$T184858 = -68						; size = 28
$T184843 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ PROC ; GetDecoyOsInstructionsString, COMDAT

; 2489 : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec e0 01 00
	00		 sub	 esp, 480		; 000001e0H
  00014	53		 push	 ebx
  00015	55		 push	 ebp
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c4		 xor	 eax, esp
  0001f	50		 push	 eax
  00020	8d 84 24 f4 01
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+512]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2490 : 	// This huge string is divided into smaller portions to make it easier for translators to
; 2491 : 	// re-translate it when a minor modification is made to it (the whole huge string will not be
; 2492 : 	// reverted to English, so they will have to translate only a small portion of it).
; 2493 : 	return (wstring (

  0002d	33 ff		 xor	 edi, edi
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IJAMLOFF@DECOY_OS_INSTRUCTIONS_PORTION_1?$AA@
  00034	89 7c 24 18	 mov	 DWORD PTR $T184877[esp+516], edi
  00038	e8 00 00 00 00	 call	 _GetString
  0003d	83 c4 04	 add	 esp, 4
  00040	33 c9		 xor	 ecx, ecx
  00042	66 89 4c 24 1c	 mov	 WORD PTR $T184842[esp+516], cx
  00047	bd 07 00 00 00	 mov	 ebp, 7
  0004c	8b c8		 mov	 ecx, eax
  0004e	89 6c 24 30	 mov	 DWORD PTR $T184842[esp+536], ebp
  00052	89 7c 24 2c	 mov	 DWORD PTR $T184842[esp+532], edi
  00056	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL536@GetDecoyOs:
  00060	66 8b 31	 mov	 si, WORD PTR [ecx]
  00063	83 c1 02	 add	 ecx, 2
  00066	66 3b f7	 cmp	 si, di
  00069	75 f5		 jne	 SHORT $LL536@GetDecoyOs
  0006b	2b ca		 sub	 ecx, edx
  0006d	d1 f9		 sar	 ecx, 1
  0006f	51		 push	 ecx
  00070	50		 push	 eax
  00071	8d 4c 24 20	 lea	 ecx, DWORD PTR $T184842[esp+520]
  00075	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@KCCBONJG@DECOY_OS_INSTRUCTIONS_PORTION_2?$AA@
  0007f	89 bc 24 00 02
	00 00		 mov	 DWORD PTR __$EHRec$[esp+524], edi
  00086	e8 00 00 00 00	 call	 _GetString
  0008b	50		 push	 eax
  0008c	8d 54 24 20	 lea	 edx, DWORD PTR $T184842[esp+520]
  00090	52		 push	 edx
  00091	8d 84 24 e4 01
	00 00		 lea	 eax, DWORD PTR $T184843[esp+524]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0009e	8b f0		 mov	 esi, eax
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@LLDKNMNH@DECOY_OS_INSTRUCTIONS_PORTION_3?$AA@
  000a5	c6 84 24 10 02
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+540], 1
  000ad	e8 00 00 00 00	 call	 _GetString
  000b2	50		 push	 eax
  000b3	8d 8c 24 b8 01
	00 00		 lea	 ecx, DWORD PTR $T184844[esp+536]
  000ba	56		 push	 esi
  000bb	51		 push	 ecx
  000bc	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000c1	8b f0		 mov	 esi, eax
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@PEHLEKBA@DECOY_OS_INSTRUCTIONS_PORTION_4?$AA@
  000c8	c6 84 24 20 02
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+556], 2
  000d0	e8 00 00 00 00	 call	 _GetString
  000d5	50		 push	 eax
  000d6	8d 94 24 90 01
	00 00		 lea	 edx, DWORD PTR $T184845[esp+552]
  000dd	56		 push	 esi
  000de	52		 push	 edx
  000df	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000e4	8b f0		 mov	 esi, eax
  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@ONGAHLFB@DECOY_OS_INSTRUCTIONS_PORTION_5?$AA@
  000eb	c6 84 24 30 02
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+572], 3
  000f3	e8 00 00 00 00	 call	 _GetString
  000f8	50		 push	 eax
  000f9	8d 84 24 68 01
	00 00		 lea	 eax, DWORD PTR $T184846[esp+568]
  00100	56		 push	 esi
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00107	83 c4 40	 add	 esp, 64			; 00000040H
  0010a	8b f0		 mov	 esi, eax
  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@MGENCIJC@DECOY_OS_INSTRUCTIONS_PORTION_6?$AA@
  00111	c6 84 24 00 02
	00 00 04	 mov	 BYTE PTR __$EHRec$[esp+524], 4
  00119	e8 00 00 00 00	 call	 _GetString
  0011e	50		 push	 eax
  0011f	8d 8c 24 00 01
	00 00		 lea	 ecx, DWORD PTR $T184847[esp+520]
  00126	56		 push	 esi
  00127	51		 push	 ecx
  00128	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0012d	8b f0		 mov	 esi, eax
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NPFGBJND@DECOY_OS_INSTRUCTIONS_PORTION_7?$AA@
  00134	c6 84 24 10 02
	00 00 05	 mov	 BYTE PTR __$EHRec$[esp+540], 5
  0013c	e8 00 00 00 00	 call	 _GetString
  00141	50		 push	 eax
  00142	8d 94 24 d8 00
	00 00		 lea	 edx, DWORD PTR $T184848[esp+536]
  00149	56		 push	 esi
  0014a	52		 push	 edx
  0014b	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00150	8b f0		 mov	 esi, eax
  00152	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@FIMOAFBM@DECOY_OS_INSTRUCTIONS_PORTION_8?$AA@
  00157	c6 84 24 20 02
	00 00 06	 mov	 BYTE PTR __$EHRec$[esp+556], 6
  0015f	e8 00 00 00 00	 call	 _GetString
  00164	50		 push	 eax
  00165	8d 84 24 b0 00
	00 00		 lea	 eax, DWORD PTR $T184849[esp+552]
  0016c	56		 push	 esi
  0016d	50		 push	 eax
  0016e	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00173	8b f0		 mov	 esi, eax
  00175	c6 84 24 2c 02
	00 00 07	 mov	 BYTE PTR __$EHRec$[esp+568], 7
  0017d	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@EBNFDEFN@DECOY_OS_INSTRUCTIONS_PORTION_9?$AA@
  00182	e8 00 00 00 00	 call	 _GetString
  00187	50		 push	 eax
  00188	8d 8c 24 88 00
	00 00		 lea	 ecx, DWORD PTR $T184850[esp+568]
  0018f	56		 push	 esi
  00190	51		 push	 ecx
  00191	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00196	83 c4 40	 add	 esp, 64			; 00000040H
  00199	8b f0		 mov	 esi, eax
  0019b	bb 08 00 00 00	 mov	 ebx, 8
  001a0	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MEMOJPDG@DECOY_OS_INSTRUCTIONS_PORTION_10@
  001a5	88 9c 24 00 02
	00 00		 mov	 BYTE PTR __$EHRec$[esp+524], bl
  001ac	e8 00 00 00 00	 call	 _GetString
  001b1	50		 push	 eax
  001b2	8d 94 24 1c 01
	00 00		 lea	 edx, DWORD PTR $T184851[esp+520]
  001b9	56		 push	 esi
  001ba	52		 push	 edx
  001bb	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001c0	8b f0		 mov	 esi, eax
  001c2	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@NNNFKOHH@DECOY_OS_INSTRUCTIONS_PORTION_11@
  001c7	c6 84 24 10 02
	00 00 09	 mov	 BYTE PTR __$EHRec$[esp+540], 9
  001cf	e8 00 00 00 00	 call	 _GetString
  001d4	50		 push	 eax
  001d5	8d 44 24 4c	 lea	 eax, DWORD PTR $T184852[esp+536]
  001d9	56		 push	 esi
  001da	50		 push	 eax
  001db	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001e0	8b f0		 mov	 esi, eax
  001e2	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@PGPIPNLE@DECOY_OS_INSTRUCTIONS_PORTION_12@
  001e7	c6 84 24 20 02
	00 00 0a	 mov	 BYTE PTR __$EHRec$[esp+556], 10 ; 0000000aH
  001ef	e8 00 00 00 00	 call	 _GetString
  001f4	50		 push	 eax
  001f5	8d 8c 24 04 01
	00 00		 lea	 ecx, DWORD PTR $T184853[esp+552]
  001fc	56		 push	 esi
  001fd	51		 push	 ecx
  001fe	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00203	8b f0		 mov	 esi, eax
  00205	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@OPODMMPF@DECOY_OS_INSTRUCTIONS_PORTION_13@
  0020a	c6 84 24 30 02
	00 00 0b	 mov	 BYTE PTR __$EHRec$[esp+572], 11 ; 0000000bH
  00212	e8 00 00 00 00	 call	 _GetString
  00217	50		 push	 eax
  00218	8d 94 24 84 01
	00 00		 lea	 edx, DWORD PTR $T184854[esp+568]
  0021f	56		 push	 esi
  00220	52		 push	 edx
  00221	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00226	83 c4 40	 add	 esp, 64			; 00000040H
  00229	8b f0		 mov	 esi, eax
  0022b	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@KAKCFKDC@DECOY_OS_INSTRUCTIONS_PORTION_14@
  00230	c6 84 24 00 02
	00 00 0c	 mov	 BYTE PTR __$EHRec$[esp+524], 12 ; 0000000cH
  00238	e8 00 00 00 00	 call	 _GetString
  0023d	50		 push	 eax
  0023e	8d 84 24 ac 00
	00 00		 lea	 eax, DWORD PTR $T184855[esp+520]
  00245	56		 push	 esi
  00246	50		 push	 eax
  00247	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0024c	8b f0		 mov	 esi, eax
  0024e	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@LJLJGLHD@DECOY_OS_INSTRUCTIONS_PORTION_15@
  00253	c6 84 24 10 02
	00 00 0d	 mov	 BYTE PTR __$EHRec$[esp+540], 13 ; 0000000dH
  0025b	e8 00 00 00 00	 call	 _GetString
  00260	50		 push	 eax
  00261	8d 8c 24 9c 01
	00 00		 lea	 ecx, DWORD PTR $T184856[esp+536]
  00268	56		 push	 esi
  00269	51		 push	 ecx
  0026a	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0026f	8b f0		 mov	 esi, eax
  00271	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@JCJEDILA@DECOY_OS_INSTRUCTIONS_PORTION_16@
  00276	c6 84 24 20 02
	00 00 0e	 mov	 BYTE PTR __$EHRec$[esp+556], 14 ; 0000000eH
  0027e	e8 00 00 00 00	 call	 _GetString
  00283	50		 push	 eax
  00284	8d 94 24 94 00
	00 00		 lea	 edx, DWORD PTR $T184857[esp+552]
  0028b	56		 push	 esi
  0028c	52		 push	 edx
  0028d	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00292	8b f0		 mov	 esi, eax
  00294	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@ILIPAJPB@DECOY_OS_INSTRUCTIONS_PORTION_17@
  00299	c6 84 24 30 02
	00 00 0f	 mov	 BYTE PTR __$EHRec$[esp+572], 15 ; 0000000fH
  002a1	e8 00 00 00 00	 call	 _GetString
  002a6	50		 push	 eax
  002a7	8d 84 24 f4 01
	00 00		 lea	 eax, DWORD PTR $T184858[esp+568]
  002ae	56		 push	 esi
  002af	50		 push	 eax
  002b0	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  002b5	83 c4 40	 add	 esp, 64			; 00000040H
  002b8	8b f0		 mov	 esi, eax
  002ba	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MBHBFDO@DECOY_OS_INSTRUCTIONS_PORTION_18@
  002bf	c6 84 24 00 02
	00 00 10	 mov	 BYTE PTR __$EHRec$[esp+524], 16 ; 00000010H
  002c7	e8 00 00 00 00	 call	 _GetString
  002cc	50		 push	 eax
  002cd	56		 push	 esi
  002ce	8b b4 24 10 02
	00 00		 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+520]
  002d5	56		 push	 esi
  002d6	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  002db	83 c4 10	 add	 esp, 16			; 00000010H
  002de	39 9c 24 d4 01
	00 00		 cmp	 DWORD PTR $T184858[esp+536], ebx
  002e5	72 10		 jb	 SHORT $LN78@GetDecoyOs
  002e7	8b 8c 24 c0 01
	00 00		 mov	 ecx, DWORD PTR $T184858[esp+516]
  002ee	51		 push	 ecx
  002ef	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002f4	83 c4 04	 add	 esp, 4
$LN78@GetDecoyOs:
  002f7	33 d2		 xor	 edx, edx
  002f9	89 ac 24 d4 01
	00 00		 mov	 DWORD PTR $T184858[esp+536], ebp
  00300	89 bc 24 d0 01
	00 00		 mov	 DWORD PTR $T184858[esp+532], edi
  00307	66 89 94 24 c0
	01 00 00	 mov	 WORD PTR $T184858[esp+516], dx
  0030f	39 9c 24 84 00
	00 00		 cmp	 DWORD PTR $T184857[esp+536], ebx
  00316	72 0d		 jb	 SHORT $LN106@GetDecoyOs
  00318	8b 44 24 70	 mov	 eax, DWORD PTR $T184857[esp+516]
  0031c	50		 push	 eax
  0031d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00322	83 c4 04	 add	 esp, 4
$LN106@GetDecoyOs:
  00325	33 c9		 xor	 ecx, ecx
  00327	89 ac 24 84 00
	00 00		 mov	 DWORD PTR $T184857[esp+536], ebp
  0032e	89 bc 24 80 00
	00 00		 mov	 DWORD PTR $T184857[esp+532], edi
  00335	66 89 4c 24 70	 mov	 WORD PTR $T184857[esp+516], cx
  0033a	39 9c 24 9c 01
	00 00		 cmp	 DWORD PTR $T184856[esp+536], ebx
  00341	72 10		 jb	 SHORT $LN134@GetDecoyOs
  00343	8b 94 24 88 01
	00 00		 mov	 edx, DWORD PTR $T184856[esp+516]
  0034a	52		 push	 edx
  0034b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00350	83 c4 04	 add	 esp, 4
$LN134@GetDecoyOs:
  00353	33 c0		 xor	 eax, eax
  00355	89 ac 24 9c 01
	00 00		 mov	 DWORD PTR $T184856[esp+536], ebp
  0035c	89 bc 24 98 01
	00 00		 mov	 DWORD PTR $T184856[esp+532], edi
  00363	66 89 84 24 88
	01 00 00	 mov	 WORD PTR $T184856[esp+516], ax
  0036b	39 9c 24 bc 00
	00 00		 cmp	 DWORD PTR $T184855[esp+536], ebx
  00372	72 10		 jb	 SHORT $LN162@GetDecoyOs
  00374	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR $T184855[esp+516]
  0037b	51		 push	 ecx
  0037c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00381	83 c4 04	 add	 esp, 4
$LN162@GetDecoyOs:
  00384	33 d2		 xor	 edx, edx
  00386	89 ac 24 bc 00
	00 00		 mov	 DWORD PTR $T184855[esp+536], ebp
  0038d	89 bc 24 b8 00
	00 00		 mov	 DWORD PTR $T184855[esp+532], edi
  00394	66 89 94 24 a8
	00 00 00	 mov	 WORD PTR $T184855[esp+516], dx
  0039c	39 9c 24 64 01
	00 00		 cmp	 DWORD PTR $T184854[esp+536], ebx
  003a3	72 10		 jb	 SHORT $LN190@GetDecoyOs
  003a5	8b 84 24 50 01
	00 00		 mov	 eax, DWORD PTR $T184854[esp+516]
  003ac	50		 push	 eax
  003ad	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003b2	83 c4 04	 add	 esp, 4
$LN190@GetDecoyOs:
  003b5	33 c9		 xor	 ecx, ecx
  003b7	89 ac 24 64 01
	00 00		 mov	 DWORD PTR $T184854[esp+536], ebp
  003be	89 bc 24 60 01
	00 00		 mov	 DWORD PTR $T184854[esp+532], edi
  003c5	66 89 8c 24 50
	01 00 00	 mov	 WORD PTR $T184854[esp+516], cx
  003cd	39 9c 24 f4 00
	00 00		 cmp	 DWORD PTR $T184853[esp+536], ebx
  003d4	72 10		 jb	 SHORT $LN218@GetDecoyOs
  003d6	8b 94 24 e0 00
	00 00		 mov	 edx, DWORD PTR $T184853[esp+516]
  003dd	52		 push	 edx
  003de	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003e3	83 c4 04	 add	 esp, 4
$LN218@GetDecoyOs:
  003e6	33 c0		 xor	 eax, eax
  003e8	89 ac 24 f4 00
	00 00		 mov	 DWORD PTR $T184853[esp+536], ebp
  003ef	89 bc 24 f0 00
	00 00		 mov	 DWORD PTR $T184853[esp+532], edi
  003f6	66 89 84 24 e0
	00 00 00	 mov	 WORD PTR $T184853[esp+516], ax
  003fe	39 5c 24 4c	 cmp	 DWORD PTR $T184852[esp+536], ebx
  00402	72 0d		 jb	 SHORT $LN246@GetDecoyOs
  00404	8b 4c 24 38	 mov	 ecx, DWORD PTR $T184852[esp+516]
  00408	51		 push	 ecx
  00409	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0040e	83 c4 04	 add	 esp, 4
$LN246@GetDecoyOs:
  00411	33 d2		 xor	 edx, edx
  00413	89 6c 24 4c	 mov	 DWORD PTR $T184852[esp+536], ebp
  00417	89 7c 24 48	 mov	 DWORD PTR $T184852[esp+532], edi
  0041b	66 89 54 24 38	 mov	 WORD PTR $T184852[esp+516], dx
  00420	39 9c 24 2c 01
	00 00		 cmp	 DWORD PTR $T184851[esp+536], ebx
  00427	72 10		 jb	 SHORT $LN274@GetDecoyOs
  00429	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR $T184851[esp+516]
  00430	50		 push	 eax
  00431	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00436	83 c4 04	 add	 esp, 4
$LN274@GetDecoyOs:
  00439	33 c9		 xor	 ecx, ecx
  0043b	89 ac 24 2c 01
	00 00		 mov	 DWORD PTR $T184851[esp+536], ebp
  00442	89 bc 24 28 01
	00 00		 mov	 DWORD PTR $T184851[esp+532], edi
  00449	66 89 8c 24 18
	01 00 00	 mov	 WORD PTR $T184851[esp+516], cx
  00451	39 5c 24 68	 cmp	 DWORD PTR $T184850[esp+536], ebx
  00455	72 0d		 jb	 SHORT $LN302@GetDecoyOs
  00457	8b 54 24 54	 mov	 edx, DWORD PTR $T184850[esp+516]
  0045b	52		 push	 edx
  0045c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00461	83 c4 04	 add	 esp, 4
$LN302@GetDecoyOs:
  00464	33 c0		 xor	 eax, eax
  00466	89 6c 24 68	 mov	 DWORD PTR $T184850[esp+536], ebp
  0046a	89 7c 24 64	 mov	 DWORD PTR $T184850[esp+532], edi
  0046e	66 89 44 24 54	 mov	 WORD PTR $T184850[esp+516], ax
  00473	39 9c 24 a0 00
	00 00		 cmp	 DWORD PTR $T184849[esp+536], ebx
  0047a	72 10		 jb	 SHORT $LN330@GetDecoyOs
  0047c	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR $T184849[esp+516]
  00483	51		 push	 ecx
  00484	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00489	83 c4 04	 add	 esp, 4
$LN330@GetDecoyOs:
  0048c	33 d2		 xor	 edx, edx
  0048e	89 ac 24 a0 00
	00 00		 mov	 DWORD PTR $T184849[esp+536], ebp
  00495	89 bc 24 9c 00
	00 00		 mov	 DWORD PTR $T184849[esp+532], edi
  0049c	66 89 94 24 8c
	00 00 00	 mov	 WORD PTR $T184849[esp+516], dx
  004a4	39 9c 24 d8 00
	00 00		 cmp	 DWORD PTR $T184848[esp+536], ebx
  004ab	72 10		 jb	 SHORT $LN358@GetDecoyOs
  004ad	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR $T184848[esp+516]
  004b4	50		 push	 eax
  004b5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004ba	83 c4 04	 add	 esp, 4
$LN358@GetDecoyOs:
  004bd	33 c9		 xor	 ecx, ecx
  004bf	89 ac 24 d8 00
	00 00		 mov	 DWORD PTR $T184848[esp+536], ebp
  004c6	89 bc 24 d4 00
	00 00		 mov	 DWORD PTR $T184848[esp+532], edi
  004cd	66 89 8c 24 c4
	00 00 00	 mov	 WORD PTR $T184848[esp+516], cx
  004d5	39 9c 24 10 01
	00 00		 cmp	 DWORD PTR $T184847[esp+536], ebx
  004dc	72 10		 jb	 SHORT $LN386@GetDecoyOs
  004de	8b 94 24 fc 00
	00 00		 mov	 edx, DWORD PTR $T184847[esp+516]
  004e5	52		 push	 edx
  004e6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004eb	83 c4 04	 add	 esp, 4
$LN386@GetDecoyOs:
  004ee	33 c0		 xor	 eax, eax
  004f0	89 ac 24 10 01
	00 00		 mov	 DWORD PTR $T184847[esp+536], ebp
  004f7	89 bc 24 0c 01
	00 00		 mov	 DWORD PTR $T184847[esp+532], edi
  004fe	66 89 84 24 fc
	00 00 00	 mov	 WORD PTR $T184847[esp+516], ax
  00506	39 9c 24 48 01
	00 00		 cmp	 DWORD PTR $T184846[esp+536], ebx
  0050d	72 10		 jb	 SHORT $LN414@GetDecoyOs
  0050f	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR $T184846[esp+516]
  00516	51		 push	 ecx
  00517	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0051c	83 c4 04	 add	 esp, 4
$LN414@GetDecoyOs:
  0051f	33 d2		 xor	 edx, edx
  00521	89 ac 24 48 01
	00 00		 mov	 DWORD PTR $T184846[esp+536], ebp
  00528	89 bc 24 44 01
	00 00		 mov	 DWORD PTR $T184846[esp+532], edi
  0052f	66 89 94 24 34
	01 00 00	 mov	 WORD PTR $T184846[esp+516], dx
  00537	39 9c 24 80 01
	00 00		 cmp	 DWORD PTR $T184845[esp+536], ebx
  0053e	72 10		 jb	 SHORT $LN442@GetDecoyOs
  00540	8b 84 24 6c 01
	00 00		 mov	 eax, DWORD PTR $T184845[esp+516]
  00547	50		 push	 eax
  00548	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0054d	83 c4 04	 add	 esp, 4
$LN442@GetDecoyOs:
  00550	33 c9		 xor	 ecx, ecx
  00552	89 ac 24 80 01
	00 00		 mov	 DWORD PTR $T184845[esp+536], ebp
  00559	89 bc 24 7c 01
	00 00		 mov	 DWORD PTR $T184845[esp+532], edi
  00560	66 89 8c 24 6c
	01 00 00	 mov	 WORD PTR $T184845[esp+516], cx
  00568	39 9c 24 b8 01
	00 00		 cmp	 DWORD PTR $T184844[esp+536], ebx
  0056f	72 10		 jb	 SHORT $LN470@GetDecoyOs
  00571	8b 94 24 a4 01
	00 00		 mov	 edx, DWORD PTR $T184844[esp+516]
  00578	52		 push	 edx
  00579	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0057e	83 c4 04	 add	 esp, 4
$LN470@GetDecoyOs:
  00581	33 c0		 xor	 eax, eax
  00583	89 ac 24 b8 01
	00 00		 mov	 DWORD PTR $T184844[esp+536], ebp
  0058a	89 bc 24 b4 01
	00 00		 mov	 DWORD PTR $T184844[esp+532], edi
  00591	66 89 84 24 a4
	01 00 00	 mov	 WORD PTR $T184844[esp+516], ax
  00599	39 9c 24 f0 01
	00 00		 cmp	 DWORD PTR $T184843[esp+536], ebx
  005a0	72 10		 jb	 SHORT $LN498@GetDecoyOs
  005a2	8b 8c 24 dc 01
	00 00		 mov	 ecx, DWORD PTR $T184843[esp+516]
  005a9	51		 push	 ecx
  005aa	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  005af	83 c4 04	 add	 esp, 4
$LN498@GetDecoyOs:
  005b2	33 d2		 xor	 edx, edx
  005b4	89 ac 24 f0 01
	00 00		 mov	 DWORD PTR $T184843[esp+536], ebp
  005bb	89 bc 24 ec 01
	00 00		 mov	 DWORD PTR $T184843[esp+532], edi
  005c2	66 89 94 24 dc
	01 00 00	 mov	 WORD PTR $T184843[esp+516], dx
  005ca	39 5c 24 30	 cmp	 DWORD PTR $T184842[esp+536], ebx
  005ce	72 0d		 jb	 SHORT $LN537@GetDecoyOs
  005d0	8b 44 24 1c	 mov	 eax, DWORD PTR $T184842[esp+516]
  005d4	50		 push	 eax
  005d5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  005da	83 c4 04	 add	 esp, 4
$LN537@GetDecoyOs:
  005dd	8b c6		 mov	 eax, esi

; 2494 : 		GetString ("DECOY_OS_INSTRUCTIONS_PORTION_1"))
; 2495 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_2")
; 2496 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_3")
; 2497 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_4")
; 2498 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_5")
; 2499 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_6")
; 2500 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_7")
; 2501 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_8")
; 2502 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_9")
; 2503 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_10")
; 2504 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_11")
; 2505 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_12")
; 2506 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_13")
; 2507 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_14")
; 2508 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_15")
; 2509 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_16")
; 2510 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_17")
; 2511 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_18"));
; 2512 : }

  005df	8b 8c 24 f4 01
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+512]
  005e6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  005ed	59		 pop	 ecx
  005ee	5f		 pop	 edi
  005ef	5e		 pop	 esi
  005f0	5d		 pop	 ebp
  005f1	5b		 pop	 ebx
  005f2	81 c4 ec 01 00
	00		 add	 esp, 492		; 000001ecH
  005f8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0:
  00000	8d 8d 18 fe ff
	ff		 lea	 ecx, DWORD PTR $T184842[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$1:
  0000b	8d 4d d8	 lea	 ecx, DWORD PTR $T184843[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$2:
  00013	8d 4d a0	 lea	 ecx, DWORD PTR $T184844[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$3:
  0001b	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T184845[ebp]
  00021	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$4:
  00026	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T184846[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$5:
  00031	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR $T184847[ebp]
  00037	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$6:
  0003c	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR $T184848[ebp]
  00042	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$7:
  00047	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR $T184849[ebp]
  0004d	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$8:
  00052	8d 8d 50 fe ff
	ff		 lea	 ecx, DWORD PTR $T184850[ebp]
  00058	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$9:
  0005d	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR $T184851[ebp]
  00063	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$10:
  00068	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR $T184852[ebp]
  0006e	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$11:
  00073	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR $T184853[ebp]
  00079	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$12:
  0007e	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T184854[ebp]
  00084	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$13:
  00089	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR $T184855[ebp]
  0008f	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$14:
  00094	8d 4d 84	 lea	 ecx, DWORD PTR $T184856[ebp]
  00097	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$15:
  0009c	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR $T184857[ebp]
  000a2	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$16:
  000a7	8d 4d bc	 lea	 ecx, DWORD PTR $T184858[ebp]
  000aa	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ:
  000af	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000b3	8d 82 10 fe ff
	ff		 lea	 eax, DWORD PTR [edx-496]
  000b9	8b 8a 0c fe ff
	ff		 mov	 ecx, DWORD PTR [edx-500]
  000bf	33 c8		 xor	 ecx, eax
  000c1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c6	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
  000cb	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ENDP ; GetDecoyOsInstructionsString
PUBLIC	??_C@_0CD@IBNJCEOK@How?5to?5Remove?5Extra?5Boot?5Partiti@ ; `string'
PUBLIC	??_C@_0CK@GKLMBFMH@EXTRA_BOOT_PARTITION_REMOVAL_INS@ ; `string'
PUBLIC	??_C@_0BH@DOMMMACL@How?5to?5Create?5Decoy?5OS?$AA@ ; `string'
PUBLIC	??_C@_0BM@BCCJBOGG@CipherShed?5Rescue?5Disk?5Help?$AA@ ; `string'
PUBLIC	??_C@_0BJ@OAHHFEJL@Pre?9Boot?5Troubleshooting?$AA@ ; `string'
PUBLIC	??_C@_0BI@OOMIJPBL@LEGAL_NOTICES_DLG_TITLE?$AA@	; `string'
PUBLIC	_TextInfoDialogBoxDlgProc@16
EXTRN	__imp__SetWindowTextA@8:PROC
;	COMDAT ?nID@?1??TextInfoDialogBoxDlgProc@@9@16@4HA
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
_BSS	SEGMENT
?nID@?1??TextInfoDialogBoxDlgProc@@9@16@4HA DD 01H DUP (?) ; `TextInfoDialogBoxDlgProc'::`2'::nID
_BSS	ENDS
;	COMDAT ??_C@_0CD@IBNJCEOK@How?5to?5Remove?5Extra?5Boot?5Partiti@
CONST	SEGMENT
??_C@_0CD@IBNJCEOK@How?5to?5Remove?5Extra?5Boot?5Partiti@ DB 'How to Remo'
	DB	've Extra Boot Partition', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@GKLMBFMH@EXTRA_BOOT_PARTITION_REMOVAL_INS@
CONST	SEGMENT
??_C@_0CK@GKLMBFMH@EXTRA_BOOT_PARTITION_REMOVAL_INS@ DB 'EXTRA_BOOT_PARTI'
	DB	'TION_REMOVAL_INSTRUCTIONS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DOMMMACL@How?5to?5Create?5Decoy?5OS?$AA@
CONST	SEGMENT
??_C@_0BH@DOMMMACL@How?5to?5Create?5Decoy?5OS?$AA@ DB 'How to Create Deco'
	DB	'y OS', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BCCJBOGG@CipherShed?5Rescue?5Disk?5Help?$AA@
CONST	SEGMENT
??_C@_0BM@BCCJBOGG@CipherShed?5Rescue?5Disk?5Help?$AA@ DB 'CipherShed Res'
	DB	'cue Disk Help', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OAHHFEJL@Pre?9Boot?5Troubleshooting?$AA@
CONST	SEGMENT
??_C@_0BJ@OAHHFEJL@Pre?9Boot?5Troubleshooting?$AA@ DB 'Pre-Boot Troublesh'
	DB	'ooting', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OOMIJPBL@LEGAL_NOTICES_DLG_TITLE?$AA@
CONST	SEGMENT
??_C@_0BI@OOMIJPBL@LEGAL_NOTICES_DLG_TITLE?$AA@ DB 'LEGAL_NOTICES_DLG_TIT'
	DB	'LE', 00H					; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
CONST	ENDS
;	COMDAT _TextInfoDialogBoxDlgProc@16
_TEXT	SEGMENT
$T187142 = -252						; size = 28
$T187138 = -224						; size = 28
$T187141 = -196						; size = 28
$T187140 = -168						; size = 28
$T187143 = -140						; size = 28
$T187137 = -112						; size = 28
$T187144 = -84						; size = 28
$T187139 = -56						; size = 28
$T187145 = -28						; size = 28
_hwndDlg$ = 8						; size = 4
_msg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_TextInfoDialogBoxDlgProc@16 PROC			; COMDAT

; 2522 : 	WORD lw = LOWORD (wParam);
; 2523 : 	static int nID = 0;
; 2524 : 
; 2525 : 	switch (msg)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _msg$[esp-4]
  00004	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	3d 11 01 00 00	 cmp	 eax, 273		; 00000111H
  00011	0f 87 95 02 00
	00		 ja	 $LN33@TextInfoDi
  00017	0f 84 de 00 00
	00		 je	 $LN20@TextInfoDi
  0001d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00020	0f 84 b0 00 00
	00		 je	 $LN1@TextInfoDi
  00026	3d 10 01 00 00	 cmp	 eax, 272		; 00000110H
  0002b	0f 85 6e 02 00
	00		 jne	 $LN17@TextInfoDi

; 2526 : 	{
; 2527 : 	case WM_INITDIALOG:
; 2528 : 		{
; 2529 : 			nID = (int) lParam;

  00031	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR _lParam$[esp+256]
  00038	53		 push	 ebx
  00039	55		 push	 ebp

; 2530 : 
; 2531 : 			// Left margin for rich edit text field
; 2532 : 			SendMessage (GetDlgItem (hwndDlg, IDC_INFO_BOX_TEXT), EM_SETMARGINS, (WPARAM) EC_LEFTMARGIN, (LPARAM) CompensateXDPI (4));

  0003a	6a 04		 push	 4
  0003c	a3 00 00 00 00	 mov	 DWORD PTR ?nID@?1??TextInfoDialogBoxDlgProc@@9@16@4HA, eax
  00041	e8 00 00 00 00	 call	 _CompensateXDPI
  00046	8b b4 24 14 01
	00 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+268]
  0004d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00053	83 c4 04	 add	 esp, 4
  00056	50		 push	 eax
  00057	6a 01		 push	 1
  00059	68 d3 00 00 00	 push	 211			; 000000d3H
  0005e	68 91 13 00 00	 push	 5009			; 00001391H
  00063	56		 push	 esi
  00064	ff d7		 call	 edi
  00066	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SendMessageA@16
  0006c	50		 push	 eax
  0006d	ff d5		 call	 ebp

; 2533 : 
; 2534 : 			ShowWindow(GetDlgItem(hwndDlg, IDC_PRINT), SW_HIDE);

  0006f	6a 00		 push	 0
  00071	68 8d 13 00 00	 push	 5005			; 0000138dH
  00076	56		 push	 esi
  00077	ff d7		 call	 edi
  00079	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__ShowWindow@8
  0007f	50		 push	 eax
  00080	ff d3		 call	 ebx

; 2535 : 
; 2536 : 			switch (nID)

  00082	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nID@?1??TextInfoDialogBoxDlgProc@@9@16@4HA
  00087	83 f8 04	 cmp	 eax, 4
  0008a	77 2f		 ja	 SHORT $LN26@TextInfoDi
  0008c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN78@TextInfoDi[eax*4]
$LN25@TextInfoDi:

; 2537 : 			{
; 2538 : 			case TC_TBXID_LEGAL_NOTICES:
; 2539 : 				LocalizeDialog (hwndDlg, "LEGAL_NOTICES_DLG_TITLE");

  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@OOMIJPBL@LEGAL_NOTICES_DLG_TITLE?$AA@
  00098	56		 push	 esi
  00099	e8 00 00 00 00	 call	 _LocalizeDialog
  0009e	83 c4 08	 add	 esp, 8

; 2540 : 				break;
; 2541 : 
; 2542 : 			case TC_TBXID_SYS_ENCRYPTION_PRETEST:
; 2543 : 				LocalizeDialog (hwndDlg, NULL);
; 2544 : 				ShowWindow(GetDlgItem(hwndDlg, IDC_PRINT), SW_SHOW);
; 2545 : 				break;

  000a1	eb 18		 jmp	 SHORT $LN26@TextInfoDi
$LN21@TextInfoDi:

; 2546 : 
; 2547 : 			case TC_TBXID_SYS_ENC_RESCUE_DISK:
; 2548 : 				LocalizeDialog (hwndDlg, NULL);
; 2549 : 				ShowWindow(GetDlgItem(hwndDlg, IDC_PRINT), SW_SHOW);
; 2550 : 				break;
; 2551 : 
; 2552 : 			case TC_TBXID_DECOY_OS_INSTRUCTIONS:
; 2553 : 				LocalizeDialog (hwndDlg, NULL);
; 2554 : 				ShowWindow(GetDlgItem(hwndDlg, IDC_PRINT), SW_SHOW);
; 2555 : 				break;
; 2556 : 
; 2557 : 			case TC_TBXID_EXTRA_BOOT_PARTITION_REMOVAL_INSTRUCTIONS:
; 2558 : 				LocalizeDialog (hwndDlg, NULL);

  000a3	6a 00		 push	 0
  000a5	56		 push	 esi
  000a6	e8 00 00 00 00	 call	 _LocalizeDialog
  000ab	83 c4 08	 add	 esp, 8

; 2559 : 				ShowWindow(GetDlgItem(hwndDlg, IDC_PRINT), SW_SHOW);

  000ae	6a 05		 push	 5
  000b0	68 8d 13 00 00	 push	 5005			; 0000138dH
  000b5	56		 push	 esi
  000b6	ff d7		 call	 edi
  000b8	50		 push	 eax
  000b9	ff d3		 call	 ebx
$LN26@TextInfoDi:

; 2560 : 				break;
; 2561 : 			}
; 2562 : 
; 2563 : 			SendMessage (hwndDlg, TC_APPMSG_LOAD_TEXT_BOX_CONTENT, 0, 0);

  000bb	6a 00		 push	 0
  000bd	6a 00		 push	 0
  000bf	68 67 80 00 00	 push	 32871			; 00008067H
  000c4	56		 push	 esi
  000c5	ff d5		 call	 ebp
  000c7	5d		 pop	 ebp
  000c8	5b		 pop	 ebx
  000c9	5f		 pop	 edi

; 2564 : 		}
; 2565 : 		return 0;

  000ca	33 c0		 xor	 eax, eax
  000cc	5e		 pop	 esi

; 2646 : }

  000cd	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000d3	c2 10 00	 ret	 16			; 00000010H
$LN1@TextInfoDi:

; 2638 : 
; 2639 : 	case WM_CLOSE:
; 2640 : 		NormalCursor ();

  000d6	e8 00 00 00 00	 call	 _NormalCursor

; 2641 : 		EndDialog (hwndDlg, 0);

  000db	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR _hwndDlg$[esp+256]
  000e2	6a 00		 push	 0
  000e4	51		 push	 ecx
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
  000eb	5f		 pop	 edi
  000ec	b8 01 00 00 00	 mov	 eax, 1
  000f1	5e		 pop	 esi

; 2646 : }

  000f2	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000f8	c2 10 00	 ret	 16			; 00000010H
$LN20@TextInfoDi:

; 2566 : 
; 2567 : 	case WM_COMMAND:
; 2568 : 		if (lw == IDOK || lw == IDCANCEL)

  000fb	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR _wParam$[esp+256]
  00102	66 83 f8 01	 cmp	 ax, 1
  00106	74 ce		 je	 SHORT $LN1@TextInfoDi
  00108	66 83 f8 02	 cmp	 ax, 2
  0010c	74 c8		 je	 SHORT $LN1@TextInfoDi

; 2569 : 		{
; 2570 : 			NormalCursor ();
; 2571 : 			EndDialog (hwndDlg, 0);
; 2572 : 			return 1;
; 2573 : 		}
; 2574 : 
; 2575 : 		if (lw == IDC_PRINT)

  0010e	ba 8d 13 00 00	 mov	 edx, 5005		; 0000138dH
  00113	66 3b c2	 cmp	 ax, dx
  00116	0f 85 83 01 00
	00		 jne	 $LN17@TextInfoDi

; 2576 : 		{
; 2577 : 			switch (nID)

  0011c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nID@?1??TextInfoDialogBoxDlgProc@@9@16@4HA
  00121	48		 dec	 eax
  00122	83 f8 03	 cmp	 eax, 3
  00125	0f 87 32 03 00
	00		 ja	 $LN8@TextInfoDi
  0012b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN79@TextInfoDi[eax*4]
$LN14@TextInfoDi:

; 2578 : 			{
; 2579 : 			case TC_TBXID_SYS_ENCRYPTION_PRETEST:
; 2580 : 				PrintHardCopyTextUTF16 ((wchar_t *) GetSysEncryptionPretestInfo2String ().c_str(), "Pre-Boot Troubleshooting", GetSysEncryptionPretestInfo2String ().length () * 2);

  00132	8d 84 24 94 00
	00 00		 lea	 eax, DWORD PTR $T187137[esp+260]
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 ?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetSysEncryptionPretestInfo2String
  0013f	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00142	8d 4c 24 28	 lea	 ecx, DWORD PTR $T187138[esp+264]
  00146	51		 push	 ecx
  00147	e8 00 00 00 00	 call	 ?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetSysEncryptionPretestInfo2String
  0014c	83 c4 08	 add	 esp, 8
  0014f	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  00153	72 05		 jb	 SHORT $LN40@TextInfoDi
  00155	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00158	eb 03		 jmp	 SHORT $LN41@TextInfoDi
$LN40@TextInfoDi:
  0015a	83 c0 04	 add	 eax, 4
$LN41@TextInfoDi:
  0015d	8d 14 36	 lea	 edx, DWORD PTR [esi+esi]
  00160	52		 push	 edx
  00161	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@OAHHFEJL@Pre?9Boot?5Troubleshooting?$AA@
  00166	50		 push	 eax
  00167	e8 00 00 00 00	 call	 _PrintHardCopyTextUTF16
  0016c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0016f	8d 4c 24 24	 lea	 ecx, DWORD PTR $T187138[esp+260]
  00173	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00178	8d 8c 24 94 00
	00 00		 lea	 ecx, DWORD PTR $T187137[esp+260]
  0017f	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00184	5f		 pop	 edi

; 2634 : 				break;
; 2635 : 			}
; 2636 : 		}
; 2637 : 		return 1;

  00185	b8 01 00 00 00	 mov	 eax, 1
  0018a	5e		 pop	 esi

; 2646 : }

  0018b	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  00191	c2 10 00	 ret	 16			; 00000010H
$LN13@TextInfoDi:

; 2581 : 				break;
; 2582 : 
; 2583 : 			case TC_TBXID_SYS_ENC_RESCUE_DISK:
; 2584 : 				PrintHardCopyTextUTF16 ((wchar_t *) GetRescueDiskHelpString ().c_str(), "CipherShed Rescue Disk Help", GetRescueDiskHelpString ().length () * 2);

  00194	8d 84 24 cc 00
	00 00		 lea	 eax, DWORD PTR $T187139[esp+260]
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 ?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetRescueDiskHelpString
  001a1	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  001a4	8d 4c 24 60	 lea	 ecx, DWORD PTR $T187140[esp+264]
  001a8	51		 push	 ecx
  001a9	e8 00 00 00 00	 call	 ?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetRescueDiskHelpString
  001ae	83 c4 08	 add	 esp, 8
  001b1	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  001b5	72 05		 jb	 SHORT $LN48@TextInfoDi
  001b7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001ba	eb 03		 jmp	 SHORT $LN49@TextInfoDi
$LN48@TextInfoDi:
  001bc	83 c0 04	 add	 eax, 4
$LN49@TextInfoDi:
  001bf	8d 14 36	 lea	 edx, DWORD PTR [esi+esi]
  001c2	52		 push	 edx
  001c3	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BCCJBOGG@CipherShed?5Rescue?5Disk?5Help?$AA@
  001c8	50		 push	 eax
  001c9	e8 00 00 00 00	 call	 _PrintHardCopyTextUTF16
  001ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d1	8d 4c 24 5c	 lea	 ecx, DWORD PTR $T187140[esp+260]
  001d5	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001da	8d 8c 24 cc 00
	00 00		 lea	 ecx, DWORD PTR $T187139[esp+260]
  001e1	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001e6	5f		 pop	 edi

; 2634 : 				break;
; 2635 : 			}
; 2636 : 		}
; 2637 : 		return 1;

  001e7	b8 01 00 00 00	 mov	 eax, 1
  001ec	5e		 pop	 esi

; 2646 : }

  001ed	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  001f3	c2 10 00	 ret	 16			; 00000010H
$LN12@TextInfoDi:

; 2585 : 				break;
; 2586 : 
; 2587 : 			case TC_TBXID_DECOY_OS_INSTRUCTIONS:
; 2588 : 				PrintHardCopyTextUTF16 ((wchar_t *) GetDecoyOsInstructionsString ().c_str(), "How to Create Decoy OS", GetDecoyOsInstructionsString ().length () * 2);

  001f6	8d 44 24 40	 lea	 eax, DWORD PTR $T187141[esp+260]
  001fa	50		 push	 eax
  001fb	e8 00 00 00 00	 call	 ?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetDecoyOsInstructionsString
  00200	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00203	8d 4c 24 0c	 lea	 ecx, DWORD PTR $T187142[esp+264]
  00207	51		 push	 ecx
  00208	e8 00 00 00 00	 call	 ?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetDecoyOsInstructionsString
  0020d	83 c4 08	 add	 esp, 8
  00210	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  00214	72 05		 jb	 SHORT $LN56@TextInfoDi
  00216	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00219	eb 03		 jmp	 SHORT $LN57@TextInfoDi
$LN56@TextInfoDi:
  0021b	83 c0 04	 add	 eax, 4
$LN57@TextInfoDi:
  0021e	8d 14 36	 lea	 edx, DWORD PTR [esi+esi]
  00221	52		 push	 edx
  00222	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@DOMMMACL@How?5to?5Create?5Decoy?5OS?$AA@
  00227	50		 push	 eax
  00228	e8 00 00 00 00	 call	 _PrintHardCopyTextUTF16
  0022d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00230	8d 4c 24 08	 lea	 ecx, DWORD PTR $T187142[esp+260]
  00234	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00239	8d 4c 24 40	 lea	 ecx, DWORD PTR $T187141[esp+260]
  0023d	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00242	5f		 pop	 edi

; 2634 : 				break;
; 2635 : 			}
; 2636 : 		}
; 2637 : 		return 1;

  00243	b8 01 00 00 00	 mov	 eax, 1
  00248	5e		 pop	 esi

; 2646 : }

  00249	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  0024f	c2 10 00	 ret	 16			; 00000010H
$LN11@TextInfoDi:

; 2589 : 				break;
; 2590 : 
; 2591 : 			case TC_TBXID_EXTRA_BOOT_PARTITION_REMOVAL_INSTRUCTIONS:
; 2592 : 				PrintHardCopyTextUTF16 (GetString ("EXTRA_BOOT_PARTITION_REMOVAL_INSTRUCTIONS"), "How to Remove Extra Boot Partition", wcslen (GetString ("EXTRA_BOOT_PARTITION_REMOVAL_INSTRUCTIONS")) * 2);

  00252	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@GKLMBFMH@EXTRA_BOOT_PARTITION_REMOVAL_INS@
  00257	e8 00 00 00 00	 call	 _GetString
  0025c	83 c4 04	 add	 esp, 4
  0025f	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL76@TextInfoDi:
  00262	66 8b 08	 mov	 cx, WORD PTR [eax]
  00265	83 c0 02	 add	 eax, 2
  00268	66 85 c9	 test	 cx, cx
  0026b	75 f5		 jne	 SHORT $LL76@TextInfoDi
  0026d	2b c2		 sub	 eax, edx
  0026f	d1 f8		 sar	 eax, 1
  00271	03 c0		 add	 eax, eax
  00273	50		 push	 eax
  00274	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@IBNJCEOK@How?5to?5Remove?5Extra?5Boot?5Partiti@
  00279	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@GKLMBFMH@EXTRA_BOOT_PARTITION_REMOVAL_INS@
  0027e	e8 00 00 00 00	 call	 _GetString
  00283	83 c4 04	 add	 esp, 4
  00286	50		 push	 eax
  00287	e8 00 00 00 00	 call	 _PrintHardCopyTextUTF16
  0028c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0028f	5f		 pop	 edi

; 2634 : 				break;
; 2635 : 			}
; 2636 : 		}
; 2637 : 		return 1;

  00290	b8 01 00 00 00	 mov	 eax, 1
  00295	5e		 pop	 esi

; 2646 : }

  00296	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  0029c	c2 10 00	 ret	 16			; 00000010H
$LN17@TextInfoDi:
  0029f	5f		 pop	 edi

; 2593 : 				break;
; 2594 : 			}
; 2595 : 			return 1;
; 2596 : 		}
; 2597 : 
; 2598 : 		return 0;

  002a0	33 c0		 xor	 eax, eax
  002a2	5e		 pop	 esi

; 2646 : }

  002a3	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  002a9	c2 10 00	 ret	 16			; 00000010H
$LN33@TextInfoDi:

; 2522 : 	WORD lw = LOWORD (wParam);
; 2523 : 	static int nID = 0;
; 2524 : 
; 2525 : 	switch (msg)

  002ac	3d 67 80 00 00	 cmp	 eax, 32871		; 00008067H

; 2642 : 		return 1;
; 2643 : 	}
; 2644 : 
; 2645 : 	return 0;

  002b1	75 ec		 jne	 SHORT $LN17@TextInfoDi
  002b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nID@?1??TextInfoDialogBoxDlgProc@@9@16@4HA
  002b8	83 f8 04	 cmp	 eax, 4
  002bb	0f 87 9c 01 00
	00		 ja	 $LN8@TextInfoDi

; 2599 : 
; 2600 : 	case TC_APPMSG_LOAD_TEXT_BOX_CONTENT:
; 2601 : 		{
; 2602 : 			char *r = NULL;
; 2603 : 
; 2604 : 			switch (nID)

  002c1	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN80@TextInfoDi[eax*4]
$LN7@TextInfoDi:

; 2605 : 			{
; 2606 : 			case TC_TBXID_LEGAL_NOTICES:
; 2607 : 				LocalizeDialog (hwndDlg, "LEGAL_NOTICES_DLG_TITLE");

  002c8	8b bc 24 08 01
	00 00		 mov	 edi, DWORD PTR _hwndDlg$[esp+256]
  002cf	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@OOMIJPBL@LEGAL_NOTICES_DLG_TITLE?$AA@
  002d4	57		 push	 edi
  002d5	e8 00 00 00 00	 call	 _LocalizeDialog
  002da	83 c4 08	 add	 esp, 8

; 2608 : 				r = GetLegalNotices ();

  002dd	e8 00 00 00 00	 call	 _GetLegalNotices
  002e2	8b f0		 mov	 esi, eax

; 2609 : 				if (r != NULL)

  002e4	85 f6		 test	 esi, esi
  002e6	0f 84 71 01 00
	00		 je	 $LN8@TextInfoDi

; 2610 : 				{
; 2611 : 					SetWindowTextA(GetDlgItem (hwndDlg, IDC_INFO_BOX_TEXT), r);

  002ec	56		 push	 esi
  002ed	68 91 13 00 00	 push	 5009			; 00001391H
  002f2	57		 push	 edi
  002f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  002f9	50		 push	 eax
  002fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 2612 : 					free (r);

  00300	56		 push	 esi
  00301	e8 00 00 00 00	 call	 _free
  00306	83 c4 04	 add	 esp, 4
  00309	5f		 pop	 edi

; 2634 : 				break;
; 2635 : 			}
; 2636 : 		}
; 2637 : 		return 1;

  0030a	b8 01 00 00 00	 mov	 eax, 1
  0030f	5e		 pop	 esi

; 2646 : }

  00310	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  00316	c2 10 00	 ret	 16			; 00000010H
$LN5@TextInfoDi:

; 2613 : 				}
; 2614 : 				break;
; 2615 : 
; 2616 : 			case TC_TBXID_SYS_ENCRYPTION_PRETEST:
; 2617 : 				LocalizeDialog (hwndDlg, NULL);

  00319	8b b4 24 08 01
	00 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+256]
  00320	6a 00		 push	 0
  00322	56		 push	 esi
  00323	e8 00 00 00 00	 call	 _LocalizeDialog

; 2618 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_INFO_BOX_TEXT), (wchar_t *) GetSysEncryptionPretestInfo2String ().c_str());

  00328	8d 94 24 80 00
	00 00		 lea	 edx, DWORD PTR $T187143[esp+268]
  0032f	52		 push	 edx
  00330	e8 00 00 00 00	 call	 ?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetSysEncryptionPretestInfo2String
  00335	83 c4 0c	 add	 esp, 12			; 0000000cH
  00338	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  0033c	72 05		 jb	 SHORT $LN62@TextInfoDi
  0033e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00341	eb 03		 jmp	 SHORT $LN63@TextInfoDi
$LN62@TextInfoDi:
  00343	83 c0 04	 add	 eax, 4
$LN63@TextInfoDi:
  00346	50		 push	 eax
  00347	68 91 13 00 00	 push	 5009			; 00001391H
  0034c	56		 push	 esi
  0034d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00353	50		 push	 eax
  00354	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
  0035a	8d 4c 24 78	 lea	 ecx, DWORD PTR $T187143[esp+260]
  0035e	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00363	5f		 pop	 edi

; 2634 : 				break;
; 2635 : 			}
; 2636 : 		}
; 2637 : 		return 1;

  00364	b8 01 00 00 00	 mov	 eax, 1
  00369	5e		 pop	 esi

; 2646 : }

  0036a	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  00370	c2 10 00	 ret	 16			; 00000010H
$LN4@TextInfoDi:

; 2619 : 				break;
; 2620 : 
; 2621 : 			case TC_TBXID_SYS_ENC_RESCUE_DISK:
; 2622 : 				LocalizeDialog (hwndDlg, NULL);

  00373	8b b4 24 08 01
	00 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+256]
  0037a	6a 00		 push	 0
  0037c	56		 push	 esi
  0037d	e8 00 00 00 00	 call	 _LocalizeDialog

; 2623 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_INFO_BOX_TEXT), (wchar_t *) GetRescueDiskHelpString ().c_str());

  00382	8d 84 24 b8 00
	00 00		 lea	 eax, DWORD PTR $T187144[esp+268]
  00389	50		 push	 eax
  0038a	e8 00 00 00 00	 call	 ?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetRescueDiskHelpString
  0038f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00392	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  00396	72 05		 jb	 SHORT $LN68@TextInfoDi
  00398	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0039b	eb 03		 jmp	 SHORT $LN69@TextInfoDi
$LN68@TextInfoDi:
  0039d	83 c0 04	 add	 eax, 4
$LN69@TextInfoDi:
  003a0	50		 push	 eax
  003a1	68 91 13 00 00	 push	 5009			; 00001391H
  003a6	56		 push	 esi
  003a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  003ad	50		 push	 eax
  003ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
  003b4	8d 8c 24 b0 00
	00 00		 lea	 ecx, DWORD PTR $T187144[esp+260]
  003bb	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  003c0	5f		 pop	 edi

; 2634 : 				break;
; 2635 : 			}
; 2636 : 		}
; 2637 : 		return 1;

  003c1	b8 01 00 00 00	 mov	 eax, 1
  003c6	5e		 pop	 esi

; 2646 : }

  003c7	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  003cd	c2 10 00	 ret	 16			; 00000010H
$LN3@TextInfoDi:

; 2624 : 				break;
; 2625 : 
; 2626 : 			case TC_TBXID_DECOY_OS_INSTRUCTIONS:
; 2627 : 				LocalizeDialog (hwndDlg, NULL);

  003d0	8b b4 24 08 01
	00 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+256]
  003d7	6a 00		 push	 0
  003d9	56		 push	 esi
  003da	e8 00 00 00 00	 call	 _LocalizeDialog

; 2628 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_INFO_BOX_TEXT), (wchar_t *) GetDecoyOsInstructionsString ().c_str());

  003df	8d 8c 24 f0 00
	00 00		 lea	 ecx, DWORD PTR $T187145[esp+268]
  003e6	51		 push	 ecx
  003e7	e8 00 00 00 00	 call	 ?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetDecoyOsInstructionsString
  003ec	83 c4 0c	 add	 esp, 12			; 0000000cH
  003ef	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  003f3	72 05		 jb	 SHORT $LN74@TextInfoDi
  003f5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  003f8	eb 03		 jmp	 SHORT $LN75@TextInfoDi
$LN74@TextInfoDi:
  003fa	83 c0 04	 add	 eax, 4
$LN75@TextInfoDi:
  003fd	50		 push	 eax
  003fe	68 91 13 00 00	 push	 5009			; 00001391H
  00403	56		 push	 esi
  00404	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0040a	50		 push	 eax
  0040b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
  00411	8d 8c 24 e8 00
	00 00		 lea	 ecx, DWORD PTR $T187145[esp+260]
  00418	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0041d	5f		 pop	 edi

; 2634 : 				break;
; 2635 : 			}
; 2636 : 		}
; 2637 : 		return 1;

  0041e	b8 01 00 00 00	 mov	 eax, 1
  00423	5e		 pop	 esi

; 2646 : }

  00424	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  0042a	c2 10 00	 ret	 16			; 00000010H
$LN2@TextInfoDi:

; 2629 : 				break;
; 2630 : 
; 2631 : 			case TC_TBXID_EXTRA_BOOT_PARTITION_REMOVAL_INSTRUCTIONS:
; 2632 : 				LocalizeDialog (hwndDlg, NULL);

  0042d	8b b4 24 08 01
	00 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+256]
  00434	6a 00		 push	 0
  00436	56		 push	 esi
  00437	e8 00 00 00 00	 call	 _LocalizeDialog

; 2633 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_INFO_BOX_TEXT), GetString ("EXTRA_BOOT_PARTITION_REMOVAL_INSTRUCTIONS"));

  0043c	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@GKLMBFMH@EXTRA_BOOT_PARTITION_REMOVAL_INS@
  00441	e8 00 00 00 00	 call	 _GetString
  00446	83 c4 0c	 add	 esp, 12			; 0000000cH
  00449	50		 push	 eax
  0044a	68 91 13 00 00	 push	 5009			; 00001391H
  0044f	56		 push	 esi
  00450	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00456	50		 push	 eax
  00457	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
$LN8@TextInfoDi:
  0045d	5f		 pop	 edi

; 2634 : 				break;
; 2635 : 			}
; 2636 : 		}
; 2637 : 		return 1;

  0045e	b8 01 00 00 00	 mov	 eax, 1
  00463	5e		 pop	 esi

; 2646 : }

  00464	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  0046a	c2 10 00	 ret	 16			; 00000010H
  0046d	8d 49 00	 npad	 3
$LN78@TextInfoDi:
  00470	00 00 00 00	 DD	 $LN25@TextInfoDi
  00474	00 00 00 00	 DD	 $LN21@TextInfoDi
  00478	00 00 00 00	 DD	 $LN21@TextInfoDi
  0047c	00 00 00 00	 DD	 $LN21@TextInfoDi
  00480	00 00 00 00	 DD	 $LN21@TextInfoDi
$LN79@TextInfoDi:
  00484	00 00 00 00	 DD	 $LN14@TextInfoDi
  00488	00 00 00 00	 DD	 $LN13@TextInfoDi
  0048c	00 00 00 00	 DD	 $LN12@TextInfoDi
  00490	00 00 00 00	 DD	 $LN11@TextInfoDi
$LN80@TextInfoDi:
  00494	00 00 00 00	 DD	 $LN7@TextInfoDi
  00498	00 00 00 00	 DD	 $LN5@TextInfoDi
  0049c	00 00 00 00	 DD	 $LN4@TextInfoDi
  004a0	00 00 00 00	 DD	 $LN3@TextInfoDi
  004a4	00 00 00 00	 DD	 $LN2@TextInfoDi
_TextInfoDialogBoxDlgProc@16 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@MHPFPHDI@ASK_REMOVE_DEVICE_WRITE_PROTECTI@ ; `string'
PUBLIC	??_C@_0BH@GHLJCPDI@?2Device?2HarddiskVolume?$AA@ ; `string'
PUBLIC	??_C@_0DB@LCJCCDBH@MOUNTED_DEVICE_FORCED_READ_ONLY_@ ; `string'
PUBLIC	??_C@_0BB@EPPOJBJL@?2Device?2Harddisk?$AA@	; `string'
PUBLIC	??_C@_0CA@HAHCAFMF@MOUNTED_DEVICE_FORCED_READ_ONLY?$AA@ ; `string'
PUBLIC	??_C@_0CD@HGDBCKJG@MOUNTED_CONTAINER_FORCED_READ_ON@ ; `string'
PUBLIC	??_C@_0BF@GHMEOCNL@MOUNTED_VOLUME_DIRTY?$AA@	; `string'
PUBLIC	??_C@_0CE@NGBHCJPO@HEADER_DAMAGED_AUTO_USED_HEADER_@ ; `string'
PUBLIC	??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@		; `string'
PUBLIC	??_C@_0CI@EOBACLIE@HIDDEN_VOL_PROT_PASSWORD_US_KEYB@ ; `string'
PUBLIC	??_C@_1DM@FMJIKGBL@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BN@CEPHIDFC@?2Device?2Harddisk?$CFd?2Partition?$AA@ ; `string'
PUBLIC	??_C@_0BD@NBNNICAF@FILE_IN_USE_FAILED?$AA@	; `string'
PUBLIC	??_C@_0M@CLFBJLHD@FILE_IN_USE?$AA@		; `string'
PUBLIC	??_C@_1DK@KHADBPEJ@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_03IDDIGDHP@UNC?$AA@			; `string'
PUBLIC	??_C@_02HDBGODGB@?2?2?$AA@			; `string'
PUBLIC	??_C@_04HMNMCKMH@?2?2?$DP?2?$AA@		; `string'
PUBLIC	??_C@_0BJ@PCMNJMOK@DRIVE_LETTER_UNAVAILABLE?$AA@ ; `string'
PUBLIC	??_C@_0BE@NEFDJEPG@VOL_ALREADY_MOUNTED?$AA@	; `string'
PUBLIC	_mountOptions$GSCopy$
PUBLIC	_password$GSCopy$
PUBLIC	_volumePath$GSCopy$
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_MountVolume
EXTRN	_AskNoYes:PROC
EXTRN	_AskWarnYesNoStringTopmost:PROC
EXTRN	_handleError:PROC
EXTRN	_WarningDirect:PROC
EXTRN	?GetWrongPasswordErrorMessage@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@@Z:PROC ; GetWrongPasswordErrorMessage
EXTRN	_AskWarnNoYes:PROC
EXTRN	_swscanf_s:PROC
EXTRN	__imp__GetDiskFreeSpaceA@20:PROC
EXTRN	_CreateFullVolumePath:PROC
EXTRN	?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z:PROC ; VolumeGuidPathToDevicePath
EXTRN	_IsMountedVolume:PROC
;	COMDAT ??_C@_0CD@MHPFPHDI@ASK_REMOVE_DEVICE_WRITE_PROTECTI@
CONST	SEGMENT
??_C@_0CD@MHPFPHDI@ASK_REMOVE_DEVICE_WRITE_PROTECTI@ DB 'ASK_REMOVE_DEVIC'
	DB	'E_WRITE_PROTECTION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GHLJCPDI@?2Device?2HarddiskVolume?$AA@
CONST	SEGMENT
??_C@_0BH@GHLJCPDI@?2Device?2HarddiskVolume?$AA@ DB '\Device\HarddiskVolu'
	DB	'me', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@LCJCCDBH@MOUNTED_DEVICE_FORCED_READ_ONLY_@
CONST	SEGMENT
??_C@_0DB@LCJCCDBH@MOUNTED_DEVICE_FORCED_READ_ONLY_@ DB 'MOUNTED_DEVICE_F'
	DB	'ORCED_READ_ONLY_WRITE_PROTECTION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EPPOJBJL@?2Device?2Harddisk?$AA@
CONST	SEGMENT
??_C@_0BB@EPPOJBJL@?2Device?2Harddisk?$AA@ DB '\Device\Harddisk', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HAHCAFMF@MOUNTED_DEVICE_FORCED_READ_ONLY?$AA@
CONST	SEGMENT
??_C@_0CA@HAHCAFMF@MOUNTED_DEVICE_FORCED_READ_ONLY?$AA@ DB 'MOUNTED_DEVIC'
	DB	'E_FORCED_READ_ONLY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HGDBCKJG@MOUNTED_CONTAINER_FORCED_READ_ON@
CONST	SEGMENT
??_C@_0CD@HGDBCKJG@MOUNTED_CONTAINER_FORCED_READ_ON@ DB 'MOUNTED_CONTAINE'
	DB	'R_FORCED_READ_ONLY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GHMEOCNL@MOUNTED_VOLUME_DIRTY?$AA@
CONST	SEGMENT
??_C@_0BF@GHMEOCNL@MOUNTED_VOLUME_DIRTY?$AA@ DB 'MOUNTED_VOLUME_DIRTY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NGBHCJPO@HEADER_DAMAGED_AUTO_USED_HEADER_@
CONST	SEGMENT
??_C@_0CE@NGBHCJPO@HEADER_DAMAGED_AUTO_USED_HEADER_@ DB 'HEADER_DAMAGED_A'
	DB	'UTO_USED_HEADER_BAK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@ DB 0aH, 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EOBACLIE@HIDDEN_VOL_PROT_PASSWORD_US_KEYB@
CONST	SEGMENT
??_C@_0CI@EOBACLIE@HIDDEN_VOL_PROT_PASSWORD_US_KEYB@ DB 'HIDDEN_VOL_PROT_'
	DB	'PASSWORD_US_KEYB_LAYOUT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@FMJIKGBL@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@FMJIKGBL@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA0?$AA?$AA@ DB '\'
	DB	00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'\', 00H, 'H', 00H, 'a', 00H, 'r', 00H, 'd', 00H, 'd', 00H, 'i'
	DB	00H, 's', 00H, 'k', 00H, '%', 00H, 'd', 00H, '\', 00H, 'P', 00H
	DB	'a', 00H, 'r', 00H, 't', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CEPHIDFC@?2Device?2Harddisk?$CFd?2Partition?$AA@
CONST	SEGMENT
??_C@_0BN@CEPHIDFC@?2Device?2Harddisk?$CFd?2Partition?$AA@ DB '\Device\Ha'
	DB	'rddisk%d\Partition', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NBNNICAF@FILE_IN_USE_FAILED?$AA@
CONST	SEGMENT
??_C@_0BD@NBNNICAF@FILE_IN_USE_FAILED?$AA@ DB 'FILE_IN_USE_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CLFBJLHD@FILE_IN_USE?$AA@
CONST	SEGMENT
??_C@_0M@CLFBJLHD@FILE_IN_USE?$AA@ DB 'FILE_IN_USE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@KHADBPEJ@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@KHADBPEJ@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ DB '\'
	DB	00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'\', 00H, 'H', 00H, 'a', 00H, 'r', 00H, 'd', 00H, 'd', 00H, 'i'
	DB	00H, 's', 00H, 'k', 00H, '%', 00H, 'd', 00H, '\', 00H, 'P', 00H
	DB	'a', 00H, 'r', 00H, 't', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IDDIGDHP@UNC?$AA@
CONST	SEGMENT
??_C@_03IDDIGDHP@UNC?$AA@ DB 'UNC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HDBGODGB@?2?2?$AA@
CONST	SEGMENT
??_C@_02HDBGODGB@?2?2?$AA@ DB '\\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04HMNMCKMH@?2?2?$DP?2?$AA@
CONST	SEGMENT
??_C@_04HMNMCKMH@?2?2?$DP?2?$AA@ DB '\\?\', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PCMNJMOK@DRIVE_LETTER_UNAVAILABLE?$AA@
CONST	SEGMENT
??_C@_0BJ@PCMNJMOK@DRIVE_LETTER_UNAVAILABLE?$AA@ DB 'DRIVE_LETTER_UNAVAIL'
	DB	'ABLE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NEFDJEPG@VOL_ALREADY_MOUNTED?$AA@
CONST	SEGMENT
??_C@_0BE@NEFDJEPG@VOL_ALREADY_MOUNTED?$AA@ DB 'VOL_ALREADY_MOUNTED', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _MountVolume
_TEXT	SEGMENT
_hwndDlg$GSCopy$ = -10036				; size = 4
_volumePath$GSCopy$ = -10032				; size = 4
_bDevice$ = -10028					; size = 4
_mountOptions$GSCopy$ = -10024				; size = 4
_d$142103 = -10020					; size = 4
_favoriteMountOnArrivalRetryCount$ = -10016		; size = 4
_password$GSCopy$ = -10012				; size = 4
_bps$142101 = -10008					; size = 4
_flags$142102 = -10004					; size = 4
_driveNo$142152 = -10000				; size = 4
_dwResult$ = -9996					; size = 4
$T187262 = -9992					; size = 4
_dwResult$142158 = -9988				; size = 4
$T187261 = -9984					; size = 28
$T187263 = -9956					; size = 28
$T187264 = -9928					; size = 28
$T187271 = -9900					; size = 28
$T187269 = -9872					; size = 28
$T187270 = -9844					; size = 28
_path$ = -9816						; size = 28
_resolvedPath$142088 = -9788				; size = 28
_mount$ = -9760						; size = 736
_openTestStruct$142155 = -9024				; size = 536
_mountPoint$142188 = -8488				; size = 6
_mountPoint$142183 = -8480				; size = 6
_mountPoint$142194 = -8472				; size = 6
_mountPoint$142177 = -8464				; size = 6
_root$ = -8456						; size = 260
_msg$142176 = -8196					; size = 2048
_msg$142187 = -6148					; size = 2048
_msg$142182 = -4100					; size = 2048
_msg$142193 = -2052					; size = 2048
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_driveNo$ = 12						; size = 4
_volumePath$ = 16					; size = 4
_password$ = 20						; size = 4
_cachePassword$ = 24					; size = 4
_sharedAccess$ = 28					; size = 4
_mountOptions$ = 32					; size = 4
_quiet$ = 36						; size = 4
_bReportWrongPassword$ = 40				; size = 4
_MountVolume PROC					; COMDAT

; 5656 : {

  00000	b8 34 27 00 00	 mov	 eax, 10036		; 00002734H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 30 27
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+10036], eax
  00018	8b 84 24 38 27
	00 00		 mov	 eax, DWORD PTR _hwndDlg$[esp+10032]
  0001f	53		 push	 ebx
  00020	55		 push	 ebp
  00021	56		 push	 esi
  00022	8b b4 24 5c 27
	00 00		 mov	 esi, DWORD PTR _mountOptions$[esp+10044]

; 5657 : 	MOUNT_STRUCT mount;
; 5658 : 	DWORD dwResult;
; 5659 : 	BOOL bResult, bDevice;
; 5660 : 	char root[MAX_PATH];
; 5661 : 	int favoriteMountOnArrivalRetryCount = 0;

  00029	89 44 24 0c	 mov	 DWORD PTR _hwndDlg$GSCopy$[esp+10048], eax
  0002d	8b 84 24 4c 27
	00 00		 mov	 eax, DWORD PTR _volumePath$[esp+10044]
  00034	57		 push	 edi
  00035	8b bc 24 54 27
	00 00		 mov	 edi, DWORD PTR _password$[esp+10048]
  0003c	33 db		 xor	 ebx, ebx

; 5662 : 
; 5663 : #ifdef TCMOUNT
; 5664 : 	if (mountOptions->PartitionInInactiveSysEncScope)
; 5665 : 	{
; 5666 : 		if (!CheckSysEncMountWithoutPBA (volumePath, quiet))
; 5667 : 			return -1;
; 5668 : 	}
; 5669 : #endif
; 5670 : 
; 5671 : 	if (IsMountedVolume (volumePath))

  0003e	50		 push	 eax
  0003f	89 44 24 18	 mov	 DWORD PTR _volumePath$GSCopy$[esp+10056], eax
  00043	89 7c 24 2c	 mov	 DWORD PTR _password$GSCopy$[esp+10056], edi
  00047	89 74 24 20	 mov	 DWORD PTR _mountOptions$GSCopy$[esp+10056], esi
  0004b	89 5c 24 28	 mov	 DWORD PTR _favoriteMountOnArrivalRetryCount$[esp+10056], ebx
  0004f	e8 00 00 00 00	 call	 _IsMountedVolume
  00054	83 c4 04	 add	 esp, 4
  00057	85 c0		 test	 eax, eax
  00059	74 1e		 je	 SHORT $LN60@MountVolum

; 5672 : 	{
; 5673 : 		if (!quiet)

  0005b	39 9c 24 64 27
	00 00		 cmp	 DWORD PTR _quiet$[esp+10048], ebx
  00062	75 0d		 jne	 SHORT $LN59@MountVolum

; 5674 : 			Error ("VOL_ALREADY_MOUNTED");

  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NEFDJEPG@VOL_ALREADY_MOUNTED?$AA@
  00069	e8 00 00 00 00	 call	 _Error
  0006e	83 c4 04	 add	 esp, 4
$LN59@MountVolum:

; 5675 : 		return -1;

  00071	83 c8 ff	 or	 eax, -1
  00074	e9 e8 0a 00 00	 jmp	 $LN61@MountVolum
$LN60@MountVolum:

; 5676 : 	}
; 5677 : 
; 5678 : 	if (!IsDriveAvailable (driveNo))

  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLogicalDrives@0
  0007f	8b 8c 24 4c 27
	00 00		 mov	 ecx, DWORD PTR _driveNo$[esp+10048]
  00086	ba 01 00 00 00	 mov	 edx, 1
  0008b	d3 e2		 shl	 edx, cl
  0008d	85 c2		 test	 eax, edx
  0008f	74 1e		 je	 SHORT $LN58@MountVolum

; 5679 : 	{
; 5680 : 		if (!quiet)

  00091	39 9c 24 64 27
	00 00		 cmp	 DWORD PTR _quiet$[esp+10048], ebx
  00098	75 d7		 jne	 SHORT $LN59@MountVolum

; 5681 : 			Error ("DRIVE_LETTER_UNAVAILABLE");

  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PCMNJMOK@DRIVE_LETTER_UNAVAILABLE?$AA@
  0009f	e8 00 00 00 00	 call	 _Error
  000a4	83 c4 04	 add	 esp, 4

; 5682 : 
; 5683 : 		return -1;

  000a7	83 c8 ff	 or	 eax, -1
  000aa	e9 b2 0a 00 00	 jmp	 $LN61@MountVolum
$LN58@MountVolum:

; 5684 : 	}
; 5685 : 
; 5686 : 	// If using cached passwords, check cache status first
; 5687 : 	if (password == NULL && IsPasswordCacheEmpty ())

  000af	3b fb		 cmp	 edi, ebx
  000b1	75 0d		 jne	 SHORT $LN56@MountVolum
  000b3	e8 00 00 00 00	 call	 _IsPasswordCacheEmpty
  000b8	85 c0		 test	 eax, eax

; 5688 : 		return 0;

  000ba	0f 85 cf 07 00
	00		 jne	 $LN441@MountVolum
$LN56@MountVolum:

; 5689 : 
; 5690 : 	ZeroMemory (&mount, sizeof (mount));

  000c0	68 e0 02 00 00	 push	 736			; 000002e0H
  000c5	8d 84 24 28 01
	00 00		 lea	 eax, DWORD PTR _mount$[esp+10056]
  000cc	53		 push	 ebx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 _memset

; 5691 : 	mount.bExclusiveAccess = sharedAccess ? FALSE : TRUE;
; 5692 : 	mount.SystemFavorite = MountVolumesAsSystemFavorite;

  000d3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MountVolumesAsSystemFavorite

; 5693 : 	mount.UseBackupHeader =  mountOptions->UseBackupHeader;

  000d9	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  000dc	33 c9		 xor	 ecx, ecx
  000de	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e1	39 9c 24 5c 27
	00 00		 cmp	 DWORD PTR _sharedAccess$[esp+10048], ebx
  000e8	89 94 24 ac 03
	00 00		 mov	 DWORD PTR _mount$[esp+10700], edx
  000ef	0f 94 c1	 sete	 cl
  000f2	89 84 24 fc 03
	00 00		 mov	 DWORD PTR _mount$[esp+10780], eax

; 5694 : 	mount.RecoveryMode = mountOptions->RecoveryMode;

  000f9	bd 10 00 00 00	 mov	 ebp, 16			; 00000010H
  000fe	89 8c 24 98 03
	00 00		 mov	 DWORD PTR _mount$[esp+10680], ecx
  00105	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]
  00108	89 8c 24 00 04
	00 00		 mov	 DWORD PTR _mount$[esp+10784], ecx
  0010f	90		 npad	 1
$retry$142075:

; 5695 : 
; 5696 : retry:
; 5697 : 	mount.nDosDriveNo = driveNo;

  00110	8b 94 24 4c 27
	00 00		 mov	 edx, DWORD PTR _driveNo$[esp+10048]

; 5698 : 	mount.bCache = cachePassword;

  00117	8b 84 24 58 27
	00 00		 mov	 eax, DWORD PTR _cachePassword$[esp+10048]
  0011e	89 94 24 88 03
	00 00		 mov	 DWORD PTR _mount$[esp+10664], edx
  00125	89 84 24 84 03
	00 00		 mov	 DWORD PTR _mount$[esp+10660], eax

; 5699 : 
; 5700 : 	mount.bPartitionInInactiveSysEncScope = FALSE;

  0012c	89 9c 24 a4 03
	00 00		 mov	 DWORD PTR _mount$[esp+10692], ebx

; 5701 : 
; 5702 : 	if (password != NULL)

  00133	39 5c 24 28	 cmp	 DWORD PTR _password$GSCopy$[esp+10052], ebx
  00137	74 14		 je	 SHORT $LN55@MountVolum

; 5703 : 		mount.VolumePassword = *password;

  00139	8b 74 24 28	 mov	 esi, DWORD PTR _password$GSCopy$[esp+10052]
  0013d	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  00142	8d bc 24 3c 03
	00 00		 lea	 edi, DWORD PTR _mount$[esp+10588]
  00149	f3 a5		 rep movsd

; 5704 : 	else

  0014b	eb 07		 jmp	 SHORT $LN54@MountVolum
$LN55@MountVolum:

; 5705 : 		mount.VolumePassword.Length = 0;

  0014d	89 9c 24 3c 03
	00 00		 mov	 DWORD PTR _mount$[esp+10588], ebx
$LN54@MountVolum:

; 5706 : 
; 5707 : 	if (!mountOptions->ReadOnly && mountOptions->ProtectHiddenVolume)

  00154	8b 54 24 1c	 mov	 edx, DWORD PTR _mountOptions$GSCopy$[esp+10052]
  00158	8b 02		 mov	 eax, DWORD PTR [edx]
  0015a	3b c3		 cmp	 eax, ebx
  0015c	75 23		 jne	 SHORT $LN53@MountVolum
  0015e	39 5a 08	 cmp	 DWORD PTR [edx+8], ebx
  00161	74 1e		 je	 SHORT $LN53@MountVolum

; 5708 : 	{
; 5709 : 		mount.ProtectedHidVolPassword = mountOptions->ProtectedHidVolPassword;

  00163	8d 72 14	 lea	 esi, DWORD PTR [edx+20]
  00166	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  0016b	8d bc 24 b4 03
	00 00		 lea	 edi, DWORD PTR _mount$[esp+10708]
  00172	f3 a5		 rep movsd

; 5710 : 		mount.bProtectHiddenVolume = TRUE;

  00174	c7 84 24 b0 03
	00 00 01 00 00
	00		 mov	 DWORD PTR _mount$[esp+10704], 1

; 5711 : 	}
; 5712 : 	else

  0017f	eb 07		 jmp	 SHORT $LN52@MountVolum
$LN53@MountVolum:

; 5713 : 		mount.bProtectHiddenVolume = FALSE;

  00181	89 9c 24 b0 03
	00 00		 mov	 DWORD PTR _mount$[esp+10704], ebx
$LN52@MountVolum:

; 5714 : 
; 5715 : 	mount.bMountReadOnly = mountOptions->ReadOnly;
; 5716 : 	mount.bMountRemovable = mountOptions->Removable;
; 5717 : 	mount.bPreserveTimestamp = mountOptions->PreserveTimestamp;
; 5718 : 
; 5719 : 	mount.bMountManager = TRUE;
; 5720 : 
; 5721 : 	// Windows 2000 mount manager causes problems with remounted volumes
; 5722 : 	if (CurrentOSMajor == 5 && CurrentOSMinor == 0)

  00188	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _CurrentOSMajor, 5
  0018f	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00192	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  00195	89 84 24 90 03
	00 00		 mov	 DWORD PTR _mount$[esp+10672], eax
  0019c	89 8c 24 94 03
	00 00		 mov	 DWORD PTR _mount$[esp+10676], ecx
  001a3	89 94 24 a0 03
	00 00		 mov	 DWORD PTR _mount$[esp+10688], edx
  001aa	c7 84 24 9c 03
	00 00 01 00 00
	00		 mov	 DWORD PTR _mount$[esp+10684], 1
  001b5	75 0f		 jne	 SHORT $LN51@MountVolum
  001b7	39 1d 00 00 00
	00		 cmp	 DWORD PTR _CurrentOSMinor, ebx
  001bd	75 07		 jne	 SHORT $LN51@MountVolum

; 5723 : 		mount.bMountManager = FALSE;

  001bf	89 9c 24 9c 03
	00 00		 mov	 DWORD PTR _mount$[esp+10684], ebx
$LN51@MountVolum:

; 5724 : 
; 5725 : 	string path = volumePath;

  001c6	8b 74 24 14	 mov	 esi, DWORD PTR _volumePath$GSCopy$[esp+10052]
  001ca	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  001cf	8b c6		 mov	 eax, esi
  001d1	89 bc 24 04 01
	00 00		 mov	 DWORD PTR _path$[esp+10076], edi
  001d8	89 9c 24 00 01
	00 00		 mov	 DWORD PTR _path$[esp+10072], ebx
  001df	88 9c 24 f0 00
	00 00		 mov	 BYTE PTR _path$[esp+10056], bl
  001e6	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  001e9	8d a4 24 00 00
	00 00		 npad	 7
$LL422@MountVolum:
  001f0	8a 08		 mov	 cl, BYTE PTR [eax]
  001f2	40		 inc	 eax
  001f3	3a cb		 cmp	 cl, bl
  001f5	75 f9		 jne	 SHORT $LL422@MountVolum
  001f7	2b c2		 sub	 eax, edx
  001f9	50		 push	 eax
  001fa	56		 push	 esi
  001fb	8d 8c 24 f4 00
	00 00		 lea	 ecx, DWORD PTR _path$[esp+10060]
  00202	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 5726 : 	if (path.find ("\\\\?\\") == 0)

  00207	6a 04		 push	 4
  00209	53		 push	 ebx
  0020a	68 00 00 00 00	 push	 OFFSET ??_C@_04HMNMCKMH@?2?2?$DP?2?$AA@
  0020f	8d 8c 24 f8 00
	00 00		 lea	 ecx, DWORD PTR _path$[esp+10064]
  00216	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  0021b	85 c0		 test	 eax, eax
  0021d	75 6a		 jne	 SHORT $LN430@MountVolum

; 5727 : 	{
; 5728 : 		// Remove \\?\ prefix
; 5729 : 		path = path.substr (4);

  0021f	6a ff		 push	 -1
  00221	6a 04		 push	 4
  00223	8d 44 24 4c	 lea	 eax, DWORD PTR $T187261[esp+10060]
  00227	50		 push	 eax
  00228	8d 8c 24 f8 00
	00 00		 lea	 ecx, DWORD PTR _path$[esp+10064]
  0022f	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  00234	6a ff		 push	 -1
  00236	53		 push	 ebx
  00237	50		 push	 eax
  00238	8d 8c 24 f8 00
	00 00		 lea	 ecx, DWORD PTR _path$[esp+10064]
  0023f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00244	39 6c 24 5c	 cmp	 DWORD PTR $T187261[esp+10076], ebp
  00248	72 0d		 jb	 SHORT $LN125@MountVolum
  0024a	8b 4c 24 48	 mov	 ecx, DWORD PTR $T187261[esp+10056]
  0024e	51		 push	 ecx
  0024f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00254	83 c4 04	 add	 esp, 4
$LN125@MountVolum:

; 5730 : 		strcpy_s (volumePath, TC_MAX_PATH, path.c_str());

  00257	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR _path$[esp+10056]
  0025e	89 7c 24 5c	 mov	 DWORD PTR $T187261[esp+10076], edi
  00262	89 5c 24 58	 mov	 DWORD PTR $T187261[esp+10072], ebx
  00266	88 5c 24 48	 mov	 BYTE PTR $T187261[esp+10056], bl
  0026a	39 ac 24 04 01
	00 00		 cmp	 DWORD PTR _path$[esp+10076], ebp
  00271	73 07		 jae	 SHORT $LN140@MountVolum
  00273	8d 84 24 f0 00
	00 00		 lea	 eax, DWORD PTR _path$[esp+10056]
$LN140@MountVolum:
  0027a	50		 push	 eax
  0027b	68 04 01 00 00	 push	 260			; 00000104H
  00280	56		 push	 esi
  00281	e8 00 00 00 00	 call	 _strcpy_s
  00286	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN430@MountVolum:

; 5731 : 	}
; 5732 : 	
; 5733 : 	if (path.find ("Volume{") == 0 && path.rfind ("}\\") == path.size() - 2)

  00289	6a 07		 push	 7
  0028b	53		 push	 ebx
  0028c	68 00 00 00 00	 push	 OFFSET ??_C@_07HBPFMAGN@Volume?$HL?$AA@
  00291	8d 8c 24 f8 00
	00 00		 lea	 ecx, DWORD PTR _path$[esp+10064]
  00298	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  0029d	85 c0		 test	 eax, eax
  0029f	0f 85 b6 00 00
	00		 jne	 $LN431@MountVolum
  002a5	6a 02		 push	 2
  002a7	6a ff		 push	 -1
  002a9	68 00 00 00 00	 push	 OFFSET ??_C@_02EKJJMPLG@?$HN?2?$AA@
  002ae	8d 8c 24 f8 00
	00 00		 lea	 ecx, DWORD PTR _path$[esp+10064]
  002b5	e8 00 00 00 00	 call	 ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
  002ba	8b 94 24 00 01
	00 00		 mov	 edx, DWORD PTR _path$[esp+10072]
  002c1	83 c2 fe	 add	 edx, -2			; fffffffeH
  002c4	3b c2		 cmp	 eax, edx
  002c6	0f 85 8f 00 00
	00		 jne	 $LN431@MountVolum

; 5734 : 	{
; 5735 : 		string resolvedPath = VolumeGuidPathToDevicePath (path);

  002cc	83 ec 1c	 sub	 esp, 28			; 0000001cH
  002cf	8b cc		 mov	 ecx, esp
  002d1	89 64 24 58	 mov	 DWORD PTR $T187262[esp+10080], esp
  002d5	6a ff		 push	 -1
  002d7	53		 push	 ebx
  002d8	8d 84 24 10 01
	00 00		 lea	 eax, DWORD PTR _path$[esp+10088]
  002df	89 79 18	 mov	 DWORD PTR [ecx+24], edi
  002e2	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  002e5	50		 push	 eax
  002e6	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  002e9	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  002ee	8d 8c 24 24 01
	00 00		 lea	 ecx, DWORD PTR _resolvedPath$142088[esp+10080]
  002f5	51		 push	 ecx
  002f6	e8 00 00 00 00	 call	 ?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z ; VolumeGuidPathToDevicePath
  002fb	83 c4 20	 add	 esp, 32			; 00000020H

; 5736 : 
; 5737 : 		if (!resolvedPath.empty())

  002fe	39 9c 24 1c 01
	00 00		 cmp	 DWORD PTR _resolvedPath$142088[esp+10072], ebx
  00305	74 26		 je	 SHORT $LN48@MountVolum

; 5738 : 			strcpy_s (volumePath, TC_MAX_PATH, resolvedPath.c_str());

  00307	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR _resolvedPath$142088[esp+10056]
  0030e	39 ac 24 20 01
	00 00		 cmp	 DWORD PTR _resolvedPath$142088[esp+10076], ebp
  00315	73 07		 jae	 SHORT $LN184@MountVolum
  00317	8d 84 24 0c 01
	00 00		 lea	 eax, DWORD PTR _resolvedPath$142088[esp+10056]
$LN184@MountVolum:
  0031e	50		 push	 eax
  0031f	68 04 01 00 00	 push	 260			; 00000104H
  00324	56		 push	 esi
  00325	e8 00 00 00 00	 call	 _strcpy_s
  0032a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN48@MountVolum:

; 5739 : 	}

  0032d	39 ac 24 20 01
	00 00		 cmp	 DWORD PTR _resolvedPath$142088[esp+10076], ebp
  00334	72 10		 jb	 SHORT $LN201@MountVolum
  00336	8b 94 24 0c 01
	00 00		 mov	 edx, DWORD PTR _resolvedPath$142088[esp+10056]
  0033d	52		 push	 edx
  0033e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00343	83 c4 04	 add	 esp, 4
$LN201@MountVolum:
  00346	89 bc 24 20 01
	00 00		 mov	 DWORD PTR _resolvedPath$142088[esp+10076], edi
  0034d	89 9c 24 1c 01
	00 00		 mov	 DWORD PTR _resolvedPath$142088[esp+10072], ebx
  00354	88 9c 24 0c 01
	00 00		 mov	 BYTE PTR _resolvedPath$142088[esp+10056], bl
$LN431@MountVolum:

; 5740 : 
; 5741 : 	CreateFullVolumePath ((char *) mount.wszVolume, volumePath, &bDevice);

  0035b	8d 44 24 18	 lea	 eax, DWORD PTR _bDevice$[esp+10052]
  0035f	50		 push	 eax
  00360	8d 8c 24 38 01
	00 00		 lea	 ecx, DWORD PTR _mount$[esp+10072]
  00367	56		 push	 esi
  00368	51		 push	 ecx
  00369	e8 00 00 00 00	 call	 _CreateFullVolumePath
  0036e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5742 : 
; 5743 : 	if (!bDevice)

  00371	39 5c 24 18	 cmp	 DWORD PTR _bDevice$[esp+10052], ebx
  00375	0f 85 35 01 00
	00		 jne	 $LN433@MountVolum

; 5744 : 	{
; 5745 : 		// UNC path
; 5746 : 		if (path.find ("\\\\") == 0)

  0037b	6a 02		 push	 2
  0037d	53		 push	 ebx
  0037e	68 00 00 00 00	 push	 OFFSET ??_C@_02HDBGODGB@?2?2?$AA@
  00383	8d 8c 24 f8 00
	00 00		 lea	 ecx, DWORD PTR _path$[esp+10064]
  0038a	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  0038f	85 c0		 test	 eax, eax
  00391	0f 85 9b 00 00
	00		 jne	 $LN432@MountVolum

; 5747 : 		{
; 5748 : 			strcpy_s ((char *)mount.wszVolume, array_capacity (mount.wszVolume), ("UNC" + path.substr (1)).c_str());

  00397	6a ff		 push	 -1
  00399	6a 01		 push	 1
  0039b	8d 54 24 68	 lea	 edx, DWORD PTR $T187263[esp+10060]
  0039f	52		 push	 edx
  003a0	8d 8c 24 f8 00
	00 00		 lea	 ecx, DWORD PTR _path$[esp+10064]
  003a7	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  003ac	50		 push	 eax
  003ad	8d 84 24 80 00
	00 00		 lea	 eax, DWORD PTR $T187264[esp+10056]
  003b4	68 00 00 00 00	 push	 OFFSET ??_C@_03IDDIGDHP@UNC?$AA@
  003b9	50		 push	 eax
  003ba	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  003bf	83 c4 0c	 add	 esp, 12			; 0000000cH
  003c2	39 68 18	 cmp	 DWORD PTR [eax+24], ebp
  003c5	72 05		 jb	 SHORT $LN219@MountVolum
  003c7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  003ca	eb 03		 jmp	 SHORT $LN220@MountVolum
$LN219@MountVolum:
  003cc	83 c0 04	 add	 eax, 4
$LN220@MountVolum:
  003cf	50		 push	 eax
  003d0	8d 8c 24 38 01
	00 00		 lea	 ecx, DWORD PTR _mount$[esp+10072]
  003d7	68 04 01 00 00	 push	 260			; 00000104H
  003dc	51		 push	 ecx
  003dd	e8 00 00 00 00	 call	 _strcpy_s
  003e2	83 c4 0c	 add	 esp, 12			; 0000000cH
  003e5	39 ac 24 94 00
	00 00		 cmp	 DWORD PTR $T187264[esp+10076], ebp
  003ec	72 10		 jb	 SHORT $LN237@MountVolum
  003ee	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR $T187264[esp+10056]
  003f5	52		 push	 edx
  003f6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003fb	83 c4 04	 add	 esp, 4
$LN237@MountVolum:
  003fe	89 bc 24 94 00
	00 00		 mov	 DWORD PTR $T187264[esp+10076], edi
  00405	89 9c 24 90 00
	00 00		 mov	 DWORD PTR $T187264[esp+10072], ebx
  0040c	88 9c 24 80 00
	00 00		 mov	 BYTE PTR $T187264[esp+10056], bl
  00413	39 6c 24 78	 cmp	 DWORD PTR $T187263[esp+10076], ebp
  00417	72 0d		 jb	 SHORT $LN263@MountVolum
  00419	8b 44 24 64	 mov	 eax, DWORD PTR $T187263[esp+10056]
  0041d	50		 push	 eax
  0041e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00423	83 c4 04	 add	 esp, 4
$LN263@MountVolum:
  00426	89 7c 24 78	 mov	 DWORD PTR $T187263[esp+10076], edi
  0042a	89 5c 24 74	 mov	 DWORD PTR $T187263[esp+10072], ebx
  0042e	88 5c 24 64	 mov	 BYTE PTR $T187263[esp+10056], bl
$LN432@MountVolum:

; 5749 : 		}
; 5750 : 
; 5751 : 		if (GetVolumePathName (volumePath, root, sizeof (root) - 1))

  00432	68 03 01 00 00	 push	 259			; 00000103H
  00437	8d 8c 24 40 06
	00 00		 lea	 ecx, DWORD PTR _root$[esp+10056]
  0043e	51		 push	 ecx
  0043f	56		 push	 esi
  00440	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumePathNameA@12
  00446	85 c0		 test	 eax, eax
  00448	74 66		 je	 SHORT $LN433@MountVolum

; 5752 : 		{
; 5753 : 			DWORD bps, flags, d;
; 5754 : 			if (GetDiskFreeSpace (root, &d, &bps, &d, &d))

  0044a	8d 54 24 20	 lea	 edx, DWORD PTR _d$142103[esp+10052]
  0044e	52		 push	 edx
  0044f	8b c2		 mov	 eax, edx
  00451	50		 push	 eax
  00452	8d 4c 24 34	 lea	 ecx, DWORD PTR _bps$142101[esp+10060]
  00456	51		 push	 ecx
  00457	52		 push	 edx
  00458	8d 84 24 4c 06
	00 00		 lea	 eax, DWORD PTR _root$[esp+10068]
  0045f	50		 push	 eax
  00460	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDiskFreeSpaceA@20
  00466	85 c0		 test	 eax, eax
  00468	74 0b		 je	 SHORT $LN44@MountVolum

; 5755 : 				mount.BytesPerSector = bps;

  0046a	8b 4c 24 2c	 mov	 ecx, DWORD PTR _bps$142101[esp+10052]
  0046e	89 8c 24 8c 03
	00 00		 mov	 DWORD PTR _mount$[esp+10668], ecx
$LN44@MountVolum:

; 5756 : 
; 5757 : 			// Read-only host filesystem
; 5758 : 			if (!mount.bMountReadOnly && GetVolumeInformation (root, NULL, 0,  NULL, &d, &flags, NULL, 0))

  00475	39 9c 24 90 03
	00 00		 cmp	 DWORD PTR _mount$[esp+10672], ebx
  0047c	75 32		 jne	 SHORT $LN433@MountVolum
  0047e	53		 push	 ebx
  0047f	53		 push	 ebx
  00480	8d 54 24 38	 lea	 edx, DWORD PTR _flags$142102[esp+10060]
  00484	52		 push	 edx
  00485	8d 44 24 2c	 lea	 eax, DWORD PTR _d$142103[esp+10064]
  00489	50		 push	 eax
  0048a	53		 push	 ebx
  0048b	53		 push	 ebx
  0048c	53		 push	 ebx
  0048d	8d 8c 24 58 06
	00 00		 lea	 ecx, DWORD PTR _root$[esp+10080]
  00494	51		 push	 ecx
  00495	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumeInformationA@32
  0049b	85 c0		 test	 eax, eax
  0049d	74 11		 je	 SHORT $LN433@MountVolum

; 5759 : 				mount.bMountReadOnly = (flags & FILE_READ_ONLY_VOLUME) != 0;

  0049f	8b 54 24 30	 mov	 edx, DWORD PTR _flags$142102[esp+10052]
  004a3	c1 ea 13	 shr	 edx, 19			; 00000013H
  004a6	83 e2 01	 and	 edx, 1
  004a9	89 94 24 90 03
	00 00		 mov	 DWORD PTR _mount$[esp+10672], edx
$LN433@MountVolum:

; 5760 : 		}
; 5761 : 	}
; 5762 : 
; 5763 : 	ToUNICODE ((char *) mount.wszVolume);

  004b0	8d 84 24 34 01
	00 00		 lea	 eax, DWORD PTR _mount$[esp+10068]
  004b7	50		 push	 eax
  004b8	e8 00 00 00 00	 call	 _ToUNICODE

; 5764 : 
; 5765 : 	if (mountOptions->PartitionInInactiveSysEncScope)

  004bd	8b 4c 24 20	 mov	 ecx, DWORD PTR _mountOptions$GSCopy$[esp+10056]
  004c1	83 c4 04	 add	 esp, 4
  004c4	39 59 10	 cmp	 DWORD PTR [ecx+16], ebx
  004c7	74 2f		 je	 SHORT $LN42@MountVolum

; 5766 : 	{
; 5767 : 		if (mount.wszVolume == NULL || swscanf_s ((const wchar_t *) mount.wszVolume,
; 5768 : 			WIDE("\\Device\\Harddisk%d\\Partition"),
; 5769 : 			&mount.nPartitionInInactiveSysEncScopeDriveNo,
; 5770 : 			sizeof(mount.nPartitionInInactiveSysEncScopeDriveNo)) != 1)

  004c9	6a 04		 push	 4
  004cb	8d 94 24 ac 03
	00 00		 lea	 edx, DWORD PTR _mount$[esp+10700]
  004d2	52		 push	 edx
  004d3	8d 84 24 3c 01
	00 00		 lea	 eax, DWORD PTR _mount$[esp+10076]
  004da	68 00 00 00 00	 push	 OFFSET ??_C@_1DK@KHADBPEJ@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
  004df	50		 push	 eax
  004e0	e8 00 00 00 00	 call	 _swscanf_s
  004e5	83 c4 10	 add	 esp, 16			; 00000010H
  004e8	83 f8 01	 cmp	 eax, 1
  004eb	0f 85 df 01 00
	00		 jne	 $LN25@MountVolum

; 5771 : 		{
; 5772 : 			return -1;
; 5773 : 		}
; 5774 : 
; 5775 : 		mount.bPartitionInInactiveSysEncScope = TRUE;

  004f1	89 84 24 a4 03
	00 00		 mov	 DWORD PTR _mount$[esp+10692], eax
$LN42@MountVolum:

; 5776 : 	}
; 5777 : 
; 5778 : 	bResult = DeviceIoControl (hDriver, TC_IOCTL_MOUNT_VOLUME, &mount,
; 5779 : 		sizeof (mount), &mount, sizeof (mount), &dwResult, NULL);

  004f8	53		 push	 ebx
  004f9	8d 4c 24 3c	 lea	 ecx, DWORD PTR _dwResult$[esp+10056]
  004fd	51		 push	 ecx
  004fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hDriver
  00504	68 e0 02 00 00	 push	 736			; 000002e0H
  00509	8d 94 24 30 01
	00 00		 lea	 edx, DWORD PTR _mount$[esp+10064]
  00510	52		 push	 edx
  00511	68 e0 02 00 00	 push	 736			; 000002e0H
  00516	8b c2		 mov	 eax, edx
  00518	50		 push	 eax
  00519	68 0c 20 22 00	 push	 2236428			; 0022200cH
  0051e	51		 push	 ecx
  0051f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 5780 : 
; 5781 : 	burn (&mount.VolumePassword, sizeof (mount.VolumePassword));

  00525	8d b4 24 3c 03
	00 00		 lea	 esi, DWORD PTR _mount$[esp+10588]
  0052c	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00531	8b fa		 mov	 edi, edx
  00533	8b ce		 mov	 ecx, esi
$LL274@MountVolum:
  00535	88 19		 mov	 BYTE PTR [ecx], bl
  00537	41		 inc	 ecx
  00538	83 ef 01	 sub	 edi, 1
  0053b	75 f8		 jne	 SHORT $LL274@MountVolum
  0053d	8d 49 00	 npad	 3
$LL36@MountVolum:
  00540	4a		 dec	 edx
  00541	88 1e		 mov	 BYTE PTR [esi], bl
  00543	46		 inc	 esi
  00544	3b d3		 cmp	 edx, ebx
  00546	75 f8		 jne	 SHORT $LL36@MountVolum

; 5782 : 	burn (&mount.ProtectedHidVolPassword, sizeof (mount.ProtectedHidVolPassword));

  00548	8d b4 24 b4 03
	00 00		 lea	 esi, DWORD PTR _mount$[esp+10708]
  0054f	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00554	8b fa		 mov	 edi, edx
  00556	8b ce		 mov	 ecx, esi
$LL278@MountVolum:
  00558	88 19		 mov	 BYTE PTR [ecx], bl
  0055a	41		 inc	 ecx
  0055b	83 ef 01	 sub	 edi, 1
  0055e	75 f8		 jne	 SHORT $LL278@MountVolum
  00560	bf 01 00 00 00	 mov	 edi, 1
$LL31@MountVolum:
  00565	2b d7		 sub	 edx, edi
  00567	88 1e		 mov	 BYTE PTR [esi], bl
  00569	03 f7		 add	 esi, edi
  0056b	3b d3		 cmp	 edx, ebx
  0056d	75 f6		 jne	 SHORT $LL31@MountVolum

; 5783 : 
; 5784 : 	if (bResult == FALSE)

  0056f	3b c3		 cmp	 eax, ebx
  00571	0f 85 d3 00 00
	00		 jne	 $LN29@MountVolum

; 5785 : 	{
; 5786 : 		// Volume already open by another process
; 5787 : 		if (GetLastError () == ERROR_SHARING_VIOLATION)

  00577	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetLastError@0
  0057d	ff d6		 call	 esi
  0057f	83 f8 20	 cmp	 eax, 32			; 00000020H
  00582	0f 85 5c 01 00
	00		 jne	 $LN28@MountVolum

; 5788 : 		{
; 5789 : 			if (FavoriteMountOnArrivalInProgress && ++favoriteMountOnArrivalRetryCount < 10)

  00588	39 1d 00 00 00
	00		 cmp	 DWORD PTR _FavoriteMountOnArrivalInProgress, ebx
  0058e	74 3c		 je	 SHORT $LN27@MountVolum
  00590	8b 44 24 24	 mov	 eax, DWORD PTR _favoriteMountOnArrivalRetryCount$[esp+10052]
  00594	03 c7		 add	 eax, edi
  00596	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00599	89 44 24 24	 mov	 DWORD PTR _favoriteMountOnArrivalRetryCount$[esp+10052], eax
  0059d	7d 2d		 jge	 SHORT $LN27@MountVolum

; 5790 : 			{
; 5791 : 				Sleep (500);

  0059f	68 f4 01 00 00	 push	 500			; 000001f4H
  005a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 5792 : 				goto retry;

  005aa	39 ac 24 04 01
	00 00		 cmp	 DWORD PTR _path$[esp+10076], ebp
  005b1	0f 82 59 fb ff
	ff		 jb	 $retry$142075
  005b7	8b 94 24 f0 00
	00 00		 mov	 edx, DWORD PTR _path$[esp+10056]
  005be	52		 push	 edx
  005bf	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  005c4	83 c4 04	 add	 esp, 4
  005c7	e9 44 fb ff ff	 jmp	 $retry$142075
$LN27@MountVolum:

; 5793 : 			}
; 5794 : 
; 5795 : 			if (mount.bExclusiveAccess == FALSE)

  005cc	39 9c 24 98 03
	00 00		 cmp	 DWORD PTR _mount$[esp+10680], ebx
  005d3	0f 84 e1 00 00
	00		 je	 $LN410@MountVolum

; 5801 : 			}
; 5802 : 			else
; 5803 : 			{
; 5804 : 				if (quiet)

  005d9	39 9c 24 64 27
	00 00		 cmp	 DWORD PTR _quiet$[esp+10048], ebx
  005e0	74 29		 je	 SHORT $LN23@MountVolum

; 5805 : 				{
; 5806 : 					mount.bExclusiveAccess = FALSE;

  005e2	89 9c 24 98 03
	00 00		 mov	 DWORD PTR _mount$[esp+10680], ebx

; 5807 : 					goto retry;

  005e9	39 ac 24 04 01
	00 00		 cmp	 DWORD PTR _path$[esp+10076], ebp
  005f0	0f 82 1a fb ff
	ff		 jb	 $retry$142075
  005f6	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR _path$[esp+10056]
  005fd	50		 push	 eax
  005fe	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00603	83 c4 04	 add	 esp, 4
  00606	e9 05 fb ff ff	 jmp	 $retry$142075
$LN23@MountVolum:

; 5808 : 				}
; 5809 : 
; 5810 : 				// Ask user 
; 5811 : 				if (IDYES == AskWarnNoYes ("FILE_IN_USE"))

  0060b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CLFBJLHD@FILE_IN_USE?$AA@
  00610	e8 00 00 00 00	 call	 _AskWarnNoYes
  00615	83 c4 04	 add	 esp, 4
  00618	83 f8 06	 cmp	 eax, 6
  0061b	0f 85 af 00 00
	00		 jne	 $LN25@MountVolum

; 5812 : 				{
; 5813 : 					mount.bExclusiveAccess = FALSE;

  00621	89 9c 24 98 03
	00 00		 mov	 DWORD PTR _mount$[esp+10680], ebx

; 5814 : 					goto retry;

  00628	39 ac 24 04 01
	00 00		 cmp	 DWORD PTR _path$[esp+10076], ebp
  0062f	0f 82 db fa ff
	ff		 jb	 $retry$142075
  00635	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR _path$[esp+10056]
  0063c	51		 push	 ecx
  0063d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00642	83 c4 04	 add	 esp, 4
  00645	e9 c6 fa ff ff	 jmp	 $retry$142075
$LN29@MountVolum:

; 5825 : 	}
; 5826 : 
; 5827 : 	if (mount.nReturnCode != 0)

  0064a	8b 84 24 24 01
	00 00		 mov	 eax, DWORD PTR _mount$[esp+10052]
  00651	3b c3		 cmp	 eax, ebx
  00653	0f 84 4e 02 00
	00		 je	 $LN19@MountVolum

; 5828 : 	{
; 5829 : 		if (mount.nReturnCode == ERR_PASSWORD_WRONG)

  00659	83 f8 03	 cmp	 eax, 3
  0065c	0f 85 34 02 00
	00		 jne	 $LN18@MountVolum

; 5830 : 		{
; 5831 : 			// Do not report wrong password, if not instructed to 
; 5832 : 			if (bReportWrongPassword)

  00662	39 9c 24 68 27
	00 00		 cmp	 DWORD PTR _bReportWrongPassword$[esp+10048], ebx
  00669	0f 84 14 02 00
	00		 je	 $LN11@MountVolum

; 5833 : 			{
; 5834 : 				IncreaseWrongPwdRetryCount (1);		// We increase the count here only if bReportWrongPassword is TRUE, because "Auto-Mount All Devices" and other callers do it separately

  0066f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?WrongPwdRetryCounter@@3HA ; WrongPwdRetryCounter
  00674	03 c7		 add	 eax, edi

; 5835 : 
; 5836 : 				if (WrongPwdRetryCountOverLimit () 
; 5837 : 					&& !mount.UseBackupHeader)

  00676	83 f8 02	 cmp	 eax, 2
  00679	a3 00 00 00 00	 mov	 DWORD PTR ?WrongPwdRetryCounter@@3HA, eax ; WrongPwdRetryCounter
  0067e	0f 8e 99 00 00
	00		 jle	 $LN16@MountVolum
  00684	39 9c 24 fc 03
	00 00		 cmp	 DWORD PTR _mount$[esp+10780], ebx
  0068b	0f 85 8c 00 00
	00		 jne	 $LN16@MountVolum

; 5838 : 				{
; 5839 : 					// Retry using embedded header backup (if any)
; 5840 : 					mount.UseBackupHeader = TRUE;

  00691	89 bc 24 fc 03
	00 00		 mov	 DWORD PTR _mount$[esp+10780], edi

; 5841 : 					goto retry;

  00698	39 ac 24 04 01
	00 00		 cmp	 DWORD PTR _path$[esp+10076], ebp
  0069f	0f 82 6b fa ff
	ff		 jb	 $retry$142075
  006a5	8b 94 24 f0 00
	00 00		 mov	 edx, DWORD PTR _path$[esp+10056]
  006ac	52		 push	 edx
  006ad	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  006b2	83 c4 04	 add	 esp, 4
  006b5	e9 56 fa ff ff	 jmp	 $retry$142075
$LN410@MountVolum:

; 5796 : 			{
; 5797 : 				if (!quiet)

  006ba	39 9c 24 64 27
	00 00		 cmp	 DWORD PTR _quiet$[esp+10048], ebx
  006c1	75 0d		 jne	 SHORT $LN25@MountVolum

; 5798 : 					Error ("FILE_IN_USE_FAILED");

  006c3	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@NBNNICAF@FILE_IN_USE_FAILED?$AA@
  006c8	e8 00 00 00 00	 call	 _Error
  006cd	83 c4 04	 add	 esp, 4
$LN25@MountVolum:

; 5799 : 
; 5800 : 				return -1;

  006d0	8d 8c 24 ec 00
	00 00		 lea	 ecx, DWORD PTR _path$[esp+10052]
  006d7	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  006dc	83 c8 ff	 or	 eax, -1
  006df	e9 7d 04 00 00	 jmp	 $LN61@MountVolum
$LN28@MountVolum:

; 5815 : 				}
; 5816 : 			}
; 5817 : 
; 5818 : 			return -1;
; 5819 : 		}
; 5820 : 
; 5821 : 		if (!quiet && (!MultipleMountOperationInProgress || GetLastError() != ERROR_NOT_READY))

  006e4	39 9c 24 64 27
	00 00		 cmp	 DWORD PTR _quiet$[esp+10048], ebx
  006eb	75 1c		 jne	 SHORT $LN21@MountVolum
  006ed	39 1d 00 00 00
	00		 cmp	 DWORD PTR _MultipleMountOperationInProgress, ebx
  006f3	74 07		 je	 SHORT $LN20@MountVolum
  006f5	ff d6		 call	 esi
  006f7	83 f8 15	 cmp	 eax, 21			; 00000015H
  006fa	74 0d		 je	 SHORT $LN21@MountVolum
$LN20@MountVolum:

; 5822 : 			handleWin32Error (hwndDlg);

  006fc	8b 44 24 10	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[esp+10052]
  00700	50		 push	 eax
  00701	e8 00 00 00 00	 call	 _handleWin32Error
  00706	83 c4 04	 add	 esp, 4
$LN21@MountVolum:

; 5823 : 
; 5824 : 		return -1;

  00709	8d 8c 24 ec 00
	00 00		 lea	 ecx, DWORD PTR _path$[esp+10052]
  00710	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00715	83 c8 ff	 or	 eax, -1
  00718	e9 44 04 00 00	 jmp	 $LN61@MountVolum
$LN16@MountVolum:

; 5842 : 				}
; 5843 : 
; 5844 : 				if (bDevice && mount.bProtectHiddenVolume)

  0071d	39 5c 24 18	 cmp	 DWORD PTR _bDevice$[esp+10052], ebx
  00721	0f 84 4d 01 00
	00		 je	 $LN15@MountVolum
  00727	39 9c 24 b0 03
	00 00		 cmp	 DWORD PTR _mount$[esp+10704], ebx
  0072e	0f 84 40 01 00
	00		 je	 $LN15@MountVolum

; 5845 : 				{
; 5846 : 					int driveNo;
; 5847 : 
; 5848 : 					if (sscanf (volumePath, "\\Device\\Harddisk%d\\Partition", &driveNo) == 1)

  00734	8b 54 24 14	 mov	 edx, DWORD PTR _volumePath$GSCopy$[esp+10052]
  00738	8d 4c 24 34	 lea	 ecx, DWORD PTR _driveNo$142152[esp+10052]
  0073c	51		 push	 ecx
  0073d	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CEPHIDFC@?2Device?2Harddisk?$CFd?2Partition?$AA@
  00742	52		 push	 edx
  00743	e8 00 00 00 00	 call	 _sscanf
  00748	83 c4 0c	 add	 esp, 12			; 0000000cH
  0074b	3b c7		 cmp	 eax, edi
  0074d	0f 85 30 01 00
	00		 jne	 $LN11@MountVolum

; 5849 : 					{
; 5850 : 						OPEN_TEST_STRUCT openTestStruct;
; 5851 : 						memset (&openTestStruct, 0, sizeof (openTestStruct));

  00753	68 18 02 00 00	 push	 536			; 00000218H
  00758	8d 84 24 08 04
	00 00		 lea	 eax, DWORD PTR _openTestStruct$142155[esp+10056]
  0075f	53		 push	 ebx
  00760	50		 push	 eax
  00761	e8 00 00 00 00	 call	 _memset

; 5852 : 
; 5853 : 						openTestStruct.bDetectTCBootLoader = TRUE;
; 5854 : 						_snwprintf ((wchar_t *) openTestStruct.wszFileName, array_capacity (openTestStruct.wszFileName), L"\\Device\\Harddisk%d\\Partition0", driveNo);

  00766	8b 4c 24 40	 mov	 ecx, DWORD PTR _driveNo$142152[esp+10064]
  0076a	51		 push	 ecx
  0076b	68 00 00 00 00	 push	 OFFSET ??_C@_1DM@FMJIKGBL@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA0?$AA?$AA@
  00770	8d 94 24 18 04
	00 00		 lea	 edx, DWORD PTR _openTestStruct$142155[esp+10072]
  00777	68 04 01 00 00	 push	 260			; 00000104H
  0077c	52		 push	 edx
  0077d	89 bc 24 28 06
	00 00		 mov	 DWORD PTR _openTestStruct$142155[esp+10600], edi
  00784	e8 00 00 00 00	 call	 __snwprintf
  00789	83 c4 1c	 add	 esp, 28			; 0000001cH

; 5855 : 
; 5856 : 						DWORD dwResult;
; 5857 : 						if (DeviceIoControl (hDriver, TC_IOCTL_OPEN_TEST, &openTestStruct, sizeof (OPEN_TEST_STRUCT), &openTestStruct, sizeof (OPEN_TEST_STRUCT), &dwResult, NULL) && openTestStruct.TCBootLoaderDetected)

  0078c	53		 push	 ebx
  0078d	8d 44 24 44	 lea	 eax, DWORD PTR _dwResult$142158[esp+10056]
  00791	50		 push	 eax
  00792	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDriver
  00797	68 18 02 00 00	 push	 536			; 00000218H
  0079c	8d 8c 24 10 04
	00 00		 lea	 ecx, DWORD PTR _openTestStruct$142155[esp+10064]
  007a3	51		 push	 ecx
  007a4	68 18 02 00 00	 push	 536			; 00000218H
  007a9	8b d1		 mov	 edx, ecx
  007ab	52		 push	 edx
  007ac	68 34 20 22 00	 push	 2236468			; 00222034H
  007b1	50		 push	 eax
  007b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  007b8	85 c0		 test	 eax, eax
  007ba	0f 84 a5 00 00
	00		 je	 $LN13@MountVolum
  007c0	39 9c 24 10 06
	00 00		 cmp	 DWORD PTR _openTestStruct$142155[esp+10576], ebx
  007c7	0f 84 98 00 00
	00		 je	 $LN13@MountVolum

; 5858 : 							WarningDirect ((GetWrongPasswordErrorMessage (hwndDlg) + L"\n\n" + GetString ("HIDDEN_VOL_PROT_PASSWORD_US_KEYB_LAYOUT")).c_str());

  007cd	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EOBACLIE@HIDDEN_VOL_PROT_PASSWORD_US_KEYB@
  007d2	e8 00 00 00 00	 call	 _GetString
  007d7	8b 4c 24 14	 mov	 ecx, DWORD PTR _hwndDlg$GSCopy$[esp+10056]
  007db	83 c4 04	 add	 esp, 4
  007de	50		 push	 eax
  007df	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  007e4	51		 push	 ecx
  007e5	8d 94 24 c0 00
	00 00		 lea	 edx, DWORD PTR $T187269[esp+10064]
  007ec	52		 push	 edx
  007ed	e8 00 00 00 00	 call	 ?GetWrongPasswordErrorMessage@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@@Z ; GetWrongPasswordErrorMessage
  007f2	83 c4 08	 add	 esp, 8
  007f5	50		 push	 eax
  007f6	8d 84 24 dc 00
	00 00		 lea	 eax, DWORD PTR $T187270[esp+10064]
  007fd	50		 push	 eax
  007fe	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00803	83 c4 0c	 add	 esp, 12			; 0000000cH
  00806	50		 push	 eax
  00807	8d 8c 24 a0 00
	00 00		 lea	 ecx, DWORD PTR $T187271[esp+10060]
  0080e	51		 push	 ecx
  0080f	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00814	83 c4 0c	 add	 esp, 12			; 0000000cH
  00817	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  0081b	72 05		 jb	 SHORT $LN393@MountVolum
  0081d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00820	eb 03		 jmp	 SHORT $LN394@MountVolum
$LN393@MountVolum:
  00822	83 c0 04	 add	 eax, 4
$LN394@MountVolum:
  00825	50		 push	 eax
  00826	e8 00 00 00 00	 call	 _WarningDirect
  0082b	83 c4 04	 add	 esp, 4
  0082e	8d 8c 24 98 00
	00 00		 lea	 ecx, DWORD PTR $T187271[esp+10052]
  00835	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0083a	8d 8c 24 d0 00
	00 00		 lea	 ecx, DWORD PTR $T187270[esp+10052]
  00841	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00846	8d 8c 24 b4 00
	00 00		 lea	 ecx, DWORD PTR $T187269[esp+10052]
  0084d	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 5865 : 			}
; 5866 : 
; 5867 : 			return 0;

  00852	8d 8c 24 ec 00
	00 00		 lea	 ecx, DWORD PTR _path$[esp+10052]
  00859	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0085e	33 c0		 xor	 eax, eax
  00860	e9 fc 02 00 00	 jmp	 $LN61@MountVolum
$LN13@MountVolum:

; 5859 : 						else
; 5860 : 							handleError (hwndDlg, mount.nReturnCode);

  00865	8b 94 24 24 01
	00 00		 mov	 edx, DWORD PTR _mount$[esp+10052]
  0086c	8b 44 24 10	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[esp+10052]
  00870	52		 push	 edx
  00871	50		 push	 eax

; 5861 : 					}
; 5862 : 				}
; 5863 : 				else

  00872	eb 07		 jmp	 SHORT $LN440@MountVolum
$LN15@MountVolum:

; 5864 : 					handleError (hwndDlg, mount.nReturnCode);

  00874	8b 4c 24 10	 mov	 ecx, DWORD PTR _hwndDlg$GSCopy$[esp+10052]
  00878	6a 03		 push	 3
  0087a	51		 push	 ecx
$LN440@MountVolum:
  0087b	e8 00 00 00 00	 call	 _handleError
  00880	83 c4 08	 add	 esp, 8
$LN11@MountVolum:

; 5865 : 			}
; 5866 : 
; 5867 : 			return 0;

  00883	8d 8c 24 ec 00
	00 00		 lea	 ecx, DWORD PTR _path$[esp+10052]
  0088a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN441@MountVolum:
  0088f	33 c0		 xor	 eax, eax
  00891	e9 cb 02 00 00	 jmp	 $LN61@MountVolum
$LN18@MountVolum:

; 5868 : 		}
; 5869 : 
; 5870 : 		if (!quiet)

  00896	39 9c 24 64 27
	00 00		 cmp	 DWORD PTR _quiet$[esp+10048], ebx
  0089d	75 e4		 jne	 SHORT $LN11@MountVolum

; 5871 : 			handleError (hwndDlg, mount.nReturnCode);

  0089f	8b 54 24 10	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[esp+10052]
  008a3	50		 push	 eax
  008a4	52		 push	 edx

; 5872 : 
; 5873 : 		return 0;

  008a5	eb d4		 jmp	 SHORT $LN440@MountVolum
$LN19@MountVolum:

; 5874 : 	}
; 5875 : 
; 5876 : 	// Mount successful
; 5877 : 
; 5878 : 	if (mount.UseBackupHeader != mountOptions->UseBackupHeader
; 5879 : 		&& mount.UseBackupHeader)

  008a7	8b 84 24 fc 03
	00 00		 mov	 eax, DWORD PTR _mount$[esp+10780]
  008ae	8b 4c 24 1c	 mov	 ecx, DWORD PTR _mountOptions$GSCopy$[esp+10052]
  008b2	3b 41 5c	 cmp	 eax, DWORD PTR [ecx+92]
  008b5	74 22		 je	 SHORT $LN426@MountVolum
  008b7	3b c3		 cmp	 eax, ebx
  008b9	74 1e		 je	 SHORT $LN426@MountVolum

; 5880 : 	{
; 5881 : 		if (bReportWrongPassword && !Silent)

  008bb	39 9c 24 68 27
	00 00		 cmp	 DWORD PTR _bReportWrongPassword$[esp+10048], ebx
  008c2	74 15		 je	 SHORT $LN426@MountVolum
  008c4	39 1d 00 00 00
	00		 cmp	 DWORD PTR _Silent, ebx
  008ca	75 0d		 jne	 SHORT $LN426@MountVolum

; 5882 : 			Warning ("HEADER_DAMAGED_AUTO_USED_HEADER_BAK");

  008cc	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NGBHCJPO@HEADER_DAMAGED_AUTO_USED_HEADER_@
  008d1	e8 00 00 00 00	 call	 _Warning
  008d6	83 c4 04	 add	 esp, 4
$LN426@MountVolum:

; 5883 : 	}
; 5884 : 	
; 5885 : 	LastMountedVolumeDirty = mount.FilesystemDirty;

  008d9	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR _mount$[esp+10056]

; 5886 : 
; 5887 : 	if (mount.FilesystemDirty)
; 5888 : 	{
; 5889 : 		wchar_t msg[1024];
; 5890 : 		wchar_t mountPoint[] = { L'A' + (wchar_t) driveNo, L':', 0 };

  008e0	8b b4 24 4c 27
	00 00		 mov	 esi, DWORD PTR _driveNo$[esp+10048]
  008e7	a3 00 00 00 00	 mov	 DWORD PTR _LastMountedVolumeDirty, eax
  008ec	3b c3		 cmp	 eax, ebx
  008ee	74 69		 je	 SHORT $LN6@MountVolum
  008f0	8d 56 41	 lea	 edx, DWORD PTR [esi+65]
  008f3	66 89 94 24 34
	06 00 00	 mov	 WORD PTR _mountPoint$142177[esp+10052], dx

; 5891 : 		_snwprintf (msg, ARRAY_LENGTH(msg), GetString ("MOUNTED_VOLUME_DIRTY"), mountPoint);

  008fb	8d 94 24 34 06
	00 00		 lea	 edx, DWORD PTR _mountPoint$142177[esp+10052]
  00902	52		 push	 edx
  00903	b8 3a 00 00 00	 mov	 eax, 58			; 0000003aH
  00908	33 c9		 xor	 ecx, ecx
  0090a	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GHMEOCNL@MOUNTED_VOLUME_DIRTY?$AA@
  0090f	66 89 84 24 3e
	06 00 00	 mov	 WORD PTR _mountPoint$142177[esp+10062], ax
  00917	66 89 8c 24 40
	06 00 00	 mov	 WORD PTR _mountPoint$142177[esp+10064], cx
  0091f	e8 00 00 00 00	 call	 _GetString
  00924	83 c4 04	 add	 esp, 4
  00927	50		 push	 eax
  00928	8d 84 24 48 07
	00 00		 lea	 eax, DWORD PTR _msg$142176[esp+10060]
  0092f	68 00 04 00 00	 push	 1024			; 00000400H
  00934	50		 push	 eax
  00935	e8 00 00 00 00	 call	 __snwprintf

; 5892 : 
; 5893 : 		if (AskWarnYesNoStringTopmost (msg) == IDYES)

  0093a	8d 8c 24 50 07
	00 00		 lea	 ecx, DWORD PTR _msg$142176[esp+10068]
  00941	51		 push	 ecx
  00942	e8 00 00 00 00	 call	 _AskWarnYesNoStringTopmost
  00947	83 c4 14	 add	 esp, 20			; 00000014H
  0094a	83 f8 06	 cmp	 eax, 6
  0094d	75 0a		 jne	 SHORT $LN6@MountVolum

; 5894 : 			CheckFilesystem (driveNo, TRUE);

  0094f	57		 push	 edi
  00950	56		 push	 esi
  00951	e8 00 00 00 00	 call	 _CheckFilesystem
  00956	83 c4 08	 add	 esp, 8
$LN6@MountVolum:

; 5895 : 	}
; 5896 : 
; 5897 : 	if (mount.VolumeMountedReadOnlyAfterAccessDenied
; 5898 : 		&& !Silent
; 5899 : 		&& !bDevice
; 5900 : 		&& !FileHasReadOnlyAttribute (volumePath)
; 5901 : 		&& !IsFileOnReadOnlyFilesystem (volumePath))

  00959	8b 6c 24 14	 mov	 ebp, DWORD PTR _volumePath$GSCopy$[esp+10052]
  0095d	39 9c 24 2c 01
	00 00		 cmp	 DWORD PTR _mount$[esp+10060], ebx
  00964	0f 84 fb 00 00
	00		 je	 $LN4@MountVolum
  0096a	39 1d 00 00 00
	00		 cmp	 DWORD PTR _Silent, ebx
  00970	0f 85 7e 00 00
	00		 jne	 $LN5@MountVolum
  00976	39 5c 24 18	 cmp	 DWORD PTR _bDevice$[esp+10052], ebx
  0097a	0f 85 74 00 00
	00		 jne	 $LN5@MountVolum
  00980	55		 push	 ebp
  00981	e8 00 00 00 00	 call	 _FileHasReadOnlyAttribute
  00986	83 c4 04	 add	 esp, 4
  00989	85 c0		 test	 eax, eax
  0098b	75 67		 jne	 SHORT $LN5@MountVolum
  0098d	55		 push	 ebp
  0098e	e8 00 00 00 00	 call	 _IsFileOnReadOnlyFilesystem
  00993	83 c4 04	 add	 esp, 4
  00996	85 c0		 test	 eax, eax
  00998	75 5a		 jne	 SHORT $LN5@MountVolum

; 5902 : 	{
; 5903 : 		wchar_t msg[1024];
; 5904 : 		wchar_t mountPoint[] = { L'A' + (wchar_t) driveNo, L':', 0 };

  0099a	8d 56 41	 lea	 edx, DWORD PTR [esi+65]
  0099d	66 89 94 24 24
	06 00 00	 mov	 WORD PTR _mountPoint$142183[esp+10052], dx

; 5905 : 		_snwprintf (msg, ARRAY_LENGTH(msg), GetString ("MOUNTED_CONTAINER_FORCED_READ_ONLY"), mountPoint);

  009a5	8d 94 24 24 06
	00 00		 lea	 edx, DWORD PTR _mountPoint$142183[esp+10052]
  009ac	52		 push	 edx
  009ad	b8 3a 00 00 00	 mov	 eax, 58			; 0000003aH
  009b2	33 c9		 xor	 ecx, ecx
  009b4	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@HGDBCKJG@MOUNTED_CONTAINER_FORCED_READ_ON@
  009b9	66 89 84 24 2e
	06 00 00	 mov	 WORD PTR _mountPoint$142183[esp+10062], ax
  009c1	66 89 8c 24 30
	06 00 00	 mov	 WORD PTR _mountPoint$142183[esp+10064], cx
  009c9	e8 00 00 00 00	 call	 _GetString
  009ce	83 c4 04	 add	 esp, 4
  009d1	50		 push	 eax
  009d2	8d 84 24 48 17
	00 00		 lea	 eax, DWORD PTR _msg$142182[esp+10060]
  009d9	68 00 04 00 00	 push	 1024			; 00000400H
  009de	50		 push	 eax
  009df	e8 00 00 00 00	 call	 __snwprintf

; 5906 : 
; 5907 : 		WarningDirect (msg);

  009e4	8d 8c 24 50 17
	00 00		 lea	 ecx, DWORD PTR _msg$142182[esp+10068]
  009eb	51		 push	 ecx
  009ec	e8 00 00 00 00	 call	 _WarningDirect
  009f1	83 c4 14	 add	 esp, 20			; 00000014H
$LN5@MountVolum:

; 5908 : 	}
; 5909 : 
; 5910 : 	if (mount.VolumeMountedReadOnlyAfterAccessDenied
; 5911 : 		&& !Silent
; 5912 : 		&& bDevice)

  009f4	39 9c 24 2c 01
	00 00		 cmp	 DWORD PTR _mount$[esp+10060], ebx
  009fb	74 68		 je	 SHORT $LN4@MountVolum
  009fd	39 1d 00 00 00
	00		 cmp	 DWORD PTR _Silent, ebx
  00a03	75 60		 jne	 SHORT $LN4@MountVolum
  00a05	39 5c 24 18	 cmp	 DWORD PTR _bDevice$[esp+10052], ebx
  00a09	74 5a		 je	 SHORT $LN4@MountVolum

; 5913 : 	{
; 5914 : 		wchar_t msg[1024];
; 5915 : 		wchar_t mountPoint[] = { L'A' + (wchar_t) driveNo, L':', 0 };

  00a0b	8d 56 41	 lea	 edx, DWORD PTR [esi+65]
  00a0e	66 89 94 24 1c
	06 00 00	 mov	 WORD PTR _mountPoint$142188[esp+10052], dx

; 5916 : 		_snwprintf (msg, ARRAY_LENGTH(msg), GetString ("MOUNTED_DEVICE_FORCED_READ_ONLY"), mountPoint);

  00a16	8d 94 24 1c 06
	00 00		 lea	 edx, DWORD PTR _mountPoint$142188[esp+10052]
  00a1d	52		 push	 edx
  00a1e	b8 3a 00 00 00	 mov	 eax, 58			; 0000003aH
  00a23	33 c9		 xor	 ecx, ecx
  00a25	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HAHCAFMF@MOUNTED_DEVICE_FORCED_READ_ONLY?$AA@
  00a2a	66 89 84 24 26
	06 00 00	 mov	 WORD PTR _mountPoint$142188[esp+10062], ax
  00a32	66 89 8c 24 28
	06 00 00	 mov	 WORD PTR _mountPoint$142188[esp+10064], cx
  00a3a	e8 00 00 00 00	 call	 _GetString
  00a3f	83 c4 04	 add	 esp, 4
  00a42	50		 push	 eax
  00a43	8d 84 24 48 0f
	00 00		 lea	 eax, DWORD PTR _msg$142187[esp+10060]
  00a4a	68 00 04 00 00	 push	 1024			; 00000400H
  00a4f	50		 push	 eax
  00a50	e8 00 00 00 00	 call	 __snwprintf

; 5917 : 
; 5918 : 		WarningDirect (msg);

  00a55	8d 8c 24 50 0f
	00 00		 lea	 ecx, DWORD PTR _msg$142187[esp+10068]
  00a5c	51		 push	 ecx
  00a5d	e8 00 00 00 00	 call	 _WarningDirect
  00a62	83 c4 14	 add	 esp, 20			; 00000014H
$LN4@MountVolum:

; 5919 : 	}
; 5920 : 
; 5921 : 	if (mount.VolumeMountedReadOnlyAfterDeviceWriteProtected
; 5922 : 		&& !Silent
; 5923 : 		&& strstr (volumePath, "\\Device\\Harddisk") == volumePath)

  00a65	39 9c 24 30 01
	00 00		 cmp	 DWORD PTR _mount$[esp+10064], ebx
  00a6c	0f 84 b7 00 00
	00		 je	 $LN2@MountVolum
  00a72	39 1d 00 00 00
	00		 cmp	 DWORD PTR _Silent, ebx
  00a78	0f 85 ab 00 00
	00		 jne	 $LN2@MountVolum
  00a7e	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EPPOJBJL@?2Device?2Harddisk?$AA@
  00a83	55		 push	 ebp
  00a84	e8 00 00 00 00	 call	 _strstr
  00a89	83 c4 08	 add	 esp, 8
  00a8c	3b c5		 cmp	 eax, ebp
  00a8e	0f 85 95 00 00
	00		 jne	 $LN2@MountVolum

; 5924 : 	{
; 5925 : 		wchar_t msg[1024];
; 5926 : 		wchar_t mountPoint[] = { L'A' + (wchar_t) driveNo, L':', 0 };

  00a94	8d 56 41	 lea	 edx, DWORD PTR [esi+65]
  00a97	66 89 94 24 2c
	06 00 00	 mov	 WORD PTR _mountPoint$142194[esp+10052], dx

; 5927 : 		_snwprintf (msg, ARRAY_LENGTH(msg), GetString ("MOUNTED_DEVICE_FORCED_READ_ONLY_WRITE_PROTECTION"), mountPoint);

  00a9f	8d 94 24 2c 06
	00 00		 lea	 edx, DWORD PTR _mountPoint$142194[esp+10052]
  00aa6	52		 push	 edx
  00aa7	b8 3a 00 00 00	 mov	 eax, 58			; 0000003aH
  00aac	33 c9		 xor	 ecx, ecx
  00aae	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@LCJCCDBH@MOUNTED_DEVICE_FORCED_READ_ONLY_@
  00ab3	66 89 84 24 36
	06 00 00	 mov	 WORD PTR _mountPoint$142194[esp+10062], ax
  00abb	66 89 8c 24 38
	06 00 00	 mov	 WORD PTR _mountPoint$142194[esp+10064], cx
  00ac3	e8 00 00 00 00	 call	 _GetString
  00ac8	83 c4 04	 add	 esp, 4
  00acb	50		 push	 eax
  00acc	8d 84 24 48 1f
	00 00		 lea	 eax, DWORD PTR _msg$142193[esp+10060]
  00ad3	68 00 04 00 00	 push	 1024			; 00000400H
  00ad8	50		 push	 eax
  00ad9	e8 00 00 00 00	 call	 __snwprintf

; 5928 : 
; 5929 : 		WarningDirect (msg);

  00ade	8d 8c 24 50 1f
	00 00		 lea	 ecx, DWORD PTR _msg$142193[esp+10068]
  00ae5	51		 push	 ecx
  00ae6	e8 00 00 00 00	 call	 _WarningDirect
  00aeb	83 c4 14	 add	 esp, 20			; 00000014H

; 5930 : 
; 5931 : 		if (CurrentOSMajor >= 6
; 5932 : 			&& strstr (volumePath, "\\Device\\HarddiskVolume") != volumePath
; 5933 : 			&& AskNoYes ("ASK_REMOVE_DEVICE_WRITE_PROTECTION") == IDYES)

  00aee	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR _CurrentOSMajor, 6
  00af5	7c 32		 jl	 SHORT $LN2@MountVolum
  00af7	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GHLJCPDI@?2Device?2HarddiskVolume?$AA@
  00afc	55		 push	 ebp
  00afd	e8 00 00 00 00	 call	 _strstr
  00b02	83 c4 08	 add	 esp, 8
  00b05	3b c5		 cmp	 eax, ebp
  00b07	74 20		 je	 SHORT $LN2@MountVolum
  00b09	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@MHPFPHDI@ASK_REMOVE_DEVICE_WRITE_PROTECTI@
  00b0e	e8 00 00 00 00	 call	 _AskNoYes
  00b13	83 c4 04	 add	 esp, 4
  00b16	83 f8 06	 cmp	 eax, 6
  00b19	75 0e		 jne	 SHORT $LN2@MountVolum

; 5934 : 		{
; 5935 : 			RemoveDeviceWriteProtection (hwndDlg, volumePath);

  00b1b	8b 54 24 10	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[esp+10052]
  00b1f	55		 push	 ebp
  00b20	52		 push	 edx
  00b21	e8 00 00 00 00	 call	 _RemoveDeviceWriteProtection
  00b26	83 c4 08	 add	 esp, 8
$LN2@MountVolum:

; 5936 : 		}
; 5937 : 	}
; 5938 : 
; 5939 : 	ResetWrongPwdRetryCount ();
; 5940 : 
; 5941 : 	BroadcastDeviceChange (DBT_DEVICEARRIVAL, driveNo, 0);

  00b29	53		 push	 ebx
  00b2a	56		 push	 esi
  00b2b	68 00 80 00 00	 push	 32768			; 00008000H
  00b30	89 1d 00 00 00
	00		 mov	 DWORD PTR ?WrongPwdRetryCounter@@3HA, ebx ; WrongPwdRetryCounter
  00b36	e8 00 00 00 00	 call	 _BroadcastDeviceChange
  00b3b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5942 : 
; 5943 : 	if (mount.bExclusiveAccess == FALSE)
; 5944 : 		return 2;

  00b3e	8d 8c 24 ec 00
	00 00		 lea	 ecx, DWORD PTR _path$[esp+10052]
  00b45	39 9c 24 98 03
	00 00		 cmp	 DWORD PTR _mount$[esp+10680], ebx
  00b4c	75 0c		 jne	 SHORT $LN1@MountVolum
  00b4e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00b53	b8 02 00 00 00	 mov	 eax, 2
  00b58	eb 07		 jmp	 SHORT $LN61@MountVolum
$LN1@MountVolum:

; 5945 : 
; 5946 : 	return 1;

  00b5a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00b5f	8b c7		 mov	 eax, edi
$LN61@MountVolum:

; 5947 : }

  00b61	8b 8c 24 40 27
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+10052]
  00b68	5f		 pop	 edi
  00b69	5e		 pop	 esi
  00b6a	5d		 pop	 ebp
  00b6b	5b		 pop	 ebx
  00b6c	33 cc		 xor	 ecx, esp
  00b6e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b73	81 c4 34 27 00
	00		 add	 esp, 10036		; 00002734H
  00b79	c3		 ret	 0
_MountVolume ENDP
_TEXT	ENDS
PUBLIC	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::setstate, COMDAT
; _this$ = ecx

; 54   : 		if (_State != goodbit)

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __State$[esp-4]
  00004	85 d2		 test	 edx, edx
  00006	74 17		 je	 SHORT $LN6@setstate

; 55   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00008	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000b	0b c2		 or	 eax, edx
  0000d	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00011	75 03		 jne	 SHORT $LN8@setstate
  00013	83 c8 04	 or	 eax, 4
$LN8@setstate:
  00016	89 44 24 04	 mov	 DWORD PTR __State$[esp-4], eax
  0001a	e9 00 00 00 00	 jmp	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN6@setstate:

; 56   : 		}

  0001f	c2 08 00	 ret	 8
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::setstate
_TEXT	ENDS
PUBLIC	?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
; Function compile flags: /Ogtpy
;	COMDAT ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate, COMDAT
; _this$ = ecx

; 54   : 		if (_State != goodbit)

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __State$[esp-4]
  00004	85 d2		 test	 edx, edx
  00006	74 17		 je	 SHORT $LN6@setstate@2

; 55   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00008	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000b	0b c2		 or	 eax, edx
  0000d	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00011	75 03		 jne	 SHORT $LN8@setstate@2
  00013	83 c8 04	 or	 eax, 4
$LN8@setstate@2:
  00016	89 44 24 04	 mov	 DWORD PTR __State$[esp-4], eax
  0001a	e9 00 00 00 00	 jmp	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN6@setstate@2:

; 56   : 		}

  0001f	c2 08 00	 ret	 8
?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
_TEXT	ENDS
PUBLIC	??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	6a 04		 push	 4
  00026	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002b	33 c9		 xor	 ecx, ecx
  0002d	83 c4 04	 add	 esp, 4
  00030	3b c1		 cmp	 eax, ecx
  00032	74 04		 je	 SHORT $LN13@vector
  00034	89 30		 mov	 DWORD PTR [eax], esi
  00036	eb 02		 jmp	 SHORT $LN14@vector
$LN13@vector:
  00038	33 c0		 xor	 eax, eax
$LN14@vector:
  0003a	89 06		 mov	 DWORD PTR [esi], eax

; 471  : 		_Buy(0);

  0003c	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  0003f	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00042	89 4e 14	 mov	 DWORD PTR [esi+20], ecx

; 472  : 		}

  00045	8b c6		 mov	 eax, esi
  00047	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
PUBLIC	?push_back@?$list@KV?$allocator@K@std@@@std@@QAEXABK@Z ; std::list<unsigned long,std::allocator<unsigned long> >::push_back
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?push_back@?$list@KV?$allocator@K@std@@@std@@QAEXABK@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$list@KV?$allocator@K@std@@@std@@QAEXABK@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::push_back, COMDAT
; _this$ = ecx

; 670  : 		_Insert(end(), _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0000c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0000f	50		 push	 eax
  00010	51		 push	 ecx
  00011	57		 push	 edi
  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@0ABK@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode
  00019	6a 01		 push	 1
  0001b	8b ce		 mov	 ecx, esi
  0001d	8b d8		 mov	 ebx, eax
  0001f	e8 00 00 00 00	 call	 ?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Incsize
  00024	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00027	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	89 1a		 mov	 DWORD PTR [edx], ebx
  0002e	5b		 pop	 ebx

; 671  : 		}

  0002f	c2 04 00	 ret	 4
?push_back@?$list@KV?$allocator@K@std@@@std@@QAEXABK@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::push_back
_TEXT	ENDS
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 1166 : 		{	// free entire subtree, recursively

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 1167 : 		for (_Nodeptr _Pnode = _Rootnode; !_Isnil(_Pnode); _Rootnode = _Pnode)

  00003	8b 7c 24 10	 mov	 edi, DWORD PTR __Rootnode$[esp+8]
  00007	80 bf a1 00 00
	00 00		 cmp	 BYTE PTR [edi+161], 0
  0000e	8b d9		 mov	 ebx, ecx
  00010	8b f7		 mov	 esi, edi
  00012	75 29		 jne	 SHORT $LN1@Erase
$LL3@Erase:

; 1168 : 			{	// free subtrees, then node
; 1169 : 			_Erase(_Right(_Pnode));

  00014	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00017	50		 push	 eax
  00018	8b cb		 mov	 ecx, ebx
  0001a	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Erase

; 1170 : 			_Pnode = _Left(_Pnode);

  0001f	8b 36		 mov	 esi, DWORD PTR [esi]

; 1171 : 			this->_Alnod.destroy(_Rootnode);	// destroy, free erased node

  00021	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  00024	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice

; 1172 : 			this->_Alnod.deallocate(_Rootnode, 1);

  00029	57		 push	 edi
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002f	83 c4 04	 add	 esp, 4
  00032	80 be a1 00 00
	00 00		 cmp	 BYTE PTR [esi+161], 0
  00039	8b fe		 mov	 edi, esi
  0003b	74 d7		 je	 SHORT $LL3@Erase
$LN1@Erase:
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx

; 1173 : 			}
; 1174 : 		}

  00040	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Erase
_TEXT	ENDS
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$3
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -92				; size = 4
$T188994 = -88						; size = 8
$T188989 = -88						; size = 4
$T188991 = -80						; size = 28
$T188990 = -80						; size = 28
$T188995 = -52						; size = 8
__Str$145515 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 1
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1123 : 		{	// put formatted bool to _Dest

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 50	 sub	 esp, 80			; 00000050H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 4c	 mov	 DWORD PTR __$ArrayPad$[esp+92], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 44 24 64	 lea	 eax, DWORD PTR __$EHRec$[esp+112]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b ac 24 80 00
	00 00		 mov	 ebp, DWORD PTR __Iosbase$[esp+108]

; 1124 : 		_DEBUG_POINTER(_Dest);
; 1125 : 		if (!(_Iosbase.flags() & ios_base::boolalpha))

  00039	f7 45 10 00 40
	00 00		 test	 DWORD PTR [ebp+16], 16384 ; 00004000H
  00040	8b 74 24 74	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+108]
  00044	8b f9		 mov	 edi, ecx

; 1144 : 				}
; 1145 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  00046	89 74 24 14	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+112], esi
  0004a	75 31		 jne	 SHORT $LN5@do_put
  0004c	0f b6 8c 24 88
	00 00 00	 movzx	 ecx, BYTE PTR __Val$[esp+108]
  00054	8b 94 24 84 00
	00 00		 mov	 edx, DWORD PTR __Fill$[esp+108]
  0005b	8b 07		 mov	 eax, DWORD PTR [edi]
  0005d	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00060	51		 push	 ecx
  00061	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+116]
  00068	52		 push	 edx
  00069	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+116]
  00070	55		 push	 ebp
  00071	51		 push	 ecx
  00072	52		 push	 edx
  00073	56		 push	 esi
  00074	8b cf		 mov	 ecx, edi
  00076	ff d0		 call	 eax
  00078	e9 75 01 00 00	 jmp	 $LN142@do_put
$LN5@do_put:

; 1126 : 			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
; 1127 : 		else
; 1128 : 			{	// put "false" or "true"
; 1129 : 			const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  0007d	8d 4c 24 18	 lea	 ecx, DWORD PTR $T188989[esp+112]
  00081	51		 push	 ecx
  00082	8b cd		 mov	 ecx, ebp
  00084	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00089	33 db		 xor	 ebx, ebx
  0008b	50		 push	 eax
  0008c	89 5c 24 70	 mov	 DWORD PTR __$EHRec$[esp+124], ebx
  00090	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  00095	83 c4 04	 add	 esp, 4
  00098	8d 4c 24 18	 lea	 ecx, DWORD PTR $T188989[esp+112]
  0009c	8b f0		 mov	 esi, eax
  0009e	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 1130 : 			_Mystr _Str;

  000a3	c7 44 24 5c 0f
	00 00 00	 mov	 DWORD PTR __Str$145515[esp+136], 15 ; 0000000fH
  000ab	89 5c 24 58	 mov	 DWORD PTR __Str$145515[esp+132], ebx
  000af	88 5c 24 48	 mov	 BYTE PTR __Str$145515[esp+116], bl

; 1131 : 			if (_Val)

  000b3	80 bc 24 88 00
	00 00 00	 cmp	 BYTE PTR __Val$[esp+108], 0
  000bb	bb 01 00 00 00	 mov	 ebx, 1
  000c0	89 5c 24 6c	 mov	 DWORD PTR __$EHRec$[esp+120], ebx
  000c4	74 31		 je	 SHORT $LN3@do_put

; 1132 : 				_Str.assign(_Punct_fac.truename());

  000c6	8d 54 24 20	 lea	 edx, DWORD PTR $T188990[esp+112]
  000ca	52		 push	 edx
  000cb	8b ce		 mov	 ecx, esi
  000cd	e8 00 00 00 00	 call	 ?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
  000d2	6a ff		 push	 -1
  000d4	6a 00		 push	 0
  000d6	50		 push	 eax
  000d7	8d 4c 24 50	 lea	 ecx, DWORD PTR __Str$145515[esp+124]
  000db	c6 44 24 78 02	 mov	 BYTE PTR __$EHRec$[esp+132], 2
  000e0	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000e5	83 7c 24 38 10	 cmp	 DWORD PTR $T188990[esp+136], 16 ; 00000010H
  000ea	88 5c 24 6c	 mov	 BYTE PTR __$EHRec$[esp+120], bl
  000ee	72 3e		 jb	 SHORT $LN94@do_put
  000f0	8b 44 24 24	 mov	 eax, DWORD PTR $T188990[esp+116]
  000f4	50		 push	 eax

; 1133 : 			else

  000f5	eb 2f		 jmp	 SHORT $LN155@do_put
$LN3@do_put:

; 1134 : 				_Str.assign(_Punct_fac.falsename());

  000f7	8d 4c 24 20	 lea	 ecx, DWORD PTR $T188991[esp+112]
  000fb	51		 push	 ecx
  000fc	8b ce		 mov	 ecx, esi
  000fe	e8 00 00 00 00	 call	 ?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
  00103	6a ff		 push	 -1
  00105	6a 00		 push	 0
  00107	50		 push	 eax
  00108	8d 4c 24 50	 lea	 ecx, DWORD PTR __Str$145515[esp+124]
  0010c	c6 44 24 78 03	 mov	 BYTE PTR __$EHRec$[esp+132], 3
  00111	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00116	83 7c 24 38 10	 cmp	 DWORD PTR $T188991[esp+136], 16 ; 00000010H
  0011b	88 5c 24 6c	 mov	 BYTE PTR __$EHRec$[esp+120], bl
  0011f	72 0d		 jb	 SHORT $LN94@do_put
  00121	8b 54 24 24	 mov	 edx, DWORD PTR $T188991[esp+116]
  00125	52		 push	 edx
$LN155@do_put:
  00126	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0012b	83 c4 04	 add	 esp, 4
$LN94@do_put:

; 1135 : 
; 1136 : 			size_t _Fillcount = _Iosbase.width() <= 0
; 1137 : 				|| (size_t)_Iosbase.width() <= _Str.size()
; 1138 : 					? 0 : (size_t)_Iosbase.width() - _Str.size();

  0012e	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00131	8b 4c 24 58	 mov	 ecx, DWORD PTR __Str$145515[esp+132]
  00135	85 c0		 test	 eax, eax
  00137	7e 0a		 jle	 SHORT $LN8@do_put
  00139	3b c1		 cmp	 eax, ecx
  0013b	76 06		 jbe	 SHORT $LN8@do_put
  0013d	2b c1		 sub	 eax, ecx
  0013f	8b f0		 mov	 esi, eax
  00141	eb 02		 jmp	 SHORT $LN9@do_put
$LN8@do_put:
  00143	33 f6		 xor	 esi, esi
$LN9@do_put:

; 1139 : 
; 1140 : 			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)

  00145	8b 45 10	 mov	 eax, DWORD PTR [ebp+16]
  00148	8b 9c 24 84 00
	00 00		 mov	 ebx, DWORD PTR __Fill$[esp+108]
  0014f	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00154	83 f8 40	 cmp	 eax, 64			; 00000040H
  00157	74 30		 je	 SHORT $LN1@do_put

; 1141 : 				{	// put leading fill
; 1142 : 				_Dest = _Rep(_Dest, _Fill, _Fillcount);

  00159	8b 4c 24 7c	 mov	 ecx, DWORD PTR __Dest$[esp+112]
  0015d	8b 54 24 78	 mov	 edx, DWORD PTR __Dest$[esp+108]
  00161	56		 push	 esi
  00162	53		 push	 ebx
  00163	51		 push	 ecx
  00164	52		 push	 edx
  00165	8d 44 24 28	 lea	 eax, DWORD PTR $T188994[esp+128]
  00169	50		 push	 eax
  0016a	57		 push	 edi
  0016b	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00170	8b 08		 mov	 ecx, DWORD PTR [eax]
  00172	89 8c 24 90 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], ecx
  00179	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1143 : 				_Fillcount = 0;

  0017c	8b 4c 24 70	 mov	 ecx, DWORD PTR __Str$145515[esp+156]
  00180	83 c4 18	 add	 esp, 24			; 00000018H
  00183	89 54 24 7c	 mov	 DWORD PTR __Dest$[esp+112], edx
  00187	33 f6		 xor	 esi, esi
$LN1@do_put:

; 1144 : 				}
; 1145 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  00189	83 7c 24 5c 10	 cmp	 DWORD PTR __Str$145515[esp+136], 16 ; 00000010H
  0018e	8b 44 24 48	 mov	 eax, DWORD PTR __Str$145515[esp+116]
  00192	73 04		 jae	 SHORT $LN123@do_put
  00194	8d 44 24 48	 lea	 eax, DWORD PTR __Str$145515[esp+116]
$LN123@do_put:
  00198	51		 push	 ecx
  00199	8b 4c 24 7c	 mov	 ecx, DWORD PTR __Dest$[esp+112]
  0019d	50		 push	 eax
  0019e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+120]
  001a5	50		 push	 eax
  001a6	51		 push	 ecx
  001a7	8d 54 24 4c	 lea	 edx, DWORD PTR $T188995[esp+128]
  001ab	52		 push	 edx
  001ac	57		 push	 edi
  001ad	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  001b2	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1146 : 			_Iosbase.width(0);
; 1147 : 			return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  001b4	56		 push	 esi
  001b5	8b 74 24 30	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+140]
  001b9	53		 push	 ebx
  001ba	89 8c 24 98 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], ecx
  001c1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001c4	50		 push	 eax
  001c5	51		 push	 ecx
  001c6	56		 push	 esi
  001c7	57		 push	 edi
  001c8	89 84 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], eax
  001cf	c7 45 18 00 00
	00 00		 mov	 DWORD PTR [ebp+24], 0
  001d6	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  001db	83 c4 30	 add	 esp, 48			; 00000030H
  001de	83 7c 24 5c 10	 cmp	 DWORD PTR __Str$145515[esp+136], 16 ; 00000010H
  001e3	72 0d		 jb	 SHORT $LN142@do_put
  001e5	8b 44 24 48	 mov	 eax, DWORD PTR __Str$145515[esp+116]
  001e9	50		 push	 eax
  001ea	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001ef	83 c4 04	 add	 esp, 4
$LN142@do_put:
  001f2	8b c6		 mov	 eax, esi

; 1148 : 			}
; 1149 : 		}

  001f4	8b 4c 24 64	 mov	 ecx, DWORD PTR __$EHRec$[esp+112]
  001f8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ff	59		 pop	 ecx
  00200	5f		 pop	 edi
  00201	5e		 pop	 esi
  00202	5d		 pop	 ebp
  00203	5b		 pop	 ebx
  00204	8b 4c 24 4c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+92]
  00208	33 cc		 xor	 ecx, esp
  0020a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020f	83 c4 5c	 add	 esp, 92			; 0000005cH
  00212	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR $T188989[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Str$145515[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$2:
  00010	8d 4d b0	 lea	 ecx, DWORD PTR $T188990[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$3:
  00018	8d 4d b0	 lea	 ecx, DWORD PTR $T188991[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  00027	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	83 c0 10	 add	 eax, 16			; 00000010H
  00034	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00037	33 c8		 xor	 ecx, eax
  00039	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
  00043	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	??_C@_01KGKMHCOC@e?$AA@				; `string'
PUBLIC	??_C@_01DDCIFGEA@E?$AA@				; `string'
PUBLIC	__Iosbase$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
EXTRN	_strcspn:PROC
;	COMDAT ??_C@_01KGKMHCOC@e?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_01KGKMHCOC@e?$AA@ DB 'e', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DDCIFGEA@E?$AA@
CONST	SEGMENT
??_C@_01DDCIFGEA@E?$AA@ DB 'E', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$2
__ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
_TEXT	SEGMENT
__Enders$ = -112					; size = 3
__Fillcount$ = -108					; size = 4
__Kseparator$ = -104					; size = 1
__Lock$189578 = -104					; size = 4
$T189544 = -100						; size = 8
$T189543 = -100						; size = 8
$T189542 = -100						; size = 8
$T189541 = -100						; size = 8
$T189540 = -100						; size = 8
$T189539 = -100						; size = 8
__Prefix$ = -100					; size = 4
$T189819 = -92						; size = 1
$T189552 = -92						; size = 8
$T189551 = -92						; size = 8
$T189550 = -92						; size = 8
$T189547 = -92						; size = 8
$T189546 = -92						; size = 8
$T189545 = -92						; size = 8
__Punct_fac$ = -92					; size = 4
__Iosbase$GSCopy$ = -84					; size = 4
___$ReturnUdt$GSCopy$ = -80				; size = 4
$T189534 = -76						; size = 4
__Groupstring$ = -72					; size = 28
__Grouping$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Beforepoint$ = 36					; size = 4
__Afterpoint$ = 40					; size = 4
__Trailing$ = 44					; size = 4
__Count$ = 48						; size = 4
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput, COMDAT

; 1313 : 		{	// put formatted floating-point to _Dest

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 64	 sub	 esp, 100		; 00000064H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 60	 mov	 DWORD PTR __$ArrayPad$[esp+112], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 44 24 78	 lea	 eax, DWORD PTR __$EHRec$[esp+132]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1426 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00032	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+128]
  00039	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR __Iosbase$[esp+128]
  00040	8b bc 24 a0 00
	00 00		 mov	 edi, DWORD PTR __Buf$[esp+128]
  00047	8d 54 24 38	 lea	 edx, DWORD PTR $T189534[esp+132]
  0004b	52		 push	 edx
  0004c	89 44 24 38	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+136], eax
  00050	89 4c 24 34	 mov	 DWORD PTR __Iosbase$GSCopy$[esp+136], ecx
  00054	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00059	50		 push	 eax
  0005a	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+144], 0
  00065	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  0006a	8b 6c 24 3c	 mov	 ebp, DWORD PTR $T189534[esp+136]
  0006e	83 c4 04	 add	 esp, 4
  00071	8b d8		 mov	 ebx, eax
  00073	89 5c 24 28	 mov	 DWORD PTR __Punct_fac$[esp+132], ebx
  00077	c7 84 24 80 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+140], -1
  00082	85 ed		 test	 ebp, ebp
  00084	74 3d		 je	 SHORT $LN31@Fput
  00086	6a 00		 push	 0
  00088	8d 4c 24 20	 lea	 ecx, DWORD PTR __Lock$189578[esp+136]
  0008c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00091	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00094	85 c0		 test	 eax, eax
  00096	76 09		 jbe	 SHORT $LN33@Fput

; 1314 : 		_DEBUG_POINTER(_Dest);
; 1315 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  00098	83 f8 ff	 cmp	 eax, -1
  0009b	73 04		 jae	 SHORT $LN33@Fput
  0009d	48		 dec	 eax
  0009e	89 45 04	 mov	 DWORD PTR [ebp+4], eax
$LN33@Fput:
  000a1	8b 75 04	 mov	 esi, DWORD PTR [ebp+4]
  000a4	f7 de		 neg	 esi
  000a6	1b f6		 sbb	 esi, esi
  000a8	f7 d6		 not	 esi
  000aa	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$189578[esp+132]
  000ae	23 f5		 and	 esi, ebp
  000b0	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000b5	85 f6		 test	 esi, esi
  000b7	74 0a		 je	 SHORT $LN31@Fput
  000b9	8b 06		 mov	 eax, DWORD PTR [esi]
  000bb	8b 10		 mov	 edx, DWORD PTR [eax]
  000bd	6a 01		 push	 1
  000bf	8b ce		 mov	 ecx, esi
  000c1	ff d2		 call	 edx
$LN31@Fput:

; 1316 : 		const string _Grouping = _Punct_fac.grouping();

  000c3	8d 44 24 58	 lea	 eax, DWORD PTR __Grouping$[esp+132]
  000c7	50		 push	 eax
  000c8	8b cb		 mov	 ecx, ebx
  000ca	e8 00 00 00 00	 call	 ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping

; 1317 : 		const _Elem _Kseparator = _Punct_fac.thousands_sep();

  000cf	8b 13		 mov	 edx, DWORD PTR [ebx]
  000d1	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000d4	be 01 00 00 00	 mov	 esi, 1
  000d9	8b cb		 mov	 ecx, ebx
  000db	89 b4 24 80 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+140], esi
  000e2	ff d0		 call	 eax

; 1318 : 		string _Groupstring;

  000e4	33 c9		 xor	 ecx, ecx
  000e6	88 44 24 1c	 mov	 BYTE PTR __Kseparator$[esp+132], al
  000ea	c7 44 24 54 0f
	00 00 00	 mov	 DWORD PTR __Groupstring$[esp+156], 15 ; 0000000fH
  000f2	89 4c 24 50	 mov	 DWORD PTR __Groupstring$[esp+152], ecx
  000f6	88 4c 24 40	 mov	 BYTE PTR __Groupstring$[esp+136], cl

; 1319 : 		const _Elem _E0 = _MAKLOCCHR(_Elem, '0', _Cvt);
; 1320 : 		size_t _Prefix = _Buf[0] == '+' || _Buf[0] == '-' ? 1 : 0;

  000fa	8a 07		 mov	 al, BYTE PTR [edi]
  000fc	c6 84 24 80 00
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+140], 2
  00104	3c 2b		 cmp	 al, 43			; 0000002bH
  00106	74 08		 je	 SHORT $LN19@Fput
  00108	89 4c 24 20	 mov	 DWORD PTR __Prefix$[esp+132], ecx
  0010c	3c 2d		 cmp	 al, 45			; 0000002dH
  0010e	75 04		 jne	 SHORT $LN20@Fput
$LN19@Fput:
  00110	89 74 24 20	 mov	 DWORD PTR __Prefix$[esp+132], esi
$LN20@Fput:

; 1321 : 
; 1322 : 		char _Enders[3];
; 1323 : 		_Enders[0] = ::localeconv()->decimal_point[0];

  00114	e8 00 00 00 00	 call	 _localeconv
  00119	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1324 : 		_Enders[1] = 'e';
; 1325 : 		_Enders[2] = '\0';
; 1326 : 
; 1327 : 		const char *_Eptr = (const char *)::memchr(_Buf,
; 1328 : 			'e', _Count);	// find exponent

  0011b	8b 9c 24 b0 00
	00 00		 mov	 ebx, DWORD PTR __Count$[esp+128]
  00122	8a 11		 mov	 dl, BYTE PTR [ecx]
  00124	53		 push	 ebx
  00125	6a 65		 push	 101			; 00000065H
  00127	57		 push	 edi
  00128	88 54 24 20	 mov	 BYTE PTR __Enders$[esp+144], dl
  0012c	c6 44 24 21 65	 mov	 BYTE PTR __Enders$[esp+145], 101 ; 00000065H
  00131	c6 44 24 22 00	 mov	 BYTE PTR __Enders$[esp+146], 0
  00136	e8 00 00 00 00	 call	 _memchr
  0013b	8b f0		 mov	 esi, eax

; 1329 : 		const char *_Pointptr = (const char *)::memchr(_Buf,
; 1330 : 			_Enders[0], _Count);	// find decimal point

  0013d	0f be 44 24 20	 movsx	 eax, BYTE PTR __Enders$[esp+144]
  00142	53		 push	 ebx
  00143	50		 push	 eax
  00144	57		 push	 edi
  00145	e8 00 00 00 00	 call	 _memchr
  0014a	8b e8		 mov	 ebp, eax
  0014c	83 c4 18	 add	 esp, 24			; 00000018H

; 1331 : 		if (_Pointptr == 0)

  0014f	85 ed		 test	 ebp, ebp
  00151	75 07		 jne	 SHORT $LN16@Fput

; 1332 : 			_Trailing = 0;

  00153	89 84 24 ac 00
	00 00		 mov	 DWORD PTR __Trailing$[esp+128], eax
$LN16@Fput:

; 1333 : 
; 1334 : 		if (*_Grouping.c_str() != CHAR_MAX && '\0' < *_Grouping.c_str())

  0015a	8b 4c 24 70	 mov	 ecx, DWORD PTR __Grouping$[esp+156]
  0015e	8b 54 24 5c	 mov	 edx, DWORD PTR __Grouping$[esp+136]
  00162	8b c2		 mov	 eax, edx
  00164	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00167	73 04		 jae	 SHORT $LN78@Fput
  00169	8d 44 24 5c	 lea	 eax, DWORD PTR __Grouping$[esp+136]
$LN78@Fput:
  0016d	80 38 7f	 cmp	 BYTE PTR [eax], 127	; 0000007fH
  00170	0f 84 47 01 00
	00		 je	 $LN111@Fput
  00176	8b c2		 mov	 eax, edx
  00178	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0017b	73 04		 jae	 SHORT $LN84@Fput
  0017d	8d 44 24 5c	 lea	 eax, DWORD PTR __Grouping$[esp+136]
$LN84@Fput:
  00181	80 38 00	 cmp	 BYTE PTR [eax], 0
  00184	0f 8e 33 01 00
	00		 jle	 $LN111@Fput

; 1335 : 			{	// grouping specified, add thousands separators
; 1336 : 			_Groupstring.append(_Buf, _Count);	// assemble field into string

  0018a	53		 push	 ebx
  0018b	57		 push	 edi
  0018c	8d 4c 24 44	 lea	 ecx, DWORD PTR __Groupstring$[esp+140]
  00190	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1337 : 			if (_Eptr == 0)

  00195	85 f6		 test	 esi, esi
  00197	75 1c		 jne	 SHORT $LN14@Fput

; 1338 : 				_Groupstring.append(_Trailing, '0');

  00199	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR __Trailing$[esp+128]
  001a0	6a 30		 push	 48			; 00000030H
  001a2	51		 push	 ecx
  001a3	8d 4c 24 44	 lea	 ecx, DWORD PTR __Groupstring$[esp+140]
  001a7	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1339 : 			else

  001ac	8b 9c 24 a4 00
	00 00		 mov	 ebx, DWORD PTR __Beforepoint$[esp+128]
  001b3	eb 38		 jmp	 SHORT $LN13@Fput
$LN14@Fput:

; 1340 : 				{	/* dispose of any zeros before exponent */
; 1341 : 				if (_Pointptr == 0)

  001b5	85 ed		 test	 ebp, ebp
  001b7	75 17		 jne	 SHORT $LN183@Fput

; 1342 : 					{	/* no point but exponent, put scaling zeros */
; 1343 : 					_Groupstring.append(_Beforepoint, '0');

  001b9	8b 94 24 a4 00
	00 00		 mov	 edx, DWORD PTR __Beforepoint$[esp+128]
  001c0	6a 30		 push	 48			; 00000030H
  001c2	52		 push	 edx
  001c3	8d 4c 24 44	 lea	 ecx, DWORD PTR __Groupstring$[esp+140]
  001c7	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1344 : 					_Beforepoint = 0;

  001cc	33 db		 xor	 ebx, ebx
  001ce	eb 07		 jmp	 SHORT $LN12@Fput
$LN183@Fput:
  001d0	8b 9c 24 a4 00
	00 00		 mov	 ebx, DWORD PTR __Beforepoint$[esp+128]
$LN12@Fput:

; 1345 : 					}
; 1346 : 				_Groupstring.insert(_Eptr - _Buf, _Trailing, '0');

  001d7	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR __Trailing$[esp+128]
  001de	6a 30		 push	 48			; 00000030H
  001e0	50		 push	 eax
  001e1	2b f7		 sub	 esi, edi
  001e3	56		 push	 esi
  001e4	8d 4c 24 48	 lea	 ecx, DWORD PTR __Groupstring$[esp+144]
  001e8	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
$LN13@Fput:

; 1347 : 				}
; 1348 : 			_Trailing = 0;
; 1349 : 
; 1350 : 			if (_Pointptr == 0)
; 1351 : 				_Groupstring.append(_Beforepoint, '0');

  001ed	6a 30		 push	 48			; 00000030H
  001ef	85 ed		 test	 ebp, ebp
  001f1	75 0c		 jne	 SHORT $LN11@Fput
  001f3	53		 push	 ebx
  001f4	8d 4c 24 44	 lea	 ecx, DWORD PTR __Groupstring$[esp+140]
  001f8	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1352 : 			else

  001fd	eb 31		 jmp	 SHORT $LN10@Fput
$LN11@Fput:

; 1353 : 				{	// fill in zeros around decimal point
; 1354 : 				_Groupstring.insert(_Pointptr - _Buf + 1, _Afterpoint, '0');

  001ff	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR __Afterpoint$[esp+132]
  00206	8b f5		 mov	 esi, ebp
  00208	2b f7		 sub	 esi, edi
  0020a	51		 push	 ecx
  0020b	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  0020e	52		 push	 edx
  0020f	8d 4c 24 48	 lea	 ecx, DWORD PTR __Groupstring$[esp+144]
  00213	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1355 : 				_Groupstring.insert(_Pointptr - _Buf, _Beforepoint, '0');

  00218	6a 30		 push	 48			; 00000030H
  0021a	53		 push	 ebx
  0021b	56		 push	 esi
  0021c	8d 4c 24 48	 lea	 ecx, DWORD PTR __Groupstring$[esp+144]
  00220	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1356 : 				_Afterpoint = 0;

  00225	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Afterpoint$[esp+128], 0
$LN10@Fput:

; 1357 : 				}
; 1358 : 			_Beforepoint = 0;
; 1359 : 
; 1360 : 			const char *_Pg = _Grouping.c_str();

  00230	8b 7c 24 5c	 mov	 edi, DWORD PTR __Grouping$[esp+136]
  00234	bb 10 00 00 00	 mov	 ebx, 16			; 00000010H
  00239	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Beforepoint$[esp+128], 0
  00244	39 5c 24 70	 cmp	 DWORD PTR __Grouping$[esp+156], ebx
  00248	73 04		 jae	 SHORT $LN90@Fput
  0024a	8d 7c 24 5c	 lea	 edi, DWORD PTR __Grouping$[esp+136]
$LN90@Fput:

; 1361 : 			size_t _Off = ::strcspn(&_Groupstring[0], &_Enders[0]);

  0024e	8b 44 24 40	 mov	 eax, DWORD PTR __Groupstring$[esp+136]
  00252	39 5c 24 54	 cmp	 DWORD PTR __Groupstring$[esp+156], ebx
  00256	73 04		 jae	 SHORT $LN100@Fput
  00258	8d 44 24 40	 lea	 eax, DWORD PTR __Groupstring$[esp+136]
$LN100@Fput:
  0025c	8d 4c 24 14	 lea	 ecx, DWORD PTR __Enders$[esp+132]
  00260	51		 push	 ecx
  00261	50		 push	 eax
  00262	e8 00 00 00 00	 call	 _strcspn
  00267	8b f0		 mov	 esi, eax

; 1362 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1363 : 				&& (size_t)*_Pg < _Off - _Prefix)

  00269	8a 07		 mov	 al, BYTE PTR [edi]
  0026b	83 c4 08	 add	 esp, 8
  0026e	3c 7f		 cmp	 al, 127			; 0000007fH
  00270	74 2e		 je	 SHORT $LN8@Fput
$LL9@Fput:
  00272	84 c0		 test	 al, al
  00274	7e 2a		 jle	 SHORT $LN8@Fput
  00276	8b d6		 mov	 edx, esi
  00278	2b 54 24 20	 sub	 edx, DWORD PTR __Prefix$[esp+132]
  0027c	0f be c0	 movsx	 eax, al
  0027f	3b c2		 cmp	 eax, edx
  00281	73 1d		 jae	 SHORT $LN8@Fput

; 1364 : 				{	// add a NUL to mark thousands separator
; 1365 : 				_Groupstring.insert(_Off -= *_Pg, (size_t)1, '\0');

  00283	6a 00		 push	 0
  00285	2b f0		 sub	 esi, eax
  00287	6a 01		 push	 1
  00289	56		 push	 esi
  0028a	8d 4c 24 48	 lea	 ecx, DWORD PTR __Groupstring$[esp+144]
  0028e	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1366 : 				if ('\0' < _Pg[1])

  00293	80 7f 01 00	 cmp	 BYTE PTR [edi+1], 0
  00297	7e 01		 jle	 SHORT $LN7@Fput

; 1362 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1363 : 				&& (size_t)*_Pg < _Off - _Prefix)

  00299	47		 inc	 edi
$LN7@Fput:
  0029a	8a 07		 mov	 al, BYTE PTR [edi]
  0029c	3c 7f		 cmp	 al, 127			; 0000007fH
  0029e	75 d2		 jne	 SHORT $LL9@Fput
$LN8@Fput:

; 1367 : 					++_Pg;	// not last group, advance
; 1368 : 				}
; 1369 : 
; 1370 : 			_Buf = &_Groupstring[0];

  002a0	8b 7c 24 40	 mov	 edi, DWORD PTR __Groupstring$[esp+136]
  002a4	39 5c 24 54	 cmp	 DWORD PTR __Groupstring$[esp+156], ebx
  002a8	73 04		 jae	 SHORT $LN110@Fput
  002aa	8d 7c 24 40	 lea	 edi, DWORD PTR __Groupstring$[esp+136]
$LN110@Fput:

; 1371 : 			_Trailing = 0;
; 1372 : 			_Count = _Groupstring.size();

  002ae	8b 5c 24 50	 mov	 ebx, DWORD PTR __Groupstring$[esp+152]
  002b2	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Trailing$[esp+128], 0
$LN111@Fput:

; 1373 : 			}
; 1374 : 
; 1375 : 		size_t _Fillcount = _Beforepoint + _Afterpoint + _Trailing + _Count;

  002bd	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __Afterpoint$[esp+128]
  002c4	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR __Beforepoint$[esp+128]

; 1376 : 		_Fillcount = _Iosbase.width() <= 0
; 1377 : 			|| (size_t)_Iosbase.width() <= _Fillcount
; 1378 : 				? 0 : (size_t)_Iosbase.width() - _Fillcount;

  002cb	8b 54 24 30	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+132]
  002cf	03 c1		 add	 eax, ecx
  002d1	03 84 24 ac 00
	00 00		 add	 eax, DWORD PTR __Trailing$[esp+128]
  002d8	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  002db	03 c3		 add	 eax, ebx
  002dd	85 c9		 test	 ecx, ecx
  002df	7e 0c		 jle	 SHORT $LN21@Fput
  002e1	3b c8		 cmp	 ecx, eax
  002e3	76 08		 jbe	 SHORT $LN21@Fput
  002e5	2b c8		 sub	 ecx, eax
  002e7	89 4c 24 18	 mov	 DWORD PTR __Fillcount$[esp+132], ecx
  002eb	eb 08		 jmp	 SHORT $LN22@Fput
$LN21@Fput:
  002ed	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __Fillcount$[esp+132], 0
$LN22@Fput:

; 1379 : 		ios_base::fmtflags _Adjustfield =
; 1380 : 			_Iosbase.flags() & ios_base::adjustfield;

  002f5	8b 42 10	 mov	 eax, DWORD PTR [edx+16]

; 1381 : 		if (_Adjustfield != ios_base::left
; 1382 : 			&& _Adjustfield != ios_base::internal)

  002f8	8b b4 24 88 00
	00 00		 mov	 esi, DWORD PTR _this$[esp+128]
  002ff	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00304	83 f8 40	 cmp	 eax, 64			; 00000040H
  00307	0f 84 c7 00 00
	00		 je	 $LN4@Fput
  0030d	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00312	74 3d		 je	 SHORT $LN180@Fput

; 1383 : 			{	// put leading fill
; 1384 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  00314	8b 54 24 18	 mov	 edx, DWORD PTR __Fillcount$[esp+132]
  00318	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR __Fill$[esp+128]
  0031f	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+132]
  00326	52		 push	 edx
  00327	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  0032e	50		 push	 eax
  0032f	51		 push	 ecx
  00330	52		 push	 edx
  00331	8d 44 24 30	 lea	 eax, DWORD PTR $T189539[esp+148]
  00335	50		 push	 eax
  00336	56		 push	 esi
  00337	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0033c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033e	89 8c 24 a8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+152], ecx
  00345	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00348	89 94 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], edx

; 1385 : 			_Fillcount = 0;

  0034f	eb 78		 jmp	 SHORT $LN192@Fput
$LN180@Fput:

; 1386 : 			}
; 1387 : 		else if (_Adjustfield == ios_base::internal)
; 1388 : 			{	// put internal fill
; 1389 : 			if (0 < _Prefix)

  00351	83 7c 24 20 00	 cmp	 DWORD PTR __Prefix$[esp+132], 0
  00356	76 36		 jbe	 SHORT $LN3@Fput

; 1390 : 				{	// but first put sign
; 1391 : 				_Dest = _Putc(_Dest, _Buf, 1);

  00358	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+132]
  0035f	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+128]
  00366	6a 01		 push	 1
  00368	57		 push	 edi
  00369	50		 push	 eax
  0036a	51		 push	 ecx
  0036b	8d 54 24 30	 lea	 edx, DWORD PTR $T189540[esp+148]
  0036f	52		 push	 edx
  00370	56		 push	 esi
  00371	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  00376	8b 08		 mov	 ecx, DWORD PTR [eax]
  00378	89 8c 24 a8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+152], ecx
  0037f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00382	83 c4 18	 add	 esp, 24			; 00000018H

; 1392 : 				++_Buf, --_Count;

  00385	47		 inc	 edi
  00386	89 94 24 94 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], edx
  0038d	4b		 dec	 ebx
$LN3@Fput:

; 1393 : 				}
; 1394 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  0038e	8b 44 24 18	 mov	 eax, DWORD PTR __Fillcount$[esp+132]
  00392	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+128]
  00399	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  003a0	50		 push	 eax
  003a1	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+132]
  003a8	51		 push	 ecx
  003a9	52		 push	 edx
  003aa	50		 push	 eax
  003ab	8d 4c 24 30	 lea	 ecx, DWORD PTR $T189541[esp+148]
  003af	51		 push	 ecx
  003b0	56		 push	 esi
  003b1	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  003b6	8b 10		 mov	 edx, DWORD PTR [eax]
  003b8	89 94 24 a8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+152], edx
  003bf	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  003c2	89 84 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], eax
$LN192@Fput:

; 1395 : 			_Fillcount = 0;

  003c9	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __Fillcount$[esp+156], 0
  003d1	83 c4 18	 add	 esp, 24			; 00000018H
$LN4@Fput:

; 1396 : 			}
; 1397 : 
; 1398 : 		_Pointptr = (const char *)::memchr(_Buf,
; 1399 : 			_Enders[0], _Count);	// find decimal point again

  003d4	0f be 4c 24 14	 movsx	 ecx, BYTE PTR __Enders$[esp+132]
  003d9	53		 push	 ebx
  003da	51		 push	 ecx
  003db	57		 push	 edi
  003dc	e8 00 00 00 00	 call	 _memchr
  003e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1400 : 		if (_Pointptr != 0)

  003e4	85 c0		 test	 eax, eax
  003e6	0f 84 e9 00 00
	00		 je	 $LN2@Fput

; 1401 : 			{	// has decimal point, put pieces and zero fills
; 1402 : 			size_t _Fracoffset = _Pointptr - _Buf + 1;
; 1403 : 			_Dest = _Putgrouped(_Dest, _Buf, _Fracoffset - 1, _Kseparator);

  003ec	8b 54 24 1c	 mov	 edx, DWORD PTR __Kseparator$[esp+132]
  003f0	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+132]
  003f7	2b c7		 sub	 eax, edi
  003f9	40		 inc	 eax
  003fa	52		 push	 edx
  003fb	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  00402	8b e8		 mov	 ebp, eax
  00404	8d 45 ff	 lea	 eax, DWORD PTR [ebp-1]
  00407	50		 push	 eax
  00408	57		 push	 edi
  00409	51		 push	 ecx
  0040a	52		 push	 edx
  0040b	8d 44 24 34	 lea	 eax, DWORD PTR $T189542[esp+152]
  0040f	50		 push	 eax
  00410	56		 push	 esi
  00411	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  00416	8b 08		 mov	 ecx, DWORD PTR [eax]
  00418	89 8c 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], ecx
  0041f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1404 : 			_Dest = _Rep(_Dest, _E0, _Beforepoint);

  00422	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR __Beforepoint$[esp+156]
  00429	51		 push	 ecx
  0042a	89 94 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], edx
  00431	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00434	8b 00		 mov	 eax, DWORD PTR [eax]
  00436	6a 30		 push	 48			; 00000030H
  00438	52		 push	 edx
  00439	50		 push	 eax
  0043a	8d 4c 24 4c	 lea	 ecx, DWORD PTR $T189543[esp+176]
  0043e	51		 push	 ecx
  0043f	56		 push	 esi
  00440	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00445	8b 10		 mov	 edx, DWORD PTR [eax]

; 1405 : 			_Dest = _Rep(_Dest, _Punct_fac.decimal_point(), 1);

  00447	8b 4c 24 5c	 mov	 ecx, DWORD PTR __Punct_fac$[esp+184]
  0044b	89 94 24 c4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+180], edx
  00452	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00455	89 84 24 c8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+184], eax
  0045c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0045e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00461	83 c4 34	 add	 esp, 52			; 00000034H
  00464	ff d0		 call	 eax
  00466	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  0046d	6a 01		 push	 1
  0046f	88 44 24 2c	 mov	 BYTE PTR $T189819[esp+136], al
  00473	8b 4c 24 2c	 mov	 ecx, DWORD PTR $T189819[esp+136]
  00477	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+132]
  0047e	51		 push	 ecx
  0047f	52		 push	 edx
  00480	50		 push	 eax
  00481	8d 4c 24 30	 lea	 ecx, DWORD PTR $T189544[esp+148]
  00485	51		 push	 ecx
  00486	56		 push	 esi
  00487	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0048c	8b 10		 mov	 edx, DWORD PTR [eax]
  0048e	89 94 24 a8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+152], edx
  00495	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1406 : 			_Dest = _Rep(_Dest, _E0, _Afterpoint);

  00498	8b 94 24 c0 00
	00 00		 mov	 edx, DWORD PTR __Afterpoint$[esp+152]
  0049f	52		 push	 edx
  004a0	89 8c 24 b0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], ecx
  004a7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004aa	8b 10		 mov	 edx, DWORD PTR [eax]
  004ac	6a 30		 push	 48			; 00000030H
  004ae	51		 push	 ecx
  004af	52		 push	 edx
  004b0	8d 44 24 50	 lea	 eax, DWORD PTR $T189545[esp+172]
  004b4	50		 push	 eax
  004b5	56		 push	 esi
  004b6	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  004bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  004bd	89 8c 24 c0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+176], ecx
  004c4	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  004c7	83 c4 30	 add	 esp, 48			; 00000030H

; 1407 : 			_Buf += _Fracoffset, _Count -= _Fracoffset;

  004ca	03 fd		 add	 edi, ebp
  004cc	89 94 24 94 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], edx
  004d3	2b dd		 sub	 ebx, ebp
$LN2@Fput:

; 1408 : 			}
; 1409 : 
; 1410 : 		_Eptr = (const char *)::memchr(_Buf,
; 1411 : 			'e', _Count);	// find exponent again

  004d5	53		 push	 ebx
  004d6	6a 65		 push	 101			; 00000065H
  004d8	57		 push	 edi
  004d9	e8 00 00 00 00	 call	 _memchr
  004de	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1412 : 		if (_Eptr != 0)

  004e1	85 c0		 test	 eax, eax
  004e3	0f 84 bd 00 00
	00		 je	 $LN1@Fput

; 1413 : 			{	// has exponent field, put it out
; 1414 : 			size_t _Expoffset = _Eptr - _Buf + 1;
; 1415 : 			_Dest = _Putgrouped(_Dest, _Buf, _Expoffset - 1, _Kseparator);

  004e9	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  004f0	2b c7		 sub	 eax, edi
  004f2	40		 inc	 eax
  004f3	8b e8		 mov	 ebp, eax
  004f5	8b 44 24 1c	 mov	 eax, DWORD PTR __Kseparator$[esp+132]
  004f9	50		 push	 eax
  004fa	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+132]
  00501	8d 4d ff	 lea	 ecx, DWORD PTR [ebp-1]
  00504	51		 push	 ecx
  00505	57		 push	 edi
  00506	52		 push	 edx
  00507	50		 push	 eax
  00508	8d 4c 24 3c	 lea	 ecx, DWORD PTR $T189546[esp+152]
  0050c	51		 push	 ecx
  0050d	56		 push	 esi
  0050e	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  00513	8b 10		 mov	 edx, DWORD PTR [eax]
  00515	89 94 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], edx
  0051c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1416 : 			_Dest = _Rep(_Dest, _E0, _Trailing), _Trailing = 0;

  0051f	8b 94 24 c8 00
	00 00		 mov	 edx, DWORD PTR __Trailing$[esp+156]
  00526	52		 push	 edx
  00527	89 8c 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], ecx
  0052e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00531	8b 10		 mov	 edx, DWORD PTR [eax]
  00533	6a 30		 push	 48			; 00000030H
  00535	51		 push	 ecx
  00536	52		 push	 edx
  00537	8d 44 24 54	 lea	 eax, DWORD PTR $T189547[esp+176]
  0053b	50		 push	 eax
  0053c	56		 push	 esi
  0053d	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00542	8b 08		 mov	 ecx, DWORD PTR [eax]
  00544	89 8c 24 c4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+180], ecx

; 1417 : 			_Dest = _Putc(_Dest, _Iosbase.flags() & ios_base::uppercase
; 1418 : 				? "E" : "e", 1);

  0054b	8b 4c 24 64	 mov	 ecx, DWORD PTR __Iosbase$GSCopy$[esp+184]
  0054f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00552	83 c4 34	 add	 esp, 52			; 00000034H
  00555	f6 41 10 04	 test	 BYTE PTR [ecx+16], 4
  00559	89 94 24 94 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], edx
  00560	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Trailing$[esp+128], 0
  0056b	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01DDCIFGEA@E?$AA@
  00570	75 05		 jne	 SHORT $LN24@Fput
  00572	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01KGKMHCOC@e?$AA@
$LN24@Fput:
  00577	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0057a	8b 00		 mov	 eax, DWORD PTR [eax]
  0057c	6a 01		 push	 1
  0057e	51		 push	 ecx
  0057f	52		 push	 edx
  00580	50		 push	 eax
  00581	8d 4c 24 38	 lea	 ecx, DWORD PTR $T189550[esp+148]
  00585	51		 push	 ecx
  00586	56		 push	 esi
  00587	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  0058c	8b 10		 mov	 edx, DWORD PTR [eax]
  0058e	89 94 24 a8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+152], edx
  00595	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00598	83 c4 18	 add	 esp, 24			; 00000018H

; 1419 : 			_Buf += _Expoffset, _Count -= _Expoffset;

  0059b	03 fd		 add	 edi, ebp
  0059d	89 84 24 94 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], eax
  005a4	2b dd		 sub	 ebx, ebp
$LN1@Fput:

; 1420 : 			}
; 1421 : 
; 1422 : 		_Dest = _Putgrouped(_Dest, _Buf, _Count,
; 1423 : 			_Kseparator);	// put leftover field

  005a6	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Kseparator$[esp+132]
  005aa	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+132]
  005b1	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+128]
  005b8	51		 push	 ecx
  005b9	53		 push	 ebx
  005ba	57		 push	 edi
  005bb	52		 push	 edx
  005bc	50		 push	 eax
  005bd	8d 4c 24 3c	 lea	 ecx, DWORD PTR $T189551[esp+152]
  005c1	51		 push	 ecx
  005c2	56		 push	 esi
  005c3	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  005c8	8b 10		 mov	 edx, DWORD PTR [eax]
  005ca	89 94 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], edx
  005d1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1424 : 		_Dest = _Rep(_Dest, _E0, _Trailing);	// put trailing zeros

  005d4	8b 94 24 c8 00
	00 00		 mov	 edx, DWORD PTR __Trailing$[esp+156]
  005db	52		 push	 edx
  005dc	89 8c 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], ecx
  005e3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  005e6	8b 10		 mov	 edx, DWORD PTR [eax]
  005e8	6a 30		 push	 48			; 00000030H
  005ea	51		 push	 ecx
  005eb	52		 push	 edx
  005ec	8d 44 24 54	 lea	 eax, DWORD PTR $T189552[esp+176]
  005f0	50		 push	 eax
  005f1	56		 push	 esi
  005f2	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  005f7	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1425 : 		_Iosbase.width(0);

  005f9	8b 54 24 64	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+184]

; 1426 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  005fd	8b 7c 24 68	 mov	 edi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+184]
  00601	89 8c 24 c4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+180], ecx
  00608	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0060b	33 db		 xor	 ebx, ebx
  0060d	89 5a 18	 mov	 DWORD PTR [edx+24], ebx
  00610	8b 54 24 4c	 mov	 edx, DWORD PTR __Fillcount$[esp+184]
  00614	52		 push	 edx
  00615	8b 94 24 d4 00
	00 00		 mov	 edx, DWORD PTR __Fill$[esp+184]
  0061c	52		 push	 edx
  0061d	50		 push	 eax
  0061e	51		 push	 ecx
  0061f	57		 push	 edi
  00620	56		 push	 esi
  00621	89 84 24 e0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+208], eax
  00628	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0062d	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  00632	83 c4 4c	 add	 esp, 76			; 0000004cH
  00635	39 74 24 54	 cmp	 DWORD PTR __Groupstring$[esp+156], esi
  00639	72 0d		 jb	 SHORT $LN143@Fput
  0063b	8b 44 24 40	 mov	 eax, DWORD PTR __Groupstring$[esp+136]
  0063f	50		 push	 eax
  00640	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00645	83 c4 04	 add	 esp, 4
$LN143@Fput:
  00648	c7 44 24 54 0f
	00 00 00	 mov	 DWORD PTR __Groupstring$[esp+156], 15 ; 0000000fH
  00650	89 5c 24 50	 mov	 DWORD PTR __Groupstring$[esp+152], ebx
  00654	c6 44 24 40 00	 mov	 BYTE PTR __Groupstring$[esp+136], 0
  00659	39 74 24 70	 cmp	 DWORD PTR __Grouping$[esp+156], esi
  0065d	72 0d		 jb	 SHORT $LN181@Fput
  0065f	8b 4c 24 5c	 mov	 ecx, DWORD PTR __Grouping$[esp+136]
  00663	51		 push	 ecx
  00664	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00669	83 c4 04	 add	 esp, 4
$LN181@Fput:
  0066c	8b c7		 mov	 eax, edi

; 1427 : 		}

  0066e	8b 4c 24 78	 mov	 ecx, DWORD PTR __$EHRec$[esp+132]
  00672	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00679	59		 pop	 ecx
  0067a	5f		 pop	 edi
  0067b	5e		 pop	 esi
  0067c	5d		 pop	 ebp
  0067d	5b		 pop	 ebx
  0067e	8b 4c 24 60	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+112]
  00682	33 cc		 xor	 ecx, esp
  00684	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00689	83 c4 70	 add	 esp, 112		; 00000070H
  0068c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$0:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR $T189534[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z$2:
  00010	8d 4d b8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 8c	 lea	 eax, DWORD PTR [edx-116]
  0001f	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	83 c0 10	 add	 eax, 16			; 00000010H
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
PUBLIC	__Iosbase$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1
__ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
_TEXT	SEGMENT
__Lock$190109 = -76					; size = 4
$T190083 = -76						; size = 8
$T190081 = -76						; size = 8
__Prefix$ = -76						; size = 4
__Iosbase$GSCopy$ = -68					; size = 4
$T190174 = -64						; size = 1
__Punct_fac$ = -64					; size = 4
$T190084 = -60						; size = 8
$T190082 = -60						; size = 8
__Pg$146319 = -60					; size = 4
$T190073 = -52						; size = 4
___$ReturnUdt$GSCopy$ = -48				; size = 4
__Grouping$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Count$ = 36						; size = 4
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput, COMDAT

; 1458 : 		{	// put formatted integer to _Dest

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 40	 sub	 esp, 64			; 00000040H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 3c	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 44 24 54	 lea	 eax, DWORD PTR __$EHRec$[esp+96]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 44 24 68	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+92]
  00036	8b 4c 24 74	 mov	 ecx, DWORD PTR __Iosbase$[esp+92]
  0003a	8b 5c 24 7c	 mov	 ebx, DWORD PTR __Buf$[esp+92]

; 1459 : 		_DEBUG_POINTER(_Dest);
; 1460 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  0003e	8d 54 24 2c	 lea	 edx, DWORD PTR $T190073[esp+96]
  00042	52		 push	 edx
  00043	89 44 24 34	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+100], eax
  00047	89 4c 24 20	 mov	 DWORD PTR __Iosbase$GSCopy$[esp+100], ecx
  0004b	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00050	50		 push	 eax
  00051	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+108], 0
  00059	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  0005e	8b 6c 24 30	 mov	 ebp, DWORD PTR $T190073[esp+100]
  00062	83 c4 04	 add	 esp, 4
  00065	8b f0		 mov	 esi, eax
  00067	89 74 24 20	 mov	 DWORD PTR __Punct_fac$[esp+96], esi
  0006b	c7 44 24 5c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+104], -1
  00073	85 ed		 test	 ebp, ebp
  00075	74 3d		 je	 SHORT $LN22@Iput
  00077	6a 00		 push	 0
  00079	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$190109[esp+100]
  0007d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00082	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00085	85 c0		 test	 eax, eax
  00087	76 09		 jbe	 SHORT $LN24@Iput
  00089	83 f8 ff	 cmp	 eax, -1
  0008c	73 04		 jae	 SHORT $LN24@Iput
  0008e	48		 dec	 eax
  0008f	89 45 04	 mov	 DWORD PTR [ebp+4], eax
$LN24@Iput:
  00092	8b 7d 04	 mov	 edi, DWORD PTR [ebp+4]
  00095	f7 df		 neg	 edi
  00097	1b ff		 sbb	 edi, edi
  00099	f7 d7		 not	 edi
  0009b	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$190109[esp+96]
  0009f	23 fd		 and	 edi, ebp
  000a1	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000a6	85 ff		 test	 edi, edi
  000a8	74 0a		 je	 SHORT $LN22@Iput
  000aa	8b 07		 mov	 eax, DWORD PTR [edi]
  000ac	8b 10		 mov	 edx, DWORD PTR [eax]
  000ae	6a 01		 push	 1
  000b0	8b cf		 mov	 ecx, edi
  000b2	ff d2		 call	 edx
$LN22@Iput:

; 1461 : 		const string _Grouping = _Punct_fac.grouping();

  000b4	8d 44 24 34	 lea	 eax, DWORD PTR __Grouping$[esp+96]
  000b8	50		 push	 eax
  000b9	8b ce		 mov	 ecx, esi
  000bb	e8 00 00 00 00	 call	 ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping

; 1462 : 		const size_t _Prefix = *_Buf == '+' || *_Buf == '-' ? 1
; 1463 : 			: *_Buf == '0' && (_Buf[1] == 'x' || _Buf[1] == 'X') ? 2
; 1464 : 			: 0;

  000c0	8a 03		 mov	 al, BYTE PTR [ebx]
  000c2	b9 01 00 00 00	 mov	 ecx, 1
  000c7	89 4c 24 5c	 mov	 DWORD PTR __$EHRec$[esp+104], ecx
  000cb	3c 2b		 cmp	 al, 43			; 0000002bH
  000cd	74 27		 je	 SHORT $LN10@Iput
  000cf	3c 2d		 cmp	 al, 45			; 0000002dH
  000d1	74 23		 je	 SHORT $LN10@Iput
  000d3	3c 30		 cmp	 al, 48			; 00000030H
  000d5	75 15		 jne	 SHORT $LN12@Iput
  000d7	8a 43 01	 mov	 al, BYTE PTR [ebx+1]
  000da	3c 78		 cmp	 al, 120			; 00000078H
  000dc	74 04		 je	 SHORT $LN11@Iput
  000de	3c 58		 cmp	 al, 88			; 00000058H
  000e0	75 0a		 jne	 SHORT $LN12@Iput
$LN11@Iput:
  000e2	c7 44 24 14 02
	00 00 00	 mov	 DWORD PTR __Prefix$[esp+96], 2
  000ea	eb 0e		 jmp	 SHORT $LN14@Iput
$LN12@Iput:
  000ec	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __Prefix$[esp+96], 0
  000f4	eb 04		 jmp	 SHORT $LN14@Iput
$LN10@Iput:
  000f6	89 4c 24 14	 mov	 DWORD PTR __Prefix$[esp+96], ecx
$LN14@Iput:

; 1465 : 
; 1466 : 		if (*_Grouping.c_str() != CHAR_MAX && '\0' < *_Grouping.c_str())

  000fa	8b 4c 24 4c	 mov	 ecx, DWORD PTR __Grouping$[esp+120]
  000fe	8b 54 24 38	 mov	 edx, DWORD PTR __Grouping$[esp+100]
  00102	8b c2		 mov	 eax, edx
  00104	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00107	73 04		 jae	 SHORT $LN33@Iput
  00109	8d 44 24 38	 lea	 eax, DWORD PTR __Grouping$[esp+100]
$LN33@Iput:
  0010d	80 38 7f	 cmp	 BYTE PTR [eax], 127	; 0000007fH
  00110	74 7e		 je	 SHORT $LN87@Iput
  00112	8b c2		 mov	 eax, edx
  00114	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00117	73 04		 jae	 SHORT $LN39@Iput
  00119	8d 44 24 38	 lea	 eax, DWORD PTR __Grouping$[esp+100]
$LN39@Iput:
  0011d	80 38 00	 cmp	 BYTE PTR [eax], 0
  00120	7e 6e		 jle	 SHORT $LN87@Iput

; 1467 : 			{	// grouping specified, add thousands separators
; 1468 : 			const char *_Pg = _Grouping.c_str();

  00122	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00125	72 06		 jb	 SHORT $LN44@Iput
  00127	89 54 24 24	 mov	 DWORD PTR __Pg$146319[esp+96], edx
  0012b	eb 08		 jmp	 SHORT $LN45@Iput
$LN44@Iput:
  0012d	8d 4c 24 38	 lea	 ecx, DWORD PTR __Grouping$[esp+100]
  00131	89 4c 24 24	 mov	 DWORD PTR __Pg$146319[esp+96], ecx
$LN45@Iput:

; 1469 : 			size_t _Off = _Count;
; 1470 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1471 : 				&& (size_t)*_Pg < _Off - _Prefix)

  00135	8b 54 24 24	 mov	 edx, DWORD PTR __Pg$146319[esp+96]
  00139	8a 02		 mov	 al, BYTE PTR [edx]
  0013b	8b ac 24 80 00
	00 00		 mov	 ebp, DWORD PTR __Count$[esp+92]
  00142	8b f5		 mov	 esi, ebp
  00144	3c 7f		 cmp	 al, 127			; 0000007fH
  00146	74 4f		 je	 SHORT $LN5@Iput
$LN6@Iput:
  00148	84 c0		 test	 al, al
  0014a	7e 4b		 jle	 SHORT $LN5@Iput
  0014c	8b ce		 mov	 ecx, esi
  0014e	2b 4c 24 14	 sub	 ecx, DWORD PTR __Prefix$[esp+96]
  00152	0f be c0	 movsx	 eax, al
  00155	3b c1		 cmp	 eax, ecx
  00157	73 3e		 jae	 SHORT $LN5@Iput

; 1472 : 				{	// add a NUL to mark thousands separator
; 1473 : 				_Off -= *_Pg;

  00159	2b f0		 sub	 esi, eax

; 1474 : 				_CRT_SECURE_MEMMOVE(&_Buf[_Off + 1], _Count + 1 - _Off,

  0015b	8b d5		 mov	 edx, ebp
  0015d	2b d6		 sub	 edx, esi
  0015f	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00162	50		 push	 eax
  00163	8d 3c 33	 lea	 edi, DWORD PTR [ebx+esi]
  00166	57		 push	 edi
  00167	50		 push	 eax
  00168	8d 44 33 01	 lea	 eax, DWORD PTR [ebx+esi+1]
  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 _memmove_s

; 1475 : 					&_Buf[_Off],	 _Count + 1 - _Off);
; 1476 : 				_Buf[_Off] = '\0', ++_Count;
; 1477 : 				if ('\0' < _Pg[1])

  00172	8b 44 24 34	 mov	 eax, DWORD PTR __Pg$146319[esp+112]
  00176	83 c4 10	 add	 esp, 16			; 00000010H
  00179	c6 07 00	 mov	 BYTE PTR [edi], 0
  0017c	45		 inc	 ebp
  0017d	80 78 01 00	 cmp	 BYTE PTR [eax+1], 0
  00181	7e 05		 jle	 SHORT $LN4@Iput
  00183	40		 inc	 eax
  00184	89 44 24 24	 mov	 DWORD PTR __Pg$146319[esp+96], eax
$LN4@Iput:
  00188	8a 00		 mov	 al, BYTE PTR [eax]
  0018a	3c 7f		 cmp	 al, 127			; 0000007fH
  0018c	75 ba		 jne	 SHORT $LN6@Iput

; 1469 : 			size_t _Off = _Count;
; 1470 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1471 : 				&& (size_t)*_Pg < _Off - _Prefix)

  0018e	eb 07		 jmp	 SHORT $LN5@Iput
$LN87@Iput:
  00190	8b ac 24 80 00
	00 00		 mov	 ebp, DWORD PTR __Count$[esp+92]
$LN5@Iput:

; 1478 : 					++_Pg;	// not last group, advance
; 1479 : 				}
; 1480 : 			}
; 1481 : 
; 1482 : 		size_t _Fillcount = _Iosbase.width() <= 0
; 1483 : 			|| (size_t)_Iosbase.width() <= _Count
; 1484 : 				? 0 : (size_t)_Iosbase.width() - _Count;

  00197	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Iosbase$GSCopy$[esp+96]
  0019b	8b 79 18	 mov	 edi, DWORD PTR [ecx+24]
  0019e	85 ff		 test	 edi, edi
  001a0	7e 08		 jle	 SHORT $LN15@Iput
  001a2	3b fd		 cmp	 edi, ebp
  001a4	76 04		 jbe	 SHORT $LN15@Iput
  001a6	2b fd		 sub	 edi, ebp
  001a8	eb 02		 jmp	 SHORT $LN16@Iput
$LN15@Iput:
  001aa	33 ff		 xor	 edi, edi
$LN16@Iput:

; 1485 : 
; 1486 : 		ios_base::fmtflags _Adjustfield =
; 1487 : 			_Iosbase.flags() & ios_base::adjustfield;
; 1488 : 		if (_Adjustfield != ios_base::left
; 1489 : 			&& _Adjustfield != ios_base::internal)

  001ac	8b 74 24 64	 mov	 esi, DWORD PTR _this$[esp+92]
  001b0	8b d1		 mov	 edx, ecx
  001b2	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001b5	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  001ba	83 f8 40	 cmp	 eax, 64			; 00000040H
  001bd	0f 84 95 00 00
	00		 je	 $LN1@Iput

; 1490 : 			{	// put leading fill
; 1491 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  001c3	8b 4c 24 70	 mov	 ecx, DWORD PTR __Dest$[esp+96]
  001c7	8b 54 24 6c	 mov	 edx, DWORD PTR __Dest$[esp+92]
  001cb	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  001d0	74 28		 je	 SHORT $LN85@Iput
  001d2	8b 44 24 78	 mov	 eax, DWORD PTR __Fill$[esp+92]
  001d6	57		 push	 edi
  001d7	50		 push	 eax
  001d8	51		 push	 ecx
  001d9	52		 push	 edx
  001da	8d 44 24 24	 lea	 eax, DWORD PTR $T190081[esp+112]
  001de	50		 push	 eax
  001df	56		 push	 esi
  001e0	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  001e5	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e7	89 8c 24 84 00
	00 00		 mov	 DWORD PTR __Dest$[esp+116], ecx
  001ee	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001f1	83 c4 18	 add	 esp, 24			; 00000018H
  001f4	89 54 24 70	 mov	 DWORD PTR __Dest$[esp+96], edx

; 1492 : 			_Fillcount = 0;

  001f8	eb 5c		 jmp	 SHORT $LN94@Iput
$LN85@Iput:

; 1493 : 			}
; 1494 : 		else if (_Adjustfield == ios_base::internal)
; 1495 : 			{	// put internal fill
; 1496 : 			_Dest = _Putc(_Dest, _Buf, _Prefix);	// put prefix

  001fa	8b 44 24 14	 mov	 eax, DWORD PTR __Prefix$[esp+96]
  001fe	50		 push	 eax
  001ff	53		 push	 ebx
  00200	51		 push	 ecx
  00201	52		 push	 edx
  00202	8d 44 24 34	 lea	 eax, DWORD PTR $T190082[esp+112]
  00206	50		 push	 eax
  00207	56		 push	 esi
  00208	e8 00 00 00 00	 call	 ?_Putc@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putc
  0020d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0020f	89 8c 24 84 00
	00 00		 mov	 DWORD PTR __Dest$[esp+116], ecx

; 1497 : 			_Buf += _Prefix, _Count -= _Prefix;

  00216	8b 4c 24 2c	 mov	 ecx, DWORD PTR __Prefix$[esp+120]
  0021a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1498 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount), _Fillcount = 0;

  0021d	57		 push	 edi
  0021e	03 d9		 add	 ebx, ecx
  00220	2b e9		 sub	 ebp, ecx
  00222	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+120]
  00229	51		 push	 ecx
  0022a	89 94 24 90 00
	00 00		 mov	 DWORD PTR __Dest$[esp+128], edx
  00231	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00234	8b 00		 mov	 eax, DWORD PTR [eax]
  00236	52		 push	 edx
  00237	50		 push	 eax
  00238	8d 4c 24 3c	 lea	 ecx, DWORD PTR $T190083[esp+136]
  0023c	51		 push	 ecx
  0023d	56		 push	 esi
  0023e	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00243	8b 10		 mov	 edx, DWORD PTR [eax]
  00245	89 94 24 9c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], edx
  0024c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0024f	83 c4 30	 add	 esp, 48			; 00000030H
  00252	89 44 24 70	 mov	 DWORD PTR __Dest$[esp+96], eax
$LN94@Iput:
  00256	33 ff		 xor	 edi, edi
$LN1@Iput:

; 1499 : 			}
; 1500 : 
; 1501 : 		_Dest = _Putgrouped(_Dest, _Buf, _Count,
; 1502 : 			_Punct_fac.thousands_sep());	// put field

  00258	8b 4c 24 20	 mov	 ecx, DWORD PTR __Punct_fac$[esp+96]
  0025c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0025e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00261	ff d0		 call	 eax
  00263	8b 54 24 70	 mov	 edx, DWORD PTR __Dest$[esp+96]
  00267	88 44 24 20	 mov	 BYTE PTR $T190174[esp+96], al
  0026b	8b 4c 24 20	 mov	 ecx, DWORD PTR $T190174[esp+96]
  0026f	8b 44 24 6c	 mov	 eax, DWORD PTR __Dest$[esp+92]
  00273	51		 push	 ecx
  00274	55		 push	 ebp
  00275	53		 push	 ebx
  00276	52		 push	 edx
  00277	50		 push	 eax
  00278	8d 4c 24 38	 lea	 ecx, DWORD PTR $T190084[esp+116]
  0027c	51		 push	 ecx
  0027d	56		 push	 esi
  0027e	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDID@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Putgrouped
  00283	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1503 : 		_Iosbase.width(0);

  00285	8b 54 24 38	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+124]

; 1504 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00289	57		 push	 edi
  0028a	8b 7c 24 50	 mov	 edi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+128]
  0028e	89 8c 24 8c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+124], ecx
  00295	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00298	c7 42 18 00 00
	00 00		 mov	 DWORD PTR [edx+24], 0
  0029f	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR __Fill$[esp+124]
  002a6	52		 push	 edx
  002a7	50		 push	 eax
  002a8	51		 push	 ecx
  002a9	57		 push	 edi
  002aa	56		 push	 esi
  002ab	89 84 24 a4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+148], eax
  002b2	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  002b7	83 c4 34	 add	 esp, 52			; 00000034H
  002ba	83 7c 24 4c 10	 cmp	 DWORD PTR __Grouping$[esp+120], 16 ; 00000010H
  002bf	72 0d		 jb	 SHORT $LN86@Iput
  002c1	8b 44 24 38	 mov	 eax, DWORD PTR __Grouping$[esp+100]
  002c5	50		 push	 eax
  002c6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002cb	83 c4 04	 add	 esp, 4
$LN86@Iput:
  002ce	8b c7		 mov	 eax, edi

; 1505 : 		}

  002d0	8b 4c 24 54	 mov	 ecx, DWORD PTR __$EHRec$[esp+96]
  002d4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002db	59		 pop	 ecx
  002dc	5f		 pop	 edi
  002dd	5e		 pop	 esi
  002de	5d		 pop	 ebp
  002df	5b		 pop	 ebx
  002e0	8b 4c 24 3c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+76]
  002e4	33 cc		 xor	 ecx, esp
  002e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002eb	83 c4 4c	 add	 esp, 76			; 0000004cH
  002ee	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR $T190073[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 b0	 lea	 eax, DWORD PTR [edx-80]
  00017	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	83 c0 10	 add	 eax, 16			; 00000010H
  00024	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
PUBLIC	?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
_TEXT	SEGMENT
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::init, COMDAT
; _this$ = ecx

; 131  : 		{	// initialize with stream buffer pointer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 132  : 		_Init();	// initialize ios_base

  00003	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init

; 133  : 		_Mystrbuf = _Strbuf;

  00008	8b 44 24 08	 mov	 eax, DWORD PTR __Strbuf$[esp]

; 134  : 		_Tiestr = 0;
; 135  : 		_Fillch = widen(' ');

  0000c	6a 20		 push	 32			; 00000020H
  0000e	8b ce		 mov	 ecx, esi
  00010	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00013	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  0001a	e8 00 00 00 00	 call	 ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen

; 136  : 
; 137  : 		if (_Mystrbuf == 0)

  0001f	83 7e 28 00	 cmp	 DWORD PTR [esi+40], 0
  00023	88 46 30	 mov	 BYTE PTR [esi+48], al
  00026	75 10		 jne	 SHORT $LN11@init

; 138  : 			setstate(badbit);

  00028	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002b	83 c8 04	 or	 eax, 4
  0002e	6a 00		 push	 0
  00030	50		 push	 eax
  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN11@init:

; 139  : 
; 140  : 		if (_Isstd)

  00038	80 7c 24 0c 00	 cmp	 BYTE PTR __Isstd$[esp], 0
  0003d	74 0d		 je	 SHORT $LN2@init

; 141  : 			_Addstd(this);	// special handling for standard streams

  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  00045	83 c4 04	 add	 esp, 4
  00048	5e		 pop	 esi

; 144  : 		}

  00049	c2 08 00	 ret	 8
$LN2@init:

; 142  : 		else
; 143  : 		_Stdstr = 0;

  0004c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00053	5e		 pop	 esi

; 144  : 		}

  00054	c2 08 00	 ret	 8
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::init
_TEXT	ENDS
PUBLIC	?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init
; Function compile flags: /Ogtpy
;	COMDAT ?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z
_TEXT	SEGMENT
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init, COMDAT
; _this$ = ecx

; 131  : 		{	// initialize with stream buffer pointer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 132  : 		_Init();	// initialize ios_base

  00003	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init

; 133  : 		_Mystrbuf = _Strbuf;

  00008	8b 44 24 08	 mov	 eax, DWORD PTR __Strbuf$[esp]

; 134  : 		_Tiestr = 0;
; 135  : 		_Fillch = widen(' ');

  0000c	6a 20		 push	 32			; 00000020H
  0000e	8b ce		 mov	 ecx, esi
  00010	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00013	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  0001a	e8 00 00 00 00	 call	 ?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen

; 136  : 
; 137  : 		if (_Mystrbuf == 0)

  0001f	83 7e 28 00	 cmp	 DWORD PTR [esi+40], 0
  00023	66 89 46 30	 mov	 WORD PTR [esi+48], ax
  00027	75 10		 jne	 SHORT $LN11@init@2

; 138  : 			setstate(badbit);

  00029	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002c	83 c8 04	 or	 eax, 4
  0002f	6a 00		 push	 0
  00031	50		 push	 eax
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN11@init@2:

; 139  : 
; 140  : 		if (_Isstd)

  00039	80 7c 24 0c 00	 cmp	 BYTE PTR __Isstd$[esp], 0
  0003e	74 0d		 je	 SHORT $LN2@init@2

; 141  : 			_Addstd(this);	// special handling for standard streams

  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  00046	83 c4 04	 add	 esp, 4
  00049	5e		 pop	 esi

; 144  : 		}

  0004a	c2 08 00	 ret	 8
$LN2@init@2:

; 142  : 		else
; 143  : 		_Stdstr = 0;

  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00054	5e		 pop	 esi

; 144  : 		}

  00055	c2 08 00	 ret	 8
?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@1@0PAU2@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
$T190401 = -4						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Cat$190404 = 24					; size = 1
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@1@0PAU2@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	51		 push	 ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

  00001	8b 54 24 18	 mov	 edx, DWORD PTR __Cat$190404[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T190401[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T190401[esp+4]
  0000c	50		 push	 eax
  0000d	8b 44 24 1c	 mov	 eax, DWORD PTR __Ptr$[esp+4]
  00011	52		 push	 edx
  00012	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4c 24 20	 mov	 ecx, DWORD PTR __Last$[esp+16]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >

; 1142 : 		}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c2 14 00	 ret	 20			; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@1@0PAU2@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@@Z ; std::_Destroy_range<std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@@Z PROC ; std::_Destroy_range<std::allocator<HostDevice> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

  00000	56		 push	 esi

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 13		 je	 SHORT $LN5@Destroy_ra@2
  0000e	8b ff		 npad	 2
$LL7@Destroy_ra@2:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00017	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0001d	3b f7		 cmp	 esi, edi
  0001f	75 ef		 jne	 SHORT $LL7@Destroy_ra@2
$LN5@Destroy_ra@2:
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 226  : 	}

  00023	c3		 ret	 0
??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??$insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z ; std::list<unsigned long,std::allocator<unsigned long> >::insert<std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??$insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 8
__First$ = 16						; size = 8
$T190468 = 24						; size = 1
__Last$ = 24						; size = 8
??$insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::insert<std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1> >, COMDAT
; _this$ = ecx

; 731  : 		{	// insert [_First, _Last) at _Where
; 732  : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));

  00000	8b 44 24 14	 mov	 eax, DWORD PTR $T190468[esp-4]
  00004	8b 54 24 18	 mov	 edx, DWORD PTR __Last$[esp]
  00008	50		 push	 eax
  00009	8b 44 24 18	 mov	 eax, DWORD PTR __Last$[esp]
  0000d	52		 push	 edx
  0000e	8b 54 24 18	 mov	 edx, DWORD PTR __First$[esp+8]
  00012	50		 push	 eax
  00013	8b 44 24 18	 mov	 eax, DWORD PTR __First$[esp+8]
  00017	52		 push	 edx
  00018	8b 54 24 18	 mov	 edx, DWORD PTR __Where$[esp+16]
  0001c	50		 push	 eax
  0001d	8b 44 24 18	 mov	 eax, DWORD PTR __Where$[esp+16]
  00021	52		 push	 edx
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert<std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1> >

; 733  : 		}

  00028	c2 18 00	 ret	 24			; 00000018H
??$insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::insert<std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1> >
_TEXT	ENDS
PUBLIC	??0HostDevice@@QAE@XZ				; HostDevice::HostDevice
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0HostDevice@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0HostDevice@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0HostDevice@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0HostDevice@@QAE@XZ$2
__ehfuncinfo$??0HostDevice@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0HostDevice@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.h
xdata$x	ENDS
;	COMDAT ??0HostDevice@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0HostDevice@@QAE@XZ PROC				; HostDevice::HostDevice, COMDAT
; _this$ = ecx

; 475  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0HostDevice@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	33 c0		 xor	 eax, eax
  0002a	88 06		 mov	 BYTE PTR [esi], al
  0002c	88 46 01	 mov	 BYTE PTR [esi+1], al
  0002f	88 46 02	 mov	 BYTE PTR [esi+2], al
  00032	88 46 03	 mov	 BYTE PTR [esi+3], al
  00035	88 46 04	 mov	 BYTE PTR [esi+4], al
  00038	88 46 05	 mov	 BYTE PTR [esi+5], al
  0003b	88 46 06	 mov	 BYTE PTR [esi+6], al
  0003e	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00043	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  00046	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00049	88 46 0c	 mov	 BYTE PTR [esi+12], al
  0004c	33 d2		 xor	 edx, edx
  0004e	c7 46 3c 07 00
	00 00		 mov	 DWORD PTR [esi+60], 7
  00055	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00058	89 44 24 14	 mov	 DWORD PTR __$EHRec$[esp+32], eax
  0005c	66 89 56 28	 mov	 WORD PTR [esi+40], dx
  00060	89 4e 58	 mov	 DWORD PTR [esi+88], ecx
  00063	89 46 54	 mov	 DWORD PTR [esi+84], eax
  00066	88 46 44	 mov	 BYTE PTR [esi+68], al
  00069	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  0006c	c6 44 24 14 02	 mov	 BYTE PTR __$EHRec$[esp+32], 2
  00071	88 46 5c	 mov	 BYTE PTR [esi+92], al
  00074	89 46 60	 mov	 DWORD PTR [esi+96], eax
  00077	89 46 64	 mov	 DWORD PTR [esi+100], eax
  0007a	e8 00 00 00 00	 call	 ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >

; 476  : 	}

  0007f	8b c6		 mov	 eax, esi
  00081	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00085	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008c	59		 pop	 ecx
  0008d	5e		 pop	 esi
  0008e	83 c4 10	 add	 esp, 16			; 00000010H
  00091	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0HostDevice@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0HostDevice@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 24	 add	 ecx, 36			; 00000024H
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$??0HostDevice@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 40	 add	 ecx, 64			; 00000040H
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0HostDevice@@QAE@XZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00028	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0HostDevice@@QAE@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0HostDevice@@QAE@XZ ENDP				; HostDevice::HostDevice
PUBLIC	_TextInfoDialogBox
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
;	COMDAT _TextInfoDialogBox
_TEXT	SEGMENT
_nID$ = 8						; size = 4
_TextInfoDialogBox PROC					; COMDAT

; 2517 : 	return DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_TEXT_INFO_DIALOG_BOX_DLG), MainDlg, (DLGPROC) TextInfoDialogBoxDlgProc, (LPARAM) nID);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _nID$[esp-4]
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0000a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  00010	50		 push	 eax
  00011	68 00 00 00 00	 push	 OFFSET _TextInfoDialogBoxDlgProc@16
  00016	51		 push	 ecx
  00017	68 93 13 00 00	 push	 5011			; 00001393H
  0001c	52		 push	 edx
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 2518 : }

  00023	c3		 ret	 0
_TextInfoDialogBox ENDP
_TEXT	ENDS
PUBLIC	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
;	COMDAT ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::flush, COMDAT
; _this$ = ecx

; 550  : 		{	// flush output stream

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 551  : 		ios_base::iostate _State = ios_base::goodbit;
; 552  : 		if (!ios_base::fail() && _Myios::rdbuf()->pubsync() == -1)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00008	57		 push	 edi
  00009	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  0000c	33 ff		 xor	 edi, edi
  0000e	f6 40 08 06	 test	 BYTE PTR [eax+8], 6
  00012	75 16		 jne	 SHORT $LN1@flush
  00014	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00017	8b 10		 mov	 edx, DWORD PTR [eax]
  00019	8b c8		 mov	 ecx, eax
  0001b	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0001e	ff d0		 call	 eax
  00020	83 f8 ff	 cmp	 eax, -1
  00023	75 05		 jne	 SHORT $LN1@flush

; 553  : 			_State |= ios_base::badbit;	// sync failed

  00025	bf 04 00 00 00	 mov	 edi, 4
$LN1@flush:

; 554  : 		_Myios::setstate(_State);

  0002a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0002f	03 ce		 add	 ecx, esi
  00031	85 ff		 test	 edi, edi
  00033	74 16		 je	 SHORT $LN21@flush
  00035	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00038	0b c7		 or	 eax, edi
  0003a	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  0003e	75 03		 jne	 SHORT $LN19@flush
  00040	83 c8 04	 or	 eax, 4
$LN19@flush:
  00043	6a 00		 push	 0
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN21@flush:
  0004b	5f		 pop	 edi

; 555  : 		return (*this);

  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi

; 556  : 		}

  0004f	c3		 ret	 0
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::flush
_TEXT	ENDS
PUBLIC	?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
; Function compile flags: /Ogtpy
;	COMDAT ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush, COMDAT
; _this$ = ecx

; 550  : 		{	// flush output stream

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 551  : 		ios_base::iostate _State = ios_base::goodbit;
; 552  : 		if (!ios_base::fail() && _Myios::rdbuf()->pubsync() == -1)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00008	57		 push	 edi
  00009	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  0000c	33 ff		 xor	 edi, edi
  0000e	f6 40 08 06	 test	 BYTE PTR [eax+8], 6
  00012	75 16		 jne	 SHORT $LN1@flush@2
  00014	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00017	8b 10		 mov	 edx, DWORD PTR [eax]
  00019	8b c8		 mov	 ecx, eax
  0001b	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0001e	ff d0		 call	 eax
  00020	83 f8 ff	 cmp	 eax, -1
  00023	75 05		 jne	 SHORT $LN1@flush@2

; 553  : 			_State |= ios_base::badbit;	// sync failed

  00025	bf 04 00 00 00	 mov	 edi, 4
$LN1@flush@2:

; 554  : 		_Myios::setstate(_State);

  0002a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0002f	03 ce		 add	 ecx, esi
  00031	85 ff		 test	 edi, edi
  00033	74 16		 je	 SHORT $LN21@flush@2
  00035	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00038	0b c7		 or	 eax, edi
  0003a	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  0003e	75 03		 jne	 SHORT $LN19@flush@2
  00040	83 c8 04	 or	 eax, 4
$LN19@flush@2:
  00043	6a 00		 push	 0
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN21@flush@2:
  0004b	5f		 pop	 edi

; 555  : 		return (*this);

  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi

; 556  : 		}

  0004f	c3		 ret	 0
?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
_TEXT	ENDS
PUBLIC	??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$5
__unwindtable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T191181 = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T191321 = 8						; size = 1
__Cat$191325 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
  00030	6a 04		 push	 4
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	83 c4 04	 add	 esp, 4
  0003a	85 c0		 test	 eax, eax
  0003c	74 04		 je	 SHORT $LN19@vector@2
  0003e	89 30		 mov	 DWORD PTR [eax], esi
  00040	eb 02		 jmp	 SHORT $LN20@vector@2
$LN19@vector@2:
  00042	33 c0		 xor	 eax, eax
$LN20@vector@2:
  00044	89 06		 mov	 DWORD PTR [esi], eax

; 501  : 		if (_Buy(_Right.size()))

  00046	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00049	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  0004c	2b 4b 0c	 sub	 ecx, DWORD PTR [ebx+12]
  0004f	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00054	f7 e9		 imul	 ecx
  00056	c1 fa 06	 sar	 edx, 6
  00059	8b fa		 mov	 edi, edx
  0005b	b8 00 00 00 00	 mov	 eax, 0
  00060	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00063	03 fa		 add	 edi, edx
  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0006c	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0006f	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00072	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00075	74 6d		 je	 SHORT $LN8@vector@2
  00077	81 ff e1 e1 e1
	01		 cmp	 edi, 31580641		; 01e1e1e1H
  0007d	76 05		 jbe	 SHORT $LN46@vector@2
  0007f	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen
$LN46@vector@2:
  00084	50		 push	 eax
  00085	57		 push	 edi
  00086	e8 00 00 00 00	 call	 ??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ; std::_Allocate<HostDevice>
  0008b	69 ff 88 00 00
	00		 imul	 edi, 136		; 00000088H
  00091	03 f8		 add	 edi, eax
  00093	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00096	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00099	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 502  : 			_TRY_BEGIN
; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

  0009c	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0009f	83 c4 08	 add	 esp, 8
  000a2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000a6	89 45 ec	 mov	 DWORD PTR $T191181[ebp], eax
  000a9	39 43 0c	 cmp	 DWORD PTR [ebx+12], eax
  000ac	76 05		 jbe	 SHORT $LN63@vector@2
  000ae	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN63@vector@2:
  000b3	8b 7b 0c	 mov	 edi, DWORD PTR [ebx+12]
  000b6	3b 7b 10	 cmp	 edi, DWORD PTR [ebx+16]
  000b9	76 05		 jbe	 SHORT $LN80@vector@2
  000bb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN80@vector@2:
  000c0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000c3	c6 45 08 00	 mov	 BYTE PTR $T191321[ebp], 0
  000c7	8b 4d 08	 mov	 ecx, DWORD PTR $T191321[ebp]
  000ca	8b 55 08	 mov	 edx, DWORD PTR __Cat$191325[ebp]
  000cd	51		 push	 ecx
  000ce	52		 push	 edx
  000cf	8b 55 ec	 mov	 edx, DWORD PTR $T191181[ebp]
  000d2	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  000d5	51		 push	 ecx
  000d6	50		 push	 eax
  000d7	52		 push	 edx
  000d8	57		 push	 edi
  000d9	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >
  000de	83 c4 18	 add	 esp, 24			; 00000018H
  000e1	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN8@vector@2:

; 507  : 			_CATCH_END
; 508  : 		}

  000e4	8b c6		 mov	 eax, esi
  000e6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f0	59		 pop	 ecx
  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c2 04 00	 ret	 4
__catch$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

  000fa	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000fd	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy

; 506  : 			_RERAISE;

  00102	6a 00		 push	 0
  00104	6a 00		 push	 0
  00106	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN114@vector@2:
  0010b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::clear, COMDAT
; _this$ = ecx

; 965  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 966  : 
; 967  :  #if _HAS_ITERATOR_DEBUGGING
; 968  : 		this->_Orphan_ptr(*this, 0);
; 969  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 970  : 
; 971  : 		_Erase(_Root());

  00003	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00006	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00009	51		 push	 ecx
  0000a	8b ce		 mov	 ecx, esi
  0000c	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Erase

; 972  : 		_Root() = _Myhead, _Mysize = 0;

  00011	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00014	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 973  : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

  00017	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0001a	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00021	89 00		 mov	 DWORD PTR [eax], eax
  00023	8b 76 18	 mov	 esi, DWORD PTR [esi+24]
  00026	89 76 08	 mov	 DWORD PTR [esi+8], esi
  00029	5e		 pop	 esi

; 974  : 		}

  0002a	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::clear
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

  00000	56		 push	 esi

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 13		 je	 SHORT $LN7@Destroy
  0000e	8b ff		 npad	 2
$LL9@Destroy:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00017	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0001d	3b f7		 cmp	 esi, edi
  0001f	75 ef		 jne	 SHORT $LL9@Destroy
$LN7@Destroy:
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 1120 : 		}

  00023	c2 08 00	 ret	 8
?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy
_TEXT	ENDS
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 95   : 			{	// construct locking and testing stream

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f9		 mov	 edi, ecx
  00025	89 7c 24 0c	 mov	 DWORD PTR _this$[esp+28], edi
  00029	8b 74 24 20	 mov	 esi, DWORD PTR __Ostr$[esp+24]
  0002d	89 37		 mov	 DWORD PTR [edi], esi
  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00034	8b 44 31 28	 mov	 eax, DWORD PTR [ecx+esi+40]
  00038	85 c0		 test	 eax, eax
  0003a	74 08		 je	 SHORT $LN12@sentry
  0003c	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0003f	e8 00 00 00 00	 call	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
$LN12@sentry:

; 96   : 			if (_Ostr.good() && _Ostr.tie() != 0)

  00044	8b 16		 mov	 edx, DWORD PTR [esi]
  00046	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00049	03 c6		 add	 eax, esi
  0004b	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0004f	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+36], 0
  00057	75 0e		 jne	 SHORT $LN1@sentry
  00059	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  0005c	85 c0		 test	 eax, eax
  0005e	74 07		 je	 SHORT $LN1@sentry

; 97   : 				_Ostr.tie()->flush();

  00060	8b c8		 mov	 ecx, eax
  00062	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN1@sentry:

; 98   : 			_Ok = _Ostr.good();	// store test only after flushing tie

  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006c	83 7c 32 08 00	 cmp	 DWORD PTR [edx+esi+8], 0
  00071	0f 94 c0	 sete	 al
  00074	88 47 04	 mov	 BYTE PTR [edi+4], al

; 99   : 			}

  00077	8b c7		 mov	 eax, edi
  00079	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0007d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00084	59		 pop	 ecx
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	83 c4 10	 add	 esp, 16			; 00000010H
  0008a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??_C@_02EAOCLKAK@ld?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02EAOCLKAK@ld?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02EAOCLKAK@ld?$AA@ DB 'ld', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 6
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1153 : 		{	// put formatted long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0000e	53		 push	 ebx
  0000f	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]

; 1154 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1155 : 		char _Buf[_Buf_size], _Fmt[6];
; 1156 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1157 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "ld",
; 1158 : 				_Iosbase.flags()), _Val)));

  00013	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  0001c	8b f1		 mov	 esi, ecx
  0001e	8b 4c 24 70	 mov	 ecx, DWORD PTR __Val$[esp+84]
  00022	51		 push	 ecx
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02EAOCLKAK@ld?$AA@
  00029	8d 54 24 18	 lea	 edx, DWORD PTR __Fmt$[esp+100]
  0002d	52		 push	 edx
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	50		 push	 eax
  00038	8d 44 24 1c	 lea	 eax, DWORD PTR __Buf$[esp+96]
  0003c	6a 40		 push	 64			; 00000040H
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _sprintf_s
  00044	8b 54 24 7c	 mov	 edx, DWORD PTR __Fill$[esp+100]
  00048	50		 push	 eax
  00049	8b 44 24 78	 mov	 eax, DWORD PTR __Dest$[esp+108]
  0004d	8d 4c 24 28	 lea	 ecx, DWORD PTR __Buf$[esp+108]
  00051	51		 push	 ecx
  00052	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  00056	52		 push	 edx
  00057	53		 push	 ebx
  00058	50		 push	 eax
  00059	51		 push	 ecx
  0005a	57		 push	 edi
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1159 : 		}

  00061	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+136]
  00068	83 c4 30	 add	 esp, 48			; 00000030H
  0006b	8b c7		 mov	 eax, edi
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	33 cc		 xor	 ecx, esp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	83 c4 4c	 add	 esp, 76			; 0000004cH
  0007a	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02BDDLJJBK@lu?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02BDDLJJBK@lu?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02BDDLJJBK@lu?$AA@ DB 'lu', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 6
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1163 : 		{	// put formatted unsigned long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0000e	53		 push	 ebx
  0000f	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]

; 1164 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1165 : 		char _Buf[_Buf_size], _Fmt[6];
; 1166 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1167 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "lu",
; 1168 : 				_Iosbase.flags()), _Val)));

  00013	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  0001c	8b f1		 mov	 esi, ecx
  0001e	8b 4c 24 70	 mov	 ecx, DWORD PTR __Val$[esp+84]
  00022	51		 push	 ecx
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02BDDLJJBK@lu?$AA@
  00029	8d 54 24 18	 lea	 edx, DWORD PTR __Fmt$[esp+100]
  0002d	52		 push	 edx
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	50		 push	 eax
  00038	8d 44 24 1c	 lea	 eax, DWORD PTR __Buf$[esp+96]
  0003c	6a 40		 push	 64			; 00000040H
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _sprintf_s
  00044	8b 54 24 7c	 mov	 edx, DWORD PTR __Fill$[esp+100]
  00048	50		 push	 eax
  00049	8b 44 24 78	 mov	 eax, DWORD PTR __Dest$[esp+108]
  0004d	8d 4c 24 28	 lea	 ecx, DWORD PTR __Buf$[esp+108]
  00051	51		 push	 ecx
  00052	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  00056	52		 push	 edx
  00057	53		 push	 ebx
  00058	50		 push	 eax
  00059	51		 push	 ecx
  0005a	57		 push	 edi
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1169 : 		}

  00061	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+136]
  00068	83 c4 30	 add	 esp, 48			; 00000030H
  0006b	8b c7		 mov	 eax, edi
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	33 cc		 xor	 ecx, esp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	83 c4 4c	 add	 esp, 76			; 0000004cH
  0007a	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02HIKPPMOK@Ld?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02HIKPPMOK@Ld?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02HIKPPMOK@Ld?$AA@ DB 'Ld', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 8
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1174 : 		{	// put formatted long long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax

; 1175 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1176 : 		char _Buf[_Buf_size], _Fmt[8];
; 1177 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1178 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "Ld",
; 1179 : 				_Iosbase.flags()), _Val)));

  0000e	8b 54 24 64	 mov	 edx, DWORD PTR __Val$[esp+72]
  00012	53		 push	 ebx
  00013	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]
  00017	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  00020	8b f1		 mov	 esi, ecx
  00022	8b 4c 24 74	 mov	 ecx, DWORD PTR __Val$[esp+88]
  00026	51		 push	 ecx
  00027	52		 push	 edx
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_02HIKPPMOK@Ld?$AA@
  0002e	8d 44 24 1c	 lea	 eax, DWORD PTR __Fmt$[esp+104]
  00032	50		 push	 eax
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00039	83 c4 10	 add	 esp, 16			; 00000010H
  0003c	50		 push	 eax
  0003d	8d 4c 24 20	 lea	 ecx, DWORD PTR __Buf$[esp+100]
  00041	6a 40		 push	 64			; 00000040H
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 _sprintf_s
  00049	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  0004d	50		 push	 eax
  0004e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR __Fill$[esp+108]
  00055	8d 54 24 2c	 lea	 edx, DWORD PTR __Buf$[esp+112]
  00059	52		 push	 edx
  0005a	8b 54 24 7c	 mov	 edx, DWORD PTR __Dest$[esp+112]
  0005e	50		 push	 eax
  0005f	53		 push	 ebx
  00060	51		 push	 ecx
  00061	52		 push	 edx
  00062	57		 push	 edi
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1180 : 		}

  00069	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+140]
  00070	83 c4 34	 add	 esp, 52			; 00000034H
  00073	8b c7		 mov	 eax, edi
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	83 c4 4c	 add	 esp, 76			; 0000004cH
  00082	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02CLHGNPPK@Lu?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02CLHGNPPK@Lu?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02CLHGNPPK@Lu?$AA@ DB 'Lu', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 8
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1184 : 		{	// put formatted unsigned long long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax

; 1185 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1186 : 		char _Buf[_Buf_size], _Fmt[8];
; 1187 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1188 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "Lu",
; 1189 : 				_Iosbase.flags()), _Val)));

  0000e	8b 54 24 64	 mov	 edx, DWORD PTR __Val$[esp+72]
  00012	53		 push	 ebx
  00013	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]
  00017	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  00020	8b f1		 mov	 esi, ecx
  00022	8b 4c 24 74	 mov	 ecx, DWORD PTR __Val$[esp+88]
  00026	51		 push	 ecx
  00027	52		 push	 edx
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_02CLHGNPPK@Lu?$AA@
  0002e	8d 44 24 1c	 lea	 eax, DWORD PTR __Fmt$[esp+104]
  00032	50		 push	 eax
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00039	83 c4 10	 add	 esp, 16			; 00000010H
  0003c	50		 push	 eax
  0003d	8d 4c 24 20	 lea	 ecx, DWORD PTR __Buf$[esp+100]
  00041	6a 40		 push	 64			; 00000040H
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 _sprintf_s
  00049	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  0004d	50		 push	 eax
  0004e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR __Fill$[esp+108]
  00055	8d 54 24 2c	 lea	 edx, DWORD PTR __Buf$[esp+112]
  00059	52		 push	 edx
  0005a	8b 54 24 7c	 mov	 edx, DWORD PTR __Dest$[esp+112]
  0005e	50		 push	 eax
  0005f	53		 push	 ebx
  00060	51		 push	 ecx
  00061	52		 push	 edx
  00062	57		 push	 edi
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1190 : 		}

  00069	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+140]
  00070	83 c4 34	 add	 esp, 52			; 00000034H
  00073	8b c7		 mov	 eax, edi
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	83 c4 4c	 add	 esp, 76			; 0000004cH
  00082	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	__real@38aa95a5b7f87a0f
PUBLIC	__real@4202a05f20000000
PUBLIC	__real@4733426172c74d82
PUBLIC	__real@3fe0000000000000
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
;	COMDAT __real@38aa95a5b7f87a0f
CONST	SEGMENT
__real@38aa95a5b7f87a0f DQ 038aa95a5b7f87a0fr	; 1e-035
CONST	ENDS
;	COMDAT __real@4202a05f20000000
CONST	SEGMENT
__real@4202a05f20000000 DQ 04202a05f20000000r	; 1e+010
CONST	ENDS
;	COMDAT __real@4733426172c74d82
CONST	SEGMENT
__real@4733426172c74d82 DQ 04733426172c74d82r	; 1e+035
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
_TEXT	SEGMENT
__Signed$145626 = -129					; size = 1
_this$ = -128						; size = 4
___$ReturnUdt$GSCopy$ = -124				; size = 4
__Fmt$ = -120						; size = 8
__Buf$ = -112						; size = 108
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1195 : 		{	// put formatted double to _Dest

  00000	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 80 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+132], eax
  00014	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+128]
  0001b	53		 push	 ebx
  0001c	55		 push	 ebp
  0001d	8b ac 24 9c 00
	00 00		 mov	 ebp, DWORD PTR __Iosbase$[esp+136]

; 1227 : 			}
; 1228 : 
; 1229 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1230 : 			_Beforepoint, _Afterpoint, _Precision,
; 1231 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1232 : 					_Significance, _Val)));	// convert and put

  00024	89 44 24 10	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+140], eax
  00028	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0002b	56		 push	 esi
  0002c	57		 push	 edi
  0002d	89 4c 24 14	 mov	 DWORD PTR _this$[esp+148], ecx
  00031	85 c0		 test	 eax, eax
  00033	7f 0e		 jg	 SHORT $LN13@do_put@2

; 1196 : 		const size_t _Buf_size = _MAX_EXP_DIG + _MAX_SIG_DIG + 64;
; 1197 : 		char _Buf[_Buf_size], _Fmt[8];
; 1198 : 		streamsize _Precision = _Iosbase.precision() <= 0
; 1199 : 			&& !(_Iosbase.flags() & ios_base::fixed)
; 1200 : 				? 6 : _Iosbase.precision();	// desired precision

  00035	f7 45 10 00 20
	00 00		 test	 DWORD PTR [ebp+16], 8192 ; 00002000H
  0003c	75 05		 jne	 SHORT $LN13@do_put@2
  0003e	b8 06 00 00 00	 mov	 eax, 6
$LN13@do_put@2:
  00043	8b f0		 mov	 esi, eax

; 1201 : 		int _Significance = _MAX_SIG_DIG < _Precision
; 1202 : 			? _MAX_SIG_DIG : (int)_Precision;	// actual sprintf precision

  00045	83 fe 24	 cmp	 esi, 36			; 00000024H
  00048	ba 24 00 00 00	 mov	 edx, 36			; 00000024H
  0004d	7f 02		 jg	 SHORT $LN16@do_put@2
  0004f	8b d6		 mov	 edx, esi
$LN16@do_put@2:

; 1203 : 		_Precision -= _Significance;
; 1204 : 		size_t _Beforepoint = 0;	// zeros to add before decimal point
; 1205 : 		size_t _Afterpoint = 0;	// zeros to add after decimal point
; 1206 : 
; 1207 : 		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed
; 1208 : 			&& _Val * 0.5 != _Val)	// skip -Inf, 0, Inf

  00051	8b 4d 10	 mov	 ecx, DWORD PTR [ebp+16]
  00054	dd 84 24 ac 00
	00 00		 fld	 QWORD PTR __Val$[esp+144]
  0005b	8b c1		 mov	 eax, ecx
  0005d	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  00062	2b f2		 sub	 esi, edx
  00064	33 db		 xor	 ebx, ebx
  00066	33 ff		 xor	 edi, edi
  00068	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  0006d	0f 85 ad 00 00
	00		 jne	 $LN1@do_put@2
  00073	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe0000000000000
  00079	d8 c9		 fmul	 ST(0), ST(1)
  0007b	dd e9		 fucomp	 ST(1)
  0007d	df e0		 fnstsw	 ax
  0007f	f6 c4 44	 test	 ah, 68			; 00000044H
  00082	0f 8b 98 00 00
	00		 jnp	 $LN1@do_put@2

; 1209 : 			{	// scale silly fixed-point value
; 1210 : 			bool _Signed = _Val < 0;

  00088	d9 ee		 fldz
  0008a	d8 d1		 fcom	 ST(1)
  0008c	df e0		 fnstsw	 ax
  0008e	f6 c4 41	 test	 ah, 65			; 00000041H
  00091	75 0b		 jne	 SHORT $LN17@do_put@2

; 1211 : 			if (_Signed)
; 1212 : 				_Val = -_Val;

  00093	d9 c9		 fxch	 ST(1)
  00095	c6 44 24 13 01	 mov	 BYTE PTR __Signed$145626[esp+148], 1
  0009a	d9 e0		 fchs
  0009c	eb 06		 jmp	 SHORT $LN9@do_put@2
$LN17@do_put@2:

; 1209 : 			{	// scale silly fixed-point value
; 1210 : 			bool _Signed = _Val < 0;

  0009e	88 5c 24 13	 mov	 BYTE PTR __Signed$145626[esp+148], bl

; 1226 : 				_Val = -_Val;

  000a2	d9 c9		 fxch	 ST(1)
$LN9@do_put@2:
  000a4	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4733426172c74d82
  000aa	d8 d1		 fcom	 ST(1)
  000ac	df e0		 fnstsw	 ax
  000ae	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4202a05f20000000
  000b4	f6 c4 41	 test	 ah, 65			; 00000041H
  000b7	7b 06		 jnp	 SHORT $LN8@do_put@2
$LN52@do_put@2:

; 1213 : 
; 1214 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000b9	dd d9		 fstp	 ST(1)
  000bb	eb 1c		 jmp	 SHORT $LN6@do_put@2
$LN58@do_put@2:
  000bd	d9 c9		 fxch	 ST(1)
$LN8@do_put@2:
  000bf	81 fb 88 13 00
	00		 cmp	 ebx, 5000		; 00001388H
  000c5	73 f2		 jae	 SHORT $LN52@do_put@2

; 1215 : 				_Val /= 1e10;	// drop 10 zeros before decimal point

  000c7	dc fa		 fdiv	 ST(2), ST(0)
  000c9	83 c3 0a	 add	 ebx, 10			; 0000000aH
  000cc	d9 c9		 fxch	 ST(1)
  000ce	d8 d2		 fcom	 ST(2)
  000d0	df e0		 fnstsw	 ax
  000d2	f6 c4 41	 test	 ah, 65			; 00000041H
  000d5	7b e6		 jnp	 SHORT $LN58@do_put@2

; 1213 : 
; 1214 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000d7	dd d8		 fstp	 ST(0)
$LN6@do_put@2:

; 1216 : 
; 1217 : 			if (0 < _Val)

  000d9	d9 ca		 fxch	 ST(2)
  000db	d8 d9		 fcomp	 ST(1)
  000dd	df e0		 fnstsw	 ax
  000df	f6 c4 05	 test	 ah, 5
  000e2	7a 31		 jp	 SHORT $LN60@do_put@2

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000e4	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  000e7	7c 2c		 jl	 SHORT $LN60@do_put@2
  000e9	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@38aa95a5b7f87a0f
  000ef	eb 02		 jmp	 SHORT $LN4@do_put@2
$LN73@do_put@2:
  000f1	d9 c9		 fxch	 ST(1)
$LN4@do_put@2:
  000f3	d8 d1		 fcom	 ST(1)
  000f5	df e0		 fnstsw	 ax
  000f7	f6 c4 01	 test	 ah, 1
  000fa	75 5e		 jne	 SHORT $LN67@do_put@2
  000fc	81 ff 88 13 00
	00		 cmp	 edi, 5000		; 00001388H
  00102	73 56		 jae	 SHORT $LN67@do_put@2

; 1220 : 					{	// drop 10 zeros after decimal point
; 1221 : 					_Val *= 1e10;
; 1222 : 					_Precision -= 10;

  00104	83 ee 0a	 sub	 esi, 10			; 0000000aH
  00107	d9 c9		 fxch	 ST(1)
  00109	83 c7 0a	 add	 edi, 10			; 0000000aH
  0010c	d8 ca		 fmul	 ST(0), ST(2)
  0010e	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00111	7d de		 jge	 SHORT $LN73@do_put@2

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  00113	dd d9		 fstp	 ST(1)
$LN60@do_put@2:

; 1223 : 					}
; 1224 : 
; 1225 : 			if (_Signed)

  00115	80 7c 24 13 00	 cmp	 BYTE PTR __Signed$145626[esp+148], 0
  0011a	dd d9		 fstp	 ST(1)
  0011c	74 02		 je	 SHORT $LN1@do_put@2

; 1226 : 				_Val = -_Val;

  0011e	d9 e0		 fchs
$LN1@do_put@2:

; 1227 : 			}
; 1228 : 
; 1229 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1230 : 			_Beforepoint, _Afterpoint, _Precision,
; 1231 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1232 : 					_Significance, _Val)));	// convert and put

  00120	c6 44 24 1c 25	 mov	 BYTE PTR __Fmt$[esp+148], 37 ; 00000025H
  00125	8d 44 24 1d	 lea	 eax, DWORD PTR __Fmt$[esp+149]
  00129	f6 c1 20	 test	 cl, 32			; 00000020H
  0012c	74 09		 je	 SHORT $LN31@do_put@2
  0012e	c6 44 24 1d 2b	 mov	 BYTE PTR __Fmt$[esp+149], 43 ; 0000002bH
  00133	8d 44 24 1e	 lea	 eax, DWORD PTR __Fmt$[esp+150]
$LN31@do_put@2:
  00137	f6 c1 10	 test	 cl, 16			; 00000010H
  0013a	74 04		 je	 SHORT $LN30@do_put@2
  0013c	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  0013f	40		 inc	 eax
$LN30@do_put@2:
  00140	c6 00 2e	 mov	 BYTE PTR [eax], 46	; 0000002eH
  00143	40		 inc	 eax
  00144	c6 00 2a	 mov	 BYTE PTR [eax], 42	; 0000002aH
  00147	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H
  0014d	40		 inc	 eax
  0014e	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  00154	75 08		 jne	 SHORT $LN36@do_put@2
  00156	b1 66		 mov	 cl, 102			; 00000066H
  00158	eb 1d		 jmp	 SHORT $LN35@do_put@2
$LN67@do_put@2:

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  0015a	dd d8		 fstp	 ST(0)
  0015c	eb b7		 jmp	 SHORT $LN60@do_put@2

; 1227 : 			}
; 1228 : 
; 1229 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1230 : 			_Beforepoint, _Afterpoint, _Precision,
; 1231 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1232 : 					_Significance, _Val)));	// convert and put

$LN36@do_put@2:
  0015e	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  00164	75 04		 jne	 SHORT $LN34@do_put@2
  00166	b1 61		 mov	 cl, 97			; 00000061H
  00168	eb 0d		 jmp	 SHORT $LN35@do_put@2
$LN34@do_put@2:
  0016a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00170	0f 95 c1	 setne	 cl
  00173	8d 4c 09 65	 lea	 ecx, DWORD PTR [ecx+ecx+101]
$LN35@do_put@2:
  00177	83 ec 08	 sub	 esp, 8
  0017a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0017d	52		 push	 edx
  0017e	88 08		 mov	 BYTE PTR [eax], cl
  00180	8d 4c 24 28	 lea	 ecx, DWORD PTR __Fmt$[esp+160]
  00184	51		 push	 ecx
  00185	8d 54 24 34	 lea	 edx, DWORD PTR __Buf$[esp+164]
  00189	6a 6c		 push	 108			; 0000006cH
  0018b	52		 push	 edx
  0018c	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
  00190	e8 00 00 00 00	 call	 _sprintf_s
  00195	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+168]
  0019c	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+172]
  001a3	50		 push	 eax
  001a4	56		 push	 esi
  001a5	8b 74 24 38	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+180]
  001a9	57		 push	 edi
  001aa	53		 push	 ebx
  001ab	8d 44 24 4c	 lea	 eax, DWORD PTR __Buf$[esp+188]
  001af	50		 push	 eax
  001b0	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+188]
  001b7	51		 push	 ecx
  001b8	8b 4c 24 44	 mov	 ecx, DWORD PTR _this$[esp+196]
  001bc	55		 push	 ebp
  001bd	52		 push	 edx
  001be	50		 push	 eax
  001bf	56		 push	 esi
  001c0	51		 push	 ecx
  001c1	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput

; 1233 : 		}

  001c6	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+216]
  001cd	83 c4 44	 add	 esp, 68			; 00000044H
  001d0	5f		 pop	 edi
  001d1	8b c6		 mov	 eax, esi
  001d3	5e		 pop	 esi
  001d4	5d		 pop	 ebp
  001d5	5b		 pop	 ebx
  001d6	33 cc		 xor	 ecx, esp
  001d8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001dd	81 c4 84 00 00
	00		 add	 esp, 132		; 00000084H
  001e3	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
_TEXT	SEGMENT
__Signed$145654 = -129					; size = 1
_this$ = -128						; size = 4
___$ReturnUdt$GSCopy$ = -124				; size = 4
__Fmt$ = -120						; size = 8
__Buf$ = -112						; size = 108
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1237 : 		{	// put formatted long double to _Dest

  00000	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 80 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+132], eax
  00014	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+128]
  0001b	53		 push	 ebx
  0001c	55		 push	 ebp
  0001d	8b ac 24 9c 00
	00 00		 mov	 ebp, DWORD PTR __Iosbase$[esp+136]

; 1268 : 			}
; 1269 : 
; 1270 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1271 : 			_Beforepoint, _Afterpoint, _Precision,
; 1272 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 'L', _Iosbase.flags()),
; 1273 : 					_Significance, _Val)));	// convert and put

  00024	89 44 24 10	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+140], eax
  00028	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0002b	56		 push	 esi
  0002c	57		 push	 edi
  0002d	89 4c 24 14	 mov	 DWORD PTR _this$[esp+148], ecx
  00031	85 c0		 test	 eax, eax
  00033	7f 0e		 jg	 SHORT $LN13@do_put@3

; 1238 : 		const size_t _Buf_size = _MAX_EXP_DIG + _MAX_SIG_DIG + 64;
; 1239 : 		char _Buf[_Buf_size], _Fmt[8];
; 1240 : 		streamsize _Precision = _Iosbase.precision() <= 0
; 1241 : 			&& !(_Iosbase.flags() & ios_base::fixed)
; 1242 : 				? 6 : _Iosbase.precision();	// desired precision

  00035	f7 45 10 00 20
	00 00		 test	 DWORD PTR [ebp+16], 8192 ; 00002000H
  0003c	75 05		 jne	 SHORT $LN13@do_put@3
  0003e	b8 06 00 00 00	 mov	 eax, 6
$LN13@do_put@3:
  00043	8b f0		 mov	 esi, eax

; 1243 : 		int _Significance = _MAX_SIG_DIG < _Precision
; 1244 : 			? _MAX_SIG_DIG : (int)_Precision;	// actual sprintf precision

  00045	83 fe 24	 cmp	 esi, 36			; 00000024H
  00048	ba 24 00 00 00	 mov	 edx, 36			; 00000024H
  0004d	7f 02		 jg	 SHORT $LN16@do_put@3
  0004f	8b d6		 mov	 edx, esi
$LN16@do_put@3:

; 1245 : 		_Precision -= _Significance;
; 1246 : 		size_t _Beforepoint = 0;	// zeros to add before decimal point
; 1247 : 		size_t _Afterpoint = 0;	// zeros to add after decimal point
; 1248 : 
; 1249 : 		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed)

  00051	8b 4d 10	 mov	 ecx, DWORD PTR [ebp+16]
  00054	8b c1		 mov	 eax, ecx
  00056	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  0005b	2b f2		 sub	 esi, edx
  0005d	33 db		 xor	 ebx, ebx
  0005f	33 ff		 xor	 edi, edi
  00061	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  00066	0f 85 a1 00 00
	00		 jne	 $LN43@do_put@3

; 1250 : 			{	// scale silly fixed-point value
; 1251 : 			bool _Signed = _Val < 0;

  0006c	d9 ee		 fldz
  0006e	dd 84 24 ac 00
	00 00		 fld	 QWORD PTR __Val$[esp+144]
  00075	d8 d1		 fcom	 ST(1)
  00077	df e0		 fnstsw	 ax
  00079	f6 c4 05	 test	 ah, 5
  0007c	7a 20		 jp	 SHORT $LN17@do_put@3
  0007e	c6 44 24 13 01	 mov	 BYTE PTR __Signed$145654[esp+148], 1

; 1253 : 				_Val = -_Val;

  00083	d9 e0		 fchs
$LN9@do_put@3:

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  00085	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4733426172c74d82
  0008b	d8 d1		 fcom	 ST(1)
  0008d	df e0		 fnstsw	 ax
  0008f	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4202a05f20000000
  00095	f6 c4 41	 test	 ah, 65			; 00000041H
  00098	7b 0c		 jnp	 SHORT $LN8@do_put@3
$LN49@do_put@3:
  0009a	dd d9		 fstp	 ST(1)
  0009c	eb 22		 jmp	 SHORT $LN6@do_put@3
$LN17@do_put@3:

; 1250 : 			{	// scale silly fixed-point value
; 1251 : 			bool _Signed = _Val < 0;

  0009e	88 5c 24 13	 mov	 BYTE PTR __Signed$145654[esp+148], bl

; 1252 : 			if (_Signed)

  000a2	eb e1		 jmp	 SHORT $LN9@do_put@3
$LN55@do_put@3:

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000a4	d9 c9		 fxch	 ST(1)
$LN8@do_put@3:
  000a6	81 fb 88 13 00
	00		 cmp	 ebx, 5000		; 00001388H
  000ac	73 ec		 jae	 SHORT $LN49@do_put@3

; 1256 : 				_Val /= 1e10;	// drop 10 zeros before decimal point

  000ae	dc fa		 fdiv	 ST(2), ST(0)
  000b0	83 c3 0a	 add	 ebx, 10			; 0000000aH
  000b3	d9 c9		 fxch	 ST(1)
  000b5	d8 d2		 fcom	 ST(2)
  000b7	df e0		 fnstsw	 ax
  000b9	f6 c4 41	 test	 ah, 65			; 00000041H
  000bc	7b e6		 jnp	 SHORT $LN55@do_put@3

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000be	dd d8		 fstp	 ST(0)
$LN6@do_put@3:

; 1257 : 
; 1258 : 			if (0 < _Val)

  000c0	d9 ca		 fxch	 ST(2)
  000c2	d8 d9		 fcomp	 ST(1)
  000c4	df e0		 fnstsw	 ax
  000c6	f6 c4 05	 test	 ah, 5
  000c9	7a 31		 jp	 SHORT $LN57@do_put@3

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000cb	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  000ce	7c 2c		 jl	 SHORT $LN57@do_put@3
  000d0	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@38aa95a5b7f87a0f
  000d6	eb 02		 jmp	 SHORT $LN4@do_put@3
$LN70@do_put@3:
  000d8	d9 c9		 fxch	 ST(1)
$LN4@do_put@3:
  000da	d8 d1		 fcom	 ST(1)
  000dc	df e0		 fnstsw	 ax
  000de	f6 c4 01	 test	 ah, 1
  000e1	75 26		 jne	 SHORT $LN64@do_put@3
  000e3	81 ff 88 13 00
	00		 cmp	 edi, 5000		; 00001388H
  000e9	73 1e		 jae	 SHORT $LN64@do_put@3

; 1261 : 					{	// drop 10 zeros after decimal point
; 1262 : 					_Val *= 1e10;
; 1263 : 					_Precision -= 10;

  000eb	83 ee 0a	 sub	 esi, 10			; 0000000aH
  000ee	d9 c9		 fxch	 ST(1)
  000f0	83 c7 0a	 add	 edi, 10			; 0000000aH
  000f3	d8 ca		 fmul	 ST(0), ST(2)
  000f5	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  000f8	7d de		 jge	 SHORT $LN70@do_put@3

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000fa	dd d9		 fstp	 ST(1)
$LN57@do_put@3:

; 1264 : 					}
; 1265 : 
; 1266 : 			if (_Signed)

  000fc	80 7c 24 13 00	 cmp	 BYTE PTR __Signed$145654[esp+148], 0
  00101	dd d9		 fstp	 ST(1)
  00103	74 0f		 je	 SHORT $LN1@do_put@3

; 1267 : 				_Val = -_Val;

  00105	d9 e0		 fchs
  00107	eb 0b		 jmp	 SHORT $LN1@do_put@3
$LN64@do_put@3:

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  00109	dd d8		 fstp	 ST(0)
  0010b	eb ef		 jmp	 SHORT $LN57@do_put@3
$LN43@do_put@3:

; 1267 : 				_Val = -_Val;

  0010d	dd 84 24 ac 00
	00 00		 fld	 QWORD PTR __Val$[esp+144]
$LN1@do_put@3:

; 1268 : 			}
; 1269 : 
; 1270 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1271 : 			_Beforepoint, _Afterpoint, _Precision,
; 1272 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 'L', _Iosbase.flags()),
; 1273 : 					_Significance, _Val)));	// convert and put

  00114	c6 44 24 1c 25	 mov	 BYTE PTR __Fmt$[esp+148], 37 ; 00000025H
  00119	8d 44 24 1d	 lea	 eax, DWORD PTR __Fmt$[esp+149]
  0011d	f6 c1 20	 test	 cl, 32			; 00000020H
  00120	74 09		 je	 SHORT $LN31@do_put@3
  00122	c6 44 24 1d 2b	 mov	 BYTE PTR __Fmt$[esp+149], 43 ; 0000002bH
  00127	8d 44 24 1e	 lea	 eax, DWORD PTR __Fmt$[esp+150]
$LN31@do_put@3:
  0012b	f6 c1 10	 test	 cl, 16			; 00000010H
  0012e	74 04		 je	 SHORT $LN30@do_put@3
  00130	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  00133	40		 inc	 eax
$LN30@do_put@3:
  00134	c6 00 2e	 mov	 BYTE PTR [eax], 46	; 0000002eH
  00137	40		 inc	 eax
  00138	c6 00 2a	 mov	 BYTE PTR [eax], 42	; 0000002aH
  0013b	40		 inc	 eax
  0013c	c6 00 4c	 mov	 BYTE PTR [eax], 76	; 0000004cH
  0013f	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H
  00145	40		 inc	 eax
  00146	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  0014c	75 04		 jne	 SHORT $LN36@do_put@3
  0014e	b1 66		 mov	 cl, 102			; 00000066H
  00150	eb 19		 jmp	 SHORT $LN35@do_put@3
$LN36@do_put@3:
  00152	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  00158	75 04		 jne	 SHORT $LN34@do_put@3
  0015a	b1 61		 mov	 cl, 97			; 00000061H
  0015c	eb 0d		 jmp	 SHORT $LN35@do_put@3
$LN34@do_put@3:
  0015e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00164	0f 95 c1	 setne	 cl
  00167	8d 4c 09 65	 lea	 ecx, DWORD PTR [ecx+ecx+101]
$LN35@do_put@3:
  0016b	83 ec 08	 sub	 esp, 8
  0016e	dd 1c 24	 fstp	 QWORD PTR [esp]
  00171	52		 push	 edx
  00172	88 08		 mov	 BYTE PTR [eax], cl
  00174	8d 4c 24 28	 lea	 ecx, DWORD PTR __Fmt$[esp+160]
  00178	51		 push	 ecx
  00179	8d 54 24 34	 lea	 edx, DWORD PTR __Buf$[esp+164]
  0017d	6a 6c		 push	 108			; 0000006cH
  0017f	52		 push	 edx
  00180	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
  00184	e8 00 00 00 00	 call	 _sprintf_s
  00189	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+168]
  00190	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+172]
  00197	50		 push	 eax
  00198	56		 push	 esi
  00199	8b 74 24 38	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+180]
  0019d	57		 push	 edi
  0019e	53		 push	 ebx
  0019f	8d 44 24 4c	 lea	 eax, DWORD PTR __Buf$[esp+188]
  001a3	50		 push	 eax
  001a4	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+188]
  001ab	51		 push	 ecx
  001ac	8b 4c 24 44	 mov	 ecx, DWORD PTR _this$[esp+196]
  001b0	55		 push	 ebp
  001b1	52		 push	 edx
  001b2	50		 push	 eax
  001b3	56		 push	 esi
  001b4	51		 push	 ecx
  001b5	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDIIII@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput

; 1274 : 		}

  001ba	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+216]
  001c1	83 c4 44	 add	 esp, 68			; 00000044H
  001c4	5f		 pop	 edi
  001c5	8b c6		 mov	 eax, esi
  001c7	5e		 pop	 esi
  001c8	5d		 pop	 ebp
  001c9	5b		 pop	 ebx
  001ca	33 cc		 xor	 ecx, esp
  001cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d1	81 c4 84 00 00
	00		 add	 esp, 132		; 00000084H
  001d7	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02BBAHNLBA@?$CFp?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02BBAHNLBA@?$CFp?$AA@
CONST	SEGMENT
??_C@_02BBAHNLBA@?$CFp?$AA@ DB '%p', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
_TEXT	SEGMENT
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1278 : 		{	// put formatted void pointer to _Dest

  00000	83 ec 44	 sub	 esp, 68			; 00000044H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 40	 mov	 DWORD PTR __$ArrayPad$[esp+68], eax
  0000e	8b 44 24 5c	 mov	 eax, DWORD PTR __Val$[esp+64]
  00012	53		 push	 ebx
  00013	8b 5c 24 58	 mov	 ebx, DWORD PTR __Iosbase$[esp+68]
  00017	56		 push	 esi
  00018	8b 74 24 50	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+72]
  0001c	57		 push	 edi

; 1279 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1280 : 		char _Buf[_Buf_size];
; 1281 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1282 : 			::sprintf_s(_Buf, _Buf_size, "%p", _Val)));

  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_02BBAHNLBA@?$CFp?$AA@
  00023	8d 44 24 14	 lea	 eax, DWORD PTR __Buf$[esp+88]
  00027	6a 40		 push	 64			; 00000040H
  00029	50		 push	 eax
  0002a	8b f9		 mov	 edi, ecx
  0002c	e8 00 00 00 00	 call	 _sprintf_s
  00031	8b 54 24 74	 mov	 edx, DWORD PTR __Fill$[esp+92]
  00035	50		 push	 eax
  00036	8b 44 24 70	 mov	 eax, DWORD PTR __Dest$[esp+100]
  0003a	8d 4c 24 20	 lea	 ecx, DWORD PTR __Buf$[esp+100]
  0003e	51		 push	 ecx
  0003f	8b 4c 24 70	 mov	 ecx, DWORD PTR __Dest$[esp+100]
  00043	52		 push	 edx
  00044	53		 push	 ebx
  00045	50		 push	 eax
  00046	51		 push	 ecx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1283 : 		}

  0004e	8b 4c 24 7c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+128]
  00052	83 c4 30	 add	 esp, 48			; 00000030H
  00055	5f		 pop	 edi
  00056	8b c6		 mov	 eax, esi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	33 cc		 xor	 ecx, esp
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	83 c4 44	 add	 esp, 68			; 00000044H
  00064	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
PUBLIC	??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry, COMDAT
; _this$ = ecx

; 95   : 			{	// construct locking and testing stream

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f9		 mov	 edi, ecx
  00025	89 7c 24 0c	 mov	 DWORD PTR _this$[esp+28], edi
  00029	8b 74 24 20	 mov	 esi, DWORD PTR __Ostr$[esp+24]
  0002d	89 37		 mov	 DWORD PTR [edi], esi
  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00034	8b 44 31 28	 mov	 eax, DWORD PTR [ecx+esi+40]
  00038	85 c0		 test	 eax, eax
  0003a	74 08		 je	 SHORT $LN12@sentry@2
  0003c	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0003f	e8 00 00 00 00	 call	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
$LN12@sentry@2:

; 96   : 			if (_Ostr.good() && _Ostr.tie() != 0)

  00044	8b 16		 mov	 edx, DWORD PTR [esi]
  00046	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00049	03 c6		 add	 eax, esi
  0004b	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0004f	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+36], 0
  00057	75 0e		 jne	 SHORT $LN1@sentry@2
  00059	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  0005c	85 c0		 test	 eax, eax
  0005e	74 07		 je	 SHORT $LN1@sentry@2

; 97   : 				_Ostr.tie()->flush();

  00060	8b c8		 mov	 ecx, eax
  00062	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
$LN1@sentry@2:

; 98   : 			_Ok = _Ostr.good();	// store test only after flushing tie

  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006c	83 7c 32 08 00	 cmp	 DWORD PTR [edx+esi+8], 0
  00071	0f 94 c0	 sete	 al
  00074	88 47 04	 mov	 BYTE PTR [edi+4], al

; 99   : 			}

  00077	8b c7		 mov	 eax, edi
  00079	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0007d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00084	59		 pop	 ecx
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	83 c4 10	 add	 esp, 16			; 00000010H
  0008a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
PUBLIC	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Osfx, COMDAT
; _this$ = ecx

; 139  : 		{	// perform any wrapup

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 140  : 		_TRY_BEGIN
; 141  : 		if (ios_base::flags() & ios_base::unitbuf)

  00029	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002e	f6 44 0a 10 02	 test	 BYTE PTR [edx+ecx+16], 2
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003a	74 05		 je	 SHORT $LN8@Osfx

; 142  : 			flush();	// flush stream as needed

  0003c	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN8@Osfx:

; 145  : 		}

  00041	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00044	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004b	59		 pop	 ecx
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:

; 143  : 		_CATCH_ALL
; 144  : 		_CATCH_END

  00053	b8 00 00 00 00	 mov	 eax, $LN8@Osfx
  00058	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
PUBLIC	?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx, COMDAT
; _this$ = ecx

; 139  : 		{	// perform any wrapup

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 140  : 		_TRY_BEGIN
; 141  : 		if (ios_base::flags() & ios_base::unitbuf)

  00029	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002e	f6 44 0a 10 02	 test	 BYTE PTR [edx+ecx+16], 2
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003a	74 05		 je	 SHORT $LN8@Osfx@2

; 142  : 			flush();	// flush stream as needed

  0003c	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
$LN8@Osfx@2:

; 145  : 		}

  00041	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00044	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004b	59		 pop	 ecx
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
__catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0:

; 143  : 		_CATCH_ALL
; 144  : 		_CATCH_END

  00053	b8 00 00 00 00	 mov	 eax, $LN8@Osfx@2
  00058	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
PUBLIC	??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_istream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >
;	COMDAT ??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_istream<char,std::char_traits<char> >::`vbtable'
	DD	08H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0
__ehfuncinfo$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
xdata$x	ENDS
;	COMDAT ??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
_TEXT	SEGMENT
$T191851 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 32   : 		{	// construct from stream buffer pointer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0002a	33 c0		 xor	 eax, eax
  0002c	89 44 24 08	 mov	 DWORD PTR $T191851[esp+28], eax
  00030	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+24], eax
  00034	74 19		 je	 SHORT $LN1@basic_istr
  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@
  0003c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  00043	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  00047	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR $T191851[esp+28], 1
$LN1@basic_istr:
  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 33   : 		_Myios::init(_Strbuf, _Isstd);

  00054	8b 4c 24 20	 mov	 ecx, DWORD PTR __Strbuf$[esp+24]
  00058	c7 04 16 00 00
	00 00		 mov	 DWORD PTR [esi+edx], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0005f	8b 16		 mov	 edx, DWORD PTR [esi]
  00061	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00064	8b 44 24 24	 mov	 eax, DWORD PTR __Isstd$[esp+24]
  00068	50		 push	 eax
  00069	51		 push	 ecx
  0006a	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0006d	03 ce		 add	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init

; 34   : 		}

  00074	8b c6		 mov	 eax, esi
  00076	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	5e		 pop	 esi
  00083	83 c4 14	 add	 esp, 20			; 00000014H
  00086	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T191851[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_istr
  0000c	83 65 ec fe	 and	 DWORD PTR $T191851[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 08	 add	 ecx, 8
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_istr:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >
PUBLIC	??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::basic_istream<wchar_t,std::char_traits<wchar_t> >
;	COMDAT ??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@ DD 00H ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	08H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z$0
__ehfuncinfo$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
xdata$x	ENDS
;	COMDAT ??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
_TEXT	SEGMENT
$T191871 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::basic_istream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 32   : 		{	// construct from stream buffer pointer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0002a	33 c0		 xor	 eax, eax
  0002c	89 44 24 08	 mov	 DWORD PTR $T191871[esp+28], eax
  00030	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+24], eax
  00034	74 19		 je	 SHORT $LN1@basic_istr@2
  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@
  0003c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  00043	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  00047	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR $T191871[esp+28], 1
$LN1@basic_istr@2:
  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 33   : 		_Myios::init(_Strbuf, _Isstd);

  00054	8b 4c 24 20	 mov	 ecx, DWORD PTR __Strbuf$[esp+24]
  00058	c7 04 16 00 00
	00 00		 mov	 DWORD PTR [esi+edx], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0005f	8b 16		 mov	 edx, DWORD PTR [esi]
  00061	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00064	8b 44 24 24	 mov	 eax, DWORD PTR __Isstd$[esp+24]
  00068	50		 push	 eax
  00069	51		 push	 ecx
  0006a	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0006d	03 ce		 add	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init

; 34   : 		}

  00074	8b c6		 mov	 eax, esi
  00076	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	5e		 pop	 esi
  00083	83 c4 14	 add	 esp, 20			; 00000014H
  00086	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T191871[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_istr@2
  0000c	83 65 ec fe	 and	 DWORD PTR $T191871[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 08	 add	 ecx, 8
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN5@basic_istr@2:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::basic_istream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z
_TEXT	SEGMENT
$T191894 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::erase, COMDAT
; _this$ = ecx

; 934  : 		{	// erase [_First, _Last)

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 935  : 		if (_First == begin() && _Last == end())

  00007	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0000a	8b 18		 mov	 ebx, DWORD PTR [eax]
  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	57		 push	 edi
  0000f	8b 7c 24 1c	 mov	 edi, DWORD PTR __First$[esp+16]
  00013	85 ff		 test	 edi, edi
  00015	74 04		 je	 SHORT $LN32@erase@5
  00017	3b f8		 cmp	 edi, eax
  00019	74 09		 je	 SHORT $LN31@erase@5
$LN32@erase@5:
  0001b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00020	8b 7c 24 1c	 mov	 edi, DWORD PTR __First$[esp+16]
$LN31@erase@5:
  00024	39 5c 24 20	 cmp	 DWORD PTR __First$[esp+20], ebx
  00028	75 66		 jne	 SHORT $LL2@erase@5
  0002a	8b 4c 24 24	 mov	 ecx, DWORD PTR __Last$[esp+16]
  0002e	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	85 c9		 test	 ecx, ecx
  00035	74 04		 je	 SHORT $LN61@erase@5
  00037	3b c8		 cmp	 ecx, eax
  00039	74 09		 je	 SHORT $LN60@erase@5
$LN61@erase@5:
  0003b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00040	8b 7c 24 1c	 mov	 edi, DWORD PTR __First$[esp+16]
$LN60@erase@5:
  00044	39 5c 24 28	 cmp	 DWORD PTR __Last$[esp+20], ebx
  00048	75 46		 jne	 SHORT $LL2@erase@5

; 936  : 			{	// erase all
; 937  : 			clear();

  0004a	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0004d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00050	52		 push	 edx
  00051	8b ce		 mov	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Erase
  00058	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005b	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0005e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00061	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00068	89 00		 mov	 DWORD PTR [eax], eax
  0006a	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0006d	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 938  : 			return (begin());

  00070	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	8b 16		 mov	 edx, DWORD PTR [esi]
  00077	8b 44 24 18	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+16]
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00080	89 10		 mov	 DWORD PTR [eax], edx
  00082	5b		 pop	 ebx

; 945  : 			}
; 946  : 		}

  00083	83 c4 08	 add	 esp, 8
  00086	c2 14 00	 ret	 20			; 00000014H
  00089	8d a4 24 00 00
	00 00		 npad	 7
$LL2@erase@5:

; 939  : 			}
; 940  : 		else
; 941  : 			{	// partial erase, one at a time
; 942  : 			while (_First != _Last)

  00090	85 ff		 test	 edi, edi
  00092	74 06		 je	 SHORT $LN114@erase@5
  00094	3b 7c 24 24	 cmp	 edi, DWORD PTR __Last$[esp+16]
  00098	74 09		 je	 SHORT $LN113@erase@5
$LN114@erase@5:
  0009a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0009f	8b 7c 24 1c	 mov	 edi, DWORD PTR __First$[esp+16]
$LN113@erase@5:
  000a3	8b 5c 24 20	 mov	 ebx, DWORD PTR __First$[esp+20]
  000a7	3b 5c 24 28	 cmp	 ebx, DWORD PTR __Last$[esp+20]
  000ab	74 1d		 je	 SHORT $LN1@erase@5

; 943  : 				erase(_First++);

  000ad	8d 4c 24 1c	 lea	 ecx, DWORD PTR __First$[esp+16]
  000b1	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::_Inc
  000b6	53		 push	 ebx
  000b7	57		 push	 edi
  000b8	8d 44 24 14	 lea	 eax, DWORD PTR $T191894[esp+28]
  000bc	50		 push	 eax
  000bd	8b ce		 mov	 ecx, esi
  000bf	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::erase
  000c4	8b 7c 24 1c	 mov	 edi, DWORD PTR __First$[esp+16]
  000c8	eb c6		 jmp	 SHORT $LL2@erase@5
$LN1@erase@5:

; 944  : 			return (_Make_iter(_First));

  000ca	8b 36		 mov	 esi, DWORD PTR [esi]
  000cc	8b 44 24 18	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+16]
  000d0	5f		 pop	 edi
  000d1	89 30		 mov	 DWORD PTR [eax], esi
  000d3	5e		 pop	 esi
  000d4	89 58 04	 mov	 DWORD PTR [eax+4], ebx
  000d7	5b		 pop	 ebx

; 945  : 			}
; 946  : 		}

  000d8	83 c4 08	 add	 esp, 8
  000db	c2 14 00	 ret	 20			; 00000014H
?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::erase
_TEXT	ENDS
PUBLIC	??_7?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`vftable'
PUBLIC	??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
PUBLIC	??_R4?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::IsNotEnd
PUBLIC	?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::Next
EXTRN	??_E?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 DD 00H ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocat'
	DB	'or@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@ DD 00H ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@@8
	DD	FLAT:??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@ DD FLAT:??_R4?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`vftable'
	DD	FLAT:??_E?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
	DD	FLAT:?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z$0
__ehfuncinfo$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
xdata$x	ENDS
;	COMDAT ??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_container$ = 8						; size = 4
??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT
; _this$ = ecx

; 36   : 				: ContainerCopy (container), EndIterator (ContainerCopy.end()), Iterator (ContainerCopy.begin()) { }

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	55		 push	 ebp
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 14	 mov	 DWORD PTR _this$[esp+36], esi
  0002b	33 db		 xor	 ebx, ebx
  0002d	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
  00031	88 5e 05	 mov	 BYTE PTR [esi+5], bl
  00034	8b 44 24 28	 mov	 eax, DWORD PTR _container$[esp+32]
  00038	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  0003b	50		 push	 eax
  0003c	8b cf		 mov	 ecx, edi
  0003e	89 5c 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], ebx
  00042	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@
  00048	e8 00 00 00 00	 call	 ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
  0004d	8b 6f 10	 mov	 ebp, DWORD PTR [edi+16]
  00050	89 5e 20	 mov	 DWORD PTR [esi+32], ebx
  00053	39 6f 0c	 cmp	 DWORD PTR [edi+12], ebp
  00056	77 05		 ja	 SHORT $LN12@ContainerF
  00058	3b 6f 10	 cmp	 ebp, DWORD PTR [edi+16]
  0005b	76 05		 jbe	 SHORT $LN11@ContainerF
$LN12@ContainerF:
  0005d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN11@ContainerF:
  00062	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00064	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  00067	89 6e 24	 mov	 DWORD PTR [esi+36], ebp
  0006a	8b 6f 0c	 mov	 ebp, DWORD PTR [edi+12]
  0006d	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00070	39 6f 0c	 cmp	 DWORD PTR [edi+12], ebp
  00073	77 05		 ja	 SHORT $LN29@ContainerF
  00075	3b 6f 10	 cmp	 ebp, DWORD PTR [edi+16]
  00078	76 05		 jbe	 SHORT $LN28@ContainerF
$LN29@ContainerF:
  0007a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN28@ContainerF:
  0007f	8b 17		 mov	 edx, DWORD PTR [edi]
  00081	89 56 28	 mov	 DWORD PTR [esi+40], edx
  00084	89 6e 2c	 mov	 DWORD PTR [esi+44], ebp
  00087	8b c6		 mov	 eax, esi
  00089	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  0008d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00094	59		 pop	 ecx
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5d		 pop	 ebp
  00098	5b		 pop	 ebx
  00099	83 c4 10	 add	 esp, 16			; 00000010H
  0009c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
PUBLIC	??E?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator++, COMDAT
; _this$ = ecx

; 115  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 116  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN19@operator@34
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 117  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN15@operator@34
$LN19@operator@34:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN16@operator@34
$LN15@operator@34:
  00018	33 c0		 xor	 eax, eax
$LN16@operator@34:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 05		 jb	 SHORT $LN20@operator@34
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN20@operator@34:

; 118  : 
; 119  :  #if _HAS_ITERATOR_DEBUGGING
; 120  : 		if (this->_Mycont == 0
; 121  : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 122  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 123  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 124  : 
; 125  : 		++_Myptr;

  00027	81 46 04 88 00
	00 00		 add	 DWORD PTR [esi+4], 136	; 00000088H

; 126  : 		return (*this);

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi

; 127  : 		}

  00031	c3		 ret	 0
??E?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator++
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
_TEXT	ENDS
;	COMDAT ?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ
_TEXT	SEGMENT
?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::Next, COMDAT
; _this$ = ecx

; 39   : 			virtual void Next () const { ++Iterator; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00006	85 c0		 test	 eax, eax
  00008	75 0c		 jne	 SHORT $LN21@Next
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000f	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00012	85 c0		 test	 eax, eax
  00014	74 04		 je	 SHORT $LN17@Next
$LN21@Next:
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	eb 02		 jmp	 SHORT $LN18@Next
$LN17@Next:
  0001a	33 c0		 xor	 eax, eax
$LN18@Next:
  0001c	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0001f	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00022	72 05		 jb	 SHORT $LN22@Next
  00024	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN22@Next:
  00029	81 46 2c 88 00
	00 00		 add	 DWORD PTR [esi+44], 136	; 00000088H
  00030	5e		 pop	 esi
  00031	c3		 ret	 0
?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::Next
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
_TEXT	SEGMENT
?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::IsNotEnd, COMDAT
; _this$ = ecx

; 38   : 			virtual bool IsNotEnd () const { bool r = InnerContinue && Iterator != EndIterator; InnerContinue = false; return r; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  00007	74 21		 je	 SHORT $LN3@IsNotEnd
  00009	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0000c	85 c0		 test	 eax, eax
  0000e	74 05		 je	 SHORT $LN10@IsNotEnd
  00010	3b 46 20	 cmp	 eax, DWORD PTR [esi+32]
  00013	74 05		 je	 SHORT $LN9@IsNotEnd
$LN10@IsNotEnd:
  00015	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@IsNotEnd:
  0001a	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0001d	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  00020	74 08		 je	 SHORT $LN3@IsNotEnd
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	b0 01		 mov	 al, 1
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
$LN3@IsNotEnd:
  0002a	32 c0		 xor	 al, al
  0002c	88 46 04	 mov	 BYTE PTR [esi+4], al
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::IsNotEnd
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@32
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@32:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_G?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z ENDP ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z$7
__unwindtable$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T192568 = -28						; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T192997 = 8						; size = 1
__Right$ = 8						; size = 4
??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z PROC	; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 467  : 		{	// construct list by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00030	6a 04		 push	 4
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	83 c4 04	 add	 esp, 4
  0003a	85 c0		 test	 eax, eax
  0003c	74 04		 je	 SHORT $LN28@list@2
  0003e	89 30		 mov	 DWORD PTR [eax], esi
  00040	eb 02		 jmp	 SHORT $LN29@list@2
$LN28@list@2:
  00042	33 c0		 xor	 eax, eax
$LN29@list@2:
  00044	89 06		 mov	 DWORD PTR [esi], eax
  00046	8b ce		 mov	 ecx, esi
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0004f	e8 00 00 00 00	 call	 ?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode

; 468  : 		_TRY_BEGIN
; 469  : 		insert(begin(), _Right.begin(), _Right.end());

  00054	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00057	8b 3e		 mov	 edi, DWORD PTR [esi]
  00059	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0005c	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00063	8b 10		 mov	 edx, DWORD PTR [eax]
  00065	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00068	8b 18		 mov	 ebx, DWORD PTR [eax]
  0006a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0006c	89 5d e8	 mov	 DWORD PTR $T192568[ebp+4], ebx
  0006f	8b 5d 08	 mov	 ebx, DWORD PTR $T192997[ebp]
  00072	53		 push	 ebx
  00073	50		 push	 eax
  00074	8b 45 e8	 mov	 eax, DWORD PTR $T192568[ebp+4]
  00077	51		 push	 ecx
  00078	50		 push	 eax
  00079	51		 push	 ecx
  0007a	52		 push	 edx
  0007b	57		 push	 edi
  0007c	8b ce		 mov	 ecx, esi
  0007e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00082	e8 00 00 00 00	 call	 ??$_Insert@V?$_Const_iterator@$00@?$list@KV?$allocator@K@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert<std::list<unsigned long,std::allocator<unsigned long> >::_Const_iterator<1> >

; 473  : 		_CATCH_END
; 474  : 		}

  00087	8b c6		 mov	 eax, esi
  00089	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00093	59		 pop	 ecx
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 04 00	 ret	 4
__catch$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z$0:

; 470  : 		_CATCH_ALL
; 471  : 		_Tidy();

  0009d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	e8 00 00 00 00	 call	 ?_Tidy@?$list@KV?$allocator@K@std@@@std@@IAEXXZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Tidy

; 472  : 		_RERAISE;

  000a5	6a 00		 push	 0
  000a7	6a 00		 push	 0
  000a9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN121@list@2:
  000ae	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_val@KV?$allocator@K@std@@@std@@QAE@XZ
__ehhandler$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z ENDP	; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0HostDevice@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$2
__ehfuncinfo$??0HostDevice@@QAE@ABU0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0HostDevice@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0HostDevice@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0HostDevice@@QAE@ABU0@@Z PROC				; HostDevice::HostDevice, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0HostDevice@@QAE@ABU0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002a	8b 7c 24 24	 mov	 edi, DWORD PTR ___that$[esp+28]
  0002e	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00031	88 06		 mov	 BYTE PTR [esi], al
  00033	0f b6 4f 01	 movzx	 ecx, BYTE PTR [edi+1]
  00037	88 4e 01	 mov	 BYTE PTR [esi+1], cl
  0003a	0f b6 57 02	 movzx	 edx, BYTE PTR [edi+2]
  0003e	88 56 02	 mov	 BYTE PTR [esi+2], dl
  00041	0f b6 47 03	 movzx	 eax, BYTE PTR [edi+3]
  00045	88 46 03	 mov	 BYTE PTR [esi+3], al
  00048	0f b6 4f 04	 movzx	 ecx, BYTE PTR [edi+4]
  0004c	88 4e 04	 mov	 BYTE PTR [esi+4], cl
  0004f	0f b6 57 05	 movzx	 edx, BYTE PTR [edi+5]
  00053	88 56 05	 mov	 BYTE PTR [esi+5], dl
  00056	0f b6 47 06	 movzx	 eax, BYTE PTR [edi+6]
  0005a	88 46 06	 mov	 BYTE PTR [esi+6], al
  0005d	33 db		 xor	 ebx, ebx
  0005f	6a ff		 push	 -1
  00061	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00064	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00067	53		 push	 ebx
  00068	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0006f	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00072	50		 push	 eax
  00073	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00076	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0007b	6a ff		 push	 -1
  0007d	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00080	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  00083	53		 push	 ebx
  00084	33 d2		 xor	 edx, edx
  00086	c7 41 18 07 00
	00 00		 mov	 DWORD PTR [ecx+24], 7
  0008d	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00090	50		 push	 eax
  00091	89 5c 24 28	 mov	 DWORD PTR __$EHRec$[esp+52], ebx
  00095	66 89 51 04	 mov	 WORD PTR [ecx+4], dx
  00099	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0009e	6a ff		 push	 -1
  000a0	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  000a3	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  000a6	53		 push	 ebx
  000a7	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  000ae	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  000b1	50		 push	 eax
  000b2	c6 44 24 28 01	 mov	 BYTE PTR __$EHRec$[esp+52], 1
  000b7	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  000ba	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000bf	0f b6 47 5c	 movzx	 eax, BYTE PTR [edi+92]
  000c3	88 46 5c	 mov	 BYTE PTR [esi+92], al
  000c6	8b 4f 60	 mov	 ecx, DWORD PTR [edi+96]
  000c9	89 4e 60	 mov	 DWORD PTR [esi+96], ecx
  000cc	8b 57 64	 mov	 edx, DWORD PTR [edi+100]
  000cf	89 56 64	 mov	 DWORD PTR [esi+100], edx
  000d2	8b 47 68	 mov	 eax, DWORD PTR [edi+104]
  000d5	83 c7 6c	 add	 edi, 108		; 0000006cH
  000d8	57		 push	 edi
  000d9	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  000dc	c6 44 24 20 02	 mov	 BYTE PTR __$EHRec$[esp+44], 2
  000e1	89 46 68	 mov	 DWORD PTR [esi+104], eax
  000e4	e8 00 00 00 00	 call	 ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
  000e9	8b c6		 mov	 eax, esi
  000eb	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  000ef	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f6	59		 pop	 ecx
  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	5b		 pop	 ebx
  000fa	83 c4 10	 add	 esp, 16			; 00000010H
  000fd	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 24	 add	 ecx, 36			; 00000024H
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 40	 add	 ecx, 64			; 00000040H
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0HostDevice@@QAE@ABU0@@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  00028	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0HostDevice@@QAE@ABU0@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0HostDevice@@QAE@ABU0@@Z ENDP				; HostDevice::HostDevice
PUBLIC	?erase@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?erase@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@0@Z
_TEXT	SEGMENT
$T193585 = -4						; size = 1
__Cat$193590 = 8					; size = 1
$T193587 = 8						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@0@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

  00000	51		 push	 ecx
  00001	53		 push	 ebx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

  00002	8b 5c 24 0c	 mov	 ebx, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi
  0000a	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  00010	85 f6		 test	 esi, esi
  00012	74 0e		 je	 SHORT $LN11@erase@6
  00014	8b 44 24 1c	 mov	 eax, DWORD PTR __First_arg$[esp+16]
  00018	39 46 0c	 cmp	 DWORD PTR [esi+12], eax
  0001b	77 05		 ja	 SHORT $LN11@erase@6
  0001d	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  00020	76 09		 jbe	 SHORT $LN10@erase@6
$LN11@erase@6:
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00027	8b 44 24 1c	 mov	 eax, DWORD PTR __First_arg$[esp+16]
$LN10@erase@6:

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

  0002b	8b 7c 24 24	 mov	 edi, DWORD PTR __Last_arg$[esp+16]
  0002f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00031	89 0b		 mov	 DWORD PTR [ebx], ecx
  00033	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00036	39 7e 0c	 cmp	 DWORD PTR [esi+12], edi
  00039	77 05		 ja	 SHORT $LN30@erase@6
  0003b	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0003e	76 09		 jbe	 SHORT $LN29@erase@6
$LN30@erase@6:
  00040	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00045	8b 7c 24 24	 mov	 edi, DWORD PTR __Last_arg$[esp+16]
$LN29@erase@6:

; 1031 : 
; 1032 : 		if (_First != _Last)

  00049	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004d	85 c0		 test	 eax, eax
  0004f	74 04		 je	 SHORT $LN47@erase@6
  00051	3b c1		 cmp	 eax, ecx
  00053	74 05		 je	 SHORT $LN46@erase@6
$LN47@erase@6:
  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN46@erase@6:
  0005a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0005d	3b cf		 cmp	 ecx, edi
  0005f	74 4f		 je	 SHORT $LN89@erase@6

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

  00061	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00064	55		 push	 ebp
  00065	c6 44 24 10 00	 mov	 BYTE PTR $T193585[esp+20], 0
  0006a	8b 54 24 10	 mov	 edx, DWORD PTR $T193585[esp+20]
  0006e	52		 push	 edx
  0006f	8b 54 24 1c	 mov	 edx, DWORD PTR __Cat$193590[esp+20]
  00073	52		 push	 edx
  00074	8b 54 24 20	 mov	 edx, DWORD PTR $T193587[esp+24]
  00078	52		 push	 edx
  00079	51		 push	 ecx
  0007a	50		 push	 eax
  0007b	57		 push	 edi
  0007c	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *>

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

  00081	8b 6e 10	 mov	 ebp, DWORD PTR [esi+16]
  00084	8b d8		 mov	 ebx, eax
  00086	83 c4 18	 add	 esp, 24			; 00000018H
  00089	8b fb		 mov	 edi, ebx
  0008b	3b dd		 cmp	 ebx, ebp
  0008d	74 12		 je	 SHORT $LN75@erase@6
  0008f	90		 npad	 1
$LL77@erase@6:
  00090	8b cf		 mov	 ecx, edi
  00092	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00097	81 c7 88 00 00
	00		 add	 edi, 136		; 00000088H
  0009d	3b fd		 cmp	 edi, ebp
  0009f	75 ef		 jne	 SHORT $LL77@erase@6
$LN75@erase@6:

; 1049 : 			_Mylast = _Ptr;
; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

  000a1	8b 44 24 18	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+16]
  000a5	5d		 pop	 ebp
  000a6	5f		 pop	 edi
  000a7	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx

; 1055 : #endif
; 1056 : 		}

  000ac	59		 pop	 ecx
  000ad	c2 14 00	 ret	 20			; 00000014H
$LN89@erase@6:
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi

; 1049 : 			_Mylast = _Ptr;
; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

  000b2	8b c3		 mov	 eax, ebx
  000b4	5b		 pop	 ebx

; 1055 : #endif
; 1056 : 		}

  000b5	59		 pop	 ecx
  000b6	c2 14 00	 ret	 20			; 00000014H
?erase@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@0@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::erase
_TEXT	ENDS
PUBLIC	??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >
;	COMDAT ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
	DD	04H
CONST	ENDS
;	COMDAT ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
	DD	0cH
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$0
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$1
	DD	02H
	DD	00H
__ehfuncinfo$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
xdata$x	ENDS
;	COMDAT ??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
_TEXT	SEGMENT
$T193694 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z PROC ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 914  : 		{	// construct from stream buffer pointer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f9		 mov	 edi, ecx
  00028	89 7c 24 14	 mov	 DWORD PTR _this$[esp+36], edi
  0002c	33 db		 xor	 ebx, ebx
  0002e	89 5c 24 10	 mov	 DWORD PTR $T193694[esp+36], ebx
  00032	39 5c 24 2c	 cmp	 DWORD PTR _$initVBases$[esp+32], ebx
  00036	74 20		 je	 SHORT $LN1@basic_iost
  00038	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  0003e	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  00045	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  0004c	89 5c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebx
  00050	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR $T193694[esp+36], 1
$LN1@basic_iost:
  00058	8b 07		 mov	 eax, DWORD PTR [edi]
  0005a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005d	c7 04 0f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00064	8b 17		 mov	 edx, DWORD PTR [edi]
  00066	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00069	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0006c	03 f7		 add	 esi, edi
  0006e	8b ce		 mov	 ecx, esi
  00070	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init
  00075	8b 44 24 28	 mov	 eax, DWORD PTR __Strbuf$[esp+32]
  00079	6a 20		 push	 32			; 00000020H
  0007b	8b ce		 mov	 ecx, esi
  0007d	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00080	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00083	e8 00 00 00 00	 call	 ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
  00088	88 46 30	 mov	 BYTE PTR [esi+48], al
  0008b	39 5e 28	 cmp	 DWORD PTR [esi+40], ebx
  0008e	75 12		 jne	 SHORT $LN31@basic_iost
  00090	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00093	83 c8 04	 or	 eax, 4
  00096	83 c8 04	 or	 eax, 4
  00099	53		 push	 ebx
  0009a	50		 push	 eax
  0009b	8b ce		 mov	 ecx, esi
  0009d	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN31@basic_iost:
  000a2	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  000a5	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000a8	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ab	c7 44 17 08 00
	00 00 00	 mov	 DWORD PTR [edi+edx+8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  000b3	8b 07		 mov	 eax, DWORD PTR [edi]
  000b5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b8	c7 04 0f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@

; 915  : 		}

  000bf	8b c7		 mov	 eax, edi
  000c1	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000c5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cc	59		 pop	 ecx
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	83 c4 14	 add	 esp, 20			; 00000014H
  000d3	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T193694[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_iost
  0000c	83 65 ec fe	 and	 DWORD PTR $T193694[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_iost:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 08	 add	 ecx, 8
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
__ehhandler$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0002e	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ENDP ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T193816 = -8						; size = 8
?_Tidy@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 1420 : 		{	// free all storage

  00000	83 ec 08	 sub	 esp, 8
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1421 : 		erase(begin(), end());

  00006	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00009	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000b	8b 10		 mov	 edx, DWORD PTR [eax]
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	52		 push	 edx
  00010	51		 push	 ecx
  00011	8d 44 24 14	 lea	 eax, DWORD PTR $T193816[esp+28]
  00015	50		 push	 eax
  00016	8b ce		 mov	 ecx, esi
  00018	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::erase

; 1422 : 		this->_Alptr.destroy(&_Left(_Myhead));
; 1423 : 		this->_Alptr.destroy(&_Parent(_Myhead));
; 1424 : 		this->_Alptr.destroy(&_Right(_Myhead));
; 1425 : 		this->_Alnod.deallocate(_Myhead, 1);

  0001d	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00020	51		 push	 ecx
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 04	 add	 esp, 4

; 1426 : 		_Myhead = 0, _Mysize = 0;

  00029	33 c0		 xor	 eax, eax
  0002b	89 46 18	 mov	 DWORD PTR [esi+24], eax
  0002e	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00031	5e		 pop	 esi

; 1427 : 		}

  00032	83 c4 08	 add	 esp, 8
  00035	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tidy
_TEXT	ENDS
PUBLIC	??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >
;	COMDAT ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	04H
CONST	ENDS
;	COMDAT ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
CONST	SEGMENT
??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	0cH
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$0
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$1
	DD	02H
	DD	00H
__ehfuncinfo$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
xdata$x	ENDS
;	COMDAT ??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
_TEXT	SEGMENT
$T193986 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 914  : 		{	// construct from stream buffer pointer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f9		 mov	 edi, ecx
  00028	89 7c 24 14	 mov	 DWORD PTR _this$[esp+36], edi
  0002c	33 db		 xor	 ebx, ebx
  0002e	89 5c 24 10	 mov	 DWORD PTR $T193986[esp+36], ebx
  00032	39 5c 24 2c	 cmp	 DWORD PTR _$initVBases$[esp+32], ebx
  00036	74 20		 je	 SHORT $LN1@basic_iost@2
  00038	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
  0003e	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
  00045	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  0004c	89 5c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebx
  00050	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR $T193986[esp+36], 1
$LN1@basic_iost@2:
  00058	8b 07		 mov	 eax, DWORD PTR [edi]
  0005a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005d	c7 04 0f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00064	8b 17		 mov	 edx, DWORD PTR [edi]
  00066	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00069	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0006c	03 f7		 add	 esi, edi
  0006e	8b ce		 mov	 ecx, esi
  00070	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init
  00075	8b 44 24 28	 mov	 eax, DWORD PTR __Strbuf$[esp+32]
  00079	6a 20		 push	 32			; 00000020H
  0007b	8b ce		 mov	 ecx, esi
  0007d	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00080	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00083	e8 00 00 00 00	 call	 ?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen
  00088	66 89 46 30	 mov	 WORD PTR [esi+48], ax
  0008c	39 5e 28	 cmp	 DWORD PTR [esi+40], ebx
  0008f	75 12		 jne	 SHORT $LN31@basic_iost@2
  00091	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00094	83 c8 04	 or	 eax, 4
  00097	83 c8 04	 or	 eax, 4
  0009a	53		 push	 ebx
  0009b	50		 push	 eax
  0009c	8b ce		 mov	 ecx, esi
  0009e	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN31@basic_iost@2:
  000a3	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  000a6	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000a9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ac	c7 44 17 08 00
	00 00 00	 mov	 DWORD PTR [edi+edx+8], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  000b4	8b 07		 mov	 eax, DWORD PTR [edi]
  000b6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b9	c7 04 0f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@

; 915  : 		}

  000c0	8b c7		 mov	 eax, edi
  000c2	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000c6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cd	59		 pop	 ecx
  000ce	5f		 pop	 edi
  000cf	5e		 pop	 esi
  000d0	5b		 pop	 ebx
  000d1	83 c4 14	 add	 esp, 20			; 00000014H
  000d4	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T193986[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_iost@2
  0000c	83 65 ec fe	 and	 DWORD PTR $T193986[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN5@basic_iost@2:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 08	 add	 ecx, 8
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0002e	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 102  : 			{	// destroy the object

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0

; 103  : 
; 104  :  #if _HAS_EXCEPTIONS
; 105  : 			if (!_XSTD uncaught_exception())

  00030	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00035	84 c0		 test	 al, al
  00037	75 07		 jne	 SHORT $LN1@sentry@3

; 106  : 				this->_Myostr._Osfx();

  00039	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003b	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN1@sentry@3:

; 107  : 			}

  00040	8b 06		 mov	 eax, DWORD PTR [esi]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00047	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  0004b	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+32], -1
  00053	85 c0		 test	 eax, eax
  00055	74 08		 je	 SHORT $LN12@sentry@3
  00057	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0005a	e8 00 00 00 00	 call	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN12@sentry@3:
  0005f	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006a	59		 pop	 ecx
  0006b	5e		 pop	 esi
  0006c	83 c4 10	 add	 esp, 16			; 00000010H
  0006f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 102  : 			{	// destroy the object

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0

; 103  : 
; 104  :  #if _HAS_EXCEPTIONS
; 105  : 			if (!_XSTD uncaught_exception())

  00030	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00035	84 c0		 test	 al, al
  00037	75 07		 jne	 SHORT $LN1@sentry@4

; 106  : 				this->_Myostr._Osfx();

  00039	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003b	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
$LN1@sentry@4:

; 107  : 			}

  00040	8b 06		 mov	 eax, DWORD PTR [esi]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00047	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  0004b	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+32], -1
  00053	85 c0		 test	 eax, eax
  00055	74 08		 je	 SHORT $LN12@sentry@4
  00057	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0005a	e8 00 00 00 00	 call	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN12@sentry@4:
  0005f	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006a	59		 pop	 ecx
  0006b	5e		 pop	 esi
  0006c	83 c4 10	 add	 esp, 16			; 00000010H
  0006f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
PUBLIC	??0?$pair@$$CBHUHostDevice@@@std@@QAE@ABHABUHostDevice@@@Z ; std::pair<int const ,HostDevice>::pair<int const ,HostDevice>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
;	COMDAT ??0?$pair@$$CBHUHostDevice@@@std@@QAE@ABHABUHostDevice@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@$$CBHUHostDevice@@@std@@QAE@ABHABUHostDevice@@@Z PROC ; std::pair<int const ,HostDevice>::pair<int const ,HostDevice>, COMDAT
; _this$ = ecx

; 50   : 		{	// construct from specified values

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val1$[esp-4]
  00004	8b 54 24 08	 mov	 edx, DWORD PTR __Val2$[esp-4]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000d	89 0e		 mov	 DWORD PTR [esi], ecx
  0000f	52		 push	 edx
  00010	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00013	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z

; 51   : 		}

  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 08 00	 ret	 8
??0?$pair@$$CBHUHostDevice@@@std@@QAE@ABHABUHostDevice@@@Z ENDP ; std::pair<int const ,HostDevice>::pair<int const ,HostDevice>
_TEXT	ENDS
PUBLIC	??0?$pair@$$CBHUHostDevice@@@std@@QAE@ABU01@@Z	; std::pair<int const ,HostDevice>::pair<int const ,HostDevice>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$pair@$$CBHUHostDevice@@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$pair@$$CBHUHostDevice@@@std@@QAE@ABU01@@Z PROC	; std::pair<int const ,HostDevice>::pair<int const ,HostDevice>, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	83 c0 08	 add	 eax, 8
  0000c	89 0e		 mov	 DWORD PTR [esi], ecx
  0000e	50		 push	 eax
  0000f	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00012	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 04 00	 ret	 4
??0?$pair@$$CBHUHostDevice@@@std@@QAE@ABU01@@Z ENDP	; std::pair<int const ,HostDevice>::pair<int const ,HostDevice>
_TEXT	ENDS
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$9 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$9
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
__Ok$ = -32						; size = 8
__Pad$ = -24						; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 741  : 	{	// insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 742  : 	typedef char _Elem;
; 743  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 744  : 	ios_base::iostate _State = ios_base::goodbit;
; 745  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0002e	33 db		 xor	 ebx, ebx
  00030	89 5d ec	 mov	 DWORD PTR __State$[ebp], ebx
  00033	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL134@operator@35:
  00036	8a 08		 mov	 cl, BYTE PTR [eax]
  00038	40		 inc	 eax
  00039	84 c9		 test	 cl, cl
  0003b	75 f9		 jne	 SHORT $LL134@operator@35

; 746  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
; 747  : 		? 0 : _Ostr.width() - _Count;

  0003d	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00040	2b c2		 sub	 eax, edx
  00042	8b f8		 mov	 edi, eax
  00044	8b 06		 mov	 eax, DWORD PTR [esi]
  00046	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00049	8b 44 31 18	 mov	 eax, DWORD PTR [ecx+esi+24]
  0004d	3b c3		 cmp	 eax, ebx
  0004f	7e 0d		 jle	 SHORT $LN17@operator@35
  00051	3b c7		 cmp	 eax, edi
  00053	7e 09		 jle	 SHORT $LN17@operator@35
  00055	2b c7		 sub	 eax, edi
  00057	8b d8		 mov	 ebx, eax
  00059	89 45 e8	 mov	 DWORD PTR __Pad$[ebp], eax
  0005c	eb 03		 jmp	 SHORT $LN18@operator@35
$LN17@operator@35:
  0005e	89 5d e8	 mov	 DWORD PTR __Pad$[ebp], ebx
$LN18@operator@35:

; 748  : 	const typename _Myos::sentry _Ok(_Ostr);

  00061	56		 push	 esi
  00062	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00065	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 749  : 
; 750  : 	if (!_Ok)

  0006a	80 7d e4 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  0006e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00075	75 0a		 jne	 SHORT $LN14@operator@35

; 751  : 		_State |= ios_base::badbit;

  00077	ba 04 00 00 00	 mov	 edx, 4

; 752  : 	else

  0007c	e9 9b 00 00 00	 jmp	 $LN22@operator@35
$LN14@operator@35:

; 753  : 		{	// state okay, insert
; 754  : 		_TRY_IO_BEGIN
; 755  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  00081	8b 16		 mov	 edx, DWORD PTR [esi]
  00083	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00086	8b 44 30 10	 mov	 eax, DWORD PTR [eax+esi+16]
  0008a	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0008f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00093	83 f8 40	 cmp	 eax, 64			; 00000040H
  00096	74 53		 je	 SHORT $LN132@operator@35
$LL10@operator@35:

; 756  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00098	85 db		 test	 ebx, ebx
  0009a	7e 49		 jle	 SHORT $LN8@operator@35

; 757  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 758  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  0009c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0009e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000a1	8a 44 32 30	 mov	 al, BYTE PTR [edx+esi+48]
  000a5	8d 0c 32	 lea	 ecx, DWORD PTR [edx+esi]
  000a8	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  000ab	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000ae	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000b1	74 1e		 je	 SHORT $LN42@operator@35
  000b3	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  000b6	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000b9	7e 16		 jle	 SHORT $LN42@operator@35
  000bb	ff 0a		 dec	 DWORD PTR [edx]
  000bd	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000c0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c2	8d 5a 01	 lea	 ebx, DWORD PTR [edx+1]
  000c5	89 19		 mov	 DWORD PTR [ecx], ebx
  000c7	8b 5d e8	 mov	 ebx, DWORD PTR __Pad$[ebp]
  000ca	88 02		 mov	 BYTE PTR [edx], al
  000cc	0f b6 c0	 movzx	 eax, al
  000cf	eb 0b		 jmp	 SHORT $LN43@operator@35
$LN42@operator@35:
  000d1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d3	0f b6 c0	 movzx	 eax, al
  000d6	50		 push	 eax
  000d7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000da	ff d0		 call	 eax
$LN43@operator@35:
  000dc	83 f8 ff	 cmp	 eax, -1
  000df	75 7f		 jne	 SHORT $LN9@operator@35

; 759  : 					{	// insertion failed, quit
; 760  : 					_State |= ios_base::badbit;

  000e1	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4
$LN8@operator@35:

; 761  : 					break;
; 762  : 					}
; 763  : 
; 764  : 		if (_State == ios_base::goodbit
; 765  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  000e5	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  000e9	75 1f		 jne	 SHORT $LN2@operator@35
$LN132@operator@35:
  000eb	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ed	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000f0	8b 4c 32 28	 mov	 ecx, DWORD PTR [edx+esi+40]
  000f4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f6	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  000f9	57		 push	 edi
  000fa	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  000fd	ff d2		 call	 edx
  000ff	3b c7		 cmp	 eax, edi
  00101	74 6d		 je	 SHORT $LL133@operator@35

; 766  : 			_State |= ios_base::badbit;

  00103	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN2@operator@35:

; 775  : 					}
; 776  : 		_Ostr.width(0);

  0010a	8b 06		 mov	 eax, DWORD PTR [esi]
  0010c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0010f	03 c6		 add	 eax, esi
  00111	33 c9		 xor	 ecx, ecx
  00113	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  00116	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ecx
$LN141@operator@35:
  00119	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
$LN22@operator@35:

; 778  : 		}
; 779  : 
; 780  : 	_Ostr.setstate(_State);

  0011c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0011e	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00121	03 ce		 add	 ecx, esi
  00123	85 d2		 test	 edx, edx
  00125	74 16		 je	 SHORT $LN125@operator@35
  00127	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0012a	0b c2		 or	 eax, edx
  0012c	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00130	75 03		 jne	 SHORT $LN127@operator@35
  00132	83 c8 04	 or	 eax, 4
$LN127@operator@35:
  00135	6a 00		 push	 0
  00137	50		 push	 eax
  00138	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN125@operator@35:

; 781  : 	return (_Ostr);

  0013d	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00140	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00147	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0014c	8b c6		 mov	 eax, esi

; 782  : 	}

  0014e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00151	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00158	59		 pop	 ecx
  00159	5f		 pop	 edi
  0015a	5e		 pop	 esi
  0015b	5b		 pop	 ebx
  0015c	8b e5		 mov	 esp, ebp
  0015e	5d		 pop	 ebp
  0015f	c3		 ret	 0
$LN9@operator@35:

; 756  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00160	4b		 dec	 ebx
  00161	89 5d e8	 mov	 DWORD PTR __Pad$[ebp], ebx
  00164	e9 2f ff ff ff	 jmp	 $LL10@operator@35
  00169	8d a4 24 00 00
	00 00		 npad	 7
$LL133@operator@35:

; 767  : 
; 768  : 		if (_State == ios_base::goodbit)
; 769  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00170	85 db		 test	 ebx, ebx
  00172	7e 96		 jle	 SHORT $LN2@operator@35

; 770  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 771  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00174	8b 06		 mov	 eax, DWORD PTR [esi]
  00176	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00179	8a 44 31 30	 mov	 al, BYTE PTR [ecx+esi+48]
  0017d	03 ce		 add	 ecx, esi
  0017f	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00182	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00185	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00188	74 1b		 je	 SHORT $LN68@operator@35
  0018a	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0018d	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00190	7e 13		 jle	 SHORT $LN68@operator@35
  00192	ff 0a		 dec	 DWORD PTR [edx]
  00194	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00197	8b 11		 mov	 edx, DWORD PTR [ecx]
  00199	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
  0019c	89 39		 mov	 DWORD PTR [ecx], edi
  0019e	88 02		 mov	 BYTE PTR [edx], al
  001a0	0f b6 c0	 movzx	 eax, al
  001a3	eb 0b		 jmp	 SHORT $LN69@operator@35
$LN68@operator@35:
  001a5	8b 11		 mov	 edx, DWORD PTR [ecx]
  001a7	0f b6 c0	 movzx	 eax, al
  001aa	50		 push	 eax
  001ab	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001ae	ff d0		 call	 eax
$LN69@operator@35:
  001b0	83 f8 ff	 cmp	 eax, -1
  001b3	75 09		 jne	 SHORT $LN3@operator@35

; 772  : 					{	// insertion failed, quit
; 773  : 					_State |= ios_base::badbit;

  001b5	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4

; 774  : 					break;

  001b9	e9 4c ff ff ff	 jmp	 $LN2@operator@35
$LN3@operator@35:

; 767  : 
; 768  : 		if (_State == ios_base::goodbit)
; 769  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  001be	4b		 dec	 ebx
  001bf	eb af		 jmp	 SHORT $LL133@operator@35
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 777  : 		_CATCH_IO_(_Ostr)

  001c1	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  001c4	8b 11		 mov	 edx, DWORD PTR [ecx]
  001c6	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001c9	03 c1		 add	 eax, ecx
  001cb	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001ce	83 c9 04	 or	 ecx, 4
  001d1	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  001d5	75 03		 jne	 SHORT $LN93@operator@35
  001d7	83 c9 04	 or	 ecx, 4
$LN93@operator@35:
  001da	83 e1 17	 and	 ecx, 23			; 00000017H
  001dd	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  001e0	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  001e3	75 15		 jne	 SHORT $LN102@operator@35
  001e5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  001ec	b8 00 00 00 00	 mov	 eax, $LN23@operator@35
  001f1	c3		 ret	 0
$LN23@operator@35:
  001f2	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  001f5	e9 1f ff ff ff	 jmp	 $LN141@operator@35
$LN102@operator@35:
  001fa	6a 00		 push	 0
  001fc	6a 00		 push	 0
  001fe	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN140@operator@35:
  00203	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
PUBLIC	??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
;	COMDAT ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
_TEXT	SEGMENT
$T194479 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_container$ = 12					; size = 4
??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT

; 69   : 		{

  00000	51		 push	 ecx

; 70   : 			return ContainerForward <T> (container);

  00001	8b 44 24 0c	 mov	 eax, DWORD PTR _container$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	50		 push	 eax
  0000b	8b ce		 mov	 ecx, esi
  0000d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T194479[esp+12], 0
  00015	e8 00 00 00 00	 call	 ??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi

; 71   : 		}

  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__catchsym$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$11 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z DD 01H
	DD	02H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$11
__ehfuncinfo$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$3
	DD	00H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$10
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
__Ok$ = -44						; size = 8
$T194574 = -36						; size = 1
tv542 = -32						; size = 4
$T194485 = -28						; size = 4
__Pad$ = -24						; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<wchar_t,std::char_traits<wchar_t> >, COMDAT

; 655  : 	{	// insert NTBS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 656  : 	ios_base::iostate _State = ios_base::goodbit;
; 657  : 	streamsize _Count = (streamsize)::strlen(_Val);	// may overflow

  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0002e	33 db		 xor	 ebx, ebx
  00030	89 5d ec	 mov	 DWORD PTR __State$[ebp], ebx
  00033	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL173@operator@36:
  00036	8a 08		 mov	 cl, BYTE PTR [eax]
  00038	40		 inc	 eax
  00039	84 c9		 test	 cl, cl
  0003b	75 f9		 jne	 SHORT $LL173@operator@36

; 658  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
; 659  : 		? 0 : _Ostr.width() - _Count;

  0003d	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00040	2b c2		 sub	 eax, edx
  00042	8b f8		 mov	 edi, eax
  00044	8b 06		 mov	 eax, DWORD PTR [esi]
  00046	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00049	8b 44 31 18	 mov	 eax, DWORD PTR [ecx+esi+24]
  0004d	3b c3		 cmp	 eax, ebx
  0004f	7e 0d		 jle	 SHORT $LN20@operator@36
  00051	3b c7		 cmp	 eax, edi
  00053	7e 09		 jle	 SHORT $LN20@operator@36
  00055	2b c7		 sub	 eax, edi
  00057	8b d8		 mov	 ebx, eax
  00059	89 45 e8	 mov	 DWORD PTR __Pad$[ebp], eax
  0005c	eb 03		 jmp	 SHORT $LN21@operator@36
$LN20@operator@36:
  0005e	89 5d e8	 mov	 DWORD PTR __Pad$[ebp], ebx
$LN21@operator@36:

; 660  : 	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

  00061	56		 push	 esi
  00062	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00065	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry

; 661  : 
; 662  : 	if (!_Ok)

  0006a	80 7d d8 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  0006e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00075	75 0a		 jne	 SHORT $LN17@operator@36

; 663  : 		_State |= ios_base::badbit;

  00077	ba 04 00 00 00	 mov	 edx, 4

; 664  : 	else

  0007c	e9 d2 01 00 00	 jmp	 $LN27@operator@36
$LN17@operator@36:

; 665  : 		{	// state okay, insert characters
; 666  : 		_TRY_IO_BEGIN
; 667  : 		const ctype<_Elem>& _Ctype_fac = _USE(_Ostr.getloc(), ctype<_Elem>);

  00081	8b 06		 mov	 eax, DWORD PTR [esi]
  00083	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00086	8d 55 e4	 lea	 edx, DWORD PTR $T194485[ebp]
  00089	52		 push	 edx
  0008a	03 ce		 add	 ecx, esi
  0008c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00090	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00095	50		 push	 eax
  00096	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0009a	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
  0009f	83 c4 04	 add	 esp, 4
  000a2	8d 4d e4	 lea	 ecx, DWORD PTR $T194485[ebp]
  000a5	89 45 e0	 mov	 DWORD PTR tv542[ebp], eax
  000a8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000ac	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 668  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  000b1	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b3	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b6	8b 44 32 10	 mov	 eax, DWORD PTR [edx+esi+16]
  000ba	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  000bf	83 f8 40	 cmp	 eax, 64			; 00000040H
  000c2	74 5c		 je	 SHORT $LL171@operator@36
$LL13@operator@36:

; 669  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  000c4	85 db		 test	 ebx, ebx
  000c6	7e 58		 jle	 SHORT $LL171@operator@36

; 670  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 671  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  000c8	8b 06		 mov	 eax, DWORD PTR [esi]
  000ca	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cd	0f b7 54 31 30	 movzx	 edx, WORD PTR [ecx+esi+48]
  000d2	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  000d5	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000d8	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  000db	83 38 00	 cmp	 DWORD PTR [eax], 0
  000de	74 1f		 je	 SHORT $LN44@operator@36
  000e0	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  000e3	83 38 00	 cmp	 DWORD PTR [eax], 0
  000e6	7e 17		 jle	 SHORT $LN44@operator@36
  000e8	ff 08		 dec	 DWORD PTR [eax]
  000ea	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000ed	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ef	8d 58 02	 lea	 ebx, DWORD PTR [eax+2]
  000f2	89 19		 mov	 DWORD PTR [ecx], ebx
  000f4	8b 5d e8	 mov	 ebx, DWORD PTR __Pad$[ebp]
  000f7	66 89 10	 mov	 WORD PTR [eax], dx
  000fa	0f b7 c2	 movzx	 eax, dx
  000fd	eb 0e		 jmp	 SHORT $LN45@operator@36
$LN44@operator@36:
  000ff	8b 01		 mov	 eax, DWORD PTR [ecx]
  00101	52		 push	 edx
  00102	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00105	ff d2		 call	 edx
  00107	0f b7 c0	 movzx	 eax, ax
  0010a	0f b7 c0	 movzx	 eax, ax
$LN45@operator@36:
  0010d	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00112	66 3b c8	 cmp	 cx, ax
  00115	75 67		 jne	 SHORT $LN12@operator@36

; 672  : 					{	// insertion failed, quit
; 673  : 					_State |= ios_base::badbit;

  00117	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4
  0011b	eb 03 8d 49 00	 npad	 5
$LL171@operator@36:

; 674  : 					break;
; 675  : 					}
; 676  : 
; 677  : 		for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val)

  00120	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  00124	0f 85 da 00 00
	00		 jne	 $LN2@operator@36
  0012a	85 ff		 test	 edi, edi
  0012c	0f 8e 7e 00 00
	00		 jle	 $LL172@operator@36

; 678  : 			if (_Traits::eq_int_type(_Traits::eof(),
; 679  : 				_Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val))))

  00132	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  00135	8a 02		 mov	 al, BYTE PTR [edx]
  00137	8b 4d e0	 mov	 ecx, DWORD PTR tv542[ebp]
  0013a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0013c	8b 52 28	 mov	 edx, DWORD PTR [edx+40]
  0013f	88 45 dc	 mov	 BYTE PTR $T194574[ebp], al
  00142	8b 45 dc	 mov	 eax, DWORD PTR $T194574[ebp]
  00145	50		 push	 eax
  00146	ff d2		 call	 edx
  00148	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0014a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0014d	8b 4c 32 28	 mov	 ecx, DWORD PTR [edx+esi+40]
  00151	0f b7 c0	 movzx	 eax, ax
  00154	0f b7 d0	 movzx	 edx, ax
  00157	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0015a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0015d	74 28		 je	 SHORT $LN66@operator@36
  0015f	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00162	83 38 00	 cmp	 DWORD PTR [eax], 0
  00165	7e 20		 jle	 SHORT $LN66@operator@36
  00167	ff 08		 dec	 DWORD PTR [eax]
  00169	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0016c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0016e	8d 58 02	 lea	 ebx, DWORD PTR [eax+2]
  00171	89 19		 mov	 DWORD PTR [ecx], ebx
  00173	8b 5d e8	 mov	 ebx, DWORD PTR __Pad$[ebp]
  00176	66 89 10	 mov	 WORD PTR [eax], dx
  00179	0f b7 c2	 movzx	 eax, dx
  0017c	eb 17		 jmp	 SHORT $LN67@operator@36
$LN12@operator@36:

; 669  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  0017e	4b		 dec	 ebx
  0017f	89 5d e8	 mov	 DWORD PTR __Pad$[ebp], ebx
  00182	e9 3d ff ff ff	 jmp	 $LL13@operator@36

; 678  : 			if (_Traits::eq_int_type(_Traits::eof(),
; 679  : 				_Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val))))

$LN66@operator@36:
  00187	8b 01		 mov	 eax, DWORD PTR [ecx]
  00189	52		 push	 edx
  0018a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0018d	ff d2		 call	 edx
  0018f	0f b7 c0	 movzx	 eax, ax
  00192	0f b7 c0	 movzx	 eax, ax
$LN67@operator@36:
  00195	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0019a	66 3b c8	 cmp	 cx, ax
  0019d	75 07		 jne	 SHORT $LN8@operator@36

; 680  : 					_State |= ios_base::badbit;

  0019f	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN8@operator@36:

; 674  : 					break;
; 675  : 					}
; 676  : 
; 677  : 		for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val)

  001a6	4f		 dec	 edi
  001a7	ff 45 0c	 inc	 DWORD PTR __Val$[ebp]
  001aa	e9 71 ff ff ff	 jmp	 $LL171@operator@36
  001af	90		 npad	 1
$LL172@operator@36:

; 681  : 
; 682  : 		if (_State == ios_base::goodbit)
; 683  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  001b0	85 db		 test	 ebx, ebx
  001b2	7e 50		 jle	 SHORT $LN2@operator@36

; 684  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 685  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  001b4	8b 16		 mov	 edx, DWORD PTR [esi]
  001b6	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001b9	8b 4c 30 28	 mov	 ecx, DWORD PTR [eax+esi+40]
  001bd	0f b7 54 30 30	 movzx	 edx, WORD PTR [eax+esi+48]
  001c2	03 c6		 add	 eax, esi
  001c4	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  001c7	83 38 00	 cmp	 DWORD PTR [eax], 0
  001ca	74 1c		 je	 SHORT $LN88@operator@36
  001cc	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  001cf	83 38 00	 cmp	 DWORD PTR [eax], 0
  001d2	7e 14		 jle	 SHORT $LN88@operator@36
  001d4	ff 08		 dec	 DWORD PTR [eax]
  001d6	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  001d9	8b 01		 mov	 eax, DWORD PTR [ecx]
  001db	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  001de	89 39		 mov	 DWORD PTR [ecx], edi
  001e0	66 89 10	 mov	 WORD PTR [eax], dx
  001e3	0f b7 c2	 movzx	 eax, dx
  001e6	eb 0e		 jmp	 SHORT $LN89@operator@36
$LN88@operator@36:
  001e8	8b 01		 mov	 eax, DWORD PTR [ecx]
  001ea	52		 push	 edx
  001eb	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001ee	ff d2		 call	 edx
  001f0	0f b7 c0	 movzx	 eax, ax
  001f3	0f b7 c0	 movzx	 eax, ax
$LN89@operator@36:
  001f6	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  001fb	66 3b c8	 cmp	 cx, ax
  001fe	75 15		 jne	 SHORT $LN3@operator@36

; 686  : 					{	// insertion failed, quit
; 687  : 					_State |= ios_base::badbit;

  00200	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4
$LN2@operator@36:

; 688  : 					break;
; 689  : 					}
; 690  : 		_Ostr.width(0);

  00204	8b 16		 mov	 edx, DWORD PTR [esi]
  00206	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00209	03 c6		 add	 eax, esi
  0020b	33 c9		 xor	 ecx, ecx
  0020d	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  00210	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ecx
  00213	eb 3b		 jmp	 SHORT $LN181@operator@36
$LN3@operator@36:

; 681  : 
; 682  : 		if (_State == ios_base::goodbit)
; 683  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00215	4b		 dec	 ebx
  00216	eb 98		 jmp	 SHORT $LL172@operator@36
__catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$0:

; 691  : 		_CATCH_IO_(_Ostr)

  00218	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0021b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0021d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00220	03 c1		 add	 eax, ecx
  00222	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00225	83 c9 04	 or	 ecx, 4
  00228	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  0022c	75 03		 jne	 SHORT $LN113@operator@36
  0022e	83 c9 04	 or	 ecx, 4
$LN113@operator@36:
  00231	83 e1 17	 and	 ecx, 23			; 00000017H
  00234	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00237	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  0023a	0f 85 7f 00 00
	00		 jne	 $LN122@operator@36
  00240	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00247	b8 00 00 00 00	 mov	 eax, $LN178@operator@36
  0024c	c3		 ret	 0
$LN178@operator@36:
  0024d	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
$LN181@operator@36:
  00250	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
$LN27@operator@36:

; 692  : 		}
; 693  : 
; 694  : 	_Ostr.setstate(_State);

  00253	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00255	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00258	03 ce		 add	 ecx, esi
  0025a	85 d2		 test	 edx, edx
  0025c	74 16		 je	 SHORT $LN145@operator@36
  0025e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00261	0b c2		 or	 eax, edx
  00263	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00267	75 03		 jne	 SHORT $LN147@operator@36
  00269	83 c8 04	 or	 eax, 4
$LN147@operator@36:
  0026c	6a 00		 push	 0
  0026e	50		 push	 eax
  0026f	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN145@operator@36:

; 695  : 	return (_Ostr);

  00274	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 7
  0027b	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00280	84 c0		 test	 al, al
  00282	75 08		 jne	 SHORT $LN149@operator@36
  00284	8b 4d d4	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00287	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
$LN149@operator@36:
  0028c	8b 45 d4	 mov	 eax, DWORD PTR __Ok$[ebp]
  0028f	8b 10		 mov	 edx, DWORD PTR [eax]
  00291	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00294	8b 44 01 28	 mov	 eax, DWORD PTR [ecx+eax+40]
  00298	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0029f	85 c0		 test	 eax, eax
  002a1	74 08		 je	 SHORT $LN160@operator@36
  002a3	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  002a6	e8 00 00 00 00	 call	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN160@operator@36:
  002ab	8b c6		 mov	 eax, esi

; 696  : 	}

  002ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  002b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002b7	59		 pop	 ecx
  002b8	5f		 pop	 edi
  002b9	5e		 pop	 esi
  002ba	5b		 pop	 ebx
  002bb	8b e5		 mov	 esp, ebp
  002bd	5d		 pop	 ebp
  002be	c3		 ret	 0

; 691  : 		_CATCH_IO_(_Ostr)

$LN122@operator@36:
  002bf	6a 00		 push	 0
  002c1	6a 00		 push	 0
  002c3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN180@operator@36:
  002c8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T194485[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$10:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_7?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`vftable'
PUBLIC	??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
PUBLIC	??_R4?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?IsNotEnd@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::IsNotEnd
PUBLIC	?Next@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBEXXZ ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::Next
EXTRN	??_E?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R0?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8 DD 00H ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std'
	DB	'@@@ForEach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@ DD 00H ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@@8
	DD	FLAT:??_R3?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@ DD FLAT:??_R4?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`vftable'
	DD	FLAT:??_E?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:?IsNotEnd@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
	DD	FLAT:?Next@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z$0
__ehfuncinfo$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
xdata$x	ENDS
;	COMDAT ??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_container$ = 8						; size = 4
??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z PROC ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 36   : 				: ContainerCopy (container), EndIterator (ContainerCopy.end()), Iterator (ContainerCopy.begin()) { }

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002a	33 db		 xor	 ebx, ebx
  0002c	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
  00030	88 5e 05	 mov	 BYTE PTR [esi+5], bl
  00033	8b 44 24 24	 mov	 eax, DWORD PTR _container$[esp+28]
  00037	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  0003a	50		 push	 eax
  0003b	8b cf		 mov	 ecx, edi
  0003d	89 5c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebx
  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@6B@
  00047	e8 00 00 00 00	 call	 ??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >
  0004c	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0004f	89 5e 24	 mov	 DWORD PTR [esi+36], ebx
  00052	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00055	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00057	89 4e 24	 mov	 DWORD PTR [esi+36], ecx
  0005a	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0005d	8b 02		 mov	 eax, DWORD PTR [edx]
  0005f	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00062	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00065	8b 07		 mov	 eax, DWORD PTR [edi]
  00067	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  0006a	8b c6		 mov	 eax, esi
  0006c	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  00070	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00077	59		 pop	 ecx
  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z ENDP ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogtpy
;	COMDAT ?IsNotEnd@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
_TEXT	SEGMENT
?IsNotEnd@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBE_NXZ PROC ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::IsNotEnd, COMDAT
; _this$ = ecx

; 38   : 			virtual bool IsNotEnd () const { bool r = InnerContinue && Iterator != EndIterator; InnerContinue = false; return r; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  00007	74 21		 je	 SHORT $LN3@IsNotEnd@2
  00009	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0000c	85 c0		 test	 eax, eax
  0000e	74 05		 je	 SHORT $LN10@IsNotEnd@2
  00010	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  00013	74 05		 je	 SHORT $LN9@IsNotEnd@2
$LN10@IsNotEnd@2:
  00015	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@IsNotEnd@2:
  0001a	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0001d	3b 46 28	 cmp	 eax, DWORD PTR [esi+40]
  00020	74 08		 je	 SHORT $LN3@IsNotEnd@2
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	b0 01		 mov	 al, 1
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
$LN3@IsNotEnd@2:
  0002a	32 c0		 xor	 al, al
  0002c	88 46 04	 mov	 BYTE PTR [esi+4], al
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
?IsNotEnd@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ENDP ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::IsNotEnd
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Next@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBEXXZ
_TEXT	SEGMENT
?Next@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBEXXZ PROC ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::Next, COMDAT
; _this$ = ecx

; 39   : 			virtual void Next () const { ++Iterator; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00006	85 c0		 test	 eax, eax
  00008	75 0c		 jne	 SHORT $LN25@Next@2
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000f	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00012	85 c0		 test	 eax, eax
  00014	74 04		 je	 SHORT $LN19@Next@2
$LN25@Next@2:
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	eb 02		 jmp	 SHORT $LN20@Next@2
$LN19@Next@2:
  0001a	33 c0		 xor	 eax, eax
$LN20@Next@2:
  0001c	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0001f	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00022	75 05		 jne	 SHORT $LN5@Next@2
  00024	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Next@2:
  00029	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00031	5e		 pop	 esi
  00032	c3		 ret	 0
?Next@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UBEXXZ ENDP ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::Next
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z PROC ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
  00004	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  00007	8b cf		 mov	 ecx, edi
  00009	e8 00 00 00 00	 call	 ?_Tidy@?$list@KV?$allocator@K@std@@@std@@IAEXXZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Tidy
  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
  00019	f6 44 24 0c 01	 test	 BYTE PTR ___flags$[esp+4], 1
  0001e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00024	74 09		 je	 SHORT $LN22@scalar@33
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002c	83 c4 04	 add	 esp, 4
$LN22@scalar@33:
  0002f	5f		 pop	 edi
  00030	8b c6		 mov	 eax, esi
  00032	5e		 pop	 esi
  00033	c2 04 00	 ret	 4
??_G?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z ENDP ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z ; std::_Construct<HostDevice,HostDevice>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
xdata$x	SEGMENT
__unwindtable$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z
_TEXT	SEGMENT
$T195189 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z PROC ; std::_Construct<HostDevice,HostDevice>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00014	33 c4		 xor	 eax, esp
  00016	50		 push	 eax
  00017	8d 44 24 08	 lea	 eax, DWORD PTR __$EHRec$[esp+20]
  0001b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 51   : 	void _FARQ *_Vptr = _Ptr;

  00021	8b 4c 24 18	 mov	 ecx, DWORD PTR __Ptr$[esp+16]
  00025	89 4c 24 18	 mov	 DWORD PTR __Vptr$[esp+16], ecx

; 52   : 	::new (_Vptr) _T1(_Val);

  00029	89 4c 24 04	 mov	 DWORD PTR $T195189[esp+20], ecx
  0002d	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+28], 0
  00035	85 c9		 test	 ecx, ecx
  00037	74 0a		 je	 SHORT $LN3@Construct@4
  00039	8b 44 24 1c	 mov	 eax, DWORD PTR __Val$[esp+16]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN3@Construct@4:

; 53   : 	}

  00043	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00047	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004e	59		 pop	 ecx
  0004f	83 c4 10	 add	 esp, 16			; 00000010H
  00052	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z$0:
  00000	8b 45 04	 mov	 eax, DWORD PTR __Vptr$[ebp-4]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T195189[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z ENDP ; std::_Construct<HostDevice,HostDevice>
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 02H
	DD	02H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$10
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
$T195210 = -48						; size = 8
$T195209 = -48						; size = 8
__Ok$ = -40						; size = 8
$T195229 = -32						; size = 1
$T195204 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 264  : 		{	// insert an int

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 265  : 		ios_base::iostate _State = ios_base::goodbit;

  00030	33 ff		 xor	 edi, edi

; 266  : 		const sentry _Ok(*this);

  00032	56		 push	 esi
  00033	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00036	33 db		 xor	 ebx, ebx
  00038	89 7d e8	 mov	 DWORD PTR __State$[ebp], edi
  0003b	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00040	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 267  : 
; 268  : 		if (_Ok)

  00043	38 5d dc	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00046	74 74		 je	 SHORT $LN14@operator@37

; 269  : 			{	// state okay, use facet to insert
; 270  : 			const _Nput& _Nput_fac = _USE(ios_base::getloc(), _Nput);

  00048	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004d	8d 45 e4	 lea	 eax, DWORD PTR $T195204[ebp]
  00050	50		 push	 eax
  00051	03 ce		 add	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00058	50		 push	 eax
  00059	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0005d	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00062	83 c4 04	 add	 esp, 4
  00065	8d 4d e4	 lea	 ecx, DWORD PTR $T195204[ebp]
  00068	8b f8		 mov	 edi, eax
  0006a	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 271  : 			ios_base::fmtflags _Bfl =
; 272  : 				ios_base::flags() & ios_base::basefield;

  0006f	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 273  : 			long _Tmp = (_Bfl == ios_base::oct
; 274  : 				|| _Bfl == ios_base::hex)
; 275  : 				? (long)(unsigned int)_Val : (long)_Val;
; 276  : 
; 277  : 			_TRY_IO_BEGIN
; 278  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 279  : 				_Myios::fill(), _Tmp).failed())

  00071	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00074	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00077	8d 0c 32	 lea	 ecx, DWORD PTR [edx+esi]
  0007a	8a 51 30	 mov	 dl, BYTE PTR [ecx+48]
  0007d	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00080	88 5d d0	 mov	 BYTE PTR $T195209[ebp], bl
  00083	8b 5d 08	 mov	 ebx, DWORD PTR __Val$[ebp]
  00086	53		 push	 ebx
  00087	88 55 e0	 mov	 BYTE PTR $T195229[ebp], dl
  0008a	8b 5d e0	 mov	 ebx, DWORD PTR $T195229[ebp]
  0008d	8b 17		 mov	 edx, DWORD PTR [edi]
  0008f	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  00092	53		 push	 ebx
  00093	03 c6		 add	 eax, esi
  00095	50		 push	 eax
  00096	8b 45 d0	 mov	 eax, DWORD PTR $T195209[ebp]
  00099	51		 push	 ecx
  0009a	50		 push	 eax
  0009b	8d 4d d0	 lea	 ecx, DWORD PTR $T195210[ebp]
  0009e	51		 push	 ecx
  0009f	8b cf		 mov	 ecx, edi
  000a1	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000a5	ff d2		 call	 edx
  000a7	80 7d d0 00	 cmp	 BYTE PTR $T195210[ebp], 0

; 280  : 				_State |= ios_base::badbit;

  000ab	bf 04 00 00 00	 mov	 edi, 4
  000b0	75 03		 jne	 SHORT $LN1@operator@37
  000b2	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
$LN1@operator@37:
  000b5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN14@operator@37:

; 282  : 			}
; 283  : 
; 284  : 		_Myios::setstate(_State);

  000bc	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000be	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c1	03 ce		 add	 ecx, esi
  000c3	85 ff		 test	 edi, edi
  000c5	74 16		 je	 SHORT $LN69@operator@37
  000c7	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ca	0b c7		 or	 eax, edi
  000cc	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  000d0	75 03		 jne	 SHORT $LN71@operator@37
  000d2	83 c8 04	 or	 eax, 4
$LN71@operator@37:
  000d5	6a 00		 push	 0
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN69@operator@37:

; 285  : 		return (*this);

  000dd	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000e0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000e7	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  000ec	8b c6		 mov	 eax, esi

; 286  : 		}

  000ee	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f8	59		 pop	 ecx
  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
  000fb	5b		 pop	 ebx
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 04 00	 ret	 4
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$0:

; 281  : 			_CATCH_IO_END

  00102	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	8b 01		 mov	 eax, DWORD PTR [ecx]
  00107	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0010a	03 c1		 add	 eax, ecx
  0010c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0010f	83 c9 04	 or	 ecx, 4
  00112	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  00116	75 03		 jne	 SHORT $LN37@operator@37
  00118	83 c9 04	 or	 ecx, 4
$LN37@operator@37:
  0011b	83 e1 17	 and	 ecx, 23			; 00000017H
  0011e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00121	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  00124	75 15		 jne	 SHORT $LN46@operator@37
  00126	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0012d	b8 00 00 00 00	 mov	 eax, $LN15@operator@37
  00132	c3		 ret	 0
$LN15@operator@37:
  00133	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00136	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
  00139	eb 81		 jmp	 SHORT $LN14@operator@37
$LN46@operator@37:
  0013b	6a 00		 push	 0
  0013d	6a 00		 push	 0
  0013f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN77@operator@37:
  00144	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T195204[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z DD 02H
	DD	02H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$10
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
_TEXT	SEGMENT
$T195400 = -48						; size = 8
$T195399 = -48						; size = 8
__Ok$ = -40						; size = 8
$T195415 = -32						; size = 1
$T195396 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 329  : 		{	// insert an unsigned long

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 330  : 		ios_base::iostate _State = ios_base::goodbit;

  00030	33 ff		 xor	 edi, edi

; 331  : 		const sentry _Ok(*this);

  00032	56		 push	 esi
  00033	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00036	33 db		 xor	 ebx, ebx
  00038	89 7d e8	 mov	 DWORD PTR __State$[ebp], edi
  0003b	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00040	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 332  : 
; 333  : 		if (_Ok)

  00043	38 5d dc	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00046	74 74		 je	 SHORT $LN12@operator@38

; 334  : 			{	// state okay, use facet to insert
; 335  : 			const _Nput& _Nput_fac = _USE(ios_base::getloc(), _Nput);

  00048	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004d	8d 45 e4	 lea	 eax, DWORD PTR $T195396[ebp]
  00050	50		 push	 eax
  00051	03 ce		 add	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00058	50		 push	 eax
  00059	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0005d	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00062	83 c4 04	 add	 esp, 4
  00065	8d 4d e4	 lea	 ecx, DWORD PTR $T195396[ebp]
  00068	8b f8		 mov	 edi, eax
  0006a	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 336  : 
; 337  : 			_TRY_IO_BEGIN
; 338  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 339  : 				_Myios::fill(), (unsigned long)_Val).failed())

  0006f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00071	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00074	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00077	8d 0c 32	 lea	 ecx, DWORD PTR [edx+esi]
  0007a	8a 51 30	 mov	 dl, BYTE PTR [ecx+48]
  0007d	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00080	88 5d d0	 mov	 BYTE PTR $T195399[ebp], bl
  00083	8b 5d 08	 mov	 ebx, DWORD PTR __Val$[ebp]
  00086	53		 push	 ebx
  00087	88 55 e0	 mov	 BYTE PTR $T195415[ebp], dl
  0008a	8b 5d e0	 mov	 ebx, DWORD PTR $T195415[ebp]
  0008d	8b 17		 mov	 edx, DWORD PTR [edi]
  0008f	8b 52 18	 mov	 edx, DWORD PTR [edx+24]
  00092	53		 push	 ebx
  00093	03 c6		 add	 eax, esi
  00095	50		 push	 eax
  00096	8b 45 d0	 mov	 eax, DWORD PTR $T195399[ebp]
  00099	51		 push	 ecx
  0009a	50		 push	 eax
  0009b	8d 4d d0	 lea	 ecx, DWORD PTR $T195400[ebp]
  0009e	51		 push	 ecx
  0009f	8b cf		 mov	 ecx, edi
  000a1	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000a5	ff d2		 call	 edx
  000a7	80 7d d0 00	 cmp	 BYTE PTR $T195400[ebp], 0

; 340  : 				_State |= ios_base::badbit;

  000ab	bf 04 00 00 00	 mov	 edi, 4
  000b0	75 03		 jne	 SHORT $LN1@operator@38
  000b2	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
$LN1@operator@38:
  000b5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN12@operator@38:

; 342  : 			}
; 343  : 
; 344  : 		_Myios::setstate(_State);

  000bc	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000be	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c1	03 ce		 add	 ecx, esi
  000c3	85 ff		 test	 edi, edi
  000c5	74 16		 je	 SHORT $LN65@operator@38
  000c7	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ca	0b c7		 or	 eax, edi
  000cc	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  000d0	75 03		 jne	 SHORT $LN67@operator@38
  000d2	83 c8 04	 or	 eax, 4
$LN67@operator@38:
  000d5	6a 00		 push	 0
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN65@operator@38:

; 345  : 		return (*this);

  000dd	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000e0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000e7	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  000ec	8b c6		 mov	 eax, esi

; 346  : 		}

  000ee	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f8	59		 pop	 ecx
  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
  000fb	5b		 pop	 ebx
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 04 00	 ret	 4
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$0:

; 341  : 			_CATCH_IO_END

  00102	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	8b 01		 mov	 eax, DWORD PTR [ecx]
  00107	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0010a	03 c1		 add	 eax, ecx
  0010c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0010f	83 c9 04	 or	 ecx, 4
  00112	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  00116	75 03		 jne	 SHORT $LN33@operator@38
  00118	83 c9 04	 or	 ecx, 4
$LN33@operator@38:
  0011b	83 e1 17	 and	 ecx, 23			; 00000017H
  0011e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00121	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  00124	75 15		 jne	 SHORT $LN42@operator@38
  00126	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0012d	b8 00 00 00 00	 mov	 eax, $LN13@operator@38
  00132	c3		 ret	 0
$LN13@operator@38:
  00133	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00136	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
  00139	eb 81		 jmp	 SHORT $LN12@operator@38
$LN42@operator@38:
  0013b	6a 00		 push	 0
  0013d	6a 00		 push	 0
  0013f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN73@operator@38:
  00144	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T195396[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z DD 02H
	DD	02H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$10
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
_TEXT	SEGMENT
$T195585 = -48						; size = 8
__Ok$ = -40						; size = 8
$T195601 = -32						; size = 1
$T195582 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T195586 = 8						; size = 8
__Val$ = 8						; size = 8
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 370  : 		{	// insert an unsigned long long

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 371  : 		ios_base::iostate _State = ios_base::goodbit;

  00030	33 ff		 xor	 edi, edi

; 372  : 		const sentry _Ok(*this);

  00032	56		 push	 esi
  00033	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00036	33 db		 xor	 ebx, ebx
  00038	89 7d e8	 mov	 DWORD PTR __State$[ebp], edi
  0003b	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00040	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 373  : 
; 374  : 		if (_Ok)

  00043	38 5d dc	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00046	74 78		 je	 SHORT $LN12@operator@39

; 375  : 			{	// state okay, use facet to insert
; 376  : 			const _Nput& _Nput_fac = _USE(ios_base::getloc(), _Nput);

  00048	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004d	8d 45 e4	 lea	 eax, DWORD PTR $T195582[ebp]
  00050	50		 push	 eax
  00051	03 ce		 add	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00058	50		 push	 eax
  00059	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0005d	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00062	83 c4 04	 add	 esp, 4
  00065	8d 4d e4	 lea	 ecx, DWORD PTR $T195582[ebp]
  00068	8b f8		 mov	 edi, eax
  0006a	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 377  : 
; 378  : 			_TRY_IO_BEGIN
; 379  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 380  : 				_Myios::fill(), _Val).failed())

  0006f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00071	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00074	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00077	8d 0c 32	 lea	 ecx, DWORD PTR [edx+esi]
  0007a	8a 51 30	 mov	 dl, BYTE PTR [ecx+48]
  0007d	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00080	88 5d d0	 mov	 BYTE PTR $T195585[ebp], bl
  00083	8b 5d 0c	 mov	 ebx, DWORD PTR __Val$[ebp+4]
  00086	53		 push	 ebx
  00087	8b 5d 08	 mov	 ebx, DWORD PTR __Val$[ebp]
  0008a	53		 push	 ebx
  0008b	88 55 e0	 mov	 BYTE PTR $T195601[ebp], dl
  0008e	8b 5d e0	 mov	 ebx, DWORD PTR $T195601[ebp]
  00091	8b 17		 mov	 edx, DWORD PTR [edi]
  00093	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  00096	53		 push	 ebx
  00097	03 c6		 add	 eax, esi
  00099	50		 push	 eax
  0009a	8b 45 d0	 mov	 eax, DWORD PTR $T195585[ebp]
  0009d	51		 push	 ecx
  0009e	50		 push	 eax
  0009f	8d 4d 08	 lea	 ecx, DWORD PTR $T195586[ebp]
  000a2	51		 push	 ecx
  000a3	8b cf		 mov	 ecx, edi
  000a5	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000a9	ff d2		 call	 edx
  000ab	80 7d 08 00	 cmp	 BYTE PTR $T195586[ebp], 0

; 381  : 				_State |= ios_base::badbit;

  000af	bf 04 00 00 00	 mov	 edi, 4
  000b4	75 03		 jne	 SHORT $LN1@operator@39
  000b6	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
$LN1@operator@39:
  000b9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN12@operator@39:

; 383  : 			}
; 384  : 
; 385  : 		_Myios::setstate(_State);

  000c0	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000c2	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c5	03 ce		 add	 ecx, esi
  000c7	85 ff		 test	 edi, edi
  000c9	74 16		 je	 SHORT $LN65@operator@39
  000cb	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ce	0b c7		 or	 eax, edi
  000d0	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  000d4	75 03		 jne	 SHORT $LN67@operator@39
  000d6	83 c8 04	 or	 eax, 4
$LN67@operator@39:
  000d9	6a 00		 push	 0
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN65@operator@39:

; 386  : 		return (*this);

  000e1	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000e4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000eb	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  000f0	8b c6		 mov	 eax, esi

; 387  : 		}

  000f2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fc	59		 pop	 ecx
  000fd	5f		 pop	 edi
  000fe	5e		 pop	 esi
  000ff	5b		 pop	 ebx
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c2 08 00	 ret	 8
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$0:

; 382  : 			_CATCH_IO_END

  00106	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	8b 01		 mov	 eax, DWORD PTR [ecx]
  0010b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0010e	03 c1		 add	 eax, ecx
  00110	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00113	83 c9 04	 or	 ecx, 4
  00116	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  0011a	75 03		 jne	 SHORT $LN33@operator@39
  0011c	83 c9 04	 or	 ecx, 4
$LN33@operator@39:
  0011f	83 e1 17	 and	 ecx, 23			; 00000017H
  00122	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00125	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  00128	75 15		 jne	 SHORT $LN42@operator@39
  0012a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00131	b8 00 00 00 00	 mov	 eax, $LN13@operator@39
  00136	c3		 ret	 0
$LN13@operator@39:
  00137	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0013a	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
  0013d	eb 81		 jmp	 SHORT $LN12@operator@39
$LN42@operator@39:
  0013f	6a 00		 push	 0
  00141	6a 00		 push	 0
  00143	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN73@operator@39:
  00148	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T195582[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T195772 = -8						; size = 8
?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 1060 : 		erase(begin(), end());

  00008	8b 6e 10	 mov	 ebp, DWORD PTR [esi+16]
  0000b	57		 push	 edi
  0000c	39 6e 0c	 cmp	 DWORD PTR [esi+12], ebp
  0000f	76 05		 jbe	 SHORT $LN9@clear@5
  00011	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@clear@5:
  00016	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00019	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0001b	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0001e	76 05		 jbe	 SHORT $LN28@clear@5
  00020	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN28@clear@5:
  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	55		 push	 ebp
  00028	53		 push	 ebx
  00029	57		 push	 edi
  0002a	50		 push	 eax
  0002b	8d 44 24 20	 lea	 eax, DWORD PTR $T195772[esp+40]
  0002f	50		 push	 eax
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::erase
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5d		 pop	 ebp
  0003a	5b		 pop	 ebx

; 1061 : 		}

  0003b	83 c4 08	 add	 esp, 8
  0003e	c3		 ret	 0
?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::clear
_TEXT	ENDS
PUBLIC	??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	04cH
CONST	ENDS
;	COMDAT ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	054H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1
__ehfuncinfo$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
_TEXT	SEGMENT
$T195921 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 484  : 		{	// construct empty character buffer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002b	33 c0		 xor	 eax, eax
  0002d	89 44 24 0c	 mov	 DWORD PTR $T195921[esp+32], eax
  00031	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+28], eax
  00035	74 20		 je	 SHORT $LN1@basic_stri@7
  00037	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  0003d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  00044	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  0004b	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  0004f	c7 44 24 0c 01
	00 00 00	 mov	 DWORD PTR $T195921[esp+32], 1
$LN1@basic_stri@7:
  00057	50		 push	 eax
  00058	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  0005b	57		 push	 edi
  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >
  00063	8b 06		 mov	 eax, DWORD PTR [esi]
  00065	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00068	8b 54 24 24	 mov	 edx, DWORD PTR __Mode$[esp+28]
  0006c	c7 04 0e 00 00
	00 00		 mov	 DWORD PTR [esi+ecx], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00073	52		 push	 edx
  00074	8b cf		 mov	 ecx, edi
  00076	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+44], 1
  0007e	e8 00 00 00 00	 call	 ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >

; 485  : 		}

  00083	8b c6		 mov	 eax, esi
  00085	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	83 c4 14	 add	 esp, 20			; 00000014H
  00096	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T195921[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_stri@7
  0000c	83 65 ec fe	 and	 DWORD PTR $T195921[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 54	 add	 ecx, 84			; 00000054H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_stri@7:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
__ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  0002e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::~_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T196123 = -20						; size = 8
__$EHRec$ = -12						; size = 12
??1?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::~_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >, COMDAT
; _this$ = ecx

; 539  : 		{	// destroy tree

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 08	 mov	 DWORD PTR _this$[esp+32], esi

; 540  : 		_Tidy();

  0002a	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0002d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002f	8b 10		 mov	 edx, DWORD PTR [eax]
  00031	50		 push	 eax
  00032	51		 push	 ecx
  00033	52		 push	 edx
  00034	51		 push	 ecx
  00035	8d 44 24 1c	 lea	 eax, DWORD PTR $T196123[esp+48]
  00039	50		 push	 eax
  0003a	8b ce		 mov	 ecx, esi
  0003c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00044	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::erase
  00049	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 541  : 		}

  00052	8b 16		 mov	 edx, DWORD PTR [esi]
  00054	52		 push	 edx
  00055	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  0005c	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00063	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00068	83 c4 08	 add	 esp, 8
  0006b	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  0006f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00076	59		 pop	 ecx
  00077	5e		 pop	 esi
  00078	83 c4 18	 add	 esp, 24			; 00000018H
  0007b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ$0:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ
__ehhandler$??1?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::~_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
PUBLIC	??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
PUBLIC	??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
PUBLIC	??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
	DD	04cH
CONST	ENDS
;	COMDAT ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
	DD	054H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$1
__ehfuncinfo$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
_TEXT	SEGMENT
$T196242 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 484  : 		{	// construct empty character buffer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002b	33 c0		 xor	 eax, eax
  0002d	89 44 24 0c	 mov	 DWORD PTR $T196242[esp+32], eax
  00031	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+28], eax
  00035	74 20		 je	 SHORT $LN1@basic_stri@8
  00037	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
  0003d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
  00044	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  0004b	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  0004f	c7 44 24 0c 01
	00 00 00	 mov	 DWORD PTR $T196242[esp+32], 1
$LN1@basic_stri@8:
  00057	50		 push	 eax
  00058	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  0005b	57		 push	 edi
  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >
  00063	8b 06		 mov	 eax, DWORD PTR [esi]
  00065	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00068	8b 54 24 24	 mov	 edx, DWORD PTR __Mode$[esp+28]
  0006c	c7 04 0e 00 00
	00 00		 mov	 DWORD PTR [esi+ecx], OFFSET ??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  00073	52		 push	 edx
  00074	8b cf		 mov	 ecx, edi
  00076	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+44], 1
  0007e	e8 00 00 00 00	 call	 ??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 485  : 		}

  00083	8b c6		 mov	 eax, esi
  00085	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	83 c4 14	 add	 esp, 20			; 00000014H
  00096	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T196242[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_stri@8
  0000c	83 65 ec fe	 and	 DWORD PTR $T196242[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 54	 add	 ecx, 84			; 00000054H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN5@basic_stri@8:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  0002e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z ; std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node::_Node
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??0_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z
_TEXT	SEGMENT
__Larg$ = 8						; size = 4
__Parg$ = 12						; size = 4
__Rarg$ = 16						; size = 4
__Val$ = 20						; size = 4
__Carg$ = 24						; size = 1
??0_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z PROC ; std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node::_Node, COMDAT
; _this$ = ecx

; 38   : 			{	// construct a node with value

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Larg$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __Rarg$[esp-4]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Parg$[esp]
  0000f	89 06		 mov	 DWORD PTR [esi], eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Val$[esp]
  00015	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00018	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	83 c0 08	 add	 eax, 8
  00020	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00023	50		 push	 eax
  00024	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00027	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
  0002c	8a 54 24 18	 mov	 dl, BYTE PTR __Carg$[esp]
  00030	88 96 a0 00 00
	00		 mov	 BYTE PTR [esi+160], dl
  00036	c6 86 a1 00 00
	00 00		 mov	 BYTE PTR [esi+161], 0

; 39   : 			}

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	c2 14 00	 ret	 20			; 00000014H
??0_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Node::_Node
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
;	COMDAT ??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z
_TEXT	SEGMENT
$T196273 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_container$ = 12					; size = 4
??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >, COMDAT

; 69   : 		{

  00000	51		 push	 ecx

; 70   : 			return ContainerForward <T> (container);

  00001	8b 44 24 0c	 mov	 eax, DWORD PTR _container$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	50		 push	 eax
  0000b	8b ce		 mov	 ecx, esi
  0000d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T196273[esp+12], 0
  00015	e8 00 00 00 00	 call	 ??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi

; 71   : 		}

  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU3@@Z ; std::allocator<HostDevice>::construct
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU3@@Z PROC ; std::allocator<HostDevice>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00008	50		 push	 eax
  00009	51		 push	 ecx
  0000a	e8 00 00 00 00	 call	 ??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z ; std::_Construct<HostDevice,HostDevice>
  0000f	83 c4 08	 add	 esp, 8

; 156  : 		}

  00012	c2 08 00	 ret	 8
?construct@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU3@@Z ENDP ; std::allocator<HostDevice>::construct
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3
__unwindtable$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T196305 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Vptr$196311 = 8					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

  0002b	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 128  : 
; 129  : 	_TRY_BEGIN

  0002e	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00031	33 db		 xor	 ebx, ebx
  00033	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL6@Uninit_cop@3:

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

  00040	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  00043	74 55		 je	 SHORT $LN4@Uninit_cop@3

; 131  : 		_Al.construct(_Dest, *_First);

  00045	89 75 08	 mov	 DWORD PTR __Vptr$196311[ebp], esi
  00048	89 75 e8	 mov	 DWORD PTR $T196305[ebp], esi
  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004f	3b f3		 cmp	 esi, ebx
  00051	74 08		 je	 SHORT $LN18@Uninit_cop@3
  00053	57		 push	 edi
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN18@Uninit_cop@3:
  0005b	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00061	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00064	89 75 10	 mov	 DWORD PTR __Dest$[ebp], esi
  00067	81 c7 88 00 00
	00		 add	 edi, 136		; 00000088H
  0006d	eb d1		 jmp	 SHORT $LL6@Uninit_cop@3
__catch$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00072	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00075	3b f7		 cmp	 esi, edi
  00077	74 18		 je	 SHORT $LN1@Uninit_cop@3
  00079	8d a4 24 00 00
	00 00		 npad	 7
$LL3@Uninit_cop@3:

; 134  : 		_Al.destroy(_Next);

  00080	8b ce		 mov	 ecx, esi
  00082	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00087	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0008d	3b f7		 cmp	 esi, edi
  0008f	75 ef		 jne	 SHORT $LL3@Uninit_cop@3
$LN1@Uninit_cop@3:

; 135  : 	_RERAISE;

  00091	33 db		 xor	 ebx, ebx
  00093	53		 push	 ebx
  00094	53		 push	 ebx
  00095	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Uninit_cop@3:

; 136  : 	_CATCH_END
; 137  : 	return (_Dest);

  0009a	8b c6		 mov	 eax, esi

; 138  : 	}

  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
$LN35@Uninit_cop@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Vptr$196311[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T196305[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >
PUBLIC	??1?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE@XZ ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::~map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE@XZ PROC ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::~map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::~_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
??1?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::~map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >
_TEXT	ENDS
PUBLIC	??_C@_03PFGLPIPP@?9sp?$AA@			; `string'
PUBLIC	??_C@_04DFMLABPB@?9x64?$AA@			; `string'
PUBLIC	??_C@_06FNMLEPMI@?9basic?$AA@			; `string'
PUBLIC	??_C@_05NIKDGMHP@Basic?$AA@			; `string'
PUBLIC	??_C@_08KHECKGMK@?9starter?$AA@			; `string'
PUBLIC	??_C@_09FDAPKNJ@?9ultimate?$AA@			; `string'
PUBLIC	??_C@_08DIOBIMMC@Ultimate?$AA@			; `string'
PUBLIC	??_C@_0M@BOLPHPEH@?9datacenter?$AA@		; `string'
PUBLIC	??_C@_0L@OOPFNAF@Datacenter?$AA@		; `string'
PUBLIC	??_C@_0M@CCIJFPDH@?9enterprise?$AA@		; `string'
PUBLIC	??_C@_0L@DCNJHNHF@Enterprise?$AA@		; `string'
PUBLIC	??_C@_09LKNHIPDK@?9business?$AA@		; `string'
PUBLIC	??_C@_08IHAGPJCB@Business?$AA@			; `string'
PUBLIC	??_C@_0N@KIDDKEAC@Professional?$AA@		; `string'
PUBLIC	??_C@_09OBBBAFJO@?9standard?$AA@		; `string'
PUBLIC	??_C@_08NMMAHDIF@Standard?$AA@			; `string'
PUBLIC	??_C@_07ODEEFNBO@?9server?$AA@			; `string'
PUBLIC	??_C@_06HHKOBDNA@2008r2?$AA@			; `string'
PUBLIC	??_C@_01COCBENDE@7?$AA@				; `string'
PUBLIC	??_C@_04CBODECMO@2008?$AA@			; `string'
PUBLIC	??_C@_05FBPADAKE@vista?$AA@			; `string'
PUBLIC	??_C@_04MCBHJLAF@2003?$AA@			; `string'
PUBLIC	??_C@_04NOKDIIJN@?9pro?$AA@			; `string'
PUBLIC	??_C@_05GHINFEPM@?9home?$AA@			; `string'
PUBLIC	??_C@_02HFGDGGPD@xp?$AA@			; `string'
PUBLIC	??_C@_04OJDKMIMG@2000?$AA@			; `string'
PUBLIC	??_C@_0M@MNPNDAHP@ProductName?$AA@		; `string'
PUBLIC	??_C@_0CN@LCMFDIEF@SOFTWARE?2Microsoft?2Windows?5NT?2Cu@ ; `string'
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	??_C@_03JECLAOEA@win?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; GetWindowsEdition
;	COMDAT ??_C@_03PFGLPIPP@?9sp?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_03PFGLPIPP@?9sp?$AA@ DB '-sp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DFMLABPB@?9x64?$AA@
CONST	SEGMENT
??_C@_04DFMLABPB@?9x64?$AA@ DB '-x64', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FNMLEPMI@?9basic?$AA@
CONST	SEGMENT
??_C@_06FNMLEPMI@?9basic?$AA@ DB '-basic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NIKDGMHP@Basic?$AA@
CONST	SEGMENT
??_C@_05NIKDGMHP@Basic?$AA@ DB 'Basic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KHECKGMK@?9starter?$AA@
CONST	SEGMENT
??_C@_08KHECKGMK@?9starter?$AA@ DB '-starter', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FDAPKNJ@?9ultimate?$AA@
CONST	SEGMENT
??_C@_09FDAPKNJ@?9ultimate?$AA@ DB '-ultimate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DIOBIMMC@Ultimate?$AA@
CONST	SEGMENT
??_C@_08DIOBIMMC@Ultimate?$AA@ DB 'Ultimate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BOLPHPEH@?9datacenter?$AA@
CONST	SEGMENT
??_C@_0M@BOLPHPEH@?9datacenter?$AA@ DB '-datacenter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OOPFNAF@Datacenter?$AA@
CONST	SEGMENT
??_C@_0L@OOPFNAF@Datacenter?$AA@ DB 'Datacenter', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CCIJFPDH@?9enterprise?$AA@
CONST	SEGMENT
??_C@_0M@CCIJFPDH@?9enterprise?$AA@ DB '-enterprise', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DCNJHNHF@Enterprise?$AA@
CONST	SEGMENT
??_C@_0L@DCNJHNHF@Enterprise?$AA@ DB 'Enterprise', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LKNHIPDK@?9business?$AA@
CONST	SEGMENT
??_C@_09LKNHIPDK@?9business?$AA@ DB '-business', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IHAGPJCB@Business?$AA@
CONST	SEGMENT
??_C@_08IHAGPJCB@Business?$AA@ DB 'Business', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KIDDKEAC@Professional?$AA@
CONST	SEGMENT
??_C@_0N@KIDDKEAC@Professional?$AA@ DB 'Professional', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OBBBAFJO@?9standard?$AA@
CONST	SEGMENT
??_C@_09OBBBAFJO@?9standard?$AA@ DB '-standard', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NMMAHDIF@Standard?$AA@
CONST	SEGMENT
??_C@_08NMMAHDIF@Standard?$AA@ DB 'Standard', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07ODEEFNBO@?9server?$AA@
CONST	SEGMENT
??_C@_07ODEEFNBO@?9server?$AA@ DB '-server', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HHKOBDNA@2008r2?$AA@
CONST	SEGMENT
??_C@_06HHKOBDNA@2008r2?$AA@ DB '2008r2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01COCBENDE@7?$AA@
CONST	SEGMENT
??_C@_01COCBENDE@7?$AA@ DB '7', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CBODECMO@2008?$AA@
CONST	SEGMENT
??_C@_04CBODECMO@2008?$AA@ DB '2008', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FBPADAKE@vista?$AA@
CONST	SEGMENT
??_C@_05FBPADAKE@vista?$AA@ DB 'vista', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MCBHJLAF@2003?$AA@
CONST	SEGMENT
??_C@_04MCBHJLAF@2003?$AA@ DB '2003', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NOKDIIJN@?9pro?$AA@
CONST	SEGMENT
??_C@_04NOKDIIJN@?9pro?$AA@ DB '-pro', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GHINFEPM@?9home?$AA@
CONST	SEGMENT
??_C@_05GHINFEPM@?9home?$AA@ DB '-home', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HFGDGGPD@xp?$AA@
CONST	SEGMENT
??_C@_02HFGDGGPD@xp?$AA@ DB 'xp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OJDKMIMG@2000?$AA@
CONST	SEGMENT
??_C@_04OJDKMIMG@2000?$AA@ DB '2000', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MNPNDAHP@ProductName?$AA@
CONST	SEGMENT
??_C@_0M@MNPNDAHP@ProductName?$AA@ DB 'ProductName', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LCMFDIEF@SOFTWARE?2Microsoft?2Windows?5NT?2Cu@
CONST	SEGMENT
??_C@_0CN@LCMFDIEF@SOFTWARE?2Microsoft?2Windows?5NT?2Cu@ DB 'SOFTWARE\Mic'
	DB	'rosoft\Windows NT\CurrentVersion', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03JECLAOEA@win?$AA@
CONST	SEGMENT
??_C@_03JECLAOEA@win?$AA@ DB 'win', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$4
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
xdata$x	ENDS
;	COMDAT ?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
_server$ = -656						; size = 4
_hkey$ = -652						; size = 4
_productNameSize$ = -648				; size = 4
$T196359 = -644						; size = 4
$T196357 = -640						; size = 28
$T196354 = -640						; size = 28
___$ReturnUdt$GSCopy$ = -612				; size = 4
_s$142949 = -608					; size = 136
_s$142911 = -608					; size = 136
_osVer$ = -472						; size = 156
_productName$ = -316					; size = 300
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; GetWindowsEdition, COMDAT

; 7384 : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 84 02 00
	00		 sub	 esp, 644		; 00000284H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 80 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+656], eax
  00022	53		 push	 ebx
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c4		 xor	 eax, esp
  0002c	50		 push	 eax
  0002d	8d 84 24 94 02
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+672]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	8b b4 24 a4 02
	00 00		 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+668]
  00041	33 db		 xor	 ebx, ebx
  00043	89 5c 24 1c	 mov	 DWORD PTR $T196359[esp+672], ebx

; 7385 : 	string osname = "win";

  00047	6a 03		 push	 3
  00049	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00050	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_03JECLAOEA@win?$AA@
  00058	8b ce		 mov	 ecx, esi
  0005a	89 9c 24 a4 02
	00 00		 mov	 DWORD PTR __$EHRec$[esp+688], ebx
  00061	89 74 24 44	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+680], esi
  00065	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00068	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 7479 : 
; 7480 : 	return osname;

  0006d	8d 84 24 c8 00
	00 00		 lea	 eax, DWORD PTR _osVer$[esp+672]
  00074	50		 push	 eax
  00075	89 9c 24 a0 02
	00 00		 mov	 DWORD PTR __$EHRec$[esp+684], ebx
  0007c	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR $T196359[esp+676], 1
  00084	c7 84 24 cc 00
	00 00 9c 00 00
	00		 mov	 DWORD PTR _osVer$[esp+676], 156 ; 0000009cH
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4
  00095	8b bc 24 60 01
	00 00		 mov	 edi, DWORD PTR _osVer$[esp+824]
  0009c	8a 84 24 62 01
	00 00		 mov	 al, BYTE PTR _osVer$[esp+826]
  000a3	81 e7 00 02 00
	00		 and	 edi, 512		; 00000200H
  000a9	3c 03		 cmp	 al, 3
  000ab	74 08		 je	 SHORT $LN36@GetWindows
  000ad	89 5c 24 10	 mov	 DWORD PTR _server$[esp+672], ebx
  000b1	3c 02		 cmp	 al, 2
  000b3	75 08		 jne	 SHORT $LN37@GetWindows
$LN36@GetWindows:

; 7386 : 
; 7387 : 	OSVERSIONINFOEXA osVer;
; 7388 : 	osVer.dwOSVersionInfoSize = sizeof (OSVERSIONINFOEXA);
; 7389 : 	GetVersionExA ((LPOSVERSIONINFOA) &osVer);
; 7390 : 
; 7391 : 	BOOL home = (osVer.wSuiteMask & VER_SUITE_PERSONAL);
; 7392 : 	BOOL server = (osVer.wProductType == VER_NT_SERVER || osVer.wProductType == VER_NT_DOMAIN_CONTROLLER);

  000b5	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR _server$[esp+672], 1
$LN37@GetWindows:

; 7393 : 
; 7394 : 	HKEY hkey;
; 7395 : 	char productName[300] = {0};

  000bd	68 2b 01 00 00	 push	 299			; 0000012bH
  000c2	8d 8c 24 69 01
	00 00		 lea	 ecx, DWORD PTR _productName$[esp+677]
  000c9	53		 push	 ebx
  000ca	51		 push	 ecx
  000cb	88 9c 24 70 01
	00 00		 mov	 BYTE PTR _productName$[esp+684], bl
  000d2	e8 00 00 00 00	 call	 _memset
  000d7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7396 : 	DWORD productNameSize = sizeof (productName);
; 7397 : 	if (RegOpenKeyEx (HKEY_LOCAL_MACHINE, "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", 0, KEY_QUERY_VALUE, &hkey) == ERROR_SUCCESS)

  000da	8d 54 24 14	 lea	 edx, DWORD PTR _hkey$[esp+672]
  000de	52		 push	 edx
  000df	6a 01		 push	 1
  000e1	53		 push	 ebx
  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@LCMFDIEF@SOFTWARE?2Microsoft?2Windows?5NT?2Cu@
  000e7	68 02 00 00 80	 push	 -2147483646		; 80000002H
  000ec	c7 44 24 2c 2c
	01 00 00	 mov	 DWORD PTR _productNameSize$[esp+692], 300 ; 0000012cH
  000f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  000fa	85 c0		 test	 eax, eax
  000fc	75 3c		 jne	 SHORT $LN33@GetWindows

; 7398 : 	{
; 7399 : 		if (RegQueryValueEx (hkey, "ProductName", 0, 0, (LPBYTE) &productName, &productNameSize) != ERROR_SUCCESS || productNameSize < 1)

  000fe	8b 54 24 14	 mov	 edx, DWORD PTR _hkey$[esp+672]
  00102	8d 44 24 18	 lea	 eax, DWORD PTR _productNameSize$[esp+672]
  00106	50		 push	 eax
  00107	8d 8c 24 68 01
	00 00		 lea	 ecx, DWORD PTR _productName$[esp+676]
  0010e	51		 push	 ecx
  0010f	53		 push	 ebx
  00110	53		 push	 ebx
  00111	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MNPNDAHP@ProductName?$AA@
  00116	52		 push	 edx
  00117	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24
  0011d	85 c0		 test	 eax, eax
  0011f	75 07		 jne	 SHORT $LN31@GetWindows
  00121	83 7c 24 18 01	 cmp	 DWORD PTR _productNameSize$[esp+672], 1
  00126	73 07		 jae	 SHORT $LN32@GetWindows
$LN31@GetWindows:

; 7400 : 			productName[0] = 0;

  00128	88 9c 24 64 01
	00 00		 mov	 BYTE PTR _productName$[esp+672], bl
$LN32@GetWindows:

; 7401 : 
; 7402 : 		RegCloseKey (hkey);

  0012f	8b 44 24 14	 mov	 eax, DWORD PTR _hkey$[esp+672]
  00133	50		 push	 eax
  00134	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
$LN33@GetWindows:

; 7403 : 	}
; 7404 : 
; 7405 : 	switch (nCurrentOS)

  0013a	a1 00 00 00 00	 mov	 eax, DWORD PTR _nCurrentOS
  0013f	83 c0 f9	 add	 eax, -7			; fffffff9H
  00142	83 f8 07	 cmp	 eax, 7
  00145	0f 87 94 00 00
	00		 ja	 $LN21@GetWindows
  0014b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN212@GetWindows[eax*4]
$LN28@GetWindows:

; 7406 : 	{
; 7407 : 	case WIN_2000:
; 7408 : 		osname += "2000";

  00152	68 00 00 00 00	 push	 OFFSET ??_C@_04OJDKMIMG@2000?$AA@
  00157	8b ce		 mov	 ecx, esi
  00159	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 7409 : 		break;

  0015e	e9 33 01 00 00	 jmp	 $LN29@GetWindows
$LN27@GetWindows:

; 7410 : 
; 7411 : 	case WIN_XP:
; 7412 : 	case WIN_XP64:
; 7413 : 		osname += "xp";

  00163	68 00 00 00 00	 push	 OFFSET ??_C@_02HFGDGGPD@xp?$AA@
  00168	8b ce		 mov	 ecx, esi
  0016a	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 7414 : 		osname += home ? "-home" : "-pro";

  0016f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05GHINFEPM@?9home?$AA@
  00174	3b fb		 cmp	 edi, ebx
  00176	75 05		 jne	 SHORT $LN39@GetWindows
  00178	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04NOKDIIJN@?9pro?$AA@
$LN39@GetWindows:
  0017d	50		 push	 eax
  0017e	8b ce		 mov	 ecx, esi
  00180	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 7415 : 		break;

  00185	e9 0c 01 00 00	 jmp	 $LN29@GetWindows
$LN26@GetWindows:

; 7416 : 
; 7417 : 	case WIN_SERVER_2003:
; 7418 : 		osname += "2003";

  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_04MCBHJLAF@2003?$AA@
  0018f	8b ce		 mov	 ecx, esi
  00191	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 7419 : 		break;

  00196	e9 fb 00 00 00	 jmp	 $LN29@GetWindows
$LN25@GetWindows:

; 7420 : 
; 7421 : 	case WIN_VISTA:
; 7422 : 		osname += "vista";

  0019b	68 00 00 00 00	 push	 OFFSET ??_C@_05FBPADAKE@vista?$AA@
  001a0	8b ce		 mov	 ecx, esi
  001a2	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 7423 : 		break;

  001a7	e9 ea 00 00 00	 jmp	 $LN29@GetWindows
$LN24@GetWindows:

; 7424 : 
; 7425 : 	case WIN_SERVER_2008:
; 7426 : 		osname += "2008";

  001ac	68 00 00 00 00	 push	 OFFSET ??_C@_04CBODECMO@2008?$AA@
  001b1	8b ce		 mov	 ecx, esi
  001b3	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 7427 : 		break;

  001b8	e9 d9 00 00 00	 jmp	 $LN29@GetWindows
$LN23@GetWindows:

; 7428 : 
; 7429 : 	case WIN_7:
; 7430 : 		osname += "7";

  001bd	68 00 00 00 00	 push	 OFFSET ??_C@_01COCBENDE@7?$AA@
  001c2	8b ce		 mov	 ecx, esi
  001c4	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 7431 : 		break;

  001c9	e9 c8 00 00 00	 jmp	 $LN29@GetWindows
$LN22@GetWindows:

; 7432 : 
; 7433 : 	case WIN_SERVER_2008_R2:
; 7434 : 		osname += "2008r2";

  001ce	68 00 00 00 00	 push	 OFFSET ??_C@_06HHKOBDNA@2008r2?$AA@
  001d3	8b ce		 mov	 ecx, esi
  001d5	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 7435 : 		break;

  001da	e9 b7 00 00 00	 jmp	 $LN29@GetWindows
$LN21@GetWindows:

; 7436 : 
; 7437 : 	default:
; 7438 : 		stringstream s;

  001df	6a 01		 push	 1
  001e1	6a 03		 push	 3
  001e3	8d 4c 24 48	 lea	 ecx, DWORD PTR _s$142911[esp+680]
  001e7	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >

; 7439 : 		s << CurrentOSMajor << "." << CurrentOSMinor;

  001ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _CurrentOSMinor
  001f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _CurrentOSMajor
  001f8	51		 push	 ecx
  001f9	68 00 00 00 00	 push	 OFFSET ??_C@_01LFCBOECM@?4?$AA@
  001fe	52		 push	 edx
  001ff	8d 4c 24 54	 lea	 ecx, DWORD PTR _s$142911[esp+692]
  00203	c7 84 24 a8 02
	00 00 01 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+692], 1
  0020e	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00213	50		 push	 eax
  00214	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00219	83 c4 08	 add	 esp, 8
  0021c	8b c8		 mov	 ecx, eax
  0021e	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<

; 7440 : 		osname += s.str();

  00223	8d 44 24 20	 lea	 eax, DWORD PTR $T196354[esp+672]
  00227	50		 push	 eax
  00228	8d 4c 24 44	 lea	 ecx, DWORD PTR _s$142911[esp+676]
  0022c	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00231	6a ff		 push	 -1
  00233	53		 push	 ebx
  00234	50		 push	 eax
  00235	8b ce		 mov	 ecx, esi
  00237	c6 84 24 a8 02
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+692], 2
  0023f	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00244	83 7c 24 38 10	 cmp	 DWORD PTR $T196354[esp+696], 16 ; 00000010H
  00249	72 0d		 jb	 SHORT $LN104@GetWindows
  0024b	8b 4c 24 24	 mov	 ecx, DWORD PTR $T196354[esp+676]
  0024f	51		 push	 ecx
  00250	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00255	83 c4 04	 add	 esp, 4
$LN104@GetWindows:

; 7441 : 		break;

  00258	8d 8c 24 94 00
	00 00		 lea	 ecx, DWORD PTR _s$142911[esp+756]
  0025f	c7 44 24 38 0f
	00 00 00	 mov	 DWORD PTR $T196354[esp+696], 15 ; 0000000fH
  00267	89 5c 24 34	 mov	 DWORD PTR $T196354[esp+692], ebx
  0026b	88 5c 24 24	 mov	 BYTE PTR $T196354[esp+676], bl
  0026f	88 9c 24 9c 02
	00 00		 mov	 BYTE PTR __$EHRec$[esp+680], bl
  00276	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  0027b	8d 94 24 94 00
	00 00		 lea	 edx, DWORD PTR _s$142911[esp+756]
  00282	52		 push	 edx
  00283	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _s$142911[esp+760], OFFSET ??_7ios_base@std@@6B@
  0028e	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00293	83 c4 04	 add	 esp, 4
$LN29@GetWindows:

; 7442 : 	}
; 7443 : 
; 7444 : 	if (server)

  00296	39 5c 24 10	 cmp	 DWORD PTR _server$[esp+672], ebx
  0029a	74 0e		 je	 SHORT $LN121@GetWindows

; 7445 : 		osname += "-server";

  0029c	6a 07		 push	 7
  0029e	68 00 00 00 00	 push	 OFFSET ??_C@_07ODEEFNBO@?9server?$AA@
  002a3	8b ce		 mov	 ecx, esi
  002a5	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN121@GetWindows:

; 7446 : 
; 7447 : 	if (IsOSAtLeast (WIN_VISTA))

  002aa	6a 0b		 push	 11			; 0000000bH
  002ac	e8 00 00 00 00	 call	 _IsOSAtLeast
  002b1	83 c4 04	 add	 esp, 4
  002b4	85 c0		 test	 eax, eax
  002b6	0f 84 e8 00 00
	00		 je	 $LN6@GetWindows

; 7448 : 	{	
; 7449 : 		if (home)

  002bc	3b fb		 cmp	 edi, ebx
  002be	74 13		 je	 SHORT $LN18@GetWindows

; 7450 : 			osname += "-home";

  002c0	6a 05		 push	 5
  002c2	68 00 00 00 00	 push	 OFFSET ??_C@_05GHINFEPM@?9home?$AA@
  002c7	8b ce		 mov	 ecx, esi
  002c9	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  002ce	e9 d1 00 00 00	 jmp	 $LN6@GetWindows
$LN18@GetWindows:

; 7451 : 		else if (strstr (productName, "Standard") != 0)

  002d3	8d 84 24 64 01
	00 00		 lea	 eax, DWORD PTR _productName$[esp+672]
  002da	68 00 00 00 00	 push	 OFFSET ??_C@_08NMMAHDIF@Standard?$AA@
  002df	50		 push	 eax
  002e0	e8 00 00 00 00	 call	 _strstr
  002e5	83 c4 08	 add	 esp, 8
  002e8	85 c0		 test	 eax, eax
  002ea	74 13		 je	 SHORT $LN16@GetWindows

; 7452 : 			osname += "-standard";

  002ec	6a 09		 push	 9
  002ee	68 00 00 00 00	 push	 OFFSET ??_C@_09OBBBAFJO@?9standard?$AA@
  002f3	8b ce		 mov	 ecx, esi
  002f5	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  002fa	e9 a5 00 00 00	 jmp	 $LN6@GetWindows
$LN16@GetWindows:

; 7453 : 		else if (strstr (productName, "Professional") != 0)

  002ff	8d 8c 24 64 01
	00 00		 lea	 ecx, DWORD PTR _productName$[esp+672]
  00306	68 00 00 00 00	 push	 OFFSET ??_C@_0N@KIDDKEAC@Professional?$AA@
  0030b	51		 push	 ecx
  0030c	e8 00 00 00 00	 call	 _strstr
  00311	83 c4 08	 add	 esp, 8
  00314	85 c0		 test	 eax, eax
  00316	74 07		 je	 SHORT $LN14@GetWindows

; 7454 : 			osname += "-pro";

  00318	68 00 00 00 00	 push	 OFFSET ??_C@_04NOKDIIJN@?9pro?$AA@
  0031d	eb 7e		 jmp	 SHORT $LN210@GetWindows
$LN14@GetWindows:

; 7455 : 		else if (strstr (productName, "Business") != 0)

  0031f	8d 94 24 64 01
	00 00		 lea	 edx, DWORD PTR _productName$[esp+672]
  00326	68 00 00 00 00	 push	 OFFSET ??_C@_08IHAGPJCB@Business?$AA@
  0032b	52		 push	 edx
  0032c	e8 00 00 00 00	 call	 _strstr
  00331	83 c4 08	 add	 esp, 8
  00334	85 c0		 test	 eax, eax
  00336	74 07		 je	 SHORT $LN12@GetWindows

; 7456 : 			osname += "-business";

  00338	68 00 00 00 00	 push	 OFFSET ??_C@_09LKNHIPDK@?9business?$AA@
  0033d	eb 5e		 jmp	 SHORT $LN210@GetWindows
$LN12@GetWindows:

; 7457 : 		else if (strstr (productName, "Enterprise") != 0)

  0033f	8d 84 24 64 01
	00 00		 lea	 eax, DWORD PTR _productName$[esp+672]
  00346	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DCNJHNHF@Enterprise?$AA@
  0034b	50		 push	 eax
  0034c	e8 00 00 00 00	 call	 _strstr
  00351	83 c4 08	 add	 esp, 8
  00354	85 c0		 test	 eax, eax
  00356	74 07		 je	 SHORT $LN10@GetWindows

; 7458 : 			osname += "-enterprise";

  00358	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CCIJFPDH@?9enterprise?$AA@
  0035d	eb 3e		 jmp	 SHORT $LN210@GetWindows
$LN10@GetWindows:

; 7459 : 		else if (strstr (productName, "Datacenter") != 0)

  0035f	8d 8c 24 64 01
	00 00		 lea	 ecx, DWORD PTR _productName$[esp+672]
  00366	68 00 00 00 00	 push	 OFFSET ??_C@_0L@OOPFNAF@Datacenter?$AA@
  0036b	51		 push	 ecx
  0036c	e8 00 00 00 00	 call	 _strstr
  00371	83 c4 08	 add	 esp, 8
  00374	85 c0		 test	 eax, eax
  00376	74 07		 je	 SHORT $LN8@GetWindows

; 7460 : 			osname += "-datacenter";

  00378	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BOLPHPEH@?9datacenter?$AA@
  0037d	eb 1e		 jmp	 SHORT $LN210@GetWindows
$LN8@GetWindows:

; 7461 : 		else if (strstr (productName, "Ultimate") != 0)

  0037f	8d 94 24 64 01
	00 00		 lea	 edx, DWORD PTR _productName$[esp+672]
  00386	68 00 00 00 00	 push	 OFFSET ??_C@_08DIOBIMMC@Ultimate?$AA@
  0038b	52		 push	 edx
  0038c	e8 00 00 00 00	 call	 _strstr
  00391	83 c4 08	 add	 esp, 8
  00394	85 c0		 test	 eax, eax
  00396	74 0c		 je	 SHORT $LN6@GetWindows

; 7462 : 			osname += "-ultimate";

  00398	68 00 00 00 00	 push	 OFFSET ??_C@_09FDAPKNJ@?9ultimate?$AA@
$LN210@GetWindows:
  0039d	8b ce		 mov	 ecx, esi
  0039f	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
$LN6@GetWindows:

; 7463 : 	}
; 7464 : 
; 7465 : 	if (GetSystemMetrics (SM_STARTER))

  003a4	6a 58		 push	 88			; 00000058H
  003a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  003ac	85 c0		 test	 eax, eax
  003ae	74 09		 je	 SHORT $LN5@GetWindows

; 7466 : 		osname += "-starter";

  003b0	6a 08		 push	 8
  003b2	68 00 00 00 00	 push	 OFFSET ??_C@_08KHECKGMK@?9starter?$AA@
  003b7	eb 20		 jmp	 SHORT $LN211@GetWindows
$LN5@GetWindows:

; 7467 : 	else if (strstr (productName, "Basic") != 0)

  003b9	8d 84 24 64 01
	00 00		 lea	 eax, DWORD PTR _productName$[esp+672]
  003c0	68 00 00 00 00	 push	 OFFSET ??_C@_05NIKDGMHP@Basic?$AA@
  003c5	50		 push	 eax
  003c6	e8 00 00 00 00	 call	 _strstr
  003cb	83 c4 08	 add	 esp, 8
  003ce	85 c0		 test	 eax, eax
  003d0	74 0e		 je	 SHORT $LN159@GetWindows

; 7468 : 		osname += "-basic";

  003d2	6a 06		 push	 6
  003d4	68 00 00 00 00	 push	 OFFSET ??_C@_06FNMLEPMI@?9basic?$AA@
$LN211@GetWindows:
  003d9	8b ce		 mov	 ecx, esi
  003db	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN159@GetWindows:

; 7469 : 
; 7470 : 	if (Is64BitOs())

  003e0	e8 00 00 00 00	 call	 _Is64BitOs
  003e5	85 c0		 test	 eax, eax
  003e7	74 0e		 je	 SHORT $LN165@GetWindows

; 7471 : 		osname += "-x64";

  003e9	6a 04		 push	 4
  003eb	68 00 00 00 00	 push	 OFFSET ??_C@_04DFMLABPB@?9x64?$AA@
  003f0	8b ce		 mov	 ecx, esi
  003f2	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN165@GetWindows:

; 7472 : 
; 7473 : 	if (CurrentOSServicePack > 0)

  003f7	39 1d 00 00 00
	00		 cmp	 DWORD PTR _CurrentOSServicePack, ebx
  003fd	0f 8e 9b 00 00
	00		 jle	 $LN208@GetWindows

; 7474 : 	{
; 7475 : 		stringstream s;

  00403	6a 01		 push	 1
  00405	6a 03		 push	 3
  00407	8d 4c 24 48	 lea	 ecx, DWORD PTR _s$142949[esp+680]
  0040b	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >

; 7476 : 		s << "-sp" << CurrentOSServicePack;

  00410	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _CurrentOSServicePack
  00416	51		 push	 ecx
  00417	8d 54 24 4c	 lea	 edx, DWORD PTR _s$142949[esp+684]
  0041b	68 00 00 00 00	 push	 OFFSET ??_C@_03PFGLPIPP@?9sp?$AA@
  00420	52		 push	 edx
  00421	c7 84 24 a8 02
	00 00 03 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+692], 3
  0042c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00431	83 c4 08	 add	 esp, 8
  00434	8b c8		 mov	 ecx, eax
  00436	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<

; 7477 : 		osname += s.str();

  0043b	8d 44 24 20	 lea	 eax, DWORD PTR $T196357[esp+672]
  0043f	50		 push	 eax
  00440	8d 4c 24 44	 lea	 ecx, DWORD PTR _s$142949[esp+676]
  00444	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00449	6a ff		 push	 -1
  0044b	53		 push	 ebx
  0044c	50		 push	 eax
  0044d	8b ce		 mov	 ecx, esi
  0044f	c6 84 24 a8 02
	00 00 04	 mov	 BYTE PTR __$EHRec$[esp+692], 4
  00457	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0045c	83 7c 24 38 10	 cmp	 DWORD PTR $T196357[esp+696], 16 ; 00000010H
  00461	72 0d		 jb	 SHORT $LN191@GetWindows
  00463	8b 4c 24 24	 mov	 ecx, DWORD PTR $T196357[esp+676]
  00467	51		 push	 ecx
  00468	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0046d	83 c4 04	 add	 esp, 4
$LN191@GetWindows:

; 7478 : 	}

  00470	8d 8c 24 94 00
	00 00		 lea	 ecx, DWORD PTR _s$142949[esp+756]
  00477	88 9c 24 9c 02
	00 00		 mov	 BYTE PTR __$EHRec$[esp+680], bl
  0047e	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  00483	8d 94 24 94 00
	00 00		 lea	 edx, DWORD PTR _s$142949[esp+756]
  0048a	52		 push	 edx
  0048b	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _s$142949[esp+760], OFFSET ??_7ios_base@std@@6B@
  00496	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0049b	83 c4 04	 add	 esp, 4
$LN208@GetWindows:

; 7479 : 
; 7480 : 	return osname;

  0049e	8b c6		 mov	 eax, esi

; 7481 : }

  004a0	8b 8c 24 94 02
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+672]
  004a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004ae	59		 pop	 ecx
  004af	5f		 pop	 edi
  004b0	5e		 pop	 esi
  004b1	5b		 pop	 ebx
  004b2	8b 8c 24 80 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+656]
  004b9	33 cc		 xor	 ecx, esp
  004bb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004c0	81 c4 90 02 00
	00		 add	 esp, 656		; 00000290H
  004c6	c3		 ret	 0
  004c7	90		 npad	 1
$LN212@GetWindows:
  004c8	00 00 00 00	 DD	 $LN28@GetWindows
  004cc	00 00 00 00	 DD	 $LN27@GetWindows
  004d0	00 00 00 00	 DD	 $LN27@GetWindows
  004d4	00 00 00 00	 DD	 $LN26@GetWindows
  004d8	00 00 00 00	 DD	 $LN25@GetWindows
  004dc	00 00 00 00	 DD	 $LN24@GetWindows
  004e0	00 00 00 00	 DD	 $LN23@GetWindows
  004e4	00 00 00 00	 DD	 $LN22@GetWindows
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0:
  00000	8b 85 7c fd ff
	ff		 mov	 eax, DWORD PTR $T196359[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 12 00 00
	00		 je	 $LN43@GetWindows
  0000f	83 a5 7c fd ff
	ff fe		 and	 DWORD PTR $T196359[ebp], -2 ; fffffffeH
  00016	8b 8d 9c fd ff
	ff		 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN43@GetWindows:
  00021	c3		 ret	 0
__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1:
  00022	8d 8d a0 fd ff
	ff		 lea	 ecx, DWORD PTR _s$142911[ebp]
  00028	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2:
  0002d	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR $T196354[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$3:
  00038	8d 8d a0 fd ff
	ff		 lea	 ecx, DWORD PTR _s$142949[ebp]
  0003e	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$4:
  00043	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR $T196357[ebp]
  00049	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
  0004e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00052	8d 82 70 fd ff
	ff		 lea	 eax, DWORD PTR [edx-656]
  00058	8b 8a 6c fd ff
	ff		 mov	 ecx, DWORD PTR [edx-660]
  0005e	33 c8		 xor	 ecx, eax
  00060	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00065	83 c0 0c	 add	 eax, 12			; 0000000cH
  00068	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0006b	33 c8		 xor	 ecx, eax
  0006d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00072	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  00077	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; GetWindowsEdition
PUBLIC	??_C@_0DI@DCPBDEOF@http?3?1?1ciphershed?4org?1applink?$DPve@ ; `string'
PUBLIC	??_C@_04CIEGKLKE@?$CGos?$DN?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_Applink
EXTRN	_ArrowWaitCursor:PROC
;	COMDAT ??_C@_0DI@DCPBDEOF@http?3?1?1ciphershed?4org?1applink?$DPve@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0DI@DCPBDEOF@http?3?1?1ciphershed?4org?1applink?$DPve@ DB 'http://c'
	DB	'iphershed.org/applink?version=0.7.3%s%s&dest=%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04CIEGKLKE@?$CGos?$DN?$AA@
CONST	SEGMENT
??_C@_04CIEGKLKE@?$CGos?$DN?$AA@ DB '&os=', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
CONST	ENDS
;	COMDAT _Applink
_TEXT	SEGMENT
$T196909 = -2148					; size = 4
$T196906 = -2144					; size = 28
$T196905 = -2116					; size = 28
_url$ = -2088						; size = 2084
__$ArrayPad$ = -4					; size = 4
_dest$ = 8						; size = 4
_bSendOS$ = 12						; size = 4
_extraOutput$ = 16					; size = 4
_Applink PROC						; COMDAT

; 7485 : {

  00000	81 ec 64 08 00
	00		 sub	 esp, 2148		; 00000864H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 60 08
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+2148], eax
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	8b b4 24 70 08
	00 00		 mov	 esi, DWORD PTR _dest$[esp+2152]
  0001d	57		 push	 edi
  0001e	8b bc 24 7c 08
	00 00		 mov	 edi, DWORD PTR _extraOutput$[esp+2156]
  00025	33 db		 xor	 ebx, ebx

; 7486 : 	char url [MAX_URL_LENGTH];
; 7487 : 
; 7488 : 	ArrowWaitCursor ();

  00027	89 5c 24 0c	 mov	 DWORD PTR $T196909[esp+2160], ebx
  0002b	e8 00 00 00 00	 call	 _ArrowWaitCursor

; 7489 : 
; 7490 : 	sprintf_s (url, sizeof (url), TC_APPLINK "%s%s&dest=%s", bSendOS ? ("&os=" + GetWindowsEdition()).c_str() : "", extraOutput, dest);

  00030	39 9c 24 78 08
	00 00		 cmp	 DWORD PTR _bSendOS$[esp+2156], ebx
  00037	74 32		 je	 SHORT $LN3@Applink
  00039	8d 44 24 2c	 lea	 eax, DWORD PTR $T196905[esp+2160]
  0003d	50		 push	 eax
  0003e	bb 03 00 00 00	 mov	 ebx, 3
  00043	e8 00 00 00 00	 call	 ?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; GetWindowsEdition
  00048	50		 push	 eax
  00049	8d 4c 24 18	 lea	 ecx, DWORD PTR $T196906[esp+2168]
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_04CIEGKLKE@?$CGos?$DN?$AA@
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00058	83 c4 10	 add	 esp, 16			; 00000010H
  0005b	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  0005f	72 05		 jb	 SHORT $LN11@Applink
  00061	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00064	eb 0a		 jmp	 SHORT $LN4@Applink
$LN11@Applink:
  00066	83 c0 04	 add	 eax, 4
  00069	eb 05		 jmp	 SHORT $LN4@Applink
$LN3@Applink:
  0006b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN4@Applink:
  00070	56		 push	 esi
  00071	57		 push	 edi
  00072	50		 push	 eax
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@DCPBDEOF@http?3?1?1ciphershed?4org?1applink?$DPve@
  00078	8d 54 24 58	 lea	 edx, DWORD PTR _url$[esp+2176]
  0007c	68 24 08 00 00	 push	 2084			; 00000824H
  00081	52		 push	 edx
  00082	e8 00 00 00 00	 call	 _sprintf_s
  00087	83 c4 18	 add	 esp, 24			; 00000018H
  0008a	f6 c3 02	 test	 bl, 2
  0008d	74 2c		 je	 SHORT $LN65@Applink
  0008f	83 e3 fd	 and	 ebx, -3			; fffffffdH
  00092	83 7c 24 28 10	 cmp	 DWORD PTR $T196906[esp+2184], 16 ; 00000010H
  00097	72 0d		 jb	 SHORT $LN29@Applink
  00099	8b 44 24 14	 mov	 eax, DWORD PTR $T196906[esp+2164]
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a3	83 c4 04	 add	 esp, 4
$LN29@Applink:
  000a6	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T196906[esp+2184], 15 ; 0000000fH
  000ae	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T196906[esp+2180], 0
  000b6	c6 44 24 14 00	 mov	 BYTE PTR $T196906[esp+2164], 0
$LN65@Applink:
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	f6 c3 01	 test	 bl, 1
  000c0	5b		 pop	 ebx
  000c1	74 14		 je	 SHORT $LN55@Applink
  000c3	83 7c 24 38 10	 cmp	 DWORD PTR $T196905[esp+2172], 16 ; 00000010H
  000c8	72 0d		 jb	 SHORT $LN55@Applink
  000ca	8b 4c 24 24	 mov	 ecx, DWORD PTR $T196905[esp+2152]
  000ce	51		 push	 ecx
  000cf	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d4	83 c4 04	 add	 esp, 4
$LN55@Applink:

; 7491 : 	ShellExecute (NULL, "open", url, NULL, NULL, SW_SHOWNORMAL);

  000d7	6a 01		 push	 1
  000d9	6a 00		 push	 0
  000db	6a 00		 push	 0
  000dd	8d 54 24 48	 lea	 edx, DWORD PTR _url$[esp+2160]
  000e1	52		 push	 edx
  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_04PMOCAHAA@open?$AA@
  000e7	6a 00		 push	 0
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24

; 7492 : 
; 7493 : 	Sleep (200);

  000ef	68 c8 00 00 00	 push	 200			; 000000c8H
  000f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 7494 : 	NormalCursor ();

  000fa	e8 00 00 00 00	 call	 _NormalCursor

; 7495 : }

  000ff	8b 8c 24 60 08
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+2148]
  00106	33 cc		 xor	 ecx, esp
  00108	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010d	81 c4 64 08 00
	00		 add	 esp, 2148		; 00000864H
  00113	c3		 ret	 0
_Applink ENDP
_TEXT	ENDS
PUBLIC	??0?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE@XZ ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\map
;	COMDAT ??0?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
$T197153 = -1						; size = 1
$T197152 = -1						; size = 1
??0?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE@XZ PROC ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >, COMDAT
; _this$ = ecx

; 103  : 		{	// construct empty map from defaults

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	8d 44 24 07	 lea	 eax, DWORD PTR $T197152[esp+8]
  00008	50		 push	 eax
  00009	8d 4c 24 0b	 lea	 ecx, DWORD PTR $T197153[esp+12]
  0000d	51		 push	 ecx
  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ??0?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >

; 104  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	59		 pop	 ecx
  00019	c3		 ret	 0
??0?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buynode
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z$0
__tryblocktable$?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z$5
__unwindtable$?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z
_TEXT	SEGMENT
$T197161 = -24						; size = 4
__Wherenode$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Larg$ = 8						; size = 4
__Parg$ = 12						; size = 4
__Rarg$ = 16						; size = 4
__Val$ = 20						; size = 4
__Carg$ = 24						; size = 1
?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 1408 : 		{	// allocate a node with pointers, value, and color

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1409 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  0002b	68 a8 00 00 00	 push	 168			; 000000a8H
  00030	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00035	8b f0		 mov	 esi, eax
  00037	83 c4 04	 add	 esp, 4
  0003a	89 75 ec	 mov	 DWORD PTR __Wherenode$[ebp], esi

; 1410 : 		_TRY_BEGIN

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1411 : 		new (_Wherenode) _Node(_Larg, _Parg, _Rarg, _Val, _Carg);

  00044	89 75 e8	 mov	 DWORD PTR $T197161[ebp], esi
  00047	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004b	85 f6		 test	 esi, esi
  0004d	74 35		 je	 SHORT $LN4@Buynode@4
  0004f	8b 45 08	 mov	 eax, DWORD PTR __Larg$[ebp]
  00052	8b 4d 0c	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00055	8b 55 10	 mov	 edx, DWORD PTR __Rarg$[ebp]
  00058	89 06		 mov	 DWORD PTR [esi], eax
  0005a	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  0005d	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00060	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00063	8b 08		 mov	 ecx, DWORD PTR [eax]
  00065	83 c0 08	 add	 eax, 8
  00068	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0006b	50		 push	 eax
  0006c	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0006f	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
  00074	8a 55 18	 mov	 dl, BYTE PTR __Carg$[ebp]
  00077	88 96 a0 00 00
	00		 mov	 BYTE PTR [esi+160], dl
  0007d	c6 86 a1 00 00
	00 00		 mov	 BYTE PTR [esi+161], 0
$LN4@Buynode@4:

; 1415 : 		_CATCH_END
; 1416 : 		return (_Wherenode);

  00084	8b c6		 mov	 eax, esi

; 1417 : 		}

  00086	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 14 00	 ret	 20			; 00000014H
__catch$?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z$0:

; 1412 : 		_CATCH_ALL
; 1413 : 		this->_Alnod.deallocate(_Wherenode, 1);

  0009a	8b 45 ec	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a3	83 c4 04	 add	 esp, 4

; 1414 : 		_RERAISE;

  000a6	6a 00		 push	 0
  000a8	6a 00		 push	 0
  000aa	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN34@Buynode@4:
  000af	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z$2:
  00000	8b 45 ec	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T197161[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buynode
PUBLIC	??$unchecked_uninitialized_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z ; stdext::unchecked_uninitialized_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z
_TEXT	SEGMENT
$T197226 = -4						; size = 1
__First$ = 8						; size = 4
__Cat$197230 = 12					; size = 1
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Cat$197230[esp]
  00005	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T197226[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T197226[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 823  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$unchecked_uninitialized_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3
__unwindtable$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T197280 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Vptr$197286 = 12					; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

  0002b	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]

; 401  : 
; 402  : 	_TRY_BEGIN

  0002e	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00031	33 db		 xor	 ebx, ebx
  00033	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL6@Uninit_fil:

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

  00040	3b fb		 cmp	 edi, ebx
  00042	76 4c		 jbe	 SHORT $LN4@Uninit_fil

; 404  : 		_Al.construct(_First, _Val);

  00044	89 75 0c	 mov	 DWORD PTR __Vptr$197286[ebp], esi
  00047	89 75 e8	 mov	 DWORD PTR $T197280[ebp], esi
  0004a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004e	3b f3		 cmp	 esi, ebx
  00050	74 0b		 je	 SHORT $LN18@Uninit_fil
  00052	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  00055	50		 push	 eax
  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN18@Uninit_fil:
  0005d	4f		 dec	 edi
  0005e	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00064	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00067	89 75 08	 mov	 DWORD PTR __First$[ebp], esi
  0006a	eb d4		 jmp	 SHORT $LL6@Uninit_fil
__catch$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

  0006c	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  0006f	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00072	3b f7		 cmp	 esi, edi
  00074	74 11		 je	 SHORT $LN1@Uninit_fil
$LL3@Uninit_fil:

; 407  : 		_Al.destroy(_Next);

  00076	8b ce		 mov	 ecx, esi
  00078	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  0007d	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00083	3b f7		 cmp	 esi, edi
  00085	75 ef		 jne	 SHORT $LL3@Uninit_fil
$LN1@Uninit_fil:

; 408  : 	_RERAISE;

  00087	33 db		 xor	 ebx, ebx
  00089	53		 push	 ebx
  0008a	53		 push	 ebx
  0008b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Uninit_fil:

; 409  : 	_CATCH_END
; 410  : 	}

  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
$LN35@Uninit_fil:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
  00000	8b 45 0c	 mov	 eax, DWORD PTR __Vptr$197286[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T197280[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >
PUBLIC	??$_Uninit_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<HostDevice *,HostDevice *,std::allocator<HostDevice>,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Uninit_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T197349 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$197352 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<HostDevice *,HostDevice *,std::allocator<HostDevice>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

  00000	51		 push	 ecx

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$197352[esp]
  00005	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T197349[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T197349[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 208  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$_Uninit_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<HostDevice *,HostDevice *,std::allocator<HostDevice>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??_C@_0DDJ@INFJPGJH@Portions?5of?5this?5software?5are?5ba@ ; `string'
PUBLIC	??_C@_04GHJNJNPO@main?$AA@			; `string'
PUBLIC	??_C@_0CL@OLEPOIOI@Released?5by?5CipherShed?5on?5Februa@ ; `string'
PUBLIC	??_C@_0O@HAOBOOIJ@CipherShed?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_05JPPCAGFG@0?47?43?$AA@			; `string'
PUBLIC	??_C@_0P@POMHPHDI@ciphershed?4org?$AA@		; `string'
PUBLIC	??_C@_0O@JLGCPBGA@IDD_ABOUT_DLG?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_AboutDlgProc@16
EXTRN	__imp__SetDlgItemTextA@12:PROC
;	COMDAT ?hbmTextualLogoBitmapRescaled@?1??AboutDlgProc@@9@16@4PAUHBITMAP__@@A
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
_BSS	SEGMENT
?hbmTextualLogoBitmapRescaled@?1??AboutDlgProc@@9@16@4PAUHBITMAP__@@A DD 01H DUP (?) ; `AboutDlgProc'::`2'::hbmTextualLogoBitmapRescaled
_BSS	ENDS
;	COMDAT ??_C@_0DDJ@INFJPGJH@Portions?5of?5this?5software?5are?5ba@
CONST	SEGMENT
??_C@_0DDJ@INFJPGJH@Portions?5of?5this?5software?5are?5ba@ DB 'Portions o'
	DB	'f this software are based in part on the works of the followi'
	DB	'ng people: Paul Le Roux, Bruce Schneier, John Kelsey, Doug Wh'
	DB	'iting, David Wagner, Chris Hall, Niels Ferguson, Lars Knudsen'
	DB	', Ross Anderson, Eli Biham, Joan Daemen, Vincent Rijmen, Phil'
	DB	'lip Rogaway, Hans Dobbertin, Antoon Bosselaers, Bart Preneel,'
	DB	' Paulo Barreto, Brian Gladman, Wei Dai, Peter Gutmann, and ma'
	DB	'ny others.', 0dH, 0aH, 0dH, 0aH, 'Portions of this software:', 0dH
	DB	0aH, 'Copyright ', 0a9H, ' 2014 The CipherShed Project. All Ri'
	DB	'ghts Reserved.', 0dH, 0aH, 'Copyright ', 0a9H, ' 2003-2012 Tr'
	DB	'ueCrypt Developers Association. All Rights Reserved.', 0dH, 0aH
	DB	'Copyright ', 0a9H, ' 1998-2000 Paul Le Roux. All Rights Reser'
	DB	'ved.', 0dH, 0aH, 'Copyright ', 0a9H, ' 1998-2008 Brian Gladma'
	DB	'n. All Rights Reserved.', 0dH, 0aH, 'Copyright ', 0a9H, ' 200'
	DB	'2-2004 Mark Adler. All Rights Reserved.', 0dH, 0aH, 0dH, 0aH, 'T'
	DB	'his software as a whole:', 0dH, 0aH, 'Copyright ', 0a9H, ' 20'
	DB	'14 The CipherShed Project. All Rights Reserved.', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHJNJNPO@main?$AA@
CONST	SEGMENT
??_C@_04GHJNJNPO@main?$AA@ DB 'main', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@OLEPOIOI@Released?5by?5CipherShed?5on?5Februa@
CONST	SEGMENT
??_C@_0CL@OLEPOIOI@Released?5by?5CipherShed?5on?5Februa@ DB 'Released by '
	DB	'CipherShed on February 7, 2012', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HAOBOOIJ@CipherShed?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0O@HAOBOOIJ@CipherShed?5?$CFs?$AA@ DB 'CipherShed %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05JPPCAGFG@0?47?43?$AA@
CONST	SEGMENT
??_C@_05JPPCAGFG@0?47?43?$AA@ DB '0.7.3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@POMHPHDI@ciphershed?4org?$AA@
CONST	SEGMENT
??_C@_0P@POMHPHDI@ciphershed?4org?$AA@ DB 'ciphershed.org', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JLGCPBGA@IDD_ABOUT_DLG?$AA@
CONST	SEGMENT
??_C@_0O@JLGCPBGA@IDD_ABOUT_DLG?$AA@ DB 'IDD_ABOUT_DLG', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _AboutDlgProc@16
_TEXT	SEGMENT
_rec$138190 = -120					; size = 16
_szTmp$138189 = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_msg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_AboutDlgProc@16 PROC					; COMDAT

; 718  : {

  00000	83 ec 78	 sub	 esp, 120		; 00000078H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 74	 mov	 DWORD PTR __$ArrayPad$[esp+120], eax

; 719  : 	WORD lw = LOWORD (wParam);
; 720  : 	static HBITMAP hbmTextualLogoBitmapRescaled = NULL;
; 721  : 
; 722  : 	switch (msg)

  0000e	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR _msg$[esp+116]
  00015	56		 push	 esi
  00016	8b b4 24 80 00
	00 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+120]
  0001d	3d 11 01 00 00	 cmp	 eax, 273		; 00000111H
  00022	0f 87 f0 01 00
	00		 ja	 $LN15@AboutDlgPr
  00028	0f 84 78 01 00
	00		 je	 $LN7@AboutDlgPr
  0002e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00031	0f 84 47 01 00
	00		 je	 $LN2@AboutDlgPr
  00037	3d 10 01 00 00	 cmp	 eax, 272		; 00000110H
  0003c	0f 85 b3 01 00
	00		 jne	 $LN3@AboutDlgPr
  00042	53		 push	 ebx
  00043	55		 push	 ebp
  00044	57		 push	 edi

; 723  : 	{
; 724  : 	case WM_INITDIALOG:
; 725  : 		{
; 726  : 			char szTmp[100];
; 727  : 			RECT rec;
; 728  : 
; 729  : 			LocalizeDialog (hwndDlg, "IDD_ABOUT_DLG");

  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JLGCPBGA@IDD_ABOUT_DLG?$AA@
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 _LocalizeDialog

; 730  : 
; 731  : 			// Hyperlink
; 732  : 			SetWindowTextA(GetDlgItem (hwndDlg, IDC_HOMEPAGE), "ciphershed.org");

  00050	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00056	83 c4 08	 add	 esp, 8
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0P@POMHPHDI@ciphershed?4org?$AA@
  0005e	68 ff 01 00 00	 push	 511			; 000001ffH
  00063	56		 push	 esi
  00064	ff d7		 call	 edi
  00066	50		 push	 eax
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 733  : 			ToHyperlink (hwndDlg, IDC_HOMEPAGE);

  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserUnderlineFont
  00072	50		 push	 eax
  00073	68 ff 01 00 00	 push	 511			; 000001ffH
  00078	56		 push	 esi
  00079	e8 00 00 00 00	 call	 _ToCustHyperlink
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 734  : 
; 735  : 			// Logo area background (must not keep aspect ratio; must retain Windows-imposed distortion)
; 736  : 			GetClientRect (GetDlgItem (hwndDlg, IDC_ABOUT_LOGO_AREA), &rec);

  00081	8d 4c 24 10	 lea	 ecx, DWORD PTR _rec$138190[esp+136]
  00085	51		 push	 ecx
  00086	68 ed 13 00 00	 push	 5101			; 000013edH
  0008b	56		 push	 esi
  0008c	ff d7		 call	 edi
  0008e	50		 push	 eax
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 737  : 			SetWindowPos (GetDlgItem (hwndDlg, IDC_ABOUT_BKG), HWND_TOP, 0, 0, rec.right, rec.bottom, SWP_NOMOVE);

  00095	8b 54 24 1c	 mov	 edx, DWORD PTR _rec$138190[esp+148]
  00099	8b 44 24 18	 mov	 eax, DWORD PTR _rec$138190[esp+144]
  0009d	6a 02		 push	 2
  0009f	52		 push	 edx
  000a0	50		 push	 eax
  000a1	6a 00		 push	 0
  000a3	6a 00		 push	 0
  000a5	6a 00		 push	 0
  000a7	68 b5 13 00 00	 push	 5045			; 000013b5H
  000ac	56		 push	 esi
  000ad	ff d7		 call	 edi
  000af	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetWindowPos@28
  000b5	50		 push	 eax
  000b6	ff d3		 call	 ebx

; 738  : 
; 739  : 			// Resize the logo bitmap if the user has a non-default DPI 
; 740  : 			if (ScreenDPI != USER_DEFAULT_SCREEN_DPI)

  000b8	83 3d 00 00 00
	00 60		 cmp	 DWORD PTR _ScreenDPI, 96 ; 00000060H
  000bf	74 3e		 je	 SHORT $LN9@AboutDlgPr

; 741  : 			{
; 742  : 				// Logo (must recreate and keep the original aspect ratio as Windows distorts it)
; 743  : 				hbmTextualLogoBitmapRescaled = RenderBitmap (MAKEINTRESOURCE (IDB_TEXTUAL_LOGO_288DPI),
; 744  : 					GetDlgItem (hwndDlg, IDC_TEXTUAL_LOGO_IMG),
; 745  : 					0, 0, 0, 0, FALSE, TRUE);

  000c1	6a 01		 push	 1
  000c3	6a 00		 push	 0
  000c5	6a 00		 push	 0
  000c7	6a 00		 push	 0
  000c9	6a 00		 push	 0
  000cb	6a 00		 push	 0
  000cd	68 eb 13 00 00	 push	 5099			; 000013ebH
  000d2	56		 push	 esi
  000d3	ff d7		 call	 edi
  000d5	50		 push	 eax
  000d6	68 07 02 00 00	 push	 519			; 00000207H
  000db	e8 00 00 00 00	 call	 _RenderBitmap
  000e0	83 c4 20	 add	 esp, 32			; 00000020H

; 746  : 
; 747  : 				SetWindowPos (GetDlgItem (hwndDlg, IDC_ABOUT_BKG), HWND_TOP, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE);

  000e3	6a 03		 push	 3
  000e5	6a 00		 push	 0
  000e7	6a 00		 push	 0
  000e9	6a 00		 push	 0
  000eb	6a 00		 push	 0
  000ed	6a 00		 push	 0
  000ef	68 b5 13 00 00	 push	 5045			; 000013b5H
  000f4	56		 push	 esi
  000f5	a3 00 00 00 00	 mov	 DWORD PTR ?hbmTextualLogoBitmapRescaled@?1??AboutDlgProc@@9@16@4PAUHBITMAP__@@A, eax
  000fa	ff d7		 call	 edi
  000fc	50		 push	 eax
  000fd	ff d3		 call	 ebx
$LN9@AboutDlgPr:

; 748  : 			}
; 749  : 
; 750  : 			// Version
; 751  : 			SendMessage (GetDlgItem (hwndDlg, IDT_ABOUT_VERSION), WM_SETFONT, (WPARAM) hUserBoldFont, 0);

  000ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hUserBoldFont
  00105	6a 00		 push	 0
  00107	51		 push	 ecx
  00108	6a 30		 push	 48			; 00000030H
  0010a	68 b6 13 00 00	 push	 5046			; 000013b6H
  0010f	56		 push	 esi
  00110	ff d7		 call	 edi
  00112	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  00118	50		 push	 eax
  00119	ff d3		 call	 ebx

; 752  : 			snprintf (szTmp, ARRAY_LENGTH(szTmp), "CipherShed %s", VERSION_STRING);

  0011b	68 00 00 00 00	 push	 OFFSET ??_C@_05JPPCAGFG@0?47?43?$AA@
  00120	68 00 00 00 00	 push	 OFFSET ??_C@_0O@HAOBOOIJ@CipherShed?5?$CFs?$AA@
  00125	8d 54 24 28	 lea	 edx, DWORD PTR _szTmp$138189[esp+144]
  00129	6a 64		 push	 100			; 00000064H
  0012b	52		 push	 edx
  0012c	e8 00 00 00 00	 call	 _sprintf_s

; 753  : #if (defined(_DEBUG) || defined(DEBUG))
; 754  : 			strcat (szTmp, "  (debug)");
; 755  : #endif
; 756  : 			SetDlgItemText (hwndDlg, IDT_ABOUT_VERSION, szTmp);

  00131	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SetDlgItemTextA@12
  00137	83 c4 10	 add	 esp, 16			; 00000010H
  0013a	8d 44 24 20	 lea	 eax, DWORD PTR _szTmp$138189[esp+136]
  0013e	50		 push	 eax
  0013f	68 b6 13 00 00	 push	 5046			; 000013b6H
  00144	56		 push	 esi
  00145	ff d5		 call	 ebp

; 757  : 			SetDlgItemText (hwndDlg, IDT_ABOUT_RELEASE, TC_STR_RELEASED_BY);

  00147	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@OLEPOIOI@Released?5by?5CipherShed?5on?5Februa@
  0014c	68 fb 13 00 00	 push	 5115			; 000013fbH
  00151	56		 push	 esi
  00152	ff d5		 call	 ebp

; 758  : 
; 759  : 			// Credits
; 760  : 			SendMessage (GetDlgItem (hwndDlg, IDC_ABOUT_CREDITS), WM_SETFONT, (WPARAM) hUserFont, (LPARAM) 0);

  00154	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hUserFont
  0015a	6a 00		 push	 0
  0015c	51		 push	 ecx
  0015d	6a 30		 push	 48			; 00000030H
  0015f	68 b8 13 00 00	 push	 5048			; 000013b8H
  00164	56		 push	 esi
  00165	ff d7		 call	 edi
  00167	50		 push	 eax
  00168	ff d3		 call	 ebx

; 761  : 			SendMessage (hwndDlg, WM_APP, 0, 0);

  0016a	6a 00		 push	 0
  0016c	6a 00		 push	 0
  0016e	68 00 80 00 00	 push	 32768			; 00008000H
  00173	56		 push	 esi
  00174	ff d3		 call	 ebx
  00176	5f		 pop	 edi
  00177	5d		 pop	 ebp
  00178	5b		 pop	 ebx

; 762  : 			return 1;

  00179	e9 b9 00 00 00	 jmp	 $LN18@AboutDlgPr
$LN2@AboutDlgPr:

; 809  : 
; 810  : 	case WM_CLOSE:
; 811  : 		/* Delete buffered bitmaps (if any) */
; 812  : 		if (hbmTextualLogoBitmapRescaled != NULL)

  0017e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hbmTextualLogoBitmapRescaled@?1??AboutDlgProc@@9@16@4PAUHBITMAP__@@A
  00183	85 c0		 test	 eax, eax
  00185	74 11		 je	 SHORT $LN1@AboutDlgPr

; 813  : 		{
; 814  : 			DeleteObject ((HGDIOBJ) hbmTextualLogoBitmapRescaled);

  00187	50		 push	 eax
  00188	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 815  : 			hbmTextualLogoBitmapRescaled = NULL;

  0018e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hbmTextualLogoBitmapRescaled@?1??AboutDlgProc@@9@16@4PAUHBITMAP__@@A, 0
$LN1@AboutDlgPr:

; 816  : 		}
; 817  : 
; 818  : 		EndDialog (hwndDlg, 0);

  00198	6a 00		 push	 0
  0019a	56		 push	 esi
  0019b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 819  : 		return 1;

  001a1	e9 91 00 00 00	 jmp	 $LN18@AboutDlgPr
$LN7@AboutDlgPr:

; 763  : 		}
; 764  : 
; 765  : 	case WM_APP:
; 766  : 		SetWindowTextA(GetDlgItem (hwndDlg, IDC_ABOUT_CREDITS),
; 767  : 			"Portions of this software are based in part on the works of the following people: "
; 768  : 			"Paul Le Roux, "
; 769  : 			"Bruce Schneier, John Kelsey, Doug Whiting, David Wagner, Chris Hall, Niels Ferguson, "
; 770  : 			"Lars Knudsen, Ross Anderson, Eli Biham, "
; 771  : 			"Joan Daemen, Vincent Rijmen, "
; 772  : 			"Phillip Rogaway, "
; 773  : 			"Hans Dobbertin, Antoon Bosselaers, Bart Preneel, "
; 774  : 			"Paulo Barreto, Brian Gladman, Wei Dai, Peter Gutmann, and many others.\r\n\r\n"
; 775  : 
; 776  : 			"Portions of this software:\r\n"
; 777  : 			"Copyright \xA9 2014 The CipherShed Project. All Rights Reserved.\r\n"
; 778  : 			"Copyright \xA9 2003-2012 TrueCrypt Developers Association. All Rights Reserved.\r\n"
; 779  : 			"Copyright \xA9 1998-2000 Paul Le Roux. All Rights Reserved.\r\n"
; 780  : 			"Copyright \xA9 1998-2008 Brian Gladman. All Rights Reserved.\r\n"
; 781  : 			"Copyright \xA9 2002-2004 Mark Adler. All Rights Reserved.\r\n\r\n"
; 782  : 
; 783  : 			"This software as a whole:\r\n"
; 784  : 			"Copyright \xA9 2014 The CipherShed Project. All Rights Reserved.\r\n");
; 785  : 
; 786  : 		return 1;
; 787  : 
; 788  : 	case WM_COMMAND:
; 789  : 		if (lw == IDOK || lw == IDCANCEL)

  001a6	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR _wParam$[esp+120]
  001ad	66 83 f8 01	 cmp	 ax, 1
  001b1	74 56		 je	 SHORT $LN5@AboutDlgPr
  001b3	66 83 f8 02	 cmp	 ax, 2
  001b7	74 50		 je	 SHORT $LN5@AboutDlgPr

; 793  : 		}
; 794  : 
; 795  : 		if (lw == IDC_HOMEPAGE)

  001b9	ba ff 01 00 00	 mov	 edx, 511		; 000001ffH
  001be	66 3b c2	 cmp	 ax, dx
  001c1	75 16		 jne	 SHORT $LN4@AboutDlgPr

; 796  : 		{
; 797  : 			Applink ("main", TRUE, "");

  001c3	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  001c8	6a 01		 push	 1
  001ca	68 00 00 00 00	 push	 OFFSET ??_C@_04GHJNJNPO@main?$AA@
  001cf	e8 00 00 00 00	 call	 _Applink
  001d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 798  : 			return 1;

  001d7	eb 5e		 jmp	 SHORT $LN18@AboutDlgPr
$LN4@AboutDlgPr:

; 799  : 		}
; 800  : 
; 801  : 		// Disallow modification of credits
; 802  : 		if (HIWORD (wParam) == EN_UPDATE)

  001d9	c1 e8 10	 shr	 eax, 16			; 00000010H
  001dc	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  001e1	75 12		 jne	 SHORT $LN3@AboutDlgPr

; 803  : 		{
; 804  : 			SendMessage (hwndDlg, WM_APP, 0, 0);

  001e3	6a 00		 push	 0
  001e5	6a 00		 push	 0
  001e7	68 00 80 00 00	 push	 32768			; 00008000H
  001ec	56		 push	 esi
  001ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 805  : 			return 1;

  001f3	eb 42		 jmp	 SHORT $LN18@AboutDlgPr
$LN3@AboutDlgPr:

; 806  : 		}
; 807  : 
; 808  : 		return 0;

  001f5	33 c0		 xor	 eax, eax
  001f7	5e		 pop	 esi

; 823  : }

  001f8	8b 4c 24 74	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+120]
  001fc	33 cc		 xor	 ecx, esp
  001fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00203	83 c4 78	 add	 esp, 120		; 00000078H
  00206	c2 10 00	 ret	 16			; 00000010H
$LN5@AboutDlgPr:

; 790  : 		{
; 791  : 			PostMessage (hwndDlg, WM_CLOSE, 0, 0);

  00209	6a 00		 push	 0
  0020b	6a 00		 push	 0
  0020d	6a 10		 push	 16			; 00000010H
  0020f	56		 push	 esi
  00210	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 792  : 			return 1;

  00216	eb 1f		 jmp	 SHORT $LN18@AboutDlgPr
$LN15@AboutDlgPr:

; 719  : 	WORD lw = LOWORD (wParam);
; 720  : 	static HBITMAP hbmTextualLogoBitmapRescaled = NULL;
; 721  : 
; 722  : 	switch (msg)

  00218	3d 00 80 00 00	 cmp	 eax, 32768		; 00008000H

; 820  : 	}
; 821  : 
; 822  : 	return 0;

  0021d	75 d6		 jne	 SHORT $LN3@AboutDlgPr
  0021f	68 00 00 00 00	 push	 OFFSET ??_C@_0DDJ@INFJPGJH@Portions?5of?5this?5software?5are?5ba@
  00224	68 b8 13 00 00	 push	 5048			; 000013b8H
  00229	56		 push	 esi
  0022a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00230	50		 push	 eax
  00231	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8
$LN18@AboutDlgPr:

; 823  : }

  00237	8b 4c 24 78	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+124]
  0023b	5e		 pop	 esi
  0023c	33 cc		 xor	 ecx, esp
  0023e	b8 01 00 00 00	 mov	 eax, 1
  00243	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00248	83 c4 78	 add	 esp, 120		; 00000078H
  0024b	c2 10 00	 ret	 16			; 00000010H
_AboutDlgProc@16 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@JIKAMFDK@EXCEPTION_REPORT_EXT?$AA@	; `string'
PUBLIC	??_C@_0BH@KPCDNAAO@EXCEPTION_REPORT_TITLE?$AA@	; `string'
PUBLIC	??_C@_0BB@PFGPMKFM@EXCEPTION_REPORT?$AA@	; `string'
PUBLIC	??_C@_0IK@LKDHDEMN@https?3?1?1ciphershed?4org?1applink?$DPv@ ; `string'
PUBLIC	??_C@_05LABDNII@setup?$AA@			; `string'
PUBLIC	??_C@_03NDFEINMN@x86?$AA@			; `string'
PUBLIC	??_C@_03OLPMMCEF@x64?$AA@			; `string'
PUBLIC	??_C@_01JOAMLHOP@?9?$AA@			; `string'
PUBLIC	??_C@_0BA@EIBJDAPB@?$CGlangpack?$DN?$CFs_?$CFs?$AA@ ; `string'
PUBLIC	??_C@_03BPHHBGPB@?$DN0x?$AA@			; `string'
PUBLIC	??_C@_01NEMOKFLO@?$DN?$AA@			; `string'
PUBLIC	??_C@_03EGAGLKPK@?$CGst?$AA@			; `string'
PUBLIC	??_C@_0M@GHNAPHBH@SymFromAddr?$AA@		; `string'
PUBLIC	??_C@_0M@FJINHFIC@StackWalk64?$AA@		; `string'
PUBLIC	??_C@_0BD@JCAKOMOK@SymGetModuleBase64?$AA@	; `string'
PUBLIC	??_C@_0BJ@OOGADJNM@SymFunctionTableAccess64?$AA@ ; `string'
PUBLIC	??_C@_0O@MCMFENKA@SymInitialize?$AA@		; `string'
PUBLIC	??_C@_0O@LIDFOEPH@SymSetOptions?$AA@		; `string'
PUBLIC	??_C@_0O@KGBKFDLO@SymGetOptions?$AA@		; `string'
PUBLIC	??_C@_0M@OOEJBPPK@dbghelp?4dll?$AA@		; `string'
PUBLIC	_threadArg$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?ExceptionHandlerThread@@YAXPAX@Z		; ExceptionHandlerThread
EXTRN	__imp__UnhandledExceptionFilter@4:PROC
EXTRN	_GetActiveLangPackVersion:PROC
EXTRN	__imp__GetSystemInfo@4:PROC
EXTRN	_GetCrc32:PROC
EXTRN	__imp__GetFileInformationByHandle@8:PROC
EXTRN	_isalnum:PROC
EXTRN	__imp__LoadLibraryA@4:PROC
;	COMDAT ??_C@_0BF@JIKAMFDK@EXCEPTION_REPORT_EXT?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_0BF@JIKAMFDK@EXCEPTION_REPORT_EXT?$AA@ DB 'EXCEPTION_REPORT_EXT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KPCDNAAO@EXCEPTION_REPORT_TITLE?$AA@
CONST	SEGMENT
??_C@_0BH@KPCDNAAO@EXCEPTION_REPORT_TITLE?$AA@ DB 'EXCEPTION_REPORT_TITLE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PFGPMKFM@EXCEPTION_REPORT?$AA@
CONST	SEGMENT
??_C@_0BB@PFGPMKFM@EXCEPTION_REPORT?$AA@ DB 'EXCEPTION_REPORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0IK@LKDHDEMN@https?3?1?1ciphershed?4org?1applink?$DPv@
CONST	SEGMENT
??_C@_0IK@LKDHDEMN@https?3?1?1ciphershed?4org?1applink?$DPv@ DB 'https://'
	DB	'ciphershed.org/applink?version=0.7.3&dest=err-report%s&os=%s&'
	DB	'osver=%d.%d.%d&arch=%s&cpus=%d&app=%s&cksum=%x&dlg=%s&err=%x&'
	DB	'addr=%x', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05LABDNII@setup?$AA@
CONST	SEGMENT
??_C@_05LABDNII@setup?$AA@ DB 'setup', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NDFEINMN@x86?$AA@
CONST	SEGMENT
??_C@_03NDFEINMN@x86?$AA@ DB 'x86', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OLPMMCEF@x64?$AA@
CONST	SEGMENT
??_C@_03OLPMMCEF@x64?$AA@ DB 'x64', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JOAMLHOP@?9?$AA@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9?$AA@ DB '-', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EIBJDAPB@?$CGlangpack?$DN?$CFs_?$CFs?$AA@
CONST	SEGMENT
??_C@_0BA@EIBJDAPB@?$CGlangpack?$DN?$CFs_?$CFs?$AA@ DB '&langpack=%s_%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03BPHHBGPB@?$DN0x?$AA@
CONST	SEGMENT
??_C@_03BPHHBGPB@?$DN0x?$AA@ DB '=0x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01NEMOKFLO@?$DN?$AA@
CONST	SEGMENT
??_C@_01NEMOKFLO@?$DN?$AA@ DB '=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03EGAGLKPK@?$CGst?$AA@
CONST	SEGMENT
??_C@_03EGAGLKPK@?$CGst?$AA@ DB '&st', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GHNAPHBH@SymFromAddr?$AA@
CONST	SEGMENT
??_C@_0M@GHNAPHBH@SymFromAddr?$AA@ DB 'SymFromAddr', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FJINHFIC@StackWalk64?$AA@
CONST	SEGMENT
??_C@_0M@FJINHFIC@StackWalk64?$AA@ DB 'StackWalk64', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JCAKOMOK@SymGetModuleBase64?$AA@
CONST	SEGMENT
??_C@_0BD@JCAKOMOK@SymGetModuleBase64?$AA@ DB 'SymGetModuleBase64', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OOGADJNM@SymFunctionTableAccess64?$AA@
CONST	SEGMENT
??_C@_0BJ@OOGADJNM@SymFunctionTableAccess64?$AA@ DB 'SymFunctionTableAcce'
	DB	'ss64', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MCMFENKA@SymInitialize?$AA@
CONST	SEGMENT
??_C@_0O@MCMFENKA@SymInitialize?$AA@ DB 'SymInitialize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LIDFOEPH@SymSetOptions?$AA@
CONST	SEGMENT
??_C@_0O@LIDFOEPH@SymSetOptions?$AA@ DB 'SymSetOptions', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KGBKFDLO@SymGetOptions?$AA@
CONST	SEGMENT
??_C@_0O@KGBKFDLO@SymGetOptions?$AA@ DB 'SymGetOptions', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OOEJBPPK@dbghelp?4dll?$AA@
CONST	SEGMENT
??_C@_0M@OOEJBPPK@dbghelp?4dll?$AA@ DB 'dbghelp.dll', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?ExceptionHandlerThread@@YAXPAX@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?ExceptionHandlerThread@@YAXPAX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ExceptionHandlerThread@@YAXPAX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$6
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
xdata$x	ENDS
;	COMDAT ?ExceptionHandlerThread@@YAXPAX@Z
_TEXT	SEGMENT
_frameNumber$ = -21580					; size = 4
_bytesRead$139514 = -21576				; size = 4
_stackTop$ = -21576					; size = 4
_sp$ = -21576						; size = 4
_ep$ = -21572						; size = 4
_threadArg$GSCopy$ = -21568				; size = 4
$T197384 = -21568					; size = 4
_DbgHelpStackWalk64$138728 = -21564			; size = 4
_DbgHelpSymGetModuleBase64$138725 = -21560		; size = 4
_DbgHelpSymFromAddr$138731 = -21556			; size = 4
_DbgHelpSymFunctionTableAccess64$138722 = -21552	; size = 4
_crc$ = -21548						; size = 4
_retAddrs$ = -21544					; size = 28
_exCode$ = -21516					; size = 4
_DbgHelpSymInitialize$138719 = -21512			; size = 4
_addr$ = -21508						; size = 4
_mi$ = -21504						; size = 28
_callStack$ = -21476					; size = 136
_frame$138736 = -21340					; size = 264
_si$ = -21076						; size = 36
_symbolBuffer$138746 = -21040				; size = 2088
$T197404 = -18952					; size = 28
$T197403 = -18952					; size = 28
_fi$139509 = -18952					; size = 52
_$S2$139492 = -18952					; size = 52
_$S1$139454 = -18952					; size = 52
_lastSymbol$138737 = -18952				; size = 28
_urlStr$ = -18900					; size = 28
_lpack$ = -18872					; size = 128
_modPath$ = -18744					; size = 260
_url$ = -18484						; size = 2084
_msg$ = -16400						; size = 16384
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_threadArg$ = 8						; size = 4
?ExceptionHandlerThread@@YAXPAX@Z PROC			; ExceptionHandlerThread, COMDAT

; 1418 : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?ExceptionHandlerThread@@YAXPAX@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	b8 40 54 00 00	 mov	 eax, 21568		; 00005440H
  00013	e8 00 00 00 00	 call	 __chkstk
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c4		 xor	 eax, esp
  0001f	89 84 24 3c 54
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+21580], eax
  00026	53		 push	 ebx
  00027	55		 push	 ebp
  00028	56		 push	 esi
  00029	57		 push	 edi
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c4		 xor	 eax, esp
  00031	50		 push	 eax
  00032	8d 84 24 54 54
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+21600]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	8b 84 24 64 54
	00 00		 mov	 eax, DWORD PTR _threadArg$[esp+21596]

; 1419 : 	ExceptionHandlerThreadArgs *args = (ExceptionHandlerThreadArgs *) threadArg;
; 1420 : 
; 1421 : 	EXCEPTION_POINTERS *ep = args->ExceptionPointers;

  00046	8b 30		 mov	 esi, DWORD PTR [eax]
  00048	89 44 24 20	 mov	 DWORD PTR _threadArg$GSCopy$[esp+21600], eax

; 1422 : 	DWORD addr;
; 1423 : 	DWORD exCode = ep->ExceptionRecord->ExceptionCode;

  0004c	8b 06		 mov	 eax, DWORD PTR [esi]
  0004e	8b 38		 mov	 edi, DWORD PTR [eax]

; 1424 : 	SYSTEM_INFO si;
; 1425 : 	wchar_t msg[8192];
; 1426 : 	char modPath[MAX_PATH];
; 1427 : 	int crc = 0;
; 1428 : 	char url[MAX_URL_LENGTH];
; 1429 : 	char lpack[128];
; 1430 : 	stringstream callStack;

  00050	6a 01		 push	 1
  00052	33 db		 xor	 ebx, ebx
  00054	6a 03		 push	 3
  00056	8d 8c 24 84 00
	00 00		 lea	 ecx, DWORD PTR _callStack$[esp+21608]
  0005d	89 74 24 24	 mov	 DWORD PTR _ep$[esp+21608], esi
  00061	89 7c 24 5c	 mov	 DWORD PTR _exCode$[esp+21608], edi
  00065	89 5c 24 3c	 mov	 DWORD PTR _crc$[esp+21608], ebx
  00069	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >

; 1431 : 	addr = (DWORD) ep->ExceptionRecord->ExceptionAddress;

  0006e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00070	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]

; 1432 : 	PDWORD sp = (PDWORD) ep->ContextRecord->Esp;

  00073	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00076	8b 88 c4 00 00
	00		 mov	 ecx, DWORD PTR [eax+196]
  0007c	89 9c 24 5c 54
	00 00		 mov	 DWORD PTR __$EHRec$[esp+21608], ebx
  00083	89 54 24 5c	 mov	 DWORD PTR _addr$[esp+21600], edx
  00087	89 4c 24 18	 mov	 DWORD PTR _sp$[esp+21600], ecx

; 1433 : 	int frameNumber = 0;

  0008b	89 5c 24 14	 mov	 DWORD PTR _frameNumber$[esp+21600], ebx

; 1434 : 
; 1435 : 	switch (exCode)

  0008f	81 ff de fa ed
	0e		 cmp	 edi, 250477278		; 0eedfadeH
  00095	0f 84 77 0a 00
	00		 je	 $LN44@ExceptionH
  0009b	81 ff 06 00 00
	c0		 cmp	 edi, -1073741818	; c0000006H
  000a1	0f 84 6b 0a 00
	00		 je	 $LN44@ExceptionH

; 1444 : 	}
; 1445 : 
; 1446 : 	// Call stack
; 1447 : 	HMODULE dbgDll = LoadLibrary ("dbghelp.dll");

  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OOEJBPPK@dbghelp?4dll?$AA@
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
  000b2	8b f0		 mov	 esi, eax

; 1448 : 	if (dbgDll)

  000b4	3b f3		 cmp	 esi, ebx
  000b6	0f 84 44 03 00
	00		 je	 $LN41@ExceptionH

; 1449 : 	{
; 1450 : 		typedef DWORD (__stdcall *SymGetOptions_t) ();
; 1451 : 		typedef DWORD (__stdcall *SymSetOptions_t) (DWORD SymOptions);
; 1452 : 		typedef BOOL (__stdcall *SymInitialize_t) (HANDLE hProcess, PCSTR UserSearchPath, BOOL fInvadeProcess);
; 1453 : 		typedef BOOL (__stdcall *StackWalk64_t) (DWORD MachineType, HANDLE hProcess, HANDLE hThread, LPSTACKFRAME64 StackFrame, PVOID ContextRecord, PREAD_PROCESS_MEMORY_ROUTINE64 ReadMemoryRoutine, PFUNCTION_TABLE_ACCESS_ROUTINE64 FunctionTableAccessRoutine, PGET_MODULE_BASE_ROUTINE64 GetModuleBaseRoutine, PTRANSLATE_ADDRESS_ROUTINE64 TranslateAddress);
; 1454 : 		typedef BOOL (__stdcall * SymFromAddr_t) (HANDLE hProcess, DWORD64 Address, PDWORD64 Displacement, PSYMBOL_INFO Symbol);
; 1455 : 
; 1456 : 		SymGetOptions_t DbgHelpSymGetOptions = (SymGetOptions_t) GetProcAddress (dbgDll, "SymGetOptions");

  000bc	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetProcAddress@8
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0O@KGBKFDLO@SymGetOptions?$AA@
  000c7	56		 push	 esi
  000c8	ff d7		 call	 edi

; 1457 : 		SymSetOptions_t DbgHelpSymSetOptions = (SymSetOptions_t) GetProcAddress (dbgDll, "SymSetOptions");

  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LIDFOEPH@SymSetOptions?$AA@
  000cf	56		 push	 esi
  000d0	8b e8		 mov	 ebp, eax
  000d2	ff d7		 call	 edi

; 1458 : 		SymInitialize_t DbgHelpSymInitialize = (SymInitialize_t) GetProcAddress (dbgDll, "SymInitialize");

  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MCMFENKA@SymInitialize?$AA@
  000d9	56		 push	 esi
  000da	8b d8		 mov	 ebx, eax
  000dc	ff d7		 call	 edi

; 1459 : 		PFUNCTION_TABLE_ACCESS_ROUTINE64 DbgHelpSymFunctionTableAccess64 = (PFUNCTION_TABLE_ACCESS_ROUTINE64) GetProcAddress (dbgDll, "SymFunctionTableAccess64");

  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@OOGADJNM@SymFunctionTableAccess64?$AA@
  000e3	56		 push	 esi
  000e4	89 44 24 60	 mov	 DWORD PTR _DbgHelpSymInitialize$138719[esp+21608], eax
  000e8	ff d7		 call	 edi

; 1460 : 		PGET_MODULE_BASE_ROUTINE64 DbgHelpSymGetModuleBase64 = (PGET_MODULE_BASE_ROUTINE64) GetProcAddress (dbgDll, "SymGetModuleBase64");

  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JCAKOMOK@SymGetModuleBase64?$AA@
  000ef	56		 push	 esi
  000f0	89 44 24 38	 mov	 DWORD PTR _DbgHelpSymFunctionTableAccess64$138722[esp+21608], eax
  000f4	ff d7		 call	 edi

; 1461 : 		StackWalk64_t DbgHelpStackWalk64 = (StackWalk64_t) GetProcAddress (dbgDll, "StackWalk64");

  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FJINHFIC@StackWalk64?$AA@
  000fb	56		 push	 esi
  000fc	89 44 24 30	 mov	 DWORD PTR _DbgHelpSymGetModuleBase64$138725[esp+21608], eax
  00100	ff d7		 call	 edi

; 1462 : 		SymFromAddr_t DbgHelpSymFromAddr = (SymFromAddr_t) GetProcAddress (dbgDll, "SymFromAddr");

  00102	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GHNAPHBH@SymFromAddr?$AA@
  00107	56		 push	 esi
  00108	89 44 24 2c	 mov	 DWORD PTR _DbgHelpStackWalk64$138728[esp+21608], eax
  0010c	ff d7		 call	 edi
  0010e	89 44 24 2c	 mov	 DWORD PTR _DbgHelpSymFromAddr$138731[esp+21600], eax

; 1463 : 
; 1464 : 		if (DbgHelpSymGetOptions && DbgHelpSymSetOptions && DbgHelpSymInitialize && DbgHelpSymFunctionTableAccess64 && DbgHelpSymGetModuleBase64 && DbgHelpStackWalk64 && DbgHelpSymFromAddr)

  00112	85 ed		 test	 ebp, ebp
  00114	0f 84 e6 02 00
	00		 je	 $LN41@ExceptionH
  0011a	33 ff		 xor	 edi, edi
  0011c	3b df		 cmp	 ebx, edi
  0011e	0f 84 dc 02 00
	00		 je	 $LN41@ExceptionH
  00124	8b 74 24 58	 mov	 esi, DWORD PTR _DbgHelpSymInitialize$138719[esp+21600]
  00128	3b f7		 cmp	 esi, edi
  0012a	0f 84 d0 02 00
	00		 je	 $LN41@ExceptionH
  00130	39 7c 24 30	 cmp	 DWORD PTR _DbgHelpSymFunctionTableAccess64$138722[esp+21600], edi
  00134	0f 84 c6 02 00
	00		 je	 $LN41@ExceptionH
  0013a	39 7c 24 28	 cmp	 DWORD PTR _DbgHelpSymGetModuleBase64$138725[esp+21600], edi
  0013e	0f 84 bc 02 00
	00		 je	 $LN41@ExceptionH
  00144	39 7c 24 24	 cmp	 DWORD PTR _DbgHelpStackWalk64$138728[esp+21600], edi
  00148	0f 84 b2 02 00
	00		 je	 $LN41@ExceptionH
  0014e	3b c7		 cmp	 eax, edi
  00150	0f 84 aa 02 00
	00		 je	 $LN41@ExceptionH

; 1465 : 		{
; 1466 : 			DbgHelpSymSetOptions (DbgHelpSymGetOptions() | SYMOPT_DEFERRED_LOADS | SYMOPT_ALLOW_ABSOLUTE_SYMBOLS | SYMOPT_NO_CPP);

  00156	ff d5		 call	 ebp
  00158	0d 0c 08 00 00	 or	 eax, 2060		; 0000080cH
  0015d	50		 push	 eax
  0015e	ff d3		 call	 ebx

; 1467 : 
; 1468 : 			if (DbgHelpSymInitialize (GetCurrentProcess(), NULL, TRUE))

  00160	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetCurrentProcess@0
  00166	6a 01		 push	 1
  00168	57		 push	 edi
  00169	ff d3		 call	 ebx
  0016b	50		 push	 eax
  0016c	ff d6		 call	 esi
  0016e	85 c0		 test	 eax, eax
  00170	0f 84 8a 02 00
	00		 je	 $LN41@ExceptionH

; 1469 : 			{
; 1470 : 				STACKFRAME64 frame;
; 1471 : 				memset (&frame, 0, sizeof (frame));

  00176	68 08 01 00 00	 push	 264			; 00000108H
  0017b	8d 94 24 08 01
	00 00		 lea	 edx, DWORD PTR _frame$138736[esp+21604]
  00182	57		 push	 edi
  00183	52		 push	 edx
  00184	e8 00 00 00 00	 call	 _memset

; 1472 : 
; 1473 : 				frame.AddrPC.Offset = ep->ContextRecord->Eip;

  00189	8b 44 24 28	 mov	 eax, DWORD PTR _ep$[esp+21612]
  0018d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00190	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR [eax+184]
  00196	89 8c 24 10 01
	00 00		 mov	 DWORD PTR _frame$138736[esp+21612], ecx

; 1474 : 				frame.AddrPC.Mode = AddrModeFlat;

  0019d	b9 03 00 00 00	 mov	 ecx, 3
  001a2	89 bc 24 14 01
	00 00		 mov	 DWORD PTR _frame$138736[esp+21616], edi
  001a9	89 8c 24 1c 01
	00 00		 mov	 DWORD PTR _frame$138736[esp+21624], ecx

; 1475 : 				frame.AddrStack.Offset = ep->ContextRecord->Esp;

  001b0	8b 90 c4 00 00
	00		 mov	 edx, DWORD PTR [eax+196]
  001b6	89 94 24 40 01
	00 00		 mov	 DWORD PTR _frame$138736[esp+21660], edx
  001bd	89 bc 24 44 01
	00 00		 mov	 DWORD PTR _frame$138736[esp+21664], edi

; 1476 : 				frame.AddrStack.Mode = AddrModeFlat;

  001c4	89 8c 24 4c 01
	00 00		 mov	 DWORD PTR _frame$138736[esp+21672], ecx

; 1477 : 				frame.AddrFrame.Offset = ep->ContextRecord->Ebp;

  001cb	8b 80 b4 00 00
	00		 mov	 eax, DWORD PTR [eax+180]
  001d1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d4	89 84 24 24 01
	00 00		 mov	 DWORD PTR _frame$138736[esp+21632], eax
  001db	89 bc 24 28 01
	00 00		 mov	 DWORD PTR _frame$138736[esp+21636], edi

; 1478 : 				frame.AddrFrame.Mode = AddrModeFlat;

  001e2	89 8c 24 30 01
	00 00		 mov	 DWORD PTR _frame$138736[esp+21644], ecx

; 1479 : 
; 1480 : 				string lastSymbol;

  001e9	c7 84 24 70 0a
	00 00 0f 00 00
	00		 mov	 DWORD PTR _lastSymbol$138737[esp+21624], 15 ; 0000000fH
  001f4	89 bc 24 6c 0a
	00 00		 mov	 DWORD PTR _lastSymbol$138737[esp+21620], edi
  001fb	c6 84 24 5c 0a
	00 00 00	 mov	 BYTE PTR _lastSymbol$138737[esp+21604], 0
  00203	c6 84 24 5c 54
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+21608], 1
  0020b	bd d0 07 00 00	 mov	 ebp, 2000		; 000007d0H
$LN40@ExceptionH:

; 1481 : 
; 1482 : 				while (frameNumber < 32 && DbgHelpStackWalk64 (IMAGE_FILE_MACHINE_I386, GetCurrentProcess(), args->ExceptionThread, &frame, ep->ContextRecord, NULL, DbgHelpSymFunctionTableAccess64, DbgHelpSymGetModuleBase64, NULL))

  00210	8b 4c 24 28	 mov	 ecx, DWORD PTR _DbgHelpSymGetModuleBase64$138725[esp+21600]
  00214	8b 54 24 30	 mov	 edx, DWORD PTR _DbgHelpSymFunctionTableAccess64$138722[esp+21600]
  00218	8b 44 24 1c	 mov	 eax, DWORD PTR _ep$[esp+21600]
  0021c	6a 00		 push	 0
  0021e	51		 push	 ecx
  0021f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00222	8b 44 24 28	 mov	 eax, DWORD PTR _threadArg$GSCopy$[esp+21608]
  00226	52		 push	 edx
  00227	6a 00		 push	 0
  00229	51		 push	 ecx
  0022a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0022d	8d 94 24 18 01
	00 00		 lea	 edx, DWORD PTR _frame$138736[esp+21620]
  00234	52		 push	 edx
  00235	51		 push	 ecx
  00236	ff d3		 call	 ebx
  00238	50		 push	 eax
  00239	68 4c 01 00 00	 push	 332			; 0000014cH
  0023e	ff 54 24 48	 call	 DWORD PTR _DbgHelpStackWalk64$138728[esp+21636]
  00242	85 c0		 test	 eax, eax
  00244	0f 84 a2 01 00
	00		 je	 $LN39@ExceptionH

; 1483 : 				{
; 1484 : 					if (!frame.AddrPC.Offset)

  0024a	8b b4 24 04 01
	00 00		 mov	 esi, DWORD PTR _frame$138736[esp+21600]
  00251	8b bc 24 08 01
	00 00		 mov	 edi, DWORD PTR _frame$138736[esp+21604]
  00258	8b d6		 mov	 edx, esi
  0025a	0b d7		 or	 edx, edi
  0025c	0f 84 7f 01 00
	00		 je	 $LN30@ExceptionH

; 1485 : 						continue;
; 1486 : 
; 1487 : 					ULONG64 symbolBuffer[(sizeof (SYMBOL_INFO) + MAX_SYM_NAME * sizeof (TCHAR) + sizeof (ULONG64) - 1) / sizeof (ULONG64)];
; 1488 : 					memset (symbolBuffer, 0, sizeof (symbolBuffer));

  00262	68 28 08 00 00	 push	 2088			; 00000828H
  00267	8d 84 24 34 02
	00 00		 lea	 eax, DWORD PTR _symbolBuffer$138746[esp+21604]
  0026e	6a 00		 push	 0
  00270	50		 push	 eax
  00271	e8 00 00 00 00	 call	 _memset
  00276	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1489 : 
; 1490 : 					PSYMBOL_INFO symbol = (PSYMBOL_INFO) symbolBuffer;
; 1491 : 					symbol->SizeOfStruct = sizeof (SYMBOL_INFO);
; 1492 : 					symbol->MaxNameLen = MAX_SYM_NAME;
; 1493 : 
; 1494 : 					if (DbgHelpSymFromAddr (GetCurrentProcess(), frame.AddrPC.Offset, NULL, symbol) && symbol->NameLen > 0)

  00279	8d 8c 24 30 02
	00 00		 lea	 ecx, DWORD PTR _symbolBuffer$138746[esp+21600]
  00280	51		 push	 ecx
  00281	6a 00		 push	 0
  00283	57		 push	 edi
  00284	56		 push	 esi
  00285	c7 84 24 40 02
	00 00 58 00 00
	00		 mov	 DWORD PTR _symbolBuffer$138746[esp+21616], 88 ; 00000058H
  00290	89 ac 24 90 02
	00 00		 mov	 DWORD PTR _symbolBuffer$138746[esp+21696], ebp
  00297	ff d3		 call	 ebx
  00299	50		 push	 eax
  0029a	ff 54 24 40	 call	 DWORD PTR _DbgHelpSymFromAddr$138731[esp+21620]
  0029e	85 c0		 test	 eax, eax
  002a0	0f 84 b8 00 00
	00		 je	 $LN37@ExceptionH
  002a6	8b 84 24 7c 02
	00 00		 mov	 eax, DWORD PTR _symbolBuffer$138746[esp+21676]
  002ad	85 c0		 test	 eax, eax
  002af	0f 86 a9 00 00
	00		 jbe	 $LN37@ExceptionH

; 1495 : 					{
; 1496 : 						for (size_t i = 0; i < symbol->NameLen; ++i)

  002b5	33 f6		 xor	 esi, esi
  002b7	85 c0		 test	 eax, eax
  002b9	76 2c		 jbe	 SHORT $LN34@ExceptionH
  002bb	eb 03 8d 49 00	 npad	 5
$LL36@ExceptionH:

; 1497 : 						{
; 1498 : 							if (!isalnum (symbol->Name[i]))

  002c0	0f be 94 34 84
	02 00 00	 movsx	 edx, BYTE PTR _symbolBuffer$138746[esp+esi+21684]
  002c8	52		 push	 edx
  002c9	e8 00 00 00 00	 call	 _isalnum
  002ce	83 c4 04	 add	 esp, 4
  002d1	85 c0		 test	 eax, eax
  002d3	75 08		 jne	 SHORT $LN35@ExceptionH

; 1499 : 								symbol->Name[i] = '_';

  002d5	c6 84 34 84 02
	00 00 5f	 mov	 BYTE PTR _symbolBuffer$138746[esp+esi+21684], 95 ; 0000005fH
$LN35@ExceptionH:

; 1495 : 					{
; 1496 : 						for (size_t i = 0; i < symbol->NameLen; ++i)

  002dd	46		 inc	 esi
  002de	3b b4 24 7c 02
	00 00		 cmp	 esi, DWORD PTR _symbolBuffer$138746[esp+21676]
  002e5	72 d9		 jb	 SHORT $LL36@ExceptionH
$LN34@ExceptionH:

; 1500 : 						}
; 1501 : 
; 1502 : 						if (symbol->Name != lastSymbol)

  002e7	8d 84 24 58 0a
	00 00		 lea	 eax, DWORD PTR _lastSymbol$138737[esp+21600]
  002ee	50		 push	 eax
  002ef	8d 8c 24 88 02
	00 00		 lea	 ecx, DWORD PTR _symbolBuffer$138746[esp+21688]
  002f6	51		 push	 ecx
  002f7	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  002fc	83 c4 08	 add	 esp, 8
  002ff	84 c0		 test	 al, al
  00301	74 42		 je	 SHORT $LN32@ExceptionH

; 1503 : 							callStack << "&st" << frameNumber++ << "=" << symbol->Name;

  00303	8b 74 24 14	 mov	 esi, DWORD PTR _frameNumber$[esp+21600]
  00307	56		 push	 esi
  00308	8d 94 24 88 00
	00 00		 lea	 edx, DWORD PTR _callStack$[esp+21612]
  0030f	68 00 00 00 00	 push	 OFFSET ??_C@_03EGAGLKPK@?$CGst?$AA@
  00314	52		 push	 edx
  00315	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0031a	83 c4 08	 add	 esp, 8
  0031d	8b c8		 mov	 ecx, eax
  0031f	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00324	68 00 00 00 00	 push	 OFFSET ??_C@_01NEMOKFLO@?$DN?$AA@
  00329	50		 push	 eax
  0032a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0032f	8d 8c 24 8c 02
	00 00		 lea	 ecx, DWORD PTR _symbolBuffer$138746[esp+21692]
  00336	51		 push	 ecx
  00337	50		 push	 eax
  00338	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0033d	83 c4 10	 add	 esp, 16			; 00000010H
  00340	46		 inc	 esi
  00341	89 74 24 14	 mov	 DWORD PTR _frameNumber$[esp+21600], esi
$LN32@ExceptionH:

; 1504 : 
; 1505 : 						lastSymbol = symbol->Name;

  00345	8d 94 24 84 02
	00 00		 lea	 edx, DWORD PTR _symbolBuffer$138746[esp+21684]
  0034c	52		 push	 edx
  0034d	8d 8c 24 5c 0a
	00 00		 lea	 ecx, DWORD PTR _lastSymbol$138737[esp+21604]
  00354	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00359	e9 83 00 00 00	 jmp	 $LN30@ExceptionH
$LN37@ExceptionH:

; 1506 : 					}
; 1507 : 					else if (frameNumber == 0 || IsReturnAddress (frame.AddrPC.Offset))

  0035e	8b 74 24 14	 mov	 esi, DWORD PTR _frameNumber$[esp+21600]
  00362	85 f6		 test	 esi, esi
  00364	74 1c		 je	 SHORT $LN29@ExceptionH
  00366	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR _frame$138736[esp+21604]
  0036d	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR _frame$138736[esp+21600]
  00374	50		 push	 eax
  00375	51		 push	 ecx
  00376	e8 00 00 00 00	 call	 ?IsReturnAddress@@YAH_K@Z ; IsReturnAddress
  0037b	83 c4 08	 add	 esp, 8
  0037e	85 c0		 test	 eax, eax
  00380	74 5f		 je	 SHORT $LN30@ExceptionH
$LN29@ExceptionH:

; 1508 : 					{
; 1509 : 						callStack << "&st" << frameNumber++ << "=0x" << hex << frame.AddrPC.Offset << dec;

  00382	56		 push	 esi
  00383	8d 94 24 88 00
	00 00		 lea	 edx, DWORD PTR _callStack$[esp+21612]
  0038a	68 00 00 00 00	 push	 OFFSET ??_C@_03EGAGLKPK@?$CGst?$AA@
  0038f	52		 push	 edx
  00390	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00395	83 c4 08	 add	 esp, 8
  00398	8b c8		 mov	 ecx, eax
  0039a	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0039f	68 00 00 00 00	 push	 OFFSET ??_C@_03BPHHBGPB@?$DN0x?$AA@
  003a4	50		 push	 eax
  003a5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003aa	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR _frame$138736[esp+21612]
  003b1	8b 94 24 0c 01
	00 00		 mov	 edx, DWORD PTR _frame$138736[esp+21608]
  003b8	83 c4 08	 add	 esp, 8
  003bb	68 00 00 00 00	 push	 OFFSET ?dec@std@@YAAAVios_base@1@AAV21@@Z ; std::dec
  003c0	51		 push	 ecx
  003c1	52		 push	 edx
  003c2	46		 inc	 esi
  003c3	68 00 00 00 00	 push	 OFFSET ?hex@std@@YAAAVios_base@1@AAV21@@Z ; std::hex
  003c8	8b c8		 mov	 ecx, eax
  003ca	89 74 24 24	 mov	 DWORD PTR _frameNumber$[esp+21616], esi
  003ce	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  003d3	8b c8		 mov	 ecx, eax
  003d5	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  003da	8b c8		 mov	 ecx, eax
  003dc	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
$LN30@ExceptionH:

; 1481 : 
; 1482 : 				while (frameNumber < 32 && DbgHelpStackWalk64 (IMAGE_FILE_MACHINE_I386, GetCurrentProcess(), args->ExceptionThread, &frame, ep->ContextRecord, NULL, DbgHelpSymFunctionTableAccess64, DbgHelpSymGetModuleBase64, NULL))

  003e1	83 7c 24 14 20	 cmp	 DWORD PTR _frameNumber$[esp+21600], 32 ; 00000020H
  003e6	0f 8c 24 fe ff
	ff		 jl	 $LN40@ExceptionH
$LN39@ExceptionH:

; 1510 : 					}
; 1511 : 				}
; 1512 : 			}

  003ec	8d 8c 24 58 0a
	00 00		 lea	 ecx, DWORD PTR _lastSymbol$138737[esp+21600]
  003f3	c6 84 24 5c 54
	00 00 00	 mov	 BYTE PTR __$EHRec$[esp+21608], 0
  003fb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN41@ExceptionH:

; 1513 : 		}
; 1514 : 	}
; 1515 : 
; 1516 : 	// StackWalk64() may fail due to missing frame pointers
; 1517 : 	list <DWORD> retAddrs;

  00400	8d 4c 24 38	 lea	 ecx, DWORD PTR _retAddrs$[esp+21600]
  00404	e8 00 00 00 00	 call	 ??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >

; 1518 : 	if (frameNumber == 0)

  00409	83 7c 24 14 00	 cmp	 DWORD PTR _frameNumber$[esp+21600], 0
  0040e	c6 84 24 5c 54
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+21608], 2
  00416	75 17		 jne	 SHORT $LN28@ExceptionH

; 1519 : 		retAddrs.push_back (ep->ContextRecord->Eip);

  00418	8b 44 24 1c	 mov	 eax, DWORD PTR _ep$[esp+21600]
  0041c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0041f	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  00425	51		 push	 ecx
  00426	8d 4c 24 3c	 lea	 ecx, DWORD PTR _retAddrs$[esp+21604]
  0042a	e8 00 00 00 00	 call	 ?push_back@?$list@KV?$allocator@K@std@@@std@@QAEXABK@Z ; std::list<unsigned long,std::allocator<unsigned long> >::push_back
$LN28@ExceptionH:

; 1520 : 
; 1521 : 	retAddrs.push_back (0);

  0042f	8b 44 24 4c	 mov	 eax, DWORD PTR _retAddrs$[esp+21620]
  00433	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00436	8d 78 04	 lea	 edi, DWORD PTR [eax+4]
  00439	8d 54 24 20	 lea	 edx, DWORD PTR $T197384[esp+21600]
  0043d	52		 push	 edx
  0043e	51		 push	 ecx
  0043f	33 db		 xor	 ebx, ebx
  00441	50		 push	 eax
  00442	8d 4c 24 44	 lea	 ecx, DWORD PTR _retAddrs$[esp+21612]
  00446	89 5c 24 2c	 mov	 DWORD PTR $T197384[esp+21612], ebx
  0044a	e8 00 00 00 00	 call	 ?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@0ABK@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode
  0044f	6a 01		 push	 1
  00451	8d 4c 24 3c	 lea	 ecx, DWORD PTR _retAddrs$[esp+21604]
  00455	8b f0		 mov	 esi, eax
  00457	e8 00 00 00 00	 call	 ?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Incsize
  0045c	89 37		 mov	 DWORD PTR [edi], esi
  0045e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 1522 : 
; 1523 : 	MEMORY_BASIC_INFORMATION mi;
; 1524 : 	VirtualQuery (sp, &mi, sizeof (mi));

  00461	6a 1c		 push	 28			; 0000001cH
  00463	8d 54 24 64	 lea	 edx, DWORD PTR _mi$[esp+21604]
  00467	89 30		 mov	 DWORD PTR [eax], esi
  00469	8b 74 24 1c	 mov	 esi, DWORD PTR _sp$[esp+21604]
  0046d	52		 push	 edx
  0046e	56		 push	 esi
  0046f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualQuery@12

; 1525 : 	PDWORD stackTop = (PDWORD)((byte *) mi.BaseAddress + mi.RegionSize);

  00475	8b 44 24 6c	 mov	 eax, DWORD PTR _mi$[esp+21612]
  00479	8b 4c 24 60	 mov	 ecx, DWORD PTR _mi$[esp+21600]
  0047d	03 c1		 add	 eax, ecx
  0047f	89 44 24 18	 mov	 DWORD PTR _stackTop$[esp+21600], eax

; 1526 : 	int i = 0;
; 1527 : 
; 1528 : 	while (retAddrs.size() < 16 && &sp[i] < stackTop)

  00483	8b 44 24 50	 mov	 eax, DWORD PTR _retAddrs$[esp+21624]
  00487	83 f8 10	 cmp	 eax, 16			; 00000010H
  0048a	0f 83 72 01 00
	00		 jae	 $LN26@ExceptionH

; 1520 : 
; 1521 : 	retAddrs.push_back (0);

  00490	8b ee		 mov	 ebp, esi
$LL27@ExceptionH:

; 1526 : 	int i = 0;
; 1527 : 
; 1528 : 	while (retAddrs.size() < 16 && &sp[i] < stackTop)

  00492	3b 6c 24 18	 cmp	 ebp, DWORD PTR _stackTop$[esp+21600]
  00496	0f 83 66 01 00
	00		 jae	 $LN26@ExceptionH

; 1529 : 	{
; 1530 : 		if (IsReturnAddress (sp[i]))

  0049c	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  0049f	53		 push	 ebx
  004a0	52		 push	 edx
  004a1	e8 00 00 00 00	 call	 ?IsReturnAddress@@YAH_K@Z ; IsReturnAddress
  004a6	83 c4 08	 add	 esp, 8
  004a9	85 c0		 test	 eax, eax
  004ab	0f 84 3f 01 00
	00		 je	 $LN216@ExceptionH

; 1531 : 		{
; 1532 : 			bool duplicate = false;
; 1533 : 			foreach (DWORD prevAddr, retAddrs)

  004b1	8d 44 24 38	 lea	 eax, DWORD PTR _retAddrs$[esp+21600]
  004b5	50		 push	 eax
  004b6	8d 8c 24 5c 0a
	00 00		 lea	 ecx, DWORD PTR _$S1$139454[esp+21604]
  004bd	51		 push	 ecx
  004be	32 db		 xor	 bl, bl
  004c0	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
  004c5	83 c4 08	 add	 esp, 8
  004c8	8b 94 24 58 0a
	00 00		 mov	 edx, DWORD PTR _$S1$139454[esp+21600]
  004cf	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  004d2	8d 8c 24 58 0a
	00 00		 lea	 ecx, DWORD PTR _$S1$139454[esp+21600]
  004d9	c6 84 24 5c 54
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+21608], 3
  004e1	ff d0		 call	 eax
  004e3	84 c0		 test	 al, al
  004e5	0f 84 a8 00 00
	00		 je	 $LN22@ExceptionH
  004eb	eb 03 8d 49 00	 npad	 5
$LL24@ExceptionH:
  004f0	8b 84 24 84 0a
	00 00		 mov	 eax, DWORD PTR _$S1$139454[esp+21644]
  004f7	85 c0		 test	 eax, eax
  004f9	75 10		 jne	 SHORT $LN478@ExceptionH
  004fb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00500	8b 84 24 84 0a
	00 00		 mov	 eax, DWORD PTR _$S1$139454[esp+21644]
  00507	85 c0		 test	 eax, eax
  00509	74 04		 je	 SHORT $LN167@ExceptionH
$LN478@ExceptionH:
  0050b	8b 00		 mov	 eax, DWORD PTR [eax]
  0050d	eb 02		 jmp	 SHORT $LN168@ExceptionH
$LN167@ExceptionH:
  0050f	33 c0		 xor	 eax, eax
$LN168@ExceptionH:
  00511	8b 8c 24 88 0a
	00 00		 mov	 ecx, DWORD PTR _$S1$139454[esp+21648]
  00518	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0051b	75 05		 jne	 SHORT $LN153@ExceptionH
  0051d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN153@ExceptionH:
  00522	80 bc 24 5d 0a
	00 00 00	 cmp	 BYTE PTR _$S1$139454[esp+21605], 0
  0052a	8b 94 24 88 0a
	00 00		 mov	 edx, DWORD PTR _$S1$139454[esp+21648]
  00531	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00534	0f 94 c0	 sete	 al
  00537	88 84 24 5d 0a
	00 00		 mov	 BYTE PTR _$S1$139454[esp+21605], al
  0053e	84 c0		 test	 al, al
  00540	74 23		 je	 SHORT $LN23@ExceptionH
  00542	8b 55 00	 mov	 edx, DWORD PTR [ebp]
$LN173@ExceptionH:

; 1534 : 			{
; 1535 : 				if (sp[i] == prevAddr)

  00545	3b d1		 cmp	 edx, ecx
  00547	74 13		 je	 SHORT $LN469@ExceptionH
  00549	84 c0		 test	 al, al
  0054b	0f 94 c0	 sete	 al
  0054e	c6 84 24 5c 0a
	00 00 01	 mov	 BYTE PTR _$S1$139454[esp+21604], 1
  00556	84 c0		 test	 al, al
  00558	75 eb		 jne	 SHORT $LN173@ExceptionH
  0055a	eb 02		 jmp	 SHORT $LN497@ExceptionH
$LN469@ExceptionH:

; 1536 : 				{
; 1537 : 					duplicate = true;

  0055c	b3 01		 mov	 bl, 1
$LN497@ExceptionH:

; 1531 : 		{
; 1532 : 			bool duplicate = false;
; 1533 : 			foreach (DWORD prevAddr, retAddrs)

  0055e	88 84 24 5d 0a
	00 00		 mov	 BYTE PTR _$S1$139454[esp+21605], al
$LN23@ExceptionH:
  00565	8b 84 24 58 0a
	00 00		 mov	 eax, DWORD PTR _$S1$139454[esp+21600]
  0056c	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0056f	8d 8c 24 58 0a
	00 00		 lea	 ecx, DWORD PTR _$S1$139454[esp+21600]
  00576	ff d2		 call	 edx
  00578	8b 84 24 58 0a
	00 00		 mov	 eax, DWORD PTR _$S1$139454[esp+21600]
  0057f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00582	8d 8c 24 58 0a
	00 00		 lea	 ecx, DWORD PTR _$S1$139454[esp+21600]
  00589	ff d2		 call	 edx
  0058b	84 c0		 test	 al, al
  0058d	0f 85 5d ff ff
	ff		 jne	 $LL24@ExceptionH
$LN22@ExceptionH:

; 1538 : 					break;
; 1539 : 				}
; 1540 : 			}

  00593	8d 8c 24 60 0a
	00 00		 lea	 ecx, DWORD PTR _$S1$139454[esp+21608]
  0059a	c6 84 24 5c 54
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+21608], 2
  005a2	e8 00 00 00 00	 call	 ?_Tidy@?$list@KV?$allocator@K@std@@@std@@IAEXXZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Tidy
  005a7	8b 84 24 60 0a
	00 00		 mov	 eax, DWORD PTR _$S1$139454[esp+21608]
  005ae	50		 push	 eax
  005af	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  005b4	83 c4 04	 add	 esp, 4
  005b7	c7 84 24 58 0a
	00 00 00 00 00
	00		 mov	 DWORD PTR _$S1$139454[esp+21600], OFFSET ??_7Container@ForEach@CipherShed@@6B@

; 1541 : 
; 1542 : 			if (!duplicate)

  005c2	84 db		 test	 bl, bl
  005c4	75 2a		 jne	 SHORT $LN216@ExceptionH

; 1543 : 				retAddrs.push_back (sp[i]);

  005c6	8b 44 24 4c	 mov	 eax, DWORD PTR _retAddrs$[esp+21620]
  005ca	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  005cd	8d 78 04	 lea	 edi, DWORD PTR [eax+4]
  005d0	55		 push	 ebp
  005d1	51		 push	 ecx
  005d2	50		 push	 eax
  005d3	8d 4c 24 44	 lea	 ecx, DWORD PTR _retAddrs$[esp+21612]
  005d7	e8 00 00 00 00	 call	 ?_Buynode@?$list@KV?$allocator@K@std@@@std@@IAEPAU_Node@?$_List_nod@KV?$allocator@K@std@@@2@PAU342@0ABK@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Buynode
  005dc	6a 01		 push	 1
  005de	8d 4c 24 3c	 lea	 ecx, DWORD PTR _retAddrs$[esp+21604]
  005e2	8b f0		 mov	 esi, eax
  005e4	e8 00 00 00 00	 call	 ?_Incsize@?$list@KV?$allocator@K@std@@@std@@IAEXI@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Incsize
  005e9	89 37		 mov	 DWORD PTR [edi], esi
  005eb	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  005ee	89 30		 mov	 DWORD PTR [eax], esi
$LN216@ExceptionH:
  005f0	8b 44 24 50	 mov	 eax, DWORD PTR _retAddrs$[esp+21624]

; 1544 : 		}
; 1545 : 		i++;

  005f4	83 c5 04	 add	 ebp, 4
  005f7	33 db		 xor	 ebx, ebx
  005f9	83 f8 10	 cmp	 eax, 16			; 00000010H
  005fc	0f 82 90 fe ff
	ff		 jb	 $LL27@ExceptionH
$LN26@ExceptionH:

; 1546 : 	}
; 1547 : 
; 1548 : 	if (retAddrs.size() > 1)

  00602	83 f8 01	 cmp	 eax, 1
  00605	0f 86 cf 01 00
	00		 jbe	 $LN317@ExceptionH

; 1549 : 	{
; 1550 : 		foreach (DWORD addr, retAddrs)

  0060b	8d 54 24 38	 lea	 edx, DWORD PTR _retAddrs$[esp+21600]
  0060f	52		 push	 edx
  00610	8d 84 24 5c 0a
	00 00		 lea	 eax, DWORD PTR _$S2$139492[esp+21604]
  00617	50		 push	 eax
  00618	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
  0061d	83 c4 08	 add	 esp, 8
  00620	8b 94 24 58 0a
	00 00		 mov	 edx, DWORD PTR _$S2$139492[esp+21600]
  00627	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0062a	8d 8c 24 58 0a
	00 00		 lea	 ecx, DWORD PTR _$S2$139492[esp+21600]
  00631	c6 84 24 5c 54
	00 00 04	 mov	 BYTE PTR __$EHRec$[esp+21608], 4
  00639	ff d0		 call	 eax
  0063b	84 c0		 test	 al, al
  0063d	0f 84 33 01 00
	00		 je	 $LN13@ExceptionH
  00643	8b 74 24 14	 mov	 esi, DWORD PTR _frameNumber$[esp+21600]
  00647	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL15@ExceptionH:
  00650	8b 84 24 84 0a
	00 00		 mov	 eax, DWORD PTR _$S2$139492[esp+21644]
  00657	3b c3		 cmp	 eax, ebx
  00659	75 10		 jne	 SHORT $LN479@ExceptionH
  0065b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00660	8b 84 24 84 0a
	00 00		 mov	 eax, DWORD PTR _$S2$139492[esp+21644]
  00667	3b c3		 cmp	 eax, ebx
  00669	74 04		 je	 SHORT $LN252@ExceptionH
$LN479@ExceptionH:
  0066b	8b 00		 mov	 eax, DWORD PTR [eax]
  0066d	eb 02		 jmp	 SHORT $LN253@ExceptionH
$LN252@ExceptionH:
  0066f	33 c0		 xor	 eax, eax
$LN253@ExceptionH:
  00671	8b 8c 24 88 0a
	00 00		 mov	 ecx, DWORD PTR _$S2$139492[esp+21648]
  00678	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0067b	75 05		 jne	 SHORT $LN238@ExceptionH
  0067d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN238@ExceptionH:
  00682	80 bc 24 5d 0a
	00 00 00	 cmp	 BYTE PTR _$S2$139492[esp+21605], 0
  0068a	8b 94 24 88 0a
	00 00		 mov	 edx, DWORD PTR _$S2$139492[esp+21648]
  00691	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00694	0f 94 c0	 sete	 al
  00697	88 84 24 5d 0a
	00 00		 mov	 BYTE PTR _$S2$139492[esp+21605], al
  0069e	84 c0		 test	 al, al
  006a0	0f 84 a2 00 00
	00		 je	 $LN14@ExceptionH
  006a6	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL258@ExceptionH:

; 1551 : 		{
; 1552 : 			callStack << "&st" << frameNumber++ << "=0x" << hex << addr << dec;

  006b0	56		 push	 esi
  006b1	8d 84 24 88 00
	00 00		 lea	 eax, DWORD PTR _callStack$[esp+21612]
  006b8	68 00 00 00 00	 push	 OFFSET ??_C@_03EGAGLKPK@?$CGst?$AA@
  006bd	50		 push	 eax
  006be	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  006c3	83 c4 08	 add	 esp, 8
  006c6	8b c8		 mov	 ecx, eax
  006c8	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  006cd	68 00 00 00 00	 push	 OFFSET ??_C@_03BPHHBGPB@?$DN0x?$AA@
  006d2	50		 push	 eax
  006d3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  006d8	83 c4 08	 add	 esp, 8
  006db	46		 inc	 esi
  006dc	3b c3		 cmp	 eax, ebx
  006de	75 04		 jne	 SHORT $LN264@ExceptionH
  006e0	33 c9		 xor	 ecx, ecx
  006e2	eb 07		 jmp	 SHORT $LN265@ExceptionH
$LN264@ExceptionH:
  006e4	8b 08		 mov	 ecx, DWORD PTR [eax]
  006e6	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  006e9	03 c8		 add	 ecx, eax
$LN265@ExceptionH:
  006eb	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  006ee	81 e2 ff f9 ff
	ff		 and	 edx, -1537		; fffff9ffH
  006f4	81 ca 00 08 00
	00		 or	 edx, 2048		; 00000800H
  006fa	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  006fd	57		 push	 edi
  006fe	8b c8		 mov	 ecx, eax
  00700	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00705	3b c3		 cmp	 eax, ebx
  00707	75 04		 jne	 SHORT $LN272@ExceptionH
  00709	33 c9		 xor	 ecx, ecx
  0070b	eb 07		 jmp	 SHORT $LN273@ExceptionH
$LN272@ExceptionH:
  0070d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0070f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00712	03 c8		 add	 ecx, eax
$LN273@ExceptionH:
  00714	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00717	81 e2 ff f3 ff
	ff		 and	 edx, -3073		; fffff3ffH
  0071d	81 ca 00 02 00
	00		 or	 edx, 512		; 00000200H
  00723	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  00726	80 bc 24 5d 0a
	00 00 00	 cmp	 BYTE PTR _$S2$139492[esp+21605], 0
  0072e	c6 84 24 5c 0a
	00 00 01	 mov	 BYTE PTR _$S2$139492[esp+21604], 1
  00736	0f 94 c0	 sete	 al
  00739	88 84 24 5d 0a
	00 00		 mov	 BYTE PTR _$S2$139492[esp+21605], al
  00740	84 c0		 test	 al, al
  00742	0f 85 68 ff ff
	ff		 jne	 $LL258@ExceptionH
$LN14@ExceptionH:

; 1549 : 	{
; 1550 : 		foreach (DWORD addr, retAddrs)

  00748	8b 84 24 58 0a
	00 00		 mov	 eax, DWORD PTR _$S2$139492[esp+21600]
  0074f	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00752	8d 8c 24 58 0a
	00 00		 lea	 ecx, DWORD PTR _$S2$139492[esp+21600]
  00759	ff d2		 call	 edx
  0075b	8b 84 24 58 0a
	00 00		 mov	 eax, DWORD PTR _$S2$139492[esp+21600]
  00762	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00765	8d 8c 24 58 0a
	00 00		 lea	 ecx, DWORD PTR _$S2$139492[esp+21600]
  0076c	ff d2		 call	 edx
  0076e	84 c0		 test	 al, al
  00770	0f 85 da fe ff
	ff		 jne	 $LL15@ExceptionH
$LN13@ExceptionH:

; 1553 : 		}

  00776	8b 8c 24 74 0a
	00 00		 mov	 ecx, DWORD PTR _$S2$139492[esp+21628]
  0077d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0077f	89 09		 mov	 DWORD PTR [ecx], ecx
  00781	8b 8c 24 74 0a
	00 00		 mov	 ecx, DWORD PTR _$S2$139492[esp+21628]
  00788	89 49 04	 mov	 DWORD PTR [ecx+4], ecx
  0078b	8b 8c 24 74 0a
	00 00		 mov	 ecx, DWORD PTR _$S2$139492[esp+21628]
  00792	c6 84 24 5c 54
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+21608], 2
  0079a	89 9c 24 78 0a
	00 00		 mov	 DWORD PTR _$S2$139492[esp+21632], ebx
  007a1	3b c1		 cmp	 eax, ecx
  007a3	74 18		 je	 SHORT $LN284@ExceptionH
$LL286@ExceptionH:
  007a5	8b 30		 mov	 esi, DWORD PTR [eax]
  007a7	50		 push	 eax
  007a8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  007ad	8b 8c 24 78 0a
	00 00		 mov	 ecx, DWORD PTR _$S2$139492[esp+21632]
  007b4	83 c4 04	 add	 esp, 4
  007b7	8b c6		 mov	 eax, esi
  007b9	3b f1		 cmp	 esi, ecx
  007bb	75 e8		 jne	 SHORT $LL286@ExceptionH
$LN284@ExceptionH:
  007bd	51		 push	 ecx
  007be	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  007c3	8b 84 24 64 0a
	00 00		 mov	 eax, DWORD PTR _$S2$139492[esp+21612]
  007ca	50		 push	 eax
  007cb	89 9c 24 7c 0a
	00 00		 mov	 DWORD PTR _$S2$139492[esp+21636], ebx
  007d2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  007d7	83 c4 08	 add	 esp, 8
$LN317@ExceptionH:

; 1554 : 	}
; 1555 : 
; 1556 : 	// Checksum of the module
; 1557 : 	if (GetModuleFileName (NULL, modPath, sizeof (modPath)))

  007da	68 04 01 00 00	 push	 260			; 00000104H
  007df	8d 8c 24 2c 0b
	00 00		 lea	 ecx, DWORD PTR _modPath$[esp+21604]
  007e6	51		 push	 ecx
  007e7	53		 push	 ebx
  007e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12
  007ee	85 c0		 test	 eax, eax
  007f0	0f 84 8f 00 00
	00		 je	 $LN8@ExceptionH

; 1558 : 	{
; 1559 : 		HANDLE h = CreateFile (modPath, FILE_READ_DATA | FILE_READ_ATTRIBUTES, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  007f6	53		 push	 ebx
  007f7	53		 push	 ebx
  007f8	6a 03		 push	 3
  007fa	53		 push	 ebx
  007fb	6a 03		 push	 3
  007fd	68 81 00 00 00	 push	 129			; 00000081H
  00802	8d 94 24 40 0b
	00 00		 lea	 edx, DWORD PTR _modPath$[esp+21624]
  00809	52		 push	 edx
  0080a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00810	8b f8		 mov	 edi, eax

; 1560 : 		if (h != INVALID_HANDLE_VALUE)

  00812	83 ff ff	 cmp	 edi, -1
  00815	74 6e		 je	 SHORT $LN8@ExceptionH

; 1561 : 		{
; 1562 : 			BY_HANDLE_FILE_INFORMATION fi;
; 1563 : 			if (GetFileInformationByHandle (h, &fi))

  00817	8d 84 24 58 0a
	00 00		 lea	 eax, DWORD PTR _fi$139509[esp+21600]
  0081e	50		 push	 eax
  0081f	57		 push	 edi
  00820	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileInformationByHandle@8
  00826	85 c0		 test	 eax, eax
  00828	74 54		 je	 SHORT $LN6@ExceptionH

; 1564 : 			{
; 1565 : 				char *buf = (char *) malloc (fi.nFileSizeLow);

  0082a	8b 8c 24 7c 0a
	00 00		 mov	 ecx, DWORD PTR _fi$139509[esp+21636]
  00831	51		 push	 ecx
  00832	e8 00 00 00 00	 call	 _malloc
  00837	8b f0		 mov	 esi, eax
  00839	83 c4 04	 add	 esp, 4

; 1566 : 				if (buf)

  0083c	3b f3		 cmp	 esi, ebx
  0083e	74 3e		 je	 SHORT $LN6@ExceptionH

; 1567 : 				{
; 1568 : 					DWORD bytesRead;
; 1569 : 					if (ReadFile (h, buf, fi.nFileSizeLow, &bytesRead, NULL) && bytesRead == fi.nFileSizeLow)

  00840	8b 84 24 7c 0a
	00 00		 mov	 eax, DWORD PTR _fi$139509[esp+21636]
  00847	53		 push	 ebx
  00848	8d 54 24 1c	 lea	 edx, DWORD PTR _bytesRead$139514[esp+21604]
  0084c	52		 push	 edx
  0084d	50		 push	 eax
  0084e	56		 push	 esi
  0084f	57		 push	 edi
  00850	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  00856	85 c0		 test	 eax, eax
  00858	74 1b		 je	 SHORT $LN5@ExceptionH
  0085a	8b 84 24 7c 0a
	00 00		 mov	 eax, DWORD PTR _fi$139509[esp+21636]
  00861	39 44 24 18	 cmp	 DWORD PTR _bytesRead$139514[esp+21600], eax
  00865	75 0e		 jne	 SHORT $LN5@ExceptionH

; 1570 : 						crc = GetCrc32 ((unsigned char *) buf, fi.nFileSizeLow);

  00867	50		 push	 eax
  00868	56		 push	 esi
  00869	e8 00 00 00 00	 call	 _GetCrc32
  0086e	83 c4 08	 add	 esp, 8
  00871	89 44 24 34	 mov	 DWORD PTR _crc$[esp+21600], eax
$LN5@ExceptionH:

; 1571 : 					free (buf);

  00875	56		 push	 esi
  00876	e8 00 00 00 00	 call	 _free
  0087b	83 c4 04	 add	 esp, 4
$LN6@ExceptionH:

; 1572 : 				}
; 1573 : 			}
; 1574 : 			CloseHandle (h);

  0087e	57		 push	 edi
  0087f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN8@ExceptionH:

; 1575 : 		}
; 1576 : 	}
; 1577 : 
; 1578 : 	GetSystemInfo (&si);

  00885	8d 8c 24 0c 02
	00 00		 lea	 ecx, DWORD PTR _si$[esp+21600]
  0088c	51		 push	 ecx
  0088d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemInfo@4

; 1579 : 
; 1580 : 	if (LocalizationActive)

  00893	39 1d 00 00 00
	00		 cmp	 DWORD PTR _LocalizationActive, ebx
  00899	74 28		 je	 SHORT $LN4@ExceptionH

; 1581 : 		sprintf_s (lpack, ARRAY_LENGTH (lpack), "&langpack=%s_%s", GetPreferredLangId (), GetActiveLangPackVersion ());

  0089b	e8 00 00 00 00	 call	 _GetActiveLangPackVersion
  008a0	50		 push	 eax
  008a1	e8 00 00 00 00	 call	 _GetPreferredLangId
  008a6	50		 push	 eax
  008a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EIBJDAPB@?$CGlangpack?$DN?$CFs_?$CFs?$AA@
  008ac	8d 94 24 b4 0a
	00 00		 lea	 edx, DWORD PTR _lpack$[esp+21612]
  008b3	68 80 00 00 00	 push	 128			; 00000080H
  008b8	52		 push	 edx
  008b9	e8 00 00 00 00	 call	 _sprintf_s
  008be	83 c4 14	 add	 esp, 20			; 00000014H

; 1582 : 	else

  008c1	eb 08		 jmp	 SHORT $LN3@ExceptionH
$LN4@ExceptionH:

; 1583 : 		lpack[0] = 0;

  008c3	c6 84 24 a8 0a
	00 00 00	 mov	 BYTE PTR _lpack$[esp+21600], 0
$LN3@ExceptionH:

; 1584 : 
; 1585 : 	snprintf (url, ARRAY_LENGTH(url), TC_APPLINK_SECURE "&dest=err-report%s&os=%s&osver=%d.%d.%d&arch=%s&cpus=%d&app=%s&cksum=%x&dlg=%s&err=%x&addr=%x"
; 1586 : 		, lpack
; 1587 : 		, GetWindowsEdition().c_str()
; 1588 : 		, CurrentOSMajor
; 1589 : 		, CurrentOSMinor
; 1590 : 		, CurrentOSServicePack
; 1591 : 		, Is64BitOs () ? "x64" : "x86"
; 1592 : 		, si.dwNumberOfProcessors
; 1593 : #ifdef TCMOUNT
; 1594 : 		,"main"
; 1595 : #endif
; 1596 : #ifdef VOLFORMAT
; 1597 : 		,"format"
; 1598 : #endif
; 1599 : #ifdef SETUP
; 1600 : 		,"setup"
; 1601 : #endif
; 1602 : 		, crc
; 1603 : 		, LastDialogId ? LastDialogId : "-"
; 1604 : 		, exCode
; 1605 : 		, addr);

  008cb	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _LastDialogId
  008d1	3b fb		 cmp	 edi, ebx
  008d3	75 05		 jne	 SHORT $LN60@ExceptionH
  008d5	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_01JOAMLHOP@?9?$AA@
$LN60@ExceptionH:
  008da	e8 00 00 00 00	 call	 _Is64BitOs
  008df	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_03OLPMMCEF@x64?$AA@
  008e4	85 c0		 test	 eax, eax
  008e6	75 05		 jne	 SHORT $LN62@ExceptionH
  008e8	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_03NDFEINMN@x86?$AA@
$LN62@ExceptionH:
  008ed	8d 84 24 58 0a
	00 00		 lea	 eax, DWORD PTR $T197403[esp+21600]
  008f4	50		 push	 eax
  008f5	e8 00 00 00 00	 call	 ?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; GetWindowsEdition
  008fa	bd 10 00 00 00	 mov	 ebp, 16			; 00000010H
  008ff	83 c4 04	 add	 esp, 4
  00902	39 68 18	 cmp	 DWORD PTR [eax+24], ebp
  00905	72 05		 jb	 SHORT $LN323@ExceptionH
  00907	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0090a	eb 03		 jmp	 SHORT $LN324@ExceptionH
$LN323@ExceptionH:
  0090c	83 c0 04	 add	 eax, 4
$LN324@ExceptionH:
  0090f	8b 4c 24 5c	 mov	 ecx, DWORD PTR _addr$[esp+21600]
  00913	8b 54 24 54	 mov	 edx, DWORD PTR _exCode$[esp+21600]
  00917	51		 push	 ecx
  00918	8b 4c 24 38	 mov	 ecx, DWORD PTR _crc$[esp+21604]
  0091c	52		 push	 edx
  0091d	8b 94 24 28 02
	00 00		 mov	 edx, DWORD PTR _si$[esp+21628]
  00924	57		 push	 edi
  00925	51		 push	 ecx
  00926	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _CurrentOSServicePack
  0092c	68 00 00 00 00	 push	 OFFSET ??_C@_05LABDNII@setup?$AA@
  00931	52		 push	 edx
  00932	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _CurrentOSMinor
  00938	56		 push	 esi
  00939	51		 push	 ecx
  0093a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _CurrentOSMajor
  00940	52		 push	 edx
  00941	51		 push	 ecx
  00942	50		 push	 eax
  00943	8d 94 24 d4 0a
	00 00		 lea	 edx, DWORD PTR _lpack$[esp+21644]
  0094a	52		 push	 edx
  0094b	68 00 00 00 00	 push	 OFFSET ??_C@_0IK@LKDHDEMN@https?3?1?1ciphershed?4org?1applink?$DPv@
  00950	8d 84 24 60 0c
	00 00		 lea	 eax, DWORD PTR _url$[esp+21652]
  00957	68 24 08 00 00	 push	 2084			; 00000824H
  0095c	50		 push	 eax
  0095d	e8 00 00 00 00	 call	 _sprintf_s
  00962	83 c4 3c	 add	 esp, 60			; 0000003cH
  00965	39 ac 24 70 0a
	00 00		 cmp	 DWORD PTR $T197403[esp+21624], ebp
  0096c	72 10		 jb	 SHORT $LN341@ExceptionH
  0096e	8b 8c 24 5c 0a
	00 00		 mov	 ecx, DWORD PTR $T197403[esp+21604]
  00975	51		 push	 ecx
  00976	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0097b	83 c4 04	 add	 esp, 4
$LN341@ExceptionH:

; 1606 : 
; 1607 : 	string urlStr = url + callStack.str();

  0097e	8d 94 24 58 0a
	00 00		 lea	 edx, DWORD PTR $T197404[esp+21600]
  00985	52		 push	 edx
  00986	8d 8c 24 80 00
	00 00		 lea	 ecx, DWORD PTR _callStack$[esp+21604]
  0098d	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00992	50		 push	 eax
  00993	8d 84 24 30 0c
	00 00		 lea	 eax, DWORD PTR _url$[esp+21604]
  0099a	50		 push	 eax
  0099b	8d 8c 24 94 0a
	00 00		 lea	 ecx, DWORD PTR _urlStr$[esp+21608]
  009a2	51		 push	 ecx
  009a3	c6 84 24 68 54
	00 00 05	 mov	 BYTE PTR __$EHRec$[esp+21620], 5
  009ab	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  009b0	83 c4 0c	 add	 esp, 12			; 0000000cH
  009b3	39 ac 24 70 0a
	00 00		 cmp	 DWORD PTR $T197404[esp+21624], ebp
  009ba	72 10		 jb	 SHORT $LN367@ExceptionH
  009bc	8b 94 24 5c 0a
	00 00		 mov	 edx, DWORD PTR $T197404[esp+21604]
  009c3	52		 push	 edx
  009c4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  009c9	83 c4 04	 add	 esp, 4
$LN367@ExceptionH:

; 1608 : 
; 1609 : 	_snwprintf (msg, array_capacity (msg), GetString ("EXCEPTION_REPORT"), urlStr.c_str());

  009cc	8b 84 24 90 0a
	00 00		 mov	 eax, DWORD PTR _urlStr$[esp+21604]
  009d3	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  009d8	89 b4 24 70 0a
	00 00		 mov	 DWORD PTR $T197404[esp+21624], esi
  009df	89 9c 24 6c 0a
	00 00		 mov	 DWORD PTR $T197404[esp+21620], ebx
  009e6	c6 84 24 5c 0a
	00 00 00	 mov	 BYTE PTR $T197404[esp+21604], 0
  009ee	39 ac 24 a4 0a
	00 00		 cmp	 DWORD PTR _urlStr$[esp+21624], ebp
  009f5	73 07		 jae	 SHORT $LN382@ExceptionH
  009f7	8d 84 24 90 0a
	00 00		 lea	 eax, DWORD PTR _urlStr$[esp+21604]
$LN382@ExceptionH:
  009fe	50		 push	 eax
  009ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@PFGPMKFM@EXCEPTION_REPORT?$AA@
  00a04	e8 00 00 00 00	 call	 _GetString
  00a09	83 c4 04	 add	 esp, 4
  00a0c	50		 push	 eax
  00a0d	8d 84 24 58 14
	00 00		 lea	 eax, DWORD PTR _msg$[esp+21608]
  00a14	68 00 20 00 00	 push	 8192			; 00002000H
  00a19	50		 push	 eax
  00a1a	e8 00 00 00 00	 call	 __snwprintf
  00a1f	83 c4 10	 add	 esp, 16			; 00000010H

; 1610 : 
; 1611 : 	if (IDYES == MessageBoxW (0, msg, GetString ("EXCEPTION_REPORT_TITLE"), MB_ICONERROR | MB_YESNO | MB_DEFBUTTON1))

  00a22	6a 14		 push	 20			; 00000014H
  00a24	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KPCDNAAO@EXCEPTION_REPORT_TITLE?$AA@
  00a29	e8 00 00 00 00	 call	 _GetString
  00a2e	83 c4 04	 add	 esp, 4
  00a31	50		 push	 eax
  00a32	8d 8c 24 58 14
	00 00		 lea	 ecx, DWORD PTR _msg$[esp+21608]
  00a39	51		 push	 ecx
  00a3a	53		 push	 ebx
  00a3b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  00a41	83 f8 06	 cmp	 eax, 6
  00a44	75 2a		 jne	 SHORT $LN2@ExceptionH

; 1612 : 		ShellExecute (NULL, "open", urlStr.c_str(), NULL, NULL, SW_SHOWNORMAL);

  00a46	8b 84 24 90 0a
	00 00		 mov	 eax, DWORD PTR _urlStr$[esp+21604]
  00a4d	39 ac 24 a4 0a
	00 00		 cmp	 DWORD PTR _urlStr$[esp+21624], ebp
  00a54	73 07		 jae	 SHORT $LN388@ExceptionH
  00a56	8d 84 24 90 0a
	00 00		 lea	 eax, DWORD PTR _urlStr$[esp+21604]
$LN388@ExceptionH:
  00a5d	6a 01		 push	 1
  00a5f	53		 push	 ebx
  00a60	53		 push	 ebx
  00a61	50		 push	 eax
  00a62	68 00 00 00 00	 push	 OFFSET ??_C@_04PMOCAHAA@open?$AA@
  00a67	53		 push	 ebx
  00a68	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24

; 1613 : 	else

  00a6e	eb 0b		 jmp	 SHORT $LN1@ExceptionH
$LN2@ExceptionH:

; 1614 : 		UnhandledExceptionFilter (ep);

  00a70	8b 54 24 1c	 mov	 edx, DWORD PTR _ep$[esp+21600]
  00a74	52		 push	 edx
  00a75	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnhandledExceptionFilter@4
$LN1@ExceptionH:

; 1615 : }

  00a7b	39 ac 24 a4 0a
	00 00		 cmp	 DWORD PTR _urlStr$[esp+21624], ebp
  00a82	72 10		 jb	 SHORT $LN405@ExceptionH
  00a84	8b 84 24 90 0a
	00 00		 mov	 eax, DWORD PTR _urlStr$[esp+21604]
  00a8b	50		 push	 eax
  00a8c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00a91	83 c4 04	 add	 esp, 4
$LN405@ExceptionH:
  00a94	8b 4c 24 4c	 mov	 ecx, DWORD PTR _retAddrs$[esp+21620]
  00a98	89 b4 24 a4 0a
	00 00		 mov	 DWORD PTR _urlStr$[esp+21624], esi
  00a9f	89 9c 24 a0 0a
	00 00		 mov	 DWORD PTR _urlStr$[esp+21620], ebx
  00aa6	c6 84 24 90 0a
	00 00 00	 mov	 BYTE PTR _urlStr$[esp+21604], 0
  00aae	8b 01		 mov	 eax, DWORD PTR [ecx]
  00ab0	89 09		 mov	 DWORD PTR [ecx], ecx
  00ab2	8b 4c 24 4c	 mov	 ecx, DWORD PTR _retAddrs$[esp+21620]
  00ab6	89 49 04	 mov	 DWORD PTR [ecx+4], ecx
  00ab9	8b 4c 24 4c	 mov	 ecx, DWORD PTR _retAddrs$[esp+21620]
  00abd	89 5c 24 50	 mov	 DWORD PTR _retAddrs$[esp+21624], ebx
  00ac1	3b c1		 cmp	 eax, ecx
  00ac3	74 15		 je	 SHORT $LN419@ExceptionH
$LL421@ExceptionH:
  00ac5	8b 30		 mov	 esi, DWORD PTR [eax]
  00ac7	50		 push	 eax
  00ac8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00acd	8b 4c 24 50	 mov	 ecx, DWORD PTR _retAddrs$[esp+21624]
  00ad1	83 c4 04	 add	 esp, 4
  00ad4	8b c6		 mov	 eax, esi
  00ad6	3b f1		 cmp	 esi, ecx
  00ad8	75 eb		 jne	 SHORT $LL421@ExceptionH
$LN419@ExceptionH:
  00ada	51		 push	 ecx
  00adb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00ae0	8b 4c 24 3c	 mov	 ecx, DWORD PTR _retAddrs$[esp+21604]
  00ae4	51		 push	 ecx
  00ae5	89 5c 24 54	 mov	 DWORD PTR _retAddrs$[esp+21628], ebx
  00ae9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00aee	83 c4 08	 add	 esp, 8
  00af1	8d 8c 24 d0 00
	00 00		 lea	 ecx, DWORD PTR _callStack$[esp+21684]
  00af8	c7 84 24 5c 54
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+21608], -1
  00b03	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  00b08	8d 94 24 d0 00
	00 00		 lea	 edx, DWORD PTR _callStack$[esp+21684]
  00b0f	52		 push	 edx
  00b10	eb 47		 jmp	 SHORT $LN498@ExceptionH
$LN44@ExceptionH:

; 1436 : 	{
; 1437 : 	case STATUS_IN_PAGE_ERROR:
; 1438 : 	case 0xeedfade:
; 1439 : 		// Exception not caused by CipherShed
; 1440 : 		MessageBoxW (0, GetString ("EXCEPTION_REPORT_EXT"),
; 1441 : 			GetString ("EXCEPTION_REPORT_TITLE"),
; 1442 : 			MB_ICONERROR | MB_OK | MB_SETFOREGROUND | MB_TOPMOST);

  00b12	68 10 00 05 00	 push	 327696			; 00050010H
  00b17	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KPCDNAAO@EXCEPTION_REPORT_TITLE?$AA@
  00b1c	e8 00 00 00 00	 call	 _GetString
  00b21	83 c4 04	 add	 esp, 4
  00b24	50		 push	 eax
  00b25	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@JIKAMFDK@EXCEPTION_REPORT_EXT?$AA@
  00b2a	e8 00 00 00 00	 call	 _GetString
  00b2f	83 c4 04	 add	 esp, 4
  00b32	50		 push	 eax
  00b33	53		 push	 ebx
  00b34	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 1443 : 		return;

  00b3a	8d 8c 24 d0 00
	00 00		 lea	 ecx, DWORD PTR _callStack$[esp+21684]
  00b41	c7 84 24 5c 54
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+21608], -1
  00b4c	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  00b51	8d 84 24 d0 00
	00 00		 lea	 eax, DWORD PTR _callStack$[esp+21684]
  00b58	50		 push	 eax
$LN498@ExceptionH:
  00b59	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _callStack$[esp+21688], OFFSET ??_7ios_base@std@@6B@
  00b64	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00b69	83 c4 04	 add	 esp, 4

; 1615 : }

  00b6c	8b 8c 24 54 54
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+21600]
  00b73	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00b7a	59		 pop	 ecx
  00b7b	5f		 pop	 edi
  00b7c	5e		 pop	 esi
  00b7d	5d		 pop	 ebp
  00b7e	5b		 pop	 ebx
  00b7f	8b 8c 24 3c 54
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+21580]
  00b86	33 cc		 xor	 ecx, esp
  00b88	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b8d	81 c4 4c 54 00
	00		 add	 esp, 21580		; 0000544cH
  00b93	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$0:
  00000	8d 8d 1c ac ff
	ff		 lea	 ecx, DWORD PTR _callStack$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$1:
  0000b	8d 8d f8 b5 ff
	ff		 lea	 ecx, DWORD PTR _lastSymbol$138737[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$2:
  00016	8d 8d d8 ab ff
	ff		 lea	 ecx, DWORD PTR _retAddrs$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$list@KV?$allocator@K@std@@@std@@QAE@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::~list<unsigned long,std::allocator<unsigned long> >
__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$3:
  00021	8d 8d f8 b5 ff
	ff		 lea	 ecx, DWORD PTR _$S1$139454[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$4:
  0002c	8d 8d f8 b5 ff
	ff		 lea	 ecx, DWORD PTR _$S2$139492[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$6:
  00037	8d 8d f8 b5 ff
	ff		 lea	 ecx, DWORD PTR $T197404[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?ExceptionHandlerThread@@YAXPAX@Z:
  00042	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00046	8d 82 b0 ab ff
	ff		 lea	 eax, DWORD PTR [edx-21584]
  0004c	8b 8a ac ab ff
	ff		 mov	 ecx, DWORD PTR [edx-21588]
  00052	33 c8		 xor	 ecx, eax
  00054	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00059	83 c0 10	 add	 eax, 16			; 00000010H
  0005c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0005f	33 c8		 xor	 ecx, eax
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ExceptionHandlerThread@@YAXPAX@Z
  0006b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ExceptionHandlerThread@@YAXPAX@Z ENDP			; ExceptionHandlerThread
PUBLIC	??_C@_0BN@PKGEAFIB@EXCEPTION_REPORT_EXT_FILESEL?$AA@ ; `string'
PUBLIC	?ExceptionHandler@@YGJPAU_EXCEPTION_POINTERS@@@Z ; ExceptionHandler
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	__beginthread:PROC
EXTRN	__imp__GetCurrentThread@0:PROC
EXTRN	__imp__SetUnhandledExceptionFilter@4:PROC
;	COMDAT ??_C@_0BN@PKGEAFIB@EXCEPTION_REPORT_EXT_FILESEL?$AA@
CONST	SEGMENT
??_C@_0BN@PKGEAFIB@EXCEPTION_REPORT_EXT_FILESEL?$AA@ DB 'EXCEPTION_REPORT'
	DB	'_EXT_FILESEL', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?ExceptionHandler@@YGJPAU_EXCEPTION_POINTERS@@@Z
_TEXT	SEGMENT
_args$ = -8						; size = 8
_ep$ = 8						; size = 4
?ExceptionHandler@@YGJPAU_EXCEPTION_POINTERS@@@Z PROC	; ExceptionHandler, COMDAT

; 1619 : {

  00000	83 ec 08	 sub	 esp, 8

; 1620 : 	SetUnhandledExceptionFilter (NULL);

  00003	6a 00		 push	 0
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetUnhandledExceptionFilter@4

; 1621 : 
; 1622 : 	if (SystemFileSelectorCallPending && SystemFileSelectorCallerThreadId == GetCurrentThreadId())

  0000b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?SystemFileSelectorCallPending@@3HA, 0 ; SystemFileSelectorCallPending
  00012	74 4d		 je	 SHORT $LN1@ExceptionH@2
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThreadId@0
  0001a	39 05 00 00 00
	00		 cmp	 DWORD PTR ?SystemFileSelectorCallerThreadId@@3KA, eax ; SystemFileSelectorCallerThreadId
  00020	75 3f		 jne	 SHORT $LN1@ExceptionH@2

; 1623 : 	{
; 1624 : 		MessageBoxW (NULL, GetString ("EXCEPTION_REPORT_EXT_FILESEL"), GetString ("EXCEPTION_REPORT_TITLE"), MB_ICONERROR | MB_OK | MB_SETFOREGROUND | MB_TOPMOST);

  00022	68 10 00 05 00	 push	 327696			; 00050010H
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KPCDNAAO@EXCEPTION_REPORT_TITLE?$AA@
  0002c	e8 00 00 00 00	 call	 _GetString
  00031	83 c4 04	 add	 esp, 4
  00034	50		 push	 eax
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@PKGEAFIB@EXCEPTION_REPORT_EXT_FILESEL?$AA@
  0003a	e8 00 00 00 00	 call	 _GetString
  0003f	83 c4 04	 add	 esp, 4
  00042	50		 push	 eax
  00043	6a 00		 push	 0
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 1625 : 
; 1626 : 		UnhandledExceptionFilter (ep);

  0004b	8b 44 24 0c	 mov	 eax, DWORD PTR _ep$[esp+4]
  0004f	50		 push	 eax
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnhandledExceptionFilter@4

; 1635 : 
; 1636 : 	return EXCEPTION_EXECUTE_HANDLER;

  00056	b8 01 00 00 00	 mov	 eax, 1

; 1637 : }

  0005b	83 c4 08	 add	 esp, 8
  0005e	c2 04 00	 ret	 4
$LN1@ExceptionH@2:

; 1627 : 		return EXCEPTION_EXECUTE_HANDLER;
; 1628 : 	}
; 1629 : 
; 1630 : 	ExceptionHandlerThreadArgs args;
; 1631 : 	args.ExceptionPointers = ep;

  00061	8b 4c 24 0c	 mov	 ecx, DWORD PTR _ep$[esp+4]
  00065	89 0c 24	 mov	 DWORD PTR _args$[esp+8], ecx

; 1632 : 	args.ExceptionThread = GetCurrentThread();

  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThread@0

; 1633 : 
; 1634 : 	WaitForSingleObject ((HANDLE) _beginthread (ExceptionHandlerThread, 0, &args), INFINITE);

  0006e	6a ff		 push	 -1
  00070	8d 54 24 04	 lea	 edx, DWORD PTR _args$[esp+12]
  00074	52		 push	 edx
  00075	6a 00		 push	 0
  00077	68 00 00 00 00	 push	 OFFSET ?ExceptionHandlerThread@@YAXPAX@Z ; ExceptionHandlerThread
  0007c	89 44 24 14	 mov	 DWORD PTR _args$[esp+28], eax
  00080	e8 00 00 00 00	 call	 __beginthread
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH
  00088	50		 push	 eax
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8

; 1635 : 
; 1636 : 	return EXCEPTION_EXECUTE_HANDLER;

  0008f	b8 01 00 00 00	 mov	 eax, 1

; 1637 : }

  00094	83 c4 08	 add	 esp, 8
  00097	c2 04 00	 ret	 4
?ExceptionHandler@@YGJPAU_EXCEPTION_POINTERS@@@Z ENDP	; ExceptionHandler
_TEXT	ENDS
PUBLIC	??_C@_0N@MAFEFKDE@releasenotes?$AA@		; `string'
PUBLIC	??_C@_0BM@PEPDOHPE@AFTER_UPGRADE_RELEASE_NOTES?$AA@ ; `string'
PUBLIC	??_C@_0BC@FIMNAHGL@beginnerstutorial?$AA@	; `string'
PUBLIC	??_C@_0BH@JALPBIFE@AFTER_INSTALL_TUTORIAL?$AA@	; `string'
PUBLIC	_DoPostInstallTasks
EXTRN	_AskYesNo:PROC
;	COMDAT ??_C@_0N@MAFEFKDE@releasenotes?$AA@
CONST	SEGMENT
??_C@_0N@MAFEFKDE@releasenotes?$AA@ DB 'releasenotes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PEPDOHPE@AFTER_UPGRADE_RELEASE_NOTES?$AA@
CONST	SEGMENT
??_C@_0BM@PEPDOHPE@AFTER_UPGRADE_RELEASE_NOTES?$AA@ DB 'AFTER_UPGRADE_REL'
	DB	'EASE_NOTES', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FIMNAHGL@beginnerstutorial?$AA@
CONST	SEGMENT
??_C@_0BC@FIMNAHGL@beginnerstutorial?$AA@ DB 'beginnerstutorial', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JALPBIFE@AFTER_INSTALL_TUTORIAL?$AA@
CONST	SEGMENT
??_C@_0BH@JALPBIFE@AFTER_INSTALL_TUTORIAL?$AA@ DB 'AFTER_INSTALL_TUTORIAL'
	DB	00H						; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _DoPostInstallTasks
_TEXT	SEGMENT
_DoPostInstallTasks PROC				; COMDAT

; 1959 : {

  00000	56		 push	 esi

; 1960 : 	BOOL bDone = FALSE;
; 1961 : 
; 1962 : 	if (FileExists (GetConfigPath (TC_APPD_FILENAME_POST_INSTALL_TASK_TUTORIAL)))

  00001	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CCKGMGAA@Post?9Install?5Task?5?9?5Tutorial?$AA@
  00006	33 f6		 xor	 esi, esi
  00008	e8 00 00 00 00	 call	 _GetConfigPath
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 _FileExists
  00013	83 c4 08	 add	 esp, 8
  00016	85 c0		 test	 eax, eax
  00018	74 2b		 je	 SHORT $LN5@DoPostInst

; 1963 : 	{
; 1964 : 		if (AskYesNo ("AFTER_INSTALL_TUTORIAL") == IDYES)

  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@JALPBIFE@AFTER_INSTALL_TUTORIAL?$AA@
  0001f	e8 00 00 00 00	 call	 _AskYesNo
  00024	83 c4 04	 add	 esp, 4
  00027	83 f8 06	 cmp	 eax, 6
  0002a	75 14		 jne	 SHORT $LN4@DoPostInst

; 1965 : 			Applink ("beginnerstutorial", TRUE, "");

  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00031	6a 01		 push	 1
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FIMNAHGL@beginnerstutorial?$AA@
  00038	e8 00 00 00 00	 call	 _Applink
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@DoPostInst:

; 1966 : 
; 1967 : 		bDone = TRUE;

  00040	be 01 00 00 00	 mov	 esi, 1
$LN5@DoPostInst:

; 1968 : 	}
; 1969 : 
; 1970 : 	if (FileExists (GetConfigPath (TC_APPD_FILENAME_POST_INSTALL_TASK_RELEASE_NOTES)))

  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@PPOKIEIE@Post?9Install?5Task?5?9?5Release?5Note@
  0004a	e8 00 00 00 00	 call	 _GetConfigPath
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 _FileExists
  00055	83 c4 08	 add	 esp, 8
  00058	85 c0		 test	 eax, eax
  0005a	74 28		 je	 SHORT $LN3@DoPostInst

; 1971 : 	{
; 1972 : 		if (AskYesNo ("AFTER_UPGRADE_RELEASE_NOTES") == IDYES)

  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PEPDOHPE@AFTER_UPGRADE_RELEASE_NOTES?$AA@
  00061	e8 00 00 00 00	 call	 _AskYesNo
  00066	83 c4 04	 add	 esp, 4
  00069	83 f8 06	 cmp	 eax, 6
  0006c	75 1a		 jne	 SHORT $LN19@DoPostInst

; 1973 : 			Applink ("releasenotes", TRUE, "");

  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00073	6a 01		 push	 1
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MAFEFKDE@releasenotes?$AA@
  0007a	e8 00 00 00 00	 call	 _Applink
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1974 : 
; 1975 : 		bDone = TRUE;
; 1976 : 	}
; 1977 : 
; 1978 : 	if (bDone)

  00082	eb 04		 jmp	 SHORT $LN19@DoPostInst
$LN3@DoPostInst:
  00084	85 f6		 test	 esi, esi
  00086	74 28		 je	 SHORT $LN17@DoPostInst
$LN19@DoPostInst:

; 1979 : 		SavePostInstallTasksSettings (TC_POST_INSTALL_CFG_REMOVE_ALL);

  00088	e8 00 00 00 00	 call	 _IsNonInstallMode
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CCKGMGAA@Post?9Install?5Task?5?9?5Tutorial?$AA@
  00092	e8 00 00 00 00	 call	 _GetConfigPath
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 _remove
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@PPOKIEIE@Post?9Install?5Task?5?9?5Release?5Note@
  000a2	e8 00 00 00 00	 call	 _GetConfigPath
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 _remove
  000ad	83 c4 10	 add	 esp, 16			; 00000010H
$LN17@DoPostInst:
  000b0	5e		 pop	 esi

; 1980 : }

  000b1	c3		 ret	 0
_DoPostInstallTasks ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@HCBFIMAP@INIT_RICHEDIT?$AA@		; `string'
PUBLIC	??_C@_0N@BMEDOHMB@Riched20?4dll?$AA@		; `string'
PUBLIC	??_C@_0O@PKFAAFKJ@INIT_REGISTER?$AA@		; `string'
PUBLIC	??_C@_06FGFHJIJL@?$CD32770?$AA@			; `string'
PUBLIC	??_C@_0BO@CHBDAIFD@LARGE_IDE_WARNING_2K_REGISTRY?$AA@ ; `string'
PUBLIC	??_C@_0N@MGFEFGLL@EnableBigLba?$AA@		; `string'
PUBLIC	??_C@_0DD@HENCBNAN@SYSTEM?2CurrentControlSet?2Service@ ; `string'
PUBLIC	??_C@_0BF@FAAJOFOJ@LARGE_IDE_WARNING_2K?$AA@	; `string'
PUBLIC	??_C@_0BF@LMHPGAIF@LARGE_IDE_WARNING_XP?$AA@	; `string'
PUBLIC	??_C@_0CI@KAEBDPBB@System?2CurrentControlSet?2Control@ ; `string'
PUBLIC	??_C@_0P@IEEIGCBO@UNSUPPORTED_OS?$AA@		; `string'
PUBLIC	??_C@_08BENDAOKD@Language?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_InitApp
EXTRN	__imp__LoadCursorA@8:PROC
EXTRN	__imp__GetClassInfoA@12:PROC
EXTRN	__set_invalid_parameter_handler:PROC
EXTRN	_LoadLanguageFile:PROC
EXTRN	_LanguageDlgProc@16:PROC
EXTRN	_SetPreferredLangId:PROC
EXTRN	__imp__SetErrorMode@4:PROC
;	COMDAT ??_C@_0O@HCBFIMAP@INIT_RICHEDIT?$AA@
CONST	SEGMENT
??_C@_0O@HCBFIMAP@INIT_RICHEDIT?$AA@ DB 'INIT_RICHEDIT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BMEDOHMB@Riched20?4dll?$AA@
CONST	SEGMENT
??_C@_0N@BMEDOHMB@Riched20?4dll?$AA@ DB 'Riched20.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PKFAAFKJ@INIT_REGISTER?$AA@
CONST	SEGMENT
??_C@_0O@PKFAAFKJ@INIT_REGISTER?$AA@ DB 'INIT_REGISTER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FGFHJIJL@?$CD32770?$AA@
CONST	SEGMENT
??_C@_06FGFHJIJL@?$CD32770?$AA@ DB '#32770', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CHBDAIFD@LARGE_IDE_WARNING_2K_REGISTRY?$AA@
CONST	SEGMENT
??_C@_0BO@CHBDAIFD@LARGE_IDE_WARNING_2K_REGISTRY?$AA@ DB 'LARGE_IDE_WARNI'
	DB	'NG_2K_REGISTRY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MGFEFGLL@EnableBigLba?$AA@
CONST	SEGMENT
??_C@_0N@MGFEFGLL@EnableBigLba?$AA@ DB 'EnableBigLba', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@HENCBNAN@SYSTEM?2CurrentControlSet?2Service@
CONST	SEGMENT
??_C@_0DD@HENCBNAN@SYSTEM?2CurrentControlSet?2Service@ DB 'SYSTEM\Current'
	DB	'ControlSet\Services\Atapi\Parameters', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FAAJOFOJ@LARGE_IDE_WARNING_2K?$AA@
CONST	SEGMENT
??_C@_0BF@FAAJOFOJ@LARGE_IDE_WARNING_2K?$AA@ DB 'LARGE_IDE_WARNING_2K', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LMHPGAIF@LARGE_IDE_WARNING_XP?$AA@
CONST	SEGMENT
??_C@_0BF@LMHPGAIF@LARGE_IDE_WARNING_XP?$AA@ DB 'LARGE_IDE_WARNING_XP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KAEBDPBB@System?2CurrentControlSet?2Control@
CONST	SEGMENT
??_C@_0CI@KAEBDPBB@System?2CurrentControlSet?2Control@ DB 'System\Current'
	DB	'ControlSet\Control\minint', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IEEIGCBO@UNSUPPORTED_OS?$AA@
CONST	SEGMENT
??_C@_0P@IEEIGCBO@UNSUPPORTED_OS?$AA@ DB 'UNSUPPORTED_OS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BENDAOKD@Language?$AA@
CONST	SEGMENT
??_C@_08BENDAOKD@Language?$AA@ DB 'Language', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _InitApp
_TEXT	SEGMENT
_k$139805 = -220					; size = 4
_hkey$139793 = -220					; size = 4
_val$139791 = -216					; size = 4
_size$139792 = -212					; size = 4
_wc$ = -208						; size = 40
_osEx$139779 = -168					; size = 156
_langId$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
_hInstance$ = 8						; size = 4
_lpszCommandLine$ = 12					; size = 4
_InitApp PROC						; COMDAT

; 2050 : {

  00000	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 d8 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+220], eax
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b bc 24 e8 00
	00 00		 mov	 edi, DWORD PTR _hInstance$[esp+224]

; 2051 : 	WNDCLASS wc;
; 2052 : 	char langId[6];
; 2053 : 
; 2054 : 	/* Save the instance handle for later */
; 2055 : 	hInst = hInstance;

  0001d	89 3d 00 00 00
	00		 mov	 DWORD PTR _hInst, edi

; 2056 : 
; 2057 : 	InitOSVersionInfo();

  00023	e8 00 00 00 00	 call	 _InitOSVersionInfo

; 2058 : 
; 2059 : 	SetErrorMode (SetErrorMode (0) | SEM_FAILCRITICALERRORS | SEM_NOOPENFILEERRORBOX);

  00028	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetErrorMode@4
  0002e	6a 00		 push	 0
  00030	ff d6		 call	 esi
  00032	0d 01 80 00 00	 or	 eax, 32769		; 00008001H
  00037	50		 push	 eax
  00038	ff d6		 call	 esi

; 2060 : 	CoInitialize (NULL);

  0003a	6a 00		 push	 0
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoInitialize@4

; 2061 : 
; 2062 : #ifndef SETUP
; 2063 : 	// Application ID
; 2064 : 	typedef HRESULT (WINAPI *SetAppId_t) (PCWSTR appID);
; 2065 : 	SetAppId_t setAppId = (SetAppId_t) GetProcAddress (GetModuleHandle ("shell32.dll"), "SetCurrentProcessExplicitAppUserModelID");
; 2066 : 
; 2067 : 	/*
; 2068 : 	 * Specifies a unique application-defined Application User Model ID (AppUserModelID)
; 2069 : 	 * that identifies the current process to the taskbar. This identifier allows an application to
; 2070 : 	 * group its associated processes and windows under a single taskbar button (NT 6.1 or later).
; 2071 : 	 */
; 2072 : 	if (setAppId)
; 2073 : 		setAppId (TC_APPLICATION_ID);
; 2074 : #endif
; 2075 : 
; 2076 : 	// Language
; 2077 : 	langId[0] = 0;
; 2078 : 	SetPreferredLangId (ConfigReadString ("Language", "", langId, sizeof (langId)));

  00042	6a 06		 push	 6
  00044	8d 84 24 dc 00
	00 00		 lea	 eax, DWORD PTR _langId$[esp+232]
  0004b	50		 push	 eax
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_08BENDAOKD@Language?$AA@
  00051	c6 84 24 e4 00
	00 00 00	 mov	 BYTE PTR _langId$[esp+240], 0
  00059	e8 00 00 00 00	 call	 ?ConfigRead@@YAHPAD0H@Z	; ConfigRead
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00061	85 c0		 test	 eax, eax
  00063	8d 84 24 d8 00
	00 00		 lea	 eax, DWORD PTR _langId$[esp+228]
  0006a	75 05		 jne	 SHORT $LN22@InitApp
  0006c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN22@InitApp:
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 _SetPreferredLangId
  00077	83 c4 04	 add	 esp, 4

; 2079 : 	
; 2080 : 	if (langId[0] == 0)

  0007a	80 bc 24 d8 00
	00 00 00	 cmp	 BYTE PTR _langId$[esp+228], 0
  00082	75 1b		 jne	 SHORT $LN26@InitApp

; 2081 : 		DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_LANGUAGE), NULL,
; 2082 : 			(DLGPROC) LanguageDlgProc, (LPARAM) 1);

  00084	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  0008a	6a 01		 push	 1
  0008c	68 00 00 00 00	 push	 OFFSET _LanguageDlgProc@16
  00091	6a 00		 push	 0
  00093	68 01 02 00 00	 push	 513			; 00000201H
  00098	51		 push	 ecx
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
$LN26@InitApp:

; 2083 : 
; 2084 : 	LoadLanguageFile ();

  0009f	e8 00 00 00 00	 call	 _LoadLanguageFile

; 2085 : 
; 2086 : #ifndef SETUP
; 2087 : 	// UAC elevation moniker cannot be used in portable mode.
; 2088 : 	// A new instance of the application must be created with elevated privileges.
; 2089 : 	if (IsNonInstallMode () && !IsAdmin () && IsUacSupported ())
; 2090 : 	{
; 2091 : 		char modPath[MAX_PATH], newCmdLine[4096];
; 2092 : 		WNDCLASSEX wcex;
; 2093 : 		HWND hWnd;
; 2094 : 
; 2095 : 		if (strstr (lpszCommandLine, "/q UAC ") == lpszCommandLine)
; 2096 : 		{
; 2097 : 			Error ("UAC_INIT_ERROR");
; 2098 : 			exit (1);
; 2099 : 		}
; 2100 : 
; 2101 : 		memset (&wcex, 0, sizeof (wcex));
; 2102 : 		wcex.cbSize = sizeof(WNDCLASSEX); 
; 2103 : 		wcex.lpfnWndProc = (WNDPROC) NonInstallUacWndProc;
; 2104 : 		wcex.hInstance = hInstance;
; 2105 : 		wcex.lpszClassName = "CipherShed";
; 2106 : 		RegisterClassEx (&wcex);
; 2107 : 
; 2108 : 		// A small transparent window is necessary to bring the new instance to foreground
; 2109 : 		hWnd = CreateWindowEx (WS_EX_TOOLWINDOW | WS_EX_LAYERED,
; 2110 : 			"CipherShed", "CipherShed", 0,
; 2111 : 			GetSystemMetrics (SM_CXSCREEN)/2,
; 2112 : 			GetSystemMetrics (SM_CYSCREEN)/2,
; 2113 : 			1, 1, NULL, NULL, hInstance, NULL);
; 2114 : 
; 2115 : 		SetLayeredWindowAttributes (hWnd, 0, 0, LWA_ALPHA);
; 2116 : 		ShowWindow (hWnd, SW_SHOWNORMAL);
; 2117 : 
; 2118 : 		GetModuleFileName (NULL, modPath, sizeof (modPath));
; 2119 : 
; 2120 : 		strcpy (newCmdLine, "/q UAC ");
; 2121 : 		strcat_s (newCmdLine, sizeof (newCmdLine), lpszCommandLine);
; 2122 : 
; 2123 : 		if ((int)ShellExecute (hWnd, "runas", modPath, newCmdLine, NULL, SW_SHOWNORMAL) <= 32)
; 2124 : 			exit (1);
; 2125 : 
; 2126 : 		Sleep (2000);
; 2127 : 		exit (0);
; 2128 : 	}
; 2129 : #endif
; 2130 : 
; 2131 : 	SetUnhandledExceptionFilter (ExceptionHandler);

  000a4	68 00 00 00 00	 push	 OFFSET ?ExceptionHandler@@YGJPAU_EXCEPTION_POINTERS@@@Z ; ExceptionHandler
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetUnhandledExceptionFilter@4

; 2132 : 	_set_invalid_parameter_handler (InvalidParameterHandler);

  000af	68 00 00 00 00	 push	 OFFSET ?InvalidParameterHandler@@YAXPB_W00II@Z ; InvalidParameterHandler
  000b4	e8 00 00 00 00	 call	 __set_invalid_parameter_handler
  000b9	83 c4 04	 add	 esp, 4

; 2133 : 
; 2134 : 	RemoteSession = GetSystemMetrics (SM_REMOTESESSION) != 0;

  000bc	68 00 10 00 00	 push	 4096			; 00001000H
  000c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  000c7	f7 d8		 neg	 eax
  000c9	1b c0		 sbb	 eax, eax
  000cb	f7 d8		 neg	 eax

; 2135 : 
; 2136 : 	// OS version check
; 2137 : 	if (CurrentOSMajor < 5)

  000cd	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _CurrentOSMajor, 5
  000d4	a3 00 00 00 00	 mov	 DWORD PTR _RemoteSession, eax
  000d9	7d 26		 jge	 SHORT $LN18@InitApp

; 2138 : 	{
; 2139 : 		MessageBoxW (NULL, GetString ("UNSUPPORTED_OS"), lpszTitle, MB_ICONSTOP);

  000db	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  000e1	6a 10		 push	 16			; 00000010H
  000e3	52		 push	 edx
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IEEIGCBO@UNSUPPORTED_OS?$AA@
  000e9	e8 00 00 00 00	 call	 _GetString
  000ee	83 c4 04	 add	 esp, 4
  000f1	50		 push	 eax
  000f2	6a 00		 push	 0
  000f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 2140 : 		exit (1);

  000fa	6a 01		 push	 1
  000fc	e8 00 00 00 00	 call	 _exit
$LN18@InitApp:

; 2141 : 	}
; 2142 : 	else
; 2143 : 	{
; 2144 : 		OSVERSIONINFOEX osEx;
; 2145 : 
; 2146 : 		// Service pack check & warnings about critical MS issues
; 2147 : 		osEx.dwOSVersionInfoSize = sizeof (OSVERSIONINFOEX);
; 2148 : 		if (GetVersionEx ((LPOSVERSIONINFOA) &osEx) != 0)

  00101	8d 44 24 3c	 lea	 eax, DWORD PTR _osEx$139779[esp+228]
  00105	50		 push	 eax
  00106	c7 44 24 40 9c
	00 00 00	 mov	 DWORD PTR _osEx$139779[esp+232], 156 ; 0000009cH
  0010e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4
  00114	85 c0		 test	 eax, eax
  00116	0f 84 f0 00 00
	00		 je	 $LN11@InitApp

; 2149 : 		{
; 2150 : 			CurrentOSServicePack = osEx.wServicePackMajor;

  0011c	66 8b 8c 24 d0
	00 00 00	 mov	 cx, WORD PTR _osEx$139779[esp+376]

; 2151 : 			switch (nCurrentOS)

  00124	a1 00 00 00 00	 mov	 eax, DWORD PTR _nCurrentOS
  00129	83 e8 07	 sub	 eax, 7
  0012c	0f b7 d1	 movzx	 edx, cx
  0012f	89 15 00 00 00
	00		 mov	 DWORD PTR _CurrentOSServicePack, edx
  00135	74 4f		 je	 SHORT $LN13@InitApp
  00137	83 e8 01	 sub	 eax, 1
  0013a	0f 85 cc 00 00
	00		 jne	 $LN11@InitApp

; 2169 : 				}
; 2170 : 				break;
; 2171 : 
; 2172 : 			case WIN_XP:
; 2173 : 				if (osEx.wServicePackMajor < 1)

  00140	66 83 f9 01	 cmp	 cx, 1
  00144	0f 83 c2 00 00
	00		 jae	 $LN11@InitApp

; 2174 : 				{
; 2175 : 					HKEY k;
; 2176 : 					// PE environment does not report version of SP
; 2177 : 					if (RegOpenKeyEx (HKEY_LOCAL_MACHINE, "System\\CurrentControlSet\\Control\\minint", 0, KEY_READ, &k) != ERROR_SUCCESS)

  0014a	8d 44 24 08	 lea	 eax, DWORD PTR _k$139805[esp+228]
  0014e	50		 push	 eax
  0014f	68 19 00 02 00	 push	 131097			; 00020019H
  00154	6a 00		 push	 0
  00156	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KAEBDPBB@System?2CurrentControlSet?2Control@
  0015b	68 02 00 00 80	 push	 -2147483646		; 80000002H
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  00166	85 c0		 test	 eax, eax
  00168	74 12		 je	 SHORT $LN6@InitApp

; 2178 : 						Warning ("LARGE_IDE_WARNING_XP");

  0016a	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LMHPGAIF@LARGE_IDE_WARNING_XP?$AA@
  0016f	e8 00 00 00 00	 call	 _Warning
  00174	83 c4 04	 add	 esp, 4

; 2179 : 					else

  00177	e9 90 00 00 00	 jmp	 $LN11@InitApp
$LN6@InitApp:

; 2180 : 						RegCloseKey (k);

  0017c	8b 4c 24 08	 mov	 ecx, DWORD PTR _k$139805[esp+228]
  00180	51		 push	 ecx

; 2181 : 				}
; 2182 : 				break;

  00181	e9 80 00 00 00	 jmp	 $LN28@InitApp
$LN13@InitApp:

; 2152 : 			{
; 2153 : 			case WIN_2000:
; 2154 : 				if (osEx.wServicePackMajor < 3)

  00186	66 83 f9 03	 cmp	 cx, 3
  0018a	73 0f		 jae	 SHORT $LN12@InitApp

; 2155 : 					Warning ("LARGE_IDE_WARNING_2K");

  0018c	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FAAJOFOJ@LARGE_IDE_WARNING_2K?$AA@
  00191	e8 00 00 00 00	 call	 _Warning
  00196	83 c4 04	 add	 esp, 4

; 2156 : 				else

  00199	eb 71		 jmp	 SHORT $LN11@InitApp
$LN12@InitApp:

; 2157 : 				{
; 2158 : 					DWORD val = 0, size = sizeof(val);
; 2159 : 					HKEY hkey;
; 2160 : 
; 2161 : 					if (RegOpenKeyEx (HKEY_LOCAL_MACHINE, "SYSTEM\\CurrentControlSet\\Services\\Atapi\\Parameters", 0, KEY_READ, &hkey) == ERROR_SUCCESS
; 2162 : 						&& (RegQueryValueEx (hkey, "EnableBigLba", 0, 0, (LPBYTE) &val, &size) != ERROR_SUCCESS
; 2163 : 						|| val != 1))

  0019b	8d 54 24 08	 lea	 edx, DWORD PTR _hkey$139793[esp+228]
  0019f	52		 push	 edx
  001a0	68 19 00 02 00	 push	 131097			; 00020019H
  001a5	6a 00		 push	 0
  001a7	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@HENCBNAN@SYSTEM?2CurrentControlSet?2Service@
  001ac	68 02 00 00 80	 push	 -2147483646		; 80000002H
  001b1	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _val$139791[esp+248], 0
  001b9	c7 44 24 24 04
	00 00 00	 mov	 DWORD PTR _size$139792[esp+248], 4
  001c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  001c7	85 c0		 test	 eax, eax
  001c9	75 36		 jne	 SHORT $LN10@InitApp
  001cb	8b 54 24 08	 mov	 edx, DWORD PTR _hkey$139793[esp+228]
  001cf	8d 44 24 10	 lea	 eax, DWORD PTR _size$139792[esp+228]
  001d3	50		 push	 eax
  001d4	8d 4c 24 10	 lea	 ecx, DWORD PTR _val$139791[esp+232]
  001d8	51		 push	 ecx
  001d9	6a 00		 push	 0
  001db	6a 00		 push	 0
  001dd	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MGFEFGLL@EnableBigLba?$AA@
  001e2	52		 push	 edx
  001e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24
  001e9	85 c0		 test	 eax, eax
  001eb	75 07		 jne	 SHORT $LN9@InitApp
  001ed	83 7c 24 0c 01	 cmp	 DWORD PTR _val$139791[esp+228], 1
  001f2	74 0d		 je	 SHORT $LN10@InitApp
$LN9@InitApp:

; 2164 : 
; 2165 : 					{
; 2166 : 						Warning ("LARGE_IDE_WARNING_2K_REGISTRY");

  001f4	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@CHBDAIFD@LARGE_IDE_WARNING_2K_REGISTRY?$AA@
  001f9	e8 00 00 00 00	 call	 _Warning
  001fe	83 c4 04	 add	 esp, 4
$LN10@InitApp:

; 2167 : 					}
; 2168 : 					RegCloseKey (hkey);

  00201	8b 44 24 08	 mov	 eax, DWORD PTR _hkey$139793[esp+228]
  00205	50		 push	 eax
$LN28@InitApp:
  00206	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
$LN11@InitApp:

; 2183 : 			}
; 2184 : 		}
; 2185 : 
; 2186 : #ifndef SETUP
; 2187 : 		/* Hiberboot warning. */
; 2188 : 		if (IsOSAtLeast (WIN_8))
; 2189 : 		{
; 2190 : 			HKEY hkey;
; 2191 : 			DWORD size;
; 2192 : 
; 2193 : 			DWORD HibernateEnabled = 0, HiberbootEnabled = 0;
; 2194 : 
; 2195 : 			size = sizeof (HibernateEnabled);
; 2196 : 			if (RegOpenKeyEx (HKEY_LOCAL_MACHINE, "SYSTEM\\CurrentControlSet\\Control\\Power", 0, KEY_READ, &hkey) == ERROR_SUCCESS)
; 2197 : 			{
; 2198 : 				RegQueryValueEx (hkey, "HibernateEnabled", 0, 0, (LPBYTE) &HibernateEnabled, &size);
; 2199 : 				RegCloseKey (hkey);
; 2200 : 			}
; 2201 : 
; 2202 : 			size = sizeof (HiberbootEnabled);
; 2203 : 			if (RegOpenKeyEx (HKEY_LOCAL_MACHINE, "SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Power", 0, KEY_READ, &hkey) == ERROR_SUCCESS)
; 2204 : 			{
; 2205 : 				RegQueryValueEx (hkey, "HiberbootEnabled", 0, 0, (LPBYTE) &HiberbootEnabled, &size);
; 2206 : 				RegCloseKey (hkey);
; 2207 : 			}
; 2208 : 
; 2209 : 			if (HibernateEnabled && HiberbootEnabled)
; 2210 : 			{
; 2211 : 				Warning ("HIBERBOOT_WARNING");
; 2212 : 			}
; 2213 : 		}
; 2214 : #endif
; 2215 : 	}
; 2216 : 
; 2217 : 	/* Get the attributes for the standard dialog class */
; 2218 : 	if ((GetClassInfo (hInst, WINDOWS_DIALOG_CLASS, &wc)) == 0)

  0020c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  00212	8d 4c 24 14	 lea	 ecx, DWORD PTR _wc$[esp+228]
  00216	51		 push	 ecx
  00217	68 00 00 00 00	 push	 OFFSET ??_C@_06FGFHJIJL@?$CD32770?$AA@
  0021c	52		 push	 edx
  0021d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClassInfoA@12
  00223	85 c0		 test	 eax, eax
  00225	75 13		 jne	 SHORT $LN4@InitApp

; 2219 : 	{
; 2220 : 		handleWin32Error (NULL);

  00227	50		 push	 eax
  00228	e8 00 00 00 00	 call	 _handleWin32Error
  0022d	83 c4 04	 add	 esp, 4

; 2221 : 		AbortProcess ("INIT_REGISTER");

  00230	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PKFAAFKJ@INIT_REGISTER?$AA@
  00235	e8 00 00 00 00	 call	 _AbortProcess
$LN4@InitApp:

; 2222 : 	}
; 2223 : 
; 2224 : #ifndef SETUP
; 2225 : 	wc.hIcon = LoadIcon (hInstance, MAKEINTRESOURCE (IDI_CIPHERSHED_ICON));
; 2226 : #else
; 2227 : #include "../setup/resource.h"
; 2228 : 	wc.hIcon = LoadIcon (hInstance, MAKEINTRESOURCE (IDI_SETUP));

  0023a	6a 68		 push	 104			; 00000068H
  0023c	57		 push	 edi
  0023d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadIconA@8

; 2229 : #endif
; 2230 : 	wc.lpszClassName = TC_DLG_CLASS;
; 2231 : 	wc.lpfnWndProc = &CustomDlgProc;
; 2232 : 	wc.hCursor = LoadCursor (NULL, IDC_ARROW);

  00243	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__LoadCursorA@8
  00249	68 00 7f 00 00	 push	 32512			; 00007f00H
  0024e	6a 00		 push	 0
  00250	89 44 24 30	 mov	 DWORD PTR _wc$[esp+256], eax
  00254	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR _wc$[esp+272], OFFSET ??_C@_09ODDMBMG@CustomDlg?$AA@
  0025c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _wc$[esp+240], OFFSET _CustomDlgProc@16
  00264	ff d6		 call	 esi

; 2233 : 	wc.cbWndExtra = DLGWINDOWEXTRA;
; 2234 : 
; 2235 : 	hDlgClass = RegisterClass (&wc);

  00266	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__RegisterClassA@4
  0026c	89 44 24 2c	 mov	 DWORD PTR _wc$[esp+252], eax
  00270	8d 44 24 14	 lea	 eax, DWORD PTR _wc$[esp+228]
  00274	50		 push	 eax
  00275	c7 44 24 24 1e
	00 00 00	 mov	 DWORD PTR _wc$[esp+244], 30 ; 0000001eH
  0027d	ff d7		 call	 edi
  0027f	66 a3 00 00 00
	00		 mov	 WORD PTR ?hDlgClass@@3GA, ax ; hDlgClass

; 2236 : 	if (hDlgClass == 0)

  00285	66 85 c0	 test	 ax, ax
  00288	75 14		 jne	 SHORT $LN3@InitApp

; 2237 : 	{
; 2238 : 		handleWin32Error (NULL);

  0028a	6a 00		 push	 0
  0028c	e8 00 00 00 00	 call	 _handleWin32Error
  00291	83 c4 04	 add	 esp, 4

; 2239 : 		AbortProcess ("INIT_REGISTER");

  00294	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PKFAAFKJ@INIT_REGISTER?$AA@
  00299	e8 00 00 00 00	 call	 _AbortProcess
$LN3@InitApp:

; 2240 : 	}
; 2241 : 
; 2242 : 	wc.lpszClassName = TC_SPLASH_CLASS;
; 2243 : 	wc.lpfnWndProc = &SplashDlgProc;
; 2244 : 	wc.hCursor = LoadCursor (NULL, IDC_ARROW);

  0029e	68 00 7f 00 00	 push	 32512			; 00007f00H
  002a3	6a 00		 push	 0
  002a5	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR _wc$[esp+272], OFFSET ??_C@_09EPIDNIBP@SplashDlg?$AA@
  002ad	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _wc$[esp+240], OFFSET _SplashDlgProc@16
  002b5	ff d6		 call	 esi

; 2245 : 	wc.cbWndExtra = DLGWINDOWEXTRA;
; 2246 : 
; 2247 : 	hSplashClass = RegisterClass (&wc);

  002b7	8d 4c 24 14	 lea	 ecx, DWORD PTR _wc$[esp+228]
  002bb	51		 push	 ecx
  002bc	89 44 24 30	 mov	 DWORD PTR _wc$[esp+256], eax
  002c0	c7 44 24 24 1e
	00 00 00	 mov	 DWORD PTR _wc$[esp+244], 30 ; 0000001eH
  002c8	ff d7		 call	 edi
  002ca	66 a3 00 00 00
	00		 mov	 WORD PTR ?hSplashClass@@3GA, ax ; hSplashClass

; 2248 : 	if (hSplashClass == 0)

  002d0	66 85 c0	 test	 ax, ax
  002d3	75 14		 jne	 SHORT $LN2@InitApp

; 2249 : 	{
; 2250 : 		handleWin32Error (NULL);

  002d5	6a 00		 push	 0
  002d7	e8 00 00 00 00	 call	 _handleWin32Error
  002dc	83 c4 04	 add	 esp, 4

; 2251 : 		AbortProcess ("INIT_REGISTER");

  002df	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PKFAAFKJ@INIT_REGISTER?$AA@
  002e4	e8 00 00 00 00	 call	 _AbortProcess
$LN2@InitApp:

; 2252 : 	}
; 2253 : 
; 2254 : 	// Required for RichEdit text fields to work
; 2255 : 	if (LoadLibrary("Riched20.dll") == NULL)

  002e9	68 00 00 00 00	 push	 OFFSET ??_C@_0N@BMEDOHMB@Riched20?4dll?$AA@
  002ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
  002f4	85 c0		 test	 eax, eax
  002f6	75 13		 jne	 SHORT $LN1@InitApp

; 2256 : 	{
; 2257 : 		// This error is fatal e.g. because legal notices could not be displayed
; 2258 : 		handleWin32Error (NULL);

  002f8	50		 push	 eax
  002f9	e8 00 00 00 00	 call	 _handleWin32Error
  002fe	83 c4 04	 add	 esp, 4

; 2259 : 		AbortProcess ("INIT_RICHEDIT");	

  00301	68 00 00 00 00	 push	 OFFSET ??_C@_0O@HCBFIMAP@INIT_RICHEDIT?$AA@
  00306	e8 00 00 00 00	 call	 _AbortProcess
$LN1@InitApp:

; 2260 : 	}
; 2261 : 
; 2262 : 	// DPI and GUI aspect ratio
; 2263 : 	DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_AUXILIARY_DLG), NULL,
; 2264 : 		(DLGPROC) AuxiliaryDlgProc, (LPARAM) 1);

  0030b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  00311	6a 01		 push	 1
  00313	68 00 00 00 00	 push	 OFFSET ?AuxiliaryDlgProc@@YGHPAUHWND__@@IIJ@Z ; AuxiliaryDlgProc
  00318	6a 00		 push	 0
  0031a	68 04 02 00 00	 push	 516			; 00000204H
  0031f	52		 push	 edx
  00320	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 2265 : 
; 2266 : 	InitHelpFileName ();

  00326	e8 00 00 00 00	 call	 _InitHelpFileName

; 2267 : 
; 2268 : #ifndef SETUP
; 2269 : 	if (!EncryptionThreadPoolStart (ReadEncryptionThreadPoolFreeCpuCountLimit()))
; 2270 : 	{
; 2271 : 		handleWin32Error (NULL);
; 2272 : 		exit (1);
; 2273 : 	}
; 2274 : #endif
; 2275 : }

  0032b	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+228]
  00332	5f		 pop	 edi
  00333	5e		 pop	 esi
  00334	33 cc		 xor	 ecx, esp
  00336	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0033b	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00341	c3		 ret	 0
$LN27@InitApp:
_InitApp ENDP
_TEXT	ENDS
PUBLIC	??_C@_04PCJFHION@help?$AA@			; `string'
PUBLIC	_OpenOnlineHelp
;	COMDAT ??_C@_04PCJFHION@help?$AA@
CONST	SEGMENT
??_C@_04PCJFHION@help?$AA@ DB 'help', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _OpenOnlineHelp
_TEXT	SEGMENT
_OpenOnlineHelp PROC					; COMDAT

; 7239 : 	Applink ("help", TRUE, "");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00005	6a 01		 push	 1
  00007	68 00 00 00 00	 push	 OFFSET ??_C@_04PCJFHION@help?$AA@
  0000c	e8 00 00 00 00	 call	 _Applink
  00011	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7240 : }

  00014	c3		 ret	 0
_OpenOnlineHelp ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z$0
__ehfuncinfo$?_Insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z
_TEXT	SEGMENT
$T198959 = -80						; size = 28
$T198958 = -52						; size = 40
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$ = 20						; size = 4
?_Insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert, COMDAT
; _this$ = ecx

; 1187 : 		{	// add node with value next to _Wherenode, to left if _Addnode

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 44	 sub	 esp, 68			; 00000044H
  00011	53		 push	 ebx
  00012	55		 push	 ebp
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c4		 xor	 eax, esp
  0001c	50		 push	 eax
  0001d	8d 44 24 58	 lea	 eax, DWORD PTR __$EHRec$[esp+100]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx

; 1188 : 		if (max_size() - 1 <= _Mysize)

  00029	81 7f 1c 70 1c
	c7 01		 cmp	 DWORD PTR [edi+28], 29826160 ; 01c71c70H
  00030	72 4c		 jb	 SHORT $LN17@Insert@2

; 1189 : 			_THROW(length_error, "map/set<T> too long");

  00032	6a 13		 push	 19			; 00000013H
  00034	33 f6		 xor	 esi, esi
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  0003b	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T198959[esp+108]
  0003f	c7 44 24 34 0f
	00 00 00	 mov	 DWORD PTR $T198959[esp+132], 15 ; 0000000fH
  00047	89 74 24 30	 mov	 DWORD PTR $T198959[esp+128], esi
  0004b	c6 44 24 20 00	 mov	 BYTE PTR $T198959[esp+112], 0
  00050	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00055	8d 44 24 14	 lea	 eax, DWORD PTR $T198959[esp+100]
  00059	50		 push	 eax
  0005a	8d 4c 24 34	 lea	 ecx, DWORD PTR $T198958[esp+104]
  0005e	89 74 24 64	 mov	 DWORD PTR __$EHRec$[esp+112], esi
  00062	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00067	68 00 00 00 00	 push	 OFFSET __TI3?AVlength_error@std@@
  0006c	8d 4c 24 34	 lea	 ecx, DWORD PTR $T198958[esp+104]
  00070	51		 push	 ecx
  00071	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR $T198958[esp+108], OFFSET ??_7length_error@std@@6B@
  00079	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN17@Insert@2:

; 1190 : 		_Nodeptr _Newnode = _Buynode(_Myhead, _Wherenode, _Myhead,
; 1191 : 			_Val, _Red);

  0007e	8b 54 24 74	 mov	 edx, DWORD PTR __Val$[esp+96]
  00082	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00085	8b 74 24 70	 mov	 esi, DWORD PTR __Wherenode$[esp+96]
  00089	6a 00		 push	 0
  0008b	52		 push	 edx
  0008c	50		 push	 eax
  0008d	56		 push	 esi
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHUHostDevice@@@2@D@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buynode
  00094	8b e8		 mov	 ebp, eax

; 1192 : 
; 1193 : 		++_Mysize;
; 1194 : 		if (_Wherenode == _Myhead)

  00096	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00099	bb 01 00 00 00	 mov	 ebx, 1
  0009e	01 5f 1c	 add	 DWORD PTR [edi+28], ebx
  000a1	3b f0		 cmp	 esi, eax
  000a3	75 10		 jne	 SHORT $LN16@Insert@2

; 1195 : 			{	// first node in tree, just set head values
; 1196 : 			_Root() = _Newnode;

  000a5	89 68 04	 mov	 DWORD PTR [eax+4], ebp

; 1197 : 			_Lmost() = _Newnode, _Rmost() = _Newnode;

  000a8	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  000ab	89 28		 mov	 DWORD PTR [eax], ebp
  000ad	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  000b0	89 69 08	 mov	 DWORD PTR [ecx+8], ebp
  000b3	eb 22		 jmp	 SHORT $LN11@Insert@2
$LN16@Insert@2:

; 1198 : 			}
; 1199 : 		else if (_Addleft)

  000b5	80 7c 24 6c 00	 cmp	 BYTE PTR __Addleft$[esp+96], 0
  000ba	74 0d		 je	 SHORT $LN14@Insert@2

; 1200 : 			{	// add to left of _Wherenode
; 1201 : 			_Left(_Wherenode) = _Newnode;

  000bc	89 2e		 mov	 DWORD PTR [esi], ebp

; 1202 : 			if (_Wherenode == _Lmost())

  000be	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  000c1	3b 30		 cmp	 esi, DWORD PTR [eax]
  000c3	75 12		 jne	 SHORT $LN11@Insert@2

; 1203 : 				_Lmost() = _Newnode;

  000c5	89 28		 mov	 DWORD PTR [eax], ebp

; 1204 : 			}
; 1205 : 		else

  000c7	eb 0e		 jmp	 SHORT $LN11@Insert@2
$LN14@Insert@2:

; 1206 : 			{	// add to right of _Wherenode
; 1207 : 			_Right(_Wherenode) = _Newnode;

  000c9	89 6e 08	 mov	 DWORD PTR [esi+8], ebp

; 1208 : 			if (_Wherenode == _Rmost())

  000cc	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  000cf	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  000d2	75 03		 jne	 SHORT $LN11@Insert@2

; 1209 : 				_Rmost() = _Newnode;

  000d4	89 68 08	 mov	 DWORD PTR [eax+8], ebp
$LN11@Insert@2:

; 1210 : 			}
; 1211 : 
; 1212 : 		for (_Nodeptr _Pnode = _Newnode; _Color(_Parent(_Pnode)) == _Red; )

  000d7	8b 55 04	 mov	 edx, DWORD PTR [ebp+4]
  000da	80 ba a0 00 00
	00 00		 cmp	 BYTE PTR [edx+160], 0
  000e1	8d 45 04	 lea	 eax, DWORD PTR [ebp+4]
  000e4	8b f5		 mov	 esi, ebp
  000e6	0f 85 f4 00 00
	00		 jne	 $LN9@Insert@2
  000ec	8d 64 24 00	 npad	 4
$LL10@Insert@2:

; 1213 : 			if (_Parent(_Pnode) == _Left(_Parent(_Parent(_Pnode))))

  000f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f2	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000f5	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  000f7	75 44		 jne	 SHORT $LN8@Insert@2

; 1214 : 				{	// fixup red-red in left subtree
; 1215 : 				_Wherenode = _Right(_Parent(_Parent(_Pnode)));

  000f9	8b 52 08	 mov	 edx, DWORD PTR [edx+8]

; 1216 : 				if (_Color(_Wherenode) == _Red)

  000fc	80 ba a0 00 00
	00 00		 cmp	 BYTE PTR [edx+160], 0

; 1217 : 					{	// parent has two red children, blacken both
; 1218 : 					_Color(_Parent(_Pnode)) = _Black;
; 1219 : 					_Color(_Wherenode) = _Black;
; 1220 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;
; 1221 : 					_Pnode = _Parent(_Parent(_Pnode));
; 1222 : 					}
; 1223 : 				else

  00103	74 43		 je	 SHORT $LN272@Insert@2

; 1224 : 					{	// parent has red and black children
; 1225 : 					if (_Pnode == _Right(_Parent(_Pnode)))

  00105	3b 71 08	 cmp	 esi, DWORD PTR [ecx+8]
  00108	75 0a		 jne	 SHORT $LN5@Insert@2

; 1226 : 						{	// rotate right child to left
; 1227 : 						_Pnode = _Parent(_Pnode);

  0010a	8b f1		 mov	 esi, ecx

; 1228 : 						_Lrotate(_Pnode);

  0010c	56		 push	 esi
  0010d	8b cf		 mov	 ecx, edi
  0010f	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lrotate
$LN5@Insert@2:

; 1229 : 						}
; 1230 : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

  00114	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00117	88 98 a0 00 00
	00		 mov	 BYTE PTR [eax+160], bl

; 1231 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

  0011d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00120	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00123	c6 82 a0 00 00
	00 00		 mov	 BYTE PTR [edx+160], 0

; 1232 : 					_Rrotate(_Parent(_Parent(_Pnode)));

  0012a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0012d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00130	51		 push	 ecx
  00131	8b cf		 mov	 ecx, edi
  00133	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Rrotate

; 1233 : 					}
; 1234 : 				}
; 1235 : 			else

  00138	e9 90 00 00 00	 jmp	 $LN203@Insert@2
$LN8@Insert@2:

; 1236 : 				{	// fixup red-red in right subtree
; 1237 : 				_Wherenode = _Left(_Parent(_Parent(_Pnode)));

  0013d	8b 12		 mov	 edx, DWORD PTR [edx]

; 1238 : 				if (_Color(_Wherenode) == _Red)

  0013f	80 ba a0 00 00
	00 00		 cmp	 BYTE PTR [edx+160], 0
  00146	75 1f		 jne	 SHORT $LN3@Insert@2
$LN272@Insert@2:

; 1239 : 					{	// parent has two red children, blacken both
; 1240 : 					_Color(_Parent(_Pnode)) = _Black;

  00148	88 99 a0 00 00
	00		 mov	 BYTE PTR [ecx+160], bl

; 1241 : 					_Color(_Wherenode) = _Black;

  0014e	88 9a a0 00 00
	00		 mov	 BYTE PTR [edx+160], bl

; 1242 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

  00154	8b 10		 mov	 edx, DWORD PTR [eax]
  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	c6 81 a0 00 00
	00 00		 mov	 BYTE PTR [ecx+160], 0

; 1243 : 					_Pnode = _Parent(_Parent(_Pnode));

  00160	8b 10		 mov	 edx, DWORD PTR [eax]
  00162	8b 72 04	 mov	 esi, DWORD PTR [edx+4]

; 1244 : 					}
; 1245 : 				else

  00165	eb 66		 jmp	 SHORT $LN203@Insert@2
$LN3@Insert@2:

; 1246 : 					{	// parent has red and black children
; 1247 : 					if (_Pnode == _Left(_Parent(_Pnode)))

  00167	3b 31		 cmp	 esi, DWORD PTR [ecx]
  00169	75 0a		 jne	 SHORT $LN1@Insert@2

; 1248 : 						{	// rotate left child to right
; 1249 : 						_Pnode = _Parent(_Pnode);

  0016b	8b f1		 mov	 esi, ecx

; 1250 : 						_Rrotate(_Pnode);

  0016d	56		 push	 esi
  0016e	8b cf		 mov	 ecx, edi
  00170	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Rrotate
$LN1@Insert@2:

; 1251 : 						}
; 1252 : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

  00175	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00178	88 98 a0 00 00
	00		 mov	 BYTE PTR [eax+160], bl

; 1253 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

  0017e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00181	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00184	c6 82 a0 00 00
	00 00		 mov	 BYTE PTR [edx+160], 0

; 1254 : 					_Lrotate(_Parent(_Parent(_Pnode)));

  0018b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0018e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00191	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00194	8b 11		 mov	 edx, DWORD PTR [ecx]
  00196	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00199	8b 11		 mov	 edx, DWORD PTR [ecx]
  0019b	80 ba a1 00 00
	00 00		 cmp	 BYTE PTR [edx+161], 0
  001a2	75 03		 jne	 SHORT $LN202@Insert@2
  001a4	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN202@Insert@2:
  001a7	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001aa	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  001ad	8b 57 18	 mov	 edx, DWORD PTR [edi+24]
  001b0	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  001b3	75 05		 jne	 SHORT $LN201@Insert@2
  001b5	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  001b8	eb 0e		 jmp	 SHORT $LN198@Insert@2
$LN201@Insert@2:
  001ba	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001bd	3b 02		 cmp	 eax, DWORD PTR [edx]
  001bf	75 04		 jne	 SHORT $LN199@Insert@2
  001c1	89 0a		 mov	 DWORD PTR [edx], ecx
  001c3	eb 03		 jmp	 SHORT $LN198@Insert@2
$LN199@Insert@2:
  001c5	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN198@Insert@2:
  001c8	89 01		 mov	 DWORD PTR [ecx], eax
  001ca	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN203@Insert@2:
  001cd	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  001d0	80 b9 a0 00 00
	00 00		 cmp	 BYTE PTR [ecx+160], 0
  001d7	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  001da	0f 84 10 ff ff
	ff		 je	 $LL10@Insert@2
$LN9@Insert@2:

; 1255 : 					}
; 1256 : 				}
; 1257 : 
; 1258 : 		_Color(_Root()) = _Black;	// root is always black

  001e0	8b 57 18	 mov	 edx, DWORD PTR [edi+24]
  001e3	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001e6	88 98 a0 00 00
	00		 mov	 BYTE PTR [eax+160], bl

; 1259 : 		return (_TREE_ITERATOR(_Newnode));

  001ec	8b 44 24 68	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+96]
  001f0	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001f2	89 68 04	 mov	 DWORD PTR [eax+4], ebp
  001f5	89 08		 mov	 DWORD PTR [eax], ecx

; 1260 : 		}

  001f7	8b 4c 24 58	 mov	 ecx, DWORD PTR __$EHRec$[esp+100]
  001fb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00202	59		 pop	 ecx
  00203	5f		 pop	 edi
  00204	5e		 pop	 esi
  00205	5d		 pop	 ebp
  00206	5b		 pop	 ebx
  00207	83 c4 50	 add	 esp, 80			; 00000050H
  0020a	c2 10 00	 ret	 16			; 00000010H
$LN271@Insert@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T198959[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 ac	 lea	 eax, DWORD PTR [edx-84]
  0000f	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert
PUBLIC	??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z
_TEXT	SEGMENT
$T199564 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$199567 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	51		 push	 ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Cat$199567[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T199564[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T199564[esp+4]
  0000c	50		 push	 eax
  0000d	8b 44 24 14	 mov	 eax, DWORD PTR __Ptr$[esp+4]
  00011	52		 push	 edx
  00012	8b 54 24 10	 mov	 edx, DWORD PTR __First$[esp+8]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4c 24 18	 mov	 ecx, DWORD PTR __Last$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 1142 : 		}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@std@@@Z
_TEXT	SEGMENT
$T199584 = -4						; size = 1
__Cat$199588 = -4					; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

  00000	51		 push	 ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

  00001	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T199584[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T199584[esp+4]
  0000c	8b 0c 24	 mov	 ecx, DWORD PTR __Cat$199588[esp+4]
  0000f	50		 push	 eax
  00010	8b 44 24 14	 mov	 eax, DWORD PTR __Val$[esp+4]
  00014	51		 push	 ecx
  00015	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00019	52		 push	 edx
  0001a	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >

; 943  : 	}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c3		 ret	 0
??$unchecked_uninitialized_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<HostDevice *,HostDevice *,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked_uninitialized_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z
_TEXT	SEGMENT
$T199670 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$199673 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<HostDevice *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$199673[esp]
  00005	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T199670[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T199670[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 865  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$_Unchecked_uninitialized_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<HostDevice *,HostDevice *,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??_C@_0BC@HCJJOEDJ@HELP_READER_ERROR?$AA@	; `string'
PUBLIC	_OpenPageHelp
;	COMDAT ??_C@_0BC@HCJJOEDJ@HELP_READER_ERROR?$AA@
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
CONST	SEGMENT
??_C@_0BC@HCJJOEDJ@HELP_READER_ERROR?$AA@ DB 'HELP_READER_ERROR', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _OpenPageHelp
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_nPage$ = 12						; size = 4
_OpenPageHelp PROC					; COMDAT

; 7214 : {

  00000	56		 push	 esi

; 7215 : 	int r = (int)ShellExecute (NULL, "open", szHelpFile, NULL, NULL, SW_SHOWNORMAL);

  00001	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__ShellExecuteA@24
  00007	6a 01		 push	 1
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	68 00 00 00 00	 push	 OFFSET _szHelpFile
  00012	68 00 00 00 00	 push	 OFFSET ??_C@_04PMOCAHAA@open?$AA@
  00017	6a 00		 push	 0
  00019	ff d6		 call	 esi

; 7216 : 
; 7217 : 	if (r == ERROR_FILE_NOT_FOUND)

  0001b	83 f8 02	 cmp	 eax, 2
  0001e	75 19		 jne	 SHORT $LN3@OpenPageHe

; 7218 : 	{
; 7219 : 		// Try the secondary help file
; 7220 : 		r = (int)ShellExecute (NULL, "open", szHelpFile2, NULL, NULL, SW_SHOWNORMAL);

  00020	6a 01		 push	 1
  00022	6a 00		 push	 0
  00024	6a 00		 push	 0
  00026	68 00 00 00 00	 push	 OFFSET _szHelpFile2
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_04PMOCAHAA@open?$AA@
  00030	6a 00		 push	 0
  00032	ff d6		 call	 esi

; 7221 : 
; 7222 : 		if (r == ERROR_FILE_NOT_FOUND)

  00034	83 f8 02	 cmp	 eax, 2

; 7223 : 		{
; 7224 : 			OpenOnlineHelp ();
; 7225 : 			return;

  00037	74 17		 je	 SHORT $LN11@OpenPageHe
$LN3@OpenPageHe:

; 7226 : 		}
; 7227 : 	}
; 7228 : 
; 7229 : 	if (r == SE_ERR_NOASSOC)

  00039	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003c	75 26		 jne	 SHORT $LN9@OpenPageHe

; 7230 : 	{
; 7231 : 		if (AskYesNo ("HELP_READER_ERROR") == IDYES)

  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HCJJOEDJ@HELP_READER_ERROR?$AA@
  00043	e8 00 00 00 00	 call	 _AskYesNo
  00048	83 c4 04	 add	 esp, 4
  0004b	83 f8 06	 cmp	 eax, 6
  0004e	75 14		 jne	 SHORT $LN9@OpenPageHe
$LN11@OpenPageHe:

; 7232 : 			OpenOnlineHelp ();

  00050	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00055	6a 01		 push	 1
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_04PCJFHION@help?$AA@
  0005c	e8 00 00 00 00	 call	 _Applink
  00061	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@OpenPageHe:
  00064	5e		 pop	 esi

; 7233 : 	}
; 7234 : }

  00065	c3		 ret	 0
_OpenPageHelp ENDP
_TEXT	ENDS
PUBLIC	??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
$T199740 = 8						; size = 1
__Cat$199745 = 8					; size = 1
$T199742 = 8						; size = 1
__Right$ = 8						; size = 4
??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

  00000	56		 push	 esi
  00001	57		 push	 edi

; 564  : 		if (this != &_Right)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	3b f7		 cmp	 esi, edi
  0000a	0f 84 53 01 00
	00		 je	 $LN47@operator@40

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

  00010	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c8		 sub	 ecx, eax
  00018	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0001d	f7 e9		 imul	 ecx
  0001f	55		 push	 ebp
  00020	c1 fa 06	 sar	 edx, 6
  00023	8b ea		 mov	 ebp, edx
  00025	c1 ed 1f	 shr	 ebp, 31			; 0000001fH
  00028	03 ea		 add	 ebp, edx
  0002a	75 0f		 jne	 SHORT $LN8@operator@40

; 572  : 				clear();	// new sequence empty, erase existing sequence

  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::clear
  00033	5d		 pop	 ebp
  00034	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  00035	8b c6		 mov	 eax, esi
  00037	5e		 pop	 esi

; 599  : 		}

  00038	c2 04 00	 ret	 4
$LN8@operator@40:

; 573  : 			else if (_Right.size() <= size())

  0003b	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0003e	53		 push	 ebx
  0003f	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00042	2b cb		 sub	 ecx, ebx
  00044	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00049	f7 e9		 imul	 ecx
  0004b	c1 fa 06	 sar	 edx, 6
  0004e	8b ca		 mov	 ecx, edx
  00050	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00053	03 ca		 add	 ecx, edx
  00055	3b e9		 cmp	 ebp, ecx
  00057	77 5d		 ja	 SHORT $LN6@operator@40

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

  00059	c6 44 24 14 00	 mov	 BYTE PTR $T199740[esp+12], 0
  0005e	8b 44 24 14	 mov	 eax, DWORD PTR $T199740[esp+12]
  00062	8b 4c 24 14	 mov	 ecx, DWORD PTR __Cat$199745[esp+12]
  00066	8b 54 24 14	 mov	 edx, DWORD PTR $T199742[esp+12]
  0006a	50		 push	 eax
  0006b	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0006e	51		 push	 ecx
  0006f	52		 push	 edx
  00070	53		 push	 ebx
  00071	50		 push	 eax
  00072	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *>

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

  0007b	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0007e	83 c4 18	 add	 esp, 24			; 00000018H
  00081	51		 push	 ecx
  00082	50		 push	 eax
  00083	8b ce		 mov	 ecx, esi
  00085	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

  0008a	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0008d	2b 4f 0c	 sub	 ecx, DWORD PTR [edi+12]
  00090	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00095	f7 e9		 imul	 ecx
  00097	c1 fa 06	 sar	 edx, 6
  0009a	8b c2		 mov	 eax, edx
  0009c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0009f	03 c2		 add	 eax, edx
  000a1	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  000a7	03 46 0c	 add	 eax, DWORD PTR [esi+12]
  000aa	5b		 pop	 ebx
  000ab	5d		 pop	 ebp

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

  000ac	89 46 10	 mov	 DWORD PTR [esi+16], eax
  000af	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  000b0	8b c6		 mov	 eax, esi
  000b2	5e		 pop	 esi

; 599  : 		}

  000b3	c2 04 00	 ret	 4
$LN6@operator@40:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

  000b6	85 db		 test	 ebx, ebx
  000b8	75 04		 jne	 SHORT $LN38@operator@40
  000ba	33 c0		 xor	 eax, eax
  000bc	eb 16		 jmp	 SHORT $LN39@operator@40
$LN38@operator@40:
  000be	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000c1	2b d3		 sub	 edx, ebx
  000c3	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  000c8	f7 ea		 imul	 edx
  000ca	c1 fa 06	 sar	 edx, 6
  000cd	8b c2		 mov	 eax, edx
  000cf	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000d2	03 c2		 add	 eax, edx
$LN39@operator@40:
  000d4	3b e8		 cmp	 ebp, eax
  000d6	77 34		 ja	 SHORT $LN4@operator@40

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

  000d8	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000db	69 c9 88 00 00
	00		 imul	 ecx, 136		; 00000088H
  000e1	03 c8		 add	 ecx, eax
  000e3	8b e9		 mov	 ebp, ecx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

  000e5	53		 push	 ebx
  000e6	55		 push	 ebp
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 ??$unchecked_copy@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ; stdext::unchecked_copy<HostDevice *,HostDevice *>

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

  000ed	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000f0	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  000f3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f6	51		 push	 ecx
  000f7	52		 push	 edx
  000f8	55		 push	 ebp
  000f9	8b ce		 mov	 ecx, esi
  000fb	e8 00 00 00 00	 call	 ??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>
  00100	5b		 pop	 ebx
  00101	5d		 pop	 ebp
  00102	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00105	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  00106	8b c6		 mov	 eax, esi
  00108	5e		 pop	 esi

; 599  : 		}

  00109	c2 04 00	 ret	 4
$LN4@operator@40:

; 585  : 				}
; 586  : 			else
; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

  0010c	85 db		 test	 ebx, ebx
  0010e	74 18		 je	 SHORT $LN42@operator@40

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

  00110	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00113	50		 push	 eax
  00114	53		 push	 ebx
  00115	8b ce		 mov	 ecx, esi
  00117	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0011c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00125	83 c4 04	 add	 esp, 4
$LN42@operator@40:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

  00128	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0012b	2b 4f 0c	 sub	 ecx, DWORD PTR [edi+12]
  0012e	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00133	f7 e9		 imul	 ecx
  00135	c1 fa 06	 sar	 edx, 6
  00138	8b c2		 mov	 eax, edx
  0013a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0013d	03 c2		 add	 eax, edx
  0013f	50		 push	 eax
  00140	8b ce		 mov	 ecx, esi
  00142	e8 00 00 00 00	 call	 ?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Buy
  00147	84 c0		 test	 al, al
  00149	74 16		 je	 SHORT $LN46@operator@40

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

  0014b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0014e	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  00151	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00154	51		 push	 ecx
  00155	52		 push	 edx
  00156	50		 push	 eax
  00157	8b ce		 mov	 ecx, esi
  00159	e8 00 00 00 00	 call	 ??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>
  0015e	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN46@operator@40:
  00161	5b		 pop	 ebx
  00162	5d		 pop	 ebp
$LN47@operator@40:
  00163	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  00164	8b c6		 mov	 eax, esi
  00166	5e		 pop	 esi

; 599  : 		}

  00167	c2 04 00	 ret	 4
??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ufill
; Function compile flags: /Ogtpy
;	COMDAT ?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z
_TEXT	SEGMENT
$T199806 = -4						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Cat$199810 = 16					; size = 1
__Val$ = 16						; size = 4
?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

  00000	51		 push	 ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Cat$199810[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __Count$[esp+4]
  0000a	57		 push	 edi
  0000b	8b 7c 24 10	 mov	 edi, DWORD PTR __Ptr$[esp+8]
  0000f	c6 44 24 08 00	 mov	 BYTE PTR $T199806[esp+12], 0
  00014	8b 44 24 08	 mov	 eax, DWORD PTR $T199806[esp+12]
  00018	50		 push	 eax
  00019	8b 44 24 1c	 mov	 eax, DWORD PTR __Val$[esp+12]
  0001d	52		 push	 edx
  0001e	83 c1 08	 add	 ecx, 8
  00021	51		 push	 ecx
  00022	50		 push	 eax
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >

; 1255 : 		return (_Ptr + _Count);

  0002a	8b c6		 mov	 eax, esi
  0002c	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  00032	83 c4 18	 add	 esp, 24			; 00000018H
  00035	03 c7		 add	 eax, edi
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi

; 1256 : 		}

  00039	59		 pop	 ecx
  0003a	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ufill
_TEXT	ENDS
PUBLIC	?insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::insert
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z
_TEXT	SEGMENT
__Addleft$ = -12					; size = 1
$T199822 = -8						; size = 8
$T199820 = -8						; size = 8
__Where$146086 = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
?insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::insert, COMDAT
; _this$ = ecx

; 630  : 		{	// try to insert node with value _Val

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00003	53		 push	 ebx

; 631  : 		_Nodeptr _Trynode = _Root();
; 632  : 		_Nodeptr _Wherenode = _Myhead;
; 633  : 		bool _Addleft = true;	// add to left of head if tree empty
; 634  : 		while (!_Isnil(_Trynode))

  00004	8b 5c 24 18	 mov	 ebx, DWORD PTR __Val$[esp+12]
  00008	55		 push	 ebp
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
  00010	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00013	80 b8 a1 00 00
	00 00		 cmp	 BYTE PTR [eax+161], 0
  0001a	b1 01		 mov	 cl, 1
  0001c	88 4c 24 10	 mov	 BYTE PTR __Addleft$[esp+28], cl
  00020	75 22		 jne	 SHORT $LN9@insert@5
  00022	8b 13		 mov	 edx, DWORD PTR [ebx]
$LL10@insert@5:

; 635  : 			{	// look for leaf to insert before (_Addleft) or after
; 636  : 			_Wherenode = _Trynode;
; 637  : 			_Addleft = _DEBUG_LT_PRED(this->comp,

  00024	3b 50 10	 cmp	 edx, DWORD PTR [eax+16]
  00027	8b f0		 mov	 esi, eax
  00029	0f 9c c1	 setl	 cl
  0002c	88 4c 24 10	 mov	 BYTE PTR __Addleft$[esp+28], cl

; 638  : 				this->_Kfn(_Val), _Key(_Trynode));
; 639  : 			_Trynode = _Addleft ? _Left(_Trynode) : _Right(_Trynode);

  00030	84 c9		 test	 cl, cl
  00032	74 04		 je	 SHORT $LN13@insert@5
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	eb 03		 jmp	 SHORT $LN14@insert@5
$LN13@insert@5:
  00038	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$LN14@insert@5:

; 631  : 		_Nodeptr _Trynode = _Root();
; 632  : 		_Nodeptr _Wherenode = _Myhead;
; 633  : 		bool _Addleft = true;	// add to left of head if tree empty
; 634  : 		while (!_Isnil(_Trynode))

  0003b	80 b8 a1 00 00
	00 00		 cmp	 BYTE PTR [eax+161], 0
  00042	74 e0		 je	 SHORT $LL10@insert@5
$LN9@insert@5:

; 640  : 			}
; 641  : 
; 642  : 		if (this->_Multi)
; 643  : 			return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));
; 644  : 		else
; 645  : 			{	// insert only if unique
; 646  : 			iterator _Where = _TREE_ITERATOR(_Wherenode);

  00044	8b 17		 mov	 edx, DWORD PTR [edi]
  00046	8b ee		 mov	 ebp, esi
  00048	89 6c 24 18	 mov	 DWORD PTR __Where$146086[esp+32], ebp
  0004c	89 54 24 14	 mov	 DWORD PTR __Where$146086[esp+28], edx

; 647  : 			if (!_Addleft)

  00050	84 c9		 test	 cl, cl
  00052	74 51		 je	 SHORT $LN90@insert@5

; 648  : 				;	// need to test if insert after is okay
; 649  : 			else if (_Where == begin())

  00054	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00057	8b 28		 mov	 ebp, DWORD PTR [eax]
  00059	85 d2		 test	 edx, edx
  0005b	74 04		 je	 SHORT $LN78@insert@5
  0005d	3b d2		 cmp	 edx, edx
  0005f	74 05		 je	 SHORT $LN77@insert@5
$LN78@insert@5:
  00061	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN77@insert@5:

; 650  : 				return (_Pairib(_Insert(true, _Wherenode, _Val), true));

  00066	8d 4c 24 14	 lea	 ecx, DWORD PTR $T199820[esp+28]
  0006a	3b f5		 cmp	 esi, ebp
  0006c	75 2a		 jne	 SHORT $LN4@insert@5
  0006e	53		 push	 ebx
  0006f	56		 push	 esi
  00070	6a 01		 push	 1
  00072	51		 push	 ecx
  00073	8b cf		 mov	 ecx, edi
  00075	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert
  0007a	5f		 pop	 edi
  0007b	8b c8		 mov	 ecx, eax
  0007d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007f	8b 44 24 1c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+20]
  00083	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00086	5e		 pop	 esi
  00087	5d		 pop	 ebp
  00088	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0008b	c6 40 08 01	 mov	 BYTE PTR [eax+8], 1

; 657  : 			else
; 658  : 				return (_Pairib(_Where, false));

  0008f	89 10		 mov	 DWORD PTR [eax], edx
  00091	5b		 pop	 ebx

; 659  : 			}
; 660  : 		}

  00092	83 c4 0c	 add	 esp, 12			; 0000000cH
  00095	c2 08 00	 ret	 8
$LN4@insert@5:

; 651  : 			else
; 652  : 				--_Where;	// need to test if insert before is okay

  00098	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::_Dec
  0009d	8b 6c 24 18	 mov	 ebp, DWORD PTR __Where$146086[esp+32]
  000a1	8b 54 24 14	 mov	 edx, DWORD PTR __Where$146086[esp+28]
$LN90@insert@5:

; 653  : 
; 654  : 			if (_DEBUG_LT_PRED(this->comp,

  000a5	8b 45 10	 mov	 eax, DWORD PTR [ebp+16]
  000a8	3b 03		 cmp	 eax, DWORD PTR [ebx]
  000aa	7d 31		 jge	 SHORT $LN2@insert@5

; 655  : 				_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 656  : 				return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));

  000ac	8b 4c 24 10	 mov	 ecx, DWORD PTR __Addleft$[esp+28]
  000b0	53		 push	 ebx
  000b1	56		 push	 esi
  000b2	51		 push	 ecx
  000b3	8d 54 24 20	 lea	 edx, DWORD PTR $T199822[esp+40]
  000b7	52		 push	 edx
  000b8	8b cf		 mov	 ecx, edi
  000ba	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert
  000bf	5f		 pop	 edi
  000c0	8b c8		 mov	 ecx, eax
  000c2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c4	8b 44 24 1c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+20]
  000c8	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000cb	5e		 pop	 esi
  000cc	5d		 pop	 ebp
  000cd	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000d0	c6 40 08 01	 mov	 BYTE PTR [eax+8], 1

; 657  : 			else
; 658  : 				return (_Pairib(_Where, false));

  000d4	89 10		 mov	 DWORD PTR [eax], edx
  000d6	5b		 pop	 ebx

; 659  : 			}
; 660  : 		}

  000d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000da	c2 08 00	 ret	 8
$LN2@insert@5:

; 657  : 			else
; 658  : 				return (_Pairib(_Where, false));

  000dd	8b 44 24 20	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+24]
  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	89 68 04	 mov	 DWORD PTR [eax+4], ebp
  000e6	5d		 pop	 ebp
  000e7	c6 40 08 00	 mov	 BYTE PTR [eax+8], 0
  000eb	89 10		 mov	 DWORD PTR [eax], edx
  000ed	5b		 pop	 ebx

; 659  : 			}
; 660  : 		}

  000ee	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f1	c2 08 00	 ret	 8
?insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::insert
_TEXT	ENDS
PUBLIC	??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Umove<HostDevice *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z
_TEXT	SEGMENT
$T200176 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$200180 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Umove<HostDevice *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	51		 push	 ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Cat$200180[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T200176[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T200176[esp+4]
  0000c	50		 push	 eax
  0000d	8b 44 24 14	 mov	 eax, DWORD PTR __Ptr$[esp+4]
  00011	52		 push	 edx
  00012	8b 54 24 10	 mov	 edx, DWORD PTR __First$[esp+8]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4c 24 18	 mov	 ecx, DWORD PTR __Last$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 1149 : 		}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Umove<HostDevice *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4HostDevice@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4HostDevice@@QAEAAU0@ABU0@@Z PROC			; HostDevice::operator=, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
  00004	8b 7c 24 0c	 mov	 edi, DWORD PTR ___that$[esp+4]
  00008	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  0000b	88 06		 mov	 BYTE PTR [esi], al
  0000d	0f b6 4f 01	 movzx	 ecx, BYTE PTR [edi+1]
  00011	88 4e 01	 mov	 BYTE PTR [esi+1], cl
  00014	0f b6 57 02	 movzx	 edx, BYTE PTR [edi+2]
  00018	88 56 02	 mov	 BYTE PTR [esi+2], dl
  0001b	0f b6 47 03	 movzx	 eax, BYTE PTR [edi+3]
  0001f	88 46 03	 mov	 BYTE PTR [esi+3], al
  00022	0f b6 4f 04	 movzx	 ecx, BYTE PTR [edi+4]
  00026	88 4e 04	 mov	 BYTE PTR [esi+4], cl
  00029	0f b6 57 05	 movzx	 edx, BYTE PTR [edi+5]
  0002d	6a ff		 push	 -1
  0002f	88 56 05	 mov	 BYTE PTR [esi+5], dl
  00032	0f b6 47 06	 movzx	 eax, BYTE PTR [edi+6]
  00036	6a 00		 push	 0
  00038	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0003b	51		 push	 ecx
  0003c	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0003f	88 46 06	 mov	 BYTE PTR [esi+6], al
  00042	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00047	6a ff		 push	 -1
  00049	6a 00		 push	 0
  0004b	8d 57 24	 lea	 edx, DWORD PTR [edi+36]
  0004e	52		 push	 edx
  0004f	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00052	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00057	6a ff		 push	 -1
  00059	6a 00		 push	 0
  0005b	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  0005e	50		 push	 eax
  0005f	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00062	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00067	0f b6 4f 5c	 movzx	 ecx, BYTE PTR [edi+92]
  0006b	88 4e 5c	 mov	 BYTE PTR [esi+92], cl
  0006e	8b 57 60	 mov	 edx, DWORD PTR [edi+96]
  00071	89 56 60	 mov	 DWORD PTR [esi+96], edx
  00074	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
  00077	89 46 64	 mov	 DWORD PTR [esi+100], eax
  0007a	8b 4f 68	 mov	 ecx, DWORD PTR [edi+104]
  0007d	89 4e 68	 mov	 DWORD PTR [esi+104], ecx
  00080	83 c7 6c	 add	 edi, 108		; 0000006cH
  00083	57		 push	 edi
  00084	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  00087	e8 00 00 00 00	 call	 ??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=
  0008c	5f		 pop	 edi
  0008d	8b c6		 mov	 eax, esi
  0008f	5e		 pop	 esi
  00090	c2 04 00	 ret	 4
??4HostDevice@@QAEAAU0@ABU0@@Z ENDP			; HostDevice::operator=
_TEXT	ENDS
PUBLIC	?insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBHUHostDevice@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::insert
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBHUHostDevice@@@2@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 8
$T200231 = -12						; size = 12
$T200230 = -12						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
__Val$ = 20						; size = 4
?insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBHUHostDevice@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::insert, COMDAT
; _this$ = ecx

; 664  : 		{	// try to insert node with value _Val using _Where as a hint

  00000	83 ec 14	 sub	 esp, 20			; 00000014H
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 665  : 
; 666  :  #if _HAS_ITERATOR_DEBUGGING
; 667  : 		if (_Where._Mycont != this)
; 668  : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 669  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 670  : 
; 671  : 		const_iterator _Next;
; 672  : 
; 673  : 		if (size() == 0)

  00006	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  0000a	57		 push	 edi
  0000b	75 21		 jne	 SHORT $LN32@insert@6

; 674  : 			return (_Insert(true, _Myhead, _Val));	// insert into empty tree

  0000d	8b 44 24 2c	 mov	 eax, DWORD PTR __Val$[esp+24]
  00011	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00014	8b 7c 24 20	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+24]
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	6a 01		 push	 1
  0001c	57		 push	 edi
  0001d	8b ce		 mov	 ecx, esi
  0001f	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert
  00024	8b c7		 mov	 eax, edi
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 749  : 		}

  00028	83 c4 14	 add	 esp, 20			; 00000014H
  0002b	c2 10 00	 ret	 16			; 00000010H
$LN32@insert@6:

; 675  : 		else if (this->_Multi)
; 676  : 			{	// insert even if duplicate
; 677  : 			if (_Where == begin())
; 678  : 				{	// insert at beginning if before first element
; 679  : 				if (!_DEBUG_LT_PRED(this->comp,
; 680  : 					_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 681  : 					return (_Insert(true, _Where._Mynode(), _Val));
; 682  : 				}
; 683  : 			else if (_Where == end())
; 684  : 				{	// insert at end if after last element
; 685  : 				if (!_DEBUG_LT_PRED(this->comp,
; 686  : 					this->_Kfn(_Val), _Key(_Rmost())))
; 687  : 					return (_Insert(false, _Rmost(), _Val));
; 688  : 				}
; 689  : 			else if (!_DEBUG_LT_PRED(this->comp,
; 690  : 				_Key(_Where._Mynode()), this->_Kfn(_Val))
; 691  : 				&& !_DEBUG_LT_PRED(this->comp,
; 692  : 					this->_Kfn(_Val), _Key((--(_Next = _Where))._Mynode())))
; 693  : 				{	// insert before _Where
; 694  : 				if (_Isnil(_Right(_Next._Mynode())))
; 695  : 					return (_Insert(false, _Next._Mynode(), _Val));
; 696  : 				else
; 697  : 					return (_Insert(true, _Where._Mynode(), _Val));
; 698  : 				}
; 699  : 			else if (!_DEBUG_LT_PRED(this->comp,
; 700  : 				this->_Kfn(_Val), _Key(_Where._Mynode()))
; 701  : 				&& (++(_Next = _Where) == end()
; 702  : 					|| !_DEBUG_LT_PRED(this->comp,
; 703  : 						_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 704  : 				{	// insert after _Where
; 705  : 				if (_Isnil(_Right(_Where._Mynode())))
; 706  : 					return (_Insert(false, _Where._Mynode(), _Val));
; 707  : 				else
; 708  : 					return (_Insert(true, _Next._Mynode(), _Val));
; 709  : 				}
; 710  : 			}
; 711  : 		else
; 712  : 			{	// insert only if unique
; 713  : 			if (_Where == begin())

  0002e	8b 4c 24 24	 mov	 ecx, DWORD PTR __Where$[esp+24]
  00032	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00035	8b 3a		 mov	 edi, DWORD PTR [edx]
  00037	8b 06		 mov	 eax, DWORD PTR [esi]
  00039	85 c9		 test	 ecx, ecx
  0003b	74 04		 je	 SHORT $LN254@insert@6
  0003d	3b c8		 cmp	 ecx, eax
  0003f	74 09		 je	 SHORT $LN253@insert@6
$LN254@insert@6:
  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00046	8b 4c 24 24	 mov	 ecx, DWORD PTR __Where$[esp+24]
$LN253@insert@6:
  0004a	8b 44 24 28	 mov	 eax, DWORD PTR __Where$[esp+28]
  0004e	3b c7		 cmp	 eax, edi
  00050	75 29		 jne	 SHORT $LN14@insert@6

; 714  : 				{	// insert at beginning if before first element
; 715  : 				if (_DEBUG_LT_PRED(this->comp,

  00052	8b 7c 24 2c	 mov	 edi, DWORD PTR __Val$[esp+24]
  00056	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00058	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0005b	0f 8d 4e 01 00
	00		 jge	 $LN1@insert@6

; 716  : 					this->_Kfn(_Val), _Key(_Where._Mynode())))
; 717  : 					return (_Insert(true, _Where._Mynode(), _Val));

  00061	57		 push	 edi
  00062	8b 7c 24 24	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+28]
  00066	50		 push	 eax
  00067	6a 01		 push	 1
  00069	57		 push	 edi
  0006a	8b ce		 mov	 ecx, esi
  0006c	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert
  00071	8b c7		 mov	 eax, edi
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi

; 749  : 		}

  00075	83 c4 14	 add	 esp, 20			; 00000014H
  00078	c2 10 00	 ret	 16			; 00000010H
$LN14@insert@6:

; 718  : 				}
; 719  : 			else if (_Where == end())

  0007b	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0007e	8b 16		 mov	 edx, DWORD PTR [esi]
  00080	85 c9		 test	 ecx, ecx
  00082	74 04		 je	 SHORT $LN297@insert@6
  00084	3b ca		 cmp	 ecx, edx
  00086	74 0d		 je	 SHORT $LN296@insert@6
$LN297@insert@6:
  00088	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0008d	8b 44 24 28	 mov	 eax, DWORD PTR __Where$[esp+28]
  00091	8b 4c 24 24	 mov	 ecx, DWORD PTR __Where$[esp+24]
$LN296@insert@6:
  00095	3b c7		 cmp	 eax, edi

; 720  : 				{	// insert at end if after last element
; 721  : 				if (_DEBUG_LT_PRED(this->comp,

  00097	8b 7c 24 2c	 mov	 edi, DWORD PTR __Val$[esp+24]
  0009b	75 2b		 jne	 SHORT $LN11@insert@6
  0009d	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  000a0	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000a3	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000a6	3b 0f		 cmp	 ecx, DWORD PTR [edi]
  000a8	0f 8d 01 01 00
	00		 jge	 $LN1@insert@6

; 722  : 					_Key(_Rmost()), this->_Kfn(_Val)))
; 723  : 					return (_Insert(false, _Rmost(), _Val));

  000ae	57		 push	 edi
  000af	8b 7c 24 24	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+28]
  000b3	50		 push	 eax
  000b4	6a 00		 push	 0
  000b6	57		 push	 edi
  000b7	8b ce		 mov	 ecx, esi
  000b9	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert
  000be	8b c7		 mov	 eax, edi
  000c0	5f		 pop	 edi
  000c1	5e		 pop	 esi

; 749  : 		}

  000c2	83 c4 14	 add	 esp, 20			; 00000014H
  000c5	c2 10 00	 ret	 16			; 00000010H
$LN11@insert@6:

; 724  : 				}
; 725  : 			else if (_DEBUG_LT_PRED(this->comp,
; 726  : 				this->_Kfn(_Val), _Key(_Where._Mynode()))
; 727  : 				&& _DEBUG_LT_PRED(this->comp,

  000c8	8b 17		 mov	 edx, DWORD PTR [edi]
  000ca	39 50 10	 cmp	 DWORD PTR [eax+16], edx
  000cd	7e 64		 jle	 SHORT $LN414@insert@6
  000cf	89 4c 24 08	 mov	 DWORD PTR __Next$[esp+28], ecx
  000d3	8d 4c 24 08	 lea	 ecx, DWORD PTR __Next$[esp+28]
  000d7	89 44 24 0c	 mov	 DWORD PTR __Next$[esp+32], eax
  000db	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::_Dec
  000e0	8b 17		 mov	 edx, DWORD PTR [edi]
  000e2	8b 44 24 0c	 mov	 eax, DWORD PTR __Next$[esp+32]
  000e6	39 50 10	 cmp	 DWORD PTR [eax+16], edx
  000e9	7d 3d		 jge	 SHORT $LN413@insert@6

; 728  : 					_Key((--(_Next = _Where))._Mynode()), this->_Kfn(_Val)))
; 729  : 				{	// insert before _Where
; 730  : 				if (_Isnil(_Right(_Next._Mynode())))

  000eb	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000ee	80 ba a1 00 00
	00 00		 cmp	 BYTE PTR [edx+161], 0

; 731  : 					return (_Insert(false, _Next._Mynode(), _Val));

  000f5	57		 push	 edi
  000f6	8b 7c 24 24	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+28]
  000fa	8b ce		 mov	 ecx, esi
  000fc	74 13		 je	 SHORT $LN7@insert@6
  000fe	50		 push	 eax
  000ff	6a 00		 push	 0
  00101	57		 push	 edi
  00102	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert
  00107	8b c7		 mov	 eax, edi
  00109	5f		 pop	 edi
  0010a	5e		 pop	 esi

; 749  : 		}

  0010b	83 c4 14	 add	 esp, 20			; 00000014H
  0010e	c2 10 00	 ret	 16			; 00000010H
$LN7@insert@6:

; 732  : 				else
; 733  : 					return (_Insert(true, _Where._Mynode(), _Val));

  00111	8b 44 24 2c	 mov	 eax, DWORD PTR __Where$[esp+32]
  00115	50		 push	 eax
  00116	6a 01		 push	 1
  00118	57		 push	 edi
  00119	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert
  0011e	8b c7		 mov	 eax, edi
  00120	5f		 pop	 edi
  00121	5e		 pop	 esi

; 749  : 		}

  00122	83 c4 14	 add	 esp, 20			; 00000014H
  00125	c2 10 00	 ret	 16			; 00000010H
$LN413@insert@6:

; 732  : 				else
; 733  : 					return (_Insert(true, _Where._Mynode(), _Val));

  00128	8b 44 24 28	 mov	 eax, DWORD PTR __Where$[esp+28]
  0012c	8b 4c 24 24	 mov	 ecx, DWORD PTR __Where$[esp+24]

; 734  : 				}
; 735  : 			else if (_DEBUG_LT_PRED(this->comp,
; 736  : 				_Key(_Where._Mynode()), this->_Kfn(_Val))
; 737  : 				&& (++(_Next = _Where) == end()
; 738  : 					|| _DEBUG_LT_PRED(this->comp,

  00130	39 50 10	 cmp	 DWORD PTR [eax+16], edx
$LN414@insert@6:
  00133	7d 7a		 jge	 SHORT $LN1@insert@6
  00135	8b 16		 mov	 edx, DWORD PTR [esi]
  00137	89 4c 24 08	 mov	 DWORD PTR __Next$[esp+28], ecx
  0013b	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0013e	89 4c 24 14	 mov	 DWORD PTR $T200230[esp+32], ecx
  00142	8d 4c 24 08	 lea	 ecx, DWORD PTR __Next$[esp+28]
  00146	89 44 24 0c	 mov	 DWORD PTR __Next$[esp+32], eax
  0014a	89 54 24 10	 mov	 DWORD PTR $T200230[esp+28], edx
  0014e	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::_Inc
  00153	8d 44 24 10	 lea	 eax, DWORD PTR $T200230[esp+28]
  00157	50		 push	 eax
  00158	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Next$[esp+32]
  0015c	e8 00 00 00 00	 call	 ??8const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::operator==
  00161	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Next$[esp+32]
  00165	84 c0		 test	 al, al
  00167	75 07		 jne	 SHORT $LN3@insert@6
  00169	8b 17		 mov	 edx, DWORD PTR [edi]
  0016b	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  0016e	7d 3f		 jge	 SHORT $LN1@insert@6
$LN3@insert@6:

; 739  : 						this->_Kfn(_Val), _Key(_Next._Mynode()))))
; 740  : 				{	// insert after _Where
; 741  : 				if (_Isnil(_Right(_Where._Mynode())))

  00170	8b 44 24 28	 mov	 eax, DWORD PTR __Where$[esp+28]
  00174	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00177	80 ba a1 00 00
	00 00		 cmp	 BYTE PTR [edx+161], 0

; 742  : 					return (_Insert(false, _Where._Mynode(), _Val));

  0017e	57		 push	 edi
  0017f	8b 7c 24 24	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+28]
  00183	74 15		 je	 SHORT $LN2@insert@6
  00185	50		 push	 eax
  00186	6a 00		 push	 0
  00188	57		 push	 edi
  00189	8b ce		 mov	 ecx, esi
  0018b	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert
  00190	8b c7		 mov	 eax, edi
  00192	5f		 pop	 edi
  00193	5e		 pop	 esi

; 749  : 		}

  00194	83 c4 14	 add	 esp, 20			; 00000014H
  00197	c2 10 00	 ret	 16			; 00000010H
$LN2@insert@6:

; 743  : 				else
; 744  : 					return (_Insert(true, _Next._Mynode(), _Val));

  0019a	51		 push	 ecx
  0019b	6a 01		 push	 1
  0019d	57		 push	 edi
  0019e	8b ce		 mov	 ecx, esi
  001a0	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert
  001a5	8b c7		 mov	 eax, edi
  001a7	5f		 pop	 edi
  001a8	5e		 pop	 esi

; 749  : 		}

  001a9	83 c4 14	 add	 esp, 20			; 00000014H
  001ac	c2 10 00	 ret	 16			; 00000010H
$LN1@insert@6:

; 745  : 				}
; 746  : 			}
; 747  : 
; 748  : 		return (insert(_Val).first);	// try usual insert if all else fails

  001af	57		 push	 edi
  001b0	8d 44 24 14	 lea	 eax, DWORD PTR $T200231[esp+32]
  001b4	50		 push	 eax
  001b5	8b ce		 mov	 ecx, esi
  001b7	e8 00 00 00 00	 call	 ?insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBHUHostDevice@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::insert
  001bc	8b 10		 mov	 edx, DWORD PTR [eax]
  001be	8b 4c 24 20	 mov	 ecx, DWORD PTR ___$ReturnUdt$[esp+24]
  001c2	89 11		 mov	 DWORD PTR [ecx], edx
  001c4	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001c7	5f		 pop	 edi
  001c8	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  001cb	8b c1		 mov	 eax, ecx
  001cd	5e		 pop	 esi

; 749  : 		}

  001ce	83 c4 14	 add	 esp, 20			; 00000014H
  001d1	c2 10 00	 ret	 16			; 00000010H
?insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBHUHostDevice@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::insert
_TEXT	ENDS
PUBLIC	??$_Fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ; std::_Fill<HostDevice *,HostDevice>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z PROC ; std::_Fill<HostDevice *,HostDevice>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

  00000	56		 push	 esi

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 18		 je	 SHORT $LN1@Fill
  0000e	53		 push	 ebx
  0000f	8b 5c 24 18	 mov	 ebx, DWORD PTR __Val$[esp+8]
$LL3@Fill:

; 3159 : 		*_First = _Val;

  00013	53		 push	 ebx
  00014	8b ce		 mov	 ecx, esi
  00016	e8 00 00 00 00	 call	 ??4HostDevice@@QAEAAU0@ABU0@@Z
  0001b	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00021	3b f7		 cmp	 esi, edi
  00023	75 ee		 jne	 SHORT $LL3@Fill
  00025	5b		 pop	 ebx
$LN1@Fill:
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 3160 : 	}

  00028	c3		 ret	 0
??$_Fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ENDP ; std::_Fill<HostDevice *,HostDevice>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	53		 push	 ebx

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __First$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __Last$[esp+4]
  0000a	3b de		 cmp	 ebx, esi
  0000c	74 23		 je	 SHORT $LN7@Copy_backw
  0000e	57		 push	 edi
  0000f	8b 7c 24 18	 mov	 edi, DWORD PTR __Dest$[esp+8]
$LL2@Copy_backw:

; 2676 : 		*--_Dest = *--_Last;

  00013	81 ee 88 00 00
	00		 sub	 esi, 136		; 00000088H
  00019	81 ef 88 00 00
	00		 sub	 edi, 136		; 00000088H
  0001f	56		 push	 esi
  00020	8b cf		 mov	 ecx, edi
  00022	e8 00 00 00 00	 call	 ??4HostDevice@@QAEAAU0@ABU0@@Z
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL2@Copy_backw

; 2677 : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 2678 : 	}

  00030	c3		 ret	 0
$LN7@Copy_backw:

; 2677 : 	return (_Dest);

  00031	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 2678 : 	}

  00037	c3		 ret	 0
??$_Copy_backward_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??A?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAEAAUHostDevice@@ABH@Z ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::operator[]
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	SEGMENT
__unwindtable$??A?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAEAAUHostDevice@@ABH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAEAAUHostDevice@@ABH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??A?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAEAAUHostDevice@@ABH@Z$1
__ehfuncinfo$??A?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAEAAUHostDevice@@ABH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??A?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAEAAUHostDevice@@ABH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\map
xdata$x	ENDS
;	COMDAT ??A?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAEAAUHostDevice@@ABH@Z
_TEXT	SEGMENT
$T201187 = -308						; size = 8
$T201183 = -308						; size = 8
__Where$ = -300						; size = 8
$T201184 = -292						; size = 144
$T201185 = -148						; size = 136
__$EHRec$ = -12						; size = 12
__Keyval$ = 8						; size = 4
??A?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAEAAUHostDevice@@ABH@Z PROC ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::operator[], COMDAT
; _this$ = ecx

; 168  : 		{	// find element matching _Keyval or insert with default mapped

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??A?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAEAAUHostDevice@@ABH@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  00014	53		 push	 ebx
  00015	55		 push	 ebp
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c4		 xor	 eax, esp
  0001f	50		 push	 eax
  00020	8d 84 24 3c 01
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+328]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f1		 mov	 esi, ecx

; 169  : 		iterator _Where = this->lower_bound(_Keyval);

  0002f	8b 9c 24 4c 01
	00 00		 mov	 ebx, DWORD PTR __Keyval$[esp+324]
  00036	53		 push	 ebx
  00037	8d 44 24 20	 lea	 eax, DWORD PTR __Where$[esp+332]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?lower_bound@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABH@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::lower_bound

; 170  : 		if (_Where == this->end()
; 171  : 			|| this->comp(_Keyval, this->_Key(_Where._Mynode())))

  00041	8b 7c 24 1c	 mov	 edi, DWORD PTR __Where$[esp+328]
  00045	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00048	8b 06		 mov	 eax, DWORD PTR [esi]
  0004a	89 4c 24 18	 mov	 DWORD PTR $T201183[esp+332], ecx
  0004e	85 ff		 test	 edi, edi
  00050	74 04		 je	 SHORT $LN28@operator@41
  00052	3b f8		 cmp	 edi, eax
  00054	74 05		 je	 SHORT $LN27@operator@41
$LN28@operator@41:
  00056	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN27@operator@41:
  0005b	8b 6c 24 20	 mov	 ebp, DWORD PTR __Where$[esp+332]
  0005f	3b 6c 24 18	 cmp	 ebp, DWORD PTR $T201183[esp+332]
  00063	74 07		 je	 SHORT $LN1@operator@41
  00065	8b 13		 mov	 edx, DWORD PTR [ebx]
  00067	3b 55 10	 cmp	 edx, DWORD PTR [ebp+16]
  0006a	7d 6f		 jge	 SHORT $LN2@operator@41
$LN1@operator@41:

; 172  : 			_Where = this->insert(_Where,
; 173  : 				value_type(_Keyval, mapped_type()));

  0006c	8d 8c 24 b4 00
	00 00		 lea	 ecx, DWORD PTR $T201185[esp+328]
  00073	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@XZ	; HostDevice::HostDevice
  00078	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0007a	89 4c 24 24	 mov	 DWORD PTR $T201184[esp+328], ecx
  0007e	50		 push	 eax
  0007f	8d 4c 24 30	 lea	 ecx, DWORD PTR $T201184[esp+340]
  00083	c7 84 24 48 01
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+340], 0
  0008e	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
  00093	8d 54 24 24	 lea	 edx, DWORD PTR $T201184[esp+328]
  00097	52		 push	 edx
  00098	55		 push	 ebp
  00099	57		 push	 edi
  0009a	8d 44 24 20	 lea	 eax, DWORD PTR $T201187[esp+340]
  0009e	50		 push	 eax
  0009f	8b ce		 mov	 ecx, esi
  000a1	c6 84 24 54 01
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+352], 1
  000a9	e8 00 00 00 00	 call	 ?insert@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBHUHostDevice@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::insert
  000ae	8b 38		 mov	 edi, DWORD PTR [eax]
  000b0	8b 68 04	 mov	 ebp, DWORD PTR [eax+4]
  000b3	8d 4c 24 2c	 lea	 ecx, DWORD PTR $T201184[esp+336]
  000b7	c6 84 24 44 01
	00 00 00	 mov	 BYTE PTR __$EHRec$[esp+336], 0
  000bf	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  000c4	8d 8c 24 b4 00
	00 00		 lea	 ecx, DWORD PTR $T201185[esp+328]
  000cb	c7 84 24 44 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+336], -1
  000d6	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
$LN2@operator@41:

; 174  : 		return ((*_Where).second);

  000db	85 ff		 test	 edi, edi
  000dd	75 2e		 jne	 SHORT $LN74@operator@41
  000df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN69@operator@41:
  000e4	3b 6f 18	 cmp	 ebp, DWORD PTR [edi+24]
  000e7	75 05		 jne	 SHORT $LN75@operator@41
  000e9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN75@operator@41:
  000ee	8d 45 18	 lea	 eax, DWORD PTR [ebp+24]

; 175  : 		}

  000f1	8b 8c 24 3c 01
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+328]
  000f8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ff	59		 pop	 ecx
  00100	5f		 pop	 edi
  00101	5e		 pop	 esi
  00102	5d		 pop	 ebp
  00103	5b		 pop	 ebx
  00104	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  0010a	c2 04 00	 ret	 4
$LN74@operator@41:

; 174  : 		return ((*_Where).second);

  0010d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0010f	eb d3		 jmp	 SHORT $LN69@operator@41
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??A?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAEAAUHostDevice@@ABH@Z$0:
  00000	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR $T201185[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
__unwindfunclet$??A?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAEAAUHostDevice@@ABH@Z$1:
  0000b	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR $T201184[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBHUHostDevice@@@std@@QAE@XZ
__ehhandler$??A?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAEAAUHostDevice@@ABH@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 82 c8 fe ff
	ff		 lea	 eax, DWORD PTR [edx-312]
  00020	8b 8a c4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-316]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??A?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAEAAUHostDevice@@ABH@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??A?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAEAAUHostDevice@@ABH@Z ENDP ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::operator[]
PUBLIC	??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ; std::fill<HostDevice *,HostDevice>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z PROC ; std::fill<HostDevice *,HostDevice>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

  00000	56		 push	 esi

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 18		 je	 SHORT $LN11@fill
  0000e	53		 push	 ebx
  0000f	8b 5c 24 18	 mov	 ebx, DWORD PTR __Val$[esp+8]
$LL13@fill:
  00013	53		 push	 ebx
  00014	8b ce		 mov	 ecx, esi
  00016	e8 00 00 00 00	 call	 ??4HostDevice@@QAEAAU0@ABU0@@Z
  0001b	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00021	3b f7		 cmp	 esi, edi
  00023	75 ee		 jne	 SHORT $LL13@fill
  00025	5b		 pop	 ebx
$LN11@fill:
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 3188 : 	}

  00028	c3		 ret	 0
??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ENDP ; std::fill<HostDevice *,HostDevice>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T201410 = -8						; size = 1
$T201411 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
$T201412 = 16						; size = 1
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<HostDevice *,HostDevice *>, COMDAT

; 2685 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	83 ec 08	 sub	 esp, 8

; 2686 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2687 : 	_OutIt _Result = _Dest - (_Last - _First);
; 2688 : 	_Copy_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2689 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

  00003	8b 54 24 14	 mov	 edx, DWORD PTR $T201412[esp+4]
  00007	53		 push	 ebx
  00008	8b 5c 24 10	 mov	 ebx, DWORD PTR __First$[esp+8]
  0000c	56		 push	 esi
  0000d	8b 74 24 18	 mov	 esi, DWORD PTR __Last$[esp+12]
  00011	57		 push	 edi
  00012	8b 7c 24 20	 mov	 edi, DWORD PTR __Dest$[esp+16]
  00016	32 c0		 xor	 al, al
  00018	88 44 24 10	 mov	 BYTE PTR $T201411[esp+20], al
  0001c	8b 4c 24 10	 mov	 ecx, DWORD PTR $T201411[esp+20]
  00020	88 44 24 0c	 mov	 BYTE PTR $T201410[esp+20], al
  00024	8b 44 24 0c	 mov	 eax, DWORD PTR $T201410[esp+20]
  00028	50		 push	 eax
  00029	51		 push	 ecx
  0002a	52		 push	 edx
  0002b	57		 push	 edi
  0002c	56		 push	 esi
  0002d	53		 push	 ebx
  0002e	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
  00033	2b f3		 sub	 esi, ebx
  00035	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0003a	f7 ee		 imul	 esi
  0003c	c1 fa 06	 sar	 edx, 6
  0003f	8b c2		 mov	 eax, edx
  00041	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00044	03 c2		 add	 eax, edx
  00046	8b c8		 mov	 ecx, eax
  00048	69 c9 88 00 00
	00		 imul	 ecx, 136		; 00000088H
  0004e	83 c4 18	 add	 esp, 24			; 00000018H
  00051	8b c7		 mov	 eax, edi
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	2b c1		 sub	 eax, ecx
  00057	5b		 pop	 ebx

; 2690 : 	return _Result;
; 2691 : 	}

  00058	83 c4 08	 add	 esp, 8
  0005b	c3		 ret	 0
??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAUHostDevice@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<HostDevice *,HostDevice *,std::random_access_iterator_tag,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_backward_opt@PAUHostDevice@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T201424 = -4						; size = 1
__Cat$201428 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAUHostDevice@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<HostDevice *,HostDevice *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

  00000	51		 push	 ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

  00001	8b 54 24 14	 mov	 edx, DWORD PTR __First_dest_cat$[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T201424[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T201424[esp+4]
  0000c	8b 0c 24	 mov	 ecx, DWORD PTR __Cat$201428[esp+4]
  0000f	50		 push	 eax
  00010	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00014	51		 push	 ecx
  00015	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  00019	52		 push	 edx
  0001a	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<HostDevice *,HostDevice *>

; 2755 : 	}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c3		 ret	 0
??$_Move_backward_opt@PAUHostDevice@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<HostDevice *,HostDevice *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ; stdext::_Unchecked_move_backward<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked_move_backward@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z
_TEXT	SEGMENT
$T201472 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$201475 = 16					; size = 1
$T201434 = 16						; size = 1
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z PROC ; stdext::_Unchecked_move_backward<HostDevice *,HostDevice *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

  00000	51		 push	 ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$201475[esp]
  00005	8b 54 24 10	 mov	 edx, DWORD PTR $T201434[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T201472[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T201472[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<HostDevice *,HostDevice *>

; 3697 : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$_Unchecked_move_backward@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ENDP ; stdext::_Unchecked_move_backward<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__Val$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$2
__catchsym$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$0
__ehfuncinfo$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$6
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$7
__unwindtable$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$4
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z
_TEXT	SEGMENT
__Whereoff$145848 = -36					; size = 4
__Ncopied$145849 = -32					; size = 4
_this$GSCopy$ = -28					; size = 4
__Newvec$145847 = -24					; size = 4
tv592 = -20						; size = 4
$T201877 = -20						; size = 1
__Cat$201881 = -20					; size = 1
$T201709 = -20						; size = 1
__Cat$201712 = -20					; size = 1
__Val$GSCopy$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Tmp$145872 = 0					; size = 136
__Tmp$145862 = 136					; size = 136
__$ArrayPad$ = 272					; size = 4
__Where$ = 284						; size = 8
__Count$ = 292						; size = 4
__Val$ = 296						; size = 4
?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

  00000	55		 push	 ebp
  00001	8d ac 24 ec fe
	ff ff		 lea	 ebp, DWORD PTR [esp-276]
  00008	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	83 ec 18	 sub	 esp, 24			; 00000018H
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 85 10 01 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002c	53		 push	 ebx
  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1249 : 			}

  0003c	8b 85 28 01 00
	00		 mov	 eax, DWORD PTR __Val$[ebp]
  00042	8b f1		 mov	 esi, ecx
  00044	89 45 ec	 mov	 DWORD PTR __Val$GSCopy$[ebp], eax
  00047	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0004a	89 75 e4	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  0004d	85 c0		 test	 eax, eax
  0004f	75 04		 jne	 SHORT $LN31@Insert_n

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

  00051	33 db		 xor	 ebx, ebx
  00053	eb 16		 jmp	 SHORT $LN32@Insert_n
$LN31@Insert_n:
  00055	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00058	2b c8		 sub	 ecx, eax
  0005a	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0005f	f7 e9		 imul	 ecx
  00061	c1 fa 06	 sar	 edx, 6
  00064	8b da		 mov	 ebx, edx
  00066	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00069	03 da		 add	 ebx, edx
$LN32@Insert_n:

; 1162 : 
; 1163 : 		if (_Count == 0)

  0006b	8b bd 24 01 00
	00		 mov	 edi, DWORD PTR __Count$[ebp]
  00071	85 ff		 test	 edi, edi
  00073	0f 84 02 03 00
	00		 je	 $LN1@Insert_n

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

  00079	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0007c	8b d1		 mov	 edx, ecx
  0007e	2b 56 0c	 sub	 edx, DWORD PTR [esi+12]
  00081	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00086	f7 ea		 imul	 edx
  00088	c1 fa 06	 sar	 edx, 6
  0008b	8b c2		 mov	 eax, edx
  0008d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00090	03 c2		 add	 eax, edx
  00092	ba e1 e1 e1 01	 mov	 edx, 31580641		; 01e1e1e1H
  00097	2b d0		 sub	 edx, eax
  00099	3b d7		 cmp	 edx, edi
  0009b	73 05		 jae	 SHORT $LN12@Insert_n

; 1166 : 			_Xlen();	// result too long

  0009d	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen
$LN12@Insert_n:

; 1167 : 		else if (_Capacity < size() + _Count)

  000a2	8d 14 38	 lea	 edx, DWORD PTR [eax+edi]
  000a5	3b da		 cmp	 ebx, edx
  000a7	0f 83 86 01 00
	00		 jae	 $LN10@Insert_n

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  000ad	8b c3		 mov	 eax, ebx
  000af	d1 e8		 shr	 eax, 1
  000b1	b9 e1 e1 e1 01	 mov	 ecx, 31580641		; 01e1e1e1H
  000b6	2b c8		 sub	 ecx, eax
  000b8	3b cb		 cmp	 ecx, ebx
  000ba	73 04		 jae	 SHORT $LN17@Insert_n
  000bc	33 db		 xor	 ebx, ebx
  000be	eb 02		 jmp	 SHORT $LN18@Insert_n
$LN17@Insert_n:
  000c0	03 d8		 add	 ebx, eax
$LN18@Insert_n:

; 1171 : 			if (_Capacity < size() + _Count)

  000c2	3b da		 cmp	 ebx, edx
  000c4	73 02		 jae	 SHORT $LN9@Insert_n

; 1172 : 				_Capacity = size() + _Count;

  000c6	8b da		 mov	 ebx, edx
$LN9@Insert_n:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  000c8	6a 00		 push	 0
  000ca	53		 push	 ebx
  000cb	e8 00 00 00 00	 call	 ??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ; std::_Allocate<HostDevice>

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

  000d0	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  000d6	2b 56 0c	 sub	 edx, DWORD PTR [esi+12]
  000d9	8b c8		 mov	 ecx, eax
  000db	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  000e0	f7 ea		 imul	 edx
  000e2	c1 fa 06	 sar	 edx, 6
  000e5	8b c2		 mov	 eax, edx
  000e7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ea	03 c2		 add	 eax, edx
  000ec	89 45 dc	 mov	 DWORD PTR __Whereoff$145848[ebp], eax

; 1175 : 			int _Ncopied = 0;
; 1176 : 
; 1177 : 			_TRY_BEGIN
; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

  000ef	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  000f5	33 d2		 xor	 edx, edx
  000f7	83 c4 08	 add	 esp, 8
  000fa	89 55 e0	 mov	 DWORD PTR __Ncopied$145849[ebp], edx
  000fd	89 55 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edx
  00100	8b 55 ec	 mov	 edx, DWORD PTR __Val$GSCopy$[ebp]
  00103	52		 push	 edx
  00104	03 c1		 add	 eax, ecx
  00106	57		 push	 edi
  00107	89 4d e8	 mov	 DWORD PTR __Newvec$145847[ebp], ecx
  0010a	50		 push	 eax
  0010b	8b ce		 mov	 ecx, esi
  0010d	e8 00 00 00 00	 call	 ?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ufill

; 1179 : 			++_Ncopied;
; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

  00112	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00115	c6 45 ec 00	 mov	 BYTE PTR $T201709[ebp], 0
  00119	8b 55 ec	 mov	 edx, DWORD PTR $T201709[ebp]
  0011c	52		 push	 edx
  0011d	8b 55 ec	 mov	 edx, DWORD PTR __Cat$201712[ebp]
  00120	52		 push	 edx
  00121	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  00127	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0012a	51		 push	 ecx
  0012b	8b 4d e8	 mov	 ecx, DWORD PTR __Newvec$145847[ebp]
  0012e	51		 push	 ecx
  0012f	52		 push	 edx
  00130	50		 push	 eax
  00131	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR __Ncopied$145849[ebp], 1
  00138	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 1182 : 			++_Ncopied;
; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

  0013d	8b 45 dc	 mov	 eax, DWORD PTR __Whereoff$145848[ebp]
  00140	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00143	03 c7		 add	 eax, edi
  00145	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  0014b	03 45 e8	 add	 eax, DWORD PTR __Newvec$145847[ebp]
  0014e	83 c4 18	 add	 esp, 24			; 00000018H
  00151	c6 45 ec 00	 mov	 BYTE PTR $T201877[ebp], 0
  00155	8b 55 ec	 mov	 edx, DWORD PTR $T201877[ebp]
  00158	52		 push	 edx
  00159	8b 55 ec	 mov	 edx, DWORD PTR __Cat$201881[ebp]
  0015c	52		 push	 edx
  0015d	8d 56 08	 lea	 edx, DWORD PTR [esi+8]
  00160	52		 push	 edx
  00161	50		 push	 eax
  00162	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR __Where$[ebp+4]
  00168	51		 push	 ecx
  00169	50		 push	 eax
  0016a	c7 45 e0 02 00
	00 00		 mov	 DWORD PTR __Ncopied$145849[ebp], 2
  00171	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 1192 : 			_CATCH_END
; 1193 : 
; 1194 : 			_Count += size();

  00176	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00179	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0017c	2b d1		 sub	 edx, ecx
  0017e	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00183	f7 ea		 imul	 edx
  00185	c1 fa 06	 sar	 edx, 6
  00188	8b c2		 mov	 eax, edx
  0018a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0018d	03 c2		 add	 eax, edx
  0018f	83 c4 18	 add	 esp, 24			; 00000018H
  00192	03 f8		 add	 edi, eax
  00194	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 1195 : 			if (_Myfirst != 0)

  0019b	85 c9		 test	 ecx, ecx
  0019d	74 18		 je	 SHORT $LN115@Insert_n

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

  0019f	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  001a2	52		 push	 edx
  001a3	51		 push	 ecx
  001a4	8b ce		 mov	 ecx, esi
  001a6	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  001ab	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001ae	50		 push	 eax
  001af	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001b4	83 c4 04	 add	 esp, 4
$LN115@Insert_n:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

  001b7	8b 45 e8	 mov	 eax, DWORD PTR __Newvec$145847[ebp]
  001ba	69 db 88 00 00
	00		 imul	 ebx, 136		; 00000088H

; 1206 : 			_Mylast = _Newvec + _Count;

  001c0	69 ff 88 00 00
	00		 imul	 edi, 136		; 00000088H
  001c6	03 d8		 add	 ebx, eax
  001c8	03 f8		 add	 edi, eax
  001ca	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  001cd	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 1207 : 			_Myfirst = _Newvec;

  001d0	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  001d3	e9 a3 01 00 00	 jmp	 $LN1@Insert_n
__catch$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

  001d8	8b 5d e0	 mov	 ebx, DWORD PTR __Ncopied$145849[ebp]
  001db	83 fb 01	 cmp	 ebx, 1

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

  001de	8b 75 dc	 mov	 esi, DWORD PTR __Whereoff$145848[ebp]
  001e1	8b 7d e8	 mov	 edi, DWORD PTR __Newvec$145847[ebp]
  001e4	7e 14		 jle	 SHORT $LN7@Insert_n
  001e6	8b ce		 mov	 ecx, esi
  001e8	69 c9 88 00 00
	00		 imul	 ecx, 136		; 00000088H
  001ee	03 cf		 add	 ecx, edi
  001f0	51		 push	 ecx
  001f1	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001f4	57		 push	 edi
  001f5	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy
$LN7@Insert_n:

; 1188 : 			if (0 < _Ncopied)

  001fa	85 db		 test	 ebx, ebx
  001fc	7e 23		 jle	 SHORT $LN6@Insert_n

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

  001fe	8b 95 24 01 00
	00		 mov	 edx, DWORD PTR __Count$[ebp]
  00204	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00207	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  0020a	69 f6 88 00 00
	00		 imul	 esi, 136		; 00000088H
  00210	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  00216	03 c7		 add	 eax, edi
  00218	50		 push	 eax
  00219	03 f7		 add	 esi, edi
  0021b	56		 push	 esi
  0021c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy
$LN6@Insert_n:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

  00221	57		 push	 edi
  00222	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00227	83 c4 04	 add	 esp, 4

; 1191 : 			_RERAISE;

  0022a	6a 00		 push	 0
  0022c	6a 00		 push	 0
  0022e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Insert_n:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

  00233	2b 8d 20 01 00
	00		 sub	 ecx, DWORD PTR __Where$[ebp+4]
  00239	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0023e	f7 e9		 imul	 ecx
  00240	c1 fa 06	 sar	 edx, 6
  00243	8b ca		 mov	 ecx, edx
  00245	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00248	03 ca		 add	 ecx, edx
  0024a	3b cf		 cmp	 ecx, edi
  0024c	0f 83 c3 00 00
	00		 jae	 $LN3@Insert_n

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

  00252	8b 55 ec	 mov	 edx, DWORD PTR __Val$GSCopy$[ebp]
  00255	52		 push	 edx
  00256	8d 8d 88 00 00
	00		 lea	 ecx, DWORD PTR __Tmp$145862[ebp]
  0025c	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

  00261	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR __Where$[ebp+4]
  00267	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0026a	8b df		 mov	 ebx, edi
  0026c	69 db 88 00 00
	00		 imul	 ebx, 136		; 00000088H
  00272	8d 0c 03	 lea	 ecx, DWORD PTR [ebx+eax]
  00275	51		 push	 ecx
  00276	52		 push	 edx
  00277	50		 push	 eax
  00278	8b ce		 mov	 ecx, esi
  0027a	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  00281	e8 00 00 00 00	 call	 ??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Umove<HostDevice *>

; 1215 : 
; 1216 : 			_TRY_BEGIN
; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

  00286	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00289	8b d1		 mov	 edx, ecx
  0028b	2b 95 20 01 00
	00		 sub	 edx, DWORD PTR __Where$[ebp+4]
  00291	8d 85 88 00 00
	00		 lea	 eax, DWORD PTR __Tmp$145862[ebp]
  00297	50		 push	 eax
  00298	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0029d	f7 ea		 imul	 edx
  0029f	c1 fa 06	 sar	 edx, 6
  002a2	8b c2		 mov	 eax, edx
  002a4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002a7	03 c2		 add	 eax, edx
  002a9	2b f8		 sub	 edi, eax
  002ab	57		 push	 edi
  002ac	51		 push	 ecx
  002ad	8b ce		 mov	 ecx, esi
  002af	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  002b3	e8 00 00 00 00	 call	 ?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ufill

; 1222 : 			_CATCH_END
; 1223 : 
; 1224 : 			_Mylast += _Count;

  002b8	01 5e 10	 add	 DWORD PTR [esi+16], ebx
  002bb	8b 76 10	 mov	 esi, DWORD PTR [esi+16]

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

  002be	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  002c4	8d 8d 88 00 00
	00		 lea	 ecx, DWORD PTR __Tmp$145862[ebp]
  002ca	51		 push	 ecx
  002cb	2b f3		 sub	 esi, ebx
  002cd	56		 push	 esi
  002ce	52		 push	 edx
  002cf	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  002d6	e8 00 00 00 00	 call	 ??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ; std::fill<HostDevice *,HostDevice>
  002db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1232 : 			}

  002de	8d 8d 88 00 00
	00		 lea	 ecx, DWORD PTR __Tmp$145862[ebp]

; 1233 : 		else

  002e4	e9 86 00 00 00	 jmp	 $LN122@Insert_n
__catch$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

  002e9	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR __Count$[ebp]
  002ef	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  002f2	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  002f8	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  002fb	03 d0		 add	 edx, eax
  002fd	52		 push	 edx
  002fe	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  00304	03 c2		 add	 eax, edx
  00306	50		 push	 eax
  00307	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy

; 1221 : 			_RERAISE;

  0030c	6a 00		 push	 0
  0030e	6a 00		 push	 0
  00310	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Insert_n:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

  00315	8b 45 ec	 mov	 eax, DWORD PTR __Val$GSCopy$[ebp]
  00318	50		 push	 eax
  00319	8d 4d 00	 lea	 ecx, DWORD PTR __Tmp$145872[ebp]
  0031c	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;
; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

  00321	69 ff 88 00 00
	00		 imul	 edi, 136		; 00000088H
  00327	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0032a	53		 push	 ebx
  0032b	8b c3		 mov	 eax, ebx
  0032d	2b c7		 sub	 eax, edi
  0032f	53		 push	 ebx
  00330	50		 push	 eax
  00331	8b ce		 mov	 ecx, esi
  00333	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 5
  0033a	89 45 ec	 mov	 DWORD PTR tv592[ebp], eax
  0033d	e8 00 00 00 00	 call	 ??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Umove<HostDevice *>

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

  00342	8b 4d ec	 mov	 ecx, DWORD PTR tv592[ebp]
  00345	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  0034b	53		 push	 ebx
  0034c	51		 push	 ecx
  0034d	52		 push	 edx
  0034e	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00351	e8 00 00 00 00	 call	 ??$_Unchecked_move_backward@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ; stdext::_Unchecked_move_backward<HostDevice *,HostDevice *>

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

  00356	8d 45 00	 lea	 eax, DWORD PTR __Tmp$145872[ebp]
  00359	50		 push	 eax
  0035a	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR __Where$[ebp+4]
  00360	03 f8		 add	 edi, eax
  00362	57		 push	 edi
  00363	50		 push	 eax
  00364	e8 00 00 00 00	 call	 ??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ; std::fill<HostDevice *,HostDevice>
  00369	83 c4 18	 add	 esp, 24			; 00000018H

; 1249 : 			}

  0036c	8d 4d 00	 lea	 ecx, DWORD PTR __Tmp$145872[ebp]
$LN122@Insert_n:
  0036f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00376	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
$LN1@Insert_n:

; 1250 : 		}

  0037b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0037e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00385	59		 pop	 ecx
  00386	5f		 pop	 edi
  00387	5e		 pop	 esi
  00388	5b		 pop	 ebx
  00389	8b 8d 10 01 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0038f	33 cd		 xor	 ecx, ebp
  00391	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00396	81 c5 14 01 00
	00		 add	 ebp, 276		; 00000114H
  0039c	8b e5		 mov	 esp, ebp
  0039e	5d		 pop	 ebp
  0039f	c2 10 00	 ret	 16			; 00000010H
$LN121@Insert_n:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$4:
  00000	8d 8d 88 00 00
	00		 lea	 ecx, DWORD PTR __Tmp$145862[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
__unwindfunclet$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$5:
  0000b	8d 4d 00	 lea	 ecx, DWORD PTR __Tmp$145872[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
__ehhandler$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	8b 8a 1c 01 00
	00		 mov	 ecx, DWORD PTR [edx+284]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Insert_n
PUBLIC	?insert@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@ABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@ABUHostDevice@@@Z
_TEXT	SEGMENT
__Tmp$202213 = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
__Val$ = 20						; size = 4
?insert@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@ABUHostDevice@@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

  00009	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  0000c	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  0000f	8b cb		 mov	 ecx, ebx
  00011	2b ce		 sub	 ecx, esi
  00013	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00018	f7 e9		 imul	 ecx
  0001a	c1 fa 06	 sar	 edx, 6
  0001d	8b c2		 mov	 eax, edx
  0001f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00022	03 c2		 add	 eax, edx
  00024	75 04		 jne	 SHORT $LN3@insert@7
  00026	33 f6		 xor	 esi, esi
  00028	eb 33		 jmp	 SHORT $LN4@insert@7
$LN3@insert@7:
  0002a	3b f3		 cmp	 esi, ebx
  0002c	76 05		 jbe	 SHORT $LN13@insert@7
  0002e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN13@insert@7:
  00033	8b 4c 24 20	 mov	 ecx, DWORD PTR __Where$[esp+20]
  00037	8b 07		 mov	 eax, DWORD PTR [edi]
  00039	85 c9		 test	 ecx, ecx
  0003b	74 04		 je	 SHORT $LN29@insert@7
  0003d	3b c8		 cmp	 ecx, eax
  0003f	74 05		 je	 SHORT $LN28@insert@7
$LN29@insert@7:
  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN28@insert@7:
  00046	8b 4c 24 24	 mov	 ecx, DWORD PTR __Where$[esp+24]
  0004a	2b ce		 sub	 ecx, esi
  0004c	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00051	f7 e9		 imul	 ecx
  00053	c1 fa 06	 sar	 edx, 6
  00056	8b f2		 mov	 esi, edx
  00058	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0005b	03 f2		 add	 esi, edx
$LN4@insert@7:

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

  0005d	8b 4c 24 28	 mov	 ecx, DWORD PTR __Val$[esp+20]
  00061	8b 54 24 24	 mov	 edx, DWORD PTR __Where$[esp+24]
  00065	8b 44 24 20	 mov	 eax, DWORD PTR __Where$[esp+20]
  00069	51		 push	 ecx
  0006a	6a 01		 push	 1
  0006c	52		 push	 edx
  0006d	50		 push	 eax
  0006e	8b cf		 mov	 ecx, edi
  00070	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Insert_n

; 878  : 		return (begin() + _Off);

  00075	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
  00078	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0007b	76 05		 jbe	 SHORT $LN43@insert@7
  0007d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN43@insert@7:
  00082	8b 3f		 mov	 edi, DWORD PTR [edi]
  00084	8b ef		 mov	 ebp, edi
  00086	89 5c 24 14	 mov	 DWORD PTR __Tmp$202213[esp+28], ebx
  0008a	85 ff		 test	 edi, edi
  0008c	75 1c		 jne	 SHORT $LN85@insert@7
  0008e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00093	33 c0		 xor	 eax, eax
$LN76@insert@7:
  00095	69 f6 88 00 00
	00		 imul	 esi, 136		; 00000088H
  0009b	03 f3		 add	 esi, ebx
  0009d	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
  000a0	77 13		 ja	 SHORT $LN63@insert@7
  000a2	85 ff		 test	 edi, edi
  000a4	74 08		 je	 SHORT $LN81@insert@7
  000a6	8b 3f		 mov	 edi, DWORD PTR [edi]
  000a8	eb 06		 jmp	 SHORT $LN82@insert@7
$LN85@insert@7:
  000aa	8b 07		 mov	 eax, DWORD PTR [edi]
  000ac	eb e7		 jmp	 SHORT $LN76@insert@7
$LN81@insert@7:
  000ae	33 ff		 xor	 edi, edi
$LN82@insert@7:
  000b0	3b 77 0c	 cmp	 esi, DWORD PTR [edi+12]
  000b3	73 05		 jae	 SHORT $LN62@insert@7
$LN63@insert@7:
  000b5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN62@insert@7:
  000ba	8b 44 24 1c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+20]
  000be	5f		 pop	 edi
  000bf	89 70 04	 mov	 DWORD PTR [eax+4], esi
  000c2	5e		 pop	 esi
  000c3	89 28		 mov	 DWORD PTR [eax], ebp
  000c5	5d		 pop	 ebp
  000c6	5b		 pop	 ebx

; 879  : 		}

  000c7	83 c4 08	 add	 esp, 8
  000ca	c2 10 00	 ret	 16			; 00000010H
?insert@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@ABUHostDevice@@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::insert
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z
_TEXT	SEGMENT
$T202249 = -8						; size = 1
$T202219 = -8						; size = 8
__Cat$202253 = 8					; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 810  : 		if (size() < capacity())

  00007	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  0000a	57		 push	 edi
  0000b	85 db		 test	 ebx, ebx
  0000d	75 04		 jne	 SHORT $LN9@push_back
  0000f	33 c9		 xor	 ecx, ecx
  00011	eb 16		 jmp	 SHORT $LN10@push_back
$LN9@push_back:
  00013	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00016	2b cb		 sub	 ecx, ebx
  00018	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0001d	f7 e9		 imul	 ecx
  0001f	c1 fa 06	 sar	 edx, 6
  00022	8b ca		 mov	 ecx, edx
  00024	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00027	03 ca		 add	 ecx, edx
$LN10@push_back:
  00029	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0002c	8b d7		 mov	 edx, edi
  0002e	2b d3		 sub	 edx, ebx
  00030	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00035	f7 ea		 imul	 edx
  00037	c1 fa 06	 sar	 edx, 6
  0003a	8b c2		 mov	 eax, edx
  0003c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003f	03 c2		 add	 eax, edx
  00041	3b c1		 cmp	 eax, ecx
  00043	73 35		 jae	 SHORT $LN2@push_back

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

  00045	8b 54 24 18	 mov	 edx, DWORD PTR __Cat$202253[esp+16]
  00049	c6 44 24 0c 00	 mov	 BYTE PTR $T202249[esp+20], 0
  0004e	8b 4c 24 0c	 mov	 ecx, DWORD PTR $T202249[esp+20]
  00052	51		 push	 ecx
  00053	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Val$[esp+20]
  00057	52		 push	 edx
  00058	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0005b	50		 push	 eax
  0005c	51		 push	 ecx
  0005d	6a 01		 push	 1
  0005f	57		 push	 edi
  00060	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >
  00065	83 c4 18	 add	 esp, 24			; 00000018H
  00068	81 c7 88 00 00
	00		 add	 edi, 136		; 00000088H
  0006e	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx

; 824  : 		}

  00074	83 c4 08	 add	 esp, 8
  00077	c2 04 00	 ret	 4
$LN2@push_back:

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else
; 823  : 			insert(end(), _Val);

  0007a	3b df		 cmp	 ebx, edi
  0007c	76 05		 jbe	 SHORT $LN23@push_back
  0007e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN23@push_back:
  00083	8b 54 24 18	 mov	 edx, DWORD PTR __Val$[esp+16]
  00087	8b 06		 mov	 eax, DWORD PTR [esi]
  00089	52		 push	 edx
  0008a	57		 push	 edi
  0008b	50		 push	 eax
  0008c	8d 44 24 18	 lea	 eax, DWORD PTR $T202219[esp+32]
  00090	50		 push	 eax
  00091	8b ce		 mov	 ecx, esi
  00093	e8 00 00 00 00	 call	 ?insert@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@ABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::insert
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx

; 824  : 		}

  0009b	83 c4 08	 add	 esp, 8
  0009e	c2 04 00	 ret	 4
?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::push_back
_TEXT	ENDS
PUBLIC	??_C@_01JLIPDDHJ@?3?$AA@			; `string'
PUBLIC	??_C@_0L@DPPABKKK@?2Partition?$AA@		; `string'
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z ; GetAvailableHostDevices
EXTRN	_GetDeviceInfo:PROC
EXTRN	_GetDriveGeometry:PROC
;	COMDAT ??_C@_01JLIPDDHJ@?3?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3?$AA@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DPPABKKK@?2Partition?$AA@
CONST	SEGMENT
??_C@_0L@DPPABKKK@?2Partition?$AA@ DB '\Partition', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z DD 019930522H
	DD	012H
	DD	FLAT:__unwindtable$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$11
	DD	01H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$12
	DD	02H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$14
	DD	00H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$1
	DD	04H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$2
	DD	05H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$3
	DD	06H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$17
	DD	07H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$18
	DD	08H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$20
	DD	06H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$24
	DD	0bH
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$25
	DD	0cH
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$27
	DD	00H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$6
	DD	0eH
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$7
	DD	0fH
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$8
	DD	010H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$9
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
xdata$x	ENDS
;	COMDAT ?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z
_TEXT	SEGMENT
$T203924 = -1776					; size = 4
$T203081 = -1772					; size = 4
$T202544 = -1768					; size = 4
_partNumber$143093 = -1764				; size = 4
$T202349 = -1760					; size = 4
tv1944 = -1756						; size = 4
_devNumber$143089 = -1756				; size = 4
_devPath$143101 = -1752					; size = 4
___$ReturnUdt$GSCopy$ = -1748				; size = 4
_dev0$ = -1748						; size = 4
_strm$143301 = -1744					; size = 136
_strm$143097 = -1744					; size = 136
$T202347 = -1608					; size = 28
$T202340 = -1608					; size = 28
_partInfo$143106 = -1608				; size = 32
_fileSystemFlags$203315 = -1576				; size = 4
_geometry$143109 = -1572				; size = 24
_devPathStr$143303 = -1548				; size = 28
_devPathStr$143100 = -1548				; size = 28
_ws$143311 = -1520					; size = 136
_device$143105 = -1520					; size = 136
_device$143309 = -1384					; size = 136
_ws$143260 = -1384					; size = 136
_info$143307 = -1248					; size = 560
_openTest$143305 = -688					; size = 536
_openTest$143102 = -688					; size = 536
_root$203316 = -152					; size = 8
_name$143317 = -144					; size = 128
_name$143287 = -144					; size = 128
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_noDeviceProperties$ = 12				; size = 1
_singleList$ = 16					; size = 1
_noFloppy$ = 20						; size = 1
_detectUnencryptedFilesystems$ = 24			; size = 1
?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z PROC ; GetAvailableHostDevices, COMDAT

; 8421 : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec e4 06 00
	00		 sub	 esp, 1764		; 000006e4H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 e0 06
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+1776], eax
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c4		 xor	 eax, esp
  0002d	50		 push	 eax
  0002e	8d 84 24 f8 06
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+1796]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	8b b4 24 08 07
	00 00		 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+1792]
  00042	33 ff		 xor	 edi, edi

; 8422 : 	vector <HostDevice> devices;

  00044	8b ce		 mov	 ecx, esi
  00046	89 bc 24 00 07
	00 00		 mov	 DWORD PTR __$EHRec$[esp+1804], edi
  0004d	89 74 24 30	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+1796], esi
  00051	89 7c 24 24	 mov	 DWORD PTR $T202349[esp+1796], edi
  00055	e8 00 00 00 00	 call	 ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >

; 8567 : 	}
; 8568 : 
; 8569 : 	return devices;

  0005a	8b 6c 24 30	 mov	 ebp, DWORD PTR _dev0$[esp+1796]
  0005e	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR $T202349[esp+1796], 1
  00066	89 7c 24 28	 mov	 DWORD PTR _devNumber$143089[esp+1796], edi
  0006a	8d 9b 00 00 00
	00		 npad	 6
$LL29@GetAvailab:

; 8423 : 	size_t dev0;
; 8424 : 
; 8425 : 	for (int devNumber = 0; devNumber < MAX_HOST_DRIVE_NUMBER; devNumber++)
; 8426 : 	{
; 8427 : 		for (int partNumber = 0; partNumber < MAX_HOST_PARTITION_NUMBER; partNumber++)

  00070	89 7c 24 20	 mov	 DWORD PTR _partNumber$143093[esp+1796], edi
  00074	eb 0a 8d a4 24
	00 00 00 00 8d
	49 00		 npad	 12
$LL26@GetAvailab:

; 8428 : 		{
; 8429 : 			stringstream strm;

  00080	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR _strm$143097[esp+1796], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  00088	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR _strm$143097[esp+1804], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  00090	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _strm$143097[esp+1880], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  0009b	57		 push	 edi
  0009c	8d 44 24 44	 lea	 eax, DWORD PTR _strm$143097[esp+1812]
  000a0	bb 02 00 00 00	 mov	 ebx, 2
  000a5	09 5c 24 28	 or	 DWORD PTR $T202349[esp+1800], ebx
  000a9	50		 push	 eax
  000aa	8d 4c 24 3c	 lea	 ecx, DWORD PTR _strm$143097[esp+1804]
  000ae	c7 84 24 08 07
	00 00 01 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+1812], 1
  000b9	e8 00 00 00 00	 call	 ??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >
  000be	8b 4c 24 34	 mov	 ecx, DWORD PTR _strm$143097[esp+1796]
  000c2	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000c5	8d 4c 24 40	 lea	 ecx, DWORD PTR _strm$143097[esp+1808]
  000c9	89 9c 24 00 07
	00 00		 mov	 DWORD PTR __$EHRec$[esp+1804], ebx
  000d0	c7 44 14 34 00
	00 00 00	 mov	 DWORD PTR _strm$143097[esp+edx+1796], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  000d8	e8 00 00 00 00	 call	 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
  000dd	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR _strm$143097[esp+1808], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  000e5	89 7c 24 7c	 mov	 DWORD PTR _strm$143097[esp+1868], edi
  000e9	89 bc 24 80 00
	00 00		 mov	 DWORD PTR _strm$143097[esp+1872], edi

; 8430 : 			strm << "\\Device\\Harddisk" << devNumber << "\\Partition" << partNumber;

  000f0	8b 44 24 20	 mov	 eax, DWORD PTR _partNumber$143093[esp+1796]
  000f4	8b 4c 24 28	 mov	 ecx, DWORD PTR _devNumber$143089[esp+1796]
  000f8	50		 push	 eax
  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DPPABKKK@?2Partition?$AA@
  000fe	51		 push	 ecx
  000ff	8d 54 24 48	 lea	 edx, DWORD PTR _strm$143097[esp+1816]
  00103	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EPPOJBJL@?2Device?2Harddisk?$AA@
  00108	52		 push	 edx
  00109	c7 84 24 14 07
	00 00 04 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+1824], 4
  00114	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00119	83 c4 08	 add	 esp, 8
  0011c	8b c8		 mov	 ecx, eax
  0011e	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00129	83 c4 08	 add	 esp, 8
  0012c	8b c8		 mov	 ecx, eax
  0012e	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<

; 8431 : 			string devPathStr (strm.str());

  00133	8d 84 24 f8 00
	00 00		 lea	 eax, DWORD PTR _devPathStr$143100[esp+1796]
  0013a	50		 push	 eax
  0013b	8d 4c 24 38	 lea	 ecx, DWORD PTR _strm$143097[esp+1800]
  0013f	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str

; 8432 : 			const char *devPath = devPathStr.c_str();

  00144	83 bc 24 10 01
	00 00 10	 cmp	 DWORD PTR _devPathStr$143100[esp+1820], 16 ; 00000010H
  0014c	c6 84 24 00 07
	00 00 05	 mov	 BYTE PTR __$EHRec$[esp+1804], 5
  00154	72 0d		 jb	 SHORT $LN122@GetAvailab
  00156	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR _devPathStr$143100[esp+1800]
  0015d	89 4c 24 2c	 mov	 DWORD PTR _devPath$143101[esp+1796], ecx
  00161	eb 0b		 jmp	 SHORT $LN123@GetAvailab
$LN122@GetAvailab:
  00163	8d 94 24 fc 00
	00 00		 lea	 edx, DWORD PTR _devPathStr$143100[esp+1800]
  0016a	89 54 24 2c	 mov	 DWORD PTR _devPath$143101[esp+1796], edx
$LN123@GetAvailab:

; 8433 : 
; 8434 : 			OPEN_TEST_STRUCT openTest;
; 8435 : 			if (!OpenDevice (devPath, &openTest, detectUnencryptedFilesystems && partNumber != 0))

  0016e	8a 9c 24 18 07
	00 00		 mov	 bl, BYTE PTR _detectUnencryptedFilesystems$[esp+1792]
  00175	84 db		 test	 bl, bl
  00177	74 0d		 je	 SHORT $LN34@GetAvailab
  00179	39 7c 24 20	 cmp	 DWORD PTR _partNumber$143093[esp+1796], edi
  0017d	74 07		 je	 SHORT $LN34@GetAvailab
  0017f	b8 01 00 00 00	 mov	 eax, 1
  00184	eb 02		 jmp	 SHORT $LN35@GetAvailab
$LN34@GetAvailab:
  00186	33 c0		 xor	 eax, eax
$LN35@GetAvailab:
  00188	8b 4c 24 2c	 mov	 ecx, DWORD PTR _devPath$143101[esp+1796]
  0018c	50		 push	 eax
  0018d	8d 84 24 58 04
	00 00		 lea	 eax, DWORD PTR _openTest$143102[esp+1800]
  00194	50		 push	 eax
  00195	51		 push	 ecx
  00196	e8 00 00 00 00	 call	 _OpenDevice
  0019b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0019e	85 c0		 test	 eax, eax
  001a0	75 5f		 jne	 SHORT $LN23@GetAvailab

; 8436 : 			{
; 8437 : 				if (partNumber == 0)

  001a2	39 7c 24 20	 cmp	 DWORD PTR _partNumber$143093[esp+1796], edi
  001a6	0f 84 10 05 00
	00		 je	 $LN673@GetAvailab

; 8439 : 
; 8440 : 				continue;

  001ac	83 bc 24 10 01
	00 00 10	 cmp	 DWORD PTR _devPathStr$143100[esp+1820], 16 ; 00000010H
  001b4	72 10		 jb	 SHORT $LN173@GetAvailab
  001b6	8b 94 24 fc 00
	00 00		 mov	 edx, DWORD PTR _devPathStr$143100[esp+1800]
  001bd	52		 push	 edx
  001be	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001c3	83 c4 04	 add	 esp, 4
$LN173@GetAvailab:
  001c6	8d 8c 24 88 00
	00 00		 lea	 ecx, DWORD PTR _strm$143097[esp+1880]
  001cd	c7 84 24 10 01
	00 00 0f 00 00
	00		 mov	 DWORD PTR _devPathStr$143100[esp+1820], 15 ; 0000000fH
  001d8	89 bc 24 0c 01
	00 00		 mov	 DWORD PTR _devPathStr$143100[esp+1816], edi
  001df	c6 84 24 fc 00
	00 00 00	 mov	 BYTE PTR _devPathStr$143100[esp+1800], 0
  001e7	c6 84 24 00 07
	00 00 00	 mov	 BYTE PTR __$EHRec$[esp+1804], 0
  001ef	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  001f4	8d 84 24 88 00
	00 00		 lea	 eax, DWORD PTR _strm$143097[esp+1880]
  001fb	50		 push	 eax
  001fc	e9 91 04 00 00	 jmp	 $LN690@GetAvailab
$LN23@GetAvailab:

; 8441 : 			}
; 8442 : 
; 8443 : 			HostDevice device;

  00201	8d 8c 24 14 01
	00 00		 lea	 ecx, DWORD PTR _device$143105[esp+1796]
  00208	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@XZ	; HostDevice::HostDevice

; 8444 : 			device.SystemNumber = devNumber;

  0020d	8b 4c 24 28	 mov	 ecx, DWORD PTR _devNumber$143089[esp+1796]

; 8445 : 			device.Path = devPath;

  00211	8b 44 24 2c	 mov	 eax, DWORD PTR _devPath$143101[esp+1796]
  00215	c6 84 24 00 07
	00 00 06	 mov	 BYTE PTR __$EHRec$[esp+1804], 6
  0021d	89 8c 24 7c 01
	00 00		 mov	 DWORD PTR _device$143105[esp+1900], ecx
  00224	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL678@GetAvailab:
  00227	8a 08		 mov	 cl, BYTE PTR [eax]
  00229	40		 inc	 eax
  0022a	84 c9		 test	 cl, cl
  0022c	75 f9		 jne	 SHORT $LL678@GetAvailab
  0022e	2b c2		 sub	 eax, edx
  00230	8b 54 24 2c	 mov	 edx, DWORD PTR _devPath$143101[esp+1796]
  00234	50		 push	 eax
  00235	52		 push	 edx
  00236	8d 8c 24 5c 01
	00 00		 lea	 ecx, DWORD PTR _device$143105[esp+1868]
  0023d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 8446 : 
; 8447 : 			PARTITION_INFORMATION partInfo;
; 8448 : 
; 8449 : 			if (GetPartitionInfo (devPath, &partInfo))

  00242	8b 4c 24 2c	 mov	 ecx, DWORD PTR _devPath$143101[esp+1796]
  00246	8d 84 24 bc 00
	00 00		 lea	 eax, DWORD PTR _partInfo$143106[esp+1796]
  0024d	50		 push	 eax
  0024e	51		 push	 ecx
  0024f	e8 00 00 00 00	 call	 _GetPartitionInfo
  00254	83 c4 08	 add	 esp, 8
  00257	85 c0		 test	 eax, eax
  00259	74 2e		 je	 SHORT $LN21@GetAvailab

; 8450 : 			{
; 8451 : 				device.Bootable = partInfo.BootIndicator ? true : false;

  0025b	80 bc 24 d5 00
	00 00 00	 cmp	 BYTE PTR _partInfo$143106[esp+1821], 0

; 8452 : 				device.Size = partInfo.PartitionLength.QuadPart;

  00263	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR _partInfo$143106[esp+1804]
  0026a	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR _partInfo$143106[esp+1808]
  00271	0f 95 c2	 setne	 dl
  00274	88 94 24 14 01
	00 00		 mov	 BYTE PTR _device$143105[esp+1796], dl
  0027b	89 84 24 74 01
	00 00		 mov	 DWORD PTR _device$143105[esp+1892], eax
  00282	89 8c 24 78 01
	00 00		 mov	 DWORD PTR _device$143105[esp+1896], ecx
$LN21@GetAvailab:

; 8453 : 			}
; 8454 : 
; 8455 : 			device.HasUnencryptedFilesystem = (detectUnencryptedFilesystems && openTest.FilesystemDetected) ? true : false;

  00289	84 db		 test	 bl, bl
  0028b	74 11		 je	 SHORT $LN36@GetAvailab
  0028d	c6 84 24 1a 01
	00 00 01	 mov	 BYTE PTR _device$143105[esp+1802], 1
  00295	39 bc 24 68 06
	00 00		 cmp	 DWORD PTR _openTest$143102[esp+2328], edi
  0029c	75 08		 jne	 SHORT $LN37@GetAvailab
$LN36@GetAvailab:
  0029e	c6 84 24 1a 01
	00 00 00	 mov	 BYTE PTR _device$143105[esp+1802], 0
$LN37@GetAvailab:

; 8456 : 
; 8457 : 			if (!noDeviceProperties)

  002a6	80 bc 24 0c 07
	00 00 00	 cmp	 BYTE PTR _noDeviceProperties$[esp+1792], 0
  002ae	0f 85 2e 02 00
	00		 jne	 $LN318@GetAvailab

; 8458 : 			{
; 8459 : 				DISK_GEOMETRY geometry;
; 8460 : 
; 8461 : 				wstringstream ws;

  002b4	c7 84 24 9c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR _ws$143260[esp+1796], OFFSET ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
  002bf	c7 84 24 a4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR _ws$143260[esp+1804], OFFSET ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
  002ca	c7 84 24 f0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR _ws$143260[esp+1880], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  002d5	83 4c 24 24 04	 or	 DWORD PTR $T202349[esp+1796], 4
  002da	57		 push	 edi
  002db	8d 94 24 ac 01
	00 00		 lea	 edx, DWORD PTR _ws$143260[esp+1812]
  002e2	52		 push	 edx
  002e3	8d 8c 24 a4 01
	00 00		 lea	 ecx, DWORD PTR _ws$143260[esp+1804]
  002ea	c6 84 24 08 07
	00 00 07	 mov	 BYTE PTR __$EHRec$[esp+1812], 7
  002f2	e8 00 00 00 00	 call	 ??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >
  002f7	8b 84 24 9c 01
	00 00		 mov	 eax, DWORD PTR _ws$143260[esp+1796]
  002fe	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00301	c7 84 0c 9c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR _ws$143260[esp+ecx+1796], OFFSET ??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  0030c	bb 08 00 00 00	 mov	 ebx, 8
  00311	8d 8c 24 a8 01
	00 00		 lea	 ecx, DWORD PTR _ws$143260[esp+1808]
  00318	89 9c 24 00 07
	00 00		 mov	 DWORD PTR __$EHRec$[esp+1804], ebx
  0031f	e8 00 00 00 00	 call	 ??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
  00324	c7 84 24 a8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR _ws$143260[esp+1808], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  0032f	89 bc 24 e4 01
	00 00		 mov	 DWORD PTR _ws$143260[esp+1868], edi
  00336	89 bc 24 e8 01
	00 00		 mov	 DWORD PTR _ws$143260[esp+1872], edi

; 8462 : 				ws << devPathStr.c_str();

  0033d	83 bc 24 10 01
	00 00 10	 cmp	 DWORD PTR _devPathStr$143100[esp+1820], 16 ; 00000010H
  00345	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR _devPathStr$143100[esp+1800]
  0034c	c6 84 24 00 07
	00 00 0a	 mov	 BYTE PTR __$EHRec$[esp+1804], 10 ; 0000000aH
  00354	73 07		 jae	 SHORT $LN262@GetAvailab
  00356	8d 84 24 fc 00
	00 00		 lea	 eax, DWORD PTR _devPathStr$143100[esp+1800]
$LN262@GetAvailab:
  0035d	50		 push	 eax
  0035e	8d 94 24 a8 01
	00 00		 lea	 edx, DWORD PTR _ws$143260[esp+1808]
  00365	52		 push	 edx
  00366	e8 00 00 00 00	 call	 ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
  0036b	83 c4 08	 add	 esp, 8

; 8463 : 				int driveNumber = GetDiskDeviceDriveLetter ((wchar_t *) ws.str().c_str());

  0036e	8d 84 24 bc 00
	00 00		 lea	 eax, DWORD PTR $T202340[esp+1796]
  00375	50		 push	 eax
  00376	8d 8c 24 a0 01
	00 00		 lea	 ecx, DWORD PTR _ws$143260[esp+1800]
  0037d	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
  00382	39 58 18	 cmp	 DWORD PTR [eax+24], ebx
  00385	72 05		 jb	 SHORT $LN267@GetAvailab
  00387	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0038a	eb 03		 jmp	 SHORT $LN268@GetAvailab
$LN267@GetAvailab:
  0038c	83 c0 04	 add	 eax, 4
$LN268@GetAvailab:
  0038f	50		 push	 eax
  00390	e8 00 00 00 00	 call	 _GetDiskDeviceDriveLetter
  00395	83 c4 04	 add	 esp, 4
  00398	83 bc 24 d4 00
	00 00 08	 cmp	 DWORD PTR $T202340[esp+1820], 8
  003a0	8b d8		 mov	 ebx, eax
  003a2	72 10		 jb	 SHORT $LN287@GetAvailab
  003a4	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR $T202340[esp+1800]
  003ab	51		 push	 ecx
  003ac	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003b1	83 c4 04	 add	 esp, 4
$LN287@GetAvailab:

; 8464 : 
; 8465 : 				if (driveNumber >= 0)

  003b4	3b df		 cmp	 ebx, edi
  003b6	0f 8c c6 00 00
	00		 jl	 $LN17@GetAvailab

; 8466 : 				{
; 8467 : 					device.MountPoint += (char) (driveNumber + 'A');

  003bc	8a d3		 mov	 dl, bl
  003be	80 c2 41	 add	 dl, 65			; 00000041H
  003c1	0f b6 c2	 movzx	 eax, dl
  003c4	50		 push	 eax
  003c5	6a 01		 push	 1
  003c7	8d 8c 24 24 01
	00 00		 lea	 ecx, DWORD PTR _device$143105[esp+1812]
  003ce	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 8468 : 					device.MountPoint += ":";

  003d3	6a 01		 push	 1
  003d5	68 00 00 00 00	 push	 OFFSET ??_C@_01JLIPDDHJ@?3?$AA@
  003da	8d 8c 24 24 01
	00 00		 lea	 ecx, DWORD PTR _device$143105[esp+1812]
  003e1	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 8469 : 
; 8470 : 					wchar_t name[64];
; 8471 : 					if (GetDriveLabel (driveNumber, name, sizeof (name)))

  003e6	57		 push	 edi
  003e7	57		 push	 edi
  003e8	ba 3a 00 00 00	 mov	 edx, 58			; 0000003aH
  003ed	66 89 94 24 76
	06 00 00	 mov	 WORD PTR _root$203316[esp+1806], dx
  003f5	8d 94 24 e4 00
	00 00		 lea	 edx, DWORD PTR _fileSystemFlags$203315[esp+1804]
  003fc	52		 push	 edx
  003fd	57		 push	 edi
  003fe	8d 4b 41	 lea	 ecx, DWORD PTR [ebx+65]
  00401	57		 push	 edi
  00402	66 89 8c 24 80
	06 00 00	 mov	 WORD PTR _root$203316[esp+1816], cx
  0040a	b8 5c 00 00 00	 mov	 eax, 92			; 0000005cH
  0040f	33 c9		 xor	 ecx, ecx
  00411	66 89 84 24 84
	06 00 00	 mov	 WORD PTR _root$203316[esp+1820], ax
  00419	6a 40		 push	 64			; 00000040H
  0041b	8d 84 24 8c 06
	00 00		 lea	 eax, DWORD PTR _name$143287[esp+1820]
  00422	66 89 8c 24 8a
	06 00 00	 mov	 WORD PTR _root$203316[esp+1826], cx
  0042a	50		 push	 eax
  0042b	8d 8c 24 88 06
	00 00		 lea	 ecx, DWORD PTR _root$203316[esp+1824]
  00432	51		 push	 ecx
  00433	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumeInformationW@32
  00439	85 c0		 test	 eax, eax
  0043b	74 2e		 je	 SHORT $LN307@GetAvailab

; 8472 : 						device.Name = name;

  0043d	8d 84 24 74 06
	00 00		 lea	 eax, DWORD PTR _name$143287[esp+1796]
  00444	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL679@GetAvailab:
  00447	66 8b 08	 mov	 cx, WORD PTR [eax]
  0044a	83 c0 02	 add	 eax, 2
  0044d	66 3b cf	 cmp	 cx, di
  00450	75 f5		 jne	 SHORT $LL679@GetAvailab
  00452	2b c2		 sub	 eax, edx
  00454	d1 f8		 sar	 eax, 1
  00456	50		 push	 eax
  00457	8d 94 24 78 06
	00 00		 lea	 edx, DWORD PTR _name$143287[esp+1800]
  0045e	52		 push	 edx
  0045f	8d 8c 24 40 01
	00 00		 lea	 ecx, DWORD PTR _device$143105[esp+1840]
  00466	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
$LN307@GetAvailab:

; 8473 : 
; 8474 : 					if (GetSystemDriveLetter() == 'A' + driveNumber)

  0046b	e8 00 00 00 00	 call	 _GetSystemDriveLetter
  00470	0f be c0	 movsx	 eax, al
  00473	83 c3 41	 add	 ebx, 65			; 00000041H
  00476	3b c3		 cmp	 eax, ebx
  00478	75 08		 jne	 SHORT $LN17@GetAvailab

; 8475 : 						device.ContainsSystem = true;

  0047a	c6 84 24 15 01
	00 00 01	 mov	 BYTE PTR _device$143105[esp+1797], 1
$LN17@GetAvailab:

; 8476 : 				}
; 8477 : 
; 8478 : 				if (partNumber == 0 && GetDriveGeometry (devPath, &geometry))

  00482	39 7c 24 20	 cmp	 DWORD PTR _partNumber$143093[esp+1796], edi
  00486	75 2b		 jne	 SHORT $LN16@GetAvailab
  00488	8b 54 24 2c	 mov	 edx, DWORD PTR _devPath$143101[esp+1796]
  0048c	8d 8c 24 e0 00
	00 00		 lea	 ecx, DWORD PTR _geometry$143109[esp+1796]
  00493	51		 push	 ecx
  00494	52		 push	 edx
  00495	e8 00 00 00 00	 call	 _GetDriveGeometry
  0049a	83 c4 08	 add	 esp, 8
  0049d	85 c0		 test	 eax, eax
  0049f	74 12		 je	 SHORT $LN16@GetAvailab

; 8479 : 					device.Removable = (geometry.MediaType == RemovableMedia);

  004a1	83 bc 24 e8 00
	00 00 0b	 cmp	 DWORD PTR _geometry$143109[esp+1804], 11 ; 0000000bH
  004a9	0f 94 c0	 sete	 al
  004ac	88 84 24 70 01
	00 00		 mov	 BYTE PTR _device$143105[esp+1888], al
$LN16@GetAvailab:

; 8480 : 			}

  004b3	8d 8c 24 f0 01
	00 00		 lea	 ecx, DWORD PTR _ws$143260[esp+1880]
  004ba	c6 84 24 00 07
	00 00 06	 mov	 BYTE PTR __$EHRec$[esp+1804], 6
  004c2	e8 00 00 00 00	 call	 ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  004c7	8d 8c 24 f0 01
	00 00		 lea	 ecx, DWORD PTR _ws$143260[esp+1880]
  004ce	51		 push	 ecx
  004cf	c7 84 24 f4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR _ws$143260[esp+1884], OFFSET ??_7ios_base@std@@6B@
  004da	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  004df	83 c4 04	 add	 esp, 4
$LN318@GetAvailab:

; 8481 : 
; 8482 : 			if (partNumber == 0)

  004e2	8b 44 24 20	 mov	 eax, DWORD PTR _partNumber$143093[esp+1796]
  004e6	3b c7		 cmp	 eax, edi
  004e8	75 2d		 jne	 SHORT $LN15@GetAvailab

; 8483 : 			{
; 8484 : 				devices.push_back (device);

  004ea	8d 94 24 14 01
	00 00		 lea	 edx, DWORD PTR _device$143105[esp+1796]
  004f1	52		 push	 edx
  004f2	8b ce		 mov	 ecx, esi
  004f4	e8 00 00 00 00	 call	 ?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::push_back

; 8485 : 				dev0 = devices.size() - 1;

  004f9	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  004fc	2b 4e 0c	 sub	 ecx, DWORD PTR [esi+12]
  004ff	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00504	f7 e9		 imul	 ecx
  00506	c1 fa 06	 sar	 edx, 6
  00509	8b c2		 mov	 eax, edx
  0050b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0050e	8d 6c 02 ff	 lea	 ebp, DWORD PTR [edx+eax-1]

; 8486 : 			}
; 8487 : 			else

  00512	e9 17 01 00 00	 jmp	 $LN14@GetAvailab
$LN15@GetAvailab:

; 8488 : 			{
; 8489 : 				// System creates a virtual partition1 for some storage devices without
; 8490 : 				// partition table. We try to detect this case by comparing sizes of
; 8491 : 				// partition0 and partition1. If they match, no partition of the device
; 8492 : 				// is displayed to the user to avoid confusion. Drive letter assigned by
; 8493 : 				// system to partition1 is assigned partition0
; 8494 : 				if (partNumber == 1 && devices[dev0].Size == device.Size)

  00517	83 f8 01	 cmp	 eax, 1
  0051a	75 49		 jne	 SHORT $LN680@GetAvailab
  0051c	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0051f	2b 4e 0c	 sub	 ecx, DWORD PTR [esi+12]
  00522	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00527	f7 e9		 imul	 ecx
  00529	c1 fa 06	 sar	 edx, 6
  0052c	8b ca		 mov	 ecx, edx
  0052e	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00531	03 ca		 add	 ecx, edx
  00533	3b e9		 cmp	 ebp, ecx
  00535	72 05		 jb	 SHORT $LN324@GetAvailab
  00537	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN324@GetAvailab:
  0053c	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0053f	8b c5		 mov	 eax, ebp
  00541	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  00547	8b 54 08 60	 mov	 edx, DWORD PTR [eax+ecx+96]
  0054b	3b 94 24 74 01
	00 00		 cmp	 edx, DWORD PTR _device$143105[esp+1892]
  00552	75 11		 jne	 SHORT $LN680@GetAvailab
  00554	8b 44 08 64	 mov	 eax, DWORD PTR [eax+ecx+100]
  00558	3b 84 24 78 01
	00 00		 cmp	 eax, DWORD PTR _device$143105[esp+1896]
  0055f	0f 84 bf 01 00
	00		 je	 $LN674@GetAvailab
$LN680@GetAvailab:

; 8502 : 				}
; 8503 : 
; 8504 : 				device.IsPartition = true;
; 8505 : 				device.SystemNumber = partNumber;

  00565	8b 4c 24 20	 mov	 ecx, DWORD PTR _partNumber$143093[esp+1796]
  00569	89 8c 24 7c 01
	00 00		 mov	 DWORD PTR _device$143105[esp+1900], ecx

; 8506 : 				device.Removable = devices[dev0].Removable;

  00570	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00573	2b 4e 0c	 sub	 ecx, DWORD PTR [esi+12]
  00576	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0057b	f7 e9		 imul	 ecx
  0057d	c1 fa 06	 sar	 edx, 6
  00580	8b c2		 mov	 eax, edx
  00582	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00585	03 c2		 add	 eax, edx
  00587	c6 84 24 18 01
	00 00 01	 mov	 BYTE PTR _device$143105[esp+1800], 1
  0058f	3b e8		 cmp	 ebp, eax
  00591	72 05		 jb	 SHORT $LN417@GetAvailab
  00593	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN417@GetAvailab:
  00598	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0059b	8b fd		 mov	 edi, ebp
  0059d	69 ff 88 00 00
	00		 imul	 edi, 136		; 00000088H

; 8507 : 
; 8508 : 				if (device.ContainsSystem)

  005a3	80 bc 24 15 01
	00 00 00	 cmp	 BYTE PTR _device$143105[esp+1797], 0
  005ab	8a 4c 07 5c	 mov	 cl, BYTE PTR [edi+eax+92]
  005af	88 8c 24 70 01
	00 00		 mov	 BYTE PTR _device$143105[esp+1888], cl
  005b6	74 27		 je	 SHORT $LN12@GetAvailab

; 8509 : 					devices[dev0].ContainsSystem = true;

  005b8	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  005bb	2b c8		 sub	 ecx, eax
  005bd	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  005c2	f7 e9		 imul	 ecx
  005c4	c1 fa 06	 sar	 edx, 6
  005c7	8b c2		 mov	 eax, edx
  005c9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  005cc	03 c2		 add	 eax, edx
  005ce	3b e8		 cmp	 ebp, eax
  005d0	72 05		 jb	 SHORT $LN425@GetAvailab
  005d2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN425@GetAvailab:
  005d7	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  005da	c6 44 0f 01 01	 mov	 BYTE PTR [edi+ecx+1], 1
$LN12@GetAvailab:

; 8510 : 
; 8511 : 				if (singleList)

  005df	80 bc 24 10 07
	00 00 00	 cmp	 BYTE PTR _singleList$[esp+1792], 0
  005e7	74 0f		 je	 SHORT $LN11@GetAvailab

; 8512 : 					devices.push_back (device);

  005e9	8d 94 24 14 01
	00 00		 lea	 edx, DWORD PTR _device$143105[esp+1796]
  005f0	52		 push	 edx
  005f1	8b ce		 mov	 ecx, esi
  005f3	e8 00 00 00 00	 call	 ?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::push_back
$LN11@GetAvailab:

; 8513 : 
; 8514 : 				devices[dev0].Partitions.push_back (device);

  005f8	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  005fb	2b 4e 0c	 sub	 ecx, DWORD PTR [esi+12]
  005fe	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00603	f7 e9		 imul	 ecx
  00605	c1 fa 06	 sar	 edx, 6
  00608	8b c2		 mov	 eax, edx
  0060a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0060d	03 c2		 add	 eax, edx
  0060f	3b e8		 cmp	 ebp, eax
  00611	72 05		 jb	 SHORT $LN433@GetAvailab
  00613	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN433@GetAvailab:
  00618	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0061b	8d 8c 24 14 01
	00 00		 lea	 ecx, DWORD PTR _device$143105[esp+1796]
  00622	51		 push	 ecx
  00623	8d 4c 17 6c	 lea	 ecx, DWORD PTR [edi+edx+108]
  00627	e8 00 00 00 00	 call	 ?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::push_back
  0062c	33 ff		 xor	 edi, edi
$LN14@GetAvailab:

; 8515 : 			}
; 8516 : 		}

  0062e	8d 8c 24 14 01
	00 00		 lea	 ecx, DWORD PTR _device$143105[esp+1796]
  00635	c6 84 24 00 07
	00 00 05	 mov	 BYTE PTR __$EHRec$[esp+1804], 5
  0063d	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00642	83 bc 24 10 01
	00 00 10	 cmp	 DWORD PTR _devPathStr$143100[esp+1820], 16 ; 00000010H
  0064a	72 10		 jb	 SHORT $LN455@GetAvailab
  0064c	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR _devPathStr$143100[esp+1800]
  00653	50		 push	 eax
  00654	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00659	83 c4 04	 add	 esp, 4
$LN455@GetAvailab:
  0065c	8d 8c 24 88 00
	00 00		 lea	 ecx, DWORD PTR _strm$143097[esp+1880]
  00663	c7 84 24 10 01
	00 00 0f 00 00
	00		 mov	 DWORD PTR _devPathStr$143100[esp+1820], 15 ; 0000000fH
  0066e	89 bc 24 0c 01
	00 00		 mov	 DWORD PTR _devPathStr$143100[esp+1816], edi
  00675	c6 84 24 fc 00
	00 00 00	 mov	 BYTE PTR _devPathStr$143100[esp+1800], 0
  0067d	c6 84 24 00 07
	00 00 00	 mov	 BYTE PTR __$EHRec$[esp+1804], 0
  00685	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  0068a	8d 8c 24 88 00
	00 00		 lea	 ecx, DWORD PTR _strm$143097[esp+1880]
  00691	51		 push	 ecx
$LN690@GetAvailab:
  00692	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _strm$143097[esp+1884], OFFSET ??_7ios_base@std@@6B@
  0069d	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  006a2	8b 44 24 24	 mov	 eax, DWORD PTR _partNumber$143093[esp+1800]
  006a6	40		 inc	 eax
  006a7	83 c4 04	 add	 esp, 4
  006aa	83 f8 20	 cmp	 eax, 32			; 00000020H
  006ad	89 44 24 20	 mov	 DWORD PTR _partNumber$143093[esp+1796], eax
  006b1	0f 8c c9 f9 ff
	ff		 jl	 $LL26@GetAvailab

; 8488 : 			{
; 8489 : 				// System creates a virtual partition1 for some storage devices without
; 8490 : 				// partition table. We try to detect this case by comparing sizes of
; 8491 : 				// partition0 and partition1. If they match, no partition of the device
; 8492 : 				// is displayed to the user to avoid confusion. Drive letter assigned by
; 8493 : 				// system to partition1 is assigned partition0
; 8494 : 				if (partNumber == 1 && devices[dev0].Size == device.Size)

  006b7	e9 eb 01 00 00	 jmp	 $LN28@GetAvailab
$LN673@GetAvailab:

; 8438 : 					break;

  006bc	83 bc 24 10 01
	00 00 10	 cmp	 DWORD PTR _devPathStr$143100[esp+1820], 16 ; 00000010H
  006c4	72 10		 jb	 SHORT $LN140@GetAvailab
  006c6	8b 94 24 fc 00
	00 00		 mov	 edx, DWORD PTR _devPathStr$143100[esp+1800]
  006cd	52		 push	 edx
  006ce	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  006d3	83 c4 04	 add	 esp, 4
$LN140@GetAvailab:
  006d6	8d 8c 24 88 00
	00 00		 lea	 ecx, DWORD PTR _strm$143097[esp+1880]
  006dd	c7 84 24 10 01
	00 00 0f 00 00
	00		 mov	 DWORD PTR _devPathStr$143100[esp+1820], 15 ; 0000000fH
  006e8	89 bc 24 0c 01
	00 00		 mov	 DWORD PTR _devPathStr$143100[esp+1816], edi
  006ef	c6 84 24 fc 00
	00 00 00	 mov	 BYTE PTR _devPathStr$143100[esp+1800], 0
  006f7	c6 84 24 00 07
	00 00 00	 mov	 BYTE PTR __$EHRec$[esp+1804], 0
  006ff	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  00704	8d 84 24 88 00
	00 00		 lea	 eax, DWORD PTR _strm$143097[esp+1880]
  0070b	50		 push	 eax
  0070c	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _strm$143097[esp+1884], OFFSET ??_7ios_base@std@@6B@
  00717	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0071c	83 c4 04	 add	 esp, 4
  0071f	e9 83 01 00 00	 jmp	 $LN28@GetAvailab
$LN674@GetAvailab:

; 8495 : 				{
; 8496 : 					devices[dev0].IsVirtualPartition = true;

  00724	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00727	2b 4e 0c	 sub	 ecx, DWORD PTR [esi+12]
  0072a	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0072f	f7 e9		 imul	 ecx
  00731	c1 fa 06	 sar	 edx, 6
  00734	8b ca		 mov	 ecx, edx
  00736	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00739	03 ca		 add	 ecx, edx
  0073b	3b e9		 cmp	 ebp, ecx
  0073d	72 05		 jb	 SHORT $LN332@GetAvailab
  0073f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN332@GetAvailab:
  00744	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00747	8b fd		 mov	 edi, ebp
  00749	69 ff 88 00 00
	00		 imul	 edi, 136		; 00000088H
  0074f	c6 44 17 05 01	 mov	 BYTE PTR [edi+edx+5], 1

; 8497 : 					devices[dev0].MountPoint = device.MountPoint;

  00754	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00757	2b 4e 0c	 sub	 ecx, DWORD PTR [esi+12]
  0075a	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0075f	f7 e9		 imul	 ecx
  00761	c1 fa 06	 sar	 edx, 6
  00764	8b c2		 mov	 eax, edx
  00766	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00769	03 c2		 add	 eax, edx
  0076b	3b e8		 cmp	 ebp, eax
  0076d	72 05		 jb	 SHORT $LN340@GetAvailab
  0076f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN340@GetAvailab:
  00774	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00777	6a ff		 push	 -1
  00779	6a 00		 push	 0
  0077b	8d 94 24 24 01
	00 00		 lea	 edx, DWORD PTR _device$143105[esp+1812]
  00782	8d 4c 0f 08	 lea	 ecx, DWORD PTR [edi+ecx+8]
  00786	52		 push	 edx
  00787	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 8498 : 					devices[dev0].Name = device.Name;

  0078c	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0078f	2b 4e 0c	 sub	 ecx, DWORD PTR [esi+12]
  00792	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00797	f7 e9		 imul	 ecx
  00799	c1 fa 06	 sar	 edx, 6
  0079c	8b c2		 mov	 eax, edx
  0079e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  007a1	03 c2		 add	 eax, edx
  007a3	3b e8		 cmp	 ebp, eax
  007a5	72 05		 jb	 SHORT $LN352@GetAvailab
  007a7	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN352@GetAvailab:
  007ac	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  007af	6a ff		 push	 -1
  007b1	6a 00		 push	 0
  007b3	8d 94 24 40 01
	00 00		 lea	 edx, DWORD PTR _device$143105[esp+1840]
  007ba	8d 4c 0f 24	 lea	 ecx, DWORD PTR [edi+ecx+36]
  007be	52		 push	 edx
  007bf	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 8499 : 					devices[dev0].Path = device.Path;

  007c4	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  007c7	2b 4e 0c	 sub	 ecx, DWORD PTR [esi+12]
  007ca	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  007cf	f7 e9		 imul	 ecx
  007d1	c1 fa 06	 sar	 edx, 6
  007d4	8b c2		 mov	 eax, edx
  007d6	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  007d9	03 c2		 add	 eax, edx
  007db	3b e8		 cmp	 ebp, eax
  007dd	72 05		 jb	 SHORT $LN364@GetAvailab
  007df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN364@GetAvailab:
  007e4	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  007e7	6a ff		 push	 -1
  007e9	6a 00		 push	 0
  007eb	8d 94 24 5c 01
	00 00		 lea	 edx, DWORD PTR _device$143105[esp+1868]
  007f2	8d 4c 0f 40	 lea	 ecx, DWORD PTR [edi+ecx+64]
  007f6	52		 push	 edx
  007f7	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 8500 : 					devices[dev0].HasUnencryptedFilesystem = device.HasUnencryptedFilesystem;

  007fc	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  007ff	2b 4e 0c	 sub	 ecx, DWORD PTR [esi+12]
  00802	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00807	f7 e9		 imul	 ecx
  00809	c1 fa 06	 sar	 edx, 6
  0080c	8b c2		 mov	 eax, edx
  0080e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00811	03 c2		 add	 eax, edx
  00813	3b e8		 cmp	 ebp, eax
  00815	72 05		 jb	 SHORT $LN376@GetAvailab
  00817	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN376@GetAvailab:
  0081c	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0081f	8a 94 24 1a 01
	00 00		 mov	 dl, BYTE PTR _device$143105[esp+1802]
  00826	88 54 0f 06	 mov	 BYTE PTR [edi+ecx+6], dl

; 8501 : 					break;

  0082a	8d 8c 24 14 01
	00 00		 lea	 ecx, DWORD PTR _device$143105[esp+1796]
  00831	c6 84 24 00 07
	00 00 05	 mov	 BYTE PTR __$EHRec$[esp+1804], 5
  00839	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  0083e	83 bc 24 10 01
	00 00 10	 cmp	 DWORD PTR _devPathStr$143100[esp+1820], 16 ; 00000010H
  00846	72 10		 jb	 SHORT $LN398@GetAvailab
  00848	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR _devPathStr$143100[esp+1800]
  0084f	50		 push	 eax
  00850	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00855	83 c4 04	 add	 esp, 4
$LN398@GetAvailab:
  00858	8d 8c 24 88 00
	00 00		 lea	 ecx, DWORD PTR _strm$143097[esp+1880]
  0085f	c7 84 24 10 01
	00 00 0f 00 00
	00		 mov	 DWORD PTR _devPathStr$143100[esp+1820], 15 ; 0000000fH
  0086a	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR _devPathStr$143100[esp+1816], 0
  00875	c6 84 24 fc 00
	00 00 00	 mov	 BYTE PTR _devPathStr$143100[esp+1800], 0
  0087d	c6 84 24 00 07
	00 00 00	 mov	 BYTE PTR __$EHRec$[esp+1804], 0
  00885	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  0088a	8d 8c 24 88 00
	00 00		 lea	 ecx, DWORD PTR _strm$143097[esp+1880]
  00891	51		 push	 ecx
  00892	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _strm$143097[esp+1884], OFFSET ??_7ios_base@std@@6B@
  0089d	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  008a2	83 c4 04	 add	 esp, 4
  008a5	33 ff		 xor	 edi, edi
$LN28@GetAvailab:
  008a7	8b 44 24 28	 mov	 eax, DWORD PTR _devNumber$143089[esp+1796]
  008ab	40		 inc	 eax
  008ac	83 f8 40	 cmp	 eax, 64			; 00000040H
  008af	89 44 24 28	 mov	 DWORD PTR _devNumber$143089[esp+1796], eax
  008b3	0f 8c b7 f7 ff
	ff		 jl	 $LL29@GetAvailab

; 8517 : 	}
; 8518 : 
; 8519 : 	// Vista does not create partition links for dynamic volumes so it is necessary to scan \\Device\\HarddiskVolumeX devices
; 8520 : 	if (CurrentOSMajor >= 6)

  008b9	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR _CurrentOSMajor, 6
  008c0	0f 8c 8a 03 00
	00		 jl	 $LN683@GetAvailab

; 8521 : 	{
; 8522 : 		for (int devNumber = 0; devNumber < 256; devNumber++)

  008c6	0f b6 94 24 18
	07 00 00	 movzx	 edx, BYTE PTR _detectUnencryptedFilesystems$[esp+1792]
  008ce	33 db		 xor	 ebx, ebx
  008d0	33 ed		 xor	 ebp, ebp
  008d2	89 54 24 28	 mov	 DWORD PTR tv1944[esp+1796], edx
$LN9@GetAvailab:

; 8523 : 		{
; 8524 : 			stringstream strm;

  008d6	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR _strm$143301[esp+1796], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  008de	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR _strm$143301[esp+1804], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  008e6	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _strm$143301[esp+1880], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  008f1	83 4c 24 24 08	 or	 DWORD PTR $T202349[esp+1796], 8
  008f6	53		 push	 ebx
  008f7	8d 44 24 44	 lea	 eax, DWORD PTR _strm$143301[esp+1812]
  008fb	50		 push	 eax
  008fc	8d 4c 24 3c	 lea	 ecx, DWORD PTR _strm$143301[esp+1804]
  00900	c7 84 24 08 07
	00 00 0b 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+1812], 11 ; 0000000bH
  0090b	e8 00 00 00 00	 call	 ??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >
  00910	8b 4c 24 34	 mov	 ecx, DWORD PTR _strm$143301[esp+1796]
  00914	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00917	8d 4c 24 40	 lea	 ecx, DWORD PTR _strm$143301[esp+1808]
  0091b	c7 84 24 00 07
	00 00 0c 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+1804], 12 ; 0000000cH
  00926	c7 44 14 34 00
	00 00 00	 mov	 DWORD PTR _strm$143301[esp+edx+1796], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0092e	e8 00 00 00 00	 call	 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
  00933	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR _strm$143301[esp+1808], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0093b	89 5c 24 7c	 mov	 DWORD PTR _strm$143301[esp+1868], ebx
  0093f	89 9c 24 80 00
	00 00		 mov	 DWORD PTR _strm$143301[esp+1872], ebx

; 8525 : 			strm << "\\Device\\HarddiskVolume" << devNumber;

  00946	55		 push	 ebp
  00947	8d 44 24 40	 lea	 eax, DWORD PTR _strm$143301[esp+1808]
  0094b	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GHLJCPDI@?2Device?2HarddiskVolume?$AA@
  00950	50		 push	 eax
  00951	c7 84 24 0c 07
	00 00 0e 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+1816], 14 ; 0000000eH
  0095c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00961	83 c4 08	 add	 esp, 8
  00964	8b c8		 mov	 ecx, eax
  00966	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<

; 8526 : 			string devPathStr (strm.str());

  0096b	8d 8c 24 f8 00
	00 00		 lea	 ecx, DWORD PTR _devPathStr$143303[esp+1796]
  00972	51		 push	 ecx
  00973	8d 4c 24 38	 lea	 ecx, DWORD PTR _strm$143301[esp+1800]
  00977	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str

; 8527 : 			const char *devPath = devPathStr.c_str();

  0097c	83 bc 24 10 01
	00 00 10	 cmp	 DWORD PTR _devPathStr$143303[esp+1820], 16 ; 00000010H
  00984	8b bc 24 fc 00
	00 00		 mov	 edi, DWORD PTR _devPathStr$143303[esp+1800]
  0098b	c6 84 24 00 07
	00 00 0f	 mov	 BYTE PTR __$EHRec$[esp+1804], 15 ; 0000000fH
  00993	73 07		 jae	 SHORT $LN536@GetAvailab
  00995	8d bc 24 fc 00
	00 00		 lea	 edi, DWORD PTR _devPathStr$143303[esp+1800]
$LN536@GetAvailab:

; 8528 : 
; 8529 : 			OPEN_TEST_STRUCT openTest;
; 8530 : 			if (!OpenDevice (devPath, &openTest, detectUnencryptedFilesystems))

  0099c	8b 54 24 28	 mov	 edx, DWORD PTR tv1944[esp+1796]
  009a0	52		 push	 edx
  009a1	8d 84 24 58 04
	00 00		 lea	 eax, DWORD PTR _openTest$143305[esp+1800]
  009a8	50		 push	 eax
  009a9	57		 push	 edi
  009aa	e8 00 00 00 00	 call	 _OpenDevice
  009af	83 c4 0c	 add	 esp, 12			; 0000000cH
  009b2	85 c0		 test	 eax, eax

; 8531 : 				continue;

  009b4	0f 84 26 02 00
	00		 je	 $LN5@GetAvailab

; 8532 : 
; 8533 : 			DISK_PARTITION_INFO_STRUCT info;
; 8534 : 			if (GetDeviceInfo (devPath, &info) && info.IsDynamic)

  009ba	8d 84 24 24 02
	00 00		 lea	 eax, DWORD PTR _info$143307[esp+1796]
  009c1	50		 push	 eax
  009c2	57		 push	 edi
  009c3	e8 00 00 00 00	 call	 _GetDeviceInfo
  009c8	83 c4 08	 add	 esp, 8
  009cb	85 c0		 test	 eax, eax
  009cd	0f 84 0d 02 00
	00		 je	 $LN5@GetAvailab
  009d3	39 9c 24 50 04
	00 00		 cmp	 DWORD PTR _info$143307[esp+2352], ebx
  009da	0f 84 00 02 00
	00		 je	 $LN5@GetAvailab

; 8535 : 			{
; 8536 : 				HostDevice device;

  009e0	8d 8c 24 9c 01
	00 00		 lea	 ecx, DWORD PTR _device$143309[esp+1796]
  009e7	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@XZ	; HostDevice::HostDevice

; 8537 : 				device.DynamicVolume = true;
; 8538 : 				device.IsPartition = true;
; 8539 : 				device.SystemNumber = devNumber;
; 8540 : 				device.Path = devPath;

  009ec	8b c7		 mov	 eax, edi
  009ee	c6 84 24 00 07
	00 00 10	 mov	 BYTE PTR __$EHRec$[esp+1804], 16 ; 00000010H
  009f6	c6 84 24 9e 01
	00 00 01	 mov	 BYTE PTR _device$143309[esp+1798], 1
  009fe	c6 84 24 a0 01
	00 00 01	 mov	 BYTE PTR _device$143309[esp+1800], 1
  00a06	89 ac 24 04 02
	00 00		 mov	 DWORD PTR _device$143309[esp+1900], ebp
  00a0d	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL681@GetAvailab:
  00a10	8a 08		 mov	 cl, BYTE PTR [eax]
  00a12	40		 inc	 eax
  00a13	84 c9		 test	 cl, cl
  00a15	75 f9		 jne	 SHORT $LL681@GetAvailab
  00a17	2b c2		 sub	 eax, edx
  00a19	50		 push	 eax
  00a1a	57		 push	 edi
  00a1b	8d 8c 24 e4 01
	00 00		 lea	 ecx, DWORD PTR _device$143309[esp+1868]
  00a22	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 8541 : 				device.Size = info.partInfo.PartitionLength.QuadPart;
; 8542 : 				device.HasUnencryptedFilesystem = (detectUnencryptedFilesystems && openTest.FilesystemDetected) ? true : false;

  00a27	80 bc 24 18 07
	00 00 00	 cmp	 BYTE PTR _detectUnencryptedFilesystems$[esp+1792], 0
  00a2f	8b 8c 24 34 04
	00 00		 mov	 ecx, DWORD PTR _info$143307[esp+2324]
  00a36	8b 94 24 38 04
	00 00		 mov	 edx, DWORD PTR _info$143307[esp+2328]
  00a3d	89 8c 24 fc 01
	00 00		 mov	 DWORD PTR _device$143309[esp+1892], ecx
  00a44	89 94 24 00 02
	00 00		 mov	 DWORD PTR _device$143309[esp+1896], edx
  00a4b	74 11		 je	 SHORT $LN42@GetAvailab
  00a4d	c6 84 24 a2 01
	00 00 01	 mov	 BYTE PTR _device$143309[esp+1802], 1
  00a55	39 9c 24 68 06
	00 00		 cmp	 DWORD PTR _openTest$143305[esp+2328], ebx
  00a5c	75 08		 jne	 SHORT $LN43@GetAvailab
$LN42@GetAvailab:
  00a5e	c6 84 24 a2 01
	00 00 00	 mov	 BYTE PTR _device$143309[esp+1802], 0
$LN43@GetAvailab:

; 8543 : 
; 8544 : 				if (!noDeviceProperties)

  00a66	80 bc 24 0c 07
	00 00 00	 cmp	 BYTE PTR _noDeviceProperties$[esp+1792], 0
  00a6e	0f 85 49 01 00
	00		 jne	 $LN635@GetAvailab

; 8545 : 				{
; 8546 : 					wstringstream ws;

  00a74	6a 01		 push	 1
  00a76	6a 03		 push	 3
  00a78	8d 8c 24 1c 01
	00 00		 lea	 ecx, DWORD PTR _ws$143311[esp+1804]
  00a7f	e8 00 00 00 00	 call	 ??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 8547 : 					ws << devPathStr.c_str();

  00a84	83 bc 24 10 01
	00 00 10	 cmp	 DWORD PTR _devPathStr$143303[esp+1820], 16 ; 00000010H
  00a8c	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR _devPathStr$143303[esp+1800]
  00a93	c6 84 24 00 07
	00 00 11	 mov	 BYTE PTR __$EHRec$[esp+1804], 17 ; 00000011H
  00a9b	73 07		 jae	 SHORT $LN581@GetAvailab
  00a9d	8d 84 24 fc 00
	00 00		 lea	 eax, DWORD PTR _devPathStr$143303[esp+1800]
$LN581@GetAvailab:
  00aa4	50		 push	 eax
  00aa5	8d 84 24 20 01
	00 00		 lea	 eax, DWORD PTR _ws$143311[esp+1808]
  00aac	50		 push	 eax
  00aad	e8 00 00 00 00	 call	 ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
  00ab2	83 c4 08	 add	 esp, 8

; 8548 : 					int driveNumber = GetDiskDeviceDriveLetter ((wchar_t *) ws.str().c_str());

  00ab5	8d 8c 24 bc 00
	00 00		 lea	 ecx, DWORD PTR $T202347[esp+1796]
  00abc	51		 push	 ecx
  00abd	8d 8c 24 18 01
	00 00		 lea	 ecx, DWORD PTR _ws$143311[esp+1800]
  00ac4	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
  00ac9	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  00acd	72 05		 jb	 SHORT $LN586@GetAvailab
  00acf	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00ad2	eb 03		 jmp	 SHORT $LN587@GetAvailab
$LN586@GetAvailab:
  00ad4	83 c0 04	 add	 eax, 4
$LN587@GetAvailab:
  00ad7	50		 push	 eax
  00ad8	e8 00 00 00 00	 call	 _GetDiskDeviceDriveLetter
  00add	83 c4 04	 add	 esp, 4
  00ae0	83 bc 24 d4 00
	00 00 08	 cmp	 DWORD PTR $T202347[esp+1820], 8
  00ae8	8b d8		 mov	 ebx, eax
  00aea	72 10		 jb	 SHORT $LN606@GetAvailab
  00aec	8b 94 24 c0 00
	00 00		 mov	 edx, DWORD PTR $T202347[esp+1800]
  00af3	52		 push	 edx
  00af4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00af9	83 c4 04	 add	 esp, 4
$LN606@GetAvailab:

; 8549 : 
; 8550 : 					if (driveNumber >= 0)

  00afc	85 db		 test	 ebx, ebx
  00afe	0f 8c 88 00 00
	00		 jl	 $LN1@GetAvailab

; 8551 : 					{
; 8552 : 						device.MountPoint += (char) (driveNumber + 'A');

  00b04	8a c3		 mov	 al, bl
  00b06	04 41		 add	 al, 65			; 00000041H
  00b08	0f b6 c8	 movzx	 ecx, al
  00b0b	51		 push	 ecx
  00b0c	6a 01		 push	 1
  00b0e	8d 8c 24 ac 01
	00 00		 lea	 ecx, DWORD PTR _device$143309[esp+1812]
  00b15	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 8553 : 						device.MountPoint += ":";

  00b1a	6a 01		 push	 1
  00b1c	68 00 00 00 00	 push	 OFFSET ??_C@_01JLIPDDHJ@?3?$AA@
  00b21	8d 8c 24 ac 01
	00 00		 lea	 ecx, DWORD PTR _device$143309[esp+1812]
  00b28	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 8554 : 
; 8555 : 						wchar_t name[64];
; 8556 : 						if (GetDriveLabel (driveNumber, name, sizeof (name)))

  00b2d	68 80 00 00 00	 push	 128			; 00000080H
  00b32	8d 94 24 78 06
	00 00		 lea	 edx, DWORD PTR _name$143317[esp+1800]
  00b39	52		 push	 edx
  00b3a	53		 push	 ebx
  00b3b	e8 00 00 00 00	 call	 _GetDriveLabel
  00b40	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b43	85 c0		 test	 eax, eax
  00b45	74 2e		 je	 SHORT $LN624@GetAvailab

; 8557 : 							device.Name = name;

  00b47	8d 84 24 74 06
	00 00		 lea	 eax, DWORD PTR _name$143317[esp+1796]
  00b4e	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL682@GetAvailab:
  00b51	66 8b 08	 mov	 cx, WORD PTR [eax]
  00b54	83 c0 02	 add	 eax, 2
  00b57	66 85 c9	 test	 cx, cx
  00b5a	75 f5		 jne	 SHORT $LL682@GetAvailab
  00b5c	2b c2		 sub	 eax, edx
  00b5e	d1 f8		 sar	 eax, 1
  00b60	50		 push	 eax
  00b61	8d 84 24 78 06
	00 00		 lea	 eax, DWORD PTR _name$143317[esp+1800]
  00b68	50		 push	 eax
  00b69	8d 8c 24 c8 01
	00 00		 lea	 ecx, DWORD PTR _device$143309[esp+1840]
  00b70	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
$LN624@GetAvailab:

; 8558 : 
; 8559 : 						if (GetSystemDriveLetter() == 'A' + driveNumber)

  00b75	e8 00 00 00 00	 call	 _GetSystemDriveLetter
  00b7a	0f be c8	 movsx	 ecx, al
  00b7d	83 c3 41	 add	 ebx, 65			; 00000041H
  00b80	3b cb		 cmp	 ecx, ebx
  00b82	75 08		 jne	 SHORT $LN1@GetAvailab

; 8560 : 							device.ContainsSystem = true;

  00b84	c6 84 24 9d 01
	00 00 01	 mov	 BYTE PTR _device$143309[esp+1797], 1
$LN1@GetAvailab:

; 8561 : 					}
; 8562 : 				}

  00b8c	8d 8c 24 68 01
	00 00		 lea	 ecx, DWORD PTR _ws$143311[esp+1880]
  00b93	c6 84 24 00 07
	00 00 10	 mov	 BYTE PTR __$EHRec$[esp+1804], 16 ; 00000010H
  00b9b	e8 00 00 00 00	 call	 ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00ba0	8d 94 24 68 01
	00 00		 lea	 edx, DWORD PTR _ws$143311[esp+1880]
  00ba7	52		 push	 edx
  00ba8	c7 84 24 6c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR _ws$143311[esp+1884], OFFSET ??_7ios_base@std@@6B@
  00bb3	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00bb8	83 c4 04	 add	 esp, 4
  00bbb	33 db		 xor	 ebx, ebx
$LN635@GetAvailab:

; 8563 : 
; 8564 : 				devices.push_back (device);

  00bbd	8d 84 24 9c 01
	00 00		 lea	 eax, DWORD PTR _device$143309[esp+1796]
  00bc4	50		 push	 eax
  00bc5	8b ce		 mov	 ecx, esi
  00bc7	e8 00 00 00 00	 call	 ?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::push_back

; 8565 : 			}

  00bcc	8d 8c 24 9c 01
	00 00		 lea	 ecx, DWORD PTR _device$143309[esp+1796]
  00bd3	c6 84 24 00 07
	00 00 0f	 mov	 BYTE PTR __$EHRec$[esp+1804], 15 ; 0000000fH
  00bdb	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
$LN5@GetAvailab:

; 8566 : 		}

  00be0	83 bc 24 10 01
	00 00 10	 cmp	 DWORD PTR _devPathStr$143303[esp+1820], 16 ; 00000010H
  00be8	72 10		 jb	 SHORT $LN653@GetAvailab
  00bea	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR _devPathStr$143303[esp+1800]
  00bf1	51		 push	 ecx
  00bf2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00bf7	83 c4 04	 add	 esp, 4
$LN653@GetAvailab:
  00bfa	8d 8c 24 88 00
	00 00		 lea	 ecx, DWORD PTR _strm$143301[esp+1880]
  00c01	c7 84 24 10 01
	00 00 0f 00 00
	00		 mov	 DWORD PTR _devPathStr$143303[esp+1820], 15 ; 0000000fH
  00c0c	89 9c 24 0c 01
	00 00		 mov	 DWORD PTR _devPathStr$143303[esp+1816], ebx
  00c13	c6 84 24 fc 00
	00 00 00	 mov	 BYTE PTR _devPathStr$143303[esp+1800], 0
  00c1b	c6 84 24 00 07
	00 00 00	 mov	 BYTE PTR __$EHRec$[esp+1804], 0
  00c23	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  00c28	8d 94 24 88 00
	00 00		 lea	 edx, DWORD PTR _strm$143301[esp+1880]
  00c2f	52		 push	 edx
  00c30	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _strm$143301[esp+1884], OFFSET ??_7ios_base@std@@6B@
  00c3b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00c40	45		 inc	 ebp
  00c41	83 c4 04	 add	 esp, 4
  00c44	81 fd 00 01 00
	00		 cmp	 ebp, 256		; 00000100H
  00c4a	0f 8c 86 fc ff
	ff		 jl	 $LN9@GetAvailab
$LN683@GetAvailab:

; 8567 : 	}
; 8568 : 
; 8569 : 	return devices;

  00c50	8b c6		 mov	 eax, esi

; 8570 : }

  00c52	8b 8c 24 f8 06
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+1796]
  00c59	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00c60	59		 pop	 ecx
  00c61	5f		 pop	 edi
  00c62	5e		 pop	 esi
  00c63	5d		 pop	 ebp
  00c64	5b		 pop	 ebx
  00c65	8b 8c 24 e0 06
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1776]
  00c6c	33 cc		 xor	 ecx, esp
  00c6e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00c73	81 c4 f0 06 00
	00		 add	 esp, 1776		; 000006f0H
  00c79	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$0:
  00000	8b 85 20 f9 ff
	ff		 mov	 eax, DWORD PTR $T202349[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 12 00 00
	00		 je	 $LN47@GetAvailab
  0000f	83 a5 20 f9 ff
	ff fe		 and	 DWORD PTR $T202349[ebp], -2 ; fffffffeH
  00016	8b 8d 2c f9 ff
	ff		 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
$LN47@GetAvailab:
  00021	c3		 ret	 0
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$11:
  00022	8b 85 20 f9 ff
	ff		 mov	 eax, DWORD PTR $T202349[ebp]
  00028	83 e0 02	 and	 eax, 2
  0002b	0f 84 12 00 00
	00		 je	 $LN62@GetAvailab
  00031	83 a5 20 f9 ff
	ff fd		 and	 DWORD PTR $T202349[ebp], -3 ; fffffffdH
  00038	8d 8d 84 f9 ff
	ff		 lea	 ecx, DWORD PTR _strm$143097[ebp+84]
  0003e	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN62@GetAvailab:
  00043	c3		 ret	 0
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$12:
  00044	8d 8d 3c f9 ff
	ff		 lea	 ecx, DWORD PTR _strm$143097[ebp+12]
  0004a	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$14:
  0004f	8b 8d 18 f9 ff
	ff		 mov	 ecx, DWORD PTR $T202544[ebp]
  00055	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$1:
  0005a	8d 8d 30 f9 ff
	ff		 lea	 ecx, DWORD PTR _strm$143097[ebp]
  00060	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$2:
  00065	8d 8d f4 f9 ff
	ff		 lea	 ecx, DWORD PTR _devPathStr$143100[ebp]
  0006b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$3:
  00070	8d 8d 10 fa ff
	ff		 lea	 ecx, DWORD PTR _device$143105[ebp]
  00076	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$17:
  0007b	8b 85 20 f9 ff
	ff		 mov	 eax, DWORD PTR $T202349[ebp]
  00081	83 e0 04	 and	 eax, 4
  00084	0f 84 12 00 00
	00		 je	 $LN200@GetAvailab
  0008a	83 a5 20 f9 ff
	ff fb		 and	 DWORD PTR $T202349[ebp], -5 ; fffffffbH
  00091	8d 8d ec fa ff
	ff		 lea	 ecx, DWORD PTR _ws$143260[ebp+84]
  00097	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN200@GetAvailab:
  0009c	c3		 ret	 0
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$18:
  0009d	8d 8d a4 fa ff
	ff		 lea	 ecx, DWORD PTR _ws$143260[ebp+12]
  000a3	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$20:
  000a8	8b 8d 14 f9 ff
	ff		 mov	 ecx, DWORD PTR $T203081[ebp]
  000ae	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$4:
  000b3	8d 8d 98 fa ff
	ff		 lea	 ecx, DWORD PTR _ws$143260[ebp]
  000b9	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$24:
  000be	8b 85 20 f9 ff
	ff		 mov	 eax, DWORD PTR $T202349[ebp]
  000c4	83 e0 08	 and	 eax, 8
  000c7	0f 84 12 00 00
	00		 je	 $LN476@GetAvailab
  000cd	83 a5 20 f9 ff
	ff f7		 and	 DWORD PTR $T202349[ebp], -9 ; fffffff7H
  000d4	8d 8d 84 f9 ff
	ff		 lea	 ecx, DWORD PTR _strm$143301[ebp+84]
  000da	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN476@GetAvailab:
  000df	c3		 ret	 0
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$25:
  000e0	8d 8d 3c f9 ff
	ff		 lea	 ecx, DWORD PTR _strm$143301[ebp+12]
  000e6	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$27:
  000eb	8b 8d 10 f9 ff
	ff		 mov	 ecx, DWORD PTR $T203924[ebp]
  000f1	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$6:
  000f6	8d 8d 30 f9 ff
	ff		 lea	 ecx, DWORD PTR _strm$143301[ebp]
  000fc	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$7:
  00101	8d 8d f4 f9 ff
	ff		 lea	 ecx, DWORD PTR _devPathStr$143303[ebp]
  00107	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$8:
  0010c	8d 8d 98 fa ff
	ff		 lea	 ecx, DWORD PTR _device$143309[ebp]
  00112	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$9:
  00117	8d 8d 10 fa ff
	ff		 lea	 ecx, DWORD PTR _ws$143311[ebp]
  0011d	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
__ehhandler$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z:
  00122	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00126	8d 82 0c f9 ff
	ff		 lea	 eax, DWORD PTR [edx-1780]
  0012c	8b 8a 08 f9 ff
	ff		 mov	 ecx, DWORD PTR [edx-1784]
  00132	33 c8		 xor	 ecx, eax
  00134	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00139	83 c0 10	 add	 eax, 16			; 00000010H
  0013c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0013f	33 c8		 xor	 ecx, eax
  00141	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00146	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z
  0014b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z ENDP ; GetAvailableHostDevices
PUBLIC	?GetSysDevicePaths@@YAHPAUHWND__@@@Z		; GetSysDevicePaths
;	COMDAT xdata$x
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
xdata$x	SEGMENT
__ehfuncinfo$?GetSysDevicePaths@@YAHPAUHWND__@@@Z DD 019930522H
	DD	010H
	DD	FLAT:__unwindtable$?GetSysDevicePaths@@YAHPAUHWND__@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetSysDevicePaths@@YAHPAUHWND__@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$8
	DD	04H
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$10
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$3
	DD	06H
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$4
	DD	08H
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$11
	DD	08H
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$12
	DD	08H
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$6
	DD	08H
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$13
	DD	0cH
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$15
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$16
	DD	0eH
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$18
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
xdata$x	ENDS
;	COMDAT ?GetSysDevicePaths@@YAHPAUHWND__@@@Z
_TEXT	SEGMENT
$T204525 = -212						; size = 4
$T205862 = -208						; size = 4
$T205643 = -208						; size = 4
$T204956 = -208						; size = 4
$T204507 = -204						; size = 24
$T204502 = -204						; size = 24
_$S3$140025 = -180					; size = 48
_$S4$140064 = -132					; size = 48
_$S5$140080 = -84					; size = 48
$T204512 = -36						; size = 24
$T204497 = -36						; size = 24
__$EHRec$ = -12						; size = 12
_hwndDlg$ = 8						; size = 4
?GetSysDevicePaths@@YAHPAUHWND__@@@Z PROC		; GetSysDevicePaths, COMDAT

; 2375 : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?GetSysDevicePaths@@YAHPAUHWND__@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00014	55		 push	 ebp
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 d8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+228]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2376 : 	if (!bCachedSysDevicePathsValid
; 2377 : 		|| strlen (SysPartitionDevicePath) <= 1 
; 2378 : 		|| strlen (SysDriveDevicePath) <= 1)

  0002c	33 f6		 xor	 esi, esi
  0002e	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?bCachedSysDevicePathsValid@@3DA, 0 ; bCachedSysDevicePathsValid
  00035	89 74 24 10	 mov	 DWORD PTR $T204525[esp+228], esi
  00039	74 37		 je	 SHORT $LN24@GetSysDevi
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET ?SysPartitionDevicePath@@3PADA ; SysPartitionDevicePath
  00040	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL395@GetSysDevi:
  00043	8a 08		 mov	 cl, BYTE PTR [eax]
  00045	40		 inc	 eax
  00046	84 c9		 test	 cl, cl
  00048	75 f9		 jne	 SHORT $LL395@GetSysDevi
  0004a	2b c2		 sub	 eax, edx
  0004c	83 f8 01	 cmp	 eax, 1
  0004f	76 21		 jbe	 SHORT $LN24@GetSysDevi
  00051	b8 00 00 00 00	 mov	 eax, OFFSET ?SysDriveDevicePath@@3PADA ; SysDriveDevicePath
  00056	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL396@GetSysDevi:
  00060	8a 08		 mov	 cl, BYTE PTR [eax]
  00062	40		 inc	 eax
  00063	84 c9		 test	 cl, cl
  00065	75 f9		 jne	 SHORT $LL396@GetSysDevi
  00067	2b c2		 sub	 eax, edx
  00069	83 f8 01	 cmp	 eax, 1
  0006c	0f 87 81 05 00
	00		 ja	 $LN25@GetSysDevi
$LN24@GetSysDevi:

; 2379 : 	{
; 2380 : 		foreach (const HostDevice &device, GetAvailableHostDevices (false, true))

  00072	56		 push	 esi
  00073	6a 01		 push	 1
  00075	6a 01		 push	 1
  00077	8d 84 24 cc 00
	00 00		 lea	 eax, DWORD PTR $T204497[esp+240]
  0007e	56		 push	 esi
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z ; GetAvailableHostDevices
  00085	50		 push	 eax
  00086	8d 4c 24 48	 lea	 ecx, DWORD PTR _$S3$140025[esp+252]
  0008a	51		 push	 ecx
  0008b	89 b4 24 fc 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+264], esi
  00092	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
  00097	83 c4 1c	 add	 esp, 28			; 0000001cH
  0009a	8d 8c 24 c0 00
	00 00		 lea	 ecx, DWORD PTR $T204497[esp+228]
  000a1	c6 84 24 e0 00
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+236], 2
  000a9	e8 00 00 00 00	 call	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
  000ae	8b 54 24 30	 mov	 edx, DWORD PTR _$S3$140025[esp+228]
  000b2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000b5	8d 4c 24 30	 lea	 ecx, DWORD PTR _$S3$140025[esp+228]
  000b9	ff d0		 call	 eax
  000bb	84 c0		 test	 al, al
  000bd	0f 84 1d 01 00
	00		 je	 $LN21@GetSysDevi
  000c3	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
$LN23@GetSysDevi:
  000c8	8b 44 24 58	 mov	 eax, DWORD PTR _$S3$140025[esp+268]
  000cc	85 c0		 test	 eax, eax
  000ce	75 0d		 jne	 SHORT $LN391@GetSysDevi
  000d0	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000d5	8b 44 24 58	 mov	 eax, DWORD PTR _$S3$140025[esp+268]
  000d9	85 c0		 test	 eax, eax
  000db	74 04		 je	 SHORT $LN69@GetSysDevi
$LN391@GetSysDevi:
  000dd	8b 00		 mov	 eax, DWORD PTR [eax]
  000df	eb 02		 jmp	 SHORT $LN70@GetSysDevi
$LN69@GetSysDevi:
  000e1	33 c0		 xor	 eax, eax
$LN70@GetSysDevi:
  000e3	8b 4c 24 5c	 mov	 ecx, DWORD PTR _$S3$140025[esp+272]
  000e7	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  000ea	72 05		 jb	 SHORT $LN57@GetSysDevi
  000ec	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN57@GetSysDevi:
  000f1	f6 44 24 10 01	 test	 BYTE PTR $T204525[esp+228], 1
  000f6	8b 6c 24 5c	 mov	 ebp, DWORD PTR _$S3$140025[esp+272]
  000fa	74 6a		 je	 SHORT $LN103@GetSysDevi
  000fc	83 64 24 10 fe	 and	 DWORD PTR $T204525[esp+228], -2 ; fffffffeH
  00101	8b 74 24 24	 mov	 esi, DWORD PTR $T204502[esp+240]
  00105	c6 84 24 e0 00
	00 00 03	 mov	 BYTE PTR __$EHRec$[esp+236], 3
  0010d	85 f6		 test	 esi, esi
  0010f	74 32		 je	 SHORT $LN97@GetSysDevi
  00111	8b 7c 24 28	 mov	 edi, DWORD PTR $T204502[esp+244]
  00115	3b f7		 cmp	 esi, edi
  00117	74 1c		 je	 SHORT $LN85@GetSysDevi
  00119	8d a4 24 00 00
	00 00		 npad	 7
$LL87@GetSysDevi:
  00120	8b ce		 mov	 ecx, esi
  00122	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00127	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0012d	3b f7		 cmp	 esi, edi
  0012f	75 ef		 jne	 SHORT $LL87@GetSysDevi
  00131	8b 74 24 24	 mov	 esi, DWORD PTR $T204502[esp+240]
$LN85@GetSysDevi:
  00135	56		 push	 esi
  00136	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0013b	83 c4 04	 add	 esp, 4
  0013e	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
$LN97@GetSysDevi:
  00143	8b 54 24 18	 mov	 edx, DWORD PTR $T204502[esp+228]
  00147	33 c0		 xor	 eax, eax
  00149	52		 push	 edx
  0014a	89 44 24 28	 mov	 DWORD PTR $T204502[esp+244], eax
  0014e	89 44 24 2c	 mov	 DWORD PTR $T204502[esp+248], eax
  00152	89 44 24 30	 mov	 DWORD PTR $T204502[esp+252], eax
  00156	c6 84 24 e4 00
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+240], 2
  0015e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00163	83 c4 04	 add	 esp, 4
$LN103@GetSysDevi:
  00166	80 7c 24 35 00	 cmp	 BYTE PTR _$S3$140025[esp+233], 0
  0016b	0f 94 c0	 sete	 al
  0016e	88 44 24 35	 mov	 BYTE PTR _$S3$140025[esp+233], al
  00172	84 c0		 test	 al, al
  00174	74 48		 je	 SHORT $LN22@GetSysDevi
$LL107@GetSysDevi:

; 2381 : 		{
; 2382 : 			if (device.ContainsSystem)

  00176	80 7d 01 00	 cmp	 BYTE PTR [ebp+1], 0
  0017a	74 30		 je	 SHORT $LN19@GetSysDevi

; 2383 : 				strcpy_s (device.IsPartition ? SysPartitionDevicePath : SysDriveDevicePath, TC_MAX_PATH, device.Path.c_str()); 

  0017c	80 7d 04 00	 cmp	 BYTE PTR [ebp+4], 0
  00180	b9 00 00 00 00	 mov	 ecx, OFFSET ?SysPartitionDevicePath@@3PADA ; SysPartitionDevicePath
  00185	75 05		 jne	 SHORT $LN31@GetSysDevi
  00187	b9 00 00 00 00	 mov	 ecx, OFFSET ?SysDriveDevicePath@@3PADA ; SysDriveDevicePath
$LN31@GetSysDevi:
  0018c	39 7d 58	 cmp	 DWORD PTR [ebp+88], edi
  0018f	72 05		 jb	 SHORT $LN115@GetSysDevi
  00191	8b 45 44	 mov	 eax, DWORD PTR [ebp+68]
  00194	eb 03		 jmp	 SHORT $LN116@GetSysDevi
$LN115@GetSysDevi:
  00196	8d 45 44	 lea	 eax, DWORD PTR [ebp+68]
$LN116@GetSysDevi:
  00199	50		 push	 eax
  0019a	68 04 01 00 00	 push	 260			; 00000104H
  0019f	51		 push	 ecx
  001a0	e8 00 00 00 00	 call	 _strcpy_s
  001a5	8a 44 24 41	 mov	 al, BYTE PTR _$S3$140025[esp+245]
  001a9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN19@GetSysDevi:
  001ac	84 c0		 test	 al, al
  001ae	0f 94 c0	 sete	 al
  001b1	c6 44 24 34 01	 mov	 BYTE PTR _$S3$140025[esp+232], 1
  001b6	88 44 24 35	 mov	 BYTE PTR _$S3$140025[esp+233], al
  001ba	84 c0		 test	 al, al
  001bc	75 b8		 jne	 SHORT $LL107@GetSysDevi
$LN22@GetSysDevi:

; 2379 : 	{
; 2380 : 		foreach (const HostDevice &device, GetAvailableHostDevices (false, true))

  001be	8b 44 24 30	 mov	 eax, DWORD PTR _$S3$140025[esp+228]
  001c2	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001c5	8d 4c 24 30	 lea	 ecx, DWORD PTR _$S3$140025[esp+228]
  001c9	ff d2		 call	 edx
  001cb	8b 44 24 30	 mov	 eax, DWORD PTR _$S3$140025[esp+228]
  001cf	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001d2	8d 4c 24 30	 lea	 ecx, DWORD PTR _$S3$140025[esp+228]
  001d6	ff d2		 call	 edx
  001d8	84 c0		 test	 al, al
  001da	0f 85 e8 fe ff
	ff		 jne	 $LN23@GetSysDevi
$LN21@GetSysDevi:

; 2384 : 		}

  001e0	8d 44 24 38	 lea	 eax, DWORD PTR _$S3$140025[esp+236]
  001e4	c7 84 24 e0 00
	00 00 04 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+236], 4
  001ef	89 44 24 14	 mov	 DWORD PTR $T204956[esp+228], eax
  001f3	8b 74 24 44	 mov	 esi, DWORD PTR _$S3$140025[esp+248]
  001f7	33 ff		 xor	 edi, edi
  001f9	c6 84 24 e0 00
	00 00 05	 mov	 BYTE PTR __$EHRec$[esp+236], 5
  00201	3b f7		 cmp	 esi, edi
  00203	74 2b		 je	 SHORT $LN145@GetSysDevi
  00205	8b 7c 24 48	 mov	 edi, DWORD PTR _$S3$140025[esp+252]
  00209	3b f7		 cmp	 esi, edi
  0020b	74 18		 je	 SHORT $LN133@GetSysDevi
  0020d	8d 49 00	 npad	 3
$LL135@GetSysDevi:
  00210	8b ce		 mov	 ecx, esi
  00212	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00217	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0021d	3b f7		 cmp	 esi, edi
  0021f	75 ef		 jne	 SHORT $LL135@GetSysDevi
  00221	8b 74 24 44	 mov	 esi, DWORD PTR _$S3$140025[esp+248]
$LN133@GetSysDevi:
  00225	56		 push	 esi
  00226	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0022b	83 c4 04	 add	 esp, 4
  0022e	33 ff		 xor	 edi, edi
$LN145@GetSysDevi:
  00230	8b 4c 24 38	 mov	 ecx, DWORD PTR _$S3$140025[esp+236]
  00234	51		 push	 ecx
  00235	89 7c 24 48	 mov	 DWORD PTR _$S3$140025[esp+252], edi
  00239	89 7c 24 4c	 mov	 DWORD PTR _$S3$140025[esp+256], edi
  0023d	89 7c 24 50	 mov	 DWORD PTR _$S3$140025[esp+260], edi
  00241	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 2385 : 
; 2386 : 		if (IsOSAtLeast (WIN_7))

  00246	6a 0d		 push	 13			; 0000000dH
  00248	c7 84 24 e8 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+244], -1
  00253	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR _$S3$140025[esp+236], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  0025b	e8 00 00 00 00	 call	 _IsOSAtLeast
  00260	83 c4 08	 add	 esp, 8
  00263	85 c0		 test	 eax, eax
  00265	0f 84 81 03 00
	00		 je	 $LN363@GetSysDevi

; 2387 : 		{
; 2388 : 			// Find extra boot partition
; 2389 : 			foreach (const HostDevice &drive, GetAvailableHostDevices (false, false))

  0026b	57		 push	 edi
  0026c	6a 01		 push	 1
  0026e	57		 push	 edi
  0026f	8d 54 24 24	 lea	 edx, DWORD PTR $T204507[esp+240]
  00273	57		 push	 edi
  00274	52		 push	 edx
  00275	e8 00 00 00 00	 call	 ?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z ; GetAvailableHostDevices
  0027a	50		 push	 eax
  0027b	8d 44 24 78	 lea	 eax, DWORD PTR _$S4$140064[esp+252]
  0027f	50		 push	 eax
  00280	c7 84 24 fc 00
	00 00 06 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+264], 6
  0028b	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
  00290	83 c4 1c	 add	 esp, 28			; 0000001cH
  00293	8b 74 24 24	 mov	 esi, DWORD PTR $T204507[esp+240]
  00297	c6 84 24 e0 00
	00 00 09	 mov	 BYTE PTR __$EHRec$[esp+236], 9
  0029f	3b f7		 cmp	 esi, edi
  002a1	74 2d		 je	 SHORT $LN181@GetSysDevi
  002a3	8b 7c 24 28	 mov	 edi, DWORD PTR $T204507[esp+244]
  002a7	3b f7		 cmp	 esi, edi
  002a9	74 1a		 je	 SHORT $LN169@GetSysDevi
  002ab	eb 03 8d 49 00	 npad	 5
$LL171@GetSysDevi:
  002b0	8b ce		 mov	 ecx, esi
  002b2	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  002b7	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  002bd	3b f7		 cmp	 esi, edi
  002bf	75 ef		 jne	 SHORT $LL171@GetSysDevi
  002c1	8b 74 24 24	 mov	 esi, DWORD PTR $T204507[esp+240]
$LN169@GetSysDevi:
  002c5	56		 push	 esi
  002c6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002cb	83 c4 04	 add	 esp, 4
  002ce	33 ff		 xor	 edi, edi
$LN181@GetSysDevi:
  002d0	8b 4c 24 18	 mov	 ecx, DWORD PTR $T204507[esp+228]
  002d4	51		 push	 ecx
  002d5	89 7c 24 28	 mov	 DWORD PTR $T204507[esp+244], edi
  002d9	89 7c 24 2c	 mov	 DWORD PTR $T204507[esp+248], edi
  002dd	89 7c 24 30	 mov	 DWORD PTR $T204507[esp+252], edi
  002e1	c6 84 24 e4 00
	00 00 08	 mov	 BYTE PTR __$EHRec$[esp+240], 8
  002e9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002ee	8b 54 24 64	 mov	 edx, DWORD PTR _$S4$140064[esp+232]
  002f2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  002f5	83 c4 04	 add	 esp, 4
  002f8	8d 4c 24 60	 lea	 ecx, DWORD PTR _$S4$140064[esp+228]
  002fc	ff d0		 call	 eax
  002fe	84 c0		 test	 al, al
  00300	0f 84 7f 02 00
	00		 je	 $LN13@GetSysDevi
  00306	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL15@GetSysDevi:
  00310	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR _$S4$140064[esp+268]
  00317	3b c7		 cmp	 eax, edi
  00319	75 10		 jne	 SHORT $LN392@GetSysDevi
  0031b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00320	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR _$S4$140064[esp+268]
  00327	3b c7		 cmp	 eax, edi
  00329	74 04		 je	 SHORT $LN211@GetSysDevi
$LN392@GetSysDevi:
  0032b	8b 00		 mov	 eax, DWORD PTR [eax]
  0032d	eb 02		 jmp	 SHORT $LN212@GetSysDevi
$LN211@GetSysDevi:
  0032f	33 c0		 xor	 eax, eax
$LN212@GetSysDevi:
  00331	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR _$S4$140064[esp+272]
  00338	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0033b	72 05		 jb	 SHORT $LN199@GetSysDevi
  0033d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN199@GetSysDevi:
  00342	f6 44 24 10 02	 test	 BYTE PTR $T204525[esp+228], 2
  00347	8b ac 24 8c 00
	00 00		 mov	 ebp, DWORD PTR _$S4$140064[esp+272]
  0034e	74 73		 je	 SHORT $LN245@GetSysDevi
  00350	83 64 24 10 fd	 and	 DWORD PTR $T204525[esp+228], -3 ; fffffffdH
  00355	8b b4 24 cc 00
	00 00		 mov	 esi, DWORD PTR $T204512[esp+240]
  0035c	c6 84 24 e0 00
	00 00 0a	 mov	 BYTE PTR __$EHRec$[esp+236], 10 ; 0000000aH
  00364	3b f7		 cmp	 esi, edi
  00366	74 2e		 je	 SHORT $LN239@GetSysDevi
  00368	8b bc 24 d0 00
	00 00		 mov	 edi, DWORD PTR $T204512[esp+244]
  0036f	3b f7		 cmp	 esi, edi
  00371	74 18		 je	 SHORT $LN227@GetSysDevi
$LL229@GetSysDevi:
  00373	8b ce		 mov	 ecx, esi
  00375	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  0037a	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00380	3b f7		 cmp	 esi, edi
  00382	75 ef		 jne	 SHORT $LL229@GetSysDevi
  00384	8b b4 24 cc 00
	00 00		 mov	 esi, DWORD PTR $T204512[esp+240]
$LN227@GetSysDevi:
  0038b	56		 push	 esi
  0038c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00391	83 c4 04	 add	 esp, 4
  00394	33 ff		 xor	 edi, edi
$LN239@GetSysDevi:
  00396	8b 94 24 c0 00
	00 00		 mov	 edx, DWORD PTR $T204512[esp+228]
  0039d	52		 push	 edx
  0039e	89 bc 24 d0 00
	00 00		 mov	 DWORD PTR $T204512[esp+244], edi
  003a5	89 bc 24 d4 00
	00 00		 mov	 DWORD PTR $T204512[esp+248], edi
  003ac	89 bc 24 d8 00
	00 00		 mov	 DWORD PTR $T204512[esp+252], edi
  003b3	c6 84 24 e4 00
	00 00 08	 mov	 BYTE PTR __$EHRec$[esp+240], 8
  003bb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003c0	83 c4 04	 add	 esp, 4
$LN245@GetSysDevi:
  003c3	80 7c 24 65 00	 cmp	 BYTE PTR _$S4$140064[esp+233], 0
  003c8	0f 94 c0	 sete	 al
  003cb	88 44 24 65	 mov	 BYTE PTR _$S4$140064[esp+233], al
  003cf	84 c0		 test	 al, al
  003d1	0f 84 8c 01 00
	00		 je	 $LN14@GetSysDevi
$LL249@GetSysDevi:

; 2390 : 			{
; 2391 : 				if (drive.ContainsSystem)

  003d7	80 7d 01 00	 cmp	 BYTE PTR [ebp+1], 0
  003db	75 17		 jne	 SHORT $LN377@GetSysDevi
  003dd	84 c0		 test	 al, al
  003df	0f 94 c0	 sete	 al
  003e2	c6 44 24 64 01	 mov	 BYTE PTR _$S4$140064[esp+232], 1
  003e7	88 44 24 65	 mov	 BYTE PTR _$S4$140064[esp+233], al
  003eb	84 c0		 test	 al, al
  003ed	75 e8		 jne	 SHORT $LL249@GetSysDevi

; 2394 : 					{
; 2395 : 						if (sysDrivePartition.Bootable)

  003ef	e9 6f 01 00 00	 jmp	 $LN14@GetSysDevi
$LN377@GetSysDevi:

; 2392 : 				{
; 2393 : 					foreach (const HostDevice &sysDrivePartition, drive.Partitions)

  003f4	83 c5 6c	 add	 ebp, 108		; 0000006cH
  003f7	8d 84 24 90 00
	00 00		 lea	 eax, DWORD PTR _$S5$140080[esp+228]
  003fe	55		 push	 ebp
  003ff	50		 push	 eax
  00400	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
  00405	83 c4 08	 add	 esp, 8
  00408	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR _$S5$140080[esp+228]
  0040f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00412	8d 8c 24 90 00
	00 00		 lea	 ecx, DWORD PTR _$S5$140080[esp+228]
  00419	c6 84 24 e0 00
	00 00 0b	 mov	 BYTE PTR __$EHRec$[esp+236], 11 ; 0000000bH
  00421	ff d0		 call	 eax
  00423	84 c0		 test	 al, al
  00425	0f 84 bf 00 00
	00		 je	 $LN6@GetSysDevi
  0042b	be 00 00 00 20	 mov	 esi, 536870912		; 20000000H
$LL8@GetSysDevi:
  00430	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR _$S5$140080[esp+268]
  00437	3b c7		 cmp	 eax, edi
  00439	75 10		 jne	 SHORT $LN393@GetSysDevi
  0043b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00440	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR _$S5$140080[esp+268]
  00447	3b c7		 cmp	 eax, edi
  00449	74 04		 je	 SHORT $LN273@GetSysDevi
$LN393@GetSysDevi:
  0044b	8b 00		 mov	 eax, DWORD PTR [eax]
  0044d	eb 02		 jmp	 SHORT $LN274@GetSysDevi
$LN273@GetSysDevi:
  0044f	33 c0		 xor	 eax, eax
$LN274@GetSysDevi:
  00451	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR _$S5$140080[esp+272]
  00458	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0045b	72 0c		 jb	 SHORT $LN261@GetSysDevi
  0045d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00462	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR _$S5$140080[esp+272]
$LN261@GetSysDevi:
  00469	80 bc 24 95 00
	00 00 00	 cmp	 BYTE PTR _$S5$140080[esp+233], 0
  00471	0f 94 c0	 sete	 al
  00474	88 84 24 95 00
	00 00		 mov	 BYTE PTR _$S5$140080[esp+233], al
  0047b	84 c0		 test	 al, al
  0047d	74 3d		 je	 SHORT $LN7@GetSysDevi
  0047f	90		 npad	 1
$LL277@GetSysDevi:

; 2394 : 					{
; 2395 : 						if (sysDrivePartition.Bootable)

  00480	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00483	75 1a		 jne	 SHORT $LN378@GetSysDevi
  00485	84 c0		 test	 al, al
  00487	0f 94 c0	 sete	 al
  0048a	c6 84 24 94 00
	00 00 01	 mov	 BYTE PTR _$S5$140080[esp+232], 1
  00492	88 84 24 95 00
	00 00		 mov	 BYTE PTR _$S5$140080[esp+233], al
  00499	84 c0		 test	 al, al
  0049b	75 e3		 jne	 SHORT $LL277@GetSysDevi
  0049d	eb 1d		 jmp	 SHORT $LN7@GetSysDevi
$LN378@GetSysDevi:

; 2396 : 						{
; 2397 : 							if (sysDrivePartition.Size <= TC_MAX_EXTRA_BOOT_PARTITION_SIZE)

  0049f	39 79 64	 cmp	 DWORD PTR [ecx+100], edi
  004a2	77 18		 ja	 SHORT $LN7@GetSysDevi
  004a4	72 05		 jb	 SHORT $LN397@GetSysDevi
  004a6	39 71 60	 cmp	 DWORD PTR [ecx+96], esi
  004a9	77 11		 ja	 SHORT $LN7@GetSysDevi
$LN397@GetSysDevi:

; 2398 : 								ExtraBootPartitionDevicePath = sysDrivePartition.Path;

  004ab	6a ff		 push	 -1
  004ad	83 c1 40	 add	 ecx, 64			; 00000040H
  004b0	57		 push	 edi
  004b1	51		 push	 ecx
  004b2	b9 00 00 00 00	 mov	 ecx, OFFSET ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; ExtraBootPartitionDevicePath
  004b7	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN7@GetSysDevi:
  004bc	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR _$S5$140080[esp+228]
  004c3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  004c6	8d 8c 24 90 00
	00 00		 lea	 ecx, DWORD PTR _$S5$140080[esp+228]
  004cd	ff d0		 call	 eax
  004cf	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR _$S5$140080[esp+228]
  004d6	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  004d9	8d 8c 24 90 00
	00 00		 lea	 ecx, DWORD PTR _$S5$140080[esp+228]
  004e0	ff d0		 call	 eax
  004e2	84 c0		 test	 al, al
  004e4	0f 85 46 ff ff
	ff		 jne	 $LL8@GetSysDevi
$LN6@GetSysDevi:

; 2399 : 							break;
; 2400 : 						}
; 2401 : 					}

  004ea	8d 8c 24 98 00
	00 00		 lea	 ecx, DWORD PTR _$S5$140080[esp+236]
  004f1	89 4c 24 14	 mov	 DWORD PTR $T205643[esp+228], ecx
  004f5	8b b4 24 a4 00
	00 00		 mov	 esi, DWORD PTR _$S5$140080[esp+248]
  004fc	c6 84 24 e0 00
	00 00 0d	 mov	 BYTE PTR __$EHRec$[esp+236], 13 ; 0000000dH
  00504	3b f7		 cmp	 esi, edi
  00506	74 2e		 je	 SHORT $LN313@GetSysDevi
  00508	8b bc 24 a8 00
	00 00		 mov	 edi, DWORD PTR _$S5$140080[esp+252]
  0050f	3b f7		 cmp	 esi, edi
  00511	74 18		 je	 SHORT $LN301@GetSysDevi
$LL303@GetSysDevi:
  00513	8b ce		 mov	 ecx, esi
  00515	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  0051a	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00520	3b f7		 cmp	 esi, edi
  00522	75 ef		 jne	 SHORT $LL303@GetSysDevi
  00524	8b b4 24 a4 00
	00 00		 mov	 esi, DWORD PTR _$S5$140080[esp+248]
$LN301@GetSysDevi:
  0052b	56		 push	 esi
  0052c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00531	83 c4 04	 add	 esp, 4
  00534	33 ff		 xor	 edi, edi
$LN313@GetSysDevi:
  00536	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR _$S5$140080[esp+236]
  0053d	52		 push	 edx
  0053e	89 bc 24 a8 00
	00 00		 mov	 DWORD PTR _$S5$140080[esp+252], edi
  00545	89 bc 24 ac 00
	00 00		 mov	 DWORD PTR _$S5$140080[esp+256], edi
  0054c	89 bc 24 b0 00
	00 00		 mov	 DWORD PTR _$S5$140080[esp+260], edi
  00553	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00558	83 c4 04	 add	 esp, 4
  0055b	c6 84 24 e0 00
	00 00 08	 mov	 BYTE PTR __$EHRec$[esp+236], 8
$LN14@GetSysDevi:
  00563	8b 44 24 60	 mov	 eax, DWORD PTR _$S4$140064[esp+228]
  00567	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0056a	8d 4c 24 60	 lea	 ecx, DWORD PTR _$S4$140064[esp+228]
  0056e	ff d2		 call	 edx
  00570	8b 44 24 60	 mov	 eax, DWORD PTR _$S4$140064[esp+228]
  00574	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00577	8d 4c 24 60	 lea	 ecx, DWORD PTR _$S4$140064[esp+228]
  0057b	ff d2		 call	 edx
  0057d	84 c0		 test	 al, al
  0057f	0f 85 8b fd ff
	ff		 jne	 $LL15@GetSysDevi
$LN13@GetSysDevi:

; 2402 : 					break;
; 2403 : 				}
; 2404 : 			}

  00585	8d 44 24 68	 lea	 eax, DWORD PTR _$S4$140064[esp+236]
  00589	c7 84 24 e0 00
	00 00 0e 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+236], 14 ; 0000000eH
  00594	89 44 24 14	 mov	 DWORD PTR $T205862[esp+228], eax
  00598	8b 74 24 74	 mov	 esi, DWORD PTR _$S4$140064[esp+248]
  0059c	c6 84 24 e0 00
	00 00 0f	 mov	 BYTE PTR __$EHRec$[esp+236], 15 ; 0000000fH
  005a4	3b f7		 cmp	 esi, edi
  005a6	74 28		 je	 SHORT $LN353@GetSysDevi
  005a8	8b 7c 24 78	 mov	 edi, DWORD PTR _$S4$140064[esp+252]
  005ac	3b f7		 cmp	 esi, edi
  005ae	74 15		 je	 SHORT $LN341@GetSysDevi
$LL343@GetSysDevi:
  005b0	8b ce		 mov	 ecx, esi
  005b2	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  005b7	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  005bd	3b f7		 cmp	 esi, edi
  005bf	75 ef		 jne	 SHORT $LL343@GetSysDevi
  005c1	8b 74 24 74	 mov	 esi, DWORD PTR _$S4$140064[esp+248]
$LN341@GetSysDevi:
  005c5	56		 push	 esi
  005c6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  005cb	83 c4 04	 add	 esp, 4
  005ce	33 ff		 xor	 edi, edi
$LN353@GetSysDevi:
  005d0	8b 4c 24 68	 mov	 ecx, DWORD PTR _$S4$140064[esp+236]
  005d4	51		 push	 ecx
  005d5	89 7c 24 78	 mov	 DWORD PTR _$S4$140064[esp+252], edi
  005d9	89 7c 24 7c	 mov	 DWORD PTR _$S4$140064[esp+256], edi
  005dd	89 bc 24 80 00
	00 00		 mov	 DWORD PTR _$S4$140064[esp+260], edi
  005e4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  005e9	83 c4 04	 add	 esp, 4
$LN363@GetSysDevi:

; 2405 : 		}
; 2406 : 
; 2407 : 		bCachedSysDevicePathsValid = 1;

  005ec	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?bCachedSysDevicePathsValid@@3DA, 1 ; bCachedSysDevicePathsValid
$LN25@GetSysDevi:

; 2408 : 	}
; 2409 : 
; 2410 : 	return (bCachedSysDevicePathsValid 
; 2411 : 		&& strlen (SysPartitionDevicePath) > 1 
; 2412 : 		&& strlen (SysDriveDevicePath) > 1);

  005f3	b8 00 00 00 00	 mov	 eax, OFFSET ?SysPartitionDevicePath@@3PADA ; SysPartitionDevicePath
  005f8	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  005fb	eb 03 8d 49 00	 npad	 5
$LL398@GetSysDevi:
  00600	8a 08		 mov	 cl, BYTE PTR [eax]
  00602	40		 inc	 eax
  00603	84 c9		 test	 cl, cl
  00605	75 f9		 jne	 SHORT $LL398@GetSysDevi
  00607	2b c2		 sub	 eax, edx
  00609	83 f8 01	 cmp	 eax, 1
  0060c	76 1d		 jbe	 SHORT $LN36@GetSysDevi
  0060e	b8 00 00 00 00	 mov	 eax, OFFSET ?SysDriveDevicePath@@3PADA ; SysDriveDevicePath
  00613	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL399@GetSysDevi:
  00616	8a 08		 mov	 cl, BYTE PTR [eax]
  00618	40		 inc	 eax
  00619	84 c9		 test	 cl, cl
  0061b	75 f9		 jne	 SHORT $LL399@GetSysDevi
  0061d	2b c2		 sub	 eax, edx
  0061f	83 f8 01	 cmp	 eax, 1
  00622	76 07		 jbe	 SHORT $LN36@GetSysDevi
  00624	b8 01 00 00 00	 mov	 eax, 1
  00629	eb 02		 jmp	 SHORT $LN37@GetSysDevi
$LN36@GetSysDevi:
  0062b	33 c0		 xor	 eax, eax
$LN37@GetSysDevi:

; 2413 : }

  0062d	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+228]
  00634	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0063b	59		 pop	 ecx
  0063c	5f		 pop	 edi
  0063d	5e		 pop	 esi
  0063e	5d		 pop	 ebp
  0063f	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  00645	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR $T204497[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$1:
  00008	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _$S3$140025[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$7:
  00013	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR $T204502[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$8:
  0001e	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _$S3$140025[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$10:
  00029	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR $T204956[ebp]
  0002f	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$3:
  00034	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR $T204507[ebp]
  0003a	e9 00 00 00 00	 jmp	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$4:
  0003f	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _$S4$140064[ebp]
  00045	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$11:
  0004a	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR $T204507[ebp]
  00050	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$12:
  00055	8d 4d dc	 lea	 ecx, DWORD PTR $T204512[ebp]
  00058	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$6:
  0005d	8d 4d ac	 lea	 ecx, DWORD PTR _$S5$140080[ebp]
  00060	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$13:
  00065	8d 4d ac	 lea	 ecx, DWORD PTR _$S5$140080[ebp]
  00068	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$15:
  0006d	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR $T205643[ebp]
  00073	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$16:
  00078	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _$S4$140064[ebp]
  0007e	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$18:
  00083	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR $T205862[ebp]
  00089	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__ehhandler$?GetSysDevicePaths@@YAHPAUHWND__@@@Z:
  0008e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00092	8d 82 2c ff ff
	ff		 lea	 eax, DWORD PTR [edx-212]
  00098	8b 8a 28 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-216]
  0009e	33 c8		 xor	 ecx, eax
  000a0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a5	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetSysDevicePaths@@YAHPAUHWND__@@@Z
  000aa	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetSysDevicePaths@@YAHPAUHWND__@@@Z ENDP		; GetSysDevicePaths
PUBLIC	_IsSystemDevicePath
EXTRN	_strncmp:PROC
; Function compile flags: /Ogtpy
;	COMDAT _IsSystemDevicePath
_TEXT	SEGMENT
_path$ = 8						; size = 4
_hwndDlg$ = 12						; size = 4
_bReliableRequired$ = 16				; size = 4
_IsSystemDevicePath PROC				; COMDAT

; 2436 : 	if (!bCachedSysDevicePathsValid
; 2437 : 		&& bReliableRequired)

  00000	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?bCachedSysDevicePathsValid@@3DA, 0 ; bCachedSysDevicePathsValid
  00007	75 1c		 jne	 SHORT $LN8@IsSystemDe
  00009	83 7c 24 0c 00	 cmp	 DWORD PTR _bReliableRequired$[esp-4], 0
  0000e	74 15		 je	 SHORT $LN8@IsSystemDe

; 2438 : 	{
; 2439 : 		if (!GetSysDevicePaths (hwndDlg))

  00010	8b 44 24 08	 mov	 eax, DWORD PTR _hwndDlg$[esp-4]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?GetSysDevicePaths@@YAHPAUHWND__@@@Z ; GetSysDevicePaths
  0001a	83 c4 04	 add	 esp, 4
  0001d	85 c0		 test	 eax, eax
  0001f	75 04		 jne	 SHORT $LN8@IsSystemDe
$LN6@IsSystemDe:

; 2440 : 			return -1;

  00021	83 c8 ff	 or	 eax, -1

; 2451 : 		return 3;
; 2452 : 
; 2453 : 	return 0;
; 2454 : }

  00024	c3		 ret	 0
$LN8@IsSystemDe:

; 2441 : 	}
; 2442 : 
; 2443 : 	if (strlen (SysPartitionDevicePath) <= 1 || strlen (SysDriveDevicePath) <= 1)

  00025	b8 00 00 00 00	 mov	 eax, OFFSET ?SysPartitionDevicePath@@3PADA ; SysPartitionDevicePath
  0002a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0002d	8d 49 00	 npad	 3
$LL16@IsSystemDe:
  00030	8a 08		 mov	 cl, BYTE PTR [eax]
  00032	40		 inc	 eax
  00033	84 c9		 test	 cl, cl
  00035	75 f9		 jne	 SHORT $LL16@IsSystemDe
  00037	2b c2		 sub	 eax, edx
  00039	83 f8 01	 cmp	 eax, 1
  0003c	76 e3		 jbe	 SHORT $LN6@IsSystemDe
  0003e	b8 00 00 00 00	 mov	 eax, OFFSET ?SysDriveDevicePath@@3PADA ; SysDriveDevicePath
  00043	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL17@IsSystemDe:
  00046	8a 08		 mov	 cl, BYTE PTR [eax]
  00048	40		 inc	 eax
  00049	84 c9		 test	 cl, cl
  0004b	75 f9		 jne	 SHORT $LL17@IsSystemDe
  0004d	2b c2		 sub	 eax, edx
  0004f	83 f8 01	 cmp	 eax, 1
  00052	76 cd		 jbe	 SHORT $LN6@IsSystemDe
  00054	57		 push	 edi

; 2444 : 		return -1;
; 2445 : 
; 2446 : 	if (strncmp (path, SysPartitionDevicePath, max (strlen(path), strlen(SysPartitionDevicePath))) == 0)

  00055	8b 7c 24 08	 mov	 edi, DWORD PTR _path$[esp]
  00059	8b c7		 mov	 eax, edi
  0005b	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0005e	8b ff		 npad	 2
$LL18@IsSystemDe:
  00060	8a 08		 mov	 cl, BYTE PTR [eax]
  00062	40		 inc	 eax
  00063	84 c9		 test	 cl, cl
  00065	75 f9		 jne	 SHORT $LL18@IsSystemDe
  00067	2b c2		 sub	 eax, edx
  00069	8b d0		 mov	 edx, eax
  0006b	b8 00 00 00 00	 mov	 eax, OFFSET ?SysPartitionDevicePath@@3PADA ; SysPartitionDevicePath
  00070	56		 push	 esi
  00071	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL19@IsSystemDe:
  00074	8a 08		 mov	 cl, BYTE PTR [eax]
  00076	40		 inc	 eax
  00077	84 c9		 test	 cl, cl
  00079	75 f9		 jne	 SHORT $LL19@IsSystemDe
  0007b	2b c6		 sub	 eax, esi
  0007d	3b d0		 cmp	 edx, eax
  0007f	76 0e		 jbe	 SHORT $LN12@IsSystemDe
  00081	8b c7		 mov	 eax, edi
  00083	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL20@IsSystemDe:
  00086	8a 08		 mov	 cl, BYTE PTR [eax]
  00088	40		 inc	 eax
  00089	84 c9		 test	 cl, cl
  0008b	75 f9		 jne	 SHORT $LL20@IsSystemDe
  0008d	eb 0f		 jmp	 SHORT $LN28@IsSystemDe
$LN12@IsSystemDe:
  0008f	b8 00 00 00 00	 mov	 eax, OFFSET ?SysPartitionDevicePath@@3PADA ; SysPartitionDevicePath
  00094	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL21@IsSystemDe:
  00097	8a 08		 mov	 cl, BYTE PTR [eax]
  00099	40		 inc	 eax
  0009a	84 c9		 test	 cl, cl
  0009c	75 f9		 jne	 SHORT $LL21@IsSystemDe
$LN28@IsSystemDe:
  0009e	2b c2		 sub	 eax, edx
  000a0	50		 push	 eax
  000a1	68 00 00 00 00	 push	 OFFSET ?SysPartitionDevicePath@@3PADA ; SysPartitionDevicePath
  000a6	57		 push	 edi
  000a7	e8 00 00 00 00	 call	 _strncmp
  000ac	83 c4 0c	 add	 esp, 12			; 0000000cH
  000af	85 c0		 test	 eax, eax
  000b1	75 08		 jne	 SHORT $LN5@IsSystemDe
  000b3	5e		 pop	 esi

; 2447 : 		return 1;

  000b4	b8 01 00 00 00	 mov	 eax, 1
  000b9	5f		 pop	 edi

; 2451 : 		return 3;
; 2452 : 
; 2453 : 	return 0;
; 2454 : }

  000ba	c3		 ret	 0
$LN5@IsSystemDe:

; 2448 : 	else if (strncmp (path, SysDriveDevicePath, max (strlen(path), strlen(SysDriveDevicePath))) == 0)

  000bb	8b c7		 mov	 eax, edi
  000bd	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL22@IsSystemDe:
  000c0	8a 08		 mov	 cl, BYTE PTR [eax]
  000c2	40		 inc	 eax
  000c3	84 c9		 test	 cl, cl
  000c5	75 f9		 jne	 SHORT $LL22@IsSystemDe
  000c7	2b c2		 sub	 eax, edx
  000c9	8b d0		 mov	 edx, eax
  000cb	b8 00 00 00 00	 mov	 eax, OFFSET ?SysDriveDevicePath@@3PADA ; SysDriveDevicePath
  000d0	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL23@IsSystemDe:
  000d3	8a 08		 mov	 cl, BYTE PTR [eax]
  000d5	40		 inc	 eax
  000d6	84 c9		 test	 cl, cl
  000d8	75 f9		 jne	 SHORT $LL23@IsSystemDe
  000da	2b c6		 sub	 eax, esi
  000dc	3b d0		 cmp	 edx, eax
  000de	76 0e		 jbe	 SHORT $LN14@IsSystemDe
  000e0	8b c7		 mov	 eax, edi
  000e2	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL24@IsSystemDe:
  000e5	8a 08		 mov	 cl, BYTE PTR [eax]
  000e7	40		 inc	 eax
  000e8	84 c9		 test	 cl, cl
  000ea	75 f9		 jne	 SHORT $LL24@IsSystemDe
  000ec	eb 0f		 jmp	 SHORT $LN29@IsSystemDe
$LN14@IsSystemDe:
  000ee	b8 00 00 00 00	 mov	 eax, OFFSET ?SysDriveDevicePath@@3PADA ; SysDriveDevicePath
  000f3	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL25@IsSystemDe:
  000f6	8a 08		 mov	 cl, BYTE PTR [eax]
  000f8	40		 inc	 eax
  000f9	84 c9		 test	 cl, cl
  000fb	75 f9		 jne	 SHORT $LL25@IsSystemDe
$LN29@IsSystemDe:
  000fd	2b c2		 sub	 eax, edx
  000ff	50		 push	 eax
  00100	68 00 00 00 00	 push	 OFFSET ?SysDriveDevicePath@@3PADA ; SysDriveDevicePath
  00105	57		 push	 edi
  00106	e8 00 00 00 00	 call	 _strncmp
  0010b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010e	85 c0		 test	 eax, eax
  00110	75 08		 jne	 SHORT $LN3@IsSystemDe
  00112	5e		 pop	 esi

; 2449 : 		return 2;

  00113	b8 02 00 00 00	 mov	 eax, 2
  00118	5f		 pop	 edi

; 2451 : 		return 3;
; 2452 : 
; 2453 : 	return 0;
; 2454 : }

  00119	c3		 ret	 0
$LN3@IsSystemDe:

; 2450 : 	else if (ExtraBootPartitionDevicePath == path)

  0011a	57		 push	 edi
  0011b	68 00 00 00 00	 push	 OFFSET ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; ExtraBootPartitionDevicePath
  00120	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00125	0f b6 c0	 movzx	 eax, al
  00128	83 c4 08	 add	 esp, 8
  0012b	f7 d8		 neg	 eax
  0012d	1b c0		 sbb	 eax, eax
  0012f	5e		 pop	 esi
  00130	83 e0 03	 and	 eax, 3
  00133	5f		 pop	 edi

; 2451 : 		return 3;
; 2452 : 
; 2453 : 	return 0;
; 2454 : }

  00134	c3		 ret	 0
_IsSystemDevicePath ENDP
_TEXT	ENDS
PUBLIC	??_C@_13EBCNDICG@?$AA?3?$AA?$AA@		; `string'
PUBLIC	??_C@_08IPBANHMA@HARDDISK?$AA@			; `string'
PUBLIC	??_C@_1M@DJFDNGE@?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_0P@MBKJGBEM@REMOVABLE_DISK?$AA@		; `string'
PUBLIC	??_C@_0L@IJFHJLKD@RAWDEVICES?$AA@		; `string'
PUBLIC	??_C@_05EILEDKCG@LABEL?$AA@			; `string'
PUBLIC	??_C@_04EMFHLKGI@SIZE?$AA@			; `string'
PUBLIC	??_C@_05JLAEHEHI@DRIVE?$AA@			; `string'
PUBLIC	??_C@_06CDNPEPDB@DEVICE?$AA@			; `string'
PUBLIC	??_C@_0BD@OAMDNKIF@IDD_RAWDEVICES_DLG?$AA@	; `string'
PUBLIC	_lParam$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_RawDevicesDlgProc@16
EXTRN	__imp__EnableWindow@8:PROC
EXTRN	_atexit:PROC
;	COMDAT ?lpszFileName@?1??RawDevicesDlgProc@@9@16@4PADA
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
_BSS	SEGMENT
?lpszFileName@?1??RawDevicesDlgProc@@9@16@4PADA DD 01H DUP (?) ; `RawDevicesDlgProc'::`2'::lpszFileName
_BSS	ENDS
;	COMDAT ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
_BSS	SEGMENT
?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A DB 020H DUP (?) ; `RawDevicesDlgProc'::`2'::itemToDeviceMap
_BSS	ENDS
;	COMDAT ?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A
_BSS	SEGMENT
?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A DB 018H DUP (?) ; `RawDevicesDlgProc'::`2'::devices
_BSS	ENDS
;	COMDAT ?$S6@?1??RawDevicesDlgProc@@9@16@4IA
_BSS	SEGMENT
?$S6@?1??RawDevicesDlgProc@@9@16@4IA DD 01H DUP (?)	; `RawDevicesDlgProc'::`2'::$S6
_BSS	ENDS
;	COMDAT ??_C@_13EBCNDICG@?$AA?3?$AA?$AA@
CONST	SEGMENT
??_C@_13EBCNDICG@?$AA?3?$AA?$AA@ DB ':', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IPBANHMA@HARDDISK?$AA@
CONST	SEGMENT
??_C@_08IPBANHMA@HARDDISK?$AA@ DB 'HARDDISK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@DJFDNGE@?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1M@DJFDNGE@?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$AA@ DB '%', 00H, 's'
	DB	00H, ' ', 00H, '%', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MBKJGBEM@REMOVABLE_DISK?$AA@
CONST	SEGMENT
??_C@_0P@MBKJGBEM@REMOVABLE_DISK?$AA@ DB 'REMOVABLE_DISK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IJFHJLKD@RAWDEVICES?$AA@
CONST	SEGMENT
??_C@_0L@IJFHJLKD@RAWDEVICES?$AA@ DB 'RAWDEVICES', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EILEDKCG@LABEL?$AA@
CONST	SEGMENT
??_C@_05EILEDKCG@LABEL?$AA@ DB 'LABEL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EMFHLKGI@SIZE?$AA@
CONST	SEGMENT
??_C@_04EMFHLKGI@SIZE?$AA@ DB 'SIZE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JLAEHEHI@DRIVE?$AA@
CONST	SEGMENT
??_C@_05JLAEHEHI@DRIVE?$AA@ DB 'DRIVE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CDNPEPDB@DEVICE?$AA@
CONST	SEGMENT
??_C@_06CDNPEPDB@DEVICE?$AA@ DB 'DEVICE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OAMDNKIF@IDD_RAWDEVICES_DLG?$AA@
CONST	SEGMENT
??_C@_0BD@OAMDNKIF@IDD_RAWDEVICES_DLG?$AA@ DB 'IDD_RAWDEVICES_DLG', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\dlgcode.c
CONST	ENDS
;	COMDAT _RawDevicesDlgProc@16
_TEXT	SEGMENT
$T205995 = -2753					; size = 1
$T205994 = -2753					; size = 1
tv910 = -2752						; size = 4
_selectedItem$141098 = -2752				; size = 4
_line$141042 = -2748					; size = 4
_LvCol$141028 = -2744					; size = 32
tv876 = -2712						; size = 4
_lParam$GSCopy$ = -2708					; size = 4
$T205980 = -2708					; size = 8
tv872 = -2700						; size = 4
_$S7$141046 = -2696					; size = 48
_item$141043 = -2648					; size = 52
_li$206250 = -2596					; size = 52
_LvItem$141090 = -2596					; size = 52
$T205979 = -2544					; size = 8
_li$206167 = -2536					; size = 52
_li$206226 = -2484					; size = 52
_li$206147 = -2432					; size = 52
_li$206197 = -2380					; size = 52
_li$206203 = -2328					; size = 52
$T205970 = -2276					; size = 24
_selectedDevice$141201 = -2252				; size = 136
_size$141080 = -2252					; size = 200
_s$141069 = -2052					; size = 2048
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_msg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_RawDevicesDlgProc@16 PROC				; COMDAT

; 2673 : {

  00000	81 ec c4 0a 00
	00		 sub	 esp, 2756		; 00000ac4H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 c0 0a
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+2756], eax
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	8b b4 24 d0 0a
	00 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+2760]
  0001d	57		 push	 edi
  0001e	8b bc 24 e0 0a
	00 00		 mov	 edi, DWORD PTR _lParam$[esp+2764]

; 2674 : 	static char *lpszFileName;		// This is actually a pointer to a GLOBAL array
; 2675 : 	static vector <HostDevice> devices;

  00025	bb 01 00 00 00	 mov	 ebx, 1

; 2774 : 					}
; 2775 : 				}
; 2776 : 				else
; 2777 : 				{
; 2778 : 					ListItemAdd (hList, item.iItem, (char *) device.Path.c_str());

  0002a	89 7c 24 3c	 mov	 DWORD PTR _lParam$GSCopy$[esp+2768], edi
  0002e	84 1d 00 00 00
	00		 test	 BYTE PTR ?$S6@?1??RawDevicesDlgProc@@9@16@4IA, bl
  00034	75 1d		 jne	 SHORT $LN39@RawDevices
  00036	09 1d 00 00 00
	00		 or	 DWORD PTR ?$S6@?1??RawDevicesDlgProc@@9@16@4IA, ebx
  0003c	b9 00 00 00 00	 mov	 ecx, OFFSET ?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A
  00041	e8 00 00 00 00	 call	 ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
  00046	68 00 00 00 00	 push	 OFFSET ??__Fdevices@?1??RawDevicesDlgProc@@9@16@YAXXZ ; `RawDevicesDlgProc'::`2'::`dynamic atexit destructor for 'devices''
  0004b	e8 00 00 00 00	 call	 _atexit
  00050	83 c4 04	 add	 esp, 4
$LN39@RawDevices:

; 2676 : 	static map <int, HostDevice> itemToDeviceMap;

  00053	f6 05 00 00 00
	00 02		 test	 BYTE PTR ?$S6@?1??RawDevicesDlgProc@@9@16@4IA, 2
  0005a	75 28		 jne	 SHORT $LN38@RawDevices
  0005c	83 0d 00 00 00
	00 02		 or	 DWORD PTR ?$S6@?1??RawDevicesDlgProc@@9@16@4IA, 2
  00063	8d 44 24 0f	 lea	 eax, DWORD PTR $T205994[esp+2768]
  00067	50		 push	 eax
  00068	8d 4c 24 13	 lea	 ecx, DWORD PTR $T205995[esp+2772]
  0006c	51		 push	 ecx
  0006d	b9 00 00 00 00	 mov	 ecx, OFFSET ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
  00072	e8 00 00 00 00	 call	 ??0?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
  00077	68 00 00 00 00	 push	 OFFSET ??__FitemToDeviceMap@?1??RawDevicesDlgProc@@9@16@YAXXZ ; `RawDevicesDlgProc'::`2'::`dynamic atexit destructor for 'itemToDeviceMap''
  0007c	e8 00 00 00 00	 call	 _atexit
  00081	83 c4 04	 add	 esp, 4
$LN38@RawDevices:

; 2677 : 
; 2678 : 	WORD lw = LOWORD (wParam);
; 2679 : 
; 2680 : 	switch (msg)

  00084	8b 8c 24 d8 0a
	00 00		 mov	 ecx, DWORD PTR _msg$[esp+2764]
  0008b	8b c1		 mov	 eax, ecx
  0008d	83 e8 4e	 sub	 eax, 78			; 0000004eH
  00090	0f 84 0b 07 00
	00		 je	 $LN10@RawDevices
  00096	2d c2 00 00 00	 sub	 eax, 194		; 000000c2H
  0009b	74 0f		 je	 SHORT $LN35@RawDevices
  0009d	2b c3		 sub	 eax, ebx
  0009f	0f 84 fc 06 00
	00		 je	 $LN10@RawDevices
$LN1@RawDevices:

; 2979 : 		}
; 2980 : 		return 0;
; 2981 : 	}
; 2982 : 	return 0;

  000a5	33 c0		 xor	 eax, eax
  000a7	e9 de 01 00 00	 jmp	 $LN40@RawDevices
$LN35@RawDevices:
  000ac	55		 push	 ebp

; 2681 : 	{
; 2682 : 	case WM_INITDIALOG:
; 2683 : 		{
; 2684 : 			LVCOLUMNW LvCol;
; 2685 : 			HWND hList = GetDlgItem (hwndDlg, IDC_DEVICELIST);

  000ad	68 ae 13 00 00	 push	 5038			; 000013aeH
  000b2	56		 push	 esi
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8

; 2686 : 
; 2687 : 			LocalizeDialog (hwndDlg, "IDD_RAWDEVICES_DLG");

  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OAMDNKIF@IDD_RAWDEVICES_DLG?$AA@
  000be	56		 push	 esi
  000bf	8b e8		 mov	 ebp, eax
  000c1	e8 00 00 00 00	 call	 _LocalizeDialog

; 2688 : 
; 2689 : 			SendMessage (hList,LVM_SETEXTENDEDLISTVIEWSTYLE,0,
; 2690 : 				LVS_EX_FULLROWSELECT|LVS_EX_HEADERDRAGDROP|LVS_EX_TWOCLICKACTIVATE|LVS_EX_LABELTIP 
; 2691 : 				); 

  000c6	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  000cc	83 c4 08	 add	 esp, 8
  000cf	68 b0 40 00 00	 push	 16560			; 000040b0H
  000d4	33 db		 xor	 ebx, ebx
  000d6	53		 push	 ebx
  000d7	68 36 10 00 00	 push	 4150			; 00001036H
  000dc	55		 push	 ebp
  000dd	ff d7		 call	 edi

; 2692 : 
; 2693 : 			memset (&LvCol,0,sizeof(LvCol));               

  000df	33 c0		 xor	 eax, eax
  000e1	89 44 24 1c	 mov	 DWORD PTR _LvCol$141028[esp+2772], eax

; 2694 : 			LvCol.mask = LVCF_TEXT|LVCF_WIDTH|LVCF_SUBITEM|LVCF_FMT;  
; 2695 : 			LvCol.pszText = GetString ("DEVICE");

  000e5	68 00 00 00 00	 push	 OFFSET ??_C@_06CDNPEPDB@DEVICE?$AA@
  000ea	89 44 24 24	 mov	 DWORD PTR _LvCol$141028[esp+2780], eax
  000ee	89 44 24 28	 mov	 DWORD PTR _LvCol$141028[esp+2784], eax
  000f2	89 44 24 2c	 mov	 DWORD PTR _LvCol$141028[esp+2788], eax
  000f6	89 44 24 30	 mov	 DWORD PTR _LvCol$141028[esp+2792], eax
  000fa	89 44 24 34	 mov	 DWORD PTR _LvCol$141028[esp+2796], eax
  000fe	89 44 24 38	 mov	 DWORD PTR _LvCol$141028[esp+2800], eax
  00102	89 44 24 3c	 mov	 DWORD PTR _LvCol$141028[esp+2804], eax
  00106	c7 44 24 20 0f
	00 00 00	 mov	 DWORD PTR _LvCol$141028[esp+2776], 15 ; 0000000fH
  0010e	e8 00 00 00 00	 call	 _GetString

; 2696 : 			LvCol.cx = CompensateXDPI (186);

  00113	68 ba 00 00 00	 push	 186			; 000000baH
  00118	89 44 24 30	 mov	 DWORD PTR _LvCol$141028[esp+2792], eax
  0011c	e8 00 00 00 00	 call	 _CompensateXDPI
  00121	83 c4 08	 add	 esp, 8

; 2697 : 			LvCol.fmt = LVCFMT_LEFT;
; 2698 : 			SendMessage (hList,LVM_INSERTCOLUMNW,0,(LPARAM)&LvCol);

  00124	8d 54 24 1c	 lea	 edx, DWORD PTR _LvCol$141028[esp+2772]
  00128	52		 push	 edx
  00129	53		 push	 ebx
  0012a	68 61 10 00 00	 push	 4193			; 00001061H
  0012f	55		 push	 ebp
  00130	89 44 24 34	 mov	 DWORD PTR _LvCol$141028[esp+2796], eax
  00134	89 5c 24 30	 mov	 DWORD PTR _LvCol$141028[esp+2792], ebx
  00138	ff d7		 call	 edi

; 2699 : 
; 2700 : 			LvCol.pszText = GetString ("DRIVE");  

  0013a	68 00 00 00 00	 push	 OFFSET ??_C@_05JLAEHEHI@DRIVE?$AA@
  0013f	e8 00 00 00 00	 call	 _GetString

; 2701 : 			LvCol.cx = CompensateXDPI (38);

  00144	6a 26		 push	 38			; 00000026H
  00146	89 44 24 30	 mov	 DWORD PTR _LvCol$141028[esp+2792], eax
  0014a	e8 00 00 00 00	 call	 _CompensateXDPI
  0014f	83 c4 08	 add	 esp, 8
  00152	89 44 24 24	 mov	 DWORD PTR _LvCol$141028[esp+2780], eax

; 2702 : 			LvCol.fmt = LVCFMT_LEFT;
; 2703 : 			SendMessage (hList,LVM_INSERTCOLUMNW,1,(LPARAM)&LvCol);

  00156	8d 44 24 1c	 lea	 eax, DWORD PTR _LvCol$141028[esp+2772]
  0015a	50		 push	 eax
  0015b	6a 01		 push	 1
  0015d	68 61 10 00 00	 push	 4193			; 00001061H
  00162	55		 push	 ebp
  00163	89 5c 24 30	 mov	 DWORD PTR _LvCol$141028[esp+2792], ebx
  00167	ff d7		 call	 edi

; 2704 : 
; 2705 : 			LvCol.pszText = GetString ("SIZE");

  00169	68 00 00 00 00	 push	 OFFSET ??_C@_04EMFHLKGI@SIZE?$AA@
  0016e	e8 00 00 00 00	 call	 _GetString

; 2706 : 			LvCol.cx = CompensateXDPI (64);

  00173	6a 40		 push	 64			; 00000040H
  00175	89 44 24 30	 mov	 DWORD PTR _LvCol$141028[esp+2792], eax
  00179	e8 00 00 00 00	 call	 _CompensateXDPI
  0017e	83 c4 08	 add	 esp, 8

; 2707 : 			LvCol.fmt = LVCFMT_RIGHT;
; 2708 : 			SendMessage (hList,LVM_INSERTCOLUMNW,2,(LPARAM)&LvCol);

  00181	8d 4c 24 1c	 lea	 ecx, DWORD PTR _LvCol$141028[esp+2772]
  00185	51		 push	 ecx
  00186	6a 02		 push	 2
  00188	68 61 10 00 00	 push	 4193			; 00001061H
  0018d	55		 push	 ebp
  0018e	89 44 24 34	 mov	 DWORD PTR _LvCol$141028[esp+2796], eax
  00192	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR _LvCol$141028[esp+2792], 1
  0019a	ff d7		 call	 edi

; 2709 : 
; 2710 : 			LvCol.pszText = GetString ("LABEL");

  0019c	68 00 00 00 00	 push	 OFFSET ??_C@_05EILEDKCG@LABEL?$AA@
  001a1	e8 00 00 00 00	 call	 _GetString

; 2711 : 			LvCol.cx = CompensateXDPI (128);

  001a6	68 80 00 00 00	 push	 128			; 00000080H
  001ab	89 44 24 30	 mov	 DWORD PTR _LvCol$141028[esp+2792], eax
  001af	e8 00 00 00 00	 call	 _CompensateXDPI
  001b4	83 c4 08	 add	 esp, 8

; 2712 : 			LvCol.fmt = LVCFMT_LEFT;
; 2713 : 			SendMessage (hList,LVM_INSERTCOLUMNW,3,(LPARAM)&LvCol);

  001b7	8d 54 24 1c	 lea	 edx, DWORD PTR _LvCol$141028[esp+2772]
  001bb	52		 push	 edx
  001bc	6a 03		 push	 3
  001be	68 61 10 00 00	 push	 4193			; 00001061H
  001c3	89 44 24 30	 mov	 DWORD PTR _LvCol$141028[esp+2792], eax
  001c7	89 5c 24 2c	 mov	 DWORD PTR _LvCol$141028[esp+2788], ebx
  001cb	55		 push	 ebp
  001cc	ff d7		 call	 edi

; 2714 : 
; 2715 : 			devices.clear();

  001ce	b9 00 00 00 00	 mov	 ecx, OFFSET ?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A
  001d3	e8 00 00 00 00	 call	 ?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::clear

; 2716 : 			itemToDeviceMap.clear();

  001d8	a1 18 00 00 00	 mov	 eax, DWORD PTR ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A+24
  001dd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001e0	51		 push	 ecx
  001e1	b9 00 00 00 00	 mov	 ecx, OFFSET ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
  001e6	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Erase
  001eb	a1 18 00 00 00	 mov	 eax, DWORD PTR ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A+24
  001f0	89 40 04	 mov	 DWORD PTR [eax+4], eax
  001f3	a1 18 00 00 00	 mov	 eax, DWORD PTR ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A+24
  001f8	89 1d 1c 00 00
	00		 mov	 DWORD PTR ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A+28, ebx
  001fe	89 00		 mov	 DWORD PTR [eax], eax
  00200	a1 18 00 00 00	 mov	 eax, DWORD PTR ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A+24
  00205	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 2717 : 
; 2718 : 			WaitCursor();

  00208	e8 00 00 00 00	 call	 _WaitCursor

; 2719 : 			devices = GetAvailableHostDevices (false, true, false);

  0020d	53		 push	 ebx
  0020e	53		 push	 ebx
  0020f	6a 01		 push	 1
  00211	8d 94 24 fc 01
	00 00		 lea	 edx, DWORD PTR $T205970[esp+2784]
  00218	53		 push	 ebx
  00219	52		 push	 edx
  0021a	e8 00 00 00 00	 call	 ?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z ; GetAvailableHostDevices
  0021f	83 c4 14	 add	 esp, 20			; 00000014H
  00222	50		 push	 eax
  00223	b9 00 00 00 00	 mov	 ecx, OFFSET ?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A
  00228	e8 00 00 00 00	 call	 ??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=
  0022d	8d 8c 24 f0 01
	00 00		 lea	 ecx, DWORD PTR $T205970[esp+2772]
  00234	e8 00 00 00 00	 call	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >

; 2720 : 			NormalCursor();

  00239	e8 00 00 00 00	 call	 _NormalCursor

; 2721 : 
; 2722 : 			if (devices.empty())

  0023e	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A+16
  00244	2b 0d 0c 00 00
	00		 sub	 ecx, DWORD PTR ?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A+12
  0024a	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0024f	f7 e9		 imul	 ecx
  00251	c1 fa 06	 sar	 edx, 6
  00254	8b c2		 mov	 eax, edx
  00256	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00259	03 c2		 add	 eax, edx
  0025b	75 47		 jne	 SHORT $LN34@RawDevices

; 2723 : 			{
; 2724 : 				MessageBoxW (hwndDlg, GetString ("RAWDEVICES"), lpszTitle, ICON_HAND);

  0025d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  00263	6a 10		 push	 16			; 00000010H
  00265	51		 push	 ecx
  00266	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IJFHJLKD@RAWDEVICES?$AA@
  0026b	e8 00 00 00 00	 call	 _GetString
  00270	83 c4 04	 add	 esp, 4
  00273	50		 push	 eax
  00274	56		 push	 esi
  00275	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 2725 : 				EndDialog (hwndDlg, IDCANCEL);

  0027b	6a 02		 push	 2
  0027d	56		 push	 esi
  0027e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
$LN199@RawDevices:

; 2726 : 				return 1;

  00284	b8 01 00 00 00	 mov	 eax, 1
  00289	5d		 pop	 ebp
$LN40@RawDevices:

; 2983 : }

  0028a	8b 8c 24 cc 0a
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+2768]
  00291	5f		 pop	 edi
  00292	5e		 pop	 esi
  00293	5b		 pop	 ebx
  00294	33 cc		 xor	 ecx, esp
  00296	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0029b	81 c4 c4 0a 00
	00		 add	 esp, 2756		; 00000ac4H
  002a1	c2 10 00	 ret	 16			; 00000010H
$LN34@RawDevices:

; 2727 : 			}
; 2728 : 
; 2729 : 			int line = 1;
; 2730 : 			LVITEM item;
; 2731 : 			memset (&item, 0, sizeof (item));

  002a4	6a 34		 push	 52			; 00000034H
  002a6	8d 94 24 80 00
	00 00		 lea	 edx, DWORD PTR _item$141043[esp+2776]
  002ad	6a 00		 push	 0
  002af	bb 01 00 00 00	 mov	 ebx, 1
  002b4	52		 push	 edx
  002b5	89 5c 24 24	 mov	 DWORD PTR _line$141042[esp+2784], ebx
  002b9	e8 00 00 00 00	 call	 _memset

; 2732 : 			item.mask = LVIF_TEXT;
; 2733 : 
; 2734 : 			foreach (const HostDevice &device, devices)

  002be	8d 44 24 58	 lea	 eax, DWORD PTR _$S7$141046[esp+2784]
  002c2	68 00 00 00 00	 push	 OFFSET ?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A
  002c7	50		 push	 eax
  002c8	89 9c 24 90 00
	00 00		 mov	 DWORD PTR _item$141043[esp+2792], ebx
  002cf	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
  002d4	8b 54 24 60	 mov	 edx, DWORD PTR _$S7$141046[esp+2792]
  002d8	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  002db	83 c4 14	 add	 esp, 20			; 00000014H
  002de	8d 4c 24 4c	 lea	 ecx, DWORD PTR _$S7$141046[esp+2772]
  002e2	ff d0		 call	 eax
  002e4	84 c0		 test	 al, al
  002e6	0f 84 9d 04 00
	00		 je	 $LN31@RawDevices
  002ec	8d 64 24 00	 npad	 4
$LL193@RawDevices:
  002f0	8b 44 24 74	 mov	 eax, DWORD PTR _$S7$141046[esp+2812]
  002f4	85 c0		 test	 eax, eax
  002f6	75 0d		 jne	 SHORT $LN188@RawDevices
  002f8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  002fd	8b 44 24 74	 mov	 eax, DWORD PTR _$S7$141046[esp+2812]
  00301	85 c0		 test	 eax, eax
  00303	74 04		 je	 SHORT $LN96@RawDevices
$LN188@RawDevices:
  00305	8b 00		 mov	 eax, DWORD PTR [eax]
  00307	eb 02		 jmp	 SHORT $LN97@RawDevices
$LN96@RawDevices:
  00309	33 c0		 xor	 eax, eax
$LN97@RawDevices:
  0030b	8b 74 24 78	 mov	 esi, DWORD PTR _$S7$141046[esp+2816]
  0030f	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
  00312	72 09		 jb	 SHORT $LN84@RawDevices
  00314	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00319	8b 74 24 78	 mov	 esi, DWORD PTR _$S7$141046[esp+2816]
$LN84@RawDevices:
  0031d	80 7c 24 51 00	 cmp	 BYTE PTR _$S7$141046[esp+2777], 0
  00322	0f 94 c0	 sete	 al
  00325	88 44 24 51	 mov	 BYTE PTR _$S7$141046[esp+2777], al
  00329	84 c0		 test	 al, al
  0032b	0f 84 36 04 00
	00		 je	 $LN32@RawDevices
  00331	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00334	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00337	8d 46 60	 lea	 eax, DWORD PTR [esi+96]
  0033a	89 4c 24 48	 mov	 DWORD PTR tv872[esp+2772], ecx
  0033e	89 54 24 3c	 mov	 DWORD PTR tv876[esp+2772], edx
  00342	89 44 24 14	 mov	 DWORD PTR tv910[esp+2772], eax
$LL194@RawDevices:

; 2735 : 			{
; 2736 : 				item.iSubItem = 1;
; 2737 : 
; 2738 : 				if (device.ContainsSystem)

  00346	8b 4c 24 48	 mov	 ecx, DWORD PTR tv872[esp+2772]
  0034a	80 39 00	 cmp	 BYTE PTR [ecx], 0
  0034d	c7 84 24 84 00
	00 00 01 00 00
	00		 mov	 DWORD PTR _item$141043[esp+2780], 1
  00358	74 50		 je	 SHORT $LN25@RawDevices

; 2739 : 				{
; 2740 : 					if (device.IsPartition)

  0035a	8b 54 24 3c	 mov	 edx, DWORD PTR tv876[esp+2772]
  0035e	80 3a 00	 cmp	 BYTE PTR [edx], 0
  00361	74 26		 je	 SHORT $LN26@RawDevices

; 2741 : 						strcpy_s (SysPartitionDevicePath, sizeof (SysPartitionDevicePath), device.Path.c_str());

  00363	83 7e 58 10	 cmp	 DWORD PTR [esi+88], 16	; 00000010H
  00367	72 10		 jb	 SHORT $LN108@RawDevices
  00369	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0036c	50		 push	 eax
  0036d	68 04 01 00 00	 push	 260			; 00000104H
  00372	68 00 00 00 00	 push	 OFFSET ?SysPartitionDevicePath@@3PADA ; SysPartitionDevicePath

; 2742 : 					else

  00377	eb 29		 jmp	 SHORT $LN196@RawDevices

; 2741 : 						strcpy_s (SysPartitionDevicePath, sizeof (SysPartitionDevicePath), device.Path.c_str());

$LN108@RawDevices:
  00379	8d 46 44	 lea	 eax, DWORD PTR [esi+68]
  0037c	50		 push	 eax
  0037d	68 04 01 00 00	 push	 260			; 00000104H
  00382	68 00 00 00 00	 push	 OFFSET ?SysPartitionDevicePath@@3PADA ; SysPartitionDevicePath

; 2742 : 					else

  00387	eb 19		 jmp	 SHORT $LN196@RawDevices
$LN26@RawDevices:

; 2743 : 						strcpy_s (SysDriveDevicePath, sizeof (SysDriveDevicePath), device.Path.c_str());

  00389	83 7e 58 10	 cmp	 DWORD PTR [esi+88], 16	; 00000010H
  0038d	72 05		 jb	 SHORT $LN114@RawDevices
  0038f	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00392	eb 03		 jmp	 SHORT $LN115@RawDevices
$LN114@RawDevices:
  00394	8d 46 44	 lea	 eax, DWORD PTR [esi+68]
$LN115@RawDevices:
  00397	50		 push	 eax
  00398	68 04 01 00 00	 push	 260			; 00000104H
  0039d	68 00 00 00 00	 push	 OFFSET ?SysDriveDevicePath@@3PADA ; SysDriveDevicePath
$LN196@RawDevices:
  003a2	e8 00 00 00 00	 call	 _strcpy_s
  003a7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN25@RawDevices:

; 2744 : 				}
; 2745 : 
; 2746 : 				// Path
; 2747 : 				if (!device.IsPartition || device.DynamicVolume)

  003aa	8b 44 24 3c	 mov	 eax, DWORD PTR tv876[esp+2772]
  003ae	80 38 00	 cmp	 BYTE PTR [eax], 0
  003b1	74 5c		 je	 SHORT $LN23@RawDevices
  003b3	80 7e 02 00	 cmp	 BYTE PTR [esi+2], 0
  003b7	75 56		 jne	 SHORT $LN23@RawDevices

; 2774 : 					}
; 2775 : 				}
; 2776 : 				else
; 2777 : 				{
; 2778 : 					ListItemAdd (hList, item.iItem, (char *) device.Path.c_str());

  003b9	83 7e 58 10	 cmp	 DWORD PTR [esi+88], 16	; 00000010H
  003bd	72 05		 jb	 SHORT $LN134@RawDevices
  003bf	8b 5e 44	 mov	 ebx, DWORD PTR [esi+68]
  003c2	eb 03		 jmp	 SHORT $LN135@RawDevices
$LN134@RawDevices:
  003c4	8d 5e 44	 lea	 ebx, DWORD PTR [esi+68]
$LN135@RawDevices:
  003c7	6a 34		 push	 52			; 00000034H
  003c9	8d 8c 24 8c 01
	00 00		 lea	 ecx, DWORD PTR _li$206197[esp+2776]
  003d0	6a 00		 push	 0
  003d2	51		 push	 ecx
  003d3	e8 00 00 00 00	 call	 _memset
  003d8	8b 94 24 8c 00
	00 00		 mov	 edx, DWORD PTR _item$141043[esp+2788]
  003df	c7 84 24 94 01
	00 00 01 00 00
	00		 mov	 DWORD PTR _li$206197[esp+2784], 1
  003ea	89 9c 24 a8 01
	00 00		 mov	 DWORD PTR _li$206197[esp+2804], ebx
  003f1	89 94 24 98 01
	00 00		 mov	 DWORD PTR _li$206197[esp+2788], edx
  003f8	c7 84 24 9c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR _li$206197[esp+2792], 0
  00403	8d 84 24 94 01
	00 00		 lea	 eax, DWORD PTR _li$206197[esp+2784]
  0040a	e9 91 01 00 00	 jmp	 $LN197@RawDevices
$LN23@RawDevices:

; 2748 : 				{
; 2749 : 					if (!device.Floppy && device.Size == 0)

  0040f	80 7e 03 00	 cmp	 BYTE PTR [esi+3], 0
  00413	75 0f		 jne	 SHORT $LN22@RawDevices
  00415	8b 44 24 14	 mov	 eax, DWORD PTR tv910[esp+2772]
  00419	8b 08		 mov	 ecx, DWORD PTR [eax]
  0041b	0b 48 04	 or	 ecx, DWORD PTR [eax+4]
  0041e	0f 84 2a 03 00
	00		 je	 $LN29@RawDevices
$LN22@RawDevices:

; 2750 : 						continue;
; 2751 : 
; 2752 : 					if (line > 1)

  00424	83 fb 01	 cmp	 ebx, 1
  00427	7e 61		 jle	 SHORT $LN21@RawDevices

; 2753 : 					{
; 2754 : 						ListItemAdd (hList, item.iItem, "");

  00429	6a 34		 push	 52			; 00000034H
  0042b	8d 94 24 58 01
	00 00		 lea	 edx, DWORD PTR _li$206147[esp+2776]
  00432	6a 00		 push	 0
  00434	52		 push	 edx
  00435	e8 00 00 00 00	 call	 _memset
  0043a	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR _item$141043[esp+2788]
  00441	83 c4 0c	 add	 esp, 12			; 0000000cH
  00444	8d 8c 24 54 01
	00 00		 lea	 ecx, DWORD PTR _li$206147[esp+2772]
  0044b	51		 push	 ecx
  0044c	6a 00		 push	 0
  0044e	68 07 10 00 00	 push	 4103			; 00001007H
  00453	55		 push	 ebp
  00454	c7 84 24 64 01
	00 00 01 00 00
	00		 mov	 DWORD PTR _li$206147[esp+2788], 1
  0045f	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR _li$206147[esp+2808], OFFSET ??_C@_00CNPNBAHC@?$AA@
  0046a	89 84 24 68 01
	00 00		 mov	 DWORD PTR _li$206147[esp+2792], eax
  00471	c7 84 24 6c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR _li$206147[esp+2796], 0
  0047c	ff d7		 call	 edi

; 2755 : 						item.iItem = line++;   

  0047e	89 9c 24 80 00
	00 00		 mov	 DWORD PTR _item$141043[esp+2776], ebx
  00485	43		 inc	 ebx
  00486	89 5c 24 18	 mov	 DWORD PTR _line$141042[esp+2772], ebx
$LN21@RawDevices:

; 2756 : 					}
; 2757 : 
; 2758 : 					if (device.Floppy || device.DynamicVolume)

  0048a	80 7e 03 00	 cmp	 BYTE PTR [esi+3], 0
  0048e	0f 85 bb 00 00
	00		 jne	 $LN19@RawDevices
  00494	80 7e 02 00	 cmp	 BYTE PTR [esi+2], 0
  00498	0f 85 b1 00 00
	00		 jne	 $LN19@RawDevices

; 2761 : 					}
; 2762 : 					else
; 2763 : 					{
; 2764 : 						wchar_t s[1024];
; 2765 : 						if (device.Removable)

  0049e	80 7e 5c 00	 cmp	 BYTE PTR [esi+92], 0
  004a2	74 26		 je	 SHORT $LN17@RawDevices

; 2766 : 							_snwprintf (s, ARRAY_LENGTH(s), L"%s %d", GetString ("REMOVABLE_DISK"), device.SystemNumber);

  004a4	8b 56 68	 mov	 edx, DWORD PTR [esi+104]
  004a7	52		 push	 edx
  004a8	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MBKJGBEM@REMOVABLE_DISK?$AA@
  004ad	e8 00 00 00 00	 call	 _GetString
  004b2	83 c4 04	 add	 esp, 4
  004b5	50		 push	 eax
  004b6	68 00 00 00 00	 push	 OFFSET ??_C@_1M@DJFDNGE@?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$AA@
  004bb	68 00 04 00 00	 push	 1024			; 00000400H
  004c0	8d 84 24 e0 02
	00 00		 lea	 eax, DWORD PTR _s$141069[esp+2788]
  004c7	50		 push	 eax

; 2767 : 						else

  004c8	eb 24		 jmp	 SHORT $LN198@RawDevices
$LN17@RawDevices:

; 2768 : 							_snwprintf (s, ARRAY_LENGTH(s), L"%s %d", GetString ("HARDDISK"), device.SystemNumber);

  004ca	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  004cd	51		 push	 ecx
  004ce	68 00 00 00 00	 push	 OFFSET ??_C@_08IPBANHMA@HARDDISK?$AA@
  004d3	e8 00 00 00 00	 call	 _GetString
  004d8	83 c4 04	 add	 esp, 4
  004db	50		 push	 eax
  004dc	68 00 00 00 00	 push	 OFFSET ??_C@_1M@DJFDNGE@?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$AA@
  004e1	68 00 04 00 00	 push	 1024			; 00000400H
  004e6	8d 94 24 e0 02
	00 00		 lea	 edx, DWORD PTR _s$141069[esp+2788]
  004ed	52		 push	 edx
$LN198@RawDevices:
  004ee	e8 00 00 00 00	 call	 __snwprintf

; 2769 : 
; 2770 : 						if (!device.Partitions.empty())

  004f3	8b 4e 7c	 mov	 ecx, DWORD PTR [esi+124]
  004f6	2b 4e 78	 sub	 ecx, DWORD PTR [esi+120]
  004f9	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  004fe	f7 e9		 imul	 ecx
  00500	c1 fa 06	 sar	 edx, 6
  00503	8b c2		 mov	 eax, edx
  00505	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00508	83 c4 14	 add	 esp, 20			; 00000014H
  0050b	03 c2		 add	 eax, edx
  0050d	74 25		 je	 SHORT $LN15@RawDevices

; 2771 : 							wcscat (s, L":");

  0050f	8d bc 24 d0 02
	00 00		 lea	 edi, DWORD PTR _s$141069[esp+2772]
  00516	83 c7 fe	 add	 edi, -2			; fffffffeH
  00519	8d a4 24 00 00
	00 00		 npad	 7
$LL191@RawDevices:
  00520	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  00524	83 c7 02	 add	 edi, 2
  00527	66 85 c0	 test	 ax, ax
  0052a	75 f4		 jne	 SHORT $LL191@RawDevices
  0052c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_13EBCNDICG@?$AA?3?$AA?$AA@
  00532	89 0f		 mov	 DWORD PTR [edi], ecx
$LN15@RawDevices:

; 2772 : 
; 2773 : 						ListItemAddW (hList, item.iItem, s);

  00534	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR _item$141043[esp+2776]
  0053b	8d 94 24 d0 02
	00 00		 lea	 edx, DWORD PTR _s$141069[esp+2772]
  00542	52		 push	 edx
  00543	50		 push	 eax
  00544	55		 push	 ebp
  00545	e8 00 00 00 00	 call	 _ListItemAddW
  0054a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0054d	eb 5f		 jmp	 SHORT $LN18@RawDevices
$LN19@RawDevices:

; 2759 : 					{
; 2760 : 						ListItemAdd (hList, item.iItem, (char *) device.Path.c_str());

  0054f	83 7e 58 10	 cmp	 DWORD PTR [esi+88], 16	; 00000010H
  00553	72 05		 jb	 SHORT $LN122@RawDevices
  00555	8b 5e 44	 mov	 ebx, DWORD PTR [esi+68]
  00558	eb 03		 jmp	 SHORT $LN123@RawDevices
$LN122@RawDevices:
  0055a	8d 5e 44	 lea	 ebx, DWORD PTR [esi+68]
$LN123@RawDevices:
  0055d	6a 34		 push	 52			; 00000034H
  0055f	8d 8c 24 f0 00
	00 00		 lea	 ecx, DWORD PTR _li$206167[esp+2776]
  00566	6a 00		 push	 0
  00568	51		 push	 ecx
  00569	e8 00 00 00 00	 call	 _memset
  0056e	8b 94 24 8c 00
	00 00		 mov	 edx, DWORD PTR _item$141043[esp+2788]
  00575	c7 84 24 f8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR _li$206167[esp+2784], 1
  00580	89 9c 24 0c 01
	00 00		 mov	 DWORD PTR _li$206167[esp+2804], ebx
  00587	89 94 24 fc 00
	00 00		 mov	 DWORD PTR _li$206167[esp+2788], edx
  0058e	c7 84 24 00 01
	00 00 00 00 00
	00		 mov	 DWORD PTR _li$206167[esp+2792], 0
  00599	8d 84 24 f8 00
	00 00		 lea	 eax, DWORD PTR _li$206167[esp+2784]
$LN197@RawDevices:
  005a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  005a3	50		 push	 eax
  005a4	6a 00		 push	 0
  005a6	68 07 10 00 00	 push	 4103			; 00001007H
  005ab	55		 push	 ebp
  005ac	ff d7		 call	 edi
$LN18@RawDevices:

; 2779 : 				}
; 2780 : 
; 2781 : 				itemToDeviceMap[item.iItem] = device;

  005ae	56		 push	 esi
  005af	8d 8c 24 84 00
	00 00		 lea	 ecx, DWORD PTR _item$141043[esp+2780]
  005b6	51		 push	 ecx
  005b7	b9 00 00 00 00	 mov	 ecx, OFFSET ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
  005bc	e8 00 00 00 00	 call	 ??A?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAEAAUHostDevice@@ABH@Z ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::operator[]
  005c1	8b c8		 mov	 ecx, eax
  005c3	e8 00 00 00 00	 call	 ??4HostDevice@@QAEAAU0@ABU0@@Z

; 2782 : 
; 2783 : 				// Size
; 2784 : 				if (device.Size != 0)

  005c8	8b 44 24 14	 mov	 eax, DWORD PTR tv910[esp+2772]
  005cc	8b 38		 mov	 edi, DWORD PTR [eax]
  005ce	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  005d1	8b d7		 mov	 edx, edi
  005d3	0b d3		 or	 edx, ebx
  005d5	0f 84 88 00 00
	00		 je	 $LN138@RawDevices

; 2785 : 				{
; 2786 : 					wchar_t size[100] = { 0 };

  005db	33 c0		 xor	 eax, eax
  005dd	68 c6 00 00 00	 push	 198			; 000000c6H
  005e2	50		 push	 eax
  005e3	8d 8c 24 12 02
	00 00		 lea	 ecx, DWORD PTR _size$141080[esp+2782]
  005ea	51		 push	 ecx
  005eb	66 89 84 24 14
	02 00 00	 mov	 WORD PTR _size$141080[esp+2784], ax
  005f3	e8 00 00 00 00	 call	 _memset

; 2787 : 					GetSizeString (device.Size, size);

  005f8	8d 94 24 14 02
	00 00		 lea	 edx, DWORD PTR _size$141080[esp+2784]
  005ff	52		 push	 edx
  00600	53		 push	 ebx
  00601	57		 push	 edi
  00602	e8 00 00 00 00	 call	 _GetSizeString

; 2788 : 					ListSubItemSetW (hList, item.iItem, 2, size);

  00607	6a 34		 push	 52			; 00000034H
  00609	8d 84 24 d8 01
	00 00		 lea	 eax, DWORD PTR _li$206203[esp+2800]
  00610	6a 00		 push	 0
  00612	50		 push	 eax
  00613	e8 00 00 00 00	 call	 _memset
  00618	8b 94 24 a4 00
	00 00		 mov	 edx, DWORD PTR _item$141043[esp+2812]
  0061f	83 c4 24	 add	 esp, 36			; 00000024H
  00622	8d 84 24 bc 01
	00 00		 lea	 eax, DWORD PTR _li$206203[esp+2772]
  00629	50		 push	 eax
  0062a	6a 00		 push	 0
  0062c	68 4c 10 00 00	 push	 4172			; 0000104cH
  00631	8d 8c 24 14 02
	00 00		 lea	 ecx, DWORD PTR _size$141080[esp+2784]
  00638	55		 push	 ebp
  00639	c7 84 24 cc 01
	00 00 01 00 00
	00		 mov	 DWORD PTR _li$206203[esp+2788], 1
  00644	89 8c 24 e0 01
	00 00		 mov	 DWORD PTR _li$206203[esp+2808], ecx
  0064b	89 94 24 d0 01
	00 00		 mov	 DWORD PTR _li$206203[esp+2792], edx
  00652	c7 84 24 d4 01
	00 00 02 00 00
	00		 mov	 DWORD PTR _li$206203[esp+2796], 2
  0065d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageW@16
$LN138@RawDevices:

; 2789 : 				}
; 2790 : 
; 2791 : 				// Mount point
; 2792 : 				if (!device.MountPoint.empty())

  00663	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  00667	74 62		 je	 SHORT $LN192@RawDevices

; 2793 : 					ListSubItemSet (hList, item.iItem, 1, (char *) device.MountPoint.c_str());

  00669	83 7e 20 10	 cmp	 DWORD PTR [esi+32], 16	; 00000010H
  0066d	72 05		 jb	 SHORT $LN146@RawDevices
  0066f	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00672	eb 03		 jmp	 SHORT $LN147@RawDevices
$LN146@RawDevices:
  00674	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
$LN147@RawDevices:
  00677	6a 34		 push	 52			; 00000034H
  00679	8d 8c 24 24 01
	00 00		 lea	 ecx, DWORD PTR _li$206226[esp+2776]
  00680	6a 00		 push	 0
  00682	51		 push	 ecx
  00683	e8 00 00 00 00	 call	 _memset
  00688	8b 94 24 8c 00
	00 00		 mov	 edx, DWORD PTR _item$141043[esp+2788]
  0068f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00692	8d 84 24 20 01
	00 00		 lea	 eax, DWORD PTR _li$206226[esp+2772]
  00699	50		 push	 eax
  0069a	6a 00		 push	 0
  0069c	68 06 10 00 00	 push	 4102			; 00001006H
  006a1	bb 01 00 00 00	 mov	 ebx, 1
  006a6	55		 push	 ebp
  006a7	89 9c 24 30 01
	00 00		 mov	 DWORD PTR _li$206226[esp+2788], ebx
  006ae	89 bc 24 44 01
	00 00		 mov	 DWORD PTR _li$206226[esp+2808], edi
  006b5	89 94 24 34 01
	00 00		 mov	 DWORD PTR _li$206226[esp+2792], edx
  006bc	89 9c 24 38 01
	00 00		 mov	 DWORD PTR _li$206226[esp+2796], ebx
  006c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  006c9	eb 05		 jmp	 SHORT $LN148@RawDevices
$LN192@RawDevices:
  006cb	bb 01 00 00 00	 mov	 ebx, 1
$LN148@RawDevices:

; 2794 : 
; 2795 : 				// Label
; 2796 : 				if (!device.Name.empty())

  006d0	83 7e 38 00	 cmp	 DWORD PTR [esi+56], 0
  006d4	74 5f		 je	 SHORT $LN158@RawDevices

; 2797 : 					ListSubItemSetW (hList, item.iItem, 3, (wchar_t *) device.Name.c_str());

  006d6	83 7e 3c 08	 cmp	 DWORD PTR [esi+60], 8
  006da	72 05		 jb	 SHORT $LN156@RawDevices
  006dc	8b 7e 28	 mov	 edi, DWORD PTR [esi+40]
  006df	eb 03		 jmp	 SHORT $LN157@RawDevices
$LN156@RawDevices:
  006e1	8d 7e 28	 lea	 edi, DWORD PTR [esi+40]
$LN157@RawDevices:
  006e4	6a 34		 push	 52			; 00000034H
  006e6	8d 8c 24 b4 00
	00 00		 lea	 ecx, DWORD PTR _li$206250[esp+2776]
  006ed	6a 00		 push	 0
  006ef	51		 push	 ecx
  006f0	e8 00 00 00 00	 call	 _memset
  006f5	8b 94 24 8c 00
	00 00		 mov	 edx, DWORD PTR _item$141043[esp+2788]
  006fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  006ff	8d 84 24 b0 00
	00 00		 lea	 eax, DWORD PTR _li$206250[esp+2772]
  00706	50		 push	 eax
  00707	6a 00		 push	 0
  00709	68 4c 10 00 00	 push	 4172			; 0000104cH
  0070e	55		 push	 ebp
  0070f	89 9c 24 c0 00
	00 00		 mov	 DWORD PTR _li$206250[esp+2788], ebx
  00716	89 bc 24 d4 00
	00 00		 mov	 DWORD PTR _li$206250[esp+2808], edi
  0071d	89 94 24 c4 00
	00 00		 mov	 DWORD PTR _li$206250[esp+2792], edx
  00724	c7 84 24 c8 00
	00 00 03 00 00
	00		 mov	 DWORD PTR _li$206250[esp+2796], 3
  0072f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageW@16
$LN158@RawDevices:

; 2798 : #ifdef TCMOUNT
; 2799 : 				else
; 2800 : 				{
; 2801 : 					wstring favoriteLabel = GetFavoriteVolumeLabel (device.Path);
; 2802 : 					if (!favoriteLabel.empty())
; 2803 : 						ListSubItemSetW (hList, item.iItem, 3, (wchar_t *) favoriteLabel.c_str());
; 2804 : 				}
; 2805 : #endif
; 2806 : 
; 2807 : 				item.iItem = line++;   

  00735	8b 44 24 18	 mov	 eax, DWORD PTR _line$141042[esp+2772]
  00739	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  0073f	89 84 24 80 00
	00 00		 mov	 DWORD PTR _item$141043[esp+2776], eax
  00746	03 c3		 add	 eax, ebx
  00748	89 44 24 18	 mov	 DWORD PTR _line$141042[esp+2772], eax
  0074c	8b d8		 mov	 ebx, eax
$LN29@RawDevices:
  0074e	80 7c 24 51 00	 cmp	 BYTE PTR _$S7$141046[esp+2777], 0
  00753	c6 44 24 50 01	 mov	 BYTE PTR _$S7$141046[esp+2776], 1
  00758	0f 94 c0	 sete	 al
  0075b	88 44 24 51	 mov	 BYTE PTR _$S7$141046[esp+2777], al
  0075f	84 c0		 test	 al, al
  00761	0f 85 df fb ff
	ff		 jne	 $LL194@RawDevices
$LN32@RawDevices:

; 2732 : 			item.mask = LVIF_TEXT;
; 2733 : 
; 2734 : 			foreach (const HostDevice &device, devices)

  00767	8b 54 24 4c	 mov	 edx, DWORD PTR _$S7$141046[esp+2772]
  0076b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0076e	8d 4c 24 4c	 lea	 ecx, DWORD PTR _$S7$141046[esp+2772]
  00772	ff d0		 call	 eax
  00774	8b 54 24 4c	 mov	 edx, DWORD PTR _$S7$141046[esp+2772]
  00778	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0077b	8d 4c 24 4c	 lea	 ecx, DWORD PTR _$S7$141046[esp+2772]
  0077f	ff d0		 call	 eax
  00781	84 c0		 test	 al, al
  00783	0f 85 67 fb ff
	ff		 jne	 $LL193@RawDevices
$LN31@RawDevices:

; 2808 : 			}

  00789	8d 4c 24 4c	 lea	 ecx, DWORD PTR _$S7$141046[esp+2772]
  0078d	e8 00 00 00 00	 call	 ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ

; 2809 : 
; 2810 : 			lpszFileName = (char *) lParam;

  00792	8b 4c 24 40	 mov	 ecx, DWORD PTR _lParam$GSCopy$[esp+2772]
  00796	89 0d 00 00 00
	00		 mov	 DWORD PTR ?lpszFileName@?1??RawDevicesDlgProc@@9@16@4PADA, ecx

; 2811 : 
; 2812 : #ifdef VOLFORMAT
; 2813 : 			EnableWindow (GetDlgItem (hwndDlg, IDOK), FALSE);
; 2814 : #endif
; 2815 : 			return 1;

  0079c	e9 e3 fa ff ff	 jmp	 $LN199@RawDevices
$LN10@RawDevices:

; 2816 : 		}
; 2817 : 
; 2818 : 	case WM_COMMAND:
; 2819 : 	case WM_NOTIFY:
; 2820 : 		// catch non-device line selected
; 2821 : 		if (msg == WM_NOTIFY && ((LPNMHDR) lParam)->code == LVN_ITEMCHANGED && (((LPNMLISTVIEW) lParam)->uNewState & LVIS_FOCUSED ))

  007a1	8b 94 24 dc 0a
	00 00		 mov	 edx, DWORD PTR _wParam$[esp+2764]
  007a8	83 f9 4e	 cmp	 ecx, 78			; 0000004eH
  007ab	0f 85 b2 00 00
	00		 jne	 $LN9@RawDevices
  007b1	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  007b4	83 f8 9b	 cmp	 eax, -101		; ffffff9bH
  007b7	0f 85 d2 00 00
	00		 jne	 $LN189@RawDevices
  007bd	84 5f 14	 test	 BYTE PTR [edi+20], bl
  007c0	0f 84 c9 00 00
	00		 je	 $LN189@RawDevices

; 2822 : 		{
; 2823 : 			LVITEM LvItem;
; 2824 : 			memset(&LvItem,0,sizeof(LvItem));

  007c6	6a 34		 push	 52			; 00000034H
  007c8	8d 94 24 b0 00
	00 00		 lea	 edx, DWORD PTR _LvItem$141090[esp+2772]
  007cf	6a 00		 push	 0
  007d1	52		 push	 edx
  007d2	e8 00 00 00 00	 call	 _memset

; 2825 : 			LvItem.mask = LVIF_TEXT | LVIF_PARAM;   
; 2826 : 			LvItem.iItem = ((LPNMLISTVIEW) lParam)->iItem;

  007d7	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 2827 : 			LvItem.pszText = lpszFileName;

  007da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?lpszFileName@?1??RawDevicesDlgProc@@9@16@4PADA

; 2828 : 			LvItem.cchTextMax = TC_MAX_PATH;
; 2829 : 
; 2830 : 			SendMessage (GetDlgItem (hwndDlg, IDC_DEVICELIST), LVM_GETITEM, LvItem.iItem, (LPARAM) &LvItem);

  007e0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  007e6	83 c4 0c	 add	 esp, 12			; 0000000cH
  007e9	8d 94 24 ac 00
	00 00		 lea	 edx, DWORD PTR _LvItem$141090[esp+2768]
  007f0	52		 push	 edx
  007f1	50		 push	 eax
  007f2	68 05 10 00 00	 push	 4101			; 00001005H
  007f7	68 ae 13 00 00	 push	 5038			; 000013aeH
  007fc	56		 push	 esi
  007fd	c7 84 24 c0 00
	00 00 05 00 00
	00		 mov	 DWORD PTR _LvItem$141090[esp+2788], 5
  00808	89 84 24 c4 00
	00 00		 mov	 DWORD PTR _LvItem$141090[esp+2792], eax
  0080f	89 8c 24 d4 00
	00 00		 mov	 DWORD PTR _LvItem$141090[esp+2808], ecx
  00816	c7 84 24 d8 00
	00 00 04 01 00
	00		 mov	 DWORD PTR _LvItem$141090[esp+2812], 260 ; 00000104H
  00821	ff d7		 call	 edi
  00823	50		 push	 eax
  00824	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 2831 : 			EnableWindow (GetDlgItem ((HWND) hwndDlg, IDOK), lpszFileName[0] != 0 && lpszFileName[0] != ' ');

  0082a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpszFileName@?1??RawDevicesDlgProc@@9@16@4PADA
  0082f	8a 00		 mov	 al, BYTE PTR [eax]
  00831	84 c0		 test	 al, al
  00833	74 19		 je	 SHORT $LN44@RawDevices
  00835	3c 20		 cmp	 al, 32			; 00000020H
  00837	74 15		 je	 SHORT $LN44@RawDevices
  00839	8b c3		 mov	 eax, ebx
  0083b	50		 push	 eax
  0083c	53		 push	 ebx
  0083d	56		 push	 esi
  0083e	ff d7		 call	 edi
  00840	50		 push	 eax
  00841	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 2832 : 
; 2833 : 			return 1;

  00847	8b c3		 mov	 eax, ebx
  00849	e9 3c fa ff ff	 jmp	 $LN40@RawDevices
$LN44@RawDevices:

; 2831 : 			EnableWindow (GetDlgItem ((HWND) hwndDlg, IDOK), lpszFileName[0] != 0 && lpszFileName[0] != ' ');

  0084e	33 c0		 xor	 eax, eax
  00850	50		 push	 eax
  00851	53		 push	 ebx
  00852	56		 push	 esi
  00853	ff d7		 call	 edi
  00855	50		 push	 eax
  00856	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
$LN4@RawDevices:

; 2832 : 
; 2833 : 			return 1;

  0085c	8b c3		 mov	 eax, ebx
  0085e	e9 27 fa ff ff	 jmp	 $LN40@RawDevices
$LN9@RawDevices:

; 2834 : 		}
; 2835 : 
; 2836 : 		if (msg == WM_COMMAND && lw == IDOK || msg == WM_NOTIFY && ((NMHDR *)lParam)->code == LVN_ITEMACTIVATE)

  00863	81 f9 11 01 00
	00		 cmp	 ecx, 273		; 00000111H
  00869	75 05		 jne	 SHORT $LN8@RawDevices
  0086b	66 3b d3	 cmp	 dx, bx
  0086e	74 24		 je	 SHORT $LN7@RawDevices
$LN8@RawDevices:

; 2972 : 		}
; 2973 : 
; 2974 : 		if (lw == IDCANCEL)

  00870	66 83 fa 02	 cmp	 dx, 2
  00874	0f 85 2b f8 ff
	ff		 jne	 $LN1@RawDevices

; 2975 : 		{
; 2976 : 			NormalCursor ();

  0087a	e8 00 00 00 00	 call	 _NormalCursor

; 2977 : 			EndDialog (hwndDlg, IDCANCEL);

  0087f	6a 02		 push	 2
  00881	56		 push	 esi
  00882	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 2978 : 			return 1;

  00888	8b c3		 mov	 eax, ebx
  0088a	e9 fb f9 ff ff	 jmp	 $LN40@RawDevices
$LN189@RawDevices:

; 2834 : 		}
; 2835 : 
; 2836 : 		if (msg == WM_COMMAND && lw == IDOK || msg == WM_NOTIFY && ((NMHDR *)lParam)->code == LVN_ITEMACTIVATE)

  0088f	83 f8 8e	 cmp	 eax, -114		; ffffff8eH
  00892	75 dc		 jne	 SHORT $LN8@RawDevices
$LN7@RawDevices:

; 2837 : 		{
; 2838 : 			int selectedItem = ListView_GetSelectionMark (GetDlgItem (hwndDlg, IDC_DEVICELIST));

  00894	33 ff		 xor	 edi, edi
  00896	57		 push	 edi
  00897	57		 push	 edi
  00898	68 42 10 00 00	 push	 4162			; 00001042H
  0089d	68 ae 13 00 00	 push	 5038			; 000013aeH
  008a2	56		 push	 esi
  008a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  008a9	50		 push	 eax
  008aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  008b0	89 44 24 10	 mov	 DWORD PTR _selectedItem$141098[esp+2768], eax

; 2839 : 
; 2840 : 			if (selectedItem == -1 || itemToDeviceMap.find (selectedItem) == itemToDeviceMap.end())

  008b4	83 f8 ff	 cmp	 eax, -1
  008b7	74 a3		 je	 SHORT $LN4@RawDevices
  008b9	8b 0d 18 00 00
	00		 mov	 ecx, DWORD PTR ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A+24
  008bf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
  008c5	89 4c 24 40	 mov	 DWORD PTR $T205980[esp+2772], ecx
  008c9	8d 44 24 3c	 lea	 eax, DWORD PTR $T205980[esp+2768]
  008cd	50		 push	 eax
  008ce	8d 4c 24 14	 lea	 ecx, DWORD PTR _selectedItem$141098[esp+2772]
  008d2	89 54 24 40	 mov	 DWORD PTR $T205980[esp+2772], edx
  008d6	51		 push	 ecx
  008d7	8d 94 24 e8 00
	00 00		 lea	 edx, DWORD PTR $T205979[esp+2776]
  008de	52		 push	 edx
  008df	b9 00 00 00 00	 mov	 ecx, OFFSET ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
  008e4	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABH@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::find
  008e9	8b c8		 mov	 ecx, eax
  008eb	e8 00 00 00 00	 call	 ??8const_iterator@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::const_iterator::operator==
  008f0	84 c0		 test	 al, al
  008f2	0f 85 64 ff ff
	ff		 jne	 $LN4@RawDevices

; 2841 : 				return 1; // non-device line selected
; 2842 : 
; 2843 : 			const HostDevice selectedDevice = itemToDeviceMap[selectedItem];

  008f8	8d 44 24 10	 lea	 eax, DWORD PTR _selectedItem$141098[esp+2768]
  008fc	50		 push	 eax
  008fd	b9 00 00 00 00	 mov	 ecx, OFFSET ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
  00902	e8 00 00 00 00	 call	 ??A?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAEAAUHostDevice@@ABH@Z ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::operator[]
  00907	50		 push	 eax
  00908	8d 8c 24 08 02
	00 00		 lea	 ecx, DWORD PTR _selectedDevice$141201[esp+2772]
  0090f	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z

; 2844 : 			strcpy_s (lpszFileName, TC_MAX_PATH, selectedDevice.Path.c_str());

  00914	83 bc 24 5c 02
	00 00 10	 cmp	 DWORD PTR _selectedDevice$141201[esp+2856], 16 ; 00000010H
  0091c	8b 84 24 48 02
	00 00		 mov	 eax, DWORD PTR _selectedDevice$141201[esp+2836]
  00923	73 07		 jae	 SHORT $LN183@RawDevices
  00925	8d 84 24 48 02
	00 00		 lea	 eax, DWORD PTR _selectedDevice$141201[esp+2836]
$LN183@RawDevices:
  0092c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?lpszFileName@?1??RawDevicesDlgProc@@9@16@4PADA
  00932	50		 push	 eax
  00933	68 04 01 00 00	 push	 260			; 00000104H
  00938	51		 push	 ecx
  00939	e8 00 00 00 00	 call	 _strcpy_s

; 2845 : 
; 2846 : #ifdef VOLFORMAT
; 2847 : 			if (selectedDevice.ContainsSystem && selectedDevice.IsPartition)
; 2848 : 			{
; 2849 : 				if (WizardMode != WIZARD_MODE_SYS_DEVICE)
; 2850 : 				{
; 2851 : 					if (AskYesNo ("CONFIRM_SYSTEM_ENCRYPTION_MODE") == IDNO)
; 2852 : 					{
; 2853 : 						EndDialog (hwndDlg, IDCANCEL);
; 2854 : 						return 1;
; 2855 : 					}
; 2856 : 
; 2857 : 					bSysPartitionSelected = TRUE;
; 2858 : 					bSysDriveSelected = FALSE;
; 2859 : 					lpszFileName[0] = 0;
; 2860 : 					SwitchWizardToSysEncMode ();
; 2861 : 
; 2862 : 					NormalCursor ();
; 2863 : 					EndDialog (hwndDlg, IDOK);
; 2864 : 					return 1;
; 2865 : 				}
; 2866 : 				else
; 2867 : 				{
; 2868 : 					// This should never be the case because the Select Device dialog is not available in this wizard mode
; 2869 : 					bSysPartitionSelected = TRUE;
; 2870 : 					bSysDriveSelected = FALSE;
; 2871 : 					lpszFileName[0] = 0;
; 2872 : 					SwitchWizardToSysEncMode ();
; 2873 : 					NormalCursor ();
; 2874 : 					EndDialog (hwndDlg, IDCANCEL);
; 2875 : 					return 1;
; 2876 : 				}
; 2877 : 			}
; 2878 : 
; 2879 : 			if (!(selectedDevice.ContainsSystem && !selectedDevice.IsPartition))
; 2880 : 			{
; 2881 : 				if (bWarnDeviceFormatAdvanced
; 2882 : 					&& !bHiddenVolDirect
; 2883 : 					&& AskWarnNoYes("FORMAT_DEVICE_FOR_ADVANCED_ONLY") == IDNO)
; 2884 : 				{
; 2885 : 					if (AskNoYes("CONFIRM_CHANGE_WIZARD_MODE_TO_FILE_CONTAINER") == IDYES)
; 2886 : 					{
; 2887 : 						SwitchWizardToFileContainerMode ();
; 2888 : 					}
; 2889 : 					EndDialog (hwndDlg, IDCANCEL);
; 2890 : 					return 1;
; 2891 : 				}
; 2892 : 
; 2893 : 				if (!bHiddenVolDirect)
; 2894 : 					bWarnDeviceFormatAdvanced = FALSE;
; 2895 : 			}
; 2896 : 
; 2897 : #else	// #ifdef VOLFORMAT
; 2898 : 
; 2899 : 			bSysPartitionSelected = (selectedDevice.ContainsSystem && selectedDevice.IsPartition);

  0093e	8a 8c 24 11 02
	00 00		 mov	 cl, BYTE PTR _selectedDevice$141201[esp+2781]
  00945	8a 84 24 14 02
	00 00		 mov	 al, BYTE PTR _selectedDevice$141201[esp+2784]
  0094c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0094f	84 c9		 test	 cl, cl
  00951	74 0a		 je	 SHORT $LN46@RawDevices
  00953	89 1d 00 00 00
	00		 mov	 DWORD PTR _bSysPartitionSelected, ebx
  00959	84 c0		 test	 al, al
  0095b	75 28		 jne	 SHORT $LN3@RawDevices
$LN46@RawDevices:
  0095d	89 3d 00 00 00
	00		 mov	 DWORD PTR _bSysPartitionSelected, edi

; 2900 : 			bSysDriveSelected = FALSE;
; 2901 : 
; 2902 : #endif	// #ifdef VOLFORMAT
; 2903 : 
; 2904 : 			if (!selectedDevice.IsPartition && !selectedDevice.Floppy)

  00963	84 c0		 test	 al, al
  00965	75 1e		 jne	 SHORT $LN3@RawDevices
  00967	38 84 24 07 02
	00 00		 cmp	 BYTE PTR _selectedDevice$141201[esp+2771], al
  0096e	75 15		 jne	 SHORT $LN3@RawDevices

; 2905 : 			{
; 2906 : 				// Whole device selected
; 2907 : 
; 2908 : #ifdef VOLFORMAT
; 2909 : 				if (selectedDevice.ContainsSystem && !selectedDevice.IsPartition)
; 2910 : 				{
; 2911 : 					if (WizardMode != WIZARD_MODE_SYS_DEVICE)
; 2912 : 					{
; 2913 : 						if (AskYesNo ("CONFIRM_SYSTEM_ENCRYPTION_MODE") == IDNO)
; 2914 : 						{
; 2915 : 							NormalCursor ();
; 2916 : 							EndDialog (hwndDlg, IDCANCEL);
; 2917 : 							return 1;
; 2918 : 						}
; 2919 : 
; 2920 : 						bSysDriveSelected = TRUE;
; 2921 : 						bSysPartitionSelected = FALSE;
; 2922 : 						lpszFileName[0] = 0;
; 2923 : 						SwitchWizardToSysEncMode ();
; 2924 : 
; 2925 : 						NormalCursor ();
; 2926 : 						EndDialog (hwndDlg, IDOK);
; 2927 : 						return 1;
; 2928 : 					}
; 2929 : 					else
; 2930 : 					{
; 2931 : 						// This should never be the case because the Select Device dialog is not available in this wizard mode
; 2932 : 						bSysDriveSelected = TRUE;
; 2933 : 						bSysPartitionSelected = FALSE;
; 2934 : 						lpszFileName[0] = 0;
; 2935 : 						SwitchWizardToSysEncMode ();
; 2936 : 						NormalCursor ();
; 2937 : 						EndDialog (hwndDlg, IDCANCEL);
; 2938 : 						return 1;
; 2939 : 					}
; 2940 : 				}
; 2941 : 
; 2942 : 				// Disallow format if the device contains partitions, but not if the partition is virtual or system 
; 2943 : 				if (!selectedDevice.IsVirtualPartition
; 2944 : 					&& !bHiddenVolDirect)
; 2945 : 				{
; 2946 : 					if (!selectedDevice.Partitions.empty())
; 2947 : 					{
; 2948 : 						EnableWindow (GetDlgItem (hwndDlg, IDOK), FALSE);
; 2949 : 						Error ("DEVICE_PARTITIONS_ERR_W_INPLACE_ENC_NOTE");
; 2950 : 						return 1;
; 2951 : 					}
; 2952 : 
; 2953 : 					if (AskWarnNoYes ("WHOLE_NONSYS_DEVICE_ENC_CONFIRM") == IDNO)
; 2954 : 						return 1;
; 2955 : 				}
; 2956 : #else	// #ifdef VOLFORMAT
; 2957 : 
; 2958 : 				bSysDriveSelected = (selectedDevice.ContainsSystem && !selectedDevice.IsPartition);

  00970	33 d2		 xor	 edx, edx
  00972	84 c9		 test	 cl, cl
  00974	0f 95 c2	 setne	 dl

; 2959 : 				bSysPartitionSelected = FALSE;

  00977	89 3d 00 00 00
	00		 mov	 DWORD PTR _bSysPartitionSelected, edi
  0097d	89 15 00 00 00
	00		 mov	 DWORD PTR _bSysDriveSelected, edx

; 2960 : 
; 2961 : #endif	// #ifdef VOLFORMAT
; 2962 : 			}
; 2963 : 			else 

  00983	eb 06		 jmp	 SHORT $LN2@RawDevices
$LN3@RawDevices:

; 2964 : 				bSysDriveSelected = FALSE;

  00985	89 3d 00 00 00
	00		 mov	 DWORD PTR _bSysDriveSelected, edi
$LN2@RawDevices:

; 2965 : 
; 2966 : #ifdef VOLFORMAT
; 2967 : 			bRemovableHostDevice = selectedDevice.Removable;
; 2968 : #endif
; 2969 : 			NormalCursor ();

  0098b	e8 00 00 00 00	 call	 _NormalCursor

; 2970 : 			EndDialog (hwndDlg, IDOK);

  00990	53		 push	 ebx
  00991	56		 push	 esi
  00992	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 2971 : 			return 1;

  00998	8d 8c 24 04 02
	00 00		 lea	 ecx, DWORD PTR _selectedDevice$141201[esp+2768]
  0099f	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  009a4	8b c3		 mov	 eax, ebx
  009a6	e9 df f8 ff ff	 jmp	 $LN40@RawDevices
_RawDevicesDlgProc@16 ENDP
_TEXT	ENDS
PUBLIC	?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; ExtraBootPartitionDevicePath
_DATA	SEGMENT
?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 04H DUP (?)
	DB	00H					; ExtraBootPartitionDevicePath
	DB	15 DUP(00H)
	DD	00H
	DD	0fH
; Function compile flags: /Ogtpy
_DATA	ENDS
;	COMDAT ??__EExtraBootPartitionDevicePath@@YAXXZ
text$yc	SEGMENT
??__EExtraBootPartitionDevicePath@@YAXXZ PROC		; `dynamic initializer for 'ExtraBootPartitionDevicePath'', COMDAT

; 167  : string ExtraBootPartitionDevicePath;

  00000	68 00 00 00 00	 push	 OFFSET ??__FExtraBootPartitionDevicePath@@YAXXZ ; `dynamic atexit destructor for 'ExtraBootPartitionDevicePath''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__EExtraBootPartitionDevicePath@@YAXXZ ENDP		; `dynamic initializer for 'ExtraBootPartitionDevicePath''
; Function compile flags: /Ogtpy
text$yc	ENDS
;	COMDAT ??__FExtraBootPartitionDevicePath@@YAXXZ
text$yd	SEGMENT
??__FExtraBootPartitionDevicePath@@YAXXZ PROC		; `dynamic atexit destructor for 'ExtraBootPartitionDevicePath'', COMDAT
  00000	83 3d 18 00 00
	00 10		 cmp	 DWORD PTR ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+24, 16 ; 00000010H
  00007	72 0e		 jb	 SHORT $LN19@dynamic
  00009	a1 04 00 00 00	 mov	 eax, DWORD PTR ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+4
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
$LN19@dynamic:
  00017	33 c0		 xor	 eax, eax
  00019	c7 05 18 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+24, 15 ; 0000000fH
  00023	a3 14 00 00 00	 mov	 DWORD PTR ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, eax
  00028	a2 04 00 00 00	 mov	 BYTE PTR ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+4, al
  0002d	c3		 ret	 0
??__FExtraBootPartitionDevicePath@@YAXXZ ENDP		; `dynamic atexit destructor for 'ExtraBootPartitionDevicePath''
; Function compile flags: /Ogtpy
text$yd	ENDS
;	COMDAT ??__Fdevices@?1??RawDevicesDlgProc@@9@16@YAXXZ
text$yd	SEGMENT
??__Fdevices@?1??RawDevicesDlgProc@@9@16@YAXXZ PROC	; `RawDevicesDlgProc'::`2'::`dynamic atexit destructor for 'devices'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A
  00005	e9 00 00 00 00	 jmp	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
??__Fdevices@?1??RawDevicesDlgProc@@9@16@YAXXZ ENDP	; `RawDevicesDlgProc'::`2'::`dynamic atexit destructor for 'devices''
; Function compile flags: /Ogtpy
text$yd	ENDS
;	COMDAT ??__FitemToDeviceMap@?1??RawDevicesDlgProc@@9@16@YAXXZ
text$yd	SEGMENT
??__FitemToDeviceMap@?1??RawDevicesDlgProc@@9@16@YAXXZ PROC ; `RawDevicesDlgProc'::`2'::`dynamic atexit destructor for 'itemToDeviceMap'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
  00005	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::~_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
??__FitemToDeviceMap@?1??RawDevicesDlgProc@@9@16@YAXXZ ENDP ; `RawDevicesDlgProc'::`2'::`dynamic atexit destructor for 'itemToDeviceMap''
text$yd	ENDS
PUBLIC	?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
;	COMDAT ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_ExtraBootPartitionDevicePath$initializer$ DD FLAT:??__EExtraBootPartitionDevicePath@@YAXXZ
CRT$XCU	ENDS
END
