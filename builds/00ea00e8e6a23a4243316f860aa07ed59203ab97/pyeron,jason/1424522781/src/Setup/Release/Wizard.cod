; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\home\public\Desktop\projects\ciphershed.build\src\Setup\Wizard.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
PUBLIC	??_C@_0BC@KMEHMKJJ@truecrypt?9x64?4sys?$AA@	; `string'
PUBLIC	??_C@_0O@OJENBJKN@truecrypt?4sys?$AA@		; `string'
PUBLIC	??_C@_0BG@NHCNJMON@CipherShed?5Format?4exe?$AA@	; `string'
PUBLIC	??_C@_0P@KEOPEMDF@CipherShed?4exe?$AA@		; `string'
PUBLIC	??_C@_0M@HNDLNFKG@License?4txt?$AA@		; `string'
PUBLIC	??_C@_0BK@LMECBCPP@CipherShed?5User?5Guide?4pdf?$AA@ ; `string'
PUBLIC	??_C@_0BG@PCIEDLBB@ACipherShed?5Setup?4exe?$AA@	; `string'
PUBLIC	??_C@_0P@KPKCHNJD@Dtruecrypt?4sys?$AA@		; `string'
PUBLIC	??_C@_0BD@ILLOKAML@Atruecrypt?9x64?4sys?$AA@	; `string'
PUBLIC	??_C@_0P@JMCFMDBI@Atruecrypt?4sys?$AA@		; `string'
PUBLIC	??_C@_0BH@JDBNPKKN@ACipherShed?5Format?4exe?$AA@ ; `string'
PUBLIC	??_C@_0BA@BPJBGDOM@ACipherShed?4exe?$AA@	; `string'
PUBLIC	??_C@_0N@GJIBBNGF@ALicense?4txt?$AA@		; `string'
PUBLIC	??_C@_0BL@MFPLEOCK@ACipherShed?5User?5Guide?4pdf?$AA@ ; `string'
PUBLIC	?WizardDestInstallPath@@3PADA			; WizardDestInstallPath
PUBLIC	?WizardDestExtractPath@@3PADA			; WizardDestExtractPath
PUBLIC	?SelfFile@@3PADA				; SelfFile
PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?hCurPage@@3PAUHWND__@@A			; hCurPage
PUBLIC	?nCurPageNo@@3HA				; nCurPageNo
PUBLIC	?hbmWizardBitmapRescaled@@3PAUHBITMAP__@@A	; hbmWizardBitmapRescaled
PUBLIC	?bExtractOnly@@3HA				; bExtractOnly
PUBLIC	?bLicenseAccepted@@3HA				; bLicenseAccepted
PUBLIC	?bOpenContainingFolder@@3HA			; bOpenContainingFolder
PUBLIC	?bExtractionSuccessful@@3HA			; bExtractionSuccessful
PUBLIC	?bStartInstall@@3HA				; bStartInstall
PUBLIC	?bStartExtraction@@3HA				; bStartExtraction
PUBLIC	?bInProgress@@3HA				; bInProgress
PUBLIC	_bPromptTutorial
PUBLIC	_bPromptReleaseNotes
PUBLIC	?nPbar@@3HA					; nPbar
_BSS	SEGMENT
?WizardDestInstallPath@@3PADA DB 0104H DUP (?)		; WizardDestInstallPath
?WizardDestExtractPath@@3PADA DB 0104H DUP (?)		; WizardDestExtractPath
?SelfFile@@3PADA DB 0104H DUP (?)			; SelfFile
?hCurPage@@3PAUHWND__@@A DD 01H DUP (?)			; hCurPage
?hbmWizardBitmapRescaled@@3PAUHBITMAP__@@A DD 01H DUP (?) ; hbmWizardBitmapRescaled
?bExtractOnly@@3HA DD 01H DUP (?)			; bExtractOnly
?bLicenseAccepted@@3HA DD 01H DUP (?)			; bLicenseAccepted
?bExtractionSuccessful@@3HA DD 01H DUP (?)		; bExtractionSuccessful
?bStartInstall@@3HA DD 01H DUP (?)			; bStartInstall
?bStartExtraction@@3HA DD 01H DUP (?)			; bStartExtraction
?bInProgress@@3HA DD 01H DUP (?)			; bInProgress
_bPromptTutorial DD 01H DUP (?)
_bPromptReleaseNotes DD 01H DUP (?)
?nPbar@@3HA DD	01H DUP (?)				; nPbar
_BSS	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KMEHMKJJ@truecrypt?9x64?4sys?$AA@
CONST	SEGMENT
??_C@_0BC@KMEHMKJJ@truecrypt?9x64?4sys?$AA@ DB 'truecrypt-x64.sys', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OJENBJKN@truecrypt?4sys?$AA@
CONST	SEGMENT
??_C@_0O@OJENBJKN@truecrypt?4sys?$AA@ DB 'truecrypt.sys', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NHCNJMON@CipherShed?5Format?4exe?$AA@
CONST	SEGMENT
??_C@_0BG@NHCNJMON@CipherShed?5Format?4exe?$AA@ DB 'CipherShed Format.exe'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KEOPEMDF@CipherShed?4exe?$AA@
CONST	SEGMENT
??_C@_0P@KEOPEMDF@CipherShed?4exe?$AA@ DB 'CipherShed.exe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HNDLNFKG@License?4txt?$AA@
CONST	SEGMENT
??_C@_0M@HNDLNFKG@License?4txt?$AA@ DB 'License.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LMECBCPP@CipherShed?5User?5Guide?4pdf?$AA@
CONST	SEGMENT
??_C@_0BK@LMECBCPP@CipherShed?5User?5Guide?4pdf?$AA@ DB 'CipherShed User '
	DB	'Guide.pdf', 00H				; `string'
CONST	ENDS
_DATA	SEGMENT
_szFiles DD	FLAT:??_C@_0BL@MFPLEOCK@ACipherShed?5User?5Guide?4pdf?$AA@
	DD	FLAT:??_C@_0N@GJIBBNGF@ALicense?4txt?$AA@
	DD	FLAT:??_C@_0BA@BPJBGDOM@ACipherShed?4exe?$AA@
	DD	FLAT:??_C@_0BH@JDBNPKKN@ACipherShed?5Format?4exe?$AA@
	DD	FLAT:??_C@_0P@JMCFMDBI@Atruecrypt?4sys?$AA@
	DD	FLAT:??_C@_0BD@ILLOKAML@Atruecrypt?9x64?4sys?$AA@
	DD	FLAT:??_C@_0P@KPKCHNJD@Dtruecrypt?4sys?$AA@
	DD	FLAT:??_C@_0BG@PCIEDLBB@ACipherShed?5Setup?4exe?$AA@
_szCompressedFiles DD FLAT:??_C@_0BK@LMECBCPP@CipherShed?5User?5Guide?4pdf?$AA@
	DD	FLAT:??_C@_0M@HNDLNFKG@License?4txt?$AA@
	DD	FLAT:??_C@_0P@KEOPEMDF@CipherShed?4exe?$AA@
	DD	FLAT:??_C@_0BG@NHCNJMON@CipherShed?5Format?4exe?$AA@
	DD	FLAT:??_C@_0O@OJENBJKN@truecrypt?4sys?$AA@
	DD	FLAT:??_C@_0BC@KMEHMKJJ@truecrypt?9x64?4sys?$AA@
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
?nCurPageNo@@3HA DD 0ffffffffH				; nCurPageNo
?bOpenContainingFolder@@3HA DD 01H			; bOpenContainingFolder
_DATA	ENDS
;	COMDAT ??_C@_0BG@PCIEDLBB@ACipherShed?5Setup?4exe?$AA@
CONST	SEGMENT
??_C@_0BG@PCIEDLBB@ACipherShed?5Setup?4exe?$AA@ DB 'ACipherShed Setup.exe'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KPKCHNJD@Dtruecrypt?4sys?$AA@
CONST	SEGMENT
??_C@_0P@KPKCHNJD@Dtruecrypt?4sys?$AA@ DB 'Dtruecrypt.sys', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@ILLOKAML@Atruecrypt?9x64?4sys?$AA@
CONST	SEGMENT
??_C@_0BD@ILLOKAML@Atruecrypt?9x64?4sys?$AA@ DB 'Atruecrypt-x64.sys', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JMCFMDBI@Atruecrypt?4sys?$AA@
CONST	SEGMENT
??_C@_0P@JMCFMDBI@Atruecrypt?4sys?$AA@ DB 'Atruecrypt.sys', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JDBNPKKN@ACipherShed?5Format?4exe?$AA@
CONST	SEGMENT
??_C@_0BH@JDBNPKKN@ACipherShed?5Format?4exe?$AA@ DB 'ACipherShed Format.e'
	DB	'xe', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BPJBGDOM@ACipherShed?4exe?$AA@
CONST	SEGMENT
??_C@_0BA@BPJBGDOM@ACipherShed?4exe?$AA@ DB 'ACipherShed.exe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GJIBBNGF@ALicense?4txt?$AA@
CONST	SEGMENT
??_C@_0N@GJIBBNGF@ALicense?4txt?$AA@ DB 'ALicense.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MFPLEOCK@ACipherShed?5User?5Guide?4pdf?$AA@
CONST	SEGMENT
??_C@_0BL@MFPLEOCK@ACipherShed?5User?5Guide?4pdf?$AA@ DB 'ACipherShed Use'
	DB	'r Guide.pdf', 00H				; `string'
CONST	ENDS
EXTRN	__time64:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\time.inl
;	COMDAT _time
_TEXT	SEGMENT
_time	PROC						; COMDAT
; __Time$ = eax

; 135  :     return _time64(_Time);

  00000	50		 push	 eax
  00001	e8 00 00 00 00	 call	 __time64
  00006	83 c4 04	 add	 esp, 4

; 136  : }

  00009	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

  00000	56		 push	 esi
  00001	8d 44 24 08	 lea	 eax, DWORD PTR __Message$[esp]
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtpy
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00009	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000e	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00013	74 09		 je	 SHORT $LN6@scalar
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
$LN6@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	_wmemcpy_s
EXTRN	_memcpy_s:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\wchar.h
;	COMDAT _wmemcpy_s
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__N1$ = 12						; size = 4
__S2$ = 16						; size = 4
__N$ = 20						; size = 4
_wmemcpy_s PROC						; COMDAT

; 1232 : #pragma warning( push )
; 1233 : #pragma warning( disable : 6386 )
; 1234 :             return memcpy_s(_S1, _N1*sizeof(wchar_t), _S2, _N*sizeof(wchar_t));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __N$[esp-4]
  00004	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00007	89 4c 24 10	 mov	 DWORD PTR __N$[esp-4], ecx
  0000b	8b 44 24 08	 mov	 eax, DWORD PTR __N1$[esp-4]
  0000f	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00012	89 4c 24 08	 mov	 DWORD PTR __N1$[esp-4], ecx
  00016	e9 00 00 00 00	 jmp	 _memcpy_s
_wmemcpy_s ENDP
_TEXT	ENDS
PUBLIC	_wmemmove_s
EXTRN	_memmove_s:PROC
; Function compile flags: /Ogtpy
;	COMDAT _wmemmove_s
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__N1$ = 12						; size = 4
__S2$ = 16						; size = 4
__N$ = 20						; size = 4
_wmemmove_s PROC					; COMDAT

; 1252 : #pragma warning( push )
; 1253 : #pragma warning( disable : 6386 )
; 1254 :             return memmove_s(_S1, _N1*sizeof(wchar_t), _S2, _N*sizeof(wchar_t));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __N$[esp-4]
  00004	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00007	89 4c 24 10	 mov	 DWORD PTR __N$[esp-4], ecx
  0000b	8b 44 24 08	 mov	 eax, DWORD PTR __N1$[esp-4]
  0000f	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00012	89 4c 24 08	 mov	 DWORD PTR __N1$[esp-4], ecx
  00016	e9 00 00 00 00	 jmp	 _memmove_s
_wmemmove_s ENDP
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z	; std::char_traits<wchar_t>::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z PROC	; std::char_traits<wchar_t>::assign, COMDAT

; 310  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	66 8b 08	 mov	 cx, WORD PTR [eax]
  00007	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000b	66 89 0a	 mov	 WORD PTR [edx], cx

; 311  : 		}

  0000e	c3		 ret	 0
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ENDP	; std::char_traits<wchar_t>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@_W@std@@SAIPB_W@Z		; std::char_traits<wchar_t>::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@_W@std@@SAIPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@_W@std@@SAIPB_W@Z PROC		; std::char_traits<wchar_t>::length, COMDAT

; 333  : //		_DEBUG_POINTER(_First);
; 334  : 		return (::wcslen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL3@length:
  00007	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000a	83 c0 02	 add	 eax, 2
  0000d	66 85 c9	 test	 cx, cx
  00010	75 f5		 jne	 SHORT $LL3@length
  00012	2b c2		 sub	 eax, edx
  00014	d1 f8		 sar	 eax, 1

; 335  : 		}

  00016	c3		 ret	 0
?length@?$char_traits@_W@std@@SAIPB_W@Z ENDP		; std::char_traits<wchar_t>::length
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ; std::char_traits<wchar_t>::_Copy_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_words$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z PROC	; std::char_traits<wchar_t>::_Copy_s, COMDAT

; 348  : //		_DEBUG_POINTER(_First1);
; 349  : //		_DEBUG_POINTER(_First2);
; 350  : 		_CRT_SECURE_WMEMCPY(_First1, _Size_in_words, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size_in_words$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 351  : 		return _First1;

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 352  : 		}

  00026	c3		 ret	 0
?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ENDP	; std::char_traits<wchar_t>::_Copy_s
_TEXT	ENDS
PUBLIC	?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ; std::char_traits<wchar_t>::_Move_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_words$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z PROC	; std::char_traits<wchar_t>::_Move_s, COMDAT

; 372  : //		_DEBUG_POINTER(_First1);
; 373  : //		_DEBUG_POINTER(_First2);
; 374  : 		_CRT_SECURE_WMEMMOVE(_First1, _Size_in_words, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size_in_words$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 375  : 		return (_Elem *)_First1;

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 376  : 		}

  00026	c3		 ret	 0
?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ENDP	; std::char_traits<wchar_t>::_Move_s
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 425  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 426  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 448  : //		_DEBUG_POINTER(_First);
; 449  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@length@2:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $LL3@length@2
  0000e	2b c2		 sub	 eax, edx

; 450  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Copy_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Copy_s, COMDAT

; 463  : //		_DEBUG_POINTER(_First1);
; 464  : //		_DEBUG_POINTER(_First2);
; 465  : 		_CRT_SECURE_MEMCPY(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 466  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 467  : 		}

  00020	c3		 ret	 0
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Copy_s
_TEXT	ENDS
PUBLIC	?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Move_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Move_s, COMDAT

; 487  : //		_DEBUG_POINTER(_First1);
; 488  : //		_DEBUG_POINTER(_First2);
; 489  : 		_CRT_SECURE_MEMMOVE(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 490  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 491  : 		}

  00020	c3		 ret	 0
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Move_s
_TEXT	ENDS
PUBLIC	_localcleanupwiz
EXTRN	__imp__CryptReleaseContext@8:PROC
EXTRN	__imp__DeleteObject@4:PROC
_BSS	SEGMENT
_hDonTextFont DD 01H DUP (?)
_OsPrngAvailable DD 01H DUP (?)
_hCryptProv DD	01H DUP (?)
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\setup\wizard.c
_BSS	ENDS
;	COMDAT _localcleanupwiz
_TEXT	SEGMENT
_localcleanupwiz PROC					; COMDAT

; 70   : 	/* Delete buffered bitmaps (if any) */
; 71   : 	if (hbmWizardBitmapRescaled != NULL)

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hbmWizardBitmapRescaled@@3PAUHBITMAP__@@A ; hbmWizardBitmapRescaled
  00005	56		 push	 esi
  00006	33 f6		 xor	 esi, esi
  00008	57		 push	 edi
  00009	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__DeleteObject@4
  0000f	3b c6		 cmp	 eax, esi
  00011	74 09		 je	 SHORT $LN3@localclean

; 72   : 	{
; 73   : 		DeleteObject ((HGDIOBJ) hbmWizardBitmapRescaled);

  00013	50		 push	 eax
  00014	ff d7		 call	 edi

; 74   : 		hbmWizardBitmapRescaled = NULL;

  00016	89 35 00 00 00
	00		 mov	 DWORD PTR ?hbmWizardBitmapRescaled@@3PAUHBITMAP__@@A, esi ; hbmWizardBitmapRescaled
$LN3@localclean:

; 75   : 	}
; 76   : 
; 77   : 	if (hCryptProv != 0)

  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCryptProv
  00021	3b c6		 cmp	 eax, esi
  00023	74 14		 je	 SHORT $LN2@localclean

; 78   : 	{
; 79   : 		OsPrngAvailable = FALSE;
; 80   : 		CryptReleaseContext (hCryptProv, 0);

  00025	56		 push	 esi
  00026	50		 push	 eax
  00027	89 35 00 00 00
	00		 mov	 DWORD PTR _OsPrngAvailable, esi
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CryptReleaseContext@8

; 81   : 		hCryptProv = 0;

  00033	89 35 00 00 00
	00		 mov	 DWORD PTR _hCryptProv, esi
$LN2@localclean:

; 82   : 	}
; 83   : 
; 84   : 	if (hDonTextFont != NULL)

  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDonTextFont
  0003e	3b c6		 cmp	 eax, esi
  00040	74 09		 je	 SHORT $LN1@localclean

; 85   : 	{
; 86   : 		DeleteObject (hDonTextFont);

  00042	50		 push	 eax
  00043	ff d7		 call	 edi

; 87   : 		hDonTextFont = NULL;

  00045	89 35 00 00 00
	00		 mov	 DWORD PTR _hDonTextFont, esi
$LN1@localclean:
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi

; 88   : 	}
; 89   : }

  0004d	c3		 ret	 0
_localcleanupwiz ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@ILKBADPD@?2CipherShed?2?$AA@		; `string'
PUBLIC	??_C@_0M@EMLNMOID@?2TrueCrypt?2?$AA@		; `string'
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
EXTRN	_strncmp:PROC
EXTRN	_bCipherShedMigration:DWORD
EXTRN	_strcpy_s:PROC
EXTRN	_InstallationPath:BYTE
;	COMDAT ??_C@_0N@ILKBADPD@?2CipherShed?2?$AA@
CONST	SEGMENT
??_C@_0N@ILKBADPD@?2CipherShed?2?$AA@ DB '\CipherShed\', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EMLNMOID@?2TrueCrypt?2?$AA@
CONST	SEGMENT
??_C@_0M@EMLNMOID@?2TrueCrypt?2?$AA@ DB '\TrueCrypt\', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?InitWizardDestInstallPath@@YAXXZ
_TEXT	SEGMENT
?InitWizardDestInstallPath@@YAXXZ PROC			; InitWizardDestInstallPath, COMDAT

; 93   : 	if (strlen (WizardDestInstallPath) < 2)

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  00005	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL7@InitWizard:
  00008	8a 08		 mov	 cl, BYTE PTR [eax]
  0000a	40		 inc	 eax
  0000b	84 c9		 test	 cl, cl
  0000d	75 f9		 jne	 SHORT $LL7@InitWizard
  0000f	2b c2		 sub	 eax, edx
  00011	83 f8 02	 cmp	 eax, 2
  00014	0f 83 b6 00 00
	00		 jae	 $LN1@InitWizard

; 94   : 	{
; 95   : 		strcpy_s (WizardDestInstallPath, sizeof(WizardDestInstallPath), InstallationPath);

  0001a	68 00 00 00 00	 push	 OFFSET _InstallationPath
  0001f	68 04 01 00 00	 push	 260			; 00000104H
  00024	68 00 00 00 00	 push	 OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  00029	e8 00 00 00 00	 call	 _strcpy_s

; 96   : 		if (WizardDestInstallPath [strlen (WizardDestInstallPath) - 1] != '\\')

  0002e	b8 00 00 00 00	 mov	 eax, OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL8@InitWizard:
  00040	8a 08		 mov	 cl, BYTE PTR [eax]
  00042	40		 inc	 eax
  00043	84 c9		 test	 cl, cl
  00045	75 f9		 jne	 SHORT $LL8@InitWizard
  00047	2b c2		 sub	 eax, edx
  00049	80 b8 ff ff ff
	ff 5c		 cmp	 BYTE PTR ?WizardDestInstallPath@@3PADA[eax-1], 92 ; 0000005cH
  00050	57		 push	 edi
  00051	74 1e		 je	 SHORT $LN3@InitWizard

; 97   : 		{
; 98   : 			strcat (WizardDestInstallPath, "\\");

  00053	bf 00 00 00 00	 mov	 edi, OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  00058	4f		 dec	 edi
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL9@InitWizard:
  00060	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00063	47		 inc	 edi
  00064	84 c0		 test	 al, al
  00066	75 f8		 jne	 SHORT $LL9@InitWizard
  00068	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
  0006e	66 89 07	 mov	 WORD PTR [edi], ax
$LN3@InitWizard:

; 99   : 		}
; 100  : 
; 101  : 		/* Change CipherShed migration path. */
; 102  : 		if (bCipherShedMigration)

  00071	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bCipherShedMigration, 0
  00078	74 55		 je	 SHORT $LN11@InitWizard

; 103  : 		{
; 104  : 			size_t str_len = strlen (WizardDestInstallPath);

  0007a	b8 00 00 00 00	 mov	 eax, OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  0007f	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL10@InitWizard:
  00082	8a 08		 mov	 cl, BYTE PTR [eax]
  00084	40		 inc	 eax
  00085	84 c9		 test	 cl, cl
  00087	75 f9		 jne	 SHORT $LL10@InitWizard
  00089	2b c2		 sub	 eax, edx
  0008b	56		 push	 esi
  0008c	8b f0		 mov	 esi, eax

; 105  : 			size_t suffix_len = sizeof ("\\TrueCrypt\\") - 1;
; 106  : 			if (str_len > suffix_len &&
; 107  : 				str_len + 1 < sizeof(WizardDestInstallPath) &&
; 108  : 				strncmp (WizardDestInstallPath + str_len - suffix_len, "\\TrueCrypt\\", suffix_len) == 0)

  0008e	83 fe 0b	 cmp	 esi, 11			; 0000000bH
  00091	76 3b		 jbe	 SHORT $LN12@InitWizard
  00093	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00096	81 f9 04 01 00
	00		 cmp	 ecx, 260		; 00000104H
  0009c	73 30		 jae	 SHORT $LN12@InitWizard
  0009e	6a 0b		 push	 11			; 0000000bH
  000a0	8d be f5 ff ff
	ff		 lea	 edi, DWORD PTR ?WizardDestInstallPath@@3PADA[esi-11]
  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EMLNMOID@?2TrueCrypt?2?$AA@
  000ab	57		 push	 edi
  000ac	e8 00 00 00 00	 call	 _strncmp
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b4	85 c0		 test	 eax, eax
  000b6	75 16		 jne	 SHORT $LN12@InitWizard

; 109  : 			{
; 110  : 				strcpy_s (WizardDestInstallPath + str_len - suffix_len, sizeof(WizardDestInstallPath)-(str_len - suffix_len), "\\CipherShed\\");

  000b8	ba 0f 01 00 00	 mov	 edx, 271		; 0000010fH
  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0N@ILKBADPD@?2CipherShed?2?$AA@
  000c2	2b d6		 sub	 edx, esi
  000c4	52		 push	 edx
  000c5	57		 push	 edi
  000c6	e8 00 00 00 00	 call	 _strcpy_s
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN12@InitWizard:
  000ce	5e		 pop	 esi
$LN11@InitWizard:
  000cf	5f		 pop	 edi
$LN1@InitWizard:

; 111  : 			}
; 112  : 		}
; 113  : 	}
; 114  : }

  000d0	c3		 ret	 0
?InitWizardDestInstallPath@@YAXXZ ENDP			; InitWizardDestInstallPath
_TEXT	ENDS
PUBLIC	__real@bf00000000000000
PUBLIC	__real@bef0000000000000
EXTRN	__imp__CryptGenRandom@12:PROC
EXTRN	_rand:PROC
EXTRN	_srand:PROC
EXTRN	__imp__CryptAcquireContextA@20:PROC
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
;	COMDAT ?buffer@?1??GetDonVal@@YAHHH@Z@4PAEA
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\time.inl
_BSS	SEGMENT
?buffer@?1??GetDonVal@@YAHHH@Z@4PAEA DB 02H DUP (?)	; `GetDonVal'::`2'::buffer
_BSS	ENDS
;	COMDAT ?prngInitialized@?1??GetDonVal@@YAHHH@Z@4HA
_BSS	SEGMENT
?prngInitialized@?1??GetDonVal@@YAHHH@Z@4HA DD 01H DUP (?) ; `GetDonVal'::`2'::prngInitialized
_BSS	ENDS
;	COMDAT __real@bf00000000000000
CONST	SEGMENT
__real@bf00000000000000 DQ 0bf00000000000000r	; -3.05176e-005
CONST	ENDS
;	COMDAT __real@bef0000000000000
CONST	SEGMENT
__real@bef0000000000000 DQ 0bef0000000000000r	; -1.52588e-005
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\setup\wizard.c
CONST	ENDS
;	COMDAT ?GetDonVal@@YAHHH@Z
_TEXT	SEGMENT
tv156 = -4						; size = 4
tv149 = -4						; size = 4
tv144 = -4						; size = 4
tv138 = -4						; size = 4
?GetDonVal@@YAHHH@Z PROC				; GetDonVal, COMDAT
; _minVal$ = ecx
; _maxVal$ = eax

; 187  : {

  00000	51		 push	 ecx

; 188  : 	static BOOL prngInitialized = FALSE;
; 189  : 	static unsigned __int8 buffer [2];
; 190  : 
; 191  : 	if (!prngInitialized)

  00001	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?prngInitialized@?1??GetDonVal@@YAHHH@Z@4HA, 0
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f0		 mov	 esi, eax
  0000c	8b f9		 mov	 edi, ecx
  0000e	75 5f		 jne	 SHORT $LN5@GetDonVal
  00010	53		 push	 ebx

; 192  : 	{
; 193  : 		if (!CryptAcquireContext (&hCryptProv, NULL, NULL, PROV_RSA_FULL, 0)
; 194  : 			&& !CryptAcquireContext (&hCryptProv, NULL, NULL, PROV_RSA_FULL, CRYPT_NEWKEYSET))

  00011	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__CryptAcquireContextA@20
  00017	6a 00		 push	 0
  00019	6a 01		 push	 1
  0001b	6a 00		 push	 0
  0001d	6a 00		 push	 0
  0001f	68 00 00 00 00	 push	 OFFSET _hCryptProv
  00024	ff d3		 call	 ebx
  00026	85 c0		 test	 eax, eax
  00028	75 1b		 jne	 SHORT $LN4@GetDonVal
  0002a	6a 08		 push	 8
  0002c	6a 01		 push	 1
  0002e	50		 push	 eax
  0002f	50		 push	 eax
  00030	68 00 00 00 00	 push	 OFFSET _hCryptProv
  00035	ff d3		 call	 ebx

; 195  : 			OsPrngAvailable = FALSE;

  00037	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _OsPrngAvailable, 0
  00041	85 c0		 test	 eax, eax
  00043	74 0a		 je	 SHORT $LN3@GetDonVal
$LN4@GetDonVal:

; 196  : 		else
; 197  : 			OsPrngAvailable = TRUE;

  00045	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _OsPrngAvailable, 1
$LN3@GetDonVal:

; 198  : 
; 199  : 		srand ((unsigned int) time (NULL));

  0004f	6a 00		 push	 0
  00051	e8 00 00 00 00	 call	 __time64
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _srand
  0005c	83 c4 08	 add	 esp, 8

; 200  : 		rand(); // Generate and discard the inital value, as it always appears to be somewhat non-random.

  0005f	e8 00 00 00 00	 call	 _rand

; 201  : 
; 202  : 		prngInitialized = TRUE;

  00064	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?prngInitialized@?1??GetDonVal@@YAHHH@Z@4HA, 1
  0006e	5b		 pop	 ebx
$LN5@GetDonVal:

; 203  : 	}
; 204  : 
; 205  : 	if (OsPrngAvailable && CryptGenRandom (hCryptProv, sizeof (buffer), buffer) != 0) 

  0006f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _OsPrngAvailable, 0
  00076	74 46		 je	 SHORT $LN2@GetDonVal
  00078	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCryptProv
  0007d	68 00 00 00 00	 push	 OFFSET ?buffer@?1??GetDonVal@@YAHHH@Z@4PAEA
  00082	6a 02		 push	 2
  00084	50		 push	 eax
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CryptGenRandom@12
  0008b	85 c0		 test	 eax, eax
  0008d	74 2f		 je	 SHORT $LN2@GetDonVal

; 206  : 	{
; 207  : 		return  ((int) ((double) *((uint16 *) buffer) / (0xFFFF+1) * (maxVal + 1 - minVal)) + minVal);

  0008f	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR ?buffer@?1??GetDonVal@@YAHHH@Z@4PAEA
  00096	2b f7		 sub	 esi, edi
  00098	46		 inc	 esi
  00099	89 74 24 08	 mov	 DWORD PTR tv156[esp+12], esi
  0009d	db 44 24 08	 fild	 DWORD PTR tv156[esp+12]
  000a1	89 4c 24 08	 mov	 DWORD PTR tv149[esp+12], ecx
  000a5	db 44 24 08	 fild	 DWORD PTR tv149[esp+12]
  000a9	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bef0000000000000

; 208  : 	}
; 209  : 	else
; 210  : 		return  ((int) ((double) rand() / (RAND_MAX+1) * (maxVal + 1 - minVal)) + minVal);

  000af	de c9		 fmulp	 ST(1), ST(0)
  000b1	e8 00 00 00 00	 call	 __ftol2_sse
  000b6	2b f8		 sub	 edi, eax
  000b8	8b c7		 mov	 eax, edi
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi

; 211  : }

  000bc	59		 pop	 ecx
  000bd	c3		 ret	 0
$LN2@GetDonVal:

; 208  : 	}
; 209  : 	else
; 210  : 		return  ((int) ((double) rand() / (RAND_MAX+1) * (maxVal + 1 - minVal)) + minVal);

  000be	e8 00 00 00 00	 call	 _rand
  000c3	89 44 24 08	 mov	 DWORD PTR tv144[esp+12], eax
  000c7	db 44 24 08	 fild	 DWORD PTR tv144[esp+12]
  000cb	2b f7		 sub	 esi, edi
  000cd	46		 inc	 esi
  000ce	89 74 24 08	 mov	 DWORD PTR tv138[esp+12], esi
  000d2	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bf00000000000000
  000d8	db 44 24 08	 fild	 DWORD PTR tv138[esp+12]
  000dc	de c9		 fmulp	 ST(1), ST(0)
  000de	e8 00 00 00 00	 call	 __ftol2_sse
  000e3	2b f8		 sub	 edi, eax
  000e5	8b c7		 mov	 eax, edi
  000e7	5f		 pop	 edi
  000e8	5e		 pop	 esi

; 211  : }

  000e9	59		 pop	 ecx
  000ea	c3		 ret	 0
?GetDonVal@@YAHHH@Z ENDP				; GetDonVal
_TEXT	ENDS
PUBLIC	_InitProgressBar
EXTRN	__imp__InvalidateRect@12:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__GetDlgItem@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT _InitProgressBar
_TEXT	SEGMENT
_InitProgressBar PROC					; COMDAT

; 786  : 	HWND hProgressBar = GetDlgItem (hCurPage, nPbar);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nPbar@@3HA ; nPbar
  00005	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8

; 787  : 	SendMessage (hProgressBar, PBM_SETRANGE32, 0, 100);

  00015	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  0001b	6a 64		 push	 100			; 00000064H
  0001d	6a 00		 push	 0
  0001f	8b f0		 mov	 esi, eax
  00021	68 06 04 00 00	 push	 1030			; 00000406H
  00026	56		 push	 esi
  00027	ff d7		 call	 edi

; 788  : 	SendMessage (hProgressBar, PBM_SETSTEP, 1, 0);

  00029	6a 00		 push	 0
  0002b	6a 01		 push	 1
  0002d	68 04 04 00 00	 push	 1028			; 00000404H
  00032	56		 push	 esi
  00033	ff d7		 call	 edi

; 789  : 	InvalidateRect (hProgressBar, NULL, TRUE);

  00035	6a 01		 push	 1
  00037	6a 00		 push	 0
  00039	56		 push	 esi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi

; 790  : }

  00042	c3		 ret	 0
_InitProgressBar ENDP
_TEXT	ENDS
PUBLIC	_RefreshUIGFX
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	_MainDlg:DWORD
; Function compile flags: /Ogtpy
;	COMDAT _RefreshUIGFX
_TEXT	SEGMENT
_RefreshUIGFX PROC					; COMDAT

; 809  : 	InvalidateRect (GetDlgItem (MainDlg, IDC_SETUP_WIZARD_BKG), NULL, TRUE);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00005	56		 push	 esi
  00006	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0000c	57		 push	 edi
  0000d	6a 01		 push	 1
  0000f	6a 00		 push	 0
  00011	68 fa 03 00 00	 push	 1018			; 000003faH
  00016	50		 push	 eax
  00017	ff d6		 call	 esi
  00019	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__InvalidateRect@12
  0001f	50		 push	 eax
  00020	ff d7		 call	 edi

; 810  : 	InvalidateRect (GetDlgItem (MainDlg, IDC_BOX_TITLE), NULL, TRUE);

  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00028	6a 01		 push	 1
  0002a	6a 00		 push	 0
  0002c	68 e9 03 00 00	 push	 1001			; 000003e9H
  00031	51		 push	 ecx
  00032	ff d6		 call	 esi
  00034	50		 push	 eax
  00035	ff d7		 call	 edi

; 811  : 	InvalidateRect (GetDlgItem (MainDlg, IDC_BOX_INFO), NULL, TRUE);

  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0003d	6a 01		 push	 1
  0003f	6a 00		 push	 0
  00041	68 eb 03 00 00	 push	 1003			; 000003ebH
  00046	52		 push	 edx
  00047	ff d6		 call	 esi
  00049	50		 push	 eax
  0004a	ff d7		 call	 edi

; 812  : 	InvalidateRect (GetDlgItem (MainDlg, IDC_BITMAP_SETUP_WIZARD), NULL, TRUE);

  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00051	6a 01		 push	 1
  00053	6a 00		 push	 0
  00055	68 06 04 00 00	 push	 1030			; 00000406H
  0005a	50		 push	 eax
  0005b	ff d6		 call	 esi
  0005d	50		 push	 eax
  0005e	ff d7		 call	 edi

; 813  : 	InvalidateRect (GetDlgItem (MainDlg, IDC_HR), NULL, TRUE);

  00060	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00066	6a 01		 push	 1
  00068	6a 00		 push	 0
  0006a	68 fc 03 00 00	 push	 1020			; 000003fcH
  0006f	51		 push	 ecx
  00070	ff d6		 call	 esi
  00072	50		 push	 eax
  00073	ff d7		 call	 edi

; 814  : 	// Prevent these items from disappearing at higher DPIs
; 815  : 	ShowWindow(GetDlgItem(MainDlg, IDC_HR), SW_HIDE);

  00075	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0007b	6a 00		 push	 0
  0007d	68 fc 03 00 00	 push	 1020			; 000003fcH
  00082	52		 push	 edx
  00083	ff d6		 call	 esi
  00085	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__ShowWindow@8
  0008b	50		 push	 eax
  0008c	ff d7		 call	 edi

; 816  : 	ShowWindow(GetDlgItem(MainDlg, IDC_HR), SW_SHOW);

  0008e	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00093	6a 05		 push	 5
  00095	68 fc 03 00 00	 push	 1020			; 000003fcH
  0009a	50		 push	 eax
  0009b	ff d6		 call	 esi
  0009d	50		 push	 eax
  0009e	ff d7		 call	 edi

; 817  : 	ShowWindow(GetDlgItem(MainDlg, IDC_HR_BOTTOM), SW_HIDE);

  000a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  000a6	6a 00		 push	 0
  000a8	68 ff 03 00 00	 push	 1023			; 000003ffH
  000ad	51		 push	 ecx
  000ae	ff d6		 call	 esi
  000b0	50		 push	 eax
  000b1	ff d7		 call	 edi

; 818  : 	ShowWindow(GetDlgItem(MainDlg, IDC_HR_BOTTOM), SW_SHOW);

  000b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  000b9	6a 05		 push	 5
  000bb	68 ff 03 00 00	 push	 1023			; 000003ffH
  000c0	52		 push	 edx
  000c1	ff d6		 call	 esi
  000c3	50		 push	 eax
  000c4	ff d7		 call	 edi

; 819  : 	ShowWindow(GetDlgItem(MainDlg, IDC_BOX_INFO), SW_HIDE);

  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  000cb	6a 00		 push	 0
  000cd	68 eb 03 00 00	 push	 1003			; 000003ebH
  000d2	50		 push	 eax
  000d3	ff d6		 call	 esi
  000d5	50		 push	 eax
  000d6	ff d7		 call	 edi

; 820  : 	ShowWindow(GetDlgItem(MainDlg, IDC_BOX_INFO), SW_SHOW);

  000d8	6a 05		 push	 5
  000da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  000e0	68 eb 03 00 00	 push	 1003			; 000003ebH
  000e5	51		 push	 ecx
  000e6	ff d6		 call	 esi
  000e8	50		 push	 eax
  000e9	ff d7		 call	 edi

; 821  : 	ShowWindow(GetDlgItem(MainDlg, IDC_BOX_TITLE), SW_HIDE);

  000eb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  000f1	6a 00		 push	 0
  000f3	68 e9 03 00 00	 push	 1001			; 000003e9H
  000f8	52		 push	 edx
  000f9	ff d6		 call	 esi
  000fb	50		 push	 eax
  000fc	ff d7		 call	 edi

; 822  : 	ShowWindow(GetDlgItem(MainDlg, IDC_BOX_TITLE), SW_SHOW);

  000fe	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00103	6a 05		 push	 5
  00105	68 e9 03 00 00	 push	 1001			; 000003e9H
  0010a	50		 push	 eax
  0010b	ff d6		 call	 esi
  0010d	50		 push	 eax
  0010e	ff d7		 call	 edi
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi

; 823  : }

  00112	c3		 ret	 0
_RefreshUIGFX ENDP
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1666 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1667 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length, COMDAT
; _this$ = ecx

; 1661 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1662 : 		}

  00003	c3		 ret	 0
?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  00009	c3		 ret	 0
$LN3@Myptr:

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN3@Myptr@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@2:

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@_W@std@@QAE@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@_W@std@@QAE@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@_W@std@@QAE@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr@3
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@3:

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@_W@std@@QAE@ABV01@@Z		; std::allocator<wchar_t>::allocator<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@_W@std@@QAE@ABV01@@Z PROC		; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@_W@std@@QAE@ABV01@@Z ENDP		; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z	; std::allocator<wchar_t>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2133 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2134 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 2c		 je	 SHORT $LN2@Inside
  0000a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0000d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00010	83 fe 10	 cmp	 esi, 16			; 00000010H
  00013	72 04		 jb	 SHORT $LN8@Inside
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN9@Inside
$LN8@Inside:
  00019	8b d0		 mov	 edx, eax
$LN9@Inside:
  0001b	3b fa		 cmp	 edi, edx
  0001d	72 17		 jb	 SHORT $LN2@Inside
  0001f	83 fe 10	 cmp	 esi, 16			; 00000010H
  00022	72 02		 jb	 SHORT $LN12@Inside
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@Inside:
  00026	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00029	03 c8		 add	 ecx, eax
  0002b	3b cf		 cmp	 ecx, edi
  0002d	76 07		 jbe	 SHORT $LN2@Inside
  0002f	5f		 pop	 edi

; 2136 : 		else
; 2137 : 			return (true);

  00030	b0 01		 mov	 al, 1
  00032	5e		 pop	 esi

; 2138 : 		}

  00033	c2 04 00	 ret	 4
$LN2@Inside:
  00036	5f		 pop	 edi

; 2135 : 			return (false);	// don't ask

  00037	32 c0		 xor	 al, al
  00039	5e		 pop	 esi

; 2138 : 		}

  0003a	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
; Function compile flags: /Ogtpy
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN3@Myptr@4
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@4:

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 167  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size, COMDAT
; _this$ = ecx

; 1666 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1667 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@_W@std@@QBEIXZ		; std::allocator<wchar_t>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@_W@std@@QBEIXZ PROC		; std::allocator<wchar_t>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@_W@std@@QBEIXZ ENDP		; std::allocator<wchar_t>::max_size
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T98739 = -12						; size = 12
$T98744 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 0f		 ja	 SHORT $LN3@Allocate

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00013	83 c4 04	 add	 esp, 4

; 44   : 	}

  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	c3		 ret	 0
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001a	83 c8 ff	 or	 eax, -1
  0001d	33 d2		 xor	 edx, edx
  0001f	f7 f1		 div	 ecx
  00021	83 f8 01	 cmp	 eax, 1
  00024	73 e7		 jae	 SHORT $LN1@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T98744[esp+8]
  0002a	50		 push	 eax
  0002b	8d 4c 24 04	 lea	 ecx, DWORD PTR $T98739[esp+16]
  0002f	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T98744[esp+12], 0
  00037	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003c	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00041	8d 4c 24 04	 lea	 ecx, DWORD PTR $T98739[esp+16]
  00045	51		 push	 ecx
  00046	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T98739[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate:
  00053	cc		 int	 3
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	??$_Allocate@_W@std@@YAPA_WIPA_W@Z		; std::_Allocate<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT
$T98748 = -12						; size = 12
$T98752 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@_W@std@@YAPA_WIPA_W@Z PROC			; std::_Allocate<wchar_t>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 12		 ja	 SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00016	83 c4 04	 add	 esp, 4

; 44   : 	}

  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	c3		 ret	 0
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001d	83 c8 ff	 or	 eax, -1
  00020	33 d2		 xor	 edx, edx
  00022	f7 f1		 div	 ecx
  00024	83 f8 02	 cmp	 eax, 2
  00027	73 e4		 jae	 SHORT $LN1@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00029	8d 44 24 10	 lea	 eax, DWORD PTR $T98752[esp+8]
  0002d	50		 push	 eax
  0002e	8d 4c 24 04	 lea	 ecx, DWORD PTR $T98748[esp+16]
  00032	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T98752[esp+12], 0
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003f	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00044	8d 4c 24 04	 lea	 ecx, DWORD PTR $T98748[esp+16]
  00048	51		 push	 ecx
  00049	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T98748[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@2:
  00056	cc		 int	 3
??$_Allocate@_W@std@@YAPA_WIPA_W@Z ENDP			; std::_Allocate<wchar_t>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<char> >, COMDAT

; 575  : 	{

  00000	51		 push	 ecx

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Secure$[esp+4]

; 578  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 598  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<wchar_t> >, COMDAT

; 575  : 	{

  00000	51		 push	 ecx

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Secure$[esp+4]

; 578  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 598  : 	}

  00026	c3		 ret	 0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 624  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 625  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 624  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 625  : 	}

  00026	c3		 ret	 0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	__real@4059000000000000
PUBLIC	_UpdateProgressBarProc
;	COMDAT __real@4059000000000000
; File c:\home\public\desktop\projects\ciphershed.build\src\setup\wizard.c
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _UpdateProgressBarProc
_TEXT	SEGMENT
tv94 = -8						; size = 4
tv72 = -8						; size = 8
tv162 = 8						; size = 2
_nPercent$ = 8						; size = 4
_UpdateProgressBarProc PROC				; COMDAT

; 794  : {

  00000	83 ec 08	 sub	 esp, 8

; 795  : 	HWND hProgressBar = GetDlgItem (hCurPage, nPbar);

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nPbar@@3HA ; nPbar
  00008	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  0000e	53		 push	 ebx
  0000f	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetDlgItem@8
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	50		 push	 eax
  00018	51		 push	 ecx
  00019	ff d3		 call	 ebx

; 796  : 	SendMessage (hProgressBar, PBM_SETPOS, (int) (100.0 * nPercent / 100), 0);

  0001b	db 44 24 18	 fild	 DWORD PTR _nPercent$[esp+16]
  0001f	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4059000000000000
  00025	8b f0		 mov	 esi, eax
  00027	d9 7c 24 18	 fnstcw	 WORD PTR tv162[esp+16]
  0002b	6a 00		 push	 0
  0002d	0f b7 44 24 1c	 movzx	 eax, WORD PTR tv162[esp+20]
  00032	dc c9		 fmul	 ST(1), ST(0)
  00034	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00039	89 44 24 10	 mov	 DWORD PTR tv94[esp+24], eax
  0003d	de f9		 fdivp	 ST(1), ST(0)
  0003f	d9 6c 24 10	 fldcw	 WORD PTR tv94[esp+24]
  00043	df 7c 24 10	 fistp	 QWORD PTR tv72[esp+24]
  00047	8b 54 24 10	 mov	 edx, DWORD PTR tv72[esp+24]
  0004b	52		 push	 edx
  0004c	68 02 04 00 00	 push	 1026			; 00000402H
  00051	d9 6c 24 24	 fldcw	 WORD PTR tv162[esp+28]
  00055	56		 push	 esi
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 797  : 	InvalidateRect (hProgressBar, NULL, TRUE);

  0005c	6a 01		 push	 1
  0005e	6a 00		 push	 0
  00060	56		 push	 esi
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12

; 798  : 	ShowWindow(hProgressBar, SW_HIDE);

  00067	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__ShowWindow@8
  0006d	6a 00		 push	 0
  0006f	56		 push	 esi
  00070	ff d7		 call	 edi

; 799  : 	ShowWindow(hProgressBar, SW_SHOW);

  00072	6a 05		 push	 5
  00074	56		 push	 esi
  00075	ff d7		 call	 edi

; 800  : 	// Prevent the IDC_LOG_WINDOW item from partially disappearing at higher DPIs
; 801  : 	ShowWindow(GetDlgItem (hCurPage, IDC_LOG_WINDOW), SW_HIDE);

  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  0007c	6a 00		 push	 0
  0007e	68 f9 03 00 00	 push	 1017			; 000003f9H
  00083	50		 push	 eax
  00084	ff d3		 call	 ebx
  00086	50		 push	 eax
  00087	ff d7		 call	 edi

; 802  : 	ShowWindow(GetDlgItem (hCurPage, IDC_LOG_WINDOW), SW_SHOW);

  00089	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  0008f	6a 05		 push	 5
  00091	68 f9 03 00 00	 push	 1017			; 000003f9H
  00096	51		 push	 ecx
  00097	ff d3		 call	 ebx
  00099	50		 push	 eax
  0009a	ff d7		 call	 edi

; 803  : 	RefreshUIGFX();

  0009c	e8 00 00 00 00	 call	 _RefreshUIGFX
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi

; 804  : 	return TRUE;

  000a3	b8 01 00 00 00	 mov	 eax, 1
  000a8	5b		 pop	 ebx

; 805  : }

  000a9	83 c4 08	 add	 esp, 8
  000ac	c3		 ret	 0
_UpdateProgressBarProc ENDP
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1651 : 		return (_Myptr());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN5@c_str
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  00009	c3		 ret	 0

; 1651 : 		return (_Myptr());

$LN5@c_str:
  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  0000d	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
; Function compile flags: /Ogtpy
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str, COMDAT
; _this$ = ecx

; 1651 : 		return (_Myptr());

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN5@c_str@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  00009	c3		 ret	 0

; 1651 : 		return (_Myptr());

$LN5@c_str@2:
  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  0000d	c3		 ret	 0
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 472  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 473  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 478  : 		{	// copy constructor

  00000	8b c1		 mov	 eax, ecx

; 479  : #if defined(_DEBUG)
; 480  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 481  : 			{
; 482  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 483  : 			}
; 484  : #endif
; 485  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z PROC ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 472  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 473  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z ENDP ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogtpy
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $LN5@Eos
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 2115 : 		}

  00014	c2 04 00	 ret	 4

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$LN5@Eos:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 2115 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
; Function compile flags: /Ogtpy
;	COMDAT ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos, COMDAT
; _this$ = ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00004	33 d2		 xor	 edx, edx
  00006	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  0000a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000d	72 0a		 jb	 SHORT $LN5@Eos@2
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 2115 : 		}

  00016	c2 04 00	 ret	 4

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$LN5@Eos@2:
  00019	66 89 54 41 04	 mov	 WORD PTR [ecx+eax*2+4], dx

; 2115 : 		}

  0001e	c2 04 00	 ret	 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1671 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1672 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1673 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
; Function compile flags: /Ogtpy
;	COMDAT ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside, COMDAT
; _this$ = ecx

; 2133 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2134 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 2d		 je	 SHORT $LN2@Inside@2
  0000a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0000d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00010	83 fe 08	 cmp	 esi, 8
  00013	72 04		 jb	 SHORT $LN8@Inside@2
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN9@Inside@2
$LN8@Inside@2:
  00019	8b d0		 mov	 edx, eax
$LN9@Inside@2:
  0001b	3b fa		 cmp	 edi, edx
  0001d	72 18		 jb	 SHORT $LN2@Inside@2
  0001f	83 fe 08	 cmp	 esi, 8
  00022	72 02		 jb	 SHORT $LN12@Inside@2
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@Inside@2:
  00026	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00029	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  0002c	3b d7		 cmp	 edx, edi
  0002e	76 07		 jbe	 SHORT $LN2@Inside@2
  00030	5f		 pop	 edi

; 2136 : 		else
; 2137 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	5e		 pop	 esi

; 2138 : 		}

  00034	c2 04 00	 ret	 4
$LN2@Inside@2:
  00037	5f		 pop	 edi

; 2135 : 			return (false);	// don't ask

  00038	32 c0		 xor	 al, al
  0003a	5e		 pop	 esi

; 2138 : 		}

  0003b	c2 04 00	 ret	 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 1671 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1672 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH

; 1673 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@_W@std@@QAEPA_WI@Z	; std::allocator<wchar_t>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z PROC		; std::allocator<wchar_t>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z ENDP		; std::allocator<wchar_t>::allocate
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 590  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 590  : 	}

  00026	c3		 ret	 0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 616  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 617  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 616  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 617  : 	}

  00026	c3		 ret	 0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2149 : 		if (!_Built)

  00000	80 7c 24 04 00	 cmp	 BYTE PTR __Built$[esp-4], 0
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 27		 je	 SHORT $LN15@Tidy

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

  0000f	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00013	72 21		 jb	 SHORT $LN15@Tidy

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

  00015	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00018	53		 push	 ebx
  00019	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2154 : 			if (0 < _Newsize)

  0001b	85 ff		 test	 edi, edi
  0001d	76 0d		 jbe	 SHORT $LN13@Tidy

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

  0001f	57		 push	 edi
  00020	53		 push	 ebx
  00021	6a 10		 push	 16			; 00000010H
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _memcpy_s
  00029	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@Tidy:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  0002c	53		 push	 ebx
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00032	83 c4 04	 add	 esp, 4
  00035	5b		 pop	 ebx
$LN15@Tidy:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;
; 2159 : 		_Eos(_Newsize);

  00036	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00039	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00040	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 2160 : 		}

  00047	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx

; 2149 : 		if (!_Built)

  00000	80 7c 24 04 00	 cmp	 BYTE PTR __Built$[esp-4], 0
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 2a		 je	 SHORT $LN17@Tidy@2

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

  0000f	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00013	72 24		 jb	 SHORT $LN17@Tidy@2

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

  00015	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00018	53		 push	 ebx
  00019	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2154 : 			if (0 < _Newsize)

  0001b	85 ff		 test	 edi, edi
  0001d	76 10		 jbe	 SHORT $LN15@Tidy@2

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

  0001f	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  00022	51		 push	 ecx
  00023	53		 push	 ebx
  00024	6a 10		 push	 16			; 00000010H
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _memcpy_s
  0002c	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@Tidy@2:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  0002f	53		 push	 ebx
  00030	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00035	83 c4 04	 add	 esp, 4
  00038	5b		 pop	 ebx
$LN17@Tidy@2:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;
; 2159 : 		_Eos(_Newsize);

  00039	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0003c	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00043	33 d2		 xor	 edx, edx
  00045	66 89 54 7e 04	 mov	 WORD PTR [esi+edi*2+4], dx
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi

; 2160 : 		}

  0004c	c2 08 00	 ret	 8
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xran
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
tv130 = 8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1262 : 		{	// erase elements [_Off, _Off + _Count)

  00000	53		 push	 ebx

; 1263 : 		if (_Mysize < _Off)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	73 05		 jae	 SHORT $LN3@erase

; 1264 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@erase:

; 1265 : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c3		 sub	 eax, ebx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $LN2@erase

; 1266 : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$LN2@erase:

; 1267 : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 55		 jbe	 SHORT $LN30@erase

; 1268 : 			{	// move elements down
; 1269 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1270 : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	55		 push	 ebp
  0002a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0002d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00030	72 09		 jb	 SHORT $LN8@erase
  00032	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00035	89 54 24 14	 mov	 DWORD PTR tv130[esp+12], edx
  00039	eb 04		 jmp	 SHORT $LN9@erase
$LN8@erase:
  0003b	89 6c 24 14	 mov	 DWORD PTR tv130[esp+12], ebp
$LN9@erase:
  0003f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00042	72 05		 jb	 SHORT $LN12@erase
  00044	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00047	eb 02		 jmp	 SHORT $LN13@erase
$LN12@erase:
  00049	8b d5		 mov	 edx, ebp
$LN13@erase:
  0004b	2b c7		 sub	 eax, edi
  0004d	50		 push	 eax
  0004e	8b 44 24 18	 mov	 eax, DWORD PTR tv130[esp+16]
  00052	03 c3		 add	 eax, ebx
  00054	03 c7		 add	 eax, edi
  00056	50		 push	 eax
  00057	2b cb		 sub	 ecx, ebx
  00059	51		 push	 ecx
  0005a	03 d3		 add	 edx, ebx
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _memmove_s

; 1271 : 			size_type _Newsize = _Mysize - _Count;

  00062	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00065	2b c7		 sub	 eax, edi
  00067	83 c4 10	 add	 esp, 16			; 00000010H

; 1272 : 			_Eos(_Newsize);

  0006a	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0006e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00071	72 03		 jb	 SHORT $LN26@erase
  00073	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN26@erase:
  00076	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  0007a	5d		 pop	 ebp
$LN30@erase:
  0007b	5f		 pop	 edi

; 1273 : 			}
; 1274 : 		return (*this);

  0007c	8b c6		 mov	 eax, esi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx

; 1275 : 		}

  00080	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2083 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 2084 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 0f	 or	 esi, 15			; 0000000fH

; 2085 : 		if (max_size() < _Newres)

  00038	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0003b	76 04		 jbe	 SHORT $LN6@Copy

; 2086 : 			_Newres = _Newsize;	// undo roundup if too big

  0003d	8b f0		 mov	 esi, eax

; 2087 : 		else if (_Newres / 3 < _Myres / 2

  0003f	eb 22		 jmp	 SHORT $LN4@Copy
$LN6@Copy:

; 2088 : 			&& _Myres <= max_size() - _Myres / 2)

  00041	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00044	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00049	f7 e6		 mul	 esi
  0004b	8b cb		 mov	 ecx, ebx
  0004d	d1 e9		 shr	 ecx, 1
  0004f	d1 ea		 shr	 edx, 1
  00051	3b d1		 cmp	 edx, ecx
  00053	73 0e		 jae	 SHORT $LN4@Copy
  00055	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0005a	2b c1		 sub	 eax, ecx
  0005c	3b d8		 cmp	 ebx, eax
  0005e	77 03		 ja	 SHORT $LN4@Copy

; 2089 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00060	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
$LN4@Copy:

; 2090 : 		_Elem *_Ptr = 0;
; 2091 : 
; 2092 : 		_TRY_BEGIN
; 2093 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00063	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00066	6a 00		 push	 0
  00068	51		 push	 ecx
  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00070	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00075	83 c4 08	 add	 esp, 8
  00078	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0007b	eb 28		 jmp	 SHORT $LN16@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0:

; 2094 : 		_CATCH_ALL
; 2095 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007d	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00080	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00083	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 2096 : 			_TRY_BEGIN
; 2097 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00086	40		 inc	 eax
  00087	6a 00		 push	 0
  00089	50		 push	 eax
  0008a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0008e	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00093	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00096	83 c4 08	 add	 esp, 8

; 2101 : 			_CATCH_END
; 2102 : 		_CATCH_END

  00099	b8 00 00 00 00	 mov	 eax, $LN106@Copy
  0009e	c3		 ret	 0
$LN106@Copy:
  0009f	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000a2	8b 75 e8	 mov	 esi, DWORD PTR __Newres$[ebp]
$LN16@Copy:

; 2103 : 
; 2104 : 		if (0 < _Oldlen)

  000a5	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  000a8	85 db		 test	 ebx, ebx
  000aa	76 20		 jbe	 SHORT $LN71@Copy

; 2105 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

  000ac	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000b0	72 05		 jb	 SHORT $LN63@Copy
  000b2	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000b5	eb 03		 jmp	 SHORT $LN64@Copy
$LN63@Copy:
  000b7	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN64@Copy:
  000ba	53		 push	 ebx
  000bb	50		 push	 eax
  000bc	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000bf	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _memcpy_s
  000c9	83 c4 10	 add	 esp, 16			; 00000010H
$LN71@Copy:

; 2106 : 		_Tidy(true);

  000cc	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000d0	72 0c		 jb	 SHORT $LN87@Copy
  000d2	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000db	83 c4 04	 add	 esp, 4
$LN87@Copy:

; 2107 : 		_Bx._Ptr = _Ptr;

  000de	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000e1	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000e4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e7	89 08		 mov	 DWORD PTR [eax], ecx

; 2108 : 		_Myres = _Newres;

  000e9	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 2109 : 		_Eos(_Oldlen);

  000ec	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  000ef	83 fe 10	 cmp	 esi, 16			; 00000010H
  000f2	72 02		 jb	 SHORT $LN101@Copy
  000f4	8b c1		 mov	 eax, ecx
$LN101@Copy:
  000f6	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 2110 : 		}

  000fa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00104	59		 pop	 ecx
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1:

; 2098 : 			_CATCH_ALL
; 2099 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010e	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00111	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00115	72 0c		 jb	 SHORT $LN51@Copy
  00117	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0011a	52		 push	 edx
  0011b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00120	83 c4 04	 add	 esp, 4
$LN51@Copy:

; 2100 : 			_RERAISE;

  00123	6a 00		 push	 0
  00125	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0012c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00133	6a 00		 push	 0
  00135	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00139	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN109@Copy:
  0013e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
tv133 = 8						; size = 4
__Off$ = 8						; size = 4
tv139 = 12						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx

; 1262 : 		{	// erase elements [_Off, _Off + _Count)

  00000	53		 push	 ebx

; 1263 : 		if (_Mysize < _Off)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	73 05		 jae	 SHORT $LN3@erase@2

; 1264 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@erase@2:

; 1265 : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c3		 sub	 eax, ebx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $LN2@erase@2

; 1266 : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$LN2@erase@2:

; 1267 : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 69		 jbe	 SHORT $LN32@erase@2

; 1268 : 			{	// move elements down
; 1269 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1270 : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	55		 push	 ebp
  0002a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0002d	83 f9 08	 cmp	 ecx, 8
  00030	72 09		 jb	 SHORT $LN8@erase@2
  00032	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00035	89 54 24 14	 mov	 DWORD PTR tv133[esp+12], edx
  00039	eb 04		 jmp	 SHORT $LN9@erase@2
$LN8@erase@2:
  0003b	89 6c 24 14	 mov	 DWORD PTR tv133[esp+12], ebp
$LN9@erase@2:
  0003f	83 f9 08	 cmp	 ecx, 8
  00042	72 09		 jb	 SHORT $LN12@erase@2
  00044	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00047	89 54 24 18	 mov	 DWORD PTR tv139[esp+12], edx
  0004b	eb 04		 jmp	 SHORT $LN13@erase@2
$LN12@erase@2:
  0004d	89 6c 24 18	 mov	 DWORD PTR tv139[esp+12], ebp
$LN13@erase@2:
  00051	8b 54 24 14	 mov	 edx, DWORD PTR tv133[esp+12]
  00055	2b c7		 sub	 eax, edi
  00057	03 c0		 add	 eax, eax
  00059	50		 push	 eax
  0005a	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  0005d	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  00060	2b cb		 sub	 ecx, ebx
  00062	50		 push	 eax
  00063	03 c9		 add	 ecx, ecx
  00065	51		 push	 ecx
  00066	8b 4c 24 24	 mov	 ecx, DWORD PTR tv139[esp+24]
  0006a	8d 14 59	 lea	 edx, DWORD PTR [ecx+ebx*2]
  0006d	52		 push	 edx
  0006e	e8 00 00 00 00	 call	 _memmove_s

; 1271 : 			size_type _Newsize = _Mysize - _Count;

  00073	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00076	2b c7		 sub	 eax, edi
  00078	83 c4 10	 add	 esp, 16			; 00000010H

; 1272 : 			_Eos(_Newsize);

  0007b	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  0007f	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00082	72 03		 jb	 SHORT $LN28@erase@2
  00084	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN28@erase@2:
  00087	33 c9		 xor	 ecx, ecx
  00089	66 89 4c 45 00	 mov	 WORD PTR [ebp+eax*2], cx
  0008e	5d		 pop	 ebp
$LN32@erase@2:
  0008f	5f		 pop	 edi

; 1273 : 			}
; 1274 : 		return (*this);

  00090	8b c6		 mov	 eax, esi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 1275 : 		}

  00094	c2 08 00	 ret	 8
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Ptr$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newres$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy, COMDAT
; _this$ = ecx

; 2083 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 2084 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 07	 or	 esi, 7

; 2085 : 		if (max_size() < _Newres)

  00038	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH
  0003e	76 04		 jbe	 SHORT $LN6@Copy@2

; 2086 : 			_Newres = _Newsize;	// undo roundup if too big

  00040	8b f0		 mov	 esi, eax

; 2087 : 		else if (_Newres / 3 < _Myres / 2

  00042	eb 22		 jmp	 SHORT $LN4@Copy@2
$LN6@Copy@2:

; 2088 : 			&& _Myres <= max_size() - _Myres / 2)

  00044	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00047	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0004c	f7 e6		 mul	 esi
  0004e	8b cb		 mov	 ecx, ebx
  00050	d1 e9		 shr	 ecx, 1
  00052	d1 ea		 shr	 edx, 1
  00054	3b d1		 cmp	 edx, ecx
  00056	73 0e		 jae	 SHORT $LN4@Copy@2
  00058	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  0005d	2b c1		 sub	 eax, ecx
  0005f	3b d8		 cmp	 ebx, eax
  00061	77 03		 ja	 SHORT $LN4@Copy@2

; 2089 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00063	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
$LN4@Copy@2:

; 2090 : 		_Elem *_Ptr = 0;
; 2091 : 
; 2092 : 		_TRY_BEGIN
; 2093 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00066	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00069	6a 00		 push	 0
  0006b	51		 push	 ecx
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00073	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00078	83 c4 08	 add	 esp, 8
  0007b	8b d8		 mov	 ebx, eax
  0007d	eb 2b		 jmp	 SHORT $LN16@Copy@2
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$0:

; 2094 : 		_CATCH_ALL
; 2095 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007f	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00082	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00085	89 45 08	 mov	 DWORD PTR __Newres$[ebp], eax

; 2096 : 			_TRY_BEGIN
; 2097 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00088	40		 inc	 eax
  00089	6a 00		 push	 0
  0008b	50		 push	 eax
  0008c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00090	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00095	89 45 e8	 mov	 DWORD PTR __Ptr$[ebp], eax
  00098	83 c4 08	 add	 esp, 8

; 2101 : 			_CATCH_END
; 2102 : 		_CATCH_END

  0009b	b8 00 00 00 00	 mov	 eax, $LN112@Copy@2
  000a0	c3		 ret	 0
$LN112@Copy@2:
  000a1	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000a4	8b 75 08	 mov	 esi, DWORD PTR __Newres$[ebp]
  000a7	8b 5d e8	 mov	 ebx, DWORD PTR __Ptr$[ebp]
$LN16@Copy@2:

; 2103 : 
; 2104 : 		if (0 < _Oldlen)

  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000ad	85 c9		 test	 ecx, ecx
  000af	76 24		 jbe	 SHORT $LN75@Copy@2

; 2105 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

  000b1	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  000b5	72 05		 jb	 SHORT $LN65@Copy@2
  000b7	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000ba	eb 03		 jmp	 SHORT $LN66@Copy@2
$LN65@Copy@2:
  000bc	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN66@Copy@2:
  000bf	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	8d 44 36 02	 lea	 eax, DWORD PTR [esi+esi+2]
  000c8	50		 push	 eax
  000c9	53		 push	 ebx
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000d2	83 c4 10	 add	 esp, 16			; 00000010H
$LN75@Copy@2:

; 2106 : 		_Tidy(true);

  000d5	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  000d9	72 0f		 jb	 SHORT $LN93@Copy@2
  000db	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000de	51		 push	 ecx
  000df	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000e7	83 c4 04	 add	 esp, 4
$LN93@Copy@2:
  000ea	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000ed	33 d2		 xor	 edx, edx

; 2107 : 		_Bx._Ptr = _Ptr;

  000ef	89 18		 mov	 DWORD PTR [eax], ebx

; 2108 : 		_Myres = _Newres;

  000f1	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 2109 : 		_Eos(_Oldlen);

  000f4	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  000f7	83 fe 08	 cmp	 esi, 8
  000fa	72 02		 jb	 SHORT $LN107@Copy@2
  000fc	8b c3		 mov	 eax, ebx
$LN107@Copy@2:
  000fe	33 d2		 xor	 edx, edx
  00100	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 2110 : 		}

  00104	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00107	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010e	59		 pop	 ecx
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$1:

; 2098 : 			_CATCH_ALL
; 2099 : 			_Tidy(true);	// failed again, discard storage and reraise

  00118	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0011b	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  0011f	72 0c		 jb	 SHORT $LN53@Copy@2
  00121	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0012a	83 c4 04	 add	 esp, 4
$LN53@Copy@2:
  0012d	33 c9		 xor	 ecx, ecx

; 2100 : 			_RERAISE;

  0012f	51		 push	 ecx
  00130	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00137	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0013e	51		 push	 ecx
  0013f	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00143	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN115@Copy@2:
  00148	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 906  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $LN17@basic_stri
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN17@basic_stri:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 907  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 906  : 		_Tidy(true);

  00003	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00007	72 0c		 jb	 SHORT $LN19@basic_stri@2
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN19@basic_stri@2:
  00015	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  0001c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00023	33 c9		 xor	 ecx, ecx
  00025	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00029	5e		 pop	 esi

; 907  : 		}

  0002a	c3		 ret	 0
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xlen
; Function compile flags: /Ogtpy
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2119 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	53		 push	 ebx

; 2120 : 			if (max_size() < _Newsize)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Newsize$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  0000b	76 05		 jbe	 SHORT $LN6@Grow

; 2121 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN6@Grow:

; 2122 : 		if (_Myres < _Newsize)

  00012	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00015	3b c3		 cmp	 eax, ebx
  00017	73 19		 jae	 SHORT $LN5@Grow

; 2123 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001c	50		 push	 eax
  0001d	53		 push	 ebx
  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c9		 xor	 ecx, ecx
  00027	3b cb		 cmp	 ecx, ebx
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5b		 pop	 ebx

; 2130 : 		}

  0002f	c2 08 00	 ret	 8
$LN5@Grow:

; 2124 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	80 7c 24 10 00	 cmp	 BYTE PTR __Trim$[esp+4], 0
  00037	74 52		 je	 SHORT $LN3@Grow
  00039	83 fb 10	 cmp	 ebx, 16			; 00000010H
  0003c	73 4d		 jae	 SHORT $LN3@Grow
  0003e	57		 push	 edi

; 2125 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2126 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  0003f	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00042	3b df		 cmp	 ebx, edi
  00044	73 02		 jae	 SHORT $LN9@Grow
  00046	8b fb		 mov	 edi, ebx
$LN9@Grow:
  00048	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004b	72 21		 jb	 SHORT $LN33@Grow
  0004d	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00050	55		 push	 ebp
  00051	8b 28		 mov	 ebp, DWORD PTR [eax]
  00053	85 ff		 test	 edi, edi
  00055	76 0d		 jbe	 SHORT $LN31@Grow
  00057	57		 push	 edi
  00058	55		 push	 ebp
  00059	6a 10		 push	 16			; 00000010H
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _memcpy_s
  00061	83 c4 10	 add	 esp, 16			; 00000010H
$LN31@Grow:
  00064	55		 push	 ebp
  00065	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006a	83 c4 04	 add	 esp, 4
  0006d	5d		 pop	 ebp
$LN33@Grow:
  0006e	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00071	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00078	33 c9		 xor	 ecx, ecx
  0007a	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  0007f	3b cb		 cmp	 ecx, ebx
  00081	5f		 pop	 edi
  00082	1b c0		 sbb	 eax, eax
  00084	5e		 pop	 esi
  00085	f7 d8		 neg	 eax
  00087	5b		 pop	 ebx

; 2130 : 		}

  00088	c2 08 00	 ret	 8
$LN3@Grow:

; 2127 : 		else if (_Newsize == 0)

  0008b	85 db		 test	 ebx, ebx
  0008d	75 20		 jne	 SHORT $LN49@Grow

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

  0008f	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00092	83 f8 10	 cmp	 eax, 16			; 00000010H
  00095	72 12		 jb	 SHORT $LN47@Grow
  00097	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  0009a	33 c9		 xor	 ecx, ecx
  0009c	3b cb		 cmp	 ecx, ebx
  0009e	88 1e		 mov	 BYTE PTR [esi], bl
  000a0	1b c0		 sbb	 eax, eax
  000a2	5e		 pop	 esi
  000a3	f7 d8		 neg	 eax
  000a5	5b		 pop	 ebx

; 2130 : 		}

  000a6	c2 08 00	 ret	 8

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

$LN47@Grow:
  000a9	83 c6 04	 add	 esi, 4
  000ac	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN49@Grow:

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000af	33 c9		 xor	 ecx, ecx
  000b1	3b cb		 cmp	 ecx, ebx
  000b3	1b c0		 sbb	 eax, eax
  000b5	5e		 pop	 esi
  000b6	f7 d8		 neg	 eax
  000b8	5b		 pop	 ebx

; 2130 : 		}

  000b9	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
; Function compile flags: /Ogtpy
;	COMDAT ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow, COMDAT
; _this$ = ecx

; 2119 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp

; 2120 : 			if (max_size() < _Newsize)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Newsize$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	81 fd fe ff ff
	7f		 cmp	 ebp, 2147483646		; 7ffffffeH
  0000e	76 05		 jbe	 SHORT $LN6@Grow@2

; 2121 : 			_String_base::_Xlen();	// result too long

  00010	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN6@Grow@2:

; 2122 : 		if (_Myres < _Newsize)

  00015	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00018	3b c5		 cmp	 eax, ebp
  0001a	73 19		 jae	 SHORT $LN5@Grow@2

; 2123 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  0001c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001f	50		 push	 eax
  00020	55		 push	 ebp
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00028	33 c9		 xor	 ecx, ecx
  0002a	3b cd		 cmp	 ecx, ebp
  0002c	1b c0		 sbb	 eax, eax
  0002e	5e		 pop	 esi
  0002f	f7 d8		 neg	 eax
  00031	5d		 pop	 ebp

; 2130 : 		}

  00032	c2 08 00	 ret	 8
$LN5@Grow@2:

; 2124 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00035	80 7c 24 10 00	 cmp	 BYTE PTR __Trim$[esp+4], 0
  0003a	74 57		 je	 SHORT $LN3@Grow@2
  0003c	83 fd 08	 cmp	 ebp, 8
  0003f	73 52		 jae	 SHORT $LN3@Grow@2
  00041	57		 push	 edi

; 2125 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2126 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00042	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00045	3b ef		 cmp	 ebp, edi
  00047	73 02		 jae	 SHORT $LN9@Grow@2
  00049	8b fd		 mov	 edi, ebp
$LN9@Grow@2:
  0004b	83 f8 08	 cmp	 eax, 8
  0004e	72 24		 jb	 SHORT $LN35@Grow@2
  00050	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00053	53		 push	 ebx
  00054	8b 18		 mov	 ebx, DWORD PTR [eax]
  00056	85 ff		 test	 edi, edi
  00058	76 10		 jbe	 SHORT $LN33@Grow@2
  0005a	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  0005d	51		 push	 ecx
  0005e	53		 push	 ebx
  0005f	6a 10		 push	 16			; 00000010H
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _memcpy_s
  00067	83 c4 10	 add	 esp, 16			; 00000010H
$LN33@Grow@2:
  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00070	83 c4 04	 add	 esp, 4
  00073	5b		 pop	 ebx
$LN35@Grow@2:
  00074	33 d2		 xor	 edx, edx
  00076	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00079	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00080	33 c9		 xor	 ecx, ecx
  00082	66 89 54 7e 04	 mov	 WORD PTR [esi+edi*2+4], dx
  00087	3b cd		 cmp	 ecx, ebp
  00089	5f		 pop	 edi
  0008a	1b c0		 sbb	 eax, eax
  0008c	5e		 pop	 esi
  0008d	f7 d8		 neg	 eax
  0008f	5d		 pop	 ebp

; 2130 : 		}

  00090	c2 08 00	 ret	 8
$LN3@Grow@2:

; 2127 : 		else if (_Newsize == 0)

  00093	85 ed		 test	 ebp, ebp
  00095	75 25		 jne	 SHORT $LN51@Grow@2

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

  00097	89 6e 14	 mov	 DWORD PTR [esi+20], ebp
  0009a	83 f8 08	 cmp	 eax, 8
  0009d	72 15		 jb	 SHORT $LN49@Grow@2
  0009f	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000a2	33 c0		 xor	 eax, eax

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000a4	33 c9		 xor	 ecx, ecx
  000a6	3b cd		 cmp	 ecx, ebp
  000a8	66 89 06	 mov	 WORD PTR [esi], ax
  000ab	1b c0		 sbb	 eax, eax
  000ad	5e		 pop	 esi
  000ae	f7 d8		 neg	 eax
  000b0	5d		 pop	 ebp

; 2130 : 		}

  000b1	c2 08 00	 ret	 8

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

$LN49@Grow@2:
  000b4	83 c6 04	 add	 esi, 4
  000b7	33 c0		 xor	 eax, eax
  000b9	66 89 06	 mov	 WORD PTR [esi], ax
$LN51@Grow@2:

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000bc	33 c9		 xor	 ecx, ecx
  000be	3b cd		 cmp	 ecx, ebp
  000c0	1b c0		 sbb	 eax, eax
  000c2	5e		 pop	 esi
  000c3	f7 d8		 neg	 eax
  000c5	5d		 pop	 ebp

; 2130 : 		}

  000c6	c2 08 00	 ret	 8
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 951  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 952  : 		if (_Right.size() < _Roff)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7c 24 18	 mov	 edi, DWORD PTR __Roff$[esp+12]
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 7d 14	 cmp	 DWORD PTR [ebp+20], edi
  00011	73 05		 jae	 SHORT $LN5@append

; 953  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@append:

; 954  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]

; 955  : 		if (_Num < _Count)

  0001b	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Count$[esp+12]
  0001f	2b c7		 sub	 eax, edi
  00021	3b c3		 cmp	 eax, ebx
  00023	73 02		 jae	 SHORT $LN4@append

; 956  : 			_Count = _Num;	// trim _Count to size

  00025	8b d8		 mov	 ebx, eax
$LN4@append:

; 957  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00027	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002a	83 c9 ff	 or	 ecx, -1
  0002d	2b c8		 sub	 ecx, eax
  0002f	3b cb		 cmp	 ecx, ebx
  00031	76 07		 jbe	 SHORT $LN2@append
  00033	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]
  00036	3b d0		 cmp	 edx, eax
  00038	73 05		 jae	 SHORT $LN3@append
$LN2@append:

; 958  : 			_String_base::_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append:

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  0003f	85 db		 test	 ebx, ebx
  00041	0f 86 ab 00 00
	00		 jbe	 $LN87@append
  00047	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0004a	03 fb		 add	 edi, ebx
  0004c	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0004f	76 05		 jbe	 SHORT $LN17@append
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@append:
  00056	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00059	3b c7		 cmp	 eax, edi
  0005b	73 1f		 jae	 SHORT $LN16@append
  0005d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00060	50		 push	 eax
  00061	57		 push	 edi
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ff		 test	 edi, edi
$LN88@append:
  0006b	0f 86 81 00 00
	00		 jbe	 $LN87@append

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

  00071	83 7d 18 10	 cmp	 DWORD PTR [ebp+24], 16	; 00000010H
  00075	72 2f		 jb	 SHORT $LN64@append
  00077	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]
  0007a	eb 2d		 jmp	 SHORT $LN65@append

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN16@append:
  0007c	85 ff		 test	 edi, edi
  0007e	75 eb		 jne	 SHORT $LN88@append
  00080	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00083	83 f8 10	 cmp	 eax, 16			; 00000010H
  00086	72 0f		 jb	 SHORT $LN58@append
  00088	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008b	5f		 pop	 edi
  0008c	c6 00 00	 mov	 BYTE PTR [eax], 0

; 965  : 			}
; 966  : 		return (*this);

  0008f	8b c6		 mov	 eax, esi
  00091	5e		 pop	 esi
  00092	5d		 pop	 ebp
  00093	5b		 pop	 ebx

; 967  : 		}

  00094	c2 0c 00	 ret	 12			; 0000000cH

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN58@append:
  00097	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0009a	5f		 pop	 edi
  0009b	c6 00 00	 mov	 BYTE PTR [eax], 0

; 965  : 			}
; 966  : 		return (*this);

  0009e	8b c6		 mov	 eax, esi
  000a0	5e		 pop	 esi
  000a1	5d		 pop	 ebp
  000a2	5b		 pop	 ebx

; 967  : 		}

  000a3	c2 0c 00	 ret	 12			; 0000000cH

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

$LN64@append:
  000a6	83 c5 04	 add	 ebp, 4
$LN65@append:
  000a9	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000ac	83 f8 10	 cmp	 eax, 16			; 00000010H
  000af	72 05		 jb	 SHORT $LN68@append
  000b1	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000b4	eb 03		 jmp	 SHORT $LN69@append
$LN68@append:
  000b6	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN69@append:
  000b9	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000bc	53		 push	 ebx
  000bd	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Roff$[esp+16]
  000c1	03 eb		 add	 ebp, ebx
  000c3	2b c1		 sub	 eax, ecx
  000c5	55		 push	 ebp
  000c6	50		 push	 eax
  000c7	03 ca		 add	 ecx, edx
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	83 c4 10	 add	 esp, 16			; 00000010H

; 964  : 			_Eos(_Num);

  000d2	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000d6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000d9	72 10		 jb	 SHORT $LN82@append
  000db	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000de	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000e2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000e3	8b c6		 mov	 eax, esi
  000e5	5e		 pop	 esi
  000e6	5d		 pop	 ebp
  000e7	5b		 pop	 ebx

; 967  : 		}

  000e8	c2 0c 00	 ret	 12			; 0000000cH

; 964  : 			_Eos(_Num);

$LN82@append:
  000eb	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000ee	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN87@append:
  000f2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000f3	8b c6		 mov	 eax, esi
  000f5	5e		 pop	 esi
  000f6	5d		 pop	 ebp
  000f7	5b		 pop	 ebx

; 967  : 		}

  000f8	c2 0c 00	 ret	 12			; 0000000cH
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1046 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx

; 1047 : 		if (_Right.size() < _Roff)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Right$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 10	 mov	 ebp, DWORD PTR __Roff$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 6b 14	 cmp	 DWORD PTR [ebx+20], ebp
  00011	73 05		 jae	 SHORT $LN5@assign

; 1048 : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@assign:

; 1049 : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]

; 1050 : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b fd		 sub	 edi, ebp
  00021	3b c7		 cmp	 eax, edi
  00023	73 02		 jae	 SHORT $LN4@assign

; 1051 : 			_Num = _Count;	// trim _Num to size

  00025	8b f8		 mov	 edi, eax
$LN4@assign:

; 1052 : 
; 1053 : 		if (this == &_Right)

  00027	3b f3		 cmp	 esi, ebx
  00029	75 1f		 jne	 SHORT $LN3@assign

; 1054 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 fd		 add	 edi, ebp
  0002f	57		 push	 edi
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	55		 push	 ebp
  00038	6a 00		 push	 0
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	5b		 pop	 ebx

; 1061 : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign:

; 1055 : 		else if (_Grow(_Num))

  0004a	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0004d	76 05		 jbe	 SHORT $LN17@assign
  0004f	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@assign:
  00054	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00057	3b c7		 cmp	 eax, edi
  00059	73 1b		 jae	 SHORT $LN16@assign
  0005b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0005e	50		 push	 eax
  0005f	57		 push	 edi
  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00067	85 ff		 test	 edi, edi
$LN87@assign:
  00069	76 66		 jbe	 SHORT $LN86@assign

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

  0006b	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0006f	72 2f		 jb	 SHORT $LN64@assign
  00071	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00074	eb 2d		 jmp	 SHORT $LN65@assign

; 1055 : 		else if (_Grow(_Num))

$LN16@assign:
  00076	85 ff		 test	 edi, edi
  00078	75 ef		 jne	 SHORT $LN87@assign
  0007a	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0007d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00080	72 0f		 jb	 SHORT $LN58@assign
  00082	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00085	5f		 pop	 edi
  00086	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00089	8b c6		 mov	 eax, esi
  0008b	5e		 pop	 esi
  0008c	5d		 pop	 ebp
  0008d	5b		 pop	 ebx

; 1061 : 		}

  0008e	c2 0c 00	 ret	 12			; 0000000cH

; 1055 : 		else if (_Grow(_Num))

$LN58@assign:
  00091	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00098	8b c6		 mov	 eax, esi
  0009a	5e		 pop	 esi
  0009b	5d		 pop	 ebp
  0009c	5b		 pop	 ebx

; 1061 : 		}

  0009d	c2 0c 00	 ret	 12			; 0000000cH

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

$LN64@assign:
  000a0	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN65@assign:
  000a3	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000a6	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000a9	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000ac	72 04		 jb	 SHORT $LN68@assign
  000ae	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b0	eb 02		 jmp	 SHORT $LN69@assign
$LN68@assign:
  000b2	8b c3		 mov	 eax, ebx
$LN69@assign:
  000b4	57		 push	 edi
  000b5	03 d5		 add	 edx, ebp
  000b7	52		 push	 edx
  000b8	51		 push	 ecx
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 _memcpy_s
  000bf	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 			_Eos(_Num);

  000c2	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c9	72 02		 jb	 SHORT $LN82@assign
  000cb	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN82@assign:
  000cd	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
$LN86@assign:
  000d1	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  000d2	8b c6		 mov	 eax, esi
  000d4	5e		 pop	 esi
  000d5	5d		 pop	 ebp
  000d6	5b		 pop	 ebx

; 1061 : 		}

  000d7	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1064 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp

; 1065 : 
; 1066 :  #if _HAS_ITERATOR_DEBUGGING
; 1067 : 		if (_Count != 0)
; 1068 : 			_DEBUG_POINTER(_Ptr);
; 1069 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1070 : 
; 1071 : 		if (_Inside(_Ptr))

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 ed		 test	 ebp, ebp
  0000b	74 46		 je	 SHORT $LN93@assign@2
  0000d	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 fa 10	 cmp	 edx, 16			; 00000010H
  00016	72 04		 jb	 SHORT $LN12@assign@2
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN13@assign@2
$LN12@assign@2:
  0001c	8b c8		 mov	 ecx, eax
$LN13@assign@2:
  0001e	3b e9		 cmp	 ebp, ecx
  00020	72 31		 jb	 SHORT $LN93@assign@2
  00022	83 fa 10	 cmp	 edx, 16			; 00000010H
  00025	72 04		 jb	 SHORT $LN16@assign@2
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN17@assign@2
$LN16@assign@2:
  0002b	8b c8		 mov	 ecx, eax
$LN17@assign@2:
  0002d	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00030	03 f9		 add	 edi, ecx
  00032	3b fd		 cmp	 edi, ebp
  00034	76 1d		 jbe	 SHORT $LN93@assign@2

; 1072 : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00036	83 fa 10	 cmp	 edx, 16			; 00000010H
  00039	72 02		 jb	 SHORT $LN20@assign@2
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@assign@2:
  0003d	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00041	51		 push	 ecx
  00042	2b e8		 sub	 ebp, eax
  00044	55		 push	 ebp
  00045	56		 push	 esi
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp

; 1080 : 		}

  00050	c2 08 00	 ret	 8
$LN93@assign@2:

; 1073 : 
; 1074 : 		if (_Grow(_Count))

  00053	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  00057	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0005a	76 05		 jbe	 SHORT $LN27@assign@2
  0005c	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN27@assign@2:
  00061	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00064	3b c7		 cmp	 eax, edi
  00066	73 20		 jae	 SHORT $LN26@assign@2
  00068	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0006b	52		 push	 edx
  0006c	57		 push	 edi
  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00074	85 ff		 test	 edi, edi
$LN94@assign@2:
  00076	76 56		 jbe	 SHORT $LN90@assign@2

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

  00078	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0007b	53		 push	 ebx
  0007c	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  0007f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00082	72 2c		 jb	 SHORT $LN74@assign@2
  00084	8b 03		 mov	 eax, DWORD PTR [ebx]
  00086	eb 2a		 jmp	 SHORT $LN75@assign@2

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN26@assign@2:
  00088	85 ff		 test	 edi, edi
  0008a	75 ea		 jne	 SHORT $LN94@assign@2
  0008c	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0008f	83 f8 10	 cmp	 eax, 16			; 00000010H
  00092	72 0e		 jb	 SHORT $LN68@assign@2
  00094	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00097	5f		 pop	 edi
  00098	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  0009b	8b c6		 mov	 eax, esi
  0009d	5e		 pop	 esi
  0009e	5d		 pop	 ebp

; 1080 : 		}

  0009f	c2 08 00	 ret	 8

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN68@assign@2:
  000a2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000a5	5f		 pop	 edi
  000a6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  000a9	8b c6		 mov	 eax, esi
  000ab	5e		 pop	 esi
  000ac	5d		 pop	 ebp

; 1080 : 		}

  000ad	c2 08 00	 ret	 8

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

$LN74@assign@2:
  000b0	8b c3		 mov	 eax, ebx
$LN75@assign@2:
  000b2	57		 push	 edi
  000b3	55		 push	 ebp
  000b4	51		 push	 ecx
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _memcpy_s
  000bb	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 			_Eos(_Count);

  000be	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c2	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c5	72 02		 jb	 SHORT $LN88@assign@2
  000c7	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN88@assign@2:
  000c9	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
  000cd	5b		 pop	 ebx
$LN90@assign@2:
  000ce	5f		 pop	 edi

; 1078 : 			}
; 1079 : 		return (*this);

  000cf	8b c6		 mov	 eax, esi
  000d1	5e		 pop	 esi
  000d2	5d		 pop	 ebp

; 1080 : 		}

  000d3	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1046 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx

; 1047 : 		if (_Right.size() < _Roff)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Roff$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 5d 14	 cmp	 DWORD PTR [ebp+20], ebx
  00011	73 05		 jae	 SHORT $LN5@assign@3

; 1048 : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@assign@3:

; 1049 : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 7d 14	 mov	 edi, DWORD PTR [ebp+20]

; 1050 : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b fb		 sub	 edi, ebx
  00021	3b c7		 cmp	 eax, edi
  00023	73 02		 jae	 SHORT $LN4@assign@3

; 1051 : 			_Num = _Count;	// trim _Num to size

  00025	8b f8		 mov	 edi, eax
$LN4@assign@3:

; 1052 : 
; 1053 : 		if (this == &_Right)

  00027	3b f5		 cmp	 esi, ebp
  00029	75 1f		 jne	 SHORT $LN3@assign@3

; 1054 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 fb		 add	 edi, ebx
  0002f	57		 push	 edi
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00037	53		 push	 ebx
  00038	6a 00		 push	 0
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00041	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	5b		 pop	 ebx

; 1061 : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign@3:

; 1055 : 		else if (_Grow(_Num))

  0004a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00050	76 05		 jbe	 SHORT $LN17@assign@3
  00052	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@assign@3:
  00057	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005a	3b c7		 cmp	 eax, edi
  0005c	73 1b		 jae	 SHORT $LN16@assign@3
  0005e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00061	50		 push	 eax
  00062	57		 push	 edi
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0006a	85 ff		 test	 edi, edi
$LN91@assign@3:
  0006c	76 7a		 jbe	 SHORT $LN90@assign@3

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

  0006e	83 7d 18 08	 cmp	 DWORD PTR [ebp+24], 8
  00072	72 33		 jb	 SHORT $LN66@assign@3
  00074	8b 4d 04	 mov	 ecx, DWORD PTR [ebp+4]
  00077	eb 31		 jmp	 SHORT $LN67@assign@3

; 1055 : 		else if (_Grow(_Num))

$LN16@assign@3:
  00079	85 ff		 test	 edi, edi
  0007b	75 ef		 jne	 SHORT $LN91@assign@3
  0007d	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00080	83 f8 08	 cmp	 eax, 8
  00083	72 11		 jb	 SHORT $LN60@assign@3
  00085	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00088	33 c9		 xor	 ecx, ecx
  0008a	5f		 pop	 edi
  0008b	66 89 08	 mov	 WORD PTR [eax], cx

; 1059 : 			}
; 1060 : 		return (*this);

  0008e	8b c6		 mov	 eax, esi
  00090	5e		 pop	 esi
  00091	5d		 pop	 ebp
  00092	5b		 pop	 ebx

; 1061 : 		}

  00093	c2 0c 00	 ret	 12			; 0000000cH

; 1055 : 		else if (_Grow(_Num))

$LN60@assign@3:
  00096	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00099	33 c9		 xor	 ecx, ecx
  0009b	5f		 pop	 edi
  0009c	66 89 08	 mov	 WORD PTR [eax], cx

; 1059 : 			}
; 1060 : 		return (*this);

  0009f	8b c6		 mov	 eax, esi
  000a1	5e		 pop	 esi
  000a2	5d		 pop	 ebp
  000a3	5b		 pop	 ebx

; 1061 : 		}

  000a4	c2 0c 00	 ret	 12			; 0000000cH

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

$LN66@assign@3:
  000a7	8d 4d 04	 lea	 ecx, DWORD PTR [ebp+4]
$LN67@assign@3:
  000aa	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000ae	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  000b1	72 05		 jb	 SHORT $LN70@assign@3
  000b3	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  000b6	eb 02		 jmp	 SHORT $LN71@assign@3
$LN70@assign@3:
  000b8	8b c5		 mov	 eax, ebp
$LN71@assign@3:
  000ba	8b 54 24 18	 mov	 edx, DWORD PTR __Roff$[esp+12]
  000be	8d 0c 51	 lea	 ecx, DWORD PTR [ecx+edx*2]
  000c1	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  000c4	53		 push	 ebx
  000c5	51		 push	 ecx
  000c6	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000c9	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  000cc	52		 push	 edx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 _memcpy_s
  000d3	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 			_Eos(_Num);

  000d6	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000da	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000dd	72 03		 jb	 SHORT $LN86@assign@3
  000df	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN86@assign@3:
  000e2	33 c0		 xor	 eax, eax
  000e4	66 89 04 2b	 mov	 WORD PTR [ebx+ebp], ax
$LN90@assign@3:
  000e8	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  000e9	8b c6		 mov	 eax, esi
  000eb	5e		 pop	 esi
  000ec	5d		 pop	 ebp
  000ed	5b		 pop	 ebx

; 1061 : 		}

  000ee	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 971  : 
; 972  :  #if _HAS_ITERATOR_DEBUGGING
; 973  : 		if (_Count != 0)
; 974  : 			_DEBUG_POINTER(_Ptr);
; 975  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 976  : 
; 977  : 		if (_Inside(_Ptr))

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	74 46		 je	 SHORT $LN4@append@2
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 10	 cmp	 edi, 16			; 00000010H
  00016	72 04		 jb	 SHORT $LN14@append@2
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN15@append@2
$LN14@append@2:
  0001c	8b c8		 mov	 ecx, eax
$LN15@append@2:
  0001e	3b d1		 cmp	 edx, ecx
  00020	72 31		 jb	 SHORT $LN4@append@2
  00022	83 ff 10	 cmp	 edi, 16			; 00000010H
  00025	72 04		 jb	 SHORT $LN18@append@2
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN19@append@2
$LN18@append@2:
  0002b	8b c8		 mov	 ecx, eax
$LN19@append@2:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	03 d9		 add	 ebx, ecx
  00032	3b da		 cmp	 ebx, edx
  00034	76 1d		 jbe	 SHORT $LN4@append@2

; 978  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

  00036	83 ff 10	 cmp	 edi, 16			; 00000010H
  00039	72 02		 jb	 SHORT $LN22@append@2
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN22@append@2:
  0003d	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00041	51		 push	 ecx
  00042	2b d0		 sub	 edx, eax
  00044	52		 push	 edx
  00045	56		 push	 esi
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx

; 989  : 		}

  00050	c2 08 00	 ret	 8
$LN4@append@2:

; 979  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	83 ca ff	 or	 edx, -1
  00059	55		 push	 ebp
  0005a	8b 6c 24 18	 mov	 ebp, DWORD PTR __Count$[esp+12]
  0005e	2b d0		 sub	 edx, eax
  00060	3b d5		 cmp	 edx, ebp
  00062	76 07		 jbe	 SHORT $LN2@append@2
  00064	8d 0c 28	 lea	 ecx, DWORD PTR [eax+ebp]
  00067	3b c8		 cmp	 ecx, eax
  00069	73 05		 jae	 SHORT $LN3@append@2
$LN2@append@2:

; 980  : 			_String_base::_Xlen();	// result too long

  0006b	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@2:

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00070	85 ed		 test	 ebp, ebp
  00072	0f 86 87 00 00
	00		 jbe	 $LN92@append@2
  00078	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0007b	03 fd		 add	 edi, ebp
  0007d	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00080	76 05		 jbe	 SHORT $LN29@append@2
  00082	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN29@append@2:
  00087	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0008a	3b c7		 cmp	 eax, edi
  0008c	73 1f		 jae	 SHORT $LN28@append@2
  0008e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00091	52		 push	 edx
  00092	57		 push	 edi
  00093	8b ce		 mov	 ecx, esi
  00095	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0009a	85 ff		 test	 edi, edi
$LN95@append@2:
  0009c	76 61		 jbe	 SHORT $LN92@append@2

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

  0009e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000a1	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000a4	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a7	72 2e		 jb	 SHORT $LN76@append@2
  000a9	8b 13		 mov	 edx, DWORD PTR [ebx]
  000ab	eb 2c		 jmp	 SHORT $LN77@append@2

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN28@append@2:
  000ad	85 ff		 test	 edi, edi
  000af	75 eb		 jne	 SHORT $LN95@append@2
  000b1	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000b4	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b7	72 0f		 jb	 SHORT $LN70@append@2
  000b9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000bc	5d		 pop	 ebp
  000bd	5f		 pop	 edi
  000be	c6 00 00	 mov	 BYTE PTR [eax], 0

; 987  : 			}
; 988  : 		return (*this);

  000c1	8b c6		 mov	 eax, esi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx

; 989  : 		}

  000c5	c2 08 00	 ret	 8

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN70@append@2:
  000c8	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000cb	5d		 pop	 ebp
  000cc	5f		 pop	 edi
  000cd	c6 00 00	 mov	 BYTE PTR [eax], 0

; 987  : 			}
; 988  : 		return (*this);

  000d0	8b c6		 mov	 eax, esi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx

; 989  : 		}

  000d4	c2 08 00	 ret	 8

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

$LN76@append@2:
  000d7	8b d3		 mov	 edx, ebx
$LN77@append@2:
  000d9	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000dc	55		 push	 ebp
  000dd	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  000e1	2b c1		 sub	 eax, ecx
  000e3	55		 push	 ebp
  000e4	50		 push	 eax
  000e5	03 ca		 add	 ecx, edx
  000e7	51		 push	 ecx
  000e8	e8 00 00 00 00	 call	 _memcpy_s
  000ed	83 c4 10	 add	 esp, 16			; 00000010H

; 986  : 			_Eos(_Num);

  000f0	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000f4	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000f7	72 02		 jb	 SHORT $LN90@append@2
  000f9	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN90@append@2:
  000fb	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
$LN92@append@2:
  000ff	5d		 pop	 ebp
  00100	5f		 pop	 edi

; 987  : 			}
; 988  : 		return (*this);

  00101	8b c6		 mov	 eax, esi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx

; 989  : 		}

  00105	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 721  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 722  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 723  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 724  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1083 : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 1084 : 		_DEBUG_POINTER(_Ptr);
; 1085 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@assign@4:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@assign@4
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 1086 : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1064 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 1065 : 
; 1066 :  #if _HAS_ITERATOR_DEBUGGING
; 1067 : 		if (_Count != 0)
; 1068 : 			_DEBUG_POINTER(_Ptr);
; 1069 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1070 : 
; 1071 : 		if (_Inside(_Ptr))

  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00008	57		 push	 edi
  00009	85 c9		 test	 ecx, ecx
  0000b	74 49		 je	 SHORT $LN97@assign@5
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 08	 cmp	 edi, 8
  00016	72 04		 jb	 SHORT $LN12@assign@5
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN13@assign@5
$LN12@assign@5:
  0001c	8b d0		 mov	 edx, eax
$LN13@assign@5:
  0001e	3b ca		 cmp	 ecx, edx
  00020	72 34		 jb	 SHORT $LN97@assign@5
  00022	83 ff 08	 cmp	 edi, 8
  00025	72 04		 jb	 SHORT $LN16@assign@5
  00027	8b 10		 mov	 edx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN17@assign@5
$LN16@assign@5:
  0002b	8b d0		 mov	 edx, eax
$LN17@assign@5:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	8d 14 5a	 lea	 edx, DWORD PTR [edx+ebx*2]
  00033	3b d1		 cmp	 edx, ecx
  00035	76 1f		 jbe	 SHORT $LN97@assign@5

; 1072 : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00037	83 ff 08	 cmp	 edi, 8
  0003a	72 02		 jb	 SHORT $LN20@assign@5
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@assign@5:
  0003e	8b 54 24 14	 mov	 edx, DWORD PTR __Count$[esp+8]
  00042	2b c8		 sub	 ecx, eax
  00044	52		 push	 edx
  00045	d1 f9		 sar	 ecx, 1
  00047	51		 push	 ecx
  00048	56		 push	 esi
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx

; 1080 : 		}

  00053	c2 08 00	 ret	 8
$LN97@assign@5:

; 1073 : 
; 1074 : 		if (_Grow(_Count))

  00056	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0005a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00060	76 05		 jbe	 SHORT $LN27@assign@5
  00062	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN27@assign@5:
  00067	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0006a	3b c7		 cmp	 eax, edi
  0006c	73 21		 jae	 SHORT $LN26@assign@5
  0006e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00071	50		 push	 eax
  00072	57		 push	 edi
  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0007a	85 ff		 test	 edi, edi
$LN98@assign@5:
  0007c	76 67		 jbe	 SHORT $LN94@assign@5

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

  0007e	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00081	55		 push	 ebp
  00082	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  00085	83 f9 08	 cmp	 ecx, 8
  00088	72 31		 jb	 SHORT $LN76@assign@5
  0008a	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  0008d	eb 2e		 jmp	 SHORT $LN77@assign@5

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN26@assign@5:
  0008f	85 ff		 test	 edi, edi
  00091	75 e9		 jne	 SHORT $LN98@assign@5
  00093	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00096	83 f8 08	 cmp	 eax, 8
  00099	72 10		 jb	 SHORT $LN70@assign@5
  0009b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009e	33 c9		 xor	 ecx, ecx
  000a0	5f		 pop	 edi
  000a1	66 89 08	 mov	 WORD PTR [eax], cx

; 1078 : 			}
; 1079 : 		return (*this);

  000a4	8b c6		 mov	 eax, esi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx

; 1080 : 		}

  000a8	c2 08 00	 ret	 8

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN70@assign@5:
  000ab	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000ae	33 c9		 xor	 ecx, ecx
  000b0	5f		 pop	 edi
  000b1	66 89 08	 mov	 WORD PTR [eax], cx

; 1078 : 			}
; 1079 : 		return (*this);

  000b4	8b c6		 mov	 eax, esi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx

; 1080 : 		}

  000b8	c2 08 00	 ret	 8

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

$LN76@assign@5:
  000bb	8b c5		 mov	 eax, ebp
$LN77@assign@5:
  000bd	8b 54 24 14	 mov	 edx, DWORD PTR __Ptr$[esp+12]
  000c1	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  000c4	53		 push	 ebx
  000c5	52		 push	 edx
  000c6	03 c9		 add	 ecx, ecx
  000c8	51		 push	 ecx
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 			_Eos(_Count);

  000d2	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000d6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000d9	72 03		 jb	 SHORT $LN92@assign@5
  000db	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN92@assign@5:
  000de	33 d2		 xor	 edx, edx
  000e0	66 89 14 2b	 mov	 WORD PTR [ebx+ebp], dx
  000e4	5d		 pop	 ebp
$LN94@assign@5:
  000e5	5f		 pop	 edi

; 1078 : 			}
; 1079 : 		return (*this);

  000e6	8b c6		 mov	 eax, esi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx

; 1080 : 		}

  000ea	c2 08 00	 ret	 8
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 992  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 993  : 		_DEBUG_POINTER(_Ptr);
; 994  : 		return (append(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@append@3:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@append@3
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 995  : 		}

  00022	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 652  : 		_Tidy();
; 653  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$LL37@basic_stri@3:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL37@basic_stri@3
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 654  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1083 : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 1084 : 		_DEBUG_POINTER(_Ptr);
; 1085 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@assign@6:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL5@assign@6
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 1086 : 		}

  00028	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 935  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 936  : 		return (append(_Ptr));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL7@operator:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL7@operator
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 937  : 		}

  00022	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 652  : 		_Tidy();
; 653  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c0		 xor	 eax, eax
  00009	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00010	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00017	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0001b	8b c2		 mov	 eax, edx
  0001d	57		 push	 edi
  0001e	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
$LL39@basic_stri@4:
  00021	66 8b 08	 mov	 cx, WORD PTR [eax]
  00024	83 c0 02	 add	 eax, 2
  00027	66 85 c9	 test	 cx, cx
  0002a	75 f5		 jne	 SHORT $LL39@basic_stri@4
  0002c	2b c7		 sub	 eax, edi
  0002e	d1 f8		 sar	 eax, 1
  00030	50		 push	 eax
  00031	52		 push	 edx
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00039	5f		 pop	 edi

; 654  : 		}

  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 920  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 921  : 		return (assign(_Ptr));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL7@operator@2:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL7@operator@2
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 922  : 		}

  00028	c2 04 00	 ret	 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
_TEXT	SEGMENT
$T102243 = -44						; size = 4
$T102240 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 53   : 	{	// return string + NTCS

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 54   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 44 24 40	 mov	 eax, DWORD PTR __Left$[esp+52]
  00029	33 db		 xor	 ebx, ebx
  0002b	6a ff		 push	 -1
  0002d	53		 push	 ebx
  0002e	50		 push	 eax
  0002f	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T102240[esp+68]
  00033	89 5c 24 18	 mov	 DWORD PTR $T102243[esp+68], ebx
  00037	c7 44 24 34 0f
	00 00 00	 mov	 DWORD PTR $T102240[esp+92], 15 ; 0000000fH
  0003f	89 5c 24 30	 mov	 DWORD PTR $T102240[esp+88], ebx
  00043	88 5c 24 20	 mov	 BYTE PTR $T102240[esp+72], bl
  00047	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004c	8b 54 24 44	 mov	 edx, DWORD PTR __Right$[esp+52]
  00050	8b c2		 mov	 eax, edx
  00052	89 5c 24 34	 mov	 DWORD PTR __$EHRec$[esp+64], ebx
  00056	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL90@operator@3:
  00060	8a 08		 mov	 cl, BYTE PTR [eax]
  00062	40		 inc	 eax
  00063	3a cb		 cmp	 cl, bl
  00065	75 f9		 jne	 SHORT $LL90@operator@3
  00067	2b c6		 sub	 eax, esi
  00069	50		 push	 eax
  0006a	52		 push	 edx
  0006b	8d 4c 24 18	 lea	 ecx, DWORD PTR $T102240[esp+64]
  0006f	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00074	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00078	6a ff		 push	 -1
  0007a	53		 push	 ebx
  0007b	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00082	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00085	50		 push	 eax
  00086	8b ce		 mov	 ecx, esi
  00088	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  0008b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00090	83 7c 24 28 10	 cmp	 DWORD PTR $T102240[esp+80], 16 ; 00000010H
  00095	72 0d		 jb	 SHORT $LN91@operator@3
  00097	8b 4c 24 14	 mov	 ecx, DWORD PTR $T102240[esp+60]
  0009b	51		 push	 ecx
  0009c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a1	83 c4 04	 add	 esp, 4
$LN91@operator@3:
  000a4	8b c6		 mov	 eax, esi

; 55   : 	}

  000a6	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  000aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b1	59		 pop	 ecx
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	83 c4 2c	 add	 esp, 44			; 0000002cH
  000b7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T102240[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_C@_1CA@MBPOLHGL@?$AAT?$AAi?$AAm?$AAe?$AAs?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAR?$AAo?$AAm?$AAa?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EG@KKLJGMFD@?$AAP?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAc?$AAo?$AAn?$AAs?$AAi?$AAd?$AAe?$AAr?$AA?5?$AAm?$AAa?$AAk?$AAi?$AAn?$AAg?$AA?5?$AAa?$AA?5?$AAd?$AAo?$AAn?$AAa?$AAt?$AAi?$AAo@ ; `string'
PUBLIC	??_C@_0BI@CKIDBLFB@SETUP_FINISHED_INFO_DON?$AA@	; `string'
PUBLIC	??_C@_0BJ@KIEFKBPA@SETUP_FINISHED_TITLE_DON?$AA@ ; `string'
PUBLIC	??_C@_0CB@HFOJNJFM@SETUP_FINISHED_UPGRADE_TITLE_DON@ ; `string'
PUBLIC	??_C@_0BO@CCIEODIN@EXTRACTION_FINISHED_TITLE_DON?$AA@ ; `string'
PUBLIC	??_C@_0BE@FMNDIKAG@INSTALL_IN_PROGRESS?$AA@	; `string'
PUBLIC	??_C@_0BE@JGHDAHN@SETUP_PROGRESS_INFO?$AA@	; `string'
PUBLIC	??_C@_0BF@FGINDNOJ@SETUP_PROGRESS_TITLE?$AA@	; `string'
PUBLIC	??_C@_07PJFGKPND@INSTALL?$AA@			; `string'
PUBLIC	??_C@_0CB@JOIIBOEC@Software?2Classes?2TrueCryptVolume@ ; `string'
PUBLIC	??_C@_0L@LGADMAPO@?2TrueCrypt?$AA@		; `string'
PUBLIC	??_C@_0M@HNGGAEIF@?2CipherShed?$AA@		; `string'
PUBLIC	??_C@_0BK@GJOJHDCA@SETUP_UPGRADE_DESTINATION?$AA@ ; `string'
PUBLIC	??_C@_0BD@BMMFNCA@SETUP_OPTIONS_INFO?$AA@	; `string'
PUBLIC	??_C@_0BE@EDFPLLMN@SETUP_OPTIONS_TITLE?$AA@	; `string'
PUBLIC	??_C@_0BH@PEMNLIII@EXTRACTION_IN_PROGRESS?$AA@	; `string'
PUBLIC	??_C@_0BJ@LJFMAAFG@EXTRACTION_PROGRESS_INFO?$AA@ ; `string'
PUBLIC	??_C@_0BA@IBCNACGH@EXTRACTING_VERB?$AA@		; `string'
PUBLIC	??_C@_07LBPFAJBE@EXTRACT?$AA@			; `string'
PUBLIC	??_C@_0BF@HFEALDNI@AUTO_FOLDER_CREATION?$AA@	; `string'
PUBLIC	??_C@_0BI@OKGEFEFK@EXTRACTION_OPTIONS_INFO?$AA@	; `string'
PUBLIC	??_C@_0BJ@PDGEILOG@EXTRACTION_OPTIONS_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0M@GMDAANJE@CipherShed?2?$AA@		; `string'
PUBLIC	??_C@_0BI@ECIBEEIH@SETUP_MODE_HELP_INSTALL?$AA@	; `string'
PUBLIC	??_C@_0BI@JGKCNIKM@SETUP_MODE_HELP_UPGRADE?$AA@	; `string'
PUBLIC	??_C@_0BI@KCCOCEA@SETUP_MODE_HELP_EXTRACT?$AA@	; `string'
PUBLIC	??_C@_0BA@PHBLGFGD@SETUP_MODE_INFO?$AA@		; `string'
PUBLIC	??_C@_0BB@KMHMHMNP@SETUP_MODE_TITLE?$AA@	; `string'
PUBLIC	??_C@_07CNHFDDPI@UPGRADE?$AA@			; `string'
PUBLIC	??_C@_0BB@OFECFCBP@REPAIR_REINSTALL?$AA@	; `string'
PUBLIC	??_C@_0BH@MFJOAEDC@CANNOT_DISPLAY_LICENSE?$AA@	; `string'
PUBLIC	??_C@_06JHILMIHF@CANCEL?$AA@			; `string'
PUBLIC	??_C@_04PKHKLFPJ@PREV?$AA@			; `string'
PUBLIC	??_C@_04MOKMKBJN@NEXT?$AA@			; `string'
PUBLIC	??_C@_1DI@FKGEFKMH@?$AAI?$AA?5?$AA?$CG?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe?$AAr?$AAm?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BIA@MJJKLEKE@?$AAI?$AAM?$AAP?$AAO?$AAR?$AAT?$AAA?$AAN?$AAT?$AA?3?$AA?5?$AAB?$AAy?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk@ ; `string'
PUBLIC	??_C@_1LA@INOIFBMC@?$AAY?$AAo?$AAu?$AA?5?$AAm?$AAu?$AAs?$AAt?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AA?5?$AAt?$AAh?$AAe?$AAs?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe@ ; `string'
PUBLIC	??_C@_1DM@EGEEIDAI@?$AAP?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe?$AAr?$AAm?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BF@EOKBACHI@SETUP_WIZARD_PAGE_?$CFd?$AA@	; `string'
PUBLIC	??_C@_0O@MGHONKG@IDD_INSTL_DLG?$AA@		; `string'
PUBLIC	??_C@_06KCCPDNM@donate?$AA@			; `string'
PUBLIC	??_C@_07KNCOJMJF@?$CGref?$DN?$CFd?$AA@		; `string'
PUBLIC	??_C@_0BA@DJBAGGGN@SELECT_DEST_DIR?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_PageDialogProc@16
EXTRN	__imp__CreateFontIndirectW@4:PROC
EXTRN	_CompensateDPIFont:PROC
EXTRN	_wcsncpy:PROC
EXTRN	_NormalCursor:PROC
EXTRN	_DoInstall:PROC
EXTRN	_SystemRestoreDll:DWORD
EXTRN	__imp__RegCloseKey@4:PROC
EXTRN	__imp__RegOpenKeyExA@20:PROC
EXTRN	__access:PROC
EXTRN	__imp__SHGetSpecialFolderPathA@16:PROC
EXTRN	_bDesktopIconStatusDetermined:DWORD
EXTRN	__beginthread:PROC
EXTRN	_ExtractAllFilesThread:PROC
EXTRN	_DestExtractPath:BYTE
EXTRN	_WaitCursor:PROC
EXTRN	_strncat:PROC
EXTRN	_SetupFilesDir:BYTE
EXTRN	_CheckButton:PROC
EXTRN	_hUserBoldFont:DWORD
EXTRN	_bUpgrade:DWORD
EXTRN	_bRepairMode:DWORD
EXTRN	_DetermineUpgradeDowngradeStatus:PROC
EXTRN	_exit:PROC
EXTRN	_Error:PROC
EXTRN	_GetString:PROC
EXTRN	__imp__SetWindowTextW@8:PROC
EXTRN	_SetCheckBox:PROC
EXTRN	_free:PROC
EXTRN	__imp__SetWindowTextA@8:PROC
EXTRN	_GetLegalNotices:PROC
EXTRN	_LastDialogId:DWORD
EXTRN	_LocalizeDialog:PROC
EXTRN	_Applink:PROC
EXTRN	_sprintf_s:PROC
EXTRN	_bDesktopIcon:DWORD
EXTRN	_bAddToStartMenu:DWORD
EXTRN	_bRegisterFileExt:DWORD
EXTRN	_bForAllUsers:DWORD
EXTRN	_bSystemRestore:DWORD
EXTRN	__imp__SetDlgItemTextA@12:PROC
EXTRN	_BrowseDirectories:PROC
EXTRN	__imp__GetWindowTextLengthA@4:PROC
EXTRN	__imp__EnableWindow@8:PROC
EXTRN	_IsButtonChecked:PROC
EXTRN	__imp__GetStockObject@4:PROC
EXTRN	__imp__SetBkMode@8:PROC
EXTRN	_OpenPageHelp:PROC
EXTRN	__imp__GetParent@4:PROC
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__EndPaint@8:PROC
EXTRN	__imp__TextOutW@20:PROC
EXTRN	__imp__SetTextAlign@8:PROC
EXTRN	__imp__SetBkColor@8:PROC
EXTRN	__imp__SetTextColor@8:PROC
EXTRN	__imp__FillRect@12:PROC
EXTRN	_CompensateYDPI:PROC
EXTRN	_CompensateXDPI:PROC
EXTRN	__imp__CreateSolidBrush@4:PROC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	_AbortProcessSilent:PROC
EXTRN	__imp__BeginPaint@8:PROC
EXTRN	_localcleanup:PROC
EXTRN	__imp__EndDialog@8:PROC
EXTRN	_memset:PROC
;	COMDAT ?PageDebugId@?1??PageDialogProc@@9@16@4PADA
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
_BSS	SEGMENT
?PageDebugId@?1??PageDialogProc@@9@16@4PADA DB 080H DUP (?) ; `PageDialogProc'::`2'::PageDebugId
_BSS	ENDS
_BSS	SEGMENT
_DonTextColor DD 01H DUP (?)
_DonBkgColor DD	01H DUP (?)
_DonColorSchemeId DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_1CA@MBPOLHGL@?$AAT?$AAi?$AAm?$AAe?$AAs?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAR?$AAo?$AAm?$AAa?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@MBPOLHGL@?$AAT?$AAi?$AAm?$AAe?$AAs?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAR?$AAo?$AAm?$AAa?$AAn?$AA?$AA@ DB 'T'
	DB	00H, 'i', 00H, 'm', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'N', 00H
	DB	'e', 00H, 'w', 00H, ' ', 00H, 'R', 00H, 'o', 00H, 'm', 00H, 'a'
	DB	00H, 'n', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@KKLJGMFD@?$AAP?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAc?$AAo?$AAn?$AAs?$AAi?$AAd?$AAe?$AAr?$AA?5?$AAm?$AAa?$AAk?$AAi?$AAn?$AAg?$AA?5?$AAa?$AA?5?$AAd?$AAo?$AAn?$AAa?$AAt?$AAi?$AAo@
CONST	SEGMENT
??_C@_1EG@KKLJGMFD@?$AAP?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAc?$AAo?$AAn?$AAs?$AAi?$AAd?$AAe?$AAr?$AA?5?$AAm?$AAa?$AAk?$AAi?$AAn?$AAg?$AA?5?$AAa?$AA?5?$AAd?$AAo?$AAn?$AAa?$AAt?$AAi?$AAo@ DB 'P'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 'i', 00H, 'd', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'k', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'd', 00H, 'o'
	DB	00H, 'n', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H
	DB	'.', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CKIDBLFB@SETUP_FINISHED_INFO_DON?$AA@
CONST	SEGMENT
??_C@_0BI@CKIDBLFB@SETUP_FINISHED_INFO_DON?$AA@ DB 'SETUP_FINISHED_INFO_D'
	DB	'ON', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KIEFKBPA@SETUP_FINISHED_TITLE_DON?$AA@
CONST	SEGMENT
??_C@_0BJ@KIEFKBPA@SETUP_FINISHED_TITLE_DON?$AA@ DB 'SETUP_FINISHED_TITLE'
	DB	'_DON', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@HFOJNJFM@SETUP_FINISHED_UPGRADE_TITLE_DON@
CONST	SEGMENT
??_C@_0CB@HFOJNJFM@SETUP_FINISHED_UPGRADE_TITLE_DON@ DB 'SETUP_FINISHED_U'
	DB	'PGRADE_TITLE_DON', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CCIEODIN@EXTRACTION_FINISHED_TITLE_DON?$AA@
CONST	SEGMENT
??_C@_0BO@CCIEODIN@EXTRACTION_FINISHED_TITLE_DON?$AA@ DB 'EXTRACTION_FINI'
	DB	'SHED_TITLE_DON', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FMNDIKAG@INSTALL_IN_PROGRESS?$AA@
CONST	SEGMENT
??_C@_0BE@FMNDIKAG@INSTALL_IN_PROGRESS?$AA@ DB 'INSTALL_IN_PROGRESS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JGHDAHN@SETUP_PROGRESS_INFO?$AA@
CONST	SEGMENT
??_C@_0BE@JGHDAHN@SETUP_PROGRESS_INFO?$AA@ DB 'SETUP_PROGRESS_INFO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FGINDNOJ@SETUP_PROGRESS_TITLE?$AA@
CONST	SEGMENT
??_C@_0BF@FGINDNOJ@SETUP_PROGRESS_TITLE?$AA@ DB 'SETUP_PROGRESS_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07PJFGKPND@INSTALL?$AA@
CONST	SEGMENT
??_C@_07PJFGKPND@INSTALL?$AA@ DB 'INSTALL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@JOIIBOEC@Software?2Classes?2TrueCryptVolume@
CONST	SEGMENT
??_C@_0CB@JOIIBOEC@Software?2Classes?2TrueCryptVolume@ DB 'Software\Class'
	DB	'es\TrueCryptVolume', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LGADMAPO@?2TrueCrypt?$AA@
CONST	SEGMENT
??_C@_0L@LGADMAPO@?2TrueCrypt?$AA@ DB '\TrueCrypt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HNGGAEIF@?2CipherShed?$AA@
CONST	SEGMENT
??_C@_0M@HNGGAEIF@?2CipherShed?$AA@ DB '\CipherShed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GJOJHDCA@SETUP_UPGRADE_DESTINATION?$AA@
CONST	SEGMENT
??_C@_0BK@GJOJHDCA@SETUP_UPGRADE_DESTINATION?$AA@ DB 'SETUP_UPGRADE_DESTI'
	DB	'NATION', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BMMFNCA@SETUP_OPTIONS_INFO?$AA@
CONST	SEGMENT
??_C@_0BD@BMMFNCA@SETUP_OPTIONS_INFO?$AA@ DB 'SETUP_OPTIONS_INFO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EDFPLLMN@SETUP_OPTIONS_TITLE?$AA@
CONST	SEGMENT
??_C@_0BE@EDFPLLMN@SETUP_OPTIONS_TITLE?$AA@ DB 'SETUP_OPTIONS_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PEMNLIII@EXTRACTION_IN_PROGRESS?$AA@
CONST	SEGMENT
??_C@_0BH@PEMNLIII@EXTRACTION_IN_PROGRESS?$AA@ DB 'EXTRACTION_IN_PROGRESS'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LJFMAAFG@EXTRACTION_PROGRESS_INFO?$AA@
CONST	SEGMENT
??_C@_0BJ@LJFMAAFG@EXTRACTION_PROGRESS_INFO?$AA@ DB 'EXTRACTION_PROGRESS_'
	DB	'INFO', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IBCNACGH@EXTRACTING_VERB?$AA@
CONST	SEGMENT
??_C@_0BA@IBCNACGH@EXTRACTING_VERB?$AA@ DB 'EXTRACTING_VERB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07LBPFAJBE@EXTRACT?$AA@
CONST	SEGMENT
??_C@_07LBPFAJBE@EXTRACT?$AA@ DB 'EXTRACT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HFEALDNI@AUTO_FOLDER_CREATION?$AA@
CONST	SEGMENT
??_C@_0BF@HFEALDNI@AUTO_FOLDER_CREATION?$AA@ DB 'AUTO_FOLDER_CREATION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OKGEFEFK@EXTRACTION_OPTIONS_INFO?$AA@
CONST	SEGMENT
??_C@_0BI@OKGEFEFK@EXTRACTION_OPTIONS_INFO?$AA@ DB 'EXTRACTION_OPTIONS_IN'
	DB	'FO', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PDGEILOG@EXTRACTION_OPTIONS_TITLE?$AA@
CONST	SEGMENT
??_C@_0BJ@PDGEILOG@EXTRACTION_OPTIONS_TITLE?$AA@ DB 'EXTRACTION_OPTIONS_T'
	DB	'ITLE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GMDAANJE@CipherShed?2?$AA@
CONST	SEGMENT
??_C@_0M@GMDAANJE@CipherShed?2?$AA@ DB 'CipherShed\', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ECIBEEIH@SETUP_MODE_HELP_INSTALL?$AA@
CONST	SEGMENT
??_C@_0BI@ECIBEEIH@SETUP_MODE_HELP_INSTALL?$AA@ DB 'SETUP_MODE_HELP_INSTA'
	DB	'LL', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JGKCNIKM@SETUP_MODE_HELP_UPGRADE?$AA@
CONST	SEGMENT
??_C@_0BI@JGKCNIKM@SETUP_MODE_HELP_UPGRADE?$AA@ DB 'SETUP_MODE_HELP_UPGRA'
	DB	'DE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KCCOCEA@SETUP_MODE_HELP_EXTRACT?$AA@
CONST	SEGMENT
??_C@_0BI@KCCOCEA@SETUP_MODE_HELP_EXTRACT?$AA@ DB 'SETUP_MODE_HELP_EXTRAC'
	DB	'T', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PHBLGFGD@SETUP_MODE_INFO?$AA@
CONST	SEGMENT
??_C@_0BA@PHBLGFGD@SETUP_MODE_INFO?$AA@ DB 'SETUP_MODE_INFO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KMHMHMNP@SETUP_MODE_TITLE?$AA@
CONST	SEGMENT
??_C@_0BB@KMHMHMNP@SETUP_MODE_TITLE?$AA@ DB 'SETUP_MODE_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CNHFDDPI@UPGRADE?$AA@
CONST	SEGMENT
??_C@_07CNHFDDPI@UPGRADE?$AA@ DB 'UPGRADE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OFECFCBP@REPAIR_REINSTALL?$AA@
CONST	SEGMENT
??_C@_0BB@OFECFCBP@REPAIR_REINSTALL?$AA@ DB 'REPAIR_REINSTALL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MFJOAEDC@CANNOT_DISPLAY_LICENSE?$AA@
CONST	SEGMENT
??_C@_0BH@MFJOAEDC@CANNOT_DISPLAY_LICENSE?$AA@ DB 'CANNOT_DISPLAY_LICENSE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06JHILMIHF@CANCEL?$AA@
CONST	SEGMENT
??_C@_06JHILMIHF@CANCEL?$AA@ DB 'CANCEL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PKHKLFPJ@PREV?$AA@
CONST	SEGMENT
??_C@_04PKHKLFPJ@PREV?$AA@ DB 'PREV', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MOKMKBJN@NEXT?$AA@
CONST	SEGMENT
??_C@_04MOKMKBJN@NEXT?$AA@ DB 'NEXT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@FKGEFKMH@?$AAI?$AA?5?$AA?$CG?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe?$AAr?$AAm?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@FKGEFKMH@?$AAI?$AA?5?$AA?$CG?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe?$AAr?$AAm?$AAs?$AA?$AA@ DB 'I'
	DB	00H, ' ', 00H, '&', 00H, 'a', 00H, 'c', 00H, 'c', 00H, 'e', 00H
	DB	'p', 00H, 't', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' '
	DB	00H, 'l', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'n', 00H, 's', 00H
	DB	'e', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'm', 00H, 's'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BIA@MJJKLEKE@?$AAI?$AAM?$AAP?$AAO?$AAR?$AAT?$AAA?$AAN?$AAT?$AA?3?$AA?5?$AAB?$AAy?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk@
CONST	SEGMENT
??_C@_1BIA@MJJKLEKE@?$AAI?$AAM?$AAP?$AAO?$AAR?$AAT?$AAA?$AAN?$AAT?$AA?3?$AA?5?$AAB?$AAy?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk@ DB 'I'
	DB	00H, 'M', 00H, 'P', 00H, 'O', 00H, 'R', 00H, 'T', 00H, 'A', 00H
	DB	'N', 00H, 'T', 00H, ':', 00H, ' ', 00H, 'B', 00H, 'y', 00H, ' '
	DB	00H, 'c', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' '
	DB	00H, 'c', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, 'b', 00H
	DB	'o', 00H, 'x', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'l', 00H, 'o'
	DB	00H, 'w', 00H, ',', 00H, ' ', 00H, 'y', 00H, 'o', 00H, 'u', 00H
	DB	' ', 00H, 'a', 00H, 'c', 00H, 'c', 00H, 'e', 00H, 'p', 00H, 't'
	DB	00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, 's', 00H, 'e', 00H
	DB	' ', 00H, 'l', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'n', 00H, 's'
	DB	00H, 'e', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'm', 00H
	DB	's', 00H, ' ', 00H, 'a', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 's'
	DB	00H, 'i', 00H, 'g', 00H, 'n', 00H, 'i', 00H, 'f', 00H, 'y', 00H
	DB	' ', 00H, 't', 00H, 'h', 00H, 'a', 00H, 't', 00H, ' ', 00H, 'y'
	DB	00H, 'o', 00H, 'u', 00H, ' ', 00H, 'u', 00H, 'n', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, 's', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd'
	DB	00H, ' ', 00H, 'a', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'a', 00H
	DB	'g', 00H, 'r', 00H, 'e', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'o'
	DB	00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, 'm', 00H, '.', 00H
	DB	' ', 00H, 'P', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H, 'e'
	DB	00H, ' ', 00H, 'c', 00H, 'l', 00H, 'i', 00H, 'c', 00H, 'k', 00H
	DB	' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H, '''', 00H, 'a'
	DB	00H, 'r', 00H, 'r', 00H, 'o', 00H, 'w', 00H, ' ', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, 'n', 00H, '''', 00H, ' ', 00H, 'i', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H
	DB	's', 00H, 'e', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e'
	DB	00H, ' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 't', 00H, ' ', 00H
	DB	'o', 00H, 'f', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' '
	DB	00H, 'l', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'n', 00H, 's', 00H
	DB	'e', 00H, '.', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LA@INOIFBMC@?$AAY?$AAo?$AAu?$AA?5?$AAm?$AAu?$AAs?$AAt?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AA?5?$AAt?$AAh?$AAe?$AAs?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe@
CONST	SEGMENT
??_C@_1LA@INOIFBMC@?$AAY?$AAo?$AAu?$AA?5?$AAm?$AAu?$AAs?$AAt?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AA?5?$AAt?$AAh?$AAe?$AAs?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe@ DB 'Y'
	DB	00H, 'o', 00H, 'u', 00H, ' ', 00H, 'm', 00H, 'u', 00H, 's', 00H
	DB	't', 00H, ' ', 00H, 'a', 00H, 'c', 00H, 'c', 00H, 'e', 00H, 'p'
	DB	00H, 't', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, 's', 00H
	DB	'e', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'n'
	DB	00H, 's', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'm', 00H, 's', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, 'e', 00H, ' ', 00H, 'y', 00H, 'o', 00H, 'u', 00H
	DB	' ', 00H, 'c', 00H, 'a', 00H, 'n', 00H, ' ', 00H, 'u', 00H, 's'
	DB	00H, 'e', 00H, ',', 00H, ' ', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	'r', 00H, 'a', 00H, 'c', 00H, 't', 00H, ',', 00H, ' ', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'C', 00H, 'i', 00H, 'p'
	DB	00H, 'h', 00H, 'e', 00H, 'r', 00H, 'S', 00H, 'h', 00H, 'e', 00H
	DB	'd', 00H, '.', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@EGEEIDAI@?$AAP?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe?$AAr?$AAm?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@EGEEIDAI@?$AAP?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe?$AAr?$AAm?$AAs?$AA?$AA@ DB 'P'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' ', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ' ', 00H, 't', 00H, 'h'
	DB	00H, 'e', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'n', 00H, 's', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, 'm', 00H, 's', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EOKBACHI@SETUP_WIZARD_PAGE_?$CFd?$AA@
CONST	SEGMENT
??_C@_0BF@EOKBACHI@SETUP_WIZARD_PAGE_?$CFd?$AA@ DB 'SETUP_WIZARD_PAGE_%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MGHONKG@IDD_INSTL_DLG?$AA@
CONST	SEGMENT
??_C@_0O@MGHONKG@IDD_INSTL_DLG?$AA@ DB 'IDD_INSTL_DLG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KCCPDNM@donate?$AA@
CONST	SEGMENT
??_C@_06KCCPDNM@donate?$AA@ DB 'donate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KNCOJMJF@?$CGref?$DN?$CFd?$AA@
CONST	SEGMENT
??_C@_07KNCOJMJF@?$CGref?$DN?$CFd?$AA@ DB '&ref=%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DJBAGGGN@SELECT_DEST_DIR?$AA@
CONST	SEGMENT
??_C@_0BA@DJBAGGGN@SELECT_DEST_DIR?$AA@ DB 'SELECT_DEST_DIR', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\setup\wizard.c
CONST	ENDS
;	COMDAT _PageDialogProc@16
_TEXT	SEGMENT
$T102620 = -760						; size = 4
_driverVersion$95677 = -760				; size = 4
_hKey$95735 = -756					; size = 4
_trect$95910 = -752					; size = 16
_driverVersion$95709 = -736				; size = 4
$T102609 = -732						; size = 28
$T102608 = -704						; size = 28
$T102607 = -676						; size = 28
$T102610 = -648						; size = 28
_lf$95853 = -620					; size = 92
_tmpPaintStruct$95904 = -528				; size = 64
_path$95715 = -464					; size = 260
_tmpstr$95894 = -204					; size = 200
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_PageDialogProc@16 PROC					; COMDAT

; 218  : {

  00000	81 ec f8 02 00
	00		 sub	 esp, 760		; 000002f8H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 f4 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+760], eax
  00014	8b 84 24 04 03
	00 00		 mov	 eax, DWORD PTR _wParam$[esp+756]

; 219  : 	static char PageDebugId[128];
; 220  : 	WORD lw = LOWORD (wParam);
; 221  : 	WORD hw = HIWORD (wParam);
; 222  : 
; 223  : 	hCurPage = hwndDlg;
; 224  : 
; 225  : 	switch (uMsg)

  0001b	8b 8c 24 00 03
	00 00		 mov	 ecx, DWORD PTR _uMsg$[esp+756]
  00022	53		 push	 ebx
  00023	56		 push	 esi
  00024	8b b4 24 04 03
	00 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+764]

; 504  : 
; 505  : 		case DONATIONS_PAGE:
; 506  : 
; 507  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString (bExtractOnly ? "EXTRACTION_FINISHED_TITLE_DON" : (bUpgrade ? "SETUP_FINISHED_UPGRADE_TITLE_DON" : "SETUP_FINISHED_TITLE_DON")));

  0002b	33 db		 xor	 ebx, ebx
  0002d	8b d0		 mov	 edx, eax
  0002f	c1 ea 10	 shr	 edx, 16			; 00000010H
  00032	89 5c 24 08	 mov	 DWORD PTR $T102620[esp+768], ebx
  00036	57		 push	 edi
  00037	89 35 00 00 00
	00		 mov	 DWORD PTR ?hCurPage@@3PAUHWND__@@A, esi ; hCurPage
  0003d	83 f9 53	 cmp	 ecx, 83			; 00000053H
  00040	0f 87 74 01 00
	00		 ja	 $LN93@PageDialog

; 219  : 	static char PageDebugId[128];
; 220  : 	WORD lw = LOWORD (wParam);
; 221  : 	WORD hw = HIWORD (wParam);
; 222  : 
; 223  : 	hCurPage = hwndDlg;
; 224  : 
; 225  : 	switch (uMsg)

  00046	0f 84 45 01 00
	00		 je	 $LN38@PageDialog
  0004c	83 e9 0f	 sub	 ecx, 15			; 0000000fH
  0004f	74 2f		 je	 SHORT $LN7@PageDialog
  00051	83 e9 05	 sub	 ecx, 5
  00054	74 23		 je	 SHORT $LN9@PageDialog
  00056	83 e9 02	 sub	 ecx, 2
  00059	75 1e		 jne	 SHORT $LN9@PageDialog

; 601  : 
; 602  : 	case WM_ENDSESSION:
; 603  : 
; 604  : 		bPromptTutorial = FALSE;
; 605  : 		bPromptReleaseNotes = FALSE;
; 606  : 
; 607  : 		EndDialog (MainDlg, 0);

  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00060	53		 push	 ebx
  00061	50		 push	 eax
  00062	89 1d 00 00 00
	00		 mov	 DWORD PTR _bPromptTutorial, ebx
  00068	89 1d 00 00 00
	00		 mov	 DWORD PTR _bPromptReleaseNotes, ebx
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 608  : 		localcleanup ();

  00074	e8 00 00 00 00	 call	 _localcleanup
$LN9@PageDialog:

; 609  : 		return 0;

  00079	33 c0		 xor	 eax, eax
  0007b	e9 06 12 00 00	 jmp	 $LN79@PageDialog
$LN7@PageDialog:

; 714  : 				}
; 715  : 				return 1;
; 716  : 			}
; 717  : 		}
; 718  : 
; 719  : 		return 0;
; 720  : 
; 721  : 
; 722  : 	case WM_PAINT:
; 723  : 
; 724  : 		if (nCurPageNo == DONATIONS_PAGE)

  00080	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?nCurPageNo@@3HA, 6 ; nCurPageNo
  00087	0f 85 fd 00 00
	00		 jne	 $LN6@PageDialog

; 725  : 		{
; 726  : 			PAINTSTRUCT tmpPaintStruct;
; 727  : 			HDC hdc = BeginPaint (hCurPage, &tmpPaintStruct); 

  0008d	8d 8c 24 f4 00
	00 00		 lea	 ecx, DWORD PTR _tmpPaintStruct$95904[esp+772]
  00094	51		 push	 ecx
  00095	56		 push	 esi
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BeginPaint@8
  0009c	8b f0		 mov	 esi, eax

; 728  : 
; 729  : 			if (hdc == NULL)

  0009e	3b f3		 cmp	 esi, ebx
  000a0	75 05		 jne	 SHORT $LN5@PageDialog

; 730  : 				AbortProcessSilent ();

  000a2	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN5@PageDialog:

; 731  : 
; 732  : 			SelectObject (hdc, hDonTextFont);

  000a7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hDonTextFont
  000ad	52		 push	 edx
  000ae	56		 push	 esi
  000af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 733  : 
; 734  : 			if (DonColorSchemeId != 2)

  000b5	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _DonColorSchemeId, 2
  000bc	74 66		 je	 SHORT $LN4@PageDialog

; 735  : 			{
; 736  : 				HBRUSH tmpBrush = CreateSolidBrush (DonBkgColor);

  000be	a1 00 00 00 00	 mov	 eax, DWORD PTR _DonBkgColor
  000c3	50		 push	 eax
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateSolidBrush@4
  000ca	8b f8		 mov	 edi, eax

; 737  : 
; 738  : 				if (tmpBrush == NULL)

  000cc	3b fb		 cmp	 edi, ebx
  000ce	75 05		 jne	 SHORT $LN3@PageDialog

; 739  : 					AbortProcessSilent ();

  000d0	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN3@PageDialog:

; 740  : 
; 741  : 				RECT trect;
; 742  : 
; 743  : 				trect.left = 0;
; 744  : 				trect.right = CompensateXDPI (526);

  000d5	68 0e 02 00 00	 push	 526			; 0000020eH
  000da	89 5c 24 18	 mov	 DWORD PTR _trect$95910[esp+776], ebx
  000de	e8 00 00 00 00	 call	 _CompensateXDPI

; 745  : 				trect.top  = 0;
; 746  : 				trect.bottom = CompensateYDPI (246);

  000e3	68 f6 00 00 00	 push	 246			; 000000f6H
  000e8	89 44 24 24	 mov	 DWORD PTR _trect$95910[esp+788], eax
  000ec	89 5c 24 20	 mov	 DWORD PTR _trect$95910[esp+784], ebx
  000f0	e8 00 00 00 00	 call	 _CompensateYDPI
  000f5	83 c4 08	 add	 esp, 8

; 747  : 
; 748  : 				FillRect (hdc, &trect, tmpBrush);

  000f8	57		 push	 edi
  000f9	8d 4c 24 18	 lea	 ecx, DWORD PTR _trect$95910[esp+776]
  000fd	51		 push	 ecx
  000fe	56		 push	 esi
  000ff	89 44 24 2c	 mov	 DWORD PTR _trect$95910[esp+796], eax
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FillRect@12

; 749  : 
; 750  : 				SetTextColor (hdc, DonTextColor);

  00109	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _DonTextColor
  0010f	52		 push	 edx
  00110	56		 push	 esi
  00111	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 751  : 				SetBkColor (hdc, DonBkgColor);

  00117	a1 00 00 00 00	 mov	 eax, DWORD PTR _DonBkgColor
  0011c	50		 push	 eax
  0011d	56		 push	 esi
  0011e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkColor@8
$LN4@PageDialog:

; 752  : 			}
; 753  : 
; 754  : 			SetTextAlign(hdc, TA_CENTER);

  00124	6a 06		 push	 6
  00126	56		 push	 esi
  00127	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextAlign@8

; 755  : 
; 756  : 			TextOutW (hdc,
; 757  : 				CompensateXDPI (258),
; 758  : 				CompensateYDPI (70),
; 759  : 				DonText.c_str(), 
; 760  : 				DonText.length()); 

  0012d	83 3d 18 00 00
	00 08		 cmp	 DWORD PTR ?DonText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+24, 8
  00134	a1 04 00 00 00	 mov	 eax, DWORD PTR ?DonText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+4
  00139	73 05		 jae	 SHORT $LN117@PageDialog
  0013b	b8 04 00 00 00	 mov	 eax, OFFSET ?DonText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+4
$LN117@PageDialog:
  00140	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?DonText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+20
  00146	51		 push	 ecx
  00147	50		 push	 eax
  00148	6a 46		 push	 70			; 00000046H
  0014a	e8 00 00 00 00	 call	 _CompensateYDPI
  0014f	83 c4 04	 add	 esp, 4
  00152	50		 push	 eax
  00153	68 02 01 00 00	 push	 258			; 00000102H
  00158	e8 00 00 00 00	 call	 _CompensateXDPI
  0015d	83 c4 04	 add	 esp, 4
  00160	50		 push	 eax
  00161	56		 push	 esi
  00162	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TextOutW@20

; 761  : 			
; 762  : 			EndPaint (hCurPage, &tmpPaintStruct); 

  00168	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  0016d	8d 94 24 f4 00
	00 00		 lea	 edx, DWORD PTR _tmpPaintStruct$95904[esp+772]
  00174	52		 push	 edx
  00175	50		 push	 eax
  00176	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndPaint@8

; 763  : 			ReleaseDC (hCurPage, hdc);

  0017c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00182	56		 push	 esi
  00183	51		 push	 ecx
  00184	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8
$LN6@PageDialog:

; 764  : 		}
; 765  : 		return 0; 

  0018a	33 c0		 xor	 eax, eax
  0018c	e9 f5 10 00 00	 jmp	 $LN79@PageDialog
$LN38@PageDialog:

; 595  : 
; 596  : 	case WM_HELP:
; 597  : 		if (bLicenseAccepted)

  00191	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bLicenseAccepted@@3HA, ebx ; bLicenseAccepted
  00197	74 17		 je	 SHORT $LN37@PageDialog

; 598  : 			OpenPageHelp (GetParent (hwndDlg), nCurPageNo);

  00199	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  0019f	52		 push	 edx
  001a0	56		 push	 esi
  001a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 _OpenPageHelp
  001ad	83 c4 08	 add	 esp, 8
$LN37@PageDialog:

; 599  : 
; 600  : 		return 1;

  001b0	b8 01 00 00 00	 mov	 eax, 1
  001b5	e9 cc 10 00 00	 jmp	 $LN79@PageDialog
$LN93@PageDialog:

; 219  : 	static char PageDebugId[128];
; 220  : 	WORD lw = LOWORD (wParam);
; 221  : 	WORD hw = HIWORD (wParam);
; 222  : 
; 223  : 	hCurPage = hwndDlg;
; 224  : 
; 225  : 	switch (uMsg)

  001ba	81 e9 10 01 00
	00		 sub	 ecx, 272		; 00000110H
  001c0	0f 84 30 03 00
	00		 je	 $LN76@PageDialog
  001c6	83 e9 01	 sub	 ecx, 1
  001c9	74 1f		 je	 SHORT $LN35@PageDialog
  001cb	83 e9 27	 sub	 ecx, 39			; 00000027H

; 766  : 
; 767  : 
; 768  : 	case WM_CTLCOLORSTATIC:
; 769  : 
; 770  : 		/* This maintains the background under the transparent-backround texts */
; 771  : 
; 772  : 		SetBkMode ((HDC) wParam, TRANSPARENT);
; 773  : 		return ((LONG) (HBRUSH) (GetStockObject (NULL_BRUSH)));
; 774  : 
; 775  : 
; 776  : 	case WM_ERASEBKGND:
; 777  : 
; 778  : 		return 0;
; 779  : 	}
; 780  : 
; 781  : 	return 0;

  001ce	0f 85 a5 fe ff
	ff		 jne	 $LN9@PageDialog
  001d4	6a 01		 push	 1
  001d6	50		 push	 eax
  001d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkMode@8
  001dd	6a 05		 push	 5
  001df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStockObject@4
  001e5	e9 9c 10 00 00	 jmp	 $LN79@PageDialog
$LN35@PageDialog:

; 610  : 
; 611  : 
; 612  : 	case WM_COMMAND:
; 613  : 
; 614  : 		if (lw == IDC_AGREE && nCurPageNo == INTRO_PAGE)

  001ea	b9 fe 03 00 00	 mov	 ecx, 1022		; 000003feH
  001ef	66 3b c1	 cmp	 ax, cx
  001f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  001f8	75 3c		 jne	 SHORT $LN34@PageDialog
  001fa	3b cb		 cmp	 ecx, ebx
  001fc	75 70		 jne	 SHORT $LN32@PageDialog

; 615  : 		{
; 616  : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), IsButtonChecked (GetDlgItem (hwndDlg, IDC_AGREE)));

  001fe	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00204	68 fe 03 00 00	 push	 1022			; 000003feH
  00209	56		 push	 esi
  0020a	ff d7		 call	 edi
  0020c	50		 push	 eax
  0020d	e8 00 00 00 00	 call	 _IsButtonChecked
  00212	83 c4 04	 add	 esp, 4
  00215	50		 push	 eax
  00216	68 02 04 00 00	 push	 1026			; 00000402H
  0021b	56		 push	 esi
  0021c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00222	50		 push	 eax
  00223	ff d7		 call	 edi
  00225	50		 push	 eax
  00226	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 617  : 			return 1;

  0022c	b8 01 00 00 00	 mov	 eax, 1
  00231	e9 50 10 00 00	 jmp	 $LN79@PageDialog
$LN34@PageDialog:

; 618  : 		}
; 619  : 
; 620  : 		if (lw == IDC_WIZARD_MODE_EXTRACT_ONLY && nCurPageNo == WIZARD_MODE_PAGE)

  00236	bf 01 04 00 00	 mov	 edi, 1025		; 00000401H
  0023b	66 3b c7	 cmp	 ax, di
  0023e	75 12		 jne	 SHORT $LN33@PageDialog
  00240	83 f9 01	 cmp	 ecx, 1
  00243	75 29		 jne	 SHORT $LN32@PageDialog

; 621  : 		{
; 622  : 			bExtractOnly = TRUE;

  00245	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bExtractOnly@@3HA, ecx ; bExtractOnly

; 623  : 			return 1;

  0024b	8b c1		 mov	 eax, ecx
  0024d	e9 34 10 00 00	 jmp	 $LN79@PageDialog
$LN33@PageDialog:

; 624  : 		}
; 625  : 
; 626  : 		if (lw == IDC_WIZARD_MODE_INSTALL && nCurPageNo == WIZARD_MODE_PAGE)

  00252	bf 00 04 00 00	 mov	 edi, 1024		; 00000400H
  00257	66 3b c7	 cmp	 ax, di
  0025a	75 12		 jne	 SHORT $LN32@PageDialog
  0025c	83 f9 01	 cmp	 ecx, 1
  0025f	75 0d		 jne	 SHORT $LN32@PageDialog

; 627  : 		{
; 628  : 			bExtractOnly = FALSE;

  00261	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bExtractOnly@@3HA, ebx ; bExtractOnly

; 629  : 			return 1;

  00267	8b c1		 mov	 eax, ecx
  00269	e9 18 10 00 00	 jmp	 $LN79@PageDialog
$LN32@PageDialog:

; 630  : 		}
; 631  : 
; 632  : 		if ( nCurPageNo == EXTRACTION_OPTIONS_PAGE && hw == EN_CHANGE )

  0026e	83 f9 04	 cmp	 ecx, 4
  00271	75 46		 jne	 SHORT $LN31@PageDialog
  00273	b9 00 03 00 00	 mov	 ecx, 768		; 00000300H
  00278	66 3b d1	 cmp	 dx, cx
  0027b	75 67		 jne	 SHORT $LN118@PageDialog
$LN133@PageDialog:

; 633  : 		{
; 634  : 			EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), (GetWindowTextLengthA(GetDlgItem (hCurPage, IDC_DESTINATION)) > 1));

  0027d	68 e8 03 00 00	 push	 1000			; 000003e8H
  00282	56		 push	 esi
  00283	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00289	ff d6		 call	 esi
  0028b	50		 push	 eax
  0028c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextLengthA@4
  00292	33 d2		 xor	 edx, edx
  00294	83 f8 01	 cmp	 eax, 1
  00297	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0029c	0f 9f c2	 setg	 dl
  0029f	52		 push	 edx
  002a0	68 02 04 00 00	 push	 1026			; 00000402H
  002a5	50		 push	 eax
  002a6	ff d6		 call	 esi
  002a8	50		 push	 eax
  002a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
$LN25@PageDialog:

; 635  : 			return 1;

  002af	b8 01 00 00 00	 mov	 eax, 1
  002b4	e9 cd 0f 00 00	 jmp	 $LN79@PageDialog
$LN31@PageDialog:

; 636  : 		}
; 637  : 
; 638  : 		if ( nCurPageNo == INSTALL_OPTIONS_PAGE && hw == EN_CHANGE )

  002b9	83 f9 02	 cmp	 ecx, 2
  002bc	0f 85 df 01 00
	00		 jne	 $LN20@PageDialog
  002c2	b9 00 03 00 00	 mov	 ecx, 768		; 00000300H
  002c7	66 3b d1	 cmp	 dx, cx
  002ca	74 b1		 je	 SHORT $LN133@PageDialog

; 661  : 				return 1;
; 662  : 			}
; 663  : 		}
; 664  : 
; 665  : 		if ( nCurPageNo == INSTALL_OPTIONS_PAGE )
; 666  : 		{
; 667  : 			switch (lw)

  002cc	0f b7 c0	 movzx	 eax, ax
  002cf	05 16 fc ff ff	 add	 eax, -1002		; fffffc16H
  002d4	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  002d7	0f 87 9c fd ff
	ff		 ja	 $LN9@PageDialog
  002dd	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN134@PageDialog[eax*4]
$LN118@PageDialog:

; 639  : 		{
; 640  : 			EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), (GetWindowTextLengthA(GetDlgItem (hCurPage, IDC_DESTINATION)) > 1));
; 641  : 			return 1;
; 642  : 		}
; 643  : 
; 644  : 		if ( nCurPageNo == EXTRACTION_OPTIONS_PAGE )
; 645  : 		{
; 646  : 			switch (lw)

  002e4	0f b7 c0	 movzx	 eax, ax
  002e7	2d ea 03 00 00	 sub	 eax, 1002		; 000003eaH
  002ec	74 2d		 je	 SHORT $LN26@PageDialog
  002ee	83 e8 13	 sub	 eax, 19			; 00000013H
  002f1	0f 85 82 fd ff
	ff		 jne	 $LN9@PageDialog

; 656  : 				}
; 657  : 				return 1;
; 658  : 
; 659  : 			case IDC_OPEN_CONTAINING_FOLDER:
; 660  : 				bOpenContainingFolder = IsButtonChecked (GetDlgItem (hCurPage, IDC_OPEN_CONTAINING_FOLDER));

  002f7	68 fd 03 00 00	 push	 1021			; 000003fdH
  002fc	56		 push	 esi
  002fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00303	50		 push	 eax
  00304	e8 00 00 00 00	 call	 _IsButtonChecked
  00309	a3 00 00 00 00	 mov	 DWORD PTR ?bOpenContainingFolder@@3HA, eax ; bOpenContainingFolder
  0030e	83 c4 04	 add	 esp, 4
  00311	b8 01 00 00 00	 mov	 eax, 1
  00316	e9 6b 0f 00 00	 jmp	 $LN79@PageDialog
$LN26@PageDialog:

; 647  : 			{
; 648  : 			case IDC_BROWSE:
; 649  : 				if (BrowseDirectories (hwndDlg, "SELECT_DEST_DIR", WizardDestExtractPath))

  0031b	68 00 00 00 00	 push	 OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  00320	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DJBAGGGN@SELECT_DEST_DIR?$AA@
  00325	56		 push	 esi
  00326	e8 00 00 00 00	 call	 _BrowseDirectories
  0032b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0032e	85 c0		 test	 eax, eax
  00330	0f 84 79 ff ff
	ff		 je	 $LN25@PageDialog

; 650  : 				{
; 651  : 					if (WizardDestExtractPath [strlen(WizardDestExtractPath)-1] != '\\')

  00336	b8 00 00 00 00	 mov	 eax, OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  0033b	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0033e	8b ff		 npad	 2
$LL120@PageDialog:
  00340	8a 08		 mov	 cl, BYTE PTR [eax]
  00342	40		 inc	 eax
  00343	84 c9		 test	 cl, cl
  00345	75 f9		 jne	 SHORT $LL120@PageDialog
  00347	2b c2		 sub	 eax, edx
  00349	80 b8 ff ff ff
	ff 5c		 cmp	 BYTE PTR ?WizardDestExtractPath@@3PADA[eax-1], 92 ; 0000005cH
  00350	74 18		 je	 SHORT $LN24@PageDialog

; 652  : 					{
; 653  : 						strcat (WizardDestExtractPath, "\\");

  00352	bf 00 00 00 00	 mov	 edi, OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  00357	4f		 dec	 edi
$LL121@PageDialog:
  00358	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  0035b	47		 inc	 edi
  0035c	84 c0		 test	 al, al
  0035e	75 f8		 jne	 SHORT $LL121@PageDialog
  00360	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
  00367	66 89 0f	 mov	 WORD PTR [edi], cx
$LN24@PageDialog:

; 654  : 					}
; 655  : 					SetDlgItemText (hwndDlg, IDC_DESTINATION, WizardDestExtractPath);

  0036a	68 00 00 00 00	 push	 OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  0036f	68 e8 03 00 00	 push	 1000			; 000003e8H
  00374	56		 push	 esi
  00375	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12
  0037b	b8 01 00 00 00	 mov	 eax, 1
  00380	e9 01 0f 00 00	 jmp	 $LN79@PageDialog
$LN19@PageDialog:

; 668  : 			{
; 669  : 			case IDC_BROWSE:
; 670  : 				if (BrowseDirectories (hwndDlg, "SELECT_DEST_DIR", WizardDestInstallPath))

  00385	68 00 00 00 00	 push	 OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  0038a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DJBAGGGN@SELECT_DEST_DIR?$AA@
  0038f	56		 push	 esi
  00390	e8 00 00 00 00	 call	 _BrowseDirectories
  00395	83 c4 0c	 add	 esp, 12			; 0000000cH
  00398	85 c0		 test	 eax, eax
  0039a	0f 84 0f ff ff
	ff		 je	 $LN25@PageDialog

; 671  : 				{
; 672  : 					if (WizardDestInstallPath [strlen(WizardDestInstallPath)-1] != '\\')

  003a0	b8 00 00 00 00	 mov	 eax, OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  003a5	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL122@PageDialog:
  003a8	8a 08		 mov	 cl, BYTE PTR [eax]
  003aa	40		 inc	 eax
  003ab	84 c9		 test	 cl, cl
  003ad	75 f9		 jne	 SHORT $LL122@PageDialog
  003af	2b c2		 sub	 eax, edx
  003b1	80 b8 ff ff ff
	ff 5c		 cmp	 BYTE PTR ?WizardDestInstallPath@@3PADA[eax-1], 92 ; 0000005cH
  003b8	74 18		 je	 SHORT $LN17@PageDialog

; 673  : 					{
; 674  : 						strcat (WizardDestInstallPath, "\\");

  003ba	bf 00 00 00 00	 mov	 edi, OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  003bf	4f		 dec	 edi
$LL123@PageDialog:
  003c0	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  003c3	47		 inc	 edi
  003c4	84 c0		 test	 al, al
  003c6	75 f8		 jne	 SHORT $LL123@PageDialog
  003c8	66 8b 15 00 00
	00 00		 mov	 dx, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
  003cf	66 89 17	 mov	 WORD PTR [edi], dx
$LN17@PageDialog:

; 675  : 					}
; 676  : 					SetDlgItemText (hwndDlg, IDC_DESTINATION, WizardDestInstallPath);

  003d2	68 00 00 00 00	 push	 OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  003d7	68 e8 03 00 00	 push	 1000			; 000003e8H
  003dc	56		 push	 esi
  003dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12
  003e3	b8 01 00 00 00	 mov	 eax, 1
  003e8	e9 99 0e 00 00	 jmp	 $LN79@PageDialog
$LN16@PageDialog:

; 677  : 				}
; 678  : 				return 1;
; 679  : 
; 680  : 			case IDC_SYSTEM_RESTORE:
; 681  : 				bSystemRestore = IsButtonChecked (GetDlgItem (hCurPage, IDC_SYSTEM_RESTORE));

  003ed	68 f3 03 00 00	 push	 1011			; 000003f3H
  003f2	56		 push	 esi
  003f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  003f9	50		 push	 eax
  003fa	e8 00 00 00 00	 call	 _IsButtonChecked
  003ff	a3 00 00 00 00	 mov	 DWORD PTR _bSystemRestore, eax
  00404	83 c4 04	 add	 esp, 4
  00407	b8 01 00 00 00	 mov	 eax, 1
  0040c	e9 75 0e 00 00	 jmp	 $LN79@PageDialog
$LN15@PageDialog:

; 682  : 				return 1;
; 683  : 
; 684  : 			case IDC_ALL_USERS:
; 685  : 				bForAllUsers = IsButtonChecked (GetDlgItem (hCurPage, IDC_ALL_USERS));

  00411	68 f5 03 00 00	 push	 1013			; 000003f5H
  00416	56		 push	 esi
  00417	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0041d	50		 push	 eax
  0041e	e8 00 00 00 00	 call	 _IsButtonChecked
  00423	a3 00 00 00 00	 mov	 DWORD PTR _bForAllUsers, eax
  00428	83 c4 04	 add	 esp, 4
  0042b	b8 01 00 00 00	 mov	 eax, 1
  00430	e9 51 0e 00 00	 jmp	 $LN79@PageDialog
$LN14@PageDialog:

; 686  : 				return 1;
; 687  : 
; 688  : 			case IDC_FILE_TYPE:
; 689  : 				bRegisterFileExt = IsButtonChecked (GetDlgItem (hCurPage, IDC_FILE_TYPE));

  00435	68 f0 03 00 00	 push	 1008			; 000003f0H
  0043a	56		 push	 esi
  0043b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00441	50		 push	 eax
  00442	e8 00 00 00 00	 call	 _IsButtonChecked
  00447	a3 00 00 00 00	 mov	 DWORD PTR _bRegisterFileExt, eax
  0044c	83 c4 04	 add	 esp, 4
  0044f	b8 01 00 00 00	 mov	 eax, 1
  00454	e9 2d 0e 00 00	 jmp	 $LN79@PageDialog
$LN13@PageDialog:

; 690  : 				return 1;
; 691  : 
; 692  : 			case IDC_PROG_GROUP:
; 693  : 				bAddToStartMenu = IsButtonChecked (GetDlgItem (hCurPage, IDC_PROG_GROUP));

  00459	68 f2 03 00 00	 push	 1010			; 000003f2H
  0045e	56		 push	 esi
  0045f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00465	50		 push	 eax
  00466	e8 00 00 00 00	 call	 _IsButtonChecked
  0046b	a3 00 00 00 00	 mov	 DWORD PTR _bAddToStartMenu, eax
  00470	83 c4 04	 add	 esp, 4
  00473	b8 01 00 00 00	 mov	 eax, 1
  00478	e9 09 0e 00 00	 jmp	 $LN79@PageDialog
$LN12@PageDialog:

; 694  : 				return 1;
; 695  : 
; 696  : 			case IDC_DESKTOP_ICON:
; 697  : 				bDesktopIcon = IsButtonChecked (GetDlgItem (hCurPage, IDC_DESKTOP_ICON));

  0047d	68 f4 03 00 00	 push	 1012			; 000003f4H
  00482	56		 push	 esi
  00483	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00489	50		 push	 eax
  0048a	e8 00 00 00 00	 call	 _IsButtonChecked
  0048f	a3 00 00 00 00	 mov	 DWORD PTR _bDesktopIcon, eax
  00494	83 c4 04	 add	 esp, 4
  00497	b8 01 00 00 00	 mov	 eax, 1
  0049c	e9 e5 0d 00 00	 jmp	 $LN79@PageDialog
$LN20@PageDialog:

; 698  : 				return 1;
; 699  : 
; 700  : 			}
; 701  : 		}
; 702  : 
; 703  : 		if (nCurPageNo == DONATIONS_PAGE)

  004a1	83 f9 06	 cmp	 ecx, 6
  004a4	0f 85 cf fb ff
	ff		 jne	 $LN9@PageDialog

; 704  : 		{
; 705  : 			switch (lw)

  004aa	b9 08 04 00 00	 mov	 ecx, 1032		; 00000408H
  004af	66 3b c1	 cmp	 ax, cx
  004b2	0f 85 c1 fb ff
	ff		 jne	 $LN9@PageDialog

; 706  : 			{
; 707  : 			case IDC_DONATE:
; 708  : 				{
; 709  : 					char tmpstr [200];
; 710  : 
; 711  : 					snprintf (tmpstr, sizeof(tmpstr), "&ref=%d", DonColorSchemeId);

  004b8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _DonColorSchemeId
  004be	52		 push	 edx
  004bf	68 00 00 00 00	 push	 OFFSET ??_C@_07KNCOJMJF@?$CGref?$DN?$CFd?$AA@
  004c4	8d 84 24 40 02
	00 00		 lea	 eax, DWORD PTR _tmpstr$95894[esp+780]
  004cb	68 c8 00 00 00	 push	 200			; 000000c8H
  004d0	50		 push	 eax
  004d1	e8 00 00 00 00	 call	 _sprintf_s

; 712  : 
; 713  : 					Applink ("donate", FALSE, tmpstr);

  004d6	8d 8c 24 48 02
	00 00		 lea	 ecx, DWORD PTR _tmpstr$95894[esp+788]
  004dd	51		 push	 ecx
  004de	53		 push	 ebx
  004df	68 00 00 00 00	 push	 OFFSET ??_C@_06KCCPDNM@donate?$AA@
  004e4	e8 00 00 00 00	 call	 _Applink
  004e9	83 c4 1c	 add	 esp, 28			; 0000001cH
  004ec	b8 01 00 00 00	 mov	 eax, 1
  004f1	e9 90 0d 00 00	 jmp	 $LN79@PageDialog
$LN76@PageDialog:
  004f6	55		 push	 ebp

; 226  : 	{
; 227  : 	case WM_INITDIALOG:
; 228  : 		LocalizeDialog (hwndDlg, "IDD_INSTL_DLG");

  004f7	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MGHONKG@IDD_INSTL_DLG?$AA@
  004fc	56		 push	 esi
  004fd	e8 00 00 00 00	 call	 _LocalizeDialog

; 229  : 
; 230  : 		snprintf (PageDebugId, sizeof(PageDebugId), "SETUP_WIZARD_PAGE_%d", nCurPageNo);

  00502	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00508	52		 push	 edx
  00509	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EOKBACHI@SETUP_WIZARD_PAGE_?$CFd?$AA@
  0050e	68 80 00 00 00	 push	 128			; 00000080H
  00513	68 00 00 00 00	 push	 OFFSET ?PageDebugId@?1??PageDialogProc@@9@16@4PADA
  00518	e8 00 00 00 00	 call	 _sprintf_s

; 231  : 		LastDialogId = PageDebugId;
; 232  : 
; 233  : 		switch (nCurPageNo)

  0051d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00522	83 c4 18	 add	 esp, 24			; 00000018H
  00525	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LastDialogId, OFFSET ?PageDebugId@?1??PageDialogProc@@9@16@4PADA
  0052f	83 f8 06	 cmp	 eax, 6
  00532	0f 87 4b 0d 00
	00		 ja	 $LN74@PageDialog
  00538	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN135@PageDialog[eax*4]
$LN73@PageDialog:

; 234  : 		{
; 235  : 		case INTRO_PAGE:
; 236  : 			{
; 237  : 				char *licenseText = NULL;
; 238  : 
; 239  : 				licenseText = GetLegalNotices ();

  0053f	e8 00 00 00 00	 call	 _GetLegalNotices
  00544	8b e8		 mov	 ebp, eax

; 240  : 				if (licenseText != NULL)

  00546	3b eb		 cmp	 ebp, ebx
  00548	0f 84 4c 01 00
	00		 je	 $LN72@PageDialog

; 241  : 				{
; 242  : 					SetWindowTextA(GetDlgItem (hwndDlg, IDC_LICENSE_TEXT), licenseText);

  0054e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00554	55		 push	 ebp
  00555	68 ee 03 00 00	 push	 1006			; 000003eeH
  0055a	56		 push	 esi
  0055b	ff d7		 call	 edi
  0055d	50		 push	 eax
  0055e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 243  : 					free (licenseText);

  00564	55		 push	 ebp
  00565	e8 00 00 00 00	 call	 _free

; 249  : 				}
; 250  : 
; 251  : 				/* For legal reasons, some of the following texts cannot be localized by third parties. */
; 252  : 
; 253  : 				SetCheckBox (hwndDlg, IDC_AGREE, bLicenseAccepted);

  0056a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bLicenseAccepted@@3HA ; bLicenseAccepted
  0056f	50		 push	 eax
  00570	68 fe 03 00 00	 push	 1022			; 000003feH
  00575	56		 push	 esi
  00576	e8 00 00 00 00	 call	 _SetCheckBox

; 254  : 
; 255  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), L"Please read the license terms");

  0057b	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__GetParent@4
  00581	83 c4 10	 add	 esp, 16			; 00000010H
  00584	68 00 00 00 00	 push	 OFFSET ??_C@_1DM@EGEEIDAI@?$AAP?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe?$AAr?$AAm?$AAs?$AA?$AA@
  00589	68 e9 03 00 00	 push	 1001			; 000003e9H
  0058e	56		 push	 esi
  0058f	ff d5		 call	 ebp
  00591	50		 push	 eax
  00592	ff d7		 call	 edi
  00594	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetWindowTextW@8
  0059a	50		 push	 eax
  0059b	ff d3		 call	 ebx

; 256  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_INFO), L"You must accept these license terms before you can use, extract, or install CipherShed.");

  0059d	68 00 00 00 00	 push	 OFFSET ??_C@_1LA@INOIFBMC@?$AAY?$AAo?$AAu?$AA?5?$AAm?$AAu?$AAs?$AAt?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AA?5?$AAt?$AAh?$AAe?$AAs?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe@
  005a2	68 eb 03 00 00	 push	 1003			; 000003ebH
  005a7	56		 push	 esi
  005a8	ff d5		 call	 ebp
  005aa	50		 push	 eax
  005ab	ff d7		 call	 edi
  005ad	50		 push	 eax
  005ae	ff d3		 call	 ebx

; 257  : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), L"IMPORTANT: By checking the checkbox below, you accept these license terms and signify that you understand and agree to them. Please click the 'arrow down' icon to see the rest of the license.");	// Cannot be localized by third parties (for legal reasons).

  005b0	68 00 00 00 00	 push	 OFFSET ??_C@_1BIA@MJJKLEKE@?$AAI?$AAM?$AAP?$AAO?$AAR?$AAT?$AAA?$AAN?$AAT?$AA?3?$AA?5?$AAB?$AAy?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk@
  005b5	68 ed 03 00 00	 push	 1005			; 000003edH
  005ba	56		 push	 esi
  005bb	ff d7		 call	 edi
  005bd	50		 push	 eax
  005be	ff d3		 call	 ebx

; 258  : 				//SendMessage (GetDlgItem (hwndDlg, IDC_BOX_HELP), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);
; 259  : 
; 260  : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_AGREE), L"I &accept the license terms");	// Cannot be localized by third parties (for legal reasons).

  005c0	68 00 00 00 00	 push	 OFFSET ??_C@_1DI@FKGEFKMH@?$AAI?$AA?5?$AA?$CG?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAl?$AAi?$AAc?$AAe?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAe?$AAr?$AAm?$AAs?$AA?$AA@
  005c5	68 fe 03 00 00	 push	 1022			; 000003feH
  005ca	56		 push	 esi
  005cb	ff d7		 call	 edi
  005cd	50		 push	 eax
  005ce	ff d3		 call	 ebx

; 261  : 				//SetWindowTextW (GetDlgItem (hwndDlg, IDC_DISAGREE), L"I &do not accept the license terms");
; 262  : 
; 263  : 				//SendMessage (GetDlgItem (hwndDlg, IDC_AGREE), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);
; 264  : 				//SendMessage (GetDlgItem (hwndDlg, IDC_DISAGREE), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);
; 265  : 
; 266  : 				EnableWindow (GetDlgItem (hwndDlg, IDC_AGREE), TRUE);

  005d0	6a 01		 push	 1
  005d2	68 fe 03 00 00	 push	 1022			; 000003feH
  005d7	56		 push	 esi
  005d8	ff d7		 call	 edi
  005da	50		 push	 eax
  005db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 267  : 
; 268  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  005e1	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  005e6	e8 00 00 00 00	 call	 _GetString
  005eb	83 c4 04	 add	 esp, 4
  005ee	50		 push	 eax
  005ef	68 02 04 00 00	 push	 1026			; 00000402H
  005f4	56		 push	 esi
  005f5	ff d5		 call	 ebp
  005f7	50		 push	 eax
  005f8	ff d7		 call	 edi
  005fa	50		 push	 eax
  005fb	ff d3		 call	 ebx

; 269  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  005fd	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  00602	e8 00 00 00 00	 call	 _GetString
  00607	83 c4 04	 add	 esp, 4
  0060a	50		 push	 eax
  0060b	68 03 04 00 00	 push	 1027			; 00000403H
  00610	56		 push	 esi
  00611	ff d5		 call	 ebp
  00613	50		 push	 eax
  00614	ff d7		 call	 edi
  00616	50		 push	 eax
  00617	ff d3		 call	 ebx

; 270  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("CANCEL"));

  00619	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  0061e	e8 00 00 00 00	 call	 _GetString
  00623	83 c4 04	 add	 esp, 4
  00626	50		 push	 eax
  00627	6a 02		 push	 2
  00629	56		 push	 esi
  0062a	ff d5		 call	 ebp
  0062c	50		 push	 eax
  0062d	ff d7		 call	 edi
  0062f	50		 push	 eax
  00630	ff d3		 call	 ebx

; 271  : 
; 272  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), bLicenseAccepted);

  00632	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bLicenseAccepted@@3HA ; bLicenseAccepted
  00638	51		 push	 ecx
  00639	68 02 04 00 00	 push	 1026			; 00000402H
  0063e	56		 push	 esi
  0063f	ff d5		 call	 ebp
  00641	50		 push	 eax
  00642	ff d7		 call	 edi
  00644	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  0064a	50		 push	 eax
  0064b	ff d3		 call	 ebx

; 273  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  0064d	6a 00		 push	 0
  0064f	68 03 04 00 00	 push	 1027			; 00000403H
  00654	56		 push	 esi
  00655	ff d5		 call	 ebp
  00657	50		 push	 eax
  00658	ff d7		 call	 edi
  0065a	50		 push	 eax
  0065b	ff d3		 call	 ebx

; 274  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDHELP), bLicenseAccepted);

  0065d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bLicenseAccepted@@3HA ; bLicenseAccepted
  00663	52		 push	 edx
  00664	6a 09		 push	 9
  00666	56		 push	 esi
  00667	ff d5		 call	 ebp
  00669	50		 push	 eax
  0066a	ff d7		 call	 edi
  0066c	50		 push	 eax
  0066d	ff d3		 call	 ebx

; 275  : 
; 276  : 				// Left margin for license text
; 277  : 				SendMessage (GetDlgItem (hwndDlg, IDC_LICENSE_TEXT), EM_SETMARGINS, (WPARAM) EC_LEFTMARGIN, (LPARAM) CompensateXDPI (4));

  0066f	6a 04		 push	 4
  00671	e8 00 00 00 00	 call	 _CompensateXDPI
  00676	83 c4 04	 add	 esp, 4
  00679	50		 push	 eax
  0067a	6a 01		 push	 1
  0067c	68 d3 00 00 00	 push	 211			; 000000d3H
  00681	68 ee 03 00 00	 push	 1006			; 000003eeH
  00686	56		 push	 esi
  00687	ff d7		 call	 edi
  00689	50		 push	 eax
  0068a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 278  : 			}
; 279  : 			return 1;

  00690	b8 01 00 00 00	 mov	 eax, 1
  00695	e9 eb 0b 00 00	 jmp	 $LN130@PageDialog
$LN72@PageDialog:

; 244  : 				}
; 245  : 				else
; 246  : 				{
; 247  : 					Error("CANNOT_DISPLAY_LICENSE");

  0069a	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@MFJOAEDC@CANNOT_DISPLAY_LICENSE?$AA@
  0069f	e8 00 00 00 00	 call	 _Error
  006a4	83 c4 04	 add	 esp, 4

; 248  : 					exit (1);

  006a7	6a 01		 push	 1
  006a9	e8 00 00 00 00	 call	 _exit
$LN70@PageDialog:

; 280  : 
; 281  : 		case WIZARD_MODE_PAGE:
; 282  : 			{
; 283  : 				LONG driverVersion;
; 284  : 
; 285  : 				DetermineUpgradeDowngradeStatus (TRUE, &driverVersion);

  006ae	8d 44 24 10	 lea	 eax, DWORD PTR _driverVersion$95677[esp+776]
  006b2	50		 push	 eax
  006b3	6a 01		 push	 1
  006b5	e8 00 00 00 00	 call	 _DetermineUpgradeDowngradeStatus

; 286  : 
; 287  : 				if (bRepairMode)

  006ba	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  006c0	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SetWindowTextW@8
  006c6	83 c4 08	 add	 esp, 8
  006c9	39 1d 00 00 00
	00		 cmp	 DWORD PTR _bRepairMode, ebx
  006cf	74 21		 je	 SHORT $LN69@PageDialog

; 288  : 				{
; 289  : 					SetWindowTextW (GetDlgItem (hwndDlg, IDC_WIZARD_MODE_INSTALL), GetString ("REPAIR_REINSTALL"));

  006d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@OFECFCBP@REPAIR_REINSTALL?$AA@
  006d6	e8 00 00 00 00	 call	 _GetString
  006db	83 c4 04	 add	 esp, 4
  006de	50		 push	 eax
  006df	68 00 04 00 00	 push	 1024			; 00000400H
  006e4	56		 push	 esi
  006e5	ff d7		 call	 edi
  006e7	50		 push	 eax
  006e8	ff d5		 call	 ebp

; 290  : 					bExtractOnly = FALSE;

  006ea	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bExtractOnly@@3HA, ebx ; bExtractOnly
  006f0	eb 21		 jmp	 SHORT $LN67@PageDialog
$LN69@PageDialog:

; 291  : 				}
; 292  : 				else if (bUpgrade)

  006f2	39 1d 00 00 00
	00		 cmp	 DWORD PTR _bUpgrade, ebx
  006f8	74 19		 je	 SHORT $LN67@PageDialog

; 293  : 					SetWindowTextW (GetDlgItem (hwndDlg, IDC_WIZARD_MODE_INSTALL), GetString ("UPGRADE"));

  006fa	68 00 00 00 00	 push	 OFFSET ??_C@_07CNHFDDPI@UPGRADE?$AA@
  006ff	e8 00 00 00 00	 call	 _GetString
  00704	83 c4 04	 add	 esp, 4
  00707	50		 push	 eax
  00708	68 00 04 00 00	 push	 1024			; 00000400H
  0070d	56		 push	 esi
  0070e	ff d7		 call	 edi
  00710	50		 push	 eax
  00711	ff d5		 call	 ebp
$LN67@PageDialog:

; 294  : 
; 295  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SETUP_MODE_TITLE"));

  00713	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KMHMHMNP@SETUP_MODE_TITLE?$AA@
  00718	e8 00 00 00 00	 call	 _GetString
  0071d	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetParent@4
  00723	83 c4 04	 add	 esp, 4
  00726	50		 push	 eax
  00727	68 e9 03 00 00	 push	 1001			; 000003e9H
  0072c	56		 push	 esi
  0072d	ff d3		 call	 ebx
  0072f	50		 push	 eax
  00730	ff d7		 call	 edi
  00732	50		 push	 eax
  00733	ff d5		 call	 ebp

; 296  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_INFO), GetString ("SETUP_MODE_INFO"));

  00735	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PHBLGFGD@SETUP_MODE_INFO?$AA@
  0073a	e8 00 00 00 00	 call	 _GetString
  0073f	83 c4 04	 add	 esp, 4
  00742	50		 push	 eax
  00743	68 eb 03 00 00	 push	 1003			; 000003ebH
  00748	56		 push	 esi
  00749	ff d3		 call	 ebx
  0074b	50		 push	 eax
  0074c	ff d7		 call	 edi
  0074e	50		 push	 eax
  0074f	ff d5		 call	 ebp

; 297  : 
; 298  : 				SendMessage (GetDlgItem (hwndDlg, IDC_WIZARD_MODE_INSTALL), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  00751	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hUserBoldFont
  00757	6a 01		 push	 1
  00759	51		 push	 ecx
  0075a	6a 30		 push	 48			; 00000030H
  0075c	68 00 04 00 00	 push	 1024			; 00000400H
  00761	56		 push	 esi
  00762	ff d7		 call	 edi
  00764	50		 push	 eax
  00765	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 299  : 				SendMessage (GetDlgItem (hwndDlg, IDC_WIZARD_MODE_EXTRACT_ONLY), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  0076b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hUserBoldFont
  00771	6a 01		 push	 1
  00773	52		 push	 edx
  00774	6a 30		 push	 48			; 00000030H
  00776	68 01 04 00 00	 push	 1025			; 00000401H
  0077b	56		 push	 esi
  0077c	ff d7		 call	 edi
  0077e	50		 push	 eax
  0077f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 300  : 
; 301  : 				CheckButton (GetDlgItem (hwndDlg, bExtractOnly ? IDC_WIZARD_MODE_EXTRACT_ONLY : IDC_WIZARD_MODE_INSTALL));

  00785	33 c0		 xor	 eax, eax
  00787	39 05 00 00 00
	00		 cmp	 DWORD PTR ?bExtractOnly@@3HA, eax ; bExtractOnly
  0078d	0f 95 c0	 setne	 al
  00790	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  00795	50		 push	 eax
  00796	56		 push	 esi
  00797	ff d7		 call	 edi
  00799	50		 push	 eax
  0079a	e8 00 00 00 00	 call	 _CheckButton

; 302  : 
; 303  : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SETUP_MODE_HELP_EXTRACT"));

  0079f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@KCCOCEA@SETUP_MODE_HELP_EXTRACT?$AA@
  007a4	e8 00 00 00 00	 call	 _GetString
  007a9	83 c4 08	 add	 esp, 8
  007ac	50		 push	 eax
  007ad	68 ed 03 00 00	 push	 1005			; 000003edH
  007b2	56		 push	 esi
  007b3	ff d7		 call	 edi
  007b5	50		 push	 eax
  007b6	ff d5		 call	 ebp

; 304  : 
; 305  : 				if (!bRepairMode)

  007b8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bRepairMode, 0
  007bf	75 28		 jne	 SHORT $LN66@PageDialog

; 306  : 					SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP2), GetString (bUpgrade ? "SETUP_MODE_HELP_UPGRADE" : "SETUP_MODE_HELP_INSTALL"));

  007c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bUpgrade, 0
  007c8	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BI@JGKCNIKM@SETUP_MODE_HELP_UPGRADE?$AA@
  007cd	75 05		 jne	 SHORT $LN82@PageDialog
  007cf	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BI@ECIBEEIH@SETUP_MODE_HELP_INSTALL?$AA@
$LN82@PageDialog:
  007d4	50		 push	 eax
  007d5	e8 00 00 00 00	 call	 _GetString
  007da	83 c4 04	 add	 esp, 4
  007dd	50		 push	 eax
  007de	68 ef 03 00 00	 push	 1007			; 000003efH
  007e3	56		 push	 esi
  007e4	ff d7		 call	 edi
  007e6	50		 push	 eax
  007e7	ff d5		 call	 ebp
$LN66@PageDialog:

; 307  : 
; 308  : 				EnableWindow (GetDlgItem (hwndDlg, IDC_WIZARD_MODE_EXTRACT_ONLY), !bRepairMode);

  007e9	33 c9		 xor	 ecx, ecx
  007eb	39 0d 00 00 00
	00		 cmp	 DWORD PTR _bRepairMode, ecx
  007f1	0f 94 c1	 sete	 cl
  007f4	51		 push	 ecx
  007f5	68 01 04 00 00	 push	 1025			; 00000401H
  007fa	56		 push	 esi
  007fb	ff d7		 call	 edi
  007fd	50		 push	 eax
  007fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 309  : 				EnableWindow (GetDlgItem (hwndDlg, IDC_BOX_HELP), !bRepairMode);

  00804	33 d2		 xor	 edx, edx
  00806	39 15 00 00 00
	00		 cmp	 DWORD PTR _bRepairMode, edx
  0080c	0f 94 c2	 sete	 dl
  0080f	52		 push	 edx
  00810	68 ed 03 00 00	 push	 1005			; 000003edH
  00815	56		 push	 esi
  00816	ff d7		 call	 edi
  00818	50		 push	 eax
  00819	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 310  : 				EnableWindow (GetDlgItem (hwndDlg, IDC_WIZARD_MODE_INSTALL), TRUE);

  0081f	6a 01		 push	 1
  00821	68 00 04 00 00	 push	 1024			; 00000400H
  00826	56		 push	 esi
  00827	ff d7		 call	 edi
  00829	50		 push	 eax
  0082a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 311  : 
; 312  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  00830	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00835	e8 00 00 00 00	 call	 _GetString
  0083a	83 c4 04	 add	 esp, 4
  0083d	50		 push	 eax
  0083e	68 02 04 00 00	 push	 1026			; 00000402H
  00843	56		 push	 esi
  00844	ff d3		 call	 ebx
  00846	50		 push	 eax
  00847	ff d7		 call	 edi
  00849	50		 push	 eax
  0084a	ff d5		 call	 ebp

; 313  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  0084c	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  00851	e8 00 00 00 00	 call	 _GetString
  00856	83 c4 04	 add	 esp, 4
  00859	50		 push	 eax
  0085a	68 03 04 00 00	 push	 1027			; 00000403H
  0085f	56		 push	 esi
  00860	ff d3		 call	 ebx
  00862	50		 push	 eax
  00863	ff d7		 call	 edi
  00865	50		 push	 eax
  00866	ff d5		 call	 ebp

; 314  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("CANCEL"));

  00868	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  0086d	e8 00 00 00 00	 call	 _GetString
  00872	83 c4 04	 add	 esp, 4
  00875	50		 push	 eax
  00876	6a 02		 push	 2
  00878	56		 push	 esi
  00879	ff d3		 call	 ebx
  0087b	50		 push	 eax
  0087c	ff d7		 call	 edi
  0087e	50		 push	 eax
  0087f	ff d5		 call	 ebp

; 315  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  00881	6a 01		 push	 1
  00883	68 02 04 00 00	 push	 1026			; 00000402H
  00888	56		 push	 esi
  00889	ff d3		 call	 ebx
  0088b	50		 push	 eax
  0088c	ff d7		 call	 edi
  0088e	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__EnableWindow@8
  00894	50		 push	 eax
  00895	ff d5		 call	 ebp

; 316  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  00897	6a 01		 push	 1
  00899	68 03 04 00 00	 push	 1027			; 00000403H
  0089e	56		 push	 esi
  0089f	ff d3		 call	 ebx
  008a1	50		 push	 eax
  008a2	ff d7		 call	 edi
  008a4	50		 push	 eax
  008a5	ff d5		 call	 ebp

; 317  : 			}
; 318  : 			return 1;

  008a7	b8 01 00 00 00	 mov	 eax, 1
  008ac	e9 d4 09 00 00	 jmp	 $LN130@PageDialog
$LN65@PageDialog:

; 319  : 
; 320  : 		case EXTRACTION_OPTIONS_PAGE:
; 321  : 
; 322  : 			if (strlen(WizardDestExtractPath) < 2)

  008b1	b8 00 00 00 00	 mov	 eax, OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  008b6	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  008b9	8d a4 24 00 00
	00 00		 npad	 7
$LL124@PageDialog:
  008c0	8a 08		 mov	 cl, BYTE PTR [eax]
  008c2	40		 inc	 eax
  008c3	84 c9		 test	 cl, cl
  008c5	75 f9		 jne	 SHORT $LL124@PageDialog
  008c7	2b c2		 sub	 eax, edx
  008c9	83 f8 02	 cmp	 eax, 2
  008cc	73 45		 jae	 SHORT $LN64@PageDialog

; 323  : 			{ 
; 324  : 				strcpy_s (WizardDestExtractPath, sizeof(WizardDestExtractPath), SetupFilesDir);

  008ce	68 00 00 00 00	 push	 OFFSET _SetupFilesDir
  008d3	68 04 01 00 00	 push	 260			; 00000104H
  008d8	68 00 00 00 00	 push	 OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  008dd	e8 00 00 00 00	 call	 _strcpy_s

; 325  : 				strncat (WizardDestExtractPath, "CipherShed\\", sizeof (WizardDestExtractPath) - strlen (WizardDestExtractPath) - 1);

  008e2	b8 00 00 00 00	 mov	 eax, OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  008e7	83 c4 0c	 add	 esp, 12			; 0000000cH
  008ea	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  008ed	8d 49 00	 npad	 3
$LL125@PageDialog:
  008f0	8a 08		 mov	 cl, BYTE PTR [eax]
  008f2	40		 inc	 eax
  008f3	84 c9		 test	 cl, cl
  008f5	75 f9		 jne	 SHORT $LL125@PageDialog
  008f7	2b c2		 sub	 eax, edx
  008f9	b9 03 01 00 00	 mov	 ecx, 259		; 00000103H
  008fe	2b c8		 sub	 ecx, eax
  00900	51		 push	 ecx
  00901	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GMDAANJE@CipherShed?2?$AA@
  00906	68 00 00 00 00	 push	 OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  0090b	e8 00 00 00 00	 call	 _strncat
  00910	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN64@PageDialog:

; 326  : 			}
; 327  : 
; 328  : 			SendMessage (GetDlgItem (hwndDlg, IDC_DESTINATION), EM_LIMITTEXT, TC_MAX_PATH - 1, 0);

  00913	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00919	6a 00		 push	 0
  0091b	68 03 01 00 00	 push	 259			; 00000103H
  00920	68 c5 00 00 00	 push	 197			; 000000c5H
  00925	68 e8 03 00 00	 push	 1000			; 000003e8H
  0092a	56		 push	 esi
  0092b	ff d7		 call	 edi
  0092d	50		 push	 eax
  0092e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 329  : 
; 330  : 			SetDlgItemText (hwndDlg, IDC_DESTINATION, WizardDestExtractPath);

  00934	68 00 00 00 00	 push	 OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  00939	68 e8 03 00 00	 push	 1000			; 000003e8H
  0093e	56		 push	 esi
  0093f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12

; 331  : 
; 332  : 			SetCheckBox (hwndDlg, IDC_OPEN_CONTAINING_FOLDER, bOpenContainingFolder);

  00945	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bOpenContainingFolder@@3HA ; bOpenContainingFolder
  0094b	52		 push	 edx
  0094c	68 fd 03 00 00	 push	 1021			; 000003fdH
  00951	56		 push	 esi
  00952	e8 00 00 00 00	 call	 _SetCheckBox

; 333  : 
; 334  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("EXTRACTION_OPTIONS_TITLE"));

  00957	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PDGEILOG@EXTRACTION_OPTIONS_TITLE?$AA@
  0095c	e8 00 00 00 00	 call	 _GetString
  00961	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetParent@4
  00967	83 c4 10	 add	 esp, 16			; 00000010H
  0096a	50		 push	 eax
  0096b	68 e9 03 00 00	 push	 1001			; 000003e9H
  00970	56		 push	 esi
  00971	ff d3		 call	 ebx
  00973	50		 push	 eax
  00974	ff d7		 call	 edi
  00976	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SetWindowTextW@8
  0097c	50		 push	 eax
  0097d	ff d5		 call	 ebp

; 335  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_INFO), GetString ("EXTRACTION_OPTIONS_INFO"));

  0097f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@OKGEFEFK@EXTRACTION_OPTIONS_INFO?$AA@
  00984	e8 00 00 00 00	 call	 _GetString
  00989	83 c4 04	 add	 esp, 4
  0098c	50		 push	 eax
  0098d	68 eb 03 00 00	 push	 1003			; 000003ebH
  00992	56		 push	 esi
  00993	ff d3		 call	 ebx
  00995	50		 push	 eax
  00996	ff d7		 call	 edi
  00998	50		 push	 eax
  00999	ff d5		 call	 ebp

; 336  : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("AUTO_FOLDER_CREATION"));

  0099b	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@HFEALDNI@AUTO_FOLDER_CREATION?$AA@
  009a0	e8 00 00 00 00	 call	 _GetString
  009a5	83 c4 04	 add	 esp, 4
  009a8	50		 push	 eax
  009a9	68 ed 03 00 00	 push	 1005			; 000003edH
  009ae	56		 push	 esi
  009af	ff d7		 call	 edi
  009b1	50		 push	 eax
  009b2	ff d5		 call	 ebp

; 337  : 
; 338  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("EXTRACT"));

  009b4	68 00 00 00 00	 push	 OFFSET ??_C@_07LBPFAJBE@EXTRACT?$AA@
  009b9	e8 00 00 00 00	 call	 _GetString
  009be	83 c4 04	 add	 esp, 4
  009c1	50		 push	 eax
  009c2	68 02 04 00 00	 push	 1026			; 00000402H
  009c7	56		 push	 esi
  009c8	ff d3		 call	 ebx
  009ca	50		 push	 eax
  009cb	ff d7		 call	 edi
  009cd	50		 push	 eax
  009ce	ff d5		 call	 ebp

; 339  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  009d0	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  009d5	e8 00 00 00 00	 call	 _GetString
  009da	83 c4 04	 add	 esp, 4
  009dd	50		 push	 eax
  009de	68 03 04 00 00	 push	 1027			; 00000403H
  009e3	56		 push	 esi
  009e4	ff d3		 call	 ebx
  009e6	50		 push	 eax
  009e7	ff d7		 call	 edi
  009e9	50		 push	 eax
  009ea	ff d5		 call	 ebp

; 340  : 
; 341  : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDHELP), TRUE);

  009ec	6a 01		 push	 1
  009ee	6a 09		 push	 9
  009f0	56		 push	 esi
  009f1	ff d3		 call	 ebx
  009f3	50		 push	 eax
  009f4	ff d7		 call	 edi
  009f6	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__EnableWindow@8
  009fc	50		 push	 eax
  009fd	ff d5		 call	 ebp

; 342  : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  009ff	6a 01		 push	 1
  00a01	68 03 04 00 00	 push	 1027			; 00000403H
  00a06	56		 push	 esi
  00a07	ff d3		 call	 ebx
  00a09	50		 push	 eax
  00a0a	ff d7		 call	 edi
  00a0c	50		 push	 eax
  00a0d	ff d5		 call	 ebp

; 343  : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  00a0f	6a 01		 push	 1
  00a11	68 02 04 00 00	 push	 1026			; 00000402H
  00a16	56		 push	 esi
  00a17	ff d3		 call	 ebx
  00a19	50		 push	 eax
  00a1a	ff d7		 call	 edi
  00a1c	50		 push	 eax
  00a1d	ff d5		 call	 ebp

; 344  : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), TRUE);

  00a1f	6a 01		 push	 1
  00a21	6a 02		 push	 2
  00a23	56		 push	 esi
  00a24	ff d3		 call	 ebx
  00a26	50		 push	 eax
  00a27	ff d7		 call	 edi
  00a29	50		 push	 eax
  00a2a	ff d5		 call	 ebp

; 345  : 
; 346  : 			return 1;

  00a2c	b8 01 00 00 00	 mov	 eax, 1
  00a31	e9 4f 08 00 00	 jmp	 $LN130@PageDialog
$LN63@PageDialog:

; 347  : 
; 348  : 		case EXTRACTION_PROGRESS_PAGE:
; 349  : 
; 350  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("EXTRACTING_VERB"));

  00a36	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IBCNACGH@EXTRACTING_VERB?$AA@
  00a3b	e8 00 00 00 00	 call	 _GetString
  00a40	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  00a46	83 c4 04	 add	 esp, 4
  00a49	50		 push	 eax
  00a4a	68 e9 03 00 00	 push	 1001			; 000003e9H
  00a4f	56		 push	 esi
  00a50	ff d7		 call	 edi
  00a52	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__GetDlgItem@8
  00a58	50		 push	 eax
  00a59	ff d5		 call	 ebp
  00a5b	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetWindowTextW@8
  00a61	50		 push	 eax
  00a62	ff d3		 call	 ebx

; 351  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_INFO), GetString ("EXTRACTION_PROGRESS_INFO"));

  00a64	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LJFMAAFG@EXTRACTION_PROGRESS_INFO?$AA@
  00a69	e8 00 00 00 00	 call	 _GetString
  00a6e	83 c4 04	 add	 esp, 4
  00a71	50		 push	 eax
  00a72	68 eb 03 00 00	 push	 1003			; 000003ebH
  00a77	56		 push	 esi
  00a78	ff d7		 call	 edi
  00a7a	50		 push	 eax
  00a7b	ff d5		 call	 ebp
  00a7d	50		 push	 eax
  00a7e	ff d3		 call	 ebx

; 352  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  00a80	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00a85	e8 00 00 00 00	 call	 _GetString
  00a8a	83 c4 04	 add	 esp, 4
  00a8d	50		 push	 eax
  00a8e	68 02 04 00 00	 push	 1026			; 00000402H
  00a93	56		 push	 esi
  00a94	ff d7		 call	 edi
  00a96	50		 push	 eax
  00a97	ff d5		 call	 ebp
  00a99	50		 push	 eax
  00a9a	ff d3		 call	 ebx

; 353  : 
; 354  : 			if (bStartExtraction)

  00a9c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bStartExtraction@@3HA, 0 ; bStartExtraction
  00aa3	0f 84 d7 05 00
	00		 je	 $LN53@PageDialog

; 355  : 			{
; 356  : 				/* Start extraction */
; 357  : 
; 358  : 				LastDialogId = "EXTRACTION_IN_PROGRESS";

  00aa9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LastDialogId, OFFSET ??_C@_0BH@PEMNLIII@EXTRACTION_IN_PROGRESS?$AA@

; 359  : 
; 360  : 				WaitCursor ();

  00ab3	e8 00 00 00 00	 call	 _WaitCursor

; 361  : 
; 362  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  00ab8	6a 00		 push	 0
  00aba	68 03 04 00 00	 push	 1027			; 00000403H
  00abf	56		 push	 esi
  00ac0	ff d7		 call	 edi
  00ac2	50		 push	 eax
  00ac3	ff d5		 call	 ebp
  00ac5	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  00acb	50		 push	 eax
  00acc	ff d3		 call	 ebx

; 363  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), FALSE);

  00ace	6a 00		 push	 0
  00ad0	68 02 04 00 00	 push	 1026			; 00000402H
  00ad5	56		 push	 esi
  00ad6	ff d7		 call	 edi
  00ad8	50		 push	 eax
  00ad9	ff d5		 call	 ebp
  00adb	50		 push	 eax
  00adc	ff d3		 call	 ebx

; 364  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDHELP), FALSE);

  00ade	6a 00		 push	 0
  00ae0	6a 09		 push	 9
  00ae2	56		 push	 esi
  00ae3	ff d7		 call	 edi
  00ae5	50		 push	 eax
  00ae6	ff d5		 call	 ebp
  00ae8	50		 push	 eax
  00ae9	ff d3		 call	 ebx

; 365  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), FALSE);

  00aeb	6a 00		 push	 0
  00aed	6a 02		 push	 2
  00aef	56		 push	 esi
  00af0	ff d7		 call	 edi
  00af2	50		 push	 eax
  00af3	ff d5		 call	 ebp
  00af5	50		 push	 eax
  00af6	ff d3		 call	 ebx

; 366  : 
; 367  : 				if (WizardDestExtractPath [strlen(WizardDestExtractPath)-1] != '\\')

  00af8	b8 00 00 00 00	 mov	 eax, OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  00afd	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL126@PageDialog:
  00b00	8a 08		 mov	 cl, BYTE PTR [eax]
  00b02	40		 inc	 eax
  00b03	84 c9		 test	 cl, cl
  00b05	75 f9		 jne	 SHORT $LL126@PageDialog
  00b07	2b c2		 sub	 eax, edx
  00b09	80 b8 ff ff ff
	ff 5c		 cmp	 BYTE PTR ?WizardDestExtractPath@@3PADA[eax-1], 92 ; 0000005cH
  00b10	74 17		 je	 SHORT $LN61@PageDialog

; 368  : 					strcat (WizardDestExtractPath, "\\");

  00b12	bf 00 00 00 00	 mov	 edi, OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  00b17	4f		 dec	 edi
$LL127@PageDialog:
  00b18	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00b1b	47		 inc	 edi
  00b1c	84 c0		 test	 al, al
  00b1e	75 f8		 jne	 SHORT $LL127@PageDialog
  00b20	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
  00b26	66 89 07	 mov	 WORD PTR [edi], ax
$LN61@PageDialog:

; 369  : 
; 370  : 				strcpy_s (DestExtractPath, sizeof(DestExtractPath), WizardDestExtractPath);

  00b29	68 00 00 00 00	 push	 OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  00b2e	68 04 01 00 00	 push	 260			; 00000104H
  00b33	68 00 00 00 00	 push	 OFFSET _DestExtractPath
  00b38	e8 00 00 00 00	 call	 _strcpy_s

; 371  : 
; 372  : 				InitProgressBar ();

  00b3d	e8 00 00 00 00	 call	 _InitProgressBar

; 373  : 
; 374  : 				bInProgress = TRUE;
; 375  : 				bStartExtraction = FALSE;
; 376  : 
; 377  : 				_beginthread (ExtractAllFilesThread, 0, (void *) hwndDlg);

  00b42	56		 push	 esi
  00b43	6a 00		 push	 0
  00b45	68 00 00 00 00	 push	 OFFSET _ExtractAllFilesThread
  00b4a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bInProgress@@3HA, 1 ; bInProgress
  00b54	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bStartExtraction@@3HA, 0 ; bStartExtraction
  00b5e	e8 00 00 00 00	 call	 __beginthread
  00b63	83 c4 18	 add	 esp, 24			; 00000018H

; 500  : 
; 501  : 			}
; 502  : 
; 503  : 			return 1;

  00b66	b8 01 00 00 00	 mov	 eax, 1
  00b6b	e9 15 07 00 00	 jmp	 $LN130@PageDialog
$LN59@PageDialog:

; 378  : 			}
; 379  : 			else
; 380  : 			{
; 381  : 				NormalCursor ();
; 382  : 
; 383  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);
; 384  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);
; 385  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDHELP), TRUE);
; 386  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), TRUE);
; 387  : 			}
; 388  : 
; 389  : 			return 1;
; 390  : 
; 391  : 		case INSTALL_OPTIONS_PAGE:
; 392  : 			{
; 393  : 				LONG driverVersion;
; 394  : 
; 395  : 				DetermineUpgradeDowngradeStatus (TRUE, &driverVersion);

  00b70	8d 4c 24 28	 lea	 ecx, DWORD PTR _driverVersion$95709[esp+776]
  00b74	51		 push	 ecx
  00b75	bf 01 00 00 00	 mov	 edi, 1
  00b7a	57		 push	 edi
  00b7b	e8 00 00 00 00	 call	 _DetermineUpgradeDowngradeStatus
  00b80	83 c4 08	 add	 esp, 8

; 396  : 
; 397  : 				if (!bDesktopIconStatusDetermined)

  00b83	39 1d 00 00 00
	00		 cmp	 DWORD PTR _bDesktopIconStatusDetermined, ebx
  00b89	75 22		 jne	 SHORT $LN58@PageDialog

; 398  : 				{
; 399  : 					bDesktopIcon = !bUpgrade || bCipherShedMigration;

  00b8b	39 1d 00 00 00
	00		 cmp	 DWORD PTR _bUpgrade, ebx
  00b91	74 0e		 je	 SHORT $LN83@PageDialog
  00b93	89 1d 00 00 00
	00		 mov	 DWORD PTR _bDesktopIcon, ebx
  00b99	39 1d 00 00 00
	00		 cmp	 DWORD PTR _bCipherShedMigration, ebx
  00b9f	74 06		 je	 SHORT $LN84@PageDialog
$LN83@PageDialog:
  00ba1	89 3d 00 00 00
	00		 mov	 DWORD PTR _bDesktopIcon, edi
$LN84@PageDialog:

; 400  : 					bDesktopIconStatusDetermined = TRUE;

  00ba7	89 3d 00 00 00
	00		 mov	 DWORD PTR _bDesktopIconStatusDetermined, edi
$LN58@PageDialog:

; 401  : 				}
; 402  : 
; 403  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SETUP_OPTIONS_TITLE"));

  00bad	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@EDFPLLMN@SETUP_OPTIONS_TITLE?$AA@
  00bb2	e8 00 00 00 00	 call	 _GetString
  00bb7	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetParent@4
  00bbd	83 c4 04	 add	 esp, 4
  00bc0	50		 push	 eax
  00bc1	68 e9 03 00 00	 push	 1001			; 000003e9H
  00bc6	56		 push	 esi
  00bc7	ff d3		 call	 ebx
  00bc9	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00bcf	50		 push	 eax
  00bd0	ff d7		 call	 edi
  00bd2	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SetWindowTextW@8
  00bd8	50		 push	 eax
  00bd9	ff d5		 call	 ebp

; 404  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_INFO), GetString ("SETUP_OPTIONS_INFO"));

  00bdb	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@BMMFNCA@SETUP_OPTIONS_INFO?$AA@
  00be0	e8 00 00 00 00	 call	 _GetString
  00be5	83 c4 04	 add	 esp, 4
  00be8	50		 push	 eax
  00be9	68 eb 03 00 00	 push	 1003			; 000003ebH
  00bee	56		 push	 esi
  00bef	ff d3		 call	 ebx
  00bf1	50		 push	 eax
  00bf2	ff d7		 call	 edi
  00bf4	50		 push	 eax
  00bf5	ff d5		 call	 ebp

; 405  : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("AUTO_FOLDER_CREATION"));

  00bf7	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@HFEALDNI@AUTO_FOLDER_CREATION?$AA@
  00bfc	e8 00 00 00 00	 call	 _GetString
  00c01	83 c4 04	 add	 esp, 4
  00c04	50		 push	 eax
  00c05	68 ed 03 00 00	 push	 1005			; 000003edH
  00c0a	56		 push	 esi
  00c0b	ff d7		 call	 edi
  00c0d	50		 push	 eax
  00c0e	ff d5		 call	 ebp

; 406  : 
; 407  : 				InitWizardDestInstallPath ();

  00c10	e8 00 00 00 00	 call	 ?InitWizardDestInstallPath@@YAXXZ ; InitWizardDestInstallPath

; 408  : 
; 409  : 				SendMessage (GetDlgItem (hwndDlg, IDC_DESTINATION), EM_LIMITTEXT, TC_MAX_PATH - 1, 0);

  00c15	6a 00		 push	 0
  00c17	68 03 01 00 00	 push	 259			; 00000103H
  00c1c	68 c5 00 00 00	 push	 197			; 000000c5H
  00c21	68 e8 03 00 00	 push	 1000			; 000003e8H
  00c26	56		 push	 esi
  00c27	ff d7		 call	 edi
  00c29	50		 push	 eax
  00c2a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 410  : 
; 411  : 				SetDlgItemText (hwndDlg, IDC_DESTINATION, WizardDestInstallPath);

  00c30	68 00 00 00 00	 push	 OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  00c35	68 e8 03 00 00	 push	 1000			; 000003e8H
  00c3a	56		 push	 esi
  00c3b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12

; 412  : 
; 413  : 				if (bUpgrade)

  00c41	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bUpgrade, 0
  00c48	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__EnableWindow@8
  00c4e	0f 84 9c 01 00
	00		 je	 $LN56@PageDialog

; 414  : 				{
; 415  : 					SetWindowTextW (GetDlgItem (hwndDlg, IDT_INSTALL_DESTINATION), GetString ("SETUP_UPGRADE_DESTINATION"));

  00c54	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@GJOJHDCA@SETUP_UPGRADE_DESTINATION?$AA@
  00c59	e8 00 00 00 00	 call	 _GetString
  00c5e	83 c4 04	 add	 esp, 4
  00c61	50		 push	 eax
  00c62	68 f6 03 00 00	 push	 1014			; 000003f6H
  00c67	56		 push	 esi
  00c68	ff d7		 call	 edi
  00c6a	50		 push	 eax
  00c6b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 416  : 					EnableWindow (GetDlgItem (hwndDlg, IDC_DESTINATION), FALSE);

  00c71	6a 00		 push	 0
  00c73	68 e8 03 00 00	 push	 1000			; 000003e8H
  00c78	56		 push	 esi
  00c79	ff d7		 call	 edi
  00c7b	50		 push	 eax
  00c7c	ff d5		 call	 ebp

; 417  : 					EnableWindow (GetDlgItem (hwndDlg, IDC_BROWSE), FALSE);

  00c7e	6a 00		 push	 0
  00c80	68 ea 03 00 00	 push	 1002			; 000003eaH
  00c85	56		 push	 esi
  00c86	ff d7		 call	 edi
  00c88	50		 push	 eax
  00c89	ff d5		 call	 ebp

; 418  : 					EnableWindow (GetDlgItem (hwndDlg, IDC_ALL_USERS), FALSE);

  00c8b	6a 00		 push	 0
  00c8d	68 f5 03 00 00	 push	 1013			; 000003f5H
  00c92	56		 push	 esi
  00c93	ff d7		 call	 edi
  00c95	50		 push	 eax
  00c96	ff d5		 call	 ebp

; 419  : 
; 420  : 					/* Determine bForAllUsers state. */
; 421  : 					char path[MAX_PATH];
; 422  : 					SHGetSpecialFolderPath (hwndDlg, path, CSIDL_COMMON_PROGRAMS, 0);

  00c98	6a 00		 push	 0
  00c9a	6a 17		 push	 23			; 00000017H
  00c9c	8d 94 24 40 01
	00 00		 lea	 edx, DWORD PTR _path$95715[esp+784]
  00ca3	52		 push	 edx
  00ca4	56		 push	 esi
  00ca5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetSpecialFolderPathA@16

; 423  : 					bForAllUsers = (_access ((string (path) + "\\" TC_APP_NAME).c_str(), 0) == 0 || _access ((string (path) + "\\" TC_APP_NAME_LEGACY).c_str(), 0) == 0);

  00cab	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HNGGAEIF@?2CipherShed?$AA@
  00cb0	8d 84 24 3c 01
	00 00		 lea	 eax, DWORD PTR _path$95715[esp+780]
  00cb7	50		 push	 eax
  00cb8	8d 4c 24 6c	 lea	 ecx, DWORD PTR $T102607[esp+784]
  00cbc	c7 44 24 18 03
	00 00 00	 mov	 DWORD PTR $T102620[esp+784], 3
  00cc4	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00cc9	50		 push	 eax
  00cca	8d 4c 24 50	 lea	 ecx, DWORD PTR $T102608[esp+784]
  00cce	51		 push	 ecx
  00ccf	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00cd4	83 c4 0c	 add	 esp, 12			; 0000000cH
  00cd7	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00cdb	72 05		 jb	 SHORT $LN102@PageDialog
  00cdd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00ce0	eb 03		 jmp	 SHORT $LN103@PageDialog
$LN102@PageDialog:
  00ce2	83 c0 04	 add	 eax, 4
$LN103@PageDialog:
  00ce5	6a 00		 push	 0
  00ce7	50		 push	 eax
  00ce8	e8 00 00 00 00	 call	 __access
  00ced	83 c4 08	 add	 esp, 8
  00cf0	85 c0		 test	 eax, eax
  00cf2	74 56		 je	 SHORT $LN85@PageDialog
  00cf4	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LGADMAPO@?2TrueCrypt?$AA@
  00cf9	8d 94 24 3c 01
	00 00		 lea	 edx, DWORD PTR _path$95715[esp+780]
  00d00	52		 push	 edx
  00d01	8d 4c 24 34	 lea	 ecx, DWORD PTR $T102609[esp+784]
  00d05	c7 44 24 18 0f
	00 00 00	 mov	 DWORD PTR $T102620[esp+784], 15 ; 0000000fH
  00d0d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00d12	50		 push	 eax
  00d13	8d 84 24 88 00
	00 00		 lea	 eax, DWORD PTR $T102610[esp+784]
  00d1a	50		 push	 eax
  00d1b	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00d20	83 c4 0c	 add	 esp, 12			; 0000000cH
  00d23	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00d27	72 05		 jb	 SHORT $LN108@PageDialog
  00d29	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00d2c	eb 03		 jmp	 SHORT $LN109@PageDialog
$LN108@PageDialog:
  00d2e	83 c0 04	 add	 eax, 4
$LN109@PageDialog:
  00d31	6a 00		 push	 0
  00d33	50		 push	 eax
  00d34	e8 00 00 00 00	 call	 __access
  00d39	83 c4 08	 add	 esp, 8
  00d3c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bForAllUsers, 0
  00d46	85 c0		 test	 eax, eax
  00d48	75 0a		 jne	 SHORT $LN86@PageDialog
$LN85@PageDialog:
  00d4a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bForAllUsers, 1
$LN86@PageDialog:
  00d54	f6 44 24 10 08	 test	 BYTE PTR $T102620[esp+776], 8
  00d59	74 11		 je	 SHORT $LN94@PageDialog
  00d5b	83 64 24 10 f7	 and	 DWORD PTR $T102620[esp+776], -9 ; fffffff7H
  00d60	8d 8c 24 80 00
	00 00		 lea	 ecx, DWORD PTR $T102610[esp+776]
  00d67	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN94@PageDialog:
  00d6c	f6 44 24 10 04	 test	 BYTE PTR $T102620[esp+776], 4
  00d71	74 0e		 je	 SHORT $LN95@PageDialog
  00d73	83 64 24 10 fb	 and	 DWORD PTR $T102620[esp+776], -5 ; fffffffbH
  00d78	8d 4c 24 2c	 lea	 ecx, DWORD PTR $T102609[esp+776]
  00d7c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN95@PageDialog:
  00d81	f6 44 24 10 02	 test	 BYTE PTR $T102620[esp+776], 2
  00d86	74 0e		 je	 SHORT $LN96@PageDialog
  00d88	83 64 24 10 fd	 and	 DWORD PTR $T102620[esp+776], -3 ; fffffffdH
  00d8d	8d 4c 24 48	 lea	 ecx, DWORD PTR $T102608[esp+776]
  00d91	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN96@PageDialog:
  00d96	f6 44 24 10 01	 test	 BYTE PTR $T102620[esp+776], 1
  00d9b	74 09		 je	 SHORT $LN97@PageDialog
  00d9d	8d 4c 24 64	 lea	 ecx, DWORD PTR $T102607[esp+776]
  00da1	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN97@PageDialog:

; 424  : 
; 425  : 					/* Determine bRegisterFileExt state. */
; 426  : 					HKEY hKey = 0;
; 427  : 					if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, "Software\\Classes\\TrueCryptVolume", 0, KEY_READ, &hKey) == ERROR_SUCCESS)

  00da6	8d 4c 24 14	 lea	 ecx, DWORD PTR _hKey$95735[esp+776]
  00daa	51		 push	 ecx
  00dab	68 19 00 02 00	 push	 131097			; 00020019H
  00db0	6a 00		 push	 0
  00db2	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@JOIIBOEC@Software?2Classes?2TrueCryptVolume@
  00db7	68 02 00 00 80	 push	 -2147483646		; 80000002H
  00dbc	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR _hKey$95735[esp+796], 0
  00dc4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  00dca	85 c0		 test	 eax, eax
  00dcc	75 22		 jne	 SHORT $LN56@PageDialog

; 428  : 					{
; 429  : 						RegCloseKey(hKey);

  00dce	8b 54 24 14	 mov	 edx, DWORD PTR _hKey$95735[esp+776]
  00dd2	52		 push	 edx
  00dd3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4

; 430  : 						EnableWindow (GetDlgItem (hwndDlg, IDC_FILE_TYPE), FALSE);

  00dd9	6a 00		 push	 0
  00ddb	68 f0 03 00 00	 push	 1008			; 000003f0H
  00de0	56		 push	 esi
  00de1	ff d7		 call	 edi
  00de3	50		 push	 eax
  00de4	ff d5		 call	 ebp

; 431  : 						bRegisterFileExt = TRUE;

  00de6	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bRegisterFileExt, 1
$LN56@PageDialog:

; 432  : 					}
; 433  : 				}
; 434  : 
; 435  : 				// System Restore
; 436  : 				SetCheckBox (hwndDlg, IDC_SYSTEM_RESTORE, bSystemRestore);

  00df0	a1 00 00 00 00	 mov	 eax, DWORD PTR _bSystemRestore
  00df5	50		 push	 eax
  00df6	68 f3 03 00 00	 push	 1011			; 000003f3H
  00dfb	56		 push	 esi
  00dfc	e8 00 00 00 00	 call	 _SetCheckBox

; 437  : 				if (SystemRestoreDll == 0)

  00e01	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SystemRestoreDll
  00e07	83 c4 0c	 add	 esp, 12			; 0000000cH
  00e0a	85 c9		 test	 ecx, ecx
  00e0c	75 1c		 jne	 SHORT $LN55@PageDialog

; 438  : 				{
; 439  : 					SetCheckBox (hwndDlg, IDC_SYSTEM_RESTORE, FALSE);

  00e0e	51		 push	 ecx
  00e0f	68 f3 03 00 00	 push	 1011			; 000003f3H
  00e14	56		 push	 esi
  00e15	e8 00 00 00 00	 call	 _SetCheckBox
  00e1a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 440  : 					EnableWindow (GetDlgItem (hwndDlg, IDC_SYSTEM_RESTORE), FALSE);

  00e1d	6a 00		 push	 0
  00e1f	68 f3 03 00 00	 push	 1011			; 000003f3H
  00e24	56		 push	 esi
  00e25	ff d7		 call	 edi
  00e27	50		 push	 eax
  00e28	ff d5		 call	 ebp
$LN55@PageDialog:

; 441  : 				}
; 442  : 
; 443  : 				SetCheckBox (hwndDlg, IDC_ALL_USERS, bForAllUsers);

  00e2a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bForAllUsers
  00e30	52		 push	 edx
  00e31	68 f5 03 00 00	 push	 1013			; 000003f5H
  00e36	56		 push	 esi
  00e37	e8 00 00 00 00	 call	 _SetCheckBox

; 444  : 				SetCheckBox (hwndDlg, IDC_FILE_TYPE, bRegisterFileExt);

  00e3c	a1 00 00 00 00	 mov	 eax, DWORD PTR _bRegisterFileExt
  00e41	50		 push	 eax
  00e42	68 f0 03 00 00	 push	 1008			; 000003f0H
  00e47	56		 push	 esi
  00e48	e8 00 00 00 00	 call	 _SetCheckBox

; 445  : 				SetCheckBox (hwndDlg, IDC_PROG_GROUP, bAddToStartMenu);

  00e4d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bAddToStartMenu
  00e53	51		 push	 ecx
  00e54	68 f2 03 00 00	 push	 1010			; 000003f2H
  00e59	56		 push	 esi
  00e5a	e8 00 00 00 00	 call	 _SetCheckBox

; 446  : 				SetCheckBox (hwndDlg, IDC_DESKTOP_ICON, bDesktopIcon);

  00e5f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bDesktopIcon
  00e65	52		 push	 edx
  00e66	68 f4 03 00 00	 push	 1012			; 000003f4H
  00e6b	56		 push	 esi
  00e6c	e8 00 00 00 00	 call	 _SetCheckBox
  00e71	83 c4 30	 add	 esp, 48			; 00000030H

; 447  : 
; 448  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString (bUpgrade ? "UPGRADE" : "INSTALL"));

  00e74	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bUpgrade, 0
  00e7b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07CNHFDDPI@UPGRADE?$AA@
  00e80	75 05		 jne	 SHORT $LN88@PageDialog
  00e82	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07PJFGKPND@INSTALL?$AA@
$LN88@PageDialog:
  00e87	50		 push	 eax
  00e88	e8 00 00 00 00	 call	 _GetString
  00e8d	83 c4 04	 add	 esp, 4
  00e90	50		 push	 eax
  00e91	68 02 04 00 00	 push	 1026			; 00000402H
  00e96	56		 push	 esi
  00e97	ff d3		 call	 ebx
  00e99	50		 push	 eax
  00e9a	ff d7		 call	 edi
  00e9c	50		 push	 eax
  00e9d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 449  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  00ea3	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  00ea8	e8 00 00 00 00	 call	 _GetString
  00ead	83 c4 04	 add	 esp, 4
  00eb0	50		 push	 eax
  00eb1	68 03 04 00 00	 push	 1027			; 00000403H
  00eb6	56		 push	 esi
  00eb7	ff d3		 call	 ebx
  00eb9	50		 push	 eax
  00eba	ff d7		 call	 edi
  00ebc	50		 push	 eax
  00ebd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 450  : 
; 451  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDHELP), TRUE);

  00ec3	6a 01		 push	 1
  00ec5	6a 09		 push	 9
  00ec7	56		 push	 esi
  00ec8	ff d3		 call	 ebx
  00eca	50		 push	 eax
  00ecb	ff d7		 call	 edi
  00ecd	50		 push	 eax
  00ece	ff d5		 call	 ebp

; 452  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  00ed0	6a 01		 push	 1
  00ed2	68 03 04 00 00	 push	 1027			; 00000403H
  00ed7	56		 push	 esi
  00ed8	ff d3		 call	 ebx
  00eda	50		 push	 eax
  00edb	ff d7		 call	 edi
  00edd	50		 push	 eax
  00ede	ff d5		 call	 ebp

; 453  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  00ee0	6a 01		 push	 1
  00ee2	68 02 04 00 00	 push	 1026			; 00000402H
  00ee7	56		 push	 esi
  00ee8	ff d3		 call	 ebx
  00eea	50		 push	 eax
  00eeb	ff d7		 call	 edi
  00eed	50		 push	 eax
  00eee	ff d5		 call	 ebp

; 454  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), TRUE);

  00ef0	6a 01		 push	 1
  00ef2	6a 02		 push	 2
  00ef4	56		 push	 esi
  00ef5	ff d3		 call	 ebx
  00ef7	50		 push	 eax
  00ef8	ff d7		 call	 edi
  00efa	50		 push	 eax
  00efb	ff d5		 call	 ebp

; 455  : 			}
; 456  : 			return 1;

  00efd	b8 01 00 00 00	 mov	 eax, 1
  00f02	e9 7e 03 00 00	 jmp	 $LN130@PageDialog
$LN54@PageDialog:

; 457  : 
; 458  : 		case INSTALL_PROGRESS_PAGE:
; 459  : 
; 460  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SETUP_PROGRESS_TITLE"));

  00f07	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FGINDNOJ@SETUP_PROGRESS_TITLE?$AA@
  00f0c	e8 00 00 00 00	 call	 _GetString
  00f11	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  00f17	83 c4 04	 add	 esp, 4
  00f1a	50		 push	 eax
  00f1b	68 e9 03 00 00	 push	 1001			; 000003e9H
  00f20	56		 push	 esi
  00f21	ff d7		 call	 edi
  00f23	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__GetDlgItem@8
  00f29	50		 push	 eax
  00f2a	ff d5		 call	 ebp
  00f2c	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetWindowTextW@8
  00f32	50		 push	 eax
  00f33	ff d3		 call	 ebx

; 461  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_INFO), GetString ("SETUP_PROGRESS_INFO"));

  00f35	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JGHDAHN@SETUP_PROGRESS_INFO?$AA@
  00f3a	e8 00 00 00 00	 call	 _GetString
  00f3f	83 c4 04	 add	 esp, 4
  00f42	50		 push	 eax
  00f43	68 eb 03 00 00	 push	 1003			; 000003ebH
  00f48	56		 push	 esi
  00f49	ff d7		 call	 edi
  00f4b	50		 push	 eax
  00f4c	ff d5		 call	 ebp
  00f4e	50		 push	 eax
  00f4f	ff d3		 call	 ebx

; 462  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  00f51	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00f56	e8 00 00 00 00	 call	 _GetString
  00f5b	83 c4 04	 add	 esp, 4
  00f5e	50		 push	 eax
  00f5f	68 02 04 00 00	 push	 1026			; 00000402H
  00f64	56		 push	 esi
  00f65	ff d7		 call	 edi
  00f67	50		 push	 eax
  00f68	ff d5		 call	 ebp
  00f6a	50		 push	 eax
  00f6b	ff d3		 call	 ebx

; 463  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  00f6d	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  00f72	e8 00 00 00 00	 call	 _GetString
  00f77	83 c4 04	 add	 esp, 4
  00f7a	50		 push	 eax
  00f7b	68 03 04 00 00	 push	 1027			; 00000403H
  00f80	56		 push	 esi
  00f81	ff d7		 call	 edi
  00f83	50		 push	 eax
  00f84	ff d5		 call	 ebp
  00f86	50		 push	 eax
  00f87	ff d3		 call	 ebx

; 464  : 
; 465  : 			if (bStartInstall)

  00f89	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bStartInstall@@3HA, 0 ; bStartInstall
  00f90	0f 84 ea 00 00
	00		 je	 $LN53@PageDialog

; 466  : 			{
; 467  : 				/* Start install */
; 468  : 
; 469  : 				LastDialogId = "INSTALL_IN_PROGRESS";
; 470  : 
; 471  : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  00f96	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00f9b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LastDialogId, OFFSET ??_C@_0BE@FMNDIKAG@INSTALL_IN_PROGRESS?$AA@
  00fa5	e8 00 00 00 00	 call	 _GetString
  00faa	83 c4 04	 add	 esp, 4
  00fad	50		 push	 eax
  00fae	68 02 04 00 00	 push	 1026			; 00000402H
  00fb3	56		 push	 esi
  00fb4	ff d7		 call	 edi
  00fb6	50		 push	 eax
  00fb7	ff d5		 call	 ebp
  00fb9	50		 push	 eax
  00fba	ff d3		 call	 ebx

; 472  : 
; 473  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  00fbc	6a 00		 push	 0
  00fbe	68 03 04 00 00	 push	 1027			; 00000403H
  00fc3	56		 push	 esi
  00fc4	ff d7		 call	 edi
  00fc6	50		 push	 eax
  00fc7	ff d5		 call	 ebp
  00fc9	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  00fcf	50		 push	 eax
  00fd0	ff d3		 call	 ebx

; 474  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), FALSE);

  00fd2	6a 00		 push	 0
  00fd4	68 02 04 00 00	 push	 1026			; 00000402H
  00fd9	56		 push	 esi
  00fda	ff d7		 call	 edi
  00fdc	50		 push	 eax
  00fdd	ff d5		 call	 ebp
  00fdf	50		 push	 eax
  00fe0	ff d3		 call	 ebx

; 475  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDHELP), FALSE);

  00fe2	6a 00		 push	 0
  00fe4	6a 09		 push	 9
  00fe6	56		 push	 esi
  00fe7	ff d7		 call	 edi
  00fe9	50		 push	 eax
  00fea	ff d5		 call	 ebp
  00fec	50		 push	 eax
  00fed	ff d3		 call	 ebx

; 476  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), FALSE);

  00fef	6a 00		 push	 0
  00ff1	6a 02		 push	 2
  00ff3	56		 push	 esi
  00ff4	ff d7		 call	 edi
  00ff6	50		 push	 eax
  00ff7	ff d5		 call	 ebp
  00ff9	50		 push	 eax
  00ffa	ff d3		 call	 ebx

; 477  : 
; 478  : 				InitProgressBar ();

  00ffc	e8 00 00 00 00	 call	 _InitProgressBar

; 479  : 
; 480  : 				if (WizardDestInstallPath [strlen(WizardDestInstallPath)-1] != '\\')

  01001	b8 00 00 00 00	 mov	 eax, OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  01006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  01009	8d a4 24 00 00
	00 00		 npad	 7
$LL128@PageDialog:
  01010	8a 08		 mov	 cl, BYTE PTR [eax]
  01012	40		 inc	 eax
  01013	84 c9		 test	 cl, cl
  01015	75 f9		 jne	 SHORT $LL128@PageDialog
  01017	2b c2		 sub	 eax, edx
  01019	80 b8 ff ff ff
	ff 5c		 cmp	 BYTE PTR ?WizardDestInstallPath@@3PADA[eax-1], 92 ; 0000005cH
  01020	74 17		 je	 SHORT $LN52@PageDialog

; 481  : 					strcat (WizardDestInstallPath, "\\");

  01022	bf 00 00 00 00	 mov	 edi, OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  01027	4f		 dec	 edi
$LL129@PageDialog:
  01028	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  0102b	47		 inc	 edi
  0102c	84 c0		 test	 al, al
  0102e	75 f8		 jne	 SHORT $LL129@PageDialog
  01030	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
  01036	66 89 07	 mov	 WORD PTR [edi], ax
$LN52@PageDialog:

; 482  : 
; 483  : 				strcpy_s (InstallationPath, sizeof(InstallationPath), WizardDestInstallPath);

  01039	68 00 00 00 00	 push	 OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  0103e	68 04 01 00 00	 push	 260			; 00000104H
  01043	68 00 00 00 00	 push	 OFFSET _InstallationPath
  01048	e8 00 00 00 00	 call	 _strcpy_s

; 484  : 
; 485  : 				WaitCursor ();

  0104d	e8 00 00 00 00	 call	 _WaitCursor

; 486  : 
; 487  : 				bInProgress = TRUE;
; 488  : 				bStartInstall = FALSE;
; 489  : 
; 490  : 				_beginthread (DoInstall, 0, (void *) hwndDlg);

  01052	56		 push	 esi
  01053	6a 00		 push	 0
  01055	68 00 00 00 00	 push	 OFFSET _DoInstall
  0105a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bInProgress@@3HA, 1 ; bInProgress
  01064	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bStartInstall@@3HA, 0 ; bStartInstall
  0106e	e8 00 00 00 00	 call	 __beginthread
  01073	83 c4 18	 add	 esp, 24			; 00000018H

; 500  : 
; 501  : 			}
; 502  : 
; 503  : 			return 1;

  01076	b8 01 00 00 00	 mov	 eax, 1
  0107b	e9 05 02 00 00	 jmp	 $LN130@PageDialog
$LN53@PageDialog:

; 491  : 			}
; 492  : 			else
; 493  : 			{
; 494  : 				NormalCursor ();

  01080	e8 00 00 00 00	 call	 _NormalCursor

; 495  : 
; 496  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  01085	6a 01		 push	 1
  01087	68 03 04 00 00	 push	 1027			; 00000403H
  0108c	56		 push	 esi
  0108d	ff d7		 call	 edi
  0108f	50		 push	 eax
  01090	ff d5		 call	 ebp
  01092	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  01098	50		 push	 eax
  01099	ff d3		 call	 ebx

; 497  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  0109b	6a 01		 push	 1
  0109d	68 02 04 00 00	 push	 1026			; 00000402H
  010a2	56		 push	 esi
  010a3	ff d7		 call	 edi
  010a5	50		 push	 eax
  010a6	ff d5		 call	 ebp
  010a8	50		 push	 eax
  010a9	ff d3		 call	 ebx

; 498  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDHELP), TRUE);

  010ab	6a 01		 push	 1
  010ad	6a 09		 push	 9
  010af	56		 push	 esi
  010b0	ff d7		 call	 edi
  010b2	50		 push	 eax
  010b3	ff d5		 call	 ebp
  010b5	50		 push	 eax
  010b6	ff d3		 call	 ebx

; 499  : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), TRUE);

  010b8	6a 01		 push	 1
  010ba	6a 02		 push	 2
  010bc	56		 push	 esi
  010bd	ff d7		 call	 edi
  010bf	50		 push	 eax
  010c0	ff d5		 call	 ebp
  010c2	50		 push	 eax
  010c3	ff d3		 call	 ebx

; 500  : 
; 501  : 			}
; 502  : 
; 503  : 			return 1;

  010c5	b8 01 00 00 00	 mov	 eax, 1
  010ca	e9 b6 01 00 00	 jmp	 $LN130@PageDialog
$LN50@PageDialog:

; 504  : 
; 505  : 		case DONATIONS_PAGE:
; 506  : 
; 507  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString (bExtractOnly ? "EXTRACTION_FINISHED_TITLE_DON" : (bUpgrade ? "SETUP_FINISHED_UPGRADE_TITLE_DON" : "SETUP_FINISHED_TITLE_DON")));

  010cf	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bExtractOnly@@3HA, ebx ; bExtractOnly
  010d5	74 07		 je	 SHORT $LN91@PageDialog
  010d7	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BO@CCIEODIN@EXTRACTION_FINISHED_TITLE_DON?$AA@
  010dc	eb 12		 jmp	 SHORT $LN90@PageDialog
$LN91@PageDialog:
  010de	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CB@HFOJNJFM@SETUP_FINISHED_UPGRADE_TITLE_DON@
  010e3	39 1d 00 00 00
	00		 cmp	 DWORD PTR _bUpgrade, ebx
  010e9	75 05		 jne	 SHORT $LN90@PageDialog
  010eb	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BJ@KIEFKBPA@SETUP_FINISHED_TITLE_DON?$AA@
$LN90@PageDialog:
  010f0	50		 push	 eax
  010f1	e8 00 00 00 00	 call	 _GetString
  010f6	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  010fc	83 c4 04	 add	 esp, 4
  010ff	50		 push	 eax
  01100	68 e9 03 00 00	 push	 1001			; 000003e9H
  01105	56		 push	 esi
  01106	ff d7		 call	 edi
  01108	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__GetDlgItem@8
  0110e	50		 push	 eax
  0110f	ff d5		 call	 ebp
  01111	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetWindowTextW@8
  01117	50		 push	 eax
  01118	ff d3		 call	 ebx

; 508  : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_INFO), GetString ("SETUP_FINISHED_INFO_DON"));

  0111a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CKIDBLFB@SETUP_FINISHED_INFO_DON?$AA@
  0111f	e8 00 00 00 00	 call	 _GetString
  01124	83 c4 04	 add	 esp, 4
  01127	50		 push	 eax
  01128	68 eb 03 00 00	 push	 1003			; 000003ebH
  0112d	56		 push	 esi
  0112e	ff d7		 call	 edi
  01130	50		 push	 eax
  01131	ff d5		 call	 ebp
  01133	50		 push	 eax
  01134	ff d3		 call	 ebx

; 509  : 
; 510  : 			DonText = L"Please consider making a donation.";

  01136	68 00 00 00 00	 push	 OFFSET ??_C@_1EG@KKLJGMFD@?$AAP?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAc?$AAo?$AAn?$AAs?$AAi?$AAd?$AAe?$AAr?$AA?5?$AAm?$AAa?$AAk?$AAi?$AAn?$AAg?$AA?5?$AAa?$AA?5?$AAd?$AAo?$AAn?$AAa?$AAt?$AAi?$AAo@
  0113b	b9 00 00 00 00	 mov	 ecx, OFFSET ?DonText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A ; DonText
  01140	e8 00 00 00 00	 call	 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=

; 511  : 
; 512  : 
; 513  : 			// Colors
; 514  : 
; 515  : 			switch (DonColorSchemeId)

  01145	a1 00 00 00 00	 mov	 eax, DWORD PTR _DonColorSchemeId
  0114a	83 c0 fd	 add	 eax, -3			; fffffffdH
  0114d	83 f8 06	 cmp	 eax, 6
  01150	77 77		 ja	 SHORT $LN48@PageDialog
  01152	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN136@PageDialog[eax*4]
$LN46@PageDialog:

; 516  : 			{
; 517  : 			case 2:
; 518  : 				// NOP - Default OS colors (foreground and background)
; 519  : 				break;
; 520  : 
; 521  : 			case 3:
; 522  : 				// Red
; 523  : 				DonTextColor = RGB (255, 255, 255);
; 524  : 				DonBkgColor = RGB (255, 0, 0);

  01159	c7 05 00 00 00
	00 ff 00 00 00	 mov	 DWORD PTR _DonBkgColor, 255 ; 000000ffH

; 525  : 				break;

  01163	eb 5a		 jmp	 SHORT $LN132@PageDialog
$LN45@PageDialog:

; 526  : 
; 527  : 			case 4:
; 528  : 				// Yellow
; 529  : 				DonTextColor = RGB (255, 15, 49);

  01165	c7 05 00 00 00
	00 ff 0f 31 00	 mov	 DWORD PTR _DonTextColor, 3215359 ; 00310fffH

; 530  : 				DonBkgColor = RGB (255, 255, 0);

  0116f	c7 05 00 00 00
	00 ff ff 00 00	 mov	 DWORD PTR _DonBkgColor, 65535 ; 0000ffffH

; 531  : 				break;

  01179	eb 4e		 jmp	 SHORT $LN48@PageDialog
$LN44@PageDialog:

; 532  : 
; 533  : 			case 5:
; 534  : 				// Light red
; 535  : 				DonTextColor = RGB (255, 255, 255);
; 536  : 				DonBkgColor = RGB (255, 141, 144);

  0117b	c7 05 00 00 00
	00 ff 8d 90 00	 mov	 DWORD PTR _DonBkgColor, 9473535 ; 00908dffH

; 537  : 				break;

  01185	eb 38		 jmp	 SHORT $LN132@PageDialog
$LN43@PageDialog:

; 538  : 
; 539  : 			case 6:
; 540  : 				// Pink
; 541  : 				DonTextColor = RGB (255, 255, 255);
; 542  : 				DonBkgColor = RGB (248, 148, 207);

  01187	c7 05 00 00 00
	00 f8 94 cf 00	 mov	 DWORD PTR _DonBkgColor, 13604088 ; 00cf94f8H

; 543  : 				break;

  01191	eb 2c		 jmp	 SHORT $LN132@PageDialog
$LN42@PageDialog:

; 544  : 
; 545  : 			case 7:
; 546  : 				// White + red text
; 547  : 				DonTextColor = RGB (255, 15, 49);

  01193	c7 05 00 00 00
	00 ff 0f 31 00	 mov	 DWORD PTR _DonTextColor, 3215359 ; 00310fffH

; 548  : 				DonBkgColor = RGB (255, 255, 255);

  0119d	c7 05 00 00 00
	00 ff ff ff 00	 mov	 DWORD PTR _DonBkgColor, 16777215 ; 00ffffffH

; 549  : 				break;

  011a7	eb 20		 jmp	 SHORT $LN48@PageDialog
$LN41@PageDialog:

; 550  : 
; 551  : 			case 8:
; 552  : 				// Blue
; 553  : 				DonTextColor = RGB (255, 255, 255);
; 554  : 				DonBkgColor = RGB (54, 140, 255);

  011a9	c7 05 00 00 00
	00 36 8c ff 00	 mov	 DWORD PTR _DonBkgColor, 16747574 ; 00ff8c36H

; 555  : 				break;

  011b3	eb 0a		 jmp	 SHORT $LN132@PageDialog
$LN40@PageDialog:

; 560  : 				DonBkgColor = RGB (70, 180, 80);

  011b5	c7 05 00 00 00
	00 46 b4 50 00	 mov	 DWORD PTR _DonBkgColor, 5289030 ; 0050b446H
$LN132@PageDialog:

; 556  : 
; 557  : 			case 9:
; 558  : 				// Green
; 559  : 				DonTextColor = RGB (255, 255, 255);

  011bf	c7 05 00 00 00
	00 ff ff ff 00	 mov	 DWORD PTR _DonTextColor, 16777215 ; 00ffffffH
$LN48@PageDialog:

; 561  : 				break;
; 562  : 			}
; 563  : 
; 564  : 			{
; 565  : 				// Font
; 566  : 
; 567  : 				LOGFONTW lf;
; 568  : 				memset (&lf, 0, sizeof(lf));

  011c9	6a 5c		 push	 92			; 0000005cH
  011cb	33 f6		 xor	 esi, esi
  011cd	8d 8c 24 a0 00
	00 00		 lea	 ecx, DWORD PTR _lf$95853[esp+780]
  011d4	56		 push	 esi
  011d5	51		 push	 ecx
  011d6	e8 00 00 00 00	 call	 _memset

; 569  : 
; 570  : 				// Main font
; 571  : 				wcsncpy (lf.lfFaceName, L"Times New Roman", sizeof (lf.lfFaceName)/2);

  011db	6a 20		 push	 32			; 00000020H
  011dd	8d 94 24 c8 00
	00 00		 lea	 edx, DWORD PTR _lf$95853[esp+820]
  011e4	68 00 00 00 00	 push	 OFFSET ??_C@_1CA@MBPOLHGL@?$AAT?$AAi?$AAm?$AAe?$AAs?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAR?$AAo?$AAm?$AAa?$AAn?$AA?$AA@
  011e9	52		 push	 edx
  011ea	e8 00 00 00 00	 call	 _wcsncpy

; 572  : 				lf.lfHeight = CompensateDPIFont (-21);

  011ef	6a eb		 push	 -21			; ffffffebH
  011f1	e8 00 00 00 00	 call	 _CompensateDPIFont
  011f6	89 84 24 b8 00
	00 00		 mov	 DWORD PTR _lf$95853[esp+804], eax
  011fd	83 c4 1c	 add	 esp, 28			; 0000001cH

; 573  : 				lf.lfWeight = FW_NORMAL;
; 574  : 				lf.lfWidth = 0;
; 575  : 				lf.lfEscapement = 0;
; 576  : 				lf.lfOrientation = 0;
; 577  : 				lf.lfItalic = FALSE;
; 578  : 				lf.lfUnderline = FALSE;
; 579  : 				lf.lfStrikeOut = FALSE;
; 580  : 				lf.lfCharSet = DEFAULT_CHARSET;
; 581  : 				lf.lfOutPrecision = OUT_DEFAULT_PRECIS;
; 582  : 				lf.lfClipPrecision = CLIP_DEFAULT_PRECIS;
; 583  : 				lf.lfQuality = PROOF_QUALITY;
; 584  : 				lf.lfPitchAndFamily = FF_DONTCARE;
; 585  : 				hDonTextFont = CreateFontIndirectW (&lf);

  01200	8d 84 24 9c 00
	00 00		 lea	 eax, DWORD PTR _lf$95853[esp+776]
  01207	50		 push	 eax
  01208	c7 84 24 b0 00
	00 00 90 01 00
	00		 mov	 DWORD PTR _lf$95853[esp+796], 400 ; 00000190H
  01213	89 b4 24 a4 00
	00 00		 mov	 DWORD PTR _lf$95853[esp+784], esi
  0121a	89 b4 24 a8 00
	00 00		 mov	 DWORD PTR _lf$95853[esp+788], esi
  01221	89 b4 24 ac 00
	00 00		 mov	 DWORD PTR _lf$95853[esp+792], esi
  01228	c6 84 24 b4 00
	00 00 00	 mov	 BYTE PTR _lf$95853[esp+800], 0
  01230	c6 84 24 b5 00
	00 00 00	 mov	 BYTE PTR _lf$95853[esp+801], 0
  01238	c6 84 24 b6 00
	00 00 00	 mov	 BYTE PTR _lf$95853[esp+802], 0
  01240	c6 84 24 b7 00
	00 00 01	 mov	 BYTE PTR _lf$95853[esp+803], 1
  01248	c6 84 24 b8 00
	00 00 00	 mov	 BYTE PTR _lf$95853[esp+804], 0
  01250	c6 84 24 b9 00
	00 00 00	 mov	 BYTE PTR _lf$95853[esp+805], 0
  01258	c6 84 24 ba 00
	00 00 02	 mov	 BYTE PTR _lf$95853[esp+806], 2
  01260	c6 84 24 bb 00
	00 00 00	 mov	 BYTE PTR _lf$95853[esp+807], 0
  01268	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFontIndirectW@4
  0126e	a3 00 00 00 00	 mov	 DWORD PTR _hDonTextFont, eax

; 586  : 
; 587  : 				if (hDonTextFont == NULL)

  01273	3b c6		 cmp	 eax, esi
  01275	75 05		 jne	 SHORT $LN39@PageDialog

; 588  : 					AbortProcessSilent ();

  01277	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN39@PageDialog:

; 589  : 			}
; 590  : 
; 591  : 			return 1;

  0127c	b8 01 00 00 00	 mov	 eax, 1
  01281	eb 02		 jmp	 SHORT $LN130@PageDialog
$LN74@PageDialog:

; 592  : 		}
; 593  : 
; 594  : 		return 0;

  01283	33 c0		 xor	 eax, eax
$LN130@PageDialog:
  01285	5d		 pop	 ebp
$LN79@PageDialog:

; 782  : }

  01286	8b 8c 24 00 03
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+772]
  0128d	5f		 pop	 edi
  0128e	5e		 pop	 esi
  0128f	5b		 pop	 ebx
  01290	33 cc		 xor	 ecx, esp
  01292	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01297	81 c4 f8 02 00
	00		 add	 esp, 760		; 000002f8H
  0129d	c2 10 00	 ret	 16			; 00000010H
$LN131@PageDialog:
$LN134@PageDialog:
  012a0	00 00 00 00	 DD	 $LN19@PageDialog
  012a4	00 00 00 00	 DD	 $LN9@PageDialog
  012a8	00 00 00 00	 DD	 $LN9@PageDialog
  012ac	00 00 00 00	 DD	 $LN9@PageDialog
  012b0	00 00 00 00	 DD	 $LN9@PageDialog
  012b4	00 00 00 00	 DD	 $LN9@PageDialog
  012b8	00 00 00 00	 DD	 $LN14@PageDialog
  012bc	00 00 00 00	 DD	 $LN9@PageDialog
  012c0	00 00 00 00	 DD	 $LN13@PageDialog
  012c4	00 00 00 00	 DD	 $LN16@PageDialog
  012c8	00 00 00 00	 DD	 $LN12@PageDialog
  012cc	00 00 00 00	 DD	 $LN15@PageDialog
$LN135@PageDialog:
  012d0	00 00 00 00	 DD	 $LN73@PageDialog
  012d4	00 00 00 00	 DD	 $LN70@PageDialog
  012d8	00 00 00 00	 DD	 $LN59@PageDialog
  012dc	00 00 00 00	 DD	 $LN54@PageDialog
  012e0	00 00 00 00	 DD	 $LN65@PageDialog
  012e4	00 00 00 00	 DD	 $LN63@PageDialog
  012e8	00 00 00 00	 DD	 $LN50@PageDialog
$LN136@PageDialog:
  012ec	00 00 00 00	 DD	 $LN46@PageDialog
  012f0	00 00 00 00	 DD	 $LN45@PageDialog
  012f4	00 00 00 00	 DD	 $LN44@PageDialog
  012f8	00 00 00 00	 DD	 $LN43@PageDialog
  012fc	00 00 00 00	 DD	 $LN42@PageDialog
  01300	00 00 00 00	 DD	 $LN41@PageDialog
  01304	00 00 00 00	 DD	 $LN40@PageDialog
_PageDialogProc@16 ENDP
_TEXT	ENDS
PUBLIC	?LoadPage@@YAXPAUHWND__@@H@Z			; LoadPage
EXTRN	__imp__MoveWindow@24:PROC
EXTRN	__imp__MapDialogRect@8:PROC
EXTRN	__imp__CreateDialogParamW@20:PROC
EXTRN	_hInst:DWORD
EXTRN	__imp__GetWindowRect@8:PROC
EXTRN	__imp__DestroyWindow@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?LoadPage@@YAXPAUHWND__@@H@Z
_TEXT	SEGMENT
_rD$ = -32						; size = 16
_rW$ = -16						; size = 16
_hwndDlg$ = 8						; size = 4
_nPageNo$ = 12						; size = 4
?LoadPage@@YAXPAUHWND__@@H@Z PROC			; LoadPage, COMDAT

; 118  : 	RECT rD, rW;
; 119  : 
; 120  : 	if (hCurPage != NULL)

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00005	83 ec 20	 sub	 esp, 32			; 00000020H
  00008	85 c0		 test	 eax, eax
  0000a	74 07		 je	 SHORT $LN11@LoadPage

; 121  : 	{
; 122  : 		DestroyWindow (hCurPage);

  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
$LN11@LoadPage:

; 123  : 	}
; 124  : 
; 125  : 	InvalidateRect (GetDlgItem (MainDlg, IDC_MAIN_CONTENT_CANVAS), NULL, TRUE);

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00020	6a 01		 push	 1
  00022	6a 00		 push	 0
  00024	68 07 04 00 00	 push	 1031			; 00000407H
  00029	50		 push	 eax
  0002a	ff d7		 call	 edi
  0002c	50		 push	 eax
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12

; 126  : 
; 127  : 	GetWindowRect (GetDlgItem (hwndDlg, IDC_POS_BOX), &rW);

  00033	8b 74 24 2c	 mov	 esi, DWORD PTR _hwndDlg$[esp+36]
  00037	8d 4c 24 18	 lea	 ecx, DWORD PTR _rW$[esp+40]
  0003b	51		 push	 ecx
  0003c	68 05 04 00 00	 push	 1029			; 00000405H
  00041	56		 push	 esi
  00042	ff d7		 call	 edi
  00044	50		 push	 eax
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 128  : 
; 129  : 	nCurPageNo = nPageNo;

  0004b	8b 44 24 30	 mov	 eax, DWORD PTR _nPageNo$[esp+36]
  0004f	a3 00 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, eax ; nCurPageNo

; 130  : 
; 131  : 	switch (nPageNo)

  00054	83 f8 06	 cmp	 eax, 6
  00057	0f 87 85 00 00
	00		 ja	 $LN9@LoadPage
  0005d	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN16@LoadPage[eax*4]
$LN8@LoadPage:

; 132  : 	{
; 133  : 	case INTRO_PAGE:
; 134  : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INTRO_PAGE_DLG), hwndDlg,
; 135  : 					 (DLGPROC) PageDialogProc);

  00064	6a 00		 push	 0
  00066	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0006b	56		 push	 esi
  0006c	6a 6c		 push	 108			; 0000006cH

; 136  : 		break;

  0006e	eb 60		 jmp	 SHORT $LN14@LoadPage
$LN7@LoadPage:

; 137  : 
; 138  : 	case WIZARD_MODE_PAGE:
; 139  : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_WIZARD_MODE_PAGE_DLG), hwndDlg,
; 140  : 					 (DLGPROC) PageDialogProc);

  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  00075	6a 00		 push	 0
  00077	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0007c	56		 push	 esi
  0007d	6a 70		 push	 112			; 00000070H
  0007f	50		 push	 eax

; 141  : 		break;

  00080	eb 55		 jmp	 SHORT $LN15@LoadPage
$LN6@LoadPage:

; 142  : 
; 143  : 	case INSTALL_OPTIONS_PAGE:
; 144  : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INSTALL_OPTIONS_PAGE_DLG), hwndDlg,
; 145  : 					 (DLGPROC) PageDialogProc);

  00082	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00088	6a 00		 push	 0
  0008a	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0008f	56		 push	 esi
  00090	6a 66		 push	 102			; 00000066H
  00092	51		 push	 ecx

; 146  : 		break;

  00093	eb 42		 jmp	 SHORT $LN15@LoadPage
$LN5@LoadPage:

; 147  : 
; 148  : 	case INSTALL_PROGRESS_PAGE:
; 149  : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_PROGRESS_PAGE_DLG), hwndDlg,
; 150  : 					 (DLGPROC) PageDialogProc);

  00095	6a 00		 push	 0
  00097	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0009c	56		 push	 esi
  0009d	6a 71		 push	 113			; 00000071H

; 151  : 		break;

  0009f	eb 2f		 jmp	 SHORT $LN14@LoadPage
$LN4@LoadPage:

; 152  : 
; 153  : 	case EXTRACTION_OPTIONS_PAGE:
; 154  : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_EXTRACTION_OPTIONS_PAGE_DLG), hwndDlg,
; 155  : 					 (DLGPROC) PageDialogProc);

  000a1	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  000a6	6a 00		 push	 0
  000a8	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  000ad	56		 push	 esi
  000ae	6a 6a		 push	 106			; 0000006aH
  000b0	50		 push	 eax

; 156  : 		break;

  000b1	eb 24		 jmp	 SHORT $LN15@LoadPage
$LN3@LoadPage:

; 157  : 
; 158  : 	case EXTRACTION_PROGRESS_PAGE:
; 159  : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_PROGRESS_PAGE_DLG), hwndDlg,
; 160  : 					 (DLGPROC) PageDialogProc);

  000b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  000b9	6a 00		 push	 0
  000bb	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  000c0	56		 push	 esi
  000c1	6a 71		 push	 113			; 00000071H
  000c3	51		 push	 ecx

; 161  : 		break;

  000c4	eb 11		 jmp	 SHORT $LN15@LoadPage
$LN2@LoadPage:

; 162  : 
; 163  : 	case DONATIONS_PAGE:
; 164  : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_DONATIONS_PAGE_DLG), hwndDlg,
; 165  : 					 (DLGPROC) PageDialogProc);

  000c6	6a 00		 push	 0
  000c8	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  000cd	56		 push	 esi
  000ce	6a 72		 push	 114			; 00000072H
$LN14@LoadPage:
  000d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  000d6	52		 push	 edx
$LN15@LoadPage:
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  000dd	a3 00 00 00 00	 mov	 DWORD PTR ?hCurPage@@3PAUHWND__@@A, eax ; hCurPage
$LN9@LoadPage:

; 166  : 		break;
; 167  : 	}
; 168  : 
; 169  : 	rD.left = 15;
; 170  : 	rD.top = 45;
; 171  : 	rD.right = 0;
; 172  : 	rD.bottom = 0;
; 173  : 	MapDialogRect (hwndDlg, &rD);

  000e2	8d 44 24 08	 lea	 eax, DWORD PTR _rD$[esp+40]
  000e6	50		 push	 eax
  000e7	56		 push	 esi
  000e8	c7 44 24 10 0f
	00 00 00	 mov	 DWORD PTR _rD$[esp+48], 15 ; 0000000fH
  000f0	c7 44 24 14 2d
	00 00 00	 mov	 DWORD PTR _rD$[esp+52], 45 ; 0000002dH
  000f8	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR _rD$[esp+56], 0
  00100	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR _rD$[esp+60], 0
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8

; 174  : 
; 175  : 	if (hCurPage != NULL)

  0010e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00113	5f		 pop	 edi
  00114	5e		 pop	 esi
  00115	85 c0		 test	 eax, eax
  00117	74 33		 je	 SHORT $LN1@LoadPage

; 176  : 	{
; 177  : 		MoveWindow (hCurPage, rD.left, rD.top, rW.right - rW.left, rW.bottom - rW.top, TRUE);

  00119	8b 4c 24 1c	 mov	 ecx, DWORD PTR _rW$[esp+44]
  0011d	2b 4c 24 14	 sub	 ecx, DWORD PTR _rW$[esp+36]
  00121	8b 54 24 18	 mov	 edx, DWORD PTR _rW$[esp+40]
  00125	2b 54 24 10	 sub	 edx, DWORD PTR _rW$[esp+32]
  00129	6a 01		 push	 1
  0012b	51		 push	 ecx
  0012c	8b 4c 24 0c	 mov	 ecx, DWORD PTR _rD$[esp+44]
  00130	52		 push	 edx
  00131	8b 54 24 0c	 mov	 edx, DWORD PTR _rD$[esp+44]
  00135	51		 push	 ecx
  00136	52		 push	 edx
  00137	50		 push	 eax
  00138	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24

; 178  : 		ShowWindow (hCurPage, SW_SHOWNORMAL);

  0013e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00143	6a 01		 push	 1
  00145	50		 push	 eax
  00146	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$LN1@LoadPage:

; 179  : 	}
; 180  : 
; 181  : 	/* Refresh the graphics (white background of some texts, etc.) */
; 182  : 	RefreshUIGFX ();

  0014c	e8 00 00 00 00	 call	 _RefreshUIGFX

; 183  : }

  00151	83 c4 20	 add	 esp, 32			; 00000020H
  00154	c3		 ret	 0
  00155	8d 49 00	 npad	 3
$LN16@LoadPage:
  00158	00 00 00 00	 DD	 $LN8@LoadPage
  0015c	00 00 00 00	 DD	 $LN7@LoadPage
  00160	00 00 00 00	 DD	 $LN6@LoadPage
  00164	00 00 00 00	 DD	 $LN5@LoadPage
  00168	00 00 00 00	 DD	 $LN4@LoadPage
  0016c	00 00 00 00	 DD	 $LN3@LoadPage
  00170	00 00 00 00	 DD	 $LN2@LoadPage
?LoadPage@@YAXPAUHWND__@@H@Z ENDP			; LoadPage
_TEXT	ENDS
PUBLIC	??_C@_0BJ@LLBBBPBJ@EXTRACTION_FINISHED_INFO?$AA@ ; `string'
PUBLIC	??_C@_0P@DHOALJNC@INSTALL_FAILED?$AA@		; `string'
PUBLIC	??_C@_07CIAHAGHC@IDCLOSE?$AA@			; `string'
PUBLIC	??_C@_11LOCGONAA@?$AA?$AA@			; `string'
PUBLIC	??_C@_0BC@GODHAKFG@EXTRACTION_FAILED?$AA@	; `string'
PUBLIC	??_C@_08MFKGCNCO@FINALIZE?$AA@			; `string'
PUBLIC	??_C@_0BK@BNLHLNNA@CIPHERSHED_MIGRATION_NOTE?$AA@ ; `string'
PUBLIC	??_C@_0BC@NKLIMG@TRAVELER_UAC_NOTE?$AA@		; `string'
PUBLIC	??_C@_0BK@HICKIHM@TRAVELER_LIMITATIONS_NOTE?$AA@ ; `string'
PUBLIC	??_C@_1BBI@MKDPBCB@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAs?$AA?5?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AA?5?$AAR?$AAo?$AAl?$AAl?$AAu@ ; `string'
PUBLIC	??_C@_0DM@BHNBHIPG@SOFTWARE?2Microsoft?2Updates?2Windo@ ; `string'
PUBLIC	??_C@_1DJC@HALCKFBP@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAP?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAn?$AAo?$AAt?$AAe?$AA?5?$AAt?$AAh?$AAa?$AAt?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?5?$AAm@ ; `string'
PUBLIC	??_C@_0BH@IINJFIMH@CipherShed?5Setup?50?47?43?$AA@ ; `string'
PUBLIC	??_C@_0BI@FLNDDLDP@TC_INSTALLER_IS_RUNNING?$AA@	; `string'
PUBLIC	??_C@_0BA@ICICKJJH@CONFIRM_RESTART?$AA@		; `string'
PUBLIC	??_C@_0BL@OMDAGJAA@UPGRADE_OK_REBOOT_REQUIRED?$AA@ ; `string'
PUBLIC	??_C@_0BC@FIMNAHGL@beginnerstutorial?$AA@	; `string'
PUBLIC	??_C@_0BH@JALPBIFE@AFTER_INSTALL_TUTORIAL?$AA@	; `string'
PUBLIC	??_C@_0N@MAFEFKDE@releasenotes?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0BM@PEPDOHPE@AFTER_UPGRADE_RELEASE_NOTES?$AA@ ; `string'
PUBLIC	??_C@_04PMOCAHAA@open?$AA@			; `string'
PUBLIC	??_C@_0BH@KAHGPAJO@CONFIRM_EXIT_UNIVERSAL?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_MainDialogProc@16
EXTRN	_StatusMessage:PROC
EXTRN	__imp__GetWindowTextA@12:PROC
EXTRN	_AskWarnYesNo:PROC
EXTRN	_IsUacSupported:PROC
EXTRN	_Info:PROC
EXTRN	_ErrorDirect:PROC
EXTRN	_WarningDirect:PROC
EXTRN	_nCurrentOS:DWORD
EXTRN	__imp__PostMessageA@16:PROC
EXTRN	__imp__DialogBoxParamW@20:PROC
EXTRN	_AboutDlgProc@16:PROC
EXTRN	__imp__SetWindowPos@28:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	_RenderBitmap:PROC
EXTRN	_ScreenDPI:DWORD
EXTRN	_InitDialog:PROC
EXTRN	_AbortProcess:PROC
EXTRN	_CreateAppSetupMutex:PROC
EXTRN	__imp__GetModuleFileNameA@12:PROC
EXTRN	_RestartComputer:PROC
EXTRN	_bRestartRequired:DWORD
EXTRN	_AskYesNo:PROC
EXTRN	__imp__ShellExecuteA@24:PROC
EXTRN	_AskNoYes:PROC
EXTRN	_bDevm:DWORD
;	COMDAT ??_C@_0BJ@LLBBBPBJ@EXTRACTION_FINISHED_INFO?$AA@
CONST	SEGMENT
??_C@_0BJ@LLBBBPBJ@EXTRACTION_FINISHED_INFO?$AA@ DB 'EXTRACTION_FINISHED_'
	DB	'INFO', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DHOALJNC@INSTALL_FAILED?$AA@
CONST	SEGMENT
??_C@_0P@DHOALJNC@INSTALL_FAILED?$AA@ DB 'INSTALL_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CIAHAGHC@IDCLOSE?$AA@
CONST	SEGMENT
??_C@_07CIAHAGHC@IDCLOSE?$AA@ DB 'IDCLOSE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@?$AA?$AA@
CONST	SEGMENT
??_C@_11LOCGONAA@?$AA?$AA@ DB 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GODHAKFG@EXTRACTION_FAILED?$AA@
CONST	SEGMENT
??_C@_0BC@GODHAKFG@EXTRACTION_FAILED?$AA@ DB 'EXTRACTION_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MFKGCNCO@FINALIZE?$AA@
CONST	SEGMENT
??_C@_08MFKGCNCO@FINALIZE?$AA@ DB 'FINALIZE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BNLHLNNA@CIPHERSHED_MIGRATION_NOTE?$AA@
CONST	SEGMENT
??_C@_0BK@BNLHLNNA@CIPHERSHED_MIGRATION_NOTE?$AA@ DB 'CIPHERSHED_MIGRATIO'
	DB	'N_NOTE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NKLIMG@TRAVELER_UAC_NOTE?$AA@
CONST	SEGMENT
??_C@_0BC@NKLIMG@TRAVELER_UAC_NOTE?$AA@ DB 'TRAVELER_UAC_NOTE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HICKIHM@TRAVELER_LIMITATIONS_NOTE?$AA@
CONST	SEGMENT
??_C@_0BK@HICKIHM@TRAVELER_LIMITATIONS_NOTE?$AA@ DB 'TRAVELER_LIMITATIONS'
	DB	'_NOTE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BBI@MKDPBCB@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAs?$AA?5?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AA?5?$AAR?$AAo?$AAl?$AAl?$AAu@
CONST	SEGMENT
??_C@_1BBI@MKDPBCB@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAs?$AA?5?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AA?5?$AAR?$AAo?$AAl?$AAl?$AAu@ DB 'C'
	DB	00H, 'i', 00H, 'p', 00H, 'h', 00H, 'e', 00H, 'r', 00H, 'S', 00H
	DB	'h', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'q'
	DB	00H, 'u', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 's', 00H, ' ', 00H
	DB	'U', 00H, 'p', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' '
	DB	00H, 'R', 00H, 'o', 00H, 'l', 00H, 'l', 00H, 'u', 00H, 'p', 00H
	DB	' ', 00H, '1', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H
	DB	's', 00H, ' ', 00H, '2', 00H, '0', 00H, '0', 00H, '0', 00H, ' '
	DB	00H, 'S', 00H, 'P', 00H, '4', 00H, ' ', 00H, 't', 00H, 'o', 00H
	DB	' ', 00H, 'b', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 's'
	DB	00H, 't', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	'.', 00H, 0aH, 00H, 0aH, 00H, 'F', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, 'm', 00H, 'o', 00H, 'r', 00H, 'e', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, ',', 00H, ' ', 00H, 's', 00H
	DB	'e', 00H, 'e', 00H, ' ', 00H, 'h', 00H, 't', 00H, 't', 00H, 'p'
	DB	00H, ':', 00H, '/', 00H, '/', 00H, 's', 00H, 'u', 00H, 'p', 00H
	DB	'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, '.', 00H, 'm', 00H, 'i'
	DB	00H, 'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H
	DB	't', 00H, '.', 00H, 'c', 00H, 'o', 00H, 'm', 00H, '/', 00H, 'k'
	DB	00H, 'b', 00H, '/', 00H, '8', 00H, '9', 00H, '1', 00H, '8', 00H
	DB	'6', 00H, '1', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@BHNBHIPG@SOFTWARE?2Microsoft?2Updates?2Windo@
CONST	SEGMENT
??_C@_0DM@BHNBHIPG@SOFTWARE?2Microsoft?2Updates?2Windo@ DB 'SOFTWARE\Micr'
	DB	'osoft\Updates\Windows 2000\SP5\Update Rollup 1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DJC@HALCKFBP@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAP?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAn?$AAo?$AAt?$AAe?$AA?5?$AAt?$AAh?$AAa?$AAt?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?5?$AAm@
CONST	SEGMENT
??_C@_1DJC@HALCKFBP@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAP?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAn?$AAo?$AAt?$AAe?$AA?5?$AAt?$AAh?$AAa?$AAt?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?5?$AAm@ DB 'W'
	DB	00H, 'a', 00H, 'r', 00H, 'n', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	':', 00H, ' ', 00H, 'P', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's'
	DB	00H, 'e', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, 'e', 00H
	DB	' ', 00H, 't', 00H, 'h', 00H, 'a', 00H, 't', 00H, ' ', 00H, 't'
	DB	00H, 'h', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'm', 00H, 'a', 00H
	DB	'y', 00H, ' ', 00H, 'b', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h'
	DB	00H, 'e', 00H, ' ', 00H, 'l', 00H, 'a', 00H, 's', 00H, 't', 00H
	DB	' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'C', 00H
	DB	'i', 00H, 'p', 00H, 'h', 00H, 'e', 00H, 'r', 00H, 'S', 00H, 'h'
	DB	00H, 'e', 00H, 'd', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'a', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'o'
	DB	00H, 'r', 00H, 't', 00H, 's', 00H, ' ', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's', 00H, ' ', 00H, '2'
	DB	00H, '0', 00H, '0', 00H, '0', 00H, '.', 00H, ' ', 00H, 'I', 00H
	DB	'f', 00H, ' ', 00H, 'y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'w'
	DB	00H, 'a', 00H, 'n', 00H, 't', 00H, ' ', 00H, 't', 00H, 'o', 00H
	DB	' ', 00H, 'b', 00H, 'e', 00H, ' ', 00H, 'a', 00H, 'b', 00H, 'l'
	DB	00H, 'e', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'u', 00H
	DB	'p', 00H, 'g', 00H, 'r', 00H, 'a', 00H, 'd', 00H, 'e', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'f', 00H, 'u', 00H, 't', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r'
	DB	00H, 's', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 's', 00H, ' ', 00H
	DB	'o', 00H, 'f', 00H, ' ', 00H, 'C', 00H, 'i', 00H, 'p', 00H, 'h'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 'h', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, '(', 00H, 'w', 00H, 'h', 00H, 'i', 00H, 'c', 00H, 'h'
	DB	00H, ' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'h', 00H, 'i', 00H
	DB	'g', 00H, 'h', 00H, 'l', 00H, 'y', 00H, ' ', 00H, 'r', 00H, 'e'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, 'e', 00H, 'd', 00H, ')', 00H, ',', 00H, ' ', 00H, 'y'
	DB	00H, 'o', 00H, 'u', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'l', 00H
	DB	'l', 00H, ' ', 00H, 'n', 00H, 'e', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'u', 00H, 'p', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'd', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'o'
	DB	00H, ' ', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'w', 00H, 's', 00H, ' ', 00H, 'X', 00H, 'P', 00H, ' ', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'l', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r'
	DB	00H, 's', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'o', 00H
	DB	'f', 00H, ' ', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o'
	DB	00H, 'w', 00H, 's', 00H, '.', 00H, 0aH, 00H, 0aH, 00H, 'N', 00H
	DB	'o', 00H, 't', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'M', 00H, 'i'
	DB	00H, 'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'o', 00H, 'p', 00H, 'p'
	DB	00H, 'e', 00H, 'd', 00H, ' ', 00H, 'i', 00H, 's', 00H, 's', 00H
	DB	'u', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 's', 00H, 'e'
	DB	00H, 'c', 00H, 'u', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'y', 00H
	DB	' ', 00H, 'u', 00H, 'p', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 's', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 's'
	DB	00H, ' ', 00H, '2', 00H, '0', 00H, '0', 00H, '0', 00H, ' ', 00H
	DB	't', 00H, 'o', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' '
	DB	00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'p', 00H, 'u', 00H, 'b', 00H, 'l', 00H, 'i'
	DB	00H, 'c', 00H, ' ', 00H, 'o', 00H, 'n', 00H, ' ', 00H, '7', 00H
	DB	'/', 00H, '1', 00H, '3', 00H, '/', 00H, '2', 00H, '0', 00H, '1'
	DB	00H, '0', 00H, ' ', 00H, '(', 00H, 't', 00H, 'h', 00H, 'e', 00H
	DB	' ', 00H, 'l', 00H, 'a', 00H, 's', 00H, 't', 00H, ' ', 00H, 'n'
	DB	00H, 'o', 00H, 'n', 00H, '-', 00H, 's', 00H, 'e', 00H, 'c', 00H
	DB	'u', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'y', 00H, ' ', 00H, 'u'
	DB	00H, 'p', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H
	DB	'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'W', 00H, 'i', 00H, 'n'
	DB	00H, 'd', 00H, 'o', 00H, 'w', 00H, 's', 00H, ' ', 00H, '2', 00H
	DB	'0', 00H, '0', 00H, '0', 00H, ' ', 00H, 'w', 00H, 'a', 00H, 's'
	DB	00H, ' ', 00H, 'i', 00H, 's', 00H, 's', 00H, 'u', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 't', 00H, 'h'
	DB	00H, 'e', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 'l', 00H, ' ', 00H, 'p', 00H, 'u', 00H, 'b'
	DB	00H, 'l', 00H, 'i', 00H, 'c', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	' ', 00H, '2', 00H, '0', 00H, '0', 00H, '5', 00H, ')', 00H, '.'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IINJFIMH@CipherShed?5Setup?50?47?43?$AA@
CONST	SEGMENT
??_C@_0BH@IINJFIMH@CipherShed?5Setup?50?47?43?$AA@ DB 'CipherShed Setup 0'
	DB	'.7.3', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FLNDDLDP@TC_INSTALLER_IS_RUNNING?$AA@
CONST	SEGMENT
??_C@_0BI@FLNDDLDP@TC_INSTALLER_IS_RUNNING?$AA@ DB 'TC_INSTALLER_IS_RUNNI'
	DB	'NG', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ICICKJJH@CONFIRM_RESTART?$AA@
CONST	SEGMENT
??_C@_0BA@ICICKJJH@CONFIRM_RESTART?$AA@ DB 'CONFIRM_RESTART', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OMDAGJAA@UPGRADE_OK_REBOOT_REQUIRED?$AA@
CONST	SEGMENT
??_C@_0BL@OMDAGJAA@UPGRADE_OK_REBOOT_REQUIRED?$AA@ DB 'UPGRADE_OK_REBOOT_'
	DB	'REQUIRED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FIMNAHGL@beginnerstutorial?$AA@
CONST	SEGMENT
??_C@_0BC@FIMNAHGL@beginnerstutorial?$AA@ DB 'beginnerstutorial', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JALPBIFE@AFTER_INSTALL_TUTORIAL?$AA@
CONST	SEGMENT
??_C@_0BH@JALPBIFE@AFTER_INSTALL_TUTORIAL?$AA@ DB 'AFTER_INSTALL_TUTORIAL'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MAFEFKDE@releasenotes?$AA@
CONST	SEGMENT
??_C@_0N@MAFEFKDE@releasenotes?$AA@ DB 'releasenotes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PEPDOHPE@AFTER_UPGRADE_RELEASE_NOTES?$AA@
CONST	SEGMENT
??_C@_0BM@PEPDOHPE@AFTER_UPGRADE_RELEASE_NOTES?$AA@ DB 'AFTER_UPGRADE_REL'
	DB	'EASE_NOTES', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04PMOCAHAA@open?$AA@
CONST	SEGMENT
??_C@_04PMOCAHAA@open?$AA@ DB 'open', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KAHGPAJO@CONFIRM_EXIT_UNIVERSAL?$AA@
CONST	SEGMENT
??_C@_0BH@KAHGPAJO@CONFIRM_EXIT_UNIVERSAL?$AA@ DB 'CONFIRM_EXIT_UNIVERSAL'
	DB	00H						; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _MainDialogProc@16
_TEXT	SEGMENT
_rD$102757 = -120					; size = 16
_rD$102741 = -120					; size = 16
_rD$102726 = -120					; size = 16
_rD$102710 = -120					; size = 16
_trect$96012 = -120					; size = 16
_rW$102758 = -104					; size = 16
_rW$102743 = -104					; size = 16
_rW$102727 = -104					; size = 16
_rW$102711 = -104					; size = 16
_hkey$95973 = -88					; size = 4
_rec$95942 = -84					; size = 16
_tmpPaintStruct$96008 = -68				; size = 64
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_MainDialogProc@16 PROC					; COMDAT

; 830  : {

  00000	83 ec 78	 sub	 esp, 120		; 00000078H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 74	 mov	 DWORD PTR __$ArrayPad$[esp+120], eax

; 831  : 	WORD lw = LOWORD (wParam);
; 832  : 
; 833  : 	switch (uMsg)

  0000e	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR _uMsg$[esp+116]
  00015	53		 push	 ebx
  00016	55		 push	 ebp
  00017	56		 push	 esi
  00018	8b b4 24 88 00
	00 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+128]
  0001f	57		 push	 edi
  00020	8b bc 24 94 00
	00 00		 mov	 edi, DWORD PTR _wParam$[esp+132]
  00027	3d 10 01 00 00	 cmp	 eax, 272		; 00000110H
  0002c	0f 87 ef 04 00
	00		 ja	 $LN67@MainDialog
  00032	0f 84 19 02 00
	00		 je	 $LN60@MainDialog
  00038	83 c0 f1	 add	 eax, -15		; fffffff1H
  0003b	83 f8 44	 cmp	 eax, 68			; 00000044H
  0003e	0f 87 c6 04 00
	00		 ja	 $LN54@MainDialog
  00044	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN121@MainDialog[eax]
  0004b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN128@MainDialog[eax*4]
$LN52@MainDialog:

; 893  : 		}
; 894  : 		return 0;
; 895  : 
; 896  : 	case WM_HELP:
; 897  : 		if (bLicenseAccepted)

  00052	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bLicenseAccepted@@3HA, 0 ; bLicenseAccepted
  00059	0f 84 43 0c 00
	00		 je	 $LN51@MainDialog

; 898  : 			OpenPageHelp (hwndDlg, nCurPageNo);

  0005f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00065	51		 push	 ecx
  00066	56		 push	 esi
  00067	e8 00 00 00 00	 call	 _OpenPageHelp
  0006c	83 c4 08	 add	 esp, 8

; 899  : 
; 900  : 		return 1;

  0006f	e9 2e 0c 00 00	 jmp	 $LN51@MainDialog
$LN19@MainDialog:

; 1030 : 		}
; 1031 : 
; 1032 : 		return 0;
; 1033 : 
; 1034 : 
; 1035 : 
; 1036 : 	case WM_PAINT:
; 1037 : 
; 1038 : 		if (nCurPageNo == DONATIONS_PAGE && DonColorSchemeId != 2)

  00074	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?nCurPageNo@@3HA, 6 ; nCurPageNo
  0007b	0f 85 af 00 00
	00		 jne	 $LN18@MainDialog
  00081	bb 02 00 00 00	 mov	 ebx, 2
  00086	39 1d 00 00 00
	00		 cmp	 DWORD PTR _DonColorSchemeId, ebx
  0008c	0f 84 9e 00 00
	00		 je	 $LN18@MainDialog

; 1039 : 		{
; 1040 : 			HWND hwndItem = GetDlgItem (MainDlg, IDC_MAIN_CONTENT_CANVAS);

  00092	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00098	68 07 04 00 00	 push	 1031			; 00000407H
  0009d	52		 push	 edx
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  000a4	8b f0		 mov	 esi, eax

; 1041 : 
; 1042 : 			PAINTSTRUCT tmpPaintStruct;
; 1043 : 			HDC hdc = BeginPaint (hwndItem, &tmpPaintStruct); 

  000a6	8d 44 24 44	 lea	 eax, DWORD PTR _tmpPaintStruct$96008[esp+136]
  000aa	50		 push	 eax
  000ab	56		 push	 esi
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BeginPaint@8
  000b2	8b f8		 mov	 edi, eax

; 1044 : 
; 1045 : 			if (DonColorSchemeId != 2)

  000b4	39 1d 00 00 00
	00		 cmp	 DWORD PTR _DonColorSchemeId, ebx
  000ba	74 60		 je	 SHORT $LN17@MainDialog

; 1046 : 			{
; 1047 : 				HBRUSH tmpBrush = CreateSolidBrush (DonBkgColor);

  000bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _DonBkgColor
  000c2	51		 push	 ecx
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateSolidBrush@4

; 1048 : 				
; 1049 : 				RECT trect;
; 1050 : 
; 1051 : 				trect.left = CompensateXDPI (1);

  000c9	6a 01		 push	 1
  000cb	8b d8		 mov	 ebx, eax
  000cd	e8 00 00 00 00	 call	 _CompensateXDPI

; 1052 : 				trect.right = CompensateXDPI (560);

  000d2	68 30 02 00 00	 push	 560			; 00000230H
  000d7	89 44 24 18	 mov	 DWORD PTR _trect$96012[esp+144], eax
  000db	e8 00 00 00 00	 call	 _CompensateXDPI

; 1053 : 				trect.top  = CompensateYDPI (DonColorSchemeId == 7 ? 11 : 0);

  000e0	33 d2		 xor	 edx, edx
  000e2	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _DonColorSchemeId, 7
  000e9	89 44 24 20	 mov	 DWORD PTR _trect$96012[esp+152], eax
  000ed	0f 95 c2	 setne	 dl
  000f0	4a		 dec	 edx
  000f1	83 e2 0b	 and	 edx, 11			; 0000000bH
  000f4	52		 push	 edx
  000f5	e8 00 00 00 00	 call	 _CompensateYDPI

; 1054 : 				trect.bottom = CompensateYDPI (260);

  000fa	68 04 01 00 00	 push	 260			; 00000104H
  000ff	89 44 24 24	 mov	 DWORD PTR _trect$96012[esp+156], eax
  00103	e8 00 00 00 00	 call	 _CompensateYDPI
  00108	83 c4 10	 add	 esp, 16			; 00000010H
  0010b	89 44 24 1c	 mov	 DWORD PTR _trect$96012[esp+148], eax

; 1055 : 
; 1056 : 				FillRect (hdc, &trect, tmpBrush);

  0010f	53		 push	 ebx
  00110	8d 44 24 14	 lea	 eax, DWORD PTR _trect$96012[esp+140]
  00114	50		 push	 eax
  00115	57		 push	 edi
  00116	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FillRect@12
$LN17@MainDialog:

; 1057 : 			}
; 1058 : 					
; 1059 : 			EndPaint(hwndItem, &tmpPaintStruct); 

  0011c	8d 4c 24 44	 lea	 ecx, DWORD PTR _tmpPaintStruct$96008[esp+136]
  00120	51		 push	 ecx
  00121	56		 push	 esi
  00122	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndPaint@8

; 1060 : 			ReleaseDC (hwndItem, hdc);

  00128	57		 push	 edi
  00129	56		 push	 esi
  0012a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8
$LN18@MainDialog:
  00130	5f		 pop	 edi
  00131	5e		 pop	 esi
  00132	5d		 pop	 ebp

; 1061 : 		}
; 1062 : 		return 0; 

  00133	33 c0		 xor	 eax, eax
  00135	5b		 pop	 ebx

; 1232 : }

  00136	8b 4c 24 74	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+120]
  0013a	33 cc		 xor	 ecx, esp
  0013c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00141	83 c4 78	 add	 esp, 120		; 00000078H
  00144	c2 10 00	 ret	 16			; 00000010H
$LN9@MainDialog:

; 1153 : 
; 1154 : 		return 1;
; 1155 : 
; 1156 : 	case TC_APPMSG_EXTRACTION_FAILURE:
; 1157 : 		
; 1158 : 		/* Extraction failed */
; 1159 : 
; 1160 : 		bInProgress = FALSE;
; 1161 : 
; 1162 : 		NormalCursor ();
; 1163 : 
; 1164 : 		StatusMessage (hCurPage, "EXTRACTION_FAILED");
; 1165 : 
; 1166 : 		UpdateProgressBarProc(0);
; 1167 : 
; 1168 : 		SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_TITLE), GetString ("EXTRACTION_FAILED"));
; 1169 : 		SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_INFO), L"");
; 1170 : 
; 1171 : 		SetWindowTextW (GetDlgItem (hwndDlg, IDCANCEL), GetString ("IDCLOSE"));
; 1172 : 		EnableWindow (GetDlgItem (hwndDlg, IDHELP), TRUE);
; 1173 : 		EnableWindow (GetDlgItem (hwndDlg, IDC_PREV), FALSE);
; 1174 : 		EnableWindow (GetDlgItem (hwndDlg, IDC_NEXT), FALSE);
; 1175 : 		EnableWindow (GetDlgItem (hwndDlg, IDCANCEL), TRUE);
; 1176 : 
; 1177 : 		RefreshUIGFX();
; 1178 : 
; 1179 : 		Error ("EXTRACTION_FAILED");
; 1180 : 
; 1181 : 		return 1;
; 1182 : 
; 1183 : 	case WM_CLOSE:
; 1184 : 
; 1185 : 		if (!bDevm)

  00147	33 ed		 xor	 ebp, ebp
  00149	39 2d 00 00 00
	00		 cmp	 DWORD PTR _bDevm, ebp
  0014f	0f 85 ee 00 00
	00		 jne	 $LN1@MainDialog

; 1186 : 		{
; 1187 : 			if (bInProgress)

  00155	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?bInProgress@@3HA, ebp ; bInProgress
  0015b	74 20		 je	 SHORT $LN7@MainDialog

; 1188 : 			{
; 1189 : 				NormalCursor();

  0015d	e8 00 00 00 00	 call	 _NormalCursor

; 1190 : 				if (AskNoYes("CONFIRM_EXIT_UNIVERSAL") == IDNO)

  00162	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KAHGPAJO@CONFIRM_EXIT_UNIVERSAL?$AA@
  00167	e8 00 00 00 00	 call	 _AskNoYes
  0016c	83 c4 04	 add	 esp, 4
  0016f	83 f8 07	 cmp	 eax, 7

; 1191 : 				{
; 1192 : 					return 1;

  00172	0f 84 2a 0b 00
	00		 je	 $LN51@MainDialog

; 1193 : 				}
; 1194 : 				WaitCursor ();

  00178	e8 00 00 00 00	 call	 _WaitCursor
$LN7@MainDialog:

; 1195 : 			}
; 1196 : 
; 1197 : 			if (bOpenContainingFolder && bExtractOnly && bExtractionSuccessful)

  0017d	bb 06 00 00 00	 mov	 ebx, 6
  00182	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?bOpenContainingFolder@@3HA, ebp ; bOpenContainingFolder
  00188	74 27		 je	 SHORT $LN5@MainDialog
  0018a	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?bExtractOnly@@3HA, ebp ; bExtractOnly
  00190	74 1f		 je	 SHORT $LN5@MainDialog
  00192	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?bExtractionSuccessful@@3HA, ebp ; bExtractionSuccessful
  00198	74 17		 je	 SHORT $LN5@MainDialog

; 1198 : 			{
; 1199 : 				ShellExecute (NULL, "open", WizardDestExtractPath, NULL, NULL, SW_SHOWNORMAL);

  0019a	6a 01		 push	 1
  0019c	55		 push	 ebp
  0019d	55		 push	 ebp
  0019e	68 00 00 00 00	 push	 OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  001a3	68 00 00 00 00	 push	 OFFSET ??_C@_04PMOCAHAA@open?$AA@
  001a8	55		 push	 ebp
  001a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24

; 1200 : 			}
; 1201 : 			else

  001af	eb 66		 jmp	 SHORT $LN4@MainDialog
$LN5@MainDialog:

; 1202 : 			{
; 1203 : 				if (bPromptReleaseNotes
; 1204 : 					&& AskYesNo ("AFTER_UPGRADE_RELEASE_NOTES") == IDYES)

  001b1	39 2d 00 00 00
	00		 cmp	 DWORD PTR _bPromptReleaseNotes, ebp
  001b7	74 25		 je	 SHORT $LN3@MainDialog
  001b9	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PEPDOHPE@AFTER_UPGRADE_RELEASE_NOTES?$AA@
  001be	e8 00 00 00 00	 call	 _AskYesNo
  001c3	83 c4 04	 add	 esp, 4
  001c6	3b c3		 cmp	 eax, ebx
  001c8	75 14		 jne	 SHORT $LN3@MainDialog

; 1205 : 				{
; 1206 : 					Applink ("releasenotes", TRUE, "");

  001ca	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  001cf	6a 01		 push	 1
  001d1	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MAFEFKDE@releasenotes?$AA@
  001d6	e8 00 00 00 00	 call	 _Applink
  001db	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@MainDialog:

; 1207 : 				}
; 1208 : 
; 1209 : 				bPromptReleaseNotes = FALSE;

  001de	89 2d 00 00 00
	00		 mov	 DWORD PTR _bPromptReleaseNotes, ebp

; 1210 : 
; 1211 : 				if (bPromptTutorial
; 1212 : 					&& AskYesNo ("AFTER_INSTALL_TUTORIAL") == IDYES)

  001e4	39 2d 00 00 00
	00		 cmp	 DWORD PTR _bPromptTutorial, ebp
  001ea	74 25		 je	 SHORT $LN2@MainDialog
  001ec	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@JALPBIFE@AFTER_INSTALL_TUTORIAL?$AA@
  001f1	e8 00 00 00 00	 call	 _AskYesNo
  001f6	83 c4 04	 add	 esp, 4
  001f9	3b c3		 cmp	 eax, ebx
  001fb	75 14		 jne	 SHORT $LN2@MainDialog

; 1213 : 				{
; 1214 : 					Applink ("beginnerstutorial", TRUE, "");

  001fd	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00202	6a 01		 push	 1
  00204	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FIMNAHGL@beginnerstutorial?$AA@
  00209	e8 00 00 00 00	 call	 _Applink
  0020e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@MainDialog:

; 1215 : 				}
; 1216 : 
; 1217 : 				bPromptTutorial = FALSE;

  00211	89 2d 00 00 00
	00		 mov	 DWORD PTR _bPromptTutorial, ebp
$LN4@MainDialog:

; 1218 : 			}
; 1219 : 
; 1220 : 			if (bRestartRequired
; 1221 : 				&& AskYesNo (bUpgrade ? "UPGRADE_OK_REBOOT_REQUIRED" : "CONFIRM_RESTART") == IDYES)

  00217	39 2d 00 00 00
	00		 cmp	 DWORD PTR _bRestartRequired, ebp
  0021d	74 24		 je	 SHORT $LN1@MainDialog
  0021f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BL@OMDAGJAA@UPGRADE_OK_REBOOT_REQUIRED?$AA@
  00224	39 2d 00 00 00
	00		 cmp	 DWORD PTR _bUpgrade, ebp
  0022a	75 05		 jne	 SHORT $LN66@MainDialog
  0022c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BA@ICICKJJH@CONFIRM_RESTART?$AA@
$LN66@MainDialog:
  00231	50		 push	 eax
  00232	e8 00 00 00 00	 call	 _AskYesNo
  00237	83 c4 04	 add	 esp, 4
  0023a	3b c3		 cmp	 eax, ebx
  0023c	75 05		 jne	 SHORT $LN1@MainDialog

; 1222 : 			{
; 1223 : 				RestartComputer();

  0023e	e8 00 00 00 00	 call	 _RestartComputer
$LN1@MainDialog:

; 1224 : 			}
; 1225 : 		}
; 1226 : 
; 1227 : 		EndDialog (hwndDlg, IDCANCEL);

  00243	6a 02		 push	 2
  00245	56		 push	 esi
  00246	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 1228 : 		return 1;

  0024c	e9 51 0a 00 00	 jmp	 $LN51@MainDialog
$LN60@MainDialog:

; 834  : 	{
; 835  : 	case WM_INITDIALOG:
; 836  : 		{
; 837  : 			RECT rec;
; 838  : 
; 839  : 			GetModuleFileName (NULL, SelfFile, sizeof (SelfFile));

  00251	68 04 01 00 00	 push	 260			; 00000104H
  00256	68 00 00 00 00	 push	 OFFSET ?SelfFile@@3PADA	; SelfFile
  0025b	33 ed		 xor	 ebp, ebp
  0025d	55		 push	 ebp
  0025e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12

; 840  : 
; 841  : 			MainDlg = hwndDlg;

  00264	89 35 00 00 00
	00		 mov	 DWORD PTR _MainDlg, esi

; 842  : 
; 843  : 			if (!CreateAppSetupMutex ())

  0026a	e8 00 00 00 00	 call	 _CreateAppSetupMutex
  0026f	85 c0		 test	 eax, eax
  00271	75 0d		 jne	 SHORT $LN59@MainDialog

; 844  : 				AbortProcess ("TC_INSTALLER_IS_RUNNING");

  00273	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FLNDDLDP@TC_INSTALLER_IS_RUNNING?$AA@
  00278	e8 00 00 00 00	 call	 _AbortProcess
  0027d	83 c4 04	 add	 esp, 4
$LN59@MainDialog:

; 845  : 
; 846  : 			InitDialog (hwndDlg);

  00280	56		 push	 esi
  00281	e8 00 00 00 00	 call	 _InitDialog

; 847  : 			LocalizeDialog (hwndDlg, "IDD_INSTL_DLG");

  00286	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MGHONKG@IDD_INSTL_DLG?$AA@
  0028b	56		 push	 esi
  0028c	e8 00 00 00 00	 call	 _LocalizeDialog

; 848  : 			
; 849  : 			// Resize the bitmap if the user has a non-default DPI 
; 850  : 			if (ScreenDPI != USER_DEFAULT_SCREEN_DPI)

  00291	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00297	83 c4 0c	 add	 esp, 12			; 0000000cH
  0029a	83 3d 00 00 00
	00 60		 cmp	 DWORD PTR _ScreenDPI, 96 ; 00000060H
  002a1	bb 01 00 00 00	 mov	 ebx, 1
  002a6	74 1e		 je	 SHORT $LN58@MainDialog

; 851  : 			{
; 852  : 				hbmWizardBitmapRescaled = RenderBitmap (MAKEINTRESOURCE (IDB_SETUP_WIZARD),
; 853  : 					GetDlgItem (hwndDlg, IDC_BITMAP_SETUP_WIZARD),
; 854  : 					0, 0, 0, 0, FALSE, TRUE);

  002a8	53		 push	 ebx
  002a9	55		 push	 ebp
  002aa	55		 push	 ebp
  002ab	55		 push	 ebp
  002ac	55		 push	 ebp
  002ad	55		 push	 ebp
  002ae	68 06 04 00 00	 push	 1030			; 00000406H
  002b3	56		 push	 esi
  002b4	ff d7		 call	 edi
  002b6	50		 push	 eax
  002b7	6a 6b		 push	 107			; 0000006bH
  002b9	e8 00 00 00 00	 call	 _RenderBitmap
  002be	83 c4 20	 add	 esp, 32			; 00000020H
  002c1	a3 00 00 00 00	 mov	 DWORD PTR ?hbmWizardBitmapRescaled@@3PAUHBITMAP__@@A, eax ; hbmWizardBitmapRescaled
$LN58@MainDialog:

; 855  : 			}
; 856  : 
; 857  : 			// Gfx area background (must not keep aspect ratio; must retain Windows-imposed distortion)
; 858  : 			GetClientRect (GetDlgItem (hwndDlg, IDC_SETUP_WIZARD_GFX_AREA), &rec);

  002c6	8d 54 24 34	 lea	 edx, DWORD PTR _rec$95942[esp+136]
  002ca	52		 push	 edx
  002cb	68 fb 03 00 00	 push	 1019			; 000003fbH
  002d0	56		 push	 esi
  002d1	ff d7		 call	 edi
  002d3	50		 push	 eax
  002d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 859  : 			SetWindowPos (GetDlgItem (hwndDlg, IDC_SETUP_WIZARD_BKG), HWND_TOP, 0, 0, rec.right, rec.bottom, SWP_NOMOVE);

  002da	8b 44 24 40	 mov	 eax, DWORD PTR _rec$95942[esp+148]
  002de	8b 4c 24 3c	 mov	 ecx, DWORD PTR _rec$95942[esp+144]
  002e2	6a 02		 push	 2
  002e4	50		 push	 eax
  002e5	51		 push	 ecx
  002e6	55		 push	 ebp
  002e7	55		 push	 ebp
  002e8	55		 push	 ebp
  002e9	68 fa 03 00 00	 push	 1018			; 000003faH
  002ee	56		 push	 esi
  002ef	ff d7		 call	 edi
  002f1	50		 push	 eax
  002f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28

; 860  : 
; 861  : 			nPbar = IDC_PROGRESS_BAR;
; 862  : 
; 863  : 			SendMessage (GetDlgItem (hwndDlg, IDC_BOX_TITLE), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  002f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hUserBoldFont
  002fe	53		 push	 ebx
  002ff	52		 push	 edx
  00300	6a 30		 push	 48			; 00000030H
  00302	68 e9 03 00 00	 push	 1001			; 000003e9H
  00307	56		 push	 esi
  00308	c7 05 00 00 00
	00 f8 03 00 00	 mov	 DWORD PTR ?nPbar@@3HA, 1016 ; nPbar, 000003f8H
  00312	ff d7		 call	 edi
  00314	50		 push	 eax
  00315	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 864  : 
; 865  : 			SetWindowTextA(hwndDlg, "CipherShed Setup " VERSION_STRING);

  0031b	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IINJFIMH@CipherShed?5Setup?50?47?43?$AA@
  00320	56		 push	 esi
  00321	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 866  : 
; 867  : 			DonColorSchemeId = GetDonVal (2, 9);

  00327	b8 09 00 00 00	 mov	 eax, 9
  0032c	8d 48 f9	 lea	 ecx, DWORD PTR [eax-7]
  0032f	e8 00 00 00 00	 call	 ?GetDonVal@@YAHHH@Z	; GetDonVal
  00334	a3 00 00 00 00	 mov	 DWORD PTR _DonColorSchemeId, eax

; 868  : 
; 869  : 			if (bDevm)

  00339	39 2d 00 00 00
	00		 cmp	 DWORD PTR _bDevm, ebp
  0033f	0f 84 06 01 00
	00		 je	 $LN57@MainDialog

; 870  : 			{
; 871  : 				InitWizardDestInstallPath ();

  00345	e8 00 00 00 00	 call	 ?InitWizardDestInstallPath@@YAXXZ ; InitWizardDestInstallPath

; 872  : 				bSystemRestore = FALSE;
; 873  : 				bRegisterFileExt = FALSE;
; 874  : 				bAddToStartMenu = FALSE;
; 875  : 				bDesktopIcon = TRUE;
; 876  : 				bLicenseAccepted = TRUE;
; 877  : 				bStartInstall = TRUE;
; 878  : 				LoadPage (hwndDlg, INSTALL_PROGRESS_PAGE);

  0034a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  0034f	89 2d 00 00 00
	00		 mov	 DWORD PTR _bSystemRestore, ebp
  00355	89 2d 00 00 00
	00		 mov	 DWORD PTR _bRegisterFileExt, ebp
  0035b	89 2d 00 00 00
	00		 mov	 DWORD PTR _bAddToStartMenu, ebp
  00361	89 1d 00 00 00
	00		 mov	 DWORD PTR _bDesktopIcon, ebx
  00367	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bLicenseAccepted@@3HA, ebx ; bLicenseAccepted
  0036d	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bStartInstall@@3HA, ebx ; bStartInstall
  00373	3b c5		 cmp	 eax, ebp
  00375	74 07		 je	 SHORT $LN79@MainDialog
  00377	50		 push	 eax
  00378	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
$LN79@MainDialog:
  0037e	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00383	53		 push	 ebx
  00384	55		 push	 ebp
  00385	68 07 04 00 00	 push	 1031			; 00000407H
  0038a	50		 push	 eax
  0038b	ff d7		 call	 edi
  0038d	50		 push	 eax
  0038e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
  00394	8d 4c 24 20	 lea	 ecx, DWORD PTR _rW$102711[esp+136]
  00398	51		 push	 ecx
  00399	68 05 04 00 00	 push	 1029			; 00000405H
  0039e	56		 push	 esi
  0039f	ff d7		 call	 edi
  003a1	50		 push	 eax
  003a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  003a8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  003ae	55		 push	 ebp
  003af	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  003b4	56		 push	 esi
  003b5	6a 71		 push	 113			; 00000071H
  003b7	52		 push	 edx
  003b8	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 3 ; nCurPageNo
  003c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  003c8	a3 00 00 00 00	 mov	 DWORD PTR ?hCurPage@@3PAUHWND__@@A, eax ; hCurPage
  003cd	8d 44 24 10	 lea	 eax, DWORD PTR _rD$102710[esp+136]
  003d1	50		 push	 eax
  003d2	56		 push	 esi
  003d3	c7 44 24 18 0f
	00 00 00	 mov	 DWORD PTR _rD$102710[esp+144], 15 ; 0000000fH
  003db	c7 44 24 1c 2d
	00 00 00	 mov	 DWORD PTR _rD$102710[esp+148], 45 ; 0000002dH
  003e3	89 6c 24 20	 mov	 DWORD PTR _rD$102710[esp+152], ebp
  003e7	89 6c 24 24	 mov	 DWORD PTR _rD$102710[esp+156], ebp
  003eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  003f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  003f6	3b c5		 cmp	 eax, ebp
  003f8	0f 84 07 01 00
	00		 je	 $LN82@MainDialog
  003fe	8b 4c 24 2c	 mov	 ecx, DWORD PTR _rW$102711[esp+148]
  00402	2b 4c 24 24	 sub	 ecx, DWORD PTR _rW$102711[esp+140]
  00406	8b 54 24 28	 mov	 edx, DWORD PTR _rW$102711[esp+144]
  0040a	2b 54 24 20	 sub	 edx, DWORD PTR _rW$102711[esp+136]
  0040e	53		 push	 ebx
  0040f	51		 push	 ecx
  00410	8b 4c 24 1c	 mov	 ecx, DWORD PTR _rD$102710[esp+148]
  00414	52		 push	 edx
  00415	8b 54 24 1c	 mov	 edx, DWORD PTR _rD$102710[esp+148]
  00419	51		 push	 ecx
  0041a	52		 push	 edx
  0041b	50		 push	 eax
  0041c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  00422	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00427	53		 push	 ebx
  00428	50		 push	 eax

; 879  : 			}
; 880  : 			else
; 881  : 				LoadPage (hwndDlg, INTRO_PAGE);

  00429	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
  0042f	e8 00 00 00 00	 call	 _RefreshUIGFX
  00434	5f		 pop	 edi
  00435	5e		 pop	 esi
  00436	5d		 pop	 ebp

; 882  : 
; 883  : 		}
; 884  : 		return 0;

  00437	33 c0		 xor	 eax, eax
  00439	5b		 pop	 ebx

; 1232 : }

  0043a	8b 4c 24 74	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+120]
  0043e	33 cc		 xor	 ecx, esp
  00440	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00445	83 c4 78	 add	 esp, 120		; 00000078H
  00448	c2 10 00	 ret	 16			; 00000010H
$LN57@MainDialog:

; 879  : 			}
; 880  : 			else
; 881  : 				LoadPage (hwndDlg, INTRO_PAGE);

  0044b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00450	3b c5		 cmp	 eax, ebp
  00452	74 07		 je	 SHORT $LN92@MainDialog
  00454	50		 push	 eax
  00455	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
$LN92@MainDialog:
  0045b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00461	53		 push	 ebx
  00462	55		 push	 ebp
  00463	68 07 04 00 00	 push	 1031			; 00000407H
  00468	51		 push	 ecx
  00469	ff d7		 call	 edi
  0046b	50		 push	 eax
  0046c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
  00472	8d 54 24 20	 lea	 edx, DWORD PTR _rW$102727[esp+136]
  00476	52		 push	 edx
  00477	68 05 04 00 00	 push	 1029			; 00000405H
  0047c	56		 push	 esi
  0047d	ff d7		 call	 edi
  0047f	50		 push	 eax
  00480	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00486	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  0048b	55		 push	 ebp
  0048c	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00491	56		 push	 esi
  00492	6a 6c		 push	 108			; 0000006cH
  00494	50		 push	 eax
  00495	89 2d 00 00 00
	00		 mov	 DWORD PTR ?nCurPageNo@@3HA, ebp ; nCurPageNo
  0049b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  004a1	8d 4c 24 10	 lea	 ecx, DWORD PTR _rD$102726[esp+136]
  004a5	51		 push	 ecx
  004a6	56		 push	 esi
  004a7	a3 00 00 00 00	 mov	 DWORD PTR ?hCurPage@@3PAUHWND__@@A, eax ; hCurPage
  004ac	c7 44 24 18 0f
	00 00 00	 mov	 DWORD PTR _rD$102726[esp+144], 15 ; 0000000fH
  004b4	c7 44 24 1c 2d
	00 00 00	 mov	 DWORD PTR _rD$102726[esp+148], 45 ; 0000002dH
  004bc	89 6c 24 20	 mov	 DWORD PTR _rD$102726[esp+152], ebp
  004c0	89 6c 24 24	 mov	 DWORD PTR _rD$102726[esp+156], ebp
  004c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  004ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  004cf	3b c5		 cmp	 eax, ebp
  004d1	74 32		 je	 SHORT $LN82@MainDialog
  004d3	8b 54 24 2c	 mov	 edx, DWORD PTR _rW$102727[esp+148]
  004d7	2b 54 24 24	 sub	 edx, DWORD PTR _rW$102727[esp+140]
  004db	8b 4c 24 28	 mov	 ecx, DWORD PTR _rW$102727[esp+144]
  004df	2b 4c 24 20	 sub	 ecx, DWORD PTR _rW$102727[esp+136]
  004e3	53		 push	 ebx
  004e4	52		 push	 edx
  004e5	8b 54 24 1c	 mov	 edx, DWORD PTR _rD$102726[esp+148]
  004e9	51		 push	 ecx
  004ea	8b 4c 24 1c	 mov	 ecx, DWORD PTR _rD$102726[esp+148]
  004ee	52		 push	 edx
  004ef	51		 push	 ecx
  004f0	50		 push	 eax
  004f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  004f7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  004fd	53		 push	 ebx
  004fe	52		 push	 edx
  004ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$LN82@MainDialog:
  00505	e8 00 00 00 00	 call	 _RefreshUIGFX
$LN54@MainDialog:
  0050a	5f		 pop	 edi
  0050b	5e		 pop	 esi
  0050c	5d		 pop	 ebp

; 882  : 
; 883  : 		}
; 884  : 		return 0;

  0050d	33 c0		 xor	 eax, eax
  0050f	5b		 pop	 ebx

; 1232 : }

  00510	8b 4c 24 74	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+120]
  00514	33 cc		 xor	 ecx, esp
  00516	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0051b	83 c4 78	 add	 esp, 120		; 00000078H
  0051e	c2 10 00	 ret	 16			; 00000010H
$LN67@MainDialog:

; 831  : 	WORD lw = LOWORD (wParam);
; 832  : 
; 833  : 	switch (uMsg)

  00521	3d 91 81 00 00	 cmp	 eax, 33169		; 00008191H
  00526	0f 87 b1 04 00
	00		 ja	 $LN68@MainDialog
  0052c	0f 84 79 03 00
	00		 je	 $LN13@MainDialog
  00532	2d 11 01 00 00	 sub	 eax, 273		; 00000111H
  00537	0f 84 84 00 00
	00		 je	 $LN50@MainDialog
  0053d	83 e8 01	 sub	 eax, 1
  00540	74 45		 je	 SHORT $LN55@MainDialog
  00542	83 e8 26	 sub	 eax, 38			; 00000026H
  00545	75 c3		 jne	 SHORT $LN54@MainDialog

; 1063 : 
; 1064 : 
; 1065 : 
; 1066 : 	case WM_CTLCOLORSTATIC:
; 1067 : 
; 1068 : 		if ((HWND) lParam != GetDlgItem (MainDlg, IDC_MAIN_CONTENT_CANVAS))

  00547	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0054c	68 07 04 00 00	 push	 1031			; 00000407H
  00551	50		 push	 eax
  00552	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00558	39 84 24 98 00
	00 00		 cmp	 DWORD PTR _lParam$[esp+132], eax
  0055f	74 a9		 je	 SHORT $LN54@MainDialog

; 1069 : 		{
; 1070 : 			/* This maintains the background under the transparent-backround texts. The above 'if' statement allows
; 1071 : 			colored background to be erased automatically when leaving a page that uses it. */
; 1072 : 
; 1073 : 			SetBkMode ((HDC) wParam, TRANSPARENT);

  00561	6a 01		 push	 1
  00563	57		 push	 edi
  00564	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkMode@8

; 1074 : 			return ((LONG) (HBRUSH) (GetStockObject (NULL_BRUSH)));

  0056a	6a 05		 push	 5
  0056c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStockObject@4
  00572	5f		 pop	 edi
  00573	5e		 pop	 esi
  00574	5d		 pop	 ebp
  00575	5b		 pop	 ebx

; 1232 : }

  00576	8b 4c 24 74	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+120]
  0057a	33 cc		 xor	 ecx, esp
  0057c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00581	83 c4 78	 add	 esp, 120		; 00000078H
  00584	c2 10 00	 ret	 16			; 00000010H
$LN55@MainDialog:

; 885  : 
; 886  : 	case WM_SYSCOMMAND:
; 887  : 		if (lw == IDC_ABOUT)

  00587	b9 ff 7f 00 00	 mov	 ecx, 32767		; 00007fffH
  0058c	66 3b f9	 cmp	 di, cx
  0058f	0f 85 75 ff ff
	ff		 jne	 $LN54@MainDialog

; 888  : 		{
; 889  : 			if (bLicenseAccepted)

  00595	33 ed		 xor	 ebp, ebp
  00597	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?bLicenseAccepted@@3HA, ebp ; bLicenseAccepted
  0059d	0f 84 ff 06 00
	00		 je	 $LN51@MainDialog

; 890  : 				DialogBoxW (hInst, MAKEINTRESOURCEW (IDD_ABOUT_DLG), hwndDlg, (DLGPROC) AboutDlgProc);

  005a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  005a9	55		 push	 ebp
  005aa	68 00 00 00 00	 push	 OFFSET _AboutDlgProc@16
  005af	56		 push	 esi
  005b0	68 fc 01 00 00	 push	 508			; 000001fcH
  005b5	52		 push	 edx
  005b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 891  : 
; 892  : 			return 1;

  005bc	e9 e1 06 00 00	 jmp	 $LN51@MainDialog
$LN50@MainDialog:

; 901  : 
; 902  : 
; 903  : 	case WM_COMMAND:
; 904  : 		if (lw == IDHELP)

  005c1	66 83 ff 09	 cmp	 di, 9
  005c5	75 21		 jne	 SHORT $LN49@MainDialog

; 905  : 		{
; 906  : 			if (bLicenseAccepted)

  005c7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bLicenseAccepted@@3HA, 0 ; bLicenseAccepted
  005ce	0f 84 ce 06 00
	00		 je	 $LN51@MainDialog

; 907  : 				OpenPageHelp (hwndDlg, nCurPageNo);

  005d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  005d9	50		 push	 eax
  005da	56		 push	 esi
  005db	e8 00 00 00 00	 call	 _OpenPageHelp
  005e0	83 c4 08	 add	 esp, 8

; 908  : 
; 909  : 			return 1;

  005e3	e9 ba 06 00 00	 jmp	 $LN51@MainDialog
$LN49@MainDialog:

; 910  : 		}
; 911  : 		if (lw == IDCANCEL)

  005e8	66 83 ff 02	 cmp	 di, 2
  005ec	75 12		 jne	 SHORT $LN47@MainDialog

; 912  : 		{
; 913  : 			PostMessage (hwndDlg, WM_CLOSE, 0, 0);

  005ee	33 ed		 xor	 ebp, ebp
  005f0	55		 push	 ebp
  005f1	55		 push	 ebp
  005f2	6a 10		 push	 16			; 00000010H
  005f4	56		 push	 esi
  005f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 914  : 			return 1;

  005fb	e9 a2 06 00 00	 jmp	 $LN51@MainDialog
$LN47@MainDialog:

; 915  : 		}
; 916  : 		if (lw == IDC_NEXT)

  00600	b9 02 04 00 00	 mov	 ecx, 1026		; 00000402H
  00605	66 3b f9	 cmp	 di, cx
  00608	0f 85 f3 01 00
	00		 jne	 $LN46@MainDialog

; 917  : 		{
; 918  : 			if (nCurPageNo == INTRO_PAGE)

  0060e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00613	33 ed		 xor	 ebp, ebp
  00615	3b c5		 cmp	 eax, ebp
  00617	0f 85 b0 00 00
	00		 jne	 $LN45@MainDialog

; 919  : 			{
; 920  : 				if (!IsButtonChecked (GetDlgItem (hCurPage, IDC_AGREE)))

  0061d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00623	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00629	68 fe 03 00 00	 push	 1022			; 000003feH
  0062e	52		 push	 edx
  0062f	ff d7		 call	 edi
  00631	50		 push	 eax
  00632	e8 00 00 00 00	 call	 _IsButtonChecked
  00637	83 c4 04	 add	 esp, 4
  0063a	85 c0		 test	 eax, eax
  0063c	75 0b		 jne	 SHORT $LN44@MainDialog

; 921  : 				{
; 922  : 					bLicenseAccepted = FALSE;

  0063e	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bLicenseAccepted@@3HA, ebp ; bLicenseAccepted

; 923  : 					return 1;

  00644	e9 59 06 00 00	 jmp	 $LN51@MainDialog
$LN44@MainDialog:

; 924  : 				}
; 925  : 				bLicenseAccepted = TRUE;
; 926  : 				EnableWindow (GetDlgItem (hwndDlg, IDHELP), TRUE);

  00649	6a 01		 push	 1
  0064b	6a 09		 push	 9
  0064d	56		 push	 esi
  0064e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bLicenseAccepted@@3HA, 1 ; bLicenseAccepted
  00658	ff d7		 call	 edi
  0065a	50		 push	 eax
  0065b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 927  : 
; 928  : 				if (nCurrentOS == WIN_2000)

  00661	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _nCurrentOS, 7
  00668	75 49		 jne	 SHORT $LN122@MainDialog

; 929  : 				{
; 930  : 					WarningDirect (L"Warning: Please note that this may be the last version of CipherShed that supports Windows 2000. If you want to be able to upgrade to future versions of CipherShed (which is highly recommended), you will need to upgrade to Windows XP or a later version of Windows.\n\nNote: Microsoft stopped issuing security updates for Windows 2000 to the general public on 7/13/2010 (the last non-security update for Windows 2000 was issued to the general public in 2005).");

  0066a	68 00 00 00 00	 push	 OFFSET ??_C@_1DJC@HALCKFBP@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAP?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?5?$AAn?$AAo?$AAt?$AAe?$AA?5?$AAt?$AAh?$AAa?$AAt?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?5?$AAm@
  0066f	e8 00 00 00 00	 call	 _WarningDirect
  00674	83 c4 04	 add	 esp, 4

; 931  : 
; 932  : 
; 933  : 					HKEY hkey;
; 934  : 
; 935  : 					if (RegOpenKeyEx (HKEY_LOCAL_MACHINE, "SOFTWARE\\Microsoft\\Updates\\Windows 2000\\SP5\\Update Rollup 1", 0, KEY_READ, &hkey) != ERROR_SUCCESS)

  00677	8d 44 24 30	 lea	 eax, DWORD PTR _hkey$95973[esp+136]
  0067b	50		 push	 eax
  0067c	68 19 00 02 00	 push	 131097			; 00020019H
  00681	55		 push	 ebp
  00682	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@BHNBHIPG@SOFTWARE?2Microsoft?2Updates?2Windo@
  00687	68 02 00 00 80	 push	 -2147483646		; 80000002H
  0068c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  00692	85 c0		 test	 eax, eax
  00694	74 12		 je	 SHORT $LN42@MainDialog

; 936  : 					{
; 937  : 						ErrorDirect (L"CipherShed requires Update Rollup 1 for Windows 2000 SP4 to be installed.\n\nFor more information, see http://support.microsoft.com/kb/891861");

  00696	68 00 00 00 00	 push	 OFFSET ??_C@_1BBI@MKDPBCB@?$AAC?$AAi?$AAp?$AAh?$AAe?$AAr?$AAS?$AAh?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAs?$AA?5?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AA?5?$AAR?$AAo?$AAl?$AAl?$AAu@
  0069b	e8 00 00 00 00	 call	 _ErrorDirect
  006a0	83 c4 04	 add	 esp, 4

; 938  : 						AbortProcessSilent ();

  006a3	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN42@MainDialog:

; 939  : 					}
; 940  : 
; 941  : 					RegCloseKey (hkey);

  006a8	8b 4c 24 30	 mov	 ecx, DWORD PTR _hkey$95973[esp+136]
  006ac	51		 push	 ecx
  006ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
$LN122@MainDialog:

; 942  : 				}
; 943  : 			}

  006b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
$LN26@MainDialog:

; 1002 : 			}
; 1003 : 
; 1004 : 			LoadPage (hwndDlg, ++nCurPageNo);

  006b8	40		 inc	 eax
  006b9	50		 push	 eax
  006ba	56		 push	 esi
  006bb	a3 00 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, eax ; nCurPageNo
  006c0	e8 00 00 00 00	 call	 ?LoadPage@@YAXPAUHWND__@@H@Z ; LoadPage
  006c5	83 c4 08	 add	 esp, 8

; 1005 : 
; 1006 : 			return 1;

  006c8	e9 d5 05 00 00	 jmp	 $LN51@MainDialog
$LN45@MainDialog:

; 944  : 
; 945  : 			else if (nCurPageNo == WIZARD_MODE_PAGE)

  006cd	bf 01 00 00 00	 mov	 edi, 1
  006d2	3b c7		 cmp	 eax, edi
  006d4	0f 85 8d 00 00
	00		 jne	 $LN40@MainDialog

; 946  : 			{
; 947  : 				if (IsButtonChecked (GetDlgItem (hCurPage, IDC_WIZARD_MODE_EXTRACT_ONLY)))

  006da	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  006e0	68 01 04 00 00	 push	 1025			; 00000401H
  006e5	52		 push	 edx
  006e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  006ec	50		 push	 eax
  006ed	e8 00 00 00 00	 call	 _IsButtonChecked
  006f2	83 c4 04	 add	 esp, 4
  006f5	85 c0		 test	 eax, eax
  006f7	74 35		 je	 SHORT $LN39@MainDialog

; 948  : 				{
; 949  : 					Info ("TRAVELER_LIMITATIONS_NOTE");

  006f9	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@HICKIHM@TRAVELER_LIMITATIONS_NOTE?$AA@
  006fe	e8 00 00 00 00	 call	 _Info
  00703	83 c4 04	 add	 esp, 4

; 950  : 
; 951  : 					if (IsUacSupported() 
; 952  : 						&& AskWarnYesNo ("TRAVELER_UAC_NOTE") == IDNO)

  00706	e8 00 00 00 00	 call	 _IsUacSupported
  0070b	85 c0		 test	 eax, eax
  0070d	74 12		 je	 SHORT $LN38@MainDialog
  0070f	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NKLIMG@TRAVELER_UAC_NOTE?$AA@
  00714	e8 00 00 00 00	 call	 _AskWarnYesNo
  00719	83 c4 04	 add	 esp, 4
  0071c	83 f8 07	 cmp	 eax, 7

; 953  : 					{
; 954  : 						return 1;

  0071f	74 2f		 je	 SHORT $LN126@MainDialog
$LN38@MainDialog:

; 955  : 					}
; 956  : 
; 957  : 					bExtractOnly = TRUE;

  00721	89 3d 00 00 00
	00		 mov	 DWORD PTR ?bExtractOnly@@3HA, edi ; bExtractOnly

; 958  : 					nCurPageNo = EXTRACTION_OPTIONS_PAGE - 1;

  00727	b8 03 00 00 00	 mov	 eax, 3

; 959  : 				}
; 960  : 
; 961  : 				/* CipherShed migration note. */
; 962  : 				else if (bCipherShedMigration

  0072c	eb 8a		 jmp	 SHORT $LN26@MainDialog
$LN39@MainDialog:

; 963  : 					&& AskWarnYesNo("CIPHERSHED_MIGRATION_NOTE") == IDNO)

  0072e	39 2d 00 00 00
	00		 cmp	 DWORD PTR _bCipherShedMigration, ebp
  00734	0f 84 79 ff ff
	ff		 je	 $LN122@MainDialog
  0073a	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@BNLHLNNA@CIPHERSHED_MIGRATION_NOTE?$AA@
  0073f	e8 00 00 00 00	 call	 _AskWarnYesNo
  00744	83 c4 04	 add	 esp, 4
  00747	83 f8 07	 cmp	 eax, 7
  0074a	0f 85 63 ff ff
	ff		 jne	 $LN122@MainDialog
$LN126@MainDialog:

; 964  : 				{
; 965  : 					return 1;

  00750	8b c7		 mov	 eax, edi
  00752	5f		 pop	 edi
  00753	5e		 pop	 esi
  00754	5d		 pop	 ebp
  00755	5b		 pop	 ebx

; 1232 : }

  00756	8b 4c 24 74	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+120]
  0075a	33 cc		 xor	 ecx, esp
  0075c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00761	83 c4 78	 add	 esp, 120		; 00000078H
  00764	c2 10 00	 ret	 16			; 00000010H
$LN40@MainDialog:

; 966  : 				}
; 967  : 			}
; 968  : 
; 969  : 			else if (nCurPageNo == EXTRACTION_OPTIONS_PAGE)

  00767	83 f8 04	 cmp	 eax, 4
  0076a	75 2d		 jne	 SHORT $LN34@MainDialog

; 970  : 			{
; 971  : 				GetWindowTextA(GetDlgItem (hCurPage, IDC_DESTINATION), WizardDestExtractPath, sizeof (WizardDestExtractPath));

  0076c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00771	68 04 01 00 00	 push	 260			; 00000104H
  00776	68 00 00 00 00	 push	 OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  0077b	68 e8 03 00 00	 push	 1000			; 000003e8H
  00780	50		 push	 eax
  00781	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00787	50		 push	 eax
  00788	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 972  : 
; 973  : 				bStartExtraction = TRUE;

  0078e	89 3d 00 00 00
	00		 mov	 DWORD PTR ?bStartExtraction@@3HA, edi ; bStartExtraction
  00794	e9 1a ff ff ff	 jmp	 $LN122@MainDialog
$LN34@MainDialog:

; 974  : 			}
; 975  : 
; 976  : 			else if (nCurPageNo == INSTALL_OPTIONS_PAGE)

  00799	83 f8 02	 cmp	 eax, 2
  0079c	75 2e		 jne	 SHORT $LN32@MainDialog

; 977  : 			{
; 978  : 				GetWindowTextA(GetDlgItem (hCurPage, IDC_DESTINATION), WizardDestInstallPath, sizeof (WizardDestInstallPath));

  0079e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  007a4	68 04 01 00 00	 push	 260			; 00000104H
  007a9	68 00 00 00 00	 push	 OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  007ae	68 e8 03 00 00	 push	 1000			; 000003e8H
  007b3	51		 push	 ecx
  007b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  007ba	50		 push	 eax
  007bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 979  : 
; 980  : 				bStartInstall = TRUE;

  007c1	89 3d 00 00 00
	00		 mov	 DWORD PTR ?bStartInstall@@3HA, edi ; bStartInstall
  007c7	e9 e7 fe ff ff	 jmp	 $LN122@MainDialog
$LN32@MainDialog:

; 981  : 			}
; 982  : 
; 983  : 			else if (nCurPageNo == INSTALL_PROGRESS_PAGE)

  007cc	83 f8 03	 cmp	 eax, 3

; 984  : 			{
; 985  : 				PostMessage (hwndDlg, WM_CLOSE, 0, 0);
; 986  : 				return 1;

  007cf	74 0e		 je	 SHORT $LN127@MainDialog

; 987  : 			}
; 988  : 
; 989  : 			else if (nCurPageNo == EXTRACTION_PROGRESS_PAGE)

  007d1	83 f8 05	 cmp	 eax, 5

; 990  : 			{
; 991  : 				PostMessage (hwndDlg, WM_CLOSE, 0, 0);
; 992  : 				return 1;

  007d4	74 09		 je	 SHORT $LN127@MainDialog

; 993  : 			}
; 994  : 
; 995  : 			else if (nCurPageNo == DONATIONS_PAGE)

  007d6	83 f8 06	 cmp	 eax, 6
  007d9	0f 85 d9 fe ff
	ff		 jne	 $LN26@MainDialog
$LN127@MainDialog:

; 996  : 			{
; 997  : 				// 'Finish' button clicked
; 998  : 
; 999  : 				PostMessage (hwndDlg, WM_CLOSE, 0, 0);

  007df	55		 push	 ebp
  007e0	55		 push	 ebp
  007e1	6a 10		 push	 16			; 00000010H
  007e3	56		 push	 esi
  007e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 1000 : 
; 1001 : 				return 1;

  007ea	8b c7		 mov	 eax, edi
  007ec	5f		 pop	 edi
  007ed	5e		 pop	 esi
  007ee	5d		 pop	 ebp
  007ef	5b		 pop	 ebx

; 1232 : }

  007f0	8b 4c 24 74	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+120]
  007f4	33 cc		 xor	 ecx, esp
  007f6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007fb	83 c4 78	 add	 esp, 120		; 00000078H
  007fe	c2 10 00	 ret	 16			; 00000010H
$LN46@MainDialog:

; 1007 : 		}
; 1008 : 
; 1009 : 		if (lw == IDC_PREV)

  00801	ba 03 04 00 00	 mov	 edx, 1027		; 00000403H
  00806	66 3b fa	 cmp	 di, dx
  00809	0f 85 fb fc ff
	ff		 jne	 $LN54@MainDialog

; 1010 : 		{
; 1011 : 			if (nCurPageNo == WIZARD_MODE_PAGE)

  0080f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00814	83 f8 01	 cmp	 eax, 1
  00817	75 21		 jne	 SHORT $LN24@MainDialog

; 1012 : 			{
; 1013 : 				bExtractOnly = IsButtonChecked (GetDlgItem (hCurPage, IDC_WIZARD_MODE_EXTRACT_ONLY));

  00819	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  0081e	68 01 04 00 00	 push	 1025			; 00000401H
  00823	50		 push	 eax
  00824	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0082a	50		 push	 eax
  0082b	e8 00 00 00 00	 call	 _IsButtonChecked
  00830	83 c4 04	 add	 esp, 4
  00833	a3 00 00 00 00	 mov	 DWORD PTR ?bExtractOnly@@3HA, eax ; bExtractOnly
  00838	eb 57		 jmp	 SHORT $LN125@MainDialog
$LN24@MainDialog:

; 1014 : 			}
; 1015 : 
; 1016 : 			else if (nCurPageNo == EXTRACTION_OPTIONS_PAGE)

  0083a	83 f8 04	 cmp	 eax, 4
  0083d	75 2a		 jne	 SHORT $LN22@MainDialog

; 1017 : 			{
; 1018 : 				GetWindowTextA(GetDlgItem (hCurPage, IDC_DESTINATION), WizardDestExtractPath, sizeof (WizardDestExtractPath));

  0083f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00845	68 04 01 00 00	 push	 260			; 00000104H
  0084a	68 00 00 00 00	 push	 OFFSET ?WizardDestExtractPath@@3PADA ; WizardDestExtractPath
  0084f	68 e8 03 00 00	 push	 1000			; 000003e8H
  00854	51		 push	 ecx
  00855	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0085b	50		 push	 eax
  0085c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 1019 : 				nCurPageNo = WIZARD_MODE_PAGE + 1;

  00862	b8 02 00 00 00	 mov	 eax, 2
  00867	eb 2d		 jmp	 SHORT $LN20@MainDialog
$LN22@MainDialog:

; 1020 : 			}
; 1021 : 
; 1022 : 			else if (nCurPageNo == INSTALL_OPTIONS_PAGE)

  00869	83 f8 02	 cmp	 eax, 2
  0086c	75 28		 jne	 SHORT $LN20@MainDialog

; 1023 : 			{
; 1024 : 				GetWindowTextA(GetDlgItem (hCurPage, IDC_DESTINATION), WizardDestInstallPath, sizeof (WizardDestInstallPath));

  0086e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00874	68 04 01 00 00	 push	 260			; 00000104H
  00879	68 00 00 00 00	 push	 OFFSET ?WizardDestInstallPath@@3PADA ; WizardDestInstallPath
  0087e	68 e8 03 00 00	 push	 1000			; 000003e8H
  00883	52		 push	 edx
  00884	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0088a	50		 push	 eax
  0088b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12
$LN125@MainDialog:
  00891	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
$LN20@MainDialog:

; 1025 : 			}
; 1026 : 
; 1027 : 			LoadPage (hwndDlg, --nCurPageNo);

  00896	48		 dec	 eax
  00897	50		 push	 eax
  00898	56		 push	 esi
  00899	a3 00 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, eax ; nCurPageNo
  0089e	e8 00 00 00 00	 call	 ?LoadPage@@YAXPAUHWND__@@H@Z ; LoadPage
  008a3	83 c4 08	 add	 esp, 8

; 1028 : 
; 1029 : 			return 1;

  008a6	e9 f7 03 00 00	 jmp	 $LN51@MainDialog
$LN13@MainDialog:

; 1075 : 		}
; 1076 : 
; 1077 : 
; 1078 : 	case WM_ERASEBKGND:
; 1079 : 
; 1080 : 		return 0;
; 1081 : 
; 1082 : 
; 1083 : 
; 1084 : 	case TC_APPMSG_INSTALL_SUCCESS:
; 1085 : 		
; 1086 : 		/* Installation completed successfully */
; 1087 : 		
; 1088 : 		bInProgress = FALSE;
; 1089 : 
; 1090 : 		nCurPageNo = DONATIONS_PAGE;
; 1091 : 		LoadPage (hwndDlg, DONATIONS_PAGE);

  008ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  008b0	33 ed		 xor	 ebp, ebp
  008b2	bb 06 00 00 00	 mov	 ebx, 6
  008b7	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bInProgress@@3HA, ebp ; bInProgress
  008bd	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nCurPageNo@@3HA, ebx ; nCurPageNo
  008c3	3b c5		 cmp	 eax, ebp
  008c5	74 07		 je	 SHORT $LN105@MainDialog
  008c7	50		 push	 eax
  008c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
$LN105@MainDialog:
  008ce	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  008d3	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  008d9	6a 01		 push	 1
  008db	55		 push	 ebp
  008dc	68 07 04 00 00	 push	 1031			; 00000407H
  008e1	50		 push	 eax
  008e2	ff d7		 call	 edi
  008e4	50		 push	 eax
  008e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
  008eb	8d 4c 24 20	 lea	 ecx, DWORD PTR _rW$102743[esp+136]
  008ef	51		 push	 ecx
  008f0	68 05 04 00 00	 push	 1029			; 00000405H
  008f5	56		 push	 esi
  008f6	ff d7		 call	 edi
  008f8	50		 push	 eax
  008f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  008ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  00905	55		 push	 ebp
  00906	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0090b	56		 push	 esi
  0090c	6a 72		 push	 114			; 00000072H
  0090e	52		 push	 edx
  0090f	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nCurPageNo@@3HA, ebx ; nCurPageNo
  00915	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  0091b	a3 00 00 00 00	 mov	 DWORD PTR ?hCurPage@@3PAUHWND__@@A, eax ; hCurPage
  00920	8d 44 24 10	 lea	 eax, DWORD PTR _rD$102741[esp+136]
  00924	50		 push	 eax
  00925	56		 push	 esi
  00926	c7 44 24 18 0f
	00 00 00	 mov	 DWORD PTR _rD$102741[esp+144], 15 ; 0000000fH
  0092e	c7 44 24 1c 2d
	00 00 00	 mov	 DWORD PTR _rD$102741[esp+148], 45 ; 0000002dH
  00936	89 6c 24 20	 mov	 DWORD PTR _rD$102741[esp+152], ebp
  0093a	89 6c 24 24	 mov	 DWORD PTR _rD$102741[esp+156], ebp
  0093e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  00944	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00949	3b c5		 cmp	 eax, ebp
  0094b	74 33		 je	 SHORT $LN95@MainDialog
  0094d	8b 4c 24 2c	 mov	 ecx, DWORD PTR _rW$102743[esp+148]
  00951	2b 4c 24 24	 sub	 ecx, DWORD PTR _rW$102743[esp+140]
  00955	8b 54 24 28	 mov	 edx, DWORD PTR _rW$102743[esp+144]
  00959	2b 54 24 20	 sub	 edx, DWORD PTR _rW$102743[esp+136]
  0095d	6a 01		 push	 1
  0095f	51		 push	 ecx
  00960	8b 4c 24 1c	 mov	 ecx, DWORD PTR _rD$102741[esp+148]
  00964	52		 push	 edx
  00965	8b 54 24 1c	 mov	 edx, DWORD PTR _rD$102741[esp+148]
  00969	51		 push	 ecx
  0096a	52		 push	 edx
  0096b	50		 push	 eax
  0096c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  00972	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00977	6a 01		 push	 1
  00979	50		 push	 eax
  0097a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$LN95@MainDialog:
  00980	e8 00 00 00 00	 call	 _RefreshUIGFX

; 1092 : 
; 1093 : 		NormalCursor ();

  00985	e8 00 00 00 00	 call	 _NormalCursor

; 1094 : 
; 1095 : 		SetWindowTextW (GetDlgItem (hwndDlg, IDC_NEXT), GetString ("FINALIZE"));

  0098a	68 00 00 00 00	 push	 OFFSET ??_C@_08MFKGCNCO@FINALIZE?$AA@
  0098f	e8 00 00 00 00	 call	 _GetString
  00994	83 c4 04	 add	 esp, 4
  00997	50		 push	 eax
  00998	68 02 04 00 00	 push	 1026			; 00000402H
  0099d	56		 push	 esi
  0099e	ff d7		 call	 edi
  009a0	50		 push	 eax
  009a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 1096 : 
; 1097 : 		EnableWindow (GetDlgItem (hwndDlg, IDC_PREV), FALSE);

  009a7	55		 push	 ebp
  009a8	68 03 04 00 00	 push	 1027			; 00000403H
  009ad	56		 push	 esi
  009ae	ff d7		 call	 edi
  009b0	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  009b6	50		 push	 eax
  009b7	ff d3		 call	 ebx

; 1098 : 		EnableWindow (GetDlgItem (hwndDlg, IDC_NEXT), TRUE);

  009b9	6a 01		 push	 1
  009bb	68 02 04 00 00	 push	 1026			; 00000402H
  009c0	56		 push	 esi
  009c1	ff d7		 call	 edi
  009c3	50		 push	 eax
  009c4	ff d3		 call	 ebx

; 1099 : 		EnableWindow (GetDlgItem (hwndDlg, IDHELP), FALSE);

  009c6	55		 push	 ebp
  009c7	6a 09		 push	 9
  009c9	56		 push	 esi
  009ca	ff d7		 call	 edi
  009cc	50		 push	 eax
  009cd	ff d3		 call	 ebx

; 1100 : 		EnableWindow (GetDlgItem (hwndDlg, IDCANCEL), FALSE);

  009cf	55		 push	 ebp
  009d0	6a 02		 push	 2
  009d2	56		 push	 esi
  009d3	ff d7		 call	 edi
  009d5	50		 push	 eax
  009d6	ff d3		 call	 ebx

; 1101 : 
; 1102 : 
; 1103 : 		RefreshUIGFX ();
; 1104 : 		return 1;

  009d8	e9 c0 02 00 00	 jmp	 $LN123@MainDialog
$LN68@MainDialog:

; 831  : 	WORD lw = LOWORD (wParam);
; 832  : 
; 833  : 	switch (uMsg)

  009dd	2d 93 81 00 00	 sub	 eax, 33171		; 00008193H
  009e2	0f 84 59 01 00
	00		 je	 $LN11@MainDialog
  009e8	83 e8 01	 sub	 eax, 1
  009eb	0f 84 c1 00 00
	00		 je	 $LN12@MainDialog
  009f1	83 e8 02	 sub	 eax, 2

; 1229 : 	}
; 1230 : 
; 1231 : 	return 0;

  009f4	0f 85 10 fb ff
	ff		 jne	 $LN54@MainDialog
  009fa	33 ed		 xor	 ebp, ebp
  009fc	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bInProgress@@3HA, ebp ; bInProgress
  00a02	e8 00 00 00 00	 call	 _NormalCursor
  00a07	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00a0d	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GODHAKFG@EXTRACTION_FAILED?$AA@
  00a12	51		 push	 ecx
  00a13	e8 00 00 00 00	 call	 _StatusMessage
  00a18	55		 push	 ebp
  00a19	e8 00 00 00 00	 call	 _UpdateProgressBarProc
  00a1e	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GODHAKFG@EXTRACTION_FAILED?$AA@
  00a23	e8 00 00 00 00	 call	 _GetString
  00a28	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00a2e	83 c4 10	 add	 esp, 16			; 00000010H
  00a31	50		 push	 eax
  00a32	68 e9 03 00 00	 push	 1001			; 000003e9H
  00a37	56		 push	 esi
  00a38	ff d7		 call	 edi
  00a3a	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetWindowTextW@8
  00a40	50		 push	 eax
  00a41	ff d3		 call	 ebx
  00a43	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  00a48	68 eb 03 00 00	 push	 1003			; 000003ebH
  00a4d	56		 push	 esi
  00a4e	ff d7		 call	 edi
  00a50	50		 push	 eax
  00a51	ff d3		 call	 ebx
  00a53	68 00 00 00 00	 push	 OFFSET ??_C@_07CIAHAGHC@IDCLOSE?$AA@
  00a58	e8 00 00 00 00	 call	 _GetString
  00a5d	83 c4 04	 add	 esp, 4
  00a60	50		 push	 eax
  00a61	6a 02		 push	 2
  00a63	56		 push	 esi
  00a64	ff d7		 call	 edi
  00a66	50		 push	 eax
  00a67	ff d3		 call	 ebx
  00a69	6a 01		 push	 1
  00a6b	6a 09		 push	 9
  00a6d	56		 push	 esi
  00a6e	ff d7		 call	 edi
  00a70	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  00a76	50		 push	 eax
  00a77	ff d3		 call	 ebx
  00a79	55		 push	 ebp
  00a7a	68 03 04 00 00	 push	 1027			; 00000403H
  00a7f	56		 push	 esi
  00a80	ff d7		 call	 edi
  00a82	50		 push	 eax
  00a83	ff d3		 call	 ebx
  00a85	55		 push	 ebp
  00a86	68 02 04 00 00	 push	 1026			; 00000402H
  00a8b	56		 push	 esi
  00a8c	ff d7		 call	 edi
  00a8e	50		 push	 eax
  00a8f	ff d3		 call	 ebx
  00a91	6a 01		 push	 1
  00a93	6a 02		 push	 2
  00a95	56		 push	 esi
  00a96	ff d7		 call	 edi
  00a98	50		 push	 eax
  00a99	ff d3		 call	 ebx
  00a9b	e8 00 00 00 00	 call	 _RefreshUIGFX
  00aa0	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GODHAKFG@EXTRACTION_FAILED?$AA@
  00aa5	e8 00 00 00 00	 call	 _Error
  00aaa	83 c4 04	 add	 esp, 4
  00aad	e9 f0 01 00 00	 jmp	 $LN51@MainDialog
$LN12@MainDialog:

; 1105 : 
; 1106 : 	case TC_APPMSG_INSTALL_FAILURE:
; 1107 : 		
; 1108 : 		/* Installation failed */
; 1109 : 
; 1110 : 		bInProgress = FALSE;

  00ab2	33 ed		 xor	 ebp, ebp
  00ab4	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bInProgress@@3HA, ebp ; bInProgress

; 1111 : 
; 1112 : 		NormalCursor ();

  00aba	e8 00 00 00 00	 call	 _NormalCursor

; 1113 : 
; 1114 : 		SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_TITLE), GetString ("INSTALL_FAILED"));

  00abf	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DHOALJNC@INSTALL_FAILED?$AA@
  00ac4	e8 00 00 00 00	 call	 _GetString
  00ac9	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00acf	83 c4 04	 add	 esp, 4
  00ad2	50		 push	 eax
  00ad3	68 e9 03 00 00	 push	 1001			; 000003e9H
  00ad8	56		 push	 esi
  00ad9	ff d7		 call	 edi
  00adb	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetWindowTextW@8
  00ae1	50		 push	 eax
  00ae2	ff d3		 call	 ebx

; 1115 : 		SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_INFO), L"");

  00ae4	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  00ae9	68 eb 03 00 00	 push	 1003			; 000003ebH
  00aee	56		 push	 esi
  00aef	ff d7		 call	 edi
  00af1	50		 push	 eax
  00af2	ff d3		 call	 ebx

; 1116 : 
; 1117 : 		SetWindowTextW (GetDlgItem (hwndDlg, IDCANCEL), GetString ("IDCLOSE"));

  00af4	68 00 00 00 00	 push	 OFFSET ??_C@_07CIAHAGHC@IDCLOSE?$AA@
  00af9	e8 00 00 00 00	 call	 _GetString
  00afe	83 c4 04	 add	 esp, 4
  00b01	50		 push	 eax
  00b02	6a 02		 push	 2
  00b04	56		 push	 esi
  00b05	ff d7		 call	 edi
  00b07	50		 push	 eax
  00b08	ff d3		 call	 ebx

; 1118 : 		EnableWindow (GetDlgItem (hwndDlg, IDHELP), TRUE);

  00b0a	6a 01		 push	 1
  00b0c	6a 09		 push	 9
  00b0e	56		 push	 esi
  00b0f	ff d7		 call	 edi
  00b11	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  00b17	50		 push	 eax
  00b18	ff d3		 call	 ebx

; 1119 : 		EnableWindow (GetDlgItem (hwndDlg, IDC_PREV), FALSE);

  00b1a	55		 push	 ebp
  00b1b	68 03 04 00 00	 push	 1027			; 00000403H
  00b20	56		 push	 esi
  00b21	ff d7		 call	 edi
  00b23	50		 push	 eax
  00b24	ff d3		 call	 ebx

; 1120 : 		EnableWindow (GetDlgItem (hwndDlg, IDC_NEXT), FALSE);

  00b26	55		 push	 ebp
  00b27	68 02 04 00 00	 push	 1026			; 00000402H
  00b2c	56		 push	 esi
  00b2d	ff d7		 call	 edi
  00b2f	50		 push	 eax
  00b30	ff d3		 call	 ebx

; 1121 : 		EnableWindow (GetDlgItem (hwndDlg, IDCANCEL), TRUE);

  00b32	6a 01		 push	 1
  00b34	6a 02		 push	 2
  00b36	56		 push	 esi
  00b37	ff d7		 call	 edi
  00b39	50		 push	 eax
  00b3a	ff d3		 call	 ebx

; 1122 : 
; 1123 : 		RefreshUIGFX();
; 1124 : 
; 1125 : 		return 1;

  00b3c	e9 5c 01 00 00	 jmp	 $LN123@MainDialog
$LN11@MainDialog:

; 1126 : 
; 1127 : 	case TC_APPMSG_EXTRACTION_SUCCESS:
; 1128 : 		
; 1129 : 		/* Extraction completed successfully */
; 1130 : 
; 1131 : 		UpdateProgressBarProc(100);

  00b41	6a 64		 push	 100			; 00000064H
  00b43	e8 00 00 00 00	 call	 _UpdateProgressBarProc

; 1132 : 
; 1133 : 		bInProgress = FALSE;

  00b48	33 ed		 xor	 ebp, ebp
  00b4a	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bInProgress@@3HA, ebp ; bInProgress

; 1134 : 		bExtractionSuccessful = TRUE;

  00b50	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bExtractionSuccessful@@3HA, 1 ; bExtractionSuccessful

; 1135 : 
; 1136 : 		NormalCursor ();

  00b5a	e8 00 00 00 00	 call	 _NormalCursor

; 1137 : 
; 1138 : 		StatusMessage (hCurPage, "EXTRACTION_FINISHED_INFO");

  00b5f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00b65	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LLBBBPBJ@EXTRACTION_FINISHED_INFO?$AA@
  00b6a	52		 push	 edx
  00b6b	e8 00 00 00 00	 call	 _StatusMessage

; 1139 : 
; 1140 : 		EnableWindow (GetDlgItem (hwndDlg, IDC_PREV), FALSE);

  00b70	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00b76	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b79	55		 push	 ebp
  00b7a	68 03 04 00 00	 push	 1027			; 00000403H
  00b7f	56		 push	 esi
  00b80	ff d7		 call	 edi
  00b82	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  00b88	50		 push	 eax
  00b89	ff d3		 call	 ebx

; 1141 : 		EnableWindow (GetDlgItem (hwndDlg, IDC_NEXT), TRUE);

  00b8b	6a 01		 push	 1
  00b8d	68 02 04 00 00	 push	 1026			; 00000402H
  00b92	56		 push	 esi
  00b93	ff d7		 call	 edi
  00b95	50		 push	 eax
  00b96	ff d3		 call	 ebx

; 1142 : 		EnableWindow (GetDlgItem (hwndDlg, IDHELP), FALSE);

  00b98	55		 push	 ebp
  00b99	6a 09		 push	 9
  00b9b	56		 push	 esi
  00b9c	ff d7		 call	 edi
  00b9e	50		 push	 eax
  00b9f	ff d3		 call	 ebx

; 1143 : 		EnableWindow (GetDlgItem (hwndDlg, IDCANCEL), FALSE);

  00ba1	55		 push	 ebp
  00ba2	6a 02		 push	 2
  00ba4	56		 push	 esi
  00ba5	ff d7		 call	 edi
  00ba7	50		 push	 eax
  00ba8	ff d3		 call	 ebx

; 1144 : 
; 1145 : 		RefreshUIGFX ();

  00baa	e8 00 00 00 00	 call	 _RefreshUIGFX

; 1146 : 
; 1147 : 		Info ("EXTRACTION_FINISHED_INFO");

  00baf	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LLBBBPBJ@EXTRACTION_FINISHED_INFO?$AA@
  00bb4	e8 00 00 00 00	 call	 _Info

; 1148 : 
; 1149 : 		SetWindowTextW (GetDlgItem (hwndDlg, IDC_NEXT), GetString ("FINALIZE"));

  00bb9	68 00 00 00 00	 push	 OFFSET ??_C@_08MFKGCNCO@FINALIZE?$AA@
  00bbe	e8 00 00 00 00	 call	 _GetString
  00bc3	83 c4 08	 add	 esp, 8
  00bc6	50		 push	 eax
  00bc7	68 02 04 00 00	 push	 1026			; 00000402H
  00bcc	56		 push	 esi
  00bcd	ff d7		 call	 edi
  00bcf	50		 push	 eax
  00bd0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 1150 : 
; 1151 : 		nCurPageNo = DONATIONS_PAGE;
; 1152 : 		LoadPage (hwndDlg, DONATIONS_PAGE);

  00bd6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00bdb	bb 06 00 00 00	 mov	 ebx, 6
  00be0	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nCurPageNo@@3HA, ebx ; nCurPageNo
  00be6	3b c5		 cmp	 eax, ebp
  00be8	74 07		 je	 SHORT $LN118@MainDialog
  00bea	50		 push	 eax
  00beb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
$LN118@MainDialog:
  00bf1	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00bf6	6a 01		 push	 1
  00bf8	55		 push	 ebp
  00bf9	68 07 04 00 00	 push	 1031			; 00000407H
  00bfe	50		 push	 eax
  00bff	ff d7		 call	 edi
  00c01	50		 push	 eax
  00c02	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
  00c08	8d 4c 24 20	 lea	 ecx, DWORD PTR _rW$102758[esp+136]
  00c0c	51		 push	 ecx
  00c0d	68 05 04 00 00	 push	 1029			; 00000405H
  00c12	56		 push	 esi
  00c13	ff d7		 call	 edi
  00c15	50		 push	 eax
  00c16	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00c1c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  00c22	55		 push	 ebp
  00c23	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00c28	56		 push	 esi
  00c29	6a 72		 push	 114			; 00000072H
  00c2b	52		 push	 edx
  00c2c	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nCurPageNo@@3HA, ebx ; nCurPageNo
  00c32	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  00c38	a3 00 00 00 00	 mov	 DWORD PTR ?hCurPage@@3PAUHWND__@@A, eax ; hCurPage
  00c3d	8d 44 24 10	 lea	 eax, DWORD PTR _rD$102757[esp+136]
  00c41	50		 push	 eax
  00c42	56		 push	 esi
  00c43	c7 44 24 18 0f
	00 00 00	 mov	 DWORD PTR _rD$102757[esp+144], 15 ; 0000000fH
  00c4b	c7 44 24 1c 2d
	00 00 00	 mov	 DWORD PTR _rD$102757[esp+148], 45 ; 0000002dH
  00c53	89 6c 24 20	 mov	 DWORD PTR _rD$102757[esp+152], ebp
  00c57	89 6c 24 24	 mov	 DWORD PTR _rD$102757[esp+156], ebp
  00c5b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  00c61	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00c66	3b c5		 cmp	 eax, ebp
  00c68	74 33		 je	 SHORT $LN123@MainDialog
  00c6a	8b 4c 24 2c	 mov	 ecx, DWORD PTR _rW$102758[esp+148]
  00c6e	2b 4c 24 24	 sub	 ecx, DWORD PTR _rW$102758[esp+140]
  00c72	8b 54 24 28	 mov	 edx, DWORD PTR _rW$102758[esp+144]
  00c76	2b 54 24 20	 sub	 edx, DWORD PTR _rW$102758[esp+136]
  00c7a	6a 01		 push	 1
  00c7c	51		 push	 ecx
  00c7d	8b 4c 24 1c	 mov	 ecx, DWORD PTR _rD$102757[esp+148]
  00c81	52		 push	 edx
  00c82	8b 54 24 1c	 mov	 edx, DWORD PTR _rD$102757[esp+148]
  00c86	51		 push	 ecx
  00c87	52		 push	 edx
  00c88	50		 push	 eax
  00c89	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  00c8f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCurPage@@3PAUHWND__@@A ; hCurPage
  00c94	6a 01		 push	 1
  00c96	50		 push	 eax
  00c97	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$LN123@MainDialog:
  00c9d	e8 00 00 00 00	 call	 _RefreshUIGFX
$LN51@MainDialog:

; 1232 : }

  00ca2	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+136]
  00ca9	5f		 pop	 edi
  00caa	5e		 pop	 esi
  00cab	5d		 pop	 ebp
  00cac	5b		 pop	 ebx
  00cad	33 cc		 xor	 ecx, esp
  00caf	b8 01 00 00 00	 mov	 eax, 1
  00cb4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00cb9	83 c4 78	 add	 esp, 120		; 00000078H
  00cbc	c2 10 00	 ret	 16			; 00000010H
  00cbf	90		 npad	 1
$LN128@MainDialog:
  00cc0	00 00 00 00	 DD	 $LN19@MainDialog
  00cc4	00 00 00 00	 DD	 $LN9@MainDialog
  00cc8	00 00 00 00	 DD	 $LN54@MainDialog
  00ccc	00 00 00 00	 DD	 $LN52@MainDialog
  00cd0	00 00 00 00	 DD	 $LN54@MainDialog
$LN121@MainDialog:
  00cd4	00		 DB	 0
  00cd5	01		 DB	 1
  00cd6	04		 DB	 4
  00cd7	04		 DB	 4
  00cd8	04		 DB	 4
  00cd9	02		 DB	 2
  00cda	04		 DB	 4
  00cdb	04		 DB	 4
  00cdc	04		 DB	 4
  00cdd	04		 DB	 4
  00cde	04		 DB	 4
  00cdf	04		 DB	 4
  00ce0	04		 DB	 4
  00ce1	04		 DB	 4
  00ce2	04		 DB	 4
  00ce3	04		 DB	 4
  00ce4	04		 DB	 4
  00ce5	04		 DB	 4
  00ce6	04		 DB	 4
  00ce7	04		 DB	 4
  00ce8	04		 DB	 4
  00ce9	04		 DB	 4
  00cea	04		 DB	 4
  00ceb	04		 DB	 4
  00cec	04		 DB	 4
  00ced	04		 DB	 4
  00cee	04		 DB	 4
  00cef	04		 DB	 4
  00cf0	04		 DB	 4
  00cf1	04		 DB	 4
  00cf2	04		 DB	 4
  00cf3	04		 DB	 4
  00cf4	04		 DB	 4
  00cf5	04		 DB	 4
  00cf6	04		 DB	 4
  00cf7	04		 DB	 4
  00cf8	04		 DB	 4
  00cf9	04		 DB	 4
  00cfa	04		 DB	 4
  00cfb	04		 DB	 4
  00cfc	04		 DB	 4
  00cfd	04		 DB	 4
  00cfe	04		 DB	 4
  00cff	04		 DB	 4
  00d00	04		 DB	 4
  00d01	04		 DB	 4
  00d02	04		 DB	 4
  00d03	04		 DB	 4
  00d04	04		 DB	 4
  00d05	04		 DB	 4
  00d06	04		 DB	 4
  00d07	04		 DB	 4
  00d08	04		 DB	 4
  00d09	04		 DB	 4
  00d0a	04		 DB	 4
  00d0b	04		 DB	 4
  00d0c	04		 DB	 4
  00d0d	04		 DB	 4
  00d0e	04		 DB	 4
  00d0f	04		 DB	 4
  00d10	04		 DB	 4
  00d11	04		 DB	 4
  00d12	04		 DB	 4
  00d13	04		 DB	 4
  00d14	04		 DB	 4
  00d15	04		 DB	 4
  00d16	04		 DB	 4
  00d17	04		 DB	 4
  00d18	03		 DB	 3
_MainDialogProc@16 ENDP
_TEXT	ENDS
PUBLIC	?DonText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A ; DonText
EXTRN	_atexit:PROC
_DATA	SEGMENT
?DonText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A DB 04H DUP (?)
	DW	00H					; DonText
	DB	14 DUP(00H)
	DD	00H
	DD	07H
; Function compile flags: /Ogtpy
_DATA	ENDS
;	COMDAT ??__EDonText@@YAXXZ
text$yc	SEGMENT
??__EDonText@@YAXXZ PROC				; `dynamic initializer for 'DonText'', COMDAT

; 66   : wstring DonText = L"";

  00000	6a 00		 push	 0
  00002	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET ?DonText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A ; DonText
  0000c	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00011	68 00 00 00 00	 push	 OFFSET ??__FDonText@@YAXXZ ; `dynamic atexit destructor for 'DonText''
  00016	e8 00 00 00 00	 call	 _atexit
  0001b	59		 pop	 ecx
  0001c	c3		 ret	 0
??__EDonText@@YAXXZ ENDP				; `dynamic initializer for 'DonText''
; Function compile flags: /Ogtpy
text$yc	ENDS
;	COMDAT ??__FDonText@@YAXXZ
text$yd	SEGMENT
??__FDonText@@YAXXZ PROC				; `dynamic atexit destructor for 'DonText'', COMDAT
  00000	83 3d 18 00 00
	00 08		 cmp	 DWORD PTR ?DonText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+24, 8
  00007	72 0e		 jb	 SHORT $LN21@dynamic
  00009	a1 04 00 00 00	 mov	 eax, DWORD PTR ?DonText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+4
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
$LN21@dynamic:
  00017	33 c9		 xor	 ecx, ecx
  00019	c7 05 18 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?DonText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+24, 7
  00023	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?DonText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+20, 0
  0002d	66 89 0d 04 00
	00 00		 mov	 WORD PTR ?DonText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+4, cx
  00034	c3		 ret	 0
??__FDonText@@YAXXZ ENDP				; `dynamic atexit destructor for 'DonText''
text$yd	ENDS
CRT$XCU	SEGMENT
_DonText$initializer$ DD FLAT:??__EDonText@@YAXXZ
CRT$XCU	ENDS
END
