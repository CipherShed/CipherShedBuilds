; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\home\public\Desktop\projects\ciphershed.build\src\Common\Progress.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
_bProgressBarReverse DD 01H DUP (?)
_bRWThroughput DD 01H DUP (?)
_bShowStatus DD	01H DUP (?)
_bPercentMode DD 01H DUP (?)
_BSS	ENDS
PUBLIC	??_C@_04EFPNNCJL@DAYS?$AA@			; `string'
PUBLIC	??_C@_05HFOIBCBM@HOURS?$AA@			; `string'
PUBLIC	??_C@_07JPNPDFOO@MINUTES?$AA@			; `string'
PUBLIC	??_C@_07JJOGDNLC@SECONDS?$AA@			; `string'
PUBLIC	_InitProgressBar
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	_GetString:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	_hCurPage:DWORD
EXTRN	_nPbar:DWORD
_BSS	SEGMENT
_resumedPointBytesDone DQ 01H DUP (?)
_TotalSize DQ	01H DUP (?)
_prevTime DD	01H DUP (?)
_startTime DD	01H DUP (?)
_days	DD	01H DUP (?)
_hours	DD	01H DUP (?)
_minutes DD	01H DUP (?)
_seconds DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_04EFPNNCJL@DAYS?$AA@
; File c:\home\public\desktop\projects\ciphershed.build\src\common\progress.c
CONST	SEGMENT
??_C@_04EFPNNCJL@DAYS?$AA@ DB 'DAYS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HFOIBCBM@HOURS?$AA@
CONST	SEGMENT
??_C@_05HFOIBCBM@HOURS?$AA@ DB 'HOURS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JPNPDFOO@MINUTES?$AA@
CONST	SEGMENT
??_C@_07JPNPDFOO@MINUTES?$AA@ DB 'MINUTES', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JJOGDNLC@SECONDS?$AA@
CONST	SEGMENT
??_C@_07JJOGDNLC@SECONDS?$AA@ DB 'SECONDS', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _InitProgressBar
_TEXT	SEGMENT
_totalBytes$ = 8					; size = 8
_bytesDone$ = 16					; size = 8
_bReverse$ = 24						; size = 4
_bIOThroughput$ = 28					; size = 4
_bDisplayStatus$ = 32					; size = 4
_bShowPercent$ = 36					; size = 4
_InitProgressBar PROC					; COMDAT

; 35   : 	HWND hProgressBar = GetDlgItem (hCurPage, nPbar);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _nPbar
  00005	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8

; 36   : 	SendMessage (hProgressBar, PBM_SETRANGE32, 0, 10000);

  00015	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  0001b	68 10 27 00 00	 push	 10000			; 00002710H
  00020	6a 00		 push	 0
  00022	8b f0		 mov	 esi, eax
  00024	68 06 04 00 00	 push	 1030			; 00000406H
  00029	56		 push	 esi
  0002a	ff d7		 call	 edi

; 37   : 	SendMessage (hProgressBar, PBM_SETSTEP, 1, 0);

  0002c	6a 00		 push	 0
  0002e	6a 01		 push	 1
  00030	68 04 04 00 00	 push	 1028			; 00000404H
  00035	56		 push	 esi
  00036	ff d7		 call	 edi

; 38   : 
; 39   : 	bProgressBarReverse = bReverse;

  00038	8b 54 24 1c	 mov	 edx, DWORD PTR _bReverse$[esp+4]

; 40   : 	bRWThroughput = bIOThroughput;

  0003c	8b 44 24 20	 mov	 eax, DWORD PTR _bIOThroughput$[esp+4]

; 41   : 	bShowStatus = bDisplayStatus;

  00040	8b 4c 24 24	 mov	 ecx, DWORD PTR _bDisplayStatus$[esp+4]
  00044	89 15 00 00 00
	00		 mov	 DWORD PTR _bProgressBarReverse, edx

; 42   : 	bPercentMode = bShowPercent;

  0004a	8b 54 24 28	 mov	 edx, DWORD PTR _bShowPercent$[esp+4]

; 43   : 
; 44   : 	seconds = GetString ("SECONDS");

  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_07JJOGDNLC@SECONDS?$AA@
  00053	a3 00 00 00 00	 mov	 DWORD PTR _bRWThroughput, eax
  00058	89 0d 00 00 00
	00		 mov	 DWORD PTR _bShowStatus, ecx
  0005e	89 15 00 00 00
	00		 mov	 DWORD PTR _bPercentMode, edx
  00064	e8 00 00 00 00	 call	 _GetString

; 45   : 	minutes = GetString ("MINUTES");

  00069	68 00 00 00 00	 push	 OFFSET ??_C@_07JPNPDFOO@MINUTES?$AA@
  0006e	a3 00 00 00 00	 mov	 DWORD PTR _seconds, eax
  00073	e8 00 00 00 00	 call	 _GetString

; 46   : 	hours = GetString ("HOURS");

  00078	68 00 00 00 00	 push	 OFFSET ??_C@_05HFOIBCBM@HOURS?$AA@
  0007d	a3 00 00 00 00	 mov	 DWORD PTR _minutes, eax
  00082	e8 00 00 00 00	 call	 _GetString

; 47   : 	days = GetString ("DAYS");

  00087	68 00 00 00 00	 push	 OFFSET ??_C@_04EFPNNCJL@DAYS?$AA@
  0008c	a3 00 00 00 00	 mov	 DWORD PTR _hours, eax
  00091	e8 00 00 00 00	 call	 _GetString
  00096	83 c4 10	 add	 esp, 16			; 00000010H
  00099	a3 00 00 00 00	 mov	 DWORD PTR _days, eax

; 48   : 
; 49   : 	prevTime = startTime = GetTickCount ();

  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 50   : 	TotalSize = totalBytes;

  000a4	8b 4c 24 10	 mov	 ecx, DWORD PTR _totalBytes$[esp+8]

; 51   : 	resumedPointBytesDone = bytesDone;

  000a8	8b 54 24 14	 mov	 edx, DWORD PTR _bytesDone$[esp+4]
  000ac	a3 00 00 00 00	 mov	 DWORD PTR _startTime, eax
  000b1	a3 00 00 00 00	 mov	 DWORD PTR _prevTime, eax
  000b6	8b 44 24 0c	 mov	 eax, DWORD PTR _totalBytes$[esp+4]
  000ba	a3 00 00 00 00	 mov	 DWORD PTR _TotalSize, eax
  000bf	8b 44 24 18	 mov	 eax, DWORD PTR _bytesDone$[esp+8]
  000c3	5f		 pop	 edi
  000c4	89 0d 04 00 00
	00		 mov	 DWORD PTR _TotalSize+4, ecx
  000ca	89 15 00 00 00
	00		 mov	 DWORD PTR _resumedPointBytesDone, edx
  000d0	a3 04 00 00 00	 mov	 DWORD PTR _resumedPointBytesDone+4, eax
  000d5	5e		 pop	 esi

; 52   : }

  000d6	c3		 ret	 0
_InitProgressBar ENDP
_TEXT	ENDS
PUBLIC	__real@40c3880000000000
PUBLIC	??_C@_17GMPJMPF@?$AA?$CF?$AAs?$AA?5?$AA?$AA@	; `string'
PUBLIC	??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@ ; `string'
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	??_C@_02KOENCFNK@PB?$AA@			; `string'
PUBLIC	??_C@_02KJEEINAG@TB?$AA@			; `string'
PUBLIC	??_C@_1BE@GLDKIDIH@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??_C@_02LHCEJACP@GB?$AA@			; `string'
PUBLIC	??_C@_02LKLDBFPJ@MB?$AA@			; `string'
PUBLIC	??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@		; `string'
PUBLIC	??_C@_0BM@HDAHKLF@PROCESSED_PORTION_X_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_0BO@DMHMPBKC@PROCESSED_PORTION_100_PERCENT?$AA@ ; `string'
PUBLIC	__real@4058fffffffeed1f
PUBLIC	__real@4059000000000000
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__$ArrayPad$
PUBLIC	_UpdateProgressBarProc
EXTRN	_bVolTransformThreadCancel:DWORD
EXTRN	_GetSpeedString:PROC
EXTRN	__imp__SetWindowTextW@8:PROC
EXTRN	__swprintf:PROC
EXTRN	_GetSizeString:PROC
EXTRN	__snwprintf:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__alldiv:PROC
EXTRN	__ftol2:PROC
EXTRN	__allmul:PROC
EXTRN	__aulldiv:PROC
;	COMDAT __real@40c3880000000000
CONST	SEGMENT
__real@40c3880000000000 DQ 040c3880000000000r	; 10000
CONST	ENDS
;	COMDAT ??_C@_17GMPJMPF@?$AA?$CF?$AAs?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_17GMPJMPF@?$AA?$CF?$AAs?$AA?5?$AA?$AA@ DB '%', 00H, 's', 00H, ' ', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@
CONST	SEGMENT
??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@ DB 'NOT_APPLICABL'
	DB	'E_OR_NOT_AVAILABLE', 00H			; `string'
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT ??_C@_02KOENCFNK@PB?$AA@
CONST	SEGMENT
??_C@_02KOENCFNK@PB?$AA@ DB 'PB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KJEEINAG@TB?$AA@
CONST	SEGMENT
??_C@_02KJEEINAG@TB?$AA@ DB 'TB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@GLDKIDIH@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@GLDKIDIH@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$AA@ DB '%'
	DB	00H, 'I', 00H, '6', 00H, '4', 00H, 'd', 00H, ' ', 00H, '%', 00H
	DB	's', 00H, ' ', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LHCEJACP@GB?$AA@
CONST	SEGMENT
??_C@_02LHCEJACP@GB?$AA@ DB 'GB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LKLDBFPJ@MB?$AA@
CONST	SEGMENT
??_C@_02LKLDBFPJ@MB?$AA@ DB 'MB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@ DB ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HDAHKLF@PROCESSED_PORTION_X_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BM@HDAHKLF@PROCESSED_PORTION_X_PERCENT?$AA@ DB 'PROCESSED_PORTION_'
	DB	'X_PERCENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DMHMPBKC@PROCESSED_PORTION_100_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BO@DMHMPBKC@PROCESSED_PORTION_100_PERCENT?$AA@ DB 'PROCESSED_PORTI'
	DB	'ON_100_PERCENT', 00H			; `string'
CONST	ENDS
;	COMDAT __real@4058fffffffeed1f
CONST	SEGMENT
__real@4058fffffffeed1f DQ 04058fffffffeed1fr	; 100
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _UpdateProgressBarProc
_TEXT	SEGMENT
tv570 = -428						; size = 4
tv469 = -428						; size = 8
tv466 = -428						; size = 8
tv254 = -428						; size = 8
_bytesPerSec$ = -428					; size = 8
tv572 = -420						; size = 8
tv370 = -420						; size = 8
tv250 = -420						; size = 8
tv204 = -420						; size = 8
tv567 = -412						; size = 2
_time$ = -412						; size = 4
_hProgressBar$ = -408					; size = 4
_text$ = -404						; size = 200
_speed$ = -204						; size = 200
__$ArrayPad$ = -4					; size = 4
_byteOffset$ = 8					; size = 8
_UpdateProgressBarProc PROC				; COMDAT

; 62   : {

  00000	81 ec ac 01 00
	00		 sub	 esp, 428		; 000001acH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 a8 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+428], eax

; 63   : 	wchar_t text[100];
; 64   : 	wchar_t speed[100];
; 65   : 	HWND hProgressBar = GetDlgItem (hCurPage, nPbar);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR _nPbar
  00019	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  0001f	53		 push	 ebx
  00020	55		 push	 ebp
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	51		 push	 ecx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0002b	89 44 24 24	 mov	 DWORD PTR _hProgressBar$[esp+444], eax

; 66   : 	int time = GetTickCount ();

  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 67   : 	int elapsed = (time - startTime) / 1000;
; 68   : 
; 69   : 	uint64 bytesDone = (bProgressBarReverse ? (TotalSize - byteOffset) : byteOffset);

  00035	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR _TotalSize
  0003b	8b d0		 mov	 edx, eax
  0003d	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR _startTime
  00043	89 44 24 20	 mov	 DWORD PTR _time$[esp+444], eax
  00047	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  0004c	f7 e2		 mul	 edx
  0004e	c1 ea 06	 shr	 edx, 6
  00051	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bProgressBarReverse, 0
  00058	74 2c		 je	 SHORT $LN24@UpdateProg
  0005a	8b bc 24 c0 01
	00 00		 mov	 edi, DWORD PTR _byteOffset$[esp+440]
  00061	8b 84 24 c4 01
	00 00		 mov	 eax, DWORD PTR _byteOffset$[esp+444]
  00068	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR _TotalSize+4

; 70   : 	uint64 bytesPerSec = (bProgressBarReverse ? (resumedPointBytesDone - byteOffset) : (bytesDone - resumedPointBytesDone)) / (elapsed + 1);

  0006e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _resumedPointBytesDone
  00074	8b dd		 mov	 ebx, ebp
  00076	2b df		 sub	 ebx, edi
  00078	1b f0		 sbb	 esi, eax
  0007a	2b cf		 sub	 ecx, edi
  0007c	8b 3d 04 00 00
	00		 mov	 edi, DWORD PTR _resumedPointBytesDone+4
  00082	1b f8		 sbb	 edi, eax
  00084	eb 1e		 jmp	 SHORT $LN27@UpdateProg
$LN24@UpdateProg:

; 67   : 	int elapsed = (time - startTime) / 1000;
; 68   : 
; 69   : 	uint64 bytesDone = (bProgressBarReverse ? (TotalSize - byteOffset) : byteOffset);

  00086	8b 8c 24 c0 01
	00 00		 mov	 ecx, DWORD PTR _byteOffset$[esp+440]
  0008d	8b b4 24 c4 01
	00 00		 mov	 esi, DWORD PTR _byteOffset$[esp+444]
  00094	8b d9		 mov	 ebx, ecx

; 70   : 	uint64 bytesPerSec = (bProgressBarReverse ? (resumedPointBytesDone - byteOffset) : (bytesDone - resumedPointBytesDone)) / (elapsed + 1);

  00096	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _resumedPointBytesDone
  0009c	8b fe		 mov	 edi, esi
  0009e	1b 3d 04 00 00
	00		 sbb	 edi, DWORD PTR _resumedPointBytesDone+4
$LN27@UpdateProg:
  000a4	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  000a7	99		 cdq
  000a8	52		 push	 edx
  000a9	50		 push	 eax
  000aa	57		 push	 edi
  000ab	51		 push	 ecx
  000ac	e8 00 00 00 00	 call	 __aulldiv

; 71   : 
; 72   : 	if (bPercentMode)

  000b1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bPercentMode, 0
  000b8	8b f8		 mov	 edi, eax
  000ba	89 7c 24 10	 mov	 DWORD PTR _bytesPerSec$[esp+444], edi
  000be	89 54 24 14	 mov	 DWORD PTR _bytesPerSec$[esp+448], edx
  000c2	0f 84 d4 00 00
	00		 je	 $LN21@UpdateProg

; 73   : 	{
; 74   : 		double perc = (double) (100.0 * (bProgressBarReverse ? ((double) (TotalSize - byteOffset)) : ((double) byteOffset)) / (TotalSize == 0 ? 0.0001 : ((double) TotalSize)));

  000c8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bProgressBarReverse, 0
  000cf	74 24		 je	 SHORT $LN28@UpdateProg
  000d1	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _TotalSize+4
  000d7	8b c5		 mov	 eax, ebp
  000d9	2b 84 24 c0 01
	00 00		 sub	 eax, DWORD PTR _byteOffset$[esp+440]
  000e0	1b 8c 24 c4 01
	00 00		 sbb	 ecx, DWORD PTR _byteOffset$[esp+444]
  000e7	89 44 24 18	 mov	 DWORD PTR tv370[esp+444], eax
  000eb	89 4c 24 1c	 mov	 DWORD PTR tv370[esp+448], ecx
  000ef	df 6c 24 18	 fild	 QWORD PTR tv370[esp+444]
  000f3	eb 07		 jmp	 SHORT $LN29@UpdateProg
$LN28@UpdateProg:
  000f5	df ac 24 c0 01
	00 00		 fild	 QWORD PTR _byteOffset$[esp+440]
$LN29@UpdateProg:
  000fc	0b 2d 04 00 00
	00		 or	 ebp, DWORD PTR _TotalSize+4
  00102	75 08		 jne	 SHORT $LN30@UpdateProg
  00104	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3f1a36e2eb1c432d
  0010a	eb 06		 jmp	 SHORT $LN31@UpdateProg
$LN30@UpdateProg:
  0010c	df 2d 00 00 00
	00		 fild	 QWORD PTR _TotalSize
$LN31@UpdateProg:
  00112	d9 c9		 fxch	 ST(1)
  00114	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4059000000000000
  0011a	de f1		 fdivrp	 ST(1), ST(0)

; 75   : 
; 76   : 		if (perc > 99.999999999)

  0011c	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4058fffffffeed1f
  00122	d8 d9		 fcomp	 ST(1)
  00124	df e0		 fnstsw	 ax
  00126	f6 c4 05	 test	 ah, 5
  00129	7a 28		 jp	 SHORT $LN20@UpdateProg

; 77   : 			wcscpy (text, GetString ("PROCESSED_PORTION_100_PERCENT"));

  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@DMHMPBKC@PROCESSED_PORTION_100_PERCENT?$AA@
  00130	dd d8		 fstp	 ST(0)
  00132	e8 00 00 00 00	 call	 _GetString
  00137	83 c4 04	 add	 esp, 4
  0013a	8d 54 24 28	 lea	 edx, DWORD PTR _text$[esp+444]
  0013e	8b ff		 npad	 2
$LL32@UpdateProg:
  00140	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00143	66 89 0a	 mov	 WORD PTR [edx], cx
  00146	83 c0 02	 add	 eax, 2
  00149	83 c2 02	 add	 edx, 2
  0014c	66 85 c9	 test	 cx, cx
  0014f	75 ef		 jne	 SHORT $LL32@UpdateProg

; 78   : 		else

  00151	eb 23		 jmp	 SHORT $LN19@UpdateProg
$LN20@UpdateProg:

; 79   : 			_snwprintf (text, sizeof text/2, GetString ("PROCESSED_PORTION_X_PERCENT"), perc);

  00153	83 ec 08	 sub	 esp, 8
  00156	dd 1c 24	 fstp	 QWORD PTR [esp]
  00159	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@HDAHKLF@PROCESSED_PORTION_X_PERCENT?$AA@
  0015e	e8 00 00 00 00	 call	 _GetString
  00163	83 c4 04	 add	 esp, 4
  00166	50		 push	 eax
  00167	8d 54 24 34	 lea	 edx, DWORD PTR _text$[esp+456]
  0016b	6a 64		 push	 100			; 00000064H
  0016d	52		 push	 edx
  0016e	e8 00 00 00 00	 call	 __snwprintf
  00173	83 c4 14	 add	 esp, 20			; 00000014H
$LN19@UpdateProg:

; 80   : 
; 81   : 		wcscat (speed, L" ");

  00176	8d bc 24 f0 00
	00 00		 lea	 edi, DWORD PTR _speed$[esp+444]
  0017d	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL44@UpdateProg:
  00180	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  00184	83 c7 02	 add	 edi, 2
  00187	66 85 c0	 test	 ax, ax
  0018a	75 f4		 jne	 SHORT $LL44@UpdateProg
  0018c	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  00191	89 07		 mov	 DWORD PTR [edi], eax

; 82   : 	}
; 83   : 	else

  00193	8b 7c 24 10	 mov	 edi, DWORD PTR _bytesPerSec$[esp+444]
  00197	e9 b3 00 00 00	 jmp	 $LN12@UpdateProg
$LN21@UpdateProg:

; 84   : 	{
; 85   : 		GetSizeString (bytesDone, text);

  0019c	8d 4c 24 28	 lea	 ecx, DWORD PTR _text$[esp+444]
  001a0	51		 push	 ecx
  001a1	56		 push	 esi
  001a2	53		 push	 ebx
  001a3	e8 00 00 00 00	 call	 _GetSizeString
  001a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 86   : 		if (bytesDone < (unsigned __int64) BYTES_PER_MB * 1000000)

  001ab	81 fe f4 00 00
	00		 cmp	 esi, 244		; 000000f4H
  001b1	77 20		 ja	 SHORT $LN17@UpdateProg
  001b3	72 08		 jb	 SHORT $LN45@UpdateProg
  001b5	81 fb 00 00 00
	24		 cmp	 ebx, 603979776		; 24000000H
  001bb	73 16		 jae	 SHORT $LN17@UpdateProg
$LN45@UpdateProg:

; 87   : 			swprintf(text, L"%I64d %s ", bytesDone / BYTES_PER_MB, GetString ("MB"));

  001bd	68 00 00 00 00	 push	 OFFSET ??_C@_02LKLDBFPJ@MB?$AA@
  001c2	e8 00 00 00 00	 call	 _GetString
  001c7	0f ac f3 14	 shrd	 ebx, esi, 20
  001cb	50		 push	 eax
  001cc	c1 ee 14	 shr	 esi, 20			; 00000014H
  001cf	56		 push	 esi
  001d0	53		 push	 ebx
  001d1	eb 6a		 jmp	 SHORT $LN70@UpdateProg
$LN17@UpdateProg:

; 88   : 		else if (bytesDone < (unsigned __int64) BYTES_PER_GB * 1000000)

  001d3	81 fe 90 d0 03
	00		 cmp	 esi, 250000		; 0003d090H
  001d9	77 26		 ja	 SHORT $LN56@UpdateProg
  001db	72 04		 jb	 SHORT $LN55@UpdateProg
  001dd	85 db		 test	 ebx, ebx
  001df	73 20		 jae	 SHORT $LN56@UpdateProg
$LN55@UpdateProg:

; 89   : 			swprintf(text, L"%I64d %s ", bytesDone / BYTES_PER_GB, GetString ("GB"));

  001e1	68 00 00 00 00	 push	 OFFSET ??_C@_02LHCEJACP@GB?$AA@
  001e6	e8 00 00 00 00	 call	 _GetString
  001eb	50		 push	 eax
  001ec	0f ac f3 1e	 shrd	 ebx, esi, 30
  001f0	c1 ee 1e	 shr	 esi, 30			; 0000001eH
  001f3	56		 push	 esi
  001f4	53		 push	 ebx
  001f5	68 00 00 00 00	 push	 OFFSET ??_C@_1BE@GLDKIDIH@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$AA@
  001fa	8d 44 24 3c	 lea	 eax, DWORD PTR _text$[esp+464]
  001fe	50		 push	 eax
  001ff	eb 46		 jmp	 SHORT $LN71@UpdateProg
$LN56@UpdateProg:

; 90   : 		else if (bytesDone < (unsigned __int64) BYTES_PER_TB * 1000000)

  00201	81 fe 00 40 42
	0f		 cmp	 esi, 256000000		; 0f424000H
  00207	77 23		 ja	 SHORT $LN60@UpdateProg
  00209	72 04		 jb	 SHORT $LN59@UpdateProg
  0020b	85 db		 test	 ebx, ebx
  0020d	73 1d		 jae	 SHORT $LN60@UpdateProg
$LN59@UpdateProg:

; 91   : 			swprintf(text, L"%I64d %s ", bytesDone / BYTES_PER_TB, GetString ("TB"));

  0020f	68 00 00 00 00	 push	 OFFSET ??_C@_02KJEEINAG@TB?$AA@
  00214	e8 00 00 00 00	 call	 _GetString
  00219	50		 push	 eax
  0021a	6a 00		 push	 0
  0021c	c1 ee 08	 shr	 esi, 8
  0021f	56		 push	 esi
  00220	68 00 00 00 00	 push	 OFFSET ??_C@_1BE@GLDKIDIH@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$AA@
  00225	8d 4c 24 3c	 lea	 ecx, DWORD PTR _text$[esp+464]
  00229	51		 push	 ecx

; 92   : 		else

  0022a	eb 1b		 jmp	 SHORT $LN71@UpdateProg
$LN60@UpdateProg:

; 93   : 			swprintf(text, L"%I64d %s ", bytesDone / BYTES_PER_PB, GetString ("PB"));

  0022c	68 00 00 00 00	 push	 OFFSET ??_C@_02KOENCFNK@PB?$AA@
  00231	e8 00 00 00 00	 call	 _GetString
  00236	50		 push	 eax
  00237	c1 ee 12	 shr	 esi, 18			; 00000012H
  0023a	6a 00		 push	 0
  0023c	56		 push	 esi
$LN70@UpdateProg:
  0023d	68 00 00 00 00	 push	 OFFSET ??_C@_1BE@GLDKIDIH@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$AA@
  00242	8d 54 24 3c	 lea	 edx, DWORD PTR _text$[esp+464]
  00246	52		 push	 edx
$LN71@UpdateProg:
  00247	e8 00 00 00 00	 call	 __swprintf
  0024c	83 c4 18	 add	 esp, 24			; 00000018H
$LN12@UpdateProg:

; 94   : 	}
; 95   : 
; 96   : 	SetWindowTextW (GetDlgItem (hCurPage, IDC_BYTESWRITTEN), text);

  0024f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  00255	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetDlgItem@8
  0025b	8d 44 24 28	 lea	 eax, DWORD PTR _text$[esp+444]
  0025f	50		 push	 eax
  00260	68 00 04 00 00	 push	 1024			; 00000400H
  00265	51		 push	 ecx
  00266	ff d3		 call	 ebx
  00268	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SetWindowTextW@8
  0026e	50		 push	 eax
  0026f	ff d5		 call	 ebp

; 97   : 
; 98   : 	if (!bShowStatus)

  00271	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bShowStatus, 0
  00278	75 69		 jne	 SHORT $LN11@UpdateProg

; 99   : 	{
; 100  : 		GetSpeedString (bRWThroughput ? bytesPerSec*2 : bytesPerSec, speed);

  0027a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bRWThroughput, 0
  00281	8b 54 24 14	 mov	 edx, DWORD PTR _bytesPerSec$[esp+448]
  00285	74 0d		 je	 SHORT $LN33@UpdateProg
  00287	6a 00		 push	 0
  00289	6a 02		 push	 2
  0028b	52		 push	 edx
  0028c	57		 push	 edi
  0028d	e8 00 00 00 00	 call	 __allmul
  00292	eb 02		 jmp	 SHORT $LN34@UpdateProg
$LN33@UpdateProg:
  00294	8b c7		 mov	 eax, edi
$LN34@UpdateProg:
  00296	8d 8c 24 f0 00
	00 00		 lea	 ecx, DWORD PTR _speed$[esp+444]
  0029d	51		 push	 ecx
  0029e	52		 push	 edx
  0029f	50		 push	 eax
  002a0	e8 00 00 00 00	 call	 _GetSpeedString

; 101  : 		wcscat (speed, L" ");

  002a5	8d bc 24 fc 00
	00 00		 lea	 edi, DWORD PTR _speed$[esp+456]
  002ac	83 c4 0c	 add	 esp, 12			; 0000000cH
  002af	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL48@UpdateProg:
  002b2	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  002b6	83 c7 02	 add	 edi, 2
  002b9	66 85 c0	 test	 ax, ax
  002bc	75 f4		 jne	 SHORT $LL48@UpdateProg

; 102  : 		SetWindowTextW (GetDlgItem (hCurPage, IDC_WRITESPEED), speed);

  002be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  002c4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  002ca	8d 84 24 f0 00
	00 00		 lea	 eax, DWORD PTR _speed$[esp+444]
  002d1	50		 push	 eax
  002d2	68 01 04 00 00	 push	 1025			; 00000401H
  002d7	51		 push	 ecx
  002d8	89 17		 mov	 DWORD PTR [edi], edx
  002da	ff d3		 call	 ebx
  002dc	50		 push	 eax
  002dd	ff d5		 call	 ebp
  002df	8b 7c 24 10	 mov	 edi, DWORD PTR _bytesPerSec$[esp+444]
$LN11@UpdateProg:

; 103  : 	}
; 104  : 
; 105  : 	if (byteOffset < TotalSize)

  002e3	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _TotalSize+4
  002e9	8b b4 24 c4 01
	00 00		 mov	 esi, DWORD PTR _byteOffset$[esp+444]
  002f0	3b f1		 cmp	 esi, ecx
  002f2	a1 00 00 00 00	 mov	 eax, DWORD PTR _TotalSize
  002f7	0f 8f 49 01 00
	00		 jg	 $LN58@UpdateProg
  002fd	8b 94 24 c0 01
	00 00		 mov	 edx, DWORD PTR _byteOffset$[esp+440]
  00304	7c 08		 jl	 SHORT $LN49@UpdateProg
  00306	3b d0		 cmp	 edx, eax
  00308	0f 83 38 01 00
	00		 jae	 $LN58@UpdateProg
$LN49@UpdateProg:

; 106  : 	{
; 107  : 		int64 sec = (int64) ((bProgressBarReverse ? byteOffset : (TotalSize - byteOffset)) / (bytesPerSec == 0 ? 0.001 : bytesPerSec));

  0030e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bProgressBarReverse, 0
  00315	74 0a		 je	 SHORT $LN35@UpdateProg
  00317	89 54 24 18	 mov	 DWORD PTR tv204[esp+444], edx
  0031b	89 74 24 1c	 mov	 DWORD PTR tv204[esp+448], esi
  0031f	eb 0c		 jmp	 SHORT $LN36@UpdateProg
$LN35@UpdateProg:
  00321	2b c2		 sub	 eax, edx
  00323	1b ce		 sbb	 ecx, esi
  00325	89 44 24 18	 mov	 DWORD PTR tv204[esp+444], eax
  00329	89 4c 24 1c	 mov	 DWORD PTR tv204[esp+448], ecx
$LN36@UpdateProg:
  0032d	8b 74 24 14	 mov	 esi, DWORD PTR _bytesPerSec$[esp+448]
  00331	8b d7		 mov	 edx, edi
  00333	0b d6		 or	 edx, esi
  00335	75 08		 jne	 SHORT $LN37@UpdateProg
  00337	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3f50624dd2f1a9fc
  0033d	eb 2f		 jmp	 SHORT $LN38@UpdateProg
$LN37@UpdateProg:
  0033f	8b c6		 mov	 eax, esi
  00341	8b ce		 mov	 ecx, esi
  00343	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  00348	89 7c 24 10	 mov	 DWORD PTR tv466[esp+444], edi
  0034c	89 44 24 14	 mov	 DWORD PTR tv466[esp+448], eax
  00350	df 6c 24 10	 fild	 QWORD PTR tv466[esp+444]
  00354	81 e1 00 00 00
	80		 and	 ecx, -2147483648	; 80000000H
  0035a	89 4c 24 14	 mov	 DWORD PTR tv469[esp+448], ecx
  0035e	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR tv469[esp+444], 0
  00366	df 6c 24 10	 fild	 QWORD PTR tv469[esp+444]
  0036a	d9 e0		 fchs
  0036c	de c1		 faddp	 ST(1), ST(0)
$LN38@UpdateProg:
  0036e	df 6c 24 18	 fild	 QWORD PTR tv204[esp+444]
  00372	de f1		 fdivrp	 ST(1), ST(0)
  00374	e8 00 00 00 00	 call	 __ftol2

; 108  : 
; 109  : 		if (bytesPerSec == 0 || sec > 60 * 60 * 24 * 999)

  00379	0b fe		 or	 edi, esi
  0037b	0f 84 87 00 00
	00		 je	 $LN8@UpdateProg
  00381	85 d2		 test	 edx, edx
  00383	0f 8f 7f 00 00
	00		 jg	 $LN8@UpdateProg
  00389	7c 07		 jl	 SHORT $LN50@UpdateProg
  0038b	3d 80 0a 25 05	 cmp	 eax, 86313600		; 05250a80H
  00390	77 76		 ja	 SHORT $LN8@UpdateProg
$LN50@UpdateProg:

; 111  : 		else if (sec >= 60 * 60 * 24 * 2)

  00392	85 d2		 test	 edx, edx
  00394	7c 69		 jl	 SHORT $LN2@UpdateProg
  00396	7f 07		 jg	 SHORT $LN51@UpdateProg
  00398	3d 00 a3 02 00	 cmp	 eax, 172800		; 0002a300H
  0039d	72 10		 jb	 SHORT $LN6@UpdateProg
$LN51@UpdateProg:

; 112  : 			swprintf (text, L"%I64d %s ", sec / (60 * 24 * 60), days);

  0039f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _days
  003a5	51		 push	 ecx
  003a6	6a 00		 push	 0
  003a8	68 80 51 01 00	 push	 86400			; 00015180H
  003ad	eb 33		 jmp	 SHORT $LN74@UpdateProg
$LN6@UpdateProg:

; 113  : 		else if (sec >= 120 * 60)

  003af	85 d2		 test	 edx, edx
  003b1	7c 4c		 jl	 SHORT $LN2@UpdateProg
  003b3	7f 07		 jg	 SHORT $LN52@UpdateProg
  003b5	3d 20 1c 00 00	 cmp	 eax, 7200		; 00001c20H
  003ba	72 10		 jb	 SHORT $LN4@UpdateProg
$LN52@UpdateProg:

; 114  : 			swprintf (text, L"%I64d %s ", sec / (60 * 60), hours);

  003bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hours
  003c2	51		 push	 ecx
  003c3	6a 00		 push	 0
  003c5	68 10 0e 00 00	 push	 3600			; 00000e10H
  003ca	eb 16		 jmp	 SHORT $LN74@UpdateProg
$LN4@UpdateProg:

; 115  : 		else if (sec >= 120)

  003cc	85 d2		 test	 edx, edx
  003ce	7c 2f		 jl	 SHORT $LN2@UpdateProg
  003d0	7f 05		 jg	 SHORT $LN53@UpdateProg
  003d2	83 f8 78	 cmp	 eax, 120		; 00000078H
  003d5	72 28		 jb	 SHORT $LN2@UpdateProg
$LN53@UpdateProg:

; 116  : 			swprintf (text, L"%I64d %s ", sec / 60, minutes);

  003d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _minutes
  003dd	51		 push	 ecx
  003de	6a 00		 push	 0
  003e0	6a 3c		 push	 60			; 0000003cH
$LN74@UpdateProg:
  003e2	52		 push	 edx
  003e3	50		 push	 eax
  003e4	e8 00 00 00 00	 call	 __alldiv
$LN75@UpdateProg:
  003e9	52		 push	 edx
  003ea	50		 push	 eax
  003eb	8d 54 24 34	 lea	 edx, DWORD PTR _text$[esp+456]
  003ef	68 00 00 00 00	 push	 OFFSET ??_C@_1BE@GLDKIDIH@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$AA@
  003f4	52		 push	 edx
  003f5	e8 00 00 00 00	 call	 __swprintf
  003fa	83 c4 14	 add	 esp, 20			; 00000014H

; 117  : 		else

  003fd	eb 26		 jmp	 SHORT $LN1@UpdateProg
$LN2@UpdateProg:

; 118  : 			swprintf (text, L"%I64d %s ", sec, seconds);

  003ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _seconds
  00405	51		 push	 ecx
  00406	eb e1		 jmp	 SHORT $LN75@UpdateProg
$LN8@UpdateProg:

; 110  : 			swprintf (text, L"%s ", GetString ("NOT_APPLICABLE_OR_NOT_AVAILABLE"));

  00408	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@
  0040d	e8 00 00 00 00	 call	 _GetString
  00412	50		 push	 eax
  00413	8d 44 24 30	 lea	 eax, DWORD PTR _text$[esp+452]
  00417	68 00 00 00 00	 push	 OFFSET ??_C@_17GMPJMPF@?$AA?$CF?$AAs?$AA?5?$AA?$AA@
  0041c	50		 push	 eax
  0041d	e8 00 00 00 00	 call	 __swprintf
  00422	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@UpdateProg:

; 119  : 
; 120  : 		SetWindowTextW (GetDlgItem (hCurPage, IDC_TIMEREMAIN), text);

  00425	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  0042b	8d 4c 24 28	 lea	 ecx, DWORD PTR _text$[esp+444]
  0042f	51		 push	 ecx
  00430	68 03 04 00 00	 push	 1027			; 00000403H
  00435	52		 push	 edx
  00436	ff d3		 call	 ebx
  00438	50		 push	 eax
  00439	ff d5		 call	 ebp
  0043b	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _TotalSize+4
  00441	a1 00 00 00 00	 mov	 eax, DWORD PTR _TotalSize
$LN58@UpdateProg:

; 121  : 	}
; 122  : 
; 123  : 	prevTime = time;
; 124  : 
; 125  : 	SendMessage (hProgressBar, PBM_SETPOS, 
; 126  : 		(int) (10000.0 * (bProgressBarReverse ? (TotalSize - byteOffset) : byteOffset) / (TotalSize == 0 ? 1 : TotalSize)),
; 127  : 		0);

  00446	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bProgressBarReverse, 0
  0044d	8b 54 24 20	 mov	 edx, DWORD PTR _time$[esp+444]
  00451	89 15 00 00 00
	00		 mov	 DWORD PTR _prevTime, edx
  00457	74 1c		 je	 SHORT $LN39@UpdateProg
  00459	8b d0		 mov	 edx, eax
  0045b	2b 94 24 c0 01
	00 00		 sub	 edx, DWORD PTR _byteOffset$[esp+440]
  00462	8b f1		 mov	 esi, ecx
  00464	1b b4 24 c4 01
	00 00		 sbb	 esi, DWORD PTR _byteOffset$[esp+444]
  0046b	89 54 24 18	 mov	 DWORD PTR tv250[esp+444], edx
  0046f	89 74 24 1c	 mov	 DWORD PTR tv250[esp+448], esi
  00473	eb 16		 jmp	 SHORT $LN40@UpdateProg
$LN39@UpdateProg:
  00475	8b 94 24 c0 01
	00 00		 mov	 edx, DWORD PTR _byteOffset$[esp+440]
  0047c	89 54 24 18	 mov	 DWORD PTR tv250[esp+444], edx
  00480	8b 94 24 c4 01
	00 00		 mov	 edx, DWORD PTR _byteOffset$[esp+444]
  00487	89 54 24 1c	 mov	 DWORD PTR tv250[esp+448], edx
$LN40@UpdateProg:
  0048b	5f		 pop	 edi
  0048c	5e		 pop	 esi
  0048d	8b d0		 mov	 edx, eax
  0048f	0b d1		 or	 edx, ecx
  00491	5d		 pop	 ebp
  00492	5b		 pop	 ebx
  00493	75 0d		 jne	 SHORT $LN41@UpdateProg
  00495	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv254[esp+428], 1
  0049c	89 54 24 04	 mov	 DWORD PTR tv254[esp+432], edx
  004a0	eb 07		 jmp	 SHORT $LN42@UpdateProg
$LN41@UpdateProg:
  004a2	89 04 24	 mov	 DWORD PTR tv254[esp+428], eax
  004a5	89 4c 24 04	 mov	 DWORD PTR tv254[esp+432], ecx
$LN42@UpdateProg:
  004a9	df 6c 24 08	 fild	 QWORD PTR tv250[esp+428]
  004ad	8b 4c 24 14	 mov	 ecx, DWORD PTR _hProgressBar$[esp+428]
  004b1	d9 7c 24 10	 fnstcw	 WORD PTR tv567[esp+428]
  004b5	6a 00		 push	 0
  004b7	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@40c3880000000000
  004bd	0f b7 44 24 14	 movzx	 eax, WORD PTR tv567[esp+432]
  004c2	df 6c 24 04	 fild	 QWORD PTR tv254[esp+432]
  004c6	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  004cb	89 44 24 04	 mov	 DWORD PTR tv570[esp+432], eax
  004cf	de f9		 fdivp	 ST(1), ST(0)
  004d1	d9 6c 24 04	 fldcw	 WORD PTR tv570[esp+432]
  004d5	df 7c 24 0c	 fistp	 QWORD PTR tv572[esp+432]
  004d9	8b 44 24 0c	 mov	 eax, DWORD PTR tv572[esp+432]
  004dd	50		 push	 eax
  004de	68 02 04 00 00	 push	 1026			; 00000402H
  004e3	d9 6c 24 1c	 fldcw	 WORD PTR tv567[esp+440]
  004e7	51		 push	 ecx
  004e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 128  : 
; 129  : 	return bVolTransformThreadCancel;

  004ee	a1 00 00 00 00	 mov	 eax, DWORD PTR _bVolTransformThreadCancel

; 130  : }

  004f3	8b 8c 24 a8 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+428]
  004fa	33 cc		 xor	 ecx, esp
  004fc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00501	81 c4 ac 01 00
	00		 add	 esp, 428		; 000001acH
  00507	c3		 ret	 0
_UpdateProgressBarProc ENDP
_TEXT	ENDS
PUBLIC	_UpdateProgressBar
; Function compile flags: /Ogtpy
;	COMDAT _UpdateProgressBar
_TEXT	SEGMENT
_byteOffset$ = 8					; size = 8
_UpdateProgressBar PROC					; COMDAT

; 57   : 	return UpdateProgressBarProc (byteOffset);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _byteOffset$[esp]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR _byteOffset$[esp-4]
  00008	50		 push	 eax
  00009	51		 push	 ecx
  0000a	e8 00 00 00 00	 call	 _UpdateProgressBarProc
  0000f	83 c4 08	 add	 esp, 8

; 58   : }

  00012	c3		 ret	 0
_UpdateProgressBar ENDP
_TEXT	ENDS
END
