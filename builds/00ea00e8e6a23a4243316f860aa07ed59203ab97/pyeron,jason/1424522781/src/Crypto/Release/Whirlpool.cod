; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\home\public\Desktop\projects\ciphershed.build\src\Crypto\Whirlpool.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_C0	DQ	18186018c07830d8H
	DQ	23238c2305af4626H
	DQ	c6c63fc67ef991b8H
	DQ	e8e887e8136fcdfbH
	DQ	878726874ca113cbH
	DQ	b8b8dab8a9626d11H
	DQ	0101040108050209H
	DQ	4f4f214f426e9e0dH
	DQ	3636d836adee6c9bH
	DQ	a6a6a2a6590451ffH
	DQ	d2d26fd2debdb90cH
	DQ	f5f5f3f5fb06f70eH
	DQ	7979f979ef80f296H
	DQ	6f6fa16f5fcede30H
	DQ	91917e91fcef3f6dH
	DQ	52525552aa07a4f8H
	DQ	60609d6027fdc047H
	DQ	bcbccabc89766535H
	DQ	9b9b569baccd2b37H
	DQ	8e8e028e048c018aH
	DQ	a3a3b6a371155bd2H
	DQ	0c0c300c603c186cH
	DQ	7b7bf17bff8af684H
	DQ	3535d435b5e16a80H
	DQ	1d1d741de8693af5H
	DQ	e0e0a7e05347ddb3H
	DQ	d7d77bd7f6acb321H
	DQ	c2c22fc25eed999cH
	DQ	2e2eb82e6d965c43H
	DQ	4b4b314b627a9629H
	DQ	fefedffea321e15dH
	DQ	575741578216aed5H
	DQ	15155415a8412abdH
	DQ	7777c1779fb6eee8H
	DQ	3737dc37a5eb6e92H
	DQ	e5e5b3e57b56d79eH
	DQ	9f9f469f8cd92313H
	DQ	f0f0e7f0d317fd23H
	DQ	4a4a354a6a7f9420H
	DQ	dada4fda9e95a944H
	DQ	58587d58fa25b0a2H
	DQ	c9c903c906ca8fcfH
	DQ	2929a429558d527cH
	DQ	0a0a280a5022145aH
	DQ	b1b1feb1e14f7f50H
	DQ	a0a0baa0691a5dc9H
	DQ	6b6bb16b7fdad614H
	DQ	85852e855cab17d9H
	DQ	bdbdcebd8173673cH
	DQ	5d5d695dd234ba8fH
	DQ	1010401080502090H
	DQ	f4f4f7f4f303f507H
	DQ	cbcb0bcb16c08bddH
	DQ	3e3ef83eedc67cd3H
	DQ	0505140528110a2dH
	DQ	676781671fe6ce78H
	DQ	e4e4b7e47353d597H
	DQ	27279c2725bb4e02H
	DQ	4141194132588273H
	DQ	8b8b168b2c9d0ba7H
	DQ	a7a7a6a7510153f6H
	DQ	7d7de97dcf94fab2H
	DQ	95956e95dcfb3749H
	DQ	d8d847d88e9fad56H
	DQ	fbfbcbfb8b30eb70H
	DQ	eeee9fee2371c1cdH
	DQ	7c7ced7cc791f8bbH
	DQ	6666856617e3cc71H
	DQ	dddd53dda68ea77bH
	DQ	17175c17b84b2eafH
	DQ	4747014702468e45H
	DQ	9e9e429e84dc211aH
	DQ	caca0fca1ec589d4H
	DQ	2d2db42d75995a58H
	DQ	bfbfc6bf9179632eH
	DQ	07071c07381b0e3fH
	DQ	adad8ead012347acH
	DQ	5a5a755aea2fb4b0H
	DQ	838336836cb51befH
	DQ	3333cc3385ff66b6H
	DQ	636391633ff2c65cH
	DQ	02020802100a0412H
	DQ	aaaa92aa39384993H
	DQ	7171d971afa8e2deH
	DQ	c8c807c80ecf8dc6H
	DQ	19196419c87d32d1H
	DQ	494939497270923bH
	DQ	d9d943d9869aaf5fH
	DQ	f2f2eff2c31df931H
	DQ	e3e3abe34b48dba8H
	DQ	5b5b715be22ab6b9H
	DQ	88881a8834920dbcH
	DQ	9a9a529aa4c8293eH
	DQ	262698262dbe4c0bH
	DQ	3232c8328dfa64bfH
	DQ	b0b0fab0e94a7d59H
	DQ	e9e983e91b6acff2H
	DQ	0f0f3c0f78331e77H
	DQ	d5d573d5e6a6b733H
	DQ	80803a8074ba1df4H
	DQ	bebec2be997c6127H
	DQ	cdcd13cd26de87ebH
	DQ	3434d034bde46889H
	DQ	48483d487a759032H
	DQ	ffffdbffab24e354H
	DQ	7a7af57af78ff48dH
	DQ	90907a90f4ea3d64H
	DQ	5f5f615fc23ebe9dH
	DQ	202080201da0403dH
	DQ	6868bd6867d5d00fH
	DQ	1a1a681ad07234caH
	DQ	aeae82ae192c41b7H
	DQ	b4b4eab4c95e757dH
	DQ	54544d549a19a8ceH
	DQ	93937693ece53b7fH
	DQ	222288220daa442fH
	DQ	64648d6407e9c863H
	DQ	f1f1e3f1db12ff2aH
	DQ	7373d173bfa2e6ccH
	DQ	12124812905a2482H
	DQ	40401d403a5d807aH
	DQ	0808200840281048H
	DQ	c3c32bc356e89b95H
	DQ	ecec97ec337bc5dfH
	DQ	dbdb4bdb9690ab4dH
	DQ	a1a1bea1611f5fc0H
	DQ	8d8d0e8d1c830791H
	DQ	3d3df43df5c97ac8H
	DQ	97976697ccf1335bH
	DQ	0000000000000000H
	DQ	cfcf1bcf36d483f9H
	DQ	2b2bac2b4587566eH
	DQ	7676c57697b3ece1H
	DQ	8282328264b019e6H
	DQ	d6d67fd6fea9b128H
	DQ	1b1b6c1bd87736c3H
	DQ	b5b5eeb5c15b7774H
	DQ	afaf86af112943beH
	DQ	6a6ab56a77dfd41dH
	DQ	50505d50ba0da0eaH
	DQ	45450945124c8a57H
	DQ	f3f3ebf3cb18fb38H
	DQ	3030c0309df060adH
	DQ	efef9bef2b74c3c4H
	DQ	3f3ffc3fe5c37edaH
	DQ	55554955921caac7H
	DQ	a2a2b2a2791059dbH
	DQ	eaea8fea0365c9e9H
	DQ	656589650fecca6aH
	DQ	babad2bab9686903H
	DQ	2f2fbc2f65935e4aH
	DQ	c0c027c04ee79d8eH
	DQ	dede5fdebe81a160H
	DQ	1c1c701ce06c38fcH
	DQ	fdfdd3fdbb2ee746H
	DQ	4d4d294d52649a1fH
	DQ	92927292e4e03976H
	DQ	7575c9758fbceafaH
	DQ	06061806301e0c36H
	DQ	8a8a128a249809aeH
	DQ	b2b2f2b2f940794bH
	DQ	e6e6bfe66359d185H
	DQ	0e0e380e70361c7eH
	DQ	1f1f7c1ff8633ee7H
	DQ	6262956237f7c455H
	DQ	d4d477d4eea3b53aH
	DQ	a8a89aa829324d81H
	DQ	96966296c4f43152H
	DQ	f9f9c3f99b3aef62H
	DQ	c5c533c566f697a3H
	DQ	2525942535b14a10H
	DQ	59597959f220b2abH
	DQ	84842a8454ae15d0H
	DQ	7272d572b7a7e4c5H
	DQ	3939e439d5dd72ecH
	DQ	4c4c2d4c5a619816H
	DQ	5e5e655eca3bbc94H
	DQ	7878fd78e785f09fH
	DQ	3838e038ddd870e5H
	DQ	8c8c0a8c14860598H
	DQ	d1d163d1c6b2bf17H
	DQ	a5a5aea5410b57e4H
	DQ	e2e2afe2434dd9a1H
	DQ	616199612ff8c24eH
	DQ	b3b3f6b3f1457b42H
	DQ	2121842115a54234H
	DQ	9c9c4a9c94d62508H
	DQ	1e1e781ef0663ceeH
	DQ	4343114322528661H
	DQ	c7c73bc776fc93b1H
	DQ	fcfcd7fcb32be54fH
	DQ	0404100420140824H
	DQ	51515951b208a2e3H
	DQ	99995e99bcc72f25H
	DQ	6d6da96d4fc4da22H
	DQ	0d0d340d68391a65H
	DQ	fafacffa8335e979H
	DQ	dfdf5bdfb684a369H
	DQ	7e7ee57ed79bfca9H
	DQ	242490243db44819H
	DQ	3b3bec3bc5d776feH
	DQ	abab96ab313d4b9aH
	DQ	cece1fce3ed181f0H
	DQ	1111441188552299H
	DQ	8f8f068f0c890383H
	DQ	4e4e254e4a6b9c04H
	DQ	b7b7e6b7d1517366H
	DQ	ebeb8beb0b60cbe0H
	DQ	3c3cf03cfdcc78c1H
	DQ	81813e817cbf1ffdH
	DQ	94946a94d4fe3540H
	DQ	f7f7fbf7eb0cf31cH
	DQ	b9b9deb9a1676f18H
	DQ	13134c13985f268bH
	DQ	2c2cb02c7d9c5851H
	DQ	d3d36bd3d6b8bb05H
	DQ	e7e7bbe76b5cd38cH
	DQ	6e6ea56e57cbdc39H
	DQ	c4c437c46ef395aaH
	DQ	03030c03180f061bH
	DQ	565645568a13acdcH
	DQ	44440d441a49885eH
	DQ	7f7fe17fdf9efea0H
	DQ	a9a99ea921374f88H
	DQ	2a2aa82a4d825467H
	DQ	bbbbd6bbb16d6b0aH
	DQ	c1c123c146e29f87H
	DQ	53535153a202a6f1H
	DQ	dcdc57dcae8ba572H
	DQ	0b0b2c0b58271653H
	DQ	9d9d4e9d9cd32701H
	DQ	6c6cad6c47c1d82bH
	DQ	3131c43195f562a4H
	DQ	7474cd7487b9e8f3H
	DQ	f6f6fff6e309f115H
	DQ	464605460a438c4cH
	DQ	acac8aac092645a5H
	DQ	89891e893c970fb5H
	DQ	14145014a04428b4H
	DQ	e1e1a3e15b42dfbaH
	DQ	16165816b04e2ca6H
	DQ	3a3ae83acdd274f7H
	DQ	6969b9696fd0d206H
	DQ	09092409482d1241H
	DQ	7070dd70a7ade0d7H
	DQ	b6b6e2b6d954716fH
	DQ	d0d067d0ceb7bd1eH
	DQ	eded93ed3b7ec7d6H
	DQ	cccc17cc2edb85e2H
	DQ	424215422a578468H
	DQ	98985a98b4c22d2cH
	DQ	a4a4aaa4490e55edH
	DQ	2828a0285d885075H
	DQ	5c5c6d5cda31b886H
	DQ	f8f8c7f8933fed6bH
	DQ	8686228644a411c2H
_C1	DQ	d818186018c07830H
	DQ	2623238c2305af46H
	DQ	b8c6c63fc67ef991H
	DQ	fbe8e887e8136fcdH
	DQ	cb878726874ca113H
	DQ	11b8b8dab8a9626dH
	DQ	0901010401080502H
	DQ	0d4f4f214f426e9eH
	DQ	9b3636d836adee6cH
	DQ	ffa6a6a2a6590451H
	DQ	0cd2d26fd2debdb9H
	DQ	0ef5f5f3f5fb06f7H
	DQ	967979f979ef80f2H
	DQ	306f6fa16f5fcedeH
	DQ	6d91917e91fcef3fH
	DQ	f852525552aa07a4H
	DQ	4760609d6027fdc0H
	DQ	35bcbccabc897665H
	DQ	379b9b569baccd2bH
	DQ	8a8e8e028e048c01H
	DQ	d2a3a3b6a371155bH
	DQ	6c0c0c300c603c18H
	DQ	847b7bf17bff8af6H
	DQ	803535d435b5e16aH
	DQ	f51d1d741de8693aH
	DQ	b3e0e0a7e05347ddH
	DQ	21d7d77bd7f6acb3H
	DQ	9cc2c22fc25eed99H
	DQ	432e2eb82e6d965cH
	DQ	294b4b314b627a96H
	DQ	5dfefedffea321e1H
	DQ	d5575741578216aeH
	DQ	bd15155415a8412aH
	DQ	e87777c1779fb6eeH
	DQ	923737dc37a5eb6eH
	DQ	9ee5e5b3e57b56d7H
	DQ	139f9f469f8cd923H
	DQ	23f0f0e7f0d317fdH
	DQ	204a4a354a6a7f94H
	DQ	44dada4fda9e95a9H
	DQ	a258587d58fa25b0H
	DQ	cfc9c903c906ca8fH
	DQ	7c2929a429558d52H
	DQ	5a0a0a280a502214H
	DQ	50b1b1feb1e14f7fH
	DQ	c9a0a0baa0691a5dH
	DQ	146b6bb16b7fdad6H
	DQ	d985852e855cab17H
	DQ	3cbdbdcebd817367H
	DQ	8f5d5d695dd234baH
	DQ	9010104010805020H
	DQ	07f4f4f7f4f303f5H
	DQ	ddcbcb0bcb16c08bH
	DQ	d33e3ef83eedc67cH
	DQ	2d0505140528110aH
	DQ	78676781671fe6ceH
	DQ	97e4e4b7e47353d5H
	DQ	0227279c2725bb4eH
	DQ	7341411941325882H
	DQ	a78b8b168b2c9d0bH
	DQ	f6a7a7a6a7510153H
	DQ	b27d7de97dcf94faH
	DQ	4995956e95dcfb37H
	DQ	56d8d847d88e9fadH
	DQ	70fbfbcbfb8b30ebH
	DQ	cdeeee9fee2371c1H
	DQ	bb7c7ced7cc791f8H
	DQ	716666856617e3ccH
	DQ	7bdddd53dda68ea7H
	DQ	af17175c17b84b2eH
	DQ	454747014702468eH
	DQ	1a9e9e429e84dc21H
	DQ	d4caca0fca1ec589H
	DQ	582d2db42d75995aH
	DQ	2ebfbfc6bf917963H
	DQ	3f07071c07381b0eH
	DQ	acadad8ead012347H
	DQ	b05a5a755aea2fb4H
	DQ	ef838336836cb51bH
	DQ	b63333cc3385ff66H
	DQ	5c636391633ff2c6H
	DQ	1202020802100a04H
	DQ	93aaaa92aa393849H
	DQ	de7171d971afa8e2H
	DQ	c6c8c807c80ecf8dH
	DQ	d119196419c87d32H
	DQ	3b49493949727092H
	DQ	5fd9d943d9869aafH
	DQ	31f2f2eff2c31df9H
	DQ	a8e3e3abe34b48dbH
	DQ	b95b5b715be22ab6H
	DQ	bc88881a8834920dH
	DQ	3e9a9a529aa4c829H
	DQ	0b262698262dbe4cH
	DQ	bf3232c8328dfa64H
	DQ	59b0b0fab0e94a7dH
	DQ	f2e9e983e91b6acfH
	DQ	770f0f3c0f78331eH
	DQ	33d5d573d5e6a6b7H
	DQ	f480803a8074ba1dH
	DQ	27bebec2be997c61H
	DQ	ebcdcd13cd26de87H
	DQ	893434d034bde468H
	DQ	3248483d487a7590H
	DQ	54ffffdbffab24e3H
	DQ	8d7a7af57af78ff4H
	DQ	6490907a90f4ea3dH
	DQ	9d5f5f615fc23ebeH
	DQ	3d202080201da040H
	DQ	0f6868bd6867d5d0H
	DQ	ca1a1a681ad07234H
	DQ	b7aeae82ae192c41H
	DQ	7db4b4eab4c95e75H
	DQ	ce54544d549a19a8H
	DQ	7f93937693ece53bH
	DQ	2f222288220daa44H
	DQ	6364648d6407e9c8H
	DQ	2af1f1e3f1db12ffH
	DQ	cc7373d173bfa2e6H
	DQ	8212124812905a24H
	DQ	7a40401d403a5d80H
	DQ	4808082008402810H
	DQ	95c3c32bc356e89bH
	DQ	dfecec97ec337bc5H
	DQ	4ddbdb4bdb9690abH
	DQ	c0a1a1bea1611f5fH
	DQ	918d8d0e8d1c8307H
	DQ	c83d3df43df5c97aH
	DQ	5b97976697ccf133H
	DQ	0000000000000000H
	DQ	f9cfcf1bcf36d483H
	DQ	6e2b2bac2b458756H
	DQ	e17676c57697b3ecH
	DQ	e68282328264b019H
	DQ	28d6d67fd6fea9b1H
	DQ	c31b1b6c1bd87736H
	DQ	74b5b5eeb5c15b77H
	DQ	beafaf86af112943H
	DQ	1d6a6ab56a77dfd4H
	DQ	ea50505d50ba0da0H
	DQ	5745450945124c8aH
	DQ	38f3f3ebf3cb18fbH
	DQ	ad3030c0309df060H
	DQ	c4efef9bef2b74c3H
	DQ	da3f3ffc3fe5c37eH
	DQ	c755554955921caaH
	DQ	dba2a2b2a2791059H
	DQ	e9eaea8fea0365c9H
	DQ	6a656589650feccaH
	DQ	03babad2bab96869H
	DQ	4a2f2fbc2f65935eH
	DQ	8ec0c027c04ee79dH
	DQ	60dede5fdebe81a1H
	DQ	fc1c1c701ce06c38H
	DQ	46fdfdd3fdbb2ee7H
	DQ	1f4d4d294d52649aH
	DQ	7692927292e4e039H
	DQ	fa7575c9758fbceaH
	DQ	3606061806301e0cH
	DQ	ae8a8a128a249809H
	DQ	4bb2b2f2b2f94079H
	DQ	85e6e6bfe66359d1H
	DQ	7e0e0e380e70361cH
	DQ	e71f1f7c1ff8633eH
	DQ	556262956237f7c4H
	DQ	3ad4d477d4eea3b5H
	DQ	81a8a89aa829324dH
	DQ	5296966296c4f431H
	DQ	62f9f9c3f99b3aefH
	DQ	a3c5c533c566f697H
	DQ	102525942535b14aH
	DQ	ab59597959f220b2H
	DQ	d084842a8454ae15H
	DQ	c57272d572b7a7e4H
	DQ	ec3939e439d5dd72H
	DQ	164c4c2d4c5a6198H
	DQ	945e5e655eca3bbcH
	DQ	9f7878fd78e785f0H
	DQ	e53838e038ddd870H
	DQ	988c8c0a8c148605H
	DQ	17d1d163d1c6b2bfH
	DQ	e4a5a5aea5410b57H
	DQ	a1e2e2afe2434dd9H
	DQ	4e616199612ff8c2H
	DQ	42b3b3f6b3f1457bH
	DQ	342121842115a542H
	DQ	089c9c4a9c94d625H
	DQ	ee1e1e781ef0663cH
	DQ	6143431143225286H
	DQ	b1c7c73bc776fc93H
	DQ	4ffcfcd7fcb32be5H
	DQ	2404041004201408H
	DQ	e351515951b208a2H
	DQ	2599995e99bcc72fH
	DQ	226d6da96d4fc4daH
	DQ	650d0d340d68391aH
	DQ	79fafacffa8335e9H
	DQ	69dfdf5bdfb684a3H
	DQ	a97e7ee57ed79bfcH
	DQ	19242490243db448H
	DQ	fe3b3bec3bc5d776H
	DQ	9aabab96ab313d4bH
	DQ	f0cece1fce3ed181H
	DQ	9911114411885522H
	DQ	838f8f068f0c8903H
	DQ	044e4e254e4a6b9cH
	DQ	66b7b7e6b7d15173H
	DQ	e0ebeb8beb0b60cbH
	DQ	c13c3cf03cfdcc78H
	DQ	fd81813e817cbf1fH
	DQ	4094946a94d4fe35H
	DQ	1cf7f7fbf7eb0cf3H
	DQ	18b9b9deb9a1676fH
	DQ	8b13134c13985f26H
	DQ	512c2cb02c7d9c58H
	DQ	05d3d36bd3d6b8bbH
	DQ	8ce7e7bbe76b5cd3H
	DQ	396e6ea56e57cbdcH
	DQ	aac4c437c46ef395H
	DQ	1b03030c03180f06H
	DQ	dc565645568a13acH
	DQ	5e44440d441a4988H
	DQ	a07f7fe17fdf9efeH
	DQ	88a9a99ea921374fH
	DQ	672a2aa82a4d8254H
	DQ	0abbbbd6bbb16d6bH
	DQ	87c1c123c146e29fH
	DQ	f153535153a202a6H
	DQ	72dcdc57dcae8ba5H
	DQ	530b0b2c0b582716H
	DQ	019d9d4e9d9cd327H
	DQ	2b6c6cad6c47c1d8H
	DQ	a43131c43195f562H
	DQ	f37474cd7487b9e8H
	DQ	15f6f6fff6e309f1H
	DQ	4c464605460a438cH
	DQ	a5acac8aac092645H
	DQ	b589891e893c970fH
	DQ	b414145014a04428H
	DQ	bae1e1a3e15b42dfH
	DQ	a616165816b04e2cH
	DQ	f73a3ae83acdd274H
	DQ	066969b9696fd0d2H
	DQ	4109092409482d12H
	DQ	d77070dd70a7ade0H
	DQ	6fb6b6e2b6d95471H
	DQ	1ed0d067d0ceb7bdH
	DQ	d6eded93ed3b7ec7H
	DQ	e2cccc17cc2edb85H
	DQ	68424215422a5784H
	DQ	2c98985a98b4c22dH
	DQ	eda4a4aaa4490e55H
	DQ	752828a0285d8850H
	DQ	865c5c6d5cda31b8H
	DQ	6bf8f8c7f8933fedH
	DQ	c28686228644a411H
_C2	DQ	30d818186018c078H
	DQ	462623238c2305afH
	DQ	91b8c6c63fc67ef9H
	DQ	cdfbe8e887e8136fH
	DQ	13cb878726874ca1H
	DQ	6d11b8b8dab8a962H
	DQ	0209010104010805H
	DQ	9e0d4f4f214f426eH
	DQ	6c9b3636d836adeeH
	DQ	51ffa6a6a2a65904H
	DQ	b90cd2d26fd2debdH
	DQ	f70ef5f5f3f5fb06H
	DQ	f2967979f979ef80H
	DQ	de306f6fa16f5fceH
	DQ	3f6d91917e91fcefH
	DQ	a4f852525552aa07H
	DQ	c04760609d6027fdH
	DQ	6535bcbccabc8976H
	DQ	2b379b9b569baccdH
	DQ	018a8e8e028e048cH
	DQ	5bd2a3a3b6a37115H
	DQ	186c0c0c300c603cH
	DQ	f6847b7bf17bff8aH
	DQ	6a803535d435b5e1H
	DQ	3af51d1d741de869H
	DQ	ddb3e0e0a7e05347H
	DQ	b321d7d77bd7f6acH
	DQ	999cc2c22fc25eedH
	DQ	5c432e2eb82e6d96H
	DQ	96294b4b314b627aH
	DQ	e15dfefedffea321H
	DQ	aed5575741578216H
	DQ	2abd15155415a841H
	DQ	eee87777c1779fb6H
	DQ	6e923737dc37a5ebH
	DQ	d79ee5e5b3e57b56H
	DQ	23139f9f469f8cd9H
	DQ	fd23f0f0e7f0d317H
	DQ	94204a4a354a6a7fH
	DQ	a944dada4fda9e95H
	DQ	b0a258587d58fa25H
	DQ	8fcfc9c903c906caH
	DQ	527c2929a429558dH
	DQ	145a0a0a280a5022H
	DQ	7f50b1b1feb1e14fH
	DQ	5dc9a0a0baa0691aH
	DQ	d6146b6bb16b7fdaH
	DQ	17d985852e855cabH
	DQ	673cbdbdcebd8173H
	DQ	ba8f5d5d695dd234H
	DQ	2090101040108050H
	DQ	f507f4f4f7f4f303H
	DQ	8bddcbcb0bcb16c0H
	DQ	7cd33e3ef83eedc6H
	DQ	0a2d050514052811H
	DQ	ce78676781671fe6H
	DQ	d597e4e4b7e47353H
	DQ	4e0227279c2725bbH
	DQ	8273414119413258H
	DQ	0ba78b8b168b2c9dH
	DQ	53f6a7a7a6a75101H
	DQ	fab27d7de97dcf94H
	DQ	374995956e95dcfbH
	DQ	ad56d8d847d88e9fH
	DQ	eb70fbfbcbfb8b30H
	DQ	c1cdeeee9fee2371H
	DQ	f8bb7c7ced7cc791H
	DQ	cc716666856617e3H
	DQ	a77bdddd53dda68eH
	DQ	2eaf17175c17b84bH
	DQ	8e45474701470246H
	DQ	211a9e9e429e84dcH
	DQ	89d4caca0fca1ec5H
	DQ	5a582d2db42d7599H
	DQ	632ebfbfc6bf9179H
	DQ	0e3f07071c07381bH
	DQ	47acadad8ead0123H
	DQ	b4b05a5a755aea2fH
	DQ	1bef838336836cb5H
	DQ	66b63333cc3385ffH
	DQ	c65c636391633ff2H
	DQ	041202020802100aH
	DQ	4993aaaa92aa3938H
	DQ	e2de7171d971afa8H
	DQ	8dc6c8c807c80ecfH
	DQ	32d119196419c87dH
	DQ	923b494939497270H
	DQ	af5fd9d943d9869aH
	DQ	f931f2f2eff2c31dH
	DQ	dba8e3e3abe34b48H
	DQ	b6b95b5b715be22aH
	DQ	0dbc88881a883492H
	DQ	293e9a9a529aa4c8H
	DQ	4c0b262698262dbeH
	DQ	64bf3232c8328dfaH
	DQ	7d59b0b0fab0e94aH
	DQ	cff2e9e983e91b6aH
	DQ	1e770f0f3c0f7833H
	DQ	b733d5d573d5e6a6H
	DQ	1df480803a8074baH
	DQ	6127bebec2be997cH
	DQ	87ebcdcd13cd26deH
	DQ	68893434d034bde4H
	DQ	903248483d487a75H
	DQ	e354ffffdbffab24H
	DQ	f48d7a7af57af78fH
	DQ	3d6490907a90f4eaH
	DQ	be9d5f5f615fc23eH
	DQ	403d202080201da0H
	DQ	d00f6868bd6867d5H
	DQ	34ca1a1a681ad072H
	DQ	41b7aeae82ae192cH
	DQ	757db4b4eab4c95eH
	DQ	a8ce54544d549a19H
	DQ	3b7f93937693ece5H
	DQ	442f222288220daaH
	DQ	c86364648d6407e9H
	DQ	ff2af1f1e3f1db12H
	DQ	e6cc7373d173bfa2H
	DQ	248212124812905aH
	DQ	807a40401d403a5dH
	DQ	1048080820084028H
	DQ	9b95c3c32bc356e8H
	DQ	c5dfecec97ec337bH
	DQ	ab4ddbdb4bdb9690H
	DQ	5fc0a1a1bea1611fH
	DQ	07918d8d0e8d1c83H
	DQ	7ac83d3df43df5c9H
	DQ	335b97976697ccf1H
	DQ	0000000000000000H
	DQ	83f9cfcf1bcf36d4H
	DQ	566e2b2bac2b4587H
	DQ	ece17676c57697b3H
	DQ	19e68282328264b0H
	DQ	b128d6d67fd6fea9H
	DQ	36c31b1b6c1bd877H
	DQ	7774b5b5eeb5c15bH
	DQ	43beafaf86af1129H
	DQ	d41d6a6ab56a77dfH
	DQ	a0ea50505d50ba0dH
	DQ	8a5745450945124cH
	DQ	fb38f3f3ebf3cb18H
	DQ	60ad3030c0309df0H
	DQ	c3c4efef9bef2b74H
	DQ	7eda3f3ffc3fe5c3H
	DQ	aac755554955921cH
	DQ	59dba2a2b2a27910H
	DQ	c9e9eaea8fea0365H
	DQ	ca6a656589650fecH
	DQ	6903babad2bab968H
	DQ	5e4a2f2fbc2f6593H
	DQ	9d8ec0c027c04ee7H
	DQ	a160dede5fdebe81H
	DQ	38fc1c1c701ce06cH
	DQ	e746fdfdd3fdbb2eH
	DQ	9a1f4d4d294d5264H
	DQ	397692927292e4e0H
	DQ	eafa7575c9758fbcH
	DQ	0c3606061806301eH
	DQ	09ae8a8a128a2498H
	DQ	794bb2b2f2b2f940H
	DQ	d185e6e6bfe66359H
	DQ	1c7e0e0e380e7036H
	DQ	3ee71f1f7c1ff863H
	DQ	c4556262956237f7H
	DQ	b53ad4d477d4eea3H
	DQ	4d81a8a89aa82932H
	DQ	315296966296c4f4H
	DQ	ef62f9f9c3f99b3aH
	DQ	97a3c5c533c566f6H
	DQ	4a102525942535b1H
	DQ	b2ab59597959f220H
	DQ	15d084842a8454aeH
	DQ	e4c57272d572b7a7H
	DQ	72ec3939e439d5ddH
	DQ	98164c4c2d4c5a61H
	DQ	bc945e5e655eca3bH
	DQ	f09f7878fd78e785H
	DQ	70e53838e038ddd8H
	DQ	05988c8c0a8c1486H
	DQ	bf17d1d163d1c6b2H
	DQ	57e4a5a5aea5410bH
	DQ	d9a1e2e2afe2434dH
	DQ	c24e616199612ff8H
	DQ	7b42b3b3f6b3f145H
	DQ	42342121842115a5H
	DQ	25089c9c4a9c94d6H
	DQ	3cee1e1e781ef066H
	DQ	8661434311432252H
	DQ	93b1c7c73bc776fcH
	DQ	e54ffcfcd7fcb32bH
	DQ	0824040410042014H
	DQ	a2e351515951b208H
	DQ	2f2599995e99bcc7H
	DQ	da226d6da96d4fc4H
	DQ	1a650d0d340d6839H
	DQ	e979fafacffa8335H
	DQ	a369dfdf5bdfb684H
	DQ	fca97e7ee57ed79bH
	DQ	4819242490243db4H
	DQ	76fe3b3bec3bc5d7H
	DQ	4b9aabab96ab313dH
	DQ	81f0cece1fce3ed1H
	DQ	2299111144118855H
	DQ	03838f8f068f0c89H
	DQ	9c044e4e254e4a6bH
	DQ	7366b7b7e6b7d151H
	DQ	cbe0ebeb8beb0b60H
	DQ	78c13c3cf03cfdccH
	DQ	1ffd81813e817cbfH
	DQ	354094946a94d4feH
	DQ	f31cf7f7fbf7eb0cH
	DQ	6f18b9b9deb9a167H
	DQ	268b13134c13985fH
	DQ	58512c2cb02c7d9cH
	DQ	bb05d3d36bd3d6b8H
	DQ	d38ce7e7bbe76b5cH
	DQ	dc396e6ea56e57cbH
	DQ	95aac4c437c46ef3H
	DQ	061b03030c03180fH
	DQ	acdc565645568a13H
	DQ	885e44440d441a49H
	DQ	fea07f7fe17fdf9eH
	DQ	4f88a9a99ea92137H
	DQ	54672a2aa82a4d82H
	DQ	6b0abbbbd6bbb16dH
	DQ	9f87c1c123c146e2H
	DQ	a6f153535153a202H
	DQ	a572dcdc57dcae8bH
	DQ	16530b0b2c0b5827H
	DQ	27019d9d4e9d9cd3H
	DQ	d82b6c6cad6c47c1H
	DQ	62a43131c43195f5H
	DQ	e8f37474cd7487b9H
	DQ	f115f6f6fff6e309H
	DQ	8c4c464605460a43H
	DQ	45a5acac8aac0926H
	DQ	0fb589891e893c97H
	DQ	28b414145014a044H
	DQ	dfbae1e1a3e15b42H
	DQ	2ca616165816b04eH
	DQ	74f73a3ae83acdd2H
	DQ	d2066969b9696fd0H
	DQ	124109092409482dH
	DQ	e0d77070dd70a7adH
	DQ	716fb6b6e2b6d954H
	DQ	bd1ed0d067d0ceb7H
	DQ	c7d6eded93ed3b7eH
	DQ	85e2cccc17cc2edbH
	DQ	8468424215422a57H
	DQ	2d2c98985a98b4c2H
	DQ	55eda4a4aaa4490eH
	DQ	50752828a0285d88H
	DQ	b8865c5c6d5cda31H
	DQ	ed6bf8f8c7f8933fH
	DQ	11c28686228644a4H
_C3	DQ	7830d818186018c0H
	DQ	af462623238c2305H
	DQ	f991b8c6c63fc67eH
	DQ	6fcdfbe8e887e813H
	DQ	a113cb878726874cH
	DQ	626d11b8b8dab8a9H
	DQ	0502090101040108H
	DQ	6e9e0d4f4f214f42H
	DQ	ee6c9b3636d836adH
	DQ	0451ffa6a6a2a659H
	DQ	bdb90cd2d26fd2deH
	DQ	06f70ef5f5f3f5fbH
	DQ	80f2967979f979efH
	DQ	cede306f6fa16f5fH
	DQ	ef3f6d91917e91fcH
	DQ	07a4f852525552aaH
	DQ	fdc04760609d6027H
	DQ	766535bcbccabc89H
	DQ	cd2b379b9b569bacH
	DQ	8c018a8e8e028e04H
	DQ	155bd2a3a3b6a371H
	DQ	3c186c0c0c300c60H
	DQ	8af6847b7bf17bffH
	DQ	e16a803535d435b5H
	DQ	693af51d1d741de8H
	DQ	47ddb3e0e0a7e053H
	DQ	acb321d7d77bd7f6H
	DQ	ed999cc2c22fc25eH
	DQ	965c432e2eb82e6dH
	DQ	7a96294b4b314b62H
	DQ	21e15dfefedffea3H
	DQ	16aed55757415782H
	DQ	412abd15155415a8H
	DQ	b6eee87777c1779fH
	DQ	eb6e923737dc37a5H
	DQ	56d79ee5e5b3e57bH
	DQ	d923139f9f469f8cH
	DQ	17fd23f0f0e7f0d3H
	DQ	7f94204a4a354a6aH
	DQ	95a944dada4fda9eH
	DQ	25b0a258587d58faH
	DQ	ca8fcfc9c903c906H
	DQ	8d527c2929a42955H
	DQ	22145a0a0a280a50H
	DQ	4f7f50b1b1feb1e1H
	DQ	1a5dc9a0a0baa069H
	DQ	dad6146b6bb16b7fH
	DQ	ab17d985852e855cH
	DQ	73673cbdbdcebd81H
	DQ	34ba8f5d5d695dd2H
	DQ	5020901010401080H
	DQ	03f507f4f4f7f4f3H
	DQ	c08bddcbcb0bcb16H
	DQ	c67cd33e3ef83eedH
	DQ	110a2d0505140528H
	DQ	e6ce78676781671fH
	DQ	53d597e4e4b7e473H
	DQ	bb4e0227279c2725H
	DQ	5882734141194132H
	DQ	9d0ba78b8b168b2cH
	DQ	0153f6a7a7a6a751H
	DQ	94fab27d7de97dcfH
	DQ	fb374995956e95dcH
	DQ	9fad56d8d847d88eH
	DQ	30eb70fbfbcbfb8bH
	DQ	71c1cdeeee9fee23H
	DQ	91f8bb7c7ced7cc7H
	DQ	e3cc716666856617H
	DQ	8ea77bdddd53dda6H
	DQ	4b2eaf17175c17b8H
	DQ	468e454747014702H
	DQ	dc211a9e9e429e84H
	DQ	c589d4caca0fca1eH
	DQ	995a582d2db42d75H
	DQ	79632ebfbfc6bf91H
	DQ	1b0e3f07071c0738H
	DQ	2347acadad8ead01H
	DQ	2fb4b05a5a755aeaH
	DQ	b51bef838336836cH
	DQ	ff66b63333cc3385H
	DQ	f2c65c636391633fH
	DQ	0a04120202080210H
	DQ	384993aaaa92aa39H
	DQ	a8e2de7171d971afH
	DQ	cf8dc6c8c807c80eH
	DQ	7d32d119196419c8H
	DQ	70923b4949394972H
	DQ	9aaf5fd9d943d986H
	DQ	1df931f2f2eff2c3H
	DQ	48dba8e3e3abe34bH
	DQ	2ab6b95b5b715be2H
	DQ	920dbc88881a8834H
	DQ	c8293e9a9a529aa4H
	DQ	be4c0b262698262dH
	DQ	fa64bf3232c8328dH
	DQ	4a7d59b0b0fab0e9H
	DQ	6acff2e9e983e91bH
	DQ	331e770f0f3c0f78H
	DQ	a6b733d5d573d5e6H
	DQ	ba1df480803a8074H
	DQ	7c6127bebec2be99H
	DQ	de87ebcdcd13cd26H
	DQ	e468893434d034bdH
	DQ	75903248483d487aH
	DQ	24e354ffffdbffabH
	DQ	8ff48d7a7af57af7H
	DQ	ea3d6490907a90f4H
	DQ	3ebe9d5f5f615fc2H
	DQ	a0403d202080201dH
	DQ	d5d00f6868bd6867H
	DQ	7234ca1a1a681ad0H
	DQ	2c41b7aeae82ae19H
	DQ	5e757db4b4eab4c9H
	DQ	19a8ce54544d549aH
	DQ	e53b7f93937693ecH
	DQ	aa442f222288220dH
	DQ	e9c86364648d6407H
	DQ	12ff2af1f1e3f1dbH
	DQ	a2e6cc7373d173bfH
	DQ	5a24821212481290H
	DQ	5d807a40401d403aH
	DQ	2810480808200840H
	DQ	e89b95c3c32bc356H
	DQ	7bc5dfecec97ec33H
	DQ	90ab4ddbdb4bdb96H
	DQ	1f5fc0a1a1bea161H
	DQ	8307918d8d0e8d1cH
	DQ	c97ac83d3df43df5H
	DQ	f1335b97976697ccH
	DQ	0000000000000000H
	DQ	d483f9cfcf1bcf36H
	DQ	87566e2b2bac2b45H
	DQ	b3ece17676c57697H
	DQ	b019e68282328264H
	DQ	a9b128d6d67fd6feH
	DQ	7736c31b1b6c1bd8H
	DQ	5b7774b5b5eeb5c1H
	DQ	2943beafaf86af11H
	DQ	dfd41d6a6ab56a77H
	DQ	0da0ea50505d50baH
	DQ	4c8a574545094512H
	DQ	18fb38f3f3ebf3cbH
	DQ	f060ad3030c0309dH
	DQ	74c3c4efef9bef2bH
	DQ	c37eda3f3ffc3fe5H
	DQ	1caac75555495592H
	DQ	1059dba2a2b2a279H
	DQ	65c9e9eaea8fea03H
	DQ	ecca6a656589650fH
	DQ	686903babad2bab9H
	DQ	935e4a2f2fbc2f65H
	DQ	e79d8ec0c027c04eH
	DQ	81a160dede5fdebeH
	DQ	6c38fc1c1c701ce0H
	DQ	2ee746fdfdd3fdbbH
	DQ	649a1f4d4d294d52H
	DQ	e0397692927292e4H
	DQ	bceafa7575c9758fH
	DQ	1e0c360606180630H
	DQ	9809ae8a8a128a24H
	DQ	40794bb2b2f2b2f9H
	DQ	59d185e6e6bfe663H
	DQ	361c7e0e0e380e70H
	DQ	633ee71f1f7c1ff8H
	DQ	f7c4556262956237H
	DQ	a3b53ad4d477d4eeH
	DQ	324d81a8a89aa829H
	DQ	f4315296966296c4H
	DQ	3aef62f9f9c3f99bH
	DQ	f697a3c5c533c566H
	DQ	b14a102525942535H
	DQ	20b2ab59597959f2H
	DQ	ae15d084842a8454H
	DQ	a7e4c57272d572b7H
	DQ	dd72ec3939e439d5H
	DQ	6198164c4c2d4c5aH
	DQ	3bbc945e5e655ecaH
	DQ	85f09f7878fd78e7H
	DQ	d870e53838e038ddH
	DQ	8605988c8c0a8c14H
	DQ	b2bf17d1d163d1c6H
	DQ	0b57e4a5a5aea541H
	DQ	4dd9a1e2e2afe243H
	DQ	f8c24e616199612fH
	DQ	457b42b3b3f6b3f1H
	DQ	a542342121842115H
	DQ	d625089c9c4a9c94H
	DQ	663cee1e1e781ef0H
	DQ	5286614343114322H
	DQ	fc93b1c7c73bc776H
	DQ	2be54ffcfcd7fcb3H
	DQ	1408240404100420H
	DQ	08a2e351515951b2H
	DQ	c72f2599995e99bcH
	DQ	c4da226d6da96d4fH
	DQ	391a650d0d340d68H
	DQ	35e979fafacffa83H
	DQ	84a369dfdf5bdfb6H
	DQ	9bfca97e7ee57ed7H
	DQ	b44819242490243dH
	DQ	d776fe3b3bec3bc5H
	DQ	3d4b9aabab96ab31H
	DQ	d181f0cece1fce3eH
	DQ	5522991111441188H
	DQ	8903838f8f068f0cH
	DQ	6b9c044e4e254e4aH
	DQ	517366b7b7e6b7d1H
	DQ	60cbe0ebeb8beb0bH
	DQ	cc78c13c3cf03cfdH
	DQ	bf1ffd81813e817cH
	DQ	fe354094946a94d4H
	DQ	0cf31cf7f7fbf7ebH
	DQ	676f18b9b9deb9a1H
	DQ	5f268b13134c1398H
	DQ	9c58512c2cb02c7dH
	DQ	b8bb05d3d36bd3d6H
	DQ	5cd38ce7e7bbe76bH
	DQ	cbdc396e6ea56e57H
	DQ	f395aac4c437c46eH
	DQ	0f061b03030c0318H
	DQ	13acdc565645568aH
	DQ	49885e44440d441aH
	DQ	9efea07f7fe17fdfH
	DQ	374f88a9a99ea921H
	DQ	8254672a2aa82a4dH
	DQ	6d6b0abbbbd6bbb1H
	DQ	e29f87c1c123c146H
	DQ	02a6f153535153a2H
	DQ	8ba572dcdc57dcaeH
	DQ	2716530b0b2c0b58H
	DQ	d327019d9d4e9d9cH
	DQ	c1d82b6c6cad6c47H
	DQ	f562a43131c43195H
	DQ	b9e8f37474cd7487H
	DQ	09f115f6f6fff6e3H
	DQ	438c4c464605460aH
	DQ	2645a5acac8aac09H
	DQ	970fb589891e893cH
	DQ	4428b414145014a0H
	DQ	42dfbae1e1a3e15bH
	DQ	4e2ca616165816b0H
	DQ	d274f73a3ae83acdH
	DQ	d0d2066969b9696fH
	DQ	2d12410909240948H
	DQ	ade0d77070dd70a7H
	DQ	54716fb6b6e2b6d9H
	DQ	b7bd1ed0d067d0ceH
	DQ	7ec7d6eded93ed3bH
	DQ	db85e2cccc17cc2eH
	DQ	578468424215422aH
	DQ	c22d2c98985a98b4H
	DQ	0e55eda4a4aaa449H
	DQ	8850752828a0285dH
	DQ	31b8865c5c6d5cdaH
	DQ	3fed6bf8f8c7f893H
	DQ	a411c28686228644H
_C4	DQ	c07830d818186018H
	DQ	05af462623238c23H
	DQ	7ef991b8c6c63fc6H
	DQ	136fcdfbe8e887e8H
	DQ	4ca113cb87872687H
	DQ	a9626d11b8b8dab8H
	DQ	0805020901010401H
	DQ	426e9e0d4f4f214fH
	DQ	adee6c9b3636d836H
	DQ	590451ffa6a6a2a6H
	DQ	debdb90cd2d26fd2H
	DQ	fb06f70ef5f5f3f5H
	DQ	ef80f2967979f979H
	DQ	5fcede306f6fa16fH
	DQ	fcef3f6d91917e91H
	DQ	aa07a4f852525552H
	DQ	27fdc04760609d60H
	DQ	89766535bcbccabcH
	DQ	accd2b379b9b569bH
	DQ	048c018a8e8e028eH
	DQ	71155bd2a3a3b6a3H
	DQ	603c186c0c0c300cH
	DQ	ff8af6847b7bf17bH
	DQ	b5e16a803535d435H
	DQ	e8693af51d1d741dH
	DQ	5347ddb3e0e0a7e0H
	DQ	f6acb321d7d77bd7H
	DQ	5eed999cc2c22fc2H
	DQ	6d965c432e2eb82eH
	DQ	627a96294b4b314bH
	DQ	a321e15dfefedffeH
	DQ	8216aed557574157H
	DQ	a8412abd15155415H
	DQ	9fb6eee87777c177H
	DQ	a5eb6e923737dc37H
	DQ	7b56d79ee5e5b3e5H
	DQ	8cd923139f9f469fH
	DQ	d317fd23f0f0e7f0H
	DQ	6a7f94204a4a354aH
	DQ	9e95a944dada4fdaH
	DQ	fa25b0a258587d58H
	DQ	06ca8fcfc9c903c9H
	DQ	558d527c2929a429H
	DQ	5022145a0a0a280aH
	DQ	e14f7f50b1b1feb1H
	DQ	691a5dc9a0a0baa0H
	DQ	7fdad6146b6bb16bH
	DQ	5cab17d985852e85H
	DQ	8173673cbdbdcebdH
	DQ	d234ba8f5d5d695dH
	DQ	8050209010104010H
	DQ	f303f507f4f4f7f4H
	DQ	16c08bddcbcb0bcbH
	DQ	edc67cd33e3ef83eH
	DQ	28110a2d05051405H
	DQ	1fe6ce7867678167H
	DQ	7353d597e4e4b7e4H
	DQ	25bb4e0227279c27H
	DQ	3258827341411941H
	DQ	2c9d0ba78b8b168bH
	DQ	510153f6a7a7a6a7H
	DQ	cf94fab27d7de97dH
	DQ	dcfb374995956e95H
	DQ	8e9fad56d8d847d8H
	DQ	8b30eb70fbfbcbfbH
	DQ	2371c1cdeeee9feeH
	DQ	c791f8bb7c7ced7cH
	DQ	17e3cc7166668566H
	DQ	a68ea77bdddd53ddH
	DQ	b84b2eaf17175c17H
	DQ	02468e4547470147H
	DQ	84dc211a9e9e429eH
	DQ	1ec589d4caca0fcaH
	DQ	75995a582d2db42dH
	DQ	9179632ebfbfc6bfH
	DQ	381b0e3f07071c07H
	DQ	012347acadad8eadH
	DQ	ea2fb4b05a5a755aH
	DQ	6cb51bef83833683H
	DQ	85ff66b63333cc33H
	DQ	3ff2c65c63639163H
	DQ	100a041202020802H
	DQ	39384993aaaa92aaH
	DQ	afa8e2de7171d971H
	DQ	0ecf8dc6c8c807c8H
	DQ	c87d32d119196419H
	DQ	7270923b49493949H
	DQ	869aaf5fd9d943d9H
	DQ	c31df931f2f2eff2H
	DQ	4b48dba8e3e3abe3H
	DQ	e22ab6b95b5b715bH
	DQ	34920dbc88881a88H
	DQ	a4c8293e9a9a529aH
	DQ	2dbe4c0b26269826H
	DQ	8dfa64bf3232c832H
	DQ	e94a7d59b0b0fab0H
	DQ	1b6acff2e9e983e9H
	DQ	78331e770f0f3c0fH
	DQ	e6a6b733d5d573d5H
	DQ	74ba1df480803a80H
	DQ	997c6127bebec2beH
	DQ	26de87ebcdcd13cdH
	DQ	bde468893434d034H
	DQ	7a75903248483d48H
	DQ	ab24e354ffffdbffH
	DQ	f78ff48d7a7af57aH
	DQ	f4ea3d6490907a90H
	DQ	c23ebe9d5f5f615fH
	DQ	1da0403d20208020H
	DQ	67d5d00f6868bd68H
	DQ	d07234ca1a1a681aH
	DQ	192c41b7aeae82aeH
	DQ	c95e757db4b4eab4H
	DQ	9a19a8ce54544d54H
	DQ	ece53b7f93937693H
	DQ	0daa442f22228822H
	DQ	07e9c86364648d64H
	DQ	db12ff2af1f1e3f1H
	DQ	bfa2e6cc7373d173H
	DQ	905a248212124812H
	DQ	3a5d807a40401d40H
	DQ	4028104808082008H
	DQ	56e89b95c3c32bc3H
	DQ	337bc5dfecec97ecH
	DQ	9690ab4ddbdb4bdbH
	DQ	611f5fc0a1a1bea1H
	DQ	1c8307918d8d0e8dH
	DQ	f5c97ac83d3df43dH
	DQ	ccf1335b97976697H
	DQ	0000000000000000H
	DQ	36d483f9cfcf1bcfH
	DQ	4587566e2b2bac2bH
	DQ	97b3ece17676c576H
	DQ	64b019e682823282H
	DQ	fea9b128d6d67fd6H
	DQ	d87736c31b1b6c1bH
	DQ	c15b7774b5b5eeb5H
	DQ	112943beafaf86afH
	DQ	77dfd41d6a6ab56aH
	DQ	ba0da0ea50505d50H
	DQ	124c8a5745450945H
	DQ	cb18fb38f3f3ebf3H
	DQ	9df060ad3030c030H
	DQ	2b74c3c4efef9befH
	DQ	e5c37eda3f3ffc3fH
	DQ	921caac755554955H
	DQ	791059dba2a2b2a2H
	DQ	0365c9e9eaea8feaH
	DQ	0fecca6a65658965H
	DQ	b9686903babad2baH
	DQ	65935e4a2f2fbc2fH
	DQ	4ee79d8ec0c027c0H
	DQ	be81a160dede5fdeH
	DQ	e06c38fc1c1c701cH
	DQ	bb2ee746fdfdd3fdH
	DQ	52649a1f4d4d294dH
	DQ	e4e0397692927292H
	DQ	8fbceafa7575c975H
	DQ	301e0c3606061806H
	DQ	249809ae8a8a128aH
	DQ	f940794bb2b2f2b2H
	DQ	6359d185e6e6bfe6H
	DQ	70361c7e0e0e380eH
	DQ	f8633ee71f1f7c1fH
	DQ	37f7c45562629562H
	DQ	eea3b53ad4d477d4H
	DQ	29324d81a8a89aa8H
	DQ	c4f4315296966296H
	DQ	9b3aef62f9f9c3f9H
	DQ	66f697a3c5c533c5H
	DQ	35b14a1025259425H
	DQ	f220b2ab59597959H
	DQ	54ae15d084842a84H
	DQ	b7a7e4c57272d572H
	DQ	d5dd72ec3939e439H
	DQ	5a6198164c4c2d4cH
	DQ	ca3bbc945e5e655eH
	DQ	e785f09f7878fd78H
	DQ	ddd870e53838e038H
	DQ	148605988c8c0a8cH
	DQ	c6b2bf17d1d163d1H
	DQ	410b57e4a5a5aea5H
	DQ	434dd9a1e2e2afe2H
	DQ	2ff8c24e61619961H
	DQ	f1457b42b3b3f6b3H
	DQ	15a5423421218421H
	DQ	94d625089c9c4a9cH
	DQ	f0663cee1e1e781eH
	DQ	2252866143431143H
	DQ	76fc93b1c7c73bc7H
	DQ	b32be54ffcfcd7fcH
	DQ	2014082404041004H
	DQ	b208a2e351515951H
	DQ	bcc72f2599995e99H
	DQ	4fc4da226d6da96dH
	DQ	68391a650d0d340dH
	DQ	8335e979fafacffaH
	DQ	b684a369dfdf5bdfH
	DQ	d79bfca97e7ee57eH
	DQ	3db4481924249024H
	DQ	c5d776fe3b3bec3bH
	DQ	313d4b9aabab96abH
	DQ	3ed181f0cece1fceH
	DQ	8855229911114411H
	DQ	0c8903838f8f068fH
	DQ	4a6b9c044e4e254eH
	DQ	d1517366b7b7e6b7H
	DQ	0b60cbe0ebeb8bebH
	DQ	fdcc78c13c3cf03cH
	DQ	7cbf1ffd81813e81H
	DQ	d4fe354094946a94H
	DQ	eb0cf31cf7f7fbf7H
	DQ	a1676f18b9b9deb9H
	DQ	985f268b13134c13H
	DQ	7d9c58512c2cb02cH
	DQ	d6b8bb05d3d36bd3H
	DQ	6b5cd38ce7e7bbe7H
	DQ	57cbdc396e6ea56eH
	DQ	6ef395aac4c437c4H
	DQ	180f061b03030c03H
	DQ	8a13acdc56564556H
	DQ	1a49885e44440d44H
	DQ	df9efea07f7fe17fH
	DQ	21374f88a9a99ea9H
	DQ	4d8254672a2aa82aH
	DQ	b16d6b0abbbbd6bbH
	DQ	46e29f87c1c123c1H
	DQ	a202a6f153535153H
	DQ	ae8ba572dcdc57dcH
	DQ	582716530b0b2c0bH
	DQ	9cd327019d9d4e9dH
	DQ	47c1d82b6c6cad6cH
	DQ	95f562a43131c431H
	DQ	87b9e8f37474cd74H
	DQ	e309f115f6f6fff6H
	DQ	0a438c4c46460546H
	DQ	092645a5acac8aacH
	DQ	3c970fb589891e89H
	DQ	a04428b414145014H
	DQ	5b42dfbae1e1a3e1H
	DQ	b04e2ca616165816H
	DQ	cdd274f73a3ae83aH
	DQ	6fd0d2066969b969H
	DQ	482d124109092409H
	DQ	a7ade0d77070dd70H
	DQ	d954716fb6b6e2b6H
	DQ	ceb7bd1ed0d067d0H
	DQ	3b7ec7d6eded93edH
	DQ	2edb85e2cccc17ccH
	DQ	2a57846842421542H
	DQ	b4c22d2c98985a98H
	DQ	490e55eda4a4aaa4H
	DQ	5d8850752828a028H
	DQ	da31b8865c5c6d5cH
	DQ	933fed6bf8f8c7f8H
	DQ	44a411c286862286H
_C5	DQ	18c07830d8181860H
	DQ	2305af462623238cH
	DQ	c67ef991b8c6c63fH
	DQ	e8136fcdfbe8e887H
	DQ	874ca113cb878726H
	DQ	b8a9626d11b8b8daH
	DQ	0108050209010104H
	DQ	4f426e9e0d4f4f21H
	DQ	36adee6c9b3636d8H
	DQ	a6590451ffa6a6a2H
	DQ	d2debdb90cd2d26fH
	DQ	f5fb06f70ef5f5f3H
	DQ	79ef80f2967979f9H
	DQ	6f5fcede306f6fa1H
	DQ	91fcef3f6d91917eH
	DQ	52aa07a4f8525255H
	DQ	6027fdc04760609dH
	DQ	bc89766535bcbccaH
	DQ	9baccd2b379b9b56H
	DQ	8e048c018a8e8e02H
	DQ	a371155bd2a3a3b6H
	DQ	0c603c186c0c0c30H
	DQ	7bff8af6847b7bf1H
	DQ	35b5e16a803535d4H
	DQ	1de8693af51d1d74H
	DQ	e05347ddb3e0e0a7H
	DQ	d7f6acb321d7d77bH
	DQ	c25eed999cc2c22fH
	DQ	2e6d965c432e2eb8H
	DQ	4b627a96294b4b31H
	DQ	fea321e15dfefedfH
	DQ	578216aed5575741H
	DQ	15a8412abd151554H
	DQ	779fb6eee87777c1H
	DQ	37a5eb6e923737dcH
	DQ	e57b56d79ee5e5b3H
	DQ	9f8cd923139f9f46H
	DQ	f0d317fd23f0f0e7H
	DQ	4a6a7f94204a4a35H
	DQ	da9e95a944dada4fH
	DQ	58fa25b0a258587dH
	DQ	c906ca8fcfc9c903H
	DQ	29558d527c2929a4H
	DQ	0a5022145a0a0a28H
	DQ	b1e14f7f50b1b1feH
	DQ	a0691a5dc9a0a0baH
	DQ	6b7fdad6146b6bb1H
	DQ	855cab17d985852eH
	DQ	bd8173673cbdbdceH
	DQ	5dd234ba8f5d5d69H
	DQ	1080502090101040H
	DQ	f4f303f507f4f4f7H
	DQ	cb16c08bddcbcb0bH
	DQ	3eedc67cd33e3ef8H
	DQ	0528110a2d050514H
	DQ	671fe6ce78676781H
	DQ	e47353d597e4e4b7H
	DQ	2725bb4e0227279cH
	DQ	4132588273414119H
	DQ	8b2c9d0ba78b8b16H
	DQ	a7510153f6a7a7a6H
	DQ	7dcf94fab27d7de9H
	DQ	95dcfb374995956eH
	DQ	d88e9fad56d8d847H
	DQ	fb8b30eb70fbfbcbH
	DQ	ee2371c1cdeeee9fH
	DQ	7cc791f8bb7c7cedH
	DQ	6617e3cc71666685H
	DQ	dda68ea77bdddd53H
	DQ	17b84b2eaf17175cH
	DQ	4702468e45474701H
	DQ	9e84dc211a9e9e42H
	DQ	ca1ec589d4caca0fH
	DQ	2d75995a582d2db4H
	DQ	bf9179632ebfbfc6H
	DQ	07381b0e3f07071cH
	DQ	ad012347acadad8eH
	DQ	5aea2fb4b05a5a75H
	DQ	836cb51bef838336H
	DQ	3385ff66b63333ccH
	DQ	633ff2c65c636391H
	DQ	02100a0412020208H
	DQ	aa39384993aaaa92H
	DQ	71afa8e2de7171d9H
	DQ	c80ecf8dc6c8c807H
	DQ	19c87d32d1191964H
	DQ	497270923b494939H
	DQ	d9869aaf5fd9d943H
	DQ	f2c31df931f2f2efH
	DQ	e34b48dba8e3e3abH
	DQ	5be22ab6b95b5b71H
	DQ	8834920dbc88881aH
	DQ	9aa4c8293e9a9a52H
	DQ	262dbe4c0b262698H
	DQ	328dfa64bf3232c8H
	DQ	b0e94a7d59b0b0faH
	DQ	e91b6acff2e9e983H
	DQ	0f78331e770f0f3cH
	DQ	d5e6a6b733d5d573H
	DQ	8074ba1df480803aH
	DQ	be997c6127bebec2H
	DQ	cd26de87ebcdcd13H
	DQ	34bde468893434d0H
	DQ	487a75903248483dH
	DQ	ffab24e354ffffdbH
	DQ	7af78ff48d7a7af5H
	DQ	90f4ea3d6490907aH
	DQ	5fc23ebe9d5f5f61H
	DQ	201da0403d202080H
	DQ	6867d5d00f6868bdH
	DQ	1ad07234ca1a1a68H
	DQ	ae192c41b7aeae82H
	DQ	b4c95e757db4b4eaH
	DQ	549a19a8ce54544dH
	DQ	93ece53b7f939376H
	DQ	220daa442f222288H
	DQ	6407e9c86364648dH
	DQ	f1db12ff2af1f1e3H
	DQ	73bfa2e6cc7373d1H
	DQ	12905a2482121248H
	DQ	403a5d807a40401dH
	DQ	0840281048080820H
	DQ	c356e89b95c3c32bH
	DQ	ec337bc5dfecec97H
	DQ	db9690ab4ddbdb4bH
	DQ	a1611f5fc0a1a1beH
	DQ	8d1c8307918d8d0eH
	DQ	3df5c97ac83d3df4H
	DQ	97ccf1335b979766H
	DQ	0000000000000000H
	DQ	cf36d483f9cfcf1bH
	DQ	2b4587566e2b2bacH
	DQ	7697b3ece17676c5H
	DQ	8264b019e6828232H
	DQ	d6fea9b128d6d67fH
	DQ	1bd87736c31b1b6cH
	DQ	b5c15b7774b5b5eeH
	DQ	af112943beafaf86H
	DQ	6a77dfd41d6a6ab5H
	DQ	50ba0da0ea50505dH
	DQ	45124c8a57454509H
	DQ	f3cb18fb38f3f3ebH
	DQ	309df060ad3030c0H
	DQ	ef2b74c3c4efef9bH
	DQ	3fe5c37eda3f3ffcH
	DQ	55921caac7555549H
	DQ	a2791059dba2a2b2H
	DQ	ea0365c9e9eaea8fH
	DQ	650fecca6a656589H
	DQ	bab9686903babad2H
	DQ	2f65935e4a2f2fbcH
	DQ	c04ee79d8ec0c027H
	DQ	debe81a160dede5fH
	DQ	1ce06c38fc1c1c70H
	DQ	fdbb2ee746fdfdd3H
	DQ	4d52649a1f4d4d29H
	DQ	92e4e03976929272H
	DQ	758fbceafa7575c9H
	DQ	06301e0c36060618H
	DQ	8a249809ae8a8a12H
	DQ	b2f940794bb2b2f2H
	DQ	e66359d185e6e6bfH
	DQ	0e70361c7e0e0e38H
	DQ	1ff8633ee71f1f7cH
	DQ	6237f7c455626295H
	DQ	d4eea3b53ad4d477H
	DQ	a829324d81a8a89aH
	DQ	96c4f43152969662H
	DQ	f99b3aef62f9f9c3H
	DQ	c566f697a3c5c533H
	DQ	2535b14a10252594H
	DQ	59f220b2ab595979H
	DQ	8454ae15d084842aH
	DQ	72b7a7e4c57272d5H
	DQ	39d5dd72ec3939e4H
	DQ	4c5a6198164c4c2dH
	DQ	5eca3bbc945e5e65H
	DQ	78e785f09f7878fdH
	DQ	38ddd870e53838e0H
	DQ	8c148605988c8c0aH
	DQ	d1c6b2bf17d1d163H
	DQ	a5410b57e4a5a5aeH
	DQ	e2434dd9a1e2e2afH
	DQ	612ff8c24e616199H
	DQ	b3f1457b42b3b3f6H
	DQ	2115a54234212184H
	DQ	9c94d625089c9c4aH
	DQ	1ef0663cee1e1e78H
	DQ	4322528661434311H
	DQ	c776fc93b1c7c73bH
	DQ	fcb32be54ffcfcd7H
	DQ	0420140824040410H
	DQ	51b208a2e3515159H
	DQ	99bcc72f2599995eH
	DQ	6d4fc4da226d6da9H
	DQ	0d68391a650d0d34H
	DQ	fa8335e979fafacfH
	DQ	dfb684a369dfdf5bH
	DQ	7ed79bfca97e7ee5H
	DQ	243db44819242490H
	DQ	3bc5d776fe3b3becH
	DQ	ab313d4b9aabab96H
	DQ	ce3ed181f0cece1fH
	DQ	1188552299111144H
	DQ	8f0c8903838f8f06H
	DQ	4e4a6b9c044e4e25H
	DQ	b7d1517366b7b7e6H
	DQ	eb0b60cbe0ebeb8bH
	DQ	3cfdcc78c13c3cf0H
	DQ	817cbf1ffd81813eH
	DQ	94d4fe354094946aH
	DQ	f7eb0cf31cf7f7fbH
	DQ	b9a1676f18b9b9deH
	DQ	13985f268b13134cH
	DQ	2c7d9c58512c2cb0H
	DQ	d3d6b8bb05d3d36bH
	DQ	e76b5cd38ce7e7bbH
	DQ	6e57cbdc396e6ea5H
	DQ	c46ef395aac4c437H
	DQ	03180f061b03030cH
	DQ	568a13acdc565645H
	DQ	441a49885e44440dH
	DQ	7fdf9efea07f7fe1H
	DQ	a921374f88a9a99eH
	DQ	2a4d8254672a2aa8H
	DQ	bbb16d6b0abbbbd6H
	DQ	c146e29f87c1c123H
	DQ	53a202a6f1535351H
	DQ	dcae8ba572dcdc57H
	DQ	0b582716530b0b2cH
	DQ	9d9cd327019d9d4eH
	DQ	6c47c1d82b6c6cadH
	DQ	3195f562a43131c4H
	DQ	7487b9e8f37474cdH
	DQ	f6e309f115f6f6ffH
	DQ	460a438c4c464605H
	DQ	ac092645a5acac8aH
	DQ	893c970fb589891eH
	DQ	14a04428b4141450H
	DQ	e15b42dfbae1e1a3H
	DQ	16b04e2ca6161658H
	DQ	3acdd274f73a3ae8H
	DQ	696fd0d2066969b9H
	DQ	09482d1241090924H
	DQ	70a7ade0d77070ddH
	DQ	b6d954716fb6b6e2H
	DQ	d0ceb7bd1ed0d067H
	DQ	ed3b7ec7d6eded93H
	DQ	cc2edb85e2cccc17H
	DQ	422a578468424215H
	DQ	98b4c22d2c98985aH
	DQ	a4490e55eda4a4aaH
	DQ	285d8850752828a0H
	DQ	5cda31b8865c5c6dH
	DQ	f8933fed6bf8f8c7H
	DQ	8644a411c2868622H
_C6	DQ	6018c07830d81818H
	DQ	8c2305af46262323H
	DQ	3fc67ef991b8c6c6H
	DQ	87e8136fcdfbe8e8H
	DQ	26874ca113cb8787H
	DQ	dab8a9626d11b8b8H
	DQ	0401080502090101H
	DQ	214f426e9e0d4f4fH
	DQ	d836adee6c9b3636H
	DQ	a2a6590451ffa6a6H
	DQ	6fd2debdb90cd2d2H
	DQ	f3f5fb06f70ef5f5H
	DQ	f979ef80f2967979H
	DQ	a16f5fcede306f6fH
	DQ	7e91fcef3f6d9191H
	DQ	5552aa07a4f85252H
	DQ	9d6027fdc0476060H
	DQ	cabc89766535bcbcH
	DQ	569baccd2b379b9bH
	DQ	028e048c018a8e8eH
	DQ	b6a371155bd2a3a3H
	DQ	300c603c186c0c0cH
	DQ	f17bff8af6847b7bH
	DQ	d435b5e16a803535H
	DQ	741de8693af51d1dH
	DQ	a7e05347ddb3e0e0H
	DQ	7bd7f6acb321d7d7H
	DQ	2fc25eed999cc2c2H
	DQ	b82e6d965c432e2eH
	DQ	314b627a96294b4bH
	DQ	dffea321e15dfefeH
	DQ	41578216aed55757H
	DQ	5415a8412abd1515H
	DQ	c1779fb6eee87777H
	DQ	dc37a5eb6e923737H
	DQ	b3e57b56d79ee5e5H
	DQ	469f8cd923139f9fH
	DQ	e7f0d317fd23f0f0H
	DQ	354a6a7f94204a4aH
	DQ	4fda9e95a944dadaH
	DQ	7d58fa25b0a25858H
	DQ	03c906ca8fcfc9c9H
	DQ	a429558d527c2929H
	DQ	280a5022145a0a0aH
	DQ	feb1e14f7f50b1b1H
	DQ	baa0691a5dc9a0a0H
	DQ	b16b7fdad6146b6bH
	DQ	2e855cab17d98585H
	DQ	cebd8173673cbdbdH
	DQ	695dd234ba8f5d5dH
	DQ	4010805020901010H
	DQ	f7f4f303f507f4f4H
	DQ	0bcb16c08bddcbcbH
	DQ	f83eedc67cd33e3eH
	DQ	140528110a2d0505H
	DQ	81671fe6ce786767H
	DQ	b7e47353d597e4e4H
	DQ	9c2725bb4e022727H
	DQ	1941325882734141H
	DQ	168b2c9d0ba78b8bH
	DQ	a6a7510153f6a7a7H
	DQ	e97dcf94fab27d7dH
	DQ	6e95dcfb37499595H
	DQ	47d88e9fad56d8d8H
	DQ	cbfb8b30eb70fbfbH
	DQ	9fee2371c1cdeeeeH
	DQ	ed7cc791f8bb7c7cH
	DQ	856617e3cc716666H
	DQ	53dda68ea77bddddH
	DQ	5c17b84b2eaf1717H
	DQ	014702468e454747H
	DQ	429e84dc211a9e9eH
	DQ	0fca1ec589d4cacaH
	DQ	b42d75995a582d2dH
	DQ	c6bf9179632ebfbfH
	DQ	1c07381b0e3f0707H
	DQ	8ead012347acadadH
	DQ	755aea2fb4b05a5aH
	DQ	36836cb51bef8383H
	DQ	cc3385ff66b63333H
	DQ	91633ff2c65c6363H
	DQ	0802100a04120202H
	DQ	92aa39384993aaaaH
	DQ	d971afa8e2de7171H
	DQ	07c80ecf8dc6c8c8H
	DQ	6419c87d32d11919H
	DQ	39497270923b4949H
	DQ	43d9869aaf5fd9d9H
	DQ	eff2c31df931f2f2H
	DQ	abe34b48dba8e3e3H
	DQ	715be22ab6b95b5bH
	DQ	1a8834920dbc8888H
	DQ	529aa4c8293e9a9aH
	DQ	98262dbe4c0b2626H
	DQ	c8328dfa64bf3232H
	DQ	fab0e94a7d59b0b0H
	DQ	83e91b6acff2e9e9H
	DQ	3c0f78331e770f0fH
	DQ	73d5e6a6b733d5d5H
	DQ	3a8074ba1df48080H
	DQ	c2be997c6127bebeH
	DQ	13cd26de87ebcdcdH
	DQ	d034bde468893434H
	DQ	3d487a7590324848H
	DQ	dbffab24e354ffffH
	DQ	f57af78ff48d7a7aH
	DQ	7a90f4ea3d649090H
	DQ	615fc23ebe9d5f5fH
	DQ	80201da0403d2020H
	DQ	bd6867d5d00f6868H
	DQ	681ad07234ca1a1aH
	DQ	82ae192c41b7aeaeH
	DQ	eab4c95e757db4b4H
	DQ	4d549a19a8ce5454H
	DQ	7693ece53b7f9393H
	DQ	88220daa442f2222H
	DQ	8d6407e9c8636464H
	DQ	e3f1db12ff2af1f1H
	DQ	d173bfa2e6cc7373H
	DQ	4812905a24821212H
	DQ	1d403a5d807a4040H
	DQ	2008402810480808H
	DQ	2bc356e89b95c3c3H
	DQ	97ec337bc5dfececH
	DQ	4bdb9690ab4ddbdbH
	DQ	bea1611f5fc0a1a1H
	DQ	0e8d1c8307918d8dH
	DQ	f43df5c97ac83d3dH
	DQ	6697ccf1335b9797H
	DQ	0000000000000000H
	DQ	1bcf36d483f9cfcfH
	DQ	ac2b4587566e2b2bH
	DQ	c57697b3ece17676H
	DQ	328264b019e68282H
	DQ	7fd6fea9b128d6d6H
	DQ	6c1bd87736c31b1bH
	DQ	eeb5c15b7774b5b5H
	DQ	86af112943beafafH
	DQ	b56a77dfd41d6a6aH
	DQ	5d50ba0da0ea5050H
	DQ	0945124c8a574545H
	DQ	ebf3cb18fb38f3f3H
	DQ	c0309df060ad3030H
	DQ	9bef2b74c3c4efefH
	DQ	fc3fe5c37eda3f3fH
	DQ	4955921caac75555H
	DQ	b2a2791059dba2a2H
	DQ	8fea0365c9e9eaeaH
	DQ	89650fecca6a6565H
	DQ	d2bab9686903babaH
	DQ	bc2f65935e4a2f2fH
	DQ	27c04ee79d8ec0c0H
	DQ	5fdebe81a160dedeH
	DQ	701ce06c38fc1c1cH
	DQ	d3fdbb2ee746fdfdH
	DQ	294d52649a1f4d4dH
	DQ	7292e4e039769292H
	DQ	c9758fbceafa7575H
	DQ	1806301e0c360606H
	DQ	128a249809ae8a8aH
	DQ	f2b2f940794bb2b2H
	DQ	bfe66359d185e6e6H
	DQ	380e70361c7e0e0eH
	DQ	7c1ff8633ee71f1fH
	DQ	956237f7c4556262H
	DQ	77d4eea3b53ad4d4H
	DQ	9aa829324d81a8a8H
	DQ	6296c4f431529696H
	DQ	c3f99b3aef62f9f9H
	DQ	33c566f697a3c5c5H
	DQ	942535b14a102525H
	DQ	7959f220b2ab5959H
	DQ	2a8454ae15d08484H
	DQ	d572b7a7e4c57272H
	DQ	e439d5dd72ec3939H
	DQ	2d4c5a6198164c4cH
	DQ	655eca3bbc945e5eH
	DQ	fd78e785f09f7878H
	DQ	e038ddd870e53838H
	DQ	0a8c148605988c8cH
	DQ	63d1c6b2bf17d1d1H
	DQ	aea5410b57e4a5a5H
	DQ	afe2434dd9a1e2e2H
	DQ	99612ff8c24e6161H
	DQ	f6b3f1457b42b3b3H
	DQ	842115a542342121H
	DQ	4a9c94d625089c9cH
	DQ	781ef0663cee1e1eH
	DQ	1143225286614343H
	DQ	3bc776fc93b1c7c7H
	DQ	d7fcb32be54ffcfcH
	DQ	1004201408240404H
	DQ	5951b208a2e35151H
	DQ	5e99bcc72f259999H
	DQ	a96d4fc4da226d6dH
	DQ	340d68391a650d0dH
	DQ	cffa8335e979fafaH
	DQ	5bdfb684a369dfdfH
	DQ	e57ed79bfca97e7eH
	DQ	90243db448192424H
	DQ	ec3bc5d776fe3b3bH
	DQ	96ab313d4b9aababH
	DQ	1fce3ed181f0ceceH
	DQ	4411885522991111H
	DQ	068f0c8903838f8fH
	DQ	254e4a6b9c044e4eH
	DQ	e6b7d1517366b7b7H
	DQ	8beb0b60cbe0ebebH
	DQ	f03cfdcc78c13c3cH
	DQ	3e817cbf1ffd8181H
	DQ	6a94d4fe35409494H
	DQ	fbf7eb0cf31cf7f7H
	DQ	deb9a1676f18b9b9H
	DQ	4c13985f268b1313H
	DQ	b02c7d9c58512c2cH
	DQ	6bd3d6b8bb05d3d3H
	DQ	bbe76b5cd38ce7e7H
	DQ	a56e57cbdc396e6eH
	DQ	37c46ef395aac4c4H
	DQ	0c03180f061b0303H
	DQ	45568a13acdc5656H
	DQ	0d441a49885e4444H
	DQ	e17fdf9efea07f7fH
	DQ	9ea921374f88a9a9H
	DQ	a82a4d8254672a2aH
	DQ	d6bbb16d6b0abbbbH
	DQ	23c146e29f87c1c1H
	DQ	5153a202a6f15353H
	DQ	57dcae8ba572dcdcH
	DQ	2c0b582716530b0bH
	DQ	4e9d9cd327019d9dH
	DQ	ad6c47c1d82b6c6cH
	DQ	c43195f562a43131H
	DQ	cd7487b9e8f37474H
	DQ	fff6e309f115f6f6H
	DQ	05460a438c4c4646H
	DQ	8aac092645a5acacH
	DQ	1e893c970fb58989H
	DQ	5014a04428b41414H
	DQ	a3e15b42dfbae1e1H
	DQ	5816b04e2ca61616H
	DQ	e83acdd274f73a3aH
	DQ	b9696fd0d2066969H
	DQ	2409482d12410909H
	DQ	dd70a7ade0d77070H
	DQ	e2b6d954716fb6b6H
	DQ	67d0ceb7bd1ed0d0H
	DQ	93ed3b7ec7d6ededH
	DQ	17cc2edb85e2ccccH
	DQ	15422a5784684242H
	DQ	5a98b4c22d2c9898H
	DQ	aaa4490e55eda4a4H
	DQ	a0285d8850752828H
	DQ	6d5cda31b8865c5cH
	DQ	c7f8933fed6bf8f8H
	DQ	228644a411c28686H
_C7	DQ	186018c07830d818H
	DQ	238c2305af462623H
	DQ	c63fc67ef991b8c6H
	DQ	e887e8136fcdfbe8H
	DQ	8726874ca113cb87H
	DQ	b8dab8a9626d11b8H
	DQ	0104010805020901H
	DQ	4f214f426e9e0d4fH
	DQ	36d836adee6c9b36H
	DQ	a6a2a6590451ffa6H
	DQ	d26fd2debdb90cd2H
	DQ	f5f3f5fb06f70ef5H
	DQ	79f979ef80f29679H
	DQ	6fa16f5fcede306fH
	DQ	917e91fcef3f6d91H
	DQ	525552aa07a4f852H
	DQ	609d6027fdc04760H
	DQ	bccabc89766535bcH
	DQ	9b569baccd2b379bH
	DQ	8e028e048c018a8eH
	DQ	a3b6a371155bd2a3H
	DQ	0c300c603c186c0cH
	DQ	7bf17bff8af6847bH
	DQ	35d435b5e16a8035H
	DQ	1d741de8693af51dH
	DQ	e0a7e05347ddb3e0H
	DQ	d77bd7f6acb321d7H
	DQ	c22fc25eed999cc2H
	DQ	2eb82e6d965c432eH
	DQ	4b314b627a96294bH
	DQ	fedffea321e15dfeH
	DQ	5741578216aed557H
	DQ	155415a8412abd15H
	DQ	77c1779fb6eee877H
	DQ	37dc37a5eb6e9237H
	DQ	e5b3e57b56d79ee5H
	DQ	9f469f8cd923139fH
	DQ	f0e7f0d317fd23f0H
	DQ	4a354a6a7f94204aH
	DQ	da4fda9e95a944daH
	DQ	587d58fa25b0a258H
	DQ	c903c906ca8fcfc9H
	DQ	29a429558d527c29H
	DQ	0a280a5022145a0aH
	DQ	b1feb1e14f7f50b1H
	DQ	a0baa0691a5dc9a0H
	DQ	6bb16b7fdad6146bH
	DQ	852e855cab17d985H
	DQ	bdcebd8173673cbdH
	DQ	5d695dd234ba8f5dH
	DQ	1040108050209010H
	DQ	f4f7f4f303f507f4H
	DQ	cb0bcb16c08bddcbH
	DQ	3ef83eedc67cd33eH
	DQ	05140528110a2d05H
	DQ	6781671fe6ce7867H
	DQ	e4b7e47353d597e4H
	DQ	279c2725bb4e0227H
	DQ	4119413258827341H
	DQ	8b168b2c9d0ba78bH
	DQ	a7a6a7510153f6a7H
	DQ	7de97dcf94fab27dH
	DQ	956e95dcfb374995H
	DQ	d847d88e9fad56d8H
	DQ	fbcbfb8b30eb70fbH
	DQ	ee9fee2371c1cdeeH
	DQ	7ced7cc791f8bb7cH
	DQ	66856617e3cc7166H
	DQ	dd53dda68ea77bddH
	DQ	175c17b84b2eaf17H
	DQ	47014702468e4547H
	DQ	9e429e84dc211a9eH
	DQ	ca0fca1ec589d4caH
	DQ	2db42d75995a582dH
	DQ	bfc6bf9179632ebfH
	DQ	071c07381b0e3f07H
	DQ	ad8ead012347acadH
	DQ	5a755aea2fb4b05aH
	DQ	8336836cb51bef83H
	DQ	33cc3385ff66b633H
	DQ	6391633ff2c65c63H
	DQ	020802100a041202H
	DQ	aa92aa39384993aaH
	DQ	71d971afa8e2de71H
	DQ	c807c80ecf8dc6c8H
	DQ	196419c87d32d119H
	DQ	4939497270923b49H
	DQ	d943d9869aaf5fd9H
	DQ	f2eff2c31df931f2H
	DQ	e3abe34b48dba8e3H
	DQ	5b715be22ab6b95bH
	DQ	881a8834920dbc88H
	DQ	9a529aa4c8293e9aH
	DQ	2698262dbe4c0b26H
	DQ	32c8328dfa64bf32H
	DQ	b0fab0e94a7d59b0H
	DQ	e983e91b6acff2e9H
	DQ	0f3c0f78331e770fH
	DQ	d573d5e6a6b733d5H
	DQ	803a8074ba1df480H
	DQ	bec2be997c6127beH
	DQ	cd13cd26de87ebcdH
	DQ	34d034bde4688934H
	DQ	483d487a75903248H
	DQ	ffdbffab24e354ffH
	DQ	7af57af78ff48d7aH
	DQ	907a90f4ea3d6490H
	DQ	5f615fc23ebe9d5fH
	DQ	2080201da0403d20H
	DQ	68bd6867d5d00f68H
	DQ	1a681ad07234ca1aH
	DQ	ae82ae192c41b7aeH
	DQ	b4eab4c95e757db4H
	DQ	544d549a19a8ce54H
	DQ	937693ece53b7f93H
	DQ	2288220daa442f22H
	DQ	648d6407e9c86364H
	DQ	f1e3f1db12ff2af1H
	DQ	73d173bfa2e6cc73H
	DQ	124812905a248212H
	DQ	401d403a5d807a40H
	DQ	0820084028104808H
	DQ	c32bc356e89b95c3H
	DQ	ec97ec337bc5dfecH
	DQ	db4bdb9690ab4ddbH
	DQ	a1bea1611f5fc0a1H
	DQ	8d0e8d1c8307918dH
	DQ	3df43df5c97ac83dH
	DQ	976697ccf1335b97H
	DQ	0000000000000000H
	DQ	cf1bcf36d483f9cfH
	DQ	2bac2b4587566e2bH
	DQ	76c57697b3ece176H
	DQ	82328264b019e682H
	DQ	d67fd6fea9b128d6H
	DQ	1b6c1bd87736c31bH
	DQ	b5eeb5c15b7774b5H
	DQ	af86af112943beafH
	DQ	6ab56a77dfd41d6aH
	DQ	505d50ba0da0ea50H
	DQ	450945124c8a5745H
	DQ	f3ebf3cb18fb38f3H
	DQ	30c0309df060ad30H
	DQ	ef9bef2b74c3c4efH
	DQ	3ffc3fe5c37eda3fH
	DQ	554955921caac755H
	DQ	a2b2a2791059dba2H
	DQ	ea8fea0365c9e9eaH
	DQ	6589650fecca6a65H
	DQ	bad2bab9686903baH
	DQ	2fbc2f65935e4a2fH
	DQ	c027c04ee79d8ec0H
	DQ	de5fdebe81a160deH
	DQ	1c701ce06c38fc1cH
	DQ	fdd3fdbb2ee746fdH
	DQ	4d294d52649a1f4dH
	DQ	927292e4e0397692H
	DQ	75c9758fbceafa75H
	DQ	061806301e0c3606H
	DQ	8a128a249809ae8aH
	DQ	b2f2b2f940794bb2H
	DQ	e6bfe66359d185e6H
	DQ	0e380e70361c7e0eH
	DQ	1f7c1ff8633ee71fH
	DQ	62956237f7c45562H
	DQ	d477d4eea3b53ad4H
	DQ	a89aa829324d81a8H
	DQ	966296c4f4315296H
	DQ	f9c3f99b3aef62f9H
	DQ	c533c566f697a3c5H
	DQ	25942535b14a1025H
	DQ	597959f220b2ab59H
	DQ	842a8454ae15d084H
	DQ	72d572b7a7e4c572H
	DQ	39e439d5dd72ec39H
	DQ	4c2d4c5a6198164cH
	DQ	5e655eca3bbc945eH
	DQ	78fd78e785f09f78H
	DQ	38e038ddd870e538H
	DQ	8c0a8c148605988cH
	DQ	d163d1c6b2bf17d1H
	DQ	a5aea5410b57e4a5H
	DQ	e2afe2434dd9a1e2H
	DQ	6199612ff8c24e61H
	DQ	b3f6b3f1457b42b3H
	DQ	21842115a5423421H
	DQ	9c4a9c94d625089cH
	DQ	1e781ef0663cee1eH
	DQ	4311432252866143H
	DQ	c73bc776fc93b1c7H
	DQ	fcd7fcb32be54ffcH
	DQ	0410042014082404H
	DQ	515951b208a2e351H
	DQ	995e99bcc72f2599H
	DQ	6da96d4fc4da226dH
	DQ	0d340d68391a650dH
	DQ	facffa8335e979faH
	DQ	df5bdfb684a369dfH
	DQ	7ee57ed79bfca97eH
	DQ	2490243db4481924H
	DQ	3bec3bc5d776fe3bH
	DQ	ab96ab313d4b9aabH
	DQ	ce1fce3ed181f0ceH
	DQ	1144118855229911H
	DQ	8f068f0c8903838fH
	DQ	4e254e4a6b9c044eH
	DQ	b7e6b7d1517366b7H
	DQ	eb8beb0b60cbe0ebH
	DQ	3cf03cfdcc78c13cH
	DQ	813e817cbf1ffd81H
	DQ	946a94d4fe354094H
	DQ	f7fbf7eb0cf31cf7H
	DQ	b9deb9a1676f18b9H
	DQ	134c13985f268b13H
	DQ	2cb02c7d9c58512cH
	DQ	d36bd3d6b8bb05d3H
	DQ	e7bbe76b5cd38ce7H
	DQ	6ea56e57cbdc396eH
	DQ	c437c46ef395aac4H
	DQ	030c03180f061b03H
	DQ	5645568a13acdc56H
	DQ	440d441a49885e44H
	DQ	7fe17fdf9efea07fH
	DQ	a99ea921374f88a9H
	DQ	2aa82a4d8254672aH
	DQ	bbd6bbb16d6b0abbH
	DQ	c123c146e29f87c1H
	DQ	535153a202a6f153H
	DQ	dc57dcae8ba572dcH
	DQ	0b2c0b582716530bH
	DQ	9d4e9d9cd327019dH
	DQ	6cad6c47c1d82b6cH
	DQ	31c43195f562a431H
	DQ	74cd7487b9e8f374H
	DQ	f6fff6e309f115f6H
	DQ	4605460a438c4c46H
	DQ	ac8aac092645a5acH
	DQ	891e893c970fb589H
	DQ	145014a04428b414H
	DQ	e1a3e15b42dfbae1H
	DQ	165816b04e2ca616H
	DQ	3ae83acdd274f73aH
	DQ	69b9696fd0d20669H
	DQ	092409482d124109H
	DQ	70dd70a7ade0d770H
	DQ	b6e2b6d954716fb6H
	DQ	d067d0ceb7bd1ed0H
	DQ	ed93ed3b7ec7d6edH
	DQ	cc17cc2edb85e2ccH
	DQ	4215422a57846842H
	DQ	985a98b4c22d2c98H
	DQ	a4aaa4490e55eda4H
	DQ	28a0285d88507528H
	DQ	5c6d5cda31b8865cH
	DQ	f8c7f8933fed6bf8H
	DQ	86228644a411c286H
_rc	DQ	0000000000000000H
	DQ	1823c6e887b8014fH
	DQ	36a6d2f5796f9152H
	DQ	60bc9b8ea30c7b35H
	DQ	1de0d7c22e4bfe57H
	DQ	157737e59ff04adaH
	DQ	58c9290ab1a06b85H
	DQ	bd5d10f4cb3e0567H
	DQ	e427418ba77d95d8H
	DQ	fbee7c66dd17479eH
	DQ	ca2dbf07ad5a8333H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\crypto\whirlpool.c
CONST	ENDS
;	COMDAT _processBuffer
_TEXT	SEGMENT
tv2884 = -376						; size = 4
tv2827 = -376						; size = 4
tv2774 = -376						; size = 4
tv2721 = -376						; size = 4
tv2664 = -376						; size = 4
tv1971 = -376						; size = 4
tv1969 = -376						; size = 4
tv1967 = -376						; size = 4
tv1965 = -376						; size = 4
tv1963 = -376						; size = 4
tv4039 = -372						; size = 8
tv142 = -364						; size = 8
tv4195 = -356						; size = 8
tv4143 = -348						; size = 8
tv4091 = -340						; size = 8
_K$ = -332						; size = 64
_state$ = -268						; size = 64
_L$ = -204						; size = 64
tv1831 = -140						; size = 8
tv1296 = -140						; size = 8
tv3826 = -132						; size = 4
_block$ = -128						; size = 64
tv1835 = -64						; size = 8
tv4247 = -56						; size = 8
tv1851 = -48						; size = 8
tv1839 = -40						; size = 8
tv1859 = -32						; size = 8
tv1843 = -24						; size = 8
tv1855 = -16						; size = 8
tv1847 = -8						; size = 8
_structpointer$ = 8					; size = 4
_processBuffer PROC					; COMDAT

; 635  : static void processBuffer(struct NESSIEstruct * const structpointer) {

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _structpointer$[esp-4]
  00004	81 ec 78 01 00
	00		 sub	 esp, 376		; 00000178H
  0000a	53		 push	 ebx
  0000b	55		 push	 ebp
  0000c	56		 push	 esi
  0000d	57		 push	 edi

; 636  :     int i, r;
; 637  :     u64 K[8];        /* the round key */
; 638  :     u64 block[8];    /* mu(buffer) */
; 639  :     u64 state[8];    /* the cipher state */
; 640  :     u64 L[8];
; 641  :     u8 *buffer = structpointer->buffer;

  0000e	8d 71 20	 lea	 esi, DWORD PTR [ecx+32]

; 642  :     /*
; 643  :      * map the buffer to a block:
; 644  :      */
; 645  :     for (i = 0; i < 8; i++, buffer += 8) {

  00011	33 ff		 xor	 edi, edi
$LL6@processBuf:

; 646  :         block[i] =
; 647  :             (((u64)buffer[0]        ) << 56) ^
; 648  :             (((u64)buffer[1] & 0xffL) << 48) ^
; 649  :             (((u64)buffer[2] & 0xffL) << 40) ^
; 650  :             (((u64)buffer[3] & 0xffL) << 32) ^
; 651  :             (((u64)buffer[4] & 0xffL) << 24) ^
; 652  :             (((u64)buffer[5] & 0xffL) << 16) ^
; 653  :             (((u64)buffer[6] & 0xffL) <<  8) ^
; 654  :             (((u64)buffer[7] & 0xffL)      );

  00013	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00016	99		 cdq
  00017	0f a4 c2 08	 shld	 edx, eax, 8
  0001b	c1 e0 08	 shl	 eax, 8
  0001e	8b d8		 mov	 ebx, eax
  00020	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  00024	8b ea		 mov	 ebp, edx
  00026	99		 cdq
  00027	33 d8		 xor	 ebx, eax
  00029	33 ea		 xor	 ebp, edx
  0002b	0f a4 dd 08	 shld	 ebp, ebx, 8
  0002f	0f b6 46 02	 movzx	 eax, BYTE PTR [esi+2]
  00033	c1 e3 08	 shl	 ebx, 8
  00036	99		 cdq
  00037	33 d8		 xor	 ebx, eax
  00039	33 ea		 xor	 ebp, edx
  0003b	0f a4 dd 08	 shld	 ebp, ebx, 8
  0003f	0f b6 46 03	 movzx	 eax, BYTE PTR [esi+3]
  00043	c1 e3 08	 shl	 ebx, 8
  00046	99		 cdq
  00047	33 d8		 xor	 ebx, eax
  00049	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  0004d	33 ea		 xor	 ebp, edx
  0004f	0f a4 dd 08	 shld	 ebp, ebx, 8
  00053	c1 e3 08	 shl	 ebx, 8
  00056	99		 cdq
  00057	33 d8		 xor	 ebx, eax
  00059	0f b6 46 05	 movzx	 eax, BYTE PTR [esi+5]
  0005d	33 ea		 xor	 ebp, edx
  0005f	0f a4 dd 08	 shld	 ebp, ebx, 8
  00063	c1 e3 08	 shl	 ebx, 8
  00066	99		 cdq
  00067	33 d8		 xor	 ebx, eax
  00069	0f b6 46 06	 movzx	 eax, BYTE PTR [esi+6]
  0006d	33 ea		 xor	 ebp, edx
  0006f	0f a4 dd 08	 shld	 ebp, ebx, 8
  00073	99		 cdq
  00074	c1 e3 08	 shl	 ebx, 8
  00077	33 d8		 xor	 ebx, eax
  00079	0f b6 46 07	 movzx	 eax, BYTE PTR [esi+7]
  0007d	33 ea		 xor	 ebp, edx
  0007f	0f a4 dd 08	 shld	 ebp, ebx, 8
  00083	99		 cdq
  00084	c1 e3 08	 shl	 ebx, 8
  00087	33 d8		 xor	 ebx, eax
  00089	0f b6 46 08	 movzx	 eax, BYTE PTR [esi+8]
  0008d	33 ea		 xor	 ebp, edx
  0008f	99		 cdq
  00090	0f a4 c2 08	 shld	 edx, eax, 8
  00094	89 9c fc 08 01
	00 00		 mov	 DWORD PTR _block$[esp+edi*8+392], ebx
  0009b	c1 e0 08	 shl	 eax, 8
  0009e	8b d8		 mov	 ebx, eax
  000a0	0f b6 46 09	 movzx	 eax, BYTE PTR [esi+9]
  000a4	89 ac fc 0c 01
	00 00		 mov	 DWORD PTR _block$[esp+edi*8+396], ebp
  000ab	8b ea		 mov	 ebp, edx
  000ad	99		 cdq
  000ae	33 d8		 xor	 ebx, eax
  000b0	0f b6 46 0a	 movzx	 eax, BYTE PTR [esi+10]
  000b4	33 ea		 xor	 ebp, edx
  000b6	0f a4 dd 08	 shld	 ebp, ebx, 8
  000ba	c1 e3 08	 shl	 ebx, 8
  000bd	99		 cdq
  000be	33 d8		 xor	 ebx, eax
  000c0	0f b6 46 0b	 movzx	 eax, BYTE PTR [esi+11]
  000c4	33 ea		 xor	 ebp, edx
  000c6	0f a4 dd 08	 shld	 ebp, ebx, 8
  000ca	c1 e3 08	 shl	 ebx, 8
  000cd	99		 cdq
  000ce	33 d8		 xor	 ebx, eax
  000d0	0f b6 46 0c	 movzx	 eax, BYTE PTR [esi+12]
  000d4	33 ea		 xor	 ebp, edx
  000d6	0f a4 dd 08	 shld	 ebp, ebx, 8
  000da	99		 cdq
  000db	c1 e3 08	 shl	 ebx, 8
  000de	33 d8		 xor	 ebx, eax
  000e0	0f b6 46 0d	 movzx	 eax, BYTE PTR [esi+13]
  000e4	33 ea		 xor	 ebp, edx
  000e6	0f a4 dd 08	 shld	 ebp, ebx, 8
  000ea	99		 cdq
  000eb	c1 e3 08	 shl	 ebx, 8
  000ee	33 d8		 xor	 ebx, eax
  000f0	33 ea		 xor	 ebp, edx
  000f2	0f a4 dd 08	 shld	 ebp, ebx, 8
  000f6	0f b6 46 0e	 movzx	 eax, BYTE PTR [esi+14]
  000fa	c1 e3 08	 shl	 ebx, 8
  000fd	99		 cdq
  000fe	33 d8		 xor	 ebx, eax
  00100	33 ea		 xor	 ebp, edx
  00102	0f a4 dd 08	 shld	 ebp, ebx, 8
  00106	0f b6 46 0f	 movzx	 eax, BYTE PTR [esi+15]
  0010a	99		 cdq
  0010b	c1 e3 08	 shl	 ebx, 8
  0010e	33 d8		 xor	 ebx, eax
  00110	0f b6 46 10	 movzx	 eax, BYTE PTR [esi+16]
  00114	33 ea		 xor	 ebp, edx
  00116	99		 cdq
  00117	0f a4 c2 08	 shld	 edx, eax, 8
  0011b	89 9c fc 10 01
	00 00		 mov	 DWORD PTR _block$[esp+edi*8+400], ebx
  00122	c1 e0 08	 shl	 eax, 8
  00125	8b d8		 mov	 ebx, eax
  00127	0f b6 46 11	 movzx	 eax, BYTE PTR [esi+17]
  0012b	89 ac fc 14 01
	00 00		 mov	 DWORD PTR _block$[esp+edi*8+404], ebp
  00132	8b ea		 mov	 ebp, edx
  00134	99		 cdq
  00135	33 d8		 xor	 ebx, eax
  00137	0f b6 46 12	 movzx	 eax, BYTE PTR [esi+18]
  0013b	33 ea		 xor	 ebp, edx
  0013d	0f a4 dd 08	 shld	 ebp, ebx, 8
  00141	c1 e3 08	 shl	 ebx, 8
  00144	99		 cdq
  00145	33 d8		 xor	 ebx, eax
  00147	0f b6 46 13	 movzx	 eax, BYTE PTR [esi+19]
  0014b	33 ea		 xor	 ebp, edx
  0014d	0f a4 dd 08	 shld	 ebp, ebx, 8
  00151	c1 e3 08	 shl	 ebx, 8
  00154	99		 cdq
  00155	33 d8		 xor	 ebx, eax
  00157	0f b6 46 14	 movzx	 eax, BYTE PTR [esi+20]
  0015b	33 ea		 xor	 ebp, edx
  0015d	0f a4 dd 08	 shld	 ebp, ebx, 8
  00161	c1 e3 08	 shl	 ebx, 8
  00164	99		 cdq
  00165	33 d8		 xor	 ebx, eax
  00167	0f b6 46 15	 movzx	 eax, BYTE PTR [esi+21]
  0016b	33 ea		 xor	 ebp, edx
  0016d	0f a4 dd 08	 shld	 ebp, ebx, 8
  00171	99		 cdq
  00172	c1 e3 08	 shl	 ebx, 8
  00175	33 d8		 xor	 ebx, eax
  00177	0f b6 46 16	 movzx	 eax, BYTE PTR [esi+22]
  0017b	33 ea		 xor	 ebp, edx
  0017d	0f a4 dd 08	 shld	 ebp, ebx, 8
  00181	99		 cdq
  00182	c1 e3 08	 shl	 ebx, 8
  00185	33 d8		 xor	 ebx, eax
  00187	0f b6 46 17	 movzx	 eax, BYTE PTR [esi+23]
  0018b	33 ea		 xor	 ebp, edx
  0018d	0f a4 dd 08	 shld	 ebp, ebx, 8
  00191	99		 cdq
  00192	c1 e3 08	 shl	 ebx, 8
  00195	33 d8		 xor	 ebx, eax
  00197	0f b6 46 18	 movzx	 eax, BYTE PTR [esi+24]
  0019b	33 ea		 xor	 ebp, edx
  0019d	99		 cdq
  0019e	0f a4 c2 08	 shld	 edx, eax, 8
  001a2	89 9c fc 18 01
	00 00		 mov	 DWORD PTR _block$[esp+edi*8+408], ebx
  001a9	c1 e0 08	 shl	 eax, 8
  001ac	8b d8		 mov	 ebx, eax
  001ae	0f b6 46 19	 movzx	 eax, BYTE PTR [esi+25]
  001b2	89 ac fc 1c 01
	00 00		 mov	 DWORD PTR _block$[esp+edi*8+412], ebp
  001b9	8b ea		 mov	 ebp, edx
  001bb	99		 cdq
  001bc	33 d8		 xor	 ebx, eax
  001be	0f b6 46 1a	 movzx	 eax, BYTE PTR [esi+26]
  001c2	33 ea		 xor	 ebp, edx
  001c4	0f a4 dd 08	 shld	 ebp, ebx, 8
  001c8	c1 e3 08	 shl	 ebx, 8
  001cb	99		 cdq
  001cc	33 d8		 xor	 ebx, eax
  001ce	33 ea		 xor	 ebp, edx
  001d0	0f a4 dd 08	 shld	 ebp, ebx, 8
  001d4	c1 e3 08	 shl	 ebx, 8
  001d7	0f b6 46 1b	 movzx	 eax, BYTE PTR [esi+27]
  001db	99		 cdq
  001dc	33 d8		 xor	 ebx, eax
  001de	0f b6 46 1c	 movzx	 eax, BYTE PTR [esi+28]
  001e2	33 ea		 xor	 ebp, edx
  001e4	0f a4 dd 08	 shld	 ebp, ebx, 8
  001e8	c1 e3 08	 shl	 ebx, 8
  001eb	99		 cdq
  001ec	33 d8		 xor	 ebx, eax
  001ee	0f b6 46 1d	 movzx	 eax, BYTE PTR [esi+29]
  001f2	33 ea		 xor	 ebp, edx
  001f4	0f a4 dd 08	 shld	 ebp, ebx, 8
  001f8	c1 e3 08	 shl	 ebx, 8
  001fb	99		 cdq
  001fc	33 d8		 xor	 ebx, eax
  001fe	0f b6 46 1e	 movzx	 eax, BYTE PTR [esi+30]
  00202	33 ea		 xor	 ebp, edx
  00204	0f a4 dd 08	 shld	 ebp, ebx, 8
  00208	c1 e3 08	 shl	 ebx, 8
  0020b	99		 cdq
  0020c	33 d8		 xor	 ebx, eax
  0020e	0f b6 46 1f	 movzx	 eax, BYTE PTR [esi+31]
  00212	33 ea		 xor	 ebp, edx
  00214	0f a4 dd 08	 shld	 ebp, ebx, 8
  00218	99		 cdq
  00219	c1 e3 08	 shl	 ebx, 8
  0021c	33 d8		 xor	 ebx, eax
  0021e	33 ea		 xor	 ebp, edx
  00220	89 9c fc 20 01
	00 00		 mov	 DWORD PTR _block$[esp+edi*8+416], ebx
  00227	89 ac fc 24 01
	00 00		 mov	 DWORD PTR _block$[esp+edi*8+420], ebp
  0022e	83 c7 04	 add	 edi, 4
  00231	83 c6 20	 add	 esi, 32			; 00000020H
  00234	83 ff 08	 cmp	 edi, 8
  00237	0f 8c d6 fd ff
	ff		 jl	 $LL6@processBuf

; 655  :     }
; 656  :     /*
; 657  :      * compute and apply K^0 to the cipher state:
; 658  :      */
; 659  :     state[0] = block[0] ^ (K[0] = structpointer->hash[0]);

  0023d	8b 41 68	 mov	 eax, DWORD PTR [ecx+104]
  00240	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00243	89 84 24 fc 00
	00 00		 mov	 DWORD PTR tv1831[esp+392], eax
  0024a	89 44 24 3c	 mov	 DWORD PTR _K$[esp+392], eax
  0024e	33 84 24 08 01
	00 00		 xor	 eax, DWORD PTR _block$[esp+392]
  00255	89 94 24 00 01
	00 00		 mov	 DWORD PTR tv1831[esp+396], edx
  0025c	89 44 24 7c	 mov	 DWORD PTR _state$[esp+392], eax
  00260	8b c2		 mov	 eax, edx
  00262	33 84 24 0c 01
	00 00		 xor	 eax, DWORD PTR _block$[esp+396]
  00269	89 54 24 40	 mov	 DWORD PTR _K$[esp+396], edx

; 660  :     state[1] = block[1] ^ (K[1] = structpointer->hash[1]);

  0026d	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  00270	89 84 24 80 00
	00 00		 mov	 DWORD PTR _state$[esp+396], eax
  00277	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
  0027a	89 84 24 48 01
	00 00		 mov	 DWORD PTR tv1835[esp+392], eax
  00281	89 44 24 44	 mov	 DWORD PTR _K$[esp+400], eax
  00285	33 84 24 10 01
	00 00		 xor	 eax, DWORD PTR _block$[esp+400]

; 661  :     state[2] = block[2] ^ (K[2] = structpointer->hash[2]);
; 662  :     state[3] = block[3] ^ (K[3] = structpointer->hash[3]);
; 663  :     state[4] = block[4] ^ (K[4] = structpointer->hash[4]);

  0028c	8b b9 88 00 00
	00		 mov	 edi, DWORD PTR [ecx+136]
  00292	89 84 24 84 00
	00 00		 mov	 DWORD PTR _state$[esp+400], eax
  00299	8b c2		 mov	 eax, edx
  0029b	33 84 24 14 01
	00 00		 xor	 eax, DWORD PTR _block$[esp+404]
  002a2	89 94 24 4c 01
	00 00		 mov	 DWORD PTR tv1835[esp+396], edx
  002a9	89 84 24 88 00
	00 00		 mov	 DWORD PTR _state$[esp+404], eax
  002b0	8b 41 78	 mov	 eax, DWORD PTR [ecx+120]
  002b3	89 84 24 60 01
	00 00		 mov	 DWORD PTR tv1839[esp+392], eax
  002ba	89 44 24 4c	 mov	 DWORD PTR _K$[esp+408], eax
  002be	33 84 24 18 01
	00 00		 xor	 eax, DWORD PTR _block$[esp+408]
  002c5	89 54 24 48	 mov	 DWORD PTR _K$[esp+404], edx
  002c9	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
  002cc	89 84 24 8c 00
	00 00		 mov	 DWORD PTR _state$[esp+408], eax
  002d3	8b c2		 mov	 eax, edx
  002d5	33 84 24 1c 01
	00 00		 xor	 eax, DWORD PTR _block$[esp+412]

; 664  :     state[5] = block[5] ^ (K[5] = structpointer->hash[5]);

  002dc	8b 99 94 00 00
	00		 mov	 ebx, DWORD PTR [ecx+148]
  002e2	89 84 24 90 00
	00 00		 mov	 DWORD PTR _state$[esp+412], eax
  002e9	8b 81 80 00 00
	00		 mov	 eax, DWORD PTR [ecx+128]
  002ef	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv1843[esp+392], eax
  002f6	89 44 24 54	 mov	 DWORD PTR _K$[esp+416], eax
  002fa	33 84 24 20 01
	00 00		 xor	 eax, DWORD PTR _block$[esp+416]
  00301	89 94 24 64 01
	00 00		 mov	 DWORD PTR tv1839[esp+396], edx
  00308	89 84 24 94 00
	00 00		 mov	 DWORD PTR _state$[esp+416], eax
  0030f	89 54 24 50	 mov	 DWORD PTR _K$[esp+412], edx
  00313	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00319	8b c2		 mov	 eax, edx
  0031b	33 84 24 24 01
	00 00		 xor	 eax, DWORD PTR _block$[esp+420]

; 665  :     state[6] = block[6] ^ (K[6] = structpointer->hash[6]);

  00322	8b a9 9c 00 00
	00		 mov	 ebp, DWORD PTR [ecx+156]
  00328	89 84 24 98 00
	00 00		 mov	 DWORD PTR _state$[esp+420], eax
  0032f	8b 81 8c 00 00
	00		 mov	 eax, DWORD PTR [ecx+140]
  00335	89 84 24 84 01
	00 00		 mov	 DWORD PTR tv1847[esp+396], eax
  0033c	89 94 24 74 01
	00 00		 mov	 DWORD PTR tv1843[esp+396], edx
  00343	89 54 24 58	 mov	 DWORD PTR _K$[esp+420], edx
  00347	8b d0		 mov	 edx, eax
  00349	8b c7		 mov	 eax, edi
  0034b	33 84 24 28 01
	00 00		 xor	 eax, DWORD PTR _block$[esp+424]
  00352	89 54 24 60	 mov	 DWORD PTR _K$[esp+428], edx
  00356	89 84 24 9c 00
	00 00		 mov	 DWORD PTR _state$[esp+424], eax
  0035d	8b c2		 mov	 eax, edx
  0035f	33 84 24 2c 01
	00 00		 xor	 eax, DWORD PTR _block$[esp+428]

; 666  :     state[7] = block[7] ^ (K[7] = structpointer->hash[7]);

  00366	8b 91 a0 00 00
	00		 mov	 edx, DWORD PTR [ecx+160]
  0036c	89 84 24 a0 00
	00 00		 mov	 DWORD PTR _state$[esp+428], eax
  00373	8b 81 90 00 00
	00		 mov	 eax, DWORD PTR [ecx+144]
  00379	89 84 24 58 01
	00 00		 mov	 DWORD PTR tv1851[esp+392], eax
  00380	89 44 24 64	 mov	 DWORD PTR _K$[esp+432], eax
  00384	33 84 24 30 01
	00 00		 xor	 eax, DWORD PTR _block$[esp+432]
  0038b	89 bc 24 80 01
	00 00		 mov	 DWORD PTR tv1847[esp+392], edi
  00392	89 84 24 a4 00
	00 00		 mov	 DWORD PTR _state$[esp+432], eax
  00399	8b c3		 mov	 eax, ebx
  0039b	33 84 24 34 01
	00 00		 xor	 eax, DWORD PTR _block$[esp+436]
  003a2	89 7c 24 5c	 mov	 DWORD PTR _K$[esp+424], edi
  003a6	89 84 24 a8 00
	00 00		 mov	 DWORD PTR _state$[esp+436], eax
  003ad	8b 81 98 00 00
	00		 mov	 eax, DWORD PTR [ecx+152]
  003b3	89 84 24 78 01
	00 00		 mov	 DWORD PTR tv1855[esp+392], eax
  003ba	89 44 24 6c	 mov	 DWORD PTR _K$[esp+440], eax
  003be	33 84 24 38 01
	00 00		 xor	 eax, DWORD PTR _block$[esp+440]
  003c5	89 9c 24 5c 01
	00 00		 mov	 DWORD PTR tv1851[esp+396], ebx
  003cc	89 84 24 ac 00
	00 00		 mov	 DWORD PTR _state$[esp+440], eax
  003d3	8b c5		 mov	 eax, ebp
  003d5	33 84 24 3c 01
	00 00		 xor	 eax, DWORD PTR _block$[esp+444]
  003dc	89 5c 24 68	 mov	 DWORD PTR _K$[esp+436], ebx
  003e0	89 ac 24 7c 01
	00 00		 mov	 DWORD PTR tv1855[esp+396], ebp
  003e7	89 6c 24 70	 mov	 DWORD PTR _K$[esp+444], ebp
  003eb	89 84 24 b0 00
	00 00		 mov	 DWORD PTR _state$[esp+444], eax
  003f2	89 94 24 68 01
	00 00		 mov	 DWORD PTR tv1859[esp+392], edx
  003f9	8b 81 a4 00 00
	00		 mov	 eax, DWORD PTR [ecx+164]
  003ff	8b ca		 mov	 ecx, edx
  00401	89 4c 24 74	 mov	 DWORD PTR _K$[esp+448], ecx
  00405	33 8c 24 40 01
	00 00		 xor	 ecx, DWORD PTR _block$[esp+448]
  0040c	be 08 00 00 00	 mov	 esi, OFFSET _rc+8
  00411	89 8c 24 b4 00
	00 00		 mov	 DWORD PTR _state$[esp+448], ecx
  00418	8b c8		 mov	 ecx, eax
  0041a	33 8c 24 44 01
	00 00		 xor	 ecx, DWORD PTR _block$[esp+452]
  00421	89 84 24 6c 01
	00 00		 mov	 DWORD PTR tv1859[esp+396], eax
  00428	89 44 24 78	 mov	 DWORD PTR _K$[esp+452], eax
  0042c	89 8c 24 b8 00
	00 00		 mov	 DWORD PTR _state$[esp+452], ecx
  00433	89 b4 24 04 01
	00 00		 mov	 DWORD PTR tv3826[esp+392], esi
  0043a	eb 14		 jmp	 SHORT $LN3@processBuf
  0043c	8d 64 24 00	 npad	 4
$LL14@processBuf:

; 655  :     }
; 656  :     /*
; 657  :      * compute and apply K^0 to the cipher state:
; 658  :      */
; 659  :     state[0] = block[0] ^ (K[0] = structpointer->hash[0]);

  00440	8b 7c 24 5c	 mov	 edi, DWORD PTR _K$[esp+424]
  00444	8b 5c 24 68	 mov	 ebx, DWORD PTR _K$[esp+436]
  00448	8b 6c 24 70	 mov	 ebp, DWORD PTR _K$[esp+444]
  0044c	8b 44 24 78	 mov	 eax, DWORD PTR _K$[esp+452]
$LN3@processBuf:

; 667  :     /*
; 668  :      * iterate over all rounds:
; 669  :      */
; 670  :     for (r = 1; r <= R; r++) {
; 671  :         /*
; 672  :          * compute K^r from K^{r-1}:
; 673  :          */
; 674  :         L[0] =
; 675  :             C0[(int)(K[0] >> 56)       ] ^
; 676  :             C1[(int)(K[7] >> 48) & 0xff] ^
; 677  :             C2[(int)(K[6] >> 40) & 0xff] ^
; 678  :             C3[(int)(K[5] >> 32) & 0xff] ^
; 679  :             C4[(int)(K[4] >> 24) & 0xff] ^
; 680  :             C5[(int)(K[3] >> 16) & 0xff] ^
; 681  :             C6[(int)(K[2] >>  8) & 0xff] ^
; 682  :             C7[(int)(K[1]      ) & 0xff] ^
; 683  :             rc[r];

  00450	c1 e8 10	 shr	 eax, 16			; 00000010H
  00453	8b c8		 mov	 ecx, eax
  00455	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0045b	8b c5		 mov	 eax, ebp
  0045d	c1 e8 08	 shr	 eax, 8
  00460	8b d0		 mov	 edx, eax
  00462	8b 04 cd 00 00
	00 00		 mov	 eax, DWORD PTR _C1[ecx*8]
  00469	8b 0c cd 04 00
	00 00		 mov	 ecx, DWORD PTR _C1[ecx*8+4]
  00470	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00476	33 04 d5 00 00
	00 00		 xor	 eax, DWORD PTR _C2[edx*8]
  0047d	33 0c d5 04 00
	00 00		 xor	 ecx, DWORD PTR _C2[edx*8+4]
  00484	8b d3		 mov	 edx, ebx
  00486	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0048c	33 04 d5 00 00
	00 00		 xor	 eax, DWORD PTR _C3[edx*8]
  00493	33 0c d5 04 00
	00 00		 xor	 ecx, DWORD PTR _C3[edx*8+4]
  0049a	8b 54 24 60	 mov	 edx, DWORD PTR _K$[esp+428]
  0049e	0f ac d7 18	 shrd	 edi, edx, 24
  004a2	c1 ea 18	 shr	 edx, 24			; 00000018H
  004a5	89 54 24 10	 mov	 DWORD PTR tv1971[esp+392], edx
  004a9	8b d7		 mov	 edx, edi
  004ab	8b 7c 24 10	 mov	 edi, DWORD PTR tv1971[esp+392]
  004af	8b 7c 24 58	 mov	 edi, DWORD PTR _K$[esp+420]
  004b3	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  004b9	33 04 d5 00 00
	00 00		 xor	 eax, DWORD PTR _C4[edx*8]
  004c0	33 0c d5 04 00
	00 00		 xor	 ecx, DWORD PTR _C4[edx*8+4]
  004c7	8b 54 24 54	 mov	 edx, DWORD PTR _K$[esp+416]
  004cb	0f ac fa 10	 shrd	 edx, edi, 16
  004cf	c1 ef 10	 shr	 edi, 16			; 00000010H
  004d2	8b 7c 24 50	 mov	 edi, DWORD PTR _K$[esp+412]
  004d6	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  004dc	33 04 d5 00 00
	00 00		 xor	 eax, DWORD PTR _C5[edx*8]
  004e3	33 0c d5 04 00
	00 00		 xor	 ecx, DWORD PTR _C5[edx*8+4]
  004ea	8b 54 24 4c	 mov	 edx, DWORD PTR _K$[esp+408]
  004ee	0f ac fa 08	 shrd	 edx, edi, 8
  004f2	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  004f8	33 04 d5 00 00
	00 00		 xor	 eax, DWORD PTR _C6[edx*8]
  004ff	33 0c d5 04 00
	00 00		 xor	 ecx, DWORD PTR _C6[edx*8+4]
  00506	8b 54 24 40	 mov	 edx, DWORD PTR _K$[esp+396]
  0050a	c1 ea 18	 shr	 edx, 24			; 00000018H
  0050d	33 04 d5 00 00
	00 00		 xor	 eax, DWORD PTR _C0[edx*8]
  00514	33 0c d5 04 00
	00 00		 xor	 ecx, DWORD PTR _C0[edx*8+4]
  0051b	8b 54 24 44	 mov	 edx, DWORD PTR _K$[esp+400]
  0051f	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00525	33 04 d5 00 00
	00 00		 xor	 eax, DWORD PTR _C7[edx*8]
  0052c	33 0c d5 04 00
	00 00		 xor	 ecx, DWORD PTR _C7[edx*8+4]
  00533	33 06		 xor	 eax, DWORD PTR [esi]
  00535	33 4e 04	 xor	 ecx, DWORD PTR [esi+4]

; 684  :         L[1] =
; 685  :             C0[(int)(K[1] >> 56)       ] ^
; 686  :             C1[(int)(K[0] >> 48) & 0xff] ^
; 687  :             C2[(int)(K[7] >> 40) & 0xff] ^
; 688  :             C3[(int)(K[6] >> 32) & 0xff] ^
; 689  :             C4[(int)(K[5] >> 24) & 0xff] ^
; 690  :             C5[(int)(K[4] >> 16) & 0xff] ^
; 691  :             C6[(int)(K[3] >>  8) & 0xff] ^
; 692  :             C7[(int)(K[2]      ) & 0xff];

  00538	8b 74 24 78	 mov	 esi, DWORD PTR _K$[esp+452]
  0053c	c1 ef 08	 shr	 edi, 8
  0053f	c1 ee 08	 shr	 esi, 8
  00542	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  00548	8b 14 f5 00 00
	00 00		 mov	 edx, DWORD PTR _C2[esi*8]
  0054f	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C2[esi*8+4]
  00556	8b fd		 mov	 edi, ebp
  00558	81 e7 ff 00 00
	00		 and	 edi, 255		; 000000ffH
  0055e	33 14 fd 00 00
	00 00		 xor	 edx, DWORD PTR _C3[edi*8]
  00565	33 34 fd 04 00
	00 00		 xor	 esi, DWORD PTR _C3[edi*8+4]
  0056c	8b 7c 24 64	 mov	 edi, DWORD PTR _K$[esp+432]
  00570	0f ac df 18	 shrd	 edi, ebx, 24
  00574	81 e7 ff 00 00
	00		 and	 edi, 255		; 000000ffH
  0057a	33 14 fd 00 00
	00 00		 xor	 edx, DWORD PTR _C4[edi*8]
  00581	33 34 fd 04 00
	00 00		 xor	 esi, DWORD PTR _C4[edi*8+4]
  00588	8b 7c 24 5c	 mov	 edi, DWORD PTR _K$[esp+424]
  0058c	c1 eb 18	 shr	 ebx, 24			; 00000018H
  0058f	8b 5c 24 60	 mov	 ebx, DWORD PTR _K$[esp+428]
  00593	0f ac df 10	 shrd	 edi, ebx, 16
  00597	81 e7 ff 00 00
	00		 and	 edi, 255		; 000000ffH
  0059d	33 14 fd 00 00
	00 00		 xor	 edx, DWORD PTR _C5[edi*8]
  005a4	33 34 fd 04 00
	00 00		 xor	 esi, DWORD PTR _C5[edi*8+4]
  005ab	8b 7c 24 54	 mov	 edi, DWORD PTR _K$[esp+416]
  005af	c1 eb 10	 shr	 ebx, 16			; 00000010H
  005b2	8b 5c 24 58	 mov	 ebx, DWORD PTR _K$[esp+420]
  005b6	0f ac df 08	 shrd	 edi, ebx, 8
  005ba	81 e7 ff 00 00
	00		 and	 edi, 255		; 000000ffH
  005c0	33 14 fd 00 00
	00 00		 xor	 edx, DWORD PTR _C6[edi*8]
  005c7	33 34 fd 04 00
	00 00		 xor	 esi, DWORD PTR _C6[edi*8+4]
  005ce	8b 7c 24 40	 mov	 edi, DWORD PTR _K$[esp+396]
  005d2	c1 ef 10	 shr	 edi, 16			; 00000010H
  005d5	81 e7 ff 00 00
	00		 and	 edi, 255		; 000000ffH
  005db	c1 eb 08	 shr	 ebx, 8
  005de	33 14 fd 00 00
	00 00		 xor	 edx, DWORD PTR _C1[edi*8]
  005e5	33 34 fd 04 00
	00 00		 xor	 esi, DWORD PTR _C1[edi*8+4]
  005ec	8b 7c 24 48	 mov	 edi, DWORD PTR _K$[esp+404]

; 693  :         L[2] =
; 694  :             C0[(int)(K[2] >> 56)       ] ^
; 695  :             C1[(int)(K[1] >> 48) & 0xff] ^
; 696  :             C2[(int)(K[0] >> 40) & 0xff] ^
; 697  :             C3[(int)(K[7] >> 32) & 0xff] ^
; 698  :             C4[(int)(K[6] >> 24) & 0xff] ^
; 699  :             C5[(int)(K[5] >> 16) & 0xff] ^
; 700  :             C6[(int)(K[4] >>  8) & 0xff] ^
; 701  :             C7[(int)(K[3]      ) & 0xff];

  005f0	8b 5c 24 78	 mov	 ebx, DWORD PTR _K$[esp+452]
  005f4	c1 ef 18	 shr	 edi, 24			; 00000018H
  005f7	33 14 fd 00 00
	00 00		 xor	 edx, DWORD PTR _C0[edi*8]
  005fe	33 34 fd 04 00
	00 00		 xor	 esi, DWORD PTR _C0[edi*8+4]
  00605	8b 7c 24 4c	 mov	 edi, DWORD PTR _K$[esp+408]
  00609	81 e7 ff 00 00
	00		 and	 edi, 255		; 000000ffH
  0060f	33 34 fd 04 00
	00 00		 xor	 esi, DWORD PTR _C7[edi*8+4]
  00616	33 14 fd 00 00
	00 00		 xor	 edx, DWORD PTR _C7[edi*8]
  0061d	8b 7c 24 6c	 mov	 edi, DWORD PTR _K$[esp+440]
  00621	0f ac ef 18	 shrd	 edi, ebp, 24
  00625	c1 ed 18	 shr	 ebp, 24			; 00000018H
  00628	89 6c 24 10	 mov	 DWORD PTR tv1969[esp+392], ebp
  0062c	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00632	8b ef		 mov	 ebp, edi
  00634	8b 7c 24 10	 mov	 edi, DWORD PTR tv1969[esp+392]
  00638	8b 3c dd 00 00
	00 00		 mov	 edi, DWORD PTR _C3[ebx*8]
  0063f	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C3[ebx*8+4]
  00646	81 e5 ff 00 00
	00		 and	 ebp, 255		; 000000ffH
  0064c	33 1c ed 04 00
	00 00		 xor	 ebx, DWORD PTR _C4[ebp*8+4]
  00653	33 3c ed 00 00
	00 00		 xor	 edi, DWORD PTR _C4[ebp*8]
  0065a	8b 6c 24 68	 mov	 ebp, DWORD PTR _K$[esp+436]
  0065e	89 9c 24 54 01
	00 00		 mov	 DWORD PTR tv4247[esp+396], ebx
  00665	8b 5c 24 64	 mov	 ebx, DWORD PTR _K$[esp+432]
  00669	0f ac eb 10	 shrd	 ebx, ebp, 16
  0066d	c1 ed 10	 shr	 ebp, 16			; 00000010H
  00670	8b 6c 24 5c	 mov	 ebp, DWORD PTR _K$[esp+424]
  00674	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  0067a	33 3c dd 00 00
	00 00		 xor	 edi, DWORD PTR _C5[ebx*8]
  00681	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C5[ebx*8+4]
  00688	31 9c 24 54 01
	00 00		 xor	 DWORD PTR tv4247[esp+396], ebx
  0068f	8b 5c 24 60	 mov	 ebx, DWORD PTR _K$[esp+428]
  00693	0f ac dd 08	 shrd	 ebp, ebx, 8
  00697	81 e5 ff 00 00
	00		 and	 ebp, 255		; 000000ffH
  0069d	33 3c ed 00 00
	00 00		 xor	 edi, DWORD PTR _C6[ebp*8]
  006a4	c1 eb 08	 shr	 ebx, 8
  006a7	8b 9c 24 54 01
	00 00		 mov	 ebx, DWORD PTR tv4247[esp+396]
  006ae	33 1c ed 04 00
	00 00		 xor	 ebx, DWORD PTR _C6[ebp*8+4]
  006b5	8b 6c 24 48	 mov	 ebp, DWORD PTR _K$[esp+404]
  006b9	c1 ed 10	 shr	 ebp, 16			; 00000010H
  006bc	81 e5 ff 00 00
	00		 and	 ebp, 255		; 000000ffH
  006c2	33 1c ed 04 00
	00 00		 xor	 ebx, DWORD PTR _C1[ebp*8+4]
  006c9	33 3c ed 00 00
	00 00		 xor	 edi, DWORD PTR _C1[ebp*8]
  006d0	8b 6c 24 40	 mov	 ebp, DWORD PTR _K$[esp+396]
  006d4	c1 ed 08	 shr	 ebp, 8
  006d7	81 e5 ff 00 00
	00		 and	 ebp, 255		; 000000ffH
  006dd	33 1c ed 04 00
	00 00		 xor	 ebx, DWORD PTR _C2[ebp*8+4]
  006e4	33 3c ed 00 00
	00 00		 xor	 edi, DWORD PTR _C2[ebp*8]
  006eb	8b 6c 24 50	 mov	 ebp, DWORD PTR _K$[esp+412]
  006ef	c1 ed 18	 shr	 ebp, 24			; 00000018H
  006f2	33 1c ed 04 00
	00 00		 xor	 ebx, DWORD PTR _C0[ebp*8+4]
  006f9	33 3c ed 00 00
	00 00		 xor	 edi, DWORD PTR _C0[ebp*8]
  00700	8b 6c 24 54	 mov	 ebp, DWORD PTR _K$[esp+416]
  00704	81 e5 ff 00 00
	00		 and	 ebp, 255		; 000000ffH
  0070a	33 1c ed 04 00
	00 00		 xor	 ebx, DWORD PTR _C7[ebp*8+4]
  00711	33 3c ed 00 00
	00 00		 xor	 edi, DWORD PTR _C7[ebp*8]

; 702  :         L[3] =
; 703  :             C0[(int)(K[3] >> 56)       ] ^
; 704  :             C1[(int)(K[2] >> 48) & 0xff] ^
; 705  :             C2[(int)(K[1] >> 40) & 0xff] ^
; 706  :             C3[(int)(K[0] >> 32) & 0xff] ^
; 707  :             C4[(int)(K[7] >> 24) & 0xff] ^
; 708  :             C5[(int)(K[6] >> 16) & 0xff] ^
; 709  :             C6[(int)(K[5] >>  8) & 0xff] ^
; 710  :             C7[(int)(K[4]      ) & 0xff];

  00718	8b 6c 24 78	 mov	 ebp, DWORD PTR _K$[esp+452]
  0071c	89 9c 24 d0 00
	00 00		 mov	 DWORD PTR _L$[esp+412], ebx
  00723	8b 5c 24 74	 mov	 ebx, DWORD PTR _K$[esp+448]
  00727	0f ac eb 18	 shrd	 ebx, ebp, 24
  0072b	c1 ed 18	 shr	 ebp, 24			; 00000018H
  0072e	8b 6c 24 70	 mov	 ebp, DWORD PTR _K$[esp+444]
  00732	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00738	89 5c 24 10	 mov	 DWORD PTR tv2884[esp+392], ebx
  0073c	8b 5c 24 6c	 mov	 ebx, DWORD PTR _K$[esp+440]
  00740	0f ac eb 10	 shrd	 ebx, ebp, 16
  00744	c1 ed 10	 shr	 ebp, 16			; 00000010H
  00747	8b 6c 24 10	 mov	 ebp, DWORD PTR tv2884[esp+392]
  0074b	8b 2c ed 00 00
	00 00		 mov	 ebp, DWORD PTR _C4[ebp*8]
  00752	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00758	33 2c dd 00 00
	00 00		 xor	 ebp, DWORD PTR _C5[ebx*8]
  0075f	89 b4 24 c8 00
	00 00		 mov	 DWORD PTR _L$[esp+404], esi
  00766	89 6c 24 24	 mov	 DWORD PTR tv4195[esp+392], ebp
  0076a	8b 6c 24 10	 mov	 ebp, DWORD PTR tv2884[esp+392]
  0076e	8b 2c ed 04 00
	00 00		 mov	 ebp, DWORD PTR _C4[ebp*8+4]
  00775	33 2c dd 04 00
	00 00		 xor	 ebp, DWORD PTR _C5[ebx*8+4]
  0077c	8b 5c 24 64	 mov	 ebx, DWORD PTR _K$[esp+432]
  00780	89 6c 24 28	 mov	 DWORD PTR tv4195[esp+396], ebp
  00784	8b 6c 24 68	 mov	 ebp, DWORD PTR _K$[esp+436]
  00788	89 bc 24 cc 00
	00 00		 mov	 DWORD PTR _L$[esp+408], edi
  0078f	0f ac eb 08	 shrd	 ebx, ebp, 8
  00793	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00799	c1 ed 08	 shr	 ebp, 8
  0079c	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C6[ebx*8]
  007a3	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C6[ebx*8+4]
  007aa	31 5c 24 28	 xor	 DWORD PTR tv4195[esp+396], ebx
  007ae	31 6c 24 24	 xor	 DWORD PTR tv4195[esp+392], ebp
  007b2	8b 5c 24 50	 mov	 ebx, DWORD PTR _K$[esp+412]
  007b6	c1 eb 10	 shr	 ebx, 16			; 00000010H
  007b9	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  007bf	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C1[ebx*8]
  007c6	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C1[ebx*8+4]
  007cd	31 5c 24 28	 xor	 DWORD PTR tv4195[esp+396], ebx
  007d1	31 6c 24 24	 xor	 DWORD PTR tv4195[esp+392], ebp
  007d5	8b 5c 24 48	 mov	 ebx, DWORD PTR _K$[esp+404]
  007d9	c1 eb 08	 shr	 ebx, 8
  007dc	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  007e2	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C2[ebx*8]
  007e9	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C2[ebx*8+4]
  007f0	31 5c 24 28	 xor	 DWORD PTR tv4195[esp+396], ebx
  007f4	31 6c 24 24	 xor	 DWORD PTR tv4195[esp+392], ebp
  007f8	8b 5c 24 40	 mov	 ebx, DWORD PTR _K$[esp+396]
  007fc	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00802	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C3[ebx*8]
  00809	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C3[ebx*8+4]
  00810	31 5c 24 28	 xor	 DWORD PTR tv4195[esp+396], ebx
  00814	31 6c 24 24	 xor	 DWORD PTR tv4195[esp+392], ebp
  00818	8b 5c 24 58	 mov	 ebx, DWORD PTR _K$[esp+420]
  0081c	c1 eb 18	 shr	 ebx, 24			; 00000018H
  0081f	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C0[ebx*8]
  00826	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C0[ebx*8+4]
  0082d	31 5c 24 28	 xor	 DWORD PTR tv4195[esp+396], ebx
  00831	31 6c 24 24	 xor	 DWORD PTR tv4195[esp+392], ebp
  00835	8b 5c 24 5c	 mov	 ebx, DWORD PTR _K$[esp+424]
  00839	8b 6c 24 24	 mov	 ebp, DWORD PTR tv4195[esp+392]
  0083d	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00843	33 2c dd 00 00
	00 00		 xor	 ebp, DWORD PTR _C7[ebx*8]
  0084a	89 ac 24 d4 00
	00 00		 mov	 DWORD PTR _L$[esp+416], ebp
  00851	8b 6c 24 28	 mov	 ebp, DWORD PTR tv4195[esp+396]
  00855	33 2c dd 04 00
	00 00		 xor	 ebp, DWORD PTR _C7[ebx*8+4]

; 711  :         L[4] =
; 712  :             C0[(int)(K[4] >> 56)       ] ^
; 713  :             C1[(int)(K[3] >> 48) & 0xff] ^
; 714  :             C2[(int)(K[2] >> 40) & 0xff] ^
; 715  :             C3[(int)(K[1] >> 32) & 0xff] ^
; 716  :             C4[(int)(K[0] >> 24) & 0xff] ^
; 717  :             C5[(int)(K[7] >> 16) & 0xff] ^
; 718  :             C6[(int)(K[6] >>  8) & 0xff] ^
; 719  :             C7[(int)(K[5]      ) & 0xff];

  0085c	8b 5c 24 74	 mov	 ebx, DWORD PTR _K$[esp+448]
  00860	89 ac 24 d8 00
	00 00		 mov	 DWORD PTR _L$[esp+420], ebp
  00867	8b 6c 24 78	 mov	 ebp, DWORD PTR _K$[esp+452]
  0086b	0f ac eb 10	 shrd	 ebx, ebp, 16
  0086f	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00875	89 5c 24 10	 mov	 DWORD PTR tv2827[esp+392], ebx
  00879	8b 5c 24 6c	 mov	 ebx, DWORD PTR _K$[esp+440]
  0087d	c1 ed 10	 shr	 ebp, 16			; 00000010H
  00880	8b 6c 24 70	 mov	 ebp, DWORD PTR _K$[esp+444]
  00884	0f ac eb 08	 shrd	 ebx, ebp, 8
  00888	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  0088e	c1 ed 08	 shr	 ebp, 8
  00891	8b 6c 24 10	 mov	 ebp, DWORD PTR tv2827[esp+392]
  00895	8b 2c ed 00 00
	00 00		 mov	 ebp, DWORD PTR _C5[ebp*8]
  0089c	33 2c dd 00 00
	00 00		 xor	 ebp, DWORD PTR _C6[ebx*8]
  008a3	89 6c 24 2c	 mov	 DWORD PTR tv4143[esp+392], ebp
  008a7	8b 6c 24 10	 mov	 ebp, DWORD PTR tv2827[esp+392]
  008ab	8b 2c ed 04 00
	00 00		 mov	 ebp, DWORD PTR _C5[ebp*8+4]
  008b2	33 2c dd 04 00
	00 00		 xor	 ebp, DWORD PTR _C6[ebx*8+4]
  008b9	8b 5c 24 58	 mov	 ebx, DWORD PTR _K$[esp+420]
  008bd	c1 eb 10	 shr	 ebx, 16			; 00000010H
  008c0	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  008c6	89 6c 24 30	 mov	 DWORD PTR tv4143[esp+396], ebp
  008ca	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C1[ebx*8]
  008d1	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C1[ebx*8+4]
  008d8	31 5c 24 30	 xor	 DWORD PTR tv4143[esp+396], ebx
  008dc	8b 5c 24 50	 mov	 ebx, DWORD PTR _K$[esp+412]
  008e0	31 6c 24 2c	 xor	 DWORD PTR tv4143[esp+392], ebp
  008e4	c1 eb 08	 shr	 ebx, 8
  008e7	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  008ed	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C2[ebx*8]
  008f4	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C2[ebx*8+4]
  008fb	31 5c 24 30	 xor	 DWORD PTR tv4143[esp+396], ebx
  008ff	8b 5c 24 48	 mov	 ebx, DWORD PTR _K$[esp+404]
  00903	31 6c 24 2c	 xor	 DWORD PTR tv4143[esp+392], ebp
  00907	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  0090d	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C3[ebx*8]
  00914	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C3[ebx*8+4]
  0091b	31 6c 24 2c	 xor	 DWORD PTR tv4143[esp+392], ebp
  0091f	31 5c 24 30	 xor	 DWORD PTR tv4143[esp+396], ebx
  00923	8b 5c 24 3c	 mov	 ebx, DWORD PTR _K$[esp+392]
  00927	8b 6c 24 40	 mov	 ebp, DWORD PTR _K$[esp+396]
  0092b	0f ac eb 18	 shrd	 ebx, ebp, 24
  0092f	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00935	c1 ed 18	 shr	 ebp, 24			; 00000018H
  00938	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C4[ebx*8]
  0093f	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C4[ebx*8+4]
  00946	31 5c 24 30	 xor	 DWORD PTR tv4143[esp+396], ebx
  0094a	31 6c 24 2c	 xor	 DWORD PTR tv4143[esp+392], ebp
  0094e	8b 5c 24 60	 mov	 ebx, DWORD PTR _K$[esp+428]
  00952	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00955	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C0[ebx*8]
  0095c	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C0[ebx*8+4]
  00963	31 5c 24 30	 xor	 DWORD PTR tv4143[esp+396], ebx
  00967	31 6c 24 2c	 xor	 DWORD PTR tv4143[esp+392], ebp
  0096b	8b 5c 24 64	 mov	 ebx, DWORD PTR _K$[esp+432]
  0096f	8b 6c 24 2c	 mov	 ebp, DWORD PTR tv4143[esp+392]
  00973	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00979	33 2c dd 00 00
	00 00		 xor	 ebp, DWORD PTR _C7[ebx*8]
  00980	89 ac 24 dc 00
	00 00		 mov	 DWORD PTR _L$[esp+424], ebp
  00987	8b 6c 24 30	 mov	 ebp, DWORD PTR tv4143[esp+396]
  0098b	33 2c dd 04 00
	00 00		 xor	 ebp, DWORD PTR _C7[ebx*8+4]

; 720  :         L[5] =
; 721  :             C0[(int)(K[5] >> 56)       ] ^
; 722  :             C1[(int)(K[4] >> 48) & 0xff] ^
; 723  :             C2[(int)(K[3] >> 40) & 0xff] ^
; 724  :             C3[(int)(K[2] >> 32) & 0xff] ^
; 725  :             C4[(int)(K[1] >> 24) & 0xff] ^
; 726  :             C5[(int)(K[0] >> 16) & 0xff] ^
; 727  :             C6[(int)(K[7] >>  8) & 0xff] ^
; 728  :             C7[(int)(K[6]      ) & 0xff];

  00992	8b 5c 24 74	 mov	 ebx, DWORD PTR _K$[esp+448]
  00996	89 ac 24 e0 00
	00 00		 mov	 DWORD PTR _L$[esp+428], ebp
  0099d	8b 6c 24 78	 mov	 ebp, DWORD PTR _K$[esp+452]
  009a1	0f ac eb 08	 shrd	 ebx, ebp, 8
  009a5	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  009ab	89 5c 24 10	 mov	 DWORD PTR tv2774[esp+392], ebx
  009af	8b 1c dd 00 00
	00 00		 mov	 ebx, DWORD PTR _C6[ebx*8]
  009b6	c1 ed 08	 shr	 ebp, 8
  009b9	8b 6c 24 60	 mov	 ebp, DWORD PTR _K$[esp+428]
  009bd	c1 ed 10	 shr	 ebp, 16			; 00000010H
  009c0	81 e5 ff 00 00
	00		 and	 ebp, 255		; 000000ffH
  009c6	33 1c ed 00 00
	00 00		 xor	 ebx, DWORD PTR _C1[ebp*8]
  009cd	89 5c 24 34	 mov	 DWORD PTR tv4091[esp+392], ebx
  009d1	8b 5c 24 10	 mov	 ebx, DWORD PTR tv2774[esp+392]
  009d5	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C6[ebx*8+4]
  009dc	33 1c ed 04 00
	00 00		 xor	 ebx, DWORD PTR _C1[ebp*8+4]
  009e3	89 5c 24 38	 mov	 DWORD PTR tv4091[esp+396], ebx
  009e7	8b 5c 24 58	 mov	 ebx, DWORD PTR _K$[esp+420]
  009eb	c1 eb 08	 shr	 ebx, 8
  009ee	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  009f4	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C2[ebx*8]
  009fb	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C2[ebx*8+4]
  00a02	31 5c 24 38	 xor	 DWORD PTR tv4091[esp+396], ebx
  00a06	31 6c 24 34	 xor	 DWORD PTR tv4091[esp+392], ebp
  00a0a	8b 5c 24 50	 mov	 ebx, DWORD PTR _K$[esp+412]
  00a0e	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00a14	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C3[ebx*8]
  00a1b	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C3[ebx*8+4]
  00a22	31 5c 24 38	 xor	 DWORD PTR tv4091[esp+396], ebx
  00a26	31 6c 24 34	 xor	 DWORD PTR tv4091[esp+392], ebp
  00a2a	8b 5c 24 44	 mov	 ebx, DWORD PTR _K$[esp+400]
  00a2e	8b 6c 24 48	 mov	 ebp, DWORD PTR _K$[esp+404]
  00a32	0f ac eb 18	 shrd	 ebx, ebp, 24
  00a36	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00a3c	c1 ed 18	 shr	 ebp, 24			; 00000018H
  00a3f	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C4[ebx*8]
  00a46	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C4[ebx*8+4]
  00a4d	31 5c 24 38	 xor	 DWORD PTR tv4091[esp+396], ebx
  00a51	31 6c 24 34	 xor	 DWORD PTR tv4091[esp+392], ebp
  00a55	8b 5c 24 3c	 mov	 ebx, DWORD PTR _K$[esp+392]
  00a59	8b 6c 24 40	 mov	 ebp, DWORD PTR _K$[esp+396]
  00a5d	0f ac eb 10	 shrd	 ebx, ebp, 16
  00a61	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00a67	c1 ed 10	 shr	 ebp, 16			; 00000010H
  00a6a	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C5[ebx*8]
  00a71	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C5[ebx*8+4]
  00a78	31 5c 24 38	 xor	 DWORD PTR tv4091[esp+396], ebx
  00a7c	31 6c 24 34	 xor	 DWORD PTR tv4091[esp+392], ebp
  00a80	8b 5c 24 68	 mov	 ebx, DWORD PTR _K$[esp+436]
  00a84	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00a87	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C0[ebx*8]
  00a8e	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C0[ebx*8+4]
  00a95	31 5c 24 38	 xor	 DWORD PTR tv4091[esp+396], ebx
  00a99	31 6c 24 34	 xor	 DWORD PTR tv4091[esp+392], ebp
  00a9d	8b 5c 24 6c	 mov	 ebx, DWORD PTR _K$[esp+440]
  00aa1	8b 6c 24 34	 mov	 ebp, DWORD PTR tv4091[esp+392]
  00aa5	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00aab	33 2c dd 00 00
	00 00		 xor	 ebp, DWORD PTR _C7[ebx*8]
  00ab2	89 ac 24 e4 00
	00 00		 mov	 DWORD PTR _L$[esp+432], ebp
  00ab9	8b 6c 24 38	 mov	 ebp, DWORD PTR tv4091[esp+396]
  00abd	33 2c dd 04 00
	00 00		 xor	 ebp, DWORD PTR _C7[ebx*8+4]

; 729  :         L[6] =
; 730  :             C0[(int)(K[6] >> 56)       ] ^
; 731  :             C1[(int)(K[5] >> 48) & 0xff] ^
; 732  :             C2[(int)(K[4] >> 40) & 0xff] ^
; 733  :             C3[(int)(K[3] >> 32) & 0xff] ^
; 734  :             C4[(int)(K[2] >> 24) & 0xff] ^
; 735  :             C5[(int)(K[1] >> 16) & 0xff] ^
; 736  :             C6[(int)(K[0] >>  8) & 0xff] ^
; 737  :             C7[(int)(K[7]      ) & 0xff];

  00ac4	8b 5c 24 68	 mov	 ebx, DWORD PTR _K$[esp+436]
  00ac8	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00acb	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00ad1	89 5c 24 10	 mov	 DWORD PTR tv2721[esp+392], ebx
  00ad5	8b 1c dd 00 00
	00 00		 mov	 ebx, DWORD PTR _C1[ebx*8]
  00adc	89 ac 24 e8 00
	00 00		 mov	 DWORD PTR _L$[esp+436], ebp
  00ae3	8b 6c 24 60	 mov	 ebp, DWORD PTR _K$[esp+428]
  00ae7	c1 ed 08	 shr	 ebp, 8
  00aea	81 e5 ff 00 00
	00		 and	 ebp, 255		; 000000ffH
  00af0	33 1c ed 00 00
	00 00		 xor	 ebx, DWORD PTR _C2[ebp*8]
  00af7	89 5c 24 14	 mov	 DWORD PTR tv4039[esp+392], ebx
  00afb	8b 5c 24 10	 mov	 ebx, DWORD PTR tv2721[esp+392]
  00aff	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C1[ebx*8+4]
  00b06	33 1c ed 04 00
	00 00		 xor	 ebx, DWORD PTR _C2[ebp*8+4]
  00b0d	89 5c 24 18	 mov	 DWORD PTR tv4039[esp+396], ebx
  00b11	8b 5c 24 58	 mov	 ebx, DWORD PTR _K$[esp+420]
  00b15	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00b1b	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C3[ebx*8]
  00b22	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C3[ebx*8+4]
  00b29	31 5c 24 18	 xor	 DWORD PTR tv4039[esp+396], ebx
  00b2d	31 6c 24 14	 xor	 DWORD PTR tv4039[esp+392], ebp
  00b31	8b 5c 24 4c	 mov	 ebx, DWORD PTR _K$[esp+408]
  00b35	8b 6c 24 50	 mov	 ebp, DWORD PTR _K$[esp+412]
  00b39	0f ac eb 18	 shrd	 ebx, ebp, 24
  00b3d	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00b43	c1 ed 18	 shr	 ebp, 24			; 00000018H
  00b46	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C4[ebx*8]
  00b4d	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C4[ebx*8+4]
  00b54	31 5c 24 18	 xor	 DWORD PTR tv4039[esp+396], ebx
  00b58	31 6c 24 14	 xor	 DWORD PTR tv4039[esp+392], ebp
  00b5c	8b 5c 24 44	 mov	 ebx, DWORD PTR _K$[esp+400]
  00b60	8b 6c 24 48	 mov	 ebp, DWORD PTR _K$[esp+404]
  00b64	0f ac eb 10	 shrd	 ebx, ebp, 16
  00b68	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00b6e	c1 ed 10	 shr	 ebp, 16			; 00000010H
  00b71	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C5[ebx*8]
  00b78	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C5[ebx*8+4]
  00b7f	31 5c 24 18	 xor	 DWORD PTR tv4039[esp+396], ebx
  00b83	31 6c 24 14	 xor	 DWORD PTR tv4039[esp+392], ebp
  00b87	8b 5c 24 3c	 mov	 ebx, DWORD PTR _K$[esp+392]
  00b8b	8b 6c 24 40	 mov	 ebp, DWORD PTR _K$[esp+396]
  00b8f	0f ac eb 08	 shrd	 ebx, ebp, 8
  00b93	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00b99	c1 ed 08	 shr	 ebp, 8
  00b9c	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C6[ebx*8]
  00ba3	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C6[ebx*8+4]
  00baa	31 5c 24 18	 xor	 DWORD PTR tv4039[esp+396], ebx
  00bae	31 6c 24 14	 xor	 DWORD PTR tv4039[esp+392], ebp
  00bb2	8b 5c 24 70	 mov	 ebx, DWORD PTR _K$[esp+444]
  00bb6	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00bb9	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C0[ebx*8]
  00bc0	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C0[ebx*8+4]
  00bc7	31 5c 24 18	 xor	 DWORD PTR tv4039[esp+396], ebx
  00bcb	31 6c 24 14	 xor	 DWORD PTR tv4039[esp+392], ebp
  00bcf	8b 5c 24 74	 mov	 ebx, DWORD PTR _K$[esp+448]
  00bd3	8b 6c 24 14	 mov	 ebp, DWORD PTR tv4039[esp+392]
  00bd7	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00bdd	33 2c dd 00 00
	00 00		 xor	 ebp, DWORD PTR _C7[ebx*8]
  00be4	89 ac 24 ec 00
	00 00		 mov	 DWORD PTR _L$[esp+440], ebp
  00beb	8b 6c 24 18	 mov	 ebp, DWORD PTR tv4039[esp+396]
  00bef	33 2c dd 04 00
	00 00		 xor	 ebp, DWORD PTR _C7[ebx*8+4]

; 738  :         L[7] =
; 739  :             C0[(int)(K[7] >> 56)       ] ^
; 740  :             C1[(int)(K[6] >> 48) & 0xff] ^
; 741  :             C2[(int)(K[5] >> 40) & 0xff] ^
; 742  :             C3[(int)(K[4] >> 32) & 0xff] ^
; 743  :             C4[(int)(K[3] >> 24) & 0xff] ^
; 744  :             C5[(int)(K[2] >> 16) & 0xff] ^
; 745  :             C6[(int)(K[1] >>  8) & 0xff] ^
; 746  :             C7[(int)(K[0]      ) & 0xff];

  00bf6	8b 5c 24 70	 mov	 ebx, DWORD PTR _K$[esp+444]
  00bfa	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00bfd	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00c03	89 ac 24 f0 00
	00 00		 mov	 DWORD PTR _L$[esp+444], ebp
  00c0a	8b 6c 24 68	 mov	 ebp, DWORD PTR _K$[esp+436]
  00c0e	89 5c 24 10	 mov	 DWORD PTR tv2664[esp+392], ebx
  00c12	8b 1c dd 00 00
	00 00		 mov	 ebx, DWORD PTR _C1[ebx*8]
  00c19	c1 ed 08	 shr	 ebp, 8
  00c1c	81 e5 ff 00 00
	00		 and	 ebp, 255		; 000000ffH
  00c22	33 1c ed 00 00
	00 00		 xor	 ebx, DWORD PTR _C2[ebp*8]
  00c29	89 5c 24 1c	 mov	 DWORD PTR tv142[esp+392], ebx
  00c2d	8b 5c 24 10	 mov	 ebx, DWORD PTR tv2664[esp+392]
  00c31	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C1[ebx*8+4]
  00c38	33 1c ed 04 00
	00 00		 xor	 ebx, DWORD PTR _C2[ebp*8+4]
  00c3f	89 5c 24 20	 mov	 DWORD PTR tv142[esp+396], ebx
  00c43	8b 5c 24 60	 mov	 ebx, DWORD PTR _K$[esp+428]
  00c47	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00c4d	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C3[ebx*8]
  00c54	31 6c 24 1c	 xor	 DWORD PTR tv142[esp+392], ebp
  00c58	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C3[ebx*8+4]
  00c5f	31 5c 24 20	 xor	 DWORD PTR tv142[esp+396], ebx
  00c63	8b 5c 24 54	 mov	 ebx, DWORD PTR _K$[esp+416]
  00c67	8b 6c 24 58	 mov	 ebp, DWORD PTR _K$[esp+420]
  00c6b	0f ac eb 18	 shrd	 ebx, ebp, 24
  00c6f	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00c75	c1 ed 18	 shr	 ebp, 24			; 00000018H
  00c78	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C4[ebx*8]
  00c7f	31 6c 24 1c	 xor	 DWORD PTR tv142[esp+392], ebp
  00c83	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C4[ebx*8+4]
  00c8a	31 5c 24 20	 xor	 DWORD PTR tv142[esp+396], ebx
  00c8e	8b 5c 24 4c	 mov	 ebx, DWORD PTR _K$[esp+408]
  00c92	8b 6c 24 50	 mov	 ebp, DWORD PTR _K$[esp+412]
  00c96	0f ac eb 10	 shrd	 ebx, ebp, 16
  00c9a	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00ca0	c1 ed 10	 shr	 ebp, 16			; 00000010H
  00ca3	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C5[ebx*8]
  00caa	31 6c 24 1c	 xor	 DWORD PTR tv142[esp+392], ebp
  00cae	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C5[ebx*8+4]
  00cb5	31 5c 24 20	 xor	 DWORD PTR tv142[esp+396], ebx
  00cb9	8b 5c 24 44	 mov	 ebx, DWORD PTR _K$[esp+400]
  00cbd	8b 6c 24 48	 mov	 ebp, DWORD PTR _K$[esp+404]
  00cc1	0f ac eb 08	 shrd	 ebx, ebp, 8

; 747  :         K[0] = L[0];
; 748  :         K[1] = L[1];

  00cc5	89 74 24 48	 mov	 DWORD PTR _K$[esp+404], esi

; 749  :         K[2] = L[2];

  00cc9	8b b4 24 d0 00
	00 00		 mov	 esi, DWORD PTR _L$[esp+412]
  00cd0	89 74 24 50	 mov	 DWORD PTR _K$[esp+412], esi

; 750  :         K[3] = L[3];

  00cd4	8b b4 24 d4 00
	00 00		 mov	 esi, DWORD PTR _L$[esp+416]
  00cdb	89 74 24 54	 mov	 DWORD PTR _K$[esp+416], esi
  00cdf	8b b4 24 d8 00
	00 00		 mov	 esi, DWORD PTR _L$[esp+420]
  00ce6	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00cec	c1 ed 08	 shr	 ebp, 8
  00cef	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C6[ebx*8]
  00cf6	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C6[ebx*8+4]
  00cfd	31 5c 24 20	 xor	 DWORD PTR tv142[esp+396], ebx
  00d01	31 6c 24 1c	 xor	 DWORD PTR tv142[esp+392], ebp
  00d05	8b 5c 24 78	 mov	 ebx, DWORD PTR _K$[esp+452]
  00d09	89 74 24 58	 mov	 DWORD PTR _K$[esp+420], esi

; 751  :         K[4] = L[4];

  00d0d	8b b4 24 dc 00
	00 00		 mov	 esi, DWORD PTR _L$[esp+424]
  00d14	89 74 24 5c	 mov	 DWORD PTR _K$[esp+424], esi
  00d18	8b b4 24 e0 00
	00 00		 mov	 esi, DWORD PTR _L$[esp+428]
  00d1f	89 74 24 60	 mov	 DWORD PTR _K$[esp+428], esi

; 752  :         K[5] = L[5];

  00d23	8b b4 24 e4 00
	00 00		 mov	 esi, DWORD PTR _L$[esp+432]
  00d2a	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00d2d	8b 2c dd 00 00
	00 00		 mov	 ebp, DWORD PTR _C0[ebx*8]
  00d34	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR _C0[ebx*8+4]
  00d3b	31 6c 24 1c	 xor	 DWORD PTR tv142[esp+392], ebp
  00d3f	31 5c 24 20	 xor	 DWORD PTR tv142[esp+396], ebx
  00d43	8b 5c 24 3c	 mov	 ebx, DWORD PTR _K$[esp+392]
  00d47	8b 6c 24 1c	 mov	 ebp, DWORD PTR tv142[esp+392]
  00d4b	89 74 24 64	 mov	 DWORD PTR _K$[esp+432], esi
  00d4f	8b b4 24 e8 00
	00 00		 mov	 esi, DWORD PTR _L$[esp+436]
  00d56	89 74 24 68	 mov	 DWORD PTR _K$[esp+436], esi

; 753  :         K[6] = L[6];

  00d5a	8b b4 24 ec 00
	00 00		 mov	 esi, DWORD PTR _L$[esp+440]
  00d61	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00d67	33 2c dd 00 00
	00 00		 xor	 ebp, DWORD PTR _C7[ebx*8]
  00d6e	89 74 24 6c	 mov	 DWORD PTR _K$[esp+440], esi
  00d72	8b b4 24 f0 00
	00 00		 mov	 esi, DWORD PTR _L$[esp+444]
  00d79	89 ac 24 f4 00
	00 00		 mov	 DWORD PTR _L$[esp+448], ebp
  00d80	8b 6c 24 20	 mov	 ebp, DWORD PTR tv142[esp+396]
  00d84	33 2c dd 04 00
	00 00		 xor	 ebp, DWORD PTR _C7[ebx*8+4]
  00d8b	89 74 24 70	 mov	 DWORD PTR _K$[esp+444], esi

; 754  :         K[7] = L[7];

  00d8f	8b b4 24 f4 00
	00 00		 mov	 esi, DWORD PTR _L$[esp+448]
  00d96	89 74 24 74	 mov	 DWORD PTR _K$[esp+448], esi

; 755  :         /*
; 756  :          * apply the r-th round transformation:
; 757  :          */
; 758  :         L[0] =
; 759  :             C0[(int)(state[0] >> 56)       ] ^
; 760  :             C1[(int)(state[7] >> 48) & 0xff] ^
; 761  :             C2[(int)(state[6] >> 40) & 0xff] ^
; 762  :             C3[(int)(state[5] >> 32) & 0xff] ^
; 763  :             C4[(int)(state[4] >> 24) & 0xff] ^
; 764  :             C5[(int)(state[3] >> 16) & 0xff] ^
; 765  :             C6[(int)(state[2] >>  8) & 0xff] ^
; 766  :             C7[(int)(state[1]      ) & 0xff] ^
; 767  :             K[0];

  00d9a	8b b4 24 b8 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+452]
  00da1	89 7c 24 4c	 mov	 DWORD PTR _K$[esp+408], edi
  00da5	8b bc 24 b0 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+444]
  00dac	c1 ee 10	 shr	 esi, 16			; 00000010H
  00daf	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  00db5	8b 1c f5 00 00
	00 00		 mov	 ebx, DWORD PTR _C1[esi*8]
  00dbc	c1 ef 08	 shr	 edi, 8
  00dbf	89 ac 24 f8 00
	00 00		 mov	 DWORD PTR _L$[esp+452], ebp
  00dc6	89 6c 24 78	 mov	 DWORD PTR _K$[esp+452], ebp
  00dca	8b 2c f5 04 00
	00 00		 mov	 ebp, DWORD PTR _C1[esi*8+4]
  00dd1	8b b4 24 a8 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+436]
  00dd8	81 e7 ff 00 00
	00		 and	 edi, 255		; 000000ffH
  00dde	33 1c fd 00 00
	00 00		 xor	 ebx, DWORD PTR _C2[edi*8]
  00de5	33 2c fd 04 00
	00 00		 xor	 ebp, DWORD PTR _C2[edi*8+4]
  00dec	89 44 24 3c	 mov	 DWORD PTR _K$[esp+392], eax
  00df0	89 4c 24 40	 mov	 DWORD PTR _K$[esp+396], ecx
  00df4	89 54 24 44	 mov	 DWORD PTR _K$[esp+400], edx
  00df8	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  00dfe	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C3[esi*8]
  00e05	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C3[esi*8+4]
  00e0c	8b b4 24 9c 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+424]
  00e13	8b bc 24 a0 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+428]
  00e1a	0f ac fe 18	 shrd	 esi, edi, 24
  00e1e	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  00e24	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C4[esi*8]
  00e2b	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C4[esi*8+4]
  00e32	8b b4 24 94 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+416]
  00e39	c1 ef 18	 shr	 edi, 24			; 00000018H
  00e3c	8b bc 24 98 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+420]
  00e43	0f ac fe 10	 shrd	 esi, edi, 16
  00e47	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  00e4d	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C5[esi*8]
  00e54	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C5[esi*8+4]
  00e5b	8b b4 24 8c 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+408]
  00e62	c1 ef 10	 shr	 edi, 16			; 00000010H
  00e65	8b bc 24 90 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+412]
  00e6c	0f ac fe 08	 shrd	 esi, edi, 8
  00e70	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  00e76	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C6[esi*8]
  00e7d	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C6[esi*8+4]
  00e84	8b b4 24 80 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+396]
  00e8b	c1 ee 18	 shr	 esi, 24			; 00000018H
  00e8e	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C0[esi*8]
  00e95	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C0[esi*8+4]
  00e9c	8b b4 24 84 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+400]
  00ea3	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  00ea9	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C7[esi*8]
  00eb0	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C7[esi*8+4]

; 768  :         L[1] =
; 769  :             C0[(int)(state[1] >> 56)       ] ^
; 770  :             C1[(int)(state[0] >> 48) & 0xff] ^
; 771  :             C2[(int)(state[7] >> 40) & 0xff] ^
; 772  :             C3[(int)(state[6] >> 32) & 0xff] ^
; 773  :             C4[(int)(state[5] >> 24) & 0xff] ^
; 774  :             C5[(int)(state[4] >> 16) & 0xff] ^
; 775  :             C6[(int)(state[3] >>  8) & 0xff] ^
; 776  :             C7[(int)(state[2]      ) & 0xff] ^
; 777  :             K[1];

  00eb7	8b b4 24 b8 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+452]
  00ebe	c1 ee 08	 shr	 esi, 8
  00ec1	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  00ec7	c1 ef 08	 shr	 edi, 8
  00eca	8b bc 24 b0 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+444]
  00ed1	81 e7 ff 00 00
	00		 and	 edi, 255		; 000000ffH
  00ed7	33 c3		 xor	 eax, ebx
  00ed9	8b 1c f5 00 00
	00 00		 mov	 ebx, DWORD PTR _C2[esi*8]
  00ee0	33 1c fd 00 00
	00 00		 xor	 ebx, DWORD PTR _C3[edi*8]
  00ee7	33 cd		 xor	 ecx, ebp
  00ee9	8b 2c f5 04 00
	00 00		 mov	 ebp, DWORD PTR _C2[esi*8+4]
  00ef0	33 2c fd 04 00
	00 00		 xor	 ebp, DWORD PTR _C3[edi*8+4]
  00ef7	8b b4 24 a4 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+432]
  00efe	8b bc 24 a8 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+436]
  00f05	0f ac fe 18	 shrd	 esi, edi, 24
  00f09	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  00f0f	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C4[esi*8]
  00f16	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C4[esi*8+4]
  00f1d	8b b4 24 9c 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+424]
  00f24	c1 ef 18	 shr	 edi, 24			; 00000018H
  00f27	8b bc 24 a0 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+428]
  00f2e	0f ac fe 10	 shrd	 esi, edi, 16
  00f32	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  00f38	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C5[esi*8]
  00f3f	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C5[esi*8+4]
  00f46	8b b4 24 94 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+416]
  00f4d	c1 ef 10	 shr	 edi, 16			; 00000010H
  00f50	8b bc 24 98 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+420]
  00f57	0f ac fe 08	 shrd	 esi, edi, 8
  00f5b	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  00f61	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C6[esi*8]
  00f68	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C6[esi*8+4]
  00f6f	8b b4 24 80 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+396]
  00f76	c1 ee 10	 shr	 esi, 16			; 00000010H
  00f79	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  00f7f	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C1[esi*8]
  00f86	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C1[esi*8+4]
  00f8d	8b b4 24 88 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+404]
  00f94	c1 ee 18	 shr	 esi, 24			; 00000018H
  00f97	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C0[esi*8]
  00f9e	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C0[esi*8+4]
  00fa5	8b b4 24 8c 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+408]
  00fac	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  00fb2	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C7[esi*8]
  00fb9	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C7[esi*8+4]

; 778  :         L[2] =
; 779  :             C0[(int)(state[2] >> 56)       ] ^
; 780  :             C1[(int)(state[1] >> 48) & 0xff] ^
; 781  :             C2[(int)(state[0] >> 40) & 0xff] ^
; 782  :             C3[(int)(state[7] >> 32) & 0xff] ^
; 783  :             C4[(int)(state[6] >> 24) & 0xff] ^
; 784  :             C5[(int)(state[5] >> 16) & 0xff] ^
; 785  :             C6[(int)(state[4] >>  8) & 0xff] ^
; 786  :             C7[(int)(state[3]      ) & 0xff] ^
; 787  :             K[2];

  00fc0	8b b4 24 b8 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+452]
  00fc7	31 ac 24 c8 00
	00 00		 xor	 DWORD PTR _L$[esp+404], ebp
  00fce	c1 ef 08	 shr	 edi, 8
  00fd1	8b bc 24 ac 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+440]
  00fd8	33 d3		 xor	 edx, ebx
  00fda	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  00fe0	8b 2c f5 04 00
	00 00		 mov	 ebp, DWORD PTR _C3[esi*8+4]
  00fe7	8b 9c 24 b0 00
	00 00		 mov	 ebx, DWORD PTR _state$[esp+444]
  00fee	0f ac df 18	 shrd	 edi, ebx, 24
  00ff2	81 e7 ff 00 00
	00		 and	 edi, 255		; 000000ffH
  00ff8	33 2c fd 04 00
	00 00		 xor	 ebp, DWORD PTR _C4[edi*8+4]
  00fff	c1 eb 18	 shr	 ebx, 24			; 00000018H
  01002	8b 1c f5 00 00
	00 00		 mov	 ebx, DWORD PTR _C3[esi*8]
  01009	33 1c fd 00 00
	00 00		 xor	 ebx, DWORD PTR _C4[edi*8]
  01010	8b b4 24 a4 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+432]
  01017	8b bc 24 a8 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+436]
  0101e	0f ac fe 10	 shrd	 esi, edi, 16
  01022	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  01028	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C5[esi*8]
  0102f	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C5[esi*8+4]
  01036	8b b4 24 9c 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+424]
  0103d	c1 ef 10	 shr	 edi, 16			; 00000010H
  01040	8b bc 24 a0 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+428]
  01047	0f ac fe 08	 shrd	 esi, edi, 8
  0104b	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  01051	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C6[esi*8]
  01058	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C6[esi*8+4]
  0105f	8b b4 24 88 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+404]
  01066	c1 ee 10	 shr	 esi, 16			; 00000010H
  01069	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  0106f	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C1[esi*8]
  01076	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C1[esi*8+4]
  0107d	8b b4 24 80 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+396]
  01084	c1 ee 08	 shr	 esi, 8
  01087	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  0108d	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C2[esi*8]
  01094	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C2[esi*8+4]
  0109b	8b b4 24 90 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+412]
  010a2	c1 ee 18	 shr	 esi, 24			; 00000018H
  010a5	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C0[esi*8]
  010ac	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C0[esi*8+4]
  010b3	8b b4 24 94 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+416]
  010ba	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  010c0	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C7[esi*8]
  010c7	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C7[esi*8+4]
  010ce	31 9c 24 cc 00
	00 00		 xor	 DWORD PTR _L$[esp+408], ebx

; 788  :         L[3] =
; 789  :             C0[(int)(state[3] >> 56)       ] ^
; 790  :             C1[(int)(state[2] >> 48) & 0xff] ^
; 791  :             C2[(int)(state[1] >> 40) & 0xff] ^
; 792  :             C3[(int)(state[0] >> 32) & 0xff] ^
; 793  :             C4[(int)(state[7] >> 24) & 0xff] ^
; 794  :             C5[(int)(state[6] >> 16) & 0xff] ^
; 795  :             C6[(int)(state[5] >>  8) & 0xff] ^
; 796  :             C7[(int)(state[4]      ) & 0xff] ^
; 797  :             K[3];

  010d5	8b b4 24 b4 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+448]
  010dc	31 ac 24 d0 00
	00 00		 xor	 DWORD PTR _L$[esp+412], ebp
  010e3	8b 9c 24 b0 00
	00 00		 mov	 ebx, DWORD PTR _state$[esp+444]
  010ea	c1 ef 08	 shr	 edi, 8
  010ed	8b bc 24 b8 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+452]
  010f4	0f ac fe 18	 shrd	 esi, edi, 24
  010f8	c1 ef 18	 shr	 edi, 24			; 00000018H
  010fb	8b bc 24 ac 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+440]
  01102	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  01108	8b 2c f5 00 00
	00 00		 mov	 ebp, DWORD PTR _C4[esi*8]
  0110f	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C4[esi*8+4]
  01116	0f ac df 10	 shrd	 edi, ebx, 16
  0111a	81 e7 ff 00 00
	00		 and	 edi, 255		; 000000ffH
  01120	33 34 fd 04 00
	00 00		 xor	 esi, DWORD PTR _C5[edi*8+4]
  01127	33 2c fd 00 00
	00 00		 xor	 ebp, DWORD PTR _C5[edi*8]
  0112e	8b bc 24 a4 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+432]
  01135	c1 eb 10	 shr	 ebx, 16			; 00000010H
  01138	8b 9c 24 a8 00
	00 00		 mov	 ebx, DWORD PTR _state$[esp+436]
  0113f	0f ac df 08	 shrd	 edi, ebx, 8
  01143	89 74 24 10	 mov	 DWORD PTR tv1967[esp+392], esi
  01147	8b f7		 mov	 esi, edi
  01149	8b 7c 24 10	 mov	 edi, DWORD PTR tv1967[esp+392]
  0114d	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  01153	33 2c f5 00 00
	00 00		 xor	 ebp, DWORD PTR _C6[esi*8]
  0115a	33 3c f5 04 00
	00 00		 xor	 edi, DWORD PTR _C6[esi*8+4]
  01161	8b b4 24 90 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+412]
  01168	c1 ee 10	 shr	 esi, 16			; 00000010H
  0116b	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  01171	33 2c f5 00 00
	00 00		 xor	 ebp, DWORD PTR _C1[esi*8]
  01178	33 3c f5 04 00
	00 00		 xor	 edi, DWORD PTR _C1[esi*8+4]
  0117f	8b b4 24 88 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+404]
  01186	c1 ee 08	 shr	 esi, 8
  01189	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  0118f	33 2c f5 00 00
	00 00		 xor	 ebp, DWORD PTR _C2[esi*8]
  01196	33 3c f5 04 00
	00 00		 xor	 edi, DWORD PTR _C2[esi*8+4]
  0119d	c1 eb 08	 shr	 ebx, 8
  011a0	8b 9c 24 80 00
	00 00		 mov	 ebx, DWORD PTR _state$[esp+396]
  011a7	8b f3		 mov	 esi, ebx
  011a9	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  011af	33 2c f5 00 00
	00 00		 xor	 ebp, DWORD PTR _C3[esi*8]
  011b6	33 3c f5 04 00
	00 00		 xor	 edi, DWORD PTR _C3[esi*8+4]
  011bd	8b b4 24 98 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+420]
  011c4	c1 ee 18	 shr	 esi, 24			; 00000018H
  011c7	33 3c f5 04 00
	00 00		 xor	 edi, DWORD PTR _C0[esi*8+4]
  011ce	33 2c f5 00 00
	00 00		 xor	 ebp, DWORD PTR _C0[esi*8]
  011d5	8b b4 24 9c 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+424]
  011dc	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  011e2	33 3c f5 04 00
	00 00		 xor	 edi, DWORD PTR _C7[esi*8+4]
  011e9	33 2c f5 00 00
	00 00		 xor	 ebp, DWORD PTR _C7[esi*8]
  011f0	31 bc 24 d8 00
	00 00		 xor	 DWORD PTR _L$[esp+420], edi
  011f7	31 ac 24 d4 00
	00 00		 xor	 DWORD PTR _L$[esp+416], ebp

; 798  :         L[4] =
; 799  :             C0[(int)(state[4] >> 56)       ] ^
; 800  :             C1[(int)(state[3] >> 48) & 0xff] ^
; 801  :             C2[(int)(state[2] >> 40) & 0xff] ^
; 802  :             C3[(int)(state[1] >> 32) & 0xff] ^
; 803  :             C4[(int)(state[0] >> 24) & 0xff] ^
; 804  :             C5[(int)(state[7] >> 16) & 0xff] ^
; 805  :             C6[(int)(state[6] >>  8) & 0xff] ^
; 806  :             C7[(int)(state[5]      ) & 0xff] ^
; 807  :             K[4];

  011fe	8b b4 24 b4 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+448]
  01205	8b bc 24 b8 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+452]
  0120c	0f ac fe 10	 shrd	 esi, edi, 16
  01210	8b ac 24 b0 00
	00 00		 mov	 ebp, DWORD PTR _state$[esp+444]
  01217	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  0121d	c1 ef 10	 shr	 edi, 16			; 00000010H
  01220	8b bc 24 ac 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+440]
  01227	0f ac ef 08	 shrd	 edi, ebp, 8
  0122b	c1 ed 08	 shr	 ebp, 8
  0122e	8b 2c f5 00 00
	00 00		 mov	 ebp, DWORD PTR _C5[esi*8]
  01235	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C5[esi*8+4]
  0123c	81 e7 ff 00 00
	00		 and	 edi, 255		; 000000ffH
  01242	33 34 fd 04 00
	00 00		 xor	 esi, DWORD PTR _C6[edi*8+4]
  01249	33 2c fd 00 00
	00 00		 xor	 ebp, DWORD PTR _C6[edi*8]
  01250	8b bc 24 98 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+420]
  01257	89 74 24 10	 mov	 DWORD PTR tv1965[esp+392], esi
  0125b	c1 ef 10	 shr	 edi, 16			; 00000010H
  0125e	8b f7		 mov	 esi, edi
  01260	8b 7c 24 10	 mov	 edi, DWORD PTR tv1965[esp+392]
  01264	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  0126a	33 2c f5 00 00
	00 00		 xor	 ebp, DWORD PTR _C1[esi*8]
  01271	33 3c f5 04 00
	00 00		 xor	 edi, DWORD PTR _C1[esi*8+4]
  01278	8b b4 24 90 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+412]
  0127f	c1 ee 08	 shr	 esi, 8
  01282	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  01288	33 2c f5 00 00
	00 00		 xor	 ebp, DWORD PTR _C2[esi*8]
  0128f	33 3c f5 04 00
	00 00		 xor	 edi, DWORD PTR _C2[esi*8+4]
  01296	8b b4 24 88 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+404]
  0129d	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  012a3	33 2c f5 00 00
	00 00		 xor	 ebp, DWORD PTR _C3[esi*8]
  012aa	33 3c f5 04 00
	00 00		 xor	 edi, DWORD PTR _C3[esi*8+4]
  012b1	8b 74 24 7c	 mov	 esi, DWORD PTR _state$[esp+392]
  012b5	0f ac de 18	 shrd	 esi, ebx, 24
  012b9	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  012bf	33 3c f5 04 00
	00 00		 xor	 edi, DWORD PTR _C4[esi*8+4]
  012c6	33 2c f5 00 00
	00 00		 xor	 ebp, DWORD PTR _C4[esi*8]
  012cd	c1 eb 18	 shr	 ebx, 24			; 00000018H
  012d0	8b df		 mov	 ebx, edi
  012d2	8b bc 24 a0 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+428]
  012d9	8b f7		 mov	 esi, edi
  012db	c1 ee 18	 shr	 esi, 24			; 00000018H
  012de	33 1c f5 04 00
	00 00		 xor	 ebx, DWORD PTR _C0[esi*8+4]
  012e5	33 2c f5 00 00
	00 00		 xor	 ebp, DWORD PTR _C0[esi*8]
  012ec	8b b4 24 a4 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+432]
  012f3	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  012f9	33 1c f5 04 00
	00 00		 xor	 ebx, DWORD PTR _C7[esi*8+4]
  01300	33 2c f5 00 00
	00 00		 xor	 ebp, DWORD PTR _C7[esi*8]
  01307	31 9c 24 e0 00
	00 00		 xor	 DWORD PTR _L$[esp+428], ebx

; 808  :         L[5] =
; 809  :             C0[(int)(state[5] >> 56)       ] ^
; 810  :             C1[(int)(state[4] >> 48) & 0xff] ^
; 811  :             C2[(int)(state[3] >> 40) & 0xff] ^
; 812  :             C3[(int)(state[2] >> 32) & 0xff] ^
; 813  :             C4[(int)(state[1] >> 24) & 0xff] ^
; 814  :             C5[(int)(state[0] >> 16) & 0xff] ^
; 815  :             C6[(int)(state[7] >>  8) & 0xff] ^
; 816  :             C7[(int)(state[6]      ) & 0xff] ^
; 817  :             K[5];

  0130e	8b b4 24 b4 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+448]
  01315	8b 9c 24 b8 00
	00 00		 mov	 ebx, DWORD PTR _state$[esp+452]
  0131c	31 ac 24 dc 00
	00 00		 xor	 DWORD PTR _L$[esp+424], ebp
  01323	0f ac de 08	 shrd	 esi, ebx, 8
  01327	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  0132d	8b 2c f5 04 00
	00 00		 mov	 ebp, DWORD PTR _C6[esi*8+4]
  01334	c1 eb 08	 shr	 ebx, 8
  01337	8b 1c f5 00 00
	00 00		 mov	 ebx, DWORD PTR _C6[esi*8]
  0133e	8b b4 24 98 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+420]
  01345	c1 ef 10	 shr	 edi, 16			; 00000010H
  01348	c1 ee 08	 shr	 esi, 8
  0134b	81 e7 ff 00 00
	00		 and	 edi, 255		; 000000ffH
  01351	33 1c fd 00 00
	00 00		 xor	 ebx, DWORD PTR _C1[edi*8]
  01358	33 2c fd 04 00
	00 00		 xor	 ebp, DWORD PTR _C1[edi*8+4]
  0135f	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  01365	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C2[esi*8]
  0136c	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C2[esi*8+4]
  01373	8b b4 24 90 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+412]
  0137a	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  01380	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C3[esi*8]
  01387	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C3[esi*8+4]
  0138e	8b b4 24 84 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+400]
  01395	8b bc 24 88 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+404]
  0139c	0f ac fe 18	 shrd	 esi, edi, 24
  013a0	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  013a6	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C4[esi*8]
  013ad	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C4[esi*8+4]
  013b4	8b 74 24 7c	 mov	 esi, DWORD PTR _state$[esp+392]
  013b8	c1 ef 18	 shr	 edi, 24			; 00000018H
  013bb	8b bc 24 80 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+396]
  013c2	0f ac fe 10	 shrd	 esi, edi, 16
  013c6	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  013cc	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C5[esi*8]
  013d3	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C5[esi*8+4]
  013da	c1 ef 10	 shr	 edi, 16			; 00000010H
  013dd	8b bc 24 a8 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+436]
  013e4	8b f7		 mov	 esi, edi
  013e6	c1 ee 18	 shr	 esi, 24			; 00000018H
  013e9	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C0[esi*8]
  013f0	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C0[esi*8+4]
  013f7	8b b4 24 ac 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+440]
  013fe	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  01404	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C7[esi*8]
  0140b	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C7[esi*8+4]
  01412	31 9c 24 e4 00
	00 00		 xor	 DWORD PTR _L$[esp+432], ebx
  01419	31 ac 24 e8 00
	00 00		 xor	 DWORD PTR _L$[esp+436], ebp

; 818  :         L[6] =
; 819  :             C0[(int)(state[6] >> 56)       ] ^
; 820  :             C1[(int)(state[5] >> 48) & 0xff] ^
; 821  :             C2[(int)(state[4] >> 40) & 0xff] ^
; 822  :             C3[(int)(state[3] >> 32) & 0xff] ^
; 823  :             C4[(int)(state[2] >> 24) & 0xff] ^
; 824  :             C5[(int)(state[1] >> 16) & 0xff] ^
; 825  :             C6[(int)(state[0] >>  8) & 0xff] ^
; 826  :             C7[(int)(state[7]      ) & 0xff] ^
; 827  :             K[6];

  01420	c1 ef 10	 shr	 edi, 16			; 00000010H
  01423	8b f7		 mov	 esi, edi
  01425	8b bc 24 a0 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+428]
  0142c	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  01432	8b 1c f5 00 00
	00 00		 mov	 ebx, DWORD PTR _C1[esi*8]
  01439	8b 2c f5 04 00
	00 00		 mov	 ebp, DWORD PTR _C1[esi*8+4]
  01440	8b b4 24 98 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+420]
  01447	c1 ef 08	 shr	 edi, 8
  0144a	81 e7 ff 00 00
	00		 and	 edi, 255		; 000000ffH
  01450	33 1c fd 00 00
	00 00		 xor	 ebx, DWORD PTR _C2[edi*8]
  01457	33 2c fd 04 00
	00 00		 xor	 ebp, DWORD PTR _C2[edi*8+4]
  0145e	8b bc 24 90 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+412]
  01465	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  0146b	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C3[esi*8]
  01472	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C3[esi*8+4]
  01479	8b b4 24 8c 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+408]
  01480	0f ac fe 18	 shrd	 esi, edi, 24
  01484	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  0148a	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C4[esi*8]
  01491	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C4[esi*8+4]
  01498	8b b4 24 84 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+400]
  0149f	c1 ef 18	 shr	 edi, 24			; 00000018H
  014a2	8b bc 24 88 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+404]
  014a9	0f ac fe 10	 shrd	 esi, edi, 16
  014ad	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  014b3	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C5[esi*8]
  014ba	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C5[esi*8+4]
  014c1	8b 74 24 7c	 mov	 esi, DWORD PTR _state$[esp+392]
  014c5	c1 ef 10	 shr	 edi, 16			; 00000010H
  014c8	8b bc 24 80 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+396]
  014cf	0f ac fe 08	 shrd	 esi, edi, 8
  014d3	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  014d9	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C6[esi*8]
  014e0	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C6[esi*8+4]
  014e7	c1 ef 08	 shr	 edi, 8
  014ea	8b bc 24 b0 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+444]
  014f1	8b f7		 mov	 esi, edi
  014f3	c1 ee 18	 shr	 esi, 24			; 00000018H
  014f6	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C0[esi*8]
  014fd	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C0[esi*8+4]
  01504	8b b4 24 b4 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+448]
  0150b	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  01511	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C7[esi*8]
  01518	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C7[esi*8+4]
  0151f	31 9c 24 ec 00
	00 00		 xor	 DWORD PTR _L$[esp+440], ebx
  01526	31 ac 24 f0 00
	00 00		 xor	 DWORD PTR _L$[esp+444], ebp

; 828  :         L[7] =
; 829  :             C0[(int)(state[7] >> 56)       ] ^
; 830  :             C1[(int)(state[6] >> 48) & 0xff] ^
; 831  :             C2[(int)(state[5] >> 40) & 0xff] ^
; 832  :             C3[(int)(state[4] >> 32) & 0xff] ^
; 833  :             C4[(int)(state[3] >> 24) & 0xff] ^
; 834  :             C5[(int)(state[2] >> 16) & 0xff] ^
; 835  :             C6[(int)(state[1] >>  8) & 0xff] ^
; 836  :             C7[(int)(state[0]      ) & 0xff] ^
; 837  :             K[7];

  0152d	c1 ef 10	 shr	 edi, 16			; 00000010H
  01530	8b f7		 mov	 esi, edi
  01532	8b bc 24 a8 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+436]
  01539	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  0153f	8b 1c f5 00 00
	00 00		 mov	 ebx, DWORD PTR _C1[esi*8]
  01546	8b 2c f5 04 00
	00 00		 mov	 ebp, DWORD PTR _C1[esi*8+4]
  0154d	8b b4 24 a0 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+428]
  01554	c1 ef 08	 shr	 edi, 8
  01557	81 e7 ff 00 00
	00		 and	 edi, 255		; 000000ffH
  0155d	33 1c fd 00 00
	00 00		 xor	 ebx, DWORD PTR _C2[edi*8]
  01564	33 2c fd 04 00
	00 00		 xor	 ebp, DWORD PTR _C2[edi*8+4]
  0156b	8b bc 24 98 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+420]
  01572	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  01578	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C3[esi*8]
  0157f	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C3[esi*8+4]
  01586	8b b4 24 94 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+416]
  0158d	0f ac fe 18	 shrd	 esi, edi, 24
  01591	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  01597	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C4[esi*8]
  0159e	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C4[esi*8+4]
  015a5	8b b4 24 8c 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+408]
  015ac	c1 ef 18	 shr	 edi, 24			; 00000018H
  015af	8b bc 24 90 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+412]
  015b6	0f ac fe 10	 shrd	 esi, edi, 16
  015ba	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  015c0	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C5[esi*8]
  015c7	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C5[esi*8+4]
  015ce	8b b4 24 84 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+400]
  015d5	c1 ef 10	 shr	 edi, 16			; 00000010H
  015d8	8b bc 24 88 00
	00 00		 mov	 edi, DWORD PTR _state$[esp+404]
  015df	0f ac fe 08	 shrd	 esi, edi, 8
  015e3	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  015e9	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C6[esi*8]
  015f0	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C6[esi*8+4]
  015f7	8b b4 24 b8 00
	00 00		 mov	 esi, DWORD PTR _state$[esp+452]
  015fe	c1 ee 18	 shr	 esi, 24			; 00000018H
  01601	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C0[esi*8]
  01608	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C0[esi*8+4]
  0160f	8b 74 24 7c	 mov	 esi, DWORD PTR _state$[esp+392]
  01613	81 e6 ff 00 00
	00		 and	 esi, 255		; 000000ffH
  01619	33 1c f5 00 00
	00 00		 xor	 ebx, DWORD PTR _C7[esi*8]
  01620	33 2c f5 04 00
	00 00		 xor	 ebp, DWORD PTR _C7[esi*8+4]

; 838  :         state[0] = L[0];
; 839  :         state[1] = L[1];
; 840  :         state[2] = L[2];

  01627	8b b4 24 cc 00
	00 00		 mov	 esi, DWORD PTR _L$[esp+408]
  0162e	89 b4 24 8c 00
	00 00		 mov	 DWORD PTR _state$[esp+408], esi
  01635	8b b4 24 d0 00
	00 00		 mov	 esi, DWORD PTR _L$[esp+412]
  0163c	89 b4 24 90 00
	00 00		 mov	 DWORD PTR _state$[esp+412], esi

; 841  :         state[3] = L[3];

  01643	8b b4 24 d4 00
	00 00		 mov	 esi, DWORD PTR _L$[esp+416]
  0164a	89 b4 24 94 00
	00 00		 mov	 DWORD PTR _state$[esp+416], esi
  01651	8b b4 24 d8 00
	00 00		 mov	 esi, DWORD PTR _L$[esp+420]
  01658	89 b4 24 98 00
	00 00		 mov	 DWORD PTR _state$[esp+420], esi

; 842  :         state[4] = L[4];

  0165f	8b b4 24 dc 00
	00 00		 mov	 esi, DWORD PTR _L$[esp+424]
  01666	89 b4 24 9c 00
	00 00		 mov	 DWORD PTR _state$[esp+424], esi
  0166d	8b b4 24 e0 00
	00 00		 mov	 esi, DWORD PTR _L$[esp+428]
  01674	89 b4 24 a0 00
	00 00		 mov	 DWORD PTR _state$[esp+428], esi

; 843  :         state[5] = L[5];

  0167b	8b b4 24 e4 00
	00 00		 mov	 esi, DWORD PTR _L$[esp+432]
  01682	89 b4 24 a4 00
	00 00		 mov	 DWORD PTR _state$[esp+432], esi
  01689	8b b4 24 e8 00
	00 00		 mov	 esi, DWORD PTR _L$[esp+436]
  01690	89 b4 24 a8 00
	00 00		 mov	 DWORD PTR _state$[esp+436], esi

; 844  :         state[6] = L[6];

  01697	8b b4 24 ec 00
	00 00		 mov	 esi, DWORD PTR _L$[esp+440]
  0169e	c1 ef 08	 shr	 edi, 8
  016a1	8b bc 24 f4 00
	00 00		 mov	 edi, DWORD PTR _L$[esp+448]
  016a8	89 b4 24 ac 00
	00 00		 mov	 DWORD PTR _state$[esp+440], esi
  016af	8b b4 24 f0 00
	00 00		 mov	 esi, DWORD PTR _L$[esp+444]
  016b6	33 fb		 xor	 edi, ebx
  016b8	8b 9c 24 f8 00
	00 00		 mov	 ebx, DWORD PTR _L$[esp+452]
  016bf	89 b4 24 b0 00
	00 00		 mov	 DWORD PTR _state$[esp+444], esi
  016c6	8b b4 24 04 01
	00 00		 mov	 esi, DWORD PTR tv3826[esp+392]
  016cd	33 dd		 xor	 ebx, ebp
  016cf	8b ac 24 c8 00
	00 00		 mov	 ebp, DWORD PTR _L$[esp+404]
  016d6	83 c6 08	 add	 esi, 8
  016d9	81 fe 50 00 00
	00		 cmp	 esi, OFFSET _rc+80
  016df	89 44 24 7c	 mov	 DWORD PTR _state$[esp+392], eax
  016e3	89 8c 24 80 00
	00 00		 mov	 DWORD PTR _state$[esp+396], ecx
  016ea	89 94 24 84 00
	00 00		 mov	 DWORD PTR _state$[esp+400], edx
  016f1	89 ac 24 88 00
	00 00		 mov	 DWORD PTR _state$[esp+404], ebp

; 845  :         state[7] = L[7];

  016f8	89 bc 24 b4 00
	00 00		 mov	 DWORD PTR _state$[esp+448], edi
  016ff	89 9c 24 b8 00
	00 00		 mov	 DWORD PTR _state$[esp+452], ebx
  01706	89 b4 24 04 01
	00 00		 mov	 DWORD PTR tv3826[esp+392], esi
  0170d	0f 8e 2d ed ff
	ff		 jle	 $LL14@processBuf

; 846  :     }
; 847  :     /*
; 848  :      * apply the Miyaguchi-Preneel compression function:
; 849  :      */
; 850  :     structpointer->hash[0] ^= state[0] ^ block[0];

  01713	8b b4 24 fc 00
	00 00		 mov	 esi, DWORD PTR tv1831[esp+392]
  0171a	33 f0		 xor	 esi, eax
  0171c	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR tv1831[esp+396]
  01723	33 c1		 xor	 eax, ecx
  01725	33 84 24 0c 01
	00 00		 xor	 eax, DWORD PTR _block$[esp+396]
  0172c	33 b4 24 08 01
	00 00		 xor	 esi, DWORD PTR _block$[esp+392]
  01733	89 84 24 00 01
	00 00		 mov	 DWORD PTR tv1296[esp+396], eax
  0173a	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR _structpointer$[esp+388]
  01741	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR tv1296[esp+396]
  01748	89 48 6c	 mov	 DWORD PTR [eax+108], ecx

; 851  :     structpointer->hash[1] ^= state[1] ^ block[1];

  0174b	8b 8c 24 48 01
	00 00		 mov	 ecx, DWORD PTR tv1835[esp+392]
  01752	33 ca		 xor	 ecx, edx
  01754	33 8c 24 10 01
	00 00		 xor	 ecx, DWORD PTR _block$[esp+400]
  0175b	8b 94 24 4c 01
	00 00		 mov	 edx, DWORD PTR tv1835[esp+396]
  01762	33 d5		 xor	 edx, ebp
  01764	33 94 24 14 01
	00 00		 xor	 edx, DWORD PTR _block$[esp+404]
  0176b	89 48 70	 mov	 DWORD PTR [eax+112], ecx

; 852  :     structpointer->hash[2] ^= state[2] ^ block[2];

  0176e	8b 8c 24 60 01
	00 00		 mov	 ecx, DWORD PTR tv1839[esp+392]
  01775	33 8c 24 cc 00
	00 00		 xor	 ecx, DWORD PTR _L$[esp+408]
  0177c	89 50 74	 mov	 DWORD PTR [eax+116], edx
  0177f	33 8c 24 18 01
	00 00		 xor	 ecx, DWORD PTR _block$[esp+408]
  01786	8b 94 24 64 01
	00 00		 mov	 edx, DWORD PTR tv1839[esp+396]
  0178d	33 94 24 d0 00
	00 00		 xor	 edx, DWORD PTR _L$[esp+412]
  01794	89 48 78	 mov	 DWORD PTR [eax+120], ecx
  01797	33 94 24 1c 01
	00 00		 xor	 edx, DWORD PTR _block$[esp+412]

; 853  :     structpointer->hash[3] ^= state[3] ^ block[3];

  0179e	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR tv1843[esp+392]
  017a5	33 8c 24 d4 00
	00 00		 xor	 ecx, DWORD PTR _L$[esp+416]
  017ac	89 50 7c	 mov	 DWORD PTR [eax+124], edx
  017af	33 8c 24 20 01
	00 00		 xor	 ecx, DWORD PTR _block$[esp+416]
  017b6	8b 94 24 74 01
	00 00		 mov	 edx, DWORD PTR tv1843[esp+396]
  017bd	33 94 24 d8 00
	00 00		 xor	 edx, DWORD PTR _L$[esp+420]
  017c4	89 88 80 00 00
	00		 mov	 DWORD PTR [eax+128], ecx
  017ca	33 94 24 24 01
	00 00		 xor	 edx, DWORD PTR _block$[esp+420]

; 854  :     structpointer->hash[4] ^= state[4] ^ block[4];

  017d1	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR tv1847[esp+392]
  017d8	33 8c 24 dc 00
	00 00		 xor	 ecx, DWORD PTR _L$[esp+424]
  017df	89 90 84 00 00
	00		 mov	 DWORD PTR [eax+132], edx
  017e5	33 8c 24 28 01
	00 00		 xor	 ecx, DWORD PTR _block$[esp+424]
  017ec	8b 94 24 84 01
	00 00		 mov	 edx, DWORD PTR tv1847[esp+396]
  017f3	33 94 24 e0 00
	00 00		 xor	 edx, DWORD PTR _L$[esp+428]
  017fa	89 88 88 00 00
	00		 mov	 DWORD PTR [eax+136], ecx
  01800	33 94 24 2c 01
	00 00		 xor	 edx, DWORD PTR _block$[esp+428]

; 855  :     structpointer->hash[5] ^= state[5] ^ block[5];

  01807	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR tv1851[esp+392]
  0180e	33 8c 24 e4 00
	00 00		 xor	 ecx, DWORD PTR _L$[esp+432]
  01815	89 90 8c 00 00
	00		 mov	 DWORD PTR [eax+140], edx
  0181b	33 8c 24 30 01
	00 00		 xor	 ecx, DWORD PTR _block$[esp+432]
  01822	8b 94 24 5c 01
	00 00		 mov	 edx, DWORD PTR tv1851[esp+396]
  01829	33 94 24 e8 00
	00 00		 xor	 edx, DWORD PTR _L$[esp+436]
  01830	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx
  01836	33 94 24 34 01
	00 00		 xor	 edx, DWORD PTR _block$[esp+436]

; 856  :     structpointer->hash[6] ^= state[6] ^ block[6];

  0183d	8b 8c 24 78 01
	00 00		 mov	 ecx, DWORD PTR tv1855[esp+392]
  01844	33 8c 24 ec 00
	00 00		 xor	 ecx, DWORD PTR _L$[esp+440]
  0184b	89 90 94 00 00
	00		 mov	 DWORD PTR [eax+148], edx
  01851	33 8c 24 38 01
	00 00		 xor	 ecx, DWORD PTR _block$[esp+440]
  01858	8b 94 24 7c 01
	00 00		 mov	 edx, DWORD PTR tv1855[esp+396]
  0185f	33 94 24 f0 00
	00 00		 xor	 edx, DWORD PTR _L$[esp+444]
  01866	89 88 98 00 00
	00		 mov	 DWORD PTR [eax+152], ecx
  0186c	33 94 24 3c 01
	00 00		 xor	 edx, DWORD PTR _block$[esp+444]

; 857  :     structpointer->hash[7] ^= state[7] ^ block[7];

  01873	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR tv1859[esp+392]
  0187a	89 90 9c 00 00
	00		 mov	 DWORD PTR [eax+156], edx
  01880	8b 94 24 6c 01
	00 00		 mov	 edx, DWORD PTR tv1859[esp+396]
  01887	33 cf		 xor	 ecx, edi
  01889	33 8c 24 40 01
	00 00		 xor	 ecx, DWORD PTR _block$[esp+448]
  01890	5f		 pop	 edi
  01891	33 d3		 xor	 edx, ebx
  01893	33 94 24 40 01
	00 00		 xor	 edx, DWORD PTR _block$[esp+448]
  0189a	89 70 68	 mov	 DWORD PTR [eax+104], esi
  0189d	5e		 pop	 esi
  0189e	5d		 pop	 ebp
  0189f	89 88 a0 00 00
	00		 mov	 DWORD PTR [eax+160], ecx
  018a5	89 90 a4 00 00
	00		 mov	 DWORD PTR [eax+164], edx
  018ab	5b		 pop	 ebx

; 858  : }

  018ac	81 c4 78 01 00
	00		 add	 esp, 376		; 00000178H
  018b2	c3		 ret	 0
_processBuffer ENDP
_TEXT	ENDS
PUBLIC	_WHIRLPOOL_init
; Function compile flags: /Ogtpy
;	COMDAT _WHIRLPOOL_init
_TEXT	SEGMENT
_structpointer$ = 8					; size = 4
_WHIRLPOOL_init PROC					; COMDAT

; 864  :     int i;
; 865  : 
; 866  :     memset(structpointer->bitLength, 0, 32);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _structpointer$[esp-4]
  00004	33 c9		 xor	 ecx, ecx
  00006	89 08		 mov	 DWORD PTR [eax], ecx
  00008	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0000b	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000e	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00011	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00014	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00017	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  0001a	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 867  :     structpointer->bufferBits = structpointer->bufferPos = 0;

  0001d	89 48 64	 mov	 DWORD PTR [eax+100], ecx
  00020	89 48 60	 mov	 DWORD PTR [eax+96], ecx

; 868  :     structpointer->buffer[0] = 0; /* it's only necessary to cleanup buffer[bufferPos] */

  00023	88 48 20	 mov	 BYTE PTR [eax+32], cl

; 869  :     for (i = 0; i < 8; i++) {
; 870  :         structpointer->hash[i] = 0L; /* initial value */

  00026	89 48 68	 mov	 DWORD PTR [eax+104], ecx
  00029	89 48 6c	 mov	 DWORD PTR [eax+108], ecx
  0002c	89 48 70	 mov	 DWORD PTR [eax+112], ecx
  0002f	89 48 74	 mov	 DWORD PTR [eax+116], ecx
  00032	89 48 78	 mov	 DWORD PTR [eax+120], ecx
  00035	89 48 7c	 mov	 DWORD PTR [eax+124], ecx
  00038	89 88 80 00 00
	00		 mov	 DWORD PTR [eax+128], ecx
  0003e	89 88 84 00 00
	00		 mov	 DWORD PTR [eax+132], ecx
  00044	89 88 88 00 00
	00		 mov	 DWORD PTR [eax+136], ecx
  0004a	89 88 8c 00 00
	00		 mov	 DWORD PTR [eax+140], ecx
  00050	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx
  00056	89 88 94 00 00
	00		 mov	 DWORD PTR [eax+148], ecx
  0005c	89 88 98 00 00
	00		 mov	 DWORD PTR [eax+152], ecx
  00062	89 88 9c 00 00
	00		 mov	 DWORD PTR [eax+156], ecx
  00068	89 88 a0 00 00
	00		 mov	 DWORD PTR [eax+160], ecx
  0006e	89 88 a4 00 00
	00		 mov	 DWORD PTR [eax+164], ecx

; 871  :     }
; 872  : }

  00074	c3		 ret	 0
_WHIRLPOOL_init ENDP
_TEXT	ENDS
PUBLIC	_WHIRLPOOL_add
; Function compile flags: /Ogtpy
;	COMDAT _WHIRLPOOL_add
_TEXT	SEGMENT
_sourcePos$ = -20					; size = 4
_sourceGap$ = -16					; size = 4
tv283 = -12						; size = 4
tv307 = -8						; size = 4
_value$ = -8						; size = 8
_source$ = 8						; size = 4
_sourceBits$ = 12					; size = 4
tv199 = 16						; size = 4
_i$ = 16						; size = 4
_structpointer$ = 16					; size = 4
_WHIRLPOOL_add PROC					; COMDAT

; 884  :                struct NESSIEstruct * const structpointer) {

  00000	83 ec 14	 sub	 esp, 20			; 00000014H

; 885  :     /*
; 886  :                        sourcePos
; 887  :                        |
; 888  :                        +-------+-------+-------
; 889  :                           ||||||||||||||||||||| source
; 890  :                        +-------+-------+-------
; 891  :     +-------+-------+-------+-------+-------+-------
; 892  :     ||||||||||||||||||||||                           buffer
; 893  :     +-------+-------+-------+-------+-------+-------
; 894  :                     |
; 895  :                     bufferPos
; 896  :     */
; 897  :     int sourcePos    = 0; /* index of leftmost source u8 containing data (1 to 8 bits). */
; 898  :     int sourceGap    = (8 - ((int)sourceBits & 7)) & 7; /* space on source[sourcePos]. */

  00003	8b 54 24 1c	 mov	 edx, DWORD PTR _sourceBits$[esp+16]
  00007	53		 push	 ebx
  00008	55		 push	 ebp
  00009	8b c2		 mov	 eax, edx
  0000b	f7 d8		 neg	 eax
  0000d	83 e0 07	 and	 eax, 7
  00010	56		 push	 esi

; 899  :     int bufferRem    = structpointer->bufferBits & 7; /* occupied bits on buffer[bufferPos]. */

  00011	8b 74 24 2c	 mov	 esi, DWORD PTR _structpointer$[esp+28]
  00015	89 44 24 10	 mov	 DWORD PTR _sourceGap$[esp+32], eax
  00019	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  0001c	33 c9		 xor	 ecx, ecx
  0001e	8b e8		 mov	 ebp, eax
  00020	57		 push	 edi

; 900  :     int i;
; 901  :     u32 b, carry;
; 902  :     u8 *buffer       = structpointer->buffer;
; 903  :     u8 *bitLength    = structpointer->bitLength;
; 904  :     int bufferBits   = structpointer->bufferBits;
; 905  :     int bufferPos    = structpointer->bufferPos;

  00021	8b 7e 64	 mov	 edi, DWORD PTR [esi+100]
  00024	89 4c 24 10	 mov	 DWORD PTR _sourcePos$[esp+36], ecx
  00028	83 e5 07	 and	 ebp, 7

; 906  : 
; 907  :     /*
; 908  :      * tally the length of the added data:
; 909  :      */
; 910  :     u64 value = sourceBits;

  0002b	89 54 24 1c	 mov	 DWORD PTR _value$[esp+36], edx
  0002f	89 4c 24 20	 mov	 DWORD PTR _value$[esp+40], ecx

; 911  :     for (i = 31, carry = 0; i >= 0 && (carry != 0 || value != LL(0)); i--) {

  00033	c7 44 24 30 1f
	00 00 00	 mov	 DWORD PTR _i$[esp+32], 31 ; 0000001fH
  0003b	eb 03 8d 49 00	 npad	 5
$LL20@WHIRLPOOL_:
  00040	85 c9		 test	 ecx, ecx
  00042	75 0a		 jne	 SHORT $LN9@WHIRLPOOL_
  00044	0b 54 24 20	 or	 edx, DWORD PTR _value$[esp+40]
  00048	74 3c		 je	 SHORT $LN22@WHIRLPOOL_
  0004a	8b 54 24 1c	 mov	 edx, DWORD PTR _value$[esp+36]
$LN9@WHIRLPOOL_:

; 912  :         carry += bitLength[i] + ((u32)value & 0xff);

  0004e	8b 5c 24 30	 mov	 ebx, DWORD PTR _i$[esp+32]
  00052	0f b6 1c 33	 movzx	 ebx, BYTE PTR [ebx+esi]
  00056	0f b6 d2	 movzx	 edx, dl
  00059	03 d9		 add	 ebx, ecx
  0005b	8d 0c 13	 lea	 ecx, DWORD PTR [ebx+edx]

; 913  :         bitLength[i] = (u8)carry;

  0005e	8b 54 24 30	 mov	 edx, DWORD PTR _i$[esp+32]

; 914  :         carry >>= 8;
; 915  :         value >>= 8;

  00062	8b 5c 24 20	 mov	 ebx, DWORD PTR _value$[esp+40]
  00066	88 0c 32	 mov	 BYTE PTR [edx+esi], cl
  00069	8b 54 24 1c	 mov	 edx, DWORD PTR _value$[esp+36]
  0006d	0f ac da 08	 shrd	 edx, ebx, 8
  00071	c1 eb 08	 shr	 ebx, 8
  00074	c1 e9 08	 shr	 ecx, 8
  00077	83 6c 24 30 01	 sub	 DWORD PTR _i$[esp+32], 1
  0007c	89 54 24 1c	 mov	 DWORD PTR _value$[esp+36], edx
  00080	89 5c 24 20	 mov	 DWORD PTR _value$[esp+40], ebx
  00084	79 ba		 jns	 SHORT $LL20@WHIRLPOOL_
$LN22@WHIRLPOOL_:

; 916  :     }
; 917  :     /*
; 918  :      * process data in chunks of 8 bits (a more efficient approach would be to take whole-word chunks):
; 919  :      */
; 920  :     while (sourceBits > 8) {

  00086	8b 5c 24 2c	 mov	 ebx, DWORD PTR _sourceBits$[esp+32]
  0008a	83 fb 08	 cmp	 ebx, 8
  0008d	0f 86 a2 00 00
	00		 jbe	 $LN19@WHIRLPOOL_
  00093	ba 08 00 00 00	 mov	 edx, 8
  00098	2b d5		 sub	 edx, ebp
  0009a	89 54 24 1c	 mov	 DWORD PTR tv307[esp+36], edx
  0009e	8d 53 f7	 lea	 edx, DWORD PTR [ebx-9]
  000a1	b9 08 00 00 00	 mov	 ecx, 8
  000a6	2b 4c 24 14	 sub	 ecx, DWORD PTR _sourceGap$[esp+36]
  000aa	c1 ea 03	 shr	 edx, 3
  000ad	42		 inc	 edx

; 941  :         }
; 942  :         buffer[bufferPos] = (u8) (b << (8 - bufferRem));

  000ae	89 4c 24 18	 mov	 DWORD PTR tv283[esp+36], ecx
  000b2	89 54 24 30	 mov	 DWORD PTR tv199[esp+32], edx
  000b6	eb 0c		 jmp	 SHORT $LN8@WHIRLPOOL_
  000b8	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL23@WHIRLPOOL_:

; 916  :     }
; 917  :     /*
; 918  :      * process data in chunks of 8 bits (a more efficient approach would be to take whole-word chunks):
; 919  :      */
; 920  :     while (sourceBits > 8) {

  000c0	8b 4c 24 18	 mov	 ecx, DWORD PTR tv283[esp+36]
$LN8@WHIRLPOOL_:

; 921  :         /* N.B. at least source[sourcePos] and source[sourcePos+1] contain data. */
; 922  :         /*
; 923  :          * take a byte from the source:
; 924  :          */
; 925  :         b = ((source[sourcePos] << sourceGap) & 0xff) |
; 926  :             ((source[sourcePos + 1] & 0xff) >> (8 - sourceGap));

  000c4	8b 54 24 28	 mov	 edx, DWORD PTR _source$[esp+32]
  000c8	8b 5c 24 10	 mov	 ebx, DWORD PTR _sourcePos$[esp+36]
  000cc	0f b6 5c 13 01	 movzx	 ebx, BYTE PTR [ebx+edx+1]
  000d1	d3 eb		 shr	 ebx, cl
  000d3	8b 4c 24 10	 mov	 ecx, DWORD PTR _sourcePos$[esp+36]
  000d7	0f b6 14 11	 movzx	 edx, BYTE PTR [ecx+edx]
  000db	8b 4c 24 14	 mov	 ecx, DWORD PTR _sourceGap$[esp+36]
  000df	d3 e2		 shl	 edx, cl

; 927  :         /*
; 928  :          * process this byte:
; 929  :          */
; 930  :         buffer[bufferPos++] |= (u8)(b >> bufferRem);

  000e1	8b cd		 mov	 ecx, ebp
  000e3	47		 inc	 edi
  000e4	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  000ea	0b da		 or	 ebx, edx
  000ec	8b d3		 mov	 edx, ebx
  000ee	d3 ea		 shr	 edx, cl

; 931  :         bufferBits += 8 - bufferRem; /* bufferBits = 8*bufferPos; */

  000f0	b9 08 00 00 00	 mov	 ecx, 8
  000f5	2b cd		 sub	 ecx, ebp
  000f7	03 c1		 add	 eax, ecx
  000f9	08 54 37 1f	 or	 BYTE PTR [edi+esi+31], dl

; 932  :         if (bufferBits == DIGESTBITS) {

  000fd	3d 00 02 00 00	 cmp	 eax, 512		; 00000200H
  00102	75 0d		 jne	 SHORT $LN21@WHIRLPOOL_

; 933  :             /*
; 934  :              * process data block:
; 935  :              */
; 936  :             processBuffer(structpointer);

  00104	56		 push	 esi
  00105	e8 00 00 00 00	 call	 _processBuffer
  0010a	83 c4 04	 add	 esp, 4

; 937  :             /*
; 938  :              * reset buffer:
; 939  :              */
; 940  :             bufferBits = bufferPos = 0;

  0010d	33 ff		 xor	 edi, edi
  0010f	33 c0		 xor	 eax, eax
$LN21@WHIRLPOOL_:

; 941  :         }
; 942  :         buffer[bufferPos] = (u8) (b << (8 - bufferRem));

  00111	8b 4c 24 1c	 mov	 ecx, DWORD PTR tv307[esp+36]

; 943  :         bufferBits += bufferRem;
; 944  :         /*
; 945  :          * proceed to remaining data:
; 946  :          */
; 947  :         sourceBits -= 8;

  00115	83 6c 24 2c 08	 sub	 DWORD PTR _sourceBits$[esp+32], 8
  0011a	d2 e3		 shl	 bl, cl

; 948  :         sourcePos++;

  0011c	b9 01 00 00 00	 mov	 ecx, 1
  00121	01 4c 24 10	 add	 DWORD PTR _sourcePos$[esp+36], ecx
  00125	03 c5		 add	 eax, ebp
  00127	29 4c 24 30	 sub	 DWORD PTR tv199[esp+32], ecx
  0012b	88 5c 37 20	 mov	 BYTE PTR [edi+esi+32], bl
  0012f	75 8f		 jne	 SHORT $LL23@WHIRLPOOL_

; 916  :     }
; 917  :     /*
; 918  :      * process data in chunks of 8 bits (a more efficient approach would be to take whole-word chunks):
; 919  :      */
; 920  :     while (sourceBits > 8) {

  00131	8b 5c 24 2c	 mov	 ebx, DWORD PTR _sourceBits$[esp+32]
$LN19@WHIRLPOOL_:

; 949  :     }
; 950  :     /* now 0 <= sourceBits <= 8;
; 951  :      * furthermore, all data (if any is left) is in source[sourcePos].
; 952  :      */
; 953  :     if (sourceBits > 0) {

  00135	85 db		 test	 ebx, ebx
  00137	76 24		 jbe	 SHORT $LN5@WHIRLPOOL_

; 954  :         b = (source[sourcePos] << sourceGap) & 0xff; /* bits are left-justified on b. */

  00139	8b 54 24 28	 mov	 edx, DWORD PTR _source$[esp+32]
  0013d	8b 4c 24 10	 mov	 ecx, DWORD PTR _sourcePos$[esp+36]
  00141	0f b6 1c 11	 movzx	 ebx, BYTE PTR [ecx+edx]
  00145	8b 4c 24 14	 mov	 ecx, DWORD PTR _sourceGap$[esp+36]
  00149	d3 e3		 shl	 ebx, cl

; 955  :         /*
; 956  :          * process the remaining bits:
; 957  :          */
; 958  :         buffer[bufferPos] |= b >> bufferRem;

  0014b	8b cd		 mov	 ecx, ebp
  0014d	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  00153	8b d3		 mov	 edx, ebx
  00155	d3 ea		 shr	 edx, cl
  00157	08 54 37 20	 or	 BYTE PTR [edi+esi+32], dl

; 959  :     } else {

  0015b	eb 02		 jmp	 SHORT $LN4@WHIRLPOOL_
$LN5@WHIRLPOOL_:

; 960  :         b = 0;

  0015d	33 db		 xor	 ebx, ebx
$LN4@WHIRLPOOL_:

; 961  :     }
; 962  :     if (bufferRem + sourceBits < 8) {

  0015f	8b 54 24 2c	 mov	 edx, DWORD PTR _sourceBits$[esp+32]
  00163	8d 0c 2a	 lea	 ecx, DWORD PTR [edx+ebp]
  00166	83 f9 08	 cmp	 ecx, 8
  00169	73 10		 jae	 SHORT $LN3@WHIRLPOOL_

; 990  :     }
; 991  :     structpointer->bufferBits   = bufferBits;
; 992  :     structpointer->bufferPos    = bufferPos;

  0016b	89 7e 64	 mov	 DWORD PTR [esi+100], edi
  0016e	5f		 pop	 edi
  0016f	03 c2		 add	 eax, edx
  00171	89 46 60	 mov	 DWORD PTR [esi+96], eax
  00174	5e		 pop	 esi
  00175	5d		 pop	 ebp
  00176	5b		 pop	 ebx

; 993  : }

  00177	83 c4 14	 add	 esp, 20			; 00000014H
  0017a	c3		 ret	 0
$LN3@WHIRLPOOL_:

; 963  :         /*
; 964  :          * all remaining data fits on buffer[bufferPos],
; 965  :          * and there still remains some space.
; 966  :          */
; 967  :         bufferBits += sourceBits;
; 968  :     } else {
; 969  :         /*
; 970  :          * buffer[bufferPos] is full:
; 971  :          */
; 972  :         bufferPos++;
; 973  :         bufferBits += 8 - bufferRem; /* bufferBits = 8*bufferPos; */

  0017b	ba 08 00 00 00	 mov	 edx, 8
  00180	2b d5		 sub	 edx, ebp
  00182	03 c2		 add	 eax, edx

; 974  :         sourceBits -= 8 - bufferRem;

  00184	83 c1 f8	 add	 ecx, -8			; fffffff8H
  00187	47		 inc	 edi
  00188	89 4c 24 2c	 mov	 DWORD PTR _sourceBits$[esp+32], ecx

; 975  :         /* now 0 <= sourceBits < 8;
; 976  :          * furthermore, all data (if any is left) is in source[sourcePos].
; 977  :          */
; 978  :         if (bufferBits == DIGESTBITS) {

  0018c	3d 00 02 00 00	 cmp	 eax, 512		; 00000200H
  00191	75 0d		 jne	 SHORT $LN24@WHIRLPOOL_

; 979  :             /*
; 980  :              * process data block:
; 981  :              */
; 982  :             processBuffer(structpointer);

  00193	56		 push	 esi
  00194	e8 00 00 00 00	 call	 _processBuffer
  00199	83 c4 04	 add	 esp, 4

; 983  :             /*
; 984  :              * reset buffer:
; 985  :              */
; 986  :             bufferBits = bufferPos = 0;

  0019c	33 ff		 xor	 edi, edi
  0019e	33 c0		 xor	 eax, eax
$LN24@WHIRLPOOL_:

; 987  :         }
; 988  :         buffer[bufferPos] = (u8) (b << (8 - bufferRem));

  001a0	b9 08 00 00 00	 mov	 ecx, 8
  001a5	2b cd		 sub	 ecx, ebp
  001a7	d2 e3		 shl	 bl, cl

; 989  :         bufferBits += (int)sourceBits;

  001a9	03 44 24 2c	 add	 eax, DWORD PTR _sourceBits$[esp+32]
  001ad	88 5c 37 20	 mov	 BYTE PTR [edi+esi+32], bl

; 990  :     }
; 991  :     structpointer->bufferBits   = bufferBits;
; 992  :     structpointer->bufferPos    = bufferPos;

  001b1	89 7e 64	 mov	 DWORD PTR [esi+100], edi
  001b4	5f		 pop	 edi
  001b5	89 46 60	 mov	 DWORD PTR [esi+96], eax
  001b8	5e		 pop	 esi
  001b9	5d		 pop	 ebp
  001ba	5b		 pop	 ebx

; 993  : }

  001bb	83 c4 14	 add	 esp, 20			; 00000014H
  001be	c3		 ret	 0
_WHIRLPOOL_add ENDP
_TEXT	ENDS
PUBLIC	_WHIRLPOOL_finalize
EXTRN	__aullshr:PROC
EXTRN	_memset:PROC
; Function compile flags: /Ogtpy
;	COMDAT _WHIRLPOOL_finalize
_TEXT	SEGMENT
_bufferBits$ = 8					; size = 4
_structpointer$ = 8					; size = 4
_result$ = 12						; size = 4
_WHIRLPOOL_finalize PROC				; COMDAT

; 1001 :                     unsigned char * const result) {

  00000	53		 push	 ebx

; 1002 :     int i;
; 1003 :     u8 *buffer      = structpointer->buffer;

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _structpointer$[esp]

; 1004 :     u8 *bitLength   = structpointer->bitLength;
; 1005 :     int bufferBits  = structpointer->bufferBits;

  00005	8b 4b 60	 mov	 ecx, DWORD PTR [ebx+96]
  00008	89 4c 24 08	 mov	 DWORD PTR _bufferBits$[esp], ecx

; 1006 :     int bufferPos   = structpointer->bufferPos;
; 1007 :     u8 *digest      = result;
; 1008 : 
; 1009 :     /*
; 1010 :      * append a '1'-bit:
; 1011 :      */
; 1012 :     buffer[bufferPos] |= 0x80U >> (bufferBits & 7);

  0000c	83 e1 07	 and	 ecx, 7
  0000f	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  00014	55		 push	 ebp
  00015	d3 e8		 shr	 eax, cl
  00017	56		 push	 esi
  00018	8b 73 64	 mov	 esi, DWORD PTR [ebx+100]

; 1013 :     bufferPos++; /* all remaining bits on the current u8 are set to zero. */

  0001b	46		 inc	 esi
  0001c	08 44 1e 1f	 or	 BYTE PTR [esi+ebx+31], al

; 1014 :     /*
; 1015 :      * pad with zero bits to complete (N*WBLOCKBITS - LENGTHBITS) bits:
; 1016 :      */
; 1017 :     if (bufferPos > WBLOCKBYTES - LENGTHBYTES) {

  00020	83 fe 20	 cmp	 esi, 32			; 00000020H
  00023	57		 push	 edi
  00024	7e 29		 jle	 SHORT $LN12@WHIRLPOOL_@2

; 1018 :         if (bufferPos < WBLOCKBYTES) {

  00026	83 fe 40	 cmp	 esi, 64			; 00000040H
  00029	7d 17		 jge	 SHORT $LN5@WHIRLPOOL_@2

; 1019 :             memset(&buffer[bufferPos], 0, WBLOCKBYTES - bufferPos);

  0002b	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00030	2b ce		 sub	 ecx, esi
  00032	51		 push	 ecx
  00033	8d 54 1e 20	 lea	 edx, DWORD PTR [esi+ebx+32]
  00037	6a 00		 push	 0
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 _memset
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@WHIRLPOOL_@2:

; 1020 :         }
; 1021 :         /*
; 1022 :          * process data block:
; 1023 :          */
; 1024 :         processBuffer(structpointer);

  00042	53		 push	 ebx
  00043	e8 00 00 00 00	 call	 _processBuffer
  00048	83 c4 04	 add	 esp, 4

; 1025 :         /*
; 1026 :          * reset buffer:
; 1027 :          */
; 1028 :         bufferPos = 0;

  0004b	33 f6		 xor	 esi, esi

; 1029 :     }
; 1030 :     if (bufferPos < WBLOCKBYTES - LENGTHBYTES) {

  0004d	eb 02		 jmp	 SHORT $LN11@WHIRLPOOL_@2
$LN12@WHIRLPOOL_@2:
  0004f	7d 17		 jge	 SHORT $LN4@WHIRLPOOL_@2
$LN11@WHIRLPOOL_@2:

; 1031 :         memset(&buffer[bufferPos], 0, (WBLOCKBYTES - LENGTHBYTES) - bufferPos);

  00051	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00056	2b c6		 sub	 eax, esi
  00058	50		 push	 eax
  00059	8d 4c 1e 20	 lea	 ecx, DWORD PTR [esi+ebx+32]
  0005d	6a 00		 push	 0
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 _memset
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@WHIRLPOOL_@2:

; 1032 :     }
; 1033 :     bufferPos = WBLOCKBYTES - LENGTHBYTES;
; 1034 :     /*
; 1035 :      * append bit length of hashed data:
; 1036 :      */
; 1037 :     memcpy(&buffer[WBLOCKBYTES - LENGTHBYTES], bitLength, LENGTHBYTES);

  00068	8d 7b 40	 lea	 edi, DWORD PTR [ebx+64]
  0006b	b9 08 00 00 00	 mov	 ecx, 8
  00070	8b f3		 mov	 esi, ebx

; 1038 :     /*
; 1039 :      * process data block:
; 1040 :      */
; 1041 :     processBuffer(structpointer);

  00072	53		 push	 ebx
  00073	f3 a5		 rep movsd
  00075	e8 00 00 00 00	 call	 _processBuffer
  0007a	8b 7c 24 1c	 mov	 edi, DWORD PTR _result$[esp+16]
  0007e	83 c4 04	 add	 esp, 4
  00081	83 c7 02	 add	 edi, 2
  00084	8d 73 68	 lea	 esi, DWORD PTR [ebx+104]
  00087	bd 08 00 00 00	 mov	 ebp, 8
  0008c	8d 64 24 00	 npad	 4
$LL3@WHIRLPOOL_@2:

; 1042 :     /*
; 1043 :      * return the completed message digest:
; 1044 :      */
; 1045 :     for (i = 0; i < DIGESTBYTES/8; i++) {
; 1046 :         digest[0] = (u8)(structpointer->hash[i] >> 56);

  00090	8a 56 07	 mov	 dl, BYTE PTR [esi+7]
  00093	88 57 fe	 mov	 BYTE PTR [edi-2], dl

; 1047 :         digest[1] = (u8)(structpointer->hash[i] >> 48);

  00096	8a 46 06	 mov	 al, BYTE PTR [esi+6]
  00099	88 47 ff	 mov	 BYTE PTR [edi-1], al

; 1048 :         digest[2] = (u8)(structpointer->hash[i] >> 40);

  0009c	8b 06		 mov	 eax, DWORD PTR [esi]
  0009e	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000a1	b1 28		 mov	 cl, 40			; 00000028H
  000a3	e8 00 00 00 00	 call	 __aullshr
  000a8	88 07		 mov	 BYTE PTR [edi], al

; 1049 :         digest[3] = (u8)(structpointer->hash[i] >> 32);

  000aa	8b 06		 mov	 eax, DWORD PTR [esi]
  000ac	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000af	b1 20		 mov	 cl, 32			; 00000020H
  000b1	e8 00 00 00 00	 call	 __aullshr
  000b6	88 47 01	 mov	 BYTE PTR [edi+1], al

; 1050 :         digest[4] = (u8)(structpointer->hash[i] >> 24);

  000b9	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000bb	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000be	0f ac d1 18	 shrd	 ecx, edx, 24
  000c2	88 4f 02	 mov	 BYTE PTR [edi+2], cl

; 1051 :         digest[5] = (u8)(structpointer->hash[i] >> 16);

  000c5	8b 06		 mov	 eax, DWORD PTR [esi]
  000c7	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ca	0f ac c8 10	 shrd	 eax, ecx, 16
  000ce	88 47 03	 mov	 BYTE PTR [edi+3], al

; 1052 :         digest[6] = (u8)(structpointer->hash[i] >>  8);

  000d1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000d4	c1 ea 18	 shr	 edx, 24			; 00000018H
  000d7	8b 16		 mov	 edx, DWORD PTR [esi]
  000d9	0f ac c2 08	 shrd	 edx, eax, 8
  000dd	c1 e9 10	 shr	 ecx, 16			; 00000010H
  000e0	88 57 04	 mov	 BYTE PTR [edi+4], dl

; 1053 :         digest[7] = (u8)(structpointer->hash[i]      );

  000e3	8a 0e		 mov	 cl, BYTE PTR [esi]
  000e5	88 4f 05	 mov	 BYTE PTR [edi+5], cl
  000e8	c1 e8 08	 shr	 eax, 8

; 1054 :         digest += 8;

  000eb	83 c7 08	 add	 edi, 8
  000ee	83 c6 08	 add	 esi, 8
  000f1	83 ed 01	 sub	 ebp, 1
  000f4	75 9a		 jne	 SHORT $LL3@WHIRLPOOL_@2

; 1055 :     }
; 1056 :     structpointer->bufferBits   = bufferBits;

  000f6	8b 54 24 14	 mov	 edx, DWORD PTR _bufferBits$[esp+12]
  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	5d		 pop	 ebp
  000fd	89 53 60	 mov	 DWORD PTR [ebx+96], edx

; 1057 :     structpointer->bufferPos    = bufferPos;

  00100	c7 43 64 20 00
	00 00		 mov	 DWORD PTR [ebx+100], 32	; 00000020H
  00107	5b		 pop	 ebx

; 1058 : }

  00108	c3		 ret	 0
_WHIRLPOOL_finalize ENDP
_TEXT	ENDS
END
