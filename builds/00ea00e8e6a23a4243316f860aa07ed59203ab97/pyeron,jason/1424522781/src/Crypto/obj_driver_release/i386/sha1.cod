; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	c:\home\public\desktop\projects\ciphershed.build\src\crypto\sha1.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_sha1_compile@4
; Function compile flags: /Ogsp
; File c:\home\public\desktop\projects\ciphershed.build\src\crypto\sha1.c
;	COMDAT _sha1_compile@4
_TEXT	SEGMENT
_v4$ = -16						; size = 4
_v0$ = -12						; size = 4
_v3$ = -8						; size = 4
_v2$ = -4						; size = 4
_v1$ = 8						; size = 4
_ctx$ = 8						; size = 4
_sha1_compile@4 PROC					; COMDAT

; 141  : {   sha1_32t    *w = ctx->wbuf;

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 10	 sub	 esp, 16			; 00000010H
  00008	8b 45 08	 mov	 eax, DWORD PTR _ctx$[ebp]

; 142  : 
; 143  : #ifdef ARRAY
; 144  :     sha1_32t    v[5];
; 145  :     memcpy(v, ctx->hash, 5 * sizeof(sha1_32t));
; 146  : #else
; 147  :     sha1_32t    v0, v1, v2, v3, v4;
; 148  :     v0 = ctx->hash[0]; v1 = ctx->hash[1];
; 149  :     v2 = ctx->hash[2]; v3 = ctx->hash[3];

  0000b	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0000e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	8b 78 14	 mov	 edi, DWORD PTR [eax+20]

; 150  :     v4 = ctx->hash[4];
; 151  : #endif
; 152  : 
; 153  : #define hf(i)   w[i]
; 154  : 
; 155  :     five_cycle(v, ch, 0x5a827999,  0);

  00017	33 fa		 xor	 edi, edx
  00019	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  0001c	23 fe		 and	 edi, esi
  0001e	33 78 14	 xor	 edi, DWORD PTR [eax+20]
  00021	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00024	8b d9		 mov	 ebx, ecx
  00026	c1 cb 1b	 ror	 ebx, 27			; 0000001bH
  00029	03 df		 add	 ebx, edi
  0002b	03 58 18	 add	 ebx, DWORD PTR [eax+24]
  0002e	c1 ce 02	 ror	 esi, 2
  00031	89 75 08	 mov	 DWORD PTR _v1$[ebp], esi
  00034	8d 94 13 99 79
	82 5a		 lea	 edx, DWORD PTR [ebx+edx+1518500249]
  0003b	8b 58 10	 mov	 ebx, DWORD PTR [eax+16]
  0003e	33 de		 xor	 ebx, esi
  00040	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00043	23 d9		 and	 ebx, ecx
  00045	33 58 10	 xor	 ebx, DWORD PTR [eax+16]
  00048	8b fa		 mov	 edi, edx
  0004a	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  0004d	03 fb		 add	 edi, ebx
  0004f	03 78 20	 add	 edi, DWORD PTR [eax+32]
  00052	c1 c9 02	 ror	 ecx, 2
  00055	8d b4 3e 99 79
	82 5a		 lea	 esi, DWORD PTR [esi+edi+1518500249]
  0005c	8b 7d 08	 mov	 edi, DWORD PTR _v1$[ebp]
  0005f	33 f9		 xor	 edi, ecx
  00061	23 fa		 and	 edi, edx
  00063	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  00066	89 75 f8	 mov	 DWORD PTR _v3$[ebp], esi
  00069	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  0006c	03 70 24	 add	 esi, DWORD PTR [eax+36]
  0006f	03 fe		 add	 edi, esi
  00071	8b 70 10	 mov	 esi, DWORD PTR [eax+16]
  00074	8d b4 3e 99 79
	82 5a		 lea	 esi, DWORD PTR [esi+edi+1518500249]
  0007b	c1 ca 02	 ror	 edx, 2
  0007e	89 75 fc	 mov	 DWORD PTR _v2$[ebp], esi
  00081	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00084	8b fa		 mov	 edi, edx
  00086	33 f9		 xor	 edi, ecx
  00088	23 7d f8	 and	 edi, DWORD PTR _v3$[ebp]
  0008b	33 f9		 xor	 edi, ecx
  0008d	03 f7		 add	 esi, edi
  0008f	03 70 28	 add	 esi, DWORD PTR [eax+40]
  00092	c1 4d f8 02	 ror	 DWORD PTR _v3$[ebp], 2
  00096	8b 7d 08	 mov	 edi, DWORD PTR _v1$[ebp]
  00099	8d b4 37 99 79
	82 5a		 lea	 esi, DWORD PTR [edi+esi+1518500249]
  000a0	89 75 08	 mov	 DWORD PTR _v1$[ebp], esi
  000a3	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  000a6	8b fa		 mov	 edi, edx
  000a8	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  000ab	23 7d fc	 and	 edi, DWORD PTR _v2$[ebp]
  000ae	33 fa		 xor	 edi, edx
  000b0	03 f7		 add	 esi, edi
  000b2	03 70 2c	 add	 esi, DWORD PTR [eax+44]
  000b5	c1 4d fc 02	 ror	 DWORD PTR _v2$[ebp], 2

; 156  :     five_cycle(v, ch, 0x5a827999,  5);

  000b9	8b 7d f8	 mov	 edi, DWORD PTR _v3$[ebp]
  000bc	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  000bf	8d 8c 31 99 79
	82 5a		 lea	 ecx, DWORD PTR [ecx+esi+1518500249]
  000c6	23 7d 08	 and	 edi, DWORD PTR _v1$[ebp]
  000c9	8b f1		 mov	 esi, ecx
  000cb	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  000ce	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  000d1	03 f7		 add	 esi, edi
  000d3	03 70 30	 add	 esi, DWORD PTR [eax+48]
  000d6	c1 4d 08 02	 ror	 DWORD PTR _v1$[ebp], 2
  000da	8b 7d fc	 mov	 edi, DWORD PTR _v2$[ebp]
  000dd	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  000e0	8d 94 32 99 79
	82 5a		 lea	 edx, DWORD PTR [edx+esi+1518500249]
  000e7	23 f9		 and	 edi, ecx
  000e9	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  000ec	8b f2		 mov	 esi, edx
  000ee	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  000f1	03 f7		 add	 esi, edi
  000f3	03 70 34	 add	 esi, DWORD PTR [eax+52]
  000f6	8b 7d f8	 mov	 edi, DWORD PTR _v3$[ebp]
  000f9	8d b4 37 99 79
	82 5a		 lea	 esi, DWORD PTR [edi+esi+1518500249]
  00100	8b 7d 08	 mov	 edi, DWORD PTR _v1$[ebp]
  00103	c1 c9 02	 ror	 ecx, 2
  00106	33 f9		 xor	 edi, ecx
  00108	23 fa		 and	 edi, edx
  0010a	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  0010d	89 75 f8	 mov	 DWORD PTR _v3$[ebp], esi
  00110	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00113	03 f7		 add	 esi, edi
  00115	03 70 38	 add	 esi, DWORD PTR [eax+56]
  00118	8b 7d fc	 mov	 edi, DWORD PTR _v2$[ebp]
  0011b	8d b4 37 99 79
	82 5a		 lea	 esi, DWORD PTR [edi+esi+1518500249]
  00122	c1 ca 02	 ror	 edx, 2
  00125	8b fa		 mov	 edi, edx
  00127	33 f9		 xor	 edi, ecx
  00129	23 7d f8	 and	 edi, DWORD PTR _v3$[ebp]
  0012c	89 75 fc	 mov	 DWORD PTR _v2$[ebp], esi
  0012f	33 f9		 xor	 edi, ecx
  00131	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00134	03 70 3c	 add	 esi, DWORD PTR [eax+60]
  00137	03 fe		 add	 edi, esi
  00139	c1 4d f8 02	 ror	 DWORD PTR _v3$[ebp], 2
  0013d	8b 75 08	 mov	 esi, DWORD PTR _v1$[ebp]
  00140	8d b4 3e 99 79
	82 5a		 lea	 esi, DWORD PTR [esi+edi+1518500249]
  00147	8b fa		 mov	 edi, edx
  00149	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  0014c	89 75 08	 mov	 DWORD PTR _v1$[ebp], esi
  0014f	23 7d fc	 and	 edi, DWORD PTR _v2$[ebp]
  00152	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00155	33 fa		 xor	 edi, edx
  00157	03 f7		 add	 esi, edi
  00159	03 70 40	 add	 esi, DWORD PTR [eax+64]
  0015c	c1 4d fc 02	 ror	 DWORD PTR _v2$[ebp], 2

; 157  :     five_cycle(v, ch, 0x5a827999, 10);

  00160	8b 7d f8	 mov	 edi, DWORD PTR _v3$[ebp]
  00163	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  00166	8d b4 31 99 79
	82 5a		 lea	 esi, DWORD PTR [ecx+esi+1518500249]
  0016d	23 7d 08	 and	 edi, DWORD PTR _v1$[ebp]
  00170	8b ce		 mov	 ecx, esi
  00172	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  00175	c1 c9 1b	 ror	 ecx, 27			; 0000001bH
  00178	03 cf		 add	 ecx, edi
  0017a	03 48 44	 add	 ecx, DWORD PTR [eax+68]
  0017d	c1 4d 08 02	 ror	 DWORD PTR _v1$[ebp], 2
  00181	8b 7d fc	 mov	 edi, DWORD PTR _v2$[ebp]
  00184	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  00187	8b 5d 08	 mov	 ebx, DWORD PTR _v1$[ebp]
  0018a	8d 94 0a 99 79
	82 5a		 lea	 edx, DWORD PTR [edx+ecx+1518500249]
  00191	23 fe		 and	 edi, esi
  00193	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  00196	8b ca		 mov	 ecx, edx
  00198	c1 c9 1b	 ror	 ecx, 27			; 0000001bH
  0019b	03 cf		 add	 ecx, edi
  0019d	03 48 48	 add	 ecx, DWORD PTR [eax+72]
  001a0	8b 7d f8	 mov	 edi, DWORD PTR _v3$[ebp]
  001a3	c1 ce 02	 ror	 esi, 2
  001a6	33 de		 xor	 ebx, esi
  001a8	23 da		 and	 ebx, edx
  001aa	33 5d 08	 xor	 ebx, DWORD PTR _v1$[ebp]
  001ad	8d bc 0f 99 79
	82 5a		 lea	 edi, DWORD PTR [edi+ecx+1518500249]
  001b4	8b cf		 mov	 ecx, edi
  001b6	c1 c9 1b	 ror	 ecx, 27			; 0000001bH
  001b9	03 cb		 add	 ecx, ebx
  001bb	03 48 4c	 add	 ecx, DWORD PTR [eax+76]
  001be	8b 5d fc	 mov	 ebx, DWORD PTR _v2$[ebp]
  001c1	c1 ca 02	 ror	 edx, 2
  001c4	89 55 f0	 mov	 DWORD PTR _v4$[ebp], edx
  001c7	8d 9c 0b 99 79
	82 5a		 lea	 ebx, DWORD PTR [ebx+ecx+1518500249]
  001ce	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  001d1	33 d6		 xor	 edx, esi
  001d3	23 d7		 and	 edx, edi
  001d5	89 5d fc	 mov	 DWORD PTR _v2$[ebp], ebx
  001d8	c1 cb 1b	 ror	 ebx, 27			; 0000001bH
  001db	33 d6		 xor	 edx, esi
  001dd	03 d9		 add	 ebx, ecx
  001df	03 d3		 add	 edx, ebx
  001e1	8b 5d 08	 mov	 ebx, DWORD PTR _v1$[ebp]
  001e4	8d 94 13 99 79
	82 5a		 lea	 edx, DWORD PTR [ebx+edx+1518500249]
  001eb	c1 cf 02	 ror	 edi, 2
  001ee	89 55 08	 mov	 DWORD PTR _v1$[ebp], edx
  001f1	89 7d f8	 mov	 DWORD PTR _v3$[ebp], edi
  001f4	c1 ca 1b	 ror	 edx, 27			; 0000001bH

; 158  :     one_cycle(v,0,1,2,3,4, ch, 0x5a827999, hf(15)); \
; 159  : 
; 160  : #undef  hf
; 161  : #define hf(i) (w[(i) & 15] = rotl32(                    \
; 162  :                  w[((i) + 13) & 15] ^ w[((i) + 8) & 15] \
; 163  :                ^ w[((i) +  2) & 15] ^ w[(i) & 15], 1))
; 164  : 
; 165  :     one_cycle(v,4,0,1,2,3, ch, 0x5a827999, hf(16));

  001f7	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  001fa	8b 5d f0	 mov	 ebx, DWORD PTR _v4$[ebp]
  001fd	33 df		 xor	 ebx, edi
  001ff	23 5d fc	 and	 ebx, DWORD PTR _v2$[ebp]
  00202	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  00205	33 5d f0	 xor	 ebx, DWORD PTR _v4$[ebp]
  00208	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  0020b	03 d3		 add	 edx, ebx
  0020d	03 50 54	 add	 edx, DWORD PTR [eax+84]
  00210	c1 4d fc 02	 ror	 DWORD PTR _v2$[ebp], 2
  00214	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  00217	8b 5d fc	 mov	 ebx, DWORD PTR _v2$[ebp]
  0021a	23 7d 08	 and	 edi, DWORD PTR _v1$[ebp]
  0021d	8d b4 16 99 79
	82 5a		 lea	 esi, DWORD PTR [esi+edx+1518500249]
  00224	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  00227	8b d6		 mov	 edx, esi
  00229	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  0022c	03 d7		 add	 edx, edi
  0022e	03 50 58	 add	 edx, DWORD PTR [eax+88]
  00231	c1 4d 08 02	 ror	 DWORD PTR _v1$[ebp], 2
  00235	33 5d 08	 xor	 ebx, DWORD PTR _v1$[ebp]
  00238	8b 7d f0	 mov	 edi, DWORD PTR _v4$[ebp]
  0023b	d1 c1		 rol	 ecx, 1
  0023d	8d 94 17 99 79
	82 5a		 lea	 edx, DWORD PTR [edi+edx+1518500249]
  00244	23 de		 and	 ebx, esi
  00246	33 5d fc	 xor	 ebx, DWORD PTR _v2$[ebp]
  00249	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  0024c	8b fa		 mov	 edi, edx
  0024e	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  00251	03 f9		 add	 edi, ecx
  00253	8b 4d f8	 mov	 ecx, DWORD PTR _v3$[ebp]
  00256	03 df		 add	 ebx, edi
  00258	8d bc 19 99 79
	82 5a		 lea	 edi, DWORD PTR [ecx+ebx+1518500249]

; 166  :     one_cycle(v,3,4,0,1,2, ch, 0x5a827999, hf(17));

  0025f	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00262	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  00265	8b 5d 08	 mov	 ebx, DWORD PTR _v1$[ebp]
  00268	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  0026b	c1 ce 02	 ror	 esi, 2
  0026e	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  00271	89 7d f8	 mov	 DWORD PTR _v3$[ebp], edi
  00274	d1 c1		 rol	 ecx, 1
  00276	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  00279	03 f9		 add	 edi, ecx
  0027b	33 de		 xor	 ebx, esi
  0027d	23 da		 and	 ebx, edx
  0027f	33 5d 08	 xor	 ebx, DWORD PTR _v1$[ebp]
  00282	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  00285	8b 4d fc	 mov	 ecx, DWORD PTR _v2$[ebp]
  00288	03 df		 add	 ebx, edi
  0028a	89 55 f0	 mov	 DWORD PTR _v4$[ebp], edx
  0028d	c1 4d f0 02	 ror	 DWORD PTR _v4$[ebp], 2

; 167  :     one_cycle(v,2,3,4,0,1, ch, 0x5a827999, hf(18));

  00291	8b 7d f0	 mov	 edi, DWORD PTR _v4$[ebp]
  00294	8d 94 19 99 79
	82 5a		 lea	 edx, DWORD PTR [ecx+ebx+1518500249]
  0029b	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  0029e	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  002a1	33 fe		 xor	 edi, esi
  002a3	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  002a6	23 7d f8	 and	 edi, DWORD PTR _v3$[ebp]
  002a9	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  002ac	89 55 fc	 mov	 DWORD PTR _v2$[ebp], edx
  002af	d1 c1		 rol	 ecx, 1
  002b1	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  002b4	03 d1		 add	 edx, ecx
  002b6	33 fe		 xor	 edi, esi
  002b8	03 fa		 add	 edi, edx
  002ba	c1 4d f8 02	 ror	 DWORD PTR _v3$[ebp], 2
  002be	89 48 24	 mov	 DWORD PTR [eax+36], ecx
  002c1	8b 4d 08	 mov	 ecx, DWORD PTR _v1$[ebp]
  002c4	8d 94 39 99 79
	82 5a		 lea	 edx, DWORD PTR [ecx+edi+1518500249]

; 168  :     one_cycle(v,1,2,3,4,0, ch, 0x5a827999, hf(19));

  002cb	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  002ce	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  002d1	8b 7d f0	 mov	 edi, DWORD PTR _v4$[ebp]
  002d4	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  002d7	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  002da	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  002dd	23 7d fc	 and	 edi, DWORD PTR _v2$[ebp]
  002e0	d1 c1		 rol	 ecx, 1
  002e2	89 55 08	 mov	 DWORD PTR _v1$[ebp], edx
  002e5	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  002e8	33 7d f0	 xor	 edi, DWORD PTR _v4$[ebp]
  002eb	89 48 28	 mov	 DWORD PTR [eax+40], ecx
  002ee	03 d1		 add	 edx, ecx
  002f0	03 fa		 add	 edi, edx
  002f2	c1 4d fc 02	 ror	 DWORD PTR _v2$[ebp], 2

; 169  : 
; 170  :     five_cycle(v, parity, 0x6ed9eba1,  20);

  002f6	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  002f9	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  002fc	8d b4 3e 99 79
	82 5a		 lea	 esi, DWORD PTR [esi+edi+1518500249]
  00303	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  00306	8b 7d f8	 mov	 edi, DWORD PTR _v3$[ebp]
  00309	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  0030c	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  0030f	d1 c1		 rol	 ecx, 1
  00311	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  00314	89 48 2c	 mov	 DWORD PTR [eax+44], ecx
  00317	8b d6		 mov	 edx, esi
  00319	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  0031c	03 d1		 add	 edx, ecx
  0031e	03 fa		 add	 edi, edx
  00320	8b 4d f0	 mov	 ecx, DWORD PTR _v4$[ebp]
  00323	8d 94 39 a1 eb
	d9 6e		 lea	 edx, DWORD PTR [ecx+edi+1859775393]
  0032a	c1 4d 08 02	 ror	 DWORD PTR _v1$[ebp], 2
  0032e	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00331	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  00334	8b 7d fc	 mov	 edi, DWORD PTR _v2$[ebp]
  00337	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  0033a	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  0033d	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  00340	33 fe		 xor	 edi, esi
  00342	d1 c1		 rol	 ecx, 1
  00344	89 48 30	 mov	 DWORD PTR [eax+48], ecx
  00347	89 55 f0	 mov	 DWORD PTR _v4$[ebp], edx
  0034a	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  0034d	03 d1		 add	 edx, ecx
  0034f	8b 4d f8	 mov	 ecx, DWORD PTR _v3$[ebp]
  00352	03 fa		 add	 edi, edx
  00354	8d 94 39 a1 eb
	d9 6e		 lea	 edx, DWORD PTR [ecx+edi+1859775393]
  0035b	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0035e	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  00361	8b 7d f0	 mov	 edi, DWORD PTR _v4$[ebp]
  00364	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00367	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  0036a	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  0036d	c1 ce 02	 ror	 esi, 2
  00370	d1 c1		 rol	 ecx, 1
  00372	33 fe		 xor	 edi, esi
  00374	89 55 f8	 mov	 DWORD PTR _v3$[ebp], edx
  00377	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  0037a	03 d1		 add	 edx, ecx
  0037c	03 fa		 add	 edi, edx
  0037e	c1 4d f0 02	 ror	 DWORD PTR _v4$[ebp], 2
  00382	89 48 34	 mov	 DWORD PTR [eax+52], ecx
  00385	8b 4d fc	 mov	 ecx, DWORD PTR _v2$[ebp]
  00388	8d 94 39 a1 eb
	d9 6e		 lea	 edx, DWORD PTR [ecx+edi+1859775393]
  0038f	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00392	33 48 40	 xor	 ecx, DWORD PTR [eax+64]
  00395	8b 7d f0	 mov	 edi, DWORD PTR _v4$[ebp]
  00398	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  0039b	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  0039e	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  003a1	89 55 fc	 mov	 DWORD PTR _v2$[ebp], edx
  003a4	d1 c1		 rol	 ecx, 1
  003a6	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  003a9	03 d1		 add	 edx, ecx
  003ab	33 fe		 xor	 edi, esi
  003ad	03 fa		 add	 edi, edx
  003af	c1 4d f8 02	 ror	 DWORD PTR _v3$[ebp], 2
  003b3	89 48 38	 mov	 DWORD PTR [eax+56], ecx
  003b6	8b 4d 08	 mov	 ecx, DWORD PTR _v1$[ebp]
  003b9	8d 94 39 a1 eb
	d9 6e		 lea	 edx, DWORD PTR [ecx+edi+1859775393]
  003c0	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  003c3	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  003c6	8b 7d f0	 mov	 edi, DWORD PTR _v4$[ebp]
  003c9	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  003cc	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  003cf	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  003d2	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  003d5	d1 c1		 rol	 ecx, 1
  003d7	89 55 08	 mov	 DWORD PTR _v1$[ebp], edx
  003da	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  003dd	03 d1		 add	 edx, ecx
  003df	89 48 3c	 mov	 DWORD PTR [eax+60], ecx
  003e2	03 fa		 add	 edi, edx
  003e4	c1 4d fc 02	 ror	 DWORD PTR _v2$[ebp], 2

; 171  :     five_cycle(v, parity, 0x6ed9eba1,  25);

  003e8	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  003eb	33 48 40	 xor	 ecx, DWORD PTR [eax+64]
  003ee	8d b4 3e a1 eb
	d9 6e		 lea	 esi, DWORD PTR [esi+edi+1859775393]
  003f5	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  003f8	8b 7d f8	 mov	 edi, DWORD PTR _v3$[ebp]
  003fb	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  003fe	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  00401	d1 c1		 rol	 ecx, 1
  00403	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  00406	89 48 40	 mov	 DWORD PTR [eax+64], ecx
  00409	8b d6		 mov	 edx, esi
  0040b	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  0040e	03 d1		 add	 edx, ecx
  00410	03 fa		 add	 edi, edx
  00412	8b 4d f0	 mov	 ecx, DWORD PTR _v4$[ebp]
  00415	8d 94 39 a1 eb
	d9 6e		 lea	 edx, DWORD PTR [ecx+edi+1859775393]
  0041c	c1 4d 08 02	 ror	 DWORD PTR _v1$[ebp], 2
  00420	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00423	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  00426	8b 7d fc	 mov	 edi, DWORD PTR _v2$[ebp]
  00429	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  0042c	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  0042f	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  00432	33 fe		 xor	 edi, esi
  00434	d1 c1		 rol	 ecx, 1
  00436	89 48 44	 mov	 DWORD PTR [eax+68], ecx
  00439	89 55 f0	 mov	 DWORD PTR _v4$[ebp], edx
  0043c	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  0043f	03 d1		 add	 edx, ecx
  00441	8b 4d f8	 mov	 ecx, DWORD PTR _v3$[ebp]
  00444	03 fa		 add	 edi, edx
  00446	8d 94 39 a1 eb
	d9 6e		 lea	 edx, DWORD PTR [ecx+edi+1859775393]
  0044d	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00450	33 48 48	 xor	 ecx, DWORD PTR [eax+72]
  00453	8b 7d f0	 mov	 edi, DWORD PTR _v4$[ebp]
  00456	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  00459	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  0045c	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  0045f	c1 ce 02	 ror	 esi, 2
  00462	d1 c1		 rol	 ecx, 1
  00464	33 fe		 xor	 edi, esi
  00466	89 55 f8	 mov	 DWORD PTR _v3$[ebp], edx
  00469	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  0046c	03 d1		 add	 edx, ecx
  0046e	03 fa		 add	 edi, edx
  00470	c1 4d f0 02	 ror	 DWORD PTR _v4$[ebp], 2
  00474	89 48 48	 mov	 DWORD PTR [eax+72], ecx
  00477	8b 4d fc	 mov	 ecx, DWORD PTR _v2$[ebp]
  0047a	8d 94 39 a1 eb
	d9 6e		 lea	 edx, DWORD PTR [ecx+edi+1859775393]
  00481	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00484	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  00487	8b 7d f0	 mov	 edi, DWORD PTR _v4$[ebp]
  0048a	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  0048d	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  00490	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  00493	89 55 fc	 mov	 DWORD PTR _v2$[ebp], edx
  00496	d1 c1		 rol	 ecx, 1
  00498	33 fe		 xor	 edi, esi
  0049a	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  0049d	03 d1		 add	 edx, ecx
  0049f	03 fa		 add	 edi, edx
  004a1	c1 4d f8 02	 ror	 DWORD PTR _v3$[ebp], 2
  004a5	89 48 4c	 mov	 DWORD PTR [eax+76], ecx
  004a8	8b 4d 08	 mov	 ecx, DWORD PTR _v1$[ebp]
  004ab	8d 94 39 a1 eb
	d9 6e		 lea	 edx, DWORD PTR [ecx+edi+1859775393]
  004b2	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  004b5	33 48 50	 xor	 ecx, DWORD PTR [eax+80]
  004b8	8b 7d f0	 mov	 edi, DWORD PTR _v4$[ebp]
  004bb	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  004be	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  004c1	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  004c4	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  004c7	d1 c1		 rol	 ecx, 1
  004c9	89 55 08	 mov	 DWORD PTR _v1$[ebp], edx
  004cc	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  004cf	03 d1		 add	 edx, ecx
  004d1	03 fa		 add	 edi, edx
  004d3	c1 4d fc 02	 ror	 DWORD PTR _v2$[ebp], 2
  004d7	89 48 50	 mov	 DWORD PTR [eax+80], ecx
  004da	8d b4 3e a1 eb
	d9 6e		 lea	 esi, DWORD PTR [esi+edi+1859775393]

; 172  :     five_cycle(v, parity, 0x6ed9eba1,  30);

  004e1	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  004e4	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  004e7	8b 7d f8	 mov	 edi, DWORD PTR _v3$[ebp]
  004ea	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  004ed	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  004f0	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  004f3	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  004f6	d1 c1		 rol	 ecx, 1
  004f8	89 48 54	 mov	 DWORD PTR [eax+84], ecx
  004fb	8b d6		 mov	 edx, esi
  004fd	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  00500	03 d1		 add	 edx, ecx
  00502	03 fa		 add	 edi, edx
  00504	c1 4d 08 02	 ror	 DWORD PTR _v1$[ebp], 2
  00508	8b 4d f0	 mov	 ecx, DWORD PTR _v4$[ebp]
  0050b	8d 94 39 a1 eb
	d9 6e		 lea	 edx, DWORD PTR [ecx+edi+1859775393]
  00512	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00515	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  00518	8b 7d fc	 mov	 edi, DWORD PTR _v2$[ebp]
  0051b	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  0051e	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  00521	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  00524	33 fe		 xor	 edi, esi
  00526	d1 c1		 rol	 ecx, 1
  00528	89 48 58	 mov	 DWORD PTR [eax+88], ecx
  0052b	89 55 f0	 mov	 DWORD PTR _v4$[ebp], edx
  0052e	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  00531	03 d1		 add	 edx, ecx
  00533	8b 4d f8	 mov	 ecx, DWORD PTR _v3$[ebp]
  00536	03 fa		 add	 edi, edx
  00538	8d 94 39 a1 eb
	d9 6e		 lea	 edx, DWORD PTR [ecx+edi+1859775393]
  0053f	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00542	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  00545	8b 7d f0	 mov	 edi, DWORD PTR _v4$[ebp]
  00548	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  0054b	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  0054e	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  00551	c1 ce 02	 ror	 esi, 2
  00554	d1 c1		 rol	 ecx, 1
  00556	33 fe		 xor	 edi, esi
  00558	89 55 f8	 mov	 DWORD PTR _v3$[ebp], edx
  0055b	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  0055e	03 d1		 add	 edx, ecx
  00560	03 fa		 add	 edi, edx
  00562	c1 4d f0 02	 ror	 DWORD PTR _v4$[ebp], 2
  00566	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  00569	8b 4d fc	 mov	 ecx, DWORD PTR _v2$[ebp]
  0056c	8d 94 39 a1 eb
	d9 6e		 lea	 edx, DWORD PTR [ecx+edi+1859775393]
  00573	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00576	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  00579	8b 7d f0	 mov	 edi, DWORD PTR _v4$[ebp]
  0057c	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  0057f	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  00582	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  00585	33 fe		 xor	 edi, esi
  00587	d1 c1		 rol	 ecx, 1
  00589	89 55 fc	 mov	 DWORD PTR _v2$[ebp], edx
  0058c	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  0058f	03 d1		 add	 edx, ecx
  00591	03 fa		 add	 edi, edx
  00593	c1 4d f8 02	 ror	 DWORD PTR _v3$[ebp], 2
  00597	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  0059a	8b 4d 08	 mov	 ecx, DWORD PTR _v1$[ebp]
  0059d	8d 94 39 a1 eb
	d9 6e		 lea	 edx, DWORD PTR [ecx+edi+1859775393]
  005a4	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  005a7	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  005aa	8b 7d f0	 mov	 edi, DWORD PTR _v4$[ebp]
  005ad	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  005b0	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  005b3	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  005b6	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  005b9	d1 c1		 rol	 ecx, 1
  005bb	89 55 08	 mov	 DWORD PTR _v1$[ebp], edx
  005be	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  005c1	03 d1		 add	 edx, ecx
  005c3	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 173  :     five_cycle(v, parity, 0x6ed9eba1,  35);

  005c6	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  005c9	03 fa		 add	 edi, edx
  005cb	c1 4d fc 02	 ror	 DWORD PTR _v2$[ebp], 2
  005cf	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  005d2	8d b4 3e a1 eb
	d9 6e		 lea	 esi, DWORD PTR [esi+edi+1859775393]
  005d9	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  005dc	8b 7d f8	 mov	 edi, DWORD PTR _v3$[ebp]
  005df	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  005e2	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  005e5	d1 c1		 rol	 ecx, 1
  005e7	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  005ea	89 48 28	 mov	 DWORD PTR [eax+40], ecx
  005ed	8b d6		 mov	 edx, esi
  005ef	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  005f2	03 d1		 add	 edx, ecx
  005f4	03 fa		 add	 edi, edx
  005f6	c1 4d 08 02	 ror	 DWORD PTR _v1$[ebp], 2
  005fa	8b 4d f0	 mov	 ecx, DWORD PTR _v4$[ebp]
  005fd	8d 94 39 a1 eb
	d9 6e		 lea	 edx, DWORD PTR [ecx+edi+1859775393]
  00604	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00607	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  0060a	8b 7d fc	 mov	 edi, DWORD PTR _v2$[ebp]
  0060d	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  00610	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  00613	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  00616	33 fe		 xor	 edi, esi
  00618	d1 c1		 rol	 ecx, 1
  0061a	89 48 2c	 mov	 DWORD PTR [eax+44], ecx
  0061d	89 55 f0	 mov	 DWORD PTR _v4$[ebp], edx
  00620	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  00623	03 d1		 add	 edx, ecx
  00625	8b 4d f8	 mov	 ecx, DWORD PTR _v3$[ebp]
  00628	03 fa		 add	 edi, edx
  0062a	8d 94 39 a1 eb
	d9 6e		 lea	 edx, DWORD PTR [ecx+edi+1859775393]
  00631	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00634	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  00637	8b 7d f0	 mov	 edi, DWORD PTR _v4$[ebp]
  0063a	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  0063d	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  00640	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  00643	c1 ce 02	 ror	 esi, 2
  00646	d1 c1		 rol	 ecx, 1
  00648	33 fe		 xor	 edi, esi
  0064a	89 48 30	 mov	 DWORD PTR [eax+48], ecx
  0064d	89 55 f8	 mov	 DWORD PTR _v3$[ebp], edx
  00650	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  00653	03 d1		 add	 edx, ecx
  00655	8b 4d fc	 mov	 ecx, DWORD PTR _v2$[ebp]
  00658	03 fa		 add	 edi, edx
  0065a	c1 4d f0 02	 ror	 DWORD PTR _v4$[ebp], 2
  0065e	8d 94 39 a1 eb
	d9 6e		 lea	 edx, DWORD PTR [ecx+edi+1859775393]
  00665	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00668	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  0066b	8b 7d f0	 mov	 edi, DWORD PTR _v4$[ebp]
  0066e	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00671	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  00674	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  00677	33 fe		 xor	 edi, esi
  00679	d1 c1		 rol	 ecx, 1
  0067b	89 55 fc	 mov	 DWORD PTR _v2$[ebp], edx
  0067e	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  00681	03 d1		 add	 edx, ecx
  00683	03 fa		 add	 edi, edx
  00685	c1 4d f8 02	 ror	 DWORD PTR _v3$[ebp], 2
  00689	89 48 34	 mov	 DWORD PTR [eax+52], ecx
  0068c	8b 4d 08	 mov	 ecx, DWORD PTR _v1$[ebp]
  0068f	8d 94 39 a1 eb
	d9 6e		 lea	 edx, DWORD PTR [ecx+edi+1859775393]
  00696	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00699	33 48 40	 xor	 ecx, DWORD PTR [eax+64]
  0069c	8b 7d f0	 mov	 edi, DWORD PTR _v4$[ebp]
  0069f	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  006a2	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  006a5	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  006a8	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  006ab	d1 c1		 rol	 ecx, 1
  006ad	89 55 08	 mov	 DWORD PTR _v1$[ebp], edx
  006b0	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  006b3	03 d1		 add	 edx, ecx
  006b5	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 174  : 
; 175  :     five_cycle(v, maj, 0x8f1bbcdc,  40);

  006b8	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  006bb	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  006be	03 fa		 add	 edi, edx
  006c0	c1 4d fc 02	 ror	 DWORD PTR _v2$[ebp], 2
  006c4	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  006c7	8d b4 3e a1 eb
	d9 6e		 lea	 esi, DWORD PTR [esi+edi+1859775393]
  006ce	89 75 f4	 mov	 DWORD PTR _v0$[ebp], esi
  006d1	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  006d4	8b 7d fc	 mov	 edi, DWORD PTR _v2$[ebp]
  006d7	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  006da	8b 5d fc	 mov	 ebx, DWORD PTR _v2$[ebp]
  006dd	23 7d f8	 and	 edi, DWORD PTR _v3$[ebp]
  006e0	23 5d 08	 and	 ebx, DWORD PTR _v1$[ebp]
  006e3	d1 c1		 rol	 ecx, 1
  006e5	0b fb		 or	 edi, ebx
  006e7	03 f9		 add	 edi, ecx
  006e9	03 7d f0	 add	 edi, DWORD PTR _v4$[ebp]
  006ec	89 48 3c	 mov	 DWORD PTR [eax+60], ecx
  006ef	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  006f2	33 48 40	 xor	 ecx, DWORD PTR [eax+64]
  006f5	8b d6		 mov	 edx, esi
  006f7	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  006fa	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  006fd	c1 4d 08 02	 ror	 DWORD PTR _v1$[ebp], 2
  00701	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  00704	8b 5d 08	 mov	 ebx, DWORD PTR _v1$[ebp]
  00707	33 de		 xor	 ebx, esi
  00709	23 5d fc	 and	 ebx, DWORD PTR _v2$[ebp]
  0070c	8b 75 08	 mov	 esi, DWORD PTR _v1$[ebp]
  0070f	23 75 f4	 and	 esi, DWORD PTR _v0$[ebp]
  00712	d1 c1		 rol	 ecx, 1
  00714	0b de		 or	 ebx, esi
  00716	03 d9		 add	 ebx, ecx
  00718	03 5d f8	 add	 ebx, DWORD PTR _v3$[ebp]
  0071b	8d 94 17 dc bc
	1b 8f		 lea	 edx, DWORD PTR [edi+edx-1894007588]
  00722	89 48 40	 mov	 DWORD PTR [eax+64], ecx
  00725	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00728	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  0072b	8b fa		 mov	 edi, edx
  0072d	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  00730	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  00733	c1 4d f4 02	 ror	 DWORD PTR _v0$[ebp], 2
  00737	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  0073a	8d b4 3b dc bc
	1b 8f		 lea	 esi, DWORD PTR [ebx+edi-1894007588]
  00741	d1 c1		 rol	 ecx, 1
  00743	8b fa		 mov	 edi, edx
  00745	33 7d f4	 xor	 edi, DWORD PTR _v0$[ebp]
  00748	8b da		 mov	 ebx, edx
  0074a	23 7d 08	 and	 edi, DWORD PTR _v1$[ebp]
  0074d	23 5d f4	 and	 ebx, DWORD PTR _v0$[ebp]
  00750	89 48 44	 mov	 DWORD PTR [eax+68], ecx
  00753	0b fb		 or	 edi, ebx
  00755	03 f9		 add	 edi, ecx
  00757	03 7d fc	 add	 edi, DWORD PTR _v2$[ebp]
  0075a	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0075d	33 48 48	 xor	 ecx, DWORD PTR [eax+72]
  00760	89 75 f8	 mov	 DWORD PTR _v3$[ebp], esi
  00763	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  00766	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00769	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  0076c	8d b4 37 dc bc
	1b 8f		 lea	 esi, DWORD PTR [edi+esi-1894007588]
  00773	c1 ca 02	 ror	 edx, 2
  00776	d1 c1		 rol	 ecx, 1
  00778	8b fa		 mov	 edi, edx
  0077a	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  0077d	8b da		 mov	 ebx, edx
  0077f	23 7d f4	 and	 edi, DWORD PTR _v0$[ebp]
  00782	23 5d f8	 and	 ebx, DWORD PTR _v3$[ebp]
  00785	89 48 48	 mov	 DWORD PTR [eax+72], ecx
  00788	0b fb		 or	 edi, ebx
  0078a	03 f9		 add	 edi, ecx
  0078c	03 7d 08	 add	 edi, DWORD PTR _v1$[ebp]
  0078f	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00792	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  00795	89 75 fc	 mov	 DWORD PTR _v2$[ebp], esi
  00798	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  0079b	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  0079e	c1 4d f8 02	 ror	 DWORD PTR _v3$[ebp], 2
  007a2	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  007a5	8b 5d f8	 mov	 ebx, DWORD PTR _v3$[ebp]
  007a8	8d b4 37 dc bc
	1b 8f		 lea	 esi, DWORD PTR [edi+esi-1894007588]
  007af	8b 7d f8	 mov	 edi, DWORD PTR _v3$[ebp]
  007b2	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  007b5	d1 c1		 rol	 ecx, 1
  007b7	89 75 08	 mov	 DWORD PTR _v1$[ebp], esi
  007ba	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  007bd	89 48 4c	 mov	 DWORD PTR [eax+76], ecx
  007c0	23 fa		 and	 edi, edx
  007c2	23 5d fc	 and	 ebx, DWORD PTR _v2$[ebp]
  007c5	0b fb		 or	 edi, ebx
  007c7	03 f9		 add	 edi, ecx
  007c9	03 7d f4	 add	 edi, DWORD PTR _v0$[ebp]
  007cc	c1 4d fc 02	 ror	 DWORD PTR _v2$[ebp], 2

; 176  :     five_cycle(v, maj, 0x8f1bbcdc,  45);

  007d0	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  007d3	33 48 50	 xor	 ecx, DWORD PTR [eax+80]
  007d6	8d b4 37 dc bc
	1b 8f		 lea	 esi, DWORD PTR [edi+esi-1894007588]
  007dd	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  007e0	8b 7d fc	 mov	 edi, DWORD PTR _v2$[ebp]
  007e3	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  007e6	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  007e9	23 7d f8	 and	 edi, DWORD PTR _v3$[ebp]
  007ec	8b 5d fc	 mov	 ebx, DWORD PTR _v2$[ebp]
  007ef	23 5d 08	 and	 ebx, DWORD PTR _v1$[ebp]
  007f2	d1 c1		 rol	 ecx, 1
  007f4	0b fb		 or	 edi, ebx
  007f6	03 f9		 add	 edi, ecx
  007f8	03 fa		 add	 edi, edx
  007fa	89 48 50	 mov	 DWORD PTR [eax+80], ecx
  007fd	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00800	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  00803	89 75 f4	 mov	 DWORD PTR _v0$[ebp], esi
  00806	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00809	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  0080c	c1 4d 08 02	 ror	 DWORD PTR _v1$[ebp], 2
  00810	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  00813	8b 5d 08	 mov	 ebx, DWORD PTR _v1$[ebp]
  00816	23 5d f4	 and	 ebx, DWORD PTR _v0$[ebp]
  00819	8d 94 37 dc bc
	1b 8f		 lea	 edx, DWORD PTR [edi+esi-1894007588]
  00820	8b 7d 08	 mov	 edi, DWORD PTR _v1$[ebp]
  00823	33 7d f4	 xor	 edi, DWORD PTR _v0$[ebp]
  00826	d1 c1		 rol	 ecx, 1
  00828	23 7d fc	 and	 edi, DWORD PTR _v2$[ebp]
  0082b	89 48 54	 mov	 DWORD PTR [eax+84], ecx
  0082e	0b fb		 or	 edi, ebx
  00830	03 f9		 add	 edi, ecx
  00832	03 7d f8	 add	 edi, DWORD PTR _v3$[ebp]
  00835	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00838	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  0083b	8b f2		 mov	 esi, edx
  0083d	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  00840	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00843	c1 4d f4 02	 ror	 DWORD PTR _v0$[ebp], 2
  00847	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  0084a	8d b4 37 dc bc
	1b 8f		 lea	 esi, DWORD PTR [edi+esi-1894007588]
  00851	d1 c1		 rol	 ecx, 1
  00853	8b fa		 mov	 edi, edx
  00855	33 7d f4	 xor	 edi, DWORD PTR _v0$[ebp]
  00858	8b da		 mov	 ebx, edx
  0085a	23 7d 08	 and	 edi, DWORD PTR _v1$[ebp]
  0085d	23 5d f4	 and	 ebx, DWORD PTR _v0$[ebp]
  00860	89 75 f8	 mov	 DWORD PTR _v3$[ebp], esi
  00863	0b fb		 or	 edi, ebx
  00865	03 f9		 add	 edi, ecx
  00867	03 7d fc	 add	 edi, DWORD PTR _v2$[ebp]
  0086a	89 48 58	 mov	 DWORD PTR [eax+88], ecx
  0086d	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00870	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  00873	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00876	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  00879	8d b4 37 dc bc
	1b 8f		 lea	 esi, DWORD PTR [edi+esi-1894007588]
  00880	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  00883	c1 ca 02	 ror	 edx, 2
  00886	8b fa		 mov	 edi, edx
  00888	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  0088b	d1 c1		 rol	 ecx, 1
  0088d	23 7d f4	 and	 edi, DWORD PTR _v0$[ebp]
  00890	8b da		 mov	 ebx, edx
  00892	23 5d f8	 and	 ebx, DWORD PTR _v3$[ebp]
  00895	89 75 fc	 mov	 DWORD PTR _v2$[ebp], esi
  00898	0b fb		 or	 edi, ebx
  0089a	03 f9		 add	 edi, ecx
  0089c	03 7d 08	 add	 edi, DWORD PTR _v1$[ebp]
  0089f	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  008a2	c1 4d f8 02	 ror	 DWORD PTR _v3$[ebp], 2
  008a6	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  008a9	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  008ac	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  008af	8d b4 37 dc bc
	1b 8f		 lea	 esi, DWORD PTR [edi+esi-1894007588]
  008b6	89 75 08	 mov	 DWORD PTR _v1$[ebp], esi
  008b9	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  008bc	8b 7d f8	 mov	 edi, DWORD PTR _v3$[ebp]
  008bf	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  008c2	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  008c5	23 fa		 and	 edi, edx
  008c7	8b 5d f8	 mov	 ebx, DWORD PTR _v3$[ebp]
  008ca	23 5d fc	 and	 ebx, DWORD PTR _v2$[ebp]
  008cd	d1 c1		 rol	 ecx, 1
  008cf	0b fb		 or	 edi, ebx
  008d1	03 f9		 add	 edi, ecx
  008d3	03 7d f4	 add	 edi, DWORD PTR _v0$[ebp]
  008d6	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 177  :     five_cycle(v, maj, 0x8f1bbcdc,  50);

  008d9	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  008dc	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  008df	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  008e2	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  008e5	c1 4d fc 02	 ror	 DWORD PTR _v2$[ebp], 2
  008e9	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  008ec	8b 5d fc	 mov	 ebx, DWORD PTR _v2$[ebp]
  008ef	23 5d 08	 and	 ebx, DWORD PTR _v1$[ebp]
  008f2	8d b4 37 dc bc
	1b 8f		 lea	 esi, DWORD PTR [edi+esi-1894007588]
  008f9	8b 7d fc	 mov	 edi, DWORD PTR _v2$[ebp]
  008fc	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  008ff	d1 c1		 rol	 ecx, 1
  00901	23 7d f8	 and	 edi, DWORD PTR _v3$[ebp]
  00904	89 48 24	 mov	 DWORD PTR [eax+36], ecx
  00907	0b fb		 or	 edi, ebx
  00909	03 f9		 add	 edi, ecx
  0090b	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  0090e	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  00911	03 fa		 add	 edi, edx
  00913	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  00916	89 75 f4	 mov	 DWORD PTR _v0$[ebp], esi
  00919	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  0091c	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  0091f	c1 4d 08 02	 ror	 DWORD PTR _v1$[ebp], 2
  00923	8b 5d 08	 mov	 ebx, DWORD PTR _v1$[ebp]
  00926	23 5d f4	 and	 ebx, DWORD PTR _v0$[ebp]
  00929	8d 94 37 dc bc
	1b 8f		 lea	 edx, DWORD PTR [edi+esi-1894007588]
  00930	8b 7d 08	 mov	 edi, DWORD PTR _v1$[ebp]
  00933	33 7d f4	 xor	 edi, DWORD PTR _v0$[ebp]
  00936	d1 c1		 rol	 ecx, 1
  00938	23 7d fc	 and	 edi, DWORD PTR _v2$[ebp]
  0093b	89 48 28	 mov	 DWORD PTR [eax+40], ecx
  0093e	0b fb		 or	 edi, ebx
  00940	03 f9		 add	 edi, ecx
  00942	03 7d f8	 add	 edi, DWORD PTR _v3$[ebp]
  00945	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00948	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  0094b	8b f2		 mov	 esi, edx
  0094d	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  00950	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00953	c1 4d f4 02	 ror	 DWORD PTR _v0$[ebp], 2
  00957	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  0095a	8d b4 37 dc bc
	1b 8f		 lea	 esi, DWORD PTR [edi+esi-1894007588]
  00961	d1 c1		 rol	 ecx, 1
  00963	8b fa		 mov	 edi, edx
  00965	33 7d f4	 xor	 edi, DWORD PTR _v0$[ebp]
  00968	8b da		 mov	 ebx, edx
  0096a	23 7d 08	 and	 edi, DWORD PTR _v1$[ebp]
  0096d	23 5d f4	 and	 ebx, DWORD PTR _v0$[ebp]
  00970	89 48 2c	 mov	 DWORD PTR [eax+44], ecx
  00973	0b fb		 or	 edi, ebx
  00975	03 f9		 add	 edi, ecx
  00977	03 7d fc	 add	 edi, DWORD PTR _v2$[ebp]
  0097a	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0097d	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  00980	89 75 f8	 mov	 DWORD PTR _v3$[ebp], esi
  00983	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  00986	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00989	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  0098c	c1 ca 02	 ror	 edx, 2
  0098f	8d b4 37 dc bc
	1b 8f		 lea	 esi, DWORD PTR [edi+esi-1894007588]
  00996	8b fa		 mov	 edi, edx
  00998	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  0099b	d1 c1		 rol	 ecx, 1
  0099d	89 75 fc	 mov	 DWORD PTR _v2$[ebp], esi
  009a0	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  009a3	23 7d f4	 and	 edi, DWORD PTR _v0$[ebp]
  009a6	89 48 30	 mov	 DWORD PTR [eax+48], ecx
  009a9	8b da		 mov	 ebx, edx
  009ab	23 5d f8	 and	 ebx, DWORD PTR _v3$[ebp]
  009ae	0b fb		 or	 edi, ebx
  009b0	03 f9		 add	 edi, ecx
  009b2	03 7d 08	 add	 edi, DWORD PTR _v1$[ebp]
  009b5	c1 4d f8 02	 ror	 DWORD PTR _v3$[ebp], 2
  009b9	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  009bc	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  009bf	8d b4 37 dc bc
	1b 8f		 lea	 esi, DWORD PTR [edi+esi-1894007588]
  009c6	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  009c9	8b 7d f8	 mov	 edi, DWORD PTR _v3$[ebp]
  009cc	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  009cf	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  009d2	8b 5d f8	 mov	 ebx, DWORD PTR _v3$[ebp]
  009d5	23 5d fc	 and	 ebx, DWORD PTR _v2$[ebp]
  009d8	23 fa		 and	 edi, edx
  009da	0b fb		 or	 edi, ebx
  009dc	d1 c1		 rol	 ecx, 1
  009de	03 f9		 add	 edi, ecx
  009e0	03 7d f4	 add	 edi, DWORD PTR _v0$[ebp]
  009e3	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 178  :     five_cycle(v, maj, 0x8f1bbcdc,  55);

  009e6	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  009e9	33 48 40	 xor	 ecx, DWORD PTR [eax+64]
  009ec	89 75 08	 mov	 DWORD PTR _v1$[ebp], esi
  009ef	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  009f2	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  009f5	c1 4d fc 02	 ror	 DWORD PTR _v2$[ebp], 2
  009f9	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  009fc	8b 5d fc	 mov	 ebx, DWORD PTR _v2$[ebp]
  009ff	23 5d 08	 and	 ebx, DWORD PTR _v1$[ebp]
  00a02	8d b4 37 dc bc
	1b 8f		 lea	 esi, DWORD PTR [edi+esi-1894007588]
  00a09	8b 7d fc	 mov	 edi, DWORD PTR _v2$[ebp]
  00a0c	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  00a0f	d1 c1		 rol	 ecx, 1
  00a11	23 7d f8	 and	 edi, DWORD PTR _v3$[ebp]
  00a14	89 48 38	 mov	 DWORD PTR [eax+56], ecx
  00a17	0b fb		 or	 edi, ebx
  00a19	03 f9		 add	 edi, ecx
  00a1b	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00a1e	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  00a21	03 fa		 add	 edi, edx
  00a23	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  00a26	89 75 f4	 mov	 DWORD PTR _v0$[ebp], esi
  00a29	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  00a2c	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00a2f	c1 4d 08 02	 ror	 DWORD PTR _v1$[ebp], 2
  00a33	8b 5d 08	 mov	 ebx, DWORD PTR _v1$[ebp]
  00a36	23 5d f4	 and	 ebx, DWORD PTR _v0$[ebp]
  00a39	8d 94 37 dc bc
	1b 8f		 lea	 edx, DWORD PTR [edi+esi-1894007588]
  00a40	8b 7d 08	 mov	 edi, DWORD PTR _v1$[ebp]
  00a43	33 7d f4	 xor	 edi, DWORD PTR _v0$[ebp]
  00a46	d1 c1		 rol	 ecx, 1
  00a48	23 7d fc	 and	 edi, DWORD PTR _v2$[ebp]
  00a4b	89 48 3c	 mov	 DWORD PTR [eax+60], ecx
  00a4e	0b fb		 or	 edi, ebx
  00a50	03 f9		 add	 edi, ecx
  00a52	03 7d f8	 add	 edi, DWORD PTR _v3$[ebp]
  00a55	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00a58	33 48 40	 xor	 ecx, DWORD PTR [eax+64]
  00a5b	8b f2		 mov	 esi, edx
  00a5d	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00a60	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00a63	c1 4d f4 02	 ror	 DWORD PTR _v0$[ebp], 2
  00a67	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  00a6a	8d b4 37 dc bc
	1b 8f		 lea	 esi, DWORD PTR [edi+esi-1894007588]
  00a71	8b fa		 mov	 edi, edx
  00a73	33 7d f4	 xor	 edi, DWORD PTR _v0$[ebp]
  00a76	8b da		 mov	 ebx, edx
  00a78	23 7d 08	 and	 edi, DWORD PTR _v1$[ebp]
  00a7b	23 5d f4	 and	 ebx, DWORD PTR _v0$[ebp]
  00a7e	d1 c1		 rol	 ecx, 1
  00a80	0b fb		 or	 edi, ebx
  00a82	03 f9		 add	 edi, ecx
  00a84	03 7d fc	 add	 edi, DWORD PTR _v2$[ebp]
  00a87	89 75 f8	 mov	 DWORD PTR _v3$[ebp], esi
  00a8a	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00a8d	89 48 40	 mov	 DWORD PTR [eax+64], ecx
  00a90	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00a93	8d b4 37 dc bc
	1b 8f		 lea	 esi, DWORD PTR [edi+esi-1894007588]
  00a9a	c1 ca 02	 ror	 edx, 2
  00a9d	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  00aa0	89 75 fc	 mov	 DWORD PTR _v2$[ebp], esi
  00aa3	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  00aa6	8b fa		 mov	 edi, edx
  00aa8	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  00aab	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  00aae	23 7d f4	 and	 edi, DWORD PTR _v0$[ebp]
  00ab1	d1 c1		 rol	 ecx, 1
  00ab3	89 48 44	 mov	 DWORD PTR [eax+68], ecx
  00ab6	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00ab9	8b da		 mov	 ebx, edx
  00abb	23 5d f8	 and	 ebx, DWORD PTR _v3$[ebp]
  00abe	0b fb		 or	 edi, ebx
  00ac0	03 f9		 add	 edi, ecx
  00ac2	03 7d 08	 add	 edi, DWORD PTR _v1$[ebp]
  00ac5	c1 4d f8 02	 ror	 DWORD PTR _v3$[ebp], 2
  00ac9	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00acc	33 48 48	 xor	 ecx, DWORD PTR [eax+72]
  00acf	8b 5d f8	 mov	 ebx, DWORD PTR _v3$[ebp]
  00ad2	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  00ad5	23 5d fc	 and	 ebx, DWORD PTR _v2$[ebp]
  00ad8	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  00adb	8d b4 37 dc bc
	1b 8f		 lea	 esi, DWORD PTR [edi+esi-1894007588]
  00ae2	8b 7d f8	 mov	 edi, DWORD PTR _v3$[ebp]
  00ae5	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  00ae8	d1 c1		 rol	 ecx, 1
  00aea	23 fa		 and	 edi, edx
  00aec	0b fb		 or	 edi, ebx
  00aee	03 f9		 add	 edi, ecx
  00af0	03 7d f4	 add	 edi, DWORD PTR _v0$[ebp]
  00af3	89 48 48	 mov	 DWORD PTR [eax+72], ecx

; 179  : 
; 180  :     five_cycle(v, parity, 0xca62c1d6,  60);

  00af6	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00af9	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  00afc	89 75 08	 mov	 DWORD PTR _v1$[ebp], esi
  00aff	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  00b02	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00b05	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  00b08	c1 4d fc 02	 ror	 DWORD PTR _v2$[ebp], 2
  00b0c	8d b4 37 dc bc
	1b 8f		 lea	 esi, DWORD PTR [edi+esi-1894007588]
  00b13	8b 7d f8	 mov	 edi, DWORD PTR _v3$[ebp]
  00b16	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  00b19	d1 c1		 rol	 ecx, 1
  00b1b	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  00b1e	89 48 4c	 mov	 DWORD PTR [eax+76], ecx
  00b21	03 f9		 add	 edi, ecx
  00b23	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00b26	33 48 50	 xor	 ecx, DWORD PTR [eax+80]
  00b29	03 fa		 add	 edi, edx
  00b2b	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  00b2e	89 75 f4	 mov	 DWORD PTR _v0$[ebp], esi
  00b31	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  00b34	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00b37	c1 4d 08 02	 ror	 DWORD PTR _v1$[ebp], 2
  00b3b	8d 94 37 d6 c1
	62 ca		 lea	 edx, DWORD PTR [edi+esi-899497514]
  00b42	8b 7d fc	 mov	 edi, DWORD PTR _v2$[ebp]
  00b45	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  00b48	d1 c1		 rol	 ecx, 1
  00b4a	33 7d f4	 xor	 edi, DWORD PTR _v0$[ebp]
  00b4d	89 48 50	 mov	 DWORD PTR [eax+80], ecx
  00b50	03 f9		 add	 edi, ecx
  00b52	03 7d f8	 add	 edi, DWORD PTR _v3$[ebp]
  00b55	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00b58	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  00b5b	8b f2		 mov	 esi, edx
  00b5d	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00b60	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00b63	c1 4d f4 02	 ror	 DWORD PTR _v0$[ebp], 2
  00b67	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  00b6a	8d b4 37 d6 c1
	62 ca		 lea	 esi, DWORD PTR [edi+esi-899497514]
  00b71	8b fa		 mov	 edi, edx
  00b73	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  00b76	d1 c1		 rol	 ecx, 1
  00b78	33 7d f4	 xor	 edi, DWORD PTR _v0$[ebp]
  00b7b	89 75 f8	 mov	 DWORD PTR _v3$[ebp], esi
  00b7e	03 f9		 add	 edi, ecx
  00b80	03 7d fc	 add	 edi, DWORD PTR _v2$[ebp]
  00b83	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00b86	89 48 54	 mov	 DWORD PTR [eax+84], ecx
  00b89	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00b8c	8d b4 37 d6 c1
	62 ca		 lea	 esi, DWORD PTR [edi+esi-899497514]
  00b93	c1 ca 02	 ror	 edx, 2
  00b96	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  00b99	89 75 fc	 mov	 DWORD PTR _v2$[ebp], esi
  00b9c	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  00b9f	8b fa		 mov	 edi, edx
  00ba1	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  00ba4	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  00ba7	33 7d f4	 xor	 edi, DWORD PTR _v0$[ebp]
  00baa	d1 c1		 rol	 ecx, 1
  00bac	03 f9		 add	 edi, ecx
  00bae	03 7d 08	 add	 edi, DWORD PTR _v1$[ebp]
  00bb1	89 48 58	 mov	 DWORD PTR [eax+88], ecx
  00bb4	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00bb7	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  00bba	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00bbd	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  00bc0	c1 4d f8 02	 ror	 DWORD PTR _v3$[ebp], 2
  00bc4	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  00bc7	8d b4 37 d6 c1
	62 ca		 lea	 esi, DWORD PTR [edi+esi-899497514]
  00bce	d1 c1		 rol	 ecx, 1
  00bd0	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  00bd3	8b fa		 mov	 edi, edx
  00bd5	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  00bd8	89 75 08	 mov	 DWORD PTR _v1$[ebp], esi
  00bdb	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  00bde	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00be1	03 f9		 add	 edi, ecx
  00be3	03 7d f4	 add	 edi, DWORD PTR _v0$[ebp]
  00be6	c1 4d fc 02	 ror	 DWORD PTR _v2$[ebp], 2

; 181  :     five_cycle(v, parity, 0xca62c1d6,  65);

  00bea	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00bed	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  00bf0	8d b4 37 d6 c1
	62 ca		 lea	 esi, DWORD PTR [edi+esi-899497514]
  00bf7	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  00bfa	8b 7d f8	 mov	 edi, DWORD PTR _v3$[ebp]
  00bfd	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  00c00	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  00c03	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  00c06	d1 c1		 rol	 ecx, 1
  00c08	03 f9		 add	 edi, ecx
  00c0a	03 fa		 add	 edi, edx
  00c0c	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  00c0f	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00c12	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  00c15	89 75 f4	 mov	 DWORD PTR _v0$[ebp], esi
  00c18	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  00c1b	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00c1e	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  00c21	c1 4d 08 02	 ror	 DWORD PTR _v1$[ebp], 2
  00c25	8d 94 37 d6 c1
	62 ca		 lea	 edx, DWORD PTR [edi+esi-899497514]
  00c2c	8b 7d fc	 mov	 edi, DWORD PTR _v2$[ebp]
  00c2f	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  00c32	d1 c1		 rol	 ecx, 1
  00c34	33 7d f4	 xor	 edi, DWORD PTR _v0$[ebp]
  00c37	89 48 24	 mov	 DWORD PTR [eax+36], ecx
  00c3a	03 f9		 add	 edi, ecx
  00c3c	03 7d f8	 add	 edi, DWORD PTR _v3$[ebp]
  00c3f	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00c42	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  00c45	8b f2		 mov	 esi, edx
  00c47	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  00c4a	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00c4d	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  00c50	c1 4d f4 02	 ror	 DWORD PTR _v0$[ebp], 2
  00c54	8d b4 37 d6 c1
	62 ca		 lea	 esi, DWORD PTR [edi+esi-899497514]
  00c5b	d1 c1		 rol	 ecx, 1
  00c5d	8b fa		 mov	 edi, edx
  00c5f	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  00c62	89 48 28	 mov	 DWORD PTR [eax+40], ecx
  00c65	33 7d f4	 xor	 edi, DWORD PTR _v0$[ebp]
  00c68	89 75 f8	 mov	 DWORD PTR _v3$[ebp], esi
  00c6b	03 f9		 add	 edi, ecx
  00c6d	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00c70	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00c73	03 7d fc	 add	 edi, DWORD PTR _v2$[ebp]
  00c76	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  00c79	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00c7c	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  00c7f	8d b4 37 d6 c1
	62 ca		 lea	 esi, DWORD PTR [edi+esi-899497514]
  00c86	c1 ca 02	 ror	 edx, 2
  00c89	d1 c1		 rol	 ecx, 1
  00c8b	89 75 fc	 mov	 DWORD PTR _v2$[ebp], esi
  00c8e	89 48 2c	 mov	 DWORD PTR [eax+44], ecx
  00c91	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00c94	8b fa		 mov	 edi, edx
  00c96	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  00c99	33 7d f4	 xor	 edi, DWORD PTR _v0$[ebp]
  00c9c	03 f9		 add	 edi, ecx
  00c9e	03 7d 08	 add	 edi, DWORD PTR _v1$[ebp]
  00ca1	c1 4d f8 02	 ror	 DWORD PTR _v3$[ebp], 2
  00ca5	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00ca8	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  00cab	8d b4 37 d6 c1
	62 ca		 lea	 esi, DWORD PTR [edi+esi-899497514]
  00cb2	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  00cb5	8b fa		 mov	 edi, edx
  00cb7	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  00cba	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  00cbd	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  00cc0	d1 c1		 rol	 ecx, 1
  00cc2	03 f9		 add	 edi, ecx
  00cc4	03 7d f4	 add	 edi, DWORD PTR _v0$[ebp]
  00cc7	89 48 30	 mov	 DWORD PTR [eax+48], ecx

; 182  :     five_cycle(v, parity, 0xca62c1d6,  70);

  00cca	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00ccd	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  00cd0	89 75 08	 mov	 DWORD PTR _v1$[ebp], esi
  00cd3	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00cd6	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00cd9	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  00cdc	c1 4d fc 02	 ror	 DWORD PTR _v2$[ebp], 2
  00ce0	8d b4 37 d6 c1
	62 ca		 lea	 esi, DWORD PTR [edi+esi-899497514]
  00ce7	8b 7d f8	 mov	 edi, DWORD PTR _v3$[ebp]
  00cea	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  00ced	d1 c1		 rol	 ecx, 1
  00cef	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  00cf2	89 48 34	 mov	 DWORD PTR [eax+52], ecx
  00cf5	03 f9		 add	 edi, ecx
  00cf7	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00cfa	33 48 40	 xor	 ecx, DWORD PTR [eax+64]
  00cfd	03 fa		 add	 edi, edx
  00cff	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  00d02	89 75 f4	 mov	 DWORD PTR _v0$[ebp], esi
  00d05	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  00d08	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00d0b	c1 4d 08 02	 ror	 DWORD PTR _v1$[ebp], 2
  00d0f	8d 94 37 d6 c1
	62 ca		 lea	 edx, DWORD PTR [edi+esi-899497514]
  00d16	8b 7d fc	 mov	 edi, DWORD PTR _v2$[ebp]
  00d19	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  00d1c	d1 c1		 rol	 ecx, 1
  00d1e	33 7d f4	 xor	 edi, DWORD PTR _v0$[ebp]
  00d21	89 48 38	 mov	 DWORD PTR [eax+56], ecx
  00d24	03 f9		 add	 edi, ecx
  00d26	03 7d f8	 add	 edi, DWORD PTR _v3$[ebp]
  00d29	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00d2c	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  00d2f	8b f2		 mov	 esi, edx
  00d31	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  00d34	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00d37	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  00d3a	c1 4d f4 02	 ror	 DWORD PTR _v0$[ebp], 2
  00d3e	8d b4 37 d6 c1
	62 ca		 lea	 esi, DWORD PTR [edi+esi-899497514]
  00d45	d1 c1		 rol	 ecx, 1
  00d47	8b fa		 mov	 edi, edx
  00d49	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  00d4c	89 48 3c	 mov	 DWORD PTR [eax+60], ecx
  00d4f	33 7d f4	 xor	 edi, DWORD PTR _v0$[ebp]
  00d52	89 75 f8	 mov	 DWORD PTR _v3$[ebp], esi
  00d55	03 f9		 add	 edi, ecx
  00d57	03 7d fc	 add	 edi, DWORD PTR _v2$[ebp]
  00d5a	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00d5d	33 48 40	 xor	 ecx, DWORD PTR [eax+64]
  00d60	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00d63	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00d66	8d b4 37 d6 c1
	62 ca		 lea	 esi, DWORD PTR [edi+esi-899497514]
  00d6d	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  00d70	c1 ca 02	 ror	 edx, 2
  00d73	8b fa		 mov	 edi, edx
  00d75	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  00d78	d1 c1		 rol	 ecx, 1
  00d7a	33 7d f4	 xor	 edi, DWORD PTR _v0$[ebp]
  00d7d	89 75 fc	 mov	 DWORD PTR _v2$[ebp], esi
  00d80	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00d83	03 f9		 add	 edi, ecx
  00d85	03 7d 08	 add	 edi, DWORD PTR _v1$[ebp]
  00d88	89 48 40	 mov	 DWORD PTR [eax+64], ecx
  00d8b	8d b4 37 d6 c1
	62 ca		 lea	 esi, DWORD PTR [edi+esi-899497514]
  00d92	89 75 08	 mov	 DWORD PTR _v1$[ebp], esi
  00d95	c1 4d f8 02	 ror	 DWORD PTR _v3$[ebp], 2
  00d99	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00d9c	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  00d9f	8b fa		 mov	 edi, edx
  00da1	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  00da4	33 7d f8	 xor	 edi, DWORD PTR _v3$[ebp]
  00da7	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  00daa	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  00dad	d1 c1		 rol	 ecx, 1
  00daf	03 f9		 add	 edi, ecx
  00db1	03 7d f4	 add	 edi, DWORD PTR _v0$[ebp]
  00db4	89 48 44	 mov	 DWORD PTR [eax+68], ecx

; 183  :     five_cycle(v, parity, 0xca62c1d6,  75);

  00db7	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00dba	33 48 48	 xor	 ecx, DWORD PTR [eax+72]
  00dbd	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00dc0	33 48 3c	 xor	 ecx, DWORD PTR [eax+60]
  00dc3	c1 4d fc 02	 ror	 DWORD PTR _v2$[ebp], 2
  00dc7	33 48 28	 xor	 ecx, DWORD PTR [eax+40]
  00dca	8d b4 37 d6 c1
	62 ca		 lea	 esi, DWORD PTR [edi+esi-899497514]
  00dd1	8b 7d f8	 mov	 edi, DWORD PTR _v3$[ebp]
  00dd4	33 7d fc	 xor	 edi, DWORD PTR _v2$[ebp]
  00dd7	d1 c1		 rol	 ecx, 1
  00dd9	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  00ddc	89 48 48	 mov	 DWORD PTR [eax+72], ecx
  00ddf	03 f9		 add	 edi, ecx
  00de1	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00de4	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  00de7	03 fa		 add	 edi, edx
  00de9	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  00dec	89 75 f4	 mov	 DWORD PTR _v0$[ebp], esi
  00def	33 48 2c	 xor	 ecx, DWORD PTR [eax+44]
  00df2	c1 ce 1b	 ror	 esi, 27			; 0000001bH
  00df5	c1 4d 08 02	 ror	 DWORD PTR _v1$[ebp], 2
  00df9	8d b4 37 d6 c1
	62 ca		 lea	 esi, DWORD PTR [edi+esi-899497514]
  00e00	8b 7d fc	 mov	 edi, DWORD PTR _v2$[ebp]
  00e03	33 7d 08	 xor	 edi, DWORD PTR _v1$[ebp]
  00e06	d1 c1		 rol	 ecx, 1
  00e08	33 7d f4	 xor	 edi, DWORD PTR _v0$[ebp]
  00e0b	89 48 4c	 mov	 DWORD PTR [eax+76], ecx
  00e0e	03 f9		 add	 edi, ecx
  00e10	03 7d f8	 add	 edi, DWORD PTR _v3$[ebp]
  00e13	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00e16	33 48 50	 xor	 ecx, DWORD PTR [eax+80]
  00e19	8b d6		 mov	 edx, esi
  00e1b	33 48 30	 xor	 ecx, DWORD PTR [eax+48]
  00e1e	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  00e21	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  00e24	c1 4d f4 02	 ror	 DWORD PTR _v0$[ebp], 2
  00e28	d1 c1		 rol	 ecx, 1
  00e2a	8b de		 mov	 ebx, esi
  00e2c	33 5d 08	 xor	 ebx, DWORD PTR _v1$[ebp]
  00e2f	89 48 50	 mov	 DWORD PTR [eax+80], ecx
  00e32	33 5d f4	 xor	 ebx, DWORD PTR _v0$[ebp]
  00e35	8d bc 17 d6 c1
	62 ca		 lea	 edi, DWORD PTR [edi+edx-899497514]
  00e3c	03 d9		 add	 ebx, ecx
  00e3e	03 5d fc	 add	 ebx, DWORD PTR _v2$[ebp]
  00e41	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00e44	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  00e47	8b d7		 mov	 edx, edi
  00e49	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00e4c	c1 ca 1b	 ror	 edx, 27			; 0000001bH
  00e4f	33 48 1c	 xor	 ecx, DWORD PTR [eax+28]
  00e52	c1 ce 02	 ror	 esi, 2
  00e55	89 75 f0	 mov	 DWORD PTR _v4$[ebp], esi
  00e58	33 f7		 xor	 esi, edi
  00e5a	33 75 f4	 xor	 esi, DWORD PTR _v0$[ebp]
  00e5d	d1 c1		 rol	 ecx, 1
  00e5f	03 f1		 add	 esi, ecx
  00e61	03 75 08	 add	 esi, DWORD PTR _v1$[ebp]
  00e64	8d 94 13 d6 c1
	62 ca		 lea	 edx, DWORD PTR [ebx+edx-899497514]
  00e6b	89 48 54	 mov	 DWORD PTR [eax+84], ecx
  00e6e	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00e71	33 48 38	 xor	 ecx, DWORD PTR [eax+56]
  00e74	8b da		 mov	 ebx, edx
  00e76	c1 cb 1b	 ror	 ebx, 27			; 0000001bH
  00e79	89 7d f8	 mov	 DWORD PTR _v3$[ebp], edi
  00e7c	8d bc 1e d6 c1
	62 ca		 lea	 edi, DWORD PTR [esi+ebx-899497514]
  00e83	8b 75 f8	 mov	 esi, DWORD PTR _v3$[ebp]
  00e86	c1 ce 02	 ror	 esi, 2
  00e89	33 48 4c	 xor	 ecx, DWORD PTR [eax+76]
  00e8c	89 7d 08	 mov	 DWORD PTR _v1$[ebp], edi
  00e8f	33 48 20	 xor	 ecx, DWORD PTR [eax+32]
  00e92	8b 5d f0	 mov	 ebx, DWORD PTR _v4$[ebp]
  00e95	33 de		 xor	 ebx, esi
  00e97	d1 c1		 rol	 ecx, 1
  00e99	33 da		 xor	 ebx, edx
  00e9b	03 d9		 add	 ebx, ecx
  00e9d	03 5d f4	 add	 ebx, DWORD PTR _v0$[ebp]
  00ea0	89 48 58	 mov	 DWORD PTR [eax+88], ecx

; 184  : 
; 185  : #ifdef ARRAY
; 186  :     ctx->hash[0] += v[0]; ctx->hash[1] += v[1];
; 187  :     ctx->hash[2] += v[2]; ctx->hash[3] += v[3];
; 188  :     ctx->hash[4] += v[4];
; 189  : #else
; 190  :     ctx->hash[0] += v0; ctx->hash[1] += v1;
; 191  :     ctx->hash[2] += v2; ctx->hash[3] += v3;

  00ea3	01 70 14	 add	 DWORD PTR [eax+20], esi
  00ea6	c1 cf 1b	 ror	 edi, 27			; 0000001bH
  00ea9	8d 8c 3b d6 c1
	62 ca		 lea	 ecx, DWORD PTR [ebx+edi-899497514]
  00eb0	01 48 08	 add	 DWORD PTR [eax+8], ecx
  00eb3	8b 4d 08	 mov	 ecx, DWORD PTR _v1$[ebp]
  00eb6	01 48 0c	 add	 DWORD PTR [eax+12], ecx

; 192  :     ctx->hash[4] += v4;

  00eb9	8b 4d f0	 mov	 ecx, DWORD PTR _v4$[ebp]
  00ebc	5f		 pop	 edi
  00ebd	c1 ca 02	 ror	 edx, 2
  00ec0	01 50 10	 add	 DWORD PTR [eax+16], edx
  00ec3	01 48 18	 add	 DWORD PTR [eax+24], ecx
  00ec6	5e		 pop	 esi
  00ec7	5b		 pop	 ebx

; 193  : #endif
; 194  : }

  00ec8	c9		 leave
  00ec9	c2 04 00	 ret	 4
_sha1_compile@4 ENDP
_TEXT	ENDS
PUBLIC	_sha1_begin@4
; Function compile flags: /Ogsp
;	COMDAT _sha1_begin@4
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_sha1_begin@4 PROC					; COMDAT

; 197  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 198  :     ctx->count[0] = ctx->count[1] = 0;

  00005	8b 45 08	 mov	 eax, DWORD PTR _ctx$[ebp]
  00008	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  0000c	83 20 00	 and	 DWORD PTR [eax], 0

; 199  :     ctx->hash[0] = 0x67452301;

  0000f	c7 40 08 01 23
	45 67		 mov	 DWORD PTR [eax+8], 1732584193 ; 67452301H

; 200  :     ctx->hash[1] = 0xefcdab89;

  00016	c7 40 0c 89 ab
	cd ef		 mov	 DWORD PTR [eax+12], -271733879 ; efcdab89H

; 201  :     ctx->hash[2] = 0x98badcfe;

  0001d	c7 40 10 fe dc
	ba 98		 mov	 DWORD PTR [eax+16], -1732584194 ; 98badcfeH

; 202  :     ctx->hash[3] = 0x10325476;

  00024	c7 40 14 76 54
	32 10		 mov	 DWORD PTR [eax+20], 271733878 ; 10325476H

; 203  :     ctx->hash[4] = 0xc3d2e1f0;

  0002b	c7 40 18 f0 e1
	d2 c3		 mov	 DWORD PTR [eax+24], -1009589776 ; c3d2e1f0H

; 204  : }

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
_sha1_begin@4 ENDP
_TEXT	ENDS
PUBLIC	_sha1_hash@12
EXTRN	_memcpy:PROC
; Function compile flags: /Ogsp
;	COMDAT _sha1_hash@12
_TEXT	SEGMENT
__i$26040 = 8						; size = 4
_data$ = 8						; size = 4
_len$ = 12						; size = 4
_sp$ = 16						; size = 4
_ctx$ = 16						; size = 4
_sha1_hash@12 PROC					; COMDAT

; 210  : {   sha1_32t pos = (sha1_32t)(ctx->count[0] & SHA1_MASK),

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 211  :             space = SHA1_BLOCK_SIZE - pos;
; 212  :     const unsigned char *sp = data;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  00008	53		 push	 ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR _ctx$[ebp]
  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	8b f0		 mov	 esi, eax
  00012	6a 40		 push	 64			; 00000040H
  00014	89 4d 10	 mov	 DWORD PTR _sp$[ebp], ecx

; 213  : 
; 214  :     if((ctx->count[0] += len) < len)

  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _len$[ebp]
  0001a	83 e6 3f	 and	 esi, 63			; 0000003fH
  0001d	5b		 pop	 ebx
  0001e	03 c1		 add	 eax, ecx
  00020	2b de		 sub	 ebx, esi
  00022	89 07		 mov	 DWORD PTR [edi], eax
  00024	3b c1		 cmp	 eax, ecx
  00026	73 03		 jae	 SHORT $LN8@sha1_hash

; 215  :         ++(ctx->count[1]);

  00028	ff 47 04	 inc	 DWORD PTR [edi+4]
$LN8@sha1_hash:

; 216  : 
; 217  :     while(len >= space)     /* tranfer whole blocks if possible  */

  0002b	3b cb		 cmp	 ecx, ebx
  0002d	72 59		 jb	 SHORT $LN3@sha1_hash
$LL4@sha1_hash:

; 218  :     {
; 219  :         memcpy(((unsigned char*)ctx->wbuf) + pos, sp, space);

  0002f	53		 push	 ebx
  00030	ff 75 10	 push	 DWORD PTR _sp$[ebp]
  00033	8d 44 37 1c	 lea	 eax, DWORD PTR [edi+esi+28]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _memcpy

; 220  :         sp += space; len -= space; space = SHA1_BLOCK_SIZE; pos = 0;

  0003d	01 5d 10	 add	 DWORD PTR _sp$[ebp], ebx
  00040	29 5d 0c	 sub	 DWORD PTR _len$[ebp], ebx
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
  00046	6a 40		 push	 64			; 00000040H
  00048	8d 47 5c	 lea	 eax, DWORD PTR [edi+92]
  0004b	5b		 pop	 ebx
  0004c	33 f6		 xor	 esi, esi

; 221  :         bsw_32(ctx->wbuf, SHA1_BLOCK_SIZE >> 2);

  0004e	c7 45 08 10 00
	00 00		 mov	 DWORD PTR __i$26040[ebp], 16 ; 00000010H
  00055	8b c8		 mov	 ecx, eax
$LL2@sha1_hash:
  00057	ff 4d 08	 dec	 DWORD PTR __i$26040[ebp]
  0005a	83 e9 04	 sub	 ecx, 4
  0005d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005f	8b d0		 mov	 edx, eax
  00061	c1 ca 18	 ror	 edx, 24			; 00000018H
  00064	81 e2 ff 00 ff
	00		 and	 edx, 16711935		; 00ff00ffH
  0006a	c1 c8 08	 ror	 eax, 8
  0006d	25 00 ff 00 ff	 and	 eax, -16711936		; ff00ff00H
  00072	0b d0		 or	 edx, eax
  00074	83 7d 08 00	 cmp	 DWORD PTR __i$26040[ebp], 0
  00078	89 11		 mov	 DWORD PTR [ecx], edx
  0007a	75 db		 jne	 SHORT $LL2@sha1_hash

; 222  :         sha1_compile(ctx);

  0007c	57		 push	 edi
  0007d	e8 00 00 00 00	 call	 _sha1_compile@4
  00082	83 7d 0c 40	 cmp	 DWORD PTR _len$[ebp], 64 ; 00000040H
  00086	73 a7		 jae	 SHORT $LL4@sha1_hash
$LN3@sha1_hash:

; 223  :     }
; 224  : 
; 225  :     memcpy(((unsigned char*)ctx->wbuf) + pos, sp, len);

  00088	ff 75 0c	 push	 DWORD PTR _len$[ebp]
  0008b	8d 44 3e 1c	 lea	 eax, DWORD PTR [esi+edi+28]
  0008f	ff 75 10	 push	 DWORD PTR _sp$[ebp]
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 _memcpy
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx

; 226  : }

  0009e	5d		 pop	 ebp
  0009f	c2 0c 00	 ret	 12			; 0000000cH
_sha1_hash@12 ENDP
_TEXT	ENDS
PUBLIC	_sha1_end@8
; Function compile flags: /Ogsp
;	COMDAT _sha1_end@8
_TEXT	SEGMENT
_hval$ = 8						; size = 4
_ctx$ = 12						; size = 4
_sha1_end@8 PROC					; COMDAT

; 231  : {   sha1_32t    i = (sha1_32t)(ctx->count[0] & SHA1_MASK);

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR _ctx$[ebp]
  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	83 e0 3f	 and	 eax, 63			; 0000003fH

; 232  : 
; 233  :     /* put bytes in the buffer in an order in which references to   */
; 234  :     /* 32-bit words will put bytes with lower addresses into the    */
; 235  :     /* top of 32 bit words on BOTH big and little endian machines   */
; 236  :     bsw_32(ctx->wbuf, (i + 3) >> 2);

  0000f	8d 48 03	 lea	 ecx, DWORD PTR [eax+3]
  00012	c1 e9 02	 shr	 ecx, 2
  00015	57		 push	 edi
  00016	85 c9		 test	 ecx, ecx
  00018	74 26		 je	 SHORT $LN16@sha1_end

; 231  : {   sha1_32t    i = (sha1_32t)(ctx->count[0] & SHA1_MASK);

  0001a	8d 7c 8e 1c	 lea	 edi, DWORD PTR [esi+ecx*4+28]
$LL10@sha1_end:

; 232  : 
; 233  :     /* put bytes in the buffer in an order in which references to   */
; 234  :     /* 32-bit words will put bytes with lower addresses into the    */
; 235  :     /* top of 32 bit words on BOTH big and little endian machines   */
; 236  :     bsw_32(ctx->wbuf, (i + 3) >> 2);

  0001e	83 ef 04	 sub	 edi, 4
  00021	8b 17		 mov	 edx, DWORD PTR [edi]
  00023	8b da		 mov	 ebx, edx
  00025	c1 cb 18	 ror	 ebx, 24			; 00000018H
  00028	81 e3 ff 00 ff
	00		 and	 ebx, 16711935		; 00ff00ffH
  0002e	c1 ca 08	 ror	 edx, 8
  00031	81 e2 00 ff 00
	ff		 and	 edx, -16711936		; ff00ff00H
  00037	49		 dec	 ecx
  00038	0b da		 or	 ebx, edx
  0003a	89 1f		 mov	 DWORD PTR [edi], ebx
  0003c	85 c9		 test	 ecx, ecx
  0003e	75 de		 jne	 SHORT $LL10@sha1_end
$LN16@sha1_end:

; 237  : 
; 238  :     /* we now need to mask valid bytes and add the padding which is */
; 239  :     /* a single 1 bit and as many zero bits as necessary. Note that */
; 240  :     /* we can always add the first padding byte here because the    */
; 241  :     /* buffer always has at least one empty slot                    */
; 242  :     ctx->wbuf[i >> 2] &= 0xffffff80 << 8 * (~i & 3);

  00040	8b c8		 mov	 ecx, eax
  00042	f7 d1		 not	 ecx
  00044	83 e1 03	 and	 ecx, 3
  00047	c1 e1 03	 shl	 ecx, 3
  0004a	6a 80		 push	 -128			; ffffff80H
  0004c	5f		 pop	 edi
  0004d	d3 e7		 shl	 edi, cl
  0004f	8b d0		 mov	 edx, eax
  00051	c1 ea 02	 shr	 edx, 2

; 243  :     ctx->wbuf[i >> 2] |= 0x00000080 << 8 * (~i & 3);

  00054	bb 80 00 00 00	 mov	 ebx, 128		; 00000080H
  00059	23 7c 96 1c	 and	 edi, DWORD PTR [esi+edx*4+28]
  0005d	d3 e3		 shl	 ebx, cl
  0005f	0b fb		 or	 edi, ebx
  00061	89 7c 96 1c	 mov	 DWORD PTR [esi+edx*4+28], edi

; 244  : 
; 245  :     /* we need 9 or more empty positions, one for the padding byte  */
; 246  :     /* (above) and eight for the length count. If there is not      */
; 247  :     /* enough space, pad and empty the buffer                       */
; 248  :     if(i > SHA1_BLOCK_SIZE - 9)

  00065	83 f8 37	 cmp	 eax, 55			; 00000037H
  00068	76 13		 jbe	 SHORT $LN8@sha1_end

; 249  :     {
; 250  :         if(i < 60) ctx->wbuf[15] = 0;

  0006a	83 f8 3c	 cmp	 eax, 60			; 0000003cH
  0006d	73 04		 jae	 SHORT $LN23@sha1_end
  0006f	83 66 58 00	 and	 DWORD PTR [esi+88], 0
$LN23@sha1_end:

; 251  :         sha1_compile(ctx);

  00073	56		 push	 esi
  00074	e8 00 00 00 00	 call	 _sha1_compile@4

; 252  :         i = 0;

  00079	33 c0		 xor	 eax, eax

; 253  :     }
; 254  :     else    /* compute a word index for the empty buffer positions  */

  0007b	eb 08		 jmp	 SHORT $LN21@sha1_end
$LN8@sha1_end:

; 255  :         i = (i >> 2) + 1;

  0007d	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 256  : 
; 257  :     while(i < 14) /* and zero pad all but last two positions        */

  00080	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00083	73 0d		 jae	 SHORT $LN5@sha1_end
$LN21@sha1_end:

; 258  :         ctx->wbuf[i++] = 0;

  00085	6a 0e		 push	 14			; 0000000eH
  00087	59		 pop	 ecx
  00088	8d 7c 86 1c	 lea	 edi, DWORD PTR [esi+eax*4+28]
  0008c	2b c8		 sub	 ecx, eax
  0008e	33 c0		 xor	 eax, eax
  00090	f3 ab		 rep stosd
$LN5@sha1_end:

; 259  : 
; 260  :     /* the following 32-bit length fields are assembled in the      */
; 261  :     /* wrong byte order on little endian machines but this is       */
; 262  :     /* corrected later since they are only ever used as 32-bit      */
; 263  :     /* word values.                                                 */
; 264  :     ctx->wbuf[14] = (ctx->count[1] << 3) | (ctx->count[0] >> 29);

  00092	8b 06		 mov	 eax, DWORD PTR [esi]
  00094	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00097	8b d0		 mov	 edx, eax
  00099	c1 e1 03	 shl	 ecx, 3
  0009c	c1 ea 1d	 shr	 edx, 29			; 0000001dH
  0009f	0b ca		 or	 ecx, edx

; 265  :     ctx->wbuf[15] = ctx->count[0] << 3;

  000a1	c1 e0 03	 shl	 eax, 3

; 266  :     sha1_compile(ctx);

  000a4	56		 push	 esi
  000a5	89 4e 54	 mov	 DWORD PTR [esi+84], ecx
  000a8	89 46 58	 mov	 DWORD PTR [esi+88], eax
  000ab	e8 00 00 00 00	 call	 _sha1_compile@4

; 267  : 
; 268  :     /* extract the hash value as bytes in case the hash buffer is   */
; 269  :     /* misaligned for 32-bit words                                  */
; 270  :     for(i = 0; i < SHA1_DIGEST_SIZE; ++i)

  000b0	33 c0		 xor	 eax, eax
$LL3@sha1_end:

; 271  :         hval[i] = (unsigned char)(ctx->hash[i >> 2] >> (8 * (~i & 3)));

  000b2	8b c8		 mov	 ecx, eax
  000b4	f7 d1		 not	 ecx
  000b6	8b d0		 mov	 edx, eax
  000b8	c1 ea 02	 shr	 edx, 2
  000bb	8b 54 96 08	 mov	 edx, DWORD PTR [esi+edx*4+8]
  000bf	83 e1 03	 and	 ecx, 3
  000c2	c1 e1 03	 shl	 ecx, 3
  000c5	d3 ea		 shr	 edx, cl
  000c7	8b 4d 08	 mov	 ecx, DWORD PTR _hval$[ebp]
  000ca	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  000cd	40		 inc	 eax
  000ce	83 f8 14	 cmp	 eax, 20			; 00000014H
  000d1	72 df		 jb	 SHORT $LL3@sha1_end
  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	5b		 pop	 ebx

; 272  : }

  000d6	5d		 pop	 ebp
  000d7	c2 08 00	 ret	 8
_sha1_end@8 ENDP
_TEXT	ENDS
PUBLIC	_sha1@12
; Function compile flags: /Ogsp
;	COMDAT _sha1@12
_TEXT	SEGMENT
_cx$ = -92						; size = 92
_hval$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_sha1@12 PROC						; COMDAT

; 275  : {   sha1_ctx    cx[1];

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 5c	 sub	 esp, 92			; 0000005cH

; 276  : 
; 277  :     sha1_begin(cx); sha1_hash(data, len, cx); sha1_end(hval, cx);

  00008	8d 45 a4	 lea	 eax, DWORD PTR _cx$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _sha1_begin@4
  00011	8d 45 a4	 lea	 eax, DWORD PTR _cx$[ebp]
  00014	50		 push	 eax
  00015	ff 75 10	 push	 DWORD PTR _len$[ebp]
  00018	ff 75 0c	 push	 DWORD PTR _data$[ebp]
  0001b	e8 00 00 00 00	 call	 _sha1_hash@12
  00020	8d 45 a4	 lea	 eax, DWORD PTR _cx$[ebp]
  00023	50		 push	 eax
  00024	ff 75 08	 push	 DWORD PTR _hval$[ebp]
  00027	e8 00 00 00 00	 call	 _sha1_end@8

; 278  : }

  0002c	c9		 leave
  0002d	c2 0c 00	 ret	 12			; 0000000cH
_sha1@12 ENDP
_TEXT	ENDS
END
