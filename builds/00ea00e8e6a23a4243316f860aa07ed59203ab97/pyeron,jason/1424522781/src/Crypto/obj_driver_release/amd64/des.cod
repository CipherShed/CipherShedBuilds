; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

pc1	DB	039H
	DB	031H
	DB	029H
	DB	021H
	DB	019H
	DB	011H
	DB	09H
	DB	01H
	DB	03aH
	DB	032H
	DB	02aH
	DB	022H
	DB	01aH
	DB	012H
	DB	0aH
	DB	02H
	DB	03bH
	DB	033H
	DB	02bH
	DB	023H
	DB	01bH
	DB	013H
	DB	0bH
	DB	03H
	DB	03cH
	DB	034H
	DB	02cH
	DB	024H
	DB	03fH
	DB	037H
	DB	02fH
	DB	027H
	DB	01fH
	DB	017H
	DB	0fH
	DB	07H
	DB	03eH
	DB	036H
	DB	02eH
	DB	026H
	DB	01eH
	DB	016H
	DB	0eH
	DB	06H
	DB	03dH
	DB	035H
	DB	02dH
	DB	025H
	DB	01dH
	DB	015H
	DB	0dH
	DB	05H
	DB	01cH
	DB	014H
	DB	0cH
	DB	04H
totrot	DB	01H
	DB	02H
	DB	04H
	DB	06H
	DB	08H
	DB	0aH
	DB	0cH
	DB	0eH
	DB	0fH
	DB	011H
	DB	013H
	DB	015H
	DB	017H
	DB	019H
	DB	01bH
	DB	01cH
pc2	DB	0eH
	DB	011H
	DB	0bH
	DB	018H
	DB	01H
	DB	05H
	DB	03H
	DB	01cH
	DB	0fH
	DB	06H
	DB	015H
	DB	0aH
	DB	017H
	DB	013H
	DB	0cH
	DB	04H
	DB	01aH
	DB	08H
	DB	010H
	DB	07H
	DB	01bH
	DB	014H
	DB	0dH
	DB	02H
	DB	029H
	DB	034H
	DB	01fH
	DB	025H
	DB	02fH
	DB	037H
	DB	01eH
	DB	028H
	DB	033H
	DB	02dH
	DB	021H
	DB	030H
	DB	02cH
	DB	031H
	DB	027H
	DB	038H
	DB	022H
	DB	035H
	DB	02eH
	DB	02aH
	DB	032H
	DB	024H
	DB	01dH
	DB	020H
bytebit	DD	080H
	DD	040H
	DD	020H
	DD	010H
	DD	08H
	DD	04H
	DD	02H
	DD	01H
Spbox	DD	01010400H
	DD	00H
	DD	010000H
	DD	01010404H
	DD	01010004H
	DD	010404H
	DD	04H
	DD	010000H
	DD	0400H
	DD	01010400H
	DD	01010404H
	DD	0400H
	DD	01000404H
	DD	01010004H
	DD	01000000H
	DD	04H
	DD	0404H
	DD	01000400H
	DD	01000400H
	DD	010400H
	DD	010400H
	DD	01010000H
	DD	01010000H
	DD	01000404H
	DD	010004H
	DD	01000004H
	DD	01000004H
	DD	010004H
	DD	00H
	DD	0404H
	DD	010404H
	DD	01000000H
	DD	010000H
	DD	01010404H
	DD	04H
	DD	01010000H
	DD	01010400H
	DD	01000000H
	DD	01000000H
	DD	0400H
	DD	01010004H
	DD	010000H
	DD	010400H
	DD	01000004H
	DD	0400H
	DD	04H
	DD	01000404H
	DD	010404H
	DD	01010404H
	DD	010004H
	DD	01010000H
	DD	01000404H
	DD	01000004H
	DD	0404H
	DD	010404H
	DD	01010400H
	DD	0404H
	DD	01000400H
	DD	01000400H
	DD	00H
	DD	010004H
	DD	010400H
	DD	00H
	DD	01010004H
	DD	080108020H
	DD	080008000H
	DD	08000H
	DD	0108020H
	DD	0100000H
	DD	020H
	DD	080100020H
	DD	080008020H
	DD	080000020H
	DD	080108020H
	DD	080108000H
	DD	080000000H
	DD	080008000H
	DD	0100000H
	DD	020H
	DD	080100020H
	DD	0108000H
	DD	0100020H
	DD	080008020H
	DD	00H
	DD	080000000H
	DD	08000H
	DD	0108020H
	DD	080100000H
	DD	0100020H
	DD	080000020H
	DD	00H
	DD	0108000H
	DD	08020H
	DD	080108000H
	DD	080100000H
	DD	08020H
	DD	00H
	DD	0108020H
	DD	080100020H
	DD	0100000H
	DD	080008020H
	DD	080100000H
	DD	080108000H
	DD	08000H
	DD	080100000H
	DD	080008000H
	DD	020H
	DD	080108020H
	DD	0108020H
	DD	020H
	DD	08000H
	DD	080000000H
	DD	08020H
	DD	080108000H
	DD	0100000H
	DD	080000020H
	DD	0100020H
	DD	080008020H
	DD	080000020H
	DD	0100020H
	DD	0108000H
	DD	00H
	DD	080008000H
	DD	08020H
	DD	080000000H
	DD	080100020H
	DD	080108020H
	DD	0108000H
	DD	0208H
	DD	08020200H
	DD	00H
	DD	08020008H
	DD	08000200H
	DD	00H
	DD	020208H
	DD	08000200H
	DD	020008H
	DD	08000008H
	DD	08000008H
	DD	020000H
	DD	08020208H
	DD	020008H
	DD	08020000H
	DD	0208H
	DD	08000000H
	DD	08H
	DD	08020200H
	DD	0200H
	DD	020200H
	DD	08020000H
	DD	08020008H
	DD	020208H
	DD	08000208H
	DD	020200H
	DD	020000H
	DD	08000208H
	DD	08H
	DD	08020208H
	DD	0200H
	DD	08000000H
	DD	08020200H
	DD	08000000H
	DD	020008H
	DD	0208H
	DD	020000H
	DD	08020200H
	DD	08000200H
	DD	00H
	DD	0200H
	DD	020008H
	DD	08020208H
	DD	08000200H
	DD	08000008H
	DD	0200H
	DD	00H
	DD	08020008H
	DD	08000208H
	DD	020000H
	DD	08000000H
	DD	08020208H
	DD	08H
	DD	020208H
	DD	020200H
	DD	08000008H
	DD	08020000H
	DD	08000208H
	DD	0208H
	DD	08020000H
	DD	020208H
	DD	08H
	DD	08020008H
	DD	020200H
	DD	0802001H
	DD	02081H
	DD	02081H
	DD	080H
	DD	0802080H
	DD	0800081H
	DD	0800001H
	DD	02001H
	DD	00H
	DD	0802000H
	DD	0802000H
	DD	0802081H
	DD	081H
	DD	00H
	DD	0800080H
	DD	0800001H
	DD	01H
	DD	02000H
	DD	0800000H
	DD	0802001H
	DD	080H
	DD	0800000H
	DD	02001H
	DD	02080H
	DD	0800081H
	DD	01H
	DD	02080H
	DD	0800080H
	DD	02000H
	DD	0802080H
	DD	0802081H
	DD	081H
	DD	0800080H
	DD	0800001H
	DD	0802000H
	DD	0802081H
	DD	081H
	DD	00H
	DD	00H
	DD	0802000H
	DD	02080H
	DD	0800080H
	DD	0800081H
	DD	01H
	DD	0802001H
	DD	02081H
	DD	02081H
	DD	080H
	DD	0802081H
	DD	081H
	DD	01H
	DD	02000H
	DD	0800001H
	DD	02001H
	DD	0802080H
	DD	0800081H
	DD	02001H
	DD	02080H
	DD	0800000H
	DD	0802001H
	DD	080H
	DD	0800000H
	DD	02000H
	DD	0802080H
	DD	0100H
	DD	02080100H
	DD	02080000H
	DD	042000100H
	DD	080000H
	DD	0100H
	DD	040000000H
	DD	02080000H
	DD	040080100H
	DD	080000H
	DD	02000100H
	DD	040080100H
	DD	042000100H
	DD	042080000H
	DD	080100H
	DD	040000000H
	DD	02000000H
	DD	040080000H
	DD	040080000H
	DD	00H
	DD	040000100H
	DD	042080100H
	DD	042080100H
	DD	02000100H
	DD	042080000H
	DD	040000100H
	DD	00H
	DD	042000000H
	DD	02080100H
	DD	02000000H
	DD	042000000H
	DD	080100H
	DD	080000H
	DD	042000100H
	DD	0100H
	DD	02000000H
	DD	040000000H
	DD	02080000H
	DD	042000100H
	DD	040080100H
	DD	02000100H
	DD	040000000H
	DD	042080000H
	DD	02080100H
	DD	040080100H
	DD	0100H
	DD	02000000H
	DD	042080000H
	DD	042080100H
	DD	080100H
	DD	042000000H
	DD	042080100H
	DD	02080000H
	DD	00H
	DD	040080000H
	DD	042000000H
	DD	080100H
	DD	02000100H
	DD	040000100H
	DD	080000H
	DD	00H
	DD	040080000H
	DD	02080100H
	DD	040000100H
	DD	020000010H
	DD	020400000H
	DD	04000H
	DD	020404010H
	DD	020400000H
	DD	010H
	DD	020404010H
	DD	0400000H
	DD	020004000H
	DD	0404010H
	DD	0400000H
	DD	020000010H
	DD	0400010H
	DD	020004000H
	DD	020000000H
	DD	04010H
	DD	00H
	DD	0400010H
	DD	020004010H
	DD	04000H
	DD	0404000H
	DD	020004010H
	DD	010H
	DD	020400010H
	DD	020400010H
	DD	00H
	DD	0404010H
	DD	020404000H
	DD	04010H
	DD	0404000H
	DD	020404000H
	DD	020000000H
	DD	020004000H
	DD	010H
	DD	020400010H
	DD	0404000H
	DD	020404010H
	DD	0400000H
	DD	04010H
	DD	020000010H
	DD	0400000H
	DD	020004000H
	DD	020000000H
	DD	04010H
	DD	020000010H
	DD	020404010H
	DD	0404000H
	DD	020400000H
	DD	0404010H
	DD	020404000H
	DD	00H
	DD	020400010H
	DD	010H
	DD	04000H
	DD	020400000H
	DD	0404010H
	DD	04000H
	DD	0400010H
	DD	020004010H
	DD	00H
	DD	020404000H
	DD	020000000H
	DD	0400010H
	DD	020004010H
	DD	0200000H
	DD	04200002H
	DD	04000802H
	DD	00H
	DD	0800H
	DD	04000802H
	DD	0200802H
	DD	04200800H
	DD	04200802H
	DD	0200000H
	DD	00H
	DD	04000002H
	DD	02H
	DD	04000000H
	DD	04200002H
	DD	0802H
	DD	04000800H
	DD	0200802H
	DD	0200002H
	DD	04000800H
	DD	04000002H
	DD	04200000H
	DD	04200800H
	DD	0200002H
	DD	04200000H
	DD	0800H
	DD	0802H
	DD	04200802H
	DD	0200800H
	DD	02H
	DD	04000000H
	DD	0200800H
	DD	04000000H
	DD	0200800H
	DD	0200000H
	DD	04000802H
	DD	04000802H
	DD	04200002H
	DD	04200002H
	DD	02H
	DD	0200002H
	DD	04000000H
	DD	04000800H
	DD	0200000H
	DD	04200800H
	DD	0802H
	DD	0200802H
	DD	04200800H
	DD	0802H
	DD	04000002H
	DD	04200802H
	DD	04200000H
	DD	0200800H
	DD	00H
	DD	02H
	DD	04200802H
	DD	00H
	DD	0200802H
	DD	04200000H
	DD	0800H
	DD	04000002H
	DD	04000800H
	DD	0800H
	DD	0200002H
	DD	010001040H
	DD	01000H
	DD	040000H
	DD	010041040H
	DD	010000000H
	DD	010001040H
	DD	040H
	DD	010000000H
	DD	040040H
	DD	010040000H
	DD	010041040H
	DD	041000H
	DD	010041000H
	DD	041040H
	DD	01000H
	DD	040H
	DD	010040000H
	DD	010000040H
	DD	010001000H
	DD	01040H
	DD	041000H
	DD	040040H
	DD	010040040H
	DD	010041000H
	DD	01040H
	DD	00H
	DD	00H
	DD	010040040H
	DD	010000040H
	DD	010001000H
	DD	041040H
	DD	040000H
	DD	041040H
	DD	040000H
	DD	010041000H
	DD	01000H
	DD	040H
	DD	010040040H
	DD	01000H
	DD	041040H
	DD	010001000H
	DD	040H
	DD	010000040H
	DD	010040000H
	DD	010040040H
	DD	010000000H
	DD	040000H
	DD	010001040H
	DD	00H
	DD	010041040H
	DD	040040H
	DD	010000040H
	DD	010040000H
	DD	010001000H
	DD	010001040H
	DD	00H
	DD	010041040H
	DD	041000H
	DD	041000H
	DD	01040H
	DD	01040H
	DD	040040H
	DD	010000000H
	DD	010041000H
; Function compile flags: /Ogspy
; File c:\home\public\desktop\projects\ciphershed.build\src\crypto\des.c
;	COMDAT rotrFixed
_TEXT	SEGMENT
x$ = 8
y$ = 16
rotrFixed PROC						; COMDAT

; 36   : {

  00000	8b c1		 mov	 eax, ecx

; 37   : 	return (word32)((x>>y) | (x<<(sizeof(word32)*8-y)));

  00002	8b ca		 mov	 ecx, edx
  00004	d3 c8		 ror	 eax, cl

; 38   : }

  00006	c3		 ret	 0
rotrFixed ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT rotlFixed
_TEXT	SEGMENT
x$ = 8
y$ = 16
rotlFixed PROC						; COMDAT

; 31   : {

  00000	8b c1		 mov	 eax, ecx

; 32   : 	return (word32)((x<<y) | (x>>(sizeof(word32)*8-y)));

  00002	8b ca		 mov	 ecx, edx
  00004	d3 c0		 rol	 eax, cl

; 33   : }

  00006	c3		 ret	 0
rotlFixed ENDP
;	COMDAT pdata
pdata	SEGMENT
$pdata$RawProcessBlock DD imagerel RawProcessBlock
	DD	imagerel RawProcessBlock+376
	DD	imagerel $unwind$RawProcessBlock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RawProcessBlock DD 081301H
	DD	04c413H
	DD	03740fH
	DD	02640bH
	DD	013407H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT RawProcessBlock
_TEXT	SEGMENT
l_$ = 8
r_$ = 16
k$ = 24
RawProcessBlock PROC					; COMDAT

; 317  : {

  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 70 10	 mov	 QWORD PTR [rax+16], rsi
  0000b	48 89 78 18	 mov	 QWORD PTR [rax+24], rdi
  0000f	4c 89 60 20	 mov	 QWORD PTR [rax+32], r12

; 318  : 	word32 l = *l_, r = *r_;

  00013	44 8b 19	 mov	 r11d, DWORD PTR [rcx]
  00016	8b 1a		 mov	 ebx, DWORD PTR [rdx]
  00018	4c 8b ca	 mov	 r9, rdx
  0001b	4c 8b d1	 mov	 r10, rcx
  0001e	49 8d 78 08	 lea	 rdi, QWORD PTR [r8+8]
  00022	be 08 00 00 00	 mov	 esi, 8
  00027	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:Spbox
$LL3@RawProcess:

; 319  : 	const word32 *kptr=k;
; 320  : 	unsigned i;
; 321  : 
; 322  : 	for (i=0; i<8; i++)
; 323  : 	{
; 324  : 		word32 work = rotrFixed(r, 4U) ^ kptr[4*i+0];

  0002e	8b c3		 mov	 eax, ebx
  00030	c1 c8 04	 ror	 eax, 4
  00033	33 47 f8	 xor	 eax, DWORD PTR [rdi-8]

; 325  : 		l ^= Spbox[6][(work) & 0x3f]
; 326  : 		  ^  Spbox[4][(work >> 8) & 0x3f]
; 327  : 		  ^  Spbox[2][(work >> 16) & 0x3f]
; 328  : 		  ^  Spbox[0][(work >> 24) & 0x3f];

  00036	44 8b c0	 mov	 r8d, eax
  00039	8b c8		 mov	 ecx, eax
  0003b	48 c1 e8 10	 shr	 rax, 16
  0003f	83 e0 3f	 and	 eax, 63			; 0000003fH
  00042	48 c1 e9 18	 shr	 rcx, 24
  00046	83 e1 3f	 and	 ecx, 63			; 0000003fH
  00049	41 8b 14 8c	 mov	 edx, DWORD PTR [r12+rcx*4]
  0004d	41 33 94 84 00
	02 00 00	 xor	 edx, DWORD PTR [r12+rax*4+512]
  00055	49 8b c0	 mov	 rax, r8
  00058	41 83 e0 3f	 and	 r8d, 63			; 0000003fH
  0005c	48 c1 e8 08	 shr	 rax, 8
  00060	83 e0 3f	 and	 eax, 63			; 0000003fH
  00063	41 33 94 84 00
	04 00 00	 xor	 edx, DWORD PTR [r12+rax*4+1024]

; 329  : 		work = r ^ kptr[4*i+1];

  0006b	8b 47 fc	 mov	 eax, DWORD PTR [rdi-4]
  0006e	43 33 94 84 00
	06 00 00	 xor	 edx, DWORD PTR [r12+r8*4+1536]
  00076	33 c3		 xor	 eax, ebx

; 330  : 		l ^= Spbox[7][(work) & 0x3f]
; 331  : 		  ^  Spbox[5][(work >> 8) & 0x3f]
; 332  : 		  ^  Spbox[3][(work >> 16) & 0x3f]
; 333  : 		  ^  Spbox[1][(work >> 24) & 0x3f];

  00078	44 8b c0	 mov	 r8d, eax
  0007b	8b c8		 mov	 ecx, eax
  0007d	48 c1 e8 10	 shr	 rax, 16
  00081	83 e0 3f	 and	 eax, 63			; 0000003fH
  00084	44 33 da	 xor	 r11d, edx
  00087	48 c1 e9 18	 shr	 rcx, 24
  0008b	83 e1 3f	 and	 ecx, 63			; 0000003fH
  0008e	41 8b 94 8c 00
	01 00 00	 mov	 edx, DWORD PTR [r12+rcx*4+256]
  00096	41 33 94 84 00
	03 00 00	 xor	 edx, DWORD PTR [r12+rax*4+768]
  0009e	49 8b c0	 mov	 rax, r8
  000a1	41 83 e0 3f	 and	 r8d, 63			; 0000003fH
  000a5	48 c1 e8 08	 shr	 rax, 8
  000a9	83 e0 3f	 and	 eax, 63			; 0000003fH
  000ac	41 33 94 84 00
	05 00 00	 xor	 edx, DWORD PTR [r12+rax*4+1280]
  000b4	43 33 94 84 00
	07 00 00	 xor	 edx, DWORD PTR [r12+r8*4+1792]
  000bc	44 33 da	 xor	 r11d, edx

; 334  : 
; 335  : 		work = rotrFixed(l, 4U) ^ kptr[4*i+2];

  000bf	41 8b c3	 mov	 eax, r11d
  000c2	c1 c8 04	 ror	 eax, 4
  000c5	33 07		 xor	 eax, DWORD PTR [rdi]
  000c7	48 83 c7 10	 add	 rdi, 16

; 336  : 		r ^= Spbox[6][(work) & 0x3f]
; 337  : 		  ^  Spbox[4][(work >> 8) & 0x3f]
; 338  : 		  ^  Spbox[2][(work >> 16) & 0x3f]
; 339  : 		  ^  Spbox[0][(work >> 24) & 0x3f];

  000cb	44 8b c0	 mov	 r8d, eax
  000ce	8b c8		 mov	 ecx, eax
  000d0	48 c1 e8 10	 shr	 rax, 16
  000d4	83 e0 3f	 and	 eax, 63			; 0000003fH
  000d7	48 c1 e9 18	 shr	 rcx, 24
  000db	83 e1 3f	 and	 ecx, 63			; 0000003fH
  000de	41 8b 14 8c	 mov	 edx, DWORD PTR [r12+rcx*4]
  000e2	41 33 94 84 00
	02 00 00	 xor	 edx, DWORD PTR [r12+rax*4+512]
  000ea	49 8b c0	 mov	 rax, r8
  000ed	41 83 e0 3f	 and	 r8d, 63			; 0000003fH
  000f1	48 c1 e8 08	 shr	 rax, 8
  000f5	83 e0 3f	 and	 eax, 63			; 0000003fH
  000f8	41 33 94 84 00
	04 00 00	 xor	 edx, DWORD PTR [r12+rax*4+1024]

; 340  : 		work = l ^ kptr[4*i+3];

  00100	8b 47 f4	 mov	 eax, DWORD PTR [rdi-12]
  00103	43 33 94 84 00
	06 00 00	 xor	 edx, DWORD PTR [r12+r8*4+1536]
  0010b	41 33 c3	 xor	 eax, r11d

; 341  : 		r ^= Spbox[7][(work) & 0x3f]
; 342  : 		  ^  Spbox[5][(work >> 8) & 0x3f]
; 343  : 		  ^  Spbox[3][(work >> 16) & 0x3f]
; 344  : 		  ^  Spbox[1][(work >> 24) & 0x3f];

  0010e	44 8b c0	 mov	 r8d, eax
  00111	8b c8		 mov	 ecx, eax
  00113	33 da		 xor	 ebx, edx
  00115	48 c1 e8 10	 shr	 rax, 16
  00119	48 c1 e9 18	 shr	 rcx, 24
  0011d	83 e0 3f	 and	 eax, 63			; 0000003fH
  00120	83 e1 3f	 and	 ecx, 63			; 0000003fH
  00123	41 8b 94 8c 00
	01 00 00	 mov	 edx, DWORD PTR [r12+rcx*4+256]
  0012b	41 33 94 84 00
	03 00 00	 xor	 edx, DWORD PTR [r12+rax*4+768]
  00133	49 8b c0	 mov	 rax, r8
  00136	41 83 e0 3f	 and	 r8d, 63			; 0000003fH
  0013a	48 c1 e8 08	 shr	 rax, 8
  0013e	83 e0 3f	 and	 eax, 63			; 0000003fH
  00141	41 33 94 84 00
	05 00 00	 xor	 edx, DWORD PTR [r12+rax*4+1280]
  00149	43 33 94 84 00
	07 00 00	 xor	 edx, DWORD PTR [r12+r8*4+1792]
  00151	33 da		 xor	 ebx, edx
  00153	48 83 ee 01	 sub	 rsi, 1
  00157	0f 85 d1 fe ff
	ff		 jne	 $LL3@RawProcess

; 345  : 	}
; 346  : 
; 347  : 	*l_ = l; *r_ = r;
; 348  : }

  0015d	48 8b 74 24 10	 mov	 rsi, QWORD PTR [rsp+16]
  00162	48 8b 7c 24 18	 mov	 rdi, QWORD PTR [rsp+24]
  00167	4c 8b 64 24 20	 mov	 r12, QWORD PTR [rsp+32]
  0016c	41 89 19	 mov	 DWORD PTR [r9], ebx
  0016f	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  00174	45 89 1a	 mov	 DWORD PTR [r10], r11d
  00177	c3		 ret	 0
RawProcessBlock ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
;	COMDAT pdata
; File c:\winddk\7600.16385.1\inc\ddk\wdm.h
pdata	SEGMENT
$pdata$RawSetKey DD imagerel RawSetKey
	DD	imagerel RawSetKey+489
	DD	imagerel $unwind$RawSetKey
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RawSetKey DD 0b2d19H
	DD	019641bH
	DD	017541bH
	DD	016341bH
	DD	012011bH
	DD	0d012e014H
	DD	07010H
	DD	imagerel __GSHandlerCheck
	DD	080H
; Function compile flags: /Ogspy
; File c:\home\public\desktop\projects\ciphershed.build\src\crypto\des.c
xdata	ENDS
;	COMDAT RawSetKey
_TEXT	SEGMENT
buffer$ = 0
__$ArrayPad$ = 128
encryption$ = 176
key$ = 184
scheduledKey$ = 192
RawSetKey PROC						; COMDAT

; 262  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	41 55		 push	 r13
  00012	41 56		 push	 r14
  00014	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0002d	4d 8b c8	 mov	 r9, r8
  00030	8b f1		 mov	 esi, ecx

; 263  : 	byte buffer[56+56+8];
; 264  : 	byte *const pc1m=buffer;                 /* place to modify pc1 into */
; 265  : 	byte *const pcr=pc1m+56;                 /* place to rotate pc1 into */
; 266  : 	byte *const ks=pcr+56;
; 267  : 	register int i,j,l;
; 268  : 	int m;
; 269  : 	
; 270  : 	for (j=0; j<56; j++) {          /* convert pc1 to bits of key */

  00032	33 ff		 xor	 edi, edi
  00034	4c 8b c2	 mov	 r8, rdx
  00037	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:__ImageBase
$LL22@RawSetKey:

; 271  : 		l=pc1[j]-1;             /* integer bit location  */

  0003e	42 0f b6 84 2f
	00 00 00 00	 movzx	 eax, BYTE PTR pc1[rdi+r13]
  00047	ff c8		 dec	 eax
  00049	48 63 d0	 movsxd	 rdx, eax

; 272  : 		m = l & 07;             /* find bit              */
; 273  : 		pc1m[j]=(key[l>>3] &    /* find which key byte l is in */
; 274  : 			bytebit[m])     /* and which bit of that byte */
; 275  : 			? 1 : 0;        /* and store 1-bit result */

  0004c	48 8b c2	 mov	 rax, rdx
  0004f	83 e2 07	 and	 edx, 7
  00052	48 c1 f8 03	 sar	 rax, 3
  00056	42 8a 0c 00	 mov	 cl, BYTE PTR [rax+r8]
  0005a	41 84 8c 95 00
	00 00 00	 test	 cl, BYTE PTR bytebit[r13+rdx*4]
  00062	0f 95 c0	 setne	 al
  00065	48 ff c7	 inc	 rdi
  00068	48 83 ff 38	 cmp	 rdi, 56			; 00000038H
  0006c	88 44 3c ff	 mov	 BYTE PTR buffer$[rsp+rdi-1], al
  00070	7c cc		 jl	 SHORT $LL22@RawSetKey

; 276  : 	}
; 277  : 	for (i=0; i<16; i++) {          /* key chunk for each iteration */

  00072	33 db		 xor	 ebx, ebx
  00074	49 8d 69 04	 lea	 rbp, QWORD PTR [r9+4]
  00078	44 8d 73 1c	 lea	 r14d, QWORD PTR [rbx+28]
$LL19@RawSetKey:

; 278  : 		memset(ks,0,8);         /* Clear key schedule */

  0007c	42 0f b6 94 2b
	00 00 00 00	 movzx	 edx, BYTE PTR totrot[rbx+r13]
  00085	33 c0		 xor	 eax, eax

; 279  : 		for (j=0; j<56; j++)    /* rotate pc1 the right amount */

  00087	45 33 c0	 xor	 r8d, r8d
  0008a	48 89 44 24 70	 mov	 QWORD PTR buffer$[rsp+112], rax
  0008f	33 ff		 xor	 edi, edi
$LL16@RawSetKey:

; 280  : 			pcr[j] = pc1m[(l=j+totrot[i])<(j<28? 28 : 56) ? l: l-28];

  00091	45 3b c6	 cmp	 r8d, r14d
  00094	8d 42 e4	 lea	 eax, DWORD PTR [rdx-28]
  00097	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0009c	41 0f 4c ce	 cmovl	 ecx, r14d
  000a0	3b d1		 cmp	 edx, ecx
  000a2	0f 4c c2	 cmovl	 eax, edx
  000a5	48 ff c7	 inc	 rdi
  000a8	41 ff c0	 inc	 r8d
  000ab	48 98		 cdqe
  000ad	ff c2		 inc	 edx
  000af	48 83 ff 38	 cmp	 rdi, 56			; 00000038H
  000b3	8a 0c 04	 mov	 cl, BYTE PTR buffer$[rsp+rax]
  000b6	88 4c 3c 37	 mov	 BYTE PTR buffer$[rsp+rdi+55], cl
  000ba	7c d5		 jl	 SHORT $LL16@RawSetKey

; 281  : 		/* rotate left and right halves independently */
; 282  : 		for (j=0; j<48; j++){   /* select bits individually */

  000bc	45 33 c0	 xor	 r8d, r8d
  000bf	4c 8d 15 00 00
	00 00		 lea	 r10, OFFSET FLAT:pc2
$LL13@RawSetKey:

; 283  : 			/* check bit that goes to ks[j] */
; 284  : 			if (pcr[pc2[j]-1]){

  000c6	41 0f b6 02	 movzx	 eax, BYTE PTR [r10]
  000ca	80 7c 04 37 00	 cmp	 BYTE PTR buffer$[rsp+rax+55], 0
  000cf	74 2e		 je	 SHORT $LN12@RawSetKey

; 285  : 				/* mask it in if it's there */
; 286  : 				l= j % 6;

  000d1	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000d6	41 f7 e8	 imul	 r8d
  000d9	8b c2		 mov	 eax, edx
  000db	c1 e8 1f	 shr	 eax, 31
  000de	03 d0		 add	 edx, eax
  000e0	41 8b c0	 mov	 eax, r8d
  000e3	8d 0c 52	 lea	 ecx, DWORD PTR [rdx+rdx*2]

; 287  : 				ks[j/6] |= bytebit[l] >> 2;

  000e6	48 63 fa	 movsxd	 rdi, edx
  000e9	03 c9		 add	 ecx, ecx
  000eb	2b c1		 sub	 eax, ecx
  000ed	48 63 c8	 movsxd	 rcx, eax
  000f0	41 8b 84 8d 00
	00 00 00	 mov	 eax, DWORD PTR bytebit[r13+rcx*4]
  000f8	c1 f8 02	 sar	 eax, 2
  000fb	08 44 3c 70	 or	 BYTE PTR buffer$[rsp+rdi+112], al
$LN12@RawSetKey:
  000ff	41 ff c0	 inc	 r8d
  00102	49 ff c2	 inc	 r10
  00105	41 83 f8 30	 cmp	 r8d, 48			; 00000030H
  00109	7c bb		 jl	 SHORT $LL13@RawSetKey

; 288  : 			}
; 289  : 		}
; 290  : 		/* Now convert to odd/even interleaved form for use in F */
; 291  : 		scheduledKey[2*i] = ((word32)ks[0] << 24)
; 292  : 			| ((word32)ks[2] << 16)
; 293  : 			| ((word32)ks[4] << 8)
; 294  : 			| ((word32)ks[6]);

  0010b	0f b6 44 24 72	 movzx	 eax, BYTE PTR buffer$[rsp+114]
  00110	0f b6 4c 24 70	 movzx	 ecx, BYTE PTR buffer$[rsp+112]
  00115	c1 e1 08	 shl	 ecx, 8
  00118	0b c8		 or	 ecx, eax
  0011a	0f b6 44 24 74	 movzx	 eax, BYTE PTR buffer$[rsp+116]
  0011f	c1 e1 08	 shl	 ecx, 8
  00122	0b c8		 or	 ecx, eax
  00124	0f b6 44 24 76	 movzx	 eax, BYTE PTR buffer$[rsp+118]
  00129	c1 e1 08	 shl	 ecx, 8
  0012c	0b c8		 or	 ecx, eax

; 295  : 		scheduledKey[2*i+1] = ((word32)ks[1] << 24)
; 296  : 			| ((word32)ks[3] << 16)
; 297  : 			| ((word32)ks[5] << 8)
; 298  : 			| ((word32)ks[7]);

  0012e	0f b6 44 24 73	 movzx	 eax, BYTE PTR buffer$[rsp+115]
  00133	41 89 0c d9	 mov	 DWORD PTR [r9+rbx*8], ecx
  00137	0f b6 4c 24 71	 movzx	 ecx, BYTE PTR buffer$[rsp+113]
  0013c	48 ff c3	 inc	 rbx
  0013f	c1 e1 08	 shl	 ecx, 8
  00142	0b c8		 or	 ecx, eax
  00144	0f b6 44 24 75	 movzx	 eax, BYTE PTR buffer$[rsp+117]
  00149	c1 e1 08	 shl	 ecx, 8
  0014c	0b c8		 or	 ecx, eax
  0014e	0f b6 44 24 77	 movzx	 eax, BYTE PTR buffer$[rsp+119]
  00153	c1 e1 08	 shl	 ecx, 8
  00156	0b c8		 or	 ecx, eax
  00158	89 4d 00	 mov	 DWORD PTR [rbp], ecx
  0015b	48 83 c5 08	 add	 rbp, 8
  0015f	48 83 fb 10	 cmp	 rbx, 16
  00163	0f 8c 13 ff ff
	ff		 jl	 $LL19@RawSetKey

; 299  : 	}
; 300  : 	
; 301  : 	if (!encryption)     // reverse key schedule order

  00169	85 f6		 test	 esi, esi
  0016b	75 30		 jne	 SHORT $LN5@RawSetKey

; 302  : 		for (i=0; i<16; i+=2)

  0016d	33 d2		 xor	 edx, edx
  0016f	49 8d 79 7c	 lea	 rdi, QWORD PTR [r9+124]
$LL8@RawSetKey:

; 303  : 		{
; 304  : 			word32 b = scheduledKey[i];
; 305  : 			scheduledKey[i] = scheduledKey[32-2-i];

  00173	8b 47 fc	 mov	 eax, DWORD PTR [rdi-4]
  00176	41 8b 0c 91	 mov	 ecx, DWORD PTR [r9+rdx*4]
  0017a	41 89 04 91	 mov	 DWORD PTR [r9+rdx*4], eax

; 306  : 			scheduledKey[32-2-i] = b;

  0017e	89 4f fc	 mov	 DWORD PTR [rdi-4], ecx

; 307  : 
; 308  : 			b = scheduledKey[i+1];
; 309  : 			scheduledKey[i+1] = scheduledKey[32-1-i];

  00181	8b 07		 mov	 eax, DWORD PTR [rdi]
  00183	41 8b 4c 91 04	 mov	 ecx, DWORD PTR [r9+rdx*4+4]
  00188	41 89 44 91 04	 mov	 DWORD PTR [r9+rdx*4+4], eax
  0018d	48 83 c2 02	 add	 rdx, 2

; 310  : 			scheduledKey[32-1-i] = b;

  00191	89 0f		 mov	 DWORD PTR [rdi], ecx
  00193	48 83 ef 08	 sub	 rdi, 8
  00197	48 83 fa 10	 cmp	 rdx, 16
  0019b	7c d6		 jl	 SHORT $LL8@RawSetKey
$LN5@RawSetKey:

; 311  : 		}
; 312  : 
; 313  : 	burn (buffer, sizeof (buffer));

  0019d	ba 78 00 00 00	 mov	 edx, 120		; 00000078H
  001a2	48 8d 3c 24	 lea	 rdi, QWORD PTR buffer$[rsp]
  001a6	33 c0		 xor	 eax, eax
  001a8	48 8b ca	 mov	 rcx, rdx
  001ab	4c 8d 04 24	 lea	 r8, QWORD PTR buffer$[rsp]
  001af	f3 aa		 rep stosb
$LL2@RawSetKey:
  001b1	41 88 00	 mov	 BYTE PTR [r8], al
  001b4	49 ff c0	 inc	 r8
  001b7	83 ea 01	 sub	 edx, 1
  001ba	75 f5		 jne	 SHORT $LL2@RawSetKey

; 314  : }

  001bc	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001c4	48 33 cc	 xor	 rcx, rsp
  001c7	e8 00 00 00 00	 call	 __security_check_cookie
  001cc	4c 8d 9c 24 90
	00 00 00	 lea	 r11, QWORD PTR [rsp+144]
  001d4	49 8b 5b 20	 mov	 rbx, QWORD PTR [r11+32]
  001d8	49 8b 6b 28	 mov	 rbp, QWORD PTR [r11+40]
  001dc	49 8b 73 38	 mov	 rsi, QWORD PTR [r11+56]
  001e0	49 8b e3	 mov	 rsp, r11
  001e3	41 5e		 pop	 r14
  001e5	41 5d		 pop	 r13
  001e7	5f		 pop	 rdi
  001e8	c3		 ret	 0
RawSetKey ENDP
PUBLIC	TripleDesEncrypt
;	COMDAT pdata
; File c:\home\public\desktop\projects\ciphershed.build\src\common\endian.c
pdata	SEGMENT
$pdata$TripleDesEncrypt DD imagerel $LN35
	DD	imagerel $LN35+542
	DD	imagerel $unwind$TripleDesEncrypt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TripleDesEncrypt DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
; Function compile flags: /Ogspy
; File c:\home\public\desktop\projects\ciphershed.build\src\crypto\des.c
xdata	ENDS
;	COMDAT TripleDesEncrypt
_TEXT	SEGMENT
right$ = 48
inBlock$ = 48
outBlock$ = 56
key$ = 64
left$ = 72
encrypt$ = 72
TripleDesEncrypt PROC					; COMDAT

; 361  : {

$LN35:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 362  : 	word32 left = BE32 (((word32 *)inBlock)[0]);

  0000f	44 8b 11	 mov	 r10d, DWORD PTR [rcx]
  00012	49 8b d8	 mov	 rbx, r8
  00015	48 8b f2	 mov	 rsi, rdx

; 363  : 	word32 right = BE32 (((word32 *)inBlock)[1]);

  00018	8b 51 04	 mov	 edx, DWORD PTR [rcx+4]
  0001b	41 8b c2	 mov	 eax, r10d
  0001e	41 8b f9	 mov	 edi, r9d
  00021	c1 e8 08	 shr	 eax, 8
  00024	44 0f b6 d8	 movzx	 r11d, al
  00028	41 0f b6 c2	 movzx	 eax, r10b
  0002c	c1 e0 08	 shl	 eax, 8
  0002f	44 0b d8	 or	 r11d, eax
  00032	41 8b c2	 mov	 eax, r10d
  00035	41 c1 ea 18	 shr	 r10d, 24
  00039	c1 e8 10	 shr	 eax, 16
  0003c	41 c1 e3 08	 shl	 r11d, 8
  00040	44 0f b6 c0	 movzx	 r8d, al
  00044	8b c2		 mov	 eax, edx
  00046	c1 e8 08	 shr	 eax, 8
  00049	45 0b d8	 or	 r11d, r8d

; 364  : 	word32 work;
; 365  : 
; 366  : 	right = rotlFixed(right, 4U);

  0004c	44 0f b6 c0	 movzx	 r8d, al
  00050	41 c1 e3 08	 shl	 r11d, 8
  00054	0f b6 c2	 movzx	 eax, dl
  00057	c1 e0 08	 shl	 eax, 8
  0005a	45 0b da	 or	 r11d, r10d
  0005d	44 0b c0	 or	 r8d, eax
  00060	8b c2		 mov	 eax, edx
  00062	c1 ea 18	 shr	 edx, 24
  00065	c1 e8 10	 shr	 eax, 16
  00068	41 c1 e0 08	 shl	 r8d, 8
  0006c	0f b6 c8	 movzx	 ecx, al
  0006f	44 0b c1	 or	 r8d, ecx
  00072	41 c1 e0 08	 shl	 r8d, 8
  00076	44 0b c2	 or	 r8d, edx
  00079	41 c1 c0 04	 rol	 r8d, 4

; 367  : 	work = (left ^ right) & 0xf0f0f0f0;

  0007d	41 8b c0	 mov	 eax, r8d
  00080	41 33 c3	 xor	 eax, r11d
  00083	25 f0 f0 f0 f0	 and	 eax, -252645136		; f0f0f0f0H

; 368  : 	left ^= work;

  00088	44 33 d8	 xor	 r11d, eax

; 369  : 	right = rotrFixed(right^work, 20U);

  0008b	41 33 c0	 xor	 eax, r8d

; 370  : 	work = (left ^ right) & 0xffff0000;
; 371  : 	left ^= work;
; 372  : 	right = rotrFixed(right^work, 18U);
; 373  : 	work = (left ^ right) & 0x33333333;
; 374  : 	left ^= work;
; 375  : 	right = rotrFixed(right^work, 6U);
; 376  : 	work = (left ^ right) & 0x00ff00ff;
; 377  : 	left ^= work;
; 378  : 	right = rotlFixed(right^work, 9U);
; 379  : 	work = (left ^ right) & 0xaaaaaaaa;
; 380  : 	left = rotlFixed(left^work, 1U);
; 381  : 	right ^= work;
; 382  : 
; 383  : 	RawProcessBlock (&left, &right, encrypt ? key->k1 : key->k1d);

  0008e	4c 8d 83 80 01
	00 00		 lea	 r8, QWORD PTR [rbx+384]
  00095	c1 c0 0c	 rol	 eax, 12
  00098	8b c8		 mov	 ecx, eax
  0009a	41 33 cb	 xor	 ecx, r11d
  0009d	81 e1 00 00 ff
	ff		 and	 ecx, -65536		; ffff0000H
  000a3	44 33 d9	 xor	 r11d, ecx
  000a6	33 c8		 xor	 ecx, eax
  000a8	c1 c1 0e	 rol	 ecx, 14
  000ab	8b c1		 mov	 eax, ecx
  000ad	41 33 c3	 xor	 eax, r11d
  000b0	25 33 33 33 33	 and	 eax, 858993459		; 33333333H
  000b5	44 33 d8	 xor	 r11d, eax
  000b8	33 c1		 xor	 eax, ecx
  000ba	c1 c8 06	 ror	 eax, 6
  000bd	8b d0		 mov	 edx, eax
  000bf	41 33 d3	 xor	 edx, r11d
  000c2	81 e2 ff 00 ff
	00		 and	 edx, 16711935		; 00ff00ffH
  000c8	44 33 da	 xor	 r11d, edx
  000cb	33 d0		 xor	 edx, eax
  000cd	c1 c2 09	 rol	 edx, 9
  000d0	8b ca		 mov	 ecx, edx
  000d2	41 33 cb	 xor	 ecx, r11d
  000d5	81 e1 aa aa aa
	aa		 and	 ecx, -1431655766	; aaaaaaaaH
  000db	33 d1		 xor	 edx, ecx
  000dd	8b c1		 mov	 eax, ecx
  000df	48 8d 4c 24 48	 lea	 rcx, QWORD PTR left$[rsp]
  000e4	41 33 c3	 xor	 eax, r11d
  000e7	89 54 24 30	 mov	 DWORD PTR right$[rsp], edx
  000eb	48 8d 54 24 30	 lea	 rdx, QWORD PTR right$[rsp]
  000f0	d1 c0		 rol	 eax, 1
  000f2	45 85 c9	 test	 r9d, r9d
  000f5	4c 0f 45 c3	 cmovne	 r8, rbx
  000f9	89 44 24 48	 mov	 DWORD PTR left$[rsp], eax
  000fd	e8 00 00 00 00	 call	 RawProcessBlock

; 384  : 	RawProcessBlock (&right, &left, !encrypt ? key->k2 : key->k2d);

  00102	48 8d 83 80 00
	00 00		 lea	 rax, QWORD PTR [rbx+128]
  00109	85 ff		 test	 edi, edi
  0010b	4c 8d 83 00 02
	00 00		 lea	 r8, QWORD PTR [rbx+512]
  00112	48 8d 54 24 48	 lea	 rdx, QWORD PTR left$[rsp]
  00117	48 8d 4c 24 30	 lea	 rcx, QWORD PTR right$[rsp]
  0011c	4c 0f 44 c0	 cmove	 r8, rax
  00120	e8 00 00 00 00	 call	 RawProcessBlock

; 385  : 	RawProcessBlock (&left, &right, encrypt ? key->k3 : key->k3d);

  00125	48 8d 83 00 01
	00 00		 lea	 rax, QWORD PTR [rbx+256]
  0012c	4c 8d 83 80 02
	00 00		 lea	 r8, QWORD PTR [rbx+640]
  00133	85 ff		 test	 edi, edi
  00135	48 8d 54 24 30	 lea	 rdx, QWORD PTR right$[rsp]
  0013a	48 8d 4c 24 48	 lea	 rcx, QWORD PTR left$[rsp]
  0013f	4c 0f 45 c0	 cmovne	 r8, rax
  00143	e8 00 00 00 00	 call	 RawProcessBlock

; 386  : 	
; 387  : 	right = rotrFixed(right, 1U);

  00148	44 8b 5c 24 30	 mov	 r11d, DWORD PTR right$[rsp]

; 388  : 	work = (left ^ right) & 0xaaaaaaaa;
; 389  : 	right ^= work;
; 390  : 	left = rotrFixed(left^work, 9U);
; 391  : 	work = (left ^ right) & 0x00ff00ff;
; 392  : 	right ^= work;
; 393  : 	left = rotlFixed(left^work, 6U);
; 394  : 	work = (left ^ right) & 0x33333333;
; 395  : 	right ^= work;
; 396  : 	left = rotlFixed(left^work, 18U);
; 397  : 	work = (left ^ right) & 0xffff0000;
; 398  : 	right ^= work;
; 399  : 	left = rotlFixed(left^work, 20U);
; 400  : 	work = (left ^ right) & 0xf0f0f0f0;
; 401  : 	right ^= work;
; 402  : 	left = rotrFixed(left^work, 4U);
; 403  : 
; 404  : 	((word32 *)outBlock)[0] = BE32 (right);
; 405  : 	((word32 *)outBlock)[1] = BE32 (left);
; 406  : }

  0014d	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00152	41 d1 cb	 ror	 r11d, 1
  00155	41 8b cb	 mov	 ecx, r11d
  00158	33 4c 24 48	 xor	 ecx, DWORD PTR left$[rsp]
  0015c	81 e1 aa aa aa
	aa		 and	 ecx, -1431655766	; aaaaaaaaH
  00162	44 33 d9	 xor	 r11d, ecx
  00165	33 4c 24 48	 xor	 ecx, DWORD PTR left$[rsp]
  00169	c1 c9 09	 ror	 ecx, 9
  0016c	41 8b c3	 mov	 eax, r11d
  0016f	33 c1		 xor	 eax, ecx
  00171	25 ff 00 ff 00	 and	 eax, 16711935		; 00ff00ffH
  00176	44 33 d8	 xor	 r11d, eax
  00179	33 c1		 xor	 eax, ecx
  0017b	c1 c0 06	 rol	 eax, 6
  0017e	41 8b cb	 mov	 ecx, r11d
  00181	33 c8		 xor	 ecx, eax
  00183	81 e1 33 33 33
	33		 and	 ecx, 858993459		; 33333333H
  00189	44 33 d9	 xor	 r11d, ecx
  0018c	33 c8		 xor	 ecx, eax
  0018e	c1 c9 0e	 ror	 ecx, 14
  00191	41 8b c3	 mov	 eax, r11d
  00194	33 c1		 xor	 eax, ecx
  00196	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  0019b	44 33 d8	 xor	 r11d, eax
  0019e	33 c1		 xor	 eax, ecx
  001a0	c1 c8 0c	 ror	 eax, 12
  001a3	45 8b c3	 mov	 r8d, r11d
  001a6	44 33 c0	 xor	 r8d, eax
  001a9	41 81 e0 f0 f0
	f0 f0		 and	 r8d, -252645136		; f0f0f0f0H
  001b0	45 33 d8	 xor	 r11d, r8d
  001b3	44 33 c0	 xor	 r8d, eax
  001b6	41 c1 c8 04	 ror	 r8d, 4
  001ba	41 8b c3	 mov	 eax, r11d
  001bd	c1 e8 08	 shr	 eax, 8
  001c0	0f b6 d0	 movzx	 edx, al
  001c3	41 0f b6 c3	 movzx	 eax, r11b
  001c7	c1 e0 08	 shl	 eax, 8
  001ca	0b d0		 or	 edx, eax
  001cc	41 8b c3	 mov	 eax, r11d
  001cf	41 c1 eb 18	 shr	 r11d, 24
  001d3	c1 e2 08	 shl	 edx, 8
  001d6	c1 e8 10	 shr	 eax, 16
  001d9	0f b6 c8	 movzx	 ecx, al
  001dc	41 8b c0	 mov	 eax, r8d
  001df	0b d1		 or	 edx, ecx
  001e1	c1 e8 08	 shr	 eax, 8
  001e4	c1 e2 08	 shl	 edx, 8
  001e7	41 0b d3	 or	 edx, r11d
  001ea	89 16		 mov	 DWORD PTR [rsi], edx
  001ec	0f b6 d0	 movzx	 edx, al
  001ef	41 0f b6 c0	 movzx	 eax, r8b
  001f3	c1 e0 08	 shl	 eax, 8
  001f6	0b d0		 or	 edx, eax
  001f8	41 8b c0	 mov	 eax, r8d
  001fb	41 c1 e8 18	 shr	 r8d, 24
  001ff	c1 e2 08	 shl	 edx, 8
  00202	c1 e8 10	 shr	 eax, 16
  00205	0f b6 c8	 movzx	 ecx, al
  00208	0b d1		 or	 edx, ecx
  0020a	c1 e2 08	 shl	 edx, 8
  0020d	41 0b d0	 or	 edx, r8d
  00210	89 56 04	 mov	 DWORD PTR [rsi+4], edx
  00213	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00218	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0021c	5f		 pop	 rdi
  0021d	c3		 ret	 0
TripleDesEncrypt ENDP
_TEXT	ENDS
PUBLIC	TripleDesSetKey
;	COMDAT pdata
pdata	SEGMENT
$pdata$TripleDesSetKey DD imagerel $LN3
	DD	imagerel $LN3+154
	DD	imagerel $unwind$TripleDesSetKey
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TripleDesSetKey DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT TripleDesSetKey
_TEXT	SEGMENT
userKey$ = 48
length$ = 56
ks$ = 64
TripleDesSetKey PROC					; COMDAT

; 351  : {

$LN3:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b f1	 mov	 rsi, rcx

; 352  : 	RawSetKey (1, userKey + 0, ks->k1);

  00017	48 8b d1	 mov	 rdx, rcx
  0001a	b9 01 00 00 00	 mov	 ecx, 1
  0001f	49 8b e8	 mov	 rbp, r8
  00022	e8 00 00 00 00	 call	 RawSetKey

; 353  : 	RawSetKey (1, userKey + 8, ks->k2);

  00027	4c 8d 85 80 00
	00 00		 lea	 r8, QWORD PTR [rbp+128]
  0002e	48 8d 56 08	 lea	 rdx, QWORD PTR [rsi+8]
  00032	b9 01 00 00 00	 mov	 ecx, 1
  00037	e8 00 00 00 00	 call	 RawSetKey

; 354  : 	RawSetKey (1, userKey + 16, ks->k3);

  0003c	4c 8d 85 00 01
	00 00		 lea	 r8, QWORD PTR [rbp+256]
  00043	48 8d 56 10	 lea	 rdx, QWORD PTR [rsi+16]
  00047	b9 01 00 00 00	 mov	 ecx, 1
  0004c	e8 00 00 00 00	 call	 RawSetKey

; 355  : 	RawSetKey (0, userKey + 16, ks->k1d);

  00051	4c 8d 85 80 01
	00 00		 lea	 r8, QWORD PTR [rbp+384]
  00058	48 8d 56 10	 lea	 rdx, QWORD PTR [rsi+16]
  0005c	33 c9		 xor	 ecx, ecx
  0005e	e8 00 00 00 00	 call	 RawSetKey

; 356  : 	RawSetKey (0, userKey + 8, ks->k2d);

  00063	4c 8d 85 00 02
	00 00		 lea	 r8, QWORD PTR [rbp+512]
  0006a	48 8d 56 08	 lea	 rdx, QWORD PTR [rsi+8]
  0006e	33 c9		 xor	 ecx, ecx
  00070	e8 00 00 00 00	 call	 RawSetKey

; 357  : 	RawSetKey (0, userKey + 0, ks->k3d);

  00075	4c 8d 85 80 02
	00 00		 lea	 r8, QWORD PTR [rbp+640]
  0007c	48 8b d6	 mov	 rdx, rsi
  0007f	33 c9		 xor	 ecx, ecx

; 358  : }

  00081	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00086	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0008b	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00090	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00094	5f		 pop	 rdi
  00095	e9 00 00 00 00	 jmp	 RawSetKey
TripleDesSetKey ENDP
END
