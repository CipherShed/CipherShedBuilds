     1                                  
     2                                  ; ---------------------------------------------------------------------------
     3                                  ; Copyright (c) 1998-2007, Brian Gladman, Worcester, UK. All rights reserved.
     4                                  ; 
     5                                  ; LICENSE TERMS
     6                                  ; 
     7                                  ; The free distribution and use of this software is allowed (with or without
     8                                  ; changes) provided that:
     9                                  ; 
    10                                  ;  1. source code distributions include the above copyright notice, this
    11                                  ;     list of conditions and the following disclaimer;
    12                                  ; 
    13                                  ;  2. binary distributions include the above copyright notice, this list
    14                                  ;     of conditions and the following disclaimer in their documentation;
    15                                  ; 
    16                                  ;  3. the name of the copyright holder is not used to endorse products
    17                                  ;     built using this software without specific written permission.
    18                                  ; 
    19                                  ; DISCLAIMER
    20                                  ; 
    21                                  ; This software is provided 'as is' with no explicit or implied warranties
    22                                  ; in respect of its properties, including, but not limited to, correctness
    23                                  ; and/or fitness for purpose.
    24                                  ; ---------------------------------------------------------------------------
    25                                  ; Issue 20/12/2007
    26                                  ;
    27                                  ; This code requires either ASM_X86_V2 or ASM_X86_V2C to be set in aesopt.h
    28                                  ; and the same define to be set here as well. If AES_V2C is set this file
    29                                  ; requires the C files aeskey.c and aestab.c for support.
    30                                  
    31                                  ; An AES implementation for x86 processors using the YASM (or NASM) assembler.
    32                                  ; This is a full assembler implementation covering encryption, decryption and
    33                                  ; key scheduling. It uses 2k bytes of tables but its encryption and decryption
    34                                  ; performance is very close to that obtained using large tables.  Key schedule
    35                                  ; expansion is slower for both encryption and decryption but this is likely to
    36                                  ; be offset by the much smaller load that this version places on the processor
    37                                  ; cache. I acknowledge the contribution made by Daniel Bernstein to aspects of
    38                                  ; the design of the AES round function used here.
    39                                  ;
    40                                  ; This code provides the standard AES block size (128 bits, 16 bytes) and the
    41                                  ; three standard AES key sizes (128, 192 and 256 bits). It has the same call
    42                                  ; interface as my C implementation. The ebx, esi, edi and ebp registers are
    43                                  ; preserved across calls but eax, ecx and edx and the artihmetic status flags
    44                                  ; are not.  Although this is a full assembler implementation, it can be used
    45                                  ; in conjunction with my C code which provides faster key scheduling using
    46                                  ; large tables. In this case aeskey.c should be compiled with ASM_X86_V2C
    47                                  ; defined.  It is also important that the defines below match those used in the
    48                                  ; C code.  This code uses the VC++ register saving conentions; if it is used
    49                                  ; with another compiler, conventions for using and saving registers may need
    50                                  ; to be checked (and calling conventions).  The YASM command line for the VC++
    51                                  ; custom build step is:
    52                                  ;
    53                                  ;    yasm -Xvc -f win32 -D <Z> -o "$(TargetDir)\$(InputName).obj" "$(InputPath)"
    54                                  ;
    55                                  ; For the cryptlib build this is (pcg):
    56                                  ;
    57                                  ;	yasm -Xvc -f win32 -D ASM_X86_V2C -o aescrypt2.obj aes_x86_v2.asm
    58                                  ;
    59                                  ; where <Z> is ASM_X86_V2 or ASM_X86_V2C.  The calling intefaces are:
    60                                  ;
    61                                  ;     AES_RETURN aes_encrypt(const unsigned char in_blk[],
    62                                  ;                   unsigned char out_blk[], const aes_encrypt_ctx cx[1]);
    63                                  ;
    64                                  ;     AES_RETURN aes_decrypt(const unsigned char in_blk[],
    65                                  ;                   unsigned char out_blk[], const aes_decrypt_ctx cx[1]);
    66                                  ;
    67                                  ;     AES_RETURN aes_encrypt_key<NNN>(const unsigned char key[],
    68                                  ;                                            const aes_encrypt_ctx cx[1]);
    69                                  ;
    70                                  ;     AES_RETURN aes_decrypt_key<NNN>(const unsigned char key[],
    71                                  ;                                            const aes_decrypt_ctx cx[1]);
    72                                  ;
    73                                  ;     AES_RETURN aes_encrypt_key(const unsigned char key[],
    74                                  ;                           unsigned int len, const aes_decrypt_ctx cx[1]);
    75                                  ;
    76                                  ;     AES_RETURN aes_decrypt_key(const unsigned char key[],
    77                                  ;                           unsigned int len, const aes_decrypt_ctx cx[1]);
    78                                  ;
    79                                  ; where <NNN> is 128, 102 or 256.  In the last two calls the length can be in
    80                                  ; either bits or bytes.
    81                                  
    82                                  ; The DLL interface must use the _stdcall convention in which the number
    83                                  ; of bytes of parameter space is added after an @ to the sutine's name.
    84                                  ; We must also remove our parameters from the stack before return (see
    85                                  ; the do_exit macro). Define DLL_EXPORT for the Dynamic Link Library version.
    86                                  
    87                                  ;
    88                                  ; Adapted for CipherShed:
    89                                  ; - All tables generated at run-time
    90                                  ; - Adapted for 16-bit environment
    91                                  ;
    92                                  
    93                                  CPU 386
    94                                  USE16
    95                                  SEGMENT _TEXT PUBLIC CLASS=CODE USE16
    96                                  SEGMENT _DATA PUBLIC CLASS=DATA USE16
    97                                  
    98                                  GROUP DGROUP _TEXT _DATA
    99                                  
   100                                  extern _aes_dec_tab		; Aestab.c
   101                                  extern _aes_enc_tab
   102                                  
   103                                  ; %define DLL_EXPORT
   104                                  
   105                                  ; The size of the code can be reduced by using functions for the encryption
   106                                  ; and decryption rounds in place of macro expansion
   107                                  
   108                                  %define REDUCE_CODE_SIZE
   109                                  
   110                                  ; Comment in/out the following lines to obtain the desired subroutines. These
   111                                  ; selections MUST match those in the C header file aes.h
   112                                  
   113                                  ; %define AES_128                 ; define if AES with 128 bit keys is needed
   114                                  ; %define AES_192                 ; define if AES with 192 bit keys is needed
   115                                  %define AES_256                 ; define if AES with 256 bit keys is needed
   116                                  ; %define AES_VAR                 ; define if a variable key size is needed
   117                                  %define ENCRYPTION              ; define if encryption is needed
   118                                  %define DECRYPTION              ; define if decryption is needed
   119                                  ; %define AES_REV_DKS             ; define if key decryption schedule is reversed
   120                                  
   121                                  %ifndef ASM_X86_V2C
   122                                  %define ENCRYPTION_KEY_SCHEDULE ; define if encryption key expansion is needed
   123                                  %define DECRYPTION_KEY_SCHEDULE ; define if decryption key expansion is needed
   124                                  %endif
   125                                  
   126                                  ; The encryption key schedule has the following in memory layout where N is the
   127                                  ; number of rounds (10, 12 or 14):
   128                                  ;
   129                                  ; lo: | input key (round 0)  |  ; each round is four 32-bit words
   130                                  ;     | encryption round 1   |
   131                                  ;     | encryption round 2   |
   132                                  ;     ....
   133                                  ;     | encryption round N-1 |
   134                                  ; hi: | encryption round N   |
   135                                  ;
   136                                  ; The decryption key schedule is normally set up so that it has the same
   137                                  ; layout as above by actually reversing the order of the encryption key
   138                                  ; schedule in memory (this happens when AES_REV_DKS is set):
   139                                  ;
   140                                  ; lo: | decryption round 0   | =              | encryption round N   |
   141                                  ;     | decryption round 1   | = INV_MIX_COL[ | encryption round N-1 | ]
   142                                  ;     | decryption round 2   | = INV_MIX_COL[ | encryption round N-2 | ]
   143                                  ;     ....                       ....
   144                                  ;     | decryption round N-1 | = INV_MIX_COL[ | encryption round 1   | ]
   145                                  ; hi: | decryption round N   | =              | input key (round 0)  |
   146                                  ;
   147                                  ; with rounds except the first and last modified using inv_mix_column()
   148                                  ; But if AES_REV_DKS is NOT set the order of keys is left as it is for
   149                                  ; encryption so that it has to be accessed in reverse when used for
   150                                  ; decryption (although the inverse mix column modifications are done)
   151                                  ;
   152                                  ; lo: | decryption round 0   | =              | input key (round 0)  |
   153                                  ;     | decryption round 1   | = INV_MIX_COL[ | encryption round 1   | ]
   154                                  ;     | decryption round 2   | = INV_MIX_COL[ | encryption round 2   | ]
   155                                  ;     ....                       ....
   156                                  ;     | decryption round N-1 | = INV_MIX_COL[ | encryption round N-1 | ]
   157                                  ; hi: | decryption round N   | =              | encryption round N   |
   158                                  ;
   159                                  ; This layout is faster when the assembler key scheduling provided here
   160                                  ; is used.
   161                                  ;
   162                                  ; End of user defines
   163                                  
   164                                  %ifdef AES_VAR
   165                                  %ifndef AES_128
   166                                  %define AES_128
   167                                  %endif
   168                                  %ifndef AES_192
   169                                  %define AES_192
   170                                  %endif
   171                                  %ifndef AES_256
   172                                  %define AES_256
   173                                  %endif
   174                                  %endif
   175                                  
   176                                  %ifdef AES_VAR
   177                                  %define KS_LENGTH       60
   178                                  %elifdef AES_256
   179                                  %define KS_LENGTH       60
   180                                  %elifdef AES_192
   181                                  %define KS_LENGTH       52
   182                                  %else
   183                                  %define KS_LENGTH       44
   184                                  %endif
   185                                  
   186                                  ; These macros implement stack based local variables
   187                                  
   188                                  %macro  save 2
   189                                      mov     [esp+4*%1],%2
   190                                  %endmacro
   191                                  
   192                                  %macro  restore 2
   193                                      mov     %1,[esp+4*%2]
   194                                  %endmacro
   195                                  
   196                                  %ifdef  REDUCE_CODE_SIZE
   197                                      %macro mf_call 1
   198                                          call %1
   199                                      %endmacro
   200                                  %else
   201                                      %macro mf_call 1
   202                                          %1
   203                                      %endmacro
   204                                  %endif
   205                                  
   206                                  ; the DLL has to implement the _stdcall calling interface on return
   207                                  ; In this case we have to take our parameters (3 4-byte pointers)
   208                                  ; off the stack
   209                                  
   210                                  %define parms 12
   211                                  
   212                                  %macro  do_name 1-2 parms
   213                                  %ifndef DLL_EXPORT
   214                                      global  %1
   215                                  %1:
   216                                  %else
   217                                      global  %1@%2
   218                                      export  %1@%2
   219                                  %1@%2:
   220                                  %endif
   221                                  %endmacro
   222                                  
   223                                  %macro  do_call 1-2 parms
   224                                  %ifndef DLL_EXPORT
   225                                      call    %1
   226                                      add     esp,%2
   227                                  %else
   228                                      call    %1@%2
   229                                  %endif
   230                                  %endmacro
   231                                  
   232                                  %macro  do_exit  0-1 parms
   233                                  %ifdef DLL_EXPORT
   234                                      ret %1
   235                                  %else
   236                                      ret
   237                                  %endif
   238                                  %endmacro
   239                                  
   240                                  ; finite field multiplies by {02}, {04} and {08}
   241                                  
   242                                  %define f2(x)   ((x<<1)^(((x>>7)&1)*0x11b))
   243                                  %define f4(x)   ((x<<2)^(((x>>6)&1)*0x11b)^(((x>>6)&2)*0x11b))
   244                                  %define f8(x)   ((x<<3)^(((x>>5)&1)*0x11b)^(((x>>5)&2)*0x11b)^(((x>>5)&4)*0x11b))
   245                                  
   246                                  ; finite field multiplies required in table generation
   247                                  
   248                                  %define f3(x)   (f2(x) ^ x)
   249                                  %define f9(x)   (f8(x) ^ x)
   250                                  %define fb(x)   (f8(x) ^ f2(x) ^ x)
   251                                  %define fd(x)   (f8(x) ^ f4(x) ^ x)
   252                                  %define fe(x)   (f8(x) ^ f4(x) ^ f2(x))
   253                                  
   254                                  %define etab_0(x)   [_aes_enc_tab+4+8*x]
   255                                  %define etab_1(x)   [_aes_enc_tab+3+8*x]
   256                                  %define etab_2(x)   [_aes_enc_tab+2+8*x]
   257                                  %define etab_3(x)   [_aes_enc_tab+1+8*x]
   258                                  %define etab_b(x)   byte [_aes_enc_tab+1+8*x] ; used with movzx for 0x000000xx
   259                                  %define etab_w(x)   word [_aes_enc_tab+8*x]   ; used with movzx for 0x0000xx00
   260                                  
   261                                  %define btab_0(x)   [_aes_enc_tab+6+8*x]
   262                                  %define btab_1(x)   [_aes_enc_tab+5+8*x]
   263                                  %define btab_2(x)   [_aes_enc_tab+4+8*x]
   264                                  %define btab_3(x)   [_aes_enc_tab+3+8*x]
   265                                  
   266                                  ; ROUND FUNCTION.  Build column[2] on ESI and column[3] on EDI that have the
   267                                  ; round keys pre-loaded. Build column[0] in EBP and column[1] in EBX.
   268                                  ;
   269                                  ; Input:
   270                                  ;
   271                                  ;   EAX     column[0]
   272                                  ;   EBX     column[1]
   273                                  ;   ECX     column[2]
   274                                  ;   EDX     column[3]
   275                                  ;   ESI     column key[round][2]
   276                                  ;   EDI     column key[round][3]
   277                                  ;   EBP     scratch
   278                                  ;
   279                                  ; Output:
   280                                  ;
   281                                  ;   EBP     column[0]   unkeyed
   282                                  ;   EBX     column[1]   unkeyed
   283                                  ;   ESI     column[2]   keyed
   284                                  ;   EDI     column[3]   keyed
   285                                  ;   EAX     scratch
   286                                  ;   ECX     scratch
   287                                  ;   EDX     scratch
   288                                  
   289                                  %macro rnd_fun 2
   290                                  
   291                                      rol     ebx,16
   292                                      %1      esi, cl, 0, ebp
   293                                      %1      esi, dh, 1, ebp
   294                                      %1      esi, bh, 3, ebp
   295                                      %1      edi, dl, 0, ebp
   296                                      %1      edi, ah, 1, ebp
   297                                      %1      edi, bl, 2, ebp
   298                                      %2      ebp, al, 0, ebp
   299                                      shr     ebx,16
   300                                      and     eax,0xffff0000
   301                                      or      eax,ebx
   302                                      shr     edx,16
   303                                      %1      ebp, ah, 1, ebx
   304                                      %1      ebp, dh, 3, ebx
   305                                      %2      ebx, dl, 2, ebx
   306                                      %1      ebx, ch, 1, edx
   307                                      %1      ebx, al, 0, edx
   308                                      shr     eax,16
   309                                      shr     ecx,16
   310                                      %1      ebp, cl, 2, edx
   311                                      %1      edi, ch, 3, edx
   312                                      %1      esi, al, 2, edx
   313                                      %1      ebx, ah, 3, edx
   314                                  
   315                                  %endmacro
   316                                  
   317                                  ; Basic MOV and XOR Operations for normal rounds
   318                                  
   319                                  %macro  nr_xor  4
   320                                      movzx   %4,%2
   321                                      xor     %1,etab_%3(%4)
   322                                  %endmacro
   323                                  
   324                                  %macro  nr_mov  4
   325                                      movzx   %4,%2
   326                                      mov     %1,etab_%3(%4)
   327                                  %endmacro
   328                                  
   329                                  ; Basic MOV and XOR Operations for last round
   330                                  
   331                                  %if 1
   332                                  
   333                                      %macro  lr_xor  4
   334                                          movzx   %4,%2
   335                                          movzx   %4,etab_b(%4)
   336                                      %if %3 != 0
   337                                          shl     %4,8*%3
   338                                      %endif
   339                                          xor     %1,%4
   340                                      %endmacro
   341                                  
   342                                      %macro  lr_mov  4
   343                                          movzx   %4,%2
   344                                          movzx   %1,etab_b(%4)
   345                                      %if %3 != 0
   346                                          shl     %1,8*%3
   347                                      %endif
   348                                      %endmacro
   349                                  
   350                                  %else       ; less effective but worth leaving as an option
   351                                  
   352                                      %macro  lr_xor  4
   353                                          movzx   %4,%2
   354                                          mov     %4,btab_%3(%4)
   355                                          and     %4,0x000000ff << 8 * %3
   356                                          xor     %1,%4
   357                                      %endmacro
   358                                  
   359                                      %macro  lr_mov  4
   360                                          movzx   %4,%2
   361                                          mov     %1,btab_%3(%4)
   362                                          and     %1,0x000000ff << 8 * %3
   363                                      %endmacro
   364                                  
   365                                  %endif
   366                                  
   367                                  ; Apply S-Box to the 4 bytes in a 32-bit word and rotate byte positions
   368                                  
   369                                  %ifdef REDUCE_CODE_SIZE
   370                                      
   371                                  l3s_col:
   372 00000000 660FB6C8                    movzx   ecx,al              ; in      eax
   373 00000004 67660FB60CCD-               movzx   ecx, etab_b(ecx)    ; out     eax
   374 0000000A [01000000]         
   375 0000000E 6631CA                      xor     edx,ecx             ; scratch ecx,edx
   376 00000011 660FB6CC                    movzx   ecx,ah
   377 00000015 67660FB60CCD-               movzx   ecx, etab_b(ecx)
   378 0000001B [01000000]         
   379 0000001F 66C1E108                    shl     ecx,8
   380 00000023 6631CA                      xor     edx,ecx
   381 00000026 66C1E810                    shr     eax,16
   382 0000002A 660FB6C8                    movzx   ecx,al
   383 0000002E 67660FB60CCD-               movzx   ecx, etab_b(ecx)
   384 00000034 [01000000]         
   385 00000038 66C1E110                    shl     ecx,16
   386 0000003C 6631CA                      xor     edx,ecx
   387 0000003F 660FB6CC                    movzx   ecx,ah
   388 00000043 67660FB60CCD-               movzx   ecx, etab_b(ecx)
   389 00000049 [01000000]         
   390 0000004D 66C1E118                    shl     ecx,24
   391 00000051 6631CA                      xor     edx,ecx
   392 00000054 6689D0                      mov     eax,edx
   393 00000057 C3                          ret
   394                                  
   395                                  %else
   396                                  
   397                                  %macro l3s_col 0
   398                                  
   399                                      movzx   ecx,al              ; in      eax
   400                                      movzx   ecx, etab_b(ecx)    ; out     eax
   401                                      xor     edx,ecx             ; scratch ecx,edx
   402                                      movzx   ecx,ah
   403                                      movzx   ecx, etab_b(ecx)
   404                                      shl     ecx,8
   405                                      xor     edx,ecx
   406                                      shr     eax,16
   407                                      movzx   ecx,al
   408                                      movzx   ecx, etab_b(ecx)
   409                                      shl     ecx,16
   410                                      xor     edx,ecx
   411                                      movzx   ecx,ah
   412                                      movzx   ecx, etab_b(ecx)
   413                                      shl     ecx,24
   414                                      xor     edx,ecx
   415                                      mov     eax,edx
   416                                  
   417                                  %endmacro
   418                                  
   419                                  %endif
   420                                      
   421                                  ; offsets to parameters
   422                                  
   423                                  in_blk  equ     2   ; input byte array address parameter
   424                                  out_blk equ     4   ; output byte array address parameter
   425                                  ctx     equ     6   ; AES context structure
   426                                  stk_spc equ    20   ; stack space
   427                                  
   428                                  %ifdef  ENCRYPTION
   429                                  
   430                                  ; %define ENCRYPTION_TABLE
   431                                  
   432                                  %ifdef REDUCE_CODE_SIZE
   433                                  
   434                                  enc_round:
   435 00000058 83EC02                  	sub		sp, 2
   436 0000005B 6683C510                    add     ebp,16
   437                                      save    1,ebp
   438 0000005F 6766896C2404        <1>  mov [esp+4*%1],%2
   439 00000065 67668B7508                  mov     esi,[ebp+8]
   440 0000006A 67668B7D0C                  mov     edi,[ebp+12]
   441                                  
   442                                      rnd_fun nr_xor, nr_mov
   443                              <1> 
   444 0000006F 66C1C310            <1>  rol ebx,16
   445                              <1>  %1 esi, cl, 0, ebp
   446 00000073 660FB6E9            <2>  movzx %4,%2
   447 00000077 67663334ED-         <2>  xor %1,etab_%3(%4)
   448 0000007C [04000000]          <2>
   449                              <1>  %1 esi, dh, 1, ebp
   450 00000080 660FB6EE            <2>  movzx %4,%2
   451 00000084 67663334ED-         <2>  xor %1,etab_%3(%4)
   452 00000089 [03000000]          <2>
   453                              <1>  %1 esi, bh, 3, ebp
   454 0000008D 660FB6EF            <2>  movzx %4,%2
   455 00000091 67663334ED-         <2>  xor %1,etab_%3(%4)
   456 00000096 [01000000]          <2>
   457                              <1>  %1 edi, dl, 0, ebp
   458 0000009A 660FB6EA            <2>  movzx %4,%2
   459 0000009E 6766333CED-         <2>  xor %1,etab_%3(%4)
   460 000000A3 [04000000]          <2>
   461                              <1>  %1 edi, ah, 1, ebp
   462 000000A7 660FB6EC            <2>  movzx %4,%2
   463 000000AB 6766333CED-         <2>  xor %1,etab_%3(%4)
   464 000000B0 [03000000]          <2>
   465                              <1>  %1 edi, bl, 2, ebp
   466 000000B4 660FB6EB            <2>  movzx %4,%2
   467 000000B8 6766333CED-         <2>  xor %1,etab_%3(%4)
   468 000000BD [02000000]          <2>
   469                              <1>  %2 ebp, al, 0, ebp
   470 000000C1 660FB6E8            <2>  movzx %4,%2
   471 000000C5 67668B2CED-         <2>  mov %1,etab_%3(%4)
   472 000000CA [04000000]          <2>
   473 000000CE 66C1EB10            <1>  shr ebx,16
   474 000000D2 66250000FFFF        <1>  and eax,0xffff0000
   475 000000D8 6609D8              <1>  or eax,ebx
   476 000000DB 66C1EA10            <1>  shr edx,16
   477                              <1>  %1 ebp, ah, 1, ebx
   478 000000DF 660FB6DC            <2>  movzx %4,%2
   479 000000E3 6766332CDD-         <2>  xor %1,etab_%3(%4)
   480 000000E8 [03000000]          <2>
   481                              <1>  %1 ebp, dh, 3, ebx
   482 000000EC 660FB6DE            <2>  movzx %4,%2
   483 000000F0 6766332CDD-         <2>  xor %1,etab_%3(%4)
   484 000000F5 [01000000]          <2>
   485                              <1>  %2 ebx, dl, 2, ebx
   486 000000F9 660FB6DA            <2>  movzx %4,%2
   487 000000FD 67668B1CDD-         <2>  mov %1,etab_%3(%4)
   488 00000102 [02000000]          <2>
   489                              <1>  %1 ebx, ch, 1, edx
   490 00000106 660FB6D5            <2>  movzx %4,%2
   491 0000010A 6766331CD5-         <2>  xor %1,etab_%3(%4)
   492 0000010F [03000000]          <2>
   493                              <1>  %1 ebx, al, 0, edx
   494 00000113 660FB6D0            <2>  movzx %4,%2
   495 00000117 6766331CD5-         <2>  xor %1,etab_%3(%4)
   496 0000011C [04000000]          <2>
   497 00000120 66C1E810            <1>  shr eax,16
   498 00000124 66C1E910            <1>  shr ecx,16
   499                              <1>  %1 ebp, cl, 2, edx
   500 00000128 660FB6D1            <2>  movzx %4,%2
   501 0000012C 6766332CD5-         <2>  xor %1,etab_%3(%4)
   502 00000131 [02000000]          <2>
   503                              <1>  %1 edi, ch, 3, edx
   504 00000135 660FB6D5            <2>  movzx %4,%2
   505 00000139 6766333CD5-         <2>  xor %1,etab_%3(%4)
   506 0000013E [01000000]          <2>
   507                              <1>  %1 esi, al, 2, edx
   508 00000142 660FB6D0            <2>  movzx %4,%2
   509 00000146 67663334D5-         <2>  xor %1,etab_%3(%4)
   510 0000014B [02000000]          <2>
   511                              <1>  %1 ebx, ah, 3, edx
   512 0000014F 660FB6D4            <2>  movzx %4,%2
   513 00000153 6766331CD5-         <2>  xor %1,etab_%3(%4)
   514 00000158 [01000000]          <2>
   515                              <1> 
   516                                  
   517 0000015C 6689E8                      mov     eax,ebp
   518 0000015F 6689F1                      mov     ecx,esi
   519 00000162 6689FA                      mov     edx,edi
   520                                      restore ebp,1
   521 00000165 67668B6C2404        <1>  mov %1,[esp+4*%2]
   522 0000016B 6766334500                  xor     eax,[ebp]
   523 00000170 6766335D04                  xor     ebx,[ebp+4]
   524 00000175 83C402                  	add		sp, 2
   525 00000178 C3                          ret
   526                                      
   527                                  %else
   528                                  
   529                                  %macro enc_round 0
   530                                  
   531                                      add     ebp,16
   532                                      save    0,ebp
   533                                      mov     esi,[ebp+8]
   534                                      mov     edi,[ebp+12]
   535                                  
   536                                      rnd_fun nr_xor, nr_mov
   537                                  
   538                                      mov     eax,ebp
   539                                      mov     ecx,esi
   540                                      mov     edx,edi
   541                                      restore ebp,0
   542                                      xor     eax,[ebp]
   543                                      xor     ebx,[ebp+4]
   544                                  
   545                                  %endmacro
   546                                  
   547                                  %endif
   548                                  
   549                                  %macro enc_last_round 0
   550                                  
   551                                      add     ebp,16
   552                                      save    0,ebp
   553                                      mov     esi,[ebp+8]
   554                                      mov     edi,[ebp+12]
   555                                  
   556                                      rnd_fun lr_xor, lr_mov
   557                                  
   558                                      mov     eax,ebp
   559                                      restore ebp,0
   560                                      xor     eax,[ebp]
   561                                      xor     ebx,[ebp+4]
   562                                  
   563                                  %endmacro
   564                                  
   565                                      section _TEXT
   566                                  
   567                                  ; AES Encryption Subroutine
   568                                  
   569                                      do_name _aes_encrypt,12
   570                              <1> %ifndef DLL_EXPORT
   571                              <1>  global %1
   572                              <1> %1:
   573                              <1> %else
   574                              <1>  global %1@%2
   575                              <1>  export %1@%2
   576                              <1> %1@%2:
   577                              <1> %endif
   578                                  
   579 00000000 89E0                    	mov		ax, sp
   580 00000002 660FB7E0                	movzx	esp, ax
   581                                  
   582 00000006 6683EC14                    sub     esp,stk_spc
   583 0000000A 6766896C2410                mov     [esp+16],ebp
   584 00000010 6766895C240C                mov     [esp+12],ebx
   585 00000016 676689742408                mov     [esp+ 8],esi
   586 0000001C 6766897C2404                mov     [esp+ 4],edi
   587                                  
   588 00000022 67660FB7742416              movzx   esi,word [esp+in_blk+stk_spc] ; input pointer
   589 00000029 67668B06                    mov     eax,[esi   ]
   590 0000002D 67668B5E04                  mov     ebx,[esi+ 4]
   591 00000032 67668B4E08                  mov     ecx,[esi+ 8]
   592 00000037 67668B560C                  mov     edx,[esi+12]
   593                                  
   594 0000003C 67660FB76C241A              movzx   ebp,word [esp+ctx+stk_spc]    ; key pointer
   595 00000043 67660FB6BDF0000000          movzx   edi,byte [ebp+4*KS_LENGTH]
   596 0000004C 6766334500                  xor     eax,[ebp   ]
   597 00000051 6766335D04                  xor     ebx,[ebp+ 4]
   598 00000056 6766334D08                  xor     ecx,[ebp+ 8]
   599 0000005B 676633550C                  xor     edx,[ebp+12]
   600                                  
   601                                  ; determine the number of rounds
   602                                  
   603                                  %ifndef AES_256
   604                                      cmp     edi,10*16
   605                                      je      .3
   606                                      cmp     edi,12*16
   607                                      je      .2
   608                                      cmp     edi,14*16
   609                                      je      .1
   610                                      mov     eax,-1
   611                                      jmp     .5
   612                                  %endif
   613                                  
   614                                  .1: mf_call enc_round
   615                              <1> .1: 
   616 00000060 E8(5800)            <1>  call %1
   617                                      mf_call enc_round
   618 00000063 E8(5800)            <1>  call %1
   619                                  .2: mf_call enc_round
   620                              <1> .2: 
   621 00000066 E8(5800)            <1>  call %1
   622                                      mf_call enc_round
   623 00000069 E8(5800)            <1>  call %1
   624                                  .3: mf_call enc_round
   625                              <1> .3: 
   626 0000006C E8(5800)            <1>  call %1
   627                                      mf_call enc_round
   628 0000006F E8(5800)            <1>  call %1
   629                                      mf_call enc_round
   630 00000072 E8(5800)            <1>  call %1
   631                                      mf_call enc_round
   632 00000075 E8(5800)            <1>  call %1
   633                                      mf_call enc_round
   634 00000078 E8(5800)            <1>  call %1
   635                                      mf_call enc_round
   636 0000007B E8(5800)            <1>  call %1
   637                                      mf_call enc_round
   638 0000007E E8(5800)            <1>  call %1
   639                                      mf_call enc_round
   640 00000081 E8(5800)            <1>  call %1
   641                                      mf_call enc_round
   642 00000084 E8(5800)            <1>  call %1
   643                                      enc_last_round
   644                              <1> 
   645 00000087 6683C510            <1>  add ebp,16
   646                              <1>  save 0,ebp
   647 0000008B 6766892C24          <2>  mov [esp+4*%1],%2
   648 00000090 67668B7508          <1>  mov esi,[ebp+8]
   649 00000095 67668B7D0C          <1>  mov edi,[ebp+12]
   650                              <1> 
   651                              <1>  rnd_fun lr_xor, lr_mov
   652                              <2> 
   653 0000009A 66C1C310            <2>  rol ebx,16
   654                              <2>  %1 esi, cl, 0, ebp
   655 0000009E 660FB6E9            <3>  movzx %4,%2
   656 000000A2 67660FB62CED-       <3>  movzx %4,etab_b(%4)
   657 000000A8 [01000000]          <3>
   658                              <3>  %if %3 != 0
   659                              <3>  shl %4,8*%3
   660                              <3>  %endif
   661 000000AC 6631EE              <3>  xor %1,%4
   662                              <2>  %1 esi, dh, 1, ebp
   663 000000AF 660FB6EE            <3>  movzx %4,%2
   664 000000B3 67660FB62CED-       <3>  movzx %4,etab_b(%4)
   665 000000B9 [01000000]          <3>
   666                              <3>  %if %3 != 0
   667 000000BD 66C1E508            <3>  shl %4,8*%3
   668                              <3>  %endif
   669 000000C1 6631EE              <3>  xor %1,%4
   670                              <2>  %1 esi, bh, 3, ebp
   671 000000C4 660FB6EF            <3>  movzx %4,%2
   672 000000C8 67660FB62CED-       <3>  movzx %4,etab_b(%4)
   673 000000CE [01000000]          <3>
   674                              <3>  %if %3 != 0
   675 000000D2 66C1E518            <3>  shl %4,8*%3
   676                              <3>  %endif
   677 000000D6 6631EE              <3>  xor %1,%4
   678                              <2>  %1 edi, dl, 0, ebp
   679 000000D9 660FB6EA            <3>  movzx %4,%2
   680 000000DD 67660FB62CED-       <3>  movzx %4,etab_b(%4)
   681 000000E3 [01000000]          <3>
   682                              <3>  %if %3 != 0
   683                              <3>  shl %4,8*%3
   684                              <3>  %endif
   685 000000E7 6631EF              <3>  xor %1,%4
   686                              <2>  %1 edi, ah, 1, ebp
   687 000000EA 660FB6EC            <3>  movzx %4,%2
   688 000000EE 67660FB62CED-       <3>  movzx %4,etab_b(%4)
   689 000000F4 [01000000]          <3>
   690                              <3>  %if %3 != 0
   691 000000F8 66C1E508            <3>  shl %4,8*%3
   692                              <3>  %endif
   693 000000FC 6631EF              <3>  xor %1,%4
   694                              <2>  %1 edi, bl, 2, ebp
   695 000000FF 660FB6EB            <3>  movzx %4,%2
   696 00000103 67660FB62CED-       <3>  movzx %4,etab_b(%4)
   697 00000109 [01000000]          <3>
   698                              <3>  %if %3 != 0
   699 0000010D 66C1E510            <3>  shl %4,8*%3
   700                              <3>  %endif
   701 00000111 6631EF              <3>  xor %1,%4
   702                              <2>  %2 ebp, al, 0, ebp
   703 00000114 660FB6E8            <3>  movzx %4,%2
   704 00000118 67660FB62CED-       <3>  movzx %1,etab_b(%4)
   705 0000011E [01000000]          <3>
   706                              <3>  %if %3 != 0
   707                              <3>  shl %1,8*%3
   708                              <3>  %endif
   709 00000122 66C1EB10            <2>  shr ebx,16
   710 00000126 66250000FFFF        <2>  and eax,0xffff0000
   711 0000012C 6609D8              <2>  or eax,ebx
   712 0000012F 66C1EA10            <2>  shr edx,16
   713                              <2>  %1 ebp, ah, 1, ebx
   714 00000133 660FB6DC            <3>  movzx %4,%2
   715 00000137 67660FB61CDD-       <3>  movzx %4,etab_b(%4)
   716 0000013D [01000000]          <3>
   717                              <3>  %if %3 != 0
   718 00000141 66C1E308            <3>  shl %4,8*%3
   719                              <3>  %endif
   720 00000145 6631DD              <3>  xor %1,%4
   721                              <2>  %1 ebp, dh, 3, ebx
   722 00000148 660FB6DE            <3>  movzx %4,%2
   723 0000014C 67660FB61CDD-       <3>  movzx %4,etab_b(%4)
   724 00000152 [01000000]          <3>
   725                              <3>  %if %3 != 0
   726 00000156 66C1E318            <3>  shl %4,8*%3
   727                              <3>  %endif
   728 0000015A 6631DD              <3>  xor %1,%4
   729                              <2>  %2 ebx, dl, 2, ebx
   730 0000015D 660FB6DA            <3>  movzx %4,%2
   731 00000161 67660FB61CDD-       <3>  movzx %1,etab_b(%4)
   732 00000167 [01000000]          <3>
   733                              <3>  %if %3 != 0
   734 0000016B 66C1E310            <3>  shl %1,8*%3
   735                              <3>  %endif
   736                              <2>  %1 ebx, ch, 1, edx
   737 0000016F 660FB6D5            <3>  movzx %4,%2
   738 00000173 67660FB614D5-       <3>  movzx %4,etab_b(%4)
   739 00000179 [01000000]          <3>
   740                              <3>  %if %3 != 0
   741 0000017D 66C1E208            <3>  shl %4,8*%3
   742                              <3>  %endif
   743 00000181 6631D3              <3>  xor %1,%4
   744                              <2>  %1 ebx, al, 0, edx
   745 00000184 660FB6D0            <3>  movzx %4,%2
   746 00000188 67660FB614D5-       <3>  movzx %4,etab_b(%4)
   747 0000018E [01000000]          <3>
   748                              <3>  %if %3 != 0
   749                              <3>  shl %4,8*%3
   750                              <3>  %endif
   751 00000192 6631D3              <3>  xor %1,%4
   752 00000195 66C1E810            <2>  shr eax,16
   753 00000199 66C1E910            <2>  shr ecx,16
   754                              <2>  %1 ebp, cl, 2, edx
   755 0000019D 660FB6D1            <3>  movzx %4,%2
   756 000001A1 67660FB614D5-       <3>  movzx %4,etab_b(%4)
   757 000001A7 [01000000]          <3>
   758                              <3>  %if %3 != 0
   759 000001AB 66C1E210            <3>  shl %4,8*%3
   760                              <3>  %endif
   761 000001AF 6631D5              <3>  xor %1,%4
   762                              <2>  %1 edi, ch, 3, edx
   763 000001B2 660FB6D5            <3>  movzx %4,%2
   764 000001B6 67660FB614D5-       <3>  movzx %4,etab_b(%4)
   765 000001BC [01000000]          <3>
   766                              <3>  %if %3 != 0
   767 000001C0 66C1E218            <3>  shl %4,8*%3
   768                              <3>  %endif
   769 000001C4 6631D7              <3>  xor %1,%4
   770                              <2>  %1 esi, al, 2, edx
   771 000001C7 660FB6D0            <3>  movzx %4,%2
   772 000001CB 67660FB614D5-       <3>  movzx %4,etab_b(%4)
   773 000001D1 [01000000]          <3>
   774                              <3>  %if %3 != 0
   775 000001D5 66C1E210            <3>  shl %4,8*%3
   776                              <3>  %endif
   777 000001D9 6631D6              <3>  xor %1,%4
   778                              <2>  %1 ebx, ah, 3, edx
   779 000001DC 660FB6D4            <3>  movzx %4,%2
   780 000001E0 67660FB614D5-       <3>  movzx %4,etab_b(%4)
   781 000001E6 [01000000]          <3>
   782                              <3>  %if %3 != 0
   783 000001EA 66C1E218            <3>  shl %4,8*%3
   784                              <3>  %endif
   785 000001EE 6631D3              <3>  xor %1,%4
   786                              <2> 
   787                              <1> 
   788 000001F1 6689E8              <1>  mov eax,ebp
   789                              <1>  restore ebp,0
   790 000001F4 67668B2C24          <2>  mov %1,[esp+4*%2]
   791 000001F9 6766334500          <1>  xor eax,[ebp]
   792 000001FE 6766335D04          <1>  xor ebx,[ebp+4]
   793                              <1> 
   794                                  
   795 00000203 67660FB7542418              movzx   edx,word [esp+out_blk+stk_spc]
   796 0000020A 67668902                    mov     [edx],eax
   797 0000020E 6766895A04                  mov     [edx+4],ebx
   798 00000213 6766897208                  mov     [edx+8],esi
   799 00000218 6766897A0C                  mov     [edx+12],edi
   800 0000021D 6631C0                      xor     eax,eax
   801                                  
   802 00000220 67668B6C2410            .5: mov     ebp,[esp+16]
   803 00000226 67668B5C240C                mov     ebx,[esp+12]
   804 0000022C 67668B742408                mov     esi,[esp+ 8]
   805 00000232 67668B7C2404                mov     edi,[esp+ 4]
   806 00000238 6683C414                    add     esp,stk_spc
   807                                      do_exit 12
   808                              <1> %ifdef DLL_EXPORT
   809                              <1>  ret %1
   810                              <1> %else
   811 0000023C C3                  <1>  ret
   812                              <1> %endif
   813                                  
   814                                  %endif
   815                                  
   816                                  %macro f_key 2
   817                                  
   818                                      push    ecx
   819                                      push    edx
   820                                      mov     edx,esi
   821                                      ror     eax,8
   822                                      mf_call l3s_col
   823                                      mov     esi,eax
   824                                      pop     edx
   825                                      pop     ecx
   826                                      xor     esi,rc_val
   827                                  
   828                                      mov     [ebp+%1*%2],esi
   829                                      xor     edi,esi
   830                                      mov     [ebp+%1*%2+4],edi
   831                                      xor     ecx,edi
   832                                      mov     [ebp+%1*%2+8],ecx
   833                                      xor     edx,ecx
   834                                      mov     [ebp+%1*%2+12],edx
   835                                      mov     eax,edx
   836                                  
   837                                  %if %2 == 24
   838                                  
   839                                  %if %1 < 7
   840                                      xor     eax,[ebp+%1*%2+16-%2]
   841                                      mov     [ebp+%1*%2+16],eax
   842                                      xor     eax,[ebp+%1*%2+20-%2]
   843                                      mov     [ebp+%1*%2+20],eax
   844                                  %endif
   845                                  
   846                                  %elif %2 == 32
   847                                  
   848                                  %if %1 < 6
   849                                      push    ecx
   850                                      push    edx
   851                                      mov     edx,[ebp+%1*%2+16-%2]
   852                                      mf_call l3s_col
   853                                      pop     edx
   854                                      pop     ecx
   855                                      mov     [ebp+%1*%2+16],eax
   856                                      xor     eax,[ebp+%1*%2+20-%2]
   857                                      mov     [ebp+%1*%2+20],eax
   858                                      xor     eax,[ebp+%1*%2+24-%2]
   859                                      mov     [ebp+%1*%2+24],eax
   860                                      xor     eax,[ebp+%1*%2+28-%2]
   861                                      mov     [ebp+%1*%2+28],eax
   862                                  %endif
   863                                  
   864                                  %endif
   865                                  
   866                                  %assign rc_val f2(rc_val)
   867                                  
   868                                  %endmacro
   869                                  
   870                                  %ifdef ENCRYPTION_KEY_SCHEDULE
   871                                  
   872                                  %ifdef  AES_128
   873                                  
   874                                  %ifndef ENCRYPTION_TABLE
   875                                  ; %define ENCRYPTION_TABLE
   876                                  %endif
   877                                  
   878                                  %assign rc_val  1
   879                                  
   880                                      do_name _aes_encrypt_key128,8
   881                                  
   882                                      push    ebp
   883                                      push    ebx
   884                                      push    esi
   885                                      push    edi
   886                                  
   887                                      mov     ebp,[esp+24]
   888                                      mov     [ebp+4*KS_LENGTH],dword 10*16
   889                                      mov     ebx,[esp+20]
   890                                  
   891                                      mov     esi,[ebx]
   892                                      mov     [ebp],esi
   893                                      mov     edi,[ebx+4]
   894                                      mov     [ebp+4],edi
   895                                      mov     ecx,[ebx+8]
   896                                      mov     [ebp+8],ecx
   897                                      mov     edx,[ebx+12]
   898                                      mov     [ebp+12],edx
   899                                      add     ebp,16
   900                                      mov     eax,edx
   901                                  
   902                                      f_key   0,16        ; 11 * 4 = 44 unsigned longs
   903                                      f_key   1,16        ; 4 + 4 * 10 generated = 44
   904                                      f_key   2,16
   905                                      f_key   3,16
   906                                      f_key   4,16
   907                                      f_key   5,16
   908                                      f_key   6,16
   909                                      f_key   7,16
   910                                      f_key   8,16
   911                                      f_key   9,16
   912                                  
   913                                      pop     edi
   914                                      pop     esi
   915                                      pop     ebx
   916                                      pop     ebp
   917                                      xor     eax,eax
   918                                      do_exit  8
   919                                  
   920                                  %endif
   921                                  
   922                                  %ifdef  AES_192
   923                                  
   924                                  %ifndef ENCRYPTION_TABLE
   925                                  ; %define ENCRYPTION_TABLE
   926                                  %endif
   927                                  
   928                                  %assign rc_val  1
   929                                  
   930                                      do_name _aes_encrypt_key192,8
   931                                  
   932                                      push    ebp
   933                                      push    ebx
   934                                      push    esi
   935                                      push    edi
   936                                  
   937                                      mov     ebp,[esp+24]
   938                                      mov     [ebp+4*KS_LENGTH],dword 12 * 16
   939                                      mov     ebx,[esp+20]
   940                                  
   941                                      mov     esi,[ebx]
   942                                      mov     [ebp],esi
   943                                      mov     edi,[ebx+4]
   944                                      mov     [ebp+4],edi
   945                                      mov     ecx,[ebx+8]
   946                                      mov     [ebp+8],ecx
   947                                      mov     edx,[ebx+12]
   948                                      mov     [ebp+12],edx
   949                                      mov     eax,[ebx+16]
   950                                      mov     [ebp+16],eax
   951                                      mov     eax,[ebx+20]
   952                                      mov     [ebp+20],eax
   953                                      add     ebp,24
   954                                  
   955                                      f_key   0,24        ; 13 * 4 = 52 unsigned longs
   956                                      f_key   1,24        ; 6 + 6 * 8 generated = 54
   957                                      f_key   2,24
   958                                      f_key   3,24
   959                                      f_key   4,24
   960                                      f_key   5,24
   961                                      f_key   6,24
   962                                      f_key   7,24
   963                                  
   964                                      pop     edi
   965                                      pop     esi
   966                                      pop     ebx
   967                                      pop     ebp
   968                                      xor     eax,eax
   969                                      do_exit  8
   970                                  
   971                                  %endif
   972                                  
   973                                  %ifdef  AES_256
   974                                  
   975                                  %ifndef ENCRYPTION_TABLE
   976                                  ; %define ENCRYPTION_TABLE
   977                                  %endif
   978                                  
   979                                  %assign rc_val  1
   980                                  
   981                                      do_name _aes_encrypt_key256,8
   982                              <1> %ifndef DLL_EXPORT
   983                              <1>  global %1
   984                              <1> %1:
   985                              <1> %else
   986                              <1>  global %1@%2
   987                              <1>  export %1@%2
   988                              <1> %1@%2:
   989                              <1> %endif
   990                                  
   991 0000023D 89E0                    	mov		ax, sp
   992 0000023F 660FB7E0                	movzx	esp, ax
   993                                  	
   994 00000243 6655                        push    ebp
   995 00000245 6653                        push    ebx
   996 00000247 6656                        push    esi
   997 00000249 6657                        push    edi
   998                                  
   999 0000024B 67660FB76C2414              movzx   ebp, word [esp+20] ; ks
  1000 00000252 6766C785F0000000E0-         mov     [ebp+4*KS_LENGTH],dword 14 * 16
  1001 0000025B 000000             
  1002 0000025E 67660FB75C2412              movzx   ebx, word [esp+18] ; key
  1003                                  
  1004 00000265 67668B33                    mov     esi,[ebx]
  1005 00000269 6766897500                  mov     [ebp],esi
  1006 0000026E 67668B7B04                  mov     edi,[ebx+4]
  1007 00000273 6766897D04                  mov     [ebp+4],edi
  1008 00000278 67668B4B08                  mov     ecx,[ebx+8]
  1009 0000027D 6766894D08                  mov     [ebp+8],ecx
  1010 00000282 67668B530C                  mov     edx,[ebx+12]
  1011 00000287 676689550C                  mov     [ebp+12],edx
  1012 0000028C 67668B4310                  mov     eax,[ebx+16]
  1013 00000291 6766894510                  mov     [ebp+16],eax
  1014 00000296 67668B4314                  mov     eax,[ebx+20]
  1015 0000029B 6766894514                  mov     [ebp+20],eax
  1016 000002A0 67668B4318                  mov     eax,[ebx+24]
  1017 000002A5 6766894518                  mov     [ebp+24],eax
  1018 000002AA 67668B431C                  mov     eax,[ebx+28]
  1019 000002AF 676689451C                  mov     [ebp+28],eax
  1020 000002B4 6683C520                    add     ebp,32
  1021                                  
  1022                                      f_key   0,32        ; 15 * 4 = 60 unsigned longs
  1023                              <1> 
  1024 000002B8 6651                <1>  push ecx
  1025 000002BA 6652                <1>  push edx
  1026 000002BC 6689F2              <1>  mov edx,esi
  1027 000002BF 66C1C808            <1>  ror eax,8
  1028                              <1>  mf_call l3s_col
  1029 000002C3 E8(0000)            <2>  call %1
  1030 000002C6 6689C6              <1>  mov esi,eax
  1031 000002C9 665A                <1>  pop edx
  1032 000002CB 6659                <1>  pop ecx
  1033 000002CD 6683F601            <1>  xor esi,rc_val
  1034                              <1> 
  1035 000002D1 6766897500          <1>  mov [ebp+%1*%2],esi
  1036 000002D6 6631F7              <1>  xor edi,esi
  1037 000002D9 6766897D04          <1>  mov [ebp+%1*%2+4],edi
  1038 000002DE 6631F9              <1>  xor ecx,edi
  1039 000002E1 6766894D08          <1>  mov [ebp+%1*%2+8],ecx
  1040 000002E6 6631CA              <1>  xor edx,ecx
  1041 000002E9 676689550C          <1>  mov [ebp+%1*%2+12],edx
  1042 000002EE 6689D0              <1>  mov eax,edx
  1043                              <1> 
  1044                              <1> %if %2 == 24
  1045                              <1> 
  1046                              <1> %if %1 < 7
  1047                              <1>  xor eax,[ebp+%1*%2+16-%2]
  1048                              <1>  mov [ebp+%1*%2+16],eax
  1049                              <1>  xor eax,[ebp+%1*%2+20-%2]
  1050                              <1>  mov [ebp+%1*%2+20],eax
  1051                              <1> %endif
  1052                              <1> 
  1053                              <1> %elif %2 == 32
  1054                              <1> 
  1055                              <1> %if %1 < 6
  1056 000002F1 6651                <1>  push ecx
  1057 000002F3 6652                <1>  push edx
  1058 000002F5 67668B55F0          <1>  mov edx,[ebp+%1*%2+16-%2]
  1059                              <1>  mf_call l3s_col
  1060 000002FA E8(0000)            <2>  call %1
  1061 000002FD 665A                <1>  pop edx
  1062 000002FF 6659                <1>  pop ecx
  1063 00000301 6766894510          <1>  mov [ebp+%1*%2+16],eax
  1064 00000306 67663345F4          <1>  xor eax,[ebp+%1*%2+20-%2]
  1065 0000030B 6766894514          <1>  mov [ebp+%1*%2+20],eax
  1066 00000310 67663345F8          <1>  xor eax,[ebp+%1*%2+24-%2]
  1067 00000315 6766894518          <1>  mov [ebp+%1*%2+24],eax
  1068 0000031A 67663345FC          <1>  xor eax,[ebp+%1*%2+28-%2]
  1069 0000031F 676689451C          <1>  mov [ebp+%1*%2+28],eax
  1070                              <1> %endif
  1071                              <1> 
  1072                              <1> %endif
  1073                              <1> 
  1074                              <1> %assign rc_val f2(rc_val)
  1075                              <1> 
  1076                                      f_key   1,32        ; 8 + 8 * 7 generated = 64
  1077                              <1> 
  1078 00000324 6651                <1>  push ecx
  1079 00000326 6652                <1>  push edx
  1080 00000328 6689F2              <1>  mov edx,esi
  1081 0000032B 66C1C808            <1>  ror eax,8
  1082                              <1>  mf_call l3s_col
  1083 0000032F E8(0000)            <2>  call %1
  1084 00000332 6689C6              <1>  mov esi,eax
  1085 00000335 665A                <1>  pop edx
  1086 00000337 6659                <1>  pop ecx
  1087 00000339 6683F602            <1>  xor esi,rc_val
  1088                              <1> 
  1089 0000033D 6766897520          <1>  mov [ebp+%1*%2],esi
  1090 00000342 6631F7              <1>  xor edi,esi
  1091 00000345 6766897D24          <1>  mov [ebp+%1*%2+4],edi
  1092 0000034A 6631F9              <1>  xor ecx,edi
  1093 0000034D 6766894D28          <1>  mov [ebp+%1*%2+8],ecx
  1094 00000352 6631CA              <1>  xor edx,ecx
  1095 00000355 676689552C          <1>  mov [ebp+%1*%2+12],edx
  1096 0000035A 6689D0              <1>  mov eax,edx
  1097                              <1> 
  1098                              <1> %if %2 == 24
  1099                              <1> 
  1100                              <1> %if %1 < 7
  1101                              <1>  xor eax,[ebp+%1*%2+16-%2]
  1102                              <1>  mov [ebp+%1*%2+16],eax
  1103                              <1>  xor eax,[ebp+%1*%2+20-%2]
  1104                              <1>  mov [ebp+%1*%2+20],eax
  1105                              <1> %endif
  1106                              <1> 
  1107                              <1> %elif %2 == 32
  1108                              <1> 
  1109                              <1> %if %1 < 6
  1110 0000035D 6651                <1>  push ecx
  1111 0000035F 6652                <1>  push edx
  1112 00000361 67668B5510          <1>  mov edx,[ebp+%1*%2+16-%2]
  1113                              <1>  mf_call l3s_col
  1114 00000366 E8(0000)            <2>  call %1
  1115 00000369 665A                <1>  pop edx
  1116 0000036B 6659                <1>  pop ecx
  1117 0000036D 6766894530          <1>  mov [ebp+%1*%2+16],eax
  1118 00000372 6766334514          <1>  xor eax,[ebp+%1*%2+20-%2]
  1119 00000377 6766894534          <1>  mov [ebp+%1*%2+20],eax
  1120 0000037C 6766334518          <1>  xor eax,[ebp+%1*%2+24-%2]
  1121 00000381 6766894538          <1>  mov [ebp+%1*%2+24],eax
  1122 00000386 676633451C          <1>  xor eax,[ebp+%1*%2+28-%2]
  1123 0000038B 676689453C          <1>  mov [ebp+%1*%2+28],eax
  1124                              <1> %endif
  1125                              <1> 
  1126                              <1> %endif
  1127                              <1> 
  1128                              <1> %assign rc_val f2(rc_val)
  1129                              <1> 
  1130                                      f_key   2,32
  1131                              <1> 
  1132 00000390 6651                <1>  push ecx
  1133 00000392 6652                <1>  push edx
  1134 00000394 6689F2              <1>  mov edx,esi
  1135 00000397 66C1C808            <1>  ror eax,8
  1136                              <1>  mf_call l3s_col
  1137 0000039B E8(0000)            <2>  call %1
  1138 0000039E 6689C6              <1>  mov esi,eax
  1139 000003A1 665A                <1>  pop edx
  1140 000003A3 6659                <1>  pop ecx
  1141 000003A5 6683F604            <1>  xor esi,rc_val
  1142                              <1> 
  1143 000003A9 6766897540          <1>  mov [ebp+%1*%2],esi
  1144 000003AE 6631F7              <1>  xor edi,esi
  1145 000003B1 6766897D44          <1>  mov [ebp+%1*%2+4],edi
  1146 000003B6 6631F9              <1>  xor ecx,edi
  1147 000003B9 6766894D48          <1>  mov [ebp+%1*%2+8],ecx
  1148 000003BE 6631CA              <1>  xor edx,ecx
  1149 000003C1 676689554C          <1>  mov [ebp+%1*%2+12],edx
  1150 000003C6 6689D0              <1>  mov eax,edx
  1151                              <1> 
  1152                              <1> %if %2 == 24
  1153                              <1> 
  1154                              <1> %if %1 < 7
  1155                              <1>  xor eax,[ebp+%1*%2+16-%2]
  1156                              <1>  mov [ebp+%1*%2+16],eax
  1157                              <1>  xor eax,[ebp+%1*%2+20-%2]
  1158                              <1>  mov [ebp+%1*%2+20],eax
  1159                              <1> %endif
  1160                              <1> 
  1161                              <1> %elif %2 == 32
  1162                              <1> 
  1163                              <1> %if %1 < 6
  1164 000003C9 6651                <1>  push ecx
  1165 000003CB 6652                <1>  push edx
  1166 000003CD 67668B5530          <1>  mov edx,[ebp+%1*%2+16-%2]
  1167                              <1>  mf_call l3s_col
  1168 000003D2 E8(0000)            <2>  call %1
  1169 000003D5 665A                <1>  pop edx
  1170 000003D7 6659                <1>  pop ecx
  1171 000003D9 6766894550          <1>  mov [ebp+%1*%2+16],eax
  1172 000003DE 6766334534          <1>  xor eax,[ebp+%1*%2+20-%2]
  1173 000003E3 6766894554          <1>  mov [ebp+%1*%2+20],eax
  1174 000003E8 6766334538          <1>  xor eax,[ebp+%1*%2+24-%2]
  1175 000003ED 6766894558          <1>  mov [ebp+%1*%2+24],eax
  1176 000003F2 676633453C          <1>  xor eax,[ebp+%1*%2+28-%2]
  1177 000003F7 676689455C          <1>  mov [ebp+%1*%2+28],eax
  1178                              <1> %endif
  1179                              <1> 
  1180                              <1> %endif
  1181                              <1> 
  1182                              <1> %assign rc_val f2(rc_val)
  1183                              <1> 
  1184                                      f_key   3,32
  1185                              <1> 
  1186 000003FC 6651                <1>  push ecx
  1187 000003FE 6652                <1>  push edx
  1188 00000400 6689F2              <1>  mov edx,esi
  1189 00000403 66C1C808            <1>  ror eax,8
  1190                              <1>  mf_call l3s_col
  1191 00000407 E8(0000)            <2>  call %1
  1192 0000040A 6689C6              <1>  mov esi,eax
  1193 0000040D 665A                <1>  pop edx
  1194 0000040F 6659                <1>  pop ecx
  1195 00000411 6683F608            <1>  xor esi,rc_val
  1196                              <1> 
  1197 00000415 6766897560          <1>  mov [ebp+%1*%2],esi
  1198 0000041A 6631F7              <1>  xor edi,esi
  1199 0000041D 6766897D64          <1>  mov [ebp+%1*%2+4],edi
  1200 00000422 6631F9              <1>  xor ecx,edi
  1201 00000425 6766894D68          <1>  mov [ebp+%1*%2+8],ecx
  1202 0000042A 6631CA              <1>  xor edx,ecx
  1203 0000042D 676689556C          <1>  mov [ebp+%1*%2+12],edx
  1204 00000432 6689D0              <1>  mov eax,edx
  1205                              <1> 
  1206                              <1> %if %2 == 24
  1207                              <1> 
  1208                              <1> %if %1 < 7
  1209                              <1>  xor eax,[ebp+%1*%2+16-%2]
  1210                              <1>  mov [ebp+%1*%2+16],eax
  1211                              <1>  xor eax,[ebp+%1*%2+20-%2]
  1212                              <1>  mov [ebp+%1*%2+20],eax
  1213                              <1> %endif
  1214                              <1> 
  1215                              <1> %elif %2 == 32
  1216                              <1> 
  1217                              <1> %if %1 < 6
  1218 00000435 6651                <1>  push ecx
  1219 00000437 6652                <1>  push edx
  1220 00000439 67668B5550          <1>  mov edx,[ebp+%1*%2+16-%2]
  1221                              <1>  mf_call l3s_col
  1222 0000043E E8(0000)            <2>  call %1
  1223 00000441 665A                <1>  pop edx
  1224 00000443 6659                <1>  pop ecx
  1225 00000445 6766894570          <1>  mov [ebp+%1*%2+16],eax
  1226 0000044A 6766334554          <1>  xor eax,[ebp+%1*%2+20-%2]
  1227 0000044F 6766894574          <1>  mov [ebp+%1*%2+20],eax
  1228 00000454 6766334558          <1>  xor eax,[ebp+%1*%2+24-%2]
  1229 00000459 6766894578          <1>  mov [ebp+%1*%2+24],eax
  1230 0000045E 676633455C          <1>  xor eax,[ebp+%1*%2+28-%2]
  1231 00000463 676689457C          <1>  mov [ebp+%1*%2+28],eax
  1232                              <1> %endif
  1233                              <1> 
  1234                              <1> %endif
  1235                              <1> 
  1236                              <1> %assign rc_val f2(rc_val)
  1237                              <1> 
  1238                                      f_key   4,32
  1239                              <1> 
  1240 00000468 6651                <1>  push ecx
  1241 0000046A 6652                <1>  push edx
  1242 0000046C 6689F2              <1>  mov edx,esi
  1243 0000046F 66C1C808            <1>  ror eax,8
  1244                              <1>  mf_call l3s_col
  1245 00000473 E8(0000)            <2>  call %1
  1246 00000476 6689C6              <1>  mov esi,eax
  1247 00000479 665A                <1>  pop edx
  1248 0000047B 6659                <1>  pop ecx
  1249 0000047D 6683F610            <1>  xor esi,rc_val
  1250                              <1> 
  1251 00000481 676689B580000000    <1>  mov [ebp+%1*%2],esi
  1252 00000489 6631F7              <1>  xor edi,esi
  1253 0000048C 676689BD84000000    <1>  mov [ebp+%1*%2+4],edi
  1254 00000494 6631F9              <1>  xor ecx,edi
  1255 00000497 6766898D88000000    <1>  mov [ebp+%1*%2+8],ecx
  1256 0000049F 6631CA              <1>  xor edx,ecx
  1257 000004A2 676689958C000000    <1>  mov [ebp+%1*%2+12],edx
  1258 000004AA 6689D0              <1>  mov eax,edx
  1259                              <1> 
  1260                              <1> %if %2 == 24
  1261                              <1> 
  1262                              <1> %if %1 < 7
  1263                              <1>  xor eax,[ebp+%1*%2+16-%2]
  1264                              <1>  mov [ebp+%1*%2+16],eax
  1265                              <1>  xor eax,[ebp+%1*%2+20-%2]
  1266                              <1>  mov [ebp+%1*%2+20],eax
  1267                              <1> %endif
  1268                              <1> 
  1269                              <1> %elif %2 == 32
  1270                              <1> 
  1271                              <1> %if %1 < 6
  1272 000004AD 6651                <1>  push ecx
  1273 000004AF 6652                <1>  push edx
  1274 000004B1 67668B5570          <1>  mov edx,[ebp+%1*%2+16-%2]
  1275                              <1>  mf_call l3s_col
  1276 000004B6 E8(0000)            <2>  call %1
  1277 000004B9 665A                <1>  pop edx
  1278 000004BB 6659                <1>  pop ecx
  1279 000004BD 6766898590000000    <1>  mov [ebp+%1*%2+16],eax
  1280 000004C5 6766334574          <1>  xor eax,[ebp+%1*%2+20-%2]
  1281 000004CA 6766898594000000    <1>  mov [ebp+%1*%2+20],eax
  1282 000004D2 6766334578          <1>  xor eax,[ebp+%1*%2+24-%2]
  1283 000004D7 6766898598000000    <1>  mov [ebp+%1*%2+24],eax
  1284 000004DF 676633457C          <1>  xor eax,[ebp+%1*%2+28-%2]
  1285 000004E4 676689859C000000    <1>  mov [ebp+%1*%2+28],eax
  1286                              <1> %endif
  1287                              <1> 
  1288                              <1> %endif
  1289                              <1> 
  1290                              <1> %assign rc_val f2(rc_val)
  1291                              <1> 
  1292                                      f_key   5,32
  1293                              <1> 
  1294 000004EC 6651                <1>  push ecx
  1295 000004EE 6652                <1>  push edx
  1296 000004F0 6689F2              <1>  mov edx,esi
  1297 000004F3 66C1C808            <1>  ror eax,8
  1298                              <1>  mf_call l3s_col
  1299 000004F7 E8(0000)            <2>  call %1
  1300 000004FA 6689C6              <1>  mov esi,eax
  1301 000004FD 665A                <1>  pop edx
  1302 000004FF 6659                <1>  pop ecx
  1303 00000501 6683F620            <1>  xor esi,rc_val
  1304                              <1> 
  1305 00000505 676689B5A0000000    <1>  mov [ebp+%1*%2],esi
  1306 0000050D 6631F7              <1>  xor edi,esi
  1307 00000510 676689BDA4000000    <1>  mov [ebp+%1*%2+4],edi
  1308 00000518 6631F9              <1>  xor ecx,edi
  1309 0000051B 6766898DA8000000    <1>  mov [ebp+%1*%2+8],ecx
  1310 00000523 6631CA              <1>  xor edx,ecx
  1311 00000526 67668995AC000000    <1>  mov [ebp+%1*%2+12],edx
  1312 0000052E 6689D0              <1>  mov eax,edx
  1313                              <1> 
  1314                              <1> %if %2 == 24
  1315                              <1> 
  1316                              <1> %if %1 < 7
  1317                              <1>  xor eax,[ebp+%1*%2+16-%2]
  1318                              <1>  mov [ebp+%1*%2+16],eax
  1319                              <1>  xor eax,[ebp+%1*%2+20-%2]
  1320                              <1>  mov [ebp+%1*%2+20],eax
  1321                              <1> %endif
  1322                              <1> 
  1323                              <1> %elif %2 == 32
  1324                              <1> 
  1325                              <1> %if %1 < 6
  1326 00000531 6651                <1>  push ecx
  1327 00000533 6652                <1>  push edx
  1328 00000535 67668B9590000000    <1>  mov edx,[ebp+%1*%2+16-%2]
  1329                              <1>  mf_call l3s_col
  1330 0000053D E8(0000)            <2>  call %1
  1331 00000540 665A                <1>  pop edx
  1332 00000542 6659                <1>  pop ecx
  1333 00000544 67668985B0000000    <1>  mov [ebp+%1*%2+16],eax
  1334 0000054C 6766338594000000    <1>  xor eax,[ebp+%1*%2+20-%2]
  1335 00000554 67668985B4000000    <1>  mov [ebp+%1*%2+20],eax
  1336 0000055C 6766338598000000    <1>  xor eax,[ebp+%1*%2+24-%2]
  1337 00000564 67668985B8000000    <1>  mov [ebp+%1*%2+24],eax
  1338 0000056C 676633859C000000    <1>  xor eax,[ebp+%1*%2+28-%2]
  1339 00000574 67668985BC000000    <1>  mov [ebp+%1*%2+28],eax
  1340                              <1> %endif
  1341                              <1> 
  1342                              <1> %endif
  1343                              <1> 
  1344                              <1> %assign rc_val f2(rc_val)
  1345                              <1> 
  1346                                      f_key   6,32
  1347                              <1> 
  1348 0000057C 6651                <1>  push ecx
  1349 0000057E 6652                <1>  push edx
  1350 00000580 6689F2              <1>  mov edx,esi
  1351 00000583 66C1C808            <1>  ror eax,8
  1352                              <1>  mf_call l3s_col
  1353 00000587 E8(0000)            <2>  call %1
  1354 0000058A 6689C6              <1>  mov esi,eax
  1355 0000058D 665A                <1>  pop edx
  1356 0000058F 6659                <1>  pop ecx
  1357 00000591 6683F640            <1>  xor esi,rc_val
  1358                              <1> 
  1359 00000595 676689B5C0000000    <1>  mov [ebp+%1*%2],esi
  1360 0000059D 6631F7              <1>  xor edi,esi
  1361 000005A0 676689BDC4000000    <1>  mov [ebp+%1*%2+4],edi
  1362 000005A8 6631F9              <1>  xor ecx,edi
  1363 000005AB 6766898DC8000000    <1>  mov [ebp+%1*%2+8],ecx
  1364 000005B3 6631CA              <1>  xor edx,ecx
  1365 000005B6 67668995CC000000    <1>  mov [ebp+%1*%2+12],edx
  1366 000005BE 6689D0              <1>  mov eax,edx
  1367                              <1> 
  1368                              <1> %if %2 == 24
  1369                              <1> 
  1370                              <1> %if %1 < 7
  1371                              <1>  xor eax,[ebp+%1*%2+16-%2]
  1372                              <1>  mov [ebp+%1*%2+16],eax
  1373                              <1>  xor eax,[ebp+%1*%2+20-%2]
  1374                              <1>  mov [ebp+%1*%2+20],eax
  1375                              <1> %endif
  1376                              <1> 
  1377                              <1> %elif %2 == 32
  1378                              <1> 
  1379                              <1> %if %1 < 6
  1380                              <1>  push ecx
  1381                              <1>  push edx
  1382                              <1>  mov edx,[ebp+%1*%2+16-%2]
  1383                              <1>  mf_call l3s_col
  1384                              <1>  pop edx
  1385                              <1>  pop ecx
  1386                              <1>  mov [ebp+%1*%2+16],eax
  1387                              <1>  xor eax,[ebp+%1*%2+20-%2]
  1388                              <1>  mov [ebp+%1*%2+20],eax
  1389                              <1>  xor eax,[ebp+%1*%2+24-%2]
  1390                              <1>  mov [ebp+%1*%2+24],eax
  1391                              <1>  xor eax,[ebp+%1*%2+28-%2]
  1392                              <1>  mov [ebp+%1*%2+28],eax
  1393                              <1> %endif
  1394                              <1> 
  1395                              <1> %endif
  1396                              <1> 
  1397                              <1> %assign rc_val f2(rc_val)
  1398                              <1> 
  1399                                  
  1400 000005C1 665F                        pop     edi
  1401 000005C3 665E                        pop     esi
  1402 000005C5 665B                        pop     ebx
  1403 000005C7 665D                        pop     ebp
  1404 000005C9 6631C0                      xor     eax,eax
  1405                                      do_exit  8
  1406                              <1> %ifdef DLL_EXPORT
  1407                              <1>  ret %1
  1408                              <1> %else
  1409 000005CC C3                  <1>  ret
  1410                              <1> %endif
  1411                                  
  1412                                  %endif
  1413                                  
  1414                                  %ifdef  AES_VAR
  1415                                  
  1416                                  %ifndef ENCRYPTION_TABLE
  1417                                  ; %define ENCRYPTION_TABLE
  1418                                  %endif
  1419                                  
  1420                                      do_name _aes_encrypt_key,12
  1421                                  
  1422                                      mov     ecx,[esp+4]
  1423                                      mov     eax,[esp+8]
  1424                                      mov     edx,[esp+12]
  1425                                      push    edx
  1426                                      push    ecx
  1427                                  
  1428                                      cmp     eax,16
  1429                                      je      .1
  1430                                      cmp     eax,128
  1431                                      je      .1
  1432                                  
  1433                                      cmp     eax,24
  1434                                      je      .2
  1435                                      cmp     eax,192
  1436                                      je      .2
  1437                                  
  1438                                      cmp     eax,32
  1439                                      je      .3
  1440                                      cmp     eax,256
  1441                                      je      .3
  1442                                      mov     eax,-1
  1443                                      add     esp,8
  1444                                      do_exit 12
  1445                                  
  1446                                  .1: do_call _aes_encrypt_key128,8
  1447                                      do_exit 12
  1448                                  .2: do_call _aes_encrypt_key192,8
  1449                                      do_exit 12
  1450                                  .3: do_call _aes_encrypt_key256,8
  1451                                      do_exit 12
  1452                                  
  1453                                  %endif
  1454                                  
  1455                                  %endif
  1456                                  
  1457                                  %ifdef ENCRYPTION_TABLE
  1458                                  
  1459                                  ; S-box data - 256 entries
  1460                                  
  1461                                      section _DATA
  1462                                  
  1463                                  %define u8(x)   0, x, x, f3(x), f2(x), x, x, f3(x)
  1464                                  
  1465                                  _aes_enc_tab:
  1466                                      db  u8(0x63),u8(0x7c),u8(0x77),u8(0x7b),u8(0xf2),u8(0x6b),u8(0x6f),u8(0xc5)
  1467                                      db  u8(0x30),u8(0x01),u8(0x67),u8(0x2b),u8(0xfe),u8(0xd7),u8(0xab),u8(0x76)
  1468                                      db  u8(0xca),u8(0x82),u8(0xc9),u8(0x7d),u8(0xfa),u8(0x59),u8(0x47),u8(0xf0)
  1469                                      db  u8(0xad),u8(0xd4),u8(0xa2),u8(0xaf),u8(0x9c),u8(0xa4),u8(0x72),u8(0xc0)
  1470                                      db  u8(0xb7),u8(0xfd),u8(0x93),u8(0x26),u8(0x36),u8(0x3f),u8(0xf7),u8(0xcc)
  1471                                      db  u8(0x34),u8(0xa5),u8(0xe5),u8(0xf1),u8(0x71),u8(0xd8),u8(0x31),u8(0x15)
  1472                                      db  u8(0x04),u8(0xc7),u8(0x23),u8(0xc3),u8(0x18),u8(0x96),u8(0x05),u8(0x9a)
  1473                                      db  u8(0x07),u8(0x12),u8(0x80),u8(0xe2),u8(0xeb),u8(0x27),u8(0xb2),u8(0x75)
  1474                                      db  u8(0x09),u8(0x83),u8(0x2c),u8(0x1a),u8(0x1b),u8(0x6e),u8(0x5a),u8(0xa0)
  1475                                      db  u8(0x52),u8(0x3b),u8(0xd6),u8(0xb3),u8(0x29),u8(0xe3),u8(0x2f),u8(0x84)
  1476                                      db  u8(0x53),u8(0xd1),u8(0x00),u8(0xed),u8(0x20),u8(0xfc),u8(0xb1),u8(0x5b)
  1477                                      db  u8(0x6a),u8(0xcb),u8(0xbe),u8(0x39),u8(0x4a),u8(0x4c),u8(0x58),u8(0xcf)
  1478                                      db  u8(0xd0),u8(0xef),u8(0xaa),u8(0xfb),u8(0x43),u8(0x4d),u8(0x33),u8(0x85)
  1479                                      db  u8(0x45),u8(0xf9),u8(0x02),u8(0x7f),u8(0x50),u8(0x3c),u8(0x9f),u8(0xa8)
  1480                                      db  u8(0x51),u8(0xa3),u8(0x40),u8(0x8f),u8(0x92),u8(0x9d),u8(0x38),u8(0xf5)
  1481                                      db  u8(0xbc),u8(0xb6),u8(0xda),u8(0x21),u8(0x10),u8(0xff),u8(0xf3),u8(0xd2)
  1482                                      db  u8(0xcd),u8(0x0c),u8(0x13),u8(0xec),u8(0x5f),u8(0x97),u8(0x44),u8(0x17)
  1483                                      db  u8(0xc4),u8(0xa7),u8(0x7e),u8(0x3d),u8(0x64),u8(0x5d),u8(0x19),u8(0x73)
  1484                                      db  u8(0x60),u8(0x81),u8(0x4f),u8(0xdc),u8(0x22),u8(0x2a),u8(0x90),u8(0x88)
  1485                                      db  u8(0x46),u8(0xee),u8(0xb8),u8(0x14),u8(0xde),u8(0x5e),u8(0x0b),u8(0xdb)
  1486                                      db  u8(0xe0),u8(0x32),u8(0x3a),u8(0x0a),u8(0x49),u8(0x06),u8(0x24),u8(0x5c)
  1487                                      db  u8(0xc2),u8(0xd3),u8(0xac),u8(0x62),u8(0x91),u8(0x95),u8(0xe4),u8(0x79)
  1488                                      db  u8(0xe7),u8(0xc8),u8(0x37),u8(0x6d),u8(0x8d),u8(0xd5),u8(0x4e),u8(0xa9)
  1489                                      db  u8(0x6c),u8(0x56),u8(0xf4),u8(0xea),u8(0x65),u8(0x7a),u8(0xae),u8(0x08)
  1490                                      db  u8(0xba),u8(0x78),u8(0x25),u8(0x2e),u8(0x1c),u8(0xa6),u8(0xb4),u8(0xc6)
  1491                                      db  u8(0xe8),u8(0xdd),u8(0x74),u8(0x1f),u8(0x4b),u8(0xbd),u8(0x8b),u8(0x8a)
  1492                                      db  u8(0x70),u8(0x3e),u8(0xb5),u8(0x66),u8(0x48),u8(0x03),u8(0xf6),u8(0x0e)
  1493                                      db  u8(0x61),u8(0x35),u8(0x57),u8(0xb9),u8(0x86),u8(0xc1),u8(0x1d),u8(0x9e)
  1494                                      db  u8(0xe1),u8(0xf8),u8(0x98),u8(0x11),u8(0x69),u8(0xd9),u8(0x8e),u8(0x94)
  1495                                      db  u8(0x9b),u8(0x1e),u8(0x87),u8(0xe9),u8(0xce),u8(0x55),u8(0x28),u8(0xdf)
  1496                                      db  u8(0x8c),u8(0xa1),u8(0x89),u8(0x0d),u8(0xbf),u8(0xe6),u8(0x42),u8(0x68)
  1497                                      db  u8(0x41),u8(0x99),u8(0x2d),u8(0x0f),u8(0xb0),u8(0x54),u8(0xbb),u8(0x16)
  1498                                  
  1499                                  %endif
  1500                                  
  1501                                  %ifdef  DECRYPTION
  1502                                  
  1503                                  ; %define DECRYPTION_TABLE
  1504                                  
  1505                                  %define dtab_0(x)   [_aes_dec_tab+  8*x]
  1506                                  %define dtab_1(x)   [_aes_dec_tab+3+8*x]
  1507                                  %define dtab_2(x)   [_aes_dec_tab+2+8*x]
  1508                                  %define dtab_3(x)   [_aes_dec_tab+1+8*x]
  1509                                  %define dtab_x(x)   byte [_aes_dec_tab+7+8*x]
  1510                                  
  1511                                  %macro irn_fun 2
  1512                                  
  1513                                      rol eax,16
  1514                                      %1      esi, cl, 0, ebp
  1515                                      %1      esi, bh, 1, ebp
  1516                                      %1      esi, al, 2, ebp
  1517                                      %1      edi, dl, 0, ebp
  1518                                      %1      edi, ch, 1, ebp
  1519                                      %1      edi, ah, 3, ebp
  1520                                      %2      ebp, bl, 0, ebp
  1521                                      shr     eax,16
  1522                                      and     ebx,0xffff0000
  1523                                      or      ebx,eax
  1524                                      shr     ecx,16
  1525                                      %1      ebp, bh, 1, eax
  1526                                      %1      ebp, ch, 3, eax
  1527                                      %2      eax, cl, 2, ecx
  1528                                      %1      eax, bl, 0, ecx
  1529                                      %1      eax, dh, 1, ecx
  1530                                      shr     ebx,16
  1531                                      shr     edx,16
  1532                                      %1      esi, dh, 3, ecx
  1533                                      %1      ebp, dl, 2, ecx
  1534                                      %1      eax, bh, 3, ecx
  1535                                      %1      edi, bl, 2, ecx
  1536                                  
  1537                                  %endmacro
  1538                                  
  1539                                  ; Basic MOV and XOR Operations for normal rounds
  1540                                  
  1541                                  %macro  ni_xor  4
  1542                                      movzx   %4,%2
  1543                                      xor     %1,dtab_%3(%4)
  1544                                  %endmacro
  1545                                  
  1546                                  %macro  ni_mov  4
  1547                                      movzx   %4,%2
  1548                                      mov     %1,dtab_%3(%4)
  1549                                  %endmacro
  1550                                  
  1551                                  ; Basic MOV and XOR Operations for last round
  1552                                  
  1553                                  %macro  li_xor  4
  1554                                      movzx   %4,%2
  1555                                      movzx   %4,dtab_x(%4)
  1556                                  %if %3 != 0
  1557                                      shl     %4,8*%3
  1558                                  %endif
  1559                                      xor     %1,%4
  1560                                  %endmacro
  1561                                  
  1562                                  %macro  li_mov  4
  1563                                      movzx   %4,%2
  1564                                      movzx   %1,dtab_x(%4)
  1565                                  %if %3 != 0
  1566                                      shl     %1,8*%3
  1567                                  %endif
  1568                                  %endmacro
  1569                                  
  1570                                  %ifdef REDUCE_CODE_SIZE
  1571                                  
  1572                                  dec_round:
  1573 000005CD 83EC02                  	sub		sp, 2
  1574                                  %ifdef AES_REV_DKS
  1575                                      add     ebp,16
  1576                                  %else
  1577 000005D0 6683ED10                    sub     ebp,16
  1578                                  %endif
  1579                                      save    1,ebp
  1580 000005D4 6766896C2404        <1>  mov [esp+4*%1],%2
  1581 000005DA 67668B7508                  mov     esi,[ebp+8]
  1582 000005DF 67668B7D0C                  mov     edi,[ebp+12]
  1583                                  
  1584                                      irn_fun ni_xor, ni_mov
  1585                              <1> 
  1586 000005E4 66C1C010            <1>  rol eax,16
  1587                              <1>  %1 esi, cl, 0, ebp
  1588 000005E8 660FB6E9            <2>  movzx %4,%2
  1589 000005EC 67663334ED-         <2>  xor %1,dtab_%3(%4)
  1590 000005F1 [00000000]          <2>
  1591                              <1>  %1 esi, bh, 1, ebp
  1592 000005F5 660FB6EF            <2>  movzx %4,%2
  1593 000005F9 67663334ED-         <2>  xor %1,dtab_%3(%4)
  1594 000005FE [03000000]          <2>
  1595                              <1>  %1 esi, al, 2, ebp
  1596 00000602 660FB6E8            <2>  movzx %4,%2
  1597 00000606 67663334ED-         <2>  xor %1,dtab_%3(%4)
  1598 0000060B [02000000]          <2>
  1599                              <1>  %1 edi, dl, 0, ebp
  1600 0000060F 660FB6EA            <2>  movzx %4,%2
  1601 00000613 6766333CED-         <2>  xor %1,dtab_%3(%4)
  1602 00000618 [00000000]          <2>
  1603                              <1>  %1 edi, ch, 1, ebp
  1604 0000061C 660FB6ED            <2>  movzx %4,%2
  1605 00000620 6766333CED-         <2>  xor %1,dtab_%3(%4)
  1606 00000625 [03000000]          <2>
  1607                              <1>  %1 edi, ah, 3, ebp
  1608 00000629 660FB6EC            <2>  movzx %4,%2
  1609 0000062D 6766333CED-         <2>  xor %1,dtab_%3(%4)
  1610 00000632 [01000000]          <2>
  1611                              <1>  %2 ebp, bl, 0, ebp
  1612 00000636 660FB6EB            <2>  movzx %4,%2
  1613 0000063A 67668B2CED-         <2>  mov %1,dtab_%3(%4)
  1614 0000063F [00000000]          <2>
  1615 00000643 66C1E810            <1>  shr eax,16
  1616 00000647 6681E30000FFFF      <1>  and ebx,0xffff0000
  1617 0000064E 6609C3              <1>  or ebx,eax
  1618 00000651 66C1E910            <1>  shr ecx,16
  1619                              <1>  %1 ebp, bh, 1, eax
  1620 00000655 660FB6C7            <2>  movzx %4,%2
  1621 00000659 6766332CC5-         <2>  xor %1,dtab_%3(%4)
  1622 0000065E [03000000]          <2>
  1623                              <1>  %1 ebp, ch, 3, eax
  1624 00000662 660FB6C5            <2>  movzx %4,%2
  1625 00000666 6766332CC5-         <2>  xor %1,dtab_%3(%4)
  1626 0000066B [01000000]          <2>
  1627                              <1>  %2 eax, cl, 2, ecx
  1628 0000066F 660FB6C9            <2>  movzx %4,%2
  1629 00000673 67668B04CD-         <2>  mov %1,dtab_%3(%4)
  1630 00000678 [02000000]          <2>
  1631                              <1>  %1 eax, bl, 0, ecx
  1632 0000067C 660FB6CB            <2>  movzx %4,%2
  1633 00000680 67663304CD-         <2>  xor %1,dtab_%3(%4)
  1634 00000685 [00000000]          <2>
  1635                              <1>  %1 eax, dh, 1, ecx
  1636 00000689 660FB6CE            <2>  movzx %4,%2
  1637 0000068D 67663304CD-         <2>  xor %1,dtab_%3(%4)
  1638 00000692 [03000000]          <2>
  1639 00000696 66C1EB10            <1>  shr ebx,16
  1640 0000069A 66C1EA10            <1>  shr edx,16
  1641                              <1>  %1 esi, dh, 3, ecx
  1642 0000069E 660FB6CE            <2>  movzx %4,%2
  1643 000006A2 67663334CD-         <2>  xor %1,dtab_%3(%4)
  1644 000006A7 [01000000]          <2>
  1645                              <1>  %1 ebp, dl, 2, ecx
  1646 000006AB 660FB6CA            <2>  movzx %4,%2
  1647 000006AF 6766332CCD-         <2>  xor %1,dtab_%3(%4)
  1648 000006B4 [02000000]          <2>
  1649                              <1>  %1 eax, bh, 3, ecx
  1650 000006B8 660FB6CF            <2>  movzx %4,%2
  1651 000006BC 67663304CD-         <2>  xor %1,dtab_%3(%4)
  1652 000006C1 [01000000]          <2>
  1653                              <1>  %1 edi, bl, 2, ecx
  1654 000006C5 660FB6CB            <2>  movzx %4,%2
  1655 000006C9 6766333CCD-         <2>  xor %1,dtab_%3(%4)
  1656 000006CE [02000000]          <2>
  1657                              <1> 
  1658                                  
  1659 000006D2 6689EB                      mov     ebx,ebp
  1660 000006D5 6689F1                      mov     ecx,esi
  1661 000006D8 6689FA                      mov     edx,edi
  1662                                      restore ebp,1
  1663 000006DB 67668B6C2404        <1>  mov %1,[esp+4*%2]
  1664 000006E1 6766334500                  xor     eax,[ebp]
  1665 000006E6 6766335D04                  xor     ebx,[ebp+4]
  1666 000006EB 83C402                     	add		sp, 2
  1667 000006EE C3                          ret
  1668                                  
  1669                                  %else
  1670                                  
  1671                                  %macro dec_round 0
  1672                                  
  1673                                  %ifdef AES_REV_DKS
  1674                                      add     ebp,16
  1675                                  %else
  1676                                      sub     ebp,16
  1677                                  %endif
  1678                                      save    0,ebp
  1679                                      mov     esi,[ebp+8]
  1680                                      mov     edi,[ebp+12]
  1681                                  
  1682                                      irn_fun ni_xor, ni_mov
  1683                                  
  1684                                      mov     ebx,ebp
  1685                                      mov     ecx,esi
  1686                                      mov     edx,edi
  1687                                      restore ebp,0
  1688                                      xor     eax,[ebp]
  1689                                      xor     ebx,[ebp+4]
  1690                                  
  1691                                  %endmacro
  1692                                  
  1693                                  %endif
  1694                                  
  1695                                  %macro dec_last_round 0
  1696                                  
  1697                                  %ifdef AES_REV_DKS
  1698                                      add     ebp,16
  1699                                  %else
  1700                                      sub     ebp,16
  1701                                  %endif
  1702                                      save    0,ebp
  1703                                      mov     esi,[ebp+8]
  1704                                      mov     edi,[ebp+12]
  1705                                  
  1706                                      irn_fun li_xor, li_mov
  1707                                  
  1708                                      mov     ebx,ebp
  1709                                      restore ebp,0
  1710                                      xor     eax,[ebp]
  1711                                      xor     ebx,[ebp+4]
  1712                                  
  1713                                  %endmacro
  1714                                  
  1715                                      section _TEXT
  1716                                  
  1717                                  ; AES Decryption Subroutine
  1718                                  
  1719                                      do_name _aes_decrypt,12
  1720                              <1> %ifndef DLL_EXPORT
  1721                              <1>  global %1
  1722                              <1> %1:
  1723                              <1> %else
  1724                              <1>  global %1@%2
  1725                              <1>  export %1@%2
  1726                              <1> %1@%2:
  1727                              <1> %endif
  1728                                      
  1729 000006EF 89E0                    	mov		ax, sp
  1730 000006F1 660FB7E0                	movzx	esp, ax
  1731                                  
  1732 000006F5 6683EC14                    sub     esp,stk_spc
  1733 000006F9 6766896C2410                mov     [esp+16],ebp
  1734 000006FF 6766895C240C                mov     [esp+12],ebx
  1735 00000705 676689742408                mov     [esp+ 8],esi
  1736 0000070B 6766897C2404                mov     [esp+ 4],edi
  1737                                  
  1738                                  ; input four columns and xor in first round key
  1739                                  
  1740 00000711 67660FB7742416              movzx   esi,word [esp+in_blk+stk_spc] ; input pointer
  1741 00000718 67668B06                    mov     eax,[esi   ]
  1742 0000071C 67668B5E04                  mov     ebx,[esi+ 4]
  1743 00000721 67668B4E08                  mov     ecx,[esi+ 8]
  1744 00000726 67668B560C                  mov     edx,[esi+12]
  1745 0000072B 67668D7610                  lea     esi,[esi+16]
  1746                                  
  1747 00000730 67660FB76C241A              movzx   ebp, word [esp+ctx+stk_spc]    ; key pointer
  1748 00000737 67660FB6BDF0000000          movzx   edi,byte[ebp+4*KS_LENGTH]
  1749                                  %ifndef  AES_REV_DKS        ; if decryption key schedule is not reversed
  1750 00000740 67668D6C3D00                lea     ebp,[ebp+edi] ; we have to access it from the top down
  1751                                  %endif
  1752 00000746 6766334500                  xor     eax,[ebp   ]  ; key schedule
  1753 0000074B 6766335D04                  xor     ebx,[ebp+ 4]
  1754 00000750 6766334D08                  xor     ecx,[ebp+ 8]
  1755 00000755 676633550C                  xor     edx,[ebp+12]
  1756                                  
  1757                                  ; determine the number of rounds
  1758                                  
  1759                                  %ifndef AES_256
  1760                                      cmp     edi,10*16
  1761                                      je      .3
  1762                                      cmp     edi,12*16
  1763                                      je      .2
  1764                                      cmp     edi,14*16
  1765                                      je      .1
  1766                                      mov     eax,-1
  1767                                      jmp     .5
  1768                                  %endif
  1769                                  
  1770                                  .1: mf_call dec_round
  1771                              <1> .1: 
  1772 0000075A E870FE              <1>  call %1
  1773                                      mf_call dec_round
  1774 0000075D E86DFE              <1>  call %1
  1775                                  .2: mf_call dec_round
  1776                              <1> .2: 
  1777 00000760 E86AFE              <1>  call %1
  1778                                      mf_call dec_round
  1779 00000763 E867FE              <1>  call %1
  1780                                  .3: mf_call dec_round
  1781                              <1> .3: 
  1782 00000766 E864FE              <1>  call %1
  1783                                      mf_call dec_round
  1784 00000769 E861FE              <1>  call %1
  1785                                      mf_call dec_round
  1786 0000076C E85EFE              <1>  call %1
  1787                                      mf_call dec_round
  1788 0000076F E85BFE              <1>  call %1
  1789                                      mf_call dec_round
  1790 00000772 E858FE              <1>  call %1
  1791                                      mf_call dec_round
  1792 00000775 E855FE              <1>  call %1
  1793                                      mf_call dec_round
  1794 00000778 E852FE              <1>  call %1
  1795                                      mf_call dec_round
  1796 0000077B E84FFE              <1>  call %1
  1797                                      mf_call dec_round
  1798 0000077E E84CFE              <1>  call %1
  1799                                      dec_last_round
  1800                              <1> 
  1801                              <1> %ifdef AES_REV_DKS
  1802                              <1>  add ebp,16
  1803                              <1> %else
  1804 00000781 6683ED10            <1>  sub ebp,16
  1805                              <1> %endif
  1806                              <1>  save 0,ebp
  1807 00000785 6766892C24          <2>  mov [esp+4*%1],%2
  1808 0000078A 67668B7508          <1>  mov esi,[ebp+8]
  1809 0000078F 67668B7D0C          <1>  mov edi,[ebp+12]
  1810                              <1> 
  1811                              <1>  irn_fun li_xor, li_mov
  1812                              <2> 
  1813 00000794 66C1C010            <2>  rol eax,16
  1814                              <2>  %1 esi, cl, 0, ebp
  1815 00000798 660FB6E9            <3>  movzx %4,%2
  1816 0000079C 67660FB62CED-       <3>  movzx %4,dtab_x(%4)
  1817 000007A2 [07000000]          <3>
  1818                              <3> %if %3 != 0
  1819                              <3>  shl %4,8*%3
  1820                              <3> %endif
  1821 000007A6 6631EE              <3>  xor %1,%4
  1822                              <2>  %1 esi, bh, 1, ebp
  1823 000007A9 660FB6EF            <3>  movzx %4,%2
  1824 000007AD 67660FB62CED-       <3>  movzx %4,dtab_x(%4)
  1825 000007B3 [07000000]          <3>
  1826                              <3> %if %3 != 0
  1827 000007B7 66C1E508            <3>  shl %4,8*%3
  1828                              <3> %endif
  1829 000007BB 6631EE              <3>  xor %1,%4
  1830                              <2>  %1 esi, al, 2, ebp
  1831 000007BE 660FB6E8            <3>  movzx %4,%2
  1832 000007C2 67660FB62CED-       <3>  movzx %4,dtab_x(%4)
  1833 000007C8 [07000000]          <3>
  1834                              <3> %if %3 != 0
  1835 000007CC 66C1E510            <3>  shl %4,8*%3
  1836                              <3> %endif
  1837 000007D0 6631EE              <3>  xor %1,%4
  1838                              <2>  %1 edi, dl, 0, ebp
  1839 000007D3 660FB6EA            <3>  movzx %4,%2
  1840 000007D7 67660FB62CED-       <3>  movzx %4,dtab_x(%4)
  1841 000007DD [07000000]          <3>
  1842                              <3> %if %3 != 0
  1843                              <3>  shl %4,8*%3
  1844                              <3> %endif
  1845 000007E1 6631EF              <3>  xor %1,%4
  1846                              <2>  %1 edi, ch, 1, ebp
  1847 000007E4 660FB6ED            <3>  movzx %4,%2
  1848 000007E8 67660FB62CED-       <3>  movzx %4,dtab_x(%4)
  1849 000007EE [07000000]          <3>
  1850                              <3> %if %3 != 0
  1851 000007F2 66C1E508            <3>  shl %4,8*%3
  1852                              <3> %endif
  1853 000007F6 6631EF              <3>  xor %1,%4
  1854                              <2>  %1 edi, ah, 3, ebp
  1855 000007F9 660FB6EC            <3>  movzx %4,%2
  1856 000007FD 67660FB62CED-       <3>  movzx %4,dtab_x(%4)
  1857 00000803 [07000000]          <3>
  1858                              <3> %if %3 != 0
  1859 00000807 66C1E518            <3>  shl %4,8*%3
  1860                              <3> %endif
  1861 0000080B 6631EF              <3>  xor %1,%4
  1862                              <2>  %2 ebp, bl, 0, ebp
  1863 0000080E 660FB6EB            <3>  movzx %4,%2
  1864 00000812 67660FB62CED-       <3>  movzx %1,dtab_x(%4)
  1865 00000818 [07000000]          <3>
  1866                              <3> %if %3 != 0
  1867                              <3>  shl %1,8*%3
  1868                              <3> %endif
  1869 0000081C 66C1E810            <2>  shr eax,16
  1870 00000820 6681E30000FFFF      <2>  and ebx,0xffff0000
  1871 00000827 6609C3              <2>  or ebx,eax
  1872 0000082A 66C1E910            <2>  shr ecx,16
  1873                              <2>  %1 ebp, bh, 1, eax
  1874 0000082E 660FB6C7            <3>  movzx %4,%2
  1875 00000832 67660FB604C5-       <3>  movzx %4,dtab_x(%4)
  1876 00000838 [07000000]          <3>
  1877                              <3> %if %3 != 0
  1878 0000083C 66C1E008            <3>  shl %4,8*%3
  1879                              <3> %endif
  1880 00000840 6631C5              <3>  xor %1,%4
  1881                              <2>  %1 ebp, ch, 3, eax
  1882 00000843 660FB6C5            <3>  movzx %4,%2
  1883 00000847 67660FB604C5-       <3>  movzx %4,dtab_x(%4)
  1884 0000084D [07000000]          <3>
  1885                              <3> %if %3 != 0
  1886 00000851 66C1E018            <3>  shl %4,8*%3
  1887                              <3> %endif
  1888 00000855 6631C5              <3>  xor %1,%4
  1889                              <2>  %2 eax, cl, 2, ecx
  1890 00000858 660FB6C9            <3>  movzx %4,%2
  1891 0000085C 67660FB604CD-       <3>  movzx %1,dtab_x(%4)
  1892 00000862 [07000000]          <3>
  1893                              <3> %if %3 != 0
  1894 00000866 66C1E010            <3>  shl %1,8*%3
  1895                              <3> %endif
  1896                              <2>  %1 eax, bl, 0, ecx
  1897 0000086A 660FB6CB            <3>  movzx %4,%2
  1898 0000086E 67660FB60CCD-       <3>  movzx %4,dtab_x(%4)
  1899 00000874 [07000000]          <3>
  1900                              <3> %if %3 != 0
  1901                              <3>  shl %4,8*%3
  1902                              <3> %endif
  1903 00000878 6631C8              <3>  xor %1,%4
  1904                              <2>  %1 eax, dh, 1, ecx
  1905 0000087B 660FB6CE            <3>  movzx %4,%2
  1906 0000087F 67660FB60CCD-       <3>  movzx %4,dtab_x(%4)
  1907 00000885 [07000000]          <3>
  1908                              <3> %if %3 != 0
  1909 00000889 66C1E108            <3>  shl %4,8*%3
  1910                              <3> %endif
  1911 0000088D 6631C8              <3>  xor %1,%4
  1912 00000890 66C1EB10            <2>  shr ebx,16
  1913 00000894 66C1EA10            <2>  shr edx,16
  1914                              <2>  %1 esi, dh, 3, ecx
  1915 00000898 660FB6CE            <3>  movzx %4,%2
  1916 0000089C 67660FB60CCD-       <3>  movzx %4,dtab_x(%4)
  1917 000008A2 [07000000]          <3>
  1918                              <3> %if %3 != 0
  1919 000008A6 66C1E118            <3>  shl %4,8*%3
  1920                              <3> %endif
  1921 000008AA 6631CE              <3>  xor %1,%4
  1922                              <2>  %1 ebp, dl, 2, ecx
  1923 000008AD 660FB6CA            <3>  movzx %4,%2
  1924 000008B1 67660FB60CCD-       <3>  movzx %4,dtab_x(%4)
  1925 000008B7 [07000000]          <3>
  1926                              <3> %if %3 != 0
  1927 000008BB 66C1E110            <3>  shl %4,8*%3
  1928                              <3> %endif
  1929 000008BF 6631CD              <3>  xor %1,%4
  1930                              <2>  %1 eax, bh, 3, ecx
  1931 000008C2 660FB6CF            <3>  movzx %4,%2
  1932 000008C6 67660FB60CCD-       <3>  movzx %4,dtab_x(%4)
  1933 000008CC [07000000]          <3>
  1934                              <3> %if %3 != 0
  1935 000008D0 66C1E118            <3>  shl %4,8*%3
  1936                              <3> %endif
  1937 000008D4 6631C8              <3>  xor %1,%4
  1938                              <2>  %1 edi, bl, 2, ecx
  1939 000008D7 660FB6CB            <3>  movzx %4,%2
  1940 000008DB 67660FB60CCD-       <3>  movzx %4,dtab_x(%4)
  1941 000008E1 [07000000]          <3>
  1942                              <3> %if %3 != 0
  1943 000008E5 66C1E110            <3>  shl %4,8*%3
  1944                              <3> %endif
  1945 000008E9 6631CF              <3>  xor %1,%4
  1946                              <2> 
  1947                              <1> 
  1948 000008EC 6689EB              <1>  mov ebx,ebp
  1949                              <1>  restore ebp,0
  1950 000008EF 67668B2C24          <2>  mov %1,[esp+4*%2]
  1951 000008F4 6766334500          <1>  xor eax,[ebp]
  1952 000008F9 6766335D04          <1>  xor ebx,[ebp+4]
  1953                              <1> 
  1954                                  
  1955                                  ; move final values to the output array.
  1956                                  
  1957 000008FE 67660FB76C2418              movzx   ebp,word [esp+out_blk+stk_spc]
  1958 00000905 6766894500                  mov     [ebp],eax
  1959 0000090A 6766895D04                  mov     [ebp+4],ebx
  1960 0000090F 6766897508                  mov     [ebp+8],esi
  1961 00000914 6766897D0C                  mov     [ebp+12],edi
  1962 00000919 6631C0                      xor     eax,eax
  1963                                  
  1964 0000091C 67668B6C2410            .5: mov     ebp,[esp+16]
  1965 00000922 67668B5C240C                mov     ebx,[esp+12]
  1966 00000928 67668B742408                mov     esi,[esp+ 8]
  1967 0000092E 67668B7C2404                mov     edi,[esp+ 4]
  1968 00000934 6683C414                    add     esp,stk_spc
  1969                                      do_exit 12
  1970                              <1> %ifdef DLL_EXPORT
  1971                              <1>  ret %1
  1972                              <1> %else
  1973 00000938 C3                  <1>  ret
  1974                              <1> %endif
  1975                                  
  1976                                  %endif
  1977                                  
  1978                                  %ifdef REDUCE_CODE_SIZE
  1979                                  
  1980                                  inv_mix_col:
  1981 00000939 660FB6CA                    movzx   ecx,dl          ; input  eax, edx
  1982 0000093D 67660FB60CCD-               movzx   ecx,etab_b(ecx) ; output eax
  1983 00000943 [01000000]         
  1984 00000947 67668B04CD-                 mov     eax,dtab_0(ecx) ; used   ecx
  1985 0000094C [00000000]         
  1986 00000950 660FB6CE                    movzx   ecx,dh
  1987 00000954 66C1EA10                    shr     edx,16
  1988 00000958 67660FB60CCD-               movzx   ecx,etab_b(ecx)
  1989 0000095E [01000000]         
  1990 00000962 67663304CD-                 xor     eax,dtab_1(ecx)
  1991 00000967 [03000000]         
  1992 0000096B 660FB6CA                    movzx   ecx,dl
  1993 0000096F 67660FB60CCD-               movzx   ecx,etab_b(ecx)
  1994 00000975 [01000000]         
  1995 00000979 67663304CD-                 xor     eax,dtab_2(ecx)
  1996 0000097E [02000000]         
  1997 00000982 660FB6CE                    movzx   ecx,dh
  1998 00000986 67660FB60CCD-               movzx   ecx,etab_b(ecx)
  1999 0000098C [01000000]         
  2000 00000990 67663304CD-                 xor     eax,dtab_3(ecx)
  2001 00000995 [01000000]         
  2002 00000999 C3                          ret
  2003                                  
  2004                                  %else
  2005                                  
  2006                                  %macro  inv_mix_col 0   
  2007                                  
  2008                                      movzx   ecx,dl          ; input  eax, edx
  2009                                      movzx   ecx,etab_b(ecx) ; output eax
  2010                                      mov     eax,dtab_0(ecx) ; used   ecx
  2011                                      movzx   ecx,dh
  2012                                      shr     edx,16
  2013                                      movzx   ecx,etab_b(ecx)
  2014                                      xor     eax,dtab_1(ecx)
  2015                                      movzx   ecx,dl
  2016                                      movzx   ecx,etab_b(ecx)
  2017                                      xor     eax,dtab_2(ecx)
  2018                                      movzx   ecx,dh
  2019                                      movzx   ecx,etab_b(ecx)
  2020                                      xor     eax,dtab_3(ecx)
  2021                                  
  2022                                  %endmacro
  2023                                  
  2024                                  %endif
  2025                                  
  2026                                  %ifdef DECRYPTION_KEY_SCHEDULE
  2027                                  
  2028                                  %ifdef AES_128
  2029                                  
  2030                                  %ifndef DECRYPTION_TABLE
  2031                                  ; %define DECRYPTION_TABLE
  2032                                  %endif
  2033                                  
  2034                                      do_name _aes_decrypt_key128,8
  2035                                  
  2036                                      push    ebp
  2037                                      push    ebx
  2038                                      push    esi
  2039                                      push    edi
  2040                                      mov     eax,[esp+24]    ; context
  2041                                      mov     edx,[esp+20]    ; key
  2042                                      push    eax
  2043                                      push    edx
  2044                                      do_call _aes_encrypt_key128,8   ; generate expanded encryption key
  2045                                      mov     eax,10*16
  2046                                      mov     esi,[esp+24]    ; pointer to first round key
  2047                                      lea     edi,[esi+eax]   ; pointer to last round key
  2048                                      add     esi,32
  2049                                                              ; the inverse mix column transformation
  2050                                      mov     edx,[esi-16]    ; needs to be applied to all round keys
  2051                                      mf_call inv_mix_col     ; except first and last. Hence start by
  2052                                      mov     [esi-16],eax    ; transforming the four sub-keys in the
  2053                                      mov     edx,[esi-12]    ; second round key
  2054                                      mf_call inv_mix_col
  2055                                      mov     [esi-12],eax    ; transformations for subsequent rounds
  2056                                      mov     edx,[esi-8]     ; can then be made more efficient by
  2057                                      mf_call inv_mix_col     ; noting that for three of the four sub-keys
  2058                                      mov     [esi-8],eax     ; in the encryption round key ek[r]:
  2059                                      mov     edx,[esi-4]     ;
  2060                                      mf_call inv_mix_col     ;   ek[r][n] = ek[r][n-1] ^ ek[r-1][n]
  2061                                      mov     [esi-4],eax     ;
  2062                                                              ; where n is 1..3. Hence the corresponding
  2063                                  .0: mov     edx,[esi]       ; subkeys in the decryption round key dk[r]
  2064                                      mf_call inv_mix_col     ; also obey since inv_mix_col is linear in
  2065                                      mov     [esi],eax       ; GF(256):
  2066                                      xor     eax,[esi-12]    ;
  2067                                      mov     [esi+4],eax     ;   dk[r][n] = dk[r][n-1] ^ dk[r-1][n]
  2068                                      xor     eax,[esi-8]     ;
  2069                                      mov     [esi+8],eax     ; So we only need one inverse mix column
  2070                                      xor     eax,[esi-4]     ; operation (n = 0) for each four word cycle
  2071                                      mov     [esi+12],eax    ; in the expanded key.
  2072                                      add     esi,16
  2073                                      cmp     edi,esi
  2074                                      jg      .0
  2075                                      jmp     dec_end
  2076                                  
  2077                                  %endif
  2078                                  
  2079                                  %ifdef AES_192
  2080                                  
  2081                                  %ifndef DECRYPTION_TABLE
  2082                                  ; %define DECRYPTION_TABLE
  2083                                  %endif
  2084                                  
  2085                                      do_name _aes_decrypt_key192,8
  2086                                  
  2087                                      push    ebp
  2088                                      push    ebx
  2089                                      push    esi
  2090                                      push    edi
  2091                                      mov     eax,[esp+24]    ; context
  2092                                      mov     edx,[esp+20]    ; key
  2093                                      push    eax
  2094                                      push    edx
  2095                                      do_call _aes_encrypt_key192,8   ; generate expanded encryption key
  2096                                      mov     eax,12*16
  2097                                      mov     esi,[esp+24]    ; first round key
  2098                                      lea     edi,[esi+eax]   ; last round key
  2099                                      add     esi,48          ; the first 6 words are the key, of
  2100                                                              ; which the top 2 words are part of
  2101                                      mov     edx,[esi-32]    ; the second round key and hence
  2102                                      mf_call inv_mix_col     ; need to be modified. After this we
  2103                                      mov     [esi-32],eax    ; need to do a further six values prior
  2104                                      mov     edx,[esi-28]    ; to using a more efficient technique
  2105                                      mf_call inv_mix_col     ; based on:
  2106                                      mov     [esi-28],eax    ;
  2107                                                              ; dk[r][n] = dk[r][n-1] ^ dk[r-1][n]
  2108                                      mov     edx,[esi-24]    ;
  2109                                      mf_call inv_mix_col     ; for n = 1 .. 5 where the key expansion
  2110                                      mov     [esi-24],eax    ; cycle is now 6 words long
  2111                                      mov     edx,[esi-20]
  2112                                      mf_call inv_mix_col
  2113                                      mov     [esi-20],eax
  2114                                      mov     edx,[esi-16]
  2115                                      mf_call inv_mix_col
  2116                                      mov     [esi-16],eax
  2117                                      mov     edx,[esi-12]
  2118                                      mf_call inv_mix_col
  2119                                      mov     [esi-12],eax
  2120                                      mov     edx,[esi-8]
  2121                                      mf_call inv_mix_col
  2122                                      mov     [esi-8],eax
  2123                                      mov     edx,[esi-4]
  2124                                      mf_call inv_mix_col
  2125                                      mov     [esi-4],eax
  2126                                  
  2127                                  .0: mov     edx,[esi]       ; the expanded key is 13 * 4 = 44 32-bit words
  2128                                      mf_call inv_mix_col     ; of which 11 * 4 = 44 have to be modified
  2129                                      mov     [esi],eax       ; using inv_mix_col.  We have already done 8
  2130                                      xor     eax,[esi-20]    ; of these so 36 are left - hence we need
  2131                                      mov     [esi+4],eax     ; exactly 6 loops of six here
  2132                                      xor     eax,[esi-16]
  2133                                      mov     [esi+8],eax
  2134                                      xor     eax,[esi-12]
  2135                                      mov     [esi+12],eax
  2136                                      xor     eax,[esi-8]
  2137                                      mov     [esi+16],eax
  2138                                      xor     eax,[esi-4]
  2139                                      mov     [esi+20],eax
  2140                                      add     esi,24
  2141                                      cmp     edi,esi
  2142                                      jg      .0
  2143                                      jmp     dec_end
  2144                                  
  2145                                  %endif
  2146                                  
  2147                                  %ifdef AES_256
  2148                                  
  2149                                  %ifndef DECRYPTION_TABLE
  2150                                  ; %define DECRYPTION_TABLE
  2151                                  %endif
  2152                                  
  2153                                      do_name _aes_decrypt_key256,8
  2154                              <1> %ifndef DLL_EXPORT
  2155                              <1>  global %1
  2156                              <1> %1:
  2157                              <1> %else
  2158                              <1>  global %1@%2
  2159                              <1>  export %1@%2
  2160                              <1> %1@%2:
  2161                              <1> %endif
  2162                                      
  2163 0000099A 89E0                        mov		ax, sp
  2164 0000099C 660FB7E0                	movzx	esp, ax
  2165 000009A0 6655                        push    ebp
  2166 000009A2 6653                        push    ebx
  2167 000009A4 6656                        push    esi
  2168 000009A6 6657                        push    edi
  2169                                      
  2170 000009A8 67660FB7442414              movzx   eax, word [esp+20] ; ks
  2171 000009AF 67660FB7542412              movzx   edx, word [esp+18] ; key
  2172 000009B6 50                          push    ax
  2173 000009B7 52                          push    dx
  2174                                      do_call _aes_encrypt_key256,4   ; generate expanded encryption key
  2175                              <1> %ifndef DLL_EXPORT
  2176 000009B8 E882F8              <1>  call %1
  2177 000009BB 6683C404            <1>  add esp,%2
  2178                              <1> %else
  2179                              <1>  call %1@%2
  2180                              <1> %endif
  2181 000009BF 66B8E0000000                mov     eax,14*16
  2182 000009C5 67660FB7742414              movzx   esi, word [esp+20] ; ks
  2183 000009CC 67668D3C06                  lea     edi,[esi+eax]
  2184 000009D1 6683C640                    add     esi,64
  2185                                  
  2186 000009D5 67668B56D0                  mov     edx,[esi-48]    ; the primary key is 8 words, of which
  2187                                      mf_call inv_mix_col     ; the top four require modification
  2188 000009DA E85CFF              <1>  call %1
  2189 000009DD 67668946D0                  mov     [esi-48],eax
  2190 000009E2 67668B56D4                  mov     edx,[esi-44]
  2191                                      mf_call inv_mix_col
  2192 000009E7 E84FFF              <1>  call %1
  2193 000009EA 67668946D4                  mov     [esi-44],eax
  2194 000009EF 67668B56D8                  mov     edx,[esi-40]
  2195                                      mf_call inv_mix_col
  2196 000009F4 E842FF              <1>  call %1
  2197 000009F7 67668946D8                  mov     [esi-40],eax
  2198 000009FC 67668B56DC                  mov     edx,[esi-36]
  2199                                      mf_call inv_mix_col
  2200 00000A01 E835FF              <1>  call %1
  2201 00000A04 67668946DC                  mov     [esi-36],eax
  2202                                  
  2203 00000A09 67668B56E0                  mov     edx,[esi-32]    ; the encryption key expansion cycle is
  2204                                      mf_call inv_mix_col     ; now eight words long so we need to
  2205 00000A0E E828FF              <1>  call %1
  2206 00000A11 67668946E0                  mov     [esi-32],eax    ; start by doing one complete block
  2207 00000A16 67668B56E4                  mov     edx,[esi-28]
  2208                                      mf_call inv_mix_col
  2209 00000A1B E81BFF              <1>  call %1
  2210 00000A1E 67668946E4                  mov     [esi-28],eax
  2211 00000A23 67668B56E8                  mov     edx,[esi-24]
  2212                                      mf_call inv_mix_col
  2213 00000A28 E80EFF              <1>  call %1
  2214 00000A2B 67668946E8                  mov     [esi-24],eax
  2215 00000A30 67668B56EC                  mov     edx,[esi-20]
  2216                                      mf_call inv_mix_col
  2217 00000A35 E801FF              <1>  call %1
  2218 00000A38 67668946EC                  mov     [esi-20],eax
  2219 00000A3D 67668B56F0                  mov     edx,[esi-16]
  2220                                      mf_call inv_mix_col
  2221 00000A42 E8F4FE              <1>  call %1
  2222 00000A45 67668946F0                  mov     [esi-16],eax
  2223 00000A4A 67668B56F4                  mov     edx,[esi-12]
  2224                                      mf_call inv_mix_col
  2225 00000A4F E8E7FE              <1>  call %1
  2226 00000A52 67668946F4                  mov     [esi-12],eax
  2227 00000A57 67668B56F8                  mov     edx,[esi-8]
  2228                                      mf_call inv_mix_col
  2229 00000A5C E8DAFE              <1>  call %1
  2230 00000A5F 67668946F8                  mov     [esi-8],eax
  2231 00000A64 67668B56FC                  mov     edx,[esi-4]
  2232                                      mf_call inv_mix_col
  2233 00000A69 E8CDFE              <1>  call %1
  2234 00000A6C 67668946FC                  mov     [esi-4],eax
  2235                                  
  2236 00000A71 67668B16                .0: mov     edx,[esi]       ; we can now speed up the remaining
  2237                                      mf_call inv_mix_col     ; rounds by using the technique
  2238 00000A75 E8C1FE              <1>  call %1
  2239 00000A78 67668906                    mov     [esi],eax       ; outlined earlier.  But note that
  2240 00000A7C 67663346E4                  xor     eax,[esi-28]    ; there is one extra inverse mix
  2241 00000A81 6766894604                  mov     [esi+4],eax     ; column operation as the 256 bit
  2242 00000A86 67663346E8                  xor     eax,[esi-24]    ; key has an extra non-linear step
  2243 00000A8B 6766894608                  mov     [esi+8],eax     ; for the midway element.
  2244 00000A90 67663346EC                  xor     eax,[esi-20]
  2245 00000A95 676689460C                  mov     [esi+12],eax    ; the expanded key is 15 * 4 = 60
  2246 00000A9A 67668B5610                  mov     edx,[esi+16]    ; 32-bit words of which 52 need to
  2247                                      mf_call inv_mix_col     ; be modified.  We have already done
  2248 00000A9F E897FE              <1>  call %1
  2249 00000AA2 6766894610                  mov     [esi+16],eax    ; 12 so 40 are left - which means
  2250 00000AA7 67663346F4                  xor     eax,[esi-12]    ; that we need exactly 5 loops of 8
  2251 00000AAC 6766894614                  mov     [esi+20],eax
  2252 00000AB1 67663346F8                  xor     eax,[esi-8]
  2253 00000AB6 6766894618                  mov     [esi+24],eax
  2254 00000ABB 67663346FC                  xor     eax,[esi-4]
  2255 00000AC0 676689461C                  mov     [esi+28],eax
  2256 00000AC5 6683C620                    add     esi,32
  2257 00000AC9 6639F7                      cmp     edi,esi
  2258 00000ACC 7FA3                        jg      .0
  2259                                  
  2260                                  %endif
  2261                                  
  2262                                  dec_end:
  2263                                  
  2264                                  %ifdef AES_REV_DKS
  2265                                  
  2266                                      movzx   esi,word [esp+20]	; this reverses the order of the
  2267                                  .1: mov     eax,[esi]			; round keys if required
  2268                                      mov     ebx,[esi+4]
  2269                                      mov     ebp,[edi]
  2270                                      mov     edx,[edi+4]
  2271                                      mov     [esi],ebp
  2272                                      mov     [esi+4],edx
  2273                                      mov     [edi],eax
  2274                                      mov     [edi+4],ebx
  2275                                  
  2276                                      mov     eax,[esi+8]
  2277                                      mov     ebx,[esi+12]
  2278                                      mov     ebp,[edi+8]
  2279                                      mov     edx,[edi+12]
  2280                                      mov     [esi+8],ebp
  2281                                      mov     [esi+12],edx
  2282                                      mov     [edi+8],eax
  2283                                      mov     [edi+12],ebx
  2284                                  
  2285                                      add     esi,16
  2286                                      sub     edi,16
  2287                                      cmp     edi,esi
  2288                                      jg      .1
  2289                                  
  2290                                  %endif
  2291                                  
  2292 00000ACE 665F                        pop     edi
  2293 00000AD0 665E                        pop     esi
  2294 00000AD2 665B                        pop     ebx
  2295 00000AD4 665D                        pop     ebp
  2296 00000AD6 6631C0                      xor     eax,eax
  2297                                      do_exit  8
  2298                              <1> %ifdef DLL_EXPORT
  2299                              <1>  ret %1
  2300                              <1> %else
  2301 00000AD9 C3                  <1>  ret
  2302                              <1> %endif
  2303                                  
  2304                                  %ifdef AES_VAR
  2305                                  
  2306                                      do_name _aes_decrypt_key,12
  2307                                  
  2308                                      mov     ecx,[esp+4]
  2309                                      mov     eax,[esp+8]
  2310                                      mov     edx,[esp+12]
  2311                                      push    edx
  2312                                      push    ecx
  2313                                  
  2314                                      cmp     eax,16
  2315                                      je      .1
  2316                                      cmp     eax,128
  2317                                      je      .1
  2318                                  
  2319                                      cmp     eax,24
  2320                                      je      .2
  2321                                      cmp     eax,192
  2322                                      je      .2
  2323                                  
  2324                                      cmp     eax,32
  2325                                      je      .3
  2326                                      cmp     eax,256
  2327                                      je      .3
  2328                                      mov     eax,-1
  2329                                      add     esp,8
  2330                                      do_exit 12
  2331                                  
  2332                                  .1: do_call _aes_decrypt_key128,8
  2333                                      do_exit 12
  2334                                  .2: do_call _aes_decrypt_key192,8
  2335                                      do_exit 12
  2336                                  .3: do_call _aes_decrypt_key256,8
  2337                                      do_exit 12
  2338                                  
  2339                                  %endif
  2340                                  
  2341                                  %endif
  2342                                  
  2343                                  %ifdef DECRYPTION_TABLE
  2344                                  
  2345                                  ; Inverse S-box data - 256 entries
  2346                                  
  2347                                      section _DATA
  2348                                  
  2349                                  %define v8(x)   fe(x), f9(x), fd(x), fb(x), fe(x), f9(x), fd(x), x
  2350                                  
  2351                                  _aes_dec_tab:
  2352                                      db  v8(0x52),v8(0x09),v8(0x6a),v8(0xd5),v8(0x30),v8(0x36),v8(0xa5),v8(0x38)
  2353                                      db  v8(0xbf),v8(0x40),v8(0xa3),v8(0x9e),v8(0x81),v8(0xf3),v8(0xd7),v8(0xfb)
  2354                                      db  v8(0x7c),v8(0xe3),v8(0x39),v8(0x82),v8(0x9b),v8(0x2f),v8(0xff),v8(0x87)
  2355                                      db  v8(0x34),v8(0x8e),v8(0x43),v8(0x44),v8(0xc4),v8(0xde),v8(0xe9),v8(0xcb)
  2356                                      db  v8(0x54),v8(0x7b),v8(0x94),v8(0x32),v8(0xa6),v8(0xc2),v8(0x23),v8(0x3d)
  2357                                      db  v8(0xee),v8(0x4c),v8(0x95),v8(0x0b),v8(0x42),v8(0xfa),v8(0xc3),v8(0x4e)
  2358                                      db  v8(0x08),v8(0x2e),v8(0xa1),v8(0x66),v8(0x28),v8(0xd9),v8(0x24),v8(0xb2)
  2359                                      db  v8(0x76),v8(0x5b),v8(0xa2),v8(0x49),v8(0x6d),v8(0x8b),v8(0xd1),v8(0x25)
  2360                                      db  v8(0x72),v8(0xf8),v8(0xf6),v8(0x64),v8(0x86),v8(0x68),v8(0x98),v8(0x16)
  2361                                      db  v8(0xd4),v8(0xa4),v8(0x5c),v8(0xcc),v8(0x5d),v8(0x65),v8(0xb6),v8(0x92)
  2362                                      db  v8(0x6c),v8(0x70),v8(0x48),v8(0x50),v8(0xfd),v8(0xed),v8(0xb9),v8(0xda)
  2363                                      db  v8(0x5e),v8(0x15),v8(0x46),v8(0x57),v8(0xa7),v8(0x8d),v8(0x9d),v8(0x84)
  2364                                      db  v8(0x90),v8(0xd8),v8(0xab),v8(0x00),v8(0x8c),v8(0xbc),v8(0xd3),v8(0x0a)
  2365                                      db  v8(0xf7),v8(0xe4),v8(0x58),v8(0x05),v8(0xb8),v8(0xb3),v8(0x45),v8(0x06)
  2366                                      db  v8(0xd0),v8(0x2c),v8(0x1e),v8(0x8f),v8(0xca),v8(0x3f),v8(0x0f),v8(0x02)
  2367                                      db  v8(0xc1),v8(0xaf),v8(0xbd),v8(0x03),v8(0x01),v8(0x13),v8(0x8a),v8(0x6b)
  2368                                      db  v8(0x3a),v8(0x91),v8(0x11),v8(0x41),v8(0x4f),v8(0x67),v8(0xdc),v8(0xea)
  2369                                      db  v8(0x97),v8(0xf2),v8(0xcf),v8(0xce),v8(0xf0),v8(0xb4),v8(0xe6),v8(0x73)
  2370                                      db  v8(0x96),v8(0xac),v8(0x74),v8(0x22),v8(0xe7),v8(0xad),v8(0x35),v8(0x85)
  2371                                      db  v8(0xe2),v8(0xf9),v8(0x37),v8(0xe8),v8(0x1c),v8(0x75),v8(0xdf),v8(0x6e)
  2372                                      db  v8(0x47),v8(0xf1),v8(0x1a),v8(0x71),v8(0x1d),v8(0x29),v8(0xc5),v8(0x89)
  2373                                      db  v8(0x6f),v8(0xb7),v8(0x62),v8(0x0e),v8(0xaa),v8(0x18),v8(0xbe),v8(0x1b)
  2374                                      db  v8(0xfc),v8(0x56),v8(0x3e),v8(0x4b),v8(0xc6),v8(0xd2),v8(0x79),v8(0x20)
  2375                                      db  v8(0x9a),v8(0xdb),v8(0xc0),v8(0xfe),v8(0x78),v8(0xcd),v8(0x5a),v8(0xf4)
  2376                                      db  v8(0x1f),v8(0xdd),v8(0xa8),v8(0x33),v8(0x88),v8(0x07),v8(0xc7),v8(0x31)
  2377                                      db  v8(0xb1),v8(0x12),v8(0x10),v8(0x59),v8(0x27),v8(0x80),v8(0xec),v8(0x5f)
  2378                                      db  v8(0x60),v8(0x51),v8(0x7f),v8(0xa9),v8(0x19),v8(0xb5),v8(0x4a),v8(0x0d)
  2379                                      db  v8(0x2d),v8(0xe5),v8(0x7a),v8(0x9f),v8(0x93),v8(0xc9),v8(0x9c),v8(0xef)
  2380                                      db  v8(0xa0),v8(0xe0),v8(0x3b),v8(0x4d),v8(0xae),v8(0x2a),v8(0xf5),v8(0xb0)
  2381                                      db  v8(0xc8),v8(0xeb),v8(0xbb),v8(0x3c),v8(0x83),v8(0x53),v8(0x99),v8(0x61)
  2382                                      db  v8(0x17),v8(0x2b),v8(0x04),v8(0x7e),v8(0xba),v8(0x77),v8(0xd6),v8(0x26)
  2383                                      db  v8(0xe1),v8(0x69),v8(0x14),v8(0x63),v8(0x55),v8(0x21),v8(0x0c),v8(0x7d)
  2384                                  
  2385                                  %endif
