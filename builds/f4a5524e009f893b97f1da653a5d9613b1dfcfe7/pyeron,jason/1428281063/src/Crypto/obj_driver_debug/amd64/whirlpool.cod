; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

C0	DQ	18186018c07830d8H
	DQ	23238c2305af4626H
	DQ	c6c63fc67ef991b8H
	DQ	e8e887e8136fcdfbH
	DQ	878726874ca113cbH
	DQ	b8b8dab8a9626d11H
	DQ	0101040108050209H
	DQ	4f4f214f426e9e0dH
	DQ	3636d836adee6c9bH
	DQ	a6a6a2a6590451ffH
	DQ	d2d26fd2debdb90cH
	DQ	f5f5f3f5fb06f70eH
	DQ	7979f979ef80f296H
	DQ	6f6fa16f5fcede30H
	DQ	91917e91fcef3f6dH
	DQ	52525552aa07a4f8H
	DQ	60609d6027fdc047H
	DQ	bcbccabc89766535H
	DQ	9b9b569baccd2b37H
	DQ	8e8e028e048c018aH
	DQ	a3a3b6a371155bd2H
	DQ	0c0c300c603c186cH
	DQ	7b7bf17bff8af684H
	DQ	3535d435b5e16a80H
	DQ	1d1d741de8693af5H
	DQ	e0e0a7e05347ddb3H
	DQ	d7d77bd7f6acb321H
	DQ	c2c22fc25eed999cH
	DQ	2e2eb82e6d965c43H
	DQ	4b4b314b627a9629H
	DQ	fefedffea321e15dH
	DQ	575741578216aed5H
	DQ	15155415a8412abdH
	DQ	7777c1779fb6eee8H
	DQ	3737dc37a5eb6e92H
	DQ	e5e5b3e57b56d79eH
	DQ	9f9f469f8cd92313H
	DQ	f0f0e7f0d317fd23H
	DQ	4a4a354a6a7f9420H
	DQ	dada4fda9e95a944H
	DQ	58587d58fa25b0a2H
	DQ	c9c903c906ca8fcfH
	DQ	2929a429558d527cH
	DQ	0a0a280a5022145aH
	DQ	b1b1feb1e14f7f50H
	DQ	a0a0baa0691a5dc9H
	DQ	6b6bb16b7fdad614H
	DQ	85852e855cab17d9H
	DQ	bdbdcebd8173673cH
	DQ	5d5d695dd234ba8fH
	DQ	1010401080502090H
	DQ	f4f4f7f4f303f507H
	DQ	cbcb0bcb16c08bddH
	DQ	3e3ef83eedc67cd3H
	DQ	0505140528110a2dH
	DQ	676781671fe6ce78H
	DQ	e4e4b7e47353d597H
	DQ	27279c2725bb4e02H
	DQ	4141194132588273H
	DQ	8b8b168b2c9d0ba7H
	DQ	a7a7a6a7510153f6H
	DQ	7d7de97dcf94fab2H
	DQ	95956e95dcfb3749H
	DQ	d8d847d88e9fad56H
	DQ	fbfbcbfb8b30eb70H
	DQ	eeee9fee2371c1cdH
	DQ	7c7ced7cc791f8bbH
	DQ	6666856617e3cc71H
	DQ	dddd53dda68ea77bH
	DQ	17175c17b84b2eafH
	DQ	4747014702468e45H
	DQ	9e9e429e84dc211aH
	DQ	caca0fca1ec589d4H
	DQ	2d2db42d75995a58H
	DQ	bfbfc6bf9179632eH
	DQ	07071c07381b0e3fH
	DQ	adad8ead012347acH
	DQ	5a5a755aea2fb4b0H
	DQ	838336836cb51befH
	DQ	3333cc3385ff66b6H
	DQ	636391633ff2c65cH
	DQ	02020802100a0412H
	DQ	aaaa92aa39384993H
	DQ	7171d971afa8e2deH
	DQ	c8c807c80ecf8dc6H
	DQ	19196419c87d32d1H
	DQ	494939497270923bH
	DQ	d9d943d9869aaf5fH
	DQ	f2f2eff2c31df931H
	DQ	e3e3abe34b48dba8H
	DQ	5b5b715be22ab6b9H
	DQ	88881a8834920dbcH
	DQ	9a9a529aa4c8293eH
	DQ	262698262dbe4c0bH
	DQ	3232c8328dfa64bfH
	DQ	b0b0fab0e94a7d59H
	DQ	e9e983e91b6acff2H
	DQ	0f0f3c0f78331e77H
	DQ	d5d573d5e6a6b733H
	DQ	80803a8074ba1df4H
	DQ	bebec2be997c6127H
	DQ	cdcd13cd26de87ebH
	DQ	3434d034bde46889H
	DQ	48483d487a759032H
	DQ	ffffdbffab24e354H
	DQ	7a7af57af78ff48dH
	DQ	90907a90f4ea3d64H
	DQ	5f5f615fc23ebe9dH
	DQ	202080201da0403dH
	DQ	6868bd6867d5d00fH
	DQ	1a1a681ad07234caH
	DQ	aeae82ae192c41b7H
	DQ	b4b4eab4c95e757dH
	DQ	54544d549a19a8ceH
	DQ	93937693ece53b7fH
	DQ	222288220daa442fH
	DQ	64648d6407e9c863H
	DQ	f1f1e3f1db12ff2aH
	DQ	7373d173bfa2e6ccH
	DQ	12124812905a2482H
	DQ	40401d403a5d807aH
	DQ	0808200840281048H
	DQ	c3c32bc356e89b95H
	DQ	ecec97ec337bc5dfH
	DQ	dbdb4bdb9690ab4dH
	DQ	a1a1bea1611f5fc0H
	DQ	8d8d0e8d1c830791H
	DQ	3d3df43df5c97ac8H
	DQ	97976697ccf1335bH
	DQ	0000000000000000H
	DQ	cfcf1bcf36d483f9H
	DQ	2b2bac2b4587566eH
	DQ	7676c57697b3ece1H
	DQ	8282328264b019e6H
	DQ	d6d67fd6fea9b128H
	DQ	1b1b6c1bd87736c3H
	DQ	b5b5eeb5c15b7774H
	DQ	afaf86af112943beH
	DQ	6a6ab56a77dfd41dH
	DQ	50505d50ba0da0eaH
	DQ	45450945124c8a57H
	DQ	f3f3ebf3cb18fb38H
	DQ	3030c0309df060adH
	DQ	efef9bef2b74c3c4H
	DQ	3f3ffc3fe5c37edaH
	DQ	55554955921caac7H
	DQ	a2a2b2a2791059dbH
	DQ	eaea8fea0365c9e9H
	DQ	656589650fecca6aH
	DQ	babad2bab9686903H
	DQ	2f2fbc2f65935e4aH
	DQ	c0c027c04ee79d8eH
	DQ	dede5fdebe81a160H
	DQ	1c1c701ce06c38fcH
	DQ	fdfdd3fdbb2ee746H
	DQ	4d4d294d52649a1fH
	DQ	92927292e4e03976H
	DQ	7575c9758fbceafaH
	DQ	06061806301e0c36H
	DQ	8a8a128a249809aeH
	DQ	b2b2f2b2f940794bH
	DQ	e6e6bfe66359d185H
	DQ	0e0e380e70361c7eH
	DQ	1f1f7c1ff8633ee7H
	DQ	6262956237f7c455H
	DQ	d4d477d4eea3b53aH
	DQ	a8a89aa829324d81H
	DQ	96966296c4f43152H
	DQ	f9f9c3f99b3aef62H
	DQ	c5c533c566f697a3H
	DQ	2525942535b14a10H
	DQ	59597959f220b2abH
	DQ	84842a8454ae15d0H
	DQ	7272d572b7a7e4c5H
	DQ	3939e439d5dd72ecH
	DQ	4c4c2d4c5a619816H
	DQ	5e5e655eca3bbc94H
	DQ	7878fd78e785f09fH
	DQ	3838e038ddd870e5H
	DQ	8c8c0a8c14860598H
	DQ	d1d163d1c6b2bf17H
	DQ	a5a5aea5410b57e4H
	DQ	e2e2afe2434dd9a1H
	DQ	616199612ff8c24eH
	DQ	b3b3f6b3f1457b42H
	DQ	2121842115a54234H
	DQ	9c9c4a9c94d62508H
	DQ	1e1e781ef0663ceeH
	DQ	4343114322528661H
	DQ	c7c73bc776fc93b1H
	DQ	fcfcd7fcb32be54fH
	DQ	0404100420140824H
	DQ	51515951b208a2e3H
	DQ	99995e99bcc72f25H
	DQ	6d6da96d4fc4da22H
	DQ	0d0d340d68391a65H
	DQ	fafacffa8335e979H
	DQ	dfdf5bdfb684a369H
	DQ	7e7ee57ed79bfca9H
	DQ	242490243db44819H
	DQ	3b3bec3bc5d776feH
	DQ	abab96ab313d4b9aH
	DQ	cece1fce3ed181f0H
	DQ	1111441188552299H
	DQ	8f8f068f0c890383H
	DQ	4e4e254e4a6b9c04H
	DQ	b7b7e6b7d1517366H
	DQ	ebeb8beb0b60cbe0H
	DQ	3c3cf03cfdcc78c1H
	DQ	81813e817cbf1ffdH
	DQ	94946a94d4fe3540H
	DQ	f7f7fbf7eb0cf31cH
	DQ	b9b9deb9a1676f18H
	DQ	13134c13985f268bH
	DQ	2c2cb02c7d9c5851H
	DQ	d3d36bd3d6b8bb05H
	DQ	e7e7bbe76b5cd38cH
	DQ	6e6ea56e57cbdc39H
	DQ	c4c437c46ef395aaH
	DQ	03030c03180f061bH
	DQ	565645568a13acdcH
	DQ	44440d441a49885eH
	DQ	7f7fe17fdf9efea0H
	DQ	a9a99ea921374f88H
	DQ	2a2aa82a4d825467H
	DQ	bbbbd6bbb16d6b0aH
	DQ	c1c123c146e29f87H
	DQ	53535153a202a6f1H
	DQ	dcdc57dcae8ba572H
	DQ	0b0b2c0b58271653H
	DQ	9d9d4e9d9cd32701H
	DQ	6c6cad6c47c1d82bH
	DQ	3131c43195f562a4H
	DQ	7474cd7487b9e8f3H
	DQ	f6f6fff6e309f115H
	DQ	464605460a438c4cH
	DQ	acac8aac092645a5H
	DQ	89891e893c970fb5H
	DQ	14145014a04428b4H
	DQ	e1e1a3e15b42dfbaH
	DQ	16165816b04e2ca6H
	DQ	3a3ae83acdd274f7H
	DQ	6969b9696fd0d206H
	DQ	09092409482d1241H
	DQ	7070dd70a7ade0d7H
	DQ	b6b6e2b6d954716fH
	DQ	d0d067d0ceb7bd1eH
	DQ	eded93ed3b7ec7d6H
	DQ	cccc17cc2edb85e2H
	DQ	424215422a578468H
	DQ	98985a98b4c22d2cH
	DQ	a4a4aaa4490e55edH
	DQ	2828a0285d885075H
	DQ	5c5c6d5cda31b886H
	DQ	f8f8c7f8933fed6bH
	DQ	8686228644a411c2H
C1	DQ	d818186018c07830H
	DQ	2623238c2305af46H
	DQ	b8c6c63fc67ef991H
	DQ	fbe8e887e8136fcdH
	DQ	cb878726874ca113H
	DQ	11b8b8dab8a9626dH
	DQ	0901010401080502H
	DQ	0d4f4f214f426e9eH
	DQ	9b3636d836adee6cH
	DQ	ffa6a6a2a6590451H
	DQ	0cd2d26fd2debdb9H
	DQ	0ef5f5f3f5fb06f7H
	DQ	967979f979ef80f2H
	DQ	306f6fa16f5fcedeH
	DQ	6d91917e91fcef3fH
	DQ	f852525552aa07a4H
	DQ	4760609d6027fdc0H
	DQ	35bcbccabc897665H
	DQ	379b9b569baccd2bH
	DQ	8a8e8e028e048c01H
	DQ	d2a3a3b6a371155bH
	DQ	6c0c0c300c603c18H
	DQ	847b7bf17bff8af6H
	DQ	803535d435b5e16aH
	DQ	f51d1d741de8693aH
	DQ	b3e0e0a7e05347ddH
	DQ	21d7d77bd7f6acb3H
	DQ	9cc2c22fc25eed99H
	DQ	432e2eb82e6d965cH
	DQ	294b4b314b627a96H
	DQ	5dfefedffea321e1H
	DQ	d5575741578216aeH
	DQ	bd15155415a8412aH
	DQ	e87777c1779fb6eeH
	DQ	923737dc37a5eb6eH
	DQ	9ee5e5b3e57b56d7H
	DQ	139f9f469f8cd923H
	DQ	23f0f0e7f0d317fdH
	DQ	204a4a354a6a7f94H
	DQ	44dada4fda9e95a9H
	DQ	a258587d58fa25b0H
	DQ	cfc9c903c906ca8fH
	DQ	7c2929a429558d52H
	DQ	5a0a0a280a502214H
	DQ	50b1b1feb1e14f7fH
	DQ	c9a0a0baa0691a5dH
	DQ	146b6bb16b7fdad6H
	DQ	d985852e855cab17H
	DQ	3cbdbdcebd817367H
	DQ	8f5d5d695dd234baH
	DQ	9010104010805020H
	DQ	07f4f4f7f4f303f5H
	DQ	ddcbcb0bcb16c08bH
	DQ	d33e3ef83eedc67cH
	DQ	2d0505140528110aH
	DQ	78676781671fe6ceH
	DQ	97e4e4b7e47353d5H
	DQ	0227279c2725bb4eH
	DQ	7341411941325882H
	DQ	a78b8b168b2c9d0bH
	DQ	f6a7a7a6a7510153H
	DQ	b27d7de97dcf94faH
	DQ	4995956e95dcfb37H
	DQ	56d8d847d88e9fadH
	DQ	70fbfbcbfb8b30ebH
	DQ	cdeeee9fee2371c1H
	DQ	bb7c7ced7cc791f8H
	DQ	716666856617e3ccH
	DQ	7bdddd53dda68ea7H
	DQ	af17175c17b84b2eH
	DQ	454747014702468eH
	DQ	1a9e9e429e84dc21H
	DQ	d4caca0fca1ec589H
	DQ	582d2db42d75995aH
	DQ	2ebfbfc6bf917963H
	DQ	3f07071c07381b0eH
	DQ	acadad8ead012347H
	DQ	b05a5a755aea2fb4H
	DQ	ef838336836cb51bH
	DQ	b63333cc3385ff66H
	DQ	5c636391633ff2c6H
	DQ	1202020802100a04H
	DQ	93aaaa92aa393849H
	DQ	de7171d971afa8e2H
	DQ	c6c8c807c80ecf8dH
	DQ	d119196419c87d32H
	DQ	3b49493949727092H
	DQ	5fd9d943d9869aafH
	DQ	31f2f2eff2c31df9H
	DQ	a8e3e3abe34b48dbH
	DQ	b95b5b715be22ab6H
	DQ	bc88881a8834920dH
	DQ	3e9a9a529aa4c829H
	DQ	0b262698262dbe4cH
	DQ	bf3232c8328dfa64H
	DQ	59b0b0fab0e94a7dH
	DQ	f2e9e983e91b6acfH
	DQ	770f0f3c0f78331eH
	DQ	33d5d573d5e6a6b7H
	DQ	f480803a8074ba1dH
	DQ	27bebec2be997c61H
	DQ	ebcdcd13cd26de87H
	DQ	893434d034bde468H
	DQ	3248483d487a7590H
	DQ	54ffffdbffab24e3H
	DQ	8d7a7af57af78ff4H
	DQ	6490907a90f4ea3dH
	DQ	9d5f5f615fc23ebeH
	DQ	3d202080201da040H
	DQ	0f6868bd6867d5d0H
	DQ	ca1a1a681ad07234H
	DQ	b7aeae82ae192c41H
	DQ	7db4b4eab4c95e75H
	DQ	ce54544d549a19a8H
	DQ	7f93937693ece53bH
	DQ	2f222288220daa44H
	DQ	6364648d6407e9c8H
	DQ	2af1f1e3f1db12ffH
	DQ	cc7373d173bfa2e6H
	DQ	8212124812905a24H
	DQ	7a40401d403a5d80H
	DQ	4808082008402810H
	DQ	95c3c32bc356e89bH
	DQ	dfecec97ec337bc5H
	DQ	4ddbdb4bdb9690abH
	DQ	c0a1a1bea1611f5fH
	DQ	918d8d0e8d1c8307H
	DQ	c83d3df43df5c97aH
	DQ	5b97976697ccf133H
	DQ	0000000000000000H
	DQ	f9cfcf1bcf36d483H
	DQ	6e2b2bac2b458756H
	DQ	e17676c57697b3ecH
	DQ	e68282328264b019H
	DQ	28d6d67fd6fea9b1H
	DQ	c31b1b6c1bd87736H
	DQ	74b5b5eeb5c15b77H
	DQ	beafaf86af112943H
	DQ	1d6a6ab56a77dfd4H
	DQ	ea50505d50ba0da0H
	DQ	5745450945124c8aH
	DQ	38f3f3ebf3cb18fbH
	DQ	ad3030c0309df060H
	DQ	c4efef9bef2b74c3H
	DQ	da3f3ffc3fe5c37eH
	DQ	c755554955921caaH
	DQ	dba2a2b2a2791059H
	DQ	e9eaea8fea0365c9H
	DQ	6a656589650feccaH
	DQ	03babad2bab96869H
	DQ	4a2f2fbc2f65935eH
	DQ	8ec0c027c04ee79dH
	DQ	60dede5fdebe81a1H
	DQ	fc1c1c701ce06c38H
	DQ	46fdfdd3fdbb2ee7H
	DQ	1f4d4d294d52649aH
	DQ	7692927292e4e039H
	DQ	fa7575c9758fbceaH
	DQ	3606061806301e0cH
	DQ	ae8a8a128a249809H
	DQ	4bb2b2f2b2f94079H
	DQ	85e6e6bfe66359d1H
	DQ	7e0e0e380e70361cH
	DQ	e71f1f7c1ff8633eH
	DQ	556262956237f7c4H
	DQ	3ad4d477d4eea3b5H
	DQ	81a8a89aa829324dH
	DQ	5296966296c4f431H
	DQ	62f9f9c3f99b3aefH
	DQ	a3c5c533c566f697H
	DQ	102525942535b14aH
	DQ	ab59597959f220b2H
	DQ	d084842a8454ae15H
	DQ	c57272d572b7a7e4H
	DQ	ec3939e439d5dd72H
	DQ	164c4c2d4c5a6198H
	DQ	945e5e655eca3bbcH
	DQ	9f7878fd78e785f0H
	DQ	e53838e038ddd870H
	DQ	988c8c0a8c148605H
	DQ	17d1d163d1c6b2bfH
	DQ	e4a5a5aea5410b57H
	DQ	a1e2e2afe2434dd9H
	DQ	4e616199612ff8c2H
	DQ	42b3b3f6b3f1457bH
	DQ	342121842115a542H
	DQ	089c9c4a9c94d625H
	DQ	ee1e1e781ef0663cH
	DQ	6143431143225286H
	DQ	b1c7c73bc776fc93H
	DQ	4ffcfcd7fcb32be5H
	DQ	2404041004201408H
	DQ	e351515951b208a2H
	DQ	2599995e99bcc72fH
	DQ	226d6da96d4fc4daH
	DQ	650d0d340d68391aH
	DQ	79fafacffa8335e9H
	DQ	69dfdf5bdfb684a3H
	DQ	a97e7ee57ed79bfcH
	DQ	19242490243db448H
	DQ	fe3b3bec3bc5d776H
	DQ	9aabab96ab313d4bH
	DQ	f0cece1fce3ed181H
	DQ	9911114411885522H
	DQ	838f8f068f0c8903H
	DQ	044e4e254e4a6b9cH
	DQ	66b7b7e6b7d15173H
	DQ	e0ebeb8beb0b60cbH
	DQ	c13c3cf03cfdcc78H
	DQ	fd81813e817cbf1fH
	DQ	4094946a94d4fe35H
	DQ	1cf7f7fbf7eb0cf3H
	DQ	18b9b9deb9a1676fH
	DQ	8b13134c13985f26H
	DQ	512c2cb02c7d9c58H
	DQ	05d3d36bd3d6b8bbH
	DQ	8ce7e7bbe76b5cd3H
	DQ	396e6ea56e57cbdcH
	DQ	aac4c437c46ef395H
	DQ	1b03030c03180f06H
	DQ	dc565645568a13acH
	DQ	5e44440d441a4988H
	DQ	a07f7fe17fdf9efeH
	DQ	88a9a99ea921374fH
	DQ	672a2aa82a4d8254H
	DQ	0abbbbd6bbb16d6bH
	DQ	87c1c123c146e29fH
	DQ	f153535153a202a6H
	DQ	72dcdc57dcae8ba5H
	DQ	530b0b2c0b582716H
	DQ	019d9d4e9d9cd327H
	DQ	2b6c6cad6c47c1d8H
	DQ	a43131c43195f562H
	DQ	f37474cd7487b9e8H
	DQ	15f6f6fff6e309f1H
	DQ	4c464605460a438cH
	DQ	a5acac8aac092645H
	DQ	b589891e893c970fH
	DQ	b414145014a04428H
	DQ	bae1e1a3e15b42dfH
	DQ	a616165816b04e2cH
	DQ	f73a3ae83acdd274H
	DQ	066969b9696fd0d2H
	DQ	4109092409482d12H
	DQ	d77070dd70a7ade0H
	DQ	6fb6b6e2b6d95471H
	DQ	1ed0d067d0ceb7bdH
	DQ	d6eded93ed3b7ec7H
	DQ	e2cccc17cc2edb85H
	DQ	68424215422a5784H
	DQ	2c98985a98b4c22dH
	DQ	eda4a4aaa4490e55H
	DQ	752828a0285d8850H
	DQ	865c5c6d5cda31b8H
	DQ	6bf8f8c7f8933fedH
	DQ	c28686228644a411H
C2	DQ	30d818186018c078H
	DQ	462623238c2305afH
	DQ	91b8c6c63fc67ef9H
	DQ	cdfbe8e887e8136fH
	DQ	13cb878726874ca1H
	DQ	6d11b8b8dab8a962H
	DQ	0209010104010805H
	DQ	9e0d4f4f214f426eH
	DQ	6c9b3636d836adeeH
	DQ	51ffa6a6a2a65904H
	DQ	b90cd2d26fd2debdH
	DQ	f70ef5f5f3f5fb06H
	DQ	f2967979f979ef80H
	DQ	de306f6fa16f5fceH
	DQ	3f6d91917e91fcefH
	DQ	a4f852525552aa07H
	DQ	c04760609d6027fdH
	DQ	6535bcbccabc8976H
	DQ	2b379b9b569baccdH
	DQ	018a8e8e028e048cH
	DQ	5bd2a3a3b6a37115H
	DQ	186c0c0c300c603cH
	DQ	f6847b7bf17bff8aH
	DQ	6a803535d435b5e1H
	DQ	3af51d1d741de869H
	DQ	ddb3e0e0a7e05347H
	DQ	b321d7d77bd7f6acH
	DQ	999cc2c22fc25eedH
	DQ	5c432e2eb82e6d96H
	DQ	96294b4b314b627aH
	DQ	e15dfefedffea321H
	DQ	aed5575741578216H
	DQ	2abd15155415a841H
	DQ	eee87777c1779fb6H
	DQ	6e923737dc37a5ebH
	DQ	d79ee5e5b3e57b56H
	DQ	23139f9f469f8cd9H
	DQ	fd23f0f0e7f0d317H
	DQ	94204a4a354a6a7fH
	DQ	a944dada4fda9e95H
	DQ	b0a258587d58fa25H
	DQ	8fcfc9c903c906caH
	DQ	527c2929a429558dH
	DQ	145a0a0a280a5022H
	DQ	7f50b1b1feb1e14fH
	DQ	5dc9a0a0baa0691aH
	DQ	d6146b6bb16b7fdaH
	DQ	17d985852e855cabH
	DQ	673cbdbdcebd8173H
	DQ	ba8f5d5d695dd234H
	DQ	2090101040108050H
	DQ	f507f4f4f7f4f303H
	DQ	8bddcbcb0bcb16c0H
	DQ	7cd33e3ef83eedc6H
	DQ	0a2d050514052811H
	DQ	ce78676781671fe6H
	DQ	d597e4e4b7e47353H
	DQ	4e0227279c2725bbH
	DQ	8273414119413258H
	DQ	0ba78b8b168b2c9dH
	DQ	53f6a7a7a6a75101H
	DQ	fab27d7de97dcf94H
	DQ	374995956e95dcfbH
	DQ	ad56d8d847d88e9fH
	DQ	eb70fbfbcbfb8b30H
	DQ	c1cdeeee9fee2371H
	DQ	f8bb7c7ced7cc791H
	DQ	cc716666856617e3H
	DQ	a77bdddd53dda68eH
	DQ	2eaf17175c17b84bH
	DQ	8e45474701470246H
	DQ	211a9e9e429e84dcH
	DQ	89d4caca0fca1ec5H
	DQ	5a582d2db42d7599H
	DQ	632ebfbfc6bf9179H
	DQ	0e3f07071c07381bH
	DQ	47acadad8ead0123H
	DQ	b4b05a5a755aea2fH
	DQ	1bef838336836cb5H
	DQ	66b63333cc3385ffH
	DQ	c65c636391633ff2H
	DQ	041202020802100aH
	DQ	4993aaaa92aa3938H
	DQ	e2de7171d971afa8H
	DQ	8dc6c8c807c80ecfH
	DQ	32d119196419c87dH
	DQ	923b494939497270H
	DQ	af5fd9d943d9869aH
	DQ	f931f2f2eff2c31dH
	DQ	dba8e3e3abe34b48H
	DQ	b6b95b5b715be22aH
	DQ	0dbc88881a883492H
	DQ	293e9a9a529aa4c8H
	DQ	4c0b262698262dbeH
	DQ	64bf3232c8328dfaH
	DQ	7d59b0b0fab0e94aH
	DQ	cff2e9e983e91b6aH
	DQ	1e770f0f3c0f7833H
	DQ	b733d5d573d5e6a6H
	DQ	1df480803a8074baH
	DQ	6127bebec2be997cH
	DQ	87ebcdcd13cd26deH
	DQ	68893434d034bde4H
	DQ	903248483d487a75H
	DQ	e354ffffdbffab24H
	DQ	f48d7a7af57af78fH
	DQ	3d6490907a90f4eaH
	DQ	be9d5f5f615fc23eH
	DQ	403d202080201da0H
	DQ	d00f6868bd6867d5H
	DQ	34ca1a1a681ad072H
	DQ	41b7aeae82ae192cH
	DQ	757db4b4eab4c95eH
	DQ	a8ce54544d549a19H
	DQ	3b7f93937693ece5H
	DQ	442f222288220daaH
	DQ	c86364648d6407e9H
	DQ	ff2af1f1e3f1db12H
	DQ	e6cc7373d173bfa2H
	DQ	248212124812905aH
	DQ	807a40401d403a5dH
	DQ	1048080820084028H
	DQ	9b95c3c32bc356e8H
	DQ	c5dfecec97ec337bH
	DQ	ab4ddbdb4bdb9690H
	DQ	5fc0a1a1bea1611fH
	DQ	07918d8d0e8d1c83H
	DQ	7ac83d3df43df5c9H
	DQ	335b97976697ccf1H
	DQ	0000000000000000H
	DQ	83f9cfcf1bcf36d4H
	DQ	566e2b2bac2b4587H
	DQ	ece17676c57697b3H
	DQ	19e68282328264b0H
	DQ	b128d6d67fd6fea9H
	DQ	36c31b1b6c1bd877H
	DQ	7774b5b5eeb5c15bH
	DQ	43beafaf86af1129H
	DQ	d41d6a6ab56a77dfH
	DQ	a0ea50505d50ba0dH
	DQ	8a5745450945124cH
	DQ	fb38f3f3ebf3cb18H
	DQ	60ad3030c0309df0H
	DQ	c3c4efef9bef2b74H
	DQ	7eda3f3ffc3fe5c3H
	DQ	aac755554955921cH
	DQ	59dba2a2b2a27910H
	DQ	c9e9eaea8fea0365H
	DQ	ca6a656589650fecH
	DQ	6903babad2bab968H
	DQ	5e4a2f2fbc2f6593H
	DQ	9d8ec0c027c04ee7H
	DQ	a160dede5fdebe81H
	DQ	38fc1c1c701ce06cH
	DQ	e746fdfdd3fdbb2eH
	DQ	9a1f4d4d294d5264H
	DQ	397692927292e4e0H
	DQ	eafa7575c9758fbcH
	DQ	0c3606061806301eH
	DQ	09ae8a8a128a2498H
	DQ	794bb2b2f2b2f940H
	DQ	d185e6e6bfe66359H
	DQ	1c7e0e0e380e7036H
	DQ	3ee71f1f7c1ff863H
	DQ	c4556262956237f7H
	DQ	b53ad4d477d4eea3H
	DQ	4d81a8a89aa82932H
	DQ	315296966296c4f4H
	DQ	ef62f9f9c3f99b3aH
	DQ	97a3c5c533c566f6H
	DQ	4a102525942535b1H
	DQ	b2ab59597959f220H
	DQ	15d084842a8454aeH
	DQ	e4c57272d572b7a7H
	DQ	72ec3939e439d5ddH
	DQ	98164c4c2d4c5a61H
	DQ	bc945e5e655eca3bH
	DQ	f09f7878fd78e785H
	DQ	70e53838e038ddd8H
	DQ	05988c8c0a8c1486H
	DQ	bf17d1d163d1c6b2H
	DQ	57e4a5a5aea5410bH
	DQ	d9a1e2e2afe2434dH
	DQ	c24e616199612ff8H
	DQ	7b42b3b3f6b3f145H
	DQ	42342121842115a5H
	DQ	25089c9c4a9c94d6H
	DQ	3cee1e1e781ef066H
	DQ	8661434311432252H
	DQ	93b1c7c73bc776fcH
	DQ	e54ffcfcd7fcb32bH
	DQ	0824040410042014H
	DQ	a2e351515951b208H
	DQ	2f2599995e99bcc7H
	DQ	da226d6da96d4fc4H
	DQ	1a650d0d340d6839H
	DQ	e979fafacffa8335H
	DQ	a369dfdf5bdfb684H
	DQ	fca97e7ee57ed79bH
	DQ	4819242490243db4H
	DQ	76fe3b3bec3bc5d7H
	DQ	4b9aabab96ab313dH
	DQ	81f0cece1fce3ed1H
	DQ	2299111144118855H
	DQ	03838f8f068f0c89H
	DQ	9c044e4e254e4a6bH
	DQ	7366b7b7e6b7d151H
	DQ	cbe0ebeb8beb0b60H
	DQ	78c13c3cf03cfdccH
	DQ	1ffd81813e817cbfH
	DQ	354094946a94d4feH
	DQ	f31cf7f7fbf7eb0cH
	DQ	6f18b9b9deb9a167H
	DQ	268b13134c13985fH
	DQ	58512c2cb02c7d9cH
	DQ	bb05d3d36bd3d6b8H
	DQ	d38ce7e7bbe76b5cH
	DQ	dc396e6ea56e57cbH
	DQ	95aac4c437c46ef3H
	DQ	061b03030c03180fH
	DQ	acdc565645568a13H
	DQ	885e44440d441a49H
	DQ	fea07f7fe17fdf9eH
	DQ	4f88a9a99ea92137H
	DQ	54672a2aa82a4d82H
	DQ	6b0abbbbd6bbb16dH
	DQ	9f87c1c123c146e2H
	DQ	a6f153535153a202H
	DQ	a572dcdc57dcae8bH
	DQ	16530b0b2c0b5827H
	DQ	27019d9d4e9d9cd3H
	DQ	d82b6c6cad6c47c1H
	DQ	62a43131c43195f5H
	DQ	e8f37474cd7487b9H
	DQ	f115f6f6fff6e309H
	DQ	8c4c464605460a43H
	DQ	45a5acac8aac0926H
	DQ	0fb589891e893c97H
	DQ	28b414145014a044H
	DQ	dfbae1e1a3e15b42H
	DQ	2ca616165816b04eH
	DQ	74f73a3ae83acdd2H
	DQ	d2066969b9696fd0H
	DQ	124109092409482dH
	DQ	e0d77070dd70a7adH
	DQ	716fb6b6e2b6d954H
	DQ	bd1ed0d067d0ceb7H
	DQ	c7d6eded93ed3b7eH
	DQ	85e2cccc17cc2edbH
	DQ	8468424215422a57H
	DQ	2d2c98985a98b4c2H
	DQ	55eda4a4aaa4490eH
	DQ	50752828a0285d88H
	DQ	b8865c5c6d5cda31H
	DQ	ed6bf8f8c7f8933fH
	DQ	11c28686228644a4H
C3	DQ	7830d818186018c0H
	DQ	af462623238c2305H
	DQ	f991b8c6c63fc67eH
	DQ	6fcdfbe8e887e813H
	DQ	a113cb878726874cH
	DQ	626d11b8b8dab8a9H
	DQ	0502090101040108H
	DQ	6e9e0d4f4f214f42H
	DQ	ee6c9b3636d836adH
	DQ	0451ffa6a6a2a659H
	DQ	bdb90cd2d26fd2deH
	DQ	06f70ef5f5f3f5fbH
	DQ	80f2967979f979efH
	DQ	cede306f6fa16f5fH
	DQ	ef3f6d91917e91fcH
	DQ	07a4f852525552aaH
	DQ	fdc04760609d6027H
	DQ	766535bcbccabc89H
	DQ	cd2b379b9b569bacH
	DQ	8c018a8e8e028e04H
	DQ	155bd2a3a3b6a371H
	DQ	3c186c0c0c300c60H
	DQ	8af6847b7bf17bffH
	DQ	e16a803535d435b5H
	DQ	693af51d1d741de8H
	DQ	47ddb3e0e0a7e053H
	DQ	acb321d7d77bd7f6H
	DQ	ed999cc2c22fc25eH
	DQ	965c432e2eb82e6dH
	DQ	7a96294b4b314b62H
	DQ	21e15dfefedffea3H
	DQ	16aed55757415782H
	DQ	412abd15155415a8H
	DQ	b6eee87777c1779fH
	DQ	eb6e923737dc37a5H
	DQ	56d79ee5e5b3e57bH
	DQ	d923139f9f469f8cH
	DQ	17fd23f0f0e7f0d3H
	DQ	7f94204a4a354a6aH
	DQ	95a944dada4fda9eH
	DQ	25b0a258587d58faH
	DQ	ca8fcfc9c903c906H
	DQ	8d527c2929a42955H
	DQ	22145a0a0a280a50H
	DQ	4f7f50b1b1feb1e1H
	DQ	1a5dc9a0a0baa069H
	DQ	dad6146b6bb16b7fH
	DQ	ab17d985852e855cH
	DQ	73673cbdbdcebd81H
	DQ	34ba8f5d5d695dd2H
	DQ	5020901010401080H
	DQ	03f507f4f4f7f4f3H
	DQ	c08bddcbcb0bcb16H
	DQ	c67cd33e3ef83eedH
	DQ	110a2d0505140528H
	DQ	e6ce78676781671fH
	DQ	53d597e4e4b7e473H
	DQ	bb4e0227279c2725H
	DQ	5882734141194132H
	DQ	9d0ba78b8b168b2cH
	DQ	0153f6a7a7a6a751H
	DQ	94fab27d7de97dcfH
	DQ	fb374995956e95dcH
	DQ	9fad56d8d847d88eH
	DQ	30eb70fbfbcbfb8bH
	DQ	71c1cdeeee9fee23H
	DQ	91f8bb7c7ced7cc7H
	DQ	e3cc716666856617H
	DQ	8ea77bdddd53dda6H
	DQ	4b2eaf17175c17b8H
	DQ	468e454747014702H
	DQ	dc211a9e9e429e84H
	DQ	c589d4caca0fca1eH
	DQ	995a582d2db42d75H
	DQ	79632ebfbfc6bf91H
	DQ	1b0e3f07071c0738H
	DQ	2347acadad8ead01H
	DQ	2fb4b05a5a755aeaH
	DQ	b51bef838336836cH
	DQ	ff66b63333cc3385H
	DQ	f2c65c636391633fH
	DQ	0a04120202080210H
	DQ	384993aaaa92aa39H
	DQ	a8e2de7171d971afH
	DQ	cf8dc6c8c807c80eH
	DQ	7d32d119196419c8H
	DQ	70923b4949394972H
	DQ	9aaf5fd9d943d986H
	DQ	1df931f2f2eff2c3H
	DQ	48dba8e3e3abe34bH
	DQ	2ab6b95b5b715be2H
	DQ	920dbc88881a8834H
	DQ	c8293e9a9a529aa4H
	DQ	be4c0b262698262dH
	DQ	fa64bf3232c8328dH
	DQ	4a7d59b0b0fab0e9H
	DQ	6acff2e9e983e91bH
	DQ	331e770f0f3c0f78H
	DQ	a6b733d5d573d5e6H
	DQ	ba1df480803a8074H
	DQ	7c6127bebec2be99H
	DQ	de87ebcdcd13cd26H
	DQ	e468893434d034bdH
	DQ	75903248483d487aH
	DQ	24e354ffffdbffabH
	DQ	8ff48d7a7af57af7H
	DQ	ea3d6490907a90f4H
	DQ	3ebe9d5f5f615fc2H
	DQ	a0403d202080201dH
	DQ	d5d00f6868bd6867H
	DQ	7234ca1a1a681ad0H
	DQ	2c41b7aeae82ae19H
	DQ	5e757db4b4eab4c9H
	DQ	19a8ce54544d549aH
	DQ	e53b7f93937693ecH
	DQ	aa442f222288220dH
	DQ	e9c86364648d6407H
	DQ	12ff2af1f1e3f1dbH
	DQ	a2e6cc7373d173bfH
	DQ	5a24821212481290H
	DQ	5d807a40401d403aH
	DQ	2810480808200840H
	DQ	e89b95c3c32bc356H
	DQ	7bc5dfecec97ec33H
	DQ	90ab4ddbdb4bdb96H
	DQ	1f5fc0a1a1bea161H
	DQ	8307918d8d0e8d1cH
	DQ	c97ac83d3df43df5H
	DQ	f1335b97976697ccH
	DQ	0000000000000000H
	DQ	d483f9cfcf1bcf36H
	DQ	87566e2b2bac2b45H
	DQ	b3ece17676c57697H
	DQ	b019e68282328264H
	DQ	a9b128d6d67fd6feH
	DQ	7736c31b1b6c1bd8H
	DQ	5b7774b5b5eeb5c1H
	DQ	2943beafaf86af11H
	DQ	dfd41d6a6ab56a77H
	DQ	0da0ea50505d50baH
	DQ	4c8a574545094512H
	DQ	18fb38f3f3ebf3cbH
	DQ	f060ad3030c0309dH
	DQ	74c3c4efef9bef2bH
	DQ	c37eda3f3ffc3fe5H
	DQ	1caac75555495592H
	DQ	1059dba2a2b2a279H
	DQ	65c9e9eaea8fea03H
	DQ	ecca6a656589650fH
	DQ	686903babad2bab9H
	DQ	935e4a2f2fbc2f65H
	DQ	e79d8ec0c027c04eH
	DQ	81a160dede5fdebeH
	DQ	6c38fc1c1c701ce0H
	DQ	2ee746fdfdd3fdbbH
	DQ	649a1f4d4d294d52H
	DQ	e0397692927292e4H
	DQ	bceafa7575c9758fH
	DQ	1e0c360606180630H
	DQ	9809ae8a8a128a24H
	DQ	40794bb2b2f2b2f9H
	DQ	59d185e6e6bfe663H
	DQ	361c7e0e0e380e70H
	DQ	633ee71f1f7c1ff8H
	DQ	f7c4556262956237H
	DQ	a3b53ad4d477d4eeH
	DQ	324d81a8a89aa829H
	DQ	f4315296966296c4H
	DQ	3aef62f9f9c3f99bH
	DQ	f697a3c5c533c566H
	DQ	b14a102525942535H
	DQ	20b2ab59597959f2H
	DQ	ae15d084842a8454H
	DQ	a7e4c57272d572b7H
	DQ	dd72ec3939e439d5H
	DQ	6198164c4c2d4c5aH
	DQ	3bbc945e5e655ecaH
	DQ	85f09f7878fd78e7H
	DQ	d870e53838e038ddH
	DQ	8605988c8c0a8c14H
	DQ	b2bf17d1d163d1c6H
	DQ	0b57e4a5a5aea541H
	DQ	4dd9a1e2e2afe243H
	DQ	f8c24e616199612fH
	DQ	457b42b3b3f6b3f1H
	DQ	a542342121842115H
	DQ	d625089c9c4a9c94H
	DQ	663cee1e1e781ef0H
	DQ	5286614343114322H
	DQ	fc93b1c7c73bc776H
	DQ	2be54ffcfcd7fcb3H
	DQ	1408240404100420H
	DQ	08a2e351515951b2H
	DQ	c72f2599995e99bcH
	DQ	c4da226d6da96d4fH
	DQ	391a650d0d340d68H
	DQ	35e979fafacffa83H
	DQ	84a369dfdf5bdfb6H
	DQ	9bfca97e7ee57ed7H
	DQ	b44819242490243dH
	DQ	d776fe3b3bec3bc5H
	DQ	3d4b9aabab96ab31H
	DQ	d181f0cece1fce3eH
	DQ	5522991111441188H
	DQ	8903838f8f068f0cH
	DQ	6b9c044e4e254e4aH
	DQ	517366b7b7e6b7d1H
	DQ	60cbe0ebeb8beb0bH
	DQ	cc78c13c3cf03cfdH
	DQ	bf1ffd81813e817cH
	DQ	fe354094946a94d4H
	DQ	0cf31cf7f7fbf7ebH
	DQ	676f18b9b9deb9a1H
	DQ	5f268b13134c1398H
	DQ	9c58512c2cb02c7dH
	DQ	b8bb05d3d36bd3d6H
	DQ	5cd38ce7e7bbe76bH
	DQ	cbdc396e6ea56e57H
	DQ	f395aac4c437c46eH
	DQ	0f061b03030c0318H
	DQ	13acdc565645568aH
	DQ	49885e44440d441aH
	DQ	9efea07f7fe17fdfH
	DQ	374f88a9a99ea921H
	DQ	8254672a2aa82a4dH
	DQ	6d6b0abbbbd6bbb1H
	DQ	e29f87c1c123c146H
	DQ	02a6f153535153a2H
	DQ	8ba572dcdc57dcaeH
	DQ	2716530b0b2c0b58H
	DQ	d327019d9d4e9d9cH
	DQ	c1d82b6c6cad6c47H
	DQ	f562a43131c43195H
	DQ	b9e8f37474cd7487H
	DQ	09f115f6f6fff6e3H
	DQ	438c4c464605460aH
	DQ	2645a5acac8aac09H
	DQ	970fb589891e893cH
	DQ	4428b414145014a0H
	DQ	42dfbae1e1a3e15bH
	DQ	4e2ca616165816b0H
	DQ	d274f73a3ae83acdH
	DQ	d0d2066969b9696fH
	DQ	2d12410909240948H
	DQ	ade0d77070dd70a7H
	DQ	54716fb6b6e2b6d9H
	DQ	b7bd1ed0d067d0ceH
	DQ	7ec7d6eded93ed3bH
	DQ	db85e2cccc17cc2eH
	DQ	578468424215422aH
	DQ	c22d2c98985a98b4H
	DQ	0e55eda4a4aaa449H
	DQ	8850752828a0285dH
	DQ	31b8865c5c6d5cdaH
	DQ	3fed6bf8f8c7f893H
	DQ	a411c28686228644H
C4	DQ	c07830d818186018H
	DQ	05af462623238c23H
	DQ	7ef991b8c6c63fc6H
	DQ	136fcdfbe8e887e8H
	DQ	4ca113cb87872687H
	DQ	a9626d11b8b8dab8H
	DQ	0805020901010401H
	DQ	426e9e0d4f4f214fH
	DQ	adee6c9b3636d836H
	DQ	590451ffa6a6a2a6H
	DQ	debdb90cd2d26fd2H
	DQ	fb06f70ef5f5f3f5H
	DQ	ef80f2967979f979H
	DQ	5fcede306f6fa16fH
	DQ	fcef3f6d91917e91H
	DQ	aa07a4f852525552H
	DQ	27fdc04760609d60H
	DQ	89766535bcbccabcH
	DQ	accd2b379b9b569bH
	DQ	048c018a8e8e028eH
	DQ	71155bd2a3a3b6a3H
	DQ	603c186c0c0c300cH
	DQ	ff8af6847b7bf17bH
	DQ	b5e16a803535d435H
	DQ	e8693af51d1d741dH
	DQ	5347ddb3e0e0a7e0H
	DQ	f6acb321d7d77bd7H
	DQ	5eed999cc2c22fc2H
	DQ	6d965c432e2eb82eH
	DQ	627a96294b4b314bH
	DQ	a321e15dfefedffeH
	DQ	8216aed557574157H
	DQ	a8412abd15155415H
	DQ	9fb6eee87777c177H
	DQ	a5eb6e923737dc37H
	DQ	7b56d79ee5e5b3e5H
	DQ	8cd923139f9f469fH
	DQ	d317fd23f0f0e7f0H
	DQ	6a7f94204a4a354aH
	DQ	9e95a944dada4fdaH
	DQ	fa25b0a258587d58H
	DQ	06ca8fcfc9c903c9H
	DQ	558d527c2929a429H
	DQ	5022145a0a0a280aH
	DQ	e14f7f50b1b1feb1H
	DQ	691a5dc9a0a0baa0H
	DQ	7fdad6146b6bb16bH
	DQ	5cab17d985852e85H
	DQ	8173673cbdbdcebdH
	DQ	d234ba8f5d5d695dH
	DQ	8050209010104010H
	DQ	f303f507f4f4f7f4H
	DQ	16c08bddcbcb0bcbH
	DQ	edc67cd33e3ef83eH
	DQ	28110a2d05051405H
	DQ	1fe6ce7867678167H
	DQ	7353d597e4e4b7e4H
	DQ	25bb4e0227279c27H
	DQ	3258827341411941H
	DQ	2c9d0ba78b8b168bH
	DQ	510153f6a7a7a6a7H
	DQ	cf94fab27d7de97dH
	DQ	dcfb374995956e95H
	DQ	8e9fad56d8d847d8H
	DQ	8b30eb70fbfbcbfbH
	DQ	2371c1cdeeee9feeH
	DQ	c791f8bb7c7ced7cH
	DQ	17e3cc7166668566H
	DQ	a68ea77bdddd53ddH
	DQ	b84b2eaf17175c17H
	DQ	02468e4547470147H
	DQ	84dc211a9e9e429eH
	DQ	1ec589d4caca0fcaH
	DQ	75995a582d2db42dH
	DQ	9179632ebfbfc6bfH
	DQ	381b0e3f07071c07H
	DQ	012347acadad8eadH
	DQ	ea2fb4b05a5a755aH
	DQ	6cb51bef83833683H
	DQ	85ff66b63333cc33H
	DQ	3ff2c65c63639163H
	DQ	100a041202020802H
	DQ	39384993aaaa92aaH
	DQ	afa8e2de7171d971H
	DQ	0ecf8dc6c8c807c8H
	DQ	c87d32d119196419H
	DQ	7270923b49493949H
	DQ	869aaf5fd9d943d9H
	DQ	c31df931f2f2eff2H
	DQ	4b48dba8e3e3abe3H
	DQ	e22ab6b95b5b715bH
	DQ	34920dbc88881a88H
	DQ	a4c8293e9a9a529aH
	DQ	2dbe4c0b26269826H
	DQ	8dfa64bf3232c832H
	DQ	e94a7d59b0b0fab0H
	DQ	1b6acff2e9e983e9H
	DQ	78331e770f0f3c0fH
	DQ	e6a6b733d5d573d5H
	DQ	74ba1df480803a80H
	DQ	997c6127bebec2beH
	DQ	26de87ebcdcd13cdH
	DQ	bde468893434d034H
	DQ	7a75903248483d48H
	DQ	ab24e354ffffdbffH
	DQ	f78ff48d7a7af57aH
	DQ	f4ea3d6490907a90H
	DQ	c23ebe9d5f5f615fH
	DQ	1da0403d20208020H
	DQ	67d5d00f6868bd68H
	DQ	d07234ca1a1a681aH
	DQ	192c41b7aeae82aeH
	DQ	c95e757db4b4eab4H
	DQ	9a19a8ce54544d54H
	DQ	ece53b7f93937693H
	DQ	0daa442f22228822H
	DQ	07e9c86364648d64H
	DQ	db12ff2af1f1e3f1H
	DQ	bfa2e6cc7373d173H
	DQ	905a248212124812H
	DQ	3a5d807a40401d40H
	DQ	4028104808082008H
	DQ	56e89b95c3c32bc3H
	DQ	337bc5dfecec97ecH
	DQ	9690ab4ddbdb4bdbH
	DQ	611f5fc0a1a1bea1H
	DQ	1c8307918d8d0e8dH
	DQ	f5c97ac83d3df43dH
	DQ	ccf1335b97976697H
	DQ	0000000000000000H
	DQ	36d483f9cfcf1bcfH
	DQ	4587566e2b2bac2bH
	DQ	97b3ece17676c576H
	DQ	64b019e682823282H
	DQ	fea9b128d6d67fd6H
	DQ	d87736c31b1b6c1bH
	DQ	c15b7774b5b5eeb5H
	DQ	112943beafaf86afH
	DQ	77dfd41d6a6ab56aH
	DQ	ba0da0ea50505d50H
	DQ	124c8a5745450945H
	DQ	cb18fb38f3f3ebf3H
	DQ	9df060ad3030c030H
	DQ	2b74c3c4efef9befH
	DQ	e5c37eda3f3ffc3fH
	DQ	921caac755554955H
	DQ	791059dba2a2b2a2H
	DQ	0365c9e9eaea8feaH
	DQ	0fecca6a65658965H
	DQ	b9686903babad2baH
	DQ	65935e4a2f2fbc2fH
	DQ	4ee79d8ec0c027c0H
	DQ	be81a160dede5fdeH
	DQ	e06c38fc1c1c701cH
	DQ	bb2ee746fdfdd3fdH
	DQ	52649a1f4d4d294dH
	DQ	e4e0397692927292H
	DQ	8fbceafa7575c975H
	DQ	301e0c3606061806H
	DQ	249809ae8a8a128aH
	DQ	f940794bb2b2f2b2H
	DQ	6359d185e6e6bfe6H
	DQ	70361c7e0e0e380eH
	DQ	f8633ee71f1f7c1fH
	DQ	37f7c45562629562H
	DQ	eea3b53ad4d477d4H
	DQ	29324d81a8a89aa8H
	DQ	c4f4315296966296H
	DQ	9b3aef62f9f9c3f9H
	DQ	66f697a3c5c533c5H
	DQ	35b14a1025259425H
	DQ	f220b2ab59597959H
	DQ	54ae15d084842a84H
	DQ	b7a7e4c57272d572H
	DQ	d5dd72ec3939e439H
	DQ	5a6198164c4c2d4cH
	DQ	ca3bbc945e5e655eH
	DQ	e785f09f7878fd78H
	DQ	ddd870e53838e038H
	DQ	148605988c8c0a8cH
	DQ	c6b2bf17d1d163d1H
	DQ	410b57e4a5a5aea5H
	DQ	434dd9a1e2e2afe2H
	DQ	2ff8c24e61619961H
	DQ	f1457b42b3b3f6b3H
	DQ	15a5423421218421H
	DQ	94d625089c9c4a9cH
	DQ	f0663cee1e1e781eH
	DQ	2252866143431143H
	DQ	76fc93b1c7c73bc7H
	DQ	b32be54ffcfcd7fcH
	DQ	2014082404041004H
	DQ	b208a2e351515951H
	DQ	bcc72f2599995e99H
	DQ	4fc4da226d6da96dH
	DQ	68391a650d0d340dH
	DQ	8335e979fafacffaH
	DQ	b684a369dfdf5bdfH
	DQ	d79bfca97e7ee57eH
	DQ	3db4481924249024H
	DQ	c5d776fe3b3bec3bH
	DQ	313d4b9aabab96abH
	DQ	3ed181f0cece1fceH
	DQ	8855229911114411H
	DQ	0c8903838f8f068fH
	DQ	4a6b9c044e4e254eH
	DQ	d1517366b7b7e6b7H
	DQ	0b60cbe0ebeb8bebH
	DQ	fdcc78c13c3cf03cH
	DQ	7cbf1ffd81813e81H
	DQ	d4fe354094946a94H
	DQ	eb0cf31cf7f7fbf7H
	DQ	a1676f18b9b9deb9H
	DQ	985f268b13134c13H
	DQ	7d9c58512c2cb02cH
	DQ	d6b8bb05d3d36bd3H
	DQ	6b5cd38ce7e7bbe7H
	DQ	57cbdc396e6ea56eH
	DQ	6ef395aac4c437c4H
	DQ	180f061b03030c03H
	DQ	8a13acdc56564556H
	DQ	1a49885e44440d44H
	DQ	df9efea07f7fe17fH
	DQ	21374f88a9a99ea9H
	DQ	4d8254672a2aa82aH
	DQ	b16d6b0abbbbd6bbH
	DQ	46e29f87c1c123c1H
	DQ	a202a6f153535153H
	DQ	ae8ba572dcdc57dcH
	DQ	582716530b0b2c0bH
	DQ	9cd327019d9d4e9dH
	DQ	47c1d82b6c6cad6cH
	DQ	95f562a43131c431H
	DQ	87b9e8f37474cd74H
	DQ	e309f115f6f6fff6H
	DQ	0a438c4c46460546H
	DQ	092645a5acac8aacH
	DQ	3c970fb589891e89H
	DQ	a04428b414145014H
	DQ	5b42dfbae1e1a3e1H
	DQ	b04e2ca616165816H
	DQ	cdd274f73a3ae83aH
	DQ	6fd0d2066969b969H
	DQ	482d124109092409H
	DQ	a7ade0d77070dd70H
	DQ	d954716fb6b6e2b6H
	DQ	ceb7bd1ed0d067d0H
	DQ	3b7ec7d6eded93edH
	DQ	2edb85e2cccc17ccH
	DQ	2a57846842421542H
	DQ	b4c22d2c98985a98H
	DQ	490e55eda4a4aaa4H
	DQ	5d8850752828a028H
	DQ	da31b8865c5c6d5cH
	DQ	933fed6bf8f8c7f8H
	DQ	44a411c286862286H
C5	DQ	18c07830d8181860H
	DQ	2305af462623238cH
	DQ	c67ef991b8c6c63fH
	DQ	e8136fcdfbe8e887H
	DQ	874ca113cb878726H
	DQ	b8a9626d11b8b8daH
	DQ	0108050209010104H
	DQ	4f426e9e0d4f4f21H
	DQ	36adee6c9b3636d8H
	DQ	a6590451ffa6a6a2H
	DQ	d2debdb90cd2d26fH
	DQ	f5fb06f70ef5f5f3H
	DQ	79ef80f2967979f9H
	DQ	6f5fcede306f6fa1H
	DQ	91fcef3f6d91917eH
	DQ	52aa07a4f8525255H
	DQ	6027fdc04760609dH
	DQ	bc89766535bcbccaH
	DQ	9baccd2b379b9b56H
	DQ	8e048c018a8e8e02H
	DQ	a371155bd2a3a3b6H
	DQ	0c603c186c0c0c30H
	DQ	7bff8af6847b7bf1H
	DQ	35b5e16a803535d4H
	DQ	1de8693af51d1d74H
	DQ	e05347ddb3e0e0a7H
	DQ	d7f6acb321d7d77bH
	DQ	c25eed999cc2c22fH
	DQ	2e6d965c432e2eb8H
	DQ	4b627a96294b4b31H
	DQ	fea321e15dfefedfH
	DQ	578216aed5575741H
	DQ	15a8412abd151554H
	DQ	779fb6eee87777c1H
	DQ	37a5eb6e923737dcH
	DQ	e57b56d79ee5e5b3H
	DQ	9f8cd923139f9f46H
	DQ	f0d317fd23f0f0e7H
	DQ	4a6a7f94204a4a35H
	DQ	da9e95a944dada4fH
	DQ	58fa25b0a258587dH
	DQ	c906ca8fcfc9c903H
	DQ	29558d527c2929a4H
	DQ	0a5022145a0a0a28H
	DQ	b1e14f7f50b1b1feH
	DQ	a0691a5dc9a0a0baH
	DQ	6b7fdad6146b6bb1H
	DQ	855cab17d985852eH
	DQ	bd8173673cbdbdceH
	DQ	5dd234ba8f5d5d69H
	DQ	1080502090101040H
	DQ	f4f303f507f4f4f7H
	DQ	cb16c08bddcbcb0bH
	DQ	3eedc67cd33e3ef8H
	DQ	0528110a2d050514H
	DQ	671fe6ce78676781H
	DQ	e47353d597e4e4b7H
	DQ	2725bb4e0227279cH
	DQ	4132588273414119H
	DQ	8b2c9d0ba78b8b16H
	DQ	a7510153f6a7a7a6H
	DQ	7dcf94fab27d7de9H
	DQ	95dcfb374995956eH
	DQ	d88e9fad56d8d847H
	DQ	fb8b30eb70fbfbcbH
	DQ	ee2371c1cdeeee9fH
	DQ	7cc791f8bb7c7cedH
	DQ	6617e3cc71666685H
	DQ	dda68ea77bdddd53H
	DQ	17b84b2eaf17175cH
	DQ	4702468e45474701H
	DQ	9e84dc211a9e9e42H
	DQ	ca1ec589d4caca0fH
	DQ	2d75995a582d2db4H
	DQ	bf9179632ebfbfc6H
	DQ	07381b0e3f07071cH
	DQ	ad012347acadad8eH
	DQ	5aea2fb4b05a5a75H
	DQ	836cb51bef838336H
	DQ	3385ff66b63333ccH
	DQ	633ff2c65c636391H
	DQ	02100a0412020208H
	DQ	aa39384993aaaa92H
	DQ	71afa8e2de7171d9H
	DQ	c80ecf8dc6c8c807H
	DQ	19c87d32d1191964H
	DQ	497270923b494939H
	DQ	d9869aaf5fd9d943H
	DQ	f2c31df931f2f2efH
	DQ	e34b48dba8e3e3abH
	DQ	5be22ab6b95b5b71H
	DQ	8834920dbc88881aH
	DQ	9aa4c8293e9a9a52H
	DQ	262dbe4c0b262698H
	DQ	328dfa64bf3232c8H
	DQ	b0e94a7d59b0b0faH
	DQ	e91b6acff2e9e983H
	DQ	0f78331e770f0f3cH
	DQ	d5e6a6b733d5d573H
	DQ	8074ba1df480803aH
	DQ	be997c6127bebec2H
	DQ	cd26de87ebcdcd13H
	DQ	34bde468893434d0H
	DQ	487a75903248483dH
	DQ	ffab24e354ffffdbH
	DQ	7af78ff48d7a7af5H
	DQ	90f4ea3d6490907aH
	DQ	5fc23ebe9d5f5f61H
	DQ	201da0403d202080H
	DQ	6867d5d00f6868bdH
	DQ	1ad07234ca1a1a68H
	DQ	ae192c41b7aeae82H
	DQ	b4c95e757db4b4eaH
	DQ	549a19a8ce54544dH
	DQ	93ece53b7f939376H
	DQ	220daa442f222288H
	DQ	6407e9c86364648dH
	DQ	f1db12ff2af1f1e3H
	DQ	73bfa2e6cc7373d1H
	DQ	12905a2482121248H
	DQ	403a5d807a40401dH
	DQ	0840281048080820H
	DQ	c356e89b95c3c32bH
	DQ	ec337bc5dfecec97H
	DQ	db9690ab4ddbdb4bH
	DQ	a1611f5fc0a1a1beH
	DQ	8d1c8307918d8d0eH
	DQ	3df5c97ac83d3df4H
	DQ	97ccf1335b979766H
	DQ	0000000000000000H
	DQ	cf36d483f9cfcf1bH
	DQ	2b4587566e2b2bacH
	DQ	7697b3ece17676c5H
	DQ	8264b019e6828232H
	DQ	d6fea9b128d6d67fH
	DQ	1bd87736c31b1b6cH
	DQ	b5c15b7774b5b5eeH
	DQ	af112943beafaf86H
	DQ	6a77dfd41d6a6ab5H
	DQ	50ba0da0ea50505dH
	DQ	45124c8a57454509H
	DQ	f3cb18fb38f3f3ebH
	DQ	309df060ad3030c0H
	DQ	ef2b74c3c4efef9bH
	DQ	3fe5c37eda3f3ffcH
	DQ	55921caac7555549H
	DQ	a2791059dba2a2b2H
	DQ	ea0365c9e9eaea8fH
	DQ	650fecca6a656589H
	DQ	bab9686903babad2H
	DQ	2f65935e4a2f2fbcH
	DQ	c04ee79d8ec0c027H
	DQ	debe81a160dede5fH
	DQ	1ce06c38fc1c1c70H
	DQ	fdbb2ee746fdfdd3H
	DQ	4d52649a1f4d4d29H
	DQ	92e4e03976929272H
	DQ	758fbceafa7575c9H
	DQ	06301e0c36060618H
	DQ	8a249809ae8a8a12H
	DQ	b2f940794bb2b2f2H
	DQ	e66359d185e6e6bfH
	DQ	0e70361c7e0e0e38H
	DQ	1ff8633ee71f1f7cH
	DQ	6237f7c455626295H
	DQ	d4eea3b53ad4d477H
	DQ	a829324d81a8a89aH
	DQ	96c4f43152969662H
	DQ	f99b3aef62f9f9c3H
	DQ	c566f697a3c5c533H
	DQ	2535b14a10252594H
	DQ	59f220b2ab595979H
	DQ	8454ae15d084842aH
	DQ	72b7a7e4c57272d5H
	DQ	39d5dd72ec3939e4H
	DQ	4c5a6198164c4c2dH
	DQ	5eca3bbc945e5e65H
	DQ	78e785f09f7878fdH
	DQ	38ddd870e53838e0H
	DQ	8c148605988c8c0aH
	DQ	d1c6b2bf17d1d163H
	DQ	a5410b57e4a5a5aeH
	DQ	e2434dd9a1e2e2afH
	DQ	612ff8c24e616199H
	DQ	b3f1457b42b3b3f6H
	DQ	2115a54234212184H
	DQ	9c94d625089c9c4aH
	DQ	1ef0663cee1e1e78H
	DQ	4322528661434311H
	DQ	c776fc93b1c7c73bH
	DQ	fcb32be54ffcfcd7H
	DQ	0420140824040410H
	DQ	51b208a2e3515159H
	DQ	99bcc72f2599995eH
	DQ	6d4fc4da226d6da9H
	DQ	0d68391a650d0d34H
	DQ	fa8335e979fafacfH
	DQ	dfb684a369dfdf5bH
	DQ	7ed79bfca97e7ee5H
	DQ	243db44819242490H
	DQ	3bc5d776fe3b3becH
	DQ	ab313d4b9aabab96H
	DQ	ce3ed181f0cece1fH
	DQ	1188552299111144H
	DQ	8f0c8903838f8f06H
	DQ	4e4a6b9c044e4e25H
	DQ	b7d1517366b7b7e6H
	DQ	eb0b60cbe0ebeb8bH
	DQ	3cfdcc78c13c3cf0H
	DQ	817cbf1ffd81813eH
	DQ	94d4fe354094946aH
	DQ	f7eb0cf31cf7f7fbH
	DQ	b9a1676f18b9b9deH
	DQ	13985f268b13134cH
	DQ	2c7d9c58512c2cb0H
	DQ	d3d6b8bb05d3d36bH
	DQ	e76b5cd38ce7e7bbH
	DQ	6e57cbdc396e6ea5H
	DQ	c46ef395aac4c437H
	DQ	03180f061b03030cH
	DQ	568a13acdc565645H
	DQ	441a49885e44440dH
	DQ	7fdf9efea07f7fe1H
	DQ	a921374f88a9a99eH
	DQ	2a4d8254672a2aa8H
	DQ	bbb16d6b0abbbbd6H
	DQ	c146e29f87c1c123H
	DQ	53a202a6f1535351H
	DQ	dcae8ba572dcdc57H
	DQ	0b582716530b0b2cH
	DQ	9d9cd327019d9d4eH
	DQ	6c47c1d82b6c6cadH
	DQ	3195f562a43131c4H
	DQ	7487b9e8f37474cdH
	DQ	f6e309f115f6f6ffH
	DQ	460a438c4c464605H
	DQ	ac092645a5acac8aH
	DQ	893c970fb589891eH
	DQ	14a04428b4141450H
	DQ	e15b42dfbae1e1a3H
	DQ	16b04e2ca6161658H
	DQ	3acdd274f73a3ae8H
	DQ	696fd0d2066969b9H
	DQ	09482d1241090924H
	DQ	70a7ade0d77070ddH
	DQ	b6d954716fb6b6e2H
	DQ	d0ceb7bd1ed0d067H
	DQ	ed3b7ec7d6eded93H
	DQ	cc2edb85e2cccc17H
	DQ	422a578468424215H
	DQ	98b4c22d2c98985aH
	DQ	a4490e55eda4a4aaH
	DQ	285d8850752828a0H
	DQ	5cda31b8865c5c6dH
	DQ	f8933fed6bf8f8c7H
	DQ	8644a411c2868622H
C6	DQ	6018c07830d81818H
	DQ	8c2305af46262323H
	DQ	3fc67ef991b8c6c6H
	DQ	87e8136fcdfbe8e8H
	DQ	26874ca113cb8787H
	DQ	dab8a9626d11b8b8H
	DQ	0401080502090101H
	DQ	214f426e9e0d4f4fH
	DQ	d836adee6c9b3636H
	DQ	a2a6590451ffa6a6H
	DQ	6fd2debdb90cd2d2H
	DQ	f3f5fb06f70ef5f5H
	DQ	f979ef80f2967979H
	DQ	a16f5fcede306f6fH
	DQ	7e91fcef3f6d9191H
	DQ	5552aa07a4f85252H
	DQ	9d6027fdc0476060H
	DQ	cabc89766535bcbcH
	DQ	569baccd2b379b9bH
	DQ	028e048c018a8e8eH
	DQ	b6a371155bd2a3a3H
	DQ	300c603c186c0c0cH
	DQ	f17bff8af6847b7bH
	DQ	d435b5e16a803535H
	DQ	741de8693af51d1dH
	DQ	a7e05347ddb3e0e0H
	DQ	7bd7f6acb321d7d7H
	DQ	2fc25eed999cc2c2H
	DQ	b82e6d965c432e2eH
	DQ	314b627a96294b4bH
	DQ	dffea321e15dfefeH
	DQ	41578216aed55757H
	DQ	5415a8412abd1515H
	DQ	c1779fb6eee87777H
	DQ	dc37a5eb6e923737H
	DQ	b3e57b56d79ee5e5H
	DQ	469f8cd923139f9fH
	DQ	e7f0d317fd23f0f0H
	DQ	354a6a7f94204a4aH
	DQ	4fda9e95a944dadaH
	DQ	7d58fa25b0a25858H
	DQ	03c906ca8fcfc9c9H
	DQ	a429558d527c2929H
	DQ	280a5022145a0a0aH
	DQ	feb1e14f7f50b1b1H
	DQ	baa0691a5dc9a0a0H
	DQ	b16b7fdad6146b6bH
	DQ	2e855cab17d98585H
	DQ	cebd8173673cbdbdH
	DQ	695dd234ba8f5d5dH
	DQ	4010805020901010H
	DQ	f7f4f303f507f4f4H
	DQ	0bcb16c08bddcbcbH
	DQ	f83eedc67cd33e3eH
	DQ	140528110a2d0505H
	DQ	81671fe6ce786767H
	DQ	b7e47353d597e4e4H
	DQ	9c2725bb4e022727H
	DQ	1941325882734141H
	DQ	168b2c9d0ba78b8bH
	DQ	a6a7510153f6a7a7H
	DQ	e97dcf94fab27d7dH
	DQ	6e95dcfb37499595H
	DQ	47d88e9fad56d8d8H
	DQ	cbfb8b30eb70fbfbH
	DQ	9fee2371c1cdeeeeH
	DQ	ed7cc791f8bb7c7cH
	DQ	856617e3cc716666H
	DQ	53dda68ea77bddddH
	DQ	5c17b84b2eaf1717H
	DQ	014702468e454747H
	DQ	429e84dc211a9e9eH
	DQ	0fca1ec589d4cacaH
	DQ	b42d75995a582d2dH
	DQ	c6bf9179632ebfbfH
	DQ	1c07381b0e3f0707H
	DQ	8ead012347acadadH
	DQ	755aea2fb4b05a5aH
	DQ	36836cb51bef8383H
	DQ	cc3385ff66b63333H
	DQ	91633ff2c65c6363H
	DQ	0802100a04120202H
	DQ	92aa39384993aaaaH
	DQ	d971afa8e2de7171H
	DQ	07c80ecf8dc6c8c8H
	DQ	6419c87d32d11919H
	DQ	39497270923b4949H
	DQ	43d9869aaf5fd9d9H
	DQ	eff2c31df931f2f2H
	DQ	abe34b48dba8e3e3H
	DQ	715be22ab6b95b5bH
	DQ	1a8834920dbc8888H
	DQ	529aa4c8293e9a9aH
	DQ	98262dbe4c0b2626H
	DQ	c8328dfa64bf3232H
	DQ	fab0e94a7d59b0b0H
	DQ	83e91b6acff2e9e9H
	DQ	3c0f78331e770f0fH
	DQ	73d5e6a6b733d5d5H
	DQ	3a8074ba1df48080H
	DQ	c2be997c6127bebeH
	DQ	13cd26de87ebcdcdH
	DQ	d034bde468893434H
	DQ	3d487a7590324848H
	DQ	dbffab24e354ffffH
	DQ	f57af78ff48d7a7aH
	DQ	7a90f4ea3d649090H
	DQ	615fc23ebe9d5f5fH
	DQ	80201da0403d2020H
	DQ	bd6867d5d00f6868H
	DQ	681ad07234ca1a1aH
	DQ	82ae192c41b7aeaeH
	DQ	eab4c95e757db4b4H
	DQ	4d549a19a8ce5454H
	DQ	7693ece53b7f9393H
	DQ	88220daa442f2222H
	DQ	8d6407e9c8636464H
	DQ	e3f1db12ff2af1f1H
	DQ	d173bfa2e6cc7373H
	DQ	4812905a24821212H
	DQ	1d403a5d807a4040H
	DQ	2008402810480808H
	DQ	2bc356e89b95c3c3H
	DQ	97ec337bc5dfececH
	DQ	4bdb9690ab4ddbdbH
	DQ	bea1611f5fc0a1a1H
	DQ	0e8d1c8307918d8dH
	DQ	f43df5c97ac83d3dH
	DQ	6697ccf1335b9797H
	DQ	0000000000000000H
	DQ	1bcf36d483f9cfcfH
	DQ	ac2b4587566e2b2bH
	DQ	c57697b3ece17676H
	DQ	328264b019e68282H
	DQ	7fd6fea9b128d6d6H
	DQ	6c1bd87736c31b1bH
	DQ	eeb5c15b7774b5b5H
	DQ	86af112943beafafH
	DQ	b56a77dfd41d6a6aH
	DQ	5d50ba0da0ea5050H
	DQ	0945124c8a574545H
	DQ	ebf3cb18fb38f3f3H
	DQ	c0309df060ad3030H
	DQ	9bef2b74c3c4efefH
	DQ	fc3fe5c37eda3f3fH
	DQ	4955921caac75555H
	DQ	b2a2791059dba2a2H
	DQ	8fea0365c9e9eaeaH
	DQ	89650fecca6a6565H
	DQ	d2bab9686903babaH
	DQ	bc2f65935e4a2f2fH
	DQ	27c04ee79d8ec0c0H
	DQ	5fdebe81a160dedeH
	DQ	701ce06c38fc1c1cH
	DQ	d3fdbb2ee746fdfdH
	DQ	294d52649a1f4d4dH
	DQ	7292e4e039769292H
	DQ	c9758fbceafa7575H
	DQ	1806301e0c360606H
	DQ	128a249809ae8a8aH
	DQ	f2b2f940794bb2b2H
	DQ	bfe66359d185e6e6H
	DQ	380e70361c7e0e0eH
	DQ	7c1ff8633ee71f1fH
	DQ	956237f7c4556262H
	DQ	77d4eea3b53ad4d4H
	DQ	9aa829324d81a8a8H
	DQ	6296c4f431529696H
	DQ	c3f99b3aef62f9f9H
	DQ	33c566f697a3c5c5H
	DQ	942535b14a102525H
	DQ	7959f220b2ab5959H
	DQ	2a8454ae15d08484H
	DQ	d572b7a7e4c57272H
	DQ	e439d5dd72ec3939H
	DQ	2d4c5a6198164c4cH
	DQ	655eca3bbc945e5eH
	DQ	fd78e785f09f7878H
	DQ	e038ddd870e53838H
	DQ	0a8c148605988c8cH
	DQ	63d1c6b2bf17d1d1H
	DQ	aea5410b57e4a5a5H
	DQ	afe2434dd9a1e2e2H
	DQ	99612ff8c24e6161H
	DQ	f6b3f1457b42b3b3H
	DQ	842115a542342121H
	DQ	4a9c94d625089c9cH
	DQ	781ef0663cee1e1eH
	DQ	1143225286614343H
	DQ	3bc776fc93b1c7c7H
	DQ	d7fcb32be54ffcfcH
	DQ	1004201408240404H
	DQ	5951b208a2e35151H
	DQ	5e99bcc72f259999H
	DQ	a96d4fc4da226d6dH
	DQ	340d68391a650d0dH
	DQ	cffa8335e979fafaH
	DQ	5bdfb684a369dfdfH
	DQ	e57ed79bfca97e7eH
	DQ	90243db448192424H
	DQ	ec3bc5d776fe3b3bH
	DQ	96ab313d4b9aababH
	DQ	1fce3ed181f0ceceH
	DQ	4411885522991111H
	DQ	068f0c8903838f8fH
	DQ	254e4a6b9c044e4eH
	DQ	e6b7d1517366b7b7H
	DQ	8beb0b60cbe0ebebH
	DQ	f03cfdcc78c13c3cH
	DQ	3e817cbf1ffd8181H
	DQ	6a94d4fe35409494H
	DQ	fbf7eb0cf31cf7f7H
	DQ	deb9a1676f18b9b9H
	DQ	4c13985f268b1313H
	DQ	b02c7d9c58512c2cH
	DQ	6bd3d6b8bb05d3d3H
	DQ	bbe76b5cd38ce7e7H
	DQ	a56e57cbdc396e6eH
	DQ	37c46ef395aac4c4H
	DQ	0c03180f061b0303H
	DQ	45568a13acdc5656H
	DQ	0d441a49885e4444H
	DQ	e17fdf9efea07f7fH
	DQ	9ea921374f88a9a9H
	DQ	a82a4d8254672a2aH
	DQ	d6bbb16d6b0abbbbH
	DQ	23c146e29f87c1c1H
	DQ	5153a202a6f15353H
	DQ	57dcae8ba572dcdcH
	DQ	2c0b582716530b0bH
	DQ	4e9d9cd327019d9dH
	DQ	ad6c47c1d82b6c6cH
	DQ	c43195f562a43131H
	DQ	cd7487b9e8f37474H
	DQ	fff6e309f115f6f6H
	DQ	05460a438c4c4646H
	DQ	8aac092645a5acacH
	DQ	1e893c970fb58989H
	DQ	5014a04428b41414H
	DQ	a3e15b42dfbae1e1H
	DQ	5816b04e2ca61616H
	DQ	e83acdd274f73a3aH
	DQ	b9696fd0d2066969H
	DQ	2409482d12410909H
	DQ	dd70a7ade0d77070H
	DQ	e2b6d954716fb6b6H
	DQ	67d0ceb7bd1ed0d0H
	DQ	93ed3b7ec7d6ededH
	DQ	17cc2edb85e2ccccH
	DQ	15422a5784684242H
	DQ	5a98b4c22d2c9898H
	DQ	aaa4490e55eda4a4H
	DQ	a0285d8850752828H
	DQ	6d5cda31b8865c5cH
	DQ	c7f8933fed6bf8f8H
	DQ	228644a411c28686H
C7	DQ	186018c07830d818H
	DQ	238c2305af462623H
	DQ	c63fc67ef991b8c6H
	DQ	e887e8136fcdfbe8H
	DQ	8726874ca113cb87H
	DQ	b8dab8a9626d11b8H
	DQ	0104010805020901H
	DQ	4f214f426e9e0d4fH
	DQ	36d836adee6c9b36H
	DQ	a6a2a6590451ffa6H
	DQ	d26fd2debdb90cd2H
	DQ	f5f3f5fb06f70ef5H
	DQ	79f979ef80f29679H
	DQ	6fa16f5fcede306fH
	DQ	917e91fcef3f6d91H
	DQ	525552aa07a4f852H
	DQ	609d6027fdc04760H
	DQ	bccabc89766535bcH
	DQ	9b569baccd2b379bH
	DQ	8e028e048c018a8eH
	DQ	a3b6a371155bd2a3H
	DQ	0c300c603c186c0cH
	DQ	7bf17bff8af6847bH
	DQ	35d435b5e16a8035H
	DQ	1d741de8693af51dH
	DQ	e0a7e05347ddb3e0H
	DQ	d77bd7f6acb321d7H
	DQ	c22fc25eed999cc2H
	DQ	2eb82e6d965c432eH
	DQ	4b314b627a96294bH
	DQ	fedffea321e15dfeH
	DQ	5741578216aed557H
	DQ	155415a8412abd15H
	DQ	77c1779fb6eee877H
	DQ	37dc37a5eb6e9237H
	DQ	e5b3e57b56d79ee5H
	DQ	9f469f8cd923139fH
	DQ	f0e7f0d317fd23f0H
	DQ	4a354a6a7f94204aH
	DQ	da4fda9e95a944daH
	DQ	587d58fa25b0a258H
	DQ	c903c906ca8fcfc9H
	DQ	29a429558d527c29H
	DQ	0a280a5022145a0aH
	DQ	b1feb1e14f7f50b1H
	DQ	a0baa0691a5dc9a0H
	DQ	6bb16b7fdad6146bH
	DQ	852e855cab17d985H
	DQ	bdcebd8173673cbdH
	DQ	5d695dd234ba8f5dH
	DQ	1040108050209010H
	DQ	f4f7f4f303f507f4H
	DQ	cb0bcb16c08bddcbH
	DQ	3ef83eedc67cd33eH
	DQ	05140528110a2d05H
	DQ	6781671fe6ce7867H
	DQ	e4b7e47353d597e4H
	DQ	279c2725bb4e0227H
	DQ	4119413258827341H
	DQ	8b168b2c9d0ba78bH
	DQ	a7a6a7510153f6a7H
	DQ	7de97dcf94fab27dH
	DQ	956e95dcfb374995H
	DQ	d847d88e9fad56d8H
	DQ	fbcbfb8b30eb70fbH
	DQ	ee9fee2371c1cdeeH
	DQ	7ced7cc791f8bb7cH
	DQ	66856617e3cc7166H
	DQ	dd53dda68ea77bddH
	DQ	175c17b84b2eaf17H
	DQ	47014702468e4547H
	DQ	9e429e84dc211a9eH
	DQ	ca0fca1ec589d4caH
	DQ	2db42d75995a582dH
	DQ	bfc6bf9179632ebfH
	DQ	071c07381b0e3f07H
	DQ	ad8ead012347acadH
	DQ	5a755aea2fb4b05aH
	DQ	8336836cb51bef83H
	DQ	33cc3385ff66b633H
	DQ	6391633ff2c65c63H
	DQ	020802100a041202H
	DQ	aa92aa39384993aaH
	DQ	71d971afa8e2de71H
	DQ	c807c80ecf8dc6c8H
	DQ	196419c87d32d119H
	DQ	4939497270923b49H
	DQ	d943d9869aaf5fd9H
	DQ	f2eff2c31df931f2H
	DQ	e3abe34b48dba8e3H
	DQ	5b715be22ab6b95bH
	DQ	881a8834920dbc88H
	DQ	9a529aa4c8293e9aH
	DQ	2698262dbe4c0b26H
	DQ	32c8328dfa64bf32H
	DQ	b0fab0e94a7d59b0H
	DQ	e983e91b6acff2e9H
	DQ	0f3c0f78331e770fH
	DQ	d573d5e6a6b733d5H
	DQ	803a8074ba1df480H
	DQ	bec2be997c6127beH
	DQ	cd13cd26de87ebcdH
	DQ	34d034bde4688934H
	DQ	483d487a75903248H
	DQ	ffdbffab24e354ffH
	DQ	7af57af78ff48d7aH
	DQ	907a90f4ea3d6490H
	DQ	5f615fc23ebe9d5fH
	DQ	2080201da0403d20H
	DQ	68bd6867d5d00f68H
	DQ	1a681ad07234ca1aH
	DQ	ae82ae192c41b7aeH
	DQ	b4eab4c95e757db4H
	DQ	544d549a19a8ce54H
	DQ	937693ece53b7f93H
	DQ	2288220daa442f22H
	DQ	648d6407e9c86364H
	DQ	f1e3f1db12ff2af1H
	DQ	73d173bfa2e6cc73H
	DQ	124812905a248212H
	DQ	401d403a5d807a40H
	DQ	0820084028104808H
	DQ	c32bc356e89b95c3H
	DQ	ec97ec337bc5dfecH
	DQ	db4bdb9690ab4ddbH
	DQ	a1bea1611f5fc0a1H
	DQ	8d0e8d1c8307918dH
	DQ	3df43df5c97ac83dH
	DQ	976697ccf1335b97H
	DQ	0000000000000000H
	DQ	cf1bcf36d483f9cfH
	DQ	2bac2b4587566e2bH
	DQ	76c57697b3ece176H
	DQ	82328264b019e682H
	DQ	d67fd6fea9b128d6H
	DQ	1b6c1bd87736c31bH
	DQ	b5eeb5c15b7774b5H
	DQ	af86af112943beafH
	DQ	6ab56a77dfd41d6aH
	DQ	505d50ba0da0ea50H
	DQ	450945124c8a5745H
	DQ	f3ebf3cb18fb38f3H
	DQ	30c0309df060ad30H
	DQ	ef9bef2b74c3c4efH
	DQ	3ffc3fe5c37eda3fH
	DQ	554955921caac755H
	DQ	a2b2a2791059dba2H
	DQ	ea8fea0365c9e9eaH
	DQ	6589650fecca6a65H
	DQ	bad2bab9686903baH
	DQ	2fbc2f65935e4a2fH
	DQ	c027c04ee79d8ec0H
	DQ	de5fdebe81a160deH
	DQ	1c701ce06c38fc1cH
	DQ	fdd3fdbb2ee746fdH
	DQ	4d294d52649a1f4dH
	DQ	927292e4e0397692H
	DQ	75c9758fbceafa75H
	DQ	061806301e0c3606H
	DQ	8a128a249809ae8aH
	DQ	b2f2b2f940794bb2H
	DQ	e6bfe66359d185e6H
	DQ	0e380e70361c7e0eH
	DQ	1f7c1ff8633ee71fH
	DQ	62956237f7c45562H
	DQ	d477d4eea3b53ad4H
	DQ	a89aa829324d81a8H
	DQ	966296c4f4315296H
	DQ	f9c3f99b3aef62f9H
	DQ	c533c566f697a3c5H
	DQ	25942535b14a1025H
	DQ	597959f220b2ab59H
	DQ	842a8454ae15d084H
	DQ	72d572b7a7e4c572H
	DQ	39e439d5dd72ec39H
	DQ	4c2d4c5a6198164cH
	DQ	5e655eca3bbc945eH
	DQ	78fd78e785f09f78H
	DQ	38e038ddd870e538H
	DQ	8c0a8c148605988cH
	DQ	d163d1c6b2bf17d1H
	DQ	a5aea5410b57e4a5H
	DQ	e2afe2434dd9a1e2H
	DQ	6199612ff8c24e61H
	DQ	b3f6b3f1457b42b3H
	DQ	21842115a5423421H
	DQ	9c4a9c94d625089cH
	DQ	1e781ef0663cee1eH
	DQ	4311432252866143H
	DQ	c73bc776fc93b1c7H
	DQ	fcd7fcb32be54ffcH
	DQ	0410042014082404H
	DQ	515951b208a2e351H
	DQ	995e99bcc72f2599H
	DQ	6da96d4fc4da226dH
	DQ	0d340d68391a650dH
	DQ	facffa8335e979faH
	DQ	df5bdfb684a369dfH
	DQ	7ee57ed79bfca97eH
	DQ	2490243db4481924H
	DQ	3bec3bc5d776fe3bH
	DQ	ab96ab313d4b9aabH
	DQ	ce1fce3ed181f0ceH
	DQ	1144118855229911H
	DQ	8f068f0c8903838fH
	DQ	4e254e4a6b9c044eH
	DQ	b7e6b7d1517366b7H
	DQ	eb8beb0b60cbe0ebH
	DQ	3cf03cfdcc78c13cH
	DQ	813e817cbf1ffd81H
	DQ	946a94d4fe354094H
	DQ	f7fbf7eb0cf31cf7H
	DQ	b9deb9a1676f18b9H
	DQ	134c13985f268b13H
	DQ	2cb02c7d9c58512cH
	DQ	d36bd3d6b8bb05d3H
	DQ	e7bbe76b5cd38ce7H
	DQ	6ea56e57cbdc396eH
	DQ	c437c46ef395aac4H
	DQ	030c03180f061b03H
	DQ	5645568a13acdc56H
	DQ	440d441a49885e44H
	DQ	7fe17fdf9efea07fH
	DQ	a99ea921374f88a9H
	DQ	2aa82a4d8254672aH
	DQ	bbd6bbb16d6b0abbH
	DQ	c123c146e29f87c1H
	DQ	535153a202a6f153H
	DQ	dc57dcae8ba572dcH
	DQ	0b2c0b582716530bH
	DQ	9d4e9d9cd327019dH
	DQ	6cad6c47c1d82b6cH
	DQ	31c43195f562a431H
	DQ	74cd7487b9e8f374H
	DQ	f6fff6e309f115f6H
	DQ	4605460a438c4c46H
	DQ	ac8aac092645a5acH
	DQ	891e893c970fb589H
	DQ	145014a04428b414H
	DQ	e1a3e15b42dfbae1H
	DQ	165816b04e2ca616H
	DQ	3ae83acdd274f73aH
	DQ	69b9696fd0d20669H
	DQ	092409482d124109H
	DQ	70dd70a7ade0d770H
	DQ	b6e2b6d954716fb6H
	DQ	d067d0ceb7bd1ed0H
	DQ	ed93ed3b7ec7d6edH
	DQ	cc17cc2edb85e2ccH
	DQ	4215422a57846842H
	DQ	985a98b4c22d2c98H
	DQ	a4aaa4490e55eda4H
	DQ	28a0285d88507528H
	DQ	5c6d5cda31b8865cH
	DQ	f8c7f8933fed6bf8H
	DQ	86228644a411c286H
rc	DQ	0000000000000000H
	DQ	1823c6e887b8014fH
	DQ	36a6d2f5796f9152H
	DQ	60bc9b8ea30c7b35H
	DQ	1de0d7c22e4bfe57H
	DQ	157737e59ff04adaH
	DQ	58c9290ab1a06b85H
	DQ	bd5d10f4cb3e0567H
	DQ	e427418ba77d95d8H
	DQ	fbee7c66dd17479eH
	DQ	ca2dbf07ad5a8333H
PUBLIC	WHIRLPOOL_init
;	COMDAT pdata
; File c:\home\public\desktop\projects\ciphershed.build\src\crypto\whirlpool.c
pdata	SEGMENT
$pdata$WHIRLPOOL_init DD imagerel $LN6
	DD	imagerel $LN6+107
	DD	imagerel $unwind$WHIRLPOOL_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$WHIRLPOOL_init DD 020a01H
	DD	07006120aH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT WHIRLPOOL_init
_TEXT	SEGMENT
i$ = 0
structpointer$ = 32
WHIRLPOOL_init PROC					; COMDAT

; 863  : void WHIRLPOOL_init(struct NESSIEstruct * const structpointer) {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 10	 sub	 rsp, 16

; 864  :     int i;
; 865  : 
; 866  :     memset(structpointer->bitLength, 0, 32);

  0000a	48 8b 7c 24 20	 mov	 rdi, QWORD PTR structpointer$[rsp]
  0000f	33 c0		 xor	 eax, eax
  00011	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00016	f3 aa		 rep stosb

; 867  :     structpointer->bufferBits = structpointer->bufferPos = 0;

  00018	48 8b 44 24 20	 mov	 rax, QWORD PTR structpointer$[rsp]
  0001d	c7 40 64 00 00
	00 00		 mov	 DWORD PTR [rax+100], 0
  00024	48 8b 44 24 20	 mov	 rax, QWORD PTR structpointer$[rsp]
  00029	c7 40 60 00 00
	00 00		 mov	 DWORD PTR [rax+96], 0

; 868  :     structpointer->buffer[0] = 0; /* it's only necessary to cleanup buffer[bufferPos] */

  00030	48 8b 44 24 20	 mov	 rax, QWORD PTR structpointer$[rsp]
  00035	c6 40 20 00	 mov	 BYTE PTR [rax+32], 0

; 869  :     for (i = 0; i < 8; i++) {

  00039	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
  00040	eb 09		 jmp	 SHORT $LN3@WHIRLPOOL_
$LN2@WHIRLPOOL_:
  00042	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00045	83 c0 01	 add	 eax, 1
  00048	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN3@WHIRLPOOL_:
  0004b	83 3c 24 08	 cmp	 DWORD PTR i$[rsp], 8
  0004f	7d 14		 jge	 SHORT $LN1@WHIRLPOOL_

; 870  :         structpointer->hash[i] = 0L; /* initial value */

  00051	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  00055	48 8b 44 24 20	 mov	 rax, QWORD PTR structpointer$[rsp]
  0005a	48 c7 44 c8 68
	00 00 00 00	 mov	 QWORD PTR [rax+rcx*8+104], 0

; 871  :     }

  00063	eb dd		 jmp	 SHORT $LN2@WHIRLPOOL_
$LN1@WHIRLPOOL_:

; 872  : }

  00065	48 83 c4 10	 add	 rsp, 16
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
WHIRLPOOL_init ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$processBuffer DD imagerel processBuffer
	DD	imagerel processBuffer+5116
	DD	imagerel $unwind$processBuffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$processBuffer DD 020c01H
	DD	025010cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT processBuffer
_TEXT	SEGMENT
i$ = 0
K$ = 16
r$ = 80
buffer$ = 88
L$ = 96
state$ = 160
block$ = 224
structpointer$ = 304
processBuffer PROC					; COMDAT

; 635  : static void processBuffer(struct NESSIEstruct * const structpointer) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H

; 636  :     int i, r;
; 637  :     u64 K[8];        /* the round key */
; 638  :     u64 block[8];    /* mu(buffer) */
; 639  :     u64 state[8];    /* the cipher state */
; 640  :     u64 L[8];
; 641  :     u8 *buffer = structpointer->buffer;

  0000c	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR structpointer$[rsp]
  00014	48 83 c0 20	 add	 rax, 32			; 00000020H
  00018	48 89 44 24 58	 mov	 QWORD PTR buffer$[rsp], rax

; 642  :     /*
; 643  :      * map the buffer to a block:
; 644  :      */
; 645  :     for (i = 0; i < 8; i++, buffer += 8) {

  0001d	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
  00024	eb 17		 jmp	 SHORT $LN6@processBuf
$LN5@processBuf:
  00026	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00029	83 c0 01	 add	 eax, 1
  0002c	89 04 24	 mov	 DWORD PTR i$[rsp], eax
  0002f	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  00034	48 83 c0 08	 add	 rax, 8
  00038	48 89 44 24 58	 mov	 QWORD PTR buffer$[rsp], rax
$LN6@processBuf:
  0003d	83 3c 24 08	 cmp	 DWORD PTR i$[rsp], 8
  00041	0f 8d b3 00 00
	00		 jge	 $LN4@processBuf

; 646  :         block[i] =
; 647  :             (((u64)buffer[0]        ) << 56) ^
; 648  :             (((u64)buffer[1] & 0xffL) << 48) ^
; 649  :             (((u64)buffer[2] & 0xffL) << 40) ^
; 650  :             (((u64)buffer[3] & 0xffL) << 32) ^
; 651  :             (((u64)buffer[4] & 0xffL) << 24) ^
; 652  :             (((u64)buffer[5] & 0xffL) << 16) ^
; 653  :             (((u64)buffer[6] & 0xffL) <<  8) ^
; 654  :             (((u64)buffer[7] & 0xffL)      );

  00047	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  0004c	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0004f	48 c1 e1 38	 shl	 rcx, 56			; 00000038H
  00053	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  00058	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0005c	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00062	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  00066	48 33 c8	 xor	 rcx, rax
  00069	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  0006e	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00072	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00078	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  0007c	48 33 c8	 xor	 rcx, rax
  0007f	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  00084	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  00088	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  0008e	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  00092	48 33 c8	 xor	 rcx, rax
  00095	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  0009a	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  0009e	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  000a4	48 c1 e0 18	 shl	 rax, 24
  000a8	48 33 c8	 xor	 rcx, rax
  000ab	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  000b0	0f b6 40 05	 movzx	 eax, BYTE PTR [rax+5]
  000b4	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  000ba	48 c1 e0 10	 shl	 rax, 16
  000be	48 33 c8	 xor	 rcx, rax
  000c1	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  000c6	0f b6 40 06	 movzx	 eax, BYTE PTR [rax+6]
  000ca	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  000d0	48 c1 e0 08	 shl	 rax, 8
  000d4	48 33 c8	 xor	 rcx, rax
  000d7	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  000dc	0f b6 40 07	 movzx	 eax, BYTE PTR [rax+7]
  000e0	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  000e6	48 33 c8	 xor	 rcx, rax
  000e9	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  000ed	48 89 8c c4 e0
	00 00 00	 mov	 QWORD PTR block$[rsp+rax*8], rcx

; 655  :     }

  000f5	e9 2c ff ff ff	 jmp	 $LN5@processBuf
$LN4@processBuf:

; 656  :     /*
; 657  :      * compute and apply K^0 to the cipher state:
; 658  :      */
; 659  :     state[0] = block[0] ^ (K[0] = structpointer->hash[0]);

  000fa	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR structpointer$[rsp]
  00102	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00106	48 89 44 24 10	 mov	 QWORD PTR K$[rsp], rax
  0010b	48 8b 4c 24 10	 mov	 rcx, QWORD PTR K$[rsp]
  00110	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR block$[rsp]
  00118	48 33 c1	 xor	 rax, rcx
  0011b	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR state$[rsp], rax

; 660  :     state[1] = block[1] ^ (K[1] = structpointer->hash[1]);

  00123	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR structpointer$[rsp]
  0012b	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0012f	48 89 44 24 18	 mov	 QWORD PTR K$[rsp+8], rax
  00134	48 8b 4c 24 18	 mov	 rcx, QWORD PTR K$[rsp+8]
  00139	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR block$[rsp+8]
  00141	48 33 c1	 xor	 rax, rcx
  00144	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR state$[rsp+8], rax

; 661  :     state[2] = block[2] ^ (K[2] = structpointer->hash[2]);

  0014c	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR structpointer$[rsp]
  00154	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00158	48 89 44 24 20	 mov	 QWORD PTR K$[rsp+16], rax
  0015d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR K$[rsp+16]
  00162	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR block$[rsp+16]
  0016a	48 33 c1	 xor	 rax, rcx
  0016d	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR state$[rsp+16], rax

; 662  :     state[3] = block[3] ^ (K[3] = structpointer->hash[3]);

  00175	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR structpointer$[rsp]
  0017d	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00184	48 89 44 24 28	 mov	 QWORD PTR K$[rsp+24], rax
  00189	48 8b 4c 24 28	 mov	 rcx, QWORD PTR K$[rsp+24]
  0018e	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR block$[rsp+24]
  00196	48 33 c1	 xor	 rax, rcx
  00199	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR state$[rsp+24], rax

; 663  :     state[4] = block[4] ^ (K[4] = structpointer->hash[4]);

  001a1	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR structpointer$[rsp]
  001a9	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  001b0	48 89 44 24 30	 mov	 QWORD PTR K$[rsp+32], rax
  001b5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR K$[rsp+32]
  001ba	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR block$[rsp+32]
  001c2	48 33 c1	 xor	 rax, rcx
  001c5	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR state$[rsp+32], rax

; 664  :     state[5] = block[5] ^ (K[5] = structpointer->hash[5]);

  001cd	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR structpointer$[rsp]
  001d5	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  001dc	48 89 44 24 38	 mov	 QWORD PTR K$[rsp+40], rax
  001e1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR K$[rsp+40]
  001e6	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR block$[rsp+40]
  001ee	48 33 c1	 xor	 rax, rcx
  001f1	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR state$[rsp+40], rax

; 665  :     state[6] = block[6] ^ (K[6] = structpointer->hash[6]);

  001f9	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR structpointer$[rsp]
  00201	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  00208	48 89 44 24 40	 mov	 QWORD PTR K$[rsp+48], rax
  0020d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR K$[rsp+48]
  00212	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR block$[rsp+48]
  0021a	48 33 c1	 xor	 rax, rcx
  0021d	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR state$[rsp+48], rax

; 666  :     state[7] = block[7] ^ (K[7] = structpointer->hash[7]);

  00225	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR structpointer$[rsp]
  0022d	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00234	48 89 44 24 48	 mov	 QWORD PTR K$[rsp+56], rax
  00239	48 8b 4c 24 48	 mov	 rcx, QWORD PTR K$[rsp+56]
  0023e	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR block$[rsp+56]
  00246	48 33 c1	 xor	 rax, rcx
  00249	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR state$[rsp+56], rax

; 667  :     /*
; 668  :      * iterate over all rounds:
; 669  :      */
; 670  :     for (r = 1; r <= R; r++) {

  00251	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR r$[rsp], 1
  00259	eb 0b		 jmp	 SHORT $LN3@processBuf
$LN2@processBuf:
  0025b	8b 44 24 50	 mov	 eax, DWORD PTR r$[rsp]
  0025f	83 c0 01	 add	 eax, 1
  00262	89 44 24 50	 mov	 DWORD PTR r$[rsp], eax
$LN3@processBuf:
  00266	83 7c 24 50 0a	 cmp	 DWORD PTR r$[rsp], 10
  0026b	0f 8f f5 0f 00
	00		 jg	 $LN1@processBuf

; 671  :         /*
; 672  :          * compute K^r from K^{r-1}:
; 673  :          */
; 674  :         L[0] =
; 675  :             C0[(int)(K[0] >> 56)       ] ^
; 676  :             C1[(int)(K[7] >> 48) & 0xff] ^
; 677  :             C2[(int)(K[6] >> 40) & 0xff] ^
; 678  :             C3[(int)(K[5] >> 32) & 0xff] ^
; 679  :             C4[(int)(K[4] >> 24) & 0xff] ^
; 680  :             C5[(int)(K[3] >> 16) & 0xff] ^
; 681  :             C6[(int)(K[2] >>  8) & 0xff] ^
; 682  :             C7[(int)(K[1]      ) & 0xff] ^
; 683  :             rc[r];

  00271	48 8b 44 24 10	 mov	 rax, QWORD PTR K$[rsp]
  00276	48 c1 e8 38	 shr	 rax, 56			; 00000038H
  0027a	48 63 d0	 movsxd	 rdx, eax
  0027d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:C0
  00284	48 8b 44 24 48	 mov	 rax, QWORD PTR K$[rsp+56]
  00289	48 c1 e8 30	 shr	 rax, 48			; 00000030H
  0028d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00292	48 63 c8	 movsxd	 rcx, eax
  00295	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C1
  0029c	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  002a0	4d 8b 04 d0	 mov	 r8, QWORD PTR [r8+rdx*8]
  002a4	4c 33 c0	 xor	 r8, rax
  002a7	48 8b 44 24 40	 mov	 rax, QWORD PTR K$[rsp+48]
  002ac	48 c1 e8 28	 shr	 rax, 40			; 00000028H
  002b0	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002b5	48 63 c8	 movsxd	 rcx, eax
  002b8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C2
  002bf	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  002c3	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp+40]
  002c8	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  002cc	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002d1	48 63 c8	 movsxd	 rcx, eax
  002d4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C3
  002db	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  002df	48 8b 44 24 30	 mov	 rax, QWORD PTR K$[rsp+32]
  002e4	48 c1 e8 18	 shr	 rax, 24
  002e8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002ed	48 63 c8	 movsxd	 rcx, eax
  002f0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C4
  002f7	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  002fb	48 8b 44 24 28	 mov	 rax, QWORD PTR K$[rsp+24]
  00300	48 c1 e8 10	 shr	 rax, 16
  00304	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00309	48 63 c8	 movsxd	 rcx, eax
  0030c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C5
  00313	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00317	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp+16]
  0031c	48 c1 e8 08	 shr	 rax, 8
  00320	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00325	48 63 c8	 movsxd	 rcx, eax
  00328	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C6
  0032f	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00333	8b 44 24 18	 mov	 eax, DWORD PTR K$[rsp+8]
  00337	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0033c	48 63 d0	 movsxd	 rdx, eax
  0033f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:C7
  00346	49 8b c0	 mov	 rax, r8
  00349	48 33 04 d1	 xor	 rax, QWORD PTR [rcx+rdx*8]
  0034d	48 63 54 24 50	 movsxd	 rdx, DWORD PTR r$[rsp]
  00352	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:rc
  00359	48 33 04 d1	 xor	 rax, QWORD PTR [rcx+rdx*8]
  0035d	48 89 44 24 60	 mov	 QWORD PTR L$[rsp], rax

; 684  :         L[1] =
; 685  :             C0[(int)(K[1] >> 56)       ] ^
; 686  :             C1[(int)(K[0] >> 48) & 0xff] ^
; 687  :             C2[(int)(K[7] >> 40) & 0xff] ^
; 688  :             C3[(int)(K[6] >> 32) & 0xff] ^
; 689  :             C4[(int)(K[5] >> 24) & 0xff] ^
; 690  :             C5[(int)(K[4] >> 16) & 0xff] ^
; 691  :             C6[(int)(K[3] >>  8) & 0xff] ^
; 692  :             C7[(int)(K[2]      ) & 0xff];

  00362	48 8b 44 24 18	 mov	 rax, QWORD PTR K$[rsp+8]
  00367	48 c1 e8 38	 shr	 rax, 56			; 00000038H
  0036b	48 63 d0	 movsxd	 rdx, eax
  0036e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:C0
  00375	48 8b 44 24 10	 mov	 rax, QWORD PTR K$[rsp]
  0037a	48 c1 e8 30	 shr	 rax, 48			; 00000030H
  0037e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00383	48 63 c8	 movsxd	 rcx, eax
  00386	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C1
  0038d	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00391	4d 8b 04 d0	 mov	 r8, QWORD PTR [r8+rdx*8]
  00395	4c 33 c0	 xor	 r8, rax
  00398	48 8b 44 24 48	 mov	 rax, QWORD PTR K$[rsp+56]
  0039d	48 c1 e8 28	 shr	 rax, 40			; 00000028H
  003a1	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003a6	48 63 c8	 movsxd	 rcx, eax
  003a9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C2
  003b0	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  003b4	48 8b 44 24 40	 mov	 rax, QWORD PTR K$[rsp+48]
  003b9	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  003bd	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003c2	48 63 c8	 movsxd	 rcx, eax
  003c5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C3
  003cc	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  003d0	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp+40]
  003d5	48 c1 e8 18	 shr	 rax, 24
  003d9	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003de	48 63 c8	 movsxd	 rcx, eax
  003e1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C4
  003e8	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  003ec	48 8b 44 24 30	 mov	 rax, QWORD PTR K$[rsp+32]
  003f1	48 c1 e8 10	 shr	 rax, 16
  003f5	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003fa	48 63 c8	 movsxd	 rcx, eax
  003fd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C5
  00404	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00408	48 8b 44 24 28	 mov	 rax, QWORD PTR K$[rsp+24]
  0040d	48 c1 e8 08	 shr	 rax, 8
  00411	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00416	48 63 c8	 movsxd	 rcx, eax
  00419	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C6
  00420	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00424	8b 44 24 20	 mov	 eax, DWORD PTR K$[rsp+16]
  00428	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0042d	48 63 d0	 movsxd	 rdx, eax
  00430	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:C7
  00437	49 8b c0	 mov	 rax, r8
  0043a	48 33 04 d1	 xor	 rax, QWORD PTR [rcx+rdx*8]
  0043e	48 89 44 24 68	 mov	 QWORD PTR L$[rsp+8], rax

; 693  :         L[2] =
; 694  :             C0[(int)(K[2] >> 56)       ] ^
; 695  :             C1[(int)(K[1] >> 48) & 0xff] ^
; 696  :             C2[(int)(K[0] >> 40) & 0xff] ^
; 697  :             C3[(int)(K[7] >> 32) & 0xff] ^
; 698  :             C4[(int)(K[6] >> 24) & 0xff] ^
; 699  :             C5[(int)(K[5] >> 16) & 0xff] ^
; 700  :             C6[(int)(K[4] >>  8) & 0xff] ^
; 701  :             C7[(int)(K[3]      ) & 0xff];

  00443	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp+16]
  00448	48 c1 e8 38	 shr	 rax, 56			; 00000038H
  0044c	48 63 d0	 movsxd	 rdx, eax
  0044f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:C0
  00456	48 8b 44 24 18	 mov	 rax, QWORD PTR K$[rsp+8]
  0045b	48 c1 e8 30	 shr	 rax, 48			; 00000030H
  0045f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00464	48 63 c8	 movsxd	 rcx, eax
  00467	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C1
  0046e	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00472	4d 8b 04 d0	 mov	 r8, QWORD PTR [r8+rdx*8]
  00476	4c 33 c0	 xor	 r8, rax
  00479	48 8b 44 24 10	 mov	 rax, QWORD PTR K$[rsp]
  0047e	48 c1 e8 28	 shr	 rax, 40			; 00000028H
  00482	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00487	48 63 c8	 movsxd	 rcx, eax
  0048a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C2
  00491	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00495	48 8b 44 24 48	 mov	 rax, QWORD PTR K$[rsp+56]
  0049a	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  0049e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  004a3	48 63 c8	 movsxd	 rcx, eax
  004a6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C3
  004ad	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  004b1	48 8b 44 24 40	 mov	 rax, QWORD PTR K$[rsp+48]
  004b6	48 c1 e8 18	 shr	 rax, 24
  004ba	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  004bf	48 63 c8	 movsxd	 rcx, eax
  004c2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C4
  004c9	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  004cd	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp+40]
  004d2	48 c1 e8 10	 shr	 rax, 16
  004d6	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  004db	48 63 c8	 movsxd	 rcx, eax
  004de	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C5
  004e5	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  004e9	48 8b 44 24 30	 mov	 rax, QWORD PTR K$[rsp+32]
  004ee	48 c1 e8 08	 shr	 rax, 8
  004f2	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  004f7	48 63 c8	 movsxd	 rcx, eax
  004fa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C6
  00501	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00505	8b 44 24 28	 mov	 eax, DWORD PTR K$[rsp+24]
  00509	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0050e	48 63 d0	 movsxd	 rdx, eax
  00511	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:C7
  00518	49 8b c0	 mov	 rax, r8
  0051b	48 33 04 d1	 xor	 rax, QWORD PTR [rcx+rdx*8]
  0051f	48 89 44 24 70	 mov	 QWORD PTR L$[rsp+16], rax

; 702  :         L[3] =
; 703  :             C0[(int)(K[3] >> 56)       ] ^
; 704  :             C1[(int)(K[2] >> 48) & 0xff] ^
; 705  :             C2[(int)(K[1] >> 40) & 0xff] ^
; 706  :             C3[(int)(K[0] >> 32) & 0xff] ^
; 707  :             C4[(int)(K[7] >> 24) & 0xff] ^
; 708  :             C5[(int)(K[6] >> 16) & 0xff] ^
; 709  :             C6[(int)(K[5] >>  8) & 0xff] ^
; 710  :             C7[(int)(K[4]      ) & 0xff];

  00524	48 8b 44 24 28	 mov	 rax, QWORD PTR K$[rsp+24]
  00529	48 c1 e8 38	 shr	 rax, 56			; 00000038H
  0052d	48 63 d0	 movsxd	 rdx, eax
  00530	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:C0
  00537	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp+16]
  0053c	48 c1 e8 30	 shr	 rax, 48			; 00000030H
  00540	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00545	48 63 c8	 movsxd	 rcx, eax
  00548	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C1
  0054f	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00553	4d 8b 04 d0	 mov	 r8, QWORD PTR [r8+rdx*8]
  00557	4c 33 c0	 xor	 r8, rax
  0055a	48 8b 44 24 18	 mov	 rax, QWORD PTR K$[rsp+8]
  0055f	48 c1 e8 28	 shr	 rax, 40			; 00000028H
  00563	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00568	48 63 c8	 movsxd	 rcx, eax
  0056b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C2
  00572	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00576	48 8b 44 24 10	 mov	 rax, QWORD PTR K$[rsp]
  0057b	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  0057f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00584	48 63 c8	 movsxd	 rcx, eax
  00587	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C3
  0058e	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00592	48 8b 44 24 48	 mov	 rax, QWORD PTR K$[rsp+56]
  00597	48 c1 e8 18	 shr	 rax, 24
  0059b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  005a0	48 63 c8	 movsxd	 rcx, eax
  005a3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C4
  005aa	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  005ae	48 8b 44 24 40	 mov	 rax, QWORD PTR K$[rsp+48]
  005b3	48 c1 e8 10	 shr	 rax, 16
  005b7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  005bc	48 63 c8	 movsxd	 rcx, eax
  005bf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C5
  005c6	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  005ca	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp+40]
  005cf	48 c1 e8 08	 shr	 rax, 8
  005d3	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  005d8	48 63 c8	 movsxd	 rcx, eax
  005db	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C6
  005e2	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  005e6	8b 44 24 30	 mov	 eax, DWORD PTR K$[rsp+32]
  005ea	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  005ef	48 63 d0	 movsxd	 rdx, eax
  005f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:C7
  005f9	49 8b c0	 mov	 rax, r8
  005fc	48 33 04 d1	 xor	 rax, QWORD PTR [rcx+rdx*8]
  00600	48 89 44 24 78	 mov	 QWORD PTR L$[rsp+24], rax

; 711  :         L[4] =
; 712  :             C0[(int)(K[4] >> 56)       ] ^
; 713  :             C1[(int)(K[3] >> 48) & 0xff] ^
; 714  :             C2[(int)(K[2] >> 40) & 0xff] ^
; 715  :             C3[(int)(K[1] >> 32) & 0xff] ^
; 716  :             C4[(int)(K[0] >> 24) & 0xff] ^
; 717  :             C5[(int)(K[7] >> 16) & 0xff] ^
; 718  :             C6[(int)(K[6] >>  8) & 0xff] ^
; 719  :             C7[(int)(K[5]      ) & 0xff];

  00605	48 8b 44 24 30	 mov	 rax, QWORD PTR K$[rsp+32]
  0060a	48 c1 e8 38	 shr	 rax, 56			; 00000038H
  0060e	48 63 d0	 movsxd	 rdx, eax
  00611	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:C0
  00618	48 8b 44 24 28	 mov	 rax, QWORD PTR K$[rsp+24]
  0061d	48 c1 e8 30	 shr	 rax, 48			; 00000030H
  00621	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00626	48 63 c8	 movsxd	 rcx, eax
  00629	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C1
  00630	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00634	4d 8b 04 d0	 mov	 r8, QWORD PTR [r8+rdx*8]
  00638	4c 33 c0	 xor	 r8, rax
  0063b	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp+16]
  00640	48 c1 e8 28	 shr	 rax, 40			; 00000028H
  00644	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00649	48 63 c8	 movsxd	 rcx, eax
  0064c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C2
  00653	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00657	48 8b 44 24 18	 mov	 rax, QWORD PTR K$[rsp+8]
  0065c	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00660	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00665	48 63 c8	 movsxd	 rcx, eax
  00668	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C3
  0066f	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00673	48 8b 44 24 10	 mov	 rax, QWORD PTR K$[rsp]
  00678	48 c1 e8 18	 shr	 rax, 24
  0067c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00681	48 63 c8	 movsxd	 rcx, eax
  00684	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C4
  0068b	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  0068f	48 8b 44 24 48	 mov	 rax, QWORD PTR K$[rsp+56]
  00694	48 c1 e8 10	 shr	 rax, 16
  00698	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0069d	48 63 c8	 movsxd	 rcx, eax
  006a0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C5
  006a7	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  006ab	48 8b 44 24 40	 mov	 rax, QWORD PTR K$[rsp+48]
  006b0	48 c1 e8 08	 shr	 rax, 8
  006b4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  006b9	48 63 c8	 movsxd	 rcx, eax
  006bc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C6
  006c3	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  006c7	8b 44 24 38	 mov	 eax, DWORD PTR K$[rsp+40]
  006cb	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  006d0	48 63 d0	 movsxd	 rdx, eax
  006d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:C7
  006da	49 8b c0	 mov	 rax, r8
  006dd	48 33 04 d1	 xor	 rax, QWORD PTR [rcx+rdx*8]
  006e1	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR L$[rsp+32], rax

; 720  :         L[5] =
; 721  :             C0[(int)(K[5] >> 56)       ] ^
; 722  :             C1[(int)(K[4] >> 48) & 0xff] ^
; 723  :             C2[(int)(K[3] >> 40) & 0xff] ^
; 724  :             C3[(int)(K[2] >> 32) & 0xff] ^
; 725  :             C4[(int)(K[1] >> 24) & 0xff] ^
; 726  :             C5[(int)(K[0] >> 16) & 0xff] ^
; 727  :             C6[(int)(K[7] >>  8) & 0xff] ^
; 728  :             C7[(int)(K[6]      ) & 0xff];

  006e9	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp+40]
  006ee	48 c1 e8 38	 shr	 rax, 56			; 00000038H
  006f2	48 63 d0	 movsxd	 rdx, eax
  006f5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:C0
  006fc	48 8b 44 24 30	 mov	 rax, QWORD PTR K$[rsp+32]
  00701	48 c1 e8 30	 shr	 rax, 48			; 00000030H
  00705	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0070a	48 63 c8	 movsxd	 rcx, eax
  0070d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C1
  00714	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00718	4d 8b 04 d0	 mov	 r8, QWORD PTR [r8+rdx*8]
  0071c	4c 33 c0	 xor	 r8, rax
  0071f	48 8b 44 24 28	 mov	 rax, QWORD PTR K$[rsp+24]
  00724	48 c1 e8 28	 shr	 rax, 40			; 00000028H
  00728	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0072d	48 63 c8	 movsxd	 rcx, eax
  00730	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C2
  00737	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  0073b	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp+16]
  00740	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00744	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00749	48 63 c8	 movsxd	 rcx, eax
  0074c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C3
  00753	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00757	48 8b 44 24 18	 mov	 rax, QWORD PTR K$[rsp+8]
  0075c	48 c1 e8 18	 shr	 rax, 24
  00760	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00765	48 63 c8	 movsxd	 rcx, eax
  00768	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C4
  0076f	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00773	48 8b 44 24 10	 mov	 rax, QWORD PTR K$[rsp]
  00778	48 c1 e8 10	 shr	 rax, 16
  0077c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00781	48 63 c8	 movsxd	 rcx, eax
  00784	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C5
  0078b	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  0078f	48 8b 44 24 48	 mov	 rax, QWORD PTR K$[rsp+56]
  00794	48 c1 e8 08	 shr	 rax, 8
  00798	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0079d	48 63 c8	 movsxd	 rcx, eax
  007a0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C6
  007a7	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  007ab	8b 44 24 40	 mov	 eax, DWORD PTR K$[rsp+48]
  007af	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  007b4	48 63 d0	 movsxd	 rdx, eax
  007b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:C7
  007be	49 8b c0	 mov	 rax, r8
  007c1	48 33 04 d1	 xor	 rax, QWORD PTR [rcx+rdx*8]
  007c5	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR L$[rsp+40], rax

; 729  :         L[6] =
; 730  :             C0[(int)(K[6] >> 56)       ] ^
; 731  :             C1[(int)(K[5] >> 48) & 0xff] ^
; 732  :             C2[(int)(K[4] >> 40) & 0xff] ^
; 733  :             C3[(int)(K[3] >> 32) & 0xff] ^
; 734  :             C4[(int)(K[2] >> 24) & 0xff] ^
; 735  :             C5[(int)(K[1] >> 16) & 0xff] ^
; 736  :             C6[(int)(K[0] >>  8) & 0xff] ^
; 737  :             C7[(int)(K[7]      ) & 0xff];

  007cd	48 8b 44 24 40	 mov	 rax, QWORD PTR K$[rsp+48]
  007d2	48 c1 e8 38	 shr	 rax, 56			; 00000038H
  007d6	48 63 d0	 movsxd	 rdx, eax
  007d9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:C0
  007e0	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp+40]
  007e5	48 c1 e8 30	 shr	 rax, 48			; 00000030H
  007e9	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  007ee	48 63 c8	 movsxd	 rcx, eax
  007f1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C1
  007f8	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  007fc	4d 8b 04 d0	 mov	 r8, QWORD PTR [r8+rdx*8]
  00800	4c 33 c0	 xor	 r8, rax
  00803	48 8b 44 24 30	 mov	 rax, QWORD PTR K$[rsp+32]
  00808	48 c1 e8 28	 shr	 rax, 40			; 00000028H
  0080c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00811	48 63 c8	 movsxd	 rcx, eax
  00814	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C2
  0081b	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  0081f	48 8b 44 24 28	 mov	 rax, QWORD PTR K$[rsp+24]
  00824	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00828	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0082d	48 63 c8	 movsxd	 rcx, eax
  00830	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C3
  00837	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  0083b	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp+16]
  00840	48 c1 e8 18	 shr	 rax, 24
  00844	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00849	48 63 c8	 movsxd	 rcx, eax
  0084c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C4
  00853	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00857	48 8b 44 24 18	 mov	 rax, QWORD PTR K$[rsp+8]
  0085c	48 c1 e8 10	 shr	 rax, 16
  00860	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00865	48 63 c8	 movsxd	 rcx, eax
  00868	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C5
  0086f	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00873	48 8b 44 24 10	 mov	 rax, QWORD PTR K$[rsp]
  00878	48 c1 e8 08	 shr	 rax, 8
  0087c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00881	48 63 c8	 movsxd	 rcx, eax
  00884	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C6
  0088b	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  0088f	8b 44 24 48	 mov	 eax, DWORD PTR K$[rsp+56]
  00893	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00898	48 63 d0	 movsxd	 rdx, eax
  0089b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:C7
  008a2	49 8b c0	 mov	 rax, r8
  008a5	48 33 04 d1	 xor	 rax, QWORD PTR [rcx+rdx*8]
  008a9	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR L$[rsp+48], rax

; 738  :         L[7] =
; 739  :             C0[(int)(K[7] >> 56)       ] ^
; 740  :             C1[(int)(K[6] >> 48) & 0xff] ^
; 741  :             C2[(int)(K[5] >> 40) & 0xff] ^
; 742  :             C3[(int)(K[4] >> 32) & 0xff] ^
; 743  :             C4[(int)(K[3] >> 24) & 0xff] ^
; 744  :             C5[(int)(K[2] >> 16) & 0xff] ^
; 745  :             C6[(int)(K[1] >>  8) & 0xff] ^
; 746  :             C7[(int)(K[0]      ) & 0xff];

  008b1	48 8b 44 24 48	 mov	 rax, QWORD PTR K$[rsp+56]
  008b6	48 c1 e8 38	 shr	 rax, 56			; 00000038H
  008ba	48 63 d0	 movsxd	 rdx, eax
  008bd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:C0
  008c4	48 8b 44 24 40	 mov	 rax, QWORD PTR K$[rsp+48]
  008c9	48 c1 e8 30	 shr	 rax, 48			; 00000030H
  008cd	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  008d2	48 63 c8	 movsxd	 rcx, eax
  008d5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C1
  008dc	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  008e0	4d 8b 04 d0	 mov	 r8, QWORD PTR [r8+rdx*8]
  008e4	4c 33 c0	 xor	 r8, rax
  008e7	48 8b 44 24 38	 mov	 rax, QWORD PTR K$[rsp+40]
  008ec	48 c1 e8 28	 shr	 rax, 40			; 00000028H
  008f0	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  008f5	48 63 c8	 movsxd	 rcx, eax
  008f8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C2
  008ff	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00903	48 8b 44 24 30	 mov	 rax, QWORD PTR K$[rsp+32]
  00908	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  0090c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00911	48 63 c8	 movsxd	 rcx, eax
  00914	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C3
  0091b	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  0091f	48 8b 44 24 28	 mov	 rax, QWORD PTR K$[rsp+24]
  00924	48 c1 e8 18	 shr	 rax, 24
  00928	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0092d	48 63 c8	 movsxd	 rcx, eax
  00930	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C4
  00937	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  0093b	48 8b 44 24 20	 mov	 rax, QWORD PTR K$[rsp+16]
  00940	48 c1 e8 10	 shr	 rax, 16
  00944	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00949	48 63 c8	 movsxd	 rcx, eax
  0094c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C5
  00953	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00957	48 8b 44 24 18	 mov	 rax, QWORD PTR K$[rsp+8]
  0095c	48 c1 e8 08	 shr	 rax, 8
  00960	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00965	48 63 c8	 movsxd	 rcx, eax
  00968	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C6
  0096f	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00973	8b 44 24 10	 mov	 eax, DWORD PTR K$[rsp]
  00977	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0097c	48 63 d0	 movsxd	 rdx, eax
  0097f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:C7
  00986	49 8b c0	 mov	 rax, r8
  00989	48 33 04 d1	 xor	 rax, QWORD PTR [rcx+rdx*8]
  0098d	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR L$[rsp+56], rax

; 747  :         K[0] = L[0];

  00995	48 8b 44 24 60	 mov	 rax, QWORD PTR L$[rsp]
  0099a	48 89 44 24 10	 mov	 QWORD PTR K$[rsp], rax

; 748  :         K[1] = L[1];

  0099f	48 8b 44 24 68	 mov	 rax, QWORD PTR L$[rsp+8]
  009a4	48 89 44 24 18	 mov	 QWORD PTR K$[rsp+8], rax

; 749  :         K[2] = L[2];

  009a9	48 8b 44 24 70	 mov	 rax, QWORD PTR L$[rsp+16]
  009ae	48 89 44 24 20	 mov	 QWORD PTR K$[rsp+16], rax

; 750  :         K[3] = L[3];

  009b3	48 8b 44 24 78	 mov	 rax, QWORD PTR L$[rsp+24]
  009b8	48 89 44 24 28	 mov	 QWORD PTR K$[rsp+24], rax

; 751  :         K[4] = L[4];

  009bd	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR L$[rsp+32]
  009c5	48 89 44 24 30	 mov	 QWORD PTR K$[rsp+32], rax

; 752  :         K[5] = L[5];

  009ca	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR L$[rsp+40]
  009d2	48 89 44 24 38	 mov	 QWORD PTR K$[rsp+40], rax

; 753  :         K[6] = L[6];

  009d7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR L$[rsp+48]
  009df	48 89 44 24 40	 mov	 QWORD PTR K$[rsp+48], rax

; 754  :         K[7] = L[7];

  009e4	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR L$[rsp+56]
  009ec	48 89 44 24 48	 mov	 QWORD PTR K$[rsp+56], rax

; 755  :         /*
; 756  :          * apply the r-th round transformation:
; 757  :          */
; 758  :         L[0] =
; 759  :             C0[(int)(state[0] >> 56)       ] ^
; 760  :             C1[(int)(state[7] >> 48) & 0xff] ^
; 761  :             C2[(int)(state[6] >> 40) & 0xff] ^
; 762  :             C3[(int)(state[5] >> 32) & 0xff] ^
; 763  :             C4[(int)(state[4] >> 24) & 0xff] ^
; 764  :             C5[(int)(state[3] >> 16) & 0xff] ^
; 765  :             C6[(int)(state[2] >>  8) & 0xff] ^
; 766  :             C7[(int)(state[1]      ) & 0xff] ^
; 767  :             K[0];

  009f1	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  009f9	48 c1 e8 38	 shr	 rax, 56			; 00000038H
  009fd	48 63 d0	 movsxd	 rdx, eax
  00a00	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:C0
  00a07	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+56]
  00a0f	48 c1 e8 30	 shr	 rax, 48			; 00000030H
  00a13	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00a18	48 63 c8	 movsxd	 rcx, eax
  00a1b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C1
  00a22	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00a26	4d 8b 04 d0	 mov	 r8, QWORD PTR [r8+rdx*8]
  00a2a	4c 33 c0	 xor	 r8, rax
  00a2d	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+48]
  00a35	48 c1 e8 28	 shr	 rax, 40			; 00000028H
  00a39	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00a3e	48 63 c8	 movsxd	 rcx, eax
  00a41	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C2
  00a48	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00a4c	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+40]
  00a54	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00a58	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00a5d	48 63 c8	 movsxd	 rcx, eax
  00a60	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C3
  00a67	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00a6b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+32]
  00a73	48 c1 e8 18	 shr	 rax, 24
  00a77	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00a7c	48 63 c8	 movsxd	 rcx, eax
  00a7f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C4
  00a86	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00a8a	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+24]
  00a92	48 c1 e8 10	 shr	 rax, 16
  00a96	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00a9b	48 63 c8	 movsxd	 rcx, eax
  00a9e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C5
  00aa5	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00aa9	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+16]
  00ab1	48 c1 e8 08	 shr	 rax, 8
  00ab5	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00aba	48 63 c8	 movsxd	 rcx, eax
  00abd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C6
  00ac4	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00ac8	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR state$[rsp+8]
  00acf	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00ad4	48 63 d0	 movsxd	 rdx, eax
  00ad7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:C7
  00ade	49 8b c0	 mov	 rax, r8
  00ae1	48 33 04 d1	 xor	 rax, QWORD PTR [rcx+rdx*8]
  00ae5	48 33 44 24 10	 xor	 rax, QWORD PTR K$[rsp]
  00aea	48 89 44 24 60	 mov	 QWORD PTR L$[rsp], rax

; 768  :         L[1] =
; 769  :             C0[(int)(state[1] >> 56)       ] ^
; 770  :             C1[(int)(state[0] >> 48) & 0xff] ^
; 771  :             C2[(int)(state[7] >> 40) & 0xff] ^
; 772  :             C3[(int)(state[6] >> 32) & 0xff] ^
; 773  :             C4[(int)(state[5] >> 24) & 0xff] ^
; 774  :             C5[(int)(state[4] >> 16) & 0xff] ^
; 775  :             C6[(int)(state[3] >>  8) & 0xff] ^
; 776  :             C7[(int)(state[2]      ) & 0xff] ^
; 777  :             K[1];

  00aef	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+8]
  00af7	48 c1 e8 38	 shr	 rax, 56			; 00000038H
  00afb	48 63 d0	 movsxd	 rdx, eax
  00afe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:C0
  00b05	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00b0d	48 c1 e8 30	 shr	 rax, 48			; 00000030H
  00b11	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00b16	48 63 c8	 movsxd	 rcx, eax
  00b19	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C1
  00b20	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00b24	4d 8b 04 d0	 mov	 r8, QWORD PTR [r8+rdx*8]
  00b28	4c 33 c0	 xor	 r8, rax
  00b2b	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+56]
  00b33	48 c1 e8 28	 shr	 rax, 40			; 00000028H
  00b37	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00b3c	48 63 c8	 movsxd	 rcx, eax
  00b3f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C2
  00b46	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00b4a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+48]
  00b52	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00b56	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00b5b	48 63 c8	 movsxd	 rcx, eax
  00b5e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C3
  00b65	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00b69	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+40]
  00b71	48 c1 e8 18	 shr	 rax, 24
  00b75	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00b7a	48 63 c8	 movsxd	 rcx, eax
  00b7d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C4
  00b84	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00b88	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+32]
  00b90	48 c1 e8 10	 shr	 rax, 16
  00b94	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00b99	48 63 c8	 movsxd	 rcx, eax
  00b9c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C5
  00ba3	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00ba7	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+24]
  00baf	48 c1 e8 08	 shr	 rax, 8
  00bb3	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00bb8	48 63 c8	 movsxd	 rcx, eax
  00bbb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C6
  00bc2	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00bc6	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR state$[rsp+16]
  00bcd	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00bd2	48 63 d0	 movsxd	 rdx, eax
  00bd5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:C7
  00bdc	49 8b c0	 mov	 rax, r8
  00bdf	48 33 04 d1	 xor	 rax, QWORD PTR [rcx+rdx*8]
  00be3	48 33 44 24 18	 xor	 rax, QWORD PTR K$[rsp+8]
  00be8	48 89 44 24 68	 mov	 QWORD PTR L$[rsp+8], rax

; 778  :         L[2] =
; 779  :             C0[(int)(state[2] >> 56)       ] ^
; 780  :             C1[(int)(state[1] >> 48) & 0xff] ^
; 781  :             C2[(int)(state[0] >> 40) & 0xff] ^
; 782  :             C3[(int)(state[7] >> 32) & 0xff] ^
; 783  :             C4[(int)(state[6] >> 24) & 0xff] ^
; 784  :             C5[(int)(state[5] >> 16) & 0xff] ^
; 785  :             C6[(int)(state[4] >>  8) & 0xff] ^
; 786  :             C7[(int)(state[3]      ) & 0xff] ^
; 787  :             K[2];

  00bed	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+16]
  00bf5	48 c1 e8 38	 shr	 rax, 56			; 00000038H
  00bf9	48 63 d0	 movsxd	 rdx, eax
  00bfc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:C0
  00c03	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+8]
  00c0b	48 c1 e8 30	 shr	 rax, 48			; 00000030H
  00c0f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00c14	48 63 c8	 movsxd	 rcx, eax
  00c17	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C1
  00c1e	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00c22	4d 8b 04 d0	 mov	 r8, QWORD PTR [r8+rdx*8]
  00c26	4c 33 c0	 xor	 r8, rax
  00c29	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00c31	48 c1 e8 28	 shr	 rax, 40			; 00000028H
  00c35	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00c3a	48 63 c8	 movsxd	 rcx, eax
  00c3d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C2
  00c44	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00c48	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+56]
  00c50	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00c54	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00c59	48 63 c8	 movsxd	 rcx, eax
  00c5c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C3
  00c63	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00c67	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+48]
  00c6f	48 c1 e8 18	 shr	 rax, 24
  00c73	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00c78	48 63 c8	 movsxd	 rcx, eax
  00c7b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C4
  00c82	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00c86	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+40]
  00c8e	48 c1 e8 10	 shr	 rax, 16
  00c92	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00c97	48 63 c8	 movsxd	 rcx, eax
  00c9a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C5
  00ca1	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00ca5	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+32]
  00cad	48 c1 e8 08	 shr	 rax, 8
  00cb1	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00cb6	48 63 c8	 movsxd	 rcx, eax
  00cb9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C6
  00cc0	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00cc4	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR state$[rsp+24]
  00ccb	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00cd0	48 63 d0	 movsxd	 rdx, eax
  00cd3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:C7
  00cda	49 8b c0	 mov	 rax, r8
  00cdd	48 33 04 d1	 xor	 rax, QWORD PTR [rcx+rdx*8]
  00ce1	48 33 44 24 20	 xor	 rax, QWORD PTR K$[rsp+16]
  00ce6	48 89 44 24 70	 mov	 QWORD PTR L$[rsp+16], rax

; 788  :         L[3] =
; 789  :             C0[(int)(state[3] >> 56)       ] ^
; 790  :             C1[(int)(state[2] >> 48) & 0xff] ^
; 791  :             C2[(int)(state[1] >> 40) & 0xff] ^
; 792  :             C3[(int)(state[0] >> 32) & 0xff] ^
; 793  :             C4[(int)(state[7] >> 24) & 0xff] ^
; 794  :             C5[(int)(state[6] >> 16) & 0xff] ^
; 795  :             C6[(int)(state[5] >>  8) & 0xff] ^
; 796  :             C7[(int)(state[4]      ) & 0xff] ^
; 797  :             K[3];

  00ceb	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+24]
  00cf3	48 c1 e8 38	 shr	 rax, 56			; 00000038H
  00cf7	48 63 d0	 movsxd	 rdx, eax
  00cfa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:C0
  00d01	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+16]
  00d09	48 c1 e8 30	 shr	 rax, 48			; 00000030H
  00d0d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00d12	48 63 c8	 movsxd	 rcx, eax
  00d15	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C1
  00d1c	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00d20	4d 8b 04 d0	 mov	 r8, QWORD PTR [r8+rdx*8]
  00d24	4c 33 c0	 xor	 r8, rax
  00d27	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+8]
  00d2f	48 c1 e8 28	 shr	 rax, 40			; 00000028H
  00d33	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00d38	48 63 c8	 movsxd	 rcx, eax
  00d3b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C2
  00d42	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00d46	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00d4e	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00d52	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00d57	48 63 c8	 movsxd	 rcx, eax
  00d5a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C3
  00d61	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00d65	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+56]
  00d6d	48 c1 e8 18	 shr	 rax, 24
  00d71	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00d76	48 63 c8	 movsxd	 rcx, eax
  00d79	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C4
  00d80	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00d84	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+48]
  00d8c	48 c1 e8 10	 shr	 rax, 16
  00d90	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00d95	48 63 c8	 movsxd	 rcx, eax
  00d98	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C5
  00d9f	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00da3	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+40]
  00dab	48 c1 e8 08	 shr	 rax, 8
  00daf	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00db4	48 63 c8	 movsxd	 rcx, eax
  00db7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C6
  00dbe	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00dc2	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR state$[rsp+32]
  00dc9	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00dce	48 63 d0	 movsxd	 rdx, eax
  00dd1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:C7
  00dd8	49 8b c0	 mov	 rax, r8
  00ddb	48 33 04 d1	 xor	 rax, QWORD PTR [rcx+rdx*8]
  00ddf	48 33 44 24 28	 xor	 rax, QWORD PTR K$[rsp+24]
  00de4	48 89 44 24 78	 mov	 QWORD PTR L$[rsp+24], rax

; 798  :         L[4] =
; 799  :             C0[(int)(state[4] >> 56)       ] ^
; 800  :             C1[(int)(state[3] >> 48) & 0xff] ^
; 801  :             C2[(int)(state[2] >> 40) & 0xff] ^
; 802  :             C3[(int)(state[1] >> 32) & 0xff] ^
; 803  :             C4[(int)(state[0] >> 24) & 0xff] ^
; 804  :             C5[(int)(state[7] >> 16) & 0xff] ^
; 805  :             C6[(int)(state[6] >>  8) & 0xff] ^
; 806  :             C7[(int)(state[5]      ) & 0xff] ^
; 807  :             K[4];

  00de9	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+32]
  00df1	48 c1 e8 38	 shr	 rax, 56			; 00000038H
  00df5	48 63 d0	 movsxd	 rdx, eax
  00df8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:C0
  00dff	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+24]
  00e07	48 c1 e8 30	 shr	 rax, 48			; 00000030H
  00e0b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00e10	48 63 c8	 movsxd	 rcx, eax
  00e13	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C1
  00e1a	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00e1e	4d 8b 04 d0	 mov	 r8, QWORD PTR [r8+rdx*8]
  00e22	4c 33 c0	 xor	 r8, rax
  00e25	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+16]
  00e2d	48 c1 e8 28	 shr	 rax, 40			; 00000028H
  00e31	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00e36	48 63 c8	 movsxd	 rcx, eax
  00e39	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C2
  00e40	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00e44	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+8]
  00e4c	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00e50	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00e55	48 63 c8	 movsxd	 rcx, eax
  00e58	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C3
  00e5f	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00e63	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00e6b	48 c1 e8 18	 shr	 rax, 24
  00e6f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00e74	48 63 c8	 movsxd	 rcx, eax
  00e77	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C4
  00e7e	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00e82	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+56]
  00e8a	48 c1 e8 10	 shr	 rax, 16
  00e8e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00e93	48 63 c8	 movsxd	 rcx, eax
  00e96	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C5
  00e9d	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00ea1	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+48]
  00ea9	48 c1 e8 08	 shr	 rax, 8
  00ead	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00eb2	48 63 c8	 movsxd	 rcx, eax
  00eb5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C6
  00ebc	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00ec0	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR state$[rsp+40]
  00ec7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00ecc	48 63 d0	 movsxd	 rdx, eax
  00ecf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:C7
  00ed6	49 8b c0	 mov	 rax, r8
  00ed9	48 33 04 d1	 xor	 rax, QWORD PTR [rcx+rdx*8]
  00edd	48 33 44 24 30	 xor	 rax, QWORD PTR K$[rsp+32]
  00ee2	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR L$[rsp+32], rax

; 808  :         L[5] =
; 809  :             C0[(int)(state[5] >> 56)       ] ^
; 810  :             C1[(int)(state[4] >> 48) & 0xff] ^
; 811  :             C2[(int)(state[3] >> 40) & 0xff] ^
; 812  :             C3[(int)(state[2] >> 32) & 0xff] ^
; 813  :             C4[(int)(state[1] >> 24) & 0xff] ^
; 814  :             C5[(int)(state[0] >> 16) & 0xff] ^
; 815  :             C6[(int)(state[7] >>  8) & 0xff] ^
; 816  :             C7[(int)(state[6]      ) & 0xff] ^
; 817  :             K[5];

  00eea	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+40]
  00ef2	48 c1 e8 38	 shr	 rax, 56			; 00000038H
  00ef6	48 63 d0	 movsxd	 rdx, eax
  00ef9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:C0
  00f00	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+32]
  00f08	48 c1 e8 30	 shr	 rax, 48			; 00000030H
  00f0c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00f11	48 63 c8	 movsxd	 rcx, eax
  00f14	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C1
  00f1b	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00f1f	4d 8b 04 d0	 mov	 r8, QWORD PTR [r8+rdx*8]
  00f23	4c 33 c0	 xor	 r8, rax
  00f26	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+24]
  00f2e	48 c1 e8 28	 shr	 rax, 40			; 00000028H
  00f32	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00f37	48 63 c8	 movsxd	 rcx, eax
  00f3a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C2
  00f41	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00f45	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+16]
  00f4d	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00f51	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00f56	48 63 c8	 movsxd	 rcx, eax
  00f59	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C3
  00f60	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00f64	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+8]
  00f6c	48 c1 e8 18	 shr	 rax, 24
  00f70	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00f75	48 63 c8	 movsxd	 rcx, eax
  00f78	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C4
  00f7f	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00f83	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00f8b	48 c1 e8 10	 shr	 rax, 16
  00f8f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00f94	48 63 c8	 movsxd	 rcx, eax
  00f97	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C5
  00f9e	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00fa2	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+56]
  00faa	48 c1 e8 08	 shr	 rax, 8
  00fae	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00fb3	48 63 c8	 movsxd	 rcx, eax
  00fb6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C6
  00fbd	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  00fc1	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR state$[rsp+48]
  00fc8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00fcd	48 63 d0	 movsxd	 rdx, eax
  00fd0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:C7
  00fd7	49 8b c0	 mov	 rax, r8
  00fda	48 33 04 d1	 xor	 rax, QWORD PTR [rcx+rdx*8]
  00fde	48 33 44 24 38	 xor	 rax, QWORD PTR K$[rsp+40]
  00fe3	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR L$[rsp+40], rax

; 818  :         L[6] =
; 819  :             C0[(int)(state[6] >> 56)       ] ^
; 820  :             C1[(int)(state[5] >> 48) & 0xff] ^
; 821  :             C2[(int)(state[4] >> 40) & 0xff] ^
; 822  :             C3[(int)(state[3] >> 32) & 0xff] ^
; 823  :             C4[(int)(state[2] >> 24) & 0xff] ^
; 824  :             C5[(int)(state[1] >> 16) & 0xff] ^
; 825  :             C6[(int)(state[0] >>  8) & 0xff] ^
; 826  :             C7[(int)(state[7]      ) & 0xff] ^
; 827  :             K[6];

  00feb	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+48]
  00ff3	48 c1 e8 38	 shr	 rax, 56			; 00000038H
  00ff7	48 63 d0	 movsxd	 rdx, eax
  00ffa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:C0
  01001	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+40]
  01009	48 c1 e8 30	 shr	 rax, 48			; 00000030H
  0100d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01012	48 63 c8	 movsxd	 rcx, eax
  01015	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C1
  0101c	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  01020	4d 8b 04 d0	 mov	 r8, QWORD PTR [r8+rdx*8]
  01024	4c 33 c0	 xor	 r8, rax
  01027	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+32]
  0102f	48 c1 e8 28	 shr	 rax, 40			; 00000028H
  01033	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01038	48 63 c8	 movsxd	 rcx, eax
  0103b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C2
  01042	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  01046	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+24]
  0104e	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  01052	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01057	48 63 c8	 movsxd	 rcx, eax
  0105a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C3
  01061	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  01065	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+16]
  0106d	48 c1 e8 18	 shr	 rax, 24
  01071	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01076	48 63 c8	 movsxd	 rcx, eax
  01079	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C4
  01080	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  01084	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+8]
  0108c	48 c1 e8 10	 shr	 rax, 16
  01090	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01095	48 63 c8	 movsxd	 rcx, eax
  01098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C5
  0109f	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  010a3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  010ab	48 c1 e8 08	 shr	 rax, 8
  010af	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  010b4	48 63 c8	 movsxd	 rcx, eax
  010b7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C6
  010be	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  010c2	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR state$[rsp+56]
  010c9	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  010ce	48 63 d0	 movsxd	 rdx, eax
  010d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:C7
  010d8	49 8b c0	 mov	 rax, r8
  010db	48 33 04 d1	 xor	 rax, QWORD PTR [rcx+rdx*8]
  010df	48 33 44 24 40	 xor	 rax, QWORD PTR K$[rsp+48]
  010e4	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR L$[rsp+48], rax

; 828  :         L[7] =
; 829  :             C0[(int)(state[7] >> 56)       ] ^
; 830  :             C1[(int)(state[6] >> 48) & 0xff] ^
; 831  :             C2[(int)(state[5] >> 40) & 0xff] ^
; 832  :             C3[(int)(state[4] >> 32) & 0xff] ^
; 833  :             C4[(int)(state[3] >> 24) & 0xff] ^
; 834  :             C5[(int)(state[2] >> 16) & 0xff] ^
; 835  :             C6[(int)(state[1] >>  8) & 0xff] ^
; 836  :             C7[(int)(state[0]      ) & 0xff] ^
; 837  :             K[7];

  010ec	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+56]
  010f4	48 c1 e8 38	 shr	 rax, 56			; 00000038H
  010f8	48 63 d0	 movsxd	 rdx, eax
  010fb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:C0
  01102	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+48]
  0110a	48 c1 e8 30	 shr	 rax, 48			; 00000030H
  0110e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01113	48 63 c8	 movsxd	 rcx, eax
  01116	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C1
  0111d	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  01121	4d 8b 04 d0	 mov	 r8, QWORD PTR [r8+rdx*8]
  01125	4c 33 c0	 xor	 r8, rax
  01128	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+40]
  01130	48 c1 e8 28	 shr	 rax, 40			; 00000028H
  01134	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01139	48 63 c8	 movsxd	 rcx, eax
  0113c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C2
  01143	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  01147	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+32]
  0114f	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  01153	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01158	48 63 c8	 movsxd	 rcx, eax
  0115b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C3
  01162	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  01166	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+24]
  0116e	48 c1 e8 18	 shr	 rax, 24
  01172	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01177	48 63 c8	 movsxd	 rcx, eax
  0117a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C4
  01181	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  01185	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+16]
  0118d	48 c1 e8 10	 shr	 rax, 16
  01191	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01196	48 63 c8	 movsxd	 rcx, eax
  01199	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C5
  011a0	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  011a4	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+8]
  011ac	48 c1 e8 08	 shr	 rax, 8
  011b0	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  011b5	48 63 c8	 movsxd	 rcx, eax
  011b8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:C6
  011bf	4c 33 04 c8	 xor	 r8, QWORD PTR [rax+rcx*8]
  011c3	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR state$[rsp]
  011ca	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  011cf	48 63 d0	 movsxd	 rdx, eax
  011d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:C7
  011d9	49 8b c0	 mov	 rax, r8
  011dc	48 33 04 d1	 xor	 rax, QWORD PTR [rcx+rdx*8]
  011e0	48 33 44 24 48	 xor	 rax, QWORD PTR K$[rsp+56]
  011e5	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR L$[rsp+56], rax

; 838  :         state[0] = L[0];

  011ed	48 8b 44 24 60	 mov	 rax, QWORD PTR L$[rsp]
  011f2	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR state$[rsp], rax

; 839  :         state[1] = L[1];

  011fa	48 8b 44 24 68	 mov	 rax, QWORD PTR L$[rsp+8]
  011ff	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR state$[rsp+8], rax

; 840  :         state[2] = L[2];

  01207	48 8b 44 24 70	 mov	 rax, QWORD PTR L$[rsp+16]
  0120c	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR state$[rsp+16], rax

; 841  :         state[3] = L[3];

  01214	48 8b 44 24 78	 mov	 rax, QWORD PTR L$[rsp+24]
  01219	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR state$[rsp+24], rax

; 842  :         state[4] = L[4];

  01221	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR L$[rsp+32]
  01229	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR state$[rsp+32], rax

; 843  :         state[5] = L[5];

  01231	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR L$[rsp+40]
  01239	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR state$[rsp+40], rax

; 844  :         state[6] = L[6];

  01241	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR L$[rsp+48]
  01249	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR state$[rsp+48], rax

; 845  :         state[7] = L[7];

  01251	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR L$[rsp+56]
  01259	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR state$[rsp+56], rax

; 846  :     }

  01261	e9 f5 ef ff ff	 jmp	 $LN2@processBuf
$LN1@processBuf:

; 847  :     /*
; 848  :      * apply the Miyaguchi-Preneel compression function:
; 849  :      */
; 850  :     structpointer->hash[0] ^= state[0] ^ block[0];

  01266	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR block$[rsp]
  0126e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  01276	48 33 c1	 xor	 rax, rcx
  01279	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR structpointer$[rsp]
  01281	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  01285	48 33 c8	 xor	 rcx, rax
  01288	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR structpointer$[rsp]
  01290	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 851  :     structpointer->hash[1] ^= state[1] ^ block[1];

  01294	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR block$[rsp+8]
  0129c	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+8]
  012a4	48 33 c1	 xor	 rax, rcx
  012a7	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR structpointer$[rsp]
  012af	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  012b3	48 33 c8	 xor	 rcx, rax
  012b6	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR structpointer$[rsp]
  012be	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 852  :     structpointer->hash[2] ^= state[2] ^ block[2];

  012c2	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR block$[rsp+16]
  012ca	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+16]
  012d2	48 33 c1	 xor	 rax, rcx
  012d5	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR structpointer$[rsp]
  012dd	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  012e1	48 33 c8	 xor	 rcx, rax
  012e4	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR structpointer$[rsp]
  012ec	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 853  :     structpointer->hash[3] ^= state[3] ^ block[3];

  012f0	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR block$[rsp+24]
  012f8	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+24]
  01300	48 33 c1	 xor	 rax, rcx
  01303	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR structpointer$[rsp]
  0130b	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  01312	48 33 c8	 xor	 rcx, rax
  01315	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR structpointer$[rsp]
  0131d	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 854  :     structpointer->hash[4] ^= state[4] ^ block[4];

  01324	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR block$[rsp+32]
  0132c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+32]
  01334	48 33 c1	 xor	 rax, rcx
  01337	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR structpointer$[rsp]
  0133f	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  01346	48 33 c8	 xor	 rcx, rax
  01349	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR structpointer$[rsp]
  01351	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx

; 855  :     structpointer->hash[5] ^= state[5] ^ block[5];

  01358	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR block$[rsp+40]
  01360	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+40]
  01368	48 33 c1	 xor	 rax, rcx
  0136b	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR structpointer$[rsp]
  01373	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  0137a	48 33 c8	 xor	 rcx, rax
  0137d	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR structpointer$[rsp]
  01385	48 89 88 90 00
	00 00		 mov	 QWORD PTR [rax+144], rcx

; 856  :     structpointer->hash[6] ^= state[6] ^ block[6];

  0138c	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR block$[rsp+48]
  01394	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+48]
  0139c	48 33 c1	 xor	 rax, rcx
  0139f	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR structpointer$[rsp]
  013a7	48 8b 89 98 00
	00 00		 mov	 rcx, QWORD PTR [rcx+152]
  013ae	48 33 c8	 xor	 rcx, rax
  013b1	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR structpointer$[rsp]
  013b9	48 89 88 98 00
	00 00		 mov	 QWORD PTR [rax+152], rcx

; 857  :     structpointer->hash[7] ^= state[7] ^ block[7];

  013c0	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR block$[rsp+56]
  013c8	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR state$[rsp+56]
  013d0	48 33 c1	 xor	 rax, rcx
  013d3	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR structpointer$[rsp]
  013db	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  013e2	48 33 c8	 xor	 rcx, rax
  013e5	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR structpointer$[rsp]
  013ed	48 89 88 a0 00
	00 00		 mov	 QWORD PTR [rax+160], rcx

; 858  : }

  013f4	48 81 c4 28 01
	00 00		 add	 rsp, 296		; 00000128H
  013fb	c3		 ret	 0
processBuffer ENDP
PUBLIC	WHIRLPOOL_finalize
;	COMDAT pdata
pdata	SEGMENT
$pdata$WHIRLPOOL_finalize DD imagerel $LN9
	DD	imagerel $LN9+559
	DD	imagerel $unwind$WHIRLPOOL_finalize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$WHIRLPOOL_finalize DD 031001H
	DD	0700ca210H
	DD	0600bH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT WHIRLPOOL_finalize
_TEXT	SEGMENT
i$ = 32
digest$ = 40
bitLength$ = 48
bufferPos$ = 56
bufferBits$ = 60
buffer$ = 64
structpointer$ = 112
result$ = 120
WHIRLPOOL_finalize PROC					; COMDAT

; 1001 :                     unsigned char * const result) {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1002 :     int i;
; 1003 :     u8 *buffer      = structpointer->buffer;

  00010	48 8b 44 24 70	 mov	 rax, QWORD PTR structpointer$[rsp]
  00015	48 83 c0 20	 add	 rax, 32			; 00000020H
  00019	48 89 44 24 40	 mov	 QWORD PTR buffer$[rsp], rax

; 1004 :     u8 *bitLength   = structpointer->bitLength;

  0001e	48 8b 44 24 70	 mov	 rax, QWORD PTR structpointer$[rsp]
  00023	48 89 44 24 30	 mov	 QWORD PTR bitLength$[rsp], rax

; 1005 :     int bufferBits  = structpointer->bufferBits;

  00028	48 8b 44 24 70	 mov	 rax, QWORD PTR structpointer$[rsp]
  0002d	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00030	89 44 24 3c	 mov	 DWORD PTR bufferBits$[rsp], eax

; 1006 :     int bufferPos   = structpointer->bufferPos;

  00034	48 8b 44 24 70	 mov	 rax, QWORD PTR structpointer$[rsp]
  00039	8b 40 64	 mov	 eax, DWORD PTR [rax+100]
  0003c	89 44 24 38	 mov	 DWORD PTR bufferPos$[rsp], eax

; 1007 :     u8 *digest      = result;

  00040	48 8b 44 24 78	 mov	 rax, QWORD PTR result$[rsp]
  00045	48 89 44 24 28	 mov	 QWORD PTR digest$[rsp], rax

; 1008 : 
; 1009 :     /*
; 1010 :      * append a '1'-bit:
; 1011 :      */
; 1012 :     buffer[bufferPos] |= 0x80U >> (bufferBits & 7);

  0004a	48 63 54 24 38	 movsxd	 rdx, DWORD PTR bufferPos$[rsp]
  0004f	8b 4c 24 3c	 mov	 ecx, DWORD PTR bufferBits$[rsp]
  00053	83 e1 07	 and	 ecx, 7
  00056	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  0005b	d3 e8		 shr	 eax, cl
  0005d	8b c8		 mov	 ecx, eax
  0005f	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  00064	0f b6 14 10	 movzx	 edx, BYTE PTR [rax+rdx]
  00068	0b d1		 or	 edx, ecx
  0006a	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR bufferPos$[rsp]
  0006f	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  00074	88 14 08	 mov	 BYTE PTR [rax+rcx], dl

; 1013 :     bufferPos++; /* all remaining bits on the current u8 are set to zero. */

  00077	8b 44 24 38	 mov	 eax, DWORD PTR bufferPos$[rsp]
  0007b	83 c0 01	 add	 eax, 1
  0007e	89 44 24 38	 mov	 DWORD PTR bufferPos$[rsp], eax

; 1014 :     /*
; 1015 :      * pad with zero bits to complete (N*WBLOCKBITS - LENGTHBITS) bits:
; 1016 :      */
; 1017 :     if (bufferPos > WBLOCKBYTES - LENGTHBYTES) {

  00082	83 7c 24 38 20	 cmp	 DWORD PTR bufferPos$[rsp], 32 ; 00000020H
  00087	7e 36		 jle	 SHORT $LN6@WHIRLPOOL_@2

; 1018 :         if (bufferPos < WBLOCKBYTES) {

  00089	83 7c 24 38 40	 cmp	 DWORD PTR bufferPos$[rsp], 64 ; 00000040H
  0008e	7d 1d		 jge	 SHORT $LN5@WHIRLPOOL_@2

; 1019 :             memset(&buffer[bufferPos], 0, WBLOCKBYTES - bufferPos);

  00090	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00095	2b 44 24 38	 sub	 eax, DWORD PTR bufferPos$[rsp]
  00099	48 63 c8	 movsxd	 rcx, eax
  0009c	48 63 44 24 38	 movsxd	 rax, DWORD PTR bufferPos$[rsp]
  000a1	48 8b 7c 24 40	 mov	 rdi, QWORD PTR buffer$[rsp]
  000a6	48 03 f8	 add	 rdi, rax
  000a9	33 c0		 xor	 eax, eax
  000ab	f3 aa		 rep stosb
$LN5@WHIRLPOOL_@2:

; 1020 :         }
; 1021 :         /*
; 1022 :          * process data block:
; 1023 :          */
; 1024 :         processBuffer(structpointer);

  000ad	48 8b 4c 24 70	 mov	 rcx, QWORD PTR structpointer$[rsp]
  000b2	e8 00 00 00 00	 call	 processBuffer

; 1025 :         /*
; 1026 :          * reset buffer:
; 1027 :          */
; 1028 :         bufferPos = 0;

  000b7	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR bufferPos$[rsp], 0
$LN6@WHIRLPOOL_@2:

; 1029 :     }
; 1030 :     if (bufferPos < WBLOCKBYTES - LENGTHBYTES) {

  000bf	83 7c 24 38 20	 cmp	 DWORD PTR bufferPos$[rsp], 32 ; 00000020H
  000c4	7d 1d		 jge	 SHORT $LN4@WHIRLPOOL_@2

; 1031 :         memset(&buffer[bufferPos], 0, (WBLOCKBYTES - LENGTHBYTES) - bufferPos);

  000c6	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  000cb	2b 44 24 38	 sub	 eax, DWORD PTR bufferPos$[rsp]
  000cf	48 63 c8	 movsxd	 rcx, eax
  000d2	48 63 44 24 38	 movsxd	 rax, DWORD PTR bufferPos$[rsp]
  000d7	48 8b 7c 24 40	 mov	 rdi, QWORD PTR buffer$[rsp]
  000dc	48 03 f8	 add	 rdi, rax
  000df	33 c0		 xor	 eax, eax
  000e1	f3 aa		 rep stosb
$LN4@WHIRLPOOL_@2:

; 1032 :     }
; 1033 :     bufferPos = WBLOCKBYTES - LENGTHBYTES;

  000e3	c7 44 24 38 20
	00 00 00	 mov	 DWORD PTR bufferPos$[rsp], 32 ; 00000020H

; 1034 :     /*
; 1035 :      * append bit length of hashed data:
; 1036 :      */
; 1037 :     memcpy(&buffer[WBLOCKBYTES - LENGTHBYTES], bitLength, LENGTHBYTES);

  000eb	48 8b 7c 24 40	 mov	 rdi, QWORD PTR buffer$[rsp]
  000f0	48 83 c7 20	 add	 rdi, 32			; 00000020H
  000f4	48 8b 74 24 30	 mov	 rsi, QWORD PTR bitLength$[rsp]
  000f9	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000fe	f3 a4		 rep movsb

; 1038 :     /*
; 1039 :      * process data block:
; 1040 :      */
; 1041 :     processBuffer(structpointer);

  00100	48 8b 4c 24 70	 mov	 rcx, QWORD PTR structpointer$[rsp]
  00105	e8 00 00 00 00	 call	 processBuffer

; 1042 :     /*
; 1043 :      * return the completed message digest:
; 1044 :      */
; 1045 :     for (i = 0; i < DIGESTBYTES/8; i++) {

  0010a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00112	eb 0b		 jmp	 SHORT $LN3@WHIRLPOOL_@2
$LN2@WHIRLPOOL_@2:
  00114	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00118	83 c0 01	 add	 eax, 1
  0011b	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN3@WHIRLPOOL_@2:
  0011f	83 7c 24 20 08	 cmp	 DWORD PTR i$[rsp], 8
  00124	0f 8d e6 00 00
	00		 jge	 $LN1@WHIRLPOOL_@2

; 1046 :         digest[0] = (u8)(structpointer->hash[i] >> 56);

  0012a	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0012f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR structpointer$[rsp]
  00134	48 8b 4c c1 68	 mov	 rcx, QWORD PTR [rcx+rax*8+104]
  00139	48 c1 e9 38	 shr	 rcx, 56			; 00000038H
  0013d	48 8b 44 24 28	 mov	 rax, QWORD PTR digest$[rsp]
  00142	88 08		 mov	 BYTE PTR [rax], cl

; 1047 :         digest[1] = (u8)(structpointer->hash[i] >> 48);

  00144	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00149	48 8b 4c 24 70	 mov	 rcx, QWORD PTR structpointer$[rsp]
  0014e	48 8b 4c c1 68	 mov	 rcx, QWORD PTR [rcx+rax*8+104]
  00153	48 c1 e9 30	 shr	 rcx, 48			; 00000030H
  00157	48 8b 44 24 28	 mov	 rax, QWORD PTR digest$[rsp]
  0015c	88 48 01	 mov	 BYTE PTR [rax+1], cl

; 1048 :         digest[2] = (u8)(structpointer->hash[i] >> 40);

  0015f	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00164	48 8b 4c 24 70	 mov	 rcx, QWORD PTR structpointer$[rsp]
  00169	48 8b 4c c1 68	 mov	 rcx, QWORD PTR [rcx+rax*8+104]
  0016e	48 c1 e9 28	 shr	 rcx, 40			; 00000028H
  00172	48 8b 44 24 28	 mov	 rax, QWORD PTR digest$[rsp]
  00177	88 48 02	 mov	 BYTE PTR [rax+2], cl

; 1049 :         digest[3] = (u8)(structpointer->hash[i] >> 32);

  0017a	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0017f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR structpointer$[rsp]
  00184	48 8b 4c c1 68	 mov	 rcx, QWORD PTR [rcx+rax*8+104]
  00189	48 c1 e9 20	 shr	 rcx, 32			; 00000020H
  0018d	48 8b 44 24 28	 mov	 rax, QWORD PTR digest$[rsp]
  00192	88 48 03	 mov	 BYTE PTR [rax+3], cl

; 1050 :         digest[4] = (u8)(structpointer->hash[i] >> 24);

  00195	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0019a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR structpointer$[rsp]
  0019f	48 8b 4c c1 68	 mov	 rcx, QWORD PTR [rcx+rax*8+104]
  001a4	48 c1 e9 18	 shr	 rcx, 24
  001a8	48 8b 44 24 28	 mov	 rax, QWORD PTR digest$[rsp]
  001ad	88 48 04	 mov	 BYTE PTR [rax+4], cl

; 1051 :         digest[5] = (u8)(structpointer->hash[i] >> 16);

  001b0	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  001b5	48 8b 4c 24 70	 mov	 rcx, QWORD PTR structpointer$[rsp]
  001ba	48 8b 4c c1 68	 mov	 rcx, QWORD PTR [rcx+rax*8+104]
  001bf	48 c1 e9 10	 shr	 rcx, 16
  001c3	48 8b 44 24 28	 mov	 rax, QWORD PTR digest$[rsp]
  001c8	88 48 05	 mov	 BYTE PTR [rax+5], cl

; 1052 :         digest[6] = (u8)(structpointer->hash[i] >>  8);

  001cb	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  001d0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR structpointer$[rsp]
  001d5	48 8b 4c c1 68	 mov	 rcx, QWORD PTR [rcx+rax*8+104]
  001da	48 c1 e9 08	 shr	 rcx, 8
  001de	48 8b 44 24 28	 mov	 rax, QWORD PTR digest$[rsp]
  001e3	88 48 06	 mov	 BYTE PTR [rax+6], cl

; 1053 :         digest[7] = (u8)(structpointer->hash[i]      );

  001e6	48 63 54 24 20	 movsxd	 rdx, DWORD PTR i$[rsp]
  001eb	48 8b 4c 24 28	 mov	 rcx, QWORD PTR digest$[rsp]
  001f0	48 8b 44 24 70	 mov	 rax, QWORD PTR structpointer$[rsp]
  001f5	0f b6 44 d0 68	 movzx	 eax, BYTE PTR [rax+rdx*8+104]
  001fa	88 41 07	 mov	 BYTE PTR [rcx+7], al

; 1054 :         digest += 8;

  001fd	48 8b 44 24 28	 mov	 rax, QWORD PTR digest$[rsp]
  00202	48 83 c0 08	 add	 rax, 8
  00206	48 89 44 24 28	 mov	 QWORD PTR digest$[rsp], rax

; 1055 :     }

  0020b	e9 04 ff ff ff	 jmp	 $LN2@WHIRLPOOL_@2
$LN1@WHIRLPOOL_@2:

; 1056 :     structpointer->bufferBits   = bufferBits;

  00210	48 8b 4c 24 70	 mov	 rcx, QWORD PTR structpointer$[rsp]
  00215	8b 44 24 3c	 mov	 eax, DWORD PTR bufferBits$[rsp]
  00219	89 41 60	 mov	 DWORD PTR [rcx+96], eax

; 1057 :     structpointer->bufferPos    = bufferPos;

  0021c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR structpointer$[rsp]
  00221	8b 44 24 38	 mov	 eax, DWORD PTR bufferPos$[rsp]
  00225	89 41 64	 mov	 DWORD PTR [rcx+100], eax

; 1058 : }

  00228	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0022c	5f		 pop	 rdi
  0022d	5e		 pop	 rsi
  0022e	c3		 ret	 0
WHIRLPOOL_finalize ENDP
_TEXT	ENDS
PUBLIC	WHIRLPOOL_add
;	COMDAT pdata
pdata	SEGMENT
$pdata$WHIRLPOOL_add DD imagerel $LN15
	DD	imagerel $LN15+841
	DD	imagerel $unwind$WHIRLPOOL_add
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$WHIRLPOOL_add DD 011201H
	DD	0c212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT WHIRLPOOL_add
_TEXT	SEGMENT
sourceGap$ = 32
value$ = 40
i$ = 48
sourcePos$ = 52
bitLength$ = 56
bufferPos$ = 64
bufferBits$ = 68
carry$ = 72
b$ = 76
bufferRem$ = 80
buffer$ = 88
source$ = 112
sourceBits$ = 120
structpointer$ = 128
WHIRLPOOL_add PROC					; COMDAT

; 884  :                struct NESSIEstruct * const structpointer) {

$LN15:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 885  :     /*
; 886  :                        sourcePos
; 887  :                        |
; 888  :                        +-------+-------+-------
; 889  :                           ||||||||||||||||||||| source
; 890  :                        +-------+-------+-------
; 891  :     +-------+-------+-------+-------+-------+-------
; 892  :     ||||||||||||||||||||||                           buffer
; 893  :     +-------+-------+-------+-------+-------+-------
; 894  :                     |
; 895  :                     bufferPos
; 896  :     */
; 897  :     int sourcePos    = 0; /* index of leftmost source u8 containing data (1 to 8 bits). */

  00012	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR sourcePos$[rsp], 0

; 898  :     int sourceGap    = (8 - ((int)sourceBits & 7)) & 7; /* space on source[sourcePos]. */

  0001a	8b 4c 24 78	 mov	 ecx, DWORD PTR sourceBits$[rsp]
  0001e	83 e1 07	 and	 ecx, 7
  00021	b8 08 00 00 00	 mov	 eax, 8
  00026	2b c1		 sub	 eax, ecx
  00028	83 e0 07	 and	 eax, 7
  0002b	89 44 24 20	 mov	 DWORD PTR sourceGap$[rsp], eax

; 899  :     int bufferRem    = structpointer->bufferBits & 7; /* occupied bits on buffer[bufferPos]. */

  0002f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR structpointer$[rsp]
  00037	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  0003a	83 e0 07	 and	 eax, 7
  0003d	89 44 24 50	 mov	 DWORD PTR bufferRem$[rsp], eax

; 900  :     int i;
; 901  :     u32 b, carry;
; 902  :     u8 *buffer       = structpointer->buffer;

  00041	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR structpointer$[rsp]
  00049	48 83 c0 20	 add	 rax, 32			; 00000020H
  0004d	48 89 44 24 58	 mov	 QWORD PTR buffer$[rsp], rax

; 903  :     u8 *bitLength    = structpointer->bitLength;

  00052	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR structpointer$[rsp]
  0005a	48 89 44 24 38	 mov	 QWORD PTR bitLength$[rsp], rax

; 904  :     int bufferBits   = structpointer->bufferBits;

  0005f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR structpointer$[rsp]
  00067	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  0006a	89 44 24 44	 mov	 DWORD PTR bufferBits$[rsp], eax

; 905  :     int bufferPos    = structpointer->bufferPos;

  0006e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR structpointer$[rsp]
  00076	8b 40 64	 mov	 eax, DWORD PTR [rax+100]
  00079	89 44 24 40	 mov	 DWORD PTR bufferPos$[rsp], eax

; 906  : 
; 907  :     /*
; 908  :      * tally the length of the added data:
; 909  :      */
; 910  :     u64 value = sourceBits;

  0007d	8b 44 24 78	 mov	 eax, DWORD PTR sourceBits$[rsp]
  00081	48 89 44 24 28	 mov	 QWORD PTR value$[rsp], rax

; 911  :     for (i = 31, carry = 0; i >= 0 && (carry != 0 || value != LL(0)); i--) {

  00086	c7 44 24 30 1f
	00 00 00	 mov	 DWORD PTR i$[rsp], 31
  0008e	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR carry$[rsp], 0
  00096	eb 0b		 jmp	 SHORT $LN12@WHIRLPOOL_@3
$LN11@WHIRLPOOL_@3:
  00098	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0009c	83 e8 01	 sub	 eax, 1
  0009f	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN12@WHIRLPOOL_@3:
  000a3	83 7c 24 30 00	 cmp	 DWORD PTR i$[rsp], 0
  000a8	7c 5d		 jl	 SHORT $LN10@WHIRLPOOL_@3
  000aa	83 7c 24 48 00	 cmp	 DWORD PTR carry$[rsp], 0
  000af	75 08		 jne	 SHORT $LN9@WHIRLPOOL_@3
  000b1	48 83 7c 24 28
	00		 cmp	 QWORD PTR value$[rsp], 0
  000b7	74 4e		 je	 SHORT $LN10@WHIRLPOOL_@3
$LN9@WHIRLPOOL_@3:

; 912  :         carry += bitLength[i] + ((u32)value & 0xff);

  000b9	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  000be	48 8b 44 24 38	 mov	 rax, QWORD PTR bitLength$[rsp]
  000c3	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  000c7	8b 44 24 28	 mov	 eax, DWORD PTR value$[rsp]
  000cb	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000d0	03 44 24 48	 add	 eax, DWORD PTR carry$[rsp]
  000d4	03 c1		 add	 eax, ecx
  000d6	89 44 24 48	 mov	 DWORD PTR carry$[rsp], eax

; 913  :         bitLength[i] = (u8)carry;

  000da	48 63 54 24 30	 movsxd	 rdx, DWORD PTR i$[rsp]
  000df	48 8b 4c 24 38	 mov	 rcx, QWORD PTR bitLength$[rsp]
  000e4	0f b6 44 24 48	 movzx	 eax, BYTE PTR carry$[rsp]
  000e9	88 04 11	 mov	 BYTE PTR [rcx+rdx], al

; 914  :         carry >>= 8;

  000ec	8b 44 24 48	 mov	 eax, DWORD PTR carry$[rsp]
  000f0	c1 e8 08	 shr	 eax, 8
  000f3	89 44 24 48	 mov	 DWORD PTR carry$[rsp], eax

; 915  :         value >>= 8;

  000f7	48 8b 44 24 28	 mov	 rax, QWORD PTR value$[rsp]
  000fc	48 c1 e8 08	 shr	 rax, 8
  00100	48 89 44 24 28	 mov	 QWORD PTR value$[rsp], rax

; 916  :     }

  00105	eb 91		 jmp	 SHORT $LN11@WHIRLPOOL_@3
$LN10@WHIRLPOOL_@3:
$LN8@WHIRLPOOL_@3:

; 917  :     /*
; 918  :      * process data in chunks of 8 bits (a more efficient approach would be to take whole-word chunks):
; 919  :      */
; 920  :     while (sourceBits > 8) {

  00107	83 7c 24 78 08	 cmp	 DWORD PTR sourceBits$[rsp], 8
  0010c	0f 86 0e 01 00
	00		 jbe	 $LN7@WHIRLPOOL_@3

; 921  :         /* N.B. at least source[sourcePos] and source[sourcePos+1] contain data. */
; 922  :         /*
; 923  :          * take a byte from the source:
; 924  :          */
; 925  :         b = ((source[sourcePos] << sourceGap) & 0xff) |
; 926  :             ((source[sourcePos + 1] & 0xff) >> (8 - sourceGap));

  00112	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR sourcePos$[rsp]
  00117	48 8b 44 24 70	 mov	 rax, QWORD PTR source$[rsp]
  0011c	44 0f b6 04 08	 movzx	 r8d, BYTE PTR [rax+rcx]
  00121	8b 44 24 20	 mov	 eax, DWORD PTR sourceGap$[rsp]
  00125	0f b6 c8	 movzx	 ecx, al
  00128	41 d3 e0	 shl	 r8d, cl
  0012b	41 81 e0 ff 00
	00 00		 and	 r8d, 255		; 000000ffH
  00132	8b 44 24 34	 mov	 eax, DWORD PTR sourcePos$[rsp]
  00136	83 c0 01	 add	 eax, 1
  00139	48 63 c8	 movsxd	 rcx, eax
  0013c	48 8b 44 24 70	 mov	 rax, QWORD PTR source$[rsp]
  00141	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  00145	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0014b	b8 08 00 00 00	 mov	 eax, 8
  00150	2b 44 24 20	 sub	 eax, DWORD PTR sourceGap$[rsp]
  00154	0f b6 c8	 movzx	 ecx, al
  00157	8b c2		 mov	 eax, edx
  00159	d3 f8		 sar	 eax, cl
  0015b	8b c8		 mov	 ecx, eax
  0015d	41 8b c0	 mov	 eax, r8d
  00160	0b c1		 or	 eax, ecx
  00162	89 44 24 4c	 mov	 DWORD PTR b$[rsp], eax

; 927  :         /*
; 928  :          * process this byte:
; 929  :          */
; 930  :         buffer[bufferPos++] |= (u8)(b >> bufferRem);

  00166	48 63 54 24 40	 movsxd	 rdx, DWORD PTR bufferPos$[rsp]
  0016b	8b 44 24 50	 mov	 eax, DWORD PTR bufferRem$[rsp]
  0016f	0f b6 c8	 movzx	 ecx, al
  00172	8b 44 24 4c	 mov	 eax, DWORD PTR b$[rsp]
  00176	d3 e8		 shr	 eax, cl
  00178	0f b6 c8	 movzx	 ecx, al
  0017b	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  00180	0f b6 14 10	 movzx	 edx, BYTE PTR [rax+rdx]
  00184	0b d1		 or	 edx, ecx
  00186	48 63 4c 24 40	 movsxd	 rcx, DWORD PTR bufferPos$[rsp]
  0018b	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  00190	88 14 08	 mov	 BYTE PTR [rax+rcx], dl
  00193	8b 44 24 40	 mov	 eax, DWORD PTR bufferPos$[rsp]
  00197	83 c0 01	 add	 eax, 1
  0019a	89 44 24 40	 mov	 DWORD PTR bufferPos$[rsp], eax

; 931  :         bufferBits += 8 - bufferRem; /* bufferBits = 8*bufferPos; */

  0019e	b9 08 00 00 00	 mov	 ecx, 8
  001a3	2b 4c 24 50	 sub	 ecx, DWORD PTR bufferRem$[rsp]
  001a7	8b 44 24 44	 mov	 eax, DWORD PTR bufferBits$[rsp]
  001ab	03 c1		 add	 eax, ecx
  001ad	89 44 24 44	 mov	 DWORD PTR bufferBits$[rsp], eax

; 932  :         if (bufferBits == DIGESTBITS) {

  001b1	81 7c 24 44 00
	02 00 00	 cmp	 DWORD PTR bufferBits$[rsp], 512 ; 00000200H
  001b9	75 1d		 jne	 SHORT $LN6@WHIRLPOOL_@3

; 933  :             /*
; 934  :              * process data block:
; 935  :              */
; 936  :             processBuffer(structpointer);

  001bb	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR structpointer$[rsp]
  001c3	e8 00 00 00 00	 call	 processBuffer

; 937  :             /*
; 938  :              * reset buffer:
; 939  :              */
; 940  :             bufferBits = bufferPos = 0;

  001c8	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR bufferPos$[rsp], 0
  001d0	8b 44 24 40	 mov	 eax, DWORD PTR bufferPos$[rsp]
  001d4	89 44 24 44	 mov	 DWORD PTR bufferBits$[rsp], eax
$LN6@WHIRLPOOL_@3:

; 941  :         }
; 942  :         buffer[bufferPos] = (u8) (b << (8 - bufferRem));

  001d8	b8 08 00 00 00	 mov	 eax, 8
  001dd	2b 44 24 50	 sub	 eax, DWORD PTR bufferRem$[rsp]
  001e1	0f b6 c8	 movzx	 ecx, al
  001e4	8b 54 24 4c	 mov	 edx, DWORD PTR b$[rsp]
  001e8	d3 e2		 shl	 edx, cl
  001ea	48 63 4c 24 40	 movsxd	 rcx, DWORD PTR bufferPos$[rsp]
  001ef	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  001f4	88 14 08	 mov	 BYTE PTR [rax+rcx], dl

; 943  :         bufferBits += bufferRem;

  001f7	8b 4c 24 50	 mov	 ecx, DWORD PTR bufferRem$[rsp]
  001fb	8b 44 24 44	 mov	 eax, DWORD PTR bufferBits$[rsp]
  001ff	03 c1		 add	 eax, ecx
  00201	89 44 24 44	 mov	 DWORD PTR bufferBits$[rsp], eax

; 944  :         /*
; 945  :          * proceed to remaining data:
; 946  :          */
; 947  :         sourceBits -= 8;

  00205	8b 44 24 78	 mov	 eax, DWORD PTR sourceBits$[rsp]
  00209	83 e8 08	 sub	 eax, 8
  0020c	89 44 24 78	 mov	 DWORD PTR sourceBits$[rsp], eax

; 948  :         sourcePos++;

  00210	8b 44 24 34	 mov	 eax, DWORD PTR sourcePos$[rsp]
  00214	83 c0 01	 add	 eax, 1
  00217	89 44 24 34	 mov	 DWORD PTR sourcePos$[rsp], eax

; 949  :     }

  0021b	e9 e7 fe ff ff	 jmp	 $LN8@WHIRLPOOL_@3
$LN7@WHIRLPOOL_@3:

; 950  :     /* now 0 <= sourceBits <= 8;
; 951  :      * furthermore, all data (if any is left) is in source[sourcePos].
; 952  :      */
; 953  :     if (sourceBits > 0) {

  00220	83 7c 24 78 00	 cmp	 DWORD PTR sourceBits$[rsp], 0
  00225	76 50		 jbe	 SHORT $LN5@WHIRLPOOL_@3

; 954  :         b = (source[sourcePos] << sourceGap) & 0xff; /* bits are left-justified on b. */

  00227	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR sourcePos$[rsp]
  0022c	48 8b 44 24 70	 mov	 rax, QWORD PTR source$[rsp]
  00231	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  00235	8b 44 24 20	 mov	 eax, DWORD PTR sourceGap$[rsp]
  00239	0f b6 c8	 movzx	 ecx, al
  0023c	8b c2		 mov	 eax, edx
  0023e	d3 e0		 shl	 eax, cl
  00240	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00245	89 44 24 4c	 mov	 DWORD PTR b$[rsp], eax

; 955  :         /*
; 956  :          * process the remaining bits:
; 957  :          */
; 958  :         buffer[bufferPos] |= b >> bufferRem;

  00249	48 63 54 24 40	 movsxd	 rdx, DWORD PTR bufferPos$[rsp]
  0024e	8b 44 24 50	 mov	 eax, DWORD PTR bufferRem$[rsp]
  00252	0f b6 c8	 movzx	 ecx, al
  00255	8b 44 24 4c	 mov	 eax, DWORD PTR b$[rsp]
  00259	d3 e8		 shr	 eax, cl
  0025b	8b c8		 mov	 ecx, eax
  0025d	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  00262	0f b6 14 10	 movzx	 edx, BYTE PTR [rax+rdx]
  00266	0b d1		 or	 edx, ecx
  00268	48 63 4c 24 40	 movsxd	 rcx, DWORD PTR bufferPos$[rsp]
  0026d	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  00272	88 14 08	 mov	 BYTE PTR [rax+rcx], dl

; 959  :     } else {

  00275	eb 08		 jmp	 SHORT $LN4@WHIRLPOOL_@3
$LN5@WHIRLPOOL_@3:

; 960  :         b = 0;

  00277	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR b$[rsp], 0
$LN4@WHIRLPOOL_@3:

; 961  :     }
; 962  :     if (bufferRem + sourceBits < 8) {

  0027f	8b 4c 24 78	 mov	 ecx, DWORD PTR sourceBits$[rsp]
  00283	8b 44 24 50	 mov	 eax, DWORD PTR bufferRem$[rsp]
  00287	03 c1		 add	 eax, ecx
  00289	83 f8 08	 cmp	 eax, 8
  0028c	73 13		 jae	 SHORT $LN3@WHIRLPOOL_@3

; 963  :         /*
; 964  :          * all remaining data fits on buffer[bufferPos],
; 965  :          * and there still remains some space.
; 966  :          */
; 967  :         bufferBits += sourceBits;

  0028e	8b 4c 24 78	 mov	 ecx, DWORD PTR sourceBits$[rsp]
  00292	8b 44 24 44	 mov	 eax, DWORD PTR bufferBits$[rsp]
  00296	03 c1		 add	 eax, ecx
  00298	89 44 24 44	 mov	 DWORD PTR bufferBits$[rsp], eax

; 968  :     } else {

  0029c	e9 85 00 00 00	 jmp	 $LN2@WHIRLPOOL_@3
$LN3@WHIRLPOOL_@3:

; 969  :         /*
; 970  :          * buffer[bufferPos] is full:
; 971  :          */
; 972  :         bufferPos++;

  002a1	8b 44 24 40	 mov	 eax, DWORD PTR bufferPos$[rsp]
  002a5	83 c0 01	 add	 eax, 1
  002a8	89 44 24 40	 mov	 DWORD PTR bufferPos$[rsp], eax

; 973  :         bufferBits += 8 - bufferRem; /* bufferBits = 8*bufferPos; */

  002ac	b9 08 00 00 00	 mov	 ecx, 8
  002b1	2b 4c 24 50	 sub	 ecx, DWORD PTR bufferRem$[rsp]
  002b5	8b 44 24 44	 mov	 eax, DWORD PTR bufferBits$[rsp]
  002b9	03 c1		 add	 eax, ecx
  002bb	89 44 24 44	 mov	 DWORD PTR bufferBits$[rsp], eax

; 974  :         sourceBits -= 8 - bufferRem;

  002bf	b9 08 00 00 00	 mov	 ecx, 8
  002c4	2b 4c 24 50	 sub	 ecx, DWORD PTR bufferRem$[rsp]
  002c8	8b 44 24 78	 mov	 eax, DWORD PTR sourceBits$[rsp]
  002cc	2b c1		 sub	 eax, ecx
  002ce	89 44 24 78	 mov	 DWORD PTR sourceBits$[rsp], eax

; 975  :         /* now 0 <= sourceBits < 8;
; 976  :          * furthermore, all data (if any is left) is in source[sourcePos].
; 977  :          */
; 978  :         if (bufferBits == DIGESTBITS) {

  002d2	81 7c 24 44 00
	02 00 00	 cmp	 DWORD PTR bufferBits$[rsp], 512 ; 00000200H
  002da	75 1d		 jne	 SHORT $LN1@WHIRLPOOL_@3

; 979  :             /*
; 980  :              * process data block:
; 981  :              */
; 982  :             processBuffer(structpointer);

  002dc	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR structpointer$[rsp]
  002e4	e8 00 00 00 00	 call	 processBuffer

; 983  :             /*
; 984  :              * reset buffer:
; 985  :              */
; 986  :             bufferBits = bufferPos = 0;

  002e9	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR bufferPos$[rsp], 0
  002f1	8b 44 24 40	 mov	 eax, DWORD PTR bufferPos$[rsp]
  002f5	89 44 24 44	 mov	 DWORD PTR bufferBits$[rsp], eax
$LN1@WHIRLPOOL_@3:

; 987  :         }
; 988  :         buffer[bufferPos] = (u8) (b << (8 - bufferRem));

  002f9	b8 08 00 00 00	 mov	 eax, 8
  002fe	2b 44 24 50	 sub	 eax, DWORD PTR bufferRem$[rsp]
  00302	0f b6 c8	 movzx	 ecx, al
  00305	8b 54 24 4c	 mov	 edx, DWORD PTR b$[rsp]
  00309	d3 e2		 shl	 edx, cl
  0030b	48 63 4c 24 40	 movsxd	 rcx, DWORD PTR bufferPos$[rsp]
  00310	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  00315	88 14 08	 mov	 BYTE PTR [rax+rcx], dl

; 989  :         bufferBits += (int)sourceBits;

  00318	8b 4c 24 78	 mov	 ecx, DWORD PTR sourceBits$[rsp]
  0031c	8b 44 24 44	 mov	 eax, DWORD PTR bufferBits$[rsp]
  00320	03 c1		 add	 eax, ecx
  00322	89 44 24 44	 mov	 DWORD PTR bufferBits$[rsp], eax
$LN2@WHIRLPOOL_@3:

; 990  :     }
; 991  :     structpointer->bufferBits   = bufferBits;

  00326	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR structpointer$[rsp]
  0032e	8b 44 24 44	 mov	 eax, DWORD PTR bufferBits$[rsp]
  00332	89 41 60	 mov	 DWORD PTR [rcx+96], eax

; 992  :     structpointer->bufferPos    = bufferPos;

  00335	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR structpointer$[rsp]
  0033d	8b 44 24 40	 mov	 eax, DWORD PTR bufferPos$[rsp]
  00341	89 41 64	 mov	 DWORD PTR [rcx+100], eax

; 993  : }

  00344	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00348	c3		 ret	 0
WHIRLPOOL_add ENDP
END
