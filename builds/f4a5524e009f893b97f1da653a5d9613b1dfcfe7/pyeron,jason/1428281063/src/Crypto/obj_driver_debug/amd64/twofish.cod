; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

qt_gen	DD	01H DUP (?)
mt_gen	DD	01H DUP (?)
tab_5b	DB	00H
	DB	05aH
	DB	0b4H
	DB	0eeH
tab_ef	DB	00H
	DB	0eeH
	DB	0b4H
	DB	05aH
ror4	DB	00H
	DB	08H
	DB	01H
	DB	09H
	DB	02H
	DB	0aH
	DB	03H
	DB	0bH
	DB	04H
	DB	0cH
	DB	05H
	DB	0dH
	DB	06H
	DB	0eH
	DB	07H
	DB	0fH
ashx	DB	00H
	DB	09H
	DB	02H
	DB	0bH
	DB	04H
	DB	0dH
	DB	06H
	DB	0fH
	DB	08H
	DB	01H
	DB	0aH
	DB	03H
	DB	0cH
	DB	05H
	DB	0eH
	DB	07H
qt0	DB	08H
	DB	01H
	DB	07H
	DB	0dH
	DB	06H
	DB	0fH
	DB	03H
	DB	02H
	DB	00H
	DB	0bH
	DB	05H
	DB	09H
	DB	0eH
	DB	0cH
	DB	0aH
	DB	04H
	DB	02H
	DB	08H
	DB	0bH
	DB	0dH
	DB	0fH
	DB	07H
	DB	06H
	DB	0eH
	DB	03H
	DB	01H
	DB	09H
	DB	04H
	DB	00H
	DB	0aH
	DB	0cH
	DB	05H
qt1	DB	0eH
	DB	0cH
	DB	0bH
	DB	08H
	DB	01H
	DB	02H
	DB	03H
	DB	05H
	DB	0fH
	DB	04H
	DB	0aH
	DB	06H
	DB	07H
	DB	00H
	DB	09H
	DB	0dH
	DB	01H
	DB	0eH
	DB	02H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	07H
	DB	06H
	DB	0dH
	DB	0aH
	DB	05H
	DB	0fH
	DB	09H
	DB	00H
	DB	08H
qt2	DB	0bH
	DB	0aH
	DB	05H
	DB	0eH
	DB	06H
	DB	0dH
	DB	09H
	DB	00H
	DB	0cH
	DB	08H
	DB	0fH
	DB	03H
	DB	02H
	DB	04H
	DB	07H
	DB	01H
	DB	04H
	DB	0cH
	DB	07H
	DB	05H
	DB	01H
	DB	06H
	DB	09H
	DB	0aH
	DB	00H
	DB	0eH
	DB	0dH
	DB	08H
	DB	02H
	DB	0bH
	DB	03H
	DB	0fH
qt3	DB	0dH
	DB	07H
	DB	0fH
	DB	04H
	DB	01H
	DB	02H
	DB	06H
	DB	0eH
	DB	09H
	DB	0bH
	DB	03H
	DB	00H
	DB	08H
	DB	05H
	DB	0cH
	DB	0aH
	DB	0bH
	DB	09H
	DB	05H
	DB	01H
	DB	0cH
	DB	03H
	DB	0dH
	DB	0eH
	DB	06H
	DB	04H
	DB	07H
	DB	0fH
	DB	02H
	DB	00H
	DB	08H
	DB	0aH
PUBLIC	twofish_decrypt
;	COMDAT pdata
; File c:\home\public\desktop\projects\ciphershed.build\src\crypto\twofish.c
pdata	SEGMENT
$pdata$twofish_decrypt DD imagerel $LN3
	DD	imagerel $LN3+4885
	DD	imagerel $unwind$twofish_decrypt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$twofish_decrypt DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT twofish_decrypt
_TEXT	SEGMENT
blk$ = 0
mk_tab$ = 16
l_key$ = 24
t1$ = 32
t0$ = 36
instance$ = 64
in_blk$ = 72
out_blk$ = 80
twofish_decrypt PROC					; COMDAT

; 497  : {   u4byte  t0, t1, blk[4];

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 498  : 
; 499  : 	u4byte *l_key = instance->l_key;

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR instance$[rsp]
  00018	48 89 44 24 18	 mov	 QWORD PTR l_key$[rsp], rax

; 500  : 	u4byte *mk_tab = instance->mk_tab;

  0001d	48 8b 44 24 40	 mov	 rax, QWORD PTR instance$[rsp]
  00022	48 05 b0 00 00
	00		 add	 rax, 176		; 000000b0H
  00028	48 89 44 24 10	 mov	 QWORD PTR mk_tab$[rsp], rax

; 501  : 
; 502  :     blk[0] = LE32(in_blk[0]) ^ l_key[4];

  0002d	48 8b 54 24 48	 mov	 rdx, QWORD PTR in_blk$[rsp]
  00032	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00037	8b 48 10	 mov	 ecx, DWORD PTR [rax+16]
  0003a	8b 02		 mov	 eax, DWORD PTR [rdx]
  0003c	33 c1		 xor	 eax, ecx
  0003e	89 04 24	 mov	 DWORD PTR blk$[rsp], eax

; 503  :     blk[1] = LE32(in_blk[1]) ^ l_key[5];

  00041	48 8b 54 24 48	 mov	 rdx, QWORD PTR in_blk$[rsp]
  00046	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  0004b	8b 48 14	 mov	 ecx, DWORD PTR [rax+20]
  0004e	8b 42 04	 mov	 eax, DWORD PTR [rdx+4]
  00051	33 c1		 xor	 eax, ecx
  00053	89 44 24 04	 mov	 DWORD PTR blk$[rsp+4], eax

; 504  :     blk[2] = LE32(in_blk[2]) ^ l_key[6];

  00057	48 8b 54 24 48	 mov	 rdx, QWORD PTR in_blk$[rsp]
  0005c	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00061	8b 48 18	 mov	 ecx, DWORD PTR [rax+24]
  00064	8b 42 08	 mov	 eax, DWORD PTR [rdx+8]
  00067	33 c1		 xor	 eax, ecx
  00069	89 44 24 08	 mov	 DWORD PTR blk$[rsp+8], eax

; 505  :     blk[3] = LE32(in_blk[3]) ^ l_key[7];

  0006d	48 8b 54 24 48	 mov	 rdx, QWORD PTR in_blk$[rsp]
  00072	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00077	8b 48 1c	 mov	 ecx, DWORD PTR [rax+28]
  0007a	8b 42 0c	 mov	 eax, DWORD PTR [rdx+12]
  0007d	33 c1		 xor	 eax, ecx
  0007f	89 44 24 0c	 mov	 DWORD PTR blk$[rsp+12], eax

; 506  : 
; 507  :     i_rnd(7); i_rnd(6); i_rnd(5); i_rnd(4);

  00083	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00087	c1 e8 18	 shr	 eax, 24
  0008a	0f b6 c0	 movzx	 eax, al
  0008d	c1 e0 02	 shl	 eax, 2
  00090	4c 63 c0	 movsxd	 r8, eax
  00093	0f b6 44 24 04	 movzx	 eax, BYTE PTR blk$[rsp+4]
  00098	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  0009f	48 63 d0	 movsxd	 rdx, eax
  000a2	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  000a7	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  000ac	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  000af	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  000b3	44 33 c0	 xor	 r8d, eax
  000b6	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  000ba	c1 e8 08	 shr	 eax, 8
  000bd	0f b6 c0	 movzx	 eax, al
  000c0	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  000c7	48 63 c8	 movsxd	 rcx, eax
  000ca	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  000cf	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  000d3	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  000d7	c1 e8 10	 shr	 eax, 16
  000da	0f b6 c0	 movzx	 eax, al
  000dd	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  000e4	48 63 d0	 movsxd	 rdx, eax
  000e7	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  000ec	41 8b c0	 mov	 eax, r8d
  000ef	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  000f2	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  000f6	0f b6 04 24	 movzx	 eax, BYTE PTR blk$[rsp]
  000fa	c1 e0 02	 shl	 eax, 2
  000fd	4c 63 c0	 movsxd	 r8, eax
  00100	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00103	c1 e8 08	 shr	 eax, 8
  00106	0f b6 c0	 movzx	 eax, al
  00109	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00110	48 63 d0	 movsxd	 rdx, eax
  00113	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00118	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  0011d	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00120	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00124	44 33 c0	 xor	 r8d, eax
  00127	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  0012a	c1 e8 10	 shr	 eax, 16
  0012d	0f b6 c0	 movzx	 eax, al
  00130	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00137	48 63 c8	 movsxd	 rcx, eax
  0013a	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  0013f	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00143	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00146	c1 e8 18	 shr	 eax, 24
  00149	0f b6 c0	 movzx	 eax, al
  0014c	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00153	48 63 d0	 movsxd	 rdx, eax
  00156	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0015b	41 8b c0	 mov	 eax, r8d
  0015e	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00161	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  00165	8b 54 24 08	 mov	 edx, DWORD PTR blk$[rsp+8]
  00169	d1 c2		 rol	 edx, 1
  0016b	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  0016f	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00173	03 c8		 add	 ecx, eax
  00175	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  0017a	03 88 98 00 00
	00		 add	 ecx, DWORD PTR [rax+152]
  00180	8b c2		 mov	 eax, edx
  00182	33 c1		 xor	 eax, ecx
  00184	89 44 24 08	 mov	 DWORD PTR blk$[rsp+8], eax
  00188	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  0018c	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00190	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  00193	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00198	03 88 9c 00 00
	00		 add	 ecx, DWORD PTR [rax+156]
  0019e	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  001a2	33 c1		 xor	 eax, ecx
  001a4	d1 c8		 ror	 eax, 1
  001a6	89 44 24 0c	 mov	 DWORD PTR blk$[rsp+12], eax
  001aa	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  001ae	c1 e8 18	 shr	 eax, 24
  001b1	0f b6 c0	 movzx	 eax, al
  001b4	c1 e0 02	 shl	 eax, 2
  001b7	4c 63 c0	 movsxd	 r8, eax
  001ba	0f b6 44 24 0c	 movzx	 eax, BYTE PTR blk$[rsp+12]
  001bf	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  001c6	48 63 d0	 movsxd	 rdx, eax
  001c9	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  001ce	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  001d3	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  001d6	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  001da	44 33 c0	 xor	 r8d, eax
  001dd	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  001e1	c1 e8 08	 shr	 eax, 8
  001e4	0f b6 c0	 movzx	 eax, al
  001e7	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  001ee	48 63 c8	 movsxd	 rcx, eax
  001f1	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  001f6	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  001fa	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  001fe	c1 e8 10	 shr	 eax, 16
  00201	0f b6 c0	 movzx	 eax, al
  00204	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  0020b	48 63 d0	 movsxd	 rdx, eax
  0020e	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00213	41 8b c0	 mov	 eax, r8d
  00216	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00219	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  0021d	0f b6 44 24 08	 movzx	 eax, BYTE PTR blk$[rsp+8]
  00222	c1 e0 02	 shl	 eax, 2
  00225	4c 63 c0	 movsxd	 r8, eax
  00228	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  0022c	c1 e8 08	 shr	 eax, 8
  0022f	0f b6 c0	 movzx	 eax, al
  00232	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00239	48 63 d0	 movsxd	 rdx, eax
  0023c	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00241	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00246	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00249	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  0024d	44 33 c0	 xor	 r8d, eax
  00250	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00254	c1 e8 10	 shr	 eax, 16
  00257	0f b6 c0	 movzx	 eax, al
  0025a	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00261	48 63 c8	 movsxd	 rcx, eax
  00264	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00269	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  0026d	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00271	c1 e8 18	 shr	 eax, 24
  00274	0f b6 c0	 movzx	 eax, al
  00277	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  0027e	48 63 d0	 movsxd	 rdx, eax
  00281	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00286	41 8b c0	 mov	 eax, r8d
  00289	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  0028c	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  00290	8b 14 24	 mov	 edx, DWORD PTR blk$[rsp]
  00293	d1 c2		 rol	 edx, 1
  00295	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00299	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  0029d	03 c8		 add	 ecx, eax
  0029f	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  002a4	03 88 90 00 00
	00		 add	 ecx, DWORD PTR [rax+144]
  002aa	8b c2		 mov	 eax, edx
  002ac	33 c1		 xor	 eax, ecx
  002ae	89 04 24	 mov	 DWORD PTR blk$[rsp], eax
  002b1	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  002b5	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  002b9	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  002bc	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  002c1	03 88 94 00 00
	00		 add	 ecx, DWORD PTR [rax+148]
  002c7	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  002cb	33 c1		 xor	 eax, ecx
  002cd	d1 c8		 ror	 eax, 1
  002cf	89 44 24 04	 mov	 DWORD PTR blk$[rsp+4], eax
  002d3	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  002d7	c1 e8 18	 shr	 eax, 24
  002da	0f b6 c0	 movzx	 eax, al
  002dd	c1 e0 02	 shl	 eax, 2
  002e0	4c 63 c0	 movsxd	 r8, eax
  002e3	0f b6 44 24 04	 movzx	 eax, BYTE PTR blk$[rsp+4]
  002e8	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  002ef	48 63 d0	 movsxd	 rdx, eax
  002f2	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  002f7	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  002fc	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  002ff	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00303	44 33 c0	 xor	 r8d, eax
  00306	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  0030a	c1 e8 08	 shr	 eax, 8
  0030d	0f b6 c0	 movzx	 eax, al
  00310	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00317	48 63 c8	 movsxd	 rcx, eax
  0031a	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  0031f	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00323	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00327	c1 e8 10	 shr	 eax, 16
  0032a	0f b6 c0	 movzx	 eax, al
  0032d	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00334	48 63 d0	 movsxd	 rdx, eax
  00337	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0033c	41 8b c0	 mov	 eax, r8d
  0033f	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00342	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  00346	0f b6 04 24	 movzx	 eax, BYTE PTR blk$[rsp]
  0034a	c1 e0 02	 shl	 eax, 2
  0034d	4c 63 c0	 movsxd	 r8, eax
  00350	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00353	c1 e8 08	 shr	 eax, 8
  00356	0f b6 c0	 movzx	 eax, al
  00359	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00360	48 63 d0	 movsxd	 rdx, eax
  00363	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00368	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  0036d	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00370	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00374	44 33 c0	 xor	 r8d, eax
  00377	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  0037a	c1 e8 10	 shr	 eax, 16
  0037d	0f b6 c0	 movzx	 eax, al
  00380	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00387	48 63 c8	 movsxd	 rcx, eax
  0038a	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  0038f	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00393	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00396	c1 e8 18	 shr	 eax, 24
  00399	0f b6 c0	 movzx	 eax, al
  0039c	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  003a3	48 63 d0	 movsxd	 rdx, eax
  003a6	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  003ab	41 8b c0	 mov	 eax, r8d
  003ae	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  003b1	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  003b5	8b 54 24 08	 mov	 edx, DWORD PTR blk$[rsp+8]
  003b9	d1 c2		 rol	 edx, 1
  003bb	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  003bf	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  003c3	03 c8		 add	 ecx, eax
  003c5	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  003ca	03 88 88 00 00
	00		 add	 ecx, DWORD PTR [rax+136]
  003d0	8b c2		 mov	 eax, edx
  003d2	33 c1		 xor	 eax, ecx
  003d4	89 44 24 08	 mov	 DWORD PTR blk$[rsp+8], eax
  003d8	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  003dc	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  003e0	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  003e3	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  003e8	03 88 8c 00 00
	00		 add	 ecx, DWORD PTR [rax+140]
  003ee	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  003f2	33 c1		 xor	 eax, ecx
  003f4	d1 c8		 ror	 eax, 1
  003f6	89 44 24 0c	 mov	 DWORD PTR blk$[rsp+12], eax
  003fa	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  003fe	c1 e8 18	 shr	 eax, 24
  00401	0f b6 c0	 movzx	 eax, al
  00404	c1 e0 02	 shl	 eax, 2
  00407	4c 63 c0	 movsxd	 r8, eax
  0040a	0f b6 44 24 0c	 movzx	 eax, BYTE PTR blk$[rsp+12]
  0040f	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00416	48 63 d0	 movsxd	 rdx, eax
  00419	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0041e	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00423	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00426	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  0042a	44 33 c0	 xor	 r8d, eax
  0042d	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00431	c1 e8 08	 shr	 eax, 8
  00434	0f b6 c0	 movzx	 eax, al
  00437	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  0043e	48 63 c8	 movsxd	 rcx, eax
  00441	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00446	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  0044a	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  0044e	c1 e8 10	 shr	 eax, 16
  00451	0f b6 c0	 movzx	 eax, al
  00454	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  0045b	48 63 d0	 movsxd	 rdx, eax
  0045e	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00463	41 8b c0	 mov	 eax, r8d
  00466	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00469	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  0046d	0f b6 44 24 08	 movzx	 eax, BYTE PTR blk$[rsp+8]
  00472	c1 e0 02	 shl	 eax, 2
  00475	4c 63 c0	 movsxd	 r8, eax
  00478	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  0047c	c1 e8 08	 shr	 eax, 8
  0047f	0f b6 c0	 movzx	 eax, al
  00482	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00489	48 63 d0	 movsxd	 rdx, eax
  0048c	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00491	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00496	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00499	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  0049d	44 33 c0	 xor	 r8d, eax
  004a0	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  004a4	c1 e8 10	 shr	 eax, 16
  004a7	0f b6 c0	 movzx	 eax, al
  004aa	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  004b1	48 63 c8	 movsxd	 rcx, eax
  004b4	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  004b9	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  004bd	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  004c1	c1 e8 18	 shr	 eax, 24
  004c4	0f b6 c0	 movzx	 eax, al
  004c7	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  004ce	48 63 d0	 movsxd	 rdx, eax
  004d1	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  004d6	41 8b c0	 mov	 eax, r8d
  004d9	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  004dc	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  004e0	8b 14 24	 mov	 edx, DWORD PTR blk$[rsp]
  004e3	d1 c2		 rol	 edx, 1
  004e5	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  004e9	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  004ed	03 c8		 add	 ecx, eax
  004ef	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  004f4	03 88 80 00 00
	00		 add	 ecx, DWORD PTR [rax+128]
  004fa	8b c2		 mov	 eax, edx
  004fc	33 c1		 xor	 eax, ecx
  004fe	89 04 24	 mov	 DWORD PTR blk$[rsp], eax
  00501	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00505	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00509	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  0050c	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00511	03 88 84 00 00
	00		 add	 ecx, DWORD PTR [rax+132]
  00517	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  0051b	33 c1		 xor	 eax, ecx
  0051d	d1 c8		 ror	 eax, 1
  0051f	89 44 24 04	 mov	 DWORD PTR blk$[rsp+4], eax
  00523	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00527	c1 e8 18	 shr	 eax, 24
  0052a	0f b6 c0	 movzx	 eax, al
  0052d	c1 e0 02	 shl	 eax, 2
  00530	4c 63 c0	 movsxd	 r8, eax
  00533	0f b6 44 24 04	 movzx	 eax, BYTE PTR blk$[rsp+4]
  00538	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  0053f	48 63 d0	 movsxd	 rdx, eax
  00542	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00547	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  0054c	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  0054f	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00553	44 33 c0	 xor	 r8d, eax
  00556	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  0055a	c1 e8 08	 shr	 eax, 8
  0055d	0f b6 c0	 movzx	 eax, al
  00560	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00567	48 63 c8	 movsxd	 rcx, eax
  0056a	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  0056f	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00573	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00577	c1 e8 10	 shr	 eax, 16
  0057a	0f b6 c0	 movzx	 eax, al
  0057d	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00584	48 63 d0	 movsxd	 rdx, eax
  00587	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0058c	41 8b c0	 mov	 eax, r8d
  0058f	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00592	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  00596	0f b6 04 24	 movzx	 eax, BYTE PTR blk$[rsp]
  0059a	c1 e0 02	 shl	 eax, 2
  0059d	4c 63 c0	 movsxd	 r8, eax
  005a0	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  005a3	c1 e8 08	 shr	 eax, 8
  005a6	0f b6 c0	 movzx	 eax, al
  005a9	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  005b0	48 63 d0	 movsxd	 rdx, eax
  005b3	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  005b8	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  005bd	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  005c0	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  005c4	44 33 c0	 xor	 r8d, eax
  005c7	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  005ca	c1 e8 10	 shr	 eax, 16
  005cd	0f b6 c0	 movzx	 eax, al
  005d0	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  005d7	48 63 c8	 movsxd	 rcx, eax
  005da	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  005df	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  005e3	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  005e6	c1 e8 18	 shr	 eax, 24
  005e9	0f b6 c0	 movzx	 eax, al
  005ec	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  005f3	48 63 d0	 movsxd	 rdx, eax
  005f6	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  005fb	41 8b c0	 mov	 eax, r8d
  005fe	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00601	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  00605	8b 54 24 08	 mov	 edx, DWORD PTR blk$[rsp+8]
  00609	d1 c2		 rol	 edx, 1
  0060b	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  0060f	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00613	03 c8		 add	 ecx, eax
  00615	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  0061a	03 48 78	 add	 ecx, DWORD PTR [rax+120]
  0061d	8b c2		 mov	 eax, edx
  0061f	33 c1		 xor	 eax, ecx
  00621	89 44 24 08	 mov	 DWORD PTR blk$[rsp+8], eax
  00625	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00629	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  0062d	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  00630	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00635	03 48 7c	 add	 ecx, DWORD PTR [rax+124]
  00638	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  0063c	33 c1		 xor	 eax, ecx
  0063e	d1 c8		 ror	 eax, 1
  00640	89 44 24 0c	 mov	 DWORD PTR blk$[rsp+12], eax
  00644	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00648	c1 e8 18	 shr	 eax, 24
  0064b	0f b6 c0	 movzx	 eax, al
  0064e	c1 e0 02	 shl	 eax, 2
  00651	4c 63 c0	 movsxd	 r8, eax
  00654	0f b6 44 24 0c	 movzx	 eax, BYTE PTR blk$[rsp+12]
  00659	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00660	48 63 d0	 movsxd	 rdx, eax
  00663	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00668	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  0066d	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00670	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00674	44 33 c0	 xor	 r8d, eax
  00677	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  0067b	c1 e8 08	 shr	 eax, 8
  0067e	0f b6 c0	 movzx	 eax, al
  00681	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00688	48 63 c8	 movsxd	 rcx, eax
  0068b	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00690	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00694	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00698	c1 e8 10	 shr	 eax, 16
  0069b	0f b6 c0	 movzx	 eax, al
  0069e	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  006a5	48 63 d0	 movsxd	 rdx, eax
  006a8	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  006ad	41 8b c0	 mov	 eax, r8d
  006b0	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  006b3	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  006b7	0f b6 44 24 08	 movzx	 eax, BYTE PTR blk$[rsp+8]
  006bc	c1 e0 02	 shl	 eax, 2
  006bf	4c 63 c0	 movsxd	 r8, eax
  006c2	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  006c6	c1 e8 08	 shr	 eax, 8
  006c9	0f b6 c0	 movzx	 eax, al
  006cc	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  006d3	48 63 d0	 movsxd	 rdx, eax
  006d6	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  006db	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  006e0	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  006e3	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  006e7	44 33 c0	 xor	 r8d, eax
  006ea	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  006ee	c1 e8 10	 shr	 eax, 16
  006f1	0f b6 c0	 movzx	 eax, al
  006f4	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  006fb	48 63 c8	 movsxd	 rcx, eax
  006fe	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00703	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00707	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  0070b	c1 e8 18	 shr	 eax, 24
  0070e	0f b6 c0	 movzx	 eax, al
  00711	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00718	48 63 d0	 movsxd	 rdx, eax
  0071b	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00720	41 8b c0	 mov	 eax, r8d
  00723	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00726	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  0072a	8b 14 24	 mov	 edx, DWORD PTR blk$[rsp]
  0072d	d1 c2		 rol	 edx, 1
  0072f	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00733	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00737	03 c8		 add	 ecx, eax
  00739	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  0073e	03 48 70	 add	 ecx, DWORD PTR [rax+112]
  00741	8b c2		 mov	 eax, edx
  00743	33 c1		 xor	 eax, ecx
  00745	89 04 24	 mov	 DWORD PTR blk$[rsp], eax
  00748	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  0074c	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00750	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  00753	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00758	03 48 74	 add	 ecx, DWORD PTR [rax+116]
  0075b	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  0075f	33 c1		 xor	 eax, ecx
  00761	d1 c8		 ror	 eax, 1
  00763	89 44 24 04	 mov	 DWORD PTR blk$[rsp+4], eax
  00767	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  0076b	c1 e8 18	 shr	 eax, 24
  0076e	0f b6 c0	 movzx	 eax, al
  00771	c1 e0 02	 shl	 eax, 2
  00774	4c 63 c0	 movsxd	 r8, eax
  00777	0f b6 44 24 04	 movzx	 eax, BYTE PTR blk$[rsp+4]
  0077c	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00783	48 63 d0	 movsxd	 rdx, eax
  00786	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0078b	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00790	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00793	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00797	44 33 c0	 xor	 r8d, eax
  0079a	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  0079e	c1 e8 08	 shr	 eax, 8
  007a1	0f b6 c0	 movzx	 eax, al
  007a4	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  007ab	48 63 c8	 movsxd	 rcx, eax
  007ae	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  007b3	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  007b7	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  007bb	c1 e8 10	 shr	 eax, 16
  007be	0f b6 c0	 movzx	 eax, al
  007c1	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  007c8	48 63 d0	 movsxd	 rdx, eax
  007cb	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  007d0	41 8b c0	 mov	 eax, r8d
  007d3	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  007d6	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  007da	0f b6 04 24	 movzx	 eax, BYTE PTR blk$[rsp]
  007de	c1 e0 02	 shl	 eax, 2
  007e1	4c 63 c0	 movsxd	 r8, eax
  007e4	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  007e7	c1 e8 08	 shr	 eax, 8
  007ea	0f b6 c0	 movzx	 eax, al
  007ed	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  007f4	48 63 d0	 movsxd	 rdx, eax
  007f7	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  007fc	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00801	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00804	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00808	44 33 c0	 xor	 r8d, eax
  0080b	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  0080e	c1 e8 10	 shr	 eax, 16
  00811	0f b6 c0	 movzx	 eax, al
  00814	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  0081b	48 63 c8	 movsxd	 rcx, eax
  0081e	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00823	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00827	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  0082a	c1 e8 18	 shr	 eax, 24
  0082d	0f b6 c0	 movzx	 eax, al
  00830	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00837	48 63 d0	 movsxd	 rdx, eax
  0083a	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0083f	41 8b c0	 mov	 eax, r8d
  00842	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00845	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  00849	8b 54 24 08	 mov	 edx, DWORD PTR blk$[rsp+8]
  0084d	d1 c2		 rol	 edx, 1
  0084f	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00853	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00857	03 c8		 add	 ecx, eax
  00859	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  0085e	03 48 68	 add	 ecx, DWORD PTR [rax+104]
  00861	8b c2		 mov	 eax, edx
  00863	33 c1		 xor	 eax, ecx
  00865	89 44 24 08	 mov	 DWORD PTR blk$[rsp+8], eax
  00869	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  0086d	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00871	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  00874	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00879	03 48 6c	 add	 ecx, DWORD PTR [rax+108]
  0087c	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00880	33 c1		 xor	 eax, ecx
  00882	d1 c8		 ror	 eax, 1
  00884	89 44 24 0c	 mov	 DWORD PTR blk$[rsp+12], eax
  00888	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  0088c	c1 e8 18	 shr	 eax, 24
  0088f	0f b6 c0	 movzx	 eax, al
  00892	c1 e0 02	 shl	 eax, 2
  00895	4c 63 c0	 movsxd	 r8, eax
  00898	0f b6 44 24 0c	 movzx	 eax, BYTE PTR blk$[rsp+12]
  0089d	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  008a4	48 63 d0	 movsxd	 rdx, eax
  008a7	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  008ac	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  008b1	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  008b4	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  008b8	44 33 c0	 xor	 r8d, eax
  008bb	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  008bf	c1 e8 08	 shr	 eax, 8
  008c2	0f b6 c0	 movzx	 eax, al
  008c5	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  008cc	48 63 c8	 movsxd	 rcx, eax
  008cf	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  008d4	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  008d8	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  008dc	c1 e8 10	 shr	 eax, 16
  008df	0f b6 c0	 movzx	 eax, al
  008e2	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  008e9	48 63 d0	 movsxd	 rdx, eax
  008ec	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  008f1	41 8b c0	 mov	 eax, r8d
  008f4	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  008f7	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  008fb	0f b6 44 24 08	 movzx	 eax, BYTE PTR blk$[rsp+8]
  00900	c1 e0 02	 shl	 eax, 2
  00903	4c 63 c0	 movsxd	 r8, eax
  00906	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  0090a	c1 e8 08	 shr	 eax, 8
  0090d	0f b6 c0	 movzx	 eax, al
  00910	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00917	48 63 d0	 movsxd	 rdx, eax
  0091a	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0091f	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00924	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00927	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  0092b	44 33 c0	 xor	 r8d, eax
  0092e	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00932	c1 e8 10	 shr	 eax, 16
  00935	0f b6 c0	 movzx	 eax, al
  00938	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  0093f	48 63 c8	 movsxd	 rcx, eax
  00942	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00947	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  0094b	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  0094f	c1 e8 18	 shr	 eax, 24
  00952	0f b6 c0	 movzx	 eax, al
  00955	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  0095c	48 63 d0	 movsxd	 rdx, eax
  0095f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00964	41 8b c0	 mov	 eax, r8d
  00967	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  0096a	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  0096e	8b 14 24	 mov	 edx, DWORD PTR blk$[rsp]
  00971	d1 c2		 rol	 edx, 1
  00973	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00977	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  0097b	03 c8		 add	 ecx, eax
  0097d	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00982	03 48 60	 add	 ecx, DWORD PTR [rax+96]
  00985	8b c2		 mov	 eax, edx
  00987	33 c1		 xor	 eax, ecx
  00989	89 04 24	 mov	 DWORD PTR blk$[rsp], eax
  0098c	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00990	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00994	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  00997	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  0099c	03 48 64	 add	 ecx, DWORD PTR [rax+100]
  0099f	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  009a3	33 c1		 xor	 eax, ecx
  009a5	d1 c8		 ror	 eax, 1
  009a7	89 44 24 04	 mov	 DWORD PTR blk$[rsp+4], eax

; 508  :     i_rnd(3); i_rnd(2); i_rnd(1); i_rnd(0);

  009ab	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  009af	c1 e8 18	 shr	 eax, 24
  009b2	0f b6 c0	 movzx	 eax, al
  009b5	c1 e0 02	 shl	 eax, 2
  009b8	4c 63 c0	 movsxd	 r8, eax
  009bb	0f b6 44 24 04	 movzx	 eax, BYTE PTR blk$[rsp+4]
  009c0	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  009c7	48 63 d0	 movsxd	 rdx, eax
  009ca	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  009cf	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  009d4	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  009d7	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  009db	44 33 c0	 xor	 r8d, eax
  009de	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  009e2	c1 e8 08	 shr	 eax, 8
  009e5	0f b6 c0	 movzx	 eax, al
  009e8	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  009ef	48 63 c8	 movsxd	 rcx, eax
  009f2	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  009f7	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  009fb	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  009ff	c1 e8 10	 shr	 eax, 16
  00a02	0f b6 c0	 movzx	 eax, al
  00a05	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00a0c	48 63 d0	 movsxd	 rdx, eax
  00a0f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00a14	41 8b c0	 mov	 eax, r8d
  00a17	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00a1a	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  00a1e	0f b6 04 24	 movzx	 eax, BYTE PTR blk$[rsp]
  00a22	c1 e0 02	 shl	 eax, 2
  00a25	4c 63 c0	 movsxd	 r8, eax
  00a28	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00a2b	c1 e8 08	 shr	 eax, 8
  00a2e	0f b6 c0	 movzx	 eax, al
  00a31	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00a38	48 63 d0	 movsxd	 rdx, eax
  00a3b	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00a40	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00a45	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00a48	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00a4c	44 33 c0	 xor	 r8d, eax
  00a4f	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00a52	c1 e8 10	 shr	 eax, 16
  00a55	0f b6 c0	 movzx	 eax, al
  00a58	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00a5f	48 63 c8	 movsxd	 rcx, eax
  00a62	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00a67	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00a6b	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00a6e	c1 e8 18	 shr	 eax, 24
  00a71	0f b6 c0	 movzx	 eax, al
  00a74	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00a7b	48 63 d0	 movsxd	 rdx, eax
  00a7e	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00a83	41 8b c0	 mov	 eax, r8d
  00a86	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00a89	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  00a8d	8b 54 24 08	 mov	 edx, DWORD PTR blk$[rsp+8]
  00a91	d1 c2		 rol	 edx, 1
  00a93	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00a97	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00a9b	03 c8		 add	 ecx, eax
  00a9d	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00aa2	03 48 58	 add	 ecx, DWORD PTR [rax+88]
  00aa5	8b c2		 mov	 eax, edx
  00aa7	33 c1		 xor	 eax, ecx
  00aa9	89 44 24 08	 mov	 DWORD PTR blk$[rsp+8], eax
  00aad	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00ab1	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00ab5	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  00ab8	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00abd	03 48 5c	 add	 ecx, DWORD PTR [rax+92]
  00ac0	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00ac4	33 c1		 xor	 eax, ecx
  00ac6	d1 c8		 ror	 eax, 1
  00ac8	89 44 24 0c	 mov	 DWORD PTR blk$[rsp+12], eax
  00acc	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00ad0	c1 e8 18	 shr	 eax, 24
  00ad3	0f b6 c0	 movzx	 eax, al
  00ad6	c1 e0 02	 shl	 eax, 2
  00ad9	4c 63 c0	 movsxd	 r8, eax
  00adc	0f b6 44 24 0c	 movzx	 eax, BYTE PTR blk$[rsp+12]
  00ae1	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00ae8	48 63 d0	 movsxd	 rdx, eax
  00aeb	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00af0	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00af5	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00af8	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00afc	44 33 c0	 xor	 r8d, eax
  00aff	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00b03	c1 e8 08	 shr	 eax, 8
  00b06	0f b6 c0	 movzx	 eax, al
  00b09	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00b10	48 63 c8	 movsxd	 rcx, eax
  00b13	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00b18	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00b1c	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00b20	c1 e8 10	 shr	 eax, 16
  00b23	0f b6 c0	 movzx	 eax, al
  00b26	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00b2d	48 63 d0	 movsxd	 rdx, eax
  00b30	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00b35	41 8b c0	 mov	 eax, r8d
  00b38	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00b3b	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  00b3f	0f b6 44 24 08	 movzx	 eax, BYTE PTR blk$[rsp+8]
  00b44	c1 e0 02	 shl	 eax, 2
  00b47	4c 63 c0	 movsxd	 r8, eax
  00b4a	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00b4e	c1 e8 08	 shr	 eax, 8
  00b51	0f b6 c0	 movzx	 eax, al
  00b54	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00b5b	48 63 d0	 movsxd	 rdx, eax
  00b5e	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00b63	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00b68	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00b6b	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00b6f	44 33 c0	 xor	 r8d, eax
  00b72	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00b76	c1 e8 10	 shr	 eax, 16
  00b79	0f b6 c0	 movzx	 eax, al
  00b7c	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00b83	48 63 c8	 movsxd	 rcx, eax
  00b86	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00b8b	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00b8f	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00b93	c1 e8 18	 shr	 eax, 24
  00b96	0f b6 c0	 movzx	 eax, al
  00b99	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00ba0	48 63 d0	 movsxd	 rdx, eax
  00ba3	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00ba8	41 8b c0	 mov	 eax, r8d
  00bab	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00bae	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  00bb2	8b 14 24	 mov	 edx, DWORD PTR blk$[rsp]
  00bb5	d1 c2		 rol	 edx, 1
  00bb7	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00bbb	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00bbf	03 c8		 add	 ecx, eax
  00bc1	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00bc6	03 48 50	 add	 ecx, DWORD PTR [rax+80]
  00bc9	8b c2		 mov	 eax, edx
  00bcb	33 c1		 xor	 eax, ecx
  00bcd	89 04 24	 mov	 DWORD PTR blk$[rsp], eax
  00bd0	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00bd4	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00bd8	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  00bdb	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00be0	03 48 54	 add	 ecx, DWORD PTR [rax+84]
  00be3	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00be7	33 c1		 xor	 eax, ecx
  00be9	d1 c8		 ror	 eax, 1
  00beb	89 44 24 04	 mov	 DWORD PTR blk$[rsp+4], eax
  00bef	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00bf3	c1 e8 18	 shr	 eax, 24
  00bf6	0f b6 c0	 movzx	 eax, al
  00bf9	c1 e0 02	 shl	 eax, 2
  00bfc	4c 63 c0	 movsxd	 r8, eax
  00bff	0f b6 44 24 04	 movzx	 eax, BYTE PTR blk$[rsp+4]
  00c04	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00c0b	48 63 d0	 movsxd	 rdx, eax
  00c0e	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00c13	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00c18	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00c1b	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00c1f	44 33 c0	 xor	 r8d, eax
  00c22	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00c26	c1 e8 08	 shr	 eax, 8
  00c29	0f b6 c0	 movzx	 eax, al
  00c2c	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00c33	48 63 c8	 movsxd	 rcx, eax
  00c36	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00c3b	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00c3f	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00c43	c1 e8 10	 shr	 eax, 16
  00c46	0f b6 c0	 movzx	 eax, al
  00c49	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00c50	48 63 d0	 movsxd	 rdx, eax
  00c53	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00c58	41 8b c0	 mov	 eax, r8d
  00c5b	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00c5e	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  00c62	0f b6 04 24	 movzx	 eax, BYTE PTR blk$[rsp]
  00c66	c1 e0 02	 shl	 eax, 2
  00c69	4c 63 c0	 movsxd	 r8, eax
  00c6c	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00c6f	c1 e8 08	 shr	 eax, 8
  00c72	0f b6 c0	 movzx	 eax, al
  00c75	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00c7c	48 63 d0	 movsxd	 rdx, eax
  00c7f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00c84	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00c89	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00c8c	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00c90	44 33 c0	 xor	 r8d, eax
  00c93	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00c96	c1 e8 10	 shr	 eax, 16
  00c99	0f b6 c0	 movzx	 eax, al
  00c9c	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00ca3	48 63 c8	 movsxd	 rcx, eax
  00ca6	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00cab	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00caf	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00cb2	c1 e8 18	 shr	 eax, 24
  00cb5	0f b6 c0	 movzx	 eax, al
  00cb8	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00cbf	48 63 d0	 movsxd	 rdx, eax
  00cc2	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00cc7	41 8b c0	 mov	 eax, r8d
  00cca	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00ccd	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  00cd1	8b 54 24 08	 mov	 edx, DWORD PTR blk$[rsp+8]
  00cd5	d1 c2		 rol	 edx, 1
  00cd7	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00cdb	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00cdf	03 c8		 add	 ecx, eax
  00ce1	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00ce6	03 48 48	 add	 ecx, DWORD PTR [rax+72]
  00ce9	8b c2		 mov	 eax, edx
  00ceb	33 c1		 xor	 eax, ecx
  00ced	89 44 24 08	 mov	 DWORD PTR blk$[rsp+8], eax
  00cf1	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00cf5	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00cf9	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  00cfc	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00d01	03 48 4c	 add	 ecx, DWORD PTR [rax+76]
  00d04	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00d08	33 c1		 xor	 eax, ecx
  00d0a	d1 c8		 ror	 eax, 1
  00d0c	89 44 24 0c	 mov	 DWORD PTR blk$[rsp+12], eax
  00d10	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00d14	c1 e8 18	 shr	 eax, 24
  00d17	0f b6 c0	 movzx	 eax, al
  00d1a	c1 e0 02	 shl	 eax, 2
  00d1d	4c 63 c0	 movsxd	 r8, eax
  00d20	0f b6 44 24 0c	 movzx	 eax, BYTE PTR blk$[rsp+12]
  00d25	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00d2c	48 63 d0	 movsxd	 rdx, eax
  00d2f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00d34	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00d39	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00d3c	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00d40	44 33 c0	 xor	 r8d, eax
  00d43	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00d47	c1 e8 08	 shr	 eax, 8
  00d4a	0f b6 c0	 movzx	 eax, al
  00d4d	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00d54	48 63 c8	 movsxd	 rcx, eax
  00d57	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00d5c	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00d60	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00d64	c1 e8 10	 shr	 eax, 16
  00d67	0f b6 c0	 movzx	 eax, al
  00d6a	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00d71	48 63 d0	 movsxd	 rdx, eax
  00d74	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00d79	41 8b c0	 mov	 eax, r8d
  00d7c	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00d7f	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  00d83	0f b6 44 24 08	 movzx	 eax, BYTE PTR blk$[rsp+8]
  00d88	c1 e0 02	 shl	 eax, 2
  00d8b	4c 63 c0	 movsxd	 r8, eax
  00d8e	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00d92	c1 e8 08	 shr	 eax, 8
  00d95	0f b6 c0	 movzx	 eax, al
  00d98	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00d9f	48 63 d0	 movsxd	 rdx, eax
  00da2	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00da7	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00dac	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00daf	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00db3	44 33 c0	 xor	 r8d, eax
  00db6	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00dba	c1 e8 10	 shr	 eax, 16
  00dbd	0f b6 c0	 movzx	 eax, al
  00dc0	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00dc7	48 63 c8	 movsxd	 rcx, eax
  00dca	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00dcf	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00dd3	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00dd7	c1 e8 18	 shr	 eax, 24
  00dda	0f b6 c0	 movzx	 eax, al
  00ddd	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00de4	48 63 d0	 movsxd	 rdx, eax
  00de7	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00dec	41 8b c0	 mov	 eax, r8d
  00def	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00df2	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  00df6	8b 14 24	 mov	 edx, DWORD PTR blk$[rsp]
  00df9	d1 c2		 rol	 edx, 1
  00dfb	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00dff	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00e03	03 c8		 add	 ecx, eax
  00e05	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00e0a	03 48 40	 add	 ecx, DWORD PTR [rax+64]
  00e0d	8b c2		 mov	 eax, edx
  00e0f	33 c1		 xor	 eax, ecx
  00e11	89 04 24	 mov	 DWORD PTR blk$[rsp], eax
  00e14	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00e18	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00e1c	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  00e1f	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00e24	03 48 44	 add	 ecx, DWORD PTR [rax+68]
  00e27	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00e2b	33 c1		 xor	 eax, ecx
  00e2d	d1 c8		 ror	 eax, 1
  00e2f	89 44 24 04	 mov	 DWORD PTR blk$[rsp+4], eax
  00e33	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00e37	c1 e8 18	 shr	 eax, 24
  00e3a	0f b6 c0	 movzx	 eax, al
  00e3d	c1 e0 02	 shl	 eax, 2
  00e40	4c 63 c0	 movsxd	 r8, eax
  00e43	0f b6 44 24 04	 movzx	 eax, BYTE PTR blk$[rsp+4]
  00e48	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00e4f	48 63 d0	 movsxd	 rdx, eax
  00e52	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00e57	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00e5c	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00e5f	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00e63	44 33 c0	 xor	 r8d, eax
  00e66	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00e6a	c1 e8 08	 shr	 eax, 8
  00e6d	0f b6 c0	 movzx	 eax, al
  00e70	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00e77	48 63 c8	 movsxd	 rcx, eax
  00e7a	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00e7f	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00e83	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00e87	c1 e8 10	 shr	 eax, 16
  00e8a	0f b6 c0	 movzx	 eax, al
  00e8d	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00e94	48 63 d0	 movsxd	 rdx, eax
  00e97	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00e9c	41 8b c0	 mov	 eax, r8d
  00e9f	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00ea2	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  00ea6	0f b6 04 24	 movzx	 eax, BYTE PTR blk$[rsp]
  00eaa	c1 e0 02	 shl	 eax, 2
  00ead	4c 63 c0	 movsxd	 r8, eax
  00eb0	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00eb3	c1 e8 08	 shr	 eax, 8
  00eb6	0f b6 c0	 movzx	 eax, al
  00eb9	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00ec0	48 63 d0	 movsxd	 rdx, eax
  00ec3	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00ec8	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00ecd	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00ed0	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00ed4	44 33 c0	 xor	 r8d, eax
  00ed7	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00eda	c1 e8 10	 shr	 eax, 16
  00edd	0f b6 c0	 movzx	 eax, al
  00ee0	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00ee7	48 63 c8	 movsxd	 rcx, eax
  00eea	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00eef	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00ef3	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00ef6	c1 e8 18	 shr	 eax, 24
  00ef9	0f b6 c0	 movzx	 eax, al
  00efc	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00f03	48 63 d0	 movsxd	 rdx, eax
  00f06	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00f0b	41 8b c0	 mov	 eax, r8d
  00f0e	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00f11	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  00f15	8b 54 24 08	 mov	 edx, DWORD PTR blk$[rsp+8]
  00f19	d1 c2		 rol	 edx, 1
  00f1b	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00f1f	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00f23	03 c8		 add	 ecx, eax
  00f25	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00f2a	03 48 38	 add	 ecx, DWORD PTR [rax+56]
  00f2d	8b c2		 mov	 eax, edx
  00f2f	33 c1		 xor	 eax, ecx
  00f31	89 44 24 08	 mov	 DWORD PTR blk$[rsp+8], eax
  00f35	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00f39	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00f3d	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  00f40	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00f45	03 48 3c	 add	 ecx, DWORD PTR [rax+60]
  00f48	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00f4c	33 c1		 xor	 eax, ecx
  00f4e	d1 c8		 ror	 eax, 1
  00f50	89 44 24 0c	 mov	 DWORD PTR blk$[rsp+12], eax
  00f54	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00f58	c1 e8 18	 shr	 eax, 24
  00f5b	0f b6 c0	 movzx	 eax, al
  00f5e	c1 e0 02	 shl	 eax, 2
  00f61	4c 63 c0	 movsxd	 r8, eax
  00f64	0f b6 44 24 0c	 movzx	 eax, BYTE PTR blk$[rsp+12]
  00f69	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00f70	48 63 d0	 movsxd	 rdx, eax
  00f73	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00f78	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00f7d	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00f80	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00f84	44 33 c0	 xor	 r8d, eax
  00f87	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00f8b	c1 e8 08	 shr	 eax, 8
  00f8e	0f b6 c0	 movzx	 eax, al
  00f91	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00f98	48 63 c8	 movsxd	 rcx, eax
  00f9b	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00fa0	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00fa4	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00fa8	c1 e8 10	 shr	 eax, 16
  00fab	0f b6 c0	 movzx	 eax, al
  00fae	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00fb5	48 63 d0	 movsxd	 rdx, eax
  00fb8	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00fbd	41 8b c0	 mov	 eax, r8d
  00fc0	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00fc3	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  00fc7	0f b6 44 24 08	 movzx	 eax, BYTE PTR blk$[rsp+8]
  00fcc	c1 e0 02	 shl	 eax, 2
  00fcf	4c 63 c0	 movsxd	 r8, eax
  00fd2	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00fd6	c1 e8 08	 shr	 eax, 8
  00fd9	0f b6 c0	 movzx	 eax, al
  00fdc	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00fe3	48 63 d0	 movsxd	 rdx, eax
  00fe6	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00feb	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00ff0	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00ff3	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00ff7	44 33 c0	 xor	 r8d, eax
  00ffa	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00ffe	c1 e8 10	 shr	 eax, 16
  01001	0f b6 c0	 movzx	 eax, al
  01004	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  0100b	48 63 c8	 movsxd	 rcx, eax
  0100e	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  01013	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  01017	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  0101b	c1 e8 18	 shr	 eax, 24
  0101e	0f b6 c0	 movzx	 eax, al
  01021	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  01028	48 63 d0	 movsxd	 rdx, eax
  0102b	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  01030	41 8b c0	 mov	 eax, r8d
  01033	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  01036	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  0103a	8b 14 24	 mov	 edx, DWORD PTR blk$[rsp]
  0103d	d1 c2		 rol	 edx, 1
  0103f	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  01043	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  01047	03 c8		 add	 ecx, eax
  01049	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  0104e	03 48 30	 add	 ecx, DWORD PTR [rax+48]
  01051	8b c2		 mov	 eax, edx
  01053	33 c1		 xor	 eax, ecx
  01055	89 04 24	 mov	 DWORD PTR blk$[rsp], eax
  01058	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  0105c	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  01060	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  01063	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  01068	03 48 34	 add	 ecx, DWORD PTR [rax+52]
  0106b	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  0106f	33 c1		 xor	 eax, ecx
  01071	d1 c8		 ror	 eax, 1
  01073	89 44 24 04	 mov	 DWORD PTR blk$[rsp+4], eax
  01077	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  0107b	c1 e8 18	 shr	 eax, 24
  0107e	0f b6 c0	 movzx	 eax, al
  01081	c1 e0 02	 shl	 eax, 2
  01084	4c 63 c0	 movsxd	 r8, eax
  01087	0f b6 44 24 04	 movzx	 eax, BYTE PTR blk$[rsp+4]
  0108c	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  01093	48 63 d0	 movsxd	 rdx, eax
  01096	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0109b	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  010a0	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  010a3	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  010a7	44 33 c0	 xor	 r8d, eax
  010aa	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  010ae	c1 e8 08	 shr	 eax, 8
  010b1	0f b6 c0	 movzx	 eax, al
  010b4	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  010bb	48 63 c8	 movsxd	 rcx, eax
  010be	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  010c3	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  010c7	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  010cb	c1 e8 10	 shr	 eax, 16
  010ce	0f b6 c0	 movzx	 eax, al
  010d1	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  010d8	48 63 d0	 movsxd	 rdx, eax
  010db	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  010e0	41 8b c0	 mov	 eax, r8d
  010e3	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  010e6	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  010ea	0f b6 04 24	 movzx	 eax, BYTE PTR blk$[rsp]
  010ee	c1 e0 02	 shl	 eax, 2
  010f1	4c 63 c0	 movsxd	 r8, eax
  010f4	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  010f7	c1 e8 08	 shr	 eax, 8
  010fa	0f b6 c0	 movzx	 eax, al
  010fd	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  01104	48 63 d0	 movsxd	 rdx, eax
  01107	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0110c	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  01111	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  01114	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  01118	44 33 c0	 xor	 r8d, eax
  0111b	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  0111e	c1 e8 10	 shr	 eax, 16
  01121	0f b6 c0	 movzx	 eax, al
  01124	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  0112b	48 63 c8	 movsxd	 rcx, eax
  0112e	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  01133	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  01137	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  0113a	c1 e8 18	 shr	 eax, 24
  0113d	0f b6 c0	 movzx	 eax, al
  01140	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  01147	48 63 d0	 movsxd	 rdx, eax
  0114a	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0114f	41 8b c0	 mov	 eax, r8d
  01152	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  01155	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  01159	8b 54 24 08	 mov	 edx, DWORD PTR blk$[rsp+8]
  0115d	d1 c2		 rol	 edx, 1
  0115f	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  01163	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  01167	03 c8		 add	 ecx, eax
  01169	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  0116e	03 48 28	 add	 ecx, DWORD PTR [rax+40]
  01171	8b c2		 mov	 eax, edx
  01173	33 c1		 xor	 eax, ecx
  01175	89 44 24 08	 mov	 DWORD PTR blk$[rsp+8], eax
  01179	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  0117d	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  01181	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  01184	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  01189	03 48 2c	 add	 ecx, DWORD PTR [rax+44]
  0118c	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  01190	33 c1		 xor	 eax, ecx
  01192	d1 c8		 ror	 eax, 1
  01194	89 44 24 0c	 mov	 DWORD PTR blk$[rsp+12], eax
  01198	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  0119c	c1 e8 18	 shr	 eax, 24
  0119f	0f b6 c0	 movzx	 eax, al
  011a2	c1 e0 02	 shl	 eax, 2
  011a5	4c 63 c0	 movsxd	 r8, eax
  011a8	0f b6 44 24 0c	 movzx	 eax, BYTE PTR blk$[rsp+12]
  011ad	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  011b4	48 63 d0	 movsxd	 rdx, eax
  011b7	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  011bc	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  011c1	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  011c4	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  011c8	44 33 c0	 xor	 r8d, eax
  011cb	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  011cf	c1 e8 08	 shr	 eax, 8
  011d2	0f b6 c0	 movzx	 eax, al
  011d5	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  011dc	48 63 c8	 movsxd	 rcx, eax
  011df	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  011e4	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  011e8	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  011ec	c1 e8 10	 shr	 eax, 16
  011ef	0f b6 c0	 movzx	 eax, al
  011f2	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  011f9	48 63 d0	 movsxd	 rdx, eax
  011fc	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  01201	41 8b c0	 mov	 eax, r8d
  01204	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  01207	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  0120b	0f b6 44 24 08	 movzx	 eax, BYTE PTR blk$[rsp+8]
  01210	c1 e0 02	 shl	 eax, 2
  01213	4c 63 c0	 movsxd	 r8, eax
  01216	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  0121a	c1 e8 08	 shr	 eax, 8
  0121d	0f b6 c0	 movzx	 eax, al
  01220	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  01227	48 63 d0	 movsxd	 rdx, eax
  0122a	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0122f	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  01234	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  01237	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  0123b	44 33 c0	 xor	 r8d, eax
  0123e	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  01242	c1 e8 10	 shr	 eax, 16
  01245	0f b6 c0	 movzx	 eax, al
  01248	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  0124f	48 63 c8	 movsxd	 rcx, eax
  01252	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  01257	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  0125b	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  0125f	c1 e8 18	 shr	 eax, 24
  01262	0f b6 c0	 movzx	 eax, al
  01265	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  0126c	48 63 d0	 movsxd	 rdx, eax
  0126f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  01274	41 8b c0	 mov	 eax, r8d
  01277	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  0127a	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  0127e	8b 14 24	 mov	 edx, DWORD PTR blk$[rsp]
  01281	d1 c2		 rol	 edx, 1
  01283	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  01287	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  0128b	03 c8		 add	 ecx, eax
  0128d	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  01292	03 48 20	 add	 ecx, DWORD PTR [rax+32]
  01295	8b c2		 mov	 eax, edx
  01297	33 c1		 xor	 eax, ecx
  01299	89 04 24	 mov	 DWORD PTR blk$[rsp], eax
  0129c	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  012a0	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  012a4	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  012a7	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  012ac	03 48 24	 add	 ecx, DWORD PTR [rax+36]
  012af	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  012b3	33 c1		 xor	 eax, ecx
  012b5	d1 c8		 ror	 eax, 1
  012b7	89 44 24 04	 mov	 DWORD PTR blk$[rsp+4], eax

; 509  : 
; 510  :     out_blk[0] = LE32(blk[2] ^ l_key[0]);

  012bb	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  012c0	8b 00		 mov	 eax, DWORD PTR [rax]
  012c2	8b 4c 24 08	 mov	 ecx, DWORD PTR blk$[rsp+8]
  012c6	33 c8		 xor	 ecx, eax
  012c8	48 8b 44 24 50	 mov	 rax, QWORD PTR out_blk$[rsp]
  012cd	89 08		 mov	 DWORD PTR [rax], ecx

; 511  :     out_blk[1] = LE32(blk[3] ^ l_key[1]);

  012cf	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  012d4	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  012d7	8b 4c 24 0c	 mov	 ecx, DWORD PTR blk$[rsp+12]
  012db	33 c8		 xor	 ecx, eax
  012dd	48 8b 44 24 50	 mov	 rax, QWORD PTR out_blk$[rsp]
  012e2	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 512  :     out_blk[2] = LE32(blk[0] ^ l_key[2]);

  012e5	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  012ea	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  012ed	8b 0c 24	 mov	 ecx, DWORD PTR blk$[rsp]
  012f0	33 c8		 xor	 ecx, eax
  012f2	48 8b 44 24 50	 mov	 rax, QWORD PTR out_blk$[rsp]
  012f7	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 513  :     out_blk[3] = LE32(blk[1] ^ l_key[3]); 

  012fa	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  012ff	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  01302	8b 4c 24 04	 mov	 ecx, DWORD PTR blk$[rsp+4]
  01306	33 c8		 xor	 ecx, eax
  01308	48 8b 44 24 50	 mov	 rax, QWORD PTR out_blk$[rsp]
  0130d	89 48 0c	 mov	 DWORD PTR [rax+12], ecx

; 514  : };

  01310	48 83 c4 38	 add	 rsp, 56			; 00000038H
  01314	c3		 ret	 0
twofish_decrypt ENDP
_TEXT	ENDS
PUBLIC	twofish_encrypt
;	COMDAT pdata
pdata	SEGMENT
$pdata$twofish_encrypt DD imagerel $LN3
	DD	imagerel $LN3+4885
	DD	imagerel $unwind$twofish_encrypt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$twofish_encrypt DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT twofish_encrypt
_TEXT	SEGMENT
blk$ = 0
mk_tab$ = 16
l_key$ = 24
t1$ = 32
t0$ = 36
instance$ = 64
in_blk$ = 72
out_blk$ = 80
twofish_encrypt PROC					; COMDAT

; 431  : {   u4byte  t0, t1, blk[4];

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 432  : 
; 433  : 	u4byte *l_key = instance->l_key;

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR instance$[rsp]
  00018	48 89 44 24 18	 mov	 QWORD PTR l_key$[rsp], rax

; 434  : 	u4byte *mk_tab = instance->mk_tab;

  0001d	48 8b 44 24 40	 mov	 rax, QWORD PTR instance$[rsp]
  00022	48 05 b0 00 00
	00		 add	 rax, 176		; 000000b0H
  00028	48 89 44 24 10	 mov	 QWORD PTR mk_tab$[rsp], rax

; 435  : 
; 436  : 	blk[0] = LE32(in_blk[0]) ^ l_key[0];

  0002d	48 8b 54 24 48	 mov	 rdx, QWORD PTR in_blk$[rsp]
  00032	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00037	8b 08		 mov	 ecx, DWORD PTR [rax]
  00039	8b 02		 mov	 eax, DWORD PTR [rdx]
  0003b	33 c1		 xor	 eax, ecx
  0003d	89 04 24	 mov	 DWORD PTR blk$[rsp], eax

; 437  :     blk[1] = LE32(in_blk[1]) ^ l_key[1];

  00040	48 8b 54 24 48	 mov	 rdx, QWORD PTR in_blk$[rsp]
  00045	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  0004a	8b 48 04	 mov	 ecx, DWORD PTR [rax+4]
  0004d	8b 42 04	 mov	 eax, DWORD PTR [rdx+4]
  00050	33 c1		 xor	 eax, ecx
  00052	89 44 24 04	 mov	 DWORD PTR blk$[rsp+4], eax

; 438  :     blk[2] = LE32(in_blk[2]) ^ l_key[2];

  00056	48 8b 54 24 48	 mov	 rdx, QWORD PTR in_blk$[rsp]
  0005b	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00060	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  00063	8b 42 08	 mov	 eax, DWORD PTR [rdx+8]
  00066	33 c1		 xor	 eax, ecx
  00068	89 44 24 08	 mov	 DWORD PTR blk$[rsp+8], eax

; 439  :     blk[3] = LE32(in_blk[3]) ^ l_key[3];

  0006c	48 8b 54 24 48	 mov	 rdx, QWORD PTR in_blk$[rsp]
  00071	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00076	8b 48 0c	 mov	 ecx, DWORD PTR [rax+12]
  00079	8b 42 0c	 mov	 eax, DWORD PTR [rdx+12]
  0007c	33 c1		 xor	 eax, ecx
  0007e	89 44 24 0c	 mov	 DWORD PTR blk$[rsp+12], eax

; 440  : 
; 441  :     f_rnd(0); f_rnd(1); f_rnd(2); f_rnd(3);

  00082	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00086	c1 e8 18	 shr	 eax, 24
  00089	0f b6 c0	 movzx	 eax, al
  0008c	c1 e0 02	 shl	 eax, 2
  0008f	4c 63 c0	 movsxd	 r8, eax
  00092	0f b6 44 24 04	 movzx	 eax, BYTE PTR blk$[rsp+4]
  00097	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  0009e	48 63 d0	 movsxd	 rdx, eax
  000a1	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  000a6	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  000ab	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  000ae	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  000b2	44 33 c0	 xor	 r8d, eax
  000b5	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  000b9	c1 e8 08	 shr	 eax, 8
  000bc	0f b6 c0	 movzx	 eax, al
  000bf	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  000c6	48 63 c8	 movsxd	 rcx, eax
  000c9	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  000ce	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  000d2	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  000d6	c1 e8 10	 shr	 eax, 16
  000d9	0f b6 c0	 movzx	 eax, al
  000dc	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  000e3	48 63 d0	 movsxd	 rdx, eax
  000e6	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  000eb	41 8b c0	 mov	 eax, r8d
  000ee	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  000f1	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  000f5	0f b6 04 24	 movzx	 eax, BYTE PTR blk$[rsp]
  000f9	c1 e0 02	 shl	 eax, 2
  000fc	4c 63 c0	 movsxd	 r8, eax
  000ff	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00102	c1 e8 08	 shr	 eax, 8
  00105	0f b6 c0	 movzx	 eax, al
  00108	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  0010f	48 63 d0	 movsxd	 rdx, eax
  00112	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00117	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  0011c	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  0011f	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00123	44 33 c0	 xor	 r8d, eax
  00126	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00129	c1 e8 10	 shr	 eax, 16
  0012c	0f b6 c0	 movzx	 eax, al
  0012f	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00136	48 63 c8	 movsxd	 rcx, eax
  00139	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  0013e	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00142	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00145	c1 e8 18	 shr	 eax, 24
  00148	0f b6 c0	 movzx	 eax, al
  0014b	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00152	48 63 d0	 movsxd	 rdx, eax
  00155	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0015a	41 8b c0	 mov	 eax, r8d
  0015d	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00160	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  00164	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00168	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  0016c	03 c8		 add	 ecx, eax
  0016e	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00173	03 48 20	 add	 ecx, DWORD PTR [rax+32]
  00176	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  0017a	33 c1		 xor	 eax, ecx
  0017c	d1 c8		 ror	 eax, 1
  0017e	89 44 24 08	 mov	 DWORD PTR blk$[rsp+8], eax
  00182	8b 54 24 0c	 mov	 edx, DWORD PTR blk$[rsp+12]
  00186	d1 c2		 rol	 edx, 1
  00188	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  0018c	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00190	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  00193	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00198	03 48 24	 add	 ecx, DWORD PTR [rax+36]
  0019b	8b c2		 mov	 eax, edx
  0019d	33 c1		 xor	 eax, ecx
  0019f	89 44 24 0c	 mov	 DWORD PTR blk$[rsp+12], eax
  001a3	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  001a7	c1 e8 18	 shr	 eax, 24
  001aa	0f b6 c0	 movzx	 eax, al
  001ad	c1 e0 02	 shl	 eax, 2
  001b0	4c 63 c0	 movsxd	 r8, eax
  001b3	0f b6 44 24 0c	 movzx	 eax, BYTE PTR blk$[rsp+12]
  001b8	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  001bf	48 63 d0	 movsxd	 rdx, eax
  001c2	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  001c7	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  001cc	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  001cf	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  001d3	44 33 c0	 xor	 r8d, eax
  001d6	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  001da	c1 e8 08	 shr	 eax, 8
  001dd	0f b6 c0	 movzx	 eax, al
  001e0	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  001e7	48 63 c8	 movsxd	 rcx, eax
  001ea	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  001ef	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  001f3	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  001f7	c1 e8 10	 shr	 eax, 16
  001fa	0f b6 c0	 movzx	 eax, al
  001fd	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00204	48 63 d0	 movsxd	 rdx, eax
  00207	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0020c	41 8b c0	 mov	 eax, r8d
  0020f	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00212	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  00216	0f b6 44 24 08	 movzx	 eax, BYTE PTR blk$[rsp+8]
  0021b	c1 e0 02	 shl	 eax, 2
  0021e	4c 63 c0	 movsxd	 r8, eax
  00221	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00225	c1 e8 08	 shr	 eax, 8
  00228	0f b6 c0	 movzx	 eax, al
  0022b	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00232	48 63 d0	 movsxd	 rdx, eax
  00235	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0023a	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  0023f	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00242	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00246	44 33 c0	 xor	 r8d, eax
  00249	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  0024d	c1 e8 10	 shr	 eax, 16
  00250	0f b6 c0	 movzx	 eax, al
  00253	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  0025a	48 63 c8	 movsxd	 rcx, eax
  0025d	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00262	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00266	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  0026a	c1 e8 18	 shr	 eax, 24
  0026d	0f b6 c0	 movzx	 eax, al
  00270	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00277	48 63 d0	 movsxd	 rdx, eax
  0027a	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0027f	41 8b c0	 mov	 eax, r8d
  00282	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00285	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  00289	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  0028d	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00291	03 c8		 add	 ecx, eax
  00293	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00298	03 48 28	 add	 ecx, DWORD PTR [rax+40]
  0029b	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  0029e	33 c1		 xor	 eax, ecx
  002a0	d1 c8		 ror	 eax, 1
  002a2	89 04 24	 mov	 DWORD PTR blk$[rsp], eax
  002a5	8b 54 24 04	 mov	 edx, DWORD PTR blk$[rsp+4]
  002a9	d1 c2		 rol	 edx, 1
  002ab	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  002af	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  002b3	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  002b6	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  002bb	03 48 2c	 add	 ecx, DWORD PTR [rax+44]
  002be	8b c2		 mov	 eax, edx
  002c0	33 c1		 xor	 eax, ecx
  002c2	89 44 24 04	 mov	 DWORD PTR blk$[rsp+4], eax
  002c6	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  002ca	c1 e8 18	 shr	 eax, 24
  002cd	0f b6 c0	 movzx	 eax, al
  002d0	c1 e0 02	 shl	 eax, 2
  002d3	4c 63 c0	 movsxd	 r8, eax
  002d6	0f b6 44 24 04	 movzx	 eax, BYTE PTR blk$[rsp+4]
  002db	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  002e2	48 63 d0	 movsxd	 rdx, eax
  002e5	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  002ea	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  002ef	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  002f2	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  002f6	44 33 c0	 xor	 r8d, eax
  002f9	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  002fd	c1 e8 08	 shr	 eax, 8
  00300	0f b6 c0	 movzx	 eax, al
  00303	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  0030a	48 63 c8	 movsxd	 rcx, eax
  0030d	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00312	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00316	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  0031a	c1 e8 10	 shr	 eax, 16
  0031d	0f b6 c0	 movzx	 eax, al
  00320	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00327	48 63 d0	 movsxd	 rdx, eax
  0032a	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0032f	41 8b c0	 mov	 eax, r8d
  00332	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00335	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  00339	0f b6 04 24	 movzx	 eax, BYTE PTR blk$[rsp]
  0033d	c1 e0 02	 shl	 eax, 2
  00340	4c 63 c0	 movsxd	 r8, eax
  00343	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00346	c1 e8 08	 shr	 eax, 8
  00349	0f b6 c0	 movzx	 eax, al
  0034c	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00353	48 63 d0	 movsxd	 rdx, eax
  00356	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0035b	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00360	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00363	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00367	44 33 c0	 xor	 r8d, eax
  0036a	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  0036d	c1 e8 10	 shr	 eax, 16
  00370	0f b6 c0	 movzx	 eax, al
  00373	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  0037a	48 63 c8	 movsxd	 rcx, eax
  0037d	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00382	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00386	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00389	c1 e8 18	 shr	 eax, 24
  0038c	0f b6 c0	 movzx	 eax, al
  0038f	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00396	48 63 d0	 movsxd	 rdx, eax
  00399	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0039e	41 8b c0	 mov	 eax, r8d
  003a1	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  003a4	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  003a8	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  003ac	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  003b0	03 c8		 add	 ecx, eax
  003b2	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  003b7	03 48 30	 add	 ecx, DWORD PTR [rax+48]
  003ba	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  003be	33 c1		 xor	 eax, ecx
  003c0	d1 c8		 ror	 eax, 1
  003c2	89 44 24 08	 mov	 DWORD PTR blk$[rsp+8], eax
  003c6	8b 54 24 0c	 mov	 edx, DWORD PTR blk$[rsp+12]
  003ca	d1 c2		 rol	 edx, 1
  003cc	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  003d0	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  003d4	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  003d7	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  003dc	03 48 34	 add	 ecx, DWORD PTR [rax+52]
  003df	8b c2		 mov	 eax, edx
  003e1	33 c1		 xor	 eax, ecx
  003e3	89 44 24 0c	 mov	 DWORD PTR blk$[rsp+12], eax
  003e7	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  003eb	c1 e8 18	 shr	 eax, 24
  003ee	0f b6 c0	 movzx	 eax, al
  003f1	c1 e0 02	 shl	 eax, 2
  003f4	4c 63 c0	 movsxd	 r8, eax
  003f7	0f b6 44 24 0c	 movzx	 eax, BYTE PTR blk$[rsp+12]
  003fc	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00403	48 63 d0	 movsxd	 rdx, eax
  00406	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0040b	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00410	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00413	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00417	44 33 c0	 xor	 r8d, eax
  0041a	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  0041e	c1 e8 08	 shr	 eax, 8
  00421	0f b6 c0	 movzx	 eax, al
  00424	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  0042b	48 63 c8	 movsxd	 rcx, eax
  0042e	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00433	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00437	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  0043b	c1 e8 10	 shr	 eax, 16
  0043e	0f b6 c0	 movzx	 eax, al
  00441	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00448	48 63 d0	 movsxd	 rdx, eax
  0044b	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00450	41 8b c0	 mov	 eax, r8d
  00453	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00456	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  0045a	0f b6 44 24 08	 movzx	 eax, BYTE PTR blk$[rsp+8]
  0045f	c1 e0 02	 shl	 eax, 2
  00462	4c 63 c0	 movsxd	 r8, eax
  00465	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00469	c1 e8 08	 shr	 eax, 8
  0046c	0f b6 c0	 movzx	 eax, al
  0046f	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00476	48 63 d0	 movsxd	 rdx, eax
  00479	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0047e	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00483	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00486	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  0048a	44 33 c0	 xor	 r8d, eax
  0048d	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00491	c1 e8 10	 shr	 eax, 16
  00494	0f b6 c0	 movzx	 eax, al
  00497	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  0049e	48 63 c8	 movsxd	 rcx, eax
  004a1	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  004a6	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  004aa	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  004ae	c1 e8 18	 shr	 eax, 24
  004b1	0f b6 c0	 movzx	 eax, al
  004b4	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  004bb	48 63 d0	 movsxd	 rdx, eax
  004be	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  004c3	41 8b c0	 mov	 eax, r8d
  004c6	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  004c9	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  004cd	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  004d1	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  004d5	03 c8		 add	 ecx, eax
  004d7	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  004dc	03 48 38	 add	 ecx, DWORD PTR [rax+56]
  004df	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  004e2	33 c1		 xor	 eax, ecx
  004e4	d1 c8		 ror	 eax, 1
  004e6	89 04 24	 mov	 DWORD PTR blk$[rsp], eax
  004e9	8b 54 24 04	 mov	 edx, DWORD PTR blk$[rsp+4]
  004ed	d1 c2		 rol	 edx, 1
  004ef	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  004f3	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  004f7	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  004fa	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  004ff	03 48 3c	 add	 ecx, DWORD PTR [rax+60]
  00502	8b c2		 mov	 eax, edx
  00504	33 c1		 xor	 eax, ecx
  00506	89 44 24 04	 mov	 DWORD PTR blk$[rsp+4], eax
  0050a	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  0050e	c1 e8 18	 shr	 eax, 24
  00511	0f b6 c0	 movzx	 eax, al
  00514	c1 e0 02	 shl	 eax, 2
  00517	4c 63 c0	 movsxd	 r8, eax
  0051a	0f b6 44 24 04	 movzx	 eax, BYTE PTR blk$[rsp+4]
  0051f	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00526	48 63 d0	 movsxd	 rdx, eax
  00529	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0052e	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00533	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00536	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  0053a	44 33 c0	 xor	 r8d, eax
  0053d	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00541	c1 e8 08	 shr	 eax, 8
  00544	0f b6 c0	 movzx	 eax, al
  00547	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  0054e	48 63 c8	 movsxd	 rcx, eax
  00551	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00556	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  0055a	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  0055e	c1 e8 10	 shr	 eax, 16
  00561	0f b6 c0	 movzx	 eax, al
  00564	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  0056b	48 63 d0	 movsxd	 rdx, eax
  0056e	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00573	41 8b c0	 mov	 eax, r8d
  00576	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00579	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  0057d	0f b6 04 24	 movzx	 eax, BYTE PTR blk$[rsp]
  00581	c1 e0 02	 shl	 eax, 2
  00584	4c 63 c0	 movsxd	 r8, eax
  00587	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  0058a	c1 e8 08	 shr	 eax, 8
  0058d	0f b6 c0	 movzx	 eax, al
  00590	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00597	48 63 d0	 movsxd	 rdx, eax
  0059a	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0059f	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  005a4	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  005a7	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  005ab	44 33 c0	 xor	 r8d, eax
  005ae	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  005b1	c1 e8 10	 shr	 eax, 16
  005b4	0f b6 c0	 movzx	 eax, al
  005b7	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  005be	48 63 c8	 movsxd	 rcx, eax
  005c1	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  005c6	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  005ca	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  005cd	c1 e8 18	 shr	 eax, 24
  005d0	0f b6 c0	 movzx	 eax, al
  005d3	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  005da	48 63 d0	 movsxd	 rdx, eax
  005dd	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  005e2	41 8b c0	 mov	 eax, r8d
  005e5	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  005e8	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  005ec	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  005f0	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  005f4	03 c8		 add	 ecx, eax
  005f6	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  005fb	03 48 40	 add	 ecx, DWORD PTR [rax+64]
  005fe	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00602	33 c1		 xor	 eax, ecx
  00604	d1 c8		 ror	 eax, 1
  00606	89 44 24 08	 mov	 DWORD PTR blk$[rsp+8], eax
  0060a	8b 54 24 0c	 mov	 edx, DWORD PTR blk$[rsp+12]
  0060e	d1 c2		 rol	 edx, 1
  00610	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00614	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00618	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  0061b	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00620	03 48 44	 add	 ecx, DWORD PTR [rax+68]
  00623	8b c2		 mov	 eax, edx
  00625	33 c1		 xor	 eax, ecx
  00627	89 44 24 0c	 mov	 DWORD PTR blk$[rsp+12], eax
  0062b	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  0062f	c1 e8 18	 shr	 eax, 24
  00632	0f b6 c0	 movzx	 eax, al
  00635	c1 e0 02	 shl	 eax, 2
  00638	4c 63 c0	 movsxd	 r8, eax
  0063b	0f b6 44 24 0c	 movzx	 eax, BYTE PTR blk$[rsp+12]
  00640	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00647	48 63 d0	 movsxd	 rdx, eax
  0064a	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0064f	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00654	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00657	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  0065b	44 33 c0	 xor	 r8d, eax
  0065e	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00662	c1 e8 08	 shr	 eax, 8
  00665	0f b6 c0	 movzx	 eax, al
  00668	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  0066f	48 63 c8	 movsxd	 rcx, eax
  00672	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00677	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  0067b	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  0067f	c1 e8 10	 shr	 eax, 16
  00682	0f b6 c0	 movzx	 eax, al
  00685	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  0068c	48 63 d0	 movsxd	 rdx, eax
  0068f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00694	41 8b c0	 mov	 eax, r8d
  00697	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  0069a	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  0069e	0f b6 44 24 08	 movzx	 eax, BYTE PTR blk$[rsp+8]
  006a3	c1 e0 02	 shl	 eax, 2
  006a6	4c 63 c0	 movsxd	 r8, eax
  006a9	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  006ad	c1 e8 08	 shr	 eax, 8
  006b0	0f b6 c0	 movzx	 eax, al
  006b3	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  006ba	48 63 d0	 movsxd	 rdx, eax
  006bd	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  006c2	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  006c7	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  006ca	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  006ce	44 33 c0	 xor	 r8d, eax
  006d1	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  006d5	c1 e8 10	 shr	 eax, 16
  006d8	0f b6 c0	 movzx	 eax, al
  006db	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  006e2	48 63 c8	 movsxd	 rcx, eax
  006e5	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  006ea	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  006ee	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  006f2	c1 e8 18	 shr	 eax, 24
  006f5	0f b6 c0	 movzx	 eax, al
  006f8	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  006ff	48 63 d0	 movsxd	 rdx, eax
  00702	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00707	41 8b c0	 mov	 eax, r8d
  0070a	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  0070d	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  00711	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00715	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00719	03 c8		 add	 ecx, eax
  0071b	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00720	03 48 48	 add	 ecx, DWORD PTR [rax+72]
  00723	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00726	33 c1		 xor	 eax, ecx
  00728	d1 c8		 ror	 eax, 1
  0072a	89 04 24	 mov	 DWORD PTR blk$[rsp], eax
  0072d	8b 54 24 04	 mov	 edx, DWORD PTR blk$[rsp+4]
  00731	d1 c2		 rol	 edx, 1
  00733	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00737	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  0073b	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  0073e	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00743	03 48 4c	 add	 ecx, DWORD PTR [rax+76]
  00746	8b c2		 mov	 eax, edx
  00748	33 c1		 xor	 eax, ecx
  0074a	89 44 24 04	 mov	 DWORD PTR blk$[rsp+4], eax
  0074e	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00752	c1 e8 18	 shr	 eax, 24
  00755	0f b6 c0	 movzx	 eax, al
  00758	c1 e0 02	 shl	 eax, 2
  0075b	4c 63 c0	 movsxd	 r8, eax
  0075e	0f b6 44 24 04	 movzx	 eax, BYTE PTR blk$[rsp+4]
  00763	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  0076a	48 63 d0	 movsxd	 rdx, eax
  0076d	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00772	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00777	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  0077a	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  0077e	44 33 c0	 xor	 r8d, eax
  00781	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00785	c1 e8 08	 shr	 eax, 8
  00788	0f b6 c0	 movzx	 eax, al
  0078b	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00792	48 63 c8	 movsxd	 rcx, eax
  00795	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  0079a	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  0079e	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  007a2	c1 e8 10	 shr	 eax, 16
  007a5	0f b6 c0	 movzx	 eax, al
  007a8	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  007af	48 63 d0	 movsxd	 rdx, eax
  007b2	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  007b7	41 8b c0	 mov	 eax, r8d
  007ba	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  007bd	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  007c1	0f b6 04 24	 movzx	 eax, BYTE PTR blk$[rsp]
  007c5	c1 e0 02	 shl	 eax, 2
  007c8	4c 63 c0	 movsxd	 r8, eax
  007cb	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  007ce	c1 e8 08	 shr	 eax, 8
  007d1	0f b6 c0	 movzx	 eax, al
  007d4	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  007db	48 63 d0	 movsxd	 rdx, eax
  007de	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  007e3	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  007e8	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  007eb	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  007ef	44 33 c0	 xor	 r8d, eax
  007f2	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  007f5	c1 e8 10	 shr	 eax, 16
  007f8	0f b6 c0	 movzx	 eax, al
  007fb	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00802	48 63 c8	 movsxd	 rcx, eax
  00805	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  0080a	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  0080e	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00811	c1 e8 18	 shr	 eax, 24
  00814	0f b6 c0	 movzx	 eax, al
  00817	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  0081e	48 63 d0	 movsxd	 rdx, eax
  00821	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00826	41 8b c0	 mov	 eax, r8d
  00829	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  0082c	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  00830	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00834	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00838	03 c8		 add	 ecx, eax
  0083a	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  0083f	03 48 50	 add	 ecx, DWORD PTR [rax+80]
  00842	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00846	33 c1		 xor	 eax, ecx
  00848	d1 c8		 ror	 eax, 1
  0084a	89 44 24 08	 mov	 DWORD PTR blk$[rsp+8], eax
  0084e	8b 54 24 0c	 mov	 edx, DWORD PTR blk$[rsp+12]
  00852	d1 c2		 rol	 edx, 1
  00854	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00858	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  0085c	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  0085f	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00864	03 48 54	 add	 ecx, DWORD PTR [rax+84]
  00867	8b c2		 mov	 eax, edx
  00869	33 c1		 xor	 eax, ecx
  0086b	89 44 24 0c	 mov	 DWORD PTR blk$[rsp+12], eax
  0086f	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00873	c1 e8 18	 shr	 eax, 24
  00876	0f b6 c0	 movzx	 eax, al
  00879	c1 e0 02	 shl	 eax, 2
  0087c	4c 63 c0	 movsxd	 r8, eax
  0087f	0f b6 44 24 0c	 movzx	 eax, BYTE PTR blk$[rsp+12]
  00884	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  0088b	48 63 d0	 movsxd	 rdx, eax
  0088e	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00893	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00898	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  0089b	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  0089f	44 33 c0	 xor	 r8d, eax
  008a2	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  008a6	c1 e8 08	 shr	 eax, 8
  008a9	0f b6 c0	 movzx	 eax, al
  008ac	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  008b3	48 63 c8	 movsxd	 rcx, eax
  008b6	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  008bb	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  008bf	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  008c3	c1 e8 10	 shr	 eax, 16
  008c6	0f b6 c0	 movzx	 eax, al
  008c9	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  008d0	48 63 d0	 movsxd	 rdx, eax
  008d3	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  008d8	41 8b c0	 mov	 eax, r8d
  008db	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  008de	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  008e2	0f b6 44 24 08	 movzx	 eax, BYTE PTR blk$[rsp+8]
  008e7	c1 e0 02	 shl	 eax, 2
  008ea	4c 63 c0	 movsxd	 r8, eax
  008ed	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  008f1	c1 e8 08	 shr	 eax, 8
  008f4	0f b6 c0	 movzx	 eax, al
  008f7	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  008fe	48 63 d0	 movsxd	 rdx, eax
  00901	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00906	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  0090b	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  0090e	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00912	44 33 c0	 xor	 r8d, eax
  00915	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00919	c1 e8 10	 shr	 eax, 16
  0091c	0f b6 c0	 movzx	 eax, al
  0091f	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00926	48 63 c8	 movsxd	 rcx, eax
  00929	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  0092e	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00932	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00936	c1 e8 18	 shr	 eax, 24
  00939	0f b6 c0	 movzx	 eax, al
  0093c	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00943	48 63 d0	 movsxd	 rdx, eax
  00946	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0094b	41 8b c0	 mov	 eax, r8d
  0094e	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00951	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  00955	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00959	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  0095d	03 c8		 add	 ecx, eax
  0095f	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00964	03 48 58	 add	 ecx, DWORD PTR [rax+88]
  00967	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  0096a	33 c1		 xor	 eax, ecx
  0096c	d1 c8		 ror	 eax, 1
  0096e	89 04 24	 mov	 DWORD PTR blk$[rsp], eax
  00971	8b 54 24 04	 mov	 edx, DWORD PTR blk$[rsp+4]
  00975	d1 c2		 rol	 edx, 1
  00977	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  0097b	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  0097f	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  00982	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00987	03 48 5c	 add	 ecx, DWORD PTR [rax+92]
  0098a	8b c2		 mov	 eax, edx
  0098c	33 c1		 xor	 eax, ecx
  0098e	89 44 24 04	 mov	 DWORD PTR blk$[rsp+4], eax

; 442  :     f_rnd(4); f_rnd(5); f_rnd(6); f_rnd(7);

  00992	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00996	c1 e8 18	 shr	 eax, 24
  00999	0f b6 c0	 movzx	 eax, al
  0099c	c1 e0 02	 shl	 eax, 2
  0099f	4c 63 c0	 movsxd	 r8, eax
  009a2	0f b6 44 24 04	 movzx	 eax, BYTE PTR blk$[rsp+4]
  009a7	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  009ae	48 63 d0	 movsxd	 rdx, eax
  009b1	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  009b6	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  009bb	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  009be	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  009c2	44 33 c0	 xor	 r8d, eax
  009c5	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  009c9	c1 e8 08	 shr	 eax, 8
  009cc	0f b6 c0	 movzx	 eax, al
  009cf	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  009d6	48 63 c8	 movsxd	 rcx, eax
  009d9	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  009de	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  009e2	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  009e6	c1 e8 10	 shr	 eax, 16
  009e9	0f b6 c0	 movzx	 eax, al
  009ec	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  009f3	48 63 d0	 movsxd	 rdx, eax
  009f6	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  009fb	41 8b c0	 mov	 eax, r8d
  009fe	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00a01	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  00a05	0f b6 04 24	 movzx	 eax, BYTE PTR blk$[rsp]
  00a09	c1 e0 02	 shl	 eax, 2
  00a0c	4c 63 c0	 movsxd	 r8, eax
  00a0f	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00a12	c1 e8 08	 shr	 eax, 8
  00a15	0f b6 c0	 movzx	 eax, al
  00a18	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00a1f	48 63 d0	 movsxd	 rdx, eax
  00a22	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00a27	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00a2c	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00a2f	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00a33	44 33 c0	 xor	 r8d, eax
  00a36	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00a39	c1 e8 10	 shr	 eax, 16
  00a3c	0f b6 c0	 movzx	 eax, al
  00a3f	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00a46	48 63 c8	 movsxd	 rcx, eax
  00a49	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00a4e	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00a52	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00a55	c1 e8 18	 shr	 eax, 24
  00a58	0f b6 c0	 movzx	 eax, al
  00a5b	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00a62	48 63 d0	 movsxd	 rdx, eax
  00a65	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00a6a	41 8b c0	 mov	 eax, r8d
  00a6d	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00a70	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  00a74	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00a78	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00a7c	03 c8		 add	 ecx, eax
  00a7e	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00a83	03 48 60	 add	 ecx, DWORD PTR [rax+96]
  00a86	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00a8a	33 c1		 xor	 eax, ecx
  00a8c	d1 c8		 ror	 eax, 1
  00a8e	89 44 24 08	 mov	 DWORD PTR blk$[rsp+8], eax
  00a92	8b 54 24 0c	 mov	 edx, DWORD PTR blk$[rsp+12]
  00a96	d1 c2		 rol	 edx, 1
  00a98	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00a9c	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00aa0	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  00aa3	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00aa8	03 48 64	 add	 ecx, DWORD PTR [rax+100]
  00aab	8b c2		 mov	 eax, edx
  00aad	33 c1		 xor	 eax, ecx
  00aaf	89 44 24 0c	 mov	 DWORD PTR blk$[rsp+12], eax
  00ab3	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00ab7	c1 e8 18	 shr	 eax, 24
  00aba	0f b6 c0	 movzx	 eax, al
  00abd	c1 e0 02	 shl	 eax, 2
  00ac0	4c 63 c0	 movsxd	 r8, eax
  00ac3	0f b6 44 24 0c	 movzx	 eax, BYTE PTR blk$[rsp+12]
  00ac8	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00acf	48 63 d0	 movsxd	 rdx, eax
  00ad2	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00ad7	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00adc	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00adf	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00ae3	44 33 c0	 xor	 r8d, eax
  00ae6	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00aea	c1 e8 08	 shr	 eax, 8
  00aed	0f b6 c0	 movzx	 eax, al
  00af0	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00af7	48 63 c8	 movsxd	 rcx, eax
  00afa	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00aff	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00b03	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00b07	c1 e8 10	 shr	 eax, 16
  00b0a	0f b6 c0	 movzx	 eax, al
  00b0d	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00b14	48 63 d0	 movsxd	 rdx, eax
  00b17	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00b1c	41 8b c0	 mov	 eax, r8d
  00b1f	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00b22	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  00b26	0f b6 44 24 08	 movzx	 eax, BYTE PTR blk$[rsp+8]
  00b2b	c1 e0 02	 shl	 eax, 2
  00b2e	4c 63 c0	 movsxd	 r8, eax
  00b31	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00b35	c1 e8 08	 shr	 eax, 8
  00b38	0f b6 c0	 movzx	 eax, al
  00b3b	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00b42	48 63 d0	 movsxd	 rdx, eax
  00b45	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00b4a	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00b4f	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00b52	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00b56	44 33 c0	 xor	 r8d, eax
  00b59	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00b5d	c1 e8 10	 shr	 eax, 16
  00b60	0f b6 c0	 movzx	 eax, al
  00b63	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00b6a	48 63 c8	 movsxd	 rcx, eax
  00b6d	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00b72	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00b76	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00b7a	c1 e8 18	 shr	 eax, 24
  00b7d	0f b6 c0	 movzx	 eax, al
  00b80	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00b87	48 63 d0	 movsxd	 rdx, eax
  00b8a	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00b8f	41 8b c0	 mov	 eax, r8d
  00b92	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00b95	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  00b99	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00b9d	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00ba1	03 c8		 add	 ecx, eax
  00ba3	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00ba8	03 48 68	 add	 ecx, DWORD PTR [rax+104]
  00bab	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00bae	33 c1		 xor	 eax, ecx
  00bb0	d1 c8		 ror	 eax, 1
  00bb2	89 04 24	 mov	 DWORD PTR blk$[rsp], eax
  00bb5	8b 54 24 04	 mov	 edx, DWORD PTR blk$[rsp+4]
  00bb9	d1 c2		 rol	 edx, 1
  00bbb	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00bbf	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00bc3	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  00bc6	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00bcb	03 48 6c	 add	 ecx, DWORD PTR [rax+108]
  00bce	8b c2		 mov	 eax, edx
  00bd0	33 c1		 xor	 eax, ecx
  00bd2	89 44 24 04	 mov	 DWORD PTR blk$[rsp+4], eax
  00bd6	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00bda	c1 e8 18	 shr	 eax, 24
  00bdd	0f b6 c0	 movzx	 eax, al
  00be0	c1 e0 02	 shl	 eax, 2
  00be3	4c 63 c0	 movsxd	 r8, eax
  00be6	0f b6 44 24 04	 movzx	 eax, BYTE PTR blk$[rsp+4]
  00beb	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00bf2	48 63 d0	 movsxd	 rdx, eax
  00bf5	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00bfa	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00bff	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00c02	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00c06	44 33 c0	 xor	 r8d, eax
  00c09	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00c0d	c1 e8 08	 shr	 eax, 8
  00c10	0f b6 c0	 movzx	 eax, al
  00c13	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00c1a	48 63 c8	 movsxd	 rcx, eax
  00c1d	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00c22	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00c26	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00c2a	c1 e8 10	 shr	 eax, 16
  00c2d	0f b6 c0	 movzx	 eax, al
  00c30	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00c37	48 63 d0	 movsxd	 rdx, eax
  00c3a	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00c3f	41 8b c0	 mov	 eax, r8d
  00c42	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00c45	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  00c49	0f b6 04 24	 movzx	 eax, BYTE PTR blk$[rsp]
  00c4d	c1 e0 02	 shl	 eax, 2
  00c50	4c 63 c0	 movsxd	 r8, eax
  00c53	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00c56	c1 e8 08	 shr	 eax, 8
  00c59	0f b6 c0	 movzx	 eax, al
  00c5c	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00c63	48 63 d0	 movsxd	 rdx, eax
  00c66	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00c6b	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00c70	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00c73	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00c77	44 33 c0	 xor	 r8d, eax
  00c7a	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00c7d	c1 e8 10	 shr	 eax, 16
  00c80	0f b6 c0	 movzx	 eax, al
  00c83	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00c8a	48 63 c8	 movsxd	 rcx, eax
  00c8d	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00c92	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00c96	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00c99	c1 e8 18	 shr	 eax, 24
  00c9c	0f b6 c0	 movzx	 eax, al
  00c9f	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00ca6	48 63 d0	 movsxd	 rdx, eax
  00ca9	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00cae	41 8b c0	 mov	 eax, r8d
  00cb1	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00cb4	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  00cb8	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00cbc	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00cc0	03 c8		 add	 ecx, eax
  00cc2	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00cc7	03 48 70	 add	 ecx, DWORD PTR [rax+112]
  00cca	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00cce	33 c1		 xor	 eax, ecx
  00cd0	d1 c8		 ror	 eax, 1
  00cd2	89 44 24 08	 mov	 DWORD PTR blk$[rsp+8], eax
  00cd6	8b 54 24 0c	 mov	 edx, DWORD PTR blk$[rsp+12]
  00cda	d1 c2		 rol	 edx, 1
  00cdc	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00ce0	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00ce4	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  00ce7	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00cec	03 48 74	 add	 ecx, DWORD PTR [rax+116]
  00cef	8b c2		 mov	 eax, edx
  00cf1	33 c1		 xor	 eax, ecx
  00cf3	89 44 24 0c	 mov	 DWORD PTR blk$[rsp+12], eax
  00cf7	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00cfb	c1 e8 18	 shr	 eax, 24
  00cfe	0f b6 c0	 movzx	 eax, al
  00d01	c1 e0 02	 shl	 eax, 2
  00d04	4c 63 c0	 movsxd	 r8, eax
  00d07	0f b6 44 24 0c	 movzx	 eax, BYTE PTR blk$[rsp+12]
  00d0c	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00d13	48 63 d0	 movsxd	 rdx, eax
  00d16	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00d1b	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00d20	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00d23	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00d27	44 33 c0	 xor	 r8d, eax
  00d2a	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00d2e	c1 e8 08	 shr	 eax, 8
  00d31	0f b6 c0	 movzx	 eax, al
  00d34	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00d3b	48 63 c8	 movsxd	 rcx, eax
  00d3e	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00d43	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00d47	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00d4b	c1 e8 10	 shr	 eax, 16
  00d4e	0f b6 c0	 movzx	 eax, al
  00d51	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00d58	48 63 d0	 movsxd	 rdx, eax
  00d5b	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00d60	41 8b c0	 mov	 eax, r8d
  00d63	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00d66	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  00d6a	0f b6 44 24 08	 movzx	 eax, BYTE PTR blk$[rsp+8]
  00d6f	c1 e0 02	 shl	 eax, 2
  00d72	4c 63 c0	 movsxd	 r8, eax
  00d75	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00d79	c1 e8 08	 shr	 eax, 8
  00d7c	0f b6 c0	 movzx	 eax, al
  00d7f	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00d86	48 63 d0	 movsxd	 rdx, eax
  00d89	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00d8e	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00d93	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00d96	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00d9a	44 33 c0	 xor	 r8d, eax
  00d9d	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00da1	c1 e8 10	 shr	 eax, 16
  00da4	0f b6 c0	 movzx	 eax, al
  00da7	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00dae	48 63 c8	 movsxd	 rcx, eax
  00db1	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00db6	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00dba	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00dbe	c1 e8 18	 shr	 eax, 24
  00dc1	0f b6 c0	 movzx	 eax, al
  00dc4	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00dcb	48 63 d0	 movsxd	 rdx, eax
  00dce	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00dd3	41 8b c0	 mov	 eax, r8d
  00dd6	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00dd9	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  00ddd	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00de1	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00de5	03 c8		 add	 ecx, eax
  00de7	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00dec	03 48 78	 add	 ecx, DWORD PTR [rax+120]
  00def	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00df2	33 c1		 xor	 eax, ecx
  00df4	d1 c8		 ror	 eax, 1
  00df6	89 04 24	 mov	 DWORD PTR blk$[rsp], eax
  00df9	8b 54 24 04	 mov	 edx, DWORD PTR blk$[rsp+4]
  00dfd	d1 c2		 rol	 edx, 1
  00dff	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00e03	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00e07	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  00e0a	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00e0f	03 48 7c	 add	 ecx, DWORD PTR [rax+124]
  00e12	8b c2		 mov	 eax, edx
  00e14	33 c1		 xor	 eax, ecx
  00e16	89 44 24 04	 mov	 DWORD PTR blk$[rsp+4], eax
  00e1a	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00e1e	c1 e8 18	 shr	 eax, 24
  00e21	0f b6 c0	 movzx	 eax, al
  00e24	c1 e0 02	 shl	 eax, 2
  00e27	4c 63 c0	 movsxd	 r8, eax
  00e2a	0f b6 44 24 04	 movzx	 eax, BYTE PTR blk$[rsp+4]
  00e2f	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00e36	48 63 d0	 movsxd	 rdx, eax
  00e39	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00e3e	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00e43	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00e46	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00e4a	44 33 c0	 xor	 r8d, eax
  00e4d	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00e51	c1 e8 08	 shr	 eax, 8
  00e54	0f b6 c0	 movzx	 eax, al
  00e57	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00e5e	48 63 c8	 movsxd	 rcx, eax
  00e61	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00e66	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00e6a	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  00e6e	c1 e8 10	 shr	 eax, 16
  00e71	0f b6 c0	 movzx	 eax, al
  00e74	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00e7b	48 63 d0	 movsxd	 rdx, eax
  00e7e	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00e83	41 8b c0	 mov	 eax, r8d
  00e86	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00e89	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  00e8d	0f b6 04 24	 movzx	 eax, BYTE PTR blk$[rsp]
  00e91	c1 e0 02	 shl	 eax, 2
  00e94	4c 63 c0	 movsxd	 r8, eax
  00e97	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00e9a	c1 e8 08	 shr	 eax, 8
  00e9d	0f b6 c0	 movzx	 eax, al
  00ea0	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00ea7	48 63 d0	 movsxd	 rdx, eax
  00eaa	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00eaf	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00eb4	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00eb7	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00ebb	44 33 c0	 xor	 r8d, eax
  00ebe	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00ec1	c1 e8 10	 shr	 eax, 16
  00ec4	0f b6 c0	 movzx	 eax, al
  00ec7	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00ece	48 63 c8	 movsxd	 rcx, eax
  00ed1	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00ed6	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00eda	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  00edd	c1 e8 18	 shr	 eax, 24
  00ee0	0f b6 c0	 movzx	 eax, al
  00ee3	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00eea	48 63 d0	 movsxd	 rdx, eax
  00eed	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00ef2	41 8b c0	 mov	 eax, r8d
  00ef5	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00ef8	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  00efc	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00f00	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00f04	03 c8		 add	 ecx, eax
  00f06	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00f0b	03 88 80 00 00
	00		 add	 ecx, DWORD PTR [rax+128]
  00f11	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00f15	33 c1		 xor	 eax, ecx
  00f17	d1 c8		 ror	 eax, 1
  00f19	89 44 24 08	 mov	 DWORD PTR blk$[rsp+8], eax
  00f1d	8b 54 24 0c	 mov	 edx, DWORD PTR blk$[rsp+12]
  00f21	d1 c2		 rol	 edx, 1
  00f23	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  00f27	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  00f2b	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  00f2e	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  00f33	03 88 84 00 00
	00		 add	 ecx, DWORD PTR [rax+132]
  00f39	8b c2		 mov	 eax, edx
  00f3b	33 c1		 xor	 eax, ecx
  00f3d	89 44 24 0c	 mov	 DWORD PTR blk$[rsp+12], eax
  00f41	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00f45	c1 e8 18	 shr	 eax, 24
  00f48	0f b6 c0	 movzx	 eax, al
  00f4b	c1 e0 02	 shl	 eax, 2
  00f4e	4c 63 c0	 movsxd	 r8, eax
  00f51	0f b6 44 24 0c	 movzx	 eax, BYTE PTR blk$[rsp+12]
  00f56	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00f5d	48 63 d0	 movsxd	 rdx, eax
  00f60	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00f65	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00f6a	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00f6d	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00f71	44 33 c0	 xor	 r8d, eax
  00f74	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00f78	c1 e8 08	 shr	 eax, 8
  00f7b	0f b6 c0	 movzx	 eax, al
  00f7e	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00f85	48 63 c8	 movsxd	 rcx, eax
  00f88	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00f8d	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  00f91	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  00f95	c1 e8 10	 shr	 eax, 16
  00f98	0f b6 c0	 movzx	 eax, al
  00f9b	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  00fa2	48 63 d0	 movsxd	 rdx, eax
  00fa5	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00faa	41 8b c0	 mov	 eax, r8d
  00fad	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00fb0	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  00fb4	0f b6 44 24 08	 movzx	 eax, BYTE PTR blk$[rsp+8]
  00fb9	c1 e0 02	 shl	 eax, 2
  00fbc	4c 63 c0	 movsxd	 r8, eax
  00fbf	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00fc3	c1 e8 08	 shr	 eax, 8
  00fc6	0f b6 c0	 movzx	 eax, al
  00fc9	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00fd0	48 63 d0	 movsxd	 rdx, eax
  00fd3	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00fd8	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  00fdd	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00fe0	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  00fe4	44 33 c0	 xor	 r8d, eax
  00fe7	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  00feb	c1 e8 10	 shr	 eax, 16
  00fee	0f b6 c0	 movzx	 eax, al
  00ff1	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00ff8	48 63 c8	 movsxd	 rcx, eax
  00ffb	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  01000	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  01004	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  01008	c1 e8 18	 shr	 eax, 24
  0100b	0f b6 c0	 movzx	 eax, al
  0100e	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  01015	48 63 d0	 movsxd	 rdx, eax
  01018	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0101d	41 8b c0	 mov	 eax, r8d
  01020	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  01023	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  01027	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  0102b	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  0102f	03 c8		 add	 ecx, eax
  01031	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  01036	03 88 88 00 00
	00		 add	 ecx, DWORD PTR [rax+136]
  0103c	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  0103f	33 c1		 xor	 eax, ecx
  01041	d1 c8		 ror	 eax, 1
  01043	89 04 24	 mov	 DWORD PTR blk$[rsp], eax
  01046	8b 54 24 04	 mov	 edx, DWORD PTR blk$[rsp+4]
  0104a	d1 c2		 rol	 edx, 1
  0104c	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  01050	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  01054	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  01057	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  0105c	03 88 8c 00 00
	00		 add	 ecx, DWORD PTR [rax+140]
  01062	8b c2		 mov	 eax, edx
  01064	33 c1		 xor	 eax, ecx
  01066	89 44 24 04	 mov	 DWORD PTR blk$[rsp+4], eax
  0106a	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  0106e	c1 e8 18	 shr	 eax, 24
  01071	0f b6 c0	 movzx	 eax, al
  01074	c1 e0 02	 shl	 eax, 2
  01077	4c 63 c0	 movsxd	 r8, eax
  0107a	0f b6 44 24 04	 movzx	 eax, BYTE PTR blk$[rsp+4]
  0107f	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  01086	48 63 d0	 movsxd	 rdx, eax
  01089	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0108e	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  01093	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  01096	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  0109a	44 33 c0	 xor	 r8d, eax
  0109d	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  010a1	c1 e8 08	 shr	 eax, 8
  010a4	0f b6 c0	 movzx	 eax, al
  010a7	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  010ae	48 63 c8	 movsxd	 rcx, eax
  010b1	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  010b6	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  010ba	8b 44 24 04	 mov	 eax, DWORD PTR blk$[rsp+4]
  010be	c1 e8 10	 shr	 eax, 16
  010c1	0f b6 c0	 movzx	 eax, al
  010c4	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  010cb	48 63 d0	 movsxd	 rdx, eax
  010ce	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  010d3	41 8b c0	 mov	 eax, r8d
  010d6	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  010d9	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  010dd	0f b6 04 24	 movzx	 eax, BYTE PTR blk$[rsp]
  010e1	c1 e0 02	 shl	 eax, 2
  010e4	4c 63 c0	 movsxd	 r8, eax
  010e7	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  010ea	c1 e8 08	 shr	 eax, 8
  010ed	0f b6 c0	 movzx	 eax, al
  010f0	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  010f7	48 63 d0	 movsxd	 rdx, eax
  010fa	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  010ff	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  01104	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  01107	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  0110b	44 33 c0	 xor	 r8d, eax
  0110e	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  01111	c1 e8 10	 shr	 eax, 16
  01114	0f b6 c0	 movzx	 eax, al
  01117	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  0111e	48 63 c8	 movsxd	 rcx, eax
  01121	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  01126	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  0112a	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  0112d	c1 e8 18	 shr	 eax, 24
  01130	0f b6 c0	 movzx	 eax, al
  01133	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  0113a	48 63 d0	 movsxd	 rdx, eax
  0113d	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  01142	41 8b c0	 mov	 eax, r8d
  01145	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  01148	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  0114c	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  01150	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  01154	03 c8		 add	 ecx, eax
  01156	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  0115b	03 88 90 00 00
	00		 add	 ecx, DWORD PTR [rax+144]
  01161	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  01165	33 c1		 xor	 eax, ecx
  01167	d1 c8		 ror	 eax, 1
  01169	89 44 24 08	 mov	 DWORD PTR blk$[rsp+8], eax
  0116d	8b 54 24 0c	 mov	 edx, DWORD PTR blk$[rsp+12]
  01171	d1 c2		 rol	 edx, 1
  01173	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  01177	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  0117b	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  0117e	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  01183	03 88 94 00 00
	00		 add	 ecx, DWORD PTR [rax+148]
  01189	8b c2		 mov	 eax, edx
  0118b	33 c1		 xor	 eax, ecx
  0118d	89 44 24 0c	 mov	 DWORD PTR blk$[rsp+12], eax
  01191	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  01195	c1 e8 18	 shr	 eax, 24
  01198	0f b6 c0	 movzx	 eax, al
  0119b	c1 e0 02	 shl	 eax, 2
  0119e	4c 63 c0	 movsxd	 r8, eax
  011a1	0f b6 44 24 0c	 movzx	 eax, BYTE PTR blk$[rsp+12]
  011a6	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  011ad	48 63 d0	 movsxd	 rdx, eax
  011b0	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  011b5	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  011ba	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  011bd	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  011c1	44 33 c0	 xor	 r8d, eax
  011c4	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  011c8	c1 e8 08	 shr	 eax, 8
  011cb	0f b6 c0	 movzx	 eax, al
  011ce	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  011d5	48 63 c8	 movsxd	 rcx, eax
  011d8	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  011dd	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  011e1	8b 44 24 0c	 mov	 eax, DWORD PTR blk$[rsp+12]
  011e5	c1 e8 10	 shr	 eax, 16
  011e8	0f b6 c0	 movzx	 eax, al
  011eb	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  011f2	48 63 d0	 movsxd	 rdx, eax
  011f5	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  011fa	41 8b c0	 mov	 eax, r8d
  011fd	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  01200	89 44 24 20	 mov	 DWORD PTR t1$[rsp], eax
  01204	0f b6 44 24 08	 movzx	 eax, BYTE PTR blk$[rsp+8]
  01209	c1 e0 02	 shl	 eax, 2
  0120c	4c 63 c0	 movsxd	 r8, eax
  0120f	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  01213	c1 e8 08	 shr	 eax, 8
  01216	0f b6 c0	 movzx	 eax, al
  01219	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  01220	48 63 d0	 movsxd	 rdx, eax
  01223	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  01228	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  0122d	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  01230	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  01234	44 33 c0	 xor	 r8d, eax
  01237	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  0123b	c1 e8 10	 shr	 eax, 16
  0123e	0f b6 c0	 movzx	 eax, al
  01241	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  01248	48 63 c8	 movsxd	 rcx, eax
  0124b	48 8b 44 24 10	 mov	 rax, QWORD PTR mk_tab$[rsp]
  01250	44 33 04 88	 xor	 r8d, DWORD PTR [rax+rcx*4]
  01254	8b 44 24 08	 mov	 eax, DWORD PTR blk$[rsp+8]
  01258	c1 e8 18	 shr	 eax, 24
  0125b	0f b6 c0	 movzx	 eax, al
  0125e	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  01265	48 63 d0	 movsxd	 rdx, eax
  01268	48 8b 4c 24 10	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0126d	41 8b c0	 mov	 eax, r8d
  01270	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  01273	89 44 24 24	 mov	 DWORD PTR t0$[rsp], eax
  01277	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  0127b	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  0127f	03 c8		 add	 ecx, eax
  01281	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  01286	03 88 98 00 00
	00		 add	 ecx, DWORD PTR [rax+152]
  0128c	8b 04 24	 mov	 eax, DWORD PTR blk$[rsp]
  0128f	33 c1		 xor	 eax, ecx
  01291	d1 c8		 ror	 eax, 1
  01293	89 04 24	 mov	 DWORD PTR blk$[rsp], eax
  01296	8b 54 24 04	 mov	 edx, DWORD PTR blk$[rsp+4]
  0129a	d1 c2		 rol	 edx, 1
  0129c	8b 4c 24 24	 mov	 ecx, DWORD PTR t0$[rsp]
  012a0	8b 44 24 20	 mov	 eax, DWORD PTR t1$[rsp]
  012a4	8d 0c 41	 lea	 ecx, DWORD PTR [rcx+rax*2]
  012a7	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  012ac	03 88 9c 00 00
	00		 add	 ecx, DWORD PTR [rax+156]
  012b2	8b c2		 mov	 eax, edx
  012b4	33 c1		 xor	 eax, ecx
  012b6	89 44 24 04	 mov	 DWORD PTR blk$[rsp+4], eax

; 443  : 
; 444  :     out_blk[0] = LE32(blk[2] ^ l_key[4]);

  012ba	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  012bf	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  012c2	8b 4c 24 08	 mov	 ecx, DWORD PTR blk$[rsp+8]
  012c6	33 c8		 xor	 ecx, eax
  012c8	48 8b 44 24 50	 mov	 rax, QWORD PTR out_blk$[rsp]
  012cd	89 08		 mov	 DWORD PTR [rax], ecx

; 445  :     out_blk[1] = LE32(blk[3] ^ l_key[5]);

  012cf	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  012d4	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  012d7	8b 4c 24 0c	 mov	 ecx, DWORD PTR blk$[rsp+12]
  012db	33 c8		 xor	 ecx, eax
  012dd	48 8b 44 24 50	 mov	 rax, QWORD PTR out_blk$[rsp]
  012e2	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 446  :     out_blk[2] = LE32(blk[0] ^ l_key[6]);

  012e5	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  012ea	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  012ed	8b 0c 24	 mov	 ecx, DWORD PTR blk$[rsp]
  012f0	33 c8		 xor	 ecx, eax
  012f2	48 8b 44 24 50	 mov	 rax, QWORD PTR out_blk$[rsp]
  012f7	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 447  :     out_blk[3] = LE32(blk[1] ^ l_key[7]); 

  012fa	48 8b 44 24 18	 mov	 rax, QWORD PTR l_key$[rsp]
  012ff	8b 40 1c	 mov	 eax, DWORD PTR [rax+28]
  01302	8b 4c 24 04	 mov	 ecx, DWORD PTR blk$[rsp+4]
  01306	33 c8		 xor	 ecx, eax
  01308	48 8b 44 24 50	 mov	 rax, QWORD PTR out_blk$[rsp]
  0130d	89 48 0c	 mov	 DWORD PTR [rax+12], ecx

; 448  : };

  01310	48 83 c4 38	 add	 rsp, 56			; 00000038H
  01314	c3		 ret	 0
twofish_encrypt ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mds_rem DD imagerel mds_rem
	DD	imagerel mds_rem+221
	DD	imagerel $unwind$mds_rem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mds_rem DD 010c01H
	DD	0220cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mds_rem
_TEXT	SEGMENT
i$ = 0
u$ = 4
t$ = 8
p0$ = 32
p1$ = 40
mds_rem	PROC						; COMDAT

; 340  : {   u4byte  i, t, u;

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 18	 sub	 rsp, 24

; 341  : 
; 342  :     for(i = 0; i < 8; ++i)

  0000c	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
  00013	eb 09		 jmp	 SHORT $LN5@mds_rem
$LN4@mds_rem:
  00015	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN5@mds_rem:
  0001e	83 3c 24 08	 cmp	 DWORD PTR i$[rsp], 8
  00022	0f 83 ac 00 00
	00		 jae	 $LN3@mds_rem

; 343  :     {
; 344  :         t = p1 >> 24;   // get most significant coefficient

  00028	8b 44 24 28	 mov	 eax, DWORD PTR p1$[rsp]
  0002c	c1 e8 18	 shr	 eax, 24
  0002f	89 44 24 08	 mov	 DWORD PTR t$[rsp], eax

; 345  :         
; 346  :         p1 = (p1 << 8) | (p0 >> 24); p0 <<= 8;  // shift others up

  00033	8b 44 24 28	 mov	 eax, DWORD PTR p1$[rsp]
  00037	c1 e0 08	 shl	 eax, 8
  0003a	8b 4c 24 20	 mov	 ecx, DWORD PTR p0$[rsp]
  0003e	c1 e9 18	 shr	 ecx, 24
  00041	0b c1		 or	 eax, ecx
  00043	89 44 24 28	 mov	 DWORD PTR p1$[rsp], eax
  00047	8b 44 24 20	 mov	 eax, DWORD PTR p0$[rsp]
  0004b	c1 e0 08	 shl	 eax, 8
  0004e	89 44 24 20	 mov	 DWORD PTR p0$[rsp], eax

; 347  :             
; 348  :         // multiply t by a (the primitive element - i.e. left shift)
; 349  : 
; 350  :         u = (t << 1); 

  00052	8b 44 24 08	 mov	 eax, DWORD PTR t$[rsp]
  00056	d1 e0		 shl	 eax, 1
  00058	89 44 24 04	 mov	 DWORD PTR u$[rsp], eax

; 351  :         
; 352  :         if(t & 0x80)            // subtract modular polynomial on overflow

  0005c	8b 44 24 08	 mov	 eax, DWORD PTR t$[rsp]
  00060	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00065	85 c0		 test	 eax, eax
  00067	74 0d		 je	 SHORT $LN2@mds_rem

; 353  :         
; 354  :             u ^= G_MOD; 

  00069	8b 44 24 04	 mov	 eax, DWORD PTR u$[rsp]
  0006d	35 4d 01 00 00	 xor	 eax, 333		; 0000014dH
  00072	89 44 24 04	 mov	 DWORD PTR u$[rsp], eax
$LN2@mds_rem:

; 355  : 
; 356  :         p1 ^= t ^ (u << 16);    // remove t * (a * x^2 + 1)  

  00076	8b 44 24 04	 mov	 eax, DWORD PTR u$[rsp]
  0007a	c1 e0 10	 shl	 eax, 16
  0007d	8b 4c 24 08	 mov	 ecx, DWORD PTR t$[rsp]
  00081	33 c8		 xor	 ecx, eax
  00083	8b 44 24 28	 mov	 eax, DWORD PTR p1$[rsp]
  00087	33 c1		 xor	 eax, ecx
  00089	89 44 24 28	 mov	 DWORD PTR p1$[rsp], eax

; 357  : 
; 358  :         u ^= (t >> 1);          // form u = a * t + t / a = t * (a + 1 / a); 

  0008d	8b 4c 24 08	 mov	 ecx, DWORD PTR t$[rsp]
  00091	d1 e9		 shr	 ecx, 1
  00093	8b 44 24 04	 mov	 eax, DWORD PTR u$[rsp]
  00097	33 c1		 xor	 eax, ecx
  00099	89 44 24 04	 mov	 DWORD PTR u$[rsp], eax

; 359  :         
; 360  :         if(t & 0x01)            // add the modular polynomial on underflow

  0009d	8b 44 24 08	 mov	 eax, DWORD PTR t$[rsp]
  000a1	83 e0 01	 and	 eax, 1
  000a4	85 c0		 test	 eax, eax
  000a6	74 0d		 je	 SHORT $LN1@mds_rem

; 361  :         
; 362  :             u ^= G_MOD >> 1;

  000a8	8b 44 24 04	 mov	 eax, DWORD PTR u$[rsp]
  000ac	35 a6 00 00 00	 xor	 eax, 166		; 000000a6H
  000b1	89 44 24 04	 mov	 DWORD PTR u$[rsp], eax
$LN1@mds_rem:

; 363  : 
; 364  :         p1 ^= (u << 24) | (u << 8); // remove t * (a + 1/a) * (x^3 + x)

  000b5	8b 4c 24 04	 mov	 ecx, DWORD PTR u$[rsp]
  000b9	c1 e1 18	 shl	 ecx, 24
  000bc	8b 44 24 04	 mov	 eax, DWORD PTR u$[rsp]
  000c0	c1 e0 08	 shl	 eax, 8
  000c3	0b c8		 or	 ecx, eax
  000c5	8b 44 24 28	 mov	 eax, DWORD PTR p1$[rsp]
  000c9	33 c1		 xor	 eax, ecx
  000cb	89 44 24 28	 mov	 DWORD PTR p1$[rsp], eax

; 365  :     }

  000cf	e9 41 ff ff ff	 jmp	 $LN4@mds_rem
$LN3@mds_rem:

; 366  : 
; 367  :     return p1;

  000d4	8b 44 24 28	 mov	 eax, DWORD PTR p1$[rsp]

; 368  : };

  000d8	48 83 c4 18	 add	 rsp, 24
  000dc	c3		 ret	 0
mds_rem	ENDP
m_tab	DD	0400H DUP (?)
q_tab	DB	0200H DUP (?)
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_mk_tab DD imagerel gen_mk_tab
	DD	imagerel gen_mk_tab+1849
	DD	imagerel $unwind$gen_mk_tab
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_mk_tab DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT gen_mk_tab
_TEXT	SEGMENT
i$ = 0
mk_tab$ = 8
by$ = 16
tv66 = 20
instance$ = 48
key$ = 56
gen_mk_tab PROC						; COMDAT

; 242  : {   u4byte  i;

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 243  :     u1byte  by;
; 244  : 
; 245  : 	u4byte *mk_tab = instance->mk_tab;

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR instance$[rsp]
  00013	48 05 b0 00 00
	00		 add	 rax, 176		; 000000b0H
  00019	48 89 44 24 08	 mov	 QWORD PTR mk_tab$[rsp], rax

; 246  : 
; 247  :     switch(instance->k_len)

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR instance$[rsp]
  00023	8b 80 b0 10 00
	00		 mov	 eax, DWORD PTR [rax+4272]
  00029	89 44 24 14	 mov	 DWORD PTR tv66[rsp], eax
  0002d	83 7c 24 14 02	 cmp	 DWORD PTR tv66[rsp], 2
  00032	74 1b		 je	 SHORT $LN12@gen_mk_tab
  00034	83 7c 24 14 03	 cmp	 DWORD PTR tv66[rsp], 3
  00039	0f 84 db 01 00
	00		 je	 $LN8@gen_mk_tab
  0003f	83 7c 24 14 04	 cmp	 DWORD PTR tv66[rsp], 4
  00044	0f 84 1e 04 00
	00		 je	 $LN4@gen_mk_tab
  0004a	e9 e5 06 00 00	 jmp	 $LN13@gen_mk_tab
$LN12@gen_mk_tab:

; 248  :     {
; 249  :     case 2: for(i = 0; i < 256; ++i)

  0004f	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
  00056	eb 09		 jmp	 SHORT $LN11@gen_mk_tab
$LN10@gen_mk_tab:
  00058	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  0005b	83 c0 01	 add	 eax, 1
  0005e	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN11@gen_mk_tab:
  00061	81 3c 24 00 01
	00 00		 cmp	 DWORD PTR i$[rsp], 256	; 00000100H
  00068	0f 83 a7 01 00
	00		 jae	 $LN9@gen_mk_tab

; 250  :             {
; 251  :                 by = (u1byte)i;

  0006e	0f b6 04 24	 movzx	 eax, BYTE PTR i$[rsp]
  00072	88 44 24 10	 mov	 BYTE PTR by$[rsp], al

; 252  : #ifdef ONE_STEP
; 253  :                 mk_tab[0 + 4*i] = mds(0, q20(by)); mk_tab[1 + 4*i] = mds(1, q21(by));

  00076	0f b6 4c 24 10	 movzx	 ecx, BYTE PTR by$[rsp]
  0007b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  00082	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  00086	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  0008b	0f b6 48 04	 movzx	 ecx, BYTE PTR [rax+4]
  0008f	8b c2		 mov	 eax, edx
  00091	33 c1		 xor	 eax, ecx
  00093	48 63 c8	 movsxd	 rcx, eax
  00096	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  0009d	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  000a1	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  000a6	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  000a9	8b c2		 mov	 eax, edx
  000ab	33 c1		 xor	 eax, ecx
  000ad	4c 63 c8	 movsxd	 r9, eax
  000b0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:m_tab
  000b7	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  000ba	c1 e0 02	 shl	 eax, 2
  000bd	8b d0		 mov	 edx, eax
  000bf	48 8b 4c 24 08	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  000c4	43 8b 04 88	 mov	 eax, DWORD PTR [r8+r9*4]
  000c8	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax
  000cb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:m_tab
  000d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:q_tab
  000d9	0f b6 44 24 10	 movzx	 eax, BYTE PTR by$[rsp]
  000de	0f b6 94 01 00
	01 00 00	 movzx	 edx, BYTE PTR [rcx+rax+256]
  000e6	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  000eb	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  000ee	c1 e8 08	 shr	 eax, 8
  000f1	0f b6 c8	 movzx	 ecx, al
  000f4	8b c2		 mov	 eax, edx
  000f6	33 c1		 xor	 eax, ecx
  000f8	48 63 c8	 movsxd	 rcx, eax
  000fb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  00102	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  00106	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  0010b	8b 00		 mov	 eax, DWORD PTR [rax]
  0010d	c1 e8 08	 shr	 eax, 8
  00110	0f b6 c8	 movzx	 ecx, al
  00113	8b c2		 mov	 eax, edx
  00115	33 c1		 xor	 eax, ecx
  00117	4c 63 c0	 movsxd	 r8, eax
  0011a	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  0011d	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00124	8b d0		 mov	 edx, eax
  00126	48 8b 4c 24 08	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0012b	43 8b 84 81 00
	04 00 00	 mov	 eax, DWORD PTR [r9+r8*4+1024]
  00133	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax

; 254  :                 mk_tab[2 + 4*i] = mds(2, q22(by)); mk_tab[3 + 4*i] = mds(3, q23(by));

  00136	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:m_tab
  0013d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:q_tab
  00144	0f b6 4c 24 10	 movzx	 ecx, BYTE PTR by$[rsp]
  00149	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  00150	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  00154	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  00159	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0015c	c1 e8 10	 shr	 eax, 16
  0015f	0f b6 c8	 movzx	 ecx, al
  00162	8b c2		 mov	 eax, edx
  00164	33 c1		 xor	 eax, ecx
  00166	48 98		 cdqe
  00168	41 0f b6 94 00
	00 01 00 00	 movzx	 edx, BYTE PTR [r8+rax+256]
  00171	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  00176	8b 00		 mov	 eax, DWORD PTR [rax]
  00178	c1 e8 10	 shr	 eax, 16
  0017b	0f b6 c8	 movzx	 ecx, al
  0017e	8b c2		 mov	 eax, edx
  00180	33 c1		 xor	 eax, ecx
  00182	4c 63 c0	 movsxd	 r8, eax
  00185	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00188	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  0018f	8b d0		 mov	 edx, eax
  00191	48 8b 4c 24 08	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00196	43 8b 84 81 00
	08 00 00	 mov	 eax, DWORD PTR [r9+r8*4+2048]
  0019e	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax
  001a1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:m_tab
  001a8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:q_tab
  001af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:q_tab
  001b6	0f b6 44 24 10	 movzx	 eax, BYTE PTR by$[rsp]
  001bb	0f b6 94 01 00
	01 00 00	 movzx	 edx, BYTE PTR [rcx+rax+256]
  001c3	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  001c8	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  001cb	c1 e8 18	 shr	 eax, 24
  001ce	0f b6 c8	 movzx	 ecx, al
  001d1	8b c2		 mov	 eax, edx
  001d3	33 c1		 xor	 eax, ecx
  001d5	48 98		 cdqe
  001d7	41 0f b6 94 00
	00 01 00 00	 movzx	 edx, BYTE PTR [r8+rax+256]
  001e0	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  001e5	8b 00		 mov	 eax, DWORD PTR [rax]
  001e7	c1 e8 18	 shr	 eax, 24
  001ea	0f b6 c8	 movzx	 ecx, al
  001ed	8b c2		 mov	 eax, edx
  001ef	33 c1		 xor	 eax, ecx
  001f1	4c 63 c0	 movsxd	 r8, eax
  001f4	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  001f7	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  001fe	8b d0		 mov	 edx, eax
  00200	48 8b 4c 24 08	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00205	43 8b 84 81 00
	0c 00 00	 mov	 eax, DWORD PTR [r9+r8*4+3072]
  0020d	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax

; 255  : #else
; 256  :                 sb[0][i] = q20(by); sb[1][i] = q21(by); 
; 257  :                 sb[2][i] = q22(by); sb[3][i] = q23(by);
; 258  : #endif
; 259  :             }

  00210	e9 43 fe ff ff	 jmp	 $LN10@gen_mk_tab
$LN9@gen_mk_tab:

; 260  :             break;

  00215	e9 1a 05 00 00	 jmp	 $LN13@gen_mk_tab
$LN8@gen_mk_tab:

; 261  :     
; 262  :     case 3: for(i = 0; i < 256; ++i)

  0021a	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
  00221	eb 09		 jmp	 SHORT $LN7@gen_mk_tab
$LN6@gen_mk_tab:
  00223	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00226	83 c0 01	 add	 eax, 1
  00229	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN7@gen_mk_tab:
  0022c	81 3c 24 00 01
	00 00		 cmp	 DWORD PTR i$[rsp], 256	; 00000100H
  00233	0f 83 2a 02 00
	00		 jae	 $LN5@gen_mk_tab

; 263  :             {
; 264  :                 by = (u1byte)i;

  00239	0f b6 04 24	 movzx	 eax, BYTE PTR i$[rsp]
  0023d	88 44 24 10	 mov	 BYTE PTR by$[rsp], al

; 265  : #ifdef ONE_STEP
; 266  :                 mk_tab[0 + 4*i] = mds(0, q30(by)); mk_tab[1 + 4*i] = mds(1, q31(by));

  00241	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:q_tab
  00248	0f b6 44 24 10	 movzx	 eax, BYTE PTR by$[rsp]
  0024d	0f b6 94 01 00
	01 00 00	 movzx	 edx, BYTE PTR [rcx+rax+256]
  00255	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  0025a	0f b6 48 08	 movzx	 ecx, BYTE PTR [rax+8]
  0025e	8b c2		 mov	 eax, edx
  00260	33 c1		 xor	 eax, ecx
  00262	48 63 c8	 movsxd	 rcx, eax
  00265	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  0026c	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  00270	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  00275	0f b6 48 04	 movzx	 ecx, BYTE PTR [rax+4]
  00279	8b c2		 mov	 eax, edx
  0027b	33 c1		 xor	 eax, ecx
  0027d	48 63 c8	 movsxd	 rcx, eax
  00280	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  00287	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  0028b	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  00290	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00293	8b c2		 mov	 eax, edx
  00295	33 c1		 xor	 eax, ecx
  00297	4c 63 c8	 movsxd	 r9, eax
  0029a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:m_tab
  002a1	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  002a4	c1 e0 02	 shl	 eax, 2
  002a7	8b d0		 mov	 edx, eax
  002a9	48 8b 4c 24 08	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  002ae	43 8b 04 88	 mov	 eax, DWORD PTR [r8+r9*4]
  002b2	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax
  002b5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:m_tab
  002bc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:q_tab
  002c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:q_tab
  002ca	0f b6 44 24 10	 movzx	 eax, BYTE PTR by$[rsp]
  002cf	0f b6 94 01 00
	01 00 00	 movzx	 edx, BYTE PTR [rcx+rax+256]
  002d7	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  002dc	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  002df	c1 e8 08	 shr	 eax, 8
  002e2	0f b6 c8	 movzx	 ecx, al
  002e5	8b c2		 mov	 eax, edx
  002e7	33 c1		 xor	 eax, ecx
  002e9	48 98		 cdqe
  002eb	41 0f b6 94 00
	00 01 00 00	 movzx	 edx, BYTE PTR [r8+rax+256]
  002f4	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  002f9	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  002fc	c1 e8 08	 shr	 eax, 8
  002ff	0f b6 c8	 movzx	 ecx, al
  00302	8b c2		 mov	 eax, edx
  00304	33 c1		 xor	 eax, ecx
  00306	48 63 c8	 movsxd	 rcx, eax
  00309	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  00310	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  00314	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  00319	8b 00		 mov	 eax, DWORD PTR [rax]
  0031b	c1 e8 08	 shr	 eax, 8
  0031e	0f b6 c8	 movzx	 ecx, al
  00321	8b c2		 mov	 eax, edx
  00323	33 c1		 xor	 eax, ecx
  00325	4c 63 c0	 movsxd	 r8, eax
  00328	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  0032b	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  00332	8b d0		 mov	 edx, eax
  00334	48 8b 4c 24 08	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00339	43 8b 84 81 00
	04 00 00	 mov	 eax, DWORD PTR [r9+r8*4+1024]
  00341	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax

; 267  :                 mk_tab[2 + 4*i] = mds(2, q32(by)); mk_tab[3 + 4*i] = mds(3, q33(by));

  00344	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:m_tab
  0034b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:q_tab
  00352	0f b6 4c 24 10	 movzx	 ecx, BYTE PTR by$[rsp]
  00357	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  0035e	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  00362	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  00367	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0036a	c1 e8 10	 shr	 eax, 16
  0036d	0f b6 c8	 movzx	 ecx, al
  00370	8b c2		 mov	 eax, edx
  00372	33 c1		 xor	 eax, ecx
  00374	48 63 c8	 movsxd	 rcx, eax
  00377	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  0037e	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  00382	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  00387	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0038a	c1 e8 10	 shr	 eax, 16
  0038d	0f b6 c8	 movzx	 ecx, al
  00390	8b c2		 mov	 eax, edx
  00392	33 c1		 xor	 eax, ecx
  00394	48 98		 cdqe
  00396	41 0f b6 94 00
	00 01 00 00	 movzx	 edx, BYTE PTR [r8+rax+256]
  0039f	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  003a4	8b 00		 mov	 eax, DWORD PTR [rax]
  003a6	c1 e8 10	 shr	 eax, 16
  003a9	0f b6 c8	 movzx	 ecx, al
  003ac	8b c2		 mov	 eax, edx
  003ae	33 c1		 xor	 eax, ecx
  003b0	4c 63 c0	 movsxd	 r8, eax
  003b3	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  003b6	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  003bd	8b d0		 mov	 edx, eax
  003bf	48 8b 4c 24 08	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  003c4	43 8b 84 81 00
	08 00 00	 mov	 eax, DWORD PTR [r9+r8*4+2048]
  003cc	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax
  003cf	4c 8d 15 00 00
	00 00		 lea	 r10, OFFSET FLAT:m_tab
  003d6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:q_tab
  003dd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:q_tab
  003e4	0f b6 4c 24 10	 movzx	 ecx, BYTE PTR by$[rsp]
  003e9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  003f0	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  003f4	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  003f9	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  003fc	c1 e8 18	 shr	 eax, 24
  003ff	0f b6 c8	 movzx	 ecx, al
  00402	8b c2		 mov	 eax, edx
  00404	33 c1		 xor	 eax, ecx
  00406	48 98		 cdqe
  00408	41 0f b6 94 00
	00 01 00 00	 movzx	 edx, BYTE PTR [r8+rax+256]
  00411	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  00416	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00419	c1 e8 18	 shr	 eax, 24
  0041c	0f b6 c8	 movzx	 ecx, al
  0041f	8b c2		 mov	 eax, edx
  00421	33 c1		 xor	 eax, ecx
  00423	48 98		 cdqe
  00425	41 0f b6 94 01
	00 01 00 00	 movzx	 edx, BYTE PTR [r9+rax+256]
  0042e	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  00433	8b 00		 mov	 eax, DWORD PTR [rax]
  00435	c1 e8 18	 shr	 eax, 24
  00438	0f b6 c8	 movzx	 ecx, al
  0043b	8b c2		 mov	 eax, edx
  0043d	33 c1		 xor	 eax, ecx
  0043f	4c 63 c0	 movsxd	 r8, eax
  00442	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00445	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  0044c	8b d0		 mov	 edx, eax
  0044e	48 8b 4c 24 08	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00453	43 8b 84 82 00
	0c 00 00	 mov	 eax, DWORD PTR [r10+r8*4+3072]
  0045b	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax

; 268  : #else
; 269  :                 sb[0][i] = q30(by); sb[1][i] = q31(by); 
; 270  :                 sb[2][i] = q32(by); sb[3][i] = q33(by);
; 271  : #endif
; 272  :             }

  0045e	e9 c0 fd ff ff	 jmp	 $LN6@gen_mk_tab
$LN5@gen_mk_tab:

; 273  :             break;

  00463	e9 cc 02 00 00	 jmp	 $LN13@gen_mk_tab
$LN4@gen_mk_tab:

; 274  :     
; 275  :     case 4: for(i = 0; i < 256; ++i)

  00468	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
  0046f	eb 09		 jmp	 SHORT $LN3@gen_mk_tab
$LN2@gen_mk_tab:
  00471	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00474	83 c0 01	 add	 eax, 1
  00477	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN3@gen_mk_tab:
  0047a	81 3c 24 00 01
	00 00		 cmp	 DWORD PTR i$[rsp], 256	; 00000100H
  00481	0f 83 ad 02 00
	00		 jae	 $LN1@gen_mk_tab

; 276  :             {
; 277  :                 by = (u1byte)i;

  00487	0f b6 04 24	 movzx	 eax, BYTE PTR i$[rsp]
  0048b	88 44 24 10	 mov	 BYTE PTR by$[rsp], al

; 278  : #ifdef ONE_STEP
; 279  :                 mk_tab[0 + 4*i] = mds(0, q40(by)); mk_tab[1 + 4*i] = mds(1, q41(by));

  0048f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:q_tab
  00496	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:q_tab
  0049d	0f b6 44 24 10	 movzx	 eax, BYTE PTR by$[rsp]
  004a2	0f b6 94 01 00
	01 00 00	 movzx	 edx, BYTE PTR [rcx+rax+256]
  004aa	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  004af	0f b6 48 0c	 movzx	 ecx, BYTE PTR [rax+12]
  004b3	8b c2		 mov	 eax, edx
  004b5	33 c1		 xor	 eax, ecx
  004b7	48 98		 cdqe
  004b9	41 0f b6 94 00
	00 01 00 00	 movzx	 edx, BYTE PTR [r8+rax+256]
  004c2	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  004c7	0f b6 48 08	 movzx	 ecx, BYTE PTR [rax+8]
  004cb	8b c2		 mov	 eax, edx
  004cd	33 c1		 xor	 eax, ecx
  004cf	48 63 c8	 movsxd	 rcx, eax
  004d2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  004d9	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  004dd	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  004e2	0f b6 48 04	 movzx	 ecx, BYTE PTR [rax+4]
  004e6	8b c2		 mov	 eax, edx
  004e8	33 c1		 xor	 eax, ecx
  004ea	48 63 c8	 movsxd	 rcx, eax
  004ed	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  004f4	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  004f8	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  004fd	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00500	8b c2		 mov	 eax, edx
  00502	33 c1		 xor	 eax, ecx
  00504	4c 63 c8	 movsxd	 r9, eax
  00507	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:m_tab
  0050e	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00511	c1 e0 02	 shl	 eax, 2
  00514	8b d0		 mov	 edx, eax
  00516	48 8b 4c 24 08	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  0051b	43 8b 04 88	 mov	 eax, DWORD PTR [r8+r9*4]
  0051f	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax
  00522	4c 8d 15 00 00
	00 00		 lea	 r10, OFFSET FLAT:m_tab
  00529	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:q_tab
  00530	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:q_tab
  00537	0f b6 4c 24 10	 movzx	 ecx, BYTE PTR by$[rsp]
  0053c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  00543	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  00547	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  0054c	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  0054f	c1 e8 08	 shr	 eax, 8
  00552	0f b6 c8	 movzx	 ecx, al
  00555	8b c2		 mov	 eax, edx
  00557	33 c1		 xor	 eax, ecx
  00559	48 98		 cdqe
  0055b	41 0f b6 94 00
	00 01 00 00	 movzx	 edx, BYTE PTR [r8+rax+256]
  00564	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  00569	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0056c	c1 e8 08	 shr	 eax, 8
  0056f	0f b6 c8	 movzx	 ecx, al
  00572	8b c2		 mov	 eax, edx
  00574	33 c1		 xor	 eax, ecx
  00576	48 98		 cdqe
  00578	41 0f b6 94 01
	00 01 00 00	 movzx	 edx, BYTE PTR [r9+rax+256]
  00581	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  00586	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00589	c1 e8 08	 shr	 eax, 8
  0058c	0f b6 c8	 movzx	 ecx, al
  0058f	8b c2		 mov	 eax, edx
  00591	33 c1		 xor	 eax, ecx
  00593	48 63 c8	 movsxd	 rcx, eax
  00596	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  0059d	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  005a1	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  005a6	8b 00		 mov	 eax, DWORD PTR [rax]
  005a8	c1 e8 08	 shr	 eax, 8
  005ab	0f b6 c8	 movzx	 ecx, al
  005ae	8b c2		 mov	 eax, edx
  005b0	33 c1		 xor	 eax, ecx
  005b2	4c 63 c0	 movsxd	 r8, eax
  005b5	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  005b8	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  005bf	8b d0		 mov	 edx, eax
  005c1	48 8b 4c 24 08	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  005c6	43 8b 84 82 00
	04 00 00	 mov	 eax, DWORD PTR [r10+r8*4+1024]
  005ce	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax

; 280  :                 mk_tab[2 + 4*i] = mds(2, q42(by)); mk_tab[3 + 4*i] = mds(3, q43(by));

  005d1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:m_tab
  005d8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:q_tab
  005df	0f b6 4c 24 10	 movzx	 ecx, BYTE PTR by$[rsp]
  005e4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  005eb	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  005ef	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  005f4	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  005f7	c1 e8 10	 shr	 eax, 16
  005fa	0f b6 c8	 movzx	 ecx, al
  005fd	8b c2		 mov	 eax, edx
  005ff	33 c1		 xor	 eax, ecx
  00601	48 63 c8	 movsxd	 rcx, eax
  00604	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  0060b	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  0060f	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  00614	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00617	c1 e8 10	 shr	 eax, 16
  0061a	0f b6 c8	 movzx	 ecx, al
  0061d	8b c2		 mov	 eax, edx
  0061f	33 c1		 xor	 eax, ecx
  00621	48 63 c8	 movsxd	 rcx, eax
  00624	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  0062b	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  0062f	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  00634	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00637	c1 e8 10	 shr	 eax, 16
  0063a	0f b6 c8	 movzx	 ecx, al
  0063d	8b c2		 mov	 eax, edx
  0063f	33 c1		 xor	 eax, ecx
  00641	48 98		 cdqe
  00643	41 0f b6 94 00
	00 01 00 00	 movzx	 edx, BYTE PTR [r8+rax+256]
  0064c	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  00651	8b 00		 mov	 eax, DWORD PTR [rax]
  00653	c1 e8 10	 shr	 eax, 16
  00656	0f b6 c8	 movzx	 ecx, al
  00659	8b c2		 mov	 eax, edx
  0065b	33 c1		 xor	 eax, ecx
  0065d	4c 63 c0	 movsxd	 r8, eax
  00660	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00663	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  0066a	8b d0		 mov	 edx, eax
  0066c	48 8b 4c 24 08	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00671	43 8b 84 81 00
	08 00 00	 mov	 eax, DWORD PTR [r9+r8*4+2048]
  00679	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax
  0067c	4c 8d 15 00 00
	00 00		 lea	 r10, OFFSET FLAT:m_tab
  00683	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:q_tab
  0068a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:q_tab
  00691	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:q_tab
  00698	0f b6 44 24 10	 movzx	 eax, BYTE PTR by$[rsp]
  0069d	0f b6 94 01 00
	01 00 00	 movzx	 edx, BYTE PTR [rcx+rax+256]
  006a5	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  006aa	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  006ad	c1 e8 18	 shr	 eax, 24
  006b0	0f b6 c8	 movzx	 ecx, al
  006b3	8b c2		 mov	 eax, edx
  006b5	33 c1		 xor	 eax, ecx
  006b7	48 63 c8	 movsxd	 rcx, eax
  006ba	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  006c1	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  006c5	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  006ca	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  006cd	c1 e8 18	 shr	 eax, 24
  006d0	0f b6 c8	 movzx	 ecx, al
  006d3	8b c2		 mov	 eax, edx
  006d5	33 c1		 xor	 eax, ecx
  006d7	48 98		 cdqe
  006d9	41 0f b6 94 00
	00 01 00 00	 movzx	 edx, BYTE PTR [r8+rax+256]
  006e2	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  006e7	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  006ea	c1 e8 18	 shr	 eax, 24
  006ed	0f b6 c8	 movzx	 ecx, al
  006f0	8b c2		 mov	 eax, edx
  006f2	33 c1		 xor	 eax, ecx
  006f4	48 98		 cdqe
  006f6	41 0f b6 94 01
	00 01 00 00	 movzx	 edx, BYTE PTR [r9+rax+256]
  006ff	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  00704	8b 00		 mov	 eax, DWORD PTR [rax]
  00706	c1 e8 18	 shr	 eax, 24
  00709	0f b6 c8	 movzx	 ecx, al
  0070c	8b c2		 mov	 eax, edx
  0070e	33 c1		 xor	 eax, ecx
  00710	4c 63 c0	 movsxd	 r8, eax
  00713	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00716	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  0071d	8b d0		 mov	 edx, eax
  0071f	48 8b 4c 24 08	 mov	 rcx, QWORD PTR mk_tab$[rsp]
  00724	43 8b 84 82 00
	0c 00 00	 mov	 eax, DWORD PTR [r10+r8*4+3072]
  0072c	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax

; 281  : #else
; 282  :                 sb[0][i] = q40(by); sb[1][i] = q41(by); 
; 283  :                 sb[2][i] = q42(by); sb[3][i] = q43(by);
; 284  : #endif
; 285  :             }

  0072f	e9 3d fd ff ff	 jmp	 $LN2@gen_mk_tab
$LN1@gen_mk_tab:
$LN13@gen_mk_tab:

; 286  :     }
; 287  : };

  00734	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00738	c3		 ret	 0
gen_mk_tab ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$h_fun DD	imagerel h_fun
	DD	imagerel h_fun+781
	DD	imagerel $unwind$h_fun
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$h_fun DD 011201H
	DD	04212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT h_fun
_TEXT	SEGMENT
b0$ = 0
b2$ = 4
b3$ = 8
b1$ = 12
tv75 = 16
instance$ = 48
x$ = 56
key$ = 64
h_fun	PROC						; COMDAT

; 177  : {   u4byte  b0, b1, b2, b3;

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 178  : 
; 179  : #ifndef M_TABLE
; 180  :     u4byte  m5b_b0, m5b_b1, m5b_b2, m5b_b3;
; 181  :     u4byte  mef_b0, mef_b1, mef_b2, mef_b3;
; 182  : #endif
; 183  : 
; 184  :     b0 = extract_byte(x, 0); b1 = extract_byte(x, 1); b2 = extract_byte(x, 2); b3 = extract_byte(x, 3);

  00012	0f b6 44 24 38	 movzx	 eax, BYTE PTR x$[rsp]
  00017	89 04 24	 mov	 DWORD PTR b0$[rsp], eax
  0001a	8b 44 24 38	 mov	 eax, DWORD PTR x$[rsp]
  0001e	c1 e8 08	 shr	 eax, 8
  00021	0f b6 c0	 movzx	 eax, al
  00024	89 44 24 0c	 mov	 DWORD PTR b1$[rsp], eax
  00028	8b 44 24 38	 mov	 eax, DWORD PTR x$[rsp]
  0002c	c1 e8 10	 shr	 eax, 16
  0002f	0f b6 c0	 movzx	 eax, al
  00032	89 44 24 04	 mov	 DWORD PTR b2$[rsp], eax
  00036	8b 44 24 38	 mov	 eax, DWORD PTR x$[rsp]
  0003a	c1 e8 18	 shr	 eax, 24
  0003d	0f b6 c0	 movzx	 eax, al
  00040	89 44 24 08	 mov	 DWORD PTR b3$[rsp], eax

; 185  : 
; 186  :     switch(instance->k_len)

  00044	48 8b 44 24 30	 mov	 rax, QWORD PTR instance$[rsp]
  00049	8b 80 b0 10 00
	00		 mov	 eax, DWORD PTR [rax+4272]
  0004f	89 44 24 10	 mov	 DWORD PTR tv75[rsp], eax
  00053	83 7c 24 10 02	 cmp	 DWORD PTR tv75[rsp], 2
  00058	0f 84 49 01 00
	00		 je	 $LN1@h_fun
  0005e	83 7c 24 10 03	 cmp	 DWORD PTR tv75[rsp], 3
  00063	0f 84 a5 00 00
	00		 je	 $LN2@h_fun
  00069	83 7c 24 10 04	 cmp	 DWORD PTR tv75[rsp], 4
  0006e	74 05		 je	 SHORT $LN3@h_fun
  00070	e9 4c 02 00 00	 jmp	 $LN4@h_fun
$LN3@h_fun:

; 187  :     {
; 188  :     case 4: b0 = q(1, (u1byte) b0) ^ extract_byte(key[3],0);

  00075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:q_tab
  0007c	0f b6 04 24	 movzx	 eax, BYTE PTR b0$[rsp]
  00080	0f b6 94 01 00
	01 00 00	 movzx	 edx, BYTE PTR [rcx+rax+256]
  00088	48 8b 44 24 40	 mov	 rax, QWORD PTR key$[rsp]
  0008d	0f b6 48 0c	 movzx	 ecx, BYTE PTR [rax+12]
  00091	8b c2		 mov	 eax, edx
  00093	33 c1		 xor	 eax, ecx
  00095	89 04 24	 mov	 DWORD PTR b0$[rsp], eax

; 189  :             b1 = q(0, (u1byte) b1) ^ extract_byte(key[3],1);

  00098	0f b6 4c 24 0c	 movzx	 ecx, BYTE PTR b1$[rsp]
  0009d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  000a4	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  000a8	48 8b 44 24 40	 mov	 rax, QWORD PTR key$[rsp]
  000ad	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  000b0	c1 e8 08	 shr	 eax, 8
  000b3	0f b6 c8	 movzx	 ecx, al
  000b6	8b c2		 mov	 eax, edx
  000b8	33 c1		 xor	 eax, ecx
  000ba	89 44 24 0c	 mov	 DWORD PTR b1$[rsp], eax

; 190  :             b2 = q(0, (u1byte) b2) ^ extract_byte(key[3],2);

  000be	0f b6 4c 24 04	 movzx	 ecx, BYTE PTR b2$[rsp]
  000c3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  000ca	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  000ce	48 8b 44 24 40	 mov	 rax, QWORD PTR key$[rsp]
  000d3	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  000d6	c1 e8 10	 shr	 eax, 16
  000d9	0f b6 c8	 movzx	 ecx, al
  000dc	8b c2		 mov	 eax, edx
  000de	33 c1		 xor	 eax, ecx
  000e0	89 44 24 04	 mov	 DWORD PTR b2$[rsp], eax

; 191  :             b3 = q(1, (u1byte) b3) ^ extract_byte(key[3],3);

  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:q_tab
  000eb	0f b6 44 24 08	 movzx	 eax, BYTE PTR b3$[rsp]
  000f0	0f b6 94 01 00
	01 00 00	 movzx	 edx, BYTE PTR [rcx+rax+256]
  000f8	48 8b 44 24 40	 mov	 rax, QWORD PTR key$[rsp]
  000fd	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00100	c1 e8 18	 shr	 eax, 24
  00103	0f b6 c8	 movzx	 ecx, al
  00106	8b c2		 mov	 eax, edx
  00108	33 c1		 xor	 eax, ecx
  0010a	89 44 24 08	 mov	 DWORD PTR b3$[rsp], eax
$LN2@h_fun:

; 192  :     case 3: b0 = q(1, (u1byte) b0) ^ extract_byte(key[2],0);

  0010e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:q_tab
  00115	0f b6 04 24	 movzx	 eax, BYTE PTR b0$[rsp]
  00119	0f b6 94 01 00
	01 00 00	 movzx	 edx, BYTE PTR [rcx+rax+256]
  00121	48 8b 44 24 40	 mov	 rax, QWORD PTR key$[rsp]
  00126	0f b6 48 08	 movzx	 ecx, BYTE PTR [rax+8]
  0012a	8b c2		 mov	 eax, edx
  0012c	33 c1		 xor	 eax, ecx
  0012e	89 04 24	 mov	 DWORD PTR b0$[rsp], eax

; 193  :             b1 = q(1, (u1byte) b1) ^ extract_byte(key[2],1);

  00131	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:q_tab
  00138	0f b6 44 24 0c	 movzx	 eax, BYTE PTR b1$[rsp]
  0013d	0f b6 94 01 00
	01 00 00	 movzx	 edx, BYTE PTR [rcx+rax+256]
  00145	48 8b 44 24 40	 mov	 rax, QWORD PTR key$[rsp]
  0014a	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0014d	c1 e8 08	 shr	 eax, 8
  00150	0f b6 c8	 movzx	 ecx, al
  00153	8b c2		 mov	 eax, edx
  00155	33 c1		 xor	 eax, ecx
  00157	89 44 24 0c	 mov	 DWORD PTR b1$[rsp], eax

; 194  :             b2 = q(0, (u1byte) b2) ^ extract_byte(key[2],2);

  0015b	0f b6 4c 24 04	 movzx	 ecx, BYTE PTR b2$[rsp]
  00160	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  00167	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  0016b	48 8b 44 24 40	 mov	 rax, QWORD PTR key$[rsp]
  00170	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00173	c1 e8 10	 shr	 eax, 16
  00176	0f b6 c8	 movzx	 ecx, al
  00179	8b c2		 mov	 eax, edx
  0017b	33 c1		 xor	 eax, ecx
  0017d	89 44 24 04	 mov	 DWORD PTR b2$[rsp], eax

; 195  :             b3 = q(0, (u1byte) b3) ^ extract_byte(key[2],3);

  00181	0f b6 4c 24 08	 movzx	 ecx, BYTE PTR b3$[rsp]
  00186	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  0018d	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  00191	48 8b 44 24 40	 mov	 rax, QWORD PTR key$[rsp]
  00196	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00199	c1 e8 18	 shr	 eax, 24
  0019c	0f b6 c8	 movzx	 ecx, al
  0019f	8b c2		 mov	 eax, edx
  001a1	33 c1		 xor	 eax, ecx
  001a3	89 44 24 08	 mov	 DWORD PTR b3$[rsp], eax
$LN1@h_fun:

; 196  :     case 2: b0 = q(0, (u1byte) (q(0, (u1byte) b0) ^ extract_byte(key[1],0))) ^ extract_byte(key[0],0);

  001a7	0f b6 0c 24	 movzx	 ecx, BYTE PTR b0$[rsp]
  001ab	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  001b2	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  001b6	48 8b 44 24 40	 mov	 rax, QWORD PTR key$[rsp]
  001bb	0f b6 48 04	 movzx	 ecx, BYTE PTR [rax+4]
  001bf	8b c2		 mov	 eax, edx
  001c1	33 c1		 xor	 eax, ecx
  001c3	0f b6 c8	 movzx	 ecx, al
  001c6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  001cd	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  001d1	48 8b 44 24 40	 mov	 rax, QWORD PTR key$[rsp]
  001d6	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  001d9	8b c2		 mov	 eax, edx
  001db	33 c1		 xor	 eax, ecx
  001dd	89 04 24	 mov	 DWORD PTR b0$[rsp], eax

; 197  :             b1 = q(0, (u1byte) (q(1, (u1byte) b1) ^ extract_byte(key[1],1))) ^ extract_byte(key[0],1);

  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:q_tab
  001e7	0f b6 44 24 0c	 movzx	 eax, BYTE PTR b1$[rsp]
  001ec	0f b6 94 01 00
	01 00 00	 movzx	 edx, BYTE PTR [rcx+rax+256]
  001f4	48 8b 44 24 40	 mov	 rax, QWORD PTR key$[rsp]
  001f9	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  001fc	c1 e8 08	 shr	 eax, 8
  001ff	0f b6 c8	 movzx	 ecx, al
  00202	8b c2		 mov	 eax, edx
  00204	33 c1		 xor	 eax, ecx
  00206	0f b6 c8	 movzx	 ecx, al
  00209	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  00210	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  00214	48 8b 44 24 40	 mov	 rax, QWORD PTR key$[rsp]
  00219	8b 00		 mov	 eax, DWORD PTR [rax]
  0021b	c1 e8 08	 shr	 eax, 8
  0021e	0f b6 c8	 movzx	 ecx, al
  00221	8b c2		 mov	 eax, edx
  00223	33 c1		 xor	 eax, ecx
  00225	89 44 24 0c	 mov	 DWORD PTR b1$[rsp], eax

; 198  :             b2 = q(1, (u1byte) (q(0, (u1byte) b2) ^ extract_byte(key[1],2))) ^ extract_byte(key[0],2);

  00229	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:q_tab
  00230	0f b6 4c 24 04	 movzx	 ecx, BYTE PTR b2$[rsp]
  00235	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  0023c	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  00240	48 8b 44 24 40	 mov	 rax, QWORD PTR key$[rsp]
  00245	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00248	c1 e8 10	 shr	 eax, 16
  0024b	0f b6 c8	 movzx	 ecx, al
  0024e	8b c2		 mov	 eax, edx
  00250	33 c1		 xor	 eax, ecx
  00252	0f b6 c0	 movzx	 eax, al
  00255	41 0f b6 94 00
	00 01 00 00	 movzx	 edx, BYTE PTR [r8+rax+256]
  0025e	48 8b 44 24 40	 mov	 rax, QWORD PTR key$[rsp]
  00263	8b 00		 mov	 eax, DWORD PTR [rax]
  00265	c1 e8 10	 shr	 eax, 16
  00268	0f b6 c8	 movzx	 ecx, al
  0026b	8b c2		 mov	 eax, edx
  0026d	33 c1		 xor	 eax, ecx
  0026f	89 44 24 04	 mov	 DWORD PTR b2$[rsp], eax

; 199  :             b3 = q(1, (u1byte) (q(1, (u1byte) b3) ^ extract_byte(key[1],3))) ^ extract_byte(key[0],3);

  00273	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:q_tab
  0027a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:q_tab
  00281	0f b6 44 24 08	 movzx	 eax, BYTE PTR b3$[rsp]
  00286	0f b6 94 01 00
	01 00 00	 movzx	 edx, BYTE PTR [rcx+rax+256]
  0028e	48 8b 44 24 40	 mov	 rax, QWORD PTR key$[rsp]
  00293	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00296	c1 e8 18	 shr	 eax, 24
  00299	0f b6 c8	 movzx	 ecx, al
  0029c	8b c2		 mov	 eax, edx
  0029e	33 c1		 xor	 eax, ecx
  002a0	0f b6 c0	 movzx	 eax, al
  002a3	41 0f b6 94 00
	00 01 00 00	 movzx	 edx, BYTE PTR [r8+rax+256]
  002ac	48 8b 44 24 40	 mov	 rax, QWORD PTR key$[rsp]
  002b1	8b 00		 mov	 eax, DWORD PTR [rax]
  002b3	c1 e8 18	 shr	 eax, 24
  002b6	0f b6 c8	 movzx	 ecx, al
  002b9	8b c2		 mov	 eax, edx
  002bb	33 c1		 xor	 eax, ecx
  002bd	89 44 24 08	 mov	 DWORD PTR b3$[rsp], eax
$LN4@h_fun:

; 200  :     }
; 201  : #ifdef  M_TABLE
; 202  : 
; 203  :     return  mds(0, b0) ^ mds(1, b1) ^ mds(2, b2) ^ mds(3, b3);

  002c1	44 8b 04 24	 mov	 r8d, DWORD PTR b0$[rsp]
  002c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:m_tab
  002cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:m_tab
  002d3	8b 44 24 0c	 mov	 eax, DWORD PTR b1$[rsp]
  002d7	8b 8c 81 00 04
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*4+1024]
  002de	42 8b 04 82	 mov	 eax, DWORD PTR [rdx+r8*4]
  002e2	33 c1		 xor	 eax, ecx
  002e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:m_tab
  002eb	8b 4c 24 04	 mov	 ecx, DWORD PTR b2$[rsp]
  002ef	33 84 8a 00 08
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+2048]
  002f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:m_tab
  002fd	8b 4c 24 08	 mov	 ecx, DWORD PTR b3$[rsp]
  00301	33 84 8a 00 0c
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+3072]

; 204  : 
; 205  : #else
; 206  : 
; 207  :     b0 = q(1, (u1byte) b0); b1 = q(0, (u1byte) b1); b2 = q(1, (u1byte) b2); b3 = q(0, (u1byte) b3);
; 208  :     m5b_b0 = ffm_5b(b0); m5b_b1 = ffm_5b(b1); m5b_b2 = ffm_5b(b2); m5b_b3 = ffm_5b(b3);
; 209  :     mef_b0 = ffm_ef(b0); mef_b1 = ffm_ef(b1); mef_b2 = ffm_ef(b2); mef_b3 = ffm_ef(b3);
; 210  :     b0 ^= mef_b1 ^ m5b_b2 ^ m5b_b3; b3 ^= m5b_b0 ^ mef_b1 ^ mef_b2;
; 211  :     b2 ^= mef_b0 ^ m5b_b1 ^ mef_b3; b1 ^= mef_b0 ^ mef_b2 ^ m5b_b3;
; 212  : 
; 213  :     return b0 | (b3 << 8) | (b2 << 16) | (b1 << 24);
; 214  : 
; 215  : #endif
; 216  : };

  00308	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0030c	c3		 ret	 0
h_fun	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_mtab DD imagerel gen_mtab
	DD	imagerel gen_mtab+454
	DD	imagerel $unwind$gen_mtab
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_mtab DD 010401H
	DD	02204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT gen_mtab
_TEXT	SEGMENT
fef$ = 0
i$ = 4
f5b$ = 8
f01$ = 12
gen_mtab PROC						; COMDAT

; 125  : {   u4byte  i, f01, f5b, fef;

  00000	48 83 ec 18	 sub	 rsp, 24

; 126  :     
; 127  :     for(i = 0; i < 256; ++i)

  00004	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0000c	eb 0b		 jmp	 SHORT $LN3@gen_mtab
$LN2@gen_mtab:
  0000e	8b 44 24 04	 mov	 eax, DWORD PTR i$[rsp]
  00012	83 c0 01	 add	 eax, 1
  00015	89 44 24 04	 mov	 DWORD PTR i$[rsp], eax
$LN3@gen_mtab:
  00019	81 7c 24 04 00
	01 00 00	 cmp	 DWORD PTR i$[rsp], 256	; 00000100H
  00021	0f 83 9a 01 00
	00		 jae	 $LN1@gen_mtab

; 128  :     {
; 129  :         f01 = q(1,i); f5b = ffm_5b(f01); fef = ffm_ef(f01);

  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:q_tab
  0002e	8b 44 24 04	 mov	 eax, DWORD PTR i$[rsp]
  00032	0f b6 84 01 00
	01 00 00	 movzx	 eax, BYTE PTR [rcx+rax+256]
  0003a	89 44 24 0c	 mov	 DWORD PTR f01$[rsp], eax
  0003e	8b 44 24 0c	 mov	 eax, DWORD PTR f01$[rsp]
  00042	c1 e8 02	 shr	 eax, 2
  00045	8b 54 24 0c	 mov	 edx, DWORD PTR f01$[rsp]
  00049	33 d0		 xor	 edx, eax
  0004b	8b 44 24 0c	 mov	 eax, DWORD PTR f01$[rsp]
  0004f	83 e0 03	 and	 eax, 3
  00052	8b c8		 mov	 ecx, eax
  00054	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:tab_5b
  0005b	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  0005f	8b c2		 mov	 eax, edx
  00061	33 c1		 xor	 eax, ecx
  00063	89 44 24 08	 mov	 DWORD PTR f5b$[rsp], eax
  00067	8b 44 24 0c	 mov	 eax, DWORD PTR f01$[rsp]
  0006b	d1 e8		 shr	 eax, 1
  0006d	8b 54 24 0c	 mov	 edx, DWORD PTR f01$[rsp]
  00071	33 d0		 xor	 edx, eax
  00073	8b 44 24 0c	 mov	 eax, DWORD PTR f01$[rsp]
  00077	c1 e8 02	 shr	 eax, 2
  0007a	33 d0		 xor	 edx, eax
  0007c	8b 44 24 0c	 mov	 eax, DWORD PTR f01$[rsp]
  00080	83 e0 03	 and	 eax, 3
  00083	8b c8		 mov	 ecx, eax
  00085	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:tab_ef
  0008c	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  00090	8b c2		 mov	 eax, edx
  00092	33 c1		 xor	 eax, ecx
  00094	89 04 24	 mov	 DWORD PTR fef$[rsp], eax

; 130  :         m_tab[0][i] = f01 + (f5b << 8) + (fef << 16) + (fef << 24);

  00097	8b 44 24 08	 mov	 eax, DWORD PTR f5b$[rsp]
  0009b	c1 e0 08	 shl	 eax, 8
  0009e	8b 54 24 0c	 mov	 edx, DWORD PTR f01$[rsp]
  000a2	03 d0		 add	 edx, eax
  000a4	8b 04 24	 mov	 eax, DWORD PTR fef$[rsp]
  000a7	c1 e0 10	 shl	 eax, 16
  000aa	03 d0		 add	 edx, eax
  000ac	8b 04 24	 mov	 eax, DWORD PTR fef$[rsp]
  000af	c1 e0 18	 shl	 eax, 24
  000b2	03 d0		 add	 edx, eax
  000b4	8b 4c 24 04	 mov	 ecx, DWORD PTR i$[rsp]
  000b8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:m_tab
  000bf	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx

; 131  :         m_tab[2][i] = f5b + (fef << 8) + (f01 << 16) + (fef << 24);

  000c2	8b 04 24	 mov	 eax, DWORD PTR fef$[rsp]
  000c5	c1 e0 08	 shl	 eax, 8
  000c8	8b 54 24 08	 mov	 edx, DWORD PTR f5b$[rsp]
  000cc	03 d0		 add	 edx, eax
  000ce	8b 44 24 0c	 mov	 eax, DWORD PTR f01$[rsp]
  000d2	c1 e0 10	 shl	 eax, 16
  000d5	03 d0		 add	 edx, eax
  000d7	8b 04 24	 mov	 eax, DWORD PTR fef$[rsp]
  000da	c1 e0 18	 shl	 eax, 24
  000dd	03 d0		 add	 edx, eax
  000df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:m_tab
  000e6	8b 44 24 04	 mov	 eax, DWORD PTR i$[rsp]
  000ea	89 94 81 00 08
	00 00		 mov	 DWORD PTR [rcx+rax*4+2048], edx

; 132  : 
; 133  :         f01 = q(0,i); f5b = ffm_5b(f01); fef = ffm_ef(f01);

  000f1	8b 4c 24 04	 mov	 ecx, DWORD PTR i$[rsp]
  000f5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  000fc	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00100	89 44 24 0c	 mov	 DWORD PTR f01$[rsp], eax
  00104	8b 44 24 0c	 mov	 eax, DWORD PTR f01$[rsp]
  00108	c1 e8 02	 shr	 eax, 2
  0010b	8b 54 24 0c	 mov	 edx, DWORD PTR f01$[rsp]
  0010f	33 d0		 xor	 edx, eax
  00111	8b 44 24 0c	 mov	 eax, DWORD PTR f01$[rsp]
  00115	83 e0 03	 and	 eax, 3
  00118	8b c8		 mov	 ecx, eax
  0011a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:tab_5b
  00121	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  00125	8b c2		 mov	 eax, edx
  00127	33 c1		 xor	 eax, ecx
  00129	89 44 24 08	 mov	 DWORD PTR f5b$[rsp], eax
  0012d	8b 44 24 0c	 mov	 eax, DWORD PTR f01$[rsp]
  00131	d1 e8		 shr	 eax, 1
  00133	8b 54 24 0c	 mov	 edx, DWORD PTR f01$[rsp]
  00137	33 d0		 xor	 edx, eax
  00139	8b 44 24 0c	 mov	 eax, DWORD PTR f01$[rsp]
  0013d	c1 e8 02	 shr	 eax, 2
  00140	33 d0		 xor	 edx, eax
  00142	8b 44 24 0c	 mov	 eax, DWORD PTR f01$[rsp]
  00146	83 e0 03	 and	 eax, 3
  00149	8b c8		 mov	 ecx, eax
  0014b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:tab_ef
  00152	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  00156	8b c2		 mov	 eax, edx
  00158	33 c1		 xor	 eax, ecx
  0015a	89 04 24	 mov	 DWORD PTR fef$[rsp], eax

; 134  :         m_tab[1][i] = fef + (fef << 8) + (f5b << 16) + (f01 << 24);

  0015d	8b 04 24	 mov	 eax, DWORD PTR fef$[rsp]
  00160	c1 e0 08	 shl	 eax, 8
  00163	8b 14 24	 mov	 edx, DWORD PTR fef$[rsp]
  00166	03 d0		 add	 edx, eax
  00168	8b 44 24 08	 mov	 eax, DWORD PTR f5b$[rsp]
  0016c	c1 e0 10	 shl	 eax, 16
  0016f	03 d0		 add	 edx, eax
  00171	8b 44 24 0c	 mov	 eax, DWORD PTR f01$[rsp]
  00175	c1 e0 18	 shl	 eax, 24
  00178	03 d0		 add	 edx, eax
  0017a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:m_tab
  00181	8b 44 24 04	 mov	 eax, DWORD PTR i$[rsp]
  00185	89 94 81 00 04
	00 00		 mov	 DWORD PTR [rcx+rax*4+1024], edx

; 135  :         m_tab[3][i] = f5b + (f01 << 8) + (fef << 16) + (f5b << 24);

  0018c	8b 44 24 0c	 mov	 eax, DWORD PTR f01$[rsp]
  00190	c1 e0 08	 shl	 eax, 8
  00193	8b 54 24 08	 mov	 edx, DWORD PTR f5b$[rsp]
  00197	03 d0		 add	 edx, eax
  00199	8b 04 24	 mov	 eax, DWORD PTR fef$[rsp]
  0019c	c1 e0 10	 shl	 eax, 16
  0019f	03 d0		 add	 edx, eax
  001a1	8b 44 24 08	 mov	 eax, DWORD PTR f5b$[rsp]
  001a5	c1 e0 18	 shl	 eax, 24
  001a8	03 d0		 add	 edx, eax
  001aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:m_tab
  001b1	8b 44 24 04	 mov	 eax, DWORD PTR i$[rsp]
  001b5	89 94 81 00 0c
	00 00		 mov	 DWORD PTR [rcx+rax*4+3072], edx

; 136  :     }

  001bc	e9 4d fe ff ff	 jmp	 $LN2@gen_mtab
$LN1@gen_mtab:

; 137  : };

  001c1	48 83 c4 18	 add	 rsp, 24
  001c5	c3		 ret	 0
gen_mtab ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$qp DD	imagerel qp
	DD	imagerel qp+289
	DD	imagerel $unwind$qp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$qp DD	010c01H
	DD	0220cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT qp
_TEXT	SEGMENT
b0$ = 0
a1$ = 1
b2$ = 2
b4$ = 3
b3$ = 4
a4$ = 5
a3$ = 6
a2$ = 7
b1$ = 8
a0$ = 9
n$ = 32
x$ = 40
qp	PROC						; COMDAT

; 86   : {   u1byte  a0, a1, a2, a3, a4, b0, b1, b2, b3, b4;

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 18	 sub	 rsp, 24

; 87   : 
; 88   :     a0 = x >> 4; b0 = x & 15;

  0000c	0f b6 44 24 28	 movzx	 eax, BYTE PTR x$[rsp]
  00011	c1 f8 04	 sar	 eax, 4
  00014	88 44 24 09	 mov	 BYTE PTR a0$[rsp], al
  00018	0f b6 44 24 28	 movzx	 eax, BYTE PTR x$[rsp]
  0001d	83 e0 0f	 and	 eax, 15
  00020	88 04 24	 mov	 BYTE PTR b0$[rsp], al

; 89   :     a1 = a0 ^ b0; b1 = ror4[b0] ^ ashx[a0];

  00023	0f b6 44 24 09	 movzx	 eax, BYTE PTR a0$[rsp]
  00028	0f b6 0c 24	 movzx	 ecx, BYTE PTR b0$[rsp]
  0002c	33 c1		 xor	 eax, ecx
  0002e	88 44 24 01	 mov	 BYTE PTR a1$[rsp], al
  00032	0f b6 0c 24	 movzx	 ecx, BYTE PTR b0$[rsp]
  00036	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:ror4
  0003d	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  00041	0f b6 4c 24 09	 movzx	 ecx, BYTE PTR a0$[rsp]
  00046	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:ashx
  0004d	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  00051	8b c2		 mov	 eax, edx
  00053	33 c1		 xor	 eax, ecx
  00055	88 44 24 08	 mov	 BYTE PTR b1$[rsp], al

; 90   :     a2 = qt0[n][a1]; b2 = qt1[n][b1];

  00059	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  0005d	48 6b c0 10	 imul	 rax, 16
  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:qt0
  00068	48 03 c8	 add	 rcx, rax
  0006b	0f b6 44 24 01	 movzx	 eax, BYTE PTR a1$[rsp]
  00070	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00074	88 44 24 07	 mov	 BYTE PTR a2$[rsp], al
  00078	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  0007c	48 6b c0 10	 imul	 rax, 16
  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:qt1
  00087	48 03 c8	 add	 rcx, rax
  0008a	0f b6 44 24 08	 movzx	 eax, BYTE PTR b1$[rsp]
  0008f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00093	88 44 24 02	 mov	 BYTE PTR b2$[rsp], al

; 91   :     a3 = a2 ^ b2; b3 = ror4[b2] ^ ashx[a2];

  00097	0f b6 44 24 07	 movzx	 eax, BYTE PTR a2$[rsp]
  0009c	0f b6 4c 24 02	 movzx	 ecx, BYTE PTR b2$[rsp]
  000a1	33 c1		 xor	 eax, ecx
  000a3	88 44 24 06	 mov	 BYTE PTR a3$[rsp], al
  000a7	0f b6 4c 24 02	 movzx	 ecx, BYTE PTR b2$[rsp]
  000ac	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:ror4
  000b3	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  000b7	0f b6 4c 24 07	 movzx	 ecx, BYTE PTR a2$[rsp]
  000bc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:ashx
  000c3	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  000c7	8b c2		 mov	 eax, edx
  000c9	33 c1		 xor	 eax, ecx
  000cb	88 44 24 04	 mov	 BYTE PTR b3$[rsp], al

; 92   :     a4 = qt2[n][a3]; b4 = qt3[n][b3];

  000cf	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  000d3	48 6b c0 10	 imul	 rax, 16
  000d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:qt2
  000de	48 03 c8	 add	 rcx, rax
  000e1	0f b6 44 24 06	 movzx	 eax, BYTE PTR a3$[rsp]
  000e6	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000ea	88 44 24 05	 mov	 BYTE PTR a4$[rsp], al
  000ee	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  000f2	48 6b c0 10	 imul	 rax, 16
  000f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:qt3
  000fd	48 03 c8	 add	 rcx, rax
  00100	0f b6 44 24 04	 movzx	 eax, BYTE PTR b3$[rsp]
  00105	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00109	88 44 24 03	 mov	 BYTE PTR b4$[rsp], al

; 93   :     return (b4 << 4) | a4;

  0010d	0f b6 44 24 03	 movzx	 eax, BYTE PTR b4$[rsp]
  00112	c1 e0 04	 shl	 eax, 4
  00115	0f b6 4c 24 05	 movzx	 ecx, BYTE PTR a4$[rsp]
  0011a	0b c1		 or	 eax, ecx

; 94   : };

  0011c	48 83 c4 18	 add	 rsp, 24
  00120	c3		 ret	 0
qp	ENDP
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_qtab DD imagerel gen_qtab
	DD	imagerel gen_qtab+111
	DD	imagerel $unwind$gen_qtab
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_qtab DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT gen_qtab
_TEXT	SEGMENT
i$ = 32
gen_qtab PROC						; COMDAT

; 104  : {   u4byte  i;

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 105  : 
; 106  :     for(i = 0; i < 256; ++i)

  00004	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0000c	eb 0b		 jmp	 SHORT $LN3@gen_qtab
$LN2@gen_qtab:
  0000e	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00012	83 c0 01	 add	 eax, 1
  00015	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN3@gen_qtab:
  00019	81 7c 24 20 00
	01 00 00	 cmp	 DWORD PTR i$[rsp], 256	; 00000100H
  00021	73 47		 jae	 SHORT $LN1@gen_qtab

; 107  :     {       
; 108  :         q(0,i) = qp(0, (u1byte)i);

  00023	0f b6 54 24 20	 movzx	 edx, BYTE PTR i$[rsp]
  00028	33 c9		 xor	 ecx, ecx
  0002a	e8 00 00 00 00	 call	 qp
  0002f	44 0f b6 d8	 movzx	 r11d, al
  00033	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  00037	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:q_tab
  0003e	44 88 1c 08	 mov	 BYTE PTR [rax+rcx], r11b

; 109  :         q(1,i) = qp(1, (u1byte)i);

  00042	0f b6 54 24 20	 movzx	 edx, BYTE PTR i$[rsp]
  00047	b9 01 00 00 00	 mov	 ecx, 1
  0004c	e8 00 00 00 00	 call	 qp
  00051	44 0f b6 d8	 movzx	 r11d, al
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:q_tab
  0005c	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00060	44 88 9c 01 00
	01 00 00	 mov	 BYTE PTR [rcx+rax+256], r11b

; 110  :     }

  00068	eb a4		 jmp	 SHORT $LN2@gen_qtab
$LN1@gen_qtab:

; 111  : };

  0006a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006e	c3		 ret	 0
gen_qtab ENDP
PUBLIC	twofish_set_key
;	COMDAT pdata
pdata	SEGMENT
$pdata$twofish_set_key DD imagerel $LN11
	DD	imagerel $LN11+477
	DD	imagerel $unwind$twofish_set_key
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$twofish_set_key DD 011301H
	DD	0c213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT twofish_set_key
_TEXT	SEGMENT
mo_key$ = 32
s_key$ = 48
a$ = 56
i$ = 60
me_key$ = 64
b$ = 80
l_key$ = 88
instance$ = 112
in_key$ = 120
key_len$ = 128
twofish_set_key PROC					; COMDAT

; 373  : {   u4byte  i, a, b, me_key[4], mo_key[4];

$LN11:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 374  : 	u4byte *l_key, *s_key;
; 375  : 
; 376  : 	l_key = instance->l_key;

  00013	48 8b 44 24 70	 mov	 rax, QWORD PTR instance$[rsp]
  00018	48 89 44 24 58	 mov	 QWORD PTR l_key$[rsp], rax

; 377  : 	s_key = instance->s_key;

  0001d	48 8b 44 24 70	 mov	 rax, QWORD PTR instance$[rsp]
  00022	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00028	48 89 44 24 30	 mov	 QWORD PTR s_key$[rsp], rax

; 378  : 
; 379  : #ifdef Q_TABLES
; 380  :     if(!qt_gen)

  0002d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR qt_gen, 0
  00034	75 0f		 jne	 SHORT $LN8@twofish_se

; 381  :     {
; 382  :         gen_qtab(); qt_gen = 1;

  00036	e8 00 00 00 00	 call	 gen_qtab
  0003b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR qt_gen, 1
$LN8@twofish_se:

; 383  :     }
; 384  : #endif
; 385  : 
; 386  : #ifdef M_TABLE
; 387  :     if(!mt_gen)

  00045	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR mt_gen, 0
  0004c	75 0f		 jne	 SHORT $LN7@twofish_se

; 388  :     {
; 389  :         gen_mtab(); mt_gen = 1;

  0004e	e8 00 00 00 00	 call	 gen_mtab
  00053	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR mt_gen, 1
$LN7@twofish_se:

; 390  :     }
; 391  : #endif
; 392  : 
; 393  :     instance->k_len = key_len / 64;   /* 2, 3 or 4 */

  0005d	33 d2		 xor	 edx, edx
  0005f	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR key_len$[rsp]
  00066	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0006b	f7 f1		 div	 ecx
  0006d	8b c8		 mov	 ecx, eax
  0006f	48 8b 44 24 70	 mov	 rax, QWORD PTR instance$[rsp]
  00074	89 88 b0 10 00
	00		 mov	 DWORD PTR [rax+4272], ecx

; 394  : 
; 395  :     for(i = 0; i < instance->k_len; ++i)

  0007a	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00082	eb 0b		 jmp	 SHORT $LN6@twofish_se
$LN5@twofish_se:
  00084	8b 44 24 3c	 mov	 eax, DWORD PTR i$[rsp]
  00088	83 c0 01	 add	 eax, 1
  0008b	89 44 24 3c	 mov	 DWORD PTR i$[rsp], eax
$LN6@twofish_se:
  0008f	48 8b 44 24 70	 mov	 rax, QWORD PTR instance$[rsp]
  00094	8b 80 b0 10 00
	00		 mov	 eax, DWORD PTR [rax+4272]
  0009a	39 44 24 3c	 cmp	 DWORD PTR i$[rsp], eax
  0009e	73 7e		 jae	 SHORT $LN4@twofish_se

; 396  :     {
; 397  :         a = LE32(in_key[i + i]);     me_key[i] = a;

  000a0	8b 4c 24 3c	 mov	 ecx, DWORD PTR i$[rsp]
  000a4	8b 44 24 3c	 mov	 eax, DWORD PTR i$[rsp]
  000a8	03 c1		 add	 eax, ecx
  000aa	8b c8		 mov	 ecx, eax
  000ac	48 8b 44 24 78	 mov	 rax, QWORD PTR in_key$[rsp]
  000b1	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  000b4	89 44 24 38	 mov	 DWORD PTR a$[rsp], eax
  000b8	8b 4c 24 3c	 mov	 ecx, DWORD PTR i$[rsp]
  000bc	8b 44 24 38	 mov	 eax, DWORD PTR a$[rsp]
  000c0	89 44 8c 40	 mov	 DWORD PTR me_key$[rsp+rcx*4], eax

; 398  :         b = LE32(in_key[i + i + 1]); mo_key[i] = b;

  000c4	8b 4c 24 3c	 mov	 ecx, DWORD PTR i$[rsp]
  000c8	8b 44 24 3c	 mov	 eax, DWORD PTR i$[rsp]
  000cc	8d 44 01 01	 lea	 eax, DWORD PTR [rcx+rax+1]
  000d0	8b c8		 mov	 ecx, eax
  000d2	48 8b 44 24 78	 mov	 rax, QWORD PTR in_key$[rsp]
  000d7	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  000da	89 44 24 50	 mov	 DWORD PTR b$[rsp], eax
  000de	8b 4c 24 3c	 mov	 ecx, DWORD PTR i$[rsp]
  000e2	8b 44 24 50	 mov	 eax, DWORD PTR b$[rsp]
  000e6	89 44 8c 20	 mov	 DWORD PTR mo_key$[rsp+rcx*4], eax

; 399  :         s_key[instance->k_len - i - 1] = mds_rem(a, b);

  000ea	8b 54 24 50	 mov	 edx, DWORD PTR b$[rsp]
  000ee	8b 4c 24 38	 mov	 ecx, DWORD PTR a$[rsp]
  000f2	e8 00 00 00 00	 call	 mds_rem
  000f7	44 8b d8	 mov	 r11d, eax
  000fa	48 8b 44 24 70	 mov	 rax, QWORD PTR instance$[rsp]
  000ff	8b 4c 24 3c	 mov	 ecx, DWORD PTR i$[rsp]
  00103	8b 80 b0 10 00
	00		 mov	 eax, DWORD PTR [rax+4272]
  00109	2b c1		 sub	 eax, ecx
  0010b	83 e8 01	 sub	 eax, 1
  0010e	8b c8		 mov	 ecx, eax
  00110	48 8b 44 24 30	 mov	 rax, QWORD PTR s_key$[rsp]
  00115	44 89 1c 88	 mov	 DWORD PTR [rax+rcx*4], r11d

; 400  :     }

  00119	e9 66 ff ff ff	 jmp	 $LN5@twofish_se
$LN4@twofish_se:

; 401  : 
; 402  :     for(i = 0; i < 40; i += 2)

  0011e	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00126	eb 0b		 jmp	 SHORT $LN3@twofish_se
$LN2@twofish_se:
  00128	8b 44 24 3c	 mov	 eax, DWORD PTR i$[rsp]
  0012c	83 c0 02	 add	 eax, 2
  0012f	89 44 24 3c	 mov	 DWORD PTR i$[rsp], eax
$LN3@twofish_se:
  00133	83 7c 24 3c 28	 cmp	 DWORD PTR i$[rsp], 40	; 00000028H
  00138	0f 83 86 00 00
	00		 jae	 $LN1@twofish_se

; 403  :     {
; 404  :         a = 0x01010101 * i; b = a + 0x01010101;

  0013e	8b 44 24 3c	 mov	 eax, DWORD PTR i$[rsp]
  00142	69 c0 01 01 01
	01		 imul	 eax, 16843009		; 01010101H
  00148	89 44 24 38	 mov	 DWORD PTR a$[rsp], eax
  0014c	8b 44 24 38	 mov	 eax, DWORD PTR a$[rsp]
  00150	05 01 01 01 01	 add	 eax, 16843009		; 01010101H
  00155	89 44 24 50	 mov	 DWORD PTR b$[rsp], eax

; 405  :         a = h_fun(instance, a, me_key);

  00159	4c 8d 44 24 40	 lea	 r8, QWORD PTR me_key$[rsp]
  0015e	8b 54 24 38	 mov	 edx, DWORD PTR a$[rsp]
  00162	48 8b 4c 24 70	 mov	 rcx, QWORD PTR instance$[rsp]
  00167	e8 00 00 00 00	 call	 h_fun
  0016c	89 44 24 38	 mov	 DWORD PTR a$[rsp], eax

; 406  :         b = rotl(h_fun(instance, b, mo_key), 8);

  00170	4c 8d 44 24 20	 lea	 r8, QWORD PTR mo_key$[rsp]
  00175	8b 54 24 50	 mov	 edx, DWORD PTR b$[rsp]
  00179	48 8b 4c 24 70	 mov	 rcx, QWORD PTR instance$[rsp]
  0017e	e8 00 00 00 00	 call	 h_fun
  00183	c1 c0 08	 rol	 eax, 8
  00186	89 44 24 50	 mov	 DWORD PTR b$[rsp], eax

; 407  :         l_key[i] = a + b;

  0018a	8b 44 24 50	 mov	 eax, DWORD PTR b$[rsp]
  0018e	8b 54 24 38	 mov	 edx, DWORD PTR a$[rsp]
  00192	03 d0		 add	 edx, eax
  00194	8b 4c 24 3c	 mov	 ecx, DWORD PTR i$[rsp]
  00198	48 8b 44 24 58	 mov	 rax, QWORD PTR l_key$[rsp]
  0019d	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx

; 408  :         l_key[i + 1] = rotl(a + 2 * b, 9);

  001a0	8b 4c 24 38	 mov	 ecx, DWORD PTR a$[rsp]
  001a4	8b 44 24 50	 mov	 eax, DWORD PTR b$[rsp]
  001a8	8d 14 41	 lea	 edx, DWORD PTR [rcx+rax*2]
  001ab	c1 c2 09	 rol	 edx, 9
  001ae	8b 44 24 3c	 mov	 eax, DWORD PTR i$[rsp]
  001b2	83 c0 01	 add	 eax, 1
  001b5	8b c8		 mov	 ecx, eax
  001b7	48 8b 44 24 58	 mov	 rax, QWORD PTR l_key$[rsp]
  001bc	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx

; 409  :     }

  001bf	e9 64 ff ff ff	 jmp	 $LN2@twofish_se
$LN1@twofish_se:

; 410  : 
; 411  : #ifdef MK_TABLE
; 412  :     gen_mk_tab(instance, s_key);

  001c4	48 8b 54 24 30	 mov	 rdx, QWORD PTR s_key$[rsp]
  001c9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR instance$[rsp]
  001ce	e8 00 00 00 00	 call	 gen_mk_tab

; 413  : #endif
; 414  : 
; 415  :     return l_key;

  001d3	48 8b 44 24 58	 mov	 rax, QWORD PTR l_key$[rsp]

; 416  : };

  001d8	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001dc	c3		 ret	 0
twofish_set_key ENDP
END
