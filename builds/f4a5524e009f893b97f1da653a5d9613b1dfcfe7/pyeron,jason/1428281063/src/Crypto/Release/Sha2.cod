; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\home\public\Desktop\projects\ciphershed.build\src\Crypto\Sha2.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_k256
PUBLIC	_i224
PUBLIC	_i256
PUBLIC	_k512
PUBLIC	_i384
PUBLIC	_i512
CONST	SEGMENT
_k256	DD	0428a2f98H
	DD	071374491H
	DD	0b5c0fbcfH
	DD	0e9b5dba5H
	DD	03956c25bH
	DD	059f111f1H
	DD	0923f82a4H
	DD	0ab1c5ed5H
	DD	0d807aa98H
	DD	012835b01H
	DD	0243185beH
	DD	0550c7dc3H
	DD	072be5d74H
	DD	080deb1feH
	DD	09bdc06a7H
	DD	0c19bf174H
	DD	0e49b69c1H
	DD	0efbe4786H
	DD	0fc19dc6H
	DD	0240ca1ccH
	DD	02de92c6fH
	DD	04a7484aaH
	DD	05cb0a9dcH
	DD	076f988daH
	DD	0983e5152H
	DD	0a831c66dH
	DD	0b00327c8H
	DD	0bf597fc7H
	DD	0c6e00bf3H
	DD	0d5a79147H
	DD	06ca6351H
	DD	014292967H
	DD	027b70a85H
	DD	02e1b2138H
	DD	04d2c6dfcH
	DD	053380d13H
	DD	0650a7354H
	DD	0766a0abbH
	DD	081c2c92eH
	DD	092722c85H
	DD	0a2bfe8a1H
	DD	0a81a664bH
	DD	0c24b8b70H
	DD	0c76c51a3H
	DD	0d192e819H
	DD	0d6990624H
	DD	0f40e3585H
	DD	0106aa070H
	DD	019a4c116H
	DD	01e376c08H
	DD	02748774cH
	DD	034b0bcb5H
	DD	0391c0cb3H
	DD	04ed8aa4aH
	DD	05b9cca4fH
	DD	0682e6ff3H
	DD	0748f82eeH
	DD	078a5636fH
	DD	084c87814H
	DD	08cc70208H
	DD	090befffaH
	DD	0a4506cebH
	DD	0bef9a3f7H
	DD	0c67178f2H
_i224	DD	0c1059ed8H
	DD	0367cd507H
	DD	03070dd17H
	DD	0f70e5939H
	DD	0ffc00b31H
	DD	068581511H
	DD	064f98fa7H
	DD	0befa4fa4H
_i256	DD	06a09e667H
	DD	0bb67ae85H
	DD	03c6ef372H
	DD	0a54ff53aH
	DD	0510e527fH
	DD	09b05688cH
	DD	01f83d9abH
	DD	05be0cd19H
_k512	DQ	428a2f98d728ae22H
	DQ	7137449123ef65cdH
	DQ	b5c0fbcfec4d3b2fH
	DQ	e9b5dba58189dbbcH
	DQ	3956c25bf348b538H
	DQ	59f111f1b605d019H
	DQ	923f82a4af194f9bH
	DQ	ab1c5ed5da6d8118H
	DQ	d807aa98a3030242H
	DQ	12835b0145706fbeH
	DQ	243185be4ee4b28cH
	DQ	550c7dc3d5ffb4e2H
	DQ	72be5d74f27b896fH
	DQ	80deb1fe3b1696b1H
	DQ	9bdc06a725c71235H
	DQ	c19bf174cf692694H
	DQ	e49b69c19ef14ad2H
	DQ	efbe4786384f25e3H
	DQ	0fc19dc68b8cd5b5H
	DQ	240ca1cc77ac9c65H
	DQ	2de92c6f592b0275H
	DQ	4a7484aa6ea6e483H
	DQ	5cb0a9dcbd41fbd4H
	DQ	76f988da831153b5H
	DQ	983e5152ee66dfabH
	DQ	a831c66d2db43210H
	DQ	b00327c898fb213fH
	DQ	bf597fc7beef0ee4H
	DQ	c6e00bf33da88fc2H
	DQ	d5a79147930aa725H
	DQ	06ca6351e003826fH
	DQ	142929670a0e6e70H
	DQ	27b70a8546d22ffcH
	DQ	2e1b21385c26c926H
	DQ	4d2c6dfc5ac42aedH
	DQ	53380d139d95b3dfH
	DQ	650a73548baf63deH
	DQ	766a0abb3c77b2a8H
	DQ	81c2c92e47edaee6H
	DQ	92722c851482353bH
	DQ	a2bfe8a14cf10364H
	DQ	a81a664bbc423001H
	DQ	c24b8b70d0f89791H
	DQ	c76c51a30654be30H
	DQ	d192e819d6ef5218H
	DQ	d69906245565a910H
	DQ	f40e35855771202aH
	DQ	106aa07032bbd1b8H
	DQ	19a4c116b8d2d0c8H
	DQ	1e376c085141ab53H
	DQ	2748774cdf8eeb99H
	DQ	34b0bcb5e19b48a8H
	DQ	391c0cb3c5c95a63H
	DQ	4ed8aa4ae3418acbH
	DQ	5b9cca4f7763e373H
	DQ	682e6ff3d6b2b8a3H
	DQ	748f82ee5defb2fcH
	DQ	78a5636f43172f60H
	DQ	84c87814a1f0ab72H
	DQ	8cc702081a6439ecH
	DQ	90befffa23631e28H
	DQ	a4506cebde82bde9H
	DQ	bef9a3f7b2c67915H
	DQ	c67178f2e372532bH
	DQ	ca273eceea26619cH
	DQ	d186b8c721c0c207H
	DQ	eada7dd6cde0eb1eH
	DQ	f57d4f7fee6ed178H
	DQ	06f067aa72176fbaH
	DQ	0a637dc5a2c898a6H
	DQ	113f9804bef90daeH
	DQ	1b710b35131c471bH
	DQ	28db77f523047d84H
	DQ	32caab7b40c72493H
	DQ	3c9ebe0a15c9bebcH
	DQ	431d67c49c100d4cH
	DQ	4cc5d4becb3e42b6H
	DQ	597f299cfc657e2aH
	DQ	5fcb6fab3ad6faecH
	DQ	6c44198c4a475817H
_i384	DQ	cbbb9d5dc1059ed8H
	DQ	629a292a367cd507H
	DQ	9159015a3070dd17H
	DQ	152fecd8f70e5939H
	DQ	67332667ffc00b31H
	DQ	8eb44a8768581511H
	DQ	db0c2e0d64f98fa7H
	DQ	47b5481dbefa4fa4H
	ORG $+576
_i512	DQ	6a09e667f3bcc908H
	DQ	bb67ae8584caa73bH
	DQ	3c6ef372fe94f82bH
	DQ	a54ff53a5f1d36f1H
	DQ	510e527fade682d1H
	DQ	9b05688c2b3e6c1fH
	DQ	1f83d9abfb41bd6bH
	DQ	5be0cd19137e2179H
	ORG $+576
CONST	ENDS
PUBLIC	_sha256_compile
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\crypto\sha2.c
;	COMDAT _sha256_compile
_TEXT	SEGMENT
tv2520 = -36						; size = 4
_v$ = -32						; size = 32
tv2819 = 8						; size = 4
tv2779 = 8						; size = 4
tv2739 = 8						; size = 4
tv2709 = 8						; size = 4
tv2695 = 8						; size = 4
tv2664 = 8						; size = 4
tv2650 = 8						; size = 4
tv2555 = 8						; size = 4
tv2523 = 8						; size = 4
tv2503 = 8						; size = 4
_ctx$ = 8						; size = 4
_sha256_compile PROC					; COMDAT

; 191  : #if !defined(UNROLL_SHA2)
; 192  : 
; 193  :     uint_32t j, *p = ctx->wbuf, v[8];

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _ctx$[esp-4]
  00004	83 ec 24	 sub	 esp, 36			; 00000024H
  00007	53		 push	 ebx
  00008	55		 push	 ebp
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 194  : 
; 195  :     memcpy(v, ctx->hash, 8 * sizeof(uint_32t));

  0000b	8d 70 08	 lea	 esi, DWORD PTR [eax+8]
  0000e	b9 08 00 00 00	 mov	 ecx, 8
  00013	8d 7c 24 14	 lea	 edi, DWORD PTR _v$[esp+52]
  00017	f3 a5		 rep movsd

; 196  : 
; 197  :     for(j = 0; j < 64; j += 16)

  00019	8b 54 24 18	 mov	 edx, DWORD PTR _v$[esp+56]
  0001d	8b 74 24 14	 mov	 esi, DWORD PTR _v$[esp+52]
  00021	33 c9		 xor	 ecx, ecx
$LL40@sha256_com:
  00023	8b 7c 24 24	 mov	 edi, DWORD PTR _v$[esp+68]

; 198  :     {
; 199  :         v_cycle( 0, j); v_cycle( 1, j);

  00027	85 c9		 test	 ecx, ecx
  00029	74 35		 je	 SHORT $LN6@sha256_com
  0002b	8b 78 2c	 mov	 edi, DWORD PTR [eax+44]
  0002e	8b df		 mov	 ebx, edi
  00030	c1 c3 0e	 rol	 ebx, 14			; 0000000eH
  00033	8b ef		 mov	 ebp, edi
  00035	c1 cd 07	 ror	 ebp, 7
  00038	33 dd		 xor	 ebx, ebp
  0003a	c1 ef 03	 shr	 edi, 3
  0003d	33 df		 xor	 ebx, edi
  0003f	8b 78 60	 mov	 edi, DWORD PTR [eax+96]
  00042	8b ef		 mov	 ebp, edi
  00044	c1 c5 0f	 rol	 ebp, 15			; 0000000fH
  00047	c1 c7 0d	 rol	 edi, 13			; 0000000dH
  0004a	33 ef		 xor	 ebp, edi
  0004c	8b 78 60	 mov	 edi, DWORD PTR [eax+96]
  0004f	c1 ef 0a	 shr	 edi, 10			; 0000000aH
  00052	33 ef		 xor	 ebp, edi
  00054	8b 7c 24 24	 mov	 edi, DWORD PTR _v$[esp+68]
  00058	03 dd		 add	 ebx, ebp
  0005a	03 58 4c	 add	 ebx, DWORD PTR [eax+76]
  0005d	01 58 28	 add	 DWORD PTR [eax+40], ebx
$LN6@sha256_com:
  00060	8b df		 mov	 ebx, edi
  00062	c1 cb 0b	 ror	 ebx, 11			; 0000000bH
  00065	8b ef		 mov	 ebp, edi
  00067	c1 c5 07	 rol	 ebp, 7
  0006a	33 dd		 xor	 ebx, ebp
  0006c	c1 cf 06	 ror	 edi, 6
  0006f	33 df		 xor	 ebx, edi
  00071	8b 7c 24 28	 mov	 edi, DWORD PTR _v$[esp+72]
  00075	33 7c 24 2c	 xor	 edi, DWORD PTR _v$[esp+76]
  00079	8b ea		 mov	 ebp, edx
  0007b	23 7c 24 24	 and	 edi, DWORD PTR _v$[esp+68]
  0007f	23 ee		 and	 ebp, esi
  00081	33 7c 24 2c	 xor	 edi, DWORD PTR _v$[esp+76]
  00085	03 df		 add	 ebx, edi
  00087	03 1c 8d 00 00
	00 00		 add	 ebx, DWORD PTR _k256[ecx*4]
  0008e	8b 7c 24 30	 mov	 edi, DWORD PTR _v$[esp+80]
  00092	03 58 28	 add	 ebx, DWORD PTR [eax+40]
  00095	03 fb		 add	 edi, ebx
  00097	01 7c 24 20	 add	 DWORD PTR _v$[esp+64], edi
  0009b	89 7c 24 30	 mov	 DWORD PTR _v$[esp+80], edi
  0009f	8b fe		 mov	 edi, esi
  000a1	c1 cf 0d	 ror	 edi, 13			; 0000000dH
  000a4	8b de		 mov	 ebx, esi
  000a6	c1 c3 0a	 rol	 ebx, 10			; 0000000aH
  000a9	33 fb		 xor	 edi, ebx
  000ab	8b de		 mov	 ebx, esi
  000ad	c1 cb 02	 ror	 ebx, 2
  000b0	33 fb		 xor	 edi, ebx
  000b2	8b da		 mov	 ebx, edx
  000b4	33 de		 xor	 ebx, esi
  000b6	23 5c 24 1c	 and	 ebx, DWORD PTR _v$[esp+60]
  000ba	0b dd		 or	 ebx, ebp
  000bc	03 5c 24 30	 add	 ebx, DWORD PTR _v$[esp+80]
  000c0	03 df		 add	 ebx, edi
  000c2	89 5c 24 30	 mov	 DWORD PTR _v$[esp+80], ebx
  000c6	85 c9		 test	 ecx, ecx
  000c8	74 31		 je	 SHORT $LN8@sha256_com
  000ca	8b 78 30	 mov	 edi, DWORD PTR [eax+48]
  000cd	8b df		 mov	 ebx, edi
  000cf	c1 c3 0e	 rol	 ebx, 14			; 0000000eH
  000d2	8b ef		 mov	 ebp, edi
  000d4	c1 cd 07	 ror	 ebp, 7
  000d7	33 dd		 xor	 ebx, ebp
  000d9	c1 ef 03	 shr	 edi, 3
  000dc	33 df		 xor	 ebx, edi
  000de	8b 78 64	 mov	 edi, DWORD PTR [eax+100]
  000e1	8b ef		 mov	 ebp, edi
  000e3	c1 c5 0f	 rol	 ebp, 15			; 0000000fH
  000e6	c1 c7 0d	 rol	 edi, 13			; 0000000dH
  000e9	33 ef		 xor	 ebp, edi
  000eb	8b 78 64	 mov	 edi, DWORD PTR [eax+100]
  000ee	c1 ef 0a	 shr	 edi, 10			; 0000000aH
  000f1	33 ef		 xor	 ebp, edi
  000f3	03 dd		 add	 ebx, ebp
  000f5	03 58 50	 add	 ebx, DWORD PTR [eax+80]
  000f8	01 58 2c	 add	 DWORD PTR [eax+44], ebx
$LN8@sha256_com:
  000fb	8b 7c 24 20	 mov	 edi, DWORD PTR _v$[esp+64]
  000ff	8b df		 mov	 ebx, edi
  00101	c1 cb 0b	 ror	 ebx, 11			; 0000000bH
  00104	8b ef		 mov	 ebp, edi
  00106	c1 c5 07	 rol	 ebp, 7
  00109	33 dd		 xor	 ebx, ebp
  0010b	8b ef		 mov	 ebp, edi
  0010d	c1 cd 06	 ror	 ebp, 6
  00110	33 dd		 xor	 ebx, ebp
  00112	8b 6c 24 28	 mov	 ebp, DWORD PTR _v$[esp+72]
  00116	33 6c 24 24	 xor	 ebp, DWORD PTR _v$[esp+68]
  0011a	23 ef		 and	 ebp, edi
  0011c	33 6c 24 28	 xor	 ebp, DWORD PTR _v$[esp+72]
  00120	8b 7c 24 2c	 mov	 edi, DWORD PTR _v$[esp+76]
  00124	03 dd		 add	 ebx, ebp
  00126	03 1c 8d 04 00
	00 00		 add	 ebx, DWORD PTR _k256[ecx*4+4]
  0012d	03 58 2c	 add	 ebx, DWORD PTR [eax+44]
  00130	03 fb		 add	 edi, ebx
  00132	01 7c 24 1c	 add	 DWORD PTR _v$[esp+60], edi
  00136	89 7c 24 2c	 mov	 DWORD PTR _v$[esp+76], edi
  0013a	8b 7c 24 30	 mov	 edi, DWORD PTR _v$[esp+80]
  0013e	8b df		 mov	 ebx, edi
  00140	c1 cb 0d	 ror	 ebx, 13			; 0000000dH
  00143	8b ef		 mov	 ebp, edi
  00145	c1 c5 0a	 rol	 ebp, 10			; 0000000aH
  00148	33 dd		 xor	 ebx, ebp
  0014a	8b ef		 mov	 ebp, edi
  0014c	c1 cd 02	 ror	 ebp, 2
  0014f	33 dd		 xor	 ebx, ebp
  00151	8b ee		 mov	 ebp, esi
  00153	33 ef		 xor	 ebp, edi
  00155	23 ea		 and	 ebp, edx
  00157	23 f7		 and	 esi, edi
  00159	0b ee		 or	 ebp, esi
  0015b	03 6c 24 2c	 add	 ebp, DWORD PTR _v$[esp+76]
  0015f	03 eb		 add	 ebp, ebx
  00161	89 6c 24 2c	 mov	 DWORD PTR _v$[esp+76], ebp

; 200  :         v_cycle( 2, j); v_cycle( 3, j);

  00165	85 c9		 test	 ecx, ecx
  00167	74 31		 je	 SHORT $LN10@sha256_com
  00169	8b 70 34	 mov	 esi, DWORD PTR [eax+52]
  0016c	8b de		 mov	 ebx, esi
  0016e	c1 c3 0e	 rol	 ebx, 14			; 0000000eH
  00171	8b ee		 mov	 ebp, esi
  00173	c1 cd 07	 ror	 ebp, 7
  00176	33 dd		 xor	 ebx, ebp
  00178	c1 ee 03	 shr	 esi, 3
  0017b	33 de		 xor	 ebx, esi
  0017d	8b 70 28	 mov	 esi, DWORD PTR [eax+40]
  00180	8b ee		 mov	 ebp, esi
  00182	c1 c5 0f	 rol	 ebp, 15			; 0000000fH
  00185	c1 c6 0d	 rol	 esi, 13			; 0000000dH
  00188	33 ee		 xor	 ebp, esi
  0018a	8b 70 28	 mov	 esi, DWORD PTR [eax+40]
  0018d	c1 ee 0a	 shr	 esi, 10			; 0000000aH
  00190	33 ee		 xor	 ebp, esi
  00192	03 dd		 add	 ebx, ebp
  00194	03 58 54	 add	 ebx, DWORD PTR [eax+84]
  00197	01 58 30	 add	 DWORD PTR [eax+48], ebx
$LN10@sha256_com:
  0019a	8b 74 24 1c	 mov	 esi, DWORD PTR _v$[esp+60]
  0019e	8b de		 mov	 ebx, esi
  001a0	c1 cb 0b	 ror	 ebx, 11			; 0000000bH
  001a3	8b ee		 mov	 ebp, esi
  001a5	c1 c5 07	 rol	 ebp, 7
  001a8	33 dd		 xor	 ebx, ebp
  001aa	c1 ce 06	 ror	 esi, 6
  001ad	33 de		 xor	 ebx, esi
  001af	8b 74 24 20	 mov	 esi, DWORD PTR _v$[esp+64]
  001b3	33 74 24 24	 xor	 esi, DWORD PTR _v$[esp+68]
  001b7	23 74 24 1c	 and	 esi, DWORD PTR _v$[esp+60]
  001bb	33 74 24 24	 xor	 esi, DWORD PTR _v$[esp+68]
  001bf	03 de		 add	 ebx, esi
  001c1	03 1c 8d 08 00
	00 00		 add	 ebx, DWORD PTR _k256[ecx*4+8]
  001c8	8b 74 24 28	 mov	 esi, DWORD PTR _v$[esp+72]
  001cc	03 58 30	 add	 ebx, DWORD PTR [eax+48]
  001cf	03 f3		 add	 esi, ebx
  001d1	03 d6		 add	 edx, esi
  001d3	89 74 24 28	 mov	 DWORD PTR _v$[esp+72], esi
  001d7	8b 74 24 2c	 mov	 esi, DWORD PTR _v$[esp+76]
  001db	8b de		 mov	 ebx, esi
  001dd	c1 cb 0d	 ror	 ebx, 13			; 0000000dH
  001e0	8b ee		 mov	 ebp, esi
  001e2	c1 c5 0a	 rol	 ebp, 10			; 0000000aH
  001e5	33 dd		 xor	 ebx, ebp
  001e7	8b ee		 mov	 ebp, esi
  001e9	c1 cd 02	 ror	 ebp, 2
  001ec	33 dd		 xor	 ebx, ebp
  001ee	8b ef		 mov	 ebp, edi
  001f0	33 ee		 xor	 ebp, esi
  001f2	23 6c 24 14	 and	 ebp, DWORD PTR _v$[esp+52]
  001f6	23 fe		 and	 edi, esi
  001f8	0b ef		 or	 ebp, edi
  001fa	03 6c 24 28	 add	 ebp, DWORD PTR _v$[esp+72]
  001fe	03 eb		 add	 ebp, ebx
  00200	89 6c 24 28	 mov	 DWORD PTR _v$[esp+72], ebp
  00204	85 c9		 test	 ecx, ecx
  00206	74 31		 je	 SHORT $LN12@sha256_com
  00208	8b 78 2c	 mov	 edi, DWORD PTR [eax+44]
  0020b	8b df		 mov	 ebx, edi
  0020d	c1 c3 0f	 rol	 ebx, 15			; 0000000fH
  00210	8b ef		 mov	 ebp, edi
  00212	c1 c5 0d	 rol	 ebp, 13			; 0000000dH
  00215	33 dd		 xor	 ebx, ebp
  00217	c1 ef 0a	 shr	 edi, 10			; 0000000aH
  0021a	33 df		 xor	 ebx, edi
  0021c	8b 78 38	 mov	 edi, DWORD PTR [eax+56]
  0021f	8b ef		 mov	 ebp, edi
  00221	c1 c5 0e	 rol	 ebp, 14			; 0000000eH
  00224	c1 cf 07	 ror	 edi, 7
  00227	33 ef		 xor	 ebp, edi
  00229	8b 78 38	 mov	 edi, DWORD PTR [eax+56]
  0022c	c1 ef 03	 shr	 edi, 3
  0022f	33 ef		 xor	 ebp, edi
  00231	03 dd		 add	 ebx, ebp
  00233	03 58 58	 add	 ebx, DWORD PTR [eax+88]
  00236	01 58 34	 add	 DWORD PTR [eax+52], ebx
$LN12@sha256_com:
  00239	8b 6c 24 1c	 mov	 ebp, DWORD PTR _v$[esp+60]
  0023d	8b da		 mov	 ebx, edx
  0023f	c1 cb 0b	 ror	 ebx, 11			; 0000000bH
  00242	8b fa		 mov	 edi, edx
  00244	c1 c7 07	 rol	 edi, 7
  00247	33 df		 xor	 ebx, edi
  00249	8b fa		 mov	 edi, edx
  0024b	c1 cf 06	 ror	 edi, 6
  0024e	33 df		 xor	 ebx, edi
  00250	8b 7c 24 20	 mov	 edi, DWORD PTR _v$[esp+64]
  00254	33 ef		 xor	 ebp, edi
  00256	23 ea		 and	 ebp, edx
  00258	33 ef		 xor	 ebp, edi
  0025a	8b 7c 24 24	 mov	 edi, DWORD PTR _v$[esp+68]
  0025e	03 dd		 add	 ebx, ebp
  00260	03 1c 8d 0c 00
	00 00		 add	 ebx, DWORD PTR _k256[ecx*4+12]
  00267	03 58 34	 add	 ebx, DWORD PTR [eax+52]
  0026a	03 fb		 add	 edi, ebx
  0026c	01 7c 24 14	 add	 DWORD PTR _v$[esp+52], edi
  00270	89 7c 24 24	 mov	 DWORD PTR _v$[esp+68], edi
  00274	8b 7c 24 28	 mov	 edi, DWORD PTR _v$[esp+72]
  00278	8b df		 mov	 ebx, edi
  0027a	c1 cb 0d	 ror	 ebx, 13			; 0000000dH
  0027d	8b ef		 mov	 ebp, edi
  0027f	c1 c5 0a	 rol	 ebp, 10			; 0000000aH
  00282	33 dd		 xor	 ebx, ebp
  00284	8b ef		 mov	 ebp, edi
  00286	c1 cd 02	 ror	 ebp, 2
  00289	33 dd		 xor	 ebx, ebp
  0028b	8b ef		 mov	 ebp, edi
  0028d	33 ee		 xor	 ebp, esi
  0028f	23 6c 24 30	 and	 ebp, DWORD PTR _v$[esp+80]
  00293	23 fe		 and	 edi, esi
  00295	0b ef		 or	 ebp, edi
  00297	03 6c 24 24	 add	 ebp, DWORD PTR _v$[esp+68]
  0029b	8d 34 2b	 lea	 esi, DWORD PTR [ebx+ebp]
  0029e	89 74 24 24	 mov	 DWORD PTR _v$[esp+68], esi

; 201  :         v_cycle( 4, j); v_cycle( 5, j);

  002a2	85 c9		 test	 ecx, ecx
  002a4	74 31		 je	 SHORT $LN14@sha256_com
  002a6	8b 78 30	 mov	 edi, DWORD PTR [eax+48]
  002a9	8b df		 mov	 ebx, edi
  002ab	c1 c3 0f	 rol	 ebx, 15			; 0000000fH
  002ae	8b ef		 mov	 ebp, edi
  002b0	c1 c5 0d	 rol	 ebp, 13			; 0000000dH
  002b3	33 dd		 xor	 ebx, ebp
  002b5	c1 ef 0a	 shr	 edi, 10			; 0000000aH
  002b8	33 df		 xor	 ebx, edi
  002ba	8b 78 3c	 mov	 edi, DWORD PTR [eax+60]
  002bd	8b ef		 mov	 ebp, edi
  002bf	c1 c5 0e	 rol	 ebp, 14			; 0000000eH
  002c2	c1 cf 07	 ror	 edi, 7
  002c5	33 ef		 xor	 ebp, edi
  002c7	8b 78 3c	 mov	 edi, DWORD PTR [eax+60]
  002ca	c1 ef 03	 shr	 edi, 3
  002cd	33 ef		 xor	 ebp, edi
  002cf	03 dd		 add	 ebx, ebp
  002d1	03 58 5c	 add	 ebx, DWORD PTR [eax+92]
  002d4	01 58 38	 add	 DWORD PTR [eax+56], ebx
$LN14@sha256_com:
  002d7	8b 7c 24 14	 mov	 edi, DWORD PTR _v$[esp+52]
  002db	8b df		 mov	 ebx, edi
  002dd	c1 cb 0b	 ror	 ebx, 11			; 0000000bH
  002e0	8b ef		 mov	 ebp, edi
  002e2	c1 c5 07	 rol	 ebp, 7
  002e5	33 dd		 xor	 ebx, ebp
  002e7	8b ef		 mov	 ebp, edi
  002e9	c1 cd 06	 ror	 ebp, 6
  002ec	33 dd		 xor	 ebx, ebp
  002ee	8b 6c 24 1c	 mov	 ebp, DWORD PTR _v$[esp+60]
  002f2	33 ea		 xor	 ebp, edx
  002f4	23 ef		 and	 ebp, edi
  002f6	33 6c 24 1c	 xor	 ebp, DWORD PTR _v$[esp+60]
  002fa	8b 7c 24 20	 mov	 edi, DWORD PTR _v$[esp+64]
  002fe	03 dd		 add	 ebx, ebp
  00300	03 1c 8d 10 00
	00 00		 add	 ebx, DWORD PTR _k256[ecx*4+16]
  00307	8b 6c 24 28	 mov	 ebp, DWORD PTR _v$[esp+72]
  0030b	03 58 38	 add	 ebx, DWORD PTR [eax+56]
  0030e	23 ee		 and	 ebp, esi
  00310	03 fb		 add	 edi, ebx
  00312	01 7c 24 30	 add	 DWORD PTR _v$[esp+80], edi
  00316	89 7c 24 20	 mov	 DWORD PTR _v$[esp+64], edi
  0031a	8b fe		 mov	 edi, esi
  0031c	c1 cf 0d	 ror	 edi, 13			; 0000000dH
  0031f	8b de		 mov	 ebx, esi
  00321	c1 c3 0a	 rol	 ebx, 10			; 0000000aH
  00324	33 fb		 xor	 edi, ebx
  00326	8b de		 mov	 ebx, esi
  00328	c1 cb 02	 ror	 ebx, 2
  0032b	33 fb		 xor	 edi, ebx
  0032d	8b 5c 24 28	 mov	 ebx, DWORD PTR _v$[esp+72]
  00331	33 de		 xor	 ebx, esi
  00333	23 5c 24 2c	 and	 ebx, DWORD PTR _v$[esp+76]
  00337	0b dd		 or	 ebx, ebp
  00339	03 5c 24 20	 add	 ebx, DWORD PTR _v$[esp+64]
  0033d	03 df		 add	 ebx, edi
  0033f	89 5c 24 20	 mov	 DWORD PTR _v$[esp+64], ebx
  00343	85 c9		 test	 ecx, ecx
  00345	74 31		 je	 SHORT $LN16@sha256_com
  00347	8b 78 34	 mov	 edi, DWORD PTR [eax+52]
  0034a	8b df		 mov	 ebx, edi
  0034c	c1 c3 0f	 rol	 ebx, 15			; 0000000fH
  0034f	8b ef		 mov	 ebp, edi
  00351	c1 c5 0d	 rol	 ebp, 13			; 0000000dH
  00354	33 dd		 xor	 ebx, ebp
  00356	c1 ef 0a	 shr	 edi, 10			; 0000000aH
  00359	33 df		 xor	 ebx, edi
  0035b	8b 78 40	 mov	 edi, DWORD PTR [eax+64]
  0035e	8b ef		 mov	 ebp, edi
  00360	c1 c5 0e	 rol	 ebp, 14			; 0000000eH
  00363	c1 cf 07	 ror	 edi, 7
  00366	33 ef		 xor	 ebp, edi
  00368	8b 78 40	 mov	 edi, DWORD PTR [eax+64]
  0036b	c1 ef 03	 shr	 edi, 3
  0036e	33 ef		 xor	 ebp, edi
  00370	03 dd		 add	 ebx, ebp
  00372	03 58 60	 add	 ebx, DWORD PTR [eax+96]
  00375	01 58 3c	 add	 DWORD PTR [eax+60], ebx
$LN16@sha256_com:
  00378	8b 7c 24 30	 mov	 edi, DWORD PTR _v$[esp+80]
  0037c	8b df		 mov	 ebx, edi
  0037e	c1 cb 0b	 ror	 ebx, 11			; 0000000bH
  00381	8b ef		 mov	 ebp, edi
  00383	c1 c5 07	 rol	 ebp, 7
  00386	33 dd		 xor	 ebx, ebp
  00388	8b ef		 mov	 ebp, edi
  0038a	c1 cd 06	 ror	 ebp, 6
  0038d	33 dd		 xor	 ebx, ebp
  0038f	8b ea		 mov	 ebp, edx
  00391	33 6c 24 14	 xor	 ebp, DWORD PTR _v$[esp+52]
  00395	23 ef		 and	 ebp, edi
  00397	8b 7c 24 1c	 mov	 edi, DWORD PTR _v$[esp+60]
  0039b	33 ea		 xor	 ebp, edx
  0039d	03 dd		 add	 ebx, ebp
  0039f	03 1c 8d 14 00
	00 00		 add	 ebx, DWORD PTR _k256[ecx*4+20]
  003a6	03 58 3c	 add	 ebx, DWORD PTR [eax+60]
  003a9	03 fb		 add	 edi, ebx
  003ab	01 7c 24 2c	 add	 DWORD PTR _v$[esp+76], edi
  003af	89 7c 24 1c	 mov	 DWORD PTR _v$[esp+60], edi
  003b3	8b 7c 24 20	 mov	 edi, DWORD PTR _v$[esp+64]
  003b7	8b df		 mov	 ebx, edi
  003b9	c1 cb 0d	 ror	 ebx, 13			; 0000000dH
  003bc	8b ef		 mov	 ebp, edi
  003be	c1 c5 0a	 rol	 ebp, 10			; 0000000aH
  003c1	33 dd		 xor	 ebx, ebp
  003c3	8b ef		 mov	 ebp, edi
  003c5	c1 cd 02	 ror	 ebp, 2
  003c8	33 dd		 xor	 ebx, ebp
  003ca	8b ef		 mov	 ebp, edi
  003cc	33 ee		 xor	 ebp, esi
  003ce	23 6c 24 28	 and	 ebp, DWORD PTR _v$[esp+72]
  003d2	23 fe		 and	 edi, esi
  003d4	0b ef		 or	 ebp, edi
  003d6	03 6c 24 1c	 add	 ebp, DWORD PTR _v$[esp+60]
  003da	03 eb		 add	 ebp, ebx
  003dc	89 6c 24 1c	 mov	 DWORD PTR _v$[esp+60], ebp

; 202  :         v_cycle( 6, j); v_cycle( 7, j);

  003e0	85 c9		 test	 ecx, ecx
  003e2	74 31		 je	 SHORT $LN18@sha256_com
  003e4	8b 78 38	 mov	 edi, DWORD PTR [eax+56]
  003e7	8b df		 mov	 ebx, edi
  003e9	c1 c3 0f	 rol	 ebx, 15			; 0000000fH
  003ec	8b ef		 mov	 ebp, edi
  003ee	c1 c5 0d	 rol	 ebp, 13			; 0000000dH
  003f1	33 dd		 xor	 ebx, ebp
  003f3	c1 ef 0a	 shr	 edi, 10			; 0000000aH
  003f6	33 df		 xor	 ebx, edi
  003f8	8b 78 44	 mov	 edi, DWORD PTR [eax+68]
  003fb	8b ef		 mov	 ebp, edi
  003fd	c1 c5 0e	 rol	 ebp, 14			; 0000000eH
  00400	c1 cf 07	 ror	 edi, 7
  00403	33 ef		 xor	 ebp, edi
  00405	8b 78 44	 mov	 edi, DWORD PTR [eax+68]
  00408	c1 ef 03	 shr	 edi, 3
  0040b	33 ef		 xor	 ebp, edi
  0040d	03 dd		 add	 ebx, ebp
  0040f	03 58 64	 add	 ebx, DWORD PTR [eax+100]
  00412	01 58 40	 add	 DWORD PTR [eax+64], ebx
$LN18@sha256_com:
  00415	8b 7c 24 2c	 mov	 edi, DWORD PTR _v$[esp+76]
  00419	8b df		 mov	 ebx, edi
  0041b	c1 cb 0b	 ror	 ebx, 11			; 0000000bH
  0041e	8b ef		 mov	 ebp, edi
  00420	c1 c5 07	 rol	 ebp, 7
  00423	33 dd		 xor	 ebx, ebp
  00425	8b ef		 mov	 ebp, edi
  00427	c1 cd 06	 ror	 ebp, 6
  0042a	33 dd		 xor	 ebx, ebp
  0042c	8b 6c 24 14	 mov	 ebp, DWORD PTR _v$[esp+52]
  00430	33 6c 24 30	 xor	 ebp, DWORD PTR _v$[esp+80]
  00434	23 ef		 and	 ebp, edi
  00436	33 6c 24 14	 xor	 ebp, DWORD PTR _v$[esp+52]
  0043a	8b 7c 24 1c	 mov	 edi, DWORD PTR _v$[esp+60]
  0043e	03 dd		 add	 ebx, ebp
  00440	03 1c 8d 18 00
	00 00		 add	 ebx, DWORD PTR _k256[ecx*4+24]
  00447	8b ef		 mov	 ebp, edi
  00449	03 58 40	 add	 ebx, DWORD PTR [eax+64]
  0044c	03 d3		 add	 edx, ebx
  0044e	01 54 24 28	 add	 DWORD PTR _v$[esp+72], edx
  00452	8b df		 mov	 ebx, edi
  00454	c1 cb 0d	 ror	 ebx, 13			; 0000000dH
  00457	c1 c5 0a	 rol	 ebp, 10			; 0000000aH
  0045a	33 dd		 xor	 ebx, ebp
  0045c	8b ef		 mov	 ebp, edi
  0045e	c1 cd 02	 ror	 ebp, 2
  00461	33 dd		 xor	 ebx, ebp
  00463	8b ef		 mov	 ebp, edi
  00465	8b 7c 24 20	 mov	 edi, DWORD PTR _v$[esp+64]
  00469	33 ef		 xor	 ebp, edi
  0046b	23 ee		 and	 ebp, esi
  0046d	8b 74 24 1c	 mov	 esi, DWORD PTR _v$[esp+60]
  00471	23 f7		 and	 esi, edi
  00473	0b ee		 or	 ebp, esi
  00475	03 ea		 add	 ebp, edx
  00477	8d 14 2b	 lea	 edx, DWORD PTR [ebx+ebp]
  0047a	89 54 24 18	 mov	 DWORD PTR _v$[esp+56], edx
  0047e	85 c9		 test	 ecx, ecx
  00480	74 30		 je	 SHORT $LN20@sha256_com
  00482	8b 78 3c	 mov	 edi, DWORD PTR [eax+60]
  00485	8b 70 48	 mov	 esi, DWORD PTR [eax+72]
  00488	8b df		 mov	 ebx, edi
  0048a	c1 c3 0f	 rol	 ebx, 15			; 0000000fH
  0048d	8b ef		 mov	 ebp, edi
  0048f	c1 c5 0d	 rol	 ebp, 13			; 0000000dH
  00492	33 dd		 xor	 ebx, ebp
  00494	c1 ef 0a	 shr	 edi, 10			; 0000000aH
  00497	33 df		 xor	 ebx, edi
  00499	8b fe		 mov	 edi, esi
  0049b	c1 c7 0e	 rol	 edi, 14			; 0000000eH
  0049e	8b ee		 mov	 ebp, esi
  004a0	c1 cd 07	 ror	 ebp, 7
  004a3	33 fd		 xor	 edi, ebp
  004a5	c1 ee 03	 shr	 esi, 3
  004a8	33 fe		 xor	 edi, esi
  004aa	03 df		 add	 ebx, edi
  004ac	03 58 28	 add	 ebx, DWORD PTR [eax+40]
  004af	01 58 44	 add	 DWORD PTR [eax+68], ebx
$LN20@sha256_com:
  004b2	8b 7c 24 28	 mov	 edi, DWORD PTR _v$[esp+72]
  004b6	8b df		 mov	 ebx, edi
  004b8	c1 cb 0b	 ror	 ebx, 11			; 0000000bH
  004bb	8b f7		 mov	 esi, edi
  004bd	c1 c6 07	 rol	 esi, 7
  004c0	33 de		 xor	 ebx, esi
  004c2	8b f7		 mov	 esi, edi
  004c4	c1 ce 06	 ror	 esi, 6
  004c7	33 de		 xor	 ebx, esi
  004c9	8b 74 24 30	 mov	 esi, DWORD PTR _v$[esp+80]
  004cd	8b ee		 mov	 ebp, esi
  004cf	33 6c 24 2c	 xor	 ebp, DWORD PTR _v$[esp+76]
  004d3	23 ef		 and	 ebp, edi
  004d5	33 ee		 xor	 ebp, esi
  004d7	8b 74 24 14	 mov	 esi, DWORD PTR _v$[esp+52]
  004db	03 dd		 add	 ebx, ebp
  004dd	03 1c 8d 1c 00
	00 00		 add	 ebx, DWORD PTR _k256[ecx*4+28]
  004e4	8b 6c 24 1c	 mov	 ebp, DWORD PTR _v$[esp+60]
  004e8	03 58 44	 add	 ebx, DWORD PTR [eax+68]
  004eb	23 ea		 and	 ebp, edx
  004ed	03 f3		 add	 esi, ebx
  004ef	01 74 24 24	 add	 DWORD PTR _v$[esp+68], esi
  004f3	89 74 24 14	 mov	 DWORD PTR _v$[esp+52], esi
  004f7	8b f2		 mov	 esi, edx
  004f9	c1 ce 0d	 ror	 esi, 13			; 0000000dH
  004fc	8b da		 mov	 ebx, edx
  004fe	c1 c3 0a	 rol	 ebx, 10			; 0000000aH
  00501	33 f3		 xor	 esi, ebx
  00503	8b da		 mov	 ebx, edx
  00505	c1 cb 02	 ror	 ebx, 2
  00508	33 f3		 xor	 esi, ebx
  0050a	8b 5c 24 1c	 mov	 ebx, DWORD PTR _v$[esp+60]
  0050e	33 da		 xor	 ebx, edx
  00510	23 5c 24 20	 and	 ebx, DWORD PTR _v$[esp+64]
  00514	0b dd		 or	 ebx, ebp
  00516	03 5c 24 14	 add	 ebx, DWORD PTR _v$[esp+52]
  0051a	03 f3		 add	 esi, ebx

; 203  :         v_cycle( 8, j); v_cycle( 9, j);

  0051c	85 c9		 test	 ecx, ecx
  0051e	74 36		 je	 SHORT $LN22@sha256_com
  00520	8b 58 40	 mov	 ebx, DWORD PTR [eax+64]
  00523	8b 78 4c	 mov	 edi, DWORD PTR [eax+76]
  00526	8b eb		 mov	 ebp, ebx
  00528	c1 c5 0f	 rol	 ebp, 15			; 0000000fH
  0052b	c1 c3 0d	 rol	 ebx, 13			; 0000000dH
  0052e	33 eb		 xor	 ebp, ebx
  00530	8b 58 40	 mov	 ebx, DWORD PTR [eax+64]
  00533	c1 eb 0a	 shr	 ebx, 10			; 0000000aH
  00536	33 eb		 xor	 ebp, ebx
  00538	8b df		 mov	 ebx, edi
  0053a	c1 c3 0e	 rol	 ebx, 14			; 0000000eH
  0053d	c1 cf 07	 ror	 edi, 7
  00540	33 df		 xor	 ebx, edi
  00542	8b 78 4c	 mov	 edi, DWORD PTR [eax+76]
  00545	c1 ef 03	 shr	 edi, 3
  00548	33 df		 xor	 ebx, edi
  0054a	8b 7c 24 28	 mov	 edi, DWORD PTR _v$[esp+72]
  0054e	03 eb		 add	 ebp, ebx
  00550	03 68 2c	 add	 ebp, DWORD PTR [eax+44]
  00553	01 68 48	 add	 DWORD PTR [eax+72], ebp
$LN22@sha256_com:
  00556	33 7c 24 2c	 xor	 edi, DWORD PTR _v$[esp+76]
  0055a	8b 5c 24 24	 mov	 ebx, DWORD PTR _v$[esp+68]
  0055e	23 7c 24 24	 and	 edi, DWORD PTR _v$[esp+68]
  00562	8b eb		 mov	 ebp, ebx
  00564	33 7c 24 2c	 xor	 edi, DWORD PTR _v$[esp+76]
  00568	c1 cd 0b	 ror	 ebp, 11			; 0000000bH
  0056b	c1 c3 07	 rol	 ebx, 7
  0056e	33 eb		 xor	 ebp, ebx
  00570	8b 5c 24 24	 mov	 ebx, DWORD PTR _v$[esp+68]
  00574	c1 cb 06	 ror	 ebx, 6
  00577	33 eb		 xor	 ebp, ebx
  00579	03 ef		 add	 ebp, edi
  0057b	03 2c 8d 20 00
	00 00		 add	 ebp, DWORD PTR _k256[ecx*4+32]
  00582	8b 7c 24 30	 mov	 edi, DWORD PTR _v$[esp+80]
  00586	03 68 48	 add	 ebp, DWORD PTR [eax+72]
  00589	8b de		 mov	 ebx, esi
  0058b	03 fd		 add	 edi, ebp
  0058d	01 7c 24 20	 add	 DWORD PTR _v$[esp+64], edi
  00591	89 7c 24 30	 mov	 DWORD PTR _v$[esp+80], edi
  00595	8b fe		 mov	 edi, esi
  00597	c1 cf 0d	 ror	 edi, 13			; 0000000dH
  0059a	c1 c3 0a	 rol	 ebx, 10			; 0000000aH
  0059d	33 fb		 xor	 edi, ebx
  0059f	8b de		 mov	 ebx, esi
  005a1	c1 cb 02	 ror	 ebx, 2
  005a4	33 fb		 xor	 edi, ebx
  005a6	8b da		 mov	 ebx, edx
  005a8	33 de		 xor	 ebx, esi
  005aa	23 5c 24 1c	 and	 ebx, DWORD PTR _v$[esp+60]
  005ae	8b ea		 mov	 ebp, edx
  005b0	23 ee		 and	 ebp, esi
  005b2	0b dd		 or	 ebx, ebp
  005b4	03 5c 24 30	 add	 ebx, DWORD PTR _v$[esp+80]
  005b8	03 df		 add	 ebx, edi
  005ba	89 5c 24 30	 mov	 DWORD PTR _v$[esp+80], ebx
  005be	85 c9		 test	 ecx, ecx
  005c0	74 31		 je	 SHORT $LN24@sha256_com
  005c2	8b 78 50	 mov	 edi, DWORD PTR [eax+80]
  005c5	8b df		 mov	 ebx, edi
  005c7	c1 c3 0e	 rol	 ebx, 14			; 0000000eH
  005ca	8b ef		 mov	 ebp, edi
  005cc	c1 cd 07	 ror	 ebp, 7
  005cf	33 dd		 xor	 ebx, ebp
  005d1	c1 ef 03	 shr	 edi, 3
  005d4	33 df		 xor	 ebx, edi
  005d6	8b 78 44	 mov	 edi, DWORD PTR [eax+68]
  005d9	8b ef		 mov	 ebp, edi
  005db	c1 c5 0f	 rol	 ebp, 15			; 0000000fH
  005de	c1 c7 0d	 rol	 edi, 13			; 0000000dH
  005e1	33 ef		 xor	 ebp, edi
  005e3	8b 78 44	 mov	 edi, DWORD PTR [eax+68]
  005e6	c1 ef 0a	 shr	 edi, 10			; 0000000aH
  005e9	33 ef		 xor	 ebp, edi
  005eb	03 dd		 add	 ebx, ebp
  005ed	03 58 30	 add	 ebx, DWORD PTR [eax+48]
  005f0	01 58 4c	 add	 DWORD PTR [eax+76], ebx
$LN24@sha256_com:
  005f3	8b 7c 24 20	 mov	 edi, DWORD PTR _v$[esp+64]
  005f7	8b df		 mov	 ebx, edi
  005f9	c1 cb 0b	 ror	 ebx, 11			; 0000000bH
  005fc	8b ef		 mov	 ebp, edi
  005fe	c1 c5 07	 rol	 ebp, 7
  00601	33 dd		 xor	 ebx, ebp
  00603	c1 cf 06	 ror	 edi, 6
  00606	33 df		 xor	 ebx, edi
  00608	8b 7c 24 28	 mov	 edi, DWORD PTR _v$[esp+72]
  0060c	33 7c 24 24	 xor	 edi, DWORD PTR _v$[esp+68]
  00610	23 7c 24 20	 and	 edi, DWORD PTR _v$[esp+64]
  00614	33 7c 24 28	 xor	 edi, DWORD PTR _v$[esp+72]
  00618	03 df		 add	 ebx, edi
  0061a	03 1c 8d 24 00
	00 00		 add	 ebx, DWORD PTR _k256[ecx*4+36]
  00621	8b 7c 24 2c	 mov	 edi, DWORD PTR _v$[esp+76]
  00625	03 58 4c	 add	 ebx, DWORD PTR [eax+76]
  00628	03 fb		 add	 edi, ebx
  0062a	01 7c 24 1c	 add	 DWORD PTR _v$[esp+60], edi
  0062e	89 7c 24 2c	 mov	 DWORD PTR _v$[esp+76], edi
  00632	8b 7c 24 30	 mov	 edi, DWORD PTR _v$[esp+80]
  00636	8b df		 mov	 ebx, edi
  00638	c1 cb 0d	 ror	 ebx, 13			; 0000000dH
  0063b	8b ef		 mov	 ebp, edi
  0063d	c1 c5 0a	 rol	 ebp, 10			; 0000000aH
  00640	33 dd		 xor	 ebx, ebp
  00642	8b ef		 mov	 ebp, edi
  00644	c1 cd 02	 ror	 ebp, 2
  00647	33 dd		 xor	 ebx, ebp
  00649	8b ee		 mov	 ebp, esi
  0064b	33 ef		 xor	 ebp, edi
  0064d	23 ea		 and	 ebp, edx
  0064f	8b d6		 mov	 edx, esi
  00651	23 d7		 and	 edx, edi
  00653	0b ea		 or	 ebp, edx
  00655	03 6c 24 2c	 add	 ebp, DWORD PTR _v$[esp+76]
  00659	8d 14 2b	 lea	 edx, DWORD PTR [ebx+ebp]
  0065c	89 54 24 2c	 mov	 DWORD PTR _v$[esp+76], edx

; 204  :         v_cycle(10, j); v_cycle(11, j);

  00660	85 c9		 test	 ecx, ecx
  00662	74 31		 je	 SHORT $LN26@sha256_com
  00664	8b 78 54	 mov	 edi, DWORD PTR [eax+84]
  00667	8b df		 mov	 ebx, edi
  00669	c1 c3 0e	 rol	 ebx, 14			; 0000000eH
  0066c	8b ef		 mov	 ebp, edi
  0066e	c1 cd 07	 ror	 ebp, 7
  00671	33 dd		 xor	 ebx, ebp
  00673	c1 ef 03	 shr	 edi, 3
  00676	33 df		 xor	 ebx, edi
  00678	8b 78 48	 mov	 edi, DWORD PTR [eax+72]
  0067b	8b ef		 mov	 ebp, edi
  0067d	c1 c5 0f	 rol	 ebp, 15			; 0000000fH
  00680	c1 c7 0d	 rol	 edi, 13			; 0000000dH
  00683	33 ef		 xor	 ebp, edi
  00685	8b 78 48	 mov	 edi, DWORD PTR [eax+72]
  00688	c1 ef 0a	 shr	 edi, 10			; 0000000aH
  0068b	33 ef		 xor	 ebp, edi
  0068d	03 dd		 add	 ebx, ebp
  0068f	03 58 34	 add	 ebx, DWORD PTR [eax+52]
  00692	01 58 50	 add	 DWORD PTR [eax+80], ebx
$LN26@sha256_com:
  00695	8b 7c 24 1c	 mov	 edi, DWORD PTR _v$[esp+60]
  00699	8b df		 mov	 ebx, edi
  0069b	8b ef		 mov	 ebp, edi
  0069d	c1 cb 0b	 ror	 ebx, 11			; 0000000bH
  006a0	c1 c5 07	 rol	 ebp, 7
  006a3	33 dd		 xor	 ebx, ebp
  006a5	c1 cf 06	 ror	 edi, 6
  006a8	33 df		 xor	 ebx, edi
  006aa	8b 7c 24 20	 mov	 edi, DWORD PTR _v$[esp+64]
  006ae	33 7c 24 24	 xor	 edi, DWORD PTR _v$[esp+68]
  006b2	23 7c 24 1c	 and	 edi, DWORD PTR _v$[esp+60]
  006b6	33 7c 24 24	 xor	 edi, DWORD PTR _v$[esp+68]
  006ba	03 df		 add	 ebx, edi
  006bc	03 1c 8d 28 00
	00 00		 add	 ebx, DWORD PTR _k256[ecx*4+40]
  006c3	8b 7c 24 28	 mov	 edi, DWORD PTR _v$[esp+72]
  006c7	03 58 50	 add	 ebx, DWORD PTR [eax+80]
  006ca	03 fb		 add	 edi, ebx
  006cc	01 7c 24 18	 add	 DWORD PTR _v$[esp+56], edi
  006d0	89 7c 24 28	 mov	 DWORD PTR _v$[esp+72], edi
  006d4	8b da		 mov	 ebx, edx
  006d6	c1 cb 0d	 ror	 ebx, 13			; 0000000dH
  006d9	8b fa		 mov	 edi, edx
  006db	c1 c7 0a	 rol	 edi, 10			; 0000000aH
  006de	33 df		 xor	 ebx, edi
  006e0	8b fa		 mov	 edi, edx
  006e2	c1 cf 02	 ror	 edi, 2
  006e5	33 df		 xor	 ebx, edi
  006e7	8b 7c 24 30	 mov	 edi, DWORD PTR _v$[esp+80]
  006eb	8b ef		 mov	 ebp, edi
  006ed	33 ea		 xor	 ebp, edx
  006ef	23 ee		 and	 ebp, esi
  006f1	23 fa		 and	 edi, edx
  006f3	0b ef		 or	 ebp, edi
  006f5	03 6c 24 28	 add	 ebp, DWORD PTR _v$[esp+72]
  006f9	03 eb		 add	 ebp, ebx
  006fb	89 6c 24 28	 mov	 DWORD PTR _v$[esp+72], ebp
  006ff	85 c9		 test	 ecx, ecx
  00701	74 31		 je	 SHORT $LN28@sha256_com
  00703	8b 78 4c	 mov	 edi, DWORD PTR [eax+76]
  00706	8b df		 mov	 ebx, edi
  00708	c1 c3 0f	 rol	 ebx, 15			; 0000000fH
  0070b	8b ef		 mov	 ebp, edi
  0070d	c1 c5 0d	 rol	 ebp, 13			; 0000000dH
  00710	33 dd		 xor	 ebx, ebp
  00712	c1 ef 0a	 shr	 edi, 10			; 0000000aH
  00715	33 df		 xor	 ebx, edi
  00717	8b 78 58	 mov	 edi, DWORD PTR [eax+88]
  0071a	8b ef		 mov	 ebp, edi
  0071c	c1 c5 0e	 rol	 ebp, 14			; 0000000eH
  0071f	c1 cf 07	 ror	 edi, 7
  00722	33 ef		 xor	 ebp, edi
  00724	8b 78 58	 mov	 edi, DWORD PTR [eax+88]
  00727	c1 ef 03	 shr	 edi, 3
  0072a	33 ef		 xor	 ebp, edi
  0072c	03 dd		 add	 ebx, ebp
  0072e	03 58 38	 add	 ebx, DWORD PTR [eax+56]
  00731	01 58 54	 add	 DWORD PTR [eax+84], ebx
$LN28@sha256_com:
  00734	8b 7c 24 18	 mov	 edi, DWORD PTR _v$[esp+56]
  00738	8b df		 mov	 ebx, edi
  0073a	c1 cb 0b	 ror	 ebx, 11			; 0000000bH
  0073d	8b ef		 mov	 ebp, edi
  0073f	c1 c5 07	 rol	 ebp, 7
  00742	33 dd		 xor	 ebx, ebp
  00744	c1 cf 06	 ror	 edi, 6
  00747	33 df		 xor	 ebx, edi
  00749	8b 7c 24 1c	 mov	 edi, DWORD PTR _v$[esp+60]
  0074d	33 7c 24 20	 xor	 edi, DWORD PTR _v$[esp+64]
  00751	23 7c 24 18	 and	 edi, DWORD PTR _v$[esp+56]
  00755	33 7c 24 20	 xor	 edi, DWORD PTR _v$[esp+64]
  00759	03 df		 add	 ebx, edi
  0075b	03 1c 8d 2c 00
	00 00		 add	 ebx, DWORD PTR _k256[ecx*4+44]
  00762	8b 7c 24 24	 mov	 edi, DWORD PTR _v$[esp+68]
  00766	03 58 54	 add	 ebx, DWORD PTR [eax+84]
  00769	03 fb		 add	 edi, ebx
  0076b	03 f7		 add	 esi, edi
  0076d	89 7c 24 24	 mov	 DWORD PTR _v$[esp+68], edi
  00771	8b 7c 24 28	 mov	 edi, DWORD PTR _v$[esp+72]
  00775	8b df		 mov	 ebx, edi
  00777	c1 cb 0d	 ror	 ebx, 13			; 0000000dH
  0077a	8b ef		 mov	 ebp, edi
  0077c	c1 c5 0a	 rol	 ebp, 10			; 0000000aH
  0077f	33 dd		 xor	 ebx, ebp
  00781	8b ef		 mov	 ebp, edi
  00783	c1 cd 02	 ror	 ebp, 2
  00786	33 dd		 xor	 ebx, ebp
  00788	8b ef		 mov	 ebp, edi
  0078a	33 ea		 xor	 ebp, edx
  0078c	23 6c 24 30	 and	 ebp, DWORD PTR _v$[esp+80]
  00790	23 fa		 and	 edi, edx
  00792	0b ef		 or	 ebp, edi
  00794	03 6c 24 24	 add	 ebp, DWORD PTR _v$[esp+68]
  00798	8d 14 2b	 lea	 edx, DWORD PTR [ebx+ebp]
  0079b	89 54 24 24	 mov	 DWORD PTR _v$[esp+68], edx

; 205  :         v_cycle(12, j); v_cycle(13, j);

  0079f	85 c9		 test	 ecx, ecx
  007a1	74 31		 je	 SHORT $LN30@sha256_com
  007a3	8b 78 50	 mov	 edi, DWORD PTR [eax+80]
  007a6	8b df		 mov	 ebx, edi
  007a8	c1 c3 0f	 rol	 ebx, 15			; 0000000fH
  007ab	8b ef		 mov	 ebp, edi
  007ad	c1 c5 0d	 rol	 ebp, 13			; 0000000dH
  007b0	33 dd		 xor	 ebx, ebp
  007b2	c1 ef 0a	 shr	 edi, 10			; 0000000aH
  007b5	33 df		 xor	 ebx, edi
  007b7	8b 78 5c	 mov	 edi, DWORD PTR [eax+92]
  007ba	8b ef		 mov	 ebp, edi
  007bc	c1 c5 0e	 rol	 ebp, 14			; 0000000eH
  007bf	c1 cf 07	 ror	 edi, 7
  007c2	33 ef		 xor	 ebp, edi
  007c4	8b 78 5c	 mov	 edi, DWORD PTR [eax+92]
  007c7	c1 ef 03	 shr	 edi, 3
  007ca	33 ef		 xor	 ebp, edi
  007cc	03 dd		 add	 ebx, ebp
  007ce	03 58 3c	 add	 ebx, DWORD PTR [eax+60]
  007d1	01 58 58	 add	 DWORD PTR [eax+88], ebx
$LN30@sha256_com:
  007d4	8b de		 mov	 ebx, esi
  007d6	c1 cb 0b	 ror	 ebx, 11			; 0000000bH
  007d9	8b fe		 mov	 edi, esi
  007db	c1 c7 07	 rol	 edi, 7
  007de	33 df		 xor	 ebx, edi
  007e0	8b fe		 mov	 edi, esi
  007e2	c1 cf 06	 ror	 edi, 6
  007e5	33 df		 xor	 ebx, edi
  007e7	8b 7c 24 1c	 mov	 edi, DWORD PTR _v$[esp+60]
  007eb	8b ef		 mov	 ebp, edi
  007ed	33 6c 24 18	 xor	 ebp, DWORD PTR _v$[esp+56]
  007f1	23 ee		 and	 ebp, esi
  007f3	33 ef		 xor	 ebp, edi
  007f5	8b 7c 24 20	 mov	 edi, DWORD PTR _v$[esp+64]
  007f9	03 dd		 add	 ebx, ebp
  007fb	03 1c 8d 30 00
	00 00		 add	 ebx, DWORD PTR _k256[ecx*4+48]
  00802	8b 6c 24 28	 mov	 ebp, DWORD PTR _v$[esp+72]
  00806	03 58 58	 add	 ebx, DWORD PTR [eax+88]
  00809	23 ea		 and	 ebp, edx
  0080b	03 fb		 add	 edi, ebx
  0080d	01 7c 24 30	 add	 DWORD PTR _v$[esp+80], edi
  00811	89 7c 24 20	 mov	 DWORD PTR _v$[esp+64], edi
  00815	8b fa		 mov	 edi, edx
  00817	c1 cf 0d	 ror	 edi, 13			; 0000000dH
  0081a	8b da		 mov	 ebx, edx
  0081c	c1 c3 0a	 rol	 ebx, 10			; 0000000aH
  0081f	33 fb		 xor	 edi, ebx
  00821	8b da		 mov	 ebx, edx
  00823	c1 cb 02	 ror	 ebx, 2
  00826	33 fb		 xor	 edi, ebx
  00828	8b 5c 24 28	 mov	 ebx, DWORD PTR _v$[esp+72]
  0082c	33 da		 xor	 ebx, edx
  0082e	23 5c 24 2c	 and	 ebx, DWORD PTR _v$[esp+76]
  00832	0b dd		 or	 ebx, ebp
  00834	03 5c 24 20	 add	 ebx, DWORD PTR _v$[esp+64]
  00838	03 df		 add	 ebx, edi
  0083a	89 5c 24 20	 mov	 DWORD PTR _v$[esp+64], ebx
  0083e	85 c9		 test	 ecx, ecx
  00840	74 31		 je	 SHORT $LN32@sha256_com
  00842	8b 78 54	 mov	 edi, DWORD PTR [eax+84]
  00845	8b df		 mov	 ebx, edi
  00847	c1 c3 0f	 rol	 ebx, 15			; 0000000fH
  0084a	8b ef		 mov	 ebp, edi
  0084c	c1 c5 0d	 rol	 ebp, 13			; 0000000dH
  0084f	33 dd		 xor	 ebx, ebp
  00851	c1 ef 0a	 shr	 edi, 10			; 0000000aH
  00854	33 df		 xor	 ebx, edi
  00856	8b 78 60	 mov	 edi, DWORD PTR [eax+96]
  00859	8b ef		 mov	 ebp, edi
  0085b	c1 c5 0e	 rol	 ebp, 14			; 0000000eH
  0085e	c1 cf 07	 ror	 edi, 7
  00861	33 ef		 xor	 ebp, edi
  00863	8b 78 60	 mov	 edi, DWORD PTR [eax+96]
  00866	c1 ef 03	 shr	 edi, 3
  00869	33 ef		 xor	 ebp, edi
  0086b	03 dd		 add	 ebx, ebp
  0086d	03 58 40	 add	 ebx, DWORD PTR [eax+64]
  00870	01 58 5c	 add	 DWORD PTR [eax+92], ebx
$LN32@sha256_com:
  00873	8b 7c 24 30	 mov	 edi, DWORD PTR _v$[esp+80]
  00877	8b df		 mov	 ebx, edi
  00879	c1 cb 0b	 ror	 ebx, 11			; 0000000bH
  0087c	8b ef		 mov	 ebp, edi
  0087e	c1 c5 07	 rol	 ebp, 7
  00881	33 dd		 xor	 ebx, ebp
  00883	8b ef		 mov	 ebp, edi
  00885	c1 cd 06	 ror	 ebp, 6
  00888	33 dd		 xor	 ebx, ebp
  0088a	8b 6c 24 18	 mov	 ebp, DWORD PTR _v$[esp+56]
  0088e	33 ee		 xor	 ebp, esi
  00890	23 ef		 and	 ebp, edi
  00892	33 6c 24 18	 xor	 ebp, DWORD PTR _v$[esp+56]
  00896	8b 7c 24 1c	 mov	 edi, DWORD PTR _v$[esp+60]
  0089a	03 dd		 add	 ebx, ebp
  0089c	03 1c 8d 34 00
	00 00		 add	 ebx, DWORD PTR _k256[ecx*4+52]
  008a3	03 58 5c	 add	 ebx, DWORD PTR [eax+92]
  008a6	03 fb		 add	 edi, ebx
  008a8	01 7c 24 2c	 add	 DWORD PTR _v$[esp+76], edi
  008ac	89 7c 24 1c	 mov	 DWORD PTR _v$[esp+60], edi
  008b0	8b 7c 24 20	 mov	 edi, DWORD PTR _v$[esp+64]
  008b4	8b df		 mov	 ebx, edi
  008b6	c1 cb 0d	 ror	 ebx, 13			; 0000000dH
  008b9	8b ef		 mov	 ebp, edi
  008bb	c1 c5 0a	 rol	 ebp, 10			; 0000000aH
  008be	33 dd		 xor	 ebx, ebp
  008c0	8b ef		 mov	 ebp, edi
  008c2	c1 cd 02	 ror	 ebp, 2
  008c5	33 dd		 xor	 ebx, ebp
  008c7	8b ef		 mov	 ebp, edi
  008c9	33 ea		 xor	 ebp, edx
  008cb	23 6c 24 28	 and	 ebp, DWORD PTR _v$[esp+72]
  008cf	23 fa		 and	 edi, edx
  008d1	0b ef		 or	 ebp, edi
  008d3	03 6c 24 1c	 add	 ebp, DWORD PTR _v$[esp+60]
  008d7	03 eb		 add	 ebp, ebx
  008d9	89 6c 24 1c	 mov	 DWORD PTR _v$[esp+60], ebp

; 206  :         v_cycle(14, j); v_cycle(15, j);

  008dd	85 c9		 test	 ecx, ecx
  008df	74 31		 je	 SHORT $LN34@sha256_com
  008e1	8b 78 64	 mov	 edi, DWORD PTR [eax+100]
  008e4	8b df		 mov	 ebx, edi
  008e6	c1 c3 0e	 rol	 ebx, 14			; 0000000eH
  008e9	8b ef		 mov	 ebp, edi
  008eb	c1 cd 07	 ror	 ebp, 7
  008ee	33 dd		 xor	 ebx, ebp
  008f0	c1 ef 03	 shr	 edi, 3
  008f3	33 df		 xor	 ebx, edi
  008f5	8b 78 58	 mov	 edi, DWORD PTR [eax+88]
  008f8	8b ef		 mov	 ebp, edi
  008fa	c1 c5 0f	 rol	 ebp, 15			; 0000000fH
  008fd	c1 c7 0d	 rol	 edi, 13			; 0000000dH
  00900	33 ef		 xor	 ebp, edi
  00902	8b 78 58	 mov	 edi, DWORD PTR [eax+88]
  00905	c1 ef 0a	 shr	 edi, 10			; 0000000aH
  00908	33 ef		 xor	 ebp, edi
  0090a	03 dd		 add	 ebx, ebp
  0090c	03 58 44	 add	 ebx, DWORD PTR [eax+68]
  0090f	01 58 60	 add	 DWORD PTR [eax+96], ebx
$LN34@sha256_com:
  00912	8b 7c 24 2c	 mov	 edi, DWORD PTR _v$[esp+76]
  00916	8b df		 mov	 ebx, edi
  00918	c1 cb 0b	 ror	 ebx, 11			; 0000000bH
  0091b	8b ef		 mov	 ebp, edi
  0091d	c1 c5 07	 rol	 ebp, 7
  00920	33 dd		 xor	 ebx, ebp
  00922	8b ef		 mov	 ebp, edi
  00924	c1 cd 06	 ror	 ebp, 6
  00927	33 dd		 xor	 ebx, ebp
  00929	8b ee		 mov	 ebp, esi
  0092b	33 6c 24 30	 xor	 ebp, DWORD PTR _v$[esp+80]
  0092f	23 ef		 and	 ebp, edi
  00931	8b 7c 24 18	 mov	 edi, DWORD PTR _v$[esp+56]
  00935	33 ee		 xor	 ebp, esi
  00937	03 dd		 add	 ebx, ebp
  00939	03 1c 8d 38 00
	00 00		 add	 ebx, DWORD PTR _k256[ecx*4+56]
  00940	03 58 60	 add	 ebx, DWORD PTR [eax+96]
  00943	03 fb		 add	 edi, ebx
  00945	01 7c 24 28	 add	 DWORD PTR _v$[esp+72], edi
  00949	89 7c 24 18	 mov	 DWORD PTR _v$[esp+56], edi
  0094d	8b 7c 24 1c	 mov	 edi, DWORD PTR _v$[esp+60]
  00951	8b df		 mov	 ebx, edi
  00953	c1 cb 0d	 ror	 ebx, 13			; 0000000dH
  00956	8b ef		 mov	 ebp, edi
  00958	c1 c5 0a	 rol	 ebp, 10			; 0000000aH
  0095b	33 dd		 xor	 ebx, ebp
  0095d	8b ef		 mov	 ebp, edi
  0095f	c1 cd 02	 ror	 ebp, 2
  00962	33 dd		 xor	 ebx, ebp
  00964	8b ef		 mov	 ebp, edi
  00966	8b 7c 24 20	 mov	 edi, DWORD PTR _v$[esp+64]
  0096a	33 ef		 xor	 ebp, edi
  0096c	23 ea		 and	 ebp, edx
  0096e	8b 54 24 1c	 mov	 edx, DWORD PTR _v$[esp+60]
  00972	23 d7		 and	 edx, edi
  00974	0b ea		 or	 ebp, edx
  00976	03 6c 24 18	 add	 ebp, DWORD PTR _v$[esp+56]
  0097a	8d 14 2b	 lea	 edx, DWORD PTR [ebx+ebp]
  0097d	85 c9		 test	 ecx, ecx
  0097f	74 31		 je	 SHORT $LN36@sha256_com
  00981	8b 78 5c	 mov	 edi, DWORD PTR [eax+92]
  00984	8b df		 mov	 ebx, edi
  00986	c1 c3 0f	 rol	 ebx, 15			; 0000000fH
  00989	8b ef		 mov	 ebp, edi
  0098b	c1 c5 0d	 rol	 ebp, 13			; 0000000dH
  0098e	33 dd		 xor	 ebx, ebp
  00990	c1 ef 0a	 shr	 edi, 10			; 0000000aH
  00993	33 df		 xor	 ebx, edi
  00995	8b 78 28	 mov	 edi, DWORD PTR [eax+40]
  00998	8b ef		 mov	 ebp, edi
  0099a	c1 c5 0e	 rol	 ebp, 14			; 0000000eH
  0099d	c1 cf 07	 ror	 edi, 7
  009a0	33 ef		 xor	 ebp, edi
  009a2	8b 78 28	 mov	 edi, DWORD PTR [eax+40]
  009a5	c1 ef 03	 shr	 edi, 3
  009a8	33 ef		 xor	 ebp, edi
  009aa	03 dd		 add	 ebx, ebp
  009ac	03 58 48	 add	 ebx, DWORD PTR [eax+72]
  009af	01 58 64	 add	 DWORD PTR [eax+100], ebx
$LN36@sha256_com:
  009b2	8b 7c 24 28	 mov	 edi, DWORD PTR _v$[esp+72]
  009b6	8b df		 mov	 ebx, edi
  009b8	c1 cb 0b	 ror	 ebx, 11			; 0000000bH
  009bb	8b ef		 mov	 ebp, edi
  009bd	c1 c5 07	 rol	 ebp, 7
  009c0	33 dd		 xor	 ebx, ebp
  009c2	c1 cf 06	 ror	 edi, 6
  009c5	33 df		 xor	 ebx, edi
  009c7	8b 7c 24 30	 mov	 edi, DWORD PTR _v$[esp+80]
  009cb	33 7c 24 2c	 xor	 edi, DWORD PTR _v$[esp+76]
  009cf	8b 6c 24 1c	 mov	 ebp, DWORD PTR _v$[esp+60]
  009d3	23 7c 24 28	 and	 edi, DWORD PTR _v$[esp+72]
  009d7	23 ea		 and	 ebp, edx
  009d9	33 7c 24 30	 xor	 edi, DWORD PTR _v$[esp+80]
  009dd	83 c1 10	 add	 ecx, 16			; 00000010H
  009e0	03 df		 add	 ebx, edi
  009e2	03 1c 8d fc ff
	ff ff		 add	 ebx, DWORD PTR _k256[ecx*4-4]
  009e9	8b fa		 mov	 edi, edx
  009eb	03 58 64	 add	 ebx, DWORD PTR [eax+100]
  009ee	03 f3		 add	 esi, ebx
  009f0	01 74 24 24	 add	 DWORD PTR _v$[esp+68], esi
  009f4	c1 cf 0d	 ror	 edi, 13			; 0000000dH
  009f7	8b da		 mov	 ebx, edx
  009f9	c1 c3 0a	 rol	 ebx, 10			; 0000000aH
  009fc	33 fb		 xor	 edi, ebx
  009fe	8b da		 mov	 ebx, edx
  00a00	c1 cb 02	 ror	 ebx, 2
  00a03	33 fb		 xor	 edi, ebx
  00a05	8b 5c 24 1c	 mov	 ebx, DWORD PTR _v$[esp+60]
  00a09	33 da		 xor	 ebx, edx
  00a0b	23 5c 24 20	 and	 ebx, DWORD PTR _v$[esp+64]
  00a0f	0b dd		 or	 ebx, ebp
  00a11	03 de		 add	 ebx, esi
  00a13	8d 34 3b	 lea	 esi, DWORD PTR [ebx+edi]
  00a16	89 74 24 14	 mov	 DWORD PTR _v$[esp+52], esi
  00a1a	83 f9 40	 cmp	 ecx, 64			; 00000040H
  00a1d	0f 82 00 f6 ff
	ff		 jb	 $LL40@sha256_com

; 207  :     }
; 208  : 
; 209  :     ctx->hash[0] += v[0]; ctx->hash[1] += v[1];

  00a23	01 50 0c	 add	 DWORD PTR [eax+12], edx

; 210  :     ctx->hash[2] += v[2]; ctx->hash[3] += v[3];

  00a26	8b 4c 24 1c	 mov	 ecx, DWORD PTR _v$[esp+60]
  00a2a	01 48 10	 add	 DWORD PTR [eax+16], ecx
  00a2d	8b 54 24 20	 mov	 edx, DWORD PTR _v$[esp+64]
  00a31	01 50 14	 add	 DWORD PTR [eax+20], edx

; 211  :     ctx->hash[4] += v[4]; ctx->hash[5] += v[5];

  00a34	8b 4c 24 24	 mov	 ecx, DWORD PTR _v$[esp+68]
  00a38	01 70 08	 add	 DWORD PTR [eax+8], esi
  00a3b	8b 54 24 28	 mov	 edx, DWORD PTR _v$[esp+72]
  00a3f	01 48 18	 add	 DWORD PTR [eax+24], ecx
  00a42	01 50 1c	 add	 DWORD PTR [eax+28], edx

; 212  :     ctx->hash[6] += v[6]; ctx->hash[7] += v[7];

  00a45	8b 4c 24 2c	 mov	 ecx, DWORD PTR _v$[esp+76]
  00a49	8b 54 24 30	 mov	 edx, DWORD PTR _v$[esp+80]
  00a4d	01 48 20	 add	 DWORD PTR [eax+32], ecx
  00a50	01 50 24	 add	 DWORD PTR [eax+36], edx
  00a53	5f		 pop	 edi
  00a54	5e		 pop	 esi
  00a55	5d		 pop	 ebp
  00a56	5b		 pop	 ebx

; 213  : 
; 214  : #else
; 215  : 
; 216  :     uint_32t *p = ctx->wbuf,v0,v1,v2,v3,v4,v5,v6,v7;
; 217  : 
; 218  :     v0 = ctx->hash[0]; v1 = ctx->hash[1];
; 219  :     v2 = ctx->hash[2]; v3 = ctx->hash[3];
; 220  :     v4 = ctx->hash[4]; v5 = ctx->hash[5];
; 221  :     v6 = ctx->hash[6]; v7 = ctx->hash[7];
; 222  : 
; 223  :     one_cycle(0,1,2,3,4,5,6,7,k256[ 0],p[ 0]);
; 224  :     one_cycle(7,0,1,2,3,4,5,6,k256[ 1],p[ 1]);
; 225  :     one_cycle(6,7,0,1,2,3,4,5,k256[ 2],p[ 2]);
; 226  :     one_cycle(5,6,7,0,1,2,3,4,k256[ 3],p[ 3]);
; 227  :     one_cycle(4,5,6,7,0,1,2,3,k256[ 4],p[ 4]);
; 228  :     one_cycle(3,4,5,6,7,0,1,2,k256[ 5],p[ 5]);
; 229  :     one_cycle(2,3,4,5,6,7,0,1,k256[ 6],p[ 6]);
; 230  :     one_cycle(1,2,3,4,5,6,7,0,k256[ 7],p[ 7]);
; 231  :     one_cycle(0,1,2,3,4,5,6,7,k256[ 8],p[ 8]);
; 232  :     one_cycle(7,0,1,2,3,4,5,6,k256[ 9],p[ 9]);
; 233  :     one_cycle(6,7,0,1,2,3,4,5,k256[10],p[10]);
; 234  :     one_cycle(5,6,7,0,1,2,3,4,k256[11],p[11]);
; 235  :     one_cycle(4,5,6,7,0,1,2,3,k256[12],p[12]);
; 236  :     one_cycle(3,4,5,6,7,0,1,2,k256[13],p[13]);
; 237  :     one_cycle(2,3,4,5,6,7,0,1,k256[14],p[14]);
; 238  :     one_cycle(1,2,3,4,5,6,7,0,k256[15],p[15]);
; 239  : 
; 240  :     one_cycle(0,1,2,3,4,5,6,7,k256[16],hf( 0));
; 241  :     one_cycle(7,0,1,2,3,4,5,6,k256[17],hf( 1));
; 242  :     one_cycle(6,7,0,1,2,3,4,5,k256[18],hf( 2));
; 243  :     one_cycle(5,6,7,0,1,2,3,4,k256[19],hf( 3));
; 244  :     one_cycle(4,5,6,7,0,1,2,3,k256[20],hf( 4));
; 245  :     one_cycle(3,4,5,6,7,0,1,2,k256[21],hf( 5));
; 246  :     one_cycle(2,3,4,5,6,7,0,1,k256[22],hf( 6));
; 247  :     one_cycle(1,2,3,4,5,6,7,0,k256[23],hf( 7));
; 248  :     one_cycle(0,1,2,3,4,5,6,7,k256[24],hf( 8));
; 249  :     one_cycle(7,0,1,2,3,4,5,6,k256[25],hf( 9));
; 250  :     one_cycle(6,7,0,1,2,3,4,5,k256[26],hf(10));
; 251  :     one_cycle(5,6,7,0,1,2,3,4,k256[27],hf(11));
; 252  :     one_cycle(4,5,6,7,0,1,2,3,k256[28],hf(12));
; 253  :     one_cycle(3,4,5,6,7,0,1,2,k256[29],hf(13));
; 254  :     one_cycle(2,3,4,5,6,7,0,1,k256[30],hf(14));
; 255  :     one_cycle(1,2,3,4,5,6,7,0,k256[31],hf(15));
; 256  : 
; 257  :     one_cycle(0,1,2,3,4,5,6,7,k256[32],hf( 0));
; 258  :     one_cycle(7,0,1,2,3,4,5,6,k256[33],hf( 1));
; 259  :     one_cycle(6,7,0,1,2,3,4,5,k256[34],hf( 2));
; 260  :     one_cycle(5,6,7,0,1,2,3,4,k256[35],hf( 3));
; 261  :     one_cycle(4,5,6,7,0,1,2,3,k256[36],hf( 4));
; 262  :     one_cycle(3,4,5,6,7,0,1,2,k256[37],hf( 5));
; 263  :     one_cycle(2,3,4,5,6,7,0,1,k256[38],hf( 6));
; 264  :     one_cycle(1,2,3,4,5,6,7,0,k256[39],hf( 7));
; 265  :     one_cycle(0,1,2,3,4,5,6,7,k256[40],hf( 8));
; 266  :     one_cycle(7,0,1,2,3,4,5,6,k256[41],hf( 9));
; 267  :     one_cycle(6,7,0,1,2,3,4,5,k256[42],hf(10));
; 268  :     one_cycle(5,6,7,0,1,2,3,4,k256[43],hf(11));
; 269  :     one_cycle(4,5,6,7,0,1,2,3,k256[44],hf(12));
; 270  :     one_cycle(3,4,5,6,7,0,1,2,k256[45],hf(13));
; 271  :     one_cycle(2,3,4,5,6,7,0,1,k256[46],hf(14));
; 272  :     one_cycle(1,2,3,4,5,6,7,0,k256[47],hf(15));
; 273  : 
; 274  :     one_cycle(0,1,2,3,4,5,6,7,k256[48],hf( 0));
; 275  :     one_cycle(7,0,1,2,3,4,5,6,k256[49],hf( 1));
; 276  :     one_cycle(6,7,0,1,2,3,4,5,k256[50],hf( 2));
; 277  :     one_cycle(5,6,7,0,1,2,3,4,k256[51],hf( 3));
; 278  :     one_cycle(4,5,6,7,0,1,2,3,k256[52],hf( 4));
; 279  :     one_cycle(3,4,5,6,7,0,1,2,k256[53],hf( 5));
; 280  :     one_cycle(2,3,4,5,6,7,0,1,k256[54],hf( 6));
; 281  :     one_cycle(1,2,3,4,5,6,7,0,k256[55],hf( 7));
; 282  :     one_cycle(0,1,2,3,4,5,6,7,k256[56],hf( 8));
; 283  :     one_cycle(7,0,1,2,3,4,5,6,k256[57],hf( 9));
; 284  :     one_cycle(6,7,0,1,2,3,4,5,k256[58],hf(10));
; 285  :     one_cycle(5,6,7,0,1,2,3,4,k256[59],hf(11));
; 286  :     one_cycle(4,5,6,7,0,1,2,3,k256[60],hf(12));
; 287  :     one_cycle(3,4,5,6,7,0,1,2,k256[61],hf(13));
; 288  :     one_cycle(2,3,4,5,6,7,0,1,k256[62],hf(14));
; 289  :     one_cycle(1,2,3,4,5,6,7,0,k256[63],hf(15));
; 290  : 
; 291  :     ctx->hash[0] += v0; ctx->hash[1] += v1;
; 292  :     ctx->hash[2] += v2; ctx->hash[3] += v3;
; 293  :     ctx->hash[4] += v4; ctx->hash[5] += v5;
; 294  :     ctx->hash[6] += v6; ctx->hash[7] += v7;
; 295  : #endif
; 296  : }

  00a57	83 c4 24	 add	 esp, 36			; 00000024H
  00a5a	c3		 ret	 0
_sha256_compile ENDP
_TEXT	ENDS
PUBLIC	_sha256_hash
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtpy
;	COMDAT _sha256_hash
_TEXT	SEGMENT
_data$ = 8						; size = 4
_len$ = 12						; size = 4
_sp$ = 16						; size = 4
_ctx$ = 16						; size = 4
_sha256_hash PROC					; COMDAT

; 303  :              space = SHA256_BLOCK_SIZE - pos;
; 304  :     const unsigned char *sp = data;
; 305  : 
; 306  :     if((ctx->count[0] += len) < len)

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR _len$[esp-4]
  00004	53		 push	 ebx
  00005	8b 5c 24 10	 mov	 ebx, DWORD PTR _ctx$[esp]
  00009	8b 03		 mov	 eax, DWORD PTR [ebx]
  0000b	55		 push	 ebp
  0000c	8b 6c 24 0c	 mov	 ebp, DWORD PTR _data$[esp+4]
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b f8		 mov	 edi, eax
  00014	83 e7 3f	 and	 edi, 63			; 0000003fH
  00017	be 40 00 00 00	 mov	 esi, 64			; 00000040H
  0001c	03 c1		 add	 eax, ecx
  0001e	2b f7		 sub	 esi, edi
  00020	89 03		 mov	 DWORD PTR [ebx], eax
  00022	3b c1		 cmp	 eax, ecx
  00024	73 03		 jae	 SHORT $LN8@sha256_has

; 307  :         ++(ctx->count[1]);

  00026	ff 43 04	 inc	 DWORD PTR [ebx+4]
$LN8@sha256_has:

; 308  : 
; 309  :     while(len >= space)     /* tranfer whole blocks while possible  */

  00029	3b ce		 cmp	 ecx, esi
  0002b	72 64		 jb	 SHORT $LN3@sha256_has
  0002d	8d 49 00	 npad	 3
$LL4@sha256_has:

; 310  :     {
; 311  :         memcpy(((unsigned char*)ctx->wbuf) + pos, sp, space);

  00030	56		 push	 esi
  00031	8d 44 3b 28	 lea	 eax, DWORD PTR [ebx+edi+40]
  00035	55		 push	 ebp
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _memcpy

; 312  :         sp += space; len -= space; space = SHA256_BLOCK_SIZE; pos = 0;

  0003c	29 74 24 24	 sub	 DWORD PTR _len$[esp+24], esi
  00040	03 ee		 add	 ebp, esi
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	89 6c 24 1c	 mov	 DWORD PTR _sp$[esp+12], ebp
  00049	be 40 00 00 00	 mov	 esi, 64			; 00000040H
  0004e	33 ff		 xor	 edi, edi

; 313  :         bsw_32(ctx->wbuf, SHA256_BLOCK_SIZE >> 2)

  00050	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00055	8d 4b 68	 lea	 ecx, DWORD PTR [ebx+104]
$LL2@sha256_has:
  00058	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  0005b	83 e9 04	 sub	 ecx, 4
  0005e	8b e8		 mov	 ebp, eax
  00060	4a		 dec	 edx
  00061	c1 cd 08	 ror	 ebp, 8
  00064	81 e5 00 ff 00
	ff		 and	 ebp, -16711936		; ff00ff00H
  0006a	c1 c0 08	 rol	 eax, 8
  0006d	25 ff 00 ff 00	 and	 eax, 16711935		; 00ff00ffH
  00072	0b e8		 or	 ebp, eax
  00074	89 29		 mov	 DWORD PTR [ecx], ebp
  00076	85 d2		 test	 edx, edx
  00078	75 de		 jne	 SHORT $LL2@sha256_has

; 314  :         sha256_compile(ctx);

  0007a	53		 push	 ebx
  0007b	e8 00 00 00 00	 call	 _sha256_compile
  00080	8b 6c 24 20	 mov	 ebp, DWORD PTR _sp$[esp+16]
  00084	83 c4 04	 add	 esp, 4
  00087	39 74 24 18	 cmp	 DWORD PTR _len$[esp+12], esi
  0008b	73 a3		 jae	 SHORT $LL4@sha256_has

; 308  : 
; 309  :     while(len >= space)     /* tranfer whole blocks while possible  */

  0008d	8b 4c 24 18	 mov	 ecx, DWORD PTR _len$[esp+12]
$LN3@sha256_has:

; 315  :     }
; 316  : 
; 317  :     memcpy(((unsigned char*)ctx->wbuf) + pos, sp, len);

  00091	51		 push	 ecx
  00092	8d 4c 1f 28	 lea	 ecx, DWORD PTR [edi+ebx+40]
  00096	55		 push	 ebp
  00097	51		 push	 ecx
  00098	e8 00 00 00 00	 call	 _memcpy
  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5d		 pop	 ebp
  000a3	5b		 pop	 ebx

; 318  : }

  000a4	c3		 ret	 0
_sha256_hash ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sha_end1
_TEXT	SEGMENT
_hval$ = 8						; size = 4
_hlen$ = 12						; size = 4
_sha_end1 PROC						; COMDAT
; _ctx$ = esi

; 323  : {   uint_32t    i = (uint_32t)(ctx->count[0] & SHA256_MASK);

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	8b 6c 24 10	 mov	 ebp, DWORD PTR _hlen$[esp+4]
  00006	57		 push	 edi
  00007	8b 3e		 mov	 edi, DWORD PTR [esi]
  00009	83 e7 3f	 and	 edi, 63			; 0000003fH

; 324  : 
; 325  :     /* put bytes in the buffer in an order in which references to   */
; 326  :     /* 32-bit words will put bytes with lower addresses into the    */
; 327  :     /* top of 32 bit words on BOTH big and little endian machines   */
; 328  :     bsw_32(ctx->wbuf, (i + 3) >> 2)

  0000c	8d 4f 03	 lea	 ecx, DWORD PTR [edi+3]
  0000f	c1 e9 02	 shr	 ecx, 2
  00012	85 c9		 test	 ecx, ecx
  00014	74 2c		 je	 SHORT $LN16@sha_end1

; 323  : {   uint_32t    i = (uint_32t)(ctx->count[0] & SHA256_MASK);

  00016	8d 54 8e 28	 lea	 edx, DWORD PTR [esi+ecx*4+40]
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL10@sha_end1:

; 324  : 
; 325  :     /* put bytes in the buffer in an order in which references to   */
; 326  :     /* 32-bit words will put bytes with lower addresses into the    */
; 327  :     /* top of 32 bit words on BOTH big and little endian machines   */
; 328  :     bsw_32(ctx->wbuf, (i + 3) >> 2)

  00020	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  00023	83 ea 04	 sub	 edx, 4
  00026	8b d8		 mov	 ebx, eax
  00028	49		 dec	 ecx
  00029	c1 cb 08	 ror	 ebx, 8
  0002c	81 e3 00 ff 00
	ff		 and	 ebx, -16711936		; ff00ff00H
  00032	c1 c0 08	 rol	 eax, 8
  00035	25 ff 00 ff 00	 and	 eax, 16711935		; 00ff00ffH
  0003a	0b d8		 or	 ebx, eax
  0003c	89 1a		 mov	 DWORD PTR [edx], ebx
  0003e	85 c9		 test	 ecx, ecx
  00040	75 de		 jne	 SHORT $LL10@sha_end1
$LN16@sha_end1:

; 329  : 
; 330  :     /* we now need to mask valid bytes and add the padding which is */
; 331  :     /* a single 1 bit and as many zero bits as necessary. Note that */
; 332  :     /* we can always add the first padding byte here because the    */
; 333  :     /* buffer always has at least one empty slot                    */
; 334  :     ctx->wbuf[i >> 2] &= 0xffffff80 << 8 * (~i & 3);

  00042	8b cf		 mov	 ecx, edi
  00044	f7 d1		 not	 ecx
  00046	83 e1 03	 and	 ecx, 3
  00049	03 c9		 add	 ecx, ecx
  0004b	03 c9		 add	 ecx, ecx
  0004d	03 c9		 add	 ecx, ecx
  0004f	ba 80 ff ff ff	 mov	 edx, -128		; ffffff80H
  00054	d3 e2		 shl	 edx, cl
  00056	8b c7		 mov	 eax, edi
  00058	c1 e8 02	 shr	 eax, 2

; 335  :     ctx->wbuf[i >> 2] |= 0x00000080 << 8 * (~i & 3);

  0005b	bb 80 00 00 00	 mov	 ebx, 128		; 00000080H
  00060	23 54 86 28	 and	 edx, DWORD PTR [esi+eax*4+40]
  00064	d3 e3		 shl	 ebx, cl
  00066	0b d3		 or	 edx, ebx
  00068	89 54 86 28	 mov	 DWORD PTR [esi+eax*4+40], edx

; 336  : 
; 337  :     /* we need 9 or more empty positions, one for the padding byte  */
; 338  :     /* (above) and eight for the length count.  If there is not     */
; 339  :     /* enough space pad and empty the buffer                        */
; 340  :     if(i > SHA256_BLOCK_SIZE - 9)

  0006c	83 ff 37	 cmp	 edi, 55			; 00000037H
  0006f	76 19		 jbe	 SHORT $LN8@sha_end1

; 341  :     {
; 342  :         if(i < 60) ctx->wbuf[15] = 0;

  00071	83 ff 3c	 cmp	 edi, 60			; 0000003cH
  00074	73 07		 jae	 SHORT $LN24@sha_end1
  00076	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0
$LN24@sha_end1:

; 343  :         sha256_compile(ctx);

  0007d	56		 push	 esi
  0007e	e8 00 00 00 00	 call	 _sha256_compile
  00083	83 c4 04	 add	 esp, 4

; 344  :         i = 0;

  00086	33 c0		 xor	 eax, eax

; 345  :     }
; 346  :     else    /* compute a word index for the empty buffer positions  */

  00088	eb 06		 jmp	 SHORT $LN21@sha_end1
$LN8@sha_end1:

; 347  :         i = (i >> 2) + 1;

  0008a	40		 inc	 eax

; 348  : 
; 349  :     while(i < 14) /* and zero pad all but last two positions        */

  0008b	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  0008e	73 0f		 jae	 SHORT $LN5@sha_end1
$LN21@sha_end1:

; 350  :         ctx->wbuf[i++] = 0;

  00090	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00095	8d 7c 86 28	 lea	 edi, DWORD PTR [esi+eax*4+40]
  00099	2b c8		 sub	 ecx, eax
  0009b	33 c0		 xor	 eax, eax
  0009d	f3 ab		 rep stosd
$LN5@sha_end1:

; 351  : 
; 352  :     /* the following 32-bit length fields are assembled in the      */
; 353  :     /* wrong byte order on little endian machines but this is       */
; 354  :     /* corrected later since they are only ever used as 32-bit      */
; 355  :     /* word values.                                                 */
; 356  :     ctx->wbuf[14] = (ctx->count[1] << 3) | (ctx->count[0] >> 29);

  0009f	8b 06		 mov	 eax, DWORD PTR [esi]
  000a1	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000a4	03 c9		 add	 ecx, ecx
  000a6	8b d0		 mov	 edx, eax
  000a8	03 c9		 add	 ecx, ecx

; 357  :     ctx->wbuf[15] = ctx->count[0] << 3;

  000aa	03 c0		 add	 eax, eax
  000ac	03 c9		 add	 ecx, ecx
  000ae	c1 ea 1d	 shr	 edx, 29			; 0000001dH
  000b1	03 c0		 add	 eax, eax
  000b3	0b ca		 or	 ecx, edx
  000b5	03 c0		 add	 eax, eax

; 358  :     sha256_compile(ctx);

  000b7	56		 push	 esi
  000b8	89 4e 60	 mov	 DWORD PTR [esi+96], ecx
  000bb	89 46 64	 mov	 DWORD PTR [esi+100], eax
  000be	e8 00 00 00 00	 call	 _sha256_compile
  000c3	83 c4 04	 add	 esp, 4

; 359  : 
; 360  :     /* extract the hash value as bytes in case the hash buffer is   */
; 361  :     /* mislaigned for 32-bit words                                  */
; 362  :     for(i = 0; i < hlen; ++i)

  000c6	33 c0		 xor	 eax, eax
  000c8	85 ed		 test	 ebp, ebp
  000ca	76 25		 jbe	 SHORT $LN1@sha_end1
  000cc	8b 7c 24 10	 mov	 edi, DWORD PTR _hval$[esp+8]
$LL3@sha_end1:

; 363  :         hval[i] = (unsigned char)(ctx->hash[i >> 2] >> (8 * (~i & 3)));

  000d0	8b c8		 mov	 ecx, eax
  000d2	f7 d1		 not	 ecx
  000d4	83 e1 03	 and	 ecx, 3
  000d7	03 c9		 add	 ecx, ecx
  000d9	8b d0		 mov	 edx, eax
  000db	c1 ea 02	 shr	 edx, 2
  000de	8b 54 96 08	 mov	 edx, DWORD PTR [esi+edx*4+8]
  000e2	03 c9		 add	 ecx, ecx
  000e4	03 c9		 add	 ecx, ecx
  000e6	d3 ea		 shr	 edx, cl
  000e8	40		 inc	 eax
  000e9	88 54 38 ff	 mov	 BYTE PTR [eax+edi-1], dl
  000ed	3b c5		 cmp	 eax, ebp
  000ef	72 df		 jb	 SHORT $LL3@sha_end1
$LN1@sha_end1:
  000f1	5f		 pop	 edi
  000f2	5d		 pop	 ebp
  000f3	5b		 pop	 ebx

; 364  : }

  000f4	c3		 ret	 0
_sha_end1 ENDP
_TEXT	ENDS
PUBLIC	_sha224_begin
; Function compile flags: /Ogtpy
;	COMDAT _sha224_begin
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_sha224_begin PROC					; COMDAT

; 378  :     ctx->count[0] = ctx->count[1] = 0;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _ctx$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi

; 379  :     memcpy(ctx->hash, i224, 8 * sizeof(uint_32t));

  00006	8d 78 08	 lea	 edi, DWORD PTR [eax+8]
  00009	b9 08 00 00 00	 mov	 ecx, 8
  0000e	be 00 00 00 00	 mov	 esi, OFFSET _i224
  00013	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0001a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00020	f3 a5		 rep movsd
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 380  : }

  00024	c3		 ret	 0
_sha224_begin ENDP
_TEXT	ENDS
PUBLIC	_sha224_end
; Function compile flags: /Ogtpy
;	COMDAT _sha224_end
_TEXT	SEGMENT
_hval$ = 8						; size = 4
_ctx$ = 12						; size = 4
_sha224_end PROC					; COMDAT

; 384  :     sha_end1(hval, ctx, SHA224_DIGEST_SIZE);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _hval$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR _ctx$[esp]
  00009	6a 1c		 push	 28			; 0000001cH
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _sha_end1
  00011	83 c4 08	 add	 esp, 8
  00014	5e		 pop	 esi

; 385  : }

  00015	c3		 ret	 0
_sha224_end ENDP
_TEXT	ENDS
PUBLIC	_sha224
; Function compile flags: /Ogtpy
;	COMDAT _sha224
_TEXT	SEGMENT
_cx$ = -104						; size = 104
_hval$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_sha224	PROC						; COMDAT

; 388  : {   sha224_ctx  cx[1];

  00000	83 ec 68	 sub	 esp, 104		; 00000068H

; 389  : 
; 390  :     sha224_begin(cx);
; 391  :     sha224_hash(data, len, cx);

  00003	8b 54 24 70	 mov	 edx, DWORD PTR _data$[esp+100]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	33 c0		 xor	 eax, eax
  0000b	89 44 24 0c	 mov	 DWORD PTR _cx$[esp+116], eax
  0000f	89 44 24 08	 mov	 DWORD PTR _cx$[esp+112], eax
  00013	b9 08 00 00 00	 mov	 ecx, 8
  00018	be 00 00 00 00	 mov	 esi, OFFSET _i224
  0001d	8d 7c 24 10	 lea	 edi, DWORD PTR _cx$[esp+120]
  00021	8d 44 24 08	 lea	 eax, DWORD PTR _cx$[esp+112]
  00025	f3 a5		 rep movsd
  00027	8b 4c 24 7c	 mov	 ecx, DWORD PTR _len$[esp+108]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 _sha256_hash

; 392  :     sha_end1(hval, cx, SHA224_DIGEST_SIZE);

  00033	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR _hval$[esp+120]
  0003a	6a 1c		 push	 28			; 0000001cH
  0003c	50		 push	 eax
  0003d	8d 74 24 1c	 lea	 esi, DWORD PTR _cx$[esp+132]
  00041	e8 00 00 00 00	 call	 _sha_end1
  00046	83 c4 14	 add	 esp, 20			; 00000014H
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi

; 393  : }

  0004b	83 c4 68	 add	 esp, 104		; 00000068H
  0004e	c3		 ret	 0
_sha224	ENDP
_TEXT	ENDS
PUBLIC	_sha256_begin
; Function compile flags: /Ogtpy
;	COMDAT _sha256_begin
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_sha256_begin PROC					; COMDAT

; 407  :     ctx->count[0] = ctx->count[1] = 0;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _ctx$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi

; 408  :     memcpy(ctx->hash, i256, 8 * sizeof(uint_32t));

  00006	8d 78 08	 lea	 edi, DWORD PTR [eax+8]
  00009	b9 08 00 00 00	 mov	 ecx, 8
  0000e	be 00 00 00 00	 mov	 esi, OFFSET _i256
  00013	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0001a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00020	f3 a5		 rep movsd
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 409  : }

  00024	c3		 ret	 0
_sha256_begin ENDP
_TEXT	ENDS
PUBLIC	_sha256_end
; Function compile flags: /Ogtpy
;	COMDAT _sha256_end
_TEXT	SEGMENT
_hval$ = 8						; size = 4
_ctx$ = 12						; size = 4
_sha256_end PROC					; COMDAT

; 413  :     sha_end1(hval, ctx, SHA256_DIGEST_SIZE);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _hval$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR _ctx$[esp]
  00009	6a 20		 push	 32			; 00000020H
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _sha_end1
  00011	83 c4 08	 add	 esp, 8
  00014	5e		 pop	 esi

; 414  : }

  00015	c3		 ret	 0
_sha256_end ENDP
_TEXT	ENDS
PUBLIC	_sha256
; Function compile flags: /Ogtpy
;	COMDAT _sha256
_TEXT	SEGMENT
_cx$ = -104						; size = 104
_hval$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_sha256	PROC						; COMDAT

; 417  : {   sha256_ctx  cx[1];

  00000	83 ec 68	 sub	 esp, 104		; 00000068H

; 418  : 
; 419  :     sha256_begin(cx);
; 420  :     sha256_hash(data, len, cx);

  00003	8b 54 24 70	 mov	 edx, DWORD PTR _data$[esp+100]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	33 c0		 xor	 eax, eax
  0000b	89 44 24 0c	 mov	 DWORD PTR _cx$[esp+116], eax
  0000f	89 44 24 08	 mov	 DWORD PTR _cx$[esp+112], eax
  00013	b9 08 00 00 00	 mov	 ecx, 8
  00018	be 00 00 00 00	 mov	 esi, OFFSET _i256
  0001d	8d 7c 24 10	 lea	 edi, DWORD PTR _cx$[esp+120]
  00021	8d 44 24 08	 lea	 eax, DWORD PTR _cx$[esp+112]
  00025	f3 a5		 rep movsd
  00027	8b 4c 24 7c	 mov	 ecx, DWORD PTR _len$[esp+108]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 _sha256_hash

; 421  :     sha_end1(hval, cx, SHA256_DIGEST_SIZE);

  00033	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR _hval$[esp+120]
  0003a	6a 20		 push	 32			; 00000020H
  0003c	50		 push	 eax
  0003d	8d 74 24 1c	 lea	 esi, DWORD PTR _cx$[esp+132]
  00041	e8 00 00 00 00	 call	 _sha_end1
  00046	83 c4 14	 add	 esp, 20			; 00000014H
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi

; 422  : }

  0004b	83 c4 68	 add	 esp, 104		; 00000068H
  0004e	c3		 ret	 0
_sha256	ENDP
_TEXT	ENDS
PUBLIC	_sha512_compile
; Function compile flags: /Ogtpy
;	COMDAT _sha512_compile
_TEXT	SEGMENT
_j$ = -212						; size = 4
_v$ = -208						; size = 64
tv4740 = -144						; size = 4
tv4737 = -144						; size = 4
tv4734 = -144						; size = 4
tv4731 = -144						; size = 4
tv4728 = -144						; size = 4
tv4725 = -144						; size = 4
tv4722 = -144						; size = 4
tv4719 = -144						; size = 4
tv4716 = -144						; size = 4
tv4713 = -144						; size = 4
tv4710 = -144						; size = 4
tv4707 = -144						; size = 4
tv4704 = -144						; size = 4
tv4701 = -144						; size = 4
tv4698 = -144						; size = 4
tv4695 = -144						; size = 4
tv2230 = -140						; size = 8
tv2023 = -132						; size = 8
tv2051 = -124						; size = 8
tv2295 = -116						; size = 8
tv2048 = -108						; size = 8
tv2419 = -100						; size = 8
tv2479 = -92						; size = 8
tv2164 = -84						; size = 8
tv2095 = -76						; size = 8
tv2317 = -68						; size = 8
tv2252 = -60						; size = 8
tv2035 = -52						; size = 8
tv2186 = -44						; size = 8
tv2359 = -36						; size = 8
tv2120 = -28						; size = 8
tv2107 = -20						; size = 8
tv139 = -12						; size = 8
tv2017 = -4						; size = 4
_ctx$ = 8						; size = 4
_sha512_compile PROC					; COMDAT

; 512  : {   uint_64t    v[8], *p = ctx->wbuf;

  00000	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H

; 513  :     uint_32t    j;
; 514  : 
; 515  :     memcpy(v, ctx->hash, 8 * sizeof(uint_64t));
; 516  : 
; 517  :     for(j = 0; j < 80; j += 16)

  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	56		 push	 esi
  00009	57		 push	 edi

; 512  : {   uint_64t    v[8], *p = ctx->wbuf;

  0000a	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR _ctx$[esp+224]

; 513  :     uint_32t    j;
; 514  : 
; 515  :     memcpy(v, ctx->hash, 8 * sizeof(uint_64t));
; 516  : 
; 517  :     for(j = 0; j < 80; j += 16)

  00011	8b 50 54	 mov	 edx, DWORD PTR [eax+84]
  00014	89 54 24 6c	 mov	 DWORD PTR tv2051[esp+232], edx
  00018	8b 50 60	 mov	 edx, DWORD PTR [eax+96]
  0001b	89 94 24 d0 00
	00 00		 mov	 DWORD PTR tv2107[esp+228], edx
  00022	8b 50 64	 mov	 edx, DWORD PTR [eax+100]
  00025	89 94 24 d4 00
	00 00		 mov	 DWORD PTR tv2107[esp+232], edx
  0002c	8b 50 68	 mov	 edx, DWORD PTR [eax+104]
  0002f	89 94 24 90 00
	00 00		 mov	 DWORD PTR tv2164[esp+228], edx
  00036	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  00039	89 94 24 94 00
	00 00		 mov	 DWORD PTR tv2164[esp+232], edx
  00040	8b 50 70	 mov	 edx, DWORD PTR [eax+112]
  00043	89 54 24 58	 mov	 DWORD PTR tv2230[esp+228], edx
  00047	8b 50 74	 mov	 edx, DWORD PTR [eax+116]
  0004a	89 54 24 5c	 mov	 DWORD PTR tv2230[esp+232], edx
  0004e	8b 50 78	 mov	 edx, DWORD PTR [eax+120]
  00051	89 54 24 70	 mov	 DWORD PTR tv2295[esp+228], edx
  00055	8b 50 7c	 mov	 edx, DWORD PTR [eax+124]
  00058	89 54 24 74	 mov	 DWORD PTR tv2295[esp+232], edx
  0005c	8b 90 80 00 00
	00		 mov	 edx, DWORD PTR [eax+128]
  00062	89 94 24 c0 00
	00 00		 mov	 DWORD PTR tv2359[esp+228], edx
  00069	8b 90 84 00 00
	00		 mov	 edx, DWORD PTR [eax+132]
  0006f	89 94 24 c4 00
	00 00		 mov	 DWORD PTR tv2359[esp+232], edx
  00076	8b 90 88 00 00
	00		 mov	 edx, DWORD PTR [eax+136]
  0007c	89 94 24 80 00
	00 00		 mov	 DWORD PTR tv2419[esp+228], edx
  00083	8b 90 8c 00 00
	00		 mov	 edx, DWORD PTR [eax+140]
  00089	89 94 24 84 00
	00 00		 mov	 DWORD PTR tv2419[esp+232], edx
  00090	8b 90 90 00 00
	00		 mov	 edx, DWORD PTR [eax+144]
  00096	89 94 24 88 00
	00 00		 mov	 DWORD PTR tv2479[esp+228], edx
  0009d	8b 90 94 00 00
	00		 mov	 edx, DWORD PTR [eax+148]
  000a3	89 94 24 8c 00
	00 00		 mov	 DWORD PTR tv2479[esp+232], edx
  000aa	8b 90 98 00 00
	00		 mov	 edx, DWORD PTR [eax+152]
  000b0	89 54 24 78	 mov	 DWORD PTR tv2048[esp+228], edx
  000b4	8b 90 9c 00 00
	00		 mov	 edx, DWORD PTR [eax+156]
  000ba	89 54 24 7c	 mov	 DWORD PTR tv2048[esp+232], edx
  000be	8b 90 a0 00 00
	00		 mov	 edx, DWORD PTR [eax+160]
  000c4	89 94 24 c8 00
	00 00		 mov	 DWORD PTR tv2120[esp+228], edx
  000cb	8b 90 a4 00 00
	00		 mov	 edx, DWORD PTR [eax+164]
  000d1	89 94 24 cc 00
	00 00		 mov	 DWORD PTR tv2120[esp+232], edx
  000d8	8b 90 a8 00 00
	00		 mov	 edx, DWORD PTR [eax+168]
  000de	89 94 24 b8 00
	00 00		 mov	 DWORD PTR tv2186[esp+228], edx
  000e5	8b 90 ac 00 00
	00		 mov	 edx, DWORD PTR [eax+172]
  000eb	89 94 24 bc 00
	00 00		 mov	 DWORD PTR tv2186[esp+232], edx
  000f2	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  000f8	89 94 24 a8 00
	00 00		 mov	 DWORD PTR tv2252[esp+228], edx
  000ff	8b 90 b4 00 00
	00		 mov	 edx, DWORD PTR [eax+180]
  00105	89 94 24 ac 00
	00 00		 mov	 DWORD PTR tv2252[esp+232], edx
  0010c	8b 90 b8 00 00
	00		 mov	 edx, DWORD PTR [eax+184]
  00112	8b 58 5c	 mov	 ebx, DWORD PTR [eax+92]
  00115	89 94 24 a0 00
	00 00		 mov	 DWORD PTR tv2317[esp+228], edx
  0011c	8b 90 bc 00 00
	00		 mov	 edx, DWORD PTR [eax+188]
  00122	8d 70 10	 lea	 esi, DWORD PTR [eax+16]
  00125	89 94 24 a4 00
	00 00		 mov	 DWORD PTR tv2317[esp+232], edx
  0012c	8b 90 c0 00 00
	00		 mov	 edx, DWORD PTR [eax+192]
  00132	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00137	8d 7c 24 14	 lea	 edi, DWORD PTR _v$[esp+228]
  0013b	89 b4 24 e0 00
	00 00		 mov	 DWORD PTR tv2017[esp+228], esi
  00142	f3 a5		 rep movsd
  00144	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00147	89 54 24 60	 mov	 DWORD PTR tv2023[esp+228], edx
  0014b	8b 90 c4 00 00
	00		 mov	 edx, DWORD PTR [eax+196]
  00151	89 4c 24 68	 mov	 DWORD PTR tv2051[esp+228], ecx
  00155	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00158	89 54 24 64	 mov	 DWORD PTR tv2023[esp+232], edx
  0015c	8b 90 c8 00 00
	00		 mov	 edx, DWORD PTR [eax+200]
  00162	8b 80 cc 00 00
	00		 mov	 eax, DWORD PTR [eax+204]
  00168	33 ff		 xor	 edi, edi
  0016a	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv2095[esp+232], eax
  00171	8b 44 24 18	 mov	 eax, DWORD PTR _v$[esp+232]
  00175	89 7c 24 10	 mov	 DWORD PTR _j$[esp+228], edi
  00179	89 8c 24 b0 00
	00 00		 mov	 DWORD PTR tv2035[esp+228], ecx
  00180	89 9c 24 b4 00
	00 00		 mov	 DWORD PTR tv2035[esp+232], ebx
  00187	89 94 24 98 00
	00 00		 mov	 DWORD PTR tv2095[esp+228], edx
  0018e	eb 0e		 jmp	 SHORT $LN41@sha512_com
$LL40@sha512_com:
  00190	8b 9c 24 b4 00
	00 00		 mov	 ebx, DWORD PTR tv2035[esp+232]
  00197	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR tv2035[esp+228]
$LN41@sha512_com:
  0019e	8b 54 24 34	 mov	 edx, DWORD PTR _v$[esp+260]
  001a2	8b 74 24 38	 mov	 esi, DWORD PTR _v$[esp+264]

; 518  :     {
; 519  :         v_cycle( 0, j); v_cycle( 1, j);

  001a6	85 ff		 test	 edi, edi
  001a8	0f 84 d8 00 00
	00		 je	 $LN6@sha512_com
  001ae	33 c0		 xor	 eax, eax
  001b0	8b f1		 mov	 esi, ecx
  001b2	8b fb		 mov	 edi, ebx
  001b4	0f ac fe 08	 shrd	 esi, edi, 8
  001b8	0b c6		 or	 eax, esi
  001ba	8b e9		 mov	 ebp, ecx
  001bc	0f ac dd 01	 shrd	 ebp, ebx, 1
  001c0	8b d1		 mov	 edx, ecx
  001c2	8b f1		 mov	 esi, ecx
  001c4	c1 e6 1f	 shl	 esi, 31			; 0000001fH
  001c7	c1 ef 08	 shr	 edi, 8
  001ca	c1 e2 18	 shl	 edx, 24			; 00000018H
  001cd	0b d7		 or	 edx, edi
  001cf	d1 eb		 shr	 ebx, 1
  001d1	0b f3		 or	 esi, ebx
  001d3	33 d6		 xor	 edx, esi
  001d5	8b b4 24 b4 00
	00 00		 mov	 esi, DWORD PTR tv2035[esp+232]
  001dc	0f ac f1 07	 shrd	 ecx, esi, 7
  001e0	33 ff		 xor	 edi, edi
  001e2	0b fd		 or	 edi, ebp
  001e4	33 c7		 xor	 eax, edi
  001e6	33 c1		 xor	 eax, ecx
  001e8	8b 4c 24 64	 mov	 ecx, DWORD PTR tv2023[esp+232]
  001ec	89 44 24 54	 mov	 DWORD PTR tv4740[esp+228], eax
  001f0	8b 44 24 60	 mov	 eax, DWORD PTR tv2023[esp+228]
  001f4	8b d8		 mov	 ebx, eax
  001f6	8b e9		 mov	 ebp, ecx
  001f8	0f ac eb 13	 shrd	 ebx, ebp, 19
  001fc	c1 ee 07	 shr	 esi, 7
  001ff	33 d6		 xor	 edx, esi
  00201	8b f0		 mov	 esi, eax
  00203	33 ff		 xor	 edi, edi
  00205	0b fb		 or	 edi, ebx
  00207	8b d9		 mov	 ebx, ecx
  00209	0f a4 c1 03	 shld	 ecx, eax, 3
  0020d	03 c0		 add	 eax, eax
  0020f	03 c0		 add	 eax, eax
  00211	c1 e6 0d	 shl	 esi, 13			; 0000000dH
  00214	03 c0		 add	 eax, eax
  00216	c1 ed 13	 shr	 ebp, 19			; 00000013H
  00219	0b f5		 or	 esi, ebp
  0021b	c1 eb 1d	 shr	 ebx, 29			; 0000001dH
  0021e	0b d8		 or	 ebx, eax
  00220	8b 44 24 64	 mov	 eax, DWORD PTR tv2023[esp+232]
  00224	33 ed		 xor	 ebp, ebp
  00226	0b e9		 or	 ebp, ecx
  00228	8b 4c 24 60	 mov	 ecx, DWORD PTR tv2023[esp+228]
  0022c	0f ac c1 06	 shrd	 ecx, eax, 6
  00230	c1 e8 06	 shr	 eax, 6
  00233	33 fb		 xor	 edi, ebx
  00235	33 f5		 xor	 esi, ebp
  00237	33 f0		 xor	 esi, eax
  00239	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR _ctx$[esp+224]
  00240	33 f9		 xor	 edi, ecx
  00242	8b 4c 24 54	 mov	 ecx, DWORD PTR tv4740[esp+228]
  00246	03 cf		 add	 ecx, edi
  00248	13 d6		 adc	 edx, esi
  0024a	03 4c 24 68	 add	 ecx, DWORD PTR tv2051[esp+228]
  0024e	8b 74 24 38	 mov	 esi, DWORD PTR _v$[esp+264]
  00252	13 54 24 6c	 adc	 edx, DWORD PTR tv2051[esp+232]
  00256	03 4c 24 78	 add	 ecx, DWORD PTR tv2048[esp+228]
  0025a	13 54 24 7c	 adc	 edx, DWORD PTR tv2048[esp+232]
  0025e	89 48 50	 mov	 DWORD PTR [eax+80], ecx
  00261	89 50 54	 mov	 DWORD PTR [eax+84], edx
  00264	8b c2		 mov	 eax, edx
  00266	8b 54 24 34	 mov	 edx, DWORD PTR _v$[esp+260]
  0026a	89 44 24 6c	 mov	 DWORD PTR tv2051[esp+232], eax
  0026e	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv139[esp+232], eax
  00275	8b 44 24 18	 mov	 eax, DWORD PTR _v$[esp+232]
  00279	89 4c 24 68	 mov	 DWORD PTR tv2051[esp+228], ecx
  0027d	89 8c 24 d8 00
	00 00		 mov	 DWORD PTR tv139[esp+228], ecx
  00284	eb 16		 jmp	 SHORT $LN7@sha512_com
$LN6@sha512_com:
  00286	8b 4c 24 68	 mov	 ecx, DWORD PTR tv2051[esp+228]
  0028a	89 8c 24 d8 00
	00 00		 mov	 DWORD PTR tv139[esp+228], ecx
  00291	8b 4c 24 6c	 mov	 ecx, DWORD PTR tv2051[esp+232]
  00295	89 8c 24 dc 00
	00 00		 mov	 DWORD PTR tv139[esp+232], ecx
$LN7@sha512_com:
  0029c	8b ca		 mov	 ecx, edx
  0029e	8b ee		 mov	 ebp, esi
  002a0	0f a4 cd 17	 shld	 ebp, ecx, 23
  002a4	c1 e1 17	 shl	 ecx, 23			; 00000017H
  002a7	8b fe		 mov	 edi, esi
  002a9	c1 ef 09	 shr	 edi, 9
  002ac	0b f9		 or	 edi, ecx
  002ae	33 db		 xor	 ebx, ebx
  002b0	0b dd		 or	 ebx, ebp
  002b2	8b ca		 mov	 ecx, edx
  002b4	0f ac f2 12	 shrd	 edx, esi, 18
  002b8	33 ed		 xor	 ebp, ebp
  002ba	0b ea		 or	 ebp, edx
  002bc	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  002bf	c1 ee 12	 shr	 esi, 18			; 00000012H
  002c2	0b ce		 or	 ecx, esi
  002c4	33 d9		 xor	 ebx, ecx
  002c6	8b 4c 24 34	 mov	 ecx, DWORD PTR _v$[esp+260]
  002ca	33 fd		 xor	 edi, ebp
  002cc	8b 6c 24 38	 mov	 ebp, DWORD PTR _v$[esp+264]
  002d0	8b d1		 mov	 edx, ecx
  002d2	0f ac e9 0e	 shrd	 ecx, ebp, 14
  002d6	33 f6		 xor	 esi, esi
  002d8	0b f1		 or	 esi, ecx
  002da	8b 4c 24 44	 mov	 ecx, DWORD PTR _v$[esp+276]
  002de	c1 e2 12	 shl	 edx, 18			; 00000012H
  002e1	c1 ed 0e	 shr	 ebp, 14			; 0000000eH
  002e4	0b d5		 or	 edx, ebp
  002e6	8b 6c 24 40	 mov	 ebp, DWORD PTR _v$[esp+272]
  002ea	33 da		 xor	 ebx, edx
  002ec	8b 54 24 48	 mov	 edx, DWORD PTR _v$[esp+280]
  002f0	33 fe		 xor	 edi, esi
  002f2	8b 74 24 3c	 mov	 esi, DWORD PTR _v$[esp+268]
  002f6	33 f1		 xor	 esi, ecx
  002f8	23 74 24 34	 and	 esi, DWORD PTR _v$[esp+260]
  002fc	33 ea		 xor	 ebp, edx
  002fe	23 6c 24 38	 and	 ebp, DWORD PTR _v$[esp+264]
  00302	33 f1		 xor	 esi, ecx
  00304	8b 4c 24 10	 mov	 ecx, DWORD PTR _j$[esp+228]
  00308	33 ea		 xor	 ebp, edx
  0030a	8b 54 24 50	 mov	 edx, DWORD PTR _v$[esp+288]
  0030e	03 fe		 add	 edi, esi
  00310	13 dd		 adc	 ebx, ebp
  00312	03 3c cd 00 00
	00 00		 add	 edi, DWORD PTR _k512[ecx*8]
  00319	8b e8		 mov	 ebp, eax
  0031b	13 1c cd 04 00
	00 00		 adc	 ebx, DWORD PTR _k512[ecx*8+4]
  00322	03 bc 24 d8 00
	00 00		 add	 edi, DWORD PTR tv139[esp+228]
  00329	8b 4c 24 4c	 mov	 ecx, DWORD PTR _v$[esp+284]
  0032d	13 9c 24 dc 00
	00 00		 adc	 ebx, DWORD PTR tv139[esp+232]
  00334	03 cf		 add	 ecx, edi
  00336	13 d3		 adc	 edx, ebx
  00338	01 4c 24 2c	 add	 DWORD PTR _v$[esp+252], ecx
  0033c	89 4c 24 4c	 mov	 DWORD PTR _v$[esp+284], ecx
  00340	8b 4c 24 14	 mov	 ecx, DWORD PTR _v$[esp+228]
  00344	11 54 24 30	 adc	 DWORD PTR _v$[esp+256], edx
  00348	89 54 24 50	 mov	 DWORD PTR _v$[esp+288], edx
  0034c	8b d1		 mov	 edx, ecx
  0034e	8b d8		 mov	 ebx, eax
  00350	0f ac da 1c	 shrd	 edx, ebx, 28
  00354	8b f1		 mov	 esi, ecx
  00356	0f a4 cd 1e	 shld	 ebp, ecx, 30
  0035a	c1 eb 1c	 shr	 ebx, 28			; 0000001cH
  0035d	c1 e6 04	 shl	 esi, 4
  00360	0b f3		 or	 esi, ebx
  00362	33 db		 xor	 ebx, ebx
  00364	0b dd		 or	 ebx, ebp
  00366	33 ff		 xor	 edi, edi
  00368	0b fa		 or	 edi, edx
  0036a	33 f3		 xor	 esi, ebx
  0036c	8b 5c 24 14	 mov	 ebx, DWORD PTR _v$[esp+228]
  00370	c1 e1 1e	 shl	 ecx, 30			; 0000001eH
  00373	8b d0		 mov	 edx, eax
  00375	c1 ea 02	 shr	 edx, 2
  00378	0b d1		 or	 edx, ecx
  0037a	8b e8		 mov	 ebp, eax
  0037c	0f a4 dd 19	 shld	 ebp, ebx, 25
  00380	33 fa		 xor	 edi, edx
  00382	8b c8		 mov	 ecx, eax
  00384	c1 e9 07	 shr	 ecx, 7
  00387	33 d2		 xor	 edx, edx
  00389	c1 e3 19	 shl	 ebx, 25			; 00000019H
  0038c	0b d5		 or	 edx, ebp
  0038e	8b 6c 24 20	 mov	 ebp, DWORD PTR _v$[esp+240]
  00392	0b cb		 or	 ecx, ebx
  00394	33 f2		 xor	 esi, edx
  00396	8b 54 24 1c	 mov	 edx, DWORD PTR _v$[esp+236]
  0039a	33 f9		 xor	 edi, ecx
  0039c	8b 4c 24 14	 mov	 ecx, DWORD PTR _v$[esp+228]
  003a0	8b da		 mov	 ebx, edx
  003a2	33 d9		 xor	 ebx, ecx
  003a4	23 5c 24 24	 and	 ebx, DWORD PTR _v$[esp+244]
  003a8	23 d1		 and	 edx, ecx
  003aa	8b 4c 24 20	 mov	 ecx, DWORD PTR _v$[esp+240]
  003ae	33 e8		 xor	 ebp, eax
  003b0	23 6c 24 28	 and	 ebp, DWORD PTR _v$[esp+248]
  003b4	23 c8		 and	 ecx, eax
  003b6	0b da		 or	 ebx, edx
  003b8	0b e9		 or	 ebp, ecx
  003ba	03 fb		 add	 edi, ebx
  003bc	13 f5		 adc	 esi, ebp
  003be	01 7c 24 4c	 add	 DWORD PTR _v$[esp+284], edi
  003c2	11 74 24 50	 adc	 DWORD PTR _v$[esp+288], esi
  003c6	83 7c 24 10 00	 cmp	 DWORD PTR _j$[esp+228], 0
  003cb	0f 84 ef 00 00
	00		 je	 $LN8@sha512_com
  003d1	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR tv2107[esp+228]
  003d8	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR tv2107[esp+232]
  003df	8b d9		 mov	 ebx, ecx
  003e1	8b f8		 mov	 edi, eax
  003e3	0f ac df 08	 shrd	 edi, ebx, 8
  003e7	8b e8		 mov	 ebp, eax
  003e9	0f ac cd 01	 shrd	 ebp, ecx, 1
  003ed	33 f6		 xor	 esi, esi
  003ef	0b f7		 or	 esi, edi
  003f1	8b f8		 mov	 edi, eax
  003f3	d1 e9		 shr	 ecx, 1
  003f5	8b d0		 mov	 edx, eax
  003f7	c1 eb 08	 shr	 ebx, 8
  003fa	c1 e7 1f	 shl	 edi, 31			; 0000001fH
  003fd	0b f9		 or	 edi, ecx
  003ff	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR tv2107[esp+232]
  00406	0f ac c8 07	 shrd	 eax, ecx, 7
  0040a	c1 e2 18	 shl	 edx, 24			; 00000018H
  0040d	0b d3		 or	 edx, ebx
  0040f	33 db		 xor	 ebx, ebx
  00411	0b dd		 or	 ebx, ebp
  00413	33 f3		 xor	 esi, ebx
  00415	33 f0		 xor	 esi, eax
  00417	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tv2095[esp+228]
  0041e	33 d7		 xor	 edx, edi
  00420	c1 e9 07	 shr	 ecx, 7
  00423	33 d1		 xor	 edx, ecx
  00425	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv2095[esp+232]
  0042c	8b d8		 mov	 ebx, eax
  0042e	8b e9		 mov	 ebp, ecx
  00430	0f ac eb 13	 shrd	 ebx, ebp, 19
  00434	33 ff		 xor	 edi, edi
  00436	0b fb		 or	 edi, ebx
  00438	8b d9		 mov	 ebx, ecx
  0043a	89 74 24 54	 mov	 DWORD PTR tv4737[esp+228], esi
  0043e	8b f0		 mov	 esi, eax
  00440	0f a4 c1 03	 shld	 ecx, eax, 3
  00444	03 c0		 add	 eax, eax
  00446	03 c0		 add	 eax, eax
  00448	c1 e6 0d	 shl	 esi, 13			; 0000000dH
  0044b	c1 ed 13	 shr	 ebp, 19			; 00000013H
  0044e	03 c0		 add	 eax, eax
  00450	0b f5		 or	 esi, ebp
  00452	c1 eb 1d	 shr	 ebx, 29			; 0000001dH
  00455	0b d8		 or	 ebx, eax
  00457	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tv2095[esp+228]
  0045e	33 ed		 xor	 ebp, ebp
  00460	0b e9		 or	 ebp, ecx
  00462	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv2095[esp+232]
  00469	0f ac c8 06	 shrd	 eax, ecx, 6
  0046d	c1 e9 06	 shr	 ecx, 6
  00470	33 f5		 xor	 esi, ebp
  00472	33 fb		 xor	 edi, ebx
  00474	33 f8		 xor	 edi, eax
  00476	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR _ctx$[esp+224]
  0047d	33 f1		 xor	 esi, ecx
  0047f	8b 4c 24 54	 mov	 ecx, DWORD PTR tv4737[esp+228]
  00483	03 cf		 add	 ecx, edi
  00485	13 d6		 adc	 edx, esi
  00487	03 8c 24 b0 00
	00 00		 add	 ecx, DWORD PTR tv2035[esp+228]
  0048e	13 94 24 b4 00
	00 00		 adc	 edx, DWORD PTR tv2035[esp+232]
  00495	03 8c 24 c8 00
	00 00		 add	 ecx, DWORD PTR tv2120[esp+228]
  0049c	13 94 24 cc 00
	00 00		 adc	 edx, DWORD PTR tv2120[esp+232]
  004a3	89 48 58	 mov	 DWORD PTR [eax+88], ecx
  004a6	89 50 5c	 mov	 DWORD PTR [eax+92], edx
  004a9	8b 40 5c	 mov	 eax, DWORD PTR [eax+92]
  004ac	8b d1		 mov	 edx, ecx
  004ae	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv2035[esp+232], eax
  004b5	8b 44 24 18	 mov	 eax, DWORD PTR _v$[esp+232]
  004b9	89 94 24 b0 00
	00 00		 mov	 DWORD PTR tv2035[esp+228], edx
$LN8@sha512_com:
  004c0	8b 54 24 30	 mov	 edx, DWORD PTR _v$[esp+256]
  004c4	8b 4c 24 2c	 mov	 ecx, DWORD PTR _v$[esp+252]
  004c8	8b ea		 mov	 ebp, edx
  004ca	8b d9		 mov	 ebx, ecx
  004cc	0f a4 dd 17	 shld	 ebp, ebx, 23
  004d0	c1 e3 17	 shl	 ebx, 23			; 00000017H
  004d3	8b f2		 mov	 esi, edx
  004d5	c1 ee 09	 shr	 esi, 9
  004d8	0b f3		 or	 esi, ebx
  004da	33 ff		 xor	 edi, edi
  004dc	0b fd		 or	 edi, ebp
  004de	33 ed		 xor	 ebp, ebp
  004e0	8b d9		 mov	 ebx, ecx
  004e2	0f ac d1 12	 shrd	 ecx, edx, 18
  004e6	0b e9		 or	 ebp, ecx
  004e8	8b 4c 24 2c	 mov	 ecx, DWORD PTR _v$[esp+252]
  004ec	33 f5		 xor	 esi, ebp
  004ee	8b 6c 24 30	 mov	 ebp, DWORD PTR _v$[esp+256]
  004f2	c1 e3 0e	 shl	 ebx, 14			; 0000000eH
  004f5	c1 ea 12	 shr	 edx, 18			; 00000012H
  004f8	0b da		 or	 ebx, edx
  004fa	33 fb		 xor	 edi, ebx
  004fc	8b d1		 mov	 edx, ecx
  004fe	0f ac e9 0e	 shrd	 ecx, ebp, 14
  00502	c1 ed 0e	 shr	 ebp, 14			; 0000000eH
  00505	33 db		 xor	 ebx, ebx
  00507	0b d9		 or	 ebx, ecx
  00509	8b 4c 24 3c	 mov	 ecx, DWORD PTR _v$[esp+268]
  0050d	c1 e2 12	 shl	 edx, 18			; 00000012H
  00510	0b d5		 or	 edx, ebp
  00512	33 fa		 xor	 edi, edx
  00514	8b 54 24 40	 mov	 edx, DWORD PTR _v$[esp+272]
  00518	33 f3		 xor	 esi, ebx
  0051a	8b d9		 mov	 ebx, ecx
  0051c	33 5c 24 34	 xor	 ebx, DWORD PTR _v$[esp+260]
  00520	8b ea		 mov	 ebp, edx
  00522	33 6c 24 38	 xor	 ebp, DWORD PTR _v$[esp+264]
  00526	23 5c 24 2c	 and	 ebx, DWORD PTR _v$[esp+252]
  0052a	23 6c 24 30	 and	 ebp, DWORD PTR _v$[esp+256]
  0052e	33 d9		 xor	 ebx, ecx
  00530	8b 4c 24 10	 mov	 ecx, DWORD PTR _j$[esp+228]
  00534	33 ea		 xor	 ebp, edx
  00536	8b 54 24 48	 mov	 edx, DWORD PTR _v$[esp+280]
  0053a	03 f3		 add	 esi, ebx
  0053c	13 fd		 adc	 edi, ebp
  0053e	03 34 cd 08 00
	00 00		 add	 esi, DWORD PTR _k512[ecx*8+8]
  00545	13 3c cd 0c 00
	00 00		 adc	 edi, DWORD PTR _k512[ecx*8+12]
  0054c	03 b4 24 b0 00
	00 00		 add	 esi, DWORD PTR tv2035[esp+228]
  00553	8b 4c 24 44	 mov	 ecx, DWORD PTR _v$[esp+276]
  00557	13 bc 24 b4 00
	00 00		 adc	 edi, DWORD PTR tv2035[esp+232]
  0055e	03 ce		 add	 ecx, esi
  00560	13 d7		 adc	 edx, edi
  00562	01 4c 24 24	 add	 DWORD PTR _v$[esp+244], ecx
  00566	89 4c 24 44	 mov	 DWORD PTR _v$[esp+276], ecx
  0056a	8b 4c 24 4c	 mov	 ecx, DWORD PTR _v$[esp+284]
  0056e	11 54 24 28	 adc	 DWORD PTR _v$[esp+248], edx
  00572	89 54 24 48	 mov	 DWORD PTR _v$[esp+280], edx
  00576	8b 54 24 50	 mov	 edx, DWORD PTR _v$[esp+288]
  0057a	8b d9		 mov	 ebx, ecx
  0057c	8b ea		 mov	 ebp, edx
  0057e	0f ac eb 1c	 shrd	 ebx, ebp, 28
  00582	33 ff		 xor	 edi, edi
  00584	0b fb		 or	 edi, ebx
  00586	8b f1		 mov	 esi, ecx
  00588	8b da		 mov	 ebx, edx
  0058a	0f a4 ca 1e	 shld	 edx, ecx, 30
  0058e	c1 ed 1c	 shr	 ebp, 28			; 0000001cH
  00591	c1 e6 04	 shl	 esi, 4
  00594	0b f5		 or	 esi, ebp
  00596	c1 e1 1e	 shl	 ecx, 30			; 0000001eH
  00599	c1 eb 02	 shr	 ebx, 2
  0059c	33 ed		 xor	 ebp, ebp
  0059e	0b d9		 or	 ebx, ecx
  005a0	8b 4c 24 50	 mov	 ecx, DWORD PTR _v$[esp+288]
  005a4	0b ea		 or	 ebp, edx
  005a6	8b d1		 mov	 edx, ecx
  005a8	33 f5		 xor	 esi, ebp
  005aa	8b 6c 24 4c	 mov	 ebp, DWORD PTR _v$[esp+284]
  005ae	33 fb		 xor	 edi, ebx
  005b0	c1 ea 07	 shr	 edx, 7
  005b3	33 db		 xor	 ebx, ebx
  005b5	0f a4 e9 19	 shld	 ecx, ebp, 25
  005b9	c1 e5 19	 shl	 ebp, 25			; 00000019H
  005bc	0b d5		 or	 edx, ebp
  005be	0b d9		 or	 ebx, ecx
  005c0	8b 4c 24 4c	 mov	 ecx, DWORD PTR _v$[esp+284]
  005c4	33 f3		 xor	 esi, ebx
  005c6	33 fa		 xor	 edi, edx
  005c8	8b 54 24 14	 mov	 edx, DWORD PTR _v$[esp+228]
  005cc	8b e8		 mov	 ebp, eax
  005ce	33 6c 24 50	 xor	 ebp, DWORD PTR _v$[esp+288]
  005d2	23 44 24 50	 and	 eax, DWORD PTR _v$[esp+288]
  005d6	23 6c 24 20	 and	 ebp, DWORD PTR _v$[esp+240]
  005da	8b da		 mov	 ebx, edx
  005dc	33 d9		 xor	 ebx, ecx
  005de	23 5c 24 1c	 and	 ebx, DWORD PTR _v$[esp+236]
  005e2	23 d1		 and	 edx, ecx
  005e4	0b e8		 or	 ebp, eax
  005e6	8b 44 24 48	 mov	 eax, DWORD PTR _v$[esp+280]
  005ea	0b da		 or	 ebx, edx
  005ec	03 fb		 add	 edi, ebx
  005ee	13 f5		 adc	 esi, ebp
  005f0	01 7c 24 44	 add	 DWORD PTR _v$[esp+276], edi
  005f4	13 c6		 adc	 eax, esi

; 520  :         v_cycle( 2, j); v_cycle( 3, j);

  005f6	83 7c 24 10 00	 cmp	 DWORD PTR _j$[esp+228], 0
  005fb	89 44 24 48	 mov	 DWORD PTR _v$[esp+280], eax
  005ff	0f 84 e3 00 00
	00		 je	 $LN10@sha512_com
  00605	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR tv2164[esp+228]
  0060c	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv2164[esp+232]
  00613	8b d9		 mov	 ebx, ecx
  00615	8b f8		 mov	 edi, eax
  00617	0f ac df 08	 shrd	 edi, ebx, 8
  0061b	8b e8		 mov	 ebp, eax
  0061d	0f ac cd 01	 shrd	 ebp, ecx, 1
  00621	33 f6		 xor	 esi, esi
  00623	0b f7		 or	 esi, edi
  00625	8b f8		 mov	 edi, eax
  00627	d1 e9		 shr	 ecx, 1
  00629	8b d0		 mov	 edx, eax
  0062b	c1 eb 08	 shr	 ebx, 8
  0062e	c1 e7 1f	 shl	 edi, 31			; 0000001fH
  00631	0b f9		 or	 edi, ecx
  00633	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv2164[esp+232]
  0063a	0f ac c8 07	 shrd	 eax, ecx, 7
  0063e	c1 e2 18	 shl	 edx, 24			; 00000018H
  00641	0b d3		 or	 edx, ebx
  00643	33 db		 xor	 ebx, ebx
  00645	0b dd		 or	 ebx, ebp
  00647	33 f3		 xor	 esi, ebx
  00649	33 f0		 xor	 esi, eax
  0064b	8b 44 24 68	 mov	 eax, DWORD PTR tv2051[esp+228]
  0064f	33 d7		 xor	 edx, edi
  00651	c1 e9 07	 shr	 ecx, 7
  00654	33 d1		 xor	 edx, ecx
  00656	8b 4c 24 6c	 mov	 ecx, DWORD PTR tv2051[esp+232]
  0065a	8b d8		 mov	 ebx, eax
  0065c	8b e9		 mov	 ebp, ecx
  0065e	0f ac eb 13	 shrd	 ebx, ebp, 19
  00662	33 ff		 xor	 edi, edi
  00664	0b fb		 or	 edi, ebx
  00666	8b d9		 mov	 ebx, ecx
  00668	89 74 24 54	 mov	 DWORD PTR tv4734[esp+228], esi
  0066c	8b f0		 mov	 esi, eax
  0066e	0f a4 c1 03	 shld	 ecx, eax, 3
  00672	03 c0		 add	 eax, eax
  00674	03 c0		 add	 eax, eax
  00676	c1 e6 0d	 shl	 esi, 13			; 0000000dH
  00679	c1 ed 13	 shr	 ebp, 19			; 00000013H
  0067c	03 c0		 add	 eax, eax
  0067e	0b f5		 or	 esi, ebp
  00680	c1 eb 1d	 shr	 ebx, 29			; 0000001dH
  00683	0b d8		 or	 ebx, eax
  00685	8b 44 24 68	 mov	 eax, DWORD PTR tv2051[esp+228]
  00689	33 ed		 xor	 ebp, ebp
  0068b	0b e9		 or	 ebp, ecx
  0068d	8b 4c 24 6c	 mov	 ecx, DWORD PTR tv2051[esp+232]
  00691	0f ac c8 06	 shrd	 eax, ecx, 6
  00695	c1 e9 06	 shr	 ecx, 6
  00698	33 f5		 xor	 esi, ebp
  0069a	33 fb		 xor	 edi, ebx
  0069c	33 f8		 xor	 edi, eax
  0069e	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR _ctx$[esp+224]
  006a5	33 f1		 xor	 esi, ecx
  006a7	8b 4c 24 54	 mov	 ecx, DWORD PTR tv4734[esp+228]
  006ab	03 cf		 add	 ecx, edi
  006ad	13 d6		 adc	 edx, esi
  006af	03 8c 24 b8 00
	00 00		 add	 ecx, DWORD PTR tv2186[esp+228]
  006b6	13 94 24 bc 00
	00 00		 adc	 edx, DWORD PTR tv2186[esp+232]
  006bd	03 8c 24 d0 00
	00 00		 add	 ecx, DWORD PTR tv2107[esp+228]
  006c4	13 94 24 d4 00
	00 00		 adc	 edx, DWORD PTR tv2107[esp+232]
  006cb	89 48 60	 mov	 DWORD PTR [eax+96], ecx
  006ce	89 50 64	 mov	 DWORD PTR [eax+100], edx
  006d1	8b 40 64	 mov	 eax, DWORD PTR [eax+100]
  006d4	8b d1		 mov	 edx, ecx
  006d6	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv2107[esp+232], eax
  006dd	8b 44 24 48	 mov	 eax, DWORD PTR _v$[esp+280]
  006e1	89 94 24 d0 00
	00 00		 mov	 DWORD PTR tv2107[esp+228], edx
$LN10@sha512_com:
  006e8	8b 54 24 28	 mov	 edx, DWORD PTR _v$[esp+248]
  006ec	8b 4c 24 24	 mov	 ecx, DWORD PTR _v$[esp+244]
  006f0	8b ea		 mov	 ebp, edx
  006f2	8b d9		 mov	 ebx, ecx
  006f4	0f a4 dd 17	 shld	 ebp, ebx, 23
  006f8	c1 e3 17	 shl	 ebx, 23			; 00000017H
  006fb	8b f2		 mov	 esi, edx
  006fd	c1 ee 09	 shr	 esi, 9
  00700	0b f3		 or	 esi, ebx
  00702	33 ff		 xor	 edi, edi
  00704	0b fd		 or	 edi, ebp
  00706	8b d9		 mov	 ebx, ecx
  00708	0f ac d1 12	 shrd	 ecx, edx, 18
  0070c	33 ed		 xor	 ebp, ebp
  0070e	0b e9		 or	 ebp, ecx
  00710	8b 4c 24 24	 mov	 ecx, DWORD PTR _v$[esp+244]
  00714	33 f5		 xor	 esi, ebp
  00716	8b 6c 24 28	 mov	 ebp, DWORD PTR _v$[esp+248]
  0071a	c1 e3 0e	 shl	 ebx, 14			; 0000000eH
  0071d	c1 ea 12	 shr	 edx, 18			; 00000012H
  00720	0b da		 or	 ebx, edx
  00722	33 fb		 xor	 edi, ebx
  00724	33 db		 xor	 ebx, ebx
  00726	8b d1		 mov	 edx, ecx
  00728	0f ac e9 0e	 shrd	 ecx, ebp, 14
  0072c	0b d9		 or	 ebx, ecx
  0072e	8b 4c 24 34	 mov	 ecx, DWORD PTR _v$[esp+260]
  00732	33 f3		 xor	 esi, ebx
  00734	8b 5c 24 2c	 mov	 ebx, DWORD PTR _v$[esp+252]
  00738	c1 e2 12	 shl	 edx, 18			; 00000012H
  0073b	33 d9		 xor	 ebx, ecx
  0073d	23 5c 24 24	 and	 ebx, DWORD PTR _v$[esp+244]
  00741	c1 ed 0e	 shr	 ebp, 14			; 0000000eH
  00744	0b d5		 or	 edx, ebp
  00746	8b 6c 24 30	 mov	 ebp, DWORD PTR _v$[esp+256]
  0074a	33 fa		 xor	 edi, edx
  0074c	8b 54 24 38	 mov	 edx, DWORD PTR _v$[esp+264]
  00750	33 ea		 xor	 ebp, edx
  00752	23 6c 24 28	 and	 ebp, DWORD PTR _v$[esp+248]
  00756	33 d9		 xor	 ebx, ecx
  00758	8b 4c 24 10	 mov	 ecx, DWORD PTR _j$[esp+228]
  0075c	33 ea		 xor	 ebp, edx
  0075e	8b 54 24 40	 mov	 edx, DWORD PTR _v$[esp+272]
  00762	03 f3		 add	 esi, ebx
  00764	13 fd		 adc	 edi, ebp
  00766	03 34 cd 10 00
	00 00		 add	 esi, DWORD PTR _k512[ecx*8+16]
  0076d	8b d8		 mov	 ebx, eax
  0076f	13 3c cd 14 00
	00 00		 adc	 edi, DWORD PTR _k512[ecx*8+20]
  00776	03 b4 24 d0 00
	00 00		 add	 esi, DWORD PTR tv2107[esp+228]
  0077d	8b 4c 24 3c	 mov	 ecx, DWORD PTR _v$[esp+268]
  00781	13 bc 24 d4 00
	00 00		 adc	 edi, DWORD PTR tv2107[esp+232]
  00788	03 ce		 add	 ecx, esi
  0078a	13 d7		 adc	 edx, edi
  0078c	01 4c 24 1c	 add	 DWORD PTR _v$[esp+236], ecx
  00790	89 4c 24 3c	 mov	 DWORD PTR _v$[esp+268], ecx
  00794	8b 4c 24 44	 mov	 ecx, DWORD PTR _v$[esp+276]
  00798	11 54 24 20	 adc	 DWORD PTR _v$[esp+240], edx
  0079c	89 54 24 40	 mov	 DWORD PTR _v$[esp+272], edx
  007a0	8b d1		 mov	 edx, ecx
  007a2	0f ac da 1c	 shrd	 edx, ebx, 28
  007a6	8b f1		 mov	 esi, ecx
  007a8	33 ff		 xor	 edi, edi
  007aa	0b fa		 or	 edi, edx
  007ac	8b e8		 mov	 ebp, eax
  007ae	0f a4 cd 1e	 shld	 ebp, ecx, 30
  007b2	c1 eb 1c	 shr	 ebx, 28			; 0000001cH
  007b5	c1 e6 04	 shl	 esi, 4
  007b8	0b f3		 or	 esi, ebx
  007ba	c1 e1 1e	 shl	 ecx, 30			; 0000001eH
  007bd	8b d0		 mov	 edx, eax
  007bf	c1 ea 02	 shr	 edx, 2
  007c2	33 db		 xor	 ebx, ebx
  007c4	0b d1		 or	 edx, ecx
  007c6	0b dd		 or	 ebx, ebp
  007c8	8b c8		 mov	 ecx, eax
  007ca	33 f3		 xor	 esi, ebx
  007cc	8b 5c 24 44	 mov	 ebx, DWORD PTR _v$[esp+276]
  007d0	33 fa		 xor	 edi, edx
  007d2	c1 e9 07	 shr	 ecx, 7
  007d5	33 d2		 xor	 edx, edx
  007d7	8b e8		 mov	 ebp, eax
  007d9	0f a4 dd 19	 shld	 ebp, ebx, 25
  007dd	0b d5		 or	 edx, ebp
  007df	8b 6c 24 50	 mov	 ebp, DWORD PTR _v$[esp+288]
  007e3	c1 e3 19	 shl	 ebx, 25			; 00000019H
  007e6	0b cb		 or	 ecx, ebx
  007e8	33 f2		 xor	 esi, edx
  007ea	8b 54 24 4c	 mov	 edx, DWORD PTR _v$[esp+284]
  007ee	33 f9		 xor	 edi, ecx
  007f0	8b 4c 24 44	 mov	 ecx, DWORD PTR _v$[esp+276]
  007f4	8b da		 mov	 ebx, edx
  007f6	33 d9		 xor	 ebx, ecx
  007f8	23 5c 24 14	 and	 ebx, DWORD PTR _v$[esp+228]
  007fc	23 d1		 and	 edx, ecx
  007fe	8b 4c 24 50	 mov	 ecx, DWORD PTR _v$[esp+288]
  00802	33 e8		 xor	 ebp, eax
  00804	23 6c 24 18	 and	 ebp, DWORD PTR _v$[esp+232]
  00808	23 c8		 and	 ecx, eax
  0080a	0b da		 or	 ebx, edx
  0080c	0b e9		 or	 ebp, ecx
  0080e	03 fb		 add	 edi, ebx
  00810	13 f5		 adc	 esi, ebp
  00812	01 7c 24 3c	 add	 DWORD PTR _v$[esp+268], edi
  00816	11 74 24 40	 adc	 DWORD PTR _v$[esp+272], esi
  0081a	83 7c 24 10 00	 cmp	 DWORD PTR _j$[esp+228], 0
  0081f	0f 84 e3 00 00
	00		 je	 $LN12@sha512_com
  00825	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR tv2035[esp+228]
  0082c	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv2035[esp+232]
  00833	8b d9		 mov	 ebx, ecx
  00835	8b f8		 mov	 edi, eax
  00837	0f ac df 13	 shrd	 edi, ebx, 19
  0083b	33 f6		 xor	 esi, esi
  0083d	0b f7		 or	 esi, edi
  0083f	8b f9		 mov	 edi, ecx
  00841	c1 eb 13	 shr	 ebx, 19			; 00000013H
  00844	8b d0		 mov	 edx, eax
  00846	8b e8		 mov	 ebp, eax
  00848	0f a4 e9 03	 shld	 ecx, ebp, 3
  0084c	c1 e2 0d	 shl	 edx, 13			; 0000000dH
  0084f	0b d3		 or	 edx, ebx
  00851	33 db		 xor	 ebx, ebx
  00853	0b d9		 or	 ebx, ecx
  00855	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv2035[esp+232]
  0085c	0f ac c8 06	 shrd	 eax, ecx, 6
  00860	03 ed		 add	 ebp, ebp
  00862	03 ed		 add	 ebp, ebp
  00864	03 ed		 add	 ebp, ebp
  00866	c1 ef 1d	 shr	 edi, 29			; 0000001dH
  00869	0b fd		 or	 edi, ebp
  0086b	33 f7		 xor	 esi, edi
  0086d	33 f0		 xor	 esi, eax
  0086f	8b 44 24 58	 mov	 eax, DWORD PTR tv2230[esp+228]
  00873	33 d3		 xor	 edx, ebx
  00875	c1 e9 06	 shr	 ecx, 6
  00878	33 d1		 xor	 edx, ecx
  0087a	8b 4c 24 5c	 mov	 ecx, DWORD PTR tv2230[esp+232]
  0087e	8b e9		 mov	 ebp, ecx
  00880	8b d8		 mov	 ebx, eax
  00882	0f ac eb 08	 shrd	 ebx, ebp, 8
  00886	33 ff		 xor	 edi, edi
  00888	0b fb		 or	 edi, ebx
  0088a	89 74 24 54	 mov	 DWORD PTR tv4731[esp+228], esi
  0088e	8b f0		 mov	 esi, eax
  00890	8b d8		 mov	 ebx, eax
  00892	0f ac c8 01	 shrd	 eax, ecx, 1
  00896	c1 e6 18	 shl	 esi, 24			; 00000018H
  00899	c1 ed 08	 shr	 ebp, 8
  0089c	0b f5		 or	 esi, ebp
  0089e	d1 e9		 shr	 ecx, 1
  008a0	33 ed		 xor	 ebp, ebp
  008a2	0b e8		 or	 ebp, eax
  008a4	8b 44 24 58	 mov	 eax, DWORD PTR tv2230[esp+228]
  008a8	c1 e3 1f	 shl	 ebx, 31			; 0000001fH
  008ab	0b d9		 or	 ebx, ecx
  008ad	8b 4c 24 5c	 mov	 ecx, DWORD PTR tv2230[esp+232]
  008b1	0f ac c8 07	 shrd	 eax, ecx, 7
  008b5	c1 e9 07	 shr	 ecx, 7
  008b8	33 f3		 xor	 esi, ebx
  008ba	33 fd		 xor	 edi, ebp
  008bc	33 f8		 xor	 edi, eax
  008be	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR _ctx$[esp+224]
  008c5	33 f1		 xor	 esi, ecx
  008c7	8b 4c 24 54	 mov	 ecx, DWORD PTR tv4731[esp+228]
  008cb	03 cf		 add	 ecx, edi
  008cd	13 d6		 adc	 edx, esi
  008cf	03 8c 24 a8 00
	00 00		 add	 ecx, DWORD PTR tv2252[esp+228]
  008d6	13 94 24 ac 00
	00 00		 adc	 edx, DWORD PTR tv2252[esp+232]
  008dd	03 8c 24 90 00
	00 00		 add	 ecx, DWORD PTR tv2164[esp+228]
  008e4	13 94 24 94 00
	00 00		 adc	 edx, DWORD PTR tv2164[esp+232]
  008eb	89 48 68	 mov	 DWORD PTR [eax+104], ecx
  008ee	89 50 6c	 mov	 DWORD PTR [eax+108], edx
  008f1	8b 40 6c	 mov	 eax, DWORD PTR [eax+108]
  008f4	8b d1		 mov	 edx, ecx
  008f6	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv2164[esp+232], eax
  008fd	8b 44 24 48	 mov	 eax, DWORD PTR _v$[esp+280]
  00901	89 94 24 90 00
	00 00		 mov	 DWORD PTR tv2164[esp+228], edx
$LN12@sha512_com:
  00908	8b 54 24 20	 mov	 edx, DWORD PTR _v$[esp+240]
  0090c	8b 4c 24 1c	 mov	 ecx, DWORD PTR _v$[esp+236]
  00910	8b ea		 mov	 ebp, edx
  00912	8b d9		 mov	 ebx, ecx
  00914	0f a4 dd 17	 shld	 ebp, ebx, 23
  00918	c1 e3 17	 shl	 ebx, 23			; 00000017H
  0091b	8b f2		 mov	 esi, edx
  0091d	c1 ee 09	 shr	 esi, 9
  00920	0b f3		 or	 esi, ebx
  00922	33 ff		 xor	 edi, edi
  00924	0b fd		 or	 edi, ebp
  00926	33 ed		 xor	 ebp, ebp
  00928	8b d9		 mov	 ebx, ecx
  0092a	0f ac d1 12	 shrd	 ecx, edx, 18
  0092e	0b e9		 or	 ebp, ecx
  00930	8b 4c 24 1c	 mov	 ecx, DWORD PTR _v$[esp+236]
  00934	33 f5		 xor	 esi, ebp
  00936	8b 6c 24 20	 mov	 ebp, DWORD PTR _v$[esp+240]
  0093a	c1 e3 0e	 shl	 ebx, 14			; 0000000eH
  0093d	c1 ea 12	 shr	 edx, 18			; 00000012H
  00940	0b da		 or	 ebx, edx
  00942	33 fb		 xor	 edi, ebx
  00944	33 db		 xor	 ebx, ebx
  00946	8b d1		 mov	 edx, ecx
  00948	0f ac e9 0e	 shrd	 ecx, ebp, 14
  0094c	0b d9		 or	 ebx, ecx
  0094e	8b 4c 24 2c	 mov	 ecx, DWORD PTR _v$[esp+252]
  00952	c1 ed 0e	 shr	 ebp, 14			; 0000000eH
  00955	33 f3		 xor	 esi, ebx
  00957	8b 5c 24 24	 mov	 ebx, DWORD PTR _v$[esp+244]
  0095b	c1 e2 12	 shl	 edx, 18			; 00000012H
  0095e	0b d5		 or	 edx, ebp
  00960	8b 6c 24 28	 mov	 ebp, DWORD PTR _v$[esp+248]
  00964	33 fa		 xor	 edi, edx
  00966	8b 54 24 30	 mov	 edx, DWORD PTR _v$[esp+256]
  0096a	33 d9		 xor	 ebx, ecx
  0096c	23 5c 24 1c	 and	 ebx, DWORD PTR _v$[esp+236]
  00970	33 ea		 xor	 ebp, edx
  00972	23 6c 24 20	 and	 ebp, DWORD PTR _v$[esp+240]
  00976	33 d9		 xor	 ebx, ecx
  00978	8b 4c 24 10	 mov	 ecx, DWORD PTR _j$[esp+228]
  0097c	33 ea		 xor	 ebp, edx
  0097e	8b 54 24 38	 mov	 edx, DWORD PTR _v$[esp+264]
  00982	03 f3		 add	 esi, ebx
  00984	13 fd		 adc	 edi, ebp
  00986	03 34 cd 18 00
	00 00		 add	 esi, DWORD PTR _k512[ecx*8+24]
  0098d	13 3c cd 1c 00
	00 00		 adc	 edi, DWORD PTR _k512[ecx*8+28]
  00994	03 b4 24 90 00
	00 00		 add	 esi, DWORD PTR tv2164[esp+228]
  0099b	8b 4c 24 34	 mov	 ecx, DWORD PTR _v$[esp+260]
  0099f	13 bc 24 94 00
	00 00		 adc	 edi, DWORD PTR tv2164[esp+232]
  009a6	03 ce		 add	 ecx, esi
  009a8	13 d7		 adc	 edx, edi
  009aa	01 4c 24 14	 add	 DWORD PTR _v$[esp+228], ecx
  009ae	89 4c 24 34	 mov	 DWORD PTR _v$[esp+260], ecx
  009b2	8b 4c 24 3c	 mov	 ecx, DWORD PTR _v$[esp+268]
  009b6	11 54 24 18	 adc	 DWORD PTR _v$[esp+232], edx
  009ba	89 54 24 38	 mov	 DWORD PTR _v$[esp+264], edx
  009be	8b 54 24 40	 mov	 edx, DWORD PTR _v$[esp+272]
  009c2	8b d9		 mov	 ebx, ecx
  009c4	8b ea		 mov	 ebp, edx
  009c6	0f ac eb 1c	 shrd	 ebx, ebp, 28
  009ca	33 ff		 xor	 edi, edi
  009cc	0b fb		 or	 edi, ebx
  009ce	8b f1		 mov	 esi, ecx
  009d0	8b da		 mov	 ebx, edx
  009d2	0f a4 ca 1e	 shld	 edx, ecx, 30
  009d6	c1 ed 1c	 shr	 ebp, 28			; 0000001cH
  009d9	c1 e6 04	 shl	 esi, 4
  009dc	0b f5		 or	 esi, ebp
  009de	c1 e1 1e	 shl	 ecx, 30			; 0000001eH
  009e1	c1 eb 02	 shr	 ebx, 2
  009e4	33 ed		 xor	 ebp, ebp
  009e6	0b d9		 or	 ebx, ecx
  009e8	8b 4c 24 40	 mov	 ecx, DWORD PTR _v$[esp+272]
  009ec	0b ea		 or	 ebp, edx
  009ee	8b d1		 mov	 edx, ecx
  009f0	33 f5		 xor	 esi, ebp
  009f2	8b 6c 24 3c	 mov	 ebp, DWORD PTR _v$[esp+268]
  009f6	33 fb		 xor	 edi, ebx
  009f8	c1 ea 07	 shr	 edx, 7
  009fb	33 db		 xor	 ebx, ebx
  009fd	0f a4 e9 19	 shld	 ecx, ebp, 25
  00a01	c1 e5 19	 shl	 ebp, 25			; 00000019H
  00a04	0b d5		 or	 edx, ebp
  00a06	8b 6c 24 40	 mov	 ebp, DWORD PTR _v$[esp+272]
  00a0a	0b d9		 or	 ebx, ecx
  00a0c	8b 4c 24 3c	 mov	 ecx, DWORD PTR _v$[esp+268]
  00a10	33 f3		 xor	 esi, ebx
  00a12	33 fa		 xor	 edi, edx
  00a14	8b 54 24 44	 mov	 edx, DWORD PTR _v$[esp+276]
  00a18	33 e8		 xor	 ebp, eax
  00a1a	23 6c 24 50	 and	 ebp, DWORD PTR _v$[esp+288]
  00a1e	8b d9		 mov	 ebx, ecx
  00a20	33 da		 xor	 ebx, edx
  00a22	23 5c 24 4c	 and	 ebx, DWORD PTR _v$[esp+284]
  00a26	23 ca		 and	 ecx, edx
  00a28	8b 54 24 40	 mov	 edx, DWORD PTR _v$[esp+272]
  00a2c	23 d0		 and	 edx, eax
  00a2e	8b 44 24 38	 mov	 eax, DWORD PTR _v$[esp+264]
  00a32	0b d9		 or	 ebx, ecx
  00a34	0b ea		 or	 ebp, edx
  00a36	03 fb		 add	 edi, ebx
  00a38	13 f5		 adc	 esi, ebp
  00a3a	01 7c 24 34	 add	 DWORD PTR _v$[esp+260], edi
  00a3e	13 c6		 adc	 eax, esi

; 521  :         v_cycle( 4, j); v_cycle( 5, j);

  00a40	83 7c 24 10 00	 cmp	 DWORD PTR _j$[esp+228], 0
  00a45	89 44 24 38	 mov	 DWORD PTR _v$[esp+264], eax
  00a49	0f 84 d7 00 00
	00		 je	 $LN14@sha512_com
  00a4f	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR tv2107[esp+228]
  00a56	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR tv2107[esp+232]
  00a5d	8b d9		 mov	 ebx, ecx
  00a5f	8b f8		 mov	 edi, eax
  00a61	0f ac df 13	 shrd	 edi, ebx, 19
  00a65	33 f6		 xor	 esi, esi
  00a67	0b f7		 or	 esi, edi
  00a69	8b f9		 mov	 edi, ecx
  00a6b	c1 eb 13	 shr	 ebx, 19			; 00000013H
  00a6e	8b d0		 mov	 edx, eax
  00a70	8b e8		 mov	 ebp, eax
  00a72	0f a4 e9 03	 shld	 ecx, ebp, 3
  00a76	c1 e2 0d	 shl	 edx, 13			; 0000000dH
  00a79	0b d3		 or	 edx, ebx
  00a7b	33 db		 xor	 ebx, ebx
  00a7d	0b d9		 or	 ebx, ecx
  00a7f	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR tv2107[esp+232]
  00a86	0f ac c8 06	 shrd	 eax, ecx, 6
  00a8a	03 ed		 add	 ebp, ebp
  00a8c	03 ed		 add	 ebp, ebp
  00a8e	03 ed		 add	 ebp, ebp
  00a90	c1 ef 1d	 shr	 edi, 29			; 0000001dH
  00a93	0b fd		 or	 edi, ebp
  00a95	33 f7		 xor	 esi, edi
  00a97	33 f0		 xor	 esi, eax
  00a99	8b 44 24 70	 mov	 eax, DWORD PTR tv2295[esp+228]
  00a9d	33 d3		 xor	 edx, ebx
  00a9f	c1 e9 06	 shr	 ecx, 6
  00aa2	33 d1		 xor	 edx, ecx
  00aa4	8b 4c 24 74	 mov	 ecx, DWORD PTR tv2295[esp+232]
  00aa8	8b e9		 mov	 ebp, ecx
  00aaa	8b d8		 mov	 ebx, eax
  00aac	0f ac eb 08	 shrd	 ebx, ebp, 8
  00ab0	33 ff		 xor	 edi, edi
  00ab2	0b fb		 or	 edi, ebx
  00ab4	89 74 24 54	 mov	 DWORD PTR tv4728[esp+228], esi
  00ab8	8b f0		 mov	 esi, eax
  00aba	8b d8		 mov	 ebx, eax
  00abc	0f ac c8 01	 shrd	 eax, ecx, 1
  00ac0	c1 e6 18	 shl	 esi, 24			; 00000018H
  00ac3	c1 ed 08	 shr	 ebp, 8
  00ac6	0b f5		 or	 esi, ebp
  00ac8	d1 e9		 shr	 ecx, 1
  00aca	33 ed		 xor	 ebp, ebp
  00acc	0b e8		 or	 ebp, eax
  00ace	8b 44 24 70	 mov	 eax, DWORD PTR tv2295[esp+228]
  00ad2	c1 e3 1f	 shl	 ebx, 31			; 0000001fH
  00ad5	0b d9		 or	 ebx, ecx
  00ad7	8b 4c 24 74	 mov	 ecx, DWORD PTR tv2295[esp+232]
  00adb	0f ac c8 07	 shrd	 eax, ecx, 7
  00adf	c1 e9 07	 shr	 ecx, 7
  00ae2	33 f3		 xor	 esi, ebx
  00ae4	33 fd		 xor	 edi, ebp
  00ae6	33 f8		 xor	 edi, eax
  00ae8	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR _ctx$[esp+224]
  00aef	33 f1		 xor	 esi, ecx
  00af1	8b 4c 24 54	 mov	 ecx, DWORD PTR tv4728[esp+228]
  00af5	03 cf		 add	 ecx, edi
  00af7	13 d6		 adc	 edx, esi
  00af9	03 8c 24 a0 00
	00 00		 add	 ecx, DWORD PTR tv2317[esp+228]
  00b00	13 94 24 a4 00
	00 00		 adc	 edx, DWORD PTR tv2317[esp+232]
  00b07	03 4c 24 58	 add	 ecx, DWORD PTR tv2230[esp+228]
  00b0b	13 54 24 5c	 adc	 edx, DWORD PTR tv2230[esp+232]
  00b0f	89 48 70	 mov	 DWORD PTR [eax+112], ecx
  00b12	89 50 74	 mov	 DWORD PTR [eax+116], edx
  00b15	8b 40 74	 mov	 eax, DWORD PTR [eax+116]
  00b18	8b d1		 mov	 edx, ecx
  00b1a	89 44 24 5c	 mov	 DWORD PTR tv2230[esp+232], eax
  00b1e	8b 44 24 38	 mov	 eax, DWORD PTR _v$[esp+264]
  00b22	89 54 24 58	 mov	 DWORD PTR tv2230[esp+228], edx
$LN14@sha512_com:
  00b26	8b 54 24 18	 mov	 edx, DWORD PTR _v$[esp+232]
  00b2a	8b 4c 24 14	 mov	 ecx, DWORD PTR _v$[esp+228]
  00b2e	8b ea		 mov	 ebp, edx
  00b30	8b d9		 mov	 ebx, ecx
  00b32	0f a4 dd 17	 shld	 ebp, ebx, 23
  00b36	c1 e3 17	 shl	 ebx, 23			; 00000017H
  00b39	8b f2		 mov	 esi, edx
  00b3b	c1 ee 09	 shr	 esi, 9
  00b3e	0b f3		 or	 esi, ebx
  00b40	33 ff		 xor	 edi, edi
  00b42	0b fd		 or	 edi, ebp
  00b44	8b d9		 mov	 ebx, ecx
  00b46	0f ac d1 12	 shrd	 ecx, edx, 18
  00b4a	33 ed		 xor	 ebp, ebp
  00b4c	0b e9		 or	 ebp, ecx
  00b4e	8b 4c 24 14	 mov	 ecx, DWORD PTR _v$[esp+228]
  00b52	33 f5		 xor	 esi, ebp
  00b54	8b 6c 24 18	 mov	 ebp, DWORD PTR _v$[esp+232]
  00b58	c1 e3 0e	 shl	 ebx, 14			; 0000000eH
  00b5b	c1 ea 12	 shr	 edx, 18			; 00000012H
  00b5e	0b da		 or	 ebx, edx
  00b60	33 fb		 xor	 edi, ebx
  00b62	8b d1		 mov	 edx, ecx
  00b64	0f ac e9 0e	 shrd	 ecx, ebp, 14
  00b68	33 db		 xor	 ebx, ebx
  00b6a	0b d9		 or	 ebx, ecx
  00b6c	8b 4c 24 24	 mov	 ecx, DWORD PTR _v$[esp+244]
  00b70	c1 e2 12	 shl	 edx, 18			; 00000012H
  00b73	33 f3		 xor	 esi, ebx
  00b75	c1 ed 0e	 shr	 ebp, 14			; 0000000eH
  00b78	0b d5		 or	 edx, ebp
  00b7a	33 fa		 xor	 edi, edx
  00b7c	8b 54 24 28	 mov	 edx, DWORD PTR _v$[esp+248]
  00b80	8b d9		 mov	 ebx, ecx
  00b82	33 5c 24 1c	 xor	 ebx, DWORD PTR _v$[esp+236]
  00b86	8b ea		 mov	 ebp, edx
  00b88	33 6c 24 20	 xor	 ebp, DWORD PTR _v$[esp+240]
  00b8c	23 5c 24 14	 and	 ebx, DWORD PTR _v$[esp+228]
  00b90	23 6c 24 18	 and	 ebp, DWORD PTR _v$[esp+232]
  00b94	33 d9		 xor	 ebx, ecx
  00b96	8b 4c 24 10	 mov	 ecx, DWORD PTR _j$[esp+228]
  00b9a	33 ea		 xor	 ebp, edx
  00b9c	8b 54 24 30	 mov	 edx, DWORD PTR _v$[esp+256]
  00ba0	03 f3		 add	 esi, ebx
  00ba2	13 fd		 adc	 edi, ebp
  00ba4	03 34 cd 20 00
	00 00		 add	 esi, DWORD PTR _k512[ecx*8+32]
  00bab	8b d8		 mov	 ebx, eax
  00bad	13 3c cd 24 00
	00 00		 adc	 edi, DWORD PTR _k512[ecx*8+36]
  00bb4	03 74 24 58	 add	 esi, DWORD PTR tv2230[esp+228]
  00bb8	8b 4c 24 2c	 mov	 ecx, DWORD PTR _v$[esp+252]
  00bbc	13 7c 24 5c	 adc	 edi, DWORD PTR tv2230[esp+232]
  00bc0	03 ce		 add	 ecx, esi
  00bc2	13 d7		 adc	 edx, edi
  00bc4	01 4c 24 4c	 add	 DWORD PTR _v$[esp+284], ecx
  00bc8	89 4c 24 2c	 mov	 DWORD PTR _v$[esp+252], ecx
  00bcc	8b 4c 24 34	 mov	 ecx, DWORD PTR _v$[esp+260]
  00bd0	11 54 24 50	 adc	 DWORD PTR _v$[esp+288], edx
  00bd4	89 54 24 30	 mov	 DWORD PTR _v$[esp+256], edx
  00bd8	8b d1		 mov	 edx, ecx
  00bda	0f ac da 1c	 shrd	 edx, ebx, 28
  00bde	8b f1		 mov	 esi, ecx
  00be0	33 ff		 xor	 edi, edi
  00be2	0b fa		 or	 edi, edx
  00be4	8b e8		 mov	 ebp, eax
  00be6	0f a4 cd 1e	 shld	 ebp, ecx, 30
  00bea	c1 eb 1c	 shr	 ebx, 28			; 0000001cH
  00bed	c1 e6 04	 shl	 esi, 4
  00bf0	0b f3		 or	 esi, ebx
  00bf2	c1 e1 1e	 shl	 ecx, 30			; 0000001eH
  00bf5	8b d0		 mov	 edx, eax
  00bf7	c1 ea 02	 shr	 edx, 2
  00bfa	33 db		 xor	 ebx, ebx
  00bfc	0b d1		 or	 edx, ecx
  00bfe	0b dd		 or	 ebx, ebp
  00c00	8b c8		 mov	 ecx, eax
  00c02	33 f3		 xor	 esi, ebx
  00c04	8b 5c 24 34	 mov	 ebx, DWORD PTR _v$[esp+260]
  00c08	33 fa		 xor	 edi, edx
  00c0a	c1 e9 07	 shr	 ecx, 7
  00c0d	33 d2		 xor	 edx, edx
  00c0f	8b e8		 mov	 ebp, eax
  00c11	0f a4 dd 19	 shld	 ebp, ebx, 25
  00c15	0b d5		 or	 edx, ebp
  00c17	8b 6c 24 40	 mov	 ebp, DWORD PTR _v$[esp+272]
  00c1b	c1 e3 19	 shl	 ebx, 25			; 00000019H
  00c1e	0b cb		 or	 ecx, ebx
  00c20	33 f2		 xor	 esi, edx
  00c22	8b 54 24 3c	 mov	 edx, DWORD PTR _v$[esp+268]
  00c26	33 f9		 xor	 edi, ecx
  00c28	8b 4c 24 34	 mov	 ecx, DWORD PTR _v$[esp+260]
  00c2c	8b da		 mov	 ebx, edx
  00c2e	33 d9		 xor	 ebx, ecx
  00c30	23 5c 24 44	 and	 ebx, DWORD PTR _v$[esp+276]
  00c34	23 d1		 and	 edx, ecx
  00c36	8b 4c 24 40	 mov	 ecx, DWORD PTR _v$[esp+272]
  00c3a	33 e8		 xor	 ebp, eax
  00c3c	23 6c 24 48	 and	 ebp, DWORD PTR _v$[esp+280]
  00c40	23 c8		 and	 ecx, eax
  00c42	0b da		 or	 ebx, edx
  00c44	0b e9		 or	 ebp, ecx
  00c46	03 fb		 add	 edi, ebx
  00c48	13 f5		 adc	 esi, ebp
  00c4a	01 7c 24 2c	 add	 DWORD PTR _v$[esp+252], edi
  00c4e	11 74 24 30	 adc	 DWORD PTR _v$[esp+256], esi
  00c52	83 7c 24 10 00	 cmp	 DWORD PTR _j$[esp+228], 0
  00c57	0f 84 dd 00 00
	00		 je	 $LN16@sha512_com
  00c5d	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR tv2359[esp+228]
  00c64	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR tv2359[esp+232]
  00c6b	8b d9		 mov	 ebx, ecx
  00c6d	8b f8		 mov	 edi, eax
  00c6f	0f ac df 08	 shrd	 edi, ebx, 8
  00c73	8b e8		 mov	 ebp, eax
  00c75	0f ac cd 01	 shrd	 ebp, ecx, 1
  00c79	33 f6		 xor	 esi, esi
  00c7b	0b f7		 or	 esi, edi
  00c7d	8b f8		 mov	 edi, eax
  00c7f	d1 e9		 shr	 ecx, 1
  00c81	8b d0		 mov	 edx, eax
  00c83	c1 eb 08	 shr	 ebx, 8
  00c86	c1 e7 1f	 shl	 edi, 31			; 0000001fH
  00c89	0b f9		 or	 edi, ecx
  00c8b	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR tv2359[esp+232]
  00c92	0f ac c8 07	 shrd	 eax, ecx, 7
  00c96	c1 e2 18	 shl	 edx, 24			; 00000018H
  00c99	0b d3		 or	 edx, ebx
  00c9b	33 db		 xor	 ebx, ebx
  00c9d	0b dd		 or	 ebx, ebp
  00c9f	33 f3		 xor	 esi, ebx
  00ca1	33 f0		 xor	 esi, eax
  00ca3	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR tv2164[esp+228]
  00caa	33 d7		 xor	 edx, edi
  00cac	c1 e9 07	 shr	 ecx, 7
  00caf	33 d1		 xor	 edx, ecx
  00cb1	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv2164[esp+232]
  00cb8	8b d8		 mov	 ebx, eax
  00cba	8b e9		 mov	 ebp, ecx
  00cbc	0f ac eb 13	 shrd	 ebx, ebp, 19
  00cc0	33 ff		 xor	 edi, edi
  00cc2	0b fb		 or	 edi, ebx
  00cc4	8b d9		 mov	 ebx, ecx
  00cc6	89 74 24 54	 mov	 DWORD PTR tv4725[esp+228], esi
  00cca	8b f0		 mov	 esi, eax
  00ccc	0f a4 c1 03	 shld	 ecx, eax, 3
  00cd0	03 c0		 add	 eax, eax
  00cd2	03 c0		 add	 eax, eax
  00cd4	c1 e6 0d	 shl	 esi, 13			; 0000000dH
  00cd7	c1 ed 13	 shr	 ebp, 19			; 00000013H
  00cda	03 c0		 add	 eax, eax
  00cdc	0b f5		 or	 esi, ebp
  00cde	c1 eb 1d	 shr	 ebx, 29			; 0000001dH
  00ce1	0b d8		 or	 ebx, eax
  00ce3	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR tv2164[esp+228]
  00cea	33 ed		 xor	 ebp, ebp
  00cec	0b e9		 or	 ebp, ecx
  00cee	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv2164[esp+232]
  00cf5	0f ac c8 06	 shrd	 eax, ecx, 6
  00cf9	c1 e9 06	 shr	 ecx, 6
  00cfc	33 f5		 xor	 esi, ebp
  00cfe	33 fb		 xor	 edi, ebx
  00d00	33 f8		 xor	 edi, eax
  00d02	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR _ctx$[esp+224]
  00d09	33 f1		 xor	 esi, ecx
  00d0b	8b 4c 24 54	 mov	 ecx, DWORD PTR tv4725[esp+228]
  00d0f	03 cf		 add	 ecx, edi
  00d11	13 d6		 adc	 edx, esi
  00d13	03 4c 24 60	 add	 ecx, DWORD PTR tv2023[esp+228]
  00d17	13 54 24 64	 adc	 edx, DWORD PTR tv2023[esp+232]
  00d1b	03 4c 24 70	 add	 ecx, DWORD PTR tv2295[esp+228]
  00d1f	13 54 24 74	 adc	 edx, DWORD PTR tv2295[esp+232]
  00d23	89 48 78	 mov	 DWORD PTR [eax+120], ecx
  00d26	89 50 7c	 mov	 DWORD PTR [eax+124], edx
  00d29	8b 40 7c	 mov	 eax, DWORD PTR [eax+124]
  00d2c	8b d1		 mov	 edx, ecx
  00d2e	89 44 24 74	 mov	 DWORD PTR tv2295[esp+232], eax
  00d32	8b 44 24 38	 mov	 eax, DWORD PTR _v$[esp+264]
  00d36	89 54 24 70	 mov	 DWORD PTR tv2295[esp+228], edx
$LN16@sha512_com:
  00d3a	8b 54 24 50	 mov	 edx, DWORD PTR _v$[esp+288]
  00d3e	8b 4c 24 4c	 mov	 ecx, DWORD PTR _v$[esp+284]
  00d42	8b ea		 mov	 ebp, edx
  00d44	8b d9		 mov	 ebx, ecx
  00d46	0f a4 dd 17	 shld	 ebp, ebx, 23
  00d4a	c1 e3 17	 shl	 ebx, 23			; 00000017H
  00d4d	8b f2		 mov	 esi, edx
  00d4f	c1 ee 09	 shr	 esi, 9
  00d52	0b f3		 or	 esi, ebx
  00d54	33 ff		 xor	 edi, edi
  00d56	0b fd		 or	 edi, ebp
  00d58	33 ed		 xor	 ebp, ebp
  00d5a	8b d9		 mov	 ebx, ecx
  00d5c	0f ac d1 12	 shrd	 ecx, edx, 18
  00d60	0b e9		 or	 ebp, ecx
  00d62	8b 4c 24 4c	 mov	 ecx, DWORD PTR _v$[esp+284]
  00d66	33 f5		 xor	 esi, ebp
  00d68	8b 6c 24 50	 mov	 ebp, DWORD PTR _v$[esp+288]
  00d6c	c1 e3 0e	 shl	 ebx, 14			; 0000000eH
  00d6f	c1 ea 12	 shr	 edx, 18			; 00000012H
  00d72	0b da		 or	 ebx, edx
  00d74	33 fb		 xor	 edi, ebx
  00d76	8b d1		 mov	 edx, ecx
  00d78	0f ac e9 0e	 shrd	 ecx, ebp, 14
  00d7c	c1 ed 0e	 shr	 ebp, 14			; 0000000eH
  00d7f	33 db		 xor	 ebx, ebx
  00d81	0b d9		 or	 ebx, ecx
  00d83	8b 4c 24 1c	 mov	 ecx, DWORD PTR _v$[esp+236]
  00d87	c1 e2 12	 shl	 edx, 18			; 00000012H
  00d8a	0b d5		 or	 edx, ebp
  00d8c	33 fa		 xor	 edi, edx
  00d8e	8b 54 24 20	 mov	 edx, DWORD PTR _v$[esp+240]
  00d92	33 f3		 xor	 esi, ebx
  00d94	8b d9		 mov	 ebx, ecx
  00d96	33 5c 24 14	 xor	 ebx, DWORD PTR _v$[esp+228]
  00d9a	8b ea		 mov	 ebp, edx
  00d9c	33 6c 24 18	 xor	 ebp, DWORD PTR _v$[esp+232]
  00da0	23 5c 24 4c	 and	 ebx, DWORD PTR _v$[esp+284]
  00da4	23 6c 24 50	 and	 ebp, DWORD PTR _v$[esp+288]
  00da8	33 d9		 xor	 ebx, ecx
  00daa	8b 4c 24 10	 mov	 ecx, DWORD PTR _j$[esp+228]
  00dae	33 ea		 xor	 ebp, edx
  00db0	8b 54 24 28	 mov	 edx, DWORD PTR _v$[esp+248]
  00db4	03 f3		 add	 esi, ebx
  00db6	13 fd		 adc	 edi, ebp
  00db8	03 34 cd 28 00
	00 00		 add	 esi, DWORD PTR _k512[ecx*8+40]
  00dbf	13 3c cd 2c 00
	00 00		 adc	 edi, DWORD PTR _k512[ecx*8+44]
  00dc6	03 74 24 70	 add	 esi, DWORD PTR tv2295[esp+228]
  00dca	8b 4c 24 24	 mov	 ecx, DWORD PTR _v$[esp+244]
  00dce	13 7c 24 74	 adc	 edi, DWORD PTR tv2295[esp+232]
  00dd2	03 ce		 add	 ecx, esi
  00dd4	13 d7		 adc	 edx, edi
  00dd6	01 4c 24 44	 add	 DWORD PTR _v$[esp+276], ecx
  00dda	89 4c 24 24	 mov	 DWORD PTR _v$[esp+244], ecx
  00dde	8b 4c 24 2c	 mov	 ecx, DWORD PTR _v$[esp+252]
  00de2	11 54 24 48	 adc	 DWORD PTR _v$[esp+280], edx
  00de6	89 54 24 28	 mov	 DWORD PTR _v$[esp+248], edx
  00dea	8b 54 24 30	 mov	 edx, DWORD PTR _v$[esp+256]
  00dee	8b d9		 mov	 ebx, ecx
  00df0	8b ea		 mov	 ebp, edx
  00df2	0f ac eb 1c	 shrd	 ebx, ebp, 28
  00df6	33 ff		 xor	 edi, edi
  00df8	0b fb		 or	 edi, ebx
  00dfa	8b f1		 mov	 esi, ecx
  00dfc	8b da		 mov	 ebx, edx
  00dfe	0f a4 ca 1e	 shld	 edx, ecx, 30
  00e02	c1 ed 1c	 shr	 ebp, 28			; 0000001cH
  00e05	c1 e6 04	 shl	 esi, 4
  00e08	0b f5		 or	 esi, ebp
  00e0a	c1 e1 1e	 shl	 ecx, 30			; 0000001eH
  00e0d	c1 eb 02	 shr	 ebx, 2
  00e10	33 ed		 xor	 ebp, ebp
  00e12	0b d9		 or	 ebx, ecx
  00e14	8b 4c 24 30	 mov	 ecx, DWORD PTR _v$[esp+256]
  00e18	0b ea		 or	 ebp, edx
  00e1a	8b d1		 mov	 edx, ecx
  00e1c	33 f5		 xor	 esi, ebp
  00e1e	8b 6c 24 2c	 mov	 ebp, DWORD PTR _v$[esp+252]
  00e22	33 fb		 xor	 edi, ebx
  00e24	c1 ea 07	 shr	 edx, 7
  00e27	33 db		 xor	 ebx, ebx
  00e29	0f a4 e9 19	 shld	 ecx, ebp, 25
  00e2d	c1 e5 19	 shl	 ebp, 25			; 00000019H
  00e30	0b d5		 or	 edx, ebp
  00e32	8b 6c 24 30	 mov	 ebp, DWORD PTR _v$[esp+256]
  00e36	0b d9		 or	 ebx, ecx
  00e38	8b 4c 24 2c	 mov	 ecx, DWORD PTR _v$[esp+252]
  00e3c	33 f3		 xor	 esi, ebx
  00e3e	33 fa		 xor	 edi, edx
  00e40	8b 54 24 34	 mov	 edx, DWORD PTR _v$[esp+260]
  00e44	8b d9		 mov	 ebx, ecx
  00e46	33 da		 xor	 ebx, edx
  00e48	23 5c 24 3c	 and	 ebx, DWORD PTR _v$[esp+268]
  00e4c	23 ca		 and	 ecx, edx
  00e4e	8b 54 24 30	 mov	 edx, DWORD PTR _v$[esp+256]
  00e52	33 e8		 xor	 ebp, eax
  00e54	23 6c 24 40	 and	 ebp, DWORD PTR _v$[esp+272]
  00e58	23 d0		 and	 edx, eax
  00e5a	0b d9		 or	 ebx, ecx
  00e5c	0b ea		 or	 ebp, edx
  00e5e	03 fb		 add	 edi, ebx
  00e60	13 f5		 adc	 esi, ebp
  00e62	01 7c 24 24	 add	 DWORD PTR _v$[esp+244], edi
  00e66	11 74 24 28	 adc	 DWORD PTR _v$[esp+248], esi

; 522  :         v_cycle( 6, j); v_cycle( 7, j);

  00e6a	83 7c 24 10 00	 cmp	 DWORD PTR _j$[esp+228], 0
  00e6f	0f 84 ec 00 00
	00		 je	 $LN18@sha512_com
  00e75	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR tv2419[esp+228]
  00e7c	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv2419[esp+232]
  00e83	8b d9		 mov	 ebx, ecx
  00e85	8b f8		 mov	 edi, eax
  00e87	0f ac df 08	 shrd	 edi, ebx, 8
  00e8b	8b e8		 mov	 ebp, eax
  00e8d	0f ac cd 01	 shrd	 ebp, ecx, 1
  00e91	33 f6		 xor	 esi, esi
  00e93	0b f7		 or	 esi, edi
  00e95	8b f8		 mov	 edi, eax
  00e97	d1 e9		 shr	 ecx, 1
  00e99	8b d0		 mov	 edx, eax
  00e9b	c1 eb 08	 shr	 ebx, 8
  00e9e	c1 e7 1f	 shl	 edi, 31			; 0000001fH
  00ea1	0b f9		 or	 edi, ecx
  00ea3	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv2419[esp+232]
  00eaa	0f ac c8 07	 shrd	 eax, ecx, 7
  00eae	c1 e2 18	 shl	 edx, 24			; 00000018H
  00eb1	0b d3		 or	 edx, ebx
  00eb3	33 db		 xor	 ebx, ebx
  00eb5	0b dd		 or	 ebx, ebp
  00eb7	33 f3		 xor	 esi, ebx
  00eb9	33 f0		 xor	 esi, eax
  00ebb	8b 44 24 58	 mov	 eax, DWORD PTR tv2230[esp+228]
  00ebf	33 d7		 xor	 edx, edi
  00ec1	c1 e9 07	 shr	 ecx, 7
  00ec4	33 d1		 xor	 edx, ecx
  00ec6	8b 4c 24 5c	 mov	 ecx, DWORD PTR tv2230[esp+232]
  00eca	8b d8		 mov	 ebx, eax
  00ecc	8b e9		 mov	 ebp, ecx
  00ece	0f ac eb 13	 shrd	 ebx, ebp, 19
  00ed2	33 ff		 xor	 edi, edi
  00ed4	0b fb		 or	 edi, ebx
  00ed6	8b d9		 mov	 ebx, ecx
  00ed8	89 74 24 54	 mov	 DWORD PTR tv4722[esp+228], esi
  00edc	8b f0		 mov	 esi, eax
  00ede	0f a4 c1 03	 shld	 ecx, eax, 3
  00ee2	03 c0		 add	 eax, eax
  00ee4	03 c0		 add	 eax, eax
  00ee6	c1 e6 0d	 shl	 esi, 13			; 0000000dH
  00ee9	c1 ed 13	 shr	 ebp, 19			; 00000013H
  00eec	03 c0		 add	 eax, eax
  00eee	0b f5		 or	 esi, ebp
  00ef0	c1 eb 1d	 shr	 ebx, 29			; 0000001dH
  00ef3	0b d8		 or	 ebx, eax
  00ef5	8b 44 24 58	 mov	 eax, DWORD PTR tv2230[esp+228]
  00ef9	33 ed		 xor	 ebp, ebp
  00efb	0b e9		 or	 ebp, ecx
  00efd	8b 4c 24 5c	 mov	 ecx, DWORD PTR tv2230[esp+232]
  00f01	0f ac c8 06	 shrd	 eax, ecx, 6
  00f05	c1 e9 06	 shr	 ecx, 6
  00f08	33 f5		 xor	 esi, ebp
  00f0a	33 fb		 xor	 edi, ebx
  00f0c	33 f8		 xor	 edi, eax
  00f0e	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR _ctx$[esp+224]
  00f15	33 f1		 xor	 esi, ecx
  00f17	8b 4c 24 54	 mov	 ecx, DWORD PTR tv4722[esp+228]
  00f1b	03 cf		 add	 ecx, edi
  00f1d	13 d6		 adc	 edx, esi
  00f1f	03 8c 24 c0 00
	00 00		 add	 ecx, DWORD PTR tv2359[esp+228]
  00f26	13 94 24 c4 00
	00 00		 adc	 edx, DWORD PTR tv2359[esp+232]
  00f2d	03 8c 24 98 00
	00 00		 add	 ecx, DWORD PTR tv2095[esp+228]
  00f34	13 94 24 9c 00
	00 00		 adc	 edx, DWORD PTR tv2095[esp+232]
  00f3b	89 88 80 00 00
	00		 mov	 DWORD PTR [eax+128], ecx
  00f41	89 90 84 00 00
	00		 mov	 DWORD PTR [eax+132], edx
  00f47	8b 80 84 00 00
	00		 mov	 eax, DWORD PTR [eax+132]
  00f4d	8b d1		 mov	 edx, ecx
  00f4f	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv2359[esp+232], eax
  00f56	8b 44 24 38	 mov	 eax, DWORD PTR _v$[esp+264]
  00f5a	89 94 24 c0 00
	00 00		 mov	 DWORD PTR tv2359[esp+228], edx
$LN18@sha512_com:
  00f61	8b 54 24 48	 mov	 edx, DWORD PTR _v$[esp+280]
  00f65	8b 4c 24 44	 mov	 ecx, DWORD PTR _v$[esp+276]
  00f69	8b ea		 mov	 ebp, edx
  00f6b	8b d9		 mov	 ebx, ecx
  00f6d	0f a4 dd 17	 shld	 ebp, ebx, 23
  00f71	c1 e3 17	 shl	 ebx, 23			; 00000017H
  00f74	8b f2		 mov	 esi, edx
  00f76	c1 ee 09	 shr	 esi, 9
  00f79	0b f3		 or	 esi, ebx
  00f7b	33 ff		 xor	 edi, edi
  00f7d	0b fd		 or	 edi, ebp
  00f7f	33 ed		 xor	 ebp, ebp
  00f81	8b d9		 mov	 ebx, ecx
  00f83	0f ac d1 12	 shrd	 ecx, edx, 18
  00f87	0b e9		 or	 ebp, ecx
  00f89	8b 4c 24 44	 mov	 ecx, DWORD PTR _v$[esp+276]
  00f8d	33 f5		 xor	 esi, ebp
  00f8f	8b 6c 24 48	 mov	 ebp, DWORD PTR _v$[esp+280]
  00f93	c1 e3 0e	 shl	 ebx, 14			; 0000000eH
  00f96	c1 ea 12	 shr	 edx, 18			; 00000012H
  00f99	0b da		 or	 ebx, edx
  00f9b	33 fb		 xor	 edi, ebx
  00f9d	8b d1		 mov	 edx, ecx
  00f9f	0f ac e9 0e	 shrd	 ecx, ebp, 14
  00fa3	c1 ed 0e	 shr	 ebp, 14			; 0000000eH
  00fa6	33 db		 xor	 ebx, ebx
  00fa8	0b d9		 or	 ebx, ecx
  00faa	8b 4c 24 14	 mov	 ecx, DWORD PTR _v$[esp+228]
  00fae	c1 e2 12	 shl	 edx, 18			; 00000012H
  00fb1	0b d5		 or	 edx, ebp
  00fb3	33 fa		 xor	 edi, edx
  00fb5	8b 54 24 18	 mov	 edx, DWORD PTR _v$[esp+232]
  00fb9	33 f3		 xor	 esi, ebx
  00fbb	8b d9		 mov	 ebx, ecx
  00fbd	33 5c 24 4c	 xor	 ebx, DWORD PTR _v$[esp+284]
  00fc1	8b ea		 mov	 ebp, edx
  00fc3	33 6c 24 50	 xor	 ebp, DWORD PTR _v$[esp+288]
  00fc7	23 5c 24 44	 and	 ebx, DWORD PTR _v$[esp+276]
  00fcb	23 6c 24 48	 and	 ebp, DWORD PTR _v$[esp+280]
  00fcf	33 d9		 xor	 ebx, ecx
  00fd1	8b 4c 24 10	 mov	 ecx, DWORD PTR _j$[esp+228]
  00fd5	33 ea		 xor	 ebp, edx
  00fd7	8b 54 24 20	 mov	 edx, DWORD PTR _v$[esp+240]
  00fdb	03 f3		 add	 esi, ebx
  00fdd	13 fd		 adc	 edi, ebp
  00fdf	03 34 cd 30 00
	00 00		 add	 esi, DWORD PTR _k512[ecx*8+48]
  00fe6	13 3c cd 34 00
	00 00		 adc	 edi, DWORD PTR _k512[ecx*8+52]
  00fed	03 b4 24 c0 00
	00 00		 add	 esi, DWORD PTR tv2359[esp+228]
  00ff4	8b 4c 24 1c	 mov	 ecx, DWORD PTR _v$[esp+236]
  00ff8	13 bc 24 c4 00
	00 00		 adc	 edi, DWORD PTR tv2359[esp+232]
  00fff	03 ce		 add	 ecx, esi
  01001	13 d7		 adc	 edx, edi
  01003	01 4c 24 3c	 add	 DWORD PTR _v$[esp+268], ecx
  01007	89 4c 24 1c	 mov	 DWORD PTR _v$[esp+236], ecx
  0100b	8b 4c 24 24	 mov	 ecx, DWORD PTR _v$[esp+244]
  0100f	11 54 24 40	 adc	 DWORD PTR _v$[esp+272], edx
  01013	89 54 24 20	 mov	 DWORD PTR _v$[esp+240], edx
  01017	8b 54 24 28	 mov	 edx, DWORD PTR _v$[esp+248]
  0101b	8b d9		 mov	 ebx, ecx
  0101d	8b ea		 mov	 ebp, edx
  0101f	0f ac eb 1c	 shrd	 ebx, ebp, 28
  01023	33 ff		 xor	 edi, edi
  01025	0b fb		 or	 edi, ebx
  01027	8b f1		 mov	 esi, ecx
  01029	8b da		 mov	 ebx, edx
  0102b	0f a4 ca 1e	 shld	 edx, ecx, 30
  0102f	c1 ed 1c	 shr	 ebp, 28			; 0000001cH
  01032	c1 e6 04	 shl	 esi, 4
  01035	0b f5		 or	 esi, ebp
  01037	c1 e1 1e	 shl	 ecx, 30			; 0000001eH
  0103a	c1 eb 02	 shr	 ebx, 2
  0103d	33 ed		 xor	 ebp, ebp
  0103f	0b d9		 or	 ebx, ecx
  01041	8b 4c 24 28	 mov	 ecx, DWORD PTR _v$[esp+248]
  01045	0b ea		 or	 ebp, edx
  01047	8b d1		 mov	 edx, ecx
  01049	33 f5		 xor	 esi, ebp
  0104b	8b 6c 24 24	 mov	 ebp, DWORD PTR _v$[esp+244]
  0104f	33 fb		 xor	 edi, ebx
  01051	c1 ea 07	 shr	 edx, 7
  01054	33 db		 xor	 ebx, ebx
  01056	0f a4 e9 19	 shld	 ecx, ebp, 25
  0105a	c1 e5 19	 shl	 ebp, 25			; 00000019H
  0105d	0b d5		 or	 edx, ebp
  0105f	0b d9		 or	 ebx, ecx
  01061	8b 4c 24 24	 mov	 ecx, DWORD PTR _v$[esp+244]
  01065	33 f3		 xor	 esi, ebx
  01067	33 fa		 xor	 edi, edx
  01069	8b 54 24 28	 mov	 edx, DWORD PTR _v$[esp+248]
  0106d	8b d9		 mov	 ebx, ecx
  0106f	33 5c 24 2c	 xor	 ebx, DWORD PTR _v$[esp+252]
  01073	23 4c 24 2c	 and	 ecx, DWORD PTR _v$[esp+252]
  01077	23 5c 24 34	 and	 ebx, DWORD PTR _v$[esp+260]
  0107b	8b ea		 mov	 ebp, edx
  0107d	33 6c 24 30	 xor	 ebp, DWORD PTR _v$[esp+256]
  01081	23 54 24 30	 and	 edx, DWORD PTR _v$[esp+256]
  01085	23 e8		 and	 ebp, eax
  01087	8b 44 24 20	 mov	 eax, DWORD PTR _v$[esp+240]
  0108b	0b d9		 or	 ebx, ecx
  0108d	0b ea		 or	 ebp, edx
  0108f	03 fb		 add	 edi, ebx
  01091	13 f5		 adc	 esi, ebp
  01093	01 7c 24 1c	 add	 DWORD PTR _v$[esp+236], edi
  01097	13 c6		 adc	 eax, esi
  01099	83 7c 24 10 00	 cmp	 DWORD PTR _j$[esp+228], 0
  0109e	89 44 24 20	 mov	 DWORD PTR _v$[esp+240], eax
  010a2	0f 84 e6 00 00
	00		 je	 $LN20@sha512_com
  010a8	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv2479[esp+228]
  010af	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv2479[esp+232]
  010b6	8b d9		 mov	 ebx, ecx
  010b8	8b f8		 mov	 edi, eax
  010ba	0f ac df 08	 shrd	 edi, ebx, 8
  010be	8b e8		 mov	 ebp, eax
  010c0	0f ac cd 01	 shrd	 ebp, ecx, 1
  010c4	33 f6		 xor	 esi, esi
  010c6	0b f7		 or	 esi, edi
  010c8	8b f8		 mov	 edi, eax
  010ca	d1 e9		 shr	 ecx, 1
  010cc	8b d0		 mov	 edx, eax
  010ce	c1 eb 08	 shr	 ebx, 8
  010d1	c1 e7 1f	 shl	 edi, 31			; 0000001fH
  010d4	0b f9		 or	 edi, ecx
  010d6	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv2479[esp+232]
  010dd	0f ac c8 07	 shrd	 eax, ecx, 7
  010e1	c1 e2 18	 shl	 edx, 24			; 00000018H
  010e4	0b d3		 or	 edx, ebx
  010e6	33 db		 xor	 ebx, ebx
  010e8	0b dd		 or	 ebx, ebp
  010ea	33 f3		 xor	 esi, ebx
  010ec	33 f0		 xor	 esi, eax
  010ee	8b 44 24 70	 mov	 eax, DWORD PTR tv2295[esp+228]
  010f2	33 d7		 xor	 edx, edi
  010f4	c1 e9 07	 shr	 ecx, 7
  010f7	33 d1		 xor	 edx, ecx
  010f9	8b 4c 24 74	 mov	 ecx, DWORD PTR tv2295[esp+232]
  010fd	8b d8		 mov	 ebx, eax
  010ff	8b e9		 mov	 ebp, ecx
  01101	0f ac eb 13	 shrd	 ebx, ebp, 19
  01105	33 ff		 xor	 edi, edi
  01107	0b fb		 or	 edi, ebx
  01109	8b d9		 mov	 ebx, ecx
  0110b	89 74 24 54	 mov	 DWORD PTR tv4719[esp+228], esi
  0110f	8b f0		 mov	 esi, eax
  01111	0f a4 c1 03	 shld	 ecx, eax, 3
  01115	03 c0		 add	 eax, eax
  01117	03 c0		 add	 eax, eax
  01119	c1 e6 0d	 shl	 esi, 13			; 0000000dH
  0111c	c1 ed 13	 shr	 ebp, 19			; 00000013H
  0111f	03 c0		 add	 eax, eax
  01121	0b f5		 or	 esi, ebp
  01123	c1 eb 1d	 shr	 ebx, 29			; 0000001dH
  01126	0b d8		 or	 ebx, eax
  01128	8b 44 24 70	 mov	 eax, DWORD PTR tv2295[esp+228]
  0112c	33 ed		 xor	 ebp, ebp
  0112e	0b e9		 or	 ebp, ecx
  01130	8b 4c 24 74	 mov	 ecx, DWORD PTR tv2295[esp+232]
  01134	0f ac c8 06	 shrd	 eax, ecx, 6
  01138	c1 e9 06	 shr	 ecx, 6
  0113b	33 f5		 xor	 esi, ebp
  0113d	33 fb		 xor	 edi, ebx
  0113f	33 f8		 xor	 edi, eax
  01141	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR _ctx$[esp+224]
  01148	33 f1		 xor	 esi, ecx
  0114a	8b 4c 24 54	 mov	 ecx, DWORD PTR tv4719[esp+228]
  0114e	03 cf		 add	 ecx, edi
  01150	13 d6		 adc	 edx, esi
  01152	03 8c 24 80 00
	00 00		 add	 ecx, DWORD PTR tv2419[esp+228]
  01159	13 94 24 84 00
	00 00		 adc	 edx, DWORD PTR tv2419[esp+232]
  01160	03 4c 24 68	 add	 ecx, DWORD PTR tv2051[esp+228]
  01164	13 54 24 6c	 adc	 edx, DWORD PTR tv2051[esp+232]
  01168	89 88 88 00 00
	00		 mov	 DWORD PTR [eax+136], ecx
  0116e	89 90 8c 00 00
	00		 mov	 DWORD PTR [eax+140], edx
  01174	8b 80 8c 00 00
	00		 mov	 eax, DWORD PTR [eax+140]
  0117a	8b d1		 mov	 edx, ecx
  0117c	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv2419[esp+232], eax
  01183	8b 44 24 20	 mov	 eax, DWORD PTR _v$[esp+240]
  01187	89 94 24 80 00
	00 00		 mov	 DWORD PTR tv2419[esp+228], edx
$LN20@sha512_com:
  0118e	8b 54 24 40	 mov	 edx, DWORD PTR _v$[esp+272]
  01192	8b 4c 24 3c	 mov	 ecx, DWORD PTR _v$[esp+268]
  01196	8b ea		 mov	 ebp, edx
  01198	8b d9		 mov	 ebx, ecx
  0119a	0f a4 dd 17	 shld	 ebp, ebx, 23
  0119e	c1 e3 17	 shl	 ebx, 23			; 00000017H
  011a1	8b f2		 mov	 esi, edx
  011a3	c1 ee 09	 shr	 esi, 9
  011a6	0b f3		 or	 esi, ebx
  011a8	33 ff		 xor	 edi, edi
  011aa	0b fd		 or	 edi, ebp
  011ac	8b d9		 mov	 ebx, ecx
  011ae	0f ac d1 12	 shrd	 ecx, edx, 18
  011b2	33 ed		 xor	 ebp, ebp
  011b4	0b e9		 or	 ebp, ecx
  011b6	8b 4c 24 3c	 mov	 ecx, DWORD PTR _v$[esp+268]
  011ba	33 f5		 xor	 esi, ebp
  011bc	8b 6c 24 40	 mov	 ebp, DWORD PTR _v$[esp+272]
  011c0	c1 e3 0e	 shl	 ebx, 14			; 0000000eH
  011c3	c1 ea 12	 shr	 edx, 18			; 00000012H
  011c6	0b da		 or	 ebx, edx
  011c8	33 fb		 xor	 edi, ebx
  011ca	8b d1		 mov	 edx, ecx
  011cc	0f ac e9 0e	 shrd	 ecx, ebp, 14
  011d0	33 db		 xor	 ebx, ebx
  011d2	0b d9		 or	 ebx, ecx
  011d4	8b 4c 24 4c	 mov	 ecx, DWORD PTR _v$[esp+284]
  011d8	c1 e2 12	 shl	 edx, 18			; 00000012H
  011db	33 f3		 xor	 esi, ebx
  011dd	c1 ed 0e	 shr	 ebp, 14			; 0000000eH
  011e0	0b d5		 or	 edx, ebp
  011e2	33 fa		 xor	 edi, edx
  011e4	8b 54 24 50	 mov	 edx, DWORD PTR _v$[esp+288]
  011e8	8b d9		 mov	 ebx, ecx
  011ea	33 5c 24 44	 xor	 ebx, DWORD PTR _v$[esp+276]
  011ee	8b ea		 mov	 ebp, edx
  011f0	33 6c 24 48	 xor	 ebp, DWORD PTR _v$[esp+280]
  011f4	23 5c 24 3c	 and	 ebx, DWORD PTR _v$[esp+268]
  011f8	23 6c 24 40	 and	 ebp, DWORD PTR _v$[esp+272]
  011fc	33 d9		 xor	 ebx, ecx
  011fe	8b 4c 24 10	 mov	 ecx, DWORD PTR _j$[esp+228]
  01202	33 ea		 xor	 ebp, edx
  01204	8b 54 24 18	 mov	 edx, DWORD PTR _v$[esp+232]
  01208	03 f3		 add	 esi, ebx
  0120a	13 fd		 adc	 edi, ebp
  0120c	03 34 cd 38 00
	00 00		 add	 esi, DWORD PTR _k512[ecx*8+56]
  01213	8b d8		 mov	 ebx, eax
  01215	13 3c cd 3c 00
	00 00		 adc	 edi, DWORD PTR _k512[ecx*8+60]
  0121c	03 b4 24 80 00
	00 00		 add	 esi, DWORD PTR tv2419[esp+228]
  01223	8b 4c 24 14	 mov	 ecx, DWORD PTR _v$[esp+228]
  01227	13 bc 24 84 00
	00 00		 adc	 edi, DWORD PTR tv2419[esp+232]
  0122e	03 ce		 add	 ecx, esi
  01230	13 d7		 adc	 edx, edi
  01232	01 4c 24 34	 add	 DWORD PTR _v$[esp+260], ecx
  01236	89 4c 24 14	 mov	 DWORD PTR _v$[esp+228], ecx
  0123a	8b 4c 24 1c	 mov	 ecx, DWORD PTR _v$[esp+236]
  0123e	11 54 24 38	 adc	 DWORD PTR _v$[esp+264], edx
  01242	89 54 24 18	 mov	 DWORD PTR _v$[esp+232], edx
  01246	8b d1		 mov	 edx, ecx
  01248	0f ac da 1c	 shrd	 edx, ebx, 28
  0124c	8b f1		 mov	 esi, ecx
  0124e	33 ff		 xor	 edi, edi
  01250	0b fa		 or	 edi, edx
  01252	8b e8		 mov	 ebp, eax
  01254	0f a4 cd 1e	 shld	 ebp, ecx, 30
  01258	c1 eb 1c	 shr	 ebx, 28			; 0000001cH
  0125b	c1 e6 04	 shl	 esi, 4
  0125e	0b f3		 or	 esi, ebx
  01260	c1 e1 1e	 shl	 ecx, 30			; 0000001eH
  01263	8b d0		 mov	 edx, eax
  01265	c1 ea 02	 shr	 edx, 2
  01268	33 db		 xor	 ebx, ebx
  0126a	0b d1		 or	 edx, ecx
  0126c	0b dd		 or	 ebx, ebp
  0126e	8b c8		 mov	 ecx, eax
  01270	33 f3		 xor	 esi, ebx
  01272	8b 5c 24 1c	 mov	 ebx, DWORD PTR _v$[esp+236]
  01276	33 fa		 xor	 edi, edx
  01278	c1 e9 07	 shr	 ecx, 7
  0127b	33 d2		 xor	 edx, edx
  0127d	8b e8		 mov	 ebp, eax
  0127f	0f a4 dd 19	 shld	 ebp, ebx, 25
  01283	0b d5		 or	 edx, ebp
  01285	8b 6c 24 28	 mov	 ebp, DWORD PTR _v$[esp+248]
  01289	c1 e3 19	 shl	 ebx, 25			; 00000019H
  0128c	0b cb		 or	 ecx, ebx
  0128e	33 f2		 xor	 esi, edx
  01290	8b 54 24 24	 mov	 edx, DWORD PTR _v$[esp+244]
  01294	33 f9		 xor	 edi, ecx
  01296	8b 4c 24 1c	 mov	 ecx, DWORD PTR _v$[esp+236]
  0129a	8b da		 mov	 ebx, edx
  0129c	33 d9		 xor	 ebx, ecx
  0129e	23 5c 24 2c	 and	 ebx, DWORD PTR _v$[esp+252]
  012a2	23 d1		 and	 edx, ecx
  012a4	8b 4c 24 28	 mov	 ecx, DWORD PTR _v$[esp+248]
  012a8	33 e8		 xor	 ebp, eax
  012aa	23 6c 24 30	 and	 ebp, DWORD PTR _v$[esp+256]
  012ae	23 c8		 and	 ecx, eax
  012b0	0b da		 or	 ebx, edx
  012b2	0b e9		 or	 ebp, ecx
  012b4	03 fb		 add	 edi, ebx
  012b6	13 f5		 adc	 esi, ebp
  012b8	01 7c 24 14	 add	 DWORD PTR _v$[esp+228], edi
  012bc	11 74 24 18	 adc	 DWORD PTR _v$[esp+232], esi

; 523  :         v_cycle( 8, j); v_cycle( 9, j);

  012c0	83 7c 24 10 00	 cmp	 DWORD PTR _j$[esp+228], 0
  012c5	0f 84 ec 00 00
	00		 je	 $LN22@sha512_com
  012cb	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR tv2359[esp+228]
  012d2	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR tv2359[esp+232]
  012d9	8b d9		 mov	 ebx, ecx
  012db	8b f8		 mov	 edi, eax
  012dd	0f ac df 13	 shrd	 edi, ebx, 19
  012e1	33 f6		 xor	 esi, esi
  012e3	0b f7		 or	 esi, edi
  012e5	8b f9		 mov	 edi, ecx
  012e7	c1 eb 13	 shr	 ebx, 19			; 00000013H
  012ea	8b d0		 mov	 edx, eax
  012ec	8b e8		 mov	 ebp, eax
  012ee	0f a4 e9 03	 shld	 ecx, ebp, 3
  012f2	c1 e2 0d	 shl	 edx, 13			; 0000000dH
  012f5	0b d3		 or	 edx, ebx
  012f7	33 db		 xor	 ebx, ebx
  012f9	0b d9		 or	 ebx, ecx
  012fb	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR tv2359[esp+232]
  01302	0f ac c8 06	 shrd	 eax, ecx, 6
  01306	03 ed		 add	 ebp, ebp
  01308	03 ed		 add	 ebp, ebp
  0130a	03 ed		 add	 ebp, ebp
  0130c	c1 ef 1d	 shr	 edi, 29			; 0000001dH
  0130f	0b fd		 or	 edi, ebp
  01311	33 f7		 xor	 esi, edi
  01313	33 f0		 xor	 esi, eax
  01315	8b 44 24 78	 mov	 eax, DWORD PTR tv2048[esp+228]
  01319	33 d3		 xor	 edx, ebx
  0131b	c1 e9 06	 shr	 ecx, 6
  0131e	33 d1		 xor	 edx, ecx
  01320	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv2048[esp+232]
  01324	8b e9		 mov	 ebp, ecx
  01326	8b d8		 mov	 ebx, eax
  01328	0f ac eb 08	 shrd	 ebx, ebp, 8
  0132c	33 ff		 xor	 edi, edi
  0132e	0b fb		 or	 edi, ebx
  01330	89 74 24 54	 mov	 DWORD PTR tv4716[esp+228], esi
  01334	8b f0		 mov	 esi, eax
  01336	8b d8		 mov	 ebx, eax
  01338	0f ac c8 01	 shrd	 eax, ecx, 1
  0133c	c1 e6 18	 shl	 esi, 24			; 00000018H
  0133f	c1 ed 08	 shr	 ebp, 8
  01342	0b f5		 or	 esi, ebp
  01344	d1 e9		 shr	 ecx, 1
  01346	33 ed		 xor	 ebp, ebp
  01348	0b e8		 or	 ebp, eax
  0134a	8b 44 24 78	 mov	 eax, DWORD PTR tv2048[esp+228]
  0134e	c1 e3 1f	 shl	 ebx, 31			; 0000001fH
  01351	0b d9		 or	 ebx, ecx
  01353	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv2048[esp+232]
  01357	0f ac c8 07	 shrd	 eax, ecx, 7
  0135b	c1 e9 07	 shr	 ecx, 7
  0135e	33 f3		 xor	 esi, ebx
  01360	33 fd		 xor	 edi, ebp
  01362	33 f8		 xor	 edi, eax
  01364	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR _ctx$[esp+224]
  0136b	33 f1		 xor	 esi, ecx
  0136d	8b 4c 24 54	 mov	 ecx, DWORD PTR tv4716[esp+228]
  01371	03 cf		 add	 ecx, edi
  01373	13 d6		 adc	 edx, esi
  01375	03 8c 24 b0 00
	00 00		 add	 ecx, DWORD PTR tv2035[esp+228]
  0137c	13 94 24 b4 00
	00 00		 adc	 edx, DWORD PTR tv2035[esp+232]
  01383	03 8c 24 88 00
	00 00		 add	 ecx, DWORD PTR tv2479[esp+228]
  0138a	13 94 24 8c 00
	00 00		 adc	 edx, DWORD PTR tv2479[esp+232]
  01391	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx
  01397	89 90 94 00 00
	00		 mov	 DWORD PTR [eax+148], edx
  0139d	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [eax+148]
  013a3	8b d1		 mov	 edx, ecx
  013a5	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv2479[esp+232], eax
  013ac	8b 44 24 20	 mov	 eax, DWORD PTR _v$[esp+240]
  013b0	89 94 24 88 00
	00 00		 mov	 DWORD PTR tv2479[esp+228], edx
$LN22@sha512_com:
  013b7	8b 54 24 38	 mov	 edx, DWORD PTR _v$[esp+264]
  013bb	8b 4c 24 34	 mov	 ecx, DWORD PTR _v$[esp+260]
  013bf	8b ea		 mov	 ebp, edx
  013c1	8b d9		 mov	 ebx, ecx
  013c3	0f a4 dd 17	 shld	 ebp, ebx, 23
  013c7	c1 e3 17	 shl	 ebx, 23			; 00000017H
  013ca	8b f2		 mov	 esi, edx
  013cc	c1 ee 09	 shr	 esi, 9
  013cf	0b f3		 or	 esi, ebx
  013d1	33 ff		 xor	 edi, edi
  013d3	0b fd		 or	 edi, ebp
  013d5	33 ed		 xor	 ebp, ebp
  013d7	8b d9		 mov	 ebx, ecx
  013d9	0f ac d1 12	 shrd	 ecx, edx, 18
  013dd	0b e9		 or	 ebp, ecx
  013df	8b 4c 24 34	 mov	 ecx, DWORD PTR _v$[esp+260]
  013e3	33 f5		 xor	 esi, ebp
  013e5	8b 6c 24 38	 mov	 ebp, DWORD PTR _v$[esp+264]
  013e9	c1 e3 0e	 shl	 ebx, 14			; 0000000eH
  013ec	c1 ea 12	 shr	 edx, 18			; 00000012H
  013ef	0b da		 or	 ebx, edx
  013f1	33 fb		 xor	 edi, ebx
  013f3	33 db		 xor	 ebx, ebx
  013f5	8b d1		 mov	 edx, ecx
  013f7	0f ac e9 0e	 shrd	 ecx, ebp, 14
  013fb	0b d9		 or	 ebx, ecx
  013fd	8b 4c 24 44	 mov	 ecx, DWORD PTR _v$[esp+276]
  01401	c1 ed 0e	 shr	 ebp, 14			; 0000000eH
  01404	33 f3		 xor	 esi, ebx
  01406	8b 5c 24 3c	 mov	 ebx, DWORD PTR _v$[esp+268]
  0140a	c1 e2 12	 shl	 edx, 18			; 00000012H
  0140d	0b d5		 or	 edx, ebp
  0140f	8b 6c 24 40	 mov	 ebp, DWORD PTR _v$[esp+272]
  01413	33 fa		 xor	 edi, edx
  01415	8b 54 24 48	 mov	 edx, DWORD PTR _v$[esp+280]
  01419	33 d9		 xor	 ebx, ecx
  0141b	23 5c 24 34	 and	 ebx, DWORD PTR _v$[esp+260]
  0141f	33 ea		 xor	 ebp, edx
  01421	23 6c 24 38	 and	 ebp, DWORD PTR _v$[esp+264]
  01425	33 d9		 xor	 ebx, ecx
  01427	8b 4c 24 10	 mov	 ecx, DWORD PTR _j$[esp+228]
  0142b	33 ea		 xor	 ebp, edx
  0142d	8b 54 24 50	 mov	 edx, DWORD PTR _v$[esp+288]
  01431	03 f3		 add	 esi, ebx
  01433	13 fd		 adc	 edi, ebp
  01435	03 34 cd 40 00
	00 00		 add	 esi, DWORD PTR _k512[ecx*8+64]
  0143c	13 3c cd 44 00
	00 00		 adc	 edi, DWORD PTR _k512[ecx*8+68]
  01443	03 b4 24 88 00
	00 00		 add	 esi, DWORD PTR tv2479[esp+228]
  0144a	8b 4c 24 4c	 mov	 ecx, DWORD PTR _v$[esp+284]
  0144e	13 bc 24 8c 00
	00 00		 adc	 edi, DWORD PTR tv2479[esp+232]
  01455	03 ce		 add	 ecx, esi
  01457	13 d7		 adc	 edx, edi
  01459	01 4c 24 2c	 add	 DWORD PTR _v$[esp+252], ecx
  0145d	89 4c 24 4c	 mov	 DWORD PTR _v$[esp+284], ecx
  01461	8b 4c 24 14	 mov	 ecx, DWORD PTR _v$[esp+228]
  01465	11 54 24 30	 adc	 DWORD PTR _v$[esp+256], edx
  01469	89 54 24 50	 mov	 DWORD PTR _v$[esp+288], edx
  0146d	8b 54 24 18	 mov	 edx, DWORD PTR _v$[esp+232]
  01471	8b d9		 mov	 ebx, ecx
  01473	8b ea		 mov	 ebp, edx
  01475	0f ac eb 1c	 shrd	 ebx, ebp, 28
  01479	33 ff		 xor	 edi, edi
  0147b	0b fb		 or	 edi, ebx
  0147d	8b f1		 mov	 esi, ecx
  0147f	8b da		 mov	 ebx, edx
  01481	0f a4 ca 1e	 shld	 edx, ecx, 30
  01485	c1 ed 1c	 shr	 ebp, 28			; 0000001cH
  01488	c1 e6 04	 shl	 esi, 4
  0148b	0b f5		 or	 esi, ebp
  0148d	c1 e1 1e	 shl	 ecx, 30			; 0000001eH
  01490	c1 eb 02	 shr	 ebx, 2
  01493	33 ed		 xor	 ebp, ebp
  01495	0b d9		 or	 ebx, ecx
  01497	8b 4c 24 18	 mov	 ecx, DWORD PTR _v$[esp+232]
  0149b	0b ea		 or	 ebp, edx
  0149d	8b d1		 mov	 edx, ecx
  0149f	33 f5		 xor	 esi, ebp
  014a1	8b 6c 24 14	 mov	 ebp, DWORD PTR _v$[esp+228]
  014a5	33 fb		 xor	 edi, ebx
  014a7	c1 ea 07	 shr	 edx, 7
  014aa	33 db		 xor	 ebx, ebx
  014ac	0f a4 e9 19	 shld	 ecx, ebp, 25
  014b0	c1 e5 19	 shl	 ebp, 25			; 00000019H
  014b3	0b d5		 or	 edx, ebp
  014b5	0b d9		 or	 ebx, ecx
  014b7	8b 4c 24 14	 mov	 ecx, DWORD PTR _v$[esp+228]
  014bb	33 f3		 xor	 esi, ebx
  014bd	33 fa		 xor	 edi, edx
  014bf	8b 54 24 1c	 mov	 edx, DWORD PTR _v$[esp+236]
  014c3	8b e8		 mov	 ebp, eax
  014c5	33 6c 24 18	 xor	 ebp, DWORD PTR _v$[esp+232]
  014c9	23 44 24 18	 and	 eax, DWORD PTR _v$[esp+232]
  014cd	23 6c 24 28	 and	 ebp, DWORD PTR _v$[esp+248]
  014d1	8b da		 mov	 ebx, edx
  014d3	33 d9		 xor	 ebx, ecx
  014d5	23 5c 24 24	 and	 ebx, DWORD PTR _v$[esp+244]
  014d9	23 d1		 and	 edx, ecx
  014db	0b e8		 or	 ebp, eax
  014dd	8b 44 24 50	 mov	 eax, DWORD PTR _v$[esp+288]
  014e1	0b da		 or	 ebx, edx
  014e3	03 fb		 add	 edi, ebx
  014e5	13 f5		 adc	 esi, ebp
  014e7	01 7c 24 4c	 add	 DWORD PTR _v$[esp+284], edi
  014eb	13 c6		 adc	 eax, esi
  014ed	83 7c 24 10 00	 cmp	 DWORD PTR _j$[esp+228], 0
  014f2	89 44 24 50	 mov	 DWORD PTR _v$[esp+288], eax
  014f6	0f 84 ec 00 00
	00		 je	 $LN24@sha512_com
  014fc	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR tv2120[esp+228]
  01503	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR tv2120[esp+232]
  0150a	8b d9		 mov	 ebx, ecx
  0150c	8b f8		 mov	 edi, eax
  0150e	0f ac df 08	 shrd	 edi, ebx, 8
  01512	8b e8		 mov	 ebp, eax
  01514	0f ac cd 01	 shrd	 ebp, ecx, 1
  01518	33 f6		 xor	 esi, esi
  0151a	0b f7		 or	 esi, edi
  0151c	8b f8		 mov	 edi, eax
  0151e	d1 e9		 shr	 ecx, 1
  01520	8b d0		 mov	 edx, eax
  01522	c1 eb 08	 shr	 ebx, 8
  01525	c1 e7 1f	 shl	 edi, 31			; 0000001fH
  01528	0b f9		 or	 edi, ecx
  0152a	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR tv2120[esp+232]
  01531	0f ac c8 07	 shrd	 eax, ecx, 7
  01535	c1 e2 18	 shl	 edx, 24			; 00000018H
  01538	0b d3		 or	 edx, ebx
  0153a	33 db		 xor	 ebx, ebx
  0153c	0b dd		 or	 ebx, ebp
  0153e	33 f3		 xor	 esi, ebx
  01540	33 f0		 xor	 esi, eax
  01542	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR tv2419[esp+228]
  01549	33 d7		 xor	 edx, edi
  0154b	c1 e9 07	 shr	 ecx, 7
  0154e	33 d1		 xor	 edx, ecx
  01550	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv2419[esp+232]
  01557	8b d8		 mov	 ebx, eax
  01559	8b e9		 mov	 ebp, ecx
  0155b	0f ac eb 13	 shrd	 ebx, ebp, 19
  0155f	33 ff		 xor	 edi, edi
  01561	0b fb		 or	 edi, ebx
  01563	8b d9		 mov	 ebx, ecx
  01565	89 74 24 54	 mov	 DWORD PTR tv4713[esp+228], esi
  01569	8b f0		 mov	 esi, eax
  0156b	0f a4 c1 03	 shld	 ecx, eax, 3
  0156f	03 c0		 add	 eax, eax
  01571	03 c0		 add	 eax, eax
  01573	c1 e6 0d	 shl	 esi, 13			; 0000000dH
  01576	c1 ed 13	 shr	 ebp, 19			; 00000013H
  01579	03 c0		 add	 eax, eax
  0157b	0b f5		 or	 esi, ebp
  0157d	c1 eb 1d	 shr	 ebx, 29			; 0000001dH
  01580	0b d8		 or	 ebx, eax
  01582	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR tv2419[esp+228]
  01589	33 ed		 xor	 ebp, ebp
  0158b	0b e9		 or	 ebp, ecx
  0158d	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv2419[esp+232]
  01594	0f ac c8 06	 shrd	 eax, ecx, 6
  01598	c1 e9 06	 shr	 ecx, 6
  0159b	33 f5		 xor	 esi, ebp
  0159d	33 fb		 xor	 edi, ebx
  0159f	33 f8		 xor	 edi, eax
  015a1	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR _ctx$[esp+224]
  015a8	33 f1		 xor	 esi, ecx
  015aa	8b 4c 24 54	 mov	 ecx, DWORD PTR tv4713[esp+228]
  015ae	03 cf		 add	 ecx, edi
  015b0	13 d6		 adc	 edx, esi
  015b2	03 8c 24 d0 00
	00 00		 add	 ecx, DWORD PTR tv2107[esp+228]
  015b9	13 94 24 d4 00
	00 00		 adc	 edx, DWORD PTR tv2107[esp+232]
  015c0	03 4c 24 78	 add	 ecx, DWORD PTR tv2048[esp+228]
  015c4	13 54 24 7c	 adc	 edx, DWORD PTR tv2048[esp+232]
  015c8	89 88 98 00 00
	00		 mov	 DWORD PTR [eax+152], ecx
  015ce	89 90 9c 00 00
	00		 mov	 DWORD PTR [eax+156], edx
  015d4	8b 80 9c 00 00
	00		 mov	 eax, DWORD PTR [eax+156]
  015da	8b d1		 mov	 edx, ecx
  015dc	89 44 24 7c	 mov	 DWORD PTR tv2048[esp+232], eax
  015e0	8b 44 24 50	 mov	 eax, DWORD PTR _v$[esp+288]
  015e4	89 54 24 78	 mov	 DWORD PTR tv2048[esp+228], edx
$LN24@sha512_com:
  015e8	8b 54 24 30	 mov	 edx, DWORD PTR _v$[esp+256]
  015ec	8b 4c 24 2c	 mov	 ecx, DWORD PTR _v$[esp+252]
  015f0	8b ea		 mov	 ebp, edx
  015f2	8b d9		 mov	 ebx, ecx
  015f4	0f a4 dd 17	 shld	 ebp, ebx, 23
  015f8	c1 e3 17	 shl	 ebx, 23			; 00000017H
  015fb	8b f2		 mov	 esi, edx
  015fd	c1 ee 09	 shr	 esi, 9
  01600	0b f3		 or	 esi, ebx
  01602	33 ff		 xor	 edi, edi
  01604	0b fd		 or	 edi, ebp
  01606	8b d9		 mov	 ebx, ecx
  01608	0f ac d1 12	 shrd	 ecx, edx, 18
  0160c	33 ed		 xor	 ebp, ebp
  0160e	0b e9		 or	 ebp, ecx
  01610	8b 4c 24 2c	 mov	 ecx, DWORD PTR _v$[esp+252]
  01614	33 f5		 xor	 esi, ebp
  01616	8b 6c 24 30	 mov	 ebp, DWORD PTR _v$[esp+256]
  0161a	c1 e3 0e	 shl	 ebx, 14			; 0000000eH
  0161d	c1 ea 12	 shr	 edx, 18			; 00000012H
  01620	0b da		 or	 ebx, edx
  01622	33 fb		 xor	 edi, ebx
  01624	8b d1		 mov	 edx, ecx
  01626	0f ac e9 0e	 shrd	 ecx, ebp, 14
  0162a	33 db		 xor	 ebx, ebx
  0162c	0b d9		 or	 ebx, ecx
  0162e	8b 4c 24 3c	 mov	 ecx, DWORD PTR _v$[esp+268]
  01632	c1 e2 12	 shl	 edx, 18			; 00000012H
  01635	33 f3		 xor	 esi, ebx
  01637	c1 ed 0e	 shr	 ebp, 14			; 0000000eH
  0163a	0b d5		 or	 edx, ebp
  0163c	33 fa		 xor	 edi, edx
  0163e	8b 54 24 40	 mov	 edx, DWORD PTR _v$[esp+272]
  01642	8b d9		 mov	 ebx, ecx
  01644	33 5c 24 34	 xor	 ebx, DWORD PTR _v$[esp+260]
  01648	8b ea		 mov	 ebp, edx
  0164a	33 6c 24 38	 xor	 ebp, DWORD PTR _v$[esp+264]
  0164e	23 5c 24 2c	 and	 ebx, DWORD PTR _v$[esp+252]
  01652	23 6c 24 30	 and	 ebp, DWORD PTR _v$[esp+256]
  01656	33 d9		 xor	 ebx, ecx
  01658	8b 4c 24 10	 mov	 ecx, DWORD PTR _j$[esp+228]
  0165c	33 ea		 xor	 ebp, edx
  0165e	8b 54 24 48	 mov	 edx, DWORD PTR _v$[esp+280]
  01662	03 f3		 add	 esi, ebx
  01664	13 fd		 adc	 edi, ebp
  01666	03 34 cd 48 00
	00 00		 add	 esi, DWORD PTR _k512[ecx*8+72]
  0166d	8b d8		 mov	 ebx, eax
  0166f	13 3c cd 4c 00
	00 00		 adc	 edi, DWORD PTR _k512[ecx*8+76]
  01676	03 74 24 78	 add	 esi, DWORD PTR tv2048[esp+228]
  0167a	8b 4c 24 44	 mov	 ecx, DWORD PTR _v$[esp+276]
  0167e	13 7c 24 7c	 adc	 edi, DWORD PTR tv2048[esp+232]
  01682	03 ce		 add	 ecx, esi
  01684	13 d7		 adc	 edx, edi
  01686	01 4c 24 24	 add	 DWORD PTR _v$[esp+244], ecx
  0168a	89 4c 24 44	 mov	 DWORD PTR _v$[esp+276], ecx
  0168e	8b 4c 24 4c	 mov	 ecx, DWORD PTR _v$[esp+284]
  01692	11 54 24 28	 adc	 DWORD PTR _v$[esp+248], edx
  01696	89 54 24 48	 mov	 DWORD PTR _v$[esp+280], edx
  0169a	8b d1		 mov	 edx, ecx
  0169c	0f ac da 1c	 shrd	 edx, ebx, 28
  016a0	8b f1		 mov	 esi, ecx
  016a2	33 ff		 xor	 edi, edi
  016a4	0b fa		 or	 edi, edx
  016a6	8b e8		 mov	 ebp, eax
  016a8	0f a4 cd 1e	 shld	 ebp, ecx, 30
  016ac	c1 eb 1c	 shr	 ebx, 28			; 0000001cH
  016af	c1 e6 04	 shl	 esi, 4
  016b2	0b f3		 or	 esi, ebx
  016b4	c1 e1 1e	 shl	 ecx, 30			; 0000001eH
  016b7	8b d0		 mov	 edx, eax
  016b9	c1 ea 02	 shr	 edx, 2
  016bc	33 db		 xor	 ebx, ebx
  016be	0b d1		 or	 edx, ecx
  016c0	0b dd		 or	 ebx, ebp
  016c2	8b c8		 mov	 ecx, eax
  016c4	33 f3		 xor	 esi, ebx
  016c6	8b 5c 24 4c	 mov	 ebx, DWORD PTR _v$[esp+284]
  016ca	33 fa		 xor	 edi, edx
  016cc	c1 e9 07	 shr	 ecx, 7
  016cf	33 d2		 xor	 edx, edx
  016d1	8b e8		 mov	 ebp, eax
  016d3	0f a4 dd 19	 shld	 ebp, ebx, 25
  016d7	c1 e3 19	 shl	 ebx, 25			; 00000019H
  016da	0b cb		 or	 ecx, ebx
  016dc	0b d5		 or	 edx, ebp
  016de	8b 6c 24 18	 mov	 ebp, DWORD PTR _v$[esp+232]
  016e2	33 f9		 xor	 edi, ecx
  016e4	8b 4c 24 14	 mov	 ecx, DWORD PTR _v$[esp+228]
  016e8	33 f2		 xor	 esi, edx
  016ea	8b 54 24 4c	 mov	 edx, DWORD PTR _v$[esp+284]
  016ee	33 e8		 xor	 ebp, eax
  016f0	23 6c 24 20	 and	 ebp, DWORD PTR _v$[esp+240]
  016f4	8b d9		 mov	 ebx, ecx
  016f6	33 da		 xor	 ebx, edx
  016f8	23 5c 24 1c	 and	 ebx, DWORD PTR _v$[esp+236]
  016fc	23 ca		 and	 ecx, edx
  016fe	8b 54 24 18	 mov	 edx, DWORD PTR _v$[esp+232]
  01702	23 d0		 and	 edx, eax
  01704	8b 44 24 48	 mov	 eax, DWORD PTR _v$[esp+280]
  01708	0b d9		 or	 ebx, ecx
  0170a	0b ea		 or	 ebp, edx
  0170c	03 fb		 add	 edi, ebx
  0170e	13 f5		 adc	 esi, ebp
  01710	01 7c 24 44	 add	 DWORD PTR _v$[esp+276], edi
  01714	13 c6		 adc	 eax, esi

; 524  :         v_cycle(10, j); v_cycle(11, j);

  01716	83 7c 24 10 00	 cmp	 DWORD PTR _j$[esp+228], 0
  0171b	89 44 24 48	 mov	 DWORD PTR _v$[esp+280], eax
  0171f	0f 84 f8 00 00
	00		 je	 $LN26@sha512_com
  01725	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR tv2186[esp+228]
  0172c	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR tv2186[esp+232]
  01733	8b d9		 mov	 ebx, ecx
  01735	8b f8		 mov	 edi, eax
  01737	0f ac df 08	 shrd	 edi, ebx, 8
  0173b	8b e8		 mov	 ebp, eax
  0173d	0f ac cd 01	 shrd	 ebp, ecx, 1
  01741	33 f6		 xor	 esi, esi
  01743	0b f7		 or	 esi, edi
  01745	8b f8		 mov	 edi, eax
  01747	d1 e9		 shr	 ecx, 1
  01749	8b d0		 mov	 edx, eax
  0174b	c1 eb 08	 shr	 ebx, 8
  0174e	c1 e7 1f	 shl	 edi, 31			; 0000001fH
  01751	0b f9		 or	 edi, ecx
  01753	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR tv2186[esp+232]
  0175a	0f ac c8 07	 shrd	 eax, ecx, 7
  0175e	c1 e2 18	 shl	 edx, 24			; 00000018H
  01761	0b d3		 or	 edx, ebx
  01763	33 db		 xor	 ebx, ebx
  01765	0b dd		 or	 ebx, ebp
  01767	33 f3		 xor	 esi, ebx
  01769	33 f0		 xor	 esi, eax
  0176b	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv2479[esp+228]
  01772	33 d7		 xor	 edx, edi
  01774	c1 e9 07	 shr	 ecx, 7
  01777	33 d1		 xor	 edx, ecx
  01779	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv2479[esp+232]
  01780	8b d8		 mov	 ebx, eax
  01782	8b e9		 mov	 ebp, ecx
  01784	0f ac eb 13	 shrd	 ebx, ebp, 19
  01788	33 ff		 xor	 edi, edi
  0178a	0b fb		 or	 edi, ebx
  0178c	8b d9		 mov	 ebx, ecx
  0178e	89 74 24 54	 mov	 DWORD PTR tv4710[esp+228], esi
  01792	8b f0		 mov	 esi, eax
  01794	0f a4 c1 03	 shld	 ecx, eax, 3
  01798	03 c0		 add	 eax, eax
  0179a	03 c0		 add	 eax, eax
  0179c	c1 e6 0d	 shl	 esi, 13			; 0000000dH
  0179f	c1 ed 13	 shr	 ebp, 19			; 00000013H
  017a2	03 c0		 add	 eax, eax
  017a4	0b f5		 or	 esi, ebp
  017a6	c1 eb 1d	 shr	 ebx, 29			; 0000001dH
  017a9	0b d8		 or	 ebx, eax
  017ab	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv2479[esp+228]
  017b2	33 ed		 xor	 ebp, ebp
  017b4	0b e9		 or	 ebp, ecx
  017b6	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv2479[esp+232]
  017bd	0f ac c8 06	 shrd	 eax, ecx, 6
  017c1	c1 e9 06	 shr	 ecx, 6
  017c4	33 f5		 xor	 esi, ebp
  017c6	33 fb		 xor	 edi, ebx
  017c8	33 f8		 xor	 edi, eax
  017ca	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR _ctx$[esp+224]
  017d1	33 f1		 xor	 esi, ecx
  017d3	8b 4c 24 54	 mov	 ecx, DWORD PTR tv4710[esp+228]
  017d7	03 cf		 add	 ecx, edi
  017d9	13 d6		 adc	 edx, esi
  017db	03 8c 24 90 00
	00 00		 add	 ecx, DWORD PTR tv2164[esp+228]
  017e2	13 94 24 94 00
	00 00		 adc	 edx, DWORD PTR tv2164[esp+232]
  017e9	03 8c 24 c8 00
	00 00		 add	 ecx, DWORD PTR tv2120[esp+228]
  017f0	13 94 24 cc 00
	00 00		 adc	 edx, DWORD PTR tv2120[esp+232]
  017f7	89 88 a0 00 00
	00		 mov	 DWORD PTR [eax+160], ecx
  017fd	89 90 a4 00 00
	00		 mov	 DWORD PTR [eax+164], edx
  01803	8b 80 a4 00 00
	00		 mov	 eax, DWORD PTR [eax+164]
  01809	8b d1		 mov	 edx, ecx
  0180b	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv2120[esp+232], eax
  01812	8b 44 24 48	 mov	 eax, DWORD PTR _v$[esp+280]
  01816	89 94 24 c8 00
	00 00		 mov	 DWORD PTR tv2120[esp+228], edx
$LN26@sha512_com:
  0181d	8b 54 24 28	 mov	 edx, DWORD PTR _v$[esp+248]
  01821	8b 4c 24 24	 mov	 ecx, DWORD PTR _v$[esp+244]
  01825	8b ea		 mov	 ebp, edx
  01827	8b d9		 mov	 ebx, ecx
  01829	0f a4 dd 17	 shld	 ebp, ebx, 23
  0182d	c1 e3 17	 shl	 ebx, 23			; 00000017H
  01830	8b f2		 mov	 esi, edx
  01832	c1 ee 09	 shr	 esi, 9
  01835	0b f3		 or	 esi, ebx
  01837	33 ff		 xor	 edi, edi
  01839	0b fd		 or	 edi, ebp
  0183b	8b d9		 mov	 ebx, ecx
  0183d	0f ac d1 12	 shrd	 ecx, edx, 18
  01841	33 ed		 xor	 ebp, ebp
  01843	0b e9		 or	 ebp, ecx
  01845	8b 4c 24 24	 mov	 ecx, DWORD PTR _v$[esp+244]
  01849	33 f5		 xor	 esi, ebp
  0184b	8b 6c 24 28	 mov	 ebp, DWORD PTR _v$[esp+248]
  0184f	c1 e3 0e	 shl	 ebx, 14			; 0000000eH
  01852	c1 ea 12	 shr	 edx, 18			; 00000012H
  01855	0b da		 or	 ebx, edx
  01857	33 fb		 xor	 edi, ebx
  01859	33 db		 xor	 ebx, ebx
  0185b	8b d1		 mov	 edx, ecx
  0185d	0f ac e9 0e	 shrd	 ecx, ebp, 14
  01861	0b d9		 or	 ebx, ecx
  01863	8b 4c 24 34	 mov	 ecx, DWORD PTR _v$[esp+260]
  01867	33 f3		 xor	 esi, ebx
  01869	8b 5c 24 2c	 mov	 ebx, DWORD PTR _v$[esp+252]
  0186d	c1 e2 12	 shl	 edx, 18			; 00000012H
  01870	33 d9		 xor	 ebx, ecx
  01872	23 5c 24 24	 and	 ebx, DWORD PTR _v$[esp+244]
  01876	c1 ed 0e	 shr	 ebp, 14			; 0000000eH
  01879	0b d5		 or	 edx, ebp
  0187b	8b 6c 24 30	 mov	 ebp, DWORD PTR _v$[esp+256]
  0187f	33 fa		 xor	 edi, edx
  01881	8b 54 24 38	 mov	 edx, DWORD PTR _v$[esp+264]
  01885	33 ea		 xor	 ebp, edx
  01887	23 6c 24 28	 and	 ebp, DWORD PTR _v$[esp+248]
  0188b	33 d9		 xor	 ebx, ecx
  0188d	8b 4c 24 10	 mov	 ecx, DWORD PTR _j$[esp+228]
  01891	33 ea		 xor	 ebp, edx
  01893	8b 54 24 40	 mov	 edx, DWORD PTR _v$[esp+272]
  01897	03 f3		 add	 esi, ebx
  01899	13 fd		 adc	 edi, ebp
  0189b	03 34 cd 50 00
	00 00		 add	 esi, DWORD PTR _k512[ecx*8+80]
  018a2	8b d8		 mov	 ebx, eax
  018a4	13 3c cd 54 00
	00 00		 adc	 edi, DWORD PTR _k512[ecx*8+84]
  018ab	03 b4 24 c8 00
	00 00		 add	 esi, DWORD PTR tv2120[esp+228]
  018b2	8b 4c 24 3c	 mov	 ecx, DWORD PTR _v$[esp+268]
  018b6	13 bc 24 cc 00
	00 00		 adc	 edi, DWORD PTR tv2120[esp+232]
  018bd	03 ce		 add	 ecx, esi
  018bf	13 d7		 adc	 edx, edi
  018c1	01 4c 24 1c	 add	 DWORD PTR _v$[esp+236], ecx
  018c5	89 4c 24 3c	 mov	 DWORD PTR _v$[esp+268], ecx
  018c9	8b 4c 24 44	 mov	 ecx, DWORD PTR _v$[esp+276]
  018cd	11 54 24 20	 adc	 DWORD PTR _v$[esp+240], edx
  018d1	89 54 24 40	 mov	 DWORD PTR _v$[esp+272], edx
  018d5	8b d1		 mov	 edx, ecx
  018d7	0f ac da 1c	 shrd	 edx, ebx, 28
  018db	8b f1		 mov	 esi, ecx
  018dd	33 ff		 xor	 edi, edi
  018df	0b fa		 or	 edi, edx
  018e1	8b e8		 mov	 ebp, eax
  018e3	0f a4 cd 1e	 shld	 ebp, ecx, 30
  018e7	c1 eb 1c	 shr	 ebx, 28			; 0000001cH
  018ea	c1 e6 04	 shl	 esi, 4
  018ed	0b f3		 or	 esi, ebx
  018ef	c1 e1 1e	 shl	 ecx, 30			; 0000001eH
  018f2	8b d0		 mov	 edx, eax
  018f4	c1 ea 02	 shr	 edx, 2
  018f7	33 db		 xor	 ebx, ebx
  018f9	0b d1		 or	 edx, ecx
  018fb	0b dd		 or	 ebx, ebp
  018fd	8b c8		 mov	 ecx, eax
  018ff	33 f3		 xor	 esi, ebx
  01901	8b 5c 24 44	 mov	 ebx, DWORD PTR _v$[esp+276]
  01905	33 fa		 xor	 edi, edx
  01907	c1 e9 07	 shr	 ecx, 7
  0190a	33 d2		 xor	 edx, edx
  0190c	8b e8		 mov	 ebp, eax
  0190e	0f a4 dd 19	 shld	 ebp, ebx, 25
  01912	0b d5		 or	 edx, ebp
  01914	8b 6c 24 50	 mov	 ebp, DWORD PTR _v$[esp+288]
  01918	c1 e3 19	 shl	 ebx, 25			; 00000019H
  0191b	0b cb		 or	 ecx, ebx
  0191d	33 f2		 xor	 esi, edx
  0191f	8b 54 24 4c	 mov	 edx, DWORD PTR _v$[esp+284]
  01923	33 f9		 xor	 edi, ecx
  01925	8b 4c 24 44	 mov	 ecx, DWORD PTR _v$[esp+276]
  01929	8b da		 mov	 ebx, edx
  0192b	33 d9		 xor	 ebx, ecx
  0192d	23 5c 24 14	 and	 ebx, DWORD PTR _v$[esp+228]
  01931	23 d1		 and	 edx, ecx
  01933	8b 4c 24 50	 mov	 ecx, DWORD PTR _v$[esp+288]
  01937	33 e8		 xor	 ebp, eax
  01939	23 6c 24 18	 and	 ebp, DWORD PTR _v$[esp+232]
  0193d	23 c8		 and	 ecx, eax
  0193f	0b da		 or	 ebx, edx
  01941	0b e9		 or	 ebp, ecx
  01943	03 fb		 add	 edi, ebx
  01945	13 f5		 adc	 esi, ebp
  01947	01 7c 24 3c	 add	 DWORD PTR _v$[esp+268], edi
  0194b	11 74 24 40	 adc	 DWORD PTR _v$[esp+272], esi
  0194f	83 7c 24 10 00	 cmp	 DWORD PTR _j$[esp+228], 0
  01954	0f 84 e6 00 00
	00		 je	 $LN28@sha512_com
  0195a	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR tv2252[esp+228]
  01961	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR tv2252[esp+232]
  01968	8b d9		 mov	 ebx, ecx
  0196a	8b f8		 mov	 edi, eax
  0196c	0f ac df 08	 shrd	 edi, ebx, 8
  01970	8b e8		 mov	 ebp, eax
  01972	0f ac cd 01	 shrd	 ebp, ecx, 1
  01976	33 f6		 xor	 esi, esi
  01978	0b f7		 or	 esi, edi
  0197a	8b f8		 mov	 edi, eax
  0197c	d1 e9		 shr	 ecx, 1
  0197e	8b d0		 mov	 edx, eax
  01980	c1 eb 08	 shr	 ebx, 8
  01983	c1 e7 1f	 shl	 edi, 31			; 0000001fH
  01986	0b f9		 or	 edi, ecx
  01988	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR tv2252[esp+232]
  0198f	0f ac c8 07	 shrd	 eax, ecx, 7
  01993	c1 e2 18	 shl	 edx, 24			; 00000018H
  01996	0b d3		 or	 edx, ebx
  01998	33 db		 xor	 ebx, ebx
  0199a	0b dd		 or	 ebx, ebp
  0199c	33 f3		 xor	 esi, ebx
  0199e	33 f0		 xor	 esi, eax
  019a0	8b 44 24 78	 mov	 eax, DWORD PTR tv2048[esp+228]
  019a4	33 d7		 xor	 edx, edi
  019a6	c1 e9 07	 shr	 ecx, 7
  019a9	33 d1		 xor	 edx, ecx
  019ab	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv2048[esp+232]
  019af	8b d8		 mov	 ebx, eax
  019b1	8b e9		 mov	 ebp, ecx
  019b3	0f ac eb 13	 shrd	 ebx, ebp, 19
  019b7	33 ff		 xor	 edi, edi
  019b9	0b fb		 or	 edi, ebx
  019bb	8b d9		 mov	 ebx, ecx
  019bd	89 74 24 54	 mov	 DWORD PTR tv4707[esp+228], esi
  019c1	8b f0		 mov	 esi, eax
  019c3	0f a4 c1 03	 shld	 ecx, eax, 3
  019c7	03 c0		 add	 eax, eax
  019c9	03 c0		 add	 eax, eax
  019cb	c1 e6 0d	 shl	 esi, 13			; 0000000dH
  019ce	c1 ed 13	 shr	 ebp, 19			; 00000013H
  019d1	03 c0		 add	 eax, eax
  019d3	0b f5		 or	 esi, ebp
  019d5	c1 eb 1d	 shr	 ebx, 29			; 0000001dH
  019d8	0b d8		 or	 ebx, eax
  019da	8b 44 24 78	 mov	 eax, DWORD PTR tv2048[esp+228]
  019de	33 ed		 xor	 ebp, ebp
  019e0	0b e9		 or	 ebp, ecx
  019e2	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv2048[esp+232]
  019e6	0f ac c8 06	 shrd	 eax, ecx, 6
  019ea	c1 e9 06	 shr	 ecx, 6
  019ed	33 f5		 xor	 esi, ebp
  019ef	33 fb		 xor	 edi, ebx
  019f1	33 f8		 xor	 edi, eax
  019f3	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR _ctx$[esp+224]
  019fa	33 f1		 xor	 esi, ecx
  019fc	8b 4c 24 54	 mov	 ecx, DWORD PTR tv4707[esp+228]
  01a00	03 cf		 add	 ecx, edi
  01a02	13 d6		 adc	 edx, esi
  01a04	03 4c 24 58	 add	 ecx, DWORD PTR tv2230[esp+228]
  01a08	13 54 24 5c	 adc	 edx, DWORD PTR tv2230[esp+232]
  01a0c	03 8c 24 b8 00
	00 00		 add	 ecx, DWORD PTR tv2186[esp+228]
  01a13	13 94 24 bc 00
	00 00		 adc	 edx, DWORD PTR tv2186[esp+232]
  01a1a	89 88 a8 00 00
	00		 mov	 DWORD PTR [eax+168], ecx
  01a20	89 90 ac 00 00
	00		 mov	 DWORD PTR [eax+172], edx
  01a26	8b 80 ac 00 00
	00		 mov	 eax, DWORD PTR [eax+172]
  01a2c	8b d1		 mov	 edx, ecx
  01a2e	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv2186[esp+232], eax
  01a35	8b 44 24 48	 mov	 eax, DWORD PTR _v$[esp+280]
  01a39	89 94 24 b8 00
	00 00		 mov	 DWORD PTR tv2186[esp+228], edx
$LN28@sha512_com:
  01a40	8b 54 24 20	 mov	 edx, DWORD PTR _v$[esp+240]
  01a44	8b 4c 24 1c	 mov	 ecx, DWORD PTR _v$[esp+236]
  01a48	8b ea		 mov	 ebp, edx
  01a4a	8b d9		 mov	 ebx, ecx
  01a4c	0f a4 dd 17	 shld	 ebp, ebx, 23
  01a50	c1 e3 17	 shl	 ebx, 23			; 00000017H
  01a53	8b f2		 mov	 esi, edx
  01a55	c1 ee 09	 shr	 esi, 9
  01a58	0b f3		 or	 esi, ebx
  01a5a	33 ff		 xor	 edi, edi
  01a5c	0b fd		 or	 edi, ebp
  01a5e	33 ed		 xor	 ebp, ebp
  01a60	8b d9		 mov	 ebx, ecx
  01a62	0f ac d1 12	 shrd	 ecx, edx, 18
  01a66	0b e9		 or	 ebp, ecx
  01a68	8b 4c 24 1c	 mov	 ecx, DWORD PTR _v$[esp+236]
  01a6c	33 f5		 xor	 esi, ebp
  01a6e	8b 6c 24 20	 mov	 ebp, DWORD PTR _v$[esp+240]
  01a72	c1 e3 0e	 shl	 ebx, 14			; 0000000eH
  01a75	c1 ea 12	 shr	 edx, 18			; 00000012H
  01a78	0b da		 or	 ebx, edx
  01a7a	33 fb		 xor	 edi, ebx
  01a7c	33 db		 xor	 ebx, ebx
  01a7e	8b d1		 mov	 edx, ecx
  01a80	0f ac e9 0e	 shrd	 ecx, ebp, 14
  01a84	0b d9		 or	 ebx, ecx
  01a86	8b 4c 24 2c	 mov	 ecx, DWORD PTR _v$[esp+252]
  01a8a	c1 ed 0e	 shr	 ebp, 14			; 0000000eH
  01a8d	33 f3		 xor	 esi, ebx
  01a8f	8b 5c 24 24	 mov	 ebx, DWORD PTR _v$[esp+244]
  01a93	c1 e2 12	 shl	 edx, 18			; 00000012H
  01a96	0b d5		 or	 edx, ebp
  01a98	8b 6c 24 28	 mov	 ebp, DWORD PTR _v$[esp+248]
  01a9c	33 fa		 xor	 edi, edx
  01a9e	8b 54 24 30	 mov	 edx, DWORD PTR _v$[esp+256]
  01aa2	33 d9		 xor	 ebx, ecx
  01aa4	23 5c 24 1c	 and	 ebx, DWORD PTR _v$[esp+236]
  01aa8	33 ea		 xor	 ebp, edx
  01aaa	23 6c 24 20	 and	 ebp, DWORD PTR _v$[esp+240]
  01aae	33 d9		 xor	 ebx, ecx
  01ab0	8b 4c 24 10	 mov	 ecx, DWORD PTR _j$[esp+228]
  01ab4	33 ea		 xor	 ebp, edx
  01ab6	8b 54 24 38	 mov	 edx, DWORD PTR _v$[esp+264]
  01aba	03 f3		 add	 esi, ebx
  01abc	13 fd		 adc	 edi, ebp
  01abe	03 34 cd 58 00
	00 00		 add	 esi, DWORD PTR _k512[ecx*8+88]
  01ac5	13 3c cd 5c 00
	00 00		 adc	 edi, DWORD PTR _k512[ecx*8+92]
  01acc	03 b4 24 b8 00
	00 00		 add	 esi, DWORD PTR tv2186[esp+228]
  01ad3	8b 4c 24 34	 mov	 ecx, DWORD PTR _v$[esp+260]
  01ad7	13 bc 24 bc 00
	00 00		 adc	 edi, DWORD PTR tv2186[esp+232]
  01ade	03 ce		 add	 ecx, esi
  01ae0	13 d7		 adc	 edx, edi
  01ae2	01 4c 24 14	 add	 DWORD PTR _v$[esp+228], ecx
  01ae6	89 4c 24 34	 mov	 DWORD PTR _v$[esp+260], ecx
  01aea	8b 4c 24 3c	 mov	 ecx, DWORD PTR _v$[esp+268]
  01aee	11 54 24 18	 adc	 DWORD PTR _v$[esp+232], edx
  01af2	89 54 24 38	 mov	 DWORD PTR _v$[esp+264], edx
  01af6	8b 54 24 40	 mov	 edx, DWORD PTR _v$[esp+272]
  01afa	8b d9		 mov	 ebx, ecx
  01afc	8b ea		 mov	 ebp, edx
  01afe	0f ac eb 1c	 shrd	 ebx, ebp, 28
  01b02	33 ff		 xor	 edi, edi
  01b04	0b fb		 or	 edi, ebx
  01b06	8b f1		 mov	 esi, ecx
  01b08	8b da		 mov	 ebx, edx
  01b0a	0f a4 ca 1e	 shld	 edx, ecx, 30
  01b0e	c1 ed 1c	 shr	 ebp, 28			; 0000001cH
  01b11	c1 e6 04	 shl	 esi, 4
  01b14	0b f5		 or	 esi, ebp
  01b16	c1 e1 1e	 shl	 ecx, 30			; 0000001eH
  01b19	c1 eb 02	 shr	 ebx, 2
  01b1c	33 ed		 xor	 ebp, ebp
  01b1e	0b d9		 or	 ebx, ecx
  01b20	8b 4c 24 40	 mov	 ecx, DWORD PTR _v$[esp+272]
  01b24	0b ea		 or	 ebp, edx
  01b26	8b d1		 mov	 edx, ecx
  01b28	33 f5		 xor	 esi, ebp
  01b2a	8b 6c 24 3c	 mov	 ebp, DWORD PTR _v$[esp+268]
  01b2e	33 fb		 xor	 edi, ebx
  01b30	c1 ea 07	 shr	 edx, 7
  01b33	33 db		 xor	 ebx, ebx
  01b35	0f a4 e9 19	 shld	 ecx, ebp, 25
  01b39	c1 e5 19	 shl	 ebp, 25			; 00000019H
  01b3c	0b d5		 or	 edx, ebp
  01b3e	8b 6c 24 40	 mov	 ebp, DWORD PTR _v$[esp+272]
  01b42	0b d9		 or	 ebx, ecx
  01b44	8b 4c 24 3c	 mov	 ecx, DWORD PTR _v$[esp+268]
  01b48	33 f3		 xor	 esi, ebx
  01b4a	33 fa		 xor	 edi, edx
  01b4c	8b 54 24 44	 mov	 edx, DWORD PTR _v$[esp+276]
  01b50	33 e8		 xor	 ebp, eax
  01b52	23 6c 24 50	 and	 ebp, DWORD PTR _v$[esp+288]
  01b56	8b d9		 mov	 ebx, ecx
  01b58	33 da		 xor	 ebx, edx
  01b5a	23 5c 24 4c	 and	 ebx, DWORD PTR _v$[esp+284]
  01b5e	23 ca		 and	 ecx, edx
  01b60	8b 54 24 40	 mov	 edx, DWORD PTR _v$[esp+272]
  01b64	23 d0		 and	 edx, eax
  01b66	8b 44 24 38	 mov	 eax, DWORD PTR _v$[esp+264]
  01b6a	0b d9		 or	 ebx, ecx
  01b6c	0b ea		 or	 ebp, edx
  01b6e	03 fb		 add	 edi, ebx
  01b70	13 f5		 adc	 esi, ebp
  01b72	01 7c 24 34	 add	 DWORD PTR _v$[esp+260], edi
  01b76	13 c6		 adc	 eax, esi

; 525  :         v_cycle(12, j); v_cycle(13, j);

  01b78	83 7c 24 10 00	 cmp	 DWORD PTR _j$[esp+228], 0
  01b7d	89 44 24 38	 mov	 DWORD PTR _v$[esp+264], eax
  01b81	0f 84 f2 00 00
	00		 je	 $LN30@sha512_com
  01b87	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR tv2120[esp+228]
  01b8e	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR tv2120[esp+232]
  01b95	8b d9		 mov	 ebx, ecx
  01b97	8b f8		 mov	 edi, eax
  01b99	0f ac df 13	 shrd	 edi, ebx, 19
  01b9d	33 f6		 xor	 esi, esi
  01b9f	0b f7		 or	 esi, edi
  01ba1	8b f9		 mov	 edi, ecx
  01ba3	c1 eb 13	 shr	 ebx, 19			; 00000013H
  01ba6	8b d0		 mov	 edx, eax
  01ba8	8b e8		 mov	 ebp, eax
  01baa	0f a4 e9 03	 shld	 ecx, ebp, 3
  01bae	c1 e2 0d	 shl	 edx, 13			; 0000000dH
  01bb1	0b d3		 or	 edx, ebx
  01bb3	33 db		 xor	 ebx, ebx
  01bb5	0b d9		 or	 ebx, ecx
  01bb7	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR tv2120[esp+232]
  01bbe	0f ac c8 06	 shrd	 eax, ecx, 6
  01bc2	03 ed		 add	 ebp, ebp
  01bc4	03 ed		 add	 ebp, ebp
  01bc6	03 ed		 add	 ebp, ebp
  01bc8	c1 ef 1d	 shr	 edi, 29			; 0000001dH
  01bcb	0b fd		 or	 edi, ebp
  01bcd	33 f7		 xor	 esi, edi
  01bcf	33 f0		 xor	 esi, eax
  01bd1	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv2317[esp+228]
  01bd8	33 d3		 xor	 edx, ebx
  01bda	c1 e9 06	 shr	 ecx, 6
  01bdd	33 d1		 xor	 edx, ecx
  01bdf	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv2317[esp+232]
  01be6	8b e9		 mov	 ebp, ecx
  01be8	8b d8		 mov	 ebx, eax
  01bea	0f ac eb 08	 shrd	 ebx, ebp, 8
  01bee	33 ff		 xor	 edi, edi
  01bf0	0b fb		 or	 edi, ebx
  01bf2	89 74 24 54	 mov	 DWORD PTR tv4704[esp+228], esi
  01bf6	8b f0		 mov	 esi, eax
  01bf8	8b d8		 mov	 ebx, eax
  01bfa	0f ac c8 01	 shrd	 eax, ecx, 1
  01bfe	c1 e6 18	 shl	 esi, 24			; 00000018H
  01c01	c1 ed 08	 shr	 ebp, 8
  01c04	0b f5		 or	 esi, ebp
  01c06	d1 e9		 shr	 ecx, 1
  01c08	33 ed		 xor	 ebp, ebp
  01c0a	0b e8		 or	 ebp, eax
  01c0c	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv2317[esp+228]
  01c13	c1 e3 1f	 shl	 ebx, 31			; 0000001fH
  01c16	0b d9		 or	 ebx, ecx
  01c18	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv2317[esp+232]
  01c1f	0f ac c8 07	 shrd	 eax, ecx, 7
  01c23	c1 e9 07	 shr	 ecx, 7
  01c26	33 f3		 xor	 esi, ebx
  01c28	33 fd		 xor	 edi, ebp
  01c2a	33 f8		 xor	 edi, eax
  01c2c	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR _ctx$[esp+224]
  01c33	33 f1		 xor	 esi, ecx
  01c35	8b 4c 24 54	 mov	 ecx, DWORD PTR tv4704[esp+228]
  01c39	03 cf		 add	 ecx, edi
  01c3b	13 d6		 adc	 edx, esi
  01c3d	03 4c 24 70	 add	 ecx, DWORD PTR tv2295[esp+228]
  01c41	13 54 24 74	 adc	 edx, DWORD PTR tv2295[esp+232]
  01c45	03 8c 24 a8 00
	00 00		 add	 ecx, DWORD PTR tv2252[esp+228]
  01c4c	13 94 24 ac 00
	00 00		 adc	 edx, DWORD PTR tv2252[esp+232]
  01c53	89 88 b0 00 00
	00		 mov	 DWORD PTR [eax+176], ecx
  01c59	89 90 b4 00 00
	00		 mov	 DWORD PTR [eax+180], edx
  01c5f	8b 80 b4 00 00
	00		 mov	 eax, DWORD PTR [eax+180]
  01c65	8b d1		 mov	 edx, ecx
  01c67	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv2252[esp+232], eax
  01c6e	8b 44 24 38	 mov	 eax, DWORD PTR _v$[esp+264]
  01c72	89 94 24 a8 00
	00 00		 mov	 DWORD PTR tv2252[esp+228], edx
$LN30@sha512_com:
  01c79	8b 54 24 18	 mov	 edx, DWORD PTR _v$[esp+232]
  01c7d	8b 4c 24 14	 mov	 ecx, DWORD PTR _v$[esp+228]
  01c81	8b ea		 mov	 ebp, edx
  01c83	8b d9		 mov	 ebx, ecx
  01c85	0f a4 dd 17	 shld	 ebp, ebx, 23
  01c89	c1 e3 17	 shl	 ebx, 23			; 00000017H
  01c8c	8b f2		 mov	 esi, edx
  01c8e	c1 ee 09	 shr	 esi, 9
  01c91	0b f3		 or	 esi, ebx
  01c93	33 ff		 xor	 edi, edi
  01c95	0b fd		 or	 edi, ebp
  01c97	8b d9		 mov	 ebx, ecx
  01c99	0f ac d1 12	 shrd	 ecx, edx, 18
  01c9d	33 ed		 xor	 ebp, ebp
  01c9f	0b e9		 or	 ebp, ecx
  01ca1	8b 4c 24 14	 mov	 ecx, DWORD PTR _v$[esp+228]
  01ca5	33 f5		 xor	 esi, ebp
  01ca7	8b 6c 24 18	 mov	 ebp, DWORD PTR _v$[esp+232]
  01cab	c1 e3 0e	 shl	 ebx, 14			; 0000000eH
  01cae	c1 ea 12	 shr	 edx, 18			; 00000012H
  01cb1	0b da		 or	 ebx, edx
  01cb3	33 fb		 xor	 edi, ebx
  01cb5	8b d1		 mov	 edx, ecx
  01cb7	0f ac e9 0e	 shrd	 ecx, ebp, 14
  01cbb	33 db		 xor	 ebx, ebx
  01cbd	0b d9		 or	 ebx, ecx
  01cbf	8b 4c 24 24	 mov	 ecx, DWORD PTR _v$[esp+244]
  01cc3	c1 e2 12	 shl	 edx, 18			; 00000012H
  01cc6	33 f3		 xor	 esi, ebx
  01cc8	c1 ed 0e	 shr	 ebp, 14			; 0000000eH
  01ccb	0b d5		 or	 edx, ebp
  01ccd	33 fa		 xor	 edi, edx
  01ccf	8b 54 24 28	 mov	 edx, DWORD PTR _v$[esp+248]
  01cd3	8b d9		 mov	 ebx, ecx
  01cd5	33 5c 24 1c	 xor	 ebx, DWORD PTR _v$[esp+236]
  01cd9	8b ea		 mov	 ebp, edx
  01cdb	33 6c 24 20	 xor	 ebp, DWORD PTR _v$[esp+240]
  01cdf	23 5c 24 14	 and	 ebx, DWORD PTR _v$[esp+228]
  01ce3	23 6c 24 18	 and	 ebp, DWORD PTR _v$[esp+232]
  01ce7	33 d9		 xor	 ebx, ecx
  01ce9	8b 4c 24 10	 mov	 ecx, DWORD PTR _j$[esp+228]
  01ced	33 ea		 xor	 ebp, edx
  01cef	8b 54 24 30	 mov	 edx, DWORD PTR _v$[esp+256]
  01cf3	03 f3		 add	 esi, ebx
  01cf5	13 fd		 adc	 edi, ebp
  01cf7	03 34 cd 60 00
	00 00		 add	 esi, DWORD PTR _k512[ecx*8+96]
  01cfe	8b d8		 mov	 ebx, eax
  01d00	13 3c cd 64 00
	00 00		 adc	 edi, DWORD PTR _k512[ecx*8+100]
  01d07	03 b4 24 a8 00
	00 00		 add	 esi, DWORD PTR tv2252[esp+228]
  01d0e	8b 4c 24 2c	 mov	 ecx, DWORD PTR _v$[esp+252]
  01d12	13 bc 24 ac 00
	00 00		 adc	 edi, DWORD PTR tv2252[esp+232]
  01d19	03 ce		 add	 ecx, esi
  01d1b	13 d7		 adc	 edx, edi
  01d1d	01 4c 24 4c	 add	 DWORD PTR _v$[esp+284], ecx
  01d21	89 4c 24 2c	 mov	 DWORD PTR _v$[esp+252], ecx
  01d25	8b 4c 24 34	 mov	 ecx, DWORD PTR _v$[esp+260]
  01d29	11 54 24 50	 adc	 DWORD PTR _v$[esp+288], edx
  01d2d	89 54 24 30	 mov	 DWORD PTR _v$[esp+256], edx
  01d31	8b d1		 mov	 edx, ecx
  01d33	0f ac da 1c	 shrd	 edx, ebx, 28
  01d37	8b f1		 mov	 esi, ecx
  01d39	33 ff		 xor	 edi, edi
  01d3b	0b fa		 or	 edi, edx
  01d3d	8b e8		 mov	 ebp, eax
  01d3f	0f a4 cd 1e	 shld	 ebp, ecx, 30
  01d43	c1 eb 1c	 shr	 ebx, 28			; 0000001cH
  01d46	c1 e6 04	 shl	 esi, 4
  01d49	0b f3		 or	 esi, ebx
  01d4b	c1 e1 1e	 shl	 ecx, 30			; 0000001eH
  01d4e	8b d0		 mov	 edx, eax
  01d50	c1 ea 02	 shr	 edx, 2
  01d53	33 db		 xor	 ebx, ebx
  01d55	0b d1		 or	 edx, ecx
  01d57	0b dd		 or	 ebx, ebp
  01d59	8b c8		 mov	 ecx, eax
  01d5b	33 f3		 xor	 esi, ebx
  01d5d	8b 5c 24 34	 mov	 ebx, DWORD PTR _v$[esp+260]
  01d61	33 fa		 xor	 edi, edx
  01d63	c1 e9 07	 shr	 ecx, 7
  01d66	33 d2		 xor	 edx, edx
  01d68	8b e8		 mov	 ebp, eax
  01d6a	0f a4 dd 19	 shld	 ebp, ebx, 25
  01d6e	0b d5		 or	 edx, ebp
  01d70	8b 6c 24 40	 mov	 ebp, DWORD PTR _v$[esp+272]
  01d74	c1 e3 19	 shl	 ebx, 25			; 00000019H
  01d77	0b cb		 or	 ecx, ebx
  01d79	33 f2		 xor	 esi, edx
  01d7b	8b 54 24 3c	 mov	 edx, DWORD PTR _v$[esp+268]
  01d7f	33 f9		 xor	 edi, ecx
  01d81	8b 4c 24 34	 mov	 ecx, DWORD PTR _v$[esp+260]
  01d85	8b da		 mov	 ebx, edx
  01d87	33 d9		 xor	 ebx, ecx
  01d89	23 5c 24 44	 and	 ebx, DWORD PTR _v$[esp+276]
  01d8d	23 d1		 and	 edx, ecx
  01d8f	8b 4c 24 40	 mov	 ecx, DWORD PTR _v$[esp+272]
  01d93	33 e8		 xor	 ebp, eax
  01d95	23 6c 24 48	 and	 ebp, DWORD PTR _v$[esp+280]
  01d99	23 c8		 and	 ecx, eax
  01d9b	0b da		 or	 ebx, edx
  01d9d	0b e9		 or	 ebp, ecx
  01d9f	03 fb		 add	 edi, ebx
  01da1	13 f5		 adc	 esi, ebp
  01da3	01 7c 24 2c	 add	 DWORD PTR _v$[esp+252], edi
  01da7	11 74 24 30	 adc	 DWORD PTR _v$[esp+256], esi
  01dab	83 7c 24 10 00	 cmp	 DWORD PTR _j$[esp+228], 0
  01db0	0f 84 ec 00 00
	00		 je	 $LN32@sha512_com
  01db6	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR tv2186[esp+228]
  01dbd	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR tv2186[esp+232]
  01dc4	8b d9		 mov	 ebx, ecx
  01dc6	8b f8		 mov	 edi, eax
  01dc8	0f ac df 13	 shrd	 edi, ebx, 19
  01dcc	33 f6		 xor	 esi, esi
  01dce	0b f7		 or	 esi, edi
  01dd0	8b f9		 mov	 edi, ecx
  01dd2	c1 eb 13	 shr	 ebx, 19			; 00000013H
  01dd5	8b d0		 mov	 edx, eax
  01dd7	8b e8		 mov	 ebp, eax
  01dd9	0f a4 e9 03	 shld	 ecx, ebp, 3
  01ddd	c1 e2 0d	 shl	 edx, 13			; 0000000dH
  01de0	0b d3		 or	 edx, ebx
  01de2	33 db		 xor	 ebx, ebx
  01de4	0b d9		 or	 ebx, ecx
  01de6	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR tv2186[esp+232]
  01ded	0f ac c8 06	 shrd	 eax, ecx, 6
  01df1	03 ed		 add	 ebp, ebp
  01df3	03 ed		 add	 ebp, ebp
  01df5	03 ed		 add	 ebp, ebp
  01df7	c1 ef 1d	 shr	 edi, 29			; 0000001dH
  01dfa	0b fd		 or	 edi, ebp
  01dfc	33 f7		 xor	 esi, edi
  01dfe	33 f0		 xor	 esi, eax
  01e00	8b 44 24 60	 mov	 eax, DWORD PTR tv2023[esp+228]
  01e04	33 d3		 xor	 edx, ebx
  01e06	c1 e9 06	 shr	 ecx, 6
  01e09	33 d1		 xor	 edx, ecx
  01e0b	8b 4c 24 64	 mov	 ecx, DWORD PTR tv2023[esp+232]
  01e0f	8b e9		 mov	 ebp, ecx
  01e11	8b d8		 mov	 ebx, eax
  01e13	0f ac eb 08	 shrd	 ebx, ebp, 8
  01e17	33 ff		 xor	 edi, edi
  01e19	0b fb		 or	 edi, ebx
  01e1b	89 74 24 54	 mov	 DWORD PTR tv4701[esp+228], esi
  01e1f	8b f0		 mov	 esi, eax
  01e21	8b d8		 mov	 ebx, eax
  01e23	0f ac c8 01	 shrd	 eax, ecx, 1
  01e27	c1 e6 18	 shl	 esi, 24			; 00000018H
  01e2a	c1 ed 08	 shr	 ebp, 8
  01e2d	0b f5		 or	 esi, ebp
  01e2f	d1 e9		 shr	 ecx, 1
  01e31	33 ed		 xor	 ebp, ebp
  01e33	0b e8		 or	 ebp, eax
  01e35	8b 44 24 60	 mov	 eax, DWORD PTR tv2023[esp+228]
  01e39	c1 e3 1f	 shl	 ebx, 31			; 0000001fH
  01e3c	0b d9		 or	 ebx, ecx
  01e3e	8b 4c 24 64	 mov	 ecx, DWORD PTR tv2023[esp+232]
  01e42	0f ac c8 07	 shrd	 eax, ecx, 7
  01e46	c1 e9 07	 shr	 ecx, 7
  01e49	33 f3		 xor	 esi, ebx
  01e4b	33 fd		 xor	 edi, ebp
  01e4d	33 f8		 xor	 edi, eax
  01e4f	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR _ctx$[esp+224]
  01e56	33 f1		 xor	 esi, ecx
  01e58	8b 4c 24 54	 mov	 ecx, DWORD PTR tv4701[esp+228]
  01e5c	03 cf		 add	 ecx, edi
  01e5e	13 d6		 adc	 edx, esi
  01e60	03 8c 24 c0 00
	00 00		 add	 ecx, DWORD PTR tv2359[esp+228]
  01e67	13 94 24 c4 00
	00 00		 adc	 edx, DWORD PTR tv2359[esp+232]
  01e6e	03 8c 24 a0 00
	00 00		 add	 ecx, DWORD PTR tv2317[esp+228]
  01e75	13 94 24 a4 00
	00 00		 adc	 edx, DWORD PTR tv2317[esp+232]
  01e7c	89 88 b8 00 00
	00		 mov	 DWORD PTR [eax+184], ecx
  01e82	89 90 bc 00 00
	00		 mov	 DWORD PTR [eax+188], edx
  01e88	8b 80 bc 00 00
	00		 mov	 eax, DWORD PTR [eax+188]
  01e8e	8b d1		 mov	 edx, ecx
  01e90	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv2317[esp+232], eax
  01e97	8b 44 24 38	 mov	 eax, DWORD PTR _v$[esp+264]
  01e9b	89 94 24 a0 00
	00 00		 mov	 DWORD PTR tv2317[esp+228], edx
$LN32@sha512_com:
  01ea2	8b 54 24 50	 mov	 edx, DWORD PTR _v$[esp+288]
  01ea6	8b 4c 24 4c	 mov	 ecx, DWORD PTR _v$[esp+284]
  01eaa	8b ea		 mov	 ebp, edx
  01eac	8b d9		 mov	 ebx, ecx
  01eae	0f a4 dd 17	 shld	 ebp, ebx, 23
  01eb2	c1 e3 17	 shl	 ebx, 23			; 00000017H
  01eb5	8b f2		 mov	 esi, edx
  01eb7	c1 ee 09	 shr	 esi, 9
  01eba	0b f3		 or	 esi, ebx
  01ebc	33 ff		 xor	 edi, edi
  01ebe	0b fd		 or	 edi, ebp
  01ec0	33 ed		 xor	 ebp, ebp
  01ec2	8b d9		 mov	 ebx, ecx
  01ec4	0f ac d1 12	 shrd	 ecx, edx, 18
  01ec8	0b e9		 or	 ebp, ecx
  01eca	8b 4c 24 4c	 mov	 ecx, DWORD PTR _v$[esp+284]
  01ece	33 f5		 xor	 esi, ebp
  01ed0	8b 6c 24 50	 mov	 ebp, DWORD PTR _v$[esp+288]
  01ed4	c1 e3 0e	 shl	 ebx, 14			; 0000000eH
  01ed7	c1 ea 12	 shr	 edx, 18			; 00000012H
  01eda	0b da		 or	 ebx, edx
  01edc	33 fb		 xor	 edi, ebx
  01ede	8b d1		 mov	 edx, ecx
  01ee0	0f ac e9 0e	 shrd	 ecx, ebp, 14
  01ee4	c1 ed 0e	 shr	 ebp, 14			; 0000000eH
  01ee7	33 db		 xor	 ebx, ebx
  01ee9	0b d9		 or	 ebx, ecx
  01eeb	8b 4c 24 1c	 mov	 ecx, DWORD PTR _v$[esp+236]
  01eef	c1 e2 12	 shl	 edx, 18			; 00000012H
  01ef2	0b d5		 or	 edx, ebp
  01ef4	33 fa		 xor	 edi, edx
  01ef6	8b 54 24 20	 mov	 edx, DWORD PTR _v$[esp+240]
  01efa	33 f3		 xor	 esi, ebx
  01efc	8b d9		 mov	 ebx, ecx
  01efe	33 5c 24 14	 xor	 ebx, DWORD PTR _v$[esp+228]
  01f02	8b ea		 mov	 ebp, edx
  01f04	33 6c 24 18	 xor	 ebp, DWORD PTR _v$[esp+232]
  01f08	23 5c 24 4c	 and	 ebx, DWORD PTR _v$[esp+284]
  01f0c	23 6c 24 50	 and	 ebp, DWORD PTR _v$[esp+288]
  01f10	33 d9		 xor	 ebx, ecx
  01f12	8b 4c 24 10	 mov	 ecx, DWORD PTR _j$[esp+228]
  01f16	33 ea		 xor	 ebp, edx
  01f18	8b 54 24 28	 mov	 edx, DWORD PTR _v$[esp+248]
  01f1c	03 f3		 add	 esi, ebx
  01f1e	13 fd		 adc	 edi, ebp
  01f20	03 34 cd 68 00
	00 00		 add	 esi, DWORD PTR _k512[ecx*8+104]
  01f27	13 3c cd 6c 00
	00 00		 adc	 edi, DWORD PTR _k512[ecx*8+108]
  01f2e	03 b4 24 a0 00
	00 00		 add	 esi, DWORD PTR tv2317[esp+228]
  01f35	8b 4c 24 24	 mov	 ecx, DWORD PTR _v$[esp+244]
  01f39	13 bc 24 a4 00
	00 00		 adc	 edi, DWORD PTR tv2317[esp+232]
  01f40	03 ce		 add	 ecx, esi
  01f42	13 d7		 adc	 edx, edi
  01f44	01 4c 24 44	 add	 DWORD PTR _v$[esp+276], ecx
  01f48	89 4c 24 24	 mov	 DWORD PTR _v$[esp+244], ecx
  01f4c	8b 4c 24 2c	 mov	 ecx, DWORD PTR _v$[esp+252]
  01f50	11 54 24 48	 adc	 DWORD PTR _v$[esp+280], edx
  01f54	89 54 24 28	 mov	 DWORD PTR _v$[esp+248], edx
  01f58	8b 54 24 30	 mov	 edx, DWORD PTR _v$[esp+256]
  01f5c	8b d9		 mov	 ebx, ecx
  01f5e	8b ea		 mov	 ebp, edx
  01f60	0f ac eb 1c	 shrd	 ebx, ebp, 28
  01f64	33 ff		 xor	 edi, edi
  01f66	0b fb		 or	 edi, ebx
  01f68	8b f1		 mov	 esi, ecx
  01f6a	8b da		 mov	 ebx, edx
  01f6c	0f a4 ca 1e	 shld	 edx, ecx, 30
  01f70	c1 ed 1c	 shr	 ebp, 28			; 0000001cH
  01f73	c1 e6 04	 shl	 esi, 4
  01f76	0b f5		 or	 esi, ebp
  01f78	c1 e1 1e	 shl	 ecx, 30			; 0000001eH
  01f7b	c1 eb 02	 shr	 ebx, 2
  01f7e	33 ed		 xor	 ebp, ebp
  01f80	0b d9		 or	 ebx, ecx
  01f82	8b 4c 24 30	 mov	 ecx, DWORD PTR _v$[esp+256]
  01f86	0b ea		 or	 ebp, edx
  01f88	8b d1		 mov	 edx, ecx
  01f8a	33 f5		 xor	 esi, ebp
  01f8c	8b 6c 24 2c	 mov	 ebp, DWORD PTR _v$[esp+252]
  01f90	33 fb		 xor	 edi, ebx
  01f92	c1 ea 07	 shr	 edx, 7
  01f95	33 db		 xor	 ebx, ebx
  01f97	0f a4 e9 19	 shld	 ecx, ebp, 25
  01f9b	c1 e5 19	 shl	 ebp, 25			; 00000019H
  01f9e	0b d5		 or	 edx, ebp
  01fa0	8b 6c 24 30	 mov	 ebp, DWORD PTR _v$[esp+256]
  01fa4	0b d9		 or	 ebx, ecx
  01fa6	8b 4c 24 2c	 mov	 ecx, DWORD PTR _v$[esp+252]
  01faa	33 f3		 xor	 esi, ebx
  01fac	33 fa		 xor	 edi, edx
  01fae	8b 54 24 34	 mov	 edx, DWORD PTR _v$[esp+260]
  01fb2	8b d9		 mov	 ebx, ecx
  01fb4	33 da		 xor	 ebx, edx
  01fb6	23 5c 24 3c	 and	 ebx, DWORD PTR _v$[esp+268]
  01fba	23 ca		 and	 ecx, edx
  01fbc	8b 54 24 30	 mov	 edx, DWORD PTR _v$[esp+256]
  01fc0	33 e8		 xor	 ebp, eax
  01fc2	23 6c 24 40	 and	 ebp, DWORD PTR _v$[esp+272]
  01fc6	23 d0		 and	 edx, eax
  01fc8	0b d9		 or	 ebx, ecx
  01fca	0b ea		 or	 ebp, edx
  01fcc	03 fb		 add	 edi, ebx
  01fce	13 f5		 adc	 esi, ebp
  01fd0	01 7c 24 24	 add	 DWORD PTR _v$[esp+244], edi
  01fd4	11 74 24 28	 adc	 DWORD PTR _v$[esp+248], esi

; 526  :         v_cycle(14, j); v_cycle(15, j);

  01fd8	83 7c 24 10 00	 cmp	 DWORD PTR _j$[esp+228], 0
  01fdd	0f 84 ec 00 00
	00		 je	 $LN34@sha512_com
  01fe3	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tv2095[esp+228]
  01fea	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv2095[esp+232]
  01ff1	8b d9		 mov	 ebx, ecx
  01ff3	8b f8		 mov	 edi, eax
  01ff5	0f ac df 08	 shrd	 edi, ebx, 8
  01ff9	8b e8		 mov	 ebp, eax
  01ffb	0f ac cd 01	 shrd	 ebp, ecx, 1
  01fff	33 f6		 xor	 esi, esi
  02001	0b f7		 or	 esi, edi
  02003	8b f8		 mov	 edi, eax
  02005	d1 e9		 shr	 ecx, 1
  02007	8b d0		 mov	 edx, eax
  02009	c1 eb 08	 shr	 ebx, 8
  0200c	c1 e7 1f	 shl	 edi, 31			; 0000001fH
  0200f	0b f9		 or	 edi, ecx
  02011	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv2095[esp+232]
  02018	0f ac c8 07	 shrd	 eax, ecx, 7
  0201c	c1 e2 18	 shl	 edx, 24			; 00000018H
  0201f	0b d3		 or	 edx, ebx
  02021	33 db		 xor	 ebx, ebx
  02023	0b dd		 or	 ebx, ebp
  02025	33 f3		 xor	 esi, ebx
  02027	33 f0		 xor	 esi, eax
  02029	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR tv2252[esp+228]
  02030	33 d7		 xor	 edx, edi
  02032	c1 e9 07	 shr	 ecx, 7
  02035	33 d1		 xor	 edx, ecx
  02037	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR tv2252[esp+232]
  0203e	8b d8		 mov	 ebx, eax
  02040	8b e9		 mov	 ebp, ecx
  02042	0f ac eb 13	 shrd	 ebx, ebp, 19
  02046	33 ff		 xor	 edi, edi
  02048	0b fb		 or	 edi, ebx
  0204a	8b d9		 mov	 ebx, ecx
  0204c	89 74 24 54	 mov	 DWORD PTR tv4698[esp+228], esi
  02050	8b f0		 mov	 esi, eax
  02052	0f a4 c1 03	 shld	 ecx, eax, 3
  02056	03 c0		 add	 eax, eax
  02058	03 c0		 add	 eax, eax
  0205a	c1 e6 0d	 shl	 esi, 13			; 0000000dH
  0205d	c1 ed 13	 shr	 ebp, 19			; 00000013H
  02060	03 c0		 add	 eax, eax
  02062	0b f5		 or	 esi, ebp
  02064	c1 eb 1d	 shr	 ebx, 29			; 0000001dH
  02067	0b d8		 or	 ebx, eax
  02069	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR tv2252[esp+228]
  02070	33 ed		 xor	 ebp, ebp
  02072	0b e9		 or	 ebp, ecx
  02074	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR tv2252[esp+232]
  0207b	0f ac c8 06	 shrd	 eax, ecx, 6
  0207f	c1 e9 06	 shr	 ecx, 6
  02082	33 f5		 xor	 esi, ebp
  02084	33 fb		 xor	 edi, ebx
  02086	33 f8		 xor	 edi, eax
  02088	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR _ctx$[esp+224]
  0208f	33 f1		 xor	 esi, ecx
  02091	8b 4c 24 54	 mov	 ecx, DWORD PTR tv4698[esp+228]
  02095	03 cf		 add	 ecx, edi
  02097	13 d6		 adc	 edx, esi
  02099	03 4c 24 60	 add	 ecx, DWORD PTR tv2023[esp+228]
  0209d	13 54 24 64	 adc	 edx, DWORD PTR tv2023[esp+232]
  020a1	03 8c 24 80 00
	00 00		 add	 ecx, DWORD PTR tv2419[esp+228]
  020a8	13 94 24 84 00
	00 00		 adc	 edx, DWORD PTR tv2419[esp+232]
  020af	89 88 c0 00 00
	00		 mov	 DWORD PTR [eax+192], ecx
  020b5	89 90 c4 00 00
	00		 mov	 DWORD PTR [eax+196], edx
  020bb	8b 80 c4 00 00
	00		 mov	 eax, DWORD PTR [eax+196]
  020c1	8b d1		 mov	 edx, ecx
  020c3	89 44 24 64	 mov	 DWORD PTR tv2023[esp+232], eax
  020c7	8b 44 24 38	 mov	 eax, DWORD PTR _v$[esp+264]
  020cb	89 54 24 60	 mov	 DWORD PTR tv2023[esp+228], edx
$LN34@sha512_com:
  020cf	8b 54 24 48	 mov	 edx, DWORD PTR _v$[esp+280]
  020d3	8b 4c 24 44	 mov	 ecx, DWORD PTR _v$[esp+276]
  020d7	8b ea		 mov	 ebp, edx
  020d9	8b d9		 mov	 ebx, ecx
  020db	0f a4 dd 17	 shld	 ebp, ebx, 23
  020df	c1 e3 17	 shl	 ebx, 23			; 00000017H
  020e2	8b f2		 mov	 esi, edx
  020e4	c1 ee 09	 shr	 esi, 9
  020e7	0b f3		 or	 esi, ebx
  020e9	33 ff		 xor	 edi, edi
  020eb	0b fd		 or	 edi, ebp
  020ed	33 ed		 xor	 ebp, ebp
  020ef	8b d9		 mov	 ebx, ecx
  020f1	0f ac d1 12	 shrd	 ecx, edx, 18
  020f5	0b e9		 or	 ebp, ecx
  020f7	8b 4c 24 44	 mov	 ecx, DWORD PTR _v$[esp+276]
  020fb	33 f5		 xor	 esi, ebp
  020fd	8b 6c 24 48	 mov	 ebp, DWORD PTR _v$[esp+280]
  02101	c1 e3 0e	 shl	 ebx, 14			; 0000000eH
  02104	c1 ea 12	 shr	 edx, 18			; 00000012H
  02107	0b da		 or	 ebx, edx
  02109	33 fb		 xor	 edi, ebx
  0210b	8b d1		 mov	 edx, ecx
  0210d	0f ac e9 0e	 shrd	 ecx, ebp, 14
  02111	c1 ed 0e	 shr	 ebp, 14			; 0000000eH
  02114	33 db		 xor	 ebx, ebx
  02116	0b d9		 or	 ebx, ecx
  02118	8b 4c 24 14	 mov	 ecx, DWORD PTR _v$[esp+228]
  0211c	c1 e2 12	 shl	 edx, 18			; 00000012H
  0211f	0b d5		 or	 edx, ebp
  02121	33 fa		 xor	 edi, edx
  02123	8b 54 24 18	 mov	 edx, DWORD PTR _v$[esp+232]
  02127	33 f3		 xor	 esi, ebx
  02129	8b d9		 mov	 ebx, ecx
  0212b	33 5c 24 4c	 xor	 ebx, DWORD PTR _v$[esp+284]
  0212f	8b ea		 mov	 ebp, edx
  02131	33 6c 24 50	 xor	 ebp, DWORD PTR _v$[esp+288]
  02135	23 5c 24 44	 and	 ebx, DWORD PTR _v$[esp+276]
  02139	23 6c 24 48	 and	 ebp, DWORD PTR _v$[esp+280]
  0213d	33 d9		 xor	 ebx, ecx
  0213f	8b 4c 24 10	 mov	 ecx, DWORD PTR _j$[esp+228]
  02143	33 ea		 xor	 ebp, edx
  02145	8b 54 24 20	 mov	 edx, DWORD PTR _v$[esp+240]
  02149	03 f3		 add	 esi, ebx
  0214b	13 fd		 adc	 edi, ebp
  0214d	03 34 cd 70 00
	00 00		 add	 esi, DWORD PTR _k512[ecx*8+112]
  02154	13 3c cd 74 00
	00 00		 adc	 edi, DWORD PTR _k512[ecx*8+116]
  0215b	03 74 24 60	 add	 esi, DWORD PTR tv2023[esp+228]
  0215f	8b 4c 24 1c	 mov	 ecx, DWORD PTR _v$[esp+236]
  02163	13 7c 24 64	 adc	 edi, DWORD PTR tv2023[esp+232]
  02167	03 ce		 add	 ecx, esi
  02169	13 d7		 adc	 edx, edi
  0216b	01 4c 24 3c	 add	 DWORD PTR _v$[esp+268], ecx
  0216f	89 4c 24 1c	 mov	 DWORD PTR _v$[esp+236], ecx
  02173	8b 4c 24 24	 mov	 ecx, DWORD PTR _v$[esp+244]
  02177	11 54 24 40	 adc	 DWORD PTR _v$[esp+272], edx
  0217b	89 54 24 20	 mov	 DWORD PTR _v$[esp+240], edx
  0217f	8b 54 24 28	 mov	 edx, DWORD PTR _v$[esp+248]
  02183	8b d9		 mov	 ebx, ecx
  02185	8b ea		 mov	 ebp, edx
  02187	0f ac eb 1c	 shrd	 ebx, ebp, 28
  0218b	33 ff		 xor	 edi, edi
  0218d	0b fb		 or	 edi, ebx
  0218f	8b f1		 mov	 esi, ecx
  02191	8b da		 mov	 ebx, edx
  02193	0f a4 ca 1e	 shld	 edx, ecx, 30
  02197	c1 ed 1c	 shr	 ebp, 28			; 0000001cH
  0219a	c1 e6 04	 shl	 esi, 4
  0219d	0b f5		 or	 esi, ebp
  0219f	c1 e1 1e	 shl	 ecx, 30			; 0000001eH
  021a2	c1 eb 02	 shr	 ebx, 2
  021a5	33 ed		 xor	 ebp, ebp
  021a7	0b d9		 or	 ebx, ecx
  021a9	8b 4c 24 28	 mov	 ecx, DWORD PTR _v$[esp+248]
  021ad	0b ea		 or	 ebp, edx
  021af	8b d1		 mov	 edx, ecx
  021b1	33 f5		 xor	 esi, ebp
  021b3	8b 6c 24 24	 mov	 ebp, DWORD PTR _v$[esp+244]
  021b7	33 fb		 xor	 edi, ebx
  021b9	c1 ea 07	 shr	 edx, 7
  021bc	33 db		 xor	 ebx, ebx
  021be	0f a4 e9 19	 shld	 ecx, ebp, 25
  021c2	0b d9		 or	 ebx, ecx
  021c4	8b 4c 24 24	 mov	 ecx, DWORD PTR _v$[esp+244]
  021c8	c1 e5 19	 shl	 ebp, 25			; 00000019H
  021cb	0b d5		 or	 edx, ebp
  021cd	33 f3		 xor	 esi, ebx
  021cf	33 fa		 xor	 edi, edx
  021d1	8b 54 24 28	 mov	 edx, DWORD PTR _v$[esp+248]
  021d5	8b d9		 mov	 ebx, ecx
  021d7	33 5c 24 2c	 xor	 ebx, DWORD PTR _v$[esp+252]
  021db	23 4c 24 2c	 and	 ecx, DWORD PTR _v$[esp+252]
  021df	23 5c 24 34	 and	 ebx, DWORD PTR _v$[esp+260]
  021e3	8b ea		 mov	 ebp, edx
  021e5	33 6c 24 30	 xor	 ebp, DWORD PTR _v$[esp+256]
  021e9	23 54 24 30	 and	 edx, DWORD PTR _v$[esp+256]
  021ed	23 e8		 and	 ebp, eax
  021ef	0b d9		 or	 ebx, ecx
  021f1	8b 4c 24 20	 mov	 ecx, DWORD PTR _v$[esp+240]
  021f5	0b ea		 or	 ebp, edx
  021f7	03 fb		 add	 edi, ebx
  021f9	13 f5		 adc	 esi, ebp
  021fb	01 7c 24 1c	 add	 DWORD PTR _v$[esp+236], edi
  021ff	13 ce		 adc	 ecx, esi
  02201	83 7c 24 10 00	 cmp	 DWORD PTR _j$[esp+228], 0
  02206	89 4c 24 20	 mov	 DWORD PTR _v$[esp+240], ecx
  0220a	0f 84 ec 00 00
	00		 je	 $LN36@sha512_com
  02210	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv2317[esp+228]
  02217	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv2317[esp+232]
  0221e	8b d9		 mov	 ebx, ecx
  02220	8b f8		 mov	 edi, eax
  02222	0f ac df 13	 shrd	 edi, ebx, 19
  02226	33 f6		 xor	 esi, esi
  02228	0b f7		 or	 esi, edi
  0222a	8b f9		 mov	 edi, ecx
  0222c	c1 eb 13	 shr	 ebx, 19			; 00000013H
  0222f	8b d0		 mov	 edx, eax
  02231	c1 e2 0d	 shl	 edx, 13			; 0000000dH
  02234	0b d3		 or	 edx, ebx
  02236	8b e8		 mov	 ebp, eax
  02238	0f a4 e9 03	 shld	 ecx, ebp, 3
  0223c	33 db		 xor	 ebx, ebx
  0223e	0b d9		 or	 ebx, ecx
  02240	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv2317[esp+232]
  02247	0f ac c8 06	 shrd	 eax, ecx, 6
  0224b	03 ed		 add	 ebp, ebp
  0224d	03 ed		 add	 ebp, ebp
  0224f	03 ed		 add	 ebp, ebp
  02251	c1 ef 1d	 shr	 edi, 29			; 0000001dH
  02254	0b fd		 or	 edi, ebp
  02256	33 f7		 xor	 esi, edi
  02258	33 f0		 xor	 esi, eax
  0225a	8b 44 24 68	 mov	 eax, DWORD PTR tv2051[esp+228]
  0225e	33 d3		 xor	 edx, ebx
  02260	c1 e9 06	 shr	 ecx, 6
  02263	33 d1		 xor	 edx, ecx
  02265	8b 4c 24 6c	 mov	 ecx, DWORD PTR tv2051[esp+232]
  02269	8b e9		 mov	 ebp, ecx
  0226b	8b d8		 mov	 ebx, eax
  0226d	0f ac eb 08	 shrd	 ebx, ebp, 8
  02271	33 ff		 xor	 edi, edi
  02273	0b fb		 or	 edi, ebx
  02275	89 74 24 54	 mov	 DWORD PTR tv4695[esp+228], esi
  02279	8b f0		 mov	 esi, eax
  0227b	8b d8		 mov	 ebx, eax
  0227d	0f ac c8 01	 shrd	 eax, ecx, 1
  02281	c1 e6 18	 shl	 esi, 24			; 00000018H
  02284	c1 ed 08	 shr	 ebp, 8
  02287	d1 e9		 shr	 ecx, 1
  02289	0b f5		 or	 esi, ebp
  0228b	33 ed		 xor	 ebp, ebp
  0228d	0b e8		 or	 ebp, eax
  0228f	8b 44 24 68	 mov	 eax, DWORD PTR tv2051[esp+228]
  02293	c1 e3 1f	 shl	 ebx, 31			; 0000001fH
  02296	0b d9		 or	 ebx, ecx
  02298	8b 4c 24 6c	 mov	 ecx, DWORD PTR tv2051[esp+232]
  0229c	0f ac c8 07	 shrd	 eax, ecx, 7
  022a0	c1 e9 07	 shr	 ecx, 7
  022a3	33 f3		 xor	 esi, ebx
  022a5	33 f1		 xor	 esi, ecx
  022a7	8b 4c 24 54	 mov	 ecx, DWORD PTR tv4695[esp+228]
  022ab	33 fd		 xor	 edi, ebp
  022ad	33 f8		 xor	 edi, eax
  022af	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR _ctx$[esp+224]
  022b6	03 cf		 add	 ecx, edi
  022b8	13 d6		 adc	 edx, esi
  022ba	03 8c 24 88 00
	00 00		 add	 ecx, DWORD PTR tv2479[esp+228]
  022c1	13 94 24 8c 00
	00 00		 adc	 edx, DWORD PTR tv2479[esp+232]
  022c8	03 8c 24 98 00
	00 00		 add	 ecx, DWORD PTR tv2095[esp+228]
  022cf	13 94 24 9c 00
	00 00		 adc	 edx, DWORD PTR tv2095[esp+232]
  022d6	89 88 c8 00 00
	00		 mov	 DWORD PTR [eax+200], ecx
  022dc	89 90 cc 00 00
	00		 mov	 DWORD PTR [eax+204], edx
  022e2	8b 80 cc 00 00
	00		 mov	 eax, DWORD PTR [eax+204]
  022e8	8b d1		 mov	 edx, ecx
  022ea	8b 4c 24 20	 mov	 ecx, DWORD PTR _v$[esp+240]
  022ee	89 94 24 98 00
	00 00		 mov	 DWORD PTR tv2095[esp+228], edx
  022f5	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv2095[esp+232], eax
$LN36@sha512_com:
  022fc	8b 54 24 40	 mov	 edx, DWORD PTR _v$[esp+272]
  02300	8b 44 24 3c	 mov	 eax, DWORD PTR _v$[esp+268]
  02304	8b ea		 mov	 ebp, edx
  02306	8b d8		 mov	 ebx, eax
  02308	0f a4 dd 17	 shld	 ebp, ebx, 23
  0230c	c1 e3 17	 shl	 ebx, 23			; 00000017H
  0230f	8b f2		 mov	 esi, edx
  02311	c1 ee 09	 shr	 esi, 9
  02314	0b f3		 or	 esi, ebx
  02316	33 ff		 xor	 edi, edi
  02318	0b fd		 or	 edi, ebp
  0231a	8b d8		 mov	 ebx, eax
  0231c	0f ac d0 12	 shrd	 eax, edx, 18
  02320	33 ed		 xor	 ebp, ebp
  02322	0b e8		 or	 ebp, eax
  02324	8b 44 24 3c	 mov	 eax, DWORD PTR _v$[esp+268]
  02328	33 f5		 xor	 esi, ebp
  0232a	8b 6c 24 40	 mov	 ebp, DWORD PTR _v$[esp+272]
  0232e	c1 e3 0e	 shl	 ebx, 14			; 0000000eH
  02331	c1 ea 12	 shr	 edx, 18			; 00000012H
  02334	0b da		 or	 ebx, edx
  02336	33 fb		 xor	 edi, ebx
  02338	8b d0		 mov	 edx, eax
  0233a	0f ac e8 0e	 shrd	 eax, ebp, 14
  0233e	33 db		 xor	 ebx, ebx
  02340	0b d8		 or	 ebx, eax
  02342	8b 44 24 4c	 mov	 eax, DWORD PTR _v$[esp+284]
  02346	c1 e2 12	 shl	 edx, 18			; 00000012H
  02349	33 f3		 xor	 esi, ebx
  0234b	c1 ed 0e	 shr	 ebp, 14			; 0000000eH
  0234e	0b d5		 or	 edx, ebp
  02350	33 fa		 xor	 edi, edx
  02352	8b 54 24 50	 mov	 edx, DWORD PTR _v$[esp+288]
  02356	8b d8		 mov	 ebx, eax
  02358	33 5c 24 44	 xor	 ebx, DWORD PTR _v$[esp+276]
  0235c	8b ea		 mov	 ebp, edx
  0235e	33 6c 24 48	 xor	 ebp, DWORD PTR _v$[esp+280]
  02362	23 5c 24 3c	 and	 ebx, DWORD PTR _v$[esp+268]
  02366	23 6c 24 40	 and	 ebp, DWORD PTR _v$[esp+272]
  0236a	33 d8		 xor	 ebx, eax
  0236c	8b 44 24 10	 mov	 eax, DWORD PTR _j$[esp+228]
  02370	33 ea		 xor	 ebp, edx
  02372	8b 54 24 18	 mov	 edx, DWORD PTR _v$[esp+232]
  02376	03 f3		 add	 esi, ebx
  02378	13 fd		 adc	 edi, ebp
  0237a	03 34 c5 78 00
	00 00		 add	 esi, DWORD PTR _k512[eax*8+120]
  02381	8b d9		 mov	 ebx, ecx
  02383	13 3c c5 7c 00
	00 00		 adc	 edi, DWORD PTR _k512[eax*8+124]
  0238a	03 b4 24 98 00
	00 00		 add	 esi, DWORD PTR tv2095[esp+228]
  02391	8b 44 24 14	 mov	 eax, DWORD PTR _v$[esp+228]
  02395	13 bc 24 9c 00
	00 00		 adc	 edi, DWORD PTR tv2095[esp+232]
  0239c	03 c6		 add	 eax, esi
  0239e	13 d7		 adc	 edx, edi
  023a0	01 44 24 34	 add	 DWORD PTR _v$[esp+260], eax
  023a4	89 44 24 14	 mov	 DWORD PTR _v$[esp+228], eax
  023a8	8b 44 24 1c	 mov	 eax, DWORD PTR _v$[esp+236]
  023ac	11 54 24 38	 adc	 DWORD PTR _v$[esp+264], edx
  023b0	89 54 24 18	 mov	 DWORD PTR _v$[esp+232], edx
  023b4	8b d0		 mov	 edx, eax
  023b6	0f ac da 1c	 shrd	 edx, ebx, 28
  023ba	8b f0		 mov	 esi, eax
  023bc	33 ff		 xor	 edi, edi
  023be	0b fa		 or	 edi, edx
  023c0	8b e9		 mov	 ebp, ecx
  023c2	0f a4 c5 1e	 shld	 ebp, eax, 30
  023c6	c1 eb 1c	 shr	 ebx, 28			; 0000001cH
  023c9	c1 e6 04	 shl	 esi, 4
  023cc	0b f3		 or	 esi, ebx
  023ce	c1 e0 1e	 shl	 eax, 30			; 0000001eH
  023d1	8b d1		 mov	 edx, ecx
  023d3	c1 ea 02	 shr	 edx, 2
  023d6	33 db		 xor	 ebx, ebx
  023d8	0b d0		 or	 edx, eax
  023da	0b dd		 or	 ebx, ebp
  023dc	8b c1		 mov	 eax, ecx
  023de	33 f3		 xor	 esi, ebx
  023e0	8b 5c 24 1c	 mov	 ebx, DWORD PTR _v$[esp+236]
  023e4	33 fa		 xor	 edi, edx
  023e6	c1 e8 07	 shr	 eax, 7
  023e9	33 d2		 xor	 edx, edx
  023eb	8b e9		 mov	 ebp, ecx
  023ed	0f a4 dd 19	 shld	 ebp, ebx, 25
  023f1	0b d5		 or	 edx, ebp
  023f3	8b 6c 24 28	 mov	 ebp, DWORD PTR _v$[esp+248]
  023f7	c1 e3 19	 shl	 ebx, 25			; 00000019H
  023fa	0b c3		 or	 eax, ebx
  023fc	33 f8		 xor	 edi, eax
  023fe	8b 44 24 1c	 mov	 eax, DWORD PTR _v$[esp+236]
  02402	33 f2		 xor	 esi, edx
  02404	8b 54 24 24	 mov	 edx, DWORD PTR _v$[esp+244]
  02408	8b da		 mov	 ebx, edx
  0240a	33 d8		 xor	 ebx, eax
  0240c	23 5c 24 2c	 and	 ebx, DWORD PTR _v$[esp+252]
  02410	23 d0		 and	 edx, eax
  02412	8b 44 24 28	 mov	 eax, DWORD PTR _v$[esp+248]
  02416	33 e9		 xor	 ebp, ecx
  02418	23 6c 24 30	 and	 ebp, DWORD PTR _v$[esp+256]
  0241c	23 c1		 and	 eax, ecx
  0241e	0b e8		 or	 ebp, eax
  02420	8b 44 24 18	 mov	 eax, DWORD PTR _v$[esp+232]
  02424	0b da		 or	 ebx, edx
  02426	03 fb		 add	 edi, ebx
  02428	13 f5		 adc	 esi, ebp
  0242a	01 7c 24 14	 add	 DWORD PTR _v$[esp+228], edi
  0242e	8b 7c 24 10	 mov	 edi, DWORD PTR _j$[esp+228]
  02432	13 c6		 adc	 eax, esi
  02434	83 c7 10	 add	 edi, 16			; 00000010H
  02437	89 44 24 18	 mov	 DWORD PTR _v$[esp+232], eax
  0243b	89 7c 24 10	 mov	 DWORD PTR _j$[esp+228], edi
  0243f	83 ff 50	 cmp	 edi, 80			; 00000050H
  02442	0f 82 48 dd ff
	ff		 jb	 $LL40@sha512_com

; 527  :     }
; 528  : 
; 529  :     ctx->hash[0] += v[0]; ctx->hash[1] += v[1];

  02448	8b 94 24 e0 00
	00 00		 mov	 edx, DWORD PTR tv2017[esp+228]
  0244f	8b 74 24 14	 mov	 esi, DWORD PTR _v$[esp+228]
  02453	01 32		 add	 DWORD PTR [edx], esi
  02455	5f		 pop	 edi
  02456	5e		 pop	 esi
  02457	11 42 04	 adc	 DWORD PTR [edx+4], eax
  0245a	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR _ctx$[esp+216]
  02461	8b 54 24 14	 mov	 edx, DWORD PTR _v$[esp+228]
  02465	01 50 18	 add	 DWORD PTR [eax+24], edx

; 530  :     ctx->hash[2] += v[2]; ctx->hash[3] += v[3];

  02468	8b 54 24 20	 mov	 edx, DWORD PTR _v$[esp+240]
  0246c	5d		 pop	 ebp
  0246d	11 48 1c	 adc	 DWORD PTR [eax+28], ecx
  02470	8b 4c 24 18	 mov	 ecx, DWORD PTR _v$[esp+232]
  02474	01 48 20	 add	 DWORD PTR [eax+32], ecx
  02477	8b 4c 24 20	 mov	 ecx, DWORD PTR _v$[esp+240]
  0247b	5b		 pop	 ebx
  0247c	11 50 24	 adc	 DWORD PTR [eax+36], edx
  0247f	01 48 28	 add	 DWORD PTR [eax+40], ecx
  02482	8b 54 24 20	 mov	 edx, DWORD PTR _v$[esp+240]

; 531  :     ctx->hash[4] += v[4]; ctx->hash[5] += v[5];

  02486	8b 4c 24 24	 mov	 ecx, DWORD PTR _v$[esp+244]
  0248a	11 50 2c	 adc	 DWORD PTR [eax+44], edx
  0248d	01 48 30	 add	 DWORD PTR [eax+48], ecx
  02490	8b 54 24 28	 mov	 edx, DWORD PTR _v$[esp+248]
  02494	8b 4c 24 2c	 mov	 ecx, DWORD PTR _v$[esp+252]
  02498	11 50 34	 adc	 DWORD PTR [eax+52], edx
  0249b	01 48 38	 add	 DWORD PTR [eax+56], ecx
  0249e	8b 54 24 30	 mov	 edx, DWORD PTR _v$[esp+256]

; 532  :     ctx->hash[6] += v[6]; ctx->hash[7] += v[7];

  024a2	8b 4c 24 34	 mov	 ecx, DWORD PTR _v$[esp+260]
  024a6	11 50 3c	 adc	 DWORD PTR [eax+60], edx
  024a9	01 48 40	 add	 DWORD PTR [eax+64], ecx
  024ac	8b 54 24 38	 mov	 edx, DWORD PTR _v$[esp+264]
  024b0	8b 4c 24 3c	 mov	 ecx, DWORD PTR _v$[esp+268]
  024b4	11 50 44	 adc	 DWORD PTR [eax+68], edx
  024b7	01 48 48	 add	 DWORD PTR [eax+72], ecx
  024ba	8b 54 24 40	 mov	 edx, DWORD PTR _v$[esp+272]
  024be	11 50 4c	 adc	 DWORD PTR [eax+76], edx

; 533  : }

  024c1	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  024c7	c3		 ret	 0
_sha512_compile ENDP
_TEXT	ENDS
PUBLIC	_sha512_hash
; Function compile flags: /Ogtpy
;	COMDAT _sha512_hash
_TEXT	SEGMENT
_sp$ = -4						; size = 4
_pos$ = 8						; size = 4
_data$ = 8						; size = 4
_len$ = 12						; size = 4
_ctx$ = 16						; size = 4
_sha512_hash PROC					; COMDAT

; 543  : {   uint_32t pos = (uint_32t)(ctx->count[0] & SHA512_MASK),

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	8b 5c 24 14	 mov	 ebx, DWORD PTR _ctx$[esp+4]
  00006	8b 03		 mov	 eax, DWORD PTR [ebx]
  00008	55		 push	 ebp

; 544  :              space = SHA512_BLOCK_SIZE - pos;
; 545  :     const unsigned char *sp = data;
; 546  : 
; 547  :     if((ctx->count[0] += len) < len)

  00009	8b 6c 24 14	 mov	 ebp, DWORD PTR _len$[esp+8]
  0000d	56		 push	 esi
  0000e	8b 74 24 14	 mov	 esi, DWORD PTR _data$[esp+12]
  00012	57		 push	 edi
  00013	83 e0 7f	 and	 eax, 127		; 0000007fH
  00016	bf 80 00 00 00	 mov	 edi, 128		; 00000080H
  0001b	33 c9		 xor	 ecx, ecx
  0001d	2b f8		 sub	 edi, eax
  0001f	01 2b		 add	 DWORD PTR [ebx], ebp
  00021	11 4b 04	 adc	 DWORD PTR [ebx+4], ecx
  00024	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00027	3b d1		 cmp	 edx, ecx
  00029	77 10		 ja	 SHORT $LN8@sha512_has
  0002b	72 06		 jb	 SHORT $LN13@sha512_has
  0002d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0002f	3b cd		 cmp	 ecx, ebp
  00031	73 08		 jae	 SHORT $LN8@sha512_has
$LN13@sha512_has:

; 548  :         ++(ctx->count[1]);

  00033	83 43 08 01	 add	 DWORD PTR [ebx+8], 1
  00037	83 53 0c 00	 adc	 DWORD PTR [ebx+12], 0
$LN8@sha512_has:

; 549  : 
; 550  :     while(len >= space)     /* tranfer whole blocks while possible  */

  0003b	3b ef		 cmp	 ebp, edi
  0003d	0f 82 9a 00 00
	00		 jb	 $LN3@sha512_has
$LL4@sha512_has:

; 551  :     {
; 552  :         memcpy(((unsigned char*)ctx->wbuf) + pos, sp, space);

  00043	57		 push	 edi
  00044	8d 54 03 50	 lea	 edx, DWORD PTR [ebx+eax+80]
  00048	56		 push	 esi
  00049	52		 push	 edx
  0004a	e8 00 00 00 00	 call	 _memcpy

; 553  :         sp += space; len -= space; space = SHA512_BLOCK_SIZE; pos = 0;

  0004f	03 f7		 add	 esi, edi
  00051	83 c4 0c	 add	 esp, 12			; 0000000cH
  00054	2b ef		 sub	 ebp, edi
  00056	89 74 24 10	 mov	 DWORD PTR _sp$[esp+20], esi
  0005a	89 6c 24 1c	 mov	 DWORD PTR _len$[esp+16], ebp
  0005e	bf 80 00 00 00	 mov	 edi, 128		; 00000080H
  00063	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR _pos$[esp+16], 0

; 554  :         bsw_64(ctx->wbuf, SHA512_BLOCK_SIZE >> 3);

  0006b	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  00070	8d 93 d0 00 00
	00		 lea	 edx, DWORD PTR [ebx+208]
$LL2@sha512_has:
  00076	8b 42 f8	 mov	 eax, DWORD PTR [edx-8]
  00079	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0007c	83 ea 08	 sub	 edx, 8
  0007f	8b d8		 mov	 ebx, eax
  00081	4e		 dec	 esi
  00082	c1 cb 08	 ror	 ebx, 8
  00085	81 e3 00 ff 00
	ff		 and	 ebx, -16711936		; ff00ff00H
  0008b	c1 c0 08	 rol	 eax, 8
  0008e	25 ff 00 ff 00	 and	 eax, 16711935		; 00ff00ffH
  00093	0b d8		 or	 ebx, eax
  00095	8b e9		 mov	 ebp, ecx
  00097	33 c0		 xor	 eax, eax
  00099	c1 cd 08	 ror	 ebp, 8
  0009c	81 e5 00 ff 00
	ff		 and	 ebp, -16711936		; ff00ff00H
  000a2	c1 c1 08	 rol	 ecx, 8
  000a5	81 e1 ff 00 ff
	00		 and	 ecx, 16711935		; 00ff00ffH
  000ab	0b e9		 or	 ebp, ecx
  000ad	33 c9		 xor	 ecx, ecx
  000af	0b c5		 or	 eax, ebp
  000b1	0b d9		 or	 ebx, ecx
  000b3	89 02		 mov	 DWORD PTR [edx], eax
  000b5	89 5a 04	 mov	 DWORD PTR [edx+4], ebx
  000b8	85 f6		 test	 esi, esi
  000ba	75 ba		 jne	 SHORT $LL2@sha512_has

; 555  :         sha512_compile(ctx);

  000bc	8b 5c 24 20	 mov	 ebx, DWORD PTR _ctx$[esp+16]
  000c0	53		 push	 ebx
  000c1	e8 00 00 00 00	 call	 _sha512_compile
  000c6	8b 6c 24 20	 mov	 ebp, DWORD PTR _len$[esp+20]
  000ca	8b 44 24 1c	 mov	 eax, DWORD PTR _pos$[esp+20]
  000ce	8b 74 24 14	 mov	 esi, DWORD PTR _sp$[esp+24]
  000d2	83 c4 04	 add	 esp, 4
  000d5	3b ef		 cmp	 ebp, edi
  000d7	0f 83 66 ff ff
	ff		 jae	 $LL4@sha512_has
$LN3@sha512_has:

; 556  :     }
; 557  : 
; 558  :     memcpy(((unsigned char*)ctx->wbuf) + pos, sp, len);

  000dd	55		 push	 ebp
  000de	8d 54 18 50	 lea	 edx, DWORD PTR [eax+ebx+80]
  000e2	56		 push	 esi
  000e3	52		 push	 edx
  000e4	e8 00 00 00 00	 call	 _memcpy
  000e9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	5d		 pop	 ebp
  000ef	5b		 pop	 ebx

; 559  : }

  000f0	59		 pop	 ecx
  000f1	c3		 ret	 0
_sha512_hash ENDP
_TEXT	ENDS
EXTRN	__aullshr:PROC
EXTRN	__allshl:PROC
; Function compile flags: /Ogtpy
;	COMDAT _sha_end2
_TEXT	SEGMENT
_i$ = -4						; size = 4
_hval$ = 8						; size = 4
_hlen$ = 12						; size = 4
_sha_end2 PROC						; COMDAT
; _ctx$ = ebx

; 564  : {   uint_32t    i = (uint_32t)(ctx->count[0] & SHA512_MASK);

  00000	51		 push	 ecx
  00001	55		 push	 ebp
  00002	56		 push	 esi
  00003	57		 push	 edi
  00004	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00006	83 e7 7f	 and	 edi, 127		; 0000007fH

; 565  : 
; 566  :     /* put bytes in the buffer in an order in which references to   */
; 567  :     /* 32-bit words will put bytes with lower addresses into the    */
; 568  :     /* top of 32 bit words on BOTH big and little endian machines   */
; 569  :     bsw_64(ctx->wbuf, (i + 7) >> 3);

  00009	8d 77 07	 lea	 esi, DWORD PTR [edi+7]
  0000c	c1 ee 03	 shr	 esi, 3
  0000f	89 7c 24 0c	 mov	 DWORD PTR _i$[esp+16], edi
  00013	85 f6		 test	 esi, esi
  00015	74 53		 je	 SHORT $LN16@sha_end2

; 564  : {   uint_32t    i = (uint_32t)(ctx->count[0] & SHA512_MASK);

  00017	8d 54 f3 50	 lea	 edx, DWORD PTR [ebx+esi*8+80]
  0001b	eb 03 8d 49 00	 npad	 5
$LL10@sha_end2:

; 565  : 
; 566  :     /* put bytes in the buffer in an order in which references to   */
; 567  :     /* 32-bit words will put bytes with lower addresses into the    */
; 568  :     /* top of 32 bit words on BOTH big and little endian machines   */
; 569  :     bsw_64(ctx->wbuf, (i + 7) >> 3);

  00020	8b 42 f8	 mov	 eax, DWORD PTR [edx-8]
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	83 ea 08	 sub	 edx, 8
  00029	8b f8		 mov	 edi, eax
  0002b	4e		 dec	 esi
  0002c	c1 cf 08	 ror	 edi, 8
  0002f	81 e7 00 ff 00
	ff		 and	 edi, -16711936		; ff00ff00H
  00035	c1 c0 08	 rol	 eax, 8
  00038	25 ff 00 ff 00	 and	 eax, 16711935		; 00ff00ffH
  0003d	0b f8		 or	 edi, eax
  0003f	8b e9		 mov	 ebp, ecx
  00041	33 c0		 xor	 eax, eax
  00043	c1 cd 08	 ror	 ebp, 8
  00046	81 e5 00 ff 00
	ff		 and	 ebp, -16711936		; ff00ff00H
  0004c	c1 c1 08	 rol	 ecx, 8
  0004f	81 e1 ff 00 ff
	00		 and	 ecx, 16711935		; 00ff00ffH
  00055	0b e9		 or	 ebp, ecx
  00057	33 c9		 xor	 ecx, ecx
  00059	0b c5		 or	 eax, ebp
  0005b	0b f9		 or	 edi, ecx
  0005d	89 02		 mov	 DWORD PTR [edx], eax
  0005f	89 7a 04	 mov	 DWORD PTR [edx+4], edi
  00062	85 f6		 test	 esi, esi
  00064	75 ba		 jne	 SHORT $LL10@sha_end2
  00066	8b 7c 24 0c	 mov	 edi, DWORD PTR _i$[esp+16]
$LN16@sha_end2:

; 570  : 
; 571  :     /* we now need to mask valid bytes and add the padding which is */
; 572  :     /* a single 1 bit and as many zero bits as necessary. Note that */
; 573  :     /* we can always add the first padding byte here because the    */
; 574  :     /* buffer always has at least one empty slot                    */
; 575  :     ctx->wbuf[i >> 3] &= li_64(ffffffffffffff00) << 8 * (~i & 7);

  0006a	8b ef		 mov	 ebp, edi
  0006c	f7 d5		 not	 ebp
  0006e	83 e5 07	 and	 ebp, 7
  00071	03 ed		 add	 ebp, ebp
  00073	03 ed		 add	 ebp, ebp
  00075	03 ed		 add	 ebp, ebp
  00077	8b f7		 mov	 esi, edi
  00079	b8 00 ff ff ff	 mov	 eax, -256		; ffffff00H
  0007e	83 ca ff	 or	 edx, -1
  00081	8b cd		 mov	 ecx, ebp
  00083	c1 ee 03	 shr	 esi, 3
  00086	e8 00 00 00 00	 call	 __allshl
  0008b	21 44 f3 50	 and	 DWORD PTR [ebx+esi*8+80], eax
  0008f	21 54 f3 54	 and	 DWORD PTR [ebx+esi*8+84], edx

; 576  :     ctx->wbuf[i >> 3] |= li_64(0000000000000080) << 8 * (~i & 7);

  00093	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  00098	33 d2		 xor	 edx, edx
  0009a	8b cd		 mov	 ecx, ebp
  0009c	e8 00 00 00 00	 call	 __allshl
  000a1	09 44 f3 50	 or	 DWORD PTR [ebx+esi*8+80], eax
  000a5	09 54 f3 54	 or	 DWORD PTR [ebx+esi*8+84], edx

; 577  : 
; 578  :     /* we need 17 or more empty byte positions, one for the padding */
; 579  :     /* byte (above) and sixteen for the length count.  If there is  */
; 580  :     /* not enough space pad and empty the buffer                    */
; 581  :     if(i > SHA512_BLOCK_SIZE - 17)

  000a9	83 ff 6f	 cmp	 edi, 111		; 0000006fH
  000ac	76 20		 jbe	 SHORT $LN8@sha_end2

; 582  :     {
; 583  :         if(i < 120) ctx->wbuf[15] = 0;

  000ae	83 ff 78	 cmp	 edi, 120		; 00000078H
  000b1	73 0e		 jae	 SHORT $LN24@sha_end2
  000b3	33 c0		 xor	 eax, eax
  000b5	89 83 c8 00 00
	00		 mov	 DWORD PTR [ebx+200], eax
  000bb	89 83 cc 00 00
	00		 mov	 DWORD PTR [ebx+204], eax
$LN24@sha_end2:

; 584  :         sha512_compile(ctx);

  000c1	53		 push	 ebx
  000c2	e8 00 00 00 00	 call	 _sha512_compile
  000c7	83 c4 04	 add	 esp, 4

; 585  :         i = 0;

  000ca	33 c0		 xor	 eax, eax

; 586  :     }
; 587  :     else

  000cc	eb 08		 jmp	 SHORT $LN21@sha_end2
$LN8@sha_end2:

; 588  :         i = (i >> 3) + 1;

  000ce	8d 46 01	 lea	 eax, DWORD PTR [esi+1]

; 589  : 
; 590  :     while(i < 14)

  000d1	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  000d4	73 26		 jae	 SHORT $LN5@sha_end2
$LN21@sha_end2:

; 591  :         ctx->wbuf[i++] = 0;

  000d6	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  000db	2b c8		 sub	 ecx, eax
  000dd	03 c9		 add	 ecx, ecx
  000df	03 c9		 add	 ecx, ecx
  000e1	8d 74 c3 50	 lea	 esi, DWORD PTR [ebx+eax*8+80]
  000e5	03 c9		 add	 ecx, ecx
  000e7	c1 e9 02	 shr	 ecx, 2
  000ea	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  000ed	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  000f3	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  000fa	f3 a5		 rep movsd
$LN5@sha_end2:

; 592  : 
; 593  :     /* the following 64-bit length fields are assembled in the      */
; 594  :     /* wrong byte order on little endian machines but this is       */
; 595  :     /* corrected later since they are only ever used as 64-bit      */
; 596  :     /* word values.                                                 */
; 597  :     ctx->wbuf[14] = (ctx->count[1] << 3) | (ctx->count[0] >> 61);

  000fc	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  000ff	8b 73 0c	 mov	 esi, DWORD PTR [ebx+12]
  00102	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00105	8b 03		 mov	 eax, DWORD PTR [ebx]
  00107	0f a4 d6 03	 shld	 esi, edx, 3
  0010b	03 d2		 add	 edx, edx
  0010d	8b f9		 mov	 edi, ecx

; 598  :     ctx->wbuf[15] = ctx->count[0] << 3;

  0010f	0f a4 c1 03	 shld	 ecx, eax, 3
  00113	03 d2		 add	 edx, edx
  00115	03 c0		 add	 eax, eax
  00117	03 d2		 add	 edx, edx
  00119	03 c0		 add	 eax, eax
  0011b	c1 ef 1d	 shr	 edi, 29			; 0000001dH
  0011e	33 ed		 xor	 ebp, ebp
  00120	0b d7		 or	 edx, edi
  00122	03 c0		 add	 eax, eax
  00124	0b f5		 or	 esi, ebp

; 599  :     sha512_compile(ctx);

  00126	53		 push	 ebx
  00127	89 93 c0 00 00
	00		 mov	 DWORD PTR [ebx+192], edx
  0012d	89 b3 c4 00 00
	00		 mov	 DWORD PTR [ebx+196], esi
  00133	89 83 c8 00 00
	00		 mov	 DWORD PTR [ebx+200], eax
  00139	89 8b cc 00 00
	00		 mov	 DWORD PTR [ebx+204], ecx
  0013f	e8 00 00 00 00	 call	 _sha512_compile

; 600  : 
; 601  :     /* extract the hash value as bytes in case the hash buffer is   */
; 602  :     /* misaligned for 32-bit words                                  */
; 603  :     for(i = 0; i < hlen; ++i)

  00144	8b 7c 24 1c	 mov	 edi, DWORD PTR _hlen$[esp+16]
  00148	83 c4 04	 add	 esp, 4
  0014b	33 f6		 xor	 esi, esi
  0014d	85 ff		 test	 edi, edi
  0014f	76 2b		 jbe	 SHORT $LN1@sha_end2
$LL3@sha_end2:

; 604  :         hval[i] = (unsigned char)(ctx->hash[i >> 3] >> (8 * (~i & 7)));

  00151	8b ce		 mov	 ecx, esi
  00153	f7 d1		 not	 ecx
  00155	83 e1 07	 and	 ecx, 7
  00158	8b d6		 mov	 edx, esi
  0015a	c1 ea 03	 shr	 edx, 3
  0015d	8b 44 d3 10	 mov	 eax, DWORD PTR [ebx+edx*8+16]
  00161	8b 54 d3 14	 mov	 edx, DWORD PTR [ebx+edx*8+20]
  00165	03 c9		 add	 ecx, ecx
  00167	03 c9		 add	 ecx, ecx
  00169	03 c9		 add	 ecx, ecx
  0016b	e8 00 00 00 00	 call	 __aullshr
  00170	8b 4c 24 14	 mov	 ecx, DWORD PTR _hval$[esp+12]
  00174	88 04 0e	 mov	 BYTE PTR [esi+ecx], al
  00177	46		 inc	 esi
  00178	3b f7		 cmp	 esi, edi
  0017a	72 d5		 jb	 SHORT $LL3@sha_end2
$LN1@sha_end2:
  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5d		 pop	 ebp

; 605  : }

  0017f	59		 pop	 ecx
  00180	c3		 ret	 0
_sha_end2 ENDP
_TEXT	ENDS
PUBLIC	_sha384_begin
; Function compile flags: /Ogtpy
;	COMDAT _sha384_begin
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_sha384_begin PROC					; COMDAT

; 623  :     ctx->count[0] = ctx->count[1] = 0;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _ctx$[esp-4]
  00004	33 c9		 xor	 ecx, ecx
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000b	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0000e	89 08		 mov	 DWORD PTR [eax], ecx
  00010	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 624  :     memcpy(ctx->hash, i384, 8 * sizeof(uint_64t));

  00013	8d 78 10	 lea	 edi, DWORD PTR [eax+16]
  00016	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0001b	be 00 00 00 00	 mov	 esi, OFFSET _i384
  00020	f3 a5		 rep movsd
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 625  : }

  00024	c3		 ret	 0
_sha384_begin ENDP
_TEXT	ENDS
PUBLIC	_sha384_end
; Function compile flags: /Ogtpy
;	COMDAT _sha384_end
_TEXT	SEGMENT
_hval$ = 8						; size = 4
_ctx$ = 12						; size = 4
_sha384_end PROC					; COMDAT

; 629  :     sha_end2(hval, ctx, SHA384_DIGEST_SIZE);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _hval$[esp-4]
  00004	53		 push	 ebx
  00005	8b 5c 24 0c	 mov	 ebx, DWORD PTR _ctx$[esp]
  00009	6a 30		 push	 48			; 00000030H
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _sha_end2
  00011	83 c4 08	 add	 esp, 8
  00014	5b		 pop	 ebx

; 630  : }

  00015	c3		 ret	 0
_sha384_end ENDP
_TEXT	ENDS
PUBLIC	_sha384
; Function compile flags: /Ogtpy
;	COMDAT _sha384
_TEXT	SEGMENT
_cx$ = -208						; size = 208
_hval$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_sha384	PROC						; COMDAT

; 633  : {   sha384_ctx  cx[1];

  00000	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H

; 634  : 
; 635  :     sha384_begin(cx);
; 636  :     sha384_hash(data, len, cx);

  00006	8b 94 24 d8 00
	00 00		 mov	 edx, DWORD PTR _data$[esp+204]
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	33 c0		 xor	 eax, eax
  00011	57		 push	 edi
  00012	89 44 24 14	 mov	 DWORD PTR _cx$[esp+228], eax
  00016	89 44 24 18	 mov	 DWORD PTR _cx$[esp+232], eax
  0001a	89 44 24 0c	 mov	 DWORD PTR _cx$[esp+220], eax
  0001e	89 44 24 10	 mov	 DWORD PTR _cx$[esp+224], eax
  00022	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00027	be 00 00 00 00	 mov	 esi, OFFSET _i384
  0002c	8d 7c 24 1c	 lea	 edi, DWORD PTR _cx$[esp+236]
  00030	8d 44 24 0c	 lea	 eax, DWORD PTR _cx$[esp+220]
  00034	f3 a5		 rep movsd
  00036	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR _len$[esp+216]
  0003d	50		 push	 eax
  0003e	51		 push	 ecx
  0003f	52		 push	 edx
  00040	e8 00 00 00 00	 call	 _sha512_hash

; 637  :     sha_end2(hval, cx, SHA384_DIGEST_SIZE);

  00045	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR _hval$[esp+228]
  0004c	6a 30		 push	 48			; 00000030H
  0004e	50		 push	 eax
  0004f	8d 5c 24 20	 lea	 ebx, DWORD PTR _cx$[esp+240]
  00053	e8 00 00 00 00	 call	 _sha_end2
  00058	83 c4 14	 add	 esp, 20			; 00000014H
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx

; 638  : }

  0005e	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00064	c3		 ret	 0
_sha384	ENDP
_TEXT	ENDS
PUBLIC	_sha512_begin
; Function compile flags: /Ogtpy
;	COMDAT _sha512_begin
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_sha512_begin PROC					; COMDAT

; 656  :     ctx->count[0] = ctx->count[1] = 0;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _ctx$[esp-4]
  00004	33 c9		 xor	 ecx, ecx
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000b	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0000e	89 08		 mov	 DWORD PTR [eax], ecx
  00010	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 657  :     memcpy(ctx->hash, i512, 8 * sizeof(uint_64t));

  00013	8d 78 10	 lea	 edi, DWORD PTR [eax+16]
  00016	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0001b	be 00 00 00 00	 mov	 esi, OFFSET _i512
  00020	f3 a5		 rep movsd
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 658  : }

  00024	c3		 ret	 0
_sha512_begin ENDP
_TEXT	ENDS
PUBLIC	_sha512_end
; Function compile flags: /Ogtpy
;	COMDAT _sha512_end
_TEXT	SEGMENT
_hval$ = 8						; size = 4
_ctx$ = 12						; size = 4
_sha512_end PROC					; COMDAT

; 662  :     sha_end2(hval, ctx, SHA512_DIGEST_SIZE);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _hval$[esp-4]
  00004	53		 push	 ebx
  00005	8b 5c 24 0c	 mov	 ebx, DWORD PTR _ctx$[esp]
  00009	6a 40		 push	 64			; 00000040H
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _sha_end2
  00011	83 c4 08	 add	 esp, 8
  00014	5b		 pop	 ebx

; 663  : }

  00015	c3		 ret	 0
_sha512_end ENDP
_TEXT	ENDS
PUBLIC	_sha512
; Function compile flags: /Ogtpy
;	COMDAT _sha512
_TEXT	SEGMENT
_cx$ = -208						; size = 208
_hval$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_sha512	PROC						; COMDAT

; 666  : {   sha512_ctx  cx[1];

  00000	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H

; 667  : 
; 668  :     sha512_begin(cx);
; 669  :     sha512_hash(data, len, cx);

  00006	8b 94 24 d8 00
	00 00		 mov	 edx, DWORD PTR _data$[esp+204]
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	33 c0		 xor	 eax, eax
  00011	57		 push	 edi
  00012	89 44 24 14	 mov	 DWORD PTR _cx$[esp+228], eax
  00016	89 44 24 18	 mov	 DWORD PTR _cx$[esp+232], eax
  0001a	89 44 24 0c	 mov	 DWORD PTR _cx$[esp+220], eax
  0001e	89 44 24 10	 mov	 DWORD PTR _cx$[esp+224], eax
  00022	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00027	be 00 00 00 00	 mov	 esi, OFFSET _i512
  0002c	8d 7c 24 1c	 lea	 edi, DWORD PTR _cx$[esp+236]
  00030	8d 44 24 0c	 lea	 eax, DWORD PTR _cx$[esp+220]
  00034	f3 a5		 rep movsd
  00036	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR _len$[esp+216]
  0003d	50		 push	 eax
  0003e	51		 push	 ecx
  0003f	52		 push	 edx
  00040	e8 00 00 00 00	 call	 _sha512_hash

; 670  :     sha_end2(hval, cx, SHA512_DIGEST_SIZE);

  00045	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR _hval$[esp+228]
  0004c	6a 40		 push	 64			; 00000040H
  0004e	50		 push	 eax
  0004f	8d 5c 24 20	 lea	 ebx, DWORD PTR _cx$[esp+240]
  00053	e8 00 00 00 00	 call	 _sha_end2
  00058	83 c4 14	 add	 esp, 20			; 00000014H
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx

; 671  : }

  0005e	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00064	c3		 ret	 0
_sha512	ENDP
_TEXT	ENDS
PUBLIC	_sha2_begin
; Function compile flags: /Ogtpy
;	COMDAT _sha2_begin
_TEXT	SEGMENT
_len$ = 8						; size = 4
_ctx$ = 12						; size = 4
_sha2_begin PROC					; COMDAT

; 686  :     switch(len)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _len$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	3d e0 00 00 00	 cmp	 eax, 224		; 000000e0H
  0000b	77 41		 ja	 SHORT $LN10@sha2_begin
  0000d	74 16		 je	 SHORT $LN5@sha2_begin
  0000f	83 c0 e4	 add	 eax, -28		; ffffffe4H
  00012	83 f8 24	 cmp	 eax, 36			; 00000024H
  00015	77 4c		 ja	 SHORT $LN1@sha2_begin
  00017	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN11@sha2_begin[eax]
  0001e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN13@sha2_begin[eax*4]
$LN5@sha2_begin:

; 687  :     {
; 688  : #if defined(SHA_224)
; 689  :         case 224:
; 690  :         case  28:   CTX_256(ctx)->count[0] = CTX_256(ctx)->count[1] = 0;

  00025	8b 44 24 10	 mov	 eax, DWORD PTR _ctx$[esp+4]
  00029	33 c9		 xor	 ecx, ecx
  0002b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0002e	89 08		 mov	 DWORD PTR [eax], ecx

; 691  :                     memcpy(CTX_256(ctx)->hash, i224, 32);

  00030	8d 78 08	 lea	 edi, DWORD PTR [eax+8]
  00033	b9 08 00 00 00	 mov	 ecx, 8
  00038	be 00 00 00 00	 mov	 esi, OFFSET _i224
  0003d	f3 a5		 rep movsd
  0003f	5f		 pop	 edi

; 692  :                     ctx->sha2_len = 28; return EXIT_SUCCESS;

  00040	c7 80 d0 00 00
	00 1c 00 00 00	 mov	 DWORD PTR [eax+208], 28	; 0000001cH

; 698  :                     ctx->sha2_len = 32; return EXIT_SUCCESS;

  0004a	33 c0		 xor	 eax, eax
  0004c	5e		 pop	 esi

; 713  :     }
; 714  : }

  0004d	c3		 ret	 0
$LN10@sha2_begin:

; 686  :     switch(len)

  0004e	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00053	74 74		 je	 SHORT $LN4@sha2_begin
  00055	3d 80 01 00 00	 cmp	 eax, 384		; 00000180H
  0005a	74 3e		 je	 SHORT $LN3@sha2_begin
  0005c	3d 00 02 00 00	 cmp	 eax, 512		; 00000200H
  00061	74 08		 je	 SHORT $LN2@sha2_begin
$LN1@sha2_begin:
  00063	5f		 pop	 edi

; 711  : #endif
; 712  :         default:    return EXIT_FAILURE;

  00064	b8 01 00 00 00	 mov	 eax, 1
  00069	5e		 pop	 esi

; 713  :     }
; 714  : }

  0006a	c3		 ret	 0
$LN2@sha2_begin:

; 705  : #endif
; 706  : #if defined(SHA_512)
; 707  :         case 512:
; 708  :         case  64:   CTX_512(ctx)->count[0] = CTX_512(ctx)->count[1] = 0;

  0006b	8b 44 24 10	 mov	 eax, DWORD PTR _ctx$[esp+4]
  0006f	33 c9		 xor	 ecx, ecx
  00071	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00074	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00077	89 08		 mov	 DWORD PTR [eax], ecx
  00079	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 709  :                     memcpy(CTX_512(ctx)->hash, i512, 64);

  0007c	8d 78 10	 lea	 edi, DWORD PTR [eax+16]
  0007f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00084	be 00 00 00 00	 mov	 esi, OFFSET _i512
  00089	f3 a5		 rep movsd
  0008b	5f		 pop	 edi

; 710  :                     ctx->sha2_len = 64; return EXIT_SUCCESS;

  0008c	c7 80 d0 00 00
	00 40 00 00 00	 mov	 DWORD PTR [eax+208], 64	; 00000040H
  00096	33 c0		 xor	 eax, eax
  00098	5e		 pop	 esi

; 713  :     }
; 714  : }

  00099	c3		 ret	 0
$LN3@sha2_begin:

; 699  : #endif
; 700  : #if defined(SHA_384)
; 701  :         case 384:
; 702  :         case  48:   CTX_384(ctx)->count[0] = CTX_384(ctx)->count[1] = 0;

  0009a	8b 44 24 10	 mov	 eax, DWORD PTR _ctx$[esp+4]
  0009e	33 c9		 xor	 ecx, ecx
  000a0	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000a3	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  000a6	89 08		 mov	 DWORD PTR [eax], ecx
  000a8	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 703  :                     memcpy(CTX_384(ctx)->hash, i384, 64);

  000ab	8d 78 10	 lea	 edi, DWORD PTR [eax+16]
  000ae	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000b3	be 00 00 00 00	 mov	 esi, OFFSET _i384
  000b8	f3 a5		 rep movsd
  000ba	5f		 pop	 edi

; 704  :                     ctx->sha2_len = 48; return EXIT_SUCCESS;

  000bb	c7 80 d0 00 00
	00 30 00 00 00	 mov	 DWORD PTR [eax+208], 48	; 00000030H
  000c5	33 c0		 xor	 eax, eax
  000c7	5e		 pop	 esi

; 713  :     }
; 714  : }

  000c8	c3		 ret	 0
$LN4@sha2_begin:

; 693  : #endif
; 694  : #if defined(SHA_256)
; 695  :         case 256:
; 696  :         case  32:   CTX_256(ctx)->count[0] = CTX_256(ctx)->count[1] = 0;

  000c9	8b 44 24 10	 mov	 eax, DWORD PTR _ctx$[esp+4]
  000cd	33 c9		 xor	 ecx, ecx
  000cf	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000d2	89 08		 mov	 DWORD PTR [eax], ecx

; 697  :                     memcpy(CTX_256(ctx)->hash, i256, 32);

  000d4	8d 78 08	 lea	 edi, DWORD PTR [eax+8]
  000d7	b9 08 00 00 00	 mov	 ecx, 8
  000dc	be 00 00 00 00	 mov	 esi, OFFSET _i256
  000e1	f3 a5		 rep movsd
  000e3	5f		 pop	 edi

; 698  :                     ctx->sha2_len = 32; return EXIT_SUCCESS;

  000e4	c7 80 d0 00 00
	00 20 00 00 00	 mov	 DWORD PTR [eax+208], 32	; 00000020H
  000ee	33 c0		 xor	 eax, eax
  000f0	5e		 pop	 esi

; 713  :     }
; 714  : }

  000f1	c3		 ret	 0
  000f2	8b ff		 npad	 2
$LN13@sha2_begin:
  000f4	00 00 00 00	 DD	 $LN5@sha2_begin
  000f8	00 00 00 00	 DD	 $LN4@sha2_begin
  000fc	00 00 00 00	 DD	 $LN3@sha2_begin
  00100	00 00 00 00	 DD	 $LN2@sha2_begin
  00104	00 00 00 00	 DD	 $LN1@sha2_begin
$LN11@sha2_begin:
  00108	00		 DB	 0
  00109	04		 DB	 4
  0010a	04		 DB	 4
  0010b	04		 DB	 4
  0010c	01		 DB	 1
  0010d	04		 DB	 4
  0010e	04		 DB	 4
  0010f	04		 DB	 4
  00110	04		 DB	 4
  00111	04		 DB	 4
  00112	04		 DB	 4
  00113	04		 DB	 4
  00114	04		 DB	 4
  00115	04		 DB	 4
  00116	04		 DB	 4
  00117	04		 DB	 4
  00118	04		 DB	 4
  00119	04		 DB	 4
  0011a	04		 DB	 4
  0011b	04		 DB	 4
  0011c	02		 DB	 2
  0011d	04		 DB	 4
  0011e	04		 DB	 4
  0011f	04		 DB	 4
  00120	04		 DB	 4
  00121	04		 DB	 4
  00122	04		 DB	 4
  00123	04		 DB	 4
  00124	04		 DB	 4
  00125	04		 DB	 4
  00126	04		 DB	 4
  00127	04		 DB	 4
  00128	04		 DB	 4
  00129	04		 DB	 4
  0012a	04		 DB	 4
  0012b	04		 DB	 4
  0012c	03		 DB	 3
_sha2_begin ENDP
_TEXT	ENDS
PUBLIC	_sha2_hash
; Function compile flags: /Ogtpy
;	COMDAT _sha2_hash
_TEXT	SEGMENT
_data$ = 8						; size = 4
_len$ = 12						; size = 4
_ctx$ = 16						; size = 4
_sha2_hash PROC						; COMDAT

; 718  :     switch(ctx->sha2_len)

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR _ctx$[esp-4]
  00004	8b 81 d0 00 00
	00		 mov	 eax, DWORD PTR [ecx+208]
  0000a	83 c0 e4	 add	 eax, -28		; ffffffe4H
  0000d	83 f8 24	 cmp	 eax, 36			; 00000024H
  00010	77 32		 ja	 SHORT $LN5@sha2_hash
  00012	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN9@sha2_hash[eax]
  00019	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN11@sha2_hash[eax*4]
$LN4@sha2_hash:

; 719  :     {
; 720  : #if defined(SHA_224)
; 721  :         case 28: sha224_hash(data, len, CTX_224(ctx)); return;

  00020	89 4c 24 0c	 mov	 DWORD PTR _ctx$[esp-4], ecx
  00024	e9 00 00 00 00	 jmp	 _sha256_hash
$LN3@sha2_hash:

; 722  : #endif
; 723  : #if defined(SHA_256)
; 724  :         case 32: sha256_hash(data, len, CTX_256(ctx)); return;

  00029	89 4c 24 0c	 mov	 DWORD PTR _ctx$[esp-4], ecx
  0002d	e9 00 00 00 00	 jmp	 _sha256_hash
$LN2@sha2_hash:

; 725  : #endif
; 726  : #if defined(SHA_384)
; 727  :         case 48: sha384_hash(data, len, CTX_384(ctx)); return;

  00032	89 4c 24 0c	 mov	 DWORD PTR _ctx$[esp-4], ecx
  00036	e9 00 00 00 00	 jmp	 _sha512_hash
$LN1@sha2_hash:

; 728  : #endif
; 729  : #if defined(SHA_512)
; 730  :         case 64: sha512_hash(data, len, CTX_512(ctx)); return;

  0003b	89 4c 24 0c	 mov	 DWORD PTR _ctx$[esp-4], ecx
  0003f	e9 00 00 00 00	 jmp	 _sha512_hash
$LN5@sha2_hash:

; 731  : #endif
; 732  :     }
; 733  : }

  00044	c3		 ret	 0
  00045	8d 49 00	 npad	 3
$LN11@sha2_hash:
  00048	00 00 00 00	 DD	 $LN4@sha2_hash
  0004c	00 00 00 00	 DD	 $LN3@sha2_hash
  00050	00 00 00 00	 DD	 $LN2@sha2_hash
  00054	00 00 00 00	 DD	 $LN1@sha2_hash
  00058	00 00 00 00	 DD	 $LN5@sha2_hash
$LN9@sha2_hash:
  0005c	00		 DB	 0
  0005d	04		 DB	 4
  0005e	04		 DB	 4
  0005f	04		 DB	 4
  00060	01		 DB	 1
  00061	04		 DB	 4
  00062	04		 DB	 4
  00063	04		 DB	 4
  00064	04		 DB	 4
  00065	04		 DB	 4
  00066	04		 DB	 4
  00067	04		 DB	 4
  00068	04		 DB	 4
  00069	04		 DB	 4
  0006a	04		 DB	 4
  0006b	04		 DB	 4
  0006c	04		 DB	 4
  0006d	04		 DB	 4
  0006e	04		 DB	 4
  0006f	04		 DB	 4
  00070	02		 DB	 2
  00071	04		 DB	 4
  00072	04		 DB	 4
  00073	04		 DB	 4
  00074	04		 DB	 4
  00075	04		 DB	 4
  00076	04		 DB	 4
  00077	04		 DB	 4
  00078	04		 DB	 4
  00079	04		 DB	 4
  0007a	04		 DB	 4
  0007b	04		 DB	 4
  0007c	04		 DB	 4
  0007d	04		 DB	 4
  0007e	04		 DB	 4
  0007f	04		 DB	 4
  00080	03		 DB	 3
_sha2_hash ENDP
_TEXT	ENDS
PUBLIC	_sha2_end
; Function compile flags: /Ogtpy
;	COMDAT _sha2_end
_TEXT	SEGMENT
_hval$ = 8						; size = 4
_ctx$ = 12						; size = 4
_sha2_end PROC						; COMDAT

; 736  : {

  00000	56		 push	 esi

; 737  :     switch(ctx->sha2_len)

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR _ctx$[esp]
  00005	8b 86 d0 00 00
	00		 mov	 eax, DWORD PTR [esi+208]
  0000b	83 c0 e4	 add	 eax, -28		; ffffffe4H
  0000e	83 f8 24	 cmp	 eax, 36			; 00000024H
  00011	77 59		 ja	 SHORT $LN5@sha2_end
  00013	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN9@sha2_end[eax]
  0001a	53		 push	 ebx
  0001b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN13@sha2_end[eax*4]
$LN4@sha2_end:

; 738  :     {
; 739  : #if defined(SHA_224)
; 740  :         case 28: sha_end1(hval, CTX_224(ctx), SHA224_DIGEST_SIZE); return;

  00022	8b 4c 24 0c	 mov	 ecx, DWORD PTR _hval$[esp+4]
  00026	6a 1c		 push	 28			; 0000001cH
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 _sha_end1

; 747  : #endif
; 748  : #if defined(SHA_512)
; 749  :         case 64: sha_end2(hval, CTX_512(ctx), SHA512_DIGEST_SIZE); return;

  0002e	83 c4 08	 add	 esp, 8
  00031	5b		 pop	 ebx
  00032	5e		 pop	 esi

; 750  : #endif
; 751  :     }
; 752  : }

  00033	c3		 ret	 0
$LN3@sha2_end:

; 741  : #endif
; 742  : #if defined(SHA_256)
; 743  :         case 32: sha_end1(hval, CTX_256(ctx), SHA256_DIGEST_SIZE); return;

  00034	8b 54 24 0c	 mov	 edx, DWORD PTR _hval$[esp+4]
  00038	6a 20		 push	 32			; 00000020H
  0003a	52		 push	 edx
  0003b	e8 00 00 00 00	 call	 _sha_end1

; 747  : #endif
; 748  : #if defined(SHA_512)
; 749  :         case 64: sha_end2(hval, CTX_512(ctx), SHA512_DIGEST_SIZE); return;

  00040	83 c4 08	 add	 esp, 8
  00043	5b		 pop	 ebx
  00044	5e		 pop	 esi

; 750  : #endif
; 751  :     }
; 752  : }

  00045	c3		 ret	 0
$LN2@sha2_end:

; 744  : #endif
; 745  : #if defined(SHA_384)
; 746  :         case 48: sha_end2(hval, CTX_384(ctx), SHA384_DIGEST_SIZE); return;

  00046	8b 44 24 0c	 mov	 eax, DWORD PTR _hval$[esp+4]
  0004a	6a 30		 push	 48			; 00000030H
  0004c	50		 push	 eax

; 747  : #endif
; 748  : #if defined(SHA_512)
; 749  :         case 64: sha_end2(hval, CTX_512(ctx), SHA512_DIGEST_SIZE); return;

  0004d	8b de		 mov	 ebx, esi
  0004f	e8 00 00 00 00	 call	 _sha_end2
  00054	83 c4 08	 add	 esp, 8
  00057	5b		 pop	 ebx
  00058	5e		 pop	 esi

; 750  : #endif
; 751  :     }
; 752  : }

  00059	c3		 ret	 0
$LN1@sha2_end:

; 747  : #endif
; 748  : #if defined(SHA_512)
; 749  :         case 64: sha_end2(hval, CTX_512(ctx), SHA512_DIGEST_SIZE); return;

  0005a	8b 4c 24 0c	 mov	 ecx, DWORD PTR _hval$[esp+4]
  0005e	6a 40		 push	 64			; 00000040H
  00060	51		 push	 ecx
  00061	8b de		 mov	 ebx, esi
  00063	e8 00 00 00 00	 call	 _sha_end2
  00068	83 c4 08	 add	 esp, 8
$LN10@sha2_end:
  0006b	5b		 pop	 ebx
$LN5@sha2_end:
  0006c	5e		 pop	 esi

; 750  : #endif
; 751  :     }
; 752  : }

  0006d	c3		 ret	 0
  0006e	8b ff		 npad	 2
$LN13@sha2_end:
  00070	00 00 00 00	 DD	 $LN4@sha2_end
  00074	00 00 00 00	 DD	 $LN3@sha2_end
  00078	00 00 00 00	 DD	 $LN2@sha2_end
  0007c	00 00 00 00	 DD	 $LN1@sha2_end
  00080	00 00 00 00	 DD	 $LN10@sha2_end
$LN9@sha2_end:
  00084	00		 DB	 0
  00085	04		 DB	 4
  00086	04		 DB	 4
  00087	04		 DB	 4
  00088	01		 DB	 1
  00089	04		 DB	 4
  0008a	04		 DB	 4
  0008b	04		 DB	 4
  0008c	04		 DB	 4
  0008d	04		 DB	 4
  0008e	04		 DB	 4
  0008f	04		 DB	 4
  00090	04		 DB	 4
  00091	04		 DB	 4
  00092	04		 DB	 4
  00093	04		 DB	 4
  00094	04		 DB	 4
  00095	04		 DB	 4
  00096	04		 DB	 4
  00097	04		 DB	 4
  00098	02		 DB	 2
  00099	04		 DB	 4
  0009a	04		 DB	 4
  0009b	04		 DB	 4
  0009c	04		 DB	 4
  0009d	04		 DB	 4
  0009e	04		 DB	 4
  0009f	04		 DB	 4
  000a0	04		 DB	 4
  000a1	04		 DB	 4
  000a2	04		 DB	 4
  000a3	04		 DB	 4
  000a4	04		 DB	 4
  000a5	04		 DB	 4
  000a6	04		 DB	 4
  000a7	04		 DB	 4
  000a8	03		 DB	 3
_sha2_end ENDP
_TEXT	ENDS
PUBLIC	_sha2
; Function compile flags: /Ogtpy
;	COMDAT _sha2
_TEXT	SEGMENT
_cx$ = -216						; size = 216
_hval$ = 8						; size = 4
_size$ = 12						; size = 4
_data$ = 16						; size = 4
_len$ = 20						; size = 4
_sha2	PROC						; COMDAT

; 757  : 
; 758  :     if(sha2_begin(size, cx) == EXIT_SUCCESS)

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR _size$[esp-4]
  00004	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  0000a	8d 04 24	 lea	 eax, DWORD PTR _cx$[esp+216]
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 _sha2_begin
  00014	83 c4 08	 add	 esp, 8
  00017	85 c0		 test	 eax, eax
  00019	75 37		 jne	 SHORT $LN2@sha2

; 759  :     {
; 760  :         sha2_hash(data, len, cx); sha2_end(hval, cx); return EXIT_SUCCESS;

  0001b	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR _len$[esp+212]
  00022	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR _data$[esp+212]
  00029	8d 14 24	 lea	 edx, DWORD PTR _cx$[esp+216]
  0002c	52		 push	 edx
  0002d	50		 push	 eax
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 _sha2_hash
  00034	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR _hval$[esp+224]
  0003b	8d 54 24 0c	 lea	 edx, DWORD PTR _cx$[esp+228]
  0003f	52		 push	 edx
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 _sha2_end
  00046	83 c4 14	 add	 esp, 20			; 00000014H
  00049	33 c0		 xor	 eax, eax

; 764  : }

  0004b	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00051	c3		 ret	 0
$LN2@sha2:

; 761  :     }
; 762  :     else
; 763  :         return EXIT_FAILURE;

  00052	b8 01 00 00 00	 mov	 eax, 1

; 764  : }

  00057	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0005d	c3		 ret	 0
_sha2	ENDP
_TEXT	ENDS
END
