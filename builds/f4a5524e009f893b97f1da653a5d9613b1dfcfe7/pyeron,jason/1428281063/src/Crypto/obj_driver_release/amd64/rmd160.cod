; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

PADDING	DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
; Function compile flags: /Ogspy
; File c:\home\public\desktop\projects\ciphershed.build\src\crypto\rmd160.c
;	COMDAT rotlFixed
_TEXT	SEGMENT
x$ = 8
y$ = 16
rotlFixed PROC						; COMDAT

; 165  : {

  00000	8b c1		 mov	 eax, ecx

; 166  : 	return (word32)((x<<y) | (x>>(sizeof(word32)*8-y)));

  00002	8b ca		 mov	 ecx, edx
  00004	d3 c0		 rol	 eax, cl

; 167  : }

  00006	c3		 ret	 0
rotlFixed ENDP
_TEXT	ENDS
PUBLIC	RMD160Init
; Function compile flags: /Ogspy
;	COMDAT RMD160Init
_TEXT	SEGMENT
ctx$ = 8
RMD160Init PROC						; COMDAT

; 55   : 	ctx->count = 0;

  00000	48 83 61 18 00	 and	 QWORD PTR [rcx+24], 0

; 56   : 	ctx->state[0] = 0x67452301;

  00005	c7 01 01 23 45
	67		 mov	 DWORD PTR [rcx], 1732584193 ; 67452301H

; 57   : 	ctx->state[1] = 0xefcdab89;

  0000b	c7 41 04 89 ab
	cd ef		 mov	 DWORD PTR [rcx+4], -271733879 ; efcdab89H

; 58   : 	ctx->state[2] = 0x98badcfe;

  00012	c7 41 08 fe dc
	ba 98		 mov	 DWORD PTR [rcx+8], -1732584194 ; 98badcfeH

; 59   : 	ctx->state[3] = 0x10325476;

  00019	c7 41 0c 76 54
	32 10		 mov	 DWORD PTR [rcx+12], 271733878 ; 10325476H

; 60   : 	ctx->state[4] = 0xc3d2e1f0;

  00020	c7 41 10 f0 e1
	d2 c3		 mov	 DWORD PTR [rcx+16], -1009589776 ; c3d2e1f0H

; 61   : 	PADDING[0] = 0x80;

  00027	c6 05 00 00 00
	00 80		 mov	 BYTE PTR PADDING, 128	; 00000080H

; 62   : }

  0002e	c3		 ret	 0
RMD160Init ENDP
PUBLIC	RMD160Transform
;	COMDAT pdata
pdata	SEGMENT
$pdata$RMD160Transform DD imagerel $LN643
	DD	imagerel $LN643+5165
	DD	imagerel $unwind$RMD160Transform
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RMD160Transform DD 091a01H
	DD	0f016221aH
	DD	0d012e014H
	DD	0700ec010H
	DD	0500c600dH
	DD	0300bH
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT RMD160Transform
_TEXT	SEGMENT
tv5672 = 0
tv5676 = 4
tv5667 = 8
tv5662 = 12
digest$ = 96
data$ = 104
tv5660 = 112
tv5673 = 120
RMD160Transform PROC					; COMDAT

; 175  : {

$LN643:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	53		 push	 rbx
  0000b	55		 push	 rbp
  0000c	56		 push	 rsi
  0000d	57		 push	 rdi
  0000e	41 54		 push	 r12
  00010	41 55		 push	 r13
  00012	41 56		 push	 r14
  00014	41 57		 push	 r15
  00016	48 83 ec 18	 sub	 rsp, 24

; 176  : #if BYTE_ORDER == LITTLE_ENDIAN
; 177  : 	const word32 *X = data;
; 178  : #else
; 179  : 	word32 X[16];
; 180  : 	int i;
; 181  : #endif
; 182  : 
; 183  : 	word32 a1, b1, c1, d1, e1, a2, b2, c2, d2, e2;
; 184  : 	a1 = a2 = digest[0];
; 185  : 	b1 = b2 = digest[1];
; 186  : 	c1 = c2 = digest[2];
; 187  : 	d1 = d2 = digest[3];
; 188  : 	e1 = e2 = digest[4];
; 189  : 
; 190  : #if BYTE_ORDER == BIG_ENDIAN
; 191  : 	for (i = 0; i < 16; i++)
; 192  : 	{
; 193  : 		X[i] = LE32 (data[i]);
; 194  : 	}
; 195  : #endif
; 196  : 
; 197  : 	Subround(F, a1, b1, c1, d1, e1, X[ 0], 11, k0);

  0001a	8b 02		 mov	 eax, DWORD PTR [rdx]
  0001c	44 8b 49 0c	 mov	 r9d, DWORD PTR [rcx+12]
  00020	48 8b da	 mov	 rbx, rdx

; 198  : 	Subround(F, e1, a1, b1, c1, d1, X[ 1], 14, k0);
; 199  : 	Subround(F, d1, e1, a1, b1, c1, X[ 2], 15, k0);
; 200  : 	Subround(F, c1, d1, e1, a1, b1, X[ 3], 12, k0);

  00023	8b 73 0c	 mov	 esi, DWORD PTR [rbx+12]

; 201  : 	Subround(F, b1, c1, d1, e1, a1, X[ 4],  5, k0);

  00026	44 8b 7b 10	 mov	 r15d, DWORD PTR [rbx+16]

; 202  : 	Subround(F, a1, b1, c1, d1, e1, X[ 5],  8, k0);
; 203  : 	Subround(F, e1, a1, b1, c1, d1, X[ 6],  7, k0);

  0002a	8b 7b 18	 mov	 edi, DWORD PTR [rbx+24]

; 204  : 	Subround(F, d1, e1, a1, b1, c1, X[ 7],  9, k0);
; 205  : 	Subround(F, c1, d1, e1, a1, b1, X[ 8], 11, k0);

  0002d	44 8b 63 20	 mov	 r12d, DWORD PTR [rbx+32]
  00031	4c 8b d1	 mov	 r10, rcx
  00034	8b 49 10	 mov	 ecx, DWORD PTR [rcx+16]
  00037	45 8b 72 08	 mov	 r14d, DWORD PTR [r10+8]
  0003b	45 8b 6a 04	 mov	 r13d, DWORD PTR [r10+4]
  0003f	41 8b d1	 mov	 edx, r9d
  00042	41 33 52 08	 xor	 edx, DWORD PTR [r10+8]
  00046	89 44 24 04	 mov	 DWORD PTR tv5676[rsp], eax
  0004a	89 34 24	 mov	 DWORD PTR tv5672[rsp], esi
  0004d	41 33 52 04	 xor	 edx, DWORD PTR [r10+4]
  00051	89 7c 24 08	 mov	 DWORD PTR tv5667[rsp], edi
  00055	03 d0		 add	 edx, eax
  00057	41 03 12	 add	 edx, DWORD PTR [r10]
  0005a	c1 c2 0b	 rol	 edx, 11
  0005d	03 d1		 add	 edx, ecx
  0005f	41 c1 c6 0a	 rol	 r14d, 10
  00063	45 8b c6	 mov	 r8d, r14d
  00066	45 33 42 04	 xor	 r8d, DWORD PTR [r10+4]
  0006a	44 33 c2	 xor	 r8d, edx
  0006d	44 03 43 04	 add	 r8d, DWORD PTR [rbx+4]
  00071	44 03 c1	 add	 r8d, ecx
  00074	8b 4b 08	 mov	 ecx, DWORD PTR [rbx+8]
  00077	41 c1 c0 0e	 rol	 r8d, 14
  0007b	89 4c 24 78	 mov	 DWORD PTR tv5673[rsp], ecx
  0007f	45 03 c1	 add	 r8d, r9d
  00082	41 c1 c5 0a	 rol	 r13d, 10
  00086	41 8b c0	 mov	 eax, r8d
  00089	41 33 c5	 xor	 eax, r13d
  0008c	33 c2		 xor	 eax, edx
  0008e	03 c1		 add	 eax, ecx
  00090	41 03 c1	 add	 eax, r9d
  00093	45 8b c8	 mov	 r9d, r8d
  00096	c1 c0 0f	 rol	 eax, 15
  00099	41 03 c6	 add	 eax, r14d
  0009c	c1 c2 0a	 rol	 edx, 10
  0009f	44 33 c8	 xor	 r9d, eax
  000a2	44 33 ca	 xor	 r9d, edx
  000a5	44 03 ce	 add	 r9d, esi
  000a8	45 03 ce	 add	 r9d, r14d
  000ab	41 c1 c1 0c	 rol	 r9d, 12
  000af	45 03 cd	 add	 r9d, r13d
  000b2	41 c1 c0 0a	 rol	 r8d, 10
  000b6	45 8b d8	 mov	 r11d, r8d
  000b9	44 33 d8	 xor	 r11d, eax
  000bc	45 33 d9	 xor	 r11d, r9d
  000bf	45 03 df	 add	 r11d, r15d
  000c2	45 03 dd	 add	 r11d, r13d
  000c5	41 c1 c3 05	 rol	 r11d, 5
  000c9	44 03 da	 add	 r11d, edx
  000cc	c1 c0 0a	 rol	 eax, 10
  000cf	8b c8		 mov	 ecx, eax
  000d1	41 33 c9	 xor	 ecx, r9d
  000d4	41 33 cb	 xor	 ecx, r11d
  000d7	03 4b 14	 add	 ecx, DWORD PTR [rbx+20]
  000da	03 ca		 add	 ecx, edx
  000dc	c1 c1 08	 rol	 ecx, 8
  000df	41 03 c8	 add	 ecx, r8d
  000e2	41 c1 c1 0a	 rol	 r9d, 10
  000e6	41 8b d1	 mov	 edx, r9d
  000e9	41 33 d3	 xor	 edx, r11d
  000ec	33 d1		 xor	 edx, ecx
  000ee	03 d7		 add	 edx, edi
  000f0	41 03 d0	 add	 edx, r8d
  000f3	c1 c2 07	 rol	 edx, 7
  000f6	03 d0		 add	 edx, eax
  000f8	41 c1 c3 0a	 rol	 r11d, 10
  000fc	44 8b c2	 mov	 r8d, edx
  000ff	45 33 c3	 xor	 r8d, r11d
  00102	44 33 c1	 xor	 r8d, ecx
  00105	44 03 43 1c	 add	 r8d, DWORD PTR [rbx+28]
  00109	44 03 c0	 add	 r8d, eax
  0010c	8b c2		 mov	 eax, edx
  0010e	41 c1 c0 09	 rol	 r8d, 9
  00112	45 03 c1	 add	 r8d, r9d
  00115	c1 c1 0a	 rol	 ecx, 10
  00118	41 33 c0	 xor	 eax, r8d

; 206  : 	Subround(F, b1, c1, d1, e1, a1, X[ 9], 13, k0);
; 207  : 	Subround(F, a1, b1, c1, d1, e1, X[10], 14, k0);

  0011b	8b 6b 28	 mov	 ebp, DWORD PTR [rbx+40]
  0011e	33 c1		 xor	 eax, ecx
  00120	41 03 c4	 add	 eax, r12d
  00123	41 03 c1	 add	 eax, r9d
  00126	44 8b 4b 24	 mov	 r9d, DWORD PTR [rbx+36]
  0012a	c1 c0 0b	 rol	 eax, 11
  0012d	44 89 4c 24 0c	 mov	 DWORD PTR tv5662[rsp], r9d
  00132	41 03 c3	 add	 eax, r11d
  00135	c1 c2 0a	 rol	 edx, 10
  00138	44 8b d2	 mov	 r10d, edx
  0013b	45 33 d0	 xor	 r10d, r8d
  0013e	44 33 d0	 xor	 r10d, eax
  00141	45 03 d1	 add	 r10d, r9d

; 208  : 	Subround(F, e1, a1, b1, c1, d1, X[11], 15, k0);

  00144	44 8b 4b 2c	 mov	 r9d, DWORD PTR [rbx+44]
  00148	45 03 d3	 add	 r10d, r11d
  0014b	44 89 4c 24 70	 mov	 DWORD PTR tv5660[rsp], r9d
  00150	41 c1 c2 0d	 rol	 r10d, 13
  00154	44 03 d1	 add	 r10d, ecx
  00157	41 c1 c0 0a	 rol	 r8d, 10
  0015b	45 8b d8	 mov	 r11d, r8d
  0015e	44 33 d8	 xor	 r11d, eax
  00161	45 33 da	 xor	 r11d, r10d
  00164	44 03 dd	 add	 r11d, ebp
  00167	44 03 d9	 add	 r11d, ecx
  0016a	41 c1 c3 0e	 rol	 r11d, 14
  0016e	44 03 da	 add	 r11d, edx
  00171	c1 c0 0a	 rol	 eax, 10
  00174	8b c8		 mov	 ecx, eax
  00176	41 33 ca	 xor	 ecx, r10d
  00179	41 33 cb	 xor	 ecx, r11d
  0017c	41 03 c9	 add	 ecx, r9d
  0017f	03 ca		 add	 ecx, edx
  00181	c1 c1 0f	 rol	 ecx, 15
  00184	41 03 c8	 add	 ecx, r8d
  00187	41 c1 c2 0a	 rol	 r10d, 10

; 209  : 	Subround(F, d1, e1, a1, b1, c1, X[12],  6, k0);

  0018b	8b d1		 mov	 edx, ecx
  0018d	41 33 d2	 xor	 edx, r10d
  00190	41 33 d3	 xor	 edx, r11d
  00193	03 53 30	 add	 edx, DWORD PTR [rbx+48]
  00196	41 03 d0	 add	 edx, r8d

; 210  : 	Subround(F, c1, d1, e1, a1, b1, X[13],  7, k0);

  00199	44 8b c1	 mov	 r8d, ecx
  0019c	c1 c2 06	 rol	 edx, 6
  0019f	03 d0		 add	 edx, eax
  001a1	41 c1 c3 0a	 rol	 r11d, 10
  001a5	44 33 c2	 xor	 r8d, edx
  001a8	45 33 c3	 xor	 r8d, r11d
  001ab	44 03 43 34	 add	 r8d, DWORD PTR [rbx+52]
  001af	44 03 c0	 add	 r8d, eax
  001b2	41 c1 c0 07	 rol	 r8d, 7
  001b6	45 03 c2	 add	 r8d, r10d
  001b9	c1 c1 0a	 rol	 ecx, 10

; 211  : 	Subround(F, b1, c1, d1, e1, a1, X[14],  9, k0);

  001bc	44 8b c9	 mov	 r9d, ecx
  001bf	44 33 ca	 xor	 r9d, edx
  001c2	45 33 c8	 xor	 r9d, r8d
  001c5	44 03 4b 38	 add	 r9d, DWORD PTR [rbx+56]
  001c9	45 03 ca	 add	 r9d, r10d
  001cc	41 c1 c1 09	 rol	 r9d, 9
  001d0	45 03 cb	 add	 r9d, r11d
  001d3	c1 c2 0a	 rol	 edx, 10

; 212  : 	Subround(F, a1, b1, c1, d1, e1, X[15],  8, k0);

  001d6	44 8b d2	 mov	 r10d, edx
  001d9	45 33 d0	 xor	 r10d, r8d
  001dc	45 33 d1	 xor	 r10d, r9d
  001df	44 03 53 3c	 add	 r10d, DWORD PTR [rbx+60]
  001e3	45 03 d3	 add	 r10d, r11d
  001e6	41 c1 c2 08	 rol	 r10d, 8
  001ea	44 03 d1	 add	 r10d, ecx
  001ed	41 c1 c0 0a	 rol	 r8d, 10

; 213  : 
; 214  : 	Subround(G, e1, a1, b1, c1, d1, X[ 7],  7, k1);

  001f1	41 8b c0	 mov	 eax, r8d
  001f4	41 33 c1	 xor	 eax, r9d
  001f7	41 23 c2	 and	 eax, r10d
  001fa	41 33 c0	 xor	 eax, r8d
  001fd	03 43 1c	 add	 eax, DWORD PTR [rbx+28]
  00200	8d 8c 08 99 79
	82 5a		 lea	 ecx, DWORD PTR [rax+rcx+1518500249]
  00207	c1 c1 07	 rol	 ecx, 7
  0020a	03 ca		 add	 ecx, edx
  0020c	41 c1 c1 0a	 rol	 r9d, 10

; 215  : 	Subround(G, d1, e1, a1, b1, c1, X[ 4],  6, k1);

  00210	41 8b c1	 mov	 eax, r9d
  00213	41 33 c2	 xor	 eax, r10d
  00216	23 c1		 and	 eax, ecx
  00218	41 33 c1	 xor	 eax, r9d
  0021b	41 03 c7	 add	 eax, r15d
  0021e	8d 94 10 99 79
	82 5a		 lea	 edx, DWORD PTR [rax+rdx+1518500249]

; 216  : 	Subround(G, c1, d1, e1, a1, b1, X[13],  8, k1);

  00225	8b c1		 mov	 eax, ecx
  00227	c1 c2 06	 rol	 edx, 6
  0022a	41 03 d0	 add	 edx, r8d
  0022d	41 c1 c2 0a	 rol	 r10d, 10
  00231	41 33 c2	 xor	 eax, r10d
  00234	23 c2		 and	 eax, edx
  00236	41 33 c2	 xor	 eax, r10d
  00239	03 43 34	 add	 eax, DWORD PTR [rbx+52]
  0023c	46 8d 84 00 99
	79 82 5a	 lea	 r8d, DWORD PTR [rax+r8+1518500249]
  00244	41 c1 c0 08	 rol	 r8d, 8
  00248	45 03 c1	 add	 r8d, r9d
  0024b	c1 c1 0a	 rol	 ecx, 10

; 217  : 	Subround(G, b1, c1, d1, e1, a1, X[ 1], 13, k1);

  0024e	8b c1		 mov	 eax, ecx
  00250	33 c2		 xor	 eax, edx
  00252	41 23 c0	 and	 eax, r8d
  00255	33 c1		 xor	 eax, ecx
  00257	03 43 04	 add	 eax, DWORD PTR [rbx+4]
  0025a	46 8d 8c 08 99
	79 82 5a	 lea	 r9d, DWORD PTR [rax+r9+1518500249]
  00262	41 c1 c1 0d	 rol	 r9d, 13
  00266	45 03 ca	 add	 r9d, r10d
  00269	c1 c2 0a	 rol	 edx, 10

; 218  : 	Subround(G, a1, b1, c1, d1, e1, X[10], 11, k1);

  0026c	8b c2		 mov	 eax, edx
  0026e	41 33 c0	 xor	 eax, r8d
  00271	41 23 c1	 and	 eax, r9d
  00274	33 c2		 xor	 eax, edx
  00276	03 c5		 add	 eax, ebp
  00278	46 8d 94 10 99
	79 82 5a	 lea	 r10d, DWORD PTR [rax+r10+1518500249]
  00280	41 c1 c2 0b	 rol	 r10d, 11
  00284	44 03 d1	 add	 r10d, ecx
  00287	41 c1 c0 0a	 rol	 r8d, 10

; 219  : 	Subround(G, e1, a1, b1, c1, d1, X[ 6],  9, k1);

  0028b	41 8b c0	 mov	 eax, r8d
  0028e	41 33 c1	 xor	 eax, r9d
  00291	41 23 c2	 and	 eax, r10d
  00294	41 33 c0	 xor	 eax, r8d
  00297	03 c7		 add	 eax, edi
  00299	44 8d 9c 08 99
	79 82 5a	 lea	 r11d, DWORD PTR [rax+rcx+1518500249]
  002a1	41 c1 c3 09	 rol	 r11d, 9
  002a5	44 03 da	 add	 r11d, edx
  002a8	41 c1 c1 0a	 rol	 r9d, 10

; 220  : 	Subround(G, d1, e1, a1, b1, c1, X[15],  7, k1);

  002ac	41 8b c1	 mov	 eax, r9d
  002af	41 33 c2	 xor	 eax, r10d
  002b2	41 23 c3	 and	 eax, r11d
  002b5	41 33 c1	 xor	 eax, r9d
  002b8	03 43 3c	 add	 eax, DWORD PTR [rbx+60]
  002bb	8d 8c 10 99 79
	82 5a		 lea	 ecx, DWORD PTR [rax+rdx+1518500249]

; 221  : 	Subround(G, c1, d1, e1, a1, b1, X[ 3], 15, k1);

  002c2	41 8b c3	 mov	 eax, r11d
  002c5	c1 c1 07	 rol	 ecx, 7
  002c8	41 03 c8	 add	 ecx, r8d
  002cb	41 c1 c2 0a	 rol	 r10d, 10
  002cf	41 33 c2	 xor	 eax, r10d
  002d2	23 c1		 and	 eax, ecx
  002d4	41 33 c2	 xor	 eax, r10d
  002d7	03 c6		 add	 eax, esi

; 222  : 	Subround(G, b1, c1, d1, e1, a1, X[12],  7, k1);

  002d9	8b 73 30	 mov	 esi, DWORD PTR [rbx+48]
  002dc	42 8d 94 00 99
	79 82 5a	 lea	 edx, DWORD PTR [rax+r8+1518500249]
  002e4	c1 c2 0f	 rol	 edx, 15
  002e7	41 03 d1	 add	 edx, r9d
  002ea	41 c1 c3 0a	 rol	 r11d, 10
  002ee	41 8b c3	 mov	 eax, r11d
  002f1	33 c1		 xor	 eax, ecx
  002f3	23 c2		 and	 eax, edx
  002f5	41 33 c3	 xor	 eax, r11d
  002f8	03 c6		 add	 eax, esi
  002fa	42 8d 9c 08 99
	79 82 5a	 lea	 ebx, DWORD PTR [rax+r9+1518500249]
  00302	c1 c3 07	 rol	 ebx, 7
  00305	41 03 da	 add	 ebx, r10d
  00308	c1 c1 0a	 rol	 ecx, 10

; 223  : 	Subround(G, a1, b1, c1, d1, e1, X[ 0], 12, k1);

  0030b	8b c1		 mov	 eax, ecx
  0030d	33 c2		 xor	 eax, edx
  0030f	23 c3		 and	 eax, ebx
  00311	33 c1		 xor	 eax, ecx
  00313	03 44 24 04	 add	 eax, DWORD PTR tv5676[rsp]
  00317	42 8d bc 10 99
	79 82 5a	 lea	 edi, DWORD PTR [rax+r10+1518500249]
  0031f	c1 c7 0c	 rol	 edi, 12
  00322	41 03 fb	 add	 edi, r11d
  00325	c1 c2 0a	 rol	 edx, 10

; 224  : 	Subround(G, e1, a1, b1, c1, d1, X[ 9], 15, k1);

  00328	8b c2		 mov	 eax, edx
  0032a	33 c3		 xor	 eax, ebx
  0032c	23 c7		 and	 eax, edi
  0032e	33 c2		 xor	 eax, edx
  00330	4c 8b 4c 24 68	 mov	 r9, QWORD PTR data$[rsp]
  00335	41 03 41 24	 add	 eax, DWORD PTR [r9+36]
  00339	46 8d 84 18 99
	79 82 5a	 lea	 r8d, DWORD PTR [rax+r11+1518500249]
  00341	41 c1 c0 0f	 rol	 r8d, 15
  00345	44 03 c1	 add	 r8d, ecx
  00348	c1 c3 0a	 rol	 ebx, 10

; 225  : 	Subround(G, d1, e1, a1, b1, c1, X[ 5],  9, k1);

  0034b	8b c3		 mov	 eax, ebx
  0034d	33 c7		 xor	 eax, edi
  0034f	41 23 c0	 and	 eax, r8d
  00352	33 c3		 xor	 eax, ebx
  00354	41 03 41 14	 add	 eax, DWORD PTR [r9+20]
  00358	44 8d 8c 08 99
	79 82 5a	 lea	 r9d, DWORD PTR [rax+rcx+1518500249]
  00360	48 8b 4c 24 68	 mov	 rcx, QWORD PTR data$[rsp]

; 226  : 	Subround(G, c1, d1, e1, a1, b1, X[ 2], 11, k1);

  00365	41 8b c0	 mov	 eax, r8d
  00368	41 c1 c1 09	 rol	 r9d, 9
  0036c	44 03 ca	 add	 r9d, edx
  0036f	c1 c7 0a	 rol	 edi, 10
  00372	33 c7		 xor	 eax, edi
  00374	41 23 c1	 and	 eax, r9d
  00377	33 c7		 xor	 eax, edi
  00379	03 44 24 78	 add	 eax, DWORD PTR tv5673[rsp]
  0037d	44 8d 94 10 99
	79 82 5a	 lea	 r10d, DWORD PTR [rax+rdx+1518500249]
  00385	41 c1 c2 0b	 rol	 r10d, 11
  00389	44 03 d3	 add	 r10d, ebx
  0038c	41 c1 c0 0a	 rol	 r8d, 10

; 227  : 	Subround(G, b1, c1, d1, e1, a1, X[14],  7, k1);

  00390	41 8b c0	 mov	 eax, r8d
  00393	41 33 c1	 xor	 eax, r9d
  00396	41 23 c2	 and	 eax, r10d
  00399	41 33 c0	 xor	 eax, r8d
  0039c	03 41 38	 add	 eax, DWORD PTR [rcx+56]
  0039f	8d 8c 18 99 79
	82 5a		 lea	 ecx, DWORD PTR [rax+rbx+1518500249]
  003a6	c1 c1 07	 rol	 ecx, 7
  003a9	03 cf		 add	 ecx, edi
  003ab	41 c1 c1 0a	 rol	 r9d, 10

; 228  : 	Subround(G, a1, b1, c1, d1, e1, X[11], 13, k1);

  003af	41 8b c1	 mov	 eax, r9d
  003b2	41 33 c2	 xor	 eax, r10d
  003b5	23 c1		 and	 eax, ecx
  003b7	41 33 c1	 xor	 eax, r9d
  003ba	03 44 24 70	 add	 eax, DWORD PTR tv5660[rsp]
  003be	8d 94 38 99 79
	82 5a		 lea	 edx, DWORD PTR [rax+rdi+1518500249]
  003c5	c1 c2 0d	 rol	 edx, 13
  003c8	41 03 d0	 add	 edx, r8d
  003cb	41 c1 c2 0a	 rol	 r10d, 10

; 229  : 	Subround(G, e1, a1, b1, c1, d1, X[ 8], 12, k1);

  003cf	41 8b c2	 mov	 eax, r10d
  003d2	33 c1		 xor	 eax, ecx
  003d4	23 c2		 and	 eax, edx
  003d6	41 33 c2	 xor	 eax, r10d
  003d9	41 03 c4	 add	 eax, r12d
  003dc	46 8d 84 00 99
	79 82 5a	 lea	 r8d, DWORD PTR [rax+r8+1518500249]

; 230  : 
; 231  : 	Subround(H, d1, e1, a1, b1, c1, X[ 3], 11, k2);

  003e4	8b c2		 mov	 eax, edx
  003e6	f7 d0		 not	 eax
  003e8	41 c1 c0 0c	 rol	 r8d, 12
  003ec	45 03 c1	 add	 r8d, r9d
  003ef	c1 c1 0a	 rol	 ecx, 10
  003f2	41 0b c0	 or	 eax, r8d
  003f5	33 c1		 xor	 eax, ecx
  003f7	03 04 24	 add	 eax, DWORD PTR tv5672[rsp]
  003fa	46 8d 9c 08 a1
	eb d9 6e	 lea	 r11d, DWORD PTR [rax+r9+1859775393]

; 232  : 	Subround(H, c1, d1, e1, a1, b1, X[10], 13, k2);

  00402	41 8b c0	 mov	 eax, r8d
  00405	f7 d0		 not	 eax
  00407	41 c1 c3 0b	 rol	 r11d, 11
  0040b	45 03 da	 add	 r11d, r10d
  0040e	c1 c2 0a	 rol	 edx, 10
  00411	41 0b c3	 or	 eax, r11d
  00414	33 c2		 xor	 eax, edx
  00416	03 c5		 add	 eax, ebp
  00418	46 8d 8c 10 a1
	eb d9 6e	 lea	 r9d, DWORD PTR [rax+r10+1859775393]
  00420	4c 8b 54 24 68	 mov	 r10, QWORD PTR data$[rsp]

; 233  : 	Subround(H, b1, c1, d1, e1, a1, X[14],  6, k2);

  00425	41 8b c3	 mov	 eax, r11d
  00428	41 c1 c1 0d	 rol	 r9d, 13
  0042c	f7 d0		 not	 eax
  0042e	44 03 c9	 add	 r9d, ecx
  00431	41 c1 c0 0a	 rol	 r8d, 10
  00435	41 0b c1	 or	 eax, r9d
  00438	41 33 c0	 xor	 eax, r8d
  0043b	41 03 42 38	 add	 eax, DWORD PTR [r10+56]
  0043f	44 8d 94 08 a1
	eb d9 6e	 lea	 r10d, DWORD PTR [rax+rcx+1859775393]
  00447	41 c1 c2 06	 rol	 r10d, 6
  0044b	44 03 d2	 add	 r10d, edx
  0044e	41 c1 c3 0a	 rol	 r11d, 10
  00452	48 8b 4c 24 68	 mov	 rcx, QWORD PTR data$[rsp]

; 234  : 	Subround(H, a1, b1, c1, d1, e1, X[ 4],  7, k2);

  00457	41 8b c1	 mov	 eax, r9d
  0045a	f7 d0		 not	 eax
  0045c	41 0b c2	 or	 eax, r10d
  0045f	41 33 c3	 xor	 eax, r11d
  00462	41 03 c7	 add	 eax, r15d
  00465	8d 9c 10 a1 eb
	d9 6e		 lea	 ebx, DWORD PTR [rax+rdx+1859775393]

; 235  : 	Subround(H, e1, a1, b1, c1, d1, X[ 9], 14, k2);

  0046c	41 8b c2	 mov	 eax, r10d
  0046f	f7 d0		 not	 eax
  00471	c1 c3 07	 rol	 ebx, 7
  00474	41 03 d8	 add	 ebx, r8d
  00477	41 c1 c1 0a	 rol	 r9d, 10
  0047b	0b c3		 or	 eax, ebx
  0047d	41 33 c1	 xor	 eax, r9d
  00480	03 41 24	 add	 eax, DWORD PTR [rcx+36]
  00483	42 8d bc 00 a1
	eb d9 6e	 lea	 edi, DWORD PTR [rax+r8+1859775393]

; 236  : 	Subround(H, d1, e1, a1, b1, c1, X[15],  9, k2);

  0048b	8b c3		 mov	 eax, ebx
  0048d	f7 d0		 not	 eax
  0048f	c1 c7 0e	 rol	 edi, 14
  00492	41 03 fb	 add	 edi, r11d
  00495	41 c1 c2 0a	 rol	 r10d, 10
  00499	0b c7		 or	 eax, edi
  0049b	41 33 c2	 xor	 eax, r10d
  0049e	03 41 3c	 add	 eax, DWORD PTR [rcx+60]
  004a1	42 8d 8c 18 a1
	eb d9 6e	 lea	 ecx, DWORD PTR [rax+r11+1859775393]
  004a9	4c 8b 5c 24 68	 mov	 r11, QWORD PTR data$[rsp]

; 237  : 	Subround(H, c1, d1, e1, a1, b1, X[ 8], 13, k2);

  004ae	8b c7		 mov	 eax, edi
  004b0	f7 d0		 not	 eax
  004b2	c1 c1 09	 rol	 ecx, 9
  004b5	41 03 c9	 add	 ecx, r9d
  004b8	c1 c3 0a	 rol	 ebx, 10
  004bb	0b c1		 or	 eax, ecx
  004bd	33 c3		 xor	 eax, ebx
  004bf	41 03 c4	 add	 eax, r12d
  004c2	42 8d 94 08 a1
	eb d9 6e	 lea	 edx, DWORD PTR [rax+r9+1859775393]

; 238  : 	Subround(H, b1, c1, d1, e1, a1, X[ 1], 15, k2);

  004ca	8b c1		 mov	 eax, ecx
  004cc	f7 d0		 not	 eax
  004ce	c1 c2 0d	 rol	 edx, 13
  004d1	41 03 d2	 add	 edx, r10d
  004d4	c1 c7 0a	 rol	 edi, 10
  004d7	0b c2		 or	 eax, edx
  004d9	33 c7		 xor	 eax, edi
  004db	41 03 43 04	 add	 eax, DWORD PTR [r11+4]
  004df	46 8d 84 10 a1
	eb d9 6e	 lea	 r8d, DWORD PTR [rax+r10+1859775393]

; 239  : 	Subround(H, a1, b1, c1, d1, e1, X[ 2], 14, k2);

  004e7	8b c2		 mov	 eax, edx
  004e9	f7 d0		 not	 eax
  004eb	41 c1 c0 0f	 rol	 r8d, 15
  004ef	44 03 c3	 add	 r8d, ebx
  004f2	c1 c1 0a	 rol	 ecx, 10
  004f5	41 0b c0	 or	 eax, r8d
  004f8	33 c1		 xor	 eax, ecx
  004fa	41 03 43 08	 add	 eax, DWORD PTR [r11+8]
  004fe	44 8d 8c 18 a1
	eb d9 6e	 lea	 r9d, DWORD PTR [rax+rbx+1859775393]

; 240  : 	Subround(H, e1, a1, b1, c1, d1, X[ 7],  8, k2);

  00506	41 8b c0	 mov	 eax, r8d
  00509	f7 d0		 not	 eax
  0050b	41 c1 c1 0e	 rol	 r9d, 14
  0050f	44 03 cf	 add	 r9d, edi
  00512	c1 c2 0a	 rol	 edx, 10
  00515	41 0b c1	 or	 eax, r9d
  00518	33 c2		 xor	 eax, edx
  0051a	41 03 43 1c	 add	 eax, DWORD PTR [r11+28]
  0051e	44 8d 94 38 a1
	eb d9 6e	 lea	 r10d, DWORD PTR [rax+rdi+1859775393]

; 241  : 	Subround(H, d1, e1, a1, b1, c1, X[ 0], 13, k2);

  00526	41 8b c1	 mov	 eax, r9d
  00529	f7 d0		 not	 eax
  0052b	41 c1 c2 08	 rol	 r10d, 8
  0052f	44 03 d1	 add	 r10d, ecx
  00532	41 c1 c0 0a	 rol	 r8d, 10
  00536	41 0b c2	 or	 eax, r10d
  00539	41 33 c0	 xor	 eax, r8d
  0053c	03 44 24 04	 add	 eax, DWORD PTR tv5676[rsp]
  00540	44 8d 9c 08 a1
	eb d9 6e	 lea	 r11d, DWORD PTR [rax+rcx+1859775393]

; 242  : 	Subround(H, c1, d1, e1, a1, b1, X[ 6],  6, k2);

  00548	41 8b c2	 mov	 eax, r10d
  0054b	41 c1 c3 0d	 rol	 r11d, 13
  0054f	f7 d0		 not	 eax
  00551	44 03 da	 add	 r11d, edx
  00554	41 c1 c1 0a	 rol	 r9d, 10
  00558	41 0b c3	 or	 eax, r11d
  0055b	41 33 c1	 xor	 eax, r9d
  0055e	03 44 24 08	 add	 eax, DWORD PTR tv5667[rsp]
  00562	8d 9c 10 a1 eb
	d9 6e		 lea	 ebx, DWORD PTR [rax+rdx+1859775393]
  00569	c1 c3 06	 rol	 ebx, 6
  0056c	48 8b 7c 24 68	 mov	 rdi, QWORD PTR data$[rsp]
  00571	41 03 d8	 add	 ebx, r8d
  00574	41 c1 c2 0a	 rol	 r10d, 10

; 243  : 	Subround(H, b1, c1, d1, e1, a1, X[13],  5, k2);

  00578	41 8b c3	 mov	 eax, r11d
  0057b	f7 d0		 not	 eax
  0057d	0b c3		 or	 eax, ebx
  0057f	41 33 c2	 xor	 eax, r10d
  00582	03 47 34	 add	 eax, DWORD PTR [rdi+52]
  00585	42 8d 8c 00 a1
	eb d9 6e	 lea	 ecx, DWORD PTR [rax+r8+1859775393]

; 244  : 	Subround(H, a1, b1, c1, d1, e1, X[11], 12, k2);

  0058d	8b c3		 mov	 eax, ebx
  0058f	f7 d0		 not	 eax
  00591	c1 c1 05	 rol	 ecx, 5
  00594	41 03 c9	 add	 ecx, r9d
  00597	41 c1 c3 0a	 rol	 r11d, 10
  0059b	0b c1		 or	 eax, ecx
  0059d	41 33 c3	 xor	 eax, r11d
  005a0	03 47 2c	 add	 eax, DWORD PTR [rdi+44]
  005a3	42 8d 94 08 a1
	eb d9 6e	 lea	 edx, DWORD PTR [rax+r9+1859775393]

; 245  : 	Subround(H, e1, a1, b1, c1, d1, X[ 5],  7, k2);

  005ab	8b c1		 mov	 eax, ecx
  005ad	f7 d0		 not	 eax
  005af	c1 c2 0c	 rol	 edx, 12
  005b2	41 03 d2	 add	 edx, r10d
  005b5	c1 c3 0a	 rol	 ebx, 10
  005b8	0b c2		 or	 eax, edx
  005ba	33 c3		 xor	 eax, ebx
  005bc	03 47 14	 add	 eax, DWORD PTR [rdi+20]
  005bf	46 8d 84 10 a1
	eb d9 6e	 lea	 r8d, DWORD PTR [rax+r10+1859775393]

; 246  : 	Subround(H, d1, e1, a1, b1, c1, X[12],  5, k2);

  005c7	8b c2		 mov	 eax, edx
  005c9	f7 d0		 not	 eax
  005cb	41 c1 c0 07	 rol	 r8d, 7
  005cf	45 03 c3	 add	 r8d, r11d
  005d2	c1 c1 0a	 rol	 ecx, 10
  005d5	41 0b c0	 or	 eax, r8d
  005d8	33 c1		 xor	 eax, ecx
  005da	03 c6		 add	 eax, esi
  005dc	46 8d 8c 18 a1
	eb d9 6e	 lea	 r9d, DWORD PTR [rax+r11+1859775393]

; 247  : 
; 248  : 	Subround(I, c1, d1, e1, a1, b1, X[ 1], 11, k3);

  005e4	41 8b c0	 mov	 eax, r8d
  005e7	41 c1 c1 05	 rol	 r9d, 5
  005eb	44 03 cb	 add	 r9d, ebx
  005ee	c1 c2 0a	 rol	 edx, 10
  005f1	41 33 c1	 xor	 eax, r9d
  005f4	23 c2		 and	 eax, edx
  005f6	41 33 c0	 xor	 eax, r8d
  005f9	03 47 04	 add	 eax, DWORD PTR [rdi+4]
  005fc	44 8d 94 18 dc
	bc 1b 8f	 lea	 r10d, DWORD PTR [rax+rbx-1894007588]

; 249  : 	Subround(I, b1, c1, d1, e1, a1, X[ 9], 12, k3);

  00604	41 8b c1	 mov	 eax, r9d
  00607	41 c1 c2 0b	 rol	 r10d, 11
  0060b	44 03 d1	 add	 r10d, ecx
  0060e	41 c1 c0 0a	 rol	 r8d, 10
  00612	41 33 c2	 xor	 eax, r10d
  00615	41 23 c0	 and	 eax, r8d
  00618	41 33 c1	 xor	 eax, r9d
  0061b	03 47 24	 add	 eax, DWORD PTR [rdi+36]
  0061e	44 8d 9c 08 dc
	bc 1b 8f	 lea	 r11d, DWORD PTR [rax+rcx-1894007588]

; 250  : 	Subround(I, a1, b1, c1, d1, e1, X[11], 14, k3);

  00626	41 8b c2	 mov	 eax, r10d
  00629	41 c1 c3 0c	 rol	 r11d, 12
  0062d	44 03 da	 add	 r11d, edx
  00630	41 c1 c1 0a	 rol	 r9d, 10
  00634	41 33 c3	 xor	 eax, r11d
  00637	41 23 c1	 and	 eax, r9d
  0063a	41 33 c2	 xor	 eax, r10d
  0063d	03 47 2c	 add	 eax, DWORD PTR [rdi+44]
  00640	8d 8c 10 dc bc
	1b 8f		 lea	 ecx, DWORD PTR [rax+rdx-1894007588]

; 251  : 	Subround(I, e1, a1, b1, c1, d1, X[10], 15, k3);

  00647	41 8b c3	 mov	 eax, r11d
  0064a	c1 c1 0e	 rol	 ecx, 14
  0064d	41 03 c8	 add	 ecx, r8d
  00650	41 c1 c2 0a	 rol	 r10d, 10
  00654	33 c1		 xor	 eax, ecx
  00656	41 23 c2	 and	 eax, r10d
  00659	41 33 c3	 xor	 eax, r11d
  0065c	03 c5		 add	 eax, ebp
  0065e	42 8d 94 00 dc
	bc 1b 8f	 lea	 edx, DWORD PTR [rax+r8-1894007588]
  00666	c1 c2 0f	 rol	 edx, 15
  00669	41 03 d1	 add	 edx, r9d
  0066c	41 c1 c3 0a	 rol	 r11d, 10

; 252  : 	Subround(I, d1, e1, a1, b1, c1, X[ 0], 14, k3);

  00670	8b c2		 mov	 eax, edx
  00672	33 c1		 xor	 eax, ecx
  00674	41 23 c3	 and	 eax, r11d
  00677	33 c1		 xor	 eax, ecx
  00679	03 07		 add	 eax, DWORD PTR [rdi]
  0067b	46 8d 84 08 dc
	bc 1b 8f	 lea	 r8d, DWORD PTR [rax+r9-1894007588]
  00683	41 c1 c0 0e	 rol	 r8d, 14

; 253  : 	Subround(I, c1, d1, e1, a1, b1, X[ 8], 15, k3);

  00687	8b c2		 mov	 eax, edx
  00689	45 03 c2	 add	 r8d, r10d
  0068c	c1 c1 0a	 rol	 ecx, 10
  0068f	41 33 c0	 xor	 eax, r8d
  00692	23 c1		 and	 eax, ecx
  00694	33 c2		 xor	 eax, edx
  00696	41 03 c4	 add	 eax, r12d
  00699	46 8d 8c 10 dc
	bc 1b 8f	 lea	 r9d, DWORD PTR [rax+r10-1894007588]

; 254  : 	Subround(I, b1, c1, d1, e1, a1, X[12],  9, k3);

  006a1	41 8b c0	 mov	 eax, r8d
  006a4	41 c1 c1 0f	 rol	 r9d, 15
  006a8	45 03 cb	 add	 r9d, r11d
  006ab	c1 c2 0a	 rol	 edx, 10
  006ae	41 33 c1	 xor	 eax, r9d
  006b1	23 c2		 and	 eax, edx
  006b3	41 33 c0	 xor	 eax, r8d
  006b6	03 c6		 add	 eax, esi
  006b8	46 8d 94 18 dc
	bc 1b 8f	 lea	 r10d, DWORD PTR [rax+r11-1894007588]

; 255  : 	Subround(I, a1, b1, c1, d1, e1, X[ 4],  8, k3);

  006c0	41 8b c1	 mov	 eax, r9d
  006c3	41 c1 c2 09	 rol	 r10d, 9
  006c7	44 03 d1	 add	 r10d, ecx
  006ca	41 c1 c0 0a	 rol	 r8d, 10
  006ce	41 33 c2	 xor	 eax, r10d
  006d1	41 23 c0	 and	 eax, r8d
  006d4	41 33 c1	 xor	 eax, r9d
  006d7	41 03 c7	 add	 eax, r15d
  006da	44 8d 9c 08 dc
	bc 1b 8f	 lea	 r11d, DWORD PTR [rax+rcx-1894007588]

; 256  : 	Subround(I, e1, a1, b1, c1, d1, X[13],  9, k3);

  006e2	41 8b c2	 mov	 eax, r10d
  006e5	41 c1 c3 08	 rol	 r11d, 8
  006e9	44 03 da	 add	 r11d, edx
  006ec	41 c1 c1 0a	 rol	 r9d, 10
  006f0	41 33 c3	 xor	 eax, r11d
  006f3	41 23 c1	 and	 eax, r9d
  006f6	41 33 c2	 xor	 eax, r10d
  006f9	03 47 34	 add	 eax, DWORD PTR [rdi+52]
  006fc	8d 8c 10 dc bc
	1b 8f		 lea	 ecx, DWORD PTR [rax+rdx-1894007588]
  00703	c1 c1 09	 rol	 ecx, 9
  00706	41 03 c8	 add	 ecx, r8d
  00709	41 c1 c2 0a	 rol	 r10d, 10

; 257  : 	Subround(I, d1, e1, a1, b1, c1, X[ 3], 14, k3);

  0070d	8b c1		 mov	 eax, ecx
  0070f	41 33 c3	 xor	 eax, r11d
  00712	41 23 c2	 and	 eax, r10d
  00715	41 33 c3	 xor	 eax, r11d
  00718	03 47 0c	 add	 eax, DWORD PTR [rdi+12]
  0071b	42 8d 94 00 dc
	bc 1b 8f	 lea	 edx, DWORD PTR [rax+r8-1894007588]

; 258  : 	Subround(I, c1, d1, e1, a1, b1, X[ 7],  5, k3);

  00723	8b c1		 mov	 eax, ecx
  00725	c1 c2 0e	 rol	 edx, 14
  00728	41 03 d1	 add	 edx, r9d
  0072b	41 c1 c3 0a	 rol	 r11d, 10
  0072f	33 c2		 xor	 eax, edx
  00731	41 23 c3	 and	 eax, r11d
  00734	33 c1		 xor	 eax, ecx
  00736	03 47 1c	 add	 eax, DWORD PTR [rdi+28]
  00739	46 8d 84 08 dc
	bc 1b 8f	 lea	 r8d, DWORD PTR [rax+r9-1894007588]

; 259  : 	Subround(I, b1, c1, d1, e1, a1, X[15],  6, k3);

  00741	8b c2		 mov	 eax, edx
  00743	41 c1 c0 05	 rol	 r8d, 5
  00747	45 03 c2	 add	 r8d, r10d
  0074a	c1 c1 0a	 rol	 ecx, 10
  0074d	41 33 c0	 xor	 eax, r8d
  00750	23 c1		 and	 eax, ecx
  00752	33 c2		 xor	 eax, edx
  00754	03 47 3c	 add	 eax, DWORD PTR [rdi+60]
  00757	42 8d 9c 10 dc
	bc 1b 8f	 lea	 ebx, DWORD PTR [rax+r10-1894007588]

; 260  : 	Subround(I, a1, b1, c1, d1, e1, X[14],  8, k3);

  0075f	41 8b c0	 mov	 eax, r8d
  00762	c1 c3 06	 rol	 ebx, 6
  00765	41 03 db	 add	 ebx, r11d
  00768	c1 c2 0a	 rol	 edx, 10
  0076b	33 c3		 xor	 eax, ebx
  0076d	23 c2		 and	 eax, edx
  0076f	41 33 c0	 xor	 eax, r8d
  00772	03 47 38	 add	 eax, DWORD PTR [rdi+56]
  00775	46 8d 9c 18 dc
	bc 1b 8f	 lea	 r11d, DWORD PTR [rax+r11-1894007588]

; 261  : 	Subround(I, e1, a1, b1, c1, d1, X[ 5],  6, k3);

  0077d	8b c3		 mov	 eax, ebx
  0077f	41 c1 c3 08	 rol	 r11d, 8
  00783	44 03 d9	 add	 r11d, ecx
  00786	41 c1 c0 0a	 rol	 r8d, 10
  0078a	41 33 c3	 xor	 eax, r11d
  0078d	41 23 c0	 and	 eax, r8d
  00790	33 c3		 xor	 eax, ebx
  00792	03 47 14	 add	 eax, DWORD PTR [rdi+20]
  00795	44 8d 8c 08 dc
	bc 1b 8f	 lea	 r9d, DWORD PTR [rax+rcx-1894007588]
  0079d	41 c1 c1 06	 rol	 r9d, 6
  007a1	44 03 ca	 add	 r9d, edx
  007a4	c1 c3 0a	 rol	 ebx, 10

; 262  : 	Subround(I, d1, e1, a1, b1, c1, X[ 6],  5, k3);

  007a7	41 8b c1	 mov	 eax, r9d
  007aa	41 33 c3	 xor	 eax, r11d
  007ad	23 c3		 and	 eax, ebx
  007af	41 33 c3	 xor	 eax, r11d
  007b2	03 47 18	 add	 eax, DWORD PTR [rdi+24]
  007b5	44 8d 94 10 dc
	bc 1b 8f	 lea	 r10d, DWORD PTR [rax+rdx-1894007588]

; 263  : 	Subround(I, c1, d1, e1, a1, b1, X[ 2], 12, k3);

  007bd	41 8b c1	 mov	 eax, r9d
  007c0	41 c1 c2 05	 rol	 r10d, 5
  007c4	45 03 d0	 add	 r10d, r8d
  007c7	41 c1 c3 0a	 rol	 r11d, 10
  007cb	41 33 c2	 xor	 eax, r10d
  007ce	41 23 c3	 and	 eax, r11d
  007d1	41 33 c1	 xor	 eax, r9d
  007d4	03 47 08	 add	 eax, DWORD PTR [rdi+8]
  007d7	42 8d 8c 00 dc
	bc 1b 8f	 lea	 ecx, DWORD PTR [rax+r8-1894007588]
  007df	c1 c1 0c	 rol	 ecx, 12
  007e2	03 cb		 add	 ecx, ebx
  007e4	41 c1 c1 0a	 rol	 r9d, 10

; 264  : 
; 265  : 	Subround(J, b1, c1, d1, e1, a1, X[ 4],  9, k4);

  007e8	41 8b c1	 mov	 eax, r9d
  007eb	f7 d0		 not	 eax
  007ed	41 0b c2	 or	 eax, r10d
  007f0	33 c1		 xor	 eax, ecx
  007f2	41 03 c7	 add	 eax, r15d
  007f5	8d 94 18 4e fd
	53 a9		 lea	 edx, DWORD PTR [rax+rbx-1454113458]
  007fc	c1 c2 09	 rol	 edx, 9
  007ff	41 03 d3	 add	 edx, r11d
  00802	41 c1 c2 0a	 rol	 r10d, 10

; 266  : 	Subround(J, a1, b1, c1, d1, e1, X[ 0], 15, k4);

  00806	41 8b c2	 mov	 eax, r10d
  00809	f7 d0		 not	 eax
  0080b	0b c1		 or	 eax, ecx
  0080d	33 c2		 xor	 eax, edx
  0080f	03 07		 add	 eax, DWORD PTR [rdi]
  00811	46 8d 84 18 4e
	fd 53 a9	 lea	 r8d, DWORD PTR [rax+r11-1454113458]
  00819	41 c1 c0 0f	 rol	 r8d, 15
  0081d	45 03 c1	 add	 r8d, r9d
  00820	c1 c1 0a	 rol	 ecx, 10

; 267  : 	Subround(J, e1, a1, b1, c1, d1, X[ 5],  5, k4);

  00823	8b c1		 mov	 eax, ecx
  00825	f7 d0		 not	 eax
  00827	0b c2		 or	 eax, edx
  00829	41 33 c0	 xor	 eax, r8d
  0082c	03 47 14	 add	 eax, DWORD PTR [rdi+20]
  0082f	46 8d 8c 08 4e
	fd 53 a9	 lea	 r9d, DWORD PTR [rax+r9-1454113458]
  00837	41 c1 c1 05	 rol	 r9d, 5
  0083b	45 03 ca	 add	 r9d, r10d
  0083e	c1 c2 0a	 rol	 edx, 10

; 268  : 	Subround(J, d1, e1, a1, b1, c1, X[ 9], 11, k4);

  00841	8b c2		 mov	 eax, edx
  00843	f7 d0		 not	 eax
  00845	41 0b c0	 or	 eax, r8d
  00848	41 33 c1	 xor	 eax, r9d
  0084b	03 47 24	 add	 eax, DWORD PTR [rdi+36]
  0084e	46 8d 9c 10 4e
	fd 53 a9	 lea	 r11d, DWORD PTR [rax+r10-1454113458]
  00856	41 c1 c3 0b	 rol	 r11d, 11
  0085a	44 03 d9	 add	 r11d, ecx
  0085d	41 c1 c0 0a	 rol	 r8d, 10

; 269  : 	Subround(J, c1, d1, e1, a1, b1, X[ 7],  6, k4);

  00861	41 8b c0	 mov	 eax, r8d
  00864	f7 d0		 not	 eax
  00866	41 0b c1	 or	 eax, r9d
  00869	41 33 c3	 xor	 eax, r11d
  0086c	03 47 1c	 add	 eax, DWORD PTR [rdi+28]
  0086f	44 8d 94 08 4e
	fd 53 a9	 lea	 r10d, DWORD PTR [rax+rcx-1454113458]
  00877	41 c1 c2 06	 rol	 r10d, 6
  0087b	44 03 d2	 add	 r10d, edx
  0087e	41 c1 c1 0a	 rol	 r9d, 10

; 270  : 	Subround(J, b1, c1, d1, e1, a1, X[12],  8, k4);

  00882	41 8b c1	 mov	 eax, r9d
  00885	f7 d0		 not	 eax
  00887	41 0b c3	 or	 eax, r11d
  0088a	41 33 c2	 xor	 eax, r10d
  0088d	03 c6		 add	 eax, esi
  0088f	8d 9c 10 4e fd
	53 a9		 lea	 ebx, DWORD PTR [rax+rdx-1454113458]
  00896	c1 c3 08	 rol	 ebx, 8
  00899	41 03 d8	 add	 ebx, r8d
  0089c	41 c1 c3 0a	 rol	 r11d, 10

; 271  : 	Subround(J, a1, b1, c1, d1, e1, X[ 2], 13, k4);

  008a0	41 8b c3	 mov	 eax, r11d
  008a3	f7 d0		 not	 eax
  008a5	41 0b c2	 or	 eax, r10d
  008a8	33 c3		 xor	 eax, ebx
  008aa	03 47 08	 add	 eax, DWORD PTR [rdi+8]
  008ad	42 8d bc 00 4e
	fd 53 a9	 lea	 edi, DWORD PTR [rax+r8-1454113458]

; 272  : 	Subround(J, e1, a1, b1, c1, d1, X[10], 12, k4);
; 273  : 	Subround(J, d1, e1, a1, b1, c1, X[14],  5, k4);

  008b5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR data$[rsp]
  008ba	c1 c7 0d	 rol	 edi, 13
  008bd	41 03 f9	 add	 edi, r9d
  008c0	41 c1 c2 0a	 rol	 r10d, 10
  008c4	41 8b c2	 mov	 eax, r10d
  008c7	f7 d0		 not	 eax
  008c9	0b c3		 or	 eax, ebx
  008cb	33 c7		 xor	 eax, edi
  008cd	03 c5		 add	 eax, ebp
  008cf	46 8d 8c 08 4e
	fd 53 a9	 lea	 r9d, DWORD PTR [rax+r9-1454113458]
  008d7	41 c1 c1 0c	 rol	 r9d, 12
  008db	45 03 cb	 add	 r9d, r11d
  008de	c1 c3 0a	 rol	 ebx, 10
  008e1	8b c3		 mov	 eax, ebx
  008e3	f7 d0		 not	 eax
  008e5	0b c7		 or	 eax, edi
  008e7	41 33 c1	 xor	 eax, r9d
  008ea	03 41 38	 add	 eax, DWORD PTR [rcx+56]
  008ed	42 8d 8c 18 4e
	fd 53 a9	 lea	 ecx, DWORD PTR [rax+r11-1454113458]

; 274  : 	Subround(J, c1, d1, e1, a1, b1, X[ 1], 12, k4);

  008f5	4c 8b 5c 24 68	 mov	 r11, QWORD PTR data$[rsp]
  008fa	c1 c1 05	 rol	 ecx, 5
  008fd	41 03 ca	 add	 ecx, r10d
  00900	c1 c7 0a	 rol	 edi, 10
  00903	8b c7		 mov	 eax, edi
  00905	f7 d0		 not	 eax
  00907	41 0b c1	 or	 eax, r9d
  0090a	33 c1		 xor	 eax, ecx
  0090c	41 03 43 04	 add	 eax, DWORD PTR [r11+4]
  00910	42 8d 94 10 4e
	fd 53 a9	 lea	 edx, DWORD PTR [rax+r10-1454113458]
  00918	c1 c2 0c	 rol	 edx, 12
  0091b	03 d3		 add	 edx, ebx
  0091d	41 c1 c1 0a	 rol	 r9d, 10

; 275  : 	Subround(J, b1, c1, d1, e1, a1, X[ 3], 13, k4);

  00921	41 8b c1	 mov	 eax, r9d
  00924	f7 d0		 not	 eax
  00926	0b c1		 or	 eax, ecx
  00928	33 c2		 xor	 eax, edx
  0092a	41 03 43 0c	 add	 eax, DWORD PTR [r11+12]
  0092e	44 8d 84 18 4e
	fd 53 a9	 lea	 r8d, DWORD PTR [rax+rbx-1454113458]

; 276  : 	Subround(J, a1, b1, c1, d1, e1, X[ 8], 14, k4);
; 277  : 	Subround(J, e1, a1, b1, c1, d1, X[11], 11, k4);
; 278  : 	Subround(J, d1, e1, a1, b1, c1, X[ 6],  8, k4);
; 279  : 	Subround(J, c1, d1, e1, a1, b1, X[15],  5, k4);

  00936	41 8b 5b 3c	 mov	 ebx, DWORD PTR [r11+60]
  0093a	41 c1 c0 0d	 rol	 r8d, 13
  0093e	44 03 c7	 add	 r8d, edi
  00941	c1 c1 0a	 rol	 ecx, 10
  00944	8b c1		 mov	 eax, ecx
  00946	f7 d0		 not	 eax
  00948	0b c2		 or	 eax, edx
  0094a	41 33 c0	 xor	 eax, r8d
  0094d	41 03 c4	 add	 eax, r12d
  00950	44 8d bc 38 4e
	fd 53 a9	 lea	 r15d, DWORD PTR [rax+rdi-1454113458]
  00958	41 c1 c7 0e	 rol	 r15d, 14
  0095c	45 03 f9	 add	 r15d, r9d
  0095f	c1 c2 0a	 rol	 edx, 10
  00962	8b c2		 mov	 eax, edx
  00964	f7 d0		 not	 eax
  00966	41 0b c0	 or	 eax, r8d
  00969	41 33 c7	 xor	 eax, r15d
  0096c	41 03 43 2c	 add	 eax, DWORD PTR [r11+44]
  00970	46 8d a4 08 4e
	fd 53 a9	 lea	 r12d, DWORD PTR [rax+r9-1454113458]
  00978	41 c1 c4 0b	 rol	 r12d, 11
  0097c	44 03 e1	 add	 r12d, ecx
  0097f	41 c1 c0 0a	 rol	 r8d, 10
  00983	41 8b c0	 mov	 eax, r8d
  00986	f7 d0		 not	 eax
  00988	41 0b c7	 or	 eax, r15d
  0098b	41 33 c4	 xor	 eax, r12d
  0098e	41 03 43 18	 add	 eax, DWORD PTR [r11+24]
  00992	8d ac 08 4e fd
	53 a9		 lea	 ebp, DWORD PTR [rax+rcx-1454113458]
  00999	c1 c5 08	 rol	 ebp, 8
  0099c	03 ea		 add	 ebp, edx
  0099e	41 c1 c7 0a	 rol	 r15d, 10
  009a2	41 8b c7	 mov	 eax, r15d
  009a5	f7 d0		 not	 eax
  009a7	41 0b c4	 or	 eax, r12d
  009aa	33 c5		 xor	 eax, ebp
  009ac	03 c3		 add	 eax, ebx
  009ae	8d b4 10 4e fd
	53 a9		 lea	 esi, DWORD PTR [rax+rdx-1454113458]
  009b5	c1 c6 05	 rol	 esi, 5
  009b8	41 03 f0	 add	 esi, r8d
  009bb	41 c1 c4 0a	 rol	 r12d, 10

; 280  : 	Subround(J, b1, c1, d1, e1, a1, X[13],  6, k4);

  009bf	41 8b c4	 mov	 eax, r12d
  009c2	f7 d0		 not	 eax
  009c4	0b c5		 or	 eax, ebp
  009c6	33 c6		 xor	 eax, esi

; 281  : 
; 282  : 	Subround(J, a2, b2, c2, d2, e2, X[ 5],  8, k5);

  009c8	4c 8b 4c 24 60	 mov	 r9, QWORD PTR digest$[rsp]
  009cd	41 03 43 34	 add	 eax, DWORD PTR [r11+52]
  009d1	41 8b 51 10	 mov	 edx, DWORD PTR [r9+16]
  009d5	41 8b 09	 mov	 ecx, DWORD PTR [r9]
  009d8	42 8d bc 00 4e
	fd 53 a9	 lea	 edi, DWORD PTR [rax+r8-1454113458]
  009e0	45 8b 41 0c	 mov	 r8d, DWORD PTR [r9+12]
  009e4	c1 c7 06	 rol	 edi, 6
  009e7	41 8b c0	 mov	 eax, r8d
  009ea	f7 d0		 not	 eax
  009ec	41 03 ff	 add	 edi, r15d
  009ef	41 0b 41 08	 or	 eax, DWORD PTR [r9+8]
  009f3	41 33 41 04	 xor	 eax, DWORD PTR [r9+4]
  009f7	41 03 43 14	 add	 eax, DWORD PTR [r11+20]
  009fb	8d 8c 08 e6 8b
	a2 50		 lea	 ecx, DWORD PTR [rax+rcx+1352829926]

; 283  : 	Subround(J, e2, a2, b2, c2, d2, X[14],  9, k5);

  00a02	41 8b c6	 mov	 eax, r14d
  00a05	f7 d0		 not	 eax
  00a07	c1 c1 08	 rol	 ecx, 8
  00a0a	41 0b 41 04	 or	 eax, DWORD PTR [r9+4]
  00a0e	03 ca		 add	 ecx, edx
  00a10	33 c1		 xor	 eax, ecx
  00a12	41 03 43 38	 add	 eax, DWORD PTR [r11+56]
  00a16	8d 94 10 e6 8b
	a2 50		 lea	 edx, DWORD PTR [rax+rdx+1352829926]

; 284  : 	Subround(J, d2, e2, a2, b2, c2, X[ 7],  9, k5);

  00a1d	41 8b c5	 mov	 eax, r13d
  00a20	f7 d0		 not	 eax
  00a22	c1 c2 09	 rol	 edx, 9
  00a25	0b c1		 or	 eax, ecx
  00a27	41 03 d0	 add	 edx, r8d
  00a2a	33 c2		 xor	 eax, edx
  00a2c	41 03 43 1c	 add	 eax, DWORD PTR [r11+28]
  00a30	46 8d 84 00 e6
	8b a2 50	 lea	 r8d, DWORD PTR [rax+r8+1352829926]
  00a38	41 c1 c0 09	 rol	 r8d, 9
  00a3c	45 03 c6	 add	 r8d, r14d
  00a3f	c1 c1 0a	 rol	 ecx, 10

; 285  : 	Subround(J, c2, d2, e2, a2, b2, X[ 0], 11, k5);

  00a42	8b c1		 mov	 eax, ecx
  00a44	f7 d0		 not	 eax
  00a46	0b c2		 or	 eax, edx
  00a48	41 33 c0	 xor	 eax, r8d
  00a4b	41 03 03	 add	 eax, DWORD PTR [r11]
  00a4e	46 8d 8c 30 e6
	8b a2 50	 lea	 r9d, DWORD PTR [rax+r14+1352829926]
  00a56	4c 8b 74 24 68	 mov	 r14, QWORD PTR data$[rsp]
  00a5b	41 c1 c1 0b	 rol	 r9d, 11
  00a5f	45 03 cd	 add	 r9d, r13d
  00a62	c1 c2 0a	 rol	 edx, 10

; 286  : 	Subround(J, b2, c2, d2, e2, a2, X[ 9], 13, k5);

  00a65	8b c2		 mov	 eax, edx
  00a67	f7 d0		 not	 eax
  00a69	41 0b c0	 or	 eax, r8d
  00a6c	41 33 c1	 xor	 eax, r9d
  00a6f	41 03 43 24	 add	 eax, DWORD PTR [r11+36]
  00a73	46 8d 94 28 e6
	8b a2 50	 lea	 r10d, DWORD PTR [rax+r13+1352829926]
  00a7b	41 c1 c2 0d	 rol	 r10d, 13
  00a7f	44 03 d1	 add	 r10d, ecx
  00a82	41 c1 c0 0a	 rol	 r8d, 10

; 287  : 	Subround(J, a2, b2, c2, d2, e2, X[ 2], 15, k5);

  00a86	41 8b c0	 mov	 eax, r8d
  00a89	f7 d0		 not	 eax
  00a8b	41 0b c1	 or	 eax, r9d
  00a8e	41 33 c2	 xor	 eax, r10d
  00a91	41 03 43 08	 add	 eax, DWORD PTR [r11+8]
  00a95	44 8d 9c 08 e6
	8b a2 50	 lea	 r11d, DWORD PTR [rax+rcx+1352829926]
  00a9d	41 c1 c3 0f	 rol	 r11d, 15
  00aa1	44 03 da	 add	 r11d, edx
  00aa4	41 c1 c1 0a	 rol	 r9d, 10

; 288  : 	Subround(J, e2, a2, b2, c2, d2, X[11], 15, k5);

  00aa8	41 8b c1	 mov	 eax, r9d
  00aab	f7 d0		 not	 eax
  00aad	41 0b c2	 or	 eax, r10d
  00ab0	41 33 c3	 xor	 eax, r11d
  00ab3	03 44 24 70	 add	 eax, DWORD PTR tv5660[rsp]
  00ab7	8d 8c 10 e6 8b
	a2 50		 lea	 ecx, DWORD PTR [rax+rdx+1352829926]
  00abe	c1 c1 0f	 rol	 ecx, 15
  00ac1	41 03 c8	 add	 ecx, r8d
  00ac4	41 c1 c2 0a	 rol	 r10d, 10

; 289  : 	Subround(J, d2, e2, a2, b2, c2, X[ 4],  5, k5);

  00ac8	41 8b c2	 mov	 eax, r10d
  00acb	f7 d0		 not	 eax
  00acd	41 0b c3	 or	 eax, r11d
  00ad0	33 c1		 xor	 eax, ecx
  00ad2	41 03 46 10	 add	 eax, DWORD PTR [r14+16]
  00ad6	42 8d 94 00 e6
	8b a2 50	 lea	 edx, DWORD PTR [rax+r8+1352829926]
  00ade	c1 c2 05	 rol	 edx, 5
  00ae1	41 03 d1	 add	 edx, r9d
  00ae4	41 c1 c3 0a	 rol	 r11d, 10

; 290  : 	Subround(J, c2, d2, e2, a2, b2, X[13],  7, k5);

  00ae8	41 8b c3	 mov	 eax, r11d
  00aeb	f7 d0		 not	 eax
  00aed	45 8b 6e 34	 mov	 r13d, DWORD PTR [r14+52]
  00af1	0b c1		 or	 eax, ecx
  00af3	33 c2		 xor	 eax, edx
  00af5	41 03 c5	 add	 eax, r13d
  00af8	46 8d 84 08 e6
	8b a2 50	 lea	 r8d, DWORD PTR [rax+r9+1352829926]
  00b00	41 c1 c0 07	 rol	 r8d, 7
  00b04	45 03 c2	 add	 r8d, r10d
  00b07	c1 c1 0a	 rol	 ecx, 10

; 291  : 	Subround(J, b2, c2, d2, e2, a2, X[ 6],  7, k5);

  00b0a	8b c1		 mov	 eax, ecx
  00b0c	f7 d0		 not	 eax
  00b0e	0b c2		 or	 eax, edx
  00b10	41 33 c0	 xor	 eax, r8d
  00b13	41 03 46 18	 add	 eax, DWORD PTR [r14+24]
  00b17	46 8d 8c 10 e6
	8b a2 50	 lea	 r9d, DWORD PTR [rax+r10+1352829926]
  00b1f	41 c1 c1 07	 rol	 r9d, 7
  00b23	45 03 cb	 add	 r9d, r11d
  00b26	c1 c2 0a	 rol	 edx, 10

; 292  : 	Subround(J, a2, b2, c2, d2, e2, X[15],  8, k5);

  00b29	8b c2		 mov	 eax, edx
  00b2b	f7 d0		 not	 eax
  00b2d	41 0b c0	 or	 eax, r8d
  00b30	41 33 c1	 xor	 eax, r9d
  00b33	03 c3		 add	 eax, ebx
  00b35	46 8d 94 18 e6
	8b a2 50	 lea	 r10d, DWORD PTR [rax+r11+1352829926]
  00b3d	41 c1 c2 08	 rol	 r10d, 8
  00b41	44 03 d1	 add	 r10d, ecx
  00b44	41 c1 c0 0a	 rol	 r8d, 10

; 293  : 	Subround(J, e2, a2, b2, c2, d2, X[ 8], 11, k5);

  00b48	41 8b c0	 mov	 eax, r8d
  00b4b	f7 d0		 not	 eax
  00b4d	41 0b c1	 or	 eax, r9d
  00b50	41 33 c2	 xor	 eax, r10d
  00b53	41 03 46 20	 add	 eax, DWORD PTR [r14+32]
  00b57	44 8d 9c 08 e6
	8b a2 50	 lea	 r11d, DWORD PTR [rax+rcx+1352829926]
  00b5f	41 c1 c3 0b	 rol	 r11d, 11
  00b63	44 03 da	 add	 r11d, edx
  00b66	41 c1 c1 0a	 rol	 r9d, 10

; 294  : 	Subround(J, d2, e2, a2, b2, c2, X[ 1], 14, k5);

  00b6a	41 8b c1	 mov	 eax, r9d
  00b6d	f7 d0		 not	 eax
  00b6f	41 0b c2	 or	 eax, r10d
  00b72	41 33 c3	 xor	 eax, r11d
  00b75	41 03 46 04	 add	 eax, DWORD PTR [r14+4]
  00b79	8d 8c 10 e6 8b
	a2 50		 lea	 ecx, DWORD PTR [rax+rdx+1352829926]
  00b80	c1 c1 0e	 rol	 ecx, 14
  00b83	41 03 c8	 add	 ecx, r8d
  00b86	41 c1 c2 0a	 rol	 r10d, 10

; 295  : 	Subround(J, c2, d2, e2, a2, b2, X[10], 14, k5);

  00b8a	41 8b c2	 mov	 eax, r10d
  00b8d	f7 d0		 not	 eax
  00b8f	41 0b c3	 or	 eax, r11d
  00b92	33 c1		 xor	 eax, ecx
  00b94	41 03 46 28	 add	 eax, DWORD PTR [r14+40]
  00b98	42 8d 94 00 e6
	8b a2 50	 lea	 edx, DWORD PTR [rax+r8+1352829926]
  00ba0	c1 c2 0e	 rol	 edx, 14
  00ba3	41 03 d1	 add	 edx, r9d
  00ba6	41 c1 c3 0a	 rol	 r11d, 10

; 296  : 	Subround(J, b2, c2, d2, e2, a2, X[ 3], 12, k5);

  00baa	41 8b c3	 mov	 eax, r11d
  00bad	f7 d0		 not	 eax
  00baf	0b c1		 or	 eax, ecx
  00bb1	33 c2		 xor	 eax, edx
  00bb3	41 03 46 0c	 add	 eax, DWORD PTR [r14+12]
  00bb7	46 8d 84 08 e6
	8b a2 50	 lea	 r8d, DWORD PTR [rax+r9+1352829926]
  00bbf	4d 8b ce	 mov	 r9, r14
  00bc2	45 8b 76 30	 mov	 r14d, DWORD PTR [r14+48]
  00bc6	41 c1 c0 0c	 rol	 r8d, 12
  00bca	45 03 c2	 add	 r8d, r10d
  00bcd	c1 c1 0a	 rol	 ecx, 10

; 297  : 	Subround(J, a2, b2, c2, d2, e2, X[12],  6, k5);

  00bd0	8b c1		 mov	 eax, ecx
  00bd2	f7 d0		 not	 eax
  00bd4	0b c2		 or	 eax, edx
  00bd6	41 33 c0	 xor	 eax, r8d
  00bd9	41 03 c6	 add	 eax, r14d
  00bdc	46 8d 8c 10 e6
	8b a2 50	 lea	 r9d, DWORD PTR [rax+r10+1352829926]

; 298  : 
; 299  : 	Subround(I, e2, a2, b2, c2, d2, X[ 6],  9, k6); 

  00be4	41 8b c0	 mov	 eax, r8d
  00be7	41 c1 c1 06	 rol	 r9d, 6
  00beb	45 03 cb	 add	 r9d, r11d
  00bee	c1 c2 0a	 rol	 edx, 10
  00bf1	41 33 c1	 xor	 eax, r9d
  00bf4	23 c2		 and	 eax, edx
  00bf6	41 33 c0	 xor	 eax, r8d
  00bf9	03 44 24 08	 add	 eax, DWORD PTR tv5667[rsp]
  00bfd	46 8d 94 18 24
	d1 4d 5c	 lea	 r10d, DWORD PTR [rax+r11+1548603684]
  00c05	41 c1 c2 09	 rol	 r10d, 9
  00c09	44 03 d1	 add	 r10d, ecx
  00c0c	41 c1 c0 0a	 rol	 r8d, 10

; 300  : 	Subround(I, d2, e2, a2, b2, c2, X[11], 13, k6);

  00c10	41 8b c2	 mov	 eax, r10d
  00c13	41 33 c1	 xor	 eax, r9d
  00c16	41 23 c0	 and	 eax, r8d
  00c19	41 33 c1	 xor	 eax, r9d
  00c1c	03 44 24 70	 add	 eax, DWORD PTR tv5660[rsp]
  00c20	44 8d 9c 08 24
	d1 4d 5c	 lea	 r11d, DWORD PTR [rax+rcx+1548603684]

; 301  : 	Subround(I, c2, d2, e2, a2, b2, X[ 3], 15, k6);

  00c28	41 8b c2	 mov	 eax, r10d
  00c2b	41 c1 c3 0d	 rol	 r11d, 13
  00c2f	44 03 da	 add	 r11d, edx
  00c32	41 c1 c1 0a	 rol	 r9d, 10
  00c36	41 33 c3	 xor	 eax, r11d
  00c39	41 23 c1	 and	 eax, r9d
  00c3c	41 33 c2	 xor	 eax, r10d
  00c3f	03 04 24	 add	 eax, DWORD PTR tv5672[rsp]
  00c42	8d 8c 10 24 d1
	4d 5c		 lea	 ecx, DWORD PTR [rax+rdx+1548603684]
  00c49	48 8b 54 24 68	 mov	 rdx, QWORD PTR data$[rsp]

; 302  : 	Subround(I, b2, c2, d2, e2, a2, X[ 7],  7, k6);

  00c4e	41 8b c3	 mov	 eax, r11d
  00c51	c1 c1 0f	 rol	 ecx, 15
  00c54	41 03 c8	 add	 ecx, r8d
  00c57	41 c1 c2 0a	 rol	 r10d, 10
  00c5b	33 c1		 xor	 eax, ecx
  00c5d	41 23 c2	 and	 eax, r10d
  00c60	41 33 c3	 xor	 eax, r11d
  00c63	03 42 1c	 add	 eax, DWORD PTR [rdx+28]
  00c66	42 8d 94 00 24
	d1 4d 5c	 lea	 edx, DWORD PTR [rax+r8+1548603684]

; 303  : 	Subround(I, a2, b2, c2, d2, e2, X[ 0], 12, k6);

  00c6e	8b c1		 mov	 eax, ecx
  00c70	c1 c2 07	 rol	 edx, 7
  00c73	41 03 d1	 add	 edx, r9d
  00c76	41 c1 c3 0a	 rol	 r11d, 10
  00c7a	33 c2		 xor	 eax, edx
  00c7c	41 23 c3	 and	 eax, r11d
  00c7f	33 c1		 xor	 eax, ecx
  00c81	03 44 24 04	 add	 eax, DWORD PTR tv5676[rsp]
  00c85	46 8d 84 08 24
	d1 4d 5c	 lea	 r8d, DWORD PTR [rax+r9+1548603684]

; 304  : 	Subround(I, e2, a2, b2, c2, d2, X[13],  8, k6);

  00c8d	8b c2		 mov	 eax, edx
  00c8f	41 c1 c0 0c	 rol	 r8d, 12
  00c93	45 03 c2	 add	 r8d, r10d
  00c96	c1 c1 0a	 rol	 ecx, 10
  00c99	41 33 c0	 xor	 eax, r8d
  00c9c	23 c1		 and	 eax, ecx
  00c9e	33 c2		 xor	 eax, edx
  00ca0	41 03 c5	 add	 eax, r13d
  00ca3	46 8d 8c 10 24
	d1 4d 5c	 lea	 r9d, DWORD PTR [rax+r10+1548603684]
  00cab	4c 8b 54 24 68	 mov	 r10, QWORD PTR data$[rsp]
  00cb0	41 c1 c1 08	 rol	 r9d, 8
  00cb4	45 03 cb	 add	 r9d, r11d
  00cb7	c1 c2 0a	 rol	 edx, 10

; 305  : 	Subround(I, d2, e2, a2, b2, c2, X[ 5],  9, k6);

  00cba	41 8b c1	 mov	 eax, r9d
  00cbd	41 33 c0	 xor	 eax, r8d
  00cc0	23 c2		 and	 eax, edx
  00cc2	41 33 c0	 xor	 eax, r8d
  00cc5	41 03 42 14	 add	 eax, DWORD PTR [r10+20]
  00cc9	46 8d 94 18 24
	d1 4d 5c	 lea	 r10d, DWORD PTR [rax+r11+1548603684]
  00cd1	4c 8b 5c 24 68	 mov	 r11, QWORD PTR data$[rsp]

; 306  : 	Subround(I, c2, d2, e2, a2, b2, X[10], 11, k6);

  00cd6	41 8b c1	 mov	 eax, r9d
  00cd9	41 c1 c2 09	 rol	 r10d, 9
  00cdd	44 03 d1	 add	 r10d, ecx
  00ce0	41 c1 c0 0a	 rol	 r8d, 10
  00ce4	41 33 c2	 xor	 eax, r10d
  00ce7	41 23 c0	 and	 eax, r8d
  00cea	41 33 c1	 xor	 eax, r9d
  00ced	41 03 43 28	 add	 eax, DWORD PTR [r11+40]
  00cf1	44 8d 9c 08 24
	d1 4d 5c	 lea	 r11d, DWORD PTR [rax+rcx+1548603684]
  00cf9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR data$[rsp]

; 307  : 	Subround(I, b2, c2, d2, e2, a2, X[14],  7, k6);

  00cfe	41 8b c2	 mov	 eax, r10d
  00d01	41 c1 c3 0b	 rol	 r11d, 11
  00d05	44 03 da	 add	 r11d, edx
  00d08	41 c1 c1 0a	 rol	 r9d, 10
  00d0c	41 33 c3	 xor	 eax, r11d
  00d0f	41 23 c1	 and	 eax, r9d
  00d12	41 33 c2	 xor	 eax, r10d
  00d15	03 41 38	 add	 eax, DWORD PTR [rcx+56]
  00d18	8d 8c 10 24 d1
	4d 5c		 lea	 ecx, DWORD PTR [rax+rdx+1548603684]

; 308  : 	Subround(I, a2, b2, c2, d2, e2, X[15],  7, k6);

  00d1f	41 8b c3	 mov	 eax, r11d
  00d22	c1 c1 07	 rol	 ecx, 7
  00d25	41 03 c8	 add	 ecx, r8d
  00d28	41 c1 c2 0a	 rol	 r10d, 10
  00d2c	33 c1		 xor	 eax, ecx
  00d2e	41 23 c2	 and	 eax, r10d
  00d31	41 33 c3	 xor	 eax, r11d
  00d34	03 c3		 add	 eax, ebx
  00d36	42 8d 94 00 24
	d1 4d 5c	 lea	 edx, DWORD PTR [rax+r8+1548603684]
  00d3e	4c 8b 44 24 68	 mov	 r8, QWORD PTR data$[rsp]

; 309  : 	Subround(I, e2, a2, b2, c2, d2, X[ 8], 12, k6);

  00d43	8b c1		 mov	 eax, ecx
  00d45	c1 c2 07	 rol	 edx, 7
  00d48	41 03 d1	 add	 edx, r9d
  00d4b	41 c1 c3 0a	 rol	 r11d, 10
  00d4f	33 c2		 xor	 eax, edx
  00d51	41 23 c3	 and	 eax, r11d
  00d54	33 c1		 xor	 eax, ecx
  00d56	41 03 40 20	 add	 eax, DWORD PTR [r8+32]
  00d5a	46 8d 84 08 24
	d1 4d 5c	 lea	 r8d, DWORD PTR [rax+r9+1548603684]
  00d62	41 c1 c0 0c	 rol	 r8d, 12
  00d66	45 03 c2	 add	 r8d, r10d
  00d69	c1 c1 0a	 rol	 ecx, 10

; 310  : 	Subround(I, d2, e2, a2, b2, c2, X[12],  7, k6);

  00d6c	41 8b c0	 mov	 eax, r8d
  00d6f	33 c2		 xor	 eax, edx
  00d71	23 c1		 and	 eax, ecx
  00d73	33 c2		 xor	 eax, edx
  00d75	41 03 c6	 add	 eax, r14d
  00d78	46 8d 8c 10 24
	d1 4d 5c	 lea	 r9d, DWORD PTR [rax+r10+1548603684]
  00d80	4c 8b 54 24 68	 mov	 r10, QWORD PTR data$[rsp]

; 311  : 	Subround(I, c2, d2, e2, a2, b2, X[ 4],  6, k6);

  00d85	41 8b c0	 mov	 eax, r8d
  00d88	41 c1 c1 07	 rol	 r9d, 7
  00d8c	45 03 cb	 add	 r9d, r11d
  00d8f	c1 c2 0a	 rol	 edx, 10
  00d92	41 33 c1	 xor	 eax, r9d
  00d95	23 c2		 and	 eax, edx
  00d97	41 33 c0	 xor	 eax, r8d
  00d9a	41 03 42 10	 add	 eax, DWORD PTR [r10+16]
  00d9e	46 8d 94 18 24
	d1 4d 5c	 lea	 r10d, DWORD PTR [rax+r11+1548603684]

; 312  : 	Subround(I, b2, c2, d2, e2, a2, X[ 9], 15, k6);

  00da6	41 8b c1	 mov	 eax, r9d
  00da9	41 c1 c2 06	 rol	 r10d, 6
  00dad	44 03 d1	 add	 r10d, ecx
  00db0	41 c1 c0 0a	 rol	 r8d, 10
  00db4	41 33 c2	 xor	 eax, r10d
  00db7	41 23 c0	 and	 eax, r8d
  00dba	41 33 c1	 xor	 eax, r9d
  00dbd	03 44 24 0c	 add	 eax, DWORD PTR tv5662[rsp]
  00dc1	44 8d 9c 08 24
	d1 4d 5c	 lea	 r11d, DWORD PTR [rax+rcx+1548603684]
  00dc9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR data$[rsp]

; 313  : 	Subround(I, a2, b2, c2, d2, e2, X[ 1], 13, k6);

  00dce	41 8b c2	 mov	 eax, r10d
  00dd1	41 c1 c3 0f	 rol	 r11d, 15
  00dd5	44 03 da	 add	 r11d, edx
  00dd8	41 c1 c1 0a	 rol	 r9d, 10
  00ddc	41 33 c3	 xor	 eax, r11d
  00ddf	41 23 c1	 and	 eax, r9d
  00de2	41 33 c2	 xor	 eax, r10d
  00de5	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00de8	8d 8c 10 24 d1
	4d 5c		 lea	 ecx, DWORD PTR [rax+rdx+1548603684]

; 314  : 	Subround(I, e2, a2, b2, c2, d2, X[ 2], 11, k6);

  00def	41 8b c3	 mov	 eax, r11d
  00df2	c1 c1 0d	 rol	 ecx, 13
  00df5	41 03 c8	 add	 ecx, r8d
  00df8	41 c1 c2 0a	 rol	 r10d, 10
  00dfc	33 c1		 xor	 eax, ecx
  00dfe	41 23 c2	 and	 eax, r10d
  00e01	41 33 c3	 xor	 eax, r11d
  00e04	03 44 24 78	 add	 eax, DWORD PTR tv5673[rsp]
  00e08	42 8d 94 00 24
	d1 4d 5c	 lea	 edx, DWORD PTR [rax+r8+1548603684]

; 315  : 
; 316  : 	Subround(H, d2, e2, a2, b2, c2, X[15],  9, k7);

  00e10	8b c1		 mov	 eax, ecx
  00e12	f7 d0		 not	 eax
  00e14	c1 c2 0b	 rol	 edx, 11
  00e17	41 03 d1	 add	 edx, r9d
  00e1a	41 c1 c3 0a	 rol	 r11d, 10
  00e1e	0b c2		 or	 eax, edx
  00e20	41 33 c3	 xor	 eax, r11d
  00e23	03 c3		 add	 eax, ebx
  00e25	46 8d 84 08 f3
	3e 70 6d	 lea	 r8d, DWORD PTR [rax+r9+1836072691]
  00e2d	4c 8b 4c 24 68	 mov	 r9, QWORD PTR data$[rsp]

; 317  : 	Subround(H, c2, d2, e2, a2, b2, X[ 5],  7, k7);

  00e32	8b c2		 mov	 eax, edx
  00e34	41 c1 c0 09	 rol	 r8d, 9
  00e38	f7 d0		 not	 eax
  00e3a	45 03 c2	 add	 r8d, r10d
  00e3d	c1 c1 0a	 rol	 ecx, 10
  00e40	41 0b c0	 or	 eax, r8d
  00e43	33 c1		 xor	 eax, ecx
  00e45	41 03 41 14	 add	 eax, DWORD PTR [r9+20]
  00e49	46 8d 8c 10 f3
	3e 70 6d	 lea	 r9d, DWORD PTR [rax+r10+1836072691]
  00e51	41 c1 c1 07	 rol	 r9d, 7
  00e55	45 03 cb	 add	 r9d, r11d
  00e58	4c 8b 54 24 68	 mov	 r10, QWORD PTR data$[rsp]
  00e5d	c1 c2 0a	 rol	 edx, 10

; 318  : 	Subround(H, b2, c2, d2, e2, a2, X[ 1], 15, k7);

  00e60	41 8b c0	 mov	 eax, r8d
  00e63	f7 d0		 not	 eax
  00e65	41 0b c1	 or	 eax, r9d
  00e68	33 c2		 xor	 eax, edx
  00e6a	41 03 42 04	 add	 eax, DWORD PTR [r10+4]
  00e6e	46 8d 94 18 f3
	3e 70 6d	 lea	 r10d, DWORD PTR [rax+r11+1836072691]

; 319  : 	Subround(H, a2, b2, c2, d2, e2, X[ 3], 11, k7);

  00e76	41 8b c1	 mov	 eax, r9d
  00e79	f7 d0		 not	 eax
  00e7b	41 c1 c2 0f	 rol	 r10d, 15
  00e7f	44 03 d1	 add	 r10d, ecx
  00e82	41 c1 c0 0a	 rol	 r8d, 10
  00e86	41 0b c2	 or	 eax, r10d
  00e89	41 33 c0	 xor	 eax, r8d
  00e8c	03 04 24	 add	 eax, DWORD PTR tv5672[rsp]
  00e8f	44 8d 9c 08 f3
	3e 70 6d	 lea	 r11d, DWORD PTR [rax+rcx+1836072691]
  00e97	48 8b 4c 24 68	 mov	 rcx, QWORD PTR data$[rsp]

; 320  : 	Subround(H, e2, a2, b2, c2, d2, X[ 7],  8, k7);

  00e9c	41 8b c2	 mov	 eax, r10d
  00e9f	f7 d0		 not	 eax
  00ea1	41 c1 c3 0b	 rol	 r11d, 11
  00ea5	44 03 da	 add	 r11d, edx
  00ea8	41 c1 c1 0a	 rol	 r9d, 10
  00eac	41 0b c3	 or	 eax, r11d
  00eaf	41 33 c1	 xor	 eax, r9d
  00eb2	03 41 1c	 add	 eax, DWORD PTR [rcx+28]
  00eb5	8d 8c 10 f3 3e
	70 6d		 lea	 ecx, DWORD PTR [rax+rdx+1836072691]
  00ebc	48 8b 54 24 68	 mov	 rdx, QWORD PTR data$[rsp]

; 321  : 	Subround(H, d2, e2, a2, b2, c2, X[14],  6, k7);

  00ec1	41 8b c3	 mov	 eax, r11d
  00ec4	f7 d0		 not	 eax
  00ec6	c1 c1 08	 rol	 ecx, 8
  00ec9	41 03 c8	 add	 ecx, r8d
  00ecc	41 c1 c2 0a	 rol	 r10d, 10
  00ed0	0b c1		 or	 eax, ecx
  00ed2	41 33 c2	 xor	 eax, r10d
  00ed5	03 42 38	 add	 eax, DWORD PTR [rdx+56]
  00ed8	42 8d 94 00 f3
	3e 70 6d	 lea	 edx, DWORD PTR [rax+r8+1836072691]

; 322  : 	Subround(H, c2, d2, e2, a2, b2, X[ 6],  6, k7);

  00ee0	8b c1		 mov	 eax, ecx
  00ee2	f7 d0		 not	 eax
  00ee4	c1 c2 06	 rol	 edx, 6
  00ee7	41 03 d1	 add	 edx, r9d
  00eea	41 c1 c3 0a	 rol	 r11d, 10
  00eee	0b c2		 or	 eax, edx
  00ef0	41 33 c3	 xor	 eax, r11d
  00ef3	03 44 24 08	 add	 eax, DWORD PTR tv5667[rsp]
  00ef7	46 8d 84 08 f3
	3e 70 6d	 lea	 r8d, DWORD PTR [rax+r9+1836072691]

; 323  : 	Subround(H, b2, c2, d2, e2, a2, X[ 9], 14, k7);

  00eff	8b c2		 mov	 eax, edx
  00f01	f7 d0		 not	 eax
  00f03	41 c1 c0 06	 rol	 r8d, 6
  00f07	45 03 c2	 add	 r8d, r10d
  00f0a	c1 c1 0a	 rol	 ecx, 10
  00f0d	41 0b c0	 or	 eax, r8d
  00f10	33 c1		 xor	 eax, ecx
  00f12	03 44 24 0c	 add	 eax, DWORD PTR tv5662[rsp]
  00f16	46 8d 8c 10 f3
	3e 70 6d	 lea	 r9d, DWORD PTR [rax+r10+1836072691]

; 324  : 	Subround(H, a2, b2, c2, d2, e2, X[11], 12, k7);

  00f1e	41 8b c0	 mov	 eax, r8d
  00f21	f7 d0		 not	 eax
  00f23	41 c1 c1 0e	 rol	 r9d, 14
  00f27	45 03 cb	 add	 r9d, r11d
  00f2a	c1 c2 0a	 rol	 edx, 10
  00f2d	41 0b c1	 or	 eax, r9d
  00f30	33 c2		 xor	 eax, edx
  00f32	03 44 24 70	 add	 eax, DWORD PTR tv5660[rsp]
  00f36	46 8d 94 18 f3
	3e 70 6d	 lea	 r10d, DWORD PTR [rax+r11+1836072691]
  00f3e	4c 8b 5c 24 68	 mov	 r11, QWORD PTR data$[rsp]

; 325  : 	Subround(H, e2, a2, b2, c2, d2, X[ 8], 13, k7);

  00f43	41 8b c1	 mov	 eax, r9d
  00f46	f7 d0		 not	 eax
  00f48	41 c1 c2 0c	 rol	 r10d, 12
  00f4c	44 03 d1	 add	 r10d, ecx
  00f4f	41 c1 c0 0a	 rol	 r8d, 10
  00f53	41 0b c2	 or	 eax, r10d
  00f56	41 33 c0	 xor	 eax, r8d
  00f59	41 03 43 20	 add	 eax, DWORD PTR [r11+32]
  00f5d	44 8d 9c 08 f3
	3e 70 6d	 lea	 r11d, DWORD PTR [rax+rcx+1836072691]

; 326  : 	Subround(H, d2, e2, a2, b2, c2, X[12],  5, k7);

  00f65	41 8b c2	 mov	 eax, r10d
  00f68	41 c1 c3 0d	 rol	 r11d, 13
  00f6c	f7 d0		 not	 eax
  00f6e	44 03 da	 add	 r11d, edx
  00f71	41 c1 c1 0a	 rol	 r9d, 10
  00f75	41 0b c3	 or	 eax, r11d
  00f78	41 33 c1	 xor	 eax, r9d
  00f7b	41 03 c6	 add	 eax, r14d
  00f7e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR data$[rsp]
  00f83	8d 94 10 f3 3e
	70 6d		 lea	 edx, DWORD PTR [rax+rdx+1836072691]

; 327  : 	Subround(H, c2, d2, e2, a2, b2, X[ 2], 14, k7);

  00f8a	41 8b c3	 mov	 eax, r11d
  00f8d	f7 d0		 not	 eax
  00f8f	c1 c2 05	 rol	 edx, 5
  00f92	41 03 d0	 add	 edx, r8d
  00f95	41 c1 c2 0a	 rol	 r10d, 10
  00f99	0b c2		 or	 eax, edx
  00f9b	41 33 c2	 xor	 eax, r10d
  00f9e	03 44 24 78	 add	 eax, DWORD PTR tv5673[rsp]
  00fa2	46 8d 84 00 f3
	3e 70 6d	 lea	 r8d, DWORD PTR [rax+r8+1836072691]

; 328  : 	Subround(H, b2, c2, d2, e2, a2, X[10], 13, k7);

  00faa	8b c2		 mov	 eax, edx
  00fac	f7 d0		 not	 eax
  00fae	41 c1 c0 0e	 rol	 r8d, 14
  00fb2	45 03 c1	 add	 r8d, r9d
  00fb5	41 c1 c3 0a	 rol	 r11d, 10
  00fb9	41 0b c0	 or	 eax, r8d
  00fbc	41 33 c3	 xor	 eax, r11d
  00fbf	03 41 28	 add	 eax, DWORD PTR [rcx+40]
  00fc2	46 8d 8c 08 f3
	3e 70 6d	 lea	 r9d, DWORD PTR [rax+r9+1836072691]

; 329  : 	Subround(H, a2, b2, c2, d2, e2, X[ 0], 13, k7);

  00fca	41 8b c0	 mov	 eax, r8d
  00fcd	f7 d0		 not	 eax
  00fcf	41 c1 c1 0d	 rol	 r9d, 13
  00fd3	45 03 ca	 add	 r9d, r10d
  00fd6	c1 c2 0a	 rol	 edx, 10
  00fd9	41 0b c1	 or	 eax, r9d
  00fdc	33 c2		 xor	 eax, edx
  00fde	03 01		 add	 eax, DWORD PTR [rcx]
  00fe0	46 8d 94 10 f3
	3e 70 6d	 lea	 r10d, DWORD PTR [rax+r10+1836072691]

; 330  : 	Subround(H, e2, a2, b2, c2, d2, X[ 4],  7, k7);

  00fe8	41 8b c1	 mov	 eax, r9d
  00feb	f7 d0		 not	 eax
  00fed	41 c1 c2 0d	 rol	 r10d, 13
  00ff1	45 03 d3	 add	 r10d, r11d
  00ff4	41 c1 c0 0a	 rol	 r8d, 10
  00ff8	41 0b c2	 or	 eax, r10d
  00ffb	41 33 c0	 xor	 eax, r8d
  00ffe	03 41 10	 add	 eax, DWORD PTR [rcx+16]
  01001	42 8d 8c 18 f3
	3e 70 6d	 lea	 ecx, DWORD PTR [rax+r11+1836072691]
  01009	4c 8b 5c 24 68	 mov	 r11, QWORD PTR data$[rsp]

; 331  : 	Subround(H, d2, e2, a2, b2, c2, X[13],  5, k7);

  0100e	41 8b c2	 mov	 eax, r10d
  01011	f7 d0		 not	 eax
  01013	c1 c1 07	 rol	 ecx, 7
  01016	03 ca		 add	 ecx, edx
  01018	41 c1 c1 0a	 rol	 r9d, 10
  0101c	0b c1		 or	 eax, ecx
  0101e	41 33 c1	 xor	 eax, r9d
  01021	41 03 c5	 add	 eax, r13d
  01024	8d 94 10 f3 3e
	70 6d		 lea	 edx, DWORD PTR [rax+rdx+1836072691]

; 332  : 
; 333  : 	Subround(G, c2, d2, e2, a2, b2, X[ 8], 15, k8);

  0102b	8b c1		 mov	 eax, ecx
  0102d	c1 c2 05	 rol	 edx, 5
  01030	41 03 d0	 add	 edx, r8d
  01033	41 c1 c2 0a	 rol	 r10d, 10
  01037	41 33 c2	 xor	 eax, r10d
  0103a	23 c2		 and	 eax, edx
  0103c	41 33 c2	 xor	 eax, r10d
  0103f	41 03 43 20	 add	 eax, DWORD PTR [r11+32]
  01043	46 8d 84 00 e9
	76 6d 7a	 lea	 r8d, DWORD PTR [rax+r8+2053994217]
  0104b	41 c1 c0 0f	 rol	 r8d, 15
  0104f	45 03 c1	 add	 r8d, r9d
  01052	c1 c1 0a	 rol	 ecx, 10

; 334  : 	Subround(G, b2, c2, d2, e2, a2, X[ 6],  5, k8);

  01055	8b c1		 mov	 eax, ecx
  01057	33 c2		 xor	 eax, edx
  01059	41 23 c0	 and	 eax, r8d
  0105c	33 c1		 xor	 eax, ecx
  0105e	41 03 43 18	 add	 eax, DWORD PTR [r11+24]
  01062	46 8d 8c 08 e9
	76 6d 7a	 lea	 r9d, DWORD PTR [rax+r9+2053994217]
  0106a	41 c1 c1 05	 rol	 r9d, 5
  0106e	45 03 ca	 add	 r9d, r10d
  01071	c1 c2 0a	 rol	 edx, 10

; 335  : 	Subround(G, a2, b2, c2, d2, e2, X[ 4],  8, k8);

  01074	8b c2		 mov	 eax, edx
  01076	41 33 c0	 xor	 eax, r8d
  01079	41 23 c1	 and	 eax, r9d
  0107c	33 c2		 xor	 eax, edx
  0107e	41 03 43 10	 add	 eax, DWORD PTR [r11+16]
  01082	46 8d 94 10 e9
	76 6d 7a	 lea	 r10d, DWORD PTR [rax+r10+2053994217]
  0108a	41 c1 c2 08	 rol	 r10d, 8
  0108e	44 03 d1	 add	 r10d, ecx
  01091	41 c1 c0 0a	 rol	 r8d, 10

; 336  : 	Subround(G, e2, a2, b2, c2, d2, X[ 1], 11, k8);

  01095	41 8b c0	 mov	 eax, r8d
  01098	41 33 c1	 xor	 eax, r9d
  0109b	41 23 c2	 and	 eax, r10d
  0109e	41 33 c0	 xor	 eax, r8d
  010a1	41 03 43 04	 add	 eax, DWORD PTR [r11+4]
  010a5	44 8d 9c 08 e9
	76 6d 7a	 lea	 r11d, DWORD PTR [rax+rcx+2053994217]
  010ad	41 c1 c3 0b	 rol	 r11d, 11
  010b1	44 03 da	 add	 r11d, edx
  010b4	41 c1 c1 0a	 rol	 r9d, 10

; 337  : 	Subround(G, d2, e2, a2, b2, c2, X[ 3], 14, k8);

  010b8	41 8b c1	 mov	 eax, r9d
  010bb	41 33 c2	 xor	 eax, r10d
  010be	41 23 c3	 and	 eax, r11d
  010c1	41 33 c1	 xor	 eax, r9d
  010c4	03 04 24	 add	 eax, DWORD PTR tv5672[rsp]
  010c7	8d 8c 10 e9 76
	6d 7a		 lea	 ecx, DWORD PTR [rax+rdx+2053994217]

; 338  : 	Subround(G, c2, d2, e2, a2, b2, X[11], 14, k8);

  010ce	41 8b c3	 mov	 eax, r11d
  010d1	c1 c1 0e	 rol	 ecx, 14
  010d4	41 03 c8	 add	 ecx, r8d
  010d7	41 c1 c2 0a	 rol	 r10d, 10
  010db	41 33 c2	 xor	 eax, r10d
  010de	23 c1		 and	 eax, ecx
  010e0	41 33 c2	 xor	 eax, r10d
  010e3	03 44 24 70	 add	 eax, DWORD PTR tv5660[rsp]
  010e7	42 8d 94 00 e9
	76 6d 7a	 lea	 edx, DWORD PTR [rax+r8+2053994217]
  010ef	c1 c2 0e	 rol	 edx, 14
  010f2	41 03 d1	 add	 edx, r9d
  010f5	41 c1 c3 0a	 rol	 r11d, 10

; 339  : 	Subround(G, b2, c2, d2, e2, a2, X[15],  6, k8);

  010f9	41 8b c3	 mov	 eax, r11d
  010fc	33 c1		 xor	 eax, ecx
  010fe	23 c2		 and	 eax, edx
  01100	41 33 c3	 xor	 eax, r11d
  01103	03 c3		 add	 eax, ebx
  01105	46 8d 84 08 e9
	76 6d 7a	 lea	 r8d, DWORD PTR [rax+r9+2053994217]
  0110d	41 c1 c0 06	 rol	 r8d, 6
  01111	45 03 c2	 add	 r8d, r10d
  01114	c1 c1 0a	 rol	 ecx, 10

; 340  : 	Subround(G, a2, b2, c2, d2, e2, X[ 0], 14, k8);

  01117	8b c1		 mov	 eax, ecx
  01119	33 c2		 xor	 eax, edx
  0111b	41 23 c0	 and	 eax, r8d
  0111e	33 c1		 xor	 eax, ecx
  01120	03 44 24 04	 add	 eax, DWORD PTR tv5676[rsp]
  01124	46 8d 8c 10 e9
	76 6d 7a	 lea	 r9d, DWORD PTR [rax+r10+2053994217]
  0112c	4c 8b 54 24 68	 mov	 r10, QWORD PTR data$[rsp]
  01131	41 c1 c1 0e	 rol	 r9d, 14
  01135	45 03 cb	 add	 r9d, r11d
  01138	c1 c2 0a	 rol	 edx, 10

; 341  : 	Subround(G, e2, a2, b2, c2, d2, X[ 5],  6, k8);

  0113b	8b c2		 mov	 eax, edx
  0113d	41 33 c0	 xor	 eax, r8d
  01140	41 23 c1	 and	 eax, r9d
  01143	33 c2		 xor	 eax, edx
  01145	41 03 42 14	 add	 eax, DWORD PTR [r10+20]
  01149	46 8d 94 18 e9
	76 6d 7a	 lea	 r10d, DWORD PTR [rax+r11+2053994217]
  01151	41 c1 c2 06	 rol	 r10d, 6
  01155	44 03 d1	 add	 r10d, ecx
  01158	41 c1 c0 0a	 rol	 r8d, 10

; 342  : 	Subround(G, d2, e2, a2, b2, c2, X[12],  9, k8);

  0115c	41 8b c0	 mov	 eax, r8d
  0115f	41 33 c1	 xor	 eax, r9d
  01162	41 23 c2	 and	 eax, r10d
  01165	41 33 c0	 xor	 eax, r8d
  01168	41 03 c6	 add	 eax, r14d
  0116b	44 8d 9c 08 e9
	76 6d 7a	 lea	 r11d, DWORD PTR [rax+rcx+2053994217]

; 343  : 	Subround(G, c2, d2, e2, a2, b2, X[ 2], 12, k8);

  01173	41 8b c2	 mov	 eax, r10d
  01176	41 c1 c3 09	 rol	 r11d, 9
  0117a	44 03 da	 add	 r11d, edx
  0117d	41 c1 c1 0a	 rol	 r9d, 10
  01181	41 33 c1	 xor	 eax, r9d
  01184	41 23 c3	 and	 eax, r11d
  01187	41 33 c1	 xor	 eax, r9d
  0118a	03 44 24 78	 add	 eax, DWORD PTR tv5673[rsp]
  0118e	8d 8c 10 e9 76
	6d 7a		 lea	 ecx, DWORD PTR [rax+rdx+2053994217]
  01195	c1 c1 0c	 rol	 ecx, 12
  01198	41 03 c8	 add	 ecx, r8d
  0119b	41 c1 c2 0a	 rol	 r10d, 10

; 344  : 	Subround(G, b2, c2, d2, e2, a2, X[13],  9, k8);

  0119f	41 8b c2	 mov	 eax, r10d
  011a2	41 33 c3	 xor	 eax, r11d
  011a5	23 c1		 and	 eax, ecx
  011a7	41 33 c2	 xor	 eax, r10d
  011aa	41 03 c5	 add	 eax, r13d
  011ad	42 8d 94 00 e9
	76 6d 7a	 lea	 edx, DWORD PTR [rax+r8+2053994217]
  011b5	c1 c2 09	 rol	 edx, 9
  011b8	41 03 d1	 add	 edx, r9d
  011bb	41 c1 c3 0a	 rol	 r11d, 10

; 345  : 	Subround(G, a2, b2, c2, d2, e2, X[ 9], 12, k8);

  011bf	41 8b c3	 mov	 eax, r11d
  011c2	33 c1		 xor	 eax, ecx
  011c4	23 c2		 and	 eax, edx
  011c6	41 33 c3	 xor	 eax, r11d
  011c9	03 44 24 0c	 add	 eax, DWORD PTR tv5662[rsp]
  011cd	46 8d 84 08 e9
	76 6d 7a	 lea	 r8d, DWORD PTR [rax+r9+2053994217]
  011d5	4c 8b 4c 24 68	 mov	 r9, QWORD PTR data$[rsp]
  011da	41 c1 c0 0c	 rol	 r8d, 12
  011de	45 03 c2	 add	 r8d, r10d
  011e1	c1 c1 0a	 rol	 ecx, 10

; 346  : 	Subround(G, e2, a2, b2, c2, d2, X[ 7],  5, k8);

  011e4	8b c1		 mov	 eax, ecx
  011e6	33 c2		 xor	 eax, edx
  011e8	41 23 c0	 and	 eax, r8d
  011eb	33 c1		 xor	 eax, ecx
  011ed	41 03 41 1c	 add	 eax, DWORD PTR [r9+28]
  011f1	46 8d 8c 10 e9
	76 6d 7a	 lea	 r9d, DWORD PTR [rax+r10+2053994217]
  011f9	4c 8b 54 24 68	 mov	 r10, QWORD PTR data$[rsp]
  011fe	41 c1 c1 05	 rol	 r9d, 5
  01202	45 03 cb	 add	 r9d, r11d
  01205	c1 c2 0a	 rol	 edx, 10

; 347  : 	Subround(G, d2, e2, a2, b2, c2, X[10], 15, k8);

  01208	8b c2		 mov	 eax, edx
  0120a	41 33 c0	 xor	 eax, r8d
  0120d	41 23 c1	 and	 eax, r9d
  01210	33 c2		 xor	 eax, edx
  01212	41 03 42 28	 add	 eax, DWORD PTR [r10+40]
  01216	46 8d 94 18 e9
	76 6d 7a	 lea	 r10d, DWORD PTR [rax+r11+2053994217]
  0121e	4c 8b 5c 24 68	 mov	 r11, QWORD PTR data$[rsp]

; 348  : 	Subround(G, c2, d2, e2, a2, b2, X[14],  8, k8);

  01223	41 8b c1	 mov	 eax, r9d
  01226	41 c1 c2 0f	 rol	 r10d, 15
  0122a	44 03 d1	 add	 r10d, ecx
  0122d	41 c1 c0 0a	 rol	 r8d, 10
  01231	41 33 c0	 xor	 eax, r8d
  01234	41 23 c2	 and	 eax, r10d
  01237	41 33 c0	 xor	 eax, r8d
  0123a	41 03 43 38	 add	 eax, DWORD PTR [r11+56]
  0123e	8d 8c 08 e9 76
	6d 7a		 lea	 ecx, DWORD PTR [rax+rcx+2053994217]
  01245	c1 c1 08	 rol	 ecx, 8
  01248	03 ca		 add	 ecx, edx
  0124a	41 c1 c1 0a	 rol	 r9d, 10
  0124e	41 8b c1	 mov	 eax, r9d
  01251	41 33 c2	 xor	 eax, r10d

; 349  : 
; 350  : 	Subround(F, b2, c2, d2, e2, a2, X[12],  8, k9);

  01254	33 c1		 xor	 eax, ecx
  01256	41 03 c6	 add	 eax, r14d
  01259	03 c2		 add	 eax, edx
  0125b	c1 c0 08	 rol	 eax, 8
  0125e	41 03 c0	 add	 eax, r8d
  01261	41 c1 c2 0a	 rol	 r10d, 10
  01265	41 8b d2	 mov	 edx, r10d
  01268	33 d1		 xor	 edx, ecx

; 351  : 	Subround(F, a2, b2, c2, d2, e2, X[15],  5, k9);

  0126a	33 d0		 xor	 edx, eax
  0126c	03 d3		 add	 edx, ebx
  0126e	41 03 d0	 add	 edx, r8d
  01271	c1 c2 05	 rol	 edx, 5
  01274	41 03 d1	 add	 edx, r9d
  01277	c1 c1 0a	 rol	 ecx, 10
  0127a	44 8b c1	 mov	 r8d, ecx
  0127d	44 33 c0	 xor	 r8d, eax

; 352  : 	Subround(F, e2, a2, b2, c2, d2, X[10], 12, k9);

  01280	44 33 c2	 xor	 r8d, edx
  01283	45 03 43 28	 add	 r8d, DWORD PTR [r11+40]
  01287	45 03 c1	 add	 r8d, r9d
  0128a	41 c1 c0 0c	 rol	 r8d, 12
  0128e	45 03 c2	 add	 r8d, r10d
  01291	c1 c0 0a	 rol	 eax, 10
  01294	45 8b c8	 mov	 r9d, r8d
  01297	44 33 c8	 xor	 r9d, eax

; 353  : 	Subround(F, d2, e2, a2, b2, c2, X[ 4],  9, k9);

  0129a	44 33 ca	 xor	 r9d, edx
  0129d	45 03 4b 10	 add	 r9d, DWORD PTR [r11+16]
  012a1	45 03 ca	 add	 r9d, r10d
  012a4	45 8b d0	 mov	 r10d, r8d
  012a7	41 c1 c1 09	 rol	 r9d, 9
  012ab	44 03 c9	 add	 r9d, ecx
  012ae	c1 c2 0a	 rol	 edx, 10
  012b1	45 33 d1	 xor	 r10d, r9d

; 354  : 	Subround(F, c2, d2, e2, a2, b2, X[ 1], 12, k9);

  012b4	44 33 d2	 xor	 r10d, edx
  012b7	45 03 53 04	 add	 r10d, DWORD PTR [r11+4]
  012bb	44 03 d1	 add	 r10d, ecx
  012be	41 c1 c2 0c	 rol	 r10d, 12
  012c2	44 03 d0	 add	 r10d, eax
  012c5	41 c1 c0 0a	 rol	 r8d, 10
  012c9	41 8b c8	 mov	 ecx, r8d
  012cc	41 33 c9	 xor	 ecx, r9d

; 355  : 	Subround(F, b2, c2, d2, e2, a2, X[ 5],  5, k9);

  012cf	41 33 ca	 xor	 ecx, r10d
  012d2	41 03 4b 14	 add	 ecx, DWORD PTR [r11+20]
  012d6	03 c8		 add	 ecx, eax
  012d8	c1 c1 05	 rol	 ecx, 5
  012db	03 ca		 add	 ecx, edx
  012dd	41 c1 c1 0a	 rol	 r9d, 10
  012e1	41 8b c1	 mov	 eax, r9d
  012e4	41 33 c2	 xor	 eax, r10d

; 356  : 	Subround(F, a2, b2, c2, d2, e2, X[ 8], 14, k9);

  012e7	33 c1		 xor	 eax, ecx
  012e9	41 03 43 20	 add	 eax, DWORD PTR [r11+32]
  012ed	03 c2		 add	 eax, edx
  012ef	c1 c0 0e	 rol	 eax, 14
  012f2	41 03 c0	 add	 eax, r8d
  012f5	41 c1 c2 0a	 rol	 r10d, 10
  012f9	41 8b d2	 mov	 edx, r10d
  012fc	33 d1		 xor	 edx, ecx

; 357  : 	Subround(F, e2, a2, b2, c2, d2, X[ 7],  6, k9);

  012fe	33 d0		 xor	 edx, eax
  01300	41 03 53 1c	 add	 edx, DWORD PTR [r11+28]
  01304	41 03 d0	 add	 edx, r8d
  01307	c1 c2 06	 rol	 edx, 6
  0130a	41 03 d1	 add	 edx, r9d
  0130d	c1 c1 0a	 rol	 ecx, 10
  01310	44 8b da	 mov	 r11d, edx
  01313	44 33 d9	 xor	 r11d, ecx

; 358  : 	Subround(F, d2, e2, a2, b2, c2, X[ 6],  8, k9);

  01316	44 33 d8	 xor	 r11d, eax
  01319	44 03 5c 24 08	 add	 r11d, DWORD PTR tv5667[rsp]
  0131e	45 03 d9	 add	 r11d, r9d
  01321	44 8b ca	 mov	 r9d, edx
  01324	41 c1 c3 08	 rol	 r11d, 8
  01328	45 03 da	 add	 r11d, r10d
  0132b	c1 c0 0a	 rol	 eax, 10
  0132e	45 33 cb	 xor	 r9d, r11d

; 359  : 	Subround(F, c2, d2, e2, a2, b2, X[ 2], 13, k9);

  01331	44 33 c8	 xor	 r9d, eax
  01334	44 03 4c 24 78	 add	 r9d, DWORD PTR tv5673[rsp]
  01339	45 03 ca	 add	 r9d, r10d
  0133c	41 c1 c1 0d	 rol	 r9d, 13
  01340	44 03 c9	 add	 r9d, ecx
  01343	c1 c2 0a	 rol	 edx, 10
  01346	44 8b d2	 mov	 r10d, edx
  01349	45 33 d3	 xor	 r10d, r11d

; 360  : 	Subround(F, b2, c2, d2, e2, a2, X[13],  6, k9);

  0134c	45 33 d1	 xor	 r10d, r9d
  0134f	45 03 d5	 add	 r10d, r13d
  01352	44 03 d1	 add	 r10d, ecx
  01355	48 8b 4c 24 68	 mov	 rcx, QWORD PTR data$[rsp]
  0135a	41 c1 c2 06	 rol	 r10d, 6
  0135e	44 03 d0	 add	 r10d, eax
  01361	41 c1 c3 0a	 rol	 r11d, 10
  01365	41 8b db	 mov	 ebx, r11d
  01368	41 33 d9	 xor	 ebx, r9d

; 361  : 	Subround(F, a2, b2, c2, d2, e2, X[14],  5, k9);

  0136b	41 33 da	 xor	 ebx, r10d
  0136e	03 59 38	 add	 ebx, DWORD PTR [rcx+56]
  01371	03 d8		 add	 ebx, eax
  01373	c1 c3 05	 rol	 ebx, 5
  01376	03 da		 add	 ebx, edx
  01378	41 c1 c1 0a	 rol	 r9d, 10
  0137c	45 8b c1	 mov	 r8d, r9d
  0137f	45 33 c2	 xor	 r8d, r10d

; 362  : 	Subround(F, e2, a2, b2, c2, d2, X[ 0], 15, k9);

  01382	44 33 c3	 xor	 r8d, ebx
  01385	44 03 01	 add	 r8d, DWORD PTR [rcx]
  01388	44 03 c2	 add	 r8d, edx
  0138b	41 c1 c0 0f	 rol	 r8d, 15
  0138f	45 03 c3	 add	 r8d, r11d
  01392	41 c1 c2 0a	 rol	 r10d, 10
  01396	41 8b c0	 mov	 eax, r8d

; 363  : 	Subround(F, d2, e2, a2, b2, c2, X[ 3], 13, k9);

  01399	41 8b d0	 mov	 edx, r8d
  0139c	41 33 c2	 xor	 eax, r10d
  0139f	33 c3		 xor	 eax, ebx
  013a1	03 04 24	 add	 eax, DWORD PTR tv5672[rsp]
  013a4	41 03 c3	 add	 eax, r11d
  013a7	c1 c0 0d	 rol	 eax, 13
  013aa	41 03 c1	 add	 eax, r9d
  013ad	c1 c3 0a	 rol	 ebx, 10
  013b0	33 d0		 xor	 edx, eax

; 364  : 	Subround(F, c2, d2, e2, a2, b2, X[ 9], 11, k9);

  013b2	33 d3		 xor	 edx, ebx
  013b4	03 54 24 0c	 add	 edx, DWORD PTR tv5662[rsp]
  013b8	41 03 d1	 add	 edx, r9d
  013bb	c1 c2 0b	 rol	 edx, 11
  013be	41 03 d2	 add	 edx, r10d
  013c1	41 c1 c0 0a	 rol	 r8d, 10
  013c5	41 8b c8	 mov	 ecx, r8d
  013c8	33 c8		 xor	 ecx, eax

; 365  : 	Subround(F, b2, c2, d2, e2, a2, X[11], 11, k9);

  013ca	33 ca		 xor	 ecx, edx

; 366  : 
; 367  : 	c1        = digest[1] + c1 + d2;

  013cc	4c 8b 4c 24 60	 mov	 r9, QWORD PTR digest$[rsp]
  013d1	03 4c 24 70	 add	 ecx, DWORD PTR tv5660[rsp]
  013d5	41 03 ca	 add	 ecx, r10d
  013d8	c1 c1 0b	 rol	 ecx, 11
  013db	03 cb		 add	 ecx, ebx
  013dd	c1 c0 0a	 rol	 eax, 10
  013e0	41 03 41 04	 add	 eax, DWORD PTR [r9+4]
  013e4	03 f0		 add	 esi, eax

; 368  : 	digest[1] = digest[2] + d1 + e2;
; 369  : 	digest[2] = digest[3] + e1 + a2;

  013e6	41 8b 41 0c	 mov	 eax, DWORD PTR [r9+12]
  013ea	c1 c5 0a	 rol	 ebp, 10
  013ed	41 03 69 08	 add	 ebp, DWORD PTR [r9+8]
  013f1	41 03 c4	 add	 eax, r12d
  013f4	03 c3		 add	 eax, ebx
  013f6	41 03 e8	 add	 ebp, r8d
  013f9	41 89 41 08	 mov	 DWORD PTR [r9+8], eax

; 370  : 	digest[3] = digest[4] + a1 + b2;

  013fd	41 8b 41 10	 mov	 eax, DWORD PTR [r9+16]
  01401	41 89 69 04	 mov	 DWORD PTR [r9+4], ebp
  01405	03 c1		 add	 eax, ecx
  01407	41 03 c7	 add	 eax, r15d
  0140a	41 89 41 0c	 mov	 DWORD PTR [r9+12], eax

; 371  : 	digest[4] = digest[0] + b1 + c2;

  0140e	41 8b 01	 mov	 eax, DWORD PTR [r9]

; 372  : 	digest[0] = c1;

  01411	41 89 31	 mov	 DWORD PTR [r9], esi
  01414	03 c2		 add	 eax, edx
  01416	03 c7		 add	 eax, edi
  01418	41 89 41 10	 mov	 DWORD PTR [r9+16], eax

; 373  : }

  0141c	48 83 c4 18	 add	 rsp, 24
  01420	41 5f		 pop	 r15
  01422	41 5e		 pop	 r14
  01424	41 5d		 pop	 r13
  01426	41 5c		 pop	 r12
  01428	5f		 pop	 rdi
  01429	5e		 pop	 rsi
  0142a	5d		 pop	 rbp
  0142b	5b		 pop	 rbx
  0142c	c3		 ret	 0
RMD160Transform ENDP
_TEXT	ENDS
PUBLIC	RMD160Update
;	COMDAT pdata
pdata	SEGMENT
$pdata$RMD160Update DD imagerel $LN10
	DD	imagerel $LN10+201
	DD	imagerel $unwind$RMD160Update
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RMD160Update DD 0a1901H
	DD	097419H
	DD	086419H
	DD	075419H
	DD	063419H
	DD	0c0153219H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT RMD160Update
_TEXT	SEGMENT
ctx$ = 48
input$ = 56
lenArg$ = 64
RMD160Update PROC					; COMDAT

; 69   : {

$LN10:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp
  0000b	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000f	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  00013	41 54		 push	 r12
  00015	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 70   : #ifndef TC_WINDOWS_BOOT
; 71   : 	uint64 len = lenArg, have, need;
; 72   : #else
; 73   : 	uint16 len = (uint16) lenArg, have, need;
; 74   : #endif
; 75   : 
; 76   : 	/* Check how many bytes we already have and how many more we need. */
; 77   : 	have = ((ctx->count >> 3) & (RIPEMD160_BLOCK_LENGTH - 1));

  00019	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  0001d	41 8b d8	 mov	 ebx, r8d

; 78   : 	need = RIPEMD160_BLOCK_LENGTH - have;

  00020	bf 40 00 00 00	 mov	 edi, 64			; 00000040H
  00025	4c 8b e0	 mov	 r12, rax

; 79   : 
; 80   : 	/* Update bitcount */
; 81   : 	ctx->count += len << 3;

  00028	48 8d 04 d8	 lea	 rax, QWORD PTR [rax+rbx*8]
  0002c	48 8b f2	 mov	 rsi, rdx
  0002f	49 c1 ec 03	 shr	 r12, 3
  00033	48 8b e9	 mov	 rbp, rcx
  00036	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
  0003a	41 83 e4 3f	 and	 r12d, 63		; 0000003fH
  0003e	49 2b fc	 sub	 rdi, r12

; 82   : 
; 83   : 	if (len >= need) {

  00041	48 3b df	 cmp	 rbx, rdi
  00044	72 53		 jb	 SHORT $LN2@RMD160Upda

; 84   : 		if (have != 0) {

  00046	4d 85 e4	 test	 r12, r12
  00049	74 22		 je	 SHORT $LN8@RMD160Upda

; 85   : 			memcpy (ctx->buffer + have, input, (size_t) need);

  0004b	49 8d 4c 0c 20	 lea	 rcx, QWORD PTR [r12+rcx+32]
  00050	4c 8b c7	 mov	 r8, rdi
  00053	e8 00 00 00 00	 call	 memcpy

; 86   : 			RMD160Transform ((uint32 *) ctx->state, (const uint32 *) ctx->buffer);

  00058	48 8d 55 20	 lea	 rdx, QWORD PTR [rbp+32]
  0005c	48 8b cd	 mov	 rcx, rbp
  0005f	e8 00 00 00 00	 call	 RMD160Transform

; 87   : 			input += need;

  00064	48 03 f7	 add	 rsi, rdi

; 88   : 			len -= need;

  00067	48 2b df	 sub	 rbx, rdi

; 89   : 			have = 0;

  0006a	45 33 e4	 xor	 r12d, r12d
$LN8@RMD160Upda:

; 90   : 		}
; 91   : 
; 92   : 		/* Process data in RIPEMD160_BLOCK_LENGTH-byte chunks. */
; 93   : 		while (len >= RIPEMD160_BLOCK_LENGTH) {

  0006d	48 83 fb 40	 cmp	 rbx, 64			; 00000040H
  00071	72 26		 jb	 SHORT $LN2@RMD160Upda
  00073	48 8b fb	 mov	 rdi, rbx
  00076	48 c1 ef 06	 shr	 rdi, 6
  0007a	48 8b c7	 mov	 rax, rdi
  0007d	48 6b c0 c0	 imul	 rax, -64		; ffffffffffffffc0H
  00081	48 03 d8	 add	 rbx, rax
$LL3@RMD160Upda:

; 94   : 			RMD160Transform ((uint32 *) ctx->state, (const uint32 *) input);

  00084	48 8b d6	 mov	 rdx, rsi
  00087	48 8b cd	 mov	 rcx, rbp
  0008a	e8 00 00 00 00	 call	 RMD160Transform

; 95   : 			input += RIPEMD160_BLOCK_LENGTH;

  0008f	48 83 c6 40	 add	 rsi, 64			; 00000040H
  00093	48 83 ef 01	 sub	 rdi, 1
  00097	75 eb		 jne	 SHORT $LL3@RMD160Upda
$LN2@RMD160Upda:

; 96   : 			len -= RIPEMD160_BLOCK_LENGTH;
; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	/* Handle any remaining bytes of data. */
; 101  : 	if (len != 0)

  00099	48 85 db	 test	 rbx, rbx
  0009c	74 10		 je	 SHORT $LN1@RMD160Upda

; 102  : 		memcpy (ctx->buffer + have, input, (size_t) len);

  0009e	49 8d 4c 2c 20	 lea	 rcx, QWORD PTR [r12+rbp+32]
  000a3	4c 8b c3	 mov	 r8, rbx
  000a6	48 8b d6	 mov	 rdx, rsi
  000a9	e8 00 00 00 00	 call	 memcpy
$LN1@RMD160Upda:

; 103  : }

  000ae	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b3	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000b8	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000bd	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000c2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c6	41 5c		 pop	 r12
  000c8	c3		 ret	 0
RMD160Update ENDP
PUBLIC	__$ArrayPad$
;	COMDAT pdata
pdata	SEGMENT
$pdata$RMD160Pad DD imagerel RMD160Pad
	DD	imagerel RMD160Pad+189
	DD	imagerel $unwind$RMD160Pad
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RMD160Pad DD 021519H
	DD	030025206H
	DD	imagerel __GSHandlerCheck
	DD	028H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT RMD160Pad
_TEXT	SEGMENT
count$ = 32
__$ArrayPad$ = 40
ctx$ = 64
RMD160Pad PROC						; COMDAT

; 110  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000d	48 33 c4	 xor	 rax, rsp
  00010	48 89 44 24 28	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 111  : 	byte count[8];
; 112  : 	uint32 padlen;
; 113  : 
; 114  : 	/* Convert count to 8 bytes in little endian order. */
; 115  : 
; 116  : #ifndef TC_WINDOWS_BOOT
; 117  : 	PUT_64BIT_LE(count, ctx->count);

  00015	48 8b 51 18	 mov	 rdx, QWORD PTR [rcx+24]

; 118  : #else
; 119  : 	*(uint32 *) (count + 4) = 0;
; 120  : 	*(uint16 *) (count + 2) = 0;
; 121  : 	*(uint16 *) (count + 0) = ctx->count;
; 122  : #endif
; 123  : 
; 124  : 	/* Pad out to 56 mod 64. */
; 125  : 	padlen = RIPEMD160_BLOCK_LENGTH -
; 126  : 		(uint32)((ctx->count >> 3) & (RIPEMD160_BLOCK_LENGTH - 1));

  00019	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0001f	48 8b d9	 mov	 rbx, rcx
  00022	48 8b c2	 mov	 rax, rdx
  00025	88 54 24 20	 mov	 BYTE PTR count$[rsp], dl
  00029	48 c1 e8 38	 shr	 rax, 56			; 00000038H
  0002d	88 44 24 27	 mov	 BYTE PTR count$[rsp+7], al
  00031	48 8b c2	 mov	 rax, rdx
  00034	48 c1 e8 30	 shr	 rax, 48			; 00000030H
  00038	88 44 24 26	 mov	 BYTE PTR count$[rsp+6], al
  0003c	48 8b c2	 mov	 rax, rdx
  0003f	48 c1 e8 28	 shr	 rax, 40			; 00000028H
  00043	88 44 24 25	 mov	 BYTE PTR count$[rsp+5], al
  00047	48 8b c2	 mov	 rax, rdx
  0004a	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  0004e	88 44 24 24	 mov	 BYTE PTR count$[rsp+4], al
  00052	48 8b c2	 mov	 rax, rdx
  00055	48 c1 e8 18	 shr	 rax, 24
  00059	88 44 24 23	 mov	 BYTE PTR count$[rsp+3], al
  0005d	48 8b c2	 mov	 rax, rdx
  00060	48 c1 e8 10	 shr	 rax, 16
  00064	88 44 24 22	 mov	 BYTE PTR count$[rsp+2], al
  00068	48 8b c2	 mov	 rax, rdx
  0006b	48 c1 ea 03	 shr	 rdx, 3
  0006f	83 e2 3f	 and	 edx, 63			; 0000003fH
  00072	48 c1 e8 08	 shr	 rax, 8
  00076	44 2b c2	 sub	 r8d, edx
  00079	88 44 24 21	 mov	 BYTE PTR count$[rsp+1], al

; 127  : 	if (padlen < 1 + 8)

  0007d	41 83 f8 09	 cmp	 r8d, 9
  00081	73 04		 jae	 SHORT $LN1@RMD160Pad

; 128  : 		padlen += RIPEMD160_BLOCK_LENGTH;

  00083	41 83 c0 40	 add	 r8d, 64			; 00000040H
$LN1@RMD160Pad:

; 129  : 	RMD160Update(ctx, PADDING, padlen - 8);            /* padlen - 8 <= 64 */

  00087	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PADDING
  0008e	41 83 c0 f8	 add	 r8d, -8			; fffffff8H
  00092	e8 00 00 00 00	 call	 RMD160Update

; 130  : 	RMD160Update(ctx, count, 8);

  00097	48 8d 54 24 20	 lea	 rdx, QWORD PTR count$[rsp]
  0009c	41 b8 08 00 00
	00		 mov	 r8d, 8
  000a2	48 8b cb	 mov	 rcx, rbx
  000a5	e8 00 00 00 00	 call	 RMD160Update

; 131  : }

  000aa	48 8b 4c 24 28	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000af	48 33 cc	 xor	 rcx, rsp
  000b2	e8 00 00 00 00	 call	 __security_check_cookie
  000b7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000bb	5b		 pop	 rbx
  000bc	c3		 ret	 0
RMD160Pad ENDP
PUBLIC	RMD160Final
; Function compile flags: /Ogspy
;	COMDAT RMD160Final
_TEXT	SEGMENT
digest$ = 8
ctx$ = 16
RMD160Final PROC					; COMDAT

; 137  : {

  00000	4c 8b ca	 mov	 r9, rdx

; 138  : 	int i;
; 139  : 
; 140  : 	RMD160Pad(ctx);
; 141  : 	if (digest) {
; 142  : 		for (i = 0; i < 5; i++)

  00003	33 d2		 xor	 edx, edx
  00005	48 83 c1 02	 add	 rcx, 2
$LL6@RMD160Fina:

; 143  : 			PUT_32BIT_LE(digest + i * 4, ctx->state[i]);

  00009	41 8a 44 91 03	 mov	 al, BYTE PTR [r9+rdx*4+3]
  0000e	88 41 01	 mov	 BYTE PTR [rcx+1], al
  00011	41 8a 44 91 02	 mov	 al, BYTE PTR [r9+rdx*4+2]
  00016	88 01		 mov	 BYTE PTR [rcx], al
  00018	41 8b 04 91	 mov	 eax, DWORD PTR [r9+rdx*4]
  0001c	48 83 c1 04	 add	 rcx, 4
  00020	c1 e8 08	 shr	 eax, 8
  00023	88 41 fb	 mov	 BYTE PTR [rcx-5], al
  00026	41 8a 04 91	 mov	 al, BYTE PTR [r9+rdx*4]
  0002a	48 ff c2	 inc	 rdx
  0002d	48 83 fa 05	 cmp	 rdx, 5
  00031	88 41 fa	 mov	 BYTE PTR [rcx-6], al
  00034	7c d3		 jl	 SHORT $LL6@RMD160Fina

; 144  : 		memset (ctx, 0, sizeof(*ctx));

  00036	33 d2		 xor	 edx, edx
  00038	49 8b c9	 mov	 rcx, r9
  0003b	44 8d 42 60	 lea	 r8d, QWORD PTR [rdx+96]

; 145  : 	}
; 146  : }

  0003f	e9 00 00 00 00	 jmp	 memset
RMD160Final ENDP
END
