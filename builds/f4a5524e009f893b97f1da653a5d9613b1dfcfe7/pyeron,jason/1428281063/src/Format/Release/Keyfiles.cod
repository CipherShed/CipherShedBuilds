; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\home\public\Desktop\projects\ciphershed.build\src\Common\Keyfiles.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?MaxPasswordLength@SecurityToken@CipherShed@@2IB ; CipherShed::SecurityToken::MaxPasswordLength
PUBLIC	_HiddenFilesPresentInKeyfilePath
_BSS	SEGMENT
_HiddenFilesPresentInKeyfilePath DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ?MaxPasswordLength@SecurityToken@CipherShed@@2IB
CONST	SEGMENT
?MaxPasswordLength@SecurityToken@CipherShed@@2IB DD 080H ; CipherShed::SecurityToken::MaxPasswordLength
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
_DATA	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
CONST	ENDS
PUBLIC	_RtlSecureZeroMemory
; Function compile flags: /Ogtpy
; File c:\program files\microsoft sdks\windows\v7.1\include\winnt.h
;	COMDAT _RtlSecureZeroMemory
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_cnt$ = 12						; size = 4
_RtlSecureZeroMemory PROC				; COMDAT

; 13070:     volatile char *vptr = (volatile char *)ptr;
; 13071: 
; 13072: #if defined(_M_AMD64)
; 13073: 
; 13074:         __stosb((PBYTE )((DWORD64)vptr), 0, cnt);
; 13075: 
; 13076: #else
; 13077: 
; 13078:     while (cnt) {

  00000	8b 54 24 08	 mov	 edx, DWORD PTR _cnt$[esp-4]
  00004	8b 44 24 04	 mov	 eax, DWORD PTR _ptr$[esp-4]
  00008	8b c8		 mov	 ecx, eax
  0000a	85 d2		 test	 edx, edx
  0000c	74 0b		 je	 SHORT $LN1@RtlSecureZ
  0000e	8b ff		 npad	 2
$LL2@RtlSecureZ:

; 13079:         *vptr = 0;

  00010	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 13080:         vptr++;

  00013	41		 inc	 ecx

; 13081:         cnt--;

  00014	83 ea 01	 sub	 edx, 1
  00017	75 f7		 jne	 SHORT $LL2@RtlSecureZ
$LN1@RtlSecureZ:

; 13082:     }
; 13083: 
; 13084: #endif
; 13085: 
; 13086:     return ptr;
; 13087: }

  00019	c3		 ret	 0
_RtlSecureZeroMemory ENDP
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

  00000	56		 push	 esi
  00001	8d 44 24 08	 lea	 eax, DWORD PTR __Message$[esp]
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtpy
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00009	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000e	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00013	74 09		 je	 SHORT $LN6@scalar
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
$LN6@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	return (_Where);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Where$[esp-4]

; 60   : 	}

  00004	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	_wmemcpy_s
EXTRN	_memcpy_s:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\wchar.h
;	COMDAT _wmemcpy_s
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__N1$ = 12						; size = 4
__S2$ = 16						; size = 4
__N$ = 20						; size = 4
_wmemcpy_s PROC						; COMDAT

; 1232 : #pragma warning( push )
; 1233 : #pragma warning( disable : 6386 )
; 1234 :             return memcpy_s(_S1, _N1*sizeof(wchar_t), _S2, _N*sizeof(wchar_t));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __N$[esp-4]
  00004	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00007	89 4c 24 10	 mov	 DWORD PTR __N$[esp-4], ecx
  0000b	8b 44 24 08	 mov	 eax, DWORD PTR __N1$[esp-4]
  0000f	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00012	89 4c 24 08	 mov	 DWORD PTR __N1$[esp-4], ecx
  00016	e9 00 00 00 00	 jmp	 _memcpy_s
_wmemcpy_s ENDP
_TEXT	ENDS
PUBLIC	_wmemmove_s
EXTRN	_memmove_s:PROC
; Function compile flags: /Ogtpy
;	COMDAT _wmemmove_s
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__N1$ = 12						; size = 4
__S2$ = 16						; size = 4
__N$ = 20						; size = 4
_wmemmove_s PROC					; COMDAT

; 1252 : #pragma warning( push )
; 1253 : #pragma warning( disable : 6386 )
; 1254 :             return memmove_s(_S1, _N1*sizeof(wchar_t), _S2, _N*sizeof(wchar_t));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __N$[esp-4]
  00004	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00007	89 4c 24 10	 mov	 DWORD PTR __N$[esp-4], ecx
  0000b	8b 44 24 08	 mov	 eax, DWORD PTR __N1$[esp-4]
  0000f	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00012	89 4c 24 08	 mov	 DWORD PTR __N1$[esp-4], ecx
  00016	e9 00 00 00 00	 jmp	 _memmove_s
_wmemmove_s ENDP
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z	; std::char_traits<wchar_t>::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z PROC	; std::char_traits<wchar_t>::assign, COMDAT

; 310  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	66 8b 08	 mov	 cx, WORD PTR [eax]
  00007	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000b	66 89 0a	 mov	 WORD PTR [edx], cx

; 311  : 		}

  0000e	c3		 ret	 0
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ENDP	; std::char_traits<wchar_t>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@_W@std@@SAIPB_W@Z		; std::char_traits<wchar_t>::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@_W@std@@SAIPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@_W@std@@SAIPB_W@Z PROC		; std::char_traits<wchar_t>::length, COMDAT

; 333  : //		_DEBUG_POINTER(_First);
; 334  : 		return (::wcslen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL3@length:
  00007	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000a	83 c0 02	 add	 eax, 2
  0000d	66 85 c9	 test	 cx, cx
  00010	75 f5		 jne	 SHORT $LL3@length
  00012	2b c2		 sub	 eax, edx
  00014	d1 f8		 sar	 eax, 1

; 335  : 		}

  00016	c3		 ret	 0
?length@?$char_traits@_W@std@@SAIPB_W@Z ENDP		; std::char_traits<wchar_t>::length
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ; std::char_traits<wchar_t>::_Copy_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_words$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z PROC	; std::char_traits<wchar_t>::_Copy_s, COMDAT

; 348  : //		_DEBUG_POINTER(_First1);
; 349  : //		_DEBUG_POINTER(_First2);
; 350  : 		_CRT_SECURE_WMEMCPY(_First1, _Size_in_words, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size_in_words$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 351  : 		return _First1;

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 352  : 		}

  00026	c3		 ret	 0
?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ENDP	; std::char_traits<wchar_t>::_Copy_s
_TEXT	ENDS
PUBLIC	?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ; std::char_traits<wchar_t>::_Move_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_words$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z PROC	; std::char_traits<wchar_t>::_Move_s, COMDAT

; 372  : //		_DEBUG_POINTER(_First1);
; 373  : //		_DEBUG_POINTER(_First2);
; 374  : 		_CRT_SECURE_WMEMMOVE(_First1, _Size_in_words, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size_in_words$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 375  : 		return (_Elem *)_First1;

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 376  : 		}

  00026	c3		 ret	 0
?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ENDP	; std::char_traits<wchar_t>::_Move_s
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 425  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 426  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 448  : //		_DEBUG_POINTER(_First);
; 449  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@length@2:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $LL3@length@2
  0000e	2b c2		 sub	 eax, edx

; 450  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Copy_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Copy_s, COMDAT

; 463  : //		_DEBUG_POINTER(_First1);
; 464  : //		_DEBUG_POINTER(_First2);
; 465  : 		_CRT_SECURE_MEMCPY(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 466  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 467  : 		}

  00020	c3		 ret	 0
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Copy_s
_TEXT	ENDS
PUBLIC	?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Move_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Move_s, COMDAT

; 487  : //		_DEBUG_POINTER(_First1);
; 488  : //		_DEBUG_POINTER(_First2);
; 489  : 		_CRT_SECURE_MEMMOVE(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 490  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 491  : 		}

  00020	c3		 ret	 0
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Move_s
_TEXT	ENDS
PUBLIC	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Pcont$ = 8						; size = 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z PROC	; std::_Aux_cont::_Aux_cont, COMDAT
; _this$ = ecx

; 364  : 	explicit _Aux_cont(const _Container_base_aux * const _Pcont)

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pcont$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx
  00008	c2 04 00	 ret	 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ENDP	; std::_Aux_cont::_Aux_cont
_TEXT	ENDS
PUBLIC	?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Aux_cont::_Getcont
; Function compile flags: /Ogtpy
;	COMDAT ?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Aux_cont::_Getcont, COMDAT
; _this$ = ecx

; 369  : 		return _Mycontainer;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 370  : 		}

  00002	c3		 ret	 0
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Aux_cont::_Getcont
_TEXT	ENDS
PUBLIC	??0_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::_Container_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??0_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::_Container_base_aux, COMDAT
; _this$ = ecx

; 379  : 	_Container_base_aux()

  00000	8b c1		 mov	 eax, ecx

; 380  : 		{
; 381  : 		// Do nothing: _Container_base_aux_alloc_real() will construct the aux object.
; 382  : 		}

  00002	c3		 ret	 0
??0_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::_Container_base_aux
_TEXT	ENDS
PUBLIC	??1_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::~_Container_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??1_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??1_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::~_Container_base_aux, COMDAT
; _this$ = ecx

; 403  : 		// Do nothing: ~_Container_base_aux_alloc_real() previously destroyed the aux object.
; 404  : 		}

  00000	c3		 ret	 0
??1_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::~_Container_base_aux
_TEXT	ENDS
PUBLIC	??0_Iterator_base_aux@std@@QAE@XZ		; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??0_Iterator_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iterator_base_aux@std@@QAE@XZ PROC			; std::_Iterator_base_aux::_Iterator_base_aux, COMDAT
; _this$ = ecx

; 448  : 	_Iterator_base_aux()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0_Iterator_base_aux@std@@QAE@XZ ENDP			; std::_Iterator_base_aux::_Iterator_base_aux
_TEXT	ENDS
PUBLIC	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z
_TEXT	SEGMENT
__Pcont$ = 8						; size = 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z PROC ; std::_Iterator_base_aux::_Set_container, COMDAT
; _this$ = ecx

; 453  : 		_Myaux = _Pcont->_Myownedaux;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pcont$[esp-4]
  00004	8b 10		 mov	 edx, DWORD PTR [eax]
  00006	89 11		 mov	 DWORD PTR [ecx], edx

; 454  : 		}

  00008	c2 04 00	 ret	 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ENDP ; std::_Iterator_base_aux::_Set_container
_TEXT	ENDS
PUBLIC	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
; Function compile flags: /Ogtpy
;	COMDAT ?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Iterator_base_aux::_Getmycont, COMDAT
; _this$ = ecx

; 458  : 		return _Myaux ? _Myaux->_Getcont() : 0;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	74 03		 je	 SHORT $LN3@Getmycont
  00006	8b 00		 mov	 eax, DWORD PTR [eax]

; 459  : 		}

  00008	c3		 ret	 0
$LN3@Getmycont:

; 458  : 		return _Myaux ? _Myaux->_Getcont() : 0;

  00009	33 c0		 xor	 eax, eax

; 459  : 		}

  0000b	c3		 ret	 0
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Iterator_base_aux::_Getmycont
_TEXT	ENDS
PUBLIC	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z PROC ; std::_Iterator_base_aux::_Same_container, COMDAT
; _this$ = ecx

; 463  : 		return _Myaux == _Other._Myaux;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Other$[esp-4]
  00006	33 c9		 xor	 ecx, ecx
  00008	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000a	0f 94 c1	 sete	 cl
  0000d	8a c1		 mov	 al, cl

; 464  : 		}

  0000f	c2 04 00	 ret	 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ENDP ; std::_Iterator_base_aux::_Same_container
_TEXT	ENDS
PUBLIC	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ	; std::_Iterator_base_aux::_Has_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Has_container@_Iterator_base_aux@std@@QBE_NXZ
_TEXT	SEGMENT
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ PROC	; std::_Iterator_base_aux::_Has_container, COMDAT
; _this$ = ecx

; 468  : 		return _Myaux != 0;

  00000	33 c0		 xor	 eax, eax
  00002	39 01		 cmp	 DWORD PTR [ecx], eax
  00004	0f 95 c0	 setne	 al

; 469  : 		}

  00007	c3		 ret	 0
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ENDP	; std::_Iterator_base_aux::_Has_container
_TEXT	ENDS
PUBLIC	??_7Container@ForEach@CipherShed@@6B@		; CipherShed::ForEach::Container::`vftable'
PUBLIC	??0Container@ForEach@CipherShed@@QAE@XZ		; CipherShed::ForEach::Container::Container
PUBLIC	??_R4Container@ForEach@CipherShed@@6B@		; CipherShed::ForEach::Container::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUContainer@ForEach@CipherShed@@@8	; CipherShed::ForEach::Container `RTTI Type Descriptor'
PUBLIC	??_R3Container@ForEach@CipherShed@@8		; CipherShed::ForEach::Container::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Container@ForEach@CipherShed@@8		; CipherShed::ForEach::Container::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Container@ForEach@CipherShed@@8	; CipherShed::ForEach::Container::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EContainer@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::Container::`vector deleting destructor'
EXTRN	__purecall:PROC
;	COMDAT ??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
rdata$r	SEGMENT
??_R1A@?0A@EA@Container@ForEach@CipherShed@@8 DD FLAT:??_R0?AUContainer@ForEach@CipherShed@@@8 ; CipherShed::ForEach::Container::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2Container@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2Container@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8 ; CipherShed::ForEach::Container::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Container@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3Container@ForEach@CipherShed@@8 DD 00H		; CipherShed::ForEach::Container::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUContainer@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUContainer@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::Container `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUContainer@ForEach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Container@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4Container@ForEach@CipherShed@@6B@ DD 00H		; CipherShed::ForEach::Container::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUContainer@ForEach@CipherShed@@@8
	DD	FLAT:??_R3Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7Container@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7Container@ForEach@CipherShed@@6B@ DD FLAT:??_R4Container@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::Container::`vftable'
	DD	FLAT:??_EContainer@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0Container@ForEach@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0Container@ForEach@CipherShed@@QAE@XZ PROC		; CipherShed::ForEach::Container::Container, COMDAT
; _this$ = ecx

; 19   : 			Container () : InnerContinue (true), InnerEndCondition (false) { }

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00008	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  0000c	c6 40 05 00	 mov	 BYTE PTR [eax+5], 0
  00010	c3		 ret	 0
??0Container@ForEach@CipherShed@@QAE@XZ ENDP		; CipherShed::ForEach::Container::Container
_TEXT	ENDS
PUBLIC	??1Container@ForEach@CipherShed@@UAE@XZ		; CipherShed::ForEach::Container::~Container
; Function compile flags: /Ogtpy
;	COMDAT ??1Container@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
??1Container@ForEach@CipherShed@@UAE@XZ PROC		; CipherShed::ForEach::Container::~Container, COMDAT
; _this$ = ecx

; 20   : 			virtual ~Container () { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00006	c3		 ret	 0
??1Container@ForEach@CipherShed@@UAE@XZ ENDP		; CipherShed::ForEach::Container::~Container
_TEXT	ENDS
PUBLIC	?Continue@Container@ForEach@CipherShed@@QBEXXZ	; CipherShed::ForEach::Container::Continue
; Function compile flags: /Ogtpy
;	COMDAT ?Continue@Container@ForEach@CipherShed@@QBEXXZ
_TEXT	SEGMENT
?Continue@Container@ForEach@CipherShed@@QBEXXZ PROC	; CipherShed::ForEach::Container::Continue, COMDAT
; _this$ = ecx

; 22   : 			void Continue () const { InnerContinue = true; }

  00000	c6 41 04 01	 mov	 BYTE PTR [ecx+4], 1
  00004	c3		 ret	 0
?Continue@Container@ForEach@CipherShed@@QBEXXZ ENDP	; CipherShed::ForEach::Container::Continue
_TEXT	ENDS
PUBLIC	?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ ; CipherShed::ForEach::Container::InnerIsNotEnd
; Function compile flags: /Ogtpy
;	COMDAT ?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ
_TEXT	SEGMENT
?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ PROC ; CipherShed::ForEach::Container::InnerIsNotEnd, COMDAT
; _this$ = ecx

; 23   : 			bool InnerIsNotEnd () const { return InnerEndCondition = !InnerEndCondition; }

  00000	80 79 05 00	 cmp	 BYTE PTR [ecx+5], 0
  00004	0f 94 c0	 sete	 al
  00007	88 41 05	 mov	 BYTE PTR [ecx+5], al
  0000a	c3		 ret	 0
?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ ENDP ; CipherShed::ForEach::Container::InnerIsNotEnd
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_GContainer@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GContainer@ForEach@CipherShed@@UAEPAXI@Z PROC	; CipherShed::ForEach::Container::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  0000e	74 09		 je	 SHORT $LN6@scalar@2
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN6@scalar@2:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_GContainer@ForEach@CipherShed@@UAEPAXI@Z ENDP	; CipherShed::ForEach::Container::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	_KeyFileAdd
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\keyfiles.c
;	COMDAT _KeyFileAdd
_TEXT	SEGMENT
_firstKeyFile$ = 8					; size = 4
_keyFile$ = 12						; size = 4
_KeyFileAdd PROC					; COMDAT

; 39   : 	KeyFile *kf = firstKeyFile;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _firstKeyFile$[esp-4]
  00004	8b d0		 mov	 edx, eax

; 40   : 
; 41   : 	if (firstKeyFile != NULL)

  00006	85 c0		 test	 eax, eax
  00008	74 3c		 je	 SHORT $LN4@KeyFileAdd

; 42   : 	{
; 43   : 		while (kf->Next)

  0000a	83 b8 04 01 00
	00 00		 cmp	 DWORD PTR [eax+260], 0
  00011	8d 88 04 01 00
	00		 lea	 ecx, DWORD PTR [eax+260]
  00017	74 18		 je	 SHORT $LN2@KeyFileAdd
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL3@KeyFileAdd:

; 44   : 			kf = kf->Next;

  00020	8b 11		 mov	 edx, DWORD PTR [ecx]
  00022	83 ba 04 01 00
	00 00		 cmp	 DWORD PTR [edx+260], 0
  00029	8d 8a 04 01 00
	00		 lea	 ecx, DWORD PTR [edx+260]
  0002f	75 ef		 jne	 SHORT $LL3@KeyFileAdd
$LN2@KeyFileAdd:

; 45   : 
; 46   : 		kf->Next = keyFile;

  00031	8b 4c 24 08	 mov	 ecx, DWORD PTR _keyFile$[esp-4]
  00035	89 8a 04 01 00
	00		 mov	 DWORD PTR [edx+260], ecx

; 50   : 
; 51   : 	keyFile->Next = NULL;

  0003b	c7 81 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+260], 0

; 52   : 
; 53   : 	return firstKeyFile;
; 54   : }

  00045	c3		 ret	 0
$LN4@KeyFileAdd:

; 47   : 	}
; 48   : 	else
; 49   : 		firstKeyFile = keyFile;

  00046	8b 44 24 08	 mov	 eax, DWORD PTR _keyFile$[esp-4]

; 50   : 
; 51   : 	keyFile->Next = NULL;

  0004a	c7 80 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+260], 0

; 52   : 
; 53   : 	return firstKeyFile;
; 54   : }

  00054	c3		 ret	 0
_KeyFileAdd ENDP
_TEXT	ENDS
EXTRN	_free:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?KeyFileRemove@@YAPAUKeyFileStruct@@PAU1@0@Z
_TEXT	SEGMENT
?KeyFileRemove@@YAPAUKeyFileStruct@@PAU1@0@Z PROC	; KeyFileRemove, COMDAT
; _firstKeyFile$ = eax
; _keyFile$ = edi

; 59   : {

  00000	53		 push	 ebx
  00001	8b d8		 mov	 ebx, eax

; 60   : 	KeyFile *prevkf = NULL, *kf = firstKeyFile;

  00003	33 c9		 xor	 ecx, ecx

; 61   : 
; 62   : 	if (firstKeyFile == NULL) return NULL;

  00005	85 db		 test	 ebx, ebx
  00007	75 07		 jne	 SHORT $LL11@KeyFileRem
  00009	5b		 pop	 ebx

; 81   : }

  0000a	c3		 ret	 0
  0000b	eb 03 8d 49 00	 npad	 5
$LL11@KeyFileRem:

; 63   : 	do
; 64   : 	{
; 65   : 		if (kf == keyFile)

  00010	3b c7		 cmp	 eax, edi
  00012	74 10		 je	 SHORT $LN22@KeyFileRem

; 74   : 			break;
; 75   : 		}
; 76   : 		prevkf = kf;

  00014	8b c8		 mov	 ecx, eax

; 77   : 	}
; 78   : 	while (kf = kf->Next);

  00016	8b 80 04 01 00
	00		 mov	 eax, DWORD PTR [eax+260]
  0001c	85 c0		 test	 eax, eax
  0001e	75 f0		 jne	 SHORT $LL11@KeyFileRem

; 79   : 
; 80   : 	return firstKeyFile;

  00020	8b c3		 mov	 eax, ebx
  00022	5b		 pop	 ebx

; 81   : }

  00023	c3		 ret	 0
$LN22@KeyFileRem:

; 66   : 		{
; 67   : 			if (prevkf == NULL)

  00024	85 c9		 test	 ecx, ecx
  00026	75 08		 jne	 SHORT $LN7@KeyFileRem

; 68   : 				firstKeyFile = kf->Next;

  00028	8b 98 04 01 00
	00		 mov	 ebx, DWORD PTR [eax+260]

; 69   : 			else

  0002e	eb 0c		 jmp	 SHORT $LN5@KeyFileRem
$LN7@KeyFileRem:

; 70   : 				prevkf->Next = kf->Next;

  00030	8b 80 04 01 00
	00		 mov	 eax, DWORD PTR [eax+260]
  00036	89 81 04 01 00
	00		 mov	 DWORD PTR [ecx+260], eax
$LN5@KeyFileRem:

; 71   : 
; 72   : 			burn (keyFile, sizeof(*keyFile));	// wipe

  0003c	b9 08 01 00 00	 mov	 ecx, 264		; 00000108H
  00041	56		 push	 esi
  00042	8b d7		 mov	 edx, edi
  00044	8b f1		 mov	 esi, ecx
  00046	8b c7		 mov	 eax, edi
$LL16@KeyFileRem:
  00048	c6 00 00	 mov	 BYTE PTR [eax], 0
  0004b	40		 inc	 eax
  0004c	83 ee 01	 sub	 esi, 1
  0004f	75 f7		 jne	 SHORT $LL16@KeyFileRem
  00051	5e		 pop	 esi
$LL2@KeyFileRem:
  00052	49		 dec	 ecx
  00053	c6 02 00	 mov	 BYTE PTR [edx], 0
  00056	42		 inc	 edx
  00057	85 c9		 test	 ecx, ecx
  00059	75 f7		 jne	 SHORT $LL2@KeyFileRem

; 73   : 			free (keyFile);

  0005b	57		 push	 edi
  0005c	e8 00 00 00 00	 call	 _free
  00061	83 c4 04	 add	 esp, 4

; 79   : 
; 80   : 	return firstKeyFile;

  00064	8b c3		 mov	 eax, ebx
  00066	5b		 pop	 ebx

; 81   : }

  00067	c3		 ret	 0
?KeyFileRemove@@YAPAUKeyFileStruct@@PAU1@0@Z ENDP	; KeyFileRemove
_TEXT	ENDS
PUBLIC	_KeyFileRemoveAll
; Function compile flags: /Ogtpy
;	COMDAT _KeyFileRemoveAll
_TEXT	SEGMENT
_firstKeyFile$ = 8					; size = 4
_KeyFileRemoveAll PROC					; COMDAT

; 85   : {

  00000	55		 push	 ebp

; 86   : 	KeyFile *kf = *firstKeyFile;

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR _firstKeyFile$[esp]
  00005	56		 push	 esi
  00006	8b 75 00	 mov	 esi, DWORD PTR [ebp]

; 87   : 	while (kf != NULL)

  00009	85 f6		 test	 esi, esi
  0000b	74 3b		 je	 SHORT $LN24@KeyFileRem@2
  0000d	53		 push	 ebx
  0000e	57		 push	 edi
  0000f	90		 npad	 1
$LL7@KeyFileRem@2:

; 88   : 	{
; 89   : 		KeyFile *d = kf;

  00010	8b fe		 mov	 edi, esi

; 90   : 		kf = kf->Next;

  00012	8b b6 04 01 00
	00		 mov	 esi, DWORD PTR [esi+260]

; 91   : 		burn (d, sizeof(*d));	// wipe

  00018	b9 08 01 00 00	 mov	 ecx, 264		; 00000108H
  0001d	8b d7		 mov	 edx, edi
  0001f	8b d9		 mov	 ebx, ecx
  00021	8b c7		 mov	 eax, edi
$LL11@KeyFileRem@2:
  00023	c6 00 00	 mov	 BYTE PTR [eax], 0
  00026	40		 inc	 eax
  00027	83 eb 01	 sub	 ebx, 1
  0002a	75 f7		 jne	 SHORT $LL11@KeyFileRem@2
  0002c	8d 64 24 00	 npad	 4
$LL2@KeyFileRem@2:
  00030	49		 dec	 ecx
  00031	c6 02 00	 mov	 BYTE PTR [edx], 0
  00034	42		 inc	 edx
  00035	85 c9		 test	 ecx, ecx
  00037	75 f7		 jne	 SHORT $LL2@KeyFileRem@2

; 92   : 		free (d);

  00039	57		 push	 edi
  0003a	e8 00 00 00 00	 call	 _free
  0003f	83 c4 04	 add	 esp, 4
  00042	85 f6		 test	 esi, esi
  00044	75 ca		 jne	 SHORT $LL7@KeyFileRem@2
  00046	5f		 pop	 edi
  00047	5b		 pop	 ebx
$LN24@KeyFileRem@2:
  00048	5e		 pop	 esi

; 93   : 	}
; 94   : 
; 95   : 	*firstKeyFile = NULL;

  00049	c7 45 00 00 00
	00 00		 mov	 DWORD PTR [ebp], 0
  00050	5d		 pop	 ebp

; 96   : }

  00051	c3		 ret	 0
_KeyFileRemoveAll ENDP
_TEXT	ENDS
PUBLIC	_KeyFileClone
EXTRN	_malloc:PROC
; Function compile flags: /Ogtpy
;	COMDAT _KeyFileClone
_TEXT	SEGMENT
_keyFile$ = 8						; size = 4
_KeyFileClone PROC					; COMDAT

; 100  : {

  00000	57		 push	 edi

; 101  : 	KeyFile *clone;
; 102  : 
; 103  : 	if (keyFile == NULL) return NULL;

  00001	8b 7c 24 08	 mov	 edi, DWORD PTR _keyFile$[esp]
  00005	85 ff		 test	 edi, edi
  00007	75 04		 jne	 SHORT $LN1@KeyFileClo
  00009	33 c0		 xor	 eax, eax
  0000b	5f		 pop	 edi

; 108  : 	return clone;
; 109  : }

  0000c	c3		 ret	 0
$LN1@KeyFileClo:
  0000d	56		 push	 esi

; 104  : 
; 105  : 	clone = (KeyFile *) malloc (sizeof (KeyFile));

  0000e	68 08 01 00 00	 push	 264			; 00000108H
  00013	e8 00 00 00 00	 call	 _malloc

; 106  : 	strcpy (clone->FileName, keyFile->FileName);

  00018	8b f0		 mov	 esi, eax
  0001a	83 c4 04	 add	 esp, 4
  0001d	8b cf		 mov	 ecx, edi
  0001f	2b f7		 sub	 esi, edi
$LL4@KeyFileClo:
  00021	8a 11		 mov	 dl, BYTE PTR [ecx]
  00023	88 14 0e	 mov	 BYTE PTR [esi+ecx], dl
  00026	41		 inc	 ecx
  00027	84 d2		 test	 dl, dl
  00029	75 f6		 jne	 SHORT $LL4@KeyFileClo
  0002b	5e		 pop	 esi

; 107  : 	clone->Next = NULL;

  0002c	c7 80 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+260], 0
  00036	5f		 pop	 edi

; 108  : 	return clone;
; 109  : }

  00037	c3		 ret	 0
_KeyFileClone ENDP
_TEXT	ENDS
PUBLIC	_KeyFileCloneAll
; Function compile flags: /Ogtpy
;	COMDAT _KeyFileCloneAll
_TEXT	SEGMENT
_firstKeyFile$ = 8					; size = 4
_KeyFileCloneAll PROC					; COMDAT

; 113  : {

  00000	55		 push	 ebp
  00001	56		 push	 esi

; 114  : 	KeyFile *cloneFirstKeyFile = KeyFileClone (firstKeyFile);

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR _firstKeyFile$[esp+4]
  00006	56		 push	 esi
  00007	e8 00 00 00 00	 call	 _KeyFileClone
  0000c	83 c4 04	 add	 esp, 4
  0000f	8b e8		 mov	 ebp, eax

; 115  : 	KeyFile *kf;
; 116  : 
; 117  : 	if (firstKeyFile == NULL) return NULL;

  00011	85 f6		 test	 esi, esi
  00013	75 05		 jne	 SHORT $LN3@KeyFileClo@2
  00015	5e		 pop	 esi
  00016	33 c0		 xor	 eax, eax
  00018	5d		 pop	 ebp

; 126  : }

  00019	c3		 ret	 0
$LN3@KeyFileClo@2:
  0001a	57		 push	 edi

; 118  : 	kf = firstKeyFile->Next;

  0001b	8b be 04 01 00
	00		 mov	 edi, DWORD PTR [esi+260]

; 119  : 	while (kf != NULL)

  00021	85 ff		 test	 edi, edi
  00023	74 3b		 je	 SHORT $LN1@KeyFileClo@2

; 120  : 	{
; 121  : 		KeyFileAdd (cloneFirstKeyFile, KeyFileClone (kf));

$LN6@KeyFileClo@2:
  00025	68 08 01 00 00	 push	 264			; 00000108H
  0002a	e8 00 00 00 00	 call	 _malloc
  0002f	8b f0		 mov	 esi, eax
  00031	83 c4 04	 add	 esp, 4
  00034	8b cf		 mov	 ecx, edi
  00036	2b f7		 sub	 esi, edi
$LL9@KeyFileClo@2:
  00038	8a 11		 mov	 dl, BYTE PTR [ecx]
  0003a	88 14 0e	 mov	 BYTE PTR [esi+ecx], dl
  0003d	41		 inc	 ecx
  0003e	84 d2		 test	 dl, dl
  00040	75 f6		 jne	 SHORT $LL9@KeyFileClo@2
  00042	50		 push	 eax
  00043	55		 push	 ebp
  00044	c7 80 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+260], 0
  0004e	e8 00 00 00 00	 call	 _KeyFileAdd

; 122  : 		kf = kf->Next;

  00053	8b bf 04 01 00
	00		 mov	 edi, DWORD PTR [edi+260]
  00059	83 c4 08	 add	 esp, 8
  0005c	85 ff		 test	 edi, edi
  0005e	75 c5		 jne	 SHORT $LN6@KeyFileClo@2
$LN1@KeyFileClo@2:
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi

; 123  : 	}
; 124  : 
; 125  : 	return cloneFirstKeyFile;

  00062	8b c5		 mov	 eax, ebp
  00064	5d		 pop	 ebp

; 126  : }

  00065	c3		 ret	 0
_KeyFileCloneAll ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0Finally161@?6??KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z@QAE@PAX@Z
_TEXT	SEGMENT
??0Finally161@?6??KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z@QAE@PAX@Z PROC ; `KeyFileProcess'::`7'::Finally161::Finally161, COMDAT
; _this$ = eax
; _a$ = ecx

; 161  : 	});

  00000	89 08		 mov	 DWORD PTR [eax], ecx
  00002	c3		 ret	 0
??0Finally161@?6??KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z@QAE@PAX@Z ENDP ; `KeyFileProcess'::`7'::Finally161::Finally161
_TEXT	ENDS
EXTRN	__imp__CloseHandle@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??1Finally161@?6??KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z@QAE@XZ
_TEXT	SEGMENT
??1Finally161@?6??KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z@QAE@XZ PROC ; `KeyFileProcess'::`7'::Finally161::~Finally161, COMDAT
; _this$ = eax

; 161  : 	});

  00000	8b 00		 mov	 eax, DWORD PTR [eax]
  00002	83 f8 ff	 cmp	 eax, -1
  00005	74 07		 je	 SHORT $LN1@Finally161
  00007	50		 push	 eax
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN1@Finally161:
  0000e	c3		 ret	 0
??1Finally161@?6??KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z@QAE@XZ ENDP ; `KeyFileProcess'::`7'::Finally161::~Finally161
_TEXT	ENDS
EXTRN	_SetCheckBox:PROC
EXTRN	__imp__EnableWindow@8:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	_memset:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?LoadKeyList@@YAXPAUHWND__@@PAUKeyFileStruct@@@Z
_TEXT	SEGMENT
tv160 = -56						; size = 4
_LvItem$ = -52						; size = 52
?LoadKeyList@@YAXPAUHWND__@@PAUKeyFileStruct@@@Z PROC	; LoadKeyList, COMDAT
; _hwndDlg$ = ecx
; _firstKeyFile$ = eax

; 392  : {

  00000	83 ec 38	 sub	 esp, 56			; 00000038H
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b d9		 mov	 ebx, ecx

; 393  : 	KeyFile *kf;
; 394  : 	LVITEM LvItem;
; 395  : 	int line = 0;
; 396  : 	HWND hList = GetDlgItem (hwndDlg, IDC_KEYLIST);

  00009	68 b4 13 00 00	 push	 5044			; 000013b4H
  0000e	53		 push	 ebx
  0000f	8b f0		 mov	 esi, eax
  00011	33 ff		 xor	 edi, edi
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8

; 397  : 
; 398  : 	ListView_DeleteAllItems (hList);

  00019	57		 push	 edi
  0001a	57		 push	 edi
  0001b	8b e8		 mov	 ebp, eax
  0001d	68 09 10 00 00	 push	 4105			; 00001009H
  00022	55		 push	 ebp
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 399  : 	EnableWindow (GetDlgItem (hwndDlg, IDC_KEYREMOVE), FALSE);

  00029	57		 push	 edi
  0002a	68 c3 13 00 00	 push	 5059			; 000013c3H
  0002f	53		 push	 ebx
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 400  : 	EnableWindow (GetDlgItem (hwndDlg, IDC_KEYREMOVEALL), firstKeyFile != NULL);

  0003d	33 c0		 xor	 eax, eax
  0003f	85 f6		 test	 esi, esi
  00041	0f 95 c0	 setne	 al
  00044	50		 push	 eax
  00045	68 c4 13 00 00	 push	 5060			; 000013c4H
  0004a	53		 push	 ebx
  0004b	89 44 24 1c	 mov	 DWORD PTR tv160[esp+84], eax
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00055	50		 push	 eax
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 401  : 	SetCheckBox (hwndDlg, IDC_KEYFILES_ENABLE, firstKeyFile != NULL);

  0005c	8b 44 24 10	 mov	 eax, DWORD PTR tv160[esp+72]
  00060	50		 push	 eax
  00061	68 c5 13 00 00	 push	 5061			; 000013c5H
  00066	53		 push	 ebx
  00067	e8 00 00 00 00	 call	 _SetCheckBox
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 402  : 
; 403  : 	for (kf = firstKeyFile; kf != NULL; kf = kf->Next)

  0006f	85 f6		 test	 esi, esi
  00071	74 4a		 je	 SHORT $LN1@LoadKeyLis
  00073	8d 5f 05	 lea	 ebx, DWORD PTR [edi+5]
$LL8@LoadKeyLis:

; 404  : 	{
; 405  : 		memset (&LvItem,0,sizeof(LvItem));

  00076	6a 34		 push	 52			; 00000034H
  00078	8d 4c 24 18	 lea	 ecx, DWORD PTR _LvItem$[esp+76]
  0007c	6a 00		 push	 0
  0007e	51		 push	 ecx
  0007f	e8 00 00 00 00	 call	 _memset
  00084	83 c4 0c	 add	 esp, 12			; 0000000cH

; 406  : 		LvItem.mask = LVIF_TEXT|LVIF_PARAM;
; 407  : 		LvItem.iItem = line++;
; 408  : 		LvItem.iSubItem = 0;
; 409  : 		LvItem.pszText = kf->FileName;
; 410  : 		LvItem.lParam = (LPARAM) kf;
; 411  : 		SendMessage (hList, LVM_INSERTITEM, 0, (LPARAM)&LvItem);

  00087	8d 54 24 14	 lea	 edx, DWORD PTR _LvItem$[esp+72]
  0008b	52		 push	 edx
  0008c	6a 00		 push	 0
  0008e	68 07 10 00 00	 push	 4103			; 00001007H
  00093	89 7c 24 24	 mov	 DWORD PTR _LvItem$[esp+88], edi
  00097	55		 push	 ebp
  00098	89 5c 24 24	 mov	 DWORD PTR _LvItem$[esp+88], ebx
  0009c	47		 inc	 edi
  0009d	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR _LvItem$[esp+96], 0
  000a5	89 74 24 38	 mov	 DWORD PTR _LvItem$[esp+108], esi
  000a9	89 74 24 44	 mov	 DWORD PTR _LvItem$[esp+120], esi
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  000b3	8b b6 04 01 00
	00		 mov	 esi, DWORD PTR [esi+260]
  000b9	85 f6		 test	 esi, esi
  000bb	75 b9		 jne	 SHORT $LL8@LoadKeyLis
$LN1@LoadKeyLis:
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5d		 pop	 ebp
  000c0	5b		 pop	 ebx

; 412  : 	}
; 413  : }

  000c1	83 c4 38	 add	 esp, 56			; 00000038H
  000c4	c3		 ret	 0
?LoadKeyList@@YAXPAUHWND__@@PAUKeyFileStruct@@@Z ENDP	; LoadKeyList
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1666 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1667 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size, COMDAT
; _this$ = ecx

; 1666 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1667 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
_TEXT	ENDS
PUBLIC	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::size, COMDAT
; _this$ = ecx

; 726  : 		return (_Mylast - _Myfirst);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	2b 41 0c	 sub	 eax, DWORD PTR [ecx+12]

; 727  : 		}

  00006	c3		 ret	 0
?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@EV?$allocator@E@std@@@std@@QBE_NXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::empty
; Function compile flags: /Ogtpy
;	COMDAT ?empty@?$vector@EV?$allocator@E@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@EV?$allocator@E@std@@@std@@QBE_NXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::empty, COMDAT
; _this$ = ecx

; 736  : 		return (size() == 0);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	2b 41 0c	 sub	 eax, DWORD PTR [ecx+12]
  00006	f7 d8		 neg	 eax
  00008	1b c0		 sbb	 eax, eax
  0000a	40		 inc	 eax

; 737  : 		}

  0000b	c3		 ret	 0
?empty@?$vector@EV?$allocator@E@std@@@std@@QBE_NXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
EXTRN	__invalid_parameter_noinfo:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00006	2b 46 0c	 sub	 eax, DWORD PTR [esi+12]
  00009	57		 push	 edi
  0000a	8b 7c 24 0c	 mov	 edi, DWORD PTR __Pos$[esp+4]
  0000e	3b f8		 cmp	 edi, eax
  00010	72 05		 jb	 SHORT $LN3@operator
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

  00017	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0001a	03 c7		 add	 eax, edi
  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi

; 786  : 		}

  0001e	c2 04 00	 ret	 4
??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  00009	c3		 ret	 0
$LN3@Myptr:

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN3@Myptr@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@2:

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@_W@std@@QAE@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@_W@std@@QAE@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@_W@std@@QAE@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
PUBLIC	??0?$allocator@E@std@@QAE@XZ			; std::allocator<unsigned char>::allocator<unsigned char>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@E@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@E@std@@QAE@XZ PROC			; std::allocator<unsigned char>::allocator<unsigned char>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@E@std@@QAE@XZ ENDP			; std::allocator<unsigned char>::allocator<unsigned char>
_TEXT	ENDS
PUBLIC	?_Myval@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@KAAAUSecurityTokenKeyfilePath@CipherShed@@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Myval
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Myval@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@KAAAUSecurityTokenKeyfilePath@CipherShed@@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@KAAAUSecurityTokenKeyfilePath@CipherShed@@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@@Z PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Myval, COMDAT

; 125  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 126  : 		}

  00007	c3		 ret	 0
?_Myval@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@KAAAUSecurityTokenKeyfilePath@CipherShed@@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@@Z ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Myval
_TEXT	ENDS
PUBLIC	??0?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@QAE@XZ ; std::allocator<CipherShed::SecurityTokenKeyfilePath>::allocator<CipherShed::SecurityTokenKeyfilePath>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@QAE@XZ PROC ; std::allocator<CipherShed::SecurityTokenKeyfilePath>::allocator<CipherShed::SecurityTokenKeyfilePath>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@QAE@XZ ENDP ; std::allocator<CipherShed::SecurityTokenKeyfilePath>::allocator<CipherShed::SecurityTokenKeyfilePath>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr@3
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@3:

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN3@Myptr@4
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@4:

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@_W@std@@QAE@ABV01@@Z		; std::allocator<wchar_t>::allocator<wchar_t>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@_W@std@@QAE@ABV01@@Z PROC		; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@_W@std@@QAE@ABV01@@Z ENDP		; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z	; std::allocator<wchar_t>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@E@std@@QAE@ABV01@@Z		; std::allocator<unsigned char>::allocator<unsigned char>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@E@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@E@std@@QAE@ABV01@@Z PROC			; std::allocator<unsigned char>::allocator<unsigned char>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@E@std@@QAE@ABV01@@Z ENDP			; std::allocator<unsigned char>::allocator<unsigned char>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@E@std@@QAEXPAEI@Z	; std::allocator<unsigned char>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@E@std@@QAEXPAEI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@E@std@@QAEXPAEI@Z PROC		; std::allocator<unsigned char>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@E@std@@QAEXPAEI@Z ENDP		; std::allocator<unsigned char>::deallocate
_TEXT	ENDS
PUBLIC	?_Nextnode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Nextnode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Nextnode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@@Z PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Nextnode, COMDAT

; 115  : 		return ((_Nodepref)(*_Pnode)._Next);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 116  : 		}

  00004	c3		 ret	 0
?_Nextnode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@@Z ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Prevnode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Prevnode
; Function compile flags: /Ogtpy
;	COMDAT ?_Prevnode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@@Z PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Prevnode, COMDAT

; 120  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 121  : 		}

  00007	c3		 ret	 0
?_Prevnode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@@Z ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Prevnode
_TEXT	ENDS
PUBLIC	??0?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@QAE@ABV01@@Z ; std::allocator<CipherShed::SecurityTokenKeyfilePath>::allocator<CipherShed::SecurityTokenKeyfilePath>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@QAE@ABV01@@Z PROC ; std::allocator<CipherShed::SecurityTokenKeyfilePath>::allocator<CipherShed::SecurityTokenKeyfilePath>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CipherShed::SecurityTokenKeyfilePath>::allocator<CipherShed::SecurityTokenKeyfilePath>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@I@Z ; std::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??8?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBE_NABV012@@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator==
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??8?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBE_NABV012@@Z PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator==, COMDAT
; _this$ = ecx

; 290  : 			{	// test for iterator equality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 291  : 
; 292  :  #if _HAS_ITERATOR_DEBUGGING
; 293  : 			_Compat(_Right);
; 294  :  #else
; 295  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN4@operator@2
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN3@operator@2
$LN4@operator@2:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@2:

; 296  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 297  : 
; 298  : 			return (_Ptr == _Right._Ptr);

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 94 c1	 sete	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 299  : 			}

  00026	c2 04 00	 ret	 4
??8?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator==
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QBEABEXZ ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QBEABEXZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QBEABEXZ PROC ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::operator*, COMDAT
; _this$ = ecx

; 91   : 		{	// return designated object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 92   : 
; 93   :  #if _HAS_ITERATOR_DEBUGGING
; 94   : 		if (this->_Mycont == 0
; 95   : 			|| _Myptr < ((_Myvec *)this->_Mycont)->_Myfirst
; 96   : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 97   : 			{
; 98   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 99   : 			_SCL_SECURE_OUT_OF_RANGE;
; 100  : 			}
; 101  :  #else
; 102  :  		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN19@operator@3
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 103  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN15@operator@3
$LN19@operator@3:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN16@operator@3
$LN15@operator@3:
  00018	33 c0		 xor	 eax, eax
$LN16@operator@3:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 0a		 jb	 SHORT $LN20@operator@3
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	5e		 pop	 esi

; 107  : 		}

  0002b	c3		 ret	 0
$LN20@operator@3:

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

  0002c	8b c1		 mov	 eax, ecx
  0002e	5e		 pop	 esi

; 107  : 		}

  0002f	c3		 ret	 0
??D?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QBEABEXZ ENDP ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::operator*
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2133 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2134 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 2c		 je	 SHORT $LN2@Inside
  0000a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0000d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00010	83 fe 10	 cmp	 esi, 16			; 00000010H
  00013	72 04		 jb	 SHORT $LN8@Inside
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN9@Inside
$LN8@Inside:
  00019	8b d0		 mov	 edx, eax
$LN9@Inside:
  0001b	3b fa		 cmp	 edi, edx
  0001d	72 17		 jb	 SHORT $LN2@Inside
  0001f	83 fe 10	 cmp	 esi, 16			; 00000010H
  00022	72 02		 jb	 SHORT $LN12@Inside
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@Inside:
  00026	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00029	03 c8		 add	 ecx, eax
  0002b	3b cf		 cmp	 ecx, edi
  0002d	76 07		 jbe	 SHORT $LN2@Inside
  0002f	5f		 pop	 edi

; 2136 : 		else
; 2137 : 			return (true);

  00030	b0 01		 mov	 al, 1
  00032	5e		 pop	 esi

; 2138 : 		}

  00033	c2 04 00	 ret	 4
$LN2@Inside:
  00036	5f		 pop	 edi

; 2135 : 			return (false);	// don't ask

  00037	32 c0		 xor	 al, al
  00039	5e		 pop	 esi

; 2138 : 		}

  0003a	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
; Function compile flags: /Ogtpy
;	COMDAT ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside, COMDAT
; _this$ = ecx

; 2133 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2134 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 2d		 je	 SHORT $LN2@Inside@2
  0000a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0000d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00010	83 fe 08	 cmp	 esi, 8
  00013	72 04		 jb	 SHORT $LN8@Inside@2
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN9@Inside@2
$LN8@Inside@2:
  00019	8b d0		 mov	 edx, eax
$LN9@Inside@2:
  0001b	3b fa		 cmp	 edi, edx
  0001d	72 18		 jb	 SHORT $LN2@Inside@2
  0001f	83 fe 08	 cmp	 esi, 8
  00022	72 02		 jb	 SHORT $LN12@Inside@2
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@Inside@2:
  00026	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00029	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  0002c	3b d7		 cmp	 edx, edi
  0002e	76 07		 jbe	 SHORT $LN2@Inside@2
  00030	5f		 pop	 edi

; 2136 : 		else
; 2137 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	5e		 pop	 esi

; 2138 : 		}

  00034	c2 04 00	 ret	 4
$LN2@Inside@2:
  00037	5f		 pop	 edi

; 2135 : 			return (false);	// don't ask

  00038	32 c0		 xor	 al, al
  0003a	5e		 pop	 esi

; 2138 : 		}

  0003b	c2 04 00	 ret	 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@E@std@@QBEIXZ		; std::allocator<unsigned char>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@E@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@E@std@@QBEIXZ PROC		; std::allocator<unsigned char>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 167  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@E@std@@QBEIXZ ENDP		; std::allocator<unsigned char>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@EHPBEABEV_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,unsigned char,int,unsigned char const *,unsigned char const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,unsigned char,int,unsigned char const *,unsigned char const &,std::_Iterator_base_aux>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@EHPBEABEV_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@EHPBEABEV_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,unsigned char,int,unsigned char const *,unsigned char const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,unsigned char,int,unsigned char const *,unsigned char const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@EHPBEABEV_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,unsigned char,int,unsigned char const *,unsigned char const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,unsigned char,int,unsigned char const *,unsigned char const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 167  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@_W@std@@QBEIXZ		; std::allocator<wchar_t>::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@_W@std@@QBEIXZ PROC		; std::allocator<wchar_t>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@_W@std@@QBEIXZ ENDP		; std::allocator<wchar_t>::max_size
_TEXT	ENDS
PUBLIC	??$ToTypeWrapper@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::ToTypeWrapper<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
;	COMDAT ??$ToTypeWrapper@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??$ToTypeWrapper@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z PROC ; CipherShed::ForEach::ToTypeWrapper<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >, COMDAT

; 85   : 		static TypeWrapper <T> ToTypeWrapper (const T &x) { return TypeWrapper <T> (); }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
??$ToTypeWrapper@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::ToTypeWrapper<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >
_TEXT	ENDS
PUBLIC	??$?BV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@12@XZ ; CipherShed::ForEach::TypeWrapperDummy::operator<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > > CipherShed::ForEach::TypeWrapper<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$?BV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$?BV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@12@XZ PROC ; CipherShed::ForEach::TypeWrapperDummy::operator<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > > CipherShed::ForEach::TypeWrapper<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >, COMDAT
; _this$ = ecx

; 90   : 			operator TypeWrapper <T> () const { return TypeWrapper <T> (); }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	c2 04 00	 ret	 4
??$?BV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@12@XZ ENDP ; CipherShed::ForEach::TypeWrapperDummy::operator<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > > CipherShed::ForEach::TypeWrapper<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@01@@Z ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@01@@Z
_TEXT	SEGMENT
_forEachContainer$ = 8					; size = 4
___formal$ = 12						; size = 4
??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@01@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >, COMDAT

; 96   : 			return static_cast <const ContainerForward <T> &> (forEachContainer);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _forEachContainer$[esp-4]

; 97   : 		}

  00004	c3		 ret	 0
??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@01@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >
_TEXT	ENDS
PUBLIC	??$?0E@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@E@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><unsigned char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$?0E@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@E@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0E@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@E@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><unsigned char>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0E@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@E@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><unsigned char>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@E@std@@YAPAEIPAE@Z			; std::_Allocate<unsigned char>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@E@std@@YAPAEIPAE@Z
_TEXT	SEGMENT
$T123715 = -12						; size = 12
$T123720 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@E@std@@YAPAEIPAE@Z PROC			; std::_Allocate<unsigned char>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 0f		 ja	 SHORT $LN3@Allocate

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00013	83 c4 04	 add	 esp, 4

; 44   : 	}

  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	c3		 ret	 0
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001a	83 c8 ff	 or	 eax, -1
  0001d	33 d2		 xor	 edx, edx
  0001f	f7 f1		 div	 ecx
  00021	83 f8 01	 cmp	 eax, 1
  00024	73 e7		 jae	 SHORT $LN1@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T123720[esp+8]
  0002a	50		 push	 eax
  0002b	8d 4c 24 04	 lea	 ecx, DWORD PTR $T123715[esp+16]
  0002f	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T123720[esp+12], 0
  00037	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003c	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00041	8d 4c 24 04	 lea	 ecx, DWORD PTR $T123715[esp+16]
  00045	51		 push	 ecx
  00046	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T123715[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate:
  00053	cc		 int	 3
??$_Allocate@E@std@@YAPAEIPAE@Z ENDP			; std::_Allocate<unsigned char>
_TEXT	ENDS
PUBLIC	??$?0USecurityTokenKeyfilePath@CipherShed@@@?$allocator@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z ; std::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node *>::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node *><CipherShed::SecurityTokenKeyfilePath>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0USecurityTokenKeyfilePath@CipherShed@@@?$allocator@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0USecurityTokenKeyfilePath@CipherShed@@@?$allocator@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z PROC ; std::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node *>::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node *><CipherShed::SecurityTokenKeyfilePath>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0USecurityTokenKeyfilePath@CipherShed@@@?$allocator@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node *>::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node *><CipherShed::SecurityTokenKeyfilePath>
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T123726 = -12						; size = 12
$T123730 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 16		 ja	 SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 c9	 lea	 edx, DWORD PTR [ecx+ecx*8]
  00010	03 d2		 add	 edx, edx
  00012	03 d2		 add	 edx, edx
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4

; 44   : 	}

  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	c3		 ret	 0
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00021	83 c8 ff	 or	 eax, -1
  00024	33 d2		 xor	 edx, edx
  00026	f7 f1		 div	 ecx
  00028	83 f8 24	 cmp	 eax, 36			; 00000024H
  0002b	73 e0		 jae	 SHORT $LN1@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002d	8d 44 24 10	 lea	 eax, DWORD PTR $T123730[esp+8]
  00031	50		 push	 eax
  00032	8d 4c 24 04	 lea	 ecx, DWORD PTR $T123726[esp+16]
  00036	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T123730[esp+12], 0
  0003e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00043	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00048	8d 4c 24 04	 lea	 ecx, DWORD PTR $T123726[esp+16]
  0004c	51		 push	 ecx
  0004d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T123726[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00055	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@2:
  0005a	cc		 int	 3
??$_Allocate@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node *,std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Construct@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@0@ABQAU120@@Z PROC ; std::_Construct<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node *,std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node *>, COMDAT

; 51   : 	void _FARQ *_Vptr = _Ptr;
; 52   : 	::new (_Vptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN3@Construct
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN3@Construct:

; 53   : 	}

  00010	c3		 ret	 0
??$_Construct@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node *,std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node *>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z
_TEXT	SEGMENT
$T123744 = -12						; size = 12
$T123748 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z PROC ; std::_Allocate<std::_Aux_cont>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 16		 ja	 SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4

; 44   : 	}

  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	c3		 ret	 0
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00021	83 c8 ff	 or	 eax, -1
  00024	33 d2		 xor	 edx, edx
  00026	f7 f1		 div	 ecx
  00028	83 f8 04	 cmp	 eax, 4
  0002b	73 e0		 jae	 SHORT $LN1@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002d	8d 44 24 10	 lea	 eax, DWORD PTR $T123748[esp+8]
  00031	50		 push	 eax
  00032	8d 4c 24 04	 lea	 ecx, DWORD PTR $T123744[esp+16]
  00036	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T123748[esp+12], 0
  0003e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00043	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00048	8d 4c 24 04	 lea	 ecx, DWORD PTR $T123744[esp+16]
  0004c	51		 push	 ecx
  0004d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T123744[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00055	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@3:
  0005a	cc		 int	 3
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ENDP ; std::_Allocate<std::_Aux_cont>
_TEXT	ENDS
PUBLIC	??$?0USecurityTokenKeyfilePath@CipherShed@@@?$allocator@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z ; std::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node>::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node><CipherShed::SecurityTokenKeyfilePath>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0USecurityTokenKeyfilePath@CipherShed@@@?$allocator@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0USecurityTokenKeyfilePath@CipherShed@@@?$allocator@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z PROC ; std::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node>::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node><CipherShed::SecurityTokenKeyfilePath>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0USecurityTokenKeyfilePath@CipherShed@@@?$allocator@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAE@ABV?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node>::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node><CipherShed::SecurityTokenKeyfilePath>
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T123754 = -12						; size = 12
$T123758 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 0f		 ja	 SHORT $LN3@Allocate@4

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@4:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00013	83 c4 04	 add	 esp, 4

; 44   : 	}

  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	c3		 ret	 0
$LN3@Allocate@4:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001a	83 c8 ff	 or	 eax, -1
  0001d	33 d2		 xor	 edx, edx
  0001f	f7 f1		 div	 ecx
  00021	83 f8 01	 cmp	 eax, 1
  00024	73 e7		 jae	 SHORT $LN1@Allocate@4

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T123758[esp+8]
  0002a	50		 push	 eax
  0002b	8d 4c 24 04	 lea	 ecx, DWORD PTR $T123754[esp+16]
  0002f	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T123758[esp+12], 0
  00037	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003c	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00041	8d 4c 24 04	 lea	 ecx, DWORD PTR $T123754[esp+16]
  00045	51		 push	 ecx
  00046	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T123754[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@4:
  00053	cc		 int	 3
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	??$_Allocate@_W@std@@YAPA_WIPA_W@Z		; std::_Allocate<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT
$T123762 = -12						; size = 12
$T123766 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@_W@std@@YAPA_WIPA_W@Z PROC			; std::_Allocate<wchar_t>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 12		 ja	 SHORT $LN3@Allocate@5

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@5:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00016	83 c4 04	 add	 esp, 4

; 44   : 	}

  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	c3		 ret	 0
$LN3@Allocate@5:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001d	83 c8 ff	 or	 eax, -1
  00020	33 d2		 xor	 edx, edx
  00022	f7 f1		 div	 ecx
  00024	83 f8 02	 cmp	 eax, 2
  00027	73 e4		 jae	 SHORT $LN1@Allocate@5

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00029	8d 44 24 10	 lea	 eax, DWORD PTR $T123766[esp+8]
  0002d	50		 push	 eax
  0002e	8d 4c 24 04	 lea	 ecx, DWORD PTR $T123762[esp+16]
  00032	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T123766[esp+12], 0
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003f	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00044	8d 4c 24 04	 lea	 ecx, DWORD PTR $T123762[esp+16]
  00048	51		 push	 ecx
  00049	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T123762[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@5:
  00056	cc		 int	 3
??$_Allocate@_W@std@@YAPA_WIPA_W@Z ENDP			; std::_Allocate<wchar_t>
_TEXT	ENDS
PUBLIC	??$?0USecurityTokenKeyfilePath@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><CipherShed::SecurityTokenKeyfilePath>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0USecurityTokenKeyfilePath@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0USecurityTokenKeyfilePath@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><CipherShed::SecurityTokenKeyfilePath>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0USecurityTokenKeyfilePath@CipherShed@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><CipherShed::SecurityTokenKeyfilePath>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@USecurityTokenKeyfilePath@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::SecurityTokenKeyfilePath,int,CipherShed::SecurityTokenKeyfilePath const *,CipherShed::SecurityTokenKeyfilePath const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::SecurityTokenKeyfilePath,int,CipherShed::SecurityTokenKeyfilePath const *,CipherShed::SecurityTokenKeyfilePath const &,std::_Iterator_base_aux>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@USecurityTokenKeyfilePath@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@USecurityTokenKeyfilePath@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::SecurityTokenKeyfilePath,int,CipherShed::SecurityTokenKeyfilePath const *,CipherShed::SecurityTokenKeyfilePath const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::SecurityTokenKeyfilePath,int,CipherShed::SecurityTokenKeyfilePath const *,CipherShed::SecurityTokenKeyfilePath const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Iterator_with_base@Ubidirectional_iterator_tag@std@@USecurityTokenKeyfilePath@CipherShed@@HPBU34@ABU34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::SecurityTokenKeyfilePath,int,CipherShed::SecurityTokenKeyfilePath const *,CipherShed::SecurityTokenKeyfilePath const &,std::_Iterator_base_aux>::_Iterator_with_base<std::bidirectional_iterator_tag,CipherShed::SecurityTokenKeyfilePath,int,CipherShed::SecurityTokenKeyfilePath const *,CipherShed::SecurityTokenKeyfilePath const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<char> >, COMDAT

; 575  : 	{

  00000	51		 push	 ecx

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Secure$[esp+4]

; 578  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 598  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<wchar_t> >, COMDAT

; 575  : 	{

  00000	51		 push	 ecx

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Secure$[esp+4]

; 578  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 598  : 	}

  00026	c3		 ret	 0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 624  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 625  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 624  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 625  : 	}

  00026	c3		 ret	 0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAEPAE@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAE0@Z ; std::_Ptr_cat<unsigned char *,unsigned char *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAEPAE@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAE0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAEPAE@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAE0@Z PROC ; std::_Ptr_cat<unsigned char *,unsigned char *>, COMDAT

; 1509 : 	{

  00000	51		 push	 ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@PAEPAE@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAE0@Z ENDP ; std::_Ptr_cat<unsigned char *,unsigned char *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned char> >, COMDAT

; 242  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned char> >
_TEXT	ENDS
PUBLIC	??$_Iter_cat@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@0@@Z ; std::_Iter_cat<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_cat@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@0@@Z PROC ; std::_Iter_cat<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1> >, COMDAT

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 955  : 	}

  00004	c3		 ret	 0
??$_Iter_cat@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@0@@Z ENDP ; std::_Iter_cat<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1> >
_TEXT	ENDS
PUBLIC	??F?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEAAV012@XZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator--
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??F?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??F?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEAAV012@XZ PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator--, COMDAT
; _this$ = ecx

; 262  : 			{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 263  : 
; 264  :  #if _HAS_ITERATOR_DEBUGGING
; 265  : 			if (this->_Mycont == 0
; 266  : 				|| _Ptr == 0
; 267  : 				|| (_Ptr = _Prevnode(_Ptr))
; 268  : 					== ((_Myt *)this->_Mycont)->_Myhead)
; 269  : 				{
; 270  : 				_DEBUG_ERROR("list iterator not decrementable");
; 271  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 272  : 				}
; 273  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 274  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	75 05		 jne	 SHORT $LN8@operator@4
  00008	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN8@operator@4:

; 275  : 			_Ptr = _Prevnode(_Ptr);

  0000d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00010	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 276  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00018	85 c0		 test	 eax, eax
  0001a	74 04		 je	 SHORT $LN19@operator@4
  0001c	8b 00		 mov	 eax, DWORD PTR [eax]
  0001e	eb 02		 jmp	 SHORT $LN20@operator@4
$LN19@operator@4:
  00020	33 c0		 xor	 eax, eax
$LN20@operator@4:
  00022	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00025	75 05		 jne	 SHORT $LN23@operator@4
  00027	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN23@operator@4:

; 277  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 278  : 
; 279  : 			return (*this);

  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi

; 280  : 			}

  0002f	c3		 ret	 0
??F?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator--
_TEXT	ENDS
PUBLIC	?_Mynode@?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@3@XZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::_Mynode
; Function compile flags: /Ogtpy
;	COMDAT ?_Mynode@?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@3@XZ PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::_Mynode, COMDAT
; _this$ = ecx

; 308  : 			return (_Ptr);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 309  : 			}

  00003	c3		 ret	 0
?_Mynode@?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@3@XZ ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::_Mynode
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@QBEIXZ ; std::allocator<CipherShed::SecurityTokenKeyfilePath>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@QBEIXZ PROC ; std::allocator<CipherShed::SecurityTokenKeyfilePath>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@QBEIXZ ENDP ; std::allocator<CipherShed::SecurityTokenKeyfilePath>::max_size
_TEXT	ENDS
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	_keyFile$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp__SetFileTime@16:PROC
EXTRN	_IsFileOnReadOnlyFilesystem:PROC
EXTRN	_fclose:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetLastError@4:PROC
EXTRN	_crc_32_tab:BYTE
EXTRN	_ferror:PROC
EXTRN	_fread:PROC
EXTRN	_fopen:PROC
EXTRN	__imp__GetFileTime@16:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_02JDPG@rb?$AA@
; File c:\home\public\desktop\projects\ciphershed.build\src\common\keyfiles.c
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z
_TEXT	SEGMENT
_status$ = -65592					; size = 4
_f$ = -65588						; size = 4
_totalRead$ = -65584					; size = 4
_finally161$ = -65580					; size = 4
_bTimeStampValid$ = -65576				; size = 4
_keyFile$GSCopy$ = -65572				; size = 4
_src$ = -65568						; size = 4
_ftLastWriteTime$ = -65564				; size = 8
_ftCreationTime$ = -65556				; size = 8
_ftLastAccessTime$ = -65548				; size = 8
_buffer$ = -65540					; size = 65536
__$ArrayPad$ = -4					; size = 4
_keyFile$ = 8						; size = 4
?KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z PROC	; KeyFileProcess, COMDAT
; _keyPool$ = edi

; 130  : {

  00000	b8 38 00 01 00	 mov	 eax, 65592		; 00010038H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 34 00
	01 00		 mov	 DWORD PTR __$ArrayPad$[esp+65592], eax
  00018	8b 84 24 3c 00
	01 00		 mov	 eax, DWORD PTR _keyFile$[esp+65588]
  0001f	53		 push	 ebx
  00020	55		 push	 ebp
  00021	56		 push	 esi

; 131  : 	FILE *f;
; 132  : 	unsigned __int8 buffer[64 * 1024];
; 133  : 	unsigned __int32 crc = 0xffffffff;
; 134  : 	int writePos = 0;

  00022	33 f6		 xor	 esi, esi

; 135  : 	size_t bytesRead, totalRead = 0;
; 136  : 	int status = TRUE;
; 137  : 
; 138  : 	HANDLE src;
; 139  : 	FILETIME ftCreationTime;
; 140  : 	FILETIME ftLastWriteTime;
; 141  : 	FILETIME ftLastAccessTime;
; 142  : 
; 143  : 	BOOL bTimeStampValid = FALSE;
; 144  : 
; 145  : 	/* Remember the last access time of the keyfile. It will be preserved in order to prevent
; 146  : 	an adversary from determining which file may have been used as keyfile. */
; 147  : 	src = CreateFile (keyFile->FileName,
; 148  : 		GENERIC_READ | GENERIC_WRITE,
; 149  : 		FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00024	56		 push	 esi
  00025	56		 push	 esi
  00026	6a 03		 push	 3
  00028	56		 push	 esi
  00029	6a 03		 push	 3
  0002b	68 00 00 00 c0	 push	 -1073741824		; c0000000H
  00030	50		 push	 eax
  00031	89 44 24 3c	 mov	 DWORD PTR _keyFile$GSCopy$[esp+65632], eax
  00035	83 cb ff	 or	 ebx, -1
  00038	89 74 24 30	 mov	 DWORD PTR _totalRead$[esp+65632], esi
  0003c	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR _status$[esp+65632], 1
  00044	89 74 24 38	 mov	 DWORD PTR _bTimeStampValid$[esp+65632], esi
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0004e	8b e8		 mov	 ebp, eax
  00050	89 6c 24 24	 mov	 DWORD PTR _src$[esp+65604], ebp

; 150  : 
; 151  : 	if (src != INVALID_HANDLE_VALUE)

  00054	83 fd ff	 cmp	 ebp, -1
  00057	74 22		 je	 SHORT $LN30@KeyFilePro

; 152  : 	{
; 153  : 		if (GetFileTime ((HANDLE) src, &ftCreationTime, &ftLastAccessTime, &ftLastWriteTime))

  00059	8d 44 24 28	 lea	 eax, DWORD PTR _ftLastWriteTime$[esp+65604]
  0005d	50		 push	 eax
  0005e	8d 4c 24 3c	 lea	 ecx, DWORD PTR _ftLastAccessTime$[esp+65608]
  00062	51		 push	 ecx
  00063	8d 54 24 38	 lea	 edx, DWORD PTR _ftCreationTime$[esp+65612]
  00067	52		 push	 edx
  00068	55		 push	 ebp
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileTime@16
  0006f	85 c0		 test	 eax, eax
  00071	74 08		 je	 SHORT $LN30@KeyFilePro

; 154  : 			bTimeStampValid = TRUE;

  00073	c7 44 24 1c 01
	00 00 00	 mov	 DWORD PTR _bTimeStampValid$[esp+65604], 1
$LN30@KeyFilePro:

; 155  : 	}
; 156  : 
; 157  : 	finally_do_arg (HANDLE, src,
; 158  : 	{
; 159  : 		if (finally_arg != INVALID_HANDLE_VALUE)
; 160  : 			CloseHandle (finally_arg);
; 161  : 	});
; 162  : 
; 163  : 	f = fopen (keyFile->FileName, "rb");

  0007b	8b 44 24 20	 mov	 eax, DWORD PTR _keyFile$GSCopy$[esp+65604]
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb?$AA@
  00084	50		 push	 eax
  00085	89 6c 24 20	 mov	 DWORD PTR _finally161$[esp+65612], ebp
  00089	e8 00 00 00 00	 call	 _fopen
  0008e	83 c4 08	 add	 esp, 8
  00091	89 44 24 10	 mov	 DWORD PTR _f$[esp+65604], eax

; 164  : 	if (f == NULL) return FALSE;

  00095	85 c0		 test	 eax, eax
  00097	75 23		 jne	 SHORT $LN23@KeyFilePro
  00099	8d 44 24 18	 lea	 eax, DWORD PTR _finally161$[esp+65604]
  0009d	e8 00 00 00 00	 call	 ??1Finally161@?6??KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z@QAE@XZ ; `KeyFileProcess'::`7'::Finally161::~Finally161
  000a2	5e		 pop	 esi
  000a3	5d		 pop	 ebp
  000a4	33 c0		 xor	 eax, eax
  000a6	5b		 pop	 ebx

; 215  : }

  000a7	8b 8c 24 34 00
	01 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+65592]
  000ae	33 cc		 xor	 ecx, esp
  000b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b5	81 c4 38 00 01
	00		 add	 esp, 65592		; 00010038H
  000bb	c3		 ret	 0
$LN23@KeyFilePro:

; 165  : 
; 166  : 	while ((bytesRead = fread (buffer, 1, sizeof (buffer), f)) > 0)

  000bc	50		 push	 eax
  000bd	68 00 00 01 00	 push	 65536			; 00010000H
  000c2	8d 4c 24 48	 lea	 ecx, DWORD PTR _buffer$[esp+65612]
  000c6	6a 01		 push	 1
  000c8	51		 push	 ecx
  000c9	e8 00 00 00 00	 call	 _fread
  000ce	8b e8		 mov	 ebp, eax
  000d0	83 c4 10	 add	 esp, 16			; 00000010H
  000d3	85 ed		 test	 ebp, ebp
  000d5	0f 86 9b 00 00
	00		 jbe	 $LN13@KeyFilePro
  000db	eb 03 8d 49 00	 npad	 5
$LL14@KeyFilePro:

; 167  : 	{
; 168  : 		size_t i;
; 169  : 
; 170  : 		if (ferror (f))

  000e0	8b 54 24 10	 mov	 edx, DWORD PTR _f$[esp+65604]
  000e4	52		 push	 edx
  000e5	e8 00 00 00 00	 call	 _ferror
  000ea	83 c4 04	 add	 esp, 4
  000ed	85 c0		 test	 eax, eax
  000ef	0f 85 92 00 00
	00		 jne	 $LN26@KeyFilePro

; 171  : 		{
; 172  : 			status = FALSE;
; 173  : 			goto close;
; 174  : 		}
; 175  : 
; 176  : 		for (i = 0; i < bytesRead; i++)

  000f5	33 c9		 xor	 ecx, ecx
  000f7	85 ed		 test	 ebp, ebp
  000f9	76 58		 jbe	 SHORT $LN8@KeyFilePro
  000fb	8b c3		 mov	 eax, ebx
  000fd	c1 e8 08	 shr	 eax, 8
$LL10@KeyFilePro:

; 177  : 		{
; 178  : 			crc = UPDC32 (buffer[i], crc);

  00100	0f b6 54 0c 40	 movzx	 edx, BYTE PTR _buffer$[esp+ecx+65604]
  00105	33 d3		 xor	 edx, ebx
  00107	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0010d	8b 1c 95 00 00
	00 00		 mov	 ebx, DWORD PTR _crc_32_tab[edx*4]
  00114	33 d8		 xor	 ebx, eax

; 179  : 
; 180  : 			keyPool[writePos++] += (unsigned __int8) (crc >> 24);

  00116	8b c3		 mov	 eax, ebx
  00118	c1 e8 18	 shr	 eax, 24			; 00000018H
  0011b	00 04 37	 add	 BYTE PTR [edi+esi], al
  0011e	46		 inc	 esi

; 181  : 			keyPool[writePos++] += (unsigned __int8) (crc >> 16);

  0011f	8b d3		 mov	 edx, ebx
  00121	c1 ea 10	 shr	 edx, 16			; 00000010H
  00124	00 14 37	 add	 BYTE PTR [edi+esi], dl
  00127	46		 inc	 esi

; 182  : 			keyPool[writePos++] += (unsigned __int8) (crc >> 8);

  00128	8b c3		 mov	 eax, ebx
  0012a	c1 e8 08	 shr	 eax, 8
  0012d	00 04 37	 add	 BYTE PTR [edi+esi], al

; 183  : 			keyPool[writePos++] += (unsigned __int8) crc;

  00130	00 5c 37 01	 add	 BYTE PTR [edi+esi+1], bl
  00134	46		 inc	 esi
  00135	46		 inc	 esi

; 184  : 
; 185  : 			if (writePos >= KEYFILE_POOL_SIZE)

  00136	83 fe 40	 cmp	 esi, 64			; 00000040H
  00139	7c 02		 jl	 SHORT $LN7@KeyFilePro

; 186  : 				writePos = 0;

  0013b	33 f6		 xor	 esi, esi
$LN7@KeyFilePro:

; 187  : 
; 188  : 			if (++totalRead >= KEYFILE_MAX_READ_LEN)

  0013d	8b 54 24 14	 mov	 edx, DWORD PTR _totalRead$[esp+65604]
  00141	42		 inc	 edx
  00142	89 54 24 14	 mov	 DWORD PTR _totalRead$[esp+65604], edx
  00146	81 fa 00 00 10
	00		 cmp	 edx, 1048576		; 00100000H
  0014c	73 5a		 jae	 SHORT $close$118436
  0014e	41		 inc	 ecx
  0014f	3b cd		 cmp	 ecx, ebp
  00151	72 ad		 jb	 SHORT $LL10@KeyFilePro
$LN8@KeyFilePro:

; 165  : 
; 166  : 	while ((bytesRead = fread (buffer, 1, sizeof (buffer), f)) > 0)

  00153	8b 44 24 10	 mov	 eax, DWORD PTR _f$[esp+65604]
  00157	50		 push	 eax
  00158	68 00 00 01 00	 push	 65536			; 00010000H
  0015d	8d 4c 24 48	 lea	 ecx, DWORD PTR _buffer$[esp+65612]
  00161	6a 01		 push	 1
  00163	51		 push	 ecx
  00164	e8 00 00 00 00	 call	 _fread
  00169	8b e8		 mov	 ebp, eax
  0016b	83 c4 10	 add	 esp, 16			; 00000010H
  0016e	85 ed		 test	 ebp, ebp
  00170	0f 87 6a ff ff
	ff		 ja	 $LL14@KeyFilePro
$LN13@KeyFilePro:

; 189  : 				goto close;
; 190  : 		}
; 191  : 	}
; 192  : 
; 193  : 	if (ferror (f))

  00176	8b 54 24 10	 mov	 edx, DWORD PTR _f$[esp+65604]
  0017a	52		 push	 edx
  0017b	e8 00 00 00 00	 call	 _ferror
  00180	83 c4 04	 add	 esp, 4
  00183	85 c0		 test	 eax, eax
  00185	74 0a		 je	 SHORT $LN4@KeyFilePro
$LN26@KeyFilePro:

; 194  : 	{
; 195  : 		status = FALSE;

  00187	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR _status$[esp+65604], 0
  0018f	eb 17		 jmp	 SHORT $close$118436
$LN4@KeyFilePro:

; 196  : 	}
; 197  : 	else if (totalRead == 0)

  00191	83 7c 24 14 00	 cmp	 DWORD PTR _totalRead$[esp+65604], 0
  00196	75 10		 jne	 SHORT $close$118436

; 198  : 	{
; 199  : 		status = FALSE;
; 200  : 		SetLastError (ERROR_HANDLE_EOF); 

  00198	6a 26		 push	 38			; 00000026H
  0019a	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR _status$[esp+65608], 0
  001a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4
$close$118436:

; 201  : 	}
; 202  : 
; 203  : close:
; 204  : 	DWORD err = GetLastError();

  001a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  001ae	8b f0		 mov	 esi, eax

; 205  : 	fclose (f);

  001b0	8b 44 24 10	 mov	 eax, DWORD PTR _f$[esp+65604]
  001b4	50		 push	 eax
  001b5	e8 00 00 00 00	 call	 _fclose
  001ba	83 c4 04	 add	 esp, 4

; 206  : 
; 207  : 	if (bTimeStampValid && !IsFileOnReadOnlyFilesystem (keyFile->FileName))

  001bd	83 7c 24 1c 00	 cmp	 DWORD PTR _bTimeStampValid$[esp+65604], 0
  001c2	74 2b		 je	 SHORT $LN1@KeyFilePro
  001c4	8b 4c 24 20	 mov	 ecx, DWORD PTR _keyFile$GSCopy$[esp+65604]
  001c8	51		 push	 ecx
  001c9	e8 00 00 00 00	 call	 _IsFileOnReadOnlyFilesystem
  001ce	83 c4 04	 add	 esp, 4
  001d1	85 c0		 test	 eax, eax
  001d3	75 1a		 jne	 SHORT $LN1@KeyFilePro

; 208  : 	{
; 209  : 		// Restore the keyfile timestamp
; 210  : 		SetFileTime (src, &ftCreationTime, &ftLastAccessTime, &ftLastWriteTime);

  001d5	8d 54 24 28	 lea	 edx, DWORD PTR _ftLastWriteTime$[esp+65604]
  001d9	52		 push	 edx
  001da	8b 54 24 28	 mov	 edx, DWORD PTR _src$[esp+65608]
  001de	8d 44 24 3c	 lea	 eax, DWORD PTR _ftLastAccessTime$[esp+65608]
  001e2	50		 push	 eax
  001e3	8d 4c 24 38	 lea	 ecx, DWORD PTR _ftCreationTime$[esp+65612]
  001e7	51		 push	 ecx
  001e8	52		 push	 edx
  001e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFileTime@16
$LN1@KeyFilePro:

; 211  : 	}
; 212  : 
; 213  : 	SetLastError (err);

  001ef	56		 push	 esi
  001f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 214  : 	return status;

  001f6	8d 44 24 18	 lea	 eax, DWORD PTR _finally161$[esp+65604]
  001fa	e8 00 00 00 00	 call	 ??1Finally161@?6??KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z@QAE@XZ ; `KeyFileProcess'::`7'::Finally161::~Finally161

; 215  : }

  001ff	8b 8c 24 40 00
	01 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+65604]
  00206	8b 44 24 0c	 mov	 eax, DWORD PTR _status$[esp+65604]
  0020a	5e		 pop	 esi
  0020b	5d		 pop	 ebp
  0020c	5b		 pop	 ebx
  0020d	33 cc		 xor	 ecx, esp
  0020f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00214	81 c4 38 00 01
	00		 add	 esp, 65592		; 00010038H
  0021a	c3		 ret	 0
?KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z ENDP	; KeyFileProcess
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1651 : 		return (_Myptr());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN5@c_str
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  00009	c3		 ret	 0

; 1651 : 		return (_Myptr());

$LN5@c_str:
  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  0000d	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
; Function compile flags: /Ogtpy
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str, COMDAT
; _this$ = ecx

; 1651 : 		return (_Myptr());

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN5@c_str@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  00009	c3		 ret	 0

; 1651 : 		return (_Myptr());

$LN5@c_str@2:
  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  0000d	c3		 ret	 0
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
_TEXT	ENDS
PUBLIC	??D?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBEABUSecurityTokenKeyfilePath@CipherShed@@XZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??D?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBEABUSecurityTokenKeyfilePath@CipherShed@@XZ
_TEXT	SEGMENT
??D?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBEABUSecurityTokenKeyfilePath@CipherShed@@XZ PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator*, COMDAT
; _this$ = ecx

; 211  : 			{	// return designated value

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 212  : 
; 213  :  #if _HAS_ITERATOR_DEBUGGING
; 214  : 			if (this->_Mycont == 0
; 215  : 				|| _Ptr == 0
; 216  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 217  : 				{
; 218  : 				_DEBUG_ERROR("list iterator not dereferencable");
; 219  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 220  : 				}
; 221  :  #else
; 222  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN23@operator@5
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 223  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN17@operator@5
$LN23@operator@5:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN18@operator@5
$LN17@operator@5:
  00018	33 c0		 xor	 eax, eax
$LN18@operator@5:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00020	75 05		 jne	 SHORT $LN3@operator@5
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@5:

; 224  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 225  : 
; 226  : 			return (_Myval(_Ptr));

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	83 c0 08	 add	 eax, 8
  0002d	5e		 pop	 esi

; 227  : 			}

  0002e	c3		 ret	 0
??D?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBEABUSecurityTokenKeyfilePath@CipherShed@@XZ ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator*
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 472  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 473  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 478  : 		{	// copy constructor

  00000	8b c1		 mov	 eax, ecx

; 479  : #if defined(_DEBUG)
; 480  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 481  : 			{
; 482  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 483  : 			}
; 484  : #endif
; 485  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z PROC ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 472  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 473  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z ENDP ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 478  : 		{	// copy constructor

  00000	8b c1		 mov	 eax, ecx

; 479  : #if defined(_DEBUG)
; 480  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 481  : 			{
; 482  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 483  : 			}
; 484  : #endif
; 485  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@E@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<unsigned char> >::~_Container_base_aux_alloc_real<std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@E@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_real@V?$allocator@E@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<unsigned char> >::~_Container_base_aux_alloc_real<std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx

; 440  : 		}

  00009	c3		 ret	 0
??1?$_Container_base_aux_alloc_real@V?$allocator@E@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<unsigned char> >::~_Container_base_aux_alloc_real<std::allocator<unsigned char> >
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfilePath> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfilePath> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfilePath> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfilePath> >, COMDAT
; _this$ = ecx

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx

; 440  : 		}

  00009	c3		 ret	 0
??1?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfilePath> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfilePath> >
_TEXT	ENDS
PUBLIC	??E?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEAAV012@XZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??E?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??E?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEAAV012@XZ PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator++, COMDAT
; _this$ = ecx

; 235  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 236  : 
; 237  :  #if _HAS_ITERATOR_DEBUGGING
; 238  : 			if (this->_Mycont == 0
; 239  : 				|| _Ptr == 0
; 240  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 241  : 				{
; 242  : 				_DEBUG_ERROR("list iterator not incrementable");
; 243  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 244  : 				}
; 245  :  #else
; 246  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN23@operator@6
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 247  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN17@operator@6
$LN23@operator@6:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN18@operator@6
$LN17@operator@6:
  00018	33 c0		 xor	 eax, eax
$LN18@operator@6:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00020	75 05		 jne	 SHORT $LN3@operator@6
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@6:

; 248  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 249  : 
; 250  : 			_Ptr = _Nextnode(_Ptr);

  00027	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002a	8b 02		 mov	 eax, DWORD PTR [edx]
  0002c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 251  : 			return (*this);

  0002f	8b c6		 mov	 eax, esi
  00031	5e		 pop	 esi

; 252  : 			}

  00032	c3		 ret	 0
??E?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator++
_TEXT	ENDS
PUBLIC	??9?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBE_NABV012@@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator!=
; Function compile flags: /Ogtpy
;	COMDAT ??9?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBE_NABV012@@Z PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator!=, COMDAT
; _this$ = ecx

; 302  : 			{	// test for iterator inequality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 303  : 			return (!(*this == _Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN6@operator@7
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN5@operator@7
$LN6@operator@7:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@7:
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 95 c1	 setne	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 304  : 			}

  00026	c2 04 00	 ret	 4
??9?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator!=
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@EV?$allocator@E@std@@@std@@QBEAAEXZ ; std::_Vector_iterator<unsigned char,std::allocator<unsigned char> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@EV?$allocator@E@std@@@std@@QBEAAEXZ
_TEXT	SEGMENT
??D?$_Vector_iterator@EV?$allocator@E@std@@@std@@QBEAAEXZ PROC ; std::_Vector_iterator<unsigned char,std::allocator<unsigned char> >::operator*, COMDAT
; _this$ = ecx

; 338  : 		{	// return designated object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 339  : 		return ((reference)**(_Mybase *)this);

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN21@operator@8
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN17@operator@8
$LN21@operator@8:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN18@operator@8
$LN17@operator@8:
  00018	33 c0		 xor	 eax, eax
$LN18@operator@8:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 0a		 jb	 SHORT $LN22@operator@8
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	5e		 pop	 esi

; 340  : 		}

  0002b	c3		 ret	 0
$LN22@operator@8:

; 339  : 		return ((reference)**(_Mybase *)this);

  0002c	8b c1		 mov	 eax, ecx
  0002e	5e		 pop	 esi

; 340  : 		}

  0002f	c3		 ret	 0
??D?$_Vector_iterator@EV?$allocator@E@std@@@std@@QBEAAEXZ ENDP ; std::_Vector_iterator<unsigned char,std::allocator<unsigned char> >::operator*
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $LN5@Eos
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 2115 : 		}

  00014	c2 04 00	 ret	 4

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$LN5@Eos:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 2115 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
; Function compile flags: /Ogtpy
;	COMDAT ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos, COMDAT
; _this$ = ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00004	33 d2		 xor	 edx, edx
  00006	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  0000a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000d	72 0a		 jb	 SHORT $LN5@Eos@2
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 2115 : 		}

  00016	c2 04 00	 ret	 4

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$LN5@Eos@2:
  00019	66 89 54 41 04	 mov	 WORD PTR [ecx+eax*2+4], dx

; 2115 : 		}

  0001e	c2 04 00	 ret	 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size, COMDAT
; _this$ = ecx

; 731  : 		return (this->_Alval.max_size());

  00000	83 c8 ff	 or	 eax, -1

; 732  : 		}

  00003	c3		 ret	 0
?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@E@std@@QAEPAEI@Z		; std::allocator<unsigned char>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@E@std@@QAEPAEI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@E@std@@QAEPAEI@Z PROC		; std::allocator<unsigned char>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@E@std@@YAPAEIPAE@Z ; std::_Allocate<unsigned char>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@E@std@@QAEPAEI@Z ENDP		; std::allocator<unsigned char>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@I@Z ; std::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node>::allocate
; Function compile flags: /Ogtpy
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node *>::construct
; Function compile flags: /Ogtpy
;	COMDAT ?construct@?$allocator@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@ABQAU342@@Z PROC ; std::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node *>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $LN5@construct
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$LN5@construct:

; 156  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node *>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@@Z ; std::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node *>::destroy
; Function compile flags: /Ogtpy
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1671 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1672 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1673 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 1671 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1672 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH

; 1673 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Ranit@EHPBEABE@std@@QAE@XZ		; std::_Ranit<unsigned char,int,unsigned char const *,unsigned char const &>::_Ranit<unsigned char,int,unsigned char const *,unsigned char const &>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Ranit@EHPBEABE@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Ranit@EHPBEABE@std@@QAE@XZ PROC			; std::_Ranit<unsigned char,int,unsigned char const *,unsigned char const &>::_Ranit<unsigned char,int,unsigned char const *,unsigned char const &>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Ranit@EHPBEABE@std@@QAE@XZ ENDP			; std::_Ranit<unsigned char,int,unsigned char const *,unsigned char const &>::_Ranit<unsigned char,int,unsigned char const *,unsigned char const &>
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogtpy
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@_W@std@@QAEPA_WI@Z	; std::allocator<wchar_t>::allocate
; Function compile flags: /Ogtpy
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z PROC		; std::allocator<wchar_t>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z ENDP		; std::allocator<wchar_t>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfilePath> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfilePath> >, COMDAT
; _this$ = ecx

; 419  : 		{

  00000	56		 push	 esi

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN3@Container_
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4
$LN3@Container_:

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Container_base_aux_alloc_real@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Container_base_aux_alloc_real<std::allocator<CipherShed::SecurityTokenKeyfilePath> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 590  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 590  : 	}

  00026	c3		 ret	 0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 616  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 617  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 616  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 617  : 	}

  00026	c3		 ret	 0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@@Z ; std::_Destroy_range<std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned char> >, COMDAT

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 226  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned char> >
_TEXT	ENDS
PUBLIC	??0?$_Bidit@USecurityTokenKeyfilePath@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ ; std::_Bidit<CipherShed::SecurityTokenKeyfilePath,int,CipherShed::SecurityTokenKeyfilePath const *,CipherShed::SecurityTokenKeyfilePath const &>::_Bidit<CipherShed::SecurityTokenKeyfilePath,int,CipherShed::SecurityTokenKeyfilePath const *,CipherShed::SecurityTokenKeyfilePath const &>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Bidit@USecurityTokenKeyfilePath@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Bidit@USecurityTokenKeyfilePath@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ PROC ; std::_Bidit<CipherShed::SecurityTokenKeyfilePath,int,CipherShed::SecurityTokenKeyfilePath const *,CipherShed::SecurityTokenKeyfilePath const &>::_Bidit<CipherShed::SecurityTokenKeyfilePath,int,CipherShed::SecurityTokenKeyfilePath const *,CipherShed::SecurityTokenKeyfilePath const &>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Bidit@USecurityTokenKeyfilePath@CipherShed@@HPBU12@ABU12@@std@@QAE@XZ ENDP ; std::_Bidit<CipherShed::SecurityTokenKeyfilePath,int,CipherShed::SecurityTokenKeyfilePath const *,CipherShed::SecurityTokenKeyfilePath const &>::_Bidit<CipherShed::SecurityTokenKeyfilePath,int,CipherShed::SecurityTokenKeyfilePath const *,CipherShed::SecurityTokenKeyfilePath const &>
_TEXT	ENDS
PUBLIC	??E?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE?AV012@H@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??E?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE?AV012@H@Z PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator++, COMDAT
; _this$ = ecx

; 255  : 			{	// postincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 256  : 			_Myt_iter _Tmp = *this;

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00008	57		 push	 edi
  00009	8b 7c 24 0c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000d	89 07		 mov	 DWORD PTR [edi], eax
  0000f	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 257  : 			++*this;

  00012	85 c0		 test	 eax, eax
  00014	75 0b		 jne	 SHORT $LN25@operator@9
  00016	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0001b	8b 06		 mov	 eax, DWORD PTR [esi]
  0001d	85 c0		 test	 eax, eax
  0001f	74 04		 je	 SHORT $LN19@operator@9
$LN25@operator@9:
  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	eb 02		 jmp	 SHORT $LN20@operator@9
$LN19@operator@9:
  00025	33 c0		 xor	 eax, eax
$LN20@operator@9:
  00027	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002a	3b 50 14	 cmp	 edx, DWORD PTR [eax+20]
  0002d	75 05		 jne	 SHORT $LN5@operator@9
  0002f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@9:
  00034	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]

; 258  : 			return (_Tmp);

  00039	8b c7		 mov	 eax, edi
  0003b	5f		 pop	 edi
  0003c	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0003f	5e		 pop	 esi

; 259  : 			}

  00040	c2 08 00	 ret	 8
??E?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE?AV012@H@Z ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator++
_TEXT	ENDS
PUBLIC	?max_size@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBEIXZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBEIXZ PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::max_size, COMDAT
; _this$ = ecx

; 625  : 		return (this->_Alval.max_size());

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 626  : 		}

  00005	c3		 ret	 0
?max_size@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBEIXZ ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::max_size
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@XZ ; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::~_Vector_val<unsigned char,std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@XZ PROC	; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::~_Vector_val<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::~_Vector_val<unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
PUBLIC	??1?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::~_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::~_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::~_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2149 : 		if (!_Built)

  00000	80 7c 24 04 00	 cmp	 BYTE PTR __Built$[esp-4], 0
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 27		 je	 SHORT $LN15@Tidy

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

  0000f	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00013	72 21		 jb	 SHORT $LN15@Tidy

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

  00015	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00018	53		 push	 ebx
  00019	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2154 : 			if (0 < _Newsize)

  0001b	85 ff		 test	 edi, edi
  0001d	76 0d		 jbe	 SHORT $LN13@Tidy

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

  0001f	57		 push	 edi
  00020	53		 push	 ebx
  00021	6a 10		 push	 16			; 00000010H
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _memcpy_s
  00029	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@Tidy:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  0002c	53		 push	 ebx
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00032	83 c4 04	 add	 esp, 4
  00035	5b		 pop	 ebx
$LN15@Tidy:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;
; 2159 : 		_Eos(_Newsize);

  00036	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00039	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00040	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 2160 : 		}

  00047	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx

; 2149 : 		if (!_Built)

  00000	80 7c 24 04 00	 cmp	 BYTE PTR __Built$[esp-4], 0
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 2a		 je	 SHORT $LN17@Tidy@2

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

  0000f	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00013	72 24		 jb	 SHORT $LN17@Tidy@2

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

  00015	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00018	53		 push	 ebx
  00019	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2154 : 			if (0 < _Newsize)

  0001b	85 ff		 test	 edi, edi
  0001d	76 10		 jbe	 SHORT $LN15@Tidy@2

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

  0001f	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  00022	51		 push	 ecx
  00023	53		 push	 ebx
  00024	6a 10		 push	 16			; 00000010H
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _memcpy_s
  0002c	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@Tidy@2:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  0002f	53		 push	 ebx
  00030	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00035	83 c4 04	 add	 esp, 4
  00038	5b		 pop	 ebx
$LN17@Tidy@2:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;
; 2159 : 		_Eos(_Newsize);

  00039	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0003c	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00043	33 d2		 xor	 edx, edx
  00045	66 89 54 7e 04	 mov	 WORD PTR [esi+edi*2+4], dx
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi

; 2160 : 		}

  0004c	c2 08 00	 ret	 8
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@XZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Buynode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@XZ
_TEXT	SEGMENT
?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@XZ PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Buynode, COMDAT
; _this$ = ecx

; 1172 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  00000	6a 24		 push	 36			; 00000024H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 1173 : 		int _Linkcnt = 0;
; 1174 : 
; 1175 : 		_TRY_BEGIN
; 1176 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Pnode);

  0000a	85 c0		 test	 eax, eax
  0000c	74 02		 je	 SHORT $LN26@Buynode
  0000e	89 00		 mov	 DWORD PTR [eax], eax
$LN26@Buynode:

; 1177 : 		++_Linkcnt;
; 1178 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Pnode);

  00010	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00013	85 c9		 test	 ecx, ecx
  00015	74 02		 je	 SHORT $LN36@Buynode
  00017	89 01		 mov	 DWORD PTR [ecx], eax
$LN36@Buynode:

; 1179 : 		_CATCH_ALL
; 1180 : 		if (0 < _Linkcnt)
; 1181 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1182 : 		this->_Alnod.deallocate(_Pnode, 1);
; 1183 : 		_RERAISE;
; 1184 : 		_CATCH_END
; 1185 : 		return (_Pnode);
; 1186 : 		}

  00019	c3		 ret	 0
?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@XZ ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Buynode
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xran
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
tv130 = 8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1262 : 		{	// erase elements [_Off, _Off + _Count)

  00000	53		 push	 ebx

; 1263 : 		if (_Mysize < _Off)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	73 05		 jae	 SHORT $LN3@erase

; 1264 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@erase:

; 1265 : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c3		 sub	 eax, ebx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $LN2@erase

; 1266 : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$LN2@erase:

; 1267 : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 55		 jbe	 SHORT $LN30@erase

; 1268 : 			{	// move elements down
; 1269 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1270 : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	55		 push	 ebp
  0002a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0002d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00030	72 09		 jb	 SHORT $LN8@erase
  00032	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00035	89 54 24 14	 mov	 DWORD PTR tv130[esp+12], edx
  00039	eb 04		 jmp	 SHORT $LN9@erase
$LN8@erase:
  0003b	89 6c 24 14	 mov	 DWORD PTR tv130[esp+12], ebp
$LN9@erase:
  0003f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00042	72 05		 jb	 SHORT $LN12@erase
  00044	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00047	eb 02		 jmp	 SHORT $LN13@erase
$LN12@erase:
  00049	8b d5		 mov	 edx, ebp
$LN13@erase:
  0004b	2b c7		 sub	 eax, edi
  0004d	50		 push	 eax
  0004e	8b 44 24 18	 mov	 eax, DWORD PTR tv130[esp+16]
  00052	03 c3		 add	 eax, ebx
  00054	03 c7		 add	 eax, edi
  00056	50		 push	 eax
  00057	2b cb		 sub	 ecx, ebx
  00059	51		 push	 ecx
  0005a	03 d3		 add	 edx, ebx
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _memmove_s

; 1271 : 			size_type _Newsize = _Mysize - _Count;

  00062	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00065	2b c7		 sub	 eax, edi
  00067	83 c4 10	 add	 esp, 16			; 00000010H

; 1272 : 			_Eos(_Newsize);

  0006a	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0006e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00071	72 03		 jb	 SHORT $LN26@erase
  00073	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN26@erase:
  00076	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  0007a	5d		 pop	 ebp
$LN30@erase:
  0007b	5f		 pop	 edi

; 1273 : 			}
; 1274 : 		return (*this);

  0007c	8b c6		 mov	 eax, esi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx

; 1275 : 		}

  00080	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
tv133 = 8						; size = 4
__Off$ = 8						; size = 4
tv139 = 12						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx

; 1262 : 		{	// erase elements [_Off, _Off + _Count)

  00000	53		 push	 ebx

; 1263 : 		if (_Mysize < _Off)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	73 05		 jae	 SHORT $LN3@erase@2

; 1264 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@erase@2:

; 1265 : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c3		 sub	 eax, ebx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $LN2@erase@2

; 1266 : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$LN2@erase@2:

; 1267 : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 69		 jbe	 SHORT $LN32@erase@2

; 1268 : 			{	// move elements down
; 1269 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1270 : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	55		 push	 ebp
  0002a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0002d	83 f9 08	 cmp	 ecx, 8
  00030	72 09		 jb	 SHORT $LN8@erase@2
  00032	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00035	89 54 24 14	 mov	 DWORD PTR tv133[esp+12], edx
  00039	eb 04		 jmp	 SHORT $LN9@erase@2
$LN8@erase@2:
  0003b	89 6c 24 14	 mov	 DWORD PTR tv133[esp+12], ebp
$LN9@erase@2:
  0003f	83 f9 08	 cmp	 ecx, 8
  00042	72 09		 jb	 SHORT $LN12@erase@2
  00044	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00047	89 54 24 18	 mov	 DWORD PTR tv139[esp+12], edx
  0004b	eb 04		 jmp	 SHORT $LN13@erase@2
$LN12@erase@2:
  0004d	89 6c 24 18	 mov	 DWORD PTR tv139[esp+12], ebp
$LN13@erase@2:
  00051	8b 54 24 14	 mov	 edx, DWORD PTR tv133[esp+12]
  00055	2b c7		 sub	 eax, edi
  00057	03 c0		 add	 eax, eax
  00059	50		 push	 eax
  0005a	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  0005d	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  00060	2b cb		 sub	 ecx, ebx
  00062	50		 push	 eax
  00063	03 c9		 add	 ecx, ecx
  00065	51		 push	 ecx
  00066	8b 4c 24 24	 mov	 ecx, DWORD PTR tv139[esp+24]
  0006a	8d 14 59	 lea	 edx, DWORD PTR [ecx+ebx*2]
  0006d	52		 push	 edx
  0006e	e8 00 00 00 00	 call	 _memmove_s

; 1271 : 			size_type _Newsize = _Mysize - _Count;

  00073	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00076	2b c7		 sub	 eax, edi
  00078	83 c4 10	 add	 esp, 16			; 00000010H

; 1272 : 			_Eos(_Newsize);

  0007b	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  0007f	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00082	72 03		 jb	 SHORT $LN28@erase@2
  00084	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN28@erase@2:
  00087	33 c9		 xor	 ecx, ecx
  00089	66 89 4c 45 00	 mov	 WORD PTR [ebp+eax*2], cx
  0008e	5d		 pop	 ebp
$LN32@erase@2:
  0008f	5f		 pop	 edi

; 1273 : 			}
; 1274 : 		return (*this);

  00090	8b c6		 mov	 eax, esi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 1275 : 		}

  00094	c2 08 00	 ret	 8
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy, COMDAT
; _this$ = ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1120 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@E@std@@@std@@IAE@V?$allocator@E@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<unsigned char> >::_Container_base_aux_alloc_real<std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@E@std@@@std@@IAE@V?$allocator@E@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@E@std@@@std@@IAE@V?$allocator@E@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<unsigned char> >::_Container_base_aux_alloc_real<std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 419  : 		{

  00000	56		 push	 esi

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN3@Container_@2
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4
$LN3@Container_@2:

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Container_base_aux_alloc_real@V?$allocator@E@std@@@std@@IAE@V?$allocator@E@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<unsigned char> >::_Container_base_aux_alloc_real<std::allocator<unsigned char> >
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2083 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 2084 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 0f	 or	 esi, 15			; 0000000fH

; 2085 : 		if (max_size() < _Newres)

  00038	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0003b	76 04		 jbe	 SHORT $LN6@Copy

; 2086 : 			_Newres = _Newsize;	// undo roundup if too big

  0003d	8b f0		 mov	 esi, eax

; 2087 : 		else if (_Newres / 3 < _Myres / 2

  0003f	eb 22		 jmp	 SHORT $LN4@Copy
$LN6@Copy:

; 2088 : 			&& _Myres <= max_size() - _Myres / 2)

  00041	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00044	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00049	f7 e6		 mul	 esi
  0004b	8b cb		 mov	 ecx, ebx
  0004d	d1 e9		 shr	 ecx, 1
  0004f	d1 ea		 shr	 edx, 1
  00051	3b d1		 cmp	 edx, ecx
  00053	73 0e		 jae	 SHORT $LN4@Copy
  00055	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0005a	2b c1		 sub	 eax, ecx
  0005c	3b d8		 cmp	 ebx, eax
  0005e	77 03		 ja	 SHORT $LN4@Copy

; 2089 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00060	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
$LN4@Copy:

; 2090 : 		_Elem *_Ptr = 0;
; 2091 : 
; 2092 : 		_TRY_BEGIN
; 2093 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00063	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00066	6a 00		 push	 0
  00068	51		 push	 ecx
  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00070	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00075	83 c4 08	 add	 esp, 8
  00078	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0007b	eb 28		 jmp	 SHORT $LN16@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0:

; 2094 : 		_CATCH_ALL
; 2095 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007d	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00080	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00083	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 2096 : 			_TRY_BEGIN
; 2097 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00086	40		 inc	 eax
  00087	6a 00		 push	 0
  00089	50		 push	 eax
  0008a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0008e	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00093	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00096	83 c4 08	 add	 esp, 8

; 2101 : 			_CATCH_END
; 2102 : 		_CATCH_END

  00099	b8 00 00 00 00	 mov	 eax, $LN106@Copy
  0009e	c3		 ret	 0
$LN106@Copy:
  0009f	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000a2	8b 75 e8	 mov	 esi, DWORD PTR __Newres$[ebp]
$LN16@Copy:

; 2103 : 
; 2104 : 		if (0 < _Oldlen)

  000a5	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  000a8	85 db		 test	 ebx, ebx
  000aa	76 20		 jbe	 SHORT $LN71@Copy

; 2105 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

  000ac	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000b0	72 05		 jb	 SHORT $LN63@Copy
  000b2	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000b5	eb 03		 jmp	 SHORT $LN64@Copy
$LN63@Copy:
  000b7	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN64@Copy:
  000ba	53		 push	 ebx
  000bb	50		 push	 eax
  000bc	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000bf	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _memcpy_s
  000c9	83 c4 10	 add	 esp, 16			; 00000010H
$LN71@Copy:

; 2106 : 		_Tidy(true);

  000cc	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000d0	72 0c		 jb	 SHORT $LN87@Copy
  000d2	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000db	83 c4 04	 add	 esp, 4
$LN87@Copy:

; 2107 : 		_Bx._Ptr = _Ptr;

  000de	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000e1	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000e4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e7	89 08		 mov	 DWORD PTR [eax], ecx

; 2108 : 		_Myres = _Newres;

  000e9	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 2109 : 		_Eos(_Oldlen);

  000ec	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  000ef	83 fe 10	 cmp	 esi, 16			; 00000010H
  000f2	72 02		 jb	 SHORT $LN101@Copy
  000f4	8b c1		 mov	 eax, ecx
$LN101@Copy:
  000f6	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 2110 : 		}

  000fa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00104	59		 pop	 ecx
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1:

; 2098 : 			_CATCH_ALL
; 2099 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010e	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00111	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00115	72 0c		 jb	 SHORT $LN51@Copy
  00117	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0011a	52		 push	 edx
  0011b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00120	83 c4 04	 add	 esp, 4
$LN51@Copy:

; 2100 : 			_RERAISE;

  00123	6a 00		 push	 0
  00125	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0012c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00133	6a 00		 push	 0
  00135	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00139	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN109@Copy:
  0013e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Ptr$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newres$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy, COMDAT
; _this$ = ecx

; 2083 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 2084 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 07	 or	 esi, 7

; 2085 : 		if (max_size() < _Newres)

  00038	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH
  0003e	76 04		 jbe	 SHORT $LN6@Copy@2

; 2086 : 			_Newres = _Newsize;	// undo roundup if too big

  00040	8b f0		 mov	 esi, eax

; 2087 : 		else if (_Newres / 3 < _Myres / 2

  00042	eb 22		 jmp	 SHORT $LN4@Copy@2
$LN6@Copy@2:

; 2088 : 			&& _Myres <= max_size() - _Myres / 2)

  00044	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00047	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0004c	f7 e6		 mul	 esi
  0004e	8b cb		 mov	 ecx, ebx
  00050	d1 e9		 shr	 ecx, 1
  00052	d1 ea		 shr	 edx, 1
  00054	3b d1		 cmp	 edx, ecx
  00056	73 0e		 jae	 SHORT $LN4@Copy@2
  00058	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  0005d	2b c1		 sub	 eax, ecx
  0005f	3b d8		 cmp	 ebx, eax
  00061	77 03		 ja	 SHORT $LN4@Copy@2

; 2089 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00063	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
$LN4@Copy@2:

; 2090 : 		_Elem *_Ptr = 0;
; 2091 : 
; 2092 : 		_TRY_BEGIN
; 2093 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00066	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00069	6a 00		 push	 0
  0006b	51		 push	 ecx
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00073	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00078	83 c4 08	 add	 esp, 8
  0007b	8b d8		 mov	 ebx, eax
  0007d	eb 2b		 jmp	 SHORT $LN16@Copy@2
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$0:

; 2094 : 		_CATCH_ALL
; 2095 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007f	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00082	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00085	89 45 08	 mov	 DWORD PTR __Newres$[ebp], eax

; 2096 : 			_TRY_BEGIN
; 2097 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00088	40		 inc	 eax
  00089	6a 00		 push	 0
  0008b	50		 push	 eax
  0008c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00090	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00095	89 45 e8	 mov	 DWORD PTR __Ptr$[ebp], eax
  00098	83 c4 08	 add	 esp, 8

; 2101 : 			_CATCH_END
; 2102 : 		_CATCH_END

  0009b	b8 00 00 00 00	 mov	 eax, $LN112@Copy@2
  000a0	c3		 ret	 0
$LN112@Copy@2:
  000a1	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000a4	8b 75 08	 mov	 esi, DWORD PTR __Newres$[ebp]
  000a7	8b 5d e8	 mov	 ebx, DWORD PTR __Ptr$[ebp]
$LN16@Copy@2:

; 2103 : 
; 2104 : 		if (0 < _Oldlen)

  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000ad	85 c9		 test	 ecx, ecx
  000af	76 24		 jbe	 SHORT $LN75@Copy@2

; 2105 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

  000b1	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  000b5	72 05		 jb	 SHORT $LN65@Copy@2
  000b7	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000ba	eb 03		 jmp	 SHORT $LN66@Copy@2
$LN65@Copy@2:
  000bc	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN66@Copy@2:
  000bf	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	8d 44 36 02	 lea	 eax, DWORD PTR [esi+esi+2]
  000c8	50		 push	 eax
  000c9	53		 push	 ebx
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000d2	83 c4 10	 add	 esp, 16			; 00000010H
$LN75@Copy@2:

; 2106 : 		_Tidy(true);

  000d5	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  000d9	72 0f		 jb	 SHORT $LN93@Copy@2
  000db	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000de	51		 push	 ecx
  000df	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000e7	83 c4 04	 add	 esp, 4
$LN93@Copy@2:
  000ea	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000ed	33 d2		 xor	 edx, edx

; 2107 : 		_Bx._Ptr = _Ptr;

  000ef	89 18		 mov	 DWORD PTR [eax], ebx

; 2108 : 		_Myres = _Newres;

  000f1	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 2109 : 		_Eos(_Oldlen);

  000f4	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  000f7	83 fe 08	 cmp	 esi, 8
  000fa	72 02		 jb	 SHORT $LN107@Copy@2
  000fc	8b c3		 mov	 eax, ebx
$LN107@Copy@2:
  000fe	33 d2		 xor	 edx, edx
  00100	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 2110 : 		}

  00104	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00107	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010e	59		 pop	 ecx
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$1:

; 2098 : 			_CATCH_ALL
; 2099 : 			_Tidy(true);	// failed again, discard storage and reraise

  00118	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0011b	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  0011f	72 0c		 jb	 SHORT $LN53@Copy@2
  00121	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0012a	83 c4 04	 add	 esp, 4
$LN53@Copy@2:
  0012d	33 c9		 xor	 ecx, ecx

; 2100 : 			_RERAISE;

  0012f	51		 push	 ecx
  00130	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00137	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0013e	51		 push	 ecx
  0013f	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00143	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN115@Copy@2:
  00148	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
PUBLIC	??0?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z ; std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z PROC ; std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN8@List_nod
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 48   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 47   : 		{	// construct allocator from _Al

$LN8@List_nod:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 48   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z ENDP ; std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QAE@PAEPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QAE@PAEPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QAE@PAEPBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

  00000	53		 push	 ebx

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 14	 mov	 edi, DWORD PTR __Pvector$[esp+8]
  0000b	8b f1		 mov	 esi, ecx
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	85 ff		 test	 edi, edi
  00015	74 0a		 je	 SHORT $LN4@Vector_con
  00017	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  0001a	77 05		 ja	 SHORT $LN4@Vector_con
  0001c	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0001f	76 05		 jbe	 SHORT $LN3@Vector_con
$LN4@Vector_con:
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Vector_con:

; 79   : 		this->_Set_container(_Pvector);

  00026	8b 07		 mov	 eax, DWORD PTR [edi]
  00028	89 06		 mov	 DWORD PTR [esi], eax
  0002a	5f		 pop	 edi

; 80   : 		_Myptr = _Ptr;

  0002b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 81   : 		}

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@EV?$allocator@E@std@@@std@@QAE@PAEPBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >::_Vector_const_iterator<unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
PUBLIC	??0?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PBV12@@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::_Const_iterator<1>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PBV12@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PBV12@@Z PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::_Const_iterator<1>, COMDAT
; _this$ = ecx

; 176  : 			{	// construct with node pointer _Pnode

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi

; 177  : 			_SCL_SECURE_TRAITS_VALIDATE(_Plist != NULL);

  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Plist$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN3@Const_iter
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Const_iter:

; 178  : 			this->_Set_container(_Plist);

  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx

; 179  : 			}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PBV12@@Z ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::_Const_iterator<1>
_TEXT	ENDS
PUBLIC	??0?$_Iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PBV12@@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Iterator<1>::_Iterator<1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PBV12@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PBV12@@Z PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Iterator<1>::_Iterator<1>, COMDAT
; _this$ = ecx

; 361  : 			{	// construct with node pointer _Pnode

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Plist$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN5@Iterator
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Iterator:
  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx

; 362  : 			}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0?$_Iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@PAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PBV12@@Z ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Iterator<1>::_Iterator<1>
_TEXT	ENDS
PUBLIC	?_Make_iter@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Make_iter
; Function compile flags: /Ogtpy
;	COMDAT ?_Make_iter@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Make_iter, COMDAT
; _this$ = ecx

; 554  : 		return (iterator(_Where._Ptr, this));

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Where$[esp]
  00004	56		 push	 esi
  00005	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	85 ff		 test	 edi, edi
  00017	75 05		 jne	 SHORT $LN7@Make_iter
  00019	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@Make_iter:
  0001e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00020	5f		 pop	 edi
  00021	89 0e		 mov	 DWORD PTR [esi], ecx
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 555  : 		}

  00026	c2 0c 00	 ret	 12			; 0000000cH
?_Make_iter@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Make_iter
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 906  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $LN17@basic_stri
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN17@basic_stri:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 907  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 906  : 		_Tidy(true);

  00003	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00007	72 0c		 jb	 SHORT $LN19@basic_stri@2
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN19@basic_stri@2:
  00015	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  0001c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00023	33 c9		 xor	 ecx, ecx
  00025	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00029	5e		 pop	 esi

; 907  : 		}

  0002a	c3		 ret	 0
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??1?$_List_ptr@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_ptr<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::~_List_ptr<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_ptr@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_ptr@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_ptr<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::~_List_ptr<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_ptr@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_ptr<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::~_List_ptr<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1124 : 		if (_Myfirst != 0)

  00003	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN4@Tidy@3

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);
; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$LN4@Tidy@3:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00013	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0001a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00021	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00028	5e		 pop	 esi

; 1135 : 		}

  00029	c3		 ret	 0
?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@EV?$allocator@E@std@@@std@@IAE@V?$allocator@E@1@@Z ; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::_Vector_val<unsigned char,std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_val@EV?$allocator@E@std@@@std@@IAE@V?$allocator@E@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@EV?$allocator@E@std@@@std@@IAE@V?$allocator@E@1@@Z PROC ; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::_Vector_val<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN8@Vector_val
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 426  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 425  : 		{	// construct allocator from _Al

$LN8@Vector_val:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 426  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Vector_val@EV?$allocator@E@std@@@std@@IAE@V?$allocator@E@1@@Z ENDP ; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::_Vector_val<unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xlen
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2119 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	53		 push	 ebx

; 2120 : 			if (max_size() < _Newsize)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Newsize$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  0000b	76 05		 jbe	 SHORT $LN6@Grow

; 2121 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN6@Grow:

; 2122 : 		if (_Myres < _Newsize)

  00012	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00015	3b c3		 cmp	 eax, ebx
  00017	73 19		 jae	 SHORT $LN5@Grow

; 2123 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001c	50		 push	 eax
  0001d	53		 push	 ebx
  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c9		 xor	 ecx, ecx
  00027	3b cb		 cmp	 ecx, ebx
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5b		 pop	 ebx

; 2130 : 		}

  0002f	c2 08 00	 ret	 8
$LN5@Grow:

; 2124 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	80 7c 24 10 00	 cmp	 BYTE PTR __Trim$[esp+4], 0
  00037	74 52		 je	 SHORT $LN3@Grow
  00039	83 fb 10	 cmp	 ebx, 16			; 00000010H
  0003c	73 4d		 jae	 SHORT $LN3@Grow
  0003e	57		 push	 edi

; 2125 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2126 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  0003f	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00042	3b df		 cmp	 ebx, edi
  00044	73 02		 jae	 SHORT $LN9@Grow
  00046	8b fb		 mov	 edi, ebx
$LN9@Grow:
  00048	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004b	72 21		 jb	 SHORT $LN33@Grow
  0004d	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00050	55		 push	 ebp
  00051	8b 28		 mov	 ebp, DWORD PTR [eax]
  00053	85 ff		 test	 edi, edi
  00055	76 0d		 jbe	 SHORT $LN31@Grow
  00057	57		 push	 edi
  00058	55		 push	 ebp
  00059	6a 10		 push	 16			; 00000010H
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _memcpy_s
  00061	83 c4 10	 add	 esp, 16			; 00000010H
$LN31@Grow:
  00064	55		 push	 ebp
  00065	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006a	83 c4 04	 add	 esp, 4
  0006d	5d		 pop	 ebp
$LN33@Grow:
  0006e	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00071	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00078	33 c9		 xor	 ecx, ecx
  0007a	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  0007f	3b cb		 cmp	 ecx, ebx
  00081	5f		 pop	 edi
  00082	1b c0		 sbb	 eax, eax
  00084	5e		 pop	 esi
  00085	f7 d8		 neg	 eax
  00087	5b		 pop	 ebx

; 2130 : 		}

  00088	c2 08 00	 ret	 8
$LN3@Grow:

; 2127 : 		else if (_Newsize == 0)

  0008b	85 db		 test	 ebx, ebx
  0008d	75 20		 jne	 SHORT $LN49@Grow

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

  0008f	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00092	83 f8 10	 cmp	 eax, 16			; 00000010H
  00095	72 12		 jb	 SHORT $LN47@Grow
  00097	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  0009a	33 c9		 xor	 ecx, ecx
  0009c	3b cb		 cmp	 ecx, ebx
  0009e	88 1e		 mov	 BYTE PTR [esi], bl
  000a0	1b c0		 sbb	 eax, eax
  000a2	5e		 pop	 esi
  000a3	f7 d8		 neg	 eax
  000a5	5b		 pop	 ebx

; 2130 : 		}

  000a6	c2 08 00	 ret	 8

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

$LN47@Grow:
  000a9	83 c6 04	 add	 esi, 4
  000ac	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN49@Grow:

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000af	33 c9		 xor	 ecx, ecx
  000b1	3b cb		 cmp	 ecx, ebx
  000b3	1b c0		 sbb	 eax, eax
  000b5	5e		 pop	 esi
  000b6	f7 d8		 neg	 eax
  000b8	5b		 pop	 ebx

; 2130 : 		}

  000b9	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
; Function compile flags: /Ogtpy
;	COMDAT ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow, COMDAT
; _this$ = ecx

; 2119 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp

; 2120 : 			if (max_size() < _Newsize)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Newsize$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	81 fd fe ff ff
	7f		 cmp	 ebp, 2147483646		; 7ffffffeH
  0000e	76 05		 jbe	 SHORT $LN6@Grow@2

; 2121 : 			_String_base::_Xlen();	// result too long

  00010	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN6@Grow@2:

; 2122 : 		if (_Myres < _Newsize)

  00015	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00018	3b c5		 cmp	 eax, ebp
  0001a	73 19		 jae	 SHORT $LN5@Grow@2

; 2123 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  0001c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001f	50		 push	 eax
  00020	55		 push	 ebp
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00028	33 c9		 xor	 ecx, ecx
  0002a	3b cd		 cmp	 ecx, ebp
  0002c	1b c0		 sbb	 eax, eax
  0002e	5e		 pop	 esi
  0002f	f7 d8		 neg	 eax
  00031	5d		 pop	 ebp

; 2130 : 		}

  00032	c2 08 00	 ret	 8
$LN5@Grow@2:

; 2124 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00035	80 7c 24 10 00	 cmp	 BYTE PTR __Trim$[esp+4], 0
  0003a	74 57		 je	 SHORT $LN3@Grow@2
  0003c	83 fd 08	 cmp	 ebp, 8
  0003f	73 52		 jae	 SHORT $LN3@Grow@2
  00041	57		 push	 edi

; 2125 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2126 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00042	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00045	3b ef		 cmp	 ebp, edi
  00047	73 02		 jae	 SHORT $LN9@Grow@2
  00049	8b fd		 mov	 edi, ebp
$LN9@Grow@2:
  0004b	83 f8 08	 cmp	 eax, 8
  0004e	72 24		 jb	 SHORT $LN35@Grow@2
  00050	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00053	53		 push	 ebx
  00054	8b 18		 mov	 ebx, DWORD PTR [eax]
  00056	85 ff		 test	 edi, edi
  00058	76 10		 jbe	 SHORT $LN33@Grow@2
  0005a	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  0005d	51		 push	 ecx
  0005e	53		 push	 ebx
  0005f	6a 10		 push	 16			; 00000010H
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _memcpy_s
  00067	83 c4 10	 add	 esp, 16			; 00000010H
$LN33@Grow@2:
  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00070	83 c4 04	 add	 esp, 4
  00073	5b		 pop	 ebx
$LN35@Grow@2:
  00074	33 d2		 xor	 edx, edx
  00076	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00079	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00080	33 c9		 xor	 ecx, ecx
  00082	66 89 54 7e 04	 mov	 WORD PTR [esi+edi*2+4], dx
  00087	3b cd		 cmp	 ecx, ebp
  00089	5f		 pop	 edi
  0008a	1b c0		 sbb	 eax, eax
  0008c	5e		 pop	 esi
  0008d	f7 d8		 neg	 eax
  0008f	5d		 pop	 ebp

; 2130 : 		}

  00090	c2 08 00	 ret	 8
$LN3@Grow@2:

; 2127 : 		else if (_Newsize == 0)

  00093	85 ed		 test	 ebp, ebp
  00095	75 25		 jne	 SHORT $LN51@Grow@2

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

  00097	89 6e 14	 mov	 DWORD PTR [esi+20], ebp
  0009a	83 f8 08	 cmp	 eax, 8
  0009d	72 15		 jb	 SHORT $LN49@Grow@2
  0009f	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000a2	33 c0		 xor	 eax, eax

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000a4	33 c9		 xor	 ecx, ecx
  000a6	3b cd		 cmp	 ecx, ebp
  000a8	66 89 06	 mov	 WORD PTR [esi], ax
  000ab	1b c0		 sbb	 eax, eax
  000ad	5e		 pop	 esi
  000ae	f7 d8		 neg	 eax
  000b0	5d		 pop	 ebp

; 2130 : 		}

  000b1	c2 08 00	 ret	 8

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

$LN49@Grow@2:
  000b4	83 c6 04	 add	 esi, 4
  000b7	33 c0		 xor	 eax, eax
  000b9	66 89 06	 mov	 WORD PTR [esi], ax
$LN51@Grow@2:

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000bc	33 c9		 xor	 ecx, ecx
  000be	3b cd		 cmp	 ecx, ebp
  000c0	1b c0		 sbb	 eax, eax
  000c2	5e		 pop	 esi
  000c3	f7 d8		 neg	 eax
  000c5	5d		 pop	 ebp

; 2130 : 		}

  000c6	c2 08 00	 ret	 8
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
_TEXT	ENDS
PUBLIC	??0?$_List_ptr@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z ; std::_List_ptr<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_List_ptr<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_List_ptr@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_ptr@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z PROC ; std::_List_ptr<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_List_ptr<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >, COMDAT
; _this$ = ecx

; 67   : 		{	// construct base, and allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN13@List_ptr
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 68   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 67   : 		{	// construct base, and allocator from _Al

$LN13@List_ptr:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 68   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_ptr@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAE@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z ENDP ; std::_List_ptr<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_List_ptr<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@EV?$allocator@E@std@@@std@@QAE@PAEPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<unsigned char,std::allocator<unsigned char> >::_Vector_iterator<unsigned char,std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@EV?$allocator@E@std@@@std@@QAE@PAEPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@EV?$allocator@E@std@@@std@@QAE@PAEPBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<unsigned char,std::allocator<unsigned char> >::_Vector_iterator<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

  00000	53		 push	 ebx
  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 14	 mov	 edi, DWORD PTR __Pvector$[esp+8]
  0000b	8b f1		 mov	 esi, ecx
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	85 ff		 test	 edi, edi
  00015	74 0a		 je	 SHORT $LN6@Vector_ite
  00017	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  0001a	77 05		 ja	 SHORT $LN6@Vector_ite
  0001c	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0001f	76 05		 jbe	 SHORT $LN5@Vector_ite
$LN6@Vector_ite:
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Vector_ite:
  00026	8b 07		 mov	 eax, DWORD PTR [edi]
  00028	89 06		 mov	 DWORD PTR [esi], eax
  0002a	5f		 pop	 edi
  0002b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 328  : 		}

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	c2 08 00	 ret	 8
??0?$_Vector_iterator@EV?$allocator@E@std@@@std@@QAE@PAEPBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<unsigned char,std::allocator<unsigned char> >::_Vector_iterator<unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
PUBLIC	?begin@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?begin@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::begin, COMDAT
; _this$ = ecx

; 539  : 		return (const_iterator(_Nextnode(_Myhead), this));

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 540  : 		}

  00010	c2 04 00	 ret	 4
?begin@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::end, COMDAT
; _this$ = ecx

; 549  : 		return (const_iterator(_Myhead, this));

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00009	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 550  : 		}

  0000e	c2 04 00	 ret	 4
?end@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBE?AV?$_Const_iterator@$00@12@XZ ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::end
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 951  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 952  : 		if (_Right.size() < _Roff)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7c 24 18	 mov	 edi, DWORD PTR __Roff$[esp+12]
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 7d 14	 cmp	 DWORD PTR [ebp+20], edi
  00011	73 05		 jae	 SHORT $LN5@append

; 953  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@append:

; 954  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]

; 955  : 		if (_Num < _Count)

  0001b	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Count$[esp+12]
  0001f	2b c7		 sub	 eax, edi
  00021	3b c3		 cmp	 eax, ebx
  00023	73 02		 jae	 SHORT $LN4@append

; 956  : 			_Count = _Num;	// trim _Count to size

  00025	8b d8		 mov	 ebx, eax
$LN4@append:

; 957  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00027	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002a	83 c9 ff	 or	 ecx, -1
  0002d	2b c8		 sub	 ecx, eax
  0002f	3b cb		 cmp	 ecx, ebx
  00031	76 07		 jbe	 SHORT $LN2@append
  00033	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]
  00036	3b d0		 cmp	 edx, eax
  00038	73 05		 jae	 SHORT $LN3@append
$LN2@append:

; 958  : 			_String_base::_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append:

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  0003f	85 db		 test	 ebx, ebx
  00041	0f 86 bd 00 00
	00		 jbe	 $LN91@append
  00047	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0004a	03 fb		 add	 edi, ebx
  0004c	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00052	76 05		 jbe	 SHORT $LN17@append
  00054	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@append:
  00059	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005c	3b c7		 cmp	 eax, edi
  0005e	73 1f		 jae	 SHORT $LN16@append
  00060	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00063	50		 push	 eax
  00064	57		 push	 edi
  00065	8b ce		 mov	 ecx, esi
  00067	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0006c	85 ff		 test	 edi, edi
$LN92@append:
  0006e	0f 86 90 00 00
	00		 jbe	 $LN91@append

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

  00074	83 7d 18 08	 cmp	 DWORD PTR [ebp+24], 8
  00078	72 33		 jb	 SHORT $LN66@append
  0007a	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]
  0007d	eb 31		 jmp	 SHORT $LN67@append

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN16@append:
  0007f	85 ff		 test	 edi, edi
  00081	75 eb		 jne	 SHORT $LN92@append
  00083	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00086	83 f8 08	 cmp	 eax, 8
  00089	72 11		 jb	 SHORT $LN60@append
  0008b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008e	33 c9		 xor	 ecx, ecx
  00090	5f		 pop	 edi
  00091	66 89 08	 mov	 WORD PTR [eax], cx

; 965  : 			}
; 966  : 		return (*this);

  00094	8b c6		 mov	 eax, esi
  00096	5e		 pop	 esi
  00097	5d		 pop	 ebp
  00098	5b		 pop	 ebx

; 967  : 		}

  00099	c2 0c 00	 ret	 12			; 0000000cH

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN60@append:
  0009c	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0009f	33 c9		 xor	 ecx, ecx
  000a1	5f		 pop	 edi
  000a2	66 89 08	 mov	 WORD PTR [eax], cx

; 965  : 			}
; 966  : 		return (*this);

  000a5	8b c6		 mov	 eax, esi
  000a7	5e		 pop	 esi
  000a8	5d		 pop	 ebp
  000a9	5b		 pop	 ebx

; 967  : 		}

  000aa	c2 0c 00	 ret	 12			; 0000000cH

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

$LN66@append:
  000ad	83 c5 04	 add	 ebp, 4
$LN67@append:
  000b0	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000b3	83 f8 08	 cmp	 eax, 8
  000b6	72 05		 jb	 SHORT $LN70@append
  000b8	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000bb	eb 03		 jmp	 SHORT $LN71@append
$LN70@append:
  000bd	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN71@append:
  000c0	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000c3	03 db		 add	 ebx, ebx
  000c5	53		 push	 ebx
  000c6	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Roff$[esp+16]
  000ca	2b c1		 sub	 eax, ecx
  000cc	8d 5c 5d 00	 lea	 ebx, DWORD PTR [ebp+ebx*2]
  000d0	53		 push	 ebx
  000d1	03 c0		 add	 eax, eax
  000d3	50		 push	 eax
  000d4	8d 14 4a	 lea	 edx, DWORD PTR [edx+ecx*2]
  000d7	52		 push	 edx
  000d8	e8 00 00 00 00	 call	 _memcpy_s
  000dd	83 c4 10	 add	 esp, 16			; 00000010H

; 964  : 			_Eos(_Num);

  000e0	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000e4	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000e7	72 12		 jb	 SHORT $LN86@append
  000e9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ec	33 c9		 xor	 ecx, ecx
  000ee	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
  000f2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000f3	8b c6		 mov	 eax, esi
  000f5	5e		 pop	 esi
  000f6	5d		 pop	 ebp
  000f7	5b		 pop	 ebx

; 967  : 		}

  000f8	c2 0c 00	 ret	 12			; 0000000cH

; 964  : 			_Eos(_Num);

$LN86@append:
  000fb	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000fe	33 c9		 xor	 ecx, ecx
  00100	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
$LN91@append:
  00104	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  00105	8b c6		 mov	 eax, esi
  00107	5e		 pop	 esi
  00108	5d		 pop	 ebp
  00109	5b		 pop	 ebx

; 967  : 		}

  0010a	c2 0c 00	 ret	 12			; 0000000cH
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 970  : 		{	// append [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 971  : 
; 972  :  #if _HAS_ITERATOR_DEBUGGING
; 973  : 		if (_Count != 0)
; 974  : 			_DEBUG_POINTER(_Ptr);
; 975  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 976  : 
; 977  : 		if (_Inside(_Ptr))

  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00008	57		 push	 edi
  00009	85 c9		 test	 ecx, ecx
  0000b	74 49		 je	 SHORT $LN4@append@2
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 08	 cmp	 edi, 8
  00016	72 04		 jb	 SHORT $LN14@append@2
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN15@append@2
$LN14@append@2:
  0001c	8b d0		 mov	 edx, eax
$LN15@append@2:
  0001e	3b ca		 cmp	 ecx, edx
  00020	72 34		 jb	 SHORT $LN4@append@2
  00022	83 ff 08	 cmp	 edi, 8
  00025	72 04		 jb	 SHORT $LN18@append@2
  00027	8b 10		 mov	 edx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN19@append@2
$LN18@append@2:
  0002b	8b d0		 mov	 edx, eax
$LN19@append@2:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	8d 14 5a	 lea	 edx, DWORD PTR [edx+ebx*2]
  00033	3b d1		 cmp	 edx, ecx
  00035	76 1f		 jbe	 SHORT $LN4@append@2

; 978  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

  00037	83 ff 08	 cmp	 edi, 8
  0003a	72 02		 jb	 SHORT $LN22@append@2
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN22@append@2:
  0003e	8b 54 24 14	 mov	 edx, DWORD PTR __Count$[esp+8]
  00042	2b c8		 sub	 ecx, eax
  00044	52		 push	 edx
  00045	d1 f9		 sar	 ecx, 1
  00047	51		 push	 ecx
  00048	56		 push	 esi
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx

; 989  : 		}

  00053	c2 08 00	 ret	 8
$LN4@append@2:

; 979  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00056	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00059	83 c9 ff	 or	 ecx, -1
  0005c	55		 push	 ebp
  0005d	8b 6c 24 18	 mov	 ebp, DWORD PTR __Count$[esp+12]
  00061	2b c8		 sub	 ecx, eax
  00063	3b cd		 cmp	 ecx, ebp
  00065	76 07		 jbe	 SHORT $LN2@append@2
  00067	8d 14 28	 lea	 edx, DWORD PTR [eax+ebp]
  0006a	3b d0		 cmp	 edx, eax
  0006c	73 05		 jae	 SHORT $LN3@append@2
$LN2@append@2:

; 980  : 			_String_base::_Xlen();	// result too long

  0006e	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@2:

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00073	85 ed		 test	 ebp, ebp
  00075	0f 86 95 00 00
	00		 jbe	 $LN96@append@2
  0007b	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0007e	03 fd		 add	 edi, ebp
  00080	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00086	76 05		 jbe	 SHORT $LN29@append@2
  00088	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN29@append@2:
  0008d	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00090	3b c7		 cmp	 eax, edi
  00092	73 1f		 jae	 SHORT $LN28@append@2
  00094	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00097	50		 push	 eax
  00098	57		 push	 edi
  00099	8b ce		 mov	 ecx, esi
  0009b	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  000a0	85 ff		 test	 edi, edi
$LN99@append@2:
  000a2	76 6c		 jbe	 SHORT $LN96@append@2

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

  000a4	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000a7	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000aa	83 f8 08	 cmp	 eax, 8
  000ad	72 32		 jb	 SHORT $LN78@append@2
  000af	8b 13		 mov	 edx, DWORD PTR [ebx]
  000b1	eb 30		 jmp	 SHORT $LN79@append@2

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN28@append@2:
  000b3	85 ff		 test	 edi, edi
  000b5	75 eb		 jne	 SHORT $LN99@append@2
  000b7	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000ba	83 f8 08	 cmp	 eax, 8
  000bd	72 11		 jb	 SHORT $LN72@append@2
  000bf	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c2	5d		 pop	 ebp
  000c3	33 c9		 xor	 ecx, ecx
  000c5	5f		 pop	 edi
  000c6	66 89 08	 mov	 WORD PTR [eax], cx

; 987  : 			}
; 988  : 		return (*this);

  000c9	8b c6		 mov	 eax, esi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx

; 989  : 		}

  000cd	c2 08 00	 ret	 8

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN72@append@2:
  000d0	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000d3	5d		 pop	 ebp
  000d4	33 c9		 xor	 ecx, ecx
  000d6	5f		 pop	 edi
  000d7	66 89 08	 mov	 WORD PTR [eax], cx

; 987  : 			}
; 988  : 		return (*this);

  000da	8b c6		 mov	 eax, esi
  000dc	5e		 pop	 esi
  000dd	5b		 pop	 ebx

; 989  : 		}

  000de	c2 08 00	 ret	 8

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

$LN78@append@2:
  000e1	8b d3		 mov	 edx, ebx
$LN79@append@2:
  000e3	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000e6	03 ed		 add	 ebp, ebp
  000e8	55		 push	 ebp
  000e9	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  000ed	2b c1		 sub	 eax, ecx
  000ef	55		 push	 ebp
  000f0	03 c0		 add	 eax, eax
  000f2	50		 push	 eax
  000f3	8d 14 4a	 lea	 edx, DWORD PTR [edx+ecx*2]
  000f6	52		 push	 edx
  000f7	e8 00 00 00 00	 call	 _memcpy_s
  000fc	83 c4 10	 add	 esp, 16			; 00000010H

; 986  : 			_Eos(_Num);

  000ff	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00103	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00106	72 02		 jb	 SHORT $LN94@append@2
  00108	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN94@append@2:
  0010a	33 c0		 xor	 eax, eax
  0010c	66 89 04 7b	 mov	 WORD PTR [ebx+edi*2], ax
$LN96@append@2:
  00110	5d		 pop	 ebp
  00111	5f		 pop	 edi

; 987  : 			}
; 988  : 		return (*this);

  00112	8b c6		 mov	 eax, esi
  00114	5e		 pop	 esi
  00115	5b		 pop	 ebx

; 989  : 		}

  00116	c2 08 00	 ret	 8
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	?begin@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?begin@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::begin, COMDAT
; _this$ = ecx

; 534  : 		return (iterator(_Nextnode(_Myhead), this));

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 535  : 		}

  00010	c2 04 00	 ret	 4
?begin@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@XZ ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::begin
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@

; 31   : 		}

  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN19@logic_erro
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN19@logic_erro:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 35   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN7@what
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 36   : 		}

  00009	c3		 ret	 0

; 35   : 		return (_Str.c_str());

$LN7@what:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 36   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN22@scalar@3
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN22@scalar@3:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN32@scalar@3
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN32@scalar@3:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1SecurityTokenInfo@CipherShed@@QAE@XZ		; CipherShed::SecurityTokenInfo::~SecurityTokenInfo
; Function compile flags: /Ogtpy
;	COMDAT ??1SecurityTokenInfo@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??1SecurityTokenInfo@CipherShed@@QAE@XZ PROC		; CipherShed::SecurityTokenInfo::~SecurityTokenInfo, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	83 7e 3c 10	 cmp	 DWORD PTR [esi+60], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $LN21@SecurityTo
  00009	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN21@SecurityTo:
  00015	c7 46 3c 0f 00
	00 00		 mov	 DWORD PTR [esi+60], 15	; 0000000fH
  0001c	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00023	c6 46 28 00	 mov	 BYTE PTR [esi+40], 0
  00027	83 7e 20 08	 cmp	 DWORD PTR [esi+32], 8
  0002b	72 0c		 jb	 SHORT $LN49@SecurityTo
  0002d	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00036	83 c4 04	 add	 esp, 4
$LN49@SecurityTo:
  00039	c7 46 20 07 00
	00 00		 mov	 DWORD PTR [esi+32], 7
  00040	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00047	33 d2		 xor	 edx, edx
  00049	66 89 56 0c	 mov	 WORD PTR [esi+12], dx
  0004d	5e		 pop	 esi
  0004e	c3		 ret	 0
??1SecurityTokenInfo@CipherShed@@QAE@XZ ENDP		; CipherShed::SecurityTokenInfo::~SecurityTokenInfo
_TEXT	ENDS
PUBLIC	??1SecurityTokenKeyfilePath@CipherShed@@QAE@XZ	; CipherShed::SecurityTokenKeyfilePath::~SecurityTokenKeyfilePath
; Function compile flags: /Ogtpy
;	COMDAT ??1SecurityTokenKeyfilePath@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??1SecurityTokenKeyfilePath@CipherShed@@QAE@XZ PROC	; CipherShed::SecurityTokenKeyfilePath::~SecurityTokenKeyfilePath, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00007	72 0c		 jb	 SHORT $LN22@SecurityTo@2
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN22@SecurityTo@2:
  00015	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  0001c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00023	33 c9		 xor	 ecx, ecx
  00025	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00029	5e		 pop	 esi
  0002a	c3		 ret	 0
??1SecurityTokenKeyfilePath@CipherShed@@QAE@XZ ENDP	; CipherShed::SecurityTokenKeyfilePath::~SecurityTokenKeyfilePath
_TEXT	ENDS
PUBLIC	??1SecurityTokenKeyfile@CipherShed@@QAE@XZ	; CipherShed::SecurityTokenKeyfile::~SecurityTokenKeyfile
; Function compile flags: /Ogtpy
;	COMDAT ??1SecurityTokenKeyfile@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??1SecurityTokenKeyfile@CipherShed@@QAE@XZ PROC		; CipherShed::SecurityTokenKeyfile::~SecurityTokenKeyfile, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00006	e8 00 00 00 00	 call	 ??1SecurityTokenInfo@CipherShed@@QAE@XZ
  0000b	83 7e 38 10	 cmp	 DWORD PTR [esi+56], 16	; 00000010H
  0000f	72 0c		 jb	 SHORT $LN22@SecurityTo@3
  00011	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001a	83 c4 04	 add	 esp, 4
$LN22@SecurityTo@3:
  0001d	c7 46 38 0f 00
	00 00		 mov	 DWORD PTR [esi+56], 15	; 0000000fH
  00024	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
  0002b	c6 46 24 00	 mov	 BYTE PTR [esi+36], 0
  0002f	83 7e 1c 08	 cmp	 DWORD PTR [esi+28], 8
  00033	72 0c		 jb	 SHORT $LN50@SecurityTo@3
  00035	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN50@SecurityTo@3:
  00041	c7 46 1c 07 00
	00 00		 mov	 DWORD PTR [esi+28], 7
  00048	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  0004f	33 d2		 xor	 edx, edx
  00051	66 89 56 08	 mov	 WORD PTR [esi+8], dx
  00055	5e		 pop	 esi
  00056	c3		 ret	 0
??1SecurityTokenKeyfile@CipherShed@@QAE@XZ ENDP		; CipherShed::SecurityTokenKeyfile::~SecurityTokenKeyfile
_TEXT	ENDS
PUBLIC	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 559  : 		_Tidy();

  00003	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN7@vector
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$LN7@vector:

; 560  : 		}

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	50		 push	 eax
  00016	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0001d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00024	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
  00033	5e		 pop	 esi
  00034	c3		 ret	 0
??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
PUBLIC	??1?$_List_val@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_val<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::~_List_val<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_val@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_val@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_val<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::~_List_val<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_val@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::~_List_val<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1046 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx

; 1047 : 		if (_Right.size() < _Roff)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Right$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 10	 mov	 ebp, DWORD PTR __Roff$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 6b 14	 cmp	 DWORD PTR [ebx+20], ebp
  00011	73 05		 jae	 SHORT $LN5@assign

; 1048 : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@assign:

; 1049 : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]

; 1050 : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b fd		 sub	 edi, ebp
  00021	3b c7		 cmp	 eax, edi
  00023	73 02		 jae	 SHORT $LN4@assign

; 1051 : 			_Num = _Count;	// trim _Num to size

  00025	8b f8		 mov	 edi, eax
$LN4@assign:

; 1052 : 
; 1053 : 		if (this == &_Right)

  00027	3b f3		 cmp	 esi, ebx
  00029	75 1f		 jne	 SHORT $LN3@assign

; 1054 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 fd		 add	 edi, ebp
  0002f	57		 push	 edi
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	55		 push	 ebp
  00038	6a 00		 push	 0
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	5b		 pop	 ebx

; 1061 : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign:

; 1055 : 		else if (_Grow(_Num))

  0004a	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0004d	76 05		 jbe	 SHORT $LN17@assign
  0004f	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@assign:
  00054	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00057	3b c7		 cmp	 eax, edi
  00059	73 1b		 jae	 SHORT $LN16@assign
  0005b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0005e	50		 push	 eax
  0005f	57		 push	 edi
  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00067	85 ff		 test	 edi, edi
$LN87@assign:
  00069	76 66		 jbe	 SHORT $LN86@assign

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

  0006b	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0006f	72 2f		 jb	 SHORT $LN64@assign
  00071	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00074	eb 2d		 jmp	 SHORT $LN65@assign

; 1055 : 		else if (_Grow(_Num))

$LN16@assign:
  00076	85 ff		 test	 edi, edi
  00078	75 ef		 jne	 SHORT $LN87@assign
  0007a	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0007d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00080	72 0f		 jb	 SHORT $LN58@assign
  00082	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00085	5f		 pop	 edi
  00086	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00089	8b c6		 mov	 eax, esi
  0008b	5e		 pop	 esi
  0008c	5d		 pop	 ebp
  0008d	5b		 pop	 ebx

; 1061 : 		}

  0008e	c2 0c 00	 ret	 12			; 0000000cH

; 1055 : 		else if (_Grow(_Num))

$LN58@assign:
  00091	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00098	8b c6		 mov	 eax, esi
  0009a	5e		 pop	 esi
  0009b	5d		 pop	 ebp
  0009c	5b		 pop	 ebx

; 1061 : 		}

  0009d	c2 0c 00	 ret	 12			; 0000000cH

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

$LN64@assign:
  000a0	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN65@assign:
  000a3	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000a6	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000a9	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000ac	72 04		 jb	 SHORT $LN68@assign
  000ae	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b0	eb 02		 jmp	 SHORT $LN69@assign
$LN68@assign:
  000b2	8b c3		 mov	 eax, ebx
$LN69@assign:
  000b4	57		 push	 edi
  000b5	03 d5		 add	 edx, ebp
  000b7	52		 push	 edx
  000b8	51		 push	 ecx
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 _memcpy_s
  000bf	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 			_Eos(_Num);

  000c2	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c9	72 02		 jb	 SHORT $LN82@assign
  000cb	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN82@assign:
  000cd	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
$LN86@assign:
  000d1	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  000d2	8b c6		 mov	 eax, esi
  000d4	5e		 pop	 esi
  000d5	5d		 pop	 ebp
  000d6	5b		 pop	 ebx

; 1061 : 		}

  000d7	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1046 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx

; 1047 : 		if (_Right.size() < _Roff)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Roff$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 5d 14	 cmp	 DWORD PTR [ebp+20], ebx
  00011	73 05		 jae	 SHORT $LN5@assign@2

; 1048 : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@assign@2:

; 1049 : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 7d 14	 mov	 edi, DWORD PTR [ebp+20]

; 1050 : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b fb		 sub	 edi, ebx
  00021	3b c7		 cmp	 eax, edi
  00023	73 02		 jae	 SHORT $LN4@assign@2

; 1051 : 			_Num = _Count;	// trim _Num to size

  00025	8b f8		 mov	 edi, eax
$LN4@assign@2:

; 1052 : 
; 1053 : 		if (this == &_Right)

  00027	3b f5		 cmp	 esi, ebp
  00029	75 1f		 jne	 SHORT $LN3@assign@2

; 1054 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 fb		 add	 edi, ebx
  0002f	57		 push	 edi
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00037	53		 push	 ebx
  00038	6a 00		 push	 0
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00041	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	5b		 pop	 ebx

; 1061 : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign@2:

; 1055 : 		else if (_Grow(_Num))

  0004a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00050	76 05		 jbe	 SHORT $LN17@assign@2
  00052	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@assign@2:
  00057	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005a	3b c7		 cmp	 eax, edi
  0005c	73 1b		 jae	 SHORT $LN16@assign@2
  0005e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00061	50		 push	 eax
  00062	57		 push	 edi
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0006a	85 ff		 test	 edi, edi
$LN91@assign@2:
  0006c	76 7a		 jbe	 SHORT $LN90@assign@2

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

  0006e	83 7d 18 08	 cmp	 DWORD PTR [ebp+24], 8
  00072	72 33		 jb	 SHORT $LN66@assign@2
  00074	8b 4d 04	 mov	 ecx, DWORD PTR [ebp+4]
  00077	eb 31		 jmp	 SHORT $LN67@assign@2

; 1055 : 		else if (_Grow(_Num))

$LN16@assign@2:
  00079	85 ff		 test	 edi, edi
  0007b	75 ef		 jne	 SHORT $LN91@assign@2
  0007d	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00080	83 f8 08	 cmp	 eax, 8
  00083	72 11		 jb	 SHORT $LN60@assign@2
  00085	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00088	33 c9		 xor	 ecx, ecx
  0008a	5f		 pop	 edi
  0008b	66 89 08	 mov	 WORD PTR [eax], cx

; 1059 : 			}
; 1060 : 		return (*this);

  0008e	8b c6		 mov	 eax, esi
  00090	5e		 pop	 esi
  00091	5d		 pop	 ebp
  00092	5b		 pop	 ebx

; 1061 : 		}

  00093	c2 0c 00	 ret	 12			; 0000000cH

; 1055 : 		else if (_Grow(_Num))

$LN60@assign@2:
  00096	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00099	33 c9		 xor	 ecx, ecx
  0009b	5f		 pop	 edi
  0009c	66 89 08	 mov	 WORD PTR [eax], cx

; 1059 : 			}
; 1060 : 		return (*this);

  0009f	8b c6		 mov	 eax, esi
  000a1	5e		 pop	 esi
  000a2	5d		 pop	 ebp
  000a3	5b		 pop	 ebx

; 1061 : 		}

  000a4	c2 0c 00	 ret	 12			; 0000000cH

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

$LN66@assign@2:
  000a7	8d 4d 04	 lea	 ecx, DWORD PTR [ebp+4]
$LN67@assign@2:
  000aa	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000ae	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  000b1	72 05		 jb	 SHORT $LN70@assign@2
  000b3	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  000b6	eb 02		 jmp	 SHORT $LN71@assign@2
$LN70@assign@2:
  000b8	8b c5		 mov	 eax, ebp
$LN71@assign@2:
  000ba	8b 54 24 18	 mov	 edx, DWORD PTR __Roff$[esp+12]
  000be	8d 0c 51	 lea	 ecx, DWORD PTR [ecx+edx*2]
  000c1	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  000c4	53		 push	 ebx
  000c5	51		 push	 ecx
  000c6	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000c9	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  000cc	52		 push	 edx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 _memcpy_s
  000d3	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 			_Eos(_Num);

  000d6	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000da	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000dd	72 03		 jb	 SHORT $LN86@assign@2
  000df	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN86@assign@2:
  000e2	33 c0		 xor	 eax, eax
  000e4	66 89 04 2b	 mov	 WORD PTR [ebx+ebp], ax
$LN90@assign@2:
  000e8	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  000e9	8b c6		 mov	 eax, esi
  000eb	5e		 pop	 esi
  000ec	5d		 pop	 ebp
  000ed	5b		 pop	 ebx

; 1061 : 		}

  000ee	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@XZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 641  : 		return (iterator(_Myfirst, this));

  00004	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  00015	76 05		 jbe	 SHORT $LN7@begin
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@begin:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 642  : 		}

  00028	c2 04 00	 ret	 4
?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@EV?$allocator@E@std@@@2@XZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::begin
_TEXT	ENDS
PUBLIC	??0?$_List_val@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z ; std::_List_val<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_List_val<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_List_val@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_val@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z PROC ; std::_List_val<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_List_val<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >, COMDAT
; _this$ = ecx

; 85   : 		{	// construct base, and allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN18@List_val
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 86   : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 85   : 		{	// construct base, and allocator from _Al

$LN18@List_val:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 86   : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_List_val@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@1@@Z ENDP ; std::_List_val<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_List_val<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1064 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp

; 1065 : 
; 1066 :  #if _HAS_ITERATOR_DEBUGGING
; 1067 : 		if (_Count != 0)
; 1068 : 			_DEBUG_POINTER(_Ptr);
; 1069 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1070 : 
; 1071 : 		if (_Inside(_Ptr))

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 ed		 test	 ebp, ebp
  0000b	74 46		 je	 SHORT $LN93@assign@3
  0000d	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 fa 10	 cmp	 edx, 16			; 00000010H
  00016	72 04		 jb	 SHORT $LN12@assign@3
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN13@assign@3
$LN12@assign@3:
  0001c	8b c8		 mov	 ecx, eax
$LN13@assign@3:
  0001e	3b e9		 cmp	 ebp, ecx
  00020	72 31		 jb	 SHORT $LN93@assign@3
  00022	83 fa 10	 cmp	 edx, 16			; 00000010H
  00025	72 04		 jb	 SHORT $LN16@assign@3
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN17@assign@3
$LN16@assign@3:
  0002b	8b c8		 mov	 ecx, eax
$LN17@assign@3:
  0002d	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00030	03 f9		 add	 edi, ecx
  00032	3b fd		 cmp	 edi, ebp
  00034	76 1d		 jbe	 SHORT $LN93@assign@3

; 1072 : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00036	83 fa 10	 cmp	 edx, 16			; 00000010H
  00039	72 02		 jb	 SHORT $LN20@assign@3
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@assign@3:
  0003d	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00041	51		 push	 ecx
  00042	2b e8		 sub	 ebp, eax
  00044	55		 push	 ebp
  00045	56		 push	 esi
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp

; 1080 : 		}

  00050	c2 08 00	 ret	 8
$LN93@assign@3:

; 1073 : 
; 1074 : 		if (_Grow(_Count))

  00053	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  00057	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0005a	76 05		 jbe	 SHORT $LN27@assign@3
  0005c	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN27@assign@3:
  00061	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00064	3b c7		 cmp	 eax, edi
  00066	73 20		 jae	 SHORT $LN26@assign@3
  00068	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0006b	52		 push	 edx
  0006c	57		 push	 edi
  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00074	85 ff		 test	 edi, edi
$LN94@assign@3:
  00076	76 56		 jbe	 SHORT $LN90@assign@3

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

  00078	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0007b	53		 push	 ebx
  0007c	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  0007f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00082	72 2c		 jb	 SHORT $LN74@assign@3
  00084	8b 03		 mov	 eax, DWORD PTR [ebx]
  00086	eb 2a		 jmp	 SHORT $LN75@assign@3

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN26@assign@3:
  00088	85 ff		 test	 edi, edi
  0008a	75 ea		 jne	 SHORT $LN94@assign@3
  0008c	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0008f	83 f8 10	 cmp	 eax, 16			; 00000010H
  00092	72 0e		 jb	 SHORT $LN68@assign@3
  00094	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00097	5f		 pop	 edi
  00098	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  0009b	8b c6		 mov	 eax, esi
  0009d	5e		 pop	 esi
  0009e	5d		 pop	 ebp

; 1080 : 		}

  0009f	c2 08 00	 ret	 8

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN68@assign@3:
  000a2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000a5	5f		 pop	 edi
  000a6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  000a9	8b c6		 mov	 eax, esi
  000ab	5e		 pop	 esi
  000ac	5d		 pop	 ebp

; 1080 : 		}

  000ad	c2 08 00	 ret	 8

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

$LN74@assign@3:
  000b0	8b c3		 mov	 eax, ebx
$LN75@assign@3:
  000b2	57		 push	 edi
  000b3	55		 push	 ebp
  000b4	51		 push	 ecx
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _memcpy_s
  000bb	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 			_Eos(_Count);

  000be	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c2	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c5	72 02		 jb	 SHORT $LN88@assign@3
  000c7	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN88@assign@3:
  000c9	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
  000cd	5b		 pop	 ebx
$LN90@assign@3:
  000ce	5f		 pop	 edi

; 1078 : 			}
; 1079 : 		return (*this);

  000cf	8b c6		 mov	 eax, esi
  000d1	5e		 pop	 esi
  000d2	5d		 pop	 ebp

; 1080 : 		}

  000d3	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1064 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 1065 : 
; 1066 :  #if _HAS_ITERATOR_DEBUGGING
; 1067 : 		if (_Count != 0)
; 1068 : 			_DEBUG_POINTER(_Ptr);
; 1069 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1070 : 
; 1071 : 		if (_Inside(_Ptr))

  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00008	57		 push	 edi
  00009	85 c9		 test	 ecx, ecx
  0000b	74 49		 je	 SHORT $LN97@assign@4
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 08	 cmp	 edi, 8
  00016	72 04		 jb	 SHORT $LN12@assign@4
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN13@assign@4
$LN12@assign@4:
  0001c	8b d0		 mov	 edx, eax
$LN13@assign@4:
  0001e	3b ca		 cmp	 ecx, edx
  00020	72 34		 jb	 SHORT $LN97@assign@4
  00022	83 ff 08	 cmp	 edi, 8
  00025	72 04		 jb	 SHORT $LN16@assign@4
  00027	8b 10		 mov	 edx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN17@assign@4
$LN16@assign@4:
  0002b	8b d0		 mov	 edx, eax
$LN17@assign@4:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	8d 14 5a	 lea	 edx, DWORD PTR [edx+ebx*2]
  00033	3b d1		 cmp	 edx, ecx
  00035	76 1f		 jbe	 SHORT $LN97@assign@4

; 1072 : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00037	83 ff 08	 cmp	 edi, 8
  0003a	72 02		 jb	 SHORT $LN20@assign@4
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@assign@4:
  0003e	8b 54 24 14	 mov	 edx, DWORD PTR __Count$[esp+8]
  00042	2b c8		 sub	 ecx, eax
  00044	52		 push	 edx
  00045	d1 f9		 sar	 ecx, 1
  00047	51		 push	 ecx
  00048	56		 push	 esi
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx

; 1080 : 		}

  00053	c2 08 00	 ret	 8
$LN97@assign@4:

; 1073 : 
; 1074 : 		if (_Grow(_Count))

  00056	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0005a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00060	76 05		 jbe	 SHORT $LN27@assign@4
  00062	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN27@assign@4:
  00067	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0006a	3b c7		 cmp	 eax, edi
  0006c	73 21		 jae	 SHORT $LN26@assign@4
  0006e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00071	50		 push	 eax
  00072	57		 push	 edi
  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0007a	85 ff		 test	 edi, edi
$LN98@assign@4:
  0007c	76 67		 jbe	 SHORT $LN94@assign@4

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

  0007e	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00081	55		 push	 ebp
  00082	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  00085	83 f9 08	 cmp	 ecx, 8
  00088	72 31		 jb	 SHORT $LN76@assign@4
  0008a	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  0008d	eb 2e		 jmp	 SHORT $LN77@assign@4

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN26@assign@4:
  0008f	85 ff		 test	 edi, edi
  00091	75 e9		 jne	 SHORT $LN98@assign@4
  00093	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00096	83 f8 08	 cmp	 eax, 8
  00099	72 10		 jb	 SHORT $LN70@assign@4
  0009b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009e	33 c9		 xor	 ecx, ecx
  000a0	5f		 pop	 edi
  000a1	66 89 08	 mov	 WORD PTR [eax], cx

; 1078 : 			}
; 1079 : 		return (*this);

  000a4	8b c6		 mov	 eax, esi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx

; 1080 : 		}

  000a8	c2 08 00	 ret	 8

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN70@assign@4:
  000ab	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000ae	33 c9		 xor	 ecx, ecx
  000b0	5f		 pop	 edi
  000b1	66 89 08	 mov	 WORD PTR [eax], cx

; 1078 : 			}
; 1079 : 		return (*this);

  000b4	8b c6		 mov	 eax, esi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx

; 1080 : 		}

  000b8	c2 08 00	 ret	 8

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

$LN76@assign@4:
  000bb	8b c5		 mov	 eax, ebp
$LN77@assign@4:
  000bd	8b 54 24 14	 mov	 edx, DWORD PTR __Ptr$[esp+12]
  000c1	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  000c4	53		 push	 ebx
  000c5	52		 push	 edx
  000c6	03 c9		 add	 ecx, ecx
  000c8	51		 push	 ecx
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 			_Eos(_Count);

  000d2	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000d6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000d9	72 03		 jb	 SHORT $LN92@assign@4
  000db	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN92@assign@4:
  000de	33 d2		 xor	 edx, edx
  000e0	66 89 14 2b	 mov	 WORD PTR [ebx+ebp], dx
  000e4	5d		 pop	 ebp
$LN94@assign@4:
  000e5	5f		 pop	 edi

; 1078 : 			}
; 1079 : 		return (*this);

  000e6	8b c6		 mov	 eax, esi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx

; 1080 : 		}

  000ea	c2 08 00	 ret	 8
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	??1_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node::~_Node
; Function compile flags: /Ogtpy
;	COMDAT ??1_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node::~_Node, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	83 7e 20 08	 cmp	 DWORD PTR [esi+32], 8
  00007	72 0c		 jb	 SHORT $LN24@Node
  00009	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN24@Node:
  00015	c7 46 20 07 00
	00 00		 mov	 DWORD PTR [esi+32], 7
  0001c	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00023	33 c9		 xor	 ecx, ecx
  00025	66 89 4e 0c	 mov	 WORD PTR [esi+12], cx
  00029	5e		 pop	 esi
  0002a	c3		 ret	 0
??1_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node::~_Node
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 946  : 		return (append(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append

; 947  : 		}

  0000e	c2 04 00	 ret	 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 992  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 993  : 		_DEBUG_POINTER(_Ptr);
; 994  : 		return (append(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@append@3:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL5@append@3
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 995  : 		}

  00028	c2 04 00	 ret	 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 721  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 722  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 723  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 724  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 721  : 		{	// construct by copying _Right

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 722  : 		_Tidy();
; 723  : 		assign(_Right, 0, npos);

  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR __Right$[esp]
  00007	33 c0		 xor	 eax, eax
  00009	6a ff		 push	 -1
  0000b	50		 push	 eax
  0000c	51		 push	 ecx
  0000d	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	8b ce		 mov	 ecx, esi
  0001d	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 724  : 		}

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::front
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ
_TEXT	SEGMENT
?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::front, COMDAT
; _this$ = ecx

; 789  : 		{	// return first element of mutable sequence

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 790  : 		return (*begin());

  00004	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00007	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0000a	76 05		 jbe	 SHORT $LN9@front
  0000c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@front:
  00011	8b 36		 mov	 esi, DWORD PTR [esi]
  00013	85 f6		 test	 esi, esi
  00015	75 14		 jne	 SHORT $LN42@front
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN39@front:
  0001c	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0001f	72 05		 jb	 SHORT $LN43@front
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN43@front:
  00026	8b c7		 mov	 eax, edi
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 791  : 		}

  0002a	c3		 ret	 0
$LN42@front:

; 790  : 		return (*begin());

  0002b	8b 36		 mov	 esi, DWORD PTR [esi]
  0002d	eb ed		 jmp	 SHORT $LN39@front
?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::front
_TEXT	ENDS
PUBLIC	??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >, COMDAT
; _this$ = ecx

; 436  : 		{	// construct empty list

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	6a 04		 push	 4
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	83 c4 04	 add	 esp, 4
  00032	85 c0		 test	 eax, eax
  00034	74 04		 je	 SHORT $LN23@list
  00036	89 30		 mov	 DWORD PTR [eax], esi
  00038	eb 02		 jmp	 SHORT $LN24@list
$LN23@list:
  0003a	33 c0		 xor	 eax, eax
$LN24@list:
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	8b ce		 mov	 ecx, esi
  00040	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00048	e8 00 00 00 00	 call	 ?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@XZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Buynode
  0004d	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00050	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 437  : 		}

  00057	8b c6		 mov	 eax, esi
  00059	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5e		 pop	 esi
  00066	83 c4 10	 add	 esp, 16			; 00000010H
  00069	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_val@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ
__ehhandler$??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1083 : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 1084 : 		_DEBUG_POINTER(_Ptr);
; 1085 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@assign@5:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@assign@5
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 1086 : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1083 : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 1084 : 		_DEBUG_POINTER(_Ptr);
; 1085 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@assign@6:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL5@assign@6
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 1086 : 		}

  00028	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	??_G_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEPAXI@Z ; std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_G_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEPAXI@Z PROC ; std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	83 7e 20 08	 cmp	 DWORD PTR [esi+32], 8
  00007	72 0c		 jb	 SHORT $LN26@scalar@4
  00009	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN26@scalar@4:
  00015	33 c9		 xor	 ecx, ecx
  00017	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0001c	c7 46 20 07 00
	00 00		 mov	 DWORD PTR [esi+32], 7
  00023	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  0002a	66 89 4e 0c	 mov	 WORD PTR [esi+12], cx
  0002e	74 09		 je	 SHORT $LN36@scalar@4
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00036	83 c4 04	 add	 esp, 4
$LN36@scalar@4:
  00039	8b c6		 mov	 eax, esi
  0003b	5e		 pop	 esi
  0003c	c2 04 00	 ret	 4
??_G_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEPAXI@Z ENDP ; std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=, COMDAT
; _this$ = ecx

; 931  : 		return (append(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append

; 932  : 		}

  0000e	c2 04 00	 ret	 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=, COMDAT
; _this$ = ecx

; 935  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 936  : 		return (append(_Ptr));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL7@operator@10:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL7@operator@10
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 937  : 		}

  00028	c2 04 00	 ret	 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
_TEXT	ENDS
PUBLIC	??0SecurityTokenKeyfilePath@CipherShed@@QAE@ABU01@@Z ; CipherShed::SecurityTokenKeyfilePath::SecurityTokenKeyfilePath
; Function compile flags: /Ogtpy
;	COMDAT ??0SecurityTokenKeyfilePath@CipherShed@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0SecurityTokenKeyfilePath@CipherShed@@QAE@ABU01@@Z PROC ; CipherShed::SecurityTokenKeyfilePath::SecurityTokenKeyfilePath, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR ___that$[esp]
  00007	33 c0		 xor	 eax, eax
  00009	6a ff		 push	 -1
  0000b	50		 push	 eax
  0000c	51		 push	 ecx
  0000d	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	8b ce		 mov	 ecx, esi
  0001d	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	c2 04 00	 ret	 4
??0SecurityTokenKeyfilePath@CipherShed@@QAE@ABU01@@Z ENDP ; CipherShed::SecurityTokenKeyfilePath::SecurityTokenKeyfilePath
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@std@@QAE@XZ:PROC			; std::exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0002d	33 c0		 xor	 eax, eax
  0002f	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00038	6a ff		 push	 -1
  0003a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0003d	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00044	50		 push	 eax
  00045	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  00049	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004c	8b 44 24 24	 mov	 eax, DWORD PTR __Message$[esp+28]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 27   : 		}

  00056	8b c6		 mov	 eax, esi
  00058	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5e		 pop	 esi
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogtpy
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 110  : 		}

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN21@length_err
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN21@length_err:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN24@scalar@5
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN24@scalar@5:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN34@scalar@5
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN34@scalar@5:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0SecurityTokenKeyfilePath@CipherShed@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; CipherShed::SecurityTokenKeyfilePath::SecurityTokenKeyfilePath
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\securitytoken.h
;	COMDAT ??0SecurityTokenKeyfilePath@CipherShed@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
_TEXT	SEGMENT
_path$ = 8						; size = 4
??0SecurityTokenKeyfilePath@CipherShed@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z PROC ; CipherShed::SecurityTokenKeyfilePath::SecurityTokenKeyfilePath, COMDAT
; _this$ = ecx

; 66   : 		SecurityTokenKeyfilePath (const wstring &path) : Path (path) { }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR _path$[esp]
  00007	33 c0		 xor	 eax, eax
  00009	6a ff		 push	 -1
  0000b	50		 push	 eax
  0000c	51		 push	 ecx
  0000d	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	8b ce		 mov	 ecx, esi
  0001d	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	c2 04 00	 ret	 4
??0SecurityTokenKeyfilePath@CipherShed@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ENDP ; CipherShed::SecurityTokenKeyfilePath::SecurityTokenKeyfilePath
_TEXT	ENDS
PUBLIC	??BSecurityTokenKeyfilePath@CipherShed@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; CipherShed::SecurityTokenKeyfilePath::operator std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??BSecurityTokenKeyfilePath@CipherShed@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
_TEXT	SEGMENT
$T130945 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??BSecurityTokenKeyfilePath@CipherShed@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ PROC ; CipherShed::SecurityTokenKeyfilePath::operator std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 67   : 		operator wstring () const { return Path; }

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	33 c0		 xor	 eax, eax
  00008	6a ff		 push	 -1
  0000a	50		 push	 eax
  0000b	33 d2		 xor	 edx, edx
  0000d	51		 push	 ecx
  0000e	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00015	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00018	8b ce		 mov	 ecx, esi
  0001a	89 44 24 10	 mov	 DWORD PTR $T130945[esp+20], eax
  0001e	66 89 56 04	 mov	 WORD PTR [esi+4], dx
  00022	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	59		 pop	 ecx
  0002b	c2 04 00	 ret	 4
??BSecurityTokenKeyfilePath@CipherShed@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ENDP ; CipherShed::SecurityTokenKeyfilePath::operator std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 652  : 		_Tidy();
; 653  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$LL37@basic_stri@3:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL37@basic_stri@3
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 654  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 652  : 		_Tidy();
; 653  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c0		 xor	 eax, eax
  00009	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00010	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00017	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0001b	8b c2		 mov	 eax, edx
  0001d	57		 push	 edi
  0001e	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
$LL39@basic_stri@4:
  00021	66 8b 08	 mov	 cx, WORD PTR [eax]
  00024	83 c0 02	 add	 eax, 2
  00027	66 85 c9	 test	 cx, cx
  0002a	75 f5		 jne	 SHORT $LL39@basic_stri@4
  0002c	2b c7		 sub	 eax, edi
  0002e	d1 f8		 sar	 eax, 1
  00030	50		 push	 eax
  00031	52		 push	 edx
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00039	5f		 pop	 edi

; 654  : 		}

  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlen
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T131292 = -80						; size = 28
$T131291 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 44	 sub	 esp, 68			; 00000044H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 48	 lea	 eax, DWORD PTR __$EHRec$[esp+84]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

  00023	6a 12		 push	 18			; 00000012H
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0002a	8d 4c 24 0c	 lea	 ecx, DWORD PTR $T131292[esp+92]
  0002e	c7 44 24 24 0f
	00 00 00	 mov	 DWORD PTR $T131292[esp+116], 15 ; 0000000fH
  00036	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T131292[esp+112], 0
  0003e	c6 44 24 10 00	 mov	 BYTE PTR $T131292[esp+96], 0
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00048	8d 44 24 04	 lea	 eax, DWORD PTR $T131292[esp+84]
  0004c	50		 push	 eax
  0004d	8d 4c 24 24	 lea	 ecx, DWORD PTR $T131291[esp+88]
  00051	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+96], 0
  00059	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0005e	68 00 00 00 00	 push	 OFFSET __TI3?AVlength_error@std@@
  00063	8d 4c 24 24	 lea	 ecx, DWORD PTR $T131291[esp+88]
  00067	51		 push	 ecx
  00068	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR $T131291[esp+92], OFFSET ??_7length_error@std@@6B@
  00070	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN44@Xlen:
  00075	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T131292[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 bc	 lea	 eax, DWORD PTR [edx-68]
  0000f	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlen
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	8b 7c 24 20	 mov	 edi, DWORD PTR ___that$[esp+24]
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00033	33 d2		 xor	 edx, edx
  00035	6a ff		 push	 -1
  00037	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00040	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00043	52		 push	 edx
  00044	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0004b	89 51 14	 mov	 DWORD PTR [ecx+20], edx
  0004e	50		 push	 eax
  0004f	89 54 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], edx
  00053	88 51 04	 mov	 BYTE PTR [ecx+4], dl
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	8b c6		 mov	 eax, esi
  0005d	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00068	59		 pop	 ecx
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Ogtpy
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$0
__ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
_TEXT	SEGMENT
$T131578 = -44						; size = 4
$T131575 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 53   : 	{	// return string + NTCS

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 54   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 4c 24 40	 mov	 ecx, DWORD PTR __Left$[esp+52]
  00029	33 ff		 xor	 edi, edi
  0002b	6a ff		 push	 -1
  0002d	57		 push	 edi
  0002e	33 c0		 xor	 eax, eax
  00030	51		 push	 ecx
  00031	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T131575[esp+68]
  00035	89 7c 24 18	 mov	 DWORD PTR $T131578[esp+68], edi
  00039	c7 44 24 34 07
	00 00 00	 mov	 DWORD PTR $T131575[esp+92], 7
  00041	89 7c 24 30	 mov	 DWORD PTR $T131575[esp+88], edi
  00045	66 89 44 24 20	 mov	 WORD PTR $T131575[esp+72], ax
  0004a	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0004f	8b 54 24 44	 mov	 edx, DWORD PTR __Right$[esp+52]
  00053	8b c2		 mov	 eax, edx
  00055	89 7c 24 34	 mov	 DWORD PTR __$EHRec$[esp+64], edi
  00059	8d 70 02	 lea	 esi, DWORD PTR [eax+2]
  0005c	8d 64 24 00	 npad	 4
$LL96@operator@11:
  00060	66 8b 08	 mov	 cx, WORD PTR [eax]
  00063	83 c0 02	 add	 eax, 2
  00066	66 3b cf	 cmp	 cx, di
  00069	75 f5		 jne	 SHORT $LL96@operator@11
  0006b	2b c6		 sub	 eax, esi
  0006d	d1 f8		 sar	 eax, 1
  0006f	50		 push	 eax
  00070	52		 push	 edx
  00071	8d 4c 24 18	 lea	 ecx, DWORD PTR $T131575[esp+64]
  00075	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  0007a	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  0007e	6a ff		 push	 -1
  00080	57		 push	 edi
  00081	33 d2		 xor	 edx, edx
  00083	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  0008a	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0008d	50		 push	 eax
  0008e	8b ce		 mov	 ecx, esi
  00090	66 89 56 04	 mov	 WORD PTR [esi+4], dx
  00094	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00099	83 7c 24 28 08	 cmp	 DWORD PTR $T131575[esp+80], 8
  0009e	72 0d		 jb	 SHORT $LN97@operator@11
  000a0	8b 44 24 14	 mov	 eax, DWORD PTR $T131575[esp+60]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000aa	83 c4 04	 add	 esp, 4
$LN97@operator@11:
  000ad	8b c6		 mov	 eax, esi

; 55   : 	}

  000af	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	83 c4 2c	 add	 esp, 44			; 0000002cH
  000c0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T131575[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z$0
__ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
_TEXT	SEGMENT
$T131979 = -44						; size = 4
$T131976 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 23   : 	{	// return string + string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 24   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 4c 24 40	 mov	 ecx, DWORD PTR __Left$[esp+52]
  00029	33 ff		 xor	 edi, edi
  0002b	6a ff		 push	 -1
  0002d	57		 push	 edi
  0002e	33 c0		 xor	 eax, eax
  00030	51		 push	 ecx
  00031	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T131976[esp+68]
  00035	89 7c 24 18	 mov	 DWORD PTR $T131979[esp+68], edi
  00039	c7 44 24 34 07
	00 00 00	 mov	 DWORD PTR $T131976[esp+92], 7
  00041	89 7c 24 30	 mov	 DWORD PTR $T131976[esp+88], edi
  00045	66 89 44 24 20	 mov	 WORD PTR $T131976[esp+72], ax
  0004a	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0004f	8b 54 24 44	 mov	 edx, DWORD PTR __Right$[esp+52]
  00053	6a ff		 push	 -1
  00055	57		 push	 edi
  00056	52		 push	 edx
  00057	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T131976[esp+68]
  0005b	89 7c 24 40	 mov	 DWORD PTR __$EHRec$[esp+76], edi
  0005f	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00064	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00068	6a ff		 push	 -1
  0006a	33 c9		 xor	 ecx, ecx
  0006c	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00073	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00076	57		 push	 edi
  00077	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  0007b	50		 push	 eax
  0007c	8b ce		 mov	 ecx, esi
  0007e	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00083	83 7c 24 28 08	 cmp	 DWORD PTR $T131976[esp+80], 8
  00088	72 0d		 jb	 SHORT $LN94@operator@12
  0008a	8b 54 24 14	 mov	 edx, DWORD PTR $T131976[esp+60]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00094	83 c4 04	 add	 esp, 4
$LN94@operator@12:
  00097	8b c6		 mov	 eax, esi

; 25   : 	}

  00099	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  0009d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a4	59		 pop	 ecx
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	83 c4 2c	 add	 esp, 44			; 0000002cH
  000aa	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T131976[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$_Destroy@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node>, COMDAT

; 58   : 	{	// destroy object at _Ptr

  00000	56		 push	 esi

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	83 7e 20 08	 cmp	 DWORD PTR [esi+32], 8
  00009	72 0c		 jb	 SHORT $LN28@Destroy
  0000b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
$LN28@Destroy:
  00017	c7 46 20 07 00
	00 00		 mov	 DWORD PTR [esi+32], 7
  0001e	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00025	33 c9		 xor	 ecx, ecx
  00027	66 89 4e 0c	 mov	 WORD PTR [esi+12], cx
  0002b	5e		 pop	 esi

; 60   : 	}

  0002c	c3		 ret	 0
??$_Destroy@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node>
_TEXT	ENDS
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Incsize@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Incsize
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Incsize@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Incsize@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEXI@Z$0
__ehfuncinfo$?_Incsize@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Incsize@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Incsize@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
$T132608 = -80						; size = 28
$T132607 = -52						; size = 40
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
?_Incsize@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEXI@Z PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Incsize, COMDAT
; _this$ = ecx

; 1239 : 		{	// alter element count, with checking

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Incsize@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEXI@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 44	 sub	 esp, 68			; 00000044H
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 4c	 lea	 eax, DWORD PTR __$EHRec$[esp+88]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1240 : 		if (max_size() - _Mysize < _Count)

  00024	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00027	8b 54 24 5c	 mov	 edx, DWORD PTR __Count$[esp+84]
  0002b	be 49 92 24 09	 mov	 esi, 153391689		; 09249249H
  00030	2b f0		 sub	 esi, eax
  00032	3b f2		 cmp	 esi, edx
  00034	73 52		 jae	 SHORT $LN1@Incsize

; 1241 : 			_THROW(length_error, "list<T> too long");

  00036	6a 10		 push	 16			; 00000010H
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0003d	8d 4c 24 10	 lea	 ecx, DWORD PTR $T132608[esp+96]
  00041	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T132608[esp+120], 15 ; 0000000fH
  00049	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T132608[esp+116], 0
  00051	c6 44 24 14 00	 mov	 BYTE PTR $T132608[esp+100], 0
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	8d 44 24 08	 lea	 eax, DWORD PTR $T132608[esp+88]
  0005f	50		 push	 eax
  00060	8d 4c 24 28	 lea	 ecx, DWORD PTR $T132607[esp+92]
  00064	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+100], 0
  0006c	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00071	68 00 00 00 00	 push	 OFFSET __TI3?AVlength_error@std@@
  00076	8d 4c 24 28	 lea	 ecx, DWORD PTR $T132607[esp+92]
  0007a	51		 push	 ecx
  0007b	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR $T132607[esp+96], OFFSET ??_7length_error@std@@6B@
  00083	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@Incsize:

; 1242 : 		_Mysize += _Count;

  00088	03 c2		 add	 eax, edx
  0008a	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 1243 : 		}

  0008d	8b 4c 24 4c	 mov	 ecx, DWORD PTR __$EHRec$[esp+88]
  00091	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00098	59		 pop	 ecx
  00099	5e		 pop	 esi
  0009a	83 c4 50	 add	 esp, 80			; 00000050H
  0009d	c2 04 00	 ret	 4
$LN51@Incsize:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Incsize@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEXI@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T132608[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Incsize@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEXI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 b8	 lea	 eax, DWORD PTR [edx-72]
  0000f	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Incsize@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEXI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Incsize@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEXI@Z ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Incsize
PUBLIC	??$_Construct@USecurityTokenKeyfilePath@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfilePath@CipherShed@@ABU12@@Z ; std::_Construct<CipherShed::SecurityTokenKeyfilePath,CipherShed::SecurityTokenKeyfilePath>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$_Construct@USecurityTokenKeyfilePath@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfilePath@CipherShed@@ABU12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@USecurityTokenKeyfilePath@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfilePath@CipherShed@@ABU12@@Z$0
__ehfuncinfo$??$_Construct@USecurityTokenKeyfilePath@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfilePath@CipherShed@@ABU12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@USecurityTokenKeyfilePath@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfilePath@CipherShed@@ABU12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@USecurityTokenKeyfilePath@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfilePath@CipherShed@@ABU12@@Z
_TEXT	SEGMENT
$T132783 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@USecurityTokenKeyfilePath@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfilePath@CipherShed@@ABU12@@Z PROC ; std::_Construct<CipherShed::SecurityTokenKeyfilePath,CipherShed::SecurityTokenKeyfilePath>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$_Construct@USecurityTokenKeyfilePath@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfilePath@CipherShed@@ABU12@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00014	33 c4		 xor	 eax, esp
  00016	50		 push	 eax
  00017	8d 44 24 08	 lea	 eax, DWORD PTR __$EHRec$[esp+20]
  0001b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 51   : 	void _FARQ *_Vptr = _Ptr;

  00021	8b 4c 24 18	 mov	 ecx, DWORD PTR __Ptr$[esp+16]
  00025	89 4c 24 18	 mov	 DWORD PTR __Vptr$[esp+16], ecx

; 52   : 	::new (_Vptr) _T1(_Val);

  00029	89 4c 24 04	 mov	 DWORD PTR $T132783[esp+20], ecx
  0002d	33 c0		 xor	 eax, eax
  0002f	89 44 24 10	 mov	 DWORD PTR __$EHRec$[esp+28], eax
  00033	3b c8		 cmp	 ecx, eax
  00035	74 1d		 je	 SHORT $LN3@Construct@2
  00037	6a ff		 push	 -1
  00039	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0003c	50		 push	 eax
  0003d	8b 44 24 24	 mov	 eax, DWORD PTR __Val$[esp+24]
  00041	33 d2		 xor	 edx, edx
  00043	c7 41 18 07 00
	00 00		 mov	 DWORD PTR [ecx+24], 7
  0004a	50		 push	 eax
  0004b	66 89 51 04	 mov	 WORD PTR [ecx+4], dx
  0004f	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
$LN3@Construct@2:

; 53   : 	}

  00054	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	83 c4 10	 add	 esp, 16			; 00000010H
  00063	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@USecurityTokenKeyfilePath@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfilePath@CipherShed@@ABU12@@Z$0:
  00000	8b 45 04	 mov	 eax, DWORD PTR __Vptr$[ebp-4]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T132783[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@USecurityTokenKeyfilePath@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfilePath@CipherShed@@ABU12@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@USecurityTokenKeyfilePath@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfilePath@CipherShed@@ABU12@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@USecurityTokenKeyfilePath@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfilePath@CipherShed@@ABU12@@Z ENDP ; std::_Construct<CipherShed::SecurityTokenKeyfilePath,CipherShed::SecurityTokenKeyfilePath>
PUBLIC	?_Buy@?$vector@EV?$allocator@E@std@@@std@@IAE_NI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@EV?$allocator@E@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@EV?$allocator@E@std@@@std@@IAE_NI@Z PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

  00000	56		 push	 esi

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00001	33 c0		 xor	 eax, eax
  00003	57		 push	 edi

; 1104 : 		if (_Capacity == 0)

  00004	8b 7c 24 0c	 mov	 edi, DWORD PTR __Capacity$[esp+4]
  00008	8b f1		 mov	 esi, ecx
  0000a	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0000d	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00010	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00013	3b f8		 cmp	 edi, eax
  00015	75 07		 jne	 SHORT $LN4@Buy
  00017	5f		 pop	 edi

; 1105 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	5e		 pop	 esi

; 1115 : 		}

  0001b	c2 04 00	 ret	 4
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

  0001e	83 ff ff	 cmp	 edi, -1
  00021	76 05		 jbe	 SHORT $LN2@Buy

; 1107 : 			_Xlen();	// result too long

  00023	e8 00 00 00 00	 call	 ?_Xlen@?$vector@EV?$allocator@E@std@@@std@@KAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlen
$LN2@Buy:

; 1108 : 		else
; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

  00028	50		 push	 eax
  00029	57		 push	 edi
  0002a	e8 00 00 00 00	 call	 ??$_Allocate@E@std@@YAPAEIPAE@Z ; std::_Allocate<unsigned char>
  0002f	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 1111 : 			_Mylast = _Myfirst;

  00032	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00035	83 c4 08	 add	 esp, 8

; 1112 : 			_Myend = _Myfirst + _Capacity;

  00038	03 c7		 add	 eax, edi
  0003a	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0003d	5f		 pop	 edi

; 1113 : 			}
; 1114 : 		return (true);

  0003e	b0 01		 mov	 al, 1
  00040	5e		 pop	 esi

; 1115 : 		}

  00041	c2 04 00	 ret	 4
$LN15@Buy:
?_Buy@?$vector@EV?$allocator@E@std@@@std@@IAE_NI@Z ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@@Z ; std::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

  00000	56		 push	 esi

; 160  : 		_Destroy(_Ptr);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	83 7e 20 08	 cmp	 DWORD PTR [esi+32], 8
  00009	72 0c		 jb	 SHORT $LN30@destroy
  0000b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
$LN30@destroy:
  00017	c7 46 20 07 00
	00 00		 mov	 DWORD PTR [esi+32], 7
  0001e	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00025	33 c9		 xor	 ecx, ecx
  00027	66 89 4e 0c	 mov	 WORD PTR [esi+12], cx
  0002b	5e		 pop	 esi

; 161  : 		}

  0002c	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	?erase@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?erase@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z
_TEXT	SEGMENT
$T133259 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?erase@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::erase, COMDAT
; _this$ = ecx

; 786  : 		{	// erase element at _Where

  00000	83 ec 08	 sub	 esp, 8

; 787  : 
; 788  :  #if _HAS_ITERATOR_DEBUGGING
; 789  : 		if (_Where._Mycont != this || _Where._Ptr == _Myhead)
; 790  : 			_DEBUG_ERROR("list erase iterator outside range");
; 791  : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 792  : 		_Orphan_ptr(*this, _Pnode);
; 793  : 
; 794  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 795  : 		_Nodeptr _Pnode = (_Where++)._Mynode();

  00003	8b 44 24 10	 mov	 eax, DWORD PTR __Where$[esp+4]
  00007	56		 push	 esi
  00008	8b 74 24 18	 mov	 esi, DWORD PTR __Where$[esp+12]
  0000c	57		 push	 edi
  0000d	8b f9		 mov	 edi, ecx
  0000f	89 44 24 08	 mov	 DWORD PTR $T133259[esp+16], eax
  00013	85 c0		 test	 eax, eax
  00015	75 0d		 jne	 SHORT $LN102@erase@3
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0001c	8b 44 24 18	 mov	 eax, DWORD PTR __Where$[esp+12]
  00020	85 c0		 test	 eax, eax
  00022	74 04		 je	 SHORT $LN22@erase@3
$LN102@erase@3:
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	eb 02		 jmp	 SHORT $LN23@erase@3
$LN22@erase@3:
  00028	33 c0		 xor	 eax, eax
$LN23@erase@3:
  0002a	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Where$[esp+16]
  0002e	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00031	75 05		 jne	 SHORT $LN8@erase@3
  00033	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN8@erase@3:
  00038	8b 54 24 1c	 mov	 edx, DWORD PTR __Where$[esp+16]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	89 44 24 1c	 mov	 DWORD PTR __Where$[esp+16], eax

; 796  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 797  : 
; 798  : 		if (_Pnode != _Myhead)

  00042	3b 77 14	 cmp	 esi, DWORD PTR [edi+20]
  00045	74 41		 je	 SHORT $LN1@erase@3

; 799  : 			{	// not list head, safe to erase
; 800  : 			_Nextnode(_Prevnode(_Pnode)) = _Nextnode(_Pnode);

  00047	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0004a	8b 16		 mov	 edx, DWORD PTR [esi]
  0004c	89 11		 mov	 DWORD PTR [ecx], edx

; 801  : 			_Prevnode(_Nextnode(_Pnode)) = _Prevnode(_Pnode);

  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00053	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 802  : 			this->_Alnod.destroy(_Pnode);

  00056	83 7e 20 08	 cmp	 DWORD PTR [esi+32], 8
  0005a	72 0c		 jb	 SHORT $LN71@erase@3
  0005c	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00065	83 c4 04	 add	 esp, 4
$LN71@erase@3:
  00068	33 c0		 xor	 eax, eax
  0006a	c7 46 20 07 00
	00 00		 mov	 DWORD PTR [esi+32], 7
  00071	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 803  : 			this->_Alnod.deallocate(_Pnode, 1);

  00078	56		 push	 esi
  00079	66 89 46 0c	 mov	 WORD PTR [esi+12], ax
  0007d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00082	83 c4 04	 add	 esp, 4

; 804  : 			--_Mysize;

  00085	ff 4f 18	 dec	 DWORD PTR [edi+24]
$LN1@erase@3:

; 805  : 			}
; 806  : 		return (_Make_iter(_Where));

  00088	8b 17		 mov	 edx, DWORD PTR [edi]
  0008a	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  0008e	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Where$[esp+16]
  00092	5f		 pop	 edi
  00093	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00096	89 10		 mov	 DWORD PTR [eax], edx
  00098	5e		 pop	 esi

; 807  : 		}

  00099	83 c4 08	 add	 esp, 8
  0009c	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::erase
_TEXT	ENDS
PUBLIC	?construct@?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@QAEXPAUSecurityTokenKeyfilePath@CipherShed@@ABU34@@Z ; std::allocator<CipherShed::SecurityTokenKeyfilePath>::construct
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@QAEXPAUSecurityTokenKeyfilePath@CipherShed@@ABU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@QAEXPAUSecurityTokenKeyfilePath@CipherShed@@ABU34@@Z PROC ; std::allocator<CipherShed::SecurityTokenKeyfilePath>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00008	50		 push	 eax
  00009	51		 push	 ecx
  0000a	e8 00 00 00 00	 call	 ??$_Construct@USecurityTokenKeyfilePath@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfilePath@CipherShed@@ABU12@@Z ; std::_Construct<CipherShed::SecurityTokenKeyfilePath,CipherShed::SecurityTokenKeyfilePath>
  0000f	83 c4 08	 add	 esp, 8

; 156  : 		}

  00012	c2 08 00	 ret	 8
?construct@?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@QAEXPAUSecurityTokenKeyfilePath@CipherShed@@ABU34@@Z ENDP ; std::allocator<CipherShed::SecurityTokenKeyfilePath>::construct
_TEXT	ENDS
PUBLIC	??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	6a 04		 push	 4
  00026	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002b	33 c9		 xor	 ecx, ecx
  0002d	83 c4 04	 add	 esp, 4
  00030	3b c1		 cmp	 eax, ecx
  00032	74 04		 je	 SHORT $LN13@vector@2
  00034	89 30		 mov	 DWORD PTR [eax], esi
  00036	eb 02		 jmp	 SHORT $LN14@vector@2
$LN13@vector@2:
  00038	33 c0		 xor	 eax, eax
$LN14@vector@2:
  0003a	89 06		 mov	 DWORD PTR [esi], eax

; 471  : 		_Buy(0);

  0003c	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  0003f	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00042	89 4e 14	 mov	 DWORD PTR [esi+20], ecx

; 472  : 		}

  00045	8b c6		 mov	 eax, esi
  00047	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
PUBLIC	?clear@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?clear@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXXZ PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::clear, COMDAT
; _this$ = ecx

; 825  : 		{	// erase all

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 826  : 
; 827  :  #if _HAS_ITERATOR_DEBUGGING
; 828  : 		this->_Orphan_ptr(*this, 0);
; 829  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 830  : 
; 831  : 		_Nodeptr _Pnext;
; 832  : 		_Nodeptr _Pnode = _Nextnode(_Myhead);

  00004	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00007	8b 30		 mov	 esi, DWORD PTR [eax]

; 833  : 		_Nextnode(_Myhead) = _Myhead;

  00009	89 00		 mov	 DWORD PTR [eax], eax

; 834  : 		_Prevnode(_Myhead) = _Myhead;

  0000b	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0000e	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 835  : 		_Mysize = 0;

  00011	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0

; 836  : 
; 837  : 		for (; _Pnode != _Myhead; _Pnode = _Pnext)

  00018	3b 77 14	 cmp	 esi, DWORD PTR [edi+20]
  0001b	74 3c		 je	 SHORT $LN1@clear
  0001d	53		 push	 ebx
  0001e	8b ff		 npad	 2
$LL3@clear:

; 838  : 			{	// delete an element
; 839  : 			_Pnext = _Nextnode(_Pnode);
; 840  : 			this->_Alnod.destroy(_Pnode);

  00020	83 7e 20 08	 cmp	 DWORD PTR [esi+32], 8
  00024	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00026	72 0c		 jb	 SHORT $LN43@clear
  00028	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00031	83 c4 04	 add	 esp, 4
$LN43@clear:
  00034	33 c9		 xor	 ecx, ecx
  00036	c7 46 20 07 00
	00 00		 mov	 DWORD PTR [esi+32], 7
  0003d	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 841  : 			this->_Alnod.deallocate(_Pnode, 1);

  00044	56		 push	 esi
  00045	66 89 4e 0c	 mov	 WORD PTR [esi+12], cx
  00049	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004e	83 c4 04	 add	 esp, 4
  00051	8b f3		 mov	 esi, ebx
  00053	3b 5f 14	 cmp	 ebx, DWORD PTR [edi+20]
  00056	75 c8		 jne	 SHORT $LL3@clear
  00058	5b		 pop	 ebx
$LN1@clear:
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi

; 842  : 			}
; 843  : 		}

  0005b	c3		 ret	 0
?clear@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXXZ ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::clear
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenKeyfilePath@CipherShed@@@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Buynode
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenKeyfilePath@CipherShed@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenKeyfilePath@CipherShed@@@Z$0
__unwindtable$?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenKeyfilePath@CipherShed@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenKeyfilePath@CipherShed@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenKeyfilePath@CipherShed@@@Z$2
__ehfuncinfo$?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenKeyfilePath@CipherShed@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenKeyfilePath@CipherShed@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenKeyfilePath@CipherShed@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenKeyfilePath@CipherShed@@@Z
_TEXT	SEGMENT
__Pnode$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenKeyfilePath@CipherShed@@@Z PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Buynode, COMDAT
; _this$ = ecx

; 1190 : 		{	// allocate a node and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenKeyfilePath@CipherShed@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1191 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  0002b	6a 24		 push	 36			; 00000024H
  0002d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00032	8b f0		 mov	 esi, eax
  00034	83 c4 04	 add	 esp, 4
  00037	89 75 ec	 mov	 DWORD PTR __Pnode$[ebp], esi

; 1192 : 		int _Linkcnt = 0;
; 1193 : 
; 1194 : 		_TRY_BEGIN

  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1195 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Next);

  00041	85 f6		 test	 esi, esi
  00043	74 05		 je	 SHORT $LN27@Buynode@2
  00045	8b 45 08	 mov	 eax, DWORD PTR __Next$[ebp]
  00048	89 06		 mov	 DWORD PTR [esi], eax
$LN27@Buynode@2:

; 1196 : 		++_Linkcnt;
; 1197 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Prev);

  0004a	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0004d	85 c0		 test	 eax, eax
  0004f	74 05		 je	 SHORT $LN37@Buynode@2
  00051	8b 4d 0c	 mov	 ecx, DWORD PTR __Prev$[ebp]
  00054	89 08		 mov	 DWORD PTR [eax], ecx
$LN37@Buynode@2:

; 1198 : 		++_Linkcnt;
; 1199 : 		this->_Alval.construct(&_Myval(_Pnode), _Val);

  00056	8b 55 10	 mov	 edx, DWORD PTR __Val$[ebp]
  00059	52		 push	 edx
  0005a	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ??$_Construct@USecurityTokenKeyfilePath@CipherShed@@U12@@std@@YAXPAUSecurityTokenKeyfilePath@CipherShed@@ABU12@@Z ; std::_Construct<CipherShed::SecurityTokenKeyfilePath,CipherShed::SecurityTokenKeyfilePath>
  00063	83 c4 08	 add	 esp, 8

; 1207 : 		_CATCH_END
; 1208 : 		return (_Pnode);

  00066	8b c6		 mov	 eax, esi

; 1209 : 		}

  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 0c 00	 ret	 12			; 0000000cH
__catch$?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenKeyfilePath@CipherShed@@@Z$0:

; 1200 : 		_CATCH_ALL
; 1201 : 		if (1 < _Linkcnt)
; 1202 : 			this->_Alptr.destroy(&_Prevnode(_Pnode));
; 1203 : 		if (0 < _Linkcnt)
; 1204 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1205 : 		this->_Alnod.deallocate(_Pnode, 1);

  0007c	8b 4d ec	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0007f	51		 push	 ecx
  00080	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00085	83 c4 04	 add	 esp, 4

; 1206 : 		_RERAISE;

  00088	6a 00		 push	 0
  0008a	6a 00		 push	 0
  0008c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN53@Buynode@2:
  00091	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenKeyfilePath@CipherShed@@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenKeyfilePath@CipherShed@@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenKeyfilePath@CipherShed@@@Z ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Buynode
PUBLIC	??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@		; `string'
PUBLIC	??_C@_0BH@EHNHOJEI@ERR_KEYFILE_PATH_EMPTY?$AA@	; `string'
PUBLIC	??_C@_06GIIGBPHC@?$CFs?$CFc?$CFs?$AA@		; `string'
PUBLIC	??_C@_0BJ@LAFEHOHO@ERR_PROCESS_KEYFILE_PATH?$AA@ ; `string'
PUBLIC	??_C@_06BNHEIDIH@?$CFs?2?$CK?4?$CK?$AA@		; `string'
PUBLIC	??_C@_0BE@BKNFAOGD@ERR_PROCESS_KEYFILE?$AA@	; `string'
PUBLIC	_password$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_KeyFilesApply
PUBLIC	??_R0?AUException@CipherShed@@@8		; CipherShed::Exception `RTTI Type Descriptor'
EXTRN	_ErrorDirect:PROC
EXTRN	_GetString:PROC
EXTRN	__findclose:PROC
EXTRN	__findnext64i32:PROC
EXTRN	__imp__GetFileAttributesExA@12:PROC
EXTRN	__findfirst64i32:PROC
EXTRN	__snprintf:PROC
EXTRN	__stat64i32:PROC
EXTRN	_Error:PROC
EXTRN	_handleWin32Error:PROC
EXTRN	_MainDlg:DWORD
EXTRN	?GetKeyfileData@SecurityToken@CipherShed@@SAXABUSecurityTokenKeyfile@2@AAV?$vector@EV?$allocator@E@std@@@std@@@Z:PROC ; CipherShed::SecurityToken::GetKeyfileData
EXTRN	??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z:PROC ; CipherShed::SecurityTokenKeyfile::SecurityTokenKeyfile
EXTRN	?IsKeyfilePathValid@SecurityToken@CipherShed@@SA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z:PROC ; CipherShed::SecurityToken::IsKeyfilePathValid
EXTRN	?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:PROC ; SingleStringToWide
EXTRN	__imp__VirtualLock@8:PROC
;	COMDAT ?keyPool@?1??KeyFilesApply@@9@4PAEA
; File c:\program files\microsoft sdks\windows\v7.1\include\winnt.h
_BSS	SEGMENT
?keyPool@?1??KeyFilesApply@@9@4PAEA DB 040H DUP (?)	; `KeyFilesApply'::`2'::keyPool
_BSS	ENDS
;	COMDAT ??_R0?AUException@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUException@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUException@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@ DB 0aH, 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EHNHOJEI@ERR_KEYFILE_PATH_EMPTY?$AA@
CONST	SEGMENT
??_C@_0BH@EHNHOJEI@ERR_KEYFILE_PATH_EMPTY?$AA@ DB 'ERR_KEYFILE_PATH_EMPTY'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06GIIGBPHC@?$CFs?$CFc?$CFs?$AA@
CONST	SEGMENT
??_C@_06GIIGBPHC@?$CFs?$CFc?$CFs?$AA@ DB '%s%c%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LAFEHOHO@ERR_PROCESS_KEYFILE_PATH?$AA@
CONST	SEGMENT
??_C@_0BJ@LAFEHOHO@ERR_PROCESS_KEYFILE_PATH?$AA@ DB 'ERR_PROCESS_KEYFILE_'
	DB	'PATH', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06BNHEIDIH@?$CFs?2?$CK?4?$CK?$AA@
CONST	SEGMENT
??_C@_06BNHEIDIH@?$CFs?2?$CK?4?$CK?$AA@ DB '%s\*.*', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BKNFAOGD@ERR_PROCESS_KEYFILE?$AA@
CONST	SEGMENT
??_C@_0BE@BKNFAOGD@ERR_PROCESS_KEYFILE?$AA@ DB 'ERR_PROCESS_KEYFILE', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_KeyFilesApply$15 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffff70H
	DD	FLAT:__catch$_KeyFilesApply$0
__tryblocktable$_KeyFilesApply DD 00H
	DD	07H
	DD	08H
	DD	01H
	DD	FLAT:__catchsym$_KeyFilesApply$15
__ehfuncinfo$_KeyFilesApply DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$_KeyFilesApply
	DD	01H
	DD	FLAT:__tryblocktable$_KeyFilesApply
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$_KeyFilesApply DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$_KeyFilesApply$2
	DD	01H
	DD	FLAT:__unwindfunclet$_KeyFilesApply$3
	DD	00H
	DD	FLAT:__unwindfunclet$_KeyFilesApply$4
	DD	03H
	DD	FLAT:__unwindfunclet$_KeyFilesApply$5
	DD	04H
	DD	FLAT:__unwindfunclet$_KeyFilesApply$6
	DD	05H
	DD	FLAT:__unwindfunclet$_KeyFilesApply$7
	DD	06H
	DD	FLAT:__unwindfunclet$_KeyFilesApply$8
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_KeyFilesApply$9
	DD	09H
	DD	FLAT:__unwindfunclet$_KeyFilesApply$10
	DD	0aH
	DD	FLAT:__unwindfunclet$_KeyFilesApply$11
	DD	0bH
	DD	FLAT:__unwindfunclet$_KeyFilesApply$12
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\keyfiles.c
xdata$x	ENDS
;	COMDAT _KeyFilesApply
_TEXT	SEGMENT
$T134379 = -552						; size = 128
_fileAttributes$118846 = -424				; size = 36
$T134386 = -388						; size = 28
$T134385 = -360						; size = 28
$T134388 = -332						; size = 28
$T134387 = -304						; size = 28
_statStruct$ = -276					; size = 48
$T134384 = -228						; size = 28
$T134378 = -200						; size = 28
$T134382 = -172						; size = 28
_e$118834 = -144					; size = 4
$T134377 = -140						; size = 28
$T134380 = -112						; size = 28
$T134381 = -84						; size = 28
_password$GSCopy$ = -56					; size = 4
_keyfileData$118801 = -52				; size = 24
_kf$ = -28						; size = 4
_status$ = -24						; size = 4
$T135784 = -20						; size = 4
_keyfileCount$118839 = -20				; size = 4
_totalRead$118810 = -20					; size = 4
__$EHRec$ = -16						; size = 16
_fBuf$ = 0						; size = 296
_kfSubStruct$ = 296					; size = 264
_searchPath$ = 560					; size = 520
__$ArrayPad$ = 1080					; size = 4
_password$ = 1092					; size = 4
_firstKeyFile$ = 1096					; size = 4
_KeyFilesApply PROC					; COMDAT

; 219  : {

  00000	55		 push	 ebp
  00001	8d ac 24 c4 fb
	ff ff		 lea	 ebp, DWORD PTR [esp-1084]
  00008	81 ec 3c 04 00
	00		 sub	 esp, 1084		; 0000043cH
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$_KeyFilesApply
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	81 ec 1c 02 00
	00		 sub	 esp, 540		; 0000021cH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 85 38 04 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0003f	8b b5 48 04 00
	00		 mov	 esi, DWORD PTR _firstKeyFile$[ebp]
  00045	8b 9d 44 04 00
	00		 mov	 ebx, DWORD PTR _password$[ebp]

; 220  : 	BOOL status = TRUE;
; 221  : 	KeyFile kfSubStruct;
; 222  : 	KeyFile *kf;
; 223  : 	KeyFile *kfSub = &kfSubStruct;
; 224  : 	static unsigned __int8 keyPool [KEYFILE_POOL_SIZE];
; 225  : 	size_t i;
; 226  : 	struct stat statStruct;
; 227  : 	char searchPath [TC_MAX_PATH*2];
; 228  : 	struct _finddata_t fBuf;
; 229  : 	intptr_t searchHandle;
; 230  : 
; 231  : 	HiddenFilesPresentInKeyfilePath = FALSE;

  0004b	33 ff		 xor	 edi, edi
  0004d	b8 01 00 00 00	 mov	 eax, 1
  00052	89 5d c8	 mov	 DWORD PTR _password$GSCopy$[ebp], ebx
  00055	89 45 e8	 mov	 DWORD PTR _status$[ebp], eax
  00058	89 3d 00 00 00
	00		 mov	 DWORD PTR _HiddenFilesPresentInKeyfilePath, edi

; 232  : 
; 233  : 	if (firstKeyFile == NULL) return TRUE;

  0005e	3b f7		 cmp	 esi, edi
  00060	0f 84 c6 06 00
	00		 je	 $LN48@KeyFilesAp

; 234  : 
; 235  : 	VirtualLock (keyPool, sizeof (keyPool));

  00066	6a 40		 push	 64			; 00000040H
  00068	68 00 00 00 00	 push	 OFFSET ?keyPool@?1??KeyFilesApply@@9@4PAEA
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualLock@8

; 236  : 	memset (keyPool, 0, sizeof (keyPool));

  00073	6a 40		 push	 64			; 00000040H
  00075	57		 push	 edi
  00076	68 00 00 00 00	 push	 OFFSET ?keyPool@?1??KeyFilesApply@@9@4PAEA
  0007b	e8 00 00 00 00	 call	 _memset
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN517@KeyFilesAp:

; 237  : 
; 238  : 	for (kf = firstKeyFile; kf != NULL; kf = kf->Next)

  00083	89 75 e4	 mov	 DWORD PTR _kf$[ebp], esi
  00086	3b f7		 cmp	 esi, edi
  00088	0f 84 3b 06 00
	00		 je	 $LN44@KeyFilesAp

; 239  : 	{
; 240  : 		// Determine whether it's a security token path
; 241  : 		try
; 242  : 		{
; 243  : 			if (SecurityToken::IsKeyfilePathValid (SingleStringToWide (kf->FileName)))

  0008e	8b c6		 mov	 eax, esi
  00090	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  00093	c7 45 8c 0f 00
	00 00		 mov	 DWORD PTR $T134377[ebp+24], 15 ; 0000000fH
  0009a	89 7d 88	 mov	 DWORD PTR $T134377[ebp+20], edi
  0009d	c6 85 78 ff ff
	ff 00		 mov	 BYTE PTR $T134377[ebp+4], 0
  000a4	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL499@KeyFilesAp:
  000a7	8a 08		 mov	 cl, BYTE PTR [eax]
  000a9	40		 inc	 eax
  000aa	84 c9		 test	 cl, cl
  000ac	75 f9		 jne	 SHORT $LL499@KeyFilesAp
  000ae	2b c2		 sub	 eax, edx
  000b0	50		 push	 eax
  000b1	56		 push	 esi
  000b2	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T134377[ebp]
  000b8	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000bd	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR $T134377[ebp]
  000c3	50		 push	 eax
  000c4	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR $T134378[ebp]
  000ca	51		 push	 ecx
  000cb	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000cf	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  000d4	83 c4 08	 add	 esp, 8
  000d7	50		 push	 eax
  000d8	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000dc	e8 00 00 00 00	 call	 ?IsKeyfilePathValid@SecurityToken@CipherShed@@SA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; CipherShed::SecurityToken::IsKeyfilePathValid
  000e1	83 c4 04	 add	 esp, 4
  000e4	83 bd 50 ff ff
	ff 08		 cmp	 DWORD PTR $T134378[ebp+24], 8
  000eb	8a d8		 mov	 bl, al
  000ed	72 0f		 jb	 SHORT $LN120@KeyFilesAp
  000ef	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR $T134378[ebp+4]
  000f5	52		 push	 edx
  000f6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000fb	83 c4 04	 add	 esp, 4
$LN120@KeyFilesAp:
  000fe	33 c0		 xor	 eax, eax
  00100	83 7d 8c 10	 cmp	 DWORD PTR $T134377[ebp+24], 16 ; 00000010H
  00104	c7 85 50 ff ff
	ff 07 00 00 00	 mov	 DWORD PTR $T134378[ebp+24], 7
  0010e	89 bd 4c ff ff
	ff		 mov	 DWORD PTR $T134378[ebp+20], edi
  00114	66 89 85 3c ff
	ff ff		 mov	 WORD PTR $T134378[ebp+4], ax
  0011b	88 45 fc	 mov	 BYTE PTR __$EHRec$[ebp+12], al
  0011e	72 0f		 jb	 SHORT $LN146@KeyFilesAp
  00120	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR $T134377[ebp+4]
  00126	51		 push	 ecx
  00127	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0012c	83 c4 04	 add	 esp, 4
$LN146@KeyFilesAp:
  0012f	c7 45 8c 0f 00
	00 00		 mov	 DWORD PTR $T134377[ebp+24], 15 ; 0000000fH
  00136	89 7d 88	 mov	 DWORD PTR $T134377[ebp+20], edi
  00139	c6 85 78 ff ff
	ff 00		 mov	 BYTE PTR $T134377[ebp+4], 0
  00140	84 db		 test	 bl, bl
  00142	0f 84 9b 02 00
	00		 je	 $LN42@KeyFilesAp

; 244  : 			{
; 245  : 				// Apply security token keyfile
; 246  : 				vector <byte> keyfileData;

  00148	8d 4d cc	 lea	 ecx, DWORD PTR _keyfileData$118801[ebp]
  0014b	e8 00 00 00 00	 call	 ??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >

; 247  : 				SecurityToken::GetKeyfileData (SecurityTokenKeyfile (SingleStringToWide (kf->FileName)), keyfileData);

  00150	8b c6		 mov	 eax, esi
  00152	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  00156	c7 45 c4 0f 00
	00 00		 mov	 DWORD PTR $T134381[ebp+24], 15 ; 0000000fH
  0015d	89 7d c0	 mov	 DWORD PTR $T134381[ebp+20], edi
  00160	c6 45 b0 00	 mov	 BYTE PTR $T134381[ebp+4], 0
  00164	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL500@KeyFilesAp:
  00167	8a 08		 mov	 cl, BYTE PTR [eax]
  00169	40		 inc	 eax
  0016a	84 c9		 test	 cl, cl
  0016c	75 f9		 jne	 SHORT $LL500@KeyFilesAp
  0016e	2b c2		 sub	 eax, edx
  00170	50		 push	 eax
  00171	56		 push	 esi
  00172	8d 4d ac	 lea	 ecx, DWORD PTR $T134381[ebp]
  00175	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0017a	8d 55 ac	 lea	 edx, DWORD PTR $T134381[ebp]
  0017d	52		 push	 edx
  0017e	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR $T134382[ebp]
  00184	50		 push	 eax
  00185	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  00189	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  0018e	83 c4 08	 add	 esp, 8
  00191	6a ff		 push	 -1
  00193	33 c9		 xor	 ecx, ecx
  00195	57		 push	 edi
  00196	66 89 4d 94	 mov	 WORD PTR $T134380[ebp+4], cx
  0019a	be 07 00 00 00	 mov	 esi, 7
  0019f	50		 push	 eax
  001a0	8d 4d 90	 lea	 ecx, DWORD PTR $T134380[ebp]
  001a3	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  001a7	89 75 a8	 mov	 DWORD PTR $T134380[ebp+24], esi
  001aa	89 7d a4	 mov	 DWORD PTR $T134380[ebp+20], edi
  001ad	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  001b2	8d 55 90	 lea	 edx, DWORD PTR $T134380[ebp]
  001b5	52		 push	 edx
  001b6	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR $T134379[ebp]
  001bc	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  001c0	e8 00 00 00 00	 call	 ??0SecurityTokenKeyfile@CipherShed@@QAE@ABUSecurityTokenKeyfilePath@1@@Z ; CipherShed::SecurityTokenKeyfile::SecurityTokenKeyfile
  001c5	8d 4d cc	 lea	 ecx, DWORD PTR _keyfileData$118801[ebp]
  001c8	51		 push	 ecx
  001c9	50		 push	 eax
  001ca	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  001ce	e8 00 00 00 00	 call	 ?GetKeyfileData@SecurityToken@CipherShed@@SAXABUSecurityTokenKeyfile@2@AAV?$vector@EV?$allocator@E@std@@@std@@@Z ; CipherShed::SecurityToken::GetKeyfileData
  001d3	83 c4 08	 add	 esp, 8
  001d6	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR $T134379[ebp]
  001dc	e8 00 00 00 00	 call	 ??1SecurityTokenKeyfile@CipherShed@@QAE@XZ
  001e1	bb 08 00 00 00	 mov	 ebx, 8
  001e6	39 5d a8	 cmp	 DWORD PTR $T134380[ebp+24], ebx
  001e9	72 0c		 jb	 SHORT $LN243@KeyFilesAp
  001eb	8b 55 94	 mov	 edx, DWORD PTR $T134380[ebp+4]
  001ee	52		 push	 edx
  001ef	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001f4	83 c4 04	 add	 esp, 4
$LN243@KeyFilesAp:
  001f7	33 c0		 xor	 eax, eax
  001f9	89 75 a8	 mov	 DWORD PTR $T134380[ebp+24], esi
  001fc	89 7d a4	 mov	 DWORD PTR $T134380[ebp+20], edi
  001ff	66 89 45 94	 mov	 WORD PTR $T134380[ebp+4], ax
  00203	39 9d 6c ff ff
	ff		 cmp	 DWORD PTR $T134382[ebp+24], ebx
  00209	72 0f		 jb	 SHORT $LN271@KeyFilesAp
  0020b	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR $T134382[ebp+4]
  00211	51		 push	 ecx
  00212	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00217	83 c4 04	 add	 esp, 4
$LN271@KeyFilesAp:
  0021a	33 d2		 xor	 edx, edx
  0021c	83 7d c4 10	 cmp	 DWORD PTR $T134381[ebp+24], 16 ; 00000010H
  00220	89 b5 6c ff ff
	ff		 mov	 DWORD PTR $T134382[ebp+24], esi
  00226	89 bd 68 ff ff
	ff		 mov	 DWORD PTR $T134382[ebp+20], edi
  0022c	66 89 95 58 ff
	ff ff		 mov	 WORD PTR $T134382[ebp+4], dx
  00233	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  00237	72 0c		 jb	 SHORT $LN297@KeyFilesAp
  00239	8b 45 b0	 mov	 eax, DWORD PTR $T134381[ebp+4]
  0023c	50		 push	 eax
  0023d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00242	83 c4 04	 add	 esp, 4
$LN297@KeyFilesAp:

; 248  : 
; 249  : 				if (keyfileData.empty())

  00245	8b 55 dc	 mov	 edx, DWORD PTR _keyfileData$118801[ebp+16]
  00248	8b 75 d8	 mov	 esi, DWORD PTR _keyfileData$118801[ebp+12]
  0024b	8b ca		 mov	 ecx, edx
  0024d	2b ce		 sub	 ecx, esi
  0024f	c7 45 c4 0f 00
	00 00		 mov	 DWORD PTR $T134381[ebp+24], 15 ; 0000000fH
  00256	89 7d c0	 mov	 DWORD PTR $T134381[ebp+20], edi
  00259	c6 45 b0 00	 mov	 BYTE PTR $T134381[ebp+4], 0
  0025d	75 63		 jne	 SHORT $LN41@KeyFilesAp

; 250  : 				{
; 251  : 					SetLastError (ERROR_HANDLE_EOF); 

  0025f	6a 26		 push	 38			; 00000026H
  00261	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 252  : 					handleWin32Error (MainDlg);

  00267	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0026d	52		 push	 edx
  0026e	e8 00 00 00 00	 call	 _handleWin32Error

; 253  : 					Error ("ERR_PROCESS_KEYFILE");

  00273	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BKNFAOGD@ERR_PROCESS_KEYFILE?$AA@
  00278	e8 00 00 00 00	 call	 _Error

; 254  : 					status = FALSE;
; 255  : 					continue;

  0027d	8b 45 d8	 mov	 eax, DWORD PTR _keyfileData$118801[ebp+12]
  00280	83 c4 08	 add	 esp, 8
  00283	89 7d e8	 mov	 DWORD PTR _status$[ebp], edi
  00286	3b c7		 cmp	 eax, edi
  00288	74 09		 je	 SHORT $LN316@KeyFilesAp
  0028a	50		 push	 eax
  0028b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00290	83 c4 04	 add	 esp, 4
$LN316@KeyFilesAp:
  00293	89 7d d8	 mov	 DWORD PTR _keyfileData$118801[ebp+12], edi
  00296	89 7d dc	 mov	 DWORD PTR _keyfileData$118801[ebp+16], edi
  00299	89 7d e0	 mov	 DWORD PTR _keyfileData$118801[ebp+20], edi
$LN516@KeyFilesAp:
  0029c	8b 45 cc	 mov	 eax, DWORD PTR _keyfileData$118801[ebp]
  0029f	50		 push	 eax
  002a0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002a5	8b 55 e4	 mov	 edx, DWORD PTR _kf$[ebp]
  002a8	8b b2 04 01 00
	00		 mov	 esi, DWORD PTR [edx+260]
  002ae	8b 5d c8	 mov	 ebx, DWORD PTR _password$GSCopy$[ebp]
  002b1	83 c4 04	 add	 esp, 4

; 388  : }

  002b4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  002bb	33 ff		 xor	 edi, edi
  002bd	e9 c1 fd ff ff	 jmp	 $LN517@KeyFilesAp
$LN41@KeyFilesAp:

; 256  : 				}
; 257  : 
; 258  : 				unsigned __int32 crc = 0xffffffff;
; 259  : 				int writePos = 0;

  002c2	33 ff		 xor	 edi, edi
  002c4	83 c9 ff	 or	 ecx, -1
  002c7	33 c0		 xor	 eax, eax

; 260  : 				size_t totalRead = 0;

  002c9	89 7d ec	 mov	 DWORD PTR _totalRead$118810[ebp], edi
  002cc	8d 64 24 00	 npad	 4
$LL40@KeyFilesAp:

; 261  : 
; 262  : 				for (size_t i = 0; i < keyfileData.size(); i++)

  002d0	8b da		 mov	 ebx, edx
  002d2	2b de		 sub	 ebx, esi
  002d4	3b fb		 cmp	 edi, ebx
  002d6	73 5a		 jae	 SHORT $LN35@KeyFilesAp

; 263  : 				{
; 264  : 					crc = UPDC32 (keyfileData[i], crc);

  002d8	0f b6 1c 3e	 movzx	 ebx, BYTE PTR [esi+edi]
  002dc	33 d9		 xor	 ebx, ecx
  002de	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  002e4	c1 e9 08	 shr	 ecx, 8
  002e7	33 0c 9d 00 00
	00 00		 xor	 ecx, DWORD PTR _crc_32_tab[ebx*4]

; 265  : 
; 266  : 					keyPool[writePos++] += (unsigned __int8) (crc >> 24);

  002ee	40		 inc	 eax
  002ef	8b d9		 mov	 ebx, ecx
  002f1	c1 eb 18	 shr	 ebx, 24			; 00000018H
  002f4	00 98 ff ff ff
	ff		 add	 BYTE PTR ?keyPool@?1??KeyFilesApply@@9@4PAEA[eax-1], bl

; 267  : 					keyPool[writePos++] += (unsigned __int8) (crc >> 16);

  002fa	8b d9		 mov	 ebx, ecx
  002fc	c1 eb 10	 shr	 ebx, 16			; 00000010H
  002ff	00 98 00 00 00
	00		 add	 BYTE PTR ?keyPool@?1??KeyFilesApply@@9@4PAEA[eax], bl
  00305	40		 inc	 eax

; 268  : 					keyPool[writePos++] += (unsigned __int8) (crc >> 8);

  00306	8b d9		 mov	 ebx, ecx
  00308	c1 eb 08	 shr	 ebx, 8
  0030b	00 98 00 00 00
	00		 add	 BYTE PTR ?keyPool@?1??KeyFilesApply@@9@4PAEA[eax], bl

; 269  : 					keyPool[writePos++] += (unsigned __int8) crc;

  00311	00 88 01 00 00
	00		 add	 BYTE PTR ?keyPool@?1??KeyFilesApply@@9@4PAEA[eax+1], cl
  00317	40		 inc	 eax
  00318	40		 inc	 eax

; 270  : 
; 271  : 					if (writePos >= KEYFILE_POOL_SIZE)

  00319	83 f8 40	 cmp	 eax, 64			; 00000040H
  0031c	7c 02		 jl	 SHORT $LN37@KeyFilesAp

; 272  : 						writePos = 0;

  0031e	33 c0		 xor	 eax, eax
$LN37@KeyFilesAp:

; 273  : 
; 274  : 					if (++totalRead >= KEYFILE_MAX_READ_LEN)

  00320	8b 5d ec	 mov	 ebx, DWORD PTR _totalRead$118810[ebp]
  00323	43		 inc	 ebx
  00324	89 5d ec	 mov	 DWORD PTR _totalRead$118810[ebp], ebx
  00327	81 fb 00 00 10
	00		 cmp	 ebx, 1048576		; 00100000H
  0032d	73 03		 jae	 SHORT $LN35@KeyFilesAp

; 261  : 
; 262  : 				for (size_t i = 0; i < keyfileData.size(); i++)

  0032f	47		 inc	 edi
  00330	eb 9e		 jmp	 SHORT $LL40@KeyFilesAp
$LN35@KeyFilesAp:

; 275  : 						break;
; 276  : 				}
; 277  : 
; 278  : 				burn (&keyfileData.front(), keyfileData.size());

  00332	8b de		 mov	 ebx, esi
  00334	3b f2		 cmp	 esi, edx
  00336	76 0b		 jbe	 SHORT $LN344@KeyFilesAp
  00338	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0033d	8b 55 dc	 mov	 edx, DWORD PTR _keyfileData$118801[ebp+16]
  00340	8b 75 d8	 mov	 esi, DWORD PTR _keyfileData$118801[ebp+12]
$LN344@KeyFilesAp:
  00343	8b 45 cc	 mov	 eax, DWORD PTR _keyfileData$118801[ebp]
  00346	85 c0		 test	 eax, eax
  00348	75 64		 jne	 SHORT $LN483@KeyFilesAp
  0034a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0034f	8b 55 dc	 mov	 edx, DWORD PTR _keyfileData$118801[ebp+16]
  00352	8b 75 d8	 mov	 esi, DWORD PTR _keyfileData$118801[ebp+12]
  00355	33 c0		 xor	 eax, eax
$LN374@KeyFilesAp:
  00357	3b 58 10	 cmp	 ebx, DWORD PTR [eax+16]
  0035a	72 0b		 jb	 SHORT $LN361@KeyFilesAp
  0035c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00361	8b 55 dc	 mov	 edx, DWORD PTR _keyfileData$118801[ebp+16]
  00364	8b 75 d8	 mov	 esi, DWORD PTR _keyfileData$118801[ebp+12]
$LN361@KeyFilesAp:
  00367	8b fa		 mov	 edi, edx
  00369	2b fe		 sub	 edi, esi
  0036b	89 75 ec	 mov	 DWORD PTR $T135784[ebp], esi
  0036e	3b f2		 cmp	 esi, edx
  00370	76 08		 jbe	 SHORT $LN389@KeyFilesAp
  00372	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00377	8b 75 d8	 mov	 esi, DWORD PTR _keyfileData$118801[ebp+12]
$LN389@KeyFilesAp:
  0037a	8b 45 cc	 mov	 eax, DWORD PTR _keyfileData$118801[ebp]
  0037d	85 c0		 test	 eax, eax
  0037f	75 31		 jne	 SHORT $LN482@KeyFilesAp
  00381	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00386	8b 75 d8	 mov	 esi, DWORD PTR _keyfileData$118801[ebp+12]
  00389	33 c0		 xor	 eax, eax
$LN419@KeyFilesAp:
  0038b	8b 4d ec	 mov	 ecx, DWORD PTR $T135784[ebp]
  0038e	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00391	72 08		 jb	 SHORT $LN406@KeyFilesAp
  00393	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00398	8b 75 d8	 mov	 esi, DWORD PTR _keyfileData$118801[ebp+12]
$LN406@KeyFilesAp:
  0039b	8b 45 ec	 mov	 eax, DWORD PTR $T135784[ebp]
  0039e	8b cf		 mov	 ecx, edi
$LL423@KeyFilesAp:
  003a0	85 c9		 test	 ecx, ecx
  003a2	74 12		 je	 SHORT $LL32@KeyFilesAp
  003a4	c6 00 00	 mov	 BYTE PTR [eax], 0
  003a7	8b 75 d8	 mov	 esi, DWORD PTR _keyfileData$118801[ebp+12]
  003aa	40		 inc	 eax
  003ab	49		 dec	 ecx
  003ac	eb f2		 jmp	 SHORT $LL423@KeyFilesAp
$LN483@KeyFilesAp:
  003ae	8b 00		 mov	 eax, DWORD PTR [eax]
  003b0	eb a5		 jmp	 SHORT $LN374@KeyFilesAp
$LN482@KeyFilesAp:
  003b2	8b 00		 mov	 eax, DWORD PTR [eax]
  003b4	eb d5		 jmp	 SHORT $LN419@KeyFilesAp
$LL32@KeyFilesAp:
  003b6	8b d7		 mov	 edx, edi
  003b8	4f		 dec	 edi
  003b9	85 d2		 test	 edx, edx
  003bb	74 09		 je	 SHORT $LN34@KeyFilesAp
  003bd	c6 03 00	 mov	 BYTE PTR [ebx], 0
  003c0	8b 75 d8	 mov	 esi, DWORD PTR _keyfileData$118801[ebp+12]
  003c3	43		 inc	 ebx
  003c4	eb f0		 jmp	 SHORT $LL32@KeyFilesAp
$LN34@KeyFilesAp:

; 279  : 				continue;

  003c6	85 f6		 test	 esi, esi
  003c8	74 09		 je	 SHORT $LN431@KeyFilesAp
  003ca	56		 push	 esi
  003cb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003d0	83 c4 04	 add	 esp, 4
$LN431@KeyFilesAp:
  003d3	33 c0		 xor	 eax, eax
  003d5	89 45 d8	 mov	 DWORD PTR _keyfileData$118801[ebp+12], eax
  003d8	89 45 dc	 mov	 DWORD PTR _keyfileData$118801[ebp+16], eax
  003db	89 45 e0	 mov	 DWORD PTR _keyfileData$118801[ebp+20], eax
  003de	e9 b9 fe ff ff	 jmp	 $LN516@KeyFilesAp
$LN42@KeyFilesAp:

; 286  : 		}
; 287  : 
; 288  : 		// Determine whether it's a path or a file
; 289  : 		if (stat (kf->FileName, &statStruct) != 0)

  003e3	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _statStruct$[ebp]
  003e9	51		 push	 ecx
  003ea	56		 push	 esi
  003eb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  003f2	e8 00 00 00 00	 call	 __stat64i32
  003f7	83 c4 08	 add	 esp, 8
  003fa	85 c0		 test	 eax, eax
  003fc	74 1e		 je	 SHORT $LN30@KeyFilesAp

; 290  : 		{
; 291  : 			handleWin32Error (MainDlg);

  003fe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00404	52		 push	 edx
  00405	e8 00 00 00 00	 call	 _handleWin32Error

; 292  : 			Error ("ERR_PROCESS_KEYFILE");

  0040a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BKNFAOGD@ERR_PROCESS_KEYFILE?$AA@
  0040f	e8 00 00 00 00	 call	 _Error

; 293  : 			status = FALSE;

  00414	89 7d e8	 mov	 DWORD PTR _status$[ebp], edi

; 294  : 			continue;

  00417	e9 7f 02 00 00	 jmp	 $LN514@KeyFilesAp
$LN30@KeyFilesAp:

; 295  : 		}
; 296  : 
; 297  : 		if (statStruct.st_mode & S_IFDIR)		// If it's a directory

  0041c	f7 85 f2 fe ff
	ff 00 40 00 00	 test	 DWORD PTR _statStruct$[ebp+6], 16384 ; 00004000H
  00426	0f 84 3d 02 00
	00		 je	 $LN29@KeyFilesAp

; 298  : 		{
; 299  : 			/* Find and process all keyfiles in the directory */
; 300  : 			int keyfileCount = 0;
; 301  : 
; 302  : 			snprintf (searchPath, sizeof (searchPath), "%s\\*.*", kf->FileName);

  0042c	56		 push	 esi
  0042d	68 00 00 00 00	 push	 OFFSET ??_C@_06BNHEIDIH@?$CFs?2?$CK?4?$CK?$AA@
  00432	8d 85 30 02 00
	00		 lea	 eax, DWORD PTR _searchPath$[ebp]
  00438	68 08 02 00 00	 push	 520			; 00000208H
  0043d	50		 push	 eax
  0043e	89 7d ec	 mov	 DWORD PTR _keyfileCount$118839[ebp], edi
  00441	e8 00 00 00 00	 call	 __snprintf

; 303  : 			if ((searchHandle = _findfirst (searchPath, &fBuf)) == -1)

  00446	8d 4d 00	 lea	 ecx, DWORD PTR _fBuf$[ebp]
  00449	51		 push	 ecx
  0044a	8d 95 30 02 00
	00		 lea	 edx, DWORD PTR _searchPath$[ebp]
  00450	52		 push	 edx
  00451	e8 00 00 00 00	 call	 __findfirst64i32
  00456	8b d8		 mov	 ebx, eax
  00458	83 c4 18	 add	 esp, 24			; 00000018H
  0045b	83 fb ff	 cmp	 ebx, -1
  0045e	75 25		 jne	 SHORT $LN27@KeyFilesAp

; 304  : 			{
; 305  : 				handleWin32Error (MainDlg);

  00460	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00465	50		 push	 eax
  00466	e8 00 00 00 00	 call	 _handleWin32Error

; 306  : 				Error ("ERR_PROCESS_KEYFILE_PATH");

  0046b	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LAFEHOHO@ERR_PROCESS_KEYFILE_PATH?$AA@
  00470	e8 00 00 00 00	 call	 _Error

; 307  : 				status = FALSE;

  00475	89 7d e8	 mov	 DWORD PTR _status$[ebp], edi

; 308  : 				continue;

  00478	e9 1e 02 00 00	 jmp	 $LN514@KeyFilesAp
  0047d	8d 49 00	 npad	 3
$LL508@KeyFilesAp:
  00480	8b 75 e4	 mov	 esi, DWORD PTR _kf$[ebp]
  00483	33 ff		 xor	 edi, edi
$LN27@KeyFilesAp:

; 309  : 			}
; 310  : 
; 311  : 			do
; 312  : 			{
; 313  : 				WIN32_FILE_ATTRIBUTE_DATA fileAttributes;
; 314  : 
; 315  : 				snprintf (kfSub->FileName, sizeof(kfSub->FileName), "%s%c%s", kf->FileName,
; 316  : 					'\\',
; 317  : 					fBuf.name
; 318  : 					);

  00485	8d 4d 24	 lea	 ecx, DWORD PTR _fBuf$[ebp+36]
  00488	51		 push	 ecx
  00489	6a 5c		 push	 92			; 0000005cH
  0048b	56		 push	 esi
  0048c	68 00 00 00 00	 push	 OFFSET ??_C@_06GIIGBPHC@?$CFs?$CFc?$CFs?$AA@
  00491	68 04 01 00 00	 push	 260			; 00000104H
  00496	8d b5 28 01 00
	00		 lea	 esi, DWORD PTR _kfSubStruct$[ebp]
  0049c	56		 push	 esi
  0049d	e8 00 00 00 00	 call	 __snprintf

; 319  : 
; 320  : 				// Determine whether it's a path or a file
; 321  : 				if (stat (kfSub->FileName, &statStruct) != 0)

  004a2	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _statStruct$[ebp]
  004a8	52		 push	 edx
  004a9	56		 push	 esi
  004aa	e8 00 00 00 00	 call	 __stat64i32
  004af	83 c4 20	 add	 esp, 32			; 00000020H
  004b2	85 c0		 test	 eax, eax
  004b4	74 1a		 je	 SHORT $LN24@KeyFilesAp

; 322  : 				{
; 323  : 					handleWin32Error (MainDlg);

  004b6	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  004bb	50		 push	 eax
  004bc	e8 00 00 00 00	 call	 _handleWin32Error

; 324  : 					Error ("ERR_PROCESS_KEYFILE");

  004c1	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BKNFAOGD@ERR_PROCESS_KEYFILE?$AA@
  004c6	e8 00 00 00 00	 call	 _Error

; 325  : 					status = FALSE;

  004cb	89 7d e8	 mov	 DWORD PTR _status$[ebp], edi
  004ce	eb 66		 jmp	 SHORT $LN515@KeyFilesAp
$LN24@KeyFilesAp:

; 326  : 					continue;
; 327  : 				}
; 328  : 				else if (statStruct.st_mode & S_IFDIR)		// If it's a directory

  004d0	f7 85 f2 fe ff
	ff 00 40 00 00	 test	 DWORD PTR _statStruct$[ebp+6], 16384 ; 00004000H
  004da	75 5d		 jne	 SHORT $LN26@KeyFilesAp

; 329  : 				{
; 330  : 					// Prevent recursive folder scanning
; 331  : 					continue;	 
; 332  : 				}
; 333  : 
; 334  : 				// Skip hidden files
; 335  : 				if (GetFileAttributesEx (kfSub->FileName, GetFileExInfoStandard, &fileAttributes)
; 336  : 					&& (fileAttributes.dwFileAttributes & FILE_ATTRIBUTE_HIDDEN) != 0)

  004dc	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR _fileAttributes$118846[ebp]
  004e2	51		 push	 ecx
  004e3	57		 push	 edi
  004e4	56		 push	 esi
  004e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileAttributesExA@12
  004eb	85 c0		 test	 eax, eax
  004ed	74 15		 je	 SHORT $LN21@KeyFilesAp
  004ef	f6 85 58 fe ff
	ff 02		 test	 BYTE PTR _fileAttributes$118846[ebp], 2
  004f6	74 0c		 je	 SHORT $LN21@KeyFilesAp

; 337  : 				{
; 338  : 					HiddenFilesPresentInKeyfilePath = TRUE;

  004f8	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _HiddenFilesPresentInKeyfilePath, 1

; 339  : 					continue;	 

  00502	eb 35		 jmp	 SHORT $LN26@KeyFilesAp
$LN21@KeyFilesAp:

; 340  : 				}
; 341  : 
; 342  : 				++keyfileCount;

  00504	ff 45 ec	 inc	 DWORD PTR _keyfileCount$118839[ebp]

; 343  : 
; 344  : 				// Apply keyfile to the pool
; 345  : 				if (!KeyFileProcess (keyPool, kfSub))

  00507	56		 push	 esi
  00508	bf 00 00 00 00	 mov	 edi, OFFSET ?keyPool@?1??KeyFilesApply@@9@4PAEA
  0050d	e8 00 00 00 00	 call	 ?KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z ; KeyFileProcess
  00512	83 c4 04	 add	 esp, 4
  00515	85 c0		 test	 eax, eax
  00517	75 20		 jne	 SHORT $LN26@KeyFilesAp

; 346  : 				{
; 347  : 					handleWin32Error (MainDlg);

  00519	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0051f	52		 push	 edx
  00520	e8 00 00 00 00	 call	 _handleWin32Error

; 348  : 					Error ("ERR_PROCESS_KEYFILE");

  00525	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BKNFAOGD@ERR_PROCESS_KEYFILE?$AA@
  0052a	e8 00 00 00 00	 call	 _Error

; 349  : 					status = FALSE;

  0052f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], 0
$LN515@KeyFilesAp:

; 348  : 					Error ("ERR_PROCESS_KEYFILE");

  00536	83 c4 08	 add	 esp, 8
$LN26@KeyFilesAp:

; 350  : 				}
; 351  : 
; 352  : 			} while (_findnext (searchHandle, &fBuf) != -1);

  00539	8d 45 00	 lea	 eax, DWORD PTR _fBuf$[ebp]
  0053c	50		 push	 eax
  0053d	53		 push	 ebx
  0053e	e8 00 00 00 00	 call	 __findnext64i32
  00543	83 c4 08	 add	 esp, 8
  00546	83 f8 ff	 cmp	 eax, -1
  00549	0f 85 31 ff ff
	ff		 jne	 $LL508@KeyFilesAp

; 353  : 			_findclose (searchHandle);

  0054f	53		 push	 ebx
  00550	e8 00 00 00 00	 call	 __findclose

; 354  : 
; 355  : 			burn (&kfSubStruct, sizeof (kfSubStruct));

  00555	8d 95 28 01 00
	00		 lea	 edx, DWORD PTR _kfSubStruct$[ebp]
  0055b	b9 08 01 00 00	 mov	 ecx, 264		; 00000108H
  00560	83 c4 04	 add	 esp, 4
  00563	8b f1		 mov	 esi, ecx
  00565	8b c2		 mov	 eax, edx
$LL442@KeyFilesAp:
  00567	c6 00 00	 mov	 BYTE PTR [eax], 0
  0056a	40		 inc	 eax
  0056b	83 ee 01	 sub	 esi, 1
  0056e	75 f7		 jne	 SHORT $LL442@KeyFilesAp
  00570	85 c9		 test	 ecx, ecx
  00572	74 09		 je	 SHORT $LN469@KeyFilesAp
$LL16@KeyFilesAp:
  00574	49		 dec	 ecx
  00575	c6 02 00	 mov	 BYTE PTR [edx], 0
  00578	42		 inc	 edx
  00579	85 c9		 test	 ecx, ecx
  0057b	75 f7		 jne	 SHORT $LL16@KeyFilesAp
$LN469@KeyFilesAp:

; 356  : 
; 357  : 			if (keyfileCount == 0)

  0057d	83 7d ec 00	 cmp	 DWORD PTR _keyfileCount$118839[ebp], 0
  00581	0f 85 17 01 00
	00		 jne	 $LN45@KeyFilesAp

; 358  : 			{
; 359  : 				ErrorDirect ((wstring (GetString ("ERR_KEYFILE_PATH_EMPTY")) + L"\n\n" + SingleStringToWide (kf->FileName)).c_str());

  00587	8b 4d e4	 mov	 ecx, DWORD PTR _kf$[ebp]
  0058a	51		 push	 ecx
  0058b	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR $T134384[ebp]
  00591	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00596	8d 95 1c ff ff
	ff		 lea	 edx, DWORD PTR $T134384[ebp]
  0059c	52		 push	 edx
  0059d	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR $T134385[ebp]
  005a3	50		 push	 eax
  005a4	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 9
  005ab	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  005b0	8b f0		 mov	 esi, eax
  005b2	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@EHNHOJEI@ERR_KEYFILE_PATH_EMPTY?$AA@
  005b7	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+12], 10 ; 0000000aH
  005bb	e8 00 00 00 00	 call	 _GetString
  005c0	83 c4 0c	 add	 esp, 12			; 0000000cH
  005c3	50		 push	 eax
  005c4	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR $T134386[ebp]
  005ca	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  005cf	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  005d4	50		 push	 eax
  005d5	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T134387[ebp]
  005db	51		 push	 ecx
  005dc	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+12], 11 ; 0000000bH
  005e0	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  005e5	56		 push	 esi
  005e6	50		 push	 eax
  005e7	8d 95 b4 fe ff
	ff		 lea	 edx, DWORD PTR $T134388[ebp]
  005ed	52		 push	 edx
  005ee	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+12], 12 ; 0000000cH
  005f2	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  005f7	83 c4 18	 add	 esp, 24			; 00000018H
  005fa	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  005fe	72 05		 jb	 SHORT $LN449@KeyFilesAp
  00600	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00603	eb 03		 jmp	 SHORT $LN450@KeyFilesAp
$LN449@KeyFilesAp:
  00605	83 c0 04	 add	 eax, 4
$LN450@KeyFilesAp:
  00608	50		 push	 eax
  00609	e8 00 00 00 00	 call	 _ErrorDirect
  0060e	83 c4 04	 add	 esp, 4
  00611	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR $T134388[ebp]
  00617	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0061c	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T134387[ebp]
  00622	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00627	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR $T134386[ebp]
  0062d	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00632	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR $T134385[ebp]
  00638	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0063d	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR $T134384[ebp]
  00643	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0064a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0064f	8b 55 e4	 mov	 edx, DWORD PTR _kf$[ebp]
  00652	8b b2 04 01 00
	00		 mov	 esi, DWORD PTR [edx+260]
  00658	8b 5d c8	 mov	 ebx, DWORD PTR _password$GSCopy$[ebp]

; 360  : 				status = FALSE;

  0065b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], 0
  00662	33 ff		 xor	 edi, edi
  00664	e9 1a fa ff ff	 jmp	 $LN517@KeyFilesAp
$LN29@KeyFilesAp:

; 361  : 			}
; 362  : 		}
; 363  : 		// Apply keyfile to the pool
; 364  : 		else if (!KeyFileProcess (keyPool, kf))

  00669	8b 45 e4	 mov	 eax, DWORD PTR _kf$[ebp]
  0066c	50		 push	 eax
  0066d	bf 00 00 00 00	 mov	 edi, OFFSET ?keyPool@?1??KeyFilesApply@@9@4PAEA
  00672	e8 00 00 00 00	 call	 ?KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z ; KeyFileProcess
  00677	83 c4 04	 add	 esp, 4
  0067a	85 c0		 test	 eax, eax
  0067c	75 20		 jne	 SHORT $LN45@KeyFilesAp

; 365  : 		{
; 366  : 			handleWin32Error (MainDlg);

  0067e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00684	51		 push	 ecx
  00685	e8 00 00 00 00	 call	 _handleWin32Error

; 367  : 			Error ("ERR_PROCESS_KEYFILE");

  0068a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BKNFAOGD@ERR_PROCESS_KEYFILE?$AA@
  0068f	e8 00 00 00 00	 call	 _Error

; 368  : 			status = FALSE;

  00694	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], 0
$LN514@KeyFilesAp:

; 367  : 			Error ("ERR_PROCESS_KEYFILE");

  0069b	83 c4 08	 add	 esp, 8
$LN45@KeyFilesAp:

; 237  : 
; 238  : 	for (kf = firstKeyFile; kf != NULL; kf = kf->Next)

  0069e	8b 55 e4	 mov	 edx, DWORD PTR _kf$[ebp]
  006a1	8b b2 04 01 00
	00		 mov	 esi, DWORD PTR [edx+260]
  006a7	8b 5d c8	 mov	 ebx, DWORD PTR _password$GSCopy$[ebp]
  006aa	33 ff		 xor	 edi, edi
  006ac	e9 d2 f9 ff ff	 jmp	 $LN517@KeyFilesAp
__catch$_KeyFilesApply$0:

; 280  : 			}
; 281  : 		}
; 282  : 		catch (Exception &e)
; 283  : 		{
; 284  : 			e.Show (NULL);

  006b1	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _e$118834[ebp]
  006b7	8b 01		 mov	 eax, DWORD PTR [ecx]
  006b9	8b 10		 mov	 edx, DWORD PTR [eax]
  006bb	6a 00		 push	 0
  006bd	ff d2		 call	 edx

; 285  : 			return FALSE;

  006bf	b8 00 00 00 00	 mov	 eax, $LN65@KeyFilesAp
  006c4	c3		 ret	 0
$LN65@KeyFilesAp:
  006c5	33 c0		 xor	 eax, eax
  006c7	eb 63		 jmp	 SHORT $LN48@KeyFilesAp
$LN44@KeyFilesAp:

; 369  : 		}
; 370  : 	}
; 371  : 
; 372  : 	/* Mix the keyfile pool contents into the password */
; 373  : 
; 374  : 	for (i = 0; i < sizeof (keyPool); i++)

  006c9	33 c0		 xor	 eax, eax
  006cb	eb 03 8d 49 00	 npad	 5
$LL11@KeyFilesAp:

; 375  : 	{
; 376  : 		if (i < password->Length)

  006d0	3b 03		 cmp	 eax, DWORD PTR [ebx]
  006d2	73 0c		 jae	 SHORT $LN8@KeyFilesAp

; 377  : 			password->Text[i] += keyPool[i];

  006d4	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?keyPool@?1??KeyFilesApply@@9@4PAEA[eax]
  006da	00 4c 03 04	 add	 BYTE PTR [ebx+eax+4], cl

; 378  : 		else

  006de	eb 0a		 jmp	 SHORT $LN10@KeyFilesAp
$LN8@KeyFilesAp:

; 379  : 			password->Text[i] = keyPool[i];

  006e0	8a 90 00 00 00
	00		 mov	 dl, BYTE PTR ?keyPool@?1??KeyFilesApply@@9@4PAEA[eax]
  006e6	88 54 03 04	 mov	 BYTE PTR [ebx+eax+4], dl
$LN10@KeyFilesAp:
  006ea	40		 inc	 eax
  006eb	83 f8 40	 cmp	 eax, 64			; 00000040H
  006ee	72 e0		 jb	 SHORT $LL11@KeyFilesAp

; 380  : 	}
; 381  : 
; 382  : 	if (password->Length < (int)sizeof (keyPool))

  006f0	83 3b 40	 cmp	 DWORD PTR [ebx], 64	; 00000040H
  006f3	73 06		 jae	 SHORT $LN5@KeyFilesAp

; 383  :         password->Length = sizeof (keyPool);

  006f5	c7 03 40 00 00
	00		 mov	 DWORD PTR [ebx], 64	; 00000040H
$LN5@KeyFilesAp:

; 384  : 
; 385  : 	burn (keyPool, sizeof (keyPool));

  006fb	ba 00 00 00 00	 mov	 edx, OFFSET ?keyPool@?1??KeyFilesApply@@9@4PAEA
  00700	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00705	8b f1		 mov	 esi, ecx
  00707	8b c2		 mov	 eax, edx
  00709	8d a4 24 00 00
	00 00		 npad	 7
$LL452@KeyFilesAp:
  00710	c6 00 00	 mov	 BYTE PTR [eax], 0
  00713	40		 inc	 eax
  00714	83 ee 01	 sub	 esi, 1
  00717	75 f7		 jne	 SHORT $LL452@KeyFilesAp
  00719	8d a4 24 00 00
	00 00		 npad	 7
$LL2@KeyFilesAp:
  00720	49		 dec	 ecx
  00721	c6 02 00	 mov	 BYTE PTR [edx], 0
  00724	42		 inc	 edx
  00725	3b cf		 cmp	 ecx, edi
  00727	75 f7		 jne	 SHORT $LL2@KeyFilesAp

; 386  : 
; 387  : 	return status;

  00729	8b 45 e8	 mov	 eax, DWORD PTR _status$[ebp]
$LN48@KeyFilesAp:

; 388  : }

  0072c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0072f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00736	59		 pop	 ecx
  00737	5f		 pop	 edi
  00738	5e		 pop	 esi
  00739	5b		 pop	 ebx
  0073a	8b 8d 38 04 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00740	33 cd		 xor	 ecx, ebp
  00742	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00747	81 c5 3c 04 00
	00		 add	 ebp, 1084		; 0000043cH
  0074d	8b e5		 mov	 esp, ebp
  0074f	5d		 pop	 ebp
  00750	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_KeyFilesApply$2:
  00000	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T134377[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_KeyFilesApply$3:
  0000b	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR $T134378[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_KeyFilesApply$4:
  00016	8d 4d cc	 lea	 ecx, DWORD PTR _keyfileData$118801[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
__unwindfunclet$_KeyFilesApply$5:
  0001e	8d 4d ac	 lea	 ecx, DWORD PTR $T134381[ebp]
  00021	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_KeyFilesApply$6:
  00026	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR $T134382[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_KeyFilesApply$7:
  00031	8d 4d 90	 lea	 ecx, DWORD PTR $T134380[ebp]
  00034	e9 00 00 00 00	 jmp	 ??1SecurityTokenKeyfilePath@CipherShed@@QAE@XZ
__unwindfunclet$_KeyFilesApply$8:
  00039	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR $T134379[ebp]
  0003f	e9 00 00 00 00	 jmp	 ??1SecurityTokenKeyfile@CipherShed@@QAE@XZ
__unwindfunclet$_KeyFilesApply$9:
  00044	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR $T134384[ebp]
  0004a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_KeyFilesApply$10:
  0004f	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR $T134385[ebp]
  00055	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_KeyFilesApply$11:
  0005a	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR $T134386[ebp]
  00060	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_KeyFilesApply$12:
  00065	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T134387[ebp]
  0006b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$_KeyFilesApply:
  00070	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00074	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00077	8b 8a d4 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-556]
  0007d	33 c8		 xor	 ecx, eax
  0007f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00084	8b 8a 44 04 00
	00		 mov	 ecx, DWORD PTR [edx+1092]
  0008a	33 c8		 xor	 ecx, eax
  0008c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00091	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_KeyFilesApply
  00096	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_KeyFilesApply ENDP
PUBLIC	?_Tidy@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEXXZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Tidy@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEXXZ PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Tidy, COMDAT
; _this$ = ecx

; 1212 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1213 : 		clear();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::clear

; 1214 : 		this->_Alptr.destroy(&_Nextnode(_Myhead));
; 1215 : 		this->_Alptr.destroy(&_Prevnode(_Myhead));
; 1216 : 		this->_Alnod.deallocate(_Myhead, 1);

  00008	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	83 c4 04	 add	 esp, 4

; 1217 : 		_Myhead = 0;

  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	5e		 pop	 esi

; 1218 : 		}

  0001c	c3		 ret	 0
?_Tidy@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEXXZ ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Insert@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABUSecurityTokenKeyfilePath@CipherShed@@@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Insert
; Function compile flags: /Ogtpy
;	COMDAT ?_Insert@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABUSecurityTokenKeyfilePath@CipherShed@@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 8
__Val$ = 16						; size = 4
?_Insert@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABUSecurityTokenKeyfilePath@CipherShed@@@Z PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Insert, COMDAT
; _this$ = ecx

; 711  : 
; 712  :  #if _HAS_ITERATOR_DEBUGGING
; 713  : 		if (_Where._Mycont != this)
; 714  : 			_DEBUG_ERROR("list insert iterator outside range");
; 715  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 716  : 
; 717  : 		_Nodeptr _Pnode = _Where._Mynode();
; 718  : 		_Nodeptr _Newnode = _Buynode(_Pnode, _Prevnode(_Pnode), _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Where$[esp]
  00004	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	8b 4c 24 18	 mov	 ecx, DWORD PTR __Val$[esp+8]
  00010	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]
  00013	51		 push	 ecx
  00014	52		 push	 edx
  00015	50		 push	 eax
  00016	8b cf		 mov	 ecx, edi
  00018	e8 00 00 00 00	 call	 ?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenKeyfilePath@CipherShed@@@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Buynode

; 719  : 		_Incsize(1);

  0001d	6a 01		 push	 1
  0001f	8b cf		 mov	 ecx, edi
  00021	8b f0		 mov	 esi, eax
  00023	e8 00 00 00 00	 call	 ?_Incsize@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Incsize

; 720  : 		_Prevnode(_Pnode) = _Newnode;

  00028	89 33		 mov	 DWORD PTR [ebx], esi

; 721  : 		_Nextnode(_Prevnode(_Newnode)) = _Newnode;

  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	5f		 pop	 edi
  0002e	89 30		 mov	 DWORD PTR [eax], esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx

; 722  : 		}

  00032	c2 0c 00	 ret	 12			; 0000000cH
?_Insert@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@12@ABUSecurityTokenKeyfilePath@CipherShed@@@Z ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Insert
_TEXT	ENDS
PUBLIC	??1?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::~list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::~list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >, COMDAT
; _this$ = ecx

; 520  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 521  : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::clear
  00008	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 522  : 		}

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	51		 push	 ecx
  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 08	 add	 esp, 8
  00023	5e		 pop	 esi
  00024	c3		 ret	 0
??1?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::~list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >
_TEXT	ENDS
PUBLIC	??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Insert<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$0
__unwindtable$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$2
__ehfuncinfo$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
$T136164 = -40						; size = 8
__Next$ = -32						; size = 8
__Before$122022 = -24					; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__First$ = 16						; size = 8
__Last$ = 24						; size = 8
___formal$ = 32						; size = 1
??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Insert<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1> >, COMDAT
; _this$ = ecx

; 762  : 		void _Insert(const_iterator _Where,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d ec	 mov	 DWORD PTR _this$[ebp], ebx

; 763  : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 764  : 		{	// insert [_First, _Last) at _Where, forward iterators
; 765  : 
; 766  :  #if _HAS_ITERATOR_DEBUGGING
; 767  : 		_DEBUG_RANGE(_First, _Last);
; 768  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 769  : 
; 770  : 		_Iter _Next = _First;

  00030	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  00033	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  00036	89 45 e0	 mov	 DWORD PTR __Next$[ebp], eax
  00039	89 4d e4	 mov	 DWORD PTR __Next$[ebp+4], ecx

; 771  : 
; 772  : 		_TRY_BEGIN

  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 773  : 		for (; _First != _Last; ++_First)

$LL24@Insert:
  00043	85 c0		 test	 eax, eax
  00045	74 05		 je	 SHORT $LN41@Insert
  00047	3b 45 18	 cmp	 eax, DWORD PTR __Last$[ebp]
  0004a	74 08		 je	 SHORT $LN40@Insert
$LN41@Insert:
  0004c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00051	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
$LN40@Insert:
  00054	8b 55 14	 mov	 edx, DWORD PTR __First$[ebp+4]
  00057	3b 55 1c	 cmp	 edx, DWORD PTR __Last$[ebp+4]
  0005a	0f 84 de 00 00
	00		 je	 $LN4@Insert

; 774  : 			_Insert(_Where, *_First);

  00060	85 c0		 test	 eax, eax
  00062	75 0c		 jne	 SHORT $LN89@Insert
  00064	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00069	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  0006c	85 c0		 test	 eax, eax
  0006e	74 04		 je	 SHORT $LN66@Insert
$LN89@Insert:
  00070	8b 00		 mov	 eax, DWORD PTR [eax]
  00072	eb 02		 jmp	 SHORT $LN67@Insert
$LN66@Insert:
  00074	33 c0		 xor	 eax, eax
$LN67@Insert:
  00076	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  00079	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0007c	75 05		 jne	 SHORT $LN52@Insert
  0007e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN52@Insert:
  00083	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp+4]
  00086	8b 45 14	 mov	 eax, DWORD PTR __First$[ebp+4]
  00089	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0008c	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
  0008f	83 c0 08	 add	 eax, 8
  00092	50		 push	 eax
  00093	52		 push	 edx
  00094	51		 push	 ecx
  00095	8b cb		 mov	 ecx, ebx
  00097	e8 00 00 00 00	 call	 ?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@PAU342@0ABUSecurityTokenKeyfilePath@CipherShed@@@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Buynode
  0009c	6a 01		 push	 1
  0009e	8b cb		 mov	 ecx, ebx
  000a0	8b f0		 mov	 esi, eax
  000a2	e8 00 00 00 00	 call	 ?_Incsize@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEXI@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Incsize
  000a7	89 37		 mov	 DWORD PTR [edi], esi
  000a9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ac	89 30		 mov	 DWORD PTR [eax], esi
  000ae	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  000b1	85 c0		 test	 eax, eax
  000b3	75 0c		 jne	 SHORT $LN88@Insert
  000b5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000ba	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
  000bd	85 c0		 test	 eax, eax
  000bf	74 04		 je	 SHORT $LN30@Insert
$LN88@Insert:

; 773  : 		for (; _First != _Last; ++_First)

  000c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c3	eb 02		 jmp	 SHORT $LN31@Insert
$LN30@Insert:
  000c5	33 c9		 xor	 ecx, ecx
$LN31@Insert:
  000c7	8b 55 14	 mov	 edx, DWORD PTR __First$[ebp+4]
  000ca	3b 51 14	 cmp	 edx, DWORD PTR [ecx+20]
  000cd	75 08		 jne	 SHORT $LN16@Insert
  000cf	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000d4	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp]
$LN16@Insert:
  000d7	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp+4]
  000da	8b 11		 mov	 edx, DWORD PTR [ecx]
  000dc	89 55 14	 mov	 DWORD PTR __First$[ebp+4], edx
  000df	e9 5f ff ff ff	 jmp	 $LL24@Insert
__catch$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z$0:

; 775  : 		_CATCH_ALL
; 776  : 		for (; _Next != _First; ++_Next)

  000e4	8d 45 10	 lea	 eax, DWORD PTR __First$[ebp]
  000e7	50		 push	 eax
  000e8	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  000eb	e8 00 00 00 00	 call	 ??9?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBE_NABV012@@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator!=
  000f0	84 c0		 test	 al, al
  000f2	74 41		 je	 SHORT $LN1@Insert
  000f4	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
$LL3@Insert:

; 777  : 			{	// undo inserts
; 778  : 			const_iterator _Before = _Where;

  000f7	8b 4d 08	 mov	 ecx, DWORD PTR __Where$[ebp]
  000fa	8b 55 0c	 mov	 edx, DWORD PTR __Where$[ebp+4]
  000fd	89 4d e8	 mov	 DWORD PTR __Before$122022[ebp], ecx

; 779  : 			erase(--_Before);

  00100	8d 4d e8	 lea	 ecx, DWORD PTR __Before$122022[ebp]
  00103	89 55 ec	 mov	 DWORD PTR __Before$122022[ebp+4], edx
  00106	e8 00 00 00 00	 call	 ??F?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEAAV012@XZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator--
  0010b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0010e	8b 10		 mov	 edx, DWORD PTR [eax]
  00110	51		 push	 ecx
  00111	52		 push	 edx
  00112	8d 45 d8	 lea	 eax, DWORD PTR $T136164[ebp]
  00115	50		 push	 eax
  00116	8b ce		 mov	 ecx, esi
  00118	e8 00 00 00 00	 call	 ?erase@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE?AV?$_Iterator@$00@12@V?$_Const_iterator@$00@12@@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::erase
  0011d	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  00120	e8 00 00 00 00	 call	 ??E?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEAAV012@XZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator++
  00125	8d 4d 10	 lea	 ecx, DWORD PTR __First$[ebp]
  00128	51		 push	 ecx
  00129	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  0012c	e8 00 00 00 00	 call	 ??9?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBE_NABV012@@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator!=
  00131	84 c0		 test	 al, al
  00133	75 c2		 jne	 SHORT $LL3@Insert
$LN1@Insert:

; 780  : 			}
; 781  : 		_RERAISE;

  00135	6a 00		 push	 0
  00137	6a 00		 push	 0
  00139	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Insert:

; 782  : 		_CATCH_END
; 783  : 		}

  0013e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00141	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00148	59		 pop	 ecx
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 1c 00	 ret	 28			; 0000001cH
$LN91@Insert:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Insert<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1> >
PUBLIC	??1?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::~ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
??1?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::~ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?clear@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::clear
  0000e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00019	51		 push	 ecx
  0001a	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
  00029	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	c3		 ret	 0
??1?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ ENDP ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::~ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >
_TEXT	ENDS
PUBLIC	??$insert@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::insert<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1> >
; Function compile flags: /Ogtpy
;	COMDAT ??$insert@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 8
__First$ = 16						; size = 8
$T136436 = 24						; size = 1
__Last$ = 24						; size = 8
??$insert@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::insert<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1> >, COMDAT
; _this$ = ecx

; 731  : 		{	// insert [_First, _Last) at _Where
; 732  : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));

  00000	8b 44 24 14	 mov	 eax, DWORD PTR $T136436[esp-4]
  00004	8b 54 24 18	 mov	 edx, DWORD PTR __Last$[esp]
  00008	50		 push	 eax
  00009	8b 44 24 18	 mov	 eax, DWORD PTR __Last$[esp]
  0000d	52		 push	 edx
  0000e	8b 54 24 18	 mov	 edx, DWORD PTR __First$[esp+8]
  00012	50		 push	 eax
  00013	8b 44 24 18	 mov	 eax, DWORD PTR __First$[esp+8]
  00017	52		 push	 edx
  00018	8b 54 24 18	 mov	 edx, DWORD PTR __Where$[esp+16]
  0001c	50		 push	 eax
  0001d	8b 44 24 18	 mov	 eax, DWORD PTR __Where$[esp+16]
  00021	52		 push	 edx
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Insert<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1> >

; 733  : 		}

  00028	c2 18 00	 ret	 24			; 00000018H
??$insert@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00@Z ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::insert<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1> >
_TEXT	ENDS
PUBLIC	??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@ABV01@@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@ABV01@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@ABV01@@Z$7
__unwindtable$??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T136445 = -28						; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T136875 = 8						; size = 1
__Right$ = 8						; size = 4
??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@ABV01@@Z PROC ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >, COMDAT
; _this$ = ecx

; 467  : 		{	// construct list by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00030	6a 04		 push	 4
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	83 c4 04	 add	 esp, 4
  0003a	85 c0		 test	 eax, eax
  0003c	74 04		 je	 SHORT $LN28@list@2
  0003e	89 30		 mov	 DWORD PTR [eax], esi
  00040	eb 02		 jmp	 SHORT $LN29@list@2
$LN28@list@2:
  00042	33 c0		 xor	 eax, eax
$LN29@list@2:
  00044	89 06		 mov	 DWORD PTR [esi], eax
  00046	8b ce		 mov	 ecx, esi
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0004f	e8 00 00 00 00	 call	 ?_Buynode@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEPAU_Node@?$_List_nod@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@2@XZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Buynode

; 468  : 		_TRY_BEGIN
; 469  : 		insert(begin(), _Right.begin(), _Right.end());

  00054	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00057	8b 3e		 mov	 edi, DWORD PTR [esi]
  00059	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0005c	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00063	8b 10		 mov	 edx, DWORD PTR [eax]
  00065	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00068	8b 18		 mov	 ebx, DWORD PTR [eax]
  0006a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0006c	89 5d e8	 mov	 DWORD PTR $T136445[ebp+4], ebx
  0006f	8b 5d 08	 mov	 ebx, DWORD PTR $T136875[ebp]
  00072	53		 push	 ebx
  00073	50		 push	 eax
  00074	8b 45 e8	 mov	 eax, DWORD PTR $T136445[ebp+4]
  00077	51		 push	 ecx
  00078	50		 push	 eax
  00079	51		 push	 ecx
  0007a	52		 push	 edx
  0007b	57		 push	 edi
  0007c	8b ce		 mov	 ecx, esi
  0007e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00082	e8 00 00 00 00	 call	 ??$_Insert@V?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXV?$_Const_iterator@$00@01@00Uforward_iterator_tag@1@@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Insert<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1> >

; 473  : 		_CATCH_END
; 474  : 		}

  00087	8b c6		 mov	 eax, esi
  00089	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00093	59		 pop	 ecx
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 04 00	 ret	 4
__catch$??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@ABV01@@Z$0:

; 470  : 		_CATCH_ALL
; 471  : 		_Tidy();

  0009d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	e8 00 00 00 00	 call	 ?_Tidy@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@IAEXXZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Tidy

; 472  : 		_RERAISE;

  000a5	6a 00		 push	 0
  000a7	6a 00		 push	 0
  000a9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN121@list@2:
  000ae	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_val@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ
__ehhandler$??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >
PUBLIC	??_7?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::`vftable'
PUBLIC	??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >
PUBLIC	??_R4?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?IsNotEnd@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::IsNotEnd
PUBLIC	?Next@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::Next
EXTRN	??_E?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R0?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8 DD 00H ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath'
	DB	'@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShe'
	DB	'd@@@std@@@std@@@ForEach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ DD 00H ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@@8
	DD	FLAT:??_R3?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ DD FLAT:??_R4?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::`vftable'
	DD	FLAT:??_E?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:?IsNotEnd@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
	DD	FLAT:?Next@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z$0
__ehfuncinfo$??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\platform\foreach.h
xdata$x	ENDS
;	COMDAT ??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_container$ = 8						; size = 4
??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >, COMDAT
; _this$ = ecx

; 36   : 				: ContainerCopy (container), EndIterator (ContainerCopy.end()), Iterator (ContainerCopy.begin()) { }

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002a	33 db		 xor	 ebx, ebx
  0002c	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
  00030	88 5e 05	 mov	 BYTE PTR [esi+5], bl
  00033	8b 44 24 24	 mov	 eax, DWORD PTR _container$[esp+28]
  00037	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  0003a	50		 push	 eax
  0003b	8b cf		 mov	 ecx, edi
  0003d	89 5c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebx
  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@6B@
  00047	e8 00 00 00 00	 call	 ??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@ABV01@@Z ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >
  0004c	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0004f	89 5e 24	 mov	 DWORD PTR [esi+36], ebx
  00052	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00055	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00057	89 4e 24	 mov	 DWORD PTR [esi+36], ecx
  0005a	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0005d	8b 02		 mov	 eax, DWORD PTR [edx]
  0005f	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00062	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00065	8b 07		 mov	 eax, DWORD PTR [edi]
  00067	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  0006a	8b c6		 mov	 eax, esi
  0006c	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  00070	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00077	59		 pop	 ecx
  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >
; Function compile flags: /Ogtpy
;	COMDAT ?IsNotEnd@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
_TEXT	SEGMENT
?IsNotEnd@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::IsNotEnd, COMDAT
; _this$ = ecx

; 38   : 			virtual bool IsNotEnd () const { bool r = InnerContinue && Iterator != EndIterator; InnerContinue = false; return r; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  00007	74 21		 je	 SHORT $LN3@IsNotEnd
  00009	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0000c	85 c0		 test	 eax, eax
  0000e	74 05		 je	 SHORT $LN10@IsNotEnd
  00010	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  00013	74 05		 je	 SHORT $LN9@IsNotEnd
$LN10@IsNotEnd:
  00015	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@IsNotEnd:
  0001a	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0001d	3b 46 28	 cmp	 eax, DWORD PTR [esi+40]
  00020	74 08		 je	 SHORT $LN3@IsNotEnd
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	b0 01		 mov	 al, 1
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
$LN3@IsNotEnd:
  0002a	32 c0		 xor	 al, al
  0002c	88 46 04	 mov	 BYTE PTR [esi+4], al
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
?IsNotEnd@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ENDP ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::IsNotEnd
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Next@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ
_TEXT	SEGMENT
?Next@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::Next, COMDAT
; _this$ = ecx

; 39   : 			virtual void Next () const { ++Iterator; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00006	85 c0		 test	 eax, eax
  00008	75 0c		 jne	 SHORT $LN25@Next
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000f	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00012	85 c0		 test	 eax, eax
  00014	74 04		 je	 SHORT $LN19@Next
$LN25@Next:
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	eb 02		 jmp	 SHORT $LN20@Next
$LN19@Next:
  0001a	33 c0		 xor	 eax, eax
$LN20@Next:
  0001c	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0001f	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00022	75 05		 jne	 SHORT $LN5@Next
  00024	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Next:
  00029	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00031	5e		 pop	 esi
  00032	c3		 ret	 0
?Next@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ ENDP ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::Next
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z PROC ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?clear@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::clear
  0000e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00019	51		 push	 ecx
  0001a	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
  00029	f6 44 24 0c 01	 test	 BYTE PTR ___flags$[esp+4], 1
  0002e	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00034	74 09		 je	 SHORT $LN30@scalar@6
  00036	57		 push	 edi
  00037	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003c	83 c4 04	 add	 esp, 4
$LN30@scalar@6:
  0003f	8b c7		 mov	 eax, edi
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	c2 04 00	 ret	 4
??_G?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z ENDP ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z
_TEXT	SEGMENT
$T137235 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_container$ = 12					; size = 4
??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >, COMDAT

; 69   : 		{

  00000	51		 push	 ecx

; 70   : 			return ContainerForward <T> (container);

  00001	8b 44 24 0c	 mov	 eax, DWORD PTR _container$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	50		 push	 eax
  0000b	8b ce		 mov	 ecx, esi
  0000d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T137235[esp+12], 0
  00015	e8 00 00 00 00	 call	 ??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >::ContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi

; 71   : 		}

  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >
_TEXT	ENDS
PUBLIC	??_C@_08FHEKFNDB@keyfiles?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0BE@EJPKDEGH@SELECT_KEYFILE_PATH?$AA@	; `string'
PUBLIC	??_C@_0P@CDPPHMOE@SELECT_KEYFILE?$AA@		; `string'
PUBLIC	??_C@_0O@JNGBBDK@KEYFILES_NOTE?$AA@		; `string'
PUBLIC	??_C@_07BGLJIIHG@KEYFILE?$AA@			; `string'
PUBLIC	??_C@_0N@OGGIJBFO@IDD_KEYFILES?$AA@		; `string'
PUBLIC	_KeyFilesDlgProc@16
EXTRN	__imp__DragFinish@4:PROC
EXTRN	__imp__DragQueryFileA@16:PROC
EXTRN	__imp__EndDialog@8:PROC
EXTRN	_IsButtonChecked:PROC
EXTRN	_Applink:PROC
EXTRN	_KeyfileGeneratorDlgProc@16:PROC
EXTRN	_strcpy_s:PROC
EXTRN	?WideToSingleString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z:PROC ; WideToSingleString
EXTRN	__imp__DialogBoxParamW@20:PROC
EXTRN	_SecurityTokenKeyfileDlgProc@16:PROC
EXTRN	_hInst:DWORD
EXTRN	_BrowseDirectories:PROC
EXTRN	_SelectMultipleFilesNext:PROC
EXTRN	_SelectMultipleFiles:PROC
EXTRN	_bHistory:DWORD
EXTRN	_ToHyperlink:PROC
EXTRN	__imp__SetWindowTextW@8:PROC
EXTRN	_CompensateXDPI:PROC
EXTRN	__imp__SendMessageW@16:PROC
EXTRN	__imp__DragAcceptFiles@8:PROC
EXTRN	_LocalizeDialog:PROC
;	COMDAT ?origParam@?1??KeyFilesDlgProc@@9@16@4UKeyFilesDlgParam@@A
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_BSS	SEGMENT
?origParam@?1??KeyFilesDlgProc@@9@16@4UKeyFilesDlgParam@@A DQ 01H DUP (?) ; `KeyFilesDlgProc'::`2'::origParam
_BSS	ENDS
;	COMDAT ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
_BSS	SEGMENT
?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A DD 01H DUP (?) ; `KeyFilesDlgProc'::`2'::param
_BSS	ENDS
;	COMDAT ??_C@_08FHEKFNDB@keyfiles?$AA@
CONST	SEGMENT
??_C@_08FHEKFNDB@keyfiles?$AA@ DB 'keyfiles', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EJPKDEGH@SELECT_KEYFILE_PATH?$AA@
CONST	SEGMENT
??_C@_0BE@EJPKDEGH@SELECT_KEYFILE_PATH?$AA@ DB 'SELECT_KEYFILE_PATH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CDPPHMOE@SELECT_KEYFILE?$AA@
CONST	SEGMENT
??_C@_0P@CDPPHMOE@SELECT_KEYFILE?$AA@ DB 'SELECT_KEYFILE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JNGBBDK@KEYFILES_NOTE?$AA@
CONST	SEGMENT
??_C@_0O@JNGBBDK@KEYFILES_NOTE?$AA@ DB 'KEYFILES_NOTE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07BGLJIIHG@KEYFILE?$AA@
CONST	SEGMENT
??_C@_07BGLJIIHG@KEYFILE?$AA@ DB 'KEYFILE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OGGIJBFO@IDD_KEYFILES?$AA@
CONST	SEGMENT
??_C@_0N@OGGIJBFO@IDD_KEYFILES?$AA@ DB 'IDD_KEYFILES', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\keyfiles.c
CONST	ENDS
;	COMDAT _KeyFilesDlgProc@16
_TEXT	SEGMENT
_selectedTokenKeyfiles$119502 = -140			; size = 28
_LvCol$118953 = -140					; size = 32
_LvItem$119669 = -108					; size = 52
_$S1$119627 = -108					; size = 52
$T137245 = -56						; size = 28
$T137246 = -28						; size = 28
_hwndDlg$ = 8						; size = 4
_msg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_KeyFilesDlgProc@16 PROC				; COMDAT

; 421  : 	static KeyFilesDlgParam *param;
; 422  : 	static KeyFilesDlgParam origParam;
; 423  : 
; 424  : 	WORD lw = LOWORD (wParam);
; 425  : 
; 426  : 	switch (msg)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _msg$[esp-4]
  00004	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  0000a	53		 push	 ebx
  0000b	55		 push	 ebp
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	3d 10 01 00 00	 cmp	 eax, 272		; 00000110H
  00013	0f 87 a2 01 00
	00		 ja	 $LN39@KeyFilesDl
  00019	74 72		 je	 SHORT $LN32@KeyFilesDl
  0001b	83 f8 10	 cmp	 eax, 16			; 00000010H
  0001e	0f 84 2c 06 00
	00		 je	 $LN1@KeyFilesDl
  00024	83 f8 4e	 cmp	 eax, 78			; 0000004eH
  00027	0f 85 a0 01 00
	00		 jne	 $LN33@KeyFilesDl

; 586  : 
; 587  : 	case WM_NOTIFY:
; 588  : 		if (((LPNMHDR) lParam)->code == LVN_ITEMCHANGED)

  0002d	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR _lParam$[esp+152]
  00034	83 78 08 9b	 cmp	 DWORD PTR [eax+8], -101	; ffffff9bH
  00038	0f 85 8f 01 00
	00		 jne	 $LN33@KeyFilesDl

; 589  : 		{
; 590  : 			EnableWindow (GetDlgItem (hwndDlg, IDC_KEYREMOVE),
; 591  : 				ListView_GetNextItem (GetDlgItem (hwndDlg, IDC_KEYLIST), -1, LVIS_SELECTED) != -1);

  0003e	8b b4 24 a0 00
	00 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+152]
  00045	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  0004b	6a 02		 push	 2
  0004d	6a ff		 push	 -1
  0004f	68 0c 10 00 00	 push	 4108			; 0000100cH
  00054	68 b4 13 00 00	 push	 5044			; 000013b4H
  00059	56		 push	 esi
  0005a	ff d7		 call	 edi
  0005c	50		 push	 eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00063	33 c9		 xor	 ecx, ecx
  00065	83 f8 ff	 cmp	 eax, -1
  00068	0f 95 c1	 setne	 cl
  0006b	51		 push	 ecx
  0006c	68 c3 13 00 00	 push	 5059			; 000013c3H
  00071	56		 push	 esi
  00072	ff d7		 call	 edi
  00074	50		 push	 eax
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5d		 pop	 ebp
  0007e	b8 01 00 00 00	 mov	 eax, 1
  00083	5b		 pop	 ebx

; 608  : }

  00084	81 c4 8c 00 00
	00		 add	 esp, 140		; 0000008cH
  0008a	c2 10 00	 ret	 16			; 00000010H
$LN32@KeyFilesDl:

; 427  : 	{
; 428  : 	case WM_INITDIALOG:
; 429  : 		{
; 430  : 			LVCOLUMNW LvCol;
; 431  : 			HWND hList = GetDlgItem (hwndDlg, IDC_KEYLIST);

  0008d	8b b4 24 a0 00
	00 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+152]
  00094	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetDlgItem@8
  0009a	68 b4 13 00 00	 push	 5044			; 000013b4H
  0009f	56		 push	 esi
  000a0	ff d3		 call	 ebx
  000a2	8b f8		 mov	 edi, eax

; 432  : 
; 433  : 			param = (KeyFilesDlgParam *) lParam;

  000a4	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR _lParam$[esp+152]

; 434  : 			origParam = *(KeyFilesDlgParam *) lParam;

  000ab	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b0	a3 00 00 00 00	 mov	 DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A, eax

; 435  : 
; 436  : 			param->FirstKeyFile = KeyFileCloneAll (param->FirstKeyFile);

  000b5	8b c2		 mov	 eax, edx
  000b7	50		 push	 eax
  000b8	89 0d 00 00 00
	00		 mov	 DWORD PTR ?origParam@?1??KeyFilesDlgProc@@9@16@4UKeyFilesDlgParam@@A, ecx
  000be	89 15 04 00 00
	00		 mov	 DWORD PTR ?origParam@?1??KeyFilesDlgProc@@9@16@4UKeyFilesDlgParam@@A+4, edx
  000c4	e8 00 00 00 00	 call	 _KeyFileCloneAll
  000c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A

; 437  : 
; 438  : 			LocalizeDialog (hwndDlg, "IDD_KEYFILES");

  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OGGIJBFO@IDD_KEYFILES?$AA@
  000d4	56		 push	 esi
  000d5	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  000d8	e8 00 00 00 00	 call	 _LocalizeDialog
  000dd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 439  : 			DragAcceptFiles (hwndDlg, TRUE);

  000e0	6a 01		 push	 1
  000e2	56		 push	 esi
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DragAcceptFiles@8

; 440  : 
; 441  : 			SendMessageW (hList,LVM_SETEXTENDEDLISTVIEWSTYLE,0,
; 442  : 				LVS_EX_FULLROWSELECT|LVS_EX_HEADERDRAGDROP
; 443  : 				); 

  000e9	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SendMessageW@16
  000ef	6a 30		 push	 48			; 00000030H
  000f1	6a 00		 push	 0
  000f3	68 36 10 00 00	 push	 4150			; 00001036H
  000f8	57		 push	 edi
  000f9	ff d5		 call	 ebp

; 444  : 
; 445  : 			memset (&LvCol,0,sizeof(LvCol));               

  000fb	33 c0		 xor	 eax, eax
  000fd	89 44 24 10	 mov	 DWORD PTR _LvCol$118953[esp+156], eax

; 446  : 			LvCol.mask = LVCF_TEXT|LVCF_WIDTH|LVCF_SUBITEM|LVCF_FMT;  
; 447  : 			LvCol.pszText = GetString ("KEYFILE");                           

  00101	68 00 00 00 00	 push	 OFFSET ??_C@_07BGLJIIHG@KEYFILE?$AA@
  00106	89 44 24 18	 mov	 DWORD PTR _LvCol$118953[esp+164], eax
  0010a	89 44 24 1c	 mov	 DWORD PTR _LvCol$118953[esp+168], eax
  0010e	89 44 24 20	 mov	 DWORD PTR _LvCol$118953[esp+172], eax
  00112	89 44 24 24	 mov	 DWORD PTR _LvCol$118953[esp+176], eax
  00116	89 44 24 28	 mov	 DWORD PTR _LvCol$118953[esp+180], eax
  0011a	89 44 24 2c	 mov	 DWORD PTR _LvCol$118953[esp+184], eax
  0011e	89 44 24 30	 mov	 DWORD PTR _LvCol$118953[esp+188], eax
  00122	c7 44 24 14 0f
	00 00 00	 mov	 DWORD PTR _LvCol$118953[esp+160], 15 ; 0000000fH
  0012a	e8 00 00 00 00	 call	 _GetString

; 448  : 			LvCol.cx = CompensateXDPI (374);

  0012f	68 76 01 00 00	 push	 374			; 00000176H
  00134	89 44 24 24	 mov	 DWORD PTR _LvCol$118953[esp+176], eax
  00138	e8 00 00 00 00	 call	 _CompensateXDPI
  0013d	83 c4 08	 add	 esp, 8

; 449  : 			LvCol.fmt = LVCFMT_LEFT;
; 450  : 			SendMessageW (hList, LVM_INSERTCOLUMNW, 0, (LPARAM)&LvCol);

  00140	8d 54 24 10	 lea	 edx, DWORD PTR _LvCol$118953[esp+156]
  00144	52		 push	 edx
  00145	6a 00		 push	 0
  00147	68 61 10 00 00	 push	 4193			; 00001061H
  0014c	57		 push	 edi
  0014d	89 44 24 28	 mov	 DWORD PTR _LvCol$118953[esp+180], eax
  00151	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR _LvCol$118953[esp+176], 0
  00159	ff d5		 call	 ebp

; 451  : 
; 452  : 			LoadKeyList (hwndDlg, param->FirstKeyFile);

  0015b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  00160	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00163	8b ce		 mov	 ecx, esi
  00165	e8 00 00 00 00	 call	 ?LoadKeyList@@YAXPAUHWND__@@PAUKeyFileStruct@@@Z ; LoadKeyList

; 453  : 			SetCheckBox (hwndDlg, IDC_KEYFILES_ENABLE, param->EnableKeyFiles);

  0016a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  00170	8b 11		 mov	 edx, DWORD PTR [ecx]
  00172	52		 push	 edx
  00173	68 c5 13 00 00	 push	 5061			; 000013c5H
  00178	56		 push	 esi
  00179	e8 00 00 00 00	 call	 _SetCheckBox

; 454  : 
; 455  : 			SetWindowTextW(GetDlgItem(hwndDlg, IDT_KEYFILES_NOTE), GetString ("KEYFILES_NOTE"));

  0017e	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JNGBBDK@KEYFILES_NOTE?$AA@
  00183	e8 00 00 00 00	 call	 _GetString
  00188	83 c4 10	 add	 esp, 16			; 00000010H
  0018b	50		 push	 eax
  0018c	68 d0 13 00 00	 push	 5072			; 000013d0H
  00191	56		 push	 esi
  00192	ff d3		 call	 ebx
  00194	50		 push	 eax
  00195	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 456  : 
; 457  : 			ToHyperlink (hwndDlg, IDC_LINK_KEYFILES_INFO);

  0019b	68 ea 13 00 00	 push	 5098			; 000013eaH
  001a0	56		 push	 esi
  001a1	e8 00 00 00 00	 call	 _ToHyperlink
  001a6	83 c4 08	 add	 esp, 8
  001a9	5f		 pop	 edi
  001aa	5e		 pop	 esi

; 584  : 		}
; 585  : 		return 1;

  001ab	b8 01 00 00 00	 mov	 eax, 1
  001b0	5d		 pop	 ebp
  001b1	5b		 pop	 ebx

; 608  : }

  001b2	81 c4 8c 00 00
	00		 add	 esp, 140		; 0000008cH
  001b8	c2 10 00	 ret	 16			; 00000010H
$LN39@KeyFilesDl:

; 421  : 	static KeyFilesDlgParam *param;
; 422  : 	static KeyFilesDlgParam origParam;
; 423  : 
; 424  : 	WORD lw = LOWORD (wParam);
; 425  : 
; 426  : 	switch (msg)

  001bb	3d 11 01 00 00	 cmp	 eax, 273		; 00000111H
  001c0	74 1a		 je	 SHORT $LN31@KeyFilesDl
  001c2	3d 33 02 00 00	 cmp	 eax, 563		; 00000233H
  001c7	0f 84 cd 04 00
	00		 je	 $LN143@KeyFilesDl
$LN33@KeyFilesDl:
  001cd	5f		 pop	 edi
  001ce	5e		 pop	 esi
  001cf	5d		 pop	 ebp

; 592  : 			return 1;
; 593  : 		}
; 594  : 		break;
; 595  : 
; 596  : 	case WM_CLOSE:
; 597  : 		KeyFileRemoveAll (&param->FirstKeyFile);
; 598  : 		*param = origParam;
; 599  : 
; 600  : 		EndDialog (hwndDlg, IDCLOSE);
; 601  : 		return 1;
; 602  : 
; 603  : 		break;
; 604  : 
; 605  : 	}
; 606  : 
; 607  : 	return 0;

  001d0	33 c0		 xor	 eax, eax
  001d2	5b		 pop	 ebx

; 608  : }

  001d3	81 c4 8c 00 00
	00		 add	 esp, 140		; 0000008cH
  001d9	c2 10 00	 ret	 16			; 00000010H
$LN31@KeyFilesDl:

; 458  : 		}
; 459  : 		return 1;
; 460  : 
; 461  : 	case WM_COMMAND:
; 462  : 
; 463  : 		if (lw == IDC_KEYADD)

  001dc	8b 9c 24 a8 00
	00 00		 mov	 ebx, DWORD PTR _wParam$[esp+152]
  001e3	b8 c2 13 00 00	 mov	 eax, 5058		; 000013c2H
  001e8	66 3b d8	 cmp	 bx, ax
  001eb	0f 85 7d 00 00
	00		 jne	 $LN30@KeyFilesDl

; 464  : 		{
; 465  : 			KeyFile *kf = (KeyFile *) malloc (sizeof (KeyFile));

  001f1	68 08 01 00 00	 push	 264			; 00000108H
  001f6	e8 00 00 00 00	 call	 _malloc

; 466  : 			if (SelectMultipleFiles (hwndDlg, "SELECT_KEYFILE", kf->FileName, bHistory))

  001fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHistory
  00201	8b 9c 24 a4 00
	00 00		 mov	 ebx, DWORD PTR _hwndDlg$[esp+156]
  00208	51		 push	 ecx
  00209	8b f0		 mov	 esi, eax
  0020b	56		 push	 esi
  0020c	68 00 00 00 00	 push	 OFFSET ??_C@_0P@CDPPHMOE@SELECT_KEYFILE?$AA@
  00211	53		 push	 ebx
  00212	e8 00 00 00 00	 call	 _SelectMultipleFiles
  00217	83 c4 14	 add	 esp, 20			; 00000014H
  0021a	85 c0		 test	 eax, eax
  0021c	74 35		 je	 SHORT $LN26@KeyFilesDl
  0021e	8b ff		 npad	 2
$LL28@KeyFilesDl:

; 467  : 			{
; 468  : 				do
; 469  : 				{
; 470  : 					param->FirstKeyFile = KeyFileAdd (param->FirstKeyFile, kf);

  00220	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  00226	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00229	56		 push	 esi
  0022a	52		 push	 edx
  0022b	e8 00 00 00 00	 call	 _KeyFileAdd

; 471  : 					LoadKeyList (hwndDlg, param->FirstKeyFile);

  00230	8b cb		 mov	 ecx, ebx
  00232	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00235	e8 00 00 00 00	 call	 ?LoadKeyList@@YAXPAUHWND__@@PAUKeyFileStruct@@@Z ; LoadKeyList

; 472  : 
; 473  : 					kf = (KeyFile *) malloc (sizeof (KeyFile));

  0023a	68 08 01 00 00	 push	 264			; 00000108H
  0023f	e8 00 00 00 00	 call	 _malloc
  00244	8b f0		 mov	 esi, eax

; 474  : 				} while (SelectMultipleFilesNext (kf->FileName));

  00246	56		 push	 esi
  00247	e8 00 00 00 00	 call	 _SelectMultipleFilesNext
  0024c	83 c4 10	 add	 esp, 16			; 00000010H
  0024f	85 c0		 test	 eax, eax
  00251	75 cd		 jne	 SHORT $LL28@KeyFilesDl
$LN26@KeyFilesDl:

; 475  : 			}
; 476  : 
; 477  : 			free (kf);

  00253	56		 push	 esi
$LN24@KeyFilesDl:
  00254	e8 00 00 00 00	 call	 _free
  00259	83 c4 04	 add	 esp, 4
  0025c	5f		 pop	 edi
  0025d	5e		 pop	 esi
  0025e	5d		 pop	 ebp

; 584  : 		}
; 585  : 		return 1;

  0025f	b8 01 00 00 00	 mov	 eax, 1
  00264	5b		 pop	 ebx

; 608  : }

  00265	81 c4 8c 00 00
	00		 add	 esp, 140		; 0000008cH
  0026b	c2 10 00	 ret	 16			; 00000010H
$LN30@KeyFilesDl:

; 478  : 			return 1;
; 479  : 		}
; 480  : 
; 481  : 		if (lw == IDC_ADD_KEYFILE_PATH)

  0026e	b8 c7 13 00 00	 mov	 eax, 5063		; 000013c7H
  00273	66 3b d8	 cmp	 bx, ax
  00276	75 55		 jne	 SHORT $LN25@KeyFilesDl

; 482  : 		{
; 483  : 			KeyFile *kf = (KeyFile *) malloc (sizeof (KeyFile));

  00278	68 08 01 00 00	 push	 264			; 00000108H
  0027d	e8 00 00 00 00	 call	 _malloc

; 484  : 
; 485  : 			if (BrowseDirectories (hwndDlg,"SELECT_KEYFILE_PATH", kf->FileName))

  00282	8b 9c 24 a4 00
	00 00		 mov	 ebx, DWORD PTR _hwndDlg$[esp+156]
  00289	8b f0		 mov	 esi, eax
  0028b	56		 push	 esi
  0028c	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@EJPKDEGH@SELECT_KEYFILE_PATH?$AA@
  00291	53		 push	 ebx
  00292	e8 00 00 00 00	 call	 _BrowseDirectories
  00297	83 c4 10	 add	 esp, 16			; 00000010H

; 486  : 			{
; 487  : 				param->FirstKeyFile = KeyFileAdd (param->FirstKeyFile, kf);

  0029a	56		 push	 esi
  0029b	85 c0		 test	 eax, eax
  0029d	74 b5		 je	 SHORT $LN24@KeyFilesDl
  0029f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  002a5	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  002a8	51		 push	 ecx
  002a9	e8 00 00 00 00	 call	 _KeyFileAdd
  002ae	83 c4 08	 add	 esp, 8

; 488  : 				LoadKeyList (hwndDlg, param->FirstKeyFile);

  002b1	8b cb		 mov	 ecx, ebx
  002b3	89 47 04	 mov	 DWORD PTR [edi+4], eax
  002b6	e8 00 00 00 00	 call	 ?LoadKeyList@@YAXPAUHWND__@@PAUKeyFileStruct@@@Z ; LoadKeyList
  002bb	5f		 pop	 edi
  002bc	5e		 pop	 esi
  002bd	5d		 pop	 ebp

; 584  : 		}
; 585  : 		return 1;

  002be	b8 01 00 00 00	 mov	 eax, 1
  002c3	5b		 pop	 ebx

; 608  : }

  002c4	81 c4 8c 00 00
	00		 add	 esp, 140		; 0000008cH
  002ca	c2 10 00	 ret	 16			; 00000010H
$LN25@KeyFilesDl:

; 489  : 			}
; 490  : 			else
; 491  : 			{
; 492  : 				free (kf);
; 493  : 			}
; 494  : 			return 1;
; 495  : 		}
; 496  : 
; 497  : 		if (lw == IDC_TOKEN_FILES_ADD)

  002cd	ba f0 13 00 00	 mov	 edx, 5104		; 000013f0H
  002d2	66 3b da	 cmp	 bx, dx
  002d5	0f 85 cd 01 00
	00		 jne	 $LN22@KeyFilesDl

; 498  : 		{
; 499  : 			list <SecurityTokenKeyfilePath> selectedTokenKeyfiles;

  002db	8d 4c 24 10	 lea	 ecx, DWORD PTR _selectedTokenKeyfiles$119502[esp+156]
  002df	e8 00 00 00 00	 call	 ??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >

; 500  : 			if (DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_TOKEN_KEYFILES), hwndDlg, (DLGPROC) SecurityTokenKeyfileDlgProc, (LPARAM) &selectedTokenKeyfiles) == IDOK)

  002e4	8b 9c 24 a0 00
	00 00		 mov	 ebx, DWORD PTR _hwndDlg$[esp+152]
  002eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  002f1	8d 44 24 10	 lea	 eax, DWORD PTR _selectedTokenKeyfiles$119502[esp+156]
  002f5	50		 push	 eax
  002f6	68 00 00 00 00	 push	 OFFSET _SecurityTokenKeyfileDlgProc@16
  002fb	53		 push	 ebx
  002fc	68 1a 02 00 00	 push	 538			; 0000021aH
  00301	51		 push	 ecx
  00302	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  00308	83 f8 01	 cmp	 eax, 1
  0030b	0f 85 5d 01 00
	00		 jne	 $LN21@KeyFilesDl

; 501  : 			{
; 502  : 				foreach (const SecurityTokenKeyfilePath &keyPath, selectedTokenKeyfiles)

  00311	8d 54 24 10	 lea	 edx, DWORD PTR _selectedTokenKeyfiles$119502[esp+156]
  00315	52		 push	 edx
  00316	8d 44 24 34	 lea	 eax, DWORD PTR _$S1$119627[esp+160]
  0031a	50		 push	 eax
  0031b	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >
  00320	8b 54 24 38	 mov	 edx, DWORD PTR _$S1$119627[esp+164]
  00324	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00327	83 c4 08	 add	 esp, 8
  0032a	8d 4c 24 30	 lea	 ecx, DWORD PTR _$S1$119627[esp+156]
  0032e	ff d0		 call	 eax
  00330	84 c0		 test	 al, al
  00332	0f 84 2d 01 00
	00		 je	 $LN18@KeyFilesDl
  00338	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL20@KeyFilesDl:
  00340	8d 4c 24 5c	 lea	 ecx, DWORD PTR _$S1$119627[esp+200]
  00344	e8 00 00 00 00	 call	 ??D?$_Const_iterator@$00@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QBEABUSecurityTokenKeyfilePath@CipherShed@@XZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::_Const_iterator<1>::operator*
  00349	80 7c 24 35 00	 cmp	 BYTE PTR _$S1$119627[esp+161], 0
  0034e	8b e8		 mov	 ebp, eax
  00350	0f 94 c0	 sete	 al
  00353	88 44 24 35	 mov	 BYTE PTR _$S1$119627[esp+161], al
  00357	84 c0		 test	 al, al
  00359	0f 84 e4 00 00
	00		 je	 $LN19@KeyFilesDl
  0035f	90		 npad	 1
$LL46@KeyFilesDl:

; 503  : 				{
; 504  : 					KeyFile *kf = (KeyFile *) malloc (sizeof (KeyFile));

  00360	68 08 01 00 00	 push	 264			; 00000108H
  00365	e8 00 00 00 00	 call	 _malloc
  0036a	83 c4 04	 add	 esp, 4

; 505  : 					strcpy_s (kf->FileName, sizeof (kf->FileName), WideToSingleString (keyPath).c_str());

  0036d	8d 4c 24 64	 lea	 ecx, DWORD PTR $T137245[esp+156]
  00371	51		 push	 ecx
  00372	8b cd		 mov	 ecx, ebp
  00374	8b f8		 mov	 edi, eax
  00376	e8 00 00 00 00	 call	 ??BSecurityTokenKeyfilePath@CipherShed@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; CipherShed::SecurityTokenKeyfilePath::operator std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0037b	8d 54 24 64	 lea	 edx, DWORD PTR $T137245[esp+156]
  0037f	52		 push	 edx
  00380	8d 84 24 84 00
	00 00		 lea	 eax, DWORD PTR $T137246[esp+160]
  00387	50		 push	 eax
  00388	e8 00 00 00 00	 call	 ?WideToSingleString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; WideToSingleString
  0038d	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  00392	83 c4 08	 add	 esp, 8
  00395	39 70 18	 cmp	 DWORD PTR [eax+24], esi
  00398	72 05		 jb	 SHORT $LN54@KeyFilesDl
  0039a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0039d	eb 03		 jmp	 SHORT $LN55@KeyFilesDl
$LN54@KeyFilesDl:
  0039f	83 c0 04	 add	 eax, 4
$LN55@KeyFilesDl:
  003a2	50		 push	 eax
  003a3	68 04 01 00 00	 push	 260			; 00000104H
  003a8	57		 push	 edi
  003a9	e8 00 00 00 00	 call	 _strcpy_s
  003ae	83 c4 0c	 add	 esp, 12			; 0000000cH
  003b1	39 b4 24 98 00
	00 00		 cmp	 DWORD PTR $T137246[esp+180], esi
  003b8	72 10		 jb	 SHORT $LN72@KeyFilesDl
  003ba	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR $T137246[esp+160]
  003c1	51		 push	 ecx
  003c2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003c7	83 c4 04	 add	 esp, 4
$LN72@KeyFilesDl:
  003ca	33 f6		 xor	 esi, esi
  003cc	83 7c 24 7c 08	 cmp	 DWORD PTR $T137245[esp+180], 8
  003d1	c7 84 24 98 00
	00 00 0f 00 00
	00		 mov	 DWORD PTR $T137246[esp+180], 15 ; 0000000fH
  003dc	89 b4 24 94 00
	00 00		 mov	 DWORD PTR $T137246[esp+176], esi
  003e3	c6 84 24 84 00
	00 00 00	 mov	 BYTE PTR $T137246[esp+160], 0
  003eb	72 0d		 jb	 SHORT $LN100@KeyFilesDl
  003ed	8b 54 24 68	 mov	 edx, DWORD PTR $T137245[esp+160]
  003f1	52		 push	 edx
  003f2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003f7	83 c4 04	 add	 esp, 4
$LN100@KeyFilesDl:
  003fa	89 74 24 78	 mov	 DWORD PTR $T137245[esp+176], esi

; 506  : 
; 507  : 					param->FirstKeyFile = KeyFileAdd (param->FirstKeyFile, kf);

  003fe	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  00404	33 c0		 xor	 eax, eax
  00406	c7 44 24 7c 07
	00 00 00	 mov	 DWORD PTR $T137245[esp+180], 7
  0040e	66 89 44 24 68	 mov	 WORD PTR $T137245[esp+160], ax
  00413	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00416	57		 push	 edi
  00417	51		 push	 ecx
  00418	e8 00 00 00 00	 call	 _KeyFileAdd
  0041d	83 c4 08	 add	 esp, 8

; 508  : 					LoadKeyList (hwndDlg, param->FirstKeyFile);

  00420	8b cb		 mov	 ecx, ebx
  00422	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00425	e8 00 00 00 00	 call	 ?LoadKeyList@@YAXPAUHWND__@@PAUKeyFileStruct@@@Z ; LoadKeyList
  0042a	80 7c 24 35 00	 cmp	 BYTE PTR _$S1$119627[esp+161], 0
  0042f	c6 44 24 34 01	 mov	 BYTE PTR _$S1$119627[esp+160], 1
  00434	0f 94 c0	 sete	 al
  00437	88 44 24 35	 mov	 BYTE PTR _$S1$119627[esp+161], al
  0043b	84 c0		 test	 al, al
  0043d	0f 85 1d ff ff
	ff		 jne	 $LL46@KeyFilesDl
$LN19@KeyFilesDl:

; 501  : 			{
; 502  : 				foreach (const SecurityTokenKeyfilePath &keyPath, selectedTokenKeyfiles)

  00443	8b 54 24 30	 mov	 edx, DWORD PTR _$S1$119627[esp+156]
  00447	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0044a	8d 4c 24 30	 lea	 ecx, DWORD PTR _$S1$119627[esp+156]
  0044e	ff d0		 call	 eax
  00450	8b 54 24 30	 mov	 edx, DWORD PTR _$S1$119627[esp+156]
  00454	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00457	8d 4c 24 30	 lea	 ecx, DWORD PTR _$S1$119627[esp+156]
  0045b	ff d0		 call	 eax
  0045d	84 c0		 test	 al, al
  0045f	0f 85 db fe ff
	ff		 jne	 $LL20@KeyFilesDl
$LN18@KeyFilesDl:

; 509  : 				}

  00465	8d 4c 24 30	 lea	 ecx, DWORD PTR _$S1$119627[esp+156]
  00469	e8 00 00 00 00	 call	 ??1?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
$LN21@KeyFilesDl:

; 510  : 			}
; 511  : 
; 512  : 			return 1;

  0046e	8d 4c 24 10	 lea	 ecx, DWORD PTR _selectedTokenKeyfiles$119502[esp+156]
  00472	e8 00 00 00 00	 call	 ?clear@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::clear
  00477	8b 4c 24 24	 mov	 ecx, DWORD PTR _selectedTokenKeyfiles$119502[esp+176]
  0047b	51		 push	 ecx
  0047c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00481	8b 54 24 14	 mov	 edx, DWORD PTR _selectedTokenKeyfiles$119502[esp+160]
  00485	52		 push	 edx
  00486	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR _selectedTokenKeyfiles$119502[esp+184], 0
  0048e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00493	83 c4 08	 add	 esp, 8
  00496	5f		 pop	 edi
  00497	5e		 pop	 esi
  00498	5d		 pop	 ebp

; 584  : 		}
; 585  : 		return 1;

  00499	b8 01 00 00 00	 mov	 eax, 1
  0049e	5b		 pop	 ebx

; 608  : }

  0049f	81 c4 8c 00 00
	00		 add	 esp, 140		; 0000008cH
  004a5	c2 10 00	 ret	 16			; 00000010H
$LN22@KeyFilesDl:

; 513  : 		}
; 514  : 
; 515  : 		if (lw == IDC_KEYREMOVE)

  004a8	b8 c3 13 00 00	 mov	 eax, 5059		; 000013c3H
  004ad	66 3b d8	 cmp	 bx, ax
  004b0	0f 85 b3 00 00
	00		 jne	 $LN14@KeyFilesDl

; 516  : 		{
; 517  : 			HWND list = GetDlgItem (hwndDlg, IDC_KEYLIST);

  004b6	8b ac 24 a0 00
	00 00		 mov	 ebp, DWORD PTR _hwndDlg$[esp+152]
  004bd	68 b4 13 00 00	 push	 5044			; 000013b4H
  004c2	55		 push	 ebp
  004c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8

; 518  : 			LVITEM LvItem;
; 519  : 			memset (&LvItem, 0, sizeof(LvItem));

  004c9	6a 34		 push	 52			; 00000034H
  004cb	8d 4c 24 34	 lea	 ecx, DWORD PTR _LvItem$119669[esp+160]
  004cf	6a 00		 push	 0
  004d1	51		 push	 ecx
  004d2	8b f0		 mov	 esi, eax
  004d4	e8 00 00 00 00	 call	 _memset

; 520  : 			LvItem.mask = LVIF_PARAM;   
; 521  : 			LvItem.iItem = -1;
; 522  : 
; 523  : 			while (-1 != (LvItem.iItem = ListView_GetNextItem (list, LvItem.iItem, LVIS_SELECTED)))

  004d9	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  004df	83 c4 0c	 add	 esp, 12			; 0000000cH
  004e2	6a 02		 push	 2
  004e4	6a ff		 push	 -1
  004e6	68 0c 10 00 00	 push	 4108			; 0000100cH
  004eb	56		 push	 esi
  004ec	c7 44 24 40 04
	00 00 00	 mov	 DWORD PTR _LvItem$119669[esp+172], 4
  004f4	c7 44 24 44 ff
	ff ff ff	 mov	 DWORD PTR _LvItem$119669[esp+176], -1
  004fc	ff d3		 call	 ebx
  004fe	89 44 24 34	 mov	 DWORD PTR _LvItem$119669[esp+160], eax
  00502	83 f8 ff	 cmp	 eax, -1
  00505	74 41		 je	 SHORT $LN12@KeyFilesDl
$LL13@KeyFilesDl:

; 524  : 			{
; 525  : 				ListView_GetItem (list, &LvItem);

  00507	8d 54 24 30	 lea	 edx, DWORD PTR _LvItem$119669[esp+156]
  0050b	52		 push	 edx
  0050c	6a 00		 push	 0
  0050e	68 05 10 00 00	 push	 4101			; 00001005H
  00513	56		 push	 esi
  00514	ff d3		 call	 ebx

; 526  : 				param->FirstKeyFile = KeyFileRemove (param->FirstKeyFile, (KeyFile *) LvItem.lParam);

  00516	a1 00 00 00 00	 mov	 eax, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  0051b	8b 7c 24 50	 mov	 edi, DWORD PTR _LvItem$119669[esp+188]
  0051f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00522	e8 00 00 00 00	 call	 ?KeyFileRemove@@YAPAUKeyFileStruct@@PAU1@0@Z ; KeyFileRemove
  00527	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  0052d	6a 02		 push	 2
  0052f	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00532	8b 54 24 38	 mov	 edx, DWORD PTR _LvItem$119669[esp+164]
  00536	52		 push	 edx
  00537	68 0c 10 00 00	 push	 4108			; 0000100cH
  0053c	56		 push	 esi
  0053d	ff d3		 call	 ebx
  0053f	89 44 24 34	 mov	 DWORD PTR _LvItem$119669[esp+160], eax
  00543	83 f8 ff	 cmp	 eax, -1
  00546	75 bf		 jne	 SHORT $LL13@KeyFilesDl
$LN12@KeyFilesDl:

; 527  : 			} 
; 528  : 			
; 529  : 			LoadKeyList (hwndDlg, param->FirstKeyFile);

  00548	a1 00 00 00 00	 mov	 eax, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  0054d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00550	8b cd		 mov	 ecx, ebp
  00552	e8 00 00 00 00	 call	 ?LoadKeyList@@YAXPAUHWND__@@PAUKeyFileStruct@@@Z ; LoadKeyList
  00557	5f		 pop	 edi
  00558	5e		 pop	 esi
  00559	5d		 pop	 ebp

; 584  : 		}
; 585  : 		return 1;

  0055a	b8 01 00 00 00	 mov	 eax, 1
  0055f	5b		 pop	 ebx

; 608  : }

  00560	81 c4 8c 00 00
	00		 add	 esp, 140		; 0000008cH
  00566	c2 10 00	 ret	 16			; 00000010H
$LN14@KeyFilesDl:

; 530  :  			return 1;
; 531  : 		}
; 532  : 
; 533  : 		if (lw == IDC_KEYREMOVEALL)

  00569	b9 c4 13 00 00	 mov	 ecx, 5060		; 000013c4H
  0056e	66 3b d9	 cmp	 bx, cx
  00571	75 32		 jne	 SHORT $LN11@KeyFilesDl

; 534  : 		{
; 535  : 			KeyFileRemoveAll (&param->FirstKeyFile);

  00573	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  00579	83 c2 04	 add	 edx, 4
  0057c	52		 push	 edx
  0057d	e8 00 00 00 00	 call	 _KeyFileRemoveAll

; 536  : 			LoadKeyList (hwndDlg, NULL);

  00582	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR _hwndDlg$[esp+156]
  00589	83 c4 04	 add	 esp, 4
  0058c	33 c0		 xor	 eax, eax
  0058e	e8 00 00 00 00	 call	 ?LoadKeyList@@YAXPAUHWND__@@PAUKeyFileStruct@@@Z ; LoadKeyList
  00593	5f		 pop	 edi
  00594	5e		 pop	 esi
  00595	5d		 pop	 ebp

; 584  : 		}
; 585  : 		return 1;

  00596	b8 01 00 00 00	 mov	 eax, 1
  0059b	5b		 pop	 ebx

; 608  : }

  0059c	81 c4 8c 00 00
	00		 add	 esp, 140		; 0000008cH
  005a2	c2 10 00	 ret	 16			; 00000010H
$LN11@KeyFilesDl:

; 537  : 			return 1;
; 538  : 		}
; 539  : 
; 540  : 		if (lw == IDC_GENERATE_KEYFILE)

  005a5	b8 ca 13 00 00	 mov	 eax, 5066		; 000013caH
  005aa	66 3b d8	 cmp	 bx, ax
  005ad	75 33		 jne	 SHORT $LN10@KeyFilesDl

; 541  : 		{
; 542  : 			DialogBoxParamW (hInst, 
; 543  : 				MAKEINTRESOURCEW (IDD_KEYFILE_GENERATOR), hwndDlg,
; 544  : 				(DLGPROC) KeyfileGeneratorDlgProc, (LPARAM) 0);

  005af	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR _hwndDlg$[esp+152]
  005b6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  005bc	6a 00		 push	 0
  005be	68 00 00 00 00	 push	 OFFSET _KeyfileGeneratorDlgProc@16
  005c3	51		 push	 ecx
  005c4	68 95 13 00 00	 push	 5013			; 00001395H
  005c9	52		 push	 edx
  005ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  005d0	5f		 pop	 edi
  005d1	5e		 pop	 esi
  005d2	5d		 pop	 ebp

; 584  : 		}
; 585  : 		return 1;

  005d3	b8 01 00 00 00	 mov	 eax, 1
  005d8	5b		 pop	 ebx

; 608  : }

  005d9	81 c4 8c 00 00
	00		 add	 esp, 140		; 0000008cH
  005df	c2 10 00	 ret	 16			; 00000010H
$LN10@KeyFilesDl:

; 545  : 			return 1;
; 546  : 		}
; 547  : 
; 548  : 		if (lw == IDC_LINK_KEYFILES_INFO)

  005e2	b8 ea 13 00 00	 mov	 eax, 5098		; 000013eaH
  005e7	66 3b d8	 cmp	 bx, ax
  005ea	75 19		 jne	 SHORT $LN9@KeyFilesDl

; 549  : 		{
; 550  : 			Applink ("keyfiles", TRUE, "");

  005ec	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  005f1	6a 01		 push	 1
  005f3	68 00 00 00 00	 push	 OFFSET ??_C@_08FHEKFNDB@keyfiles?$AA@
  005f8	e8 00 00 00 00	 call	 _Applink
  005fd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 551  : 		}
; 552  : 
; 553  : 		if (lw == IDOK)

  00600	e9 9c 00 00 00	 jmp	 $LN7@KeyFilesDl
$LN9@KeyFilesDl:
  00605	66 83 fb 01	 cmp	 bx, 1
  00609	75 3f		 jne	 SHORT $LN8@KeyFilesDl

; 554  : 		{
; 555  : 			param->EnableKeyFiles = IsButtonChecked (GetDlgItem (hwndDlg, IDC_KEYFILES_ENABLE));

  0060b	8b b4 24 a0 00
	00 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+152]
  00612	68 c5 13 00 00	 push	 5061			; 000013c5H
  00617	56		 push	 esi
  00618	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0061e	50		 push	 eax
  0061f	e8 00 00 00 00	 call	 _IsButtonChecked
  00624	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  0062a	83 c4 04	 add	 esp, 4

; 556  : 			EndDialog (hwndDlg, IDOK);

  0062d	6a 01		 push	 1
  0062f	56		 push	 esi
  00630	89 01		 mov	 DWORD PTR [ecx], eax
  00632	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
  00638	5f		 pop	 edi
  00639	5e		 pop	 esi
  0063a	5d		 pop	 ebp

; 584  : 		}
; 585  : 		return 1;

  0063b	b8 01 00 00 00	 mov	 eax, 1
  00640	5b		 pop	 ebx

; 608  : }

  00641	81 c4 8c 00 00
	00		 add	 esp, 140		; 0000008cH
  00647	c2 10 00	 ret	 16			; 00000010H
$LN8@KeyFilesDl:

; 557  : 			return 1;
; 558  : 		}
; 559  : 
; 560  : 		if (lw == IDCANCEL)

  0064a	66 83 fb 02	 cmp	 bx, 2
  0064e	75 51		 jne	 SHORT $LN7@KeyFilesDl
$LN1@KeyFilesDl:

; 561  : 		{
; 562  : 			KeyFileRemoveAll (&param->FirstKeyFile);

  00650	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  00656	83 c2 04	 add	 edx, 4
  00659	52		 push	 edx
  0065a	e8 00 00 00 00	 call	 _KeyFileRemoveAll

; 563  : 			*param = origParam;

  0065f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  00664	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?origParam@?1??KeyFilesDlgProc@@9@16@4UKeyFilesDlgParam@@A
  0066a	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?origParam@?1??KeyFilesDlgProc@@9@16@4UKeyFilesDlgParam@@A+4
  00670	83 c4 04	 add	 esp, 4
  00673	89 08		 mov	 DWORD PTR [eax], ecx
  00675	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 564  : 
; 565  : 			EndDialog (hwndDlg, IDCLOSE);

  00678	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR _hwndDlg$[esp+152]
  0067f	6a 08		 push	 8
  00681	50		 push	 eax
  00682	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
  00688	5f		 pop	 edi
  00689	5e		 pop	 esi
  0068a	5d		 pop	 ebp

; 584  : 		}
; 585  : 		return 1;

  0068b	b8 01 00 00 00	 mov	 eax, 1
  00690	5b		 pop	 ebx

; 608  : }

  00691	81 c4 8c 00 00
	00		 add	 esp, 140		; 0000008cH
  00697	c2 10 00	 ret	 16			; 00000010H
$LN143@KeyFilesDl:

; 566  : 			return 1;

  0069a	8b 9c 24 a8 00
	00 00		 mov	 ebx, DWORD PTR _wParam$[esp+152]
$LN7@KeyFilesDl:

; 567  : 		}
; 568  : 
; 569  : 	case WM_DROPFILES:
; 570  : 		{
; 571  : 			HDROP hdrop = (HDROP) wParam;
; 572  : 
; 573  : 			int i = 0, count = DragQueryFile (hdrop, 0xFFFFFFFF, NULL, 0);

  006a1	33 ed		 xor	 ebp, ebp
  006a3	55		 push	 ebp
  006a4	55		 push	 ebp
  006a5	6a ff		 push	 -1
  006a7	53		 push	 ebx
  006a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DragQueryFileA@16
  006ae	8b f8		 mov	 edi, eax

; 574  : 
; 575  : 			while (count-- > 0)

  006b0	85 ff		 test	 edi, edi
  006b2	7e 4c		 jle	 SHORT $LN140@KeyFilesDl
$LL144@KeyFilesDl:

; 576  : 			{
; 577  : 				KeyFile *kf = (KeyFile *) malloc (sizeof (KeyFile));

  006b4	68 08 01 00 00	 push	 264			; 00000108H
  006b9	4f		 dec	 edi
  006ba	e8 00 00 00 00	 call	 _malloc
  006bf	83 c4 04	 add	 esp, 4

; 578  : 				DragQueryFile (hdrop, i++, kf->FileName, sizeof (kf->FileName));

  006c2	68 04 01 00 00	 push	 260			; 00000104H
  006c7	8b f0		 mov	 esi, eax
  006c9	56		 push	 esi
  006ca	55		 push	 ebp
  006cb	53		 push	 ebx
  006cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DragQueryFileA@16

; 579  : 				param->FirstKeyFile = KeyFileAdd (param->FirstKeyFile, kf);

  006d2	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  006d8	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  006db	56		 push	 esi
  006dc	51		 push	 ecx
  006dd	45		 inc	 ebp
  006de	e8 00 00 00 00	 call	 _KeyFileAdd

; 580  : 				LoadKeyList (hwndDlg, param->FirstKeyFile);

  006e3	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR _hwndDlg$[esp+160]
  006ea	83 c4 08	 add	 esp, 8
  006ed	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  006f0	e8 00 00 00 00	 call	 ?LoadKeyList@@YAXPAUHWND__@@PAUKeyFileStruct@@@Z ; LoadKeyList
  006f5	8b 9c 24 a8 00
	00 00		 mov	 ebx, DWORD PTR _wParam$[esp+152]
  006fc	85 ff		 test	 edi, edi
  006fe	7f b4		 jg	 SHORT $LL144@KeyFilesDl
$LN140@KeyFilesDl:

; 581  : 			}
; 582  : 
; 583  : 			DragFinish (hdrop);

  00700	53		 push	 ebx
  00701	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DragFinish@4
  00707	5f		 pop	 edi
  00708	5e		 pop	 esi
  00709	5d		 pop	 ebp

; 584  : 		}
; 585  : 		return 1;

  0070a	b8 01 00 00 00	 mov	 eax, 1
  0070f	5b		 pop	 ebx

; 608  : }

  00710	81 c4 8c 00 00
	00		 add	 esp, 140		; 0000008cH
  00716	c2 10 00	 ret	 16			; 00000010H
_KeyFilesDlgProc@16 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@CCFPMIGO@IDC_TOKEN_FILES_ADD?$AA@	; `string'
PUBLIC	??_C@_0BF@NLAKGKFC@IDC_ADD_KEYFILE_PATH?$AA@	; `string'
PUBLIC	??_C@_0L@CJIBJHKI@IDC_KEYADD?$AA@		; `string'
PUBLIC	_KeyfilesPopupMenu
EXTRN	__imp__DestroyMenu@4:PROC
EXTRN	__imp__TrackPopupMenu@28:PROC
EXTRN	__imp__AppendMenuW@16:PROC
EXTRN	__imp__CreatePopupMenu@0:PROC
;	COMDAT ??_C@_0BE@CCFPMIGO@IDC_TOKEN_FILES_ADD?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
CONST	SEGMENT
??_C@_0BE@CCFPMIGO@IDC_TOKEN_FILES_ADD?$AA@ DB 'IDC_TOKEN_FILES_ADD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NLAKGKFC@IDC_ADD_KEYFILE_PATH?$AA@
CONST	SEGMENT
??_C@_0BF@NLAKGKFC@IDC_ADD_KEYFILE_PATH?$AA@ DB 'IDC_ADD_KEYFILE_PATH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CJIBJHKI@IDC_KEYADD?$AA@
CONST	SEGMENT
??_C@_0L@CJIBJHKI@IDC_KEYADD?$AA@ DB 'IDC_KEYADD', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\keyfiles.c
CONST	ENDS
;	COMDAT _KeyfilesPopupMenu
_TEXT	SEGMENT
_status$ = -144						; size = 4
_popup$ = -140						; size = 4
_$S2$119773 = -136					; size = 52
$T137630 = -84						; size = 28
_selectedTokenKeyfiles$119764 = -56			; size = 28
$T137631 = -28						; size = 28
_hwndDlg$ = 8						; size = 4
_popupPosition$ = 12					; size = 8
_param$ = 20						; size = 4
_KeyfilesPopupMenu PROC					; COMDAT

; 616  : {

  00000	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	56		 push	 esi
  00009	57		 push	 edi

; 617  : 	HMENU popup = CreatePopupMenu ();

  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0
  00010	8b e8		 mov	 ebp, eax

; 618  : 	int sel;
; 619  : 	BOOL status = FALSE;

  00012	33 db		 xor	 ebx, ebx

; 620  : 
; 621  : 	AppendMenuW (popup, MF_STRING, IDM_KEYFILES_POPUP_ADD_FILES, GetString ("IDC_KEYADD"));

  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CJIBJHKI@IDC_KEYADD?$AA@
  00019	89 6c 24 18	 mov	 DWORD PTR _popup$[esp+164], ebp
  0001d	89 5c 24 14	 mov	 DWORD PTR _status$[esp+164], ebx
  00021	e8 00 00 00 00	 call	 _GetString
  00026	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__AppendMenuW@16
  0002c	83 c4 04	 add	 esp, 4
  0002f	50		 push	 eax
  00030	68 29 23 00 00	 push	 9001			; 00002329H
  00035	53		 push	 ebx
  00036	55		 push	 ebp
  00037	ff d6		 call	 esi

; 622  : 	AppendMenuW (popup, MF_STRING, IDM_KEYFILES_POPUP_ADD_DIR, GetString ("IDC_ADD_KEYFILE_PATH"));

  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@NLAKGKFC@IDC_ADD_KEYFILE_PATH?$AA@
  0003e	e8 00 00 00 00	 call	 _GetString
  00043	83 c4 04	 add	 esp, 4
  00046	50		 push	 eax
  00047	68 2a 23 00 00	 push	 9002			; 0000232aH
  0004c	53		 push	 ebx
  0004d	55		 push	 ebp
  0004e	ff d6		 call	 esi

; 623  : 	AppendMenuW (popup, MF_STRING, IDM_KEYFILES_POPUP_ADD_TOKEN_FILES, GetString ("IDC_TOKEN_FILES_ADD"));

  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CCFPMIGO@IDC_TOKEN_FILES_ADD?$AA@
  00055	e8 00 00 00 00	 call	 _GetString
  0005a	83 c4 04	 add	 esp, 4
  0005d	50		 push	 eax
  0005e	68 2b 23 00 00	 push	 9003			; 0000232bH
  00063	53		 push	 ebx
  00064	55		 push	 ebp
  00065	ff d6		 call	 esi

; 624  : 
; 625  : 	sel = TrackPopupMenu (popup, TPM_RETURNCMD | TPM_LEFTBUTTON, popupPosition.x, popupPosition.y, 0, hwndDlg, NULL);

  00067	8b bc 24 a4 00
	00 00		 mov	 edi, DWORD PTR _hwndDlg$[esp+156]
  0006e	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR _popupPosition$[esp+160]
  00075	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR _popupPosition$[esp+156]
  0007c	53		 push	 ebx
  0007d	57		 push	 edi
  0007e	53		 push	 ebx
  0007f	50		 push	 eax
  00080	51		 push	 ecx
  00081	68 00 01 00 00	 push	 256			; 00000100H
  00086	55		 push	 ebp
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TrackPopupMenu@28

; 626  : 
; 627  : 	switch (sel)

  0008d	2d 29 23 00 00	 sub	 eax, 9001		; 00002329H
  00092	0f 84 59 02 00
	00		 je	 $LN16@KeyfilesPo
  00098	83 e8 01	 sub	 eax, 1
  0009b	0f 84 fb 01 00
	00		 je	 $LN11@KeyfilesPo
  000a1	83 e8 01	 sub	 eax, 1
  000a4	0f 85 b3 02 00
	00		 jne	 $LN17@KeyfilesPo

; 664  : 
; 665  : 	case IDM_KEYFILES_POPUP_ADD_TOKEN_FILES:
; 666  : 		{
; 667  : 			list <SecurityTokenKeyfilePath> selectedTokenKeyfiles;

  000aa	8d 4c 24 68	 lea	 ecx, DWORD PTR _selectedTokenKeyfiles$119764[esp+160]
  000ae	e8 00 00 00 00	 call	 ??0?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >

; 668  : 			if (DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_TOKEN_KEYFILES), hwndDlg, (DLGPROC) SecurityTokenKeyfileDlgProc, (LPARAM) &selectedTokenKeyfiles) == IDOK)

  000b3	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  000b8	8d 54 24 68	 lea	 edx, DWORD PTR _selectedTokenKeyfiles$119764[esp+160]
  000bc	52		 push	 edx
  000bd	68 00 00 00 00	 push	 OFFSET _SecurityTokenKeyfileDlgProc@16
  000c2	57		 push	 edi
  000c3	68 1a 02 00 00	 push	 538			; 0000021aH
  000c8	50		 push	 eax
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  000cf	83 f8 01	 cmp	 eax, 1
  000d2	0f 85 98 01 00
	00		 jne	 $LN139@KeyfilesPo

; 669  : 			{
; 670  : 				foreach (const SecurityTokenKeyfilePath &keyPath, selectedTokenKeyfiles)

  000d8	8d 4c 24 68	 lea	 ecx, DWORD PTR _selectedTokenKeyfiles$119764[esp+160]
  000dc	51		 push	 ecx
  000dd	8d 54 24 1c	 lea	 edx, DWORD PTR _$S2$119773[esp+164]
  000e1	52		 push	 edx
  000e2	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> > >
  000e7	8b 44 24 20	 mov	 eax, DWORD PTR _$S2$119773[esp+168]
  000eb	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000ee	83 c4 08	 add	 esp, 8
  000f1	8d 4c 24 18	 lea	 ecx, DWORD PTR _$S2$119773[esp+160]
  000f5	ff d2		 call	 edx
  000f7	84 c0		 test	 al, al
  000f9	0f 84 4d 01 00
	00		 je	 $LN4@KeyfilesPo
  000ff	8b bc 24 b0 00
	00 00		 mov	 edi, DWORD PTR _param$[esp+156]
$LL169@KeyfilesPo:
  00106	8b 44 24 44	 mov	 eax, DWORD PTR _$S2$119773[esp+204]
  0010a	3b c3		 cmp	 eax, ebx
  0010c	75 0d		 jne	 SHORT $LN168@KeyfilesPo
  0010e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00113	8b 44 24 44	 mov	 eax, DWORD PTR _$S2$119773[esp+204]
  00117	3b c3		 cmp	 eax, ebx
  00119	74 04		 je	 SHORT $LN45@KeyfilesPo
$LN168@KeyfilesPo:
  0011b	8b 00		 mov	 eax, DWORD PTR [eax]
  0011d	eb 02		 jmp	 SHORT $LN46@KeyfilesPo
$LN45@KeyfilesPo:
  0011f	33 c0		 xor	 eax, eax
$LN46@KeyfilesPo:
  00121	8b 4c 24 48	 mov	 ecx, DWORD PTR _$S2$119773[esp+208]
  00125	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00128	75 05		 jne	 SHORT $LN31@KeyfilesPo
  0012a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN31@KeyfilesPo:
  0012f	8b 6c 24 48	 mov	 ebp, DWORD PTR _$S2$119773[esp+208]
  00133	83 c5 08	 add	 ebp, 8
  00136	38 5c 24 1d	 cmp	 BYTE PTR _$S2$119773[esp+165], bl
  0013a	0f 94 c0	 sete	 al
  0013d	88 44 24 1d	 mov	 BYTE PTR _$S2$119773[esp+165], al
  00141	3a c3		 cmp	 al, bl
  00143	0f 84 dd 00 00
	00		 je	 $LN5@KeyfilesPo

; 677  : 					status = TRUE;

  00149	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR _status$[esp+160], 1

; 669  : 			{
; 670  : 				foreach (const SecurityTokenKeyfilePath &keyPath, selectedTokenKeyfiles)

$LL51@KeyfilesPo:

; 671  : 				{
; 672  : 					KeyFile *kf = (KeyFile *) malloc (sizeof (KeyFile));

  00151	68 08 01 00 00	 push	 264			; 00000108H
  00156	e8 00 00 00 00	 call	 _malloc
  0015b	83 c4 04	 add	 esp, 4

; 673  : 					strcpy_s (kf->FileName, sizeof (kf->FileName), WideToSingleString (keyPath).c_str());

  0015e	8d 54 24 4c	 lea	 edx, DWORD PTR $T137630[esp+160]
  00162	52		 push	 edx
  00163	8b cd		 mov	 ecx, ebp
  00165	8b f0		 mov	 esi, eax
  00167	e8 00 00 00 00	 call	 ??BSecurityTokenKeyfilePath@CipherShed@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; CipherShed::SecurityTokenKeyfilePath::operator std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0016c	8d 44 24 4c	 lea	 eax, DWORD PTR $T137630[esp+160]
  00170	50		 push	 eax
  00171	8d 8c 24 88 00
	00 00		 lea	 ecx, DWORD PTR $T137631[esp+164]
  00178	51		 push	 ecx
  00179	e8 00 00 00 00	 call	 ?WideToSingleString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; WideToSingleString
  0017e	83 c4 08	 add	 esp, 8
  00181	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00185	72 05		 jb	 SHORT $LN59@KeyfilesPo
  00187	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0018a	eb 03		 jmp	 SHORT $LN60@KeyfilesPo
$LN59@KeyfilesPo:
  0018c	83 c0 04	 add	 eax, 4
$LN60@KeyfilesPo:
  0018f	50		 push	 eax
  00190	68 04 01 00 00	 push	 260			; 00000104H
  00195	56		 push	 esi
  00196	e8 00 00 00 00	 call	 _strcpy_s
  0019b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0019e	83 bc 24 9c 00
	00 00 10	 cmp	 DWORD PTR $T137631[esp+184], 16 ; 00000010H
  001a6	72 10		 jb	 SHORT $LN77@KeyfilesPo
  001a8	8b 94 24 88 00
	00 00		 mov	 edx, DWORD PTR $T137631[esp+164]
  001af	52		 push	 edx
  001b0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001b5	83 c4 04	 add	 esp, 4
$LN77@KeyfilesPo:
  001b8	83 7c 24 64 08	 cmp	 DWORD PTR $T137630[esp+184], 8
  001bd	c7 84 24 9c 00
	00 00 0f 00 00
	00		 mov	 DWORD PTR $T137631[esp+184], 15 ; 0000000fH
  001c8	89 9c 24 98 00
	00 00		 mov	 DWORD PTR $T137631[esp+180], ebx
  001cf	88 9c 24 88 00
	00 00		 mov	 BYTE PTR $T137631[esp+164], bl
  001d6	72 0d		 jb	 SHORT $LN105@KeyfilesPo
  001d8	8b 44 24 50	 mov	 eax, DWORD PTR $T137630[esp+164]
  001dc	50		 push	 eax
  001dd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001e2	83 c4 04	 add	 esp, 4
$LN105@KeyfilesPo:

; 674  : 
; 675  : 					param->FirstKeyFile = KeyFileAdd (param->FirstKeyFile, kf);

  001e5	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  001e8	33 c9		 xor	 ecx, ecx
  001ea	56		 push	 esi
  001eb	52		 push	 edx
  001ec	c7 44 24 6c 07
	00 00 00	 mov	 DWORD PTR $T137630[esp+192], 7
  001f4	89 5c 24 68	 mov	 DWORD PTR $T137630[esp+188], ebx
  001f8	66 89 4c 24 58	 mov	 WORD PTR $T137630[esp+172], cx
  001fd	e8 00 00 00 00	 call	 _KeyFileAdd
  00202	83 c4 08	 add	 esp, 8
  00205	38 5c 24 1d	 cmp	 BYTE PTR _$S2$119773[esp+165], bl
  00209	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0020c	0f 94 c0	 sete	 al

; 676  : 					param->EnableKeyFiles = TRUE;

  0020f	c7 07 01 00 00
	00		 mov	 DWORD PTR [edi], 1
  00215	c6 44 24 1c 01	 mov	 BYTE PTR _$S2$119773[esp+164], 1
  0021a	88 44 24 1d	 mov	 BYTE PTR _$S2$119773[esp+165], al
  0021e	3a c3		 cmp	 al, bl
  00220	0f 85 2b ff ff
	ff		 jne	 $LL51@KeyfilesPo
$LN5@KeyfilesPo:

; 669  : 			{
; 670  : 				foreach (const SecurityTokenKeyfilePath &keyPath, selectedTokenKeyfiles)

  00226	8b 44 24 18	 mov	 eax, DWORD PTR _$S2$119773[esp+160]
  0022a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0022d	8d 4c 24 18	 lea	 ecx, DWORD PTR _$S2$119773[esp+160]
  00231	ff d2		 call	 edx
  00233	8b 44 24 18	 mov	 eax, DWORD PTR _$S2$119773[esp+160]
  00237	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0023a	8d 4c 24 18	 lea	 ecx, DWORD PTR _$S2$119773[esp+160]
  0023e	ff d2		 call	 edx
  00240	84 c0		 test	 al, al
  00242	0f 85 be fe ff
	ff		 jne	 $LL169@KeyfilesPo
  00248	8b 6c 24 14	 mov	 ebp, DWORD PTR _popup$[esp+160]
$LN4@KeyfilesPo:

; 678  : 				}

  0024c	8d 4c 24 20	 lea	 ecx, DWORD PTR _$S2$119773[esp+168]
  00250	e8 00 00 00 00	 call	 ?clear@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::clear
  00255	8b 44 24 34	 mov	 eax, DWORD PTR _$S2$119773[esp+188]
  00259	50		 push	 eax
  0025a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0025f	8b 4c 24 24	 mov	 ecx, DWORD PTR _$S2$119773[esp+172]
  00263	51		 push	 ecx
  00264	89 5c 24 3c	 mov	 DWORD PTR _$S2$119773[esp+196], ebx
  00268	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0026d	83 c4 08	 add	 esp, 8
$LN139@KeyfilesPo:

; 679  : 			}
; 680  : 		}

  00270	8d 4c 24 68	 lea	 ecx, DWORD PTR _selectedTokenKeyfiles$119764[esp+160]
  00274	e8 00 00 00 00	 call	 ?clear@?$list@USecurityTokenKeyfilePath@CipherShed@@V?$allocator@USecurityTokenKeyfilePath@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::SecurityTokenKeyfilePath,std::allocator<CipherShed::SecurityTokenKeyfilePath> >::clear
  00279	8b 54 24 7c	 mov	 edx, DWORD PTR _selectedTokenKeyfiles$119764[esp+180]
  0027d	52		 push	 edx
  0027e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00283	8b 44 24 6c	 mov	 eax, DWORD PTR _selectedTokenKeyfiles$119764[esp+164]
  00287	50		 push	 eax
  00288	89 9c 24 84 00
	00 00		 mov	 DWORD PTR _selectedTokenKeyfiles$119764[esp+188], ebx
  0028f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00294	83 c4 08	 add	 esp, 8

; 681  : 		break;

  00297	e9 c1 00 00 00	 jmp	 $LN17@KeyfilesPo
$LN11@KeyfilesPo:

; 645  : 		}
; 646  : 		break;
; 647  : 
; 648  : 	case IDM_KEYFILES_POPUP_ADD_DIR:
; 649  : 		{
; 650  : 			KeyFile *kf = (KeyFile *) malloc (sizeof (KeyFile));

  0029c	68 08 01 00 00	 push	 264			; 00000108H
  002a1	e8 00 00 00 00	 call	 _malloc
  002a6	8b e8		 mov	 ebp, eax

; 651  : 
; 652  : 			if (BrowseDirectories (hwndDlg,"SELECT_KEYFILE_PATH", kf->FileName))

  002a8	55		 push	 ebp
  002a9	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@EJPKDEGH@SELECT_KEYFILE_PATH?$AA@
  002ae	57		 push	 edi
  002af	e8 00 00 00 00	 call	 _BrowseDirectories
  002b4	83 c4 10	 add	 esp, 16			; 00000010H

; 653  : 			{
; 654  : 				param->FirstKeyFile = KeyFileAdd (param->FirstKeyFile, kf);

  002b7	55		 push	 ebp
  002b8	85 c0		 test	 eax, eax
  002ba	74 2a		 je	 SHORT $LN10@KeyfilesPo
  002bc	8b b4 24 b4 00
	00 00		 mov	 esi, DWORD PTR _param$[esp+160]
  002c3	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  002c6	51		 push	 ecx
  002c7	e8 00 00 00 00	 call	 _KeyFileAdd

; 655  : 				param->EnableKeyFiles = TRUE;
; 656  : 				status = TRUE;
; 657  : 			}
; 658  : 			else

  002cc	8b 6c 24 1c	 mov	 ebp, DWORD PTR _popup$[esp+168]
  002d0	83 c4 08	 add	 esp, 8
  002d3	89 46 04	 mov	 DWORD PTR [esi+4], eax
  002d6	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1
  002dc	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR _status$[esp+160], 1
  002e4	eb 77		 jmp	 SHORT $LN17@KeyfilesPo
$LN10@KeyfilesPo:

; 659  : 			{
; 660  : 				free (kf);

  002e6	e8 00 00 00 00	 call	 _free

; 661  : 			}
; 662  : 		}
; 663  : 		break;

  002eb	8b 6c 24 18	 mov	 ebp, DWORD PTR _popup$[esp+164]
  002ef	eb 69		 jmp	 SHORT $LN170@KeyfilesPo
$LN16@KeyfilesPo:

; 628  : 	{
; 629  : 	case IDM_KEYFILES_POPUP_ADD_FILES:
; 630  : 		{
; 631  : 			KeyFile *kf = (KeyFile *) malloc (sizeof (KeyFile));

  002f1	68 08 01 00 00	 push	 264			; 00000108H
  002f6	e8 00 00 00 00	 call	 _malloc

; 632  : 			if (SelectMultipleFiles (hwndDlg, "SELECT_KEYFILE", kf->FileName, bHistory))

  002fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHistory
  00301	52		 push	 edx
  00302	8b f0		 mov	 esi, eax
  00304	56		 push	 esi
  00305	68 00 00 00 00	 push	 OFFSET ??_C@_0P@CDPPHMOE@SELECT_KEYFILE?$AA@
  0030a	57		 push	 edi
  0030b	e8 00 00 00 00	 call	 _SelectMultipleFiles
  00310	83 c4 14	 add	 esp, 20			; 00000014H
  00313	85 c0		 test	 eax, eax
  00315	74 3d		 je	 SHORT $LN15@KeyfilesPo
  00317	8b bc 24 b0 00
	00 00		 mov	 edi, DWORD PTR _param$[esp+156]
  0031e	8b ff		 npad	 2
$LL14@KeyfilesPo:

; 633  : 			{
; 634  : 				do
; 635  : 				{
; 636  : 					param->FirstKeyFile = KeyFileAdd (param->FirstKeyFile, kf);

  00320	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00323	56		 push	 esi
  00324	50		 push	 eax
  00325	e8 00 00 00 00	 call	 _KeyFileAdd

; 637  : 					kf = (KeyFile *) malloc (sizeof (KeyFile));

  0032a	68 08 01 00 00	 push	 264			; 00000108H
  0032f	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00332	e8 00 00 00 00	 call	 _malloc
  00337	8b f0		 mov	 esi, eax

; 638  : 				} while (SelectMultipleFilesNext (kf->FileName));

  00339	56		 push	 esi
  0033a	e8 00 00 00 00	 call	 _SelectMultipleFilesNext
  0033f	83 c4 10	 add	 esp, 16			; 00000010H
  00342	85 c0		 test	 eax, eax
  00344	75 da		 jne	 SHORT $LL14@KeyfilesPo

; 639  : 
; 640  : 				param->EnableKeyFiles = TRUE;

  00346	c7 07 01 00 00
	00		 mov	 DWORD PTR [edi], 1

; 641  : 				status = TRUE;

  0034c	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR _status$[esp+160], 1
$LN15@KeyfilesPo:

; 642  : 			}
; 643  : 
; 644  : 			free (kf);

  00354	56		 push	 esi
  00355	e8 00 00 00 00	 call	 _free
$LN170@KeyfilesPo:
  0035a	83 c4 04	 add	 esp, 4
$LN17@KeyfilesPo:

; 682  : 	}
; 683  : 
; 684  : 	DestroyMenu (popup);

  0035d	55		 push	 ebp
  0035e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyMenu@4

; 685  : 	return status;

  00364	8b 44 24 10	 mov	 eax, DWORD PTR _status$[esp+160]
  00368	5f		 pop	 edi
  00369	5e		 pop	 esi
  0036a	5d		 pop	 ebp
  0036b	5b		 pop	 ebx

; 686  : }

  0036c	81 c4 90 00 00
	00		 add	 esp, 144		; 00000090H
  00372	c3		 ret	 0
_KeyfilesPopupMenu ENDP
_TEXT	ENDS
END
