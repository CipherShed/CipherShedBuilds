; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\home\public\Desktop\projects\ciphershed.build\src\Common\volume\volutil.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
_DATA	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
CONST	ENDS
PUBLIC	?strstr@@YAPADPADPBD@Z				; strstr
EXTRN	_strstr:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string.h
;	COMDAT ?strstr@@YAPADPADPBD@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__SubStr$ = 12						; size = 4
?strstr@@YAPADPADPBD@Z PROC				; strstr, COMDAT

; 190  : 	{ return (char*)strstr((const char*)_Str, _SubStr); }

  00000	e9 00 00 00 00	 jmp	 _strstr
?strstr@@YAPADPADPBD@Z ENDP				; strstr
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

  00000	56		 push	 esi
  00001	8d 44 24 08	 lea	 eax, DWORD PTR __Message$[esp]
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtpy
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00009	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000e	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00013	74 09		 je	 SHORT $LN6@scalar
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
$LN6@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	_wmemcmp
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\wchar.h
;	COMDAT _wmemcmp
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcmp PROC						; COMDAT

; 1216 :         {for (; 0 < _N; ++_S1, ++_S2, --_N)

  00000	8b 54 24 0c	 mov	 edx, DWORD PTR __N$[esp-4]
  00004	56		 push	 esi
  00005	85 d2		 test	 edx, edx
  00007	76 1b		 jbe	 SHORT $LN2@wmemcmp
  00009	8b 4c 24 0c	 mov	 ecx, DWORD PTR __S2$[esp]
  0000d	8b 44 24 08	 mov	 eax, DWORD PTR __S1$[esp]
$LL4@wmemcmp:

; 1217 :                 if (*_S1 != *_S2)

  00011	66 8b 30	 mov	 si, WORD PTR [eax]
  00014	66 3b 31	 cmp	 si, WORD PTR [ecx]
  00017	75 0f		 jne	 SHORT $LN8@wmemcmp
  00019	83 c0 02	 add	 eax, 2
  0001c	83 c1 02	 add	 ecx, 2
  0001f	83 ea 01	 sub	 edx, 1
  00022	75 ed		 jne	 SHORT $LL4@wmemcmp
$LN2@wmemcmp:

; 1219 :         return (0); }

  00024	33 c0		 xor	 eax, eax
  00026	5e		 pop	 esi
  00027	c3		 ret	 0
$LN8@wmemcmp:

; 1218 :                         return (*_S1 < *_S2 ? -1 : +1);

  00028	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0002b	66 3b 01	 cmp	 ax, WORD PTR [ecx]
  0002e	5e		 pop	 esi
  0002f	1b c0		 sbb	 eax, eax
  00031	83 e0 fe	 and	 eax, -2			; fffffffeH
  00034	40		 inc	 eax

; 1219 :         return (0); }

  00035	c3		 ret	 0
_wmemcmp ENDP
_TEXT	ENDS
PUBLIC	_wmemcpy_s
EXTRN	_memcpy_s:PROC
; Function compile flags: /Ogtpy
;	COMDAT _wmemcpy_s
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__N1$ = 12						; size = 4
__S2$ = 16						; size = 4
__N$ = 20						; size = 4
_wmemcpy_s PROC						; COMDAT

; 1232 : #pragma warning( push )
; 1233 : #pragma warning( disable : 6386 )
; 1234 :             return memcpy_s(_S1, _N1*sizeof(wchar_t), _S2, _N*sizeof(wchar_t));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __N$[esp-4]
  00004	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00007	89 4c 24 10	 mov	 DWORD PTR __N$[esp-4], ecx
  0000b	8b 44 24 08	 mov	 eax, DWORD PTR __N1$[esp-4]
  0000f	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00012	89 4c 24 08	 mov	 DWORD PTR __N1$[esp-4], ecx
  00016	e9 00 00 00 00	 jmp	 _memcpy_s
_wmemcpy_s ENDP
_TEXT	ENDS
PUBLIC	_wmemmove_s
EXTRN	_memmove_s:PROC
; Function compile flags: /Ogtpy
;	COMDAT _wmemmove_s
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__N1$ = 12						; size = 4
__S2$ = 16						; size = 4
__N$ = 20						; size = 4
_wmemmove_s PROC					; COMDAT

; 1252 : #pragma warning( push )
; 1253 : #pragma warning( disable : 6386 )
; 1254 :             return memmove_s(_S1, _N1*sizeof(wchar_t), _S2, _N*sizeof(wchar_t));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __N$[esp-4]
  00004	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00007	89 4c 24 10	 mov	 DWORD PTR __N$[esp-4], ecx
  0000b	8b 44 24 08	 mov	 eax, DWORD PTR __N1$[esp-4]
  0000f	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00012	89 4c 24 08	 mov	 DWORD PTR __N1$[esp-4], ecx
  00016	e9 00 00 00 00	 jmp	 _memmove_s
_wmemmove_s ENDP
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z	; std::char_traits<wchar_t>::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z PROC	; std::char_traits<wchar_t>::assign, COMDAT

; 310  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	66 8b 08	 mov	 cx, WORD PTR [eax]
  00007	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000b	66 89 0a	 mov	 WORD PTR [edx], cx

; 311  : 		}

  0000e	c3		 ret	 0
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ENDP	; std::char_traits<wchar_t>::assign
_TEXT	ENDS
PUBLIC	?compare@?$char_traits@_W@std@@SAHPB_W0I@Z	; std::char_traits<wchar_t>::compare
; Function compile flags: /Ogtpy
;	COMDAT ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$char_traits@_W@std@@SAHPB_W0I@Z PROC		; std::char_traits<wchar_t>::compare, COMDAT

; 326  : //		_DEBUG_POINTER(_First1);
; 327  : //		_DEBUG_POINTER(_First2);
; 328  : 		return (::wmemcmp(_First1, _First2, _Count));

  00000	e9 00 00 00 00	 jmp	 _wmemcmp
?compare@?$char_traits@_W@std@@SAHPB_W0I@Z ENDP		; std::char_traits<wchar_t>::compare
_TEXT	ENDS
PUBLIC	?length@?$char_traits@_W@std@@SAIPB_W@Z		; std::char_traits<wchar_t>::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@_W@std@@SAIPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@_W@std@@SAIPB_W@Z PROC		; std::char_traits<wchar_t>::length, COMDAT

; 333  : //		_DEBUG_POINTER(_First);
; 334  : 		return (::wcslen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL3@length:
  00007	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000a	83 c0 02	 add	 eax, 2
  0000d	66 85 c9	 test	 cx, cx
  00010	75 f5		 jne	 SHORT $LL3@length
  00012	2b c2		 sub	 eax, edx
  00014	d1 f8		 sar	 eax, 1

; 335  : 		}

  00016	c3		 ret	 0
?length@?$char_traits@_W@std@@SAIPB_W@Z ENDP		; std::char_traits<wchar_t>::length
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ; std::char_traits<wchar_t>::_Copy_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_words$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z PROC	; std::char_traits<wchar_t>::_Copy_s, COMDAT

; 348  : //		_DEBUG_POINTER(_First1);
; 349  : //		_DEBUG_POINTER(_First2);
; 350  : 		_CRT_SECURE_WMEMCPY(_First1, _Size_in_words, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size_in_words$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 351  : 		return _First1;

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 352  : 		}

  00026	c3		 ret	 0
?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ENDP	; std::char_traits<wchar_t>::_Copy_s
_TEXT	ENDS
PUBLIC	?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ; std::char_traits<wchar_t>::_Move_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_words$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z PROC	; std::char_traits<wchar_t>::_Move_s, COMDAT

; 372  : //		_DEBUG_POINTER(_First1);
; 373  : //		_DEBUG_POINTER(_First2);
; 374  : 		_CRT_SECURE_WMEMMOVE(_First1, _Size_in_words, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size_in_words$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 375  : 		return (_Elem *)_First1;

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 376  : 		}

  00026	c3		 ret	 0
?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ENDP	; std::char_traits<wchar_t>::_Move_s
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 425  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 426  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?eq@?$char_traits@D@std@@SA_NABD0@Z		; std::char_traits<char>::eq
; Function compile flags: /Ogtpy
;	COMDAT ?eq@?$char_traits@D@std@@SA_NABD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq@?$char_traits@D@std@@SA_NABD0@Z PROC		; std::char_traits<char>::eq, COMDAT

; 430  : 		return (_Left == _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000a	33 c0		 xor	 eax, eax
  0000c	3a 0a		 cmp	 cl, BYTE PTR [edx]
  0000e	0f 94 c0	 sete	 al

; 431  : 		}

  00011	c3		 ret	 0
?eq@?$char_traits@D@std@@SA_NABD0@Z ENDP		; std::char_traits<char>::eq
_TEXT	ENDS
PUBLIC	?compare@?$char_traits@D@std@@SAHPBD0I@Z	; std::char_traits<char>::compare
; Function compile flags: /Ogtpy
;	COMDAT ?compare@?$char_traits@D@std@@SAHPBD0I@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$char_traits@D@std@@SAHPBD0I@Z PROC		; std::char_traits<char>::compare, COMDAT

; 441  : //		_DEBUG_POINTER(_First1);
; 442  : //		_DEBUG_POINTER(_First2);
; 443  : 		return (::memcmp(_First1, _First2, _Count));

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First1$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 10	 mov	 esi, DWORD PTR __Count$[esp]
  0000d	57		 push	 edi
  0000e	83 fe 04	 cmp	 esi, 4
  00011	72 14		 jb	 SHORT $LN11@compare
$LL4@compare:
  00013	8b 02		 mov	 eax, DWORD PTR [edx]
  00015	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00017	75 12		 jne	 SHORT $LN5@compare
  00019	83 ee 04	 sub	 esi, 4
  0001c	83 c1 04	 add	 ecx, 4
  0001f	83 c2 04	 add	 edx, 4
  00022	83 fe 04	 cmp	 esi, 4
  00025	73 ec		 jae	 SHORT $LL4@compare
$LN11@compare:
  00027	85 f6		 test	 esi, esi
  00029	74 44		 je	 SHORT $LN6@compare
$LN5@compare:
  0002b	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0002e	0f b6 39	 movzx	 edi, BYTE PTR [ecx]
  00031	2b c7		 sub	 eax, edi
  00033	75 31		 jne	 SHORT $LN7@compare
  00035	83 fe 01	 cmp	 esi, 1
  00038	76 35		 jbe	 SHORT $LN6@compare
  0003a	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  0003e	0f b6 79 01	 movzx	 edi, BYTE PTR [ecx+1]
  00042	2b c7		 sub	 eax, edi
  00044	75 20		 jne	 SHORT $LN7@compare
  00046	83 fe 02	 cmp	 esi, 2
  00049	76 24		 jbe	 SHORT $LN6@compare
  0004b	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  0004f	0f b6 79 02	 movzx	 edi, BYTE PTR [ecx+2]
  00053	2b c7		 sub	 eax, edi
  00055	75 0f		 jne	 SHORT $LN7@compare
  00057	83 fe 03	 cmp	 esi, 3
  0005a	76 13		 jbe	 SHORT $LN6@compare
  0005c	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  00060	0f b6 49 03	 movzx	 ecx, BYTE PTR [ecx+3]
  00064	2b c1		 sub	 eax, ecx
$LN7@compare:
  00066	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  00069	5f		 pop	 edi
  0006a	83 c8 01	 or	 eax, 1
  0006d	5e		 pop	 esi

; 444  : 		}

  0006e	c3		 ret	 0
$LN6@compare:
  0006f	5f		 pop	 edi

; 441  : //		_DEBUG_POINTER(_First1);
; 442  : //		_DEBUG_POINTER(_First2);
; 443  : 		return (::memcmp(_First1, _First2, _Count));

  00070	33 c0		 xor	 eax, eax
  00072	5e		 pop	 esi

; 444  : 		}

  00073	c3		 ret	 0
?compare@?$char_traits@D@std@@SAHPBD0I@Z ENDP		; std::char_traits<char>::compare
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 448  : //		_DEBUG_POINTER(_First);
; 449  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@length@2:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $LL3@length@2
  0000e	2b c2		 sub	 eax, edx

; 450  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Copy_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Copy_s, COMDAT

; 463  : //		_DEBUG_POINTER(_First1);
; 464  : //		_DEBUG_POINTER(_First2);
; 465  : 		_CRT_SECURE_MEMCPY(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 466  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 467  : 		}

  00020	c3		 ret	 0
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Copy_s
_TEXT	ENDS
PUBLIC	?find@?$char_traits@D@std@@SAPBDPBDIABD@Z	; std::char_traits<char>::find
EXTRN	_memchr:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?find@?$char_traits@D@std@@SAPBDPBDIABD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 4
?find@?$char_traits@D@std@@SAPBDPBDIABD@Z PROC		; std::char_traits<char>::find, COMDAT

; 472  : //		_DEBUG_POINTER(_First);
; 473  : 		return ((const _Elem *)::memchr(_First, _Ch, _Count));

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ch$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00008	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0000b	50		 push	 eax
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __First$[esp]
  00010	52		 push	 edx
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _memchr
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 474  : 		}

  0001a	c3		 ret	 0
?find@?$char_traits@D@std@@SAPBDPBDIABD@Z ENDP		; std::char_traits<char>::find
_TEXT	ENDS
PUBLIC	?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Move_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Move_s, COMDAT

; 487  : //		_DEBUG_POINTER(_First1);
; 488  : //		_DEBUG_POINTER(_First2);
; 489  : 		_CRT_SECURE_MEMMOVE(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 490  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 491  : 		}

  00020	c3		 ret	 0
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Move_s
_TEXT	ENDS
PUBLIC	_CreateFullVolumePath
EXTRN	_UpperCaseCopy:PROC
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\volume\volutil.cpp
;	COMDAT _CreateFullVolumePath
_TEXT	SEGMENT
_lpszDiskFile$ = 8					; size = 4
_lpszFileName$ = 12					; size = 4
_bDevice$ = 16						; size = 4
_CreateFullVolumePath PROC				; COMDAT

; 21   : {

  00000	56		 push	 esi

; 22   : 	UpperCaseCopy (lpszDiskFile, lpszFileName);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _lpszDiskFile$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR _lpszFileName$[esp+4]
  0000a	57		 push	 edi
  0000b	56		 push	 esi
  0000c	e8 00 00 00 00	 call	 _UpperCaseCopy

; 23   : 
; 24   : 	*bDevice = FALSE;

  00011	8b 44 24 1c	 mov	 eax, DWORD PTR _bDevice$[esp+12]
  00015	83 c4 08	 add	 esp, 8
  00018	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 25   : 	// seriously, just use strlen and optimize or #define and sizeof: http://stackoverflow.com/questions/12541739/determining-the-length-of-a-string-literal
; 26   : 	if (memcmp (lpszDiskFile, "\\DEVICE", sizeof (char) * 7) == 0)

  0001e	81 3e 5c 44 45
	56		 cmp	 DWORD PTR [esi], 1447380060 ; 5645445cH
  00024	75 18		 jne	 SHORT $LN1@CreateFull
  00026	80 7e 04 49	 cmp	 BYTE PTR [esi+4], 73	; 00000049H
  0002a	75 12		 jne	 SHORT $LN1@CreateFull
  0002c	80 7e 05 43	 cmp	 BYTE PTR [esi+5], 67	; 00000043H
  00030	75 0c		 jne	 SHORT $LN1@CreateFull
  00032	80 7e 06 45	 cmp	 BYTE PTR [esi+6], 69	; 00000045H
  00036	75 06		 jne	 SHORT $LN1@CreateFull

; 27   : 	{
; 28   : 		*bDevice = TRUE;

  00038	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
$LN1@CreateFull:

; 29   : 	}
; 30   : 
; 31   : 	strcpy (lpszDiskFile, lpszFileName);

  0003e	8b d6		 mov	 edx, esi
  00040	8b c7		 mov	 eax, edi
  00042	2b d7		 sub	 edx, edi
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
$LL4@CreateFull:
  00046	8a 08		 mov	 cl, BYTE PTR [eax]
  00048	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0004b	40		 inc	 eax
  0004c	84 c9		 test	 cl, cl
  0004e	75 f6		 jne	 SHORT $LL4@CreateFull

; 32   : 
; 33   : #if _DEBUG
; 34   : 	OutputDebugStringA("CreateFullVolumePath: ");
; 35   : 	OutputDebugStringA(lpszDiskFile);
; 36   : 	OutputDebugStringA("\n");
; 37   : #endif
; 38   : 
; 39   : }

  00050	c3		 ret	 0
_CreateFullVolumePath ENDP
_TEXT	ENDS
PUBLIC	??_C@_08FALOLEII@?2DEVICE?2?$AA@		; `string'
PUBLIC	??_C@_08MBBBEOPI@?2Device?2?$AA@		; `string'
PUBLIC	_IsVolumeDeviceHosted
;	COMDAT ??_C@_08FALOLEII@?2DEVICE?2?$AA@
CONST	SEGMENT
??_C@_08FALOLEII@?2DEVICE?2?$AA@ DB '\DEVICE\', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MBBBEOPI@?2Device?2?$AA@
CONST	SEGMENT
??_C@_08MBBBEOPI@?2Device?2?$AA@ DB '\Device\', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _IsVolumeDeviceHosted
_TEXT	SEGMENT
_lpszDiskFile$ = 8					; size = 4
_IsVolumeDeviceHosted PROC				; COMDAT

; 42   : {

  00000	56		 push	 esi

; 43   : 	// and what about \\DeViCe\\ or \\device\\ ?
; 44   : 	return strstr (lpszDiskFile, "\\Device\\") == lpszDiskFile
; 45   : 		|| strstr (lpszDiskFile, "\\DEVICE\\") == lpszDiskFile;

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _lpszDiskFile$[esp]
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_08MBBBEOPI@?2Device?2?$AA@
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 _strstr
  00010	83 c4 08	 add	 esp, 8
  00013	3b c6		 cmp	 eax, esi
  00015	74 16		 je	 SHORT $LN3@IsVolumeDe
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_08FALOLEII@?2DEVICE?2?$AA@
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _strstr
  00022	83 c4 08	 add	 esp, 8
  00025	3b c6		 cmp	 eax, esi
  00027	74 04		 je	 SHORT $LN3@IsVolumeDe
  00029	33 c0		 xor	 eax, eax
  0002b	5e		 pop	 esi

; 46   : }

  0002c	c3		 ret	 0
$LN3@IsVolumeDe:

; 43   : 	// and what about \\DeViCe\\ or \\device\\ ?
; 44   : 	return strstr (lpszDiskFile, "\\Device\\") == lpszDiskFile
; 45   : 		|| strstr (lpszDiskFile, "\\DEVICE\\") == lpszDiskFile;

  0002d	b8 01 00 00 00	 mov	 eax, 1
  00032	5e		 pop	 esi

; 46   : }

  00033	c3		 ret	 0
_IsVolumeDeviceHosted ENDP
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1666 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1667 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
; Function compile flags: /Ogtpy
;	COMDAT ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty, COMDAT
; _this$ = ecx

; 1705 : 		return (_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 14	 cmp	 DWORD PTR [ecx+20], eax
  00005	0f 94 c0	 sete	 al

; 1706 : 		}

  00008	c3		 ret	 0
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  00009	c3		 ret	 0
$LN3@Myptr:

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@_W@std@@QAE@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@_W@std@@QAE@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@_W@std@@QAE@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@2:

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@_W@std@@QAE@ABV01@@Z		; std::allocator<wchar_t>::allocator<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@_W@std@@QAE@ABV01@@Z PROC		; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@_W@std@@QAE@ABV01@@Z ENDP		; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z	; std::allocator<wchar_t>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2133 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2134 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 2c		 je	 SHORT $LN2@Inside
  0000a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0000d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00010	83 fe 10	 cmp	 esi, 16			; 00000010H
  00013	72 04		 jb	 SHORT $LN8@Inside
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN9@Inside
$LN8@Inside:
  00019	8b d0		 mov	 edx, eax
$LN9@Inside:
  0001b	3b fa		 cmp	 edi, edx
  0001d	72 17		 jb	 SHORT $LN2@Inside
  0001f	83 fe 10	 cmp	 esi, 16			; 00000010H
  00022	72 02		 jb	 SHORT $LN12@Inside
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@Inside:
  00026	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00029	03 c8		 add	 ecx, eax
  0002b	3b cf		 cmp	 ecx, edi
  0002d	76 07		 jbe	 SHORT $LN2@Inside
  0002f	5f		 pop	 edi

; 2136 : 		else
; 2137 : 			return (true);

  00030	b0 01		 mov	 al, 1
  00032	5e		 pop	 esi

; 2138 : 		}

  00033	c2 04 00	 ret	 4
$LN2@Inside:
  00036	5f		 pop	 edi

; 2135 : 			return (false);	// don't ask

  00037	32 c0		 xor	 al, al
  00039	5e		 pop	 esi

; 2138 : 		}

  0003a	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
; Function compile flags: /Ogtpy
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN3@Myptr@3
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@3:

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 167  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size, COMDAT
; _this$ = ecx

; 1666 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1667 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
; Function compile flags: /Ogtpy
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN3@Myptr@4
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@4:

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@_W@std@@QBEIXZ		; std::allocator<wchar_t>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@_W@std@@QBEIXZ PROC		; std::allocator<wchar_t>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@_W@std@@QBEIXZ ENDP		; std::allocator<wchar_t>::max_size
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T83683 = -12						; size = 12
$T83688 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 0f		 ja	 SHORT $LN3@Allocate

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00013	83 c4 04	 add	 esp, 4

; 44   : 	}

  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	c3		 ret	 0
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001a	83 c8 ff	 or	 eax, -1
  0001d	33 d2		 xor	 edx, edx
  0001f	f7 f1		 div	 ecx
  00021	83 f8 01	 cmp	 eax, 1
  00024	73 e7		 jae	 SHORT $LN1@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T83688[esp+8]
  0002a	50		 push	 eax
  0002b	8d 4c 24 04	 lea	 ecx, DWORD PTR $T83683[esp+16]
  0002f	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T83688[esp+12], 0
  00037	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003c	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00041	8d 4c 24 04	 lea	 ecx, DWORD PTR $T83683[esp+16]
  00045	51		 push	 ecx
  00046	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T83683[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate:
  00053	cc		 int	 3
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	??$_Allocate@_W@std@@YAPA_WIPA_W@Z		; std::_Allocate<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT
$T83692 = -12						; size = 12
$T83696 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@_W@std@@YAPA_WIPA_W@Z PROC			; std::_Allocate<wchar_t>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 12		 ja	 SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00016	83 c4 04	 add	 esp, 4

; 44   : 	}

  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	c3		 ret	 0
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001d	83 c8 ff	 or	 eax, -1
  00020	33 d2		 xor	 edx, edx
  00022	f7 f1		 div	 ecx
  00024	83 f8 02	 cmp	 eax, 2
  00027	73 e4		 jae	 SHORT $LN1@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00029	8d 44 24 10	 lea	 eax, DWORD PTR $T83696[esp+8]
  0002d	50		 push	 eax
  0002e	8d 4c 24 04	 lea	 ecx, DWORD PTR $T83692[esp+16]
  00032	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T83696[esp+12], 0
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003f	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00044	8d 4c 24 04	 lea	 ecx, DWORD PTR $T83692[esp+16]
  00048	51		 push	 ecx
  00049	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T83692[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@2:
  00056	cc		 int	 3
??$_Allocate@_W@std@@YAPA_WIPA_W@Z ENDP			; std::_Allocate<wchar_t>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare
EXTRN	?_Xran@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xran
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
__Ptr$ = 16						; size = 4
__Count$ = 20						; size = 4
?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare, COMDAT
; _this$ = ecx

; 2038 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 2039 : 
; 2040 :  #if _HAS_ITERATOR_DEBUGGING
; 2041 : 		if (_Count != 0)
; 2042 : 			_DEBUG_POINTER(_Ptr);
; 2043 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2044 : 
; 2045 : 		if (_Mysize < _Off)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Off$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	39 6f 14	 cmp	 DWORD PTR [edi+20], ebp
  0000d	73 05		 jae	 SHORT $LN2@compare@2

; 2046 : 			_String_base::_Xran();	// _Off off end

  0000f	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN2@compare@2:

; 2047 : 		if (_Mysize - _Off < _N0)

  00014	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00017	8b 74 24 18	 mov	 esi, DWORD PTR __N0$[esp+12]
  0001b	2b c5		 sub	 eax, ebp
  0001d	3b c6		 cmp	 eax, esi
  0001f	73 02		 jae	 SHORT $LN1@compare@2

; 2048 : 			_N0 = _Mysize - _Off;	// trim _N0 to size

  00021	8b f0		 mov	 esi, eax
$LN1@compare@2:

; 2049 : 
; 2050 : 		size_type _Ans = _Traits::compare(_Myptr() + _Off, _Ptr,
; 2051 : 			_N0 < _Count ? _N0 : _Count);

  00023	8b 5c 24 20	 mov	 ebx, DWORD PTR __Count$[esp+12]
  00027	8b c6		 mov	 eax, esi
  00029	3b f3		 cmp	 esi, ebx
  0002b	72 02		 jb	 SHORT $LN6@compare@2
  0002d	8b c3		 mov	 eax, ebx
$LN6@compare@2:
  0002f	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  00033	72 05		 jb	 SHORT $LN13@compare@2
  00035	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  00038	eb 03		 jmp	 SHORT $LN14@compare@2
$LN13@compare@2:
  0003a	83 c7 04	 add	 edi, 4
$LN14@compare@2:
  0003d	50		 push	 eax
  0003e	8b 44 24 20	 mov	 eax, DWORD PTR __Ptr$[esp+16]
  00042	50		 push	 eax
  00043	8d 0c 6f	 lea	 ecx, DWORD PTR [edi+ebp*2]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 _wmemcmp
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2052 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2053 : 			: _N0 == _Count ? 0 : +1);

  0004f	85 c0		 test	 eax, eax
  00051	75 15		 jne	 SHORT $LN8@compare@2
  00053	3b f3		 cmp	 esi, ebx
  00055	73 0a		 jae	 SHORT $LN7@compare@2
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	83 c8 ff	 or	 eax, -1
  0005d	5b		 pop	 ebx

; 2054 : 		}

  0005e	c2 10 00	 ret	 16			; 00000010H
$LN7@compare@2:

; 2052 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2053 : 			: _N0 == _Count ? 0 : +1);

  00061	33 c0		 xor	 eax, eax
  00063	3b f3		 cmp	 esi, ebx
  00065	0f 95 c0	 setne	 al
$LN8@compare@2:
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5d		 pop	 ebp
  0006b	5b		 pop	 ebx

; 2054 : 		}

  0006c	c2 10 00	 ret	 16			; 00000010H
?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare
_TEXT	ENDS
PUBLIC	??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<char> >, COMDAT

; 575  : 	{

  00000	51		 push	 ecx

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Secure$[esp+4]

; 578  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 598  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<wchar_t> >, COMDAT

; 575  : 	{

  00000	51		 push	 ecx

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Secure$[esp+4]

; 578  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 598  : 	}

  00026	c3		 ret	 0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 624  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 625  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 624  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 625  : 	}

  00026	c3		 ret	 0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1651 : 		return (_Myptr());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN5@c_str
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  00009	c3		 ret	 0

; 1651 : 		return (_Myptr());

$LN5@c_str:
  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  0000d	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Function compile flags: /Ogtpy
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
tv206 = 12						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 1770 : 		{	// look for [_Ptr, _Ptr + _Count) beginnng at or after _Off

  00000	51		 push	 ecx

; 1771 : 
; 1772 :  #if _HAS_ITERATOR_DEBUGGING
; 1773 : 		if (_Count != 0)
; 1774 : 			_DEBUG_POINTER(_Ptr);
; 1775 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1776 : 
; 1777 : 		if (_Count == 0 && _Off <= _Mysize)

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Count$[esp]
  00005	8b 44 24 0c	 mov	 eax, DWORD PTR __Off$[esp]
  00009	89 0c 24	 mov	 DWORD PTR _this$[esp+4], ecx
  0000c	85 d2		 test	 edx, edx
  0000e	75 09		 jne	 SHORT $LN6@find
  00010	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]

; 1778 : 			return (_Off);	// null string always matches (if inside string)

  00013	0f 86 86 00 00
	00		 jbe	 $LN7@find
$LN6@find:
  00019	53		 push	 ebx
  0001a	55		 push	 ebp
  0001b	56		 push	 esi
  0001c	57		 push	 edi

; 1779 : 
; 1780 : 		size_type _Nm;
; 1781 : 		if (_Off < _Mysize && _Count <= (_Nm = _Mysize - _Off))

  0001d	8b 79 14	 mov	 edi, DWORD PTR [ecx+20]
  00020	3b c7		 cmp	 eax, edi
  00022	73 74		 jae	 SHORT $LN2@find
  00024	2b f8		 sub	 edi, eax
  00026	3b d7		 cmp	 edx, edi
  00028	77 6e		 ja	 SHORT $LN2@find

; 1782 : 			{	// room for match, look for it
; 1783 : 			const _Elem *_Uptr, *_Vptr;
; 1784 : 			for (_Nm -= _Count - 1, _Vptr = _Myptr() + _Off;

  0002a	be 01 00 00 00	 mov	 esi, 1
  0002f	2b f2		 sub	 esi, edx
  00031	03 fe		 add	 edi, esi
  00033	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00037	72 0b		 jb	 SHORT $LN11@find
  00039	83 c1 04	 add	 ecx, 4
  0003c	89 4c 24 1c	 mov	 DWORD PTR tv206[esp+16], ecx
  00040	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00042	eb 07		 jmp	 SHORT $LN12@find
$LN11@find:
  00044	83 c1 04	 add	 ecx, 4
  00047	89 4c 24 1c	 mov	 DWORD PTR tv206[esp+16], ecx
$LN12@find:

; 1785 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1786 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)

  0004b	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  0004f	8d 1c 01	 lea	 ebx, DWORD PTR [ecx+eax]
  00052	0f be 45 00	 movsx	 eax, BYTE PTR [ebp]
  00056	57		 push	 edi
  00057	50		 push	 eax
  00058	53		 push	 ebx
  00059	e8 00 00 00 00	 call	 _memchr
  0005e	8b f0		 mov	 esi, eax
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH
  00063	85 f6		 test	 esi, esi
  00065	74 31		 je	 SHORT $LN2@find
$LL4@find:

; 1787 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)

  00067	8b 4c 24 20	 mov	 ecx, DWORD PTR __Count$[esp+16]
  0006b	51		 push	 ecx
  0006c	55		 push	 ebp
  0006d	56		 push	 esi
  0006e	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH
  00076	85 c0		 test	 eax, eax
  00078	74 29		 je	 SHORT $LN20@find
  0007a	0f be 55 00	 movsx	 edx, BYTE PTR [ebp]
  0007e	2b de		 sub	 ebx, esi
  00080	8d 7c 1f ff	 lea	 edi, DWORD PTR [edi+ebx-1]
  00084	57		 push	 edi
  00085	52		 push	 edx
  00086	8d 5e 01	 lea	 ebx, DWORD PTR [esi+1]
  00089	53		 push	 ebx
  0008a	e8 00 00 00 00	 call	 _memchr
  0008f	8b f0		 mov	 esi, eax
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH
  00094	85 f6		 test	 esi, esi
  00096	75 cf		 jne	 SHORT $LL4@find
$LN2@find:
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5d		 pop	 ebp

; 1789 : 			}
; 1790 : 
; 1791 : 		return (npos);	// no match

  0009b	83 c8 ff	 or	 eax, -1
  0009e	5b		 pop	 ebx
$LN7@find:

; 1792 : 		}

  0009f	59		 pop	 ecx
  000a0	c2 0c 00	 ret	 12			; 0000000cH
$LN20@find:

; 1788 : 					return (_Uptr - _Myptr());	// found a match

  000a3	8b 44 24 10	 mov	 eax, DWORD PTR _this$[esp+20]
  000a7	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  000ab	8b 4c 24 1c	 mov	 ecx, DWORD PTR tv206[esp+16]
  000af	72 02		 jb	 SHORT $LN18@find
  000b1	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN18@find:
  000b3	5f		 pop	 edi
  000b4	8b c6		 mov	 eax, esi
  000b6	5e		 pop	 esi
  000b7	5d		 pop	 ebp
  000b8	2b c1		 sub	 eax, ecx
  000ba	5b		 pop	 ebx

; 1792 : 		}

  000bb	59		 pop	 ecx
  000bc	c2 0c 00	 ret	 12			; 0000000cH
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
PUBLIC	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
; Function compile flags: /Ogtpy
;	COMDAT ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
tv170 = 12						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind, COMDAT
; _this$ = ecx

; 1813 : 
; 1814 :  #if _HAS_ITERATOR_DEBUGGING
; 1815 : 		if (_Count != 0)
; 1816 : 			_DEBUG_POINTER(_Ptr);
; 1817 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1818 : 
; 1819 : 		if (_Count == 0)

  00000	8b 54 24 0c	 mov	 edx, DWORD PTR __Count$[esp-4]
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 1820 : 			return (_Off < _Mysize ? _Off : _Mysize);	// null always matches

  00007	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0000a	85 d2		 test	 edx, edx
  0000c	75 12		 jne	 SHORT $LN8@rfind
  0000e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Off$[esp]
  00012	3b c8		 cmp	 ecx, eax
  00014	0f 83 85 00 00
	00		 jae	 $LN9@rfind
  0001a	8b c1		 mov	 eax, ecx
  0001c	5f		 pop	 edi

; 1834 : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH
$LN8@rfind:
  00020	53		 push	 ebx
  00021	55		 push	 ebp
  00022	56		 push	 esi

; 1821 : 		if (_Count <= _Mysize)

  00023	3b d0		 cmp	 edx, eax
  00025	77 72		 ja	 SHORT $LN27@rfind

; 1822 : 			{	// room for match, look for it
; 1823 : 			const _Elem *_Uptr = _Myptr() +
; 1824 : 				(_Off < _Mysize - _Count ? _Off : _Mysize - _Count);

  00027	8b 4c 24 18	 mov	 ecx, DWORD PTR __Off$[esp+12]
  0002b	2b c2		 sub	 eax, edx
  0002d	3b c8		 cmp	 ecx, eax
  0002f	73 02		 jae	 SHORT $LN13@rfind
  00031	8b c1		 mov	 eax, ecx
$LN13@rfind:
  00033	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00036	89 4c 24 18	 mov	 DWORD PTR tv170[esp+12], ecx
  0003a	8d 5f 04	 lea	 ebx, DWORD PTR [edi+4]
  0003d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00040	72 04		 jb	 SHORT $LN17@rfind
  00042	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00044	eb 02		 jmp	 SHORT $LN18@rfind
$LN17@rfind:
  00046	8b cb		 mov	 ecx, ebx
$LN18@rfind:
  00048	8b 6c 24 14	 mov	 ebp, DWORD PTR __Ptr$[esp+12]
  0004c	8d 34 01	 lea	 esi, DWORD PTR [ecx+eax]
  0004f	90		 npad	 1
$LL6@rfind:

; 1825 : 			for (; ; --_Uptr)
; 1826 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1827 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)

  00050	8a 45 00	 mov	 al, BYTE PTR [ebp]
  00053	38 06		 cmp	 BYTE PTR [esi], al
  00055	75 0f		 jne	 SHORT $LN3@rfind
  00057	52		 push	 edx
  00058	55		 push	 ebp
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	85 c0		 test	 eax, eax
  00064	74 12		 je	 SHORT $LN26@rfind
$LN3@rfind:

; 1829 : 				else if (_Uptr == _Myptr())

  00066	8b cf		 mov	 ecx, edi
  00068	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  0006d	3b f0		 cmp	 esi, eax
  0006f	74 28		 je	 SHORT $LN27@rfind
  00071	8b 54 24 1c	 mov	 edx, DWORD PTR __Count$[esp+12]
  00075	4e		 dec	 esi
  00076	eb d8		 jmp	 SHORT $LL6@rfind
$LN26@rfind:

; 1828 : 					return (_Uptr - _Myptr());	// found a match

  00078	83 7c 24 18 10	 cmp	 DWORD PTR tv170[esp+12], 16 ; 00000010H
  0007d	72 0d		 jb	 SHORT $LN23@rfind
  0007f	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00081	8b c6		 mov	 eax, esi
  00083	5e		 pop	 esi
  00084	5d		 pop	 ebp
  00085	5b		 pop	 ebx
  00086	2b c1		 sub	 eax, ecx
  00088	5f		 pop	 edi

; 1834 : 		}

  00089	c2 0c 00	 ret	 12			; 0000000cH

; 1828 : 					return (_Uptr - _Myptr());	// found a match

$LN23@rfind:
  0008c	8b c6		 mov	 eax, esi
  0008e	5e		 pop	 esi
  0008f	5d		 pop	 ebp
  00090	8b cb		 mov	 ecx, ebx
  00092	5b		 pop	 ebx
  00093	2b c1		 sub	 eax, ecx
  00095	5f		 pop	 edi

; 1834 : 		}

  00096	c2 0c 00	 ret	 12			; 0000000cH
$LN27@rfind:
  00099	5e		 pop	 esi
  0009a	5d		 pop	 ebp

; 1830 : 					break;	// at beginning, no more chance for match
; 1831 : 			}
; 1832 : 
; 1833 : 		return (npos);	// no match

  0009b	83 c8 ff	 or	 eax, -1
  0009e	5b		 pop	 ebx
$LN9@rfind:
  0009f	5f		 pop	 edi

; 1834 : 		}

  000a0	c2 0c 00	 ret	 12			; 0000000cH
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
_TEXT	ENDS
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
; Function compile flags: /Ogtpy
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$ = ecx

; 2058 : 		return (_Mybase::_Alval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 2059 : 		}

  00004	c2 04 00	 ret	 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 472  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 473  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 478  : 		{	// copy constructor

  00000	8b c1		 mov	 eax, ecx

; 479  : #if defined(_DEBUG)
; 480  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 481  : 			{
; 482  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 483  : 			}
; 484  : #endif
; 485  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z PROC ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 472  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 473  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z ENDP ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogtpy
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $LN5@Eos
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 2115 : 		}

  00014	c2 04 00	 ret	 4

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$LN5@Eos:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 2115 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
; Function compile flags: /Ogtpy
;	COMDAT ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos, COMDAT
; _this$ = ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00004	33 d2		 xor	 edx, edx
  00006	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  0000a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000d	72 0a		 jb	 SHORT $LN5@Eos@2
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 2115 : 		}

  00016	c2 04 00	 ret	 4

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$LN5@Eos@2:
  00019	66 89 54 41 04	 mov	 WORD PTR [ecx+eax*2+4], dx

; 2115 : 		}

  0001e	c2 04 00	 ret	 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1671 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1672 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1673 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
; Function compile flags: /Ogtpy
;	COMDAT ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside, COMDAT
; _this$ = ecx

; 2133 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2134 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 2d		 je	 SHORT $LN2@Inside@2
  0000a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0000d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00010	83 fe 08	 cmp	 esi, 8
  00013	72 04		 jb	 SHORT $LN8@Inside@2
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN9@Inside@2
$LN8@Inside@2:
  00019	8b d0		 mov	 edx, eax
$LN9@Inside@2:
  0001b	3b fa		 cmp	 edi, edx
  0001d	72 18		 jb	 SHORT $LN2@Inside@2
  0001f	83 fe 08	 cmp	 esi, 8
  00022	72 02		 jb	 SHORT $LN12@Inside@2
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@Inside@2:
  00026	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00029	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  0002c	3b d7		 cmp	 edx, edi
  0002e	76 07		 jbe	 SHORT $LN2@Inside@2
  00030	5f		 pop	 edi

; 2136 : 		else
; 2137 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	5e		 pop	 esi

; 2138 : 		}

  00034	c2 04 00	 ret	 4
$LN2@Inside@2:
  00037	5f		 pop	 edi

; 2135 : 			return (false);	// don't ask

  00038	32 c0		 xor	 al, al
  0003a	5e		 pop	 esi

; 2138 : 		}

  0003b	c2 04 00	 ret	 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 1671 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1672 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH

; 1673 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@_W@std@@QAEPA_WI@Z	; std::allocator<wchar_t>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z PROC		; std::allocator<wchar_t>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z ENDP		; std::allocator<wchar_t>::allocate
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 590  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 590  : 	}

  00026	c3		 ret	 0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 616  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 617  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 616  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 617  : 	}

  00026	c3		 ret	 0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare, COMDAT
; _this$ = ecx

; 2025 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)

  00000	56		 push	 esi

; 2026 : 		_DEBUG_POINTER(_Ptr);
; 2027 : 		return (compare(0, _Mysize, _Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@compare@3:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL5@compare@3
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00023	56		 push	 esi
  00024	50		 push	 eax
  00025	6a 00		 push	 0
  00027	e8 00 00 00 00	 call	 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 2028 : 		}

  0002e	c2 04 00	 ret	 4
?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare
_TEXT	ENDS
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Function compile flags: /Ogtpy
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 1795 : 		{	// look for [_Ptr, <null>) beginnng at or after _Off

  00000	56		 push	 esi

; 1796 : 		_DEBUG_POINTER(_Ptr);
; 1797 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@find@2:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@find@2
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	8b 44 24 14	 mov	 eax, DWORD PTR __Off$[esp+8]
  0001e	50		 push	 eax
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 1798 : 		}

  00027	c2 08 00	 ret	 8
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
PUBLIC	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
; Function compile flags: /Ogtpy
;	COMDAT ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind, COMDAT
; _this$ = ecx

; 1837 : 		{	// look for [_Ptr, <null>) beginning before _Off

  00000	56		 push	 esi

; 1838 : 		_DEBUG_POINTER(_Ptr);
; 1839 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@rfind@2:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@rfind@2
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	8b 44 24 14	 mov	 eax, DWORD PTR __Off$[esp+8]
  0001e	50		 push	 eax
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 1840 : 		}

  00027	c2 08 00	 ret	 8
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2149 : 		if (!_Built)

  00000	80 7c 24 04 00	 cmp	 BYTE PTR __Built$[esp-4], 0
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 27		 je	 SHORT $LN15@Tidy

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

  0000f	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00013	72 21		 jb	 SHORT $LN15@Tidy

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

  00015	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00018	53		 push	 ebx
  00019	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2154 : 			if (0 < _Newsize)

  0001b	85 ff		 test	 edi, edi
  0001d	76 0d		 jbe	 SHORT $LN13@Tidy

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

  0001f	57		 push	 edi
  00020	53		 push	 ebx
  00021	6a 10		 push	 16			; 00000010H
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _memcpy_s
  00029	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@Tidy:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  0002c	53		 push	 ebx
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00032	83 c4 04	 add	 esp, 4
  00035	5b		 pop	 ebx
$LN15@Tidy:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;
; 2159 : 		_Eos(_Newsize);

  00036	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00039	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00040	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 2160 : 		}

  00047	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx

; 2149 : 		if (!_Built)

  00000	80 7c 24 04 00	 cmp	 BYTE PTR __Built$[esp-4], 0
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 2a		 je	 SHORT $LN17@Tidy@2

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

  0000f	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00013	72 24		 jb	 SHORT $LN17@Tidy@2

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

  00015	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00018	53		 push	 ebx
  00019	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2154 : 			if (0 < _Newsize)

  0001b	85 ff		 test	 edi, edi
  0001d	76 10		 jbe	 SHORT $LN15@Tidy@2

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

  0001f	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  00022	51		 push	 ecx
  00023	53		 push	 ebx
  00024	6a 10		 push	 16			; 00000010H
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _memcpy_s
  0002c	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@Tidy@2:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  0002f	53		 push	 ebx
  00030	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00035	83 c4 04	 add	 esp, 4
  00038	5b		 pop	 ebx
$LN17@Tidy@2:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;
; 2159 : 		_Eos(_Newsize);

  00039	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0003c	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00043	33 d2		 xor	 edx, edx
  00045	66 89 54 7e 04	 mov	 WORD PTR [esi+edi*2+4], dx
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi

; 2160 : 		}

  0004c	c2 08 00	 ret	 8
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
tv130 = 8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1262 : 		{	// erase elements [_Off, _Off + _Count)

  00000	53		 push	 ebx

; 1263 : 		if (_Mysize < _Off)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	73 05		 jae	 SHORT $LN3@erase

; 1264 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@erase:

; 1265 : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c3		 sub	 eax, ebx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $LN2@erase

; 1266 : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$LN2@erase:

; 1267 : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 55		 jbe	 SHORT $LN30@erase

; 1268 : 			{	// move elements down
; 1269 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1270 : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	55		 push	 ebp
  0002a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0002d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00030	72 09		 jb	 SHORT $LN8@erase
  00032	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00035	89 54 24 14	 mov	 DWORD PTR tv130[esp+12], edx
  00039	eb 04		 jmp	 SHORT $LN9@erase
$LN8@erase:
  0003b	89 6c 24 14	 mov	 DWORD PTR tv130[esp+12], ebp
$LN9@erase:
  0003f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00042	72 05		 jb	 SHORT $LN12@erase
  00044	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00047	eb 02		 jmp	 SHORT $LN13@erase
$LN12@erase:
  00049	8b d5		 mov	 edx, ebp
$LN13@erase:
  0004b	2b c7		 sub	 eax, edi
  0004d	50		 push	 eax
  0004e	8b 44 24 18	 mov	 eax, DWORD PTR tv130[esp+16]
  00052	03 c3		 add	 eax, ebx
  00054	03 c7		 add	 eax, edi
  00056	50		 push	 eax
  00057	2b cb		 sub	 ecx, ebx
  00059	51		 push	 ecx
  0005a	03 d3		 add	 edx, ebx
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _memmove_s

; 1271 : 			size_type _Newsize = _Mysize - _Count;

  00062	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00065	2b c7		 sub	 eax, edi
  00067	83 c4 10	 add	 esp, 16			; 00000010H

; 1272 : 			_Eos(_Newsize);

  0006a	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0006e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00071	72 03		 jb	 SHORT $LN26@erase
  00073	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN26@erase:
  00076	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  0007a	5d		 pop	 ebp
$LN30@erase:
  0007b	5f		 pop	 edi

; 1273 : 			}
; 1274 : 		return (*this);

  0007c	8b c6		 mov	 eax, esi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx

; 1275 : 		}

  00080	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2083 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 2084 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 0f	 or	 esi, 15			; 0000000fH

; 2085 : 		if (max_size() < _Newres)

  00038	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0003b	76 04		 jbe	 SHORT $LN6@Copy

; 2086 : 			_Newres = _Newsize;	// undo roundup if too big

  0003d	8b f0		 mov	 esi, eax

; 2087 : 		else if (_Newres / 3 < _Myres / 2

  0003f	eb 22		 jmp	 SHORT $LN4@Copy
$LN6@Copy:

; 2088 : 			&& _Myres <= max_size() - _Myres / 2)

  00041	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00044	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00049	f7 e6		 mul	 esi
  0004b	8b cb		 mov	 ecx, ebx
  0004d	d1 e9		 shr	 ecx, 1
  0004f	d1 ea		 shr	 edx, 1
  00051	3b d1		 cmp	 edx, ecx
  00053	73 0e		 jae	 SHORT $LN4@Copy
  00055	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0005a	2b c1		 sub	 eax, ecx
  0005c	3b d8		 cmp	 ebx, eax
  0005e	77 03		 ja	 SHORT $LN4@Copy

; 2089 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00060	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
$LN4@Copy:

; 2090 : 		_Elem *_Ptr = 0;
; 2091 : 
; 2092 : 		_TRY_BEGIN
; 2093 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00063	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00066	6a 00		 push	 0
  00068	51		 push	 ecx
  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00070	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00075	83 c4 08	 add	 esp, 8
  00078	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0007b	eb 28		 jmp	 SHORT $LN16@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0:

; 2094 : 		_CATCH_ALL
; 2095 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007d	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00080	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00083	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 2096 : 			_TRY_BEGIN
; 2097 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00086	40		 inc	 eax
  00087	6a 00		 push	 0
  00089	50		 push	 eax
  0008a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0008e	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00093	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00096	83 c4 08	 add	 esp, 8

; 2101 : 			_CATCH_END
; 2102 : 		_CATCH_END

  00099	b8 00 00 00 00	 mov	 eax, $LN106@Copy
  0009e	c3		 ret	 0
$LN106@Copy:
  0009f	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000a2	8b 75 e8	 mov	 esi, DWORD PTR __Newres$[ebp]
$LN16@Copy:

; 2103 : 
; 2104 : 		if (0 < _Oldlen)

  000a5	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  000a8	85 db		 test	 ebx, ebx
  000aa	76 20		 jbe	 SHORT $LN71@Copy

; 2105 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

  000ac	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000b0	72 05		 jb	 SHORT $LN63@Copy
  000b2	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000b5	eb 03		 jmp	 SHORT $LN64@Copy
$LN63@Copy:
  000b7	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN64@Copy:
  000ba	53		 push	 ebx
  000bb	50		 push	 eax
  000bc	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000bf	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _memcpy_s
  000c9	83 c4 10	 add	 esp, 16			; 00000010H
$LN71@Copy:

; 2106 : 		_Tidy(true);

  000cc	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000d0	72 0c		 jb	 SHORT $LN87@Copy
  000d2	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000db	83 c4 04	 add	 esp, 4
$LN87@Copy:

; 2107 : 		_Bx._Ptr = _Ptr;

  000de	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000e1	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000e4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e7	89 08		 mov	 DWORD PTR [eax], ecx

; 2108 : 		_Myres = _Newres;

  000e9	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 2109 : 		_Eos(_Oldlen);

  000ec	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  000ef	83 fe 10	 cmp	 esi, 16			; 00000010H
  000f2	72 02		 jb	 SHORT $LN101@Copy
  000f4	8b c1		 mov	 eax, ecx
$LN101@Copy:
  000f6	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 2110 : 		}

  000fa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00104	59		 pop	 ecx
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1:

; 2098 : 			_CATCH_ALL
; 2099 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010e	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00111	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00115	72 0c		 jb	 SHORT $LN51@Copy
  00117	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0011a	52		 push	 edx
  0011b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00120	83 c4 04	 add	 esp, 4
$LN51@Copy:

; 2100 : 			_RERAISE;

  00123	6a 00		 push	 0
  00125	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0012c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00133	6a 00		 push	 0
  00135	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00139	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN109@Copy:
  0013e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
tv133 = 8						; size = 4
__Off$ = 8						; size = 4
tv139 = 12						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx

; 1262 : 		{	// erase elements [_Off, _Off + _Count)

  00000	53		 push	 ebx

; 1263 : 		if (_Mysize < _Off)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	73 05		 jae	 SHORT $LN3@erase@2

; 1264 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@erase@2:

; 1265 : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c3		 sub	 eax, ebx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $LN2@erase@2

; 1266 : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$LN2@erase@2:

; 1267 : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 69		 jbe	 SHORT $LN32@erase@2

; 1268 : 			{	// move elements down
; 1269 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1270 : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	55		 push	 ebp
  0002a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0002d	83 f9 08	 cmp	 ecx, 8
  00030	72 09		 jb	 SHORT $LN8@erase@2
  00032	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00035	89 54 24 14	 mov	 DWORD PTR tv133[esp+12], edx
  00039	eb 04		 jmp	 SHORT $LN9@erase@2
$LN8@erase@2:
  0003b	89 6c 24 14	 mov	 DWORD PTR tv133[esp+12], ebp
$LN9@erase@2:
  0003f	83 f9 08	 cmp	 ecx, 8
  00042	72 09		 jb	 SHORT $LN12@erase@2
  00044	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00047	89 54 24 18	 mov	 DWORD PTR tv139[esp+12], edx
  0004b	eb 04		 jmp	 SHORT $LN13@erase@2
$LN12@erase@2:
  0004d	89 6c 24 18	 mov	 DWORD PTR tv139[esp+12], ebp
$LN13@erase@2:
  00051	8b 54 24 14	 mov	 edx, DWORD PTR tv133[esp+12]
  00055	2b c7		 sub	 eax, edi
  00057	03 c0		 add	 eax, eax
  00059	50		 push	 eax
  0005a	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  0005d	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  00060	2b cb		 sub	 ecx, ebx
  00062	50		 push	 eax
  00063	03 c9		 add	 ecx, ecx
  00065	51		 push	 ecx
  00066	8b 4c 24 24	 mov	 ecx, DWORD PTR tv139[esp+24]
  0006a	8d 14 59	 lea	 edx, DWORD PTR [ecx+ebx*2]
  0006d	52		 push	 edx
  0006e	e8 00 00 00 00	 call	 _memmove_s

; 1271 : 			size_type _Newsize = _Mysize - _Count;

  00073	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00076	2b c7		 sub	 eax, edi
  00078	83 c4 10	 add	 esp, 16			; 00000010H

; 1272 : 			_Eos(_Newsize);

  0007b	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  0007f	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00082	72 03		 jb	 SHORT $LN28@erase@2
  00084	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN28@erase@2:
  00087	33 c9		 xor	 ecx, ecx
  00089	66 89 4c 45 00	 mov	 WORD PTR [ebp+eax*2], cx
  0008e	5d		 pop	 ebp
$LN32@erase@2:
  0008f	5f		 pop	 edi

; 1273 : 			}
; 1274 : 		return (*this);

  00090	8b c6		 mov	 eax, esi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 1275 : 		}

  00094	c2 08 00	 ret	 8
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Ptr$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newres$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy, COMDAT
; _this$ = ecx

; 2083 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 2084 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 07	 or	 esi, 7

; 2085 : 		if (max_size() < _Newres)

  00038	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH
  0003e	76 04		 jbe	 SHORT $LN6@Copy@2

; 2086 : 			_Newres = _Newsize;	// undo roundup if too big

  00040	8b f0		 mov	 esi, eax

; 2087 : 		else if (_Newres / 3 < _Myres / 2

  00042	eb 22		 jmp	 SHORT $LN4@Copy@2
$LN6@Copy@2:

; 2088 : 			&& _Myres <= max_size() - _Myres / 2)

  00044	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00047	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0004c	f7 e6		 mul	 esi
  0004e	8b cb		 mov	 ecx, ebx
  00050	d1 e9		 shr	 ecx, 1
  00052	d1 ea		 shr	 edx, 1
  00054	3b d1		 cmp	 edx, ecx
  00056	73 0e		 jae	 SHORT $LN4@Copy@2
  00058	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  0005d	2b c1		 sub	 eax, ecx
  0005f	3b d8		 cmp	 ebx, eax
  00061	77 03		 ja	 SHORT $LN4@Copy@2

; 2089 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00063	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
$LN4@Copy@2:

; 2090 : 		_Elem *_Ptr = 0;
; 2091 : 
; 2092 : 		_TRY_BEGIN
; 2093 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00066	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00069	6a 00		 push	 0
  0006b	51		 push	 ecx
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00073	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00078	83 c4 08	 add	 esp, 8
  0007b	8b d8		 mov	 ebx, eax
  0007d	eb 2b		 jmp	 SHORT $LN16@Copy@2
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$0:

; 2094 : 		_CATCH_ALL
; 2095 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007f	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00082	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00085	89 45 08	 mov	 DWORD PTR __Newres$[ebp], eax

; 2096 : 			_TRY_BEGIN
; 2097 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00088	40		 inc	 eax
  00089	6a 00		 push	 0
  0008b	50		 push	 eax
  0008c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00090	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00095	89 45 e8	 mov	 DWORD PTR __Ptr$[ebp], eax
  00098	83 c4 08	 add	 esp, 8

; 2101 : 			_CATCH_END
; 2102 : 		_CATCH_END

  0009b	b8 00 00 00 00	 mov	 eax, $LN112@Copy@2
  000a0	c3		 ret	 0
$LN112@Copy@2:
  000a1	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000a4	8b 75 08	 mov	 esi, DWORD PTR __Newres$[ebp]
  000a7	8b 5d e8	 mov	 ebx, DWORD PTR __Ptr$[ebp]
$LN16@Copy@2:

; 2103 : 
; 2104 : 		if (0 < _Oldlen)

  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000ad	85 c9		 test	 ecx, ecx
  000af	76 24		 jbe	 SHORT $LN75@Copy@2

; 2105 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

  000b1	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  000b5	72 05		 jb	 SHORT $LN65@Copy@2
  000b7	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000ba	eb 03		 jmp	 SHORT $LN66@Copy@2
$LN65@Copy@2:
  000bc	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN66@Copy@2:
  000bf	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	8d 44 36 02	 lea	 eax, DWORD PTR [esi+esi+2]
  000c8	50		 push	 eax
  000c9	53		 push	 ebx
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000d2	83 c4 10	 add	 esp, 16			; 00000010H
$LN75@Copy@2:

; 2106 : 		_Tidy(true);

  000d5	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  000d9	72 0f		 jb	 SHORT $LN93@Copy@2
  000db	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000de	51		 push	 ecx
  000df	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000e7	83 c4 04	 add	 esp, 4
$LN93@Copy@2:
  000ea	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000ed	33 d2		 xor	 edx, edx

; 2107 : 		_Bx._Ptr = _Ptr;

  000ef	89 18		 mov	 DWORD PTR [eax], ebx

; 2108 : 		_Myres = _Newres;

  000f1	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 2109 : 		_Eos(_Oldlen);

  000f4	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  000f7	83 fe 08	 cmp	 esi, 8
  000fa	72 02		 jb	 SHORT $LN107@Copy@2
  000fc	8b c3		 mov	 eax, ebx
$LN107@Copy@2:
  000fe	33 d2		 xor	 edx, edx
  00100	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 2110 : 		}

  00104	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00107	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010e	59		 pop	 ecx
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$1:

; 2098 : 			_CATCH_ALL
; 2099 : 			_Tidy(true);	// failed again, discard storage and reraise

  00118	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0011b	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  0011f	72 0c		 jb	 SHORT $LN53@Copy@2
  00121	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0012a	83 c4 04	 add	 esp, 4
$LN53@Copy@2:
  0012d	33 c9		 xor	 ecx, ecx

; 2100 : 			_RERAISE;

  0012f	51		 push	 ecx
  00130	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00137	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0013e	51		 push	 ecx
  0013f	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00143	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN115@Copy@2:
  00148	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
PUBLIC	??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
;	COMDAT ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z PROC ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 94   : 	return (_Left.compare(_Right) == 0);

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  00004	8b c2		 mov	 eax, edx
  00006	56		 push	 esi
  00007	8d 70 02	 lea	 esi, DWORD PTR [eax+2]
  0000a	8d 9b 00 00 00
	00		 npad	 6
$LL7@operator:
  00010	66 8b 08	 mov	 cx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 c9	 test	 cx, cx
  00019	75 f5		 jne	 SHORT $LL7@operator
  0001b	8b 4c 24 08	 mov	 ecx, DWORD PTR __Left$[esp]
  0001f	2b c6		 sub	 eax, esi
  00021	d1 f8		 sar	 eax, 1
  00023	50		 push	 eax
  00024	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00027	52		 push	 edx
  00028	50		 push	 eax
  00029	6a 00		 push	 0
  0002b	e8 00 00 00 00	 call	 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare
  00030	f7 d8		 neg	 eax
  00032	1b c0		 sbb	 eax, eax
  00034	40		 inc	 eax
  00035	5e		 pop	 esi

; 95   : 	}

  00036	c3		 ret	 0
??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ENDP ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 565  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 566  : 		_Tidy();

  00002	33 c9		 xor	 ecx, ecx
  00004	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH
  0000b	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  0000e	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 567  : 		}

  00011	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 906  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $LN17@basic_stri
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN17@basic_stri:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 907  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 906  : 		_Tidy(true);

  00003	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00007	72 0c		 jb	 SHORT $LN19@basic_stri@2
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN19@basic_stri@2:
  00015	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  0001c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00023	33 c9		 xor	 ecx, ecx
  00025	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00029	5e		 pop	 esi

; 907  : 		}

  0002a	c3		 ret	 0
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xlen
; Function compile flags: /Ogtpy
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2119 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	53		 push	 ebx

; 2120 : 			if (max_size() < _Newsize)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Newsize$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  0000b	76 05		 jbe	 SHORT $LN6@Grow

; 2121 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN6@Grow:

; 2122 : 		if (_Myres < _Newsize)

  00012	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00015	3b c3		 cmp	 eax, ebx
  00017	73 19		 jae	 SHORT $LN5@Grow

; 2123 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001c	50		 push	 eax
  0001d	53		 push	 ebx
  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c9		 xor	 ecx, ecx
  00027	3b cb		 cmp	 ecx, ebx
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5b		 pop	 ebx

; 2130 : 		}

  0002f	c2 08 00	 ret	 8
$LN5@Grow:

; 2124 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	80 7c 24 10 00	 cmp	 BYTE PTR __Trim$[esp+4], 0
  00037	74 52		 je	 SHORT $LN3@Grow
  00039	83 fb 10	 cmp	 ebx, 16			; 00000010H
  0003c	73 4d		 jae	 SHORT $LN3@Grow
  0003e	57		 push	 edi

; 2125 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2126 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  0003f	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00042	3b df		 cmp	 ebx, edi
  00044	73 02		 jae	 SHORT $LN9@Grow
  00046	8b fb		 mov	 edi, ebx
$LN9@Grow:
  00048	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004b	72 21		 jb	 SHORT $LN33@Grow
  0004d	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00050	55		 push	 ebp
  00051	8b 28		 mov	 ebp, DWORD PTR [eax]
  00053	85 ff		 test	 edi, edi
  00055	76 0d		 jbe	 SHORT $LN31@Grow
  00057	57		 push	 edi
  00058	55		 push	 ebp
  00059	6a 10		 push	 16			; 00000010H
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _memcpy_s
  00061	83 c4 10	 add	 esp, 16			; 00000010H
$LN31@Grow:
  00064	55		 push	 ebp
  00065	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006a	83 c4 04	 add	 esp, 4
  0006d	5d		 pop	 ebp
$LN33@Grow:
  0006e	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00071	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00078	33 c9		 xor	 ecx, ecx
  0007a	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  0007f	3b cb		 cmp	 ecx, ebx
  00081	5f		 pop	 edi
  00082	1b c0		 sbb	 eax, eax
  00084	5e		 pop	 esi
  00085	f7 d8		 neg	 eax
  00087	5b		 pop	 ebx

; 2130 : 		}

  00088	c2 08 00	 ret	 8
$LN3@Grow:

; 2127 : 		else if (_Newsize == 0)

  0008b	85 db		 test	 ebx, ebx
  0008d	75 20		 jne	 SHORT $LN49@Grow

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

  0008f	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00092	83 f8 10	 cmp	 eax, 16			; 00000010H
  00095	72 12		 jb	 SHORT $LN47@Grow
  00097	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  0009a	33 c9		 xor	 ecx, ecx
  0009c	3b cb		 cmp	 ecx, ebx
  0009e	88 1e		 mov	 BYTE PTR [esi], bl
  000a0	1b c0		 sbb	 eax, eax
  000a2	5e		 pop	 esi
  000a3	f7 d8		 neg	 eax
  000a5	5b		 pop	 ebx

; 2130 : 		}

  000a6	c2 08 00	 ret	 8

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

$LN47@Grow:
  000a9	83 c6 04	 add	 esi, 4
  000ac	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN49@Grow:

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000af	33 c9		 xor	 ecx, ecx
  000b1	3b cb		 cmp	 ecx, ebx
  000b3	1b c0		 sbb	 eax, eax
  000b5	5e		 pop	 esi
  000b6	f7 d8		 neg	 eax
  000b8	5b		 pop	 ebx

; 2130 : 		}

  000b9	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
; Function compile flags: /Ogtpy
;	COMDAT ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow, COMDAT
; _this$ = ecx

; 2119 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp

; 2120 : 			if (max_size() < _Newsize)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Newsize$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	81 fd fe ff ff
	7f		 cmp	 ebp, 2147483646		; 7ffffffeH
  0000e	76 05		 jbe	 SHORT $LN6@Grow@2

; 2121 : 			_String_base::_Xlen();	// result too long

  00010	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN6@Grow@2:

; 2122 : 		if (_Myres < _Newsize)

  00015	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00018	3b c5		 cmp	 eax, ebp
  0001a	73 19		 jae	 SHORT $LN5@Grow@2

; 2123 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  0001c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001f	50		 push	 eax
  00020	55		 push	 ebp
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00028	33 c9		 xor	 ecx, ecx
  0002a	3b cd		 cmp	 ecx, ebp
  0002c	1b c0		 sbb	 eax, eax
  0002e	5e		 pop	 esi
  0002f	f7 d8		 neg	 eax
  00031	5d		 pop	 ebp

; 2130 : 		}

  00032	c2 08 00	 ret	 8
$LN5@Grow@2:

; 2124 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00035	80 7c 24 10 00	 cmp	 BYTE PTR __Trim$[esp+4], 0
  0003a	74 57		 je	 SHORT $LN3@Grow@2
  0003c	83 fd 08	 cmp	 ebp, 8
  0003f	73 52		 jae	 SHORT $LN3@Grow@2
  00041	57		 push	 edi

; 2125 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2126 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00042	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00045	3b ef		 cmp	 ebp, edi
  00047	73 02		 jae	 SHORT $LN9@Grow@2
  00049	8b fd		 mov	 edi, ebp
$LN9@Grow@2:
  0004b	83 f8 08	 cmp	 eax, 8
  0004e	72 24		 jb	 SHORT $LN35@Grow@2
  00050	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00053	53		 push	 ebx
  00054	8b 18		 mov	 ebx, DWORD PTR [eax]
  00056	85 ff		 test	 edi, edi
  00058	76 10		 jbe	 SHORT $LN33@Grow@2
  0005a	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  0005d	51		 push	 ecx
  0005e	53		 push	 ebx
  0005f	6a 10		 push	 16			; 00000010H
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _memcpy_s
  00067	83 c4 10	 add	 esp, 16			; 00000010H
$LN33@Grow@2:
  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00070	83 c4 04	 add	 esp, 4
  00073	5b		 pop	 ebx
$LN35@Grow@2:
  00074	33 d2		 xor	 edx, edx
  00076	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00079	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00080	33 c9		 xor	 ecx, ecx
  00082	66 89 54 7e 04	 mov	 WORD PTR [esi+edi*2+4], dx
  00087	3b cd		 cmp	 ecx, ebp
  00089	5f		 pop	 edi
  0008a	1b c0		 sbb	 eax, eax
  0008c	5e		 pop	 esi
  0008d	f7 d8		 neg	 eax
  0008f	5d		 pop	 ebp

; 2130 : 		}

  00090	c2 08 00	 ret	 8
$LN3@Grow@2:

; 2127 : 		else if (_Newsize == 0)

  00093	85 ed		 test	 ebp, ebp
  00095	75 25		 jne	 SHORT $LN51@Grow@2

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

  00097	89 6e 14	 mov	 DWORD PTR [esi+20], ebp
  0009a	83 f8 08	 cmp	 eax, 8
  0009d	72 15		 jb	 SHORT $LN49@Grow@2
  0009f	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000a2	33 c0		 xor	 eax, eax

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000a4	33 c9		 xor	 ecx, ecx
  000a6	3b cd		 cmp	 ecx, ebp
  000a8	66 89 06	 mov	 WORD PTR [esi], ax
  000ab	1b c0		 sbb	 eax, eax
  000ad	5e		 pop	 esi
  000ae	f7 d8		 neg	 eax
  000b0	5d		 pop	 ebp

; 2130 : 		}

  000b1	c2 08 00	 ret	 8

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

$LN49@Grow@2:
  000b4	83 c6 04	 add	 esi, 4
  000b7	33 c0		 xor	 eax, eax
  000b9	66 89 06	 mov	 WORD PTR [esi], ax
$LN51@Grow@2:

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000bc	33 c9		 xor	 ecx, ecx
  000be	3b cd		 cmp	 ecx, ebp
  000c0	1b c0		 sbb	 eax, eax
  000c2	5e		 pop	 esi
  000c3	f7 d8		 neg	 eax
  000c5	5d		 pop	 ebp

; 2130 : 		}

  000c6	c2 08 00	 ret	 8
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1046 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx

; 1047 : 		if (_Right.size() < _Roff)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Right$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 10	 mov	 ebp, DWORD PTR __Roff$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 6b 14	 cmp	 DWORD PTR [ebx+20], ebp
  00011	73 05		 jae	 SHORT $LN5@assign

; 1048 : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@assign:

; 1049 : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]

; 1050 : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b fd		 sub	 edi, ebp
  00021	3b c7		 cmp	 eax, edi
  00023	73 02		 jae	 SHORT $LN4@assign

; 1051 : 			_Num = _Count;	// trim _Num to size

  00025	8b f8		 mov	 edi, eax
$LN4@assign:

; 1052 : 
; 1053 : 		if (this == &_Right)

  00027	3b f3		 cmp	 esi, ebx
  00029	75 1f		 jne	 SHORT $LN3@assign

; 1054 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 fd		 add	 edi, ebp
  0002f	57		 push	 edi
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	55		 push	 ebp
  00038	6a 00		 push	 0
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	5b		 pop	 ebx

; 1061 : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign:

; 1055 : 		else if (_Grow(_Num))

  0004a	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0004d	76 05		 jbe	 SHORT $LN17@assign
  0004f	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@assign:
  00054	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00057	3b c7		 cmp	 eax, edi
  00059	73 1b		 jae	 SHORT $LN16@assign
  0005b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0005e	50		 push	 eax
  0005f	57		 push	 edi
  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00067	85 ff		 test	 edi, edi
$LN87@assign:
  00069	76 66		 jbe	 SHORT $LN86@assign

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

  0006b	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0006f	72 2f		 jb	 SHORT $LN64@assign
  00071	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00074	eb 2d		 jmp	 SHORT $LN65@assign

; 1055 : 		else if (_Grow(_Num))

$LN16@assign:
  00076	85 ff		 test	 edi, edi
  00078	75 ef		 jne	 SHORT $LN87@assign
  0007a	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0007d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00080	72 0f		 jb	 SHORT $LN58@assign
  00082	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00085	5f		 pop	 edi
  00086	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00089	8b c6		 mov	 eax, esi
  0008b	5e		 pop	 esi
  0008c	5d		 pop	 ebp
  0008d	5b		 pop	 ebx

; 1061 : 		}

  0008e	c2 0c 00	 ret	 12			; 0000000cH

; 1055 : 		else if (_Grow(_Num))

$LN58@assign:
  00091	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00098	8b c6		 mov	 eax, esi
  0009a	5e		 pop	 esi
  0009b	5d		 pop	 ebp
  0009c	5b		 pop	 ebx

; 1061 : 		}

  0009d	c2 0c 00	 ret	 12			; 0000000cH

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

$LN64@assign:
  000a0	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN65@assign:
  000a3	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000a6	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000a9	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000ac	72 04		 jb	 SHORT $LN68@assign
  000ae	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b0	eb 02		 jmp	 SHORT $LN69@assign
$LN68@assign:
  000b2	8b c3		 mov	 eax, ebx
$LN69@assign:
  000b4	57		 push	 edi
  000b5	03 d5		 add	 edx, ebp
  000b7	52		 push	 edx
  000b8	51		 push	 ecx
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 _memcpy_s
  000bf	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 			_Eos(_Num);

  000c2	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c9	72 02		 jb	 SHORT $LN82@assign
  000cb	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN82@assign:
  000cd	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
$LN86@assign:
  000d1	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  000d2	8b c6		 mov	 eax, esi
  000d4	5e		 pop	 esi
  000d5	5d		 pop	 ebp
  000d6	5b		 pop	 ebx

; 1061 : 		}

  000d7	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1064 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp

; 1065 : 
; 1066 :  #if _HAS_ITERATOR_DEBUGGING
; 1067 : 		if (_Count != 0)
; 1068 : 			_DEBUG_POINTER(_Ptr);
; 1069 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1070 : 
; 1071 : 		if (_Inside(_Ptr))

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 ed		 test	 ebp, ebp
  0000b	74 46		 je	 SHORT $LN93@assign@2
  0000d	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 fa 10	 cmp	 edx, 16			; 00000010H
  00016	72 04		 jb	 SHORT $LN12@assign@2
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN13@assign@2
$LN12@assign@2:
  0001c	8b c8		 mov	 ecx, eax
$LN13@assign@2:
  0001e	3b e9		 cmp	 ebp, ecx
  00020	72 31		 jb	 SHORT $LN93@assign@2
  00022	83 fa 10	 cmp	 edx, 16			; 00000010H
  00025	72 04		 jb	 SHORT $LN16@assign@2
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN17@assign@2
$LN16@assign@2:
  0002b	8b c8		 mov	 ecx, eax
$LN17@assign@2:
  0002d	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00030	03 f9		 add	 edi, ecx
  00032	3b fd		 cmp	 edi, ebp
  00034	76 1d		 jbe	 SHORT $LN93@assign@2

; 1072 : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00036	83 fa 10	 cmp	 edx, 16			; 00000010H
  00039	72 02		 jb	 SHORT $LN20@assign@2
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@assign@2:
  0003d	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00041	51		 push	 ecx
  00042	2b e8		 sub	 ebp, eax
  00044	55		 push	 ebp
  00045	56		 push	 esi
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp

; 1080 : 		}

  00050	c2 08 00	 ret	 8
$LN93@assign@2:

; 1073 : 
; 1074 : 		if (_Grow(_Count))

  00053	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  00057	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0005a	76 05		 jbe	 SHORT $LN27@assign@2
  0005c	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN27@assign@2:
  00061	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00064	3b c7		 cmp	 eax, edi
  00066	73 20		 jae	 SHORT $LN26@assign@2
  00068	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0006b	52		 push	 edx
  0006c	57		 push	 edi
  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00074	85 ff		 test	 edi, edi
$LN94@assign@2:
  00076	76 56		 jbe	 SHORT $LN90@assign@2

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

  00078	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0007b	53		 push	 ebx
  0007c	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  0007f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00082	72 2c		 jb	 SHORT $LN74@assign@2
  00084	8b 03		 mov	 eax, DWORD PTR [ebx]
  00086	eb 2a		 jmp	 SHORT $LN75@assign@2

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN26@assign@2:
  00088	85 ff		 test	 edi, edi
  0008a	75 ea		 jne	 SHORT $LN94@assign@2
  0008c	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0008f	83 f8 10	 cmp	 eax, 16			; 00000010H
  00092	72 0e		 jb	 SHORT $LN68@assign@2
  00094	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00097	5f		 pop	 edi
  00098	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  0009b	8b c6		 mov	 eax, esi
  0009d	5e		 pop	 esi
  0009e	5d		 pop	 ebp

; 1080 : 		}

  0009f	c2 08 00	 ret	 8

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN68@assign@2:
  000a2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000a5	5f		 pop	 edi
  000a6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  000a9	8b c6		 mov	 eax, esi
  000ab	5e		 pop	 esi
  000ac	5d		 pop	 ebp

; 1080 : 		}

  000ad	c2 08 00	 ret	 8

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

$LN74@assign@2:
  000b0	8b c3		 mov	 eax, ebx
$LN75@assign@2:
  000b2	57		 push	 edi
  000b3	55		 push	 ebp
  000b4	51		 push	 ecx
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _memcpy_s
  000bb	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 			_Eos(_Count);

  000be	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c2	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c5	72 02		 jb	 SHORT $LN88@assign@2
  000c7	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN88@assign@2:
  000c9	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
  000cd	5b		 pop	 ebx
$LN90@assign@2:
  000ce	5f		 pop	 edi

; 1078 : 			}
; 1079 : 		return (*this);

  000cf	8b c6		 mov	 eax, esi
  000d1	5e		 pop	 esi
  000d2	5d		 pop	 ebp

; 1080 : 		}

  000d3	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1046 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx

; 1047 : 		if (_Right.size() < _Roff)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Roff$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 5d 14	 cmp	 DWORD PTR [ebp+20], ebx
  00011	73 05		 jae	 SHORT $LN5@assign@3

; 1048 : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@assign@3:

; 1049 : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 7d 14	 mov	 edi, DWORD PTR [ebp+20]

; 1050 : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b fb		 sub	 edi, ebx
  00021	3b c7		 cmp	 eax, edi
  00023	73 02		 jae	 SHORT $LN4@assign@3

; 1051 : 			_Num = _Count;	// trim _Num to size

  00025	8b f8		 mov	 edi, eax
$LN4@assign@3:

; 1052 : 
; 1053 : 		if (this == &_Right)

  00027	3b f5		 cmp	 esi, ebp
  00029	75 1f		 jne	 SHORT $LN3@assign@3

; 1054 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 fb		 add	 edi, ebx
  0002f	57		 push	 edi
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00037	53		 push	 ebx
  00038	6a 00		 push	 0
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00041	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	5b		 pop	 ebx

; 1061 : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign@3:

; 1055 : 		else if (_Grow(_Num))

  0004a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00050	76 05		 jbe	 SHORT $LN17@assign@3
  00052	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@assign@3:
  00057	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005a	3b c7		 cmp	 eax, edi
  0005c	73 1b		 jae	 SHORT $LN16@assign@3
  0005e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00061	50		 push	 eax
  00062	57		 push	 edi
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0006a	85 ff		 test	 edi, edi
$LN91@assign@3:
  0006c	76 7a		 jbe	 SHORT $LN90@assign@3

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

  0006e	83 7d 18 08	 cmp	 DWORD PTR [ebp+24], 8
  00072	72 33		 jb	 SHORT $LN66@assign@3
  00074	8b 4d 04	 mov	 ecx, DWORD PTR [ebp+4]
  00077	eb 31		 jmp	 SHORT $LN67@assign@3

; 1055 : 		else if (_Grow(_Num))

$LN16@assign@3:
  00079	85 ff		 test	 edi, edi
  0007b	75 ef		 jne	 SHORT $LN91@assign@3
  0007d	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00080	83 f8 08	 cmp	 eax, 8
  00083	72 11		 jb	 SHORT $LN60@assign@3
  00085	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00088	33 c9		 xor	 ecx, ecx
  0008a	5f		 pop	 edi
  0008b	66 89 08	 mov	 WORD PTR [eax], cx

; 1059 : 			}
; 1060 : 		return (*this);

  0008e	8b c6		 mov	 eax, esi
  00090	5e		 pop	 esi
  00091	5d		 pop	 ebp
  00092	5b		 pop	 ebx

; 1061 : 		}

  00093	c2 0c 00	 ret	 12			; 0000000cH

; 1055 : 		else if (_Grow(_Num))

$LN60@assign@3:
  00096	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00099	33 c9		 xor	 ecx, ecx
  0009b	5f		 pop	 edi
  0009c	66 89 08	 mov	 WORD PTR [eax], cx

; 1059 : 			}
; 1060 : 		return (*this);

  0009f	8b c6		 mov	 eax, esi
  000a1	5e		 pop	 esi
  000a2	5d		 pop	 ebp
  000a3	5b		 pop	 ebx

; 1061 : 		}

  000a4	c2 0c 00	 ret	 12			; 0000000cH

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

$LN66@assign@3:
  000a7	8d 4d 04	 lea	 ecx, DWORD PTR [ebp+4]
$LN67@assign@3:
  000aa	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000ae	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  000b1	72 05		 jb	 SHORT $LN70@assign@3
  000b3	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  000b6	eb 02		 jmp	 SHORT $LN71@assign@3
$LN70@assign@3:
  000b8	8b c5		 mov	 eax, ebp
$LN71@assign@3:
  000ba	8b 54 24 18	 mov	 edx, DWORD PTR __Roff$[esp+12]
  000be	8d 0c 51	 lea	 ecx, DWORD PTR [ecx+edx*2]
  000c1	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  000c4	53		 push	 ebx
  000c5	51		 push	 ecx
  000c6	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000c9	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  000cc	52		 push	 edx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 _memcpy_s
  000d3	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 			_Eos(_Num);

  000d6	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000da	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000dd	72 03		 jb	 SHORT $LN86@assign@3
  000df	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN86@assign@3:
  000e2	33 c0		 xor	 eax, eax
  000e4	66 89 04 2b	 mov	 WORD PTR [ebx+ebp], ax
$LN90@assign@3:
  000e8	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  000e9	8b c6		 mov	 eax, esi
  000eb	5e		 pop	 esi
  000ec	5d		 pop	 ebp
  000ed	5b		 pop	 ebx

; 1061 : 		}

  000ee	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 721  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 722  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 723  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 724  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
__Al$ = 20						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 625  : #if _HAS_ITERATOR_DEBUGGING
; 626  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 627  : 			{
; 628  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 629  : 			}
; 630  : #endif
; 631  : 		_Tidy();
; 632  : 		assign(_Right, _Roff, _Count);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Right$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Roff$[esp]
  0000b	33 c0		 xor	 eax, eax
  0000d	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00010	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00017	88 46 04	 mov	 BYTE PTR [esi+4], al
  0001a	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 633  : 		}

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	c2 10 00	 ret	 16			; 00000010H
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1041 : 		return (assign(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1042 : 		}

  0000e	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1083 : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 1084 : 		_DEBUG_POINTER(_Ptr);
; 1085 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@assign@4:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@assign@4
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 1086 : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1064 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 1065 : 
; 1066 :  #if _HAS_ITERATOR_DEBUGGING
; 1067 : 		if (_Count != 0)
; 1068 : 			_DEBUG_POINTER(_Ptr);
; 1069 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1070 : 
; 1071 : 		if (_Inside(_Ptr))

  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00008	57		 push	 edi
  00009	85 c9		 test	 ecx, ecx
  0000b	74 49		 je	 SHORT $LN97@assign@5
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 08	 cmp	 edi, 8
  00016	72 04		 jb	 SHORT $LN12@assign@5
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN13@assign@5
$LN12@assign@5:
  0001c	8b d0		 mov	 edx, eax
$LN13@assign@5:
  0001e	3b ca		 cmp	 ecx, edx
  00020	72 34		 jb	 SHORT $LN97@assign@5
  00022	83 ff 08	 cmp	 edi, 8
  00025	72 04		 jb	 SHORT $LN16@assign@5
  00027	8b 10		 mov	 edx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN17@assign@5
$LN16@assign@5:
  0002b	8b d0		 mov	 edx, eax
$LN17@assign@5:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	8d 14 5a	 lea	 edx, DWORD PTR [edx+ebx*2]
  00033	3b d1		 cmp	 edx, ecx
  00035	76 1f		 jbe	 SHORT $LN97@assign@5

; 1072 : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00037	83 ff 08	 cmp	 edi, 8
  0003a	72 02		 jb	 SHORT $LN20@assign@5
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@assign@5:
  0003e	8b 54 24 14	 mov	 edx, DWORD PTR __Count$[esp+8]
  00042	2b c8		 sub	 ecx, eax
  00044	52		 push	 edx
  00045	d1 f9		 sar	 ecx, 1
  00047	51		 push	 ecx
  00048	56		 push	 esi
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx

; 1080 : 		}

  00053	c2 08 00	 ret	 8
$LN97@assign@5:

; 1073 : 
; 1074 : 		if (_Grow(_Count))

  00056	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0005a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00060	76 05		 jbe	 SHORT $LN27@assign@5
  00062	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN27@assign@5:
  00067	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0006a	3b c7		 cmp	 eax, edi
  0006c	73 21		 jae	 SHORT $LN26@assign@5
  0006e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00071	50		 push	 eax
  00072	57		 push	 edi
  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0007a	85 ff		 test	 edi, edi
$LN98@assign@5:
  0007c	76 67		 jbe	 SHORT $LN94@assign@5

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

  0007e	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00081	55		 push	 ebp
  00082	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  00085	83 f9 08	 cmp	 ecx, 8
  00088	72 31		 jb	 SHORT $LN76@assign@5
  0008a	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  0008d	eb 2e		 jmp	 SHORT $LN77@assign@5

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN26@assign@5:
  0008f	85 ff		 test	 edi, edi
  00091	75 e9		 jne	 SHORT $LN98@assign@5
  00093	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00096	83 f8 08	 cmp	 eax, 8
  00099	72 10		 jb	 SHORT $LN70@assign@5
  0009b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009e	33 c9		 xor	 ecx, ecx
  000a0	5f		 pop	 edi
  000a1	66 89 08	 mov	 WORD PTR [eax], cx

; 1078 : 			}
; 1079 : 		return (*this);

  000a4	8b c6		 mov	 eax, esi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx

; 1080 : 		}

  000a8	c2 08 00	 ret	 8

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN70@assign@5:
  000ab	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000ae	33 c9		 xor	 ecx, ecx
  000b0	5f		 pop	 edi
  000b1	66 89 08	 mov	 WORD PTR [eax], cx

; 1078 : 			}
; 1079 : 		return (*this);

  000b4	8b c6		 mov	 eax, esi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx

; 1080 : 		}

  000b8	c2 08 00	 ret	 8

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

$LN76@assign@5:
  000bb	8b c5		 mov	 eax, ebp
$LN77@assign@5:
  000bd	8b 54 24 14	 mov	 edx, DWORD PTR __Ptr$[esp+12]
  000c1	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  000c4	53		 push	 ebx
  000c5	52		 push	 edx
  000c6	03 c9		 add	 ecx, ecx
  000c8	51		 push	 ecx
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 			_Eos(_Count);

  000d2	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000d6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000d9	72 03		 jb	 SHORT $LN92@assign@5
  000db	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN92@assign@5:
  000de	33 d2		 xor	 edx, edx
  000e0	66 89 14 2b	 mov	 WORD PTR [ebx+ebp], dx
  000e4	5d		 pop	 ebp
$LN94@assign@5:
  000e5	5f		 pop	 edi

; 1078 : 			}
; 1079 : 		return (*this);

  000e6	8b c6		 mov	 eax, esi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx

; 1080 : 		}

  000ea	c2 08 00	 ret	 8
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 652  : 		_Tidy();
; 653  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$LL37@basic_stri@3:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL37@basic_stri@3
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 654  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 916  : 		return (assign(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 917  : 		}

  0000e	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
; Function compile flags: /Ogtpy
;	COMDAT ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
_TEXT	SEGMENT
$T86797 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr, COMDAT
; _this$ = ecx

; 1998 : 		{	// return [_Off, _Off + _Count) as new string

  00000	51		 push	 ecx

; 1999 : 		return (_Myt(*this, _Off, _Count, get_allocator()));

  00001	8b 54 24 0c	 mov	 edx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	33 c0		 xor	 eax, eax
  0000c	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000f	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00016	89 44 24 04	 mov	 DWORD PTR $T86797[esp+8], eax
  0001a	88 46 04	 mov	 BYTE PTR [esi+4], al
  0001d	8b 44 24 14	 mov	 eax, DWORD PTR __Count$[esp+4]
  00021	50		 push	 eax
  00022	52		 push	 edx
  00023	51		 push	 ecx
  00024	8b ce		 mov	 ecx, esi
  00026	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi

; 2000 : 		}

  0002e	59		 pop	 ecx
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1083 : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 1084 : 		_DEBUG_POINTER(_Ptr);
; 1085 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@assign@6:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL5@assign@6
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 1086 : 		}

  00028	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 652  : 		_Tidy();
; 653  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c0		 xor	 eax, eax
  00009	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00010	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00017	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0001b	8b c2		 mov	 eax, edx
  0001d	57		 push	 edi
  0001e	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
$LL39@basic_stri@4:
  00021	66 8b 08	 mov	 cx, WORD PTR [eax]
  00024	83 c0 02	 add	 eax, 2
  00027	66 85 c9	 test	 cx, cx
  0002a	75 f5		 jne	 SHORT $LL39@basic_stri@4
  0002c	2b c7		 sub	 eax, edi
  0002e	d1 f8		 sar	 eax, 1
  00030	50		 push	 eax
  00031	52		 push	 edx
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00039	5f		 pop	 edi

; 654  : 		}

  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??_C@_1DO@HBNMGCKD@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?$CF?$AAd?$AA?$AA@ ; `string'
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ; HarddiskVolumePathToPartitionPath
EXTRN	?WideToSingleString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z:PROC ; WideToSingleString
EXTRN	_ResolveSymbolicLink:PROC
EXTRN	_swprintf_s:PROC
EXTRN	?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:PROC ; SingleStringToWide
;	COMDAT ??_C@_1DO@HBNMGCKD@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?$CF?$AAd?$AA?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_1DO@HBNMGCKD@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?$CF?$AAd?$AA?$AA@ DB '\'
	DB	00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'\', 00H, 'H', 00H, 'a', 00H, 'r', 00H, 'd', 00H, 'd', 00H, 'i'
	DB	00H, 's', 00H, 'k', 00H, '%', 00H, 'd', 00H, '\', 00H, 'P', 00H
	DB	'a', 00H, 'r', 00H, 't', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, '%', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z$1
__ehfuncinfo$?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\volume\volutil.cpp
xdata$x	ENDS
;	COMDAT ?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z
_TEXT	SEGMENT
$T87066 = -1120						; size = 4
_driveNumber$80971 = -1120				; size = 4
___$ReturnUdt$GSCopy$ = -1116				; size = 4
$T87062 = -1112						; size = 28
_volPath$ = -1084					; size = 28
_partitionPath$80979 = -1056				; size = 520
_resolvedPath$80991 = -536				; size = 520
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_harddiskVolumePath$ = 12				; size = 4
?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z PROC ; HarddiskVolumePathToPartitionPath, COMDAT

; 49   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 54 04 00
	00		 sub	 esp, 1108		; 00000454H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 50 04
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+1120], eax
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c4		 xor	 eax, esp
  0002d	50		 push	 eax
  0002e	8d 84 24 68 04
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+1140]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 50   : 	wstring volPath = SingleStringToWide (harddiskVolumePath);
; 51   : 
; 52   : 	for (int driveNumber = 0; driveNumber < MAX_HOST_DRIVE_NUMBER; driveNumber++)

  0003b	8b 84 24 78 04
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+1136]
  00042	89 44 24 18	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+1140], eax
  00046	8b 84 24 7c 04
	00 00		 mov	 eax, DWORD PTR _harddiskVolumePath$[esp+1136]
  0004d	50		 push	 eax
  0004e	8d 4c 24 3c	 lea	 ecx, DWORD PTR _volPath$[esp+1144]
  00052	33 f6		 xor	 esi, esi
  00054	51		 push	 ecx
  00055	89 74 24 1c	 mov	 DWORD PTR $T87066[esp+1148], esi
  00059	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  0005e	83 c4 08	 add	 esp, 8
  00061	89 b4 24 70 04
	00 00		 mov	 DWORD PTR __$EHRec$[esp+1148], esi
  00068	89 74 24 14	 mov	 DWORD PTR _driveNumber$80971[esp+1140], esi
$LN10@HarddiskVo:

; 53   : 	{
; 54   : 		for (int partNumber = 0; partNumber < MAX_HOST_PARTITION_NUMBER; partNumber++)

  0006c	33 ed		 xor	 ebp, ebp
$LN7@HarddiskVo:

; 55   : 		{
; 56   : 			wchar_t partitionPath[TC_MAX_PATH];
; 57   : 			swprintf_s (partitionPath, ARRAYSIZE (partitionPath), L"\\Device\\Harddisk%d\\Partition%d", driveNumber, partNumber);

  0006e	8b 54 24 14	 mov	 edx, DWORD PTR _driveNumber$80971[esp+1140]
  00072	55		 push	 ebp
  00073	52		 push	 edx
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_1DO@HBNMGCKD@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?$CF?$AAd?$AA?$AA@
  00079	8d 44 24 60	 lea	 eax, DWORD PTR _partitionPath$80979[esp+1152]
  0007d	68 04 01 00 00	 push	 260			; 00000104H
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 _swprintf_s

; 58   : 
; 59   : 			wchar_t resolvedPath[TC_MAX_PATH];
; 60   : 			if (ResolveSymbolicLink (partitionPath, (PWSTR)resolvedPath))

  00088	8d 8c 24 70 02
	00 00		 lea	 ecx, DWORD PTR _resolvedPath$80991[esp+1160]
  0008f	51		 push	 ecx
  00090	8d 54 24 6c	 lea	 edx, DWORD PTR _partitionPath$80979[esp+1164]
  00094	52		 push	 edx
  00095	e8 00 00 00 00	 call	 _ResolveSymbolicLink
  0009a	83 c4 1c	 add	 esp, 28			; 0000001cH
  0009d	85 c0		 test	 eax, eax
  0009f	0f 84 15 01 00
	00		 je	 $LN4@HarddiskVo

; 61   : 			{
; 62   : 				if (volPath == resolvedPath)

  000a5	8d 84 24 5c 02
	00 00		 lea	 eax, DWORD PTR _resolvedPath$80991[esp+1140]
  000ac	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  000af	90		 npad	 1
$LL209@HarddiskVo:
  000b0	66 8b 08	 mov	 cx, WORD PTR [eax]
  000b3	83 c0 02	 add	 eax, 2
  000b6	66 85 c9	 test	 cx, cx
  000b9	75 f5		 jne	 SHORT $LL209@HarddiskVo
  000bb	8b 7c 24 4c	 mov	 edi, DWORD PTR _volPath$[esp+1160]
  000bf	2b c2		 sub	 eax, edx
  000c1	d1 f8		 sar	 eax, 1
  000c3	8b f7		 mov	 esi, edi
  000c5	3b f8		 cmp	 edi, eax
  000c7	72 02		 jb	 SHORT $LN28@HarddiskVo
  000c9	8b f0		 mov	 esi, eax
$LN28@HarddiskVo:
  000cb	83 7c 24 50 08	 cmp	 DWORD PTR _volPath$[esp+1164], 8
  000d0	8b 54 24 3c	 mov	 edx, DWORD PTR _volPath$[esp+1144]
  000d4	73 04		 jae	 SHORT $LN36@HarddiskVo
  000d6	8d 54 24 3c	 lea	 edx, DWORD PTR _volPath$[esp+1144]
$LN36@HarddiskVo:
  000da	8d 8c 24 5c 02
	00 00		 lea	 ecx, DWORD PTR _resolvedPath$80991[esp+1140]
  000e1	85 f6		 test	 esi, esi
  000e3	76 25		 jbe	 SHORT $LN31@HarddiskVo
$LL42@HarddiskVo:
  000e5	66 8b 1a	 mov	 bx, WORD PTR [edx]
  000e8	66 3b 19	 cmp	 bx, WORD PTR [ecx]
  000eb	75 0d		 jne	 SHORT $LN202@HarddiskVo
  000ed	83 c2 02	 add	 edx, 2
  000f0	83 c1 02	 add	 ecx, 2
  000f3	83 ee 01	 sub	 esi, 1
  000f6	75 ed		 jne	 SHORT $LL42@HarddiskVo

; 64   : 			}
; 65   : 			else if (partNumber == 0)

  000f8	eb 10		 jmp	 SHORT $LN31@HarddiskVo
$LN202@HarddiskVo:

; 61   : 			{
; 62   : 				if (volPath == resolvedPath)

  000fa	66 8b d3	 mov	 dx, bx
  000fd	66 3b 11	 cmp	 dx, WORD PTR [ecx]
  00100	1b c9		 sbb	 ecx, ecx
  00102	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00105	83 c1 01	 add	 ecx, 1
  00108	75 0f		 jne	 SHORT $LN30@HarddiskVo
$LN31@HarddiskVo:
  0010a	3b f8		 cmp	 edi, eax
  0010c	0f 82 ac 00 00
	00		 jb	 $LN6@HarddiskVo
  00112	33 c9		 xor	 ecx, ecx
  00114	3b f8		 cmp	 edi, eax
  00116	0f 95 c1	 setne	 cl
$LN30@HarddiskVo:
  00119	85 c9		 test	 ecx, ecx
  0011b	0f 85 9d 00 00
	00		 jne	 $LN6@HarddiskVo

; 63   : 					return WideToSingleString (partitionPath);

  00121	33 c0		 xor	 eax, eax
  00123	66 89 44 24 20	 mov	 WORD PTR $T87062[esp+1144], ax
  00128	be 07 00 00 00	 mov	 esi, 7
  0012d	8d 44 24 54	 lea	 eax, DWORD PTR _partitionPath$80979[esp+1140]
  00131	89 74 24 34	 mov	 DWORD PTR $T87062[esp+1164], esi
  00135	89 4c 24 30	 mov	 DWORD PTR $T87062[esp+1160], ecx
  00139	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  0013c	8d 64 24 00	 npad	 4
$LL210@HarddiskVo:
  00140	66 8b 08	 mov	 cx, WORD PTR [eax]
  00143	83 c0 02	 add	 eax, 2
  00146	66 85 c9	 test	 cx, cx
  00149	75 f5		 jne	 SHORT $LL210@HarddiskVo
  0014b	2b c2		 sub	 eax, edx
  0014d	d1 f8		 sar	 eax, 1
  0014f	50		 push	 eax
  00150	8d 4c 24 58	 lea	 ecx, DWORD PTR _partitionPath$80979[esp+1144]
  00154	51		 push	 ecx
  00155	8d 4c 24 24	 lea	 ecx, DWORD PTR $T87062[esp+1148]
  00159	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0015e	8b 7c 24 18	 mov	 edi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+1140]
  00162	8d 54 24 1c	 lea	 edx, DWORD PTR $T87062[esp+1140]
  00166	52		 push	 edx
  00167	57		 push	 edi
  00168	c6 84 24 78 04
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+1156], 1
  00170	e8 00 00 00 00	 call	 ?WideToSingleString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; WideToSingleString
  00175	bb 08 00 00 00	 mov	 ebx, 8
  0017a	83 c4 08	 add	 esp, 8
  0017d	39 5c 24 34	 cmp	 DWORD PTR $T87062[esp+1164], ebx
  00181	72 0d		 jb	 SHORT $LN101@HarddiskVo
  00183	8b 44 24 20	 mov	 eax, DWORD PTR $T87062[esp+1144]
  00187	50		 push	 eax
  00188	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0018d	83 c4 04	 add	 esp, 4
$LN101@HarddiskVo:
  00190	33 c9		 xor	 ecx, ecx
  00192	89 74 24 34	 mov	 DWORD PTR $T87062[esp+1164], esi
  00196	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR $T87062[esp+1160], 0
  0019e	66 89 4c 24 20	 mov	 WORD PTR $T87062[esp+1144], cx
  001a3	39 5c 24 50	 cmp	 DWORD PTR _volPath$[esp+1164], ebx
  001a7	72 0d		 jb	 SHORT $LN129@HarddiskVo
  001a9	8b 54 24 3c	 mov	 edx, DWORD PTR _volPath$[esp+1144]
  001ad	52		 push	 edx
  001ae	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001b3	83 c4 04	 add	 esp, 4
$LN129@HarddiskVo:
  001b6	8b c7		 mov	 eax, edi
  001b8	eb 4c		 jmp	 SHORT $LN11@HarddiskVo
$LN4@HarddiskVo:

; 64   : 			}
; 65   : 			else if (partNumber == 0)

  001ba	85 ed		 test	 ebp, ebp
  001bc	74 0a		 je	 SHORT $LN9@HarddiskVo
$LN6@HarddiskVo:

; 53   : 	{
; 54   : 		for (int partNumber = 0; partNumber < MAX_HOST_PARTITION_NUMBER; partNumber++)

  001be	45		 inc	 ebp
  001bf	83 fd 20	 cmp	 ebp, 32			; 00000020H
  001c2	0f 8c a6 fe ff
	ff		 jl	 $LN7@HarddiskVo
$LN9@HarddiskVo:

; 50   : 	wstring volPath = SingleStringToWide (harddiskVolumePath);
; 51   : 
; 52   : 	for (int driveNumber = 0; driveNumber < MAX_HOST_DRIVE_NUMBER; driveNumber++)

  001c8	8b 44 24 14	 mov	 eax, DWORD PTR _driveNumber$80971[esp+1140]
  001cc	40		 inc	 eax
  001cd	83 f8 40	 cmp	 eax, 64			; 00000040H
  001d0	89 44 24 14	 mov	 DWORD PTR _driveNumber$80971[esp+1140], eax
  001d4	0f 8c 92 fe ff
	ff		 jl	 $LN10@HarddiskVo

; 66   : 				break;
; 67   : 		}
; 68   : 	}
; 69   : 
; 70   : 	return string();

  001da	8b 74 24 18	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+1140]
  001de	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  001e5	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  001ec	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  001f0	83 7c 24 50 08	 cmp	 DWORD PTR _volPath$[esp+1164], 8
  001f5	72 0d		 jb	 SHORT $LN189@HarddiskVo
  001f7	8b 44 24 3c	 mov	 eax, DWORD PTR _volPath$[esp+1144]
  001fb	50		 push	 eax
  001fc	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00201	83 c4 04	 add	 esp, 4
$LN189@HarddiskVo:
  00204	8b c6		 mov	 eax, esi
$LN11@HarddiskVo:

; 71   : }

  00206	8b 8c 24 68 04
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+1140]
  0020d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00214	59		 pop	 ecx
  00215	5f		 pop	 edi
  00216	5e		 pop	 esi
  00217	5d		 pop	 ebp
  00218	5b		 pop	 ebx
  00219	8b 8c 24 50 04
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1120]
  00220	33 cc		 xor	 ecx, esp
  00222	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00227	81 c4 60 04 00
	00		 add	 esp, 1120		; 00000460H
  0022d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z$0:
  00000	8d 8d c4 fb ff
	ff		 lea	 ecx, DWORD PTR _volPath$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z$1:
  0000b	8d 8d a8 fb ff
	ff		 lea	 ecx, DWORD PTR $T87062[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 82 9c fb ff
	ff		 lea	 eax, DWORD PTR [edx-1124]
  00020	8b 8a 98 fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1128]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	83 c0 10	 add	 eax, 16			; 00000010H
  00030	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ENDP ; HarddiskVolumePathToPartitionPath
PUBLIC	??_C@_02EKJJMPLG@?$HN?2?$AA@			; `string'
PUBLIC	??_C@_07HBPFMAGN@Volume?$HL?$AA@		; `string'
PUBLIC	??_C@_04HMNMCKMH@?2?2?$DP?2?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z ; VolumeGuidPathToDevicePath
EXTRN	__imp__QueryDosDeviceA@12:PROC
;	COMDAT ??_C@_02EKJJMPLG@?$HN?2?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_02EKJJMPLG@?$HN?2?$AA@ DB '}\', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HBPFMAGN@Volume?$HL?$AA@
CONST	SEGMENT
??_C@_07HBPFMAGN@Volume?$HL?$AA@ DB 'Volume{', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HMNMCKMH@?2?2?$DP?2?$AA@
CONST	SEGMENT
??_C@_04HMNMCKMH@?2?2?$DP?2?$AA@ DB '\\?\', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$6
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\volume\volutil.cpp
xdata$x	ENDS
;	COMDAT ?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z
_TEXT	SEGMENT
$T87873 = -365						; size = 1
$T87883 = -364						; size = 4
$T87875 = -360						; size = 28
$T87874 = -360						; size = 28
$T87872 = -360						; size = 28
$T87877 = -332						; size = 28
_partitionPath$ = -304					; size = 28
_volDevPath$ = -276					; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_volumeGuidPath$ = 12					; size = 28
?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z PROC ; VolumeGuidPathToDevicePath, COMDAT

; 74   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 64 01 00
	00		 sub	 esp, 356		; 00000164H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 60 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+368], eax
  00022	53		 push	 ebx
  00023	55		 push	 ebp
  00024	56		 push	 esi
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c4		 xor	 eax, esp
  0002c	50		 push	 eax
  0002d	8d 84 24 74 01
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+384]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	8b b4 24 84 01
	00 00		 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+380]

; 75   : 	if (volumeGuidPath.find ("\\\\?\\") == 0)

  00041	33 db		 xor	 ebx, ebx
  00043	89 5c 24 14	 mov	 DWORD PTR $T87883[esp+384], ebx
  00047	6a 04		 push	 4
  00049	53		 push	 ebx
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_04HMNMCKMH@?2?2?$DP?2?$AA@
  0004f	8d 8c 24 94 01
	00 00		 lea	 ecx, DWORD PTR _volumeGuidPath$[esp+392]
  00056	89 9c 24 88 01
	00 00		 mov	 DWORD PTR __$EHRec$[esp+404], ebx
  0005d	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00062	8d 6b 10	 lea	 ebp, DWORD PTR [ebx+16]
  00065	85 c0		 test	 eax, eax
  00067	75 47		 jne	 SHORT $LN43@VolumeGuid

; 76   : 		volumeGuidPath = volumeGuidPath.substr (4);

  00069	6a ff		 push	 -1
  0006b	6a 04		 push	 4
  0006d	8d 44 24 20	 lea	 eax, DWORD PTR $T87872[esp+392]
  00071	50		 push	 eax
  00072	8d 8c 24 94 01
	00 00		 lea	 ecx, DWORD PTR _volumeGuidPath$[esp+392]
  00079	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  0007e	6a ff		 push	 -1
  00080	53		 push	 ebx
  00081	50		 push	 eax
  00082	8d 8c 24 94 01
	00 00		 lea	 ecx, DWORD PTR _volumeGuidPath$[esp+392]
  00089	c6 84 24 88 01
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+404], 1
  00091	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00096	88 9c 24 7c 01
	00 00		 mov	 BYTE PTR __$EHRec$[esp+392], bl
  0009d	39 6c 24 30	 cmp	 DWORD PTR $T87872[esp+408], ebp
  000a1	72 0d		 jb	 SHORT $LN43@VolumeGuid
  000a3	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T87872[esp+388]
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ad	83 c4 04	 add	 esp, 4
$LN43@VolumeGuid:

; 77   : 
; 78   : 	if (volumeGuidPath.find ("Volume{") != 0 || volumeGuidPath.rfind ("}\\") != volumeGuidPath.size() - 2)

  000b0	6a 07		 push	 7
  000b2	53		 push	 ebx
  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_07HBPFMAGN@Volume?$HL?$AA@
  000b8	8d 8c 24 94 01
	00 00		 lea	 ecx, DWORD PTR _volumeGuidPath$[esp+392]
  000bf	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  000c4	85 c0		 test	 eax, eax
  000c6	0f 85 7f 01 00
	00		 jne	 $LN2@VolumeGuid
  000cc	6a 02		 push	 2
  000ce	6a ff		 push	 -1
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_02EKJJMPLG@?$HN?2?$AA@
  000d5	8d 8c 24 94 01
	00 00		 lea	 ecx, DWORD PTR _volumeGuidPath$[esp+392]
  000dc	e8 00 00 00 00	 call	 ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
  000e1	8b 8c 24 9c 01
	00 00		 mov	 ecx, DWORD PTR _volumeGuidPath$[esp+400]
  000e8	8d 51 fe	 lea	 edx, DWORD PTR [ecx-2]
  000eb	3b c2		 cmp	 eax, edx
  000ed	0f 85 58 01 00
	00		 jne	 $LN2@VolumeGuid

; 80   : 
; 81   : 	char volDevPath[TC_MAX_PATH];
; 82   : 	if (QueryDosDeviceA(volumeGuidPath.substr (0, volumeGuidPath.size() - 1).c_str(), volDevPath, TC_MAX_PATH) == 0)

  000f3	49		 dec	 ecx
  000f4	51		 push	 ecx
  000f5	53		 push	 ebx
  000f6	8d 44 24 20	 lea	 eax, DWORD PTR $T87874[esp+392]
  000fa	50		 push	 eax
  000fb	8d 8c 24 94 01
	00 00		 lea	 ecx, DWORD PTR _volumeGuidPath$[esp+392]
  00102	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  00107	39 68 18	 cmp	 DWORD PTR [eax+24], ebp
  0010a	72 05		 jb	 SHORT $LN127@VolumeGuid
  0010c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0010f	eb 03		 jmp	 SHORT $LN128@VolumeGuid
$LN127@VolumeGuid:
  00111	83 c0 04	 add	 eax, 4
$LN128@VolumeGuid:
  00114	68 04 01 00 00	 push	 260			; 00000104H
  00119	8d 4c 24 70	 lea	 ecx, DWORD PTR _volDevPath$[esp+388]
  0011d	51		 push	 ecx
  0011e	50		 push	 eax
  0011f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__QueryDosDeviceA@12
  00125	85 c0		 test	 eax, eax
  00127	0f 94 44 24 13	 sete	 BYTE PTR $T87873[esp+384]
  0012c	39 6c 24 30	 cmp	 DWORD PTR $T87874[esp+408], ebp
  00130	72 0d		 jb	 SHORT $LN145@VolumeGuid
  00132	8b 54 24 1c	 mov	 edx, DWORD PTR $T87874[esp+388]
  00136	52		 push	 edx
  00137	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0013c	83 c4 04	 add	 esp, 4
$LN145@VolumeGuid:
  0013f	38 5c 24 13	 cmp	 BYTE PTR $T87873[esp+384], bl
  00143	74 27		 je	 SHORT $LN1@VolumeGuid

; 83   : 		return string();

  00145	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0014c	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0014f	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00152	39 ac 24 a0 01
	00 00		 cmp	 DWORD PTR _volumeGuidPath$[esp+404], ebp
  00159	0f 82 12 01 00
	00		 jb	 $LN111@VolumeGuid
  0015f	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR _volumeGuidPath$[esp+384]
  00166	50		 push	 eax
  00167	e9 fd 00 00 00	 jmp	 $LN321@VolumeGuid
$LN1@VolumeGuid:

; 84   : 
; 85   : 	string partitionPath = HarddiskVolumePathToPartitionPath (volDevPath);

  0016c	8d 4c 24 6c	 lea	 ecx, DWORD PTR _volDevPath$[esp+384]
  00170	51		 push	 ecx
  00171	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T87875[esp+388]
  00175	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0017a	8d 54 24 18	 lea	 edx, DWORD PTR $T87875[esp+384]
  0017e	52		 push	 edx
  0017f	8d 44 24 54	 lea	 eax, DWORD PTR _partitionPath$[esp+388]
  00183	50		 push	 eax
  00184	c6 84 24 84 01
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+400], 2
  0018c	e8 00 00 00 00	 call	 ?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ; HarddiskVolumePathToPartitionPath
  00191	83 c4 08	 add	 esp, 8
  00194	c6 84 24 7c 01
	00 00 04	 mov	 BYTE PTR __$EHRec$[esp+392], 4
  0019c	39 6c 24 30	 cmp	 DWORD PTR $T87875[esp+408], ebp
  001a0	72 0d		 jb	 SHORT $LN229@VolumeGuid
  001a2	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T87875[esp+388]
  001a6	51		 push	 ecx
  001a7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001ac	83 c4 04	 add	 esp, 4
$LN229@VolumeGuid:
  001af	c7 44 24 30 0f
	00 00 00	 mov	 DWORD PTR $T87875[esp+408], 15 ; 0000000fH
  001b7	89 5c 24 2c	 mov	 DWORD PTR $T87875[esp+404], ebx
  001bb	88 5c 24 1c	 mov	 BYTE PTR $T87875[esp+388], bl

; 86   : 
; 87   : 	return partitionPath.empty() ? volDevPath : partitionPath;

  001bf	39 5c 24 64	 cmp	 DWORD PTR _partitionPath$[esp+404], ebx
  001c3	75 20		 jne	 SHORT $LN7@VolumeGuid
  001c5	8d 54 24 6c	 lea	 edx, DWORD PTR _volDevPath$[esp+384]
  001c9	52		 push	 edx
  001ca	8d 4c 24 38	 lea	 ecx, DWORD PTR $T87877[esp+388]
  001ce	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001d3	c6 84 24 7c 01
	00 00 05	 mov	 BYTE PTR __$EHRec$[esp+392], 5
  001db	c7 44 24 14 02
	00 00 00	 mov	 DWORD PTR $T87883[esp+384], 2
  001e3	eb 04		 jmp	 SHORT $LN8@VolumeGuid
$LN7@VolumeGuid:
  001e5	8d 44 24 50	 lea	 eax, DWORD PTR _partitionPath$[esp+384]
$LN8@VolumeGuid:
  001e9	6a ff		 push	 -1
  001eb	53		 push	 ebx
  001ec	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  001f3	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  001f6	50		 push	 eax
  001f7	8b ce		 mov	 ecx, esi
  001f9	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  001fc	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00201	8b 44 24 14	 mov	 eax, DWORD PTR $T87883[esp+384]
  00205	83 c8 01	 or	 eax, 1
  00208	a8 02		 test	 al, 2
  0020a	74 09		 je	 SHORT $LN18@VolumeGuid
  0020c	8d 4c 24 34	 lea	 ecx, DWORD PTR $T87877[esp+384]
  00210	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN18@VolumeGuid:
  00215	39 6c 24 68	 cmp	 DWORD PTR _partitionPath$[esp+408], ebp
  00219	72 0d		 jb	 SHORT $LN283@VolumeGuid
  0021b	8b 44 24 54	 mov	 eax, DWORD PTR _partitionPath$[esp+388]
  0021f	50		 push	 eax
  00220	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00225	83 c4 04	 add	 esp, 4
$LN283@VolumeGuid:
  00228	c7 44 24 68 0f
	00 00 00	 mov	 DWORD PTR _partitionPath$[esp+408], 15 ; 0000000fH
  00230	89 5c 24 64	 mov	 DWORD PTR _partitionPath$[esp+404], ebx
  00234	88 5c 24 54	 mov	 BYTE PTR _partitionPath$[esp+388], bl
  00238	39 ac 24 a0 01
	00 00		 cmp	 DWORD PTR _volumeGuidPath$[esp+404], ebp
  0023f	72 30		 jb	 SHORT $LN111@VolumeGuid
  00241	8b 8c 24 8c 01
	00 00		 mov	 ecx, DWORD PTR _volumeGuidPath$[esp+384]
  00248	51		 push	 ecx
  00249	eb 1e		 jmp	 SHORT $LN321@VolumeGuid
$LN2@VolumeGuid:

; 79   : 		return string();

  0024b	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00252	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00255	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00258	39 ac 24 a0 01
	00 00		 cmp	 DWORD PTR _volumeGuidPath$[esp+404], ebp
  0025f	72 10		 jb	 SHORT $LN111@VolumeGuid
  00261	8b 94 24 8c 01
	00 00		 mov	 edx, DWORD PTR _volumeGuidPath$[esp+384]
  00268	52		 push	 edx
$LN321@VolumeGuid:
  00269	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0026e	83 c4 04	 add	 esp, 4
$LN111@VolumeGuid:
  00271	8b c6		 mov	 eax, esi

; 88   : }

  00273	8b 8c 24 74 01
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+384]
  0027a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00281	59		 pop	 ecx
  00282	5e		 pop	 esi
  00283	5d		 pop	 ebp
  00284	5b		 pop	 ebx
  00285	8b 8c 24 60 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+368]
  0028c	33 cc		 xor	 ecx, esp
  0028e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00293	81 c4 70 01 00
	00		 add	 esp, 368		; 00000170H
  00299	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _volumeGuidPath$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$1:
  00008	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR $T87872[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$4:
  00013	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR $T87875[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$5:
  0001e	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _partitionPath$[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$6:
  00029	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR $T87883[ebp]
  0002f	83 e0 02	 and	 eax, 2
  00032	0f 84 12 00 00
	00		 je	 $LN17@VolumeGuid
  00038	83 a5 94 fe ff
	ff fd		 and	 DWORD PTR $T87883[ebp], -3 ; fffffffdH
  0003f	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR $T87877[ebp]
  00045	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN17@VolumeGuid:
  0004a	c3		 ret	 0
__ehhandler$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z:
  0004b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004f	8d 82 90 fe ff
	ff		 lea	 eax, DWORD PTR [edx-368]
  00055	8b 8a 8c fe ff
	ff		 mov	 ecx, DWORD PTR [edx-372]
  0005b	33 c8		 xor	 ecx, eax
  0005d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00062	83 c0 0c	 add	 eax, 12			; 0000000cH
  00065	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00068	33 c8		 xor	 ecx, eax
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z
  00074	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z ENDP ; VolumeGuidPathToDevicePath
PUBLIC	??_C@_06OLPECHEJ@?2?$DP?$DP?2?$CFs?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_IsMountedVolume
EXTRN	__wcsicmp:PROC
EXTRN	__imp__DeviceIoControl@32:PROC
EXTRN	_hDriver:DWORD
EXTRN	_ToUNICODE:PROC
EXTRN	_strcpy_s:PROC
EXTRN	_sprintf_s:PROC
EXTRN	__chkstk:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_06OLPECHEJ@?2?$DP?$DP?2?$CFs?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_06OLPECHEJ@?2?$DP?$DP?2?$CFs?$AA@ DB '\??\%s', 00H ; `string'
; Function compile flags: /Ogtpy
; File c:\home\public\desktop\projects\ciphershed.build\src\common\volume\volutil.cpp
CONST	ENDS
;	COMDAT _IsMountedVolume
_TEXT	SEGMENT
_dwResult$ = -14516					; size = 4
$T89106 = -14512					; size = 4
_mlist$ = -14508					; size = 13940
_resolvedPath$ = -568					; size = 28
_volume$ = -540						; size = 536
__$ArrayPad$ = -4					; size = 4
_volname$ = 8						; size = 4
_IsMountedVolume PROC					; COMDAT

; 91   : {

  00000	b8 b4 38 00 00	 mov	 eax, 14516		; 000038b4H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 b0 38
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+14516], eax
  00018	56		 push	 esi
  00019	8b b4 24 bc 38
	00 00		 mov	 esi, DWORD PTR _volname$[esp+14516]

; 92   : 	MOUNT_LIST_STRUCT mlist;
; 93   : 	DWORD dwResult;
; 94   : 	int i;
; 95   : 	char volume[TC_MAX_PATH*2+16];
; 96   : 
; 97   : 	strcpy (volume, volname);

  00020	8d 94 24 9c 36
	00 00		 lea	 edx, DWORD PTR _volume$[esp+14520]
  00027	57		 push	 edi
  00028	8b c6		 mov	 eax, esi
  0002a	2b d6		 sub	 edx, esi
  0002c	8d 64 24 00	 npad	 4
$LL9@IsMountedV:
  00030	8a 08		 mov	 cl, BYTE PTR [eax]
  00032	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00035	40		 inc	 eax
  00036	84 c9		 test	 cl, cl
  00038	75 f6		 jne	 SHORT $LL9@IsMountedV

; 98   : 
; 99   : 	if (strstr (volname, "\\Device\\") != volname)

  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_08MBBBEOPI@?2Device?2?$AA@
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 _strstr
  00045	83 c4 08	 add	 esp, 8
  00048	3b c6		 cmp	 eax, esi
  0004a	74 1b		 je	 SHORT $LN6@IsMountedV

; 100  : 		snprintf(volume, ARRAY_LENGTH(volume), "\\??\\%s", volname);

  0004c	56		 push	 esi
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_06OLPECHEJ@?2?$DP?$DP?2?$CFs?$AA@
  00052	8d 84 24 a8 36
	00 00		 lea	 eax, DWORD PTR _volume$[esp+14532]
  00059	68 18 02 00 00	 push	 536			; 00000218H
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _sprintf_s
  00064	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@IsMountedV:

; 101  : 
; 102  : 	string resolvedPath = VolumeGuidPathToDevicePath (volname);

  00067	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0006a	8b cc		 mov	 ecx, esp
  0006c	8b c6		 mov	 eax, esi
  0006e	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00075	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  0007c	89 64 24 28	 mov	 DWORD PTR $T89106[esp+14552], esp
  00080	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  00084	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LL110@IsMountedV:
  00087	8a 10		 mov	 dl, BYTE PTR [eax]
  00089	40		 inc	 eax
  0008a	84 d2		 test	 dl, dl
  0008c	75 f9		 jne	 SHORT $LL110@IsMountedV
  0008e	2b c7		 sub	 eax, edi
  00090	50		 push	 eax
  00091	56		 push	 esi
  00092	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00097	8d 8c 24 a0 36
	00 00		 lea	 ecx, DWORD PTR _resolvedPath$[esp+14552]
  0009e	51		 push	 ecx
  0009f	e8 00 00 00 00	 call	 ?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z ; VolumeGuidPathToDevicePath
  000a4	83 c4 20	 add	 esp, 32			; 00000020H

; 103  : 	if (!resolvedPath.empty())

  000a7	83 bc 24 98 36
	00 00 00	 cmp	 DWORD PTR _resolvedPath$[esp+14544], 0
  000af	74 2e		 je	 SHORT $LN5@IsMountedV

; 104  : 		strcpy_s (volume, sizeof (volume), resolvedPath.c_str());

  000b1	83 bc 24 9c 36
	00 00 10	 cmp	 DWORD PTR _resolvedPath$[esp+14548], 16 ; 00000010H
  000b9	8b 84 24 88 36
	00 00		 mov	 eax, DWORD PTR _resolvedPath$[esp+14528]
  000c0	73 07		 jae	 SHORT $LN53@IsMountedV
  000c2	8d 84 24 88 36
	00 00		 lea	 eax, DWORD PTR _resolvedPath$[esp+14528]
$LN53@IsMountedV:
  000c9	50		 push	 eax
  000ca	8d 94 24 a4 36
	00 00		 lea	 edx, DWORD PTR _volume$[esp+14528]
  000d1	68 18 02 00 00	 push	 536			; 00000218H
  000d6	52		 push	 edx
  000d7	e8 00 00 00 00	 call	 _strcpy_s
  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@IsMountedV:

; 105  : 
; 106  : 	ToUNICODE (volume);

  000df	8d 84 24 a0 36
	00 00		 lea	 eax, DWORD PTR _volume$[esp+14524]
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ToUNICODE

; 107  : 
; 108  : 	memset (&mlist, 0, sizeof (mlist));

  000ec	68 74 36 00 00	 push	 13940			; 00003674H
  000f1	8d 4c 24 18	 lea	 ecx, DWORD PTR _mlist$[esp+14532]
  000f5	6a 00		 push	 0
  000f7	51		 push	 ecx
  000f8	e8 00 00 00 00	 call	 _memset
  000fd	83 c4 10	 add	 esp, 16			; 00000010H

; 109  : 	DeviceIoControl (hDriver, TC_IOCTL_GET_MOUNTED_VOLUMES, &mlist,
; 110  : 		sizeof (mlist), &mlist, sizeof (mlist), &dwResult,
; 111  : 		NULL);

  00100	6a 00		 push	 0
  00102	8d 54 24 0c	 lea	 edx, DWORD PTR _dwResult$[esp+14528]
  00106	52		 push	 edx
  00107	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hDriver
  0010d	68 74 36 00 00	 push	 13940			; 00003674H
  00112	8d 44 24 1c	 lea	 eax, DWORD PTR _mlist$[esp+14536]
  00116	50		 push	 eax
  00117	68 74 36 00 00	 push	 13940			; 00003674H
  0011c	8b c8		 mov	 ecx, eax
  0011e	51		 push	 ecx
  0011f	68 18 20 22 00	 push	 2236440			; 00222018H
  00124	52		 push	 edx
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 112  : 
; 113  : 	for (i=0 ; i<26; i++)

  0012b	33 f6		 xor	 esi, esi
  0012d	8d 7c 24 14	 lea	 edi, DWORD PTR _mlist$[esp+14528]
$LL4@IsMountedV:

; 114  : 		if (0 == _wcsicmp ((wchar_t *) mlist.wszVolume[i], (const wchar_t*)volume))

  00131	8d 84 24 a0 36
	00 00		 lea	 eax, DWORD PTR _volume$[esp+14524]
  00138	50		 push	 eax
  00139	57		 push	 edi
  0013a	e8 00 00 00 00	 call	 __wcsicmp
  0013f	83 c4 08	 add	 esp, 8
  00142	85 c0		 test	 eax, eax
  00144	74 3f		 je	 SHORT $LN108@IsMountedV
  00146	46		 inc	 esi
  00147	81 c7 08 02 00
	00		 add	 edi, 520		; 00000208H
  0014d	83 fe 1a	 cmp	 esi, 26			; 0000001aH
  00150	7c df		 jl	 SHORT $LL4@IsMountedV

; 116  : 
; 117  : 	return FALSE;

  00152	83 bc 24 9c 36
	00 00 10	 cmp	 DWORD PTR _resolvedPath$[esp+14548], 16 ; 00000010H
  0015a	72 10		 jb	 SHORT $LN96@IsMountedV
  0015c	8b 94 24 88 36
	00 00		 mov	 edx, DWORD PTR _resolvedPath$[esp+14528]
  00163	52		 push	 edx
  00164	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00169	83 c4 04	 add	 esp, 4
$LN96@IsMountedV:
  0016c	33 c0		 xor	 eax, eax

; 118  : }

  0016e	5f		 pop	 edi
  0016f	5e		 pop	 esi
  00170	8b 8c 24 b0 38
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+14516]
  00177	33 cc		 xor	 ecx, esp
  00179	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017e	81 c4 b4 38 00
	00		 add	 esp, 14516		; 000038b4H
  00184	c3		 ret	 0
$LN108@IsMountedV:

; 115  : 			return TRUE;

  00185	83 bc 24 9c 36
	00 00 10	 cmp	 DWORD PTR _resolvedPath$[esp+14548], 16 ; 00000010H
  0018d	72 10		 jb	 SHORT $LN70@IsMountedV
  0018f	8b 8c 24 88 36
	00 00		 mov	 ecx, DWORD PTR _resolvedPath$[esp+14528]
  00196	51		 push	 ecx
  00197	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0019c	83 c4 04	 add	 esp, 4
$LN70@IsMountedV:

; 118  : }

  0019f	8b 8c 24 b8 38
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+14524]
  001a6	5f		 pop	 edi
  001a7	5e		 pop	 esi
  001a8	33 cc		 xor	 ecx, esp
  001aa	b8 01 00 00 00	 mov	 eax, 1
  001af	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b4	81 c4 b4 38 00
	00		 add	 esp, 14516		; 000038b4H
  001ba	c3		 ret	 0
_IsMountedVolume ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_GetMountedVolumeDriveNo
; Function compile flags: /Ogtpy
;	COMDAT _GetMountedVolumeDriveNo
_TEXT	SEGMENT
_dwResult$ = -14516					; size = 4
$T89502 = -14512					; size = 4
_mlist$ = -14508					; size = 13940
_resolvedPath$ = -568					; size = 28
_volume$ = -540						; size = 536
__$ArrayPad$ = -4					; size = 4
_volname$ = 8						; size = 4
_GetMountedVolumeDriveNo PROC				; COMDAT

; 121  : {

  00000	b8 b4 38 00 00	 mov	 eax, 14516		; 000038b4H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 b0 38
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+14516], eax
  00018	56		 push	 esi
  00019	8b b4 24 bc 38
	00 00		 mov	 esi, DWORD PTR _volname$[esp+14516]
  00020	57		 push	 edi

; 122  : 	MOUNT_LIST_STRUCT mlist;
; 123  : 	DWORD dwResult;
; 124  : 	int i;
; 125  : 	char volume[TC_MAX_PATH*2+16];
; 126  : 
; 127  : 	if (volname == NULL)

  00021	85 f6		 test	 esi, esi

; 128  : 		return -1;

  00023	0f 84 52 01 00
	00		 je	 $LN99@GetMounted

; 129  : 
; 130  : 	strcpy (volume, volname);

  00029	8d 94 24 a0 36
	00 00		 lea	 edx, DWORD PTR _volume$[esp+14524]
  00030	8b c6		 mov	 eax, esi
  00032	2b d6		 sub	 edx, esi
$LL10@GetMounted:
  00034	8a 08		 mov	 cl, BYTE PTR [eax]
  00036	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00039	40		 inc	 eax
  0003a	84 c9		 test	 cl, cl
  0003c	75 f6		 jne	 SHORT $LL10@GetMounted

; 131  : 
; 132  : 	if (strstr (volname, "\\Device\\") != volname)

  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_08MBBBEOPI@?2Device?2?$AA@
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 _strstr
  00049	83 c4 08	 add	 esp, 8
  0004c	3b c6		 cmp	 eax, esi
  0004e	74 1b		 je	 SHORT $LN6@GetMounted

; 133  : 		snprintf(volume, ARRAY_LENGTH(volume), "\\??\\%s", volname);

  00050	56		 push	 esi
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_06OLPECHEJ@?2?$DP?$DP?2?$CFs?$AA@
  00056	8d 84 24 a8 36
	00 00		 lea	 eax, DWORD PTR _volume$[esp+14532]
  0005d	68 18 02 00 00	 push	 536			; 00000218H
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 _sprintf_s
  00068	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@GetMounted:

; 134  : 
; 135  : 	string resolvedPath = VolumeGuidPathToDevicePath (volname);

  0006b	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0006e	8b cc		 mov	 ecx, esp
  00070	8b c6		 mov	 eax, esi
  00072	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00079	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00080	89 64 24 28	 mov	 DWORD PTR $T89502[esp+14552], esp
  00084	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  00088	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0008b	eb 03 8d 49 00	 npad	 5
$LL113@GetMounted:
  00090	8a 10		 mov	 dl, BYTE PTR [eax]
  00092	40		 inc	 eax
  00093	84 d2		 test	 dl, dl
  00095	75 f9		 jne	 SHORT $LL113@GetMounted
  00097	2b c7		 sub	 eax, edi
  00099	50		 push	 eax
  0009a	56		 push	 esi
  0009b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000a0	8d 8c 24 a0 36
	00 00		 lea	 ecx, DWORD PTR _resolvedPath$[esp+14552]
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z ; VolumeGuidPathToDevicePath
  000ad	83 c4 20	 add	 esp, 32			; 00000020H

; 136  : 	if (!resolvedPath.empty())

  000b0	83 bc 24 98 36
	00 00 00	 cmp	 DWORD PTR _resolvedPath$[esp+14544], 0
  000b8	74 2e		 je	 SHORT $LN5@GetMounted

; 137  : 		strcpy_s (volume, sizeof (volume), resolvedPath.c_str());

  000ba	83 bc 24 9c 36
	00 00 10	 cmp	 DWORD PTR _resolvedPath$[esp+14548], 16 ; 00000010H
  000c2	8b 84 24 88 36
	00 00		 mov	 eax, DWORD PTR _resolvedPath$[esp+14528]
  000c9	73 07		 jae	 SHORT $LN56@GetMounted
  000cb	8d 84 24 88 36
	00 00		 lea	 eax, DWORD PTR _resolvedPath$[esp+14528]
$LN56@GetMounted:
  000d2	50		 push	 eax
  000d3	8d 94 24 a4 36
	00 00		 lea	 edx, DWORD PTR _volume$[esp+14528]
  000da	68 18 02 00 00	 push	 536			; 00000218H
  000df	52		 push	 edx
  000e0	e8 00 00 00 00	 call	 _strcpy_s
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@GetMounted:

; 138  : 
; 139  : 	ToUNICODE (volume);

  000e8	8d 84 24 a0 36
	00 00		 lea	 eax, DWORD PTR _volume$[esp+14524]
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 _ToUNICODE

; 140  : 
; 141  : 	memset (&mlist, 0, sizeof (mlist));

  000f5	68 74 36 00 00	 push	 13940			; 00003674H
  000fa	8d 4c 24 18	 lea	 ecx, DWORD PTR _mlist$[esp+14532]
  000fe	6a 00		 push	 0
  00100	51		 push	 ecx
  00101	e8 00 00 00 00	 call	 _memset
  00106	83 c4 10	 add	 esp, 16			; 00000010H

; 142  : 	DeviceIoControl (hDriver, TC_IOCTL_GET_MOUNTED_VOLUMES, &mlist,
; 143  : 		sizeof (mlist), &mlist, sizeof (mlist), &dwResult,
; 144  : 		NULL);

  00109	6a 00		 push	 0
  0010b	8d 54 24 0c	 lea	 edx, DWORD PTR _dwResult$[esp+14528]
  0010f	52		 push	 edx
  00110	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hDriver
  00116	68 74 36 00 00	 push	 13940			; 00003674H
  0011b	8d 44 24 1c	 lea	 eax, DWORD PTR _mlist$[esp+14536]
  0011f	50		 push	 eax
  00120	68 74 36 00 00	 push	 13940			; 00003674H
  00125	8b c8		 mov	 ecx, eax
  00127	51		 push	 ecx
  00128	68 18 20 22 00	 push	 2236440			; 00222018H
  0012d	52		 push	 edx
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 145  : 
; 146  : 	for (i=0 ; i<26; i++)

  00134	33 f6		 xor	 esi, esi
  00136	8d 7c 24 14	 lea	 edi, DWORD PTR _mlist$[esp+14528]
  0013a	8d 9b 00 00 00
	00		 npad	 6
$LL4@GetMounted:

; 147  : 		if (0 == _wcsicmp ((wchar_t *) mlist.wszVolume[i], (const wchar_t*)volume))

  00140	8d 84 24 a0 36
	00 00		 lea	 eax, DWORD PTR _volume$[esp+14524]
  00147	50		 push	 eax
  00148	57		 push	 edi
  00149	e8 00 00 00 00	 call	 __wcsicmp
  0014e	83 c4 08	 add	 esp, 8
  00151	85 c0		 test	 eax, eax
  00153	74 40		 je	 SHORT $LN111@GetMounted
  00155	46		 inc	 esi
  00156	81 c7 08 02 00
	00		 add	 edi, 520		; 00000208H
  0015c	83 fe 1a	 cmp	 esi, 26			; 0000001aH
  0015f	7c df		 jl	 SHORT $LL4@GetMounted

; 149  : 
; 150  : 	return -1;

  00161	83 bc 24 9c 36
	00 00 10	 cmp	 DWORD PTR _resolvedPath$[esp+14548], 16 ; 00000010H
  00169	72 10		 jb	 SHORT $LN99@GetMounted
  0016b	8b 94 24 88 36
	00 00		 mov	 edx, DWORD PTR _resolvedPath$[esp+14528]
  00172	52		 push	 edx
  00173	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00178	83 c4 04	 add	 esp, 4
$LN99@GetMounted:
  0017b	83 c8 ff	 or	 eax, -1

; 151  : }

  0017e	5f		 pop	 edi
  0017f	5e		 pop	 esi
  00180	8b 8c 24 b0 38
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+14516]
  00187	33 cc		 xor	 ecx, esp
  00189	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018e	81 c4 b4 38 00
	00		 add	 esp, 14516		; 000038b4H
  00194	c3		 ret	 0
$LN111@GetMounted:

; 148  : 			return i;

  00195	83 bc 24 9c 36
	00 00 10	 cmp	 DWORD PTR _resolvedPath$[esp+14548], 16 ; 00000010H
  0019d	72 10		 jb	 SHORT $LN73@GetMounted
  0019f	8b 8c 24 88 36
	00 00		 mov	 ecx, DWORD PTR _resolvedPath$[esp+14528]
  001a6	51		 push	 ecx
  001a7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001ac	83 c4 04	 add	 esp, 4
$LN73@GetMounted:

; 151  : }

  001af	8b 8c 24 b8 38
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+14524]
  001b6	5f		 pop	 edi
  001b7	8b c6		 mov	 eax, esi
  001b9	5e		 pop	 esi
  001ba	33 cc		 xor	 ecx, esp
  001bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c1	81 c4 b4 38 00
	00		 add	 esp, 14516		; 000038b4H
  001c7	c3		 ret	 0
_GetMountedVolumeDriveNo ENDP
_TEXT	ENDS
END
