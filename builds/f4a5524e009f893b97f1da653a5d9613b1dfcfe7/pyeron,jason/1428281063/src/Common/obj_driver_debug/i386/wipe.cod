; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	c:\home\public\desktop\projects\ciphershed.build\src\common\wipe.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GetWipePassCount@4
EXTRN	__imp__KeBugCheckEx@20:PROC
; Function compile flags: /Odtp
; File c:\home\public\desktop\projects\ciphershed.build\src\common\wipe.c
;	COMDAT _GetWipePassCount@4
_TEXT	SEGMENT
tv64 = -4						; size = 4
_algorithm$ = 8						; size = 4
_GetWipePassCount@4 PROC				; COMDAT

; 143  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx

; 144  : 	switch (algorithm)

  00006	8b 45 08	 mov	 eax, DWORD PTR _algorithm$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR tv64[ebp], eax
  0000c	81 7d fc bc 02
	00 00		 cmp	 DWORD PTR tv64[ebp], 700 ; 000002bcH
  00013	7f 1a		 jg	 SHORT $LN10@GetWipePas
  00015	81 7d fc bc 02
	00 00		 cmp	 DWORD PTR tv64[ebp], 700 ; 000002bcH
  0001c	74 2a		 je	 SHORT $LN3@GetWipePas
  0001e	83 7d fc 64	 cmp	 DWORD PTR tv64[ebp], 100 ; 00000064H
  00022	74 16		 je	 SHORT $LN5@GetWipePas
  00024	81 7d fc 2c 01
	00 00		 cmp	 DWORD PTR tv64[ebp], 300 ; 0000012cH
  0002b	74 14		 je	 SHORT $LN4@GetWipePas
  0002d	eb 27		 jmp	 SHORT $LN1@GetWipePas
$LN10@GetWipePas:
  0002f	81 7d fc ac 0d
	00 00		 cmp	 DWORD PTR tv64[ebp], 3500 ; 00000dacH
  00036	74 17		 je	 SHORT $LN2@GetWipePas
  00038	eb 1c		 jmp	 SHORT $LN1@GetWipePas
$LN5@GetWipePas:

; 145  : 	{
; 146  : 	case TC_WIPE_1_RAND:
; 147  : 		return 1;

  0003a	b8 01 00 00 00	 mov	 eax, 1
  0003f	eb 2d		 jmp	 SHORT $LN9@GetWipePas
$LN4@GetWipePas:

; 148  : 
; 149  : 	case TC_WIPE_3_DOD_5220:
; 150  : 		return 3;

  00041	b8 03 00 00 00	 mov	 eax, 3
  00046	eb 26		 jmp	 SHORT $LN9@GetWipePas
$LN3@GetWipePas:

; 151  : 
; 152  : 	case TC_WIPE_7_DOD_5220:
; 153  : 		return 7;

  00048	b8 07 00 00 00	 mov	 eax, 7
  0004d	eb 1f		 jmp	 SHORT $LN9@GetWipePas
$LN2@GetWipePas:

; 154  : 
; 155  : 	case TC_WIPE_35_GUTMANN:
; 156  : 		return 35;

  0004f	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  00054	eb 18		 jmp	 SHORT $LN9@GetWipePas
$LN1@GetWipePas:

; 157  : 
; 158  : 	default:
; 159  : 		TC_THROW_FATAL_EXCEPTION;

  00056	68 43 54 00 00	 push	 21571			; 00005443H
  0005b	6a 00		 push	 0
  0005d	6a 00		 push	 0
  0005f	68 9f 00 00 00	 push	 159			; 0000009fH
  00064	6a 29		 push	 41			; 00000029H
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeBugCheckEx@20

; 160  : 	}
; 161  : 
; 162  : 	return 0;	// Prevent compiler warnings

  0006c	33 c0		 xor	 eax, eax
$LN9@GetWipePas:

; 163  : }

  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
_GetWipePassCount@4 ENDP
_TEXT	ENDS
PUBLIC	_WipeBuffer@20
; Function compile flags: /Odtp
;	COMDAT _WipeBuffer@20
_TEXT	SEGMENT
tv64 = -4						; size = 4
_algorithm$ = 8						; size = 4
_randChars$ = 12					; size = 4
_pass$ = 16						; size = 4
_buffer$ = 20						; size = 4
_size$ = 24						; size = 4
_WipeBuffer@20 PROC					; COMDAT

; 167  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx

; 168  : 	switch (algorithm)

  00006	8b 45 08	 mov	 eax, DWORD PTR _algorithm$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR tv64[ebp], eax
  0000c	81 7d fc bc 02
	00 00		 cmp	 DWORD PTR tv64[ebp], 700 ; 000002bcH
  00013	7f 1a		 jg	 SHORT $LN10@WipeBuffer
  00015	81 7d fc bc 02
	00 00		 cmp	 DWORD PTR tv64[ebp], 700 ; 000002bcH
  0001c	74 42		 je	 SHORT $LN3@WipeBuffer
  0001e	83 7d fc 64	 cmp	 DWORD PTR tv64[ebp], 100 ; 00000064H
  00022	74 16		 je	 SHORT $LN5@WipeBuffer
  00024	81 7d fc 2c 01
	00 00		 cmp	 DWORD PTR tv64[ebp], 300 ; 0000012cH
  0002b	74 20		 je	 SHORT $LN4@WipeBuffer
  0002d	eb 5b		 jmp	 SHORT $LN1@WipeBuffer
$LN10@WipeBuffer:
  0002f	81 7d fc ac 0d
	00 00		 cmp	 DWORD PTR tv64[ebp], 3500 ; 00000dacH
  00036	74 3f		 je	 SHORT $LN2@WipeBuffer
  00038	eb 50		 jmp	 SHORT $LN1@WipeBuffer
$LN5@WipeBuffer:

; 169  : 	{
; 170  : 	case TC_WIPE_1_RAND:
; 171  : 		return Wipe1PseudoRandom (pass, buffer, size);

  0003a	8b 4d 18	 mov	 ecx, DWORD PTR _size$[ebp]
  0003d	51		 push	 ecx
  0003e	8b 55 14	 mov	 edx, DWORD PTR _buffer$[ebp]
  00041	52		 push	 edx
  00042	8b 45 10	 mov	 eax, DWORD PTR _pass$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _Wipe1PseudoRandom@12
  0004b	eb 55		 jmp	 SHORT $LN9@WipeBuffer
$LN4@WipeBuffer:

; 172  : 
; 173  : 	case TC_WIPE_3_DOD_5220:
; 174  : 		return Wipe3Dod5220 (pass, buffer, size);

  0004d	8b 4d 18	 mov	 ecx, DWORD PTR _size$[ebp]
  00050	51		 push	 ecx
  00051	8b 55 14	 mov	 edx, DWORD PTR _buffer$[ebp]
  00054	52		 push	 edx
  00055	8b 45 10	 mov	 eax, DWORD PTR _pass$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 _Wipe3Dod5220@12
  0005e	eb 42		 jmp	 SHORT $LN9@WipeBuffer
$LN3@WipeBuffer:

; 175  : 
; 176  : 	case TC_WIPE_7_DOD_5220:
; 177  : 		return Wipe7Dod5220 (pass, randChars, buffer, size);

  00060	8b 4d 18	 mov	 ecx, DWORD PTR _size$[ebp]
  00063	51		 push	 ecx
  00064	8b 55 14	 mov	 edx, DWORD PTR _buffer$[ebp]
  00067	52		 push	 edx
  00068	8b 45 0c	 mov	 eax, DWORD PTR _randChars$[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d 10	 mov	 ecx, DWORD PTR _pass$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 _Wipe7Dod5220@16
  00075	eb 2b		 jmp	 SHORT $LN9@WipeBuffer
$LN2@WipeBuffer:

; 178  : 
; 179  : 	case TC_WIPE_35_GUTMANN:
; 180  : 		return Wipe35Gutmann (pass, buffer, size);

  00077	8b 55 18	 mov	 edx, DWORD PTR _size$[ebp]
  0007a	52		 push	 edx
  0007b	8b 45 14	 mov	 eax, DWORD PTR _buffer$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d 10	 mov	 ecx, DWORD PTR _pass$[ebp]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 _Wipe35Gutmann@12
  00088	eb 18		 jmp	 SHORT $LN9@WipeBuffer
$LN1@WipeBuffer:

; 181  : 
; 182  : 	default:
; 183  : 		TC_THROW_FATAL_EXCEPTION;

  0008a	68 43 54 00 00	 push	 21571			; 00005443H
  0008f	6a 00		 push	 0
  00091	6a 00		 push	 0
  00093	68 b7 00 00 00	 push	 183			; 000000b7H
  00098	6a 29		 push	 41			; 00000029H
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeBugCheckEx@20

; 184  : 	}
; 185  : 
; 186  : 	return FALSE;	// Prevent compiler warnings

  000a0	33 c0		 xor	 eax, eax
$LN9@WipeBuffer:

; 187  : }

  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 14 00	 ret	 20			; 00000014H
_WipeBuffer@20 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _Wipe1PseudoRandom@12
_TEXT	SEGMENT
_pass$ = 8						; size = 4
_buffer$ = 12						; size = 4
_size$ = 16						; size = 4
_Wipe1PseudoRandom@12 PROC				; COMDAT

; 14   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 15   : 	return FALSE;

  00005	33 c0		 xor	 eax, eax

; 16   : }

  00007	5d		 pop	 ebp
  00008	c2 0c 00	 ret	 12			; 0000000cH
_Wipe1PseudoRandom@12 ENDP
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Odtp
;	COMDAT _Wipe3Dod5220@12
_TEXT	SEGMENT
tv64 = -8						; size = 4
_wipeChar$ = -1						; size = 1
_pass$ = 8						; size = 4
_buffer$ = 12						; size = 4
_size$ = 16						; size = 4
_Wipe3Dod5220@12 PROC					; COMDAT

; 23   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 08	 sub	 esp, 8

; 24   : 	byte wipeChar;
; 25   : 
; 26   : 	switch (pass)

  00008	8b 45 08	 mov	 eax, DWORD PTR _pass$[ebp]
  0000b	89 45 f8	 mov	 DWORD PTR tv64[ebp], eax
  0000e	83 7d f8 01	 cmp	 DWORD PTR tv64[ebp], 1
  00012	74 08		 je	 SHORT $LN3@Wipe3Dod52
  00014	83 7d f8 02	 cmp	 DWORD PTR tv64[ebp], 2
  00018	74 08		 je	 SHORT $LN2@Wipe3Dod52
  0001a	eb 0c		 jmp	 SHORT $LN1@Wipe3Dod52
$LN3@Wipe3Dod52:

; 27   : 	{
; 28   : 	case 1:
; 29   : 		wipeChar = 0;

  0001c	c6 45 ff 00	 mov	 BYTE PTR _wipeChar$[ebp], 0

; 30   : 		break;

  00020	eb 0a		 jmp	 SHORT $LN4@Wipe3Dod52
$LN2@Wipe3Dod52:

; 31   : 
; 32   : 	case 2:
; 33   : 		wipeChar = 0xff;

  00022	c6 45 ff ff	 mov	 BYTE PTR _wipeChar$[ebp], 255 ; 000000ffH

; 34   : 		break;

  00026	eb 04		 jmp	 SHORT $LN4@Wipe3Dod52
$LN1@Wipe3Dod52:

; 35   : 
; 36   : 	default:
; 37   : 		return FALSE;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 1a		 jmp	 SHORT $LN6@Wipe3Dod52
$LN4@Wipe3Dod52:

; 38   : 	}
; 39   : 
; 40   : 	memset (buffer, wipeChar, size);

  0002c	8b 4d 10	 mov	 ecx, DWORD PTR _size$[ebp]
  0002f	51		 push	 ecx
  00030	0f b6 55 ff	 movzx	 edx, BYTE PTR _wipeChar$[ebp]
  00034	52		 push	 edx
  00035	8b 45 0c	 mov	 eax, DWORD PTR _buffer$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _memset
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 41   : 	return TRUE;

  00041	b8 01 00 00 00	 mov	 eax, 1
$LN6@Wipe3Dod52:

; 42   : }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 0c 00	 ret	 12			; 0000000cH
_Wipe3Dod5220@12 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _Wipe7Dod5220@16
_TEXT	SEGMENT
tv64 = -8						; size = 4
_wipeChar$ = -1						; size = 1
_pass$ = 8						; size = 4
_randChars$ = 12					; size = 4
_buffer$ = 16						; size = 4
_size$ = 20						; size = 4
_Wipe7Dod5220@16 PROC					; COMDAT

; 46   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 08	 sub	 esp, 8

; 47   : 	byte wipeChar;
; 48   : 
; 49   : 	switch (pass)

  00008	8b 45 08	 mov	 eax, DWORD PTR _pass$[ebp]
  0000b	89 45 f8	 mov	 DWORD PTR tv64[ebp], eax
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR tv64[ebp]
  00011	83 e9 01	 sub	 ecx, 1
  00014	89 4d f8	 mov	 DWORD PTR tv64[ebp], ecx
  00017	83 7d f8 05	 cmp	 DWORD PTR tv64[ebp], 5
  0001b	77 45		 ja	 SHORT $LN1@Wipe7Dod52
  0001d	8b 55 f8	 mov	 edx, DWORD PTR tv64[ebp]
  00020	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN11@Wipe7Dod52[edx*4]
$LN6@Wipe7Dod52:

; 50   : 	{
; 51   : 	case 1:
; 52   : 		wipeChar = randChars[0];

  00027	8b 45 0c	 mov	 eax, DWORD PTR _randChars$[ebp]
  0002a	8a 08		 mov	 cl, BYTE PTR [eax]
  0002c	88 4d ff	 mov	 BYTE PTR _wipeChar$[ebp], cl

; 53   : 		break;

  0002f	eb 35		 jmp	 SHORT $LN7@Wipe7Dod52
$LN5@Wipe7Dod52:

; 54   : 
; 55   : 	case 2:
; 56   : 		wipeChar = ~randChars[0];

  00031	8b 55 0c	 mov	 edx, DWORD PTR _randChars$[ebp]
  00034	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00037	f7 d0		 not	 eax
  00039	88 45 ff	 mov	 BYTE PTR _wipeChar$[ebp], al

; 57   : 		break;

  0003c	eb 28		 jmp	 SHORT $LN7@Wipe7Dod52
$LN4@Wipe7Dod52:

; 58   : 
; 59   : 	case 4:
; 60   : 		wipeChar = randChars[1];

  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _randChars$[ebp]
  00041	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00044	88 55 ff	 mov	 BYTE PTR _wipeChar$[ebp], dl

; 61   : 		break;

  00047	eb 1d		 jmp	 SHORT $LN7@Wipe7Dod52
$LN3@Wipe7Dod52:

; 62   : 
; 63   : 	case 5:
; 64   : 		wipeChar = randChars[2];

  00049	8b 45 0c	 mov	 eax, DWORD PTR _randChars$[ebp]
  0004c	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  0004f	88 4d ff	 mov	 BYTE PTR _wipeChar$[ebp], cl

; 65   : 		break;

  00052	eb 12		 jmp	 SHORT $LN7@Wipe7Dod52
$LN2@Wipe7Dod52:

; 66   : 
; 67   : 	case 6:
; 68   : 		wipeChar = ~randChars[2];

  00054	8b 55 0c	 mov	 edx, DWORD PTR _randChars$[ebp]
  00057	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  0005b	f7 d0		 not	 eax
  0005d	88 45 ff	 mov	 BYTE PTR _wipeChar$[ebp], al

; 69   : 		break;

  00060	eb 04		 jmp	 SHORT $LN7@Wipe7Dod52
$LN1@Wipe7Dod52:

; 70   : 
; 71   : 	default:
; 72   : 		return FALSE;

  00062	33 c0		 xor	 eax, eax
  00064	eb 1a		 jmp	 SHORT $LN9@Wipe7Dod52
$LN7@Wipe7Dod52:

; 73   : 	}
; 74   : 
; 75   : 	memset (buffer, wipeChar, size);

  00066	8b 4d 14	 mov	 ecx, DWORD PTR _size$[ebp]
  00069	51		 push	 ecx
  0006a	0f b6 55 ff	 movzx	 edx, BYTE PTR _wipeChar$[ebp]
  0006e	52		 push	 edx
  0006f	8b 45 10	 mov	 eax, DWORD PTR _buffer$[ebp]
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 _memset
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH

; 76   : 	return TRUE;

  0007b	b8 01 00 00 00	 mov	 eax, 1
$LN9@Wipe7Dod52:

; 77   : }

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 10 00	 ret	 16			; 00000010H
  00086	8b ff		 npad	 2
$LN11@Wipe7Dod52:
  00088	00 00 00 00	 DD	 $LN6@Wipe7Dod52
  0008c	00 00 00 00	 DD	 $LN5@Wipe7Dod52
  00090	00 00 00 00	 DD	 $LN1@Wipe7Dod52
  00094	00 00 00 00	 DD	 $LN4@Wipe7Dod52
  00098	00 00 00 00	 DD	 $LN3@Wipe7Dod52
  0009c	00 00 00 00	 DD	 $LN2@Wipe7Dod52
_Wipe7Dod5220@16 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _Wipe35Gutmann@12
_TEXT	SEGMENT
tv64 = -16						; size = 4
_wipePat3Pos$ = -12					; size = 4
_wipePat3$ = -8						; size = 3
_i$ = -4						; size = 4
_pass$ = 8						; size = 4
_buffer$ = 12						; size = 4
_size$ = 16						; size = 4
_Wipe35Gutmann@12 PROC					; COMDAT

; 84   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 10	 sub	 esp, 16			; 00000010H

; 85   : 	byte wipePat3[] = { 0x92, 0x49, 0x24 };

  00008	c6 45 f8 92	 mov	 BYTE PTR _wipePat3$[ebp], 146 ; 00000092H
  0000c	c6 45 f9 49	 mov	 BYTE PTR _wipePat3$[ebp+1], 73 ; 00000049H
  00010	c6 45 fa 24	 mov	 BYTE PTR _wipePat3$[ebp+2], 36 ; 00000024H

; 86   : 	int wipePat3Pos;
; 87   : 	size_t i;
; 88   : 
; 89   : 	switch (pass)

  00014	8b 45 08	 mov	 eax, DWORD PTR _pass$[ebp]
  00017	89 45 f0	 mov	 DWORD PTR tv64[ebp], eax
  0001a	8b 4d f0	 mov	 ecx, DWORD PTR tv64[ebp]
  0001d	83 e9 05	 sub	 ecx, 5
  00020	89 4d f0	 mov	 DWORD PTR tv64[ebp], ecx
  00023	83 7d f0 1a	 cmp	 DWORD PTR tv64[ebp], 26	; 0000001aH
  00027	0f 87 ba 00 00
	00		 ja	 $LN3@Wipe35Gutm
  0002d	8b 55 f0	 mov	 edx, DWORD PTR tv64[ebp]
  00030	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN17@Wipe35Gutm[edx]
  00037	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN18@Wipe35Gutm[eax*4]
$LN12@Wipe35Gutm:

; 90   : 	{
; 91   : 	case 5:
; 92   : 		memset (buffer, 0x55, size);

  0003e	8b 4d 10	 mov	 ecx, DWORD PTR _size$[ebp]
  00041	51		 push	 ecx
  00042	6a 55		 push	 85			; 00000055H
  00044	8b 55 0c	 mov	 edx, DWORD PTR _buffer$[ebp]
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 _memset
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 93   : 		break;

  00050	e9 be 00 00 00	 jmp	 $LN13@Wipe35Gutm
$LN11@Wipe35Gutm:

; 94   : 
; 95   : 	case 6:
; 96   : 		memset (buffer, 0xaa, size);

  00055	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  00058	50		 push	 eax
  00059	68 aa 00 00 00	 push	 170			; 000000aaH
  0005e	8b 4d 0c	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00061	51		 push	 ecx
  00062	e8 00 00 00 00	 call	 _memset
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH

; 97   : 		break;

  0006a	e9 a4 00 00 00	 jmp	 $LN13@Wipe35Gutm
$LN10@Wipe35Gutm:

; 98   : 
; 99   : 	case 7:
; 100  : 	case 26:
; 101  : 	case 29:
; 102  : 		wipePat3Pos = 0;

  0006f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _wipePat3Pos$[ebp], 0

; 103  : 		goto wipe3;

  00076	eb 10		 jmp	 SHORT $wipe3$24828
$LN9@Wipe35Gutm:

; 104  : 
; 105  : 	case 8:
; 106  : 	case 27:
; 107  : 	case 30:
; 108  : 		wipePat3Pos = 1;

  00078	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _wipePat3Pos$[ebp], 1

; 109  : 		goto wipe3;

  0007f	eb 07		 jmp	 SHORT $wipe3$24828
$LN8@Wipe35Gutm:

; 110  : 
; 111  : 	case 9:
; 112  : 	case 28:
; 113  : 	case 31:
; 114  : 		wipePat3Pos = 2;

  00081	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _wipePat3Pos$[ebp], 2
$wipe3$24828:

; 115  : 		goto wipe3;
; 116  : 
; 117  : wipe3:
; 118  : 		if (pass >= 29)

  00088	83 7d 08 1d	 cmp	 DWORD PTR _pass$[ebp], 29 ; 0000001dH
  0008c	7c 1b		 jl	 SHORT $LN7@Wipe35Gutm

; 119  : 		{
; 120  : 			wipePat3[0] = ~wipePat3[0];

  0008e	0f b6 55 f8	 movzx	 edx, BYTE PTR _wipePat3$[ebp]
  00092	f7 d2		 not	 edx
  00094	88 55 f8	 mov	 BYTE PTR _wipePat3$[ebp], dl

; 121  : 			wipePat3[1] = ~wipePat3[1];

  00097	0f b6 45 f9	 movzx	 eax, BYTE PTR _wipePat3$[ebp+1]
  0009b	f7 d0		 not	 eax
  0009d	88 45 f9	 mov	 BYTE PTR _wipePat3$[ebp+1], al

; 122  : 			wipePat3[2] = ~wipePat3[2];

  000a0	0f b6 4d fa	 movzx	 ecx, BYTE PTR _wipePat3$[ebp+2]
  000a4	f7 d1		 not	 ecx
  000a6	88 4d fa	 mov	 BYTE PTR _wipePat3$[ebp+2], cl
$LN7@Wipe35Gutm:

; 123  : 		}
; 124  : 
; 125  : 		for (i = 0; i < size; ++i)

  000a9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000b0	eb 09		 jmp	 SHORT $LN6@Wipe35Gutm
$LN5@Wipe35Gutm:
  000b2	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000b5	83 c2 01	 add	 edx, 1
  000b8	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$LN6@Wipe35Gutm:
  000bb	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000be	3b 45 10	 cmp	 eax, DWORD PTR _size$[ebp]
  000c1	73 22		 jae	 SHORT $LN4@Wipe35Gutm

; 126  : 		{
; 127  : 			buffer[i] = wipePat3[wipePat3Pos++ % 3];

  000c3	8b 45 f4	 mov	 eax, DWORD PTR _wipePat3Pos$[ebp]
  000c6	99		 cdq
  000c7	b9 03 00 00 00	 mov	 ecx, 3
  000cc	f7 f9		 idiv	 ecx
  000ce	8b 45 0c	 mov	 eax, DWORD PTR _buffer$[ebp]
  000d1	03 45 fc	 add	 eax, DWORD PTR _i$[ebp]
  000d4	8a 4c 15 f8	 mov	 cl, BYTE PTR _wipePat3$[ebp+edx]
  000d8	88 08		 mov	 BYTE PTR [eax], cl
  000da	8b 55 f4	 mov	 edx, DWORD PTR _wipePat3Pos$[ebp]
  000dd	83 c2 01	 add	 edx, 1
  000e0	89 55 f4	 mov	 DWORD PTR _wipePat3Pos$[ebp], edx

; 128  : 		}

  000e3	eb cd		 jmp	 SHORT $LN5@Wipe35Gutm
$LN4@Wipe35Gutm:

; 129  : 		break;

  000e5	eb 2c		 jmp	 SHORT $LN13@Wipe35Gutm
$LN3@Wipe35Gutm:

; 130  : 
; 131  : 	default:
; 132  : 		if (pass >= 10 && pass <= 25)

  000e7	83 7d 08 0a	 cmp	 DWORD PTR _pass$[ebp], 10 ; 0000000aH
  000eb	7c 22		 jl	 SHORT $LN2@Wipe35Gutm
  000ed	83 7d 08 19	 cmp	 DWORD PTR _pass$[ebp], 25 ; 00000019H
  000f1	7f 1c		 jg	 SHORT $LN2@Wipe35Gutm

; 133  : 			memset (buffer, (pass - 10) * 0x11, size);

  000f3	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  000f6	50		 push	 eax
  000f7	8b 4d 08	 mov	 ecx, DWORD PTR _pass$[ebp]
  000fa	83 e9 0a	 sub	 ecx, 10			; 0000000aH
  000fd	6b c9 11	 imul	 ecx, 17			; 00000011H
  00100	51		 push	 ecx
  00101	8b 55 0c	 mov	 edx, DWORD PTR _buffer$[ebp]
  00104	52		 push	 edx
  00105	e8 00 00 00 00	 call	 _memset
  0010a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 134  : 		else

  0010d	eb 04		 jmp	 SHORT $LN13@Wipe35Gutm
$LN2@Wipe35Gutm:

; 135  : 			return FALSE;

  0010f	33 c0		 xor	 eax, eax
  00111	eb 05		 jmp	 SHORT $LN15@Wipe35Gutm
$LN13@Wipe35Gutm:

; 136  : 	}
; 137  : 
; 138  : 	return TRUE;

  00113	b8 01 00 00 00	 mov	 eax, 1
$LN15@Wipe35Gutm:

; 139  : }

  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c2 0c 00	 ret	 12			; 0000000cH
  0011e	8b ff		 npad	 2
$LN18@Wipe35Gutm:
  00120	00 00 00 00	 DD	 $LN12@Wipe35Gutm
  00124	00 00 00 00	 DD	 $LN11@Wipe35Gutm
  00128	00 00 00 00	 DD	 $LN10@Wipe35Gutm
  0012c	00 00 00 00	 DD	 $LN9@Wipe35Gutm
  00130	00 00 00 00	 DD	 $LN8@Wipe35Gutm
  00134	00 00 00 00	 DD	 $LN3@Wipe35Gutm
$LN17@Wipe35Gutm:
  00138	00		 DB	 0
  00139	01		 DB	 1
  0013a	02		 DB	 2
  0013b	03		 DB	 3
  0013c	04		 DB	 4
  0013d	05		 DB	 5
  0013e	05		 DB	 5
  0013f	05		 DB	 5
  00140	05		 DB	 5
  00141	05		 DB	 5
  00142	05		 DB	 5
  00143	05		 DB	 5
  00144	05		 DB	 5
  00145	05		 DB	 5
  00146	05		 DB	 5
  00147	05		 DB	 5
  00148	05		 DB	 5
  00149	05		 DB	 5
  0014a	05		 DB	 5
  0014b	05		 DB	 5
  0014c	05		 DB	 5
  0014d	02		 DB	 2
  0014e	03		 DB	 3
  0014f	04		 DB	 4
  00150	02		 DB	 2
  00151	03		 DB	 3
  00152	04		 DB	 4
_Wipe35Gutmann@12 ENDP
_TEXT	ENDS
END
