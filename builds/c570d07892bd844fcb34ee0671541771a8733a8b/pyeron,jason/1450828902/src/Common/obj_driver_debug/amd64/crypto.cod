; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_05HJMENKNE@SHA?91?$AA@			; `string'
PUBLIC	??_C@_09HLDHDDJL@Whirlpool?$AA@			; `string'
PUBLIC	??_C@_07MEOJAOJE@SHA?9512?$AA@			; `string'
PUBLIC	??_C@_0L@PKFJAMAA@RIPEMD?9160?$AA@		; `string'
PUBLIC	??_C@_0L@NEGMAKNF@Triple?5DES?$AA@		; `string'
PUBLIC	??_C@_05LCFOLDPB@CAST5?$AA@			; `string'
PUBLIC	??_C@_08KOMAHJJD@Blowfish?$AA@			; `string'
PUBLIC	??_C@_07DABDIDEC@Twofish?$AA@			; `string'
PUBLIC	??_C@_07CCCAKGBN@Serpent?$AA@			; `string'
PUBLIC	??_C@_03BKNEFOAH@AES?$AA@			; `string'
PUBLIC	??_C@_01OGPIMHDM@?$DP?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_01JOAMLHOP@?9?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_03CKCBIPFF@XTS?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_03JFLLPGCL@LRW?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0L@NEGMAKNF@Triple?5DES?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_09GGDEEENC@Outer?9CBC?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_09CJGJEHAC@outer?9CBC?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_03PPFAJCFI@CBC?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_09KIMEMFNK@Inner?9CBC?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_09OHJJMGAK@inner?9CBC?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_09DJENBFJK@?$FLunknown?$FN?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
EXTRN	aes_encrypt:PROC
EXTRN	aes_hw_cpu_encrypt:PROC
EXTRN	aes_hw_cpu_encrypt_32_blocks:PROC
EXTRN	aes_decrypt:PROC
EXTRN	aes_hw_cpu_decrypt:PROC
EXTRN	aes_hw_cpu_decrypt_32_blocks:PROC
EXTRN	is_aes_hw_cpu_supported:PROC
HwEncryptionDisabled DD 01H DUP (?)
?state@?1??IsAesHwCpuSupported@@9@9 DD 01H DUP (?)	; `IsAesHwCpuSupported'::`2'::state
?stateValid@?1??IsAesHwCpuSupported@@9@9 DD 01H DUP (?)	; `IsAesHwCpuSupported'::`2'::stateValid
;	COMDAT ??_C@_09DJENBFJK@?$FLunknown?$FN?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_09DJENBFJK@?$FLunknown?$FN?$AA@FNODOBFM@ DB '[unknown]', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_09OHJJMGAK@inner?9CBC?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_09OHJJMGAK@inner?9CBC?$AA@FNODOBFM@ DB 'inner-CBC', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_09KIMEMFNK@Inner?9CBC?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_09KIMEMFNK@Inner?9CBC?$AA@FNODOBFM@ DB 'Inner-CBC', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_03PPFAJCFI@CBC?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_03PPFAJCFI@CBC?$AA@FNODOBFM@ DB 'CBC', 00H	;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_09CJGJEHAC@outer?9CBC?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_09CJGJEHAC@outer?9CBC?$AA@FNODOBFM@ DB 'outer-CBC', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_09GGDEEENC@Outer?9CBC?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_09GGDEEENC@Outer?9CBC?$AA@FNODOBFM@ DB 'Outer-CBC', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0L@NEGMAKNF@Triple?5DES?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0L@NEGMAKNF@Triple?5DES?$AA@FNODOBFM@ DB 'Triple DES', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_03JFLLPGCL@LRW?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_03JFLLPGCL@LRW?$AA@FNODOBFM@ DB 'LRW', 00H	;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_03CKCBIPFF@XTS?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_03CKCBIPFF@XTS?$AA@FNODOBFM@ DB 'XTS', 00H	;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_01JOAMLHOP@?9?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_01JOAMLHOP@?9?$AA@FNODOBFM@ DB '-', 00H		;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_01OGPIMHDM@?$DP?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_01OGPIMHDM@?$DP?$AA@FNODOBFM@ DB '?', 00H		;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_05HJMENKNE@SHA?91?$AA@
CONST	SEGMENT
??_C@_05HJMENKNE@SHA?91?$AA@ DB 'SHA-1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HLDHDDJL@Whirlpool?$AA@
CONST	SEGMENT
??_C@_09HLDHDDJL@Whirlpool?$AA@ DB 'Whirlpool', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MEOJAOJE@SHA?9512?$AA@
CONST	SEGMENT
??_C@_07MEOJAOJE@SHA?9512?$AA@ DB 'SHA-512', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PKFJAMAA@RIPEMD?9160?$AA@
CONST	SEGMENT
??_C@_0L@PKFJAMAA@RIPEMD?9160?$AA@ DB 'RIPEMD-160', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NEGMAKNF@Triple?5DES?$AA@
CONST	SEGMENT
??_C@_0L@NEGMAKNF@Triple?5DES?$AA@ DB 'Triple DES', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LCFOLDPB@CAST5?$AA@
CONST	SEGMENT
??_C@_05LCFOLDPB@CAST5?$AA@ DB 'CAST5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KOMAHJJD@Blowfish?$AA@
CONST	SEGMENT
??_C@_08KOMAHJJD@Blowfish?$AA@ DB 'Blowfish', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DABDIDEC@Twofish?$AA@
CONST	SEGMENT
??_C@_07DABDIDEC@Twofish?$AA@ DB 'Twofish', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCCAKGBN@Serpent?$AA@
CONST	SEGMENT
??_C@_07CCCAKGBN@Serpent?$AA@ DB 'Serpent', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BKNEFOAH@AES?$AA@
CONST	SEGMENT
??_C@_03BKNEFOAH@AES?$AA@ DB 'AES', 00H			; `string'
Ciphers	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_03BKNEFOAH@AES?$AA@
	DD	010H
	DD	020H
	DD	01e8H
	ORG $+4
	DD	02H
	ORG $+4
	DQ	FLAT:??_C@_07CCCAKGBN@Serpent?$AA@
	DD	010H
	DD	020H
	DD	0230H
	ORG $+4
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_07DABDIDEC@Twofish?$AA@
	DD	010H
	DD	020H
	DD	010b4H
	ORG $+4
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_08KOMAHJJD@Blowfish?$AA@
	DD	08H
	DD	038H
	DD	01090H
	ORG $+4
	DD	05H
	ORG $+4
	DQ	FLAT:??_C@_05LCFOLDPB@CAST5?$AA@
	DD	08H
	DD	010H
	DD	080H
	ORG $+4
	DD	06H
	ORG $+4
	DQ	FLAT:??_C@_0L@NEGMAKNF@Triple?5DES?$AA@
	DD	08H
	DD	018H
	DD	0300H
	ORG $+4
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
EncryptionAlgorithms DD 00H
	DD	00H
	ORG $+8
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+8
	DD	00H
	DD	01H
	DD	00H
	ORG $+8
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	ORG $+8
	DD	01H
	DD	02H
	DD	00H
	ORG $+8
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	ORG $+8
	DD	01H
	DD	03H
	DD	00H
	ORG $+8
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	ORG $+8
	DD	01H
	DD	03H
	DD	01H
	DD	00H
	ORG $+4
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	ORG $+8
	DD	01H
	DD	02H
	DD	03H
	DD	01H
	DD	00H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	ORG $+8
	DD	01H
	DD	01H
	DD	02H
	DD	00H
	ORG $+4
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	ORG $+8
	DD	01H
	DD	01H
	DD	03H
	DD	02H
	DD	00H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	ORG $+8
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	ORG $+4
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	ORG $+8
	DD	01H
	DD	04H
	DD	00H
	ORG $+8
	DD	02H
	DD	03H
	DD	00H
	DD	00H
	ORG $+8
	DD	00H
	DD	05H
	DD	00H
	ORG $+8
	DD	02H
	DD	03H
	DD	00H
	DD	00H
	ORG $+8
	DD	00H
	DD	06H
	DD	00H
	ORG $+8
	DD	02H
	DD	03H
	DD	00H
	DD	00H
	ORG $+8
	DD	00H
	DD	04H
	DD	01H
	DD	00H
	ORG $+4
	DD	05H
	DD	00H
	DD	00H
	DD	00H
	ORG $+8
	DD	00H
	DD	02H
	DD	04H
	DD	01H
	DD	00H
	DD	05H
	DD	00H
	DD	00H
	DD	00H
	ORG $+8
	DD	00H
	DD	00H
	DD	00H
	ORG $+8
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+8
	DD	00H
	ORG $+12
Hashes	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0L@PKFJAMAA@RIPEMD?9160?$AA@
	DD	00H
	DD	01H
	DD	02H
	ORG $+4
	DQ	FLAT:??_C@_07MEOJAOJE@SHA?9512?$AA@
	DD	00H
	DD	00H
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_09HLDHDDJL@Whirlpool?$AA@
	DD	00H
	DD	00H
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_05HJMENKNE@SHA?91?$AA@
	DD	01H
	DD	00H
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
PUBLIC	IsHwEncryptionEnabled
;	COMDAT pdata
; File c:\users\public\desktop\projects\ciphershed\src\common\crypto.c
pdata	SEGMENT
$pdata$IsHwEncryptionEnabled DD imagerel $LN5
	DD	imagerel $LN5+37
	DD	imagerel $unwind$IsHwEncryptionEnabled
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IsHwEncryptionEnabled DD 010401H
	DD	02204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT IsHwEncryptionEnabled
_TEXT	SEGMENT
tv65 = 0
IsHwEncryptionEnabled PROC				; COMDAT

; 1867 : {

$LN5:
  00000	48 83 ec 18	 sub	 rsp, 24

; 1868 : 	return !HwEncryptionDisabled;

  00004	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR HwEncryptionDisabled, 0
  0000b	75 09		 jne	 SHORT $LN3@IsHwEncryp
  0000d	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv65[rsp], 1
  00014	eb 07		 jmp	 SHORT $LN4@IsHwEncryp
$LN3@IsHwEncryp:
  00016	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv65[rsp], 0
$LN4@IsHwEncryp:
  0001d	8b 04 24	 mov	 eax, DWORD PTR tv65[rsp]

; 1869 : }

  00020	48 83 c4 18	 add	 rsp, 24
  00024	c3		 ret	 0
IsHwEncryptionEnabled ENDP
_TEXT	ENDS
PUBLIC	EnableHwEncryption
;	COMDAT pdata
pdata	SEGMENT
$pdata$EnableHwEncryption DD imagerel $LN5
	DD	imagerel $LN5+45
	DD	imagerel $unwind$EnableHwEncryption
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EnableHwEncryption DD 010801H
	DD	02208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EnableHwEncryption
_TEXT	SEGMENT
tv65 = 0
enable$ = 32
EnableHwEncryption PROC					; COMDAT

; 1857 : {

$LN5:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 18	 sub	 rsp, 24

; 1858 : #if defined (TC_WINDOWS_BOOT)
; 1859 : 	if (enable)
; 1860 : 		aes_hw_cpu_enable_sse();
; 1861 : #endif
; 1862 : 
; 1863 : 	HwEncryptionDisabled = !enable;

  00008	83 7c 24 20 00	 cmp	 DWORD PTR enable$[rsp], 0
  0000d	75 09		 jne	 SHORT $LN3@EnableHwEn
  0000f	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv65[rsp], 1
  00016	eb 07		 jmp	 SHORT $LN4@EnableHwEn
$LN3@EnableHwEn:
  00018	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv65[rsp], 0
$LN4@EnableHwEn:
  0001f	8b 04 24	 mov	 eax, DWORD PTR tv65[rsp]
  00022	89 05 00 00 00
	00		 mov	 DWORD PTR HwEncryptionDisabled, eax

; 1864 : }

  00028	48 83 c4 18	 add	 rsp, 24
  0002c	c3		 ret	 0
EnableHwEncryption ENDP
_TEXT	ENDS
PUBLIC	IsAesHwCpuSupported
;	COMDAT pdata
pdata	SEGMENT
$pdata$IsAesHwCpuSupported DD imagerel $LN8
	DD	imagerel $LN8+108
	DD	imagerel $unwind$IsAesHwCpuSupported
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IsAesHwCpuSupported DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT IsAesHwCpuSupported
_TEXT	SEGMENT
tv68 = 32
tv71 = 36
IsAesHwCpuSupported PROC				; COMDAT

; 1843 : {

$LN8:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1844 : 	static BOOL state = FALSE;
; 1845 : 	static BOOL stateValid = FALSE;
; 1846 : 
; 1847 : 	if (!stateValid)

  00004	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?stateValid@?1??IsAesHwCpuSupported@@9@9, 0
  0000b	75 32		 jne	 SHORT $LN1@IsAesHwCpu

; 1848 : 	{
; 1849 : 		state = is_aes_hw_cpu_supported() ? TRUE : FALSE;

  0000d	e8 00 00 00 00	 call	 is_aes_hw_cpu_supported
  00012	0f b6 c0	 movzx	 eax, al
  00015	85 c0		 test	 eax, eax
  00017	74 0a		 je	 SHORT $LN4@IsAesHwCpu
  00019	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  00021	eb 08		 jmp	 SHORT $LN5@IsAesHwCpu
$LN4@IsAesHwCpu:
  00023	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN5@IsAesHwCpu:
  0002b	8b 44 24 20	 mov	 eax, DWORD PTR tv68[rsp]
  0002f	89 05 00 00 00
	00		 mov	 DWORD PTR ?state@?1??IsAesHwCpuSupported@@9@9, eax

; 1850 : 		stateValid = TRUE;

  00035	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?stateValid@?1??IsAesHwCpuSupported@@9@9, 1
$LN1@IsAesHwCpu:

; 1851 : 	}
; 1852 : 
; 1853 : 	return state && !HwEncryptionDisabled;

  0003f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?state@?1??IsAesHwCpuSupported@@9@9, 0
  00046	74 13		 je	 SHORT $LN6@IsAesHwCpu
  00048	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR HwEncryptionDisabled, 0
  0004f	75 0a		 jne	 SHORT $LN6@IsAesHwCpu
  00051	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
  00059	eb 08		 jmp	 SHORT $LN7@IsAesHwCpu
$LN6@IsAesHwCpu:
  0005b	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
$LN7@IsAesHwCpu:
  00063	8b 44 24 24	 mov	 eax, DWORD PTR tv71[rsp]

; 1854 : }

  00067	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006b	c3		 ret	 0
IsAesHwCpuSupported ENDP
_TEXT	ENDS
PUBLIC	DataUnit2LRWIndex
;	COMDAT pdata
pdata	SEGMENT
$pdata$DataUnit2LRWIndex DD imagerel $LN10
	DD	imagerel $LN10+178
	DD	imagerel $unwind$DataUnit2LRWIndex
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DataUnit2LRWIndex DD 011201H
	DD	08212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT DataUnit2LRWIndex
_TEXT	SEGMENT
tv70 = 48
dataUnit$ = 80
blockSize$ = 88
ci$ = 96
DataUnit2LRWIndex PROC					; COMDAT

; 1342 : {

$LN10:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1343 : 	/* Deprecated/legacy */
; 1344 : 
; 1345 : 	if (ci->hiddenVolume)

  00012	48 8b 44 24 60	 mov	 rax, QWORD PTR ci$[rsp]
  00017	83 b8 a0 29 00
	00 00		 cmp	 DWORD PTR [rax+10656], 0
  0001e	74 28		 je	 SHORT $LN7@DataUnit2L

; 1346 : 		dataUnit -= ci->hiddenVolumeOffset / ENCRYPTION_DATA_UNIT_SIZE;

  00020	33 d2		 xor	 edx, edx
  00022	48 8b 44 24 60	 mov	 rax, QWORD PTR ci$[rsp]
  00027	48 8b 80 18 44
	00 00		 mov	 rax, QWORD PTR [rax+17432]
  0002e	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00033	48 f7 f1	 div	 rcx
  00036	48 8b c8	 mov	 rcx, rax
  00039	48 8b 44 24 50	 mov	 rax, QWORD PTR dataUnit$[rsp]
  0003e	48 2b c1	 sub	 rax, rcx
  00041	48 89 44 24 50	 mov	 QWORD PTR dataUnit$[rsp], rax

; 1347 : 	else

  00046	eb 0e		 jmp	 SHORT $LN6@DataUnit2L
$LN7@DataUnit2L:

; 1348 : 		dataUnit -= TC_VOLUME_HEADER_SIZE_LEGACY / ENCRYPTION_DATA_UNIT_SIZE;	// Compensate for the volume header size

  00048	48 8b 44 24 50	 mov	 rax, QWORD PTR dataUnit$[rsp]
  0004d	48 83 e8 01	 sub	 rax, 1
  00051	48 89 44 24 50	 mov	 QWORD PTR dataUnit$[rsp], rax
$LN6@DataUnit2L:

; 1349 : 
; 1350 : 	switch (blockSize)

  00056	8b 44 24 58	 mov	 eax, DWORD PTR blockSize$[rsp]
  0005a	89 44 24 30	 mov	 DWORD PTR tv70[rsp], eax
  0005e	83 7c 24 30 08	 cmp	 DWORD PTR tv70[rsp], 8
  00063	74 09		 je	 SHORT $LN3@DataUnit2L
  00065	83 7c 24 30 10	 cmp	 DWORD PTR tv70[rsp], 16
  0006a	74 11		 je	 SHORT $LN2@DataUnit2L
  0006c	eb 1e		 jmp	 SHORT $LN1@DataUnit2L
$LN3@DataUnit2L:

; 1351 : 	{
; 1352 : 	case 8:
; 1353 : 		return (dataUnit << 6) | 1;

  0006e	48 8b 44 24 50	 mov	 rax, QWORD PTR dataUnit$[rsp]
  00073	48 c1 e0 06	 shl	 rax, 6
  00077	48 83 c8 01	 or	 rax, 1
  0007b	eb 30		 jmp	 SHORT $LN8@DataUnit2L
$LN2@DataUnit2L:

; 1354 : 
; 1355 : 	case 16:
; 1356 : 		return (dataUnit << 5) | 1;

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR dataUnit$[rsp]
  00082	48 c1 e0 05	 shl	 rax, 5
  00086	48 83 c8 01	 or	 rax, 1
  0008a	eb 21		 jmp	 SHORT $LN8@DataUnit2L
$LN1@DataUnit2L:

; 1357 : 
; 1358 : 	default:
; 1359 : 		TC_THROW_FATAL_EXCEPTION;

  0008c	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  00095	45 33 c9	 xor	 r9d, r9d
  00098	45 33 c0	 xor	 r8d, r8d
  0009b	ba 4f 05 00 00	 mov	 edx, 1359		; 0000054fH
  000a0	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  000a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx

; 1360 : 	}
; 1361 : 
; 1362 : 	return 0;

  000ab	33 c0		 xor	 eax, eax
$LN8@DataUnit2L:
$LN9@DataUnit2L:

; 1363 : }

  000ad	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b1	c3		 ret	 0
DataUnit2LRWIndex ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$InitSectorIVAndWhitening DD imagerel InitSectorIVAndWhitening
	DD	imagerel InitSectorIVAndWhitening+464
	DD	imagerel $unwind$InitSectorIVAndWhitening
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$InitSectorIVAndWhitening DD 021801H
	DD	03014b218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT InitSectorIVAndWhitening
_TEXT	SEGMENT
iv64$ = 48
iv32$ = 80
tv77 = 88
unitNo$ = 112
blockSize$ = 120
iv$ = 128
ivSeed$ = 136
whitening$ = 144
InitSectorIVAndWhitening PROC				; COMDAT

; 1010 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	53		 push	 rbx
  00014	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 1011 : 
; 1012 : 	/* IMPORTANT: This function has been deprecated (legacy) */
; 1013 : 
; 1014 : 	unsigned __int64 iv64[4];
; 1015 : 	unsigned __int32 *iv32 = (unsigned __int32 *) iv64;

  00018	48 8d 44 24 30	 lea	 rax, QWORD PTR iv64$[rsp]
  0001d	48 89 44 24 50	 mov	 QWORD PTR iv32$[rsp], rax

; 1016 : 
; 1017 : 	iv64[0] = ivSeed[0] ^ LE64(unitNo);

  00022	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR ivSeed$[rsp]
  0002a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR unitNo$[rsp]
  0002f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00032	48 33 c1	 xor	 rax, rcx
  00035	48 89 44 24 30	 mov	 QWORD PTR iv64$[rsp], rax

; 1018 : 	iv64[1] = ivSeed[1] ^ LE64(unitNo);

  0003a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR ivSeed$[rsp]
  00042	48 8b 4c 24 70	 mov	 rcx, QWORD PTR unitNo$[rsp]
  00047	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004b	48 33 c1	 xor	 rax, rcx
  0004e	48 89 44 24 38	 mov	 QWORD PTR iv64$[rsp+8], rax

; 1019 : 	iv64[2] = ivSeed[2] ^ LE64(unitNo);

  00053	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR ivSeed$[rsp]
  0005b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR unitNo$[rsp]
  00060	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00064	48 33 c1	 xor	 rax, rcx
  00067	48 89 44 24 40	 mov	 QWORD PTR iv64$[rsp+16], rax

; 1020 : 	if (blockSize == 16)

  0006c	83 7c 24 78 10	 cmp	 DWORD PTR blockSize$[rsp], 16
  00071	75 19		 jne	 SHORT $LN6@InitSector

; 1021 : 	{
; 1022 : 		iv64[3] = ivSeed[3] ^ LE64(unitNo);

  00073	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR ivSeed$[rsp]
  0007b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR unitNo$[rsp]
  00080	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00084	48 33 c1	 xor	 rax, rcx
  00087	48 89 44 24 48	 mov	 QWORD PTR iv64$[rsp+24], rax
$LN6@InitSector:

; 1023 : 	}
; 1024 : 
; 1025 : 	iv[0] = iv32[0];

  0008c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR iv$[rsp]
  00094	48 8b 44 24 50	 mov	 rax, QWORD PTR iv32$[rsp]
  00099	8b 00		 mov	 eax, DWORD PTR [rax]
  0009b	89 01		 mov	 DWORD PTR [rcx], eax

; 1026 : 	iv[1] = iv32[1];

  0009d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR iv$[rsp]
  000a5	48 8b 44 24 50	 mov	 rax, QWORD PTR iv32$[rsp]
  000aa	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  000ad	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 1027 : 
; 1028 : 	switch (blockSize)

  000b0	8b 44 24 78	 mov	 eax, DWORD PTR blockSize$[rsp]
  000b4	89 44 24 58	 mov	 DWORD PTR tv77[rsp], eax
  000b8	83 7c 24 58 08	 cmp	 DWORD PTR tv77[rsp], 8
  000bd	0f 84 8d 00 00
	00		 je	 $LN2@InitSector
  000c3	83 7c 24 58 10	 cmp	 DWORD PTR tv77[rsp], 16
  000c8	74 05		 je	 SHORT $LN3@InitSector
  000ca	e9 dc 00 00 00	 jmp	 $LN1@InitSector
$LN3@InitSector:

; 1029 : 	{
; 1030 : 	case 16:
; 1031 : 
; 1032 : 		// 128-bit block
; 1033 : 
; 1034 : 		iv[2] = iv32[2];

  000cf	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR iv$[rsp]
  000d7	48 8b 44 24 50	 mov	 rax, QWORD PTR iv32$[rsp]
  000dc	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  000df	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 1035 : 		iv[3] = iv32[3];

  000e2	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR iv$[rsp]
  000ea	48 8b 44 24 50	 mov	 rax, QWORD PTR iv32$[rsp]
  000ef	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  000f2	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 1036 : 
; 1037 : 		whitening[0] = LE32( crc32int ( &iv32[4] ) ^ crc32int ( &iv32[7] ) );

  000f5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR iv32$[rsp]
  000fa	48 83 c1 10	 add	 rcx, 16
  000fe	e8 00 00 00 00	 call	 crc32int
  00103	8b d8		 mov	 ebx, eax
  00105	48 8b 4c 24 50	 mov	 rcx, QWORD PTR iv32$[rsp]
  0010a	48 83 c1 1c	 add	 rcx, 28
  0010e	e8 00 00 00 00	 call	 crc32int
  00113	8b cb		 mov	 ecx, ebx
  00115	33 c8		 xor	 ecx, eax
  00117	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR whitening$[rsp]
  0011f	89 08		 mov	 DWORD PTR [rax], ecx

; 1038 : 		whitening[1] = LE32( crc32int ( &iv32[5] ) ^ crc32int ( &iv32[6] ) );

  00121	48 8b 4c 24 50	 mov	 rcx, QWORD PTR iv32$[rsp]
  00126	48 83 c1 14	 add	 rcx, 20
  0012a	e8 00 00 00 00	 call	 crc32int
  0012f	8b d8		 mov	 ebx, eax
  00131	48 8b 4c 24 50	 mov	 rcx, QWORD PTR iv32$[rsp]
  00136	48 83 c1 18	 add	 rcx, 24
  0013a	e8 00 00 00 00	 call	 crc32int
  0013f	8b cb		 mov	 ecx, ebx
  00141	33 c8		 xor	 ecx, eax
  00143	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR whitening$[rsp]
  0014b	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 1039 : 		break;

  0014e	eb 7a		 jmp	 SHORT $LN4@InitSector
$LN2@InitSector:

; 1040 : 
; 1041 : 	case 8:
; 1042 : 
; 1043 : 		// 64-bit block
; 1044 : 
; 1045 : 		whitening[0] = LE32( crc32int ( &iv32[2] ) ^ crc32int ( &iv32[5] ) );

  00150	48 8b 4c 24 50	 mov	 rcx, QWORD PTR iv32$[rsp]
  00155	48 83 c1 08	 add	 rcx, 8
  00159	e8 00 00 00 00	 call	 crc32int
  0015e	8b d8		 mov	 ebx, eax
  00160	48 8b 4c 24 50	 mov	 rcx, QWORD PTR iv32$[rsp]
  00165	48 83 c1 14	 add	 rcx, 20
  00169	e8 00 00 00 00	 call	 crc32int
  0016e	8b cb		 mov	 ecx, ebx
  00170	33 c8		 xor	 ecx, eax
  00172	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR whitening$[rsp]
  0017a	89 08		 mov	 DWORD PTR [rax], ecx

; 1046 : 		whitening[1] = LE32( crc32int ( &iv32[3] ) ^ crc32int ( &iv32[4] ) );

  0017c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR iv32$[rsp]
  00181	48 83 c1 0c	 add	 rcx, 12
  00185	e8 00 00 00 00	 call	 crc32int
  0018a	8b d8		 mov	 ebx, eax
  0018c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR iv32$[rsp]
  00191	48 83 c1 10	 add	 rcx, 16
  00195	e8 00 00 00 00	 call	 crc32int
  0019a	8b cb		 mov	 ecx, ebx
  0019c	33 c8		 xor	 ecx, eax
  0019e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR whitening$[rsp]
  001a6	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 1047 : 		break;

  001a9	eb 1f		 jmp	 SHORT $LN4@InitSector
$LN1@InitSector:

; 1048 : 
; 1049 : 	default:
; 1050 : 		TC_THROW_FATAL_EXCEPTION;

  001ab	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  001b4	45 33 c9	 xor	 r9d, r9d
  001b7	45 33 c0	 xor	 r8d, r8d
  001ba	ba 1a 04 00 00	 mov	 edx, 1050		; 0000041aH
  001bf	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  001c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx
$LN4@InitSector:
$LN8@InitSector:

; 1051 : 	}
; 1052 : }

  001ca	48 83 c4 60	 add	 rsp, 96			; 00000060H
  001ce	5b		 pop	 rbx
  001cf	c3		 ret	 0
InitSectorIVAndWhitening ENDP
_TEXT	ENDS
PUBLIC	Xor64
; Function compile flags: /Odtp
;	COMDAT Xor64
_TEXT	SEGMENT
a$ = 8
b$ = 16
Xor64	PROC						; COMDAT

; 811  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 812  : 	*a ^= *b;

  0000a	48 8b 4c 24 08	 mov	 rcx, QWORD PTR a$[rsp]
  0000f	48 8b 44 24 10	 mov	 rax, QWORD PTR b$[rsp]
  00014	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00017	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0001a	48 33 c8	 xor	 rcx, rax
  0001d	48 8b 44 24 08	 mov	 rax, QWORD PTR a$[rsp]
  00022	48 89 08	 mov	 QWORD PTR [rax], rcx

; 813  : }

  00025	c3		 ret	 0
Xor64	ENDP
_TEXT	ENDS
PUBLIC	Xor128
; Function compile flags: /Odtp
;	COMDAT Xor128
_TEXT	SEGMENT
a$ = 8
b$ = 16
Xor128	PROC						; COMDAT

; 804  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 805  : 	*a++ ^= *b++;

  0000a	48 8b 4c 24 08	 mov	 rcx, QWORD PTR a$[rsp]
  0000f	48 8b 44 24 10	 mov	 rax, QWORD PTR b$[rsp]
  00014	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00017	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0001a	48 33 c8	 xor	 rcx, rax
  0001d	48 8b 44 24 08	 mov	 rax, QWORD PTR a$[rsp]
  00022	48 89 08	 mov	 QWORD PTR [rax], rcx
  00025	48 8b 44 24 10	 mov	 rax, QWORD PTR b$[rsp]
  0002a	48 83 c0 08	 add	 rax, 8
  0002e	48 89 44 24 10	 mov	 QWORD PTR b$[rsp], rax
  00033	48 8b 44 24 08	 mov	 rax, QWORD PTR a$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	48 89 44 24 08	 mov	 QWORD PTR a$[rsp], rax

; 806  : 	*a ^= *b;

  00041	48 8b 4c 24 08	 mov	 rcx, QWORD PTR a$[rsp]
  00046	48 8b 44 24 10	 mov	 rax, QWORD PTR b$[rsp]
  0004b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004e	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00051	48 33 c8	 xor	 rcx, rax
  00054	48 8b 44 24 08	 mov	 rax, QWORD PTR a$[rsp]
  00059	48 89 08	 mov	 QWORD PTR [rax], rcx

; 807  : }

  0005c	c3		 ret	 0
Xor128	ENDP
_TEXT	ENDS
PUBLIC	crypto_open
;	COMDAT pdata
pdata	SEGMENT
$pdata$crypto_open DD imagerel $LN4
	DD	imagerel $LN4+78
	DD	imagerel $unwind$crypto_open
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$crypto_open DD 020601H
	DD	070025206H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT crypto_open
_TEXT	SEGMENT
cryptoInfo$ = 32
crypto_open PROC					; COMDAT

; 741  : {

$LN4:
  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 742  : #ifndef TC_WINDOWS_BOOT
; 743  : 
; 744  : 	/* Do the crt allocation */
; 745  : 	PCRYPTO_INFO cryptoInfo = (PCRYPTO_INFO) TCalloc (sizeof (CRYPTO_INFO));

  00006	41 b8 54 43 4d
	4d		 mov	 r8d, 1296909140		; 4d4d4354H
  0000c	ba 68 44 00 00	 mov	 edx, 17512		; 00004468H
  00011	33 c9		 xor	 ecx, ecx
  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ExAllocatePoolWithTag
  00019	48 89 44 24 20	 mov	 QWORD PTR cryptoInfo$[rsp], rax

; 746  : 	if (cryptoInfo == NULL)

  0001e	48 83 7c 24 20
	00		 cmp	 QWORD PTR cryptoInfo$[rsp], 0
  00024	75 04		 jne	 SHORT $LN1@crypto_ope

; 747  : 		return NULL;

  00026	33 c0		 xor	 eax, eax
  00028	eb 1e		 jmp	 SHORT $LN2@crypto_ope
$LN1@crypto_ope:

; 748  : 
; 749  : 	memset (cryptoInfo, 0, sizeof (CRYPTO_INFO));

  0002a	48 8b 7c 24 20	 mov	 rdi, QWORD PTR cryptoInfo$[rsp]
  0002f	33 c0		 xor	 eax, eax
  00031	b9 68 44 00 00	 mov	 ecx, 17512		; 00004468H
  00036	f3 aa		 rep stosb

; 750  : 
; 751  : #ifndef DEVICE_DRIVER
; 752  : 	VirtualLock (cryptoInfo, sizeof (CRYPTO_INFO));
; 753  : #endif
; 754  : 
; 755  : 	cryptoInfo->ea = -1;

  00038	48 8b 44 24 20	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  0003d	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [rax], -1

; 756  : 	return cryptoInfo;

  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
$LN2@crypto_ope:

; 757  : 
; 758  : #else // TC_WINDOWS_BOOT
; 759  : 
; 760  : #if 0
; 761  : 	if (CryptoInfoBufferInUse)
; 762  : 		TC_THROW_FATAL_EXCEPTION;
; 763  : #endif
; 764  : 	CryptoInfoBufferInUse = 1;
; 765  : 	return &CryptoInfoBuffer;
; 766  : 
; 767  : #endif // TC_WINDOWS_BOOT
; 768  : }

  00048	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004c	5f		 pop	 rdi
  0004d	c3		 ret	 0
crypto_open ENDP
_TEXT	ENDS
PUBLIC	EAGetPreviousCipher
;	COMDAT pdata
pdata	SEGMENT
$pdata$EAGetPreviousCipher DD imagerel $LN7
	DD	imagerel $LN7+164
	DD	imagerel $unwind$EAGetPreviousCipher
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EAGetPreviousCipher DD 010c01H
	DD	0220cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EAGetPreviousCipher
_TEXT	SEGMENT
i$ = 0
c$ = 4
ea$ = 32
previousCipherId$ = 40
EAGetPreviousCipher PROC				; COMDAT

; 660  : {

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 18	 sub	 rsp, 24

; 661  : 	int c, i = 0;

  0000c	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0

; 662  : 
; 663  : 	if (EncryptionAlgorithms[ea].Ciphers[i++] == previousCipherId)

  00013	48 63 14 24	 movsxd	 rdx, DWORD PTR i$[rsp]
  00017	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR ea$[rsp]
  0001c	48 6b c9 2c	 imul	 rcx, 44			; 0000002cH
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:EncryptionAlgorithms
  00027	48 03 c1	 add	 rax, rcx
  0002a	8b 14 90	 mov	 edx, DWORD PTR [rax+rdx*4]
  0002d	8b 4c 24 28	 mov	 ecx, DWORD PTR previousCipherId$[rsp]
  00031	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 04 24	 mov	 DWORD PTR i$[rsp], eax
  0003a	3b d1		 cmp	 edx, ecx
  0003c	75 04		 jne	 SHORT $LN4@EAGetPrevi

; 664  : 		return 0;

  0003e	33 c0		 xor	 eax, eax
  00040	eb 5d		 jmp	 SHORT $LN5@EAGetPrevi
$LN4@EAGetPrevi:
$LN3@EAGetPrevi:

; 665  : 
; 666  : 	while (c = EncryptionAlgorithms[ea].Ciphers[i++])

  00042	48 63 44 24 20	 movsxd	 rax, DWORD PTR ea$[rsp]
  00047	48 6b c0 2c	 imul	 rax, 44			; 0000002cH
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:EncryptionAlgorithms
  00052	48 03 c8	 add	 rcx, rax
  00055	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00059	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  0005c	89 44 24 04	 mov	 DWORD PTR c$[rsp], eax
  00060	8b 4c 24 04	 mov	 ecx, DWORD PTR c$[rsp]
  00064	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00067	83 c0 01	 add	 eax, 1
  0006a	89 04 24	 mov	 DWORD PTR i$[rsp], eax
  0006d	85 c9		 test	 ecx, ecx
  0006f	74 2c		 je	 SHORT $LN2@EAGetPrevi

; 667  : 	{
; 668  : 		if (c == previousCipherId) 

  00071	8b 44 24 28	 mov	 eax, DWORD PTR previousCipherId$[rsp]
  00075	39 44 24 04	 cmp	 DWORD PTR c$[rsp], eax
  00079	75 20		 jne	 SHORT $LN1@EAGetPrevi

; 669  : 			return EncryptionAlgorithms[ea].Ciphers[i - 2];

  0007b	48 63 44 24 20	 movsxd	 rax, DWORD PTR ea$[rsp]
  00080	48 6b c0 2c	 imul	 rax, 44			; 0000002cH
  00084	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:EncryptionAlgorithms
  0008b	48 03 c8	 add	 rcx, rax
  0008e	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00091	83 e8 02	 sub	 eax, 2
  00094	48 98		 cdqe
  00096	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00099	eb 04		 jmp	 SHORT $LN5@EAGetPrevi
$LN1@EAGetPrevi:

; 670  : 	}

  0009b	eb a5		 jmp	 SHORT $LN3@EAGetPrevi
$LN2@EAGetPrevi:

; 671  : 
; 672  : 	return 0;

  0009d	33 c0		 xor	 eax, eax
$LN5@EAGetPrevi:

; 673  : }

  0009f	48 83 c4 18	 add	 rsp, 24
  000a3	c3		 ret	 0
EAGetPreviousCipher ENDP
_TEXT	ENDS
PUBLIC	EAGetNextCipher
;	COMDAT pdata
pdata	SEGMENT
$pdata$EAGetNextCipher DD imagerel $LN6
	DD	imagerel $LN6+113
	DD	imagerel $unwind$EAGetNextCipher
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EAGetNextCipher DD 010c01H
	DD	0220cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EAGetNextCipher
_TEXT	SEGMENT
i$ = 0
c$ = 4
ea$ = 32
previousCipherId$ = 40
EAGetNextCipher PROC					; COMDAT

; 647  : {

$LN6:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 18	 sub	 rsp, 24

; 648  : 	int c, i = 0;

  0000c	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
$LN3@EAGetNextC:

; 649  : 	while (c = EncryptionAlgorithms[ea].Ciphers[i++])

  00013	48 63 44 24 20	 movsxd	 rax, DWORD PTR ea$[rsp]
  00018	48 6b c0 2c	 imul	 rax, 44			; 0000002cH
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:EncryptionAlgorithms
  00023	48 03 c8	 add	 rcx, rax
  00026	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  0002a	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  0002d	89 44 24 04	 mov	 DWORD PTR c$[rsp], eax
  00031	8b 4c 24 04	 mov	 ecx, DWORD PTR c$[rsp]
  00035	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00038	83 c0 01	 add	 eax, 1
  0003b	89 04 24	 mov	 DWORD PTR i$[rsp], eax
  0003e	85 c9		 test	 ecx, ecx
  00040	74 28		 je	 SHORT $LN2@EAGetNextC

; 650  : 	{
; 651  : 		if (c == previousCipherId) 

  00042	8b 44 24 28	 mov	 eax, DWORD PTR previousCipherId$[rsp]
  00046	39 44 24 04	 cmp	 DWORD PTR c$[rsp], eax
  0004a	75 1c		 jne	 SHORT $LN1@EAGetNextC

; 652  : 			return EncryptionAlgorithms[ea].Ciphers[i];

  0004c	48 63 44 24 20	 movsxd	 rax, DWORD PTR ea$[rsp]
  00051	48 6b c0 2c	 imul	 rax, 44			; 0000002cH
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:EncryptionAlgorithms
  0005c	48 03 c8	 add	 rcx, rax
  0005f	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00063	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00066	eb 04		 jmp	 SHORT $LN4@EAGetNextC
$LN1@EAGetNextC:

; 653  : 	}

  00068	eb a9		 jmp	 SHORT $LN3@EAGetNextC
$LN2@EAGetNextC:

; 654  : 
; 655  : 	return 0;

  0006a	33 c0		 xor	 eax, eax
$LN4@EAGetNextC:

; 656  : }

  0006c	48 83 c4 18	 add	 rsp, 24
  00070	c3		 ret	 0
EAGetNextCipher ENDP
_TEXT	ENDS
PUBLIC	EAGetLastCipher
;	COMDAT pdata
pdata	SEGMENT
$pdata$EAGetLastCipher DD imagerel $LN5
	DD	imagerel $LN5+99
	DD	imagerel $unwind$EAGetLastCipher
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EAGetLastCipher DD 010801H
	DD	02208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EAGetLastCipher
_TEXT	SEGMENT
i$ = 0
c$ = 4
ea$ = 32
EAGetLastCipher PROC					; COMDAT

; 638  : {

$LN5:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 18	 sub	 rsp, 24

; 639  : 	int c, i = 0;

  00008	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
$LN2@EAGetLastC:

; 640  : 	while (c = EncryptionAlgorithms[ea].Ciphers[i++]);

  0000f	48 63 44 24 20	 movsxd	 rax, DWORD PTR ea$[rsp]
  00014	48 6b c0 2c	 imul	 rax, 44			; 0000002cH
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:EncryptionAlgorithms
  0001f	48 03 c8	 add	 rcx, rax
  00022	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00026	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00029	89 44 24 04	 mov	 DWORD PTR c$[rsp], eax
  0002d	8b 4c 24 04	 mov	 ecx, DWORD PTR c$[rsp]
  00031	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 04 24	 mov	 DWORD PTR i$[rsp], eax
  0003a	85 c9		 test	 ecx, ecx
  0003c	74 02		 je	 SHORT $LN1@EAGetLastC
  0003e	eb cf		 jmp	 SHORT $LN2@EAGetLastC
$LN1@EAGetLastC:

; 641  : 
; 642  : 	return EncryptionAlgorithms[ea].Ciphers[i - 2];

  00040	48 63 44 24 20	 movsxd	 rax, DWORD PTR ea$[rsp]
  00045	48 6b c0 2c	 imul	 rax, 44			; 0000002cH
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:EncryptionAlgorithms
  00050	48 03 c8	 add	 rcx, rax
  00053	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00056	83 e8 02	 sub	 eax, 2
  00059	48 98		 cdqe
  0005b	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]

; 643  : }

  0005e	48 83 c4 18	 add	 rsp, 24
  00062	c3		 ret	 0
EAGetLastCipher ENDP
_TEXT	ENDS
PUBLIC	EAGetFirstCipher
; Function compile flags: /Odtp
;	COMDAT EAGetFirstCipher
_TEXT	SEGMENT
ea$ = 8
EAGetFirstCipher PROC					; COMDAT

; 632  : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 633  : 	return EncryptionAlgorithms[ea].Ciphers[0];

  00004	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR ea$[rsp]
  00009	48 6b c9 2c	 imul	 rcx, 44			; 0000002cH
  0000d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:EncryptionAlgorithms
  00014	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]

; 634  : }

  00017	c3		 ret	 0
EAGetFirstCipher ENDP
_TEXT	ENDS
PUBLIC	EAGetCipherCount
;	COMDAT pdata
pdata	SEGMENT
$pdata$EAGetCipherCount DD imagerel $LN5
	DD	imagerel $LN5+67
	DD	imagerel $unwind$EAGetCipherCount
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EAGetCipherCount DD 010801H
	DD	02208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EAGetCipherCount
_TEXT	SEGMENT
i$ = 0
ea$ = 32
EAGetCipherCount PROC					; COMDAT

; 623  : {

$LN5:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 18	 sub	 rsp, 24

; 624  : 	int i = 0;

  00008	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
$LN2@EAGetCiphe:

; 625  : 	while (EncryptionAlgorithms[ea].Ciphers[i++]);

  0000f	48 63 14 24	 movsxd	 rdx, DWORD PTR i$[rsp]
  00013	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR ea$[rsp]
  00018	48 6b c9 2c	 imul	 rcx, 44			; 0000002cH
  0001c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:EncryptionAlgorithms
  00023	48 03 c1	 add	 rax, rcx
  00026	8b 0c 90	 mov	 ecx, DWORD PTR [rax+rdx*4]
  00029	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  0002c	83 c0 01	 add	 eax, 1
  0002f	89 04 24	 mov	 DWORD PTR i$[rsp], eax
  00032	85 c9		 test	 ecx, ecx
  00034	74 02		 je	 SHORT $LN1@EAGetCiphe
  00036	eb d7		 jmp	 SHORT $LN2@EAGetCiphe
$LN1@EAGetCiphe:

; 626  : 
; 627  : 	return i - 1;

  00038	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  0003b	83 e8 01	 sub	 eax, 1

; 628  : }

  0003e	48 83 c4 18	 add	 rsp, 24
  00042	c3		 ret	 0
EAGetCipherCount ENDP
_TEXT	ENDS
PUBLIC	EAGetNextMode
;	COMDAT pdata
pdata	SEGMENT
$pdata$EAGetNextMode DD imagerel $LN6
	DD	imagerel $LN6+115
	DD	imagerel $unwind$EAGetNextMode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EAGetNextMode DD 010c01H
	DD	0220cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EAGetNextMode
_TEXT	SEGMENT
i$ = 0
c$ = 4
ea$ = 32
previousModeId$ = 40
EAGetNextMode PROC					; COMDAT

; 513  : {

$LN6:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 18	 sub	 rsp, 24

; 514  : 	int c, i = 0;

  0000c	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
$LN3@EAGetNextM:

; 515  : 	while (c = EncryptionAlgorithms[ea].Modes[i++])

  00013	48 63 44 24 20	 movsxd	 rax, DWORD PTR ea$[rsp]
  00018	48 6b c0 2c	 imul	 rax, 44			; 0000002cH
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:EncryptionAlgorithms
  00023	48 03 c8	 add	 rcx, rax
  00026	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  0002a	8b 44 81 10	 mov	 eax, DWORD PTR [rcx+rax*4+16]
  0002e	89 44 24 04	 mov	 DWORD PTR c$[rsp], eax
  00032	8b 4c 24 04	 mov	 ecx, DWORD PTR c$[rsp]
  00036	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00039	83 c0 01	 add	 eax, 1
  0003c	89 04 24	 mov	 DWORD PTR i$[rsp], eax
  0003f	85 c9		 test	 ecx, ecx
  00041	74 29		 je	 SHORT $LN2@EAGetNextM

; 516  : 	{
; 517  : 		if (c == previousModeId) 

  00043	8b 44 24 28	 mov	 eax, DWORD PTR previousModeId$[rsp]
  00047	39 44 24 04	 cmp	 DWORD PTR c$[rsp], eax
  0004b	75 1d		 jne	 SHORT $LN1@EAGetNextM

; 518  : 			return EncryptionAlgorithms[ea].Modes[i];

  0004d	48 63 44 24 20	 movsxd	 rax, DWORD PTR ea$[rsp]
  00052	48 6b c0 2c	 imul	 rax, 44			; 0000002cH
  00056	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:EncryptionAlgorithms
  0005d	48 03 c8	 add	 rcx, rax
  00060	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00064	8b 44 81 10	 mov	 eax, DWORD PTR [rcx+rax*4+16]
  00068	eb 04		 jmp	 SHORT $LN4@EAGetNextM
$LN1@EAGetNextM:

; 519  : 	}

  0006a	eb a7		 jmp	 SHORT $LN3@EAGetNextM
$LN2@EAGetNextM:

; 520  : 
; 521  : 	return 0;

  0006c	33 c0		 xor	 eax, eax
$LN4@EAGetNextM:

; 522  : }

  0006e	48 83 c4 18	 add	 rsp, 24
  00072	c3		 ret	 0
EAGetNextMode ENDP
_TEXT	ENDS
PUBLIC	EAGetFirstMode
; Function compile flags: /Odtp
;	COMDAT EAGetFirstMode
_TEXT	SEGMENT
ea$ = 8
EAGetFirstMode PROC					; COMDAT

; 507  : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 508  : 	return (EncryptionAlgorithms[ea].Modes[0]);

  00004	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR ea$[rsp]
  00009	48 6b c9 2c	 imul	 rcx, 44			; 0000002cH
  0000d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:EncryptionAlgorithms
  00014	8b 44 08 10	 mov	 eax, DWORD PTR [rax+rcx+16]

; 509  : }

  00018	c3		 ret	 0
EAGetFirstMode ENDP
_TEXT	ENDS
PUBLIC	EAGetNext
;	COMDAT pdata
pdata	SEGMENT
$pdata$EAGetNext DD imagerel $LN4
	DD	imagerel $LN4+51
	DD	imagerel $unwind$EAGetNext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EAGetNext DD 010801H
	DD	02208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EAGetNext
_TEXT	SEGMENT
id$ = 0
previousEA$ = 32
EAGetNext PROC						; COMDAT

; 374  : {

$LN4:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 18	 sub	 rsp, 24

; 375  : 	int id = previousEA + 1;

  00008	8b 44 24 20	 mov	 eax, DWORD PTR previousEA$[rsp]
  0000c	83 c0 01	 add	 eax, 1
  0000f	89 04 24	 mov	 DWORD PTR id$[rsp], eax

; 376  : 	if (EncryptionAlgorithms[id].Ciphers[0] != 0) return id;

  00012	48 63 0c 24	 movsxd	 rcx, DWORD PTR id$[rsp]
  00016	48 6b c9 2c	 imul	 rcx, 44			; 0000002cH
  0001a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:EncryptionAlgorithms
  00021	83 3c 08 00	 cmp	 DWORD PTR [rax+rcx], 0
  00025	74 05		 je	 SHORT $LN1@EAGetNext
  00027	8b 04 24	 mov	 eax, DWORD PTR id$[rsp]
  0002a	eb 02		 jmp	 SHORT $LN2@EAGetNext
$LN1@EAGetNext:

; 377  : 	return 0;

  0002c	33 c0		 xor	 eax, eax
$LN2@EAGetNext:

; 378  : }

  0002e	48 83 c4 18	 add	 rsp, 24
  00032	c3		 ret	 0
EAGetNext ENDP
_TEXT	ENDS
PUBLIC	EAGetFirst
; Function compile flags: /Odtp
;	COMDAT EAGetFirst
_TEXT	SEGMENT
EAGetFirst PROC						; COMDAT

; 358  : 	return 1;

  00000	b8 01 00 00 00	 mov	 eax, 1

; 359  : }

  00005	c3		 ret	 0
EAGetFirst ENDP
_TEXT	ENDS
PUBLIC	CipherSupportsIntraDataUnitParallelization
;	COMDAT pdata
pdata	SEGMENT
$pdata$CipherSupportsIntraDataUnitParallelization DD imagerel $LN5
	DD	imagerel $LN5+51
	DD	imagerel $unwind$CipherSupportsIntraDataUnitParallelization
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CipherSupportsIntraDataUnitParallelization DD 010801H
	DD	06208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT CipherSupportsIntraDataUnitParallelization
_TEXT	SEGMENT
tv67 = 32
cipher$ = 64
CipherSupportsIntraDataUnitParallelization PROC		; COMDAT

; 347  : {

$LN5:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 348  : 	return cipher == AES && IsAesHwCpuSupported();

  00008	83 7c 24 40 01	 cmp	 DWORD PTR cipher$[rsp], 1
  0000d	75 13		 jne	 SHORT $LN3@CipherSupp
  0000f	e8 00 00 00 00	 call	 IsAesHwCpuSupported
  00014	85 c0		 test	 eax, eax
  00016	74 0a		 je	 SHORT $LN3@CipherSupp
  00018	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv67[rsp], 1
  00020	eb 08		 jmp	 SHORT $LN4@CipherSupp
$LN3@CipherSupp:
  00022	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv67[rsp], 0
$LN4@CipherSupp:
  0002a	8b 44 24 20	 mov	 eax, DWORD PTR tv67[rsp]

; 349  : }

  0002e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00032	c3		 ret	 0
CipherSupportsIntraDataUnitParallelization ENDP
_TEXT	ENDS
PUBLIC	CipherGet
;	COMDAT pdata
pdata	SEGMENT
$pdata$CipherGet DD imagerel $LN7
	DD	imagerel $LN7+100
	DD	imagerel $unwind$CipherGet
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CipherGet DD 010801H
	DD	02208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT CipherGet
_TEXT	SEGMENT
i$ = 0
id$ = 32
CipherGet PROC						; COMDAT

; 315  : {

$LN7:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 18	 sub	 rsp, 24

; 316  : 	int i;
; 317  : 	for (i = 0; Ciphers[i].Id != 0; i++)

  00008	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
  0000f	eb 09		 jmp	 SHORT $LN4@CipherGet
$LN3@CipherGet:
  00011	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00014	83 c0 01	 add	 eax, 1
  00017	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@CipherGet:
  0001a	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  0001e	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  00022	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Ciphers
  00029	83 3c 08 00	 cmp	 DWORD PTR [rax+rcx], 0
  0002d	74 2e		 je	 SHORT $LN2@CipherGet

; 318  : 		if (Ciphers[i].Id == id)

  0002f	48 63 14 24	 movsxd	 rdx, DWORD PTR i$[rsp]
  00033	48 6b d2 20	 imul	 rdx, 32			; 00000020H
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Ciphers
  0003e	8b 44 24 20	 mov	 eax, DWORD PTR id$[rsp]
  00042	39 04 11	 cmp	 DWORD PTR [rcx+rdx], eax
  00045	75 14		 jne	 SHORT $LN1@CipherGet

; 319  : 			return &Ciphers[i];

  00047	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  0004b	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  0004f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Ciphers
  00056	48 03 c1	 add	 rax, rcx
  00059	eb 04		 jmp	 SHORT $LN5@CipherGet
$LN1@CipherGet:

; 320  : 
; 321  : 	return NULL;

  0005b	eb b4		 jmp	 SHORT $LN3@CipherGet
$LN2@CipherGet:
  0005d	33 c0		 xor	 eax, eax
$LN5@CipherGet:

; 322  : }

  0005f	48 83 c4 18	 add	 rsp, 24
  00063	c3		 ret	 0
CipherGet ENDP
PUBLIC	crypto_close
;	COMDAT pdata
pdata	SEGMENT
$pdata$crypto_close DD imagerel $LN9
	DD	imagerel $LN9+120
	DD	imagerel $unwind$crypto_close
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$crypto_close DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT crypto_close
_TEXT	SEGMENT
burnc$29037 = 32
burnm$29035 = 40
cryptoInfo$ = 64
crypto_close PROC					; COMDAT

; 778  : {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 779  : #ifndef TC_WINDOWS_BOOT
; 780  : 
; 781  : 	if (cryptoInfo != NULL)

  00009	48 83 7c 24 40
	00		 cmp	 QWORD PTR cryptoInfo$[rsp], 0
  0000f	74 62		 je	 SHORT $LN6@crypto_clo
$LN5@crypto_clo:

; 782  : 	{
; 783  : 		burn (cryptoInfo, sizeof (CRYPTO_INFO));

  00011	48 8b 44 24 40	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00016	48 89 44 24 28	 mov	 QWORD PTR burnm$29035[rsp], rax
  0001b	c7 44 24 20 68
	44 00 00	 mov	 DWORD PTR burnc$29037[rsp], 17512 ; 00004468H
  00023	ba 68 44 00 00	 mov	 edx, 17512		; 00004468H
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR cryptoInfo$[rsp]
  0002d	e8 00 00 00 00	 call	 RtlSecureZeroMemory
$LN2@crypto_clo:
  00032	8b 4c 24 20	 mov	 ecx, DWORD PTR burnc$29037[rsp]
  00036	8b 44 24 20	 mov	 eax, DWORD PTR burnc$29037[rsp]
  0003a	83 e8 01	 sub	 eax, 1
  0003d	89 44 24 20	 mov	 DWORD PTR burnc$29037[rsp], eax
  00041	85 c9		 test	 ecx, ecx
  00043	74 18		 je	 SHORT $LN1@crypto_clo
  00045	48 8b 44 24 28	 mov	 rax, QWORD PTR burnm$29035[rsp]
  0004a	c6 00 00	 mov	 BYTE PTR [rax], 0
  0004d	48 8b 44 24 28	 mov	 rax, QWORD PTR burnm$29035[rsp]
  00052	48 83 c0 01	 add	 rax, 1
  00056	48 89 44 24 28	 mov	 QWORD PTR burnm$29035[rsp], rax
  0005b	eb d5		 jmp	 SHORT $LN2@crypto_clo
$LN1@crypto_clo:
  0005d	33 c0		 xor	 eax, eax
  0005f	85 c0		 test	 eax, eax
  00061	75 ae		 jne	 SHORT $LN5@crypto_clo

; 784  : #ifndef DEVICE_DRIVER
; 785  : 		VirtualUnlock (cryptoInfo, sizeof (CRYPTO_INFO));
; 786  : #endif
; 787  : 		TCfree (cryptoInfo);

  00063	ba 54 43 4d 4d	 mov	 edx, 1296909140		; 4d4d4354H
  00068	48 8b 4c 24 40	 mov	 rcx, QWORD PTR cryptoInfo$[rsp]
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ExFreePoolWithTag
$LN6@crypto_clo:

; 788  : 	}
; 789  : 
; 790  : #else // TC_WINDOWS_BOOT
; 791  : 
; 792  : 	burn (&CryptoInfoBuffer, sizeof (CryptoInfoBuffer));
; 793  : 	CryptoInfoBufferInUse = FALSE;
; 794  : 
; 795  : #endif // TC_WINDOWS_BOOT
; 796  : }

  00073	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00077	c3		 ret	 0
crypto_close ENDP
_TEXT	ENDS
PUBLIC	crypto_loadkey
;	COMDAT pdata
pdata	SEGMENT
$pdata$crypto_loadkey DD imagerel $LN8
	DD	imagerel $LN8+151
	DD	imagerel $unwind$crypto_loadkey
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$crypto_loadkey DD 031501H
	DD	070116215H
	DD	06010H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT crypto_loadkey
_TEXT	SEGMENT
burnc$29023 = 32
burnm$29021 = 40
keyInfo$ = 80
lpszUserKey$ = 88
nUserKeyLen$ = 96
crypto_loadkey PROC					; COMDAT

; 771  : {

$LN8:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 772  : 	keyInfo->keyLength = nUserKeyLen;

  00015	48 8b 4c 24 50	 mov	 rcx, QWORD PTR keyInfo$[rsp]
  0001a	8b 44 24 60	 mov	 eax, DWORD PTR nUserKeyLen$[rsp]
  0001e	89 41 04	 mov	 DWORD PTR [rcx+4], eax
$LN5@crypto_loa:

; 773  : 	burn (keyInfo->userKey, sizeof (keyInfo->userKey));

  00021	48 8b 44 24 50	 mov	 rax, QWORD PTR keyInfo$[rsp]
  00026	48 83 c0 08	 add	 rax, 8
  0002a	48 89 44 24 28	 mov	 QWORD PTR burnm$29021[rsp], rax
  0002f	c7 44 24 20 40
	00 00 00	 mov	 DWORD PTR burnc$29023[rsp], 64 ; 00000040H
  00037	48 8b 4c 24 50	 mov	 rcx, QWORD PTR keyInfo$[rsp]
  0003c	48 83 c1 08	 add	 rcx, 8
  00040	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00045	e8 00 00 00 00	 call	 RtlSecureZeroMemory
$LN2@crypto_loa:
  0004a	8b 4c 24 20	 mov	 ecx, DWORD PTR burnc$29023[rsp]
  0004e	8b 44 24 20	 mov	 eax, DWORD PTR burnc$29023[rsp]
  00052	83 e8 01	 sub	 eax, 1
  00055	89 44 24 20	 mov	 DWORD PTR burnc$29023[rsp], eax
  00059	85 c9		 test	 ecx, ecx
  0005b	74 18		 je	 SHORT $LN1@crypto_loa
  0005d	48 8b 44 24 28	 mov	 rax, QWORD PTR burnm$29021[rsp]
  00062	c6 00 00	 mov	 BYTE PTR [rax], 0
  00065	48 8b 44 24 28	 mov	 rax, QWORD PTR burnm$29021[rsp]
  0006a	48 83 c0 01	 add	 rax, 1
  0006e	48 89 44 24 28	 mov	 QWORD PTR burnm$29021[rsp], rax
  00073	eb d5		 jmp	 SHORT $LN2@crypto_loa
$LN1@crypto_loa:
  00075	33 c0		 xor	 eax, eax
  00077	85 c0		 test	 eax, eax
  00079	75 a6		 jne	 SHORT $LN5@crypto_loa

; 774  : 	memcpy (keyInfo->userKey, lpszUserKey, nUserKeyLen);

  0007b	48 63 4c 24 60	 movsxd	 rcx, DWORD PTR nUserKeyLen$[rsp]
  00080	48 8b 7c 24 50	 mov	 rdi, QWORD PTR keyInfo$[rsp]
  00085	48 83 c7 08	 add	 rdi, 8
  00089	48 8b 74 24 58	 mov	 rsi, QWORD PTR lpszUserKey$[rsp]
  0008e	f3 a4		 rep movsb

; 775  : }

  00090	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00094	5f		 pop	 rdi
  00095	5e		 pop	 rsi
  00096	c3		 ret	 0
crypto_loadkey ENDP
_TEXT	ENDS
PUBLIC	EAIsModeSupported
;	COMDAT pdata
pdata	SEGMENT
$pdata$EAIsModeSupported DD imagerel $LN7
	DD	imagerel $LN7+77
	DD	imagerel $unwind$EAIsModeSupported
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EAIsModeSupported DD 010c01H
	DD	0620cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EAIsModeSupported
_TEXT	SEGMENT
mode$ = 32
ea$ = 64
testedMode$ = 72
EAIsModeSupported PROC					; COMDAT

; 684  : {

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 685  : 	int mode;
; 686  : 
; 687  : 	for (mode = EAGetFirstMode (ea); mode != 0; mode = EAGetNextMode (ea, mode))

  0000c	8b 4c 24 40	 mov	 ecx, DWORD PTR ea$[rsp]
  00010	e8 00 00 00 00	 call	 EAGetFirstMode
  00015	89 44 24 20	 mov	 DWORD PTR mode$[rsp], eax
  00019	eb 11		 jmp	 SHORT $LN4@EAIsModeSu
$LN3@EAIsModeSu:
  0001b	8b 54 24 20	 mov	 edx, DWORD PTR mode$[rsp]
  0001f	8b 4c 24 40	 mov	 ecx, DWORD PTR ea$[rsp]
  00023	e8 00 00 00 00	 call	 EAGetNextMode
  00028	89 44 24 20	 mov	 DWORD PTR mode$[rsp], eax
$LN4@EAIsModeSu:
  0002c	83 7c 24 20 00	 cmp	 DWORD PTR mode$[rsp], 0
  00031	74 13		 je	 SHORT $LN2@EAIsModeSu

; 688  : 	{
; 689  : 		if (mode == testedMode)

  00033	8b 44 24 48	 mov	 eax, DWORD PTR testedMode$[rsp]
  00037	39 44 24 20	 cmp	 DWORD PTR mode$[rsp], eax
  0003b	75 07		 jne	 SHORT $LN1@EAIsModeSu

; 690  : 			return TRUE;

  0003d	b8 01 00 00 00	 mov	 eax, 1
  00042	eb 04		 jmp	 SHORT $LN5@EAIsModeSu
$LN1@EAIsModeSu:

; 691  : 	}

  00044	eb d5		 jmp	 SHORT $LN3@EAIsModeSu
$LN2@EAIsModeSu:

; 692  : 	return FALSE;

  00046	33 c0		 xor	 eax, eax
$LN5@EAIsModeSu:

; 693  : }

  00048	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004c	c3		 ret	 0
EAIsModeSupported ENDP
_TEXT	ENDS
PUBLIC	CipherGetKeyScheduleSize
;	COMDAT pdata
pdata	SEGMENT
$pdata$CipherGetKeyScheduleSize DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$CipherGetKeyScheduleSize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CipherGetKeyScheduleSize DD 010801H
	DD	04208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT CipherGetKeyScheduleSize
_TEXT	SEGMENT
cipherId$ = 48
CipherGetKeyScheduleSize PROC				; COMDAT

; 340  : {

$LN3:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 341  : 	return CipherGet (cipherId) -> KeyScheduleSize;

  00008	8b 4c 24 30	 mov	 ecx, DWORD PTR cipherId$[rsp]
  0000c	e8 00 00 00 00	 call	 CipherGet
  00011	8b 40 18	 mov	 eax, DWORD PTR [rax+24]

; 342  : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
CipherGetKeyScheduleSize ENDP
_TEXT	ENDS
PUBLIC	CipherGetKeySize
;	COMDAT pdata
pdata	SEGMENT
$pdata$CipherGetKeySize DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$CipherGetKeySize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CipherGetKeySize DD 010801H
	DD	04208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT CipherGetKeySize
_TEXT	SEGMENT
cipherId$ = 48
CipherGetKeySize PROC					; COMDAT

; 335  : {

$LN3:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 336  : 	return CipherGet (cipherId) -> KeySize;

  00008	8b 4c 24 30	 mov	 ecx, DWORD PTR cipherId$[rsp]
  0000c	e8 00 00 00 00	 call	 CipherGet
  00011	8b 40 14	 mov	 eax, DWORD PTR [rax+20]

; 337  : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
CipherGetKeySize ENDP
_TEXT	ENDS
PUBLIC	CipherGetBlockSize
;	COMDAT pdata
pdata	SEGMENT
$pdata$CipherGetBlockSize DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$CipherGetBlockSize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CipherGetBlockSize DD 010801H
	DD	04208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT CipherGetBlockSize
_TEXT	SEGMENT
cipherId$ = 48
CipherGetBlockSize PROC					; COMDAT

; 330  : {

$LN3:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 331  : 	return CipherGet (cipherId) -> BlockSize;

  00008	8b 4c 24 30	 mov	 ecx, DWORD PTR cipherId$[rsp]
  0000c	e8 00 00 00 00	 call	 CipherGet
  00011	8b 40 10	 mov	 eax, DWORD PTR [rax+16]

; 332  : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
CipherGetBlockSize ENDP
_TEXT	ENDS
PUBLIC	CipherGetName
;	COMDAT pdata
pdata	SEGMENT
$pdata$CipherGetName DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$CipherGetName
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CipherGetName DD 010801H
	DD	04208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT CipherGetName
_TEXT	SEGMENT
cipherId$ = 48
CipherGetName PROC					; COMDAT

; 325  : {

$LN3:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 326  : 	return CipherGet (cipherId) -> Name;

  00008	8b 4c 24 30	 mov	 ecx, DWORD PTR cipherId$[rsp]
  0000c	e8 00 00 00 00	 call	 CipherGet
  00011	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 327  : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
CipherGetName ENDP
PUBLIC	EAGetKeyScheduleSize
;	COMDAT pdata
pdata	SEGMENT
$pdata$EAGetKeyScheduleSize DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$EAGetKeyScheduleSize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EAGetKeyScheduleSize DD 010801H
	DD	06208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EAGetKeyScheduleSize
_TEXT	SEGMENT
i$ = 32
size$ = 36
ea$ = 64
EAGetKeyScheduleSize PROC				; COMDAT

; 576  : {

$LN5:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 577  : 	int i = EAGetFirstCipher(ea);

  00008	8b 4c 24 40	 mov	 ecx, DWORD PTR ea$[rsp]
  0000c	e8 00 00 00 00	 call	 EAGetFirstCipher
  00011	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax

; 578  : 	int size = CipherGetKeyScheduleSize (i);

  00015	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  00019	e8 00 00 00 00	 call	 CipherGetKeyScheduleSize
  0001e	89 44 24 24	 mov	 DWORD PTR size$[rsp], eax
$LN2@EAGetKeySc:

; 579  : 
; 580  : 	while (i = EAGetNextCipher(ea, i))

  00022	8b 54 24 20	 mov	 edx, DWORD PTR i$[rsp]
  00026	8b 4c 24 40	 mov	 ecx, DWORD PTR ea$[rsp]
  0002a	e8 00 00 00 00	 call	 EAGetNextCipher
  0002f	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
  00033	83 7c 24 20 00	 cmp	 DWORD PTR i$[rsp], 0
  00038	74 19		 je	 SHORT $LN1@EAGetKeySc

; 581  : 	{
; 582  : 		size += CipherGetKeyScheduleSize (i);

  0003a	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  0003e	e8 00 00 00 00	 call	 CipherGetKeyScheduleSize
  00043	44 8b d8	 mov	 r11d, eax
  00046	8b 44 24 24	 mov	 eax, DWORD PTR size$[rsp]
  0004a	41 03 c3	 add	 eax, r11d
  0004d	89 44 24 24	 mov	 DWORD PTR size$[rsp], eax

; 583  : 	}

  00051	eb cf		 jmp	 SHORT $LN2@EAGetKeySc
$LN1@EAGetKeySc:

; 584  : 
; 585  : 	return size;

  00053	8b 44 24 24	 mov	 eax, DWORD PTR size$[rsp]

; 586  : }

  00057	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005b	c3		 ret	 0
EAGetKeyScheduleSize ENDP
_TEXT	ENDS
PUBLIC	EAGetKeySize
;	COMDAT pdata
pdata	SEGMENT
$pdata$EAGetKeySize DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$EAGetKeySize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EAGetKeySize DD 010801H
	DD	06208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EAGetKeySize
_TEXT	SEGMENT
i$ = 32
size$ = 36
ea$ = 64
EAGetKeySize PROC					; COMDAT

; 492  : {

$LN5:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 493  : 	int i = EAGetFirstCipher (ea);

  00008	8b 4c 24 40	 mov	 ecx, DWORD PTR ea$[rsp]
  0000c	e8 00 00 00 00	 call	 EAGetFirstCipher
  00011	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax

; 494  : 	int size = CipherGetKeySize (i);

  00015	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  00019	e8 00 00 00 00	 call	 CipherGetKeySize
  0001e	89 44 24 24	 mov	 DWORD PTR size$[rsp], eax
$LN2@EAGetKeySi:

; 495  : 
; 496  : 	while (i = EAGetNextCipher (ea, i))

  00022	8b 54 24 20	 mov	 edx, DWORD PTR i$[rsp]
  00026	8b 4c 24 40	 mov	 ecx, DWORD PTR ea$[rsp]
  0002a	e8 00 00 00 00	 call	 EAGetNextCipher
  0002f	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
  00033	83 7c 24 20 00	 cmp	 DWORD PTR i$[rsp], 0
  00038	74 19		 je	 SHORT $LN1@EAGetKeySi

; 497  : 	{
; 498  : 		size += CipherGetKeySize (i);

  0003a	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  0003e	e8 00 00 00 00	 call	 CipherGetKeySize
  00043	44 8b d8	 mov	 r11d, eax
  00046	8b 44 24 24	 mov	 eax, DWORD PTR size$[rsp]
  0004a	41 03 c3	 add	 eax, r11d
  0004d	89 44 24 24	 mov	 DWORD PTR size$[rsp], eax

; 499  : 	}

  00051	eb cf		 jmp	 SHORT $LN2@EAGetKeySi
$LN1@EAGetKeySi:

; 500  : 
; 501  : 	return size;

  00053	8b 44 24 24	 mov	 eax, DWORD PTR size$[rsp]

; 502  : }

  00057	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005b	c3		 ret	 0
EAGetKeySize ENDP
_TEXT	ENDS
PUBLIC	EAGetName
;	COMDAT pdata
pdata	SEGMENT
$pdata$EAGetName DD imagerel $LN9
	DD	imagerel $LN9+273
	DD	imagerel $unwind$EAGetName
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EAGetName DD 030f01H
	DD	0700ba20fH
	DD	0600aH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EAGetName
_TEXT	SEGMENT
i$ = 32
tv70 = 40
tv71 = 48
tv72 = 56
tv73 = 64
tv74 = 72
buf$ = 112
ea$ = 120
EAGetName PROC						; COMDAT

; 458  : {

$LN9:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	56		 push	 rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 459  : 	int i = EAGetLastCipher(ea);

  0000f	8b 4c 24 78	 mov	 ecx, DWORD PTR ea$[rsp]
  00013	e8 00 00 00 00	 call	 EAGetLastCipher
  00018	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax

; 460  : 	strcpy (buf, (i != 0) ? CipherGetName (i) : "?");

  0001c	83 7c 24 20 00	 cmp	 DWORD PTR i$[rsp], 0
  00021	74 10		 je	 SHORT $LN5@EAGetName
  00023	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  00027	e8 00 00 00 00	 call	 CipherGetName
  0002c	48 89 44 24 28	 mov	 QWORD PTR tv70[rsp], rax
  00031	eb 0c		 jmp	 SHORT $LN6@EAGetName
$LN5@EAGetName:
  00033	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@FNODOBFM@
  0003a	48 89 44 24 28	 mov	 QWORD PTR tv70[rsp], rax
$LN6@EAGetName:
  0003f	48 8b 44 24 28	 mov	 rax, QWORD PTR tv70[rsp]
  00044	48 89 44 24 30	 mov	 QWORD PTR tv71[rsp], rax
  00049	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp]
  0004e	48 89 44 24 38	 mov	 QWORD PTR tv72[rsp], rax
  00053	48 8b 44 24 38	 mov	 rax, QWORD PTR tv72[rsp]
  00058	48 89 44 24 40	 mov	 QWORD PTR tv73[rsp], rax
$LN7@EAGetName:
  0005d	48 8b 44 24 30	 mov	 rax, QWORD PTR tv71[rsp]
  00062	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00065	88 44 24 48	 mov	 BYTE PTR tv74[rsp], al
  00069	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv72[rsp]
  0006e	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv74[rsp]
  00073	88 01		 mov	 BYTE PTR [rcx], al
  00075	48 8b 44 24 30	 mov	 rax, QWORD PTR tv71[rsp]
  0007a	48 83 c0 01	 add	 rax, 1
  0007e	48 89 44 24 30	 mov	 QWORD PTR tv71[rsp], rax
  00083	48 8b 44 24 38	 mov	 rax, QWORD PTR tv72[rsp]
  00088	48 83 c0 01	 add	 rax, 1
  0008c	48 89 44 24 38	 mov	 QWORD PTR tv72[rsp], rax
  00091	80 7c 24 48 00	 cmp	 BYTE PTR tv74[rsp], 0
  00096	75 c5		 jne	 SHORT $LN7@EAGetName
$LN2@EAGetName:

; 461  : 
; 462  : 	while (i = EAGetPreviousCipher(ea, i))

  00098	8b 54 24 20	 mov	 edx, DWORD PTR i$[rsp]
  0009c	8b 4c 24 78	 mov	 ecx, DWORD PTR ea$[rsp]
  000a0	e8 00 00 00 00	 call	 EAGetPreviousCipher
  000a5	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
  000a9	83 7c 24 20 00	 cmp	 DWORD PTR i$[rsp], 0
  000ae	74 55		 je	 SHORT $LN1@EAGetName

; 463  : 	{
; 464  : 		strcat (buf, "-");

  000b0	48 8b 7c 24 70	 mov	 rdi, QWORD PTR buf$[rsp]
  000b5	33 c0		 xor	 eax, eax
  000b7	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  000be	f2 ae		 repne scasb
  000c0	48 83 ef 01	 sub	 rdi, 1
  000c4	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:??_C@_01JOAMLHOP@?9?$AA@FNODOBFM@
  000cb	b9 02 00 00 00	 mov	 ecx, 2
  000d0	f3 a4		 rep movsb

; 465  : 		strcat (buf, CipherGetName (i));

  000d2	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  000d6	e8 00 00 00 00	 call	 CipherGetName
  000db	48 8b d0	 mov	 rdx, rax
  000de	48 8b 7c 24 70	 mov	 rdi, QWORD PTR buf$[rsp]
  000e3	33 c0		 xor	 eax, eax
  000e5	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  000ec	f2 ae		 repne scasb
  000ee	48 83 ef 01	 sub	 rdi, 1
  000f2	33 c9		 xor	 ecx, ecx
$LL8@EAGetName:
  000f4	0f b6 04 0a	 movzx	 eax, BYTE PTR [rdx+rcx]
  000f8	88 04 0f	 mov	 BYTE PTR [rdi+rcx], al
  000fb	48 83 c1 01	 add	 rcx, 1
  000ff	84 c0		 test	 al, al
  00101	75 f1		 jne	 SHORT $LL8@EAGetName

; 466  : 	}

  00103	eb 93		 jmp	 SHORT $LN2@EAGetName
$LN1@EAGetName:

; 467  : 
; 468  : 	return buf;

  00105	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp]

; 469  : }

  0010a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0010e	5f		 pop	 rdi
  0010f	5e		 pop	 rsi
  00110	c3		 ret	 0
EAGetName ENDP
_TEXT	ENDS
PUBLIC	DecipherBlock
;	COMDAT pdata
pdata	SEGMENT
$pdata$DecipherBlock DD imagerel $LN15
	DD	imagerel $LN15+316
	DD	imagerel $unwind$DecipherBlock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DecipherBlock DD 011201H
	DD	08212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT DecipherBlock
_TEXT	SEGMENT
tv64 = 48
cipher$ = 80
data$ = 88
ks$ = 96
DecipherBlock PROC					; COMDAT

; 243  : {

$LN15:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 244  : 	switch (cipher)

  00012	8b 44 24 50	 mov	 eax, DWORD PTR cipher$[rsp]
  00016	89 44 24 30	 mov	 DWORD PTR tv64[rsp], eax
  0001a	8b 44 24 30	 mov	 eax, DWORD PTR tv64[rsp]
  0001e	83 e8 01	 sub	 eax, 1
  00021	89 44 24 30	 mov	 DWORD PTR tv64[rsp], eax
  00025	83 7c 24 30 05	 cmp	 DWORD PTR tv64[rsp], 5
  0002a	0f 87 d0 00 00
	00		 ja	 $LN1@DecipherBl
  00030	48 63 44 24 30	 movsxd	 rax, DWORD PTR tv64[rsp]
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0003c	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN14@DecipherBl[rcx+rax*4]
  00043	48 03 c1	 add	 rax, rcx
  00046	ff e0		 jmp	 rax
$LN9@DecipherBl:

; 245  : 	{
; 246  : 	case SERPENT:	serpent_decrypt (data, data, ks); break;

  00048	4c 8b 44 24 60	 mov	 r8, QWORD PTR ks$[rsp]
  0004d	48 8b 54 24 58	 mov	 rdx, QWORD PTR data$[rsp]
  00052	48 8b 4c 24 58	 mov	 rcx, QWORD PTR data$[rsp]
  00057	e8 00 00 00 00	 call	 serpent_decrypt
  0005c	e9 be 00 00 00	 jmp	 $LN10@DecipherBl
$LN8@DecipherBl:

; 247  : 	case TWOFISH:	twofish_decrypt (ks, data, data); break;

  00061	4c 8b 44 24 58	 mov	 r8, QWORD PTR data$[rsp]
  00066	48 8b 54 24 58	 mov	 rdx, QWORD PTR data$[rsp]
  0006b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ks$[rsp]
  00070	e8 00 00 00 00	 call	 twofish_decrypt
  00075	e9 a5 00 00 00	 jmp	 $LN10@DecipherBl
$LN7@DecipherBl:

; 248  : #ifndef TC_WINDOWS_BOOT
; 249  : 
; 250  : 	case AES:
; 251  : #if defined (_WIN64) || !defined (TC_WINDOWS_DRIVER)
; 252  : 		if (IsAesHwCpuSupported())

  0007a	e8 00 00 00 00	 call	 IsAesHwCpuSupported
  0007f	85 c0		 test	 eax, eax
  00081	74 18		 je	 SHORT $LN6@DecipherBl

; 253  : 			aes_hw_cpu_decrypt ((byte *) ks + sizeof (aes_encrypt_ctx), data);

  00083	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ks$[rsp]
  00088	48 81 c1 f4 00
	00 00		 add	 rcx, 244		; 000000f4H
  0008f	48 8b 54 24 58	 mov	 rdx, QWORD PTR data$[rsp]
  00094	e8 00 00 00 00	 call	 aes_hw_cpu_decrypt

; 254  : 		else

  00099	eb 1b		 jmp	 SHORT $LN5@DecipherBl
$LN6@DecipherBl:

; 255  : #endif
; 256  : 			aes_decrypt (data, data, (void *) ((char *) ks + sizeof(aes_encrypt_ctx)));

  0009b	4c 8b 44 24 60	 mov	 r8, QWORD PTR ks$[rsp]
  000a0	49 81 c0 f4 00
	00 00		 add	 r8, 244			; 000000f4H
  000a7	48 8b 54 24 58	 mov	 rdx, QWORD PTR data$[rsp]
  000ac	48 8b 4c 24 58	 mov	 rcx, QWORD PTR data$[rsp]
  000b1	e8 00 00 00 00	 call	 aes_decrypt
$LN5@DecipherBl:

; 257  : 		break;

  000b6	eb 67		 jmp	 SHORT $LN10@DecipherBl
$LN4@DecipherBl:

; 258  : 
; 259  : 	case BLOWFISH:	BlowfishEncryptLE (data, data, ks, 0); break;	// Deprecated/legacy

  000b8	45 33 c9	 xor	 r9d, r9d
  000bb	4c 8b 44 24 60	 mov	 r8, QWORD PTR ks$[rsp]
  000c0	48 8b 54 24 58	 mov	 rdx, QWORD PTR data$[rsp]
  000c5	48 8b 4c 24 58	 mov	 rcx, QWORD PTR data$[rsp]
  000ca	e8 00 00 00 00	 call	 BlowfishEncryptLE
  000cf	eb 4e		 jmp	 SHORT $LN10@DecipherBl
$LN3@DecipherBl:

; 260  : 	case CAST:		Cast5Decrypt (data, data, ks); break;			// Deprecated/legacy

  000d1	4c 8b 44 24 60	 mov	 r8, QWORD PTR ks$[rsp]
  000d6	48 8b 54 24 58	 mov	 rdx, QWORD PTR data$[rsp]
  000db	48 8b 4c 24 58	 mov	 rcx, QWORD PTR data$[rsp]
  000e0	e8 00 00 00 00	 call	 Cast5Decrypt
  000e5	eb 38		 jmp	 SHORT $LN10@DecipherBl
$LN2@DecipherBl:

; 261  : 	case TRIPLEDES:	TripleDesEncrypt (data, data, ks, 0); break;	// Deprecated/legacy

  000e7	45 33 c9	 xor	 r9d, r9d
  000ea	4c 8b 44 24 60	 mov	 r8, QWORD PTR ks$[rsp]
  000ef	48 8b 54 24 58	 mov	 rdx, QWORD PTR data$[rsp]
  000f4	48 8b 4c 24 58	 mov	 rcx, QWORD PTR data$[rsp]
  000f9	e8 00 00 00 00	 call	 TripleDesEncrypt
  000fe	eb 1f		 jmp	 SHORT $LN10@DecipherBl
$LN1@DecipherBl:

; 262  : #else
; 263  : 	case AES:		aes_decrypt (data, data, ks); break;
; 264  : #endif
; 265  : 	default:		TC_THROW_FATAL_EXCEPTION;	// Unknown/wrong ID

  00100	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  00109	45 33 c9	 xor	 r9d, r9d
  0010c	45 33 c0	 xor	 r8d, r8d
  0010f	ba 09 01 00 00	 mov	 edx, 265		; 00000109H
  00114	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  00119	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx
$LN10@DecipherBl:
$LN13@DecipherBl:

; 266  : 	}
; 267  : }

  0011f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00123	c3		 ret	 0
$LN14@DecipherBl:
  00124	00 00 00 00	 DD	 $LN7@DecipherBl
  00128	00 00 00 00	 DD	 $LN9@DecipherBl
  0012c	00 00 00 00	 DD	 $LN8@DecipherBl
  00130	00 00 00 00	 DD	 $LN4@DecipherBl
  00134	00 00 00 00	 DD	 $LN3@DecipherBl
  00138	00 00 00 00	 DD	 $LN2@DecipherBl
DecipherBlock ENDP
_TEXT	ENDS
PUBLIC	EncipherBlock
;	COMDAT pdata
pdata	SEGMENT
$pdata$EncipherBlock DD imagerel $LN15
	DD	imagerel $LN15+308
	DD	imagerel $unwind$EncipherBlock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EncipherBlock DD 011201H
	DD	08212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EncipherBlock
_TEXT	SEGMENT
tv64 = 48
cipher$ = 80
data$ = 88
ks$ = 96
EncipherBlock PROC					; COMDAT

; 176  : {

$LN15:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 177  : 	switch (cipher)

  00012	8b 44 24 50	 mov	 eax, DWORD PTR cipher$[rsp]
  00016	89 44 24 30	 mov	 DWORD PTR tv64[rsp], eax
  0001a	8b 44 24 30	 mov	 eax, DWORD PTR tv64[rsp]
  0001e	83 e8 01	 sub	 eax, 1
  00021	89 44 24 30	 mov	 DWORD PTR tv64[rsp], eax
  00025	83 7c 24 30 05	 cmp	 DWORD PTR tv64[rsp], 5
  0002a	0f 87 c8 00 00
	00		 ja	 $LN1@EncipherBl
  00030	48 63 44 24 30	 movsxd	 rax, DWORD PTR tv64[rsp]
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0003c	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN14@EncipherBl[rcx+rax*4]
  00043	48 03 c1	 add	 rax, rcx
  00046	ff e0		 jmp	 rax
$LN9@EncipherBl:

; 178  : 	{
; 179  : 	case AES:	
; 180  : 		// In 32-bit kernel mode, due to KeSaveFloatingPointState() overhead, AES instructions can be used only when processing the whole data unit.
; 181  : #if (defined (_WIN64) || !defined (TC_WINDOWS_DRIVER)) && !defined (TC_WINDOWS_BOOT)
; 182  : 		if (IsAesHwCpuSupported())

  00048	e8 00 00 00 00	 call	 IsAesHwCpuSupported
  0004d	85 c0		 test	 eax, eax
  0004f	74 11		 je	 SHORT $LN8@EncipherBl

; 183  : 			aes_hw_cpu_encrypt (ks, data);

  00051	48 8b 54 24 58	 mov	 rdx, QWORD PTR data$[rsp]
  00056	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ks$[rsp]
  0005b	e8 00 00 00 00	 call	 aes_hw_cpu_encrypt

; 184  : 		else

  00060	eb 14		 jmp	 SHORT $LN7@EncipherBl
$LN8@EncipherBl:

; 185  : #endif
; 186  : 			aes_encrypt (data, data, ks);

  00062	4c 8b 44 24 60	 mov	 r8, QWORD PTR ks$[rsp]
  00067	48 8b 54 24 58	 mov	 rdx, QWORD PTR data$[rsp]
  0006c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR data$[rsp]
  00071	e8 00 00 00 00	 call	 aes_encrypt
$LN7@EncipherBl:

; 187  : 		break;

  00076	e9 9c 00 00 00	 jmp	 $LN10@EncipherBl
$LN6@EncipherBl:

; 188  : 
; 189  : 	case TWOFISH:		twofish_encrypt (ks, data, data); break;

  0007b	4c 8b 44 24 58	 mov	 r8, QWORD PTR data$[rsp]
  00080	48 8b 54 24 58	 mov	 rdx, QWORD PTR data$[rsp]
  00085	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ks$[rsp]
  0008a	e8 00 00 00 00	 call	 twofish_encrypt
  0008f	e9 83 00 00 00	 jmp	 $LN10@EncipherBl
$LN5@EncipherBl:

; 190  : 	case SERPENT:		serpent_encrypt (data, data, ks); break;

  00094	4c 8b 44 24 60	 mov	 r8, QWORD PTR ks$[rsp]
  00099	48 8b 54 24 58	 mov	 rdx, QWORD PTR data$[rsp]
  0009e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR data$[rsp]
  000a3	e8 00 00 00 00	 call	 serpent_encrypt
  000a8	eb 6d		 jmp	 SHORT $LN10@EncipherBl
$LN4@EncipherBl:

; 191  : #ifndef TC_WINDOWS_BOOT
; 192  : 	case BLOWFISH:		BlowfishEncryptLE (data, data, ks, 1); break;	// Deprecated/legacy

  000aa	41 b9 01 00 00
	00		 mov	 r9d, 1
  000b0	4c 8b 44 24 60	 mov	 r8, QWORD PTR ks$[rsp]
  000b5	48 8b 54 24 58	 mov	 rdx, QWORD PTR data$[rsp]
  000ba	48 8b 4c 24 58	 mov	 rcx, QWORD PTR data$[rsp]
  000bf	e8 00 00 00 00	 call	 BlowfishEncryptLE
  000c4	eb 51		 jmp	 SHORT $LN10@EncipherBl
$LN3@EncipherBl:

; 193  : 	case CAST:			Cast5Encrypt (data, data, ks); break;			// Deprecated/legacy

  000c6	4c 8b 44 24 60	 mov	 r8, QWORD PTR ks$[rsp]
  000cb	48 8b 54 24 58	 mov	 rdx, QWORD PTR data$[rsp]
  000d0	48 8b 4c 24 58	 mov	 rcx, QWORD PTR data$[rsp]
  000d5	e8 00 00 00 00	 call	 Cast5Encrypt
  000da	eb 3b		 jmp	 SHORT $LN10@EncipherBl
$LN2@EncipherBl:

; 194  : 	case TRIPLEDES:		TripleDesEncrypt (data, data, ks, 1); break;	// Deprecated/legacy

  000dc	41 b9 01 00 00
	00		 mov	 r9d, 1
  000e2	4c 8b 44 24 60	 mov	 r8, QWORD PTR ks$[rsp]
  000e7	48 8b 54 24 58	 mov	 rdx, QWORD PTR data$[rsp]
  000ec	48 8b 4c 24 58	 mov	 rcx, QWORD PTR data$[rsp]
  000f1	e8 00 00 00 00	 call	 TripleDesEncrypt
  000f6	eb 1f		 jmp	 SHORT $LN10@EncipherBl
$LN1@EncipherBl:

; 195  : #endif
; 196  : 	default:			TC_THROW_FATAL_EXCEPTION;	// Unknown/wrong ID

  000f8	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  00101	45 33 c9	 xor	 r9d, r9d
  00104	45 33 c0	 xor	 r8d, r8d
  00107	ba c4 00 00 00	 mov	 edx, 196		; 000000c4H
  0010c	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  00111	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx
$LN10@EncipherBl:
$LN13@EncipherBl:

; 197  : 	}
; 198  : }

  00117	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0011b	c3		 ret	 0
$LN14@EncipherBl:
  0011c	00 00 00 00	 DD	 $LN9@EncipherBl
  00120	00 00 00 00	 DD	 $LN5@EncipherBl
  00124	00 00 00 00	 DD	 $LN6@EncipherBl
  00128	00 00 00 00	 DD	 $LN4@EncipherBl
  0012c	00 00 00 00	 DD	 $LN3@EncipherBl
  00130	00 00 00 00	 DD	 $LN2@EncipherBl
EncipherBlock ENDP
_TEXT	ENDS
PUBLIC	CipherInit
;	COMDAT pdata
pdata	SEGMENT
$pdata$CipherInit DD imagerel $LN17
	DD	imagerel $LN17+480
	DD	imagerel $unwind$CipherInit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CipherInit DD 011201H
	DD	06212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT CipherInit
_TEXT	SEGMENT
retVal$ = 32
tv64 = 36
cipher$ = 64
key$ = 72
ks$ = 80
CipherInit PROC						; COMDAT

; 115  : {

$LN17:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 116  : 	int retVal = ERR_SUCCESS;

  00012	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR retVal$[rsp], 0

; 117  : 
; 118  : 	switch (cipher)

  0001a	8b 44 24 40	 mov	 eax, DWORD PTR cipher$[rsp]
  0001e	89 44 24 24	 mov	 DWORD PTR tv64[rsp], eax
  00022	8b 44 24 24	 mov	 eax, DWORD PTR tv64[rsp]
  00026	83 e8 01	 sub	 eax, 1
  00029	89 44 24 24	 mov	 DWORD PTR tv64[rsp], eax
  0002d	83 7c 24 24 05	 cmp	 DWORD PTR tv64[rsp], 5
  00032	0f 87 7e 01 00
	00		 ja	 $LN1@CipherInit
  00038	48 63 44 24 24	 movsxd	 rax, DWORD PTR tv64[rsp]
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00044	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN16@CipherInit[rcx+rax*4]
  0004b	48 03 c1	 add	 rax, rcx
  0004e	ff e0		 jmp	 rax
$LN11@CipherInit:

; 119  : 	{
; 120  : 	case AES:
; 121  : #ifndef TC_WINDOWS_BOOT
; 122  : 		if (aes_encrypt_key256 (key, (aes_encrypt_ctx *) ks) != EXIT_SUCCESS)

  00050	48 8b 54 24 50	 mov	 rdx, QWORD PTR ks$[rsp]
  00055	48 8b 4c 24 48	 mov	 rcx, QWORD PTR key$[rsp]
  0005a	e8 00 00 00 00	 call	 aes_encrypt_key256
  0005f	85 c0		 test	 eax, eax
  00061	74 0a		 je	 SHORT $LN10@CipherInit

; 123  : 			return ERR_CIPHER_INIT_FAILURE;

  00063	b8 11 00 00 00	 mov	 eax, 17
  00068	e9 54 01 00 00	 jmp	 $LN14@CipherInit
$LN10@CipherInit:

; 124  : 
; 125  : 		if (aes_decrypt_key256 (key, (aes_decrypt_ctx *) (ks + sizeof(aes_encrypt_ctx))) != EXIT_SUCCESS)

  0006d	48 8b 54 24 50	 mov	 rdx, QWORD PTR ks$[rsp]
  00072	48 81 c2 f4 00
	00 00		 add	 rdx, 244		; 000000f4H
  00079	48 8b 4c 24 48	 mov	 rcx, QWORD PTR key$[rsp]
  0007e	e8 00 00 00 00	 call	 aes_decrypt_key256
  00083	85 c0		 test	 eax, eax
  00085	74 0a		 je	 SHORT $LN9@CipherInit

; 126  : 			return ERR_CIPHER_INIT_FAILURE;

  00087	b8 11 00 00 00	 mov	 eax, 17
  0008c	e9 30 01 00 00	 jmp	 $LN14@CipherInit
$LN9@CipherInit:

; 127  : #else
; 128  : 		if (aes_set_key (key, (length_type) CipherGetKeySize(AES), (aes_context *) ks) != 0)
; 129  : 			return ERR_CIPHER_INIT_FAILURE;
; 130  : #endif
; 131  : 		break;

  00091	e9 27 01 00 00	 jmp	 $LN12@CipherInit
$LN8@CipherInit:

; 132  : 
; 133  : 	case SERPENT:
; 134  : 		serpent_set_key (key, CipherGetKeySize(SERPENT) * 8, ks);

  00096	b9 02 00 00 00	 mov	 ecx, 2
  0009b	e8 00 00 00 00	 call	 CipherGetKeySize
  000a0	8b d0		 mov	 edx, eax
  000a2	c1 e2 03	 shl	 edx, 3
  000a5	4c 8b 44 24 50	 mov	 r8, QWORD PTR ks$[rsp]
  000aa	48 8b 4c 24 48	 mov	 rcx, QWORD PTR key$[rsp]
  000af	e8 00 00 00 00	 call	 serpent_set_key

; 135  : 		break;

  000b4	e9 04 01 00 00	 jmp	 $LN12@CipherInit
$LN7@CipherInit:

; 136  : 		
; 137  : 	case TWOFISH:
; 138  : 		twofish_set_key ((TwofishInstance *)ks, (const u4byte *)key, CipherGetKeySize(TWOFISH) * 8);

  000b9	b9 03 00 00 00	 mov	 ecx, 3
  000be	e8 00 00 00 00	 call	 CipherGetKeySize
  000c3	44 8b c0	 mov	 r8d, eax
  000c6	41 c1 e0 03	 shl	 r8d, 3
  000ca	48 8b 54 24 48	 mov	 rdx, QWORD PTR key$[rsp]
  000cf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ks$[rsp]
  000d4	e8 00 00 00 00	 call	 twofish_set_key

; 139  : 		break;

  000d9	e9 df 00 00 00	 jmp	 $LN12@CipherInit
$LN6@CipherInit:

; 140  : 
; 141  : #ifndef TC_WINDOWS_BOOT
; 142  : 		
; 143  : 	case BLOWFISH:
; 144  : 		/* Deprecated/legacy */
; 145  : 		BlowfishSetKey ((BF_KEY *)ks, CipherGetKeySize(BLOWFISH), key);

  000de	b9 04 00 00 00	 mov	 ecx, 4
  000e3	e8 00 00 00 00	 call	 CipherGetKeySize
  000e8	4c 8b 44 24 48	 mov	 r8, QWORD PTR key$[rsp]
  000ed	8b d0		 mov	 edx, eax
  000ef	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ks$[rsp]
  000f4	e8 00 00 00 00	 call	 BlowfishSetKey

; 146  : 		break;

  000f9	e9 bf 00 00 00	 jmp	 $LN12@CipherInit
$LN5@CipherInit:

; 147  : 
; 148  : 	case CAST:
; 149  : 		/* Deprecated/legacy */
; 150  : 		Cast5SetKey ((CAST_KEY *) ks, CipherGetKeySize(CAST), key);

  000fe	b9 05 00 00 00	 mov	 ecx, 5
  00103	e8 00 00 00 00	 call	 CipherGetKeySize
  00108	4c 8b 44 24 48	 mov	 r8, QWORD PTR key$[rsp]
  0010d	8b d0		 mov	 edx, eax
  0010f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ks$[rsp]
  00114	e8 00 00 00 00	 call	 Cast5SetKey

; 151  : 		break;

  00119	e9 9f 00 00 00	 jmp	 $LN12@CipherInit
$LN4@CipherInit:

; 152  : 
; 153  : 	case TRIPLEDES:
; 154  : 		/* Deprecated/legacy */
; 155  : 		TripleDesSetKey (key, CipherGetKeySize (TRIPLEDES), (TDES_KEY *) ks);

  0011e	b9 06 00 00 00	 mov	 ecx, 6
  00123	e8 00 00 00 00	 call	 CipherGetKeySize
  00128	4c 8b 44 24 50	 mov	 r8, QWORD PTR ks$[rsp]
  0012d	8b d0		 mov	 edx, eax
  0012f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR key$[rsp]
  00134	e8 00 00 00 00	 call	 TripleDesSetKey

; 156  : 
; 157  : 		// Verify whether all three DES keys are mutually different
; 158  : 		if (((*((__int64 *) key) ^ *((__int64 *) key+1)) & 0xFEFEFEFEFEFEFEFEULL) == 0
; 159  : 		|| ((*((__int64 *) key+1) ^ *((__int64 *) key+2)) & 0xFEFEFEFEFEFEFEFEULL) == 0
; 160  : 		|| ((*((__int64 *) key) ^ *((__int64 *) key+2)) & 0xFEFEFEFEFEFEFEFEULL) == 0)

  00139	48 8b 44 24 48	 mov	 rax, QWORD PTR key$[rsp]
  0013e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR key$[rsp]
  00143	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00147	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0014a	48 33 c1	 xor	 rax, rcx
  0014d	48 b9 fe fe fe
	fe fe fe fe fe	 mov	 rcx, -72340172838076674	; fefefefefefefefeH
  00157	48 23 c1	 and	 rax, rcx
  0015a	48 85 c0	 test	 rax, rax
  0015d	74 4d		 je	 SHORT $LN2@CipherInit
  0015f	48 8b 44 24 48	 mov	 rax, QWORD PTR key$[rsp]
  00164	48 8b 4c 24 48	 mov	 rcx, QWORD PTR key$[rsp]
  00169	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0016d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00171	48 33 c1	 xor	 rax, rcx
  00174	48 b9 fe fe fe
	fe fe fe fe fe	 mov	 rcx, -72340172838076674	; fefefefefefefefeH
  0017e	48 23 c1	 and	 rax, rcx
  00181	48 85 c0	 test	 rax, rax
  00184	74 26		 je	 SHORT $LN2@CipherInit
  00186	48 8b 44 24 48	 mov	 rax, QWORD PTR key$[rsp]
  0018b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR key$[rsp]
  00190	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00194	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00197	48 33 c1	 xor	 rax, rcx
  0019a	48 b9 fe fe fe
	fe fe fe fe fe	 mov	 rcx, -72340172838076674	; fefefefefefefefeH
  001a4	48 23 c1	 and	 rax, rcx
  001a7	48 85 c0	 test	 rax, rax
  001aa	75 08		 jne	 SHORT $LN3@CipherInit
$LN2@CipherInit:

; 161  : 			retVal = ERR_CIPHER_INIT_WEAK_KEY;		// Non-fatal error

  001ac	c7 44 24 20 12
	00 00 00	 mov	 DWORD PTR retVal$[rsp], 18
$LN3@CipherInit:

; 162  : 
; 163  : 		break;

  001b4	eb 07		 jmp	 SHORT $LN12@CipherInit
$LN1@CipherInit:

; 164  : 
; 165  : #endif	// TC_WINDOWS_BOOT
; 166  : 
; 167  : 	default:
; 168  : 		// Unknown/wrong cipher ID
; 169  : 		return ERR_CIPHER_INIT_FAILURE;

  001b6	b8 11 00 00 00	 mov	 eax, 17
  001bb	eb 04		 jmp	 SHORT $LN14@CipherInit
$LN12@CipherInit:

; 170  : 	}
; 171  : 
; 172  : 	return retVal;

  001bd	8b 44 24 20	 mov	 eax, DWORD PTR retVal$[rsp]
$LN14@CipherInit:

; 173  : }

  001c1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001c5	c3		 ret	 0
  001c6	66 90		 npad	 2
$LN16@CipherInit:
  001c8	00 00 00 00	 DD	 $LN11@CipherInit
  001cc	00 00 00 00	 DD	 $LN8@CipherInit
  001d0	00 00 00 00	 DD	 $LN7@CipherInit
  001d4	00 00 00 00	 DD	 $LN6@CipherInit
  001d8	00 00 00 00	 DD	 $LN5@CipherInit
  001dc	00 00 00 00	 DD	 $LN4@CipherInit
CipherInit ENDP
;	COMDAT pdata
pdata	SEGMENT
$pdata$DecryptBufferCBC DD imagerel DecryptBufferCBC
	DD	imagerel DecryptBufferCBC+767
	DD	imagerel $unwind$DecryptBufferCBC
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DecryptBufferCBC DD 011701H
	DD	0c217H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT DecryptBufferCBC
_TEXT	SEGMENT
ct$ = 48
i$ = 64
bufIV$ = 72
blockSize$ = 88
tv68 = 92
data$ = 112
len$ = 120
ks$ = 128
iv$ = 136
whitening$ = 144
ea$ = 152
cipher$ = 160
DecryptBufferCBC PROC					; COMDAT

; 1161 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1162 : 
; 1163 : 	/* IMPORTANT: This function has been deprecated (legacy) */
; 1164 : 
; 1165 : 	unsigned __int32 bufIV[4];
; 1166 : 	unsigned __int64 i;
; 1167 : 	unsigned __int32 ct[4];
; 1168 : 	int blockSize = CipherGetBlockSize (ea != 0 ? EAGetFirstCipher (ea) : cipher);

  00017	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR ea$[rsp], 0
  0001f	74 12		 je	 SHORT $LN16@DecryptBuf@2
  00021	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR ea$[rsp]
  00028	e8 00 00 00 00	 call	 EAGetFirstCipher
  0002d	89 44 24 5c	 mov	 DWORD PTR tv68[rsp], eax
  00031	eb 0b		 jmp	 SHORT $LN17@DecryptBuf@2
$LN16@DecryptBuf@2:
  00033	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR cipher$[rsp]
  0003a	89 44 24 5c	 mov	 DWORD PTR tv68[rsp], eax
$LN17@DecryptBuf@2:
  0003e	8b 4c 24 5c	 mov	 ecx, DWORD PTR tv68[rsp]
  00042	e8 00 00 00 00	 call	 CipherGetBlockSize
  00047	89 44 24 58	 mov	 DWORD PTR blockSize$[rsp], eax

; 1169 : 
; 1170 : 	if (len % blockSize)

  0004b	33 d2		 xor	 edx, edx
  0004d	8b 44 24 78	 mov	 eax, DWORD PTR len$[rsp]
  00051	f7 74 24 58	 div	 DWORD PTR blockSize$[rsp]
  00055	85 d2		 test	 edx, edx
  00057	74 1f		 je	 SHORT $LN13@DecryptBuf@2

; 1171 : 		TC_THROW_FATAL_EXCEPTION;

  00059	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  00062	45 33 c9	 xor	 r9d, r9d
  00065	45 33 c0	 xor	 r8d, r8d
  00068	ba 93 04 00 00	 mov	 edx, 1171		; 00000493H
  0006d	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  00072	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx
$LN13@DecryptBuf@2:

; 1172 : 
; 1173 : 	//  IV
; 1174 : 	bufIV[0] = iv[0];

  00078	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR iv$[rsp]
  00080	8b 00		 mov	 eax, DWORD PTR [rax]
  00082	89 44 24 48	 mov	 DWORD PTR bufIV$[rsp], eax

; 1175 : 	bufIV[1] = iv[1];

  00086	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR iv$[rsp]
  0008e	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00091	89 44 24 4c	 mov	 DWORD PTR bufIV$[rsp+4], eax

; 1176 : 	if (blockSize == 16)

  00095	83 7c 24 58 10	 cmp	 DWORD PTR blockSize$[rsp], 16
  0009a	75 1e		 jne	 SHORT $LN12@DecryptBuf@2

; 1177 : 	{
; 1178 : 		bufIV[2] = iv[2];

  0009c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR iv$[rsp]
  000a4	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  000a7	89 44 24 50	 mov	 DWORD PTR bufIV$[rsp+8], eax

; 1179 : 		bufIV[3] = iv[3];

  000ab	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR iv$[rsp]
  000b3	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  000b6	89 44 24 54	 mov	 DWORD PTR bufIV$[rsp+12], eax
$LN12@DecryptBuf@2:

; 1180 : 	}
; 1181 : 
; 1182 : 	// Decrypt each block
; 1183 : 	for (i = 0; i < len/blockSize; i++)

  000ba	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000c3	eb 0e		 jmp	 SHORT $LN11@DecryptBuf@2
$LN10@DecryptBuf@2:
  000c5	48 8b 44 24 40	 mov	 rax, QWORD PTR i$[rsp]
  000ca	48 83 c0 01	 add	 rax, 1
  000ce	48 89 44 24 40	 mov	 QWORD PTR i$[rsp], rax
$LN11@DecryptBuf@2:
  000d3	33 d2		 xor	 edx, edx
  000d5	8b 44 24 78	 mov	 eax, DWORD PTR len$[rsp]
  000d9	f7 74 24 58	 div	 DWORD PTR blockSize$[rsp]
  000dd	8b c0		 mov	 eax, eax
  000df	48 39 44 24 40	 cmp	 QWORD PTR i$[rsp], rax
  000e4	0f 83 10 02 00
	00		 jae	 $LN9@DecryptBuf@2

; 1184 : 	{
; 1185 : 		// Dewhitening
; 1186 : 		data[0] ^= whitening[0];

  000ea	48 8b 4c 24 70	 mov	 rcx, QWORD PTR data$[rsp]
  000ef	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR whitening$[rsp]
  000f7	8b 00		 mov	 eax, DWORD PTR [rax]
  000f9	8b 09		 mov	 ecx, DWORD PTR [rcx]
  000fb	33 c8		 xor	 ecx, eax
  000fd	48 8b 44 24 70	 mov	 rax, QWORD PTR data$[rsp]
  00102	89 08		 mov	 DWORD PTR [rax], ecx

; 1187 : 		data[1] ^= whitening[1];

  00104	48 8b 4c 24 70	 mov	 rcx, QWORD PTR data$[rsp]
  00109	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR whitening$[rsp]
  00111	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00114	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00117	33 c8		 xor	 ecx, eax
  00119	48 8b 44 24 70	 mov	 rax, QWORD PTR data$[rsp]
  0011e	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 1188 : 		if (blockSize == 16)

  00121	83 7c 24 58 10	 cmp	 DWORD PTR blockSize$[rsp], 16
  00126	75 39		 jne	 SHORT $LN8@DecryptBuf@2

; 1189 : 		{
; 1190 : 			data[2] ^= whitening[0];

  00128	48 8b 4c 24 70	 mov	 rcx, QWORD PTR data$[rsp]
  0012d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR whitening$[rsp]
  00135	8b 00		 mov	 eax, DWORD PTR [rax]
  00137	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  0013a	33 c8		 xor	 ecx, eax
  0013c	48 8b 44 24 70	 mov	 rax, QWORD PTR data$[rsp]
  00141	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 1191 : 			data[3] ^= whitening[1];

  00144	48 8b 4c 24 70	 mov	 rcx, QWORD PTR data$[rsp]
  00149	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR whitening$[rsp]
  00151	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00154	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00157	33 c8		 xor	 ecx, eax
  00159	48 8b 44 24 70	 mov	 rax, QWORD PTR data$[rsp]
  0015e	89 48 0c	 mov	 DWORD PTR [rax+12], ecx
$LN8@DecryptBuf@2:

; 1192 : 		}
; 1193 : 
; 1194 : 		// CBC
; 1195 : 		ct[0] = data[0];

  00161	48 8b 44 24 70	 mov	 rax, QWORD PTR data$[rsp]
  00166	8b 00		 mov	 eax, DWORD PTR [rax]
  00168	89 44 24 30	 mov	 DWORD PTR ct$[rsp], eax

; 1196 : 		ct[1] = data[1];

  0016c	48 8b 44 24 70	 mov	 rax, QWORD PTR data$[rsp]
  00171	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00174	89 44 24 34	 mov	 DWORD PTR ct$[rsp+4], eax

; 1197 : 		if (blockSize == 16)

  00178	83 7c 24 58 10	 cmp	 DWORD PTR blockSize$[rsp], 16
  0017d	75 18		 jne	 SHORT $LN7@DecryptBuf@2

; 1198 : 		{
; 1199 : 			ct[2] = data[2];

  0017f	48 8b 44 24 70	 mov	 rax, QWORD PTR data$[rsp]
  00184	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00187	89 44 24 38	 mov	 DWORD PTR ct$[rsp+8], eax

; 1200 : 			ct[3] = data[3];

  0018b	48 8b 44 24 70	 mov	 rax, QWORD PTR data$[rsp]
  00190	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00193	89 44 24 3c	 mov	 DWORD PTR ct$[rsp+12], eax
$LN7@DecryptBuf@2:

; 1201 : 		}
; 1202 : 
; 1203 : 		if (ea != 0)

  00197	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR ea$[rsp], 0
  0019f	0f 84 9a 00 00
	00		 je	 $LN6@DecryptBuf@2

; 1204 : 		{
; 1205 : 			// Outer-CBC
; 1206 : 			ks += EAGetKeyScheduleSize (ea);

  001a5	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR ea$[rsp]
  001ac	e8 00 00 00 00	 call	 EAGetKeyScheduleSize
  001b1	48 63 c8	 movsxd	 rcx, eax
  001b4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  001bc	48 03 c1	 add	 rax, rcx
  001bf	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR ks$[rsp], rax

; 1207 : 			for (cipher = EAGetLastCipher (ea); cipher != 0; cipher = EAGetPreviousCipher (ea, cipher))

  001c7	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR ea$[rsp]
  001ce	e8 00 00 00 00	 call	 EAGetLastCipher
  001d3	89 84 24 a0 00
	00 00		 mov	 DWORD PTR cipher$[rsp], eax
  001da	eb 1a		 jmp	 SHORT $LN5@DecryptBuf@2
$LN4@DecryptBuf@2:
  001dc	8b 94 24 a0 00
	00 00		 mov	 edx, DWORD PTR cipher$[rsp]
  001e3	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR ea$[rsp]
  001ea	e8 00 00 00 00	 call	 EAGetPreviousCipher
  001ef	89 84 24 a0 00
	00 00		 mov	 DWORD PTR cipher$[rsp], eax
$LN5@DecryptBuf@2:
  001f6	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR cipher$[rsp], 0
  001fe	74 3d		 je	 SHORT $LN3@DecryptBuf@2

; 1208 : 			{
; 1209 : 				ks -= CipherGetKeyScheduleSize (cipher);

  00200	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR cipher$[rsp]
  00207	e8 00 00 00 00	 call	 CipherGetKeyScheduleSize
  0020c	48 63 c8	 movsxd	 rcx, eax
  0020f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  00217	48 2b c1	 sub	 rax, rcx
  0021a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR ks$[rsp], rax

; 1210 : 				DecipherBlock (cipher, data, ks);

  00222	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR ks$[rsp]
  0022a	48 8b 54 24 70	 mov	 rdx, QWORD PTR data$[rsp]
  0022f	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR cipher$[rsp]
  00236	e8 00 00 00 00	 call	 DecipherBlock

; 1211 : 			}

  0023b	eb 9f		 jmp	 SHORT $LN4@DecryptBuf@2
$LN3@DecryptBuf@2:

; 1212 : 		}
; 1213 : 		else

  0023d	eb 19		 jmp	 SHORT $LN2@DecryptBuf@2
$LN6@DecryptBuf@2:

; 1214 : 		{
; 1215 : 			// CBC/inner-CBC
; 1216 : 			DecipherBlock (cipher, data, ks);

  0023f	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR ks$[rsp]
  00247	48 8b 54 24 70	 mov	 rdx, QWORD PTR data$[rsp]
  0024c	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR cipher$[rsp]
  00253	e8 00 00 00 00	 call	 DecipherBlock
$LN2@DecryptBuf@2:

; 1217 : 		}
; 1218 : 
; 1219 : 		// CBC
; 1220 : 		data[0] ^= bufIV[0];

  00258	48 8b 4c 24 70	 mov	 rcx, QWORD PTR data$[rsp]
  0025d	8b 44 24 48	 mov	 eax, DWORD PTR bufIV$[rsp]
  00261	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00263	33 c8		 xor	 ecx, eax
  00265	48 8b 44 24 70	 mov	 rax, QWORD PTR data$[rsp]
  0026a	89 08		 mov	 DWORD PTR [rax], ecx

; 1221 : 		data[1] ^= bufIV[1];

  0026c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR data$[rsp]
  00271	8b 44 24 4c	 mov	 eax, DWORD PTR bufIV$[rsp+4]
  00275	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00278	33 c8		 xor	 ecx, eax
  0027a	48 8b 44 24 70	 mov	 rax, QWORD PTR data$[rsp]
  0027f	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 1222 : 		bufIV[0] = ct[0];

  00282	8b 44 24 30	 mov	 eax, DWORD PTR ct$[rsp]
  00286	89 44 24 48	 mov	 DWORD PTR bufIV$[rsp], eax

; 1223 : 		bufIV[1] = ct[1];

  0028a	8b 44 24 34	 mov	 eax, DWORD PTR ct$[rsp+4]
  0028e	89 44 24 4c	 mov	 DWORD PTR bufIV$[rsp+4], eax

; 1224 : 		if (blockSize == 16)

  00292	83 7c 24 58 10	 cmp	 DWORD PTR blockSize$[rsp], 16
  00297	75 3c		 jne	 SHORT $LN1@DecryptBuf@2

; 1225 : 		{
; 1226 : 			data[2] ^= bufIV[2];

  00299	48 8b 4c 24 70	 mov	 rcx, QWORD PTR data$[rsp]
  0029e	8b 44 24 50	 mov	 eax, DWORD PTR bufIV$[rsp+8]
  002a2	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  002a5	33 c8		 xor	 ecx, eax
  002a7	48 8b 44 24 70	 mov	 rax, QWORD PTR data$[rsp]
  002ac	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 1227 : 			data[3] ^= bufIV[3];

  002af	48 8b 4c 24 70	 mov	 rcx, QWORD PTR data$[rsp]
  002b4	8b 44 24 54	 mov	 eax, DWORD PTR bufIV$[rsp+12]
  002b8	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  002bb	33 c8		 xor	 ecx, eax
  002bd	48 8b 44 24 70	 mov	 rax, QWORD PTR data$[rsp]
  002c2	89 48 0c	 mov	 DWORD PTR [rax+12], ecx

; 1228 : 			bufIV[2] = ct[2];

  002c5	8b 44 24 38	 mov	 eax, DWORD PTR ct$[rsp+8]
  002c9	89 44 24 50	 mov	 DWORD PTR bufIV$[rsp+8], eax

; 1229 : 			bufIV[3] = ct[3];

  002cd	8b 44 24 3c	 mov	 eax, DWORD PTR ct$[rsp+12]
  002d1	89 44 24 54	 mov	 DWORD PTR bufIV$[rsp+12], eax
$LN1@DecryptBuf@2:

; 1230 : 		}
; 1231 : 
; 1232 : 		data += blockSize / sizeof(*data);

  002d5	48 63 44 24 58	 movsxd	 rax, DWORD PTR blockSize$[rsp]
  002da	33 d2		 xor	 edx, edx
  002dc	b9 04 00 00 00	 mov	 ecx, 4
  002e1	48 f7 f1	 div	 rcx
  002e4	48 8b c8	 mov	 rcx, rax
  002e7	48 8b 44 24 70	 mov	 rax, QWORD PTR data$[rsp]
  002ec	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  002f0	48 89 44 24 70	 mov	 QWORD PTR data$[rsp], rax

; 1233 : 	}

  002f5	e9 cb fd ff ff	 jmp	 $LN10@DecryptBuf@2
$LN9@DecryptBuf@2:
$LN15@DecryptBuf@2:

; 1234 : }

  002fa	48 83 c4 68	 add	 rsp, 104		; 00000068H
  002fe	c3		 ret	 0
DecryptBufferCBC ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$EncryptBufferCBC DD imagerel EncryptBufferCBC
	DD	imagerel EncryptBufferCBC+705
	DD	imagerel $unwind$EncryptBufferCBC
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EncryptBufferCBC DD 011701H
	DD	0a217H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EncryptBufferCBC
_TEXT	SEGMENT
i$ = 48
bufIV$ = 56
blockSize$ = 72
tv68 = 76
data$ = 96
len$ = 104
ks$ = 112
iv$ = 120
whitening$ = 128
ea$ = 136
cipher$ = 144
EncryptBufferCBC PROC					; COMDAT

; 1073 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1074 : 	/* IMPORTANT: This function has been deprecated (legacy) */
; 1075 : 
; 1076 : 	unsigned __int32 bufIV[4];
; 1077 : 	unsigned __int64 i;
; 1078 : 	int blockSize = CipherGetBlockSize (ea != 0 ? EAGetFirstCipher (ea) : cipher);

  00017	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR ea$[rsp], 0
  0001f	74 12		 je	 SHORT $LN16@EncryptBuf@2
  00021	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR ea$[rsp]
  00028	e8 00 00 00 00	 call	 EAGetFirstCipher
  0002d	89 44 24 4c	 mov	 DWORD PTR tv68[rsp], eax
  00031	eb 0b		 jmp	 SHORT $LN17@EncryptBuf@2
$LN16@EncryptBuf@2:
  00033	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR cipher$[rsp]
  0003a	89 44 24 4c	 mov	 DWORD PTR tv68[rsp], eax
$LN17@EncryptBuf@2:
  0003e	8b 4c 24 4c	 mov	 ecx, DWORD PTR tv68[rsp]
  00042	e8 00 00 00 00	 call	 CipherGetBlockSize
  00047	89 44 24 48	 mov	 DWORD PTR blockSize$[rsp], eax

; 1079 : 
; 1080 : 	if (len % blockSize)

  0004b	33 d2		 xor	 edx, edx
  0004d	8b 44 24 68	 mov	 eax, DWORD PTR len$[rsp]
  00051	f7 74 24 48	 div	 DWORD PTR blockSize$[rsp]
  00055	85 d2		 test	 edx, edx
  00057	74 1f		 je	 SHORT $LN13@EncryptBuf@2

; 1081 : 		TC_THROW_FATAL_EXCEPTION;

  00059	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  00062	45 33 c9	 xor	 r9d, r9d
  00065	45 33 c0	 xor	 r8d, r8d
  00068	ba 39 04 00 00	 mov	 edx, 1081		; 00000439H
  0006d	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  00072	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx
$LN13@EncryptBuf@2:

; 1082 : 
; 1083 : 	//  IV
; 1084 : 	bufIV[0] = iv[0];

  00078	48 8b 44 24 78	 mov	 rax, QWORD PTR iv$[rsp]
  0007d	8b 00		 mov	 eax, DWORD PTR [rax]
  0007f	89 44 24 38	 mov	 DWORD PTR bufIV$[rsp], eax

; 1085 : 	bufIV[1] = iv[1];

  00083	48 8b 44 24 78	 mov	 rax, QWORD PTR iv$[rsp]
  00088	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0008b	89 44 24 3c	 mov	 DWORD PTR bufIV$[rsp+4], eax

; 1086 : 	if (blockSize == 16)

  0008f	83 7c 24 48 10	 cmp	 DWORD PTR blockSize$[rsp], 16
  00094	75 18		 jne	 SHORT $LN12@EncryptBuf@2

; 1087 : 	{
; 1088 : 		bufIV[2] = iv[2];

  00096	48 8b 44 24 78	 mov	 rax, QWORD PTR iv$[rsp]
  0009b	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0009e	89 44 24 40	 mov	 DWORD PTR bufIV$[rsp+8], eax

; 1089 : 		bufIV[3] = iv[3];

  000a2	48 8b 44 24 78	 mov	 rax, QWORD PTR iv$[rsp]
  000a7	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  000aa	89 44 24 44	 mov	 DWORD PTR bufIV$[rsp+12], eax
$LN12@EncryptBuf@2:

; 1090 : 	}
; 1091 : 
; 1092 : 	// Encrypt each block
; 1093 : 	for (i = 0; i < len/blockSize; i++)

  000ae	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000b7	eb 0e		 jmp	 SHORT $LN11@EncryptBuf@2
$LN10@EncryptBuf@2:
  000b9	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  000be	48 83 c0 01	 add	 rax, 1
  000c2	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN11@EncryptBuf@2:
  000c7	33 d2		 xor	 edx, edx
  000c9	8b 44 24 68	 mov	 eax, DWORD PTR len$[rsp]
  000cd	f7 74 24 48	 div	 DWORD PTR blockSize$[rsp]
  000d1	8b c0		 mov	 eax, eax
  000d3	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  000d8	0f 83 de 01 00
	00		 jae	 $LN9@EncryptBuf@2

; 1094 : 	{
; 1095 : 		// CBC
; 1096 : 		data[0] ^= bufIV[0];

  000de	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  000e3	8b 44 24 38	 mov	 eax, DWORD PTR bufIV$[rsp]
  000e7	8b 09		 mov	 ecx, DWORD PTR [rcx]
  000e9	33 c8		 xor	 ecx, eax
  000eb	48 8b 44 24 60	 mov	 rax, QWORD PTR data$[rsp]
  000f0	89 08		 mov	 DWORD PTR [rax], ecx

; 1097 : 		data[1] ^= bufIV[1];

  000f2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  000f7	8b 44 24 3c	 mov	 eax, DWORD PTR bufIV$[rsp+4]
  000fb	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  000fe	33 c8		 xor	 ecx, eax
  00100	48 8b 44 24 60	 mov	 rax, QWORD PTR data$[rsp]
  00105	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 1098 : 		if (blockSize == 16)

  00108	83 7c 24 48 10	 cmp	 DWORD PTR blockSize$[rsp], 16
  0010d	75 2c		 jne	 SHORT $LN8@EncryptBuf@2

; 1099 : 		{
; 1100 : 			data[2] ^= bufIV[2];

  0010f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  00114	8b 44 24 40	 mov	 eax, DWORD PTR bufIV$[rsp+8]
  00118	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  0011b	33 c8		 xor	 ecx, eax
  0011d	48 8b 44 24 60	 mov	 rax, QWORD PTR data$[rsp]
  00122	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 1101 : 			data[3] ^= bufIV[3];

  00125	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  0012a	8b 44 24 44	 mov	 eax, DWORD PTR bufIV$[rsp+12]
  0012e	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00131	33 c8		 xor	 ecx, eax
  00133	48 8b 44 24 60	 mov	 rax, QWORD PTR data$[rsp]
  00138	89 48 0c	 mov	 DWORD PTR [rax+12], ecx
$LN8@EncryptBuf@2:

; 1102 : 		}
; 1103 : 
; 1104 : 		if (ea != 0)

  0013b	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR ea$[rsp], 0
  00143	0f 84 8b 00 00
	00		 je	 $LN7@EncryptBuf@2

; 1105 : 		{
; 1106 : 			// Outer-CBC
; 1107 : 			for (cipher = EAGetFirstCipher (ea); cipher != 0; cipher = EAGetNextCipher (ea, cipher))

  00149	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR ea$[rsp]
  00150	e8 00 00 00 00	 call	 EAGetFirstCipher
  00155	89 84 24 90 00
	00 00		 mov	 DWORD PTR cipher$[rsp], eax
  0015c	eb 1a		 jmp	 SHORT $LN6@EncryptBuf@2
$LN5@EncryptBuf@2:
  0015e	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR cipher$[rsp]
  00165	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR ea$[rsp]
  0016c	e8 00 00 00 00	 call	 EAGetNextCipher
  00171	89 84 24 90 00
	00 00		 mov	 DWORD PTR cipher$[rsp], eax
$LN6@EncryptBuf@2:
  00178	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR cipher$[rsp], 0
  00180	74 34		 je	 SHORT $LN4@EncryptBuf@2

; 1108 : 			{
; 1109 : 				EncipherBlock (cipher, data, ks);

  00182	4c 8b 44 24 70	 mov	 r8, QWORD PTR ks$[rsp]
  00187	48 8b 54 24 60	 mov	 rdx, QWORD PTR data$[rsp]
  0018c	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR cipher$[rsp]
  00193	e8 00 00 00 00	 call	 EncipherBlock

; 1110 : 				ks += CipherGetKeyScheduleSize (cipher);

  00198	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR cipher$[rsp]
  0019f	e8 00 00 00 00	 call	 CipherGetKeyScheduleSize
  001a4	48 63 c8	 movsxd	 rcx, eax
  001a7	48 8b 44 24 70	 mov	 rax, QWORD PTR ks$[rsp]
  001ac	48 03 c1	 add	 rax, rcx
  001af	48 89 44 24 70	 mov	 QWORD PTR ks$[rsp], rax

; 1111 : 			}

  001b4	eb a8		 jmp	 SHORT $LN5@EncryptBuf@2
$LN4@EncryptBuf@2:

; 1112 : 			ks -= EAGetKeyScheduleSize (ea);

  001b6	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR ea$[rsp]
  001bd	e8 00 00 00 00	 call	 EAGetKeyScheduleSize
  001c2	48 63 c8	 movsxd	 rcx, eax
  001c5	48 8b 44 24 70	 mov	 rax, QWORD PTR ks$[rsp]
  001ca	48 2b c1	 sub	 rax, rcx
  001cd	48 89 44 24 70	 mov	 QWORD PTR ks$[rsp], rax

; 1113 : 		}
; 1114 : 		else

  001d2	eb 16		 jmp	 SHORT $LN3@EncryptBuf@2
$LN7@EncryptBuf@2:

; 1115 : 		{
; 1116 : 			// CBC/inner-CBC
; 1117 : 			EncipherBlock (cipher, data, ks);

  001d4	4c 8b 44 24 70	 mov	 r8, QWORD PTR ks$[rsp]
  001d9	48 8b 54 24 60	 mov	 rdx, QWORD PTR data$[rsp]
  001de	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR cipher$[rsp]
  001e5	e8 00 00 00 00	 call	 EncipherBlock
$LN3@EncryptBuf@2:

; 1118 : 		}
; 1119 : 
; 1120 : 		// CBC
; 1121 : 		bufIV[0] = data[0];

  001ea	48 8b 44 24 60	 mov	 rax, QWORD PTR data$[rsp]
  001ef	8b 00		 mov	 eax, DWORD PTR [rax]
  001f1	89 44 24 38	 mov	 DWORD PTR bufIV$[rsp], eax

; 1122 : 		bufIV[1] = data[1];

  001f5	48 8b 44 24 60	 mov	 rax, QWORD PTR data$[rsp]
  001fa	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  001fd	89 44 24 3c	 mov	 DWORD PTR bufIV$[rsp+4], eax

; 1123 : 		if (blockSize == 16)

  00201	83 7c 24 48 10	 cmp	 DWORD PTR blockSize$[rsp], 16
  00206	75 18		 jne	 SHORT $LN2@EncryptBuf@2

; 1124 : 		{
; 1125 : 			bufIV[2] = data[2];

  00208	48 8b 44 24 60	 mov	 rax, QWORD PTR data$[rsp]
  0020d	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00210	89 44 24 40	 mov	 DWORD PTR bufIV$[rsp+8], eax

; 1126 : 			bufIV[3] = data[3];

  00214	48 8b 44 24 60	 mov	 rax, QWORD PTR data$[rsp]
  00219	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  0021c	89 44 24 44	 mov	 DWORD PTR bufIV$[rsp+12], eax
$LN2@EncryptBuf@2:

; 1127 : 		}
; 1128 : 
; 1129 : 		// Whitening
; 1130 : 		data[0] ^= whitening[0];

  00220	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  00225	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR whitening$[rsp]
  0022d	8b 00		 mov	 eax, DWORD PTR [rax]
  0022f	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00231	33 c8		 xor	 ecx, eax
  00233	48 8b 44 24 60	 mov	 rax, QWORD PTR data$[rsp]
  00238	89 08		 mov	 DWORD PTR [rax], ecx

; 1131 : 		data[1] ^= whitening[1];

  0023a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  0023f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR whitening$[rsp]
  00247	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0024a	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  0024d	33 c8		 xor	 ecx, eax
  0024f	48 8b 44 24 60	 mov	 rax, QWORD PTR data$[rsp]
  00254	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 1132 : 		if (blockSize == 16)

  00257	83 7c 24 48 10	 cmp	 DWORD PTR blockSize$[rsp], 16
  0025c	75 39		 jne	 SHORT $LN1@EncryptBuf@2

; 1133 : 		{
; 1134 : 			data[2] ^= whitening[0];

  0025e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  00263	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR whitening$[rsp]
  0026b	8b 00		 mov	 eax, DWORD PTR [rax]
  0026d	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00270	33 c8		 xor	 ecx, eax
  00272	48 8b 44 24 60	 mov	 rax, QWORD PTR data$[rsp]
  00277	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 1135 : 			data[3] ^= whitening[1];

  0027a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  0027f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR whitening$[rsp]
  00287	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0028a	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  0028d	33 c8		 xor	 ecx, eax
  0028f	48 8b 44 24 60	 mov	 rax, QWORD PTR data$[rsp]
  00294	89 48 0c	 mov	 DWORD PTR [rax+12], ecx
$LN1@EncryptBuf@2:

; 1136 : 		}
; 1137 : 
; 1138 : 		data += blockSize / sizeof(*data);

  00297	48 63 44 24 48	 movsxd	 rax, DWORD PTR blockSize$[rsp]
  0029c	33 d2		 xor	 edx, edx
  0029e	b9 04 00 00 00	 mov	 ecx, 4
  002a3	48 f7 f1	 div	 rcx
  002a6	48 8b c8	 mov	 rcx, rax
  002a9	48 8b 44 24 60	 mov	 rax, QWORD PTR data$[rsp]
  002ae	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  002b2	48 89 44 24 60	 mov	 QWORD PTR data$[rsp], rax

; 1139 : 	}

  002b7	e9 fd fd ff ff	 jmp	 $LN10@EncryptBuf@2
$LN9@EncryptBuf@2:
$LN15@EncryptBuf@2:

; 1140 : }

  002bc	48 83 c4 58	 add	 rsp, 88			; 00000058H
  002c0	c3		 ret	 0
EncryptBufferCBC ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	DecryptBufferLRW64
;	COMDAT pdata
pdata	SEGMENT
$pdata$DecryptBufferLRW64 DD imagerel $LN14
	DD	imagerel $LN14+453
	DD	imagerel $unwind$DecryptBufferLRW64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DecryptBufferLRW64 DD 022a19H
	DD	011011bH
	DD	imagerel __GSHandlerCheck
	DD	070H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT DecryptBufferLRW64
_TEXT	SEGMENT
p$ = 48
i$ = 64
b$ = 72
ks$ = 80
t$ = 88
cipher$ = 96
burnc$29215 = 100
burnm$29213 = 104
__$ArrayPad$ = 112
buffer$ = 144
length$ = 152
blockIndex$ = 160
cryptoInfo$ = 168
DecryptBufferLRW64 PROC					; COMDAT

; 966  : {

$LN14:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 44 24 70	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 967  : 	/* Deprecated/legacy */
; 968  : 
; 969  : 	int cipher = EAGetFirstCipher (cryptoInfo->ea);

  0002a	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00032	8b 08		 mov	 ecx, DWORD PTR [rax]
  00034	e8 00 00 00 00	 call	 EAGetFirstCipher
  00039	89 44 24 60	 mov	 DWORD PTR cipher$[rsp], eax

; 970  : 	unsigned __int8 *p = buffer;

  0003d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  00045	48 89 44 24 30	 mov	 QWORD PTR p$[rsp], rax

; 971  : 	unsigned __int8 *ks = cryptoInfo->ks;

  0004a	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00052	48 83 c0 08	 add	 rax, 8
  00056	48 89 44 24 50	 mov	 QWORD PTR ks$[rsp], rax

; 972  : 	unsigned __int8 i[8];
; 973  : 	unsigned __int8 t[8];
; 974  : 	unsigned __int64 b;
; 975  : 
; 976  : 	*(unsigned __int64 *)i = BE64(blockIndex);

  0005b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR blockIndex$[rsp]
  00063	e8 00 00 00 00	 call	 MirrorBytes64
  00068	48 89 44 24 40	 mov	 QWORD PTR i$[rsp], rax

; 977  : 
; 978  : 	if (length % 8)

  0006d	33 d2		 xor	 edx, edx
  0006f	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR length$[rsp]
  00077	b9 08 00 00 00	 mov	 ecx, 8
  0007c	48 f7 f1	 div	 rcx
  0007f	48 85 d2	 test	 rdx, rdx
  00082	74 1f		 je	 SHORT $LN11@DecryptBuf@3

; 979  : 		TC_THROW_FATAL_EXCEPTION;

  00084	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  0008d	45 33 c9	 xor	 r9d, r9d
  00090	45 33 c0	 xor	 r8d, r8d
  00093	ba d3 03 00 00	 mov	 edx, 979		; 000003d3H
  00098	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  0009d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx
$LN11@DecryptBuf@3:

; 980  : 
; 981  : 	for (b = 0; b < length >> 3; b++)

  000a3	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR b$[rsp], 0
  000ac	eb 0e		 jmp	 SHORT $LN10@DecryptBuf@3
$LN9@DecryptBuf@3:
  000ae	48 8b 44 24 48	 mov	 rax, QWORD PTR b$[rsp]
  000b3	48 83 c0 01	 add	 rax, 1
  000b7	48 89 44 24 48	 mov	 QWORD PTR b$[rsp], rax
$LN10@DecryptBuf@3:
  000bc	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR length$[rsp]
  000c4	48 c1 e8 03	 shr	 rax, 3
  000c8	48 39 44 24 48	 cmp	 QWORD PTR b$[rsp], rax
  000cd	0f 83 96 00 00
	00		 jae	 $LN8@DecryptBuf@3

; 982  : 	{
; 983  : 		Gf64MulTab (i, t, &cryptoInfo->gf_ctx);

  000d3	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR cryptoInfo$[rsp]
  000db	49 81 c0 a8 29
	00 00		 add	 r8, 10664		; 000029a8H
  000e2	48 8d 54 24 58	 lea	 rdx, QWORD PTR t$[rsp]
  000e7	48 8d 4c 24 40	 lea	 rcx, QWORD PTR i$[rsp]
  000ec	e8 00 00 00 00	 call	 Gf64MulTab

; 984  : 		Xor64 ((unsigned __int64 *)p, (unsigned __int64 *)t);

  000f1	48 8d 54 24 58	 lea	 rdx, QWORD PTR t$[rsp]
  000f6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR p$[rsp]
  000fb	e8 00 00 00 00	 call	 Xor64

; 985  : 
; 986  : 		DecipherBlock (cipher, p, ks);

  00100	4c 8b 44 24 50	 mov	 r8, QWORD PTR ks$[rsp]
  00105	48 8b 54 24 30	 mov	 rdx, QWORD PTR p$[rsp]
  0010a	8b 4c 24 60	 mov	 ecx, DWORD PTR cipher$[rsp]
  0010e	e8 00 00 00 00	 call	 DecipherBlock

; 987  : 
; 988  : 		Xor64 ((unsigned __int64 *)p, (unsigned __int64 *)t);

  00113	48 8d 54 24 58	 lea	 rdx, QWORD PTR t$[rsp]
  00118	48 8b 4c 24 30	 mov	 rcx, QWORD PTR p$[rsp]
  0011d	e8 00 00 00 00	 call	 Xor64

; 989  : 
; 990  : 		p += 8;

  00122	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  00127	48 83 c0 08	 add	 rax, 8
  0012b	48 89 44 24 30	 mov	 QWORD PTR p$[rsp], rax

; 991  : 
; 992  : 		if (i[7] != 0xff)

  00130	0f b6 44 24 47	 movzx	 eax, BYTE PTR i$[rsp+7]
  00135	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0013a	74 0d		 je	 SHORT $LN7@DecryptBuf@3

; 993  : 			i[7]++;

  0013c	0f b6 44 24 47	 movzx	 eax, BYTE PTR i$[rsp+7]
  00141	04 01		 add	 al, 1
  00143	88 44 24 47	 mov	 BYTE PTR i$[rsp+7], al

; 994  : 		else

  00147	eb 1b		 jmp	 SHORT $LN6@DecryptBuf@3
$LN7@DecryptBuf@3:

; 995  : 			*(unsigned __int64 *)i = BE64 ( BE64(*(unsigned __int64 *)i) + 1 );

  00149	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  0014e	e8 00 00 00 00	 call	 MirrorBytes64
  00153	48 8b c8	 mov	 rcx, rax
  00156	48 83 c1 01	 add	 rcx, 1
  0015a	e8 00 00 00 00	 call	 MirrorBytes64
  0015f	48 89 44 24 40	 mov	 QWORD PTR i$[rsp], rax
$LN6@DecryptBuf@3:

; 996  : 	}

  00164	e9 45 ff ff ff	 jmp	 $LN9@DecryptBuf@3
$LN8@DecryptBuf@3:
$LN5@DecryptBuf@3:

; 997  : 
; 998  : 	FAST_ERASE64 (t, sizeof(t));

  00169	48 8d 44 24 58	 lea	 rax, QWORD PTR t$[rsp]
  0016e	48 89 44 24 68	 mov	 QWORD PTR burnm$29213[rsp], rax
  00173	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR burnc$29215[rsp], 1
$LN2@DecryptBuf@3:
  0017b	8b 4c 24 64	 mov	 ecx, DWORD PTR burnc$29215[rsp]
  0017f	8b 44 24 64	 mov	 eax, DWORD PTR burnc$29215[rsp]
  00183	83 e8 01	 sub	 eax, 1
  00186	89 44 24 64	 mov	 DWORD PTR burnc$29215[rsp], eax
  0018a	85 c9		 test	 ecx, ecx
  0018c	74 1c		 je	 SHORT $LN1@DecryptBuf@3
  0018e	48 8b 44 24 68	 mov	 rax, QWORD PTR burnm$29213[rsp]
  00193	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  0019a	48 8b 44 24 68	 mov	 rax, QWORD PTR burnm$29213[rsp]
  0019f	48 83 c0 08	 add	 rax, 8
  001a3	48 89 44 24 68	 mov	 QWORD PTR burnm$29213[rsp], rax
  001a8	eb d1		 jmp	 SHORT $LN2@DecryptBuf@3
$LN1@DecryptBuf@3:
  001aa	33 c0		 xor	 eax, eax
  001ac	85 c0		 test	 eax, eax
  001ae	75 b9		 jne	 SHORT $LN5@DecryptBuf@3
$LN13@DecryptBuf@3:

; 999  : }

  001b0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001b5	48 33 cc	 xor	 rcx, rsp
  001b8	e8 00 00 00 00	 call	 __security_check_cookie
  001bd	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  001c4	c3		 ret	 0
DecryptBufferLRW64 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	DecryptBufferLRW128
;	COMDAT pdata
pdata	SEGMENT
$pdata$DecryptBufferLRW128 DD imagerel $LN19
	DD	imagerel $LN19+624
	DD	imagerel $unwind$DecryptBufferLRW128
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DecryptBufferLRW128 DD 022d19H
	DD	013011bH
	DD	imagerel __GSHandlerCheck
	DD	080H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT DecryptBufferLRW128
_TEXT	SEGMENT
p$ = 48
i$ = 64
b$ = 72
ks$ = 80
t$ = 88
cipherCount$ = 104
cipher$ = 108
burnc$29177 = 112
burnm$29175 = 120
__$ArrayPad$ = 128
buffer$ = 160
length$ = 168
blockIndex$ = 176
cryptoInfo$ = 184
DecryptBufferLRW128 PROC				; COMDAT

; 909  : {

$LN19:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 910  : 	/* Deprecated/legacy */
; 911  : 
; 912  : 	int cipher = EAGetFirstCipher (cryptoInfo->ea);

  0002d	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00035	8b 08		 mov	 ecx, DWORD PTR [rax]
  00037	e8 00 00 00 00	 call	 EAGetFirstCipher
  0003c	89 44 24 6c	 mov	 DWORD PTR cipher$[rsp], eax

; 913  : 	int cipherCount = EAGetCipherCount (cryptoInfo->ea);

  00040	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00048	8b 08		 mov	 ecx, DWORD PTR [rax]
  0004a	e8 00 00 00 00	 call	 EAGetCipherCount
  0004f	89 44 24 68	 mov	 DWORD PTR cipherCount$[rsp], eax

; 914  : 	unsigned __int8 *p = buffer;

  00053	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  0005b	48 89 44 24 30	 mov	 QWORD PTR p$[rsp], rax

; 915  : 	unsigned __int8 *ks = cryptoInfo->ks;

  00060	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00068	48 83 c0 08	 add	 rax, 8
  0006c	48 89 44 24 50	 mov	 QWORD PTR ks$[rsp], rax

; 916  : 	unsigned __int8 i[8];
; 917  : 	unsigned __int8 t[16];
; 918  : 	unsigned __int64 b;
; 919  : 
; 920  : 	*(unsigned __int64 *)i = BE64(blockIndex);

  00071	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR blockIndex$[rsp]
  00079	e8 00 00 00 00	 call	 MirrorBytes64
  0007e	48 89 44 24 40	 mov	 QWORD PTR i$[rsp], rax

; 921  : 
; 922  : 	if (length % 16)

  00083	33 d2		 xor	 edx, edx
  00085	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR length$[rsp]
  0008d	b9 10 00 00 00	 mov	 ecx, 16
  00092	48 f7 f1	 div	 rcx
  00095	48 85 d2	 test	 rdx, rdx
  00098	74 1f		 je	 SHORT $LN16@DecryptBuf@4

; 923  : 		TC_THROW_FATAL_EXCEPTION;

  0009a	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  000a3	45 33 c9	 xor	 r9d, r9d
  000a6	45 33 c0	 xor	 r8d, r8d
  000a9	ba 9b 03 00 00	 mov	 edx, 923		; 0000039bH
  000ae	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx
$LN16@DecryptBuf@4:

; 924  : 
; 925  : 	// Note that the maximum supported volume size is 8589934592 GB  (i.e., 2^63 bytes).
; 926  : 
; 927  : 	for (b = 0; b < length >> 4; b++)

  000b9	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR b$[rsp], 0
  000c2	eb 0e		 jmp	 SHORT $LN15@DecryptBuf@4
$LN14@DecryptBuf@4:
  000c4	48 8b 44 24 48	 mov	 rax, QWORD PTR b$[rsp]
  000c9	48 83 c0 01	 add	 rax, 1
  000cd	48 89 44 24 48	 mov	 QWORD PTR b$[rsp], rax
$LN15@DecryptBuf@4:
  000d2	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR length$[rsp]
  000da	48 c1 e8 04	 shr	 rax, 4
  000de	48 39 44 24 48	 cmp	 QWORD PTR b$[rsp], rax
  000e3	0f 83 28 01 00
	00		 jae	 $LN13@DecryptBuf@4

; 928  : 	{
; 929  : 		Gf128MulBy64Tab (i, t, &cryptoInfo->gf_ctx);

  000e9	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR cryptoInfo$[rsp]
  000f1	49 81 c0 a8 29
	00 00		 add	 r8, 10664		; 000029a8H
  000f8	48 8d 54 24 58	 lea	 rdx, QWORD PTR t$[rsp]
  000fd	48 8d 4c 24 40	 lea	 rcx, QWORD PTR i$[rsp]
  00102	e8 00 00 00 00	 call	 Gf128MulBy64Tab

; 930  : 		Xor128 ((unsigned __int64 *)p, (unsigned __int64 *)t);

  00107	48 8d 54 24 58	 lea	 rdx, QWORD PTR t$[rsp]
  0010c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR p$[rsp]
  00111	e8 00 00 00 00	 call	 Xor128

; 931  : 
; 932  : 		if (cipherCount > 1)

  00116	83 7c 24 68 01	 cmp	 DWORD PTR cipherCount$[rsp], 1
  0011b	0f 8e 87 00 00
	00		 jle	 $LN12@DecryptBuf@4

; 933  : 		{
; 934  : 			// Cipher cascade
; 935  : 			ks = cryptoInfo->ks + EAGetKeyScheduleSize (cryptoInfo->ea);

  00121	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00129	8b 08		 mov	 ecx, DWORD PTR [rax]
  0012b	e8 00 00 00 00	 call	 EAGetKeyScheduleSize
  00130	48 63 c8	 movsxd	 rcx, eax
  00133	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  0013b	48 8d 44 08 08	 lea	 rax, QWORD PTR [rax+rcx+8]
  00140	48 89 44 24 50	 mov	 QWORD PTR ks$[rsp], rax

; 936  : 
; 937  : 			for (cipher = EAGetLastCipher (cryptoInfo->ea);
; 938  : 				cipher != 0;
; 939  : 				cipher = EAGetPreviousCipher (cryptoInfo->ea, cipher))

  00145	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  0014d	8b 08		 mov	 ecx, DWORD PTR [rax]
  0014f	e8 00 00 00 00	 call	 EAGetLastCipher
  00154	89 44 24 6c	 mov	 DWORD PTR cipher$[rsp], eax
  00158	eb 17		 jmp	 SHORT $LN11@DecryptBuf@4
$LN10@DecryptBuf@4:
  0015a	8b 54 24 6c	 mov	 edx, DWORD PTR cipher$[rsp]
  0015e	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00166	8b 08		 mov	 ecx, DWORD PTR [rax]
  00168	e8 00 00 00 00	 call	 EAGetPreviousCipher
  0016d	89 44 24 6c	 mov	 DWORD PTR cipher$[rsp], eax
$LN11@DecryptBuf@4:
  00171	83 7c 24 6c 00	 cmp	 DWORD PTR cipher$[rsp], 0
  00176	74 2e		 je	 SHORT $LN9@DecryptBuf@4

; 940  : 			{
; 941  : 				ks -= CipherGetKeyScheduleSize (cipher);

  00178	8b 4c 24 6c	 mov	 ecx, DWORD PTR cipher$[rsp]
  0017c	e8 00 00 00 00	 call	 CipherGetKeyScheduleSize
  00181	48 63 c8	 movsxd	 rcx, eax
  00184	48 8b 44 24 50	 mov	 rax, QWORD PTR ks$[rsp]
  00189	48 2b c1	 sub	 rax, rcx
  0018c	48 89 44 24 50	 mov	 QWORD PTR ks$[rsp], rax

; 942  : 				DecipherBlock (cipher, p, ks);

  00191	4c 8b 44 24 50	 mov	 r8, QWORD PTR ks$[rsp]
  00196	48 8b 54 24 30	 mov	 rdx, QWORD PTR p$[rsp]
  0019b	8b 4c 24 6c	 mov	 ecx, DWORD PTR cipher$[rsp]
  0019f	e8 00 00 00 00	 call	 DecipherBlock

; 943  : 			}

  001a4	eb b4		 jmp	 SHORT $LN10@DecryptBuf@4
$LN9@DecryptBuf@4:

; 944  : 		}
; 945  : 		else

  001a6	eb 13		 jmp	 SHORT $LN8@DecryptBuf@4
$LN12@DecryptBuf@4:

; 946  : 		{
; 947  : 			DecipherBlock (cipher, p, ks);

  001a8	4c 8b 44 24 50	 mov	 r8, QWORD PTR ks$[rsp]
  001ad	48 8b 54 24 30	 mov	 rdx, QWORD PTR p$[rsp]
  001b2	8b 4c 24 6c	 mov	 ecx, DWORD PTR cipher$[rsp]
  001b6	e8 00 00 00 00	 call	 DecipherBlock
$LN8@DecryptBuf@4:

; 948  : 		}
; 949  : 
; 950  : 		Xor128 ((unsigned __int64 *)p, (unsigned __int64 *)t);

  001bb	48 8d 54 24 58	 lea	 rdx, QWORD PTR t$[rsp]
  001c0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR p$[rsp]
  001c5	e8 00 00 00 00	 call	 Xor128

; 951  : 
; 952  : 		p += 16;

  001ca	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  001cf	48 83 c0 10	 add	 rax, 16
  001d3	48 89 44 24 30	 mov	 QWORD PTR p$[rsp], rax

; 953  : 
; 954  : 		if (i[7] != 0xff)

  001d8	0f b6 44 24 47	 movzx	 eax, BYTE PTR i$[rsp+7]
  001dd	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  001e2	74 0d		 je	 SHORT $LN7@DecryptBuf@4

; 955  : 			i[7]++;

  001e4	0f b6 44 24 47	 movzx	 eax, BYTE PTR i$[rsp+7]
  001e9	04 01		 add	 al, 1
  001eb	88 44 24 47	 mov	 BYTE PTR i$[rsp+7], al

; 956  : 		else

  001ef	eb 1b		 jmp	 SHORT $LN6@DecryptBuf@4
$LN7@DecryptBuf@4:

; 957  : 			*(unsigned __int64 *)i = BE64 ( BE64(*(unsigned __int64 *)i) + 1 );

  001f1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  001f6	e8 00 00 00 00	 call	 MirrorBytes64
  001fb	48 8b c8	 mov	 rcx, rax
  001fe	48 83 c1 01	 add	 rcx, 1
  00202	e8 00 00 00 00	 call	 MirrorBytes64
  00207	48 89 44 24 40	 mov	 QWORD PTR i$[rsp], rax
$LN6@DecryptBuf@4:

; 958  : 	}

  0020c	e9 b3 fe ff ff	 jmp	 $LN14@DecryptBuf@4
$LN13@DecryptBuf@4:
$LN5@DecryptBuf@4:

; 959  : 
; 960  : 	FAST_ERASE64 (t, sizeof(t));

  00211	48 8d 44 24 58	 lea	 rax, QWORD PTR t$[rsp]
  00216	48 89 44 24 78	 mov	 QWORD PTR burnm$29175[rsp], rax
  0021b	c7 44 24 70 02
	00 00 00	 mov	 DWORD PTR burnc$29177[rsp], 2
$LN2@DecryptBuf@4:
  00223	8b 4c 24 70	 mov	 ecx, DWORD PTR burnc$29177[rsp]
  00227	8b 44 24 70	 mov	 eax, DWORD PTR burnc$29177[rsp]
  0022b	83 e8 01	 sub	 eax, 1
  0022e	89 44 24 70	 mov	 DWORD PTR burnc$29177[rsp], eax
  00232	85 c9		 test	 ecx, ecx
  00234	74 1c		 je	 SHORT $LN1@DecryptBuf@4
  00236	48 8b 44 24 78	 mov	 rax, QWORD PTR burnm$29175[rsp]
  0023b	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00242	48 8b 44 24 78	 mov	 rax, QWORD PTR burnm$29175[rsp]
  00247	48 83 c0 08	 add	 rax, 8
  0024b	48 89 44 24 78	 mov	 QWORD PTR burnm$29175[rsp], rax
  00250	eb d1		 jmp	 SHORT $LN2@DecryptBuf@4
$LN1@DecryptBuf@4:
  00252	33 c0		 xor	 eax, eax
  00254	85 c0		 test	 eax, eax
  00256	75 b9		 jne	 SHORT $LN5@DecryptBuf@4
$LN18@DecryptBuf@4:

; 961  : }

  00258	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00260	48 33 cc	 xor	 rcx, rsp
  00263	e8 00 00 00 00	 call	 __security_check_cookie
  00268	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0026f	c3		 ret	 0
DecryptBufferLRW128 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	EncryptBufferLRW64
;	COMDAT pdata
pdata	SEGMENT
$pdata$EncryptBufferLRW64 DD imagerel $LN14
	DD	imagerel $LN14+453
	DD	imagerel $unwind$EncryptBufferLRW64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EncryptBufferLRW64 DD 022a19H
	DD	011011bH
	DD	imagerel __GSHandlerCheck
	DD	070H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EncryptBufferLRW64
_TEXT	SEGMENT
p$ = 48
i$ = 64
b$ = 72
ks$ = 80
t$ = 88
cipher$ = 96
burnc$29133 = 100
burnm$29131 = 104
__$ArrayPad$ = 112
buffer$ = 144
length$ = 152
blockIndex$ = 160
cryptoInfo$ = 168
EncryptBufferLRW64 PROC					; COMDAT

; 872  : {

$LN14:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 44 24 70	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 873  : 	/* Deprecated/legacy */
; 874  : 
; 875  : 	int cipher = EAGetFirstCipher (cryptoInfo->ea);

  0002a	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00032	8b 08		 mov	 ecx, DWORD PTR [rax]
  00034	e8 00 00 00 00	 call	 EAGetFirstCipher
  00039	89 44 24 60	 mov	 DWORD PTR cipher$[rsp], eax

; 876  : 	unsigned __int8 *p = buffer;

  0003d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  00045	48 89 44 24 30	 mov	 QWORD PTR p$[rsp], rax

; 877  : 	unsigned __int8 *ks = cryptoInfo->ks;

  0004a	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00052	48 83 c0 08	 add	 rax, 8
  00056	48 89 44 24 50	 mov	 QWORD PTR ks$[rsp], rax

; 878  : 	unsigned __int8 i[8];
; 879  : 	unsigned __int8 t[8];
; 880  : 	unsigned __int64 b;
; 881  : 
; 882  : 	*(unsigned __int64 *)i = BE64(blockIndex);

  0005b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR blockIndex$[rsp]
  00063	e8 00 00 00 00	 call	 MirrorBytes64
  00068	48 89 44 24 40	 mov	 QWORD PTR i$[rsp], rax

; 883  : 
; 884  : 	if (length % 8)

  0006d	33 d2		 xor	 edx, edx
  0006f	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR length$[rsp]
  00077	b9 08 00 00 00	 mov	 ecx, 8
  0007c	48 f7 f1	 div	 rcx
  0007f	48 85 d2	 test	 rdx, rdx
  00082	74 1f		 je	 SHORT $LN11@EncryptBuf@3

; 885  : 		TC_THROW_FATAL_EXCEPTION;

  00084	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  0008d	45 33 c9	 xor	 r9d, r9d
  00090	45 33 c0	 xor	 r8d, r8d
  00093	ba 75 03 00 00	 mov	 edx, 885		; 00000375H
  00098	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  0009d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx
$LN11@EncryptBuf@3:

; 886  : 
; 887  : 	for (b = 0; b < length >> 3; b++)

  000a3	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR b$[rsp], 0
  000ac	eb 0e		 jmp	 SHORT $LN10@EncryptBuf@3
$LN9@EncryptBuf@3:
  000ae	48 8b 44 24 48	 mov	 rax, QWORD PTR b$[rsp]
  000b3	48 83 c0 01	 add	 rax, 1
  000b7	48 89 44 24 48	 mov	 QWORD PTR b$[rsp], rax
$LN10@EncryptBuf@3:
  000bc	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR length$[rsp]
  000c4	48 c1 e8 03	 shr	 rax, 3
  000c8	48 39 44 24 48	 cmp	 QWORD PTR b$[rsp], rax
  000cd	0f 83 96 00 00
	00		 jae	 $LN8@EncryptBuf@3

; 888  : 	{
; 889  : 		Gf64MulTab (i, t, &cryptoInfo->gf_ctx);

  000d3	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR cryptoInfo$[rsp]
  000db	49 81 c0 a8 29
	00 00		 add	 r8, 10664		; 000029a8H
  000e2	48 8d 54 24 58	 lea	 rdx, QWORD PTR t$[rsp]
  000e7	48 8d 4c 24 40	 lea	 rcx, QWORD PTR i$[rsp]
  000ec	e8 00 00 00 00	 call	 Gf64MulTab

; 890  : 		Xor64 ((unsigned __int64 *)p, (unsigned __int64 *)t);

  000f1	48 8d 54 24 58	 lea	 rdx, QWORD PTR t$[rsp]
  000f6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR p$[rsp]
  000fb	e8 00 00 00 00	 call	 Xor64

; 891  : 
; 892  : 		EncipherBlock (cipher, p, ks);

  00100	4c 8b 44 24 50	 mov	 r8, QWORD PTR ks$[rsp]
  00105	48 8b 54 24 30	 mov	 rdx, QWORD PTR p$[rsp]
  0010a	8b 4c 24 60	 mov	 ecx, DWORD PTR cipher$[rsp]
  0010e	e8 00 00 00 00	 call	 EncipherBlock

; 893  : 
; 894  : 		Xor64 ((unsigned __int64 *)p, (unsigned __int64 *)t);

  00113	48 8d 54 24 58	 lea	 rdx, QWORD PTR t$[rsp]
  00118	48 8b 4c 24 30	 mov	 rcx, QWORD PTR p$[rsp]
  0011d	e8 00 00 00 00	 call	 Xor64

; 895  : 
; 896  : 		p += 8;

  00122	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  00127	48 83 c0 08	 add	 rax, 8
  0012b	48 89 44 24 30	 mov	 QWORD PTR p$[rsp], rax

; 897  : 
; 898  : 		if (i[7] != 0xff)

  00130	0f b6 44 24 47	 movzx	 eax, BYTE PTR i$[rsp+7]
  00135	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0013a	74 0d		 je	 SHORT $LN7@EncryptBuf@3

; 899  : 			i[7]++;

  0013c	0f b6 44 24 47	 movzx	 eax, BYTE PTR i$[rsp+7]
  00141	04 01		 add	 al, 1
  00143	88 44 24 47	 mov	 BYTE PTR i$[rsp+7], al

; 900  : 		else

  00147	eb 1b		 jmp	 SHORT $LN6@EncryptBuf@3
$LN7@EncryptBuf@3:

; 901  : 			*(unsigned __int64 *)i = BE64 ( BE64(*(unsigned __int64 *)i) + 1 );

  00149	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  0014e	e8 00 00 00 00	 call	 MirrorBytes64
  00153	48 8b c8	 mov	 rcx, rax
  00156	48 83 c1 01	 add	 rcx, 1
  0015a	e8 00 00 00 00	 call	 MirrorBytes64
  0015f	48 89 44 24 40	 mov	 QWORD PTR i$[rsp], rax
$LN6@EncryptBuf@3:

; 902  : 	}

  00164	e9 45 ff ff ff	 jmp	 $LN9@EncryptBuf@3
$LN8@EncryptBuf@3:
$LN5@EncryptBuf@3:

; 903  : 
; 904  : 	FAST_ERASE64 (t, sizeof(t));

  00169	48 8d 44 24 58	 lea	 rax, QWORD PTR t$[rsp]
  0016e	48 89 44 24 68	 mov	 QWORD PTR burnm$29131[rsp], rax
  00173	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR burnc$29133[rsp], 1
$LN2@EncryptBuf@3:
  0017b	8b 4c 24 64	 mov	 ecx, DWORD PTR burnc$29133[rsp]
  0017f	8b 44 24 64	 mov	 eax, DWORD PTR burnc$29133[rsp]
  00183	83 e8 01	 sub	 eax, 1
  00186	89 44 24 64	 mov	 DWORD PTR burnc$29133[rsp], eax
  0018a	85 c9		 test	 ecx, ecx
  0018c	74 1c		 je	 SHORT $LN1@EncryptBuf@3
  0018e	48 8b 44 24 68	 mov	 rax, QWORD PTR burnm$29131[rsp]
  00193	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  0019a	48 8b 44 24 68	 mov	 rax, QWORD PTR burnm$29131[rsp]
  0019f	48 83 c0 08	 add	 rax, 8
  001a3	48 89 44 24 68	 mov	 QWORD PTR burnm$29131[rsp], rax
  001a8	eb d1		 jmp	 SHORT $LN2@EncryptBuf@3
$LN1@EncryptBuf@3:
  001aa	33 c0		 xor	 eax, eax
  001ac	85 c0		 test	 eax, eax
  001ae	75 b9		 jne	 SHORT $LN5@EncryptBuf@3
$LN13@EncryptBuf@3:

; 905  : }

  001b0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001b5	48 33 cc	 xor	 rcx, rsp
  001b8	e8 00 00 00 00	 call	 __security_check_cookie
  001bd	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  001c4	c3		 ret	 0
EncryptBufferLRW64 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	EncryptBufferLRW128
;	COMDAT pdata
pdata	SEGMENT
$pdata$EncryptBufferLRW128 DD imagerel $LN19
	DD	imagerel $LN19+601
	DD	imagerel $unwind$EncryptBufferLRW128
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EncryptBufferLRW128 DD 022d19H
	DD	013011bH
	DD	imagerel __GSHandlerCheck
	DD	080H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EncryptBufferLRW128
_TEXT	SEGMENT
p$ = 48
i$ = 64
b$ = 72
ks$ = 80
t$ = 88
cipherCount$ = 104
cipher$ = 108
burnc$29095 = 112
burnm$29093 = 120
__$ArrayPad$ = 128
buffer$ = 160
length$ = 168
blockIndex$ = 176
cryptoInfo$ = 184
EncryptBufferLRW128 PROC				; COMDAT

; 817  : {

$LN19:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 818  : 	/* Deprecated/legacy */
; 819  : 
; 820  : 	int cipher = EAGetFirstCipher (cryptoInfo->ea);

  0002d	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00035	8b 08		 mov	 ecx, DWORD PTR [rax]
  00037	e8 00 00 00 00	 call	 EAGetFirstCipher
  0003c	89 44 24 6c	 mov	 DWORD PTR cipher$[rsp], eax

; 821  : 	int cipherCount = EAGetCipherCount (cryptoInfo->ea);

  00040	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00048	8b 08		 mov	 ecx, DWORD PTR [rax]
  0004a	e8 00 00 00 00	 call	 EAGetCipherCount
  0004f	89 44 24 68	 mov	 DWORD PTR cipherCount$[rsp], eax

; 822  : 	unsigned __int8 *p = buffer;

  00053	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  0005b	48 89 44 24 30	 mov	 QWORD PTR p$[rsp], rax

; 823  : 	unsigned __int8 *ks = cryptoInfo->ks;

  00060	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00068	48 83 c0 08	 add	 rax, 8
  0006c	48 89 44 24 50	 mov	 QWORD PTR ks$[rsp], rax

; 824  : 	unsigned __int8 i[8];
; 825  : 	unsigned __int8 t[16];
; 826  : 	unsigned __int64 b;
; 827  : 
; 828  : 	*(unsigned __int64 *)i = BE64(blockIndex);

  00071	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR blockIndex$[rsp]
  00079	e8 00 00 00 00	 call	 MirrorBytes64
  0007e	48 89 44 24 40	 mov	 QWORD PTR i$[rsp], rax

; 829  : 
; 830  : 	if (length % 16)

  00083	33 d2		 xor	 edx, edx
  00085	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR length$[rsp]
  0008d	b9 10 00 00 00	 mov	 ecx, 16
  00092	48 f7 f1	 div	 rcx
  00095	48 85 d2	 test	 rdx, rdx
  00098	74 1f		 je	 SHORT $LN16@EncryptBuf@4

; 831  : 		TC_THROW_FATAL_EXCEPTION;

  0009a	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  000a3	45 33 c9	 xor	 r9d, r9d
  000a6	45 33 c0	 xor	 r8d, r8d
  000a9	ba 3f 03 00 00	 mov	 edx, 831		; 0000033fH
  000ae	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx
$LN16@EncryptBuf@4:

; 832  : 
; 833  : 	// Note that the maximum supported volume size is 8589934592 GB  (i.e., 2^63 bytes).
; 834  : 
; 835  : 	for (b = 0; b < length >> 4; b++)

  000b9	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR b$[rsp], 0
  000c2	eb 0e		 jmp	 SHORT $LN15@EncryptBuf@4
$LN14@EncryptBuf@4:
  000c4	48 8b 44 24 48	 mov	 rax, QWORD PTR b$[rsp]
  000c9	48 83 c0 01	 add	 rax, 1
  000cd	48 89 44 24 48	 mov	 QWORD PTR b$[rsp], rax
$LN15@EncryptBuf@4:
  000d2	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR length$[rsp]
  000da	48 c1 e8 04	 shr	 rax, 4
  000de	48 39 44 24 48	 cmp	 QWORD PTR b$[rsp], rax
  000e3	0f 83 11 01 00
	00		 jae	 $LN13@EncryptBuf@4

; 836  : 	{
; 837  : 		Gf128MulBy64Tab (i, t, &cryptoInfo->gf_ctx);

  000e9	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR cryptoInfo$[rsp]
  000f1	49 81 c0 a8 29
	00 00		 add	 r8, 10664		; 000029a8H
  000f8	48 8d 54 24 58	 lea	 rdx, QWORD PTR t$[rsp]
  000fd	48 8d 4c 24 40	 lea	 rcx, QWORD PTR i$[rsp]
  00102	e8 00 00 00 00	 call	 Gf128MulBy64Tab

; 838  : 		Xor128 ((unsigned __int64 *)p, (unsigned __int64 *)t);

  00107	48 8d 54 24 58	 lea	 rdx, QWORD PTR t$[rsp]
  0010c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR p$[rsp]
  00111	e8 00 00 00 00	 call	 Xor128

; 839  : 
; 840  : 		if (cipherCount > 1)

  00116	83 7c 24 68 01	 cmp	 DWORD PTR cipherCount$[rsp], 1
  0011b	7e 74		 jle	 SHORT $LN12@EncryptBuf@4

; 841  : 		{
; 842  : 			// Cipher cascade
; 843  : 			for (cipher = EAGetFirstCipher (cryptoInfo->ea);
; 844  : 				cipher != 0;
; 845  : 				cipher = EAGetNextCipher (cryptoInfo->ea, cipher))

  0011d	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00125	8b 08		 mov	 ecx, DWORD PTR [rax]
  00127	e8 00 00 00 00	 call	 EAGetFirstCipher
  0012c	89 44 24 6c	 mov	 DWORD PTR cipher$[rsp], eax
  00130	eb 17		 jmp	 SHORT $LN11@EncryptBuf@4
$LN10@EncryptBuf@4:
  00132	8b 54 24 6c	 mov	 edx, DWORD PTR cipher$[rsp]
  00136	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  0013e	8b 08		 mov	 ecx, DWORD PTR [rax]
  00140	e8 00 00 00 00	 call	 EAGetNextCipher
  00145	89 44 24 6c	 mov	 DWORD PTR cipher$[rsp], eax
$LN11@EncryptBuf@4:
  00149	83 7c 24 6c 00	 cmp	 DWORD PTR cipher$[rsp], 0
  0014e	74 2e		 je	 SHORT $LN9@EncryptBuf@4

; 846  : 			{
; 847  : 				EncipherBlock (cipher, p, ks);

  00150	4c 8b 44 24 50	 mov	 r8, QWORD PTR ks$[rsp]
  00155	48 8b 54 24 30	 mov	 rdx, QWORD PTR p$[rsp]
  0015a	8b 4c 24 6c	 mov	 ecx, DWORD PTR cipher$[rsp]
  0015e	e8 00 00 00 00	 call	 EncipherBlock

; 848  : 				ks += CipherGetKeyScheduleSize (cipher);

  00163	8b 4c 24 6c	 mov	 ecx, DWORD PTR cipher$[rsp]
  00167	e8 00 00 00 00	 call	 CipherGetKeyScheduleSize
  0016c	48 63 c8	 movsxd	 rcx, eax
  0016f	48 8b 44 24 50	 mov	 rax, QWORD PTR ks$[rsp]
  00174	48 03 c1	 add	 rax, rcx
  00177	48 89 44 24 50	 mov	 QWORD PTR ks$[rsp], rax

; 849  : 			}

  0017c	eb b4		 jmp	 SHORT $LN10@EncryptBuf@4
$LN9@EncryptBuf@4:

; 850  : 			ks = cryptoInfo->ks;

  0017e	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00186	48 83 c0 08	 add	 rax, 8
  0018a	48 89 44 24 50	 mov	 QWORD PTR ks$[rsp], rax

; 851  : 		}
; 852  : 		else

  0018f	eb 13		 jmp	 SHORT $LN8@EncryptBuf@4
$LN12@EncryptBuf@4:

; 853  : 		{
; 854  : 			EncipherBlock (cipher, p, ks);

  00191	4c 8b 44 24 50	 mov	 r8, QWORD PTR ks$[rsp]
  00196	48 8b 54 24 30	 mov	 rdx, QWORD PTR p$[rsp]
  0019b	8b 4c 24 6c	 mov	 ecx, DWORD PTR cipher$[rsp]
  0019f	e8 00 00 00 00	 call	 EncipherBlock
$LN8@EncryptBuf@4:

; 855  : 		}
; 856  : 
; 857  : 		Xor128 ((unsigned __int64 *)p, (unsigned __int64 *)t);

  001a4	48 8d 54 24 58	 lea	 rdx, QWORD PTR t$[rsp]
  001a9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR p$[rsp]
  001ae	e8 00 00 00 00	 call	 Xor128

; 858  : 
; 859  : 		p += 16;

  001b3	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  001b8	48 83 c0 10	 add	 rax, 16
  001bc	48 89 44 24 30	 mov	 QWORD PTR p$[rsp], rax

; 860  : 
; 861  : 		if (i[7] != 0xff)

  001c1	0f b6 44 24 47	 movzx	 eax, BYTE PTR i$[rsp+7]
  001c6	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  001cb	74 0d		 je	 SHORT $LN7@EncryptBuf@4

; 862  : 			i[7]++;

  001cd	0f b6 44 24 47	 movzx	 eax, BYTE PTR i$[rsp+7]
  001d2	04 01		 add	 al, 1
  001d4	88 44 24 47	 mov	 BYTE PTR i$[rsp+7], al

; 863  : 		else

  001d8	eb 1b		 jmp	 SHORT $LN6@EncryptBuf@4
$LN7@EncryptBuf@4:

; 864  : 			*(unsigned __int64 *)i = BE64 ( BE64(*(unsigned __int64 *)i) + 1 );

  001da	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  001df	e8 00 00 00 00	 call	 MirrorBytes64
  001e4	48 8b c8	 mov	 rcx, rax
  001e7	48 83 c1 01	 add	 rcx, 1
  001eb	e8 00 00 00 00	 call	 MirrorBytes64
  001f0	48 89 44 24 40	 mov	 QWORD PTR i$[rsp], rax
$LN6@EncryptBuf@4:

; 865  : 	}

  001f5	e9 ca fe ff ff	 jmp	 $LN14@EncryptBuf@4
$LN13@EncryptBuf@4:
$LN5@EncryptBuf@4:

; 866  : 
; 867  : 	FAST_ERASE64 (t, sizeof(t));

  001fa	48 8d 44 24 58	 lea	 rax, QWORD PTR t$[rsp]
  001ff	48 89 44 24 78	 mov	 QWORD PTR burnm$29093[rsp], rax
  00204	c7 44 24 70 02
	00 00 00	 mov	 DWORD PTR burnc$29095[rsp], 2
$LN2@EncryptBuf@4:
  0020c	8b 4c 24 70	 mov	 ecx, DWORD PTR burnc$29095[rsp]
  00210	8b 44 24 70	 mov	 eax, DWORD PTR burnc$29095[rsp]
  00214	83 e8 01	 sub	 eax, 1
  00217	89 44 24 70	 mov	 DWORD PTR burnc$29095[rsp], eax
  0021b	85 c9		 test	 ecx, ecx
  0021d	74 1c		 je	 SHORT $LN1@EncryptBuf@4
  0021f	48 8b 44 24 78	 mov	 rax, QWORD PTR burnm$29093[rsp]
  00224	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  0022b	48 8b 44 24 78	 mov	 rax, QWORD PTR burnm$29093[rsp]
  00230	48 83 c0 08	 add	 rax, 8
  00234	48 89 44 24 78	 mov	 QWORD PTR burnm$29093[rsp], rax
  00239	eb d1		 jmp	 SHORT $LN2@EncryptBuf@4
$LN1@EncryptBuf@4:
  0023b	33 c0		 xor	 eax, eax
  0023d	85 c0		 test	 eax, eax
  0023f	75 b9		 jne	 SHORT $LN5@EncryptBuf@4
$LN18@EncryptBuf@4:

; 868  : }

  00241	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00249	48 33 cc	 xor	 rcx, rsp
  0024c	e8 00 00 00 00	 call	 __security_check_cookie
  00251	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00258	c3		 ret	 0
EncryptBufferLRW128 ENDP
_TEXT	ENDS
PUBLIC	EAGetLargestKeyForMode
;	COMDAT pdata
pdata	SEGMENT
$pdata$EAGetLargestKeyForMode DD imagerel $LN8
	DD	imagerel $LN8+105
	DD	imagerel $unwind$EAGetLargestKeyForMode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EAGetLargestKeyForMode DD 010801H
	DD	06208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EAGetLargestKeyForMode
_TEXT	SEGMENT
key$ = 32
ea$ = 36
mode$ = 64
EAGetLargestKeyForMode PROC				; COMDAT

; 591  : {

$LN8:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 592  : 	int ea, key = 0;

  00008	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR key$[rsp], 0

; 593  : 
; 594  : 	for (ea = EAGetFirst (); ea != 0; ea = EAGetNext (ea))

  00010	e8 00 00 00 00	 call	 EAGetFirst
  00015	89 44 24 24	 mov	 DWORD PTR ea$[rsp], eax
  00019	eb 0d		 jmp	 SHORT $LN5@EAGetLarge
$LN4@EAGetLarge:
  0001b	8b 4c 24 24	 mov	 ecx, DWORD PTR ea$[rsp]
  0001f	e8 00 00 00 00	 call	 EAGetNext
  00024	89 44 24 24	 mov	 DWORD PTR ea$[rsp], eax
$LN5@EAGetLarge:
  00028	83 7c 24 24 00	 cmp	 DWORD PTR ea$[rsp], 0
  0002d	74 31		 je	 SHORT $LN3@EAGetLarge

; 595  : 	{
; 596  : 		if (!EAIsModeSupported (ea, mode))

  0002f	8b 54 24 40	 mov	 edx, DWORD PTR mode$[rsp]
  00033	8b 4c 24 24	 mov	 ecx, DWORD PTR ea$[rsp]
  00037	e8 00 00 00 00	 call	 EAIsModeSupported
  0003c	85 c0		 test	 eax, eax
  0003e	75 02		 jne	 SHORT $LN2@EAGetLarge

; 597  : 			continue;

  00040	eb d9		 jmp	 SHORT $LN4@EAGetLarge
$LN2@EAGetLarge:

; 598  : 
; 599  : 		if (EAGetKeySize (ea) >= key)

  00042	8b 4c 24 24	 mov	 ecx, DWORD PTR ea$[rsp]
  00046	e8 00 00 00 00	 call	 EAGetKeySize
  0004b	3b 44 24 20	 cmp	 eax, DWORD PTR key$[rsp]
  0004f	7c 0d		 jl	 SHORT $LN1@EAGetLarge

; 600  : 			key = EAGetKeySize (ea);

  00051	8b 4c 24 24	 mov	 ecx, DWORD PTR ea$[rsp]
  00055	e8 00 00 00 00	 call	 EAGetKeySize
  0005a	89 44 24 20	 mov	 DWORD PTR key$[rsp], eax
$LN1@EAGetLarge:

; 601  : 	}

  0005e	eb bb		 jmp	 SHORT $LN4@EAGetLarge
$LN3@EAGetLarge:

; 602  : 	return key;

  00060	8b 44 24 20	 mov	 eax, DWORD PTR key$[rsp]

; 603  : }

  00064	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00068	c3		 ret	 0
EAGetLargestKeyForMode ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	EAGetByName
;	COMDAT pdata
pdata	SEGMENT
$pdata$EAGetByName DD imagerel $LN10
	DD	imagerel $LN10+168
	DD	imagerel $unwind$EAGetByName
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EAGetByName DD 021e19H
	DD	019010cH
	DD	imagerel __GSHandlerCheck
	DD	0b8H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EAGetByName
_TEXT	SEGMENT
n$ = 48
ea$ = 176
__$ArrayPad$ = 184
name$ = 208
EAGetByName PROC					; COMDAT

; 473  : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 474  : 	int ea = EAGetFirst ();

  0001e	e8 00 00 00 00	 call	 EAGetFirst
  00023	89 84 24 b0 00
	00 00		 mov	 DWORD PTR ea$[rsp], eax
$LN4@EAGetByNam:

; 475  : 	char n[128];
; 476  : 
; 477  : 	do
; 478  : 	{
; 479  : 		EAGetName (n, ea);

  0002a	8b 94 24 b0 00
	00 00		 mov	 edx, DWORD PTR ea$[rsp]
  00031	48 8d 4c 24 30	 lea	 rcx, QWORD PTR n$[rsp]
  00036	e8 00 00 00 00	 call	 EAGetName

; 480  : 		if (strcmp (n, name) == 0)

  0003b	48 8d 54 24 30	 lea	 rdx, QWORD PTR n$[rsp]
  00040	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  00048	48 2b ca	 sub	 rcx, rdx
$LL7@EAGetByNam:
  0004b	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  0004e	3a 04 0a	 cmp	 al, BYTE PTR [rdx+rcx]
  00051	75 0c		 jne	 SHORT $LN9@EAGetByNam
  00053	48 83 c2 01	 add	 rdx, 1
  00057	84 c0		 test	 al, al
  00059	75 f0		 jne	 SHORT $LL7@EAGetByNam
  0005b	33 c0		 xor	 eax, eax
  0005d	eb 05		 jmp	 SHORT $LN8@EAGetByNam
$LN9@EAGetByNam:
  0005f	1b c0		 sbb	 eax, eax
  00061	83 d8 ff	 sbb	 eax, -1
$LN8@EAGetByNam:
  00064	85 c0		 test	 eax, eax
  00066	75 09		 jne	 SHORT $LN1@EAGetByNam

; 481  : 			return ea;

  00068	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR ea$[rsp]
  0006f	eb 1f		 jmp	 SHORT $LN5@EAGetByNam
$LN1@EAGetByNam:

; 482  : 	}
; 483  : 	while (ea = EAGetNext (ea));

  00071	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR ea$[rsp]
  00078	e8 00 00 00 00	 call	 EAGetNext
  0007d	89 84 24 b0 00
	00 00		 mov	 DWORD PTR ea$[rsp], eax
  00084	83 bc 24 b0 00
	00 00 00	 cmp	 DWORD PTR ea$[rsp], 0
  0008c	75 9c		 jne	 SHORT $LN4@EAGetByNam

; 484  : 
; 485  : 	return 0;

  0008e	33 c0		 xor	 eax, eax
$LN5@EAGetByNam:

; 486  : }

  00090	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00098	48 33 cc	 xor	 rcx, rsp
  0009b	e8 00 00 00 00	 call	 __security_check_cookie
  000a0	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000a7	c3		 ret	 0
EAGetByName ENDP
_TEXT	ENDS
PUBLIC	EAInit
;	COMDAT pdata
pdata	SEGMENT
$pdata$EAInit DD imagerel $LN11
	DD	imagerel $LN11+200
	DD	imagerel $unwind$EAInit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EAInit DD 011201H
	DD	06212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EAInit
_TEXT	SEGMENT
retVal$ = 32
c$ = 36
tv75 = 40
ea$ = 64
key$ = 72
ks$ = 80
EAInit	PROC						; COMDAT

; 383  : {

$LN11:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 384  : 	int c, retVal = ERR_SUCCESS;

  00012	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR retVal$[rsp], 0

; 385  : 
; 386  : 	if (ea == 0)

  0001a	83 7c 24 40 00	 cmp	 DWORD PTR ea$[rsp], 0
  0001f	75 0a		 jne	 SHORT $LN8@EAInit

; 387  : 		return ERR_CIPHER_INIT_FAILURE;

  00021	b8 11 00 00 00	 mov	 eax, 17
  00026	e9 98 00 00 00	 jmp	 $LN9@EAInit
$LN8@EAInit:

; 388  : 
; 389  : 	for (c = EAGetFirstCipher (ea); c != 0; c = EAGetNextCipher (ea, c))

  0002b	8b 4c 24 40	 mov	 ecx, DWORD PTR ea$[rsp]
  0002f	e8 00 00 00 00	 call	 EAGetFirstCipher
  00034	89 44 24 24	 mov	 DWORD PTR c$[rsp], eax
  00038	eb 11		 jmp	 SHORT $LN7@EAInit
$LN6@EAInit:
  0003a	8b 54 24 24	 mov	 edx, DWORD PTR c$[rsp]
  0003e	8b 4c 24 40	 mov	 ecx, DWORD PTR ea$[rsp]
  00042	e8 00 00 00 00	 call	 EAGetNextCipher
  00047	89 44 24 24	 mov	 DWORD PTR c$[rsp], eax
$LN7@EAInit:
  0004b	83 7c 24 24 00	 cmp	 DWORD PTR c$[rsp], 0
  00050	74 6d		 je	 SHORT $LN5@EAInit

; 390  : 	{
; 391  : 		switch (CipherInit (c, key, ks))

  00052	4c 8b 44 24 50	 mov	 r8, QWORD PTR ks$[rsp]
  00057	48 8b 54 24 48	 mov	 rdx, QWORD PTR key$[rsp]
  0005c	8b 4c 24 24	 mov	 ecx, DWORD PTR c$[rsp]
  00060	e8 00 00 00 00	 call	 CipherInit
  00065	89 44 24 28	 mov	 DWORD PTR tv75[rsp], eax
  00069	83 7c 24 28 11	 cmp	 DWORD PTR tv75[rsp], 17
  0006e	74 09		 je	 SHORT $LN2@EAInit
  00070	83 7c 24 28 12	 cmp	 DWORD PTR tv75[rsp], 18
  00075	74 09		 je	 SHORT $LN1@EAInit
  00077	eb 0f		 jmp	 SHORT $LN3@EAInit
$LN2@EAInit:

; 392  : 		{
; 393  : 		case ERR_CIPHER_INIT_FAILURE:
; 394  : 			return ERR_CIPHER_INIT_FAILURE;

  00079	b8 11 00 00 00	 mov	 eax, 17
  0007e	eb 43		 jmp	 SHORT $LN9@EAInit
$LN1@EAInit:

; 395  : 
; 396  : 		case ERR_CIPHER_INIT_WEAK_KEY:
; 397  : 			retVal = ERR_CIPHER_INIT_WEAK_KEY;		// Non-fatal error

  00080	c7 44 24 20 12
	00 00 00	 mov	 DWORD PTR retVal$[rsp], 18
$LN3@EAInit:

; 398  : 			break;
; 399  : 		}
; 400  : 
; 401  : 		key += CipherGetKeySize (c);

  00088	8b 4c 24 24	 mov	 ecx, DWORD PTR c$[rsp]
  0008c	e8 00 00 00 00	 call	 CipherGetKeySize
  00091	48 63 c8	 movsxd	 rcx, eax
  00094	48 8b 44 24 48	 mov	 rax, QWORD PTR key$[rsp]
  00099	48 03 c1	 add	 rax, rcx
  0009c	48 89 44 24 48	 mov	 QWORD PTR key$[rsp], rax

; 402  : 		ks += CipherGetKeyScheduleSize (c);

  000a1	8b 4c 24 24	 mov	 ecx, DWORD PTR c$[rsp]
  000a5	e8 00 00 00 00	 call	 CipherGetKeyScheduleSize
  000aa	48 63 c8	 movsxd	 rcx, eax
  000ad	48 8b 44 24 50	 mov	 rax, QWORD PTR ks$[rsp]
  000b2	48 03 c1	 add	 rax, rcx
  000b5	48 89 44 24 50	 mov	 QWORD PTR ks$[rsp], rax

; 403  : 	}

  000ba	e9 7b ff ff ff	 jmp	 $LN6@EAInit
$LN5@EAInit:

; 404  : 	return retVal;

  000bf	8b 44 24 20	 mov	 eax, DWORD PTR retVal$[rsp]
$LN9@EAInit:

; 405  : }

  000c3	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c7	c3		 ret	 0
EAInit	ENDP
_TEXT	ENDS
PUBLIC	DecipherBlocks
;	COMDAT pdata
pdata	SEGMENT
$pdata$DecipherBlocks DD imagerel $LN9
	DD	imagerel $LN9+211
	DD	imagerel $unwind$DecipherBlocks
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DecipherBlocks DD 011701H
	DD	06217H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT DecipherBlocks
_TEXT	SEGMENT
data$ = 32
blockSize$28748 = 40
cipher$ = 64
dataPtr$ = 72
ks$ = 80
blockCount$ = 88
DecipherBlocks PROC					; COMDAT

; 272  : {

$LN9:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 273  : 	byte *data = dataPtr;

  00017	48 8b 44 24 48	 mov	 rax, QWORD PTR dataPtr$[rsp]
  0001c	48 89 44 24 20	 mov	 QWORD PTR data$[rsp], rax

; 274  : #if defined (TC_WINDOWS_DRIVER) && !defined (_WIN64)
; 275  : 	KFLOATING_SAVE floatingPointState;
; 276  : #endif
; 277  : 
; 278  : 	if (cipher == AES
; 279  : 		&& (blockCount & (32 - 1)) == 0
; 280  : 		&& IsAesHwCpuSupported()
; 281  : #if defined (TC_WINDOWS_DRIVER) && !defined (_WIN64)
; 282  : 		&& NT_SUCCESS (KeSaveFloatingPointState (&floatingPointState))
; 283  : #endif
; 284  : 		)

  00021	83 7c 24 40 01	 cmp	 DWORD PTR cipher$[rsp], 1
  00026	75 57		 jne	 SHORT $LN6@DecipherBl@2
  00028	48 8b 44 24 58	 mov	 rax, QWORD PTR blockCount$[rsp]
  0002d	48 83 e0 1f	 and	 rax, 31
  00031	48 85 c0	 test	 rax, rax
  00034	75 49		 jne	 SHORT $LN6@DecipherBl@2
  00036	e8 00 00 00 00	 call	 IsAesHwCpuSupported
  0003b	85 c0		 test	 eax, eax
  0003d	74 40		 je	 SHORT $LN6@DecipherBl@2
$LN5@DecipherBl@2:

; 285  : 	{
; 286  : 		while (blockCount > 0)

  0003f	48 83 7c 24 58
	00		 cmp	 QWORD PTR blockCount$[rsp], 0
  00045	76 36		 jbe	 SHORT $LN4@DecipherBl@2

; 287  : 		{
; 288  : 			aes_hw_cpu_decrypt_32_blocks ((byte *) ks + sizeof (aes_encrypt_ctx), data);

  00047	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ks$[rsp]
  0004c	48 81 c1 f4 00
	00 00		 add	 rcx, 244		; 000000f4H
  00053	48 8b 54 24 20	 mov	 rdx, QWORD PTR data$[rsp]
  00058	e8 00 00 00 00	 call	 aes_hw_cpu_decrypt_32_blocks

; 289  : 
; 290  : 			data += 32 * 16;

  0005d	48 8b 44 24 20	 mov	 rax, QWORD PTR data$[rsp]
  00062	48 05 00 02 00
	00		 add	 rax, 512		; 00000200H
  00068	48 89 44 24 20	 mov	 QWORD PTR data$[rsp], rax

; 291  : 			blockCount -= 32;

  0006d	48 8b 44 24 58	 mov	 rax, QWORD PTR blockCount$[rsp]
  00072	48 83 e8 20	 sub	 rax, 32			; 00000020H
  00076	48 89 44 24 58	 mov	 QWORD PTR blockCount$[rsp], rax

; 292  : 		}

  0007b	eb c2		 jmp	 SHORT $LN5@DecipherBl@2
$LN4@DecipherBl@2:

; 293  : 
; 294  : #if defined (TC_WINDOWS_DRIVER) && !defined (_WIN64)
; 295  : 		KeRestoreFloatingPointState (&floatingPointState);
; 296  : #endif
; 297  : 	}
; 298  : 	else

  0007d	eb 4f		 jmp	 SHORT $LN3@DecipherBl@2
$LN6@DecipherBl@2:

; 299  : 	{
; 300  : 		size_t blockSize = CipherGetBlockSize (cipher);

  0007f	8b 4c 24 40	 mov	 ecx, DWORD PTR cipher$[rsp]
  00083	e8 00 00 00 00	 call	 CipherGetBlockSize
  00088	48 98		 cdqe
  0008a	48 89 44 24 28	 mov	 QWORD PTR blockSize$28748[rsp], rax
$LN2@DecipherBl@2:

; 301  : 		while (blockCount-- > 0)

  0008f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR blockCount$[rsp]
  00094	48 8b 44 24 58	 mov	 rax, QWORD PTR blockCount$[rsp]
  00099	48 83 e8 01	 sub	 rax, 1
  0009d	48 89 44 24 58	 mov	 QWORD PTR blockCount$[rsp], rax
  000a2	48 85 c9	 test	 rcx, rcx
  000a5	76 27		 jbe	 SHORT $LN1@DecipherBl@2

; 302  : 		{
; 303  : 			DecipherBlock (cipher, data, ks);

  000a7	4c 8b 44 24 50	 mov	 r8, QWORD PTR ks$[rsp]
  000ac	48 8b 54 24 20	 mov	 rdx, QWORD PTR data$[rsp]
  000b1	8b 4c 24 40	 mov	 ecx, DWORD PTR cipher$[rsp]
  000b5	e8 00 00 00 00	 call	 DecipherBlock

; 304  : 			data += blockSize;

  000ba	4c 8b 5c 24 28	 mov	 r11, QWORD PTR blockSize$28748[rsp]
  000bf	48 8b 44 24 20	 mov	 rax, QWORD PTR data$[rsp]
  000c4	49 03 c3	 add	 rax, r11
  000c7	48 89 44 24 20	 mov	 QWORD PTR data$[rsp], rax

; 305  : 		}

  000cc	eb c1		 jmp	 SHORT $LN2@DecipherBl@2
$LN1@DecipherBl@2:
$LN3@DecipherBl@2:

; 306  : 	}
; 307  : }

  000ce	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d2	c3		 ret	 0
DecipherBlocks ENDP
_TEXT	ENDS
PUBLIC	EncipherBlocks
;	COMDAT pdata
pdata	SEGMENT
$pdata$EncipherBlocks DD imagerel $LN9
	DD	imagerel $LN9+204
	DD	imagerel $unwind$EncipherBlocks
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EncipherBlocks DD 011701H
	DD	06217H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EncipherBlocks
_TEXT	SEGMENT
data$ = 32
blockSize$28701 = 40
cipher$ = 64
dataPtr$ = 72
ks$ = 80
blockCount$ = 88
EncipherBlocks PROC					; COMDAT

; 203  : {

$LN9:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 204  : 	byte *data = dataPtr;

  00017	48 8b 44 24 48	 mov	 rax, QWORD PTR dataPtr$[rsp]
  0001c	48 89 44 24 20	 mov	 QWORD PTR data$[rsp], rax

; 205  : #if defined (TC_WINDOWS_DRIVER) && !defined (_WIN64)
; 206  : 	KFLOATING_SAVE floatingPointState;
; 207  : #endif
; 208  : 
; 209  : 	if (cipher == AES
; 210  : 		&& (blockCount & (32 - 1)) == 0
; 211  : 		&& IsAesHwCpuSupported()
; 212  : #if defined (TC_WINDOWS_DRIVER) && !defined (_WIN64)
; 213  : 		&& NT_SUCCESS (KeSaveFloatingPointState (&floatingPointState))
; 214  : #endif
; 215  : 		)

  00021	83 7c 24 40 01	 cmp	 DWORD PTR cipher$[rsp], 1
  00026	75 50		 jne	 SHORT $LN6@EncipherBl@2
  00028	48 8b 44 24 58	 mov	 rax, QWORD PTR blockCount$[rsp]
  0002d	48 83 e0 1f	 and	 rax, 31
  00031	48 85 c0	 test	 rax, rax
  00034	75 42		 jne	 SHORT $LN6@EncipherBl@2
  00036	e8 00 00 00 00	 call	 IsAesHwCpuSupported
  0003b	85 c0		 test	 eax, eax
  0003d	74 39		 je	 SHORT $LN6@EncipherBl@2
$LN5@EncipherBl@2:

; 216  : 	{
; 217  : 		while (blockCount > 0)

  0003f	48 83 7c 24 58
	00		 cmp	 QWORD PTR blockCount$[rsp], 0
  00045	76 2f		 jbe	 SHORT $LN4@EncipherBl@2

; 218  : 		{
; 219  : 			aes_hw_cpu_encrypt_32_blocks (ks, data);

  00047	48 8b 54 24 20	 mov	 rdx, QWORD PTR data$[rsp]
  0004c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ks$[rsp]
  00051	e8 00 00 00 00	 call	 aes_hw_cpu_encrypt_32_blocks

; 220  : 
; 221  : 			data += 32 * 16;

  00056	48 8b 44 24 20	 mov	 rax, QWORD PTR data$[rsp]
  0005b	48 05 00 02 00
	00		 add	 rax, 512		; 00000200H
  00061	48 89 44 24 20	 mov	 QWORD PTR data$[rsp], rax

; 222  : 			blockCount -= 32;

  00066	48 8b 44 24 58	 mov	 rax, QWORD PTR blockCount$[rsp]
  0006b	48 83 e8 20	 sub	 rax, 32			; 00000020H
  0006f	48 89 44 24 58	 mov	 QWORD PTR blockCount$[rsp], rax

; 223  : 		}

  00074	eb c9		 jmp	 SHORT $LN5@EncipherBl@2
$LN4@EncipherBl@2:

; 224  : 
; 225  : #if defined (TC_WINDOWS_DRIVER) && !defined (_WIN64)
; 226  : 		KeRestoreFloatingPointState (&floatingPointState);
; 227  : #endif
; 228  : 	}
; 229  : 	else

  00076	eb 4f		 jmp	 SHORT $LN3@EncipherBl@2
$LN6@EncipherBl@2:

; 230  : 	{
; 231  : 		size_t blockSize = CipherGetBlockSize (cipher);

  00078	8b 4c 24 40	 mov	 ecx, DWORD PTR cipher$[rsp]
  0007c	e8 00 00 00 00	 call	 CipherGetBlockSize
  00081	48 98		 cdqe
  00083	48 89 44 24 28	 mov	 QWORD PTR blockSize$28701[rsp], rax
$LN2@EncipherBl@2:

; 232  : 		while (blockCount-- > 0)

  00088	48 8b 4c 24 58	 mov	 rcx, QWORD PTR blockCount$[rsp]
  0008d	48 8b 44 24 58	 mov	 rax, QWORD PTR blockCount$[rsp]
  00092	48 83 e8 01	 sub	 rax, 1
  00096	48 89 44 24 58	 mov	 QWORD PTR blockCount$[rsp], rax
  0009b	48 85 c9	 test	 rcx, rcx
  0009e	76 27		 jbe	 SHORT $LN1@EncipherBl@2

; 233  : 		{
; 234  : 			EncipherBlock (cipher, data, ks);

  000a0	4c 8b 44 24 50	 mov	 r8, QWORD PTR ks$[rsp]
  000a5	48 8b 54 24 20	 mov	 rdx, QWORD PTR data$[rsp]
  000aa	8b 4c 24 40	 mov	 ecx, DWORD PTR cipher$[rsp]
  000ae	e8 00 00 00 00	 call	 EncipherBlock

; 235  : 			data += blockSize;

  000b3	4c 8b 5c 24 28	 mov	 r11, QWORD PTR blockSize$28701[rsp]
  000b8	48 8b 44 24 20	 mov	 rax, QWORD PTR data$[rsp]
  000bd	49 03 c3	 add	 rax, r11
  000c0	48 89 44 24 20	 mov	 QWORD PTR data$[rsp], rax

; 236  : 		}

  000c5	eb c1		 jmp	 SHORT $LN2@EncipherBl@2
$LN1@EncipherBl@2:
$LN3@EncipherBl@2:

; 237  : 	}
; 238  : }

  000c7	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cb	c3		 ret	 0
EncipherBlocks ENDP
PUBLIC	GetMaxPkcs5OutSize
;	COMDAT pdata
pdata	SEGMENT
$pdata$GetMaxPkcs5OutSize DD imagerel $LN13
	DD	imagerel $LN13+289
	DD	imagerel $unwind$GetMaxPkcs5OutSize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GetMaxPkcs5OutSize DD 010401H
	DD	08204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT GetMaxPkcs5OutSize
_TEXT	SEGMENT
size$ = 32
tv71 = 36
tv79 = 40
tv87 = 44
tv95 = 48
tv135 = 52
GetMaxPkcs5OutSize PROC					; COMDAT

; 1721 : {

$LN13:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1722 : 	int size = 32;

  00004	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR size$[rsp], 32 ; 00000020H

; 1723 : 
; 1724 : 	size = max (size, EAGetLargestKeyForMode (XTS) * 2);	// Sizes of primary + secondary keys

  0000c	b9 01 00 00 00	 mov	 ecx, 1
  00011	e8 00 00 00 00	 call	 EAGetLargestKeyForMode
  00016	d1 e0		 shl	 eax, 1
  00018	39 44 24 20	 cmp	 DWORD PTR size$[rsp], eax
  0001c	7e 0a		 jle	 SHORT $LN3@GetMaxPkcs
  0001e	8b 44 24 20	 mov	 eax, DWORD PTR size$[rsp]
  00022	89 44 24 24	 mov	 DWORD PTR tv71[rsp], eax
  00026	eb 10		 jmp	 SHORT $LN4@GetMaxPkcs
$LN3@GetMaxPkcs:
  00028	b9 01 00 00 00	 mov	 ecx, 1
  0002d	e8 00 00 00 00	 call	 EAGetLargestKeyForMode
  00032	d1 e0		 shl	 eax, 1
  00034	89 44 24 24	 mov	 DWORD PTR tv71[rsp], eax
$LN4@GetMaxPkcs:
  00038	8b 44 24 24	 mov	 eax, DWORD PTR tv71[rsp]
  0003c	89 44 24 20	 mov	 DWORD PTR size$[rsp], eax

; 1725 : 
; 1726 : #ifndef TC_WINDOWS_BOOT
; 1727 : 	size = max (size, LEGACY_VOL_IV_SIZE + EAGetLargestKeyForMode (LRW));		// Deprecated/legacy

  00040	b9 02 00 00 00	 mov	 ecx, 2
  00045	e8 00 00 00 00	 call	 EAGetLargestKeyForMode
  0004a	83 c0 20	 add	 eax, 32			; 00000020H
  0004d	39 44 24 20	 cmp	 DWORD PTR size$[rsp], eax
  00051	7e 0a		 jle	 SHORT $LN5@GetMaxPkcs
  00053	8b 44 24 20	 mov	 eax, DWORD PTR size$[rsp]
  00057	89 44 24 28	 mov	 DWORD PTR tv79[rsp], eax
  0005b	eb 11		 jmp	 SHORT $LN6@GetMaxPkcs
$LN5@GetMaxPkcs:
  0005d	b9 02 00 00 00	 mov	 ecx, 2
  00062	e8 00 00 00 00	 call	 EAGetLargestKeyForMode
  00067	83 c0 20	 add	 eax, 32			; 00000020H
  0006a	89 44 24 28	 mov	 DWORD PTR tv79[rsp], eax
$LN6@GetMaxPkcs:
  0006e	8b 44 24 28	 mov	 eax, DWORD PTR tv79[rsp]
  00072	89 44 24 20	 mov	 DWORD PTR size$[rsp], eax

; 1728 : 	size = max (size, LEGACY_VOL_IV_SIZE + EAGetLargestKeyForMode (CBC));		// Deprecated/legacy

  00076	b9 03 00 00 00	 mov	 ecx, 3
  0007b	e8 00 00 00 00	 call	 EAGetLargestKeyForMode
  00080	83 c0 20	 add	 eax, 32			; 00000020H
  00083	39 44 24 20	 cmp	 DWORD PTR size$[rsp], eax
  00087	7e 0a		 jle	 SHORT $LN7@GetMaxPkcs
  00089	8b 44 24 20	 mov	 eax, DWORD PTR size$[rsp]
  0008d	89 44 24 2c	 mov	 DWORD PTR tv87[rsp], eax
  00091	eb 11		 jmp	 SHORT $LN8@GetMaxPkcs
$LN7@GetMaxPkcs:
  00093	b9 03 00 00 00	 mov	 ecx, 3
  00098	e8 00 00 00 00	 call	 EAGetLargestKeyForMode
  0009d	83 c0 20	 add	 eax, 32			; 00000020H
  000a0	89 44 24 2c	 mov	 DWORD PTR tv87[rsp], eax
$LN8@GetMaxPkcs:
  000a4	8b 44 24 2c	 mov	 eax, DWORD PTR tv87[rsp]
  000a8	89 44 24 20	 mov	 DWORD PTR size$[rsp], eax

; 1729 : 	size = max (size, LEGACY_VOL_IV_SIZE + EAGetLargestKeyForMode (OUTER_CBC));	// Deprecated/legacy

  000ac	b9 04 00 00 00	 mov	 ecx, 4
  000b1	e8 00 00 00 00	 call	 EAGetLargestKeyForMode
  000b6	83 c0 20	 add	 eax, 32			; 00000020H
  000b9	39 44 24 20	 cmp	 DWORD PTR size$[rsp], eax
  000bd	7e 0a		 jle	 SHORT $LN9@GetMaxPkcs
  000bf	8b 44 24 20	 mov	 eax, DWORD PTR size$[rsp]
  000c3	89 44 24 30	 mov	 DWORD PTR tv95[rsp], eax
  000c7	eb 11		 jmp	 SHORT $LN10@GetMaxPkcs
$LN9@GetMaxPkcs:
  000c9	b9 04 00 00 00	 mov	 ecx, 4
  000ce	e8 00 00 00 00	 call	 EAGetLargestKeyForMode
  000d3	83 c0 20	 add	 eax, 32			; 00000020H
  000d6	89 44 24 30	 mov	 DWORD PTR tv95[rsp], eax
$LN10@GetMaxPkcs:
  000da	8b 44 24 30	 mov	 eax, DWORD PTR tv95[rsp]
  000de	89 44 24 20	 mov	 DWORD PTR size$[rsp], eax

; 1730 : 	size = max (size, LEGACY_VOL_IV_SIZE + EAGetLargestKeyForMode (INNER_CBC));	// Deprecated/legacy

  000e2	b9 05 00 00 00	 mov	 ecx, 5
  000e7	e8 00 00 00 00	 call	 EAGetLargestKeyForMode
  000ec	83 c0 20	 add	 eax, 32			; 00000020H
  000ef	39 44 24 20	 cmp	 DWORD PTR size$[rsp], eax
  000f3	7e 0a		 jle	 SHORT $LN11@GetMaxPkcs
  000f5	8b 44 24 20	 mov	 eax, DWORD PTR size$[rsp]
  000f9	89 44 24 34	 mov	 DWORD PTR tv135[rsp], eax
  000fd	eb 11		 jmp	 SHORT $LN12@GetMaxPkcs
$LN11@GetMaxPkcs:
  000ff	b9 05 00 00 00	 mov	 ecx, 5
  00104	e8 00 00 00 00	 call	 EAGetLargestKeyForMode
  00109	83 c0 20	 add	 eax, 32			; 00000020H
  0010c	89 44 24 34	 mov	 DWORD PTR tv135[rsp], eax
$LN12@GetMaxPkcs:
  00110	8b 44 24 34	 mov	 eax, DWORD PTR tv135[rsp]
  00114	89 44 24 20	 mov	 DWORD PTR size$[rsp], eax

; 1731 : #endif
; 1732 : 
; 1733 : 	return size;

  00118	8b 44 24 20	 mov	 eax, DWORD PTR size$[rsp]

; 1734 : }

  0011c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00120	c3		 ret	 0
GetMaxPkcs5OutSize ENDP
_TEXT	ENDS
PUBLIC	DecryptDataUnitsCurrentThread
;	COMDAT pdata
pdata	SEGMENT
$pdata$DecryptDataUnitsCurrentThread DD imagerel $LN25
	DD	imagerel $LN25+1200
	DD	imagerel $unwind$DecryptDataUnitsCurrentThread
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DecryptDataUnitsCurrentThread DD 021b01H
	DD	015011bH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT DecryptDataUnitsCurrentThread
_TEXT	SEGMENT
secWhitening$ = 64
iv64$ = 72
sectorIV$ = 80
unitNo$ = 96
ea$ = 104
iv$ = 112
ks$ = 120
cipher$ = 128
ks2$ = 136
tv68 = 144
tv135 = 148
buf$ = 176
structUnitNo$ = 184
nbrUnits$ = 192
ci$ = 200
DecryptDataUnitsCurrentThread PROC			; COMDAT

; 1601 : {

$LN25:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1602 : 	int ea = ci->ea;

  0001b	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00023	8b 00		 mov	 eax, DWORD PTR [rax]
  00025	89 44 24 68	 mov	 DWORD PTR ea$[rsp], eax

; 1603 : 	unsigned __int8 *ks = ci->ks;

  00029	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00031	48 83 c0 08	 add	 rax, 8
  00035	48 89 44 24 78	 mov	 QWORD PTR ks$[rsp], rax

; 1604 : 	unsigned __int8 *ks2 = ci->ks2;

  0003a	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00042	48 05 d4 14 00
	00		 add	 rax, 5332		; 000014d4H
  00048	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR ks2$[rsp], rax

; 1605 : 	int cipher;
; 1606 : 
; 1607 : #ifndef TC_NO_COMPILER_INT64
; 1608 : 	void *iv = ci->k2;									// Deprecated/legacy

  00050	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00058	48 05 a8 42 00
	00		 add	 rax, 17064		; 000042a8H
  0005e	48 89 44 24 70	 mov	 QWORD PTR iv$[rsp], rax

; 1609 : 	unsigned __int64 unitNo = structUnitNo->Value;

  00063	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR structUnitNo$[rsp]
  0006b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006e	48 89 44 24 60	 mov	 QWORD PTR unitNo$[rsp], rax

; 1610 : 	unsigned __int64 *iv64 = (unsigned __int64 *) iv;	// Deprecated/legacy

  00073	48 8b 44 24 70	 mov	 rax, QWORD PTR iv$[rsp]
  00078	48 89 44 24 48	 mov	 QWORD PTR iv64$[rsp], rax

; 1611 : 	unsigned __int32 sectorIV[4];						// Deprecated/legacy
; 1612 : 	unsigned __int32 secWhitening[2];					// Deprecated/legacy
; 1613 : #endif	// #ifndef TC_NO_COMPILER_INT64
; 1614 : 
; 1615 : 
; 1616 : 	switch (ci->mode)

  0007d	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00085	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00088	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv68[rsp], eax
  0008f	83 bc 24 90 00
	00 00 01	 cmp	 DWORD PTR tv68[rsp], 1
  00097	74 3d		 je	 SHORT $LN20@DecryptDat
  00099	83 bc 24 90 00
	00 00 02	 cmp	 DWORD PTR tv68[rsp], 2
  000a1	0f 84 2f 01 00
	00		 je	 $LN16@DecryptDat
  000a7	83 bc 24 90 00
	00 00 03	 cmp	 DWORD PTR tv68[rsp], 3
  000af	0f 84 f5 01 00
	00		 je	 $LN10@DecryptDat
  000b5	83 bc 24 90 00
	00 00 04	 cmp	 DWORD PTR tv68[rsp], 4
  000bd	0f 84 10 03 00
	00		 je	 $LN4@DecryptDat
  000c3	83 bc 24 90 00
	00 00 05	 cmp	 DWORD PTR tv68[rsp], 5
  000cb	0f 84 d9 01 00
	00		 je	 $LN10@DecryptDat
  000d1	e9 b3 03 00 00	 jmp	 $LN1@DecryptDat
$LN20@DecryptDat:

; 1617 : 	{
; 1618 : 	case XTS:
; 1619 : 		ks += EAGetKeyScheduleSize (ea);

  000d6	8b 4c 24 68	 mov	 ecx, DWORD PTR ea$[rsp]
  000da	e8 00 00 00 00	 call	 EAGetKeyScheduleSize
  000df	48 63 c8	 movsxd	 rcx, eax
  000e2	48 8b 44 24 78	 mov	 rax, QWORD PTR ks$[rsp]
  000e7	48 03 c1	 add	 rax, rcx
  000ea	48 89 44 24 78	 mov	 QWORD PTR ks$[rsp], rax

; 1620 : 		ks2 += EAGetKeyScheduleSize (ea);

  000ef	8b 4c 24 68	 mov	 ecx, DWORD PTR ea$[rsp]
  000f3	e8 00 00 00 00	 call	 EAGetKeyScheduleSize
  000f8	48 63 c8	 movsxd	 rcx, eax
  000fb	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR ks2$[rsp]
  00103	48 03 c1	 add	 rax, rcx
  00106	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR ks2$[rsp], rax

; 1621 : 
; 1622 : 		for (cipher = EAGetLastCipher (ea); cipher != 0; cipher = EAGetPreviousCipher (ea, cipher))

  0010e	8b 4c 24 68	 mov	 ecx, DWORD PTR ea$[rsp]
  00112	e8 00 00 00 00	 call	 EAGetLastCipher
  00117	89 84 24 80 00
	00 00		 mov	 DWORD PTR cipher$[rsp], eax
  0011e	eb 17		 jmp	 SHORT $LN19@DecryptDat
$LN18@DecryptDat:
  00120	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR cipher$[rsp]
  00127	8b 4c 24 68	 mov	 ecx, DWORD PTR ea$[rsp]
  0012b	e8 00 00 00 00	 call	 EAGetPreviousCipher
  00130	89 84 24 80 00
	00 00		 mov	 DWORD PTR cipher$[rsp], eax
$LN19@DecryptDat:
  00137	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR cipher$[rsp], 0
  0013f	0f 84 8c 00 00
	00		 je	 $LN17@DecryptDat

; 1623 : 		{
; 1624 : 			ks -= CipherGetKeyScheduleSize (cipher);

  00145	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR cipher$[rsp]
  0014c	e8 00 00 00 00	 call	 CipherGetKeyScheduleSize
  00151	48 63 c8	 movsxd	 rcx, eax
  00154	48 8b 44 24 78	 mov	 rax, QWORD PTR ks$[rsp]
  00159	48 2b c1	 sub	 rax, rcx
  0015c	48 89 44 24 78	 mov	 QWORD PTR ks$[rsp], rax

; 1625 : 			ks2 -= CipherGetKeyScheduleSize (cipher);

  00161	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR cipher$[rsp]
  00168	e8 00 00 00 00	 call	 CipherGetKeyScheduleSize
  0016d	48 63 c8	 movsxd	 rcx, eax
  00170	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR ks2$[rsp]
  00178	48 2b c1	 sub	 rax, rcx
  0017b	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR ks2$[rsp], rax

; 1626 : 
; 1627 : 			DecryptBufferXTS (buf,
; 1628 : 				nbrUnits * ENCRYPTION_DATA_UNIT_SIZE,
; 1629 : 				structUnitNo,
; 1630 : 				0,
; 1631 : 				ks,
; 1632 : 				ks2,
; 1633 : 				cipher);

  00183	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR nbrUnits$[rsp]
  0018b	48 69 d2 00 02
	00 00		 imul	 rdx, 512		; 00000200H
  00192	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR cipher$[rsp]
  00199	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0019d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR ks2$[rsp]
  001a5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001aa	48 8b 44 24 78	 mov	 rax, QWORD PTR ks$[rsp]
  001af	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b4	45 33 c9	 xor	 r9d, r9d
  001b7	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR structUnitNo$[rsp]
  001bf	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  001c7	e8 00 00 00 00	 call	 DecryptBufferXTS

; 1634 : 		}

  001cc	e9 4f ff ff ff	 jmp	 $LN18@DecryptDat
$LN17@DecryptDat:

; 1635 : 		break;

  001d1	e9 d2 02 00 00	 jmp	 $LN21@DecryptDat
$LN16@DecryptDat:

; 1636 : 
; 1637 : #ifndef TC_NO_COMPILER_INT64
; 1638 : 	case LRW:
; 1639 : 
; 1640 : 		/* Deprecated/legacy */
; 1641 : 
; 1642 : 		switch (CipherGetBlockSize (EAGetFirstCipher (ea)))

  001d6	8b 4c 24 68	 mov	 ecx, DWORD PTR ea$[rsp]
  001da	e8 00 00 00 00	 call	 EAGetFirstCipher
  001df	8b c8		 mov	 ecx, eax
  001e1	e8 00 00 00 00	 call	 CipherGetBlockSize
  001e6	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv135[rsp], eax
  001ed	83 bc 24 94 00
	00 00 08	 cmp	 DWORD PTR tv135[rsp], 8
  001f5	74 0f		 je	 SHORT $LN13@DecryptDat
  001f7	83 bc 24 94 00
	00 00 10	 cmp	 DWORD PTR tv135[rsp], 16
  001ff	74 45		 je	 SHORT $LN12@DecryptDat
  00201	e9 80 00 00 00	 jmp	 $LN11@DecryptDat
$LN13@DecryptDat:

; 1643 : 		{
; 1644 : 		case 8:
; 1645 : 			DecryptBufferLRW64 (buf,
; 1646 : 				(unsigned __int64) nbrUnits * ENCRYPTION_DATA_UNIT_SIZE,
; 1647 : 				DataUnit2LRWIndex (unitNo, 8, ci),
; 1648 : 				ci);

  00206	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR ci$[rsp]
  0020e	ba 08 00 00 00	 mov	 edx, 8
  00213	48 8b 4c 24 60	 mov	 rcx, QWORD PTR unitNo$[rsp]
  00218	e8 00 00 00 00	 call	 DataUnit2LRWIndex
  0021d	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR nbrUnits$[rsp]
  00225	48 69 d2 00 02
	00 00		 imul	 rdx, 512		; 00000200H
  0022c	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR ci$[rsp]
  00234	4c 8b c0	 mov	 r8, rax
  00237	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  0023f	e8 00 00 00 00	 call	 DecryptBufferLRW64

; 1649 : 			break;

  00244	eb 5f		 jmp	 SHORT $LN14@DecryptDat
$LN12@DecryptDat:

; 1650 : 
; 1651 : 		case 16:
; 1652 : 			DecryptBufferLRW128 (buf,
; 1653 : 				(unsigned __int64) nbrUnits * ENCRYPTION_DATA_UNIT_SIZE,
; 1654 : 				DataUnit2LRWIndex (unitNo, 16, ci),
; 1655 : 				ci);

  00246	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR ci$[rsp]
  0024e	ba 10 00 00 00	 mov	 edx, 16
  00253	48 8b 4c 24 60	 mov	 rcx, QWORD PTR unitNo$[rsp]
  00258	e8 00 00 00 00	 call	 DataUnit2LRWIndex
  0025d	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR nbrUnits$[rsp]
  00265	48 69 d2 00 02
	00 00		 imul	 rdx, 512		; 00000200H
  0026c	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR ci$[rsp]
  00274	4c 8b c0	 mov	 r8, rax
  00277	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  0027f	e8 00 00 00 00	 call	 DecryptBufferLRW128

; 1656 : 			break;

  00284	eb 1f		 jmp	 SHORT $LN14@DecryptDat
$LN11@DecryptDat:

; 1657 : 
; 1658 : 		default:
; 1659 : 			TC_THROW_FATAL_EXCEPTION;

  00286	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  0028f	45 33 c9	 xor	 r9d, r9d
  00292	45 33 c0	 xor	 r8d, r8d
  00295	ba 7b 06 00 00	 mov	 edx, 1659		; 0000067bH
  0029a	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  0029f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx
$LN14@DecryptDat:

; 1660 : 		}
; 1661 : 		break;

  002a5	e9 fe 01 00 00	 jmp	 $LN21@DecryptDat
$LN10@DecryptDat:
$LN9@DecryptDat:

; 1662 : 
; 1663 : 	case CBC:
; 1664 : 	case INNER_CBC:
; 1665 : 
; 1666 : 		/* Deprecated/legacy */
; 1667 : 
; 1668 : 		while (nbrUnits--)

  002aa	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR nbrUnits$[rsp]
  002b2	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR nbrUnits$[rsp]
  002ba	48 83 e8 01	 sub	 rax, 1
  002be	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR nbrUnits$[rsp], rax
  002c6	48 85 c9	 test	 rcx, rcx
  002c9	0f 84 ff 00 00
	00		 je	 $LN8@DecryptDat

; 1669 : 		{
; 1670 : 			ks += EAGetKeyScheduleSize (ea);

  002cf	8b 4c 24 68	 mov	 ecx, DWORD PTR ea$[rsp]
  002d3	e8 00 00 00 00	 call	 EAGetKeyScheduleSize
  002d8	48 63 c8	 movsxd	 rcx, eax
  002db	48 8b 44 24 78	 mov	 rax, QWORD PTR ks$[rsp]
  002e0	48 03 c1	 add	 rax, rcx
  002e3	48 89 44 24 78	 mov	 QWORD PTR ks$[rsp], rax

; 1671 : 			for (cipher = EAGetLastCipher (ea); cipher != 0; cipher = EAGetPreviousCipher (ea, cipher))

  002e8	8b 4c 24 68	 mov	 ecx, DWORD PTR ea$[rsp]
  002ec	e8 00 00 00 00	 call	 EAGetLastCipher
  002f1	89 84 24 80 00
	00 00		 mov	 DWORD PTR cipher$[rsp], eax
  002f8	eb 17		 jmp	 SHORT $LN7@DecryptDat
$LN6@DecryptDat:
  002fa	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR cipher$[rsp]
  00301	8b 4c 24 68	 mov	 ecx, DWORD PTR ea$[rsp]
  00305	e8 00 00 00 00	 call	 EAGetPreviousCipher
  0030a	89 84 24 80 00
	00 00		 mov	 DWORD PTR cipher$[rsp], eax
$LN7@DecryptDat:
  00311	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR cipher$[rsp], 0
  00319	0f 84 86 00 00
	00		 je	 $LN5@DecryptDat

; 1672 : 			{
; 1673 : 				InitSectorIVAndWhitening (unitNo, CipherGetBlockSize (cipher), sectorIV, iv64, secWhitening);

  0031f	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR cipher$[rsp]
  00326	e8 00 00 00 00	 call	 CipherGetBlockSize
  0032b	8b d0		 mov	 edx, eax
  0032d	48 8d 44 24 40	 lea	 rax, QWORD PTR secWhitening$[rsp]
  00332	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00337	4c 8b 4c 24 48	 mov	 r9, QWORD PTR iv64$[rsp]
  0033c	4c 8d 44 24 50	 lea	 r8, QWORD PTR sectorIV$[rsp]
  00341	48 8b 4c 24 60	 mov	 rcx, QWORD PTR unitNo$[rsp]
  00346	e8 00 00 00 00	 call	 InitSectorIVAndWhitening

; 1674 : 
; 1675 : 				ks -= CipherGetKeyScheduleSize (cipher);

  0034b	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR cipher$[rsp]
  00352	e8 00 00 00 00	 call	 CipherGetKeyScheduleSize
  00357	48 63 c8	 movsxd	 rcx, eax
  0035a	48 8b 44 24 78	 mov	 rax, QWORD PTR ks$[rsp]
  0035f	48 2b c1	 sub	 rax, rcx
  00362	48 89 44 24 78	 mov	 QWORD PTR ks$[rsp], rax

; 1676 : 
; 1677 : 				DecryptBufferCBC ((unsigned __int32 *) buf,
; 1678 : 					ENCRYPTION_DATA_UNIT_SIZE,
; 1679 : 					ks,
; 1680 : 					sectorIV,
; 1681 : 					secWhitening,
; 1682 : 					0,
; 1683 : 					cipher);

  00367	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR cipher$[rsp]
  0036e	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00372	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0037a	48 8d 44 24 40	 lea	 rax, QWORD PTR secWhitening$[rsp]
  0037f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00384	4c 8d 4c 24 50	 lea	 r9, QWORD PTR sectorIV$[rsp]
  00389	4c 8b 44 24 78	 mov	 r8, QWORD PTR ks$[rsp]
  0038e	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00393	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  0039b	e8 00 00 00 00	 call	 DecryptBufferCBC

; 1684 : 			}

  003a0	e9 55 ff ff ff	 jmp	 $LN6@DecryptDat
$LN5@DecryptDat:

; 1685 : 			buf += ENCRYPTION_DATA_UNIT_SIZE;

  003a5	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  003ad	48 05 00 02 00
	00		 add	 rax, 512		; 00000200H
  003b3	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR buf$[rsp], rax

; 1686 : 			unitNo++;

  003bb	48 8b 44 24 60	 mov	 rax, QWORD PTR unitNo$[rsp]
  003c0	48 83 c0 01	 add	 rax, 1
  003c4	48 89 44 24 60	 mov	 QWORD PTR unitNo$[rsp], rax

; 1687 : 		}

  003c9	e9 dc fe ff ff	 jmp	 $LN9@DecryptDat
$LN8@DecryptDat:

; 1688 : 		break;

  003ce	e9 d5 00 00 00	 jmp	 $LN21@DecryptDat
$LN4@DecryptDat:
$LN3@DecryptDat:

; 1689 : 
; 1690 : 	case OUTER_CBC:
; 1691 : 
; 1692 : 		/* Deprecated/legacy */
; 1693 : 
; 1694 : 		while (nbrUnits--)

  003d3	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR nbrUnits$[rsp]
  003db	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR nbrUnits$[rsp]
  003e3	48 83 e8 01	 sub	 rax, 1
  003e7	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR nbrUnits$[rsp], rax
  003ef	48 85 c9	 test	 rcx, rcx
  003f2	0f 84 8f 00 00
	00		 je	 $LN2@DecryptDat

; 1695 : 		{
; 1696 : 			InitSectorIVAndWhitening (unitNo, CipherGetBlockSize (EAGetFirstCipher (ea)), sectorIV, iv64, secWhitening);

  003f8	8b 4c 24 68	 mov	 ecx, DWORD PTR ea$[rsp]
  003fc	e8 00 00 00 00	 call	 EAGetFirstCipher
  00401	8b c8		 mov	 ecx, eax
  00403	e8 00 00 00 00	 call	 CipherGetBlockSize
  00408	8b d0		 mov	 edx, eax
  0040a	48 8d 44 24 40	 lea	 rax, QWORD PTR secWhitening$[rsp]
  0040f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00414	4c 8b 4c 24 48	 mov	 r9, QWORD PTR iv64$[rsp]
  00419	4c 8d 44 24 50	 lea	 r8, QWORD PTR sectorIV$[rsp]
  0041e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR unitNo$[rsp]
  00423	e8 00 00 00 00	 call	 InitSectorIVAndWhitening

; 1697 : 
; 1698 : 			DecryptBufferCBC ((unsigned __int32 *) buf,
; 1699 : 				ENCRYPTION_DATA_UNIT_SIZE,
; 1700 : 				ks,
; 1701 : 				sectorIV,
; 1702 : 				secWhitening,
; 1703 : 				ea,
; 1704 : 				0);

  00428	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  00430	8b 44 24 68	 mov	 eax, DWORD PTR ea$[rsp]
  00434	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00438	48 8d 44 24 40	 lea	 rax, QWORD PTR secWhitening$[rsp]
  0043d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00442	4c 8d 4c 24 50	 lea	 r9, QWORD PTR sectorIV$[rsp]
  00447	4c 8b 44 24 78	 mov	 r8, QWORD PTR ks$[rsp]
  0044c	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00451	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00459	e8 00 00 00 00	 call	 DecryptBufferCBC

; 1705 : 
; 1706 : 			buf += ENCRYPTION_DATA_UNIT_SIZE;

  0045e	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00466	48 05 00 02 00
	00		 add	 rax, 512		; 00000200H
  0046c	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR buf$[rsp], rax

; 1707 : 			unitNo++;

  00474	48 8b 44 24 60	 mov	 rax, QWORD PTR unitNo$[rsp]
  00479	48 83 c0 01	 add	 rax, 1
  0047d	48 89 44 24 60	 mov	 QWORD PTR unitNo$[rsp], rax

; 1708 : 		}

  00482	e9 4c ff ff ff	 jmp	 $LN3@DecryptDat
$LN2@DecryptDat:

; 1709 : 		break;

  00487	eb 1f		 jmp	 SHORT $LN21@DecryptDat
$LN1@DecryptDat:

; 1710 : #endif // #ifndef TC_NO_COMPILER_INT64
; 1711 : 
; 1712 : 	default:		
; 1713 : 		// Unknown/wrong ID
; 1714 : 		TC_THROW_FATAL_EXCEPTION;

  00489	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  00492	45 33 c9	 xor	 r9d, r9d
  00495	45 33 c0	 xor	 r8d, r8d
  00498	ba b2 06 00 00	 mov	 edx, 1714		; 000006b2H
  0049d	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  004a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx
$LN21@DecryptDat:
$LN24@DecryptDat:

; 1715 : 	}
; 1716 : }

  004a8	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  004af	c3		 ret	 0
DecryptDataUnitsCurrentThread ENDP
_TEXT	ENDS
PUBLIC	DecryptBuffer
;	COMDAT pdata
pdata	SEGMENT
$pdata$DecryptBuffer DD imagerel $LN21
	DD	imagerel $LN21+829
	DD	imagerel $unwind$DecryptBuffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DecryptBuffer DD 021601H
	DD	0110116H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT DecryptBuffer
_TEXT	SEGMENT
ks$29450 = 64
dataUnitNo$29452 = 72
cipher$29453 = 80
ks2$29451 = 88
ks$29469 = 96
cipher$29470 = 104
tv65 = 108
tv133 = 112
buf$ = 144
len$ = 152
cryptoInfo$ = 160
DecryptBuffer PROC					; COMDAT

; 1497 : {

$LN21:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1498 : 	switch (cryptoInfo->mode)

  00016	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  0001e	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00021	89 44 24 6c	 mov	 DWORD PTR tv65[rsp], eax
  00025	83 7c 24 6c 01	 cmp	 DWORD PTR tv65[rsp], 1
  0002a	74 31		 je	 SHORT $LN16@DecryptBuf@7
  0002c	83 7c 24 6c 02	 cmp	 DWORD PTR tv65[rsp], 2
  00031	0f 84 29 01 00
	00		 je	 $LN12@DecryptBuf@7
  00037	83 7c 24 6c 03	 cmp	 DWORD PTR tv65[rsp], 3
  0003c	0f 84 b6 01 00
	00		 je	 $LN6@DecryptBuf@7
  00042	83 7c 24 6c 04	 cmp	 DWORD PTR tv65[rsp], 4
  00047	0f 84 6e 02 00
	00		 je	 $LN2@DecryptBuf@7
  0004d	83 7c 24 6c 05	 cmp	 DWORD PTR tv65[rsp], 5
  00052	0f 84 a0 01 00
	00		 je	 $LN6@DecryptBuf@7
  00058	e9 b9 02 00 00	 jmp	 $LN1@DecryptBuf@7
$LN16@DecryptBuf@7:

; 1499 : 	{
; 1500 : 	case XTS:
; 1501 : 		{
; 1502 : 			unsigned __int8 *ks = cryptoInfo->ks + EAGetKeyScheduleSize (cryptoInfo->ea);

  0005d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00065	8b 08		 mov	 ecx, DWORD PTR [rax]
  00067	e8 00 00 00 00	 call	 EAGetKeyScheduleSize
  0006c	48 63 c8	 movsxd	 rcx, eax
  0006f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00077	48 8d 44 08 08	 lea	 rax, QWORD PTR [rax+rcx+8]
  0007c	48 89 44 24 40	 mov	 QWORD PTR ks$29450[rsp], rax

; 1503 : 			unsigned __int8 *ks2 = cryptoInfo->ks2 + EAGetKeyScheduleSize (cryptoInfo->ea);

  00081	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00089	8b 08		 mov	 ecx, DWORD PTR [rax]
  0008b	e8 00 00 00 00	 call	 EAGetKeyScheduleSize
  00090	48 63 c8	 movsxd	 rcx, eax
  00093	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  0009b	48 8d 84 08 d4
	14 00 00	 lea	 rax, QWORD PTR [rax+rcx+5332]
  000a3	48 89 44 24 58	 mov	 QWORD PTR ks2$29451[rsp], rax

; 1504 : 			UINT64_STRUCT dataUnitNo;
; 1505 : 			int cipher;
; 1506 : 
; 1507 : 			// When encrypting/decrypting a buffer (typically a volume header) the sequential number
; 1508 : 			// of the first XTS data unit in the buffer is always 0 and the start of the buffer is
; 1509 : 			// always assumed to be aligned with the start of the data unit 0.
; 1510 : 			dataUnitNo.LowPart = 0;

  000a8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR dataUnitNo$29452[rsp], 0

; 1511 : 			dataUnitNo.HighPart = 0;

  000b0	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR dataUnitNo$29452[rsp+4], 0

; 1512 : 
; 1513 : 			for (cipher = EAGetLastCipher (cryptoInfo->ea);
; 1514 : 				cipher != 0;
; 1515 : 				cipher = EAGetPreviousCipher (cryptoInfo->ea, cipher))

  000b8	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  000c0	8b 08		 mov	 ecx, DWORD PTR [rax]
  000c2	e8 00 00 00 00	 call	 EAGetLastCipher
  000c7	89 44 24 50	 mov	 DWORD PTR cipher$29453[rsp], eax
  000cb	eb 17		 jmp	 SHORT $LN15@DecryptBuf@7
$LN14@DecryptBuf@7:
  000cd	8b 54 24 50	 mov	 edx, DWORD PTR cipher$29453[rsp]
  000d1	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  000d9	8b 08		 mov	 ecx, DWORD PTR [rax]
  000db	e8 00 00 00 00	 call	 EAGetPreviousCipher
  000e0	89 44 24 50	 mov	 DWORD PTR cipher$29453[rsp], eax
$LN15@DecryptBuf@7:
  000e4	83 7c 24 50 00	 cmp	 DWORD PTR cipher$29453[rsp], 0
  000e9	74 70		 je	 SHORT $LN13@DecryptBuf@7

; 1516 : 			{
; 1517 : 				ks -= CipherGetKeyScheduleSize (cipher);

  000eb	8b 4c 24 50	 mov	 ecx, DWORD PTR cipher$29453[rsp]
  000ef	e8 00 00 00 00	 call	 CipherGetKeyScheduleSize
  000f4	48 63 c8	 movsxd	 rcx, eax
  000f7	48 8b 44 24 40	 mov	 rax, QWORD PTR ks$29450[rsp]
  000fc	48 2b c1	 sub	 rax, rcx
  000ff	48 89 44 24 40	 mov	 QWORD PTR ks$29450[rsp], rax

; 1518 : 				ks2 -= CipherGetKeyScheduleSize (cipher);

  00104	8b 4c 24 50	 mov	 ecx, DWORD PTR cipher$29453[rsp]
  00108	e8 00 00 00 00	 call	 CipherGetKeyScheduleSize
  0010d	48 63 c8	 movsxd	 rcx, eax
  00110	48 8b 44 24 58	 mov	 rax, QWORD PTR ks2$29451[rsp]
  00115	48 2b c1	 sub	 rax, rcx
  00118	48 89 44 24 58	 mov	 QWORD PTR ks2$29451[rsp], rax

; 1519 : 
; 1520 : 				DecryptBufferXTS (buf, len, &dataUnitNo, 0, ks, ks2, cipher);

  0011d	8b 44 24 50	 mov	 eax, DWORD PTR cipher$29453[rsp]
  00121	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00125	48 8b 44 24 58	 mov	 rax, QWORD PTR ks2$29451[rsp]
  0012a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0012f	48 8b 44 24 40	 mov	 rax, QWORD PTR ks$29450[rsp]
  00134	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00139	45 33 c9	 xor	 r9d, r9d
  0013c	4c 8d 44 24 48	 lea	 r8, QWORD PTR dataUnitNo$29452[rsp]
  00141	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR len$[rsp]
  00149	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00151	e8 00 00 00 00	 call	 DecryptBufferXTS

; 1521 : 			}

  00156	e9 72 ff ff ff	 jmp	 $LN14@DecryptBuf@7
$LN13@DecryptBuf@7:

; 1522 : 		}
; 1523 : 		break;

  0015b	e9 d5 01 00 00	 jmp	 $LN17@DecryptBuf@7
$LN12@DecryptBuf@7:

; 1524 : 
; 1525 : #ifndef TC_NO_COMPILER_INT64
; 1526 : 	case LRW:
; 1527 : 
; 1528 : 		/* Deprecated/legacy */
; 1529 : 
; 1530 : 		switch (CipherGetBlockSize (EAGetFirstCipher (cryptoInfo->ea)))

  00160	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00168	8b 08		 mov	 ecx, DWORD PTR [rax]
  0016a	e8 00 00 00 00	 call	 EAGetFirstCipher
  0016f	8b c8		 mov	 ecx, eax
  00171	e8 00 00 00 00	 call	 CipherGetBlockSize
  00176	89 44 24 70	 mov	 DWORD PTR tv133[rsp], eax
  0017a	83 7c 24 70 08	 cmp	 DWORD PTR tv133[rsp], 8
  0017f	74 09		 je	 SHORT $LN9@DecryptBuf@7
  00181	83 7c 24 70 10	 cmp	 DWORD PTR tv133[rsp], 16
  00186	74 27		 je	 SHORT $LN8@DecryptBuf@7
  00188	eb 4a		 jmp	 SHORT $LN7@DecryptBuf@7
$LN9@DecryptBuf@7:

; 1531 : 		{
; 1532 : 		case 8:
; 1533 : 			DecryptBufferLRW64 (buf, (unsigned __int64) len, 1, cryptoInfo);

  0018a	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR cryptoInfo$[rsp]
  00192	41 b8 01 00 00
	00		 mov	 r8d, 1
  00198	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR len$[rsp]
  001a0	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  001a8	e8 00 00 00 00	 call	 DecryptBufferLRW64

; 1534 : 			break;

  001ad	eb 44		 jmp	 SHORT $LN10@DecryptBuf@7
$LN8@DecryptBuf@7:

; 1535 : 
; 1536 : 		case 16:
; 1537 : 			DecryptBufferLRW128 (buf, (unsigned __int64) len, 1, cryptoInfo);

  001af	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR cryptoInfo$[rsp]
  001b7	41 b8 01 00 00
	00		 mov	 r8d, 1
  001bd	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR len$[rsp]
  001c5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  001cd	e8 00 00 00 00	 call	 DecryptBufferLRW128

; 1538 : 			break;

  001d2	eb 1f		 jmp	 SHORT $LN10@DecryptBuf@7
$LN7@DecryptBuf@7:

; 1539 : 
; 1540 : 		default:
; 1541 : 			TC_THROW_FATAL_EXCEPTION;

  001d4	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  001dd	45 33 c9	 xor	 r9d, r9d
  001e0	45 33 c0	 xor	 r8d, r8d
  001e3	ba 05 06 00 00	 mov	 edx, 1541		; 00000605H
  001e8	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  001ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx
$LN10@DecryptBuf@7:

; 1542 : 		}
; 1543 : 		break;

  001f3	e9 3d 01 00 00	 jmp	 $LN17@DecryptBuf@7
$LN6@DecryptBuf@7:

; 1544 : 
; 1545 : 	case CBC:
; 1546 : 	case INNER_CBC:
; 1547 : 		{
; 1548 : 			/* Deprecated/legacy */
; 1549 : 
; 1550 : 			unsigned __int8 *ks = cryptoInfo->ks + EAGetKeyScheduleSize (cryptoInfo->ea);

  001f8	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00200	8b 08		 mov	 ecx, DWORD PTR [rax]
  00202	e8 00 00 00 00	 call	 EAGetKeyScheduleSize
  00207	48 63 c8	 movsxd	 rcx, eax
  0020a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00212	48 8d 44 08 08	 lea	 rax, QWORD PTR [rax+rcx+8]
  00217	48 89 44 24 60	 mov	 QWORD PTR ks$29469[rsp], rax

; 1551 : 			int cipher;
; 1552 : 			for (cipher = EAGetLastCipher (cryptoInfo->ea);
; 1553 : 				cipher != 0;
; 1554 : 				cipher = EAGetPreviousCipher (cryptoInfo->ea, cipher))

  0021c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00224	8b 08		 mov	 ecx, DWORD PTR [rax]
  00226	e8 00 00 00 00	 call	 EAGetLastCipher
  0022b	89 44 24 68	 mov	 DWORD PTR cipher$29470[rsp], eax
  0022f	eb 17		 jmp	 SHORT $LN5@DecryptBuf@7
$LN4@DecryptBuf@7:
  00231	8b 54 24 68	 mov	 edx, DWORD PTR cipher$29470[rsp]
  00235	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  0023d	8b 08		 mov	 ecx, DWORD PTR [rax]
  0023f	e8 00 00 00 00	 call	 EAGetPreviousCipher
  00244	89 44 24 68	 mov	 DWORD PTR cipher$29470[rsp], eax
$LN5@DecryptBuf@7:
  00248	83 7c 24 68 00	 cmp	 DWORD PTR cipher$29470[rsp], 0
  0024d	74 6a		 je	 SHORT $LN3@DecryptBuf@7

; 1555 : 			{
; 1556 : 				ks -= CipherGetKeyScheduleSize (cipher);

  0024f	8b 4c 24 68	 mov	 ecx, DWORD PTR cipher$29470[rsp]
  00253	e8 00 00 00 00	 call	 CipherGetKeyScheduleSize
  00258	48 63 c8	 movsxd	 rcx, eax
  0025b	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$29469[rsp]
  00260	48 2b c1	 sub	 rax, rcx
  00263	48 89 44 24 60	 mov	 QWORD PTR ks$29469[rsp], rax

; 1557 : 
; 1558 : 				DecryptBufferCBC ((unsigned __int32 *) buf,
; 1559 : 					(unsigned int) len,
; 1560 : 					ks,
; 1561 : 					(unsigned __int32 *) cryptoInfo->k2,
; 1562 : 					(unsigned __int32 *) &cryptoInfo->k2[8],
; 1563 : 					0,
; 1564 : 					cipher);

  00268	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR cryptoInfo$[rsp]
  00270	48 81 c1 b0 42
	00 00		 add	 rcx, 17072		; 000042b0H
  00277	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR cryptoInfo$[rsp]
  0027f	49 81 c1 a8 42
	00 00		 add	 r9, 17064		; 000042a8H
  00286	8b 44 24 68	 mov	 eax, DWORD PTR cipher$29470[rsp]
  0028a	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0028e	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00296	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0029b	4c 8b 44 24 60	 mov	 r8, QWORD PTR ks$29469[rsp]
  002a0	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR len$[rsp]
  002a7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  002af	e8 00 00 00 00	 call	 DecryptBufferCBC

; 1565 : 			}

  002b4	e9 78 ff ff ff	 jmp	 $LN4@DecryptBuf@7
$LN3@DecryptBuf@7:

; 1566 : 		}
; 1567 : 		break;

  002b9	eb 7a		 jmp	 SHORT $LN17@DecryptBuf@7
$LN2@DecryptBuf@7:

; 1568 : 
; 1569 : 	case OUTER_CBC:
; 1570 : 
; 1571 : 		/* Deprecated/legacy */
; 1572 : 
; 1573 : 		DecryptBufferCBC ((unsigned __int32 *) buf,
; 1574 : 			(unsigned int) len,
; 1575 : 			cryptoInfo->ks,
; 1576 : 			(unsigned __int32 *) cryptoInfo->k2,
; 1577 : 			(unsigned __int32 *) &cryptoInfo->k2[8],
; 1578 : 			cryptoInfo->ea,
; 1579 : 			0);

  002bb	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR cryptoInfo$[rsp]
  002c3	48 81 c1 b0 42
	00 00		 add	 rcx, 17072		; 000042b0H
  002ca	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR cryptoInfo$[rsp]
  002d2	49 81 c1 a8 42
	00 00		 add	 r9, 17064		; 000042a8H
  002d9	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR cryptoInfo$[rsp]
  002e1	49 83 c0 08	 add	 r8, 8
  002e5	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  002ed	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  002f5	8b 00		 mov	 eax, DWORD PTR [rax]
  002f7	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  002fb	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00300	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR len$[rsp]
  00307	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  0030f	e8 00 00 00 00	 call	 DecryptBufferCBC

; 1580 : 
; 1581 : 		break;

  00314	eb 1f		 jmp	 SHORT $LN17@DecryptBuf@7
$LN1@DecryptBuf@7:

; 1582 : #endif	// #ifndef TC_NO_COMPILER_INT64
; 1583 : 
; 1584 : 	default:		
; 1585 : 		// Unknown/wrong ID
; 1586 : 		TC_THROW_FATAL_EXCEPTION;

  00316	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  0031f	45 33 c9	 xor	 r9d, r9d
  00322	45 33 c0	 xor	 r8d, r8d
  00325	ba 32 06 00 00	 mov	 edx, 1586		; 00000632H
  0032a	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  0032f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx
$LN17@DecryptBuf@7:
$LN20@DecryptBuf@7:

; 1587 : 	}
; 1588 : }

  00335	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0033c	c3		 ret	 0
DecryptBuffer ENDP
_TEXT	ENDS
PUBLIC	EncryptDataUnitsCurrentThread
;	COMDAT pdata
pdata	SEGMENT
$pdata$EncryptDataUnitsCurrentThread DD imagerel $LN25
	DD	imagerel $LN25+1146
	DD	imagerel $unwind$EncryptDataUnitsCurrentThread
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EncryptDataUnitsCurrentThread DD 021b01H
	DD	015011bH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EncryptDataUnitsCurrentThread
_TEXT	SEGMENT
secWhitening$ = 64
iv64$ = 72
sectorIV$ = 80
unitNo$ = 96
ea$ = 104
iv$ = 112
ks$ = 120
cipher$ = 128
ks2$ = 136
tv68 = 144
tv95 = 148
buf$ = 176
structUnitNo$ = 184
nbrUnits$ = 192
ci$ = 200
EncryptDataUnitsCurrentThread PROC			; COMDAT

; 1378 : {

$LN25:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1379 : 	int ea = ci->ea;

  0001b	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00023	8b 00		 mov	 eax, DWORD PTR [rax]
  00025	89 44 24 68	 mov	 DWORD PTR ea$[rsp], eax

; 1380 : 	unsigned __int8 *ks = ci->ks;

  00029	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00031	48 83 c0 08	 add	 rax, 8
  00035	48 89 44 24 78	 mov	 QWORD PTR ks$[rsp], rax

; 1381 : 	unsigned __int8 *ks2 = ci->ks2;

  0003a	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00042	48 05 d4 14 00
	00		 add	 rax, 5332		; 000014d4H
  00048	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR ks2$[rsp], rax

; 1382 : 	int cipher;
; 1383 : 
; 1384 : #ifndef TC_NO_COMPILER_INT64
; 1385 : 	void *iv = ci->k2;									// Deprecated/legacy

  00050	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00058	48 05 a8 42 00
	00		 add	 rax, 17064		; 000042a8H
  0005e	48 89 44 24 70	 mov	 QWORD PTR iv$[rsp], rax

; 1386 : 	unsigned __int64 unitNo = structUnitNo->Value;

  00063	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR structUnitNo$[rsp]
  0006b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006e	48 89 44 24 60	 mov	 QWORD PTR unitNo$[rsp], rax

; 1387 : 	unsigned __int64 *iv64 = (unsigned __int64 *) iv;	// Deprecated/legacy

  00073	48 8b 44 24 70	 mov	 rax, QWORD PTR iv$[rsp]
  00078	48 89 44 24 48	 mov	 QWORD PTR iv64$[rsp], rax

; 1388 : 	unsigned __int32 sectorIV[4];						// Deprecated/legacy
; 1389 : 	unsigned __int32 secWhitening[2];					// Deprecated/legacy
; 1390 : #endif
; 1391 : 
; 1392 : 	switch (ci->mode)

  0007d	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR ci$[rsp]
  00085	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00088	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv68[rsp], eax
  0008f	83 bc 24 90 00
	00 00 01	 cmp	 DWORD PTR tv68[rsp], 1
  00097	74 3d		 je	 SHORT $LN20@EncryptDat
  00099	83 bc 24 90 00
	00 00 02	 cmp	 DWORD PTR tv68[rsp], 2
  000a1	0f 84 f7 00 00
	00		 je	 $LN16@EncryptDat
  000a7	83 bc 24 90 00
	00 00 03	 cmp	 DWORD PTR tv68[rsp], 3
  000af	0f 84 bd 01 00
	00		 je	 $LN10@EncryptDat
  000b5	83 bc 24 90 00
	00 00 04	 cmp	 DWORD PTR tv68[rsp], 4
  000bd	0f 84 da 02 00
	00		 je	 $LN4@EncryptDat
  000c3	83 bc 24 90 00
	00 00 05	 cmp	 DWORD PTR tv68[rsp], 5
  000cb	0f 84 a1 01 00
	00		 je	 $LN10@EncryptDat
  000d1	e9 7d 03 00 00	 jmp	 $LN1@EncryptDat
$LN20@EncryptDat:

; 1393 : 	{
; 1394 : 	case XTS:
; 1395 : 		for (cipher = EAGetFirstCipher (ea); cipher != 0; cipher = EAGetNextCipher (ea, cipher))

  000d6	8b 4c 24 68	 mov	 ecx, DWORD PTR ea$[rsp]
  000da	e8 00 00 00 00	 call	 EAGetFirstCipher
  000df	89 84 24 80 00
	00 00		 mov	 DWORD PTR cipher$[rsp], eax
  000e6	eb 17		 jmp	 SHORT $LN19@EncryptDat
$LN18@EncryptDat:
  000e8	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR cipher$[rsp]
  000ef	8b 4c 24 68	 mov	 ecx, DWORD PTR ea$[rsp]
  000f3	e8 00 00 00 00	 call	 EAGetNextCipher
  000f8	89 84 24 80 00
	00 00		 mov	 DWORD PTR cipher$[rsp], eax
$LN19@EncryptDat:
  000ff	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR cipher$[rsp], 0
  00107	0f 84 8c 00 00
	00		 je	 $LN17@EncryptDat

; 1396 : 		{
; 1397 : 			EncryptBufferXTS (buf,
; 1398 : 				nbrUnits * ENCRYPTION_DATA_UNIT_SIZE,
; 1399 : 				structUnitNo,
; 1400 : 				0,
; 1401 : 				ks,
; 1402 : 				ks2,
; 1403 : 				cipher);

  0010d	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR nbrUnits$[rsp]
  00115	48 69 d2 00 02
	00 00		 imul	 rdx, 512		; 00000200H
  0011c	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR cipher$[rsp]
  00123	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00127	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR ks2$[rsp]
  0012f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00134	48 8b 44 24 78	 mov	 rax, QWORD PTR ks$[rsp]
  00139	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0013e	45 33 c9	 xor	 r9d, r9d
  00141	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR structUnitNo$[rsp]
  00149	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00151	e8 00 00 00 00	 call	 EncryptBufferXTS

; 1404 : 
; 1405 : 			ks += CipherGetKeyScheduleSize (cipher);

  00156	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR cipher$[rsp]
  0015d	e8 00 00 00 00	 call	 CipherGetKeyScheduleSize
  00162	48 63 c8	 movsxd	 rcx, eax
  00165	48 8b 44 24 78	 mov	 rax, QWORD PTR ks$[rsp]
  0016a	48 03 c1	 add	 rax, rcx
  0016d	48 89 44 24 78	 mov	 QWORD PTR ks$[rsp], rax

; 1406 : 			ks2 += CipherGetKeyScheduleSize (cipher);

  00172	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR cipher$[rsp]
  00179	e8 00 00 00 00	 call	 CipherGetKeyScheduleSize
  0017e	48 63 c8	 movsxd	 rcx, eax
  00181	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR ks2$[rsp]
  00189	48 03 c1	 add	 rax, rcx
  0018c	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR ks2$[rsp], rax

; 1407 : 		}

  00194	e9 4f ff ff ff	 jmp	 $LN18@EncryptDat
$LN17@EncryptDat:

; 1408 : 		break;

  00199	e9 d4 02 00 00	 jmp	 $LN21@EncryptDat
$LN16@EncryptDat:

; 1409 : 
; 1410 : #ifndef TC_NO_COMPILER_INT64
; 1411 : 	case LRW:
; 1412 : 
; 1413 : 		/* Deprecated/legacy */
; 1414 : 
; 1415 : 		switch (CipherGetBlockSize (EAGetFirstCipher (ea)))

  0019e	8b 4c 24 68	 mov	 ecx, DWORD PTR ea$[rsp]
  001a2	e8 00 00 00 00	 call	 EAGetFirstCipher
  001a7	8b c8		 mov	 ecx, eax
  001a9	e8 00 00 00 00	 call	 CipherGetBlockSize
  001ae	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv95[rsp], eax
  001b5	83 bc 24 94 00
	00 00 08	 cmp	 DWORD PTR tv95[rsp], 8
  001bd	74 0f		 je	 SHORT $LN13@EncryptDat
  001bf	83 bc 24 94 00
	00 00 10	 cmp	 DWORD PTR tv95[rsp], 16
  001c7	74 45		 je	 SHORT $LN12@EncryptDat
  001c9	e9 80 00 00 00	 jmp	 $LN11@EncryptDat
$LN13@EncryptDat:

; 1416 : 		{
; 1417 : 		case 8:
; 1418 : 			EncryptBufferLRW64 (buf,
; 1419 : 				(unsigned __int64) nbrUnits * ENCRYPTION_DATA_UNIT_SIZE,
; 1420 : 				DataUnit2LRWIndex (unitNo, 8, ci),
; 1421 : 				ci);

  001ce	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR ci$[rsp]
  001d6	ba 08 00 00 00	 mov	 edx, 8
  001db	48 8b 4c 24 60	 mov	 rcx, QWORD PTR unitNo$[rsp]
  001e0	e8 00 00 00 00	 call	 DataUnit2LRWIndex
  001e5	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR nbrUnits$[rsp]
  001ed	48 69 d2 00 02
	00 00		 imul	 rdx, 512		; 00000200H
  001f4	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR ci$[rsp]
  001fc	4c 8b c0	 mov	 r8, rax
  001ff	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00207	e8 00 00 00 00	 call	 EncryptBufferLRW64

; 1422 : 			break;

  0020c	eb 5f		 jmp	 SHORT $LN14@EncryptDat
$LN12@EncryptDat:

; 1423 : 
; 1424 : 		case 16:
; 1425 : 			EncryptBufferLRW128 (buf,
; 1426 : 				(unsigned __int64) nbrUnits * ENCRYPTION_DATA_UNIT_SIZE,
; 1427 : 				DataUnit2LRWIndex (unitNo, 16, ci),
; 1428 : 				ci);

  0020e	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR ci$[rsp]
  00216	ba 10 00 00 00	 mov	 edx, 16
  0021b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR unitNo$[rsp]
  00220	e8 00 00 00 00	 call	 DataUnit2LRWIndex
  00225	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR nbrUnits$[rsp]
  0022d	48 69 d2 00 02
	00 00		 imul	 rdx, 512		; 00000200H
  00234	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR ci$[rsp]
  0023c	4c 8b c0	 mov	 r8, rax
  0023f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00247	e8 00 00 00 00	 call	 EncryptBufferLRW128

; 1429 : 			break;

  0024c	eb 1f		 jmp	 SHORT $LN14@EncryptDat
$LN11@EncryptDat:

; 1430 : 
; 1431 : 		default:
; 1432 : 			TC_THROW_FATAL_EXCEPTION;

  0024e	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  00257	45 33 c9	 xor	 r9d, r9d
  0025a	45 33 c0	 xor	 r8d, r8d
  0025d	ba 98 05 00 00	 mov	 edx, 1432		; 00000598H
  00262	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  00267	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx
$LN14@EncryptDat:

; 1433 : 		}
; 1434 : 		break;

  0026d	e9 00 02 00 00	 jmp	 $LN21@EncryptDat
$LN10@EncryptDat:
$LN9@EncryptDat:

; 1435 : 
; 1436 : 	case CBC:
; 1437 : 	case INNER_CBC:
; 1438 : 
; 1439 : 		/* Deprecated/legacy */
; 1440 : 
; 1441 : 		while (nbrUnits--)

  00272	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR nbrUnits$[rsp]
  0027a	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR nbrUnits$[rsp]
  00282	48 83 e8 01	 sub	 rax, 1
  00286	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR nbrUnits$[rsp], rax
  0028e	48 85 c9	 test	 rcx, rcx
  00291	0f 84 01 01 00
	00		 je	 $LN8@EncryptDat

; 1442 : 		{
; 1443 : 			for (cipher = EAGetFirstCipher (ea); cipher != 0; cipher = EAGetNextCipher (ea, cipher))

  00297	8b 4c 24 68	 mov	 ecx, DWORD PTR ea$[rsp]
  0029b	e8 00 00 00 00	 call	 EAGetFirstCipher
  002a0	89 84 24 80 00
	00 00		 mov	 DWORD PTR cipher$[rsp], eax
  002a7	eb 17		 jmp	 SHORT $LN7@EncryptDat
$LN6@EncryptDat:
  002a9	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR cipher$[rsp]
  002b0	8b 4c 24 68	 mov	 ecx, DWORD PTR ea$[rsp]
  002b4	e8 00 00 00 00	 call	 EAGetNextCipher
  002b9	89 84 24 80 00
	00 00		 mov	 DWORD PTR cipher$[rsp], eax
$LN7@EncryptDat:
  002c0	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR cipher$[rsp], 0
  002c8	0f 84 88 00 00
	00		 je	 $LN5@EncryptDat

; 1444 : 			{
; 1445 : 				InitSectorIVAndWhitening (unitNo, CipherGetBlockSize (cipher), sectorIV, iv64, secWhitening);

  002ce	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR cipher$[rsp]
  002d5	e8 00 00 00 00	 call	 CipherGetBlockSize
  002da	8b d0		 mov	 edx, eax
  002dc	48 8d 44 24 40	 lea	 rax, QWORD PTR secWhitening$[rsp]
  002e1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e6	4c 8b 4c 24 48	 mov	 r9, QWORD PTR iv64$[rsp]
  002eb	4c 8d 44 24 50	 lea	 r8, QWORD PTR sectorIV$[rsp]
  002f0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR unitNo$[rsp]
  002f5	e8 00 00 00 00	 call	 InitSectorIVAndWhitening

; 1446 : 
; 1447 : 				EncryptBufferCBC ((unsigned __int32 *) buf,
; 1448 : 					ENCRYPTION_DATA_UNIT_SIZE,
; 1449 : 					ks,
; 1450 : 					sectorIV,
; 1451 : 					secWhitening,
; 1452 : 					0,
; 1453 : 					cipher);

  002fa	44 8b 9c 24 80
	00 00 00	 mov	 r11d, DWORD PTR cipher$[rsp]
  00302	44 89 5c 24 30	 mov	 DWORD PTR [rsp+48], r11d
  00307	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0030f	48 8d 44 24 40	 lea	 rax, QWORD PTR secWhitening$[rsp]
  00314	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00319	4c 8d 4c 24 50	 lea	 r9, QWORD PTR sectorIV$[rsp]
  0031e	4c 8b 44 24 78	 mov	 r8, QWORD PTR ks$[rsp]
  00323	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00328	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00330	e8 00 00 00 00	 call	 EncryptBufferCBC

; 1454 : 
; 1455 : 				ks += CipherGetKeyScheduleSize (cipher);

  00335	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR cipher$[rsp]
  0033c	e8 00 00 00 00	 call	 CipherGetKeyScheduleSize
  00341	48 63 c8	 movsxd	 rcx, eax
  00344	48 8b 44 24 78	 mov	 rax, QWORD PTR ks$[rsp]
  00349	48 03 c1	 add	 rax, rcx
  0034c	48 89 44 24 78	 mov	 QWORD PTR ks$[rsp], rax

; 1456 : 			}

  00351	e9 53 ff ff ff	 jmp	 $LN6@EncryptDat
$LN5@EncryptDat:

; 1457 : 			ks -= EAGetKeyScheduleSize (ea);

  00356	8b 4c 24 68	 mov	 ecx, DWORD PTR ea$[rsp]
  0035a	e8 00 00 00 00	 call	 EAGetKeyScheduleSize
  0035f	48 63 c8	 movsxd	 rcx, eax
  00362	48 8b 44 24 78	 mov	 rax, QWORD PTR ks$[rsp]
  00367	48 2b c1	 sub	 rax, rcx
  0036a	48 89 44 24 78	 mov	 QWORD PTR ks$[rsp], rax

; 1458 : 			buf += ENCRYPTION_DATA_UNIT_SIZE;

  0036f	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00377	48 05 00 02 00
	00		 add	 rax, 512		; 00000200H
  0037d	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR buf$[rsp], rax

; 1459 : 			unitNo++;

  00385	48 8b 44 24 60	 mov	 rax, QWORD PTR unitNo$[rsp]
  0038a	48 83 c0 01	 add	 rax, 1
  0038e	48 89 44 24 60	 mov	 QWORD PTR unitNo$[rsp], rax

; 1460 : 		}

  00393	e9 da fe ff ff	 jmp	 $LN9@EncryptDat
$LN8@EncryptDat:

; 1461 : 		break;

  00398	e9 d5 00 00 00	 jmp	 $LN21@EncryptDat
$LN4@EncryptDat:
$LN3@EncryptDat:

; 1462 : 
; 1463 : 	case OUTER_CBC:
; 1464 : 
; 1465 : 		/* Deprecated/legacy */
; 1466 : 
; 1467 : 		while (nbrUnits--)

  0039d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR nbrUnits$[rsp]
  003a5	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR nbrUnits$[rsp]
  003ad	48 83 e8 01	 sub	 rax, 1
  003b1	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR nbrUnits$[rsp], rax
  003b9	48 85 c9	 test	 rcx, rcx
  003bc	0f 84 8f 00 00
	00		 je	 $LN2@EncryptDat

; 1468 : 		{
; 1469 : 			InitSectorIVAndWhitening (unitNo, CipherGetBlockSize (EAGetFirstCipher (ea)), sectorIV, iv64, secWhitening);

  003c2	8b 4c 24 68	 mov	 ecx, DWORD PTR ea$[rsp]
  003c6	e8 00 00 00 00	 call	 EAGetFirstCipher
  003cb	8b c8		 mov	 ecx, eax
  003cd	e8 00 00 00 00	 call	 CipherGetBlockSize
  003d2	8b d0		 mov	 edx, eax
  003d4	48 8d 44 24 40	 lea	 rax, QWORD PTR secWhitening$[rsp]
  003d9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003de	4c 8b 4c 24 48	 mov	 r9, QWORD PTR iv64$[rsp]
  003e3	4c 8d 44 24 50	 lea	 r8, QWORD PTR sectorIV$[rsp]
  003e8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR unitNo$[rsp]
  003ed	e8 00 00 00 00	 call	 InitSectorIVAndWhitening

; 1470 : 
; 1471 : 			EncryptBufferCBC ((unsigned __int32 *) buf,
; 1472 : 				ENCRYPTION_DATA_UNIT_SIZE,
; 1473 : 				ks,
; 1474 : 				sectorIV,
; 1475 : 				secWhitening,
; 1476 : 				ea,
; 1477 : 				0);

  003f2	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  003fa	8b 44 24 68	 mov	 eax, DWORD PTR ea$[rsp]
  003fe	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00402	48 8d 44 24 40	 lea	 rax, QWORD PTR secWhitening$[rsp]
  00407	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0040c	4c 8d 4c 24 50	 lea	 r9, QWORD PTR sectorIV$[rsp]
  00411	4c 8b 44 24 78	 mov	 r8, QWORD PTR ks$[rsp]
  00416	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  0041b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00423	e8 00 00 00 00	 call	 EncryptBufferCBC

; 1478 : 
; 1479 : 			buf += ENCRYPTION_DATA_UNIT_SIZE;

  00428	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00430	48 05 00 02 00
	00		 add	 rax, 512		; 00000200H
  00436	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR buf$[rsp], rax

; 1480 : 			unitNo++;

  0043e	48 8b 44 24 60	 mov	 rax, QWORD PTR unitNo$[rsp]
  00443	48 83 c0 01	 add	 rax, 1
  00447	48 89 44 24 60	 mov	 QWORD PTR unitNo$[rsp], rax

; 1481 : 		}

  0044c	e9 4c ff ff ff	 jmp	 $LN3@EncryptDat
$LN2@EncryptDat:

; 1482 : 		break;

  00451	eb 1f		 jmp	 SHORT $LN21@EncryptDat
$LN1@EncryptDat:

; 1483 : #endif	// #ifndef TC_NO_COMPILER_INT64
; 1484 : 
; 1485 : 	default:		
; 1486 : 		// Unknown/wrong ID
; 1487 : 		TC_THROW_FATAL_EXCEPTION;

  00453	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  0045c	45 33 c9	 xor	 r9d, r9d
  0045f	45 33 c0	 xor	 r8d, r8d
  00462	ba cf 05 00 00	 mov	 edx, 1487		; 000005cfH
  00467	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  0046c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx
$LN21@EncryptDat:
$LN24@EncryptDat:

; 1488 : 	}
; 1489 : }

  00472	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00479	c3		 ret	 0
EncryptDataUnitsCurrentThread ENDP
_TEXT	ENDS
PUBLIC	EncryptBuffer
;	COMDAT pdata
pdata	SEGMENT
$pdata$EncryptBuffer DD imagerel $LN21
	DD	imagerel $LN21+771
	DD	imagerel $unwind$EncryptBuffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EncryptBuffer DD 021601H
	DD	0110116H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EncryptBuffer
_TEXT	SEGMENT
ks$29322 = 64
dataUnitNo$29324 = 72
cipher$29325 = 80
ks2$29323 = 88
ks$29343 = 96
cipher$29344 = 104
tv65 = 108
tv93 = 112
buf$ = 144
len$ = 152
cryptoInfo$ = 160
EncryptBuffer PROC					; COMDAT

; 1244 : {

$LN21:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1245 : 	switch (cryptoInfo->mode)

  00016	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  0001e	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00021	89 44 24 6c	 mov	 DWORD PTR tv65[rsp], eax
  00025	83 7c 24 6c 01	 cmp	 DWORD PTR tv65[rsp], 1
  0002a	74 31		 je	 SHORT $LN16@EncryptBuf@7
  0002c	83 7c 24 6c 02	 cmp	 DWORD PTR tv65[rsp], 2
  00031	0f 84 02 01 00
	00		 je	 $LN12@EncryptBuf@7
  00037	83 7c 24 6c 03	 cmp	 DWORD PTR tv65[rsp], 3
  0003c	0f 84 8f 01 00
	00		 je	 $LN6@EncryptBuf@7
  00042	83 7c 24 6c 04	 cmp	 DWORD PTR tv65[rsp], 4
  00047	0f 84 34 02 00
	00		 je	 $LN2@EncryptBuf@7
  0004d	83 7c 24 6c 05	 cmp	 DWORD PTR tv65[rsp], 5
  00052	0f 84 79 01 00
	00		 je	 $LN6@EncryptBuf@7
  00058	e9 7f 02 00 00	 jmp	 $LN1@EncryptBuf@7
$LN16@EncryptBuf@7:

; 1246 : 	{
; 1247 : 	case XTS:
; 1248 : 		{
; 1249 : 			unsigned __int8 *ks = cryptoInfo->ks;

  0005d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00065	48 83 c0 08	 add	 rax, 8
  00069	48 89 44 24 40	 mov	 QWORD PTR ks$29322[rsp], rax

; 1250 : 			unsigned __int8 *ks2 = cryptoInfo->ks2;

  0006e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00076	48 05 d4 14 00
	00		 add	 rax, 5332		; 000014d4H
  0007c	48 89 44 24 58	 mov	 QWORD PTR ks2$29323[rsp], rax

; 1251 : 			UINT64_STRUCT dataUnitNo;
; 1252 : 			int cipher;
; 1253 : 
; 1254 : 			// When encrypting/decrypting a buffer (typically a volume header) the sequential number
; 1255 : 			// of the first XTS data unit in the buffer is always 0 and the start of the buffer is
; 1256 : 			// always assumed to be aligned with the start of a data unit.
; 1257 : 			dataUnitNo.LowPart = 0;

  00081	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR dataUnitNo$29324[rsp], 0

; 1258 : 			dataUnitNo.HighPart = 0;

  00089	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR dataUnitNo$29324[rsp+4], 0

; 1259 : 
; 1260 : 			for (cipher = EAGetFirstCipher (cryptoInfo->ea);
; 1261 : 				cipher != 0;
; 1262 : 				cipher = EAGetNextCipher (cryptoInfo->ea, cipher))

  00091	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00099	8b 08		 mov	 ecx, DWORD PTR [rax]
  0009b	e8 00 00 00 00	 call	 EAGetFirstCipher
  000a0	89 44 24 50	 mov	 DWORD PTR cipher$29325[rsp], eax
  000a4	eb 17		 jmp	 SHORT $LN15@EncryptBuf@7
$LN14@EncryptBuf@7:
  000a6	8b 54 24 50	 mov	 edx, DWORD PTR cipher$29325[rsp]
  000aa	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  000b2	8b 08		 mov	 ecx, DWORD PTR [rax]
  000b4	e8 00 00 00 00	 call	 EAGetNextCipher
  000b9	89 44 24 50	 mov	 DWORD PTR cipher$29325[rsp], eax
$LN15@EncryptBuf@7:
  000bd	83 7c 24 50 00	 cmp	 DWORD PTR cipher$29325[rsp], 0
  000c2	74 70		 je	 SHORT $LN13@EncryptBuf@7

; 1263 : 			{
; 1264 : 				EncryptBufferXTS (buf, len, &dataUnitNo, 0, ks, ks2, cipher);

  000c4	8b 44 24 50	 mov	 eax, DWORD PTR cipher$29325[rsp]
  000c8	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  000cc	48 8b 44 24 58	 mov	 rax, QWORD PTR ks2$29323[rsp]
  000d1	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000d6	48 8b 44 24 40	 mov	 rax, QWORD PTR ks$29322[rsp]
  000db	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e0	45 33 c9	 xor	 r9d, r9d
  000e3	4c 8d 44 24 48	 lea	 r8, QWORD PTR dataUnitNo$29324[rsp]
  000e8	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR len$[rsp]
  000f0	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  000f8	e8 00 00 00 00	 call	 EncryptBufferXTS

; 1265 : 
; 1266 : 				ks += CipherGetKeyScheduleSize (cipher);

  000fd	8b 4c 24 50	 mov	 ecx, DWORD PTR cipher$29325[rsp]
  00101	e8 00 00 00 00	 call	 CipherGetKeyScheduleSize
  00106	48 63 c8	 movsxd	 rcx, eax
  00109	48 8b 44 24 40	 mov	 rax, QWORD PTR ks$29322[rsp]
  0010e	48 03 c1	 add	 rax, rcx
  00111	48 89 44 24 40	 mov	 QWORD PTR ks$29322[rsp], rax

; 1267 : 				ks2 += CipherGetKeyScheduleSize (cipher);

  00116	8b 4c 24 50	 mov	 ecx, DWORD PTR cipher$29325[rsp]
  0011a	e8 00 00 00 00	 call	 CipherGetKeyScheduleSize
  0011f	48 63 c8	 movsxd	 rcx, eax
  00122	48 8b 44 24 58	 mov	 rax, QWORD PTR ks2$29323[rsp]
  00127	48 03 c1	 add	 rax, rcx
  0012a	48 89 44 24 58	 mov	 QWORD PTR ks2$29323[rsp], rax

; 1268 : 			}

  0012f	e9 72 ff ff ff	 jmp	 $LN14@EncryptBuf@7
$LN13@EncryptBuf@7:

; 1269 : 		}
; 1270 : 		break;

  00134	e9 c2 01 00 00	 jmp	 $LN17@EncryptBuf@7
$LN12@EncryptBuf@7:

; 1271 : 
; 1272 : #ifndef TC_NO_COMPILER_INT64
; 1273 : 	case LRW:
; 1274 : 
; 1275 : 		/* Deprecated/legacy */
; 1276 : 
; 1277 : 		switch (CipherGetBlockSize (EAGetFirstCipher (cryptoInfo->ea)))

  00139	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00141	8b 08		 mov	 ecx, DWORD PTR [rax]
  00143	e8 00 00 00 00	 call	 EAGetFirstCipher
  00148	8b c8		 mov	 ecx, eax
  0014a	e8 00 00 00 00	 call	 CipherGetBlockSize
  0014f	89 44 24 70	 mov	 DWORD PTR tv93[rsp], eax
  00153	83 7c 24 70 08	 cmp	 DWORD PTR tv93[rsp], 8
  00158	74 09		 je	 SHORT $LN9@EncryptBuf@7
  0015a	83 7c 24 70 10	 cmp	 DWORD PTR tv93[rsp], 16
  0015f	74 27		 je	 SHORT $LN8@EncryptBuf@7
  00161	eb 4a		 jmp	 SHORT $LN7@EncryptBuf@7
$LN9@EncryptBuf@7:

; 1278 : 		{
; 1279 : 		case 8:
; 1280 : 			EncryptBufferLRW64 ((unsigned __int8 *)buf, (unsigned __int64) len, 1, cryptoInfo);

  00163	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR cryptoInfo$[rsp]
  0016b	41 b8 01 00 00
	00		 mov	 r8d, 1
  00171	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR len$[rsp]
  00179	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00181	e8 00 00 00 00	 call	 EncryptBufferLRW64

; 1281 : 			break;

  00186	eb 44		 jmp	 SHORT $LN10@EncryptBuf@7
$LN8@EncryptBuf@7:

; 1282 : 
; 1283 : 		case 16:
; 1284 : 			EncryptBufferLRW128 ((unsigned __int8 *)buf, (unsigned __int64) len, 1, cryptoInfo);

  00188	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR cryptoInfo$[rsp]
  00190	41 b8 01 00 00
	00		 mov	 r8d, 1
  00196	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR len$[rsp]
  0019e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  001a6	e8 00 00 00 00	 call	 EncryptBufferLRW128

; 1285 : 			break;

  001ab	eb 1f		 jmp	 SHORT $LN10@EncryptBuf@7
$LN7@EncryptBuf@7:

; 1286 : 
; 1287 : 		default:
; 1288 : 			TC_THROW_FATAL_EXCEPTION;

  001ad	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  001b6	45 33 c9	 xor	 r9d, r9d
  001b9	45 33 c0	 xor	 r8d, r8d
  001bc	ba 08 05 00 00	 mov	 edx, 1288		; 00000508H
  001c1	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  001c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx
$LN10@EncryptBuf@7:

; 1289 : 		}
; 1290 : 		break;

  001cc	e9 2a 01 00 00	 jmp	 $LN17@EncryptBuf@7
$LN6@EncryptBuf@7:

; 1291 : 
; 1292 : 	case CBC:
; 1293 : 	case INNER_CBC:
; 1294 : 		{
; 1295 : 			/* Deprecated/legacy */
; 1296 : 
; 1297 : 			unsigned __int8 *ks = cryptoInfo->ks;

  001d1	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  001d9	48 83 c0 08	 add	 rax, 8
  001dd	48 89 44 24 60	 mov	 QWORD PTR ks$29343[rsp], rax

; 1298 : 			int cipher;
; 1299 : 
; 1300 : 			for (cipher = EAGetFirstCipher (cryptoInfo->ea);
; 1301 : 				cipher != 0;
; 1302 : 				cipher = EAGetNextCipher (cryptoInfo->ea, cipher))

  001e2	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  001ea	8b 08		 mov	 ecx, DWORD PTR [rax]
  001ec	e8 00 00 00 00	 call	 EAGetFirstCipher
  001f1	89 44 24 68	 mov	 DWORD PTR cipher$29344[rsp], eax
  001f5	eb 17		 jmp	 SHORT $LN5@EncryptBuf@7
$LN4@EncryptBuf@7:
  001f7	8b 54 24 68	 mov	 edx, DWORD PTR cipher$29344[rsp]
  001fb	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  00203	8b 08		 mov	 ecx, DWORD PTR [rax]
  00205	e8 00 00 00 00	 call	 EAGetNextCipher
  0020a	89 44 24 68	 mov	 DWORD PTR cipher$29344[rsp], eax
$LN5@EncryptBuf@7:
  0020e	83 7c 24 68 00	 cmp	 DWORD PTR cipher$29344[rsp], 0
  00213	74 6a		 je	 SHORT $LN3@EncryptBuf@7

; 1303 : 			{
; 1304 : 				EncryptBufferCBC ((unsigned __int32 *) buf,
; 1305 : 					(unsigned int) len,
; 1306 : 					ks,
; 1307 : 					(unsigned __int32 *) cryptoInfo->k2,
; 1308 : 					(unsigned __int32 *) &cryptoInfo->k2[8],
; 1309 : 					0,
; 1310 : 					cipher);

  00215	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR cryptoInfo$[rsp]
  0021d	48 81 c1 b0 42
	00 00		 add	 rcx, 17072		; 000042b0H
  00224	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR cryptoInfo$[rsp]
  0022c	49 81 c1 a8 42
	00 00		 add	 r9, 17064		; 000042a8H
  00233	8b 44 24 68	 mov	 eax, DWORD PTR cipher$29344[rsp]
  00237	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0023b	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00243	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00248	4c 8b 44 24 60	 mov	 r8, QWORD PTR ks$29343[rsp]
  0024d	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR len$[rsp]
  00254	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  0025c	e8 00 00 00 00	 call	 EncryptBufferCBC

; 1311 : 
; 1312 : 				ks += CipherGetKeyScheduleSize (cipher);

  00261	8b 4c 24 68	 mov	 ecx, DWORD PTR cipher$29344[rsp]
  00265	e8 00 00 00 00	 call	 CipherGetKeyScheduleSize
  0026a	48 63 c8	 movsxd	 rcx, eax
  0026d	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$29343[rsp]
  00272	48 03 c1	 add	 rax, rcx
  00275	48 89 44 24 60	 mov	 QWORD PTR ks$29343[rsp], rax

; 1313 : 			}

  0027a	e9 78 ff ff ff	 jmp	 $LN4@EncryptBuf@7
$LN3@EncryptBuf@7:

; 1314 : 		}
; 1315 : 		break;

  0027f	eb 7a		 jmp	 SHORT $LN17@EncryptBuf@7
$LN2@EncryptBuf@7:

; 1316 : 
; 1317 : 	case OUTER_CBC:
; 1318 : 
; 1319 : 		/* Deprecated/legacy */
; 1320 : 
; 1321 : 		EncryptBufferCBC ((unsigned __int32 *) buf,
; 1322 : 			(unsigned int) len,
; 1323 : 			cryptoInfo->ks,
; 1324 : 			(unsigned __int32 *) cryptoInfo->k2,
; 1325 : 			(unsigned __int32 *) &cryptoInfo->k2[8],
; 1326 : 			cryptoInfo->ea,
; 1327 : 			0);

  00281	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR cryptoInfo$[rsp]
  00289	48 81 c1 b0 42
	00 00		 add	 rcx, 17072		; 000042b0H
  00290	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR cryptoInfo$[rsp]
  00298	49 81 c1 a8 42
	00 00		 add	 r9, 17064		; 000042a8H
  0029f	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR cryptoInfo$[rsp]
  002a7	49 83 c0 08	 add	 r8, 8
  002ab	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  002b3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cryptoInfo$[rsp]
  002bb	8b 00		 mov	 eax, DWORD PTR [rax]
  002bd	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  002c1	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  002c6	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR len$[rsp]
  002cd	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  002d5	e8 00 00 00 00	 call	 EncryptBufferCBC

; 1328 : 
; 1329 : 		break;

  002da	eb 1f		 jmp	 SHORT $LN17@EncryptBuf@7
$LN1@EncryptBuf@7:

; 1330 : #endif	// #ifndef TC_NO_COMPILER_INT64
; 1331 : 
; 1332 : 	default:		
; 1333 : 		// Unknown/wrong ID
; 1334 : 		TC_THROW_FATAL_EXCEPTION;

  002dc	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  002e5	45 33 c9	 xor	 r9d, r9d
  002e8	45 33 c0	 xor	 r8d, r8d
  002eb	ba 36 05 00 00	 mov	 edx, 1334		; 00000536H
  002f0	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  002f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx
$LN17@EncryptBuf@7:
$LN20@EncryptBuf@7:

; 1335 : 	}
; 1336 : }

  002fb	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00302	c3		 ret	 0
EncryptBuffer ENDP
_TEXT	ENDS
PUBLIC	EAInitMode
;	COMDAT pdata
pdata	SEGMENT
$pdata$EAInitMode DD imagerel $LN15
	DD	imagerel $LN15+296
	DD	imagerel $unwind$EAInitMode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EAInitMode DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EAInitMode
_TEXT	SEGMENT
tv65 = 48
tv77 = 52
ci$ = 80
EAInitMode PROC						; COMDAT

; 411  : {

$LN15:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 412  : 	switch (ci->mode)

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR ci$[rsp]
  0000e	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00011	89 44 24 30	 mov	 DWORD PTR tv65[rsp], eax
  00015	83 7c 24 30 01	 cmp	 DWORD PTR tv65[rsp], 1
  0001a	74 22		 je	 SHORT $LN10@EAInitMode
  0001c	83 7c 24 30 02	 cmp	 DWORD PTR tv65[rsp], 2
  00021	74 4f		 je	 SHORT $LN8@EAInitMode
  00023	83 7c 24 30 02	 cmp	 DWORD PTR tv65[rsp], 2
  00028	0f 8e d1 00 00
	00		 jle	 $LN1@EAInitMode
  0002e	83 7c 24 30 05	 cmp	 DWORD PTR tv65[rsp], 5
  00033	0f 8e bf 00 00
	00		 jle	 $LN2@EAInitMode
  00039	e9 c1 00 00 00	 jmp	 $LN1@EAInitMode
$LN10@EAInitMode:

; 413  : 	{
; 414  : 	case XTS:
; 415  : 		// Secondary key schedule
; 416  : 		if (EAInit (ci->ea, ci->k2, ci->ks2) != ERR_SUCCESS)

  0003e	4c 8b 44 24 50	 mov	 r8, QWORD PTR ci$[rsp]
  00043	49 81 c0 d4 14
	00 00		 add	 r8, 5332		; 000014d4H
  0004a	48 8b 54 24 50	 mov	 rdx, QWORD PTR ci$[rsp]
  0004f	48 81 c2 a8 42
	00 00		 add	 rdx, 17064		; 000042a8H
  00056	48 8b 44 24 50	 mov	 rax, QWORD PTR ci$[rsp]
  0005b	8b 08		 mov	 ecx, DWORD PTR [rax]
  0005d	e8 00 00 00 00	 call	 EAInit
  00062	85 c0		 test	 eax, eax
  00064	74 07		 je	 SHORT $LN9@EAInitMode

; 417  : 			return FALSE;

  00066	33 c0		 xor	 eax, eax
  00068	e9 b6 00 00 00	 jmp	 $LN13@EAInitMode
$LN9@EAInitMode:

; 418  : 
; 419  : 		/* Note: XTS mode could potentially be initialized with a weak key causing all blocks in one data unit
; 420  : 		on the volume to be tweaked with zero tweaks (i.e. 512 bytes of the volume would be encrypted in ECB
; 421  : 		mode). However, to create a CipherShed volume with such a weak key, each human being on Earth would have
; 422  : 		to create approximately 11,378,125,361,078,862 (about eleven quadrillion) CipherShed volumes (provided 
; 423  : 		that the size of each of the volumes is 1024 terabytes). */
; 424  : 		break;

  0006d	e9 ac 00 00 00	 jmp	 $LN11@EAInitMode
$LN8@EAInitMode:

; 425  : 
; 426  : 	case LRW:
; 427  : 		switch (CipherGetBlockSize (EAGetFirstCipher (ci->ea)))

  00072	48 8b 44 24 50	 mov	 rax, QWORD PTR ci$[rsp]
  00077	8b 08		 mov	 ecx, DWORD PTR [rax]
  00079	e8 00 00 00 00	 call	 EAGetFirstCipher
  0007e	8b c8		 mov	 ecx, eax
  00080	e8 00 00 00 00	 call	 CipherGetBlockSize
  00085	89 44 24 34	 mov	 DWORD PTR tv77[rsp], eax
  00089	83 7c 24 34 08	 cmp	 DWORD PTR tv77[rsp], 8
  0008e	74 09		 je	 SHORT $LN5@EAInitMode
  00090	83 7c 24 34 10	 cmp	 DWORD PTR tv77[rsp], 16
  00095	74 21		 je	 SHORT $LN4@EAInitMode
  00097	eb 3e		 jmp	 SHORT $LN3@EAInitMode
$LN5@EAInitMode:

; 428  : 		{
; 429  : 		case 8:
; 430  : 			/* Deprecated/legacy */
; 431  : 			return Gf64TabInit (ci->k2, &ci->gf_ctx);

  00099	48 8b 54 24 50	 mov	 rdx, QWORD PTR ci$[rsp]
  0009e	48 81 c2 a8 29
	00 00		 add	 rdx, 10664		; 000029a8H
  000a5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ci$[rsp]
  000aa	48 81 c1 a8 42
	00 00		 add	 rcx, 17064		; 000042a8H
  000b1	e8 00 00 00 00	 call	 Gf64TabInit
  000b6	eb 6b		 jmp	 SHORT $LN13@EAInitMode
$LN4@EAInitMode:

; 432  : 
; 433  : 		case 16:
; 434  : 			return Gf128Tab64Init (ci->k2, &ci->gf_ctx);

  000b8	48 8b 54 24 50	 mov	 rdx, QWORD PTR ci$[rsp]
  000bd	48 81 c2 a8 29
	00 00		 add	 rdx, 10664		; 000029a8H
  000c4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ci$[rsp]
  000c9	48 81 c1 a8 42
	00 00		 add	 rcx, 17064		; 000042a8H
  000d0	e8 00 00 00 00	 call	 Gf128Tab64Init
  000d5	eb 4c		 jmp	 SHORT $LN13@EAInitMode
$LN3@EAInitMode:

; 435  : 
; 436  : 		default:
; 437  : 			TC_THROW_FATAL_EXCEPTION;

  000d7	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  000e0	45 33 c9	 xor	 r9d, r9d
  000e3	45 33 c0	 xor	 r8d, r8d
  000e6	ba b5 01 00 00	 mov	 edx, 437		; 000001b5H
  000eb	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  000f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx

; 438  : 		}
; 439  : 
; 440  : 		break;

  000f6	eb 26		 jmp	 SHORT $LN11@EAInitMode
$LN2@EAInitMode:

; 441  : 
; 442  : 	case CBC:
; 443  : 	case INNER_CBC:
; 444  : 	case OUTER_CBC:
; 445  : 		// The mode does not need to be initialized or is initialized elsewhere 
; 446  : 		return TRUE;

  000f8	b8 01 00 00 00	 mov	 eax, 1
  000fd	eb 24		 jmp	 SHORT $LN13@EAInitMode
$LN1@EAInitMode:

; 447  : 
; 448  : 	default:		
; 449  : 		// Unknown/wrong ID
; 450  : 		TC_THROW_FATAL_EXCEPTION;

  000ff	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  00108	45 33 c9	 xor	 r9d, r9d
  0010b	45 33 c0	 xor	 r8d, r8d
  0010e	ba c2 01 00 00	 mov	 edx, 450		; 000001c2H
  00113	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx
$LN11@EAInitMode:

; 451  : 	}
; 452  : 	return TRUE;

  0011e	b8 01 00 00 00	 mov	 eax, 1
$LN13@EAInitMode:
$LN14@EAInitMode:

; 453  : }

  00123	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00127	c3		 ret	 0
EAInitMode ENDP
PUBLIC	DecryptDataUnits
;	COMDAT pdata
pdata	SEGMENT
$pdata$DecryptDataUnits DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$DecryptDataUnits
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DecryptDataUnits DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT DecryptDataUnits
_TEXT	SEGMENT
buf$ = 64
structUnitNo$ = 72
nbrUnits$ = 80
ci$ = 88
DecryptDataUnits PROC					; COMDAT

; 1595 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1596 : 	EncryptionThreadPoolDoWork (DecryptDataUnitsWork, buf, structUnitNo, nbrUnits, ci);

  00018	48 8b 44 24 58	 mov	 rax, QWORD PTR ci$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	44 8b 4c 24 50	 mov	 r9d, DWORD PTR nbrUnits$[rsp]
  00027	4c 8b 44 24 48	 mov	 r8, QWORD PTR structUnitNo$[rsp]
  0002c	48 8b 54 24 40	 mov	 rdx, QWORD PTR buf$[rsp]
  00031	b9 01 00 00 00	 mov	 ecx, 1
  00036	e8 00 00 00 00	 call	 EncryptionThreadPoolDoWork

; 1597 : }

  0003b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003f	c3		 ret	 0
DecryptDataUnits ENDP
_TEXT	ENDS
PUBLIC	EncryptDataUnits
;	COMDAT pdata
pdata	SEGMENT
$pdata$EncryptDataUnits DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$EncryptDataUnits
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EncryptDataUnits DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT EncryptDataUnits
_TEXT	SEGMENT
buf$ = 64
structUnitNo$ = 72
nbrUnits$ = 80
ci$ = 88
EncryptDataUnits PROC					; COMDAT

; 1372 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1373 : 	EncryptionThreadPoolDoWork (EncryptDataUnitsWork, buf, structUnitNo, nbrUnits, ci);

  00018	48 8b 44 24 58	 mov	 rax, QWORD PTR ci$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	44 8b 4c 24 50	 mov	 r9d, DWORD PTR nbrUnits$[rsp]
  00027	4c 8b 44 24 48	 mov	 r8, QWORD PTR structUnitNo$[rsp]
  0002c	48 8b 54 24 40	 mov	 rdx, QWORD PTR buf$[rsp]
  00031	33 c9		 xor	 ecx, ecx
  00033	e8 00 00 00 00	 call	 EncryptionThreadPoolDoWork

; 1374 : }

  00038	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003c	c3		 ret	 0
EncryptDataUnits ENDP
END
