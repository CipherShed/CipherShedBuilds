; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\Public\Desktop\projects\ciphershed\src\Format\Tcformat.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
PUBLIC	?szVerify@@3PA_WA				; szVerify
PUBLIC	?lastRandPool@@3PAEA				; lastRandPool
PUBLIC	_MasterKeyGUIView
PUBLIC	?szRescueDiskISO@@3PADA				; szRescueDiskISO
PUBLIC	?randPool@@3PAEA				; randPool
PUBLIC	?BootEncStatus@@3UBootEncryptionStatus@@A	; BootEncStatus
PUBLIC	?realClusterSize@@3HA				; realClusterSize
PUBLIC	?szDiskFile@@3PADA				; szDiskFile
PUBLIC	?volumePassword@@3UPassword@@A			; volumePassword
PUBLIC	?SysEncDriveAnalysisStart@@3HA			; SysEncDriveAnalysisStart
PUBLIC	?szRawPassword@@3PA_WA				; szRawPassword
PUBLIC	?szTmpPas@@3PADA				; szTmpPas
PUBLIC	_HeaderKeyGUIView
PUBLIC	?outRandPoolDispBuffer@@3PAEA			; outRandPoolDispBuffer
PUBLIC	?szFileName@@3PADA				; szFileName
PUBLIC	?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A	; SysEncMultiBootCfg
PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?RescueIsoImageSize@BootEncryption@CipherShed@@1IB ; CipherShed::BootEncryption::RescueIsoImageSize
PUBLIC	?BootEncObj@@3PAVBootEncryption@CipherShed@@A	; BootEncObj
PUBLIC	_hCurPage
PUBLIC	?nCurPageNo@@3HA				; nCurPageNo
PUBLIC	?nLastPageNo@@3HA				; nLastPageNo
PUBLIC	_WizardMode
PUBLIC	?bHiddenOS@@3HC					; bHiddenOS
PUBLIC	?bDirectSysEncMode@@3HA				; bDirectSysEncMode
PUBLIC	?bDirectSysEncModeCommand@@3HA			; bDirectSysEncModeCommand
PUBLIC	?DirectDeviceEncMode@@3HA			; DirectDeviceEncMode
PUBLIC	?DirectNonSysInplaceEncResumeMode@@3HA		; DirectNonSysInplaceEncResumeMode
PUBLIC	?DirectPromptNonSysInplaceEncResumeMode@@3HA	; DirectPromptNonSysInplaceEncResumeMode
PUBLIC	_bInPlaceEncNonSys
PUBLIC	_bInPlaceEncNonSysResumed
PUBLIC	_bFirstNonSysInPlaceEncResumeDone
PUBLIC	_NonSysInplaceEncBytesDone
PUBLIC	_NonSysInplaceEncTotalSize
PUBLIC	?bDeviceTransformModeChoiceMade@@3HA		; bDeviceTransformModeChoiceMade
PUBLIC	?nNeedToStoreFilesOver4GB@@3HA			; nNeedToStoreFilesOver4GB
PUBLIC	?nVolumeEA@@3HA					; nVolumeEA
PUBLIC	?bSystemEncryptionInProgress@@3HA		; bSystemEncryptionInProgress
PUBLIC	?bWholeSysDrive@@3HA				; bWholeSysDrive
PUBLIC	?bSysEncDriveAnalysisInProgress@@3HC		; bSysEncDriveAnalysisInProgress
PUBLIC	?bSysEncDriveAnalysisTimeOutOccurred@@3HC	; bSysEncDriveAnalysisTimeOutOccurred
PUBLIC	?SysEncDetectHiddenSectors@@3HA			; SysEncDetectHiddenSectors
PUBLIC	?bDontVerifyRescueDisk@@3HA			; bDontVerifyRescueDisk
PUBLIC	?bFirstSysEncResumeDone@@3HA			; bFirstSysEncResumeDone
PUBLIC	?nMultiBoot@@3HA				; nMultiBoot
PUBLIC	?bHiddenVol@@3HC				; bHiddenVol
PUBLIC	_bHiddenVolHost
PUBLIC	_bHiddenVolDirect
PUBLIC	?bHiddenVolFinished@@3HC			; bHiddenVolFinished
PUBLIC	?hiddenVolHostDriveNo@@3HA			; hiddenVolHostDriveNo
PUBLIC	_bRemovableHostDevice
PUBLIC	?hash_algo@@3HA					; hash_algo
PUBLIC	?nUIVolumeSize@@3_KA				; nUIVolumeSize
PUBLIC	?nVolumeSize@@3_KA				; nVolumeSize
PUBLIC	?nHiddenVolHostSize@@3_KA			; nHiddenVolHostSize
PUBLIC	?nMaximumHiddenVolSize@@3_JA			; nMaximumHiddenVolSize
PUBLIC	?nbrFreeClusters@@3_JA				; nbrFreeClusters
PUBLIC	?nMultiplier@@3HA				; nMultiplier
PUBLIC	?bDeviceWipeInProgress@@3HA			; bDeviceWipeInProgress
PUBLIC	?bTryToCorrectReadErrors@@3HC			; bTryToCorrectReadErrors
PUBLIC	?DiscardUnreadableEncryptedSectors@@3HC		; DiscardUnreadableEncryptedSectors
PUBLIC	_bVolTransformThreadCancel
PUBLIC	?bVolTransformThreadRunning@@3HC		; bVolTransformThreadRunning
PUBLIC	?bVolTransformThreadToRun@@3HC			; bVolTransformThreadToRun
PUBLIC	?bConfirmQuit@@3HC				; bConfirmQuit
PUBLIC	?bConfirmQuitSysEncPretest@@3HC			; bConfirmQuitSysEncPretest
PUBLIC	?bDevice@@3HA					; bDevice
PUBLIC	_showKeys
PUBLIC	_hMasterKey
PUBLIC	_hHeaderKey
PUBLIC	?hRandPool@@3RAUHWND__@@A			; hRandPool
PUBLIC	?hRandPoolSys@@3RAUHWND__@@A			; hRandPoolSys
PUBLIC	?hPasswordInputField@@3RAUHWND__@@A		; hPasswordInputField
PUBLIC	?hVerifyPasswordInputField@@3RAUHWND__@@A	; hVerifyPasswordInputField
PUBLIC	?hbmWizardBitmapRescaled@@3PAUHBITMAP__@@A	; hbmWizardBitmapRescaled
PUBLIC	?OrigKeyboardLayout@@3PADA			; OrigKeyboardLayout
PUBLIC	?bKeyboardLayoutChanged@@3HA			; bKeyboardLayoutChanged
PUBLIC	?bKeybLayoutAltKeyWarningShown@@3HA		; bKeybLayoutAltKeyWarningShown
PUBLIC	_bWarnDeviceFormatAdvanced
PUBLIC	?bWarnOuterVolSuitableFileSys@@3HA		; bWarnOuterVolSuitableFileSys
PUBLIC	?bHistoryCmdLine@@3HA				; bHistoryCmdLine
PUBLIC	?ComServerMode@@3HA				; ComServerMode
PUBLIC	_nPbar
PUBLIC	?bDisplayPoolContents@@3HA			; bDisplayPoolContents
PUBLIC	?bSparseFileSwitch@@3HC				; bSparseFileSwitch
PUBLIC	?quickFormat@@3HC				; quickFormat
PUBLIC	?fileSystem@@3HC				; fileSystem
PUBLIC	?clusterSize@@3HC				; clusterSize
PUBLIC	?SysEncMultiBootCfgOutcome@@3PA_WA		; SysEncMultiBootCfgOutcome
PUBLIC	_NonSysInplaceEncStatus
_BSS	SEGMENT
?szVerify@@3PA_WA DW 041H DUP (?)			; szVerify
	ALIGN	4

?lastRandPool@@3PAEA DB 078H DUP (?)			; lastRandPool
_MasterKeyGUIView DB 040H DUP (?)
?szRescueDiskISO@@3PADA DB 0105H DUP (?)		; szRescueDiskISO
	ALIGN	4

?randPool@@3PAEA DB 078H DUP (?)			; randPool
?BootEncStatus@@3UBootEncryptionStatus@@A DB 05eH DUP (?) ; BootEncStatus
	ALIGN	4

?realClusterSize@@3HA DD 01H DUP (?)			; realClusterSize
?szDiskFile@@3PADA DB 0105H DUP (?)			; szDiskFile
	ALIGN	4

?volumePassword@@3UPassword@@A DB 048H DUP (?)		; volumePassword
?SysEncDriveAnalysisStart@@3HA DD 01H DUP (?)		; SysEncDriveAnalysisStart
?szRawPassword@@3PA_WA DW 041H DUP (?)			; szRawPassword
	ALIGN	4

?szTmpPas@@3PADA DB 041H DUP (?)			; szTmpPas
	ALIGN	4

_HeaderKeyGUIView DB 040H DUP (?)
?outRandPoolDispBuffer@@3PAEA DB 0172H DUP (?)		; outRandPoolDispBuffer
	ALIGN	4

?szFileName@@3PADA DB 0105H DUP (?)			; szFileName
	ALIGN	4

?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A DB 014H DUP (?) ; SysEncMultiBootCfg
?BootEncObj@@3PAVBootEncryption@CipherShed@@A DD 01H DUP (?) ; BootEncObj
_hCurPage DD	01H DUP (?)
_WizardMode DD	01H DUP (?)
?bHiddenOS@@3HC DD 01H DUP (?)				; bHiddenOS
?bDirectSysEncMode@@3HA DD 01H DUP (?)			; bDirectSysEncMode
?bDirectSysEncModeCommand@@3HA DD 01H DUP (?)		; bDirectSysEncModeCommand
?DirectDeviceEncMode@@3HA DD 01H DUP (?)		; DirectDeviceEncMode
?DirectNonSysInplaceEncResumeMode@@3HA DD 01H DUP (?)	; DirectNonSysInplaceEncResumeMode
?DirectPromptNonSysInplaceEncResumeMode@@3HA DD 01H DUP (?) ; DirectPromptNonSysInplaceEncResumeMode
_bInPlaceEncNonSys DD 01H DUP (?)
_bInPlaceEncNonSysResumed DD 01H DUP (?)
_bFirstNonSysInPlaceEncResumeDone DD 01H DUP (?)
	ALIGN	8

_NonSysInplaceEncBytesDone DQ 01H DUP (?)
_NonSysInplaceEncTotalSize DQ 01H DUP (?)
?bDeviceTransformModeChoiceMade@@3HA DD 01H DUP (?)	; bDeviceTransformModeChoiceMade
?nNeedToStoreFilesOver4GB@@3HA DD 01H DUP (?)		; nNeedToStoreFilesOver4GB
?bSystemEncryptionInProgress@@3HA DD 01H DUP (?)	; bSystemEncryptionInProgress
?bWholeSysDrive@@3HA DD 01H DUP (?)			; bWholeSysDrive
_bSystemEncryptionStatusChanged DD 01H DUP (?)
?bSysEncDriveAnalysisInProgress@@3HC DD 01H DUP (?)	; bSysEncDriveAnalysisInProgress
?bSysEncDriveAnalysisTimeOutOccurred@@3HC DD 01H DUP (?) ; bSysEncDriveAnalysisTimeOutOccurred
?bDontVerifyRescueDisk@@3HA DD 01H DUP (?)		; bDontVerifyRescueDisk
?bFirstSysEncResumeDone@@3HA DD 01H DUP (?)		; bFirstSysEncResumeDone
?nMultiBoot@@3HA DD 01H DUP (?)				; nMultiBoot
?bHiddenVol@@3HC DD 01H DUP (?)				; bHiddenVol
_bHiddenVolHost DD 01H DUP (?)
_bHiddenVolDirect DD 01H DUP (?)
?bHiddenVolFinished@@3HC DD 01H DUP (?)			; bHiddenVolFinished
_bRemovableHostDevice DD 01H DUP (?)
	ALIGN	8

?nUIVolumeSize@@3_KA DQ 01H DUP (?)			; nUIVolumeSize
?nVolumeSize@@3_KA DQ 01H DUP (?)			; nVolumeSize
?nHiddenVolHostSize@@3_KA DQ 01H DUP (?)		; nHiddenVolHostSize
?nMaximumHiddenVolSize@@3_JA DQ 01H DUP (?)		; nMaximumHiddenVolSize
?nbrFreeClusters@@3_JA DQ 01H DUP (?)			; nbrFreeClusters
?bDeviceWipeInProgress@@3HA DD 01H DUP (?)		; bDeviceWipeInProgress
?bTryToCorrectReadErrors@@3HC DD 01H DUP (?)		; bTryToCorrectReadErrors
?DiscardUnreadableEncryptedSectors@@3HC DD 01H DUP (?)	; DiscardUnreadableEncryptedSectors
_bVolTransformThreadCancel DD 01H DUP (?)
?bVolTransformThreadRunning@@3HC DD 01H DUP (?)		; bVolTransformThreadRunning
?bVolTransformThreadToRun@@3HC DD 01H DUP (?)		; bVolTransformThreadToRun
?bConfirmQuit@@3HC DD 01H DUP (?)			; bConfirmQuit
?bConfirmQuitSysEncPretest@@3HC DD 01H DUP (?)		; bConfirmQuitSysEncPretest
?bDevice@@3HA DD 01H DUP (?)				; bDevice
_hMasterKey DD	01H DUP (?)
_hHeaderKey DD	01H DUP (?)
?hRandPool@@3RAUHWND__@@A DD 01H DUP (?)		; hRandPool
?hRandPoolSys@@3RAUHWND__@@A DD 01H DUP (?)		; hRandPoolSys
?hPasswordInputField@@3RAUHWND__@@A DD 01H DUP (?)	; hPasswordInputField
?hVerifyPasswordInputField@@3RAUHWND__@@A DD 01H DUP (?) ; hVerifyPasswordInputField
?hbmWizardBitmapRescaled@@3PAUHBITMAP__@@A DD 01H DUP (?) ; hbmWizardBitmapRescaled
?bKeyboardLayoutChanged@@3HA DD 01H DUP (?)		; bKeyboardLayoutChanged
?bKeybLayoutAltKeyWarningShown@@3HA DD 01H DUP (?)	; bKeybLayoutAltKeyWarningShown
?bHistoryCmdLine@@3HA DD 01H DUP (?)			; bHistoryCmdLine
?ComServerMode@@3HA DD 01H DUP (?)			; ComServerMode
_nPbar	DD	01H DUP (?)
?bSparseFileSwitch@@3HC DD 01H DUP (?)			; bSparseFileSwitch
?quickFormat@@3HC DD 01H DUP (?)			; quickFormat
?fileSystem@@3HC DD 01H DUP (?)				; fileSystem
?clusterSize@@3HC DD 01H DUP (?)			; clusterSize
_NonSysInplaceEncStatus DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ?RescueIsoImageSize@BootEncryption@CipherShed@@1IB
CONST	SEGMENT
?RescueIsoImageSize@BootEncryption@CipherShed@@1IB DD 01c0000H ; CipherShed::BootEncryption::RescueIsoImageSize
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
?nCurPageNo@@3HA DD 0ffffffffH				; nCurPageNo
?nLastPageNo@@3HA DD 0ffffffffH				; nLastPageNo
?nVolumeEA@@3HA DD 01H					; nVolumeEA
?SysEncDetectHiddenSectors@@3HA DD 0ffffffffH		; SysEncDetectHiddenSectors
?hiddenVolHostDriveNo@@3HA DD 0ffffffffH		; hiddenVolHostDriveNo
?hash_algo@@3HA DD 01H					; hash_algo
?nMultiplier@@3HA DD 0100000H				; nMultiplier
_showKeys DD	01H
?OrigKeyboardLayout@@3PADA DB '00000409', 00H		; OrigKeyboardLayout
	ORG $+3
_bWarnDeviceFormatAdvanced DD 01H
?bWarnOuterVolSuitableFileSys@@3HA DD 01H		; bWarnOuterVolSuitableFileSys
?bDisplayPoolContents@@3HA DD 01H			; bDisplayPoolContents
	ORG $+4
?SysEncMultiBootCfgOutcome@@3PA_WA DW 04eH		; SysEncMultiBootCfgOutcome
	DW	02fH
	DW	041H
	DW	00H
	ORG $+8184
_DATA	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
CONST	ENDS
PUBLIC	?strstr@@YAPADPADPBD@Z				; strstr
EXTRN	_strstr:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string.h
;	COMDAT ?strstr@@YAPADPADPBD@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__SubStr$ = 12						; size = 4
?strstr@@YAPADPADPBD@Z PROC				; strstr, COMDAT

; 190  : 	{ return (char*)strstr((const char*)_Str, _SubStr); }

  00000	e9 00 00 00 00	 jmp	 _strstr
?strstr@@YAPADPADPBD@Z ENDP				; strstr
_TEXT	ENDS
PUBLIC	_RtlSecureZeroMemory
; Function compile flags: /Ogtpy
; File c:\program files\microsoft sdks\windows\v7.0\include\winnt.h
;	COMDAT _RtlSecureZeroMemory
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_cnt$ = 12						; size = 4
_RtlSecureZeroMemory PROC				; COMDAT

; 13070:     volatile char *vptr = (volatile char *)ptr;
; 13071: 
; 13072: #if defined(_M_AMD64)
; 13073: 
; 13074:         __stosb((PBYTE )((DWORD64)vptr), 0, cnt);
; 13075: 
; 13076: #else
; 13077: 
; 13078:     while (cnt) {

  00000	8b 54 24 08	 mov	 edx, DWORD PTR _cnt$[esp-4]
  00004	8b 44 24 04	 mov	 eax, DWORD PTR _ptr$[esp-4]
  00008	8b c8		 mov	 ecx, eax
  0000a	85 d2		 test	 edx, edx
  0000c	74 0b		 je	 SHORT $LN1@RtlSecureZ
  0000e	8b ff		 npad	 2
$LL2@RtlSecureZ:

; 13079:         *vptr = 0;

  00010	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 13080:         vptr++;

  00013	41		 inc	 ecx

; 13081:         cnt--;

  00014	83 ea 01	 sub	 edx, 1
  00017	75 f7		 jne	 SHORT $LL2@RtlSecureZ
$LN1@RtlSecureZ:

; 13082:     }
; 13083: 
; 13084: #endif
; 13085: 
; 13086:     return ptr;
; 13087: }

  00019	c3		 ret	 0
_RtlSecureZeroMemory ENDP
_TEXT	ENDS
PUBLIC	?swprintf@@YAHPA_WPB_WZZ			; swprintf
EXTRN	__vswprintf:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\swprintf.inl
;	COMDAT ?swprintf@@YAHPA_WPB_WZZ
_TEXT	SEGMENT
__String$ = 8						; size = 4
__Format$ = 12						; size = 4
?swprintf@@YAHPA_WPB_WZZ PROC				; swprintf, COMDAT

; 87   :     va_list _Arglist;
; 88   :     _crt_va_start(_Arglist, _Format);
; 89   :     int _Ret = _vswprintf(_String, _Format, _Arglist);

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Format$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __String$[esp-4]
  00008	8d 44 24 0c	 lea	 eax, DWORD PTR __Format$[esp]
  0000c	50		 push	 eax
  0000d	51		 push	 ecx
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 __vswprintf
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 90   :     _crt_va_end(_Arglist);
; 91   :     return _Ret;
; 92   : }

  00017	c3		 ret	 0
?swprintf@@YAHPA_WPB_WZZ ENDP				; swprintf
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

  00000	56		 push	 esi
  00001	8d 44 24 08	 lea	 eax, DWORD PTR __Message$[esp]
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtpy
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00009	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000e	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00013	74 09		 je	 SHORT $LN6@scalar
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
$LN6@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	return (_Where);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Where$[esp-4]

; 60   : 	}

  00004	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	_wmemcpy_s
EXTRN	_memcpy_s:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\wchar.h
;	COMDAT _wmemcpy_s
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__N1$ = 12						; size = 4
__S2$ = 16						; size = 4
__N$ = 20						; size = 4
_wmemcpy_s PROC						; COMDAT

; 1232 : #pragma warning( push )
; 1233 : #pragma warning( disable : 6386 )
; 1234 :             return memcpy_s(_S1, _N1*sizeof(wchar_t), _S2, _N*sizeof(wchar_t));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __N$[esp-4]
  00004	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00007	89 4c 24 10	 mov	 DWORD PTR __N$[esp-4], ecx
  0000b	8b 44 24 08	 mov	 eax, DWORD PTR __N1$[esp-4]
  0000f	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00012	89 4c 24 08	 mov	 DWORD PTR __N1$[esp-4], ecx
  00016	e9 00 00 00 00	 jmp	 _memcpy_s
_wmemcpy_s ENDP
_TEXT	ENDS
PUBLIC	_wmemmove_s
EXTRN	_memmove_s:PROC
; Function compile flags: /Ogtpy
;	COMDAT _wmemmove_s
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__N1$ = 12						; size = 4
__S2$ = 16						; size = 4
__N$ = 20						; size = 4
_wmemmove_s PROC					; COMDAT

; 1252 : #pragma warning( push )
; 1253 : #pragma warning( disable : 6386 )
; 1254 :             return memmove_s(_S1, _N1*sizeof(wchar_t), _S2, _N*sizeof(wchar_t));

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __N$[esp-4]
  00004	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00007	89 4c 24 10	 mov	 DWORD PTR __N$[esp-4], ecx
  0000b	8b 44 24 08	 mov	 eax, DWORD PTR __N1$[esp-4]
  0000f	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00012	89 4c 24 08	 mov	 DWORD PTR __N1$[esp-4], ecx
  00016	e9 00 00 00 00	 jmp	 _memmove_s
_wmemmove_s ENDP
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z	; std::char_traits<wchar_t>::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z PROC	; std::char_traits<wchar_t>::assign, COMDAT

; 310  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	66 8b 08	 mov	 cx, WORD PTR [eax]
  00007	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000b	66 89 0a	 mov	 WORD PTR [edx], cx

; 311  : 		}

  0000e	c3		 ret	 0
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ENDP	; std::char_traits<wchar_t>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@_W@std@@SAIPB_W@Z		; std::char_traits<wchar_t>::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@_W@std@@SAIPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@_W@std@@SAIPB_W@Z PROC		; std::char_traits<wchar_t>::length, COMDAT

; 333  : //		_DEBUG_POINTER(_First);
; 334  : 		return (::wcslen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL3@length:
  00007	66 8b 08	 mov	 cx, WORD PTR [eax]
  0000a	83 c0 02	 add	 eax, 2
  0000d	66 85 c9	 test	 cx, cx
  00010	75 f5		 jne	 SHORT $LL3@length
  00012	2b c2		 sub	 eax, edx
  00014	d1 f8		 sar	 eax, 1

; 335  : 		}

  00016	c3		 ret	 0
?length@?$char_traits@_W@std@@SAIPB_W@Z ENDP		; std::char_traits<wchar_t>::length
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ; std::char_traits<wchar_t>::_Copy_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_words$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z PROC	; std::char_traits<wchar_t>::_Copy_s, COMDAT

; 348  : //		_DEBUG_POINTER(_First1);
; 349  : //		_DEBUG_POINTER(_First2);
; 350  : 		_CRT_SECURE_WMEMCPY(_First1, _Size_in_words, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size_in_words$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 351  : 		return _First1;

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 352  : 		}

  00026	c3		 ret	 0
?_Copy_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ENDP	; std::char_traits<wchar_t>::_Copy_s
_TEXT	ENDS
PUBLIC	?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ; std::char_traits<wchar_t>::_Move_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_words$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z PROC	; std::char_traits<wchar_t>::_Move_s, COMDAT

; 372  : //		_DEBUG_POINTER(_First1);
; 373  : //		_DEBUG_POINTER(_First2);
; 374  : 		_CRT_SECURE_WMEMMOVE(_First1, _Size_in_words, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size_in_words$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H

; 375  : 		return (_Elem *)_First1;

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 376  : 		}

  00026	c3		 ret	 0
?_Move_s@?$char_traits@_W@std@@SAPA_WPA_WIPB_WI@Z ENDP	; std::char_traits<wchar_t>::_Move_s
_TEXT	ENDS
PUBLIC	?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z	; std::char_traits<wchar_t>::to_int_type
; Function compile flags: /Ogtpy
;	COMDAT ?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z PROC	; std::char_traits<wchar_t>::to_int_type, COMDAT

; 391  : 		return (_Ch);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	66 8b 00	 mov	 ax, WORD PTR [eax]

; 392  : 		}

  00007	c3		 ret	 0
?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z ENDP	; std::char_traits<wchar_t>::to_int_type
_TEXT	ENDS
PUBLIC	?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z	; std::char_traits<wchar_t>::eq_int_type
; Function compile flags: /Ogtpy
;	COMDAT ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z PROC	; std::char_traits<wchar_t>::eq_int_type, COMDAT

; 397  : 		return (_Left == _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	66 8b 08	 mov	 cx, WORD PTR [eax]
  00007	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000b	33 c0		 xor	 eax, eax
  0000d	66 3b 0a	 cmp	 cx, WORD PTR [edx]
  00010	0f 94 c0	 sete	 al

; 398  : 		}

  00013	c3		 ret	 0
?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z ENDP	; std::char_traits<wchar_t>::eq_int_type
_TEXT	ENDS
PUBLIC	?eof@?$char_traits@_W@std@@SAGXZ		; std::char_traits<wchar_t>::eof
; Function compile flags: /Ogtpy
;	COMDAT ?eof@?$char_traits@_W@std@@SAGXZ
_TEXT	SEGMENT
?eof@?$char_traits@_W@std@@SAGXZ PROC			; std::char_traits<wchar_t>::eof, COMDAT

; 402  : 		return (WEOF);

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 403  : 		}

  00005	c3		 ret	 0
?eof@?$char_traits@_W@std@@SAGXZ ENDP			; std::char_traits<wchar_t>::eof
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 425  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 426  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogtpy
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 448  : //		_DEBUG_POINTER(_First);
; 449  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@length@2:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $LL3@length@2
  0000e	2b c2		 sub	 eax, edx

; 450  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Copy_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Copy_s, COMDAT

; 463  : //		_DEBUG_POINTER(_First1);
; 464  : //		_DEBUG_POINTER(_First2);
; 465  : 		_CRT_SECURE_MEMCPY(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 466  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 467  : 		}

  00020	c3		 ret	 0
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Copy_s
_TEXT	ENDS
PUBLIC	?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Move_s
; Function compile flags: /Ogtpy
;	COMDAT ?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Move_s, COMDAT

; 487  : //		_DEBUG_POINTER(_First1);
; 488  : //		_DEBUG_POINTER(_First2);
; 489  : 		_CRT_SECURE_MEMMOVE(_First1, _Size_in_bytes, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size_in_bytes$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 490  : 		return _First1;

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 491  : 		}

  00020	c3		 ret	 0
?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Move_s
_TEXT	ENDS
PUBLIC	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Pcont$ = 8						; size = 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z PROC	; std::_Aux_cont::_Aux_cont, COMDAT
; _this$ = ecx

; 364  : 	explicit _Aux_cont(const _Container_base_aux * const _Pcont)

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pcont$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx
  00008	c2 04 00	 ret	 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ENDP	; std::_Aux_cont::_Aux_cont
_TEXT	ENDS
PUBLIC	?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Aux_cont::_Getcont
; Function compile flags: /Ogtpy
;	COMDAT ?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Aux_cont::_Getcont, COMDAT
; _this$ = ecx

; 369  : 		return _Mycontainer;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 370  : 		}

  00002	c3		 ret	 0
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Aux_cont::_Getcont
_TEXT	ENDS
PUBLIC	??0_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::_Container_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??0_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::_Container_base_aux, COMDAT
; _this$ = ecx

; 379  : 	_Container_base_aux()

  00000	8b c1		 mov	 eax, ecx

; 380  : 		{
; 381  : 		// Do nothing: _Container_base_aux_alloc_real() will construct the aux object.
; 382  : 		}

  00002	c3		 ret	 0
??0_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::_Container_base_aux
_TEXT	ENDS
PUBLIC	??1_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::~_Container_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??1_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??1_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::~_Container_base_aux, COMDAT
; _this$ = ecx

; 403  : 		// Do nothing: ~_Container_base_aux_alloc_real() previously destroyed the aux object.
; 404  : 		}

  00000	c3		 ret	 0
??1_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::~_Container_base_aux
_TEXT	ENDS
PUBLIC	??0_Iterator_base_aux@std@@QAE@XZ		; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Ogtpy
;	COMDAT ??0_Iterator_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iterator_base_aux@std@@QAE@XZ PROC			; std::_Iterator_base_aux::_Iterator_base_aux, COMDAT
; _this$ = ecx

; 448  : 	_Iterator_base_aux()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0_Iterator_base_aux@std@@QAE@XZ ENDP			; std::_Iterator_base_aux::_Iterator_base_aux
_TEXT	ENDS
PUBLIC	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z
_TEXT	SEGMENT
__Pcont$ = 8						; size = 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z PROC ; std::_Iterator_base_aux::_Set_container, COMDAT
; _this$ = ecx

; 453  : 		_Myaux = _Pcont->_Myownedaux;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pcont$[esp-4]
  00004	8b 10		 mov	 edx, DWORD PTR [eax]
  00006	89 11		 mov	 DWORD PTR [ecx], edx

; 454  : 		}

  00008	c2 04 00	 ret	 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ENDP ; std::_Iterator_base_aux::_Set_container
_TEXT	ENDS
PUBLIC	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
; Function compile flags: /Ogtpy
;	COMDAT ?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Iterator_base_aux::_Getmycont, COMDAT
; _this$ = ecx

; 458  : 		return _Myaux ? _Myaux->_Getcont() : 0;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	74 03		 je	 SHORT $LN3@Getmycont
  00006	8b 00		 mov	 eax, DWORD PTR [eax]

; 459  : 		}

  00008	c3		 ret	 0
$LN3@Getmycont:

; 458  : 		return _Myaux ? _Myaux->_Getcont() : 0;

  00009	33 c0		 xor	 eax, eax

; 459  : 		}

  0000b	c3		 ret	 0
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Iterator_base_aux::_Getmycont
_TEXT	ENDS
PUBLIC	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z PROC ; std::_Iterator_base_aux::_Same_container, COMDAT
; _this$ = ecx

; 463  : 		return _Myaux == _Other._Myaux;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Other$[esp-4]
  00006	33 c9		 xor	 ecx, ecx
  00008	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000a	0f 94 c1	 sete	 cl
  0000d	8a c1		 mov	 al, cl

; 464  : 		}

  0000f	c2 04 00	 ret	 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ENDP ; std::_Iterator_base_aux::_Same_container
_TEXT	ENDS
PUBLIC	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ	; std::_Iterator_base_aux::_Has_container
; Function compile flags: /Ogtpy
;	COMDAT ?_Has_container@_Iterator_base_aux@std@@QBE_NXZ
_TEXT	SEGMENT
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ PROC	; std::_Iterator_base_aux::_Has_container, COMDAT
; _this$ = ecx

; 468  : 		return _Myaux != 0;

  00000	33 c0		 xor	 eax, eax
  00002	39 01		 cmp	 DWORD PTR [ecx], eax
  00004	0f 95 c0	 setne	 al

; 469  : 		}

  00007	c3		 ret	 0
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ENDP	; std::_Iterator_base_aux::_Has_container
_TEXT	ENDS
PUBLIC	?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ	; std::_Locinfo::_Getctype
EXTRN	__Getctype:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
;	COMDAT ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ
_TEXT	SEGMENT
$T140991 = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ PROC	; std::_Locinfo::_Getctype, COMDAT
; _this$ = ecx

; 123  : 		{	// return ctype stuff

  00000	83 ec 10	 sub	 esp, 16			; 00000010H

; 124  : 		return (::_Getctype());

  00003	8d 04 24	 lea	 eax, DWORD PTR $T140991[esp+16]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 __Getctype
  0000c	8b 4c 24 18	 mov	 ecx, DWORD PTR ___$ReturnUdt$[esp+16]
  00010	8b 10		 mov	 edx, DWORD PTR [eax]
  00012	89 11		 mov	 DWORD PTR [ecx], edx
  00014	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00017	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0001a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0001d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00020	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00023	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00026	8b c1		 mov	 eax, ecx

; 125  : 		}

  00028	83 c4 14	 add	 esp, 20			; 00000014H
  0002b	c2 04 00	 ret	 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ENDP	; std::_Locinfo::_Getctype
_TEXT	ENDS
PUBLIC	?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ	; std::_Locinfo::_Getcvt
EXTRN	__Getcvt:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ PROC		; std::_Locinfo::_Getcvt, COMDAT
; _this$ = ecx

; 129  : 		return (::_Getcvt());

  00000	e8 00 00 00 00	 call	 __Getcvt
  00005	8b c8		 mov	 ecx, eax
  00007	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx
  0000d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 130  : 		}

  00010	c2 04 00	 ret	 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ ENDP		; std::_Locinfo::_Getcvt
_TEXT	ENDS
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 73   : 			{	// construct with specified stamp value

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Val$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 74   : 			}

  00008	c2 04 00	 ret	 4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
PUBLIC	??Bid@locale@std@@QAEIXZ			; std::locale::id::operator unsigned int
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
; Function compile flags: /Ogtpy
;	COMDAT ??Bid@locale@std@@QAEIXZ
_TEXT	SEGMENT
__Lock$86673 = -4					; size = 4
??Bid@locale@std@@QAEIXZ PROC				; std::locale::id::operator unsigned int, COMDAT
; _this$ = ecx

; 77   : 			{	// get stamp, with lazy allocation

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 78   : 			if (_Id == 0)

  00004	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00007	75 26		 jne	 SHORT $LN6@operator

; 79   : 				{	// still zero, allocate stamp
; 80   : 				_BEGIN_LOCK(_LOCK_LOCALE)

  00009	6a 00		 push	 0
  0000b	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$86673[esp+12]
  0000f	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 81   : 					if (_Id == 0)

  00014	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00017	75 0d		 jne	 SHORT $LN1@operator

; 82   : 						_Id = ++_Id_cnt;

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  0001e	40		 inc	 eax
  0001f	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00024	89 06		 mov	 DWORD PTR [esi], eax
$LN1@operator:

; 83   : 				_END_LOCK()

  00026	8d 4c 24 04	 lea	 ecx, DWORD PTR __Lock$86673[esp+8]
  0002a	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN6@operator:

; 84   : 				}
; 85   : 			return (_Id);

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	5e		 pop	 esi

; 86   : 			}

  00032	59		 pop	 ecx
  00033	c3		 ret	 0
??Bid@locale@std@@QAEIXZ ENDP				; std::locale::id::operator unsigned int
_TEXT	ENDS
PUBLIC	?_Incref@facet@locale@std@@QAEXXZ		; std::locale::facet::_Incref
; Function compile flags: /Ogtpy
;	COMDAT ?_Incref@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
__Lock$86679 = -4					; size = 4
?_Incref@facet@locale@std@@QAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 117  : 			{	// safely increment the reference count

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 118  : 			_BEGIN_LOCK(_LOCK_LOCALE)

  00004	6a 00		 push	 0
  00006	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$86679[esp+12]
  0000a	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 119  : 				if (_Refs < (size_t)(-1))

  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	83 f8 ff	 cmp	 eax, -1
  00015	73 04		 jae	 SHORT $LN1@Incref

; 120  : 					++_Refs;

  00017	40		 inc	 eax
  00018	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@Incref:

; 121  : 			_END_LOCK()

  0001b	8d 4c 24 04	 lea	 ecx, DWORD PTR __Lock$86679[esp+8]
  0001f	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00024	5e		 pop	 esi

; 122  : 			}

  00025	59		 pop	 ecx
  00026	c3		 ret	 0
?_Incref@facet@locale@std@@QAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
PUBLIC	?_Decref@facet@locale@std@@QAEPAV123@XZ		; std::locale::facet::_Decref
; Function compile flags: /Ogtpy
;	COMDAT ?_Decref@facet@locale@std@@QAEPAV123@XZ
_TEXT	SEGMENT
__Lock$86684 = -4					; size = 4
?_Decref@facet@locale@std@@QAEPAV123@XZ PROC		; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 125  : 			{	// safely decrement the reference count, return this when dead

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 126  : 			_BEGIN_LOCK(_LOCK_LOCALE)

  00005	6a 00		 push	 0
  00007	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$86684[esp+16]
  0000b	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 127  : 				if (0 < _Refs && _Refs < (size_t)(-1))

  00010	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00013	85 c0		 test	 eax, eax
  00015	76 09		 jbe	 SHORT $LN1@Decref
  00017	83 f8 ff	 cmp	 eax, -1
  0001a	73 04		 jae	 SHORT $LN1@Decref

; 128  : 					--_Refs;

  0001c	48		 dec	 eax
  0001d	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN1@Decref:

; 129  : 				return (_Refs == 0 ? this : 0);

  00020	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00023	f7 de		 neg	 esi
  00025	1b f6		 sbb	 esi, esi
  00027	f7 d6		 not	 esi
  00029	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$86684[esp+12]
  0002d	23 f7		 and	 esi, edi
  0002f	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00034	5f		 pop	 edi
  00035	8b c6		 mov	 eax, esi
  00037	5e		 pop	 esi

; 130  : 			_END_LOCK()
; 131  : 			}

  00038	59		 pop	 ecx
  00039	c3		 ret	 0
?_Decref@facet@locale@std@@QAEPAV123@XZ ENDP		; std::locale::facet::_Decref
_TEXT	ENDS
PUBLIC	?_Register@facet@locale@std@@QAEXXZ		; std::locale::facet::_Register
EXTRN	?facet_Register@facet@locale@std@@CAXPAV123@@Z:PROC ; std::locale::facet::facet_Register
; Function compile flags: /Ogtpy
;	COMDAT ?_Register@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
?_Register@facet@locale@std@@QAEXXZ PROC		; std::locale::facet::_Register, COMDAT
; _this$ = ecx

; 135  : #if defined(_M_CEE)
; 136  : 			facet_Register_m(this);
; 137  : #else
; 138  : 			facet_Register(this);

  00000	51		 push	 ecx
  00001	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  00006	59		 pop	 ecx

; 139  : #endif
; 140  : 			}

  00007	c3		 ret	 0
?_Register@facet@locale@std@@QAEXXZ ENDP		; std::locale::facet::_Register
_TEXT	ENDS
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??1facet@locale@std@@UAE@XZ			; std::locale::facet::~facet
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Efacet@locale@std@@UAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1facet@locale@std@@UAE@XZ
_TEXT	SEGMENT
??1facet@locale@std@@UAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx

; 170  : 			{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@

; 171  : 			}

  00006	c3		 ret	 0
??1facet@locale@std@@UAE@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
PUBLIC	??0facet@locale@std@@IAE@I@Z			; std::locale::facet::facet
; Function compile flags: /Ogtpy
;	COMDAT ??0facet@locale@std@@IAE@I@Z
_TEXT	SEGMENT
__Initrefs$ = 8						; size = 4
??0facet@locale@std@@IAE@I@Z PROC			; std::locale::facet::facet, COMDAT
; _this$ = ecx

; 176  : 			{	// construct with initial reference count

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Initrefs$[esp-4]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7facet@locale@std@@6B@
  0000c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 177  : 			}

  0000f	c2 04 00	 ret	 4
??0facet@locale@std@@IAE@I@Z ENDP			; std::locale::facet::facet
_TEXT	ENDS
PUBLIC	??0locale@std@@QAE@XZ				; std::locale::locale
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	?_Init@locale@std@@CAPAV_Locimp@12@XZ:PROC	; std::locale::_Init
; Function compile flags: /Ogtpy
;	COMDAT ??0locale@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$141018 = -4					; size = 4
??0locale@std@@QAE@XZ PROC				; std::locale::locale, COMDAT
; _this$ = ecx

; 324  : 		{	// construct from current locale

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Init
  0000a	89 07		 mov	 DWORD PTR [edi], eax

; 325  : 		_Getgloballocale()->_Incref();

  0000c	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  00011	6a 00		 push	 0
  00013	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$141018[esp+16]
  00017	8b f0		 mov	 esi, eax
  00019	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0001e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00021	83 f8 ff	 cmp	 eax, -1
  00024	73 04		 jae	 SHORT $LN3@locale
  00026	40		 inc	 eax
  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN3@locale:
  0002a	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$141018[esp+12]
  0002e	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 326  : 		}

  00033	8b c7		 mov	 eax, edi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	59		 pop	 ecx
  00038	c3		 ret	 0
??0locale@std@@QAE@XZ ENDP				; std::locale::locale
_TEXT	ENDS
PUBLIC	??0locale@std@@QAE@ABV01@@Z			; std::locale::locale
; Function compile flags: /Ogtpy
;	COMDAT ??0locale@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Lock$141026 = 8					; size = 4
__Right$ = 8						; size = 4
??0locale@std@@QAE@ABV01@@Z PROC			; std::locale::locale, COMDAT
; _this$ = ecx

; 334  : 		{	// construct by copying

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	56		 push	 esi
  00005	8b 30		 mov	 esi, DWORD PTR [eax]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 335  : 		_Ptr->_Incref();

  0000a	6a 00		 push	 0
  0000c	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$141026[esp+8]
  00010	89 37		 mov	 DWORD PTR [edi], esi
  00012	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	83 f8 ff	 cmp	 eax, -1
  0001d	73 04		 jae	 SHORT $LN3@locale@2
  0001f	40		 inc	 eax
  00020	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN3@locale@2:
  00023	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$141026[esp+4]
  00027	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 336  : 		}

  0002c	8b c7		 mov	 eax, edi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c2 04 00	 ret	 4
??0locale@std@@QAE@ABV01@@Z ENDP			; std::locale::locale
_TEXT	ENDS
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
; Function compile flags: /Ogtpy
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$141039 = -4					; size = 4
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 390  : 		{	// destroy the object

  00000	51		 push	 ecx
  00001	57		 push	 edi

; 391  : 		if (_Ptr != 0)

  00002	8b 39		 mov	 edi, DWORD PTR [ecx]
  00004	85 ff		 test	 edi, edi
  00006	74 3f		 je	 SHORT $LN4@locale@3

; 392  : 			_DELETE_CRT(_Ptr->_Decref());

  00008	6a 00		 push	 0
  0000a	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$141039[esp+12]
  0000e	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00013	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00016	85 c0		 test	 eax, eax
  00018	76 09		 jbe	 SHORT $LN6@locale@3
  0001a	83 f8 ff	 cmp	 eax, -1
  0001d	73 04		 jae	 SHORT $LN6@locale@3
  0001f	48		 dec	 eax
  00020	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN6@locale@3:
  00023	56		 push	 esi
  00024	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00027	f7 de		 neg	 esi
  00029	1b f6		 sbb	 esi, esi
  0002b	f7 d6		 not	 esi
  0002d	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$141039[esp+12]
  00031	23 f7		 and	 esi, edi
  00033	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00038	85 f6		 test	 esi, esi
  0003a	74 0a		 je	 SHORT $LN9@locale@3
  0003c	8b 06		 mov	 eax, DWORD PTR [esi]
  0003e	8b 10		 mov	 edx, DWORD PTR [eax]
  00040	6a 01		 push	 1
  00042	8b ce		 mov	 ecx, esi
  00044	ff d2		 call	 edx
$LN9@locale@3:
  00046	5e		 pop	 esi
$LN4@locale@3:
  00047	5f		 pop	 edi

; 393  : 		}

  00048	59		 pop	 ecx
  00049	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
; Function compile flags: /Ogtpy
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 413  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 414  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	56		 push	 esi
  00003	8b 74 24 08	 mov	 esi, DWORD PTR __Id$[esp]
  00007	3b 71 0c	 cmp	 esi, DWORD PTR [ecx+12]
  0000a	73 24		 jae	 SHORT $LN6@Getfacet
  0000c	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000f	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]

; 415  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00012	85 c0		 test	 eax, eax
  00014	75 20		 jne	 SHORT $LN1@Getfacet
$LN10@Getfacet:
  00016	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  0001a	74 1a		 je	 SHORT $LN1@Getfacet

; 416  : 			return (_Facptr);	// found facet or not transparent, return pointer
; 417  : 		else
; 418  : 			{	// look in current locale
; 419  : 			locale::_Locimp *_Ptr = _Getgloballocale();

  0001c	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 420  : 			return (_Id < _Ptr->_Facetcount
; 421  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 422  : 				: 0);	// no entry in current locale

  00021	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00024	73 0e		 jae	 SHORT $LN8@Getfacet
  00026	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00029	8b 04 b1	 mov	 eax, DWORD PTR [ecx+esi*4]
  0002c	5e		 pop	 esi

; 423  : 			}
; 424  : 		}

  0002d	c2 04 00	 ret	 4
$LN6@Getfacet:

; 413  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 414  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  00030	33 c0		 xor	 eax, eax

; 415  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00032	eb e2		 jmp	 SHORT $LN10@Getfacet
$LN8@Getfacet:

; 420  : 			return (_Id < _Ptr->_Facetcount
; 421  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 422  : 				: 0);	// no entry in current locale

  00034	33 c0		 xor	 eax, eax
$LN1@Getfacet:
  00036	5e		 pop	 esi

; 423  : 			}
; 424  : 		}

  00037	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gfacet@locale@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@UAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0000e	74 09		 je	 SHORT $LN6@scalar@2
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN6@scalar@2:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_Gfacet@locale@std@@UAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??0ctype_base@std@@QAE@I@Z			; std::ctype_base::ctype_base
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Ectype_base@std@@UAEPAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD FLAT:??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD FLAT:??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT
??_R0?AUctype_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUctype_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 00H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUctype_base@std@@@8
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DD FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DD	FLAT:??_Ectype_base@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0ctype_base@std@@QAE@I@Z
_TEXT	SEGMENT
__Refs$ = 8						; size = 4
??0ctype_base@std@@QAE@I@Z PROC				; std::ctype_base::ctype_base, COMDAT
; _this$ = ecx

; 1358 : 		{	// default constructor

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Refs$[esp-4]
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ctype_base@std@@6B@

; 1359 : 		}

  0000f	c2 04 00	 ret	 4
??0ctype_base@std@@QAE@I@Z ENDP				; std::ctype_base::ctype_base
_TEXT	ENDS
PUBLIC	??1ctype_base@std@@UAE@XZ			; std::ctype_base::~ctype_base
; Function compile flags: /Ogtpy
;	COMDAT ??1ctype_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ctype_base@std@@UAE@XZ PROC				; std::ctype_base::~ctype_base, COMDAT
; _this$ = ecx

; 1363 : 		}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
  00006	c3		 ret	 0
??1ctype_base@std@@UAE@XZ ENDP				; std::ctype_base::~ctype_base
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gctype_base@std@@UAEPAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0000e	74 09		 je	 SHORT $LN8@scalar@3
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN8@scalar@3:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_Gctype_base@std@@UAEPAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?widen@?$ctype@_W@std@@QBE_WD@Z			; std::ctype<wchar_t>::widen
; Function compile flags: /Ogtpy
;	COMDAT ?widen@?$ctype@_W@std@@QBE_WD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?widen@?$ctype@_W@std@@QBE_WD@Z PROC			; std::ctype<wchar_t>::widen, COMDAT
; _this$ = ecx

; 1965 : 		return (do_widen(_Byte));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00005	ff e0		 jmp	 eax
?widen@?$ctype@_W@std@@QBE_WD@Z ENDP			; std::ctype<wchar_t>::widen
_TEXT	ENDS
PUBLIC	?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z	; std::ctype<wchar_t>::_Init
; Function compile flags: /Ogtpy
;	COMDAT ?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
$T141094 = -16						; size = 16
__Lobj$ = 8						; size = 4
?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z PROC	; std::ctype<wchar_t>::_Init, COMDAT
; _this$ = ecx

; 2047 : 		{	// initialize from _Lobj

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	56		 push	 esi

; 2048 : 		_Ctype = _Lobj._Getctype();

  00004	8d 44 24 04	 lea	 eax, DWORD PTR $T141094[esp+20]
  00008	50		 push	 eax
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 __Getctype
  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00015	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00018	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  0001b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001e	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00021	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00024	83 c4 04	 add	 esp, 4
  00027	89 56 14	 mov	 DWORD PTR [esi+20], edx

; 2049 : 		_Cvt = _Lobj._Getcvt();

  0002a	e8 00 00 00 00	 call	 __Getcvt
  0002f	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00032	89 56 1c	 mov	 DWORD PTR [esi+28], edx
  00035	5e		 pop	 esi

; 2050 : 		}

  00036	83 c4 10	 add	 esp, 16			; 00000010H
  00039	c2 04 00	 ret	 4
?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z ENDP	; std::ctype<wchar_t>::_Init
_TEXT	ENDS
PUBLIC	?rdstate@ios_base@std@@QBEHXZ			; std::ios_base::rdstate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
;	COMDAT ?rdstate@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?rdstate@ios_base@std@@QBEHXZ PROC			; std::ios_base::rdstate, COMDAT
; _this$ = ecx

; 311  : 		return (_Mystate);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 312  : 		}

  00003	c3		 ret	 0
?rdstate@ios_base@std@@QBEHXZ ENDP			; std::ios_base::rdstate
_TEXT	ENDS
PUBLIC	?good@ios_base@std@@QBE_NXZ			; std::ios_base::good
; Function compile flags: /Ogtpy
;	COMDAT ?good@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?good@ios_base@std@@QBE_NXZ PROC			; std::ios_base::good, COMDAT
; _this$ = ecx

; 334  : 		return (rdstate() == goodbit);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  00005	0f 94 c0	 sete	 al

; 335  : 		}

  00008	c3		 ret	 0
?good@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::good
_TEXT	ENDS
PUBLIC	?fail@ios_base@std@@QBE_NXZ			; std::ios_base::fail
; Function compile flags: /Ogtpy
;	COMDAT ?fail@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?fail@ios_base@std@@QBE_NXZ PROC			; std::ios_base::fail, COMDAT
; _this$ = ecx

; 344  : 		return (((int)rdstate()
; 345  : 			& ((int)badbit | (int)failbit)) != 0);

  00000	f6 41 08 06	 test	 BYTE PTR [ecx+8], 6
  00004	b8 00 00 00 00	 mov	 eax, 0
  00009	0f 95 c0	 setne	 al

; 346  : 		}

  0000c	c3		 ret	 0
?fail@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::fail
_TEXT	ENDS
PUBLIC	?flags@ios_base@std@@QBEHXZ			; std::ios_base::flags
; Function compile flags: /Ogtpy
;	COMDAT ?flags@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?flags@ios_base@std@@QBEHXZ PROC			; std::ios_base::flags, COMDAT
; _this$ = ecx

; 374  : 		return (_Fmtfl);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 375  : 		}

  00003	c3		 ret	 0
?flags@ios_base@std@@QBEHXZ ENDP			; std::ios_base::flags
_TEXT	ENDS
PUBLIC	?width@ios_base@std@@QBEHXZ			; std::ios_base::width
; Function compile flags: /Ogtpy
;	COMDAT ?width@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?width@ios_base@std@@QBEHXZ PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 419  : 		return (_Wide);

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 420  : 		}

  00003	c3		 ret	 0
?width@ios_base@std@@QBEHXZ ENDP			; std::ios_base::width
_TEXT	ENDS
PUBLIC	?width@ios_base@std@@QAEHH@Z			; std::ios_base::width
; Function compile flags: /Ogtpy
;	COMDAT ?width@ios_base@std@@QAEHH@Z
_TEXT	SEGMENT
__Newwidth$ = 8						; size = 4
?width@ios_base@std@@QAEHH@Z PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 424  : 		streamsize _Oldwidth = _Wide;
; 425  : 		_Wide = _Newwidth;

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Newwidth$[esp-4]
  00004	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00007	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 426  : 		return (_Oldwidth);
; 427  : 		}

  0000a	c2 04 00	 ret	 4
?width@ios_base@std@@QAEHH@Z ENDP			; std::ios_base::width
_TEXT	ENDS
PUBLIC	?getloc@ios_base@std@@QBE?AVlocale@2@XZ		; std::ios_base::getloc
; Function compile flags: /Ogtpy
;	COMDAT ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
_TEXT	SEGMENT
$T141123 = -4						; size = 4
__Lock$141136 = 8					; size = 4
___$ReturnUdt$ = 8					; size = 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ PROC		; std::ios_base::getloc, COMDAT
; _this$ = ecx

; 430  : 		{	// get locale

  00000	51		 push	 ecx

; 431  : 		return (*_Ploc);

  00001	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00004	56		 push	 esi
  00005	8b 30		 mov	 esi, DWORD PTR [eax]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	6a 00		 push	 0
  0000e	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$141136[esp+12]
  00012	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T141123[esp+16], 0
  0001a	89 37		 mov	 DWORD PTR [edi], esi
  0001c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00021	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00024	83 f8 ff	 cmp	 eax, -1
  00027	73 04		 jae	 SHORT $LN7@getloc
  00029	40		 inc	 eax
  0002a	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@getloc:
  0002d	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$141136[esp+8]
  00031	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00036	8b c7		 mov	 eax, edi
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi

; 432  : 		}

  0003a	59		 pop	 ecx
  0003b	c2 04 00	 ret	 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ ENDP		; std::ios_base::getloc
_TEXT	ENDS
PUBLIC	??_7ios_base@std@@6B@				; std::ios_base::`vftable'
PUBLIC	??1ios_base@std@@UAE@XZ				; std::ios_base::~ios_base
PUBLIC	??_R4ios_base@std@@6B@				; std::ios_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z:PROC	; std::ios_base::_Ios_base_dtor
EXTRN	??_Eios_base@std@@UAEPAXI@Z:PROC		; std::ios_base::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
_DATA	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
_DATA	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ios_base@std@@6B@
rdata$r	SEGMENT
??_R4ios_base@std@@6B@ DD 00H				; std::ios_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVios_base@std@@@8
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7ios_base@std@@6B@
CONST	SEGMENT
??_7ios_base@std@@6B@ DD FLAT:??_R4ios_base@std@@6B@	; std::ios_base::`vftable'
	DD	FLAT:??_Eios_base@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ios_base@std@@UAE@XZ PROC				; std::ios_base::~ios_base, COMDAT
; _this$ = ecx

; 494  :         _Ios_base_dtor(this);

  00000	51		 push	 ecx
  00001	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00007	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000c	59		 pop	 ecx

; 495  :         }

  0000d	c3		 ret	 0
??1ios_base@std@@UAE@XZ ENDP				; std::ios_base::~ios_base
_TEXT	ENDS
PUBLIC	??0ios_base@std@@IAE@XZ				; std::ios_base::ios_base
; Function compile flags: /Ogtpy
;	COMDAT ??0ios_base@std@@IAE@XZ
_TEXT	SEGMENT
??0ios_base@std@@IAE@XZ PROC				; std::ios_base::ios_base, COMDAT
; _this$ = ecx

; 510  : 	__CLR_OR_THIS_CALL ios_base()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@

; 511  : 		{	// default constructor
; 512  : 		}

  00008	c3		 ret	 0
??0ios_base@std@@IAE@XZ ENDP				; std::ios_base::ios_base
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gios_base@std@@UAEPAXI@Z PROC			; std::ios_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	56		 push	 esi
  00004	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0000a	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000f	83 c4 04	 add	 esp, 4
  00012	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00017	74 09		 je	 SHORT $LN6@scalar@4
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	83 c4 04	 add	 esp, 4
$LN6@scalar@4:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c2 04 00	 ret	 4
??_Gios_base@std@@UAEPAXI@Z ENDP			; std::ios_base::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7Container@ForEach@CipherShed@@6B@		; CipherShed::ForEach::Container::`vftable'
PUBLIC	??0Container@ForEach@CipherShed@@QAE@XZ		; CipherShed::ForEach::Container::Container
PUBLIC	??_R4Container@ForEach@CipherShed@@6B@		; CipherShed::ForEach::Container::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUContainer@ForEach@CipherShed@@@8	; CipherShed::ForEach::Container `RTTI Type Descriptor'
PUBLIC	??_R3Container@ForEach@CipherShed@@8		; CipherShed::ForEach::Container::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Container@ForEach@CipherShed@@8		; CipherShed::ForEach::Container::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Container@ForEach@CipherShed@@8	; CipherShed::ForEach::Container::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EContainer@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::Container::`vector deleting destructor'
EXTRN	__purecall:PROC
;	COMDAT ??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
; File c:\users\public\desktop\projects\ciphershed\src\platform\foreach.h
rdata$r	SEGMENT
??_R1A@?0A@EA@Container@ForEach@CipherShed@@8 DD FLAT:??_R0?AUContainer@ForEach@CipherShed@@@8 ; CipherShed::ForEach::Container::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2Container@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2Container@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8 ; CipherShed::ForEach::Container::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Container@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3Container@ForEach@CipherShed@@8 DD 00H		; CipherShed::ForEach::Container::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUContainer@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUContainer@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::Container `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUContainer@ForEach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Container@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4Container@ForEach@CipherShed@@6B@ DD 00H		; CipherShed::ForEach::Container::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUContainer@ForEach@CipherShed@@@8
	DD	FLAT:??_R3Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7Container@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7Container@ForEach@CipherShed@@6B@ DD FLAT:??_R4Container@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::Container::`vftable'
	DD	FLAT:??_EContainer@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0Container@ForEach@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??0Container@ForEach@CipherShed@@QAE@XZ PROC		; CipherShed::ForEach::Container::Container, COMDAT
; _this$ = ecx

; 19   : 			Container () : InnerContinue (true), InnerEndCondition (false) { }

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00008	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  0000c	c6 40 05 00	 mov	 BYTE PTR [eax+5], 0
  00010	c3		 ret	 0
??0Container@ForEach@CipherShed@@QAE@XZ ENDP		; CipherShed::ForEach::Container::Container
_TEXT	ENDS
PUBLIC	??1Container@ForEach@CipherShed@@UAE@XZ		; CipherShed::ForEach::Container::~Container
; Function compile flags: /Ogtpy
;	COMDAT ??1Container@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
??1Container@ForEach@CipherShed@@UAE@XZ PROC		; CipherShed::ForEach::Container::~Container, COMDAT
; _this$ = ecx

; 20   : 			virtual ~Container () { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  00006	c3		 ret	 0
??1Container@ForEach@CipherShed@@UAE@XZ ENDP		; CipherShed::ForEach::Container::~Container
_TEXT	ENDS
PUBLIC	?Continue@Container@ForEach@CipherShed@@QBEXXZ	; CipherShed::ForEach::Container::Continue
; Function compile flags: /Ogtpy
;	COMDAT ?Continue@Container@ForEach@CipherShed@@QBEXXZ
_TEXT	SEGMENT
?Continue@Container@ForEach@CipherShed@@QBEXXZ PROC	; CipherShed::ForEach::Container::Continue, COMDAT
; _this$ = ecx

; 22   : 			void Continue () const { InnerContinue = true; }

  00000	c6 41 04 01	 mov	 BYTE PTR [ecx+4], 1
  00004	c3		 ret	 0
?Continue@Container@ForEach@CipherShed@@QBEXXZ ENDP	; CipherShed::ForEach::Container::Continue
_TEXT	ENDS
PUBLIC	?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ ; CipherShed::ForEach::Container::InnerIsNotEnd
; Function compile flags: /Ogtpy
;	COMDAT ?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ
_TEXT	SEGMENT
?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ PROC ; CipherShed::ForEach::Container::InnerIsNotEnd, COMDAT
; _this$ = ecx

; 23   : 			bool InnerIsNotEnd () const { return InnerEndCondition = !InnerEndCondition; }

  00000	80 79 05 00	 cmp	 BYTE PTR [ecx+5], 0
  00004	0f 94 c0	 sete	 al
  00007	88 41 05	 mov	 BYTE PTR [ecx+5], al
  0000a	c3		 ret	 0
?InnerIsNotEnd@Container@ForEach@CipherShed@@QBE_NXZ ENDP ; CipherShed::ForEach::Container::InnerIsNotEnd
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_GContainer@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GContainer@ForEach@CipherShed@@UAEPAXI@Z PROC	; CipherShed::ForEach::Container::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  0000e	74 09		 je	 SHORT $LN6@scalar@5
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN6@scalar@5:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_GContainer@ForEach@CipherShed@@UAEPAXI@Z ENDP	; CipherShed::ForEach::Container::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	_ConvertUTF16toUTF8s
EXTRN	_ConvertUTF16toUTF8:PROC
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\common\util\unicode\convertutf.h
;	COMDAT _ConvertUTF16toUTF8s
_TEXT	SEGMENT
_sourceStart$ = 8					; size = 4
_sourceLength$ = 12					; size = 4
_targetStart$ = 16					; size = 4
_targetLength$ = 20					; size = 4
_flags$ = 24						; size = 4
_ConvertUTF16toUTF8s PROC				; COMDAT

; 172  : 	return ConvertUTF16toUTF8(&sourceStart, sourceStart+sizeof(*sourceStart)*sourceLength, &targetStart, targetStart+sizeof(*targetStart)*targetLength, flags);

  00000	8b 44 24 14	 mov	 eax, DWORD PTR _flags$[esp-4]
  00004	8b 4c 24 10	 mov	 ecx, DWORD PTR _targetLength$[esp-4]
  00008	8b 54 24 0c	 mov	 edx, DWORD PTR _targetStart$[esp-4]
  0000c	50		 push	 eax
  0000d	03 d1		 add	 edx, ecx
  0000f	8b 4c 24 0c	 mov	 ecx, DWORD PTR _sourceLength$[esp]
  00013	52		 push	 edx
  00014	8b 54 24 0c	 mov	 edx, DWORD PTR _sourceStart$[esp+4]
  00018	8d 44 24 14	 lea	 eax, DWORD PTR _targetStart$[esp+4]
  0001c	50		 push	 eax
  0001d	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00020	50		 push	 eax
  00021	8d 4c 24 14	 lea	 ecx, DWORD PTR _sourceStart$[esp+12]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 _ConvertUTF16toUTF8
  0002b	83 c4 14	 add	 esp, 20			; 00000014H

; 173  : }

  0002e	c3		 ret	 0
_ConvertUTF16toUTF8s ENDP
_TEXT	ENDS
PUBLIC	??_C@_11LOCGONAA@?$AA?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	_defaultKeyFilesParam:QWORD
EXTRN	_KeyFileRemoveAll:PROC
EXTRN	_FirstKeyFile:DWORD
EXTRN	__imp__SetWindowTextW@8:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_11LOCGONAA@?$AA?$AA@
; File c:\program files\microsoft sdks\windows\v7.0\include\winnt.h
CONST	SEGMENT
??_C@_11LOCGONAA@?$AA?$AA@ DB 00H, 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\format\tcformat.c
CONST	ENDS
;	COMDAT ?WipePasswordsAndKeyfiles@@YAXXZ
_TEXT	SEGMENT
_tmp$ = -136						; size = 130
__$ArrayPad$ = -4					; size = 4
?WipePasswordsAndKeyfiles@@YAXXZ PROC			; WipePasswordsAndKeyfiles, COMDAT

; 283  : {

  00000	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 84 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+136], eax
  00014	56		 push	 esi
  00015	57		 push	 edi

; 284  : 	WCHAR tmp[MAX_PASSWORD+1];
; 285  : 
; 286  : 	// Attempt to wipe passwords stored in the input field buffers
; 287  : 	memset (tmp, 0x20, sizeof(tmp)); //0x20 = ASCII space or 0x2020 = Unicode DAGGER

  00016	68 82 00 00 00	 push	 130			; 00000082H
  0001b	8d 44 24 0c	 lea	 eax, DWORD PTR _tmp$[esp+148]
  0001f	6a 20		 push	 32			; 00000020H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _memset

; 288  : 	tmp [MAX_PASSWORD] = 0;
; 289  : 	SetWindowTextW(hPasswordInputField, tmp);

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  0002c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	8d 54 24 08	 lea	 edx, DWORD PTR _tmp$[esp+144]
  00039	52		 push	 edx
  0003a	33 c9		 xor	 ecx, ecx
  0003c	50		 push	 eax
  0003d	66 89 8c 24 90
	00 00 00	 mov	 WORD PTR _tmp$[esp+280], cx
  00045	ff d7		 call	 edi

; 290  : 	SetWindowTextW(hVerifyPasswordInputField, tmp);

  00047	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  0004d	8d 4c 24 08	 lea	 ecx, DWORD PTR _tmp$[esp+144]
  00051	51		 push	 ecx
  00052	52		 push	 edx
  00053	ff d7		 call	 edi

; 291  : 
; 292  : 	burn (&szTmpPas[0], sizeof (szTmpPas));

  00055	ba 00 00 00 00	 mov	 edx, OFFSET ?szTmpPas@@3PADA ; szTmpPas
  0005a	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H
  0005f	8b f1		 mov	 esi, ecx
  00061	8b c2		 mov	 eax, edx
$LL24@WipePasswo:
  00063	c6 00 00	 mov	 BYTE PTR [eax], 0
  00066	40		 inc	 eax
  00067	83 ee 01	 sub	 esi, 1
  0006a	75 f7		 jne	 SHORT $LL24@WipePasswo
  0006c	8d 64 24 00	 npad	 4
$LL17@WipePasswo:
  00070	49		 dec	 ecx
  00071	c6 02 00	 mov	 BYTE PTR [edx], 0
  00074	42		 inc	 edx
  00075	85 c9		 test	 ecx, ecx
  00077	75 f7		 jne	 SHORT $LL17@WipePasswo

; 293  : 	burn (&szVerify[0], sizeof (szVerify));

  00079	ba 00 00 00 00	 mov	 edx, OFFSET ?szVerify@@3PA_WA ; szVerify
  0007e	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  00083	8b f1		 mov	 esi, ecx
  00085	8b c2		 mov	 eax, edx
$LL28@WipePasswo:
  00087	c6 00 00	 mov	 BYTE PTR [eax], 0
  0008a	40		 inc	 eax
  0008b	83 ee 01	 sub	 esi, 1
  0008e	75 f7		 jne	 SHORT $LL28@WipePasswo
$LL12@WipePasswo:
  00090	49		 dec	 ecx
  00091	c6 02 00	 mov	 BYTE PTR [edx], 0
  00094	42		 inc	 edx
  00095	85 c9		 test	 ecx, ecx
  00097	75 f7		 jne	 SHORT $LL12@WipePasswo

; 294  : 	burn (&volumePassword, sizeof (volumePassword));

  00099	ba 00 00 00 00	 mov	 edx, OFFSET ?volumePassword@@3UPassword@@A ; volumePassword
  0009e	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  000a3	8b f1		 mov	 esi, ecx
  000a5	8b c2		 mov	 eax, edx
$LL32@WipePasswo:
  000a7	c6 00 00	 mov	 BYTE PTR [eax], 0
  000aa	40		 inc	 eax
  000ab	83 ee 01	 sub	 esi, 1
  000ae	75 f7		 jne	 SHORT $LL32@WipePasswo
$LL7@WipePasswo:
  000b0	49		 dec	 ecx
  000b1	c6 02 00	 mov	 BYTE PTR [edx], 0
  000b4	42		 inc	 edx
  000b5	85 c9		 test	 ecx, ecx
  000b7	75 f7		 jne	 SHORT $LL7@WipePasswo

; 295  : 	burn (&szRawPassword[0], sizeof (szRawPassword));

  000b9	ba 00 00 00 00	 mov	 edx, OFFSET ?szRawPassword@@3PA_WA ; szRawPassword
  000be	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  000c3	8b f1		 mov	 esi, ecx
  000c5	8b c2		 mov	 eax, edx
$LL36@WipePasswo:
  000c7	c6 00 00	 mov	 BYTE PTR [eax], 0
  000ca	40		 inc	 eax
  000cb	83 ee 01	 sub	 esi, 1
  000ce	75 f7		 jne	 SHORT $LL36@WipePasswo
$LL2@WipePasswo:
  000d0	49		 dec	 ecx
  000d1	c6 02 00	 mov	 BYTE PTR [edx], 0
  000d4	42		 inc	 edx
  000d5	85 c9		 test	 ecx, ecx
  000d7	75 f7		 jne	 SHORT $LL2@WipePasswo

; 296  : 
; 297  : 	SetWindowTextW(hPasswordInputField,L"");

  000d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  000e3	50		 push	 eax
  000e4	ff d7		 call	 edi

; 298  : 	SetWindowTextW(hVerifyPasswordInputField,L"");

  000e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  000f1	51		 push	 ecx
  000f2	ff d7		 call	 edi

; 299  : 
; 300  : 	KeyFileRemoveAll (&FirstKeyFile);

  000f4	68 00 00 00 00	 push	 OFFSET _FirstKeyFile
  000f9	e8 00 00 00 00	 call	 _KeyFileRemoveAll

; 301  : 	KeyFileRemoveAll (&defaultKeyFilesParam.FirstKeyFile);

  000fe	68 04 00 00 00	 push	 OFFSET _defaultKeyFilesParam+4
  00103	e8 00 00 00 00	 call	 _KeyFileRemoveAll

; 302  : }

  00108	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+152]
  0010f	83 c4 08	 add	 esp, 8
  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	33 cc		 xor	 ecx, esp
  00116	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011b	81 c4 88 00 00
	00		 add	 esp, 136		; 00000088H
  00121	c3		 ret	 0
?WipePasswordsAndKeyfiles@@YAXXZ ENDP			; WipePasswordsAndKeyfiles
_TEXT	ENDS
PUBLIC	??_GBootEncryption@CipherShed@@QAEPAXI@Z	; CipherShed::BootEncryption::`scalar deleting destructor'
EXTRN	??1BootEncryption@CipherShed@@QAE@XZ:PROC	; CipherShed::BootEncryption::~BootEncryption
; Function compile flags: /Ogtpy
;	COMDAT ??_GBootEncryption@CipherShed@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GBootEncryption@CipherShed@@QAEPAXI@Z PROC		; CipherShed::BootEncryption::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@6
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@6:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GBootEncryption@CipherShed@@QAEPAXI@Z ENDP		; CipherShed::BootEncryption::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0L@FEEFGEIL@CipherShed?$AA@		; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp__PostMessageA@16:PROC
EXTRN	_MainDlg:DWORD
EXTRN	__imp__GetWindowTextA@12:PROC
EXTRN	__imp__GetWindowLongA@8:PROC
;	COMDAT ??_C@_0L@FEEFGEIL@CipherShed?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string.h
CONST	SEGMENT
??_C@_0L@FEEFGEIL@CipherShed?$AA@ DB 'CipherShed', 00H	; `string'
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\format\tcformat.c
CONST	ENDS
;	COMDAT ?BroadcastSysEncCfgUpdateCallb@@YGHPAUHWND__@@J@Z
_TEXT	SEGMENT
_name$131792 = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_lParam$ = 12						; size = 4
?BroadcastSysEncCfgUpdateCallb@@YGHPAUHWND__@@J@Z PROC	; BroadcastSysEncCfgUpdateCallb, COMDAT

; 384  : {

  00000	81 ec 04 04 00
	00		 sub	 esp, 1028		; 00000404H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 00 04
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+1028], eax
  00014	56		 push	 esi
  00015	8b b4 24 0c 04
	00 00		 mov	 esi, DWORD PTR _hwnd$[esp+1028]

; 385  : 	/* Modifying 'TRUE' can introduce incompatibility with previous versions. */
; 386  : 	if (GetWindowLongPtr (hwnd, GWLP_USERDATA) == (LONG_PTR) 'TRUE')

  0001c	6a eb		 push	 -21			; ffffffebH
  0001e	56		 push	 esi
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  00025	3d 45 55 52 54	 cmp	 eax, 1414681925		; 54525545H
  0002a	75 58		 jne	 SHORT $LN9@BroadcastS

; 387  : 	{
; 388  : 		char name[1024] = { 0 };

  0002c	68 ff 03 00 00	 push	 1023			; 000003ffH
  00031	8d 44 24 09	 lea	 eax, DWORD PTR _name$131792[esp+1037]
  00035	6a 00		 push	 0
  00037	50		 push	 eax
  00038	c6 44 24 10 00	 mov	 BYTE PTR _name$131792[esp+1044], 0
  0003d	e8 00 00 00 00	 call	 _memset
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 389  : 		GetWindowTextA(hwnd, name, sizeof (name) - 1);

  00045	68 ff 03 00 00	 push	 1023			; 000003ffH
  0004a	8d 4c 24 08	 lea	 ecx, DWORD PTR _name$131792[esp+1036]
  0004e	51		 push	 ecx
  0004f	56		 push	 esi
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 390  : 		if (hwnd != MainDlg && strstr (name, "CipherShed"))

  00056	3b 35 00 00 00
	00		 cmp	 esi, DWORD PTR _MainDlg
  0005c	74 26		 je	 SHORT $LN9@BroadcastS
  0005e	8d 54 24 04	 lea	 edx, DWORD PTR _name$131792[esp+1032]
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FEEFGEIL@CipherShed?$AA@
  00067	52		 push	 edx
  00068	e8 00 00 00 00	 call	 _strstr
  0006d	83 c4 08	 add	 esp, 8
  00070	85 c0		 test	 eax, eax
  00072	74 10		 je	 SHORT $LN9@BroadcastS

; 391  : 		{
; 392  : 			PostMessage (hwnd, TC_APPMSG_SYSENC_CONFIG_UPDATE, 0, 0);

  00074	6a 00		 push	 0
  00076	6a 00		 push	 0
  00078	68 65 80 00 00	 push	 32869			; 00008065H
  0007d	56		 push	 esi
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
$LN9@BroadcastS:

; 393  : 		}
; 394  : 	}
; 395  : 	return TRUE;
; 396  : }

  00084	8b 8c 24 04 04
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1032]
  0008b	5e		 pop	 esi
  0008c	33 cc		 xor	 ecx, esp
  0008e	b8 01 00 00 00	 mov	 eax, 1
  00093	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00098	81 c4 04 04 00
	00		 add	 esp, 1028		; 00000404H
  0009e	c2 08 00	 ret	 8
?BroadcastSysEncCfgUpdateCallb@@YGHPAUHWND__@@J@Z ENDP	; BroadcastSysEncCfgUpdateCallb
_TEXT	ENDS
EXTRN	__imp__EnumWindows@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?BroadcastSysEncCfgUpdate@@YAHXZ
_TEXT	SEGMENT
_bSuccess$ = -4						; size = 4
?BroadcastSysEncCfgUpdate@@YAHXZ PROC			; BroadcastSysEncCfgUpdate, COMDAT

; 399  : {

  00000	51		 push	 ecx

; 400  : 	BOOL bSuccess = FALSE;
; 401  : 	EnumWindows (BroadcastSysEncCfgUpdateCallb, (LPARAM) &bSuccess);

  00001	8d 04 24	 lea	 eax, DWORD PTR _bSuccess$[esp+4]
  00004	50		 push	 eax
  00005	68 00 00 00 00	 push	 OFFSET ?BroadcastSysEncCfgUpdateCallb@@YGHPAUHWND__@@J@Z ; BroadcastSysEncCfgUpdateCallb
  0000a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _bSuccess$[esp+12], 0
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumWindows@8

; 402  : 	return bSuccess;

  00018	8b 04 24	 mov	 eax, DWORD PTR _bSuccess$[esp+4]

; 403  : }

  0001b	59		 pop	 ecx
  0001c	c3		 ret	 0
?BroadcastSysEncCfgUpdate@@YAHXZ ENDP			; BroadcastSysEncCfgUpdate
_TEXT	ENDS
PUBLIC	??_C@_0BD@KMABOOHN@?6?7?$DM?1sysencryption?$DO?$AA@ ; `string'
PUBLIC	??_C@_0CG@BNNHBPIN@?6?7?7?$DMconfig?5key?$DN?$CCWipeMode?$CC?$DO?$CFd?$DM?1co@ ; `string'
PUBLIC	??_C@_0DE@HMBPOGIN@?6?7?7?$DMconfig?5key?$DN?$CCSystemEncryption@ ; `string'
PUBLIC	??_C@_0BC@IEDCODCO@?6?7?$DMsysencryption?$DO?$AA@ ; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_0CE@LPCKNJKP@CANNOT_SAVE_SYS_ENCRYPTION_SETTI@ ; `string'
PUBLIC	??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@	; `string'
EXTRN	_fclose:PROC
EXTRN	_TCFlushFile:PROC
EXTRN	_XmlWriteFooter:PROC
EXTRN	_nWipeMode:DWORD
EXTRN	_fprintf:PROC
EXTRN	_fputs:PROC
EXTRN	_XmlWriteHeader:PROC
EXTRN	_handleWin32Error:PROC
EXTRN	_fopen:PROC
EXTRN	_Error:PROC
EXTRN	_remove:PROC
EXTRN	_GetConfigPath:PROC
EXTRN	_SystemEncryptionStatus:DWORD
EXTRN	_CreateSysEncMutex:PROC
;	COMDAT ??_C@_0BD@KMABOOHN@?6?7?$DM?1sysencryption?$DO?$AA@
CONST	SEGMENT
??_C@_0BD@KMABOOHN@?6?7?$DM?1sysencryption?$DO?$AA@ DB 0aH, 09H, '</sysen'
	DB	'cryption>', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BNNHBPIN@?6?7?7?$DMconfig?5key?$DN?$CCWipeMode?$CC?$DO?$CFd?$DM?1co@
CONST	SEGMENT
??_C@_0CG@BNNHBPIN@?6?7?7?$DMconfig?5key?$DN?$CCWipeMode?$CC?$DO?$CFd?$DM?1co@ DB 0aH
	DB	09H, 09H, '<config key="WipeMode">%d</config>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@HMBPOGIN@?6?7?7?$DMconfig?5key?$DN?$CCSystemEncryption@
CONST	SEGMENT
??_C@_0DE@HMBPOGIN@?6?7?7?$DMconfig?5key?$DN?$CCSystemEncryption@ DB 0aH, 09H
	DB	09H, '<config key="SystemEncryptionStatus">%d</config>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IEDCODCO@?6?7?$DMsysencryption?$DO?$AA@
CONST	SEGMENT
??_C@_0BC@IEDCODCO@?6?7?$DMsysencryption?$DO?$AA@ DB 0aH, 09H, '<sysencry'
	DB	'ption>', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LPCKNJKP@CANNOT_SAVE_SYS_ENCRYPTION_SETTI@
CONST	SEGMENT
??_C@_0CE@LPCKNJKP@CANNOT_SAVE_SYS_ENCRYPTION_SETTI@ DB 'CANNOT_SAVE_SYS_'
	DB	'ENCRYPTION_SETTINGS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@
CONST	SEGMENT
??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@ DB 'System Encryption.xml'
	DB	00H						; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?SaveSysEncSettings@@YAHPAUHWND__@@@Z
_TEXT	SEGMENT
?SaveSysEncSettings@@YAHPAUHWND__@@@Z PROC		; SaveSysEncSettings, COMDAT
; _hwndDlg$ = eax

; 409  : 	FILE *f;
; 410  : 
; 411  : 	if (!bSystemEncryptionStatusChanged)

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bSystemEncryptionStatusChanged, 0
  00007	57		 push	 edi
  00008	8b f8		 mov	 edi, eax

; 412  : 		return TRUE;

  0000a	74 58		 je	 SHORT $LN13@SaveSysEnc

; 413  : 
; 414  : 	if (hwndDlg == NULL && MainDlg != NULL)

  0000c	85 ff		 test	 edi, edi
  0000e	75 0b		 jne	 SHORT $LN7@SaveSysEnc
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00015	85 c0		 test	 eax, eax
  00017	74 02		 je	 SHORT $LN7@SaveSysEnc

; 415  : 		hwndDlg = MainDlg;

  00019	8b f8		 mov	 edi, eax
$LN7@SaveSysEnc:

; 416  : 
; 417  : 	if (!CreateSysEncMutex ())

  0001b	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00020	85 c0		 test	 eax, eax

; 418  : 		return FALSE;		// Only one instance that has the mutex can modify the system encryption settings

  00022	74 2d		 je	 SHORT $LN14@SaveSysEnc

; 419  : 
; 420  : 	if (SystemEncryptionStatus == SYSENC_STATUS_NONE)

  00024	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SystemEncryptionStatus, 0
  0002b	75 3e		 jne	 SHORT $LN5@SaveSysEnc

; 421  : 	{
; 422  : 		if (remove (GetConfigPath (TC_APPD_FILENAME_SYSTEM_ENCRYPTION)) != 0)

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@
  00032	e8 00 00 00 00	 call	 _GetConfigPath
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _remove
  0003d	83 c4 08	 add	 esp, 8
  00040	85 c0		 test	 eax, eax
  00042	74 11		 je	 SHORT $LN4@SaveSysEnc

; 423  : 		{
; 424  : 			Error ("CANNOT_SAVE_SYS_ENCRYPTION_SETTINGS");

  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LPCKNJKP@CANNOT_SAVE_SYS_ENCRYPTION_SETTI@
  00049	e8 00 00 00 00	 call	 _Error
  0004e	83 c4 04	 add	 esp, 4
$LN14@SaveSysEnc:

; 425  : 			return FALSE;

  00051	33 c0		 xor	 eax, eax
  00053	5f		 pop	 edi

; 467  : }

  00054	c3		 ret	 0
$LN4@SaveSysEnc:

; 426  : 		}
; 427  : 
; 428  : 		bSystemEncryptionStatusChanged = FALSE;

  00055	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bSystemEncryptionStatusChanged, 0

; 429  : 		BroadcastSysEncCfgUpdate ();

  0005f	e8 00 00 00 00	 call	 ?BroadcastSysEncCfgUpdate@@YAHXZ ; BroadcastSysEncCfgUpdate
$LN13@SaveSysEnc:

; 430  : 		return TRUE;

  00064	b8 01 00 00 00	 mov	 eax, 1
  00069	5f		 pop	 edi

; 467  : }

  0006a	c3		 ret	 0
$LN5@SaveSysEnc:
  0006b	56		 push	 esi

; 431  : 	}
; 432  : 
; 433  : 	f = fopen (GetConfigPath (TC_APPD_FILENAME_SYSTEM_ENCRYPTION), "w");

  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w?$AA@
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@
  00076	e8 00 00 00 00	 call	 _GetConfigPath
  0007b	83 c4 04	 add	 esp, 4
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 _fopen
  00084	8b f0		 mov	 esi, eax
  00086	83 c4 08	 add	 esp, 8

; 434  : 	if (f == NULL)

  00089	85 f6		 test	 esi, esi
  0008b	75 18		 jne	 SHORT $LN3@SaveSysEnc

; 435  : 	{
; 436  : 		Error ("CANNOT_SAVE_SYS_ENCRYPTION_SETTINGS");

  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LPCKNJKP@CANNOT_SAVE_SYS_ENCRYPTION_SETTI@
  00092	e8 00 00 00 00	 call	 _Error

; 437  : 		handleWin32Error (hwndDlg);

  00097	57		 push	 edi
  00098	e8 00 00 00 00	 call	 _handleWin32Error
  0009d	83 c4 08	 add	 esp, 8
  000a0	5e		 pop	 esi

; 456  : 		return FALSE;

  000a1	33 c0		 xor	 eax, eax
  000a3	5f		 pop	 edi

; 467  : }

  000a4	c3		 ret	 0
$LN3@SaveSysEnc:

; 438  : 		return FALSE;
; 439  : 	}
; 440  : 
; 441  : 	if (XmlWriteHeader (f) < 0
; 442  : 
; 443  : 	|| fputs ("\n\t<sysencryption>", f) < 0
; 444  : 
; 445  : 	|| fprintf (f, "\n\t\t<config key=\"SystemEncryptionStatus\">%d</config>", SystemEncryptionStatus) < 0
; 446  : 
; 447  : 	|| fprintf (f, "\n\t\t<config key=\"WipeMode\">%d</config>", (int) nWipeMode) < 0
; 448  : 
; 449  : 	|| fputs ("\n\t</sysencryption>", f) < 0
; 450  : 
; 451  : 	|| XmlWriteFooter (f) < 0)

  000a5	56		 push	 esi
  000a6	e8 00 00 00 00	 call	 _XmlWriteHeader
  000ab	83 c4 04	 add	 esp, 4
  000ae	85 c0		 test	 eax, eax
  000b0	0f 8c 88 00 00
	00		 jl	 $LN1@SaveSysEnc
  000b6	56		 push	 esi
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@IEDCODCO@?6?7?$DMsysencryption?$DO?$AA@
  000bc	e8 00 00 00 00	 call	 _fputs
  000c1	83 c4 08	 add	 esp, 8
  000c4	85 c0		 test	 eax, eax
  000c6	7c 76		 jl	 SHORT $LN1@SaveSysEnc
  000c8	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  000cd	50		 push	 eax
  000ce	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@HMBPOGIN@?6?7?7?$DMconfig?5key?$DN?$CCSystemEncryption@
  000d3	56		 push	 esi
  000d4	e8 00 00 00 00	 call	 _fprintf
  000d9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000dc	85 c0		 test	 eax, eax
  000de	7c 5e		 jl	 SHORT $LN1@SaveSysEnc
  000e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nWipeMode
  000e6	51		 push	 ecx
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@BNNHBPIN@?6?7?7?$DMconfig?5key?$DN?$CCWipeMode?$CC?$DO?$CFd?$DM?1co@
  000ec	56		 push	 esi
  000ed	e8 00 00 00 00	 call	 _fprintf
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f5	85 c0		 test	 eax, eax
  000f7	7c 45		 jl	 SHORT $LN1@SaveSysEnc
  000f9	56		 push	 esi
  000fa	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KMABOOHN@?6?7?$DM?1sysencryption?$DO?$AA@
  000ff	e8 00 00 00 00	 call	 _fputs
  00104	83 c4 08	 add	 esp, 8
  00107	85 c0		 test	 eax, eax
  00109	7c 33		 jl	 SHORT $LN1@SaveSysEnc
  0010b	56		 push	 esi
  0010c	e8 00 00 00 00	 call	 _XmlWriteFooter
  00111	83 c4 04	 add	 esp, 4
  00114	85 c0		 test	 eax, eax
  00116	7c 26		 jl	 SHORT $LN1@SaveSysEnc

; 457  : 	}
; 458  : 
; 459  : 	TCFlushFile (f);

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 _TCFlushFile

; 460  : 
; 461  : 	fclose (f);

  0011e	56		 push	 esi
  0011f	e8 00 00 00 00	 call	 _fclose
  00124	83 c4 08	 add	 esp, 8

; 462  : 
; 463  : 	bSystemEncryptionStatusChanged = FALSE;

  00127	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bSystemEncryptionStatusChanged, 0

; 464  : 	BroadcastSysEncCfgUpdate ();

  00131	e8 00 00 00 00	 call	 ?BroadcastSysEncCfgUpdate@@YAHXZ ; BroadcastSysEncCfgUpdate
  00136	5e		 pop	 esi

; 465  : 
; 466  : 	return TRUE;

  00137	b8 01 00 00 00	 mov	 eax, 1
  0013c	5f		 pop	 edi

; 467  : }

  0013d	c3		 ret	 0
$LN1@SaveSysEnc:

; 452  : 	{
; 453  : 		handleWin32Error (hwndDlg);

  0013e	57		 push	 edi
  0013f	e8 00 00 00 00	 call	 _handleWin32Error

; 454  : 		fclose (f);

  00144	56		 push	 esi
  00145	e8 00 00 00 00	 call	 _fclose

; 455  : 		Error ("CANNOT_SAVE_SYS_ENCRYPTION_SETTINGS");

  0014a	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LPCKNJKP@CANNOT_SAVE_SYS_ENCRYPTION_SETTI@
  0014f	e8 00 00 00 00	 call	 _Error
  00154	83 c4 0c	 add	 esp, 12			; 0000000cH
  00157	5e		 pop	 esi

; 456  : 		return FALSE;

  00158	33 c0		 xor	 eax, eax
  0015a	5f		 pop	 edi

; 467  : }

  0015b	c3		 ret	 0
?SaveSysEncSettings@@YAHPAUHWND__@@@Z ENDP		; SaveSysEncSettings
_TEXT	ENDS
PUBLIC	??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@ ; `string'
PUBLIC	??_R0?AUException@CipherShed@@@8		; CipherShed::Exception `RTTI Type Descriptor'
EXTRN	_AbortProcess:PROC
EXTRN	?GetHiddenOSCreationPhase@BootEncryption@CipherShed@@QAEIXZ:PROC ; CipherShed::BootEncryption::GetHiddenOSCreationPhase
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT ??_R0?AUException@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUException@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUException@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@
CONST	SEGMENT
??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@ DB 'ERR_GETTING_SYST'
	DB	'EM_ENCRYPTION_STATUS', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?DetermineHiddenOSCreationPhase@@YAIXZ$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffe8H
	DD	FLAT:__catch$?DetermineHiddenOSCreationPhase@@YAIXZ$0
__unwindtable$?DetermineHiddenOSCreationPhase@@YAIXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?DetermineHiddenOSCreationPhase@@YAIXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?DetermineHiddenOSCreationPhase@@YAIXZ$2
__ehfuncinfo$?DetermineHiddenOSCreationPhase@@YAIXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?DetermineHiddenOSCreationPhase@@YAIXZ
	DD	01H
	DD	FLAT:__tryblocktable$?DetermineHiddenOSCreationPhase@@YAIXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?DetermineHiddenOSCreationPhase@@YAIXZ
_TEXT	SEGMENT
_e$131824 = -24						; size = 4
_phase$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?DetermineHiddenOSCreationPhase@@YAIXZ PROC		; DetermineHiddenOSCreationPhase, COMDAT

; 471  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?DetermineHiddenOSCreationPhase@@YAIXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 472  : 	unsigned int phase = TC_HIDDEN_OS_CREATION_PHASE_NONE;
; 473  : 
; 474  : 	try
; 475  : 	{
; 476  : 		phase = BootEncObj->GetHiddenOSCreationPhase();

  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00031	33 c0		 xor	 eax, eax
  00033	89 45 ec	 mov	 DWORD PTR _phase$[ebp], eax
  00036	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], eax
  00039	e8 00 00 00 00	 call	 ?GetHiddenOSCreationPhase@BootEncryption@CipherShed@@QAEIXZ ; CipherShed::BootEncryption::GetHiddenOSCreationPhase

; 483  : 
; 484  : 	return phase;
; 485  : }

  0003e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00041	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00048	59		 pop	 ecx
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
__catch$?DetermineHiddenOSCreationPhase@@YAIXZ$0:

; 477  : 	}
; 478  : 	catch (Exception &e)
; 479  : 	{
; 480  : 		e.Show (MainDlg);

  00050	8b 4d e8	 mov	 ecx, DWORD PTR _e$131824[ebp]
  00053	8b 01		 mov	 eax, DWORD PTR [ecx]
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0005b	8b 00		 mov	 eax, DWORD PTR [eax]
  0005d	52		 push	 edx
  0005e	ff d0		 call	 eax

; 481  : 		AbortProcess("ERR_GETTING_SYSTEM_ENCRYPTION_STATUS");

  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@
  00065	e8 00 00 00 00	 call	 _AbortProcess
  0006a	83 c4 04	 add	 esp, 4

; 482  : 	}

  0006d	b8 00 00 00 00	 mov	 eax, $LN9@DetermineH
  00072	c3		 ret	 0
$LN9@DetermineH:
  00073	8b 45 ec	 mov	 eax, DWORD PTR _phase$[ebp]

; 483  : 
; 484  : 	return phase;
; 485  : }

  00076	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00079	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00080	59		 pop	 ecx
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?DetermineHiddenOSCreationPhase@@YAIXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?DetermineHiddenOSCreationPhase@@YAIXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?DetermineHiddenOSCreationPhase@@YAIXZ ENDP		; DetermineHiddenOSCreationPhase
PUBLIC	??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@ ; `string'
EXTRN	?SetHiddenOSCreationPhase@BootEncryption@CipherShed@@QAEXI@Z:PROC ; CipherShed::BootEncryption::SetHiddenOSCreationPhase
;	COMDAT ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
CONST	SEGMENT
??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@ DB 'SYSTEM_ENCRYPTIO'
	DB	'N_IN_PROGRESS_ELSEWHERE', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?ChangeHiddenOSCreationPhase@@YAHH@Z$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?ChangeHiddenOSCreationPhase@@YAHH@Z$0
__unwindtable$?ChangeHiddenOSCreationPhase@@YAHH@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?ChangeHiddenOSCreationPhase@@YAHH@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?ChangeHiddenOSCreationPhase@@YAHH@Z$2
__ehfuncinfo$?ChangeHiddenOSCreationPhase@@YAHH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ChangeHiddenOSCreationPhase@@YAHH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?ChangeHiddenOSCreationPhase@@YAHH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?ChangeHiddenOSCreationPhase@@YAHH@Z
_TEXT	SEGMENT
_e$131833 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_newPhase$ = 8						; size = 4
?ChangeHiddenOSCreationPhase@@YAHH@Z PROC		; ChangeHiddenOSCreationPhase, COMDAT

; 490  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ChangeHiddenOSCreationPhase@@YAHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 491  : 	if (!CreateSysEncMutex ())

  0002b	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00030	85 c0		 test	 eax, eax
  00032	75 21		 jne	 SHORT $LN2@ChangeHidd

; 492  : 	{
; 493  : 		Error ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  00039	e8 00 00 00 00	 call	 _Error
  0003e	83 c4 04	 add	 esp, 4
$LN8@ChangeHidd:

; 504  : 		return FALSE;

  00041	33 c0		 xor	 eax, eax

; 514  : }

  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
$LN2@ChangeHidd:

; 494  : 		return FALSE;
; 495  : 	}
; 496  : 
; 497  : 	try
; 498  : 	{
; 499  : 		BootEncObj->SetHiddenOSCreationPhase (newPhase);

  00055	8b 45 08	 mov	 eax, DWORD PTR _newPhase$[ebp]
  00058	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0005e	50		 push	 eax
  0005f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00066	e8 00 00 00 00	 call	 ?SetHiddenOSCreationPhase@BootEncryption@CipherShed@@QAEXI@Z ; CipherShed::BootEncryption::SetHiddenOSCreationPhase

; 505  : 	}
; 506  : 
; 507  : 	//// The contents of the following items might be inappropriate after a change of the phase
; 508  : 	//szFileName[0] = 0;
; 509  : 	//szDiskFile[0] = 0;
; 510  : 	//nUIVolumeSize = 0;
; 511  : 	//nVolumeSize = 0;
; 512  : 
; 513  : 	return TRUE;

  0006b	b8 01 00 00 00	 mov	 eax, 1

; 514  : }

  00070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007a	59		 pop	 ecx
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
__catch$?ChangeHiddenOSCreationPhase@@YAHH@Z$0:

; 500  : 	}
; 501  : 	catch (Exception &e)
; 502  : 	{
; 503  : 		e.Show (MainDlg);

  00082	8b 4d ec	 mov	 ecx, DWORD PTR _e$131833[ebp]
  00085	8b 11		 mov	 edx, DWORD PTR [ecx]
  00087	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0008c	8b 12		 mov	 edx, DWORD PTR [edx]
  0008e	50		 push	 eax
  0008f	ff d2		 call	 edx

; 504  : 		return FALSE;

  00091	b8 00 00 00 00	 mov	 eax, $LN8@ChangeHidd
  00096	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?ChangeHiddenOSCreationPhase@@YAHH@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ChangeHiddenOSCreationPhase@@YAHH@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ChangeHiddenOSCreationPhase@@YAHH@Z ENDP		; ChangeHiddenOSCreationPhase
; Function compile flags: /Ogtpy
;	COMDAT _CreatingHiddenSysVol
_TEXT	SEGMENT
_CreatingHiddenSysVol PROC				; COMDAT

; 617  : 	return (bHiddenOS 
; 618  : 		&& bHiddenVol && !bHiddenVolHost);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00005	85 c0		 test	 eax, eax
  00007	74 1a		 je	 SHORT $LN3@CreatingHi
  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  0000f	85 c9		 test	 ecx, ecx
  00011	74 10		 je	 SHORT $LN3@CreatingHi
  00013	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  00019	85 d2		 test	 edx, edx
  0001b	75 06		 jne	 SHORT $LN3@CreatingHi
  0001d	b8 01 00 00 00	 mov	 eax, 1

; 619  : }

  00022	c3		 ret	 0
$LN3@CreatingHi:

; 617  : 	return (bHiddenOS 
; 618  : 		&& bHiddenVol && !bHiddenVolHost);

  00023	33 c0		 xor	 eax, eax

; 619  : }

  00025	c3		 ret	 0
_CreatingHiddenSysVol ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@MIMCAHPI@SecurityTokenLibrary?$AA@	; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0BC@CGLEBHPJ@SaveVolumeHistory?$AA@	; `string'
PUBLIC	??_C@_0BM@GHIJBHNC@HiddenSectorDetectionStatus?$AA@ ; `string'
PUBLIC	??_C@_0N@PLOGBODB@StartOnLogon?$AA@		; `string'
EXTRN	_LoadCombo:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	_InitSecurityTokenLibrary:PROC
EXTRN	_ConfigReadString:PROC
EXTRN	_bHistory:DWORD
EXTRN	_SecurityTokenLibraryPath:BYTE
EXTRN	_HiddenSectorDetectionStatus:DWORD
EXTRN	_bStartOnLogon:DWORD
EXTRN	_ConfigReadInt:PROC
EXTRN	_bInPlaceEncNonSysPending:DWORD
EXTRN	_LoadNonSysInPlaceEncSettings:PROC
EXTRN	_LoadSysEncSettings:PROC
EXTRN	_EnableHwEncryption:PROC
EXTRN	_ReadDriverConfigurationFlags:PROC
;	COMDAT ??_C@_0BF@MIMCAHPI@SecurityTokenLibrary?$AA@
CONST	SEGMENT
??_C@_0BF@MIMCAHPI@SecurityTokenLibrary?$AA@ DB 'SecurityTokenLibrary', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CGLEBHPJ@SaveVolumeHistory?$AA@
CONST	SEGMENT
??_C@_0BC@CGLEBHPJ@SaveVolumeHistory?$AA@ DB 'SaveVolumeHistory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GHIJBHNC@HiddenSectorDetectionStatus?$AA@
CONST	SEGMENT
??_C@_0BM@GHIJBHNC@HiddenSectorDetectionStatus?$AA@ DB 'HiddenSectorDetec'
	DB	'tionStatus', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PLOGBODB@StartOnLogon?$AA@
CONST	SEGMENT
??_C@_0N@PLOGBODB@StartOnLogon?$AA@ DB 'StartOnLogon', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _LoadSettings
_TEXT	SEGMENT
_savedWipeAlgorithm$ = -4				; size = 4
_LoadSettings PROC					; COMDAT
; _hwndDlg$ = esi

; 622  : {

  00000	51		 push	 ecx

; 623  : 	EnableHwEncryption ((ReadDriverConfigurationFlags() & TC_DRIVER_CONFIG_DISABLE_HARDWARE_ENCRYPTION) ? FALSE : TRUE);

  00001	e8 00 00 00 00	 call	 _ReadDriverConfigurationFlags
  00006	c1 e8 03	 shr	 eax, 3
  00009	f7 d0		 not	 eax
  0000b	83 e0 01	 and	 eax, 1
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _EnableHwEncryption

; 624  : 
; 625  : 	WipeAlgorithmId savedWipeAlgorithm = TC_WIPE_NONE;
; 626  : 
; 627  : 	LoadSysEncSettings (hwndDlg);

  00014	56		 push	 esi
  00015	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _savedWipeAlgorithm$[esp+12], 0
  0001d	e8 00 00 00 00	 call	 _LoadSysEncSettings

; 628  : 
; 629  : 	if (LoadNonSysInPlaceEncSettings (&savedWipeAlgorithm) != 0)

  00022	8d 44 24 08	 lea	 eax, DWORD PTR _savedWipeAlgorithm$[esp+12]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _LoadNonSysInPlaceEncSettings
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002f	85 c0		 test	 eax, eax
  00031	74 0a		 je	 SHORT $LN4@LoadSettin

; 630  : 		bInPlaceEncNonSysPending = TRUE;

  00033	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bInPlaceEncNonSysPending, 1
$LN4@LoadSettin:

; 631  : 
; 632  : 	defaultKeyFilesParam.EnableKeyFiles = FALSE;
; 633  : 
; 634  : 	bStartOnLogon =	ConfigReadInt ("StartOnLogon", FALSE);

  0003d	6a 00		 push	 0
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PLOGBODB@StartOnLogon?$AA@
  00044	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _defaultKeyFilesParam, 0
  0004e	e8 00 00 00 00	 call	 _ConfigReadInt

; 635  : 
; 636  : 	HiddenSectorDetectionStatus = ConfigReadInt ("HiddenSectorDetectionStatus", 0);

  00053	6a 00		 push	 0
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@GHIJBHNC@HiddenSectorDetectionStatus?$AA@
  0005a	a3 00 00 00 00	 mov	 DWORD PTR _bStartOnLogon, eax
  0005f	e8 00 00 00 00	 call	 _ConfigReadInt

; 637  : 
; 638  : 	bHistory = ConfigReadInt ("SaveVolumeHistory", FALSE);

  00064	6a 00		 push	 0
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CGLEBHPJ@SaveVolumeHistory?$AA@
  0006b	a3 00 00 00 00	 mov	 DWORD PTR _HiddenSectorDetectionStatus, eax
  00070	e8 00 00 00 00	 call	 _ConfigReadInt

; 639  : 
; 640  : 	ConfigReadString ("SecurityTokenLibrary", "", SecurityTokenLibraryPath, sizeof (SecurityTokenLibraryPath) - 1);

  00075	68 03 01 00 00	 push	 259			; 00000103H
  0007a	68 00 00 00 00	 push	 OFFSET _SecurityTokenLibraryPath
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MIMCAHPI@SecurityTokenLibrary?$AA@
  00089	a3 00 00 00 00	 mov	 DWORD PTR _bHistory, eax
  0008e	e8 00 00 00 00	 call	 _ConfigReadString
  00093	83 c4 28	 add	 esp, 40			; 00000028H

; 641  : 	if (SecurityTokenLibraryPath[0])

  00096	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR _SecurityTokenLibraryPath, 0
  0009d	74 05		 je	 SHORT $LN3@LoadSettin

; 642  : 		InitSecurityTokenLibrary();

  0009f	e8 00 00 00 00	 call	 _InitSecurityTokenLibrary
$LN3@LoadSettin:

; 643  : 
; 644  : 	if (hwndDlg != NULL)

  000a4	85 f6		 test	 esi, esi
  000a6	74 15		 je	 SHORT $LN2@LoadSettin

; 645  : 	{
; 646  : 		LoadCombo (GetDlgItem (hwndDlg, IDC_COMBO_BOX));

  000a8	68 ea 03 00 00	 push	 1002			; 000003eaH
  000ad	56		 push	 esi
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 _LoadCombo
  000ba	83 c4 04	 add	 esp, 4
$LN2@LoadSettin:

; 647  : 		return;
; 648  : 	}
; 649  : 
; 650  : 	if (bHistoryCmdLine)
; 651  : 		return;
; 652  : }

  000bd	59		 pop	 ecx
  000be	c3		 ret	 0
_LoadSettings ENDP
_TEXT	ENDS
PUBLIC	??_C@_08BENDAOKD@Language?$AA@			; `string'
EXTRN	_NormalCursor:PROC
EXTRN	_ConfigWriteEnd:PROC
EXTRN	_GetPreferredLangId:PROC
EXTRN	_ConfigWriteString:PROC
EXTRN	_ConfigWriteInt:PROC
EXTRN	_ConfigWriteBegin:PROC
EXTRN	_DumpCombo:PROC
EXTRN	_WaitCursor:PROC
;	COMDAT ??_C@_08BENDAOKD@Language?$AA@
CONST	SEGMENT
??_C@_08BENDAOKD@Language?$AA@ DB 'Language', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _SaveSettings
_TEXT	SEGMENT
_SaveSettings PROC					; COMDAT
; _hwndDlg$ = esi

; 656  : 	WaitCursor ();

  00000	e8 00 00 00 00	 call	 _WaitCursor

; 657  : 
; 658  : 	if (hwndDlg != NULL)

  00005	85 f6		 test	 esi, esi
  00007	74 21		 je	 SHORT $LN2@SaveSettin

; 659  : 		DumpCombo (GetDlgItem (hwndDlg, IDC_COMBO_BOX), !bHistory);

  00009	33 c0		 xor	 eax, eax
  0000b	39 05 00 00 00
	00		 cmp	 DWORD PTR _bHistory, eax
  00011	0f 94 c0	 sete	 al
  00014	50		 push	 eax
  00015	68 ea 03 00 00	 push	 1002			; 000003eaH
  0001a	56		 push	 esi
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _DumpCombo
  00027	83 c4 08	 add	 esp, 8
$LN2@SaveSettin:

; 660  : 
; 661  : 	ConfigWriteBegin ();

  0002a	e8 00 00 00 00	 call	 _ConfigWriteBegin

; 662  : 
; 663  : 	ConfigWriteInt ("StartOnLogon",	bStartOnLogon);

  0002f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bStartOnLogon
  00035	51		 push	 ecx
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PLOGBODB@StartOnLogon?$AA@
  0003b	e8 00 00 00 00	 call	 _ConfigWriteInt

; 664  : 	ConfigWriteInt ("HiddenSectorDetectionStatus", HiddenSectorDetectionStatus);

  00040	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _HiddenSectorDetectionStatus
  00046	52		 push	 edx
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@GHIJBHNC@HiddenSectorDetectionStatus?$AA@
  0004c	e8 00 00 00 00	 call	 _ConfigWriteInt

; 665  : 	ConfigWriteInt ("SaveVolumeHistory", bHistory);

  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHistory
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CGLEBHPJ@SaveVolumeHistory?$AA@
  0005c	e8 00 00 00 00	 call	 _ConfigWriteInt
  00061	83 c4 18	 add	 esp, 24			; 00000018H

; 666  : 	ConfigWriteString ("SecurityTokenLibrary", SecurityTokenLibraryPath[0] ? SecurityTokenLibraryPath : "");

  00064	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR _SecurityTokenLibraryPath, 0
  0006b	b8 00 00 00 00	 mov	 eax, OFFSET _SecurityTokenLibraryPath
  00070	75 05		 jne	 SHORT $LN6@SaveSettin
  00072	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN6@SaveSettin:
  00077	50		 push	 eax
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MIMCAHPI@SecurityTokenLibrary?$AA@
  0007d	e8 00 00 00 00	 call	 _ConfigWriteString
  00082	83 c4 08	 add	 esp, 8

; 667  : 
; 668  : 	if (GetPreferredLangId () != NULL)

  00085	e8 00 00 00 00	 call	 _GetPreferredLangId
  0008a	85 c0		 test	 eax, eax
  0008c	74 13		 je	 SHORT $LN1@SaveSettin

; 669  : 		ConfigWriteString ("Language", GetPreferredLangId ());

  0008e	e8 00 00 00 00	 call	 _GetPreferredLangId
  00093	50		 push	 eax
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_08BENDAOKD@Language?$AA@
  00099	e8 00 00 00 00	 call	 _ConfigWriteString
  0009e	83 c4 08	 add	 esp, 8
$LN1@SaveSettin:

; 670  : 
; 671  : 	ConfigWriteEnd ();

  000a1	e8 00 00 00 00	 call	 _ConfigWriteEnd

; 672  : 
; 673  : 	NormalCursor ();

  000a6	e9 00 00 00 00	 jmp	 _NormalCursor
_SaveSettings ENDP
_TEXT	ENDS
EXTRN	__imp__EndDialog@8:PROC
EXTRN	_CleanLastVisitedMRU:PROC
EXTRN	_MoveEditToCombo:PROC
EXTRN	_IsButtonChecked:PROC
EXTRN	__imp__IsWindow@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _EndMainDlg
_TEXT	SEGMENT
_EndMainDlg PROC					; COMDAT
; _hwndDlg$ = edi

; 680  : 	if (nCurPageNo == VOLUME_LOCATION_PAGE)

  00000	83 3d 00 00 00
	00 0e		 cmp	 DWORD PTR ?nCurPageNo@@3HA, 14 ; nCurPageNo, 0000000eH
  00007	56		 push	 esi
  00008	75 66		 jne	 SHORT $LN4@EndMainDlg

; 681  : 	{
; 682  : 		if (IsWindow(GetDlgItem(hCurPage, IDC_NO_HISTORY)))

  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0000f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00015	68 f4 03 00 00	 push	 1012			; 000003f4H
  0001a	50		 push	 eax
  0001b	ff d6		 call	 esi
  0001d	50		 push	 eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  00024	85 c0		 test	 eax, eax
  00026	74 23		 je	 SHORT $LN7@EndMainDlg

; 683  : 			bHistory = !IsButtonChecked (GetDlgItem (hCurPage, IDC_NO_HISTORY));

  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  0002e	68 f4 03 00 00	 push	 1012			; 000003f4H
  00033	51		 push	 ecx
  00034	ff d6		 call	 esi
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _IsButtonChecked
  0003c	83 c4 04	 add	 esp, 4
  0003f	f7 d8		 neg	 eax
  00041	1b c0		 sbb	 eax, eax
  00043	40		 inc	 eax
  00044	a3 00 00 00 00	 mov	 DWORD PTR _bHistory, eax
  00049	eb 05		 jmp	 SHORT $LN3@EndMainDlg
$LN7@EndMainDlg:
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHistory
$LN3@EndMainDlg:

; 684  : 
; 685  : 		MoveEditToCombo (GetDlgItem (hCurPage, IDC_COMBO_BOX), bHistory);

  00050	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00056	50		 push	 eax
  00057	68 ea 03 00 00	 push	 1002			; 000003eaH
  0005c	52		 push	 edx
  0005d	ff d6		 call	 esi
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 _MoveEditToCombo

; 686  : 		SaveSettings (hCurPage);

  00065	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _hCurPage
  0006b	83 c4 08	 add	 esp, 8

; 687  : 	}
; 688  : 	else 

  0006e	eb 02		 jmp	 SHORT $LN8@EndMainDlg
$LN4@EndMainDlg:

; 689  : 	{
; 690  : 		SaveSettings (NULL);

  00070	33 f6		 xor	 esi, esi
$LN8@EndMainDlg:
  00072	e8 00 00 00 00	 call	 _SaveSettings

; 691  : 	}
; 692  : 
; 693  : 	SaveSysEncSettings (hwndDlg);

  00077	8b c7		 mov	 eax, edi
  00079	e8 00 00 00 00	 call	 ?SaveSysEncSettings@@YAHPAUHWND__@@@Z ; SaveSysEncSettings

; 694  : 
; 695  : 	if (!bHistory)

  0007e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bHistory, 0
  00085	5e		 pop	 esi
  00086	75 05		 jne	 SHORT $LN1@EndMainDlg

; 696  : 		CleanLastVisitedMRU ();

  00088	e8 00 00 00 00	 call	 _CleanLastVisitedMRU
$LN1@EndMainDlg:

; 697  : 
; 698  : 	EndDialog (hwndDlg, 0);

  0008d	6a 00		 push	 0
  0008f	57		 push	 edi
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 699  : }

  00096	c3		 ret	 0
_EndMainDlg ENDP
_TEXT	ENDS
EXTRN	?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ:PROC ; CipherShed::BootEncryption::GetStatus
;	COMDAT ?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A
_BSS	SEGMENT
?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A DB 05eH DUP (?) ; `SysEncryptionOrDecryptionRequired'::`2'::locBootEncStatus
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?SysEncryptionOrDecryptionRequired@@YAHXZ$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?SysEncryptionOrDecryptionRequired@@YAHXZ$0
__unwindtable$?SysEncryptionOrDecryptionRequired@@YAHXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?SysEncryptionOrDecryptionRequired@@YAHXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?SysEncryptionOrDecryptionRequired@@YAHXZ$2
__ehfuncinfo$?SysEncryptionOrDecryptionRequired@@YAHXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SysEncryptionOrDecryptionRequired@@YAHXZ
	DD	01H
	DD	FLAT:__tryblocktable$?SysEncryptionOrDecryptionRequired@@YAHXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?SysEncryptionOrDecryptionRequired@@YAHXZ
_TEXT	SEGMENT
$T141316 = -114						; size = 94
_e$131896 = -20						; size = 4
__$EHRec$ = -16						; size = 16
?SysEncryptionOrDecryptionRequired@@YAHXZ PROC		; SysEncryptionOrDecryptionRequired, COMDAT

; 703  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SysEncryptionOrDecryptionRequired@@YAHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 704  : 	/* If you update this function, revise SysEncryptionOrDecryptionRequired() in Mount.c as well. */
; 705  : 
; 706  : 	static BootEncryptionStatus locBootEncStatus;
; 707  : 
; 708  : 	try
; 709  : 	{
; 710  : 		locBootEncStatus = BootEncObj->GetStatus();

  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00031	8d 45 8e	 lea	 eax, DWORD PTR $T141316[ebp]
  00034	50		 push	 eax
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003c	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00041	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00046	8b f0		 mov	 esi, eax
  00048	bf 00 00 00 00	 mov	 edi, OFFSET ?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A
  0004d	f3 a5		 rep movsd
  0004f	66 a5		 movsw
$LN11@SysEncrypt:

; 716  : 
; 717  : 	return (SystemEncryptionStatus == SYSENC_STATUS_ENCRYPTING
; 718  : 		|| SystemEncryptionStatus == SYSENC_STATUS_DECRYPTING
; 719  : 		|| 
; 720  : 		(
; 721  : 			locBootEncStatus.DriveMounted 
; 722  : 			&& 
; 723  : 			(
; 724  : 				locBootEncStatus.ConfiguredEncryptedAreaStart != locBootEncStatus.EncryptedAreaStart
; 725  : 				|| locBootEncStatus.ConfiguredEncryptedAreaEnd != locBootEncStatus.EncryptedAreaEnd
; 726  : 			)
; 727  : 		)
; 728  : 	);

  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  00056	3d 90 01 00 00	 cmp	 eax, 400		; 00000190H
  0005b	74 6f		 je	 SHORT $LN4@SysEncrypt
  0005d	3d 58 02 00 00	 cmp	 eax, 600		; 00000258H
  00062	74 68		 je	 SHORT $LN4@SysEncrypt
  00064	83 3d 06 00 00
	00 00		 cmp	 DWORD PTR ?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A+6, 0
  0006b	74 36		 je	 SHORT $LN6@SysEncrypt
  0006d	a1 1a 00 00 00	 mov	 eax, DWORD PTR ?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A+26
  00072	3b 05 2a 00 00
	00		 cmp	 eax, DWORD PTR ?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A+42
  00078	75 52		 jne	 SHORT $LN4@SysEncrypt
  0007a	8b 0d 1e 00 00
	00		 mov	 ecx, DWORD PTR ?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A+30
  00080	3b 0d 2e 00 00
	00		 cmp	 ecx, DWORD PTR ?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A+46
  00086	75 44		 jne	 SHORT $LN4@SysEncrypt
  00088	8b 15 22 00 00
	00		 mov	 edx, DWORD PTR ?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A+34
  0008e	3b 15 32 00 00
	00		 cmp	 edx, DWORD PTR ?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A+50
  00094	75 36		 jne	 SHORT $LN4@SysEncrypt
  00096	a1 26 00 00 00	 mov	 eax, DWORD PTR ?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A+38
  0009b	3b 05 36 00 00
	00		 cmp	 eax, DWORD PTR ?locBootEncStatus@?1??SysEncryptionOrDecryptionRequired@@YAHXZ@4UBootEncryptionStatus@@A+54
  000a1	75 29		 jne	 SHORT $LN4@SysEncrypt
$LN6@SysEncrypt:
  000a3	33 c0		 xor	 eax, eax

; 729  : }

  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000af	59		 pop	 ecx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
__catch$?SysEncryptionOrDecryptionRequired@@YAHXZ$0:

; 711  : 	}
; 712  : 	catch (Exception &e)
; 713  : 	{
; 714  : 		e.Show (MainDlg);

  000b7	8b 4d ec	 mov	 ecx, DWORD PTR _e$131896[ebp]
  000ba	8b 11		 mov	 edx, DWORD PTR [ecx]
  000bc	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  000c1	8b 12		 mov	 edx, DWORD PTR [edx]
  000c3	50		 push	 eax
  000c4	ff d2		 call	 edx

; 715  : 	}

  000c6	b8 00 00 00 00	 mov	 eax, $LN11@SysEncrypt
  000cb	c3		 ret	 0
$LN4@SysEncrypt:

; 716  : 
; 717  : 	return (SystemEncryptionStatus == SYSENC_STATUS_ENCRYPTING
; 718  : 		|| SystemEncryptionStatus == SYSENC_STATUS_DECRYPTING
; 719  : 		|| 
; 720  : 		(
; 721  : 			locBootEncStatus.DriveMounted 
; 722  : 			&& 
; 723  : 			(
; 724  : 				locBootEncStatus.ConfiguredEncryptedAreaStart != locBootEncStatus.EncryptedAreaStart
; 725  : 				|| locBootEncStatus.ConfiguredEncryptedAreaEnd != locBootEncStatus.EncryptedAreaEnd
; 726  : 			)
; 727  : 		)
; 728  : 	);

  000cc	b8 01 00 00 00	 mov	 eax, 1

; 729  : }

  000d1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000d4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000db	59		 pop	 ecx
  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi
  000de	5b		 pop	 ebx
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?SysEncryptionOrDecryptionRequired@@YAHXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SysEncryptionOrDecryptionRequired@@YAHXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SysEncryptionOrDecryptionRequired@@YAHXZ ENDP		; SysEncryptionOrDecryptionRequired
;	COMDAT ?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A
_BSS	SEGMENT
?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A DB 05eH DUP (?) ; `SysDriveOrPartitionFullyEncrypted'::`2'::locBootEncStatus
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z$0
__unwindtable$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z$2
__ehfuncinfo$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?SysDriveOrPartitionFullyEncrypted@@YAHH@Z
_TEXT	SEGMENT
$T141336 = -114						; size = 94
_e$131904 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_bSilent$ = 8						; size = 4
?SysDriveOrPartitionFullyEncrypted@@YAHH@Z PROC		; SysDriveOrPartitionFullyEncrypted, COMDAT

; 733  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 734  : 	/* If you update this function, revise SysDriveOrPartitionFullyEncrypted() in Mount.c as well. */
; 735  : 
; 736  : 	static BootEncryptionStatus locBootEncStatus;
; 737  : 
; 738  : 	try
; 739  : 	{
; 740  : 		locBootEncStatus = BootEncObj->GetStatus();

  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00031	8d 45 8e	 lea	 eax, DWORD PTR $T141336[ebp]
  00034	50		 push	 eax
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003c	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00041	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00046	8b f0		 mov	 esi, eax
  00048	bf 00 00 00 00	 mov	 edi, OFFSET ?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A
  0004d	f3 a5		 rep movsd
  0004f	66 a5		 movsw
$LN10@SysDriveOr:

; 747  : 
; 748  : 	return (!locBootEncStatus.SetupInProgress
; 749  : 		&& locBootEncStatus.ConfiguredEncryptedAreaEnd != 0
; 750  : 		&& locBootEncStatus.ConfiguredEncryptedAreaEnd != -1
; 751  : 		&& locBootEncStatus.ConfiguredEncryptedAreaStart == locBootEncStatus.EncryptedAreaStart
; 752  : 		&& locBootEncStatus.ConfiguredEncryptedAreaEnd == locBootEncStatus.EncryptedAreaEnd);

  00051	83 3d 3e 00 00
	00 00		 cmp	 DWORD PTR ?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A+62, 0
  00058	75 78		 jne	 SHORT $LN5@SysDriveOr
  0005a	a1 22 00 00 00	 mov	 eax, DWORD PTR ?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A+34
  0005f	8b 0d 26 00 00
	00		 mov	 ecx, DWORD PTR ?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A+38
  00065	8b d0		 mov	 edx, eax
  00067	0b d1		 or	 edx, ecx
  00069	74 67		 je	 SHORT $LN5@SysDriveOr
  0006b	8b d0		 mov	 edx, eax
  0006d	23 d1		 and	 edx, ecx
  0006f	83 fa ff	 cmp	 edx, -1
  00072	74 5e		 je	 SHORT $LN5@SysDriveOr
  00074	8b 15 1a 00 00
	00		 mov	 edx, DWORD PTR ?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A+26
  0007a	3b 15 2a 00 00
	00		 cmp	 edx, DWORD PTR ?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A+42
  00080	75 50		 jne	 SHORT $LN5@SysDriveOr
  00082	8b 15 1e 00 00
	00		 mov	 edx, DWORD PTR ?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A+30
  00088	3b 15 2e 00 00
	00		 cmp	 edx, DWORD PTR ?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A+46
  0008e	75 42		 jne	 SHORT $LN5@SysDriveOr
  00090	3b 05 32 00 00
	00		 cmp	 eax, DWORD PTR ?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A+50
  00096	75 3a		 jne	 SHORT $LN5@SysDriveOr
  00098	3b 0d 36 00 00
	00		 cmp	 ecx, DWORD PTR ?locBootEncStatus@?1??SysDriveOrPartitionFullyEncrypted@@YAHH@Z@4UBootEncryptionStatus@@A+54
  0009e	75 32		 jne	 SHORT $LN5@SysDriveOr
  000a0	b8 01 00 00 00	 mov	 eax, 1

; 753  : }

  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000af	59		 pop	 ecx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
__catch$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z$0:

; 741  : 	}
; 742  : 	catch (Exception &e)
; 743  : 	{
; 744  : 		if (!bSilent)

  000b7	83 7d 08 00	 cmp	 DWORD PTR _bSilent$[ebp], 0
  000bb	75 0f		 jne	 SHORT $LN1@SysDriveOr

; 745  : 			e.Show (MainDlg);

  000bd	8b 4d ec	 mov	 ecx, DWORD PTR _e$131904[ebp]
  000c0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  000c7	8b 12		 mov	 edx, DWORD PTR [edx]
  000c9	50		 push	 eax
  000ca	ff d2		 call	 edx
$LN1@SysDriveOr:

; 746  : 	}

  000cc	b8 00 00 00 00	 mov	 eax, $LN10@SysDriveOr
  000d1	c3		 ret	 0
$LN5@SysDriveOr:

; 747  : 
; 748  : 	return (!locBootEncStatus.SetupInProgress
; 749  : 		&& locBootEncStatus.ConfiguredEncryptedAreaEnd != 0
; 750  : 		&& locBootEncStatus.ConfiguredEncryptedAreaEnd != -1
; 751  : 		&& locBootEncStatus.ConfiguredEncryptedAreaStart == locBootEncStatus.EncryptedAreaStart
; 752  : 		&& locBootEncStatus.ConfiguredEncryptedAreaEnd == locBootEncStatus.EncryptedAreaEnd);

  000d2	33 c0		 xor	 eax, eax

; 753  : }

  000d4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000d7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000de	59		 pop	 ecx
  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SysDriveOrPartitionFullyEncrypted@@YAHH@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SysDriveOrPartitionFullyEncrypted@@YAHH@Z ENDP		; SysDriveOrPartitionFullyEncrypted
EXTRN	?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z:PROC ; CipherShed::BootEncryption::Deinstall
EXTRN	?CheckEncryptionSetupResult@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::CheckEncryptionSetupResult
EXTRN	__imp__Sleep@4:PROC
EXTRN	?StartDecryption@BootEncryption@CipherShed@@QAEXH@Z:PROC ; CipherShed::BootEncryption::StartDecryption
EXTRN	?AbortSetupWait@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::AbortSetupWait
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?ForceRemoveSysEnc@@YAHXZ$5 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffe8H
	DD	FLAT:__catch$?ForceRemoveSysEnc@@YAHXZ$2
__catchsym$?ForceRemoveSysEnc@@YAHXZ$4 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?ForceRemoveSysEnc@@YAHXZ$0
__unwindtable$?ForceRemoveSysEnc@@YAHXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?ForceRemoveSysEnc@@YAHXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?ForceRemoveSysEnc@@YAHXZ
	DD	02H
	DD	FLAT:__tryblocktable$?ForceRemoveSysEnc@@YAHXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?ForceRemoveSysEnc@@YAHXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?ForceRemoveSysEnc@@YAHXZ$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?ForceRemoveSysEnc@@YAHXZ$5
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?ForceRemoveSysEnc@@YAHXZ
_TEXT	SEGMENT
$T141359 = -590						; size = 94
$T141355 = -496						; size = 94
$T141357 = -402						; size = 94
$T141356 = -308						; size = 94
$T141354 = -214						; size = 94
_locBootEncStatus$132036 = -120				; size = 94
_e$132052 = -24						; size = 4
_e$132047 = -20						; size = 4
__$EHRec$ = -16						; size = 16
?ForceRemoveSysEnc@@YAHXZ PROC				; ForceRemoveSysEnc, COMDAT

; 1108 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ForceRemoveSysEnc@@YAHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 44 02 00
	00		 sub	 esp, 580		; 00000244H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1109 : 	if (CreateSysEncMutex ())	// If no other instance is currently taking care of system encryption

  0002e	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00033	85 c0		 test	 eax, eax
  00035	0f 84 47 01 00
	00		 je	 $LN9@ForceRemov

; 1110 : 	{
; 1111 : 		BootEncryptionStatus locBootEncStatus;
; 1112 : 
; 1113 : 		try
; 1114 : 		{
; 1115 : 			locBootEncStatus = BootEncObj->GetStatus();

  0003b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00041	8d 85 2a ff ff
	ff		 lea	 eax, DWORD PTR $T141354[ebp]
  00047	50		 push	 eax
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0004f	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00054	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00059	8b f0		 mov	 esi, eax
  0005b	8d 7d 88	 lea	 edi, DWORD PTR _locBootEncStatus$132036[ebp]
  0005e	f3 a5		 rep movsd
  00060	66 a5		 movsw

; 1116 : 
; 1117 : 			if (locBootEncStatus.SetupInProgress)

  00062	83 7d c6 00	 cmp	 DWORD PTR _locBootEncStatus$132036[ebp+62], 0
  00066	74 0b		 je	 SHORT $LN7@ForceRemov

; 1118 : 				BootEncObj->AbortSetupWait ();

  00068	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0006e	e8 00 00 00 00	 call	 ?AbortSetupWait@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::AbortSetupWait
$LN7@ForceRemov:

; 1119 : 
; 1120 : 			locBootEncStatus = BootEncObj->GetStatus();

  00073	8d 8d 10 fe ff
	ff		 lea	 ecx, DWORD PTR $T141355[ebp]
  00079	51		 push	 ecx
  0007a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00080	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00085	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0008a	8b f0		 mov	 esi, eax
  0008c	8d 7d 88	 lea	 edi, DWORD PTR _locBootEncStatus$132036[ebp]
  0008f	f3 a5		 rep movsd
  00091	66 a5		 movsw

; 1121 : 
; 1122 : 			if (locBootEncStatus.DriveMounted)

  00093	83 7d 8e 00	 cmp	 DWORD PTR _locBootEncStatus$132036[ebp+6], 0
  00097	74 63		 je	 SHORT $LN23@ForceRemov

; 1123 : 			{
; 1124 : 				// Remove the header
; 1125 : 				BootEncObj->StartDecryption (DiscardUnreadableEncryptedSectors);			

  00099	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?DiscardUnreadableEncryptedSectors@@3HC ; DiscardUnreadableEncryptedSectors
  0009f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000a5	52		 push	 edx
  000a6	e8 00 00 00 00	 call	 ?StartDecryption@BootEncryption@CipherShed@@QAEXH@Z ; CipherShed::BootEncryption::StartDecryption

; 1126 : 				locBootEncStatus = BootEncObj->GetStatus();

  000ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000b1	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR $T141356[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  000bd	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__Sleep@4
$LN26@ForceRemov:
  000c3	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  000c8	8d 7d 88	 lea	 edi, DWORD PTR _locBootEncStatus$132036[ebp]
  000cb	8b f0		 mov	 esi, eax
  000cd	f3 a5		 rep movsd
  000cf	66 a5		 movsw

; 1127 : 
; 1128 : 				while (locBootEncStatus.SetupInProgress)

  000d1	83 7d c6 00	 cmp	 DWORD PTR _locBootEncStatus$132036[ebp+62], 0
  000d5	74 18		 je	 SHORT $LN4@ForceRemov

; 1129 : 				{
; 1130 : 					Sleep (100);

  000d7	6a 64		 push	 100			; 00000064H
  000d9	ff d3		 call	 ebx

; 1131 : 					locBootEncStatus = BootEncObj->GetStatus();

  000db	8d 8d 6e fe ff
	ff		 lea	 ecx, DWORD PTR $T141357[ebp]
  000e1	51		 push	 ecx
  000e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000e8	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus

; 1132 : 				}

  000ed	eb d4		 jmp	 SHORT $LN26@ForceRemov
$LN4@ForceRemov:

; 1133 : 
; 1134 : 				BootEncObj->CheckEncryptionSetupResult ();

  000ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000f5	e8 00 00 00 00	 call	 ?CheckEncryptionSetupResult@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::CheckEncryptionSetupResult
  000fa	eb 06		 jmp	 SHORT $LN6@ForceRemov
$LN23@ForceRemov:
  000fc	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__Sleep@4
$LN6@ForceRemov:

; 1135 : 			}
; 1136 : 
; 1137 : 			Sleep (50);

  00102	6a 32		 push	 50			; 00000032H
  00104	ff d3		 call	 ebx

; 1138 : 		}
; 1139 : 		catch (Exception &e)
; 1140 : 		{
; 1141 : 			e.Show (MainDlg);
; 1142 : 			return FALSE;
; 1143 : 		}
; 1144 : 
; 1145 : 		try
; 1146 : 		{
; 1147 : 			locBootEncStatus = BootEncObj->GetStatus();

  00106	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0010c	8d 95 b2 fd ff
	ff		 lea	 edx, DWORD PTR $T141359[ebp]
  00112	52		 push	 edx
  00113	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  0011a	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  0011f	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00124	8b f0		 mov	 esi, eax
  00126	8d 7d 88	 lea	 edi, DWORD PTR _locBootEncStatus$132036[ebp]
  00129	f3 a5		 rep movsd
  0012b	66 a5		 movsw

; 1148 : 
; 1149 : 			if (!locBootEncStatus.DriveMounted)

  0012d	83 7d 8e 00	 cmp	 DWORD PTR _locBootEncStatus$132036[ebp+6], 0
  00131	75 0d		 jne	 SHORT $LN2@ForceRemov

; 1150 : 				BootEncObj->Deinstall (true);

  00133	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00139	6a 01		 push	 1
  0013b	e8 00 00 00 00	 call	 ?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z ; CipherShed::BootEncryption::Deinstall
$LN2@ForceRemov:

; 1156 : 		}
; 1157 : 
; 1158 : 		return TRUE;

  00140	b8 01 00 00 00	 mov	 eax, 1

; 1162 : }

  00145	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00148	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0014f	59		 pop	 ecx
  00150	5f		 pop	 edi
  00151	5e		 pop	 esi
  00152	5b		 pop	 ebx
  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c3		 ret	 0
__catch$?ForceRemoveSysEnc@@YAHXZ$2:

; 1151 : 		}
; 1152 : 		catch (Exception &e)
; 1153 : 		{
; 1154 : 			e.Show (MainDlg);

  00157	8b 4d e8	 mov	 ecx, DWORD PTR _e$132052[ebp]
  0015a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0015c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00162	8b 00		 mov	 eax, DWORD PTR [eax]
  00164	52		 push	 edx
  00165	ff d0		 call	 eax

; 1155 : 			return FALSE;

  00167	b8 00 00 00 00	 mov	 eax, $LN9@ForceRemov
  0016c	c3		 ret	 0
__catch$?ForceRemoveSysEnc@@YAHXZ$0:
  0016d	8b 4d ec	 mov	 ecx, DWORD PTR _e$132047[ebp]
  00170	8b 11		 mov	 edx, DWORD PTR [ecx]
  00172	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00177	8b 12		 mov	 edx, DWORD PTR [edx]
  00179	50		 push	 eax
  0017a	ff d2		 call	 edx
  0017c	b8 00 00 00 00	 mov	 eax, $LN9@ForceRemov
  00181	c3		 ret	 0
$LN9@ForceRemov:

; 1159 : 	}
; 1160 : 	else
; 1161 : 		return FALSE;

  00182	33 c0		 xor	 eax, eax

; 1162 : }

  00184	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00187	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018e	59		 pop	 ecx
  0018f	5f		 pop	 edi
  00190	5e		 pop	 esi
  00191	5b		 pop	 ebx
  00192	8b e5		 mov	 esp, ebp
  00194	5d		 pop	 ebp
  00195	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?ForceRemoveSysEnc@@YAHXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a ac fd ff
	ff		 mov	 ecx, DWORD PTR [edx-596]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ForceRemoveSysEnc@@YAHXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ForceRemoveSysEnc@@YAHXZ ENDP				; ForceRemoveSysEnc
PUBLIC	??_C@_0CA@EHDIKOJL@IDC_LINK_MORE_INFO_ABOUT_CIPHER?$AA@ ; `string'
PUBLIC	??_C@_0BH@PJGBOAEF@TWO_LAYER_CASCADE_HELP?$AA@	; `string'
PUBLIC	??_C@_0BJ@CFADADFJ@THREE_LAYER_CASCADE_HELP?$AA@ ; `string'
PUBLIC	??_C@_0N@IDJJJPOF@TWOFISH_HELP?$AA@		; `string'
PUBLIC	??_C@_07DABDIDEC@Twofish?$AA@			; `string'
PUBLIC	??_C@_0N@PAOPLDOJ@SERPENT_HELP?$AA@		; `string'
PUBLIC	??_C@_07CCCAKGBN@Serpent?$AA@			; `string'
PUBLIC	??_C@_08FJPFOLOD@AES_HELP?$AA@			; `string'
PUBLIC	??_C@_0BA@LGBFJNHH@MORE_INFO_ABOUT?$AA@		; `string'
PUBLIC	??_C@_03BKNEFOAH@AES?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_ComboSelChangeEA
EXTRN	_AccommodateTextField:PROC
EXTRN	_hUserUnderlineFont:DWORD
EXTRN	_wcscpy_s:PROC
EXTRN	_CipherGetName:PROC
EXTRN	_CipherGetKeySize:PROC
EXTRN	_EAGetPreviousCipher:PROC
EXTRN	_EAGetLastCipher:PROC
EXTRN	_EAGetCipherCount:PROC
EXTRN	_swprintf_s:PROC
EXTRN	_GetString:PROC
EXTRN	_EAGetName:PROC
EXTRN	__imp__SetWindowTextA@8:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0CA@EHDIKOJL@IDC_LINK_MORE_INFO_ABOUT_CIPHER?$AA@
CONST	SEGMENT
??_C@_0CA@EHDIKOJL@IDC_LINK_MORE_INFO_ABOUT_CIPHER?$AA@ DB 'IDC_LINK_MORE'
	DB	'_INFO_ABOUT_CIPHER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PJGBOAEF@TWO_LAYER_CASCADE_HELP?$AA@
CONST	SEGMENT
??_C@_0BH@PJGBOAEF@TWO_LAYER_CASCADE_HELP?$AA@ DB 'TWO_LAYER_CASCADE_HELP'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CFADADFJ@THREE_LAYER_CASCADE_HELP?$AA@
CONST	SEGMENT
??_C@_0BJ@CFADADFJ@THREE_LAYER_CASCADE_HELP?$AA@ DB 'THREE_LAYER_CASCADE_'
	DB	'HELP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IDJJJPOF@TWOFISH_HELP?$AA@
CONST	SEGMENT
??_C@_0N@IDJJJPOF@TWOFISH_HELP?$AA@ DB 'TWOFISH_HELP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DABDIDEC@Twofish?$AA@
CONST	SEGMENT
??_C@_07DABDIDEC@Twofish?$AA@ DB 'Twofish', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PAOPLDOJ@SERPENT_HELP?$AA@
CONST	SEGMENT
??_C@_0N@PAOPLDOJ@SERPENT_HELP?$AA@ DB 'SERPENT_HELP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCCAKGBN@Serpent?$AA@
CONST	SEGMENT
??_C@_07CCCAKGBN@Serpent?$AA@ DB 'Serpent', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FJPFOLOD@AES_HELP?$AA@
CONST	SEGMENT
??_C@_08FJPFOLOD@AES_HELP?$AA@ DB 'AES_HELP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LGBFJNHH@MORE_INFO_ABOUT?$AA@
CONST	SEGMENT
??_C@_0BA@LGBFJNHH@MORE_INFO_ABOUT?$AA@ DB 'MORE_INFO_ABOUT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03BKNEFOAH@AES?$AA@
CONST	SEGMENT
??_C@_03BKNEFOAH@AES?$AA@ DB 'AES', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _ComboSelChangeEA
_TEXT	SEGMENT
_cipherIDs$132076 = -8828				; size = 20
_name$132073 = -8808					; size = 100
_hyperLink$132075 = -8708				; size = 512
_auxLine$132074 = -8196					; size = 8192
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_ComboSelChangeEA PROC					; COMDAT

; 1179 : {

  00000	b8 7c 22 00 00	 mov	 eax, 8828		; 0000227cH
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 78 22
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+8828], eax
  00018	53		 push	 ebx

; 1180 : 	LPARAM nIndex = SendMessage (GetDlgItem (hwndDlg, IDC_COMBO_BOX), CB_GETCURSEL, 0, 0);

  00019	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetDlgItem@8
  0001f	55		 push	 ebp
  00020	8b ac 24 88 22
	00 00		 mov	 ebp, DWORD PTR _hwndDlg$[esp+8832]
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	6a 00		 push	 0
  0002b	6a 00		 push	 0
  0002d	68 47 01 00 00	 push	 327			; 00000147H
  00032	68 ea 03 00 00	 push	 1002			; 000003eaH
  00037	55		 push	 ebp
  00038	ff d3		 call	 ebx
  0003a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  00040	50		 push	 eax
  00041	ff d7		 call	 edi
  00043	8b f0		 mov	 esi, eax

; 1181 : 
; 1182 : 	if (nIndex == CB_ERR)

  00045	83 fe ff	 cmp	 esi, -1
  00048	75 19		 jne	 SHORT $LN16@ComboSelCh

; 1183 : 	{
; 1184 : 		SetWindowTextA(GetDlgItem (hwndDlg, IDC_BOX_HELP), "");

  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0004f	68 eb 03 00 00	 push	 1003			; 000003ebH
  00054	55		 push	 ebp
  00055	ff d3		 call	 ebx
  00057	50		 push	 eax
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 1185 : 	}
; 1186 : 	else

  0005e	e9 16 03 00 00	 jmp	 $LN15@ComboSelCh
$LN16@ComboSelCh:

; 1187 : 	{
; 1188 : 		char name[100];
; 1189 : 		wchar_t auxLine[4096];
; 1190 : 		wchar_t hyperLink[256] = { 0 };

  00063	33 c0		 xor	 eax, eax
  00065	68 fe 01 00 00	 push	 510			; 000001feH
  0006a	50		 push	 eax
  0006b	8d 8c 24 92 00
	00 00		 lea	 ecx, DWORD PTR _hyperLink$132075[esp+8854]
  00072	51		 push	 ecx
  00073	66 89 84 24 94
	00 00 00	 mov	 WORD PTR _hyperLink$132075[esp+8856], ax
  0007b	e8 00 00 00 00	 call	 _memset
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1191 : 		int cipherIDs[5];
; 1192 : 		int i, cnt = 0;
; 1193 : 
; 1194 : 		nIndex = SendMessage (GetDlgItem (hwndDlg, IDC_COMBO_BOX), CB_GETITEMDATA, nIndex, 0);

  00083	6a 00		 push	 0
  00085	56		 push	 esi
  00086	68 50 01 00 00	 push	 336			; 00000150H
  0008b	68 ea 03 00 00	 push	 1002			; 000003eaH
  00090	55		 push	 ebp
  00091	ff d3		 call	 ebx
  00093	50		 push	 eax
  00094	ff d7		 call	 edi
  00096	8b d8		 mov	 ebx, eax

; 1195 : 		EAGetName (name, nIndex);

  00098	8d 54 24 24	 lea	 edx, DWORD PTR _name$132073[esp+8844]
  0009c	53		 push	 ebx
  0009d	52		 push	 edx
  0009e	e8 00 00 00 00	 call	 _EAGetName
  000a3	83 c4 08	 add	 esp, 8

; 1196 : 
; 1197 : 		if (strcmp (name, "AES") == 0)

  000a6	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_03BKNEFOAH@AES?$AA@
  000ab	8d 44 24 24	 lea	 eax, DWORD PTR _name$132073[esp+8844]
  000af	90		 npad	 1
$LL21@ComboSelCh:
  000b0	8a 10		 mov	 dl, BYTE PTR [eax]
  000b2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000b4	75 1a		 jne	 SHORT $LN22@ComboSelCh
  000b6	84 d2		 test	 dl, dl
  000b8	74 12		 je	 SHORT $LN23@ComboSelCh
  000ba	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000bd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000c0	75 0e		 jne	 SHORT $LN22@ComboSelCh
  000c2	83 c0 02	 add	 eax, 2
  000c5	83 c1 02	 add	 ecx, 2
  000c8	84 d2		 test	 dl, dl
  000ca	75 e4		 jne	 SHORT $LL21@ComboSelCh
$LN23@ComboSelCh:
  000cc	33 c0		 xor	 eax, eax
  000ce	eb 05		 jmp	 SHORT $LN24@ComboSelCh
$LN22@ComboSelCh:
  000d0	1b c0		 sbb	 eax, eax
  000d2	83 d8 ff	 sbb	 eax, -1
$LN24@ComboSelCh:
  000d5	85 c0		 test	 eax, eax

; 1198 : 		{
; 1199 : 			swprintf_s (hyperLink, sizeof(hyperLink) / 2, GetString ("MORE_INFO_ABOUT"), name);

  000d7	8d 44 24 24	 lea	 eax, DWORD PTR _name$132073[esp+8844]
  000db	75 34		 jne	 SHORT $LN14@ComboSelCh
  000dd	50		 push	 eax
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LGBFJNHH@MORE_INFO_ABOUT?$AA@
  000e3	e8 00 00 00 00	 call	 _GetString
  000e8	83 c4 04	 add	 esp, 4
  000eb	50		 push	 eax
  000ec	8d 8c 24 90 00
	00 00		 lea	 ecx, DWORD PTR _hyperLink$132075[esp+8852]
  000f3	68 00 01 00 00	 push	 256			; 00000100H
  000f8	51		 push	 ecx
  000f9	e8 00 00 00 00	 call	 _swprintf_s

; 1200 : 
; 1201 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("AES_HELP"));

  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_08FJPFOLOD@AES_HELP?$AA@
  00103	e8 00 00 00 00	 call	 _GetString
  00108	83 c4 14	 add	 esp, 20			; 00000014H
  0010b	50		 push	 eax
  0010c	e9 25 02 00 00	 jmp	 $LN33@ComboSelCh
$LN14@ComboSelCh:

; 1202 : 		}
; 1203 : 		else if (strcmp (name, "Serpent") == 0)

  00111	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_07CCCAKGBN@Serpent?$AA@
$LL25@ComboSelCh:
  00116	8a 10		 mov	 dl, BYTE PTR [eax]
  00118	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0011a	75 1a		 jne	 SHORT $LN26@ComboSelCh
  0011c	84 d2		 test	 dl, dl
  0011e	74 12		 je	 SHORT $LN27@ComboSelCh
  00120	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00123	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00126	75 0e		 jne	 SHORT $LN26@ComboSelCh
  00128	83 c0 02	 add	 eax, 2
  0012b	83 c1 02	 add	 ecx, 2
  0012e	84 d2		 test	 dl, dl
  00130	75 e4		 jne	 SHORT $LL25@ComboSelCh
$LN27@ComboSelCh:
  00132	33 c0		 xor	 eax, eax
  00134	eb 05		 jmp	 SHORT $LN28@ComboSelCh
$LN26@ComboSelCh:
  00136	1b c0		 sbb	 eax, eax
  00138	83 d8 ff	 sbb	 eax, -1
$LN28@ComboSelCh:
  0013b	85 c0		 test	 eax, eax
  0013d	75 38		 jne	 SHORT $LN12@ComboSelCh

; 1204 : 		{
; 1205 : 			swprintf_s (hyperLink, sizeof(hyperLink) / 2, GetString ("MORE_INFO_ABOUT"), name);

  0013f	8d 54 24 24	 lea	 edx, DWORD PTR _name$132073[esp+8844]
  00143	52		 push	 edx
  00144	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LGBFJNHH@MORE_INFO_ABOUT?$AA@
  00149	e8 00 00 00 00	 call	 _GetString
  0014e	83 c4 04	 add	 esp, 4
  00151	50		 push	 eax
  00152	8d 84 24 90 00
	00 00		 lea	 eax, DWORD PTR _hyperLink$132075[esp+8852]
  00159	68 00 01 00 00	 push	 256			; 00000100H
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 _swprintf_s

; 1206 : 				
; 1207 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SERPENT_HELP"));

  00164	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PAOPLDOJ@SERPENT_HELP?$AA@
  00169	e8 00 00 00 00	 call	 _GetString
  0016e	83 c4 14	 add	 esp, 20			; 00000014H
  00171	50		 push	 eax
  00172	e9 bf 01 00 00	 jmp	 $LN33@ComboSelCh
$LN12@ComboSelCh:

; 1208 : 		}
; 1209 : 		else if (strcmp (name, "Twofish") == 0)

  00177	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_07DABDIDEC@Twofish?$AA@
  0017c	8d 44 24 24	 lea	 eax, DWORD PTR _name$132073[esp+8844]
$LL29@ComboSelCh:
  00180	8a 10		 mov	 dl, BYTE PTR [eax]
  00182	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00184	75 1a		 jne	 SHORT $LN30@ComboSelCh
  00186	84 d2		 test	 dl, dl
  00188	74 12		 je	 SHORT $LN31@ComboSelCh
  0018a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0018d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00190	75 0e		 jne	 SHORT $LN30@ComboSelCh
  00192	83 c0 02	 add	 eax, 2
  00195	83 c1 02	 add	 ecx, 2
  00198	84 d2		 test	 dl, dl
  0019a	75 e4		 jne	 SHORT $LL29@ComboSelCh
$LN31@ComboSelCh:
  0019c	33 c0		 xor	 eax, eax
  0019e	eb 05		 jmp	 SHORT $LN32@ComboSelCh
$LN30@ComboSelCh:
  001a0	1b c0		 sbb	 eax, eax
  001a2	83 d8 ff	 sbb	 eax, -1
$LN32@ComboSelCh:
  001a5	85 c0		 test	 eax, eax
  001a7	75 38		 jne	 SHORT $LN10@ComboSelCh

; 1210 : 		{
; 1211 : 			swprintf_s (hyperLink, sizeof(hyperLink) / 2, GetString ("MORE_INFO_ABOUT"), name);

  001a9	8d 4c 24 24	 lea	 ecx, DWORD PTR _name$132073[esp+8844]
  001ad	51		 push	 ecx
  001ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LGBFJNHH@MORE_INFO_ABOUT?$AA@
  001b3	e8 00 00 00 00	 call	 _GetString
  001b8	83 c4 04	 add	 esp, 4
  001bb	50		 push	 eax
  001bc	8d 94 24 90 00
	00 00		 lea	 edx, DWORD PTR _hyperLink$132075[esp+8852]
  001c3	68 00 01 00 00	 push	 256			; 00000100H
  001c8	52		 push	 edx
  001c9	e8 00 00 00 00	 call	 _swprintf_s

; 1212 : 
; 1213 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("TWOFISH_HELP"));

  001ce	68 00 00 00 00	 push	 OFFSET ??_C@_0N@IDJJJPOF@TWOFISH_HELP?$AA@
  001d3	e8 00 00 00 00	 call	 _GetString
  001d8	83 c4 14	 add	 esp, 20			; 00000014H
  001db	50		 push	 eax
  001dc	e9 55 01 00 00	 jmp	 $LN33@ComboSelCh
$LN10@ComboSelCh:

; 1214 : 		}
; 1215 : 		else if (EAGetCipherCount (nIndex) > 1)

  001e1	53		 push	 ebx
  001e2	e8 00 00 00 00	 call	 _EAGetCipherCount
  001e7	83 c4 04	 add	 esp, 4
  001ea	83 f8 01	 cmp	 eax, 1
  001ed	0f 8e 3e 01 00
	00		 jle	 $LN8@ComboSelCh

; 1216 : 		{
; 1217 : 			// Cascade
; 1218 : 			cipherIDs[cnt++] = i = EAGetLastCipher(nIndex);

  001f3	53		 push	 ebx
  001f4	e8 00 00 00 00	 call	 _EAGetLastCipher

; 1219 : 			while (i = EAGetPreviousCipher(nIndex, i))

  001f9	50		 push	 eax
  001fa	8b f8		 mov	 edi, eax
  001fc	53		 push	 ebx
  001fd	89 7c 24 1c	 mov	 DWORD PTR _cipherIDs$132076[esp+8856], edi
  00201	be 01 00 00 00	 mov	 esi, 1
  00206	e8 00 00 00 00	 call	 _EAGetPreviousCipher
  0020b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0020e	85 c0		 test	 eax, eax
  00210	74 17		 je	 SHORT $LN6@ComboSelCh
$LL7@ComboSelCh:
  00212	50		 push	 eax

; 1220 : 			{
; 1221 : 				cipherIDs[cnt] = i;

  00213	89 44 b4 14	 mov	 DWORD PTR _cipherIDs$132076[esp+esi*4+8848], eax
  00217	53		 push	 ebx

; 1222 : 				cnt++; 

  00218	46		 inc	 esi
  00219	e8 00 00 00 00	 call	 _EAGetPreviousCipher
  0021e	83 c4 08	 add	 esp, 8
  00221	85 c0		 test	 eax, eax
  00223	75 ed		 jne	 SHORT $LL7@ComboSelCh

; 1219 : 			while (i = EAGetPreviousCipher(nIndex, i))

  00225	8b 7c 24 10	 mov	 edi, DWORD PTR _cipherIDs$132076[esp+8844]
$LN6@ComboSelCh:

; 1223 : 			}
; 1224 : 
; 1225 : 			switch (cnt)	// Number of ciphers in the cascade

  00229	83 ee 02	 sub	 esi, 2
  0022c	0f 84 7f 00 00
	00		 je	 $LN3@ComboSelCh
  00232	83 ee 01	 sub	 esi, 1
  00235	0f 85 cc 00 00
	00		 jne	 $LN4@ComboSelCh

; 1233 : 				break;
; 1234 : 
; 1235 : 			case 3:
; 1236 : 				swprintf (auxLine, GetString ("THREE_LAYER_CASCADE_HELP"), 
; 1237 : 					CipherGetName (cipherIDs[2]),
; 1238 : 					CipherGetKeySize (cipherIDs[2])*8,
; 1239 : 					CipherGetName (cipherIDs[1]),
; 1240 : 					CipherGetKeySize (cipherIDs[1])*8,
; 1241 : 					CipherGetName (cipherIDs[0]),
; 1242 : 					CipherGetKeySize (cipherIDs[0])*8);

  0023b	57		 push	 edi
  0023c	e8 00 00 00 00	 call	 _CipherGetKeySize
  00241	03 c0		 add	 eax, eax
  00243	03 c0		 add	 eax, eax
  00245	83 c4 04	 add	 esp, 4
  00248	03 c0		 add	 eax, eax
  0024a	50		 push	 eax
  0024b	57		 push	 edi
  0024c	e8 00 00 00 00	 call	 _CipherGetName
  00251	8b 74 24 1c	 mov	 esi, DWORD PTR _cipherIDs$132076[esp+8856]
  00255	83 c4 04	 add	 esp, 4
  00258	50		 push	 eax
  00259	56		 push	 esi
  0025a	e8 00 00 00 00	 call	 _CipherGetKeySize
  0025f	03 c0		 add	 eax, eax
  00261	03 c0		 add	 eax, eax
  00263	83 c4 04	 add	 esp, 4
  00266	03 c0		 add	 eax, eax
  00268	50		 push	 eax
  00269	56		 push	 esi
  0026a	e8 00 00 00 00	 call	 _CipherGetName
  0026f	8b 74 24 28	 mov	 esi, DWORD PTR _cipherIDs$132076[esp+8868]
  00273	83 c4 04	 add	 esp, 4
  00276	50		 push	 eax
  00277	56		 push	 esi
  00278	e8 00 00 00 00	 call	 _CipherGetKeySize
  0027d	03 c0		 add	 eax, eax
  0027f	03 c0		 add	 eax, eax
  00281	83 c4 04	 add	 esp, 4
  00284	03 c0		 add	 eax, eax
  00286	50		 push	 eax
  00287	56		 push	 esi
  00288	e8 00 00 00 00	 call	 _CipherGetName
  0028d	83 c4 04	 add	 esp, 4
  00290	50		 push	 eax
  00291	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@CFADADFJ@THREE_LAYER_CASCADE_HELP?$AA@
  00296	e8 00 00 00 00	 call	 _GetString
  0029b	83 c4 04	 add	 esp, 4
  0029e	50		 push	 eax
  0029f	8d 84 24 a4 02
	00 00		 lea	 eax, DWORD PTR _auxLine$132074[esp+8872]
  002a6	50		 push	 eax
  002a7	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf
  002ac	83 c4 20	 add	 esp, 32			; 00000020H

; 1243 : 				break;

  002af	eb 56		 jmp	 SHORT $LN4@ComboSelCh
$LN3@ComboSelCh:

; 1226 : 			{
; 1227 : 			case 2:
; 1228 : 				swprintf (auxLine, GetString ("TWO_LAYER_CASCADE_HELP"), 
; 1229 : 					CipherGetName (cipherIDs[1]),
; 1230 : 					CipherGetKeySize (cipherIDs[1])*8,
; 1231 : 					CipherGetName (cipherIDs[0]),
; 1232 : 					CipherGetKeySize (cipherIDs[0])*8);

  002b1	57		 push	 edi
  002b2	e8 00 00 00 00	 call	 _CipherGetKeySize
  002b7	03 c0		 add	 eax, eax
  002b9	03 c0		 add	 eax, eax
  002bb	83 c4 04	 add	 esp, 4
  002be	03 c0		 add	 eax, eax
  002c0	50		 push	 eax
  002c1	57		 push	 edi
  002c2	e8 00 00 00 00	 call	 _CipherGetName
  002c7	8b 74 24 1c	 mov	 esi, DWORD PTR _cipherIDs$132076[esp+8856]
  002cb	83 c4 04	 add	 esp, 4
  002ce	50		 push	 eax
  002cf	56		 push	 esi
  002d0	e8 00 00 00 00	 call	 _CipherGetKeySize
  002d5	03 c0		 add	 eax, eax
  002d7	03 c0		 add	 eax, eax
  002d9	83 c4 04	 add	 esp, 4
  002dc	03 c0		 add	 eax, eax
  002de	50		 push	 eax
  002df	56		 push	 esi
  002e0	e8 00 00 00 00	 call	 _CipherGetName
  002e5	83 c4 04	 add	 esp, 4
  002e8	50		 push	 eax
  002e9	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@PJGBOAEF@TWO_LAYER_CASCADE_HELP?$AA@
  002ee	e8 00 00 00 00	 call	 _GetString
  002f3	83 c4 04	 add	 esp, 4
  002f6	50		 push	 eax
  002f7	8d 8c 24 9c 02
	00 00		 lea	 ecx, DWORD PTR _auxLine$132074[esp+8864]
  002fe	51		 push	 ecx
  002ff	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf
  00304	83 c4 18	 add	 esp, 24			; 00000018H
$LN4@ComboSelCh:

; 1244 : 			}
; 1245 : 
; 1246 : 			wcscpy_s (hyperLink, sizeof(hyperLink) / 2, GetString ("IDC_LINK_MORE_INFO_ABOUT_CIPHER"));

  00307	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@EHDIKOJL@IDC_LINK_MORE_INFO_ABOUT_CIPHER?$AA@
  0030c	e8 00 00 00 00	 call	 _GetString
  00311	50		 push	 eax
  00312	8d 94 24 90 00
	00 00		 lea	 edx, DWORD PTR _hyperLink$132075[esp+8852]
  00319	68 00 01 00 00	 push	 256			; 00000100H
  0031e	52		 push	 edx
  0031f	e8 00 00 00 00	 call	 _wcscpy_s
  00324	83 c4 10	 add	 esp, 16			; 00000010H

; 1247 : 
; 1248 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), auxLine);

  00327	8d 84 24 88 02
	00 00		 lea	 eax, DWORD PTR _auxLine$132074[esp+8844]
  0032e	50		 push	 eax

; 1249 : 		}
; 1250 : 		else

  0032f	eb 05		 jmp	 SHORT $LN33@ComboSelCh
$LN8@ComboSelCh:

; 1251 : 		{
; 1252 : 			// No info available for this encryption algorithm
; 1253 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), L"");

  00331	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
$LN33@ComboSelCh:
  00336	68 eb 03 00 00	 push	 1003			; 000003ebH
  0033b	55		 push	 ebp
  0033c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00342	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextW@8
  00348	50		 push	 eax
  00349	ff d6		 call	 esi

; 1254 : 		}
; 1255 : 
; 1256 : 
; 1257 : 		// Update hyperlink
; 1258 : 		SetWindowTextW (GetDlgItem (hwndDlg, IDC_LINK_MORE_INFO_ABOUT_CIPHER), hyperLink);

  0034b	8d 8c 24 88 00
	00 00		 lea	 ecx, DWORD PTR _hyperLink$132075[esp+8844]
  00352	51		 push	 ecx
  00353	68 21 04 00 00	 push	 1057			; 00000421H
  00358	55		 push	 ebp
  00359	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0035f	50		 push	 eax
  00360	ff d6		 call	 esi

; 1259 : 		AccommodateTextField (hwndDlg, IDC_LINK_MORE_INFO_ABOUT_CIPHER, FALSE, hUserUnderlineFont);

  00362	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hUserUnderlineFont
  00368	52		 push	 edx
  00369	6a 00		 push	 0
  0036b	68 21 04 00 00	 push	 1057			; 00000421H
  00370	55		 push	 ebp
  00371	e8 00 00 00 00	 call	 _AccommodateTextField
  00376	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@ComboSelCh:

; 1260 : 	}
; 1261 : }

  00379	8b 8c 24 88 22
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+8844]
  00380	5f		 pop	 edi
  00381	5e		 pop	 esi
  00382	5d		 pop	 ebp
  00383	5b		 pop	 ebx
  00384	33 cc		 xor	 ecx, esp
  00386	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0038b	81 c4 7c 22 00
	00		 add	 esp, 8828		; 0000227cH
  00391	c3		 ret	 0
_ComboSelChangeEA ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?UpdateWizardModeControls@@YAXPAUHWND__@@H@Z
_TEXT	SEGMENT
?UpdateWizardModeControls@@YAXPAUHWND__@@H@Z PROC	; UpdateWizardModeControls, COMDAT
; _hwndDlg$ = edi
; _setWizardMode$ = esi

; 1346 : 	SendMessage (GetDlgItem (hwndDlg, IDC_FILE_CONTAINER),
; 1347 : 		BM_SETCHECK,
; 1348 : 		setWizardMode == WIZARD_MODE_FILE_CONTAINER ? BST_CHECKED : BST_UNCHECKED,
; 1349 : 		0);

  00000	33 c0		 xor	 eax, eax
  00002	53		 push	 ebx
  00003	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetDlgItem@8
  00009	85 f6		 test	 esi, esi
  0000b	55		 push	 ebp
  0000c	0f 94 c0	 sete	 al
  0000f	6a 00		 push	 0
  00011	50		 push	 eax
  00012	68 f1 00 00 00	 push	 241			; 000000f1H
  00017	68 25 04 00 00	 push	 1061			; 00000425H
  0001c	57		 push	 edi
  0001d	ff d3		 call	 ebx
  0001f	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SendMessageA@16
  00025	50		 push	 eax
  00026	ff d5		 call	 ebp

; 1350 : 
; 1351 : 	SendMessage (GetDlgItem (hwndDlg, IDC_NONSYS_DEVICE),
; 1352 : 		BM_SETCHECK,
; 1353 : 		setWizardMode == WIZARD_MODE_NONSYS_DEVICE ? BST_CHECKED : BST_UNCHECKED,
; 1354 : 		0);

  00028	33 c9		 xor	 ecx, ecx
  0002a	83 fe 01	 cmp	 esi, 1
  0002d	0f 94 c1	 sete	 cl
  00030	6a 00		 push	 0
  00032	51		 push	 ecx
  00033	68 f1 00 00 00	 push	 241			; 000000f1H
  00038	68 26 04 00 00	 push	 1062			; 00000426H
  0003d	57		 push	 edi
  0003e	ff d3		 call	 ebx
  00040	50		 push	 eax
  00041	ff d5		 call	 ebp

; 1355 : 
; 1356 : 	SendMessage (GetDlgItem (hwndDlg, IDC_SYS_DEVICE),
; 1357 : 		BM_SETCHECK,
; 1358 : 		setWizardMode == WIZARD_MODE_SYS_DEVICE ? BST_CHECKED : BST_UNCHECKED,
; 1359 : 		0);

  00043	33 d2		 xor	 edx, edx
  00045	83 fe 02	 cmp	 esi, 2
  00048	0f 94 c2	 sete	 dl
  0004b	6a 00		 push	 0
  0004d	52		 push	 edx
  0004e	68 f1 00 00 00	 push	 241			; 000000f1H
  00053	68 27 04 00 00	 push	 1063			; 00000427H
  00058	57		 push	 edi
  00059	ff d3		 call	 ebx
  0005b	50		 push	 eax
  0005c	ff d5		 call	 ebp
  0005e	5d		 pop	 ebp
  0005f	5b		 pop	 ebx

; 1360 : }

  00060	c3		 ret	 0
?UpdateWizardModeControls@@YAXPAUHWND__@@H@Z ENDP	; UpdateWizardModeControls
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?GetSelectedWizardMode@@YAHPAUHWND__@@@Z
_TEXT	SEGMENT
?GetSelectedWizardMode@@YAHPAUHWND__@@@Z PROC		; GetSelectedWizardMode, COMDAT
; _hwndDlg$ = esi

; 1363 : {

  00000	57		 push	 edi

; 1364 : 	if (IsButtonChecked (GetDlgItem (hwndDlg, IDC_FILE_CONTAINER)))

  00001	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00007	68 25 04 00 00	 push	 1061			; 00000425H
  0000c	56		 push	 esi
  0000d	ff d7		 call	 edi
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 _IsButtonChecked
  00015	83 c4 04	 add	 esp, 4
  00018	85 c0		 test	 eax, eax
  0001a	74 04		 je	 SHORT $LN3@GetSelecte

; 1365 : 		return WIZARD_MODE_FILE_CONTAINER;

  0001c	33 c0		 xor	 eax, eax
  0001e	5f		 pop	 edi

; 1371 : 		return WIZARD_MODE_SYS_DEVICE;
; 1372 : 
; 1373 : 	return DEFAULT_VOL_CREATION_WIZARD_MODE;
; 1374 : }

  0001f	c3		 ret	 0
$LN3@GetSelecte:

; 1366 : 
; 1367 : 	if (IsButtonChecked (GetDlgItem (hwndDlg, IDC_NONSYS_DEVICE)))

  00020	68 26 04 00 00	 push	 1062			; 00000426H
  00025	56		 push	 esi
  00026	ff d7		 call	 edi
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 _IsButtonChecked
  0002e	83 c4 04	 add	 esp, 4
  00031	85 c0		 test	 eax, eax
  00033	74 07		 je	 SHORT $LN2@GetSelecte

; 1368 : 		return WIZARD_MODE_NONSYS_DEVICE;

  00035	b8 01 00 00 00	 mov	 eax, 1
  0003a	5f		 pop	 edi

; 1371 : 		return WIZARD_MODE_SYS_DEVICE;
; 1372 : 
; 1373 : 	return DEFAULT_VOL_CREATION_WIZARD_MODE;
; 1374 : }

  0003b	c3		 ret	 0
$LN2@GetSelecte:

; 1369 : 
; 1370 : 	if (IsButtonChecked (GetDlgItem (hwndDlg, IDC_SYS_DEVICE)))

  0003c	68 27 04 00 00	 push	 1063			; 00000427H
  00041	56		 push	 esi
  00042	ff d7		 call	 edi
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _IsButtonChecked
  0004a	83 c4 04	 add	 esp, 4
  0004d	f7 d8		 neg	 eax
  0004f	1b c0		 sbb	 eax, eax
  00051	83 e0 02	 and	 eax, 2
  00054	5f		 pop	 edi

; 1371 : 		return WIZARD_MODE_SYS_DEVICE;
; 1372 : 
; 1373 : 	return DEFAULT_VOL_CREATION_WIZARD_MODE;
; 1374 : }

  00055	c3		 ret	 0
?GetSelectedWizardMode@@YAHPAUHWND__@@@Z ENDP		; GetSelectedWizardMode
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?RefreshMultiBootControls@@YAXPAUHWND__@@@Z
_TEXT	SEGMENT
?RefreshMultiBootControls@@YAXPAUHWND__@@@Z PROC	; RefreshMultiBootControls, COMDAT
; _hwndDlg$ = esi

; 1378 : #ifdef DEBUG
; 1379 : 	if (nMultiBoot == 0)
; 1380 : 		nMultiBoot = 1;
; 1381 : #endif
; 1382 : 
; 1383 : 	SendMessage (GetDlgItem (hwndDlg, IDC_SINGLE_BOOT),
; 1384 : 		BM_SETCHECK,
; 1385 : 		nMultiBoot == 1 ? BST_CHECKED : BST_UNCHECKED,
; 1386 : 		0);

  00000	33 c0		 xor	 eax, eax
  00002	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?nMultiBoot@@3HA, 1 ; nMultiBoot
  00009	53		 push	 ebx
  0000a	57		 push	 edi
  0000b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00011	0f 94 c0	 sete	 al
  00014	6a 00		 push	 0
  00016	50		 push	 eax
  00017	68 f1 00 00 00	 push	 241			; 000000f1H
  0001c	68 34 04 00 00	 push	 1076			; 00000434H
  00021	56		 push	 esi
  00022	ff d7		 call	 edi
  00024	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  0002a	50		 push	 eax
  0002b	ff d3		 call	 ebx

; 1387 : 
; 1388 : 	SendMessage (GetDlgItem (hwndDlg, IDC_MULTI_BOOT),
; 1389 : 		BM_SETCHECK,
; 1390 : 		nMultiBoot > 1 ? BST_CHECKED : BST_UNCHECKED,
; 1391 : 		0);

  0002d	33 c9		 xor	 ecx, ecx
  0002f	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?nMultiBoot@@3HA, 1 ; nMultiBoot
  00036	6a 00		 push	 0
  00038	0f 9f c1	 setg	 cl
  0003b	51		 push	 ecx
  0003c	68 f1 00 00 00	 push	 241			; 000000f1H
  00041	68 35 04 00 00	 push	 1077			; 00000435H
  00046	56		 push	 esi
  00047	ff d7		 call	 edi
  00049	50		 push	 eax
  0004a	ff d3		 call	 ebx
  0004c	5f		 pop	 edi
  0004d	5b		 pop	 ebx

; 1392 : }

  0004e	c3		 ret	 0
?RefreshMultiBootControls@@YAXPAUHWND__@@@Z ENDP	; RefreshMultiBootControls
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Get2RadButtonPageAnswer@@YAHXZ
_TEXT	SEGMENT
?Get2RadButtonPageAnswer@@YAHXZ PROC			; Get2RadButtonPageAnswer, COMDAT

; 1397 : 	if (IsButtonChecked (GetDlgItem (hCurPage, IDC_CHOICE1)))

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00005	56		 push	 esi
  00006	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0000c	68 dd 13 00 00	 push	 5085			; 000013ddH
  00011	50		 push	 eax
  00012	ff d6		 call	 esi
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _IsButtonChecked
  0001a	83 c4 04	 add	 esp, 4
  0001d	85 c0		 test	 eax, eax
  0001f	74 07		 je	 SHORT $LN2@Get2RadBut

; 1398 : 		return 1;

  00021	b8 01 00 00 00	 mov	 eax, 1
  00026	5e		 pop	 esi

; 1401 : 		return 0;
; 1402 : 
; 1403 : 	return -1;
; 1404 : }

  00027	c3		 ret	 0
$LN2@Get2RadBut:

; 1399 : 
; 1400 : 	if (IsButtonChecked (GetDlgItem (hCurPage, IDC_CHOICE2)))

  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  0002e	68 df 13 00 00	 push	 5087			; 000013dfH
  00033	51		 push	 ecx
  00034	ff d6		 call	 esi
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _IsButtonChecked
  0003c	83 c4 04	 add	 esp, 4
  0003f	f7 d8		 neg	 eax
  00041	1b c0		 sbb	 eax, eax
  00043	f7 d8		 neg	 eax
  00045	48		 dec	 eax
  00046	5e		 pop	 esi

; 1401 : 		return 0;
; 1402 : 
; 1403 : 	return -1;
; 1404 : }

  00047	c3		 ret	 0
?Get2RadButtonPageAnswer@@YAHXZ ENDP			; Get2RadButtonPageAnswer
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Update2RadButtonPage@@YAXH@Z
_TEXT	SEGMENT
?Update2RadButtonPage@@YAXH@Z PROC			; Update2RadButtonPage, COMDAT
; _answer$ = esi

; 1409 : 	SendMessage (GetDlgItem (hCurPage, IDC_CHOICE1),
; 1410 : 		BM_SETCHECK,
; 1411 : 		answer == 1 ? BST_CHECKED : BST_UNCHECKED,
; 1412 : 		0);

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  00006	33 c0		 xor	 eax, eax
  00008	53		 push	 ebx
  00009	57		 push	 edi
  0000a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00010	83 fe 01	 cmp	 esi, 1
  00013	0f 94 c0	 sete	 al
  00016	6a 00		 push	 0
  00018	50		 push	 eax
  00019	68 f1 00 00 00	 push	 241			; 000000f1H
  0001e	68 dd 13 00 00	 push	 5085			; 000013ddH
  00023	51		 push	 ecx
  00024	ff d7		 call	 edi
  00026	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  0002c	50		 push	 eax
  0002d	ff d3		 call	 ebx

; 1413 : 
; 1414 : 	SendMessage (GetDlgItem (hCurPage, IDC_CHOICE2),
; 1415 : 		BM_SETCHECK,
; 1416 : 		answer == 0 ? BST_CHECKED : BST_UNCHECKED,
; 1417 : 		0);

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00034	33 d2		 xor	 edx, edx
  00036	85 f6		 test	 esi, esi
  00038	0f 94 c2	 sete	 dl
  0003b	6a 00		 push	 0
  0003d	52		 push	 edx
  0003e	68 f1 00 00 00	 push	 241			; 000000f1H
  00043	68 df 13 00 00	 push	 5087			; 000013dfH
  00048	50		 push	 eax
  00049	ff d7		 call	 edi
  0004b	50		 push	 eax
  0004c	ff d3		 call	 ebx
  0004e	5f		 pop	 edi
  0004f	5b		 pop	 ebx

; 1418 : }

  00050	c3		 ret	 0
?Update2RadButtonPage@@YAXH@Z ENDP			; Update2RadButtonPage
_TEXT	ENDS
PUBLIC	??_C@_06JHILMIHF@CANCEL?$AA@			; `string'
PUBLIC	??_C@_04PKHKLFPJ@PREV?$AA@			; `string'
PUBLIC	??_C@_04MOKMKBJN@NEXT?$AA@			; `string'
PUBLIC	??_C@_08EOJLPPDK@UISTR_NO?$AA@			; `string'
PUBLIC	??_C@_09JHINKGCK@UISTR_YES?$AA@			; `string'
EXTRN	__imp__EnableWindow@8:PROC
;	COMDAT ??_C@_06JHILMIHF@CANCEL?$AA@
CONST	SEGMENT
??_C@_06JHILMIHF@CANCEL?$AA@ DB 'CANCEL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PKHKLFPJ@PREV?$AA@
CONST	SEGMENT
??_C@_04PKHKLFPJ@PREV?$AA@ DB 'PREV', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MOKMKBJN@NEXT?$AA@
CONST	SEGMENT
??_C@_04MOKMKBJN@NEXT?$AA@ DB 'NEXT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EOJLPPDK@UISTR_NO?$AA@
CONST	SEGMENT
??_C@_08EOJLPPDK@UISTR_NO?$AA@ DB 'UISTR_NO', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JHINKGCK@UISTR_YES?$AA@
CONST	SEGMENT
??_C@_09JHINKGCK@UISTR_YES?$AA@ DB 'UISTR_YES', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?Init2RadButtonPageYesNo@@YAXH@Z
_TEXT	SEGMENT
?Init2RadButtonPageYesNo@@YAXH@Z PROC			; Init2RadButtonPageYesNo, COMDAT
; _answer$ = eax

; 1422 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 1423 : 	SetWindowTextW (GetDlgItem (hCurPage, IDC_CHOICE1), GetString ("UISTR_YES"));

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_09JHINKGCK@UISTR_YES?$AA@
  00008	8b f0		 mov	 esi, eax
  0000a	e8 00 00 00 00	 call	 _GetString
  0000f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0001e	68 dd 13 00 00	 push	 5085			; 000013ddH
  00023	50		 push	 eax
  00024	ff d7		 call	 edi
  00026	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetWindowTextW@8
  0002c	50		 push	 eax
  0002d	ff d3		 call	 ebx

; 1424 : 	SetWindowTextW (GetDlgItem (hCurPage, IDC_CHOICE2), GetString ("UISTR_NO"));

  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_08EOJLPPDK@UISTR_NO?$AA@
  00034	e8 00 00 00 00	 call	 _GetString
  00039	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  0003f	83 c4 04	 add	 esp, 4
  00042	50		 push	 eax
  00043	68 df 13 00 00	 push	 5087			; 000013dfH
  00048	51		 push	 ecx
  00049	ff d7		 call	 edi
  0004b	50		 push	 eax
  0004c	ff d3		 call	 ebx

; 1425 : 
; 1426 : 	SetWindowTextW (GetDlgItem (MainDlg, IDC_NEXT), GetString ("NEXT"));

  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00053	e8 00 00 00 00	 call	 _GetString
  00058	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0005e	83 c4 04	 add	 esp, 4
  00061	50		 push	 eax
  00062	68 10 04 00 00	 push	 1040			; 00000410H
  00067	52		 push	 edx
  00068	ff d7		 call	 edi
  0006a	50		 push	 eax
  0006b	ff d3		 call	 ebx

; 1427 : 	SetWindowTextW (GetDlgItem (MainDlg, IDC_PREV), GetString ("PREV"));

  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  00072	e8 00 00 00 00	 call	 _GetString
  00077	83 c4 04	 add	 esp, 4
  0007a	50		 push	 eax
  0007b	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00080	68 11 04 00 00	 push	 1041			; 00000411H
  00085	50		 push	 eax
  00086	ff d7		 call	 edi
  00088	50		 push	 eax
  00089	ff d3		 call	 ebx

; 1428 : 	SetWindowTextW (GetDlgItem (MainDlg, IDCANCEL), GetString ("CANCEL"));

  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  00090	e8 00 00 00 00	 call	 _GetString
  00095	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0009b	83 c4 04	 add	 esp, 4
  0009e	50		 push	 eax
  0009f	6a 02		 push	 2
  000a1	51		 push	 ecx
  000a2	ff d7		 call	 edi
  000a4	50		 push	 eax
  000a5	ff d3		 call	 ebx

; 1429 : 
; 1430 : 	EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), answer >= 0);

  000a7	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  000ac	33 d2		 xor	 edx, edx
  000ae	85 f6		 test	 esi, esi
  000b0	0f 9d c2	 setge	 dl
  000b3	52		 push	 edx
  000b4	68 10 04 00 00	 push	 1040			; 00000410H
  000b9	50		 push	 eax
  000ba	ff d7		 call	 edi
  000bc	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  000c2	50		 push	 eax
  000c3	ff d3		 call	 ebx

; 1431 : 	EnableWindow (GetDlgItem (MainDlg, IDC_PREV), TRUE);

  000c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  000cb	6a 01		 push	 1
  000cd	68 11 04 00 00	 push	 1041			; 00000411H
  000d2	51		 push	 ecx
  000d3	ff d7		 call	 edi
  000d5	50		 push	 eax
  000d6	ff d3		 call	 ebx

; 1432 : 
; 1433 : 	Update2RadButtonPage (answer);

  000d8	e8 00 00 00 00	 call	 ?Update2RadButtonPage@@YAXH@Z ; Update2RadButtonPage
  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx

; 1434 : }

  000e0	c3		 ret	 0
?Init2RadButtonPageYesNo@@YAXH@Z ENDP			; Init2RadButtonPageYesNo
_TEXT	ENDS
PUBLIC	??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@		; `string'
PUBLIC	??_C@_0BL@PONBLMNB@PROGRESS_STATUS_ENCRYPTING?$AA@ ; `string'
PUBLIC	??_C@_0BL@MHLPJIOG@PROGRESS_STATUS_DECRYPTING?$AA@ ; `string'
PUBLIC	??_C@_0BI@FJOOBAJA@PROGRESS_STATUS_WAITING?$AA@	; `string'
PUBLIC	__$ArrayPad$
EXTRN	_UpdateProgressBarProc:PROC
;	COMDAT ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@ DB ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PONBLMNB@PROGRESS_STATUS_ENCRYPTING?$AA@
CONST	SEGMENT
??_C@_0BL@PONBLMNB@PROGRESS_STATUS_ENCRYPTING?$AA@ DB 'PROGRESS_STATUS_EN'
	DB	'CRYPTING', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MHLPJIOG@PROGRESS_STATUS_DECRYPTING?$AA@
CONST	SEGMENT
??_C@_0BL@MHLPJIOG@PROGRESS_STATUS_DECRYPTING?$AA@ DB 'PROGRESS_STATUS_DE'
	DB	'CRYPTING', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FJOOBAJA@PROGRESS_STATUS_WAITING?$AA@
CONST	SEGMENT
??_C@_0BI@FJOOBAJA@PROGRESS_STATUS_WAITING?$AA@ DB 'PROGRESS_STATUS_WAITI'
	DB	'NG', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?UpdateSysEncProgressBar@@YAXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?UpdateSysEncProgressBar@@YAXXZ$0
__unwindtable$?UpdateSysEncProgressBar@@YAXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?UpdateSysEncProgressBar@@YAXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?UpdateSysEncProgressBar@@YAXXZ$2
__ehfuncinfo$?UpdateSysEncProgressBar@@YAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?UpdateSysEncProgressBar@@YAXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?UpdateSysEncProgressBar@@YAXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?UpdateSysEncProgressBar@@YAXXZ
_TEXT	SEGMENT
$T141418 = -206						; size = 94
_locBootEncStatus$ = -112				; size = 94
__$EHRec$ = -16						; size = 16
_tmpStr$132185 = 0					; size = 200
__$ArrayPad$ = 200					; size = 4
?UpdateSysEncProgressBar@@YAXXZ PROC			; UpdateSysEncProgressBar, COMDAT

; 1437 : {

  00000	55		 push	 ebp
  00001	8d ac 24 34 ff
	ff ff		 lea	 ebp, DWORD PTR [esp-204]
  00008	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?UpdateSysEncProgressBar@@YAXXZ
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 85 c8 00 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1438 : 	BootEncryptionStatus locBootEncStatus;
; 1439 : 
; 1440 : 	try
; 1441 : 	{
; 1442 : 		locBootEncStatus = BootEncObj->GetStatus();

  0003f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00045	8d 85 32 ff ff
	ff		 lea	 eax, DWORD PTR $T141418[ebp]
  0004b	50		 push	 eax
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00053	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00058	8b f0		 mov	 esi, eax
  0005a	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0005f	8d 7d 90	 lea	 edi, DWORD PTR _locBootEncStatus$[ebp]
  00062	f3 a5		 rep movsd
  00064	66 a5		 movsw

; 1447 : 	}
; 1448 : 
; 1449 : 	if (locBootEncStatus.EncryptedAreaEnd == -1 
; 1450 : 		|| locBootEncStatus.EncryptedAreaStart == -1)

  00066	8b 45 c2	 mov	 eax, DWORD PTR _locBootEncStatus$[ebp+50]
  00069	8b 4d c6	 mov	 ecx, DWORD PTR _locBootEncStatus$[ebp+54]
  0006c	8b d0		 mov	 edx, eax
  0006e	23 d1		 and	 edx, ecx
  00070	83 fa ff	 cmp	 edx, -1
  00073	0f 84 ec 00 00
	00		 je	 $LN5@UpdateSysE
  00079	8b 55 ba	 mov	 edx, DWORD PTR _locBootEncStatus$[ebp+42]
  0007c	8b 75 be	 mov	 esi, DWORD PTR _locBootEncStatus$[ebp+46]
  0007f	8b fa		 mov	 edi, edx
  00081	23 fe		 and	 edi, esi
  00083	83 ff ff	 cmp	 edi, -1
  00086	0f 84 d9 00 00
	00		 je	 $LN5@UpdateSysE

; 1455 : 	{
; 1456 : 		UpdateProgressBarProc (locBootEncStatus.EncryptedAreaEnd - locBootEncStatus.EncryptedAreaStart + 1);

  0008c	2b c2		 sub	 eax, edx
  0008e	1b ce		 sbb	 ecx, esi
  00090	83 c0 01	 add	 eax, 1
  00093	83 d1 00	 adc	 ecx, 0
  00096	51		 push	 ecx
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 _UpdateProgressBarProc
  0009d	83 c4 08	 add	 esp, 8

; 1457 : 
; 1458 : 		if (locBootEncStatus.SetupInProgress)

  000a0	83 7d ce 00	 cmp	 DWORD PTR _locBootEncStatus$[ebp+62], 0
  000a4	0f 84 96 00 00
	00		 je	 $LN17@UpdateSysE

; 1459 : 		{
; 1460 : 			wchar_t tmpStr[100];
; 1461 : 
; 1462 : 			// Status
; 1463 : 
; 1464 : 			if (locBootEncStatus.TransformWaitingForIdle)

  000aa	83 7d d6 00	 cmp	 DWORD PTR _locBootEncStatus$[ebp+70], 0
  000ae	74 23		 je	 SHORT $LN2@UpdateSysE

; 1465 : 				wcscpy (tmpStr, GetString ("PROGRESS_STATUS_WAITING"));

  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FJOOBAJA@PROGRESS_STATUS_WAITING?$AA@
  000b5	e8 00 00 00 00	 call	 _GetString
  000ba	83 c4 04	 add	 esp, 4
  000bd	8d 55 00	 lea	 edx, DWORD PTR _tmpStr$132185[ebp]
$LL10@UpdateSysE:
  000c0	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000c3	66 89 0a	 mov	 WORD PTR [edx], cx
  000c6	83 c0 02	 add	 eax, 2
  000c9	83 c2 02	 add	 edx, 2
  000cc	66 85 c9	 test	 cx, cx
  000cf	75 ef		 jne	 SHORT $LL10@UpdateSysE

; 1466 : 			else

  000d1	eb 33		 jmp	 SHORT $LN1@UpdateSysE
$LN2@UpdateSysE:

; 1467 : 				wcscpy (tmpStr, GetString (SystemEncryptionStatus == SYSENC_STATUS_DECRYPTING ? "PROGRESS_STATUS_DECRYPTING" : "PROGRESS_STATUS_ENCRYPTING"));

  000d3	81 3d 00 00 00
	00 58 02 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 600 ; 00000258H
  000dd	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BL@MHLPJIOG@PROGRESS_STATUS_DECRYPTING?$AA@
  000e2	74 05		 je	 SHORT $LN12@UpdateSysE
  000e4	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BL@PONBLMNB@PROGRESS_STATUS_ENCRYPTING?$AA@
$LN12@UpdateSysE:
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 _GetString
  000ef	83 c4 04	 add	 esp, 4
  000f2	8d 55 00	 lea	 edx, DWORD PTR _tmpStr$132185[ebp]
$LL13@UpdateSysE:
  000f5	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000f8	66 89 0a	 mov	 WORD PTR [edx], cx
  000fb	83 c0 02	 add	 eax, 2
  000fe	83 c2 02	 add	 edx, 2
  00101	66 85 c9	 test	 cx, cx
  00104	75 ef		 jne	 SHORT $LL13@UpdateSysE
$LN1@UpdateSysE:

; 1468 : 
; 1469 : 			wcscat (tmpStr, L" ");

  00106	8d 7d 00	 lea	 edi, DWORD PTR _tmpStr$132185[ebp]
  00109	83 c7 fe	 add	 edi, -2			; fffffffeH
  0010c	8d 64 24 00	 npad	 4
$LL21@UpdateSysE:
  00110	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  00114	83 c7 02	 add	 edi, 2
  00117	66 85 c0	 test	 ax, ax
  0011a	75 f4		 jne	 SHORT $LL21@UpdateSysE

; 1470 : 
; 1471 : 			SetWindowTextW (GetDlgItem (hCurPage, IDC_WRITESPEED), tmpStr);

  0011c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00122	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  00127	8d 4d 00	 lea	 ecx, DWORD PTR _tmpStr$132185[ebp]
  0012a	51		 push	 ecx
  0012b	68 01 04 00 00	 push	 1025			; 00000401H
  00130	52		 push	 edx
  00131	89 07		 mov	 DWORD PTR [edi], eax
  00133	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00139	50		 push	 eax
  0013a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
$LN17@UpdateSysE:

; 1472 : 		}
; 1473 : 	}
; 1474 : }

  00140	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00143	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0014a	59		 pop	 ecx
  0014b	5f		 pop	 edi
  0014c	5e		 pop	 esi
  0014d	5b		 pop	 ebx
  0014e	8b 8d c8 00 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00154	33 cd		 xor	 ecx, ebp
  00156	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015b	81 c5 cc 00 00
	00		 add	 ebp, 204		; 000000ccH
  00161	8b e5		 mov	 esp, ebp
  00163	5d		 pop	 ebp
  00164	c3		 ret	 0
$LN5@UpdateSysE:

; 1451 : 	{
; 1452 : 		UpdateProgressBarProc (0);

  00165	6a 00		 push	 0
  00167	6a 00		 push	 0
  00169	e8 00 00 00 00	 call	 _UpdateProgressBarProc
  0016e	83 c4 08	 add	 esp, 8

; 1453 : 	}
; 1454 : 	else

  00171	eb cd		 jmp	 SHORT $LN17@UpdateSysE
__catch$?UpdateSysEncProgressBar@@YAXXZ$0:

; 1443 : 	}
; 1444 : 	catch (...)
; 1445 : 	{
; 1446 : 		return;

  00173	b8 00 00 00 00	 mov	 eax, $LN17@UpdateSysE
  00178	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?UpdateSysEncProgressBar@@YAXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 2c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-212]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 8a d4 00 00
	00		 mov	 ecx, DWORD PTR [edx+212]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?UpdateSysEncProgressBar@@YAXXZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?UpdateSysEncProgressBar@@YAXXZ ENDP			; UpdateSysEncProgressBar
EXTRN	_InitProgressBar:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_InitSysEncProgressBar$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_InitSysEncProgressBar$0
__unwindtable$_InitSysEncProgressBar DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_InitSysEncProgressBar DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_InitSysEncProgressBar$2
__ehfuncinfo$_InitSysEncProgressBar DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_InitSysEncProgressBar
	DD	01H
	DD	FLAT:__tryblocktable$_InitSysEncProgressBar
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _InitSysEncProgressBar
_TEXT	SEGMENT
$T141441 = -206						; size = 94
_locBootEncStatus$ = -112				; size = 94
__$EHRec$ = -16						; size = 16
_InitSysEncProgressBar PROC				; COMDAT

; 1477 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_InitSysEncProgressBar
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1478 : 	BootEncryptionStatus locBootEncStatus;
; 1479 : 
; 1480 : 	try
; 1481 : 	{
; 1482 : 		locBootEncStatus = BootEncObj->GetStatus();

  0002e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00034	8d 85 32 ff ff
	ff		 lea	 eax, DWORD PTR $T141441[ebp]
  0003a	50		 push	 eax
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00042	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00047	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0004c	8b f0		 mov	 esi, eax
  0004e	8d 7d 90	 lea	 edi, DWORD PTR _locBootEncStatus$[ebp]
  00051	f3 a5		 rep movsd
  00053	66 a5		 movsw

; 1487 : 	}
; 1488 : 
; 1489 : 	if (locBootEncStatus.ConfiguredEncryptedAreaEnd == -1 
; 1490 : 		|| locBootEncStatus.ConfiguredEncryptedAreaStart == -1)

  00055	8b 55 b2	 mov	 edx, DWORD PTR _locBootEncStatus$[ebp+34]
  00058	8b 75 b6	 mov	 esi, DWORD PTR _locBootEncStatus$[ebp+38]
  0005b	8b ca		 mov	 ecx, edx
  0005d	23 ce		 and	 ecx, esi
  0005f	83 f9 ff	 cmp	 ecx, -1
  00062	74 67		 je	 SHORT $LN11@InitSysEnc
  00064	8b 45 aa	 mov	 eax, DWORD PTR _locBootEncStatus$[ebp+26]
  00067	23 45 ae	 and	 eax, DWORD PTR _locBootEncStatus$[ebp+30]
  0006a	83 f8 ff	 cmp	 eax, -1
  0006d	74 5c		 je	 SHORT $LN11@InitSysEnc

; 1491 : 		return;
; 1492 : 
; 1493 : 	InitProgressBar (locBootEncStatus.ConfiguredEncryptedAreaEnd 
; 1494 : 		- locBootEncStatus.ConfiguredEncryptedAreaStart + 1,
; 1495 : 		(locBootEncStatus.EncryptedAreaEnd == locBootEncStatus.EncryptedAreaStart || locBootEncStatus.EncryptedAreaEnd == -1) ?
; 1496 : 		0 :	locBootEncStatus.EncryptedAreaEnd - locBootEncStatus.EncryptedAreaStart + 1,
; 1497 : 		SystemEncryptionStatus == SYSENC_STATUS_DECRYPTING,
; 1498 : 		TRUE,
; 1499 : 		TRUE,
; 1500 : 		TRUE);

  0006f	8b 4d c2	 mov	 ecx, DWORD PTR _locBootEncStatus$[ebp+50]
  00072	8b 7d ba	 mov	 edi, DWORD PTR _locBootEncStatus$[ebp+42]
  00075	8b 45 c6	 mov	 eax, DWORD PTR _locBootEncStatus$[ebp+54]
  00078	3b cf		 cmp	 ecx, edi
  0007a	75 05		 jne	 SHORT $LN13@InitSysEnc
  0007c	3b 45 be	 cmp	 eax, DWORD PTR _locBootEncStatus$[ebp+46]
  0007f	74 18		 je	 SHORT $LN6@InitSysEnc
$LN13@InitSysEnc:
  00081	8b d9		 mov	 ebx, ecx
  00083	23 d8		 and	 ebx, eax
  00085	83 fb ff	 cmp	 ebx, -1
  00088	74 0f		 je	 SHORT $LN6@InitSysEnc
  0008a	2b cf		 sub	 ecx, edi
  0008c	1b 45 be	 sbb	 eax, DWORD PTR _locBootEncStatus$[ebp+46]
  0008f	83 c1 01	 add	 ecx, 1
  00092	83 d0 00	 adc	 eax, 0
  00095	8b f8		 mov	 edi, eax
  00097	eb 04		 jmp	 SHORT $LN7@InitSysEnc
$LN6@InitSysEnc:
  00099	33 c9		 xor	 ecx, ecx
  0009b	33 ff		 xor	 edi, edi
$LN7@InitSysEnc:
  0009d	33 c0		 xor	 eax, eax
  0009f	81 3d 00 00 00
	00 58 02 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 600 ; 00000258H
  000a9	6a 01		 push	 1
  000ab	0f 94 c0	 sete	 al
  000ae	2b 55 aa	 sub	 edx, DWORD PTR _locBootEncStatus$[ebp+26]
  000b1	6a 01		 push	 1
  000b3	1b 75 ae	 sbb	 esi, DWORD PTR _locBootEncStatus$[ebp+30]
  000b6	6a 01		 push	 1
  000b8	83 c2 01	 add	 edx, 1
  000bb	83 d6 00	 adc	 esi, 0
  000be	50		 push	 eax
  000bf	57		 push	 edi
  000c0	51		 push	 ecx
  000c1	56		 push	 esi
  000c2	52		 push	 edx
  000c3	e8 00 00 00 00	 call	 _InitProgressBar
  000c8	83 c4 20	 add	 esp, 32			; 00000020H
$LN11@InitSysEnc:

; 1501 : }

  000cb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d5	59		 pop	 ecx
  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
__catch$_InitSysEncProgressBar$0:

; 1483 : 	}
; 1484 : 	catch (...)
; 1485 : 	{
; 1486 : 		return;

  000dd	b8 00 00 00 00	 mov	 eax, $LN11@InitSysEnc
  000e2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_InitSysEncProgressBar:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 2c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-212]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_InitSysEncProgressBar
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_InitSysEncProgressBar ENDP
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_0BO@DMHMPBKC@PROCESSED_PORTION_100_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_0BJ@HKENJBII@PROGRESS_STATUS_FINISHED?$AA@ ; `string'
PUBLIC	??_C@_0BH@LLAADOBF@PROGRESS_STATUS_PAUSED?$AA@	; `string'
PUBLIC	??_C@_06PPGAKMJI@RESUME?$AA@			; `string'
PUBLIC	??_C@_09PJBBBIIP@IDC_PAUSE?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DMHMPBKC@PROCESSED_PORTION_100_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BO@DMHMPBKC@PROCESSED_PORTION_100_PERCENT?$AA@ DB 'PROCESSED_PORTI'
	DB	'ON_100_PERCENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HKENJBII@PROGRESS_STATUS_FINISHED?$AA@
CONST	SEGMENT
??_C@_0BJ@HKENJBII@PROGRESS_STATUS_FINISHED?$AA@ DB 'PROGRESS_STATUS_FINI'
	DB	'SHED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LLAADOBF@PROGRESS_STATUS_PAUSED?$AA@
CONST	SEGMENT
??_C@_0BH@LLAADOBF@PROGRESS_STATUS_PAUSED?$AA@ DB 'PROGRESS_STATUS_PAUSED'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06PPGAKMJI@RESUME?$AA@
CONST	SEGMENT
??_C@_06PPGAKMJI@RESUME?$AA@ DB 'RESUME', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PJBBBIIP@IDC_PAUSE?$AA@
CONST	SEGMENT
??_C@_09PJBBBIIP@IDC_PAUSE?$AA@ DB 'IDC_PAUSE', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?UpdateSysEncControls@@YAXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?UpdateSysEncControls@@YAXXZ$0
__unwindtable$?UpdateSysEncControls@@YAXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?UpdateSysEncControls@@YAXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?UpdateSysEncControls@@YAXXZ$2
__ehfuncinfo$?UpdateSysEncControls@@YAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?UpdateSysEncControls@@YAXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?UpdateSysEncControls@@YAXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?UpdateSysEncControls@@YAXXZ
_TEXT	SEGMENT
$T141462 = -206						; size = 94
_locBootEncStatus$ = -112				; size = 94
__$EHRec$ = -16						; size = 16
_tmpStr$132209 = 0					; size = 200
__$ArrayPad$ = 200					; size = 4
?UpdateSysEncControls@@YAXXZ PROC			; UpdateSysEncControls, COMDAT

; 1504 : {

  00000	55		 push	 ebp
  00001	8d ac 24 34 ff
	ff ff		 lea	 ebp, DWORD PTR [esp-204]
  00008	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?UpdateSysEncControls@@YAXXZ
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 85 c8 00 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1505 : 	BootEncryptionStatus locBootEncStatus;
; 1506 : 
; 1507 : 	try
; 1508 : 	{
; 1509 : 		locBootEncStatus = BootEncObj->GetStatus();

  0003f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00045	8d 85 32 ff ff
	ff		 lea	 eax, DWORD PTR $T141462[ebp]
  0004b	50		 push	 eax
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00053	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00058	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0005d	8b f0		 mov	 esi, eax
  0005f	8d 7d 90	 lea	 edi, DWORD PTR _locBootEncStatus$[ebp]
  00062	f3 a5		 rep movsd
  00064	66 a5		 movsw

; 1514 : 	}
; 1515 : 
; 1516 : 	EnableWindow (GetDlgItem (hCurPage, IDC_WIPE_MODE), 
; 1517 : 		!locBootEncStatus.SetupInProgress 
; 1518 : 		&& SystemEncryptionStatus == SYSENC_STATUS_ENCRYPTING);

  00066	8b 75 ce	 mov	 esi, DWORD PTR _locBootEncStatus$[ebp+62]
  00069	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00070	85 f6		 test	 esi, esi
  00072	75 11		 jne	 SHORT $LN7@UpdateSysE@2
  00074	81 3d 00 00 00
	00 90 01 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 400 ; 00000190H
  0007e	75 05		 jne	 SHORT $LN7@UpdateSysE@2
  00080	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00083	eb 02		 jmp	 SHORT $LN8@UpdateSysE@2
$LN7@UpdateSysE@2:
  00085	33 c0		 xor	 eax, eax
$LN8@UpdateSysE@2:
  00087	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  0008d	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetDlgItem@8
  00093	50		 push	 eax
  00094	68 3d 04 00 00	 push	 1085			; 0000043dH
  00099	51		 push	 ecx
  0009a	ff d3		 call	 ebx
  0009c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  000a2	50		 push	 eax
  000a3	ff d7		 call	 edi

; 1519 : 
; 1520 : 	SetWindowTextW (GetDlgItem (hCurPage, IDC_PAUSE),
; 1521 : 		GetString (locBootEncStatus.SetupInProgress ? "IDC_PAUSE" : "RESUME"));

  000a5	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09PJBBBIIP@IDC_PAUSE?$AA@
  000aa	85 f6		 test	 esi, esi
  000ac	75 05		 jne	 SHORT $LN10@UpdateSysE@2
  000ae	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06PPGAKMJI@RESUME?$AA@
$LN10@UpdateSysE@2:
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 _GetString
  000b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  000bf	83 c4 04	 add	 esp, 4
  000c2	50		 push	 eax
  000c3	68 41 04 00 00	 push	 1089			; 00000441H
  000c8	52		 push	 edx
  000c9	ff d3		 call	 ebx
  000cb	50		 push	 eax
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 1522 : 
; 1523 : 	EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), !locBootEncStatus.SetupInProgress && !bFirstSysEncResumeDone);

  000d2	85 f6		 test	 esi, esi
  000d4	75 0d		 jne	 SHORT $LN11@UpdateSysE@2
  000d6	39 35 00 00 00
	00		 cmp	 DWORD PTR ?bFirstSysEncResumeDone@@3HA, esi ; bFirstSysEncResumeDone
  000dc	75 05		 jne	 SHORT $LN11@UpdateSysE@2
  000de	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  000e1	eb 02		 jmp	 SHORT $LN12@UpdateSysE@2
$LN11@UpdateSysE@2:
  000e3	33 c0		 xor	 eax, eax
$LN12@UpdateSysE@2:
  000e5	50		 push	 eax
  000e6	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  000eb	68 10 04 00 00	 push	 1040			; 00000410H
  000f0	50		 push	 eax
  000f1	ff d3		 call	 ebx
  000f3	50		 push	 eax
  000f4	ff d7		 call	 edi

; 1524 : 
; 1525 : 	if (!locBootEncStatus.SetupInProgress)

  000f6	85 f6		 test	 esi, esi
  000f8	0f 85 f4 00 00
	00		 jne	 $LN20@UpdateSysE@2

; 1526 : 	{
; 1527 : 		wchar_t tmpStr[100];
; 1528 : 
; 1529 : 		wcscpy (tmpStr, GetString ((SysDriveOrPartitionFullyEncrypted (TRUE) || !locBootEncStatus.DriveMounted) ?
; 1530 : 			"PROGRESS_STATUS_FINISHED" : "PROGRESS_STATUS_PAUSED"));

  000fe	6a 01		 push	 1
  00100	e8 00 00 00 00	 call	 ?SysDriveOrPartitionFullyEncrypted@@YAHH@Z ; SysDriveOrPartitionFullyEncrypted
  00105	83 c4 04	 add	 esp, 4
  00108	85 c0		 test	 eax, eax
  0010a	75 0a		 jne	 SHORT $LN13@UpdateSysE@2
  0010c	39 45 96	 cmp	 DWORD PTR _locBootEncStatus$[ebp+6], eax
  0010f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BH@LLAADOBF@PROGRESS_STATUS_PAUSED?$AA@
  00114	75 05		 jne	 SHORT $LN14@UpdateSysE@2
$LN13@UpdateSysE@2:
  00116	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BJ@HKENJBII@PROGRESS_STATUS_FINISHED?$AA@
$LN14@UpdateSysE@2:
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 _GetString
  00121	83 c4 04	 add	 esp, 4
  00124	8d 55 00	 lea	 edx, DWORD PTR _tmpStr$132209[ebp]
$LL15@UpdateSysE@2:
  00127	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0012a	66 89 0a	 mov	 WORD PTR [edx], cx
  0012d	83 c0 02	 add	 eax, 2
  00130	83 c2 02	 add	 edx, 2
  00133	66 85 c9	 test	 cx, cx
  00136	75 ef		 jne	 SHORT $LL15@UpdateSysE@2

; 1531 : 		wcscat (tmpStr, L" ");

  00138	8d 7d 00	 lea	 edi, DWORD PTR _tmpStr$132209[ebp]
  0013b	83 c7 fe	 add	 edi, -2			; fffffffeH
  0013e	8b ff		 npad	 2
$LL24@UpdateSysE@2:
  00140	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  00144	83 c7 02	 add	 edi, 2
  00147	66 85 c0	 test	 ax, ax
  0014a	75 f4		 jne	 SHORT $LL24@UpdateSysE@2

; 1532 : 
; 1533 : 		// Status
; 1534 : 		SetWindowTextW (GetDlgItem (hCurPage, IDC_WRITESPEED), tmpStr);

  0014c	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00151	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  00157	8d 55 00	 lea	 edx, DWORD PTR _tmpStr$132209[ebp]
  0015a	52		 push	 edx
  0015b	68 01 04 00 00	 push	 1025			; 00000401H
  00160	50		 push	 eax
  00161	89 0f		 mov	 DWORD PTR [edi], ecx
  00163	ff d3		 call	 ebx
  00165	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextW@8
  0016b	50		 push	 eax
  0016c	ff d6		 call	 esi

; 1535 : 
; 1536 : 		if (SysDriveOrPartitionFullyEncrypted (TRUE) || SystemEncryptionStatus == SYSENC_STATUS_NONE)

  0016e	6a 01		 push	 1
  00170	e8 00 00 00 00	 call	 ?SysDriveOrPartitionFullyEncrypted@@YAHH@Z ; SysDriveOrPartitionFullyEncrypted
  00175	83 c4 04	 add	 esp, 4
  00178	85 c0		 test	 eax, eax
  0017a	75 08		 jne	 SHORT $LN1@UpdateSysE@2
  0017c	39 05 00 00 00
	00		 cmp	 DWORD PTR _SystemEncryptionStatus, eax
  00182	75 54		 jne	 SHORT $LN2@UpdateSysE@2
$LN1@UpdateSysE@2:

; 1537 : 		{
; 1538 : 			wcscpy (tmpStr, GetString ("PROCESSED_PORTION_100_PERCENT"));

  00184	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@DMHMPBKC@PROCESSED_PORTION_100_PERCENT?$AA@
  00189	e8 00 00 00 00	 call	 _GetString
  0018e	83 c4 04	 add	 esp, 4
  00191	8d 55 00	 lea	 edx, DWORD PTR _tmpStr$132209[ebp]
$LL16@UpdateSysE@2:
  00194	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00197	66 89 0a	 mov	 WORD PTR [edx], cx
  0019a	83 c0 02	 add	 eax, 2
  0019d	83 c2 02	 add	 edx, 2
  001a0	66 85 c9	 test	 cx, cx
  001a3	75 ef		 jne	 SHORT $LL16@UpdateSysE@2

; 1539 : 			wcscat (tmpStr, L" ");

  001a5	8d 7d 00	 lea	 edi, DWORD PTR _tmpStr$132209[ebp]
  001a8	83 c7 fe	 add	 edi, -2			; fffffffeH
  001ab	eb 03 8d 49 00	 npad	 5
$LL25@UpdateSysE@2:
  001b0	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  001b4	83 c7 02	 add	 edi, 2
  001b7	66 85 c0	 test	 ax, ax
  001ba	75 f4		 jne	 SHORT $LL25@UpdateSysE@2

; 1540 : 
; 1541 : 			SetWindowTextW (GetDlgItem (hCurPage, IDC_BYTESWRITTEN), tmpStr);

  001bc	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  001c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  001c7	8d 55 00	 lea	 edx, DWORD PTR _tmpStr$132209[ebp]
  001ca	52		 push	 edx
  001cb	68 00 04 00 00	 push	 1024			; 00000400H
  001d0	50		 push	 eax
  001d1	89 0f		 mov	 DWORD PTR [edi], ecx
  001d3	ff d3		 call	 ebx
  001d5	50		 push	 eax
  001d6	ff d6		 call	 esi
$LN2@UpdateSysE@2:

; 1542 : 		}
; 1543 : 
; 1544 : 		SetWindowTextA(GetDlgItem (hCurPage, IDC_TIMEREMAIN), " ");

  001d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  001de	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5?$AA@
  001e3	68 03 04 00 00	 push	 1027			; 00000403H
  001e8	51		 push	 ecx
  001e9	ff d3		 call	 ebx
  001eb	50		 push	 eax
  001ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8
$LN20@UpdateSysE@2:

; 1545 : 	}
; 1546 : }

  001f2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001f5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001fc	59		 pop	 ecx
  001fd	5f		 pop	 edi
  001fe	5e		 pop	 esi
  001ff	5b		 pop	 ebx
  00200	8b 8d c8 00 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00206	33 cd		 xor	 ecx, ebp
  00208	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020d	81 c5 cc 00 00
	00		 add	 ebp, 204		; 000000ccH
  00213	8b e5		 mov	 esp, ebp
  00215	5d		 pop	 ebp
  00216	c3		 ret	 0
__catch$?UpdateSysEncControls@@YAXXZ$0:

; 1510 : 	}
; 1511 : 	catch (...)
; 1512 : 	{
; 1513 : 		return;

  00217	b8 00 00 00 00	 mov	 eax, $LN20@UpdateSysE@2
  0021c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?UpdateSysEncControls@@YAXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 2c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-212]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 8a d4 00 00
	00		 mov	 ecx, DWORD PTR [edx+212]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?UpdateSysEncControls@@YAXXZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?UpdateSysEncControls@@YAXXZ ENDP			; UpdateSysEncControls
PUBLIC	??_C@_0CG@OIGJDCBH@FAILED_TO_INTERRUPT_SYSTEM_ENCRY@ ; `string'
EXTRN	__imp__SetTimer@16:PROC
EXTRN	?AbortSetup@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::AbortSetup
;	COMDAT ??_C@_0CG@OIGJDCBH@FAILED_TO_INTERRUPT_SYSTEM_ENCRY@
CONST	SEGMENT
??_C@_0CG@OIGJDCBH@FAILED_TO_INTERRUPT_SYSTEM_ENCRY@ DB 'FAILED_TO_INTERR'
	DB	'UPT_SYSTEM_ENCRYPTION', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?SysEncPause@@YAXXZ$5 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	060H
	DD	FLAT:__catch$?SysEncPause@@YAXXZ$2
__catchsym$?SysEncPause@@YAXXZ$4 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	064H
	DD	FLAT:__catch$?SysEncPause@@YAXXZ$0
__unwindtable$?SysEncPause@@YAXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?SysEncPause@@YAXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?SysEncPause@@YAXXZ
	DD	02H
	DD	FLAT:__tryblocktable$?SysEncPause@@YAXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?SysEncPause@@YAXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?SysEncPause@@YAXXZ$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?SysEncPause@@YAXXZ$5
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?SysEncPause@@YAXXZ
_TEXT	SEGMENT
$T141495 = -110						; size = 94
$T141494 = -110						; size = 94
$T141493 = -110						; size = 94
__$EHRec$ = -16						; size = 16
_locBootEncStatus$ = 0					; size = 94
_e$132233 = 96						; size = 4
_e$132223 = 100						; size = 4
?SysEncPause@@YAXXZ PROC				; SysEncPause, COMDAT

; 1549 : {

  00000	55		 push	 ebp
  00001	8d 6c 24 98	 lea	 ebp, DWORD PTR [esp-104]
  00005	83 ec 68	 sub	 esp, 104		; 00000068H
  00008	6a ff		 push	 -1
  0000a	68 00 00 00 00	 push	 __ehhandler$?SysEncPause@@YAXXZ
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 64	 sub	 esp, 100		; 00000064H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	33 c5		 xor	 eax, ebp
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1550 : 	BootEncryptionStatus locBootEncStatus;
; 1551 : 
; 1552 : 	if (CreateSysEncMutex ())

  00030	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00035	85 c0		 test	 eax, eax
  00037	0f 84 90 01 00
	00		 je	 $LN9@SysEncPaus

; 1553 : 	{
; 1554 : 		EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), FALSE);

  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00042	6a 00		 push	 0
  00044	68 41 04 00 00	 push	 1089			; 00000441H
  00049	50		 push	 eax
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00050	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  00056	50		 push	 eax
  00057	ff d3		 call	 ebx

; 1555 : 
; 1556 : 		try
; 1557 : 		{
; 1558 : 			locBootEncStatus = BootEncObj->GetStatus();

  00059	8d 4d 92	 lea	 ecx, DWORD PTR $T141493[ebp]
  0005c	51		 push	 ecx
  0005d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00063	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0006a	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  0006f	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00074	8b f0		 mov	 esi, eax
  00076	8d 7d 00	 lea	 edi, DWORD PTR _locBootEncStatus$[ebp]
  00079	f3 a5		 rep movsd
  0007b	66 a5		 movsw

; 1566 : 		}
; 1567 : 
; 1568 : 		if (!locBootEncStatus.SetupInProgress)

  0007d	83 7d 3e 00	 cmp	 DWORD PTR _locBootEncStatus$[ebp+62], 0
  00081	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00088	75 1c		 jne	 SHORT $LN7@SysEncPaus

; 1569 : 		{
; 1570 : 			EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), TRUE);

  0008a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00090	6a 01		 push	 1
  00092	68 41 04 00 00	 push	 1089			; 00000441H
  00097	52		 push	 edx
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0009e	50		 push	 eax
  0009f	ff d3		 call	 ebx

; 1571 : 			return;

  000a1	e9 34 01 00 00	 jmp	 $LN1@SysEncPaus
$LN7@SysEncPaus:

; 1572 : 		}
; 1573 : 
; 1574 : 		WaitCursor ();

  000a6	e8 00 00 00 00	 call	 _WaitCursor

; 1575 : 
; 1576 : 		try
; 1577 : 		{
; 1578 : 			int attempts = SYSENC_PAUSE_RETRIES;
; 1579 : 
; 1580 : 			BootEncObj->AbortSetup ();

  000ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000b1	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  000b8	bb c8 00 00 00	 mov	 ebx, 200		; 000000c8H
  000bd	e8 00 00 00 00	 call	 ?AbortSetup@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::AbortSetup

; 1581 : 
; 1582 : 			locBootEncStatus = BootEncObj->GetStatus();

  000c2	8d 45 92	 lea	 eax, DWORD PTR $T141494[ebp]
  000c5	50		 push	 eax
$LN26@SysEncPaus:
  000c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000cc	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  000d1	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  000d6	8d 7d 00	 lea	 edi, DWORD PTR _locBootEncStatus$[ebp]
  000d9	8b f0		 mov	 esi, eax
  000db	f3 a5		 rep movsd
  000dd	66 a5		 movsw

; 1583 : 
; 1584 : 			while (locBootEncStatus.SetupInProgress && attempts > 0)

  000df	83 7d 3e 00	 cmp	 DWORD PTR _locBootEncStatus$[ebp+62], 0
  000e3	74 13		 je	 SHORT $LN23@SysEncPaus
  000e5	85 db		 test	 ebx, ebx
  000e7	7e 1a		 jle	 SHORT $LN3@SysEncPaus

; 1585 : 			{
; 1586 : 				Sleep (SYSENC_PAUSE_RETRY_INTERVAL);

  000e9	6a 64		 push	 100			; 00000064H
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 1587 : 				attempts--;
; 1588 : 				locBootEncStatus = BootEncObj->GetStatus();

  000f1	8d 4d 92	 lea	 ecx, DWORD PTR $T141495[ebp]
  000f4	4b		 dec	 ebx
  000f5	51		 push	 ecx

; 1589 : 			}

  000f6	eb ce		 jmp	 SHORT $LN26@SysEncPaus
$LN23@SysEncPaus:

; 1590 : 
; 1591 : 			if (!locBootEncStatus.SetupInProgress)
; 1592 : 				BootEncObj->CheckEncryptionSetupResult ();

  000f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000fe	e8 00 00 00 00	 call	 ?CheckEncryptionSetupResult@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::CheckEncryptionSetupResult
$LN3@SysEncPaus:
  00103	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN19@SysEncPaus:

; 1599 : 
; 1600 : 		NormalCursor ();

  0010a	e8 00 00 00 00	 call	 _NormalCursor

; 1601 : 
; 1602 : 		if (locBootEncStatus.SetupInProgress)

  0010f	83 7d 3e 00	 cmp	 DWORD PTR _locBootEncStatus$[ebp+62], 0
  00113	74 56		 je	 SHORT $LN2@SysEncPaus

; 1603 : 		{
; 1604 : 			SetTimer (MainDlg, TIMER_ID_SYSENC_PROGRESS, TIMER_INTERVAL_SYSENC_PROGRESS, NULL);

  00115	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0011a	6a 00		 push	 0
  0011c	6a 1e		 push	 30			; 0000001eH
  0011e	68 00 01 00 00	 push	 256			; 00000100H
  00123	50		 push	 eax
  00124	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16

; 1605 : 			EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), TRUE);

  0012a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  00130	6a 01		 push	 1
  00132	68 41 04 00 00	 push	 1089			; 00000441H
  00137	51		 push	 ecx
  00138	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0013e	50		 push	 eax
  0013f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 1606 : 			Error ("FAILED_TO_INTERRUPT_SYSTEM_ENCRYPTION");

  00145	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@OIGJDCBH@FAILED_TO_INTERRUPT_SYSTEM_ENCRY@

; 1607 : 			return;

  0014a	e9 83 00 00 00	 jmp	 $LN27@SysEncPaus
__catch$?SysEncPause@@YAXXZ$2:

; 1593 : 
; 1594 : 		}
; 1595 : 		catch (Exception &e)
; 1596 : 		{
; 1597 : 			e.Show (MainDlg);

  0014f	8b 4d 60	 mov	 ecx, DWORD PTR _e$132233[ebp]
  00152	8b 11		 mov	 edx, DWORD PTR [ecx]
  00154	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00159	8b 12		 mov	 edx, DWORD PTR [edx]
  0015b	50		 push	 eax
  0015c	ff d2		 call	 edx

; 1598 : 		}

  0015e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00165	b8 00 00 00 00	 mov	 eax, $LN19@SysEncPaus
  0016a	c3		 ret	 0
$LN2@SysEncPaus:

; 1608 : 		}
; 1609 : 		
; 1610 : 		UpdateSysEncControls ();

  0016b	e8 00 00 00 00	 call	 ?UpdateSysEncControls@@YAXXZ ; UpdateSysEncControls

; 1611 : 		EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), TRUE);

  00170	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00176	6a 01		 push	 1
  00178	68 41 04 00 00	 push	 1089			; 00000441H
  0017d	52		 push	 edx
  0017e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00184	50		 push	 eax
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 1612 : 	}
; 1613 : 	else

  0018b	eb 4d		 jmp	 SHORT $LN1@SysEncPaus
__catch$?SysEncPause@@YAXXZ$0:

; 1559 : 		}
; 1560 : 		catch (Exception &e)
; 1561 : 		{
; 1562 : 			e.Show (MainDlg);

  0018d	8b 4d 64	 mov	 ecx, DWORD PTR _e$132223[ebp]
  00190	8b 01		 mov	 eax, DWORD PTR [ecx]
  00192	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00198	8b 00		 mov	 eax, DWORD PTR [eax]
  0019a	52		 push	 edx
  0019b	ff d0		 call	 eax

; 1563 : 			Error ("ERR_GETTING_SYSTEM_ENCRYPTION_STATUS");

  0019d	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@
  001a2	e8 00 00 00 00	 call	 _Error

; 1564 : 			EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), TRUE);

  001a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  001ad	83 c4 04	 add	 esp, 4
  001b0	6a 01		 push	 1
  001b2	68 41 04 00 00	 push	 1089			; 00000441H
  001b7	51		 push	 ecx
  001b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  001be	50		 push	 eax
  001bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 1565 : 			return;

  001c5	b8 00 00 00 00	 mov	 eax, $LN17@SysEncPaus
  001ca	c3		 ret	 0
$LN17@SysEncPaus:
  001cb	eb 0d		 jmp	 SHORT $LN1@SysEncPaus
$LN9@SysEncPaus:

; 1614 : 		Error ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  001cd	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
$LN27@SysEncPaus:
  001d2	e8 00 00 00 00	 call	 _Error
  001d7	83 c4 04	 add	 esp, 4
$LN1@SysEncPaus:

; 1615 : }

  001da	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001dd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e4	59		 pop	 ecx
  001e5	5f		 pop	 edi
  001e6	5e		 pop	 esi
  001e7	5b		 pop	 ebx
  001e8	83 c5 68	 add	 ebp, 104		; 00000068H
  001eb	8b e5		 mov	 esp, ebp
  001ed	5d		 pop	 ebp
  001ee	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?SysEncPause@@YAXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SysEncPause@@YAXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SysEncPause@@YAXXZ ENDP				; SysEncPause
PUBLIC	??_C@_0CD@HEMAICHN@FAILED_TO_RESUME_SYSTEM_ENCRYPTI@ ; `string'
EXTRN	?StartEncryption@BootEncryption@CipherShed@@QAEXW4WipeAlgorithmId@@_N@Z:PROC ; CipherShed::BootEncryption::StartEncryption
EXTRN	__imp__SetThreadExecutionState@4:PROC
;	COMDAT ??_C@_0CD@HEMAICHN@FAILED_TO_RESUME_SYSTEM_ENCRYPTI@
CONST	SEGMENT
??_C@_0CD@HEMAICHN@FAILED_TO_RESUME_SYSTEM_ENCRYPTI@ DB 'FAILED_TO_RESUME'
	DB	'_SYSTEM_ENCRYPTION', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?SysEncResume@@YAXXZ$5 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffe8H
	DD	FLAT:__catch$?SysEncResume@@YAXXZ$2
__catchsym$?SysEncResume@@YAXXZ$4 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?SysEncResume@@YAXXZ$0
__unwindtable$?SysEncResume@@YAXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?SysEncResume@@YAXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?SysEncResume@@YAXXZ
	DD	02H
	DD	FLAT:__tryblocktable$?SysEncResume@@YAXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?SysEncResume@@YAXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?SysEncResume@@YAXXZ$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?SysEncResume@@YAXXZ$5
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?SysEncResume@@YAXXZ
_TEXT	SEGMENT
$T141522 = -214						; size = 94
_locBootEncStatus$ = -120				; size = 94
_e$132256 = -24						; size = 4
_e$132244 = -20						; size = 4
__$EHRec$ = -16						; size = 16
?SysEncResume@@YAXXZ PROC				; SysEncResume, COMDAT

; 1619 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SysEncResume@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1620 : 	BootEncryptionStatus locBootEncStatus;
; 1621 : 
; 1622 : 	if (CreateSysEncMutex ())

  0002e	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00033	85 c0		 test	 eax, eax
  00035	0f 84 34 02 00
	00		 je	 $LN11@SysEncResu

; 1623 : 	{
; 1624 : 		EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), FALSE);

  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00040	6a 00		 push	 0
  00042	68 41 04 00 00	 push	 1089			; 00000441H
  00047	50		 push	 eax
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0004e	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  00054	50		 push	 eax
  00055	ff d3		 call	 ebx

; 1625 : 
; 1626 : 		try
; 1627 : 		{
; 1628 : 			locBootEncStatus = BootEncObj->GetStatus();

  00057	8d 8d 2a ff ff
	ff		 lea	 ecx, DWORD PTR $T141522[ebp]
  0005d	51		 push	 ecx
  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0006b	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00070	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00075	8b f0		 mov	 esi, eax
  00077	8d 7d 88	 lea	 edi, DWORD PTR _locBootEncStatus$[ebp]
  0007a	f3 a5		 rep movsd
  0007c	66 a5		 movsw
  0007e	83 ce ff	 or	 esi, -1

; 1636 : 		}
; 1637 : 
; 1638 : 		if (locBootEncStatus.SetupInProgress)

  00081	83 7d c6 00	 cmp	 DWORD PTR _locBootEncStatus$[ebp+62], 0
  00085	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
  00088	74 58		 je	 SHORT $LN9@SysEncResu

; 1639 : 		{
; 1640 : 			// Prevent the OS from entering Sleep mode when idle
; 1641 : 			SetThreadExecutionState (ES_CONTINUOUS | ES_SYSTEM_REQUIRED);

  0008a	68 01 00 00 80	 push	 -2147483647		; 80000001H
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetThreadExecutionState@4

; 1642 : 
; 1643 : 			bSystemEncryptionInProgress = TRUE;

  00095	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bSystemEncryptionInProgress@@3HA, 1 ; bSystemEncryptionInProgress

; 1644 : 			UpdateSysEncControls ();

  0009f	e8 00 00 00 00	 call	 ?UpdateSysEncControls@@YAXXZ ; UpdateSysEncControls

; 1645 : 			SetTimer (MainDlg, TIMER_ID_SYSENC_PROGRESS, TIMER_INTERVAL_SYSENC_PROGRESS, NULL);

  000a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  000aa	6a 00		 push	 0
  000ac	6a 1e		 push	 30			; 0000001eH
  000ae	68 00 01 00 00	 push	 256			; 00000100H
  000b3	52		 push	 edx
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16

; 1646 : 			EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), TRUE);

  000ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  000bf	6a 01		 push	 1
  000c1	68 41 04 00 00	 push	 1089			; 00000441H
  000c6	50		 push	 eax
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  000cd	50		 push	 eax
  000ce	ff d3		 call	 ebx

; 1701 : }

  000d0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000d3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000da	59		 pop	 ecx
  000db	5f		 pop	 edi
  000dc	5e		 pop	 esi
  000dd	5b		 pop	 ebx
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c3		 ret	 0
$LN9@SysEncResu:

; 1647 : 			return;
; 1648 : 		}
; 1649 : 
; 1650 : 		bSystemEncryptionInProgress = FALSE;

  000e2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bSystemEncryptionInProgress@@3HA, 0 ; bSystemEncryptionInProgress

; 1651 : 		WaitCursor ();

  000ec	e8 00 00 00 00	 call	 _WaitCursor

; 1652 : 
; 1653 : 		try
; 1654 : 		{
; 1655 : 			switch (SystemEncryptionStatus)

  000f1	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  000f6	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  000fd	3d 90 01 00 00	 cmp	 eax, 400		; 00000190H
  00102	74 2e		 je	 SHORT $LN5@SysEncResu
  00104	3d 58 02 00 00	 cmp	 eax, 600		; 00000258H
  00109	75 48		 jne	 SHORT $LN6@SysEncResu

; 1660 : 				break;
; 1661 : 
; 1662 : 			case SYSENC_STATUS_DECRYPTING:
; 1663 : 
; 1664 : 				if (locBootEncStatus.DriveMounted)	// If the drive is not encrypted we will just deinstall

  0010b	83 7d 8e 00	 cmp	 DWORD PTR _locBootEncStatus$[ebp+6], 0
  0010f	74 42		 je	 SHORT $LN6@SysEncResu

; 1665 : 					BootEncObj->StartDecryption (DiscardUnreadableEncryptedSectors);	

  00111	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?DiscardUnreadableEncryptedSectors@@3HC ; DiscardUnreadableEncryptedSectors
  00117	51		 push	 ecx
  00118	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0011e	e8 00 00 00 00	 call	 ?StartDecryption@BootEncryption@CipherShed@@QAEXH@Z ; CipherShed::BootEncryption::StartDecryption

; 1666 : 
; 1667 : 				break;
; 1668 : 			}
; 1669 : 
; 1670 : 			bSystemEncryptionInProgress = TRUE;

  00123	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bSystemEncryptionInProgress@@3HA, 1 ; bSystemEncryptionInProgress
  0012d	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
  00130	eb 53		 jmp	 SHORT $LN21@SysEncResu
$LN5@SysEncResu:

; 1656 : 			{
; 1657 : 			case SYSENC_STATUS_ENCRYPTING:
; 1658 : 
; 1659 : 				BootEncObj->StartEncryption (nWipeMode, bTryToCorrectReadErrors ? true : false);	

  00132	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bTryToCorrectReadErrors@@3HC ; bTryToCorrectReadErrors
  00138	85 d2		 test	 edx, edx
  0013a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _nWipeMode
  00140	0f 95 c0	 setne	 al
  00143	0f b6 c8	 movzx	 ecx, al
  00146	51		 push	 ecx
  00147	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0014d	52		 push	 edx
  0014e	e8 00 00 00 00	 call	 ?StartEncryption@BootEncryption@CipherShed@@QAEXW4WipeAlgorithmId@@_N@Z ; CipherShed::BootEncryption::StartEncryption
$LN6@SysEncResu:

; 1666 : 
; 1667 : 				break;
; 1668 : 			}
; 1669 : 
; 1670 : 			bSystemEncryptionInProgress = TRUE;

  00153	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bSystemEncryptionInProgress@@3HA, 1 ; bSystemEncryptionInProgress
  0015d	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
  00160	eb 23		 jmp	 SHORT $LN21@SysEncResu
__catch$?SysEncResume@@YAXXZ$2:

; 1671 : 		}
; 1672 : 		catch (Exception &e)
; 1673 : 		{
; 1674 : 			e.Show (MainDlg);

  00162	8b 4d e8	 mov	 ecx, DWORD PTR _e$132256[ebp]
  00165	8b 01		 mov	 eax, DWORD PTR [ecx]
  00167	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0016d	8b 00		 mov	 eax, DWORD PTR [eax]
  0016f	52		 push	 edx
  00170	ff d0		 call	 eax

; 1675 : 		}

  00172	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00179	b8 00 00 00 00	 mov	 eax, $LN24@SysEncResu
  0017e	c3		 ret	 0
$LN24@SysEncResu:
  0017f	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
$LN21@SysEncResu:

; 1676 : 
; 1677 : 		NormalCursor ();

  00185	e8 00 00 00 00	 call	 _NormalCursor

; 1678 : 
; 1679 : 		if (!bSystemEncryptionInProgress)

  0018a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bSystemEncryptionInProgress@@3HA, 0 ; bSystemEncryptionInProgress
  00191	75 2c		 jne	 SHORT $LN2@SysEncResu

; 1680 : 		{
; 1681 : 			// Allow the OS to enter Sleep mode when idle
; 1682 : 			SetThreadExecutionState (ES_CONTINUOUS);

  00193	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00198	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetThreadExecutionState@4

; 1683 : 
; 1684 : 			EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), TRUE);

  0019e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  001a4	6a 01		 push	 1
  001a6	68 41 04 00 00	 push	 1089			; 00000441H
  001ab	51		 push	 ecx
  001ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  001b2	50		 push	 eax
  001b3	ff d3		 call	 ebx

; 1685 : 			Error ("FAILED_TO_RESUME_SYSTEM_ENCRYPTION");

  001b5	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@HEMAICHN@FAILED_TO_RESUME_SYSTEM_ENCRYPTI@

; 1686 : 			return;

  001ba	e9 b5 00 00 00	 jmp	 $LN26@SysEncResu
$LN2@SysEncResu:

; 1687 : 		}
; 1688 : 
; 1689 : 		// Prevent the OS from entering Sleep mode when idle
; 1690 : 		SetThreadExecutionState (ES_CONTINUOUS | ES_SYSTEM_REQUIRED);

  001bf	68 01 00 00 80	 push	 -2147483647		; 80000001H
  001c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetThreadExecutionState@4

; 1691 : 
; 1692 : 		bFirstSysEncResumeDone = TRUE;

  001ca	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bFirstSysEncResumeDone@@3HA, 1 ; bFirstSysEncResumeDone

; 1693 : 		InitSysEncProgressBar ();

  001d4	e8 00 00 00 00	 call	 _InitSysEncProgressBar

; 1694 : 		UpdateSysEncProgressBar ();

  001d9	e8 00 00 00 00	 call	 ?UpdateSysEncProgressBar@@YAXXZ ; UpdateSysEncProgressBar

; 1695 : 		UpdateSysEncControls ();

  001de	e8 00 00 00 00	 call	 ?UpdateSysEncControls@@YAXXZ ; UpdateSysEncControls

; 1696 : 		EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), TRUE);

  001e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  001e9	6a 01		 push	 1
  001eb	68 41 04 00 00	 push	 1089			; 00000441H
  001f0	52		 push	 edx
  001f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  001f7	50		 push	 eax
  001f8	ff d3		 call	 ebx

; 1697 : 		SetTimer (MainDlg, TIMER_ID_SYSENC_PROGRESS, TIMER_INTERVAL_SYSENC_PROGRESS, NULL);

  001fa	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  001ff	6a 00		 push	 0
  00201	6a 1e		 push	 30			; 0000001eH
  00203	68 00 01 00 00	 push	 256			; 00000100H
  00208	50		 push	 eax
  00209	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16

; 1701 : }

  0020f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00212	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00219	59		 pop	 ecx
  0021a	5f		 pop	 edi
  0021b	5e		 pop	 esi
  0021c	5b		 pop	 ebx
  0021d	8b e5		 mov	 esp, ebp
  0021f	5d		 pop	 ebp
  00220	c3		 ret	 0
__catch$?SysEncResume@@YAXXZ$0:

; 1629 : 		}
; 1630 : 		catch (Exception &e)
; 1631 : 		{
; 1632 : 			e.Show (MainDlg);

  00221	8b 4d ec	 mov	 ecx, DWORD PTR _e$132244[ebp]
  00224	8b 11		 mov	 edx, DWORD PTR [ecx]
  00226	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0022b	8b 12		 mov	 edx, DWORD PTR [edx]
  0022d	50		 push	 eax
  0022e	ff d2		 call	 edx

; 1633 : 			Error ("ERR_GETTING_SYSTEM_ENCRYPTION_STATUS");

  00230	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@
  00235	e8 00 00 00 00	 call	 _Error

; 1634 : 			EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), TRUE);

  0023a	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0023f	83 c4 04	 add	 esp, 4
  00242	6a 01		 push	 1
  00244	68 41 04 00 00	 push	 1089			; 00000441H
  00249	50		 push	 eax
  0024a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00250	50		 push	 eax
  00251	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 1635 : 			return;

  00257	b8 00 00 00 00	 mov	 eax, $LN19@SysEncResu
  0025c	c3		 ret	 0
$LN19@SysEncResu:

; 1701 : }

  0025d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00260	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00267	59		 pop	 ecx
  00268	5f		 pop	 edi
  00269	5e		 pop	 esi
  0026a	5b		 pop	 ebx
  0026b	8b e5		 mov	 esp, ebp
  0026d	5d		 pop	 ebp
  0026e	c3		 ret	 0
$LN11@SysEncResu:

; 1698 : 	}
; 1699 : 	else
; 1700 : 		Error ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  0026f	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
$LN26@SysEncResu:
  00274	e8 00 00 00 00	 call	 _Error
  00279	83 c4 04	 add	 esp, 4

; 1701 : }

  0027c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0027f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00286	59		 pop	 ecx
  00287	5f		 pop	 edi
  00288	5e		 pop	 esi
  00289	5b		 pop	 ebx
  0028a	8b e5		 mov	 esp, ebp
  0028c	5d		 pop	 ebp
  0028d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?SysEncResume@@YAXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SysEncResume@@YAXXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SysEncResume@@YAXXZ ENDP				; SysEncResume
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
; Function compile flags: /Ogtpy
;	COMDAT _NonSysInplaceEncPause
_TEXT	SEGMENT
_guiMsg$132288 = -28					; size = 28
_NonSysInplaceEncPause PROC				; COMDAT

; 1750 : {

  00000	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00003	55		 push	 ebp
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1751 : 	bVolTransformThreadCancel = TRUE;

  00006	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bVolTransformThreadCancel, 1

; 1752 : 
; 1753 : 	WaitCursor ();

  00010	e8 00 00 00 00	 call	 _WaitCursor

; 1754 : 
; 1755 : 	int waitThreshold = 100;	// Do not block GUI events for more than 10 seconds. IMPORTANT: This prevents deadlocks when the thread calls us back e.g. to update GUI!

  00015	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__PeekMessageA@20
  0001b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__DispatchMessageA@4
  00021	bd 64 00 00 00	 mov	 ebp, 100		; 00000064H
$LL7@NonSysInpl:

; 1756 : 	
; 1757 : 	while (bVolTransformThreadRunning || bVolTransformThreadToRun)

  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  0002b	85 c0		 test	 eax, eax
  0002d	75 0a		 jne	 SHORT $LN5@NonSysInpl
  0002f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  00035	85 c9		 test	 ecx, ecx
  00037	74 56		 je	 SHORT $LN6@NonSysInpl
$LN5@NonSysInpl:

; 1758 : 	{
; 1759 : 		MSG guiMsg;
; 1760 : 
; 1761 : 		bVolTransformThreadCancel = TRUE;

  00039	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bVolTransformThreadCancel, 1

; 1762 : 
; 1763 : 		if (waitThreshold <= 0)

  00043	85 ed		 test	 ebp, ebp
  00045	7f 3d		 jg	 SHORT $LN4@NonSysInpl

; 1764 : 		{
; 1765 : 			while (PeekMessage (&guiMsg, NULL, 0, 0, PM_REMOVE) != 0)

  00047	6a 01		 push	 1
  00049	6a 00		 push	 0
  0004b	6a 00		 push	 0
  0004d	6a 00		 push	 0
  0004f	8d 54 24 1c	 lea	 edx, DWORD PTR _guiMsg$132288[esp+56]
  00053	52		 push	 edx
  00054	ff d6		 call	 esi
  00056	85 c0		 test	 eax, eax
  00058	74 2b		 je	 SHORT $LN14@NonSysInpl
  0005a	8d 9b 00 00 00
	00		 npad	 6
$LL3@NonSysInpl:

; 1766 : 			{
; 1767 : 				DispatchMessage (&guiMsg);

  00060	8d 44 24 0c	 lea	 eax, DWORD PTR _guiMsg$132288[esp+40]
  00064	50		 push	 eax
  00065	ff d7		 call	 edi
  00067	6a 01		 push	 1
  00069	6a 00		 push	 0
  0006b	6a 00		 push	 0
  0006d	6a 00		 push	 0
  0006f	8d 4c 24 1c	 lea	 ecx, DWORD PTR _guiMsg$132288[esp+56]
  00073	51		 push	 ecx
  00074	ff d6		 call	 esi
  00076	85 c0		 test	 eax, eax
  00078	75 e6		 jne	 SHORT $LL3@NonSysInpl

; 1772 : 
; 1773 : 		Sleep (100);

  0007a	6a 64		 push	 100			; 00000064H
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 1774 : 	}

  00082	eb a2		 jmp	 SHORT $LL7@NonSysInpl
$LN4@NonSysInpl:

; 1768 : 			}
; 1769 : 		}
; 1770 : 		else
; 1771 : 			waitThreshold--;

  00084	4d		 dec	 ebp
$LN14@NonSysInpl:

; 1772 : 
; 1773 : 		Sleep (100);

  00085	6a 64		 push	 100			; 00000064H
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 1774 : 	}

  0008d	eb 97		 jmp	 SHORT $LL7@NonSysInpl
$LN6@NonSysInpl:
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5d		 pop	 ebp

; 1775 : }

  00092	83 c4 1c	 add	 esp, 28			; 0000001cH
  00095	c3		 ret	 0
_NonSysInplaceEncPause ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@IDPLALHN@PROGRESS_STATUS_ERROR?$AA@	; `string'
PUBLIC	??_C@_0BL@CIJLEOGN@PROGRESS_STATUS_FINALIZING?$AA@ ; `string'
PUBLIC	??_C@_0BJ@EIBDNDIC@PROGRESS_STATUS_RESIZING?$AA@ ; `string'
PUBLIC	??_C@_0BK@NECHGBNE@PROGRESS_STATUS_PREPARING?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_ShowNonSysInPlaceEncUIStatus
;	COMDAT ??_C@_0BG@IDPLALHN@PROGRESS_STATUS_ERROR?$AA@
CONST	SEGMENT
??_C@_0BG@IDPLALHN@PROGRESS_STATUS_ERROR?$AA@ DB 'PROGRESS_STATUS_ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CIJLEOGN@PROGRESS_STATUS_FINALIZING?$AA@
CONST	SEGMENT
??_C@_0BL@CIJLEOGN@PROGRESS_STATUS_FINALIZING?$AA@ DB 'PROGRESS_STATUS_FI'
	DB	'NALIZING', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EIBDNDIC@PROGRESS_STATUS_RESIZING?$AA@
CONST	SEGMENT
??_C@_0BJ@EIBDNDIC@PROGRESS_STATUS_RESIZING?$AA@ DB 'PROGRESS_STATUS_RESI'
	DB	'ZING', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NECHGBNE@PROGRESS_STATUS_PREPARING?$AA@
CONST	SEGMENT
??_C@_0BK@NECHGBNE@PROGRESS_STATUS_PREPARING?$AA@ DB 'PROGRESS_STATUS_PRE'
	DB	'PARING', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _ShowNonSysInPlaceEncUIStatus
_TEXT	SEGMENT
_nonSysInplaceEncUIStatus$ = -604			; size = 600
__$ArrayPad$ = -4					; size = 4
_ShowNonSysInPlaceEncUIStatus PROC			; COMDAT

; 1809 : {

  00000	81 ec 5c 02 00
	00		 sub	 esp, 604		; 0000025cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 58 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+604], eax

; 1810 : 	wchar_t nonSysInplaceEncUIStatus [300] = {0};

  00014	33 c0		 xor	 eax, eax
  00016	68 56 02 00 00	 push	 598			; 00000256H
  0001b	50		 push	 eax
  0001c	8d 4c 24 0a	 lea	 ecx, DWORD PTR _nonSysInplaceEncUIStatus$[esp+614]
  00020	51		 push	 ecx
  00021	66 89 44 24 0c	 mov	 WORD PTR _nonSysInplaceEncUIStatus$[esp+616], ax
  00026	e8 00 00 00 00	 call	 _memset

; 1811 : 
; 1812 : 	switch (NonSysInplaceEncStatus)

  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR _NonSysInplaceEncStatus
  00030	48		 dec	 eax
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	83 f8 06	 cmp	 eax, 6
  00037	0f 87 14 01 00
	00		 ja	 $LN8@ShowNonSys
  0003d	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN27@ShowNonSys[eax*4]
$LN7@ShowNonSys:

; 1813 : 	{
; 1814 : 	case NONSYS_INPLACE_ENC_STATUS_PAUSED:
; 1815 : 		wcscpy (nonSysInplaceEncUIStatus, GetString ("PROGRESS_STATUS_PAUSED"));

  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@LLAADOBF@PROGRESS_STATUS_PAUSED?$AA@
  00049	e8 00 00 00 00	 call	 _GetString
  0004e	83 c4 04	 add	 esp, 4
  00051	8d 14 24	 lea	 edx, DWORD PTR _nonSysInplaceEncUIStatus$[esp+604]
$LL12@ShowNonSys:
  00054	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00057	66 89 0a	 mov	 WORD PTR [edx], cx
  0005a	83 c0 02	 add	 eax, 2
  0005d	83 c2 02	 add	 edx, 2
  00060	66 85 c9	 test	 cx, cx
  00063	75 ef		 jne	 SHORT $LL12@ShowNonSys

; 1816 : 		break;

  00065	e9 e7 00 00 00	 jmp	 $LN8@ShowNonSys
$LN6@ShowNonSys:

; 1817 : 	case NONSYS_INPLACE_ENC_STATUS_PREPARING:
; 1818 : 		wcscpy (nonSysInplaceEncUIStatus, GetString ("PROGRESS_STATUS_PREPARING"));

  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@NECHGBNE@PROGRESS_STATUS_PREPARING?$AA@
  0006f	e8 00 00 00 00	 call	 _GetString
  00074	83 c4 04	 add	 esp, 4
  00077	8d 14 24	 lea	 edx, DWORD PTR _nonSysInplaceEncUIStatus$[esp+604]
  0007a	8d 9b 00 00 00
	00		 npad	 6
$LL13@ShowNonSys:
  00080	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00083	66 89 0a	 mov	 WORD PTR [edx], cx
  00086	83 c0 02	 add	 eax, 2
  00089	83 c2 02	 add	 edx, 2
  0008c	66 85 c9	 test	 cx, cx
  0008f	75 ef		 jne	 SHORT $LL13@ShowNonSys

; 1819 : 		break;

  00091	e9 bb 00 00 00	 jmp	 $LN8@ShowNonSys
$LN5@ShowNonSys:

; 1820 : 	case NONSYS_INPLACE_ENC_STATUS_RESIZING:
; 1821 : 		wcscpy (nonSysInplaceEncUIStatus, GetString ("PROGRESS_STATUS_RESIZING"));

  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@EIBDNDIC@PROGRESS_STATUS_RESIZING?$AA@
  0009b	e8 00 00 00 00	 call	 _GetString
  000a0	83 c4 04	 add	 esp, 4
  000a3	8d 14 24	 lea	 edx, DWORD PTR _nonSysInplaceEncUIStatus$[esp+604]
$LL14@ShowNonSys:
  000a6	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000a9	66 89 0a	 mov	 WORD PTR [edx], cx
  000ac	83 c0 02	 add	 eax, 2
  000af	83 c2 02	 add	 edx, 2
  000b2	66 85 c9	 test	 cx, cx
  000b5	75 ef		 jne	 SHORT $LL14@ShowNonSys

; 1822 : 		break;

  000b7	e9 95 00 00 00	 jmp	 $LN8@ShowNonSys
$LN4@ShowNonSys:

; 1823 : 	case NONSYS_INPLACE_ENC_STATUS_ENCRYPTING:
; 1824 : 		wcscpy (nonSysInplaceEncUIStatus, GetString ("PROGRESS_STATUS_ENCRYPTING"));

  000bc	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PONBLMNB@PROGRESS_STATUS_ENCRYPTING?$AA@
  000c1	e8 00 00 00 00	 call	 _GetString
  000c6	83 c4 04	 add	 esp, 4
  000c9	8d 14 24	 lea	 edx, DWORD PTR _nonSysInplaceEncUIStatus$[esp+604]
  000cc	8d 64 24 00	 npad	 4
$LL15@ShowNonSys:
  000d0	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000d3	66 89 0a	 mov	 WORD PTR [edx], cx
  000d6	83 c0 02	 add	 eax, 2
  000d9	83 c2 02	 add	 edx, 2
  000dc	66 85 c9	 test	 cx, cx
  000df	75 ef		 jne	 SHORT $LL15@ShowNonSys

; 1825 : 		break;

  000e1	eb 6e		 jmp	 SHORT $LN8@ShowNonSys
$LN3@ShowNonSys:

; 1826 : 	case NONSYS_INPLACE_ENC_STATUS_FINALIZING:
; 1827 : 		wcscpy (nonSysInplaceEncUIStatus, GetString ("PROGRESS_STATUS_FINALIZING"));

  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@CIJLEOGN@PROGRESS_STATUS_FINALIZING?$AA@
  000e8	e8 00 00 00 00	 call	 _GetString
  000ed	83 c4 04	 add	 esp, 4
  000f0	8d 14 24	 lea	 edx, DWORD PTR _nonSysInplaceEncUIStatus$[esp+604]
$LL16@ShowNonSys:
  000f3	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000f6	66 89 0a	 mov	 WORD PTR [edx], cx
  000f9	83 c0 02	 add	 eax, 2
  000fc	83 c2 02	 add	 edx, 2
  000ff	66 85 c9	 test	 cx, cx
  00102	75 ef		 jne	 SHORT $LL16@ShowNonSys

; 1828 : 		break;

  00104	eb 4b		 jmp	 SHORT $LN8@ShowNonSys
$LN2@ShowNonSys:

; 1829 : 	case NONSYS_INPLACE_ENC_STATUS_FINISHED:
; 1830 : 		wcscpy (nonSysInplaceEncUIStatus, GetString ("PROGRESS_STATUS_FINISHED"));

  00106	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HKENJBII@PROGRESS_STATUS_FINISHED?$AA@
  0010b	e8 00 00 00 00	 call	 _GetString
  00110	83 c4 04	 add	 esp, 4
  00113	8d 14 24	 lea	 edx, DWORD PTR _nonSysInplaceEncUIStatus$[esp+604]
$LL17@ShowNonSys:
  00116	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00119	66 89 0a	 mov	 WORD PTR [edx], cx
  0011c	83 c0 02	 add	 eax, 2
  0011f	83 c2 02	 add	 edx, 2
  00122	66 85 c9	 test	 cx, cx
  00125	75 ef		 jne	 SHORT $LL17@ShowNonSys

; 1831 : 		break;

  00127	eb 28		 jmp	 SHORT $LN8@ShowNonSys
$LN1@ShowNonSys:

; 1832 : 	case NONSYS_INPLACE_ENC_STATUS_ERROR:
; 1833 : 		wcscpy (nonSysInplaceEncUIStatus, GetString ("PROGRESS_STATUS_ERROR"));

  00129	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@IDPLALHN@PROGRESS_STATUS_ERROR?$AA@
  0012e	e8 00 00 00 00	 call	 _GetString
  00133	83 c4 04	 add	 esp, 4
  00136	8d 14 24	 lea	 edx, DWORD PTR _nonSysInplaceEncUIStatus$[esp+604]
  00139	8d a4 24 00 00
	00 00		 npad	 7
$LL18@ShowNonSys:
  00140	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00143	66 89 0a	 mov	 WORD PTR [edx], cx
  00146	83 c0 02	 add	 eax, 2
  00149	83 c2 02	 add	 edx, 2
  0014c	66 85 c9	 test	 cx, cx
  0014f	75 ef		 jne	 SHORT $LL18@ShowNonSys
$LN8@ShowNonSys:
  00151	57		 push	 edi

; 1834 : 		break;
; 1835 : 	}
; 1836 : 
; 1837 : 	wcscat (nonSysInplaceEncUIStatus, L" ");

  00152	8d 7c 24 04	 lea	 edi, DWORD PTR _nonSysInplaceEncUIStatus$[esp+608]
  00156	83 c7 fe	 add	 edi, -2			; fffffffeH
  00159	8d a4 24 00 00
	00 00		 npad	 7
$LL26@ShowNonSys:
  00160	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  00164	83 c7 02	 add	 edi, 2
  00167	66 85 c0	 test	 ax, ax
  0016a	75 f4		 jne	 SHORT $LL26@ShowNonSys

; 1838 : 
; 1839 : 	SetWindowTextW (GetDlgItem (hCurPage, IDC_WRITESPEED), nonSysInplaceEncUIStatus);

  0016c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  00172	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  00178	8d 44 24 04	 lea	 eax, DWORD PTR _nonSysInplaceEncUIStatus$[esp+608]
  0017c	50		 push	 eax
  0017d	68 01 04 00 00	 push	 1025			; 00000401H
  00182	51		 push	 ecx
  00183	89 17		 mov	 DWORD PTR [edi], edx
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0018b	50		 push	 eax
  0018c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 1840 : }

  00192	8b 8c 24 5c 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+608]
  00199	5f		 pop	 edi
  0019a	33 cc		 xor	 ecx, esp
  0019c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a1	81 c4 5c 02 00
	00		 add	 esp, 604		; 0000025cH
  001a7	c3		 ret	 0
$LN27@ShowNonSys:
  001a8	00 00 00 00	 DD	 $LN6@ShowNonSys
  001ac	00 00 00 00	 DD	 $LN5@ShowNonSys
  001b0	00 00 00 00	 DD	 $LN4@ShowNonSys
  001b4	00 00 00 00	 DD	 $LN3@ShowNonSys
  001b8	00 00 00 00	 DD	 $LN7@ShowNonSys
  001bc	00 00 00 00	 DD	 $LN2@ShowNonSys
  001c0	00 00 00 00	 DD	 $LN1@ShowNonSys
_ShowNonSysInPlaceEncUIStatus ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _InitNonSysInplaceEncProgressBar
_TEXT	SEGMENT
_InitNonSysInplaceEncProgressBar PROC			; COMDAT

; 1941 : 	__int64 totalSize = NonSysInplaceEncTotalSize;

  00000	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _NonSysInplaceEncTotalSize+4
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR _NonSysInplaceEncTotalSize

; 1942 : 
; 1943 : 	if (totalSize <= 0)

  0000b	85 c9		 test	 ecx, ecx
  0000d	7f 19		 jg	 SHORT $LN6@InitNonSys
  0000f	7c 04		 jl	 SHORT $LN5@InitNonSys
  00011	85 c0		 test	 eax, eax
  00013	77 13		 ja	 SHORT $LN6@InitNonSys
$LN5@InitNonSys:

; 1944 : 	{
; 1945 : 		if (nVolumeSize <= 0)

  00015	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?nVolumeSize@@3_KA+4
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA
  00020	85 c9		 test	 ecx, ecx
  00022	77 04		 ja	 SHORT $LN6@InitNonSys
  00024	85 c0		 test	 eax, eax
  00026	76 20		 jbe	 SHORT $LN3@InitNonSys
$LN6@InitNonSys:

; 1946 : 			return;
; 1947 : 
; 1948 : 		totalSize = nVolumeSize;
; 1949 : 	}
; 1950 : 
; 1951 : 	InitProgressBar (totalSize,
; 1952 : 		NonSysInplaceEncBytesDone,
; 1953 : 		FALSE,
; 1954 : 		TRUE,
; 1955 : 		TRUE,
; 1956 : 		TRUE);

  00028	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR _NonSysInplaceEncBytesDone+4
  0002e	6a 01		 push	 1
  00030	6a 01		 push	 1
  00032	6a 01		 push	 1
  00034	6a 00		 push	 0
  00036	52		 push	 edx
  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _NonSysInplaceEncBytesDone
  0003d	52		 push	 edx
  0003e	51		 push	 ecx
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 _InitProgressBar
  00045	83 c4 20	 add	 esp, 32			; 00000020H
$LN3@InitNonSys:

; 1957 : }

  00048	c3		 ret	 0
_InitNonSysInplaceEncProgressBar ENDP
_TEXT	ENDS
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_05BFHEBJNP@?$CF02X?5?$AA@			; `string'
PUBLIC	??_C@_03NJNOMAJF@?5?4?5?$AA@			; `string'
PUBLIC	??_C@_04LAOFCJDB@?5?$CFc?5?$AA@			; `string'
PUBLIC	_DisplayRandPool
EXTRN	_sprintf:PROC
EXTRN	_RandpeekBytes:PROC
;	COMDAT ?bRandPoolDispAscii@?1??DisplayRandPool@@9@4HA
_BSS	SEGMENT
?bRandPoolDispAscii@?1??DisplayRandPool@@9@4HA DD 01H DUP (?) ; `DisplayRandPool'::`2'::bRandPoolDispAscii
_BSS	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05BFHEBJNP@?$CF02X?5?$AA@
CONST	SEGMENT
??_C@_05BFHEBJNP@?$CF02X?5?$AA@ DB '%02X ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NJNOMAJF@?5?4?5?$AA@
CONST	SEGMENT
??_C@_03NJNOMAJF@?5?4?5?$AA@ DB ' . ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LAOFCJDB@?5?$CFc?5?$AA@
CONST	SEGMENT
??_C@_04LAOFCJDB@?5?$CFc?5?$AA@ DB ' %c ', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _DisplayRandPool
_TEXT	SEGMENT
_hPoolDisplay$ = 8					; size = 4
_tmp$ = 12						; size = 4
_bShow$ = 12						; size = 4
_DisplayRandPool PROC					; COMDAT

; 1962 : 	unsigned char tmp[4];
; 1963 : 	unsigned char tmpByte;
; 1964 : 	int col, row;
; 1965 : 	static BOOL bRandPoolDispAscii = FALSE;
; 1966 : 
; 1967 : 	if (!bShow)

  00000	83 7c 24 08 00	 cmp	 DWORD PTR _bShow$[esp-4], 0
  00005	75 11		 jne	 SHORT $LN8@DisplayRan

; 1968 : 	{
; 1969 : 		SetWindowTextA(hPoolDisplay, "");

  00007	8b 44 24 04	 mov	 eax, DWORD PTR _hPoolDisplay$[esp-4]
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00010	50		 push	 eax
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 1993 : 	}
; 1994 : }

  00017	c3		 ret	 0
$LN8@DisplayRan:

; 1970 : 		return;
; 1971 : 	}
; 1972 : 
; 1973 : 	RandpeekBytes (randPool, sizeof (randPool));

  00018	6a 78		 push	 120			; 00000078H
  0001a	68 00 00 00 00	 push	 OFFSET ?randPool@@3PAEA	; randPool
  0001f	e8 00 00 00 00	 call	 _RandpeekBytes
  00024	83 c4 08	 add	 esp, 8

; 1974 : 
; 1975 : 	if (memcmp (lastRandPool, randPool, sizeof(lastRandPool)) != 0)

  00027	b8 78 00 00 00	 mov	 eax, 120		; 00000078H
  0002c	33 c9		 xor	 ecx, ecx
  0002e	8b ff		 npad	 2
$LL16@DisplayRan:
  00030	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?lastRandPool@@3PAEA[ecx]
  00036	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR ?randPool@@3PAEA[ecx]
  0003c	75 0c		 jne	 SHORT $LN18@DisplayRan
  0003e	83 e8 04	 sub	 eax, 4
  00041	83 c1 04	 add	 ecx, 4
  00044	83 f8 04	 cmp	 eax, 4
  00047	73 e7		 jae	 SHORT $LL16@DisplayRan

; 1993 : 	}
; 1994 : }

  00049	c3		 ret	 0
$LN18@DisplayRan:
  0004a	53		 push	 ebx
  0004b	55		 push	 ebp
  0004c	56		 push	 esi
  0004d	57		 push	 edi

; 1976 : 	{
; 1977 : 		outRandPoolDispBuffer[0] = 0;

  0004e	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?outRandPoolDispBuffer@@3PAEA, 0
  00055	bd 00 00 00 00	 mov	 ebp, OFFSET ?randPool@@3PAEA ; randPool
  0005a	8d 9b 00 00 00
	00		 npad	 6
$LL30@DisplayRan:

; 1978 : 
; 1979 : 		for (row = 0; row < RANDPOOL_DISPLAY_ROWS; row++)
; 1980 : 		{
; 1981 : 			for (col = 0; col < RANDPOOL_DISPLAY_COLUMNS; col++)

  00060	33 db		 xor	 ebx, ebx
$LL31@DisplayRan:

; 1982 : 			{
; 1983 : 				tmpByte = randPool[row * RANDPOOL_DISPLAY_COLUMNS + col];
; 1984 : 
; 1985 : 				sprintf ((char *) tmp, bRandPoolDispAscii ? ((tmpByte >= 32 && tmpByte < 255 && tmpByte != '&') ? " %c " : " . ") : "%02X ", tmpByte);

  00062	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bRandPoolDispAscii@?1??DisplayRandPool@@9@4HA, 0
  00069	8a 0c 2b	 mov	 cl, BYTE PTR [ebx+ebp]
  0006c	74 1b		 je	 SHORT $LN13@DisplayRan
  0006e	8a c1		 mov	 al, cl
  00070	2c 20		 sub	 al, 32			; 00000020H
  00072	3c de		 cmp	 al, 222			; 000000deH
  00074	77 0c		 ja	 SHORT $LN11@DisplayRan
  00076	80 f9 26	 cmp	 cl, 38			; 00000026H
  00079	74 07		 je	 SHORT $LN11@DisplayRan
  0007b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04LAOFCJDB@?5?$CFc?5?$AA@
  00080	eb 0c		 jmp	 SHORT $LN14@DisplayRan
$LN11@DisplayRan:
  00082	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03NJNOMAJF@?5?4?5?$AA@
  00087	eb 05		 jmp	 SHORT $LN14@DisplayRan
$LN13@DisplayRan:
  00089	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05BFHEBJNP@?$CF02X?5?$AA@
$LN14@DisplayRan:
  0008e	0f b6 c9	 movzx	 ecx, cl
  00091	51		 push	 ecx
  00092	50		 push	 eax
  00093	8d 54 24 20	 lea	 edx, DWORD PTR _tmp$[esp+20]
  00097	52		 push	 edx
  00098	e8 00 00 00 00	 call	 _sprintf

; 1986 : 				strcat ((char *) outRandPoolDispBuffer, (char *) tmp);

  0009d	8d 44 24 24	 lea	 eax, DWORD PTR _tmp$[esp+24]
  000a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a4	8b c8		 mov	 ecx, eax
$LL27@DisplayRan:
  000a6	8a 10		 mov	 dl, BYTE PTR [eax]
  000a8	40		 inc	 eax
  000a9	84 d2		 test	 dl, dl
  000ab	75 f9		 jne	 SHORT $LL27@DisplayRan
  000ad	bf 00 00 00 00	 mov	 edi, OFFSET ?outRandPoolDispBuffer@@3PAEA ; outRandPoolDispBuffer
  000b2	2b c1		 sub	 eax, ecx
  000b4	8b f1		 mov	 esi, ecx
  000b6	4f		 dec	 edi
$LL28@DisplayRan:
  000b7	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  000ba	47		 inc	 edi
  000bb	84 c9		 test	 cl, cl
  000bd	75 f8		 jne	 SHORT $LL28@DisplayRan
  000bf	8b c8		 mov	 ecx, eax
  000c1	c1 e9 02	 shr	 ecx, 2
  000c4	f3 a5		 rep movsd
  000c6	8b c8		 mov	 ecx, eax
  000c8	83 e1 03	 and	 ecx, 3
  000cb	43		 inc	 ebx
  000cc	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  000cf	f3 a4		 rep movsb
  000d1	7c 8f		 jl	 SHORT $LL31@DisplayRan

; 1987 : 			}
; 1988 : 			strcat ((char *) outRandPoolDispBuffer, "\n");

  000d3	bf 00 00 00 00	 mov	 edi, OFFSET ?outRandPoolDispBuffer@@3PAEA ; outRandPoolDispBuffer
  000d8	4f		 dec	 edi
  000d9	8d a4 24 00 00
	00 00		 npad	 7
$LL29@DisplayRan:
  000e0	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  000e3	47		 inc	 edi
  000e4	84 c0		 test	 al, al
  000e6	75 f8		 jne	 SHORT $LL29@DisplayRan
  000e8	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01EEMJAFIK@?6?$AA@
  000ee	83 c5 0f	 add	 ebp, 15			; 0000000fH
  000f1	81 fd 78 00 00
	00		 cmp	 ebp, OFFSET ?randPool@@3PAEA+120
  000f7	66 89 07	 mov	 WORD PTR [edi], ax
  000fa	0f 8c 60 ff ff
	ff		 jl	 $LL30@DisplayRan

; 1989 : 		}
; 1990 : 		SetWindowTextA(hPoolDisplay, (char *) outRandPoolDispBuffer);

  00100	8b 4c 24 14	 mov	 ecx, DWORD PTR _hPoolDisplay$[esp+12]
  00104	68 00 00 00 00	 push	 OFFSET ?outRandPoolDispBuffer@@3PAEA ; outRandPoolDispBuffer
  00109	51		 push	 ecx
  0010a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 1991 : 
; 1992 : 		memcpy (lastRandPool, randPool, sizeof(lastRandPool));

  00110	b9 1e 00 00 00	 mov	 ecx, 30			; 0000001eH
  00115	be 00 00 00 00	 mov	 esi, OFFSET ?randPool@@3PAEA ; randPool
  0011a	bf 00 00 00 00	 mov	 edi, OFFSET ?lastRandPool@@3PAEA ; lastRandPool
  0011f	f3 a5		 rep movsd
  00121	5f		 pop	 edi
  00122	5e		 pop	 esi
  00123	5d		 pop	 ebp
  00124	5b		 pop	 ebx

; 1993 : 	}
; 1994 : }

  00125	c3		 ret	 0
_DisplayRandPool ENDP
_TEXT	ENDS
EXTRN	?GetDecoyOSWipeStatus@BootEncryption@CipherShed@@QAE?AUDecoySystemWipeStatus@@XZ:PROC ; CipherShed::BootEncryption::GetDecoyOSWipeStatus
EXTRN	_IsHiddenOSRunning:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_UpdateWipeProgressBar$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_UpdateWipeProgressBar$0
__unwindtable$_UpdateWipeProgressBar DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_UpdateWipeProgressBar DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_UpdateWipeProgressBar$2
__ehfuncinfo$_UpdateWipeProgressBar DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_UpdateWipeProgressBar
	DD	01H
	DD	FLAT:__tryblocktable$_UpdateWipeProgressBar
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _UpdateWipeProgressBar
_TEXT	SEGMENT
$T141600 = -142						; size = 94
$T141599 = -48						; size = 16
_decoySysPartitionWipeStatus$132433 = -32		; size = 16
__$EHRec$ = -16						; size = 16
_UpdateWipeProgressBar PROC				; COMDAT

; 2124 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_UpdateWipeProgressBar
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 2125 : 	if (bHiddenOS && IsHiddenOSRunning())

  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00033	85 c0		 test	 eax, eax
  00035	74 6d		 je	 SHORT $LN11@UpdateWipe
  00037	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  0003c	85 c0		 test	 eax, eax
  0003e	74 64		 je	 SHORT $LN11@UpdateWipe

; 2126 : 	{
; 2127 : 		/* Decoy system partition wipe */
; 2128 : 
; 2129 : 		DecoySystemWipeStatus decoySysPartitionWipeStatus;
; 2130 : 
; 2131 : 		try
; 2132 : 		{
; 2133 : 			decoySysPartitionWipeStatus = BootEncObj->GetDecoyOSWipeStatus();

  00040	8d 4d d0	 lea	 ecx, DWORD PTR $T141599[ebp]
  00043	51		 push	 ecx
  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00051	e8 00 00 00 00	 call	 ?GetDecoyOSWipeStatus@BootEncryption@CipherShed@@QAE?AUDecoySystemWipeStatus@@XZ ; CipherShed::BootEncryption::GetDecoyOSWipeStatus
  00056	8b 10		 mov	 edx, DWORD PTR [eax]
  00058	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005b	8b 58 08	 mov	 ebx, DWORD PTR [eax+8]
  0005e	89 55 e0	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132433[ebp], edx
  00061	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]

; 2134 : 			BootEncStatus = BootEncObj->GetStatus();

  00064	8d 85 72 ff ff
	ff		 lea	 eax, DWORD PTR $T141600[ebp]
  0006a	89 4d e4	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132433[ebp+4], ecx
  0006d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00073	50		 push	 eax
  00074	89 55 ec	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132433[ebp+12], edx
  00077	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  0007c	8b f0		 mov	 esi, eax

; 2139 : 		}
; 2140 : 
; 2141 : 		if (decoySysPartitionWipeStatus.WipedAreaEnd == -1)

  0007e	8b 45 ec	 mov	 eax, DWORD PTR _decoySysPartitionWipeStatus$132433[ebp+12]
  00081	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00086	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  0008b	f3 a5		 rep movsd
  0008d	8b cb		 mov	 ecx, ebx
  0008f	23 c8		 and	 ecx, eax
  00091	66 a5		 movsw
  00093	83 f9 ff	 cmp	 ecx, -1
  00096	75 1e		 jne	 SHORT $LN3@UpdateWipe

; 2142 : 			UpdateProgressBarProc (0);

  00098	6a 00		 push	 0
  0009a	6a 00		 push	 0
$LN14@UpdateWipe:
  0009c	e8 00 00 00 00	 call	 _UpdateProgressBarProc
  000a1	83 c4 08	 add	 esp, 8
$LN11@UpdateWipe:

; 2147 : 	{
; 2148 : 		/* Regular device wipe (not decoy system partition wipe) */
; 2149 : 	}
; 2150 : }

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ae	59		 pop	 ecx
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
$LN3@UpdateWipe:

; 2143 : 		else
; 2144 : 			UpdateProgressBarProc (decoySysPartitionWipeStatus.WipedAreaEnd - BootEncStatus.ConfiguredEncryptedAreaStart + 1);

  000b6	2b 1d 1a 00 00
	00		 sub	 ebx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+26
  000bc	1b 05 1e 00 00
	00		 sbb	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+30
  000c2	83 c3 01	 add	 ebx, 1
  000c5	83 d0 00	 adc	 eax, 0
  000c8	50		 push	 eax
  000c9	53		 push	 ebx

; 2145 : 	}
; 2146 : 	else

  000ca	eb d0		 jmp	 SHORT $LN14@UpdateWipe
__catch$_UpdateWipeProgressBar$0:

; 2135 : 		}
; 2136 : 		catch (...)
; 2137 : 		{
; 2138 : 			return;

  000cc	b8 00 00 00 00	 mov	 eax, $LN11@UpdateWipe
  000d1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_UpdateWipeProgressBar:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 6c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-148]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_UpdateWipeProgressBar
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_UpdateWipeProgressBar ENDP
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_InitWipeProgressBar$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_InitWipeProgressBar$0
__unwindtable$_InitWipeProgressBar DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_InitWipeProgressBar DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_InitWipeProgressBar$2
__ehfuncinfo$_InitWipeProgressBar DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_InitWipeProgressBar
	DD	01H
	DD	FLAT:__tryblocktable$_InitWipeProgressBar
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _InitWipeProgressBar
_TEXT	SEGMENT
$T141617 = -142						; size = 94
$T141616 = -48						; size = 16
_decoySysPartitionWipeStatus$132444 = -32		; size = 16
__$EHRec$ = -16						; size = 16
_InitWipeProgressBar PROC				; COMDAT

; 2154 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_InitWipeProgressBar
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 2155 : 	if (bHiddenOS && IsHiddenOSRunning())

  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00033	85 c0		 test	 eax, eax
  00035	0f 84 cb 00 00
	00		 je	 $LN13@InitWipePr
  0003b	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00040	85 c0		 test	 eax, eax
  00042	0f 84 be 00 00
	00		 je	 $LN13@InitWipePr

; 2156 : 	{
; 2157 : 		/* Decoy system partition wipe */
; 2158 : 
; 2159 : 		DecoySystemWipeStatus decoySysPartitionWipeStatus;
; 2160 : 
; 2161 : 		try
; 2162 : 		{
; 2163 : 			decoySysPartitionWipeStatus = BootEncObj->GetDecoyOSWipeStatus();

  00048	8d 4d d0	 lea	 ecx, DWORD PTR $T141616[ebp]
  0004b	51		 push	 ecx
  0004c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00059	e8 00 00 00 00	 call	 ?GetDecoyOSWipeStatus@BootEncryption@CipherShed@@QAE?AUDecoySystemWipeStatus@@XZ ; CipherShed::BootEncryption::GetDecoyOSWipeStatus
  0005e	8b 10		 mov	 edx, DWORD PTR [eax]
  00060	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00063	8b 58 08	 mov	 ebx, DWORD PTR [eax+8]
  00066	89 55 e0	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132444[ebp], edx
  00069	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]

; 2164 : 			BootEncStatus = BootEncObj->GetStatus();

  0006c	8d 85 72 ff ff
	ff		 lea	 eax, DWORD PTR $T141617[ebp]
  00072	89 4d e4	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132444[ebp+4], ecx
  00075	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0007b	50		 push	 eax
  0007c	89 55 ec	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132444[ebp+12], edx
  0007f	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00084	8b f0		 mov	 esi, eax
  00086	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0008b	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00090	f3 a5		 rep movsd
  00092	66 a5		 movsw

; 2169 : 		}
; 2170 : 
; 2171 : 		if (BootEncStatus.ConfiguredEncryptedAreaEnd == -1 
; 2172 : 			|| BootEncStatus.ConfiguredEncryptedAreaStart == -1)

  00094	8b 0d 22 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+34
  0009a	8b 15 26 00 00
	00		 mov	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+38
  000a0	8b c1		 mov	 eax, ecx
  000a2	23 c2		 and	 eax, edx
  000a4	83 f8 ff	 cmp	 eax, -1
  000a7	74 5d		 je	 SHORT $LN13@InitWipePr
  000a9	8b 35 1a 00 00
	00		 mov	 esi, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+26
  000af	8b 3d 1e 00 00
	00		 mov	 edi, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+30
  000b5	8b c6		 mov	 eax, esi
  000b7	23 c7		 and	 eax, edi
  000b9	83 f8 ff	 cmp	 eax, -1
  000bc	74 48		 je	 SHORT $LN13@InitWipePr

; 2173 : 			return;
; 2174 : 
; 2175 : 		InitProgressBar (BootEncStatus.ConfiguredEncryptedAreaEnd - BootEncStatus.ConfiguredEncryptedAreaStart + 1,
; 2176 : 			(decoySysPartitionWipeStatus.WipedAreaEnd == BootEncStatus.ConfiguredEncryptedAreaStart || decoySysPartitionWipeStatus.WipedAreaEnd == -1) ?
; 2177 : 			0 :	decoySysPartitionWipeStatus.WipedAreaEnd - BootEncStatus.ConfiguredEncryptedAreaStart + 1,
; 2178 : 			FALSE,
; 2179 : 			TRUE,
; 2180 : 			FALSE,
; 2181 : 			TRUE);

  000be	8b 45 ec	 mov	 eax, DWORD PTR _decoySysPartitionWipeStatus$132444[ebp+12]
  000c1	3b de		 cmp	 ebx, esi
  000c3	75 04		 jne	 SHORT $LN15@InitWipePr
  000c5	3b c7		 cmp	 eax, edi
  000c7	74 1b		 je	 SHORT $LN8@InitWipePr
$LN15@InitWipePr:
  000c9	8b fb		 mov	 edi, ebx
  000cb	23 f8		 and	 edi, eax
  000cd	83 ff ff	 cmp	 edi, -1
  000d0	8b 3d 1e 00 00
	00		 mov	 edi, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+30
  000d6	74 0c		 je	 SHORT $LN8@InitWipePr
  000d8	2b de		 sub	 ebx, esi
  000da	1b c7		 sbb	 eax, edi
  000dc	83 c3 01	 add	 ebx, 1
  000df	83 d0 00	 adc	 eax, 0
  000e2	eb 04		 jmp	 SHORT $LN9@InitWipePr
$LN8@InitWipePr:
  000e4	33 db		 xor	 ebx, ebx
  000e6	33 c0		 xor	 eax, eax
$LN9@InitWipePr:
  000e8	6a 01		 push	 1
  000ea	6a 00		 push	 0
  000ec	6a 01		 push	 1
  000ee	6a 00		 push	 0
  000f0	2b ce		 sub	 ecx, esi
  000f2	50		 push	 eax
  000f3	1b d7		 sbb	 edx, edi
  000f5	83 c1 01	 add	 ecx, 1
  000f8	53		 push	 ebx
  000f9	83 d2 00	 adc	 edx, 0
  000fc	52		 push	 edx
  000fd	51		 push	 ecx
  000fe	e8 00 00 00 00	 call	 _InitProgressBar
  00103	83 c4 20	 add	 esp, 32			; 00000020H
$LN13@InitWipePr:

; 2182 : 	}
; 2183 : 	else
; 2184 : 	{
; 2185 : 		/* Regular device wipe (not decoy system partition wipe) */
; 2186 : 	}
; 2187 : }

  00106	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00109	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00110	59		 pop	 ecx
  00111	5f		 pop	 edi
  00112	5e		 pop	 esi
  00113	5b		 pop	 ebx
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c3		 ret	 0
__catch$_InitWipeProgressBar$0:

; 2165 : 		}
; 2166 : 		catch (...)
; 2167 : 		{
; 2168 : 			return;

  00118	b8 00 00 00 00	 mov	 eax, $LN13@InitWipePr
  0011d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_InitWipeProgressBar:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 6c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-148]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_InitWipeProgressBar
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_InitWipeProgressBar ENDP
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_UpdateWipeControls$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_UpdateWipeControls$0
__unwindtable$_UpdateWipeControls DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_UpdateWipeControls DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_UpdateWipeControls$2
__ehfuncinfo$_UpdateWipeControls DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_UpdateWipeControls
	DD	01H
	DD	FLAT:__tryblocktable$_UpdateWipeControls
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _UpdateWipeControls
_TEXT	SEGMENT
$T141638 = -142						; size = 94
$T141637 = -48						; size = 16
_decoySysPartitionWipeStatus$132455 = -32		; size = 16
__$EHRec$ = -16						; size = 16
_UpdateWipeControls PROC				; COMDAT

; 2191 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_UpdateWipeControls
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 2192 : 	if (bHiddenOS && IsHiddenOSRunning())

  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00033	85 c0		 test	 eax, eax
  00035	0f 84 98 00 00
	00		 je	 $LN4@UpdateWipe@2
  0003b	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00040	85 c0		 test	 eax, eax
  00042	0f 84 8b 00 00
	00		 je	 $LN4@UpdateWipe@2

; 2193 : 	{
; 2194 : 		/* Decoy system partition wipe */
; 2195 : 
; 2196 : 		DecoySystemWipeStatus decoySysPartitionWipeStatus;
; 2197 : 
; 2198 : 		try
; 2199 : 		{
; 2200 : 			decoySysPartitionWipeStatus = BootEncObj->GetDecoyOSWipeStatus();

  00048	8d 4d d0	 lea	 ecx, DWORD PTR $T141637[ebp]
  0004b	51		 push	 ecx
  0004c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00059	e8 00 00 00 00	 call	 ?GetDecoyOSWipeStatus@BootEncryption@CipherShed@@QAE?AUDecoySystemWipeStatus@@XZ ; CipherShed::BootEncryption::GetDecoyOSWipeStatus
  0005e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00061	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00064	8b 18		 mov	 ebx, DWORD PTR [eax]
  00066	89 55 e4	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132455[ebp+4], edx
  00069	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]

; 2201 : 			BootEncStatus = BootEncObj->GetStatus();

  0006c	8d 85 72 ff ff
	ff		 lea	 eax, DWORD PTR $T141638[ebp]
  00072	89 4d e8	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132455[ebp+8], ecx
  00075	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0007b	50		 push	 eax
  0007c	89 55 ec	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132455[ebp+12], edx
  0007f	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus

; 2206 : 		}
; 2207 : 
; 2208 : 		EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), !decoySysPartitionWipeStatus.WipeInProgress);

  00084	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0008a	8b f0		 mov	 esi, eax
  0008c	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00091	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00096	f3 a5		 rep movsd
  00098	33 c9		 xor	 ecx, ecx
  0009a	85 db		 test	 ebx, ebx
  0009c	0f 94 c1	 sete	 cl
  0009f	66 a5		 movsw
  000a1	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  000a7	51		 push	 ecx
  000a8	68 10 04 00 00	 push	 1040			; 00000410H
  000ad	52		 push	 edx
  000ae	ff d6		 call	 esi
  000b0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  000b6	50		 push	 eax
  000b7	ff d7		 call	 edi

; 2209 : 	}
; 2210 : 	else

  000b9	eb 5e		 jmp	 SHORT $LN1@UpdateWipe@2
__catch$_UpdateWipeControls$0:

; 2202 : 		}
; 2203 : 		catch (...)
; 2204 : 		{
; 2205 : 			return;

  000bb	b8 00 00 00 00	 mov	 eax, $LN10@UpdateWipe@2
  000c0	c3		 ret	 0
$LN10@UpdateWipe@2:

; 2226 : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c3		 ret	 0
$LN4@UpdateWipe@2:

; 2211 : 	{
; 2212 : 		/* Regular device wipe (not decoy system partition wipe) */
; 2213 : 
; 2214 : 		EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), bDeviceWipeInProgress);

  000d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bDeviceWipeInProgress@@3HA ; bDeviceWipeInProgress
  000d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  000de	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  000e4	50		 push	 eax
  000e5	68 10 04 00 00	 push	 1040			; 00000410H
  000ea	51		 push	 ecx
  000eb	ff d6		 call	 esi
  000ed	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  000f3	50		 push	 eax
  000f4	ff d7		 call	 edi

; 2215 : 
; 2216 : 		if (!bDeviceWipeInProgress)

  000f6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDeviceWipeInProgress@@3HA, 0 ; bDeviceWipeInProgress
  000fd	75 1a		 jne	 SHORT $LN1@UpdateWipe@2

; 2217 : 		{
; 2218 : 			SetWindowTextA(GetDlgItem (hCurPage, IDC_TIMEREMAIN), " ");

  000ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00105	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5?$AA@
  0010a	68 03 04 00 00	 push	 1027			; 00000403H
  0010f	52		 push	 edx
  00110	ff d6		 call	 esi
  00112	50		 push	 eax
  00113	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8
$LN1@UpdateWipe@2:

; 2219 : 		}
; 2220 : 	}
; 2221 : 
; 2222 : 	EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), bDeviceWipeInProgress);

  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bDeviceWipeInProgress@@3HA ; bDeviceWipeInProgress
  0011e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  00124	50		 push	 eax
  00125	68 f8 03 00 00	 push	 1016			; 000003f8H
  0012a	51		 push	 ecx
  0012b	ff d6		 call	 esi
  0012d	50		 push	 eax
  0012e	ff d7		 call	 edi

; 2223 : 	EnableWindow (GetDlgItem (MainDlg, IDC_PREV), !bDeviceWipeInProgress);

  00130	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00135	33 d2		 xor	 edx, edx
  00137	39 15 00 00 00
	00		 cmp	 DWORD PTR ?bDeviceWipeInProgress@@3HA, edx ; bDeviceWipeInProgress
  0013d	0f 94 c2	 sete	 dl
  00140	52		 push	 edx
  00141	68 11 04 00 00	 push	 1041			; 00000411H
  00146	50		 push	 eax
  00147	ff d6		 call	 esi
  00149	50		 push	 eax
  0014a	ff d7		 call	 edi

; 2224 : 
; 2225 : 	bConfirmQuit = bDeviceWipeInProgress;

  0014c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bDeviceWipeInProgress@@3HA ; bDeviceWipeInProgress
  00152	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bConfirmQuit@@3HC, ecx ; bConfirmQuit

; 2226 : }

  00158	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0015b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00162	59		 pop	 ecx
  00163	5f		 pop	 edi
  00164	5e		 pop	 esi
  00165	5b		 pop	 ebx
  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_UpdateWipeControls:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 6c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-148]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_UpdateWipeControls
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_UpdateWipeControls ENDP
PUBLIC	??_R0?AUTimeOut@CipherShed@@@8			; CipherShed::TimeOut `RTTI Type Descriptor'
EXTRN	_exit:PROC
EXTRN	?ProbeRealSystemDriveSize@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::ProbeRealSystemDriveSize
;	COMDAT ??_R0?AUTimeOut@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUTimeOut@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::TimeOut `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUTimeOut@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$_sysEncDriveAnalysisThread DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_sysEncDriveAnalysisThread DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$_sysEncDriveAnalysisThread$3
__catchsym$_sysEncDriveAnalysisThread$3 DD 08H
	DD	FLAT:??_R0?AUTimeOut@CipherShed@@@8
	DD	00H
	DD	FLAT:__catch$_sysEncDriveAnalysisThread$0
	DD	08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffe4H
	DD	FLAT:__catch$_sysEncDriveAnalysisThread$1
__ehfuncinfo$_sysEncDriveAnalysisThread DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_sysEncDriveAnalysisThread
	DD	01H
	DD	FLAT:__tryblocktable$_sysEncDriveAnalysisThread
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _sysEncDriveAnalysisThread
_TEXT	SEGMENT
_e$132467 = -28						; size = 4
_bSuccess$141667 = -24					; size = 4
_bSuccess$141663 = -20					; size = 4
__$EHRec$ = -16						; size = 16
_hwndDlgArg$ = 8					; size = 4
_sysEncDriveAnalysisThread PROC				; COMDAT

; 2231 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_sysEncDriveAnalysisThread
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 2232 : 	// Mark the detection process as 'in progress'
; 2233 : 	HiddenSectorDetectionStatus = 1;
; 2234 : 	SaveSettings (NULL);

  0002b	33 f6		 xor	 esi, esi
  0002d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _HiddenSectorDetectionStatus, 1
  00037	e8 00 00 00 00	 call	 _SaveSettings

; 2235 : 	BroadcastSysEncCfgUpdate ();

  0003c	8d 45 ec	 lea	 eax, DWORD PTR _bSuccess$141663[ebp]
  0003f	50		 push	 eax
  00040	33 db		 xor	 ebx, ebx
  00042	68 00 00 00 00	 push	 OFFSET ?BroadcastSysEncCfgUpdateCallb@@YGHPAUHWND__@@J@Z ; BroadcastSysEncCfgUpdateCallb
  00047	89 5d ec	 mov	 DWORD PTR _bSuccess$141663[ebp], ebx
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumWindows@8

; 2236 : 
; 2237 : 	try
; 2238 : 	{
; 2239 : 		BootEncObj->ProbeRealSystemDriveSize ();

  00050	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00056	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00059	e8 00 00 00 00	 call	 ?ProbeRealSystemDriveSize@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::ProbeRealSystemDriveSize

; 2240 : 		bSysEncDriveAnalysisTimeOutOccurred = FALSE;

  0005e	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bSysEncDriveAnalysisTimeOutOccurred@@3HC, ebx ; bSysEncDriveAnalysisTimeOutOccurred
  00064	eb 12		 jmp	 SHORT $LN8@sysEncDriv
__catch$_sysEncDriveAnalysisThread$0:

; 2241 : 	}
; 2242 : 	catch (TimeOut &)
; 2243 : 	{
; 2244 : 		bSysEncDriveAnalysisTimeOutOccurred = TRUE;

  00066	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bSysEncDriveAnalysisTimeOutOccurred@@3HC, 1 ; bSysEncDriveAnalysisTimeOutOccurred

; 2245 : 	}

  00070	b8 00 00 00 00	 mov	 eax, $LN17@sysEncDriv
  00075	c3		 ret	 0
$LN17@sysEncDriv:
  00076	33 db		 xor	 ebx, ebx
$LN8@sysEncDriv:

; 2256 : 	}
; 2257 : 
; 2258 : 	// Mark the detection process as completed
; 2259 : 	HiddenSectorDetectionStatus = 0;
; 2260 : 	SaveSettings (NULL);

  00078	33 f6		 xor	 esi, esi
  0007a	89 1d 00 00 00
	00		 mov	 DWORD PTR _HiddenSectorDetectionStatus, ebx
  00080	e8 00 00 00 00	 call	 _SaveSettings

; 2261 : 	BroadcastSysEncCfgUpdate ();

  00085	8d 4d e8	 lea	 ecx, DWORD PTR _bSuccess$141667[ebp]
  00088	51		 push	 ecx
  00089	68 00 00 00 00	 push	 OFFSET ?BroadcastSysEncCfgUpdateCallb@@YGHPAUHWND__@@J@Z ; BroadcastSysEncCfgUpdateCallb
  0008e	89 5d e8	 mov	 DWORD PTR _bSuccess$141667[ebp], ebx
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumWindows@8

; 2262 : 
; 2263 : 	// This artificial delay prevents user confusion on systems where the analysis ends almost instantly
; 2264 : 	Sleep (3000);

  00097	68 b8 0b 00 00	 push	 3000			; 00000bb8H
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 2265 : 
; 2266 : 	bSysEncDriveAnalysisInProgress = FALSE;

  000a2	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bSysEncDriveAnalysisInProgress@@3HC, ebx ; bSysEncDriveAnalysisInProgress

; 2267 : }

  000a8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ab	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b2	59		 pop	 ecx
  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
  000b5	5b		 pop	 ebx
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
__catch$_sysEncDriveAnalysisThread$1:

; 2246 : 	catch (Exception &e)
; 2247 : 	{
; 2248 : 		// There was a problem but the system did not freeze. Mark the detection process as completed.
; 2249 : 		HiddenSectorDetectionStatus = 0;

  000ba	33 db		 xor	 ebx, ebx

; 2250 : 		SaveSettings (NULL);

  000bc	33 f6		 xor	 esi, esi
  000be	89 1d 00 00 00
	00		 mov	 DWORD PTR _HiddenSectorDetectionStatus, ebx
  000c4	e8 00 00 00 00	 call	 _SaveSettings

; 2251 : 		BroadcastSysEncCfgUpdate ();

  000c9	e8 00 00 00 00	 call	 ?BroadcastSysEncCfgUpdate@@YAHXZ ; BroadcastSysEncCfgUpdate

; 2252 : 
; 2253 : 		e.Show (NULL);

  000ce	8b 4d e4	 mov	 ecx, DWORD PTR _e$132467[ebp]
  000d1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d3	8b 02		 mov	 eax, DWORD PTR [edx]
  000d5	53		 push	 ebx
  000d6	ff d0		 call	 eax

; 2254 : 		EndMainDlg (MainDlg);

  000d8	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  000de	e8 00 00 00 00	 call	 _EndMainDlg

; 2255 : 		exit(0);

  000e3	53		 push	 ebx
  000e4	e8 00 00 00 00	 call	 _exit
$LN19@sysEncDriv:
  000e9	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_sysEncDriveAnalysisThread:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_sysEncDriveAnalysisThread
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_sysEncDriveAnalysisThread ENDP
PUBLIC	??_C@_0N@LKFCNANA@DISK_FREE_GB?$AA@		; `string'
PUBLIC	??_C@_0P@IDAMPFNO@DEVICE_FREE_GB?$AA@		; `string'
PUBLIC	??_C@_0N@LHMFFFAG@DISK_FREE_MB?$AA@		; `string'
PUBLIC	??_C@_0P@IOJLHAAI@DEVICE_FREE_MB?$AA@		; `string'
PUBLIC	??_C@_0N@LDEICJLE@DISK_FREE_KB?$AA@		; `string'
PUBLIC	??_C@_0P@IKBGAMLK@DEVICE_FREE_KB?$AA@		; `string'
PUBLIC	??_C@_0BA@GNIBCOCE@DISK_FREE_BYTES?$AA@		; `string'
PUBLIC	??_C@_0BC@DDPKPAD@DEVICE_FREE_BYTES?$AA@	; `string'
PUBLIC	??_C@_0BD@NLEFDOGE@MAX_HIDVOL_SIZE_GB?$AA@	; `string'
PUBLIC	??_C@_0BD@NGNCLLLC@MAX_HIDVOL_SIZE_MB?$AA@	; `string'
PUBLIC	??_C@_0BD@NCFPMHAA@MAX_HIDVOL_SIZE_KB?$AA@	; `string'
PUBLIC	??_C@_0BG@OMPICDCM@MAX_HIDVOL_SIZE_BYTES?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_PrintFreeSpace
EXTRN	__snwprintf:PROC
EXTRN	__fltused:DWORD
EXTRN	__allrem:PROC
;	COMDAT ??_C@_0N@LKFCNANA@DISK_FREE_GB?$AA@
CONST	SEGMENT
??_C@_0N@LKFCNANA@DISK_FREE_GB?$AA@ DB 'DISK_FREE_GB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IDAMPFNO@DEVICE_FREE_GB?$AA@
CONST	SEGMENT
??_C@_0P@IDAMPFNO@DEVICE_FREE_GB?$AA@ DB 'DEVICE_FREE_GB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LHMFFFAG@DISK_FREE_MB?$AA@
CONST	SEGMENT
??_C@_0N@LHMFFFAG@DISK_FREE_MB?$AA@ DB 'DISK_FREE_MB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IOJLHAAI@DEVICE_FREE_MB?$AA@
CONST	SEGMENT
??_C@_0P@IOJLHAAI@DEVICE_FREE_MB?$AA@ DB 'DEVICE_FREE_MB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LDEICJLE@DISK_FREE_KB?$AA@
CONST	SEGMENT
??_C@_0N@LDEICJLE@DISK_FREE_KB?$AA@ DB 'DISK_FREE_KB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IKBGAMLK@DEVICE_FREE_KB?$AA@
CONST	SEGMENT
??_C@_0P@IKBGAMLK@DEVICE_FREE_KB?$AA@ DB 'DEVICE_FREE_KB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GNIBCOCE@DISK_FREE_BYTES?$AA@
CONST	SEGMENT
??_C@_0BA@GNIBCOCE@DISK_FREE_BYTES?$AA@ DB 'DISK_FREE_BYTES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DDPKPAD@DEVICE_FREE_BYTES?$AA@
CONST	SEGMENT
??_C@_0BC@DDPKPAD@DEVICE_FREE_BYTES?$AA@ DB 'DEVICE_FREE_BYTES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NLEFDOGE@MAX_HIDVOL_SIZE_GB?$AA@
CONST	SEGMENT
??_C@_0BD@NLEFDOGE@MAX_HIDVOL_SIZE_GB?$AA@ DB 'MAX_HIDVOL_SIZE_GB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NGNCLLLC@MAX_HIDVOL_SIZE_MB?$AA@
CONST	SEGMENT
??_C@_0BD@NGNCLLLC@MAX_HIDVOL_SIZE_MB?$AA@ DB 'MAX_HIDVOL_SIZE_MB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NCFPMHAA@MAX_HIDVOL_SIZE_KB?$AA@
CONST	SEGMENT
??_C@_0BD@NCFPMHAA@MAX_HIDVOL_SIZE_KB?$AA@ DB 'MAX_HIDVOL_SIZE_KB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OMPICDCM@MAX_HIDVOL_SIZE_BYTES?$AA@
CONST	SEGMENT
??_C@_0BG@OMPICDCM@MAX_HIDVOL_SIZE_BYTES?$AA@ DB 'MAX_HIDVOL_SIZE_BYTES', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _PrintFreeSpace
_TEXT	SEGMENT
_nMultiplier$ = -520					; size = 4
_szTmp2$ = -516						; size = 512
__$ArrayPad$ = -4					; size = 4
_hwndTextBox$ = 8					; size = 4
_lpszDrive$ = 12					; size = 4
_lDiskFree$ = 16					; size = 4
_PrintFreeSpace PROC					; COMDAT

; 2863 : {

  00000	81 ec 08 02 00
	00		 sub	 esp, 520		; 00000208H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 04 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+520], eax
  00014	8b 94 24 10 02
	00 00		 mov	 edx, DWORD PTR _lpszDrive$[esp+516]
  0001b	53		 push	 ebx
  0001c	8b 9c 24 10 02
	00 00		 mov	 ebx, DWORD PTR _hwndTextBox$[esp+520]
  00023	55		 push	 ebp
  00024	56		 push	 esi
  00025	8b b4 24 20 02
	00 00		 mov	 esi, DWORD PTR _lDiskFree$[esp+528]

; 2864 : 	char *nResourceString;
; 2865 : 	int nMultiplier;
; 2866 : 	wchar_t szTmp2[256];
; 2867 : 
; 2868 : 	if (lDiskFree->QuadPart < BYTES_PER_KB)

  0002c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00031	57		 push	 edi
  00032	85 c0		 test	 eax, eax
  00034	0f 8f 9d 00 00
	00		 jg	 $LN27@PrintFreeS
  0003a	7c 08		 jl	 SHORT $LN37@PrintFreeS
  0003c	81 f9 00 04 00
	00		 cmp	 ecx, 1024		; 00000400H
  00042	73 2e		 jae	 SHORT $LN41@PrintFreeS
$LN37@PrintFreeS:

; 2873 : 		nMultiplier = BYTES_PER_MB;
; 2874 : 	else
; 2875 : 		nMultiplier = BYTES_PER_GB;
; 2876 : 
; 2877 : 	if (nMultiplier == 1)
; 2878 : 	{
; 2879 : 		if (bHiddenVol && !bHiddenVolHost)	// If it's a hidden volume

  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00049	bd 01 00 00 00	 mov	 ebp, 1
  0004e	89 6c 24 10	 mov	 DWORD PTR _nMultiplier$[esp+536], ebp
  00052	85 c0		 test	 eax, eax
  00054	0f 84 a0 00 00
	00		 je	 $LN24@PrintFreeS
  0005a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  00060	85 c9		 test	 ecx, ecx
  00062	0f 85 92 00 00
	00		 jne	 $LN24@PrintFreeS

; 2880 : 			nResourceString = "MAX_HIDVOL_SIZE_BYTES";

  00068	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BG@OMPICDCM@MAX_HIDVOL_SIZE_BYTES?$AA@
  0006d	e9 e0 00 00 00	 jmp	 $LN4@PrintFreeS
$LN41@PrintFreeS:

; 2869 : 		nMultiplier = 1;
; 2870 : 	else if (lDiskFree->QuadPart < BYTES_PER_MB)

  00072	85 c0		 test	 eax, eax
  00074	7f 61		 jg	 SHORT $LN27@PrintFreeS
  00076	7c 08		 jl	 SHORT $LN38@PrintFreeS
  00078	81 f9 00 00 10
	00		 cmp	 ecx, 1048576		; 00100000H
  0007e	73 26		 jae	 SHORT $LN42@PrintFreeS
$LN38@PrintFreeS:

; 2885 : 	}
; 2886 : 	else if (nMultiplier == BYTES_PER_KB)
; 2887 : 	{
; 2888 : 		if (bHiddenVol && !bHiddenVolHost)	// If it's a hidden volume

  00080	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00085	bd 00 04 00 00	 mov	 ebp, 1024		; 00000400H
  0008a	89 6c 24 10	 mov	 DWORD PTR _nMultiplier$[esp+536], ebp
  0008e	85 c0		 test	 eax, eax
  00090	74 7f		 je	 SHORT $LN18@PrintFreeS
  00092	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  00098	85 c9		 test	 ecx, ecx
  0009a	75 75		 jne	 SHORT $LN18@PrintFreeS

; 2889 : 			nResourceString = "MAX_HIDVOL_SIZE_KB";

  0009c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BD@NCFPMHAA@MAX_HIDVOL_SIZE_KB?$AA@
  000a1	e9 ac 00 00 00	 jmp	 $LN4@PrintFreeS
$LN42@PrintFreeS:

; 2871 : 		nMultiplier = BYTES_PER_KB;
; 2872 : 	else if (lDiskFree->QuadPart < BYTES_PER_GB)

  000a6	85 c0		 test	 eax, eax
  000a8	7f 2d		 jg	 SHORT $LN27@PrintFreeS
  000aa	7c 08		 jl	 SHORT $LN39@PrintFreeS
  000ac	81 f9 00 00 00
	40		 cmp	 ecx, 1073741824		; 40000000H
  000b2	73 23		 jae	 SHORT $LN27@PrintFreeS
$LN39@PrintFreeS:

; 2894 : 	}
; 2895 : 	else if (nMultiplier == BYTES_PER_MB)
; 2896 : 	{
; 2897 : 		if (bHiddenVol && !bHiddenVolHost)	// If it's a hidden volume

  000b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  000b9	bd 00 00 10 00	 mov	 ebp, 1048576		; 00100000H
  000be	89 6c 24 10	 mov	 DWORD PTR _nMultiplier$[esp+536], ebp
  000c2	85 c0		 test	 eax, eax
  000c4	74 62		 je	 SHORT $LN12@PrintFreeS
  000c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  000cc	85 c9		 test	 ecx, ecx
  000ce	75 58		 jne	 SHORT $LN12@PrintFreeS

; 2898 : 			nResourceString = "MAX_HIDVOL_SIZE_MB";

  000d0	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BD@NGNCLLLC@MAX_HIDVOL_SIZE_MB?$AA@
  000d5	eb 7b		 jmp	 SHORT $LN4@PrintFreeS
$LN27@PrintFreeS:

; 2905 : 	{
; 2906 : 		if (bHiddenVol && !bHiddenVolHost)	// If it's a hidden volume

  000d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  000dc	bd 00 00 00 40	 mov	 ebp, 1073741824		; 40000000H
  000e1	89 6c 24 10	 mov	 DWORD PTR _nMultiplier$[esp+536], ebp
  000e5	85 c0		 test	 eax, eax
  000e7	74 56		 je	 SHORT $LN7@PrintFreeS
  000e9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  000ef	85 c9		 test	 ecx, ecx
  000f1	75 4c		 jne	 SHORT $LN7@PrintFreeS

; 2907 : 			nResourceString = "MAX_HIDVOL_SIZE_GB";

  000f3	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BD@NLEFDOGE@MAX_HIDVOL_SIZE_GB?$AA@
  000f8	eb 58		 jmp	 SHORT $LN4@PrintFreeS
$LN24@PrintFreeS:

; 2881 : 		else if (bDevice)

  000fa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  00101	74 07		 je	 SHORT $LN22@PrintFreeS

; 2882 : 			nResourceString = "DEVICE_FREE_BYTES";

  00103	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@DDPKPAD@DEVICE_FREE_BYTES?$AA@

; 2883 : 		else

  00108	eb 48		 jmp	 SHORT $LN4@PrintFreeS
$LN22@PrintFreeS:

; 2884 : 			nResourceString = "DISK_FREE_BYTES";

  0010a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BA@GNIBCOCE@DISK_FREE_BYTES?$AA@
  0010f	eb 41		 jmp	 SHORT $LN4@PrintFreeS
$LN18@PrintFreeS:

; 2890 : 		else if (bDevice)

  00111	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  00118	74 07		 je	 SHORT $LN16@PrintFreeS

; 2891 : 			nResourceString = "DEVICE_FREE_KB";

  0011a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0P@IKBGAMLK@DEVICE_FREE_KB?$AA@

; 2892 : 		else

  0011f	eb 31		 jmp	 SHORT $LN4@PrintFreeS
$LN16@PrintFreeS:

; 2893 : 			nResourceString = "DISK_FREE_KB";

  00121	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0N@LDEICJLE@DISK_FREE_KB?$AA@
  00126	eb 2a		 jmp	 SHORT $LN4@PrintFreeS
$LN12@PrintFreeS:

; 2899 : 		else if (bDevice)

  00128	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  0012f	74 07		 je	 SHORT $LN10@PrintFreeS

; 2900 : 			nResourceString = "DEVICE_FREE_MB";

  00131	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0P@IOJLHAAI@DEVICE_FREE_MB?$AA@

; 2901 : 		else

  00136	eb 1a		 jmp	 SHORT $LN4@PrintFreeS
$LN10@PrintFreeS:

; 2902 : 			nResourceString = "DISK_FREE_MB";

  00138	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0N@LHMFFFAG@DISK_FREE_MB?$AA@

; 2903 : 	}
; 2904 :  	else 

  0013d	eb 13		 jmp	 SHORT $LN4@PrintFreeS
$LN7@PrintFreeS:

; 2908 : 		else if (bDevice)

  0013f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice

; 2909 : 			nResourceString = "DEVICE_FREE_GB";

  00146	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0P@IDAMPFNO@DEVICE_FREE_GB?$AA@
  0014b	75 05		 jne	 SHORT $LN4@PrintFreeS

; 2910 : 		else
; 2911 : 			nResourceString = "DISK_FREE_GB";

  0014d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0N@LKFCNANA@DISK_FREE_GB?$AA@
$LN4@PrintFreeS:

; 2912 : 	}
; 2913 : 
; 2914 : 	if (bHiddenVol && !bHiddenVolHost)	// If it's a hidden volume

  00152	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00158	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  0015e	85 c9		 test	 ecx, ecx
  00160	74 48		 je	 SHORT $LN3@PrintFreeS
  00162	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  00168	85 c9		 test	 ecx, ecx
  0016a	75 3e		 jne	 SHORT $LN3@PrintFreeS

; 2915 : 	{
; 2916 : 		_snwprintf (szTmp2, sizeof szTmp2 / 2, GetString (nResourceString), ((double) lDiskFree->QuadPart) / nMultiplier);

  0016c	df 2e		 fild	 QWORD PTR [esi]
  0016e	83 ec 08	 sub	 esp, 8
  00171	da 74 24 18	 fidiv	 DWORD PTR _nMultiplier$[esp+544]
  00175	dd 1c 24	 fstp	 QWORD PTR [esp]
  00178	50		 push	 eax
  00179	e8 00 00 00 00	 call	 _GetString
  0017e	83 c4 04	 add	 esp, 4
  00181	50		 push	 eax
  00182	8d 54 24 20	 lea	 edx, DWORD PTR _szTmp2$[esp+548]
  00186	68 00 01 00 00	 push	 256			; 00000100H
  0018b	52		 push	 edx
  0018c	e8 00 00 00 00	 call	 __snwprintf
  00191	83 c4 14	 add	 esp, 20			; 00000014H

; 2917 : 		SetWindowTextW (GetDlgItem (hwndTextBox, IDC_SIZEBOX), szTmp2);

  00194	8d 44 24 14	 lea	 eax, DWORD PTR _szTmp2$[esp+536]
  00198	50		 push	 eax
  00199	68 0e 04 00 00	 push	 1038			; 0000040eH
  0019e	53		 push	 ebx
  0019f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  001a5	50		 push	 eax
  001a6	ff d7		 call	 edi

; 2918 : 	}
; 2919 : 	else

  001a8	eb 29		 jmp	 SHORT $LN2@PrintFreeS
$LN3@PrintFreeS:

; 2920 : 		_snwprintf (szTmp2, sizeof szTmp2 / 2, GetString (nResourceString), lpszDrive, ((double) lDiskFree->QuadPart) / nMultiplier);

  001aa	df 2e		 fild	 QWORD PTR [esi]
  001ac	83 ec 08	 sub	 esp, 8
  001af	da 74 24 18	 fidiv	 DWORD PTR _nMultiplier$[esp+544]
  001b3	dd 1c 24	 fstp	 QWORD PTR [esp]
  001b6	52		 push	 edx
  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 _GetString
  001bd	83 c4 04	 add	 esp, 4
  001c0	50		 push	 eax
  001c1	8d 4c 24 24	 lea	 ecx, DWORD PTR _szTmp2$[esp+552]
  001c5	68 00 01 00 00	 push	 256			; 00000100H
  001ca	51		 push	 ecx
  001cb	e8 00 00 00 00	 call	 __snwprintf
  001d0	83 c4 18	 add	 esp, 24			; 00000018H
$LN2@PrintFreeS:

; 2921 : 
; 2922 : 	SetWindowTextW (hwndTextBox, szTmp2);

  001d3	8d 54 24 14	 lea	 edx, DWORD PTR _szTmp2$[esp+536]
  001d7	52		 push	 edx
  001d8	53		 push	 ebx
  001d9	ff d7		 call	 edi

; 2923 : 
; 2924 : 	if (lDiskFree->QuadPart % (__int64) BYTES_PER_MB != 0)

  001db	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  001de	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001e0	6a 00		 push	 0
  001e2	68 00 00 10 00	 push	 1048576			; 00100000H
  001e7	50		 push	 eax
  001e8	51		 push	 ecx
  001e9	e8 00 00 00 00	 call	 __allrem
  001ee	0b c2		 or	 eax, edx

; 2925 : 		nMultiplier = BYTES_PER_KB;

  001f0	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  001f5	75 02		 jne	 SHORT $LN1@PrintFreeS

; 2926 : 
; 2927 : 	return nMultiplier;

  001f7	8b c5		 mov	 eax, ebp
$LN1@PrintFreeS:

; 2928 : }

  001f9	8b 8c 24 14 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+536]
  00200	5f		 pop	 edi
  00201	5e		 pop	 esi
  00202	5d		 pop	 ebp
  00203	5b		 pop	 ebx
  00204	33 cc		 xor	 ecx, esp
  00206	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020b	81 c4 08 02 00
	00		 add	 esp, 520		; 00000208H
  00211	c3		 ret	 0
_PrintFreeSpace ENDP
_TEXT	ENDS
PUBLIC	??_C@_1M@KGONCMNM@?$AA?$CF?$AAs?$AA?6?$AA?$CF?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BC@LBACDGOD@CANNOT_CALC_SPACE?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_DisplaySizingErrorText
EXTRN	__imp__wsprintfW:PROC
EXTRN	_translateWin32Error:PROC
;	COMDAT ??_C@_1M@KGONCMNM@?$AA?$CF?$AAs?$AA?6?$AA?$CF?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1M@KGONCMNM@?$AA?$CF?$AAs?$AA?6?$AA?$CF?$AAs?$AA?$AA@ DB '%', 00H, 's'
	DB	00H, 0aH, 00H, '%', 00H, 's', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LBACDGOD@CANNOT_CALC_SPACE?$AA@
CONST	SEGMENT
??_C@_0BC@LBACDGOD@CANNOT_CALC_SPACE?$AA@ DB 'CANNOT_CALC_SPACE', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _DisplaySizingErrorText
_TEXT	SEGMENT
_szTmp$ = -4100						; size = 2048
_szTmp2$132901 = -2052					; size = 2048
__$ArrayPad$ = -4					; size = 4
_hwndTextBox$ = 8					; size = 4
_DisplaySizingErrorText PROC				; COMDAT

; 2931 : {

  00000	b8 04 10 00 00	 mov	 eax, 4100		; 00001004H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 00 10
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+4100], eax
  00018	56		 push	 esi
  00019	8b b4 24 0c 10
	00 00		 mov	 esi, DWORD PTR _hwndTextBox$[esp+4100]

; 2932 : 	wchar_t szTmp[1024];
; 2933 : 
; 2934 : 	if (translateWin32Error (szTmp, sizeof (szTmp) / sizeof(szTmp[0])))

  00020	8d 44 24 04	 lea	 eax, DWORD PTR _szTmp$[esp+4104]
  00024	68 00 04 00 00	 push	 1024			; 00000400H
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _translateWin32Error
  0002f	83 c4 08	 add	 esp, 8
  00032	85 c0		 test	 eax, eax
  00034	74 4e		 je	 SHORT $LN2@DisplaySiz

; 2935 : 	{
; 2936 : 		wchar_t szTmp2[1024];
; 2937 : 		wsprintfW (szTmp2, L"%s\n%s", GetString ("CANNOT_CALC_SPACE"), szTmp);

  00036	8d 4c 24 04	 lea	 ecx, DWORD PTR _szTmp$[esp+4104]
  0003a	51		 push	 ecx
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LBACDGOD@CANNOT_CALC_SPACE?$AA@
  00040	e8 00 00 00 00	 call	 _GetString
  00045	83 c4 04	 add	 esp, 4
  00048	50		 push	 eax
  00049	8d 94 24 0c 08
	00 00		 lea	 edx, DWORD PTR _szTmp2$132901[esp+4112]
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_1M@KGONCMNM@?$AA?$CF?$AAs?$AA?6?$AA?$CF?$AAs?$AA?$AA@
  00055	52		 push	 edx
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  0005c	83 c4 10	 add	 esp, 16			; 00000010H

; 2938 : 		SetWindowTextW (hwndTextBox, szTmp2);

  0005f	8d 84 24 04 08
	00 00		 lea	 eax, DWORD PTR _szTmp2$132901[esp+4104]
  00066	50		 push	 eax
  00067	56		 push	 esi
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
  0006e	5e		 pop	 esi

; 2943 : 	}
; 2944 : }

  0006f	8b 8c 24 00 10
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+4100]
  00076	33 cc		 xor	 ecx, esp
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	81 c4 04 10 00
	00		 add	 esp, 4100		; 00001004H
  00083	c3		 ret	 0
$LN2@DisplaySiz:

; 2939 : 	}
; 2940 : 	else
; 2941 : 	{
; 2942 : 		SetWindowTextA(hwndTextBox, "");

  00084	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00089	56		 push	 esi
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 2943 : 	}
; 2944 : }

  00090	8b 8c 24 04 10
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+4104]
  00097	5e		 pop	 esi
  00098	33 cc		 xor	 ecx, esp
  0009a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009f	81 c4 04 10 00
	00		 add	 esp, 4100		; 00001004H
  000a5	c3		 ret	 0
_DisplaySizingErrorText ENDP
_TEXT	ENDS
PUBLIC	_EnableDisableFileNext
EXTRN	__imp__SetFocus@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _EnableDisableFileNext
_TEXT	SEGMENT
_hComboBox$ = 8						; size = 4
_hMainButton$ = 12					; size = 4
_EnableDisableFileNext PROC				; COMDAT

; 2947 : {

  00000	56		 push	 esi

; 2948 : 	LPARAM nIndex = SendMessage (hComboBox, CB_GETCURSEL, 0, 0);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _hComboBox$[esp]
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	68 47 01 00 00	 push	 327			; 00000147H
  0000e	56		 push	 esi
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 2949 : 	if (bHistory && nIndex == CB_ERR)

  00015	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bHistory, 0
  0001c	74 1b		 je	 SHORT $LN2@EnableDisa
  0001e	83 f8 ff	 cmp	 eax, -1
  00021	75 16		 jne	 SHORT $LN2@EnableDisa

; 2950 : 	{
; 2951 : 		EnableWindow (hMainButton, FALSE);

  00023	8b 44 24 0c	 mov	 eax, DWORD PTR _hMainButton$[esp]
  00027	6a 00		 push	 0
  00029	50		 push	 eax

; 2952 : 		SetFocus (hComboBox);
; 2953 : 	}
; 2954 : 	else
; 2955 : 	{
; 2956 : 		EnableWindow (hMainButton, TRUE);

  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 2957 : 		SetFocus (hMainButton);

  00030	56		 push	 esi
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4
  00037	5e		 pop	 esi

; 2958 : 	}
; 2959 : }

  00038	c3		 ret	 0
$LN2@EnableDisa:

; 2952 : 		SetFocus (hComboBox);
; 2953 : 	}
; 2954 : 	else
; 2955 : 	{
; 2956 : 		EnableWindow (hMainButton, TRUE);

  00039	8b 74 24 0c	 mov	 esi, DWORD PTR _hMainButton$[esp]
  0003d	6a 01		 push	 1
  0003f	56		 push	 esi
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 2957 : 		SetFocus (hMainButton);

  00046	56		 push	 esi
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4
  0004d	5e		 pop	 esi

; 2958 : 	}
; 2959 : }

  0004e	c3		 ret	 0
_EnableDisableFileNext ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@GFCNKOPI@CANT_ACCESS_VOL?$AA@		; `string'
PUBLIC	_IsSparseFile
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__SetFileTime@16:PROC
EXTRN	__imp__GetFileInformationByHandle@8:PROC
EXTRN	__imp__GetFileTime@16:PROC
EXTRN	_bPreserveTimestamp:DWORD
EXTRN	__imp__MessageBoxW@16:PROC
EXTRN	_lpszTitle:DWORD
EXTRN	__imp__CreateFileA@28:PROC
;	COMDAT ??_C@_0BA@GFCNKOPI@CANT_ACCESS_VOL?$AA@
CONST	SEGMENT
??_C@_0BA@GFCNKOPI@CANT_ACCESS_VOL?$AA@ DB 'CANT_ACCESS_VOL', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _IsSparseFile
_TEXT	SEGMENT
_ftLastAccessTime$ = -60				; size = 8
_bhFileInfo$ = -52					; size = 52
_hwndDlg$ = 8						; size = 4
_IsSparseFile PROC					; COMDAT

; 2963 : {

  00000	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00003	56		 push	 esi
  00004	57		 push	 edi

; 2964 : 	HANDLE hFile;
; 2965 : 	BY_HANDLE_FILE_INFORMATION bhFileInfo;
; 2966 : 
; 2967 : 	FILETIME ftLastAccessTime;
; 2968 : 	BOOL bTimeStampValid = FALSE;

  00005	33 f6		 xor	 esi, esi

; 2969 : 
; 2970 : 	BOOL retCode = FALSE;
; 2971 : 
; 2972 : 	hFile = CreateFile (szFileName, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00007	56		 push	 esi
  00008	56		 push	 esi
  00009	6a 03		 push	 3
  0000b	56		 push	 esi
  0000c	6a 03		 push	 3
  0000e	68 00 00 00 c0	 push	 -1073741824		; c0000000H
  00013	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0001e	8b f8		 mov	 edi, eax

; 2973 : 
; 2974 : 	if (hFile == INVALID_HANDLE_VALUE)

  00020	83 ff ff	 cmp	 edi, -1
  00023	75 29		 jne	 SHORT $LN5@IsSparseFi

; 2975 : 	{
; 2976 : 		MessageBoxW (hwndDlg, GetString ("CANT_ACCESS_VOL"), lpszTitle, ICON_HAND);

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  0002a	6a 10		 push	 16			; 00000010H
  0002c	50		 push	 eax
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GFCNKOPI@CANT_ACCESS_VOL?$AA@
  00032	e8 00 00 00 00	 call	 _GetString
  00037	8b 4c 24 54	 mov	 ecx, DWORD PTR _hwndDlg$[esp+76]
  0003b	83 c4 04	 add	 esp, 4
  0003e	50		 push	 eax
  0003f	51		 push	 ecx
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  00046	5f		 pop	 edi

; 2977 : 		return FALSE;

  00047	33 c0		 xor	 eax, eax
  00049	5e		 pop	 esi

; 2999 : }

  0004a	83 c4 3c	 add	 esp, 60			; 0000003cH
  0004d	c3		 ret	 0
$LN5@IsSparseFi:

; 2978 : 	}
; 2979 : 
; 2980 : 	if (bPreserveTimestamp)

  0004e	39 35 00 00 00
	00		 cmp	 DWORD PTR _bPreserveTimestamp, esi
  00054	74 18		 je	 SHORT $LN3@IsSparseFi

; 2981 : 	{
; 2982 : 		if (GetFileTime (hFile, NULL, &ftLastAccessTime, NULL) == 0)

  00056	6a 00		 push	 0
  00058	8d 54 24 0c	 lea	 edx, DWORD PTR _ftLastAccessTime$[esp+72]
  0005c	52		 push	 edx
  0005d	6a 00		 push	 0
  0005f	57		 push	 edi
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileTime@16
  00066	8b f0		 mov	 esi, eax
  00068	f7 de		 neg	 esi
  0006a	1b f6		 sbb	 esi, esi
  0006c	f7 de		 neg	 esi
$LN3@IsSparseFi:
  0006e	53		 push	 ebx

; 2983 : 			bTimeStampValid = FALSE;
; 2984 : 		else
; 2985 : 			bTimeStampValid = TRUE;
; 2986 : 	}
; 2987 : 
; 2988 : 	bhFileInfo.dwFileAttributes = 0;
; 2989 : 
; 2990 : 	GetFileInformationByHandle(hFile, &bhFileInfo);

  0006f	8d 44 24 14	 lea	 eax, DWORD PTR _bhFileInfo$[esp+72]
  00073	50		 push	 eax
  00074	57		 push	 edi
  00075	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR _bhFileInfo$[esp+80], 0
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileInformationByHandle@8

; 2991 : 
; 2992 : 	retCode = bhFileInfo.dwFileAttributes & FILE_ATTRIBUTE_SPARSE_FILE;

  00083	8b 5c 24 14	 mov	 ebx, DWORD PTR _bhFileInfo$[esp+72]
  00087	81 e3 00 02 00
	00		 and	 ebx, 512		; 00000200H

; 2993 : 
; 2994 : 	if (bTimeStampValid)

  0008d	85 f6		 test	 esi, esi
  0008f	74 10		 je	 SHORT $LN1@IsSparseFi

; 2995 : 		SetFileTime (hFile, NULL, &ftLastAccessTime, NULL);

  00091	6a 00		 push	 0
  00093	8d 4c 24 10	 lea	 ecx, DWORD PTR _ftLastAccessTime$[esp+76]
  00097	51		 push	 ecx
  00098	6a 00		 push	 0
  0009a	57		 push	 edi
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFileTime@16
$LN1@IsSparseFi:

; 2996 : 
; 2997 : 	CloseHandle (hFile);

  000a1	57		 push	 edi
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 2998 : 	return retCode;

  000a8	8b c3		 mov	 eax, ebx
  000aa	5b		 pop	 ebx
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi

; 2999 : }

  000ad	83 c4 3c	 add	 esp, 60			; 0000003cH
  000b0	c3		 ret	 0
_IsSparseFile ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@FNOFFGJI@CANT_GET_VOLSIZE?$AA@	; `string'
PUBLIC	_GetFileVolSize
EXTRN	__imp__GetFileSizeEx@8:PROC
;	COMDAT ??_C@_0BB@FNOFFGJI@CANT_GET_VOLSIZE?$AA@
CONST	SEGMENT
??_C@_0BB@FNOFFGJI@CANT_GET_VOLSIZE?$AA@ DB 'CANT_GET_VOLSIZE', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _GetFileVolSize
_TEXT	SEGMENT
_ftLastAccessTime$ = -16				; size = 8
_fileSize$ = -8						; size = 8
_hwndDlg$ = 8						; size = 4
_size$ = 12						; size = 4
_GetFileVolSize PROC					; COMDAT

; 3004 : {

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	56		 push	 esi
  00004	57		 push	 edi

; 3005 : 	LARGE_INTEGER fileSize;
; 3006 : 	HANDLE hFile;
; 3007 : 
; 3008 : 	FILETIME ftLastAccessTime;
; 3009 : 	BOOL bTimeStampValid = FALSE;

  00005	33 f6		 xor	 esi, esi

; 3010 : 
; 3011 : 	hFile = CreateFile (szFileName, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00007	56		 push	 esi
  00008	56		 push	 esi
  00009	6a 03		 push	 3
  0000b	56		 push	 esi
  0000c	6a 03		 push	 3
  0000e	68 00 00 00 c0	 push	 -1073741824		; c0000000H
  00013	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0001e	8b f8		 mov	 edi, eax

; 3012 : 
; 3013 : 	if (hFile == INVALID_HANDLE_VALUE)

  00020	83 ff ff	 cmp	 edi, -1
  00023	75 29		 jne	 SHORT $LN7@GetFileVol

; 3014 : 	{
; 3015 : 		MessageBoxW (hwndDlg, GetString ("CANT_ACCESS_VOL"), lpszTitle, ICON_HAND);

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  0002a	6a 10		 push	 16			; 00000010H
  0002c	50		 push	 eax
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GFCNKOPI@CANT_ACCESS_VOL?$AA@
  00032	e8 00 00 00 00	 call	 _GetString
  00037	8b 4c 24 28	 mov	 ecx, DWORD PTR _hwndDlg$[esp+32]
  0003b	83 c4 04	 add	 esp, 4
  0003e	50		 push	 eax
  0003f	51		 push	 ecx
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  00046	5f		 pop	 edi

; 3016 : 		return FALSE;

  00047	33 c0		 xor	 eax, eax
  00049	5e		 pop	 esi

; 3044 : }

  0004a	83 c4 10	 add	 esp, 16			; 00000010H
  0004d	c3		 ret	 0
$LN7@GetFileVol:

; 3017 : 	}
; 3018 : 
; 3019 : 	if (bPreserveTimestamp)

  0004e	39 35 00 00 00
	00		 cmp	 DWORD PTR _bPreserveTimestamp, esi
  00054	74 18		 je	 SHORT $LN5@GetFileVol

; 3020 : 	{
; 3021 : 		if (GetFileTime (hFile, NULL, &ftLastAccessTime, NULL) == 0)

  00056	6a 00		 push	 0
  00058	8d 54 24 0c	 lea	 edx, DWORD PTR _ftLastAccessTime$[esp+28]
  0005c	52		 push	 edx
  0005d	6a 00		 push	 0
  0005f	57		 push	 edi
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileTime@16
  00066	8b f0		 mov	 esi, eax
  00068	f7 de		 neg	 esi
  0006a	1b f6		 sbb	 esi, esi
  0006c	f7 de		 neg	 esi
$LN5@GetFileVol:

; 3022 : 			bTimeStampValid = FALSE;
; 3023 : 		else
; 3024 : 			bTimeStampValid = TRUE;
; 3025 : 	}
; 3026 : 
; 3027 : 	if (GetFileSizeEx(hFile, &fileSize) == 0)

  0006e	8d 44 24 10	 lea	 eax, DWORD PTR _fileSize$[esp+24]
  00072	50		 push	 eax
  00073	57		 push	 edi
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSizeEx@8
  0007a	85 c0		 test	 eax, eax
  0007c	75 45		 jne	 SHORT $LN3@GetFileVol

; 3028 : 	{
; 3029 : 		MessageBoxW (hwndDlg, GetString ("CANT_GET_VOLSIZE"), lpszTitle, ICON_HAND);

  0007e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  00084	6a 10		 push	 16			; 00000010H
  00086	51		 push	 ecx
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FNOFFGJI@CANT_GET_VOLSIZE?$AA@
  0008c	e8 00 00 00 00	 call	 _GetString
  00091	8b 54 24 28	 mov	 edx, DWORD PTR _hwndDlg$[esp+32]
  00095	83 c4 04	 add	 esp, 4
  00098	50		 push	 eax
  00099	52		 push	 edx
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 3030 : 
; 3031 : 		if (bTimeStampValid)

  000a0	85 f6		 test	 esi, esi
  000a2	74 10		 je	 SHORT $LN2@GetFileVol

; 3032 : 			SetFileTime (hFile, NULL, &ftLastAccessTime, NULL);

  000a4	6a 00		 push	 0
  000a6	8d 44 24 0c	 lea	 eax, DWORD PTR _ftLastAccessTime$[esp+28]
  000aa	50		 push	 eax
  000ab	6a 00		 push	 0
  000ad	57		 push	 edi
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFileTime@16
$LN2@GetFileVol:

; 3033 : 
; 3034 : 		CloseHandle (hFile);

  000b4	57		 push	 edi
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  000bb	5f		 pop	 edi

; 3035 : 		return FALSE;

  000bc	33 c0		 xor	 eax, eax
  000be	5e		 pop	 esi

; 3044 : }

  000bf	83 c4 10	 add	 esp, 16			; 00000010H
  000c2	c3		 ret	 0
$LN3@GetFileVol:

; 3036 : 	}
; 3037 : 
; 3038 : 	if (bTimeStampValid)

  000c3	85 f6		 test	 esi, esi
  000c5	74 10		 je	 SHORT $LN1@GetFileVol

; 3039 : 		SetFileTime (hFile, NULL, &ftLastAccessTime, NULL);

  000c7	6a 00		 push	 0
  000c9	8d 4c 24 0c	 lea	 ecx, DWORD PTR _ftLastAccessTime$[esp+28]
  000cd	51		 push	 ecx
  000ce	6a 00		 push	 0
  000d0	57		 push	 edi
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFileTime@16
$LN1@GetFileVol:

; 3040 : 
; 3041 : 	CloseHandle (hFile);

  000d7	57		 push	 edi
  000d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 3042 : 	*size = fileSize.QuadPart;

  000de	8b 44 24 20	 mov	 eax, DWORD PTR _size$[esp+20]
  000e2	8b 54 24 10	 mov	 edx, DWORD PTR _fileSize$[esp+24]
  000e6	8b 4c 24 14	 mov	 ecx, DWORD PTR _fileSize$[esp+28]
  000ea	5f		 pop	 edi
  000eb	89 10		 mov	 DWORD PTR [eax], edx
  000ed	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 3043 : 	return TRUE;

  000f0	b8 01 00 00 00	 mov	 eax, 1
  000f5	5e		 pop	 esi

; 3044 : }

  000f6	83 c4 10	 add	 esp, 16			; 00000010H
  000f9	c3		 ret	 0
_GetFileVolSize ENDP
_TEXT	ENDS
PUBLIC	??_C@_09BFNCKGCL@PATH_ITEM?$AA@			; `string'
PUBLIC	??_C@_09DBGAMMMC@SIZE_ITEM?$AA@			; `string'
PUBLIC	??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@ ; `string'
PUBLIC	??_C@_0L@PEDCDHCM@LABEL_ITEM?$AA@		; `string'
PUBLIC	??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@		; `string'
PUBLIC	??_C@_19KHPJIBCC@?$AA?$CF?$AAh?$AAc?$AA?3?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BC@ELOGDKJ@DRIVE_LETTER_ITEM?$AA@	; `string'
PUBLIC	??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@		; `string'
PUBLIC	??_C@_0BP@IMKLJEFC@ERASE_FILES_BY_CREATING_VOLUME?$AA@ ; `string'
PUBLIC	??_C@_0DD@GFFEJLFD@OVERWRITEPROMPT_DEVICE_SECOND_WA@ ; `string'
PUBLIC	__real@42b00000
PUBLIC	__real@4058ff5c28f5c28f
PUBLIC	__real@42c80000
PUBLIC	??_C@_0BH@JPJDALOG@OVERWRITEPROMPT_DEVICE?$AA@	; `string'
PUBLIC	??_C@_0BL@IMNAFHOP@NONSYS_INPLACE_ENC_CONFIRM?$AA@ ; `string'
PUBLIC	??_C@_0CL@KCMNHFDO@OVERWRITEPROMPT_DEVICE_HIDDEN_OS@ ; `string'
PUBLIC	??_C@_1BK@GHMHFLJL@?$AA?5?$AA?$CI?$AA?$CF?$AAh?$AAc?$AA?3?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@LDCEEKNB@?$AA?5?$AA?$CI?$AA?$CF?$AAh?$AAc?$AA?3?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	_AskMultiChoice:PROC
EXTRN	_GetSizeString:PROC
EXTRN	_GetStatsFreeSpaceOnPartition:PROC
EXTRN	_GetDriveLabel:PROC
EXTRN	_GetPathType:PROC
EXTRN	_GetDiskDeviceDriveLetter:PROC
EXTRN	_ToUNICODE:PROC
;	COMDAT ??_C@_09BFNCKGCL@PATH_ITEM?$AA@
CONST	SEGMENT
??_C@_09BFNCKGCL@PATH_ITEM?$AA@ DB 'PATH_ITEM', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DBGAMMMC@SIZE_ITEM?$AA@
CONST	SEGMENT
??_C@_09DBGAMMMC@SIZE_ITEM?$AA@ DB 'SIZE_ITEM', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@
CONST	SEGMENT
??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@ DB 'NOT_APPLICABL'
	DB	'E_OR_NOT_AVAILABLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PEDCDHCM@LABEL_ITEM?$AA@
CONST	SEGMENT
??_C@_0L@PEDCDHCM@LABEL_ITEM?$AA@ DB 'LABEL_ITEM', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@ DB 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_19KHPJIBCC@?$AA?$CF?$AAh?$AAc?$AA?3?$AA?$AA@
CONST	SEGMENT
??_C@_19KHPJIBCC@?$AA?$CF?$AAh?$AAc?$AA?3?$AA?$AA@ DB '%', 00H, 'h', 00H, 'c'
	DB	00H, ':', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ELOGDKJ@DRIVE_LETTER_ITEM?$AA@
CONST	SEGMENT
??_C@_0BC@ELOGDKJ@DRIVE_LETTER_ITEM?$AA@ DB 'DRIVE_LETTER_ITEM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@ DB 0aH, 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@IMKLJEFC@ERASE_FILES_BY_CREATING_VOLUME?$AA@
CONST	SEGMENT
??_C@_0BP@IMKLJEFC@ERASE_FILES_BY_CREATING_VOLUME?$AA@ DB 'ERASE_FILES_BY'
	DB	'_CREATING_VOLUME', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@GFFEJLFD@OVERWRITEPROMPT_DEVICE_SECOND_WA@
CONST	SEGMENT
??_C@_0DD@GFFEJLFD@OVERWRITEPROMPT_DEVICE_SECOND_WA@ DB 'OVERWRITEPROMPT_'
	DB	'DEVICE_SECOND_WARNING_LOTS_OF_DATA', 00H	; `string'
CONST	ENDS
;	COMDAT __real@42b00000
CONST	SEGMENT
__real@42b00000 DD 042b00000r			; 88
CONST	ENDS
;	COMDAT __real@4058ff5c28f5c28f
CONST	SEGMENT
__real@4058ff5c28f5c28f DQ 04058ff5c28f5c28fr	; 99.99
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT ??_C@_0BH@JPJDALOG@OVERWRITEPROMPT_DEVICE?$AA@
CONST	SEGMENT
??_C@_0BH@JPJDALOG@OVERWRITEPROMPT_DEVICE?$AA@ DB 'OVERWRITEPROMPT_DEVICE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IMNAFHOP@NONSYS_INPLACE_ENC_CONFIRM?$AA@
CONST	SEGMENT
??_C@_0BL@IMNAFHOP@NONSYS_INPLACE_ENC_CONFIRM?$AA@ DB 'NONSYS_INPLACE_ENC'
	DB	'_CONFIRM', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KCMNHFDO@OVERWRITEPROMPT_DEVICE_HIDDEN_OS@
CONST	SEGMENT
??_C@_0CL@KCMNHFDO@OVERWRITEPROMPT_DEVICE_HIDDEN_OS@ DB 'OVERWRITEPROMPT_'
	DB	'DEVICE_HIDDEN_OS_PARTITION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@GHMHFLJL@?$AA?5?$AA?$CI?$AA?$CF?$AAh?$AAc?$AA?3?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@GHMHFLJL@?$AA?5?$AA?$CI?$AA?$CF?$AAh?$AAc?$AA?3?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?$CJ?$AA?$AA@ DB ' '
	DB	00H, '(', 00H, '%', 00H, 'h', 00H, 'c', 00H, ':', 00H, ' ', 00H
	DB	'''', 00H, '%', 00H, 's', 00H, '''', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@LDCEEKNB@?$AA?5?$AA?$CI?$AA?$CF?$AAh?$AAc?$AA?3?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@LDCEEKNB@?$AA?5?$AA?$CI?$AA?$CF?$AAh?$AAc?$AA?3?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ DB ' '
	DB	00H, '(', 00H, '%', 00H, 'h', 00H, 'c', 00H, ':', 00H, '%', 00H
	DB	's', 00H, ')', 00H, 00H, 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _FinalPreTransformPrompts
_TEXT	SEGMENT
_percentFreeSpace$133016 = -26364			; size = 4
_bTmpIsPartition$132998 = -26360			; size = 4
_occupiedBytes$133017 = -26356				; size = 8
_tmpStr$133039 = -26348					; size = 20
_volumeLabel$132996 = -26328				; size = 256
_tmpMcOptionCancel$133024 = -26072			; size = 100
_drive$132995 = -25972					; size = 256
_deviceName$ = -25716					; size = 520
_tmpMcOption1$133023 = -25196				; size = 1000
_szTmp$ = -24196					; size = 8192
_tmpMcMsg$133022 = -16004				; size = 16000
__$ArrayPad$ = -4					; size = 4
_FinalPreTransformPrompts PROC				; COMDAT

; 3158 : {

  00000	b8 fc 66 00 00	 mov	 eax, 26364		; 000066fcH
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 f8 66
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+26364], eax
  00018	53		 push	 ebx
  00019	55		 push	 ebp

; 3159 : 	int x;
; 3160 : 	wchar_t szTmp[4096];
; 3161 : 	int driveNo;
; 3162 : 	WCHAR deviceName[MAX_PATH];
; 3163 : 
; 3164 : 	strcpy ((char *)deviceName, szFileName);

  0001a	33 db		 xor	 ebx, ebx
  0001c	56		 push	 esi
  0001d	33 c0		 xor	 eax, eax
  0001f	90		 npad	 1
$LL20@FinalPreTr:
  00020	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?szFileName@@3PADA[eax]
  00026	88 8c 04 94 02
	00 00		 mov	 BYTE PTR _deviceName$[esp+eax+26376], cl
  0002d	40		 inc	 eax
  0002e	3a cb		 cmp	 cl, bl
  00030	75 ee		 jne	 SHORT $LL20@FinalPreTr

; 3165 : 	ToUNICODE ((char *)deviceName);

  00032	8d 84 24 94 02
	00 00		 lea	 eax, DWORD PTR _deviceName$[esp+26376]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _ToUNICODE

; 3166 : 
; 3167 : 	driveNo = GetDiskDeviceDriveLetter (deviceName);

  0003f	8d 8c 24 98 02
	00 00		 lea	 ecx, DWORD PTR _deviceName$[esp+26380]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 _GetDiskDeviceDriveLetter

; 3168 : 
; 3169 : 	if (!(bHiddenVol && !bHiddenVolHost))	// Do not ask for permission to overwrite an existing volume if we're creating a hidden volume within it

  0004c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00052	83 c4 08	 add	 esp, 8
  00055	8b e8		 mov	 ebp, eax
  00057	85 d2		 test	 edx, edx
  00059	74 0d		 je	 SHORT $LN16@FinalPreTr
  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  00060	85 c0		 test	 eax, eax
  00062	0f 84 da 05 00
	00		 je	 $LN57@FinalPreTr
$LN16@FinalPreTr:

; 3170 : 	{
; 3171 : 		wchar_t drive[128];
; 3172 : 		wchar_t volumeLabel[128];
; 3173 : 		wchar_t *type;
; 3174 : 		BOOL bTmpIsPartition = FALSE;
; 3175 : 
; 3176 : 		type = GetPathType (szFileName, !bInPlaceEncNonSys, &bTmpIsPartition);

  00068	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  0006e	f7 da		 neg	 edx
  00070	8d 4c 24 10	 lea	 ecx, DWORD PTR _bTmpIsPartition$132998[esp+26376]
  00074	1b d2		 sbb	 edx, edx
  00076	51		 push	 ecx
  00077	42		 inc	 edx
  00078	52		 push	 edx
  00079	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  0007e	89 5c 24 1c	 mov	 DWORD PTR _bTmpIsPartition$132998[esp+26388], ebx
  00082	e8 00 00 00 00	 call	 _GetPathType
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008a	8b f0		 mov	 esi, eax

; 3177 : 
; 3178 : 		if (driveNo != -1)

  0008c	83 fd ff	 cmp	 ebp, -1
  0008f	74 57		 je	 SHORT $LN15@FinalPreTr

; 3179 : 		{
; 3180 : 			if (!GetDriveLabel (driveNo, volumeLabel, sizeof (volumeLabel)))

  00091	68 00 01 00 00	 push	 256			; 00000100H
  00096	8d 44 24 34	 lea	 eax, DWORD PTR _volumeLabel$132996[esp+26380]
  0009a	50		 push	 eax
  0009b	55		 push	 ebp
  0009c	e8 00 00 00 00	 call	 _GetDriveLabel
  000a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a4	85 c0		 test	 eax, eax
  000a6	75 2e		 jne	 SHORT $LN14@FinalPreTr

; 3181 : 				volumeLabel[0] = 0;

  000a8	33 c9		 xor	 ecx, ecx
  000aa	66 89 4c 24 30	 mov	 WORD PTR _volumeLabel$132996[esp+26376], cx
$LN21@FinalPreTr:

; 3182 : 
; 3183 : 			swprintf_s (drive, sizeof (drive)/2, volumeLabel[0] ? L" (%hc: '%s')" : L" (%hc:%s)", 'A' + driveNo, volumeLabel[0] ? volumeLabel : L"");

  000af	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  000b4	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1BE@LDCEEKNB@?$AA?5?$AA?$CI?$AA?$CF?$AAh?$AAc?$AA?3?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@
$LN24@FinalPreTr:
  000b9	51		 push	 ecx
  000ba	8d 55 41	 lea	 edx, DWORD PTR [ebp+65]
  000bd	52		 push	 edx
  000be	50		 push	 eax
  000bf	8d 84 24 a0 01
	00 00		 lea	 eax, DWORD PTR _drive$132995[esp+26388]
  000c6	68 80 00 00 00	 push	 128			; 00000080H
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 _swprintf_s
  000d1	83 c4 14	 add	 esp, 20			; 00000014H

; 3184 : 		}
; 3185 : 		else

  000d4	eb 23		 jmp	 SHORT $LN13@FinalPreTr
$LN14@FinalPreTr:

; 3182 : 
; 3183 : 			swprintf_s (drive, sizeof (drive)/2, volumeLabel[0] ? L" (%hc: '%s')" : L" (%hc:%s)", 'A' + driveNo, volumeLabel[0] ? volumeLabel : L"");

  000d6	66 39 5c 24 30	 cmp	 WORD PTR _volumeLabel$132996[esp+26376], bx
  000db	74 d2		 je	 SHORT $LN21@FinalPreTr
  000dd	8d 4c 24 30	 lea	 ecx, DWORD PTR _volumeLabel$132996[esp+26376]
  000e1	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1BK@GHMHFLJL@?$AA?5?$AA?$CI?$AA?$CF?$AAh?$AAc?$AA?3?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?$CJ?$AA?$AA@
  000e6	eb d1		 jmp	 SHORT $LN24@FinalPreTr
$LN15@FinalPreTr:

; 3186 : 		{
; 3187 : 			drive[0] = 0;

  000e8	33 c9		 xor	 ecx, ecx

; 3188 : 			volumeLabel[0] = 0;

  000ea	33 d2		 xor	 edx, edx
  000ec	66 89 8c 24 94
	01 00 00	 mov	 WORD PTR _drive$132995[esp+26376], cx
  000f4	66 89 54 24 30	 mov	 WORD PTR _volumeLabel$132996[esp+26376], dx
$LN13@FinalPreTr:

; 3189 : 		}
; 3190 : 
; 3191 : 		if (bHiddenOS && bHiddenVolHost)

  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  000fe	85 c0		 test	 eax, eax
  00100	74 37		 je	 SHORT $LN12@FinalPreTr
  00102	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  00108	85 c9		 test	 ecx, ecx
  0010a	74 2d		 je	 SHORT $LN12@FinalPreTr

; 3192 : 			swprintf (szTmp, GetString ("OVERWRITEPROMPT_DEVICE_HIDDEN_OS_PARTITION"), szFileName, drive);

  0010c	8d 94 24 94 01
	00 00		 lea	 edx, DWORD PTR _drive$132995[esp+26376]
  00113	52		 push	 edx
  00114	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00119	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@KCMNHFDO@OVERWRITEPROMPT_DEVICE_HIDDEN_OS@
  0011e	e8 00 00 00 00	 call	 _GetString
  00123	83 c4 04	 add	 esp, 4
  00126	50		 push	 eax
  00127	8d 84 24 90 08
	00 00		 lea	 eax, DWORD PTR _szTmp$[esp+26388]
  0012e	50		 push	 eax
  0012f	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf
  00134	83 c4 10	 add	 esp, 16			; 00000010H

; 3193 : 		else

  00137	eb 3c		 jmp	 SHORT $LN11@FinalPreTr
$LN12@FinalPreTr:

; 3194 : 			swprintf (szTmp, GetString (bInPlaceEncNonSys ? "NONSYS_INPLACE_ENC_CONFIRM" : "OVERWRITEPROMPT_DEVICE"), type, szFileName, drive);

  00139	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  0013f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BL@IMNAFHOP@NONSYS_INPLACE_ENC_CONFIRM?$AA@
  00144	85 c9		 test	 ecx, ecx
  00146	75 05		 jne	 SHORT $LN26@FinalPreTr
  00148	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BH@JPJDALOG@OVERWRITEPROMPT_DEVICE?$AA@
$LN26@FinalPreTr:
  0014d	8d 94 24 94 01
	00 00		 lea	 edx, DWORD PTR _drive$132995[esp+26376]
  00154	52		 push	 edx
  00155	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  0015a	56		 push	 esi
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 _GetString
  00161	83 c4 04	 add	 esp, 4
  00164	50		 push	 eax
  00165	8d 84 24 94 08
	00 00		 lea	 eax, DWORD PTR _szTmp$[esp+26392]
  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf
  00172	83 c4 14	 add	 esp, 20			; 00000014H
$LN11@FinalPreTr:

; 3195 : 
; 3196 : 
; 3197 : 		x = MessageBoxW (MainDlg, szTmp, lpszTitle, YES_NO | MB_ICONWARNING | (bInPlaceEncNonSys ? MB_DEFBUTTON1 : MB_DEFBUTTON2));

  00175	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  0017b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  00181	f7 d9		 neg	 ecx
  00183	1b c9		 sbb	 ecx, ecx
  00185	81 e1 00 ff ff
	ff		 and	 ecx, -256		; ffffff00H
  0018b	81 c1 00 01 00
	00		 add	 ecx, 256		; 00000100H
  00191	83 c9 34	 or	 ecx, 52			; 00000034H
  00194	51		 push	 ecx
  00195	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0019b	52		 push	 edx
  0019c	8d 84 24 8c 08
	00 00		 lea	 eax, DWORD PTR _szTmp$[esp+26384]
  001a3	50		 push	 eax
  001a4	51		 push	 ecx
  001a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 3198 : 		if (x != IDYES)

  001ab	83 f8 06	 cmp	 eax, 6
  001ae	74 1a		 je	 SHORT $LN10@FinalPreTr
$LN65@FinalPreTr:
  001b0	5e		 pop	 esi
  001b1	5d		 pop	 ebp

; 3199 : 			return FALSE;

  001b2	33 c0		 xor	 eax, eax
  001b4	5b		 pop	 ebx

; 3253 : 					}
; 3254 : 				}
; 3255 : 			}
; 3256 : 		}
; 3257 : 	}
; 3258 : 	return TRUE;
; 3259 : }

  001b5	8b 8c 24 f8 66
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+26364]
  001bc	33 cc		 xor	 ecx, esp
  001be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c3	81 c4 fc 66 00
	00		 add	 esp, 26364		; 000066fcH
  001c9	c3		 ret	 0
$LN10@FinalPreTr:

; 3200 : 
; 3201 : 
; 3202 : 		if (driveNo != -1 && bTmpIsPartition && !bInPlaceEncNonSys)

  001ca	83 fd ff	 cmp	 ebp, -1
  001cd	0f 84 6f 04 00
	00		 je	 $LN57@FinalPreTr
  001d3	39 5c 24 10	 cmp	 DWORD PTR _bTmpIsPartition$132998[esp+26376], ebx
  001d7	0f 84 65 04 00
	00		 je	 $LN57@FinalPreTr
  001dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  001e3	85 d2		 test	 edx, edx
  001e5	0f 85 57 04 00
	00		 jne	 $LN57@FinalPreTr

; 3203 : 		{
; 3204 : 			float percentFreeSpace = 100.0;

  001eb	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42c80000

; 3205 : 			__int64 occupiedBytes = 0;
; 3206 : 
; 3207 : 			// Do a second check. If we find that the partition contains more than 1GB of data or more than 12%
; 3208 : 			// of its space is occupied, we will display an extra warning, however, this time it won't be a Yes/No
; 3209 : 			// dialog box (because users often ignore such dialog boxes).
; 3210 : 
; 3211 : 			if (GetStatsFreeSpaceOnPartition (szFileName, &percentFreeSpace, &occupiedBytes, TRUE) != -1)

  001f1	6a 01		 push	 1
  001f3	8d 44 24 18	 lea	 eax, DWORD PTR _occupiedBytes$133017[esp+26380]
  001f7	d9 5c 24 10	 fstp	 DWORD PTR _percentFreeSpace$133016[esp+26380]
  001fb	50		 push	 eax
  001fc	8d 4c 24 14	 lea	 ecx, DWORD PTR _percentFreeSpace$133016[esp+26384]
  00200	51		 push	 ecx
  00201	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00206	89 5c 24 24	 mov	 DWORD PTR _occupiedBytes$133017[esp+26392], ebx
  0020a	89 5c 24 28	 mov	 DWORD PTR _occupiedBytes$133017[esp+26396], ebx
  0020e	e8 00 00 00 00	 call	 _GetStatsFreeSpaceOnPartition
  00213	23 c2		 and	 eax, edx
  00215	83 c4 10	 add	 esp, 16			; 00000010H
  00218	83 f8 ff	 cmp	 eax, -1
  0021b	0f 84 21 04 00
	00		 je	 $LN57@FinalPreTr

; 3212 : 			{
; 3213 : 				if (occupiedBytes > BYTES_PER_GB && percentFreeSpace < 99.99	// "percentFreeSpace < 99.99" is needed because an NTFS filesystem larger than several terabytes can have more than 1GB of data in use, even if there are no files stored on it.
; 3214 : 					|| percentFreeSpace < 88)		// A 24-MB NTFS filesystem has 11.5% of space in use even if there are no files stored on it.

  00221	39 5c 24 18	 cmp	 DWORD PTR _occupiedBytes$133017[esp+26380], ebx
  00225	d9 44 24 0c	 fld	 DWORD PTR _percentFreeSpace$133016[esp+26376]
  00229	7c 19		 jl	 SHORT $LN5@FinalPreTr
  0022b	7f 0a		 jg	 SHORT $LN36@FinalPreTr
  0022d	81 7c 24 14 00
	00 00 40	 cmp	 DWORD PTR _occupiedBytes$133017[esp+26376], 1073741824 ; 40000000H
  00235	76 0d		 jbe	 SHORT $LN5@FinalPreTr
$LN36@FinalPreTr:
  00237	dc 15 00 00 00
	00		 fcom	 QWORD PTR __real@4058ff5c28f5c28f
  0023d	df e0		 fnstsw	 ax
  0023f	f6 c4 05	 test	 ah, 5
  00242	7b 13		 jnp	 SHORT $LN64@FinalPreTr
$LN5@FinalPreTr:
  00244	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@42b00000
  0024a	df e0		 fnstsw	 ax
  0024c	f6 c4 05	 test	 ah, 5
  0024f	0f 8a ed 03 00
	00		 jp	 $LN57@FinalPreTr
  00255	eb 02		 jmp	 SHORT $LN6@FinalPreTr
$LN64@FinalPreTr:
  00257	dd d8		 fstp	 ST(0)
$LN6@FinalPreTr:

; 3215 : 				{
; 3216 : 					wchar_t tmpMcMsg [8000];
; 3217 : 					wchar_t tmpMcOption1 [500];
; 3218 : 					wchar_t tmpMcOptionCancel [50];
; 3219 : 
; 3220 : 					wcscpy (tmpMcMsg, GetString("OVERWRITEPROMPT_DEVICE_SECOND_WARNING_LOTS_OF_DATA"));

  00259	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@GFFEJLFD@OVERWRITEPROMPT_DEVICE_SECOND_WA@
  0025e	e8 00 00 00 00	 call	 _GetString
  00263	83 c4 04	 add	 esp, 4
  00266	8d 94 24 84 28
	00 00		 lea	 edx, DWORD PTR _tmpMcMsg$133022[esp+26376]
  0026d	8d 49 00	 npad	 3
$LL27@FinalPreTr:
  00270	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00273	66 89 0a	 mov	 WORD PTR [edx], cx
  00276	83 c0 02	 add	 eax, 2
  00279	83 c2 02	 add	 edx, 2
  0027c	66 3b cb	 cmp	 cx, bx
  0027f	75 ef		 jne	 SHORT $LL27@FinalPreTr

; 3221 : 					wcscpy (tmpMcOption1, GetString("ERASE_FILES_BY_CREATING_VOLUME"));

  00281	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@IMKLJEFC@ERASE_FILES_BY_CREATING_VOLUME?$AA@
  00286	e8 00 00 00 00	 call	 _GetString
  0028b	83 c4 04	 add	 esp, 4
  0028e	8d 94 24 9c 04
	00 00		 lea	 edx, DWORD PTR _tmpMcOption1$133023[esp+26376]
$LL28@FinalPreTr:
  00295	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00298	66 89 0a	 mov	 WORD PTR [edx], cx
  0029b	83 c0 02	 add	 eax, 2
  0029e	83 c2 02	 add	 edx, 2
  002a1	66 3b cb	 cmp	 cx, bx
  002a4	75 ef		 jne	 SHORT $LL28@FinalPreTr

; 3222 : 					wcscpy (tmpMcOptionCancel, GetString("CANCEL"));

  002a6	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  002ab	e8 00 00 00 00	 call	 _GetString
  002b0	83 c4 04	 add	 esp, 4
  002b3	8d 94 24 30 01
	00 00		 lea	 edx, DWORD PTR _tmpMcOptionCancel$133024[esp+26376]
  002ba	8d 9b 00 00 00
	00		 npad	 6
$LL29@FinalPreTr:
  002c0	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  002c3	66 89 0a	 mov	 WORD PTR [edx], cx
  002c6	83 c0 02	 add	 eax, 2
  002c9	83 c2 02	 add	 edx, 2
  002cc	66 3b cb	 cmp	 cx, bx
  002cf	75 ef		 jne	 SHORT $LL29@FinalPreTr

; 3223 : 
; 3224 : 					wcscat (tmpMcMsg, L"\n\n");

  002d1	8d 84 24 84 28
	00 00		 lea	 eax, DWORD PTR _tmpMcMsg$133022[esp+26376]
  002d8	83 c0 fe	 add	 eax, -2			; fffffffeH
  002db	eb 03 8d 49 00	 npad	 5
$LL37@FinalPreTr:
  002e0	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  002e4	83 c0 02	 add	 eax, 2
  002e7	66 3b cb	 cmp	 cx, bx
  002ea	75 f4		 jne	 SHORT $LL37@FinalPreTr
  002ec	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  002f2	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@+4
  002f9	89 10		 mov	 DWORD PTR [eax], edx

; 3225 : 					wcscat (tmpMcMsg, GetString("DRIVE_LETTER_ITEM"));

  002fb	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@ELOGDKJ@DRIVE_LETTER_ITEM?$AA@
  00300	66 89 48 04	 mov	 WORD PTR [eax+4], cx
  00304	e8 00 00 00 00	 call	 _GetString
  00309	83 c4 04	 add	 esp, 4
  0030c	8b d0		 mov	 edx, eax
  0030e	8b ff		 npad	 2
$LL38@FinalPreTr:
  00310	66 8b 08	 mov	 cx, WORD PTR [eax]
  00313	83 c0 02	 add	 eax, 2
  00316	66 3b cb	 cmp	 cx, bx
  00319	75 f5		 jne	 SHORT $LL38@FinalPreTr
  0031b	57		 push	 edi
  0031c	8d bc 24 88 28
	00 00		 lea	 edi, DWORD PTR _tmpMcMsg$133022[esp+26380]
  00323	2b c2		 sub	 eax, edx
  00325	83 c7 fe	 add	 edi, -2			; fffffffeH
  00328	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL39@FinalPreTr:
  00330	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  00334	83 c7 02	 add	 edi, 2
  00337	66 3b cb	 cmp	 cx, bx
  0033a	75 f4		 jne	 SHORT $LL39@FinalPreTr
  0033c	8b c8		 mov	 ecx, eax
  0033e	c1 e9 02	 shr	 ecx, 2
  00341	8b f2		 mov	 esi, edx
  00343	f3 a5		 rep movsd

; 3226 : 					swprintf_s (szTmp, sizeof (szTmp)/2, L"%hc:", 'A' + driveNo);

  00345	83 c5 41	 add	 ebp, 65			; 00000041H
  00348	55		 push	 ebp
  00349	68 00 00 00 00	 push	 OFFSET ??_C@_19KHPJIBCC@?$AA?$CF?$AAh?$AAc?$AA?3?$AA?$AA@
  0034e	8b c8		 mov	 ecx, eax
  00350	8d 94 24 90 08
	00 00		 lea	 edx, DWORD PTR _szTmp$[esp+26388]
  00357	83 e1 03	 and	 ecx, 3
  0035a	68 00 10 00 00	 push	 4096			; 00001000H
  0035f	52		 push	 edx
  00360	f3 a4		 rep movsb
  00362	e8 00 00 00 00	 call	 _swprintf_s

; 3227 : 					wcscat (tmpMcMsg, szTmp);

  00367	8d 84 24 98 08
	00 00		 lea	 eax, DWORD PTR _szTmp$[esp+26396]
  0036e	83 c4 10	 add	 esp, 16			; 00000010H
  00371	8b d0		 mov	 edx, eax
$LL40@FinalPreTr:
  00373	66 8b 08	 mov	 cx, WORD PTR [eax]
  00376	83 c0 02	 add	 eax, 2
  00379	66 3b cb	 cmp	 cx, bx
  0037c	75 f5		 jne	 SHORT $LL40@FinalPreTr
  0037e	8d bc 24 88 28
	00 00		 lea	 edi, DWORD PTR _tmpMcMsg$133022[esp+26380]
  00385	2b c2		 sub	 eax, edx
  00387	83 c7 fe	 add	 edi, -2			; fffffffeH
  0038a	8d 9b 00 00 00
	00		 npad	 6
$LL41@FinalPreTr:
  00390	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  00394	83 c7 02	 add	 edi, 2
  00397	66 3b cb	 cmp	 cx, bx
  0039a	75 f4		 jne	 SHORT $LL41@FinalPreTr
  0039c	8b c8		 mov	 ecx, eax
  0039e	c1 e9 02	 shr	 ecx, 2
  003a1	8b f2		 mov	 esi, edx
  003a3	f3 a5		 rep movsd
  003a5	8b c8		 mov	 ecx, eax
  003a7	83 e1 03	 and	 ecx, 3
  003aa	f3 a4		 rep movsb

; 3228 : 
; 3229 : 					wcscat (tmpMcMsg, L"\n");

  003ac	8d bc 24 88 28
	00 00		 lea	 edi, DWORD PTR _tmpMcMsg$133022[esp+26380]
  003b3	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL42@FinalPreTr:
  003b6	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  003ba	83 c7 02	 add	 edi, 2
  003bd	66 3b c3	 cmp	 ax, bx
  003c0	75 f4		 jne	 SHORT $LL42@FinalPreTr
  003c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@

; 3230 : 					wcscat (tmpMcMsg, GetString("LABEL_ITEM"));

  003c7	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PEDCDHCM@LABEL_ITEM?$AA@
  003cc	89 07		 mov	 DWORD PTR [edi], eax
  003ce	e8 00 00 00 00	 call	 _GetString
  003d3	83 c4 04	 add	 esp, 4
  003d6	8b d0		 mov	 edx, eax
  003d8	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL43@FinalPreTr:
  003e0	66 8b 08	 mov	 cx, WORD PTR [eax]
  003e3	83 c0 02	 add	 eax, 2
  003e6	66 3b cb	 cmp	 cx, bx
  003e9	75 f5		 jne	 SHORT $LL43@FinalPreTr
  003eb	8d bc 24 88 28
	00 00		 lea	 edi, DWORD PTR _tmpMcMsg$133022[esp+26380]
  003f2	2b c2		 sub	 eax, edx
  003f4	83 c7 fe	 add	 edi, -2			; fffffffeH
  003f7	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL44@FinalPreTr:
  00400	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  00404	83 c7 02	 add	 edi, 2
  00407	66 3b cb	 cmp	 cx, bx
  0040a	75 f4		 jne	 SHORT $LL44@FinalPreTr
  0040c	8b c8		 mov	 ecx, eax
  0040e	c1 e9 02	 shr	 ecx, 2
  00411	8b f2		 mov	 esi, edx
  00413	f3 a5		 rep movsd
  00415	8b c8		 mov	 ecx, eax
  00417	83 e1 03	 and	 ecx, 3
  0041a	f3 a4		 rep movsb

; 3231 : 					wcscat (tmpMcMsg, volumeLabel[0] != 0 ? volumeLabel : GetString("NOT_APPLICABLE_OR_NOT_AVAILABLE"));

  0041c	66 39 5c 24 34	 cmp	 WORD PTR _volumeLabel$132996[esp+26380], bx
  00421	74 06		 je	 SHORT $LN30@FinalPreTr
  00423	8d 44 24 34	 lea	 eax, DWORD PTR _volumeLabel$132996[esp+26380]
  00427	eb 0d		 jmp	 SHORT $LN31@FinalPreTr
$LN30@FinalPreTr:
  00429	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@
  0042e	e8 00 00 00 00	 call	 _GetString
  00433	83 c4 04	 add	 esp, 4
$LN31@FinalPreTr:
  00436	8b d0		 mov	 edx, eax
  00438	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL45@FinalPreTr:
  00440	66 8b 08	 mov	 cx, WORD PTR [eax]
  00443	83 c0 02	 add	 eax, 2
  00446	66 3b cb	 cmp	 cx, bx
  00449	75 f5		 jne	 SHORT $LL45@FinalPreTr
  0044b	8d bc 24 88 28
	00 00		 lea	 edi, DWORD PTR _tmpMcMsg$133022[esp+26380]
  00452	2b c2		 sub	 eax, edx
  00454	83 c7 fe	 add	 edi, -2			; fffffffeH
  00457	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL46@FinalPreTr:
  00460	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  00464	83 c7 02	 add	 edi, 2
  00467	66 3b cb	 cmp	 cx, bx
  0046a	75 f4		 jne	 SHORT $LL46@FinalPreTr
  0046c	8b c8		 mov	 ecx, eax
  0046e	c1 e9 02	 shr	 ecx, 2
  00471	8b f2		 mov	 esi, edx
  00473	f3 a5		 rep movsd
  00475	8b c8		 mov	 ecx, eax
  00477	83 e1 03	 and	 ecx, 3
  0047a	f3 a4		 rep movsb

; 3232 : 
; 3233 : 					wcscat (tmpMcMsg, L"\n");

  0047c	8d bc 24 88 28
	00 00		 lea	 edi, DWORD PTR _tmpMcMsg$133022[esp+26380]
  00483	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL47@FinalPreTr:
  00486	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  0048a	83 c7 02	 add	 edi, 2
  0048d	66 3b c3	 cmp	 ax, bx
  00490	75 f4		 jne	 SHORT $LL47@FinalPreTr
  00492	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@

; 3234 : 					wcscat (tmpMcMsg, GetString("SIZE_ITEM"));

  00498	68 00 00 00 00	 push	 OFFSET ??_C@_09DBGAMMMC@SIZE_ITEM?$AA@
  0049d	89 0f		 mov	 DWORD PTR [edi], ecx
  0049f	e8 00 00 00 00	 call	 _GetString
  004a4	83 c4 04	 add	 esp, 4
  004a7	8b d0		 mov	 edx, eax
  004a9	8d a4 24 00 00
	00 00		 npad	 7
$LL48@FinalPreTr:
  004b0	66 8b 08	 mov	 cx, WORD PTR [eax]
  004b3	83 c0 02	 add	 eax, 2
  004b6	66 3b cb	 cmp	 cx, bx
  004b9	75 f5		 jne	 SHORT $LL48@FinalPreTr
  004bb	8d bc 24 88 28
	00 00		 lea	 edi, DWORD PTR _tmpMcMsg$133022[esp+26380]
  004c2	2b c2		 sub	 eax, edx
  004c4	83 c7 fe	 add	 edi, -2			; fffffffeH
  004c7	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL49@FinalPreTr:
  004d0	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  004d4	83 c7 02	 add	 edi, 2
  004d7	66 3b cb	 cmp	 cx, bx
  004da	75 f4		 jne	 SHORT $LL49@FinalPreTr
  004dc	8b c8		 mov	 ecx, eax
  004de	c1 e9 02	 shr	 ecx, 2
  004e1	8b f2		 mov	 esi, edx
  004e3	f3 a5		 rep movsd
  004e5	8b c8		 mov	 ecx, eax

; 3235 : 					GetSizeString (nVolumeSize, szTmp);

  004e7	a1 04 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA+4
  004ec	83 e1 03	 and	 ecx, 3
  004ef	8d 94 24 88 08
	00 00		 lea	 edx, DWORD PTR _szTmp$[esp+26380]
  004f6	52		 push	 edx
  004f7	f3 a4		 rep movsb
  004f9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nVolumeSize@@3_KA
  004ff	50		 push	 eax
  00500	51		 push	 ecx
  00501	e8 00 00 00 00	 call	 _GetSizeString

; 3236 : 					wcscat (tmpMcMsg, szTmp);

  00506	8d 84 24 94 08
	00 00		 lea	 eax, DWORD PTR _szTmp$[esp+26392]
  0050d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00510	8b d0		 mov	 edx, eax
$LL50@FinalPreTr:
  00512	66 8b 08	 mov	 cx, WORD PTR [eax]
  00515	83 c0 02	 add	 eax, 2
  00518	66 3b cb	 cmp	 cx, bx
  0051b	75 f5		 jne	 SHORT $LL50@FinalPreTr
  0051d	8d bc 24 88 28
	00 00		 lea	 edi, DWORD PTR _tmpMcMsg$133022[esp+26380]
  00524	2b c2		 sub	 eax, edx
  00526	83 c7 fe	 add	 edi, -2			; fffffffeH
  00529	8d a4 24 00 00
	00 00		 npad	 7
$LL51@FinalPreTr:
  00530	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  00534	83 c7 02	 add	 edi, 2
  00537	66 3b cb	 cmp	 cx, bx
  0053a	75 f4		 jne	 SHORT $LL51@FinalPreTr
  0053c	8b c8		 mov	 ecx, eax
  0053e	c1 e9 02	 shr	 ecx, 2
  00541	8b f2		 mov	 esi, edx
  00543	f3 a5		 rep movsd
  00545	8b c8		 mov	 ecx, eax
  00547	83 e1 03	 and	 ecx, 3
  0054a	f3 a4		 rep movsb

; 3237 : 
; 3238 : 					wcscat (tmpMcMsg, L"\n");

  0054c	8d bc 24 88 28
	00 00		 lea	 edi, DWORD PTR _tmpMcMsg$133022[esp+26380]
  00553	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL52@FinalPreTr:
  00556	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  0055a	83 c7 02	 add	 edi, 2
  0055d	66 3b c3	 cmp	 ax, bx
  00560	75 f4		 jne	 SHORT $LL52@FinalPreTr
  00562	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@

; 3239 : 					wcscat (tmpMcMsg, GetString("PATH_ITEM"));

  00568	68 00 00 00 00	 push	 OFFSET ??_C@_09BFNCKGCL@PATH_ITEM?$AA@
  0056d	89 17		 mov	 DWORD PTR [edi], edx
  0056f	e8 00 00 00 00	 call	 _GetString
  00574	83 c4 04	 add	 esp, 4
  00577	8b d0		 mov	 edx, eax
  00579	8d a4 24 00 00
	00 00		 npad	 7
$LL53@FinalPreTr:
  00580	66 8b 08	 mov	 cx, WORD PTR [eax]
  00583	83 c0 02	 add	 eax, 2
  00586	66 3b cb	 cmp	 cx, bx
  00589	75 f5		 jne	 SHORT $LL53@FinalPreTr
  0058b	8d bc 24 88 28
	00 00		 lea	 edi, DWORD PTR _tmpMcMsg$133022[esp+26380]
  00592	2b c2		 sub	 eax, edx
  00594	83 c7 fe	 add	 edi, -2			; fffffffeH
  00597	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL54@FinalPreTr:
  005a0	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  005a4	83 c7 02	 add	 edi, 2
  005a7	66 3b cb	 cmp	 cx, bx
  005aa	75 f4		 jne	 SHORT $LL54@FinalPreTr
  005ac	8b c8		 mov	 ecx, eax
  005ae	c1 e9 02	 shr	 ecx, 2
  005b1	8b f2		 mov	 esi, edx
  005b3	f3 a5		 rep movsd
  005b5	8b c8		 mov	 ecx, eax
  005b7	83 e1 03	 and	 ecx, 3

; 3240 : 					wcscat (tmpMcMsg, deviceName);

  005ba	8d 84 24 98 02
	00 00		 lea	 eax, DWORD PTR _deviceName$[esp+26380]
  005c1	f3 a4		 rep movsb
  005c3	8b d0		 mov	 edx, eax
$LL55@FinalPreTr:
  005c5	66 8b 08	 mov	 cx, WORD PTR [eax]
  005c8	83 c0 02	 add	 eax, 2
  005cb	66 3b cb	 cmp	 cx, bx
  005ce	75 f5		 jne	 SHORT $LL55@FinalPreTr
  005d0	8d bc 24 88 28
	00 00		 lea	 edi, DWORD PTR _tmpMcMsg$133022[esp+26380]
  005d7	2b c2		 sub	 eax, edx
  005d9	83 c7 fe	 add	 edi, -2			; fffffffeH
  005dc	8d 64 24 00	 npad	 4
$LL56@FinalPreTr:
  005e0	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  005e4	83 c7 02	 add	 edi, 2
  005e7	66 3b cb	 cmp	 cx, bx
  005ea	75 f4		 jne	 SHORT $LL56@FinalPreTr
  005ec	8b c8		 mov	 ecx, eax
  005ee	c1 e9 02	 shr	 ecx, 2
  005f1	8b f2		 mov	 esi, edx
  005f3	f3 a5		 rep movsd
  005f5	8b c8		 mov	 ecx, eax
  005f7	83 e1 03	 and	 ecx, 3

; 3241 : 
; 3242 : 					wchar_t *tmpStr[] = {L"", tmpMcMsg, tmpMcOption1, tmpMcOptionCancel, 0};

  005fa	8d 84 24 88 28
	00 00		 lea	 eax, DWORD PTR _tmpMcMsg$133022[esp+26380]
  00601	89 44 24 24	 mov	 DWORD PTR _tmpStr$133039[esp+26384], eax
  00605	f3 a4		 rep movsb

; 3243 : 					switch (AskMultiChoice ((void **) tmpStr, TRUE))

  00607	8d 44 24 20	 lea	 eax, DWORD PTR _tmpStr$133039[esp+26380]
  0060b	8d 8c 24 a0 04
	00 00		 lea	 ecx, DWORD PTR _tmpMcOption1$133023[esp+26380]
  00612	8d 94 24 34 01
	00 00		 lea	 edx, DWORD PTR _tmpMcOptionCancel$133024[esp+26380]
  00619	6a 01		 push	 1
  0061b	50		 push	 eax
  0061c	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR _tmpStr$133039[esp+26388], OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  00624	89 4c 24 30	 mov	 DWORD PTR _tmpStr$133039[esp+26396], ecx
  00628	89 54 24 34	 mov	 DWORD PTR _tmpStr$133039[esp+26400], edx
  0062c	89 5c 24 38	 mov	 DWORD PTR _tmpStr$133039[esp+26404], ebx
  00630	e8 00 00 00 00	 call	 _AskMultiChoice
  00635	83 c4 08	 add	 esp, 8
  00638	83 e8 01	 sub	 eax, 1
  0063b	5f		 pop	 edi

; 3244 : 					{
; 3245 : 					case 1:
; 3246 : 						// Proceed 
; 3247 : 
; 3248 : 						// NOP
; 3249 : 						break;
; 3250 : 
; 3251 : 					default:
; 3252 : 						return FALSE;

  0063c	0f 85 6e fb ff
	ff		 jne	 $LN65@FinalPreTr
$LN57@FinalPreTr:

; 3253 : 					}
; 3254 : 				}
; 3255 : 			}
; 3256 : 		}
; 3257 : 	}
; 3258 : 	return TRUE;
; 3259 : }

  00642	8b 8c 24 04 67
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+26376]
  00649	5e		 pop	 esi
  0064a	5d		 pop	 ebp
  0064b	5b		 pop	 ebx
  0064c	33 cc		 xor	 ecx, esp
  0064e	b8 01 00 00 00	 mov	 eax, 1
  00653	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00658	81 c4 fc 66 00
	00		 add	 esp, 26364		; 000066fcH
  0065e	c3		 ret	 0
_FinalPreTransformPrompts ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@DGIMBADH@AFTER_FORMAT_DRIVE_LETTER_WARN?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_HandleOldAssignedDriveLetter
;	COMDAT ??_C@_0BP@DGIMBADH@AFTER_FORMAT_DRIVE_LETTER_WARN?$AA@
CONST	SEGMENT
??_C@_0BP@DGIMBADH@AFTER_FORMAT_DRIVE_LETTER_WARN?$AA@ DB 'AFTER_FORMAT_D'
	DB	'RIVE_LETTER_WARN', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _HandleOldAssignedDriveLetter
_TEXT	SEGMENT
_deviceName$133051 = -16908				; size = 520
_szTmp$133058 = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_HandleOldAssignedDriveLetter PROC			; COMDAT

; 3262 : {

  00000	b8 0c 42 00 00	 mov	 eax, 16908		; 0000420cH
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 08 42
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+16908], eax

; 3263 : 	if (bDevice)

  00018	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  0001f	0f 84 8c 00 00
	00		 je	 $LN1@HandleOldA

; 3264 : 	{
; 3265 : 		// Handle assigned drive letter (if any)
; 3266 : 
; 3267 : 		WCHAR deviceName[MAX_PATH];
; 3268 : 		int driveLetter = -1;
; 3269 : 
; 3270 : 		strcpy ((char *)deviceName, szDiskFile);

  00025	33 c0		 xor	 eax, eax
  00027	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL5@HandleOldA:
  00030	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?szDiskFile@@3PADA[eax]
  00036	88 0c 04	 mov	 BYTE PTR _deviceName$133051[esp+eax+16908], cl
  00039	40		 inc	 eax
  0003a	84 c9		 test	 cl, cl
  0003c	75 f2		 jne	 SHORT $LL5@HandleOldA

; 3271 : 		ToUNICODE ((char *)deviceName);

  0003e	8d 04 24	 lea	 eax, DWORD PTR _deviceName$133051[esp+16908]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _ToUNICODE

; 3272 : 		driveLetter = GetDiskDeviceDriveLetter (deviceName);

  00047	8d 4c 24 04	 lea	 ecx, DWORD PTR _deviceName$133051[esp+16912]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 _GetDiskDeviceDriveLetter

; 3273 : 
; 3274 : 		if (!bHiddenVolHost
; 3275 : 			&& !bHiddenOS
; 3276 : 			&& driveLetter > 1)		// If a drive letter is assigned to the device, but not A: or B:

  00051	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  00057	83 c4 08	 add	 esp, 8
  0005a	85 d2		 test	 edx, edx
  0005c	75 53		 jne	 SHORT $LN1@HandleOldA
  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00064	85 c9		 test	 ecx, ecx
  00066	75 49		 jne	 SHORT $LN1@HandleOldA
  00068	83 f8 01	 cmp	 eax, 1
  0006b	7e 44		 jle	 SHORT $LN1@HandleOldA

; 3277 : 		{
; 3278 : 			char rootPath[] = { (char) driveLetter + 'A', ':', '\\', 0 };

  0006d	04 41		 add	 al, 65			; 00000041H

; 3279 : 			wchar_t szTmp[8192];
; 3280 : 
; 3281 : 			swprintf (szTmp, GetString ("AFTER_FORMAT_DRIVE_LETTER_WARN"), rootPath[0], rootPath[0], rootPath[0], rootPath[0]);

  0006f	0f be c0	 movsx	 eax, al
  00072	50		 push	 eax
  00073	50		 push	 eax
  00074	50		 push	 eax
  00075	50		 push	 eax
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@DGIMBADH@AFTER_FORMAT_DRIVE_LETTER_WARN?$AA@
  0007b	e8 00 00 00 00	 call	 _GetString
  00080	83 c4 04	 add	 esp, 4
  00083	50		 push	 eax
  00084	8d 94 24 1c 02
	00 00		 lea	 edx, DWORD PTR _szTmp$133058[esp+16928]
  0008b	52		 push	 edx
  0008c	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf

; 3282 : 			MessageBoxW (MainDlg, szTmp, lpszTitle, MB_ICONWARNING);

  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  00096	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0009c	83 c4 18	 add	 esp, 24			; 00000018H
  0009f	6a 30		 push	 48			; 00000030H
  000a1	50		 push	 eax
  000a2	8d 8c 24 10 02
	00 00		 lea	 ecx, DWORD PTR _szTmp$133058[esp+16916]
  000a9	51		 push	 ecx
  000aa	52		 push	 edx
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN1@HandleOldA:

; 3283 : 		}
; 3284 : 	}
; 3285 : }

  000b1	8b 8c 24 08 42
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16908]
  000b8	33 cc		 xor	 ecx, esp
  000ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bf	81 c4 0c 42 00
	00		 add	 esp, 16908		; 0000420cH
  000c5	c3		 ret	 0
_HandleOldAssignedDriveLetter ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@EIHCDBCC@NO_SPACE_FOR_HIDDEN_VOL?$AA@	; `string'
PUBLIC	_DetermineMaxHiddenVolSize
EXTRN	_GetVolumeDataAreaSize:PROC
EXTRN	_AbortProcessSilent:PROC
EXTRN	_UnmountVolume:PROC
EXTRN	__aulldiv:PROC
EXTRN	__allmul:PROC
;	COMDAT ??_C@_0BI@EIHCDBCC@NO_SPACE_FOR_HIDDEN_VOL?$AA@
CONST	SEGMENT
??_C@_0BI@EIHCDBCC@NO_SPACE_FOR_HIDDEN_VOL?$AA@ DB 'NO_SPACE_FOR_HIDDEN_V'
	DB	'OL', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _DetermineMaxHiddenVolSize
_TEXT	SEGMENT
_nbrReserveBytes$ = -8					; size = 8
_hwndDlg$ = 8						; size = 4
_DetermineMaxHiddenVolSize PROC				; COMDAT

; 8076 : 	__int64 nbrReserveBytes;
; 8077 : 
; 8078 : 	if (nbrFreeClusters * realClusterSize < TC_MIN_HIDDEN_VOLUME_SIZE)

  00000	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?nbrFreeClusters@@3_JA+4
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?realClusterSize@@3HA ; realClusterSize
  0000b	83 ec 08	 sub	 esp, 8
  0000e	53		 push	 ebx
  0000f	55		 push	 ebp
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	51		 push	 ecx
  00013	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nbrFreeClusters@@3_JA
  00019	99		 cdq
  0001a	51		 push	 ecx
  0001b	52		 push	 edx
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 __allmul
  00022	85 d2		 test	 edx, edx
  00024	7f 41		 jg	 SHORT $LN7@DetermineM
  00026	7c 07		 jl	 SHORT $LN10@DetermineM
  00028	3d 00 a0 00 00	 cmp	 eax, 40960		; 0000a000H
  0002d	73 38		 jae	 SHORT $LN7@DetermineM
$LN10@DetermineM:

; 8079 : 	{
; 8080 : 		MessageBoxW (hwndDlg, GetString ("NO_SPACE_FOR_HIDDEN_VOL"), lpszTitle, ICON_HAND);

  0002f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  00035	6a 10		 push	 16			; 00000010H
  00037	52		 push	 edx
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@EIHCDBCC@NO_SPACE_FOR_HIDDEN_VOL?$AA@
  0003d	e8 00 00 00 00	 call	 _GetString
  00042	8b 74 24 28	 mov	 esi, DWORD PTR _hwndDlg$[esp+32]
  00046	83 c4 04	 add	 esp, 4
  00049	50		 push	 eax
  0004a	56		 push	 esi
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 8081 : 		UnmountVolume (hwndDlg, hiddenVolHostDriveNo, TRUE);

  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  00056	6a 01		 push	 1
  00058	50		 push	 eax
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 _UnmountVolume
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8082 : 		AbortProcessSilent ();

  00062	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN7@DetermineM:

; 8083 : 	}
; 8084 : 
; 8085 : 	// Add a reserve (in case the user mounts the outer volume and creates new files
; 8086 : 	// on it by accident or OS writes some new data behind his or her back, such as
; 8087 : 	// System Restore etc.)
; 8088 : 	nbrReserveBytes = GetVolumeDataAreaSize (FALSE, nHiddenVolHostSize) / 200;

  00067	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?nHiddenVolHostSize@@3_KA+4
  0006d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nHiddenVolHostSize@@3_KA
  00073	51		 push	 ecx
  00074	52		 push	 edx
  00075	6a 00		 push	 0
  00077	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007f	6a 00		 push	 0
  00081	68 c8 00 00 00	 push	 200			; 000000c8H
  00086	52		 push	 edx
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 __aulldiv
  0008d	89 44 24 10	 mov	 DWORD PTR _nbrReserveBytes$[esp+24], eax
  00091	89 54 24 14	 mov	 DWORD PTR _nbrReserveBytes$[esp+28], edx

; 8089 : 	if (nbrReserveBytes > BYTES_PER_MB * 10)

  00095	85 d2		 test	 edx, edx
  00097	7c 19		 jl	 SHORT $LN6@DetermineM
  00099	7f 07		 jg	 SHORT $LN11@DetermineM
  0009b	3d 00 00 a0 00	 cmp	 eax, 10485760		; 00a00000H
  000a0	76 10		 jbe	 SHORT $LN6@DetermineM
$LN11@DetermineM:

; 8090 : 		nbrReserveBytes = BYTES_PER_MB * 10;

  000a2	c7 44 24 10 00
	00 a0 00	 mov	 DWORD PTR _nbrReserveBytes$[esp+24], 10485760 ; 00a00000H
  000aa	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR _nbrReserveBytes$[esp+28], 0
$LN6@DetermineM:

; 8091 : 
; 8092 : 	// Compute the final value
; 8093 : 
; 8094 : 	nMaximumHiddenVolSize = nbrFreeClusters * realClusterSize - TC_HIDDEN_VOLUME_HOST_FS_RESERVED_END_AREA_SIZE - nbrReserveBytes;

  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?realClusterSize@@3HA ; realClusterSize
  000b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nbrFreeClusters@@3_JA
  000bd	99		 cdq
  000be	8b d8		 mov	 ebx, eax
  000c0	a1 04 00 00 00	 mov	 eax, DWORD PTR ?nbrFreeClusters@@3_JA+4
  000c5	50		 push	 eax
  000c6	51		 push	 ecx
  000c7	8b ea		 mov	 ebp, edx
  000c9	55		 push	 ebp
  000ca	53		 push	 ebx
  000cb	e8 00 00 00 00	 call	 __allmul
  000d0	8b f8		 mov	 edi, eax
  000d2	2b 7c 24 10	 sub	 edi, DWORD PTR _nbrReserveBytes$[esp+24]
  000d6	8b f2		 mov	 esi, edx
  000d8	1b 74 24 14	 sbb	 esi, DWORD PTR _nbrReserveBytes$[esp+28]

; 8095 : 	nMaximumHiddenVolSize -= nMaximumHiddenVolSize % realClusterSize;		// Must be a multiple of the sector size

  000dc	55		 push	 ebp
  000dd	81 ef 00 10 00
	00		 sub	 edi, 4096		; 00001000H
  000e3	53		 push	 ebx
  000e4	83 de 00	 sbb	 esi, 0
  000e7	56		 push	 esi
  000e8	57		 push	 edi
  000e9	e8 00 00 00 00	 call	 __allrem
  000ee	2b f8		 sub	 edi, eax
  000f0	1b f2		 sbb	 esi, edx

; 8096 : 
; 8097 : 	if (nMaximumHiddenVolSize < TC_MIN_HIDDEN_VOLUME_SIZE)

  000f2	33 db		 xor	 ebx, ebx
  000f4	3b f3		 cmp	 esi, ebx
  000f6	89 3d 00 00 00
	00		 mov	 DWORD PTR ?nMaximumHiddenVolSize@@3_JA, edi
  000fc	89 35 04 00 00
	00		 mov	 DWORD PTR ?nMaximumHiddenVolSize@@3_JA+4, esi
  00102	0f 8f 82 00 00
	00		 jg	 $LN2@DetermineM
  00108	7c 08		 jl	 SHORT $LN12@DetermineM
  0010a	81 ff 00 a0 00
	00		 cmp	 edi, 40960		; 0000a000H
  00110	73 44		 jae	 SHORT $LN15@DetermineM
$LN12@DetermineM:

; 8098 : 	{
; 8099 : 		MessageBoxW (hwndDlg, GetString ("NO_SPACE_FOR_HIDDEN_VOL"), lpszTitle, ICON_HAND);

  00112	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  00118	6a 10		 push	 16			; 00000010H
  0011a	52		 push	 edx
  0011b	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@EIHCDBCC@NO_SPACE_FOR_HIDDEN_VOL?$AA@
  00120	e8 00 00 00 00	 call	 _GetString
  00125	8b 74 24 28	 mov	 esi, DWORD PTR _hwndDlg$[esp+32]
  00129	83 c4 04	 add	 esp, 4
  0012c	50		 push	 eax
  0012d	56		 push	 esi
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 8100 : 		UnmountVolume (hwndDlg, hiddenVolHostDriveNo, TRUE);

  00134	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  00139	6a 01		 push	 1
  0013b	50		 push	 eax
  0013c	56		 push	 esi
  0013d	e8 00 00 00 00	 call	 _UnmountVolume
  00142	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8101 : 		AbortProcessSilent ();

  00145	e8 00 00 00 00	 call	 _AbortProcessSilent
  0014a	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?nMaximumHiddenVolSize@@3_JA+4
  00150	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?nMaximumHiddenVolSize@@3_JA
$LN15@DetermineM:

; 8102 : 	}
; 8103 : 
; 8104 : 	// Prepare the hidden volume size parameters
; 8105 : 	if (nMaximumHiddenVolSize < BYTES_PER_MB)

  00156	3b f3		 cmp	 esi, ebx
  00158	7f 30		 jg	 SHORT $LN2@DetermineM
  0015a	7c 08		 jl	 SHORT $LN13@DetermineM
  0015c	81 ff 00 00 10
	00		 cmp	 edi, 1048576		; 00100000H
  00162	73 0c		 jae	 SHORT $LN4@DetermineM
$LN13@DetermineM:

; 8106 : 		nMultiplier = BYTES_PER_KB;

  00164	c7 05 00 00 00
	00 00 04 00 00	 mov	 DWORD PTR ?nMultiplier@@3HA, 1024 ; nMultiplier, 00000400H
  0016e	eb 24		 jmp	 SHORT $LN1@DetermineM
$LN4@DetermineM:

; 8107 : 	else if (nMaximumHiddenVolSize < BYTES_PER_GB)

  00170	3b f3		 cmp	 esi, ebx
  00172	7f 16		 jg	 SHORT $LN2@DetermineM
  00174	7c 08		 jl	 SHORT $LN14@DetermineM
  00176	81 ff 00 00 00
	40		 cmp	 edi, 1073741824		; 40000000H
  0017c	73 0c		 jae	 SHORT $LN2@DetermineM
$LN14@DetermineM:

; 8108 : 		nMultiplier = BYTES_PER_MB;

  0017e	c7 05 00 00 00
	00 00 00 10 00	 mov	 DWORD PTR ?nMultiplier@@3HA, 1048576 ; nMultiplier, 00100000H

; 8109 : 	else

  00188	eb 0a		 jmp	 SHORT $LN1@DetermineM
$LN2@DetermineM:

; 8110 : 		nMultiplier = BYTES_PER_GB;

  0018a	c7 05 00 00 00
	00 00 00 00 40	 mov	 DWORD PTR ?nMultiplier@@3HA, 1073741824 ; nMultiplier, 40000000H
$LN1@DetermineM:
  00194	5f		 pop	 edi
  00195	5e		 pop	 esi
  00196	5d		 pop	 ebp

; 8111 : 
; 8112 : 	nUIVolumeSize = 0;								// Set the initial value for the hidden volume size input field to the max

  00197	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, ebx
  0019d	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx

; 8113 : 	nVolumeSize = nUIVolumeSize * nMultiplier;		// Chop off possible remainder

  001a3	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, ebx
  001a9	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ebx

; 8114 : 
; 8115 : 	return 1;

  001af	b8 01 00 00 00	 mov	 eax, 1
  001b4	5b		 pop	 ebx

; 8116 : }

  001b5	83 c4 08	 add	 esp, 8
  001b8	c3		 ret	 0
_DetermineMaxHiddenVolSize ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@BIDCCDPC@MountVolumesRemovable?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_MountHiddenVolHost
EXTRN	_MountVolume:PROC
EXTRN	_GetLastAvailableDrive:PROC
;	COMDAT ??_C@_0BG@BIDCCDPC@MountVolumesRemovable?$AA@
CONST	SEGMENT
??_C@_0BG@BIDCCDPC@MountVolumesRemovable?$AA@ DB 'MountVolumesRemovable', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _MountHiddenVolHost
_TEXT	SEGMENT
_mountOptions$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_volumePath$ = 12					; size = 4
_driveNo$ = 16						; size = 4
_password$ = 20						; size = 4
_bReadOnly$ = 24					; size = 4
_MountHiddenVolHost PROC				; COMDAT

; 8274 : {

  00000	83 ec 68	 sub	 esp, 104		; 00000068H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 64	 mov	 DWORD PTR __$ArrayPad$[esp+104], eax
  0000e	53		 push	 ebx
  0000f	8b 5c 24 74	 mov	 ebx, DWORD PTR _volumePath$[esp+104]
  00013	55		 push	 ebp
  00014	8b ac 24 80 00
	00 00		 mov	 ebp, DWORD PTR _password$[esp+108]
  0001b	56		 push	 esi
  0001c	8b b4 24 80 00
	00 00		 mov	 esi, DWORD PTR _driveNo$[esp+112]
  00023	57		 push	 edi
  00024	8b 7c 24 7c	 mov	 edi, DWORD PTR _hwndDlg$[esp+116]

; 8275 : 	MountOptions mountOptions;
; 8276 : 	ZeroMemory (&mountOptions, sizeof (mountOptions));

  00028	6a 64		 push	 100			; 00000064H
  0002a	8d 44 24 14	 lea	 eax, DWORD PTR _mountOptions$[esp+124]
  0002e	6a 00		 push	 0
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 _memset
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8277 : 
; 8278 : 	*driveNo = GetLastAvailableDrive ();

  00039	e8 00 00 00 00	 call	 _GetLastAvailableDrive
  0003e	89 06		 mov	 DWORD PTR [esi], eax

; 8279 : 
; 8280 : 	if (*driveNo == -1)

  00040	83 f8 ff	 cmp	 eax, -1
  00043	75 1e		 jne	 SHORT $LN2@MountHidde
  00045	5f		 pop	 edi

; 8281 : 	{
; 8282 : 		*driveNo = -2;

  00046	c7 06 fe ff ff
	ff		 mov	 DWORD PTR [esi], -2	; fffffffeH
  0004c	5e		 pop	 esi
  0004d	5d		 pop	 ebp

; 8283 : 		return ERR_NO_FREE_DRIVES;

  0004e	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00053	5b		 pop	 ebx

; 8297 : 	}
; 8298 : 	return 0;
; 8299 : }

  00054	8b 4c 24 64	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+104]
  00058	33 cc		 xor	 ecx, esp
  0005a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005f	83 c4 68	 add	 esp, 104		; 00000068H
  00062	c3		 ret	 0
$LN2@MountHidde:

; 8284 : 	}
; 8285 : 
; 8286 : 	mountOptions.ReadOnly = bReadOnly;

  00063	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR _bReadOnly$[esp+116]

; 8287 : 	mountOptions.Removable = ConfigReadInt ("MountVolumesRemovable", FALSE);

  0006a	6a 00		 push	 0
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@BIDCCDPC@MountVolumesRemovable?$AA@
  00071	89 4c 24 18	 mov	 DWORD PTR _mountOptions$[esp+128], ecx
  00075	e8 00 00 00 00	 call	 _ConfigReadInt

; 8288 : 	mountOptions.ProtectHiddenVolume = FALSE;
; 8289 : 	mountOptions.PreserveTimestamp = bPreserveTimestamp;

  0007a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bPreserveTimestamp

; 8290 : 	mountOptions.PartitionInInactiveSysEncScope = FALSE;
; 8291 : 	mountOptions.UseBackupHeader = FALSE;
; 8292 : 
; 8293 : 	if (MountVolume (hwndDlg, *driveNo, volumePath, password, FALSE, TRUE, &mountOptions, FALSE, TRUE) < 1)

  00080	6a 01		 push	 1
  00082	89 44 24 20	 mov	 DWORD PTR _mountOptions$[esp+136], eax
  00086	33 c0		 xor	 eax, eax
  00088	50		 push	 eax
  00089	8d 4c 24 20	 lea	 ecx, DWORD PTR _mountOptions$[esp+136]
  0008d	51		 push	 ecx
  0008e	6a 01		 push	 1
  00090	50		 push	 eax
  00091	55		 push	 ebp
  00092	89 54 24 3c	 mov	 DWORD PTR _mountOptions$[esp+164], edx
  00096	8b 16		 mov	 edx, DWORD PTR [esi]
  00098	53		 push	 ebx
  00099	52		 push	 edx
  0009a	57		 push	 edi
  0009b	89 44 24 44	 mov	 DWORD PTR _mountOptions$[esp+172], eax
  0009f	89 44 24 4c	 mov	 DWORD PTR _mountOptions$[esp+180], eax
  000a3	89 84 24 98 00
	00 00		 mov	 DWORD PTR _mountOptions$[esp+256], eax
  000aa	e8 00 00 00 00	 call	 _MountVolume
  000af	83 c4 2c	 add	 esp, 44			; 0000002cH
  000b2	83 f8 01	 cmp	 eax, 1
  000b5	7d 1e		 jge	 SHORT $LN1@MountHidde
  000b7	5f		 pop	 edi

; 8294 : 	{
; 8295 : 		*driveNo = -3;

  000b8	c7 06 fd ff ff
	ff		 mov	 DWORD PTR [esi], -3	; fffffffdH
  000be	5e		 pop	 esi
  000bf	5d		 pop	 ebp

; 8296 : 		return ERR_VOL_MOUNT_FAILED;

  000c0	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  000c5	5b		 pop	 ebx

; 8297 : 	}
; 8298 : 	return 0;
; 8299 : }

  000c6	8b 4c 24 64	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+104]
  000ca	33 cc		 xor	 ecx, esp
  000cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d1	83 c4 68	 add	 esp, 104		; 00000068H
  000d4	c3		 ret	 0
$LN1@MountHidde:
  000d5	8b 4c 24 74	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+120]
  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi
  000db	5d		 pop	 ebp
  000dc	5b		 pop	 ebx
  000dd	33 cc		 xor	 ecx, esp
  000df	33 c0		 xor	 eax, eax
  000e1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e6	83 c4 68	 add	 esp, 104		; 00000068H
  000e9	c3		 ret	 0
_MountHiddenVolHost ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@IEBIBFIL@CANT_GET_CLUSTER_BITMAP?$AA@	; `string'
PUBLIC	??_C@_0O@JJNKJOK@ERR_MEM_ALLOC?$AA@		; `string'
PUBLIC	??_C@_0BG@EDMDLNEK@CANT_ACCESS_OUTER_VOL?$AA@	; `string'
PUBLIC	_nbrFreeClusters$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_ScanVolClusterBitmap
EXTRN	_free:PROC
EXTRN	__imp__DeviceIoControl@32:PROC
EXTRN	_malloc:PROC
EXTRN	__alldiv:PROC
;	COMDAT ??_C@_0BI@IEBIBFIL@CANT_GET_CLUSTER_BITMAP?$AA@
CONST	SEGMENT
??_C@_0BI@IEBIBFIL@CANT_GET_CLUSTER_BITMAP?$AA@ DB 'CANT_GET_CLUSTER_BITM'
	DB	'AP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JJNKJOK@ERR_MEM_ALLOC?$AA@
CONST	SEGMENT
??_C@_0O@JJNKJOK@ERR_MEM_ALLOC?$AA@ DB 'ERR_MEM_ALLOC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EDMDLNEK@CANT_ACCESS_OUTER_VOL?$AA@
CONST	SEGMENT
??_C@_0BG@EDMDLNEK@CANT_ACCESS_OUTER_VOL?$AA@ DB 'CANT_ACCESS_OUTER_VOL', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _ScanVolClusterBitmap
_TEXT	SEGMENT
_nbrFreeClusters$GSCopy$ = -32				; size = 4
_hDevice$ = -28						; size = 4
_lpInBuffer$ = -24					; size = 8
_lBytesReturned$ = -16					; size = 4
_tmpPath$ = -12						; size = 7
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_driveNo$ = 12						; size = 4
_nbrClusters$ = 16					; size = 8
_nbrFreeClusters$ = 24					; size = 4
_ScanVolClusterBitmap PROC				; COMDAT

; 8308 : {

  00000	83 ec 20	 sub	 esp, 32			; 00000020H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 1c	 mov	 DWORD PTR __$ArrayPad$[esp+32], eax
  0000e	8b 44 24 28	 mov	 eax, DWORD PTR _driveNo$[esp+28]
  00012	8b 4c 24 34	 mov	 ecx, DWORD PTR _nbrFreeClusters$[esp+28]

; 8309 : 	PVOLUME_BITMAP_BUFFER lpOutBuffer;
; 8310 : 	STARTING_LCN_INPUT_BUFFER lpInBuffer;
; 8311 : 
; 8312 : 	HANDLE hDevice;
; 8313 : 	DWORD lBytesReturned;
; 8314 : 	BYTE rmnd;
; 8315 : 	char tmpPath[7] = {'\\','\\','.','\\', (char) *driveNo + 'A', ':', 0};

  00016	8a 10		 mov	 dl, BYTE PTR [eax]
  00018	53		 push	 ebx
  00019	8b 5c 24 28	 mov	 ebx, DWORD PTR _hwndDlg$[esp+32]
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi

; 8316 : 
; 8317 : 	DWORD bufLen;
; 8318 : 	__int64 bitmapCnt;
; 8319 : 
; 8320 : 	hDevice = CreateFile (tmpPath, GENERIC_READ, FILE_SHARE_READ|FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00020	6a 00		 push	 0
  00022	6a 00		 push	 0
  00024	6a 03		 push	 3
  00026	6a 00		 push	 0
  00028	6a 03		 push	 3
  0002a	89 4c 24 24	 mov	 DWORD PTR _nbrFreeClusters$GSCopy$[esp+68], ecx
  0002e	b1 5c		 mov	 cl, 92			; 0000005cH
  00030	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00035	8d 44 24 3c	 lea	 eax, DWORD PTR _tmpPath$[esp+72]
  00039	80 c2 41	 add	 dl, 65			; 00000041H
  0003c	50		 push	 eax
  0003d	88 4c 24 40	 mov	 BYTE PTR _tmpPath$[esp+76], cl
  00041	88 4c 24 41	 mov	 BYTE PTR _tmpPath$[esp+77], cl
  00045	c6 44 24 42 2e	 mov	 BYTE PTR _tmpPath$[esp+78], 46 ; 0000002eH
  0004a	88 4c 24 43	 mov	 BYTE PTR _tmpPath$[esp+79], cl
  0004e	88 54 24 44	 mov	 BYTE PTR _tmpPath$[esp+80], dl
  00052	c6 44 24 45 3a	 mov	 BYTE PTR _tmpPath$[esp+81], 58 ; 0000003aH
  00057	c6 44 24 46 00	 mov	 BYTE PTR _tmpPath$[esp+82], 0
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00062	8b f8		 mov	 edi, eax
  00064	89 7c 24 14	 mov	 DWORD PTR _hDevice$[esp+48], edi

; 8321 : 
; 8322 : 	if (hDevice == INVALID_HANDLE_VALUE)

  00068	83 ff ff	 cmp	 edi, -1
  0006b	75 10		 jne	 SHORT $LN11@ScanVolClu

; 8323 : 	{
; 8324 : 		MessageBoxW (hwndDlg, GetString ("CANT_ACCESS_OUTER_VOL"), lpszTitle, ICON_HAND);

  0006d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  00073	6a 10		 push	 16			; 00000010H
  00075	51		 push	 ecx
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EDMDLNEK@CANT_ACCESS_OUTER_VOL?$AA@
  0007b	eb 48		 jmp	 SHORT $LN20@ScanVolClu
$LN11@ScanVolClu:

; 8325 : 		goto vcmf_error;
; 8326 : 	}
; 8327 : 
; 8328 :  	bufLen = (DWORD) (nbrClusters / 8 + 2 * sizeof(LARGE_INTEGER));

  0007d	8b 54 24 40	 mov	 edx, DWORD PTR _nbrClusters$[esp+48]
  00081	8b 44 24 3c	 mov	 eax, DWORD PTR _nbrClusters$[esp+44]
  00085	6a 00		 push	 0
  00087	6a 08		 push	 8
  00089	52		 push	 edx
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 __alldiv
  00090	8b c8		 mov	 ecx, eax
  00092	83 c1 10	 add	 ecx, 16			; 00000010H

; 8329 : 	bufLen += 100000 + bufLen/10;	// Add reserve

  00095	b8 cd cc cc cc	 mov	 eax, -858993459		; cccccccdH
  0009a	f7 e1		 mul	 ecx
  0009c	c1 ea 03	 shr	 edx, 3
  0009f	8d ac 11 a0 86
	01 00		 lea	 ebp, DWORD PTR [ecx+edx+100000]

; 8330 : 
; 8331 : 	lpOutBuffer = (PVOLUME_BITMAP_BUFFER) malloc (bufLen);

  000a6	55		 push	 ebp
  000a7	e8 00 00 00 00	 call	 _malloc
  000ac	8b f0		 mov	 esi, eax

; 8332 : 
; 8333 : 	if (lpOutBuffer == NULL)

  000ae	33 c0		 xor	 eax, eax
  000b0	83 c4 04	 add	 esp, 4
  000b3	3b f0		 cmp	 esi, eax
  000b5	75 34		 jne	 SHORT $LN9@ScanVolClu

; 8334 : 	{
; 8335 : 		MessageBoxW (hwndDlg, GetString ("ERR_MEM_ALLOC"), lpszTitle, ICON_HAND);

  000b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  000bd	6a 10		 push	 16			; 00000010H
  000bf	51		 push	 ecx
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JJNKJOK@ERR_MEM_ALLOC?$AA@
$LN20@ScanVolClu:
  000c5	e8 00 00 00 00	 call	 _GetString
  000ca	83 c4 04	 add	 esp, 4
  000cd	50		 push	 eax
  000ce	53		 push	 ebx
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	5d		 pop	 ebp

; 8388 : 
; 8389 : vcmf_error:
; 8390 : 	return -1;

  000d8	83 c8 ff	 or	 eax, -1
  000db	5b		 pop	 ebx

; 8391 : }

  000dc	8b 4c 24 1c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+32]
  000e0	33 cc		 xor	 ecx, esp
  000e2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e7	83 c4 20	 add	 esp, 32			; 00000020H
  000ea	c3		 ret	 0
$LN9@ScanVolClu:

; 8336 : 		goto vcmf_error;
; 8337 : 	}
; 8338 : 
; 8339 : 	lpInBuffer.StartingLcn.QuadPart = 0;
; 8340 : 
; 8341 : 	if ( !DeviceIoControl (hDevice,
; 8342 : 		FSCTL_GET_VOLUME_BITMAP,
; 8343 : 		&lpInBuffer,
; 8344 : 		sizeof(lpInBuffer),
; 8345 : 		lpOutBuffer,
; 8346 : 		bufLen,  
; 8347 : 		&lBytesReturned,
; 8348 : 		NULL))

  000eb	50		 push	 eax
  000ec	8d 54 24 24	 lea	 edx, DWORD PTR _lBytesReturned$[esp+52]
  000f0	52		 push	 edx
  000f1	55		 push	 ebp
  000f2	56		 push	 esi
  000f3	6a 08		 push	 8
  000f5	89 44 24 2c	 mov	 DWORD PTR _lpInBuffer$[esp+68], eax
  000f9	89 44 24 30	 mov	 DWORD PTR _lpInBuffer$[esp+72], eax
  000fd	8d 44 24 2c	 lea	 eax, DWORD PTR _lpInBuffer$[esp+68]
  00101	50		 push	 eax
  00102	68 6f 00 09 00	 push	 589935			; 0009006fH
  00107	57		 push	 edi
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  0010e	85 c0		 test	 eax, eax
  00110	75 4d		 jne	 SHORT $LN7@ScanVolClu

; 8349 : 	{
; 8350 : 		handleWin32Error (hwndDlg);

  00112	53		 push	 ebx
  00113	e8 00 00 00 00	 call	 _handleWin32Error

; 8351 : 		MessageBoxW (hwndDlg, GetString ("CANT_GET_CLUSTER_BITMAP"), lpszTitle, ICON_HAND);

  00118	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  0011e	83 c4 04	 add	 esp, 4
  00121	6a 10		 push	 16			; 00000010H
  00123	51		 push	 ecx
  00124	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@IEBIBFIL@CANT_GET_CLUSTER_BITMAP?$AA@
  00129	e8 00 00 00 00	 call	 _GetString
  0012e	83 c4 04	 add	 esp, 4
  00131	50		 push	 eax
  00132	53		 push	 ebx
  00133	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 8383 : 	return 1;
; 8384 : 
; 8385 : vcm_error:
; 8386 : 	CloseHandle (hDevice);

  00139	57		 push	 edi
$vcm_error$135166:
  0013a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 8387 : 	free(lpOutBuffer);

  00140	56		 push	 esi
  00141	e8 00 00 00 00	 call	 _free
  00146	83 c4 04	 add	 esp, 4
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5d		 pop	 ebp
$vcmf_error$135157:

; 8388 : 
; 8389 : vcmf_error:
; 8390 : 	return -1;

  0014c	83 c8 ff	 or	 eax, -1
  0014f	5b		 pop	 ebx

; 8391 : }

  00150	8b 4c 24 1c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+32]
  00154	33 cc		 xor	 ecx, esp
  00156	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015b	83 c4 20	 add	 esp, 32			; 00000020H
  0015e	c3		 ret	 0
$LN7@ScanVolClu:

; 8352 : 
; 8353 : 		goto vcm_error;
; 8354 : 	}
; 8355 : 
; 8356 : 	rmnd = (BYTE) (lpOutBuffer->BitmapSize.QuadPart % 8);

  0015f	8b 6e 0c	 mov	 ebp, DWORD PTR [esi+12]
  00162	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00165	6a 00		 push	 0
  00167	6a 08		 push	 8
  00169	55		 push	 ebp
  0016a	57		 push	 edi
  0016b	e8 00 00 00 00	 call	 __allrem
  00170	8a d8		 mov	 bl, al

; 8357 : 
; 8358 : 	if ((rmnd != 0) 
; 8359 : 	&& ((lpOutBuffer->Buffer[lpOutBuffer->BitmapSize.QuadPart / 8] & ((1 << rmnd)-1) ) != 0))

  00172	84 db		 test	 bl, bl
  00174	74 2e		 je	 SHORT $LN18@ScanVolClu
  00176	6a 00		 push	 0
  00178	6a 08		 push	 8
  0017a	55		 push	 ebp
  0017b	57		 push	 edi
  0017c	e8 00 00 00 00	 call	 __alldiv
  00181	ba 01 00 00 00	 mov	 edx, 1
  00186	8a cb		 mov	 cl, bl
  00188	d3 e2		 shl	 edx, cl
  0018a	4a		 dec	 edx
  0018b	84 54 30 10	 test	 BYTE PTR [eax+esi+16], dl
  0018f	74 13		 je	 SHORT $LN18@ScanVolClu

; 8360 : 	{
; 8361 : 		*nbrFreeClusters = 0;

  00191	8b 44 24 10	 mov	 eax, DWORD PTR _nbrFreeClusters$GSCopy$[esp+48]
  00195	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0019b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 8362 : 	}
; 8363 : 	else

  001a2	eb 66		 jmp	 SHORT $LN2@ScanVolClu
$LN18@ScanVolClu:

; 8364 : 	{
; 8365 : 		*nbrFreeClusters = lpOutBuffer->BitmapSize.QuadPart;

  001a4	8b c7		 mov	 eax, edi
  001a6	8b 7c 24 10	 mov	 edi, DWORD PTR _nbrFreeClusters$GSCopy$[esp+48]
  001aa	89 07		 mov	 DWORD PTR [edi], eax
  001ac	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]

; 8366 : 		bitmapCnt = lpOutBuffer->BitmapSize.QuadPart / 8;

  001af	6a 00		 push	 0
  001b1	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
  001b4	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  001b7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001ba	6a 08		 push	 8
  001bc	52		 push	 edx
  001bd	50		 push	 eax
  001be	e8 00 00 00 00	 call	 __alldiv

; 8367 : 
; 8368 : 		// Scan the bitmap from the end
; 8369 : 		while (--bitmapCnt >= 0)

  001c3	83 e8 01	 sub	 eax, 1
  001c6	83 da 00	 sbb	 edx, 0
  001c9	78 3f		 js	 SHORT $LN2@ScanVolClu
  001cb	7f 04		 jg	 SHORT $LL3@ScanVolClu
  001cd	85 c0		 test	 eax, eax
  001cf	72 39		 jb	 SHORT $LN2@ScanVolClu
$LL3@ScanVolClu:

; 8370 : 		{
; 8371 : 			if (lpOutBuffer->Buffer[bitmapCnt] != 0)

  001d1	80 7c 06 10 00	 cmp	 BYTE PTR [esi+eax+16], 0
  001d6	75 12		 jne	 SHORT $LN15@ScanVolClu
  001d8	83 c0 ff	 add	 eax, -1
  001db	83 d2 ff	 adc	 edx, -1
  001de	85 d2		 test	 edx, edx
  001e0	7f ef		 jg	 SHORT $LL3@ScanVolClu

; 8367 : 
; 8368 : 		// Scan the bitmap from the end
; 8369 : 		while (--bitmapCnt >= 0)

  001e2	7c 26		 jl	 SHORT $LN2@ScanVolClu
  001e4	85 c0		 test	 eax, eax
  001e6	73 e9		 jae	 SHORT $LL3@ScanVolClu

; 8370 : 		{
; 8371 : 			if (lpOutBuffer->Buffer[bitmapCnt] != 0)

  001e8	eb 20		 jmp	 SHORT $LN2@ScanVolClu
$LN15@ScanVolClu:

; 8372 : 			{
; 8373 : 				// There might be up to 7 extra free clusters in this byte of the bitmap. 
; 8374 : 				// These are ignored because there is always a cluster reserve added anyway.
; 8375 : 				*nbrFreeClusters = lpOutBuffer->BitmapSize.QuadPart - ((bitmapCnt + 1) * 8);	

  001ea	6a 00		 push	 0
  001ec	83 c0 01	 add	 eax, 1
  001ef	6a 08		 push	 8
  001f1	83 d2 00	 adc	 edx, 0
  001f4	52		 push	 edx
  001f5	50		 push	 eax
  001f6	e8 00 00 00 00	 call	 __allmul
  001fb	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001fe	2b c8		 sub	 ecx, eax
  00200	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00203	1b c2		 sbb	 eax, edx
  00205	89 0f		 mov	 DWORD PTR [edi], ecx
  00207	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN2@ScanVolClu:

; 8376 : 				break;
; 8377 : 			}
; 8378 : 		}
; 8379 : 	}
; 8380 : 
; 8381 : 	CloseHandle (hDevice);

  0020a	8b 4c 24 14	 mov	 ecx, DWORD PTR _hDevice$[esp+48]
  0020e	51		 push	 ecx
  0020f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 8382 : 	free(lpOutBuffer);

  00215	56		 push	 esi
  00216	e8 00 00 00 00	 call	 _free

; 8391 : }

  0021b	8b 4c 24 30	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+52]
  0021f	83 c4 04	 add	 esp, 4
  00222	5f		 pop	 edi
  00223	5e		 pop	 esi
  00224	5d		 pop	 ebp
  00225	5b		 pop	 ebx
  00226	33 cc		 xor	 ecx, esp
  00228	b8 01 00 00 00	 mov	 eax, 1
  0022d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00232	83 c4 20	 add	 esp, 32			; 00000020H
  00235	c3		 ret	 0
_ScanVolClusterBitmap ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1Finally8402@?5??WipeHiddenOSCreationConfig@@9@QAE@XZ
_TEXT	SEGMENT
??1Finally8402@?5??WipeHiddenOSCreationConfig@@9@QAE@XZ PROC ; `WipeHiddenOSCreationConfig'::`6'::Finally8402::~Finally8402, COMDAT

; 8402 : 			finally_do ({ NormalCursor(); });

  00000	e9 00 00 00 00	 jmp	 _NormalCursor
??1Finally8402@?5??WipeHiddenOSCreationConfig@@9@QAE@XZ ENDP ; `WipeHiddenOSCreationConfig'::`6'::Finally8402::~Finally8402
_TEXT	ENDS
EXTRN	_GetDriveGeometry:PROC
; Function compile flags: /Ogtpy
;	COMDAT _GetFormatSectorSize
_TEXT	SEGMENT
_geometry$ = -24					; size = 24
_GetFormatSectorSize PROC				; COMDAT

; 9048 : {

  00000	83 ec 18	 sub	 esp, 24			; 00000018H

; 9049 : 	if (!bDevice)

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  0000a	75 09		 jne	 SHORT $LN2@GetFormatS

; 9050 : 		return TC_SECTOR_SIZE_FILE_HOSTED_VOLUME;

  0000c	b8 00 02 00 00	 mov	 eax, 512		; 00000200H

; 9061 : }

  00011	83 c4 18	 add	 esp, 24			; 00000018H
  00014	c3		 ret	 0
$LN2@GetFormatS:

; 9051 : 
; 9052 : 	DISK_GEOMETRY geometry;
; 9053 : 
; 9054 : 	if (!GetDriveGeometry (szDiskFile, &geometry))

  00015	8d 04 24	 lea	 eax, DWORD PTR _geometry$[esp+24]
  00018	50		 push	 eax
  00019	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  0001e	e8 00 00 00 00	 call	 _GetDriveGeometry
  00023	83 c4 08	 add	 esp, 8
  00026	85 c0		 test	 eax, eax
  00028	75 14		 jne	 SHORT $LN1@GetFormatS

; 9055 : 	{
; 9056 : 		handleWin32Error (MainDlg);

  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 _handleWin32Error
  00036	83 c4 04	 add	 esp, 4

; 9057 : 		AbortProcessSilent();

  00039	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN1@GetFormatS:

; 9058 : 	}
; 9059 : 
; 9060 : 	return geometry.BytesPerSector;

  0003e	8b 44 24 14	 mov	 eax, DWORD PTR _geometry$[esp+44]

; 9061 : }

  00042	83 c4 18	 add	 esp, 24			; 00000018H
  00045	c3		 ret	 0
_GetFormatSectorSize ENDP
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1666 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1667 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::~basic_ostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R13A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,0,4,64)'
EXTRN	??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R13A@3EA@?$_Iosb@H@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
rdata$r	SEGMENT
??_R13A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (4,0,4,64)'
	DD	00H
	DD	04H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R13?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::~basic_ostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 63   : 		{	// destroy the object

  00000	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a fc 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@

; 64   : 		}

  0000e	c3		 ret	 0
??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::~basic_ostream<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 39   : 		}

  00000	51		 push	 ecx
  00001	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00007	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::rdbuf
; Function compile flags: /Ogtpy
;	COMDAT ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
_TEXT	SEGMENT
?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::rdbuf, COMDAT
; _this$ = ecx

; 85   : 		return (_Mystrbuf);

  00000	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]

; 86   : 		}

  00003	c3		 ret	 0
?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::rdbuf
_TEXT	ENDS
PUBLIC	??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a f8 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-8], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@

; 43   : 		}

  0000e	c3		 ret	 0
??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size, COMDAT
; _this$ = ecx

; 1666 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1667 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
_TEXT	ENDS
PUBLIC	?size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::size, COMDAT
; _this$ = ecx

; 726  : 		return (_Mylast - _Myfirst);

  00000	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00003	2b 51 0c	 sub	 edx, DWORD PTR [ecx+12]
  00006	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0000b	f7 ea		 imul	 edx
  0000d	c1 fa 06	 sar	 edx, 6
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx

; 727  : 		}

  00017	c3		 ret	 0
?size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::empty
; Function compile flags: /Ogtpy
;	COMDAT ?empty@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::empty, COMDAT
; _this$ = ecx

; 736  : 		return (size() == 0);

  00000	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00003	2b 51 0c	 sub	 edx, DWORD PTR [ecx+12]
  00006	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0000b	f7 ea		 imul	 edx
  0000d	c1 fa 06	 sar	 edx, 6
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx
  00017	f7 d8		 neg	 eax
  00019	1b c0		 sbb	 eax, eax
  0001b	40		 inc	 eax

; 737  : 		}

  0001c	c3		 ret	 0
?empty@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@I@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::operator[]
EXTRN	__invalid_parameter_noinfo:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??A?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@I@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

  00003	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00006	2b 4e 0c	 sub	 ecx, DWORD PTR [esi+12]
  00009	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0000e	f7 e9		 imul	 ecx
  00010	c1 fa 06	 sar	 edx, 6
  00013	8b c2		 mov	 eax, edx
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	57		 push	 edi
  00019	8b 7c 24 0c	 mov	 edi, DWORD PTR __Pos$[esp+4]
  0001d	03 c2		 add	 eax, edx
  0001f	3b f8		 cmp	 edi, eax
  00021	72 05		 jb	 SHORT $LN3@operator@2
  00023	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@2:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

  00028	8b c7		 mov	 eax, edi
  0002a	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  00030	03 46 0c	 add	 eax, DWORD PTR [esi+12]
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi

; 786  : 		}

  00035	c2 04 00	 ret	 4
??A?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@I@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::operator[]
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEABUHostDevice@@XZ ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator*
; Function compile flags: /Ogtpy
;	COMDAT ??D?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEABUHostDevice@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEABUHostDevice@@XZ PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator*, COMDAT
; _this$ = ecx

; 91   : 		{	// return designated object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 92   : 
; 93   :  #if _HAS_ITERATOR_DEBUGGING
; 94   : 		if (this->_Mycont == 0
; 95   : 			|| _Myptr < ((_Myvec *)this->_Mycont)->_Myfirst
; 96   : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 97   : 			{
; 98   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 99   : 			_SCL_SECURE_OUT_OF_RANGE;
; 100  : 			}
; 101  :  #else
; 102  :  		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN19@operator@3
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 103  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN15@operator@3
$LN19@operator@3:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN16@operator@3
$LN15@operator@3:
  00018	33 c0		 xor	 eax, eax
$LN16@operator@3:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 0a		 jb	 SHORT $LN20@operator@3
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	5e		 pop	 esi

; 107  : 		}

  0002b	c3		 ret	 0
$LN20@operator@3:

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

  0002c	8b c1		 mov	 eax, ecx
  0002e	5e		 pop	 esi

; 107  : 		}

  0002f	c3		 ret	 0
??D?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEABUHostDevice@@XZ ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator*
_TEXT	ENDS
PUBLIC	??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (8,-1,0,64)'
EXTRN	??_E?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	03H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	09H
	DD	FLAT:??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	0cH
	DD	00H
	DD	FLAT:??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 918  : 		{	// destroy the object

  00000	8b 41 f4	 mov	 eax, DWORD PTR [ecx-12]
  00003	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00006	c7 44 0a f4 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-12], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@

; 919  : 		}

  0000e	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	c7 44 0a fc 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  0001c	8b 41 f4	 mov	 eax, DWORD PTR [ecx-12]
  0001f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00022	c7 44 0a f4 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-12], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0002a	c3		 ret	 0
??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??_Glocale@std@@QAEPAXI@Z			; std::locale::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_Glocale@std@@QAEPAXI@Z
_TEXT	SEGMENT
__Lock$141898 = -4					; size = 4
___flags$ = 8						; size = 4
??_Glocale@std@@QAEPAXI@Z PROC				; std::locale::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	8b d9		 mov	 ebx, ecx
  00004	57		 push	 edi
  00005	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00007	85 ff		 test	 edi, edi
  00009	74 3f		 je	 SHORT $LN7@scalar@7
  0000b	6a 00		 push	 0
  0000d	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$141898[esp+16]
  00011	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00016	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00019	85 c0		 test	 eax, eax
  0001b	76 09		 jbe	 SHORT $LN9@scalar@7
  0001d	83 f8 ff	 cmp	 eax, -1
  00020	73 04		 jae	 SHORT $LN9@scalar@7
  00022	48		 dec	 eax
  00023	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN9@scalar@7:
  00026	56		 push	 esi
  00027	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0002a	f7 de		 neg	 esi
  0002c	1b f6		 sbb	 esi, esi
  0002e	f7 d6		 not	 esi
  00030	8d 4c 24 0c	 lea	 ecx, DWORD PTR __Lock$141898[esp+16]
  00034	23 f7		 and	 esi, edi
  00036	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0003b	85 f6		 test	 esi, esi
  0003d	74 0a		 je	 SHORT $LN13@scalar@7
  0003f	8b 06		 mov	 eax, DWORD PTR [esi]
  00041	8b 10		 mov	 edx, DWORD PTR [eax]
  00043	6a 01		 push	 1
  00045	8b ce		 mov	 ecx, esi
  00047	ff d2		 call	 edx
$LN13@scalar@7:
  00049	5e		 pop	 esi
$LN7@scalar@7:
  0004a	f6 44 24 10 01	 test	 BYTE PTR ___flags$[esp+8], 1
  0004f	74 09		 je	 SHORT $LN12@scalar@7
  00051	53		 push	 ebx
  00052	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00057	83 c4 04	 add	 esp, 4
$LN12@scalar@7:
  0005a	5f		 pop	 edi
  0005b	8b c3		 mov	 eax, ebx
  0005d	5b		 pop	 ebx
  0005e	59		 pop	 ecx
  0005f	c2 04 00	 ret	 4
??_Glocale@std@@QAEPAXI@Z ENDP				; std::locale::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  00011	50		 push	 eax
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00018	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00003	8b 48 f8	 mov	 ecx, DWORD PTR [eax-8]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 f8 00
	00 00 00	 mov	 DWORD PTR [edx+eax-8], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00011	50		 push	 eax
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00018	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00003	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
  00011	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  0001f	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00022	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00025	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0002d	50		 push	 eax
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00034	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00039	59		 pop	 ecx
  0003a	c3		 ret	 0
??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  00009	c3		 ret	 0
$LN3@Myptr:

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::fill
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ
_TEXT	SEGMENT
?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::fill, COMDAT
; _this$ = ecx

; 106  : 		return (_Fillch);

  00000	66 8b 41 30	 mov	 ax, WORD PTR [ecx+48]

; 107  : 		}

  00004	c3		 ret	 0
?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::fill
_TEXT	ENDS
PUBLIC	??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::basic_ios<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
EXTRN	??_E?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
rdata$r	SEGMENT
??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
CONST	ENDS
;	COMDAT ??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::basic_ios<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 146  : 	__CLR_OR_THIS_CALL basic_ios()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@

; 147  : 		{	// default constructor, do nothing
; 148  : 		}

  00008	c3		 ret	 0
??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::basic_ios<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	56		 push	 esi
  00004	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0000a	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000f	83 c4 04	 add	 esp, 4
  00012	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00017	74 09		 je	 SHORT $LN9@scalar@8
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	83 c4 04	 add	 esp, 4
$LN9@scalar@8:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c2 04 00	 ret	 4
??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pubsync
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ
_TEXT	SEGMENT
?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pubsync, COMDAT
; _this$ = ecx

; 100  : 		return (sync());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00005	ff e2		 jmp	 edx
?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pubsync
_TEXT	ENDS
PUBLIC	?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Unlock
EXTRN	?_Unlock@_Mutex@std@@QAEXXZ:PROC		; std::_Mutex::_Unlock
; Function compile flags: /Ogtpy
;	COMDAT ?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Unlock, COMDAT
; _this$ = ecx

; 178  : 		_Mylock._Unlock();

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Unlock
_TEXT	ENDS
PUBLIC	?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::eback
; Function compile flags: /Ogtpy
;	COMDAT ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::eback, COMDAT
; _this$ = ecx

; 185  : 		return (*_IGfirst);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 186  : 		}

  00005	c3		 ret	 0
?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::eback
_TEXT	ENDS
PUBLIC	?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gptr
; Function compile flags: /Ogtpy
;	COMDAT ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gptr, COMDAT
; _this$ = ecx

; 190  : 		return (*_IGnext);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 191  : 		}

  00005	c3		 ret	 0
?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gptr
_TEXT	ENDS
PUBLIC	?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbase
; Function compile flags: /Ogtpy
;	COMDAT ?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbase, COMDAT
; _this$ = ecx

; 195  : 		return (*_IPfirst);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 196  : 		}

  00005	c3		 ret	 0
?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbase
_TEXT	ENDS
PUBLIC	?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pptr
; Function compile flags: /Ogtpy
;	COMDAT ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pptr, COMDAT
; _this$ = ecx

; 200  : 		return (*_IPnext);

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 201  : 		}

  00005	c3		 ret	 0
?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pptr
_TEXT	ENDS
PUBLIC	?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::egptr
; Function compile flags: /Ogtpy
;	COMDAT ?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::egptr, COMDAT
; _this$ = ecx

; 205  : 		return (*_IGnext + *_IGcount);

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00008	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000a	8d 04 51	 lea	 eax, DWORD PTR [ecx+edx*2]

; 206  : 		}

  0000d	c3		 ret	 0
?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::egptr
_TEXT	ENDS
PUBLIC	?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setg
; Function compile flags: /Ogtpy
;	COMDAT ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setg, COMDAT
; _this$ = ecx

; 216  : 		*_IGfirst = _First;

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00007	89 10		 mov	 DWORD PTR [eax], edx

; 217  : 		*_IGnext = _Next;

  00009	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __Next$[esp-4]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 218  : 		*_IGcount = (int)(_Last - _Next);

  00012	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp-4]
  00016	2b d0		 sub	 edx, eax
  00018	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0001b	d1 fa		 sar	 edx, 1
  0001d	89 10		 mov	 DWORD PTR [eax], edx

; 219  : 		}

  0001f	c2 0c 00	 ret	 12			; 0000000cH
?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setg
_TEXT	ENDS
PUBLIC	?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::epptr
; Function compile flags: /Ogtpy
;	COMDAT ?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::epptr, COMDAT
; _this$ = ecx

; 223  : 		return (*_IPnext + *_IPcount);

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00008	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000a	8d 04 51	 lea	 eax, DWORD PTR [ecx+edx*2]

; 224  : 		}

  0000d	c3		 ret	 0
?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::epptr
_TEXT	ENDS
PUBLIC	?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp
; Function compile flags: /Ogtpy
;	COMDAT ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp, COMDAT
; _this$ = ecx

; 257  : 		*_IPfirst = _First;

  00000	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00007	89 02		 mov	 DWORD PTR [edx], eax

; 258  : 		*_IPnext = _First;

  00009	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 259  : 		*_IPcount = (int)(_Last - _First);

  0000e	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00012	2b d0		 sub	 edx, eax
  00014	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00017	d1 fa		 sar	 edx, 1
  00019	89 10		 mov	 DWORD PTR [eax], edx

; 260  : 		}

  0001b	c2 08 00	 ret	 8
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp
_TEXT	ENDS
PUBLIC	?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp
; Function compile flags: /Ogtpy
;	COMDAT ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp, COMDAT
; _this$ = ecx

; 264  : 		*_IPfirst = _First;

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00007	89 10		 mov	 DWORD PTR [eax], edx

; 265  : 		*_IPnext = _Next;

  00009	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0000c	8b 44 24 08	 mov	 eax, DWORD PTR __Next$[esp-4]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 266  : 		*_IPcount = (int)(_Last - _Next);

  00012	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp-4]
  00016	2b d0		 sub	 edx, eax
  00018	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0001b	d1 fa		 sar	 edx, 1
  0001d	89 10		 mov	 DWORD PTR [eax], edx

; 267  : 		}

  0001f	c2 0c 00	 ret	 12			; 0000000cH
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp
_TEXT	ENDS
PUBLIC	?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pninc
; Function compile flags: /Ogtpy
;	COMDAT ?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ
_TEXT	SEGMENT
?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pninc, COMDAT
; _this$ = ecx

; 271  : 		--*_IPcount;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 272  : 		return ((*_IPnext)++);

  00005	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 273  : 		}

  0000f	c3		 ret	 0
?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pninc
_TEXT	ENDS
PUBLIC	?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail
; Function compile flags: /Ogtpy
;	COMDAT ?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ
_TEXT	SEGMENT
?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail, COMDAT
; _this$ = ecx

; 277  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 06		 je	 SHORT $LN3@Pnavail
  00008	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 278  : 		}

  0000d	c3		 ret	 0
$LN3@Pnavail:

; 277  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  0000e	33 c0		 xor	 eax, eax

; 278  : 		}

  00010	c3		 ret	 0
?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN3@Myptr@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@2:

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2176 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@_W@std@@QAE@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@_W@std@@QAE@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@_W@std@@QAE@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z	; std::allocator<wchar_t>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::capacity
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::capacity, COMDAT
; _this$ = ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	85 c0		 test	 eax, eax
  00005	75 01		 jne	 SHORT $LN3@capacity

; 636  : 		}

  00007	c3		 ret	 0
$LN3@capacity:

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00008	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0000b	2b c8		 sub	 ecx, eax
  0000d	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00012	f7 e9		 imul	 ecx
  00014	c1 fa 06	 sar	 edx, 6
  00017	8b c2		 mov	 eax, edx
  00019	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001c	03 c2		 add	 eax, edx

; 636  : 		}

  0001e	c3		 ret	 0
?capacity@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::capacity
_TEXT	ENDS
PUBLIC	??0?$allocator@UHostDevice@@@std@@QAE@XZ	; std::allocator<HostDevice>::allocator<HostDevice>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UHostDevice@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UHostDevice@@@std@@QAE@XZ PROC		; std::allocator<HostDevice>::allocator<HostDevice>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

  00002	c3		 ret	 0
??0?$allocator@UHostDevice@@@std@@QAE@XZ ENDP		; std::allocator<HostDevice>::allocator<HostDevice>
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx

; 300  : 		{	// discard any allocated buffer and clear pointers

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 301  : 		if (_Mystate & _Allocated)

  00003	f6 46 40 01	 test	 BYTE PTR [esi+64], 1
  00007	74 0e		 je	 SHORT $LN16@Tidy

; 302  : 			_Al.deallocate(_Mysb::eback(),
; 303  : 				(_Mysb::pptr() != 0 ? _Mysb::epptr()
; 304  : 					: _Mysb::egptr()) - _Mysb::eback());

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
$LN16@Tidy:

; 305  : 		_Mysb::setg(0, 0, 0);

  00017	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0001a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00020	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00023	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00029	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0002c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 306  : 		_Mysb::setp(0, 0);

  00032	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00035	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0003b	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0003e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00044	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00047	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 307  : 		_Seekhigh = 0;
; 308  : 		_Mystate &= ~_Allocated;

  0004d	83 66 40 fe	 and	 DWORD PTR [esi+64], -2	; fffffffeH
  00051	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00058	5e		 pop	 esi

; 309  : 		}

  00059	c3		 ret	 0
?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
PUBLIC	??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 116  : 			return (_Ok);

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]

; 117  : 			}

  00003	c3		 ret	 0
??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
_TEXT	ENDS
PUBLIC	?put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::put
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 8
?put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::put, COMDAT
; _this$ = ecx

; 1092 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00000	8b 54 24 1c	 mov	 edx, DWORD PTR __Val$[esp]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00009	56		 push	 esi
  0000a	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]
  0000e	52		 push	 edx
  0000f	8b 54 24 20	 mov	 edx, DWORD PTR __Val$[esp+4]
  00013	52		 push	 edx
  00014	8b 54 24 20	 mov	 edx, DWORD PTR __Fill$[esp+8]
  00018	52		 push	 edx
  00019	8b 54 24 20	 mov	 edx, DWORD PTR __Iosbase$[esp+12]
  0001d	52		 push	 edx
  0001e	8b 54 24 20	 mov	 edx, DWORD PTR __Dest$[esp+20]
  00022	52		 push	 edx
  00023	8b 54 24 20	 mov	 edx, DWORD PTR __Dest$[esp+20]
  00027	52		 push	 edx
  00028	56		 push	 esi
  00029	ff d0		 call	 eax
  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi

; 1093 : 		}

  0002e	c2 1c 00	 ret	 28			; 0000001cH
?put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::put
_TEXT	ENDS
PUBLIC	??0?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ??0?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
_TEXT	SEGMENT
__Sb$ = 8						; size = 4
??0?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z PROC ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 583  : 		{	// construct from stream buffer _Sb

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Sb$[esp-4]
  00006	c6 00 00	 mov	 BYTE PTR [eax], 0
  00009	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 584  : 		}

  0000c	c2 04 00	 ret	 4
??0?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ENDP ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	?failed@?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::failed
; Function compile flags: /Ogtpy
;	COMDAT ?failed@?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?failed@?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NXZ PROC ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::failed, COMDAT
; _this$ = ecx

; 617  : 		return (_Failed);

  00000	8a 01		 mov	 al, BYTE PTR [ecx]

; 618  : 		}

  00002	c3		 ret	 0
?failed@?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ENDP ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::failed
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEAAUHostDevice@@XZ ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEAAUHostDevice@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEAAUHostDevice@@XZ PROC ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator*, COMDAT
; _this$ = ecx

; 338  : 		{	// return designated object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 339  : 		return ((reference)**(_Mybase *)this);

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN21@operator@4
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN17@operator@4
$LN21@operator@4:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN18@operator@4
$LN17@operator@4:
  00018	33 c0		 xor	 eax, eax
$LN18@operator@4:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 0a		 jb	 SHORT $LN22@operator@4
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	5e		 pop	 esi

; 340  : 		}

  0002b	c3		 ret	 0
$LN22@operator@4:

; 339  : 		return ((reference)**(_Mybase *)this);

  0002c	8b c1		 mov	 eax, ecx
  0002e	5e		 pop	 esi

; 340  : 		}

  0002f	c3		 ret	 0
??D?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEAAUHostDevice@@XZ ENDP ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator*
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN3@Myptr@3
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@3:

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::basic_ostream<wchar_t,std::char_traits<wchar_t> >
EXTRN	?_Addstd@ios_base@std@@SAXPAV12@@Z:PROC		; std::ios_base::_Addstd
;	COMDAT ??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@ DD 00H ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	04H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z$0
__ehfuncinfo$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
_TEXT	SEGMENT
$T142126 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
__Addit$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::basic_ostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 56   : 	__CLR_OR_THIS_CALL basic_ostream(_Uninitialized, bool _Addit = true)

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0002a	33 c0		 xor	 eax, eax
  0002c	89 44 24 08	 mov	 DWORD PTR $T142126[esp+28], eax
  00030	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+24], eax
  00034	74 19		 je	 SHORT $LN2@basic_ostr
  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@
  0003c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  00043	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  00047	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR $T142126[esp+28], 1
$LN2@basic_ostr:
  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00054	c7 04 16 00 00
	00 00		 mov	 DWORD PTR [esi+edx], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@

; 57   : 		{	// construct uninitialized
; 58   : 		if (_Addit)

  0005b	38 44 24 24	 cmp	 BYTE PTR __Addit$[esp+24], al
  0005f	74 10		 je	 SHORT $LN13@basic_ostr

; 59   : 			ios_base::_Addstd(this);	// suppress for basic_iostream

  00061	8b 06		 mov	 eax, DWORD PTR [esi]
  00063	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00066	03 c6		 add	 eax, esi
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  0006e	83 c4 04	 add	 esp, 4
$LN13@basic_ostr:

; 60   : 		}

  00071	8b c6		 mov	 eax, esi
  00073	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5e		 pop	 esi
  00080	83 c4 14	 add	 esp, 20			; 00000014H
  00083	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T142126[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN8@basic_ostr
  0000c	83 65 ec fe	 and	 DWORD PTR $T142126[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 04	 add	 ecx, 4
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN8@basic_ostr:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::basic_ostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::tie
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ
_TEXT	SEGMENT
?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::tie, COMDAT
; _this$ = ecx

; 73   : 		return (_Tiestr);

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]

; 74   : 		}

  00003	c3		 ret	 0
?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::tie
_TEXT	ENDS
PUBLIC	?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Lock
EXTRN	?_Lock@_Mutex@std@@QAEXXZ:PROC			; std::_Mutex::_Lock
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Lock, COMDAT
; _this$ = ecx

; 173  : 		_Mylock._Lock();

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Lock
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN3@Myptr@4
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  00009	c3		 ret	 0
$LN3@Myptr@4:

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 2171 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEPA_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@_W@std@@QAE@ABV01@@Z		; std::allocator<wchar_t>::allocator<wchar_t>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@_W@std@@QAE@ABV01@@Z PROC		; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@_W@std@@QAE@ABV01@@Z ENDP		; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
PUBLIC	??0?$allocator@UHostDevice@@@std@@QAE@ABV01@@Z	; std::allocator<HostDevice>::allocator<HostDevice>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$allocator@UHostDevice@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UHostDevice@@@std@@QAE@ABV01@@Z PROC	; std::allocator<HostDevice>::allocator<HostDevice>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UHostDevice@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<HostDevice>::allocator<HostDevice>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@I@Z ; std::allocator<HostDevice>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@I@Z PROC ; std::allocator<HostDevice>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@I@Z ENDP ; std::allocator<HostDevice>::deallocate
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::deallocate
_TEXT	ENDS
PUBLIC	?_Nextnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Nextnode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Nextnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Nextnode, COMDAT

; 115  : 		return ((_Nodepref)(*_Pnode)._Next);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 116  : 		}

  00004	c3		 ret	 0
?_Nextnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Prevnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Prevnode
; Function compile flags: /Ogtpy
;	COMDAT ?_Prevnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Prevnode, COMDAT

; 120  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 121  : 		}

  00007	c3		 ret	 0
?_Prevnode@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@KAAAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@PAU342@@Z ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Prevnode
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@I@Z ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::deallocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 141  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator-
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??G?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator-, COMDAT
; _this$ = ecx

; 186  : 		{	// return difference of iterators

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 187  : 
; 188  :  #if _HAS_ITERATOR_DEBUGGING
; 189  : 		_Compat(_Right);
; 190  :  #else
; 191  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN4@operator@5
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN3@operator@5
$LN4@operator@5:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@5:

; 192  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 193  : 
; 194  : 		return (_Myptr - _Right._Myptr);

  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	2b 4f 04	 sub	 ecx, DWORD PTR [edi+4]
  0001d	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00022	f7 e9		 imul	 ecx
  00024	c1 fa 06	 sar	 edx, 6
  00027	8b c2		 mov	 eax, edx
  00029	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002c	5f		 pop	 edi
  0002d	03 c2		 add	 eax, edx
  0002f	5e		 pop	 esi

; 195  : 		}

  00030	c2 04 00	 ret	 4
??G?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator-
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator==
; Function compile flags: /Ogtpy
;	COMDAT ??8?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN4@operator@6
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN3@operator@6
$LN4@operator@6:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@6:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 94 c1	 sete	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 212  : 		}

  00026	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator==
_TEXT	ENDS
PUBLIC	?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getstate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z
_TEXT	SEGMENT
__Mode$ = 8						; size = 4
?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getstate, COMDAT
; _this$ = ecx

; 318  : 		_Strstate _State = (_Strstate)0;
; 319  : 		if (!(_Mode & ios_base::in))

  00000	8a 4c 24 04	 mov	 cl, BYTE PTR __Mode$[esp-4]
  00004	33 c0		 xor	 eax, eax
  00006	f6 c1 01	 test	 cl, 1
  00009	75 05		 jne	 SHORT $LN4@Getstate

; 320  : 			_State |= _Noread;

  0000b	b8 04 00 00 00	 mov	 eax, 4
$LN4@Getstate:

; 321  : 		if (!(_Mode & ios_base::out))

  00010	f6 c1 02	 test	 cl, 2
  00013	75 03		 jne	 SHORT $LN3@Getstate

; 322  : 			_State |= _Constant;

  00015	83 c8 02	 or	 eax, 2
$LN3@Getstate:

; 323  : 		if (_Mode & ios_base::app)

  00018	f6 c1 08	 test	 cl, 8
  0001b	74 03		 je	 SHORT $LN2@Getstate

; 324  : 			_State |= _Append;

  0001d	83 c8 08	 or	 eax, 8
$LN2@Getstate:

; 325  : 		if (_Mode & ios_base::ate)

  00020	f6 c1 04	 test	 cl, 4
  00023	74 03		 je	 SHORT $LN1@Getstate

; 326  : 			_State |= _Atend;

  00025	83 c8 10	 or	 eax, 16			; 00000010H
$LN1@Getstate:

; 327  : 		return (_State);
; 328  : 		}

  00028	c2 04 00	 ret	 4
?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getstate
_TEXT	ENDS
PUBLIC	??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 75   : 			{	// lock the stream buffer, if there

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ostr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 06		 mov	 DWORD PTR [esi], eax

; 76   : 			if (_Myostr.rdbuf() != 0)

  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000e	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  00012	85 c0		 test	 eax, eax
  00014	74 08		 je	 SHORT $LN10@Sentry_bas

; 77   : 				_Myostr.rdbuf()->_Lock();

  00016	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00019	e8 00 00 00 00	 call	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
$LN10@Sentry_bas:

; 78   : 			}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
PUBLIC	??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtpy
;	COMDAT ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 82   : 			if (_Myostr.rdbuf() != 0)

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00007	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  0000b	85 c0		 test	 eax, eax
  0000d	74 08		 je	 SHORT $LN8@Sentry_bas@2

; 83   : 				_Myostr.rdbuf()->_Unlock();

  0000f	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00012	e9 00 00 00 00	 jmp	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN8@Sentry_bas@2:

; 84   : 			}

  00017	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2133 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2134 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 2c		 je	 SHORT $LN2@Inside
  0000a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0000d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00010	83 fe 10	 cmp	 esi, 16			; 00000010H
  00013	72 04		 jb	 SHORT $LN8@Inside
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN9@Inside
$LN8@Inside:
  00019	8b d0		 mov	 edx, eax
$LN9@Inside:
  0001b	3b fa		 cmp	 edi, edx
  0001d	72 17		 jb	 SHORT $LN2@Inside
  0001f	83 fe 10	 cmp	 esi, 16			; 00000010H
  00022	72 02		 jb	 SHORT $LN12@Inside
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@Inside:
  00026	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00029	03 c8		 add	 ecx, eax
  0002b	3b cf		 cmp	 ecx, edi
  0002d	76 07		 jbe	 SHORT $LN2@Inside
  0002f	5f		 pop	 edi

; 2136 : 		else
; 2137 : 			return (true);

  00030	b0 01		 mov	 al, 1
  00032	5e		 pop	 esi

; 2138 : 		}

  00033	c2 04 00	 ret	 4
$LN2@Inside:
  00036	5f		 pop	 edi

; 2135 : 			return (false);	// don't ask

  00037	32 c0		 xor	 al, al
  00039	5e		 pop	 esi

; 2138 : 		}

  0003a	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Init, COMDAT
; _this$ = ecx

; 282  : 		_IGfirst = &_Gfirst, _IPfirst = &_Pfirst;
; 283  : 		_IGnext = &_Gnext, _IPnext = &_Pnext;

  00000	8d 51 18	 lea	 edx, DWORD PTR [ecx+24]
  00003	89 51 20	 mov	 DWORD PTR [ecx+32], edx
  00006	8d 51 1c	 lea	 edx, DWORD PTR [ecx+28]
  00009	89 51 24	 mov	 DWORD PTR [ecx+36], edx
  0000c	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  0000f	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 284  : 		_IGcount = &_Gcount, _IPcount = &_Pcount;

  00012	8d 51 28	 lea	 edx, DWORD PTR [ecx+40]
  00015	89 51 30	 mov	 DWORD PTR [ecx+48], edx
  00018	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  0001b	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0001e	8d 51 2c	 lea	 edx, DWORD PTR [ecx+44]
  00021	89 51 34	 mov	 DWORD PTR [ecx+52], edx

; 285  : 		setp(0, 0), setg(0, 0, 0);

  00024	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002a	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00033	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00036	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0003c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00045	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00048	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0004e	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00051	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 286  : 		}

  00057	c3		 ret	 0
?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Init
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside, COMDAT
; _this$ = ecx

; 2133 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2134 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 2d		 je	 SHORT $LN2@Inside@2
  0000a	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0000d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00010	83 fe 08	 cmp	 esi, 8
  00013	72 04		 jb	 SHORT $LN8@Inside@2
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN9@Inside@2
$LN8@Inside@2:
  00019	8b d0		 mov	 edx, eax
$LN9@Inside@2:
  0001b	3b fa		 cmp	 edi, edx
  0001d	72 18		 jb	 SHORT $LN2@Inside@2
  0001f	83 fe 08	 cmp	 esi, 8
  00022	72 02		 jb	 SHORT $LN12@Inside@2
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN12@Inside@2:
  00026	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00029	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  0002c	3b d7		 cmp	 edx, edi
  0002e	76 07		 jbe	 SHORT $LN2@Inside@2
  00030	5f		 pop	 edi

; 2136 : 		else
; 2137 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	5e		 pop	 esi

; 2138 : 		}

  00034	c2 04 00	 ret	 4
$LN2@Inside@2:
  00037	5f		 pop	 edi

; 2135 : 			return (false);	// don't ask

  00038	32 c0		 xor	 al, al
  0003a	5e		 pop	 esi

; 2138 : 		}

  0003b	c2 04 00	 ret	 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NPB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UHostDevice@@@std@@QBEIXZ	; std::allocator<HostDevice>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UHostDevice@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UHostDevice@@@std@@QBEIXZ PROC	; std::allocator<HostDevice>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 e1 e1 e1 01	 mov	 eax, 31580641		; 01e1e1e1H

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UHostDevice@@@std@@QBEIXZ ENDP	; std::allocator<HostDevice>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UHostDevice@@HPBU3@ABU3@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UHostDevice@@HPBU3@ABU3@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UHostDevice@@HPBU3@ABU3@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@UHostDevice@@HPBU3@ABU3@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,HostDevice,int,HostDevice const *,HostDevice const &,std::_Iterator_base_aux>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 167  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@_W@std@@QBEIXZ		; std::allocator<wchar_t>::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@_W@std@@QBEIXZ PROC		; std::allocator<wchar_t>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 167  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@_W@std@@QBEIXZ ENDP		; std::allocator<wchar_t>::max_size
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	85 c0		 test	 eax, eax
  00008	75 0b		 jne	 SHORT $LN26@operator@7
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	85 c0		 test	 eax, eax
  00013	74 04		 je	 SHORT $LN16@operator@7
$LN26@operator@7:
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN17@operator@7
$LN16@operator@7:
  00019	33 c9		 xor	 ecx, ecx
$LN17@operator@7:
  0001b	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  0001f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00022	69 ff 88 00 00
	00		 imul	 edi, 136		; 00000088H
  00028	03 d7		 add	 edx, edi
  0002a	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  0002d	77 0f		 ja	 SHORT $LN4@operator@7
  0002f	85 c0		 test	 eax, eax
  00031	74 04		 je	 SHORT $LN22@operator@7
  00033	8b 00		 mov	 eax, DWORD PTR [eax]
  00035	eb 02		 jmp	 SHORT $LN23@operator@7
$LN22@operator@7:
  00037	33 c0		 xor	 eax, eax
$LN23@operator@7:
  00039	3b 50 0c	 cmp	 edx, DWORD PTR [eax+12]
  0003c	73 05		 jae	 SHORT $LN27@operator@7
$LN4@operator@7:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

  0003e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN27@operator@7:

; 164  : 		_Myptr += _Off;

  00043	01 7e 04	 add	 DWORD PTR [esi+4], edi
  00046	5f		 pop	 edi

; 165  : 		return (*this);

  00047	8b c6		 mov	 eax, esi
  00049	5e		 pop	 esi

; 166  : 		}

  0004a	c2 04 00	 ret	 4
??Y?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator+=
_TEXT	ENDS
PUBLIC	??$ToTypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::ToTypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\platform\foreach.h
;	COMDAT ??$ToTypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??$ToTypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z PROC ; CipherShed::ForEach::ToTypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT

; 85   : 		static TypeWrapper <T> ToTypeWrapper (const T &x) { return TypeWrapper <T> (); }

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
??$ToTypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::ToTypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	??$?BV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@12@XZ ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<HostDevice,std::allocator<HostDevice> > > CipherShed::ForEach::TypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$?BV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$?BV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@12@XZ PROC ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<HostDevice,std::allocator<HostDevice> > > CipherShed::ForEach::TypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT
; _this$ = ecx

; 90   : 			operator TypeWrapper <T> () const { return TypeWrapper <T> (); }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	c2 04 00	 ret	 4
??$?BV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@TypeWrapperDummy@ForEach@CipherShed@@QBE?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@12@XZ ENDP ; CipherShed::ForEach::TypeWrapperDummy::operator<std::vector<HostDevice,std::allocator<HostDevice> > > CipherShed::ForEach::TypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@@Z
_TEXT	SEGMENT
_forEachContainer$ = 8					; size = 4
___formal$ = 12						; size = 4
??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT

; 96   : 			return static_cast <const ContainerForward <T> &> (forEachContainer);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _forEachContainer$[esp-4]

; 97   : 		}

  00004	c3		 ret	 0
??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SAABU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	??$arraysize@_W$0EB@@@YAIAAY0EB@$$CB_W@Z	; arraysize<wchar_t,65>
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\format\tcformat.c
;	COMDAT ??$arraysize@_W$0EB@@@YAIAAY0EB@$$CB_W@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$arraysize@_W$0EB@@@YAIAAY0EB@$$CB_W@Z PROC		; arraysize<wchar_t,65>, COMDAT

; 56   : inline unsigned arraysize(const T (&v)[S]) { return S; }

  00000	b8 41 00 00 00	 mov	 eax, 65			; 00000041H
  00005	c3		 ret	 0
??$arraysize@_W$0EB@@@YAIAAY0EB@$$CB_W@Z ENDP		; arraysize<wchar_t,65>
_TEXT	ENDS
PUBLIC	??$arraysize@E$0EB@@@YAIAAY0EB@$$CBE@Z		; arraysize<unsigned char,65>
; Function compile flags: /Ogtpy
;	COMDAT ??$arraysize@E$0EB@@@YAIAAY0EB@$$CBE@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$arraysize@E$0EB@@@YAIAAY0EB@$$CBE@Z PROC		; arraysize<unsigned char,65>, COMDAT

; 56   : inline unsigned arraysize(const T (&v)[S]) { return S; }

  00000	b8 41 00 00 00	 mov	 eax, 65			; 00000041H
  00005	c3		 ret	 0
??$arraysize@E$0EB@@@YAIAAY0EB@$$CBE@Z ENDP		; arraysize<unsigned char,65>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@_W@std@@YAPA_WIPA_W@Z		; std::_Allocate<wchar_t>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
_TEXT	SEGMENT
$T142321 = -12						; size = 12
$T142326 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@_W@std@@YAPA_WIPA_W@Z PROC			; std::_Allocate<wchar_t>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 12		 ja	 SHORT $LN3@Allocate

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00016	83 c4 04	 add	 esp, 4

; 44   : 	}

  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	c3		 ret	 0
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001d	83 c8 ff	 or	 eax, -1
  00020	33 d2		 xor	 edx, edx
  00022	f7 f1		 div	 ecx
  00024	83 f8 02	 cmp	 eax, 2
  00027	73 e4		 jae	 SHORT $LN1@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00029	8d 44 24 10	 lea	 eax, DWORD PTR $T142326[esp+8]
  0002d	50		 push	 eax
  0002e	8d 4c 24 04	 lea	 ecx, DWORD PTR $T142321[esp+16]
  00032	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T142326[esp+12], 0
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003f	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00044	8d 4c 24 04	 lea	 ecx, DWORD PTR $T142321[esp+16]
  00048	51		 push	 ecx
  00049	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T142321[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate:
  00056	cc		 int	 3
??$_Allocate@_W@std@@YAPA_WIPA_W@Z ENDP			; std::_Allocate<wchar_t>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$?0UHostDevice@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UHostDevice@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><HostDevice>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0UHostDevice@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UHostDevice@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0UHostDevice@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UHostDevice@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><HostDevice>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

  00002	c2 04 00	 ret	 4
??$?0UHostDevice@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@UHostDevice@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><HostDevice>
_TEXT	ENDS
PUBLIC	??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ; std::_Allocate<HostDevice>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z
_TEXT	SEGMENT
$T142335 = -12						; size = 12
$T142339 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z PROC ; std::_Allocate<HostDevice>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 15		 ja	 SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	69 c9 88 00 00
	00		 imul	 ecx, 136		; 00000088H
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00019	83 c4 04	 add	 esp, 4

; 44   : 	}

  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001f	c3		 ret	 0
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00020	83 c8 ff	 or	 eax, -1
  00023	33 d2		 xor	 edx, edx
  00025	f7 f1		 div	 ecx
  00027	3d 88 00 00 00	 cmp	 eax, 136		; 00000088H
  0002c	73 df		 jae	 SHORT $LN1@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002e	8d 44 24 10	 lea	 eax, DWORD PTR $T142339[esp+8]
  00032	50		 push	 eax
  00033	8d 4c 24 04	 lea	 ecx, DWORD PTR $T142335[esp+16]
  00037	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T142339[esp+12], 0
  0003f	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00044	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00049	8d 4c 24 04	 lea	 ecx, DWORD PTR $T142335[esp+16]
  0004d	51		 push	 ecx
  0004e	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T142335[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00056	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@2:
  0005b	cc		 int	 3
??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ENDP ; std::_Allocate<HostDevice>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z
_TEXT	SEGMENT
$T142345 = -12						; size = 12
$T142349 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z PROC ; std::_Allocate<std::_Aux_cont>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 16		 ja	 SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4

; 44   : 	}

  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	c3		 ret	 0
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  00021	83 c8 ff	 or	 eax, -1
  00024	33 d2		 xor	 edx, edx
  00026	f7 f1		 div	 ecx
  00028	83 f8 04	 cmp	 eax, 4
  0002b	73 e0		 jae	 SHORT $LN1@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  0002d	8d 44 24 10	 lea	 eax, DWORD PTR $T142349[esp+8]
  00031	50		 push	 eax
  00032	8d 4c 24 04	 lea	 ecx, DWORD PTR $T142345[esp+16]
  00036	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T142349[esp+12], 0
  0003e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00043	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00048	8d 4c 24 04	 lea	 ecx, DWORD PTR $T142345[esp+16]
  0004c	51		 push	 ecx
  0004d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T142345[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  00055	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@3:
  0005a	cc		 int	 3
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ENDP ; std::_Allocate<std::_Aux_cont>
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T142353 = -12						; size = 12
$T142357 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 37   : 	if (_Count <= 0)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00007	85 c9		 test	 ecx, ecx
  00009	77 0f		 ja	 SHORT $LN3@Allocate@4

; 38   : 		_Count = 0;

  0000b	33 c9		 xor	 ecx, ecx
$LN1@Allocate@4:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00013	83 c4 04	 add	 esp, 4

; 44   : 	}

  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	c3		 ret	 0
$LN3@Allocate@4:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

  0001a	83 c8 ff	 or	 eax, -1
  0001d	33 d2		 xor	 edx, edx
  0001f	f7 f1		 div	 ecx
  00021	83 f8 01	 cmp	 eax, 1
  00024	73 e7		 jae	 SHORT $LN1@Allocate@4

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T142357[esp+8]
  0002a	50		 push	 eax
  0002b	8d 4c 24 04	 lea	 ecx, DWORD PTR $T142353[esp+16]
  0002f	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR $T142357[esp+12], 0
  00037	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003c	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00041	8d 4c 24 04	 lea	 ecx, DWORD PTR $T142353[esp+16]
  00045	51		 push	 ecx
  00046	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T142353[esp+20], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Allocate@4:
  00053	cc		 int	 3
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	?sputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHPB_WH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputn
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?sputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHPB_WH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?sputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHPB_WH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputn, COMDAT
; _this$ = ecx

; 168  : 		return (xsputn(_Ptr, _Count));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00005	ff e0		 jmp	 eax
?sputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHPB_WH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputn
_TEXT	ENDS
PUBLIC	?_Init@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?_Init@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
__Lobj$ = 8						; size = 4
?_Init@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Init, COMDAT
; _this$ = ecx

; 1046 : 		{	// initialize from _Locinfo object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1047 : 		_Cvt = _Lobj._Getcvt();

  00003	e8 00 00 00 00	 call	 __Getcvt
  00008	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0000b	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  0000e	5e		 pop	 esi

; 1048 : 		}

  0000f	c2 04 00	 ret	 4
?_Init@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Init
_TEXT	ENDS
PUBLIC	??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<char> >, COMDAT

; 575  : 	{

  00000	51		 push	 ecx

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Secure$[esp+4]

; 578  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 598  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -1						; size = 1
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<wchar_t> >, COMDAT

; 575  : 	{

  00000	51		 push	 ecx

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Secure$[esp+4]

; 578  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Char_traits_cat@U?$char_traits@_W@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 598  : 	}

  00026	c3		 ret	 0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUHostDevice@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUHostDevice@@0@Z ; std::_Iter_random<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_random@PAUHostDevice@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUHostDevice@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUHostDevice@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUHostDevice@@0@Z PROC ; std::_Iter_random<HostDevice *,HostDevice *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

  00004	c3		 ret	 0
??$_Iter_random@PAUHostDevice@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUHostDevice@@0@Z ENDP ; std::_Iter_random<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUHostDevice@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUHostDevice@@0@Z ; std::_Ptr_cat<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAUHostDevice@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUHostDevice@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUHostDevice@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUHostDevice@@0@Z PROC ; std::_Ptr_cat<HostDevice *,HostDevice *>, COMDAT

; 1509 : 	{

  00000	51		 push	 ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@PAUHostDevice@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUHostDevice@@0@Z ENDP ; std::_Ptr_cat<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 624  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 625  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 624  : 		return _Traits::_Move_s(_First1, _Size, _First2, _Count);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 625  : 	}

  00026	c3		 ret	 0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$_Move_cat@PAUHostDevice@@@std@@YA?AU_Undefined_move_tag@0@ABQAUHostDevice@@@Z ; std::_Move_cat<HostDevice *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Move_cat@PAUHostDevice@@@std@@YA?AU_Undefined_move_tag@0@ABQAUHostDevice@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAUHostDevice@@@std@@YA?AU_Undefined_move_tag@0@ABQAUHostDevice@@@Z PROC ; std::_Move_cat<HostDevice *>, COMDAT

; 1200 : 	{

  00000	51		 push	 ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1203 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Move_cat@PAUHostDevice@@@std@@YA?AU_Undefined_move_tag@0@ABQAUHostDevice@@@Z ENDP ; std::_Move_cat<HostDevice *>
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<HostDevice *>, COMDAT

; 1147 : 		return _It;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]

; 1148 : 	}

  00006	c3		 ret	 0
??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<HostDevice *>
_TEXT	ENDS
PUBLIC	??4HostDevice@@QAEAAU0@ABU0@@Z			; HostDevice::operator=
PUBLIC	??$_Copy_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	53		 push	 ebx

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 23		 je	 SHORT $LN200@Copy_opt
  0000e	57		 push	 edi
  0000f	8b 7c 24 18	 mov	 edi, DWORD PTR __Dest$[esp+8]
$LL3@Copy_opt:

; 2472 : 		*_Dest = *_First;

  00013	56		 push	 esi
  00014	8b cf		 mov	 ecx, edi
  00016	e8 00 00 00 00	 call	 ??4HostDevice@@QAEAAU0@ABU0@@Z
  0001b	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00021	81 c7 88 00 00
	00		 add	 edi, 136		; 00000088H
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL3@Copy_opt

; 2473 : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 2474 : 	}

  00030	c3		 ret	 0
$LN200@Copy_opt:

; 2473 : 	return (_Dest);

  00031	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 2474 : 	}

  00037	c3		 ret	 0
??$_Copy_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@AAPAUHostDevice@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@AAPAUHostDevice@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@AAPAUHostDevice@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *>, COMDAT

; 1509 : 	{

  00000	51		 push	 ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@AAPAUHostDevice@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEPBUHostDevice@@XZ ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Checked_iterator_base
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEPBUHostDevice@@XZ
_TEXT	SEGMENT
?_Checked_iterator_base@?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEPBUHostDevice@@XZ PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 47   : 		return _Myptr;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 48   : 	}

  00003	c3		 ret	 0
?_Checked_iterator_base@?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEPBUHostDevice@@XZ ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Checked_iterator_base
_TEXT	ENDS
PUBLIC	??_7?$ctype@_W@std@@6B@				; std::ctype<wchar_t>::`vftable'
PUBLIC	??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z	; std::ctype<wchar_t>::ctype<wchar_t>
PUBLIC	??_R4?$ctype@_W@std@@6B@			; std::ctype<wchar_t>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@_W@std@@@8			; std::ctype<wchar_t> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@_W@std@@8				; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@_W@std@@8				; std::ctype<wchar_t>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@_W@std@@8			; std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z	; std::ctype<wchar_t>::do_is
PUBLIC	?do_is@?$ctype@_W@std@@MBE_NF_W@Z		; std::ctype<wchar_t>::do_is
PUBLIC	?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z	; std::ctype<wchar_t>::do_scan_is
PUBLIC	?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z	; std::ctype<wchar_t>::do_scan_not
PUBLIC	?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z	; std::ctype<wchar_t>::do_tolower
PUBLIC	?do_tolower@?$ctype@_W@std@@MBE_W_W@Z		; std::ctype<wchar_t>::do_tolower
PUBLIC	?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z	; std::ctype<wchar_t>::do_toupper
PUBLIC	?do_toupper@?$ctype@_W@std@@MBE_W_W@Z		; std::ctype<wchar_t>::do_toupper
PUBLIC	?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z	; std::ctype<wchar_t>::do_widen
PUBLIC	?do_widen@?$ctype@_W@std@@MBE_WD@Z		; std::ctype<wchar_t>::do_widen
PUBLIC	?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z	; std::ctype<wchar_t>::_Do_widen_s
PUBLIC	?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z	; std::ctype<wchar_t>::do_narrow
PUBLIC	?do_narrow@?$ctype@_W@std@@MBED_WD@Z		; std::ctype<wchar_t>::do_narrow
PUBLIC	?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z ; std::ctype<wchar_t>::_Do_narrow_s
EXTRN	??_E?$ctype@_W@std@@MAEPAXI@Z:PROC		; std::ctype<wchar_t>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ctype@_W@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@_W@std@@8 DD FLAT:??_R0?AV?$ctype@_W@std@@@8 ; std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT
??_R2?$ctype@_W@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@_W@std@@8 ; std::ctype<wchar_t>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT
??_R3?$ctype@_W@std@@8 DD 00H				; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
_DATA	SEGMENT
??_R0?AV?$ctype@_W@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<wchar_t> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@_W@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@_W@std@@6B@ DD 00H				; std::ctype<wchar_t>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@_W@std@@@8
	DD	FLAT:??_R3?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$ctype@_W@std@@6B@
CONST	SEGMENT
??_7?$ctype@_W@std@@6B@ DD FLAT:??_R4?$ctype@_W@std@@6B@ ; std::ctype<wchar_t>::`vftable'
	DD	FLAT:??_E?$ctype@_W@std@@MAEPAXI@Z
	DD	FLAT:?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z
	DD	FLAT:?do_is@?$ctype@_W@std@@MBE_NF_W@Z
	DD	FLAT:?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
	DD	FLAT:?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
	DD	FLAT:?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
	DD	FLAT:?do_tolower@?$ctype@_W@std@@MBE_W_W@Z
	DD	FLAT:?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
	DD	FLAT:?do_toupper@?$ctype@_W@std@@MBE_W_W@Z
	DD	FLAT:?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z
	DD	FLAT:?do_widen@?$ctype@_W@std@@MBE_WD@Z
	DD	FLAT:?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z
	DD	FLAT:?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@_W@std@@MBED_WD@Z
	DD	FLAT:?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
CONST	ENDS
;	COMDAT ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
$T142906 = -16						; size = 16
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z PROC		; std::ctype<wchar_t>::ctype<wchar_t>, COMDAT
; _this$ = ecx

; 2025 : 		{	// construct from specified locale

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Refs$[esp-4]
  00004	83 ec 10	 sub	 esp, 16			; 00000010H
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 2026 : 		_Init(_Lobj);

  0000a	8d 4c 24 04	 lea	 ecx, DWORD PTR $T142906[esp+20]
  0000e	51		 push	 ecx
  0000f	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
  00018	e8 00 00 00 00	 call	 __Getctype
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00022	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00025	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00028	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0002b	89 56 10	 mov	 DWORD PTR [esi+16], edx
  0002e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00031	83 c4 04	 add	 esp, 4
  00034	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00037	e8 00 00 00 00	 call	 __Getcvt
  0003c	89 46 18	 mov	 DWORD PTR [esi+24], eax
  0003f	89 56 1c	 mov	 DWORD PTR [esi+28], edx

; 2027 : 		}

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	83 c4 10	 add	 esp, 16			; 00000010H
  00048	c2 08 00	 ret	 8
??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z ENDP		; std::ctype<wchar_t>::ctype<wchar_t>
_TEXT	ENDS
PUBLIC	?is@?$ctype@_W@std@@QBE_NF_W@Z			; std::ctype<wchar_t>::is
; Function compile flags: /Ogtpy
;	COMDAT ?is@?$ctype@_W@std@@QBE_NF_W@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__Ch$ = 12						; size = 2
?is@?$ctype@_W@std@@QBE_NF_W@Z PROC			; std::ctype<wchar_t>::is, COMDAT
; _this$ = ecx

; 1922 : 		return (do_is(_Maskval, _Ch));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00005	ff e0		 jmp	 eax
?is@?$ctype@_W@std@@QBE_NF_W@Z ENDP			; std::ctype<wchar_t>::is
_TEXT	ENDS
PUBLIC	??1?$ctype@_W@std@@MAE@XZ			; std::ctype<wchar_t>::~ctype<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$ctype@_W@std@@MAE@XZ
_TEXT	SEGMENT
??1?$ctype@_W@std@@MAE@XZ PROC				; std::ctype<wchar_t>::~ctype<wchar_t>, COMDAT
; _this$ = ecx

; 2040 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2041 : 		if (_Ctype._Delfl)

  00003	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
  0000d	74 0c		 je	 SHORT $LN9@ctype

; 2042 : 			free((void *)_Ctype._Table);

  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _free
  00018	83 c4 04	 add	 esp, 4
$LN9@ctype:

; 2043 : 		}

  0001b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00021	5e		 pop	 esi
  00022	c3		 ret	 0
??1?$ctype@_W@std@@MAE@XZ ENDP				; std::ctype<wchar_t>::~ctype<wchar_t>
_TEXT	ENDS
EXTRN	__Getwctype:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_is@?$ctype@_W@std@@MBE_NF_W@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__Ch$ = 12						; size = 2
?do_is@?$ctype@_W@std@@MBE_NF_W@Z PROC			; std::ctype<wchar_t>::do_is, COMDAT
; _this$ = ecx

; 2054 : 		return ((::_Getwctype(_Ch, &_Ctype) & _Maskval) != 0);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	51		 push	 ecx
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 __Getwctype
  0000e	83 c4 08	 add	 esp, 8
  00011	66 85 44 24 04	 test	 WORD PTR __Maskval$[esp-4], ax
  00016	b8 00 00 00 00	 mov	 eax, 0
  0001b	0f 95 c0	 setne	 al

; 2055 : 		}

  0001e	c2 08 00	 ret	 8
?do_is@?$ctype@_W@std@@MBE_NF_W@Z ENDP			; std::ctype<wchar_t>::do_is
_TEXT	ENDS
EXTRN	__Getwctypes:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z PROC		; std::ctype<wchar_t>::do_is, COMDAT
; _this$ = ecx

; 2060 : 		_DEBUG_RANGE(_First, _Last);
; 2061 : 		_DEBUG_POINTER(_Dest);
; 2062 : 		return (::_Getwctypes(_First, _Last, _Dest, &_Ctype));

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Dest$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	83 c1 08	 add	 ecx, 8
  0000b	51		 push	 ecx
  0000c	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Last$[esp]
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	52		 push	 edx
  00013	e8 00 00 00 00	 call	 __Getwctypes
  00018	83 c4 10	 add	 esp, 16			; 00000010H

; 2063 : 		}

  0001b	c2 0c 00	 ret	 12			; 0000000cH
?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z ENDP		; std::ctype<wchar_t>::do_is
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z PROC	; std::ctype<wchar_t>::do_scan_is, COMDAT
; _this$ = ecx

; 2067 : 		{	// find first in [_First, _Last) that fits mask classification

  00000	55		 push	 ebp

; 2068 : 		_DEBUG_RANGE(_First, _Last);
; 2069 : 		for (; _First != _Last && !is(_Maskval, *_First); ++_First)

  00001	8b 6c 24 10	 mov	 ebp, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	3b f5		 cmp	 esi, ebp
  0000f	74 1f		 je	 SHORT $LN10@do_scan_is
  00011	53		 push	 ebx
  00012	8b 5c 24 14	 mov	 ebx, DWORD PTR __Maskval$[esp+12]
$LL3@do_scan_is:
  00016	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00019	8b 17		 mov	 edx, DWORD PTR [edi]
  0001b	50		 push	 eax
  0001c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001f	53		 push	 ebx
  00020	8b cf		 mov	 ecx, edi
  00022	ff d0		 call	 eax
  00024	84 c0		 test	 al, al
  00026	75 07		 jne	 SHORT $LN11@do_scan_is
  00028	83 c6 02	 add	 esi, 2
  0002b	3b f5		 cmp	 esi, ebp
  0002d	75 e7		 jne	 SHORT $LL3@do_scan_is
$LN11@do_scan_is:
  0002f	5b		 pop	 ebx
$LN10@do_scan_is:
  00030	5f		 pop	 edi

; 2070 : 			;
; 2071 : 		return (_First);

  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp

; 2072 : 		}

  00035	c2 0c 00	 ret	 12			; 0000000cH
?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z ENDP	; std::ctype<wchar_t>::do_scan_is
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z PROC	; std::ctype<wchar_t>::do_scan_not, COMDAT
; _this$ = ecx

; 2076 : 		{	// find first in [_First, _Last) not fitting mask classification

  00000	55		 push	 ebp

; 2077 : 		_DEBUG_RANGE(_First, _Last);
; 2078 : 		for (; _First != _Last && is(_Maskval, *_First); ++_First)

  00001	8b 6c 24 10	 mov	 ebp, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	3b f5		 cmp	 esi, ebp
  0000f	74 1f		 je	 SHORT $LN10@do_scan_no
  00011	53		 push	 ebx
  00012	8b 5c 24 14	 mov	 ebx, DWORD PTR __Maskval$[esp+12]
$LL3@do_scan_no:
  00016	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00019	8b 17		 mov	 edx, DWORD PTR [edi]
  0001b	50		 push	 eax
  0001c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001f	53		 push	 ebx
  00020	8b cf		 mov	 ecx, edi
  00022	ff d0		 call	 eax
  00024	84 c0		 test	 al, al
  00026	74 07		 je	 SHORT $LN11@do_scan_no
  00028	83 c6 02	 add	 esi, 2
  0002b	3b f5		 cmp	 esi, ebp
  0002d	75 e7		 jne	 SHORT $LL3@do_scan_no
$LN11@do_scan_no:
  0002f	5b		 pop	 ebx
$LN10@do_scan_no:
  00030	5f		 pop	 edi

; 2079 : 			;
; 2080 : 		return (_First);

  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp

; 2081 : 		}

  00035	c2 0c 00	 ret	 12			; 0000000cH
?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z ENDP	; std::ctype<wchar_t>::do_scan_not
_TEXT	ENDS
EXTRN	__Towlower:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_tolower@?$ctype@_W@std@@MBE_W_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 2
?do_tolower@?$ctype@_W@std@@MBE_W_W@Z PROC		; std::ctype<wchar_t>::do_tolower, COMDAT
; _this$ = ecx

; 2085 : 		return (_Towlower(_Ch, &_Ctype));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	51		 push	 ecx
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 __Towlower
  0000e	83 c4 08	 add	 esp, 8

; 2086 : 		}

  00011	c2 04 00	 ret	 4
?do_tolower@?$ctype@_W@std@@MBE_W_W@Z ENDP		; std::ctype<wchar_t>::do_tolower
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z PROC	; std::ctype<wchar_t>::do_tolower, COMDAT
; _this$ = ecx

; 2090 : 		{	// convert [_First, _Last) in place to lower case

  00000	53		 push	 ebx

; 2091 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2092 : 		for (; _First != _Last; ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 1c		 je	 SHORT $LN8@do_tolower
  0000e	57		 push	 edi
  0000f	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
$LL3@do_tolower:

; 2093 : 			*_First = _Towlower(*_First, &_Ctype);

  00012	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __Towlower
  0001c	66 89 06	 mov	 WORD PTR [esi], ax
  0001f	83 c6 02	 add	 esi, 2
  00022	83 c4 08	 add	 esp, 8
  00025	3b f3		 cmp	 esi, ebx
  00027	75 e9		 jne	 SHORT $LL3@do_tolower
  00029	5f		 pop	 edi
$LN8@do_tolower:

; 2094 : 		return ((const _Elem *)_First);

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx

; 2095 : 		}

  0002e	c2 08 00	 ret	 8
?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z ENDP	; std::ctype<wchar_t>::do_tolower
_TEXT	ENDS
EXTRN	__Towupper:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?do_toupper@?$ctype@_W@std@@MBE_W_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 2
?do_toupper@?$ctype@_W@std@@MBE_W_W@Z PROC		; std::ctype<wchar_t>::do_toupper, COMDAT
; _this$ = ecx

; 2099 : 		return (_Towupper(_Ch, &_Ctype));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	51		 push	 ecx
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 __Towupper
  0000e	83 c4 08	 add	 esp, 8

; 2100 : 		}

  00011	c2 04 00	 ret	 4
?do_toupper@?$ctype@_W@std@@MBE_W_W@Z ENDP		; std::ctype<wchar_t>::do_toupper
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z PROC	; std::ctype<wchar_t>::do_toupper, COMDAT
; _this$ = ecx

; 2104 : 		{	// convert [_First, _Last) in place to upper case

  00000	53		 push	 ebx

; 2105 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2106 : 		for (; _First != _Last; ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 1c		 je	 SHORT $LN8@do_toupper
  0000e	57		 push	 edi
  0000f	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
$LL3@do_toupper:

; 2107 : 			*_First = _Towupper(*_First, &_Ctype);

  00012	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __Towupper
  0001c	66 89 06	 mov	 WORD PTR [esi], ax
  0001f	83 c6 02	 add	 esi, 2
  00022	83 c4 08	 add	 esp, 8
  00025	3b f3		 cmp	 esi, ebx
  00027	75 e9		 jne	 SHORT $LL3@do_toupper
  00029	5f		 pop	 edi
$LN8@do_toupper:

; 2108 : 		return ((const _Elem *)_First);

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx

; 2109 : 		}

  0002e	c2 08 00	 ret	 8
?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z ENDP	; std::ctype<wchar_t>::do_toupper
_TEXT	ENDS
PUBLIC	?_Dowiden@?$ctype@_W@std@@IBE_WD@Z		; std::ctype<wchar_t>::_Dowiden
EXTRN	__Mbrtowc:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Dowiden@?$ctype@_W@std@@IBE_WD@Z
_TEXT	SEGMENT
__Wc$ = -8						; size = 2
__Mbst$ = -4						; size = 4
__Byte$ = 8						; size = 1
?_Dowiden@?$ctype@_W@std@@IBE_WD@Z PROC			; std::ctype<wchar_t>::_Dowiden, COMDAT
; _this$ = ecx

; 2112 : 		{	// widen char

  00000	83 ec 08	 sub	 esp, 8

; 2113 : 		_Mbstinit(_Mbst);
; 2114 : 		wchar_t _Wc;
; 2115 : 		return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
; 2116 : 			? (wchar_t)WEOF : _Wc);

  00003	83 c1 18	 add	 ecx, 24			; 00000018H
  00006	51		 push	 ecx
  00007	8d 44 24 08	 lea	 eax, DWORD PTR __Mbst$[esp+12]
  0000b	50		 push	 eax
  0000c	6a 01		 push	 1
  0000e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Byte$[esp+16]
  00012	51		 push	 ecx
  00013	8d 54 24 10	 lea	 edx, DWORD PTR __Wc$[esp+24]
  00017	52		 push	 edx
  00018	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __Mbst$[esp+28], 0
  00020	e8 00 00 00 00	 call	 __Mbrtowc
  00025	83 c4 14	 add	 esp, 20			; 00000014H
  00028	85 c0		 test	 eax, eax
  0002a	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0002f	7c 04		 jl	 SHORT $LN4@Dowiden
  00031	0f b7 04 24	 movzx	 eax, WORD PTR __Wc$[esp+8]
$LN4@Dowiden:

; 2117 : 		}

  00035	83 c4 08	 add	 esp, 8
  00038	c2 04 00	 ret	 4
?_Dowiden@?$ctype@_W@std@@IBE_WD@Z ENDP			; std::ctype<wchar_t>::_Dowiden
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@_W@std@@MBE_WD@Z
_TEXT	SEGMENT
__Wc$142980 = -8					; size = 2
__Mbst$142979 = -4					; size = 4
$T142981 = 8						; size = 1
__Byte$ = 8						; size = 1
?do_widen@?$ctype@_W@std@@MBE_WD@Z PROC			; std::ctype<wchar_t>::do_widen, COMDAT
; _this$ = ecx

; 2120 : 		{	// widen char

  00000	83 ec 08	 sub	 esp, 8

; 2121 : 		return (_Dowiden(_Byte));

  00003	8a 44 24 0c	 mov	 al, BYTE PTR __Byte$[esp+4]
  00007	83 c1 18	 add	 ecx, 24			; 00000018H
  0000a	51		 push	 ecx
  0000b	8d 4c 24 08	 lea	 ecx, DWORD PTR __Mbst$142979[esp+12]
  0000f	51		 push	 ecx
  00010	6a 01		 push	 1
  00012	8d 54 24 18	 lea	 edx, DWORD PTR $T142981[esp+16]
  00016	88 44 24 18	 mov	 BYTE PTR $T142981[esp+16], al
  0001a	52		 push	 edx
  0001b	8d 44 24 10	 lea	 eax, DWORD PTR __Wc$142980[esp+24]
  0001f	50		 push	 eax
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __Mbst$142979[esp+28], 0
  00028	e8 00 00 00 00	 call	 __Mbrtowc
  0002d	83 c4 14	 add	 esp, 20			; 00000014H
  00030	85 c0		 test	 eax, eax
  00032	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00037	7c 04		 jl	 SHORT $LN6@do_widen
  00039	0f b7 04 24	 movzx	 eax, WORD PTR __Wc$142980[esp+8]
$LN6@do_widen:

; 2122 : 		}

  0003d	83 c4 08	 add	 esp, 8
  00040	c2 04 00	 ret	 4
?do_widen@?$ctype@_W@std@@MBE_WD@Z ENDP			; std::ctype<wchar_t>::do_widen
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z PROC		; std::ctype<wchar_t>::do_widen, COMDAT
; _this$ = ecx

; 2128 : 		// assume there is enough space in _Dest
; 2129 : 		return _Do_widen_s(_First, _Last, _Dest, _Last - _First);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	56		 push	 esi
  00009	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000b	57		 push	 edi
  0000c	8b f8		 mov	 edi, eax
  0000e	2b fa		 sub	 edi, edx
  00010	57		 push	 edi
  00011	8b 7c 24 18	 mov	 edi, DWORD PTR __Dest$[esp+8]
  00015	57		 push	 edi
  00016	50		 push	 eax
  00017	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0001a	52		 push	 edx
  0001b	ff d0		 call	 eax
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi

; 2130 : 		}

  0001f	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z ENDP		; std::ctype<wchar_t>::do_widen
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z
_TEXT	SEGMENT
__Wc$142994 = 8						; size = 2
__First$ = 8						; size = 4
$T142995 = 12						; size = 1
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Mbst$142993 = 20					; size = 4
__Dest_size$ = 20					; size = 4
?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z PROC	; std::ctype<wchar_t>::_Do_widen_s, COMDAT
; _this$ = ecx

; 2134 : 		{	// widen chars in [_First, _Last)

  00000	53		 push	 ebx

; 2135 : 		_DEBUG_RANGE(_First, _Last);
; 2136 : 		_DEBUG_POINTER(_Dest);
; 2137 : 		_SCL_SECURE_ALWAYS_VALIDATE_RANGE(_Dest_size >= (size_t)(_Last - _First));

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	8b c3		 mov	 eax, ebx
  0000c	2b c6		 sub	 eax, esi
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx
  00011	39 44 24 1c	 cmp	 DWORD PTR __Dest_size$[esp+8], eax
  00015	73 05		 jae	 SHORT $LN6@Do_widen_s
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN6@Do_widen_s:

; 2138 : 		for (; _First != _Last; ++_First, ++_Dest)

  0001c	3b f3		 cmp	 esi, ebx
  0001e	74 4a		 je	 SHORT $LN16@Do_widen_s
  00020	55		 push	 ebp
  00021	8d 6f 18	 lea	 ebp, DWORD PTR [edi+24]
  00024	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dest$[esp+12]
$LL3@Do_widen_s:

; 2139 : 			*_Dest = _Dowiden(*_First);

  00028	8a 0e		 mov	 cl, BYTE PTR [esi]
  0002a	55		 push	 ebp
  0002b	8d 54 24 24	 lea	 edx, DWORD PTR __Mbst$142993[esp+16]
  0002f	52		 push	 edx
  00030	6a 01		 push	 1
  00032	8d 44 24 24	 lea	 eax, DWORD PTR $T142995[esp+24]
  00036	88 4c 24 24	 mov	 BYTE PTR $T142995[esp+24], cl
  0003a	50		 push	 eax
  0003b	8d 4c 24 24	 lea	 ecx, DWORD PTR __Wc$142994[esp+28]
  0003f	51		 push	 ecx
  00040	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR __Mbst$142993[esp+32], 0
  00048	e8 00 00 00 00	 call	 __Mbrtowc
  0004d	83 c4 14	 add	 esp, 20			; 00000014H
  00050	85 c0		 test	 eax, eax
  00052	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00057	7c 05		 jl	 SHORT $LN13@Do_widen_s
  00059	0f b7 44 24 14	 movzx	 eax, WORD PTR __Wc$142994[esp+12]
$LN13@Do_widen_s:
  0005e	66 89 07	 mov	 WORD PTR [edi], ax
  00061	46		 inc	 esi
  00062	83 c7 02	 add	 edi, 2
  00065	3b f3		 cmp	 esi, ebx
  00067	75 bf		 jne	 SHORT $LL3@Do_widen_s
  00069	5d		 pop	 ebp
$LN16@Do_widen_s:
  0006a	5f		 pop	 edi

; 2140 : 		return (_First);

  0006b	8b c6		 mov	 eax, esi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx

; 2141 : 		}

  0006f	c2 10 00	 ret	 16			; 00000010H
?_Do_widen_s@?$ctype@_W@std@@MBEPBDPBD0PA_WI@Z ENDP	; std::ctype<wchar_t>::_Do_widen_s
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?_Donarrow@?$ctype@_W@std@@IBED_WD@Z		; std::ctype<wchar_t>::_Donarrow
EXTRN	__Wcrtomb:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Donarrow@?$ctype@_W@std@@IBED_WD@Z
_TEXT	SEGMENT
__Mbst$ = -16						; size = 4
__Buf$ = -12						; size = 5
__$ArrayPad$ = -4					; size = 4
__Ch$ = 8						; size = 2
__Dflt$ = 12						; size = 1
?_Donarrow@?$ctype@_W@std@@IBED_WD@Z PROC		; std::ctype<wchar_t>::_Donarrow, COMDAT
; _this$ = ecx

; 2144 : 		{	// narrow element to char

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 0c	 mov	 DWORD PTR __$ArrayPad$[esp+16], eax

; 2145 : 		char _Buf[MB_LEN_MAX];
; 2146 : 		_Mbstinit(_Mbst);
; 2147 : 		return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
; 2148 : 			? _Dflt : _Buf[0]);

  0000e	83 c1 18	 add	 ecx, 24			; 00000018H
  00011	51		 push	 ecx
  00012	8b 4c 24 18	 mov	 ecx, DWORD PTR __Ch$[esp+16]
  00016	8d 44 24 04	 lea	 eax, DWORD PTR __Mbst$[esp+20]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	8d 54 24 10	 lea	 edx, DWORD PTR __Buf$[esp+28]
  00020	52		 push	 edx
  00021	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __Mbst$[esp+32], 0
  00029	e8 00 00 00 00	 call	 __Wcrtomb
  0002e	83 c4 10	 add	 esp, 16			; 00000010H
  00031	83 f8 01	 cmp	 eax, 1
  00034	8a 44 24 18	 mov	 al, BYTE PTR __Dflt$[esp+12]
  00038	75 04		 jne	 SHORT $LN4@Donarrow
  0003a	8a 44 24 04	 mov	 al, BYTE PTR __Buf$[esp+16]
$LN4@Donarrow:

; 2149 : 		}

  0003e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16]
  00042	33 cc		 xor	 ecx, esp
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	83 c4 10	 add	 esp, 16			; 00000010H
  0004c	c2 08 00	 ret	 8
?_Donarrow@?$ctype@_W@std@@IBED_WD@Z ENDP		; std::ctype<wchar_t>::_Donarrow
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT ?do_narrow@?$ctype@_W@std@@MBED_WD@Z
_TEXT	SEGMENT
__Mbst$143013 = -16					; size = 4
__Buf$143012 = -12					; size = 5
__$ArrayPad$ = -4					; size = 4
__Ch$ = 8						; size = 2
__Dflt$ = 12						; size = 1
?do_narrow@?$ctype@_W@std@@MBED_WD@Z PROC		; std::ctype<wchar_t>::do_narrow, COMDAT
; _this$ = ecx

; 2152 : 		{	// narrow element to char

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 0c	 mov	 DWORD PTR __$ArrayPad$[esp+16], eax

; 2153 : 		return (_Donarrow(_Ch, _Dflt));

  0000e	83 c1 18	 add	 ecx, 24			; 00000018H
  00011	51		 push	 ecx
  00012	8b 4c 24 18	 mov	 ecx, DWORD PTR __Ch$[esp+16]
  00016	8d 44 24 04	 lea	 eax, DWORD PTR __Mbst$143013[esp+20]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	8d 54 24 10	 lea	 edx, DWORD PTR __Buf$143012[esp+28]
  00020	52		 push	 edx
  00021	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __Mbst$143013[esp+32], 0
  00029	e8 00 00 00 00	 call	 __Wcrtomb
  0002e	83 c4 10	 add	 esp, 16			; 00000010H
  00031	83 f8 01	 cmp	 eax, 1
  00034	8a 44 24 18	 mov	 al, BYTE PTR __Dflt$[esp+12]
  00038	75 04		 jne	 SHORT $LN6@do_narrow
  0003a	8a 44 24 04	 mov	 al, BYTE PTR __Buf$143012[esp+16]
$LN6@do_narrow:

; 2154 : 		}

  0003e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16]
  00042	33 cc		 xor	 ecx, esp
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	83 c4 10	 add	 esp, 16			; 00000010H
  0004c	c2 08 00	 ret	 8
?do_narrow@?$ctype@_W@std@@MBED_WD@Z ENDP		; std::ctype<wchar_t>::do_narrow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dflt$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z PROC	; std::ctype<wchar_t>::do_narrow, COMDAT
; _this$ = ecx

; 2161 : 		// assume there is enough space in _Dest
; 2162 : 		return _Do_narrow_s(_First, _Last, _Dflt, _Dest, _Last - _First);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	56		 push	 esi
  00009	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000b	57		 push	 edi
  0000c	8b f8		 mov	 edi, eax
  0000e	2b fa		 sub	 edi, edx
  00010	d1 ff		 sar	 edi, 1
  00012	57		 push	 edi
  00013	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dest$[esp+8]
  00017	57		 push	 edi
  00018	8b 7c 24 1c	 mov	 edi, DWORD PTR __Dflt$[esp+12]
  0001c	57		 push	 edi
  0001d	50		 push	 eax
  0001e	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00021	52		 push	 edx
  00022	ff d0		 call	 eax
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi

; 2163 : 		}

  00026	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z ENDP	; std::ctype<wchar_t>::do_narrow
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT ?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z
_TEXT	SEGMENT
__Mbst$143029 = -16					; size = 4
__Buf$143028 = -12					; size = 5
__$ArrayPad$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dflt$ = 16						; size = 1
__Dest$ = 20						; size = 4
__Dest_size$ = 24					; size = 4
?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z PROC	; std::ctype<wchar_t>::_Do_narrow_s, COMDAT
; _this$ = ecx

; 2169 : 		{	// narrow elements in [_First, _Last) to chars

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 0c	 mov	 DWORD PTR __$ArrayPad$[esp+16], eax
  0000e	53		 push	 ebx
  0000f	55		 push	 ebp

; 2170 : 		_DEBUG_RANGE(_First, _Last);
; 2171 : 		_DEBUG_POINTER(_Dest);
; 2172 : 		_SCL_SECURE_ALWAYS_VALIDATE_RANGE(_Dest_size >= (size_t)(_Last - _First));

  00010	8b 6c 24 20	 mov	 ebp, DWORD PTR __Last$[esp+20]
  00014	56		 push	 esi
  00015	8b 74 24 20	 mov	 esi, DWORD PTR __First$[esp+24]
  00019	8b c5		 mov	 eax, ebp
  0001b	2b c6		 sub	 eax, esi
  0001d	d1 f8		 sar	 eax, 1
  0001f	57		 push	 edi
  00020	8b 7c 24 30	 mov	 edi, DWORD PTR __Dest$[esp+28]
  00024	8b d9		 mov	 ebx, ecx
  00026	39 44 24 34	 cmp	 DWORD PTR __Dest_size$[esp+28], eax
  0002a	73 05		 jae	 SHORT $LN6@Do_narrow_
  0002c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN6@Do_narrow_:

; 2173 : 		for (; _First != _Last; ++_First, ++_Dest)

  00031	3b f5		 cmp	 esi, ebp
  00033	74 39		 je	 SHORT $LN16@Do_narrow_
  00035	83 c3 18	 add	 ebx, 24			; 00000018H
$LL3@Do_narrow_:

; 2174 : 			*_Dest = _Donarrow(*_First, _Dflt);

  00038	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0003b	53		 push	 ebx
  0003c	8d 4c 24 14	 lea	 ecx, DWORD PTR __Mbst$143029[esp+36]
  00040	51		 push	 ecx
  00041	50		 push	 eax
  00042	8d 54 24 20	 lea	 edx, DWORD PTR __Buf$143028[esp+44]
  00046	52		 push	 edx
  00047	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR __Mbst$143029[esp+48], 0
  0004f	e8 00 00 00 00	 call	 __Wcrtomb
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	83 f8 01	 cmp	 eax, 1
  0005a	8a 44 24 2c	 mov	 al, BYTE PTR __Dflt$[esp+28]
  0005e	75 04		 jne	 SHORT $LN13@Do_narrow_
  00060	8a 44 24 14	 mov	 al, BYTE PTR __Buf$143028[esp+32]
$LN13@Do_narrow_:
  00064	88 07		 mov	 BYTE PTR [edi], al
  00066	83 c6 02	 add	 esi, 2
  00069	47		 inc	 edi
  0006a	3b f5		 cmp	 esi, ebp
  0006c	75 ca		 jne	 SHORT $LL3@Do_narrow_
$LN16@Do_narrow_:

; 2175 : 		return (_First);
; 2176 : 		}

  0006e	8b 4c 24 1c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+32]
  00072	5f		 pop	 edi
  00073	8b c6		 mov	 eax, esi
  00075	5e		 pop	 esi
  00076	5d		 pop	 ebp
  00077	5b		 pop	 ebx
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	c2 14 00	 ret	 20			; 00000014H
?_Do_narrow_s@?$ctype@_W@std@@MBEPB_WPB_W0DPADI@Z ENDP	; std::ctype<wchar_t>::_Do_narrow_s
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ctype@_W@std@@MAEPAXI@Z PROC			; std::ctype<wchar_t>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
  0000d	74 0c		 je	 SHORT $LN4@scalar@9
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _free
  00018	83 c4 04	 add	 esp, 4
$LN4@scalar@9:
  0001b	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00026	74 09		 je	 SHORT $LN11@scalar@9
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4
$LN11@scalar@9:
  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	c2 04 00	 ret	 4
??_G?$ctype@_W@std@@MAEPAXI@Z ENDP			; std::ctype<wchar_t>::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\format\tcformat.c
_TEXT	ENDS
;	COMDAT _SysEncInEffect
_TEXT	SEGMENT
_SysEncInEffect PROC					; COMDAT

; 611  : 	return (WizardMode == WIZARD_MODE_SYS_DEVICE
; 612  : 		|| CreatingHiddenSysVol());

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  00005	83 f8 02	 cmp	 eax, 2
  00008	74 20		 je	 SHORT $LN3@SysEncInEf
  0000a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00010	85 c9		 test	 ecx, ecx
  00012	74 13		 je	 SHORT $LN7@SysEncInEf
  00014	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  0001a	85 d2		 test	 edx, edx
  0001c	74 09		 je	 SHORT $LN7@SysEncInEf
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  00023	85 c0		 test	 eax, eax
  00025	74 03		 je	 SHORT $LN3@SysEncInEf
$LN7@SysEncInEf:
  00027	33 c0		 xor	 eax, eax

; 613  : }

  00029	c3		 ret	 0
$LN3@SysEncInEf:

; 611  : 	return (WizardMode == WIZARD_MODE_SYS_DEVICE
; 612  : 		|| CreatingHiddenSysVol());

  0002a	b8 01 00 00 00	 mov	 eax, 1

; 613  : }

  0002f	c3		 ret	 0
_SysEncInEffect ENDP
_TEXT	ENDS
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp__GetParent@4:PROC
EXTRN	__atoi64:PROC
;	COMDAT ?nLastVolumeSize@?1??VerifySizeAndUpdate@@9@4_KA
_BSS	SEGMENT
?nLastVolumeSize@?1??VerifySizeAndUpdate@@9@4_KA DQ 01H DUP (?) ; `VerifySizeAndUpdate'::`2'::nLastVolumeSize
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT _VerifySizeAndUpdate
_TEXT	SEGMENT
_bEnable$ = -108					; size = 4
tv73 = -104						; size = 4
_i$ = -104						; size = 4
tv240 = -100						; size = 8
_hwndDlg$GSCopy$ = -92					; size = 4
tv239 = -88						; size = 8
_geometry$143082 = -80					; size = 24
_szTmp$ = -56						; size = 50
__$ArrayPad$ = -4					; size = 4
_bUpdate$ = 8						; size = 4
_VerifySizeAndUpdate PROC				; COMDAT
; _hwndDlg$ = ecx

; 1264 : {

  00000	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 68	 mov	 DWORD PTR __$ArrayPad$[esp+108], eax
  0000e	53		 push	 ebx

; 1265 : 	BOOL bEnable = TRUE;
; 1266 : 	char szTmp[50];
; 1267 : 	__int64 lTmp;
; 1268 : 	size_t i;
; 1269 : 	static unsigned __int64 nLastVolumeSize = 0;
; 1270 : 
; 1271 : 	GetWindowTextA(GetDlgItem (hwndDlg, IDC_SIZEBOX), szTmp, sizeof (szTmp));

  0000f	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetDlgItem@8
  00015	55		 push	 ebp
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	6a 32		 push	 50			; 00000032H
  0001a	8d 44 24 48	 lea	 eax, DWORD PTR _szTmp$[esp+128]
  0001e	50		 push	 eax
  0001f	8b f9		 mov	 edi, ecx
  00021	68 0e 04 00 00	 push	 1038			; 0000040eH
  00026	bd 01 00 00 00	 mov	 ebp, 1
  0002b	57		 push	 edi
  0002c	89 7c 24 30	 mov	 DWORD PTR _hwndDlg$GSCopy$[esp+140], edi
  00030	89 6c 24 20	 mov	 DWORD PTR _bEnable$[esp+140], ebp
  00034	ff d3		 call	 ebx
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 1272 : 
; 1273 : 	for (i = 0; i < strlen (szTmp); i++)

  0003d	8d 44 24 44	 lea	 eax, DWORD PTR _szTmp$[esp+124]
  00041	33 d2		 xor	 edx, edx
  00043	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL36@VerifySize:
  00046	8a 08		 mov	 cl, BYTE PTR [eax]
  00048	40		 inc	 eax
  00049	84 c9		 test	 cl, cl
  0004b	75 f9		 jne	 SHORT $LL36@VerifySize
  0004d	2b c6		 sub	 eax, esi
  0004f	74 2c		 je	 SHORT $LN46@VerifySize
$LL23@VerifySize:

; 1274 : 	{
; 1275 : 		if (szTmp[i] >= '0' && szTmp[i] <= '9')

  00051	8a 44 14 44	 mov	 al, BYTE PTR _szTmp$[esp+edx+124]
  00055	3c 30		 cmp	 al, 48			; 00000030H
  00057	7c 1c		 jl	 SHORT $LN20@VerifySize
  00059	3c 39		 cmp	 al, 57			; 00000039H
  0005b	7f 18		 jg	 SHORT $LN20@VerifySize
  0005d	8d 44 24 44	 lea	 eax, DWORD PTR _szTmp$[esp+124]
  00061	03 d5		 add	 edx, ebp
  00063	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL37@VerifySize:
  00066	8a 08		 mov	 cl, BYTE PTR [eax]
  00068	40		 inc	 eax
  00069	84 c9		 test	 cl, cl
  0006b	75 f9		 jne	 SHORT $LL37@VerifySize
  0006d	2b c6		 sub	 eax, esi
  0006f	3b d0		 cmp	 edx, eax
  00071	72 de		 jb	 SHORT $LL23@VerifySize

; 1272 : 
; 1273 : 	for (i = 0; i < strlen (szTmp); i++)

  00073	eb 08		 jmp	 SHORT $LN46@VerifySize
$LN20@VerifySize:

; 1276 : 			continue;
; 1277 : 		else
; 1278 : 		{
; 1279 : 			bEnable = FALSE;

  00075	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR _bEnable$[esp+124], 0
$LN46@VerifySize:

; 1280 : 			break;
; 1281 : 		}
; 1282 : 	}
; 1283 : 
; 1284 : 	if (IsButtonChecked (GetDlgItem (hwndDlg, IDC_KB)))

  0007d	68 f3 03 00 00	 push	 1011			; 000003f3H
  00082	57		 push	 edi
  00083	ff d3		 call	 ebx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _IsButtonChecked
  0008b	83 c4 04	 add	 esp, 4
  0008e	85 c0		 test	 eax, eax
  00090	74 07		 je	 SHORT $LN18@VerifySize

; 1285 : 		nMultiplier = BYTES_PER_KB;

  00092	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  00097	eb 1f		 jmp	 SHORT $LN47@VerifySize
$LN18@VerifySize:

; 1286 : 	else if (IsButtonChecked (GetDlgItem (hwndDlg, IDC_MB)))

  00099	68 f5 03 00 00	 push	 1013			; 000003f5H
  0009e	57		 push	 edi
  0009f	ff d3		 call	 ebx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 _IsButtonChecked
  000a7	83 c4 04	 add	 esp, 4
  000aa	f7 d8		 neg	 eax
  000ac	1b c0		 sbb	 eax, eax
  000ae	25 00 00 10 c0	 and	 eax, -1072693248	; c0100000H
  000b3	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
$LN47@VerifySize:

; 1287 : 		nMultiplier = BYTES_PER_MB;
; 1288 : 	else
; 1289 : 		nMultiplier = BYTES_PER_GB;
; 1290 : 
; 1291 : 	if (bDevice && !(bHiddenVol && !bHiddenVolHost))	// If raw device but not a hidden volume

  000b8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  000bf	a3 00 00 00 00	 mov	 DWORD PTR ?nMultiplier@@3HA, eax ; nMultiplier
  000c4	74 2e		 je	 SHORT $LN14@VerifySize
  000c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  000cc	85 c9		 test	 ecx, ecx
  000ce	74 0a		 je	 SHORT $LN13@VerifySize
  000d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  000d6	85 d2		 test	 edx, edx
  000d8	74 15		 je	 SHORT $LN42@VerifySize
$LN13@VerifySize:

; 1292 : 	{
; 1293 : 		lTmp = nVolumeSize;

  000da	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?nVolumeSize@@3_KA
  000e0	8b 1d 04 00 00
	00		 mov	 ebx, DWORD PTR ?nVolumeSize@@3_KA+4

; 1294 : 		i = 1;

  000e6	89 6c 24 14	 mov	 DWORD PTR _i$[esp+124], ebp

; 1295 : 	}
; 1296 : 	else

  000ea	e9 a8 00 00 00	 jmp	 $LN44@VerifySize
$LN42@VerifySize:
  000ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nMultiplier@@3HA ; nMultiplier
$LN14@VerifySize:

; 1297 : 	{
; 1298 : 		i = nMultiplier;

  000f4	89 44 24 14	 mov	 DWORD PTR _i$[esp+124], eax

; 1299 : 		lTmp = _atoi64 (szTmp);

  000f8	8d 44 24 44	 lea	 eax, DWORD PTR _szTmp$[esp+124]
  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 __atoi64
  00102	83 c4 04	 add	 esp, 4

; 1300 : 
; 1301 : 		int sectorSize = GetFormatSectorSize();

  00105	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  0010c	8b f8		 mov	 edi, eax
  0010e	8b da		 mov	 ebx, edx
  00110	75 07		 jne	 SHORT $LN31@VerifySize
  00112	be 00 02 00 00	 mov	 esi, 512		; 00000200H
  00117	eb 2e		 jmp	 SHORT $LN32@VerifySize
$LN31@VerifySize:
  00119	8d 4c 24 2c	 lea	 ecx, DWORD PTR _geometry$143082[esp+124]
  0011d	51		 push	 ecx
  0011e	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  00123	e8 00 00 00 00	 call	 _GetDriveGeometry
  00128	83 c4 08	 add	 esp, 8
  0012b	85 c0		 test	 eax, eax
  0012d	75 14		 jne	 SHORT $LN30@VerifySize
  0012f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00135	52		 push	 edx
  00136	e8 00 00 00 00	 call	 _handleWin32Error
  0013b	83 c4 04	 add	 esp, 4
  0013e	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN30@VerifySize:
  00143	8b 74 24 40	 mov	 esi, DWORD PTR _geometry$143082[esp+144]
$LN32@VerifySize:

; 1302 : 		uint32 sectorSizeRem = (lTmp * nMultiplier) % sectorSize;

  00147	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nMultiplier@@3HA ; nMultiplier
  0014c	53		 push	 ebx
  0014d	99		 cdq
  0014e	57		 push	 edi
  0014f	8b e8		 mov	 ebp, eax
  00151	52		 push	 edx
  00152	55		 push	 ebp
  00153	89 54 24 38	 mov	 DWORD PTR tv239[esp+144], edx
  00157	e8 00 00 00 00	 call	 __allmul
  0015c	8b c8		 mov	 ecx, eax
  0015e	89 54 24 1c	 mov	 DWORD PTR tv240[esp+128], edx
  00162	8b c6		 mov	 eax, esi
  00164	99		 cdq
  00165	52		 push	 edx
  00166	50		 push	 eax
  00167	8b 44 24 24	 mov	 eax, DWORD PTR tv240[esp+136]
  0016b	50		 push	 eax
  0016c	51		 push	 ecx
  0016d	89 4c 24 28	 mov	 DWORD PTR tv240[esp+140], ecx
  00171	e8 00 00 00 00	 call	 __allrem

; 1303 : 
; 1304 : 		if (sectorSizeRem != 0)

  00176	85 c0		 test	 eax, eax
  00178	74 1d		 je	 SHORT $LN44@VerifySize

; 1305 : 			lTmp = (lTmp * nMultiplier + (sectorSize - sectorSizeRem)) / nMultiplier;

  0017a	8b 54 24 28	 mov	 edx, DWORD PTR tv239[esp+128]
  0017e	2b f0		 sub	 esi, eax
  00180	33 c9		 xor	 ecx, ecx
  00182	03 74 24 18	 add	 esi, DWORD PTR tv240[esp+124]
  00186	52		 push	 edx
  00187	13 4c 24 20	 adc	 ecx, DWORD PTR tv240[esp+132]
  0018b	55		 push	 ebp
  0018c	51		 push	 ecx
  0018d	56		 push	 esi
  0018e	e8 00 00 00 00	 call	 __alldiv
  00193	8b f8		 mov	 edi, eax
  00195	8b da		 mov	 ebx, edx
$LN44@VerifySize:

; 1306 : 	}
; 1307 : 
; 1308 : 	if (bEnable)

  00197	83 7c 24 10 00	 cmp	 DWORD PTR _bEnable$[esp+124], 0
  0019c	0f 84 9f 00 00
	00		 je	 $LN43@VerifySize

; 1309 : 	{
; 1310 : 		if (lTmp * i < (bHiddenVolHost ? TC_MIN_HIDDEN_VOLUME_HOST_SIZE : (bHiddenVol ? TC_MIN_HIDDEN_VOLUME_SIZE : TC_MIN_VOLUME_SIZE)))

  001a2	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  001a7	85 c0		 test	 eax, eax
  001a9	74 07		 je	 SHORT $LN26@VerifySize
  001ab	be 00 50 05 00	 mov	 esi, 348160		; 00055000H
  001b0	eb 16		 jmp	 SHORT $LN27@VerifySize
$LN26@VerifySize:
  001b2	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  001b8	f7 de		 neg	 esi
  001ba	1b f6		 sbb	 esi, esi
  001bc	81 e6 00 10 fc
	ff		 and	 esi, -258048		; fffc1000H
  001c2	81 c6 00 90 04
	00		 add	 esi, 299008		; 00049000H
$LN27@VerifySize:
  001c8	8b 4c 24 14	 mov	 ecx, DWORD PTR _i$[esp+124]
  001cc	53		 push	 ebx
  001cd	57		 push	 edi
  001ce	6a 00		 push	 0
  001d0	51		 push	 ecx
  001d1	e8 00 00 00 00	 call	 __allmul
  001d6	8b e8		 mov	 ebp, eax
  001d8	8b ca		 mov	 ecx, edx
  001da	8b c6		 mov	 eax, esi
  001dc	99		 cdq
  001dd	3b ca		 cmp	 ecx, edx
  001df	7f 0e		 jg	 SHORT $LN45@VerifySize
  001e1	7c 04		 jl	 SHORT $LN38@VerifySize
  001e3	3b e8		 cmp	 ebp, eax
  001e5	73 08		 jae	 SHORT $LN45@VerifySize
$LN38@VerifySize:

; 1311 : 			bEnable = FALSE;

  001e7	33 f6		 xor	 esi, esi
  001e9	89 74 24 10	 mov	 DWORD PTR _bEnable$[esp+124], esi
  001ed	eb 02		 jmp	 SHORT $LN9@VerifySize
$LN45@VerifySize:
  001ef	33 f6		 xor	 esi, esi
$LN9@VerifySize:

; 1312 : 
; 1313 : 		if (!bHiddenVolHost && bHiddenVol)

  001f1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  001f7	85 d2		 test	 edx, edx
  001f9	75 1b		 jne	 SHORT $LN8@VerifySize
  001fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00200	85 c0		 test	 eax, eax
  00202	74 12		 je	 SHORT $LN8@VerifySize

; 1314 : 		{
; 1315 : 			if (lTmp * i > nMaximumHiddenVolSize)

  00204	3b 0d 04 00 00
	00		 cmp	 ecx, DWORD PTR ?nMaximumHiddenVolSize@@3_JA+4
  0020a	7c 35		 jl	 SHORT $LN43@VerifySize
  0020c	7f 2f		 jg	 SHORT $LN40@VerifySize
  0020e	3b 2d 00 00 00
	00		 cmp	 ebp, DWORD PTR ?nMaximumHiddenVolSize@@3_JA

; 1316 : 				bEnable = FALSE;
; 1317 : 		}
; 1318 : 		else

  00214	eb 25		 jmp	 SHORT $LN48@VerifySize
$LN8@VerifySize:

; 1319 : 		{
; 1320 : 			if (lTmp * i > (bHiddenVolHost ? TC_MAX_HIDDEN_VOLUME_HOST_SIZE : TC_MAX_VOLUME_SIZE))

  00216	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  0021c	85 d2		 test	 edx, edx
  0021e	74 0c		 je	 SHORT $LN28@VerifySize
  00220	ba 00 00 fc ff	 mov	 edx, -262144		; fffc0000H
  00225	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  0022a	eb 07		 jmp	 SHORT $LN29@VerifySize
$LN28@VerifySize:
  0022c	33 d2		 xor	 edx, edx
  0022e	b8 00 00 04 00	 mov	 eax, 262144		; 00040000H
$LN29@VerifySize:
  00233	3b c8		 cmp	 ecx, eax
  00235	7c 0a		 jl	 SHORT $LN43@VerifySize
  00237	7f 04		 jg	 SHORT $LN40@VerifySize
  00239	3b ea		 cmp	 ebp, edx
$LN48@VerifySize:
  0023b	76 04		 jbe	 SHORT $LN43@VerifySize
$LN40@VerifySize:

; 1321 : 				bEnable = FALSE;

  0023d	89 74 24 10	 mov	 DWORD PTR _bEnable$[esp+124], esi
$LN43@VerifySize:

; 1322 : 		}
; 1323 : 	}
; 1324 : 
; 1325 : 	if (bUpdate)

  00241	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR _bUpdate$[esp+120], 0
  00249	74 41		 je	 SHORT $LN3@VerifySize

; 1326 : 	{
; 1327 : 		nUIVolumeSize = lTmp;
; 1328 : 
; 1329 : 		if (!bDevice || (bHiddenVol && !bHiddenVolHost))	// Update only if it's not a raw device or if it's a hidden volume

  0024b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  00252	89 3d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, edi
  00258	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx
  0025e	74 13		 je	 SHORT $LN2@VerifySize
  00260	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00265	85 c0		 test	 eax, eax
  00267	74 23		 je	 SHORT $LN3@VerifySize
  00269	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  0026f	85 c9		 test	 ecx, ecx
  00271	75 19		 jne	 SHORT $LN3@VerifySize
$LN2@VerifySize:

; 1330 : 			nVolumeSize = i * lTmp;

  00273	8b 54 24 14	 mov	 edx, DWORD PTR _i$[esp+124]
  00277	53		 push	 ebx
  00278	57		 push	 edi
  00279	6a 00		 push	 0
  0027b	52		 push	 edx
  0027c	e8 00 00 00 00	 call	 __allmul
  00281	a3 00 00 00 00	 mov	 DWORD PTR ?nVolumeSize@@3_KA, eax
  00286	89 15 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, edx
$LN3@VerifySize:

; 1331 : 	}
; 1332 : 
; 1333 : 	EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), bEnable);

  0028c	8b 44 24 10	 mov	 eax, DWORD PTR _bEnable$[esp+124]
  00290	8b 4c 24 20	 mov	 ecx, DWORD PTR _hwndDlg$GSCopy$[esp+124]
  00294	50		 push	 eax
  00295	68 10 04 00 00	 push	 1040			; 00000410H
  0029a	51		 push	 ecx
  0029b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  002a1	50		 push	 eax
  002a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  002a8	50		 push	 eax
  002a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 1334 : 
; 1335 : 	if (nVolumeSize != nLastVolumeSize)

  002af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA
  002b4	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?nVolumeSize@@3_KA+4
  002ba	5f		 pop	 edi
  002bb	5e		 pop	 esi
  002bc	5d		 pop	 ebp
  002bd	5b		 pop	 ebx
  002be	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?nLastVolumeSize@?1??VerifySizeAndUpdate@@9@4_KA
  002c4	75 08		 jne	 SHORT $LN41@VerifySize
  002c6	3b 0d 04 00 00
	00		 cmp	 ecx, DWORD PTR ?nLastVolumeSize@?1??VerifySizeAndUpdate@@9@4_KA+4
  002cc	74 15		 je	 SHORT $LN1@VerifySize
$LN41@VerifySize:

; 1336 : 	{
; 1337 : 		// Change of volume size may make some file systems allowed or disallowed, so the default filesystem must
; 1338 : 		// be reselected.
; 1339 : 		fileSystem = FILESYS_NONE;	

  002ce	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fileSystem@@3HC, 0 ; fileSystem

; 1340 : 		nLastVolumeSize = nVolumeSize;

  002d8	a3 00 00 00 00	 mov	 DWORD PTR ?nLastVolumeSize@?1??VerifySizeAndUpdate@@9@4_KA, eax
  002dd	89 0d 04 00 00
	00		 mov	 DWORD PTR ?nLastVolumeSize@?1??VerifySizeAndUpdate@@9@4_KA+4, ecx
$LN1@VerifySize:

; 1341 : 	}
; 1342 : }

  002e3	8b 4c 24 68	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+108]
  002e7	33 cc		 xor	 ecx, esp
  002e9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ee	83 c4 6c	 add	 esp, 108		; 0000006cH
  002f1	c3		 ret	 0
_VerifySizeAndUpdate ENDP
_TEXT	ENDS
;	COMDAT ?lastNonSysInplaceEncStatus@?1??UpdateNonSysInplaceEncProgressBar@@9@4HA
_BSS	SEGMENT
?lastNonSysInplaceEncStatus@?1??UpdateNonSysInplaceEncProgressBar@@9@4HA DD 01H DUP (?) ; `UpdateNonSysInplaceEncProgressBar'::`2'::lastNonSysInplaceEncStatus
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT _UpdateNonSysInplaceEncProgressBar
_TEXT	SEGMENT
_UpdateNonSysInplaceEncProgressBar PROC			; COMDAT

; 1908 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 1909 : 	static int lastNonSysInplaceEncStatus = NONSYS_INPLACE_ENC_STATUS_NONE;
; 1910 : 	int nonSysInplaceEncStatus = NonSysInplaceEncStatus;

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _NonSysInplaceEncStatus

; 1911 : 	__int64 totalSize = NonSysInplaceEncTotalSize;
; 1912 : 
; 1913 : 	if (bVolTransformThreadRunning 
; 1914 : 		&& (nonSysInplaceEncStatus == NONSYS_INPLACE_ENC_STATUS_ENCRYPTING
; 1915 : 		|| nonSysInplaceEncStatus == NONSYS_INPLACE_ENC_STATUS_FINALIZING
; 1916 : 		|| nonSysInplaceEncStatus == NONSYS_INPLACE_ENC_STATUS_FINISHED))

  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  0000d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _NonSysInplaceEncTotalSize
  00013	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR _NonSysInplaceEncTotalSize+4
  00019	85 c0		 test	 eax, eax
  0001b	74 70		 je	 SHORT $LN1@UpdateNonS
  0001d	83 ff 03	 cmp	 edi, 3
  00020	74 0a		 je	 SHORT $LN5@UpdateNonS
  00022	83 ff 04	 cmp	 edi, 4
  00025	74 05		 je	 SHORT $LN5@UpdateNonS
  00027	83 ff 06	 cmp	 edi, 6
  0002a	75 61		 jne	 SHORT $LN1@UpdateNonS
$LN5@UpdateNonS:

; 1917 : 	{
; 1918 : 		if (lastNonSysInplaceEncStatus != nonSysInplaceEncStatus
; 1919 : 			&& nonSysInplaceEncStatus == NONSYS_INPLACE_ENC_STATUS_ENCRYPTING)

  0002c	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?lastNonSysInplaceEncStatus@?1??UpdateNonSysInplaceEncProgressBar@@9@4HA, edi
  00032	74 18		 je	 SHORT $LN4@UpdateNonS
  00034	83 ff 03	 cmp	 edi, 3
  00037	75 13		 jne	 SHORT $LN4@UpdateNonS

; 1920 : 		{
; 1921 : 			InitNonSysInplaceEncProgressBar ();

  00039	e8 00 00 00 00	 call	 _InitNonSysInplaceEncProgressBar

; 1930 : 		}
; 1931 : 	}
; 1932 : 
; 1933 : 	ShowNonSysInPlaceEncUIStatus ();

  0003e	e8 00 00 00 00	 call	 _ShowNonSysInPlaceEncUIStatus

; 1934 : 
; 1935 : 	lastNonSysInplaceEncStatus = nonSysInplaceEncStatus;

  00043	89 3d 00 00 00
	00		 mov	 DWORD PTR ?lastNonSysInplaceEncStatus@?1??UpdateNonSysInplaceEncProgressBar@@9@4HA, edi
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi

; 1936 : }

  0004b	c3		 ret	 0
$LN4@UpdateNonS:

; 1922 : 		}
; 1923 : 		else
; 1924 : 		{
; 1925 : 			if (totalSize <= 0 && nVolumeSize > 0)

  0004c	85 d2		 test	 edx, edx
  0004e	7f 27		 jg	 SHORT $LN12@UpdateNonS
  00050	7c 04		 jl	 SHORT $LN10@UpdateNonS
  00052	85 f6		 test	 esi, esi
  00054	77 21		 ja	 SHORT $LN12@UpdateNonS
$LN10@UpdateNonS:
  00056	a1 04 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA+4
  0005b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nVolumeSize@@3_KA
  00061	85 c0		 test	 eax, eax
  00063	77 04		 ja	 SHORT $LN11@UpdateNonS
  00065	85 c9		 test	 ecx, ecx
  00067	76 04		 jbe	 SHORT $LN2@UpdateNonS
$LN11@UpdateNonS:

; 1926 : 				totalSize = nVolumeSize;

  00069	8b f1		 mov	 esi, ecx
  0006b	8b d0		 mov	 edx, eax
$LN2@UpdateNonS:

; 1927 : 
; 1928 : 			if (totalSize > 0)

  0006d	85 d2		 test	 edx, edx
  0006f	7c 1c		 jl	 SHORT $LN1@UpdateNonS
  00071	7f 04		 jg	 SHORT $LN12@UpdateNonS
  00073	85 f6		 test	 esi, esi
  00075	76 16		 jbe	 SHORT $LN1@UpdateNonS
$LN12@UpdateNonS:

; 1929 : 				UpdateProgressBarProc (NonSysInplaceEncBytesDone);

  00077	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _NonSysInplaceEncBytesDone+4
  0007d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _NonSysInplaceEncBytesDone
  00083	51		 push	 ecx
  00084	52		 push	 edx
  00085	e8 00 00 00 00	 call	 _UpdateProgressBarProc
  0008a	83 c4 08	 add	 esp, 8
$LN1@UpdateNonS:

; 1930 : 		}
; 1931 : 	}
; 1932 : 
; 1933 : 	ShowNonSysInPlaceEncUIStatus ();

  0008d	e8 00 00 00 00	 call	 _ShowNonSysInPlaceEncUIStatus

; 1934 : 
; 1935 : 	lastNonSysInplaceEncStatus = nonSysInplaceEncStatus;

  00092	89 3d 00 00 00
	00		 mov	 DWORD PTR ?lastNonSysInplaceEncStatus@?1??UpdateNonSysInplaceEncProgressBar@@9@4HA, edi
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi

; 1936 : }

  0009a	c3		 ret	 0
_UpdateNonSysInplaceEncProgressBar ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@PHPLOOOK@FAILED_TO_INTERRUPT_WIPING?$AA@ ; `string'
EXTRN	?CheckDecoyOSWipeResult@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::CheckDecoyOSWipeResult
EXTRN	?AbortDecoyOSWipe@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::AbortDecoyOSWipe
;	COMDAT ??_C@_0BL@PHPLOOOK@FAILED_TO_INTERRUPT_WIPING?$AA@
CONST	SEGMENT
??_C@_0BL@PHPLOOOK@FAILED_TO_INTERRUPT_WIPING?$AA@ DB 'FAILED_TO_INTERRUP'
	DB	'T_WIPING', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_WipeAbort$5 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$_WipeAbort$2
__catchsym$_WipeAbort$4 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffe8H
	DD	FLAT:__catch$_WipeAbort$0
__unwindtable$_WipeAbort DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$_WipeAbort DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$_WipeAbort
	DD	02H
	DD	FLAT:__tryblocktable$_WipeAbort
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$_WipeAbort DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_WipeAbort$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$_WipeAbort$5
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _WipeAbort
_TEXT	SEGMENT
$T143113 = -88						; size = 16
$T143112 = -72						; size = 16
$T143111 = -56						; size = 16
_decoySysPartitionWipeStatus$132403 = -40		; size = 16
_e$132406 = -24						; size = 4
_e$132416 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_WipeAbort PROC						; COMDAT

; 2007 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_WipeAbort
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 2008 : 	EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), FALSE);

  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00030	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00036	6a 00		 push	 0
  00038	68 f8 03 00 00	 push	 1016			; 000003f8H
  0003d	50		 push	 eax
  0003e	ff d7		 call	 edi
  00040	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  00046	50		 push	 eax
  00047	ff d6		 call	 esi

; 2009 : 
; 2010 : 	if (bHiddenOS && IsHiddenOSRunning())

  00049	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  0004f	85 c9		 test	 ecx, ecx
  00051	0f 84 a4 01 00
	00		 je	 $LN9@WipeAbort
  00057	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  0005c	85 c0		 test	 eax, eax
  0005e	0f 84 97 01 00
	00		 je	 $LN9@WipeAbort

; 2011 : 	{
; 2012 : 		/* Decoy system partition wipe */	
; 2013 : 		
; 2014 : 		DecoySystemWipeStatus decoySysPartitionWipeStatus;
; 2015 : 
; 2016 : 		try
; 2017 : 		{
; 2018 : 			decoySysPartitionWipeStatus = BootEncObj->GetDecoyOSWipeStatus();

  00064	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0006a	8d 55 c8	 lea	 edx, DWORD PTR $T143111[ebp]
  0006d	52		 push	 edx
  0006e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00075	e8 00 00 00 00	 call	 ?GetDecoyOSWipeStatus@BootEncryption@CipherShed@@QAE?AUDecoySystemWipeStatus@@XZ ; CipherShed::BootEncryption::GetDecoyOSWipeStatus
  0007a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0007d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007f	89 55 dc	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132403[ebp+4], edx
  00082	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00085	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00088	89 4d d8	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132403[ebp], ecx
  0008b	89 55 e0	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132403[ebp+8], edx
  0008e	89 45 e4	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132403[ebp+12], eax
  00091	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 2025 : 		}
; 2026 : 
; 2027 : 		if (!decoySysPartitionWipeStatus.WipeInProgress)

  00098	85 c9		 test	 ecx, ecx
  0009a	75 13		 jne	 SHORT $LN7@WipeAbort

; 2028 : 		{
; 2029 : 			EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), TRUE);

  0009c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  000a2	6a 01		 push	 1
  000a4	68 f8 03 00 00	 push	 1016			; 000003f8H
  000a9	51		 push	 ecx

; 2030 : 			return;

  000aa	e9 5f 01 00 00	 jmp	 $LN28@WipeAbort
$LN7@WipeAbort:

; 2031 : 		}
; 2032 : 
; 2033 : 		WaitCursor ();

  000af	e8 00 00 00 00	 call	 _WaitCursor

; 2034 : 
; 2035 : 		try
; 2036 : 		{
; 2037 : 			int attempts = SYSENC_PAUSE_RETRIES;
; 2038 : 
; 2039 : 			BootEncObj->AbortDecoyOSWipe ();

  000b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000ba	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  000c1	bf c8 00 00 00	 mov	 edi, 200		; 000000c8H
  000c6	e8 00 00 00 00	 call	 ?AbortDecoyOSWipe@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::AbortDecoyOSWipe

; 2040 : 
; 2041 : 			decoySysPartitionWipeStatus = BootEncObj->GetDecoyOSWipeStatus();

  000cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000d1	8d 55 b8	 lea	 edx, DWORD PTR $T143112[ebp]
  000d4	52		 push	 edx
  000d5	e8 00 00 00 00	 call	 ?GetDecoyOSWipeStatus@BootEncryption@CipherShed@@QAE?AUDecoySystemWipeStatus@@XZ ; CipherShed::BootEncryption::GetDecoyOSWipeStatus
  000da	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000dd	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000e0	8b 30		 mov	 esi, DWORD PTR [eax]
  000e2	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  000e5	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__Sleep@4
  000eb	89 4d dc	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132403[ebp+4], ecx
  000ee	89 55 e0	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132403[ebp+8], edx
  000f1	89 45 e4	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132403[ebp+12], eax
$LN29@WipeAbort:
  000f4	89 75 d8	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132403[ebp], esi

; 2042 : 
; 2043 : 			while (decoySysPartitionWipeStatus.WipeInProgress && attempts > 0)

  000f7	85 f6		 test	 esi, esi
  000f9	74 2e		 je	 SHORT $LN23@WipeAbort
  000fb	85 ff		 test	 edi, edi
  000fd	7e 50		 jle	 SHORT $LN19@WipeAbort

; 2044 : 			{
; 2045 : 				Sleep (SYSENC_PAUSE_RETRY_INTERVAL);

  000ff	6a 64		 push	 100			; 00000064H
  00101	ff d3		 call	 ebx

; 2046 : 				attempts--;
; 2047 : 				decoySysPartitionWipeStatus = BootEncObj->GetDecoyOSWipeStatus();

  00103	8d 4d a8	 lea	 ecx, DWORD PTR $T143113[ebp]
  00106	51		 push	 ecx
  00107	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0010d	4f		 dec	 edi
  0010e	e8 00 00 00 00	 call	 ?GetDecoyOSWipeStatus@BootEncryption@CipherShed@@QAE?AUDecoySystemWipeStatus@@XZ ; CipherShed::BootEncryption::GetDecoyOSWipeStatus
  00113	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00116	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00119	8b 30		 mov	 esi, DWORD PTR [eax]
  0011b	89 55 dc	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132403[ebp+4], edx
  0011e	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00121	89 4d e0	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132403[ebp+8], ecx
  00124	89 55 e4	 mov	 DWORD PTR _decoySysPartitionWipeStatus$132403[ebp+12], edx

; 2048 : 			}

  00127	eb cb		 jmp	 SHORT $LN29@WipeAbort
$LN23@WipeAbort:

; 2049 : 
; 2050 : 			if (!decoySysPartitionWipeStatus.WipeInProgress)
; 2051 : 				BootEncObj->CheckDecoyOSWipeResult ();

  00129	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0012f	e8 00 00 00 00	 call	 ?CheckDecoyOSWipeResult@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::CheckDecoyOSWipeResult
  00134	eb 19		 jmp	 SHORT $LN19@WipeAbort
__catch$_WipeAbort$2:

; 2052 : 
; 2053 : 		}
; 2054 : 		catch (Exception &e)
; 2055 : 		{
; 2056 : 			e.Show (MainDlg);

  00136	8b 4d ec	 mov	 ecx, DWORD PTR _e$132416[ebp]
  00139	8b 01		 mov	 eax, DWORD PTR [ecx]
  0013b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00141	8b 00		 mov	 eax, DWORD PTR [eax]
  00143	52		 push	 edx
  00144	ff d0		 call	 eax

; 2057 : 		}

  00146	b8 00 00 00 00	 mov	 eax, $LN24@WipeAbort
  0014b	c3		 ret	 0
$LN24@WipeAbort:
  0014c	8b 75 d8	 mov	 esi, DWORD PTR _decoySysPartitionWipeStatus$132403[ebp]
$LN19@WipeAbort:

; 2058 : 
; 2059 : 		NormalCursor ();

  0014f	e8 00 00 00 00	 call	 _NormalCursor

; 2060 : 
; 2061 : 		if (decoySysPartitionWipeStatus.WipeInProgress)

  00154	85 f6		 test	 esi, esi
  00156	0f 84 93 00 00
	00		 je	 $LN26@WipeAbort

; 2062 : 		{
; 2063 : 			SetTimer (MainDlg, TIMER_ID_WIPE_PROGRESS, TIMER_INTERVAL_WIPE_PROGRESS, NULL);

  0015c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00162	6a 00		 push	 0
  00164	6a 1e		 push	 30			; 0000001eH
  00166	68 02 01 00 00	 push	 258			; 00000102H
  0016b	51		 push	 ecx
  0016c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16

; 2064 : 			EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), TRUE);

  00172	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00178	6a 01		 push	 1
  0017a	68 f8 03 00 00	 push	 1016			; 000003f8H
  0017f	52		 push	 edx
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00186	50		 push	 eax
  00187	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 2065 : 			Error ("FAILED_TO_INTERRUPT_WIPING");

  0018d	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PHPLOOOK@FAILED_TO_INTERRUPT_WIPING?$AA@
  00192	e8 00 00 00 00	 call	 _Error
  00197	83 c4 04	 add	 esp, 4

; 2076 : }

  0019a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0019d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a4	59		 pop	 ecx
  001a5	5f		 pop	 edi
  001a6	5e		 pop	 esi
  001a7	5b		 pop	 ebx
  001a8	8b e5		 mov	 esp, ebp
  001aa	5d		 pop	 ebp
  001ab	c3		 ret	 0
__catch$_WipeAbort$0:

; 2019 : 		}
; 2020 : 		catch (Exception &e)
; 2021 : 		{
; 2022 : 			e.Show (MainDlg);

  001ac	8b 4d e8	 mov	 ecx, DWORD PTR _e$132406[ebp]
  001af	8b 01		 mov	 eax, DWORD PTR [ecx]
  001b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  001b7	8b 00		 mov	 eax, DWORD PTR [eax]
  001b9	52		 push	 edx
  001ba	ff d0		 call	 eax

; 2023 : 			EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), TRUE);

  001bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  001c2	6a 01		 push	 1
  001c4	68 f8 03 00 00	 push	 1016			; 000003f8H
  001c9	51		 push	 ecx
  001ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  001d0	50		 push	 eax
  001d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 2024 : 			return;

  001d7	b8 00 00 00 00	 mov	 eax, $LN17@WipeAbort
  001dc	c3		 ret	 0
$LN17@WipeAbort:

; 2076 : }

  001dd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001e0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e7	59		 pop	 ecx
  001e8	5f		 pop	 edi
  001e9	5e		 pop	 esi
  001ea	5b		 pop	 ebx
  001eb	8b e5		 mov	 esp, ebp
  001ed	5d		 pop	 ebp
  001ee	c3		 ret	 0
$LN26@WipeAbort:

; 2024 : 			return;

  001ef	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  001f5	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
$LN9@WipeAbort:

; 2066 : 			return;
; 2067 : 		}
; 2068 : 	}
; 2069 : 	else
; 2070 : 	{
; 2071 : 		/* Regular device wipe (not decoy system partition wipe) */
; 2072 : 	}
; 2073 : 
; 2074 : 	UpdateWipeControls ();

  001fb	e8 00 00 00 00	 call	 _UpdateWipeControls

; 2075 : 	EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), TRUE);

  00200	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00206	6a 01		 push	 1
  00208	68 f8 03 00 00	 push	 1016			; 000003f8H
  0020d	52		 push	 edx
$LN28@WipeAbort:
  0020e	ff d7		 call	 edi
  00210	50		 push	 eax
  00211	ff d6		 call	 esi

; 2076 : }

  00213	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00216	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0021d	59		 pop	 ecx
  0021e	5f		 pop	 edi
  0021f	5e		 pop	 esi
  00220	5b		 pop	 ebx
  00221	8b e5		 mov	 esp, ebp
  00223	5d		 pop	 ebp
  00224	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_WipeAbort:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_WipeAbort
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_WipeAbort ENDP
PUBLIC	??_C@_0BH@PKDMJBLN@FAILED_TO_START_WIPING?$AA@	; `string'
EXTRN	?StartDecoyOSWipe@BootEncryption@CipherShed@@QAEXW4WipeAlgorithmId@@@Z:PROC ; CipherShed::BootEncryption::StartDecoyOSWipe
;	COMDAT ??_C@_0BH@PKDMJBLN@FAILED_TO_START_WIPING?$AA@
CONST	SEGMENT
??_C@_0BH@PKDMJBLN@FAILED_TO_START_WIPING?$AA@ DB 'FAILED_TO_START_WIPING'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_WipeStart$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$_WipeStart$0
__unwindtable$_WipeStart DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_WipeStart DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_WipeStart$2
__ehfuncinfo$_WipeStart DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_WipeStart
	DD	01H
	DD	FLAT:__tryblocktable$_WipeStart
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _WipeStart
_TEXT	SEGMENT
_e$132425 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_WipeStart PROC						; COMDAT

; 2080 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_WipeStart
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 2081 : 	if (bHiddenOS && IsHiddenOSRunning())

  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00030	85 c0		 test	 eax, eax
  00032	0f 84 b1 00 00
	00		 je	 $LN2@WipeStart
  00038	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  0003d	85 c0		 test	 eax, eax
  0003f	0f 84 a4 00 00
	00		 je	 $LN2@WipeStart

; 2082 : 	{
; 2083 : 		/* Decoy system partition wipe */
; 2084 : 
; 2085 : 		EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), FALSE);

  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  0004b	33 f6		 xor	 esi, esi
  0004d	56		 push	 esi
  0004e	68 f8 03 00 00	 push	 1016			; 000003f8H
  00053	51		 push	 ecx
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0005a	50		 push	 eax
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 2086 : 
; 2087 : 		bDeviceWipeInProgress = FALSE;

  00061	89 35 00 00 00
	00		 mov	 DWORD PTR ?bDeviceWipeInProgress@@3HA, esi ; bDeviceWipeInProgress

; 2088 : 		WaitCursor ();

  00067	e8 00 00 00 00	 call	 _WaitCursor

; 2089 : 
; 2090 : 		try
; 2091 : 		{
; 2092 : 			BootEncObj->StartDecoyOSWipe (nWipeMode);	

  0006c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _nWipeMode
  00072	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00078	52		 push	 edx
  00079	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
  0007c	e8 00 00 00 00	 call	 ?StartDecoyOSWipe@BootEncryption@CipherShed@@QAEXW4WipeAlgorithmId@@@Z ; CipherShed::BootEncryption::StartDecoyOSWipe

; 2093 : 
; 2094 : 			bDeviceWipeInProgress = TRUE;

  00081	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bDeviceWipeInProgress@@3HA, 1 ; bDeviceWipeInProgress
$LN10@WipeStart:

; 2100 : 
; 2101 : 		NormalCursor ();

  0008b	e8 00 00 00 00	 call	 _NormalCursor

; 2102 : 
; 2103 : 		if (!bDeviceWipeInProgress)

  00090	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDeviceWipeInProgress@@3HA, 0 ; bDeviceWipeInProgress
  00097	75 50		 jne	 SHORT $LN2@WipeStart

; 2104 : 		{
; 2105 : 			EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), TRUE);

  00099	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  0009f	6a 01		 push	 1
  000a1	68 f8 03 00 00	 push	 1016			; 000003f8H
  000a6	51		 push	 ecx
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  000ad	50		 push	 eax
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 2106 : 			Error ("FAILED_TO_START_WIPING");

  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@PKDMJBLN@FAILED_TO_START_WIPING?$AA@
  000b9	e8 00 00 00 00	 call	 _Error
  000be	83 c4 04	 add	 esp, 4

; 2120 : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c3		 ret	 0
__catch$_WipeStart$0:

; 2095 : 		}
; 2096 : 		catch (Exception &e)
; 2097 : 		{
; 2098 : 			e.Show (MainDlg);

  000d3	8b 4d ec	 mov	 ecx, DWORD PTR _e$132425[ebp]
  000d6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  000de	8b 00		 mov	 eax, DWORD PTR [eax]
  000e0	52		 push	 edx
  000e1	ff d0		 call	 eax

; 2099 : 		}

  000e3	b8 00 00 00 00	 mov	 eax, $LN10@WipeStart
  000e8	c3		 ret	 0
$LN2@WipeStart:

; 2107 : 			return;
; 2108 : 		}
; 2109 : 	}
; 2110 : 	else
; 2111 : 	{
; 2112 : 		/* Regular device wipe (not decoy system partition wipe) */
; 2113 : 	}
; 2114 : 
; 2115 : 	InitWipeProgressBar ();

  000e9	e8 00 00 00 00	 call	 _InitWipeProgressBar

; 2116 : 	UpdateWipeProgressBar ();

  000ee	e8 00 00 00 00	 call	 _UpdateWipeProgressBar

; 2117 : 	UpdateWipeControls ();

  000f3	e8 00 00 00 00	 call	 _UpdateWipeControls

; 2118 : 	EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), TRUE);

  000f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  000fe	6a 01		 push	 1
  00100	68 f8 03 00 00	 push	 1016			; 000003f8H
  00105	52		 push	 edx
  00106	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0010c	50		 push	 eax
  0010d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 2119 : 	SetTimer (MainDlg, TIMER_ID_WIPE_PROGRESS, TIMER_INTERVAL_WIPE_PROGRESS, NULL);

  00113	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00118	6a 00		 push	 0
  0011a	6a 1e		 push	 30			; 0000001eH
  0011c	68 02 01 00 00	 push	 258			; 00000102H
  00121	50		 push	 eax
  00122	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16

; 2120 : }

  00128	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0012b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00132	59		 pop	 ecx
  00133	5f		 pop	 edi
  00134	5e		 pop	 esi
  00135	5b		 pop	 ebx
  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_WipeStart:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_WipeStart
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_WipeStart ENDP
PUBLIC	??_C@_0BA@NLOHJLIM@FORMAT_CANCELED?$AA@		; `string'
PUBLIC	??_C@_0BM@JKEOLKCL@NONSYS_INPLACE_ENC_CANCELED?$AA@ ; `string'
PUBLIC	??_C@_0BA@IDMMBDGF@FORMAT_FINISHED?$AA@		; `string'
PUBLIC	??_C@_0BG@PHMPDKJN@SPARSE_FILE_SIZE_NOTE?$AA@	; `string'
PUBLIC	??_C@_0BF@ELGDKJEM@FORMAT_FINISHED_INFO?$AA@	; `string'
PUBLIC	??_C@_0CB@KOCBDKDK@NONSYS_INPLACE_ENC_FINISHED_INFO@ ; `string'
PUBLIC	??_C@_0BM@NHKMKNFC@HIDVOL_FORMAT_FINISHED_HELP?$AA@ ; `string'
PUBLIC	??_C@_0O@OIAKNAOK@CREATE_FAILED?$AA@		; `string'
PUBLIC	??_C@_0CC@GOJAHDJH@INPLACE_ENC_GENERIC_ERR_ALT_STEP@ ; `string'
PUBLIC	??_C@_0BM@DNIPKEFC@NO_FREE_DRIVE_FOR_OUTER_VOL?$AA@ ; `string'
PUBLIC	??_C@_0BP@CBCIBGL@INPLACE_ENC_GENERIC_ERR_RESUME?$AA@ ; `string'
PUBLIC	??_C@_0BF@IAAAEIAJ@CANT_MOUNT_OUTER_VOL?$AA@	; `string'
PUBLIC	??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@		; `string'
PUBLIC	??_C@_0P@JKCBOPBP@ACCESSMODEFAIL?$AA@		; `string'
PUBLIC	??_C@_0BA@JEAHJACA@OVERWRITEPROMPT?$AA@		; `string'
PUBLIC	??_C@_0P@EMHOIPJB@READONLYPROMPT?$AA@		; `string'
PUBLIC	??_C@_0BO@NAOLHLLP@ADMIN_PRIVILEGES_WARN_DEVICES?$AA@ ; `string'
PUBLIC	??_C@_0BL@MHDAJDPI@ADMIN_PRIVILEGES_WARN_NTFS?$AA@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	__endthread:PROC
EXTRN	_LastDialogId:DWORD
EXTRN	__imp__VirtualUnlock@8:PROC
EXTRN	__imp__MessageBeep@4:PROC
EXTRN	_Info:PROC
EXTRN	_Warning:PROC
EXTRN	_RestoreDefaultKeyFilesParam:PROC
EXTRN	_ShowInPlaceEncErrMsgWAltSteps:PROC
EXTRN	_handleError:PROC
EXTRN	__imp__SetLastError@4:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	_TCFormatVolume:PROC
EXTRN	_EncryptPartitionInPlaceResume:PROC
EXTRN	_EncryptPartitionInPlaceBegin:PROC
EXTRN	_SetNonSysInplaceEncUIStatus:PROC
EXTRN	__chmod:PROC
EXTRN	__errno:PROC
EXTRN	__access:PROC
EXTRN	_IsUacSupported:PROC
EXTRN	_IsAdmin:PROC
EXTRN	__imp__VirtualLock@8:PROC
;	COMDAT ??_C@_0BA@NLOHJLIM@FORMAT_CANCELED?$AA@
; File c:\program files\microsoft sdks\windows\v7.0\include\winnt.h
CONST	SEGMENT
??_C@_0BA@NLOHJLIM@FORMAT_CANCELED?$AA@ DB 'FORMAT_CANCELED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JKEOLKCL@NONSYS_INPLACE_ENC_CANCELED?$AA@
CONST	SEGMENT
??_C@_0BM@JKEOLKCL@NONSYS_INPLACE_ENC_CANCELED?$AA@ DB 'NONSYS_INPLACE_EN'
	DB	'C_CANCELED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IDMMBDGF@FORMAT_FINISHED?$AA@
CONST	SEGMENT
??_C@_0BA@IDMMBDGF@FORMAT_FINISHED?$AA@ DB 'FORMAT_FINISHED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PHMPDKJN@SPARSE_FILE_SIZE_NOTE?$AA@
CONST	SEGMENT
??_C@_0BG@PHMPDKJN@SPARSE_FILE_SIZE_NOTE?$AA@ DB 'SPARSE_FILE_SIZE_NOTE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ELGDKJEM@FORMAT_FINISHED_INFO?$AA@
CONST	SEGMENT
??_C@_0BF@ELGDKJEM@FORMAT_FINISHED_INFO?$AA@ DB 'FORMAT_FINISHED_INFO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KOCBDKDK@NONSYS_INPLACE_ENC_FINISHED_INFO@
CONST	SEGMENT
??_C@_0CB@KOCBDKDK@NONSYS_INPLACE_ENC_FINISHED_INFO@ DB 'NONSYS_INPLACE_E'
	DB	'NC_FINISHED_INFO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NHKMKNFC@HIDVOL_FORMAT_FINISHED_HELP?$AA@
CONST	SEGMENT
??_C@_0BM@NHKMKNFC@HIDVOL_FORMAT_FINISHED_HELP?$AA@ DB 'HIDVOL_FORMAT_FIN'
	DB	'ISHED_HELP', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OIAKNAOK@CREATE_FAILED?$AA@
CONST	SEGMENT
??_C@_0O@OIAKNAOK@CREATE_FAILED?$AA@ DB 'CREATE_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GOJAHDJH@INPLACE_ENC_GENERIC_ERR_ALT_STEP@
CONST	SEGMENT
??_C@_0CC@GOJAHDJH@INPLACE_ENC_GENERIC_ERR_ALT_STEP@ DB 'INPLACE_ENC_GENE'
	DB	'RIC_ERR_ALT_STEPS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DNIPKEFC@NO_FREE_DRIVE_FOR_OUTER_VOL?$AA@
CONST	SEGMENT
??_C@_0BM@DNIPKEFC@NO_FREE_DRIVE_FOR_OUTER_VOL?$AA@ DB 'NO_FREE_DRIVE_FOR'
	DB	'_OUTER_VOL', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CBCIBGL@INPLACE_ENC_GENERIC_ERR_RESUME?$AA@
CONST	SEGMENT
??_C@_0BP@CBCIBGL@INPLACE_ENC_GENERIC_ERR_RESUME?$AA@ DB 'INPLACE_ENC_GEN'
	DB	'ERIC_ERR_RESUME', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IAAAEIAJ@CANT_MOUNT_OUTER_VOL?$AA@
CONST	SEGMENT
??_C@_0BF@IAAAEIAJ@CANT_MOUNT_OUTER_VOL?$AA@ DB 'CANT_MOUNT_OUTER_VOL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@
CONST	SEGMENT
??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@ DB 'OUTOFMEMORY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JKCBOPBP@ACCESSMODEFAIL?$AA@
CONST	SEGMENT
??_C@_0P@JKCBOPBP@ACCESSMODEFAIL?$AA@ DB 'ACCESSMODEFAIL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JEAHJACA@OVERWRITEPROMPT?$AA@
CONST	SEGMENT
??_C@_0BA@JEAHJACA@OVERWRITEPROMPT?$AA@ DB 'OVERWRITEPROMPT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EMHOIPJB@READONLYPROMPT?$AA@
CONST	SEGMENT
??_C@_0P@EMHOIPJB@READONLYPROMPT?$AA@ DB 'READONLYPROMPT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NAOLHLLP@ADMIN_PRIVILEGES_WARN_DEVICES?$AA@
CONST	SEGMENT
??_C@_0BO@NAOLHLLP@ADMIN_PRIVILEGES_WARN_DEVICES?$AA@ DB 'ADMIN_PRIVILEGE'
	DB	'S_WARN_DEVICES', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MHDAJDPI@ADMIN_PRIVILEGES_WARN_NTFS?$AA@
CONST	SEGMENT
??_C@_0BL@MHDAJDPI@ADMIN_PRIVILEGES_WARN_NTFS?$AA@ DB 'ADMIN_PRIVILEGES_W'
	DB	'ARN_NTFS', 00H				; `string'
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\format\tcformat.c
CONST	ENDS
;	COMDAT _volTransformThreadFunction
_TEXT	SEGMENT
_hPartition$132515 = -17440				; size = 4
_geometry$143174 = -17436				; size = 24
_szTmp$132497 = -17412					; size = 1024
_szMsg$132551 = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_hwndDlgArg$ = 8					; size = 4
_volTransformThreadFunction PROC			; COMDAT

; 2270 : {

  00000	b8 20 44 00 00	 mov	 eax, 17440		; 00004420H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 1c 44
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+17440], eax
  00018	53		 push	 ebx
  00019	8b 9c 24 28 44
	00 00		 mov	 ebx, DWORD PTR _hwndDlgArg$[esp+17440]
  00020	55		 push	 ebp
  00021	56		 push	 esi
  00022	57		 push	 edi

; 2271 : 	int nStatus;
; 2272 : 	DWORD dwWin32FormatError;
; 2273 : 	BOOL bHidden;
; 2274 : 	HWND hwndDlg = (HWND) hwndDlgArg;
; 2275 : 	volatile FORMAT_VOL_PARAMETERS *volParams = (FORMAT_VOL_PARAMETERS *) malloc (sizeof(FORMAT_VOL_PARAMETERS));

  00023	6a 50		 push	 80			; 00000050H
  00025	e8 00 00 00 00	 call	 _malloc
  0002a	8b f0		 mov	 esi, eax
  0002c	83 c4 04	 add	 esp, 4

; 2276 : 
; 2277 : 	if (volParams == NULL)

  0002f	85 f6		 test	 esi, esi
  00031	75 0d		 jne	 SHORT $LN79@volTransfo

; 2278 : 		AbortProcess ("ERR_MEM_ALLOC");

  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JJNKJOK@ERR_MEM_ALLOC?$AA@
  00038	e8 00 00 00 00	 call	 _AbortProcess
  0003d	83 c4 04	 add	 esp, 4
$LN79@volTransfo:

; 2279 : 
; 2280 : 	VirtualLock ((LPVOID) volParams, sizeof(FORMAT_VOL_PARAMETERS));

  00040	6a 50		 push	 80			; 00000050H
  00042	56		 push	 esi
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualLock@8

; 2281 : 
; 2282 : 	bVolTransformThreadRunning = TRUE;

  00049	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bVolTransformThreadRunning@@3HC, 1 ; bVolTransformThreadRunning

; 2283 : 	bVolTransformThreadToRun = FALSE;

  00053	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bVolTransformThreadToRun@@3HC, 0 ; bVolTransformThreadToRun

; 2284 : 
; 2285 : 	// Check administrator privileges
; 2286 : 	if (!IsAdmin () && !IsUacSupported ())

  0005d	e8 00 00 00 00	 call	 _IsAdmin
  00062	85 c0		 test	 eax, eax
  00064	75 70		 jne	 SHORT $LN73@volTransfo
  00066	e8 00 00 00 00	 call	 _IsUacSupported
  0006b	85 c0		 test	 eax, eax
  0006d	75 67		 jne	 SHORT $LN73@volTransfo

; 2287 : 	{
; 2288 : 		if (fileSystem == FILESYS_NTFS)

  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?fileSystem@@3HC ; fileSystem
  00074	83 f8 02	 cmp	 eax, 2
  00077	75 2a		 jne	 SHORT $LN76@volTransfo

; 2289 : 		{
; 2290 : 			if (MessageBoxW (hwndDlg, GetString ("ADMIN_PRIVILEGES_WARN_NTFS"), lpszTitle, MB_OKCANCEL|MB_ICONWARNING|MB_DEFBUTTON2) == IDCANCEL)

  00079	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  0007f	68 31 01 00 00	 push	 305			; 00000131H
  00084	51		 push	 ecx
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MHDAJDPI@ADMIN_PRIVILEGES_WARN_NTFS?$AA@
  0008a	e8 00 00 00 00	 call	 _GetString
  0008f	83 c4 04	 add	 esp, 4
  00092	50		 push	 eax
  00093	53		 push	 ebx
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  0009a	83 f8 02	 cmp	 eax, 2
  0009d	0f 84 8d 06 00
	00		 je	 $cancel$132487
$LN76@volTransfo:

; 2291 : 				goto cancel;
; 2292 : 		}
; 2293 : 		if (bDevice)

  000a3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  000aa	74 2a		 je	 SHORT $LN73@volTransfo

; 2294 : 		{
; 2295 : 			if (MessageBoxW (hwndDlg, GetString ("ADMIN_PRIVILEGES_WARN_DEVICES"), lpszTitle, MB_OKCANCEL|MB_ICONWARNING|MB_DEFBUTTON2) == IDCANCEL)

  000ac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  000b2	68 31 01 00 00	 push	 305			; 00000131H
  000b7	52		 push	 edx
  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NAOLHLLP@ADMIN_PRIVILEGES_WARN_DEVICES?$AA@
  000bd	e8 00 00 00 00	 call	 _GetString
  000c2	83 c4 04	 add	 esp, 4
  000c5	50		 push	 eax
  000c6	53		 push	 ebx
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  000cd	83 f8 02	 cmp	 eax, 2
  000d0	0f 84 5a 06 00
	00		 je	 $cancel$132487
$LN73@volTransfo:

; 2296 : 				goto cancel;
; 2297 : 		}
; 2298 : 	}
; 2299 : 
; 2300 : 	if (!bInPlaceEncNonSys)

  000d6	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSys
  000db	85 c0		 test	 eax, eax
  000dd	0f 85 ff 00 00
	00		 jne	 $LN58@volTransfo

; 2301 : 	{
; 2302 : 		if (!bDevice)

  000e3	39 05 00 00 00
	00		 cmp	 DWORD PTR ?bDevice@@3HA, eax ; bDevice
  000e9	0f 85 e6 00 00
	00		 jne	 $LN70@volTransfo

; 2303 : 		{
; 2304 : 			int x = _access (szDiskFile, 06);

  000ef	6a 06		 push	 6
  000f1	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  000f6	e8 00 00 00 00	 call	 __access
  000fb	83 c4 08	 add	 esp, 8

; 2305 : 			if (x == 0 || errno != ENOENT)

  000fe	85 c0		 test	 eax, eax
  00100	74 0a		 je	 SHORT $LN68@volTransfo
  00102	e8 00 00 00 00	 call	 __errno
  00107	83 38 02	 cmp	 DWORD PTR [eax], 2
  0010a	74 74		 je	 SHORT $LN65@volTransfo
$LN68@volTransfo:

; 2306 : 			{
; 2307 : 				wchar_t szTmp[512];
; 2308 : 
; 2309 : 				if (! ((bHiddenVol && !bHiddenVolHost) && errno != EACCES))	// Only ask ask for permission to overwrite an existing volume if we're not creating a hidden volume

  0010c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00112	85 c9		 test	 ecx, ecx
  00114	74 14		 je	 SHORT $LN66@volTransfo
  00116	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  0011c	85 d2		 test	 edx, edx
  0011e	75 0a		 jne	 SHORT $LN66@volTransfo
  00120	e8 00 00 00 00	 call	 __errno
  00125	83 38 0d	 cmp	 DWORD PTR [eax], 13	; 0000000dH
  00128	75 56		 jne	 SHORT $LN65@volTransfo
$LN66@volTransfo:

; 2310 : 				{
; 2311 : 					_snwprintf (szTmp, sizeof szTmp / 2,
; 2312 : 						GetString (errno == EACCES ? "READONLYPROMPT" : "OVERWRITEPROMPT"),
; 2313 : 						szDiskFile);

  0012a	e8 00 00 00 00	 call	 __errno
  0012f	83 38 0d	 cmp	 DWORD PTR [eax], 13	; 0000000dH
  00132	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0P@EMHOIPJB@READONLYPROMPT?$AA@
  00137	74 05		 je	 SHORT $LN83@volTransfo
  00139	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BA@JEAHJACA@OVERWRITEPROMPT?$AA@
$LN83@volTransfo:
  0013e	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 _GetString
  00149	83 c4 04	 add	 esp, 4
  0014c	50		 push	 eax
  0014d	8d 44 24 34	 lea	 eax, DWORD PTR _szTmp$132497[esp+17464]
  00151	68 00 02 00 00	 push	 512			; 00000200H
  00156	50		 push	 eax
  00157	e8 00 00 00 00	 call	 __snwprintf

; 2314 : 
; 2315 : 					x = MessageBoxW (hwndDlg, szTmp, lpszTitle, YES_NO|MB_ICONWARNING|MB_DEFBUTTON2);

  0015c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  00162	83 c4 10	 add	 esp, 16			; 00000010H
  00165	68 34 01 00 00	 push	 308			; 00000134H
  0016a	51		 push	 ecx
  0016b	8d 54 24 34	 lea	 edx, DWORD PTR _szTmp$132497[esp+17464]
  0016f	52		 push	 edx
  00170	53		 push	 ebx
  00171	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 2316 : 
; 2317 : 					if (x != IDYES)

  00177	83 f8 06	 cmp	 eax, 6
  0017a	0f 85 b0 05 00
	00		 jne	 $cancel$132487
$LN65@volTransfo:

; 2318 : 						goto cancel;
; 2319 : 				}
; 2320 : 			}
; 2321 : 
; 2322 : 			if (_access (szDiskFile, 06) != 0)

  00180	6a 06		 push	 6
  00182	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  00187	e8 00 00 00 00	 call	 __access
  0018c	83 c4 08	 add	 esp, 8
  0018f	85 c0		 test	 eax, eax
  00191	74 4f		 je	 SHORT $LN58@volTransfo

; 2323 : 			{
; 2324 : 				if (errno == EACCES)

  00193	e8 00 00 00 00	 call	 __errno
  00198	83 38 0d	 cmp	 DWORD PTR [eax], 13	; 0000000dH
  0019b	75 45		 jne	 SHORT $LN58@volTransfo

; 2325 : 				{
; 2326 : 					if (_chmod (szDiskFile, _S_IREAD | _S_IWRITE) != 0)

  0019d	68 80 01 00 00	 push	 384			; 00000180H
  001a2	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  001a7	e8 00 00 00 00	 call	 __chmod
  001ac	83 c4 08	 add	 esp, 8
  001af	85 c0		 test	 eax, eax
  001b1	74 2f		 je	 SHORT $LN58@volTransfo

; 2327 : 					{
; 2328 : 						MessageBoxW (hwndDlg, GetString ("ACCESSMODEFAIL"), lpszTitle, ICON_HAND);

  001b3	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  001b8	6a 10		 push	 16			; 00000010H
  001ba	50		 push	 eax
  001bb	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JKCBOPBP@ACCESSMODEFAIL?$AA@
  001c0	e8 00 00 00 00	 call	 _GetString
  001c5	83 c4 04	 add	 esp, 4
  001c8	50		 push	 eax
  001c9	53		 push	 ebx
  001ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 2557 : 
; 2558 : cancel:

  001d0	e9 5b 05 00 00	 jmp	 $cancel$132487
$LN70@volTransfo:

; 2329 : 						goto cancel;
; 2330 : 					}
; 2331 : 				}
; 2332 : 			}
; 2333 : 
; 2334 : 		}
; 2335 : 		else
; 2336 : 		{
; 2337 : 			// Partition / device / dynamic volume
; 2338 : 
; 2339 : 			if (!FinalPreTransformPrompts ())

  001d5	e8 00 00 00 00	 call	 _FinalPreTransformPrompts
  001da	85 c0		 test	 eax, eax
  001dc	0f 84 4e 05 00
	00		 je	 $cancel$132487
$LN58@volTransfo:

; 2340 : 				goto cancel;
; 2341 : 		}
; 2342 : 	}
; 2343 : 
; 2344 : 	// Prevent the OS from entering Sleep mode when idle
; 2345 : 	SetThreadExecutionState (ES_CONTINUOUS | ES_SYSTEM_REQUIRED);

  001e2	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__SetThreadExecutionState@4
  001e8	68 01 00 00 80	 push	 -2147483647		; 80000001H
  001ed	ff d5		 call	 ebp

; 2346 : 
; 2347 : 	bHidden = bHiddenVol && !bHiddenVolHost;

  001ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  001f5	85 c9		 test	 ecx, ecx
  001f7	74 0f		 je	 SHORT $LN84@volTransfo
  001f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  001ff	85 d2		 test	 edx, edx
  00201	75 05		 jne	 SHORT $LN84@volTransfo
  00203	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
  00206	eb 02		 jmp	 SHORT $LN85@volTransfo
$LN84@volTransfo:
  00208	33 ff		 xor	 edi, edi
$LN85@volTransfo:

; 2348 : 
; 2349 : 	volParams->bDevice = bDevice;

  0020a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bDevice@@3HA ; bDevice
  0020f	89 06		 mov	 DWORD PTR [esi], eax

; 2350 : 	volParams->hiddenVol = bHidden;

  00211	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 2351 : 	volParams->volumePath = szDiskFile;

  00214	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ?szDiskFile@@3PADA ; szDiskFile

; 2352 : 	volParams->size = nVolumeSize;

  0021b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nVolumeSize@@3_KA
  00221	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00224	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeSize@@3_KA+4
  0022a	89 56 14	 mov	 DWORD PTR [esi+20], edx

; 2353 : 	volParams->hiddenVolHostSize = nHiddenVolHostSize;

  0022d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nHiddenVolHostSize@@3_KA
  00232	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00235	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?nHiddenVolHostSize@@3_KA+4
  0023b	89 4e 1c	 mov	 DWORD PTR [esi+28], ecx

; 2354 : 	volParams->ea = nVolumeEA;

  0023e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeEA@@3HA ; nVolumeEA
  00244	89 56 20	 mov	 DWORD PTR [esi+32], edx

; 2355 : 	volParams->pkcs5 = hash_algo;

  00247	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hash_algo@@3HA ; hash_algo
  0024c	89 46 24	 mov	 DWORD PTR [esi+36], eax

; 2356 : 	volParams->headerFlags = CreatingHiddenSysVol() ? TC_HEADER_FLAG_ENCRYPTED_SYSTEM : 0;

  0024f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00255	85 c9		 test	 ecx, ecx
  00257	74 1a		 je	 SHORT $LN90@volTransfo
  00259	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  0025f	85 d2		 test	 edx, edx
  00261	74 10		 je	 SHORT $LN90@volTransfo
  00263	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  00268	85 c0		 test	 eax, eax
  0026a	75 07		 jne	 SHORT $LN90@volTransfo
  0026c	b8 01 00 00 00	 mov	 eax, 1
  00271	eb 02		 jmp	 SHORT $LN91@volTransfo
$LN90@volTransfo:
  00273	33 c0		 xor	 eax, eax
$LN91@volTransfo:
  00275	33 c9		 xor	 ecx, ecx
  00277	85 c0		 test	 eax, eax
  00279	0f 95 c1	 setne	 cl
  0027c	89 4e 28	 mov	 DWORD PTR [esi+40], ecx

; 2357 : 	volParams->fileSystem = fileSystem;

  0027f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?fileSystem@@3HC ; fileSystem
  00285	89 56 2c	 mov	 DWORD PTR [esi+44], edx

; 2358 : 	volParams->clusterSize = clusterSize;

  00288	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clusterSize@@3HC ; clusterSize
  0028d	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 2359 : 	volParams->sparseFileSwitch = bSparseFileSwitch;

  00290	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bSparseFileSwitch@@3HC ; bSparseFileSwitch
  00296	89 4e 34	 mov	 DWORD PTR [esi+52], ecx

; 2360 : 	volParams->quickFormat = quickFormat;

  00299	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?quickFormat@@3HC ; quickFormat
  0029f	89 56 38	 mov	 DWORD PTR [esi+56], edx

; 2361 : 	volParams->sectorSize = GetFormatSectorSize();

  002a2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  002a9	75 07		 jne	 SHORT $LN93@volTransfo
  002ab	b8 00 02 00 00	 mov	 eax, 512		; 00000200H
  002b0	eb 2e		 jmp	 SHORT $LN94@volTransfo
$LN93@volTransfo:
  002b2	8d 44 24 14	 lea	 eax, DWORD PTR _geometry$143174[esp+17456]
  002b6	50		 push	 eax
  002b7	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  002bc	e8 00 00 00 00	 call	 _GetDriveGeometry
  002c1	83 c4 08	 add	 esp, 8
  002c4	85 c0		 test	 eax, eax
  002c6	75 14		 jne	 SHORT $LN92@volTransfo
  002c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  002ce	51		 push	 ecx
  002cf	e8 00 00 00 00	 call	 _handleWin32Error
  002d4	83 c4 04	 add	 esp, 4
  002d7	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN92@volTransfo:
  002dc	8b 44 24 28	 mov	 eax, DWORD PTR _geometry$143174[esp+17476]
$LN94@volTransfo:
  002e0	89 46 3c	 mov	 DWORD PTR [esi+60], eax

; 2362 : 	volParams->realClusterSize = &realClusterSize;

  002e3	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], OFFSET ?realClusterSize@@3HA ; realClusterSize

; 2363 : 	volParams->password = &volumePassword;

  002ea	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], OFFSET ?volumePassword@@3UPassword@@A ; volumePassword

; 2364 : 	volParams->hwndDlg = hwndDlg;

  002f1	89 5e 48	 mov	 DWORD PTR [esi+72], ebx

; 2365 : 
; 2366 : 	if (bInPlaceEncNonSys)

  002f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys

; 2367 : 	{
; 2368 : 		HANDLE hPartition = INVALID_HANDLE_VALUE;
; 2369 : 
; 2370 : 		SetNonSysInplaceEncUIStatus (NONSYS_INPLACE_ENC_STATUS_PREPARING);

  002fa	6a 01		 push	 1
  002fc	85 d2		 test	 edx, edx
  002fe	0f 84 87 00 00
	00		 je	 $LN56@volTransfo
  00304	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR _hPartition$132515[esp+17460], -1
  0030c	e8 00 00 00 00	 call	 _SetNonSysInplaceEncUIStatus

; 2371 : 
; 2372 : 		if (!bInPlaceEncNonSysResumed)

  00311	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSysResumed
  00316	83 c4 04	 add	 esp, 4
  00319	85 c0		 test	 eax, eax
  0031b	75 55		 jne	 SHORT $LN55@volTransfo

; 2373 : 		{
; 2374 : 			bTryToCorrectReadErrors = FALSE;
; 2375 : 
; 2376 : 			nStatus = EncryptPartitionInPlaceBegin (volParams, &hPartition, nWipeMode);

  0031d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _nWipeMode
  00323	51		 push	 ecx
  00324	8d 54 24 14	 lea	 edx, DWORD PTR _hPartition$132515[esp+17460]
  00328	52		 push	 edx
  00329	56		 push	 esi
  0032a	a3 00 00 00 00	 mov	 DWORD PTR ?bTryToCorrectReadErrors@@3HC, eax ; bTryToCorrectReadErrors
  0032f	e8 00 00 00 00	 call	 _EncryptPartitionInPlaceBegin
  00334	8b f8		 mov	 edi, eax
  00336	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2377 : 
; 2378 : 			if (nStatus == ERR_SUCCESS)

  00339	85 ff		 test	 edi, edi
  0033b	75 1b		 jne	 SHORT $LN54@volTransfo

; 2379 : 			{
; 2380 : 				nStatus = EncryptPartitionInPlaceResume (hPartition, volParams, nWipeMode, &bTryToCorrectReadErrors);

  0033d	a1 00 00 00 00	 mov	 eax, DWORD PTR _nWipeMode
  00342	8b 4c 24 10	 mov	 ecx, DWORD PTR _hPartition$132515[esp+17456]
  00346	68 00 00 00 00	 push	 OFFSET ?bTryToCorrectReadErrors@@3HC ; bTryToCorrectReadErrors
  0034b	50		 push	 eax
  0034c	56		 push	 esi
  0034d	51		 push	 ecx
  0034e	e8 00 00 00 00	 call	 _EncryptPartitionInPlaceResume
  00353	83 c4 10	 add	 esp, 16			; 00000010H
  00356	eb 63		 jmp	 SHORT $LN130@volTransfo
$LN54@volTransfo:

; 2381 : 			}
; 2382 : 			else if (hPartition != INVALID_HANDLE_VALUE)

  00358	8b 44 24 10	 mov	 eax, DWORD PTR _hPartition$132515[esp+17456]
  0035c	83 f8 ff	 cmp	 eax, -1
  0035f	74 5c		 je	 SHORT $LN50@volTransfo

; 2383 : 			{
; 2384 : 				CloseHandle (hPartition);

  00361	50		 push	 eax
  00362	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 2385 : 				hPartition = INVALID_HANDLE_VALUE;

  00368	c7 44 24 10 ff
	ff ff ff	 mov	 DWORD PTR _hPartition$132515[esp+17456], -1

; 2386 : 			}
; 2387 : 		}
; 2388 : 		else

  00370	eb 4b		 jmp	 SHORT $LN50@volTransfo
$LN55@volTransfo:

; 2389 : 		{
; 2390 : 			nStatus = EncryptPartitionInPlaceResume (INVALID_HANDLE_VALUE, volParams, nWipeMode, &bTryToCorrectReadErrors);

  00372	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _nWipeMode
  00378	68 00 00 00 00	 push	 OFFSET ?bTryToCorrectReadErrors@@3HC ; bTryToCorrectReadErrors
  0037d	52		 push	 edx
  0037e	56		 push	 esi
  0037f	6a ff		 push	 -1
  00381	e8 00 00 00 00	 call	 _EncryptPartitionInPlaceResume
  00386	83 c4 10	 add	 esp, 16			; 00000010H

; 2391 : 		}
; 2392 : 	}
; 2393 : 	else

  00389	eb 30		 jmp	 SHORT $LN130@volTransfo
$LN56@volTransfo:

; 2394 : 	{
; 2395 : 		InitProgressBar (GetVolumeDataAreaSize (bHidden, nVolumeSize), 0, FALSE, FALSE, FALSE, TRUE);

  0038b	a1 04 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA+4
  00390	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nVolumeSize@@3_KA
  00396	6a 00		 push	 0
  00398	6a 00		 push	 0
  0039a	6a 00		 push	 0
  0039c	6a 00		 push	 0
  0039e	6a 00		 push	 0
  003a0	50		 push	 eax
  003a1	51		 push	 ecx
  003a2	57		 push	 edi
  003a3	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  003a8	83 c4 0c	 add	 esp, 12			; 0000000cH
  003ab	52		 push	 edx
  003ac	50		 push	 eax
  003ad	e8 00 00 00 00	 call	 _InitProgressBar

; 2396 : 
; 2397 : 		nStatus = TCFormatVolume (volParams);

  003b2	56		 push	 esi
  003b3	e8 00 00 00 00	 call	 _TCFormatVolume
  003b8	83 c4 24	 add	 esp, 36			; 00000024H
$LN130@volTransfo:
  003bb	8b f8		 mov	 edi, eax
$LN50@volTransfo:

; 2398 : 	}
; 2399 : 
; 2400 : 	// Allow the OS to enter Sleep mode when idle
; 2401 : 	SetThreadExecutionState (ES_CONTINUOUS);

  003bd	68 00 00 00 80	 push	 -2147483648		; 80000000H
  003c2	ff d5		 call	 ebp

; 2402 : 
; 2403 : 	if (nStatus == ERR_OUTOFMEMORY)

  003c4	83 ff 02	 cmp	 edi, 2
  003c7	75 0d		 jne	 SHORT $LN49@volTransfo

; 2404 : 	{
; 2405 : 		AbortProcess ("OUTOFMEMORY");

  003c9	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@
  003ce	e8 00 00 00 00	 call	 _AbortProcess
  003d3	83 c4 04	 add	 esp, 4
$LN49@volTransfo:

; 2406 : 	}
; 2407 : 
; 2408 : 	if (bInPlaceEncNonSys
; 2409 : 		&& nStatus == ERR_USER_ABORT
; 2410 : 		&& NonSysInplaceEncStatus == NONSYS_INPLACE_ENC_STATUS_FINISHED)

  003d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  003dc	85 d2		 test	 edx, edx
  003de	74 11		 je	 SHORT $LN48@volTransfo
  003e0	83 ff 21	 cmp	 edi, 33			; 00000021H
  003e3	75 0c		 jne	 SHORT $LN48@volTransfo
  003e5	a1 00 00 00 00	 mov	 eax, DWORD PTR _NonSysInplaceEncStatus
  003ea	83 f8 06	 cmp	 eax, 6
  003ed	75 02		 jne	 SHORT $LN48@volTransfo

; 2411 : 	{
; 2412 : 		// Ignore user abort if non-system in-place encryption successfully finished
; 2413 : 		nStatus = ERR_SUCCESS;

  003ef	33 ff		 xor	 edi, edi
$LN48@volTransfo:

; 2414 : 	}
; 2415 : 
; 2416 : 
; 2417 : 	dwWin32FormatError = GetLastError ();

  003f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 2418 : 
; 2419 : 	if (bHiddenVolHost && !bVolTransformThreadCancel && nStatus == 0)

  003f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  003fd	8b e8		 mov	 ebp, eax
  003ff	85 c9		 test	 ecx, ecx
  00401	74 62		 je	 SHORT $LN45@volTransfo
  00403	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bVolTransformThreadCancel
  00409	85 d2		 test	 edx, edx
  0040b	75 58		 jne	 SHORT $LN45@volTransfo
  0040d	85 ff		 test	 edi, edi
  0040f	75 54		 jne	 SHORT $LN45@volTransfo

; 2420 : 	{
; 2421 : 		/* Auto mount the newly created hidden volume host */
; 2422 : 		switch (MountHiddenVolHost (hwndDlg, szDiskFile, &hiddenVolHostDriveNo, &volumePassword, FALSE))

  00411	57		 push	 edi
  00412	68 00 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A ; volumePassword
  00417	68 00 00 00 00	 push	 OFFSET ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  0041c	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  00421	53		 push	 ebx
  00422	e8 00 00 00 00	 call	 _MountHiddenVolHost
  00427	83 c4 14	 add	 esp, 20			; 00000014H
  0042a	83 e8 03	 sub	 eax, 3
  0042d	74 0e		 je	 SHORT $LN43@volTransfo
  0042f	83 e8 13	 sub	 eax, 19			; 00000013H
  00432	0f 84 a5 00 00
	00		 je	 $LN44@volTransfo
  00438	83 e8 02	 sub	 eax, 2
  0043b	75 28		 jne	 SHORT $LN45@volTransfo
$LN43@volTransfo:

; 2428 : 		case ERR_VOL_MOUNT_FAILED:
; 2429 : 		case ERR_PASSWORD_WRONG:
; 2430 : 			MessageBoxW (hwndDlg, GetString ("CANT_MOUNT_OUTER_VOL"), lpszTitle, ICON_HAND);

  0043d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lpszTitle
  00443	6a 10		 push	 16			; 00000010H
  00445	51		 push	 ecx
  00446	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@IAAAEIAJ@CANT_MOUNT_OUTER_VOL?$AA@
$LN131@volTransfo:
  0044b	e8 00 00 00 00	 call	 _GetString
  00450	83 c4 04	 add	 esp, 4
  00453	50		 push	 eax
  00454	53		 push	 ebx
  00455	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 2431 : 			bVolTransformThreadCancel = TRUE;

  0045b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bVolTransformThreadCancel, 1
$LN45@volTransfo:

; 2432 : 			break;
; 2433 : 		}
; 2434 : 	}
; 2435 : 
; 2436 : 	SetLastError (dwWin32FormatError);

  00465	55		 push	 ebp
  00466	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 2437 : 
; 2438 : 	if ((bVolTransformThreadCancel || nStatus == ERR_USER_ABORT)
; 2439 : 		&& !(bInPlaceEncNonSys && NonSysInplaceEncStatus == NONSYS_INPLACE_ENC_STATUS_FINISHED))	// Ignore user abort if non-system in-place encryption successfully finished.

  0046c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bVolTransformThreadCancel
  00472	85 d2		 test	 edx, edx
  00474	75 05		 jne	 SHORT $LN123@volTransfo
  00476	83 ff 21	 cmp	 edi, 33			; 00000021H
  00479	75 25		 jne	 SHORT $LN114@volTransfo
$LN123@volTransfo:
  0047b	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSys
  00480	85 c0		 test	 eax, eax
  00482	0f 84 7f 02 00
	00		 je	 $LN40@volTransfo
  00488	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _NonSysInplaceEncStatus
  0048e	83 f9 06	 cmp	 ecx, 6
  00491	0f 85 70 02 00
	00		 jne	 $LN40@volTransfo

; 2444 : 		}
; 2445 : 
; 2446 : 		goto cancel;
; 2447 : 	}
; 2448 : 
; 2449 : 	if (nStatus != ERR_USER_ABORT)

  00497	83 ff 21	 cmp	 edi, 33			; 00000021H
  0049a	0f 84 90 02 00
	00		 je	 $cancel$132487
$LN114@volTransfo:

; 2450 : 	{
; 2451 : 		if (nStatus != 0)

  004a0	33 ed		 xor	 ebp, ebp
  004a2	3b fd		 cmp	 edi, ebp
  004a4	0f 84 cf 00 00
	00		 je	 $LN35@volTransfo

; 2452 : 		{
; 2453 : 			/* An error occurred */
; 2454 : 
; 2455 : 			wchar_t szMsg[8192];
; 2456 : 
; 2457 : 			handleError (hwndDlg, nStatus);

  004aa	57		 push	 edi
  004ab	53		 push	 ebx
  004ac	e8 00 00 00 00	 call	 _handleError

; 2458 : 
; 2459 : 			if (bInPlaceEncNonSys)

  004b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  004b7	83 c4 08	 add	 esp, 8
  004ba	85 d2		 test	 edx, edx
  004bc	74 49		 je	 SHORT $LN34@volTransfo

; 2460 : 			{
; 2461 : 				if (bInPlaceEncNonSysResumed)

  004be	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSysResumed
  004c3	85 c0		 test	 eax, eax
  004c5	74 28		 je	 SHORT $LN33@volTransfo

; 2462 : 				{
; 2463 : 					SetNonSysInplaceEncUIStatus (NONSYS_INPLACE_ENC_STATUS_PAUSED);

  004c7	6a 05		 push	 5
  004c9	e8 00 00 00 00	 call	 _SetNonSysInplaceEncUIStatus

; 2464 : 					Error ("INPLACE_ENC_GENERIC_ERR_RESUME");

  004ce	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@CBCIBGL@INPLACE_ENC_GENERIC_ERR_RESUME?$AA@
  004d3	e8 00 00 00 00	 call	 _Error
  004d8	83 c4 08	 add	 esp, 8

; 2465 : 				}
; 2466 : 				else

  004db	eb 76		 jmp	 SHORT $LN124@volTransfo
$LN44@volTransfo:

; 2423 : 		{
; 2424 : 		case ERR_NO_FREE_DRIVES:
; 2425 : 			MessageBoxW (hwndDlg, GetString ("NO_FREE_DRIVE_FOR_OUTER_VOL"), lpszTitle, ICON_HAND);

  004dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  004e2	6a 10		 push	 16			; 00000010H
  004e4	50		 push	 eax
  004e5	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DNIPKEFC@NO_FREE_DRIVE_FOR_OUTER_VOL?$AA@

; 2426 : 			bVolTransformThreadCancel = TRUE;
; 2427 : 			break;

  004ea	e9 5c ff ff ff	 jmp	 $LN131@volTransfo
$LN33@volTransfo:

; 2467 : 				{
; 2468 : 					SetNonSysInplaceEncUIStatus (NONSYS_INPLACE_ENC_STATUS_ERROR);

  004ef	6a 07		 push	 7
  004f1	e8 00 00 00 00	 call	 _SetNonSysInplaceEncUIStatus

; 2469 : 					ShowInPlaceEncErrMsgWAltSteps ("INPLACE_ENC_GENERIC_ERR_ALT_STEPS", TRUE);

  004f6	6a 01		 push	 1
  004f8	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@GOJAHDJH@INPLACE_ENC_GENERIC_ERR_ALT_STEP@
  004fd	e8 00 00 00 00	 call	 _ShowInPlaceEncErrMsgWAltSteps
  00502	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2470 : 				}

  00505	eb 4c		 jmp	 SHORT $LN124@volTransfo
$LN34@volTransfo:

; 2471 : 			}
; 2472 : 			else if (!(bHiddenVolHost && hiddenVolHostDriveNo < 0))  // If the error was not that the hidden volume host could not be mounted (this error has already been reported to the user)

  00507	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  0050d	85 c9		 test	 ecx, ecx
  0050f	74 08		 je	 SHORT $LN29@volTransfo
  00511	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?hiddenVolHostDriveNo@@3HA, ebp ; hiddenVolHostDriveNo
  00517	7c 3a		 jl	 SHORT $LN124@volTransfo
$LN29@volTransfo:

; 2473 : 			{
; 2474 : 				swprintf (szMsg, GetString ("CREATE_FAILED"), szDiskFile);

  00519	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  0051e	68 00 00 00 00	 push	 OFFSET ??_C@_0O@OIAKNAOK@CREATE_FAILED?$AA@
  00523	e8 00 00 00 00	 call	 _GetString
  00528	83 c4 04	 add	 esp, 4
  0052b	50		 push	 eax
  0052c	8d 94 24 34 04
	00 00		 lea	 edx, DWORD PTR _szMsg$132551[esp+17464]
  00533	52		 push	 edx
  00534	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf

; 2475 : 				MessageBoxW (hwndDlg, szMsg, lpszTitle, ICON_HAND);

  00539	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  0053e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00541	6a 10		 push	 16			; 00000010H
  00543	50		 push	 eax
  00544	8d 8c 24 34 04
	00 00		 lea	 ecx, DWORD PTR _szMsg$132551[esp+17464]
  0054b	51		 push	 ecx
  0054c	53		 push	 ebx
  0054d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN124@volTransfo:

; 2476 : 			}
; 2477 : 
; 2478 : 			if (!bDevice && !(bHiddenVol && !bHiddenVolHost))	// If we're not creating a hidden volume and if it's a file container

  00553	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?bDevice@@3HA, ebp ; bDevice
  00559	0f 85 d1 01 00
	00		 jne	 $cancel$132487
  0055f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00565	85 d2		 test	 edx, edx
  00567	0f 84 b6 01 00
	00		 je	 $LN38@volTransfo
  0056d	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  00572	85 c0		 test	 eax, eax

; 2557 : 
; 2558 : cancel:

  00574	e9 a8 01 00 00	 jmp	 $LN132@volTransfo
$LN35@volTransfo:

; 2479 : 			{
; 2480 : 				remove (szDiskFile);		// Delete the container
; 2481 : 			}
; 2482 : 
; 2483 : 			goto cancel;
; 2484 : 		}
; 2485 : 		else
; 2486 : 		{
; 2487 : 			/* Volume successfully created */
; 2488 : 
; 2489 : 			RestoreDefaultKeyFilesParam ();

  00579	e8 00 00 00 00	 call	 _RestoreDefaultKeyFilesParam

; 2490 : 
; 2491 : 			if (bDevice && !bInPlaceEncNonSys)

  0057e	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?bDevice@@3HA, ebp ; bDevice
  00584	74 0f		 je	 SHORT $LN24@volTransfo
  00586	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  0058c	85 c9		 test	 ecx, ecx
  0058e	75 05		 jne	 SHORT $LN24@volTransfo

; 2492 : 			{
; 2493 : 				// Handle assigned drive letter (if any)
; 2494 : 
; 2495 : 				HandleOldAssignedDriveLetter ();

  00590	e8 00 00 00 00	 call	 _HandleOldAssignedDriveLetter
$LN24@volTransfo:

; 2496 : 			}
; 2497 : 
; 2498 : 			if (!bHiddenVolHost)

  00595	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  0059b	85 d2		 test	 edx, edx
  0059d	0f 85 83 00 00
	00		 jne	 $LN23@volTransfo

; 2499 : 			{
; 2500 : 				if (bHiddenVol)

  005a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  005a8	85 c0		 test	 eax, eax
  005aa	74 2a		 je	 SHORT $LN22@volTransfo

; 2501 : 				{
; 2502 : 					bHiddenVolFinished = TRUE;

  005ac	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bHiddenVolFinished@@3HC, 1 ; bHiddenVolFinished

; 2503 : 
; 2504 : 					if (!bHiddenOS)

  005b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  005bc	85 c9		 test	 ecx, ecx
  005be	0f 85 bb 00 00
	00		 jne	 $LN125@volTransfo

; 2505 : 						Warning ("HIDVOL_FORMAT_FINISHED_HELP");

  005c4	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NHKMKNFC@HIDVOL_FORMAT_FINISHED_HELP?$AA@
  005c9	e8 00 00 00 00	 call	 _Warning
  005ce	83 c4 04	 add	 esp, 4

; 2506 : 				}

  005d1	e9 a9 00 00 00	 jmp	 $LN125@volTransfo
$LN22@volTransfo:

; 2507 : 				else if (bInPlaceEncNonSys)

  005d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  005dc	85 d2		 test	 edx, edx
  005de	74 17		 je	 SHORT $LN19@volTransfo

; 2508 : 				{
; 2509 : 					Warning ("NONSYS_INPLACE_ENC_FINISHED_INFO");

  005e0	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@KOCBDKDK@NONSYS_INPLACE_ENC_FINISHED_INFO@
  005e5	e8 00 00 00 00	 call	 _Warning
  005ea	83 c4 04	 add	 esp, 4

; 2510 : 
; 2511 : 					HandleOldAssignedDriveLetter ();

  005ed	e8 00 00 00 00	 call	 _HandleOldAssignedDriveLetter

; 2512 : 				}
; 2513 : 				else 

  005f2	e9 88 00 00 00	 jmp	 $LN125@volTransfo
$LN19@volTransfo:

; 2514 : 				{
; 2515 : 					Info("FORMAT_FINISHED_INFO");

  005f7	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@ELGDKJEM@FORMAT_FINISHED_INFO?$AA@
  005fc	e8 00 00 00 00	 call	 _Info

; 2516 : 
; 2517 : 					if (bSparseFileSwitch && quickFormat)

  00601	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bSparseFileSwitch@@3HC ; bSparseFileSwitch
  00606	83 c4 04	 add	 esp, 4
  00609	85 c0		 test	 eax, eax
  0060b	74 72		 je	 SHORT $LN125@volTransfo
  0060d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?quickFormat@@3HC ; quickFormat
  00613	85 c9		 test	 ecx, ecx
  00615	74 68		 je	 SHORT $LN125@volTransfo

; 2518 : 						Warning("SPARSE_FILE_SIZE_NOTE");

  00617	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@PHMPDKJN@SPARSE_FILE_SIZE_NOTE?$AA@
  0061c	e8 00 00 00 00	 call	 _Warning
  00621	83 c4 04	 add	 esp, 4

; 2519 : 				}
; 2520 : 			}
; 2521 : 			else

  00624	eb 59		 jmp	 SHORT $LN125@volTransfo
$LN23@volTransfo:

; 2522 : 			{
; 2523 : 				/* We've just created an outer volume (to host a hidden volume within) */
; 2524 : 
; 2525 : 				bHiddenVolHost = FALSE; 
; 2526 : 				bHiddenVolFinished = FALSE;
; 2527 : 				nHiddenVolHostSize = nVolumeSize;

  00626	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeSize@@3_KA
  0062c	a1 04 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA+4

; 2528 : 
; 2529 : 				// Clear the outer volume password
; 2530 : 				memset(&szTmpPas[0], 0, sizeof (szTmpPas));

  00631	6a 41		 push	 65			; 00000041H
  00633	55		 push	 ebp
  00634	89 2d 00 00 00
	00		 mov	 DWORD PTR _bHiddenVolHost, ebp
  0063a	68 00 00 00 00	 push	 OFFSET ?szTmpPas@@3PADA	; szTmpPas
  0063f	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bHiddenVolFinished@@3HC, ebp ; bHiddenVolFinished
  00645	89 15 00 00 00
	00		 mov	 DWORD PTR ?nHiddenVolHostSize@@3_KA, edx
  0064b	a3 04 00 00 00	 mov	 DWORD PTR ?nHiddenVolHostSize@@3_KA+4, eax
  00650	e8 00 00 00 00	 call	 _memset

; 2531 : 				memset(&szVerify[0], 0, sizeof (szVerify));

  00655	68 82 00 00 00	 push	 130			; 00000082H
  0065a	55		 push	 ebp
  0065b	68 00 00 00 00	 push	 OFFSET ?szVerify@@3PA_WA ; szVerify
  00660	e8 00 00 00 00	 call	 _memset

; 2532 : 				memset(&szRawPassword[0], 0, sizeof (szRawPassword));

  00665	68 82 00 00 00	 push	 130			; 00000082H
  0066a	55		 push	 ebp
  0066b	68 00 00 00 00	 push	 OFFSET ?szRawPassword@@3PA_WA ; szRawPassword
  00670	e8 00 00 00 00	 call	 _memset
  00675	83 c4 24	 add	 esp, 36			; 00000024H

; 2533 : 
; 2534 : 				MessageBeep (MB_OK);

  00678	55		 push	 ebp
  00679	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBeep@4
$LN125@volTransfo:

; 2535 : 			}
; 2536 : 
; 2537 : 			if (!bInPlaceEncNonSys)

  0067f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  00685	85 c9		 test	 ecx, ecx
  00687	75 0f		 jne	 SHORT $LN15@volTransfo

; 2538 : 				SetTimer (hwndDlg, TIMER_ID_RANDVIEW, TIMER_INTERVAL_RANDVIEW, NULL);

  00689	55		 push	 ebp
  0068a	6a 1e		 push	 30			; 0000001eH
  0068c	68 ff 00 00 00	 push	 255			; 000000ffH
  00691	53		 push	 ebx
  00692	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16
$LN15@volTransfo:

; 2539 : 
; 2540 : 			if (volParams != NULL)
; 2541 : 			{
; 2542 : 				burn ((LPVOID) volParams, sizeof(FORMAT_VOL_PARAMETERS));

  00698	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  0069d	8b d6		 mov	 edx, esi
  0069f	8b f9		 mov	 edi, ecx
  006a1	8b c6		 mov	 eax, esi
$LL97@volTransfo:
  006a3	c6 00 00	 mov	 BYTE PTR [eax], 0
  006a6	40		 inc	 eax
  006a7	83 ef 01	 sub	 edi, 1
  006aa	75 f7		 jne	 SHORT $LL97@volTransfo
  006ac	8d 64 24 00	 npad	 4
$LL10@volTransfo:
  006b0	49		 dec	 ecx
  006b1	c6 02 00	 mov	 BYTE PTR [edx], 0
  006b4	42		 inc	 edx
  006b5	3b cd		 cmp	 ecx, ebp
  006b7	75 f7		 jne	 SHORT $LL10@volTransfo

; 2543 : 				VirtualUnlock ((LPVOID) volParams, sizeof(FORMAT_VOL_PARAMETERS));

  006b9	6a 50		 push	 80			; 00000050H
  006bb	56		 push	 esi
  006bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualUnlock@8

; 2544 : 				free ((LPVOID) volParams);

  006c2	56		 push	 esi
  006c3	e8 00 00 00 00	 call	 _free
  006c8	83 c4 04	 add	 esp, 4

; 2545 : 				volParams = NULL;
; 2546 : 			}
; 2547 : 
; 2548 : 			bVolTransformThreadRunning = FALSE;

  006cb	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bVolTransformThreadRunning@@3HC, ebp ; bVolTransformThreadRunning

; 2549 : 			bVolTransformThreadCancel = FALSE;

  006d1	89 2d 00 00 00
	00		 mov	 DWORD PTR _bVolTransformThreadCancel, ebp

; 2550 : 
; 2551 : 			PostMessage (hwndDlg, bInPlaceEncNonSys ? TC_APPMSG_NONSYS_INPLACE_ENC_FINISHED : TC_APPMSG_FORMAT_FINISHED, 0, 0);

  006d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  006dd	33 f6		 xor	 esi, esi
  006df	f7 da		 neg	 edx
  006e1	1b d2		 sbb	 edx, edx
  006e3	55		 push	 ebp
  006e4	83 e2 04	 and	 edx, 4
  006e7	55		 push	 ebp
  006e8	81 c2 2e 81 00
	00		 add	 edx, 33070		; 0000812eH
  006ee	52		 push	 edx
  006ef	53		 push	 ebx
  006f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 2552 : 
; 2553 : 			LastDialogId = "FORMAT_FINISHED";

  006f6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LastDialogId, OFFSET ??_C@_0BA@IDMMBDGF@FORMAT_FINISHED?$AA@

; 2554 : 			_endthread ();

  00700	e8 00 00 00 00	 call	 __endthread

; 2555 : 		}
; 2556 : 	}

  00705	eb 29		 jmp	 SHORT $cancel$132487
$LN40@volTransfo:

; 2440 : 	{
; 2441 : 		if (!bDevice && !(bHiddenVol && !bHiddenVolHost))	// If we're not creating a hidden volume and if it's a file container

  00707	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  0070e	75 20		 jne	 SHORT $cancel$132487
  00710	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00715	85 c0		 test	 eax, eax
  00717	74 0a		 je	 SHORT $LN38@volTransfo
  00719	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  0071f	85 c9		 test	 ecx, ecx
$LN132@volTransfo:
  00721	74 0d		 je	 SHORT $cancel$132487
$LN38@volTransfo:

; 2442 : 		{
; 2443 : 			remove (szDiskFile);		// Delete the container

  00723	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  00728	e8 00 00 00 00	 call	 _remove
  0072d	83 c4 04	 add	 esp, 4
$cancel$132487:

; 2559 : 
; 2560 : 	LastDialogId = (bInPlaceEncNonSys ? "NONSYS_INPLACE_ENC_CANCELED" : "FORMAT_CANCELED");

  00730	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  00736	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LastDialogId, OFFSET ??_C@_0BM@JKEOLKCL@NONSYS_INPLACE_ENC_CANCELED?$AA@
  00740	85 d2		 test	 edx, edx
  00742	75 0a		 jne	 SHORT $LN87@volTransfo
  00744	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LastDialogId, OFFSET ??_C@_0BA@NLOHJLIM@FORMAT_CANCELED?$AA@
$LN87@volTransfo:

; 2561 : 
; 2562 : 	if (!bInPlaceEncNonSys)

  0074e	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSys
  00753	85 c0		 test	 eax, eax
  00755	75 0f		 jne	 SHORT $LN126@volTransfo

; 2563 : 		SetTimer (hwndDlg, TIMER_ID_RANDVIEW, TIMER_INTERVAL_RANDVIEW, NULL);

  00757	50		 push	 eax
  00758	6a 1e		 push	 30			; 0000001eH
  0075a	68 ff 00 00 00	 push	 255			; 000000ffH
  0075f	53		 push	 ebx
  00760	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16
$LN126@volTransfo:

; 2564 : 
; 2565 : 	if (volParams != NULL)

  00766	33 ed		 xor	 ebp, ebp
  00768	3b f5		 cmp	 esi, ebp
  0076a	74 2f		 je	 SHORT $LN7@volTransfo

; 2566 : 	{
; 2567 : 		burn ((LPVOID) volParams, sizeof(FORMAT_VOL_PARAMETERS));

  0076c	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  00771	8b d6		 mov	 edx, esi
  00773	8b f9		 mov	 edi, ecx
  00775	8b c6		 mov	 eax, esi
$LL101@volTransfo:
  00777	c6 00 00	 mov	 BYTE PTR [eax], 0
  0077a	40		 inc	 eax
  0077b	83 ef 01	 sub	 edi, 1
  0077e	75 f7		 jne	 SHORT $LL101@volTransfo
$LL3@volTransfo:
  00780	49		 dec	 ecx
  00781	c6 02 00	 mov	 BYTE PTR [edx], 0
  00784	42		 inc	 edx
  00785	3b cd		 cmp	 ecx, ebp
  00787	75 f7		 jne	 SHORT $LL3@volTransfo

; 2568 : 		VirtualUnlock ((LPVOID) volParams, sizeof(FORMAT_VOL_PARAMETERS));

  00789	6a 50		 push	 80			; 00000050H
  0078b	56		 push	 esi
  0078c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualUnlock@8

; 2569 : 		free ((LPVOID) volParams);

  00792	56		 push	 esi
  00793	e8 00 00 00 00	 call	 _free
  00798	83 c4 04	 add	 esp, 4
$LN7@volTransfo:

; 2570 : 		volParams = NULL;
; 2571 : 	}
; 2572 : 
; 2573 : 	bVolTransformThreadRunning = FALSE;

  0079b	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bVolTransformThreadRunning@@3HC, ebp ; bVolTransformThreadRunning

; 2574 : 	bVolTransformThreadCancel = FALSE;

  007a1	89 2d 00 00 00
	00		 mov	 DWORD PTR _bVolTransformThreadCancel, ebp

; 2575 : 
; 2576 : 	// Allow the OS to enter Sleep mode when idle
; 2577 : 	SetThreadExecutionState (ES_CONTINUOUS);

  007a7	68 00 00 00 80	 push	 -2147483648		; 80000000H
  007ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetThreadExecutionState@4

; 2578 : 
; 2579 : 	PostMessage (hwndDlg, TC_APPMSG_VOL_TRANSFORM_THREAD_ENDED, 0, 0);

  007b2	55		 push	 ebp
  007b3	55		 push	 ebp
  007b4	68 2d 81 00 00	 push	 33069			; 0000812dH
  007b9	53		 push	 ebx
  007ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 2580 : 
; 2581 : 	if (bHiddenVolHost && hiddenVolHostDriveNo < -1 && !bVolTransformThreadCancel)	// If hidden volume host could not be mounted

  007c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  007c6	5f		 pop	 edi
  007c7	5e		 pop	 esi
  007c8	5d		 pop	 ebp
  007c9	5b		 pop	 ebx
  007ca	85 c9		 test	 ecx, ecx
  007cc	74 18		 je	 SHORT $LN1@volTransfo
  007ce	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?hiddenVolHostDriveNo@@3HA, -1 ; hiddenVolHostDriveNo
  007d5	7d 0f		 jge	 SHORT $LN1@volTransfo
  007d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bVolTransformThreadCancel
  007dd	85 d2		 test	 edx, edx
  007df	75 05		 jne	 SHORT $LN1@volTransfo

; 2582 : 		AbortProcessSilent ();

  007e1	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN1@volTransfo:

; 2583 : 
; 2584 : 	_endthread ();

  007e6	e8 00 00 00 00	 call	 __endthread

; 2585 : }

  007eb	8b 8c 24 1c 44
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+17440]
  007f2	33 cc		 xor	 ecx, esp
  007f4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007f9	81 c4 20 44 00
	00		 add	 esp, 17440		; 00004420H
  007ff	c3		 ret	 0
_volTransformThreadFunction ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@FCILOPDD@SECTOR_SIZE_UNSUPPORTED?$AA@	; `string'
PUBLIC	??_C@_0O@MKGMJGFE@EXT_PARTITION?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_QueryFreeSpace
EXTRN	_GetPartitionInfo:PROC
EXTRN	__imp__GetDiskFreeSpaceExA@16:PROC
EXTRN	__imp__GetVolumePathNameA@12:PROC
;	COMDAT ??_C@_0BI@FCILOPDD@SECTOR_SIZE_UNSUPPORTED?$AA@
CONST	SEGMENT
??_C@_0BI@FCILOPDD@SECTOR_SIZE_UNSUPPORTED?$AA@ DB 'SECTOR_SIZE_UNSUPPORT'
	DB	'ED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MKGMJGFE@EXT_PARTITION?$AA@
CONST	SEGMENT
??_C@_0O@MKGMJGFE@EXT_PARTITION?$AA@ DB 'EXT_PARTITION', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _QueryFreeSpace
_TEXT	SEGMENT
_lDiskFree$132982 = -612				; size = 8
_lDiskFree$132963 = -604				; size = 8
_free$132958 = -596					; size = 8
_lDiskFree$132952 = -588				; size = 8
_driveInfo$132966 = -580				; size = 24
_diskInfo$132967 = -556					; size = 32
_root$132957 = -524					; size = 260
_szTmp$132953 = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_hwndTextBox$ = 12					; size = 4
_display$ = 16						; size = 4
_QueryFreeSpace PROC					; COMDAT

; 3048 : {

  00000	81 ec 64 02 00
	00		 sub	 esp, 612		; 00000264H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 60 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+612], eax

; 3049 : 	if (bHiddenVol && !bHiddenVolHost)	// If it's a hidden volume

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00019	56		 push	 esi
  0001a	8b b4 24 6c 02
	00 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+612]
  00021	57		 push	 edi
  00022	8b bc 24 74 02
	00 00		 mov	 edi, DWORD PTR _hwndTextBox$[esp+616]
  00029	85 c0		 test	 eax, eax
  0002b	74 58		 je	 SHORT $LN20@QueryFreeS
  0002d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  00033	85 c9		 test	 ecx, ecx
  00035	75 4e		 jne	 SHORT $LN20@QueryFreeS

; 3050 : 	{
; 3051 : 		LARGE_INTEGER lDiskFree;
; 3052 : 		char szTmp[TC_MAX_PATH];
; 3053 : 
; 3054 : 		lDiskFree.QuadPart = nMaximumHiddenVolSize;

  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nMaximumHiddenVolSize@@3_JA
  0003d	a1 04 00 00 00	 mov	 eax, DWORD PTR ?nMaximumHiddenVolSize@@3_JA+4
  00042	89 54 24 20	 mov	 DWORD PTR _lDiskFree$132952[esp+620], edx
  00046	89 44 24 24	 mov	 DWORD PTR _lDiskFree$132952[esp+624], eax

; 3055 : 
; 3056 : 		if (display)

  0004a	39 8c 24 78 02
	00 00		 cmp	 DWORD PTR _display$[esp+616], ecx
  00051	74 16		 je	 SHORT $LN19@QueryFreeS

; 3057 : 			PrintFreeSpace (hwndTextBox, szTmp, &lDiskFree);

  00053	8d 4c 24 20	 lea	 ecx, DWORD PTR _lDiskFree$132952[esp+620]
  00057	51		 push	 ecx
  00058	8d 94 24 68 01
	00 00		 lea	 edx, DWORD PTR _szTmp$132953[esp+624]
  0005f	52		 push	 edx
  00060	57		 push	 edi
  00061	e8 00 00 00 00	 call	 _PrintFreeSpace
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN19@QueryFreeS:
  00069	5f		 pop	 edi

; 3058 : 
; 3059 : 		return TRUE;

  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	5e		 pop	 esi

; 3153 : 	}
; 3154 : }

  00070	8b 8c 24 60 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+612]
  00077	33 cc		 xor	 ecx, esp
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	81 c4 64 02 00
	00		 add	 esp, 612		; 00000264H
  00084	c3		 ret	 0
$LN20@QueryFreeS:

; 3060 : 	}
; 3061 : 	else if (bDevice == FALSE)

  00085	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  0008c	0f 85 cc 00 00
	00		 jne	 $LN17@QueryFreeS

; 3062 : 	{
; 3063 : 		char root[TC_MAX_PATH];
; 3064 : 		ULARGE_INTEGER free;
; 3065 : 
; 3066 : 		if (!GetVolumePathName (szFileName, root, sizeof (root)))

  00092	68 04 01 00 00	 push	 260			; 00000104H
  00097	8d 44 24 64	 lea	 eax, DWORD PTR _root$132957[esp+624]
  0009b	50		 push	 eax
  0009c	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumePathNameA@12
  000a7	85 c0		 test	 eax, eax
  000a9	75 22		 jne	 SHORT $LN16@QueryFreeS

; 3067 : 		{
; 3068 : 			handleWin32Error (hwndDlg);

  000ab	56		 push	 esi
  000ac	e8 00 00 00 00	 call	 _handleWin32Error
  000b1	83 c4 04	 add	 esp, 4
  000b4	5f		 pop	 edi

; 3069 : 			return FALSE;

  000b5	33 c0		 xor	 eax, eax
  000b7	5e		 pop	 esi

; 3153 : 	}
; 3154 : }

  000b8	8b 8c 24 60 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+612]
  000bf	33 cc		 xor	 ecx, esp
  000c1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c6	81 c4 64 02 00
	00		 add	 esp, 612		; 00000264H
  000cc	c3		 ret	 0
$LN16@QueryFreeS:

; 3070 : 		}
; 3071 : 
; 3072 : 		if (!GetDiskFreeSpaceEx (root, &free, 0, 0))

  000cd	6a 00		 push	 0
  000cf	6a 00		 push	 0
  000d1	8d 4c 24 20	 lea	 ecx, DWORD PTR _free$132958[esp+628]
  000d5	51		 push	 ecx
  000d6	8d 54 24 6c	 lea	 edx, DWORD PTR _root$132957[esp+632]
  000da	52		 push	 edx
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDiskFreeSpaceExA@16
  000e1	85 c0		 test	 eax, eax
  000e3	75 2c		 jne	 SHORT $LN15@QueryFreeS
$LN27@QueryFreeS:

; 3073 : 		{
; 3074 : 			if (display)

  000e5	83 bc 24 78 02
	00 00 00	 cmp	 DWORD PTR _display$[esp+616], 0
  000ed	74 09		 je	 SHORT $LN14@QueryFreeS

; 3075 : 				DisplaySizingErrorText (hwndTextBox);

  000ef	57		 push	 edi
  000f0	e8 00 00 00 00	 call	 _DisplaySizingErrorText
  000f5	83 c4 04	 add	 esp, 4
$LN14@QueryFreeS:
  000f8	5f		 pop	 edi

; 3076 : 
; 3077 : 			return FALSE;

  000f9	33 c0		 xor	 eax, eax
  000fb	5e		 pop	 esi

; 3153 : 	}
; 3154 : }

  000fc	8b 8c 24 60 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+612]
  00103	33 cc		 xor	 ecx, esp
  00105	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010a	81 c4 64 02 00
	00		 add	 esp, 612		; 00000264H
  00110	c3		 ret	 0
$LN15@QueryFreeS:

; 3078 : 		}
; 3079 : 		else
; 3080 : 		{
; 3081 : 			LARGE_INTEGER lDiskFree;
; 3082 : 			lDiskFree.QuadPart = free.QuadPart;
; 3083 : 
; 3084 : 			if (display)

  00111	83 bc 24 78 02
	00 00 00	 cmp	 DWORD PTR _display$[esp+616], 0
  00119	8b 44 24 18	 mov	 eax, DWORD PTR _free$132958[esp+620]
  0011d	8b 4c 24 1c	 mov	 ecx, DWORD PTR _free$132958[esp+624]
  00121	89 44 24 10	 mov	 DWORD PTR _lDiskFree$132963[esp+620], eax
  00125	89 4c 24 14	 mov	 DWORD PTR _lDiskFree$132963[esp+624], ecx
  00129	0f 84 3a ff ff
	ff		 je	 $LN19@QueryFreeS

; 3085 : 				PrintFreeSpace (hwndTextBox, root, &lDiskFree);

  0012f	8d 54 24 10	 lea	 edx, DWORD PTR _lDiskFree$132963[esp+620]
  00133	52		 push	 edx
  00134	8d 44 24 64	 lea	 eax, DWORD PTR _root$132957[esp+624]
  00138	50		 push	 eax
  00139	57		 push	 edi
  0013a	e8 00 00 00 00	 call	 _PrintFreeSpace
  0013f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00142	5f		 pop	 edi

; 3086 : 
; 3087 : 			return TRUE;

  00143	b8 01 00 00 00	 mov	 eax, 1
  00148	5e		 pop	 esi

; 3153 : 	}
; 3154 : }

  00149	8b 8c 24 60 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+612]
  00150	33 cc		 xor	 ecx, esp
  00152	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00157	81 c4 64 02 00
	00		 add	 esp, 612		; 00000264H
  0015d	c3		 ret	 0
$LN17@QueryFreeS:

; 3088 : 		}
; 3089 : 	}
; 3090 : 	else
; 3091 : 	{
; 3092 : 		DISK_GEOMETRY driveInfo;
; 3093 : 		PARTITION_INFORMATION diskInfo;
; 3094 : 		BOOL piValid = FALSE;
; 3095 : 		BOOL gValid = FALSE;
; 3096 : 
; 3097 : 		// Query partition size
; 3098 : 		piValid = GetPartitionInfo (szDiskFile, &diskInfo);

  0015e	8d 4c 24 40	 lea	 ecx, DWORD PTR _diskInfo$132967[esp+620]
  00162	51		 push	 ecx
  00163	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  00168	e8 00 00 00 00	 call	 _GetPartitionInfo

; 3099 : 		gValid = GetDriveGeometry (szDiskFile, &driveInfo);

  0016d	8d 54 24 30	 lea	 edx, DWORD PTR _driveInfo$132966[esp+628]
  00171	52		 push	 edx
  00172	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  00177	8b f0		 mov	 esi, eax
  00179	e8 00 00 00 00	 call	 _GetDriveGeometry
  0017e	83 c4 10	 add	 esp, 16			; 00000010H

; 3100 : 
; 3101 : 		if (!piValid && !gValid)

  00181	85 f6		 test	 esi, esi
  00183	75 08		 jne	 SHORT $LN10@QueryFreeS
  00185	85 c0		 test	 eax, eax

; 3102 : 		{
; 3103 : 			if (display)
; 3104 : 				DisplaySizingErrorText (hwndTextBox);
; 3105 : 
; 3106 : 			return FALSE;

  00187	0f 84 58 ff ff
	ff		 je	 $LN27@QueryFreeS
$LN10@QueryFreeS:

; 3107 : 		}
; 3108 : 
; 3109 : 		int sectorSize = GetFormatSectorSize();

  0018d	e8 00 00 00 00	 call	 _GetFormatSectorSize

; 3110 : 
; 3111 : 		if (sectorSize < TC_MIN_VOLUME_SECTOR_SIZE
; 3112 : 			|| sectorSize > TC_MAX_VOLUME_SECTOR_SIZE
; 3113 : 			|| sectorSize % ENCRYPTION_DATA_UNIT_SIZE != 0)

  00192	8d 88 00 fe ff
	ff		 lea	 ecx, DWORD PTR [eax-512]
  00198	81 f9 00 0e 00
	00		 cmp	 ecx, 3584		; 00000e00H
  0019e	0f 87 5b 01 00
	00		 ja	 $LN7@QueryFreeS
  001a4	25 ff 01 00 80	 and	 eax, -2147483137	; 800001ffH
  001a9	79 07		 jns	 SHORT $LN26@QueryFreeS
  001ab	48		 dec	 eax
  001ac	0d 00 fe ff ff	 or	 eax, -512		; fffffe00H
  001b1	40		 inc	 eax
$LN26@QueryFreeS:
  001b2	0f 85 47 01 00
	00		 jne	 $LN7@QueryFreeS
  001b8	53		 push	 ebx

; 3116 : 			return FALSE;
; 3117 : 		}
; 3118 : 
; 3119 : 		if (piValid)

  001b9	85 f6		 test	 esi, esi
  001bb	0f 84 9e 00 00
	00		 je	 $LN6@QueryFreeS

; 3120 : 		{
; 3121 : 			nVolumeSize = diskInfo.PartitionLength.QuadPart;
; 3122 : 
; 3123 : 			if(display)

  001c1	8b 9c 24 7c 02
	00 00		 mov	 ebx, DWORD PTR _display$[esp+620]
  001c8	8b 74 24 4c	 mov	 esi, DWORD PTR _diskInfo$132967[esp+632]
  001cc	8b 54 24 50	 mov	 edx, DWORD PTR _diskInfo$132967[esp+636]
  001d0	89 35 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, esi
  001d6	89 15 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, edx
  001dc	85 db		 test	 ebx, ebx
  001de	74 1e		 je	 SHORT $LN23@QueryFreeS

; 3124 : 				nMultiplier = PrintFreeSpace (hwndTextBox, szDiskFile, &diskInfo.PartitionLength);

  001e0	8d 44 24 4c	 lea	 eax, DWORD PTR _diskInfo$132967[esp+632]
  001e4	50		 push	 eax
  001e5	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  001ea	57		 push	 edi
  001eb	e8 00 00 00 00	 call	 _PrintFreeSpace
  001f0	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?nVolumeSize@@3_KA
  001f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f9	a3 00 00 00 00	 mov	 DWORD PTR ?nMultiplier@@3HA, eax ; nMultiplier
$LN23@QueryFreeS:

; 3125 : 
; 3126 : 			nUIVolumeSize = diskInfo.PartitionLength.QuadPart / nMultiplier;

  001fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nMultiplier@@3HA ; nMultiplier
  00203	8b 4c 24 50	 mov	 ecx, DWORD PTR _diskInfo$132967[esp+636]
  00207	99		 cdq
  00208	52		 push	 edx
  00209	8b 54 24 50	 mov	 edx, DWORD PTR _diskInfo$132967[esp+636]
  0020d	50		 push	 eax
  0020e	51		 push	 ecx
  0020f	52		 push	 edx
  00210	e8 00 00 00 00	 call	 __alldiv

; 3127 : 
; 3128 : 			if (nVolumeSize == 0)

  00215	0b 35 04 00 00
	00		 or	 esi, DWORD PTR ?nVolumeSize@@3_KA+4
  0021b	a3 00 00 00 00	 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, eax
  00220	89 15 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, edx
  00226	0f 85 b6 00 00
	00		 jne	 $LN2@QueryFreeS

; 3129 : 			{
; 3130 : 				if (display)

  0022c	85 db		 test	 ebx, ebx
  0022e	74 15		 je	 SHORT $LN3@QueryFreeS

; 3131 : 					SetWindowTextW (hwndTextBox, GetString ("EXT_PARTITION"));

  00230	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MKGMJGFE@EXT_PARTITION?$AA@
  00235	e8 00 00 00 00	 call	 _GetString
  0023a	83 c4 04	 add	 esp, 4
  0023d	50		 push	 eax
  0023e	57		 push	 edi
  0023f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
$LN3@QueryFreeS:
  00245	5b		 pop	 ebx
  00246	5f		 pop	 edi

; 3132 : 
; 3133 : 				return FALSE;

  00247	33 c0		 xor	 eax, eax
  00249	5e		 pop	 esi

; 3153 : 	}
; 3154 : }

  0024a	8b 8c 24 60 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+612]
  00251	33 cc		 xor	 ecx, esp
  00253	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00258	81 c4 64 02 00
	00		 add	 esp, 612		; 00000264H
  0025e	c3		 ret	 0
$LN6@QueryFreeS:

; 3134 : 			}
; 3135 : 		}
; 3136 : 		else
; 3137 : 		{
; 3138 : 			LARGE_INTEGER lDiskFree;
; 3139 : 
; 3140 : 			// Drive geometry info is used only when GetPartitionInfo() fails
; 3141 : 			lDiskFree.QuadPart = driveInfo.Cylinders.QuadPart * driveInfo.BytesPerSector *
; 3142 : 				driveInfo.SectorsPerTrack * driveInfo.TracksPerCylinder;

  0025f	8b 44 24 38	 mov	 eax, DWORD PTR _driveInfo$132966[esp+636]
  00263	f7 64 24 3c	 mul	 DWORD PTR _driveInfo$132966[esp+640]
  00267	8b 4c 24 40	 mov	 ecx, DWORD PTR _driveInfo$132966[esp+644]
  0026b	6a 00		 push	 0
  0026d	51		 push	 ecx
  0026e	52		 push	 edx
  0026f	50		 push	 eax
  00270	e8 00 00 00 00	 call	 __allmul
  00275	8b 4c 24 30	 mov	 ecx, DWORD PTR _driveInfo$132966[esp+628]
  00279	51		 push	 ecx
  0027a	8b 4c 24 30	 mov	 ecx, DWORD PTR _driveInfo$132966[esp+628]
  0027e	51		 push	 ecx
  0027f	52		 push	 edx
  00280	50		 push	 eax
  00281	e8 00 00 00 00	 call	 __allmul

; 3143 : 
; 3144 : 			nVolumeSize = lDiskFree.QuadPart;
; 3145 : 
; 3146 : 			if (display)

  00286	83 bc 24 7c 02
	00 00 00	 cmp	 DWORD PTR _display$[esp+620], 0
  0028e	8b f0		 mov	 esi, eax
  00290	8b ca		 mov	 ecx, edx
  00292	89 74 24 0c	 mov	 DWORD PTR _lDiskFree$132982[esp+624], esi
  00296	89 4c 24 10	 mov	 DWORD PTR _lDiskFree$132982[esp+628], ecx
  0029a	89 35 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, esi
  002a0	89 0d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ecx
  002a6	74 20		 je	 SHORT $LN24@QueryFreeS

; 3147 : 				nMultiplier = PrintFreeSpace (hwndTextBox, szDiskFile, &lDiskFree);

  002a8	8d 54 24 0c	 lea	 edx, DWORD PTR _lDiskFree$132982[esp+624]
  002ac	52		 push	 edx
  002ad	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  002b2	57		 push	 edi
  002b3	e8 00 00 00 00	 call	 _PrintFreeSpace
  002b8	8b 4c 24 1c	 mov	 ecx, DWORD PTR _lDiskFree$132982[esp+640]
  002bc	8b 74 24 18	 mov	 esi, DWORD PTR _lDiskFree$132982[esp+636]
  002c0	83 c4 0c	 add	 esp, 12			; 0000000cH
  002c3	a3 00 00 00 00	 mov	 DWORD PTR ?nMultiplier@@3HA, eax ; nMultiplier
$LN24@QueryFreeS:

; 3148 : 
; 3149 : 			nUIVolumeSize = lDiskFree.QuadPart / nMultiplier;

  002c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nMultiplier@@3HA ; nMultiplier
  002cd	99		 cdq
  002ce	52		 push	 edx
  002cf	50		 push	 eax
  002d0	51		 push	 ecx
  002d1	56		 push	 esi
  002d2	e8 00 00 00 00	 call	 __alldiv
  002d7	a3 00 00 00 00	 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, eax
  002dc	89 15 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, edx
$LN2@QueryFreeS:
  002e2	5b		 pop	 ebx
  002e3	5f		 pop	 edi

; 3150 : 		}
; 3151 : 
; 3152 : 		return TRUE;

  002e4	b8 01 00 00 00	 mov	 eax, 1
  002e9	5e		 pop	 esi

; 3153 : 	}
; 3154 : }

  002ea	8b 8c 24 60 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+612]
  002f1	33 cc		 xor	 ecx, esp
  002f3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002f8	81 c4 64 02 00
	00		 add	 esp, 612		; 00000264H
  002fe	c3		 ret	 0
$LN7@QueryFreeS:

; 3114 : 		{
; 3115 : 			Error ("SECTOR_SIZE_UNSUPPORTED");

  002ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FCILOPDD@SECTOR_SIZE_UNSUPPORTED?$AA@
  00304	e8 00 00 00 00	 call	 _Error

; 3153 : 	}
; 3154 : }

  00309	8b 8c 24 6c 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+624]
  00310	83 c4 04	 add	 esp, 4
  00313	5f		 pop	 edi
  00314	5e		 pop	 esi
  00315	33 cc		 xor	 ecx, esp
  00317	33 c0		 xor	 eax, eax
  00319	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0031e	81 c4 64 02 00
	00		 add	 esp, 612		; 00000264H
  00324	c3		 ret	 0
_QueryFreeSpace ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?FileSize4GBLimitQuestionNeeded@@YAHXZ
_TEXT	SEGMENT
?FileSize4GBLimitQuestionNeeded@@YAHXZ PROC		; FileSize4GBLimitQuestionNeeded, COMDAT

; 3291 : 	uint64 dataAreaSize = GetVolumeDataAreaSize (bHiddenVol && !bHiddenVolHost, nVolumeSize);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00005	85 c0		 test	 eax, eax
  00007	74 0f		 je	 SHORT $LN3@FileSize4G
  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  0000f	85 c9		 test	 ecx, ecx
  00011	75 05		 jne	 SHORT $LN3@FileSize4G
  00013	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00016	eb 02		 jmp	 SHORT $LN4@FileSize4G
$LN3@FileSize4G:
  00018	33 c0		 xor	 eax, eax
$LN4@FileSize4G:
  0001a	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeSize@@3_KA+4
  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nVolumeSize@@3_KA
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	52		 push	 edx
  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  00030	8b f2		 mov	 esi, edx
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	8b f8		 mov	 edi, eax

; 3292 : 
; 3293 : 	return (dataAreaSize > 4 * BYTES_PER_GB + TC_MIN_FAT_FS_SIZE
; 3294 : 		&& dataAreaSize <= TC_MAX_FAT_SECTOR_COUNT * GetFormatSectorSize());

  00037	83 fe 01	 cmp	 esi, 1
  0003a	72 2d		 jb	 SHORT $LN5@FileSize4G
  0003c	77 08		 ja	 SHORT $LN7@FileSize4G
  0003e	81 ff 00 90 00
	00		 cmp	 edi, 36864		; 00009000H
  00044	76 23		 jbe	 SHORT $LN5@FileSize4G
$LN7@FileSize4G:
  00046	e8 00 00 00 00	 call	 _GetFormatSectorSize
  0004b	6a 01		 push	 1
  0004d	99		 cdq
  0004e	6a 00		 push	 0
  00050	52		 push	 edx
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 __allmul
  00057	3b f2		 cmp	 esi, edx
  00059	77 0e		 ja	 SHORT $LN5@FileSize4G
  0005b	72 04		 jb	 SHORT $LN8@FileSize4G
  0005d	3b f8		 cmp	 edi, eax
  0005f	77 08		 ja	 SHORT $LN5@FileSize4G
$LN8@FileSize4G:
  00061	5f		 pop	 edi
  00062	b8 01 00 00 00	 mov	 eax, 1
  00067	5e		 pop	 esi

; 3295 : }

  00068	c3		 ret	 0
$LN5@FileSize4G:
  00069	5f		 pop	 edi

; 3292 : 
; 3293 : 	return (dataAreaSize > 4 * BYTES_PER_GB + TC_MIN_FAT_FS_SIZE
; 3294 : 		&& dataAreaSize <= TC_MAX_FAT_SECTOR_COUNT * GetFormatSectorSize());

  0006a	33 c0		 xor	 eax, eax
  0006c	5e		 pop	 esi

; 3295 : }

  0006d	c3		 ret	 0
?FileSize4GBLimitQuestionNeeded@@YAHXZ ENDP		; FileSize4GBLimitQuestionNeeded
_TEXT	ENDS
PUBLIC	??_C@_0CG@DBCOIOLF@ERR_HIDDEN_VOL_HOST_ENCRYPTED_IN@ ; `string'
PUBLIC	??_C@_0CE@PMECNFFM@HIDDEN_VOL_HOST_UNSUPPORTED_FILE@ ; `string'
PUBLIC	??_C@_0BI@JLECLIC@CANT_GET_OUTER_VOL_INFO?$AA@	; `string'
PUBLIC	??_C@_0BF@GKHHEFAE@HIDDEN_VOL_HOST_NTFS?$AA@	; `string'
PUBLIC	??_C@_0CM@PCAIDDLK@HIDDEN_VOL_HOST_UNSUPPORTED_FILE@ ; `string'
PUBLIC	??_C@_04HPPAIJNK@NTFS?$AA@			; `string'
PUBLIC	??_C@_03MPELFIKF@FAT?$AA@			; `string'
PUBLIC	??_C@_0BN@PEDIFLNF@ERR_HIDDEN_NOT_NORMAL_VOLUME?$AA@ ; `string'
PUBLIC	??_C@_0BD@GJIBONDI@ERR_VOL_FORMAT_BAD?$AA@	; `string'
PUBLIC	_realClusterSize$GSCopy$
PUBLIC	_pnbrFreeClusters$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_AnalyzeHiddenVolumeHost
EXTRN	_CloseVolumeExplorerWindows:PROC
EXTRN	__imp__GetDiskFreeSpaceA@20:PROC
EXTRN	_nCurrentOS:DWORD
EXTRN	_strncmp:PROC
EXTRN	__imp__GetVolumeInformationA@32:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__SetFilePointerEx@20:PROC
EXTRN	_hDriver:DWORD
;	COMDAT ??_C@_0CG@DBCOIOLF@ERR_HIDDEN_VOL_HOST_ENCRYPTED_IN@
CONST	SEGMENT
??_C@_0CG@DBCOIOLF@ERR_HIDDEN_VOL_HOST_ENCRYPTED_IN@ DB 'ERR_HIDDEN_VOL_H'
	DB	'OST_ENCRYPTED_INPLACE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@PMECNFFM@HIDDEN_VOL_HOST_UNSUPPORTED_FILE@
CONST	SEGMENT
??_C@_0CE@PMECNFFM@HIDDEN_VOL_HOST_UNSUPPORTED_FILE@ DB 'HIDDEN_VOL_HOST_'
	DB	'UNSUPPORTED_FILESYS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JLECLIC@CANT_GET_OUTER_VOL_INFO?$AA@
CONST	SEGMENT
??_C@_0BI@JLECLIC@CANT_GET_OUTER_VOL_INFO?$AA@ DB 'CANT_GET_OUTER_VOL_INF'
	DB	'O', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GKHHEFAE@HIDDEN_VOL_HOST_NTFS?$AA@
CONST	SEGMENT
??_C@_0BF@GKHHEFAE@HIDDEN_VOL_HOST_NTFS?$AA@ DB 'HIDDEN_VOL_HOST_NTFS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@PCAIDDLK@HIDDEN_VOL_HOST_UNSUPPORTED_FILE@
CONST	SEGMENT
??_C@_0CM@PCAIDDLK@HIDDEN_VOL_HOST_UNSUPPORTED_FILE@ DB 'HIDDEN_VOL_HOST_'
	DB	'UNSUPPORTED_FILESYS_WIN2000', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HPPAIJNK@NTFS?$AA@
CONST	SEGMENT
??_C@_04HPPAIJNK@NTFS?$AA@ DB 'NTFS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03MPELFIKF@FAT?$AA@
CONST	SEGMENT
??_C@_03MPELFIKF@FAT?$AA@ DB 'FAT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PEDIFLNF@ERR_HIDDEN_NOT_NORMAL_VOLUME?$AA@
CONST	SEGMENT
??_C@_0BN@PEDIFLNF@ERR_HIDDEN_NOT_NORMAL_VOLUME?$AA@ DB 'ERR_HIDDEN_NOT_N'
	DB	'ORMAL_VOLUME', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GJIBONDI@ERR_VOL_FORMAT_BAD?$AA@
CONST	SEGMENT
??_C@_0BD@GJIBONDI@ERR_VOL_FORMAT_BAD?$AA@ DB 'ERR_VOL_FORMAT_BAD', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _AnalyzeHiddenVolumeHost
_TEXT	SEGMENT
_szRootPathName$ = -9108				; size = 4
_pnbrFreeClusters$GSCopy$ = -9104			; size = 4
_dwResult$ = -9100					; size = 4
_dwBytesPerSector$ = -9096				; size = 4
_dwSectorsPerCluster$ = -9092				; size = 4
_realClusterSize$GSCopy$ = -9088			; size = 4
_dwTotalNumberOfClusters$ = -9084			; size = 4
tv349 = -9080						; size = 8
_dwNumberOfFreeClusters$ = -9072			; size = 4
_bytesReturned$ = -9068					; size = 4
_offsetNew$ = -9064					; size = 8
_volProp$ = -9056					; size = 596
_tmpPath$ = -8460					; size = 7
_szFileSystemNameBuffer$ = -8452			; size = 256
_readBuffer$ = -8196					; size = 8192
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_driveNo$ = 12						; size = 4
_hiddenVolHostSize$ = 16				; size = 8
_realClusterSize$ = 24					; size = 4
_pnbrFreeClusters$ = 28					; size = 4
_AnalyzeHiddenVolumeHost PROC				; COMDAT

; 8123 : {

  00000	b8 94 23 00 00	 mov	 eax, 9108		; 00002394H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 90 23
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+9108], eax

; 8267 : 
; 8268 : 	return -1;

  00018	8b 84 24 ac 23
	00 00		 mov	 eax, DWORD PTR _pnbrFreeClusters$[esp+9104]
  0001f	53		 push	 ebx
  00020	8b 9c 24 ac 23
	00 00		 mov	 ebx, DWORD PTR _realClusterSize$[esp+9108]
  00027	55		 push	 ebp
  00028	8b ac 24 a0 23
	00 00		 mov	 ebp, DWORD PTR _hwndDlg$[esp+9112]
  0002f	56		 push	 esi
  00030	8b b4 24 a8 23
	00 00		 mov	 esi, DWORD PTR _driveNo$[esp+9116]
  00037	b1 5c		 mov	 cl, 92			; 0000005cH
  00039	57		 push	 edi
  0003a	89 44 24 14	 mov	 DWORD PTR _pnbrFreeClusters$GSCopy$[esp+9124], eax
  0003e	8a 06		 mov	 al, BYTE PTR [esi]
  00040	68 54 02 00 00	 push	 596			; 00000254H
  00045	88 8c 24 9c 02
	00 00		 mov	 BYTE PTR _tmpPath$[esp+9128], cl
  0004c	88 8c 24 9d 02
	00 00		 mov	 BYTE PTR _tmpPath$[esp+9129], cl
  00053	88 8c 24 9f 02
	00 00		 mov	 BYTE PTR _tmpPath$[esp+9131], cl
  0005a	88 4c 24 16	 mov	 BYTE PTR _szRootPathName$[esp+9130], cl
  0005e	04 41		 add	 al, 65			; 00000041H
  00060	b2 3a		 mov	 dl, 58			; 0000003aH
  00062	8d 4c 24 48	 lea	 ecx, DWORD PTR _volProp$[esp+9128]
  00066	6a 00		 push	 0
  00068	51		 push	 ecx
  00069	89 5c 24 30	 mov	 DWORD PTR _realClusterSize$GSCopy$[esp+9136], ebx
  0006d	c6 84 24 a6 02
	00 00 2e	 mov	 BYTE PTR _tmpPath$[esp+9138], 46 ; 0000002eH
  00075	88 84 24 a8 02
	00 00		 mov	 BYTE PTR _tmpPath$[esp+9140], al
  0007c	88 94 24 a9 02
	00 00		 mov	 BYTE PTR _tmpPath$[esp+9141], dl
  00083	c6 84 24 aa 02
	00 00 00	 mov	 BYTE PTR _tmpPath$[esp+9142], 0
  0008b	88 44 24 1c	 mov	 BYTE PTR _szRootPathName$[esp+9136], al
  0008f	88 54 24 1d	 mov	 BYTE PTR _szRootPathName$[esp+9137], dl
  00093	c6 44 24 1f 00	 mov	 BYTE PTR _szRootPathName$[esp+9139], 0
  00098	e8 00 00 00 00	 call	 _memset
  0009d	8b 16		 mov	 edx, DWORD PTR [esi]
  0009f	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a2	6a 00		 push	 0
  000a4	8d 44 24 1c	 lea	 eax, DWORD PTR _dwResult$[esp+9128]
  000a8	50		 push	 eax
  000a9	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDriver
  000ae	68 54 02 00 00	 push	 596			; 00000254H
  000b3	8d 4c 24 50	 lea	 ecx, DWORD PTR _volProp$[esp+9136]
  000b7	51		 push	 ecx
  000b8	68 54 02 00 00	 push	 596			; 00000254H
  000bd	89 54 24 58	 mov	 DWORD PTR _volProp$[esp+9144], edx
  000c1	8b d1		 mov	 edx, ecx
  000c3	52		 push	 edx
  000c4	68 1c 20 22 00	 push	 2236444			; 0022201cH
  000c9	50		 push	 eax
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  000d0	85 c0		 test	 eax, eax
  000d2	0f 84 11 03 00
	00		 je	 $LN21@AnalyzeHid

; 8124 : 	HANDLE hDevice;
; 8125 : 	DWORD bytesReturned;
; 8126 : 	DWORD dwSectorsPerCluster, dwBytesPerSector, dwNumberOfFreeClusters, dwTotalNumberOfClusters;
; 8127 : 	DWORD dwResult;
; 8128 : 	int result;
; 8129 : 	char szFileSystemNameBuffer[256];
; 8130 : 	char tmpPath[7] = {'\\','\\','.','\\',(char) *driveNo + 'A',':',0};
; 8131 : 	char szRootPathName[4] = {(char) *driveNo + 'A', ':', '\\', 0};
; 8132 : 	BYTE readBuffer[TC_MAX_VOLUME_SECTOR_SIZE * 2];
; 8133 : 	LARGE_INTEGER offset, offsetNew;
; 8134 : 	VOLUME_PROPERTIES_STRUCT volProp;
; 8135 : 
; 8136 : 	memset (&volProp, 0, sizeof(volProp));
; 8137 : 	volProp.driveNo = *driveNo;
; 8138 : 	if (!DeviceIoControl (hDriver, TC_IOCTL_GET_VOLUME_PROPERTIES, &volProp, sizeof (volProp), &volProp, sizeof (volProp), &dwResult, NULL) || dwResult == 0)

  000d8	83 7c 24 18 00	 cmp	 DWORD PTR _dwResult$[esp+9124], 0
  000dd	0f 84 06 03 00
	00		 je	 $LN21@AnalyzeHid

; 8142 : 		goto efsf_error;
; 8143 : 	}
; 8144 : 
; 8145 : 	if (volProp.volFormatVersion < TC_VOLUME_FORMAT_VERSION)

  000e3	83 bc 24 94 02
	00 00 02	 cmp	 DWORD PTR _volProp$[esp+9716], 2
  000eb	7d 14		 jge	 SHORT $LN19@AnalyzeHid

; 8146 : 	{
; 8147 : 		// We do not support creating hidden volumes within volumes created by TrueCrypt 5.1a or earlier.
; 8148 : 		Error ("ERR_VOL_FORMAT_BAD");

  000ed	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GJIBONDI@ERR_VOL_FORMAT_BAD?$AA@
  000f2	e8 00 00 00 00	 call	 _Error
  000f7	83 c4 04	 add	 esp, 4

; 8149 : 		return 0;

  000fa	33 c0		 xor	 eax, eax
  000fc	e9 0a 03 00 00	 jmp	 $LN23@AnalyzeHid
$LN19@AnalyzeHid:

; 8150 : 	}
; 8151 : 
; 8152 : 	if (volProp.hiddenVolume)

  00101	83 bc 24 6c 02
	00 00 00	 cmp	 DWORD PTR _volProp$[esp+9676], 0
  00109	74 14		 je	 SHORT $LN18@AnalyzeHid

; 8153 : 	{
; 8154 : 		// The user entered a password for a hidden volume
; 8155 : 		Error ("ERR_HIDDEN_NOT_NORMAL_VOLUME");

  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@PEDIFLNF@ERR_HIDDEN_NOT_NORMAL_VOLUME?$AA@
  00110	e8 00 00 00 00	 call	 _Error
  00115	83 c4 04	 add	 esp, 4

; 8156 : 		return 0;

  00118	33 c0		 xor	 eax, eax
  0011a	e9 ec 02 00 00	 jmp	 $LN23@AnalyzeHid
$LN18@AnalyzeHid:

; 8157 : 	}
; 8158 : 
; 8159 : 	if (volProp.volumeHeaderFlags & TC_HEADER_FLAG_NONSYS_INPLACE_ENC
; 8160 : 		|| volProp.volumeHeaderFlags & TC_HEADER_FLAG_ENCRYPTED_SYSTEM)

  0011f	f6 84 24 7c 02
	00 00 03	 test	 BYTE PTR _volProp$[esp+9692], 3
  00127	0f 85 ab 02 00
	00		 jne	 $LN16@AnalyzeHid

; 8164 : 	}
; 8165 : 
; 8166 : 	hDevice = CreateFile (tmpPath, GENERIC_READ, FILE_SHARE_READ|FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  0012d	6a 00		 push	 0
  0012f	6a 00		 push	 0
  00131	6a 03		 push	 3
  00133	6a 00		 push	 0
  00135	6a 03		 push	 3
  00137	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0013c	8d 8c 24 b0 02
	00 00		 lea	 ecx, DWORD PTR _tmpPath$[esp+9148]
  00143	51		 push	 ecx
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0014a	8b f8		 mov	 edi, eax

; 8167 : 
; 8168 : 	if (hDevice == INVALID_HANDLE_VALUE)

  0014c	83 ff ff	 cmp	 edi, -1
  0014f	75 23		 jne	 SHORT $LN15@AnalyzeHid

; 8169 : 	{
; 8170 : 		MessageBoxW (hwndDlg, GetString ("CANT_ACCESS_OUTER_VOL"), lpszTitle, ICON_HAND);

  00151	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  00157	6a 10		 push	 16			; 00000010H
  00159	52		 push	 edx
  0015a	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EDMDLNEK@CANT_ACCESS_OUTER_VOL?$AA@
  0015f	e8 00 00 00 00	 call	 _GetString
  00164	83 c4 04	 add	 esp, 4
  00167	50		 push	 eax
  00168	55		 push	 ebp
  00169	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 8264 : 
; 8265 : efsf_error:

  0016f	e9 88 02 00 00	 jmp	 $efsf_error$135093
$LN15@AnalyzeHid:

; 8171 : 		goto efsf_error;
; 8172 : 	}
; 8173 : 
; 8174 : 	offset.QuadPart = 0;

  00174	33 c9		 xor	 ecx, ecx

; 8175 : 
; 8176 : 	if (SetFilePointerEx (hDevice, offset, &offsetNew, FILE_BEGIN) == 0)

  00176	51		 push	 ecx
  00177	8d 54 24 40	 lea	 edx, DWORD PTR _offsetNew$[esp+9128]
  0017b	52		 push	 edx
  0017c	51		 push	 ecx
  0017d	33 c0		 xor	 eax, eax
  0017f	50		 push	 eax
  00180	57		 push	 edi
  00181	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointerEx@20
  00187	85 c0		 test	 eax, eax
  00189	75 15		 jne	 SHORT $LN13@AnalyzeHid

; 8177 : 	{
; 8178 : 		handleWin32Error (hwndDlg);

  0018b	55		 push	 ebp
  0018c	e8 00 00 00 00	 call	 _handleWin32Error
  00191	83 c4 04	 add	 esp, 4

; 8260 : 	}
; 8261 : 
; 8262 : efs_error:
; 8263 : 	CloseHandle (hDevice);

  00194	57		 push	 edi
  00195	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  0019b	e9 5c 02 00 00	 jmp	 $efsf_error$135093
$LN13@AnalyzeHid:

; 8179 : 		goto efs_error;
; 8180 : 	}
; 8181 : 
; 8182 : 	result = ReadFile (hDevice, &readBuffer, TC_MAX_VOLUME_SECTOR_SIZE, &bytesReturned, NULL);

  001a0	6a 00		 push	 0
  001a2	8d 44 24 3c	 lea	 eax, DWORD PTR _bytesReturned$[esp+9128]
  001a6	50		 push	 eax
  001a7	68 00 10 00 00	 push	 4096			; 00001000H
  001ac	8d 8c 24 ac 03
	00 00		 lea	 ecx, DWORD PTR _readBuffer$[esp+9136]
  001b3	51		 push	 ecx
  001b4	57		 push	 edi
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20

; 8183 : 
; 8184 : 	if (result == 0)

  001bb	85 c0		 test	 eax, eax
  001bd	75 33		 jne	 SHORT $LN11@AnalyzeHid

; 8185 : 	{
; 8186 : 		handleWin32Error (hwndDlg);

  001bf	55		 push	 ebp
  001c0	e8 00 00 00 00	 call	 _handleWin32Error

; 8187 : 		MessageBoxW (hwndDlg, GetString ("CANT_ACCESS_OUTER_VOL"), lpszTitle, ICON_HAND);

  001c5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  001cb	83 c4 04	 add	 esp, 4
  001ce	6a 10		 push	 16			; 00000010H
  001d0	52		 push	 edx
  001d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EDMDLNEK@CANT_ACCESS_OUTER_VOL?$AA@
  001d6	e8 00 00 00 00	 call	 _GetString
  001db	83 c4 04	 add	 esp, 4
  001de	50		 push	 eax
  001df	55		 push	 ebp
  001e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 8260 : 	}
; 8261 : 
; 8262 : efs_error:
; 8263 : 	CloseHandle (hDevice);

  001e6	57		 push	 edi
$efs_error$135107:
  001e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  001ed	e9 0a 02 00 00	 jmp	 $efsf_error$135093
$LN11@AnalyzeHid:

; 8188 : 		goto efs_error;
; 8189 : 	}
; 8190 : 
; 8191 : 	CloseHandle (hDevice);

  001f2	57		 push	 edi
  001f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 8192 : 	hDevice = INVALID_HANDLE_VALUE;
; 8193 : 
; 8194 : 	// Determine file system type
; 8195 : 
; 8196 : 	GetVolumeInformation(szRootPathName, NULL, 0, NULL, NULL, NULL, szFileSystemNameBuffer, sizeof(szFileSystemNameBuffer));

  001f9	68 00 01 00 00	 push	 256			; 00000100H
  001fe	8d 84 24 a4 02
	00 00		 lea	 eax, DWORD PTR _szFileSystemNameBuffer$[esp+9128]
  00205	50		 push	 eax
  00206	6a 00		 push	 0
  00208	6a 00		 push	 0
  0020a	6a 00		 push	 0
  0020c	6a 00		 push	 0
  0020e	6a 00		 push	 0
  00210	8d 4c 24 2c	 lea	 ecx, DWORD PTR _szRootPathName$[esp+9152]
  00214	51		 push	 ecx
  00215	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumeInformationA@32

; 8197 : 
; 8198 : 	// The Windows API sometimes fails to indentify the file system correctly so we're using "raw" analysis too.
; 8199 : 	if (!strncmp (szFileSystemNameBuffer, "FAT", 3)
; 8200 : 		|| (readBuffer[0x36] == 'F' && readBuffer[0x37] == 'A' && readBuffer[0x38] == 'T')
; 8201 : 		|| (readBuffer[0x52] == 'F' && readBuffer[0x53] == 'A' && readBuffer[0x54] == 'T'))

  0021b	6a 03		 push	 3
  0021d	8d 94 24 a4 02
	00 00		 lea	 edx, DWORD PTR _szFileSystemNameBuffer$[esp+9128]
  00224	68 00 00 00 00	 push	 OFFSET ??_C@_03MPELFIKF@FAT?$AA@
  00229	52		 push	 edx
  0022a	e8 00 00 00 00	 call	 _strncmp
  0022f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00232	85 c0		 test	 eax, eax
  00234	0f 84 51 01 00
	00		 je	 $LN8@AnalyzeHid
  0023a	b0 46		 mov	 al, 70			; 00000046H
  0023c	b1 54		 mov	 cl, 84			; 00000054H
  0023e	38 84 24 d6 03
	00 00		 cmp	 BYTE PTR _readBuffer$[esp+9178], al
  00245	75 17		 jne	 SHORT $LN7@AnalyzeHid
  00247	80 bc 24 d7 03
	00 00 41	 cmp	 BYTE PTR _readBuffer$[esp+9179], 65 ; 00000041H
  0024f	75 0d		 jne	 SHORT $LN7@AnalyzeHid
  00251	38 8c 24 d8 03
	00 00		 cmp	 BYTE PTR _readBuffer$[esp+9180], cl
  00258	0f 84 2d 01 00
	00		 je	 $LN8@AnalyzeHid
$LN7@AnalyzeHid:
  0025e	38 84 24 f2 03
	00 00		 cmp	 BYTE PTR _readBuffer$[esp+9206], al
  00265	75 17		 jne	 SHORT $LN9@AnalyzeHid
  00267	80 bc 24 f3 03
	00 00 41	 cmp	 BYTE PTR _readBuffer$[esp+9207], 65 ; 00000041H
  0026f	75 0d		 jne	 SHORT $LN9@AnalyzeHid
  00271	38 8c 24 f4 03
	00 00		 cmp	 BYTE PTR _readBuffer$[esp+9208], cl
  00278	0f 84 0d 01 00
	00		 je	 $LN8@AnalyzeHid
$LN9@AnalyzeHid:

; 8217 : 	}
; 8218 : 	else if (!strncmp (szFileSystemNameBuffer, "NTFS", 4))

  0027e	6a 04		 push	 4
  00280	8d 84 24 a4 02
	00 00		 lea	 eax, DWORD PTR _szFileSystemNameBuffer$[esp+9128]
  00287	68 00 00 00 00	 push	 OFFSET ??_C@_04HPPAIJNK@NTFS?$AA@
  0028c	50		 push	 eax
  0028d	e8 00 00 00 00	 call	 _strncmp
  00292	83 c4 0c	 add	 esp, 12			; 0000000cH
  00295	85 c0		 test	 eax, eax
  00297	0f 85 cb 00 00
	00		 jne	 $LN5@AnalyzeHid

; 8219 : 	{
; 8220 : 		// NTFS
; 8221 : 
; 8222 : 		if (nCurrentOS == WIN_2000)

  0029d	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _nCurrentOS, 7
  002a4	75 14		 jne	 SHORT $LN4@AnalyzeHid

; 8223 : 		{
; 8224 : 			Error("HIDDEN_VOL_HOST_UNSUPPORTED_FILESYS_WIN2000");

  002a6	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@PCAIDDLK@HIDDEN_VOL_HOST_UNSUPPORTED_FILE@
  002ab	e8 00 00 00 00	 call	 _Error
  002b0	83 c4 04	 add	 esp, 4

; 8225 : 			return 0;

  002b3	33 c0		 xor	 eax, eax
  002b5	e9 51 01 00 00	 jmp	 $LN23@AnalyzeHid
$LN4@AnalyzeHid:

; 8226 : 		}
; 8227 : 
; 8228 : 		if (bHiddenVolDirect && GetVolumeDataAreaSize (FALSE, hiddenVolHostSize) <= TC_MAX_FAT_SECTOR_COUNT * GetFormatSectorSize())

  002ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolDirect
  002c0	8b 9c 24 b4 23
	00 00		 mov	 ebx, DWORD PTR _hiddenVolHostSize$[esp+9124]
  002c7	85 c9		 test	 ecx, ecx
  002c9	74 43		 je	 SHORT $LN3@AnalyzeHid
  002cb	8b 94 24 b0 23
	00 00		 mov	 edx, DWORD PTR _hiddenVolHostSize$[esp+9120]
  002d2	53		 push	 ebx
  002d3	52		 push	 edx
  002d4	6a 00		 push	 0
  002d6	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  002db	83 c4 0c	 add	 esp, 12			; 0000000cH
  002de	89 44 24 2c	 mov	 DWORD PTR tv349[esp+9124], eax
  002e2	8b fa		 mov	 edi, edx
  002e4	e8 00 00 00 00	 call	 _GetFormatSectorSize
  002e9	6a 01		 push	 1
  002eb	99		 cdq
  002ec	6a 00		 push	 0
  002ee	52		 push	 edx
  002ef	50		 push	 eax
  002f0	e8 00 00 00 00	 call	 __allmul
  002f5	3b fa		 cmp	 edi, edx
  002f7	77 15		 ja	 SHORT $LN3@AnalyzeHid
  002f9	72 06		 jb	 SHORT $LN27@AnalyzeHid
  002fb	39 44 24 2c	 cmp	 DWORD PTR tv349[esp+9124], eax
  002ff	77 0d		 ja	 SHORT $LN3@AnalyzeHid
$LN27@AnalyzeHid:

; 8229 : 			Info ("HIDDEN_VOL_HOST_NTFS");

  00301	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GKHHEFAE@HIDDEN_VOL_HOST_NTFS?$AA@
  00306	e8 00 00 00 00	 call	 _Info
  0030b	83 c4 04	 add	 esp, 4
$LN3@AnalyzeHid:

; 8230 : 
; 8231 : 		if (!GetDiskFreeSpace(szRootPathName, 
; 8232 : 			&dwSectorsPerCluster, 
; 8233 : 			&dwBytesPerSector, 
; 8234 : 			&dwNumberOfFreeClusters, 
; 8235 : 			&dwTotalNumberOfClusters))

  0030e	8d 44 24 28	 lea	 eax, DWORD PTR _dwTotalNumberOfClusters$[esp+9124]
  00312	50		 push	 eax
  00313	8d 4c 24 38	 lea	 ecx, DWORD PTR _dwNumberOfFreeClusters$[esp+9128]
  00317	51		 push	 ecx
  00318	8d 54 24 24	 lea	 edx, DWORD PTR _dwBytesPerSector$[esp+9132]
  0031c	52		 push	 edx
  0031d	8d 44 24 2c	 lea	 eax, DWORD PTR _dwSectorsPerCluster$[esp+9136]
  00321	50		 push	 eax
  00322	8d 4c 24 20	 lea	 ecx, DWORD PTR _szRootPathName$[esp+9140]
  00326	51		 push	 ecx
  00327	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDiskFreeSpaceA@20
  0032d	85 c0		 test	 eax, eax
  0032f	75 15		 jne	 SHORT $LN2@AnalyzeHid

; 8236 : 		{
; 8237 : 			handleWin32Error (hwndDlg);

  00331	55		 push	 ebp
  00332	e8 00 00 00 00	 call	 _handleWin32Error

; 8238 : 			Error ("CANT_GET_OUTER_VOL_INFO");

  00337	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@JLECLIC@CANT_GET_OUTER_VOL_INFO?$AA@
  0033c	e8 00 00 00 00	 call	 _Error

; 8239 : 			return -1;

  00341	e9 bf 00 00 00	 jmp	 $LN28@AnalyzeHid
$LN2@AnalyzeHid:

; 8240 : 		};
; 8241 : 
; 8242 : 		*realClusterSize = dwBytesPerSector * dwSectorsPerCluster;

  00346	8b 44 24 20	 mov	 eax, DWORD PTR _dwSectorsPerCluster$[esp+9124]
  0034a	0f af 44 24 1c	 imul	 eax, DWORD PTR _dwBytesPerSector$[esp+9124]
  0034f	8b 54 24 24	 mov	 edx, DWORD PTR _realClusterSize$GSCopy$[esp+9124]

; 8243 : 
; 8244 : 		// Get the map of the clusters that are free and in use on the outer volume.
; 8245 : 		// The map will be scanned to determine the size of the uninterrupted block of free
; 8246 : 		// space (provided there is any) whose end is aligned with the end of the volume.
; 8247 : 		// The value will then be used to determine the maximum possible size of the hidden volume.
; 8248 : 
; 8249 : 		return ScanVolClusterBitmap (hwndDlg,
; 8250 : 			driveNo,
; 8251 : 			hiddenVolHostSize / *realClusterSize,
; 8252 : 			pnbrFreeClusters);

  00353	8b 4c 24 14	 mov	 ecx, DWORD PTR _pnbrFreeClusters$GSCopy$[esp+9124]
  00357	89 02		 mov	 DWORD PTR [edx], eax
  00359	51		 push	 ecx
  0035a	99		 cdq
  0035b	52		 push	 edx
  0035c	8b 94 24 b8 23
	00 00		 mov	 edx, DWORD PTR _hiddenVolHostSize$[esp+9128]
  00363	50		 push	 eax
  00364	53		 push	 ebx
  00365	52		 push	 edx
  00366	eb 5d		 jmp	 SHORT $LN29@AnalyzeHid
$LN5@AnalyzeHid:

; 8253 : 	}
; 8254 : 	else
; 8255 : 	{
; 8256 : 		// Unsupported file system
; 8257 : 
; 8258 : 		Error ((nCurrentOS == WIN_2000) ? "HIDDEN_VOL_HOST_UNSUPPORTED_FILESYS_WIN2000" : "HIDDEN_VOL_HOST_UNSUPPORTED_FILESYS");

  00368	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _nCurrentOS, 7
  0036f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CM@PCAIDDLK@HIDDEN_VOL_HOST_UNSUPPORTED_FILE@
  00374	74 05		 je	 SHORT $LN26@AnalyzeHid
  00376	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CE@PMECNFFM@HIDDEN_VOL_HOST_UNSUPPORTED_FILE@
$LN26@AnalyzeHid:
  0037b	50		 push	 eax
  0037c	e8 00 00 00 00	 call	 _Error
  00381	83 c4 04	 add	 esp, 4

; 8259 : 		return 0;

  00384	33 c0		 xor	 eax, eax
  00386	e9 80 00 00 00	 jmp	 $LN23@AnalyzeHid
$LN8@AnalyzeHid:

; 8202 : 	{
; 8203 : 		// FAT12/FAT16/FAT32
; 8204 : 
; 8205 : 		// Retrieve the cluster size
; 8206 : 		*realClusterSize = ((int) readBuffer[0xb] + ((int) readBuffer[0xc] << 8)) * (int) readBuffer[0xd];	

  0038b	0f b6 84 24 ac
	03 00 00	 movzx	 eax, BYTE PTR _readBuffer$[esp+9136]
  00393	0f b6 8c 24 ab
	03 00 00	 movzx	 ecx, BYTE PTR _readBuffer$[esp+9135]
  0039b	0f b6 94 24 ad
	03 00 00	 movzx	 edx, BYTE PTR _readBuffer$[esp+9137]
  003a3	c1 e0 08	 shl	 eax, 8
  003a6	03 c1		 add	 eax, ecx

; 8207 : 
; 8208 : 		// Get the map of the clusters that are free and in use on the outer volume.
; 8209 : 		// The map will be scanned to determine the size of the uninterrupted block of free
; 8210 : 		// space (provided there is any) whose end is aligned with the end of the volume.
; 8211 : 		// The value will then be used to determine the maximum possible size of the hidden volume.
; 8212 : 
; 8213 : 		return ScanVolClusterBitmap (hwndDlg,
; 8214 : 			driveNo,
; 8215 : 			hiddenVolHostSize / *realClusterSize,
; 8216 : 			pnbrFreeClusters);

  003a8	8b 4c 24 14	 mov	 ecx, DWORD PTR _pnbrFreeClusters$GSCopy$[esp+9124]
  003ac	0f af c2	 imul	 eax, edx
  003af	89 03		 mov	 DWORD PTR [ebx], eax
  003b1	99		 cdq
  003b2	51		 push	 ecx
  003b3	52		 push	 edx
  003b4	8b 94 24 bc 23
	00 00		 mov	 edx, DWORD PTR _hiddenVolHostSize$[esp+9132]
  003bb	50		 push	 eax
  003bc	8b 84 24 bc 23
	00 00		 mov	 eax, DWORD PTR _hiddenVolHostSize$[esp+9132]
  003c3	52		 push	 edx
  003c4	50		 push	 eax
$LN29@AnalyzeHid:
  003c5	e8 00 00 00 00	 call	 __alldiv
  003ca	52		 push	 edx
  003cb	50		 push	 eax
  003cc	56		 push	 esi
  003cd	55		 push	 ebp
  003ce	e8 00 00 00 00	 call	 _ScanVolClusterBitmap
  003d3	83 c4 14	 add	 esp, 20			; 00000014H
  003d6	eb 33		 jmp	 SHORT $LN23@AnalyzeHid
$LN16@AnalyzeHid:

; 8161 : 	{
; 8162 : 		Warning ("ERR_HIDDEN_VOL_HOST_ENCRYPTED_INPLACE");

  003d8	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@DBCOIOLF@ERR_HIDDEN_VOL_HOST_ENCRYPTED_IN@
  003dd	e8 00 00 00 00	 call	 _Warning
  003e2	83 c4 04	 add	 esp, 4

; 8163 : 		return 0;

  003e5	33 c0		 xor	 eax, eax
  003e7	eb 22		 jmp	 SHORT $LN23@AnalyzeHid
$LN21@AnalyzeHid:

; 8139 : 	{
; 8140 : 		handleWin32Error (hwndDlg);

  003e9	55		 push	 ebp
  003ea	e8 00 00 00 00	 call	 _handleWin32Error

; 8141 : 		Error ("CANT_ACCESS_OUTER_VOL");

  003ef	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EDMDLNEK@CANT_ACCESS_OUTER_VOL?$AA@
  003f4	e8 00 00 00 00	 call	 _Error
  003f9	83 c4 08	 add	 esp, 8
$efsf_error$135093:

; 8266 : 	CloseVolumeExplorerWindows (hwndDlg, *driveNo);

  003fc	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003fe	51		 push	 ecx
  003ff	55		 push	 ebp
  00400	e8 00 00 00 00	 call	 _CloseVolumeExplorerWindows
$LN28@AnalyzeHid:
  00405	83 c4 08	 add	 esp, 8

; 8267 : 
; 8268 : 	return -1;

  00408	83 c8 ff	 or	 eax, -1
$LN23@AnalyzeHid:

; 8269 : }

  0040b	8b 8c 24 a0 23
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+9124]
  00412	5f		 pop	 edi
  00413	5e		 pop	 esi
  00414	5d		 pop	 ebp
  00415	5b		 pop	 ebx
  00416	33 cc		 xor	 ecx, esp
  00418	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0041d	81 c4 94 23 00
	00		 add	 esp, 9108		; 00002394H
  00423	c3		 ret	 0
_AnalyzeHiddenVolumeHost ENDP
_TEXT	ENDS
EXTRN	?WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::WipeHiddenOSCreationConfig
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_WipeHiddenOSCreationConfig$3 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$_WipeHiddenOSCreationConfig$0
__tryblocktable$_WipeHiddenOSCreationConfig DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$_WipeHiddenOSCreationConfig$3
__unwindtable$_WipeHiddenOSCreationConfig DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$_WipeHiddenOSCreationConfig$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$_WipeHiddenOSCreationConfig DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$_WipeHiddenOSCreationConfig
	DD	01H
	DD	FLAT:__tryblocktable$_WipeHiddenOSCreationConfig
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _WipeHiddenOSCreationConfig
_TEXT	SEGMENT
_e$135192 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_WipeHiddenOSCreationConfig PROC			; COMDAT

; 8396 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_WipeHiddenOSCreationConfig
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 8397 : 	if (!IsHiddenOSRunning())

  0002b	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00030	85 c0		 test	 eax, eax
  00032	75 1c		 jne	 SHORT __tryend$_WipeHiddenOSCreationConfig$1

; 8398 : 	{
; 8399 : 		try
; 8400 : 		{

  00034	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], eax

; 8401 : 			WaitCursor();

  00037	e8 00 00 00 00	 call	 _WaitCursor

; 8402 : 			finally_do ({ NormalCursor(); });
; 8403 : 
; 8404 : 			BootEncObj->WipeHiddenOSCreationConfig();

  0003c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00042	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00046	e8 00 00 00 00	 call	 ?WipeHiddenOSCreationConfig@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::WipeHiddenOSCreationConfig

; 8405 : 		}

  0004b	e8 00 00 00 00	 call	 ??1Finally8402@?5??WipeHiddenOSCreationConfig@@9@QAE@XZ ; `WipeHiddenOSCreationConfig'::`6'::Finally8402::~Finally8402
__tryend$_WipeHiddenOSCreationConfig$1:

; 8410 : 		}
; 8411 : 	}
; 8412 : 
; 8413 : 	return TRUE;

  00050	b8 01 00 00 00	 mov	 eax, 1

; 8414 : }

  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
__catch$_WipeHiddenOSCreationConfig$0:

; 8406 : 		catch (Exception &e)
; 8407 : 		{
; 8408 : 			e.Show (MainDlg);

  00067	8b 4d ec	 mov	 ecx, DWORD PTR _e$135192[ebp]
  0006a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0006c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00072	8b 00		 mov	 eax, DWORD PTR [eax]
  00074	52		 push	 edx
  00075	ff d0		 call	 eax

; 8409 : 			return FALSE;

  00077	b8 00 00 00 00	 mov	 eax, $LN9@WipeHidden
  0007c	c3		 ret	 0
$LN9@WipeHidden:
  0007d	33 c0		 xor	 eax, eax

; 8414 : }

  0007f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00082	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00089	59		 pop	 ecx
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_WipeHiddenOSCreationConfig$2:
  00000	e9 00 00 00 00	 jmp	 ??1Finally8402@?5??WipeHiddenOSCreationConfig@@9@QAE@XZ ; `WipeHiddenOSCreationConfig'::`6'::Finally8402::~Finally8402
__ehhandler$_WipeHiddenOSCreationConfig:
  00005	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00009	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000c	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_WipeHiddenOSCreationConfig
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_WipeHiddenOSCreationConfig ENDP
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1651 : 		return (_Myptr());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN5@c_str
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  00009	c3		 ret	 0

; 1651 : 		return (_Myptr());

$LN5@c_str:
  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  0000d	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::overflow
PUBLIC	?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbackfail
PUBLIC	?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::showmanyc
PUBLIC	?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::underflow
PUBLIC	?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::uflow
PUBLIC	?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsgetn
PUBLIC	?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Xsgetn_s
PUBLIC	?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsputn
PUBLIC	?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekoff
PUBLIC	?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekpos
PUBLIC	?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setbuf
PUBLIC	?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sync
PUBLIC	?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::imbue
EXTRN	??1_Mutex@std@@QAE@XZ:PROC			; std::_Mutex::~_Mutex
EXTRN	??_E?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
	DD	FLAT:?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
	DD	FLAT:?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	FLAT:?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z
	DD	FLAT:?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z
	DD	FLAT:?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z
	DD	FLAT:?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z
	DD	FLAT:?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z
	DD	FLAT:?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
CONST	ENDS
;	COMDAT ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
__Lock$143323 = -4					; size = 4
??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	55		 push	 ebp
  00003	8b e9		 mov	 ebp, ecx

; 43   : 		_DELETE_CRT(_Plocale);

  00005	8b 5d 38	 mov	 ebx, DWORD PTR [ebp+56]
  00008	c7 45 00 00 00
	00 00		 mov	 DWORD PTR [ebp], OFFSET ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
  0000f	85 db		 test	 ebx, ebx
  00011	74 50		 je	 SHORT $LN3@basic_stre
  00013	57		 push	 edi
  00014	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00016	85 ff		 test	 edi, edi
  00018	74 3f		 je	 SHORT $LN12@basic_stre
  0001a	6a 00		 push	 0
  0001c	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$143323[esp+20]
  00020	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00025	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00028	85 c0		 test	 eax, eax
  0002a	76 09		 jbe	 SHORT $LN14@basic_stre
  0002c	83 f8 ff	 cmp	 eax, -1
  0002f	73 04		 jae	 SHORT $LN14@basic_stre
  00031	48		 dec	 eax
  00032	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN14@basic_stre:
  00035	56		 push	 esi
  00036	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00039	f7 de		 neg	 esi
  0003b	1b f6		 sbb	 esi, esi
  0003d	f7 d6		 not	 esi
  0003f	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$143323[esp+20]
  00043	23 f7		 and	 esi, edi
  00045	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0004a	85 f6		 test	 esi, esi
  0004c	74 0a		 je	 SHORT $LN18@basic_stre
  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	8b 10		 mov	 edx, DWORD PTR [eax]
  00052	6a 01		 push	 1
  00054	8b ce		 mov	 ecx, esi
  00056	ff d2		 call	 edx
$LN18@basic_stre:
  00058	5e		 pop	 esi
$LN12@basic_stre:
  00059	53		 push	 ebx
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005f	83 c4 04	 add	 esp, 4
  00062	5f		 pop	 edi
$LN3@basic_stre:

; 44   : 		}

  00063	8d 4d 04	 lea	 ecx, DWORD PTR [ebp+4]
  00066	5d		 pop	 ebp
  00067	5b		 pop	 ebx
  00068	83 c4 04	 add	 esp, 4
  0006b	e9 00 00 00 00	 jmp	 ??1_Mutex@std@@QAE@XZ	; std::_Mutex::~_Mutex
??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	?to_char_type@?$char_traits@_W@std@@SA_WABG@Z	; std::char_traits<wchar_t>::to_char_type
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@_W@std@@SA_WABG@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@_W@std@@SA_WABG@Z PROC	; std::char_traits<wchar_t>::to_char_type, COMDAT

; 386  : 		return (_Meta);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Meta$[esp-4]
  00004	66 8b 00	 mov	 ax, WORD PTR [eax]

; 387  : 		}

  00007	c3		 ret	 0
?to_char_type@?$char_traits@_W@std@@SA_WABG@Z ENDP	; std::char_traits<wchar_t>::to_char_type
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 2
?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::overflow, COMDAT
; _this$ = ecx

; 298  : 		return (_Traits::eof());

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 299  : 		}

  00005	c2 04 00	 ret	 4
?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::overflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 2
?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbackfail, COMDAT
; _this$ = ecx

; 303  : 		return (_Traits::eof());

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 304  : 		}

  00005	c2 04 00	 ret	 4
?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbackfail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::showmanyc, COMDAT
; _this$ = ecx

; 308  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 309  : 		}

  00002	c3		 ret	 0
?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::showmanyc
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
_TEXT	SEGMENT
?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::underflow, COMDAT
; _this$ = ecx

; 313  : 		return (_Traits::eof());

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 314  : 		}

  00005	c3		 ret	 0
?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::underflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsgetn, COMDAT
; _this$ = ecx

; 326  : 		// assume the destination buffer is large enough
; 327  : 		return _Xsgetn_s(_Ptr, (size_t)-1, _Count);

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Count$[esp-4]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00009	52		 push	 edx
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR __Ptr$[esp]
  0000e	6a ff		 push	 -1
  00010	52		 push	 edx
  00011	ff d0		 call	 eax

; 328  : 		}

  00013	c2 08 00	 ret	 8
?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsgetn
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setbuf, COMDAT
; _this$ = ecx

; 403  : 		{	// offer buffer to external agent (do nothing)

  00000	8b c1		 mov	 eax, ecx

; 404  : 		return (this);
; 405  : 		}

  00002	c2 08 00	 ret	 8
?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setbuf
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sync, COMDAT
; _this$ = ecx

; 409  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 410  : 		}

  00002	c3		 ret	 0
?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sync
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::imbue, COMDAT
; _this$ = ecx

; 414  : 		}

  00000	c2 04 00	 ret	 4
?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::imbue
_TEXT	ENDS
PUBLIC	?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gbump
; Function compile flags: /Ogtpy
;	COMDAT ?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gbump, COMDAT
; _this$ = ecx

; 210  : 		*_IGcount -= _Off;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00007	29 10		 sub	 DWORD PTR [eax], edx

; 211  : 		*_IGnext += _Off;

  00009	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0000c	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  0000f	01 01		 add	 DWORD PTR [ecx], eax

; 212  : 		}

  00011	c2 04 00	 ret	 4
?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gbump
_TEXT	ENDS
PUBLIC	?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gninc
; Function compile flags: /Ogtpy
;	COMDAT ?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ
_TEXT	SEGMENT
?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gninc, COMDAT
; _this$ = ecx

; 234  : 		--*_IGcount;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 235  : 		return ((*_IGnext)++);

  00005	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 236  : 		}

  0000f	c3		 ret	 0
?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gninc
_TEXT	ENDS
PUBLIC	?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail
; Function compile flags: /Ogtpy
;	COMDAT ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ
_TEXT	SEGMENT
?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail, COMDAT
; _this$ = ecx

; 246  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 06		 je	 SHORT $LN3@Gnavail
  00008	8b 49 30	 mov	 ecx, DWORD PTR [ecx+48]
  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 247  : 		}

  0000d	c3		 ret	 0
$LN3@Gnavail:

; 246  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  0000e	33 c0		 xor	 eax, eax

; 247  : 		}

  00010	c3		 ret	 0
?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail
_TEXT	ENDS
PUBLIC	?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbump
; Function compile flags: /Ogtpy
;	COMDAT ?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbump, COMDAT
; _this$ = ecx

; 251  : 		*_IPcount -= _Off;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00007	29 10		 sub	 DWORD PTR [eax], edx

; 252  : 		*_IPnext += _Off;

  00009	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0000c	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  0000f	01 01		 add	 DWORD PTR [ecx], eax

; 253  : 		}

  00011	c2 04 00	 ret	 4
?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbump
_TEXT	ENDS
PUBLIC	??0?$fpos@H@std@@QAE@J@Z			; std::fpos<int>::fpos<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??0?$fpos@H@std@@QAE@J@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??0?$fpos@H@std@@QAE@J@Z PROC				; std::fpos<int>::fpos<int>, COMDAT
; _this$ = ecx

; 54   : 		{	// construct with stream offset

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx
  00008	33 c9		 xor	 ecx, ecx
  0000a	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000d	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00010	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 55   : 		}

  00013	c2 04 00	 ret	 4
??0?$fpos@H@std@@QAE@J@Z ENDP				; std::fpos<int>::fpos<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
_TEXT	ENDS
;	COMDAT ?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
_TEXT	SEGMENT
?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::uflow, COMDAT
; _this$ = ecx

; 317  : 		{	// get a character from stream, point past it

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 318  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 319  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00008	ff d2		 call	 edx
  0000a	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0000f	66 3b c8	 cmp	 cx, ax
  00012	75 04		 jne	 SHORT $LN3@uflow
  00014	8b c1		 mov	 eax, ecx
  00016	5e		 pop	 esi

; 320  : 		}

  00017	c3		 ret	 0
$LN3@uflow:

; 318  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 319  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

  00018	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0001b	ff 08		 dec	 DWORD PTR [eax]
  0001d	8b 76 20	 mov	 esi, DWORD PTR [esi+32]
  00020	8b 06		 mov	 eax, DWORD PTR [esi]
  00022	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  00025	89 16		 mov	 DWORD PTR [esi], edx
  00027	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0002a	5e		 pop	 esi

; 320  : 		}

  0002b	c3		 ret	 0
?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::uflow
_TEXT	ENDS
EXTRN	?_BADOFF@std@@3JB:DWORD				; std::_BADOFF
; Function compile flags: /Ogtpy
;	COMDAT ?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekoff, COMDAT
; _this$ = ecx

; 393  : 		return (streampos(_BADOFF));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	33 c9		 xor	 ecx, ecx
  0000e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00011	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00014	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 394  : 		}

  00017	c2 10 00	 ret	 16			; 00000010H
?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekoff
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekpos, COMDAT
; _this$ = ecx

; 399  : 		return (streampos(_BADOFF));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	33 c9		 xor	 ecx, ecx
  0000e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00011	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00014	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 400  : 		}

  00017	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekpos
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str, COMDAT
; _this$ = ecx

; 1651 : 		return (_Myptr());

  00000	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  00004	72 04		 jb	 SHORT $LN5@c_str@2
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  00009	c3		 ret	 0

; 1651 : 		return (_Myptr());

$LN5@c_str@2:
  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1652 : 		}

  0000d	c3		 ret	 0
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
_TEXT	ENDS
PUBLIC	??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
PUBLIC	??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekpos
EXTRN	??_E?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD 00H ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$alloca'
	DB	'tor@_W@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD 00H ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD FLAT:??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
	DD	FLAT:?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
	DD	FLAT:?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ
	DD	FLAT:?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WH@Z
	DD	FLAT:?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z
	DD	FLAT:?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z
	DD	FLAT:?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z
	DD	FLAT:?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_WH@Z
	DD	FLAT:?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 42   : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@

; 43   : 		_Tidy();

  00009	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy

; 44   : 		}

  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?eq@?$char_traits@_W@std@@SA_NAB_W0@Z		; std::char_traits<wchar_t>::eq
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?eq@?$char_traits@_W@std@@SA_NAB_W0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq@?$char_traits@_W@std@@SA_NAB_W0@Z PROC		; std::char_traits<wchar_t>::eq, COMDAT

; 315  : 		return (_Left == _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	66 8b 08	 mov	 cx, WORD PTR [eax]
  00007	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000b	33 c0		 xor	 eax, eax
  0000d	66 3b 0a	 cmp	 cx, WORD PTR [edx]
  00010	0f 94 c0	 sete	 al

; 316  : 		}

  00013	c3		 ret	 0
?eq@?$char_traits@_W@std@@SA_NAB_W0@Z ENDP		; std::char_traits<wchar_t>::eq
_TEXT	ENDS
PUBLIC	?not_eof@?$char_traits@_W@std@@SAGABG@Z		; std::char_traits<wchar_t>::not_eof
; Function compile flags: /Ogtpy
;	COMDAT ?not_eof@?$char_traits@_W@std@@SAGABG@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?not_eof@?$char_traits@_W@std@@SAGABG@Z PROC		; std::char_traits<wchar_t>::not_eof, COMDAT

; 407  : 		return (_Meta != eof() ? _Meta : !eof());

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Meta$[esp-4]
  00004	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00007	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0000c	66 3b c1	 cmp	 ax, cx
  0000f	74 04		 je	 SHORT $LN3@not_eof
  00011	0f b7 c0	 movzx	 eax, ax

; 408  : 		}

  00014	c3		 ret	 0
$LN3@not_eof:

; 407  : 		return (_Meta != eof() ? _Meta : !eof());

  00015	33 c0		 xor	 eax, eax

; 408  : 		}

  00017	c3		 ret	 0
?not_eof@?$char_traits@_W@std@@SAGABG@Z ENDP		; std::char_traits<wchar_t>::not_eof
_TEXT	ENDS
PUBLIC	??B?$fpos@H@std@@QBEJXZ				; std::fpos<int>::operator long
; Function compile flags: /Ogtpy
;	COMDAT ??B?$fpos@H@std@@QBEJXZ
_TEXT	SEGMENT
??B?$fpos@H@std@@QBEJXZ PROC				; std::fpos<int>::operator long, COMDAT
; _this$ = ecx

; 79   : 		return ((streamoff)(_Myoff + _FPOSOFF(_Fpos)));

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	03 01		 add	 eax, DWORD PTR [ecx]

; 80   : 		}

  00005	c3		 ret	 0
??B?$fpos@H@std@@QBEJXZ ENDP				; std::fpos<int>::operator long
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 2
?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::pbackfail, COMDAT
; _this$ = ecx

; 157  : 		if (_Mysb::gptr() == 0
; 158  : 			|| _Mysb::gptr() <= _Mysb::eback()
; 159  : 			|| !_Traits::eq_int_type(_Traits::eof(), _Meta)
; 160  : 			&& !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
; 161  : 			&& _Mystate & _Constant)

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]
  00005	85 c0		 test	 eax, eax
  00007	74 4c		 je	 SHORT $LN3@pbackfail
  00009	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0000c	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000e	76 45		 jbe	 SHORT $LN3@pbackfail
  00010	66 8b 54 24 04	 mov	 dx, WORD PTR __Meta$[esp-4]
  00015	56		 push	 esi
  00016	be ff ff 00 00	 mov	 esi, 65535		; 0000ffffH
  0001b	66 3b f2	 cmp	 si, dx
  0001e	5e		 pop	 esi
  0001f	74 0c		 je	 SHORT $LN4@pbackfail
  00021	66 3b 50 fe	 cmp	 dx, WORD PTR [eax-2]
  00025	74 06		 je	 SHORT $LN4@pbackfail
  00027	f6 41 40 02	 test	 BYTE PTR [ecx+64], 2
  0002b	75 28		 jne	 SHORT $LN3@pbackfail
$LN4@pbackfail:

; 163  : 		else
; 164  : 			{	// back up one position and store put-back character
; 165  : 			_Mysb::gbump(-1);

  0002d	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00030	ff 00		 inc	 DWORD PTR [eax]
  00032	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00035	83 00 fe	 add	 DWORD PTR [eax], -2	; fffffffeH

; 166  : 			if (!_Traits::eq_int_type(_Traits::eof(), _Meta))

  00038	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0003d	66 3b c2	 cmp	 ax, dx
  00040	74 0e		 je	 SHORT $LN37@pbackfail

; 167  : 				*_Mysb::gptr() = _Traits::to_char_type(_Meta);

  00042	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00045	8b 01		 mov	 eax, DWORD PTR [ecx]
  00047	66 89 10	 mov	 WORD PTR [eax], dx

; 168  : 			return (_Traits::not_eof(_Meta));

  0004a	0f b7 c2	 movzx	 eax, dx

; 169  : 			}
; 170  : 		}

  0004d	c2 04 00	 ret	 4

; 168  : 			return (_Traits::not_eof(_Meta));

$LN37@pbackfail:
  00050	33 c0		 xor	 eax, eax

; 169  : 			}
; 170  : 		}

  00052	c2 04 00	 ret	 4
$LN3@pbackfail:

; 162  : 			return (_Traits::eof());	// can't put back, fail

  00055	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 169  : 			}
; 170  : 		}

  0005a	c2 04 00	 ret	 4
?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::pbackfail
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ
_TEXT	SEGMENT
?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::underflow, COMDAT
; _this$ = ecx

; 174  : 		if (_Mysb::gptr() == 0)

  00000	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00003	56		 push	 esi
  00004	8b 32		 mov	 esi, DWORD PTR [edx]
  00006	85 f6		 test	 esi, esi
  00008	75 07		 jne	 SHORT $LN8@underflow

; 175  : 			return (_Traits::eof());	// no character buffer, fail

  0000a	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0000f	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00010	c3		 ret	 0
$LN8@underflow:
  00011	53		 push	 ebx
  00012	57		 push	 edi

; 176  : 		else if (_Mysb::gptr() < _Mysb::egptr())

  00013	8b 79 30	 mov	 edi, DWORD PTR [ecx+48]
  00016	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00018	8b c6		 mov	 eax, esi
  0001a	8d 1c 58	 lea	 ebx, DWORD PTR [eax+ebx*2]
  0001d	3b c3		 cmp	 eax, ebx
  0001f	73 07		 jae	 SHORT $LN6@underflow

; 177  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  00021	66 8b 06	 mov	 ax, WORD PTR [esi]
  00024	5f		 pop	 edi
  00025	5b		 pop	 ebx
  00026	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00027	c3		 ret	 0
$LN6@underflow:

; 178  : 		else if (_Mystate & _Noread || _Mysb::pptr() == 0
; 179  : 			|| _Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr())

  00028	f6 41 40 04	 test	 BYTE PTR [ecx+64], 4
  0002c	75 31		 jne	 SHORT $LN3@underflow
  0002e	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00031	8b 00		 mov	 eax, DWORD PTR [eax]
  00033	85 c0		 test	 eax, eax
  00035	74 28		 je	 SHORT $LN3@underflow
  00037	3b c6		 cmp	 eax, esi
  00039	77 05		 ja	 SHORT $LN4@underflow
  0003b	39 71 3c	 cmp	 DWORD PTR [ecx+60], esi
  0003e	76 1f		 jbe	 SHORT $LN3@underflow
$LN4@underflow:

; 181  : 		else
; 182  : 			{	// extend read buffer into written area, then return buffered
; 183  : 			if (_Seekhigh < _Mysb::pptr())

  00040	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  00043	73 03		 jae	 SHORT $LN1@underflow

; 184  : 				_Seekhigh = _Mysb::pptr();

  00045	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN1@underflow:

; 185  : 			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);

  00048	8b 12		 mov	 edx, DWORD PTR [edx]
  0004a	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0004d	2b c2		 sub	 eax, edx
  0004f	d1 f8		 sar	 eax, 1
  00051	89 07		 mov	 DWORD PTR [edi], eax

; 186  : 			return (_Traits::to_int_type(*_Mysb::gptr()));

  00053	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00056	8b 11		 mov	 edx, DWORD PTR [ecx]
  00058	66 8b 02	 mov	 ax, WORD PTR [edx]
  0005b	5f		 pop	 edi
  0005c	5b		 pop	 ebx
  0005d	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  0005e	c3		 ret	 0
$LN3@underflow:
  0005f	5f		 pop	 edi
  00060	5b		 pop	 ebx

; 180  : 			return (_Traits::eof());	// can't read, fail

  00061	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00066	5e		 pop	 esi

; 187  : 			}
; 188  : 		}

  00067	c3		 ret	 0
?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::underflow
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Way$ = 16						; size = 4
__Which$ = 20						; size = 4
?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekoff, COMDAT
; _this$ = ecx

; 193  : 		{	// change position by _Off, according to _Way, _Mode

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 194  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  00003	8b 71 24	 mov	 esi, DWORD PTR [ecx+36]
  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	57		 push	 edi
  00009	85 c0		 test	 eax, eax
  0000b	74 08		 je	 SHORT $LN20@seekoff
  0000d	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  00010	73 03		 jae	 SHORT $LN20@seekoff

; 195  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  00012	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN20@seekoff:

; 196  : 
; 197  : 		if (_Which & ios_base::in && _Mysb::gptr() != 0)

  00015	8a 5c 24 20	 mov	 bl, BYTE PTR __Which$[esp+12]
  00019	f6 c3 01	 test	 bl, 1
  0001c	0f 84 b5 00 00
	00		 je	 $LN19@seekoff
  00022	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00025	8b 10		 mov	 edx, DWORD PTR [eax]
  00027	85 d2		 test	 edx, edx
  00029	0f 84 a8 00 00
	00		 je	 $LN19@seekoff

; 198  : 			{	// position within read buffer
; 199  : 			if (_Way == ios_base::end)

  0002f	8b 44 24 1c	 mov	 eax, DWORD PTR __Way$[esp+12]
  00033	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  00039	83 f8 02	 cmp	 eax, 2
  0003c	75 12		 jne	 SHORT $LN18@seekoff

; 200  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  0003e	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00041	8b 69 3c	 mov	 ebp, DWORD PTR [ecx+60]
  00044	2b 28		 sub	 ebp, DWORD PTR [eax]
  00046	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
  0004a	d1 fd		 sar	 ebp, 1
  0004c	03 f5		 add	 esi, ebp

; 201  : 			else if (_Way == ios_base::cur

  0004e	eb 27		 jmp	 SHORT $LN14@seekoff
$LN18@seekoff:

; 202  : 				&& (_Which & ios_base::out) == 0)

  00050	83 f8 01	 cmp	 eax, 1
  00053	75 16		 jne	 SHORT $LN16@seekoff
  00055	f6 c3 02	 test	 bl, 2
  00058	75 15		 jne	 SHORT $LN71@seekoff

; 203  : 				_Off += (off_type)(_Mysb::gptr() - _Mysb::eback());

  0005a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0005d	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
  00061	8b ea		 mov	 ebp, edx
  00063	2b 28		 sub	 ebp, DWORD PTR [eax]
  00065	d1 fd		 sar	 ebp, 1
  00067	03 f5		 add	 esi, ebp
  00069	eb 0c		 jmp	 SHORT $LN14@seekoff
$LN16@seekoff:

; 204  : 			else if (_Way != ios_base::beg)

  0006b	85 c0		 test	 eax, eax
  0006d	74 04		 je	 SHORT $LN72@seekoff
$LN71@seekoff:

; 205  : 				_Off = _BADOFF;

  0006f	8b f7		 mov	 esi, edi
  00071	eb 04		 jmp	 SHORT $LN14@seekoff
$LN72@seekoff:
  00073	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
$LN14@seekoff:

; 206  : 
; 207  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00077	85 f6		 test	 esi, esi
  00079	0f 8c cd 00 00
	00		 jl	 $LN3@seekoff
  0007f	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00082	8b 00		 mov	 eax, DWORD PTR [eax]
  00084	8b 69 3c	 mov	 ebp, DWORD PTR [ecx+60]
  00087	2b e8		 sub	 ebp, eax
  00089	d1 fd		 sar	 ebp, 1
  0008b	3b f5		 cmp	 esi, ebp
  0008d	0f 8f b9 00 00
	00		 jg	 $LN3@seekoff

; 208  : 				{	// change read position
; 209  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  00093	2b c2		 sub	 eax, edx
  00095	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00098	d1 f8		 sar	 eax, 1
  0009a	03 c6		 add	 eax, esi
  0009c	29 02		 sub	 DWORD PTR [edx], eax
  0009e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000a1	03 c0		 add	 eax, eax
  000a3	01 02		 add	 DWORD PTR [edx], eax

; 210  : 				if (_Which & ios_base::out && _Mysb::pptr() != 0)

  000a5	f6 c3 02	 test	 bl, 2
  000a8	0f 84 a8 00 00
	00		 je	 $LN75@seekoff
  000ae	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000b1	8b 02		 mov	 eax, DWORD PTR [edx]
  000b3	85 c0		 test	 eax, eax
  000b5	0f 84 9b 00 00
	00		 je	 $LN75@seekoff

; 211  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 212  : 						_Mysb::epptr());	// change write position to match

  000bb	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  000be	8b 12		 mov	 edx, DWORD PTR [edx]
  000c0	8d 04 50	 lea	 eax, DWORD PTR [eax+edx*2]
  000c3	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000c6	50		 push	 eax
  000c7	8b 02		 mov	 eax, DWORD PTR [edx]
  000c9	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000cc	50		 push	 eax
  000cd	8b 02		 mov	 eax, DWORD PTR [edx]
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp

; 213  : 				}
; 214  : 			else

  000d5	eb 7f		 jmp	 SHORT $LN75@seekoff
$LN19@seekoff:

; 215  : 				_Off = _BADOFF;
; 216  : 			}
; 217  : 		else if (_Which & ios_base::out && _Mysb::pptr() != 0)

  000d7	f6 c3 02	 test	 bl, 2
  000da	74 74		 je	 SHORT $LN9@seekoff
  000dc	8b 16		 mov	 edx, DWORD PTR [esi]
  000de	85 d2		 test	 edx, edx
  000e0	74 6e		 je	 SHORT $LN9@seekoff

; 218  : 			{	// position within write buffer
; 219  : 			if (_Way == ios_base::end)

  000e2	8b 44 24 1c	 mov	 eax, DWORD PTR __Way$[esp+12]
  000e6	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  000ec	83 f8 02	 cmp	 eax, 2
  000ef	75 12		 jne	 SHORT $LN8@seekoff

; 220  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  000f1	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  000f4	8b 59 3c	 mov	 ebx, DWORD PTR [ecx+60]
  000f7	2b 18		 sub	 ebx, DWORD PTR [eax]
  000f9	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
  000fd	d1 fb		 sar	 ebx, 1
  000ff	03 f3		 add	 esi, ebx
  00101	eb 20		 jmp	 SHORT $LN4@seekoff
$LN8@seekoff:

; 221  : 			else if (_Way == ios_base::cur)

  00103	83 f8 01	 cmp	 eax, 1
  00106	75 11		 jne	 SHORT $LN6@seekoff

; 222  : 				_Off += (off_type)(_Mysb::pptr() - _Mysb::eback());

  00108	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0010b	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
  0010f	8b da		 mov	 ebx, edx
  00111	2b 18		 sub	 ebx, DWORD PTR [eax]
  00113	d1 fb		 sar	 ebx, 1
  00115	03 f3		 add	 esi, ebx
  00117	eb 0a		 jmp	 SHORT $LN4@seekoff
$LN6@seekoff:

; 223  : 			else if (_Way != ios_base::beg)
; 224  : 				_Off = _BADOFF;

  00119	8b f7		 mov	 esi, edi
  0011b	85 c0		 test	 eax, eax
  0011d	75 04		 jne	 SHORT $LN4@seekoff
  0011f	8b 74 24 18	 mov	 esi, DWORD PTR __Off$[esp+12]
$LN4@seekoff:

; 225  : 
; 226  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00123	85 f6		 test	 esi, esi
  00125	7c 25		 jl	 SHORT $LN3@seekoff
  00127	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0012a	8b 00		 mov	 eax, DWORD PTR [eax]
  0012c	8b 59 3c	 mov	 ebx, DWORD PTR [ecx+60]
  0012f	2b d8		 sub	 ebx, eax
  00131	d1 fb		 sar	 ebx, 1
  00133	3b f3		 cmp	 esi, ebx
  00135	7f 15		 jg	 SHORT $LN3@seekoff

; 227  : 				_Mysb::pbump((int)(_Mysb::eback()
; 228  : 					- _Mysb::pptr() + _Off));	// change write position

  00137	2b c2		 sub	 eax, edx
  00139	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0013c	d1 f8		 sar	 eax, 1
  0013e	03 c6		 add	 eax, esi
  00140	29 02		 sub	 DWORD PTR [edx], eax
  00142	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00145	8d 14 00	 lea	 edx, DWORD PTR [eax+eax]
  00148	01 11		 add	 DWORD PTR [ecx], edx

; 229  : 			else

  0014a	eb 0a		 jmp	 SHORT $LN75@seekoff
$LN3@seekoff:

; 230  : 				_Off = _BADOFF;

  0014c	8b f7		 mov	 esi, edi

; 231  : 			}
; 232  : 		else

  0014e	eb 06		 jmp	 SHORT $LN75@seekoff
$LN9@seekoff:

; 233  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  00150	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
$LN75@seekoff:

; 234  : 		return (pos_type(_Off));

  00156	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  0015a	5f		 pop	 edi
  0015b	89 30		 mov	 DWORD PTR [eax], esi
  0015d	5e		 pop	 esi
  0015e	33 c9		 xor	 ecx, ecx
  00160	5d		 pop	 ebp
  00161	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00164	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00167	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0016a	5b		 pop	 ebx

; 235  : 		}

  0016b	c2 10 00	 ret	 16			; 00000010H
?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@JHH@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekoff
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Ptr$ = 12						; size = 24
__Mode$ = 36						; size = 4
?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekpos, COMDAT
; _this$ = ecx

; 240  : 		streamoff _Off = (streamoff)_Ptr;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Ptr$[esp+4]
  00008	55		 push	 ebp
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 241  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  0000b	8b 79 24	 mov	 edi, DWORD PTR [ecx+36]
  0000e	8d 34 02	 lea	 esi, DWORD PTR [edx+eax]
  00011	8b 07		 mov	 eax, DWORD PTR [edi]
  00013	85 c0		 test	 eax, eax
  00015	74 08		 je	 SHORT $LN12@seekpos
  00017	39 41 3c	 cmp	 DWORD PTR [ecx+60], eax
  0001a	73 03		 jae	 SHORT $LN12@seekpos

; 242  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  0001c	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN12@seekpos:

; 243  : 
; 244  : 		if (_Off == _BADOFF)

  0001f	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR ?_BADOFF@std@@3JB ; std::_BADOFF
  00025	3b f5		 cmp	 esi, ebp
  00027	0f 84 99 00 00
	00		 je	 $LN54@seekpos
  0002d	53		 push	 ebx

; 245  : 			;
; 246  : 		else if (_Mode & ios_base::in && _Mysb::gptr() != 0)

  0002e	8a 5c 24 30	 mov	 bl, BYTE PTR __Mode$[esp+12]
  00032	f6 c3 01	 test	 bl, 1
  00035	74 59		 je	 SHORT $LN53@seekpos
  00037	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0003a	8b 10		 mov	 edx, DWORD PTR [eax]
  0003c	85 d2		 test	 edx, edx
  0003e	74 50		 je	 SHORT $LN53@seekpos

; 247  : 			{	// position within read buffer
; 248  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00040	85 f6		 test	 esi, esi
  00042	7c 7f		 jl	 SHORT $LN4@seekpos
  00044	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00047	8b 00		 mov	 eax, DWORD PTR [eax]
  00049	8b 79 3c	 mov	 edi, DWORD PTR [ecx+60]
  0004c	2b f8		 sub	 edi, eax
  0004e	d1 ff		 sar	 edi, 1
  00050	3b f7		 cmp	 esi, edi
  00052	7f 6f		 jg	 SHORT $LN4@seekpos

; 249  : 				{	// change read position
; 250  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  00054	2b c2		 sub	 eax, edx
  00056	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00059	d1 f8		 sar	 eax, 1
  0005b	03 c6		 add	 eax, esi
  0005d	29 02		 sub	 DWORD PTR [edx], eax
  0005f	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00062	03 c0		 add	 eax, eax
  00064	01 02		 add	 DWORD PTR [edx], eax

; 251  : 				if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  00066	f6 c3 02	 test	 bl, 2
  00069	74 5a		 je	 SHORT $LN55@seekpos
  0006b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0006e	8b 02		 mov	 eax, DWORD PTR [edx]
  00070	85 c0		 test	 eax, eax
  00072	74 51		 je	 SHORT $LN55@seekpos

; 252  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 253  : 						_Mysb::epptr());	// change write position to match

  00074	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00077	8b 12		 mov	 edx, DWORD PTR [edx]
  00079	8d 04 50	 lea	 eax, DWORD PTR [eax+edx*2]
  0007c	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0007f	50		 push	 eax
  00080	8b 02		 mov	 eax, DWORD PTR [edx]
  00082	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00085	50		 push	 eax
  00086	8b 02		 mov	 eax, DWORD PTR [edx]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp

; 254  : 				}
; 255  : 			else
; 256  : 				_Off = _BADOFF;

  0008e	eb 35		 jmp	 SHORT $LN55@seekpos
$LN53@seekpos:

; 257  : 			}
; 258  : 		else if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  00090	f6 c3 02	 test	 bl, 2
  00093	74 2e		 je	 SHORT $LN4@seekpos
  00095	8b 3f		 mov	 edi, DWORD PTR [edi]
  00097	85 ff		 test	 edi, edi
  00099	74 28		 je	 SHORT $LN4@seekpos

; 259  : 			{	// position within write buffer
; 260  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  0009b	85 f6		 test	 esi, esi
  0009d	7c 24		 jl	 SHORT $LN4@seekpos
  0009f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000a2	8b 02		 mov	 eax, DWORD PTR [edx]
  000a4	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  000a7	2b d0		 sub	 edx, eax
  000a9	d1 fa		 sar	 edx, 1
  000ab	3b f2		 cmp	 esi, edx
  000ad	7f 14		 jg	 SHORT $LN4@seekpos

; 261  : 				_Mysb::pbump((int)(_Mysb::eback()
; 262  : 					- _Mysb::pptr() + _Off));	// change write position

  000af	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  000b2	2b c7		 sub	 eax, edi
  000b4	d1 f8		 sar	 eax, 1
  000b6	03 c6		 add	 eax, esi
  000b8	29 02		 sub	 DWORD PTR [edx], eax
  000ba	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000bd	03 c0		 add	 eax, eax
  000bf	01 01		 add	 DWORD PTR [ecx], eax

; 263  : 			else

  000c1	eb 02		 jmp	 SHORT $LN55@seekpos
$LN4@seekpos:

; 264  : 				_Off = _BADOFF;
; 265  : 			}
; 266  : 		else
; 267  : 			_Off = _BADOFF;

  000c3	8b f5		 mov	 esi, ebp
$LN55@seekpos:
  000c5	5b		 pop	 ebx
$LN54@seekpos:

; 268  : 		return (streampos(_Off));

  000c6	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  000ca	5f		 pop	 edi
  000cb	33 c9		 xor	 ecx, ecx
  000cd	89 30		 mov	 DWORD PTR [eax], esi
  000cf	5e		 pop	 esi
  000d0	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000d3	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  000d6	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  000d9	5d		 pop	 ebp

; 269  : 		}

  000da	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekpos
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 fc	 lea	 esi, DWORD PTR [ecx-4]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0000c	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  00014	50		 push	 eax
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  0001b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00020	83 c4 04	 add	 esp, 4
  00023	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00028	74 09		 je	 SHORT $LN13@scalar@10
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
$LN13@scalar@10:
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 f8	 lea	 esi, DWORD PTR [ecx-8]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0000c	c7 44 02 f8 00
	00 00 00	 mov	 DWORD PTR [edx+eax-8], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00014	50		 push	 eax
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  0001b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00020	83 c4 04	 add	 esp, 4
  00023	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00028	74 09		 je	 SHORT $LN13@scalar@11
  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
$LN13@scalar@11:
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@12
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@12:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 f4	 lea	 esi, DWORD PTR [ecx-12]
  00004	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0000c	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
  00014	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	c7 44 02 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  00022	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00025	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00028	c7 44 02 f4 00
	00 00 00	 mov	 DWORD PTR [edx+eax-12], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00030	50		 push	 eax
  00031	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  00037	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0003c	83 c4 04	 add	 esp, 4
  0003f	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00044	74 09		 je	 SHORT $LN17@scalar@13
  00046	56		 push	 esi
  00047	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004c	83 c4 04	 add	 esp, 4
$LN17@scalar@13:
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	c2 04 00	 ret	 4
??_G?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  00009	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
  00015	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0001a	74 09		 je	 SHORT $LN7@scalar@14
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$LN7@scalar@14:
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	c2 04 00	 ret	 4
??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 472  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 473  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 478  : 		{	// copy constructor

  00000	8b c1		 mov	 eax, ecx

; 479  : #if defined(_DEBUG)
; 480  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 481  : 			{
; 482  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 483  : 			}
; 484  : #endif
; 485  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputc
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 2
?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputc, COMDAT
; _this$ = ecx

; 161  : 		return (0 < _Pnavail()
; 162  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 163  : 			: overflow(_Traits::to_int_type(_Ch)));

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 23		 je	 SHORT $LN3@sputc
  00008	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0000b	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0000e	7e 1b		 jle	 SHORT $LN3@sputc
  00010	8b c2		 mov	 eax, edx
  00012	ff 08		 dec	 DWORD PTR [eax]
  00014	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  0001c	89 11		 mov	 DWORD PTR [ecx], edx
  0001e	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ch$[esp-4]
  00022	66 89 08	 mov	 WORD PTR [eax], cx
  00025	0f b7 c1	 movzx	 eax, cx

; 164  : 		}

  00028	c2 04 00	 ret	 4
$LN3@sputc:

; 161  : 		return (0 < _Pnavail()
; 162  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 163  : 			: overflow(_Traits::to_int_type(_Ch)));

  0002b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002d	8b 54 24 04	 mov	 edx, DWORD PTR __Ch$[esp-4]
  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00034	52		 push	 edx
  00035	ff d0		 call	 eax
  00037	0f b7 c0	 movzx	 eax, ax

; 164  : 		}

  0003a	c2 04 00	 ret	 4
?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputc
_TEXT	ENDS
PUBLIC	??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z PROC ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 472  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 473  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@IAE@V?$allocator@_W@1@@Z ENDP ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 478  : 		{	// copy constructor

  00000	8b c1		 mov	 eax, ecx

; 479  : #if defined(_DEBUG)
; 480  : 		if (_Right._Myfirstiter == _IGNORE_MYITERLIST)
; 481  : 			{
; 482  : 			this->_Myfirstiter = _IGNORE_MYITERLIST;
; 483  : 			}
; 484  : #endif
; 485  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@_WV?$allocator@_W@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<wchar_t,std::allocator<wchar_t> >::_String_val<wchar_t,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@_W@std@@QAEPA_WI@Z	; std::allocator<wchar_t>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z PROC		; std::allocator<wchar_t>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z ENDP		; std::allocator<wchar_t>::allocate
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::~_Container_base_aux_alloc_real<std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::~_Container_base_aux_alloc_real<std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx

; 440  : 		}

  00009	c3		 ret	 0
??1?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::~_Container_base_aux_alloc_real<std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_real@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx

; 440  : 		}

  00009	c3		 ret	 0
??1?$_Container_base_aux_alloc_real@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >::~_Container_base_aux_alloc_real<std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator!=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 216  : 		return (!(*this == _Right));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 04		 je	 SHORT $LN6@operator@8
  0000e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00010	74 05		 je	 SHORT $LN5@operator@8
$LN6@operator@8:
  00012	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@operator@8:
  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0001f	5f		 pop	 edi
  00020	0f 95 c1	 setne	 cl
  00023	8a c1		 mov	 al, cl
  00025	5e		 pop	 esi

; 217  : 		}

  00026	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator!=
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $LN5@Eos
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 2115 : 		}

  00014	c2 04 00	 ret	 4

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$LN5@Eos:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 2115 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
EXTRN	??0_Mutex@std@@QAE@XZ:PROC			; std::_Mutex::_Mutex
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__unwindtable$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ$0
__ehfuncinfo$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	ENDS
;	COMDAT ??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
_TEXT	SEGMENT
__Lock$143973 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 28   : 		{	// construct with no buffers

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b d9		 mov	 ebx, ecx
  00028	89 5c 24 14	 mov	 DWORD PTR _this$[esp+36], ebx
  0002c	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0002f	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
  00035	e8 00 00 00 00	 call	 ??0_Mutex@std@@QAE@XZ	; std::_Mutex::_Mutex
  0003a	6a 04		 push	 4
  0003c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 0
  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00049	8b f0		 mov	 esi, eax
  0004b	83 c4 04	 add	 esp, 4
  0004e	85 f6		 test	 esi, esi
  00050	74 30		 je	 SHORT $LN3@basic_stre@2
  00052	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Init
  00057	89 06		 mov	 DWORD PTR [esi], eax
  00059	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0005e	6a 00		 push	 0
  00060	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$143973[esp+40]
  00064	8b f8		 mov	 edi, eax
  00066	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0006b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0006e	83 f8 ff	 cmp	 eax, -1
  00071	73 04		 jae	 SHORT $LN8@basic_stre@2
  00073	40		 inc	 eax
  00074	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN8@basic_stre@2:
  00077	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$143973[esp+36]
  0007b	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00080	eb 02		 jmp	 SHORT $LN4@basic_stre@2
$LN3@basic_stre@2:
  00082	33 f6		 xor	 esi, esi
$LN4@basic_stre@2:

; 29   : 		_Init();

  00084	8b cb		 mov	 ecx, ebx
  00086	89 73 38	 mov	 DWORD PTR [ebx+56], esi
  00089	e8 00 00 00 00	 call	 ?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Init

; 30   : 		}

  0008e	8b c3		 mov	 eax, ebx
  00090	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  00094	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009b	59		 pop	 ecx
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	83 c4 14	 add	 esp, 20			; 00000014H
  000a2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1_Mutex@std@@QAE@XZ	; std::_Mutex::~_Mutex
__ehhandler$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  00012	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
PUBLIC	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos, COMDAT
; _this$ = ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00004	33 d2		 xor	 edx, edx
  00006	83 79 18 08	 cmp	 DWORD PTR [ecx+24], 8
  0000a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000d	72 0a		 jb	 SHORT $LN5@Eos@2
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 2115 : 		}

  00016	c2 04 00	 ret	 4

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$LN5@Eos@2:
  00019	66 89 54 41 04	 mov	 WORD PTR [ecx+eax*2+4], dx

; 2115 : 		}

  0001e	c2 04 00	 ret	 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::max_size, COMDAT
; _this$ = ecx

; 731  : 		return (this->_Alval.max_size());

  00000	b8 e1 e1 e1 01	 mov	 eax, 31580641		; 01e1e1e1H

; 732  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z ; std::allocator<HostDevice>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z PROC ; std::allocator<HostDevice>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ; std::_Allocate<HostDevice>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z ENDP ; std::allocator<HostDevice>::allocate
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>::destroy
; Function compile flags: /Ogtpy
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1671 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1672 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1673 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 1671 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1672 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH

; 1673 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::allocate
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??Y?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 375  : 		(*(_Mybase *)this) += _Off;

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	85 c0		 test	 eax, eax
  00008	75 0b		 jne	 SHORT $LN28@operator@9
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	85 c0		 test	 eax, eax
  00013	74 04		 je	 SHORT $LN18@operator@9
$LN28@operator@9:
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	eb 02		 jmp	 SHORT $LN19@operator@9
$LN18@operator@9:
  00019	33 c9		 xor	 ecx, ecx
$LN19@operator@9:
  0001b	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  0001f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00022	69 ff 88 00 00
	00		 imul	 edi, 136		; 00000088H
  00028	03 d7		 add	 edx, edi
  0002a	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  0002d	77 0f		 ja	 SHORT $LN6@operator@9
  0002f	85 c0		 test	 eax, eax
  00031	74 04		 je	 SHORT $LN24@operator@9
  00033	8b 00		 mov	 eax, DWORD PTR [eax]
  00035	eb 02		 jmp	 SHORT $LN25@operator@9
$LN24@operator@9:
  00037	33 c0		 xor	 eax, eax
$LN25@operator@9:
  00039	3b 50 0c	 cmp	 edx, DWORD PTR [eax+12]
  0003c	73 05		 jae	 SHORT $LN29@operator@9
$LN6@operator@9:
  0003e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN29@operator@9:
  00043	01 7e 04	 add	 DWORD PTR [esi+4], edi
  00046	5f		 pop	 edi

; 376  : 		return (*this);

  00047	8b c6		 mov	 eax, esi
  00049	5e		 pop	 esi

; 377  : 		}

  0004a	c2 04 00	 ret	 4
??Y?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+=
_TEXT	ENDS
PUBLIC	??0?$_Ranit@UHostDevice@@HPBU1@ABU1@@std@@QAE@XZ ; std::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Ranit@UHostDevice@@HPBU1@ABU1@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Ranit@UHostDevice@@HPBU1@ABU1@@std@@QAE@XZ PROC	; std::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00008	c3		 ret	 0
??0?$_Ranit@UHostDevice@@HPBU1@ABU1@@std@@QAE@XZ ENDP	; std::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>::_Ranit<HostDevice,int,HostDevice const *,HostDevice const &>
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000c	83 c4 08	 add	 esp, 8

; 146  : 		}

  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memcpy_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 590  : 	}

  00020	c3		 ret	 0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >, COMDAT

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memcpy_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 590  : 	}

  00026	c3		 ret	 0
??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::move_s<std::char_traits<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<char> >, COMDAT

; 616  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First2$[esp-4]
  00008	8b 54 24 08	 mov	 edx, DWORD PTR __Size$[esp-4]
  0000c	56		 push	 esi
  0000d	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memmove_s
  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 617  : 	}

  00020	c3		 ret	 0
??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z PROC ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >, COMDAT

; 616  : 		return move_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __First2$[esp-4]
  00008	56		 push	 esi
  00009	8b 74 24 08	 mov	 esi, DWORD PTR __First1$[esp]
  0000d	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __Size$[esp]
  00014	51		 push	 ecx
  00015	52		 push	 edx
  00016	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  00019	51		 push	 ecx
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _memmove_s
  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 617  : 	}

  00026	c3		 ret	 0
??$move_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ENDP ; std::_Traits_helper::move_s<std::char_traits<wchar_t> >
_TEXT	ENDS
PUBLIC	??_7?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@ ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`vftable'
PUBLIC	??0?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >
PUBLIC	??_R4?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@ ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBX@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WJ@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
EXTRN	??_E?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAEPAXI@Z:PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
rdata$r	SEGMENT
??_R1A@?0A@EA@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 DD FLAT:??_R0?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 DD 00H ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@'
	DB	'_W@std@@@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@ DD 00H ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@8
	DD	FLAT:??_R3?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@
CONST	SEGMENT
??_7?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@ DD FLAT:??_R4?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@ ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`vftable'
	DD	FLAT:??_E?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAEPAXI@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBX@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WJ@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ??0?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >, COMDAT
; _this$ = ecx

; 1063 : 		{	// construct from specified locale

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Refs$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@

; 1064 : 		_Init(_Lobj);

  00010	e8 00 00 00 00	 call	 __Getcvt
  00015	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00018	89 56 0c	 mov	 DWORD PTR [esi+12], edx

; 1065 : 		}

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 08 00	 ret	 8
??0?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAPADPADID@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAPADPADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADPADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 495  : //		_DEBUG_POINTER(_First);
; 496  : 		return ((_Elem *)::memset(_First, _Ch, _Count));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	0f be 4c 24 0c	 movsx	 ecx, BYTE PTR __Ch$[esp-4]
  00009	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	52		 push	 edx
  00010	e8 00 00 00 00	 call	 _memset
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 497  : 		}

  00018	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPADPADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ	; std::_Locinfo::_Getlconv
EXTRN	_localeconv:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
;	COMDAT ?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ
_TEXT	SEGMENT
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ PROC		; std::_Locinfo::_Getlconv, COMDAT
; _this$ = ecx

; 134  : 		return (localeconv());

  00000	e9 00 00 00 00	 jmp	 _localeconv
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ ENDP		; std::_Locinfo::_Getlconv
_TEXT	ENDS
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	?_Getfalse@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Getfalse
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?_Getfalse@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Getfalse@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Getfalse, COMDAT
; _this$ = ecx

; 172  : 		return ("false");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05LAPONLG@false?$AA@

; 173  : 		}

  00005	c3		 ret	 0
?_Getfalse@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Getfalse
_TEXT	ENDS
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	?_Gettrue@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Gettrue
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?_Gettrue@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Gettrue@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Gettrue, COMDAT
; _this$ = ecx

; 177  : 		return ("true");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04LOAJBDKD@true?$AA@

; 178  : 		}

  00005	c3		 ret	 0
?_Gettrue@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Gettrue
_TEXT	ENDS
PUBLIC	??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z	; std::_Maklocchr<wchar_t>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Wc$ = -8						; size = 2
__Mbst1$ = -4						; size = 4
__Byte$ = 8						; size = 1
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocchr<wchar_t>, COMDAT

; 609  : 	{	// convert char to wchar_t using _Cvtvec

  00000	83 ec 08	 sub	 esp, 8

; 610  : 	wchar_t _Wc = L'\0';

  00003	33 c0		 xor	 eax, eax
  00005	89 04 24	 mov	 DWORD PTR __Wc$[esp+8], eax

; 611  : 	_Mbstinit(_Mbst1);

  00008	89 44 24 04	 mov	 DWORD PTR __Mbst1$[esp+8], eax

; 612  : 	_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);

  0000c	8b 44 24 14	 mov	 eax, DWORD PTR __Cvt$[esp+4]
  00010	50		 push	 eax
  00011	8d 4c 24 08	 lea	 ecx, DWORD PTR __Mbst1$[esp+12]
  00015	51		 push	 ecx
  00016	6a 01		 push	 1
  00018	8d 54 24 18	 lea	 edx, DWORD PTR __Byte$[esp+16]
  0001c	52		 push	 edx
  0001d	8d 44 24 10	 lea	 eax, DWORD PTR __Wc$[esp+24]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 __Mbrtowc

; 613  : 	return (_Wc);

  00027	66 8b 44 24 14	 mov	 ax, WORD PTR __Wc$[esp+28]

; 614  : 	}

  0002c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002f	c3		 ret	 0
??$_Maklocchr@_W@std@@YA_WDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocchr<wchar_t>
_TEXT	ENDS
PUBLIC	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
; Function compile flags: /Ogtpy
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Mbst1$ = -12						; size = 4
__Mbst2$ = -8						; size = 4
__Count1$ = -4						; size = 4
__Wc$ = 8						; size = 2
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocstr<wchar_t>, COMDAT

; 640  : 	{	// convert C string to wchar_t sequence using _Cvtvec

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00003	53		 push	 ebx

; 641  : 	size_t _Count, _Count1;
; 642  : 	size_t _Wchars;
; 643  : 	const char *_Ptr1;
; 644  : 	int _Bytes;
; 645  : 	wchar_t _Wc;
; 646  : 	_Mbstinit(_Mbst1);
; 647  : 
; 648  : 	_Count1 = ::strlen(_Ptr) + 1;

  00004	8b 5c 24 14	 mov	 ebx, DWORD PTR __Ptr$[esp+12]
  00008	55		 push	 ebp
  00009	56		 push	 esi
  0000a	33 f6		 xor	 esi, esi
  0000c	8b c3		 mov	 eax, ebx
  0000e	57		 push	 edi
  0000f	89 74 24 10	 mov	 DWORD PTR __Mbst1$[esp+28], esi
  00013	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL17@Maklocstr:
  00016	8a 08		 mov	 cl, BYTE PTR [eax]
  00018	40		 inc	 eax
  00019	84 c9		 test	 cl, cl
  0001b	75 f9		 jne	 SHORT $LL17@Maklocstr
  0001d	2b c2		 sub	 eax, edx
  0001f	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00022	89 7c 24 18	 mov	 DWORD PTR __Count1$[esp+28], edi

; 649  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00026	8b eb		 mov	 ebp, ebx

; 650  : 		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)

  00028	3b fe		 cmp	 edi, esi
  0002a	76 2a		 jbe	 SHORT $LN13@Maklocstr
  0002c	8d 64 24 00	 npad	 4
$LL8@Maklocstr:

; 651  : 		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)

  00030	8b 44 24 28	 mov	 eax, DWORD PTR __Cvt$[esp+24]
  00034	50		 push	 eax
  00035	8d 4c 24 14	 lea	 ecx, DWORD PTR __Mbst1$[esp+32]
  00039	51		 push	 ecx
  0003a	57		 push	 edi
  0003b	8d 54 24 2c	 lea	 edx, DWORD PTR __Wc$[esp+36]
  0003f	55		 push	 ebp
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 __Mbrtowc
  00046	83 c4 14	 add	 esp, 20			; 00000014H
  00049	85 c0		 test	 eax, eax
  0004b	7e 09		 jle	 SHORT $LN13@Maklocstr
  0004d	2b f8		 sub	 edi, eax
  0004f	03 e8		 add	 ebp, eax
  00051	46		 inc	 esi
  00052	85 ff		 test	 edi, edi
  00054	77 da		 ja	 SHORT $LL8@Maklocstr
$LN13@Maklocstr:

; 652  : 			break;
; 653  : 	++_Wchars;	// count terminating nul

  00056	46		 inc	 esi

; 654  : 
; 655  : 	wchar_t *_Ptrdest = _NEW_CRT wchar_t[_Wchars];

  00057	33 c9		 xor	 ecx, ecx
  00059	8b c6		 mov	 eax, esi
  0005b	ba 02 00 00 00	 mov	 edx, 2
  00060	f7 e2		 mul	 edx
  00062	0f 90 c1	 seto	 cl
  00065	f7 d9		 neg	 ecx
  00067	0b c8		 or	 ecx, eax
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0006f	83 c4 04	 add	 esp, 4
  00072	8b e8		 mov	 ebp, eax

; 656  : 	wchar_t *_Ptrnext = _Ptrdest;

  00074	8b fd		 mov	 edi, ebp

; 657  : 	_Mbstinit(_Mbst2);

  00076	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __Mbst2$[esp+28], 0

; 658  : #pragma warning(push)
; 659  : #pragma warning(disable: 6011)
; 660  : 	/* prefast noise */
; 661  : 	for (; 0 < _Wchars;
; 662  : 		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)

  0007e	85 f6		 test	 esi, esi
  00080	76 27		 jbe	 SHORT $LN14@Maklocstr
$LL4@Maklocstr:

; 663  : 		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)

  00082	8b 44 24 28	 mov	 eax, DWORD PTR __Cvt$[esp+24]
  00086	8b 54 24 18	 mov	 edx, DWORD PTR __Count1$[esp+28]
  0008a	50		 push	 eax
  0008b	8d 4c 24 18	 lea	 ecx, DWORD PTR __Mbst2$[esp+32]
  0008f	51		 push	 ecx
  00090	52		 push	 edx
  00091	53		 push	 ebx
  00092	57		 push	 edi
  00093	e8 00 00 00 00	 call	 __Mbrtowc
  00098	83 c4 14	 add	 esp, 20			; 00000014H
  0009b	85 c0		 test	 eax, eax
  0009d	7e 0a		 jle	 SHORT $LN14@Maklocstr
  0009f	4e		 dec	 esi
  000a0	03 d8		 add	 ebx, eax
  000a2	83 c7 02	 add	 edi, 2
  000a5	85 f6		 test	 esi, esi
  000a7	77 d9		 ja	 SHORT $LL4@Maklocstr
$LN14@Maklocstr:

; 664  : 			break;
; 665  : 	*_Ptrnext = L'\0';

  000a9	33 c0		 xor	 eax, eax
  000ab	66 89 07	 mov	 WORD PTR [edi], ax
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi

; 666  : #pragma warning(pop)
; 667  : 	return (_Ptrdest);

  000b0	8b c5		 mov	 eax, ebp
  000b2	5d		 pop	 ebp
  000b3	5b		 pop	 ebx

; 668  : 	}

  000b4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b7	c3		 ret	 0
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<wchar_t>
_TEXT	ENDS
PUBLIC	?precision@ios_base@std@@QBEHXZ			; std::ios_base::precision
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
;	COMDAT ?precision@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?precision@ios_base@std@@QBEHXZ PROC			; std::ios_base::precision, COMDAT
; _this$ = ecx

; 407  : 		return (_Prec);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 408  : 		}

  00003	c3		 ret	 0
?precision@ios_base@std@@QBEHXZ ENDP			; std::ios_base::precision
_TEXT	ENDS
PUBLIC	??1?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAE@XZ ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::~num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ??1?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAE@XZ
_TEXT	SEGMENT
??1?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAE@XZ PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::~num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >, COMDAT
; _this$ = ecx

; 1042 : 		}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
  00006	c3		 ret	 0
??1?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAE@XZ ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::~num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAEPAXI@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0000e	74 09		 je	 SHORT $LN8@scalar@15
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$LN8@scalar@15:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_G?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAEPAXI@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Ffmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ffmt
; Function compile flags: /Ogtpy
;	COMDAT ?_Ffmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 1
__Flags$ = 20						; size = 4
?_Ffmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADDH@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ffmt, COMDAT

; 1289 : 		char *_Ptr = _Fmt;
; 1290 : 		*_Ptr++ = '%';

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Fmt$[esp-4]

; 1291 : 
; 1292 : 		if (_Flags & ios_base::showpos)

  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Flags$[esp-4]
  00008	c6 00 25	 mov	 BYTE PTR [eax], 37	; 00000025H
  0000b	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000e	f6 c2 20	 test	 dl, 32			; 00000020H
  00011	74 04		 je	 SHORT $LN3@Ffmt

; 1293 : 			*_Ptr++ = '+';

  00013	c6 01 2b	 mov	 BYTE PTR [ecx], 43	; 0000002bH
  00016	41		 inc	 ecx
$LN3@Ffmt:

; 1294 : 		if (_Flags & ios_base::showpoint)

  00017	f6 c2 10	 test	 dl, 16			; 00000010H
  0001a	74 04		 je	 SHORT $LN2@Ffmt

; 1295 : 			*_Ptr++ = '#';

  0001c	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  0001f	41		 inc	 ecx
$LN2@Ffmt:

; 1296 : 		*_Ptr++ = '.';

  00020	c6 01 2e	 mov	 BYTE PTR [ecx], 46	; 0000002eH
  00023	41		 inc	 ecx
  00024	53		 push	 ebx

; 1297 : 		*_Ptr++ = '*';	// for precision argument
; 1298 : 		if (_Spec != '\0')

  00025	8a 5c 24 10	 mov	 bl, BYTE PTR __Spec$[esp]
  00029	c6 01 2a	 mov	 BYTE PTR [ecx], 42	; 0000002aH
  0002c	41		 inc	 ecx
  0002d	84 db		 test	 bl, bl
  0002f	74 03		 je	 SHORT $LN1@Ffmt

; 1299 : 			*_Ptr++ = _Spec;	// 'L' qualifier for long double only

  00031	88 19		 mov	 BYTE PTR [ecx], bl
  00033	41		 inc	 ecx
$LN1@Ffmt:

; 1300 : 
; 1301 : 		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;

  00034	81 e2 00 30 00
	00		 and	 edx, 12288		; 00003000H
  0003a	5b		 pop	 ebx

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0003b	81 fa 00 20 00
	00		 cmp	 edx, 8192		; 00002000H
  00041	75 09		 jne	 SHORT $LN8@Ffmt
  00043	b2 66		 mov	 dl, 102			; 00000066H
  00045	88 11		 mov	 BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

  00047	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

  0004b	c3		 ret	 0
$LN8@Ffmt:

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0004c	81 fa 00 30 00
	00		 cmp	 edx, 12288		; 00003000H
  00052	75 09		 jne	 SHORT $LN6@Ffmt
  00054	b2 61		 mov	 dl, 97			; 00000061H
  00056	88 11		 mov	 BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

  00058	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

  0005c	c3		 ret	 0
$LN6@Ffmt:

; 1302 : 		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
; 1303 : 			: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1304 : 			: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier

  0005d	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00063	0f 95 c2	 setne	 dl
  00066	8d 54 12 65	 lea	 edx, DWORD PTR [edx+edx+101]
  0006a	88 11		 mov	 BYTE PTR [ecx], dl

; 1305 : 		*_Ptr = '\0';

  0006c	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 1306 : 		return (_Fmt);
; 1307 : 		}

  00070	c3		 ret	 0
?_Ffmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADDH@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ffmt
_TEXT	ENDS
PUBLIC	?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ifmt
; Function compile flags: /Ogtpy
;	COMDAT ?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 4
__Flags$ = 20						; size = 4
?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ifmt, COMDAT

; 1432 : 		char *_Ptr = _Fmt;
; 1433 : 		*_Ptr++ = '%';

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Fmt$[esp-4]

; 1434 : 
; 1435 : 		if (_Flags & ios_base::showpos)

  00004	8b 54 24 10	 mov	 edx, DWORD PTR __Flags$[esp-4]
  00008	c6 00 25	 mov	 BYTE PTR [eax], 37	; 00000025H
  0000b	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000e	f6 c2 20	 test	 dl, 32			; 00000020H
  00011	74 04		 je	 SHORT $LN4@Ifmt

; 1436 : 			*_Ptr++ = '+';

  00013	c6 01 2b	 mov	 BYTE PTR [ecx], 43	; 0000002bH
  00016	41		 inc	 ecx
$LN4@Ifmt:

; 1437 : 		if (_Flags & ios_base::showbase)

  00017	f6 c2 08	 test	 dl, 8
  0001a	74 04		 je	 SHORT $LN3@Ifmt

; 1438 : 			*_Ptr++ = '#';

  0001c	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  0001f	41		 inc	 ecx
$LN3@Ifmt:
  00020	53		 push	 ebx
  00021	56		 push	 esi
  00022	57		 push	 edi

; 1439 : 		if (_Spec[0] != 'L')

  00023	8b 7c 24 18	 mov	 edi, DWORD PTR __Spec$[esp+8]
  00027	8a 1f		 mov	 bl, BYTE PTR [edi]
  00029	80 fb 4c	 cmp	 bl, 76			; 0000004cH
  0002c	74 04		 je	 SHORT $LN2@Ifmt

; 1440 : 			*_Ptr++ = _Spec[0];	// qualifier

  0002e	88 19		 mov	 BYTE PTR [ecx], bl

; 1441 : 		else

  00030	eb 0b		 jmp	 SHORT $LN11@Ifmt
$LN2@Ifmt:

; 1442 : 			{	/* change L to I64 */
; 1443 : 			*_Ptr++ = 'I';

  00032	c6 01 49	 mov	 BYTE PTR [ecx], 73	; 00000049H
  00035	41		 inc	 ecx

; 1444 : 			*_Ptr++ = '6';

  00036	c6 01 36	 mov	 BYTE PTR [ecx], 54	; 00000036H
  00039	41		 inc	 ecx

; 1445 : 			*_Ptr++ = '4';

  0003a	c6 01 34	 mov	 BYTE PTR [ecx], 52	; 00000034H
$LN11@Ifmt:

; 1446 : 			}
; 1447 : 
; 1448 : 		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  0003d	8b f2		 mov	 esi, edx
  0003f	81 e6 00 0e 00
	00		 and	 esi, 3584		; 00000e00H
  00045	41		 inc	 ecx

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  00046	81 fe 00 04 00
	00		 cmp	 esi, 1024		; 00000400H
  0004c	75 0c		 jne	 SHORT $LN9@Ifmt
  0004e	5f		 pop	 edi
  0004f	b2 6f		 mov	 dl, 111			; 0000006fH
  00051	5e		 pop	 esi
  00052	88 11		 mov	 BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

  00054	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  00058	5b		 pop	 ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

  00059	c3		 ret	 0
$LN9@Ifmt:

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  0005a	81 fe 00 08 00
	00		 cmp	 esi, 2048		; 00000800H
  00060	74 0d		 je	 SHORT $LN7@Ifmt
  00062	8a 57 01	 mov	 dl, BYTE PTR [edi+1]
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	88 11		 mov	 BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

  00069	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  0006d	5b		 pop	 ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

  0006e	c3		 ret	 0
$LN7@Ifmt:

; 1449 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
; 1450 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1451 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';

  0006f	02 d2		 add	 dl, dl
  00071	02 d2		 add	 dl, dl
  00073	02 d2		 add	 dl, dl
  00075	f6 d2		 not	 dl
  00077	80 e2 20	 and	 dl, 32			; 00000020H
  0007a	5f		 pop	 edi
  0007b	80 ca 58	 or	 dl, 88			; 00000058H
  0007e	5e		 pop	 esi
  0007f	88 11		 mov	 BYTE PTR [ecx], dl

; 1452 : 		*_Ptr = '\0';

  00081	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  00085	5b		 pop	 ebx

; 1453 : 		return (_Fmt);
; 1454 : 		}

  00086	c3		 ret	 0
?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ifmt
_TEXT	ENDS
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 1557 : 		{	// subscript mutable sequence

  00000	56		 push	 esi
  00001	57		 push	 edi

; 1558 : 
; 1559 :  #if _HAS_ITERATOR_DEBUGGING
; 1560 : 		// skip debug checks if the container is initizialed with _IGNORE_MYITERLIST
; 1561 : 		if (this->_Myfirstiter != _IGNORE_MYITERLIST)
; 1562 : 			{
; 1563 : 			if (_Mysize < _Off)
; 1564 : 				{
; 1565 : 				_DEBUG_ERROR("string subscript out of range");
; 1566 : 				_SCL_SECURE_OUT_OF_RANGE;
; 1567 : 				}
; 1568 : 			}
; 1569 :  #else
; 1570 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= _Mysize);

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Off$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	3b 7e 14	 cmp	 edi, DWORD PTR [esi+20]
  0000b	76 05		 jbe	 SHORT $LN3@operator@10
  0000d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@operator@10:

; 1571 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1572 : 
; 1573 : 		return (_Myptr()[_Off]);

  00012	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00016	72 0b		 jb	 SHORT $LN9@operator@10
  00018	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  0001b	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 1574 : 		}

  00020	c2 04 00	 ret	 4

; 1571 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1572 : 
; 1573 : 		return (_Myptr()[_Off]);

$LN9@operator@10:
  00023	8d 44 3e 04	 lea	 eax, DWORD PTR [esi+edi+4]
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi

; 1574 : 		}

  00029	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
PUBLIC	??D?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ??D?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??D?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator*, COMDAT
; _this$ = ecx

; 601  : 		{	// pretend to get designated element

  00000	8b c1		 mov	 eax, ecx

; 602  : 		return (*this);
; 603  : 		}

  00002	c3		 ret	 0
??D?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator*
_TEXT	ENDS
PUBLIC	??E?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator++, COMDAT
; _this$ = ecx

; 606  : 		{	// pretend to preincrement

  00000	8b c1		 mov	 eax, ecx

; 607  : 		return (*this);
; 608  : 		}

  00002	c3		 ret	 0
??E?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator++
_TEXT	ENDS
PUBLIC	?decimal_point@?$numpunct@_W@std@@QBE_WXZ	; std::numpunct<wchar_t>::decimal_point
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?decimal_point@?$numpunct@_W@std@@QBE_WXZ
_TEXT	SEGMENT
?decimal_point@?$numpunct@_W@std@@QBE_WXZ PROC		; std::numpunct<wchar_t>::decimal_point, COMDAT
; _this$ = ecx

; 70   : 		return (do_decimal_point());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00005	ff e2		 jmp	 edx
?decimal_point@?$numpunct@_W@std@@QBE_WXZ ENDP		; std::numpunct<wchar_t>::decimal_point
_TEXT	ENDS
PUBLIC	?thousands_sep@?$numpunct@_W@std@@QBE_WXZ	; std::numpunct<wchar_t>::thousands_sep
; Function compile flags: /Ogtpy
;	COMDAT ?thousands_sep@?$numpunct@_W@std@@QBE_WXZ
_TEXT	SEGMENT
?thousands_sep@?$numpunct@_W@std@@QBE_WXZ PROC		; std::numpunct<wchar_t>::thousands_sep, COMDAT
; _this$ = ecx

; 75   : 		return (do_thousands_sep());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00005	ff e2		 jmp	 edx
?thousands_sep@?$numpunct@_W@std@@QBE_WXZ ENDP		; std::numpunct<wchar_t>::thousands_sep
_TEXT	ENDS
PUBLIC	?_Tidy@?$numpunct@_W@std@@AAEXXZ		; std::numpunct<wchar_t>::_Tidy
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$numpunct@_W@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$numpunct@_W@std@@AAEXXZ PROC			; std::numpunct<wchar_t>::_Tidy, COMDAT
; _this$ = ecx

; 190  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 191  : 		_DELETE_CRT_VEC((void *)_Grouping);

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 192  : 		_DELETE_CRT_VEC((void *)_Falsename);

  0000c	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 193  : 		_DELETE_CRT_VEC((void *)_Truename);

  00015	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00018	52		 push	 edx
  00019	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	5e		 pop	 esi

; 194  : 		}

  00022	c3		 ret	 0
?_Tidy@?$numpunct@_W@std@@AAEXXZ ENDP			; std::numpunct<wchar_t>::_Tidy
_TEXT	ENDS
PUBLIC	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign, COMDAT
; _this$ = ecx

; 2076 : 		if (_Count == 1)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	83 f8 01	 cmp	 eax, 1
  00007	75 28		 jne	 SHORT $LN2@Chassign

; 2077 : 			_Traits::assign(*(_Myptr() + _Off), _Ch);

  00009	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  0000d	72 11		 jb	 SHORT $LN7@Chassign
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	8a 44 24 0c	 mov	 al, BYTE PTR __Ch$[esp-4]
  00016	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  0001a	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 2080 : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH

; 2077 : 			_Traits::assign(*(_Myptr() + _Off), _Ch);

$LN7@Chassign:
  00020	8a 44 24 0c	 mov	 al, BYTE PTR __Ch$[esp-4]
  00024	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00028	83 c1 04	 add	 ecx, 4
  0002b	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 2080 : 		}

  0002e	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Chassign:

; 2078 : 		else
; 2079 : 			_Traits::assign(_Myptr() + _Off, _Count, _Ch);

  00031	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00035	72 05		 jb	 SHORT $LN13@Chassign
  00037	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0003a	eb 03		 jmp	 SHORT $LN14@Chassign
$LN13@Chassign:
  0003c	83 c1 04	 add	 ecx, 4
$LN14@Chassign:
  0003f	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00043	50		 push	 eax
  00044	0f be 44 24 10	 movsx	 eax, BYTE PTR __Ch$[esp]
  00049	50		 push	 eax
  0004a	03 ca		 add	 ecx, edx
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 _memset
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2080 : 		}

  00055	c2 0c 00	 ret	 12			; 0000000cH
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
_TEXT	ENDS
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 624  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	56		 push	 esi
  00001	57		 push	 edi

; 625  : 	size_t _Count = ::strlen(_Ptr) + 1;

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00006	8b c7		 mov	 eax, edi
  00008	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL8@Maklocstr@2:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL8@Maklocstr@2
  00017	2b c2		 sub	 eax, edx
  00019	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 626  : 	_Elem *_Ptrdest = _NEW_CRT _Elem[_Count];

  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00022	83 c4 04	 add	 esp, 4

; 627  : 
; 628  : #pragma warning(push)
; 629  : #pragma warning(disable: 6011)
; 630  : 	/* prefast noise */
; 631  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  00025	8b c8		 mov	 ecx, eax
  00027	85 f6		 test	 esi, esi
  00029	76 10		 jbe	 SHORT $LN1@Maklocstr@2
  0002b	eb 03 8d 49 00	 npad	 5
$LL3@Maklocstr@2:

; 632  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  00030	8a 17		 mov	 dl, BYTE PTR [edi]
  00032	88 11		 mov	 BYTE PTR [ecx], dl
  00034	4e		 dec	 esi
  00035	41		 inc	 ecx
  00036	47		 inc	 edi
  00037	85 f6		 test	 esi, esi
  00039	77 f5		 ja	 SHORT $LL3@Maklocstr@2
$LN1@Maklocstr@2:
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi

; 633  : 	return (_Ptrdest);
; 634  : #pragma warning(pop)
; 635  : 	}

  0003d	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
PUBLIC	??4?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_W@Z ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ??4?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_W@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 2
??4?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_W@Z PROC ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 592  : 		{	// store element and increment

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 593  : 		if (_Strbuf == 0
; 594  : 			|| traits_type::eq_int_type(_Traits::eof(),
; 595  : 				_Strbuf->sputc(_Right)))

  00003	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00006	85 c9		 test	 ecx, ecx
  00008	74 43		 je	 SHORT $LN1@operator@11
  0000a	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0000d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00010	74 22		 je	 SHORT $LN7@operator@11
  00012	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00015	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00018	7e 1a		 jle	 SHORT $LN7@operator@11
  0001a	8b c2		 mov	 eax, edx
  0001c	ff 08		 dec	 DWORD PTR [eax]
  0001e	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  00026	89 11		 mov	 DWORD PTR [ecx], edx
  00028	8b 4c 24 08	 mov	 ecx, DWORD PTR __Right$[esp]
  0002c	66 89 08	 mov	 WORD PTR [eax], cx
  0002f	0f b7 c1	 movzx	 eax, cx
  00032	eb 0f		 jmp	 SHORT $LN8@operator@11
$LN7@operator@11:
  00034	8b 01		 mov	 eax, DWORD PTR [ecx]
  00036	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp]
  0003a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003d	52		 push	 edx
  0003e	ff d0		 call	 eax
  00040	0f b7 c0	 movzx	 eax, ax
$LN8@operator@11:
  00043	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00048	66 3b c8	 cmp	 cx, ax
  0004b	75 03		 jne	 SHORT $LN23@operator@11
$LN1@operator@11:

; 596  : 			_Failed = true;

  0004d	c6 06 01	 mov	 BYTE PTR [esi], 1
$LN23@operator@11:

; 597  : 		return (*this);

  00050	8b c6		 mov	 eax, esi
  00052	5e		 pop	 esi

; 598  : 		}

  00053	c2 04 00	 ret	 4
??4?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_W@Z ENDP ; std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >::operator=
_TEXT	ENDS
PUBLIC	?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<wchar_t>::_Init
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__catchsym$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z$0
__unwindtable$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z$2
__ehfuncinfo$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z
_TEXT	SEGMENT
$T144371 = -44						; size = 8
$T144370 = -44						; size = 8
$T144369 = -44						; size = 8
$T144368 = -44						; size = 8
$T144367 = -44						; size = 8
_this$ = -40						; size = 4
__Mbst1$144459 = -36					; size = 4
__Mbst1$144448 = -36					; size = 4
__Mbst1$144432 = -36					; size = 4
__Mbst1$144421 = -36					; size = 4
__Ptr$ = -36						; size = 4
$T144366 = -32						; size = 8
$T144365 = -32						; size = 8
tv175 = -28						; size = 4
__Wc$144447 = -24					; size = 2
__Wc$144458 = -24					; size = 2
__Wc$144420 = -24					; size = 2
__Wc$144431 = -24					; size = 2
$T144395 = -24						; size = 4
$T144433 = -20						; size = 1
$T144422 = -20						; size = 1
__$EHRec$ = -16						; size = 16
__Lobj$ = 8						; size = 4
$T144460 = 12						; size = 1
$T144449 = 12						; size = 1
__Isdef$ = 12						; size = 1
?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z PROC	; std::numpunct<wchar_t>::_Init, COMDAT
; _this$ = ecx

; 135  : 		{	// initialize from _Lobj

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 d8	 mov	 DWORD PTR _this$[ebp], esi

; 136  : 		const lconv *_Ptr = _Lobj._Getlconv();

  00030	e8 00 00 00 00	 call	 _localeconv

; 137  : 
; 138  : 		_Grouping = 0;

  00035	33 db		 xor	 ebx, ebx
  00037	8b f8		 mov	 edi, eax
  00039	89 7d dc	 mov	 DWORD PTR __Ptr$[ebp], edi
  0003c	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 139  : 		_Falsename = 0;

  0003f	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 140  : 		_Truename = 0;

  00042	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 141  : 
; 142  : 		_TRY_BEGIN

  00045	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 143  : 		_Grouping = _MAKLOCSTR(char, _Ptr->grouping, _Lobj._Getcvt());

  00048	e8 00 00 00 00	 call	 __Getcvt
  0004d	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00050	89 45 e8	 mov	 DWORD PTR $T144395[ebp], eax
  00053	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL46@Init:
  00056	8a 08		 mov	 cl, BYTE PTR [eax]
  00058	40		 inc	 eax
  00059	3a cb		 cmp	 cl, bl
  0005b	75 f9		 jne	 SHORT $LL46@Init
  0005d	2b c2		 sub	 eax, edx
  0005f	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00062	57		 push	 edi
  00063	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00068	83 c4 04	 add	 esp, 4
  0006b	89 45 e4	 mov	 DWORD PTR tv175[ebp], eax
  0006e	8b c8		 mov	 ecx, eax
$LL15@Init:
  00070	3b fb		 cmp	 edi, ebx
  00072	76 0f		 jbe	 SHORT $LN13@Init
  00074	8b 55 e8	 mov	 edx, DWORD PTR $T144395[ebp]
  00077	8a 02		 mov	 al, BYTE PTR [edx]
  00079	88 01		 mov	 BYTE PTR [ecx], al
  0007b	4f		 dec	 edi
  0007c	41		 inc	 ecx
  0007d	42		 inc	 edx
  0007e	89 55 e8	 mov	 DWORD PTR $T144395[ebp], edx
  00081	eb ed		 jmp	 SHORT $LL15@Init
$LN13@Init:
  00083	8b 4d e4	 mov	 ecx, DWORD PTR tv175[ebp]
  00086	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 144  : 		_Falsename = _MAKLOCSTR(_Elem, _Lobj._Getfalse(), _Lobj._Getcvt());

  00089	e8 00 00 00 00	 call	 __Getcvt
  0008e	89 55 e4	 mov	 DWORD PTR $T144365[ebp+4], edx
  00091	8d 55 e0	 lea	 edx, DWORD PTR $T144365[ebp]
  00094	52		 push	 edx
  00095	53		 push	 ebx
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_05LAPONLG@false?$AA@
  0009b	89 45 e0	 mov	 DWORD PTR $T144365[ebp], eax
  0009e	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a6	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 145  : 		_Truename = _MAKLOCSTR(_Elem, _Lobj._Gettrue(), _Lobj._Getcvt());

  000a9	e8 00 00 00 00	 call	 __Getcvt
  000ae	89 45 e0	 mov	 DWORD PTR $T144366[ebp], eax
  000b1	8d 45 e0	 lea	 eax, DWORD PTR $T144366[ebp]
  000b4	50		 push	 eax
  000b5	53		 push	 ebx
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_04LOAJBDKD@true?$AA@
  000bb	89 55 e4	 mov	 DWORD PTR $T144366[ebp+4], edx
  000be	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c6	89 46 14	 mov	 DWORD PTR [esi+20], eax
  000c9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 149  : 		_CATCH_END
; 150  : 
; 151  : 		_Dp = _MAKLOCCHR(_Elem, _Ptr->decimal_point[0], _Lobj._Getcvt());

  000d0	e8 00 00 00 00	 call	 __Getcvt
  000d5	8b 7d dc	 mov	 edi, DWORD PTR __Ptr$[ebp]
  000d8	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000da	89 45 d4	 mov	 DWORD PTR $T144367[ebp], eax
  000dd	89 55 d8	 mov	 DWORD PTR $T144367[ebp+4], edx
  000e0	8a 11		 mov	 dl, BYTE PTR [ecx]
  000e2	8d 45 d4	 lea	 eax, DWORD PTR $T144367[ebp]
  000e5	50		 push	 eax
  000e6	8d 4d dc	 lea	 ecx, DWORD PTR __Mbst1$144421[ebp]
  000e9	51		 push	 ecx
  000ea	88 55 ec	 mov	 BYTE PTR $T144422[ebp], dl
  000ed	6a 01		 push	 1
  000ef	8d 55 ec	 lea	 edx, DWORD PTR $T144422[ebp]
  000f2	52		 push	 edx
  000f3	8d 45 e8	 lea	 eax, DWORD PTR __Wc$144420[ebp]
  000f6	50		 push	 eax
  000f7	89 5d e8	 mov	 DWORD PTR __Wc$144420[ebp], ebx
  000fa	89 5d dc	 mov	 DWORD PTR __Mbst1$144421[ebp], ebx
  000fd	e8 00 00 00 00	 call	 __Mbrtowc
  00102	66 8b 4d e8	 mov	 cx, WORD PTR __Wc$144420[ebp]
  00106	66 89 4e 0c	 mov	 WORD PTR [esi+12], cx

; 152  : 		_Kseparator =
; 153  : 			_MAKLOCCHR(_Elem, _Ptr->thousands_sep[0], _Lobj._Getcvt());

  0010a	e8 00 00 00 00	 call	 __Getcvt
  0010f	89 55 d8	 mov	 DWORD PTR $T144368[ebp+4], edx
  00112	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00115	89 45 d4	 mov	 DWORD PTR $T144368[ebp], eax
  00118	8a 02		 mov	 al, BYTE PTR [edx]
  0011a	8d 4d d4	 lea	 ecx, DWORD PTR $T144368[ebp]
  0011d	51		 push	 ecx
  0011e	8d 55 dc	 lea	 edx, DWORD PTR __Mbst1$144432[ebp]
  00121	52		 push	 edx
  00122	88 45 ec	 mov	 BYTE PTR $T144433[ebp], al
  00125	6a 01		 push	 1
  00127	8d 45 ec	 lea	 eax, DWORD PTR $T144433[ebp]
  0012a	50		 push	 eax
  0012b	8d 4d e8	 lea	 ecx, DWORD PTR __Wc$144431[ebp]
  0012e	51		 push	 ecx
  0012f	89 5d e8	 mov	 DWORD PTR __Wc$144431[ebp], ebx
  00132	89 5d dc	 mov	 DWORD PTR __Mbst1$144432[ebp], ebx
  00135	e8 00 00 00 00	 call	 __Mbrtowc
  0013a	66 8b 55 e8	 mov	 dx, WORD PTR __Wc$144431[ebp]
  0013e	83 c4 28	 add	 esp, 40			; 00000028H
  00141	66 89 56 0e	 mov	 WORD PTR [esi+14], dx

; 154  : 
; 155  : 		if (_Isdef)

  00145	38 5d 0c	 cmp	 BYTE PTR __Isdef$[ebp], bl
  00148	0f 84 82 00 00
	00		 je	 $LN1@Init

; 156  : 			{	// apply defaults for required facets
; 157  : 			_Grouping = _MAKLOCSTR(char, "", _Lobj._Getcvt());

  0014e	e8 00 00 00 00	 call	 __Getcvt
  00153	8d 45 d4	 lea	 eax, DWORD PTR $T144369[ebp]
  00156	50		 push	 eax
  00157	53		 push	 ebx
  00158	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0015d	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00162	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 158  : 			_Dp = _MAKLOCCHR(_Elem, '.', _Lobj._Getcvt());

  00165	e8 00 00 00 00	 call	 __Getcvt
  0016a	8d 4d d4	 lea	 ecx, DWORD PTR $T144370[ebp]
  0016d	51		 push	 ecx
  0016e	89 55 d8	 mov	 DWORD PTR $T144370[ebp+4], edx
  00171	8d 55 dc	 lea	 edx, DWORD PTR __Mbst1$144448[ebp]
  00174	52		 push	 edx
  00175	89 45 d4	 mov	 DWORD PTR $T144370[ebp], eax
  00178	6a 01		 push	 1
  0017a	8d 45 0c	 lea	 eax, DWORD PTR $T144449[ebp]
  0017d	50		 push	 eax
  0017e	8d 4d e8	 lea	 ecx, DWORD PTR __Wc$144447[ebp]
  00181	51		 push	 ecx
  00182	c6 45 0c 2e	 mov	 BYTE PTR $T144449[ebp], 46 ; 0000002eH
  00186	89 5d e8	 mov	 DWORD PTR __Wc$144447[ebp], ebx
  00189	89 5d dc	 mov	 DWORD PTR __Mbst1$144448[ebp], ebx
  0018c	e8 00 00 00 00	 call	 __Mbrtowc
  00191	66 8b 55 e8	 mov	 dx, WORD PTR __Wc$144447[ebp]
  00195	66 89 56 0c	 mov	 WORD PTR [esi+12], dx

; 159  : 			_Kseparator = _MAKLOCCHR(_Elem, ',', _Lobj._Getcvt());

  00199	e8 00 00 00 00	 call	 __Getcvt
  0019e	89 45 d4	 mov	 DWORD PTR $T144371[ebp], eax
  001a1	8d 45 d4	 lea	 eax, DWORD PTR $T144371[ebp]
  001a4	50		 push	 eax
  001a5	8d 4d dc	 lea	 ecx, DWORD PTR __Mbst1$144459[ebp]
  001a8	51		 push	 ecx
  001a9	89 55 d8	 mov	 DWORD PTR $T144371[ebp+4], edx
  001ac	6a 01		 push	 1
  001ae	8d 55 0c	 lea	 edx, DWORD PTR $T144460[ebp]
  001b1	52		 push	 edx
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __Wc$144458[ebp]
  001b5	50		 push	 eax
  001b6	c6 45 0c 2c	 mov	 BYTE PTR $T144460[ebp], 44 ; 0000002cH
  001ba	89 5d e8	 mov	 DWORD PTR __Wc$144458[ebp], ebx
  001bd	89 5d dc	 mov	 DWORD PTR __Mbst1$144459[ebp], ebx
  001c0	e8 00 00 00 00	 call	 __Mbrtowc
  001c5	66 8b 4d e8	 mov	 cx, WORD PTR __Wc$144458[ebp]
  001c9	83 c4 34	 add	 esp, 52			; 00000034H
  001cc	66 89 4e 0e	 mov	 WORD PTR [esi+14], cx
$LN1@Init:

; 160  : 			}
; 161  : 		}

  001d0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001d3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001da	59		 pop	 ecx
  001db	5f		 pop	 edi
  001dc	5e		 pop	 esi
  001dd	5b		 pop	 ebx
  001de	8b e5		 mov	 esp, ebp
  001e0	5d		 pop	 ebp
  001e1	c2 08 00	 ret	 8
__catch$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z$0:

; 146  : 		_CATCH_ALL
; 147  : 		_Tidy();

  001e4	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e7	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@_W@std@@AAEXXZ ; std::numpunct<wchar_t>::_Tidy

; 148  : 		_RERAISE;

  001ec	33 db		 xor	 ebx, ebx
  001ee	53		 push	 ebx
  001ef	53		 push	 ebx
  001f0	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN48@Init:
  001f5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z ENDP	; std::numpunct<wchar_t>::_Init
PUBLIC	??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@@Z ; std::_Checked_base<HostDevice *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@@Z PROC ; std::_Checked_base<HostDevice *>, COMDAT

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]

; 1166 : 	}

  00006	c3		 ret	 0
??$_Checked_base@PAUHostDevice@@@std@@YAPAUHostDevice@@AAPAU1@@Z ENDP ; std::_Checked_base<HostDevice *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T144480 = -8						; size = 1
$T144481 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
$T144482 = 16						; size = 1
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<HostDevice *,HostDevice *>, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

  00000	83 ec 08	 sub	 esp, 8

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);
; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

  00003	8b 54 24 14	 mov	 edx, DWORD PTR $T144482[esp+4]
  00007	53		 push	 ebx
  00008	8b 5c 24 10	 mov	 ebx, DWORD PTR __First$[esp+8]
  0000c	56		 push	 esi
  0000d	8b 74 24 18	 mov	 esi, DWORD PTR __Last$[esp+12]
  00011	57		 push	 edi
  00012	8b 7c 24 20	 mov	 edi, DWORD PTR __Dest$[esp+16]
  00016	32 c0		 xor	 al, al
  00018	88 44 24 10	 mov	 BYTE PTR $T144481[esp+20], al
  0001c	8b 4c 24 10	 mov	 ecx, DWORD PTR $T144481[esp+20]
  00020	88 44 24 0c	 mov	 BYTE PTR $T144480[esp+20], al
  00024	8b 44 24 0c	 mov	 eax, DWORD PTR $T144480[esp+20]
  00028	50		 push	 eax
  00029	51		 push	 ecx
  0002a	52		 push	 edx
  0002b	57		 push	 edi
  0002c	56		 push	 esi
  0002d	53		 push	 ebx
  0002e	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
  00033	2b f3		 sub	 esi, ebx
  00035	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0003a	f7 ee		 imul	 esi
  0003c	c1 fa 06	 sar	 edx, 6
  0003f	8b c2		 mov	 eax, edx
  00041	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00044	03 c2		 add	 eax, edx
  00046	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	03 c7		 add	 eax, edi
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx

; 2486 : 	return _Result;
; 2487 : 	}

  00054	83 c4 08	 add	 esp, 8
  00057	c3		 ret	 0
??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1139 : 		return _It._Checked_iterator_base();

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1140 : 	}

  00007	c3		 ret	 0
??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_cleanup:PROC
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	_UnregisterRedTick:PROC
EXTRN	_hInst:DWORD
EXTRN	_RandStop:PROC
EXTRN	_CloseNonSysInplaceEncMutex:PROC
EXTRN	_InstanceHasSysEncMutex:PROC
;	COMDAT xdata$x
; File c:\users\public\desktop\projects\ciphershed\src\format\tcformat.c
xdata$x	SEGMENT
__catchsym$_localcleanup$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_localcleanup$0
__unwindtable$_localcleanup DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_localcleanup DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_localcleanup$2
__ehfuncinfo$_localcleanup DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_localcleanup
	DD	01H
	DD	FLAT:__tryblocktable$_localcleanup
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _localcleanup
_TEXT	SEGMENT
$T144501 = -486						; size = 94
_tmp$ = -392						; size = 371
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_localcleanup PROC					; COMDAT

; 305  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_localcleanup
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 01 00
	00		 sub	 esp, 476		; 000001dcH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 306  : 	char tmp[RANDPOOL_DISPLAY_SIZE+1];
; 307  : 
; 308  : 	// System encryption
; 309  : 
; 310  : 	if (WizardMode == WIZARD_MODE_SYS_DEVICE
; 311  : 		&& InstanceHasSysEncMutex ())

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  00036	83 f8 02	 cmp	 eax, 2
  00039	75 59		 jne	 SHORT $LN152@localclean
  0003b	e8 00 00 00 00	 call	 _InstanceHasSysEncMutex
  00040	85 c0		 test	 eax, eax
  00042	74 50		 je	 SHORT $LN152@localclean

; 312  : 	{
; 313  : 		try
; 314  : 		{
; 315  : 			BootEncStatus = BootEncObj->GetStatus();

  00044	8d 8d 1a fe ff
	ff		 lea	 ecx, DWORD PTR $T144501[ebp]
  0004a	51		 push	 ecx
  0004b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00051	33 db		 xor	 ebx, ebx
  00053	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00056	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  0005b	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00060	8b f0		 mov	 esi, eax
  00062	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00067	f3 a5		 rep movsd
  00069	66 a5		 movsw

; 316  : 
; 317  : 			if (BootEncStatus.SetupInProgress)

  0006b	39 1d 3e 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62, ebx
  00071	74 0b		 je	 SHORT $LN41@localclean

; 318  : 			{
; 319  : 				BootEncObj->AbortSetup ();

  00073	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00079	e8 00 00 00 00	 call	 ?AbortSetup@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::AbortSetup
$LN41@localclean:
  0007e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00085	eb 0f		 jmp	 SHORT $LN51@localclean
__catch$_localcleanup$0:

; 320  : 			}
; 321  : 		}
; 322  : 		catch (...)
; 323  : 		{
; 324  : 			// NOP
; 325  : 		}

  00087	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0008e	b8 00 00 00 00	 mov	 eax, $LN152@localclean
  00093	c3		 ret	 0
$LN152@localclean:
  00094	33 db		 xor	 ebx, ebx
$LN51@localclean:

; 326  : 	}
; 327  : 
; 328  : 	// Mon-system in-place encryption
; 329  : 
; 330  : 	if (bInPlaceEncNonSys && (bVolTransformThreadRunning || bVolTransformThreadToRun))

  00096	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  0009c	85 d2		 test	 edx, edx
  0009e	74 18		 je	 SHORT $LN40@localclean
  000a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  000a5	85 c0		 test	 eax, eax
  000a7	75 0a		 jne	 SHORT $LN39@localclean
  000a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  000af	85 c9		 test	 ecx, ecx
  000b1	74 05		 je	 SHORT $LN40@localclean
$LN39@localclean:

; 331  : 	{
; 332  : 		NonSysInplaceEncPause ();

  000b3	e8 00 00 00 00	 call	 _NonSysInplaceEncPause
$LN40@localclean:

; 333  : 	}
; 334  : 
; 335  : 	CloseNonSysInplaceEncMutex ();

  000b8	e8 00 00 00 00	 call	 _CloseNonSysInplaceEncMutex

; 336  : 	
; 337  : 
; 338  : 	// Device wipe
; 339  : 
; 340  : 	if (bDeviceWipeInProgress)

  000bd	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bDeviceWipeInProgress@@3HA, ebx ; bDeviceWipeInProgress
  000c3	74 05		 je	 SHORT $LN38@localclean

; 341  : 		WipeAbort();

  000c5	e8 00 00 00 00	 call	 _WipeAbort
$LN38@localclean:

; 342  : 
; 343  : 
; 344  : 	WipePasswordsAndKeyfiles ();

  000ca	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles

; 345  : 
; 346  : 	RandStop (TRUE);

  000cf	6a 01		 push	 1
  000d1	e8 00 00 00 00	 call	 _RandStop

; 347  : 
; 348  : 	burn (HeaderKeyGUIView, sizeof(HeaderKeyGUIView));

  000d6	ba 00 00 00 00	 mov	 edx, OFFSET _HeaderKeyGUIView
  000db	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  000e0	83 c4 04	 add	 esp, 4
  000e3	8b f1		 mov	 esi, ecx
  000e5	8b c2		 mov	 eax, edx
$LL53@localclean:
  000e7	88 18		 mov	 BYTE PTR [eax], bl
  000e9	40		 inc	 eax
  000ea	83 ee 01	 sub	 esi, 1
  000ed	75 f8		 jne	 SHORT $LL53@localclean
  000ef	90		 npad	 1
$LL34@localclean:
  000f0	49		 dec	 ecx
  000f1	88 1a		 mov	 BYTE PTR [edx], bl
  000f3	42		 inc	 edx
  000f4	3b cb		 cmp	 ecx, ebx
  000f6	75 f8		 jne	 SHORT $LL34@localclean

; 349  : 	burn (MasterKeyGUIView, sizeof(MasterKeyGUIView));

  000f8	ba 00 00 00 00	 mov	 edx, OFFSET _MasterKeyGUIView
  000fd	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00102	8b f1		 mov	 esi, ecx
  00104	8b c2		 mov	 eax, edx
$LL57@localclean:
  00106	88 18		 mov	 BYTE PTR [eax], bl
  00108	40		 inc	 eax
  00109	83 ee 01	 sub	 esi, 1
  0010c	75 f8		 jne	 SHORT $LL57@localclean
  0010e	8b ff		 npad	 2
$LL29@localclean:
  00110	49		 dec	 ecx
  00111	88 1a		 mov	 BYTE PTR [edx], bl
  00113	42		 inc	 edx
  00114	3b cb		 cmp	 ecx, ebx
  00116	75 f8		 jne	 SHORT $LL29@localclean

; 350  : 	burn (randPool, sizeof(randPool));

  00118	ba 00 00 00 00	 mov	 edx, OFFSET ?randPool@@3PAEA ; randPool
  0011d	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  00122	8b f1		 mov	 esi, ecx
  00124	8b c2		 mov	 eax, edx
$LL61@localclean:
  00126	88 18		 mov	 BYTE PTR [eax], bl
  00128	40		 inc	 eax
  00129	83 ee 01	 sub	 esi, 1
  0012c	75 f8		 jne	 SHORT $LL61@localclean
  0012e	8b ff		 npad	 2
$LL24@localclean:
  00130	49		 dec	 ecx
  00131	88 1a		 mov	 BYTE PTR [edx], bl
  00133	42		 inc	 edx
  00134	3b cb		 cmp	 ecx, ebx
  00136	75 f8		 jne	 SHORT $LL24@localclean

; 351  : 	burn (lastRandPool, sizeof(lastRandPool));

  00138	ba 00 00 00 00	 mov	 edx, OFFSET ?lastRandPool@@3PAEA ; lastRandPool
  0013d	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  00142	8b f1		 mov	 esi, ecx
  00144	8b c2		 mov	 eax, edx
$LL65@localclean:
  00146	88 18		 mov	 BYTE PTR [eax], bl
  00148	40		 inc	 eax
  00149	83 ee 01	 sub	 esi, 1
  0014c	75 f8		 jne	 SHORT $LL65@localclean
  0014e	8b ff		 npad	 2
$LL19@localclean:
  00150	49		 dec	 ecx
  00151	88 1a		 mov	 BYTE PTR [edx], bl
  00153	42		 inc	 edx
  00154	3b cb		 cmp	 ecx, ebx
  00156	75 f8		 jne	 SHORT $LL19@localclean

; 352  : 	burn (outRandPoolDispBuffer, sizeof(outRandPoolDispBuffer));

  00158	ba 00 00 00 00	 mov	 edx, OFFSET ?outRandPoolDispBuffer@@3PAEA ; outRandPoolDispBuffer
  0015d	b9 72 01 00 00	 mov	 ecx, 370		; 00000172H
  00162	8b f1		 mov	 esi, ecx
  00164	8b c2		 mov	 eax, edx
$LL69@localclean:
  00166	88 18		 mov	 BYTE PTR [eax], bl
  00168	40		 inc	 eax
  00169	83 ee 01	 sub	 esi, 1
  0016c	75 f8		 jne	 SHORT $LL69@localclean
  0016e	8b ff		 npad	 2
$LL14@localclean:
  00170	49		 dec	 ecx
  00171	88 1a		 mov	 BYTE PTR [edx], bl
  00173	42		 inc	 edx
  00174	3b cb		 cmp	 ecx, ebx
  00176	75 f8		 jne	 SHORT $LL14@localclean

; 353  : 	burn (szFileName, sizeof(szFileName));

  00178	ba 00 00 00 00	 mov	 edx, OFFSET ?szFileName@@3PADA ; szFileName
  0017d	b9 05 01 00 00	 mov	 ecx, 261		; 00000105H
  00182	8b f1		 mov	 esi, ecx
  00184	8b c2		 mov	 eax, edx
$LL73@localclean:
  00186	88 18		 mov	 BYTE PTR [eax], bl
  00188	40		 inc	 eax
  00189	83 ee 01	 sub	 esi, 1
  0018c	75 f8		 jne	 SHORT $LL73@localclean
  0018e	8b ff		 npad	 2
$LL9@localclean:
  00190	49		 dec	 ecx
  00191	88 1a		 mov	 BYTE PTR [edx], bl
  00193	42		 inc	 edx
  00194	3b cb		 cmp	 ecx, ebx
  00196	75 f8		 jne	 SHORT $LL9@localclean

; 354  : 	burn (szDiskFile, sizeof(szDiskFile));

  00198	ba 00 00 00 00	 mov	 edx, OFFSET ?szDiskFile@@3PADA ; szDiskFile
  0019d	b9 05 01 00 00	 mov	 ecx, 261		; 00000105H
  001a2	8b f1		 mov	 esi, ecx
  001a4	8b c2		 mov	 eax, edx
$LL77@localclean:
  001a6	88 18		 mov	 BYTE PTR [eax], bl
  001a8	40		 inc	 eax
  001a9	83 ee 01	 sub	 esi, 1
  001ac	75 f8		 jne	 SHORT $LL77@localclean
  001ae	8b ff		 npad	 2
$LL4@localclean:
  001b0	49		 dec	 ecx
  001b1	88 1a		 mov	 BYTE PTR [edx], bl
  001b3	42		 inc	 edx
  001b4	3b cb		 cmp	 ecx, ebx
  001b6	75 f8		 jne	 SHORT $LL4@localclean

; 355  : 
; 356  : 	// Attempt to wipe the GUI fields showing portions of randpool, of the master and header keys
; 357  : 	memset (tmp, 0x20, sizeof(tmp)); //0x20 = ASCII space or 0x2020 = Unicode DAGGER

  001b8	68 73 01 00 00	 push	 371			; 00000173H
  001bd	8d 95 78 fe ff
	ff		 lea	 edx, DWORD PTR _tmp$[ebp]
  001c3	6a 20		 push	 32			; 00000020H
  001c5	52		 push	 edx
  001c6	e8 00 00 00 00	 call	 _memset

; 358  : 	tmp [sizeof(tmp)-1] = 0;
; 359  : 	SetWindowTextA(hRandPool, tmp);

  001cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hRandPool@@3RAUHWND__@@A ; hRandPool
  001d1	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextA@8
  001d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  001da	8d 85 78 fe ff
	ff		 lea	 eax, DWORD PTR _tmp$[ebp]
  001e0	50		 push	 eax
  001e1	51		 push	 ecx
  001e2	88 5d ea	 mov	 BYTE PTR _tmp$[ebp+370], bl
  001e5	ff d6		 call	 esi

; 360  : 	SetWindowTextA(hRandPoolSys, tmp);

  001e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hRandPoolSys@@3RAUHWND__@@A ; hRandPoolSys
  001ec	8d 95 78 fe ff
	ff		 lea	 edx, DWORD PTR _tmp$[ebp]
  001f2	52		 push	 edx
  001f3	50		 push	 eax
  001f4	ff d6		 call	 esi

; 361  : 	SetWindowTextA(hMasterKey, tmp);

  001f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hMasterKey
  001fc	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR _tmp$[ebp]
  00202	51		 push	 ecx
  00203	52		 push	 edx
  00204	ff d6		 call	 esi

; 362  : 	SetWindowTextA(hHeaderKey, tmp);

  00206	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hHeaderKey
  0020c	8d 85 78 fe ff
	ff		 lea	 eax, DWORD PTR _tmp$[ebp]
  00212	50		 push	 eax
  00213	51		 push	 ecx
  00214	ff d6		 call	 esi

; 363  : 
; 364  : 	UnregisterRedTick (hInst);

  00216	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  0021c	52		 push	 edx
  0021d	e8 00 00 00 00	 call	 _UnregisterRedTick

; 365  : 
; 366  : 	// Delete buffered bitmaps (if any)
; 367  : 	if (hbmWizardBitmapRescaled != NULL)

  00222	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hbmWizardBitmapRescaled@@3PAUHBITMAP__@@A ; hbmWizardBitmapRescaled
  00227	83 c4 04	 add	 esp, 4
  0022a	3b c3		 cmp	 eax, ebx
  0022c	74 0d		 je	 SHORT $LN2@localclean

; 368  : 	{
; 369  : 		DeleteObject ((HGDIOBJ) hbmWizardBitmapRescaled);

  0022e	50		 push	 eax
  0022f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 370  : 		hbmWizardBitmapRescaled = NULL;

  00235	89 1d 00 00 00
	00		 mov	 DWORD PTR ?hbmWizardBitmapRescaled@@3PAUHBITMAP__@@A, ebx ; hbmWizardBitmapRescaled
$LN2@localclean:

; 371  : 	}
; 372  : 
; 373  : 	// Cleanup common code resources
; 374  : 	cleanup ();

  0023b	e8 00 00 00 00	 call	 _cleanup

; 375  : 
; 376  : 	if (BootEncObj != NULL)

  00240	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00246	3b cb		 cmp	 ecx, ebx
  00248	74 16		 je	 SHORT $LN1@localclean

; 377  : 	{
; 378  : 		delete BootEncObj;

  0024a	8b f1		 mov	 esi, ecx
  0024c	e8 00 00 00 00	 call	 ??1BootEncryption@CipherShed@@QAE@XZ ; CipherShed::BootEncryption::~BootEncryption
  00251	56		 push	 esi
  00252	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00257	83 c4 04	 add	 esp, 4

; 379  : 		BootEncObj = NULL;

  0025a	89 1d 00 00 00
	00		 mov	 DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A, ebx ; BootEncObj
$LN1@localclean:

; 380  : 	}
; 381  : }

  00260	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00263	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0026a	59		 pop	 ecx
  0026b	5f		 pop	 edi
  0026c	5e		 pop	 esi
  0026d	5b		 pop	 ebx
  0026e	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00271	33 cd		 xor	 ecx, ebp
  00273	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00278	8b e5		 mov	 esp, ebp
  0027a	5d		 pop	 ebp
  0027b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_localcleanup:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 14 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-492]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_localcleanup
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_localcleanup ENDP
; Function compile flags: /Ogtpy
;	COMDAT ?ChangeSystemEncryptionStatus@@YAHH@Z
_TEXT	SEGMENT
?ChangeSystemEncryptionStatus@@YAHH@Z PROC		; ChangeSystemEncryptionStatus, COMDAT
; _newStatus$ = esi

; 520  : 	if (!CreateSysEncMutex ())

  00000	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00005	85 c0		 test	 eax, eax
  00007	75 10		 jne	 SHORT $LN5@ChangeSyst

; 521  : 	{
; 522  : 		Error ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  0000e	e8 00 00 00 00	 call	 _Error
  00013	83 c4 04	 add	 esp, 4
$LN8@ChangeSyst:

; 523  : 		return FALSE;		// Only one instance that has the mutex can modify the system encryption settings

  00016	33 c0		 xor	 eax, eax

; 546  : 	{
; 547  : 		return FALSE;
; 548  : 	}
; 549  : 
; 550  : 	return TRUE;
; 551  : }

  00018	c3		 ret	 0
$LN5@ChangeSyst:

; 524  : 	}
; 525  : 
; 526  : 	SystemEncryptionStatus = newStatus;

  00019	89 35 00 00 00
	00		 mov	 DWORD PTR _SystemEncryptionStatus, esi

; 527  : 	bSystemEncryptionStatusChanged = TRUE;

  0001f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bSystemEncryptionStatusChanged, 1

; 528  : 
; 529  : 	if (newStatus == SYSENC_STATUS_ENCRYPTING)

  00029	81 fe 90 01 00
	00		 cmp	 esi, 400		; 00000190H

; 530  : 	{
; 531  : 		// If the user has created a hidden OS and now is creating a decoy OS, we must wipe the hidden OS
; 532  : 		// config area in the MBR.
; 533  : 		WipeHiddenOSCreationConfig();
; 534  : 	}
; 535  : 
; 536  : 	if (newStatus == SYSENC_STATUS_NONE && !IsHiddenOSRunning())

  0002f	74 23		 je	 SHORT $LN2@ChangeSyst
  00031	85 f6		 test	 esi, esi
  00033	75 24		 jne	 SHORT $LN3@ChangeSyst
  00035	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  0003a	85 c0		 test	 eax, eax
  0003c	75 1b		 jne	 SHORT $LN3@ChangeSyst

; 537  : 	{
; 538  : 		if (DetermineHiddenOSCreationPhase() != TC_HIDDEN_OS_CREATION_PHASE_NONE
; 539  : 			&& !ChangeHiddenOSCreationPhase (TC_HIDDEN_OS_CREATION_PHASE_NONE))

  0003e	e8 00 00 00 00	 call	 ?DetermineHiddenOSCreationPhase@@YAIXZ ; DetermineHiddenOSCreationPhase
  00043	85 c0		 test	 eax, eax
  00045	74 0d		 je	 SHORT $LN2@ChangeSyst
  00047	56		 push	 esi
  00048	e8 00 00 00 00	 call	 ?ChangeHiddenOSCreationPhase@@YAHH@Z ; ChangeHiddenOSCreationPhase
  0004d	83 c4 04	 add	 esp, 4
  00050	85 c0		 test	 eax, eax

; 540  : 			return FALSE;

  00052	74 c2		 je	 SHORT $LN8@ChangeSyst
$LN2@ChangeSyst:

; 541  : 
; 542  : 		WipeHiddenOSCreationConfig();

  00054	e8 00 00 00 00	 call	 _WipeHiddenOSCreationConfig
$LN3@ChangeSyst:

; 543  : 	}
; 544  : 
; 545  : 	if (!SaveSysEncSettings (MainDlg))

  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0005e	e8 00 00 00 00	 call	 ?SaveSysEncSettings@@YAHPAUHWND__@@@Z ; SaveSysEncSettings
  00063	f7 d8		 neg	 eax
  00065	1b c0		 sbb	 eax, eax
  00067	f7 d8		 neg	 eax

; 546  : 	{
; 547  : 		return FALSE;
; 548  : 	}
; 549  : 
; 550  : 	return TRUE;
; 551  : }

  00069	c3		 ret	 0
?ChangeSystemEncryptionStatus@@YAHH@Z ENDP		; ChangeSystemEncryptionStatus
_TEXT	ENDS
PUBLIC	??_C@_08DDAIHKOO@IDCANCEL?$AA@			; `string'
PUBLIC	??_C@_07OOEIKEPO@DECRYPT?$AA@			; `string'
PUBLIC	??_C@_07CAOFPAJK@ENCRYPT?$AA@			; `string'
PUBLIC	??_C@_0BK@CFANEEFJ@CHOOSE_ENCRYPT_OR_DECRYPT?$AA@ ; `string'
PUBLIC	??_C@_0DA@NNBJDAHG@CHOOSE_ENCRYPT_OR_DECRYPT_FINALI@ ; `string'
;	COMDAT ??_C@_08DDAIHKOO@IDCANCEL?$AA@
CONST	SEGMENT
??_C@_08DDAIHKOO@IDCANCEL?$AA@ DB 'IDCANCEL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OOEIKEPO@DECRYPT?$AA@
CONST	SEGMENT
??_C@_07OOEIKEPO@DECRYPT?$AA@ DB 'DECRYPT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CAOFPAJK@ENCRYPT?$AA@
CONST	SEGMENT
??_C@_07CAOFPAJK@ENCRYPT?$AA@ DB 'ENCRYPT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CFANEEFJ@CHOOSE_ENCRYPT_OR_DECRYPT?$AA@
CONST	SEGMENT
??_C@_0BK@CFANEEFJ@CHOOSE_ENCRYPT_OR_DECRYPT?$AA@ DB 'CHOOSE_ENCRYPT_OR_D'
	DB	'ECRYPT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@NNBJDAHG@CHOOSE_ENCRYPT_OR_DECRYPT_FINALI@
CONST	SEGMENT
??_C@_0DA@NNBJDAHG@CHOOSE_ENCRYPT_OR_DECRYPT_FINALI@ DB 'CHOOSE_ENCRYPT_O'
	DB	'R_DECRYPT_FINALIZE_DECRYPT_NOTE', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_ResolveUnknownSysEncDirection$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$_ResolveUnknownSysEncDirection$0
__unwindtable$_ResolveUnknownSysEncDirection DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_ResolveUnknownSysEncDirection DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_ResolveUnknownSysEncDirection$2
__ehfuncinfo$_ResolveUnknownSysEncDirection DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_ResolveUnknownSysEncDirection
	DD	01H
	DD	FLAT:__tryblocktable$_ResolveUnknownSysEncDirection
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _ResolveUnknownSysEncDirection
_TEXT	SEGMENT
$T144645 = -138						; size = 94
_tmpStr$132016 = -44					; size = 24
_e$132012 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_ResolveUnknownSysEncDirection PROC			; COMDAT

; 1047 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_ResolveUnknownSysEncDirection
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1048 : 	if (CreateSysEncMutex ())

  0002e	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00033	85 c0		 test	 eax, eax
  00035	0f 84 65 01 00
	00		 je	 $LN12@ResolveUnk

; 1049 : 	{
; 1050 : 		if (SystemEncryptionStatus != SYSENC_STATUS_ENCRYPTING
; 1051 : 			&& SystemEncryptionStatus != SYSENC_STATUS_DECRYPTING)

  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  00040	3d 90 01 00 00	 cmp	 eax, 400		; 00000190H
  00045	0f 84 3e 01 00
	00		 je	 $LN11@ResolveUnk
  0004b	3d 58 02 00 00	 cmp	 eax, 600		; 00000258H
  00050	0f 84 33 01 00
	00		 je	 $LN11@ResolveUnk

; 1052 : 		{
; 1053 : 			try
; 1054 : 			{
; 1055 : 				BootEncStatus = BootEncObj->GetStatus();

  00056	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0005c	8d 85 76 ff ff
	ff		 lea	 eax, DWORD PTR $T144645[ebp]
  00062	33 db		 xor	 ebx, ebx
  00064	50		 push	 eax
  00065	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00068	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  0006d	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00072	8b f0		 mov	 esi, eax
  00074	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00079	f3 a5		 rep movsd
  0007b	66 a5		 movsw
  0007d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 1062 : 			}
; 1063 : 
; 1064 : 			if (BootEncStatus.SetupInProgress)

  00084	39 1d 3e 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62, ebx
  0008a	74 30		 je	 SHORT $LN9@ResolveUnk

; 1065 : 			{
; 1066 : 				return ChangeSystemEncryptionStatus (
; 1067 : 					(BootEncStatus.SetupMode != SetupDecryption) ? SYSENC_STATUS_ENCRYPTING : SYSENC_STATUS_DECRYPTING);

  0008c	8b 35 42 00 00
	00		 mov	 esi, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+66
  00092	83 ee 02	 sub	 esi, 2
  00095	f7 de		 neg	 esi
  00097	1b f6		 sbb	 esi, esi
  00099	81 e6 38 ff ff
	ff		 and	 esi, -200		; ffffff38H
  0009f	81 c6 58 02 00
	00		 add	 esi, 600		; 00000258H
  000a5	e8 00 00 00 00	 call	 ?ChangeSystemEncryptionStatus@@YAHH@Z ; ChangeSystemEncryptionStatus

; 1098 : 	}
; 1099 : }

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b4	59		 pop	 ecx
  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
$LN9@ResolveUnk:

; 1068 : 			}
; 1069 : 			else
; 1070 : 			{
; 1071 : 				// Ask the user to select encryption, decryption, or cancel
; 1072 : 
; 1073 : 				char *tmpStr[] = {0,

  000bc	89 5d d4	 mov	 DWORD PTR _tmpStr$132016[ebp], ebx

; 1074 : 					!BootEncStatus.DriveEncrypted ? "CHOOSE_ENCRYPT_OR_DECRYPT_FINALIZE_DECRYPT_NOTE" : "CHOOSE_ENCRYPT_OR_DECRYPT",

  000bf	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _tmpStr$132016[ebp+4], OFFSET ??_C@_0DA@NNBJDAHG@CHOOSE_ENCRYPT_OR_DECRYPT_FINALI@
  000c6	39 1d 0e 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+14, ebx
  000cc	74 07		 je	 SHORT $LN16@ResolveUnk
  000ce	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _tmpStr$132016[ebp+4], OFFSET ??_C@_0BK@CFANEEFJ@CHOOSE_ENCRYPT_OR_DECRYPT?$AA@
$LN16@ResolveUnk:

; 1075 : 					"ENCRYPT",
; 1076 : 					"DECRYPT",
; 1077 : 					"IDCANCEL",
; 1078 : 					0};
; 1079 : 
; 1080 : 				switch (AskMultiChoice ((void **) tmpStr, FALSE))

  000d5	8d 4d d4	 lea	 ecx, DWORD PTR _tmpStr$132016[ebp]
  000d8	53		 push	 ebx
  000d9	51		 push	 ecx
  000da	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _tmpStr$132016[ebp+8], OFFSET ??_C@_07CAOFPAJK@ENCRYPT?$AA@
  000e1	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _tmpStr$132016[ebp+12], OFFSET ??_C@_07OOEIKEPO@DECRYPT?$AA@
  000e8	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _tmpStr$132016[ebp+16], OFFSET ??_C@_08DDAIHKOO@IDCANCEL?$AA@
  000ef	89 5d e8	 mov	 DWORD PTR _tmpStr$132016[ebp+20], ebx
  000f2	e8 00 00 00 00	 call	 _AskMultiChoice
  000f7	83 c4 08	 add	 esp, 8
  000fa	83 e8 01	 sub	 eax, 1
  000fd	74 4c		 je	 SHORT $LN5@ResolveUnk
  000ff	83 e8 01	 sub	 eax, 1

; 1084 : 				case 2:
; 1085 : 					return ChangeSystemEncryptionStatus (SYSENC_STATUS_DECRYPTING);
; 1086 : 				default:
; 1087 : 					return FALSE;

  00102	0f 85 a5 00 00
	00		 jne	 $LN30@ResolveUnk
  00108	e8 00 00 00 00	 call	 _CreateSysEncMutex
  0010d	85 c0		 test	 eax, eax
  0010f	0f 84 8b 00 00
	00		 je	 $LN12@ResolveUnk
  00115	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0011a	c7 05 00 00 00
	00 58 02 00 00	 mov	 DWORD PTR _SystemEncryptionStatus, 600 ; 00000258H
  00124	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bSystemEncryptionStatusChanged, 1
  0012e	e8 00 00 00 00	 call	 ?SaveSysEncSettings@@YAHPAUHWND__@@@Z ; SaveSysEncSettings
  00133	f7 d8		 neg	 eax
  00135	1b c0		 sbb	 eax, eax
  00137	f7 d8		 neg	 eax

; 1098 : 	}
; 1099 : }

  00139	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0013c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00143	59		 pop	 ecx
  00144	5f		 pop	 edi
  00145	5e		 pop	 esi
  00146	5b		 pop	 ebx
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c3		 ret	 0
$LN5@ResolveUnk:

; 1081 : 				{
; 1082 : 				case 1:
; 1083 : 					return ChangeSystemEncryptionStatus (SYSENC_STATUS_ENCRYPTING);

  0014b	be 90 01 00 00	 mov	 esi, 400		; 00000190H
  00150	e8 00 00 00 00	 call	 ?ChangeSystemEncryptionStatus@@YAHH@Z ; ChangeSystemEncryptionStatus

; 1098 : 	}
; 1099 : }

  00155	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00158	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0015f	59		 pop	 ecx
  00160	5f		 pop	 edi
  00161	5e		 pop	 esi
  00162	5b		 pop	 ebx
  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c3		 ret	 0
__catch$_ResolveUnknownSysEncDirection$0:

; 1056 : 			}
; 1057 : 			catch (Exception &e)
; 1058 : 			{
; 1059 : 				e.Show (MainDlg);

  00167	8b 4d ec	 mov	 ecx, DWORD PTR _e$132012[ebp]
  0016a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0016c	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00171	8b 12		 mov	 edx, DWORD PTR [edx]
  00173	50		 push	 eax
  00174	ff d2		 call	 edx

; 1060 : 				Error ("ERR_GETTING_SYSTEM_ENCRYPTION_STATUS");

  00176	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@
  0017b	e8 00 00 00 00	 call	 _Error
  00180	83 c4 04	 add	 esp, 4

; 1061 : 				return FALSE;

  00183	b8 00 00 00 00	 mov	 eax, $LN30@ResolveUnk
  00188	c3		 ret	 0
$LN11@ResolveUnk:

; 1088 : 				}
; 1089 : 			}
; 1090 : 		}
; 1091 : 		else
; 1092 : 			return TRUE;

  00189	b8 01 00 00 00	 mov	 eax, 1

; 1098 : 	}
; 1099 : }

  0018e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00191	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00198	59		 pop	 ecx
  00199	5f		 pop	 edi
  0019a	5e		 pop	 esi
  0019b	5b		 pop	 ebx
  0019c	8b e5		 mov	 esp, ebp
  0019e	5d		 pop	 ebp
  0019f	c3		 ret	 0
$LN12@ResolveUnk:

; 1093 : 	}
; 1094 : 	else
; 1095 : 	{
; 1096 : 		Error ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  001a0	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  001a5	e8 00 00 00 00	 call	 _Error
  001aa	83 c4 04	 add	 esp, 4
$LN30@ResolveUnk:

; 1097 : 		return FALSE;

  001ad	33 c0		 xor	 eax, eax

; 1098 : 	}
; 1099 : }

  001af	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001b2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001b9	59		 pop	 ecx
  001ba	5f		 pop	 edi
  001bb	5e		 pop	 esi
  001bc	5b		 pop	 ebx
  001bd	8b e5		 mov	 esp, ebp
  001bf	5d		 pop	 ebp
  001c0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_ResolveUnknownSysEncDirection:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 70 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-144]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_ResolveUnknownSysEncDirection
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_ResolveUnknownSysEncDirection ENDP
PUBLIC	??_C@_05KEELGAD@DEFER?$AA@			; `string'
PUBLIC	_UpdateNonSysInPlaceEncControls
EXTRN	_ArrowWaitCursor:PROC
;	COMDAT ??_C@_05KEELGAD@DEFER?$AA@
CONST	SEGMENT
??_C@_05KEELGAD@DEFER?$AA@ DB 'DEFER', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _UpdateNonSysInPlaceEncControls
_TEXT	SEGMENT
_UpdateNonSysInPlaceEncControls PROC			; COMDAT

; 1845 : 	EnableWindow (GetDlgItem (hCurPage, IDC_WIPE_MODE), !(bVolTransformThreadRunning || bVolTransformThreadToRun));

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  00005	85 c0		 test	 eax, eax
  00007	75 0f		 jne	 SHORT $LN14@UpdateNonS@2
  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  0000f	85 c9		 test	 ecx, ecx
  00011	75 05		 jne	 SHORT $LN14@UpdateNonS@2
  00013	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00016	eb 02		 jmp	 SHORT $LN15@UpdateNonS@2
$LN14@UpdateNonS@2:
  00018	33 c0		 xor	 eax, eax
$LN15@UpdateNonS@2:
  0001a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00020	53		 push	 ebx
  00021	56		 push	 esi
  00022	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00028	57		 push	 edi
  00029	50		 push	 eax
  0002a	68 3d 04 00 00	 push	 1085			; 0000043dH
  0002f	52		 push	 edx
  00030	ff d6		 call	 esi
  00032	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  00038	50		 push	 eax
  00039	ff d3		 call	 ebx

; 1846 : 
; 1847 : 	SetWindowTextW (GetDlgItem (hCurPage, IDC_PAUSE),
; 1848 : 		GetString ((bVolTransformThreadRunning || bVolTransformThreadToRun) ? "IDC_PAUSE" : "RESUME"));

  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  00040	85 c0		 test	 eax, eax
  00042	75 0f		 jne	 SHORT $LN16@UpdateNonS@2
  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  0004a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06PPGAKMJI@RESUME?$AA@
  0004f	85 c9		 test	 ecx, ecx
  00051	74 05		 je	 SHORT $LN17@UpdateNonS@2
$LN16@UpdateNonS@2:
  00053	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09PJBBBIIP@IDC_PAUSE?$AA@
$LN17@UpdateNonS@2:
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 _GetString
  0005e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00064	83 c4 04	 add	 esp, 4
  00067	50		 push	 eax
  00068	68 41 04 00 00	 push	 1089			; 00000441H
  0006d	52		 push	 edx
  0006e	ff d6		 call	 esi
  00070	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  00076	50		 push	 eax
  00077	ff d7		 call	 edi

; 1849 : 
; 1850 : 	SetWindowTextW (GetDlgItem (MainDlg, IDCANCEL), GetString (bInPlaceEncNonSysResumed ? "DEFER" : "CANCEL"));

  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSysResumed
  0007e	85 c0		 test	 eax, eax
  00080	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05KEELGAD@DEFER?$AA@
  00085	75 05		 jne	 SHORT $LN19@UpdateNonS@2
  00087	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
$LN19@UpdateNonS@2:
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 _GetString
  00092	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00098	83 c4 04	 add	 esp, 4
  0009b	50		 push	 eax
  0009c	6a 02		 push	 2
  0009e	51		 push	 ecx
  0009f	ff d6		 call	 esi
  000a1	50		 push	 eax
  000a2	ff d7		 call	 edi

; 1851 : 
; 1852 : 	EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), bFirstNonSysInPlaceEncResumeDone 
; 1853 : 		&& NonSysInplaceEncStatus != NONSYS_INPLACE_ENC_STATUS_FINALIZING
; 1854 : 		&& NonSysInplaceEncStatus != NONSYS_INPLACE_ENC_STATUS_FINISHED);

  000a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bFirstNonSysInPlaceEncResumeDone
  000aa	85 d2		 test	 edx, edx
  000ac	74 1c		 je	 SHORT $LN20@UpdateNonS@2
  000ae	a1 00 00 00 00	 mov	 eax, DWORD PTR _NonSysInplaceEncStatus
  000b3	83 f8 04	 cmp	 eax, 4
  000b6	74 12		 je	 SHORT $LN20@UpdateNonS@2
  000b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _NonSysInplaceEncStatus
  000be	83 f9 06	 cmp	 ecx, 6
  000c1	74 07		 je	 SHORT $LN20@UpdateNonS@2
  000c3	b8 01 00 00 00	 mov	 eax, 1
  000c8	eb 02		 jmp	 SHORT $LN21@UpdateNonS@2
$LN20@UpdateNonS@2:
  000ca	33 c0		 xor	 eax, eax
$LN21@UpdateNonS@2:
  000cc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  000d2	50		 push	 eax
  000d3	68 41 04 00 00	 push	 1089			; 00000441H
  000d8	52		 push	 edx
  000d9	ff d6		 call	 esi
  000db	50		 push	 eax
  000dc	ff d3		 call	 ebx

; 1855 : 
; 1856 : 	EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), !(bVolTransformThreadRunning || bVolTransformThreadToRun) && !bFirstNonSysInPlaceEncResumeDone);

  000de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  000e3	85 c0		 test	 eax, eax
  000e5	75 19		 jne	 SHORT $LN22@UpdateNonS@2
  000e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  000ed	85 c9		 test	 ecx, ecx
  000ef	75 0f		 jne	 SHORT $LN22@UpdateNonS@2
  000f1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bFirstNonSysInPlaceEncResumeDone
  000f7	85 d2		 test	 edx, edx
  000f9	75 05		 jne	 SHORT $LN22@UpdateNonS@2
  000fb	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000fe	eb 02		 jmp	 SHORT $LN23@UpdateNonS@2
$LN22@UpdateNonS@2:
  00100	33 c0		 xor	 eax, eax
$LN23@UpdateNonS@2:
  00102	50		 push	 eax
  00103	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00108	68 10 04 00 00	 push	 1040			; 00000410H
  0010d	50		 push	 eax
  0010e	ff d6		 call	 esi
  00110	50		 push	 eax
  00111	ff d3		 call	 ebx

; 1857 : 	EnableWindow (GetDlgItem (MainDlg, IDC_PREV), !(bVolTransformThreadRunning || bVolTransformThreadToRun) && !bInPlaceEncNonSysResumed);

  00113	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  00119	85 c9		 test	 ecx, ecx
  0011b	75 18		 jne	 SHORT $LN24@UpdateNonS@2
  0011d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  00123	85 d2		 test	 edx, edx
  00125	75 0e		 jne	 SHORT $LN24@UpdateNonS@2
  00127	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSysResumed
  0012c	85 c0		 test	 eax, eax
  0012e	75 05		 jne	 SHORT $LN24@UpdateNonS@2
  00130	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00133	eb 02		 jmp	 SHORT $LN25@UpdateNonS@2
$LN24@UpdateNonS@2:
  00135	33 c0		 xor	 eax, eax
$LN25@UpdateNonS@2:
  00137	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0013d	50		 push	 eax
  0013e	68 11 04 00 00	 push	 1041			; 00000411H
  00143	51		 push	 ecx
  00144	ff d6		 call	 esi
  00146	50		 push	 eax
  00147	ff d3		 call	 ebx

; 1858 : 	EnableWindow (GetDlgItem (MainDlg, IDCANCEL), 
; 1859 : 		!(bVolTransformThreadToRun 
; 1860 : 		|| NonSysInplaceEncStatus == NONSYS_INPLACE_ENC_STATUS_PREPARING 
; 1861 : 		|| NonSysInplaceEncStatus == NONSYS_INPLACE_ENC_STATUS_RESIZING
; 1862 : 		|| NonSysInplaceEncStatus == NONSYS_INPLACE_ENC_STATUS_FINALIZING
; 1863 : 		|| NonSysInplaceEncStatus == NONSYS_INPLACE_ENC_STATUS_FINISHED));

  00149	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  0014f	85 d2		 test	 edx, edx
  00151	75 31		 jne	 SHORT $LN26@UpdateNonS@2
  00153	a1 00 00 00 00	 mov	 eax, DWORD PTR _NonSysInplaceEncStatus
  00158	83 f8 01	 cmp	 eax, 1
  0015b	74 27		 je	 SHORT $LN26@UpdateNonS@2
  0015d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _NonSysInplaceEncStatus
  00163	83 f9 02	 cmp	 ecx, 2
  00166	74 1c		 je	 SHORT $LN26@UpdateNonS@2
  00168	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _NonSysInplaceEncStatus
  0016e	83 fa 04	 cmp	 edx, 4
  00171	74 11		 je	 SHORT $LN26@UpdateNonS@2
  00173	a1 00 00 00 00	 mov	 eax, DWORD PTR _NonSysInplaceEncStatus
  00178	83 f8 06	 cmp	 eax, 6
  0017b	74 07		 je	 SHORT $LN26@UpdateNonS@2
  0017d	b8 01 00 00 00	 mov	 eax, 1
  00182	eb 02		 jmp	 SHORT $LN27@UpdateNonS@2
$LN26@UpdateNonS@2:
  00184	33 c0		 xor	 eax, eax
$LN27@UpdateNonS@2:
  00186	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0018c	50		 push	 eax
  0018d	6a 02		 push	 2
  0018f	51		 push	 ecx
  00190	ff d6		 call	 esi
  00192	50		 push	 eax
  00193	ff d3		 call	 ebx

; 1864 : 
; 1865 : 	if (bVolTransformThreadRunning || bVolTransformThreadToRun)

  00195	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  0019b	85 d2		 test	 edx, edx
  0019d	75 62		 jne	 SHORT $LN10@UpdateNonS@2
  0019f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  001a4	85 c0		 test	 eax, eax
  001a6	75 59		 jne	 SHORT $LN10@UpdateNonS@2

; 1886 : 	}
; 1887 : 	else
; 1888 : 	{
; 1889 : 		NormalCursor ();

  001a8	e8 00 00 00 00	 call	 _NormalCursor

; 1890 : 
; 1891 : 		if (bInPlaceEncNonSysResumed)

  001ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSysResumed
  001b3	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextA@8
  001b9	85 c9		 test	 ecx, ecx
  001bb	74 0c		 je	 SHORT $LN2@UpdateNonS@2

; 1892 : 		{
; 1893 : 			SetNonSysInplaceEncUIStatus (NONSYS_INPLACE_ENC_STATUS_PAUSED);

  001bd	6a 05		 push	 5
  001bf	e8 00 00 00 00	 call	 _SetNonSysInplaceEncUIStatus
  001c4	83 c4 04	 add	 esp, 4

; 1894 : 		}
; 1895 : 		else

  001c7	eb 16		 jmp	 SHORT $LN1@UpdateNonS@2
$LN2@UpdateNonS@2:

; 1896 : 			SetWindowTextA(GetDlgItem (hCurPage, IDC_WRITESPEED), " ");

  001c9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  001cf	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5?$AA@
  001d4	68 01 04 00 00	 push	 1025			; 00000401H
  001d9	52		 push	 edx
  001da	ff d6		 call	 esi
  001dc	50		 push	 eax
  001dd	ff d7		 call	 edi
$LN1@UpdateNonS@2:

; 1897 : 
; 1898 : 		SetWindowTextA(GetDlgItem (hCurPage, IDC_TIMEREMAIN), " ");

  001df	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  001e4	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5?$AA@
  001e9	68 03 04 00 00	 push	 1027			; 00000403H
  001ee	50		 push	 eax
  001ef	ff d6		 call	 esi
  001f1	50		 push	 eax
  001f2	ff d7		 call	 edi

; 1899 : 	}
; 1900 : 
; 1901 : 	ShowNonSysInPlaceEncUIStatus ();

  001f4	e8 00 00 00 00	 call	 _ShowNonSysInPlaceEncUIStatus
  001f9	5f		 pop	 edi
  001fa	5e		 pop	 esi
  001fb	5b		 pop	 ebx

; 1902 : 
; 1903 : 	UpdateNonSysInplaceEncProgressBar ();

  001fc	e9 00 00 00 00	 jmp	 _UpdateNonSysInplaceEncProgressBar
$LN10@UpdateNonS@2:

; 1866 : 	{
; 1867 : 		switch (NonSysInplaceEncStatus)

  00201	a1 00 00 00 00	 mov	 eax, DWORD PTR _NonSysInplaceEncStatus
  00206	48		 dec	 eax
  00207	83 f8 03	 cmp	 eax, 3
  0020a	77 0e		 ja	 SHORT $LN5@UpdateNonS@2
  0020c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN30@UpdateNonS@2[eax*4]
$LN7@UpdateNonS@2:

; 1868 : 		{
; 1869 : 		case NONSYS_INPLACE_ENC_STATUS_PREPARING:
; 1870 : 		case NONSYS_INPLACE_ENC_STATUS_RESIZING:
; 1871 : 		case NONSYS_INPLACE_ENC_STATUS_FINALIZING:
; 1872 : 			ArrowWaitCursor ();

  00213	e8 00 00 00 00	 call	 _ArrowWaitCursor

; 1873 : 			break;

  00218	eb 05		 jmp	 SHORT $LN8@UpdateNonS@2
$LN5@UpdateNonS@2:

; 1874 : 
; 1875 : 		case NONSYS_INPLACE_ENC_STATUS_ENCRYPTING:
; 1876 : 			NormalCursor ();
; 1877 : 			break;
; 1878 : 
; 1879 : 		default:
; 1880 : 			NormalCursor ();

  0021a	e8 00 00 00 00	 call	 _NormalCursor
$LN8@UpdateNonS@2:

; 1881 : 			break;
; 1882 : 		}
; 1883 : 
; 1884 : 		if (bVolTransformThreadCancel)

  0021f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bVolTransformThreadCancel
  00225	85 c9		 test	 ecx, ecx
  00227	74 05		 je	 SHORT $LN4@UpdateNonS@2

; 1885 : 			WaitCursor ();

  00229	e8 00 00 00 00	 call	 _WaitCursor
$LN4@UpdateNonS@2:

; 1899 : 	}
; 1900 : 
; 1901 : 	ShowNonSysInPlaceEncUIStatus ();

  0022e	e8 00 00 00 00	 call	 _ShowNonSysInPlaceEncUIStatus
  00233	5f		 pop	 edi
  00234	5e		 pop	 esi
  00235	5b		 pop	 ebx

; 1902 : 
; 1903 : 	UpdateNonSysInplaceEncProgressBar ();

  00236	e9 00 00 00 00	 jmp	 _UpdateNonSysInplaceEncProgressBar
  0023b	90		 npad	 1
$LN30@UpdateNonS@2:

; 1904 : }

  0023c	00 00 00 00	 DD	 $LN7@UpdateNonS@2
  00240	00 00 00 00	 DD	 $LN7@UpdateNonS@2
  00244	00 00 00 00	 DD	 $LN5@UpdateNonS@2
  00248	00 00 00 00	 DD	 $LN7@UpdateNonS@2
_UpdateNonSysInPlaceEncControls ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@LJPGNBNM@SYSTEM_ENCRYPTION_FINISHED?$AA@ ; `string'
PUBLIC	??_C@_0CE@GNJFNNLC@AfterSysEncProgressWMInitTasks?38@ ; `string'
EXTRN	_InconsistencyResolved:PROC
EXTRN	_ManageStartupSeqWiz:PROC
;	COMDAT ??_C@_0BL@LJPGNBNM@SYSTEM_ENCRYPTION_FINISHED?$AA@
CONST	SEGMENT
??_C@_0BL@LJPGNBNM@SYSTEM_ENCRYPTION_FINISHED?$AA@ DB 'SYSTEM_ENCRYPTION_'
	DB	'FINISHED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GNJFNNLC@AfterSysEncProgressWMInitTasks?38@
CONST	SEGMENT
??_C@_0CE@GNJFNNLC@AfterSysEncProgressWMInitTasks?38@ DB 'AfterSysEncProg'
	DB	'ressWMInitTasks:8458', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_AfterSysEncProgressWMInitTasks$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$_AfterSysEncProgressWMInitTasks$0
__unwindtable$_AfterSysEncProgressWMInitTasks DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_AfterSysEncProgressWMInitTasks DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_AfterSysEncProgressWMInitTasks$2
__ehfuncinfo$_AfterSysEncProgressWMInitTasks DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_AfterSysEncProgressWMInitTasks
	DD	01H
	DD	FLAT:__tryblocktable$_AfterSysEncProgressWMInitTasks
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _AfterSysEncProgressWMInitTasks
_TEXT	SEGMENT
_e$135211 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_hwndDlg$ = 8						; size = 4
_AfterSysEncProgressWMInitTasks PROC			; COMDAT

; 8420 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_AfterSysEncProgressWMInitTasks
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 8421 : 	try
; 8422 : 	{
; 8423 : 		switch (SystemEncryptionStatus)

  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  00030	33 f6		 xor	 esi, esi
  00032	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
  00035	3d 90 01 00 00	 cmp	 eax, 400		; 00000190H
  0003a	0f 84 9a 00 00
	00		 je	 $LN5@AfterSysEn
  00040	3d 58 02 00 00	 cmp	 eax, 600		; 00000258H
  00045	0f 84 69 01 00
	00		 je	 $LN4@AfterSysEn

; 8443 : 			}
; 8444 : 
; 8445 : 			break;
; 8446 : 
; 8447 : 		case SYSENC_STATUS_DECRYPTING:
; 8448 : 			SysEncResume ();
; 8449 : 			break;
; 8450 : 
; 8451 : 		default:
; 8452 : 
; 8453 : 			// Unexpected mode here -- fix the inconsistency
; 8454 : 
; 8455 : 			ManageStartupSeqWiz (TRUE, "");

  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00050	6a 01		 push	 1
  00052	e8 00 00 00 00	 call	 _ManageStartupSeqWiz
  00057	83 c4 08	 add	 esp, 8

; 8456 : 			ChangeSystemEncryptionStatus (SYSENC_STATUS_NONE);

  0005a	e8 00 00 00 00	 call	 _CreateSysEncMutex
  0005f	85 c0		 test	 eax, eax
  00061	75 0f		 jne	 SHORT $LN26@AfterSysEn
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  00068	e8 00 00 00 00	 call	 _Error
  0006d	83 c4 04	 add	 esp, 4
  00070	eb 3e		 jmp	 SHORT $LN22@AfterSysEn
$LN26@AfterSysEn:
  00072	89 35 00 00 00
	00		 mov	 DWORD PTR _SystemEncryptionStatus, esi
  00078	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bSystemEncryptionStatusChanged, 1
  00082	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00087	85 c0		 test	 eax, eax
  00089	75 1b		 jne	 SHORT $LN24@AfterSysEn
  0008b	e8 00 00 00 00	 call	 ?DetermineHiddenOSCreationPhase@@YAIXZ ; DetermineHiddenOSCreationPhase
  00090	3b c6		 cmp	 eax, esi
  00092	74 0d		 je	 SHORT $LN23@AfterSysEn
  00094	56		 push	 esi
  00095	e8 00 00 00 00	 call	 ?ChangeHiddenOSCreationPhase@@YAHH@Z ; ChangeHiddenOSCreationPhase
  0009a	83 c4 04	 add	 esp, 4
  0009d	3b c6		 cmp	 eax, esi
  0009f	74 0f		 je	 SHORT $LN22@AfterSysEn
$LN23@AfterSysEn:
  000a1	e8 00 00 00 00	 call	 _WipeHiddenOSCreationConfig
$LN24@AfterSysEn:
  000a6	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  000ab	e8 00 00 00 00	 call	 ?SaveSysEncSettings@@YAHPAUHWND__@@@Z ; SaveSysEncSettings
$LN22@AfterSysEn:

; 8457 : 			EndMainDlg (MainDlg);

  000b0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  000b6	e8 00 00 00 00	 call	 _EndMainDlg

; 8458 : 			InconsistencyResolved (SRC_POS);

  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@GNJFNNLC@AfterSysEncProgressWMInitTasks?38@
  000c0	e8 00 00 00 00	 call	 _InconsistencyResolved
  000c5	83 c4 04	 add	 esp, 4
$LN14@AfterSysEn:

; 8474 : }

  000c8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000cb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d2	59		 pop	 ecx
  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	5b		 pop	 ebx
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
$LN5@AfterSysEn:

; 8424 : 		{
; 8425 : 		case SYSENC_STATUS_ENCRYPTING:
; 8426 : 
; 8427 : 			if (BootEncStatus.ConfiguredEncryptedAreaStart == BootEncStatus.EncryptedAreaStart
; 8428 : 				&& BootEncStatus.ConfiguredEncryptedAreaEnd == BootEncStatus.EncryptedAreaEnd)

  000da	a1 1a 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+26
  000df	3b 05 2a 00 00
	00		 cmp	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+42
  000e5	0f 85 c9 00 00
	00		 jne	 $LN4@AfterSysEn
  000eb	8b 0d 1e 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+30
  000f1	3b 0d 2e 00 00
	00		 cmp	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+46
  000f7	0f 85 b7 00 00
	00		 jne	 $LN4@AfterSysEn
  000fd	8b 15 22 00 00
	00		 mov	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+34
  00103	3b 15 32 00 00
	00		 cmp	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+50
  00109	0f 85 a5 00 00
	00		 jne	 $LN4@AfterSysEn
  0010f	a1 26 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+38
  00114	3b 05 36 00 00
	00		 cmp	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+54
  0011a	0f 85 94 00 00
	00		 jne	 $LN4@AfterSysEn

; 8429 : 			{
; 8430 : 				// The partition/drive had been fully encrypted
; 8431 : 
; 8432 : 				ManageStartupSeqWiz (TRUE, "");

  00120	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00125	6a 01		 push	 1
  00127	e8 00 00 00 00	 call	 _ManageStartupSeqWiz
  0012c	83 c4 08	 add	 esp, 8

; 8433 : 				WipeHiddenOSCreationConfig();	// For extra conservative security

  0012f	e8 00 00 00 00	 call	 _WipeHiddenOSCreationConfig

; 8434 : 				ChangeSystemEncryptionStatus (SYSENC_STATUS_NONE);

  00134	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00139	85 c0		 test	 eax, eax
  0013b	75 0f		 jne	 SHORT $LN19@AfterSysEn
  0013d	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  00142	e8 00 00 00 00	 call	 _Error
  00147	83 c4 04	 add	 esp, 4
  0014a	eb 3e		 jmp	 SHORT $LN15@AfterSysEn
$LN19@AfterSysEn:
  0014c	89 35 00 00 00
	00		 mov	 DWORD PTR _SystemEncryptionStatus, esi
  00152	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bSystemEncryptionStatusChanged, 1
  0015c	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00161	85 c0		 test	 eax, eax
  00163	75 1b		 jne	 SHORT $LN17@AfterSysEn
  00165	e8 00 00 00 00	 call	 ?DetermineHiddenOSCreationPhase@@YAIXZ ; DetermineHiddenOSCreationPhase
  0016a	3b c6		 cmp	 eax, esi
  0016c	74 0d		 je	 SHORT $LN16@AfterSysEn
  0016e	56		 push	 esi
  0016f	e8 00 00 00 00	 call	 ?ChangeHiddenOSCreationPhase@@YAHH@Z ; ChangeHiddenOSCreationPhase
  00174	83 c4 04	 add	 esp, 4
  00177	3b c6		 cmp	 eax, esi
  00179	74 0f		 je	 SHORT $LN15@AfterSysEn
$LN16@AfterSysEn:
  0017b	e8 00 00 00 00	 call	 _WipeHiddenOSCreationConfig
$LN17@AfterSysEn:
  00180	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00185	e8 00 00 00 00	 call	 ?SaveSysEncSettings@@YAHPAUHWND__@@@Z ; SaveSysEncSettings
$LN15@AfterSysEn:

; 8435 : 
; 8436 : 				Info ("SYSTEM_ENCRYPTION_FINISHED");

  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LJPGNBNM@SYSTEM_ENCRYPTION_FINISHED?$AA@
  0018f	e8 00 00 00 00	 call	 _Info

; 8437 : 				EndMainDlg (MainDlg);

  00194	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  0019a	83 c4 04	 add	 esp, 4
  0019d	e8 00 00 00 00	 call	 _EndMainDlg

; 8474 : }

  001a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ac	59		 pop	 ecx
  001ad	5f		 pop	 edi
  001ae	5e		 pop	 esi
  001af	5b		 pop	 ebx
  001b0	8b e5		 mov	 esp, ebp
  001b2	5d		 pop	 ebp
  001b3	c3		 ret	 0
$LN4@AfterSysEn:

; 8438 : 				return;
; 8439 : 			}
; 8440 : 			else
; 8441 : 			{
; 8442 : 				SysEncResume ();

  001b4	e8 00 00 00 00	 call	 ?SysEncResume@@YAXXZ	; SysEncResume
  001b9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 8467 : 	}
; 8468 : 
; 8469 : 	InitSysEncProgressBar ();

  001c0	e8 00 00 00 00	 call	 _InitSysEncProgressBar

; 8470 : 
; 8471 : 	UpdateSysEncProgressBar ();

  001c5	e8 00 00 00 00	 call	 ?UpdateSysEncProgressBar@@YAXXZ ; UpdateSysEncProgressBar

; 8472 : 
; 8473 : 	UpdateSysEncControls ();

  001ca	e8 00 00 00 00	 call	 ?UpdateSysEncControls@@YAXXZ ; UpdateSysEncControls

; 8474 : }

  001cf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001d2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d9	59		 pop	 ecx
  001da	5f		 pop	 edi
  001db	5e		 pop	 esi
  001dc	5b		 pop	 ebx
  001dd	8b e5		 mov	 esp, ebp
  001df	5d		 pop	 ebp
  001e0	c3		 ret	 0
__catch$_AfterSysEncProgressWMInitTasks$0:

; 8459 : 			return;
; 8460 : 		}
; 8461 : 	}
; 8462 : 	catch (Exception &e)
; 8463 : 	{
; 8464 : 		e.Show (hwndDlg);

  001e1	8b 4d ec	 mov	 ecx, DWORD PTR _e$135211[ebp]
  001e4	8b 11		 mov	 edx, DWORD PTR [ecx]
  001e6	8b 45 08	 mov	 eax, DWORD PTR _hwndDlg$[ebp]
  001e9	8b 12		 mov	 edx, DWORD PTR [edx]
  001eb	50		 push	 eax
  001ec	ff d2		 call	 edx

; 8465 : 		EndMainDlg (MainDlg);

  001ee	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  001f4	e8 00 00 00 00	 call	 _EndMainDlg

; 8466 : 		return;

  001f9	b8 00 00 00 00	 mov	 eax, $LN14@AfterSysEn
  001fe	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_AfterSysEncProgressWMInitTasks:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_AfterSysEncProgressWMInitTasks
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_AfterSysEncProgressWMInitTasks ENDP
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
;	COMDAT ?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z
_TEXT	SEGMENT
__Copied$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Ptr_size$ = 12					; size = 4
__Count$ = 16						; size = 4
?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Xsgetn_s, COMDAT
; _this$ = ecx

; 332  : 		{	// get _Count characters from stream

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	56		 push	 esi
  00003	57		 push	 edi

; 333  : 		int_type _Meta;
; 334  : 		streamsize _Stream_size, _Size, _Copied;
; 335  : 
; 336  : 		for (_Copied = 0; 0 < _Count; )

  00004	8b 7c 24 1c	 mov	 edi, DWORD PTR __Count$[esp+12]
  00008	33 f6		 xor	 esi, esi
  0000a	8b d9		 mov	 ebx, ecx
  0000c	89 74 24 0c	 mov	 DWORD PTR __Copied$[esp+16], esi
  00010	85 ff		 test	 edi, edi
  00012	0f 8e 89 00 00
	00		 jle	 $LN33@Xsgetn_s
  00018	55		 push	 ebp
  00019	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  0001d	8d 49 00	 npad	 3
$LL7@Xsgetn_s:

; 337  : 			if (0 < (_Stream_size = _Gnavail()))

  00020	8b cb		 mov	 ecx, ebx
  00022	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail
  00027	85 c0		 test	 eax, eax
  00029	7e 41		 jle	 SHORT $LN5@Xsgetn_s

; 338  : 				{	// copy from read buffer
; 339  : 				_Size = _Stream_size;
; 340  : 				if (_Count < _Size)

  0002b	3b f8		 cmp	 edi, eax
  0002d	8b f0		 mov	 esi, eax
  0002f	7d 02		 jge	 SHORT $LN4@Xsgetn_s

; 341  : 					_Size = _Count;

  00031	8b f7		 mov	 esi, edi
$LN4@Xsgetn_s:

; 342  : 				_Traits_helper::copy_s<_Traits>(_Ptr, _Ptr_size, gptr(), _Size);

  00033	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	8b 54 24 1c	 mov	 edx, DWORD PTR __Ptr_size$[esp+16]
  0003c	8d 3c 36	 lea	 edi, DWORD PTR [esi+esi]
  0003f	57		 push	 edi
  00040	51		 push	 ecx
  00041	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  00044	50		 push	 eax
  00045	55		 push	 ebp
  00046	e8 00 00 00 00	 call	 _memcpy_s

; 343  : 				_Ptr += _Size;
; 344  : 				_Copied += _Size;
; 345  : 				_Count -= _Size;
; 346  : 				gbump((int)_Size);

  0004b	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  0004e	29 30		 sub	 DWORD PTR [eax], esi
  00050	29 74 24 30	 sub	 DWORD PTR __Count$[esp+32], esi
  00054	01 74 24 20	 add	 DWORD PTR __Copied$[esp+36], esi
  00058	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  0005b	8b 74 24 20	 mov	 esi, DWORD PTR __Copied$[esp+36]
  0005f	03 ef		 add	 ebp, edi
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	01 38		 add	 DWORD PTR [eax], edi
  00066	8b 7c 24 20	 mov	 edi, DWORD PTR __Count$[esp+16]
  0006a	eb 27		 jmp	 SHORT $LN1@Xsgetn_s
$LN5@Xsgetn_s:

; 347  : 				}
; 348  : 			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  0006c	8b 13		 mov	 edx, DWORD PTR [ebx]
  0006e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00071	8b cb		 mov	 ecx, ebx
  00073	ff d0		 call	 eax
  00075	0f b7 c0	 movzx	 eax, ax
  00078	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0007d	66 3b c8	 cmp	 cx, ax
  00080	74 15		 je	 SHORT $LN32@Xsgetn_s

; 349  : 				break;	// end of file, quit
; 350  : 			else
; 351  : 				{	// get a single character
; 352  : 				*_Ptr++ = _Traits::to_char_type(_Meta);

  00082	66 89 45 00	 mov	 WORD PTR [ebp], ax

; 353  : 				++_Copied;

  00086	46		 inc	 esi
  00087	83 c5 02	 add	 ebp, 2

; 354  : 				--_Count;

  0008a	4f		 dec	 edi
  0008b	89 74 24 10	 mov	 DWORD PTR __Copied$[esp+20], esi
  0008f	89 7c 24 20	 mov	 DWORD PTR __Count$[esp+16], edi
$LN1@Xsgetn_s:

; 333  : 		int_type _Meta;
; 334  : 		streamsize _Stream_size, _Size, _Copied;
; 335  : 
; 336  : 		for (_Copied = 0; 0 < _Count; )

  00093	85 ff		 test	 edi, edi
  00095	7f 89		 jg	 SHORT $LL7@Xsgetn_s
$LN32@Xsgetn_s:
  00097	5d		 pop	 ebp
  00098	5f		 pop	 edi

; 355  : 				}
; 356  : 
; 357  : 		return (_Copied);

  00099	8b c6		 mov	 eax, esi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx

; 358  : 		}

  0009d	59		 pop	 ecx
  0009e	c2 0c 00	 ret	 12			; 0000000cH
$LN33@Xsgetn_s:
  000a1	5f		 pop	 edi

; 355  : 				}
; 356  : 
; 357  : 		return (_Copied);

  000a2	8b c6		 mov	 eax, esi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx

; 358  : 		}

  000a6	59		 pop	 ecx
  000a7	c2 0c 00	 ret	 12			; 0000000cH
?_Xsgetn_s@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPA_WIH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Xsgetn_s
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z
_TEXT	SEGMENT
__Copied$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsputn, COMDAT
; _this$ = ecx

; 362  : 		{	// put _Count characters to stream

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	56		 push	 esi
  00003	57		 push	 edi

; 363  : 		streamsize _Stream_size, _Size, _Copied;
; 364  : 
; 365  : 		for (_Copied = 0; 0 < _Count; )

  00004	8b 7c 24 18	 mov	 edi, DWORD PTR __Count$[esp+12]
  00008	33 f6		 xor	 esi, esi
  0000a	8b d9		 mov	 ebx, ecx
  0000c	89 74 24 0c	 mov	 DWORD PTR __Copied$[esp+16], esi
  00010	85 ff		 test	 edi, edi
  00012	0f 8e 82 00 00
	00		 jle	 $LN33@xsputn
  00018	55		 push	 ebp
  00019	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  0001d	8d 49 00	 npad	 3
$LL7@xsputn:

; 366  : 			if (0 < (_Stream_size = _Pnavail()))

  00020	8b cb		 mov	 ecx, ebx
  00022	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail
  00027	85 c0		 test	 eax, eax
  00029	7e 3c		 jle	 SHORT $LN5@xsputn

; 367  : 				{	// copy to write buffer
; 368  : 				_Size = _Stream_size;
; 369  : 				if (_Count < _Size)

  0002b	3b f8		 cmp	 edi, eax
  0002d	8b f0		 mov	 esi, eax
  0002f	7d 02		 jge	 SHORT $LN4@xsputn

; 370  : 					_Size = _Count;

  00031	8b f7		 mov	 esi, edi
$LN4@xsputn:

; 371  : 				_Traits_helper::copy_s<_Traits>(pptr(), _Stream_size, _Ptr, _Size);

  00033	8b 4b 24	 mov	 ecx, DWORD PTR [ebx+36]
  00036	8b 11		 mov	 edx, DWORD PTR [ecx]
  00038	8d 3c 36	 lea	 edi, DWORD PTR [esi+esi]
  0003b	57		 push	 edi
  0003c	55		 push	 ebp
  0003d	03 c0		 add	 eax, eax
  0003f	50		 push	 eax
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 _memcpy_s

; 372  : 				_Ptr += _Size;
; 373  : 				_Copied += _Size;
; 374  : 				_Count -= _Size;
; 375  : 				pbump((int)_Size);

  00046	8b 43 34	 mov	 eax, DWORD PTR [ebx+52]
  00049	29 30		 sub	 DWORD PTR [eax], esi
  0004b	29 74 24 2c	 sub	 DWORD PTR __Count$[esp+32], esi
  0004f	01 74 24 20	 add	 DWORD PTR __Copied$[esp+36], esi
  00053	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]

; 376  : 				}
; 377  : 			else if (_Traits::eq_int_type(_Traits::eof(),

  00056	8b 74 24 20	 mov	 esi, DWORD PTR __Copied$[esp+36]
  0005a	03 ef		 add	 ebp, edi
  0005c	83 c4 10	 add	 esp, 16			; 00000010H
  0005f	01 38		 add	 DWORD PTR [eax], edi
  00061	8b 7c 24 1c	 mov	 edi, DWORD PTR __Count$[esp+16]
  00065	eb 25		 jmp	 SHORT $LN1@xsputn
$LN5@xsputn:

; 378  : 				overflow(_Traits::to_int_type(*_Ptr))))

  00067	0f b7 45 00	 movzx	 eax, WORD PTR [ebp]
  0006b	8b 13		 mov	 edx, DWORD PTR [ebx]
  0006d	50		 push	 eax
  0006e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00071	8b cb		 mov	 ecx, ebx
  00073	ff d0		 call	 eax
  00075	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0007a	66 3b c8	 cmp	 cx, ax
  0007d	74 11		 je	 SHORT $LN32@xsputn

; 379  : 				break;	// single character put failed, quit
; 380  : 			else
; 381  : 				{	// count character successfully put
; 382  : 				++_Ptr;
; 383  : 				++_Copied;

  0007f	46		 inc	 esi
  00080	83 c5 02	 add	 ebp, 2

; 384  : 				--_Count;

  00083	4f		 dec	 edi
  00084	89 74 24 10	 mov	 DWORD PTR __Copied$[esp+20], esi
  00088	89 7c 24 1c	 mov	 DWORD PTR __Count$[esp+16], edi
$LN1@xsputn:

; 363  : 		streamsize _Stream_size, _Size, _Copied;
; 364  : 
; 365  : 		for (_Copied = 0; 0 < _Count; )

  0008c	85 ff		 test	 edi, edi
  0008e	7f 90		 jg	 SHORT $LL7@xsputn
$LN32@xsputn:
  00090	5d		 pop	 ebp
  00091	5f		 pop	 edi

; 385  : 				}
; 386  : 
; 387  : 		return (_Copied);

  00092	8b c6		 mov	 eax, esi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx

; 388  : 		}

  00096	59		 pop	 ecx
  00097	c2 08 00	 ret	 8
$LN33@xsputn:
  0009a	5f		 pop	 edi

; 385  : 				}
; 386  : 
; 387  : 		return (_Copied);

  0009b	8b c6		 mov	 eax, esi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx

; 388  : 		}

  0009f	59		 pop	 ecx
  000a0	c2 08 00	 ret	 8
?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHPB_WH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsputn
_TEXT	ENDS
PUBLIC	??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
PUBLIC	??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R17?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R13A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	0aH
	DD	FLAT:??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$all'
	DB	'ocator@_W@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
	DD	054H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD FLAT:??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$0
__ehfuncinfo$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 495  : 		{	// destroy the object

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	89 4c 24 08	 mov	 DWORD PTR _this$[esp+24], ecx
  00026	8b 41 ac	 mov	 eax, DWORD PTR [ecx-84]
  00029	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002c	c7 44 0a ac 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-84], OFFSET ??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@

; 496  : 		}

  00034	8d 71 b8	 lea	 esi, DWORD PTR [ecx-72]
  00037	8b ce		 mov	 ecx, esi
  00039	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  00047	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
  00053	8b 46 f4	 mov	 eax, DWORD PTR [esi-12]
  00056	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00059	c7 44 31 f4 00
	00 00 00	 mov	 DWORD PTR [ecx+esi-12], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
  00061	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00064	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00067	c7 44 30 fc 00
	00 00 00	 mov	 DWORD PTR [eax+esi-4], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  0006f	8b 4e f4	 mov	 ecx, DWORD PTR [esi-12]
  00072	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00075	c7 44 32 f4 00
	00 00 00	 mov	 DWORD PTR [edx+esi-12], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0007d	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00088	59		 pop	 ecx
  00089	5e		 pop	 esi
  0008a	83 c4 10	 add	 esp, 16			; 00000010H
  0008d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 e9 48	 sub	 ecx, 72			; 00000048H
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00012	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
_TEXT	SEGMENT
__Newsize$136090 = -4					; size = 4
__Meta$ = 8						; size = 2
?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::overflow, COMDAT
; _this$ = ecx

; 87   : 		{	// put an element to stream

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 88   : 		if (_Mystate & _Append
; 89   : 			&& _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)

  00004	f6 46 40 08	 test	 BYTE PTR [esi+64], 8
  00008	57		 push	 edi
  00009	74 23		 je	 SHORT $LN98@overflow
  0000b	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  0000e	8b 02		 mov	 eax, DWORD PTR [edx]
  00010	85 c0		 test	 eax, eax
  00012	74 1a		 je	 SHORT $LN98@overflow
  00014	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  00017	3b c1		 cmp	 eax, ecx
  00019	73 13		 jae	 SHORT $LN98@overflow

; 90   : 			_Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

  0001b	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
  0001e	8b 3f		 mov	 edi, DWORD PTR [edi]
  00020	8d 04 78	 lea	 eax, DWORD PTR [eax+edi*2]
  00023	2b c1		 sub	 eax, ecx
  00025	89 0a		 mov	 DWORD PTR [edx], ecx
  00027	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  0002a	d1 f8		 sar	 eax, 1
  0002c	89 01		 mov	 DWORD PTR [ecx], eax
$LN98@overflow:

; 91   : 
; 92   : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0002e	66 8b 44 24 10	 mov	 ax, WORD PTR __Meta$[esp+8]
  00033	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00038	66 3b d0	 cmp	 dx, ax
  0003b	75 08		 jne	 SHORT $LN17@overflow
  0003d	5f		 pop	 edi

; 93   : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  0003e	33 c0		 xor	 eax, eax
  00040	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  00041	59		 pop	 ecx
  00042	c2 04 00	 ret	 4
$LN17@overflow:

; 94   : 		else if (_Mysb::pptr() != 0
; 95   : 			&& _Mysb::pptr() < _Mysb::epptr())

  00045	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  00048	8b 3a		 mov	 edi, DWORD PTR [edx]
  0004a	53		 push	 ebx
  0004b	85 ff		 test	 edi, edi
  0004d	74 24		 je	 SHORT $LN15@overflow
  0004f	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00052	8b 19		 mov	 ebx, DWORD PTR [ecx]
  00054	8b d7		 mov	 edx, edi
  00056	8d 1c 5a	 lea	 ebx, DWORD PTR [edx+ebx*2]
  00059	3b d3		 cmp	 edx, ebx
  0005b	73 16		 jae	 SHORT $LN15@overflow

; 96   : 			{	// room in buffer, store it
; 97   : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  0005d	ff 09		 dec	 DWORD PTR [ecx]

; 149  : 
; 150  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  0005f	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  00062	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00064	5b		 pop	 ebx
  00065	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  00068	89 16		 mov	 DWORD PTR [esi], edx
  0006a	5f		 pop	 edi
  0006b	66 89 01	 mov	 WORD PTR [ecx], ax
  0006e	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  0006f	59		 pop	 ecx
  00070	c2 04 00	 ret	 4
$LN15@overflow:

; 98   : 			return (_Meta);
; 99   : 			}
; 100  : 		else if (_Mystate & _Constant)

  00073	f6 46 40 02	 test	 BYTE PTR [esi+64], 2

; 101  : 			return (_Traits::eof());	// array nonmutable, fail

  00077	75 3f		 jne	 SHORT $LN105@overflow

; 102  : 		else
; 103  : 			{	// grow buffer and store element
; 104  : 			size_t _Oldsize = _Mysb::pptr() == 0
; 105  : 				? 0 : _Mysb::epptr() - _Mysb::eback();

  00079	85 ff		 test	 edi, edi
  0007b	75 04		 jne	 SHORT $LN21@overflow
  0007d	33 db		 xor	 ebx, ebx
  0007f	eb 10		 jmp	 SHORT $LN22@overflow
$LN21@overflow:
  00081	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00084	8b 18		 mov	 ebx, DWORD PTR [eax]
  00086	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00089	03 db		 add	 ebx, ebx
  0008b	2b 19		 sub	 ebx, DWORD PTR [ecx]
  0008d	03 df		 add	 ebx, edi
  0008f	d1 fb		 sar	 ebx, 1
$LN22@overflow:

; 106  : 			size_t _Newsize = _Oldsize;
; 107  : 			size_t _Inc = _Newsize / 2 < _MINSIZE
; 108  : 				? _MINSIZE : _Newsize / 2;	// grow by 50 per cent

  00091	8b c3		 mov	 eax, ebx
  00093	d1 e8		 shr	 eax, 1
  00095	83 f8 20	 cmp	 eax, 32			; 00000020H
  00098	73 07		 jae	 SHORT $LN23@overflow
  0009a	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0009f	eb 04		 jmp	 SHORT $LL11@overflow
$LN23@overflow:

; 109  : 
; 110  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  000a1	85 c0		 test	 eax, eax
  000a3	76 11		 jbe	 SHORT $LN102@overflow
$LL11@overflow:
  000a5	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
  000aa	2b d0		 sub	 edx, eax
  000ac	3b d3		 cmp	 edx, ebx
  000ae	73 04		 jae	 SHORT $LN10@overflow

; 111  : 				_Inc /= 2;	// increment causes overflow, halve it

  000b0	d1 e8		 shr	 eax, 1

; 109  : 
; 110  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  000b2	75 f1		 jne	 SHORT $LL11@overflow
$LN10@overflow:

; 112  : 			if (_Inc == 0)

  000b4	85 c0		 test	 eax, eax
$LN102@overflow:
  000b6	75 0c		 jne	 SHORT $LN9@overflow
$LN105@overflow:
  000b8	5b		 pop	 ebx
  000b9	5f		 pop	 edi

; 113  : 				return (_Traits::eof());	// buffer can't grow, fail

  000ba	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  000bf	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  000c0	59		 pop	 ecx
  000c1	c2 04 00	 ret	 4
$LN9@overflow:
  000c4	55		 push	 ebp

; 114  : 
; 115  : 			_Newsize += _Inc;

  000c5	03 c3		 add	 eax, ebx

; 116  : 
; 117  : 			_Elem *_Newptr = _Al.allocate(_Newsize);

  000c7	6a 00		 push	 0
  000c9	50		 push	 eax
  000ca	89 44 24 18	 mov	 DWORD PTR __Newsize$136090[esp+28], eax
  000ce	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  000d3	8b f8		 mov	 edi, eax

; 118  : 			_Elem *_Oldptr = _Mysb::eback();

  000d5	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000d8	8b 28		 mov	 ebp, DWORD PTR [eax]
  000da	83 c4 08	 add	 esp, 8

; 119  : 
; 120  : 			if (0 < _Oldsize)

  000dd	85 db		 test	 ebx, ebx
  000df	76 12		 jbe	 SHORT $LN103@overflow

; 121  : 				_Traits_helper::copy_s<_Traits>(_Newptr, _Newsize, _Oldptr, _Oldsize);

  000e1	8b 4c 24 10	 mov	 ecx, DWORD PTR __Newsize$136090[esp+20]
  000e5	53		 push	 ebx
  000e6	55		 push	 ebp
  000e7	51		 push	 ecx
  000e8	57		 push	 edi
  000e9	e8 00 00 00 00	 call	 ??$copy_s@U?$char_traits@_W@std@@@_Traits_helper@std@@YAPA_WPA_WIPB_WI@Z ; std::_Traits_helper::copy_s<std::char_traits<wchar_t> >
  000ee	83 c4 10	 add	 esp, 16			; 00000010H

; 122  : 
; 123  : 			if (_Oldsize == 0)

  000f1	85 db		 test	 ebx, ebx
$LN103@overflow:
  000f3	75 42		 jne	 SHORT $LN7@overflow

; 124  : 				{	// first growth, set up pointers
; 125  : 				_Seekhigh = _Newptr;
; 126  : 				_Mysb::setp(_Newptr, _Newptr + _Newsize);

  000f5	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000f8	8b 4c 24 10	 mov	 ecx, DWORD PTR __Newsize$136090[esp+20]
  000fc	89 7e 3c	 mov	 DWORD PTR [esi+60], edi
  000ff	89 3a		 mov	 DWORD PTR [edx], edi
  00101	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00104	89 38		 mov	 DWORD PTR [eax], edi
  00106	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00109	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  0010c	d1 fa		 sar	 edx, 1
  0010e	89 10		 mov	 DWORD PTR [eax], edx

; 127  : 				if (_Mystate & _Noread)

  00110	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  00114	74 1a		 je	 SHORT $LN6@overflow

; 128  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  00116	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00119	89 39		 mov	 DWORD PTR [ecx], edi
  0011b	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0011e	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00124	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00127	d1 ff		 sar	 edi, 1
  00129	89 38		 mov	 DWORD PTR [eax], edi

; 129  : 				else

  0012b	e9 80 00 00 00	 jmp	 $LN2@overflow
$LN6@overflow:

; 130  : 					_Mysb::setg(_Newptr, _Newptr, _Newptr + 1);

  00130	8d 4f 02	 lea	 ecx, DWORD PTR [edi+2]
  00133	51		 push	 ecx
  00134	57		 push	 edi

; 131  : 				}
; 132  : 			else

  00135	eb 71		 jmp	 SHORT $LN104@overflow
$LN7@overflow:

; 133  : 				{	// not first growth, adjust pointers
; 134  : 				_Seekhigh = _Newptr + (_Seekhigh - _Oldptr);

  00137	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]

; 135  : 				_Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),
; 136  : 					_Newptr + (_Mysb::pptr() - _Oldptr),
; 137  : 					_Newptr + _Newsize);

  0013a	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0013d	2b d5		 sub	 edx, ebp
  0013f	d1 fa		 sar	 edx, 1
  00141	8d 04 57	 lea	 eax, DWORD PTR [edi+edx*2]
  00144	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00147	8b 11		 mov	 edx, DWORD PTR [ecx]
  00149	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0014c	2b d5		 sub	 edx, ebp
  0014e	d1 fa		 sar	 edx, 1
  00150	8d 04 57	 lea	 eax, DWORD PTR [edi+edx*2]
  00153	8b 11		 mov	 edx, DWORD PTR [ecx]
  00155	2b d5		 sub	 edx, ebp
  00157	d1 fa		 sar	 edx, 1
  00159	8d 14 57	 lea	 edx, DWORD PTR [edi+edx*2]
  0015c	89 11		 mov	 DWORD PTR [ecx], edx
  0015e	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00161	8b 54 24 10	 mov	 edx, DWORD PTR __Newsize$136090[esp+20]
  00165	89 01		 mov	 DWORD PTR [ecx], eax
  00167	8d 0c 12	 lea	 ecx, DWORD PTR [edx+edx]
  0016a	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  0016d	2b c8		 sub	 ecx, eax
  0016f	03 cf		 add	 ecx, edi
  00171	d1 f9		 sar	 ecx, 1
  00173	89 0a		 mov	 DWORD PTR [edx], ecx

; 138  : 				if (_Mystate & _Noread)

  00175	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  00179	74 17		 je	 SHORT $LN3@overflow

; 139  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  0017b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0017e	89 38		 mov	 DWORD PTR [eax], edi
  00180	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00183	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00189	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0018c	d1 ff		 sar	 edi, 1
  0018e	89 3a		 mov	 DWORD PTR [edx], edi

; 140  : 				else

  00190	eb 1e		 jmp	 SHORT $LN2@overflow
$LN3@overflow:

; 141  : 					_Mysb::setg(_Newptr,
; 142  : 						_Newptr + (_Mysb::gptr() - _Oldptr),
; 143  : 						_Mysb::pptr() + 1);

  00192	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00195	8b 08		 mov	 ecx, DWORD PTR [eax]
  00197	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0019a	8b 02		 mov	 eax, DWORD PTR [edx]
  0019c	83 c1 02	 add	 ecx, 2
  0019f	2b c5		 sub	 eax, ebp
  001a1	51		 push	 ecx
  001a2	d1 f8		 sar	 eax, 1
  001a4	8d 0c 47	 lea	 ecx, DWORD PTR [edi+eax*2]
  001a7	51		 push	 ecx
$LN104@overflow:
  001a8	57		 push	 edi
  001a9	8b ce		 mov	 ecx, esi
  001ab	e8 00 00 00 00	 call	 ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setg
$LN2@overflow:

; 144  : 				}
; 145  : 
; 146  : 			if (_Mystate & _Allocated)

  001b0	bb 01 00 00 00	 mov	 ebx, 1
  001b5	84 5e 40	 test	 BYTE PTR [esi+64], bl
  001b8	74 09		 je	 SHORT $LN87@overflow

; 147  : 				_Al.deallocate(_Oldptr, _Oldsize);

  001ba	55		 push	 ebp
  001bb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001c0	83 c4 04	 add	 esp, 4
$LN87@overflow:

; 148  : 			_Mystate |= _Allocated;

  001c3	09 5e 40	 or	 DWORD PTR [esi+64], ebx

; 149  : 
; 150  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  001c6	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  001c9	ff 08		 dec	 DWORD PTR [eax]
  001cb	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  001ce	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001d0	66 8b 44 24 18	 mov	 ax, WORD PTR __Meta$[esp+16]
  001d5	5d		 pop	 ebp
  001d6	5b		 pop	 ebx
  001d7	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  001da	89 16		 mov	 DWORD PTR [esi], edx
  001dc	5f		 pop	 edi
  001dd	66 89 01	 mov	 WORD PTR [ecx], ax
  001e0	5e		 pop	 esi

; 151  : 			return (_Meta);
; 152  : 			}
; 153  : 		}

  001e1	59		 pop	 ecx
  001e2	c2 04 00	 ret	 4
?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::overflow
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::~_Vector_val<HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::~_Vector_val<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::~_Vector_val<HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??1?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2149 : 		if (!_Built)

  00000	80 7c 24 04 00	 cmp	 BYTE PTR __Built$[esp-4], 0
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 27		 je	 SHORT $LN15@Tidy@2

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

  0000f	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00013	72 21		 jb	 SHORT $LN15@Tidy@2

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

  00015	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00018	53		 push	 ebx
  00019	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2154 : 			if (0 < _Newsize)

  0001b	85 ff		 test	 edi, edi
  0001d	76 0d		 jbe	 SHORT $LN13@Tidy@2

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

  0001f	57		 push	 edi
  00020	53		 push	 ebx
  00021	6a 10		 push	 16			; 00000010H
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _memcpy_s
  00029	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@Tidy@2:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  0002c	53		 push	 ebx
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00032	83 c4 04	 add	 esp, 4
  00035	5b		 pop	 ebx
$LN15@Tidy@2:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;
; 2159 : 		_Eos(_Newsize);

  00036	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00039	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00040	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 2160 : 		}

  00047	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx

; 2149 : 		if (!_Built)

  00000	80 7c 24 04 00	 cmp	 BYTE PTR __Built$[esp-4], 0
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 10	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 2a		 je	 SHORT $LN17@Tidy@3

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

  0000f	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00013	72 24		 jb	 SHORT $LN17@Tidy@3

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

  00015	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00018	53		 push	 ebx
  00019	8b 18		 mov	 ebx, DWORD PTR [eax]

; 2154 : 			if (0 < _Newsize)

  0001b	85 ff		 test	 edi, edi
  0001d	76 10		 jbe	 SHORT $LN15@Tidy@3

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

  0001f	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  00022	51		 push	 ecx
  00023	53		 push	 ebx
  00024	6a 10		 push	 16			; 00000010H
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _memcpy_s
  0002c	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@Tidy@3:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  0002f	53		 push	 ebx
  00030	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00035	83 c4 04	 add	 esp, 4
  00038	5b		 pop	 ebx
$LN17@Tidy@3:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;
; 2159 : 		_Eos(_Newsize);

  00039	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0003c	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00043	33 d2		 xor	 edx, edx
  00045	66 89 54 7e 04	 mov	 WORD PTR [esi+edi*2+4], dx
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi

; 2160 : 		}

  0004c	c2 08 00	 ret	 8
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xran
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
tv130 = 8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1262 : 		{	// erase elements [_Off, _Off + _Count)

  00000	53		 push	 ebx

; 1263 : 		if (_Mysize < _Off)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	73 05		 jae	 SHORT $LN3@erase

; 1264 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@erase:

; 1265 : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c3		 sub	 eax, ebx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $LN2@erase

; 1266 : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$LN2@erase:

; 1267 : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 55		 jbe	 SHORT $LN30@erase

; 1268 : 			{	// move elements down
; 1269 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1270 : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	55		 push	 ebp
  0002a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0002d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00030	72 09		 jb	 SHORT $LN8@erase
  00032	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00035	89 54 24 14	 mov	 DWORD PTR tv130[esp+12], edx
  00039	eb 04		 jmp	 SHORT $LN9@erase
$LN8@erase:
  0003b	89 6c 24 14	 mov	 DWORD PTR tv130[esp+12], ebp
$LN9@erase:
  0003f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00042	72 05		 jb	 SHORT $LN12@erase
  00044	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00047	eb 02		 jmp	 SHORT $LN13@erase
$LN12@erase:
  00049	8b d5		 mov	 edx, ebp
$LN13@erase:
  0004b	2b c7		 sub	 eax, edi
  0004d	50		 push	 eax
  0004e	8b 44 24 18	 mov	 eax, DWORD PTR tv130[esp+16]
  00052	03 c3		 add	 eax, ebx
  00054	03 c7		 add	 eax, edi
  00056	50		 push	 eax
  00057	2b cb		 sub	 ecx, ebx
  00059	51		 push	 ecx
  0005a	03 d3		 add	 edx, ebx
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _memmove_s

; 1271 : 			size_type _Newsize = _Mysize - _Count;

  00062	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00065	2b c7		 sub	 eax, edi
  00067	83 c4 10	 add	 esp, 16			; 00000010H

; 1272 : 			_Eos(_Newsize);

  0006a	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0006e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00071	72 03		 jb	 SHORT $LN26@erase
  00073	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN26@erase:
  00076	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  0007a	5d		 pop	 ebp
$LN30@erase:
  0007b	5f		 pop	 edi

; 1273 : 			}
; 1274 : 		return (*this);

  0007c	8b c6		 mov	 eax, esi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx

; 1275 : 		}

  00080	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
tv133 = 8						; size = 4
__Off$ = 8						; size = 4
tv139 = 12						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx

; 1262 : 		{	// erase elements [_Off, _Off + _Count)

  00000	53		 push	 ebx

; 1263 : 		if (_Mysize < _Off)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  0000c	73 05		 jae	 SHORT $LN3@erase@2

; 1264 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@erase@2:

; 1265 : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c3		 sub	 eax, ebx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $LN2@erase@2

; 1266 : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$LN2@erase@2:

; 1267 : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 69		 jbe	 SHORT $LN32@erase@2

; 1268 : 			{	// move elements down
; 1269 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off, _Myres - _Off, _Myptr() + _Off + _Count,
; 1270 : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	55		 push	 ebp
  0002a	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  0002d	83 f9 08	 cmp	 ecx, 8
  00030	72 09		 jb	 SHORT $LN8@erase@2
  00032	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00035	89 54 24 14	 mov	 DWORD PTR tv133[esp+12], edx
  00039	eb 04		 jmp	 SHORT $LN9@erase@2
$LN8@erase@2:
  0003b	89 6c 24 14	 mov	 DWORD PTR tv133[esp+12], ebp
$LN9@erase@2:
  0003f	83 f9 08	 cmp	 ecx, 8
  00042	72 09		 jb	 SHORT $LN12@erase@2
  00044	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00047	89 54 24 18	 mov	 DWORD PTR tv139[esp+12], edx
  0004b	eb 04		 jmp	 SHORT $LN13@erase@2
$LN12@erase@2:
  0004d	89 6c 24 18	 mov	 DWORD PTR tv139[esp+12], ebp
$LN13@erase@2:
  00051	8b 54 24 14	 mov	 edx, DWORD PTR tv133[esp+12]
  00055	2b c7		 sub	 eax, edi
  00057	03 c0		 add	 eax, eax
  00059	50		 push	 eax
  0005a	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  0005d	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  00060	2b cb		 sub	 ecx, ebx
  00062	50		 push	 eax
  00063	03 c9		 add	 ecx, ecx
  00065	51		 push	 ecx
  00066	8b 4c 24 24	 mov	 ecx, DWORD PTR tv139[esp+24]
  0006a	8d 14 59	 lea	 edx, DWORD PTR [ecx+ebx*2]
  0006d	52		 push	 edx
  0006e	e8 00 00 00 00	 call	 _memmove_s

; 1271 : 			size_type _Newsize = _Mysize - _Count;

  00073	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00076	2b c7		 sub	 eax, edi
  00078	83 c4 10	 add	 esp, 16			; 00000010H

; 1272 : 			_Eos(_Newsize);

  0007b	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  0007f	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00082	72 03		 jb	 SHORT $LN28@erase@2
  00084	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN28@erase@2:
  00087	33 c9		 xor	 ecx, ecx
  00089	66 89 4c 45 00	 mov	 WORD PTR [ebp+eax*2], cx
  0008e	5d		 pop	 ebp
$LN32@erase@2:
  0008f	5f		 pop	 edi

; 1273 : 			}
; 1274 : 		return (*this);

  00090	8b c6		 mov	 eax, esi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 1275 : 		}

  00094	c2 08 00	 ret	 8
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::_Container_base_aux_alloc_real<std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::_Container_base_aux_alloc_real<std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 419  : 		{

  00000	56		 push	 esi

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN3@Container_
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4
$LN3@Container_:

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 421  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Container_base_aux_alloc_real@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<HostDevice> >::_Container_base_aux_alloc_real<std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__State$ = 16						; size = 4
?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Init, COMDAT
; _this$ = ecx

; 274  : 		_Seekhigh = 0;
; 275  : 		_Mystate = _State;

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __State$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi

; 276  : 
; 277  : 		if (_Count != 0
; 278  : 			&& (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))

  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Count$[esp+4]
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00013	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00016	85 ff		 test	 edi, edi
  00018	0f 84 8d 00 00
	00		 je	 $LN4@Init@2
  0001e	83 e0 06	 and	 eax, 6
  00021	3c 06		 cmp	 al, 6
  00023	0f 84 82 00 00
	00		 je	 $LN4@Init@2
  00029	53		 push	 ebx

; 279  : 			{	// finite buffer that can be read or written, set it up
; 280  : 			_Elem *_Pnew = _Al.allocate(_Count);

  0002a	6a 00		 push	 0
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00032	8b d8		 mov	 ebx, eax

; 281  : 			_Traits_helper::copy_s<_Traits>(_Pnew, _Count, _Ptr, _Count);

  00034	8b 44 24 18	 mov	 eax, DWORD PTR __Ptr$[esp+16]
  00038	03 ff		 add	 edi, edi
  0003a	57		 push	 edi
  0003b	50		 push	 eax
  0003c	57		 push	 edi
  0003d	53		 push	 ebx
  0003e	e8 00 00 00 00	 call	 _memcpy_s
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 282  : 			_Seekhigh = _Pnew + _Count;
; 283  : 
; 284  : 			if (!(_Mystate & _Noread))

  00046	f6 46 40 04	 test	 BYTE PTR [esi+64], 4
  0004a	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  0004d	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00050	75 13		 jne	 SHORT $LN21@Init@2

; 285  : 				_Mysb::setg(_Pnew, _Pnew,
; 286  : 					_Pnew + _Count);	// setup read buffer

  00052	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00055	89 19		 mov	 DWORD PTR [ecx], ebx
  00057	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0005a	89 1a		 mov	 DWORD PTR [edx], ebx
  0005c	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  0005f	8b cf		 mov	 ecx, edi
  00061	d1 f9		 sar	 ecx, 1
  00063	89 0a		 mov	 DWORD PTR [edx], ecx
$LN21@Init@2:

; 287  : 			if (!(_Mystate & _Constant))

  00065	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00068	f6 c1 02	 test	 cl, 2
  0006b	75 39		 jne	 SHORT $LN27@Init@2

; 288  : 				{	// setup write buffer, and maybe read buffer
; 289  : 				_Mysb::setp(_Pnew,
; 290  : 					(_Mystate & _Atend) ? _Pnew + _Count : _Pnew,
; 291  : 					_Pnew + _Count);

  0006d	f6 c1 10	 test	 cl, 16			; 00000010H
  00070	75 02		 jne	 SHORT $LN8@Init@2
  00072	8b c3		 mov	 eax, ebx
$LN8@Init@2:
  00074	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00077	89 19		 mov	 DWORD PTR [ecx], ebx
  00079	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  0007c	2b f8		 sub	 edi, eax
  0007e	89 02		 mov	 DWORD PTR [edx], eax
  00080	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00083	03 fb		 add	 edi, ebx
  00085	d1 ff		 sar	 edi, 1
  00087	89 38		 mov	 DWORD PTR [eax], edi

; 292  : 				if (_Mysb::gptr() == 0)

  00089	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0008c	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0008f	75 15		 jne	 SHORT $LN27@Init@2

; 293  : 					_Mysb::setg(_Pnew, 0, _Pnew);

  00091	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00094	89 1a		 mov	 DWORD PTR [edx], ebx
  00096	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00099	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0009f	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  000a2	d1 fb		 sar	 ebx, 1
  000a4	89 19		 mov	 DWORD PTR [ecx], ebx
$LN27@Init@2:

; 294  : 				}
; 295  : 			_Mystate |= _Allocated;

  000a6	83 4e 40 01	 or	 DWORD PTR [esi+64], 1
  000aa	5b		 pop	 ebx
$LN4@Init@2:
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi

; 296  : 			}
; 297  : 		}

  000ad	c2 0c 00	 ret	 12			; 0000000cH
?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Init
_TEXT	ENDS
PUBLIC	?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put, COMDAT

; 1510 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00000	8b 4c 24 10	 mov	 ecx, DWORD PTR __Dest$[esp]
  00004	55		 push	 ebp
  00005	8b 6c 24 1c	 mov	 ebp, DWORD PTR __Count$[esp]
  00009	85 ed		 test	 ebp, ebp
  0000b	76 5b		 jbe	 SHORT $LN1@Put
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7c 24 20	 mov	 edi, DWORD PTR __Ptr$[esp+8]
$LL3@Put:

; 1511 : 			*_Dest = *_Ptr;

  00013	85 c9		 test	 ecx, ecx
  00015	74 42		 je	 SHORT $LN10@Put
  00017	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0001a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001d	0f b7 17	 movzx	 edx, WORD PTR [edi]
  00020	8d 71 24	 lea	 esi, DWORD PTR [ecx+36]
  00023	74 1b		 je	 SHORT $LN16@Put
  00025	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00028	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002b	7e 13		 jle	 SHORT $LN16@Put
  0002d	ff 08		 dec	 DWORD PTR [eax]
  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	8d 71 02	 lea	 esi, DWORD PTR [ecx+2]
  00036	89 30		 mov	 DWORD PTR [eax], esi
  00038	66 89 11	 mov	 WORD PTR [ecx], dx
  0003b	0f b7 c2	 movzx	 eax, dx
  0003e	eb 0b		 jmp	 SHORT $LN17@Put
$LN16@Put:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]
  00042	52		 push	 edx
  00043	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00046	ff d2		 call	 edx
  00048	0f b7 c0	 movzx	 eax, ax
$LN17@Put:
  0004b	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00050	66 3b c8	 cmp	 cx, ax
  00053	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Dest$[esp+12]
  00057	75 05		 jne	 SHORT $LN2@Put
$LN10@Put:
  00059	c6 44 24 18 01	 mov	 BYTE PTR __Dest$[esp+8], 1
$LN2@Put:

; 1510 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  0005e	4d		 dec	 ebp
  0005f	83 c7 02	 add	 edi, 2
  00062	85 ed		 test	 ebp, ebp
  00064	77 ad		 ja	 SHORT $LL3@Put
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
$LN1@Put:

; 1512 : 		return (_Dest);

  00068	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  0006c	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  00070	89 10		 mov	 DWORD PTR [eax], edx
  00072	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00075	5d		 pop	 ebp

; 1513 : 		}

  00076	c3		 ret	 0
?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put
_TEXT	ENDS
PUBLIC	?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
; Function compile flags: /Ogtpy
;	COMDAT ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ch$ = 24						; size = 2
__Count$ = 28						; size = 4
?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep, COMDAT

; 1545 : 		for (; 0 < _Count; --_Count, ++_Dest)

  00000	8b 4c 24 10	 mov	 ecx, DWORD PTR __Dest$[esp]
  00004	57		 push	 edi
  00005	8b 7c 24 1c	 mov	 edi, DWORD PTR __Count$[esp]
  00009	85 ff		 test	 edi, edi
  0000b	76 53		 jbe	 SHORT $LN1@Rep
  0000d	56		 push	 esi
  0000e	8b 74 24 1c	 mov	 esi, DWORD PTR __Ch$[esp+4]
$LL6@Rep:

; 1546 : 			*_Dest = _Ch;

  00012	85 c9		 test	 ecx, ecx
  00014	74 3f		 je	 SHORT $LN10@Rep
  00016	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00019	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001c	8d 51 24	 lea	 edx, DWORD PTR [ecx+36]
  0001f	74 1b		 je	 SHORT $LN16@Rep
  00021	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00024	83 38 00	 cmp	 DWORD PTR [eax], 0
  00027	7e 13		 jle	 SHORT $LN16@Rep
  00029	ff 08		 dec	 DWORD PTR [eax]
  0002b	8b 02		 mov	 eax, DWORD PTR [edx]
  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002f	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  00032	89 10		 mov	 DWORD PTR [eax], edx
  00034	66 89 31	 mov	 WORD PTR [ecx], si
  00037	0f b7 c6	 movzx	 eax, si
  0003a	eb 0b		 jmp	 SHORT $LN17@Rep
$LN16@Rep:
  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00041	56		 push	 esi
  00042	ff d2		 call	 edx
  00044	0f b7 c0	 movzx	 eax, ax
$LN17@Rep:
  00047	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0004c	66 3b c8	 cmp	 cx, ax
  0004f	8b 4c 24 18	 mov	 ecx, DWORD PTR __Dest$[esp+8]
  00053	75 05		 jne	 SHORT $LN2@Rep
$LN10@Rep:
  00055	c6 44 24 14 01	 mov	 BYTE PTR __Dest$[esp+4], 1
$LN2@Rep:

; 1545 : 		for (; 0 < _Count; --_Count, ++_Dest)

  0005a	83 ef 01	 sub	 edi, 1
  0005d	75 b3		 jne	 SHORT $LL6@Rep
  0005f	5e		 pop	 esi
$LN1@Rep:

; 1547 : 		return (_Dest);

  00060	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  00064	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  00068	89 10		 mov	 DWORD PTR [eax], edx
  0006a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0006d	5f		 pop	 edi

; 1548 : 		}

  0006e	c3		 ret	 0
?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??H?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

  00000	56		 push	 esi

; 381  : 		_Myt _Tmp = *this;

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]
  00003	57		 push	 edi
  00004	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]

; 382  : 		return (_Tmp += _Off);

  00007	85 f6		 test	 esi, esi
  00009	75 20		 jne	 SHORT $LN30@operator@12
  0000b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00010	33 c0		 xor	 eax, eax
$LN21@operator@12:
  00012	8b 4c 24 10	 mov	 ecx, DWORD PTR __Off$[esp+4]
  00016	69 c9 88 00 00
	00		 imul	 ecx, 136		; 00000088H
  0001c	03 f9		 add	 edi, ecx
  0001e	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
  00021	77 13		 ja	 SHORT $LN8@operator@12
  00023	85 f6		 test	 esi, esi
  00025	74 08		 je	 SHORT $LN26@operator@12
  00027	8b 06		 mov	 eax, DWORD PTR [esi]
  00029	eb 06		 jmp	 SHORT $LN27@operator@12
$LN30@operator@12:
  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	eb e3		 jmp	 SHORT $LN21@operator@12
$LN26@operator@12:
  0002f	33 c0		 xor	 eax, eax
$LN27@operator@12:
  00031	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  00034	73 05		 jae	 SHORT $LN7@operator@12
$LN8@operator@12:
  00036	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@operator@12:
  0003b	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  0003f	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00042	5f		 pop	 edi
  00043	89 30		 mov	 DWORD PTR [eax], esi
  00045	5e		 pop	 esi

; 383  : 		}

  00046	c2 08 00	 ret	 8
??H?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::operator+
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2083 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 2084 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 0f	 or	 esi, 15			; 0000000fH

; 2085 : 		if (max_size() < _Newres)

  00038	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0003b	76 04		 jbe	 SHORT $LN6@Copy

; 2086 : 			_Newres = _Newsize;	// undo roundup if too big

  0003d	8b f0		 mov	 esi, eax

; 2087 : 		else if (_Newres / 3 < _Myres / 2

  0003f	eb 22		 jmp	 SHORT $LN4@Copy
$LN6@Copy:

; 2088 : 			&& _Myres <= max_size() - _Myres / 2)

  00041	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00044	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00049	f7 e6		 mul	 esi
  0004b	8b cb		 mov	 ecx, ebx
  0004d	d1 e9		 shr	 ecx, 1
  0004f	d1 ea		 shr	 edx, 1
  00051	3b d1		 cmp	 edx, ecx
  00053	73 0e		 jae	 SHORT $LN4@Copy
  00055	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0005a	2b c1		 sub	 eax, ecx
  0005c	3b d8		 cmp	 ebx, eax
  0005e	77 03		 ja	 SHORT $LN4@Copy

; 2089 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00060	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
$LN4@Copy:

; 2090 : 		_Elem *_Ptr = 0;
; 2091 : 
; 2092 : 		_TRY_BEGIN
; 2093 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00063	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00066	6a 00		 push	 0
  00068	51		 push	 ecx
  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00070	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00075	83 c4 08	 add	 esp, 8
  00078	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0007b	eb 28		 jmp	 SHORT $LN16@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0:

; 2094 : 		_CATCH_ALL
; 2095 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007d	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00080	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00083	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 2096 : 			_TRY_BEGIN
; 2097 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00086	40		 inc	 eax
  00087	6a 00		 push	 0
  00089	50		 push	 eax
  0008a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0008e	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00093	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00096	83 c4 08	 add	 esp, 8

; 2101 : 			_CATCH_END
; 2102 : 		_CATCH_END

  00099	b8 00 00 00 00	 mov	 eax, $LN106@Copy
  0009e	c3		 ret	 0
$LN106@Copy:
  0009f	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000a2	8b 75 e8	 mov	 esi, DWORD PTR __Newres$[ebp]
$LN16@Copy:

; 2103 : 
; 2104 : 		if (0 < _Oldlen)

  000a5	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  000a8	85 db		 test	 ebx, ebx
  000aa	76 20		 jbe	 SHORT $LN71@Copy

; 2105 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

  000ac	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000b0	72 05		 jb	 SHORT $LN63@Copy
  000b2	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000b5	eb 03		 jmp	 SHORT $LN64@Copy
$LN63@Copy:
  000b7	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN64@Copy:
  000ba	53		 push	 ebx
  000bb	50		 push	 eax
  000bc	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000bf	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _memcpy_s
  000c9	83 c4 10	 add	 esp, 16			; 00000010H
$LN71@Copy:

; 2106 : 		_Tidy(true);

  000cc	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H
  000d0	72 0c		 jb	 SHORT $LN87@Copy
  000d2	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000db	83 c4 04	 add	 esp, 4
$LN87@Copy:

; 2107 : 		_Bx._Ptr = _Ptr;

  000de	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000e1	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000e4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e7	89 08		 mov	 DWORD PTR [eax], ecx

; 2108 : 		_Myres = _Newres;

  000e9	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 2109 : 		_Eos(_Oldlen);

  000ec	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  000ef	83 fe 10	 cmp	 esi, 16			; 00000010H
  000f2	72 02		 jb	 SHORT $LN101@Copy
  000f4	8b c1		 mov	 eax, ecx
$LN101@Copy:
  000f6	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 2110 : 		}

  000fa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00104	59		 pop	 ecx
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1:

; 2098 : 			_CATCH_ALL
; 2099 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010e	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00111	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00115	72 0c		 jb	 SHORT $LN51@Copy
  00117	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0011a	52		 push	 edx
  0011b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00120	83 c4 04	 add	 esp, 4
$LN51@Copy:

; 2100 : 			_RERAISE;

  00123	6a 00		 push	 0
  00125	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0012c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00133	6a 00		 push	 0
  00135	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00139	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN109@Copy:
  0013e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$0
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Ptr$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newres$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy, COMDAT
; _this$ = ecx

; 2083 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 2084 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 07	 or	 esi, 7

; 2085 : 		if (max_size() < _Newres)

  00038	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH
  0003e	76 04		 jbe	 SHORT $LN6@Copy@2

; 2086 : 			_Newres = _Newsize;	// undo roundup if too big

  00040	8b f0		 mov	 esi, eax

; 2087 : 		else if (_Newres / 3 < _Myres / 2

  00042	eb 22		 jmp	 SHORT $LN4@Copy@2
$LN6@Copy@2:

; 2088 : 			&& _Myres <= max_size() - _Myres / 2)

  00044	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00047	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0004c	f7 e6		 mul	 esi
  0004e	8b cb		 mov	 ecx, ebx
  00050	d1 e9		 shr	 ecx, 1
  00052	d1 ea		 shr	 edx, 1
  00054	3b d1		 cmp	 edx, ecx
  00056	73 0e		 jae	 SHORT $LN4@Copy@2
  00058	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  0005d	2b c1		 sub	 eax, ecx
  0005f	3b d8		 cmp	 ebx, eax
  00061	77 03		 ja	 SHORT $LN4@Copy@2

; 2089 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00063	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
$LN4@Copy@2:

; 2090 : 		_Elem *_Ptr = 0;
; 2091 : 
; 2092 : 		_TRY_BEGIN
; 2093 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00066	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00069	6a 00		 push	 0
  0006b	51		 push	 ecx
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00073	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00078	83 c4 08	 add	 esp, 8
  0007b	8b d8		 mov	 ebx, eax
  0007d	eb 2b		 jmp	 SHORT $LN16@Copy@2
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$0:

; 2094 : 		_CATCH_ALL
; 2095 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007f	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00082	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00085	89 45 08	 mov	 DWORD PTR __Newres$[ebp], eax

; 2096 : 			_TRY_BEGIN
; 2097 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00088	40		 inc	 eax
  00089	6a 00		 push	 0
  0008b	50		 push	 eax
  0008c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00090	e8 00 00 00 00	 call	 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>
  00095	89 45 e8	 mov	 DWORD PTR __Ptr$[ebp], eax
  00098	83 c4 08	 add	 esp, 8

; 2101 : 			_CATCH_END
; 2102 : 		_CATCH_END

  0009b	b8 00 00 00 00	 mov	 eax, $LN112@Copy@2
  000a0	c3		 ret	 0
$LN112@Copy@2:
  000a1	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000a4	8b 75 08	 mov	 esi, DWORD PTR __Newres$[ebp]
  000a7	8b 5d e8	 mov	 ebx, DWORD PTR __Ptr$[ebp]
$LN16@Copy@2:

; 2103 : 
; 2104 : 		if (0 < _Oldlen)

  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000ad	85 c9		 test	 ecx, ecx
  000af	76 24		 jbe	 SHORT $LN75@Copy@2

; 2105 : 			_Traits_helper::copy_s<_Traits>(_Ptr, _Newres + 1, _Myptr(), _Oldlen);	// copy existing elements

  000b1	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  000b5	72 05		 jb	 SHORT $LN65@Copy@2
  000b7	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000ba	eb 03		 jmp	 SHORT $LN66@Copy@2
$LN65@Copy@2:
  000bc	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
$LN66@Copy@2:
  000bf	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  000c2	52		 push	 edx
  000c3	50		 push	 eax
  000c4	8d 44 36 02	 lea	 eax, DWORD PTR [esi+esi+2]
  000c8	50		 push	 eax
  000c9	53		 push	 ebx
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000d2	83 c4 10	 add	 esp, 16			; 00000010H
$LN75@Copy@2:

; 2106 : 		_Tidy(true);

  000d5	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  000d9	72 0f		 jb	 SHORT $LN93@Copy@2
  000db	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000de	51		 push	 ecx
  000df	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000e7	83 c4 04	 add	 esp, 4
$LN93@Copy@2:
  000ea	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000ed	33 d2		 xor	 edx, edx

; 2107 : 		_Bx._Ptr = _Ptr;

  000ef	89 18		 mov	 DWORD PTR [eax], ebx

; 2108 : 		_Myres = _Newres;

  000f1	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 2109 : 		_Eos(_Oldlen);

  000f4	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  000f7	83 fe 08	 cmp	 esi, 8
  000fa	72 02		 jb	 SHORT $LN107@Copy@2
  000fc	8b c3		 mov	 eax, ebx
$LN107@Copy@2:
  000fe	33 d2		 xor	 edx, edx
  00100	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 2110 : 		}

  00104	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00107	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010e	59		 pop	 ecx
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z$1:

; 2098 : 			_CATCH_ALL
; 2099 : 			_Tidy(true);	// failed again, discard storage and reraise

  00118	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0011b	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  0011f	72 0c		 jb	 SHORT $LN53@Copy@2
  00121	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0012a	83 c4 04	 add	 esp, 4
$LN53@Copy@2:
  0012d	33 c9		 xor	 ecx, ecx

; 2100 : 			_RERAISE;

  0012f	51		 push	 ecx
  00130	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00137	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0013e	51		 push	 ecx
  0013f	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00143	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN115@Copy@2:
  00148	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
PUBLIC	??0?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

  00000	53		 push	 ebx

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 14	 mov	 edi, DWORD PTR __Pvector$[esp+8]
  0000b	8b f1		 mov	 esi, ecx
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	85 ff		 test	 edi, edi
  00015	74 0a		 je	 SHORT $LN4@Vector_con
  00017	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  0001a	77 05		 ja	 SHORT $LN4@Vector_con
  0001c	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0001f	76 05		 jbe	 SHORT $LN3@Vector_con
$LN4@Vector_con:
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN3@Vector_con:

; 79   : 		this->_Set_container(_Pvector);

  00026	8b 07		 mov	 eax, DWORD PTR [edi]
  00028	89 06		 mov	 DWORD PTR [esi], eax
  0002a	5f		 pop	 edi

; 80   : 		_Myptr = _Ptr;

  0002b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 81   : 		}

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putc
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
$T146278 = -16						; size = 1
__Wc$146275 = -12					; size = 2
tv163 = -8						; size = 4
__Mbst1$146276 = -4					; size = 4
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putc, COMDAT

; 1517 : 		{	// put char sequence [_Ptr, _Ptr + _Count) to _Dest

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	55		 push	 ebp

; 1518 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  00004	33 ed		 xor	 ebp, ebp
  00006	39 6c 24 2c	 cmp	 DWORD PTR __Count$[esp+16], ebp
  0000a	0f 86 b8 00 00
	00		 jbe	 $LN37@Putc
  00010	8b 44 24 18	 mov	 eax, DWORD PTR _this$[esp+16]
  00014	53		 push	 ebx
  00015	56		 push	 esi

; 1519 : 			*_Dest = _MAKLOCCHR(_Elem, *_Ptr, _Cvt);

  00016	83 c0 08	 add	 eax, 8
  00019	57		 push	 edi
  0001a	8b 7c 24 34	 mov	 edi, DWORD PTR __Ptr$[esp+28]
  0001e	89 44 24 18	 mov	 DWORD PTR tv163[esp+32], eax
$LL38@Putc:
  00022	8b 54 24 18	 mov	 edx, DWORD PTR tv163[esp+32]
  00026	8a 0f		 mov	 cl, BYTE PTR [edi]
  00028	52		 push	 edx
  00029	8d 44 24 20	 lea	 eax, DWORD PTR __Mbst1$146276[esp+36]
  0002d	50		 push	 eax
  0002e	88 4c 24 18	 mov	 BYTE PTR $T146278[esp+40], cl
  00032	6a 01		 push	 1
  00034	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T146278[esp+44]
  00038	51		 push	 ecx
  00039	8d 54 24 24	 lea	 edx, DWORD PTR __Wc$146275[esp+48]
  0003d	52		 push	 edx
  0003e	89 6c 24 28	 mov	 DWORD PTR __Wc$146275[esp+52], ebp
  00042	89 6c 24 30	 mov	 DWORD PTR __Mbst1$146276[esp+52], ebp
  00046	e8 00 00 00 00	 call	 __Mbrtowc
  0004b	8b 4c 24 44	 mov	 ecx, DWORD PTR __Dest$[esp+52]
  0004f	83 c4 14	 add	 esp, 20			; 00000014H
  00052	3b cd		 cmp	 ecx, ebp
  00054	74 46		 je	 SHORT $LN12@Putc
  00056	8b 59 24	 mov	 ebx, DWORD PTR [ecx+36]
  00059	8b 74 24 14	 mov	 esi, DWORD PTR __Wc$146275[esp+32]
  0005d	8d 41 24	 lea	 eax, DWORD PTR [ecx+36]
  00060	0f b7 d6	 movzx	 edx, si
  00063	39 2b		 cmp	 DWORD PTR [ebx], ebp
  00065	74 1c		 je	 SHORT $LN18@Putc
  00067	8b 59 34	 mov	 ebx, DWORD PTR [ecx+52]
  0006a	39 2b		 cmp	 DWORD PTR [ebx], ebp
  0006c	7e 15		 jle	 SHORT $LN18@Putc
  0006e	8b cb		 mov	 ecx, ebx
  00070	ff 09		 dec	 DWORD PTR [ecx]
  00072	8b 00		 mov	 eax, DWORD PTR [eax]
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	8d 71 02	 lea	 esi, DWORD PTR [ecx+2]
  00079	89 30		 mov	 DWORD PTR [eax], esi
  0007b	66 89 11	 mov	 WORD PTR [ecx], dx
  0007e	0f b7 c2	 movzx	 eax, dx
  00081	eb 0b		 jmp	 SHORT $LN19@Putc
$LN18@Putc:
  00083	8b 01		 mov	 eax, DWORD PTR [ecx]
  00085	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00088	56		 push	 esi
  00089	ff d2		 call	 edx
  0008b	0f b7 c0	 movzx	 eax, ax
$LN19@Putc:
  0008e	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00093	66 3b c8	 cmp	 cx, ax
  00096	8b 4c 24 30	 mov	 ecx, DWORD PTR __Dest$[esp+32]
  0009a	75 05		 jne	 SHORT $LN2@Putc
$LN12@Putc:
  0009c	c6 44 24 2c 01	 mov	 BYTE PTR __Dest$[esp+28], 1
$LN2@Putc:

; 1518 : 		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)

  000a1	8b 44 24 38	 mov	 eax, DWORD PTR __Count$[esp+28]
  000a5	48		 dec	 eax
  000a6	47		 inc	 edi
  000a7	89 44 24 38	 mov	 DWORD PTR __Count$[esp+28], eax
  000ab	3b c5		 cmp	 eax, ebp
  000ad	0f 87 6f ff ff
	ff		 ja	 $LL38@Putc

; 1520 : 		return (_Dest);

  000b3	8b 44 24 28	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+28]
  000b7	8b 54 24 2c	 mov	 edx, DWORD PTR __Dest$[esp+28]
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
  000be	89 10		 mov	 DWORD PTR [eax], edx
  000c0	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000c3	5d		 pop	 ebp

; 1521 : 		}

  000c4	83 c4 10	 add	 esp, 16			; 00000010H
  000c7	c3		 ret	 0
$LN37@Putc:

; 1520 : 		return (_Dest);

  000c8	8b 44 24 1c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+16]
  000cc	8b 4c 24 24	 mov	 ecx, DWORD PTR __Dest$[esp+20]
  000d0	8b 54 24 20	 mov	 edx, DWORD PTR __Dest$[esp+16]
  000d4	89 10		 mov	 DWORD PTR [eax], edx
  000d6	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000d9	5d		 pop	 ebp

; 1521 : 		}

  000da	83 c4 10	 add	 esp, 16			; 00000010H
  000dd	c3		 ret	 0
?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putc
_TEXT	ENDS
PUBLIC	?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putgrouped
EXTRN	_memchr:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z
_TEXT	SEGMENT
$T146365 = -16						; size = 8
$T146366 = -8						; size = 8
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
__Kseparator$ = 32					; size = 2
?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putgrouped, COMDAT

; 1525 : 		{	// put char sequence [_Ptr, _Ptr + _Count) to _Dest with commas

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	53		 push	 ebx
  0000a	8b 5d 1c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7d 18	 mov	 edi, DWORD PTR __Ptr$[ebp]
$LL5@Putgrouped:

; 1526 : 		for (; ; ++_Ptr, --_Count)
; 1527 : 			{	// put field with thousands separators for NULs
; 1528 : 			const char *_Pend =
; 1529 : 				(const char *)::memchr(_Ptr, '\0', _Count);

  00012	53		 push	 ebx
  00013	6a 00		 push	 0
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 _memchr
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1530 : 			size_t _Groupsize = _Pend != 0 ? _Pend - _Ptr : _Count;

  0001e	85 c0		 test	 eax, eax
  00020	74 06		 je	 SHORT $LN8@Putgrouped
  00022	2b c7		 sub	 eax, edi
  00024	8b f0		 mov	 esi, eax
  00026	eb 02		 jmp	 SHORT $LN9@Putgrouped
$LN8@Putgrouped:
  00028	8b f3		 mov	 esi, ebx
$LN9@Putgrouped:

; 1531 : 
; 1532 : 			_Dest = _Putc(_Dest, _Ptr, _Groupsize);

  0002a	8b 45 14	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  0002d	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00036	51		 push	 ecx
  00037	8d 54 24 20	 lea	 edx, DWORD PTR $T146365[esp+48]
  0003b	52		 push	 edx
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putc
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00047	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0004a	83 c4 18	 add	 esp, 24			; 00000018H

; 1533 : 			_Ptr += _Groupsize, _Count -= _Groupsize;

  0004d	03 fe		 add	 edi, esi
  0004f	2b de		 sub	 ebx, esi
  00051	89 55 14	 mov	 DWORD PTR __Dest$[ebp+4], edx

; 1534 : 			if (_Count == 0)

  00054	74 32		 je	 SHORT $LN12@Putgrouped

; 1535 : 				break;
; 1536 : 			if (_Kseparator != (_Elem)0)

  00056	8b 4d 20	 mov	 ecx, DWORD PTR __Kseparator$[ebp]
  00059	66 85 c9	 test	 cx, cx
  0005c	74 26		 je	 SHORT $LN4@Putgrouped

; 1537 : 				_Dest = _Rep(_Dest, _Kseparator, 1);

  0005e	8b 10		 mov	 edx, DWORD PTR [eax]
  00060	6a 01		 push	 1
  00062	51		 push	 ecx
  00063	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00066	51		 push	 ecx
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	52		 push	 edx
  0006b	8d 44 24 28	 lea	 eax, DWORD PTR $T146366[esp+48]
  0006f	50		 push	 eax
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  00076	8b 10		 mov	 edx, DWORD PTR [eax]
  00078	89 55 10	 mov	 DWORD PTR __Dest$[ebp], edx
  0007b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0007e	83 c4 18	 add	 esp, 24			; 00000018H
  00081	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
$LN4@Putgrouped:
  00084	47		 inc	 edi
  00085	4b		 dec	 ebx
  00086	eb 8a		 jmp	 SHORT $LL5@Putgrouped
$LN12@Putgrouped:

; 1538 : 			}
; 1539 : 		return (_Dest);

  00088	8b 10		 mov	 edx, DWORD PTR [eax]
  0008a	8b 4d 0c	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0008d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1540 : 		}

  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00095	89 11		 mov	 DWORD PTR [ecx], edx
  00097	8b c1		 mov	 eax, ecx
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putgrouped
_TEXT	ENDS
PUBLIC	?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 646  : 		return (const_iterator(_Myfirst, this));

  00004	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  00015	76 05		 jbe	 SHORT $LN5@begin
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@begin:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 647  : 		}

  00028	c2 04 00	 ret	 4
?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 656  : 		return (const_iterator(_Mylast, this));

  00004	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	39 5e 0c	 cmp	 DWORD PTR [esi+12], ebx
  00015	76 05		 jbe	 SHORT $LN5@end
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@end:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 657  : 		}

  00028	c2 04 00	 ret	 4
?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::end
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ; stdext::unchecked_copy<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z
_TEXT	SEGMENT
$T146446 = -4						; size = 1
__First$ = 8						; size = 4
__Cat$146452 = 12					; size = 1
$T146448 = 12						; size = 1
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z PROC ; stdext::unchecked_copy<HostDevice *,HostDevice *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

  00000	51		 push	 ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Cat$146452[esp]
  00005	8b 54 24 0c	 mov	 edx, DWORD PTR $T146448[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T146446[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T146446[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *>

; 3607 : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$unchecked_copy@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ENDP ; stdext::unchecked_copy<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	??_7?$numpunct@_W@std@@6B@			; std::numpunct<wchar_t>::`vftable'
PUBLIC	??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z	; std::numpunct<wchar_t>::numpunct<wchar_t>
PUBLIC	??_R4?$numpunct@_W@std@@6B@			; std::numpunct<wchar_t>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$numpunct@_W@std@@@8			; std::numpunct<wchar_t> `RTTI Type Descriptor'
PUBLIC	??_R3?$numpunct@_W@std@@8			; std::numpunct<wchar_t>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$numpunct@_W@std@@8			; std::numpunct<wchar_t>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$numpunct@_W@std@@8		; std::numpunct<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?do_decimal_point@?$numpunct@_W@std@@MBE_WXZ	; std::numpunct<wchar_t>::do_decimal_point
PUBLIC	?do_thousands_sep@?$numpunct@_W@std@@MBE_WXZ	; std::numpunct<wchar_t>::do_thousands_sep
PUBLIC	?do_grouping@?$numpunct@_W@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<wchar_t>::do_grouping
PUBLIC	?do_falsename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::numpunct<wchar_t>::do_falsename
PUBLIC	?do_truename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::numpunct<wchar_t>::do_truename
EXTRN	??_E?$numpunct@_W@std@@MAEPAXI@Z:PROC		; std::numpunct<wchar_t>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$numpunct@_W@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
rdata$r	SEGMENT
??_R1A@?0A@EA@?$numpunct@_W@std@@8 DD FLAT:??_R0?AV?$numpunct@_W@std@@@8 ; std::numpunct<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$numpunct@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT
??_R2?$numpunct@_W@std@@8 DD FLAT:??_R1A@?0A@EA@?$numpunct@_W@std@@8 ; std::numpunct<wchar_t>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT
??_R3?$numpunct@_W@std@@8 DD 00H			; std::numpunct<wchar_t>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$numpunct@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
_DATA	SEGMENT
??_R0?AV?$numpunct@_W@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::numpunct<wchar_t> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$numpunct@_W@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT
??_R4?$numpunct@_W@std@@6B@ DD 00H			; std::numpunct<wchar_t>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$numpunct@_W@std@@@8
	DD	FLAT:??_R3?$numpunct@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$numpunct@_W@std@@6B@
CONST	SEGMENT
??_7?$numpunct@_W@std@@6B@ DD FLAT:??_R4?$numpunct@_W@std@@6B@ ; std::numpunct<wchar_t>::`vftable'
	DD	FLAT:??_E?$numpunct@_W@std@@MAEPAXI@Z
	DD	FLAT:?do_decimal_point@?$numpunct@_W@std@@MBE_WXZ
	DD	FLAT:?do_thousands_sep@?$numpunct@_W@std@@MBE_WXZ
	DD	FLAT:?do_grouping@?$numpunct@_W@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_falsename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
	DD	FLAT:?do_truename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z$0
__ehfuncinfo$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
__Isdef$ = 16						; size = 1
??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z PROC	; std::numpunct<wchar_t>::numpunct<wchar_t>, COMDAT
; _this$ = ecx

; 106  : 		{	// construct from specified locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	8b 44 24 20	 mov	 eax, DWORD PTR __Refs$[esp+20]
  0002c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 107  : 		_Init(_Lobj, _Isdef);

  0002f	8b 4c 24 24	 mov	 ecx, DWORD PTR __Isdef$[esp+20]
  00033	8b 54 24 1c	 mov	 edx, DWORD PTR __Lobj$[esp+20]
  00037	51		 push	 ecx
  00038	52		 push	 edx
  00039	8b ce		 mov	 ecx, esi
  0003b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+40], 0
  00043	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@_W@std@@6B@
  00049	e8 00 00 00 00	 call	 ?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<wchar_t>::_Init

; 108  : 		}

  0004e	8b c6		 mov	 eax, esi
  00050	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	5e		 pop	 esi
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@UAE@XZ ; std::locale::facet::~facet
__ehhandler$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z ENDP	; std::numpunct<wchar_t>::numpunct<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ?do_decimal_point@?$numpunct@_W@std@@MBE_WXZ
_TEXT	SEGMENT
?do_decimal_point@?$numpunct@_W@std@@MBE_WXZ PROC	; std::numpunct<wchar_t>::do_decimal_point, COMDAT
; _this$ = ecx

; 165  : 		return (_Dp);

  00000	66 8b 41 0c	 mov	 ax, WORD PTR [ecx+12]

; 166  : 		}

  00004	c3		 ret	 0
?do_decimal_point@?$numpunct@_W@std@@MBE_WXZ ENDP	; std::numpunct<wchar_t>::do_decimal_point
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_thousands_sep@?$numpunct@_W@std@@MBE_WXZ
_TEXT	SEGMENT
?do_thousands_sep@?$numpunct@_W@std@@MBE_WXZ PROC	; std::numpunct<wchar_t>::do_thousands_sep, COMDAT
; _this$ = ecx

; 170  : 		return (_Kseparator);

  00000	66 8b 41 0e	 mov	 ax, WORD PTR [ecx+14]

; 171  : 		}

  00004	c3		 ret	 0
?do_thousands_sep@?$numpunct@_W@std@@MBE_WXZ ENDP	; std::numpunct<wchar_t>::do_thousands_sep
_TEXT	ENDS
PUBLIC	??1?$numpunct@_W@std@@MAE@XZ			; std::numpunct<wchar_t>::~numpunct<wchar_t>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$numpunct@_W@std@@MAE@XZ
_TEXT	SEGMENT
??1?$numpunct@_W@std@@MAE@XZ PROC			; std::numpunct<wchar_t>::~numpunct<wchar_t>, COMDAT
; _this$ = ecx

; 121  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 122  : 		_Tidy();

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	50		 push	 eax
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@_W@std@@6B@
  0000d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00012	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 123  : 		}

  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  0002d	5e		 pop	 esi
  0002e	c3		 ret	 0
??1?$numpunct@_W@std@@MAE@XZ ENDP			; std::numpunct<wchar_t>::~numpunct<wchar_t>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$numpunct@_W@std@@MAEPAXI@Z PROC			; std::numpunct<wchar_t>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	50		 push	 eax
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@_W@std@@6B@
  0000d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00012	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7facet@locale@std@@6B@
  00032	74 09		 je	 SHORT $LN10@scalar@16
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4
$LN10@scalar@16:
  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	c2 04 00	 ret	 4
??_G?$numpunct@_W@std@@MAEPAXI@Z ENDP			; std::numpunct<wchar_t>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >, COMDAT

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1166 : 	}

  00007	c3		 ret	 0
??$_Checked_base@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAPBUHostDevice@@AAV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	??_C@_0BP@CJOANMAM@NONSYS_INPLACE_ENC_IN_PROGRESS?$AA@ ; `string'
EXTRN	__beginthread:PROC
EXTRN	_CreateNonSysInplaceEncMutex:PROC
;	COMDAT ??_C@_0BP@CJOANMAM@NONSYS_INPLACE_ENC_IN_PROGRESS?$AA@
; File c:\users\public\desktop\projects\ciphershed\src\format\tcformat.c
CONST	SEGMENT
??_C@_0BP@CJOANMAM@NONSYS_INPLACE_ENC_IN_PROGRESS?$AA@ DB 'NONSYS_INPLACE'
	DB	'_ENC_IN_PROGRESS', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _NonSysInplaceEncResume
_TEXT	SEGMENT
_NonSysInplaceEncResume PROC				; COMDAT

; 1780 : 	if (bVolTransformThreadRunning || bVolTransformThreadToRun || bVolTransformThreadCancel)

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  00005	85 c0		 test	 eax, eax
  00007	0f 85 84 00 00
	00		 jne	 $LN2@NonSysInpl@2
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  00013	85 c9		 test	 ecx, ecx
  00015	75 7a		 jne	 SHORT $LN2@NonSysInpl@2
  00017	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bVolTransformThreadCancel
  0001d	85 d2		 test	 edx, edx
  0001f	75 70		 jne	 SHORT $LN2@NonSysInpl@2

; 1781 : 		return;
; 1782 : 
; 1783 : 	if (!bInPlaceEncNonSysResumed
; 1784 : 		&& !FinalPreTransformPrompts ())

  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSysResumed
  00026	85 c0		 test	 eax, eax
  00028	75 09		 jne	 SHORT $LN1@NonSysInpl@2
  0002a	e8 00 00 00 00	 call	 _FinalPreTransformPrompts
  0002f	85 c0		 test	 eax, eax
  00031	74 5e		 je	 SHORT $LN2@NonSysInpl@2
$LN1@NonSysInpl@2:

; 1785 : 	{
; 1786 : 		return;
; 1787 : 	}
; 1788 : 
; 1789 : 	CreateNonSysInplaceEncMutex ();

  00033	e8 00 00 00 00	 call	 _CreateNonSysInplaceEncMutex

; 1790 : 
; 1791 : 	bFirstNonSysInPlaceEncResumeDone = TRUE;
; 1792 : 
; 1793 : 	SetTimer (MainDlg, TIMER_ID_NONSYS_INPLACE_ENC_PROGRESS, TIMER_INTERVAL_NONSYS_INPLACE_ENC_PROGRESS, NULL);

  00038	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0003e	6a 00		 push	 0
  00040	6a 1e		 push	 30			; 0000001eH
  00042	68 01 01 00 00	 push	 257			; 00000101H
  00047	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bFirstNonSysInPlaceEncResumeDone, 1
  00051	51		 push	 ecx
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16

; 1794 : 
; 1795 : 	bVolTransformThreadCancel = FALSE;

  00058	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bVolTransformThreadCancel, 0

; 1796 : 	bVolTransformThreadToRun = TRUE;

  00062	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bVolTransformThreadToRun@@3HC, 1 ; bVolTransformThreadToRun

; 1797 : 
; 1798 : 	UpdateNonSysInPlaceEncControls ();

  0006c	e8 00 00 00 00	 call	 _UpdateNonSysInPlaceEncControls

; 1799 : 
; 1800 : 	LastDialogId = "NONSYS_INPLACE_ENC_IN_PROGRESS";
; 1801 : 
; 1802 : 	_beginthread (volTransformThreadFunction, 0, MainDlg);

  00071	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00077	52		 push	 edx
  00078	6a 00		 push	 0
  0007a	68 00 00 00 00	 push	 OFFSET _volTransformThreadFunction
  0007f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LastDialogId, OFFSET ??_C@_0BP@CJOANMAM@NONSYS_INPLACE_ENC_IN_PROGRESS?$AA@
  00089	e8 00 00 00 00	 call	 __beginthread
  0008e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@NonSysInpl@2:

; 1803 : 
; 1804 : 	return;
; 1805 : }

  00091	c3		 ret	 0
_NonSysInplaceEncResume ENDP
_TEXT	ENDS
PUBLIC	??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 54	 lea	 esi, DWORD PTR [ecx+84]
  00004	8b ce		 mov	 ecx, esi
  00006	e8 00 00 00 00	 call	 ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0000b	56		 push	 esi
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00012	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00017	83 c4 04	 add	 esp, 4
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 565  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 566  : 		_Tidy();

  00002	33 c9		 xor	 ecx, ecx
  00004	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH
  0000b	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  0000e	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 567  : 		}

  00011	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 906  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $LN17@basic_stri
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN17@basic_stri:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 907  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 565  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 566  : 		_Tidy();

  00002	33 c9		 xor	 ecx, ecx
  00004	c7 40 18 07 00
	00 00		 mov	 DWORD PTR [eax+24], 7
  0000b	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
  00012	66 89 48 04	 mov	 WORD PTR [eax+4], cx

; 567  : 		}

  00016	c3		 ret	 0
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 906  : 		_Tidy(true);

  00003	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00007	72 0c		 jb	 SHORT $LN19@basic_stri@2
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN19@basic_stri@2:
  00015	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  0001c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00023	33 c9		 xor	 ecx, ecx
  00025	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00029	5e		 pop	 esi

; 907  : 		}

  0002a	c3		 ret	 0
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy
PUBLIC	??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0

; 559  : 		_Tidy();

  00030	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy

; 560  : 		}

  00035	8b 06		 mov	 eax, DWORD PTR [esi]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003d	83 c4 04	 add	 esp, 4
  00040	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00044	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004b	59		 pop	 ecx
  0004c	5e		 pop	 esi
  0004d	83 c4 10	 add	 esp, 16			; 00000010H
  00050	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
;	COMDAT ??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8d 79 ac	 lea	 edi, DWORD PTR [ecx-84]
  00005	8d 77 54	 lea	 esi, DWORD PTR [edi+84]
  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0000f	56		 push	 esi
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00016	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0001b	83 c4 04	 add	 esp, 4
  0001e	f6 44 24 0c 01	 test	 BYTE PTR ___flags$[esp+4], 1
  00023	74 09		 je	 SHORT $LN11@scalar@17
  00025	57		 push	 edi
  00026	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002b	83 c4 04	 add	 esp, 4
$LN11@scalar@17:
  0002e	8b c7		 mov	 eax, edi
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	c2 04 00	 ret	 4
??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$_List_ptr@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_ptr@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_ptr@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_ptr@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_ptr<CipherShed::Partition,std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::_Vector_val<HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z PROC ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::_Vector_val<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 0a		 je	 SHORT $LN8@Vector_val
  00011	89 30		 mov	 DWORD PTR [eax], esi
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 426  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4

; 425  : 		{	// construct allocator from _Al

$LN8@Vector_val:
  0001b	33 c0		 xor	 eax, eax
  0001d	89 06		 mov	 DWORD PTR [esi], eax

; 426  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE@V?$allocator@UHostDevice@@@1@@Z ENDP ; std::_Vector_val<HostDevice,std::allocator<HostDevice> >::_Vector_val<HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0
__ehfuncinfo$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 29   : 	explicit __CLR_OR_THIS_CALL basic_stringbuf(ios_base::openmode _Mode =

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	e8 00 00 00 00	 call	 ??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >

; 30   : 		ios_base::in | ios_base::out)
; 31   : 		{	// construct empty character buffer from mode
; 32   : 		_Init(0, 0, _Getstate(_Mode));

  00029	8a 4c 24 1c	 mov	 cl, BYTE PTR __Mode$[esp+20]
  0002d	33 c0		 xor	 eax, eax
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  00035	f6 c1 01	 test	 cl, 1
  00038	75 05		 jne	 SHORT $LN9@basic_stri@3
  0003a	b8 04 00 00 00	 mov	 eax, 4
$LN9@basic_stri@3:
  0003f	f6 c1 02	 test	 cl, 2
  00042	75 03		 jne	 SHORT $LN8@basic_stri@3
  00044	83 c8 02	 or	 eax, 2
$LN8@basic_stri@3:
  00047	f6 c1 08	 test	 cl, 8
  0004a	74 03		 je	 SHORT $LN7@basic_stri@3
  0004c	83 c8 08	 or	 eax, 8
$LN7@basic_stri@3:
  0004f	f6 c1 04	 test	 cl, 4
  00052	74 03		 je	 SHORT $LN6@basic_stri@3
  00054	83 c8 10	 or	 eax, 16			; 00000010H
$LN6@basic_stri@3:
  00057	89 46 40	 mov	 DWORD PTR [esi+64], eax
  0005a	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0

; 33   : 		}

  00061	8b c6		 mov	 eax, esi
  00063	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5e		 pop	 esi
  00070	83 c4 10	 add	 esp, 16			; 00000010H
  00073	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@SAXXZ:PROC		; std::_String_base::_Xlen
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2119 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	53		 push	 ebx

; 2120 : 			if (max_size() < _Newsize)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Newsize$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  0000b	76 05		 jbe	 SHORT $LN6@Grow

; 2121 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN6@Grow:

; 2122 : 		if (_Myres < _Newsize)

  00012	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00015	3b c3		 cmp	 eax, ebx
  00017	73 19		 jae	 SHORT $LN5@Grow

; 2123 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001c	50		 push	 eax
  0001d	53		 push	 ebx
  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c9		 xor	 ecx, ecx
  00027	3b cb		 cmp	 ecx, ebx
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5b		 pop	 ebx

; 2130 : 		}

  0002f	c2 08 00	 ret	 8
$LN5@Grow:

; 2124 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	80 7c 24 10 00	 cmp	 BYTE PTR __Trim$[esp+4], 0
  00037	74 52		 je	 SHORT $LN3@Grow
  00039	83 fb 10	 cmp	 ebx, 16			; 00000010H
  0003c	73 4d		 jae	 SHORT $LN3@Grow
  0003e	57		 push	 edi

; 2125 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2126 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  0003f	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00042	3b df		 cmp	 ebx, edi
  00044	73 02		 jae	 SHORT $LN9@Grow
  00046	8b fb		 mov	 edi, ebx
$LN9@Grow:
  00048	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004b	72 21		 jb	 SHORT $LN33@Grow
  0004d	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00050	55		 push	 ebp
  00051	8b 28		 mov	 ebp, DWORD PTR [eax]
  00053	85 ff		 test	 edi, edi
  00055	76 0d		 jbe	 SHORT $LN31@Grow
  00057	57		 push	 edi
  00058	55		 push	 ebp
  00059	6a 10		 push	 16			; 00000010H
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _memcpy_s
  00061	83 c4 10	 add	 esp, 16			; 00000010H
$LN31@Grow:
  00064	55		 push	 ebp
  00065	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006a	83 c4 04	 add	 esp, 4
  0006d	5d		 pop	 ebp
$LN33@Grow:
  0006e	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00071	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00078	33 c9		 xor	 ecx, ecx
  0007a	c6 44 3e 04 00	 mov	 BYTE PTR [esi+edi+4], 0
  0007f	3b cb		 cmp	 ecx, ebx
  00081	5f		 pop	 edi
  00082	1b c0		 sbb	 eax, eax
  00084	5e		 pop	 esi
  00085	f7 d8		 neg	 eax
  00087	5b		 pop	 ebx

; 2130 : 		}

  00088	c2 08 00	 ret	 8
$LN3@Grow:

; 2127 : 		else if (_Newsize == 0)

  0008b	85 db		 test	 ebx, ebx
  0008d	75 20		 jne	 SHORT $LN49@Grow

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

  0008f	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00092	83 f8 10	 cmp	 eax, 16			; 00000010H
  00095	72 12		 jb	 SHORT $LN47@Grow
  00097	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  0009a	33 c9		 xor	 ecx, ecx
  0009c	3b cb		 cmp	 ecx, ebx
  0009e	88 1e		 mov	 BYTE PTR [esi], bl
  000a0	1b c0		 sbb	 eax, eax
  000a2	5e		 pop	 esi
  000a3	f7 d8		 neg	 eax
  000a5	5b		 pop	 ebx

; 2130 : 		}

  000a6	c2 08 00	 ret	 8

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

$LN47@Grow:
  000a9	83 c6 04	 add	 esi, 4
  000ac	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN49@Grow:

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000af	33 c9		 xor	 ecx, ecx
  000b1	3b cb		 cmp	 ecx, ebx
  000b3	1b c0		 sbb	 eax, eax
  000b5	5e		 pop	 esi
  000b6	f7 d8		 neg	 eax
  000b8	5b		 pop	 ebx

; 2130 : 		}

  000b9	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
; Function compile flags: /Ogtpy
;	COMDAT ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow, COMDAT
; _this$ = ecx

; 2119 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp

; 2120 : 			if (max_size() < _Newsize)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Newsize$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	81 fd fe ff ff
	7f		 cmp	 ebp, 2147483646		; 7ffffffeH
  0000e	76 05		 jbe	 SHORT $LN6@Grow@2

; 2121 : 			_String_base::_Xlen();	// result too long

  00010	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN6@Grow@2:

; 2122 : 		if (_Myres < _Newsize)

  00015	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00018	3b c5		 cmp	 eax, ebp
  0001a	73 19		 jae	 SHORT $LN5@Grow@2

; 2123 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  0001c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001f	50		 push	 eax
  00020	55		 push	 ebp
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00028	33 c9		 xor	 ecx, ecx
  0002a	3b cd		 cmp	 ecx, ebp
  0002c	1b c0		 sbb	 eax, eax
  0002e	5e		 pop	 esi
  0002f	f7 d8		 neg	 eax
  00031	5d		 pop	 ebp

; 2130 : 		}

  00032	c2 08 00	 ret	 8
$LN5@Grow@2:

; 2124 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00035	80 7c 24 10 00	 cmp	 BYTE PTR __Trim$[esp+4], 0
  0003a	74 57		 je	 SHORT $LN3@Grow@2
  0003c	83 fd 08	 cmp	 ebp, 8
  0003f	73 52		 jae	 SHORT $LN3@Grow@2
  00041	57		 push	 edi

; 2125 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2126 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00042	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00045	3b ef		 cmp	 ebp, edi
  00047	73 02		 jae	 SHORT $LN9@Grow@2
  00049	8b fd		 mov	 edi, ebp
$LN9@Grow@2:
  0004b	83 f8 08	 cmp	 eax, 8
  0004e	72 24		 jb	 SHORT $LN35@Grow@2
  00050	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00053	53		 push	 ebx
  00054	8b 18		 mov	 ebx, DWORD PTR [eax]
  00056	85 ff		 test	 edi, edi
  00058	76 10		 jbe	 SHORT $LN33@Grow@2
  0005a	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  0005d	51		 push	 ecx
  0005e	53		 push	 ebx
  0005f	6a 10		 push	 16			; 00000010H
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _memcpy_s
  00067	83 c4 10	 add	 esp, 16			; 00000010H
$LN33@Grow@2:
  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00070	83 c4 04	 add	 esp, 4
  00073	5b		 pop	 ebx
$LN35@Grow@2:
  00074	33 d2		 xor	 edx, edx
  00076	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00079	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  00080	33 c9		 xor	 ecx, ecx
  00082	66 89 54 7e 04	 mov	 WORD PTR [esi+edi*2+4], dx
  00087	3b cd		 cmp	 ecx, ebp
  00089	5f		 pop	 edi
  0008a	1b c0		 sbb	 eax, eax
  0008c	5e		 pop	 esi
  0008d	f7 d8		 neg	 eax
  0008f	5d		 pop	 ebp

; 2130 : 		}

  00090	c2 08 00	 ret	 8
$LN3@Grow@2:

; 2127 : 		else if (_Newsize == 0)

  00093	85 ed		 test	 ebp, ebp
  00095	75 25		 jne	 SHORT $LN51@Grow@2

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

  00097	89 6e 14	 mov	 DWORD PTR [esi+20], ebp
  0009a	83 f8 08	 cmp	 eax, 8
  0009d	72 15		 jb	 SHORT $LN49@Grow@2
  0009f	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000a2	33 c0		 xor	 eax, eax

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000a4	33 c9		 xor	 ecx, ecx
  000a6	3b cd		 cmp	 ecx, ebp
  000a8	66 89 06	 mov	 WORD PTR [esi], ax
  000ab	1b c0		 sbb	 eax, eax
  000ad	5e		 pop	 esi
  000ae	f7 d8		 neg	 eax
  000b0	5d		 pop	 ebp

; 2130 : 		}

  000b1	c2 08 00	 ret	 8

; 2128 : 			_Eos(0);	// new size is zero, just null terminate

$LN49@Grow@2:
  000b4	83 c6 04	 add	 esi, 4
  000b7	33 c0		 xor	 eax, eax
  000b9	66 89 06	 mov	 WORD PTR [esi], ax
$LN51@Grow@2:

; 2129 : 		return (0 < _Newsize);	// return true only if more work to do

  000bc	33 c9		 xor	 ecx, ecx
  000be	3b cd		 cmp	 ecx, ebp
  000c0	1b c0		 sbb	 eax, eax
  000c2	5e		 pop	 esi
  000c3	f7 d8		 neg	 eax
  000c5	5d		 pop	 ebp

; 2130 : 		}

  000c6	c2 08 00	 ret	 8
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_iterator<HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_iterator<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

  00000	53		 push	 ebx
  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7c 24 14	 mov	 edi, DWORD PTR __Pvector$[esp+8]
  0000b	8b f1		 mov	 esi, ecx
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	85 ff		 test	 edi, edi
  00015	74 0a		 je	 SHORT $LN6@Vector_ite
  00017	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  0001a	77 05		 ja	 SHORT $LN6@Vector_ite
  0001c	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0001f	76 05		 jbe	 SHORT $LN5@Vector_ite
$LN6@Vector_ite:
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN5@Vector_ite:
  00026	8b 07		 mov	 eax, DWORD PTR [edi]
  00028	89 06		 mov	 DWORD PTR [esi], eax
  0002a	5f		 pop	 edi
  0002b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 328  : 		}

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	c2 08 00	 ret	 8
??0?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@PAUHostDevice@@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<HostDevice,std::allocator<HostDevice> >::_Vector_iterator<HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	?falsename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::numpunct<wchar_t>::falsename
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?falsename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T147973 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?falsename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::numpunct<wchar_t>::falsename, COMDAT
; _this$ = ecx

; 84   : 		{	// return name for false

  00000	51		 push	 ecx

; 85   : 		return (do_falsename());

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00006	56		 push	 esi
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000b	56		 push	 esi
  0000c	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T147973[esp+12], 0
  00014	ff d2		 call	 edx
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 86   : 		}

  00019	59		 pop	 ecx
  0001a	c2 04 00	 ret	 4
?falsename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::numpunct<wchar_t>::falsename
_TEXT	ENDS
PUBLIC	?truename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::numpunct<wchar_t>::truename
; Function compile flags: /Ogtpy
;	COMDAT ?truename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T147978 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?truename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::numpunct<wchar_t>::truename, COMDAT
; _this$ = ecx

; 89   : 		{	// return name for true

  00000	51		 push	 ecx

; 90   : 		return (do_truename());

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00006	56		 push	 esi
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000b	56		 push	 esi
  0000c	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T147978[esp+12], 0
  00014	ff d2		 call	 edx
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 91   : 		}

  00019	59		 pop	 ecx
  0001a	c2 04 00	 ret	 4
?truename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::numpunct<wchar_t>::truename
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 998  : 		{	// append _Count * _Ch

  00000	53		 push	 ebx

; 999  : 			if (npos - _Mysize <= _Count)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Count$[esp]
  00005	56		 push	 esi
  00006	83 c8 ff	 or	 eax, -1
  00009	8b f1		 mov	 esi, ecx
  0000b	2b 46 14	 sub	 eax, DWORD PTR [esi+20]
  0000e	3b c3		 cmp	 eax, ebx
  00010	77 05		 ja	 SHORT $LN2@append

; 1000 : 			_String_base::_Xlen();	// result too long

  00012	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN2@append:

; 1001 : 
; 1002 : 		size_type _Num;
; 1003 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00017	85 db		 test	 ebx, ebx
  00019	0f 86 80 00 00
	00		 jbe	 $LN63@append
  0001f	57		 push	 edi
  00020	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00023	03 fb		 add	 edi, ebx
  00025	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00028	76 05		 jbe	 SHORT $LN10@append
  0002a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN10@append:
  0002f	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00032	3b c7		 cmp	 eax, edi
  00034	73 39		 jae	 SHORT $LN9@append
  00036	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00039	51		 push	 ecx
  0003a	57		 push	 edi
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00042	85 ff		 test	 edi, edi
$LN66@append:
  00044	76 58		 jbe	 SHORT $LN64@append

; 1004 : 			{	// make room and append new stuff using assign
; 1005 : 			_Chassign(_Mysize, _Count, _Ch);

  00046	8b 54 24 14	 mov	 edx, DWORD PTR __Ch$[esp+8]
  0004a	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0004d	52		 push	 edx
  0004e	53		 push	 ebx
  0004f	50		 push	 eax
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1006 : 			_Eos(_Num);

  00057	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0005b	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0005e	72 37		 jb	 SHORT $LN59@append
  00060	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00063	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  00067	5f		 pop	 edi

; 1007 : 			}
; 1008 : 		return (*this);

  00068	8b c6		 mov	 eax, esi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx

; 1009 : 		}

  0006c	c2 08 00	 ret	 8

; 1001 : 
; 1002 : 		size_type _Num;
; 1003 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN9@append:
  0006f	85 ff		 test	 edi, edi
  00071	75 d1		 jne	 SHORT $LN66@append
  00073	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00076	83 f8 10	 cmp	 eax, 16			; 00000010H
  00079	72 0e		 jb	 SHORT $LN51@append
  0007b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0007e	5f		 pop	 edi
  0007f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1007 : 			}
; 1008 : 		return (*this);

  00082	8b c6		 mov	 eax, esi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx

; 1009 : 		}

  00086	c2 08 00	 ret	 8

; 1001 : 
; 1002 : 		size_type _Num;
; 1003 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN51@append:
  00089	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0008c	5f		 pop	 edi
  0008d	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1007 : 			}
; 1008 : 		return (*this);

  00090	8b c6		 mov	 eax, esi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 1009 : 		}

  00094	c2 08 00	 ret	 8

; 1006 : 			_Eos(_Num);

$LN59@append:
  00097	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0009a	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN64@append:
  0009e	5f		 pop	 edi
$LN63@append:

; 1007 : 			}
; 1008 : 		return (*this);

  0009f	8b c6		 mov	 eax, esi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx

; 1009 : 		}

  000a3	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z
_TEXT	SEGMENT
tv188 = 8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1196 : 		{	// insert _Count * _Ch at _Off

  00000	55		 push	 ebp
  00001	56		 push	 esi
  00002	57		 push	 edi

; 1197 : 		if (_Mysize < _Off)

  00003	8b 7c 24 10	 mov	 edi, DWORD PTR __Off$[esp+8]
  00007	8b f1		 mov	 esi, ecx
  00009	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0000c	73 05		 jae	 SHORT $LN3@insert

; 1198 : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN3@insert:

; 1199 : 		if (npos - _Mysize <= _Count)

  00013	8b 6c 24 14	 mov	 ebp, DWORD PTR __Count$[esp+8]
  00017	83 c8 ff	 or	 eax, -1
  0001a	2b 46 14	 sub	 eax, DWORD PTR [esi+20]
  0001d	3b c5		 cmp	 eax, ebp
  0001f	77 05		 ja	 SHORT $LN2@insert

; 1200 : 			_String_base::_Xlen();	// result too long

  00021	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN2@insert:

; 1201 : 		size_type _Num;
; 1202 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00026	85 ed		 test	 ebp, ebp
  00028	0f 86 c7 00 00
	00		 jbe	 $LN80@insert
  0002e	53		 push	 ebx
  0002f	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00032	03 dd		 add	 ebx, ebp
  00034	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00037	76 05		 jbe	 SHORT $LN11@insert
  00039	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN11@insert:
  0003e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00041	3b c3		 cmp	 eax, ebx
  00043	73 25		 jae	 SHORT $LN10@insert
  00045	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00048	51		 push	 ecx
  00049	53		 push	 ebx
  0004a	8b ce		 mov	 ecx, esi
  0004c	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00051	85 db		 test	 ebx, ebx
$LN83@insert:
  00053	0f 86 9b 00 00
	00		 jbe	 $LN81@insert

; 1203 : 			{	// make room and insert new stuff
; 1204 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off + _Count, _Myres - _Off - _Count,
; 1205 : 				_Myptr() + _Off, _Mysize - _Off);	// empty out hole

  00059	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005c	83 f8 10	 cmp	 eax, 16			; 00000010H
  0005f	72 32		 jb	 SHORT $LN58@insert
  00061	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00064	89 54 24 14	 mov	 DWORD PTR tv188[esp+12], edx
  00068	eb 30		 jmp	 SHORT $LN59@insert

; 1201 : 		size_type _Num;
; 1202 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN10@insert:
  0006a	85 db		 test	 ebx, ebx
  0006c	75 e5		 jne	 SHORT $LN83@insert
  0006e	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00071	83 f8 10	 cmp	 eax, 16			; 00000010H
  00074	72 0e		 jb	 SHORT $LN52@insert
  00076	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00079	88 18		 mov	 BYTE PTR [eax], bl
  0007b	5b		 pop	 ebx
  0007c	5f		 pop	 edi

; 1208 : 			}
; 1209 : 		return (*this);

  0007d	8b c6		 mov	 eax, esi
  0007f	5e		 pop	 esi
  00080	5d		 pop	 ebp

; 1210 : 		}

  00081	c2 0c 00	 ret	 12			; 0000000cH

; 1201 : 		size_type _Num;
; 1202 : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN52@insert:
  00084	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00087	5b		 pop	 ebx
  00088	5f		 pop	 edi
  00089	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1208 : 			}
; 1209 : 		return (*this);

  0008c	8b c6		 mov	 eax, esi
  0008e	5e		 pop	 esi
  0008f	5d		 pop	 ebp

; 1210 : 		}

  00090	c2 0c 00	 ret	 12			; 0000000cH

; 1203 : 			{	// make room and insert new stuff
; 1204 : 			_Traits_helper::move_s<_Traits>(_Myptr() + _Off + _Count, _Myres - _Off - _Count,
; 1205 : 				_Myptr() + _Off, _Mysize - _Off);	// empty out hole

$LN58@insert:
  00093	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00096	89 4c 24 14	 mov	 DWORD PTR tv188[esp+12], ecx
$LN59@insert:
  0009a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009d	72 05		 jb	 SHORT $LN62@insert
  0009f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000a2	eb 03		 jmp	 SHORT $LN63@insert
$LN62@insert:
  000a4	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
$LN63@insert:
  000a7	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000aa	2b d7		 sub	 edx, edi
  000ac	52		 push	 edx
  000ad	8b 54 24 18	 mov	 edx, DWORD PTR tv188[esp+16]
  000b1	03 d7		 add	 edx, edi
  000b3	2b c7		 sub	 eax, edi
  000b5	52		 push	 edx
  000b6	2b c5		 sub	 eax, ebp
  000b8	03 cf		 add	 ecx, edi
  000ba	50		 push	 eax
  000bb	03 cd		 add	 ecx, ebp
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 _memmove_s

; 1206 : 			_Chassign(_Off, _Count, _Ch);	// fill hole

  000c3	8b 44 24 2c	 mov	 eax, DWORD PTR __Ch$[esp+28]
  000c7	83 c4 10	 add	 esp, 16			; 00000010H
  000ca	50		 push	 eax
  000cb	55		 push	 ebp
  000cc	57		 push	 edi
  000cd	8b ce		 mov	 ecx, esi
  000cf	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1207 : 			_Eos(_Num);

  000d4	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000d8	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  000db	72 10		 jb	 SHORT $LN76@insert
  000dd	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000e0	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0
  000e4	5b		 pop	 ebx
  000e5	5f		 pop	 edi

; 1208 : 			}
; 1209 : 		return (*this);

  000e6	8b c6		 mov	 eax, esi
  000e8	5e		 pop	 esi
  000e9	5d		 pop	 ebp

; 1210 : 		}

  000ea	c2 0c 00	 ret	 12			; 0000000cH

; 1207 : 			_Eos(_Num);

$LN76@insert:
  000ed	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000f0	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0
$LN81@insert:
  000f4	5b		 pop	 ebx
$LN80@insert:
  000f5	5f		 pop	 edi

; 1208 : 			}
; 1209 : 		return (*this);

  000f6	8b c6		 mov	 eax, esi
  000f8	5e		 pop	 esi
  000f9	5d		 pop	 ebp

; 1210 : 		}

  000fa	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?grouping@?$numpunct@_W@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<wchar_t>::grouping
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?grouping@?$numpunct@_W@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T148442 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?grouping@?$numpunct@_W@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<wchar_t>::grouping, COMDAT
; _this$ = ecx

; 79   : 		{	// return grouping string

  00000	51		 push	 ecx

; 80   : 		return (do_grouping());

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00006	56		 push	 esi
  00007	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000b	56		 push	 esi
  0000c	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T148442[esp+12], 0
  00014	ff d2		 call	 edx
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi

; 81   : 		}

  00019	59		 pop	 ecx
  0001a	c2 04 00	 ret	 4
?grouping@?$numpunct@_W@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<wchar_t>::grouping
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 951  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 952  : 		if (_Right.size() < _Roff)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7c 24 18	 mov	 edi, DWORD PTR __Roff$[esp+12]
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 7d 14	 cmp	 DWORD PTR [ebp+20], edi
  00011	73 05		 jae	 SHORT $LN5@append@2

; 953  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@append@2:

; 954  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]

; 955  : 		if (_Num < _Count)

  0001b	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Count$[esp+12]
  0001f	2b c7		 sub	 eax, edi
  00021	3b c3		 cmp	 eax, ebx
  00023	73 02		 jae	 SHORT $LN4@append@2

; 956  : 			_Count = _Num;	// trim _Count to size

  00025	8b d8		 mov	 ebx, eax
$LN4@append@2:

; 957  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00027	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002a	83 c9 ff	 or	 ecx, -1
  0002d	2b c8		 sub	 ecx, eax
  0002f	3b cb		 cmp	 ecx, ebx
  00031	76 07		 jbe	 SHORT $LN2@append@2
  00033	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]
  00036	3b d0		 cmp	 edx, eax
  00038	73 05		 jae	 SHORT $LN3@append@2
$LN2@append@2:

; 958  : 			_String_base::_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@2:

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  0003f	85 db		 test	 ebx, ebx
  00041	0f 86 ab 00 00
	00		 jbe	 $LN87@append@2
  00047	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0004a	03 fb		 add	 edi, ebx
  0004c	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0004f	76 05		 jbe	 SHORT $LN17@append@2
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@append@2:
  00056	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00059	3b c7		 cmp	 eax, edi
  0005b	73 1f		 jae	 SHORT $LN16@append@2
  0005d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00060	50		 push	 eax
  00061	57		 push	 edi
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ff		 test	 edi, edi
$LN88@append@2:
  0006b	0f 86 81 00 00
	00		 jbe	 $LN87@append@2

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

  00071	83 7d 18 10	 cmp	 DWORD PTR [ebp+24], 16	; 00000010H
  00075	72 2f		 jb	 SHORT $LN64@append@2
  00077	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]
  0007a	eb 2d		 jmp	 SHORT $LN65@append@2

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN16@append@2:
  0007c	85 ff		 test	 edi, edi
  0007e	75 eb		 jne	 SHORT $LN88@append@2
  00080	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00083	83 f8 10	 cmp	 eax, 16			; 00000010H
  00086	72 0f		 jb	 SHORT $LN58@append@2
  00088	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008b	5f		 pop	 edi
  0008c	c6 00 00	 mov	 BYTE PTR [eax], 0

; 965  : 			}
; 966  : 		return (*this);

  0008f	8b c6		 mov	 eax, esi
  00091	5e		 pop	 esi
  00092	5d		 pop	 ebp
  00093	5b		 pop	 ebx

; 967  : 		}

  00094	c2 0c 00	 ret	 12			; 0000000cH

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN58@append@2:
  00097	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0009a	5f		 pop	 edi
  0009b	c6 00 00	 mov	 BYTE PTR [eax], 0

; 965  : 			}
; 966  : 		return (*this);

  0009e	8b c6		 mov	 eax, esi
  000a0	5e		 pop	 esi
  000a1	5d		 pop	 ebp
  000a2	5b		 pop	 ebx

; 967  : 		}

  000a3	c2 0c 00	 ret	 12			; 0000000cH

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

$LN64@append@2:
  000a6	83 c5 04	 add	 ebp, 4
$LN65@append@2:
  000a9	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000ac	83 f8 10	 cmp	 eax, 16			; 00000010H
  000af	72 05		 jb	 SHORT $LN68@append@2
  000b1	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000b4	eb 03		 jmp	 SHORT $LN69@append@2
$LN68@append@2:
  000b6	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN69@append@2:
  000b9	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000bc	53		 push	 ebx
  000bd	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Roff$[esp+16]
  000c1	03 eb		 add	 ebp, ebx
  000c3	2b c1		 sub	 eax, ecx
  000c5	55		 push	 ebp
  000c6	50		 push	 eax
  000c7	03 ca		 add	 ecx, edx
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	83 c4 10	 add	 esp, 16			; 00000010H

; 964  : 			_Eos(_Num);

  000d2	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000d6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000d9	72 10		 jb	 SHORT $LN82@append@2
  000db	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000de	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000e2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000e3	8b c6		 mov	 eax, esi
  000e5	5e		 pop	 esi
  000e6	5d		 pop	 ebp
  000e7	5b		 pop	 ebx

; 967  : 		}

  000e8	c2 0c 00	 ret	 12			; 0000000cH

; 964  : 			_Eos(_Num);

$LN82@append@2:
  000eb	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000ee	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN87@append@2:
  000f2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000f3	8b c6		 mov	 eax, esi
  000f5	5e		 pop	 esi
  000f6	5d		 pop	 ebp
  000f7	5b		 pop	 ebx

; 967  : 		}

  000f8	c2 0c 00	 ret	 12			; 0000000cH
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 946  : 		return (append(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 947  : 		}

  0000e	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 951  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 952  : 		if (_Right.size() < _Roff)

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7c 24 18	 mov	 edi, DWORD PTR __Roff$[esp+12]
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 7d 14	 cmp	 DWORD PTR [ebp+20], edi
  00011	73 05		 jae	 SHORT $LN5@append@3

; 953  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@append@3:

; 954  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]

; 955  : 		if (_Num < _Count)

  0001b	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Count$[esp+12]
  0001f	2b c7		 sub	 eax, edi
  00021	3b c3		 cmp	 eax, ebx
  00023	73 02		 jae	 SHORT $LN4@append@3

; 956  : 			_Count = _Num;	// trim _Count to size

  00025	8b d8		 mov	 ebx, eax
$LN4@append@3:

; 957  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00027	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002a	83 c9 ff	 or	 ecx, -1
  0002d	2b c8		 sub	 ecx, eax
  0002f	3b cb		 cmp	 ecx, ebx
  00031	76 07		 jbe	 SHORT $LN2@append@3
  00033	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]
  00036	3b d0		 cmp	 edx, eax
  00038	73 05		 jae	 SHORT $LN3@append@3
$LN2@append@3:

; 958  : 			_String_base::_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@3:

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  0003f	85 db		 test	 ebx, ebx
  00041	0f 86 bd 00 00
	00		 jbe	 $LN91@append@3
  00047	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0004a	03 fb		 add	 edi, ebx
  0004c	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00052	76 05		 jbe	 SHORT $LN17@append@3
  00054	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@append@3:
  00059	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005c	3b c7		 cmp	 eax, edi
  0005e	73 1f		 jae	 SHORT $LN16@append@3
  00060	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00063	50		 push	 eax
  00064	57		 push	 edi
  00065	8b ce		 mov	 ecx, esi
  00067	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0006c	85 ff		 test	 edi, edi
$LN92@append@3:
  0006e	0f 86 90 00 00
	00		 jbe	 $LN91@append@3

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

  00074	83 7d 18 08	 cmp	 DWORD PTR [ebp+24], 8
  00078	72 33		 jb	 SHORT $LN66@append@3
  0007a	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]
  0007d	eb 31		 jmp	 SHORT $LN67@append@3

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN16@append@3:
  0007f	85 ff		 test	 edi, edi
  00081	75 eb		 jne	 SHORT $LN92@append@3
  00083	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00086	83 f8 08	 cmp	 eax, 8
  00089	72 11		 jb	 SHORT $LN60@append@3
  0008b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008e	33 c9		 xor	 ecx, ecx
  00090	5f		 pop	 edi
  00091	66 89 08	 mov	 WORD PTR [eax], cx

; 965  : 			}
; 966  : 		return (*this);

  00094	8b c6		 mov	 eax, esi
  00096	5e		 pop	 esi
  00097	5d		 pop	 ebp
  00098	5b		 pop	 ebx

; 967  : 		}

  00099	c2 0c 00	 ret	 12			; 0000000cH

; 959  : 
; 960  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN60@append@3:
  0009c	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0009f	33 c9		 xor	 ecx, ecx
  000a1	5f		 pop	 edi
  000a2	66 89 08	 mov	 WORD PTR [eax], cx

; 965  : 			}
; 966  : 		return (*this);

  000a5	8b c6		 mov	 eax, esi
  000a7	5e		 pop	 esi
  000a8	5d		 pop	 ebp
  000a9	5b		 pop	 ebx

; 967  : 		}

  000aa	c2 0c 00	 ret	 12			; 0000000cH

; 961  : 			{	// make room and append new stuff
; 962  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize,
; 963  : 				_Right._Myptr() + _Roff, _Count);

$LN66@append@3:
  000ad	83 c5 04	 add	 ebp, 4
$LN67@append@3:
  000b0	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000b3	83 f8 08	 cmp	 eax, 8
  000b6	72 05		 jb	 SHORT $LN70@append@3
  000b8	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000bb	eb 03		 jmp	 SHORT $LN71@append@3
$LN70@append@3:
  000bd	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN71@append@3:
  000c0	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000c3	03 db		 add	 ebx, ebx
  000c5	53		 push	 ebx
  000c6	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Roff$[esp+16]
  000ca	2b c1		 sub	 eax, ecx
  000cc	8d 5c 5d 00	 lea	 ebx, DWORD PTR [ebp+ebx*2]
  000d0	53		 push	 ebx
  000d1	03 c0		 add	 eax, eax
  000d3	50		 push	 eax
  000d4	8d 14 4a	 lea	 edx, DWORD PTR [edx+ecx*2]
  000d7	52		 push	 edx
  000d8	e8 00 00 00 00	 call	 _memcpy_s
  000dd	83 c4 10	 add	 esp, 16			; 00000010H

; 964  : 			_Eos(_Num);

  000e0	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000e4	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000e7	72 12		 jb	 SHORT $LN86@append@3
  000e9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ec	33 c9		 xor	 ecx, ecx
  000ee	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
  000f2	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  000f3	8b c6		 mov	 eax, esi
  000f5	5e		 pop	 esi
  000f6	5d		 pop	 ebp
  000f7	5b		 pop	 ebx

; 967  : 		}

  000f8	c2 0c 00	 ret	 12			; 0000000cH

; 964  : 			_Eos(_Num);

$LN86@append@3:
  000fb	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000fe	33 c9		 xor	 ecx, ecx
  00100	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
$LN91@append@3:
  00104	5f		 pop	 edi

; 965  : 			}
; 966  : 		return (*this);

  00105	8b c6		 mov	 eax, esi
  00107	5e		 pop	 esi
  00108	5d		 pop	 ebp
  00109	5b		 pop	 ebx

; 967  : 		}

  0010a	c2 0c 00	 ret	 12			; 0000000cH
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@

; 31   : 		}

  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN19@logic_erro
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN19@logic_erro:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 35   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN7@what
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 36   : 		}

  00009	c3		 ret	 0

; 35   : 		return (_Str.c_str());

$LN7@what:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 36   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN22@scalar@18
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN22@scalar@18:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN32@scalar@18
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN32@scalar@18:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?what@runtime_error@std@@UBEPBDXZ		; std::runtime_error::what
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@runtime_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	ENDS
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx

; 157  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@

; 158  : 		}

  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN19@runtime_er
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN19@runtime_er:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?what@runtime_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@runtime_error@std@@UBEPBDXZ PROC			; std::runtime_error::what, COMDAT
; _this$ = ecx

; 162  : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $LN7@what@2
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 163  : 		}

  00009	c3		 ret	 0

; 162  : 		return (_Str.c_str());

$LN7@what@2:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 163  : 		}

  0000d	c3		 ret	 0
?what@runtime_error@std@@UBEPBDXZ ENDP			; std::runtime_error::what
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN22@scalar@19
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN22@scalar@19:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN32@scalar@19
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN32@scalar@19:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:PROC ; std::_Locinfo::_Locinfo_ctor
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$4
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
xdata$x	ENDS
;	COMDAT ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_locstr$ = 8						; size = 4
??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Locinfo::_Locinfo, COMDAT
; _this$ = ecx

; 96   : 		{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	33 db		 xor	 ebx, ebx
  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00031	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  00036	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00039	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  0003c	89 5c 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], ebx
  00040	88 5e 08	 mov	 BYTE PTR [esi+8], bl
  00043	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00046	89 5e 34	 mov	 DWORD PTR [esi+52], ebx
  00049	88 5e 24	 mov	 BYTE PTR [esi+36], bl
  0004c	89 46 54	 mov	 DWORD PTR [esi+84], eax
  0004f	89 5e 50	 mov	 DWORD PTR [esi+80], ebx
  00052	88 5e 40	 mov	 BYTE PTR [esi+64], bl
  00055	89 46 70	 mov	 DWORD PTR [esi+112], eax
  00058	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  0005b	88 5e 5c	 mov	 BYTE PTR [esi+92], bl

; 97   :         _Locinfo_ctor(this, locstr);

  0005e	8b 44 24 20	 mov	 eax, DWORD PTR _locstr$[esp+24]
  00062	50		 push	 eax
  00063	56		 push	 esi
  00064	c6 44 24 20 04	 mov	 BYTE PTR __$EHRec$[esp+44], 4
  00069	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Locinfo::_Locinfo_ctor
  0006e	83 c4 08	 add	 esp, 8

; 98   : 		}

  00071	8b c6		 mov	 eax, esi
  00073	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	83 c4 10	 add	 esp, 16			; 00000010H
  00084	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 20	 add	 ecx, 32			; 00000020H
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 58	 add	 ecx, 88			; 00000058H
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0003b	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__ehfuncinfo$??1_Locinfo@std@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1_Locinfo@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1_Locinfo@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocinfo
xdata$x	ENDS
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT
; _this$ = ecx

; 101  :         {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1_Locinfo@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	55		 push	 ebp
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 14	 mov	 DWORD PTR _this$[esp+36], esi

; 102  :         _Locinfo_dtor(this);

  0002b	56		 push	 esi
  0002c	c7 44 24 24 04
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 4
  00034	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor

; 103  :         }

  00039	bd 10 00 00 00	 mov	 ebp, 16			; 00000010H
  0003e	83 c4 04	 add	 esp, 4
  00041	39 6e 70	 cmp	 DWORD PTR [esi+112], ebp
  00044	72 0c		 jb	 SHORT $LN24@Locinfo
  00046	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004f	83 c4 04	 add	 esp, 4
$LN24@Locinfo:
  00052	33 db		 xor	 ebx, ebx
  00054	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00059	89 7e 70	 mov	 DWORD PTR [esi+112], edi
  0005c	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  0005f	88 5e 5c	 mov	 BYTE PTR [esi+92], bl
  00062	39 6e 54	 cmp	 DWORD PTR [esi+84], ebp
  00065	72 0c		 jb	 SHORT $LN50@Locinfo
  00067	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00070	83 c4 04	 add	 esp, 4
$LN50@Locinfo:
  00073	89 7e 54	 mov	 DWORD PTR [esi+84], edi
  00076	89 5e 50	 mov	 DWORD PTR [esi+80], ebx
  00079	88 5e 40	 mov	 BYTE PTR [esi+64], bl
  0007c	39 6e 38	 cmp	 DWORD PTR [esi+56], ebp
  0007f	72 0c		 jb	 SHORT $LN76@Locinfo
  00081	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008a	83 c4 04	 add	 esp, 4
$LN76@Locinfo:
  0008d	89 7e 38	 mov	 DWORD PTR [esi+56], edi
  00090	89 5e 34	 mov	 DWORD PTR [esi+52], ebx
  00093	88 5e 24	 mov	 BYTE PTR [esi+36], bl
  00096	39 6e 1c	 cmp	 DWORD PTR [esi+28], ebp
  00099	72 0c		 jb	 SHORT $LN102@Locinfo
  0009b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a4	83 c4 04	 add	 esp, 4
$LN102@Locinfo:
  000a7	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  000aa	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000ad	8b ce		 mov	 ecx, esi
  000af	88 5e 08	 mov	 BYTE PTR [esi+8], bl
  000b2	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+44], -1
  000ba	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000bf	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ca	59		 pop	 ecx
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5d		 pop	 ebp
  000ce	5b		 pop	 ebx
  000cf	83 c4 10	 add	 esp, 16			; 00000010H
  000d2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 20	 add	 ecx, 32			; 00000020H
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 58	 add	 ecx, 88			; 00000058H
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??1_Locinfo@std@@QAE@XZ:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0003b	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
PUBLIC	??1HostDevice@@QAE@XZ				; HostDevice::~HostDevice
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??1HostDevice@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1HostDevice@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1HostDevice@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1HostDevice@@QAE@XZ$2
__ehfuncinfo$??1HostDevice@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1HostDevice@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\common\dlgcode.h
xdata$x	ENDS
;	COMDAT ??1HostDevice@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1HostDevice@@QAE@XZ PROC				; HostDevice::~HostDevice, COMDAT
; _this$ = ecx

; 479  : 	~HostDevice () { }

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1HostDevice@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  0002c	c7 44 24 18 02
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+36], 2
  00034	e8 00 00 00 00	 call	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
  00039	83 7e 58 10	 cmp	 DWORD PTR [esi+88], 16	; 00000010H
  0003d	72 0c		 jb	 SHORT $LN23@HostDevice
  0003f	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00048	83 c4 04	 add	 esp, 4
$LN23@HostDevice:
  0004b	33 db		 xor	 ebx, ebx
  0004d	c7 46 58 0f 00
	00 00		 mov	 DWORD PTR [esi+88], 15	; 0000000fH
  00054	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
  00057	88 5e 44	 mov	 BYTE PTR [esi+68], bl
  0005a	83 7e 3c 08	 cmp	 DWORD PTR [esi+60], 8
  0005e	72 0c		 jb	 SHORT $LN51@HostDevice
  00060	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00069	83 c4 04	 add	 esp, 4
$LN51@HostDevice:
  0006c	33 d2		 xor	 edx, edx
  0006e	c7 46 3c 07 00
	00 00		 mov	 DWORD PTR [esi+60], 7
  00075	89 5e 38	 mov	 DWORD PTR [esi+56], ebx
  00078	66 89 56 28	 mov	 WORD PTR [esi+40], dx
  0007c	83 7e 20 10	 cmp	 DWORD PTR [esi+32], 16	; 00000010H
  00080	72 0c		 jb	 SHORT $LN77@HostDevice
  00082	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008b	83 c4 04	 add	 esp, 4
$LN77@HostDevice:
  0008e	c7 46 20 0f 00
	00 00		 mov	 DWORD PTR [esi+32], 15	; 0000000fH
  00095	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx
  00098	88 5e 0c	 mov	 BYTE PTR [esi+12], bl
  0009b	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	83 c4 10	 add	 esp, 16			; 00000010H
  000ac	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1HostDevice@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??1HostDevice@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 24	 add	 ecx, 36			; 00000024H
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$??1HostDevice@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 40	 add	 ecx, 64			; 00000040H
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??1HostDevice@@QAE@XZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  00028	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1HostDevice@@QAE@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1HostDevice@@QAE@XZ ENDP				; HostDevice::~HostDevice
PUBLIC	??1Partition@CipherShed@@QAE@XZ			; CipherShed::Partition::~Partition
; Function compile flags: /Ogtpy
;	COMDAT ??1Partition@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??1Partition@CipherShed@@QAE@XZ PROC			; CipherShed::Partition::~Partition, COMDAT
; _this$ = ecx
  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	83 7e 7c 08	 cmp	 DWORD PTR [esi+124], 8
  00008	72 0c		 jb	 SHORT $LN24@Partition
  0000a	8b 46 68	 mov	 eax, DWORD PTR [esi+104]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00013	83 c4 04	 add	 esp, 4
$LN24@Partition:
  00016	33 db		 xor	 ebx, ebx
  00018	33 c9		 xor	 ecx, ecx
  0001a	c7 46 7c 07 00
	00 00		 mov	 DWORD PTR [esi+124], 7
  00021	89 5e 78	 mov	 DWORD PTR [esi+120], ebx
  00024	66 89 4e 68	 mov	 WORD PTR [esi+104], cx
  00028	83 7e 58 10	 cmp	 DWORD PTR [esi+88], 16	; 00000010H
  0002c	72 0c		 jb	 SHORT $LN50@Partition
  0002e	8b 56 44	 mov	 edx, DWORD PTR [esi+68]
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00037	83 c4 04	 add	 esp, 4
$LN50@Partition:
  0003a	c7 46 58 0f 00
	00 00		 mov	 DWORD PTR [esi+88], 15	; 0000000fH
  00041	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
  00044	88 5e 44	 mov	 BYTE PTR [esi+68], bl
  00047	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  0004b	72 0c		 jb	 SHORT $LN76@Partition
  0004d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4
$LN76@Partition:
  00059	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0005c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00063	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	c3		 ret	 0
??1Partition@CipherShed@@QAE@XZ ENDP			; CipherShed::Partition::~Partition
_TEXT	ENDS
EXTRN	_CreateFullVolumePath:PROC
EXTRN	_strncpy:PROC
EXTRN	?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ:PROC ; CipherShed::BootEncryption::GetPartitionForHiddenOS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	SEGMENT
__catchsym$?GetDevicePathForHiddenOS@@YAHXZ$3 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffe8H
	DD	FLAT:__catch$?GetDevicePathForHiddenOS@@YAHXZ$0
__unwindtable$?GetDevicePathForHiddenOS@@YAHXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?GetDevicePathForHiddenOS@@YAHXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?GetDevicePathForHiddenOS@@YAHXZ$3
__ehfuncinfo$?GetDevicePathForHiddenOS@@YAHXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetDevicePathForHiddenOS@@YAHXZ
	DD	01H
	DD	FLAT:__tryblocktable$?GetDevicePathForHiddenOS@@YAHXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\format\tcformat.c
xdata$x	ENDS
;	COMDAT ?GetDevicePathForHiddenOS@@YAHXZ
_TEXT	SEGMENT
$T151246 = -156						; size = 128
_e$132269 = -24						; size = 4
_tmpbDevice$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
?GetDevicePathForHiddenOS@@YAHXZ PROC			; GetDevicePathForHiddenOS, COMDAT

; 1705 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetDevicePathForHiddenOS@@YAHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1706 : 	BOOL tmpbDevice = FALSE;
; 1707 : 
; 1708 : 	try
; 1709 : 	{
; 1710 : 		strncpy (szFileName, BootEncObj->GetPartitionForHiddenOS().DevicePath.c_str(), sizeof(szFileName));

  0002e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00034	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR $T151246[ebp]
  0003a	33 db		 xor	 ebx, ebx
  0003c	50		 push	 eax
  0003d	89 5d ec	 mov	 DWORD PTR _tmpbDevice$[ebp], ebx
  00040	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00043	e8 00 00 00 00	 call	 ?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ ; CipherShed::BootEncryption::GetPartitionForHiddenOS
  00048	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  0004c	72 05		 jb	 SHORT $LN15@GetDeviceP
  0004e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00051	eb 03		 jmp	 SHORT $LN16@GetDeviceP
$LN15@GetDeviceP:
  00053	83 c0 04	 add	 eax, 4
$LN16@GetDeviceP:
  00056	68 05 01 00 00	 push	 261			; 00000105H
  0005b	50		 push	 eax
  0005c	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  00061	e8 00 00 00 00	 call	 _strncpy
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T151246[ebp]
  0006f	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ

; 1711 : 
; 1712 : 		CreateFullVolumePath (szDiskFile, szFileName, &tmpbDevice);

  00074	8d 4d ec	 lea	 ecx, DWORD PTR _tmpbDevice$[ebp]
  00077	51		 push	 ecx
  00078	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  0007d	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  00082	e8 00 00 00 00	 call	 _CreateFullVolumePath
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1718 : 	}
; 1719 : 
; 1720 : 	return (szFileName[0] != 0 
; 1721 : 		&& szDiskFile[0] != 0 
; 1722 : 		&& tmpbDevice);

  0008a	38 1d 00 00 00
	00		 cmp	 BYTE PTR ?szFileName@@3PADA, bl
  00090	74 39		 je	 SHORT $LN10@GetDeviceP
  00092	38 1d 00 00 00
	00		 cmp	 BYTE PTR ?szDiskFile@@3PADA, bl
  00098	74 31		 je	 SHORT $LN10@GetDeviceP
  0009a	39 5d ec	 cmp	 DWORD PTR _tmpbDevice$[ebp], ebx
  0009d	74 2c		 je	 SHORT $LN10@GetDeviceP
  0009f	b8 01 00 00 00	 mov	 eax, 1

; 1723 : }

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ae	59		 pop	 ecx
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
__catch$?GetDevicePathForHiddenOS@@YAHXZ$0:

; 1713 : 	}
; 1714 : 	catch (Exception &e)
; 1715 : 	{
; 1716 : 		e.Show (MainDlg);

  000b6	8b 4d e8	 mov	 ecx, DWORD PTR _e$132269[ebp]
  000b9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  000c0	8b 12		 mov	 edx, DWORD PTR [edx]
  000c2	50		 push	 eax
  000c3	ff d2		 call	 edx

; 1717 : 		return FALSE;

  000c5	b8 00 00 00 00	 mov	 eax, $LN10@GetDeviceP
  000ca	c3		 ret	 0
$LN10@GetDeviceP:
  000cb	33 c0		 xor	 eax, eax

; 1723 : }

  000cd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000d0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d7	59		 pop	 ecx
  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?GetDevicePathForHiddenOS@@YAHXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 60 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-160]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetDevicePathForHiddenOS@@YAHXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetDevicePathForHiddenOS@@YAHXZ ENDP			; GetDevicePathForHiddenOS
PUBLIC	??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::~ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ$0
__ehfuncinfo$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::~ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0002b	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00033	e8 00 00 00 00	 call	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
  00038	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@CipherShed@@6B@
  0003e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00042	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00049	59		 pop	 ecx
  0004a	5e		 pop	 esi
  0004b	83 c4 10	 add	 esp, 16			; 00000010H
  0004e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::~ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
PUBLIC	??1?$_List_val@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_val@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_val@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx
  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	50		 push	 eax
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
??1?$_List_val@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~_List_val<CipherShed::Partition,std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1046 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx

; 1047 : 		if (_Right.size() < _Roff)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __Right$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 10	 mov	 ebp, DWORD PTR __Roff$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 6b 14	 cmp	 DWORD PTR [ebx+20], ebp
  00011	73 05		 jae	 SHORT $LN5@assign

; 1048 : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@assign:

; 1049 : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]

; 1050 : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b fd		 sub	 edi, ebp
  00021	3b c7		 cmp	 eax, edi
  00023	73 02		 jae	 SHORT $LN4@assign

; 1051 : 			_Num = _Count;	// trim _Num to size

  00025	8b f8		 mov	 edi, eax
$LN4@assign:

; 1052 : 
; 1053 : 		if (this == &_Right)

  00027	3b f3		 cmp	 esi, ebx
  00029	75 1f		 jne	 SHORT $LN3@assign

; 1054 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 fd		 add	 edi, ebp
  0002f	57		 push	 edi
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	55		 push	 ebp
  00038	6a 00		 push	 0
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	5b		 pop	 ebx

; 1061 : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign:

; 1055 : 		else if (_Grow(_Num))

  0004a	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0004d	76 05		 jbe	 SHORT $LN17@assign
  0004f	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@assign:
  00054	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00057	3b c7		 cmp	 eax, edi
  00059	73 1b		 jae	 SHORT $LN16@assign
  0005b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0005e	50		 push	 eax
  0005f	57		 push	 edi
  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00067	85 ff		 test	 edi, edi
$LN87@assign:
  00069	76 66		 jbe	 SHORT $LN86@assign

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

  0006b	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0006f	72 2f		 jb	 SHORT $LN64@assign
  00071	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00074	eb 2d		 jmp	 SHORT $LN65@assign

; 1055 : 		else if (_Grow(_Num))

$LN16@assign:
  00076	85 ff		 test	 edi, edi
  00078	75 ef		 jne	 SHORT $LN87@assign
  0007a	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0007d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00080	72 0f		 jb	 SHORT $LN58@assign
  00082	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00085	5f		 pop	 edi
  00086	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00089	8b c6		 mov	 eax, esi
  0008b	5e		 pop	 esi
  0008c	5d		 pop	 ebp
  0008d	5b		 pop	 ebx

; 1061 : 		}

  0008e	c2 0c 00	 ret	 12			; 0000000cH

; 1055 : 		else if (_Grow(_Num))

$LN58@assign:
  00091	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1059 : 			}
; 1060 : 		return (*this);

  00098	8b c6		 mov	 eax, esi
  0009a	5e		 pop	 esi
  0009b	5d		 pop	 ebp
  0009c	5b		 pop	 ebx

; 1061 : 		}

  0009d	c2 0c 00	 ret	 12			; 0000000cH

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

$LN64@assign:
  000a0	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN65@assign:
  000a3	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000a6	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000a9	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000ac	72 04		 jb	 SHORT $LN68@assign
  000ae	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b0	eb 02		 jmp	 SHORT $LN69@assign
$LN68@assign:
  000b2	8b c3		 mov	 eax, ebx
$LN69@assign:
  000b4	57		 push	 edi
  000b5	03 d5		 add	 edx, ebp
  000b7	52		 push	 edx
  000b8	51		 push	 ecx
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 _memcpy_s
  000bf	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 			_Eos(_Num);

  000c2	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c9	72 02		 jb	 SHORT $LN82@assign
  000cb	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN82@assign:
  000cd	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
$LN86@assign:
  000d1	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  000d2	8b c6		 mov	 eax, esi
  000d4	5e		 pop	 esi
  000d5	5d		 pop	 ebp
  000d6	5b		 pop	 ebx

; 1061 : 		}

  000d7	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1046 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx

; 1047 : 		if (_Right.size() < _Roff)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Roff$[esp]
  00005	55		 push	 ebp
  00006	8b 6c 24 0c	 mov	 ebp, DWORD PTR __Right$[esp+4]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	39 5d 14	 cmp	 DWORD PTR [ebp+20], ebx
  00011	73 05		 jae	 SHORT $LN5@assign@2

; 1048 : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran
$LN5@assign@2:

; 1049 : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 7d 14	 mov	 edi, DWORD PTR [ebp+20]

; 1050 : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b fb		 sub	 edi, ebx
  00021	3b c7		 cmp	 eax, edi
  00023	73 02		 jae	 SHORT $LN4@assign@2

; 1051 : 			_Num = _Count;	// trim _Num to size

  00025	8b f8		 mov	 edi, eax
$LN4@assign@2:

; 1052 : 
; 1053 : 		if (this == &_Right)

  00027	3b f5		 cmp	 esi, ebp
  00029	75 1f		 jne	 SHORT $LN3@assign@2

; 1054 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 fb		 add	 edi, ebx
  0002f	57		 push	 edi
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00037	53		 push	 ebx
  00038	6a 00		 push	 0
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00041	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	5b		 pop	 ebx

; 1061 : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign@2:

; 1055 : 		else if (_Grow(_Num))

  0004a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00050	76 05		 jbe	 SHORT $LN17@assign@2
  00052	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN17@assign@2:
  00057	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005a	3b c7		 cmp	 eax, edi
  0005c	73 1b		 jae	 SHORT $LN16@assign@2
  0005e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00061	50		 push	 eax
  00062	57		 push	 edi
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0006a	85 ff		 test	 edi, edi
$LN91@assign@2:
  0006c	76 7a		 jbe	 SHORT $LN90@assign@2

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

  0006e	83 7d 18 08	 cmp	 DWORD PTR [ebp+24], 8
  00072	72 33		 jb	 SHORT $LN66@assign@2
  00074	8b 4d 04	 mov	 ecx, DWORD PTR [ebp+4]
  00077	eb 31		 jmp	 SHORT $LN67@assign@2

; 1055 : 		else if (_Grow(_Num))

$LN16@assign@2:
  00079	85 ff		 test	 edi, edi
  0007b	75 ef		 jne	 SHORT $LN91@assign@2
  0007d	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00080	83 f8 08	 cmp	 eax, 8
  00083	72 11		 jb	 SHORT $LN60@assign@2
  00085	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00088	33 c9		 xor	 ecx, ecx
  0008a	5f		 pop	 edi
  0008b	66 89 08	 mov	 WORD PTR [eax], cx

; 1059 : 			}
; 1060 : 		return (*this);

  0008e	8b c6		 mov	 eax, esi
  00090	5e		 pop	 esi
  00091	5d		 pop	 ebp
  00092	5b		 pop	 ebx

; 1061 : 		}

  00093	c2 0c 00	 ret	 12			; 0000000cH

; 1055 : 		else if (_Grow(_Num))

$LN60@assign@2:
  00096	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00099	33 c9		 xor	 ecx, ecx
  0009b	5f		 pop	 edi
  0009c	66 89 08	 mov	 WORD PTR [eax], cx

; 1059 : 			}
; 1060 : 		return (*this);

  0009f	8b c6		 mov	 eax, esi
  000a1	5e		 pop	 esi
  000a2	5d		 pop	 ebp
  000a3	5b		 pop	 ebx

; 1061 : 		}

  000a4	c2 0c 00	 ret	 12			; 0000000cH

; 1056 : 			{	// make room and assign new stuff
; 1057 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Right._Myptr() + _Roff, _Num);

$LN66@assign@2:
  000a7	8d 4d 04	 lea	 ecx, DWORD PTR [ebp+4]
$LN67@assign@2:
  000aa	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000ae	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  000b1	72 05		 jb	 SHORT $LN70@assign@2
  000b3	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  000b6	eb 02		 jmp	 SHORT $LN71@assign@2
$LN70@assign@2:
  000b8	8b c5		 mov	 eax, ebp
$LN71@assign@2:
  000ba	8b 54 24 18	 mov	 edx, DWORD PTR __Roff$[esp+12]
  000be	8d 0c 51	 lea	 ecx, DWORD PTR [ecx+edx*2]
  000c1	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  000c4	53		 push	 ebx
  000c5	51		 push	 ecx
  000c6	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000c9	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  000cc	52		 push	 edx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 _memcpy_s
  000d3	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 			_Eos(_Num);

  000d6	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000da	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000dd	72 03		 jb	 SHORT $LN86@assign@2
  000df	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN86@assign@2:
  000e2	33 c0		 xor	 eax, eax
  000e4	66 89 04 2b	 mov	 WORD PTR [ebx+ebp], ax
$LN90@assign@2:
  000e8	5f		 pop	 edi

; 1059 : 			}
; 1060 : 		return (*this);

  000e9	8b c6		 mov	 eax, esi
  000eb	5e		 pop	 esi
  000ec	5d		 pop	 ebp
  000ed	5b		 pop	 ebx

; 1061 : 		}

  000ee	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 641  : 		return (iterator(_Myfirst, this));

  00004	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	3b 5e 10	 cmp	 ebx, DWORD PTR [esi+16]
  00015	76 05		 jbe	 SHORT $LN7@begin@2
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@begin@2:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 642  : 		}

  00028	c2 04 00	 ret	 4
?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 651  : 		return (iterator(_Mylast, this));

  00004	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00007	57		 push	 edi
  00008	8b 7c 24 10	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+8]
  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00012	39 5e 0c	 cmp	 DWORD PTR [esi+12], ebx
  00015	76 05		 jbe	 SHORT $LN7@end@2
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN7@end@2:
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 07		 mov	 DWORD PTR [edi], eax
  00020	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00023	8b c7		 mov	 eax, edi
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 652  : 		}

  00028	c2 04 00	 ret	 4
?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::end
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1064 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp

; 1065 : 
; 1066 :  #if _HAS_ITERATOR_DEBUGGING
; 1067 : 		if (_Count != 0)
; 1068 : 			_DEBUG_POINTER(_Ptr);
; 1069 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1070 : 
; 1071 : 		if (_Inside(_Ptr))

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Ptr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 ed		 test	 ebp, ebp
  0000b	74 46		 je	 SHORT $LN93@assign@3
  0000d	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 fa 10	 cmp	 edx, 16			; 00000010H
  00016	72 04		 jb	 SHORT $LN12@assign@3
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN13@assign@3
$LN12@assign@3:
  0001c	8b c8		 mov	 ecx, eax
$LN13@assign@3:
  0001e	3b e9		 cmp	 ebp, ecx
  00020	72 31		 jb	 SHORT $LN93@assign@3
  00022	83 fa 10	 cmp	 edx, 16			; 00000010H
  00025	72 04		 jb	 SHORT $LN16@assign@3
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN17@assign@3
$LN16@assign@3:
  0002b	8b c8		 mov	 ecx, eax
$LN17@assign@3:
  0002d	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00030	03 f9		 add	 edi, ecx
  00032	3b fd		 cmp	 edi, ebp
  00034	76 1d		 jbe	 SHORT $LN93@assign@3

; 1072 : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00036	83 fa 10	 cmp	 edx, 16			; 00000010H
  00039	72 02		 jb	 SHORT $LN20@assign@3
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@assign@3:
  0003d	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00041	51		 push	 ecx
  00042	2b e8		 sub	 ebp, eax
  00044	55		 push	 ebp
  00045	56		 push	 esi
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp

; 1080 : 		}

  00050	c2 08 00	 ret	 8
$LN93@assign@3:

; 1073 : 
; 1074 : 		if (_Grow(_Count))

  00053	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  00057	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0005a	76 05		 jbe	 SHORT $LN27@assign@3
  0005c	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN27@assign@3:
  00061	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00064	3b c7		 cmp	 eax, edi
  00066	73 20		 jae	 SHORT $LN26@assign@3
  00068	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0006b	52		 push	 edx
  0006c	57		 push	 edi
  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00074	85 ff		 test	 edi, edi
$LN94@assign@3:
  00076	76 56		 jbe	 SHORT $LN90@assign@3

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

  00078	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0007b	53		 push	 ebx
  0007c	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  0007f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00082	72 2c		 jb	 SHORT $LN74@assign@3
  00084	8b 03		 mov	 eax, DWORD PTR [ebx]
  00086	eb 2a		 jmp	 SHORT $LN75@assign@3

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN26@assign@3:
  00088	85 ff		 test	 edi, edi
  0008a	75 ea		 jne	 SHORT $LN94@assign@3
  0008c	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0008f	83 f8 10	 cmp	 eax, 16			; 00000010H
  00092	72 0e		 jb	 SHORT $LN68@assign@3
  00094	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00097	5f		 pop	 edi
  00098	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  0009b	8b c6		 mov	 eax, esi
  0009d	5e		 pop	 esi
  0009e	5d		 pop	 ebp

; 1080 : 		}

  0009f	c2 08 00	 ret	 8

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN68@assign@3:
  000a2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000a5	5f		 pop	 edi
  000a6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1078 : 			}
; 1079 : 		return (*this);

  000a9	8b c6		 mov	 eax, esi
  000ab	5e		 pop	 esi
  000ac	5d		 pop	 ebp

; 1080 : 		}

  000ad	c2 08 00	 ret	 8

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

$LN74@assign@3:
  000b0	8b c3		 mov	 eax, ebx
$LN75@assign@3:
  000b2	57		 push	 edi
  000b3	55		 push	 ebp
  000b4	51		 push	 ecx
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _memcpy_s
  000bb	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 			_Eos(_Count);

  000be	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000c2	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c5	72 02		 jb	 SHORT $LN88@assign@3
  000c7	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN88@assign@3:
  000c9	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
  000cd	5b		 pop	 ebx
$LN90@assign@3:
  000ce	5f		 pop	 edi

; 1078 : 			}
; 1079 : 		return (*this);

  000cf	8b c6		 mov	 eax, esi
  000d1	5e		 pop	 esi
  000d2	5d		 pop	 ebp

; 1080 : 		}

  000d3	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1041 : 		return (assign(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 1042 : 		}

  0000e	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1064 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 1065 : 
; 1066 :  #if _HAS_ITERATOR_DEBUGGING
; 1067 : 		if (_Count != 0)
; 1068 : 			_DEBUG_POINTER(_Ptr);
; 1069 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1070 : 
; 1071 : 		if (_Inside(_Ptr))

  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00008	57		 push	 edi
  00009	85 c9		 test	 ecx, ecx
  0000b	74 49		 je	 SHORT $LN97@assign@4
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 08	 cmp	 edi, 8
  00016	72 04		 jb	 SHORT $LN12@assign@4
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN13@assign@4
$LN12@assign@4:
  0001c	8b d0		 mov	 edx, eax
$LN13@assign@4:
  0001e	3b ca		 cmp	 ecx, edx
  00020	72 34		 jb	 SHORT $LN97@assign@4
  00022	83 ff 08	 cmp	 edi, 8
  00025	72 04		 jb	 SHORT $LN16@assign@4
  00027	8b 10		 mov	 edx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN17@assign@4
$LN16@assign@4:
  0002b	8b d0		 mov	 edx, eax
$LN17@assign@4:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	8d 14 5a	 lea	 edx, DWORD PTR [edx+ebx*2]
  00033	3b d1		 cmp	 edx, ecx
  00035	76 1f		 jbe	 SHORT $LN97@assign@4

; 1072 : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00037	83 ff 08	 cmp	 edi, 8
  0003a	72 02		 jb	 SHORT $LN20@assign@4
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@assign@4:
  0003e	8b 54 24 14	 mov	 edx, DWORD PTR __Count$[esp+8]
  00042	2b c8		 sub	 ecx, eax
  00044	52		 push	 edx
  00045	d1 f9		 sar	 ecx, 1
  00047	51		 push	 ecx
  00048	56		 push	 esi
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx

; 1080 : 		}

  00053	c2 08 00	 ret	 8
$LN97@assign@4:

; 1073 : 
; 1074 : 		if (_Grow(_Count))

  00056	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0005a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00060	76 05		 jbe	 SHORT $LN27@assign@4
  00062	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN27@assign@4:
  00067	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0006a	3b c7		 cmp	 eax, edi
  0006c	73 21		 jae	 SHORT $LN26@assign@4
  0006e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00071	50		 push	 eax
  00072	57		 push	 edi
  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0007a	85 ff		 test	 edi, edi
$LN98@assign@4:
  0007c	76 67		 jbe	 SHORT $LN94@assign@4

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

  0007e	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00081	55		 push	 ebp
  00082	8d 6e 04	 lea	 ebp, DWORD PTR [esi+4]
  00085	83 f9 08	 cmp	 ecx, 8
  00088	72 31		 jb	 SHORT $LN76@assign@4
  0008a	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  0008d	eb 2e		 jmp	 SHORT $LN77@assign@4

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN26@assign@4:
  0008f	85 ff		 test	 edi, edi
  00091	75 e9		 jne	 SHORT $LN98@assign@4
  00093	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00096	83 f8 08	 cmp	 eax, 8
  00099	72 10		 jb	 SHORT $LN70@assign@4
  0009b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009e	33 c9		 xor	 ecx, ecx
  000a0	5f		 pop	 edi
  000a1	66 89 08	 mov	 WORD PTR [eax], cx

; 1078 : 			}
; 1079 : 		return (*this);

  000a4	8b c6		 mov	 eax, esi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx

; 1080 : 		}

  000a8	c2 08 00	 ret	 8

; 1073 : 
; 1074 : 		if (_Grow(_Count))

$LN70@assign@4:
  000ab	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000ae	33 c9		 xor	 ecx, ecx
  000b0	5f		 pop	 edi
  000b1	66 89 08	 mov	 WORD PTR [eax], cx

; 1078 : 			}
; 1079 : 		return (*this);

  000b4	8b c6		 mov	 eax, esi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx

; 1080 : 		}

  000b8	c2 08 00	 ret	 8

; 1075 : 			{	// make room and assign new stuff
; 1076 : 			_Traits_helper::copy_s<_Traits>(_Myptr(), _Myres, _Ptr, _Count);

$LN76@assign@4:
  000bb	8b c5		 mov	 eax, ebp
$LN77@assign@4:
  000bd	8b 54 24 14	 mov	 edx, DWORD PTR __Ptr$[esp+12]
  000c1	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  000c4	53		 push	 ebx
  000c5	52		 push	 edx
  000c6	03 c9		 add	 ecx, ecx
  000c8	51		 push	 ecx
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	83 c4 10	 add	 esp, 16			; 00000010H

; 1077 : 			_Eos(_Count);

  000d2	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  000d6	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000d9	72 03		 jb	 SHORT $LN92@assign@4
  000db	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
$LN92@assign@4:
  000de	33 d2		 xor	 edx, edx
  000e0	66 89 14 2b	 mov	 WORD PTR [ebx+ebp], dx
  000e4	5d		 pop	 ebp
$LN94@assign@4:
  000e5	5f		 pop	 edi

; 1078 : 			}
; 1079 : 		return (*this);

  000e6	8b c6		 mov	 eax, esi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx

; 1080 : 		}

  000ea	c2 08 00	 ret	 8
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Make_iter
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Make_iter@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

  00000	56		 push	 esi
  00001	57		 push	 edi

; 661  : 		return (iterator(_Where._Myptr, this));

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0000e	85 f6		 test	 esi, esi
  00010	74 0e		 je	 SHORT $LN8@Make_iter
  00012	8b 44 24 14	 mov	 eax, DWORD PTR __Where$[esp+8]
  00016	39 46 0c	 cmp	 DWORD PTR [esi+12], eax
  00019	77 05		 ja	 SHORT $LN8@Make_iter
  0001b	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  0001e	76 09		 jbe	 SHORT $LN7@Make_iter
$LN8@Make_iter:
  00020	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00025	8b 44 24 14	 mov	 eax, DWORD PTR __Where$[esp+8]
$LN7@Make_iter:
  00029	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002b	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0002e	89 0f		 mov	 DWORD PTR [edi], ecx
  00030	8b c7		 mov	 eax, edi
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi

; 662  : 		}

  00034	c2 0c 00	 ret	 12			; 0000000cH
?_Make_iter@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Make_iter
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 971  : 
; 972  :  #if _HAS_ITERATOR_DEBUGGING
; 973  : 		if (_Count != 0)
; 974  : 			_DEBUG_POINTER(_Ptr);
; 975  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 976  : 
; 977  : 		if (_Inside(_Ptr))

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	74 46		 je	 SHORT $LN4@append@4
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 10	 cmp	 edi, 16			; 00000010H
  00016	72 04		 jb	 SHORT $LN14@append@4
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN15@append@4
$LN14@append@4:
  0001c	8b c8		 mov	 ecx, eax
$LN15@append@4:
  0001e	3b d1		 cmp	 edx, ecx
  00020	72 31		 jb	 SHORT $LN4@append@4
  00022	83 ff 10	 cmp	 edi, 16			; 00000010H
  00025	72 04		 jb	 SHORT $LN18@append@4
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN19@append@4
$LN18@append@4:
  0002b	8b c8		 mov	 ecx, eax
$LN19@append@4:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	03 d9		 add	 ebx, ecx
  00032	3b da		 cmp	 ebx, edx
  00034	76 1d		 jbe	 SHORT $LN4@append@4

; 978  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

  00036	83 ff 10	 cmp	 edi, 16			; 00000010H
  00039	72 02		 jb	 SHORT $LN22@append@4
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN22@append@4:
  0003d	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00041	51		 push	 ecx
  00042	2b d0		 sub	 edx, eax
  00044	52		 push	 edx
  00045	56		 push	 esi
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx

; 989  : 		}

  00050	c2 08 00	 ret	 8
$LN4@append@4:

; 979  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	83 ca ff	 or	 edx, -1
  00059	55		 push	 ebp
  0005a	8b 6c 24 18	 mov	 ebp, DWORD PTR __Count$[esp+12]
  0005e	2b d0		 sub	 edx, eax
  00060	3b d5		 cmp	 edx, ebp
  00062	76 07		 jbe	 SHORT $LN2@append@4
  00064	8d 0c 28	 lea	 ecx, DWORD PTR [eax+ebp]
  00067	3b c8		 cmp	 ecx, eax
  00069	73 05		 jae	 SHORT $LN3@append@4
$LN2@append@4:

; 980  : 			_String_base::_Xlen();	// result too long

  0006b	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@4:

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00070	85 ed		 test	 ebp, ebp
  00072	0f 86 87 00 00
	00		 jbe	 $LN92@append@4
  00078	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0007b	03 fd		 add	 edi, ebp
  0007d	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00080	76 05		 jbe	 SHORT $LN29@append@4
  00082	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN29@append@4:
  00087	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0008a	3b c7		 cmp	 eax, edi
  0008c	73 1f		 jae	 SHORT $LN28@append@4
  0008e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00091	52		 push	 edx
  00092	57		 push	 edi
  00093	8b ce		 mov	 ecx, esi
  00095	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0009a	85 ff		 test	 edi, edi
$LN95@append@4:
  0009c	76 61		 jbe	 SHORT $LN92@append@4

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

  0009e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000a1	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000a4	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a7	72 2e		 jb	 SHORT $LN76@append@4
  000a9	8b 13		 mov	 edx, DWORD PTR [ebx]
  000ab	eb 2c		 jmp	 SHORT $LN77@append@4

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN28@append@4:
  000ad	85 ff		 test	 edi, edi
  000af	75 eb		 jne	 SHORT $LN95@append@4
  000b1	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000b4	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b7	72 0f		 jb	 SHORT $LN70@append@4
  000b9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000bc	5d		 pop	 ebp
  000bd	5f		 pop	 edi
  000be	c6 00 00	 mov	 BYTE PTR [eax], 0

; 987  : 			}
; 988  : 		return (*this);

  000c1	8b c6		 mov	 eax, esi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx

; 989  : 		}

  000c5	c2 08 00	 ret	 8

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN70@append@4:
  000c8	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000cb	5d		 pop	 ebp
  000cc	5f		 pop	 edi
  000cd	c6 00 00	 mov	 BYTE PTR [eax], 0

; 987  : 			}
; 988  : 		return (*this);

  000d0	8b c6		 mov	 eax, esi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx

; 989  : 		}

  000d4	c2 08 00	 ret	 8

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

$LN76@append@4:
  000d7	8b d3		 mov	 edx, ebx
$LN77@append@4:
  000d9	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000dc	55		 push	 ebp
  000dd	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  000e1	2b c1		 sub	 eax, ecx
  000e3	55		 push	 ebp
  000e4	50		 push	 eax
  000e5	03 ca		 add	 ecx, edx
  000e7	51		 push	 ecx
  000e8	e8 00 00 00 00	 call	 _memcpy_s
  000ed	83 c4 10	 add	 esp, 16			; 00000010H

; 986  : 			_Eos(_Num);

  000f0	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000f4	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000f7	72 02		 jb	 SHORT $LN90@append@4
  000f9	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN90@append@4:
  000fb	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
$LN92@append@4:
  000ff	5d		 pop	 ebp
  00100	5f		 pop	 edi

; 987  : 			}
; 988  : 		return (*this);

  00101	8b c6		 mov	 eax, esi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx

; 989  : 		}

  00105	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	??1_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::~_Node
; Function compile flags: /Ogtpy
;	COMDAT ??1_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::~_Node, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??1Partition@CipherShed@@QAE@XZ
??1_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::~_Node
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 931  : 		return (append(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 932  : 		}

  0000e	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 970  : 		{	// append [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 971  : 
; 972  :  #if _HAS_ITERATOR_DEBUGGING
; 973  : 		if (_Count != 0)
; 974  : 			_DEBUG_POINTER(_Ptr);
; 975  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 976  : 
; 977  : 		if (_Inside(_Ptr))

  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00008	57		 push	 edi
  00009	85 c9		 test	 ecx, ecx
  0000b	74 49		 je	 SHORT $LN4@append@5
  0000d	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00010	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00013	83 ff 08	 cmp	 edi, 8
  00016	72 04		 jb	 SHORT $LN14@append@5
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	eb 02		 jmp	 SHORT $LN15@append@5
$LN14@append@5:
  0001c	8b d0		 mov	 edx, eax
$LN15@append@5:
  0001e	3b ca		 cmp	 ecx, edx
  00020	72 34		 jb	 SHORT $LN4@append@5
  00022	83 ff 08	 cmp	 edi, 8
  00025	72 04		 jb	 SHORT $LN18@append@5
  00027	8b 10		 mov	 edx, DWORD PTR [eax]
  00029	eb 02		 jmp	 SHORT $LN19@append@5
$LN18@append@5:
  0002b	8b d0		 mov	 edx, eax
$LN19@append@5:
  0002d	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00030	8d 14 5a	 lea	 edx, DWORD PTR [edx+ebx*2]
  00033	3b d1		 cmp	 edx, ecx
  00035	76 1f		 jbe	 SHORT $LN4@append@5

; 978  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

  00037	83 ff 08	 cmp	 edi, 8
  0003a	72 02		 jb	 SHORT $LN22@append@5
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN22@append@5:
  0003e	8b 54 24 14	 mov	 edx, DWORD PTR __Count$[esp+8]
  00042	2b c8		 sub	 ecx, eax
  00044	52		 push	 edx
  00045	d1 f9		 sar	 ecx, 1
  00047	51		 push	 ecx
  00048	56		 push	 esi
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx

; 989  : 		}

  00053	c2 08 00	 ret	 8
$LN4@append@5:

; 979  : 		if (npos - _Mysize <= _Count || _Mysize + _Count < _Mysize)

  00056	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00059	83 c9 ff	 or	 ecx, -1
  0005c	55		 push	 ebp
  0005d	8b 6c 24 18	 mov	 ebp, DWORD PTR __Count$[esp+12]
  00061	2b c8		 sub	 ecx, eax
  00063	3b cd		 cmp	 ecx, ebp
  00065	76 07		 jbe	 SHORT $LN2@append@5
  00067	8d 14 28	 lea	 edx, DWORD PTR [eax+ebp]
  0006a	3b d0		 cmp	 edx, eax
  0006c	73 05		 jae	 SHORT $LN3@append@5
$LN2@append@5:

; 980  : 			_String_base::_Xlen();	// result too long

  0006e	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN3@append@5:

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

  00073	85 ed		 test	 ebp, ebp
  00075	0f 86 95 00 00
	00		 jbe	 $LN96@append@5
  0007b	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0007e	03 fd		 add	 edi, ebp
  00080	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00086	76 05		 jbe	 SHORT $LN29@append@5
  00088	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@SAXXZ ; std::_String_base::_Xlen
$LN29@append@5:
  0008d	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00090	3b c7		 cmp	 eax, edi
  00092	73 1f		 jae	 SHORT $LN28@append@5
  00094	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00097	50		 push	 eax
  00098	57		 push	 edi
  00099	8b ce		 mov	 ecx, esi
  0009b	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  000a0	85 ff		 test	 edi, edi
$LN99@append@5:
  000a2	76 6c		 jbe	 SHORT $LN96@append@5

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

  000a4	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000a7	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  000aa	83 f8 08	 cmp	 eax, 8
  000ad	72 32		 jb	 SHORT $LN78@append@5
  000af	8b 13		 mov	 edx, DWORD PTR [ebx]
  000b1	eb 30		 jmp	 SHORT $LN79@append@5

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN28@append@5:
  000b3	85 ff		 test	 edi, edi
  000b5	75 eb		 jne	 SHORT $LN99@append@5
  000b7	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000ba	83 f8 08	 cmp	 eax, 8
  000bd	72 11		 jb	 SHORT $LN72@append@5
  000bf	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c2	5d		 pop	 ebp
  000c3	33 c9		 xor	 ecx, ecx
  000c5	5f		 pop	 edi
  000c6	66 89 08	 mov	 WORD PTR [eax], cx

; 987  : 			}
; 988  : 		return (*this);

  000c9	8b c6		 mov	 eax, esi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx

; 989  : 		}

  000cd	c2 08 00	 ret	 8

; 981  : 
; 982  : 		size_type _Num;
; 983  : 		if (0 < _Count && _Grow(_Num = _Mysize + _Count))

$LN72@append@5:
  000d0	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000d3	5d		 pop	 ebp
  000d4	33 c9		 xor	 ecx, ecx
  000d6	5f		 pop	 edi
  000d7	66 89 08	 mov	 WORD PTR [eax], cx

; 987  : 			}
; 988  : 		return (*this);

  000da	8b c6		 mov	 eax, esi
  000dc	5e		 pop	 esi
  000dd	5b		 pop	 ebx

; 989  : 		}

  000de	c2 08 00	 ret	 8

; 984  : 			{	// make room and append new stuff
; 985  : 			_Traits_helper::copy_s<_Traits>(_Myptr() + _Mysize, _Myres - _Mysize, _Ptr, _Count);

$LN78@append@5:
  000e1	8b d3		 mov	 edx, ebx
$LN79@append@5:
  000e3	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000e6	03 ed		 add	 ebp, ebp
  000e8	55		 push	 ebp
  000e9	8b 6c 24 18	 mov	 ebp, DWORD PTR __Ptr$[esp+16]
  000ed	2b c1		 sub	 eax, ecx
  000ef	55		 push	 ebp
  000f0	03 c0		 add	 eax, eax
  000f2	50		 push	 eax
  000f3	8d 14 4a	 lea	 edx, DWORD PTR [edx+ecx*2]
  000f6	52		 push	 edx
  000f7	e8 00 00 00 00	 call	 _memcpy_s
  000fc	83 c4 10	 add	 esp, 16			; 00000010H

; 986  : 			_Eos(_Num);

  000ff	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00103	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00106	72 02		 jb	 SHORT $LN94@append@5
  00108	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN94@append@5:
  0010a	33 c0		 xor	 eax, eax
  0010c	66 89 04 7b	 mov	 WORD PTR [ebx+edi*2], ax
$LN96@append@5:
  00110	5d		 pop	 ebp
  00111	5f		 pop	 edi

; 987  : 			}
; 988  : 		return (*this);

  00112	8b c6		 mov	 eax, esi
  00114	5e		 pop	 esi
  00115	5b		 pop	 ebx

; 989  : 		}

  00116	c2 08 00	 ret	 8
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 916  : 		return (assign(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 917  : 		}

  0000e	c2 04 00	 ret	 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1041 : 		return (assign(_Right, 0, npos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1042 : 		}

  0000e	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??_GHostDevice@@QAEPAXI@Z			; HostDevice::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_GHostDevice@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GHostDevice@@QAEPAXI@Z PROC				; HostDevice::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@20
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@20:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GHostDevice@@QAEPAXI@Z ENDP				; HostDevice::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 721  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 722  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 723  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 724  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 721  : 		{	// construct by copying _Right

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 722  : 		_Tidy();
; 723  : 		assign(_Right, 0, npos);

  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR __Right$[esp]
  00007	33 c0		 xor	 eax, eax
  00009	6a ff		 push	 -1
  0000b	50		 push	 eax
  0000c	51		 push	 ecx
  0000d	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	8b ce		 mov	 ecx, esi
  0001d	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 724  : 		}

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	?front@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::front
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?front@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@XZ
_TEXT	SEGMENT
?front@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::front, COMDAT
; _this$ = ecx

; 789  : 		{	// return first element of mutable sequence

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 790  : 		return (*begin());

  00004	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00007	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0000a	76 05		 jbe	 SHORT $LN9@front
  0000c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@front:
  00011	8b 36		 mov	 esi, DWORD PTR [esi]
  00013	85 f6		 test	 esi, esi
  00015	75 14		 jne	 SHORT $LN42@front
  00017	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN39@front:
  0001c	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0001f	72 05		 jb	 SHORT $LN43@front
  00021	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN43@front:
  00026	8b c7		 mov	 eax, edi
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 791  : 		}

  0002a	c3		 ret	 0
$LN42@front:

; 790  : 		return (*begin());

  0002b	8b 36		 mov	 esi, DWORD PTR [esi]
  0002d	eb ed		 jmp	 SHORT $LN39@front
?front@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::front
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1083 : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 1084 : 		_DEBUG_POINTER(_Ptr);
; 1085 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@assign@5:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@assign@5
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 1086 : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; Function compile flags: /Ogtpy
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1083 : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 1084 : 		_DEBUG_POINTER(_Ptr);
; 1085 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@assign@6:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL5@assign@6
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 1086 : 		}

  00028	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 638  : 		_Tidy();
; 639  : 		assign(_Ptr, _Count);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp]
  0000b	51		 push	 ecx
  0000c	33 c0		 xor	 eax, eax
  0000e	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00015	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001c	52		 push	 edx
  0001d	8b ce		 mov	 ecx, esi
  0001f	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00023	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 640  : 		}

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	c2 08 00	 ret	 8
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
_TEXT	SEGMENT
$T153626 = -44						; size = 4
$T153623 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 23   : 	{	// return string + string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 24   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 44 24 40	 mov	 eax, DWORD PTR __Left$[esp+52]
  00029	33 db		 xor	 ebx, ebx
  0002b	6a ff		 push	 -1
  0002d	53		 push	 ebx
  0002e	50		 push	 eax
  0002f	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T153623[esp+68]
  00033	89 5c 24 18	 mov	 DWORD PTR $T153626[esp+68], ebx
  00037	c7 44 24 34 0f
	00 00 00	 mov	 DWORD PTR $T153623[esp+92], 15 ; 0000000fH
  0003f	89 5c 24 30	 mov	 DWORD PTR $T153623[esp+88], ebx
  00043	88 5c 24 20	 mov	 BYTE PTR $T153623[esp+72], bl
  00047	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004c	8b 4c 24 44	 mov	 ecx, DWORD PTR __Right$[esp+52]
  00050	6a ff		 push	 -1
  00052	53		 push	 ebx
  00053	51		 push	 ecx
  00054	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T153623[esp+68]
  00058	89 5c 24 40	 mov	 DWORD PTR __$EHRec$[esp+76], ebx
  0005c	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00061	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00065	6a ff		 push	 -1
  00067	53		 push	 ebx
  00068	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0006f	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00072	50		 push	 eax
  00073	8b ce		 mov	 ecx, esi
  00075	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00078	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0007d	83 7c 24 28 10	 cmp	 DWORD PTR $T153623[esp+80], 16 ; 00000010H
  00082	72 0d		 jb	 SHORT $LN88@operator@13
  00084	8b 54 24 14	 mov	 edx, DWORD PTR $T153623[esp+60]
  00088	52		 push	 edx
  00089	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008e	83 c4 04	 add	 esp, 4
$LN88@operator@13:
  00091	8b c6		 mov	 eax, esi

; 25   : 	}

  00093	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  00097	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009e	59		 pop	 ecx
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	83 c4 2c	 add	 esp, 44			; 0000002cH
  000a4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T153623[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_G_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEPAXI@Z ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_G_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEPAXI@Z PROC ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00006	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ
  0000b	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00010	74 09		 je	 SHORT $LN6@scalar@21
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN6@scalar@21:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 04 00	 ret	 4
??_G_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEPAXI@Z ENDP ; std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 992  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 993  : 		_DEBUG_POINTER(_Ptr);
; 994  : 		return (append(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@append@6:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL5@append@6
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 995  : 		}

  00028	c2 04 00	 ret	 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 916  : 		return (assign(_Right));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	6a ff		 push	 -1
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 917  : 		}

  0000e	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??$_Destroy@UHostDevice@@@std@@YAXPAUHostDevice@@@Z ; std::_Destroy<HostDevice>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UHostDevice@@@std@@YAXPAUHostDevice@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UHostDevice@@@std@@YAXPAUHostDevice@@@Z PROC ; std::_Destroy<HostDevice>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
??$_Destroy@UHostDevice@@@std@@YAXPAUHostDevice@@@Z ENDP ; std::_Destroy<HostDevice>
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@std@@QAE@XZ:PROC			; std::exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0002d	33 c0		 xor	 eax, eax
  0002f	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00038	6a ff		 push	 -1
  0003a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0003d	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00044	50		 push	 eax
  00045	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  00049	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004c	8b 44 24 24	 mov	 eax, DWORD PTR __Message$[esp+28]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 27   : 		}

  00056	8b c6		 mov	 eax, esi
  00058	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5e		 pop	 esi
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogtpy
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 110  : 		}

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN21@length_err
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN21@length_err:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN24@scalar@22
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN24@scalar@22:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN34@scalar@22
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN34@scalar@22:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 153  : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0002d	33 c0		 xor	 eax, eax
  0002f	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00038	6a ff		 push	 -1
  0003a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0003d	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00044	50		 push	 eax
  00045	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  00049	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004c	8b 44 24 24	 mov	 eax, DWORD PTR __Message$[esp+28]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 154  : 		}

  00056	8b c6		 mov	 eax, esi
  00058	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5e		 pop	 esi
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::runtime_error::runtime_error
PUBLIC	?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
;	COMDAT ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T154577 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::locale::name, COMDAT
; _this$ = ecx

; 407  : 		{	// return locale name

  00000	51		 push	 ecx

; 408  : 		return (_Ptr->_Name);

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	56		 push	 esi
  00004	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00008	33 d2		 xor	 edx, edx
  0000a	6a ff		 push	 -1
  0000c	83 c0 18	 add	 eax, 24			; 00000018H
  0000f	52		 push	 edx
  00010	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00017	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0001a	50		 push	 eax
  0001b	8b ce		 mov	 ecx, esi
  0001d	89 54 24 10	 mov	 DWORD PTR $T154577[esp+20], edx
  00021	88 56 04	 mov	 BYTE PTR [esi+4], dl
  00024	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi

; 409  : 		}

  0002c	59		 pop	 ecx
  0002d	c2 04 00	 ret	 4
?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::locale::name
_TEXT	ENDS
PUBLIC	?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<wchar_t>::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	ENDS
;	COMDAT ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T154699 = -164						; size = 4
$T154693 = -160						; size = 4
$T154695 = -156						; size = 28
$T154694 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::ctype<wchar_t>::_Getcat, COMDAT

; 2031 : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2032 : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b bc 24 b8 00
	00 00		 mov	 edi, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T154699[esp+180], ebx
  00039	85 ff		 test	 edi, edi
  0003b	0f 84 9c 00 00
	00		 je	 $LN42@Getcat
  00041	39 1f		 cmp	 DWORD PTR [edi], ebx
  00043	0f 85 94 00 00
	00		 jne	 $LN42@Getcat

; 2033 : 			*_Ppf = _NEW_CRT ctype<_Elem>(
; 2034 : 				_Locinfo(_Ploc->name()));

  00049	6a 20		 push	 32			; 00000020H
  0004b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00050	8b f0		 mov	 esi, eax
  00052	83 c4 04	 add	 esp, 4
  00055	89 74 24 14	 mov	 DWORD PTR $T154693[esp+180], esi
  00059	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00060	85 f6		 test	 esi, esi
  00062	74 3c		 je	 SHORT $LN4@Getcat
  00064	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006b	8d 44 24 18	 lea	 eax, DWORD PTR $T154695[esp+180]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00075	50		 push	 eax
  00076	8d 4c 24 38	 lea	 ecx, DWORD PTR $T154694[esp+184]
  0007a	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00082	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T154699[esp+184], 1
  0008a	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  0008f	6a 00		 push	 0
  00091	50		 push	 eax
  00092	8b ce		 mov	 ecx, esi
  00094	bb 03 00 00 00	 mov	 ebx, 3
  00099	e8 00 00 00 00	 call	 ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z ; std::ctype<wchar_t>::ctype<wchar_t>
  0009e	eb 02		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  000a0	33 c0		 xor	 eax, eax
$LN5@Getcat:
  000a2	c7 84 24 b0 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 2
  000ad	89 07		 mov	 DWORD PTR [edi], eax
  000af	f6 c3 02	 test	 bl, 2
  000b2	74 10		 je	 SHORT $LN11@Getcat
  000b4	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000b7	8d 4c 24 34	 lea	 ecx, DWORD PTR $T154694[esp+180]
  000bb	89 5c 24 10	 mov	 DWORD PTR $T154699[esp+180], ebx
  000bf	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat:
  000c4	f6 c3 01	 test	 bl, 1
  000c7	74 14		 je	 SHORT $LN42@Getcat
  000c9	83 7c 24 30 10	 cmp	 DWORD PTR $T154695[esp+204], 16 ; 00000010H
  000ce	72 0d		 jb	 SHORT $LN42@Getcat
  000d0	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T154695[esp+184]
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000da	83 c4 04	 add	 esp, 4
$LN42@Getcat:

; 2035 : 		return (_X_CTYPE);

  000dd	b8 02 00 00 00	 mov	 eax, 2

; 2036 : 		}

  000e2	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f0	59		 pop	 ecx
  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  000fa	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T154693[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T154699[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T154699[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T154695[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat:
  0002f	c3		 ret	 0
__ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  0003a	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::ctype<wchar_t>::_Getcat
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::ios_base::failure::failure
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Efailure@ios_base@std@@UAEPAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD FLAT:??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfailure@ios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 00H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DD FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DD	FLAT:??_Efailure@ios_base@std@@UAEPAXI@Z
	DD	FLAT:?what@runtime_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::ios_base::failure::failure, COMDAT
; _this$ = ecx

; 220  : 			{	// construct with message

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@

; 221  : 			}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::ios_base::failure::failure
_TEXT	ENDS
PUBLIC	??1failure@ios_base@std@@UAE@XZ			; std::ios_base::failure::~failure
; Function compile flags: /Ogtpy
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1failure@ios_base@std@@UAE@XZ PROC			; std::ios_base::failure::~failure, COMDAT
; _this$ = ecx

; 224  : 			{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 225  : 			}

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN21@failure
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN21@failure:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1failure@ios_base@std@@UAE@XZ ENDP			; std::ios_base::failure::~failure
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfailure@ios_base@std@@UAEPAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $LN24@scalar@23
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN24@scalar@23:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	8b ce		 mov	 ecx, esi
  00029	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00031	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00036	74 09		 je	 SHORT $LN34@scalar@23
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003e	83 c4 04	 add	 esp, 4
$LN34@scalar@23:
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	c2 04 00	 ret	 4
??_Gfailure@ios_base@std@@UAEPAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 652  : 		_Tidy();
; 653  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$LL37@basic_stri@4:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL37@basic_stri@4
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 654  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 652  : 		_Tidy();
; 653  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c0		 xor	 eax, eax
  00009	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00010	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00017	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0001b	8b c2		 mov	 eax, edx
  0001d	57		 push	 edi
  0001e	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
$LL39@basic_stri@5:
  00021	66 8b 08	 mov	 cx, WORD PTR [eax]
  00024	83 c0 02	 add	 eax, 2
  00027	66 85 c9	 test	 cx, cx
  0002a	75 f5		 jne	 SHORT $LL39@basic_stri@5
  0002c	2b c7		 sub	 eax, edi
  0002e	d1 f8		 sar	 eax, 1
  00030	50		 push	 eax
  00031	52		 push	 edx
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00039	5f		 pop	 edi

; 654  : 		}

  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$3
__ehfuncinfo$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T155385 = -76						; size = 4
__Str$136723 = -72					; size = 28
__Str$136720 = -72					; size = 28
__Nul$136725 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str, COMDAT
; _this$ = ecx

; 60   : 		{	// return string copy of character array

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 40	 sub	 esp, 64			; 00000040H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 3c	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c4		 xor	 eax, esp
  00026	50		 push	 eax
  00027	8d 44 24 50	 lea	 eax, DWORD PTR __$EHRec$[esp+92]
  0002b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00031	8b c1		 mov	 eax, ecx

; 61   : 		if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)

  00033	8b 50 40	 mov	 edx, DWORD PTR [eax+64]
  00036	8b 74 24 60	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+88]
  0003a	33 ff		 xor	 edi, edi
  0003c	89 7c 24 10	 mov	 DWORD PTR $T155385[esp+92], edi
  00040	f6 c2 02	 test	 dl, 2
  00043	75 6e		 jne	 SHORT $LN4@str
  00045	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00048	39 39		 cmp	 DWORD PTR [ecx], edi
  0004a	74 67		 je	 SHORT $LN4@str

; 62   : 			{	// writable, make string from write buffer
; 63   : 			_Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()
; 64   : 				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());

  0004c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0004e	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  00051	3b d1		 cmp	 edx, ecx
  00053	72 02		 jb	 SHORT $LN8@str
  00055	8b ca		 mov	 ecx, edx
$LN8@str:
  00057	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0005a	8b 00		 mov	 eax, DWORD PTR [eax]
  0005c	2b c8		 sub	 ecx, eax
  0005e	d1 f9		 sar	 ecx, 1
  00060	51		 push	 ecx
  00061	33 d2		 xor	 edx, edx
  00063	bb 07 00 00 00	 mov	 ebx, 7
  00068	50		 push	 eax
  00069	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$136720[esp+100]
  0006d	89 5c 24 34	 mov	 DWORD PTR __Str$136720[esp+124], ebx
  00071	89 7c 24 30	 mov	 DWORD PTR __Str$136720[esp+120], edi
  00075	66 89 54 24 20	 mov	 WORD PTR __Str$136720[esp+104], dx
  0007a	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0007f	89 7c 24 58	 mov	 DWORD PTR __$EHRec$[esp+100], edi
$LN304@str:

; 65   : 			return (_Str);

  00083	6a ff		 push	 -1
  00085	57		 push	 edi
  00086	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$136720[esp+100]
  0008a	33 c0		 xor	 eax, eax
  0008c	51		 push	 ecx
  0008d	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  00090	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00093	8b ce		 mov	 ecx, esi
  00095	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00099	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0009e	83 7c 24 2c 08	 cmp	 DWORD PTR __Str$136720[esp+116], 8
  000a3	0f 82 9d 00 00
	00		 jb	 $LN292@str
  000a9	8b 54 24 18	 mov	 edx, DWORD PTR __Str$136720[esp+96]
  000ad	52		 push	 edx
  000ae	e9 8b 00 00 00	 jmp	 $LN303@str
$LN4@str:

; 66   : 			}
; 67   : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)

  000b3	f6 c2 04	 test	 dl, 4
  000b6	75 43		 jne	 SHORT $LN2@str
  000b8	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000bb	39 39		 cmp	 DWORD PTR [ecx], edi
  000bd	74 3c		 je	 SHORT $LN2@str

; 68   : 			{	// readable, make string from read buffer
; 69   : 			_Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());

  000bf	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000c1	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  000c4	8b 12		 mov	 edx, DWORD PTR [edx]
  000c6	8d 0c 51	 lea	 ecx, DWORD PTR [ecx+edx*2]
  000c9	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  000cc	8b 02		 mov	 eax, DWORD PTR [edx]
  000ce	2b c8		 sub	 ecx, eax
  000d0	d1 f9		 sar	 ecx, 1
  000d2	51		 push	 ecx
  000d3	33 d2		 xor	 edx, edx
  000d5	bb 07 00 00 00	 mov	 ebx, 7
  000da	50		 push	 eax
  000db	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Str$136723[esp+100]
  000df	89 5c 24 34	 mov	 DWORD PTR __Str$136723[esp+124], ebx
  000e3	89 7c 24 30	 mov	 DWORD PTR __Str$136723[esp+120], edi
  000e7	66 89 54 24 20	 mov	 WORD PTR __Str$136723[esp+104], dx
  000ec	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  000f1	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+100], 1

; 70   : 			return (_Str);

  000f9	eb 88		 jmp	 SHORT $LN304@str
$LN2@str:

; 71   : 			}
; 72   : 		else
; 73   : 			{	// inaccessible, return empty string
; 74   : 			_Mystr _Nul;

  000fb	bb 07 00 00 00	 mov	 ebx, 7
  00100	33 c0		 xor	 eax, eax
  00102	89 5c 24 48	 mov	 DWORD PTR __Nul$136725[esp+116], ebx
  00106	89 7c 24 44	 mov	 DWORD PTR __Nul$136725[esp+112], edi
  0010a	66 89 44 24 34	 mov	 WORD PTR __Nul$136725[esp+96], ax

; 75   : 			return (_Nul);

  0010f	6a ff		 push	 -1
  00111	33 c9		 xor	 ecx, ecx
  00113	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  00116	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00119	57		 push	 edi
  0011a	8d 54 24 38	 lea	 edx, DWORD PTR __Nul$136725[esp+100]
  0011e	66 89 4e 04	 mov	 WORD PTR [esi+4], cx
  00122	52		 push	 edx
  00123	8b ce		 mov	 ecx, esi
  00125	c7 44 24 64 02
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+112], 2
  0012d	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00132	83 7c 24 48 08	 cmp	 DWORD PTR __Nul$136725[esp+116], 8
  00137	72 0d		 jb	 SHORT $LN292@str
  00139	8b 44 24 34	 mov	 eax, DWORD PTR __Nul$136725[esp+96]
  0013d	50		 push	 eax
$LN303@str:
  0013e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00143	83 c4 04	 add	 esp, 4
$LN292@str:
  00146	8b c6		 mov	 eax, esi

; 76   : 			}
; 77   : 		}

  00148	8b 4c 24 50	 mov	 ecx, DWORD PTR __$EHRec$[esp+92]
  0014c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00153	59		 pop	 ecx
  00154	5f		 pop	 edi
  00155	5e		 pop	 esi
  00156	5b		 pop	 ebx
  00157	8b 4c 24 3c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+76]
  0015b	33 cc		 xor	 ecx, esp
  0015d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00162	83 c4 4c	 add	 esp, 76			; 0000004cH
  00165	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR __Str$136720[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$2:
  00008	8d 4d b8	 lea	 ecx, DWORD PTR __Str$136723[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ$3:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR __Nul$136725[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 b4	 lea	 eax, DWORD PTR [edx-76]
  0001f	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	83 c0 0c	 add	 eax, 12			; 0000000cH
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T156608 = -80						; size = 28
$T156607 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 44	 sub	 esp, 68			; 00000044H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 48	 lea	 eax, DWORD PTR __$EHRec$[esp+84]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

  00023	6a 12		 push	 18			; 00000012H
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0002a	8d 4c 24 0c	 lea	 ecx, DWORD PTR $T156608[esp+92]
  0002e	c7 44 24 24 0f
	00 00 00	 mov	 DWORD PTR $T156608[esp+116], 15 ; 0000000fH
  00036	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T156608[esp+112], 0
  0003e	c6 44 24 10 00	 mov	 BYTE PTR $T156608[esp+96], 0
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00048	8d 44 24 04	 lea	 eax, DWORD PTR $T156608[esp+84]
  0004c	50		 push	 eax
  0004d	8d 4c 24 24	 lea	 ecx, DWORD PTR $T156607[esp+88]
  00051	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+96], 0
  00059	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0005e	68 00 00 00 00	 push	 OFFSET __TI3?AVlength_error@std@@
  00063	8d 4c 24 24	 lea	 ecx, DWORD PTR $T156607[esp+88]
  00067	51		 push	 ecx
  00068	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR $T156607[esp+92], OFFSET ??_7length_error@std@@6B@
  00070	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN44@Xlen:
  00075	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T156608[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 bc	 lea	 eax, DWORD PTR [edx-68]
  0000f	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	8b 7c 24 20	 mov	 edi, DWORD PTR ___that$[esp+24]
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00033	33 d2		 xor	 edx, edx
  00035	6a ff		 push	 -1
  00037	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00040	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00043	52		 push	 edx
  00044	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0004b	89 51 14	 mov	 DWORD PTR [ecx+20], edx
  0004e	50		 push	 eax
  0004f	89 54 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], edx
  00053	88 51 04	 mov	 BYTE PTR [ecx+4], dl
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	8b c6		 mov	 eax, esi
  0005d	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00068	59		 pop	 ecx
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
;	COMDAT ?do_grouping@?$numpunct@_W@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T156889 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_grouping@?$numpunct@_W@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<wchar_t>::do_grouping, COMDAT
; _this$ = ecx

; 174  : 		{	// return grouping string

  00000	51		 push	 ecx

; 175  : 		return (string(_Grouping));

  00001	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00009	8b c1		 mov	 eax, ecx
  0000b	57		 push	 edi
  0000c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00013	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T156889[esp+12], 0
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL41@do_groupin:
  00030	8a 10		 mov	 dl, BYTE PTR [eax]
  00032	40		 inc	 eax
  00033	84 d2		 test	 dl, dl
  00035	75 f9		 jne	 SHORT $LL41@do_groupin
  00037	2b c7		 sub	 eax, edi
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00042	5f		 pop	 edi
  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi

; 176  : 		}

  00046	59		 pop	 ecx
  00047	c2 04 00	 ret	 4
?do_grouping@?$numpunct@_W@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<wchar_t>::do_grouping
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_falsename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T157039 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_falsename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::numpunct<wchar_t>::do_falsename, COMDAT
; _this$ = ecx

; 179  : 		{	// return name for false

  00000	51		 push	 ecx

; 180  : 		return (string_type(_Falsename));

  00001	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00009	33 c0		 xor	 eax, eax
  0000b	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00012	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00019	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0001d	8b c2		 mov	 eax, edx
  0001f	57		 push	 edi
  00020	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T157039[esp+12], 0
  00028	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0002b	eb 03 8d 49 00	 npad	 5
$LL43@do_falsena:
  00030	66 8b 08	 mov	 cx, WORD PTR [eax]
  00033	83 c0 02	 add	 eax, 2
  00036	66 85 c9	 test	 cx, cx
  00039	75 f5		 jne	 SHORT $LL43@do_falsena
  0003b	2b c7		 sub	 eax, edi
  0003d	d1 f8		 sar	 eax, 1
  0003f	50		 push	 eax
  00040	52		 push	 edx
  00041	8b ce		 mov	 ecx, esi
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00048	5f		 pop	 edi
  00049	8b c6		 mov	 eax, esi
  0004b	5e		 pop	 esi

; 181  : 		}

  0004c	59		 pop	 ecx
  0004d	c2 04 00	 ret	 4
?do_falsename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::numpunct<wchar_t>::do_falsename
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?do_truename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T157202 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_truename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::numpunct<wchar_t>::do_truename, COMDAT
; _this$ = ecx

; 184  : 		{	// return name for true

  00000	51		 push	 ecx

; 185  : 		return (string_type(_Truename));

  00001	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00009	33 c0		 xor	 eax, eax
  0000b	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00012	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00019	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0001d	8b c2		 mov	 eax, edx
  0001f	57		 push	 edi
  00020	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T157202[esp+12], 0
  00028	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0002b	eb 03 8d 49 00	 npad	 5
$LL43@do_truenam:
  00030	66 8b 08	 mov	 cx, WORD PTR [eax]
  00033	83 c0 02	 add	 eax, 2
  00036	66 85 c9	 test	 cx, cx
  00039	75 f5		 jne	 SHORT $LL43@do_truenam
  0003b	2b c7		 sub	 eax, edi
  0003d	d1 f8		 sar	 eax, 1
  0003f	50		 push	 eax
  00040	52		 push	 edx
  00041	8b ce		 mov	 ecx, esi
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00048	5f		 pop	 edi
  00049	8b c6		 mov	 eax, esi
  0004b	5e		 pop	 esi

; 186  : 		}

  0004c	59		 pop	 ecx
  0004d	c2 04 00	 ret	 4
?do_truename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::numpunct<wchar_t>::do_truename
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
PUBLIC	??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
EXTRN	??0bad_cast@std@@QAE@PBD@Z:PROC			; std::bad_cast::bad_cast
EXTRN	?id@?$ctype@_W@std@@2V0locale@2@A:DWORD		; std::ctype<wchar_t>::id
EXTRN	??1bad_cast@std@@UAE@XZ:PROC			; std::bad_cast::~bad_cast
EXTRN	??0bad_cast@std@@QAE@ABV01@@Z:PROC		; std::bad_cast::bad_cast
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
_BSS	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$137666 = -36					; size = 4
__Lock$157374 = -32					; size = 4
__Lock$137665 = -28					; size = 4
$T157367 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$157396 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<wchar_t> >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$137665[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A, 0 ; std::ctype<wchar_t>::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$137666[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$157374[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A, 0 ; std::ctype<wchar_t>::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A, eax ; std::ctype<wchar_t>::id
$LN10@use_facet:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$157374[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A ; std::ctype<wchar_t>::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet
$LN30@use_facet:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet
$LN20@use_facet:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet
$LN16@use_facet:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet
$LN31@use_facet:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet
$LN4@use_facet:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$137666[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<wchar_t>::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T157367[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T157367[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$137666[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$157396[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$157396[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$137665[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$137665[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<wchar_t> >
PUBLIC	??$_Destroy@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	e9 00 00 00 00	 jmp	 ??1Partition@CipherShed@@QAE@XZ
??$_Destroy@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>
_TEXT	ENDS
PUBLIC	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=, COMDAT
; _this$ = ecx

; 935  : 		{	// append [_Ptr, <null>)

  00000	56		 push	 esi

; 936  : 		return (append(_Ptr));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000b	eb 03 8d 49 00	 npad	 5
$LL7@operator@14:
  00010	66 8b 10	 mov	 dx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 d2	 test	 dx, dx
  00019	75 f5		 jne	 SHORT $LL7@operator@14
  0001b	2b c7		 sub	 eax, edi
  0001d	d1 f8		 sar	 eax, 1
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 937  : 		}

  00028	c2 04 00	 ret	 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
_TEXT	ENDS
PUBLIC	?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T157444 = -164						; size = 4
$T157438 = -160						; size = 4
$T157440 = -156						; size = 28
$T157439 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getcat, COMDAT

; 1030 : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	55		 push	 ebp
  00016	56		 push	 esi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1031 : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b ac 24 b8 00
	00 00		 mov	 ebp, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T157444[esp+180], ebx
  00039	85 ed		 test	 ebp, ebp
  0003b	0f 84 ac 00 00
	00		 je	 $LN50@Getcat@2
  00041	39 5d 00	 cmp	 DWORD PTR [ebp], ebx
  00044	0f 85 a3 00 00
	00		 jne	 $LN50@Getcat@2

; 1032 : 			*_Ppf = _NEW_CRT num_put<_Elem, _OutIt>(
; 1033 : 				_Locinfo(_Ploc->name()));

  0004a	6a 10		 push	 16			; 00000010H
  0004c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00051	8b f0		 mov	 esi, eax
  00053	83 c4 04	 add	 esp, 4
  00056	89 74 24 14	 mov	 DWORD PTR $T157438[esp+180], esi
  0005a	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00061	85 f6		 test	 esi, esi
  00063	74 4a		 je	 SHORT $LN4@Getcat@2
  00065	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006c	8d 44 24 18	 lea	 eax, DWORD PTR $T157440[esp+180]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00076	50		 push	 eax
  00077	8d 4c 24 38	 lea	 ecx, DWORD PTR $T157439[esp+184]
  0007b	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00083	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T157444[esp+184], 1
  0008b	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  00090	bb 03 00 00 00	 mov	 ebx, 3
  00095	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0009c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@
  000a2	e8 00 00 00 00	 call	 __Getcvt
  000a7	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000aa	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  000ad	eb 02		 jmp	 SHORT $LN5@Getcat@2
$LN4@Getcat@2:
  000af	33 f6		 xor	 esi, esi
$LN5@Getcat@2:
  000b1	c7 84 24 b0 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 2
  000bc	89 75 00	 mov	 DWORD PTR [ebp], esi
  000bf	f6 c3 02	 test	 bl, 2
  000c2	74 10		 je	 SHORT $LN11@Getcat@2
  000c4	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000c7	8d 4c 24 34	 lea	 ecx, DWORD PTR $T157439[esp+180]
  000cb	89 5c 24 10	 mov	 DWORD PTR $T157444[esp+180], ebx
  000cf	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat@2:
  000d4	f6 c3 01	 test	 bl, 1
  000d7	74 14		 je	 SHORT $LN50@Getcat@2
  000d9	83 7c 24 30 10	 cmp	 DWORD PTR $T157440[esp+204], 16 ; 00000010H
  000de	72 0d		 jb	 SHORT $LN50@Getcat@2
  000e0	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T157440[esp+184]
  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ea	83 c4 04	 add	 esp, 4
$LN50@Getcat@2:

; 1034 : 		return (_X_NUMERIC);

  000ed	b8 04 00 00 00	 mov	 eax, 4

; 1035 : 		}

  000f2	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00100	59		 pop	 ecx
  00101	5e		 pop	 esi
  00102	5d		 pop	 ebp
  00103	5b		 pop	 ebx
  00104	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  0010a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T157438[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T157444[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat@2
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T157444[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T157440[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat@2:
  0002f	c3		 ret	 0
__ehhandler$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  0003a	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getcat
PUBLIC	?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<wchar_t>::_Getcat
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__ehfuncinfo$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	03H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T157607 = -164						; size = 4
$T157601 = -160						; size = 4
$T157603 = -156						; size = 28
$T157602 = -128						; size = 116
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::numpunct<wchar_t>::_Getcat, COMDAT

; 112  : 		{	// return locale category mask and construct standard facet

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	50		 push	 eax
  0001f	8d 84 24 a8 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+180]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 113  : 		if (_Ppf != 0 && *_Ppf == 0)

  0002c	8b bc 24 b8 00
	00 00		 mov	 edi, DWORD PTR __Ppf$[esp+176]
  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 10	 mov	 DWORD PTR $T157607[esp+180], ebx
  00039	85 ff		 test	 edi, edi
  0003b	0f 84 ad 00 00
	00		 je	 $LN42@Getcat@3
  00041	39 1f		 cmp	 DWORD PTR [edi], ebx
  00043	0f 85 a5 00 00
	00		 jne	 $LN42@Getcat@3

; 114  : 			*_Ppf = _NEW_CRT numpunct<_Elem>(
; 115  : 				_Locinfo(_Ploc->name()), 0, true);

  00049	6a 18		 push	 24			; 00000018H
  0004b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00050	8b f0		 mov	 esi, eax
  00052	83 c4 04	 add	 esp, 4
  00055	89 74 24 14	 mov	 DWORD PTR $T157601[esp+180], esi
  00059	89 9c 24 b0 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+188], ebx
  00060	85 f6		 test	 esi, esi
  00062	74 4d		 je	 SHORT $LN4@Getcat@3
  00064	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __Ploc$[esp+176]
  0006b	8d 44 24 18	 lea	 eax, DWORD PTR $T157603[esp+180]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  00075	50		 push	 eax
  00076	8d 4c 24 38	 lea	 ecx, DWORD PTR $T157602[esp+184]
  0007a	c6 84 24 b4 00
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+192], 1
  00082	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR $T157607[esp+184], 1
  0008a	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Locinfo::_Locinfo
  0008f	6a 01		 push	 1
  00091	6a 00		 push	 0
  00093	bb 03 00 00 00	 mov	 ebx, 3
  00098	50		 push	 eax
  00099	8b ce		 mov	 ecx, esi
  0009b	c7 84 24 bc 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+200], 2
  000a6	89 5c 24 1c	 mov	 DWORD PTR $T157607[esp+192], ebx
  000aa	e8 00 00 00 00	 call	 ??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z ; std::numpunct<wchar_t>::numpunct<wchar_t>
  000af	eb 02		 jmp	 SHORT $LN5@Getcat@3
$LN4@Getcat@3:
  000b1	33 c0		 xor	 eax, eax
$LN5@Getcat@3:
  000b3	89 07		 mov	 DWORD PTR [edi], eax
  000b5	c7 84 24 b0 00
	00 00 03 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+188], 3
  000c0	f6 c3 02	 test	 bl, 2
  000c3	74 10		 je	 SHORT $LN11@Getcat@3
  000c5	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000c8	8d 4c 24 34	 lea	 ecx, DWORD PTR $T157602[esp+180]
  000cc	89 5c 24 10	 mov	 DWORD PTR $T157607[esp+180], ebx
  000d0	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN11@Getcat@3:
  000d5	f6 c3 01	 test	 bl, 1
  000d8	74 14		 je	 SHORT $LN42@Getcat@3
  000da	83 7c 24 30 10	 cmp	 DWORD PTR $T157603[esp+204], 16 ; 00000010H
  000df	72 0d		 jb	 SHORT $LN42@Getcat@3
  000e1	8b 4c 24 1c	 mov	 ecx, DWORD PTR $T157603[esp+184]
  000e5	51		 push	 ecx
  000e6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000eb	83 c4 04	 add	 esp, 4
$LN42@Getcat@3:

; 116  : 		return (_X_NUMERIC);

  000ee	b8 04 00 00 00	 mov	 eax, 4

; 117  : 		}

  000f3	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+180]
  000fa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00101	59		 pop	 ecx
  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx
  00105	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  0010b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR $T157601[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T157607[ebp]
  00014	83 e0 01	 and	 eax, 1
  00017	0f 84 12 00 00
	00		 je	 $LN8@Getcat@3
  0001d	83 a5 5c ff ff
	ff fe		 and	 DWORD PTR $T157607[ebp], -2 ; fffffffeH
  00024	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T157603[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat@3:
  0002f	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2:
  00030	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T157607[ebp]
  00036	83 e0 02	 and	 eax, 2
  00039	0f 84 0f 00 00
	00		 je	 $LN10@Getcat@3
  0003f	83 a5 5c ff ff
	ff fd		 and	 DWORD PTR $T157607[ebp], -3 ; fffffffdH
  00046	8d 4d 80	 lea	 ecx, DWORD PTR $T157602[ebp]
  00049	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN10@Getcat@3:
  0004e	c3		 ret	 0
__ehhandler$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0004f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00053	8d 82 5c ff ff
	ff		 lea	 eax, DWORD PTR [edx-164]
  00059	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  0005f	33 c8		 xor	 ecx, eax
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0006b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::numpunct<wchar_t>::_Getcat
PUBLIC	?destroy@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@@Z ; std::allocator<HostDevice>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@@Z PROC ; std::allocator<HostDevice>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice

; 161  : 		}

  00009	c2 04 00	 ret	 4
?destroy@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@@Z ENDP ; std::allocator<HostDevice>::destroy
_TEXT	ENDS
PUBLIC	??0HostDevice@@QAE@ABU0@@Z			; HostDevice::HostDevice
PUBLIC	??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$7
__unwindtable$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T158128 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Vptr$158134 = 8					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

  0002b	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 128  : 
; 129  : 	_TRY_BEGIN

  0002e	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00031	33 db		 xor	 ebx, ebx
  00033	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL6@Uninit_cop:

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

  00040	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  00043	74 55		 je	 SHORT $LN4@Uninit_cop

; 131  : 		_Al.construct(_Dest, *_First);

  00045	89 75 08	 mov	 DWORD PTR __Vptr$158134[ebp], esi
  00048	89 75 e8	 mov	 DWORD PTR $T158128[ebp], esi
  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004f	3b f3		 cmp	 esi, ebx
  00051	74 08		 je	 SHORT $LN18@Uninit_cop
  00053	57		 push	 edi
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN18@Uninit_cop:
  0005b	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00061	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00064	89 75 10	 mov	 DWORD PTR __Dest$[ebp], esi
  00067	81 c7 88 00 00
	00		 add	 edi, 136		; 00000088H
  0006d	eb d1		 jmp	 SHORT $LL6@Uninit_cop
__catch$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00072	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00075	3b f7		 cmp	 esi, edi
  00077	74 18		 je	 SHORT $LN1@Uninit_cop
  00079	8d a4 24 00 00
	00 00		 npad	 7
$LL3@Uninit_cop:

; 134  : 		_Al.destroy(_Next);

  00080	8b ce		 mov	 ecx, esi
  00082	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00087	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0008d	3b f7		 cmp	 esi, edi
  0008f	75 ef		 jne	 SHORT $LL3@Uninit_cop
$LN1@Uninit_cop:

; 135  : 	_RERAISE;

  00091	33 db		 xor	 ebx, ebx
  00093	53		 push	 ebx
  00094	53		 push	 ebx
  00095	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Uninit_cop:

; 136  : 	_CATCH_END
; 137  : 	return (_Dest);

  0009a	8b c6		 mov	 eax, esi

; 138  : 	}

  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
$LN121@Uninit_cop:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Vptr$158134[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T158128[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ ; `string'
PUBLIC	__TI3?AVfailure@ios_base@std@@
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@	; `string'
PUBLIC	?clear@ios_base@std@@QAEXH_N@Z			; std::ios_base::clear
PUBLIC	__CTA3?AVfailure@ios_base@std@@
PUBLIC	__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40
PUBLIC	??0failure@ios_base@std@@QAE@ABV012@@Z		; std::ios_base::failure::failure
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40
xdata$x	SEGMENT
__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40 DD 00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0failure@ios_base@std@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__CTA3?AVfailure@ios_base@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z40
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ DB 'ios_base::failbit se'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT __TI3?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__TI3?AVfailure@ios_base@std@@ DD 00H
	DD	FLAT:??1failure@ios_base@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@ DB 'ios_base::badbit set', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?clear@ios_base@std@@QAEXH_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$2
__ehfuncinfo$?clear@ios_base@std@@QAEXH_N@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?clear@ios_base@std@@QAEXH_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?clear@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT
$T158170 = -148						; size = 40
$T158168 = -148						; size = 40
$T158171 = -108						; size = 28
$T158169 = -108						; size = 28
$T158172 = -80						; size = 40
$T158173 = -40						; size = 28
__$EHRec$ = -12						; size = 12
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@ios_base@std@@QAEXH_N@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 285  :         {	// set state, possibly reraise exception

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?clear@ios_base@std@@QAEXH_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 84 24 8c 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+152]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 286  :         _Mystate = (iostate)(_State & _Statmask);

  00029	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR __State$[esp+148]
  00030	83 e0 17	 and	 eax, 23			; 00000017H
  00033	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 287  :         if ((_Mystate & _Except) == 0)

  00036	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00039	23 c8		 and	 ecx, eax
  0003b	0f 84 d7 00 00
	00		 je	 $LN1@clear

; 288  :             ;
; 289  :         else if (_Reraise)

  00041	80 bc 24 a0 00
	00 00 00	 cmp	 BYTE PTR __Reraise$[esp+148], 0
  00049	74 09		 je	 SHORT $LN6@clear

; 290  :             _RERAISE;

  0004b	6a 00		 push	 0
  0004d	6a 00		 push	 0
  0004f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN6@clear:

; 291  :         else if (_Mystate & _Except & badbit)

  00054	f6 c1 04	 test	 cl, 4
  00057	74 3e		 je	 SHORT $LN4@clear

; 292  :             _THROW_NCEE(failure, "ios_base::badbit set");

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
  0005e	8d 4c 24 30	 lea	 ecx, DWORD PTR $T158169[esp+156]
  00062	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00067	8d 44 24 2c	 lea	 eax, DWORD PTR $T158169[esp+152]
  0006b	50		 push	 eax
  0006c	8d 4c 24 08	 lea	 ecx, DWORD PTR $T158168[esp+156]
  00070	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+164], 0
  0007b	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  00080	68 00 00 00 00	 push	 OFFSET __TI3?AVfailure@ios_base@std@@
  00085	8d 4c 24 08	 lea	 ecx, DWORD PTR $T158168[esp+156]
  00089	51		 push	 ecx
  0008a	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T158168[esp+160], OFFSET ??_7failure@ios_base@std@@6B@
  00092	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@clear:

; 293  :         else if (_Mystate & _Except & failbit)

  00097	f6 c1 02	 test	 cl, 2
  0009a	74 3e		 je	 SHORT $LN2@clear

; 294  :             _THROW_NCEE(failure, "ios_base::failbit set");

  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  000a1	8d 4c 24 30	 lea	 ecx, DWORD PTR $T158171[esp+156]
  000a5	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000aa	8d 54 24 2c	 lea	 edx, DWORD PTR $T158171[esp+152]
  000ae	52		 push	 edx
  000af	8d 4c 24 08	 lea	 ecx, DWORD PTR $T158170[esp+156]
  000b3	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+164], 1
  000be	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  000c3	68 00 00 00 00	 push	 OFFSET __TI3?AVfailure@ios_base@std@@
  000c8	8d 44 24 08	 lea	 eax, DWORD PTR $T158170[esp+156]
  000cc	50		 push	 eax
  000cd	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T158170[esp+160], OFFSET ??_7failure@ios_base@std@@6B@
  000d5	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@clear:

; 295  :         else
; 296  :             _THROW_NCEE(failure, "ios_base::eofbit set");

  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  000df	8d 4c 24 74	 lea	 ecx, DWORD PTR $T158173[esp+156]
  000e3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000e8	8d 4c 24 70	 lea	 ecx, DWORD PTR $T158173[esp+152]
  000ec	51		 push	 ecx
  000ed	8d 4c 24 4c	 lea	 ecx, DWORD PTR $T158172[esp+156]
  000f1	c7 84 24 98 00
	00 00 02 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+164], 2
  000fc	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  00101	68 00 00 00 00	 push	 OFFSET __TI3?AVfailure@ios_base@std@@
  00106	8d 54 24 4c	 lea	 edx, DWORD PTR $T158172[esp+156]
  0010a	52		 push	 edx
  0010b	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR $T158172[esp+160], OFFSET ??_7failure@ios_base@std@@6B@
  00113	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@clear:

; 297  :         }

  00118	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+152]
  0011f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00126	59		 pop	 ecx
  00127	81 c4 94 00 00
	00		 add	 esp, 148		; 00000094H
  0012d	c2 08 00	 ret	 8
$LN24@clear:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$0:
  00000	8d 4d 94	 lea	 ecx, DWORD PTR $T158169[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$1:
  00008	8d 4d 94	 lea	 ecx, DWORD PTR $T158171[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$2:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR $T158173[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?clear@ios_base@std@@QAEXH_N@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 82 78 ff ff
	ff		 lea	 eax, DWORD PTR [edx-136]
  00022	8b 8a 74 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-140]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@ios_base@std@@QAEXH_N@Z
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@ios_base@std@@QAEXH_N@Z ENDP			; std::ios_base::clear
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0runtime_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00029	8b 7c 24 20	 mov	 edi, DWORD PTR ___that$[esp+24]
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00033	33 d2		 xor	 edx, edx
  00035	6a ff		 push	 -1
  00037	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00040	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00043	52		 push	 edx
  00044	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0004b	89 51 14	 mov	 DWORD PTR [ecx+20], edx
  0004e	50		 push	 eax
  0004f	89 54 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], edx
  00053	88 51 04	 mov	 BYTE PTR [ecx+4], dl
  00056	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005b	8b c6		 mov	 eax, esi
  0005d	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00068	59		 pop	 ecx
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0runtime_error@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
; Function compile flags: /Ogtpy
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV012@@Z ENDP		; std::ios_base::failure::failure
_TEXT	ENDS
PUBLIC	?clear@ios_base@std@@QAEXH@Z			; std::ios_base::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@ios_base@std@@QAEXH@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
?clear@ios_base@std@@QAEXH@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 301  : 		clear(_State, false);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __State$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 302  : 		}

  0000c	c2 04 00	 ret	 4
?clear@ios_base@std@@QAEXH@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
PUBLIC	?_Init@ios_base@std@@IAEXXZ			; std::ios_base::_Init
; Function compile flags: /Ogtpy
;	COMDAT ?_Init@ios_base@std@@IAEXXZ
_TEXT	SEGMENT
__Lock$158342 = -4					; size = 4
?_Init@ios_base@std@@IAEXXZ PROC			; std::ios_base::_Init, COMDAT
; _this$ = ecx

; 515  :         {	// initialize a new ios_base

  00000	51		 push	 ecx
  00001	55		 push	 ebp

; 516  :         _Ploc = 0;

  00002	33 ed		 xor	 ebp, ebp
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 517  :         _Stdstr = 0;
; 518  :         _Except = goodbit;
; 519  :         _Fmtfl = skipws | dec;
; 520  :         _Prec = 6;
; 521  :         _Wide = 0;
; 522  :         _Arr = 0;
; 523  :         _Calls = 0;
; 524  :         clear(goodbit);

  00008	55		 push	 ebp
  00009	55		 push	 ebp
  0000a	89 6e 24	 mov	 DWORD PTR [esi+36], ebp
  0000d	89 6e 04	 mov	 DWORD PTR [esi+4], ebp
  00010	89 6e 0c	 mov	 DWORD PTR [esi+12], ebp
  00013	c7 46 10 01 02
	00 00		 mov	 DWORD PTR [esi+16], 513	; 00000201H
  0001a	c7 46 14 06 00
	00 00		 mov	 DWORD PTR [esi+20], 6
  00021	89 6e 18	 mov	 DWORD PTR [esi+24], ebp
  00024	89 6e 1c	 mov	 DWORD PTR [esi+28], ebp
  00027	89 6e 20	 mov	 DWORD PTR [esi+32], ebp
  0002a	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 525  :         _Ploc = _NEW_CRT locale;

  0002f	6a 04		 push	 4
  00031	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00036	8b f8		 mov	 edi, eax
  00038	83 c4 04	 add	 esp, 4
  0003b	3b fd		 cmp	 edi, ebp
  0003d	74 37		 je	 SHORT $LN3@Init@3
  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Init
  00045	89 07		 mov	 DWORD PTR [edi], eax
  00047	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0004c	55		 push	 ebp
  0004d	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$158342[esp+24]
  00051	8b d8		 mov	 ebx, eax
  00053	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00058	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0005b	83 f8 ff	 cmp	 eax, -1
  0005e	73 04		 jae	 SHORT $LN9@Init@3
  00060	40		 inc	 eax
  00061	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN9@Init@3:
  00064	8d 4c 24 10	 lea	 ecx, DWORD PTR __Lock$158342[esp+20]
  00068	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0006d	5b		 pop	 ebx
  0006e	89 7e 24	 mov	 DWORD PTR [esi+36], edi
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5d		 pop	 ebp

; 526  :         }

  00074	59		 pop	 ecx
  00075	c3		 ret	 0
$LN3@Init@3:
  00076	5f		 pop	 edi

; 525  :         _Ploc = _NEW_CRT locale;

  00077	89 6e 24	 mov	 DWORD PTR [esi+36], ebp
  0007a	5e		 pop	 esi
  0007b	5d		 pop	 ebp

; 526  :         }

  0007c	59		 pop	 ecx
  0007d	c3		 ret	 0
?_Init@ios_base@std@@IAEXXZ ENDP			; std::ios_base::_Init
_TEXT	ENDS
PUBLIC	??_C@_0P@NDJDHMAP@UAC_INIT_ERROR?$AA@		; `string'
PUBLIC	??_C@_05KPBLJGDL@runas?$AA@			; `string'
PUBLIC	??_C@_07MDDLOGBN@?1q?5UAC?5?$AA@		; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp__ShellExecuteA@24:PROC
EXTRN	__imp__GetModuleFileNameA@12:PROC
;	COMDAT ??_C@_0P@NDJDHMAP@UAC_INIT_ERROR?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0P@NDJDHMAP@UAC_INIT_ERROR?$AA@ DB 'UAC_INIT_ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05KPBLJGDL@runas?$AA@
CONST	SEGMENT
??_C@_05KPBLJGDL@runas?$AA@ DB 'runas', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MDDLOGBN@?1q?5UAC?5?$AA@
CONST	SEGMENT
??_C@_07MDDLOGBN@?1q?5UAC?5?$AA@ DB '/q UAC ', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
__ehfuncinfo$?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\format\tcformat.c
xdata$x	ENDS
;	COMDAT ?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T158350 = -333						; size = 1
$T158351 = -332						; size = 28
$T158352 = -304						; size = 28
_modPath$ = -276					; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_arguments$ = 8						; size = 28
?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; ElevateWholeWizardProcess, COMDAT

; 260  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	89 84 24 40 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+336], eax
  00022	53		 push	 ebx
  00023	56		 push	 esi
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c4		 xor	 eax, esp
  0002b	50		 push	 eax
  0002c	8d 84 24 50 01
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+348]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	33 db		 xor	 ebx, ebx
  0003b	89 9c 24 58 01
	00 00		 mov	 DWORD PTR __$EHRec$[esp+356], ebx

; 261  : 	char modPath[MAX_PATH];
; 262  : 
; 263  : 	if (IsAdmin())

  00042	e8 00 00 00 00	 call	 _IsAdmin
  00047	85 c0		 test	 eax, eax
  00049	74 24		 je	 SHORT $LN4@ElevateWho

; 264  : 		return TRUE;

  0004b	83 bc 24 78 01
	00 00 10	 cmp	 DWORD PTR _arguments$[esp+368], 16 ; 00000010H
  00053	72 10		 jb	 SHORT $LN26@ElevateWho
  00055	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR _arguments$[esp+348]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00062	83 c4 04	 add	 esp, 4
$LN26@ElevateWho:
  00065	b8 01 00 00 00	 mov	 eax, 1
  0006a	e9 23 01 00 00	 jmp	 $LN5@ElevateWho
$LN4@ElevateWho:

; 265  : 
; 266  : 	if (!IsUacSupported())

  0006f	e8 00 00 00 00	 call	 _IsUacSupported
  00074	85 c0		 test	 eax, eax
  00076	75 28		 jne	 SHORT $LN3@ElevateWho

; 267  : 		return IsAdmin();

  00078	e8 00 00 00 00	 call	 _IsAdmin
  0007d	83 bc 24 78 01
	00 00 10	 cmp	 DWORD PTR _arguments$[esp+368], 16 ; 00000010H
  00085	8b f0		 mov	 esi, eax
  00087	72 10		 jb	 SHORT $LN52@ElevateWho
  00089	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR _arguments$[esp+348]
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00096	83 c4 04	 add	 esp, 4
$LN52@ElevateWho:
  00099	8b c6		 mov	 eax, esi
  0009b	e9 f2 00 00 00	 jmp	 $LN5@ElevateWho
$LN3@ElevateWho:

; 268  : 
; 269  : 	GetModuleFileName (NULL, modPath, sizeof (modPath));

  000a0	68 04 01 00 00	 push	 260			; 00000104H
  000a5	8d 54 24 4c	 lea	 edx, DWORD PTR _modPath$[esp+352]
  000a9	52		 push	 edx
  000aa	53		 push	 ebx
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12

; 270  : 
; 271  : 	if ((int)ShellExecute (MainDlg, "runas", modPath, (string("/q UAC ") + arguments).c_str(), NULL, SW_SHOWNORMAL) > 32)

  000b1	6a 07		 push	 7
  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_07MDDLOGBN@?1q?5UAC?5?$AA@
  000b8	8d 4c 24 18	 lea	 ecx, DWORD PTR $T158351[esp+356]
  000bc	c7 44 24 30 0f
	00 00 00	 mov	 DWORD PTR $T158351[esp+380], 15 ; 0000000fH
  000c4	89 5c 24 2c	 mov	 DWORD PTR $T158351[esp+376], ebx
  000c8	88 5c 24 1c	 mov	 BYTE PTR $T158351[esp+360], bl
  000cc	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000d1	8d 84 24 60 01
	00 00		 lea	 eax, DWORD PTR _arguments$[esp+344]
  000d8	50		 push	 eax
  000d9	8d 4c 24 14	 lea	 ecx, DWORD PTR $T158351[esp+352]
  000dd	51		 push	 ecx
  000de	8d 54 24 34	 lea	 edx, DWORD PTR $T158352[esp+356]
  000e2	52		 push	 edx
  000e3	c6 84 24 64 01
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+368], 1
  000eb	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000f0	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  000f5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f8	39 70 18	 cmp	 DWORD PTR [eax+24], esi
  000fb	72 05		 jb	 SHORT $LN102@ElevateWho
  000fd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00100	eb 03		 jmp	 SHORT $LN103@ElevateWho
$LN102@ElevateWho:
  00102	83 c0 04	 add	 eax, 4
$LN103@ElevateWho:
  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0010b	6a 01		 push	 1
  0010d	53		 push	 ebx
  0010e	50		 push	 eax
  0010f	8d 44 24 54	 lea	 eax, DWORD PTR _modPath$[esp+360]
  00113	50		 push	 eax
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_05KPBLJGDL@runas?$AA@
  00119	51		 push	 ecx
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24
  00120	83 f8 20	 cmp	 eax, 32			; 00000020H
  00123	0f 9f 44 24 0f	 setg	 BYTE PTR $T158350[esp+348]
  00128	39 74 24 44	 cmp	 DWORD PTR $T158352[esp+372], esi
  0012c	72 0d		 jb	 SHORT $LN120@ElevateWho
  0012e	8b 54 24 30	 mov	 edx, DWORD PTR $T158352[esp+352]
  00132	52		 push	 edx
  00133	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00138	83 c4 04	 add	 esp, 4
$LN120@ElevateWho:
  0013b	c7 44 24 44 0f
	00 00 00	 mov	 DWORD PTR $T158352[esp+372], 15 ; 0000000fH
  00143	89 5c 24 40	 mov	 DWORD PTR $T158352[esp+368], ebx
  00147	88 5c 24 30	 mov	 BYTE PTR $T158352[esp+352], bl
  0014b	39 74 24 28	 cmp	 DWORD PTR $T158351[esp+372], esi
  0014f	72 0d		 jb	 SHORT $LN146@ElevateWho
  00151	8b 44 24 14	 mov	 eax, DWORD PTR $T158351[esp+352]
  00155	50		 push	 eax
  00156	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0015b	83 c4 04	 add	 esp, 4
$LN146@ElevateWho:
  0015e	38 5c 24 0f	 cmp	 BYTE PTR $T158350[esp+348], bl
  00162	74 06		 je	 SHORT $LN2@ElevateWho

; 272  : 	{				
; 273  : 		exit (0);

  00164	53		 push	 ebx
  00165	e8 00 00 00 00	 call	 _exit
$LN2@ElevateWho:

; 274  : 	}
; 275  : 	else
; 276  : 	{
; 277  : 		Error ("UAC_INIT_ERROR");

  0016a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NDJDHMAP@UAC_INIT_ERROR?$AA@
  0016f	e8 00 00 00 00	 call	 _Error
  00174	83 c4 04	 add	 esp, 4

; 278  : 		return FALSE;

  00177	39 b4 24 78 01
	00 00		 cmp	 DWORD PTR _arguments$[esp+368], esi
  0017e	72 10		 jb	 SHORT $LN172@ElevateWho
  00180	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR _arguments$[esp+348]
  00187	51		 push	 ecx
  00188	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0018d	83 c4 04	 add	 esp, 4
$LN172@ElevateWho:
  00190	33 c0		 xor	 eax, eax
$LN5@ElevateWho:

; 279  : 	}
; 280  : }

  00192	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+348]
  00199	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a0	59		 pop	 ecx
  001a1	5e		 pop	 esi
  001a2	5b		 pop	 ebx
  001a3	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+336]
  001aa	33 cc		 xor	 ecx, esp
  001ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b1	81 c4 50 01 00
	00		 add	 esp, 336		; 00000150H
  001b7	c3		 ret	 0
$LN183@ElevateWho:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d 04	 lea	 ecx, DWORD PTR _arguments$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00008	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR $T158351[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 82 b4 fe ff
	ff		 lea	 eax, DWORD PTR [edx-332]
  0001d	8b 8a b0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-336]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	83 c0 08	 add	 eax, 8
  0002d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; ElevateWholeWizardProcess
PUBLIC	??_C@_02CLCFLINC@?1e?$AA@			; `string'
EXTRN	_CloseSysEncMutex:PROC
;	COMDAT ??_C@_02CLCFLINC@?1e?$AA@
CONST	SEGMENT
??_C@_02CLCFLINC@?1e?$AA@ DB '/e', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?ChangeWizardMode@@YAHH@Z
_TEXT	SEGMENT
$T159074 = -4						; size = 4
?ChangeWizardMode@@YAHH@Z PROC				; ChangeWizardMode, COMDAT
; _newWizardMode$ = esi

; 556  : {

  00000	51		 push	 ecx

; 557  : 	if (WizardMode != newWizardMode)	

  00001	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  00006	53		 push	 ebx
  00007	3b c6		 cmp	 eax, esi
  00009	0f 84 a1 00 00
	00		 je	 $LN9@ChangeWiza

; 558  : 	{
; 559  : 		if (WizardMode == WIZARD_MODE_SYS_DEVICE || newWizardMode == WIZARD_MODE_SYS_DEVICE)

  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  00015	83 f9 02	 cmp	 ecx, 2
  00018	74 07		 je	 SHORT $LN7@ChangeWiza
  0001a	83 fe 02	 cmp	 esi, 2
  0001d	75 27		 jne	 SHORT $LN8@ChangeWiza

; 560  : 		{
; 561  : 			if (newWizardMode == WIZARD_MODE_SYS_DEVICE)

  0001f	eb 05		 jmp	 SHORT $LN14@ChangeWiza
$LN7@ChangeWiza:
  00021	83 fe 02	 cmp	 esi, 2
  00024	75 1b		 jne	 SHORT $LN5@ChangeWiza
$LN14@ChangeWiza:

; 562  : 			{
; 563  : 				if (!CreateSysEncMutex ())

  00026	e8 00 00 00 00	 call	 _CreateSysEncMutex
  0002b	85 c0		 test	 eax, eax
  0002d	75 12		 jne	 SHORT $LN5@ChangeWiza

; 564  : 				{
; 565  : 					Error ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  00034	e8 00 00 00 00	 call	 _Error
  00039	83 c4 04	 add	 esp, 4
$LN15@ChangeWiza:

; 566  : 					return FALSE;

  0003c	33 c0		 xor	 eax, eax

; 603  : }

  0003e	5b		 pop	 ebx
  0003f	59		 pop	 ecx
  00040	c3		 ret	 0
$LN5@ChangeWiza:

; 567  : 				}
; 568  : 			}
; 569  : 
; 570  : 			// If the previous mode was different, the password may have been typed using a different
; 571  : 			// keyboard layout (which might confuse the user and cause other problems if system encryption
; 572  : 			// was or will be involved).
; 573  : 			WipePasswordsAndKeyfiles();	

  00041	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
$LN8@ChangeWiza:

; 574  : 		}
; 575  : 
; 576  : 		if (newWizardMode != WIZARD_MODE_NONSYS_DEVICE)

  00046	33 db		 xor	 ebx, ebx
  00048	83 fe 01	 cmp	 esi, 1
  0004b	74 08		 je	 SHORT $LN13@ChangeWiza

; 577  : 			bInPlaceEncNonSys = FALSE;

  0004d	89 1d 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, ebx

; 578  : 
; 579  : 		if (newWizardMode == WIZARD_MODE_NONSYS_DEVICE && !IsAdmin() && IsUacSupported())

  00053	eb 31		 jmp	 SHORT $LN2@ChangeWiza
$LN13@ChangeWiza:
  00055	e8 00 00 00 00	 call	 _IsAdmin
  0005a	85 c0		 test	 eax, eax
  0005c	75 28		 jne	 SHORT $LN2@ChangeWiza
  0005e	e8 00 00 00 00	 call	 _IsUacSupported
  00063	85 c0		 test	 eax, eax
  00065	74 1f		 je	 SHORT $LN2@ChangeWiza

; 580  : 		{
; 581  : 			if (!ElevateWholeWizardProcess ("/e"))

  00067	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0006a	8b cc		 mov	 ecx, esp
  0006c	89 64 24 20	 mov	 DWORD PTR $T159074[esp+36], esp
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_02CLCFLINC@?1e?$AA@
  00075	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0007a	e8 00 00 00 00	 call	 ?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ElevateWholeWizardProcess
  0007f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00082	3b c3		 cmp	 eax, ebx

; 582  : 				return FALSE;

  00084	74 b6		 je	 SHORT $LN15@ChangeWiza
$LN2@ChangeWiza:

; 583  : 		}
; 584  : 
; 585  : 		// The contents of the following items may be inappropriate after a change of mode
; 586  : 		szFileName[0] = 0;

  00086	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szFileName@@3PADA, bl

; 587  : 		szDiskFile[0] = 0;

  0008c	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szDiskFile@@3PADA, bl

; 588  : 		nUIVolumeSize = 0;

  00092	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, ebx
  00098	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx

; 589  : 		nVolumeSize = 0;

  0009e	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, ebx
  000a4	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ebx

; 590  : 
; 591  : 		WizardMode = newWizardMode;

  000aa	89 35 00 00 00
	00		 mov	 DWORD PTR _WizardMode, esi
$LN9@ChangeWiza:

; 592  : 	}
; 593  : 
; 594  : 	bDevice = (WizardMode != WIZARD_MODE_FILE_CONTAINER);

  000b0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  000b6	f7 da		 neg	 edx
  000b8	1b d2		 sbb	 edx, edx
  000ba	f7 da		 neg	 edx
  000bc	89 15 00 00 00
	00		 mov	 DWORD PTR ?bDevice@@3HA, edx ; bDevice

; 595  : 
; 596  : 	if (newWizardMode != WIZARD_MODE_SYS_DEVICE 
; 597  : 		&& !bHiddenOS)

  000c2	83 fe 02	 cmp	 esi, 2
  000c5	74 0e		 je	 SHORT $LN1@ChangeWiza
  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  000cc	85 c0		 test	 eax, eax
  000ce	75 05		 jne	 SHORT $LN1@ChangeWiza

; 598  : 	{
; 599  : 		CloseSysEncMutex ();	

  000d0	e8 00 00 00 00	 call	 _CloseSysEncMutex
$LN1@ChangeWiza:

; 600  : 	}
; 601  : 
; 602  : 	return TRUE;

  000d5	b8 01 00 00 00	 mov	 eax, 1

; 603  : }

  000da	5b		 pop	 ebx
  000db	59		 pop	 ecx
  000dc	c3		 ret	 0
?ChangeWizardMode@@YAHH@Z ENDP				; ChangeWizardMode
_TEXT	ENDS
PUBLIC	??_C@_0BD@LGCKNJIO@COMMAND_LINE_ERROR?$AA@	; `string'
PUBLIC	??_C@_02KAJCLHKP@no?$AA@			; `string'
PUBLIC	??_C@_01EFFIKLCJ@n?$AA@				; `string'
PUBLIC	??_C@_03ICICOMAL@yes?$AA@			; `string'
PUBLIC	??_C@_01EANLCPLP@y?$AA@				; `string'
PUBLIC	??_C@_02OGHPLGEM@?1z?$AA@			; `string'
PUBLIC	??_C@_09FFOCOHMH@?1zinplace?$AA@		; `string'
PUBLIC	??_C@_02DHLNANAF@?1s?$AA@			; `string'
PUBLIC	??_C@_07PFDFIFLD@?1sysenc?$AA@			; `string'
PUBLIC	??_C@_02COKGDMEE@?1r?$AA@			; `string'
PUBLIC	??_C@_09PMGMEKMI@?1risysenc?$AA@		; `string'
PUBLIC	??_C@_02BMJAFOMG@?1p?$AA@			; `string'
PUBLIC	??_C@_0L@DLEMDKJB@?1prinplace?$AA@		; `string'
PUBLIC	??_C@_02IHJAPHNO@?1i?$AA@			; `string'
PUBLIC	??_C@_08MEKEMIGM@?1isysenc?$AA@			; `string'
PUBLIC	??_C@_07MFEOHHG@?1encdev?$AA@			; `string'
PUBLIC	??_C@_02DCDOIJJD@?1d?$AA@			; `string'
PUBLIC	??_C@_08FPKBNNLN@?1dsysenc?$AA@			; `string'
PUBLIC	??_C@_02HNHPBPFE@?1c?$AA@			; `string'
PUBLIC	??_C@_08FFGENEKE@?1csysenc?$AA@			; `string'
PUBLIC	??_C@_02EPEJHNNG@?1a?$AA@			; `string'
PUBLIC	??_C@_09PIOBCILE@?1acsysenc?$AA@		; `string'
PUBLIC	??_C@_09JABABBPB@?1tokenlib?$AA@		; `string'
PUBLIC	??_C@_02FILGPIH@?1q?$AA@			; `string'
PUBLIC	??_C@_05CMMBDMDD@?1quit?$AA@			; `string'
PUBLIC	??_C@_02MINBGBBJ@?1n?$AA@			; `string'
PUBLIC	??_C@_0M@IEGCIDAG@?1noisocheck?$AA@		; `string'
PUBLIC	??_C@_02JOILMGJP@?1h?$AA@			; `string'
PUBLIC	??_C@_08BCLHLEKP@?1history?$AA@			; `string'
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	??_C@_0L@JGIDNNFC@?9Embedding?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_ExtractCommandLine
EXTRN	__imp__DialogBoxParamW@20:PROC
EXTRN	_CommandHelpDlgProc@16:PROC
EXTRN	_GetArgumentValue:PROC
EXTRN	_GetArgumentID:PROC
EXTRN	_Win32CommandLine:PROC
EXTRN	__stricmp:PROC
;	COMDAT ??_C@_0BD@LGCKNJIO@COMMAND_LINE_ERROR?$AA@
CONST	SEGMENT
??_C@_0BD@LGCKNJIO@COMMAND_LINE_ERROR?$AA@ DB 'COMMAND_LINE_ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KAJCLHKP@no?$AA@
CONST	SEGMENT
??_C@_02KAJCLHKP@no?$AA@ DB 'no', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EFFIKLCJ@n?$AA@
CONST	SEGMENT
??_C@_01EFFIKLCJ@n?$AA@ DB 'n', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ICICOMAL@yes?$AA@
CONST	SEGMENT
??_C@_03ICICOMAL@yes?$AA@ DB 'yes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EANLCPLP@y?$AA@
CONST	SEGMENT
??_C@_01EANLCPLP@y?$AA@ DB 'y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OGHPLGEM@?1z?$AA@
CONST	SEGMENT
??_C@_02OGHPLGEM@?1z?$AA@ DB '/z', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09FFOCOHMH@?1zinplace?$AA@
CONST	SEGMENT
??_C@_09FFOCOHMH@?1zinplace?$AA@ DB '/zinplace', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DHLNANAF@?1s?$AA@
CONST	SEGMENT
??_C@_02DHLNANAF@?1s?$AA@ DB '/s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07PFDFIFLD@?1sysenc?$AA@
CONST	SEGMENT
??_C@_07PFDFIFLD@?1sysenc?$AA@ DB '/sysenc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02COKGDMEE@?1r?$AA@
CONST	SEGMENT
??_C@_02COKGDMEE@?1r?$AA@ DB '/r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09PMGMEKMI@?1risysenc?$AA@
CONST	SEGMENT
??_C@_09PMGMEKMI@?1risysenc?$AA@ DB '/risysenc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02BMJAFOMG@?1p?$AA@
CONST	SEGMENT
??_C@_02BMJAFOMG@?1p?$AA@ DB '/p', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DLEMDKJB@?1prinplace?$AA@
CONST	SEGMENT
??_C@_0L@DLEMDKJB@?1prinplace?$AA@ DB '/prinplace', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02IHJAPHNO@?1i?$AA@
CONST	SEGMENT
??_C@_02IHJAPHNO@?1i?$AA@ DB '/i', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08MEKEMIGM@?1isysenc?$AA@
CONST	SEGMENT
??_C@_08MEKEMIGM@?1isysenc?$AA@ DB '/isysenc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MFEOHHG@?1encdev?$AA@
CONST	SEGMENT
??_C@_07MFEOHHG@?1encdev?$AA@ DB '/encdev', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DCDOIJJD@?1d?$AA@
CONST	SEGMENT
??_C@_02DCDOIJJD@?1d?$AA@ DB '/d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08FPKBNNLN@?1dsysenc?$AA@
CONST	SEGMENT
??_C@_08FPKBNNLN@?1dsysenc?$AA@ DB '/dsysenc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02HNHPBPFE@?1c?$AA@
CONST	SEGMENT
??_C@_02HNHPBPFE@?1c?$AA@ DB '/c', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08FFGENEKE@?1csysenc?$AA@
CONST	SEGMENT
??_C@_08FFGENEKE@?1csysenc?$AA@ DB '/csysenc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02EPEJHNNG@?1a?$AA@
CONST	SEGMENT
??_C@_02EPEJHNNG@?1a?$AA@ DB '/a', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09PIOBCILE@?1acsysenc?$AA@
CONST	SEGMENT
??_C@_09PIOBCILE@?1acsysenc?$AA@ DB '/acsysenc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JABABBPB@?1tokenlib?$AA@
CONST	SEGMENT
??_C@_09JABABBPB@?1tokenlib?$AA@ DB '/tokenlib', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02FILGPIH@?1q?$AA@
CONST	SEGMENT
??_C@_02FILGPIH@?1q?$AA@ DB '/q', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05CMMBDMDD@?1quit?$AA@
CONST	SEGMENT
??_C@_05CMMBDMDD@?1quit?$AA@ DB '/quit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02MINBGBBJ@?1n?$AA@
CONST	SEGMENT
??_C@_02MINBGBBJ@?1n?$AA@ DB '/n', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IEGCIDAG@?1noisocheck?$AA@
CONST	SEGMENT
??_C@_0M@IEGCIDAG@?1noisocheck?$AA@ DB '/noisocheck', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JOILMGJP@?1h?$AA@
CONST	SEGMENT
??_C@_02JOILMGJP@?1h?$AA@ DB '/h', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08BCLHLEKP@?1history?$AA@
CONST	SEGMENT
??_C@_08BCLHLEKP@?1history?$AA@ DB '/history', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JGIDNNFC@?9Embedding?$AA@
CONST	SEGMENT
??_C@_0L@JGIDNNFC@?9Embedding?$AA@ DB '-Embedding', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _ExtractCommandLine
_TEXT	SEGMENT
_nNoCommandLineArgs$ = -696				; size = 4
_i$134959 = -692					; size = 4
_lpszCommandLineArgs$ = -688				; size = 4
_nArgPos$135000 = -684					; size = 4
_hwndDlg$GSCopy$ = -680					; size = 4
_as$134999 = -676					; size = 8
_args$134977 = -668					; size = 624
_szTmp$135030 = -44					; size = 8
_szTmp$135044 = -36					; size = 32
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_lpszCommandLine$ = 12					; size = 4
_ExtractCommandLine PROC				; COMDAT

; 7829 : {

  00000	81 ec b8 02 00
	00		 sub	 esp, 696		; 000002b8H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 b4 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+696], eax
  00014	8b 84 24 bc 02
	00 00		 mov	 eax, DWORD PTR _hwndDlg$[esp+692]
  0001b	56		 push	 esi
  0001c	8b b4 24 c4 02
	00 00		 mov	 esi, DWORD PTR _lpszCommandLine$[esp+696]

; 7830 : 	char **lpszCommandLineArgs;	/* Array of command line arguments */
; 7831 : 	int nNoCommandLineArgs;	/* The number of arguments in the array */
; 7832 : 
; 7833 : 	if (_stricmp (lpszCommandLine, "-Embedding") == 0)

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JGIDNNFC@?9Embedding?$AA@
  00028	56		 push	 esi

; 7842 : 	{
; 7843 : 		int i;
; 7844 : 
; 7845 : 		for (i = 0; i < nNoCommandLineArgs; i++)

  00029	89 44 24 1c	 mov	 DWORD PTR _hwndDlg$GSCopy$[esp+708], eax
  0002d	e8 00 00 00 00	 call	 __stricmp
  00032	83 c4 08	 add	 esp, 8
  00035	85 c0		 test	 eax, eax
  00037	75 20		 jne	 SHORT $LN42@ExtractCom

; 7834 : 	{
; 7835 : 		ComServerMode = TRUE;

  00039	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ComServerMode@@3HA, 1 ; ComServerMode
  00043	5e		 pop	 esi

; 8070 : 	}
; 8071 : }

  00044	8b 8c 24 b4 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+696]
  0004b	33 cc		 xor	 ecx, esp
  0004d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00052	81 c4 b8 02 00
	00		 add	 esp, 696		; 000002b8H
  00058	c3		 ret	 0
$LN42@ExtractCom:
  00059	53		 push	 ebx
  0005a	55		 push	 ebp
  0005b	57		 push	 edi

; 7836 : 		return;
; 7837 : 	}
; 7838 : 
; 7839 : 	/* Extract command line arguments */
; 7840 : 	nNoCommandLineArgs = Win32CommandLine (lpszCommandLine, &lpszCommandLineArgs);

  0005c	8d 4c 24 18	 lea	 ecx, DWORD PTR _lpszCommandLineArgs$[esp+712]
  00060	51		 push	 ecx
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 _Win32CommandLine

; 7841 : 	if (nNoCommandLineArgs > 0)

  00067	33 db		 xor	 ebx, ebx
  00069	83 c4 08	 add	 esp, 8
  0006c	3b c3		 cmp	 eax, ebx
  0006e	89 44 24 10	 mov	 DWORD PTR _nNoCommandLineArgs$[esp+712], eax
  00072	be 01 00 00 00	 mov	 esi, 1
  00077	0f 8e c1 09 00
	00		 jle	 $LN116@ExtractCom

; 7842 : 	{
; 7843 : 		int i;
; 7844 : 
; 7845 : 		for (i = 0; i < nNoCommandLineArgs; i++)

  0007d	33 c9		 xor	 ecx, ecx
  0007f	3b c3		 cmp	 eax, ebx
  00081	89 4c 24 14	 mov	 DWORD PTR _i$134959[esp+712], ecx
  00085	0f 8e b3 09 00
	00		 jle	 $LN116@ExtractCom
  0008b	8d 7e 01	 lea	 edi, DWORD PTR [esi+1]
  0008e	8d 6e 05	 lea	 ebp, DWORD PTR [esi+5]
$LL40@ExtractCom:

; 7846 : 		{
; 7847 : 			enum
; 7848 : 			{
; 7849 : 				OptionHistory,
; 7850 : 				OptionNoIsoCheck,
; 7851 : 				OptionQuit,
; 7852 : 				OptionTokenLib,
; 7853 : 				CommandResumeSysEncLogOn,
; 7854 : 				CommandResumeSysEnc,
; 7855 : 				CommandDecryptSysEnc,
; 7856 : 				CommandEncDev,
; 7857 : 				CommandHiddenSys,
; 7858 : 				CommandResumeInplaceLogOn,
; 7859 : 				CommandResumeHiddenSys,
; 7860 : 				CommandSysEnc,
; 7861 : 				CommandResumeInplace,
; 7862 : 			};
; 7863 : 
; 7864 : 			argument args[]=
; 7865 : 			{
; 7866 : 				{ OptionHistory,				"/history",			"/h", FALSE },

  00091	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_08BCLHLEKP@?1history?$AA@+4
  00096	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_08BCLHLEKP@?1history?$AA@
  0009c	89 44 24 34	 mov	 DWORD PTR _args$134977[esp+720], eax
  000a0	33 c0		 xor	 eax, eax
  000a2	89 44 24 39	 mov	 DWORD PTR _args$134977[esp+725], eax
  000a6	89 44 24 3d	 mov	 DWORD PTR _args$134977[esp+729], eax
  000aa	89 44 24 41	 mov	 DWORD PTR _args$134977[esp+733], eax
  000ae	89 44 24 45	 mov	 DWORD PTR _args$134977[esp+737], eax
  000b2	89 44 24 49	 mov	 DWORD PTR _args$134977[esp+741], eax
  000b6	66 89 44 24 4d	 mov	 WORD PTR _args$134977[esp+745], ax
  000bb	88 44 24 4f	 mov	 BYTE PTR _args$134977[esp+747], al
  000bf	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_02JOILMGJP@?1h?$AA@
  000c6	66 89 44 24 50	 mov	 WORD PTR _args$134977[esp+748], ax
  000cb	33 c0		 xor	 eax, eax
  000cd	89 44 24 53	 mov	 DWORD PTR _args$134977[esp+751], eax
  000d1	88 44 24 57	 mov	 BYTE PTR _args$134977[esp+755], al

; 7867 : 				{ OptionNoIsoCheck,				"/noisocheck",		"/n", FALSE },

  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@IEGCIDAG@?1noisocheck?$AA@
  000da	89 44 24 60	 mov	 DWORD PTR _args$134977[esp+764], eax
  000de	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@IEGCIDAG@?1noisocheck?$AA@+8
  000e3	89 54 24 30	 mov	 DWORD PTR _args$134977[esp+716], edx
  000e7	0f b6 15 08 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_08BCLHLEKP@?1history?$AA@+8
  000ee	89 44 24 68	 mov	 DWORD PTR _args$134977[esp+772], eax
  000f2	33 c0		 xor	 eax, eax
  000f4	89 44 24 6c	 mov	 DWORD PTR _args$134977[esp+776], eax
  000f8	89 44 24 70	 mov	 DWORD PTR _args$134977[esp+780], eax
  000fc	89 44 24 74	 mov	 DWORD PTR _args$134977[esp+784], eax
  00100	89 44 24 78	 mov	 DWORD PTR _args$134977[esp+788], eax
  00104	89 44 24 7c	 mov	 DWORD PTR _args$134977[esp+792], eax
  00108	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02MINBGBBJ@?1n?$AA@+2
  0010f	88 54 24 38	 mov	 BYTE PTR _args$134977[esp+724], dl
  00113	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_02JOILMGJP@?1h?$AA@+2
  0011a	88 84 24 82 00
	00 00		 mov	 BYTE PTR _args$134977[esp+798], al
  00121	33 c0		 xor	 eax, eax
  00123	88 54 24 52	 mov	 BYTE PTR _args$134977[esp+750], dl
  00127	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0M@IEGCIDAG@?1noisocheck?$AA@+4
  0012d	89 84 24 83 00
	00 00		 mov	 DWORD PTR _args$134977[esp+799], eax
  00134	88 84 24 87 00
	00 00		 mov	 BYTE PTR _args$134977[esp+803], al

; 7868 : 				{ OptionQuit,					"/quit",			"/q", FALSE },

  0013b	0f b7 05 04 00
	00 00		 movzx	 eax, WORD PTR ??_C@_05CMMBDMDD@?1quit?$AA@+4
  00142	89 54 24 64	 mov	 DWORD PTR _args$134977[esp+768], edx
  00146	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02MINBGBBJ@?1n?$AA@
  0014d	66 89 84 24 94
	00 00 00	 mov	 WORD PTR _args$134977[esp+816], ax
  00155	33 c0		 xor	 eax, eax
  00157	66 89 94 24 80
	00 00 00	 mov	 WORD PTR _args$134977[esp+796], dx
  0015f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_05CMMBDMDD@?1quit?$AA@
  00165	89 84 24 96 00
	00 00		 mov	 DWORD PTR _args$134977[esp+818], eax
  0016c	89 84 24 9a 00
	00 00		 mov	 DWORD PTR _args$134977[esp+822], eax
  00173	89 84 24 9e 00
	00 00		 mov	 DWORD PTR _args$134977[esp+826], eax
  0017a	89 84 24 a2 00
	00 00		 mov	 DWORD PTR _args$134977[esp+830], eax
  00181	89 84 24 a6 00
	00 00		 mov	 DWORD PTR _args$134977[esp+834], eax
  00188	89 84 24 aa 00
	00 00		 mov	 DWORD PTR _args$134977[esp+838], eax
  0018f	66 89 84 24 ae
	00 00 00	 mov	 WORD PTR _args$134977[esp+842], ax
  00197	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02FILGPIH@?1q?$AA@+2
  0019e	89 94 24 90 00
	00 00		 mov	 DWORD PTR _args$134977[esp+812], edx
  001a5	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02FILGPIH@?1q?$AA@
  001ac	88 84 24 b2 00
	00 00		 mov	 BYTE PTR _args$134977[esp+846], al
  001b3	33 c0		 xor	 eax, eax
  001b5	66 89 94 24 b0
	00 00 00	 mov	 WORD PTR _args$134977[esp+844], dx

; 7869 : 				{ OptionTokenLib,				"/tokenlib",		NULL, FALSE },

  001bd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_09JABABBPB@?1tokenlib?$AA@
  001c3	89 84 24 b3 00
	00 00		 mov	 DWORD PTR _args$134977[esp+847], eax
  001ca	88 84 24 b7 00
	00 00		 mov	 BYTE PTR _args$134977[esp+851], al
  001d1	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_09JABABBPB@?1tokenlib?$AA@+4
  001d6	89 94 24 c0 00
	00 00		 mov	 DWORD PTR _args$134977[esp+860], edx
  001dd	0f b7 15 08 00
	00 00		 movzx	 edx, WORD PTR ??_C@_09JABABBPB@?1tokenlib?$AA@+8
  001e4	89 84 24 c4 00
	00 00		 mov	 DWORD PTR _args$134977[esp+864], eax
  001eb	33 c0		 xor	 eax, eax
  001ed	89 5c 24 2c	 mov	 DWORD PTR _args$134977[esp+712], ebx
  001f1	89 5c 24 58	 mov	 DWORD PTR _args$134977[esp+756], ebx
  001f5	89 74 24 5c	 mov	 DWORD PTR _args$134977[esp+760], esi
  001f9	89 9c 24 88 00
	00 00		 mov	 DWORD PTR _args$134977[esp+804], ebx
  00200	89 bc 24 8c 00
	00 00		 mov	 DWORD PTR _args$134977[esp+808], edi
  00207	89 9c 24 b8 00
	00 00		 mov	 DWORD PTR _args$134977[esp+852], ebx
  0020e	c7 84 24 bc 00
	00 00 03 00 00
	00		 mov	 DWORD PTR _args$134977[esp+856], 3
  00219	66 89 94 24 c8
	00 00 00	 mov	 WORD PTR _args$134977[esp+868], dx
  00221	89 84 24 ca 00
	00 00		 mov	 DWORD PTR _args$134977[esp+870], eax
  00228	89 84 24 ce 00
	00 00		 mov	 DWORD PTR _args$134977[esp+874], eax
  0022f	89 84 24 d2 00
	00 00		 mov	 DWORD PTR _args$134977[esp+878], eax
  00236	89 84 24 d6 00
	00 00		 mov	 DWORD PTR _args$134977[esp+882], eax
  0023d	89 84 24 da 00
	00 00		 mov	 DWORD PTR _args$134977[esp+886], eax
  00244	66 89 84 24 de
	00 00 00	 mov	 WORD PTR _args$134977[esp+890], ax
  0024c	88 9c 24 e0 00
	00 00		 mov	 BYTE PTR _args$134977[esp+892], bl
  00253	88 9c 24 e1 00
	00 00		 mov	 BYTE PTR _args$134977[esp+893], bl
  0025a	89 84 24 e2 00
	00 00		 mov	 DWORD PTR _args$134977[esp+894], eax
  00261	66 89 84 24 e6
	00 00 00	 mov	 WORD PTR _args$134977[esp+898], ax

; 7870 : 
; 7871 : 				{ CommandResumeSysEncLogOn,		"/acsysenc",		"/a", TRUE },

  00269	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_09PIOBCILE@?1acsysenc?$AA@
  0026e	89 84 24 f0 00
	00 00		 mov	 DWORD PTR _args$134977[esp+908], eax
  00275	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ??_C@_09PIOBCILE@?1acsysenc?$AA@+8
  0027c	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ??_C@_09PIOBCILE@?1acsysenc?$AA@+4
  00282	66 89 84 24 f8
	00 00 00	 mov	 WORD PTR _args$134977[esp+916], ax
  0028a	33 c0		 xor	 eax, eax
  0028c	89 84 24 fa 00
	00 00		 mov	 DWORD PTR _args$134977[esp+918], eax
  00293	89 84 24 fe 00
	00 00		 mov	 DWORD PTR _args$134977[esp+922], eax
  0029a	89 84 24 02 01
	00 00		 mov	 DWORD PTR _args$134977[esp+926], eax
  002a1	89 84 24 06 01
	00 00		 mov	 DWORD PTR _args$134977[esp+930], eax
  002a8	89 84 24 0a 01
	00 00		 mov	 DWORD PTR _args$134977[esp+934], eax
  002af	66 89 84 24 0e
	01 00 00	 mov	 WORD PTR _args$134977[esp+938], ax
  002b7	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02EPEJHNNG@?1a?$AA@+2
  002be	88 84 24 12 01
	00 00		 mov	 BYTE PTR _args$134977[esp+942], al
  002c5	33 c0		 xor	 eax, eax
  002c7	89 84 24 13 01
	00 00		 mov	 DWORD PTR _args$134977[esp+943], eax
  002ce	88 84 24 17 01
	00 00		 mov	 BYTE PTR _args$134977[esp+947], al

; 7872 : 				{ CommandResumeSysEnc,			"/csysenc",			"/c", TRUE },

  002d5	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_08FFGENEKE@?1csysenc?$AA@+4
  002da	89 84 24 24 01
	00 00		 mov	 DWORD PTR _args$134977[esp+960], eax
  002e1	33 c0		 xor	 eax, eax
  002e3	89 84 24 29 01
	00 00		 mov	 DWORD PTR _args$134977[esp+965], eax
  002ea	89 84 24 2d 01
	00 00		 mov	 DWORD PTR _args$134977[esp+969], eax
  002f1	89 84 24 31 01
	00 00		 mov	 DWORD PTR _args$134977[esp+973], eax
  002f8	89 84 24 35 01
	00 00		 mov	 DWORD PTR _args$134977[esp+977], eax
  002ff	89 84 24 39 01
	00 00		 mov	 DWORD PTR _args$134977[esp+981], eax
  00306	66 89 84 24 3d
	01 00 00	 mov	 WORD PTR _args$134977[esp+985], ax
  0030e	88 84 24 3f 01
	00 00		 mov	 BYTE PTR _args$134977[esp+987], al
  00315	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_02HNHPBPFE@?1c?$AA@
  0031c	89 94 24 f4 00
	00 00		 mov	 DWORD PTR _args$134977[esp+912], edx
  00323	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02EPEJHNNG@?1a?$AA@
  0032a	66 89 84 24 40
	01 00 00	 mov	 WORD PTR _args$134977[esp+988], ax
  00332	33 c0		 xor	 eax, eax
  00334	89 84 24 43 01
	00 00		 mov	 DWORD PTR _args$134977[esp+991], eax
  0033b	88 84 24 47 01
	00 00		 mov	 BYTE PTR _args$134977[esp+995], al

; 7873 : 				{ CommandDecryptSysEnc,			"/dsysenc",			"/d", TRUE },

  00342	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_08FPKBNNLN@?1dsysenc?$AA@
  00347	66 89 94 24 10
	01 00 00	 mov	 WORD PTR _args$134977[esp+940], dx
  0034f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_08FFGENEKE@?1csysenc?$AA@
  00355	89 84 24 50 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1004], eax
  0035c	0f b6 05 08 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_08FPKBNNLN@?1dsysenc?$AA@+8
  00363	89 94 24 20 01
	00 00		 mov	 DWORD PTR _args$134977[esp+956], edx
  0036a	0f b6 15 08 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_08FFGENEKE@?1csysenc?$AA@+8
  00371	88 84 24 58 01
	00 00		 mov	 BYTE PTR _args$134977[esp+1012], al
  00378	33 c0		 xor	 eax, eax
  0037a	88 94 24 28 01
	00 00		 mov	 BYTE PTR _args$134977[esp+964], dl
  00381	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_02HNHPBPFE@?1c?$AA@+2
  00388	89 84 24 59 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1013], eax
  0038f	89 84 24 5d 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1017], eax
  00396	89 84 24 61 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1021], eax
  0039d	89 84 24 65 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1025], eax
  003a4	89 84 24 69 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1029], eax
  003ab	66 89 84 24 6d
	01 00 00	 mov	 WORD PTR _args$134977[esp+1033], ax
  003b3	88 84 24 6f 01
	00 00		 mov	 BYTE PTR _args$134977[esp+1035], al
  003ba	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02DCDOIJJD@?1d?$AA@+2
  003c1	88 94 24 42 01
	00 00		 mov	 BYTE PTR _args$134977[esp+990], dl
  003c8	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ??_C@_08FPKBNNLN@?1dsysenc?$AA@+4
  003ce	88 84 24 72 01
	00 00		 mov	 BYTE PTR _args$134977[esp+1038], al
  003d5	33 c0		 xor	 eax, eax
  003d7	89 94 24 54 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1008], edx
  003de	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02DCDOIJJD@?1d?$AA@
  003e5	89 84 24 73 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1039], eax
  003ec	88 84 24 77 01
	00 00		 mov	 BYTE PTR _args$134977[esp+1043], al

; 7874 : 				{ CommandEncDev,				"/encdev",			"/e", TRUE },

  003f3	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_07MFEOHHG@?1encdev?$AA@+4
  003f8	66 89 94 24 70
	01 00 00	 mov	 WORD PTR _args$134977[esp+1036], dx
  00400	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_07MFEOHHG@?1encdev?$AA@
  00406	89 84 24 84 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1056], eax
  0040d	33 c0		 xor	 eax, eax
  0040f	89 9c 24 e8 00
	00 00		 mov	 DWORD PTR _args$134977[esp+900], ebx
  00416	c7 84 24 ec 00
	00 00 04 00 00
	00		 mov	 DWORD PTR _args$134977[esp+904], 4
  00421	89 b4 24 18 01
	00 00		 mov	 DWORD PTR _args$134977[esp+948], esi
  00428	c7 84 24 1c 01
	00 00 05 00 00
	00		 mov	 DWORD PTR _args$134977[esp+952], 5
  00433	89 b4 24 48 01
	00 00		 mov	 DWORD PTR _args$134977[esp+996], esi
  0043a	89 ac 24 4c 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1000], ebp
  00441	89 b4 24 78 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1044], esi
  00448	c7 84 24 7c 01
	00 00 07 00 00
	00		 mov	 DWORD PTR _args$134977[esp+1048], 7
  00453	89 94 24 80 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1052], edx
  0045a	89 84 24 88 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1060], eax
  00461	89 84 24 8c 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1064], eax
  00468	89 84 24 90 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1068], eax
  0046f	89 84 24 94 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1072], eax
  00476	89 84 24 98 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1076], eax
  0047d	89 84 24 9c 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1080], eax
  00484	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02CLCFLINC@?1e?$AA@+2
  0048b	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02CLCFLINC@?1e?$AA@
  00492	88 84 24 a2 01
	00 00		 mov	 BYTE PTR _args$134977[esp+1086], al
  00499	33 c0		 xor	 eax, eax
  0049b	89 84 24 a3 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1087], eax
  004a2	88 84 24 a7 01
	00 00		 mov	 BYTE PTR _args$134977[esp+1091], al

; 7875 : 				{ CommandHiddenSys,				"/isysenc",			"/i", TRUE },	

  004a9	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_08MEKEMIGM@?1isysenc?$AA@+4
  004ae	89 84 24 b4 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1104], eax
  004b5	33 c0		 xor	 eax, eax
  004b7	89 84 24 b9 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1109], eax
  004be	89 84 24 bd 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1113], eax
  004c5	89 84 24 c1 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1117], eax
  004cc	89 84 24 c5 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1121], eax
  004d3	89 84 24 c9 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1125], eax
  004da	66 89 84 24 cd
	01 00 00	 mov	 WORD PTR _args$134977[esp+1129], ax
  004e2	88 84 24 cf 01
	00 00		 mov	 BYTE PTR _args$134977[esp+1131], al
  004e9	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_02IHJAPHNO@?1i?$AA@
  004f0	66 89 84 24 d0
	01 00 00	 mov	 WORD PTR _args$134977[esp+1132], ax
  004f8	33 c0		 xor	 eax, eax
  004fa	89 84 24 d3 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1135], eax
  00501	88 84 24 d7 01
	00 00		 mov	 BYTE PTR _args$134977[esp+1139], al

; 7876 : 				{ CommandResumeInplaceLogOn,	"/prinplace",		"/p", TRUE },

  00508	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0L@DLEMDKJB@?1prinplace?$AA@
  0050d	66 89 94 24 a0
	01 00 00	 mov	 WORD PTR _args$134977[esp+1084], dx
  00515	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_08MEKEMIGM@?1isysenc?$AA@
  0051b	89 84 24 e0 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1148], eax
  00522	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ??_C@_0L@DLEMDKJB@?1prinplace?$AA@+8
  00529	89 94 24 b0 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1100], edx
  00530	0f b6 15 08 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_08MEKEMIGM@?1isysenc?$AA@+8
  00537	66 89 84 24 e8
	01 00 00	 mov	 WORD PTR _args$134977[esp+1156], ax
  0053f	33 c0		 xor	 eax, eax
  00541	88 94 24 b8 01
	00 00		 mov	 BYTE PTR _args$134977[esp+1108], dl
  00548	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_02IHJAPHNO@?1i?$AA@+2
  0054f	89 84 24 eb 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1159], eax
  00556	89 84 24 ef 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1163], eax
  0055d	89 84 24 f3 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1167], eax
  00564	89 84 24 f7 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1171], eax
  0056b	89 84 24 fb 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1175], eax
  00572	88 84 24 ff 01
	00 00		 mov	 BYTE PTR _args$134977[esp+1179], al
  00579	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_02BMJAFOMG@?1p?$AA@
  00580	88 94 24 d2 01
	00 00		 mov	 BYTE PTR _args$134977[esp+1134], dl
  00587	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0L@DLEMDKJB@?1prinplace?$AA@+4
  0058d	66 89 84 24 00
	02 00 00	 mov	 WORD PTR _args$134977[esp+1180], ax
  00595	33 c0		 xor	 eax, eax
  00597	89 94 24 e4 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1152], edx
  0059e	0f b6 15 0a 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_0L@DLEMDKJB@?1prinplace?$AA@+10
  005a5	89 84 24 03 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1183], eax
  005ac	88 84 24 07 02
	00 00		 mov	 BYTE PTR _args$134977[esp+1187], al

; 7877 : 				{ CommandResumeHiddenSys,		"/risysenc",		"/r", TRUE },	

  005b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_09PMGMEKMI@?1risysenc?$AA@
  005b8	89 84 24 10 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1196], eax
  005bf	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ??_C@_09PMGMEKMI@?1risysenc?$AA@+8
  005c6	88 94 24 ea 01
	00 00		 mov	 BYTE PTR _args$134977[esp+1158], dl
  005cd	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_02BMJAFOMG@?1p?$AA@+2
  005d4	66 89 84 24 18
	02 00 00	 mov	 WORD PTR _args$134977[esp+1204], ax
  005dc	33 c0		 xor	 eax, eax
  005de	88 94 24 02 02
	00 00		 mov	 BYTE PTR _args$134977[esp+1182], dl
  005e5	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ??_C@_09PMGMEKMI@?1risysenc?$AA@+4
  005eb	89 84 24 1a 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1206], eax
  005f2	89 84 24 1e 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1210], eax
  005f9	89 84 24 22 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1214], eax
  00600	89 84 24 26 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1218], eax
  00607	89 84 24 2a 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1222], eax
  0060e	66 89 84 24 2e
	02 00 00	 mov	 WORD PTR _args$134977[esp+1226], ax
  00616	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02COKGDMEE@?1r?$AA@+2
  0061d	89 94 24 14 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1200], edx
  00624	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02COKGDMEE@?1r?$AA@
  0062b	88 84 24 32 02
	00 00		 mov	 BYTE PTR _args$134977[esp+1230], al
  00632	33 c0		 xor	 eax, eax
  00634	66 89 94 24 30
	02 00 00	 mov	 WORD PTR _args$134977[esp+1228], dx

; 7878 : 				{ CommandSysEnc,				"/sysenc",			"/s", TRUE },	

  0063c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_07PFDFIFLD@?1sysenc?$AA@
  00642	89 b4 24 a8 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1092], esi
  00649	c7 84 24 ac 01
	00 00 08 00 00
	00		 mov	 DWORD PTR _args$134977[esp+1096], 8
  00654	89 b4 24 d8 01
	00 00		 mov	 DWORD PTR _args$134977[esp+1140], esi
  0065b	c7 84 24 dc 01
	00 00 09 00 00
	00		 mov	 DWORD PTR _args$134977[esp+1144], 9
  00666	89 b4 24 08 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1188], esi
  0066d	c7 84 24 0c 02
	00 00 0a 00 00
	00		 mov	 DWORD PTR _args$134977[esp+1192], 10 ; 0000000aH
  00678	89 84 24 33 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1231], eax
  0067f	88 84 24 37 02
	00 00		 mov	 BYTE PTR _args$134977[esp+1235], al
  00686	89 b4 24 38 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1236], esi
  0068d	c7 84 24 3c 02
	00 00 0b 00 00
	00		 mov	 DWORD PTR _args$134977[esp+1240], 11 ; 0000000bH
  00698	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_07PFDFIFLD@?1sysenc?$AA@+4
  0069d	89 84 24 44 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1248], eax
  006a4	33 c0		 xor	 eax, eax
  006a6	89 84 24 48 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1252], eax
  006ad	89 84 24 4c 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1256], eax
  006b4	89 84 24 50 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1260], eax
  006bb	89 84 24 54 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1264], eax
  006c2	89 84 24 58 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1268], eax
  006c9	89 84 24 5c 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1272], eax
  006d0	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02DHLNANAF@?1s?$AA@+2
  006d7	88 84 24 62 02
	00 00		 mov	 BYTE PTR _args$134977[esp+1278], al
  006de	33 c0		 xor	 eax, eax
  006e0	89 94 24 40 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1244], edx
  006e7	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ??_C@_02DHLNANAF@?1s?$AA@
  006ee	89 84 24 63 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1279], eax
  006f5	88 84 24 67 02
	00 00		 mov	 BYTE PTR _args$134977[esp+1283], al

; 7879 : 				{ CommandResumeInplace,			"/zinplace",		"/z", TRUE }

  006fc	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_09FFOCOHMH@?1zinplace?$AA@+4
  00701	89 84 24 74 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1296], eax
  00708	33 c0		 xor	 eax, eax
  0070a	66 89 94 24 60
	02 00 00	 mov	 WORD PTR _args$134977[esp+1276], dx
  00712	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_09FFOCOHMH@?1zinplace?$AA@
  00718	89 84 24 7a 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1302], eax
  0071f	89 84 24 7e 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1306], eax
  00726	89 84 24 82 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1310], eax
  0072d	89 84 24 86 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1314], eax
  00734	89 84 24 8a 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1318], eax
  0073b	66 89 84 24 8e
	02 00 00	 mov	 WORD PTR _args$134977[esp+1322], ax
  00743	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_02OGHPLGEM@?1z?$AA@
  0074a	89 94 24 70 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1292], edx
  00751	0f b7 15 08 00
	00 00		 movzx	 edx, WORD PTR ??_C@_09FFOCOHMH@?1zinplace?$AA@+8
  00758	66 89 84 24 90
	02 00 00	 mov	 WORD PTR _args$134977[esp+1324], ax
  00760	33 c0		 xor	 eax, eax
  00762	66 89 94 24 78
	02 00 00	 mov	 WORD PTR _args$134977[esp+1300], dx
  0076a	0f b6 15 02 00
	00 00		 movzx	 edx, BYTE PTR ??_C@_02OGHPLGEM@?1z?$AA@+2
  00771	89 84 24 93 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1327], eax
  00778	88 84 24 97 02
	00 00		 mov	 BYTE PTR _args$134977[esp+1331], al

; 7880 : 			};
; 7881 : 
; 7882 : 			argumentspec as;
; 7883 : 
; 7884 : 			int nArgPos;
; 7885 : 			int x;
; 7886 : 
; 7887 : 			if (lpszCommandLineArgs[i] == NULL)

  0077f	8b 44 24 18	 mov	 eax, DWORD PTR _lpszCommandLineArgs$[esp+712]
  00783	89 b4 24 68 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1284], esi
  0078a	c7 84 24 6c 02
	00 00 0c 00 00
	00		 mov	 DWORD PTR _args$134977[esp+1288], 12 ; 0000000cH
  00795	88 94 24 92 02
	00 00		 mov	 BYTE PTR _args$134977[esp+1326], dl
  0079c	89 b4 24 98 02
	00 00		 mov	 DWORD PTR _args$134977[esp+1332], esi
  007a3	39 1c 88	 cmp	 DWORD PTR [eax+ecx*4], ebx
  007a6	0f 84 7c 02 00
	00		 je	 $LN39@ExtractCom

; 7888 : 				continue;
; 7889 : 
; 7890 : 			as.args = args;

  007ac	8d 54 24 2c	 lea	 edx, DWORD PTR _args$134977[esp+712]
  007b0	89 54 24 24	 mov	 DWORD PTR _as$134999[esp+712], edx

; 7891 : 			as.arg_cnt = sizeof(args)/ sizeof(args[0]);
; 7892 : 			
; 7893 : 			x = GetArgumentID (&as, lpszCommandLineArgs[i], &nArgPos);

  007b4	8d 54 24 1c	 lea	 edx, DWORD PTR _nArgPos$135000[esp+712]
  007b8	c7 44 24 28 0d
	00 00 00	 mov	 DWORD PTR _as$134999[esp+716], 13 ; 0000000dH
  007c0	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  007c3	52		 push	 edx
  007c4	50		 push	 eax
  007c5	8d 4c 24 2c	 lea	 ecx, DWORD PTR _as$134999[esp+720]
  007c9	51		 push	 ecx
  007ca	e8 00 00 00 00	 call	 _GetArgumentID
  007cf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7894 : 
; 7895 : 			switch (x)

  007d2	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  007d5	0f 87 bb 02 00
	00		 ja	 $LN3@ExtractCom
  007db	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN124@ExtractCom[eax*4]
$LN34@ExtractCom:

; 7896 : 			{
; 7897 : 			case CommandSysEnc:
; 7898 : 				// Encrypt system partition/drive (passed by Mount if system encryption hasn't started or to reverse decryption)
; 7899 : 
; 7900 : 				// From now on, we should be the only instance of the TC wizard allowed to deal with system encryption
; 7901 : 				if (CreateSysEncMutex ())

  007e2	e8 00 00 00 00	 call	 _CreateSysEncMutex
  007e7	85 c0		 test	 eax, eax
  007e9	0f 84 94 02 00
	00		 je	 $LN33@ExtractCom

; 7902 : 				{
; 7903 : 					bDirectSysEncMode = TRUE;
; 7904 : 					bDirectSysEncModeCommand = SYSENC_COMMAND_ENCRYPT;

  007ef	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?bDirectSysEncModeCommand@@3HA, 3 ; bDirectSysEncModeCommand
$LN123@ExtractCom:

; 7905 : 					ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

  007f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  007ff	89 35 00 00 00
	00		 mov	 DWORD PTR ?bDirectSysEncMode@@3HA, esi ; bDirectSysEncMode
  00805	3b d7		 cmp	 edx, edi
  00807	74 55		 je	 SHORT $LN53@ExtractCom
  00809	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  0080e	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00813	85 c0		 test	 eax, eax
  00815	75 12		 jne	 SHORT $LN49@ExtractCom
  00817	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  0081c	e8 00 00 00 00	 call	 _Error
  00821	83 c4 04	 add	 esp, 4
  00824	e9 ff 01 00 00	 jmp	 $LN39@ExtractCom
$LN49@ExtractCom:
  00829	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
  0082e	89 1d 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, ebx
  00834	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szFileName@@3PADA, bl
  0083a	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szDiskFile@@3PADA, bl
  00840	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, ebx
  00846	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx
  0084c	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, ebx
  00852	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ebx
  00858	89 3d 00 00 00
	00		 mov	 DWORD PTR _WizardMode, edi
$LN53@ExtractCom:
  0085e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  00864	f7 d9		 neg	 ecx
  00866	1b c9		 sbb	 ecx, ecx
  00868	f7 d9		 neg	 ecx
  0086a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bDevice@@3HA, ecx ; bDevice

; 7911 : 				}
; 7912 : 
; 7913 : 				break;

  00870	e9 b3 01 00 00	 jmp	 $LN39@ExtractCom
$LN31@ExtractCom:

; 7914 : 
; 7915 : 			case CommandDecryptSysEnc:
; 7916 : 				// Decrypt system partition/drive (passed by Mount, also to reverse encryption in progress, when paused)
; 7917 : 
; 7918 : 				// From now on, we should be the only instance of the TC wizard allowed to deal with system encryption
; 7919 : 				if (CreateSysEncMutex ())

  00875	e8 00 00 00 00	 call	 _CreateSysEncMutex
  0087a	85 c0		 test	 eax, eax
  0087c	0f 84 01 02 00
	00		 je	 $LN33@ExtractCom

; 7920 : 				{
; 7921 : 					bDirectSysEncMode = TRUE;
; 7922 : 					bDirectSysEncModeCommand = SYSENC_COMMAND_DECRYPT;

  00882	c7 05 00 00 00
	00 04 00 00 00	 mov	 DWORD PTR ?bDirectSysEncModeCommand@@3HA, 4 ; bDirectSysEncModeCommand

; 7923 : 					ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

  0088c	e9 68 ff ff ff	 jmp	 $LN123@ExtractCom
$LN28@ExtractCom:

; 7924 : 				}
; 7925 : 				else
; 7926 : 				{
; 7927 : 					Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");
; 7928 : 					exit(0);
; 7929 : 				}
; 7930 : 				break;
; 7931 : 
; 7932 : 			case CommandHiddenSys:
; 7933 : 				// Create a hidden operating system (passed by Mount when the user selects System -> Create Hidden Operating System)
; 7934 : 
; 7935 : 				// From now on, we should be the only instance of the TC wizard allowed to deal with system encryption
; 7936 : 				if (CreateSysEncMutex ())

  00891	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00896	85 c0		 test	 eax, eax
  00898	0f 84 e5 01 00
	00		 je	 $LN33@ExtractCom

; 7937 : 				{
; 7938 : 					bDirectSysEncMode = TRUE;
; 7939 : 					bDirectSysEncModeCommand = SYSENC_COMMAND_CREATE_HIDDEN_OS;

  0089e	c7 05 00 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?bDirectSysEncModeCommand@@3HA, 5 ; bDirectSysEncModeCommand

; 7940 : 					ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

  008a8	e9 4c ff ff ff	 jmp	 $LN123@ExtractCom
$LN25@ExtractCom:

; 7941 : 				}
; 7942 : 				else
; 7943 : 				{
; 7944 : 					Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");
; 7945 : 					exit(0);
; 7946 : 				}
; 7947 : 
; 7948 : 				break;
; 7949 : 
; 7950 : 			case CommandResumeHiddenSys:
; 7951 : 				// Resume process of creation of a hidden operating system (passed by Wizard when the user needs to UAC-elevate the whole wizard process)
; 7952 : 
; 7953 : 				// From now on, we should be the only instance of the TC wizard allowed to deal with system encryption
; 7954 : 				if (CreateSysEncMutex ())

  008ad	e8 00 00 00 00	 call	 _CreateSysEncMutex
  008b2	85 c0		 test	 eax, eax
  008b4	0f 84 c9 01 00
	00		 je	 $LN33@ExtractCom

; 7955 : 				{
; 7956 : 					bDirectSysEncMode = TRUE;
; 7957 : 					bDirectSysEncModeCommand = SYSENC_COMMAND_CREATE_HIDDEN_OS_ELEV;

  008ba	89 2d 00 00 00
	00		 mov	 DWORD PTR ?bDirectSysEncModeCommand@@3HA, ebp ; bDirectSysEncModeCommand

; 7958 : 					ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

  008c0	e9 34 ff ff ff	 jmp	 $LN123@ExtractCom
$LN22@ExtractCom:

; 7959 : 				}
; 7960 : 				else
; 7961 : 				{
; 7962 : 					Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");
; 7963 : 					exit(0);
; 7964 : 				}
; 7965 : 
; 7966 : 				break;
; 7967 : 
; 7968 : 			case CommandResumeSysEnc:
; 7969 : 				// Resume previous system-encryption operation (passed by Mount) e.g. encryption, decryption, or pretest 
; 7970 : 
; 7971 : 				// From now on, we should be the only instance of the TC wizard allowed to deal with system encryption
; 7972 : 				if (CreateSysEncMutex ())

  008c5	e8 00 00 00 00	 call	 _CreateSysEncMutex
  008ca	85 c0		 test	 eax, eax
  008cc	0f 84 b1 01 00
	00		 je	 $LN33@ExtractCom

; 7973 : 				{
; 7974 : 					bDirectSysEncMode = TRUE;
; 7975 : 					bDirectSysEncModeCommand = SYSENC_COMMAND_RESUME;

  008d2	89 35 00 00 00
	00		 mov	 DWORD PTR ?bDirectSysEncModeCommand@@3HA, esi ; bDirectSysEncModeCommand

; 7976 : 					ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

  008d8	e9 1c ff ff ff	 jmp	 $LN123@ExtractCom
$LN19@ExtractCom:

; 7977 : 				}
; 7978 : 				else
; 7979 : 				{
; 7980 : 					Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");
; 7981 : 					exit(0);
; 7982 : 				}
; 7983 : 				break;
; 7984 : 
; 7985 : 			case CommandResumeSysEncLogOn:
; 7986 : 				// Same as csysenc but passed only by the system (from the startup sequence)
; 7987 : 
; 7988 : 				// From now on, we should be the only instance of the TC wizard allowed to deal with system encryption
; 7989 : 				if (CreateSysEncMutex ())

  008dd	e8 00 00 00 00	 call	 _CreateSysEncMutex
  008e2	85 c0		 test	 eax, eax
  008e4	0f 84 99 01 00
	00		 je	 $LN33@ExtractCom

; 7990 : 				{
; 7991 : 					bDirectSysEncMode = TRUE;
; 7992 : 					bDirectSysEncModeCommand = SYSENC_COMMAND_STARTUP_SEQ_RESUME;

  008ea	89 3d 00 00 00
	00		 mov	 DWORD PTR ?bDirectSysEncModeCommand@@3HA, edi ; bDirectSysEncModeCommand

; 7993 : 					ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

  008f0	e9 04 ff ff ff	 jmp	 $LN123@ExtractCom
$LN16@ExtractCom:

; 7994 : 				}
; 7995 : 				else
; 7996 : 				{
; 7997 : 					Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");
; 7998 : 					exit(0);
; 7999 : 				}
; 8000 : 				break;
; 8001 : 
; 8002 : 			case CommandEncDev:
; 8003 : 				// Resume process of creation of a non-sys-device-hosted volume (passed by Wizard when the user needs to UAC-elevate)
; 8004 : 				DirectDeviceEncMode = TRUE;

  008f5	89 35 00 00 00
	00		 mov	 DWORD PTR ?DirectDeviceEncMode@@3HA, esi ; DirectDeviceEncMode

; 8005 : 				break;

  008fb	e9 28 01 00 00	 jmp	 $LN39@ExtractCom
$LN15@ExtractCom:

; 8006 : 
; 8007 : 			case CommandResumeInplace:
; 8008 : 				// Resume interrupted process of non-system in-place encryption of a partition
; 8009 : 				DirectNonSysInplaceEncResumeMode = TRUE;

  00900	89 35 00 00 00
	00		 mov	 DWORD PTR ?DirectNonSysInplaceEncResumeMode@@3HA, esi ; DirectNonSysInplaceEncResumeMode

; 8010 : 				break;

  00906	e9 1d 01 00 00	 jmp	 $LN39@ExtractCom
$LN14@ExtractCom:

; 8011 : 
; 8012 : 			case CommandResumeInplaceLogOn:
; 8013 : 				// Ask the user whether to resume interrupted process of non-system in-place encryption of a partition
; 8014 : 				// This switch is passed only by the system (from the startup sequence).
; 8015 : 				DirectPromptNonSysInplaceEncResumeMode = TRUE;

  0090b	89 35 00 00 00
	00		 mov	 DWORD PTR ?DirectPromptNonSysInplaceEncResumeMode@@3HA, esi ; DirectPromptNonSysInplaceEncResumeMode

; 8016 : 				break;

  00911	e9 12 01 00 00	 jmp	 $LN39@ExtractCom
$LN13@ExtractCom:

; 8017 : 
; 8018 : 			case OptionNoIsoCheck:
; 8019 : 				bDontVerifyRescueDisk = TRUE;

  00916	89 35 00 00 00
	00		 mov	 DWORD PTR ?bDontVerifyRescueDisk@@3HA, esi ; bDontVerifyRescueDisk

; 8020 : 				break;

  0091c	e9 07 01 00 00	 jmp	 $LN39@ExtractCom
$LN12@ExtractCom:

; 8021 : 
; 8022 : 			case OptionHistory:
; 8023 : 				{
; 8024 : 					char szTmp[8];
; 8025 : 					GetArgumentValue (lpszCommandLineArgs, nArgPos, &i, nNoCommandLineArgs,
; 8026 : 						     szTmp, sizeof (szTmp));

  00921	8b 44 24 10	 mov	 eax, DWORD PTR _nNoCommandLineArgs$[esp+712]
  00925	6a 08		 push	 8
  00927	8d 94 24 a0 02
	00 00		 lea	 edx, DWORD PTR _szTmp$135030[esp+716]
  0092e	52		 push	 edx
  0092f	8b 54 24 24	 mov	 edx, DWORD PTR _nArgPos$135000[esp+720]
  00933	50		 push	 eax
  00934	8b 44 24 24	 mov	 eax, DWORD PTR _lpszCommandLineArgs$[esp+724]
  00938	8d 4c 24 20	 lea	 ecx, DWORD PTR _i$134959[esp+724]
  0093c	51		 push	 ecx
  0093d	52		 push	 edx
  0093e	50		 push	 eax
  0093f	e8 00 00 00 00	 call	 _GetArgumentValue

; 8027 : 					if (!_stricmp(szTmp,"y") || !_stricmp(szTmp,"yes"))

  00944	8d 8c 24 b4 02
	00 00		 lea	 ecx, DWORD PTR _szTmp$135030[esp+736]
  0094b	68 00 00 00 00	 push	 OFFSET ??_C@_01EANLCPLP@y?$AA@
  00950	51		 push	 ecx
  00951	e8 00 00 00 00	 call	 __stricmp
  00956	83 c4 20	 add	 esp, 32			; 00000020H
  00959	85 c0		 test	 eax, eax
  0095b	74 19		 je	 SHORT $LN10@ExtractCom
  0095d	8d 94 24 9c 02
	00 00		 lea	 edx, DWORD PTR _szTmp$135030[esp+712]
  00964	68 00 00 00 00	 push	 OFFSET ??_C@_03ICICOMAL@yes?$AA@
  00969	52		 push	 edx
  0096a	e8 00 00 00 00	 call	 __stricmp
  0096f	83 c4 08	 add	 esp, 8
  00972	85 c0		 test	 eax, eax
  00974	75 0c		 jne	 SHORT $LN11@ExtractCom
$LN10@ExtractCom:

; 8028 : 					{
; 8029 : 						bHistory = TRUE;

  00976	89 35 00 00 00
	00		 mov	 DWORD PTR _bHistory, esi

; 8030 : 						bHistoryCmdLine = TRUE;

  0097c	89 35 00 00 00
	00		 mov	 DWORD PTR ?bHistoryCmdLine@@3HA, esi ; bHistoryCmdLine
$LN11@ExtractCom:

; 8031 : 					}
; 8032 : 
; 8033 : 					if (!_stricmp(szTmp,"n") || !_stricmp(szTmp,"no"))

  00982	8d 84 24 9c 02
	00 00		 lea	 eax, DWORD PTR _szTmp$135030[esp+712]
  00989	68 00 00 00 00	 push	 OFFSET ??_C@_01EFFIKLCJ@n?$AA@
  0098e	50		 push	 eax
  0098f	e8 00 00 00 00	 call	 __stricmp
  00994	83 c4 08	 add	 esp, 8
  00997	85 c0		 test	 eax, eax
  00999	74 19		 je	 SHORT $LN8@ExtractCom
  0099b	8d 8c 24 9c 02
	00 00		 lea	 ecx, DWORD PTR _szTmp$135030[esp+712]
  009a2	68 00 00 00 00	 push	 OFFSET ??_C@_02KAJCLHKP@no?$AA@
  009a7	51		 push	 ecx
  009a8	e8 00 00 00 00	 call	 __stricmp
  009ad	83 c4 08	 add	 esp, 8
  009b0	85 c0		 test	 eax, eax
  009b2	75 74		 jne	 SHORT $LN39@ExtractCom
$LN8@ExtractCom:

; 8034 : 					{
; 8035 : 						bHistory = FALSE;

  009b4	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHistory, ebx

; 8036 : 						bHistoryCmdLine = TRUE;

  009ba	89 35 00 00 00
	00		 mov	 DWORD PTR ?bHistoryCmdLine@@3HA, esi ; bHistoryCmdLine

; 8037 : 					}
; 8038 : 				}
; 8039 : 				break;

  009c0	eb 66		 jmp	 SHORT $LN39@ExtractCom
$LN7@ExtractCom:

; 8040 : 				
; 8041 : 			case OptionTokenLib:
; 8042 : 				if (GetArgumentValue (lpszCommandLineArgs, nArgPos, &i, nNoCommandLineArgs, SecurityTokenLibraryPath, sizeof (SecurityTokenLibraryPath)) == HAS_ARGUMENT)

  009c2	8b 54 24 10	 mov	 edx, DWORD PTR _nNoCommandLineArgs$[esp+712]
  009c6	8b 4c 24 1c	 mov	 ecx, DWORD PTR _nArgPos$135000[esp+712]
  009ca	68 04 01 00 00	 push	 260			; 00000104H
  009cf	68 00 00 00 00	 push	 OFFSET _SecurityTokenLibraryPath
  009d4	52		 push	 edx
  009d5	8b 54 24 24	 mov	 edx, DWORD PTR _lpszCommandLineArgs$[esp+724]
  009d9	8d 44 24 20	 lea	 eax, DWORD PTR _i$134959[esp+724]
  009dd	50		 push	 eax
  009de	51		 push	 ecx
  009df	52		 push	 edx
  009e0	e8 00 00 00 00	 call	 _GetArgumentValue
  009e5	83 c4 18	 add	 esp, 24			; 00000018H
  009e8	3b c6		 cmp	 eax, esi
  009ea	75 07		 jne	 SHORT $LN6@ExtractCom

; 8043 : 					InitSecurityTokenLibrary();

  009ec	e8 00 00 00 00	 call	 _InitSecurityTokenLibrary

; 8044 : 				else

  009f1	eb 35		 jmp	 SHORT $LN39@ExtractCom
$LN6@ExtractCom:

; 8045 : 					Error ("COMMAND_LINE_ERROR");

  009f3	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@LGCKNJIO@COMMAND_LINE_ERROR?$AA@
  009f8	e8 00 00 00 00	 call	 _Error
  009fd	83 c4 04	 add	 esp, 4

; 8046 : 
; 8047 : 				break;

  00a00	eb 26		 jmp	 SHORT $LN39@ExtractCom
$LN4@ExtractCom:

; 8048 : 
; 8049 : 			case OptionQuit:
; 8050 : 				{
; 8051 : 					// Used to indicate non-install elevation
; 8052 : 					char szTmp[32];
; 8053 : 					GetArgumentValue (lpszCommandLineArgs, nArgPos, &i, nNoCommandLineArgs, szTmp, sizeof (szTmp));

  00a02	8b 4c 24 10	 mov	 ecx, DWORD PTR _nNoCommandLineArgs$[esp+712]
  00a06	6a 20		 push	 32			; 00000020H
  00a08	8d 84 24 a8 02
	00 00		 lea	 eax, DWORD PTR _szTmp$135044[esp+716]
  00a0f	50		 push	 eax
  00a10	8b 44 24 24	 mov	 eax, DWORD PTR _nArgPos$135000[esp+720]
  00a14	51		 push	 ecx
  00a15	8b 4c 24 24	 mov	 ecx, DWORD PTR _lpszCommandLineArgs$[esp+724]
  00a19	8d 54 24 20	 lea	 edx, DWORD PTR _i$134959[esp+724]
  00a1d	52		 push	 edx
  00a1e	50		 push	 eax
  00a1f	51		 push	 ecx
  00a20	e8 00 00 00 00	 call	 _GetArgumentValue
  00a25	83 c4 18	 add	 esp, 24			; 00000018H
$LN39@ExtractCom:
  00a28	8b 4c 24 14	 mov	 ecx, DWORD PTR _i$134959[esp+712]
  00a2c	8b 44 24 10	 mov	 eax, DWORD PTR _nNoCommandLineArgs$[esp+712]
  00a30	03 ce		 add	 ecx, esi
  00a32	3b c8		 cmp	 ecx, eax
  00a34	89 4c 24 14	 mov	 DWORD PTR _i$134959[esp+712], ecx
  00a38	0f 8c 53 f6 ff
	ff		 jl	 $LL40@ExtractCom
$LN116@ExtractCom:

; 8062 : 			}
; 8063 : 		}
; 8064 : 	}
; 8065 : 
; 8066 : 	/* Free up the command line arguments */
; 8067 : 	while (--nNoCommandLineArgs >= 0)

  00a3e	2b c6		 sub	 eax, esi
  00a40	89 44 24 10	 mov	 DWORD PTR _nNoCommandLineArgs$[esp+712], eax
  00a44	78 24		 js	 SHORT $LN118@ExtractCom
  00a46	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL2@ExtractCom:

; 8068 : 	{
; 8069 : 		free (lpszCommandLineArgs[nNoCommandLineArgs]);

  00a50	8b 54 24 18	 mov	 edx, DWORD PTR _lpszCommandLineArgs$[esp+712]
  00a54	8b 44 24 10	 mov	 eax, DWORD PTR _nNoCommandLineArgs$[esp+712]
  00a58	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  00a5b	51		 push	 ecx
  00a5c	e8 00 00 00 00	 call	 _free
  00a61	83 c4 04	 add	 esp, 4
  00a64	29 74 24 10	 sub	 DWORD PTR _nNoCommandLineArgs$[esp+712], esi
  00a68	79 e6		 jns	 SHORT $LL2@ExtractCom
$LN118@ExtractCom:

; 8070 : 	}
; 8071 : }

  00a6a	8b 8c 24 c4 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+712]
  00a71	5f		 pop	 edi
  00a72	5d		 pop	 ebp
  00a73	5b		 pop	 ebx
  00a74	5e		 pop	 esi
  00a75	33 cc		 xor	 ecx, esp
  00a77	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a7c	81 c4 b8 02 00
	00		 add	 esp, 696		; 000002b8H
  00a82	c3		 ret	 0
$LN33@ExtractCom:

; 7906 : 				}
; 7907 : 				else
; 7908 : 				{
; 7909 : 					Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  00a83	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  00a88	e8 00 00 00 00	 call	 _Warning
  00a8d	83 c4 04	 add	 esp, 4

; 7910 : 					exit(0);

  00a90	53		 push	 ebx
  00a91	e8 00 00 00 00	 call	 _exit
$LN3@ExtractCom:

; 8054 : 				}
; 8055 : 				break;
; 8056 : 
; 8057 : 			default:
; 8058 : 				DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_COMMANDHELP_DLG), hwndDlg, (DLGPROC)
; 8059 : 						CommandHelpDlgProc, (LPARAM) &as);

  00a96	8b 44 24 20	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[esp+712]
  00a9a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00aa0	8d 54 24 24	 lea	 edx, DWORD PTR _as$134999[esp+712]
  00aa4	52		 push	 edx
  00aa5	68 00 00 00 00	 push	 OFFSET _CommandHelpDlgProc@16
  00aaa	50		 push	 eax
  00aab	68 fd 01 00 00	 push	 509			; 000001fdH
  00ab0	51		 push	 ecx
  00ab1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 8060 : 
; 8061 : 				exit(0);

  00ab7	53		 push	 ebx
  00ab8	e8 00 00 00 00	 call	 _exit
$LN121@ExtractCom:
  00abd	8d 49 00	 npad	 3
$LN124@ExtractCom:

; 8070 : 	}
; 8071 : }

  00ac0	00 00 00 00	 DD	 $LN12@ExtractCom
  00ac4	00 00 00 00	 DD	 $LN13@ExtractCom
  00ac8	00 00 00 00	 DD	 $LN4@ExtractCom
  00acc	00 00 00 00	 DD	 $LN7@ExtractCom
  00ad0	00 00 00 00	 DD	 $LN19@ExtractCom
  00ad4	00 00 00 00	 DD	 $LN22@ExtractCom
  00ad8	00 00 00 00	 DD	 $LN31@ExtractCom
  00adc	00 00 00 00	 DD	 $LN16@ExtractCom
  00ae0	00 00 00 00	 DD	 $LN28@ExtractCom
  00ae4	00 00 00 00	 DD	 $LN14@ExtractCom
  00ae8	00 00 00 00	 DD	 $LN25@ExtractCom
  00aec	00 00 00 00	 DD	 $LN34@ExtractCom
  00af0	00 00 00 00	 DD	 $LN15@ExtractCom
_ExtractCommandLine ENDP
_TEXT	ENDS
PUBLIC	?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
;	COMDAT ?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T159185 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str, COMDAT
; _this$ = ecx

; 504  : 		{	// return string copy of character array

  00000	51		 push	 ecx
  00001	56		 push	 esi

; 505  : 		return (_Stringbuffer.str());

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	56		 push	 esi
  00007	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T159185[esp+12], 0
  00012	e8 00 00 00 00	 call	 ?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi

; 506  : 		}

  0001a	59		 pop	 ecx
  0001b	c2 04 00	 ret	 4
?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
_TEXT	ENDS
PUBLIC	?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::clear, COMDAT
; _this$ = ecx

; 43   : 		ios_base::clear((iostate)(_Mystrbuf == 0
; 44   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  00000	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __State$[esp-4]
  00008	75 03		 jne	 SHORT $LN4@clear@2
  0000a	83 c8 04	 or	 eax, 4
$LN4@clear@2:
  0000d	89 44 24 04	 mov	 DWORD PTR __State$[esp-4], eax
  00011	e9 00 00 00 00	 jmp	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::clear
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Buy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

  00000	56		 push	 esi

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;
; 1104 : 		if (_Capacity == 0)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Capacity$[esp]
  00005	33 c0		 xor	 eax, eax
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  0000d	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00010	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00013	3b f0		 cmp	 esi, eax
  00015	75 07		 jne	 SHORT $LN4@Buy
  00017	5f		 pop	 edi

; 1105 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	5e		 pop	 esi

; 1115 : 		}

  0001b	c2 04 00	 ret	 4
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

  0001e	81 fe e1 e1 e1
	01		 cmp	 esi, 31580641		; 01e1e1e1H
  00024	76 05		 jbe	 SHORT $LN2@Buy

; 1107 : 			_Xlen();	// result too long

  00026	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen
$LN2@Buy:

; 1108 : 		else
; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

  0002b	50		 push	 eax
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 ??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ; std::_Allocate<HostDevice>

; 1111 : 			_Mylast = _Myfirst;
; 1112 : 			_Myend = _Myfirst + _Capacity;

  00032	69 f6 88 00 00
	00		 imul	 esi, 136		; 00000088H
  00038	03 f0		 add	 esi, eax
  0003a	83 c4 08	 add	 esp, 8
  0003d	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00040	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00043	89 77 14	 mov	 DWORD PTR [edi+20], esi
  00046	5f		 pop	 edi

; 1113 : 			}
; 1114 : 		return (true);

  00047	b0 01		 mov	 al, 1
  00049	5e		 pop	 esi

; 1115 : 		}

  0004a	c2 04 00	 ret	 4
$LN15@Buy:
?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Buy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	83 c1 08	 add	 ecx, 8
  00007	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ

; 161  : 		}

  0000c	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
xdata$x	SEGMENT
__unwindtable$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z$0
__ehfuncinfo$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	ENDS
;	COMDAT ?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
_TEXT	SEGMENT
$T159235 = -20						; size = 4
__Lock$159259 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Byte$ = 8						; size = 1
?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen, COMDAT
; _this$ = ecx

; 123  : 		{	// convert _Byte to character using imbued locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 124  : 		const _Ctype& _Ctype_fac = _USE(getloc(), _Ctype);

  00026	8d 44 24 10	 lea	 eax, DWORD PTR $T159235[esp+36]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00030	50		 push	 eax
  00031	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 0
  00039	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
  0003e	8b 7c 24 14	 mov	 edi, DWORD PTR $T159235[esp+40]
  00042	83 c4 04	 add	 esp, 4
  00045	8b d8		 mov	 ebx, eax
  00047	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+44], -1
  0004f	85 ff		 test	 edi, edi
  00051	74 3d		 je	 SHORT $LN7@widen
  00053	6a 00		 push	 0
  00055	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$159259[esp+40]
  00059	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0005e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00061	85 c0		 test	 eax, eax
  00063	76 09		 jbe	 SHORT $LN9@widen
  00065	83 f8 ff	 cmp	 eax, -1
  00068	73 04		 jae	 SHORT $LN9@widen
  0006a	48		 dec	 eax
  0006b	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN9@widen:
  0006e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00071	f7 de		 neg	 esi
  00073	1b f6		 sbb	 esi, esi
  00075	f7 d6		 not	 esi
  00077	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$159259[esp+36]
  0007b	23 f7		 and	 esi, edi
  0007d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00082	85 f6		 test	 esi, esi
  00084	74 0a		 je	 SHORT $LN7@widen
  00086	8b 16		 mov	 edx, DWORD PTR [esi]
  00088	8b 02		 mov	 eax, DWORD PTR [edx]
  0008a	6a 01		 push	 1
  0008c	8b ce		 mov	 ecx, esi
  0008e	ff d0		 call	 eax
$LN7@widen:

; 125  : 		return (_Ctype_fac.widen(_Byte));

  00090	8b 13		 mov	 edx, DWORD PTR [ebx]
  00092	8b 44 24 28	 mov	 eax, DWORD PTR __Byte$[esp+32]
  00096	8b 52 28	 mov	 edx, DWORD PTR [edx+40]
  00099	50		 push	 eax
  0009a	8b cb		 mov	 ecx, ebx
  0009c	ff d2		 call	 edx

; 126  : 		}

  0009e	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a9	59		 pop	 ecx
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	83 c4 14	 add	 esp, 20			; 00000014H
  000b0	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T159235[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$0
__ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
_TEXT	SEGMENT
$T159277 = -44						; size = 4
$T159274 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 53   : 	{	// return string + NTCS

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 20	 sub	 esp, 32			; 00000020H
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 2c	 lea	 eax, DWORD PTR __$EHRec$[esp+56]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 54   : 	return (basic_string<_Elem, _Traits, _Alloc>(_Left) += _Right);

  00025	8b 4c 24 40	 mov	 ecx, DWORD PTR __Left$[esp+52]
  00029	33 ff		 xor	 edi, edi
  0002b	6a ff		 push	 -1
  0002d	57		 push	 edi
  0002e	33 c0		 xor	 eax, eax
  00030	51		 push	 ecx
  00031	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T159274[esp+68]
  00035	89 7c 24 18	 mov	 DWORD PTR $T159277[esp+68], edi
  00039	c7 44 24 34 07
	00 00 00	 mov	 DWORD PTR $T159274[esp+92], 7
  00041	89 7c 24 30	 mov	 DWORD PTR $T159274[esp+88], edi
  00045	66 89 44 24 20	 mov	 WORD PTR $T159274[esp+72], ax
  0004a	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0004f	8b 54 24 44	 mov	 edx, DWORD PTR __Right$[esp+52]
  00053	8b c2		 mov	 eax, edx
  00055	89 7c 24 34	 mov	 DWORD PTR __$EHRec$[esp+64], edi
  00059	8d 70 02	 lea	 esi, DWORD PTR [eax+2]
  0005c	8d 64 24 00	 npad	 4
$LL96@operator@15:
  00060	66 8b 08	 mov	 cx, WORD PTR [eax]
  00063	83 c0 02	 add	 eax, 2
  00066	66 3b cf	 cmp	 cx, di
  00069	75 f5		 jne	 SHORT $LL96@operator@15
  0006b	2b c6		 sub	 eax, esi
  0006d	d1 f8		 sar	 eax, 1
  0006f	50		 push	 eax
  00070	52		 push	 edx
  00071	8d 4c 24 18	 lea	 ecx, DWORD PTR $T159274[esp+64]
  00075	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  0007a	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  0007e	6a ff		 push	 -1
  00080	57		 push	 edi
  00081	33 d2		 xor	 edx, edx
  00083	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  0008a	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0008d	50		 push	 eax
  0008e	8b ce		 mov	 ecx, esi
  00090	66 89 56 04	 mov	 WORD PTR [esi+4], dx
  00094	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00099	83 7c 24 28 08	 cmp	 DWORD PTR $T159274[esp+80], 8
  0009e	72 0d		 jb	 SHORT $LN97@operator@15
  000a0	8b 44 24 14	 mov	 eax, DWORD PTR $T159274[esp+60]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000aa	83 c4 04	 add	 esp, 4
$LN97@operator@15:
  000ad	8b c6		 mov	 eax, esi

; 55   : 	}

  000af	8b 4c 24 2c	 mov	 ecx, DWORD PTR __$EHRec$[esp+56]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	83 c4 2c	 add	 esp, 44			; 0000002cH
  000c0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T159274[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 d8	 lea	 eax, DWORD PTR [edx-40]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?_Psave@?$_Facetptr@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >::_Psave
PUBLIC	??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >
;	COMDAT ?_Psave@?$_Facetptr@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$137778 = -36					; size = 4
__Lock$159682 = -32					; size = 4
__Lock$137777 = -28					; size = 4
$T159675 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$159704 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$137777[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A, 0 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$137778[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet@2
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$159682[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A, 0 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet@2
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A, eax ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
$LN10@use_facet@2:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$159682[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet@2:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet@2
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet@2
$LN30@use_facet@2:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet@2
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet@2
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet@2
$LN20@use_facet@2:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet@2
$LN16@use_facet@2:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet@2:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet@2
$LN31@use_facet@2:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet@2

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet@2
$LN4@use_facet@2:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$137778[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet@2

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T159675[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T159675[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet@2:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$137778[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$159704[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet@2
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet@2:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$159704[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet@2:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$137777[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$137777[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >
PUBLIC	?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<wchar_t> >::_Psave
PUBLIC	??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<wchar_t> >
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::numpunct<wchar_t> >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Psave$138137 = -36					; size = 4
__Lock$159729 = -32					; size = 4
__Lock$138136 = -28					; size = 4
$T159722 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__Lock$159752 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z PROC ; std::use_facet<std::numpunct<wchar_t> >, COMDAT

; 486  : {	// get facet reference from locale

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 18	 sub	 esp, 24			; 00000018H
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 28	 lea	 eax, DWORD PTR __$EHRec$[esp+52]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 487  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00026	6a 00		 push	 0
  00028	8d 4c 24 1c	 lea	 ecx, DWORD PTR __Lock$138136[esp+56]
  0002c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 488  : 		const locale::facet *_Psave =
; 489  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 490  : 
; 491  : 		size_t _Id = _Facet::id;

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$numpunct@_W@std@@2V0locale@2@A, 0 ; std::numpunct<wchar_t>::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<wchar_t> >::_Psave
  0003e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+60], 0
  00046	89 5c 24 10	 mov	 DWORD PTR __Psave$138137[esp+52], ebx
  0004a	75 2d		 jne	 SHORT $LN11@use_facet@3
  0004c	6a 00		 push	 0
  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$159729[esp+56]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?id@?$numpunct@_W@std@@2V0locale@2@A, 0 ; std::numpunct<wchar_t>::id
  0005e	75 10		 jne	 SHORT $LN10@use_facet@3
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00065	40		 inc	 eax
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$numpunct@_W@std@@2V0locale@2@A, eax ; std::numpunct<wchar_t>::id
$LN10@use_facet@3:
  00070	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$159729[esp+52]
  00074	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN11@use_facet@3:

; 492  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00079	8b 7c 24 38	 mov	 edi, DWORD PTR __Loc$[esp+48]
  0007d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
  00083	8b 07		 mov	 eax, DWORD PTR [edi]
  00085	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00088	73 22		 jae	 SHORT $LN20@use_facet@3
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00090	85 c9		 test	 ecx, ecx
  00092	75 1c		 jne	 SHORT $LN16@use_facet@3
$LN30@use_facet@3:
  00094	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00098	74 16		 je	 SHORT $LN16@use_facet@3
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000a2	73 12		 jae	 SHORT $LN31@use_facet@3
  000a4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a7	8b 34 b2	 mov	 esi, DWORD PTR [edx+esi*4]
  000aa	eb 06		 jmp	 SHORT $LN15@use_facet@3
$LN20@use_facet@3:
  000ac	33 c9		 xor	 ecx, ecx
  000ae	eb e4		 jmp	 SHORT $LN30@use_facet@3
$LN16@use_facet@3:
  000b0	8b f1		 mov	 esi, ecx
$LN15@use_facet@3:

; 493  : 
; 494  : 		if (_Pf != 0)

  000b2	85 f6		 test	 esi, esi
  000b4	75 6b		 jne	 SHORT $LN28@use_facet@3
$LN31@use_facet@3:

; 495  : 			;	// got facet from locale
; 496  : 		else if (_Psave != 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	74 04		 je	 SHORT $LN4@use_facet@3

; 497  : 			_Pf = _Psave;	// lazy facet already allocated

  000ba	8b f3		 mov	 esi, ebx
  000bc	eb 63		 jmp	 SHORT $LN28@use_facet@3
$LN4@use_facet@3:

; 498  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	8d 44 24 10	 lea	 eax, DWORD PTR __Psave$138137[esp+52]
  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<wchar_t>::_Getcat
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	75 1d		 jne	 SHORT $LN2@use_facet@3

; 499  : 
; 500  :  #if _HAS_EXCEPTIONS
; 501  : 		_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000d6	8d 4c 24 20	 lea	 ecx, DWORD PTR $T159722[esp+56]
  000da	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000df	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000e4	8d 4c 24 20	 lea	 ecx, DWORD PTR $T159722[esp+56]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@use_facet@3:

; 502  : 
; 503  : 	#else /* _HAS_EXCEPTIONS */
; 504  : 			abort();	// lazy disallowed
; 505  : 	#endif /* _HAS_EXCEPTIONS */
; 506  : 
; 507  : 		else
; 508  : 			{	// queue up lazy facet for destruction
; 509  : 			_Pf = _Psave;

  000ee	8b 74 24 10	 mov	 esi, DWORD PTR __Psave$138137[esp+52]

; 510  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 511  : 
; 512  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 513  : 			_Pfmod->_Incref();

  000f2	6a 00		 push	 0
  000f4	8d 4c 24 3c	 lea	 ecx, DWORD PTR __Lock$159752[esp+52]
  000f8	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::numpunct<wchar_t> >::_Psave
  000fe	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00103	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00106	83 f8 ff	 cmp	 eax, -1
  00109	73 04		 jae	 SHORT $LN24@use_facet@3
  0010b	40		 inc	 eax
  0010c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN24@use_facet@3:
  0010f	8d 4c 24 38	 lea	 ecx, DWORD PTR __Lock$159752[esp+48]
  00113	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 514  : 			_Pfmod->_Register();

  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::facet_Register
  0011e	83 c4 04	 add	 esp, 4
$LN28@use_facet@3:

; 515  : 			}
; 516  : 
; 517  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00121	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$138136[esp+52]
  00125	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  0012d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00132	8b c6		 mov	 eax, esi

; 518  : 	_END_LOCK()
; 519  : 	}

  00134	8b 4c 24 28	 mov	 ecx, DWORD PTR __$EHRec$[esp+52]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	83 c4 24	 add	 esp, 36			; 00000024H
  00146	c3		 ret	 0
$LN33@use_facet@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$138136[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 dc	 lea	 eax, DWORD PTR [edx-36]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::numpunct<wchar_t> >
PUBLIC	??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<HostDevice> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

  00000	56		 push	 esi

; 233  : 	for (; _First != _Last; ++_First)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 13		 je	 SHORT $LN1@Destroy_ra
  0000e	8b ff		 npad	 2
$LL3@Destroy_ra:

; 234  : 		_Al.destroy(_First);

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00017	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0001d	3b f7		 cmp	 esi, edi
  0001f	75 ef		 jne	 SHORT $LL3@Destroy_ra
$LN1@Destroy_ra:
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 235  : 	}

  00023	c3		 ret	 0
??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@V?$allocator@UHostDevice@@@2@@stdext@@YAPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@0PAU1@AAV?$allocator@UHostDevice@@@3@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@V?$allocator@UHostDevice@@@2@@stdext@@YAPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@0PAU1@AAV?$allocator@UHostDevice@@@3@@Z
_TEXT	SEGMENT
$T159791 = -4						; size = 1
__First$ = 8						; size = 8
__Cat$159796 = 16					; size = 1
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
__Al$ = 28						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@V?$allocator@UHostDevice@@@2@@stdext@@YAPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@0PAU1@AAV?$allocator@UHostDevice@@@3@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$159796[esp]
  00005	8b 54 24 1c	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T159791[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T159791[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 1c	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Last$[esp+12]
  0001a	52		 push	 edx
  0001b	8b 54 24 18	 mov	 edx, DWORD PTR __First$[esp+16]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >

; 823  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@PAUHostDevice@@V?$allocator@UHostDevice@@@2@@stdext@@YAPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@0PAU1@AAV?$allocator@UHostDevice@@@3@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >,HostDevice *,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??_C@_0BK@JMBFHJFE@TRIPLE_DOT_GLYPH_ELLIPSIS?$AA@ ; `string'
PUBLIC	??_C@_1JO@BPJIPIJP@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@ ; `string'
PUBLIC	_DisplayPortionsOfKeys
EXTRN	?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:PROC ; SingleStringToWide
;	COMDAT ??_C@_0BK@JMBFHJFE@TRIPLE_DOT_GLYPH_ELLIPSIS?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_0BK@JMBFHJFE@TRIPLE_DOT_GLYPH_ELLIPSIS?$AA@ DB 'TRIPLE_DOT_GLYPH_EL'
	DB	'LIPSIS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1JO@BPJIPIJP@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@
CONST	SEGMENT
??_C@_1JO@BPJIPIJP@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@ DB '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 00H
	DB	00H						; `string'
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\format\tcformat.c
CONST	ENDS
;	COMDAT _DisplayPortionsOfKeys
_TEXT	SEGMENT
$T159843 = -88						; size = 4
$T159838 = -84						; size = 28
$T159833 = -84						; size = 28
$T159839 = -56						; size = 28
$T159835 = -56						; size = 28
$T159840 = -28						; size = 28
$T159834 = -28						; size = 28
_headerKeyHandle$ = 8					; size = 4
_masterKeyHandle$ = 12					; size = 4
_headerKeyStr$ = 16					; size = 4
_masterKeyStr$ = 20					; size = 4
_hideKeys$ = 24						; size = 4
_DisplayPortionsOfKeys PROC				; COMDAT

; 1998 : {

  00000	83 ec 58	 sub	 esp, 88			; 00000058H
  00003	53		 push	 ebx
  00004	55		 push	 ebp

; 1999 : 	const wchar_t *hiddenKey = L"********************************                                              ";
; 2000 : 
; 2001 : 	SetWindowTextW (headerKeyHandle, hideKeys ? hiddenKey : (SingleStringToWide (headerKeyStr) + GetString ("TRIPLE_DOT_GLYPH_ELLIPSIS")).c_str());

  00005	8b 6c 24 74	 mov	 ebp, DWORD PTR _hideKeys$[esp+92]

; 2002 : 	SetWindowTextW (masterKeyHandle, hideKeys ? hiddenKey : (SingleStringToWide (masterKeyStr) + GetString ("TRIPLE_DOT_GLYPH_ELLIPSIS")).c_str());

  00009	33 db		 xor	 ebx, ebx
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	89 5c 24 10	 mov	 DWORD PTR $T159843[esp+104], ebx
  00011	3b eb		 cmp	 ebp, ebx
  00013	74 0a		 je	 SHORT $LN3@DisplayPor
  00015	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1JO@BPJIPIJP@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@
  0001a	8d 7b 08	 lea	 edi, DWORD PTR [ebx+8]
  0001d	eb 72		 jmp	 SHORT $LN54@DisplayPor
$LN3@DisplayPor:

; 1999 : 	const wchar_t *hiddenKey = L"********************************                                              ";
; 2000 : 
; 2001 : 	SetWindowTextW (headerKeyHandle, hideKeys ? hiddenKey : (SingleStringToWide (headerKeyStr) + GetString ("TRIPLE_DOT_GLYPH_ELLIPSIS")).c_str());

  0001f	8b 54 24 74	 mov	 edx, DWORD PTR _headerKeyStr$[esp+100]
  00023	8b c2		 mov	 eax, edx
  00025	c7 44 24 2c 0f
	00 00 00	 mov	 DWORD PTR $T159833[esp+128], 15 ; 0000000fH
  0002d	89 5c 24 28	 mov	 DWORD PTR $T159833[esp+124], ebx
  00031	88 5c 24 18	 mov	 BYTE PTR $T159833[esp+108], bl
  00035	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL261@DisplayPor:
  00038	8a 08		 mov	 cl, BYTE PTR [eax]
  0003a	40		 inc	 eax
  0003b	84 c9		 test	 cl, cl
  0003d	75 f9		 jne	 SHORT $LL261@DisplayPor
  0003f	2b c6		 sub	 eax, esi
  00041	50		 push	 eax
  00042	52		 push	 edx
  00043	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T159833[esp+112]
  00047	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@JMBFHJFE@TRIPLE_DOT_GLYPH_ELLIPSIS?$AA@
  00051	bb 07 00 00 00	 mov	 ebx, 7
  00056	e8 00 00 00 00	 call	 _GetString
  0005b	83 c4 04	 add	 esp, 4
  0005e	50		 push	 eax
  0005f	8d 44 24 18	 lea	 eax, DWORD PTR $T159833[esp+108]
  00063	50		 push	 eax
  00064	8d 4c 24 54	 lea	 ecx, DWORD PTR $T159834[esp+112]
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  0006e	83 c4 08	 add	 esp, 8
  00071	50		 push	 eax
  00072	8d 54 24 38	 lea	 edx, DWORD PTR $T159835[esp+112]
  00076	52		 push	 edx
  00077	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0007c	bf 08 00 00 00	 mov	 edi, 8
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH
  00084	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  00087	72 05		 jb	 SHORT $LN53@DisplayPor
  00089	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0008c	eb 03		 jmp	 SHORT $LN54@DisplayPor
$LN53@DisplayPor:
  0008e	83 c0 04	 add	 eax, 4
$LN54@DisplayPor:
  00091	50		 push	 eax
  00092	8b 44 24 70	 mov	 eax, DWORD PTR _headerKeyHandle$[esp+104]
  00096	50		 push	 eax
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
  0009d	f6 c3 04	 test	 bl, 4
  000a0	74 2d		 je	 SHORT $LN264@DisplayPor
  000a2	83 e3 fb	 and	 ebx, -5			; fffffffbH
  000a5	39 7c 24 48	 cmp	 DWORD PTR $T159835[esp+128], edi
  000a9	72 0d		 jb	 SHORT $LN73@DisplayPor
  000ab	8b 4c 24 34	 mov	 ecx, DWORD PTR $T159835[esp+108]
  000af	51		 push	 ecx
  000b0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000b5	83 c4 04	 add	 esp, 4
$LN73@DisplayPor:
  000b8	33 f6		 xor	 esi, esi
  000ba	33 d2		 xor	 edx, edx
  000bc	c7 44 24 48 07
	00 00 00	 mov	 DWORD PTR $T159835[esp+128], 7
  000c4	89 74 24 44	 mov	 DWORD PTR $T159835[esp+124], esi
  000c8	66 89 54 24 34	 mov	 WORD PTR $T159835[esp+108], dx
  000cd	eb 02		 jmp	 SHORT $LN81@DisplayPor
$LN264@DisplayPor:
  000cf	33 f6		 xor	 esi, esi
$LN81@DisplayPor:
  000d1	f6 c3 02	 test	 bl, 2
  000d4	74 29		 je	 SHORT $LN109@DisplayPor
  000d6	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000d9	39 7c 24 64	 cmp	 DWORD PTR $T159834[esp+128], edi
  000dd	72 0d		 jb	 SHORT $LN101@DisplayPor
  000df	8b 44 24 50	 mov	 eax, DWORD PTR $T159834[esp+108]
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e9	83 c4 04	 add	 esp, 4
$LN101@DisplayPor:
  000ec	33 c9		 xor	 ecx, ecx
  000ee	c7 44 24 64 07
	00 00 00	 mov	 DWORD PTR $T159834[esp+128], 7
  000f6	89 74 24 60	 mov	 DWORD PTR $T159834[esp+124], esi
  000fa	66 89 4c 24 50	 mov	 WORD PTR $T159834[esp+108], cx
$LN109@DisplayPor:
  000ff	f6 c3 01	 test	 bl, 1
  00102	74 17		 je	 SHORT $LN263@DisplayPor
  00104	83 e3 fe	 and	 ebx, -2			; fffffffeH
  00107	83 7c 24 2c 10	 cmp	 DWORD PTR $T159833[esp+128], 16 ; 00000010H
  0010c	72 0d		 jb	 SHORT $LN263@DisplayPor
  0010e	8b 54 24 18	 mov	 edx, DWORD PTR $T159833[esp+108]
  00112	52		 push	 edx
  00113	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00118	83 c4 04	 add	 esp, 4
$LN263@DisplayPor:

; 2002 : 	SetWindowTextW (masterKeyHandle, hideKeys ? hiddenKey : (SingleStringToWide (masterKeyStr) + GetString ("TRIPLE_DOT_GLYPH_ELLIPSIS")).c_str());

  0011b	3b ee		 cmp	 ebp, esi
  0011d	74 07		 je	 SHORT $LN5@DisplayPor
  0011f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1JO@BPJIPIJP@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@
  00124	eb 70		 jmp	 SHORT $LN178@DisplayPor
$LN5@DisplayPor:
  00126	8b 54 24 78	 mov	 edx, DWORD PTR _masterKeyStr$[esp+100]
  0012a	8b c2		 mov	 eax, edx
  0012c	89 74 24 28	 mov	 DWORD PTR $T159838[esp+124], esi
  00130	c7 44 24 2c 0f
	00 00 00	 mov	 DWORD PTR $T159838[esp+128], 15 ; 0000000fH
  00138	c6 44 24 18 00	 mov	 BYTE PTR $T159838[esp+108], 0
  0013d	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL262@DisplayPor:
  00140	8a 08		 mov	 cl, BYTE PTR [eax]
  00142	40		 inc	 eax
  00143	84 c9		 test	 cl, cl
  00145	75 f9		 jne	 SHORT $LL262@DisplayPor
  00147	2b c6		 sub	 eax, esi
  00149	50		 push	 eax
  0014a	52		 push	 edx
  0014b	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T159838[esp+112]
  0014f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00154	0b df		 or	 ebx, edi
  00156	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@JMBFHJFE@TRIPLE_DOT_GLYPH_ELLIPSIS?$AA@
  0015b	83 cb 30	 or	 ebx, 48			; 00000030H
  0015e	e8 00 00 00 00	 call	 _GetString
  00163	83 c4 04	 add	 esp, 4
  00166	50		 push	 eax
  00167	8d 44 24 18	 lea	 eax, DWORD PTR $T159838[esp+108]
  0016b	50		 push	 eax
  0016c	8d 4c 24 38	 lea	 ecx, DWORD PTR $T159839[esp+112]
  00170	51		 push	 ecx
  00171	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  00176	83 c4 08	 add	 esp, 8
  00179	50		 push	 eax
  0017a	8d 54 24 54	 lea	 edx, DWORD PTR $T159840[esp+112]
  0017e	52		 push	 edx
  0017f	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00184	83 c4 0c	 add	 esp, 12			; 0000000cH
  00187	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  0018a	72 05		 jb	 SHORT $LN177@DisplayPor
  0018c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0018f	eb 03		 jmp	 SHORT $LN266@DisplayPor
$LN177@DisplayPor:
  00191	83 c0 04	 add	 eax, 4
$LN266@DisplayPor:
  00194	33 f6		 xor	 esi, esi
$LN178@DisplayPor:
  00196	50		 push	 eax
  00197	8b 44 24 74	 mov	 eax, DWORD PTR _masterKeyHandle$[esp+104]
  0019b	50		 push	 eax
  0019c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
  001a2	f6 c3 20	 test	 bl, 32			; 00000020H
  001a5	74 29		 je	 SHORT $LN265@DisplayPor
  001a7	83 e3 df	 and	 ebx, -33		; ffffffdfH
  001aa	39 7c 24 64	 cmp	 DWORD PTR $T159840[esp+128], edi
  001ae	72 0d		 jb	 SHORT $LN197@DisplayPor
  001b0	8b 4c 24 50	 mov	 ecx, DWORD PTR $T159840[esp+108]
  001b4	51		 push	 ecx
  001b5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001ba	83 c4 04	 add	 esp, 4
$LN197@DisplayPor:
  001bd	33 d2		 xor	 edx, edx
  001bf	c7 44 24 64 07
	00 00 00	 mov	 DWORD PTR $T159840[esp+128], 7
  001c7	89 74 24 60	 mov	 DWORD PTR $T159840[esp+124], esi
  001cb	66 89 54 24 50	 mov	 WORD PTR $T159840[esp+108], dx
$LN265@DisplayPor:
  001d0	f6 c3 10	 test	 bl, 16			; 00000010H
  001d3	74 29		 je	 SHORT $LN233@DisplayPor
  001d5	83 e3 ef	 and	 ebx, -17		; ffffffefH
  001d8	39 7c 24 48	 cmp	 DWORD PTR $T159839[esp+128], edi
  001dc	72 0d		 jb	 SHORT $LN225@DisplayPor
  001de	8b 44 24 34	 mov	 eax, DWORD PTR $T159839[esp+108]
  001e2	50		 push	 eax
  001e3	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001e8	83 c4 04	 add	 esp, 4
$LN225@DisplayPor:
  001eb	33 c9		 xor	 ecx, ecx
  001ed	c7 44 24 48 07
	00 00 00	 mov	 DWORD PTR $T159839[esp+128], 7
  001f5	89 74 24 44	 mov	 DWORD PTR $T159839[esp+124], esi
  001f9	66 89 4c 24 34	 mov	 WORD PTR $T159839[esp+108], cx
$LN233@DisplayPor:
  001fe	5f		 pop	 edi
  001ff	5e		 pop	 esi
  00200	5d		 pop	 ebp
  00201	f6 c3 08	 test	 bl, 8
  00204	5b		 pop	 ebx
  00205	74 14		 je	 SHORT $LN251@DisplayPor
  00207	83 7c 24 1c 10	 cmp	 DWORD PTR $T159838[esp+112], 16 ; 00000010H
  0020c	72 0d		 jb	 SHORT $LN251@DisplayPor
  0020e	8b 54 24 08	 mov	 edx, DWORD PTR $T159838[esp+92]
  00212	52		 push	 edx
  00213	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00218	83 c4 04	 add	 esp, 4
$LN251@DisplayPor:

; 2003 : }

  0021b	83 c4 58	 add	 esp, 88			; 00000058H
  0021e	c3		 ret	 0
_DisplayPortionsOfKeys ENDP
_TEXT	ENDS
PUBLIC	?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate, COMDAT
; _this$ = ecx

; 54   : 		if (_State != goodbit)

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __State$[esp-4]
  00004	85 d2		 test	 edx, edx
  00006	74 17		 je	 SHORT $LN6@setstate

; 55   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00008	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000b	0b c2		 or	 eax, edx
  0000d	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00011	75 03		 jne	 SHORT $LN8@setstate
  00013	83 c8 04	 or	 eax, 4
$LN8@setstate:
  00016	89 44 24 04	 mov	 DWORD PTR __State$[esp-4], eax
  0001a	e9 00 00 00 00	 jmp	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN6@setstate:

; 56   : 		}

  0001f	c2 08 00	 ret	 8
?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
_TEXT	ENDS
PUBLIC	??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	6a 04		 push	 4
  00026	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002b	33 c9		 xor	 ecx, ecx
  0002d	83 c4 04	 add	 esp, 4
  00030	3b c1		 cmp	 eax, ecx
  00032	74 04		 je	 SHORT $LN13@vector
  00034	89 30		 mov	 DWORD PTR [eax], esi
  00036	eb 02		 jmp	 SHORT $LN14@vector
$LN13@vector:
  00038	33 c0		 xor	 eax, eax
$LN14@vector:
  0003a	89 06		 mov	 DWORD PTR [esi], eax

; 471  : 		_Buy(0);

  0003c	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  0003f	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00042	89 4e 14	 mov	 DWORD PTR [esi+20], ecx

; 472  : 		}

  00045	8b c6		 mov	 eax, esi
  00047	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$3
__ehfuncinfo$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -92				; size = 4
$T161103 = -88						; size = 8
$T161098 = -88						; size = 4
$T161100 = -80						; size = 28
$T161099 = -80						; size = 28
$T161104 = -52						; size = 8
__Str$136765 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 1
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1123 : 		{	// put formatted bool to _Dest

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 50	 sub	 esp, 80			; 00000050H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 4c	 mov	 DWORD PTR __$ArrayPad$[esp+92], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 44 24 64	 lea	 eax, DWORD PTR __$EHRec$[esp+112]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b ac 24 80 00
	00 00		 mov	 ebp, DWORD PTR __Iosbase$[esp+108]

; 1124 : 		_DEBUG_POINTER(_Dest);
; 1125 : 		if (!(_Iosbase.flags() & ios_base::boolalpha))

  00039	f7 45 10 00 40
	00 00		 test	 DWORD PTR [ebp+16], 16384 ; 00004000H
  00040	8b 74 24 74	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+108]
  00044	8b f9		 mov	 edi, ecx

; 1144 : 				}
; 1145 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  00046	89 74 24 14	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+112], esi
  0004a	75 31		 jne	 SHORT $LN5@do_put@2
  0004c	0f b6 8c 24 88
	00 00 00	 movzx	 ecx, BYTE PTR __Val$[esp+108]
  00054	8b 94 24 84 00
	00 00		 mov	 edx, DWORD PTR __Fill$[esp+108]
  0005b	8b 07		 mov	 eax, DWORD PTR [edi]
  0005d	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00060	51		 push	 ecx
  00061	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+116]
  00068	52		 push	 edx
  00069	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+116]
  00070	55		 push	 ebp
  00071	51		 push	 ecx
  00072	52		 push	 edx
  00073	56		 push	 esi
  00074	8b cf		 mov	 ecx, edi
  00076	ff d0		 call	 eax
  00078	e9 76 01 00 00	 jmp	 $LN150@do_put@2
$LN5@do_put@2:

; 1126 : 			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
; 1127 : 		else
; 1128 : 			{	// put "false" or "true"
; 1129 : 			const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  0007d	8d 4c 24 18	 lea	 ecx, DWORD PTR $T161098[esp+112]
  00081	51		 push	 ecx
  00082	8b cd		 mov	 ecx, ebp
  00084	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00089	33 db		 xor	 ebx, ebx
  0008b	50		 push	 eax
  0008c	89 5c 24 70	 mov	 DWORD PTR __$EHRec$[esp+124], ebx
  00090	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<wchar_t> >
  00095	83 c4 04	 add	 esp, 4
  00098	8d 4c 24 18	 lea	 ecx, DWORD PTR $T161098[esp+112]
  0009c	8b f0		 mov	 esi, eax
  0009e	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 1130 : 			_Mystr _Str;

  000a3	33 d2		 xor	 edx, edx
  000a5	c7 44 24 5c 07
	00 00 00	 mov	 DWORD PTR __Str$136765[esp+136], 7
  000ad	89 5c 24 58	 mov	 DWORD PTR __Str$136765[esp+132], ebx
  000b1	66 89 54 24 48	 mov	 WORD PTR __Str$136765[esp+116], dx
  000b6	bb 01 00 00 00	 mov	 ebx, 1
  000bb	89 5c 24 6c	 mov	 DWORD PTR __$EHRec$[esp+120], ebx

; 1131 : 			if (_Val)
; 1132 : 				_Str.assign(_Punct_fac.truename());

  000bf	8b ce		 mov	 ecx, esi
  000c1	38 94 24 88 00
	00 00		 cmp	 BYTE PTR __Val$[esp+108], dl
  000c8	74 2f		 je	 SHORT $LN3@do_put@2
  000ca	8d 44 24 20	 lea	 eax, DWORD PTR $T161099[esp+112]
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ?truename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::numpunct<wchar_t>::truename
  000d4	6a ff		 push	 -1
  000d6	6a 00		 push	 0
  000d8	50		 push	 eax
  000d9	8d 4c 24 50	 lea	 ecx, DWORD PTR __Str$136765[esp+124]
  000dd	c6 44 24 78 02	 mov	 BYTE PTR __$EHRec$[esp+132], 2
  000e2	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  000e7	83 7c 24 38 08	 cmp	 DWORD PTR $T161099[esp+136], 8
  000ec	88 5c 24 6c	 mov	 BYTE PTR __$EHRec$[esp+120], bl
  000f0	72 3c		 jb	 SHORT $LN100@do_put@2
  000f2	8b 4c 24 24	 mov	 ecx, DWORD PTR $T161099[esp+116]
  000f6	51		 push	 ecx

; 1133 : 			else

  000f7	eb 2d		 jmp	 SHORT $LN163@do_put@2
$LN3@do_put@2:

; 1134 : 				_Str.assign(_Punct_fac.falsename());

  000f9	8d 54 24 20	 lea	 edx, DWORD PTR $T161100[esp+112]
  000fd	52		 push	 edx
  000fe	e8 00 00 00 00	 call	 ?falsename@?$numpunct@_W@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::numpunct<wchar_t>::falsename
  00103	6a ff		 push	 -1
  00105	6a 00		 push	 0
  00107	50		 push	 eax
  00108	8d 4c 24 50	 lea	 ecx, DWORD PTR __Str$136765[esp+124]
  0010c	c6 44 24 78 03	 mov	 BYTE PTR __$EHRec$[esp+132], 3
  00111	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00116	83 7c 24 38 08	 cmp	 DWORD PTR $T161100[esp+136], 8
  0011b	88 5c 24 6c	 mov	 BYTE PTR __$EHRec$[esp+120], bl
  0011f	72 0d		 jb	 SHORT $LN100@do_put@2
  00121	8b 44 24 24	 mov	 eax, DWORD PTR $T161100[esp+116]
  00125	50		 push	 eax
$LN163@do_put@2:
  00126	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0012b	83 c4 04	 add	 esp, 4
$LN100@do_put@2:

; 1135 : 
; 1136 : 			size_t _Fillcount = _Iosbase.width() <= 0
; 1137 : 				|| (size_t)_Iosbase.width() <= _Str.size()
; 1138 : 					? 0 : (size_t)_Iosbase.width() - _Str.size();

  0012e	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00131	8b 4c 24 58	 mov	 ecx, DWORD PTR __Str$136765[esp+132]
  00135	85 c0		 test	 eax, eax
  00137	7e 0a		 jle	 SHORT $LN8@do_put@2
  00139	3b c1		 cmp	 eax, ecx
  0013b	76 06		 jbe	 SHORT $LN8@do_put@2
  0013d	2b c1		 sub	 eax, ecx
  0013f	8b f0		 mov	 esi, eax
  00141	eb 02		 jmp	 SHORT $LN9@do_put@2
$LN8@do_put@2:
  00143	33 f6		 xor	 esi, esi
$LN9@do_put@2:

; 1139 : 
; 1140 : 			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)

  00145	8b 55 10	 mov	 edx, DWORD PTR [ebp+16]
  00148	8b 9c 24 84 00
	00 00		 mov	 ebx, DWORD PTR __Fill$[esp+108]
  0014f	81 e2 c0 01 00
	00		 and	 edx, 448		; 000001c0H
  00155	83 fa 40	 cmp	 edx, 64			; 00000040H
  00158	74 30		 je	 SHORT $LN1@do_put@2

; 1141 : 				{	// put leading fill
; 1142 : 				_Dest = _Rep(_Dest, _Fill, _Fillcount);

  0015a	8b 44 24 7c	 mov	 eax, DWORD PTR __Dest$[esp+112]
  0015e	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  00162	56		 push	 esi
  00163	53		 push	 ebx
  00164	50		 push	 eax
  00165	51		 push	 ecx
  00166	8d 54 24 28	 lea	 edx, DWORD PTR $T161103[esp+128]
  0016a	52		 push	 edx
  0016b	57		 push	 edi
  0016c	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  00171	8b 08		 mov	 ecx, DWORD PTR [eax]
  00173	89 8c 24 90 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], ecx
  0017a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1143 : 				_Fillcount = 0;

  0017d	8b 4c 24 70	 mov	 ecx, DWORD PTR __Str$136765[esp+156]
  00181	83 c4 18	 add	 esp, 24			; 00000018H
  00184	89 54 24 7c	 mov	 DWORD PTR __Dest$[esp+112], edx
  00188	33 f6		 xor	 esi, esi
$LN1@do_put@2:

; 1144 : 				}
; 1145 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  0018a	83 7c 24 5c 08	 cmp	 DWORD PTR __Str$136765[esp+136], 8
  0018f	8b 44 24 48	 mov	 eax, DWORD PTR __Str$136765[esp+116]
  00193	73 04		 jae	 SHORT $LN129@do_put@2
  00195	8d 44 24 48	 lea	 eax, DWORD PTR __Str$136765[esp+116]
$LN129@do_put@2:
  00199	51		 push	 ecx
  0019a	8b 4c 24 7c	 mov	 ecx, DWORD PTR __Dest$[esp+112]
  0019e	50		 push	 eax
  0019f	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+120]
  001a6	50		 push	 eax
  001a7	51		 push	 ecx
  001a8	8d 54 24 4c	 lea	 edx, DWORD PTR $T161104[esp+128]
  001ac	52		 push	 edx
  001ad	57		 push	 edi
  001ae	e8 00 00 00 00	 call	 ?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put
  001b3	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1146 : 			_Iosbase.width(0);
; 1147 : 			return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  001b5	56		 push	 esi
  001b6	8b 74 24 30	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+140]
  001ba	53		 push	 ebx
  001bb	89 8c 24 98 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], ecx
  001c2	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001c5	50		 push	 eax
  001c6	51		 push	 ecx
  001c7	56		 push	 esi
  001c8	57		 push	 edi
  001c9	89 84 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], eax
  001d0	c7 45 18 00 00
	00 00		 mov	 DWORD PTR [ebp+24], 0
  001d7	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  001dc	83 c4 30	 add	 esp, 48			; 00000030H
  001df	83 7c 24 5c 08	 cmp	 DWORD PTR __Str$136765[esp+136], 8
  001e4	72 0d		 jb	 SHORT $LN150@do_put@2
  001e6	8b 44 24 48	 mov	 eax, DWORD PTR __Str$136765[esp+116]
  001ea	50		 push	 eax
  001eb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001f0	83 c4 04	 add	 esp, 4
$LN150@do_put@2:
  001f3	8b c6		 mov	 eax, esi

; 1148 : 			}
; 1149 : 		}

  001f5	8b 4c 24 64	 mov	 ecx, DWORD PTR __$EHRec$[esp+112]
  001f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00200	59		 pop	 ecx
  00201	5f		 pop	 edi
  00202	5e		 pop	 esi
  00203	5d		 pop	 ebp
  00204	5b		 pop	 ebx
  00205	8b 4c 24 4c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+92]
  00209	33 cc		 xor	 ecx, esp
  0020b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00210	83 c4 5c	 add	 esp, 92			; 0000005cH
  00213	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR $T161098[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Str$136765[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$2:
  00010	8d 4d b0	 lea	 ecx, DWORD PTR $T161099[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$3:
  00018	8d 4d b0	 lea	 ecx, DWORD PTR $T161100[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  00027	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	83 c0 10	 add	 eax, 16			; 00000010H
  00034	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00037	33 c8		 xor	 ecx, eax
  00039	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z
  00043	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear, COMDAT
; _this$ = ecx

; 825  : 		{	// erase all

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 826  : 
; 827  :  #if _HAS_ITERATOR_DEBUGGING
; 828  : 		this->_Orphan_ptr(*this, 0);
; 829  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 830  : 
; 831  : 		_Nodeptr _Pnext;
; 832  : 		_Nodeptr _Pnode = _Nextnode(_Myhead);

  00004	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00007	8b 30		 mov	 esi, DWORD PTR [eax]

; 833  : 		_Nextnode(_Myhead) = _Myhead;

  00009	89 00		 mov	 DWORD PTR [eax], eax

; 834  : 		_Prevnode(_Myhead) = _Myhead;

  0000b	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0000e	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 835  : 		_Mysize = 0;

  00011	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0

; 836  : 
; 837  : 		for (; _Pnode != _Myhead; _Pnode = _Pnext)

  00018	3b 77 14	 cmp	 esi, DWORD PTR [edi+20]
  0001b	74 1e		 je	 SHORT $LN1@clear@3
  0001d	53		 push	 ebx
  0001e	8b ff		 npad	 2
$LL3@clear@3:

; 838  : 			{	// delete an element
; 839  : 			_Pnext = _Nextnode(_Pnode);

  00020	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 840  : 			this->_Alnod.destroy(_Pnode);

  00022	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00025	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ

; 841  : 			this->_Alnod.deallocate(_Pnode, 1);

  0002a	56		 push	 esi
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00030	83 c4 04	 add	 esp, 4
  00033	8b f3		 mov	 esi, ebx
  00035	3b 5f 14	 cmp	 ebx, DWORD PTR [edi+20]
  00038	75 e6		 jne	 SHORT $LL3@clear@3
  0003a	5b		 pop	 ebx
$LN1@clear@3:
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi

; 842  : 			}
; 843  : 		}

  0003d	c3		 ret	 0
?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
_TEXT	ENDS
PUBLIC	??_C@_01KGKMHCOC@e?$AA@				; `string'
PUBLIC	??_C@_01DDCIFGEA@E?$AA@				; `string'
PUBLIC	__Iosbase$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Fput
EXTRN	_strcspn:PROC
;	COMDAT ??_C@_01KGKMHCOC@e?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_01KGKMHCOC@e?$AA@ DB 'e', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DDCIFGEA@E?$AA@
CONST	SEGMENT
??_C@_01DDCIFGEA@E?$AA@ DB 'E', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z$2
__ehfuncinfo$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z
_TEXT	SEGMENT
__Fillcount$ = -120					; size = 4
__Pointptr$ = -120					; size = 4
__Enders$ = -116					; size = 3
$T161930 = -112						; size = 1
__Kseparator$ = -108					; size = 2
$T161778 = -108						; size = 4
__Mbst1$161929 = -104					; size = 4
__Lock$161787 = -104					; size = 4
$T161752 = -104						; size = 8
$T161751 = -104						; size = 8
$T161750 = -104						; size = 8
$T161749 = -104						; size = 8
$T161748 = -104						; size = 8
__Prefix$ = -104					; size = 4
__Wc$161928 = -96					; size = 2
$T161761 = -92						; size = 8
$T161760 = -92						; size = 8
$T161759 = -92						; size = 8
$T161756 = -92						; size = 8
$T161755 = -92						; size = 8
$T161754 = -92						; size = 8
$T161753 = -92						; size = 8
__Punct_fac$ = -92					; size = 4
__Iosbase$GSCopy$ = -84					; size = 4
$T161743 = -80						; size = 4
___$ReturnUdt$GSCopy$ = -76				; size = 4
__Groupstring$ = -72					; size = 28
__Grouping$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 2
__Buf$ = 32						; size = 4
__Beforepoint$ = 36					; size = 4
__Afterpoint$ = 40					; size = 4
__Trailing$ = 44					; size = 4
__Count$ = 48						; size = 4
?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Fput, COMDAT

; 1313 : 		{	// put formatted floating-point to _Dest

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 68	 mov	 DWORD PTR __$ArrayPad$[esp+120], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 84 24 80 00
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+140]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1426 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00035	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+136]
  0003c	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR __Iosbase$[esp+136]
  00043	8b bc 24 90 00
	00 00		 mov	 edi, DWORD PTR _this$[esp+136]
  0004a	8b b4 24 a8 00
	00 00		 mov	 esi, DWORD PTR __Buf$[esp+136]
  00051	8d 54 24 3c	 lea	 edx, DWORD PTR $T161743[esp+140]
  00055	52		 push	 edx
  00056	89 44 24 44	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+144], eax
  0005a	89 4c 24 3c	 mov	 DWORD PTR __Iosbase$GSCopy$[esp+144], ecx
  0005e	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00063	33 db		 xor	 ebx, ebx
  00065	50		 push	 eax
  00066	89 9c 24 8c 00
	00 00		 mov	 DWORD PTR __$EHRec$[esp+152], ebx
  0006d	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<wchar_t> >
  00072	8b e8		 mov	 ebp, eax
  00074	8b 44 24 40	 mov	 eax, DWORD PTR $T161743[esp+144]
  00078	83 c4 04	 add	 esp, 4
  0007b	89 6c 24 30	 mov	 DWORD PTR __Punct_fac$[esp+140], ebp
  0007f	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+148], -1
  0008a	3b c3		 cmp	 eax, ebx
  0008c	74 46		 je	 SHORT $LN31@Fput
  0008e	53		 push	 ebx
  0008f	8d 4c 24 28	 lea	 ecx, DWORD PTR __Lock$161787[esp+144]
  00093	89 44 24 24	 mov	 DWORD PTR $T161778[esp+144], eax
  00097	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0009c	8b 4c 24 20	 mov	 ecx, DWORD PTR $T161778[esp+140]
  000a0	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000a3	3b c3		 cmp	 eax, ebx
  000a5	76 09		 jbe	 SHORT $LN33@Fput

; 1314 : 		_DEBUG_POINTER(_Dest);
; 1315 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  000a7	83 f8 ff	 cmp	 eax, -1
  000aa	73 04		 jae	 SHORT $LN33@Fput
  000ac	48		 dec	 eax
  000ad	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN33@Fput:
  000b0	8b 59 04	 mov	 ebx, DWORD PTR [ecx+4]
  000b3	f7 db		 neg	 ebx
  000b5	1b db		 sbb	 ebx, ebx
  000b7	f7 d3		 not	 ebx
  000b9	23 d9		 and	 ebx, ecx
  000bb	8d 4c 24 24	 lea	 ecx, DWORD PTR __Lock$161787[esp+140]
  000bf	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000c4	85 db		 test	 ebx, ebx
  000c6	74 0a		 je	 SHORT $LN189@Fput
  000c8	8b 03		 mov	 eax, DWORD PTR [ebx]
  000ca	8b 10		 mov	 edx, DWORD PTR [eax]
  000cc	6a 01		 push	 1
  000ce	8b cb		 mov	 ecx, ebx
  000d0	ff d2		 call	 edx
$LN189@Fput:
  000d2	33 db		 xor	 ebx, ebx
$LN31@Fput:

; 1316 : 		const string _Grouping = _Punct_fac.grouping();

  000d4	8d 44 24 60	 lea	 eax, DWORD PTR __Grouping$[esp+140]
  000d8	50		 push	 eax
  000d9	8b cd		 mov	 ecx, ebp
  000db	e8 00 00 00 00	 call	 ?grouping@?$numpunct@_W@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<wchar_t>::grouping

; 1317 : 		const _Elem _Kseparator = _Punct_fac.thousands_sep();

  000e0	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  000e3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000e6	8b cd		 mov	 ecx, ebp
  000e8	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+148], 1
  000f3	ff d0		 call	 eax
  000f5	0f b7 c8	 movzx	 ecx, ax
  000f8	89 4c 24 20	 mov	 DWORD PTR __Kseparator$[esp+140], ecx

; 1318 : 		string _Groupstring;

  000fc	c7 44 24 5c 0f
	00 00 00	 mov	 DWORD PTR __Groupstring$[esp+164], 15 ; 0000000fH
  00104	89 5c 24 58	 mov	 DWORD PTR __Groupstring$[esp+160], ebx
  00108	c6 44 24 48 00	 mov	 BYTE PTR __Groupstring$[esp+144], 0

; 1319 : 		const _Elem _E0 = _MAKLOCCHR(_Elem, '0', _Cvt);

  0010d	8d 57 08	 lea	 edx, DWORD PTR [edi+8]
  00110	52		 push	 edx
  00111	8d 44 24 28	 lea	 eax, DWORD PTR __Mbst1$161929[esp+144]
  00115	50		 push	 eax
  00116	6a 01		 push	 1
  00118	8d 4c 24 28	 lea	 ecx, DWORD PTR $T161930[esp+152]
  0011c	51		 push	 ecx
  0011d	8d 54 24 3c	 lea	 edx, DWORD PTR __Wc$161928[esp+156]
  00121	52		 push	 edx
  00122	c6 84 24 9c 00
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+168], 2
  0012a	c6 44 24 30 30	 mov	 BYTE PTR $T161930[esp+160], 48 ; 00000030H
  0012f	89 5c 24 40	 mov	 DWORD PTR __Wc$161928[esp+160], ebx
  00133	89 5c 24 38	 mov	 DWORD PTR __Mbst1$161929[esp+160], ebx
  00137	e8 00 00 00 00	 call	 __Mbrtowc

; 1320 : 		size_t _Prefix = _Buf[0] == '+' || _Buf[0] == '-' ? 1 : 0;

  0013c	8a 06		 mov	 al, BYTE PTR [esi]
  0013e	83 c4 14	 add	 esp, 20			; 00000014H
  00141	3c 2b		 cmp	 al, 43			; 0000002bH
  00143	74 08		 je	 SHORT $LN19@Fput
  00145	89 5c 24 24	 mov	 DWORD PTR __Prefix$[esp+140], ebx
  00149	3c 2d		 cmp	 al, 45			; 0000002dH
  0014b	75 08		 jne	 SHORT $LN20@Fput
$LN19@Fput:
  0014d	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR __Prefix$[esp+140], 1
$LN20@Fput:

; 1321 : 
; 1322 : 		char _Enders[3];
; 1323 : 		_Enders[0] = ::localeconv()->decimal_point[0];

  00155	e8 00 00 00 00	 call	 _localeconv
  0015a	8b 00		 mov	 eax, DWORD PTR [eax]

; 1324 : 		_Enders[1] = 'e';
; 1325 : 		_Enders[2] = '\0';
; 1326 : 
; 1327 : 		const char *_Eptr = (const char *)::memchr(_Buf,
; 1328 : 			'e', _Count);	// find exponent

  0015c	8b 9c 24 b8 00
	00 00		 mov	 ebx, DWORD PTR __Count$[esp+136]
  00163	8a 08		 mov	 cl, BYTE PTR [eax]
  00165	53		 push	 ebx
  00166	6a 65		 push	 101			; 00000065H
  00168	56		 push	 esi
  00169	88 4c 24 24	 mov	 BYTE PTR __Enders$[esp+152], cl
  0016d	c6 44 24 25 65	 mov	 BYTE PTR __Enders$[esp+153], 101 ; 00000065H
  00172	c6 44 24 26 00	 mov	 BYTE PTR __Enders$[esp+154], 0
  00177	e8 00 00 00 00	 call	 _memchr

; 1329 : 		const char *_Pointptr = (const char *)::memchr(_Buf,
; 1330 : 			_Enders[0], _Count);	// find decimal point

  0017c	0f be 54 24 24	 movsx	 edx, BYTE PTR __Enders$[esp+152]
  00181	53		 push	 ebx
  00182	52		 push	 edx
  00183	56		 push	 esi
  00184	8b e8		 mov	 ebp, eax
  00186	e8 00 00 00 00	 call	 _memchr
  0018b	83 c4 18	 add	 esp, 24			; 00000018H
  0018e	89 44 24 14	 mov	 DWORD PTR __Pointptr$[esp+140], eax

; 1331 : 		if (_Pointptr == 0)

  00192	85 c0		 test	 eax, eax
  00194	75 07		 jne	 SHORT $LN16@Fput

; 1332 : 			_Trailing = 0;

  00196	89 84 24 b4 00
	00 00		 mov	 DWORD PTR __Trailing$[esp+136], eax
$LN16@Fput:

; 1333 : 
; 1334 : 		if (*_Grouping.c_str() != CHAR_MAX && '\0' < *_Grouping.c_str())

  0019d	8b 54 24 78	 mov	 edx, DWORD PTR __Grouping$[esp+164]
  001a1	8b 44 24 64	 mov	 eax, DWORD PTR __Grouping$[esp+144]
  001a5	8b c8		 mov	 ecx, eax
  001a7	83 fa 10	 cmp	 edx, 16			; 00000010H
  001aa	73 04		 jae	 SHORT $LN78@Fput
  001ac	8d 4c 24 64	 lea	 ecx, DWORD PTR __Grouping$[esp+144]
$LN78@Fput:
  001b0	80 39 7f	 cmp	 BYTE PTR [ecx], 127	; 0000007fH
  001b3	0f 84 52 01 00
	00		 je	 $LN111@Fput
  001b9	83 fa 10	 cmp	 edx, 16			; 00000010H
  001bc	73 04		 jae	 SHORT $LN84@Fput
  001be	8d 44 24 64	 lea	 eax, DWORD PTR __Grouping$[esp+144]
$LN84@Fput:
  001c2	80 38 00	 cmp	 BYTE PTR [eax], 0
  001c5	0f 8e 40 01 00
	00		 jle	 $LN111@Fput

; 1335 : 			{	// grouping specified, add thousands separators
; 1336 : 			_Groupstring.append(_Buf, _Count);	// assemble field into string

  001cb	53		 push	 ebx
  001cc	56		 push	 esi
  001cd	8d 4c 24 4c	 lea	 ecx, DWORD PTR __Groupstring$[esp+148]
  001d1	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1337 : 			if (_Eptr == 0)

  001d6	85 ed		 test	 ebp, ebp
  001d8	75 19		 jne	 SHORT $LN14@Fput

; 1338 : 				_Groupstring.append(_Trailing, '0');

  001da	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR __Trailing$[esp+136]
  001e1	6a 30		 push	 48			; 00000030H
  001e3	50		 push	 eax
  001e4	8d 4c 24 4c	 lea	 ecx, DWORD PTR __Groupstring$[esp+148]
  001e8	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1339 : 			else

  001ed	8b 5c 24 14	 mov	 ebx, DWORD PTR __Pointptr$[esp+140]
  001f1	eb 38		 jmp	 SHORT $LN13@Fput
$LN14@Fput:

; 1340 : 				{	/* dispose of any zeros before exponent */
; 1341 : 				if (_Pointptr == 0)

  001f3	8b 5c 24 14	 mov	 ebx, DWORD PTR __Pointptr$[esp+140]
  001f7	85 db		 test	 ebx, ebx
  001f9	75 1a		 jne	 SHORT $LN12@Fput

; 1342 : 					{	/* no point but exponent, put scaling zeros */
; 1343 : 					_Groupstring.append(_Beforepoint, '0');

  001fb	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR __Beforepoint$[esp+136]
  00202	6a 30		 push	 48			; 00000030H
  00204	51		 push	 ecx
  00205	8d 4c 24 4c	 lea	 ecx, DWORD PTR __Groupstring$[esp+148]
  00209	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1344 : 					_Beforepoint = 0;

  0020e	89 9c 24 ac 00
	00 00		 mov	 DWORD PTR __Beforepoint$[esp+136], ebx
$LN12@Fput:

; 1345 : 					}
; 1346 : 				_Groupstring.insert(_Eptr - _Buf, _Trailing, '0');

  00215	8b 94 24 b4 00
	00 00		 mov	 edx, DWORD PTR __Trailing$[esp+136]
  0021c	6a 30		 push	 48			; 00000030H
  0021e	52		 push	 edx
  0021f	2b ee		 sub	 ebp, esi
  00221	55		 push	 ebp
  00222	8d 4c 24 50	 lea	 ecx, DWORD PTR __Groupstring$[esp+152]
  00226	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
$LN13@Fput:

; 1347 : 				}
; 1348 : 			_Trailing = 0;
; 1349 : 
; 1350 : 			if (_Pointptr == 0)
; 1351 : 				_Groupstring.append(_Beforepoint, '0');

  0022b	6a 30		 push	 48			; 00000030H
  0022d	85 db		 test	 ebx, ebx
  0022f	75 13		 jne	 SHORT $LN11@Fput
  00231	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR __Beforepoint$[esp+140]
  00238	50		 push	 eax
  00239	8d 4c 24 4c	 lea	 ecx, DWORD PTR __Groupstring$[esp+148]
  0023d	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1352 : 			else

  00242	eb 36		 jmp	 SHORT $LN10@Fput
$LN11@Fput:

; 1353 : 				{	// fill in zeros around decimal point
; 1354 : 				_Groupstring.insert(_Pointptr - _Buf + 1, _Afterpoint, '0');

  00244	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR __Afterpoint$[esp+140]
  0024b	2b de		 sub	 ebx, esi
  0024d	51		 push	 ecx
  0024e	8d 53 01	 lea	 edx, DWORD PTR [ebx+1]
  00251	52		 push	 edx
  00252	8d 4c 24 50	 lea	 ecx, DWORD PTR __Groupstring$[esp+152]
  00256	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1355 : 				_Groupstring.insert(_Pointptr - _Buf, _Beforepoint, '0');

  0025b	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR __Beforepoint$[esp+136]
  00262	6a 30		 push	 48			; 00000030H
  00264	50		 push	 eax
  00265	53		 push	 ebx
  00266	8d 4c 24 50	 lea	 ecx, DWORD PTR __Groupstring$[esp+152]
  0026a	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1356 : 				_Afterpoint = 0;

  0026f	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Afterpoint$[esp+136], 0
$LN10@Fput:

; 1357 : 				}
; 1358 : 			_Beforepoint = 0;
; 1359 : 
; 1360 : 			const char *_Pg = _Grouping.c_str();

  0027a	8b 5c 24 64	 mov	 ebx, DWORD PTR __Grouping$[esp+144]
  0027e	bd 10 00 00 00	 mov	 ebp, 16			; 00000010H
  00283	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Beforepoint$[esp+136], 0
  0028e	39 6c 24 78	 cmp	 DWORD PTR __Grouping$[esp+164], ebp
  00292	73 04		 jae	 SHORT $LN90@Fput
  00294	8d 5c 24 64	 lea	 ebx, DWORD PTR __Grouping$[esp+144]
$LN90@Fput:

; 1361 : 			size_t _Off = ::strcspn(&_Groupstring[0], &_Enders[0]);

  00298	8b 44 24 48	 mov	 eax, DWORD PTR __Groupstring$[esp+144]
  0029c	39 6c 24 5c	 cmp	 DWORD PTR __Groupstring$[esp+164], ebp
  002a0	73 04		 jae	 SHORT $LN100@Fput
  002a2	8d 44 24 48	 lea	 eax, DWORD PTR __Groupstring$[esp+144]
$LN100@Fput:
  002a6	8d 4c 24 18	 lea	 ecx, DWORD PTR __Enders$[esp+140]
  002aa	51		 push	 ecx
  002ab	50		 push	 eax
  002ac	e8 00 00 00 00	 call	 _strcspn
  002b1	8b f0		 mov	 esi, eax

; 1362 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1363 : 				&& (size_t)*_Pg < _Off - _Prefix)

  002b3	8a 03		 mov	 al, BYTE PTR [ebx]
  002b5	83 c4 08	 add	 esp, 8
  002b8	3c 7f		 cmp	 al, 127			; 0000007fH
  002ba	74 32		 je	 SHORT $LN8@Fput
  002bc	8d 64 24 00	 npad	 4
$LL9@Fput:
  002c0	84 c0		 test	 al, al
  002c2	7e 2a		 jle	 SHORT $LN8@Fput
  002c4	8b d6		 mov	 edx, esi
  002c6	2b 54 24 24	 sub	 edx, DWORD PTR __Prefix$[esp+140]
  002ca	0f be c0	 movsx	 eax, al
  002cd	3b c2		 cmp	 eax, edx
  002cf	73 1d		 jae	 SHORT $LN8@Fput

; 1364 : 				{	// add a NUL to mark thousands separator
; 1365 : 				_Groupstring.insert(_Off -= *_Pg, (size_t)1, '\0');

  002d1	6a 00		 push	 0
  002d3	2b f0		 sub	 esi, eax
  002d5	6a 01		 push	 1
  002d7	56		 push	 esi
  002d8	8d 4c 24 50	 lea	 ecx, DWORD PTR __Groupstring$[esp+152]
  002dc	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1366 : 				if ('\0' < _Pg[1])

  002e1	80 7b 01 00	 cmp	 BYTE PTR [ebx+1], 0
  002e5	7e 01		 jle	 SHORT $LN7@Fput

; 1362 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1363 : 				&& (size_t)*_Pg < _Off - _Prefix)

  002e7	43		 inc	 ebx
$LN7@Fput:
  002e8	8a 03		 mov	 al, BYTE PTR [ebx]
  002ea	3c 7f		 cmp	 al, 127			; 0000007fH
  002ec	75 d2		 jne	 SHORT $LL9@Fput
$LN8@Fput:

; 1367 : 					++_Pg;	// not last group, advance
; 1368 : 				}
; 1369 : 
; 1370 : 			_Buf = &_Groupstring[0];

  002ee	8b 74 24 48	 mov	 esi, DWORD PTR __Groupstring$[esp+144]
  002f2	39 6c 24 5c	 cmp	 DWORD PTR __Groupstring$[esp+164], ebp
  002f6	73 04		 jae	 SHORT $LN110@Fput
  002f8	8d 74 24 48	 lea	 esi, DWORD PTR __Groupstring$[esp+144]
$LN110@Fput:

; 1371 : 			_Trailing = 0;
; 1372 : 			_Count = _Groupstring.size();

  002fc	8b 5c 24 58	 mov	 ebx, DWORD PTR __Groupstring$[esp+160]
  00300	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Trailing$[esp+136], 0
$LN111@Fput:

; 1373 : 			}
; 1374 : 
; 1375 : 		size_t _Fillcount = _Beforepoint + _Afterpoint + _Trailing + _Count;

  0030b	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR __Afterpoint$[esp+136]
  00312	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR __Beforepoint$[esp+136]

; 1376 : 		_Fillcount = _Iosbase.width() <= 0
; 1377 : 			|| (size_t)_Iosbase.width() <= _Fillcount
; 1378 : 				? 0 : (size_t)_Iosbase.width() - _Fillcount;

  00319	8b 54 24 38	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+140]
  0031d	03 c1		 add	 eax, ecx
  0031f	03 84 24 b4 00
	00 00		 add	 eax, DWORD PTR __Trailing$[esp+136]
  00326	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00329	03 c3		 add	 eax, ebx
  0032b	85 c9		 test	 ecx, ecx
  0032d	7e 0c		 jle	 SHORT $LN21@Fput
  0032f	3b c8		 cmp	 ecx, eax
  00331	76 08		 jbe	 SHORT $LN21@Fput
  00333	2b c8		 sub	 ecx, eax
  00335	89 4c 24 14	 mov	 DWORD PTR __Fillcount$[esp+140], ecx
  00339	eb 08		 jmp	 SHORT $LN22@Fput
$LN21@Fput:
  0033b	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __Fillcount$[esp+140], 0
$LN22@Fput:

; 1379 : 		ios_base::fmtflags _Adjustfield =
; 1380 : 			_Iosbase.flags() & ios_base::adjustfield;

  00343	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00346	25 c0 01 00 00	 and	 eax, 448		; 000001c0H

; 1381 : 		if (_Adjustfield != ios_base::left
; 1382 : 			&& _Adjustfield != ios_base::internal)

  0034b	83 f8 40	 cmp	 eax, 64			; 00000040H
  0034e	0f 84 c7 00 00
	00		 je	 $LN4@Fput
  00354	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00359	74 3d		 je	 SHORT $LN180@Fput

; 1383 : 			{	// put leading fill
; 1384 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  0035b	8b 54 24 14	 mov	 edx, DWORD PTR __Fillcount$[esp+140]
  0035f	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR __Fill$[esp+136]
  00366	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+140]
  0036d	52		 push	 edx
  0036e	8b 94 24 9c 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+140]
  00375	50		 push	 eax
  00376	51		 push	 ecx
  00377	52		 push	 edx
  00378	8d 44 24 34	 lea	 eax, DWORD PTR $T161748[esp+156]
  0037c	50		 push	 eax
  0037d	57		 push	 edi
  0037e	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  00383	8b 08		 mov	 ecx, DWORD PTR [eax]
  00385	89 8c 24 b0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], ecx
  0038c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0038f	89 94 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], edx

; 1385 : 			_Fillcount = 0;

  00396	eb 78		 jmp	 SHORT $LN192@Fput
$LN180@Fput:

; 1386 : 			}
; 1387 : 		else if (_Adjustfield == ios_base::internal)
; 1388 : 			{	// put internal fill
; 1389 : 			if (0 < _Prefix)

  00398	83 7c 24 24 00	 cmp	 DWORD PTR __Prefix$[esp+140], 0
  0039d	76 36		 jbe	 SHORT $LN3@Fput

; 1390 : 				{	// but first put sign
; 1391 : 				_Dest = _Putc(_Dest, _Buf, 1);

  0039f	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+140]
  003a6	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+136]
  003ad	6a 01		 push	 1
  003af	56		 push	 esi
  003b0	50		 push	 eax
  003b1	51		 push	 ecx
  003b2	8d 54 24 34	 lea	 edx, DWORD PTR $T161749[esp+156]
  003b6	52		 push	 edx
  003b7	57		 push	 edi
  003b8	e8 00 00 00 00	 call	 ?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putc
  003bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  003bf	89 8c 24 b0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], ecx
  003c6	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  003c9	83 c4 18	 add	 esp, 24			; 00000018H

; 1392 : 				++_Buf, --_Count;

  003cc	46		 inc	 esi
  003cd	89 94 24 9c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], edx
  003d4	4b		 dec	 ebx
$LN3@Fput:

; 1393 : 				}
; 1394 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  003d5	8b 44 24 14	 mov	 eax, DWORD PTR __Fillcount$[esp+140]
  003d9	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+136]
  003e0	8b 94 24 9c 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+140]
  003e7	50		 push	 eax
  003e8	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+140]
  003ef	51		 push	 ecx
  003f0	52		 push	 edx
  003f1	50		 push	 eax
  003f2	8d 4c 24 34	 lea	 ecx, DWORD PTR $T161750[esp+156]
  003f6	51		 push	 ecx
  003f7	57		 push	 edi
  003f8	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  003fd	8b 10		 mov	 edx, DWORD PTR [eax]
  003ff	89 94 24 b0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], edx
  00406	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00409	89 84 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], eax
$LN192@Fput:

; 1395 : 			_Fillcount = 0;

  00410	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR __Fillcount$[esp+164], 0
  00418	83 c4 18	 add	 esp, 24			; 00000018H
$LN4@Fput:

; 1396 : 			}
; 1397 : 
; 1398 : 		_Pointptr = (const char *)::memchr(_Buf,
; 1399 : 			_Enders[0], _Count);	// find decimal point again

  0041b	0f be 4c 24 18	 movsx	 ecx, BYTE PTR __Enders$[esp+140]
  00420	53		 push	 ebx
  00421	51		 push	 ecx
  00422	56		 push	 esi
  00423	e8 00 00 00 00	 call	 _memchr
  00428	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1400 : 		if (_Pointptr != 0)

  0042b	85 c0		 test	 eax, eax
  0042d	0f 84 ea 00 00
	00		 je	 $LN2@Fput

; 1401 : 			{	// has decimal point, put pieces and zero fills
; 1402 : 			size_t _Fracoffset = _Pointptr - _Buf + 1;
; 1403 : 			_Dest = _Putgrouped(_Dest, _Buf, _Fracoffset - 1, _Kseparator);

  00433	8b 54 24 20	 mov	 edx, DWORD PTR __Kseparator$[esp+140]
  00437	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+140]
  0043e	2b c6		 sub	 eax, esi
  00440	40		 inc	 eax
  00441	52		 push	 edx
  00442	8b 94 24 9c 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+140]
  00449	8b e8		 mov	 ebp, eax
  0044b	8d 45 ff	 lea	 eax, DWORD PTR [ebp-1]
  0044e	50		 push	 eax
  0044f	56		 push	 esi
  00450	51		 push	 ecx
  00451	52		 push	 edx
  00452	8d 44 24 38	 lea	 eax, DWORD PTR $T161751[esp+160]
  00456	50		 push	 eax
  00457	57		 push	 edi
  00458	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putgrouped
  0045d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0045f	89 8c 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], ecx
  00466	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1404 : 			_Dest = _Rep(_Dest, _E0, _Beforepoint);

  00469	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR __Beforepoint$[esp+164]
  00470	51		 push	 ecx
  00471	89 94 24 bc 00
	00 00		 mov	 DWORD PTR __Dest$[esp+172], edx
  00478	8b 54 24 4c	 mov	 edx, DWORD PTR __Wc$161928[esp+172]
  0047c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0047f	52		 push	 edx
  00480	8b 10		 mov	 edx, DWORD PTR [eax]
  00482	51		 push	 ecx
  00483	52		 push	 edx
  00484	8d 44 24 50	 lea	 eax, DWORD PTR $T161752[esp+184]
  00488	50		 push	 eax
  00489	57		 push	 edi
  0048a	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  0048f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00491	89 8c 24 cc 00
	00 00		 mov	 DWORD PTR __Dest$[esp+188], ecx
  00498	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1405 : 			_Dest = _Rep(_Dest, _Punct_fac.decimal_point(), 1);

  0049b	8b 4c 24 64	 mov	 ecx, DWORD PTR __Punct_fac$[esp+192]
  0049f	89 94 24 d0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+192], edx
  004a6	8b 01		 mov	 eax, DWORD PTR [ecx]
  004a8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  004ab	83 c4 34	 add	 esp, 52			; 00000034H
  004ae	ff d2		 call	 edx
  004b0	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+136]
  004b7	0f b7 c0	 movzx	 eax, ax
  004ba	6a 01		 push	 1
  004bc	50		 push	 eax
  004bd	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+148]
  004c4	50		 push	 eax
  004c5	51		 push	 ecx
  004c6	8d 54 24 40	 lea	 edx, DWORD PTR $T161753[esp+156]
  004ca	52		 push	 edx
  004cb	57		 push	 edi
  004cc	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  004d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  004d3	89 8c 24 b0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], ecx
  004da	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1406 : 			_Dest = _Rep(_Dest, _E0, _Afterpoint);

  004dd	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR __Afterpoint$[esp+160]
  004e4	51		 push	 ecx
  004e5	89 94 24 b8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+168], edx
  004ec	8b 54 24 48	 mov	 edx, DWORD PTR __Wc$161928[esp+168]
  004f0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004f3	52		 push	 edx
  004f4	8b 10		 mov	 edx, DWORD PTR [eax]
  004f6	51		 push	 ecx
  004f7	52		 push	 edx
  004f8	8d 44 24 58	 lea	 eax, DWORD PTR $T161754[esp+180]
  004fc	50		 push	 eax
  004fd	57		 push	 edi
  004fe	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  00503	8b 08		 mov	 ecx, DWORD PTR [eax]
  00505	89 8c 24 c8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+184], ecx
  0050c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0050f	83 c4 30	 add	 esp, 48			; 00000030H

; 1407 : 			_Buf += _Fracoffset, _Count -= _Fracoffset;

  00512	03 f5		 add	 esi, ebp
  00514	89 94 24 9c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], edx
  0051b	2b dd		 sub	 ebx, ebp
$LN2@Fput:

; 1408 : 			}
; 1409 : 
; 1410 : 		_Eptr = (const char *)::memchr(_Buf,
; 1411 : 			'e', _Count);	// find exponent again

  0051d	53		 push	 ebx
  0051e	6a 65		 push	 101			; 00000065H
  00520	56		 push	 esi
  00521	e8 00 00 00 00	 call	 _memchr
  00526	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1412 : 		if (_Eptr != 0)

  00529	85 c0		 test	 eax, eax
  0052b	0f 84 c0 00 00
	00		 je	 $LN1@Fput

; 1413 : 			{	// has exponent field, put it out
; 1414 : 			size_t _Expoffset = _Eptr - _Buf + 1;
; 1415 : 			_Dest = _Putgrouped(_Dest, _Buf, _Expoffset - 1, _Kseparator);

  00531	8b 94 24 9c 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+140]
  00538	2b c6		 sub	 eax, esi
  0053a	40		 inc	 eax
  0053b	8b e8		 mov	 ebp, eax
  0053d	8b 44 24 20	 mov	 eax, DWORD PTR __Kseparator$[esp+140]
  00541	50		 push	 eax
  00542	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+140]
  00549	8d 4d ff	 lea	 ecx, DWORD PTR [ebp-1]
  0054c	51		 push	 ecx
  0054d	56		 push	 esi
  0054e	52		 push	 edx
  0054f	50		 push	 eax
  00550	8d 4c 24 44	 lea	 ecx, DWORD PTR $T161755[esp+160]
  00554	51		 push	 ecx
  00555	57		 push	 edi
  00556	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putgrouped
  0055b	8b 10		 mov	 edx, DWORD PTR [eax]
  0055d	89 94 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], edx
  00564	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1416 : 			_Dest = _Rep(_Dest, _E0, _Trailing), _Trailing = 0;

  00567	8b 94 24 d0 00
	00 00		 mov	 edx, DWORD PTR __Trailing$[esp+164]
  0056e	52		 push	 edx
  0056f	89 8c 24 bc 00
	00 00		 mov	 DWORD PTR __Dest$[esp+172], ecx
  00576	8b 4c 24 4c	 mov	 ecx, DWORD PTR __Wc$161928[esp+172]
  0057a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0057d	8b 00		 mov	 eax, DWORD PTR [eax]
  0057f	51		 push	 ecx
  00580	52		 push	 edx
  00581	50		 push	 eax
  00582	8d 4c 24 5c	 lea	 ecx, DWORD PTR $T161756[esp+184]
  00586	51		 push	 ecx
  00587	57		 push	 edi
  00588	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  0058d	8b 10		 mov	 edx, DWORD PTR [eax]
  0058f	89 94 24 cc 00
	00 00		 mov	 DWORD PTR __Dest$[esp+188], edx
  00596	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1417 : 			_Dest = _Putc(_Dest, _Iosbase.flags() & ios_base::uppercase
; 1418 : 				? "E" : "e", 1);

  00599	8b 54 24 6c	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+192]
  0059d	83 c4 34	 add	 esp, 52			; 00000034H
  005a0	f6 42 10 04	 test	 BYTE PTR [edx+16], 4
  005a4	89 8c 24 9c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], ecx
  005ab	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR __Trailing$[esp+136], 0
  005b6	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01DDCIFGEA@E?$AA@
  005bb	75 05		 jne	 SHORT $LN24@Fput
  005bd	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01KGKMHCOC@e?$AA@
$LN24@Fput:
  005c2	8b 10		 mov	 edx, DWORD PTR [eax]
  005c4	6a 01		 push	 1
  005c6	51		 push	 ecx
  005c7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  005ca	51		 push	 ecx
  005cb	52		 push	 edx
  005cc	8d 44 24 40	 lea	 eax, DWORD PTR $T161759[esp+156]
  005d0	50		 push	 eax
  005d1	57		 push	 edi
  005d2	e8 00 00 00 00	 call	 ?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putc
  005d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  005d9	89 8c 24 b0 00
	00 00		 mov	 DWORD PTR __Dest$[esp+160], ecx
  005e0	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  005e3	83 c4 18	 add	 esp, 24			; 00000018H

; 1419 : 			_Buf += _Expoffset, _Count -= _Expoffset;

  005e6	03 f5		 add	 esi, ebp
  005e8	89 94 24 9c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+140], edx
  005ef	2b dd		 sub	 ebx, ebp
$LN1@Fput:

; 1420 : 			}
; 1421 : 
; 1422 : 		_Dest = _Putgrouped(_Dest, _Buf, _Count,
; 1423 : 			_Kseparator);	// put leftover field

  005f1	8b 44 24 20	 mov	 eax, DWORD PTR __Kseparator$[esp+140]
  005f5	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR __Dest$[esp+140]
  005fc	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+136]
  00603	50		 push	 eax
  00604	53		 push	 ebx
  00605	56		 push	 esi
  00606	51		 push	 ecx
  00607	52		 push	 edx
  00608	8d 44 24 44	 lea	 eax, DWORD PTR $T161760[esp+160]
  0060c	50		 push	 eax
  0060d	57		 push	 edi
  0060e	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putgrouped
  00613	8b 08		 mov	 ecx, DWORD PTR [eax]
  00615	89 8c 24 b4 00
	00 00		 mov	 DWORD PTR __Dest$[esp+164], ecx
  0061c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1424 : 		_Dest = _Rep(_Dest, _E0, _Trailing);	// put trailing zeros

  0061f	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR __Trailing$[esp+164]
  00626	51		 push	 ecx
  00627	89 94 24 bc 00
	00 00		 mov	 DWORD PTR __Dest$[esp+172], edx
  0062e	8b 54 24 4c	 mov	 edx, DWORD PTR __Wc$161928[esp+172]
  00632	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00635	52		 push	 edx
  00636	8b 10		 mov	 edx, DWORD PTR [eax]
  00638	51		 push	 ecx
  00639	52		 push	 edx
  0063a	8d 44 24 5c	 lea	 eax, DWORD PTR $T161761[esp+184]
  0063e	50		 push	 eax
  0063f	57		 push	 edi
  00640	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  00645	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1425 : 		_Iosbase.width(0);

  00647	8b 54 24 6c	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+192]

; 1426 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0064b	8b 74 24 74	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+192]
  0064f	89 8c 24 cc 00
	00 00		 mov	 DWORD PTR __Dest$[esp+188], ecx
  00656	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00659	33 db		 xor	 ebx, ebx
  0065b	89 5a 18	 mov	 DWORD PTR [edx+24], ebx
  0065e	8b 54 24 48	 mov	 edx, DWORD PTR __Fillcount$[esp+192]
  00662	52		 push	 edx
  00663	8b 94 24 dc 00
	00 00		 mov	 edx, DWORD PTR __Fill$[esp+192]
  0066a	52		 push	 edx
  0066b	50		 push	 eax
  0066c	51		 push	 ecx
  0066d	56		 push	 esi
  0066e	57		 push	 edi
  0066f	89 84 24 e8 00
	00 00		 mov	 DWORD PTR __Dest$[esp+216], eax
  00676	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  0067b	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  00680	83 c4 4c	 add	 esp, 76			; 0000004cH
  00683	39 7c 24 5c	 cmp	 DWORD PTR __Groupstring$[esp+164], edi
  00687	72 0d		 jb	 SHORT $LN143@Fput
  00689	8b 44 24 48	 mov	 eax, DWORD PTR __Groupstring$[esp+144]
  0068d	50		 push	 eax
  0068e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00693	83 c4 04	 add	 esp, 4
$LN143@Fput:
  00696	c7 44 24 5c 0f
	00 00 00	 mov	 DWORD PTR __Groupstring$[esp+164], 15 ; 0000000fH
  0069e	89 5c 24 58	 mov	 DWORD PTR __Groupstring$[esp+160], ebx
  006a2	c6 44 24 48 00	 mov	 BYTE PTR __Groupstring$[esp+144], 0
  006a7	39 7c 24 78	 cmp	 DWORD PTR __Grouping$[esp+164], edi
  006ab	72 0d		 jb	 SHORT $LN181@Fput
  006ad	8b 4c 24 64	 mov	 ecx, DWORD PTR __Grouping$[esp+144]
  006b1	51		 push	 ecx
  006b2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  006b7	83 c4 04	 add	 esp, 4
$LN181@Fput:
  006ba	8b c6		 mov	 eax, esi

; 1427 : 		}

  006bc	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+140]
  006c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  006ca	59		 pop	 ecx
  006cb	5f		 pop	 edi
  006cc	5e		 pop	 esi
  006cd	5d		 pop	 ebp
  006ce	5b		 pop	 ebx
  006cf	8b 4c 24 68	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+120]
  006d3	33 cc		 xor	 ecx, esp
  006d5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006da	83 c4 78	 add	 esp, 120		; 00000078H
  006dd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T161743[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z$2:
  00010	8d 4d b8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 84	 lea	 eax, DWORD PTR [edx-124]
  0001f	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	83 c0 10	 add	 eax, 16			; 00000010H
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Fput
PUBLIC	__Iosbase$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z$1
__ehfuncinfo$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
xdata$x	ENDS
;	COMDAT ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z
_TEXT	SEGMENT
__Lock$162322 = -84					; size = 4
$T162296 = -84						; size = 8
$T162294 = -84						; size = 8
__Prefix$ = -84						; size = 4
_this$GSCopy$ = -76					; size = 4
$T162295 = -72						; size = 8
__Pg$137307 = -72					; size = 4
__Iosbase$GSCopy$ = -64					; size = 4
___$ReturnUdt$GSCopy$ = -60				; size = 4
$T162286 = -56						; size = 4
$T162297 = -52						; size = 8
__Punct_fac$ = -52					; size = 4
__Grouping$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 2
__Buf$ = 32						; size = 4
__Count$ = 36						; size = 4
?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput, COMDAT

; 1458 : 		{	// put formatted integer to _Dest

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 48	 sub	 esp, 72			; 00000048H
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	89 44 24 44	 mov	 DWORD PTR __$ArrayPad$[esp+84], eax
  0001c	53		 push	 ebx
  0001d	55		 push	 ebp
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c4		 xor	 eax, esp
  00027	50		 push	 eax
  00028	8d 44 24 5c	 lea	 eax, DWORD PTR __$EHRec$[esp+104]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1504 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00032	8b 4c 24 70	 mov	 ecx, DWORD PTR ___$ReturnUdt$[esp+100]
  00036	8b 44 24 6c	 mov	 eax, DWORD PTR _this$[esp+100]
  0003a	8b 9c 24 84 00
	00 00		 mov	 ebx, DWORD PTR __Buf$[esp+100]
  00041	89 4c 24 2c	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+104], ecx
  00045	8b 4c 24 7c	 mov	 ecx, DWORD PTR __Iosbase$[esp+100]
  00049	8d 54 24 30	 lea	 edx, DWORD PTR $T162286[esp+104]
  0004d	52		 push	 edx
  0004e	89 44 24 20	 mov	 DWORD PTR _this$GSCopy$[esp+108], eax
  00052	89 4c 24 2c	 mov	 DWORD PTR __Iosbase$GSCopy$[esp+108], ecx
  00056	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  0005b	50		 push	 eax
  0005c	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+116], 0
  00064	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<wchar_t> >
  00069	8b 7c 24 34	 mov	 edi, DWORD PTR $T162286[esp+108]
  0006d	83 c4 04	 add	 esp, 4
  00070	8b e8		 mov	 ebp, eax
  00072	89 6c 24 34	 mov	 DWORD PTR __Punct_fac$[esp+104], ebp
  00076	c7 44 24 64 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+112], -1
  0007e	85 ff		 test	 edi, edi
  00080	74 3d		 je	 SHORT $LN22@Iput
  00082	6a 00		 push	 0
  00084	8d 4c 24 18	 lea	 ecx, DWORD PTR __Lock$162322[esp+108]
  00088	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0008d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00090	85 c0		 test	 eax, eax
  00092	76 09		 jbe	 SHORT $LN24@Iput

; 1459 : 		_DEBUG_POINTER(_Dest);
; 1460 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  00094	83 f8 ff	 cmp	 eax, -1
  00097	73 04		 jae	 SHORT $LN24@Iput
  00099	48		 dec	 eax
  0009a	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN24@Iput:
  0009d	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  000a0	f7 de		 neg	 esi
  000a2	1b f6		 sbb	 esi, esi
  000a4	f7 d6		 not	 esi
  000a6	8d 4c 24 14	 lea	 ecx, DWORD PTR __Lock$162322[esp+104]
  000aa	23 f7		 and	 esi, edi
  000ac	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000b1	85 f6		 test	 esi, esi
  000b3	74 0a		 je	 SHORT $LN22@Iput
  000b5	8b 06		 mov	 eax, DWORD PTR [esi]
  000b7	8b 10		 mov	 edx, DWORD PTR [eax]
  000b9	6a 01		 push	 1
  000bb	8b ce		 mov	 ecx, esi
  000bd	ff d2		 call	 edx
$LN22@Iput:

; 1461 : 		const string _Grouping = _Punct_fac.grouping();

  000bf	8d 44 24 3c	 lea	 eax, DWORD PTR __Grouping$[esp+104]
  000c3	50		 push	 eax
  000c4	8b cd		 mov	 ecx, ebp
  000c6	e8 00 00 00 00	 call	 ?grouping@?$numpunct@_W@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<wchar_t>::grouping

; 1462 : 		const size_t _Prefix = *_Buf == '+' || *_Buf == '-' ? 1
; 1463 : 			: *_Buf == '0' && (_Buf[1] == 'x' || _Buf[1] == 'X') ? 2
; 1464 : 			: 0;

  000cb	8a 03		 mov	 al, BYTE PTR [ebx]
  000cd	b9 01 00 00 00	 mov	 ecx, 1
  000d2	89 4c 24 64	 mov	 DWORD PTR __$EHRec$[esp+112], ecx
  000d6	3c 2b		 cmp	 al, 43			; 0000002bH
  000d8	74 27		 je	 SHORT $LN10@Iput
  000da	3c 2d		 cmp	 al, 45			; 0000002dH
  000dc	74 23		 je	 SHORT $LN10@Iput
  000de	3c 30		 cmp	 al, 48			; 00000030H
  000e0	75 15		 jne	 SHORT $LN12@Iput
  000e2	8a 43 01	 mov	 al, BYTE PTR [ebx+1]
  000e5	3c 78		 cmp	 al, 120			; 00000078H
  000e7	74 04		 je	 SHORT $LN11@Iput
  000e9	3c 58		 cmp	 al, 88			; 00000058H
  000eb	75 0a		 jne	 SHORT $LN12@Iput
$LN11@Iput:
  000ed	c7 44 24 14 02
	00 00 00	 mov	 DWORD PTR __Prefix$[esp+104], 2
  000f5	eb 0e		 jmp	 SHORT $LN14@Iput
$LN12@Iput:
  000f7	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __Prefix$[esp+104], 0
  000ff	eb 04		 jmp	 SHORT $LN14@Iput
$LN10@Iput:
  00101	89 4c 24 14	 mov	 DWORD PTR __Prefix$[esp+104], ecx
$LN14@Iput:

; 1465 : 
; 1466 : 		if (*_Grouping.c_str() != CHAR_MAX && '\0' < *_Grouping.c_str())

  00105	8b 4c 24 54	 mov	 ecx, DWORD PTR __Grouping$[esp+128]
  00109	8b 54 24 40	 mov	 edx, DWORD PTR __Grouping$[esp+108]
  0010d	8b c2		 mov	 eax, edx
  0010f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00112	73 04		 jae	 SHORT $LN33@Iput
  00114	8d 44 24 40	 lea	 eax, DWORD PTR __Grouping$[esp+108]
$LN33@Iput:
  00118	80 38 7f	 cmp	 BYTE PTR [eax], 127	; 0000007fH
  0011b	74 7e		 je	 SHORT $LN87@Iput
  0011d	8b c2		 mov	 eax, edx
  0011f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00122	73 04		 jae	 SHORT $LN39@Iput
  00124	8d 44 24 40	 lea	 eax, DWORD PTR __Grouping$[esp+108]
$LN39@Iput:
  00128	80 38 00	 cmp	 BYTE PTR [eax], 0
  0012b	7e 6e		 jle	 SHORT $LN87@Iput

; 1467 : 			{	// grouping specified, add thousands separators
; 1468 : 			const char *_Pg = _Grouping.c_str();

  0012d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00130	72 06		 jb	 SHORT $LN44@Iput
  00132	89 54 24 20	 mov	 DWORD PTR __Pg$137307[esp+104], edx
  00136	eb 08		 jmp	 SHORT $LN45@Iput
$LN44@Iput:
  00138	8d 4c 24 40	 lea	 ecx, DWORD PTR __Grouping$[esp+108]
  0013c	89 4c 24 20	 mov	 DWORD PTR __Pg$137307[esp+104], ecx
$LN45@Iput:

; 1469 : 			size_t _Off = _Count;
; 1470 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1471 : 				&& (size_t)*_Pg < _Off - _Prefix)

  00140	8b 54 24 20	 mov	 edx, DWORD PTR __Pg$137307[esp+104]
  00144	8a 02		 mov	 al, BYTE PTR [edx]
  00146	8b ac 24 88 00
	00 00		 mov	 ebp, DWORD PTR __Count$[esp+100]
  0014d	8b f5		 mov	 esi, ebp
  0014f	3c 7f		 cmp	 al, 127			; 0000007fH
  00151	74 4f		 je	 SHORT $LN5@Iput
$LN6@Iput:
  00153	84 c0		 test	 al, al
  00155	7e 4b		 jle	 SHORT $LN5@Iput
  00157	8b ce		 mov	 ecx, esi
  00159	2b 4c 24 14	 sub	 ecx, DWORD PTR __Prefix$[esp+104]
  0015d	0f be c0	 movsx	 eax, al
  00160	3b c1		 cmp	 eax, ecx
  00162	73 3e		 jae	 SHORT $LN5@Iput

; 1472 : 				{	// add a NUL to mark thousands separator
; 1473 : 				_Off -= *_Pg;

  00164	2b f0		 sub	 esi, eax

; 1474 : 				_CRT_SECURE_MEMMOVE(&_Buf[_Off + 1], _Count + 1 - _Off,

  00166	8b d5		 mov	 edx, ebp
  00168	2b d6		 sub	 edx, esi
  0016a	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0016d	50		 push	 eax
  0016e	8d 3c 33	 lea	 edi, DWORD PTR [ebx+esi]
  00171	57		 push	 edi
  00172	50		 push	 eax
  00173	8d 44 33 01	 lea	 eax, DWORD PTR [ebx+esi+1]
  00177	50		 push	 eax
  00178	e8 00 00 00 00	 call	 _memmove_s

; 1475 : 					&_Buf[_Off],	 _Count + 1 - _Off);
; 1476 : 				_Buf[_Off] = '\0', ++_Count;
; 1477 : 				if ('\0' < _Pg[1])

  0017d	8b 44 24 30	 mov	 eax, DWORD PTR __Pg$137307[esp+120]
  00181	83 c4 10	 add	 esp, 16			; 00000010H
  00184	c6 07 00	 mov	 BYTE PTR [edi], 0
  00187	45		 inc	 ebp
  00188	80 78 01 00	 cmp	 BYTE PTR [eax+1], 0
  0018c	7e 05		 jle	 SHORT $LN4@Iput
  0018e	40		 inc	 eax
  0018f	89 44 24 20	 mov	 DWORD PTR __Pg$137307[esp+104], eax
$LN4@Iput:
  00193	8a 00		 mov	 al, BYTE PTR [eax]
  00195	3c 7f		 cmp	 al, 127			; 0000007fH
  00197	75 ba		 jne	 SHORT $LN6@Iput

; 1469 : 			size_t _Off = _Count;
; 1470 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1471 : 				&& (size_t)*_Pg < _Off - _Prefix)

  00199	eb 07		 jmp	 SHORT $LN5@Iput
$LN87@Iput:
  0019b	8b ac 24 88 00
	00 00		 mov	 ebp, DWORD PTR __Count$[esp+100]
$LN5@Iput:

; 1478 : 					++_Pg;	// not last group, advance
; 1479 : 				}
; 1480 : 			}
; 1481 : 
; 1482 : 		size_t _Fillcount = _Iosbase.width() <= 0
; 1483 : 			|| (size_t)_Iosbase.width() <= _Count
; 1484 : 				? 0 : (size_t)_Iosbase.width() - _Count;

  001a2	8b 44 24 28	 mov	 eax, DWORD PTR __Iosbase$GSCopy$[esp+104]
  001a6	8b 70 18	 mov	 esi, DWORD PTR [eax+24]
  001a9	85 f6		 test	 esi, esi
  001ab	7e 08		 jle	 SHORT $LN15@Iput
  001ad	3b f5		 cmp	 esi, ebp
  001af	76 04		 jbe	 SHORT $LN15@Iput
  001b1	2b f5		 sub	 esi, ebp
  001b3	eb 02		 jmp	 SHORT $LN16@Iput
$LN15@Iput:
  001b5	33 f6		 xor	 esi, esi
$LN16@Iput:

; 1485 : 
; 1486 : 		ios_base::fmtflags _Adjustfield =
; 1487 : 			_Iosbase.flags() & ios_base::adjustfield;

  001b7	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 1488 : 		if (_Adjustfield != ios_base::left
; 1489 : 			&& _Adjustfield != ios_base::internal)

  001ba	8b bc 24 80 00
	00 00		 mov	 edi, DWORD PTR __Fill$[esp+100]
  001c1	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  001c6	83 f8 40	 cmp	 eax, 64			; 00000040H
  001c9	0f 84 8b 00 00
	00		 je	 $LN1@Iput
  001cf	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  001d4	74 20		 je	 SHORT $LN85@Iput

; 1490 : 			{	// put leading fill
; 1491 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  001d6	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+104]
  001da	8b 54 24 74	 mov	 edx, DWORD PTR __Dest$[esp+100]
  001de	56		 push	 esi
  001df	57		 push	 edi
  001e0	51		 push	 ecx
  001e1	8b 4c 24 28	 mov	 ecx, DWORD PTR _this$GSCopy$[esp+116]
  001e5	52		 push	 edx
  001e6	8d 44 24 24	 lea	 eax, DWORD PTR $T162294[esp+120]
  001ea	50		 push	 eax
  001eb	51		 push	 ecx
  001ec	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  001f1	83 c4 18	 add	 esp, 24			; 00000018H

; 1492 : 			_Fillcount = 0;

  001f4	eb 55		 jmp	 SHORT $LN93@Iput
$LN85@Iput:

; 1493 : 			}
; 1494 : 		else if (_Adjustfield == ios_base::internal)
; 1495 : 			{	// put internal fill
; 1496 : 			_Dest = _Putc(_Dest, _Buf, _Prefix);	// put prefix

  001f6	8b 4c 24 14	 mov	 ecx, DWORD PTR __Prefix$[esp+104]
  001fa	8b 54 24 78	 mov	 edx, DWORD PTR __Dest$[esp+104]
  001fe	8b 44 24 74	 mov	 eax, DWORD PTR __Dest$[esp+100]
  00202	51		 push	 ecx
  00203	53		 push	 ebx
  00204	52		 push	 edx
  00205	8b 54 24 28	 mov	 edx, DWORD PTR _this$GSCopy$[esp+116]
  00209	50		 push	 eax
  0020a	8d 4c 24 30	 lea	 ecx, DWORD PTR $T162295[esp+120]
  0020e	51		 push	 ecx
  0020f	52		 push	 edx
  00210	e8 00 00 00 00	 call	 ?_Putc@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putc
  00215	8b 08		 mov	 ecx, DWORD PTR [eax]
  00217	89 8c 24 8c 00
	00 00		 mov	 DWORD PTR __Dest$[esp+124], ecx
  0021e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1497 : 			_Buf += _Prefix, _Count -= _Prefix;

  00221	8b 4c 24 2c	 mov	 ecx, DWORD PTR __Prefix$[esp+128]

; 1498 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount), _Fillcount = 0;

  00225	56		 push	 esi
  00226	89 94 24 94 00
	00 00		 mov	 DWORD PTR __Dest$[esp+132], edx
  0022d	8b 10		 mov	 edx, DWORD PTR [eax]
  0022f	03 d9		 add	 ebx, ecx
  00231	2b e9		 sub	 ebp, ecx
  00233	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00236	57		 push	 edi
  00237	51		 push	 ecx
  00238	8b 4c 24 40	 mov	 ecx, DWORD PTR _this$GSCopy$[esp+140]
  0023c	52		 push	 edx
  0023d	8d 44 24 3c	 lea	 eax, DWORD PTR $T162296[esp+144]
  00241	50		 push	 eax
  00242	51		 push	 ecx
  00243	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  00248	83 c4 30	 add	 esp, 48			; 00000030H
$LN93@Iput:
  0024b	8b 10		 mov	 edx, DWORD PTR [eax]
  0024d	89 54 24 74	 mov	 DWORD PTR __Dest$[esp+100], edx
  00251	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00254	33 f6		 xor	 esi, esi
  00256	89 44 24 78	 mov	 DWORD PTR __Dest$[esp+104], eax
$LN1@Iput:

; 1499 : 			}
; 1500 : 
; 1501 : 		_Dest = _Putgrouped(_Dest, _Buf, _Count,
; 1502 : 			_Punct_fac.thousands_sep());	// put field

  0025a	8b 4c 24 34	 mov	 ecx, DWORD PTR __Punct_fac$[esp+104]
  0025e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00260	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00263	ff d0		 call	 eax
  00265	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+104]
  00269	8b 54 24 74	 mov	 edx, DWORD PTR __Dest$[esp+100]
  0026d	0f b7 c0	 movzx	 eax, ax
  00270	50		 push	 eax
  00271	55		 push	 ebp
  00272	53		 push	 ebx
  00273	8b 5c 24 28	 mov	 ebx, DWORD PTR _this$GSCopy$[esp+116]
  00277	51		 push	 ecx
  00278	52		 push	 edx
  00279	8d 44 24 48	 lea	 eax, DWORD PTR $T162297[esp+124]
  0027d	50		 push	 eax
  0027e	53		 push	 ebx
  0027f	e8 00 00 00 00	 call	 ?_Putgrouped@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PBDI_W@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Putgrouped
  00284	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1503 : 		_Iosbase.width(0);

  00286	8b 54 24 44	 mov	 edx, DWORD PTR __Iosbase$GSCopy$[esp+132]

; 1504 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0028a	56		 push	 esi
  0028b	8b 74 24 4c	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+136]
  0028f	57		 push	 edi
  00290	89 8c 24 98 00
	00 00		 mov	 DWORD PTR __Dest$[esp+136], ecx
  00297	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0029a	50		 push	 eax
  0029b	51		 push	 ecx
  0029c	56		 push	 esi
  0029d	53		 push	 ebx
  0029e	89 84 24 ac 00
	00 00		 mov	 DWORD PTR __Dest$[esp+156], eax
  002a5	c7 42 18 00 00
	00 00		 mov	 DWORD PTR [edx+24], 0
  002ac	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  002b1	83 c4 34	 add	 esp, 52			; 00000034H
  002b4	83 7c 24 54 10	 cmp	 DWORD PTR __Grouping$[esp+128], 16 ; 00000010H
  002b9	72 0d		 jb	 SHORT $LN86@Iput
  002bb	8b 44 24 40	 mov	 eax, DWORD PTR __Grouping$[esp+108]
  002bf	50		 push	 eax
  002c0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002c5	83 c4 04	 add	 esp, 4
$LN86@Iput:
  002c8	8b c6		 mov	 eax, esi

; 1505 : 		}

  002ca	8b 4c 24 5c	 mov	 ecx, DWORD PTR __$EHRec$[esp+104]
  002ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002d5	59		 pop	 ecx
  002d6	5f		 pop	 edi
  002d7	5e		 pop	 esi
  002d8	5d		 pop	 ebp
  002d9	5b		 pop	 ebx
  002da	8b 4c 24 44	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+84]
  002de	33 cc		 xor	 ecx, esp
  002e0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002e5	83 c4 54	 add	 esp, 84			; 00000054H
  002e8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z$0:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR $T162286[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 a8	 lea	 eax, DWORD PTR [edx-88]
  00017	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	83 c0 10	 add	 eax, 16			; 00000010H
  00024	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput
PUBLIC	?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z
_TEXT	SEGMENT
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init, COMDAT
; _this$ = ecx

; 131  : 		{	// initialize with stream buffer pointer

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 132  : 		_Init();	// initialize ios_base

  00003	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init

; 133  : 		_Mystrbuf = _Strbuf;

  00008	8b 44 24 08	 mov	 eax, DWORD PTR __Strbuf$[esp]

; 134  : 		_Tiestr = 0;
; 135  : 		_Fillch = widen(' ');

  0000c	6a 20		 push	 32			; 00000020H
  0000e	8b ce		 mov	 ecx, esi
  00010	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00013	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  0001a	e8 00 00 00 00	 call	 ?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen

; 136  : 
; 137  : 		if (_Mystrbuf == 0)

  0001f	83 7e 28 00	 cmp	 DWORD PTR [esi+40], 0
  00023	66 89 46 30	 mov	 WORD PTR [esi+48], ax
  00027	75 10		 jne	 SHORT $LN11@init

; 138  : 			setstate(badbit);

  00029	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002c	83 c8 04	 or	 eax, 4
  0002f	6a 00		 push	 0
  00031	50		 push	 eax
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN11@init:

; 139  : 
; 140  : 		if (_Isstd)

  00039	80 7c 24 0c 00	 cmp	 BYTE PTR __Isstd$[esp], 0
  0003e	74 0d		 je	 SHORT $LN2@init

; 141  : 			_Addstd(this);	// special handling for standard streams

  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  00046	83 c4 04	 add	 esp, 4
  00049	5e		 pop	 esi

; 144  : 		}

  0004a	c2 08 00	 ret	 8
$LN2@init:

; 142  : 		else
; 143  : 		_Stdstr = 0;

  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00054	5e		 pop	 esi

; 144  : 		}

  00055	c2 08 00	 ret	 8
?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@@Z ; std::_Destroy_range<std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@@Z PROC ; std::_Destroy_range<std::allocator<HostDevice> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

  00000	56		 push	 esi

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 13		 je	 SHORT $LN5@Destroy_ra@2
  0000e	8b ff		 npad	 2
$LL7@Destroy_ra@2:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00017	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0001d	3b f7		 cmp	 esi, edi
  0001f	75 ef		 jne	 SHORT $LL7@Destroy_ra@2
$LN5@Destroy_ra@2:
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 226  : 	}

  00023	c3		 ret	 0
??$_Destroy_range@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@0AAV?$allocator@UHostDevice@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@1@0PAU2@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
$T162632 = -4						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Cat$162635 = 24					; size = 1
__Ptr$ = 24						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@1@0PAU2@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	51		 push	 ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

  00001	8b 54 24 18	 mov	 edx, DWORD PTR __Cat$162635[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T162632[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T162632[esp+4]
  0000c	50		 push	 eax
  0000d	8b 44 24 1c	 mov	 eax, DWORD PTR __Ptr$[esp+4]
  00011	52		 push	 edx
  00012	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4c 24 20	 mov	 ecx, DWORD PTR __Last$[esp+16]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >

; 1142 : 		}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c2 14 00	 ret	 20			; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@1@0PAU2@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
;	COMDAT ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush, COMDAT
; _this$ = ecx

; 550  : 		{	// flush output stream

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 551  : 		ios_base::iostate _State = ios_base::goodbit;
; 552  : 		if (!ios_base::fail() && _Myios::rdbuf()->pubsync() == -1)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00008	57		 push	 edi
  00009	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  0000c	33 ff		 xor	 edi, edi
  0000e	f6 40 08 06	 test	 BYTE PTR [eax+8], 6
  00012	75 16		 jne	 SHORT $LN1@flush
  00014	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00017	8b 10		 mov	 edx, DWORD PTR [eax]
  00019	8b c8		 mov	 ecx, eax
  0001b	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0001e	ff d0		 call	 eax
  00020	83 f8 ff	 cmp	 eax, -1
  00023	75 05		 jne	 SHORT $LN1@flush

; 553  : 			_State |= ios_base::badbit;	// sync failed

  00025	bf 04 00 00 00	 mov	 edi, 4
$LN1@flush:

; 554  : 		_Myios::setstate(_State);

  0002a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0002f	03 ce		 add	 ecx, esi
  00031	85 ff		 test	 edi, edi
  00033	74 16		 je	 SHORT $LN21@flush
  00035	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00038	0b c7		 or	 eax, edi
  0003a	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  0003e	75 03		 jne	 SHORT $LN19@flush
  00040	83 c8 04	 or	 eax, 4
$LN19@flush:
  00043	6a 00		 push	 0
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN21@flush:
  0004b	5f		 pop	 edi

; 555  : 		return (*this);

  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi

; 556  : 		}

  0004f	c3		 ret	 0
?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
_TEXT	ENDS
PUBLIC	?_Tidy@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Tidy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Tidy@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXXZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Tidy, COMDAT
; _this$ = ecx

; 1212 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1213 : 		clear();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear

; 1214 : 		this->_Alptr.destroy(&_Nextnode(_Myhead));
; 1215 : 		this->_Alptr.destroy(&_Prevnode(_Myhead));
; 1216 : 		this->_Alnod.deallocate(_Myhead, 1);

  00008	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	83 c4 04	 add	 esp, 4

; 1217 : 		_Myhead = 0;

  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	5e		 pop	 esi

; 1218 : 		}

  0001c	c3		 ret	 0
?_Tidy@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@IAEXXZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::_Tidy
_TEXT	ENDS
PUBLIC	??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry, COMDAT
; _this$ = ecx

; 95   : 			{	// construct locking and testing stream

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c4		 xor	 eax, esp
  00018	50		 push	 eax
  00019	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f9		 mov	 edi, ecx
  00025	89 7c 24 0c	 mov	 DWORD PTR _this$[esp+28], edi
  00029	8b 74 24 20	 mov	 esi, DWORD PTR __Ostr$[esp+24]
  0002d	89 37		 mov	 DWORD PTR [edi], esi
  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00034	8b 44 31 28	 mov	 eax, DWORD PTR [ecx+esi+40]
  00038	85 c0		 test	 eax, eax
  0003a	74 08		 je	 SHORT $LN12@sentry
  0003c	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0003f	e8 00 00 00 00	 call	 ?_Lock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Lock
$LN12@sentry:

; 96   : 			if (_Ostr.good() && _Ostr.tie() != 0)

  00044	8b 16		 mov	 edx, DWORD PTR [esi]
  00046	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00049	03 c6		 add	 eax, esi
  0004b	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0004f	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+36], 0
  00057	75 0e		 jne	 SHORT $LN1@sentry
  00059	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  0005c	85 c0		 test	 eax, eax
  0005e	74 07		 je	 SHORT $LN1@sentry

; 97   : 				_Ostr.tie()->flush();

  00060	8b c8		 mov	 ecx, eax
  00062	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
$LN1@sentry:

; 98   : 			_Ok = _Ostr.good();	// store test only after flushing tie

  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006c	83 7c 32 08 00	 cmp	 DWORD PTR [edx+esi+8], 0
  00071	0f 94 c0	 sete	 al
  00074	88 47 04	 mov	 BYTE PTR [edi+4], al

; 99   : 			}

  00077	8b c7		 mov	 eax, edi
  00079	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0007d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00084	59		 pop	 ecx
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	83 c4 10	 add	 esp, 16			; 00000010H
  0008a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
PUBLIC	??_C@_02EAOCLKAK@ld?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	_sprintf_s:PROC
;	COMDAT ??_C@_02EAOCLKAK@ld?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02EAOCLKAK@ld?$AA@ DB 'ld', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WJ@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 6
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 4
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WJ@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1153 : 		{	// put formatted long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0000e	53		 push	 ebx
  0000f	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]

; 1154 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1155 : 		char _Buf[_Buf_size], _Fmt[6];
; 1156 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1157 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "ld",
; 1158 : 				_Iosbase.flags()), _Val)));

  00013	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  0001c	8b f1		 mov	 esi, ecx
  0001e	8b 4c 24 70	 mov	 ecx, DWORD PTR __Val$[esp+84]
  00022	51		 push	 ecx
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02EAOCLKAK@ld?$AA@
  00029	8d 54 24 18	 lea	 edx, DWORD PTR __Fmt$[esp+100]
  0002d	52		 push	 edx
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ifmt
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	50		 push	 eax
  00038	8d 44 24 1c	 lea	 eax, DWORD PTR __Buf$[esp+96]
  0003c	6a 40		 push	 64			; 00000040H
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _sprintf_s
  00044	8b 54 24 7c	 mov	 edx, DWORD PTR __Fill$[esp+100]
  00048	50		 push	 eax
  00049	8b 44 24 78	 mov	 eax, DWORD PTR __Dest$[esp+108]
  0004d	8d 4c 24 28	 lea	 ecx, DWORD PTR __Buf$[esp+108]
  00051	51		 push	 ecx
  00052	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  00056	52		 push	 edx
  00057	53		 push	 ebx
  00058	50		 push	 eax
  00059	51		 push	 ecx
  0005a	57		 push	 edi
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput

; 1159 : 		}

  00061	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+136]
  00068	83 c4 30	 add	 esp, 48			; 00000030H
  0006b	8b c7		 mov	 eax, edi
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	33 cc		 xor	 ecx, esp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	83 c4 4c	 add	 esp, 76			; 0000004cH
  0007a	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WJ@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02BDDLJJBK@lu?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02BDDLJJBK@lu?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02BDDLJJBK@lu?$AA@ DB 'lu', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 6
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 4
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1163 : 		{	// put formatted unsigned long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0000e	53		 push	 ebx
  0000f	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]

; 1164 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1165 : 		char _Buf[_Buf_size], _Fmt[6];
; 1166 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1167 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "lu",
; 1168 : 				_Iosbase.flags()), _Val)));

  00013	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  0001c	8b f1		 mov	 esi, ecx
  0001e	8b 4c 24 70	 mov	 ecx, DWORD PTR __Val$[esp+84]
  00022	51		 push	 ecx
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02BDDLJJBK@lu?$AA@
  00029	8d 54 24 18	 lea	 edx, DWORD PTR __Fmt$[esp+100]
  0002d	52		 push	 edx
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ifmt
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	50		 push	 eax
  00038	8d 44 24 1c	 lea	 eax, DWORD PTR __Buf$[esp+96]
  0003c	6a 40		 push	 64			; 00000040H
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _sprintf_s
  00044	8b 54 24 7c	 mov	 edx, DWORD PTR __Fill$[esp+100]
  00048	50		 push	 eax
  00049	8b 44 24 78	 mov	 eax, DWORD PTR __Dest$[esp+108]
  0004d	8d 4c 24 28	 lea	 ecx, DWORD PTR __Buf$[esp+108]
  00051	51		 push	 ecx
  00052	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  00056	52		 push	 edx
  00057	53		 push	 ebx
  00058	50		 push	 eax
  00059	51		 push	 ecx
  0005a	57		 push	 edi
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput

; 1169 : 		}

  00061	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+136]
  00068	83 c4 30	 add	 esp, 48			; 00000030H
  0006b	8b c7		 mov	 eax, edi
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	33 cc		 xor	 ecx, esp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	83 c4 4c	 add	 esp, 76			; 0000004cH
  0007a	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02HIKPPMOK@Ld?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02HIKPPMOK@Ld?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02HIKPPMOK@Ld?$AA@ DB 'Ld', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 8
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 8
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1174 : 		{	// put formatted long long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax

; 1175 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1176 : 		char _Buf[_Buf_size], _Fmt[8];
; 1177 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1178 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "Ld",
; 1179 : 				_Iosbase.flags()), _Val)));

  0000e	8b 54 24 64	 mov	 edx, DWORD PTR __Val$[esp+72]
  00012	53		 push	 ebx
  00013	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]
  00017	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  00020	8b f1		 mov	 esi, ecx
  00022	8b 4c 24 74	 mov	 ecx, DWORD PTR __Val$[esp+88]
  00026	51		 push	 ecx
  00027	52		 push	 edx
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_02HIKPPMOK@Ld?$AA@
  0002e	8d 44 24 1c	 lea	 eax, DWORD PTR __Fmt$[esp+104]
  00032	50		 push	 eax
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ifmt
  00039	83 c4 10	 add	 esp, 16			; 00000010H
  0003c	50		 push	 eax
  0003d	8d 4c 24 20	 lea	 ecx, DWORD PTR __Buf$[esp+100]
  00041	6a 40		 push	 64			; 00000040H
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 _sprintf_s
  00049	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  0004d	50		 push	 eax
  0004e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR __Fill$[esp+108]
  00055	8d 54 24 2c	 lea	 edx, DWORD PTR __Buf$[esp+112]
  00059	52		 push	 edx
  0005a	8b 54 24 7c	 mov	 edx, DWORD PTR __Dest$[esp+112]
  0005e	50		 push	 eax
  0005f	53		 push	 ebx
  00060	51		 push	 ecx
  00061	52		 push	 edx
  00062	57		 push	 edi
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput

; 1180 : 		}

  00069	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+140]
  00070	83 c4 34	 add	 esp, 52			; 00000034H
  00073	8b c7		 mov	 eax, edi
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	83 c4 4c	 add	 esp, 76			; 0000004cH
  00082	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02CLHGNPPK@Lu?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02CLHGNPPK@Lu?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_C@_02CLHGNPPK@Lu?$AA@ DB 'Lu', 00H			; `string'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xlocnum
CONST	ENDS
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 8
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 8
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1184 : 		{	// put formatted unsigned long long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax

; 1185 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1186 : 		char _Buf[_Buf_size], _Fmt[8];
; 1187 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1188 : 			::sprintf_s(_Buf, _Buf_size, _Ifmt(_Fmt, "Lu",
; 1189 : 				_Iosbase.flags()), _Val)));

  0000e	8b 54 24 64	 mov	 edx, DWORD PTR __Val$[esp+72]
  00012	53		 push	 ebx
  00013	8b 5c 24 60	 mov	 ebx, DWORD PTR __Iosbase$[esp+76]
  00017	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	8b 7c 24 5c	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+84]
  00020	8b f1		 mov	 esi, ecx
  00022	8b 4c 24 74	 mov	 ecx, DWORD PTR __Val$[esp+88]
  00026	51		 push	 ecx
  00027	52		 push	 edx
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_02CLHGNPPK@Lu?$AA@
  0002e	8d 44 24 1c	 lea	 eax, DWORD PTR __Fmt$[esp+104]
  00032	50		 push	 eax
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ifmt
  00039	83 c4 10	 add	 esp, 16			; 00000010H
  0003c	50		 push	 eax
  0003d	8d 4c 24 20	 lea	 ecx, DWORD PTR __Buf$[esp+100]
  00041	6a 40		 push	 64			; 00000040H
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 _sprintf_s
  00049	8b 4c 24 78	 mov	 ecx, DWORD PTR __Dest$[esp+108]
  0004d	50		 push	 eax
  0004e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR __Fill$[esp+108]
  00055	8d 54 24 2c	 lea	 edx, DWORD PTR __Buf$[esp+112]
  00059	52		 push	 edx
  0005a	8b 54 24 7c	 mov	 edx, DWORD PTR __Dest$[esp+112]
  0005e	50		 push	 eax
  0005f	53		 push	 ebx
  00060	51		 push	 ecx
  00061	52		 push	 edx
  00062	57		 push	 edi
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput

; 1190 : 		}

  00069	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+140]
  00070	83 c4 34	 add	 esp, 52			; 00000034H
  00073	8b c7		 mov	 eax, edi
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	83 c4 4c	 add	 esp, 76			; 0000004cH
  00082	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
PUBLIC	__real@38aa95a5b7f87a0f
PUBLIC	__real@4202a05f20000000
PUBLIC	__real@4733426172c74d82
PUBLIC	__real@0000000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	_this$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
;	COMDAT __real@38aa95a5b7f87a0f
CONST	SEGMENT
__real@38aa95a5b7f87a0f DQ 038aa95a5b7f87a0fr	; 1e-035
CONST	ENDS
;	COMDAT __real@4202a05f20000000
CONST	SEGMENT
__real@4202a05f20000000 DQ 04202a05f20000000r	; 1e+010
CONST	ENDS
;	COMDAT __real@4733426172c74d82
CONST	SEGMENT
__real@4733426172c74d82 DQ 04733426172c74d82r	; 1e+035
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z
_TEXT	SEGMENT
__Signed$136881 = -129					; size = 1
_this$GSCopy$ = -128					; size = 4
___$ReturnUdt$GSCopy$ = -124				; size = 4
__Fmt$ = -120						; size = 8
__Buf$ = -112						; size = 108
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 8
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1195 : 		{	// put formatted double to _Dest

  00000	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 80 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+132], eax
  00014	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+128]
  0001b	53		 push	 ebx
  0001c	55		 push	 ebp
  0001d	8b ac 24 9c 00
	00 00		 mov	 ebp, DWORD PTR __Iosbase$[esp+136]

; 1227 : 			}
; 1228 : 
; 1229 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1230 : 			_Beforepoint, _Afterpoint, _Precision,
; 1231 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1232 : 					_Significance, _Val)));	// convert and put

  00024	89 44 24 10	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+140], eax
  00028	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0002b	56		 push	 esi
  0002c	57		 push	 edi
  0002d	89 4c 24 14	 mov	 DWORD PTR _this$GSCopy$[esp+148], ecx
  00031	85 c0		 test	 eax, eax
  00033	7f 0e		 jg	 SHORT $LN13@do_put@3

; 1196 : 		const size_t _Buf_size = _MAX_EXP_DIG + _MAX_SIG_DIG + 64;
; 1197 : 		char _Buf[_Buf_size], _Fmt[8];
; 1198 : 		streamsize _Precision = _Iosbase.precision() <= 0
; 1199 : 			&& !(_Iosbase.flags() & ios_base::fixed)
; 1200 : 				? 6 : _Iosbase.precision();	// desired precision

  00035	f7 45 10 00 20
	00 00		 test	 DWORD PTR [ebp+16], 8192 ; 00002000H
  0003c	75 05		 jne	 SHORT $LN13@do_put@3
  0003e	b8 06 00 00 00	 mov	 eax, 6
$LN13@do_put@3:
  00043	8b f0		 mov	 esi, eax

; 1201 : 		int _Significance = _MAX_SIG_DIG < _Precision
; 1202 : 			? _MAX_SIG_DIG : (int)_Precision;	// actual sprintf precision

  00045	83 fe 24	 cmp	 esi, 36			; 00000024H
  00048	ba 24 00 00 00	 mov	 edx, 36			; 00000024H
  0004d	7f 02		 jg	 SHORT $LN16@do_put@3
  0004f	8b d6		 mov	 edx, esi
$LN16@do_put@3:

; 1203 : 		_Precision -= _Significance;
; 1204 : 		size_t _Beforepoint = 0;	// zeros to add before decimal point
; 1205 : 		size_t _Afterpoint = 0;	// zeros to add after decimal point
; 1206 : 
; 1207 : 		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed
; 1208 : 			&& _Val * 0.5 != _Val)	// skip -Inf, 0, Inf

  00051	8b 4d 10	 mov	 ecx, DWORD PTR [ebp+16]
  00054	dd 84 24 ac 00
	00 00		 fld	 QWORD PTR __Val$[esp+144]
  0005b	8b c1		 mov	 eax, ecx
  0005d	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  00062	2b f2		 sub	 esi, edx
  00064	33 db		 xor	 ebx, ebx
  00066	33 ff		 xor	 edi, edi
  00068	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  0006d	0f 85 ad 00 00
	00		 jne	 $LN1@do_put@3
  00073	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe0000000000000
  00079	d8 c9		 fmul	 ST(0), ST(1)
  0007b	dd e9		 fucomp	 ST(1)
  0007d	df e0		 fnstsw	 ax
  0007f	f6 c4 44	 test	 ah, 68			; 00000044H
  00082	0f 8b 98 00 00
	00		 jnp	 $LN1@do_put@3

; 1209 : 			{	// scale silly fixed-point value
; 1210 : 			bool _Signed = _Val < 0;

  00088	d9 ee		 fldz
  0008a	d8 d1		 fcom	 ST(1)
  0008c	df e0		 fnstsw	 ax
  0008e	f6 c4 41	 test	 ah, 65			; 00000041H
  00091	75 0b		 jne	 SHORT $LN17@do_put@3

; 1211 : 			if (_Signed)
; 1212 : 				_Val = -_Val;

  00093	d9 c9		 fxch	 ST(1)
  00095	c6 44 24 13 01	 mov	 BYTE PTR __Signed$136881[esp+148], 1
  0009a	d9 e0		 fchs
  0009c	eb 06		 jmp	 SHORT $LN9@do_put@3
$LN17@do_put@3:

; 1209 : 			{	// scale silly fixed-point value
; 1210 : 			bool _Signed = _Val < 0;

  0009e	88 5c 24 13	 mov	 BYTE PTR __Signed$136881[esp+148], bl

; 1226 : 				_Val = -_Val;

  000a2	d9 c9		 fxch	 ST(1)
$LN9@do_put@3:
  000a4	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4733426172c74d82
  000aa	d8 d1		 fcom	 ST(1)
  000ac	df e0		 fnstsw	 ax
  000ae	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4202a05f20000000
  000b4	f6 c4 41	 test	 ah, 65			; 00000041H
  000b7	7b 06		 jnp	 SHORT $LN8@do_put@3
$LN52@do_put@3:

; 1213 : 
; 1214 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000b9	dd d9		 fstp	 ST(1)
  000bb	eb 1c		 jmp	 SHORT $LN6@do_put@3
$LN58@do_put@3:
  000bd	d9 c9		 fxch	 ST(1)
$LN8@do_put@3:
  000bf	81 fb 88 13 00
	00		 cmp	 ebx, 5000		; 00001388H
  000c5	73 f2		 jae	 SHORT $LN52@do_put@3

; 1215 : 				_Val /= 1e10;	// drop 10 zeros before decimal point

  000c7	dc fa		 fdiv	 ST(2), ST(0)
  000c9	83 c3 0a	 add	 ebx, 10			; 0000000aH
  000cc	d9 c9		 fxch	 ST(1)
  000ce	d8 d2		 fcom	 ST(2)
  000d0	df e0		 fnstsw	 ax
  000d2	f6 c4 41	 test	 ah, 65			; 00000041H
  000d5	7b e6		 jnp	 SHORT $LN58@do_put@3

; 1213 : 
; 1214 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000d7	dd d8		 fstp	 ST(0)
$LN6@do_put@3:

; 1216 : 
; 1217 : 			if (0 < _Val)

  000d9	d9 ca		 fxch	 ST(2)
  000db	d8 d9		 fcomp	 ST(1)
  000dd	df e0		 fnstsw	 ax
  000df	f6 c4 05	 test	 ah, 5
  000e2	7a 31		 jp	 SHORT $LN60@do_put@3

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000e4	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  000e7	7c 2c		 jl	 SHORT $LN60@do_put@3
  000e9	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@38aa95a5b7f87a0f
  000ef	eb 02		 jmp	 SHORT $LN4@do_put@3
$LN73@do_put@3:
  000f1	d9 c9		 fxch	 ST(1)
$LN4@do_put@3:
  000f3	d8 d1		 fcom	 ST(1)
  000f5	df e0		 fnstsw	 ax
  000f7	f6 c4 01	 test	 ah, 1
  000fa	75 5e		 jne	 SHORT $LN67@do_put@3
  000fc	81 ff 88 13 00
	00		 cmp	 edi, 5000		; 00001388H
  00102	73 56		 jae	 SHORT $LN67@do_put@3

; 1220 : 					{	// drop 10 zeros after decimal point
; 1221 : 					_Val *= 1e10;
; 1222 : 					_Precision -= 10;

  00104	83 ee 0a	 sub	 esi, 10			; 0000000aH
  00107	d9 c9		 fxch	 ST(1)
  00109	83 c7 0a	 add	 edi, 10			; 0000000aH
  0010c	d8 ca		 fmul	 ST(0), ST(2)
  0010e	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00111	7d de		 jge	 SHORT $LN73@do_put@3

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  00113	dd d9		 fstp	 ST(1)
$LN60@do_put@3:

; 1223 : 					}
; 1224 : 
; 1225 : 			if (_Signed)

  00115	80 7c 24 13 00	 cmp	 BYTE PTR __Signed$136881[esp+148], 0
  0011a	dd d9		 fstp	 ST(1)
  0011c	74 02		 je	 SHORT $LN1@do_put@3

; 1226 : 				_Val = -_Val;

  0011e	d9 e0		 fchs
$LN1@do_put@3:

; 1227 : 			}
; 1228 : 
; 1229 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1230 : 			_Beforepoint, _Afterpoint, _Precision,
; 1231 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1232 : 					_Significance, _Val)));	// convert and put

  00120	c6 44 24 1c 25	 mov	 BYTE PTR __Fmt$[esp+148], 37 ; 00000025H
  00125	8d 44 24 1d	 lea	 eax, DWORD PTR __Fmt$[esp+149]
  00129	f6 c1 20	 test	 cl, 32			; 00000020H
  0012c	74 09		 je	 SHORT $LN31@do_put@3
  0012e	c6 44 24 1d 2b	 mov	 BYTE PTR __Fmt$[esp+149], 43 ; 0000002bH
  00133	8d 44 24 1e	 lea	 eax, DWORD PTR __Fmt$[esp+150]
$LN31@do_put@3:
  00137	f6 c1 10	 test	 cl, 16			; 00000010H
  0013a	74 04		 je	 SHORT $LN30@do_put@3
  0013c	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  0013f	40		 inc	 eax
$LN30@do_put@3:
  00140	c6 00 2e	 mov	 BYTE PTR [eax], 46	; 0000002eH
  00143	40		 inc	 eax
  00144	c6 00 2a	 mov	 BYTE PTR [eax], 42	; 0000002aH
  00147	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H
  0014d	40		 inc	 eax
  0014e	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  00154	75 08		 jne	 SHORT $LN36@do_put@3
  00156	b1 66		 mov	 cl, 102			; 00000066H
  00158	eb 1d		 jmp	 SHORT $LN35@do_put@3
$LN67@do_put@3:

; 1218 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1219 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  0015a	dd d8		 fstp	 ST(0)
  0015c	eb b7		 jmp	 SHORT $LN60@do_put@3

; 1227 : 			}
; 1228 : 
; 1229 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1230 : 			_Beforepoint, _Afterpoint, _Precision,
; 1231 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 0, _Iosbase.flags()),
; 1232 : 					_Significance, _Val)));	// convert and put

$LN36@do_put@3:
  0015e	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  00164	75 04		 jne	 SHORT $LN34@do_put@3
  00166	b1 61		 mov	 cl, 97			; 00000061H
  00168	eb 0d		 jmp	 SHORT $LN35@do_put@3
$LN34@do_put@3:
  0016a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00170	0f 95 c1	 setne	 cl
  00173	8d 4c 09 65	 lea	 ecx, DWORD PTR [ecx+ecx+101]
$LN35@do_put@3:
  00177	83 ec 08	 sub	 esp, 8
  0017a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0017d	52		 push	 edx
  0017e	88 08		 mov	 BYTE PTR [eax], cl
  00180	8d 4c 24 28	 lea	 ecx, DWORD PTR __Fmt$[esp+160]
  00184	51		 push	 ecx
  00185	8d 54 24 34	 lea	 edx, DWORD PTR __Buf$[esp+164]
  00189	6a 6c		 push	 108			; 0000006cH
  0018b	52		 push	 edx
  0018c	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
  00190	e8 00 00 00 00	 call	 _sprintf_s
  00195	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+168]
  0019c	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+172]
  001a3	50		 push	 eax
  001a4	56		 push	 esi
  001a5	8b 74 24 38	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+180]
  001a9	57		 push	 edi
  001aa	53		 push	 ebx
  001ab	8d 44 24 4c	 lea	 eax, DWORD PTR __Buf$[esp+188]
  001af	50		 push	 eax
  001b0	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+188]
  001b7	51		 push	 ecx
  001b8	8b 4c 24 44	 mov	 ecx, DWORD PTR _this$GSCopy$[esp+196]
  001bc	55		 push	 ebp
  001bd	52		 push	 edx
  001be	50		 push	 eax
  001bf	56		 push	 esi
  001c0	51		 push	 ecx
  001c1	e8 00 00 00 00	 call	 ?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Fput

; 1233 : 		}

  001c6	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+216]
  001cd	83 c4 44	 add	 esp, 68			; 00000044H
  001d0	5f		 pop	 edi
  001d1	8b c6		 mov	 eax, esi
  001d3	5e		 pop	 esi
  001d4	5d		 pop	 ebp
  001d5	5b		 pop	 ebx
  001d6	33 cc		 xor	 ecx, esp
  001d8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001dd	81 c4 84 00 00
	00		 add	 esp, 132		; 00000084H
  001e3	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z
_TEXT	SEGMENT
__Signed$136909 = -129					; size = 1
_this$GSCopy$ = -128					; size = 4
___$ReturnUdt$GSCopy$ = -124				; size = 4
__Fmt$ = -120						; size = 8
__Buf$ = -112						; size = 108
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 8
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1237 : 		{	// put formatted long double to _Dest

  00000	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 80 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+132], eax
  00014	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+128]
  0001b	53		 push	 ebx
  0001c	55		 push	 ebp
  0001d	8b ac 24 9c 00
	00 00		 mov	 ebp, DWORD PTR __Iosbase$[esp+136]

; 1268 : 			}
; 1269 : 
; 1270 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1271 : 			_Beforepoint, _Afterpoint, _Precision,
; 1272 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 'L', _Iosbase.flags()),
; 1273 : 					_Significance, _Val)));	// convert and put

  00024	89 44 24 10	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[esp+140], eax
  00028	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0002b	56		 push	 esi
  0002c	57		 push	 edi
  0002d	89 4c 24 14	 mov	 DWORD PTR _this$GSCopy$[esp+148], ecx
  00031	85 c0		 test	 eax, eax
  00033	7f 0e		 jg	 SHORT $LN13@do_put@4

; 1238 : 		const size_t _Buf_size = _MAX_EXP_DIG + _MAX_SIG_DIG + 64;
; 1239 : 		char _Buf[_Buf_size], _Fmt[8];
; 1240 : 		streamsize _Precision = _Iosbase.precision() <= 0
; 1241 : 			&& !(_Iosbase.flags() & ios_base::fixed)
; 1242 : 				? 6 : _Iosbase.precision();	// desired precision

  00035	f7 45 10 00 20
	00 00		 test	 DWORD PTR [ebp+16], 8192 ; 00002000H
  0003c	75 05		 jne	 SHORT $LN13@do_put@4
  0003e	b8 06 00 00 00	 mov	 eax, 6
$LN13@do_put@4:
  00043	8b f0		 mov	 esi, eax

; 1243 : 		int _Significance = _MAX_SIG_DIG < _Precision
; 1244 : 			? _MAX_SIG_DIG : (int)_Precision;	// actual sprintf precision

  00045	83 fe 24	 cmp	 esi, 36			; 00000024H
  00048	ba 24 00 00 00	 mov	 edx, 36			; 00000024H
  0004d	7f 02		 jg	 SHORT $LN16@do_put@4
  0004f	8b d6		 mov	 edx, esi
$LN16@do_put@4:

; 1245 : 		_Precision -= _Significance;
; 1246 : 		size_t _Beforepoint = 0;	// zeros to add before decimal point
; 1247 : 		size_t _Afterpoint = 0;	// zeros to add after decimal point
; 1248 : 
; 1249 : 		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed)

  00051	8b 4d 10	 mov	 ecx, DWORD PTR [ebp+16]
  00054	8b c1		 mov	 eax, ecx
  00056	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  0005b	2b f2		 sub	 esi, edx
  0005d	33 db		 xor	 ebx, ebx
  0005f	33 ff		 xor	 edi, edi
  00061	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  00066	0f 85 a1 00 00
	00		 jne	 $LN43@do_put@4

; 1250 : 			{	// scale silly fixed-point value
; 1251 : 			bool _Signed = _Val < 0;

  0006c	d9 ee		 fldz
  0006e	dd 84 24 ac 00
	00 00		 fld	 QWORD PTR __Val$[esp+144]
  00075	d8 d1		 fcom	 ST(1)
  00077	df e0		 fnstsw	 ax
  00079	f6 c4 05	 test	 ah, 5
  0007c	7a 20		 jp	 SHORT $LN17@do_put@4
  0007e	c6 44 24 13 01	 mov	 BYTE PTR __Signed$136909[esp+148], 1

; 1253 : 				_Val = -_Val;

  00083	d9 e0		 fchs
$LN9@do_put@4:

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  00085	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4733426172c74d82
  0008b	d8 d1		 fcom	 ST(1)
  0008d	df e0		 fnstsw	 ax
  0008f	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4202a05f20000000
  00095	f6 c4 41	 test	 ah, 65			; 00000041H
  00098	7b 0c		 jnp	 SHORT $LN8@do_put@4
$LN49@do_put@4:
  0009a	dd d9		 fstp	 ST(1)
  0009c	eb 22		 jmp	 SHORT $LN6@do_put@4
$LN17@do_put@4:

; 1250 : 			{	// scale silly fixed-point value
; 1251 : 			bool _Signed = _Val < 0;

  0009e	88 5c 24 13	 mov	 BYTE PTR __Signed$136909[esp+148], bl

; 1252 : 			if (_Signed)

  000a2	eb e1		 jmp	 SHORT $LN9@do_put@4
$LN55@do_put@4:

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000a4	d9 c9		 fxch	 ST(1)
$LN8@do_put@4:
  000a6	81 fb 88 13 00
	00		 cmp	 ebx, 5000		; 00001388H
  000ac	73 ec		 jae	 SHORT $LN49@do_put@4

; 1256 : 				_Val /= 1e10;	// drop 10 zeros before decimal point

  000ae	dc fa		 fdiv	 ST(2), ST(0)
  000b0	83 c3 0a	 add	 ebx, 10			; 0000000aH
  000b3	d9 c9		 fxch	 ST(1)
  000b5	d8 d2		 fcom	 ST(2)
  000b7	df e0		 fnstsw	 ax
  000b9	f6 c4 41	 test	 ah, 65			; 00000041H
  000bc	7b e6		 jnp	 SHORT $LN55@do_put@4

; 1254 : 
; 1255 : 			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)

  000be	dd d8		 fstp	 ST(0)
$LN6@do_put@4:

; 1257 : 
; 1258 : 			if (0 < _Val)

  000c0	d9 ca		 fxch	 ST(2)
  000c2	d8 d9		 fcomp	 ST(1)
  000c4	df e0		 fnstsw	 ax
  000c6	f6 c4 05	 test	 ah, 5
  000c9	7a 31		 jp	 SHORT $LN57@do_put@4

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000cb	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  000ce	7c 2c		 jl	 SHORT $LN57@do_put@4
  000d0	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@38aa95a5b7f87a0f
  000d6	eb 02		 jmp	 SHORT $LN4@do_put@4
$LN70@do_put@4:
  000d8	d9 c9		 fxch	 ST(1)
$LN4@do_put@4:
  000da	d8 d1		 fcom	 ST(1)
  000dc	df e0		 fnstsw	 ax
  000de	f6 c4 01	 test	 ah, 1
  000e1	75 26		 jne	 SHORT $LN64@do_put@4
  000e3	81 ff 88 13 00
	00		 cmp	 edi, 5000		; 00001388H
  000e9	73 1e		 jae	 SHORT $LN64@do_put@4

; 1261 : 					{	// drop 10 zeros after decimal point
; 1262 : 					_Val *= 1e10;
; 1263 : 					_Precision -= 10;

  000eb	83 ee 0a	 sub	 esi, 10			; 0000000aH
  000ee	d9 c9		 fxch	 ST(1)
  000f0	83 c7 0a	 add	 edi, 10			; 0000000aH
  000f3	d8 ca		 fmul	 ST(0), ST(2)
  000f5	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  000f8	7d de		 jge	 SHORT $LN70@do_put@4

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  000fa	dd d9		 fstp	 ST(1)
$LN57@do_put@4:

; 1264 : 					}
; 1265 : 
; 1266 : 			if (_Signed)

  000fc	80 7c 24 13 00	 cmp	 BYTE PTR __Signed$136909[esp+148], 0
  00101	dd d9		 fstp	 ST(1)
  00103	74 0f		 je	 SHORT $LN1@do_put@4

; 1267 : 				_Val = -_Val;

  00105	d9 e0		 fchs
  00107	eb 0b		 jmp	 SHORT $LN1@do_put@4
$LN64@do_put@4:

; 1259 : 				for (; 10 <= _Precision && _Val <= 1e-35
; 1260 : 					&& _Afterpoint < 5000; _Afterpoint += 10)

  00109	dd d8		 fstp	 ST(0)
  0010b	eb ef		 jmp	 SHORT $LN57@do_put@4
$LN43@do_put@4:

; 1267 : 				_Val = -_Val;

  0010d	dd 84 24 ac 00
	00 00		 fld	 QWORD PTR __Val$[esp+144]
$LN1@do_put@4:

; 1268 : 			}
; 1269 : 
; 1270 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
; 1271 : 			_Beforepoint, _Afterpoint, _Precision,
; 1272 : 				::sprintf_s(_Buf, _Buf_size, _Ffmt(_Fmt, 'L', _Iosbase.flags()),
; 1273 : 					_Significance, _Val)));	// convert and put

  00114	c6 44 24 1c 25	 mov	 BYTE PTR __Fmt$[esp+148], 37 ; 00000025H
  00119	8d 44 24 1d	 lea	 eax, DWORD PTR __Fmt$[esp+149]
  0011d	f6 c1 20	 test	 cl, 32			; 00000020H
  00120	74 09		 je	 SHORT $LN31@do_put@4
  00122	c6 44 24 1d 2b	 mov	 BYTE PTR __Fmt$[esp+149], 43 ; 0000002bH
  00127	8d 44 24 1e	 lea	 eax, DWORD PTR __Fmt$[esp+150]
$LN31@do_put@4:
  0012b	f6 c1 10	 test	 cl, 16			; 00000010H
  0012e	74 04		 je	 SHORT $LN30@do_put@4
  00130	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  00133	40		 inc	 eax
$LN30@do_put@4:
  00134	c6 00 2e	 mov	 BYTE PTR [eax], 46	; 0000002eH
  00137	40		 inc	 eax
  00138	c6 00 2a	 mov	 BYTE PTR [eax], 42	; 0000002aH
  0013b	40		 inc	 eax
  0013c	c6 00 4c	 mov	 BYTE PTR [eax], 76	; 0000004cH
  0013f	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H
  00145	40		 inc	 eax
  00146	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  0014c	75 04		 jne	 SHORT $LN36@do_put@4
  0014e	b1 66		 mov	 cl, 102			; 00000066H
  00150	eb 19		 jmp	 SHORT $LN35@do_put@4
$LN36@do_put@4:
  00152	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  00158	75 04		 jne	 SHORT $LN34@do_put@4
  0015a	b1 61		 mov	 cl, 97			; 00000061H
  0015c	eb 0d		 jmp	 SHORT $LN35@do_put@4
$LN34@do_put@4:
  0015e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00164	0f 95 c1	 setne	 cl
  00167	8d 4c 09 65	 lea	 ecx, DWORD PTR [ecx+ecx+101]
$LN35@do_put@4:
  0016b	83 ec 08	 sub	 esp, 8
  0016e	dd 1c 24	 fstp	 QWORD PTR [esp]
  00171	52		 push	 edx
  00172	88 08		 mov	 BYTE PTR [eax], cl
  00174	8d 4c 24 28	 lea	 ecx, DWORD PTR __Fmt$[esp+160]
  00178	51		 push	 ecx
  00179	8d 54 24 34	 lea	 edx, DWORD PTR __Buf$[esp+164]
  0017d	6a 6c		 push	 108			; 0000006cH
  0017f	52		 push	 edx
  00180	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
  00184	e8 00 00 00 00	 call	 _sprintf_s
  00189	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR __Fill$[esp+168]
  00190	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR __Dest$[esp+172]
  00197	50		 push	 eax
  00198	56		 push	 esi
  00199	8b 74 24 38	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$[esp+180]
  0019d	57		 push	 edi
  0019e	53		 push	 ebx
  0019f	8d 44 24 4c	 lea	 eax, DWORD PTR __Buf$[esp+188]
  001a3	50		 push	 eax
  001a4	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR __Dest$[esp+188]
  001ab	51		 push	 ecx
  001ac	8b 4c 24 44	 mov	 ecx, DWORD PTR _this$GSCopy$[esp+196]
  001b0	55		 push	 ebp
  001b1	52		 push	 edx
  001b2	50		 push	 eax
  001b3	56		 push	 esi
  001b4	51		 push	 ecx
  001b5	e8 00 00 00 00	 call	 ?_Fput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBDIIII@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Fput

; 1274 : 		}

  001ba	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+216]
  001c1	83 c4 44	 add	 esp, 68			; 00000044H
  001c4	5f		 pop	 edi
  001c5	8b c6		 mov	 eax, esi
  001c7	5e		 pop	 esi
  001c8	5d		 pop	 ebp
  001c9	5b		 pop	 ebx
  001ca	33 cc		 xor	 ecx, esp
  001cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d1	81 c4 84 00 00
	00		 add	 esp, 132		; 00000084H
  001d7	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
PUBLIC	??_C@_02BBAHNLBA@?$CFp?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02BBAHNLBA@?$CFp?$AA@
CONST	SEGMENT
??_C@_02BBAHNLBA@?$CFp?$AA@ DB '%p', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBX@Z
_TEXT	SEGMENT
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 4
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBX@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1278 : 		{	// put formatted void pointer to _Dest

  00000	83 ec 44	 sub	 esp, 68			; 00000044H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 40	 mov	 DWORD PTR __$ArrayPad$[esp+68], eax
  0000e	8b 44 24 5c	 mov	 eax, DWORD PTR __Val$[esp+64]
  00012	53		 push	 ebx
  00013	8b 5c 24 58	 mov	 ebx, DWORD PTR __Iosbase$[esp+68]
  00017	56		 push	 esi
  00018	8b 74 24 50	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+72]
  0001c	57		 push	 edi

; 1279 : 		const size_t _Buf_size = 2 * _MAX_INT_DIG;
; 1280 : 		char _Buf[_Buf_size];
; 1281 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
; 1282 : 			::sprintf_s(_Buf, _Buf_size, "%p", _Val)));

  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_02BBAHNLBA@?$CFp?$AA@
  00023	8d 44 24 14	 lea	 eax, DWORD PTR __Buf$[esp+88]
  00027	6a 40		 push	 64			; 00000040H
  00029	50		 push	 eax
  0002a	8b f9		 mov	 edi, ecx
  0002c	e8 00 00 00 00	 call	 _sprintf_s
  00031	8b 54 24 74	 mov	 edx, DWORD PTR __Fill$[esp+92]
  00035	50		 push	 eax
  00036	8b 44 24 70	 mov	 eax, DWORD PTR __Dest$[esp+100]
  0003a	8d 4c 24 20	 lea	 ecx, DWORD PTR __Buf$[esp+100]
  0003e	51		 push	 ecx
  0003f	8b 4c 24 70	 mov	 ecx, DWORD PTR __Dest$[esp+100]
  00043	52		 push	 edx
  00044	53		 push	 ebx
  00045	50		 push	 eax
  00046	51		 push	 ecx
  00047	56		 push	 esi
  00048	57		 push	 edi
  00049	e8 00 00 00 00	 call	 ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput

; 1283 : 		}

  0004e	8b 4c 24 7c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+128]
  00052	83 c4 30	 add	 esp, 48			; 00000030H
  00055	5f		 pop	 edi
  00056	8b c6		 mov	 eax, esi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	33 cc		 xor	 ecx, esp
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	83 c4 44	 add	 esp, 68			; 00000044H
  00064	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBX@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
PUBLIC	?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx, COMDAT
; _this$ = ecx

; 139  : 		{	// perform any wrapup

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 140  : 		_TRY_BEGIN
; 141  : 		if (ios_base::flags() & ios_base::unitbuf)

  00029	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002e	f6 44 0a 10 02	 test	 BYTE PTR [edx+ecx+16], 2
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003a	74 05		 je	 SHORT $LN8@Osfx

; 142  : 			flush();	// flush stream as needed

  0003c	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
$LN8@Osfx:

; 145  : 		}

  00041	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00044	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004b	59		 pop	 ecx
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
__catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0:

; 143  : 		_CATCH_ALL
; 144  : 		_CATCH_END

  00053	b8 00 00 00 00	 mov	 eax, $LN8@Osfx
  00058	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
PUBLIC	??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::basic_istream<wchar_t,std::char_traits<wchar_t> >
;	COMDAT ??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@ DD 00H ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	08H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z$0
__ehfuncinfo$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
xdata$x	ENDS
;	COMDAT ??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
_TEXT	SEGMENT
$T163039 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::basic_istream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 32   : 		{	// construct from stream buffer pointer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 10	 lea	 eax, DWORD PTR __$EHRec$[esp+28]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0002a	33 c0		 xor	 eax, eax
  0002c	89 44 24 08	 mov	 DWORD PTR $T163039[esp+28], eax
  00030	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+24], eax
  00034	74 19		 je	 SHORT $LN1@basic_istr
  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@
  0003c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  00043	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  00047	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR $T163039[esp+28], 1
$LN1@basic_istr:
  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 33   : 		_Myios::init(_Strbuf, _Isstd);

  00054	8b 4c 24 20	 mov	 ecx, DWORD PTR __Strbuf$[esp+24]
  00058	c7 04 16 00 00
	00 00		 mov	 DWORD PTR [esi+edx], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0005f	8b 16		 mov	 edx, DWORD PTR [esi]
  00061	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00064	8b 44 24 24	 mov	 eax, DWORD PTR __Isstd$[esp+24]
  00068	50		 push	 eax
  00069	51		 push	 ecx
  0006a	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0006d	03 ce		 add	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init

; 34   : 		}

  00074	8b c6		 mov	 eax, esi
  00076	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	5e		 pop	 esi
  00083	83 c4 14	 add	 esp, 20			; 00000014H
  00086	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T163039[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_istr
  0000c	83 65 ec fe	 and	 DWORD PTR $T163039[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 08	 add	 ecx, 8
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN5@basic_istr:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 f4	 lea	 eax, DWORD PTR [edx-12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::basic_istream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

  00000	56		 push	 esi

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 13		 je	 SHORT $LN7@Destroy
  0000e	8b ff		 npad	 2
$LL9@Destroy:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00017	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0001d	3b f7		 cmp	 esi, edi
  0001f	75 ef		 jne	 SHORT $LL9@Destroy
$LN7@Destroy:
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 1120 : 		}

  00023	c2 08 00	 ret	 8
?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy
_TEXT	ENDS
PUBLIC	??1?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~list<CipherShed::Partition,std::allocator<CipherShed::Partition> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??1?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ PROC ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~list<CipherShed::Partition,std::allocator<CipherShed::Partition> >, COMDAT
; _this$ = ecx

; 520  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 521  : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
  00008	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 522  : 		}

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	51		 push	 ecx
  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 08	 add	 esp, 8
  00023	5e		 pop	 esi
  00024	c3		 ret	 0
??1?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAE@XZ ENDP ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::~list<CipherShed::Partition,std::allocator<CipherShed::Partition> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?erase@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@0@Z
_TEXT	SEGMENT
$T163401 = -4						; size = 1
__Cat$163405 = 8					; size = 1
$T163403 = 8						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@0@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

  00000	51		 push	 ecx
  00001	53		 push	 ebx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

  00002	8b 5c 24 0c	 mov	 ebx, DWORD PTR ___$ReturnUdt$[esp+4]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi
  0000a	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  00010	85 f6		 test	 esi, esi
  00012	74 0e		 je	 SHORT $LN11@erase@3
  00014	8b 44 24 1c	 mov	 eax, DWORD PTR __First_arg$[esp+16]
  00018	39 46 0c	 cmp	 DWORD PTR [esi+12], eax
  0001b	77 05		 ja	 SHORT $LN11@erase@3
  0001d	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  00020	76 09		 jbe	 SHORT $LN10@erase@3
$LN11@erase@3:
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00027	8b 44 24 1c	 mov	 eax, DWORD PTR __First_arg$[esp+16]
$LN10@erase@3:

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

  0002b	8b 7c 24 24	 mov	 edi, DWORD PTR __Last_arg$[esp+16]
  0002f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00031	89 0b		 mov	 DWORD PTR [ebx], ecx
  00033	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00036	39 7e 0c	 cmp	 DWORD PTR [esi+12], edi
  00039	77 05		 ja	 SHORT $LN30@erase@3
  0003b	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0003e	76 09		 jbe	 SHORT $LN29@erase@3
$LN30@erase@3:
  00040	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00045	8b 7c 24 24	 mov	 edi, DWORD PTR __Last_arg$[esp+16]
$LN29@erase@3:

; 1031 : 
; 1032 : 		if (_First != _Last)

  00049	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004d	85 c0		 test	 eax, eax
  0004f	74 04		 je	 SHORT $LN47@erase@3
  00051	3b c1		 cmp	 eax, ecx
  00053	74 05		 je	 SHORT $LN46@erase@3
$LN47@erase@3:
  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN46@erase@3:
  0005a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0005d	3b cf		 cmp	 ecx, edi
  0005f	74 4f		 je	 SHORT $LN89@erase@3

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

  00061	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00064	55		 push	 ebp
  00065	c6 44 24 10 00	 mov	 BYTE PTR $T163401[esp+20], 0
  0006a	8b 54 24 10	 mov	 edx, DWORD PTR $T163401[esp+20]
  0006e	52		 push	 edx
  0006f	8b 54 24 1c	 mov	 edx, DWORD PTR __Cat$163405[esp+20]
  00073	52		 push	 edx
  00074	8b 54 24 20	 mov	 edx, DWORD PTR $T163403[esp+24]
  00078	52		 push	 edx
  00079	51		 push	 ecx
  0007a	50		 push	 eax
  0007b	57		 push	 edi
  0007c	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *>

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

  00081	8b 6e 10	 mov	 ebp, DWORD PTR [esi+16]
  00084	8b d8		 mov	 ebx, eax
  00086	83 c4 18	 add	 esp, 24			; 00000018H
  00089	8b fb		 mov	 edi, ebx
  0008b	3b dd		 cmp	 ebx, ebp
  0008d	74 12		 je	 SHORT $LN75@erase@3
  0008f	90		 npad	 1
$LL77@erase@3:
  00090	8b cf		 mov	 ecx, edi
  00092	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00097	81 c7 88 00 00
	00		 add	 edi, 136		; 00000088H
  0009d	3b fd		 cmp	 edi, ebp
  0009f	75 ef		 jne	 SHORT $LL77@erase@3
$LN75@erase@3:

; 1049 : 			_Mylast = _Ptr;
; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

  000a1	8b 44 24 18	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+16]
  000a5	5d		 pop	 ebp
  000a6	5f		 pop	 edi
  000a7	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx

; 1055 : #endif
; 1056 : 		}

  000ac	59		 pop	 ecx
  000ad	c2 14 00	 ret	 20			; 00000014H
$LN89@erase@3:
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi

; 1049 : 			_Mylast = _Ptr;
; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

  000b2	8b c3		 mov	 eax, ebx
  000b4	5b		 pop	 ebx

; 1055 : #endif
; 1056 : 		}

  000b5	59		 pop	 ecx
  000b6	c2 14 00	 ret	 20			; 00000014H
?erase@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@0@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi

; 1124 : 		if (_Myfirst != 0)

  00004	8b 73 0c	 mov	 esi, DWORD PTR [ebx+12]
  00007	85 f6		 test	 esi, esi
  00009	74 26		 je	 SHORT $LN22@Tidy@4
  0000b	57		 push	 edi

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

  0000c	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
  0000f	3b f7		 cmp	 esi, edi
  00011	74 11		 je	 SHORT $LN10@Tidy@4
$LL12@Tidy@4:
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  0001a	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00020	3b f7		 cmp	 esi, edi
  00022	75 ef		 jne	 SHORT $LL12@Tidy@4
$LN10@Tidy@4:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  00024	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	83 c4 04	 add	 esp, 4
  00030	5f		 pop	 edi
$LN22@Tidy@4:
  00031	5e		 pop	 esi

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00032	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
  00039	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  00040	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
  00047	5b		 pop	 ebx

; 1135 : 		}

  00048	c3		 ret	 0
?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy
_TEXT	ENDS
PUBLIC	??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >
;	COMDAT ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	04H
CONST	ENDS
;	COMDAT ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
CONST	SEGMENT
??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	0cH
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$0
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$1
	DD	02H
	DD	00H
__ehfuncinfo$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\istream
xdata$x	ENDS
;	COMDAT ??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
_TEXT	SEGMENT
$T163601 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 914  : 		{	// construct from stream buffer pointer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c4		 xor	 eax, esp
  0001b	50		 push	 eax
  0001c	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f9		 mov	 edi, ecx
  00028	89 7c 24 14	 mov	 DWORD PTR _this$[esp+36], edi
  0002c	33 db		 xor	 ebx, ebx
  0002e	89 5c 24 10	 mov	 DWORD PTR $T163601[esp+36], ebx
  00032	39 5c 24 2c	 cmp	 DWORD PTR _$initVBases$[esp+32], ebx
  00036	74 20		 je	 SHORT $LN1@basic_iost
  00038	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
  0003e	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
  00045	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  0004c	89 5c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebx
  00050	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR $T163601[esp+36], 1
$LN1@basic_iost:
  00058	8b 07		 mov	 eax, DWORD PTR [edi]
  0005a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005d	c7 04 0f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00064	8b 17		 mov	 edx, DWORD PTR [edi]
  00066	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00069	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0006c	03 f7		 add	 esi, edi
  0006e	8b ce		 mov	 ecx, esi
  00070	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init
  00075	8b 44 24 28	 mov	 eax, DWORD PTR __Strbuf$[esp+32]
  00079	6a 20		 push	 32			; 00000020H
  0007b	8b ce		 mov	 ecx, esi
  0007d	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00080	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00083	e8 00 00 00 00	 call	 ?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen
  00088	66 89 46 30	 mov	 WORD PTR [esi+48], ax
  0008c	39 5e 28	 cmp	 DWORD PTR [esi+40], ebx
  0008f	75 12		 jne	 SHORT $LN31@basic_iost
  00091	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00094	83 c8 04	 or	 eax, 4
  00097	83 c8 04	 or	 eax, 4
  0009a	53		 push	 ebx
  0009b	50		 push	 eax
  0009c	8b ce		 mov	 ecx, esi
  0009e	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN31@basic_iost:
  000a3	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  000a6	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000a9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ac	c7 44 17 08 00
	00 00 00	 mov	 DWORD PTR [edi+edx+8], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  000b4	8b 07		 mov	 eax, DWORD PTR [edi]
  000b6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b9	c7 04 0f 00 00
	00 00		 mov	 DWORD PTR [edi+ecx], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@

; 915  : 		}

  000c0	8b c7		 mov	 eax, edi
  000c2	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000c6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cd	59		 pop	 ecx
  000ce	5f		 pop	 edi
  000cf	5e		 pop	 esi
  000d0	5b		 pop	 ebx
  000d1	83 c4 14	 add	 esp, 20			; 00000014H
  000d4	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T163601[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_iost
  0000c	83 65 ec fe	 and	 DWORD PTR $T163601[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN5@basic_iost:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 08	 add	 ecx, 8
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0002e	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\streambuf
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 102  : 			{	// destroy the object

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	56		 push	 esi
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00015	33 c4		 xor	 eax, esp
  00017	50		 push	 eax
  00018	8d 44 24 0c	 lea	 eax, DWORD PTR __$EHRec$[esp+24]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b f1		 mov	 esi, ecx
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0

; 103  : 
; 104  :  #if _HAS_EXCEPTIONS
; 105  : 			if (!_XSTD uncaught_exception())

  00030	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00035	84 c0		 test	 al, al
  00037	75 07		 jne	 SHORT $LN1@sentry@2

; 106  : 				this->_Myostr._Osfx();

  00039	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003b	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
$LN1@sentry@2:

; 107  : 			}

  00040	8b 06		 mov	 eax, DWORD PTR [esi]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00047	8b 44 02 28	 mov	 eax, DWORD PTR [edx+eax+40]
  0004b	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+32], -1
  00053	85 c0		 test	 eax, eax
  00055	74 08		 je	 SHORT $LN12@sentry@2
  00057	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0005a	e8 00 00 00 00	 call	 ?_Unlock@_Mutex@std@@QAEXXZ ; std::_Mutex::_Unlock
$LN12@sentry@2:
  0005f	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006a	59		 pop	 ecx
  0006b	5e		 pop	 esi
  0006c	83 c4 10	 add	 esp, 16			; 00000010H
  0006f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
PUBLIC	??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$5
__unwindtable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T163948 = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T164088 = 8						; size = 1
__Cat$164092 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
  00030	6a 04		 push	 4
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	83 c4 04	 add	 esp, 4
  0003a	85 c0		 test	 eax, eax
  0003c	74 04		 je	 SHORT $LN19@vector@2
  0003e	89 30		 mov	 DWORD PTR [eax], esi
  00040	eb 02		 jmp	 SHORT $LN20@vector@2
$LN19@vector@2:
  00042	33 c0		 xor	 eax, eax
$LN20@vector@2:
  00044	89 06		 mov	 DWORD PTR [esi], eax

; 501  : 		if (_Buy(_Right.size()))

  00046	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00049	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  0004c	2b 4b 0c	 sub	 ecx, DWORD PTR [ebx+12]
  0004f	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00054	f7 e9		 imul	 ecx
  00056	c1 fa 06	 sar	 edx, 6
  00059	8b fa		 mov	 edi, edx
  0005b	b8 00 00 00 00	 mov	 eax, 0
  00060	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00063	03 fa		 add	 edi, edx
  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0006c	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0006f	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00072	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00075	74 6d		 je	 SHORT $LN8@vector@2
  00077	81 ff e1 e1 e1
	01		 cmp	 edi, 31580641		; 01e1e1e1H
  0007d	76 05		 jbe	 SHORT $LN46@vector@2
  0007f	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen
$LN46@vector@2:
  00084	50		 push	 eax
  00085	57		 push	 edi
  00086	e8 00 00 00 00	 call	 ??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ; std::_Allocate<HostDevice>
  0008b	69 ff 88 00 00
	00		 imul	 edi, 136		; 00000088H
  00091	03 f8		 add	 edi, eax
  00093	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00096	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00099	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 502  : 			_TRY_BEGIN
; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

  0009c	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0009f	83 c4 08	 add	 esp, 8
  000a2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000a6	89 45 ec	 mov	 DWORD PTR $T163948[ebp], eax
  000a9	39 43 0c	 cmp	 DWORD PTR [ebx+12], eax
  000ac	76 05		 jbe	 SHORT $LN63@vector@2
  000ae	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN63@vector@2:
  000b3	8b 7b 0c	 mov	 edi, DWORD PTR [ebx+12]
  000b6	3b 7b 10	 cmp	 edi, DWORD PTR [ebx+16]
  000b9	76 05		 jbe	 SHORT $LN80@vector@2
  000bb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN80@vector@2:
  000c0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000c3	c6 45 08 00	 mov	 BYTE PTR $T164088[ebp], 0
  000c7	8b 4d 08	 mov	 ecx, DWORD PTR $T164088[ebp]
  000ca	8b 55 08	 mov	 edx, DWORD PTR __Cat$164092[ebp]
  000cd	51		 push	 ecx
  000ce	52		 push	 edx
  000cf	8b 55 ec	 mov	 edx, DWORD PTR $T163948[ebp]
  000d2	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  000d5	51		 push	 ecx
  000d6	50		 push	 eax
  000d7	52		 push	 edx
  000d8	57		 push	 edi
  000d9	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice const *,HostDevice *,std::allocator<HostDevice> >
  000de	83 c4 18	 add	 esp, 24			; 00000018H
  000e1	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN8@vector@2:

; 507  : 			_CATCH_END
; 508  : 		}

  000e4	8b c6		 mov	 eax, esi
  000e6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f0	59		 pop	 ecx
  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c2 04 00	 ret	 4
__catch$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

  000fa	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000fd	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy

; 506  : 			_RERAISE;

  00102	6a 00		 push	 0
  00104	6a 00		 push	 0
  00106	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN114@vector@2:
  0010b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
PUBLIC	??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	SEGMENT
__catchsym$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$9 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$0
__tryblocktable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z DD 01H
	DD	01H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$9
__ehfuncinfo$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
_TEXT	SEGMENT
__Ok$ = -32						; size = 8
__Pad$ = -24						; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z PROC ; std::operator<<<wchar_t,std::char_traits<wchar_t> >, COMDAT

; 827  : 	{	// insert NTCS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 828  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 829  : 	ios_base::iostate _State = ios_base::goodbit;
; 830  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0002e	33 db		 xor	 ebx, ebx
  00030	89 5d ec	 mov	 DWORD PTR __State$[ebp], ebx
  00033	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL134@operator@16:
  00036	66 8b 08	 mov	 cx, WORD PTR [eax]
  00039	83 c0 02	 add	 eax, 2
  0003c	66 3b cb	 cmp	 cx, bx
  0003f	75 f5		 jne	 SHORT $LL134@operator@16

; 831  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
; 832  : 		? 0 : _Ostr.width() - _Count;

  00041	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	8b f8		 mov	 edi, eax
  0004a	8b 06		 mov	 eax, DWORD PTR [esi]
  0004c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004f	8b 44 31 18	 mov	 eax, DWORD PTR [ecx+esi+24]
  00053	3b c3		 cmp	 eax, ebx
  00055	7e 0d		 jle	 SHORT $LN17@operator@16
  00057	3b c7		 cmp	 eax, edi
  00059	7e 09		 jle	 SHORT $LN17@operator@16
  0005b	2b c7		 sub	 eax, edi
  0005d	8b d8		 mov	 ebx, eax
  0005f	89 45 e8	 mov	 DWORD PTR __Pad$[ebp], eax
  00062	eb 03		 jmp	 SHORT $LN18@operator@16
$LN17@operator@16:
  00064	89 5d e8	 mov	 DWORD PTR __Pad$[ebp], ebx
$LN18@operator@16:

; 833  : 	const typename _Myos::sentry _Ok(_Ostr);

  00067	56		 push	 esi
  00068	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0006b	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry

; 834  : 
; 835  : 	if (!_Ok)

  00070	80 7d e4 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00074	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0007b	75 0a		 jne	 SHORT $LN14@operator@16

; 836  : 		_State |= ios_base::badbit;

  0007d	ba 04 00 00 00	 mov	 edx, 4

; 837  : 	else

  00082	e9 ab 00 00 00	 jmp	 $LN22@operator@16
$LN14@operator@16:

; 838  : 		{	// state okay, insert
; 839  : 		_TRY_IO_BEGIN
; 840  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  00087	8b 16		 mov	 edx, DWORD PTR [esi]
  00089	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0008c	8b 44 30 10	 mov	 eax, DWORD PTR [eax+esi+16]
  00090	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00095	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00099	83 f8 40	 cmp	 eax, 64			; 00000040H
  0009c	74 63		 je	 SHORT $LN132@operator@16
  0009e	8b ff		 npad	 2
$LL10@operator@16:

; 841  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  000a0	85 db		 test	 ebx, ebx
  000a2	7e 57		 jle	 SHORT $LN8@operator@16

; 842  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 843  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  000a4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000a6	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000a9	8b 4c 32 28	 mov	 ecx, DWORD PTR [edx+esi+40]
  000ad	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  000b0	0f b7 50 30	 movzx	 edx, WORD PTR [eax+48]
  000b4	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  000b7	83 38 00	 cmp	 DWORD PTR [eax], 0
  000ba	74 1f		 je	 SHORT $LN42@operator@16
  000bc	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  000bf	83 38 00	 cmp	 DWORD PTR [eax], 0
  000c2	7e 17		 jle	 SHORT $LN42@operator@16
  000c4	ff 08		 dec	 DWORD PTR [eax]
  000c6	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000c9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000cb	8d 58 02	 lea	 ebx, DWORD PTR [eax+2]
  000ce	89 19		 mov	 DWORD PTR [ecx], ebx
  000d0	8b 5d e8	 mov	 ebx, DWORD PTR __Pad$[ebp]
  000d3	66 89 10	 mov	 WORD PTR [eax], dx
  000d6	0f b7 c2	 movzx	 eax, dx
  000d9	eb 0e		 jmp	 SHORT $LN43@operator@16
$LN42@operator@16:
  000db	8b 01		 mov	 eax, DWORD PTR [ecx]
  000dd	52		 push	 edx
  000de	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000e1	ff d2		 call	 edx
  000e3	0f b7 c0	 movzx	 eax, ax
  000e6	0f b7 c0	 movzx	 eax, ax
$LN43@operator@16:
  000e9	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  000ee	66 3b c8	 cmp	 cx, ax
  000f1	0f 85 7f 00 00
	00		 jne	 $LN9@operator@16

; 844  : 					{	// insertion failed, quit
; 845  : 					_State |= ios_base::badbit;

  000f7	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4
$LN8@operator@16:

; 846  : 					break;
; 847  : 					}
; 848  : 
; 849  : 		if (_State == ios_base::goodbit
; 850  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  000fb	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  000ff	75 1f		 jne	 SHORT $LN2@operator@16
$LN132@operator@16:
  00101	8b 16		 mov	 edx, DWORD PTR [esi]
  00103	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00106	8b 4c 30 28	 mov	 ecx, DWORD PTR [eax+esi+40]
  0010a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0010c	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0010f	57		 push	 edi
  00110	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00113	ff d0		 call	 eax
  00115	3b c7		 cmp	 eax, edi
  00117	74 67		 je	 SHORT $LL133@operator@16

; 851  : 			_State |= ios_base::badbit;

  00119	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR __State$[ebp], 4
$LN2@operator@16:

; 860  : 					}
; 861  : 		_Ostr.width(0);

  00120	8b 06		 mov	 eax, DWORD PTR [esi]
  00122	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00125	03 c6		 add	 eax, esi
  00127	33 c9		 xor	 ecx, ecx
  00129	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  0012c	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ecx
$LN141@operator@16:
  0012f	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
$LN22@operator@16:

; 863  : 		}
; 864  : 
; 865  : 	_Ostr.setstate(_State);

  00132	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00134	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00137	03 ce		 add	 ecx, esi
  00139	85 d2		 test	 edx, edx
  0013b	74 16		 je	 SHORT $LN125@operator@16
  0013d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00140	0b c2		 or	 eax, edx
  00142	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  00146	75 03		 jne	 SHORT $LN127@operator@16
  00148	83 c8 04	 or	 eax, 4
$LN127@operator@16:
  0014b	6a 00		 push	 0
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN125@operator@16:

; 866  : 	return (_Ostr);

  00153	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00156	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0015d	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
  00162	8b c6		 mov	 eax, esi

; 867  : 	}

  00164	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00167	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016e	59		 pop	 ecx
  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	5b		 pop	 ebx
  00172	8b e5		 mov	 esp, ebp
  00174	5d		 pop	 ebp
  00175	c3		 ret	 0
$LN9@operator@16:

; 841  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00176	4b		 dec	 ebx
  00177	89 5d e8	 mov	 DWORD PTR __Pad$[ebp], ebx
  0017a	e9 21 ff ff ff	 jmp	 $LL10@operator@16
  0017f	90		 npad	 1
$LL133@operator@16:

; 852  : 
; 853  : 		if (_State == ios_base::goodbit)
; 854  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00180	85 db		 test	 ebx, ebx
  00182	7e 9c		 jle	 SHORT $LN2@operator@16

; 855  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 856  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00184	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00186	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00189	8b 4c 32 28	 mov	 ecx, DWORD PTR [edx+esi+40]
  0018d	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  00190	0f b7 50 30	 movzx	 edx, WORD PTR [eax+48]
  00194	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00197	83 38 00	 cmp	 DWORD PTR [eax], 0
  0019a	74 1c		 je	 SHORT $LN68@operator@16
  0019c	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0019f	83 38 00	 cmp	 DWORD PTR [eax], 0
  001a2	7e 14		 jle	 SHORT $LN68@operator@16
  001a4	ff 08		 dec	 DWORD PTR [eax]
  001a6	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  001a9	8b 01		 mov	 eax, DWORD PTR [ecx]
  001ab	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  001ae	89 39		 mov	 DWORD PTR [ecx], edi
  001b0	66 89 10	 mov	 WORD PTR [eax], dx
  001b3	0f b7 c2	 movzx	 eax, dx
  001b6	eb 0e		 jmp	 SHORT $LN69@operator@16
$LN68@operator@16:
  001b8	8b 01		 mov	 eax, DWORD PTR [ecx]
  001ba	52		 push	 edx
  001bb	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001be	ff d2		 call	 edx
  001c0	0f b7 c0	 movzx	 eax, ax
  001c3	0f b7 c0	 movzx	 eax, ax
$LN69@operator@16:
  001c6	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  001cb	66 3b c8	 cmp	 cx, ax
  001ce	75 09		 jne	 SHORT $LN3@operator@16

; 857  : 					{	// insertion failed, quit
; 858  : 					_State |= ios_base::badbit;

  001d0	83 4d ec 04	 or	 DWORD PTR __State$[ebp], 4

; 859  : 					break;

  001d4	e9 47 ff ff ff	 jmp	 $LN2@operator@16
$LN3@operator@16:

; 852  : 
; 853  : 		if (_State == ios_base::goodbit)
; 854  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  001d9	4b		 dec	 ebx
  001da	eb a4		 jmp	 SHORT $LL133@operator@16
__catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$0:

; 862  : 		_CATCH_IO_(_Ostr)

  001dc	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  001df	8b 11		 mov	 edx, DWORD PTR [ecx]
  001e1	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001e4	03 c1		 add	 eax, ecx
  001e6	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001e9	83 c9 04	 or	 ecx, 4
  001ec	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  001f0	75 03		 jne	 SHORT $LN93@operator@16
  001f2	83 c9 04	 or	 ecx, 4
$LN93@operator@16:
  001f5	83 e1 17	 and	 ecx, 23			; 00000017H
  001f8	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  001fb	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  001fe	75 15		 jne	 SHORT $LN102@operator@16
  00200	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00207	b8 00 00 00 00	 mov	 eax, $LN23@operator@16
  0020c	c3		 ret	 0
$LN23@operator@16:
  0020d	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00210	e9 1a ff ff ff	 jmp	 $LN141@operator@16
$LN102@operator@16:
  00215	6a 00		 push	 0
  00217	6a 00		 push	 0
  00219	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN140@operator@16:
  0021e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$2:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
__ehhandler$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ENDP ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_7?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`vftable'
PUBLIC	??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
PUBLIC	??_R4?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::IsNotEnd
PUBLIC	?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::Next
EXTRN	??_E?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z:PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R2?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 DD FLAT:??_R1A@?0A@EA@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Container@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	SEGMENT
??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8 DD 00H ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@@8
_DATA	SEGMENT
??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocat'
	DB	'or@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@
rdata$r	SEGMENT
??_R4?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@ DD 00H ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@@8
	DD	FLAT:??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@8
rdata$r	ENDS
;	COMDAT ??_7?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@
CONST	SEGMENT
??_7?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@ DD FLAT:??_R4?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@ ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`vftable'
	DD	FLAT:??_E?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
	DD	FLAT:?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
	DD	FLAT:?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z$0
__ehfuncinfo$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\platform\foreach.h
xdata$x	ENDS
;	COMDAT ??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_container$ = 8						; size = 4
??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT
; _this$ = ecx

; 36   : 				: ContainerCopy (container), EndIterator (ContainerCopy.end()), Iterator (ContainerCopy.begin()) { }

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	55		 push	 ebp
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 14	 mov	 DWORD PTR _this$[esp+36], esi
  0002b	33 db		 xor	 ebx, ebx
  0002d	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
  00031	88 5e 05	 mov	 BYTE PTR [esi+5], bl
  00034	8b 44 24 28	 mov	 eax, DWORD PTR _container$[esp+32]
  00038	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  0003b	50		 push	 eax
  0003c	8b cf		 mov	 ecx, edi
  0003e	89 5c 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], ebx
  00042	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@6B@
  00048	e8 00 00 00 00	 call	 ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
  0004d	8b 6f 10	 mov	 ebp, DWORD PTR [edi+16]
  00050	89 5e 20	 mov	 DWORD PTR [esi+32], ebx
  00053	39 6f 0c	 cmp	 DWORD PTR [edi+12], ebp
  00056	77 05		 ja	 SHORT $LN12@ContainerF
  00058	3b 6f 10	 cmp	 ebp, DWORD PTR [edi+16]
  0005b	76 05		 jbe	 SHORT $LN11@ContainerF
$LN12@ContainerF:
  0005d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN11@ContainerF:
  00062	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00064	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  00067	89 6e 24	 mov	 DWORD PTR [esi+36], ebp
  0006a	8b 6f 0c	 mov	 ebp, DWORD PTR [edi+12]
  0006d	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00070	39 6f 0c	 cmp	 DWORD PTR [edi+12], ebp
  00073	77 05		 ja	 SHORT $LN29@ContainerF
  00075	3b 6f 10	 cmp	 ebp, DWORD PTR [edi+16]
  00078	76 05		 jbe	 SHORT $LN28@ContainerF
$LN29@ContainerF:
  0007a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN28@ContainerF:
  0007f	8b 17		 mov	 edx, DWORD PTR [edi]
  00081	89 56 28	 mov	 DWORD PTR [esi+40], edx
  00084	89 6e 2c	 mov	 DWORD PTR [esi+44], ebp
  00087	8b c6		 mov	 eax, esi
  00089	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  0008d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00094	59		 pop	 ecx
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5d		 pop	 ebp
  00098	5b		 pop	 ebx
  00099	83 c4 10	 add	 esp, 16			; 00000010H
  0009c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@CipherShed@@UAE@XZ ; CipherShed::ForEach::Container::~Container
__ehhandler$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
PUBLIC	??E?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator++, COMDAT
; _this$ = ecx

; 115  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 116  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	75 0b		 jne	 SHORT $LN19@operator@17
  00009	e8 00 00 00 00	 call	 __invalid_parameter_noinfo

; 117  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	85 c0		 test	 eax, eax
  00012	74 04		 je	 SHORT $LN15@operator@17
$LN19@operator@17:
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	eb 02		 jmp	 SHORT $LN16@operator@17
$LN15@operator@17:
  00018	33 c0		 xor	 eax, eax
$LN16@operator@17:
  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00020	72 05		 jb	 SHORT $LN20@operator@17
  00022	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN20@operator@17:

; 118  : 
; 119  :  #if _HAS_ITERATOR_DEBUGGING
; 120  : 		if (this->_Mycont == 0
; 121  : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 122  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 123  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 124  : 
; 125  : 		++_Myptr;

  00027	81 46 04 88 00
	00 00		 add	 DWORD PTR [esi+4], 136	; 00000088H

; 126  : 		return (*this);

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi

; 127  : 		}

  00031	c3		 ret	 0
??E?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator++
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\platform\foreach.h
_TEXT	ENDS
;	COMDAT ?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ
_TEXT	SEGMENT
?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::Next, COMDAT
; _this$ = ecx

; 39   : 			virtual void Next () const { ++Iterator; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00006	85 c0		 test	 eax, eax
  00008	75 0c		 jne	 SHORT $LN21@Next
  0000a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  0000f	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00012	85 c0		 test	 eax, eax
  00014	74 04		 je	 SHORT $LN17@Next
$LN21@Next:
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	eb 02		 jmp	 SHORT $LN18@Next
$LN17@Next:
  0001a	33 c0		 xor	 eax, eax
$LN18@Next:
  0001c	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0001f	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00022	72 05		 jb	 SHORT $LN22@Next
  00024	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN22@Next:
  00029	81 46 2c 88 00
	00 00		 add	 DWORD PTR [esi+44], 136	; 00000088H
  00030	5e		 pop	 esi
  00031	c3		 ret	 0
?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBEXXZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::Next
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ
_TEXT	SEGMENT
?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::IsNotEnd, COMDAT
; _this$ = ecx

; 38   : 			virtual bool IsNotEnd () const { bool r = InnerContinue && Iterator != EndIterator; InnerContinue = false; return r; }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  00007	74 21		 je	 SHORT $LN3@IsNotEnd
  00009	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0000c	85 c0		 test	 eax, eax
  0000e	74 05		 je	 SHORT $LN10@IsNotEnd
  00010	3b 46 20	 cmp	 eax, DWORD PTR [esi+32]
  00013	74 05		 je	 SHORT $LN9@IsNotEnd
$LN10@IsNotEnd:
  00015	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@IsNotEnd:
  0001a	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0001d	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  00020	74 08		 je	 SHORT $LN3@IsNotEnd
  00022	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00026	b0 01		 mov	 al, 1
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
$LN3@IsNotEnd:
  0002a	32 c0		 xor	 al, al
  0002c	88 46 04	 mov	 BYTE PTR [esi+4], al
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UBE_NXZ ENDP ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::IsNotEnd
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_G?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z PROC ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@24
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@24:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_G?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAEPAXI@Z ENDP ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1SystemDriveConfiguration@CipherShed@@QAE@XZ	; CipherShed::SystemDriveConfiguration::~SystemDriveConfiguration
; Function compile flags: /Ogtpy
;	COMDAT ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
_TEXT	SEGMENT
??1SystemDriveConfiguration@CipherShed@@QAE@XZ PROC	; CipherShed::SystemDriveConfiguration::~SystemDriveConfiguration, COMDAT
; _this$ = ecx
  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi
  00005	8d 8e f0 00 00
	00		 lea	 ecx, DWORD PTR [esi+240]
  0000b	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ
  00010	8d be d0 00 00
	00		 lea	 edi, DWORD PTR [esi+208]
  00016	8b cf		 mov	 ecx, edi
  00018	e8 00 00 00 00	 call	 ?clear@?$list@UPartition@CipherShed@@V?$allocator@UPartition@CipherShed@@@std@@@std@@QAEXXZ ; std::list<CipherShed::Partition,std::allocator<CipherShed::Partition> >::clear
  0001d	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00028	33 db		 xor	 ebx, ebx
  0002a	51		 push	 ecx
  0002b	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00033	83 c4 08	 add	 esp, 8
  00036	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00039	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ
  0003e	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  00043	39 7e 34	 cmp	 DWORD PTR [esi+52], edi
  00046	72 0c		 jb	 SHORT $LN46@SystemDriv
  00048	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00051	83 c4 04	 add	 esp, 4
$LN46@SystemDriv:
  00054	c7 46 34 0f 00
	00 00		 mov	 DWORD PTR [esi+52], 15	; 0000000fH
  0005b	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
  0005e	88 5e 20	 mov	 BYTE PTR [esi+32], bl
  00061	39 7e 18	 cmp	 DWORD PTR [esi+24], edi
  00064	72 0c		 jb	 SHORT $LN72@SystemDriv
  00066	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006f	83 c4 04	 add	 esp, 4
$LN72@SystemDriv:
  00072	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00075	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0007c	5f		 pop	 edi
  0007d	88 5e 04	 mov	 BYTE PTR [esi+4], bl
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	c3		 ret	 0
??1SystemDriveConfiguration@CipherShed@@QAE@XZ ENDP	; CipherShed::SystemDriveConfiguration::~SystemDriveConfiguration
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ:PROC ; CipherShed::BootEncryption::GetSystemDriveConfiguration
;	COMDAT xdata$x
; File c:\users\public\desktop\projects\ciphershed\src\format\tcformat.c
xdata$x	SEGMENT
__catchsym$?CheckGapBetweenSysAndHiddenOS@@YAHXZ$4 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffe68H
	DD	FLAT:__catch$?CheckGapBetweenSysAndHiddenOS@@YAHXZ$0
__tryblocktable$?CheckGapBetweenSysAndHiddenOS@@YAHXZ DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?CheckGapBetweenSysAndHiddenOS@@YAHXZ$4
__unwindtable$?CheckGapBetweenSysAndHiddenOS@@YAHXZ DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?CheckGapBetweenSysAndHiddenOS@@YAHXZ$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?CheckGapBetweenSysAndHiddenOS@@YAHXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?CheckGapBetweenSysAndHiddenOS@@YAHXZ
	DD	01H
	DD	FLAT:__tryblocktable$?CheckGapBetweenSysAndHiddenOS@@YAHXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?CheckGapBetweenSysAndHiddenOS@@YAHXZ
_TEXT	SEGMENT
$T164981 = -540						; size = 128
_e$132279 = -408					; size = 4
_sysDriveCfg$132275 = -404				; size = 384
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
?CheckGapBetweenSysAndHiddenOS@@YAHXZ PROC		; CheckGapBetweenSysAndHiddenOS, COMDAT

; 1729 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CheckGapBetweenSysAndHiddenOS@@YAHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 10 02 00
	00		 sub	 esp, 528		; 00000210H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1730 : 	try
; 1731 : 	{
; 1732 : 		SystemDriveConfiguration sysDriveCfg = BootEncObj->GetSystemDriveConfiguration();

  00031	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00037	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _sysDriveCfg$132275[ebp]
  0003d	33 f6		 xor	 esi, esi
  0003f	50		 push	 eax
  00040	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
  00043	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration

; 1733 : 
; 1734 : 		return (sysDriveCfg.SystemPartition.Info.StartingOffset.QuadPart 
; 1735 : 			+ sysDriveCfg.SystemPartition.Info.PartitionLength.QuadPart
; 1736 : 			+ 64 * BYTES_PER_MB
; 1737 : 			+ 128 * BYTES_PER_KB
; 1738 : 			<= BootEncObj->GetPartitionForHiddenOS().Info.StartingOffset.QuadPart);

  00048	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR $T164981[ebp]
  0004e	51		 push	 ecx
  0004f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00055	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00059	e8 00 00 00 00	 call	 ?GetPartitionForHiddenOS@BootEncryption@CipherShed@@QAE?AUPartition@2@XZ ; CipherShed::BootEncryption::GetPartitionForHiddenOS
  0005e	8b 55 84	 mov	 edx, DWORD PTR _sysDriveCfg$132275[ebp+280]
  00061	03 95 7c ff ff
	ff		 add	 edx, DWORD PTR _sysDriveCfg$132275[ebp+272]
  00067	8b 4d 88	 mov	 ecx, DWORD PTR _sysDriveCfg$132275[ebp+284]
  0006a	13 4d 80	 adc	 ecx, DWORD PTR _sysDriveCfg$132275[ebp+276]
  0006d	81 c2 00 00 02
	04		 add	 edx, 67239936		; 04020000H
  00073	13 ce		 adc	 ecx, esi
  00075	3b 48 24	 cmp	 ecx, DWORD PTR [eax+36]
  00078	7f 0c		 jg	 SHORT $LN4@CheckGapBe
  0007a	7c 05		 jl	 SHORT $LN13@CheckGapBe
  0007c	3b 50 20	 cmp	 edx, DWORD PTR [eax+32]
  0007f	77 05		 ja	 SHORT $LN4@CheckGapBe
$LN13@CheckGapBe:
  00081	be 01 00 00 00	 mov	 esi, 1
$LN4@CheckGapBe:
  00086	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR $T164981[ebp]
  0008c	e8 00 00 00 00	 call	 ??1Partition@CipherShed@@QAE@XZ
  00091	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR _sysDriveCfg$132275[ebp]
  00097	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
  0009c	8b c6		 mov	 eax, esi
  0009e	eb 1a		 jmp	 SHORT $LN2@CheckGapBe
__catch$?CheckGapBetweenSysAndHiddenOS@@YAHXZ$0:

; 1739 : 	}
; 1740 : 	catch (Exception &e)
; 1741 : 	{
; 1742 : 		e.Show (MainDlg);

  000a0	8b 8d 68 fe ff
	ff		 mov	 ecx, DWORD PTR _e$132279[ebp]
  000a6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  000ad	8b 12		 mov	 edx, DWORD PTR [edx]
  000af	50		 push	 eax
  000b0	ff d2		 call	 edx

; 1743 : 	}

  000b2	b8 00 00 00 00	 mov	 eax, $LN11@CheckGapBe
  000b7	c3		 ret	 0
$LN11@CheckGapBe:

; 1744 : 
; 1745 : 	return FALSE;

  000b8	33 c0		 xor	 eax, eax
$LN2@CheckGapBe:

; 1746 : }

  000ba	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000bd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c4	59		 pop	 ecx
  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx
  000c8	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cb	33 cd		 xor	 ecx, ebp
  000cd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CheckGapBetweenSysAndHiddenOS@@YAHXZ$2:
  00000	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR _sysDriveCfg$132275[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
__ehhandler$?CheckGapBetweenSysAndHiddenOS@@YAHXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a e0 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-544]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckGapBetweenSysAndHiddenOS@@YAHXZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckGapBetweenSysAndHiddenOS@@YAHXZ ENDP		; CheckGapBetweenSysAndHiddenOS
PUBLIC	??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ios
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z$0
__tryblocktable$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z DD 02H
	DD	02H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z$10
__ehfuncinfo$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\ostream
xdata$x	ENDS
;	COMDAT ??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z
_TEXT	SEGMENT
$T165004 = -48						; size = 8
__Ok$ = -40						; size = 8
$T165024 = -32						; size = 4
$T165001 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T165005 = 8						; size = 8
__Val$ = 8						; size = 8
??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::operator<<, COMDAT
; _this$ = ecx

; 350  : 		{	// insert a long long

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 351  : 		ios_base::iostate _State = ios_base::goodbit;

  00030	33 ff		 xor	 edi, edi

; 352  : 		const sentry _Ok(*this);

  00032	56		 push	 esi
  00033	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00036	33 db		 xor	 ebx, ebx
  00038	89 7d e8	 mov	 DWORD PTR __State$[ebp], edi
  0003b	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
  00040	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 353  : 
; 354  : 		if (_Ok)

  00043	38 5d dc	 cmp	 BYTE PTR __Ok$[ebp+4], bl
  00046	74 79		 je	 SHORT $LN12@operator@18

; 355  : 			{	// state okay, use facet to insert
; 356  : 			const _Nput& _Nput_fac = _USE(ios_base::getloc(), _Nput);

  00048	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004d	8d 45 e4	 lea	 eax, DWORD PTR $T165001[ebp]
  00050	50		 push	 eax
  00051	03 ce		 add	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00058	50		 push	 eax
  00059	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0005d	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >
  00062	83 c4 04	 add	 esp, 4
  00065	8d 4d e4	 lea	 ecx, DWORD PTR $T165001[ebp]
  00068	8b f8		 mov	 edi, eax
  0006a	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 357  : 
; 358  : 			_TRY_IO_BEGIN
; 359  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 360  : 				_Myios::fill(), _Val).failed())

  0006f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00071	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00074	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00077	8d 0c 32	 lea	 ecx, DWORD PTR [edx+esi]
  0007a	0f b7 51 30	 movzx	 edx, WORD PTR [ecx+48]
  0007e	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00081	89 4d e0	 mov	 DWORD PTR $T165024[ebp], ecx
  00084	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp+4]
  00087	51		 push	 ecx
  00088	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
  0008b	51		 push	 ecx
  0008c	52		 push	 edx
  0008d	8b 55 e0	 mov	 edx, DWORD PTR $T165024[ebp]
  00090	03 c6		 add	 eax, esi
  00092	50		 push	 eax
  00093	52		 push	 edx
  00094	88 5d d0	 mov	 BYTE PTR $T165004[ebp], bl
  00097	8b 45 d0	 mov	 eax, DWORD PTR $T165004[ebp]
  0009a	8b 1f		 mov	 ebx, DWORD PTR [edi]
  0009c	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  0009f	50		 push	 eax
  000a0	8d 4d 08	 lea	 ecx, DWORD PTR $T165005[ebp]
  000a3	51		 push	 ecx
  000a4	8b cf		 mov	 ecx, edi
  000a6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000aa	ff d2		 call	 edx
  000ac	80 7d 08 00	 cmp	 BYTE PTR $T165005[ebp], 0

; 361  : 				_State |= ios_base::badbit;

  000b0	bf 04 00 00 00	 mov	 edi, 4
  000b5	75 03		 jne	 SHORT $LN1@operator@18
  000b7	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
$LN1@operator@18:
  000ba	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN12@operator@18:

; 363  : 			}
; 364  : 
; 365  : 		_Myios::setstate(_State);

  000c1	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000c3	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c6	03 ce		 add	 ecx, esi
  000c8	85 ff		 test	 edi, edi
  000ca	74 16		 je	 SHORT $LN65@operator@18
  000cc	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000cf	0b c7		 or	 eax, edi
  000d1	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  000d5	75 03		 jne	 SHORT $LN67@operator@18
  000d7	83 c8 04	 or	 eax, 4
$LN67@operator@18:
  000da	6a 00		 push	 0
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN65@operator@18:

; 366  : 		return (*this);

  000e2	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000e5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000ec	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
  000f1	8b c6		 mov	 eax, esi

; 367  : 		}

  000f3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fd	59		 pop	 ecx
  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c2 08 00	 ret	 8
__catch$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z$0:

; 362  : 			_CATCH_IO_END

  00107	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0010c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0010f	03 c1		 add	 eax, ecx
  00111	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00114	83 c9 04	 or	 ecx, 4
  00117	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  0011b	75 03		 jne	 SHORT $LN33@operator@18
  0011d	83 c9 04	 or	 ecx, 4
$LN33@operator@18:
  00120	83 e1 17	 and	 ecx, 23			; 00000017H
  00123	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00126	85 48 0c	 test	 DWORD PTR [eax+12], ecx
  00129	75 15		 jne	 SHORT $LN42@operator@18
  0012b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00132	b8 00 00 00 00	 mov	 eax, $LN13@operator@18
  00137	c3		 ret	 0
$LN13@operator@18:
  00138	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0013b	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
  0013e	eb 81		 jmp	 SHORT $LN12@operator@18
$LN42@operator@18:
  00140	6a 00		 push	 0
  00142	6a 00		 push	 0
  00144	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN73@operator@18:
  00149	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z$3:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR $T165001[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::operator<<
PUBLIC	?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T165191 = -8						; size = 8
?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 1060 : 		erase(begin(), end());

  00008	8b 6e 10	 mov	 ebp, DWORD PTR [esi+16]
  0000b	57		 push	 edi
  0000c	39 6e 0c	 cmp	 DWORD PTR [esi+12], ebp
  0000f	76 05		 jbe	 SHORT $LN9@clear@4
  00011	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN9@clear@4:
  00016	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00019	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0001b	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0001e	76 05		 jbe	 SHORT $LN28@clear@4
  00020	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN28@clear@4:
  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	55		 push	 ebp
  00028	53		 push	 ebx
  00029	57		 push	 edi
  0002a	50		 push	 eax
  0002b	8d 44 24 20	 lea	 eax, DWORD PTR $T165191[esp+40]
  0002f	50		 push	 eax
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?erase@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::erase
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5d		 pop	 ebp
  0003a	5b		 pop	 ebx

; 1061 : 		}

  0003b	83 c4 08	 add	 esp, 8
  0003e	c3		 ret	 0
?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::clear
_TEXT	ENDS
PUBLIC	??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
PUBLIC	??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
PUBLIC	??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xiosbase
CONST	SEGMENT
??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
	DD	04cH
CONST	ENDS
;	COMDAT ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
	DD	054H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$1
__ehfuncinfo$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\sstream
xdata$x	ENDS
;	COMDAT ??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
_TEXT	SEGMENT
$T165340 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 484  : 		{	// construct empty character buffer

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	83 ec 08	 sub	 esp, 8
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c4		 xor	 eax, esp
  0001a	50		 push	 eax
  0001b	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002b	33 c0		 xor	 eax, eax
  0002d	89 44 24 0c	 mov	 DWORD PTR $T165340[esp+32], eax
  00031	39 44 24 28	 cmp	 DWORD PTR _$initVBases$[esp+28], eax
  00035	74 20		 je	 SHORT $LN1@basic_stri@6
  00037	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
  0003d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
  00044	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  0004b	89 44 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], eax
  0004f	c7 44 24 0c 01
	00 00 00	 mov	 DWORD PTR $T165340[esp+32], 1
$LN1@basic_stri@6:
  00057	50		 push	 eax
  00058	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  0005b	57		 push	 edi
  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >
  00063	8b 06		 mov	 eax, DWORD PTR [esi]
  00065	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00068	8b 54 24 24	 mov	 edx, DWORD PTR __Mode$[esp+28]
  0006c	c7 04 0e 00 00
	00 00		 mov	 DWORD PTR [esi+ecx], OFFSET ??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  00073	52		 push	 edx
  00074	8b cf		 mov	 ecx, edi
  00076	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+44], 1
  0007e	e8 00 00 00 00	 call	 ??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 485  : 		}

  00083	8b c6		 mov	 eax, esi
  00085	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	83 c4 14	 add	 esp, 20			; 00000014H
  00096	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T165340[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_stri@6
  0000c	83 65 ec fe	 and	 DWORD PTR $T165340[ebp], -2 ; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 54	 add	 ecx, 84			; 00000054H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN5@basic_stri@6:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  0002e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0HostDevice@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$2
__ehfuncinfo$??0HostDevice@@QAE@ABU0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0HostDevice@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0HostDevice@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0HostDevice@@QAE@ABU0@@Z PROC				; HostDevice::HostDevice, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0HostDevice@@QAE@ABU0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c4		 xor	 eax, esp
  00019	50		 push	 eax
  0001a	8d 44 24 14	 lea	 eax, DWORD PTR __$EHRec$[esp+32]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  0002a	8b 7c 24 24	 mov	 edi, DWORD PTR ___that$[esp+28]
  0002e	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00031	88 06		 mov	 BYTE PTR [esi], al
  00033	0f b6 4f 01	 movzx	 ecx, BYTE PTR [edi+1]
  00037	88 4e 01	 mov	 BYTE PTR [esi+1], cl
  0003a	0f b6 57 02	 movzx	 edx, BYTE PTR [edi+2]
  0003e	88 56 02	 mov	 BYTE PTR [esi+2], dl
  00041	0f b6 47 03	 movzx	 eax, BYTE PTR [edi+3]
  00045	88 46 03	 mov	 BYTE PTR [esi+3], al
  00048	0f b6 4f 04	 movzx	 ecx, BYTE PTR [edi+4]
  0004c	88 4e 04	 mov	 BYTE PTR [esi+4], cl
  0004f	0f b6 57 05	 movzx	 edx, BYTE PTR [edi+5]
  00053	88 56 05	 mov	 BYTE PTR [esi+5], dl
  00056	0f b6 47 06	 movzx	 eax, BYTE PTR [edi+6]
  0005a	88 46 06	 mov	 BYTE PTR [esi+6], al
  0005d	33 db		 xor	 ebx, ebx
  0005f	6a ff		 push	 -1
  00061	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00064	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00067	53		 push	 ebx
  00068	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0006f	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00072	50		 push	 eax
  00073	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00076	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0007b	6a ff		 push	 -1
  0007d	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00080	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  00083	53		 push	 ebx
  00084	33 d2		 xor	 edx, edx
  00086	c7 41 18 07 00
	00 00		 mov	 DWORD PTR [ecx+24], 7
  0008d	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00090	50		 push	 eax
  00091	89 5c 24 28	 mov	 DWORD PTR __$EHRec$[esp+52], ebx
  00095	66 89 51 04	 mov	 WORD PTR [ecx+4], dx
  00099	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0009e	6a ff		 push	 -1
  000a0	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  000a3	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  000a6	53		 push	 ebx
  000a7	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  000ae	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  000b1	50		 push	 eax
  000b2	c6 44 24 28 01	 mov	 BYTE PTR __$EHRec$[esp+52], 1
  000b7	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  000ba	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000bf	0f b6 47 5c	 movzx	 eax, BYTE PTR [edi+92]
  000c3	88 46 5c	 mov	 BYTE PTR [esi+92], al
  000c6	8b 4f 60	 mov	 ecx, DWORD PTR [edi+96]
  000c9	89 4e 60	 mov	 DWORD PTR [esi+96], ecx
  000cc	8b 57 64	 mov	 edx, DWORD PTR [edi+100]
  000cf	89 56 64	 mov	 DWORD PTR [esi+100], edx
  000d2	8b 47 68	 mov	 eax, DWORD PTR [edi+104]
  000d5	83 c7 6c	 add	 edi, 108		; 0000006cH
  000d8	57		 push	 edi
  000d9	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  000dc	c6 44 24 20 02	 mov	 BYTE PTR __$EHRec$[esp+44], 2
  000e1	89 46 68	 mov	 DWORD PTR [esi+104], eax
  000e4	e8 00 00 00 00	 call	 ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
  000e9	8b c6		 mov	 eax, esi
  000eb	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  000ef	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f6	59		 pop	 ecx
  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	5b		 pop	 ebx
  000fa	83 c4 10	 add	 esp, 16			; 00000010H
  000fd	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 24	 add	 ecx, 36			; 00000024H
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 40	 add	 ecx, 64			; 00000040H
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0HostDevice@@QAE@ABU0@@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 f0	 lea	 eax, DWORD PTR [edx-16]
  00028	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0HostDevice@@QAE@ABU0@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0HostDevice@@QAE@ABU0@@Z ENDP				; HostDevice::HostDevice
PUBLIC	??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\platform\foreach.h
;	COMDAT ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
_TEXT	SEGMENT
$T165724 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_container$ = 12					; size = 4
??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z PROC ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT

; 69   : 		{

  00000	51		 push	 ecx

; 70   : 			return ContainerForward <T> (container);

  00001	8b 44 24 0c	 mov	 eax, DWORD PTR _container$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000a	50		 push	 eax
  0000b	8b ce		 mov	 ecx, esi
  0000d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T165724[esp+12], 0
  00015	e8 00 00 00 00	 call	 ??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi

; 71   : 		}

  0001d	59		 pop	 ecx
  0001e	c3		 ret	 0
??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ENDP ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
PUBLIC	??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z ; std::_Construct<HostDevice,HostDevice>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
xdata$x	SEGMENT
__unwindtable$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z
_TEXT	SEGMENT
$T165729 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z PROC ; std::_Construct<HostDevice,HostDevice>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00014	33 c4		 xor	 eax, esp
  00016	50		 push	 eax
  00017	8d 44 24 08	 lea	 eax, DWORD PTR __$EHRec$[esp+20]
  0001b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 51   : 	void _FARQ *_Vptr = _Ptr;

  00021	8b 4c 24 18	 mov	 ecx, DWORD PTR __Ptr$[esp+16]
  00025	89 4c 24 18	 mov	 DWORD PTR __Vptr$[esp+16], ecx

; 52   : 	::new (_Vptr) _T1(_Val);

  00029	89 4c 24 04	 mov	 DWORD PTR $T165729[esp+20], ecx
  0002d	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+28], 0
  00035	85 c9		 test	 ecx, ecx
  00037	74 0a		 je	 SHORT $LN3@Construct
  00039	8b 44 24 1c	 mov	 eax, DWORD PTR __Val$[esp+16]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN3@Construct:

; 53   : 	}

  00043	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00047	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004e	59		 pop	 ecx
  0004f	83 c4 10	 add	 esp, 16			; 00000010H
  00052	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z$0:
  00000	8b 45 04	 mov	 eax, DWORD PTR __Vptr$[ebp-4]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T165729[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z ENDP ; std::_Construct<HostDevice,HostDevice>
PUBLIC	?GetSystemPartitionSize@@YA_JXZ			; GetSystemPartitionSize
;	COMDAT xdata$x
; File c:\users\public\desktop\projects\ciphershed\src\format\tcformat.c
xdata$x	SEGMENT
__catchsym$?GetSystemPartitionSize@@YA_JXZ$3 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffecH
	DD	FLAT:__catch$?GetSystemPartitionSize@@YA_JXZ$0
__unwindtable$?GetSystemPartitionSize@@YA_JXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?GetSystemPartitionSize@@YA_JXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?GetSystemPartitionSize@@YA_JXZ$3
__ehfuncinfo$?GetSystemPartitionSize@@YA_JXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetSystemPartitionSize@@YA_JXZ
	DD	01H
	DD	FLAT:__tryblocktable$?GetSystemPartitionSize@@YA_JXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?GetSystemPartitionSize@@YA_JXZ
_TEXT	SEGMENT
$T165745 = -408						; size = 384
_e$132061 = -20						; size = 4
__$EHRec$ = -16						; size = 16
?GetSystemPartitionSize@@YA_JXZ PROC			; GetSystemPartitionSize, COMDAT

; 1166 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetSystemPartitionSize@@YA_JXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 8c 01 00
	00		 sub	 esp, 396		; 0000018cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1167 : 	try
; 1168 : 	{
; 1169 : 		return BootEncObj->GetSystemDriveConfiguration().SystemPartition.Info.PartitionLength.QuadPart;

  0002e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00034	8d 85 68 fe ff
	ff		 lea	 eax, DWORD PTR $T165745[ebp]
  0003a	50		 push	 eax
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00042	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  00047	8b b0 18 01 00
	00		 mov	 esi, DWORD PTR [eax+280]
  0004d	8b b8 1c 01 00
	00		 mov	 edi, DWORD PTR [eax+284]
  00053	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR $T165745[ebp]
  00059	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
  0005e	8b c6		 mov	 eax, esi
  00060	8b d7		 mov	 edx, edi

; 1175 : 	}
; 1176 : }

  00062	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00065	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006c	59		 pop	 ecx
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
__catch$?GetSystemPartitionSize@@YA_JXZ$0:

; 1170 : 	}
; 1171 : 	catch (Exception &e)
; 1172 : 	{
; 1173 : 		e.Show (MainDlg);

  00074	8b 4d ec	 mov	 ecx, DWORD PTR _e$132061[ebp]
  00077	8b 11		 mov	 edx, DWORD PTR [ecx]
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0007e	8b 12		 mov	 edx, DWORD PTR [edx]
  00080	50		 push	 eax
  00081	ff d2		 call	 edx

; 1174 : 		return 0;

  00083	b8 00 00 00 00	 mov	 eax, $LN8@GetSystemP
  00088	c3		 ret	 0
$LN8@GetSystemP:
  00089	33 c0		 xor	 eax, eax
  0008b	33 d2		 xor	 edx, edx

; 1175 : 	}
; 1176 : }

  0008d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00090	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00097	59		 pop	 ecx
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?GetSystemPartitionSize@@YA_JXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 64 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-412]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetSystemPartitionSize@@YA_JXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetSystemPartitionSize@@YA_JXZ ENDP			; GetSystemPartitionSize
PUBLIC	??_C@_0BD@EJEDNFIG@CONFIRM_WIPE_ABORT?$AA@	; `string'
PUBLIC	??_C@_0L@EDOIAICP@isoburning?$AA@		; `string'
PUBLIC	??_C@_0EP@HCFFCIHD@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BC@LJAPGPK@WARN_QUICK_FORMAT?$AA@	; `string'
PUBLIC	??_C@_0BE@NLHJLKOB@CONFIRM_SPARSE_FILE?$AA@	; `string'
PUBLIC	??_C@_0CG@FCGANOF@ALGO_NOT_SUPPORTED_FOR_SYS_ENCRY@ ; `string'
PUBLIC	??_C@_06OACPEFAM@Floppy?$AA@			; `string'
PUBLIC	??_C@_0L@GHEOANHD@OPEN_TITLE?$AA@		; `string'
PUBLIC	??_C@_0CK@PHDAOPJF@KEYFILES_NOT_SUPPORTED_FOR_SYS_E@ ; `string'
PUBLIC	??_C@_0P@BELAJGNG@hashalgorithms?$AA@		; `string'
PUBLIC	??_C@_08GJKBFMAA@cascades?$AA@			; `string'
PUBLIC	??_C@_07MJGFOBBE@twofish?$AA@			; `string'
PUBLIC	??_C@_07NLFGMEEL@serpent?$AA@			; `string'
PUBLIC	??_C@_03BHCPJDHL@aes?$AA@			; `string'
PUBLIC	??_C@_0N@LNDFLMFM@FORMAT_ABORT?$AA@		; `string'
PUBLIC	??_C@_0N@NEKIIEOI@hiddenvolume?$AA@		; `string'
PUBLIC	??_C@_0BD@JBNNBEBD@sysencprogressinfo?$AA@	; `string'
PUBLIC	??_C@_0CN@EDGNFMHB@FILESYS_PAGE_HELP_EXPLANATION_HI@ ; `string'
PUBLIC	??_C@_0N@LFKKAENK@hiddensysenc?$AA@		; `string'
PUBLIC	??_C@_0M@FEPBHLEO@introsysenc?$AA@		; `string'
PUBLIC	??_C@_0P@JBBMPDEB@introcontainer?$AA@		; `string'
PUBLIC	??_C@_15OJKDPEFE@?$AA?5?$AA?5?$AA?$AA@		; `string'
PUBLIC	??_C@_04LEEAJJHO@WIPE?$AA@			; `string'
PUBLIC	??_C@_0BH@IEGJMJEM@DEVICE_WIPE_PAGE_TITLE?$AA@	; `string'
PUBLIC	??_C@_0BG@OABGGIFL@DEVICE_WIPE_PAGE_INFO?$AA@	; `string'
PUBLIC	??_C@_0CA@NHNKCAEG@DEVICE_WIPE_PAGE_INFO_HIDDEN_OS?$AA@ ; `string'
PUBLIC	??_C@_0P@JJNKBKFB@WIPE_MODE_INFO?$AA@		; `string'
PUBLIC	??_C@_0BL@KAEKPGLE@SYSENC_HIDDEN_OS_WIPE_INFO?$AA@ ; `string'
PUBLIC	??_C@_0CB@MMHOKPDB@SYSENC_HIDDEN_OS_WIPE_INFO_TITLE@ ; `string'
PUBLIC	??_C@_0BE@BKENFEKO@PageDialogProc?34585?$AA@	; `string'
PUBLIC	??_C@_0BK@FHELJNGN@FIRST_HIDDEN_OS_BOOT_INFO?$AA@ ; `string'
PUBLIC	??_C@_0CE@LLANPMHF@SYSENC_HIDDEN_OS_INITIAL_INFO_TI@ ; `string'
PUBLIC	??_C@_0BG@HBBDJEK@FORMAT_FINISHED_TITLE?$AA@	; `string'
PUBLIC	??_C@_0BN@DJMJCNLA@HIDVOL_FORMAT_FINISHED_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0BF@GBMPIMLF@FORMAT_FINISHED_HELP?$AA@	; `string'
PUBLIC	??_C@_0CH@DILBCENC@SYSENC_HIDDEN_VOL_FORMAT_FINISHE@ ; `string'
PUBLIC	??_C@_0BK@GEKKOMHD@HIDVOL_HOST_FILLING_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0BJ@NMHGGMKI@HIDVOL_HOST_FILLING_HELP?$AA@ ; `string'
PUBLIC	??_C@_0CA@NGPBKLAB@HIDVOL_HOST_FILLING_HELP_SYSENC?$AA@ ; `string'
PUBLIC	??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_02LKLDBFPJ@MB?$AA@			; `string'
PUBLIC	??_C@_06DPGELLJH@FORMAT?$AA@			; `string'
PUBLIC	??_C@_03JMFMNIFM@?9?9?9?$AA@			; `string'
PUBLIC	??_C@_04OKGDLNCL@NONE?$AA@			; `string'
PUBLIC	??_C@_02LODOGJEL@KB?$AA@			; `string'
PUBLIC	??_C@_17OFEDBPDO@?$AA0?$AA?4?$AA5?$AA?$AA@	; `string'
PUBLIC	??_C@_07MGCPDNLD@DEFAULT?$AA@			; `string'
PUBLIC	??_C@_0EP@NPBFJCJA@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@ ; `string'
PUBLIC	??_C@_0BA@LBGDFDPO@IDC_QUICKFORMAT?$AA@		; `string'
PUBLIC	??_C@_0M@GPMOAIEF@SPARSE_FILE?$AA@		; `string'
PUBLIC	??_C@_0N@FLIHGDJB@FORMAT_TITLE?$AA@		; `string'
PUBLIC	??_C@_0BE@CEEOMNDM@FORMAT_HIDVOL_TITLE?$AA@	; `string'
PUBLIC	??_C@_0BJ@LIGEKHGE@FORMAT_HIDVOL_HOST_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0M@EEPPFDAO@FORMAT_HELP?$AA@		; `string'
PUBLIC	??_C@_0BI@MEDALEIG@FORMAT_HIDVOL_HOST_HELP?$AA@	; `string'
PUBLIC	??_C@_08MFKGCNCO@FINALIZE?$AA@			; `string'
PUBLIC	??_C@_0CC@LOJCKPNA@NONSYS_INPLACE_ENC_FINISHED_TITL@ ; `string'
PUBLIC	??_C@_0CI@MDGBIFPN@NONSYS_INPLACE_ENC_ENCRYPTION_PA@ ; `string'
PUBLIC	??_C@_0CK@KEEMKNMD@NONSYS_INPLACE_ENC_RESUME_VOL_SE@ ; `string'
PUBLIC	??_C@_0BM@LFGBLAAC@SYSENC_ENCRYPTION_PAGE_INFO?$AA@ ; `string'
PUBLIC	??_C@_0L@POBGFBLK@DECRYPTION?$AA@		; `string'
PUBLIC	??_C@_0L@MHHIHFIN@ENCRYPTION?$AA@		; `string'
PUBLIC	??_C@_0CD@BONEGKLO@SYS_ENCRYPTION_PRETEST_RESULT_IN@ ; `string'
PUBLIC	??_C@_0CE@FEPHBNLJ@SYS_ENCRYPTION_PRETEST_RESULT_TI@ ; `string'
PUBLIC	??_C@_04OIKJMBFP@TEST?$AA@			; `string'
PUBLIC	??_C@_0BM@OIIAJLEO@SYS_ENCRYPTION_PRETEST_INFO?$AA@ ; `string'
PUBLIC	??_C@_0DJ@CPEIGHMK@IDD_VOL_CREATION_WIZARD_DLG_SYS_@ ; `string'
PUBLIC	??_C@_0BN@OJLMLLFE@SYS_ENCRYPTION_PRETEST_TITLE?$AA@ ; `string'
PUBLIC	??_C@_05JLPDBANI@START?$AA@			; `string'
PUBLIC	??_C@_0CA@GFBCACCB@HIDDEN_OS_CREATION_PREINFO_HELP?$AA@ ; `string'
PUBLIC	??_C@_0CB@PAHHLDJJ@HIDDEN_OS_CREATION_PREINFO_TITLE@ ; `string'
PUBLIC	??_C@_0BL@KPLPAAMG@INPLACE_ENC_WIPE_MODE_INFO?$AA@ ; `string'
PUBLIC	??_C@_0CM@IFJOGAJJ@IDD_VOL_CREATION_WIZARD_DLG_WIPE@ ; `string'
PUBLIC	??_C@_0BA@GEMFOMCA@WIPE_MODE_TITLE?$AA@		; `string'
PUBLIC	??_C@_0BK@PHEMJDOE@RESCUE_DISK_VERIFIED_INFO?$AA@ ; `string'
PUBLIC	??_C@_0DM@IFHHGIHF@IDD_VOL_CREATION_WIZARD_DLG_RESC@ ; `string'
PUBLIC	??_C@_0CA@OFKHEBFP@RESCUE_DISK_DISK_VERIFIED_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0BD@CHINNFGJ@LAUNCH_WIN_ISOBURN?$AA@	; `string'
PUBLIC	??_C@_0BG@KIJPDAJH@RESCUE_DISK_BURN_INFO?$AA@	; `string'
PUBLIC	??_C@_0BP@JAENMDIB@RESCUE_DISK_BURN_INFO_NO_CHECK?$AA@ ; `string'
PUBLIC	??_C@_0CI@IHEJGKND@RESCUE_DISK_BURN_INFO_NONWIN_ISO@ ; `string'
PUBLIC	??_C@_0DI@JHDLLKII@IDD_VOL_CREATION_WIZARD_DLG_RESC@ ; `string'
PUBLIC	??_C@_0BM@GPDOJGLC@RESCUE_DISK_RECORDING_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0BK@NAGNMEFO@RESCUE_DISK_CREATED_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0BB@KBMALCGN@RESCUE_DISK_INFO?$AA@	; `string'
PUBLIC	??_C@_0CI@DKEFLHLA@IDD_VOL_CREATION_WIZARD_DLG_RESC@ ; `string'
PUBLIC	??_C@_0M@IGHMLIGA@RESCUE_DISK?$AA@		; `string'
PUBLIC	??_C@_0CL@PBGFLBBD@IDD_VOL_CREATION_WIZARD_DLG_KEYS@ ; `string'
PUBLIC	??_C@_0P@KEHBBAFI@KEYS_GEN_TITLE?$AA@		; `string'
PUBLIC	??_C@_0DJ@PGIFIEAN@IDD_VOL_CREATION_WIZARD_DLG_COLL@ ; `string'
PUBLIC	??_C@_0BN@DAHBFIJD@COLLECTING_RANDOM_DATA_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0CF@BDOPEICN@FILESYS_PAGE_HELP_EXPLANATION_HI@ ; `string'
PUBLIC	??_C@_0BO@NPNHCCNA@FILESYS_PAGE_HELP_EXPLANATION?$AA@ ; `string'
PUBLIC	??_C@_0P@JPAMOBPC@NOTE_BEGINNING?$AA@		; `string'
PUBLIC	??_C@_17MFDLPPFM@?$AA?6?$AA?6?$AA?6?$AA?$AA@	; `string'
PUBLIC	??_C@_0BL@IEILEGP@FILESYS_PAGE_HELP_QUESTION?$AA@ ; `string'
PUBLIC	??_C@_0BD@LCAKBGFA@FILESYS_PAGE_TITLE?$AA@	; `string'
PUBLIC	??_C@_0P@ONGBFCBF@PASSWORD_TITLE?$AA@		; `string'
PUBLIC	??_C@_0CF@DFEPBDNB@IDD_VOL_CREATION_WIZARD_DLG_PASS@ ; `string'
PUBLIC	??_C@_0BG@ILMPEOM@PASSWORD_HIDVOL_TITLE?$AA@	; `string'
PUBLIC	??_C@_0BJ@CPICCPLA@PASSWORD_HIDDEN_OS_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0O@MEODOKDB@PASSWORD_HELP?$AA@		; `string'
PUBLIC	??_C@_0BI@MNFELCPB@PASSWORD_HIDDENVOL_HELP?$AA@	; `string'
PUBLIC	??_C@_0BI@PAGBOIIN@PASSWORD_HIDDEN_OS_HELP?$AA@	; `string'
PUBLIC	??_C@_0BN@OJJOHFMM@PASSWORD_HIDDENVOL_HOST_HELP?$AA@ ; `string'
PUBLIC	??_C@_0BO@EJBBHKGE@PASSWORD_SYSENC_OUTERVOL_HELP?$AA@ ; `string'
PUBLIC	??_C@_0BB@MMDPAFIK@CANNOT_SET_TIMER?$AA@	; `string'
PUBLIC	??_C@_0CL@KAEHBIEI@CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_@ ; `string'
PUBLIC	??_C@_08OKJEGFFL@00000409?$AA@			; `string'
PUBLIC	??_C@_04JIMNDDED@?$CF08X?$AA@			; `string'
PUBLIC	??_C@_0BL@DDMDKDAG@PASSWORD_HIDVOL_HOST_TITLE?$AA@ ; `string'
PUBLIC	??_C@_08KENNMKEI@PASSWORD?$AA@			; `string'
PUBLIC	??_C@_0CE@MPBBLHJC@PASSWORD_HIDDENVOL_HOST_DIRECT_H@ ; `string'
PUBLIC	??_C@_0CN@CCCDIOBF@NONSYS_INPLACE_ENC_RESUME_PASSWO@ ; `string'
PUBLIC	??_C@_0L@DGAKGAKL@SIZE_TITLE?$AA@		; `string'
PUBLIC	??_C@_0BC@COPDBOHD@SIZE_HIDVOL_TITLE?$AA@	; `string'
PUBLIC	??_C@_0BH@GBEPPLEC@SIZE_HIDVOL_HOST_TITLE?$AA@	; `string'
PUBLIC	??_C@_05OINFJHGD@?$CFI64u?$AA@			; `string'
PUBLIC	??_C@_07NFANNNEC@UNKNOWN?$AA@			; `string'
PUBLIC	??_C@_19LJDFFCJJ@?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BE@FGKMPGH@SIZE_PARTITION_HELP?$AA@	; `string'
PUBLIC	??_C@_0CC@MIIACKDF@SIZE_PARTITION_HIDDEN_SYSENC_HEL@ ; `string'
PUBLIC	??_C@_0BP@JPPBFIHO@SIZE_PARTITION_HIDDEN_VOL_HELP?$AA@ ; `string'
PUBLIC	??_C@_09BEBIICBL@SIZE_HELP?$AA@			; `string'
PUBLIC	??_C@_0BF@LOOCDJPI@SIZE_HELP_HIDDEN_VOL?$AA@	; `string'
PUBLIC	??_C@_0BK@DEODNGPK@SIZE_HELP_HIDDEN_HOST_VOL?$AA@ ; `string'
PUBLIC	??_C@_0CJ@KDMLELH@IDD_VOL_CREATION_WIZARD_DLG_CIPH@ ; `string'
PUBLIC	??_C@_0N@IMFDFPGM@CIPHER_TITLE?$AA@		; `string'
PUBLIC	??_C@_0BE@JFKJAJEK@CIPHER_HIDVOL_TITLE?$AA@	; `string'
PUBLIC	??_C@_0BJ@GGKKJCIG@CIPHER_HIDVOL_HOST_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0BH@GDOHBMLG@HIDVOL_PRE_CIPHER_HELP?$AA@	; `string'
PUBLIC	??_C@_0BK@FGHOHKMP@HIDDEN_OS_PRE_CIPHER_HELP?$AA@ ; `string'
PUBLIC	??_C@_04GOLNGIJ@EXIT?$AA@			; `string'
PUBLIC	??_C@_0CF@OIPNIHCG@HIDDEN_VOLUME_TOO_SMALL_FOR_OS_C@ ; `string'
PUBLIC	??_C@_0BI@JOBKEAGA@HIDVOL_PRE_CIPHER_TITLE?$AA@	; `string'
PUBLIC	??_C@_0N@PJPEEMEG@INVALID_PATH?$AA@		; `string'
PUBLIC	??_C@_0BM@GCHOHFOK@HIDVOL_HOST_PRE_CIPHER_HELP?$AA@ ; `string'
PUBLIC	??_C@_0CD@OMGBOOGK@HIDVOL_HOST_PRE_CIPHER_HELP_SYSE@ ; `string'
PUBLIC	??_C@_0BN@PMMGMENG@HIDVOL_HOST_PRE_CIPHER_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0CI@FGJIGFAK@DEVICE_TRANSFORM_MODE_PAGE_INPLA@ ; `string'
PUBLIC	??_C@_0CH@CJGGIKCO@DEVICE_TRANSFORM_MODE_PAGE_FORMA@ ; `string'
PUBLIC	??_C@_0CB@IJHCDAO@DEVICE_TRANSFORM_MODE_PAGE_TITLE@ ; `string'
PUBLIC	??_C@_0L@DGHBDDNJ@FILE_TITLE?$AA@		; `string'
PUBLIC	??_C@_09GPELPABL@FILE_HELP?$AA@			; `string'
PUBLIC	??_C@_0BK@JMGOJAKG@FILE_HELP_HIDDEN_HOST_VOL?$AA@ ; `string'
PUBLIC	??_C@_0M@JNOAPEGE@DEVICE_HELP?$AA@		; `string'
PUBLIC	??_C@_0BM@DMHDGBOJ@DEVICE_HELP_HIDDEN_HOST_VOL?$AA@ ; `string'
PUBLIC	??_C@_0CB@LOIOBDOO@FILE_HELP_HIDDEN_HOST_VOL_DIRECT@ ; `string'
PUBLIC	??_C@_0BA@HOMDJPL@IDC_SELECT_FILE?$AA@		; `string'
PUBLIC	??_C@_0BC@NHEENOIC@IDC_SELECT_DEVICE?$AA@	; `string'
PUBLIC	??_C@_0CD@BGGCLDPJ@HIDDEN_VOL_WIZARD_MODE_DIRECT_HE@ ; `string'
PUBLIC	??_C@_0CD@LJCMOGBH@HIDDEN_VOL_WIZARD_MODE_NORMAL_HE@ ; `string'
PUBLIC	??_C@_0BN@CFKNBCJG@HIDDEN_VOL_WIZARD_MODE_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0BI@OKEJAKDK@NORMAL_VOLUME_TYPE_HELP?$AA@	; `string'
PUBLIC	??_C@_0BI@OMMJFNJB@HIDDEN_VOLUME_TYPE_HELP?$AA@	; `string'
PUBLIC	??_C@_0BC@IMPHNJMH@VOLUME_TYPE_TITLE?$AA@	; `string'
PUBLIC	??_C@_0CA@FOODICMO@SYSENC_MULTI_BOOT_OUTCOME_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0CK@NGBECAKP@SYSENC_MULTI_BOOT_NONWIN_BOOT_LO@ ; `string'
PUBLIC	??_C@_0CL@PKMEBLJM@SYSENC_MULTI_BOOT_NONWIN_BOOT_LO@ ; `string'
PUBLIC	??_C@_0CE@CGLNKLHK@SYSENC_MULTI_BOOT_ADJACENT_SYS_H@ ; `string'
PUBLIC	??_C@_0CF@MINJEEM@SYSENC_MULTI_BOOT_ADJACENT_SYS_T@ ; `string'
PUBLIC	??_C@_0CG@GBIPGAOP@SYSENC_MULTI_BOOT_NBR_SYS_DRIVES@ ; `string'
PUBLIC	??_C@_0CH@IMKPMBEM@SYSENC_MULTI_BOOT_NBR_SYS_DRIVES@ ; `string'
PUBLIC	??_C@_0M@BAIFEFDO@TWO_OR_MORE?$AA@		; `string'
PUBLIC	??_C@_09BCPPDPEL@DIGIT_ONE?$AA@			; `string'
PUBLIC	??_C@_0CD@ODHMCLM@SYSENC_MULTI_BOOT_SYS_EQ_BOOT_HE@ ; `string'
PUBLIC	??_C@_0CE@HOKCHJKA@SYSENC_MULTI_BOOT_SYS_EQ_BOOT_TI@ ; `string'
PUBLIC	??_C@_0DG@IPJJAEGJ@IDD_VOL_CREATION_WIZARD_DLG_SYS_@ ; `string'
PUBLIC	??_C@_0BK@NAIABFPC@SYS_MULTI_BOOT_MODE_TITLE?$AA@ ; `string'
PUBLIC	??_C@_08HBBNJJLH@IDC_EXIT?$AA@			; `string'
PUBLIC	??_C@_0BO@OEFOGNPK@RETRY_HIDDEN_SECTOR_DETECTION?$AA@ ; `string'
PUBLIC	??_C@_0BN@GHOENGPC@SKIP_HIDDEN_SECTOR_DETECTION?$AA@ ; `string'
PUBLIC	??_C@_0CK@KEHMFNIA@HIDDEN_SECTOR_DETECTION_FAILED_P@ ; `string'
PUBLIC	??_C@_0BL@OAMDPDOH@SYSENC_DRIVE_ANALYSIS_INFO?$AA@ ; `string'
PUBLIC	??_C@_0DI@LOLLMPEK@IDD_VOL_CREATION_WIZARD_DLG_SYSE@ ; `string'
PUBLIC	??_C@_0BM@EGLOODHA@SYSENC_DRIVE_ANALYSIS_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0BP@FCJHFGGJ@SYSENC_PRE_DRIVE_ANALYSIS_HELP?$AA@ ; `string'
PUBLIC	??_C@_0DM@OIJHNGEF@IDD_VOL_CREATION_WIZARD_DLG_SYSE@ ; `string'
PUBLIC	??_C@_0CA@IIEHPPGP@SYSENC_PRE_DRIVE_ANALYSIS_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0CJ@CMOPFEFD@SYS_ENCRYPTION_SPAN_WHOLE_SYS_DR@ ; `string'
PUBLIC	??_C@_0DG@OHMIACK@IDD_VOL_CREATION_WIZARD_DLG_SYS_@ ; `string'
PUBLIC	??_C@_0BK@FBGFJBLB@SYS_ENCRYPTION_SPAN_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0CF@GBPOCIAL@SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_@ ; `string'
PUBLIC	??_C@_0CG@CLMIJGGF@SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_@ ; `string'
PUBLIC	??_C@_0BI@EEMGDNEH@SYSENC_NORMAL_TYPE_HELP?$AA@	; `string'
PUBLIC	??_C@_0BI@FECPKDFP@SYSENC_HIDDEN_TYPE_HELP?$AA@	; `string'
PUBLIC	??_C@_0DD@EIMAJDHB@IDD_VOL_CREATION_WIZARD_DLG_SYSE@ ; `string'
PUBLIC	??_C@_0BH@LFFPJFCG@SYSENC_TYPE_PAGE_TITLE?$AA@	; `string'
PUBLIC	??_C@_0M@BGLIKHAN@INTRO_TITLE?$AA@		; `string'
PUBLIC	??_C@_0CI@KKIBKINN@IDD_VOL_CREATION_WIZARD_DLG_INTR@ ; `string'
PUBLIC	??_C@_0P@IDKFBPLE@FORMAT_PAGE_?$CFd?$AA@	; `string'
PUBLIC	??_C@_0BM@IHMEHMBJ@IDD_VOL_CREATION_WIZARD_DLG?$AA@ ; `string'
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_PageDialogProc@16
EXTRN	_ClearHistory:PROC
EXTRN	_AskWarnNoYes:PROC
EXTRN	__imp__GetDlgItemTextA@16:PROC
EXTRN	_AskWarnYesNo:PROC
EXTRN	_RawDevicesDlgProc@16:PROC
EXTRN	_BrowseFiles:PROC
EXTRN	__imp__GetWindowTextW@12:PROC
EXTRN	_KeyFilesDlgProc@16:PROC
EXTRN	__imp__InvalidateRect@12:PROC
EXTRN	_GetCheckBox:PROC
EXTRN	_UpdateComboOrder:PROC
EXTRN	_bRandmixEnabled:DWORD
EXTRN	_bFastPollEnabled:DWORD
EXTRN	_BenchmarkDlgProc@16:PROC
EXTRN	_CipherTestDialogProc@16:PROC
EXTRN	_OpenVolumeExplorerWindow:PROC
EXTRN	_GetDeviceSize:PROC
EXTRN	_Applink:PROC
EXTRN	_OpenPageHelp:PROC
EXTRN	_GetWipeModeName:PROC
EXTRN	_ReportUnexpectedState:PROC
EXTRN	_AddComboPairW:PROC
EXTRN	_PopulateWipeModeCombo:PROC
EXTRN	_LaunchWindowsIsoBurner:PROC
EXTRN	_IsWindowsIsoBurnerAvailable:PROC
EXTRN	__imp__GetWindowTextLengthA@4:PROC
EXTRN	__imp__SetDlgItemTextA@12:PROC
EXTRN	_hFixedDigitFont:DWORD
EXTRN	_VerifyPasswordAndUpdate2:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__LoadKeyboardLayoutA@8:PROC
EXTRN	__imp__GetKeyboardLayout@4:PROC
EXTRN	_ToBootPwdField:PROC
EXTRN	_SetCheckBox:PROC
EXTRN	_KeyFilesEnable:DWORD
EXTRN	_hBoldFont:DWORD
EXTRN	_wcsncpy:PROC
EXTRN	_HashGetName:PROC
EXTRN	_HashIsDeprecated:PROC
EXTRN	_RandGetHashFunction:PROC
EXTRN	_RandSetHashFunction:PROC
EXTRN	_SelectAlgo:PROC
EXTRN	_EAGetNext:PROC
EXTRN	_AddComboPair:PROC
EXTRN	_EAIsFormatEnabled:PROC
EXTRN	_EAGetFirst:PROC
EXTRN	_FileSystemAppearsEmpty:PROC
EXTRN	_CheckRequirementsForNonSysInPlaceEnc:PROC
EXTRN	_AddComboItem:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	_CheckButton:PROC
EXTRN	_ToHyperlink:PROC
EXTRN	_hUserBoldFont:DWORD
EXTRN	_LocalizeDialog:PROC
;	COMDAT ?PageDebugId@?1??PageDialogProc@@9@16@4PADA
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\string.h
_BSS	SEGMENT
?PageDebugId@?1??PageDialogProc@@9@16@4PADA DB 080H DUP (?) ; `PageDialogProc'::`2'::PageDebugId
_BSS	ENDS
;	COMDAT ??_C@_0BD@EJEDNFIG@CONFIRM_WIPE_ABORT?$AA@
CONST	SEGMENT
??_C@_0BD@EJEDNFIG@CONFIRM_WIPE_ABORT?$AA@ DB 'CONFIRM_WIPE_ABORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EDOIAICP@isoburning?$AA@
CONST	SEGMENT
??_C@_0L@EDOIAICP@isoburning?$AA@ DB 'isoburning', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@HCFFCIHD@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0EP@HCFFCIHD@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB ' '
	DB	'                                                             '
	DB	'                ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LJAPGPK@WARN_QUICK_FORMAT?$AA@
CONST	SEGMENT
??_C@_0BC@LJAPGPK@WARN_QUICK_FORMAT?$AA@ DB 'WARN_QUICK_FORMAT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NLHJLKOB@CONFIRM_SPARSE_FILE?$AA@
CONST	SEGMENT
??_C@_0BE@NLHJLKOB@CONFIRM_SPARSE_FILE?$AA@ DB 'CONFIRM_SPARSE_FILE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FCGANOF@ALGO_NOT_SUPPORTED_FOR_SYS_ENCRY@
CONST	SEGMENT
??_C@_0CG@FCGANOF@ALGO_NOT_SUPPORTED_FOR_SYS_ENCRY@ DB 'ALGO_NOT_SUPPORTE'
	DB	'D_FOR_SYS_ENCRYPTION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06OACPEFAM@Floppy?$AA@
CONST	SEGMENT
??_C@_06OACPEFAM@Floppy?$AA@ DB 'Floppy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GHEOANHD@OPEN_TITLE?$AA@
CONST	SEGMENT
??_C@_0L@GHEOANHD@OPEN_TITLE?$AA@ DB 'OPEN_TITLE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PHDAOPJF@KEYFILES_NOT_SUPPORTED_FOR_SYS_E@
CONST	SEGMENT
??_C@_0CK@PHDAOPJF@KEYFILES_NOT_SUPPORTED_FOR_SYS_E@ DB 'KEYFILES_NOT_SUP'
	DB	'PORTED_FOR_SYS_ENCRYPTION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BELAJGNG@hashalgorithms?$AA@
CONST	SEGMENT
??_C@_0P@BELAJGNG@hashalgorithms?$AA@ DB 'hashalgorithms', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GJKBFMAA@cascades?$AA@
CONST	SEGMENT
??_C@_08GJKBFMAA@cascades?$AA@ DB 'cascades', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MJGFOBBE@twofish?$AA@
CONST	SEGMENT
??_C@_07MJGFOBBE@twofish?$AA@ DB 'twofish', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NLFGMEEL@serpent?$AA@
CONST	SEGMENT
??_C@_07NLFGMEEL@serpent?$AA@ DB 'serpent', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BHCPJDHL@aes?$AA@
CONST	SEGMENT
??_C@_03BHCPJDHL@aes?$AA@ DB 'aes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LNDFLMFM@FORMAT_ABORT?$AA@
CONST	SEGMENT
??_C@_0N@LNDFLMFM@FORMAT_ABORT?$AA@ DB 'FORMAT_ABORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NEKIIEOI@hiddenvolume?$AA@
CONST	SEGMENT
??_C@_0N@NEKIIEOI@hiddenvolume?$AA@ DB 'hiddenvolume', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JBNNBEBD@sysencprogressinfo?$AA@
CONST	SEGMENT
??_C@_0BD@JBNNBEBD@sysencprogressinfo?$AA@ DB 'sysencprogressinfo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@EDGNFMHB@FILESYS_PAGE_HELP_EXPLANATION_HI@
CONST	SEGMENT
??_C@_0CN@EDGNFMHB@FILESYS_PAGE_HELP_EXPLANATION_HI@ DB 'FILESYS_PAGE_HEL'
	DB	'P_EXPLANATION_HIDVOL_CONFIRM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LFKKAENK@hiddensysenc?$AA@
CONST	SEGMENT
??_C@_0N@LFKKAENK@hiddensysenc?$AA@ DB 'hiddensysenc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FEPBHLEO@introsysenc?$AA@
CONST	SEGMENT
??_C@_0M@FEPBHLEO@introsysenc?$AA@ DB 'introsysenc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JBBMPDEB@introcontainer?$AA@
CONST	SEGMENT
??_C@_0P@JBBMPDEB@introcontainer?$AA@ DB 'introcontainer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_15OJKDPEFE@?$AA?5?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_15OJKDPEFE@?$AA?5?$AA?5?$AA?$AA@ DB ' ', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04LEEAJJHO@WIPE?$AA@
CONST	SEGMENT
??_C@_04LEEAJJHO@WIPE?$AA@ DB 'WIPE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IEGJMJEM@DEVICE_WIPE_PAGE_TITLE?$AA@
CONST	SEGMENT
??_C@_0BH@IEGJMJEM@DEVICE_WIPE_PAGE_TITLE?$AA@ DB 'DEVICE_WIPE_PAGE_TITLE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OABGGIFL@DEVICE_WIPE_PAGE_INFO?$AA@
CONST	SEGMENT
??_C@_0BG@OABGGIFL@DEVICE_WIPE_PAGE_INFO?$AA@ DB 'DEVICE_WIPE_PAGE_INFO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NHNKCAEG@DEVICE_WIPE_PAGE_INFO_HIDDEN_OS?$AA@
CONST	SEGMENT
??_C@_0CA@NHNKCAEG@DEVICE_WIPE_PAGE_INFO_HIDDEN_OS?$AA@ DB 'DEVICE_WIPE_P'
	DB	'AGE_INFO_HIDDEN_OS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JJNKBKFB@WIPE_MODE_INFO?$AA@
CONST	SEGMENT
??_C@_0P@JJNKBKFB@WIPE_MODE_INFO?$AA@ DB 'WIPE_MODE_INFO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KAEKPGLE@SYSENC_HIDDEN_OS_WIPE_INFO?$AA@
CONST	SEGMENT
??_C@_0BL@KAEKPGLE@SYSENC_HIDDEN_OS_WIPE_INFO?$AA@ DB 'SYSENC_HIDDEN_OS_W'
	DB	'IPE_INFO', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MMHOKPDB@SYSENC_HIDDEN_OS_WIPE_INFO_TITLE@
CONST	SEGMENT
??_C@_0CB@MMHOKPDB@SYSENC_HIDDEN_OS_WIPE_INFO_TITLE@ DB 'SYSENC_HIDDEN_OS'
	DB	'_WIPE_INFO_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BKENFEKO@PageDialogProc?34585?$AA@
CONST	SEGMENT
??_C@_0BE@BKENFEKO@PageDialogProc?34585?$AA@ DB 'PageDialogProc:4585', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FHELJNGN@FIRST_HIDDEN_OS_BOOT_INFO?$AA@
CONST	SEGMENT
??_C@_0BK@FHELJNGN@FIRST_HIDDEN_OS_BOOT_INFO?$AA@ DB 'FIRST_HIDDEN_OS_BOO'
	DB	'T_INFO', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LLANPMHF@SYSENC_HIDDEN_OS_INITIAL_INFO_TI@
CONST	SEGMENT
??_C@_0CE@LLANPMHF@SYSENC_HIDDEN_OS_INITIAL_INFO_TI@ DB 'SYSENC_HIDDEN_OS'
	DB	'_INITIAL_INFO_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HBBDJEK@FORMAT_FINISHED_TITLE?$AA@
CONST	SEGMENT
??_C@_0BG@HBBDJEK@FORMAT_FINISHED_TITLE?$AA@ DB 'FORMAT_FINISHED_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DJMJCNLA@HIDVOL_FORMAT_FINISHED_TITLE?$AA@
CONST	SEGMENT
??_C@_0BN@DJMJCNLA@HIDVOL_FORMAT_FINISHED_TITLE?$AA@ DB 'HIDVOL_FORMAT_FI'
	DB	'NISHED_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GBMPIMLF@FORMAT_FINISHED_HELP?$AA@
CONST	SEGMENT
??_C@_0BF@GBMPIMLF@FORMAT_FINISHED_HELP?$AA@ DB 'FORMAT_FINISHED_HELP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DILBCENC@SYSENC_HIDDEN_VOL_FORMAT_FINISHE@
CONST	SEGMENT
??_C@_0CH@DILBCENC@SYSENC_HIDDEN_VOL_FORMAT_FINISHE@ DB 'SYSENC_HIDDEN_VO'
	DB	'L_FORMAT_FINISHED_HELP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GEKKOMHD@HIDVOL_HOST_FILLING_TITLE?$AA@
CONST	SEGMENT
??_C@_0BK@GEKKOMHD@HIDVOL_HOST_FILLING_TITLE?$AA@ DB 'HIDVOL_HOST_FILLING'
	DB	'_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NMHGGMKI@HIDVOL_HOST_FILLING_HELP?$AA@
CONST	SEGMENT
??_C@_0BJ@NMHGGMKI@HIDVOL_HOST_FILLING_HELP?$AA@ DB 'HIDVOL_HOST_FILLING_'
	DB	'HELP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NGPBKLAB@HIDVOL_HOST_FILLING_HELP_SYSENC?$AA@
CONST	SEGMENT
??_C@_0CA@NGPBKLAB@HIDVOL_HOST_FILLING_HELP_SYSENC?$AA@ DB 'HIDVOL_HOST_F'
	DB	'ILLING_HELP_SYSENC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@ DB '%'
	DB	00H, 'I', 00H, '6', 00H, '4', 00H, 'd', 00H, ' ', 00H, '%', 00H
	DB	's', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02LKLDBFPJ@MB?$AA@
CONST	SEGMENT
??_C@_02LKLDBFPJ@MB?$AA@ DB 'MB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06DPGELLJH@FORMAT?$AA@
CONST	SEGMENT
??_C@_06DPGELLJH@FORMAT?$AA@ DB 'FORMAT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JMFMNIFM@?9?9?9?$AA@
CONST	SEGMENT
??_C@_03JMFMNIFM@?9?9?9?$AA@ DB '---', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OKGDLNCL@NONE?$AA@
CONST	SEGMENT
??_C@_04OKGDLNCL@NONE?$AA@ DB 'NONE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LODOGJEL@KB?$AA@
CONST	SEGMENT
??_C@_02LODOGJEL@KB?$AA@ DB 'KB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_17OFEDBPDO@?$AA0?$AA?4?$AA5?$AA?$AA@
CONST	SEGMENT
??_C@_17OFEDBPDO@?$AA0?$AA?4?$AA5?$AA?$AA@ DB '0', 00H, '.', 00H, '5', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_07MGCPDNLD@DEFAULT?$AA@
CONST	SEGMENT
??_C@_07MGCPDNLD@DEFAULT?$AA@ DB 'DEFAULT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@NPBFJCJA@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
CONST	SEGMENT
??_C@_0EP@NPBFJCJA@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@ DB '*'
	DB	'*******************************                              '
	DB	'                ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LBGDFDPO@IDC_QUICKFORMAT?$AA@
CONST	SEGMENT
??_C@_0BA@LBGDFDPO@IDC_QUICKFORMAT?$AA@ DB 'IDC_QUICKFORMAT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GPMOAIEF@SPARSE_FILE?$AA@
CONST	SEGMENT
??_C@_0M@GPMOAIEF@SPARSE_FILE?$AA@ DB 'SPARSE_FILE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FLIHGDJB@FORMAT_TITLE?$AA@
CONST	SEGMENT
??_C@_0N@FLIHGDJB@FORMAT_TITLE?$AA@ DB 'FORMAT_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CEEOMNDM@FORMAT_HIDVOL_TITLE?$AA@
CONST	SEGMENT
??_C@_0BE@CEEOMNDM@FORMAT_HIDVOL_TITLE?$AA@ DB 'FORMAT_HIDVOL_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LIGEKHGE@FORMAT_HIDVOL_HOST_TITLE?$AA@
CONST	SEGMENT
??_C@_0BJ@LIGEKHGE@FORMAT_HIDVOL_HOST_TITLE?$AA@ DB 'FORMAT_HIDVOL_HOST_T'
	DB	'ITLE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EEPPFDAO@FORMAT_HELP?$AA@
CONST	SEGMENT
??_C@_0M@EEPPFDAO@FORMAT_HELP?$AA@ DB 'FORMAT_HELP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MEDALEIG@FORMAT_HIDVOL_HOST_HELP?$AA@
CONST	SEGMENT
??_C@_0BI@MEDALEIG@FORMAT_HIDVOL_HOST_HELP?$AA@ DB 'FORMAT_HIDVOL_HOST_HE'
	DB	'LP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08MFKGCNCO@FINALIZE?$AA@
CONST	SEGMENT
??_C@_08MFKGCNCO@FINALIZE?$AA@ DB 'FINALIZE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LOJCKPNA@NONSYS_INPLACE_ENC_FINISHED_TITL@
CONST	SEGMENT
??_C@_0CC@LOJCKPNA@NONSYS_INPLACE_ENC_FINISHED_TITL@ DB 'NONSYS_INPLACE_E'
	DB	'NC_FINISHED_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@MDGBIFPN@NONSYS_INPLACE_ENC_ENCRYPTION_PA@
CONST	SEGMENT
??_C@_0CI@MDGBIFPN@NONSYS_INPLACE_ENC_ENCRYPTION_PA@ DB 'NONSYS_INPLACE_E'
	DB	'NC_ENCRYPTION_PAGE_INFO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KEEMKNMD@NONSYS_INPLACE_ENC_RESUME_VOL_SE@
CONST	SEGMENT
??_C@_0CK@KEEMKNMD@NONSYS_INPLACE_ENC_RESUME_VOL_SE@ DB 'NONSYS_INPLACE_E'
	DB	'NC_RESUME_VOL_SELECT_HELP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LFGBLAAC@SYSENC_ENCRYPTION_PAGE_INFO?$AA@
CONST	SEGMENT
??_C@_0BM@LFGBLAAC@SYSENC_ENCRYPTION_PAGE_INFO?$AA@ DB 'SYSENC_ENCRYPTION'
	DB	'_PAGE_INFO', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@POBGFBLK@DECRYPTION?$AA@
CONST	SEGMENT
??_C@_0L@POBGFBLK@DECRYPTION?$AA@ DB 'DECRYPTION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MHHIHFIN@ENCRYPTION?$AA@
CONST	SEGMENT
??_C@_0L@MHHIHFIN@ENCRYPTION?$AA@ DB 'ENCRYPTION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@BONEGKLO@SYS_ENCRYPTION_PRETEST_RESULT_IN@
CONST	SEGMENT
??_C@_0CD@BONEGKLO@SYS_ENCRYPTION_PRETEST_RESULT_IN@ DB 'SYS_ENCRYPTION_P'
	DB	'RETEST_RESULT_INFO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FEPHBNLJ@SYS_ENCRYPTION_PRETEST_RESULT_TI@
CONST	SEGMENT
??_C@_0CE@FEPHBNLJ@SYS_ENCRYPTION_PRETEST_RESULT_TI@ DB 'SYS_ENCRYPTION_P'
	DB	'RETEST_RESULT_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OIKJMBFP@TEST?$AA@
CONST	SEGMENT
??_C@_04OIKJMBFP@TEST?$AA@ DB 'TEST', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OIIAJLEO@SYS_ENCRYPTION_PRETEST_INFO?$AA@
CONST	SEGMENT
??_C@_0BM@OIIAJLEO@SYS_ENCRYPTION_PRETEST_INFO?$AA@ DB 'SYS_ENCRYPTION_PR'
	DB	'ETEST_INFO', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@CPEIGHMK@IDD_VOL_CREATION_WIZARD_DLG_SYS_@
CONST	SEGMENT
??_C@_0DJ@CPEIGHMK@IDD_VOL_CREATION_WIZARD_DLG_SYS_@ DB 'IDD_VOL_CREATION'
	DB	'_WIZARD_DLG_SYS_ENCRYPTION_PRETEST_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OJLMLLFE@SYS_ENCRYPTION_PRETEST_TITLE?$AA@
CONST	SEGMENT
??_C@_0BN@OJLMLLFE@SYS_ENCRYPTION_PRETEST_TITLE?$AA@ DB 'SYS_ENCRYPTION_P'
	DB	'RETEST_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05JLPDBANI@START?$AA@
CONST	SEGMENT
??_C@_05JLPDBANI@START?$AA@ DB 'START', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GFBCACCB@HIDDEN_OS_CREATION_PREINFO_HELP?$AA@
CONST	SEGMENT
??_C@_0CA@GFBCACCB@HIDDEN_OS_CREATION_PREINFO_HELP?$AA@ DB 'HIDDEN_OS_CRE'
	DB	'ATION_PREINFO_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PAHHLDJJ@HIDDEN_OS_CREATION_PREINFO_TITLE@
CONST	SEGMENT
??_C@_0CB@PAHHLDJJ@HIDDEN_OS_CREATION_PREINFO_TITLE@ DB 'HIDDEN_OS_CREATI'
	DB	'ON_PREINFO_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KPLPAAMG@INPLACE_ENC_WIPE_MODE_INFO?$AA@
CONST	SEGMENT
??_C@_0BL@KPLPAAMG@INPLACE_ENC_WIPE_MODE_INFO?$AA@ DB 'INPLACE_ENC_WIPE_M'
	DB	'ODE_INFO', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@IFJOGAJJ@IDD_VOL_CREATION_WIZARD_DLG_WIPE@
CONST	SEGMENT
??_C@_0CM@IFJOGAJJ@IDD_VOL_CREATION_WIZARD_DLG_WIPE@ DB 'IDD_VOL_CREATION'
	DB	'_WIZARD_DLG_WIPE_MODE_TITLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GEMFOMCA@WIPE_MODE_TITLE?$AA@
CONST	SEGMENT
??_C@_0BA@GEMFOMCA@WIPE_MODE_TITLE?$AA@ DB 'WIPE_MODE_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PHEMJDOE@RESCUE_DISK_VERIFIED_INFO?$AA@
CONST	SEGMENT
??_C@_0BK@PHEMJDOE@RESCUE_DISK_VERIFIED_INFO?$AA@ DB 'RESCUE_DISK_VERIFIE'
	DB	'D_INFO', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@IFHHGIHF@IDD_VOL_CREATION_WIZARD_DLG_RESC@
CONST	SEGMENT
??_C@_0DM@IFHHGIHF@IDD_VOL_CREATION_WIZARD_DLG_RESC@ DB 'IDD_VOL_CREATION'
	DB	'_WIZARD_DLG_RESCUE_DISK_DISK_VERIFIED_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OFKHEBFP@RESCUE_DISK_DISK_VERIFIED_TITLE?$AA@
CONST	SEGMENT
??_C@_0CA@OFKHEBFP@RESCUE_DISK_DISK_VERIFIED_TITLE?$AA@ DB 'RESCUE_DISK_D'
	DB	'ISK_VERIFIED_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CHINNFGJ@LAUNCH_WIN_ISOBURN?$AA@
CONST	SEGMENT
??_C@_0BD@CHINNFGJ@LAUNCH_WIN_ISOBURN?$AA@ DB 'LAUNCH_WIN_ISOBURN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KIJPDAJH@RESCUE_DISK_BURN_INFO?$AA@
CONST	SEGMENT
??_C@_0BG@KIJPDAJH@RESCUE_DISK_BURN_INFO?$AA@ DB 'RESCUE_DISK_BURN_INFO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JAENMDIB@RESCUE_DISK_BURN_INFO_NO_CHECK?$AA@
CONST	SEGMENT
??_C@_0BP@JAENMDIB@RESCUE_DISK_BURN_INFO_NO_CHECK?$AA@ DB 'RESCUE_DISK_BU'
	DB	'RN_INFO_NO_CHECK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IHEJGKND@RESCUE_DISK_BURN_INFO_NONWIN_ISO@
CONST	SEGMENT
??_C@_0CI@IHEJGKND@RESCUE_DISK_BURN_INFO_NONWIN_ISO@ DB 'RESCUE_DISK_BURN'
	DB	'_INFO_NONWIN_ISO_BURNER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@JHDLLKII@IDD_VOL_CREATION_WIZARD_DLG_RESC@
CONST	SEGMENT
??_C@_0DI@JHDLLKII@IDD_VOL_CREATION_WIZARD_DLG_RESC@ DB 'IDD_VOL_CREATION'
	DB	'_WIZARD_DLG_RESCUE_DISK_RECORDING_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GPDOJGLC@RESCUE_DISK_RECORDING_TITLE?$AA@
CONST	SEGMENT
??_C@_0BM@GPDOJGLC@RESCUE_DISK_RECORDING_TITLE?$AA@ DB 'RESCUE_DISK_RECOR'
	DB	'DING_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NAGNMEFO@RESCUE_DISK_CREATED_TITLE?$AA@
CONST	SEGMENT
??_C@_0BK@NAGNMEFO@RESCUE_DISK_CREATED_TITLE?$AA@ DB 'RESCUE_DISK_CREATED'
	DB	'_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KBMALCGN@RESCUE_DISK_INFO?$AA@
CONST	SEGMENT
??_C@_0BB@KBMALCGN@RESCUE_DISK_INFO?$AA@ DB 'RESCUE_DISK_INFO', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@DKEFLHLA@IDD_VOL_CREATION_WIZARD_DLG_RESC@
CONST	SEGMENT
??_C@_0CI@DKEFLHLA@IDD_VOL_CREATION_WIZARD_DLG_RESC@ DB 'IDD_VOL_CREATION'
	DB	'_WIZARD_DLG_RESCUE_DISK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IGHMLIGA@RESCUE_DISK?$AA@
CONST	SEGMENT
??_C@_0M@IGHMLIGA@RESCUE_DISK?$AA@ DB 'RESCUE_DISK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@PBGFLBBD@IDD_VOL_CREATION_WIZARD_DLG_KEYS@
CONST	SEGMENT
??_C@_0CL@PBGFLBBD@IDD_VOL_CREATION_WIZARD_DLG_KEYS@ DB 'IDD_VOL_CREATION'
	DB	'_WIZARD_DLG_KEYS_GEN_TITLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KEHBBAFI@KEYS_GEN_TITLE?$AA@
CONST	SEGMENT
??_C@_0P@KEHBBAFI@KEYS_GEN_TITLE?$AA@ DB 'KEYS_GEN_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@PGIFIEAN@IDD_VOL_CREATION_WIZARD_DLG_COLL@
CONST	SEGMENT
??_C@_0DJ@PGIFIEAN@IDD_VOL_CREATION_WIZARD_DLG_COLL@ DB 'IDD_VOL_CREATION'
	DB	'_WIZARD_DLG_COLLECTING_RANDOM_DATA_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DAHBFIJD@COLLECTING_RANDOM_DATA_TITLE?$AA@
CONST	SEGMENT
??_C@_0BN@DAHBFIJD@COLLECTING_RANDOM_DATA_TITLE?$AA@ DB 'COLLECTING_RANDO'
	DB	'M_DATA_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BDOPEICN@FILESYS_PAGE_HELP_EXPLANATION_HI@
CONST	SEGMENT
??_C@_0CF@BDOPEICN@FILESYS_PAGE_HELP_EXPLANATION_HI@ DB 'FILESYS_PAGE_HEL'
	DB	'P_EXPLANATION_HIDVOL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NPNHCCNA@FILESYS_PAGE_HELP_EXPLANATION?$AA@
CONST	SEGMENT
??_C@_0BO@NPNHCCNA@FILESYS_PAGE_HELP_EXPLANATION?$AA@ DB 'FILESYS_PAGE_HE'
	DB	'LP_EXPLANATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JPAMOBPC@NOTE_BEGINNING?$AA@
CONST	SEGMENT
??_C@_0P@JPAMOBPC@NOTE_BEGINNING?$AA@ DB 'NOTE_BEGINNING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17MFDLPPFM@?$AA?6?$AA?6?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_17MFDLPPFM@?$AA?6?$AA?6?$AA?6?$AA?$AA@ DB 0aH, 00H, 0aH, 00H, 0aH, 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IEILEGP@FILESYS_PAGE_HELP_QUESTION?$AA@
CONST	SEGMENT
??_C@_0BL@IEILEGP@FILESYS_PAGE_HELP_QUESTION?$AA@ DB 'FILESYS_PAGE_HELP_Q'
	DB	'UESTION', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LCAKBGFA@FILESYS_PAGE_TITLE?$AA@
CONST	SEGMENT
??_C@_0BD@LCAKBGFA@FILESYS_PAGE_TITLE?$AA@ DB 'FILESYS_PAGE_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ONGBFCBF@PASSWORD_TITLE?$AA@
CONST	SEGMENT
??_C@_0P@ONGBFCBF@PASSWORD_TITLE?$AA@ DB 'PASSWORD_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DFEPBDNB@IDD_VOL_CREATION_WIZARD_DLG_PASS@
CONST	SEGMENT
??_C@_0CF@DFEPBDNB@IDD_VOL_CREATION_WIZARD_DLG_PASS@ DB 'IDD_VOL_CREATION'
	DB	'_WIZARD_DLG_PASSWORD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ILMPEOM@PASSWORD_HIDVOL_TITLE?$AA@
CONST	SEGMENT
??_C@_0BG@ILMPEOM@PASSWORD_HIDVOL_TITLE?$AA@ DB 'PASSWORD_HIDVOL_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CPICCPLA@PASSWORD_HIDDEN_OS_TITLE?$AA@
CONST	SEGMENT
??_C@_0BJ@CPICCPLA@PASSWORD_HIDDEN_OS_TITLE?$AA@ DB 'PASSWORD_HIDDEN_OS_T'
	DB	'ITLE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MEODOKDB@PASSWORD_HELP?$AA@
CONST	SEGMENT
??_C@_0O@MEODOKDB@PASSWORD_HELP?$AA@ DB 'PASSWORD_HELP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MNFELCPB@PASSWORD_HIDDENVOL_HELP?$AA@
CONST	SEGMENT
??_C@_0BI@MNFELCPB@PASSWORD_HIDDENVOL_HELP?$AA@ DB 'PASSWORD_HIDDENVOL_HE'
	DB	'LP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PAGBOIIN@PASSWORD_HIDDEN_OS_HELP?$AA@
CONST	SEGMENT
??_C@_0BI@PAGBOIIN@PASSWORD_HIDDEN_OS_HELP?$AA@ DB 'PASSWORD_HIDDEN_OS_HE'
	DB	'LP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OJJOHFMM@PASSWORD_HIDDENVOL_HOST_HELP?$AA@
CONST	SEGMENT
??_C@_0BN@OJJOHFMM@PASSWORD_HIDDENVOL_HOST_HELP?$AA@ DB 'PASSWORD_HIDDENV'
	DB	'OL_HOST_HELP', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EJBBHKGE@PASSWORD_SYSENC_OUTERVOL_HELP?$AA@
CONST	SEGMENT
??_C@_0BO@EJBBHKGE@PASSWORD_SYSENC_OUTERVOL_HELP?$AA@ DB 'PASSWORD_SYSENC'
	DB	'_OUTERVOL_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MMDPAFIK@CANNOT_SET_TIMER?$AA@
CONST	SEGMENT
??_C@_0BB@MMDPAFIK@CANNOT_SET_TIMER?$AA@ DB 'CANNOT_SET_TIMER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KAEHBIEI@CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_@
CONST	SEGMENT
??_C@_0CL@KAEHBIEI@CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_@ DB 'CANT_CHANGE_KEYB'
	DB	'_LAYOUT_FOR_SYS_ENCRYPTION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OKJEGFFL@00000409?$AA@
CONST	SEGMENT
??_C@_08OKJEGFFL@00000409?$AA@ DB '00000409', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JIMNDDED@?$CF08X?$AA@
CONST	SEGMENT
??_C@_04JIMNDDED@?$CF08X?$AA@ DB '%08X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DDMDKDAG@PASSWORD_HIDVOL_HOST_TITLE?$AA@
CONST	SEGMENT
??_C@_0BL@DDMDKDAG@PASSWORD_HIDVOL_HOST_TITLE?$AA@ DB 'PASSWORD_HIDVOL_HO'
	DB	'ST_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08KENNMKEI@PASSWORD?$AA@
CONST	SEGMENT
??_C@_08KENNMKEI@PASSWORD?$AA@ DB 'PASSWORD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MPBBLHJC@PASSWORD_HIDDENVOL_HOST_DIRECT_H@
CONST	SEGMENT
??_C@_0CE@MPBBLHJC@PASSWORD_HIDDENVOL_HOST_DIRECT_H@ DB 'PASSWORD_HIDDENV'
	DB	'OL_HOST_DIRECT_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@CCCDIOBF@NONSYS_INPLACE_ENC_RESUME_PASSWO@
CONST	SEGMENT
??_C@_0CN@CCCDIOBF@NONSYS_INPLACE_ENC_RESUME_PASSWO@ DB 'NONSYS_INPLACE_E'
	DB	'NC_RESUME_PASSWORD_PAGE_HELP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DGAKGAKL@SIZE_TITLE?$AA@
CONST	SEGMENT
??_C@_0L@DGAKGAKL@SIZE_TITLE?$AA@ DB 'SIZE_TITLE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@COPDBOHD@SIZE_HIDVOL_TITLE?$AA@
CONST	SEGMENT
??_C@_0BC@COPDBOHD@SIZE_HIDVOL_TITLE?$AA@ DB 'SIZE_HIDVOL_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GBEPPLEC@SIZE_HIDVOL_HOST_TITLE?$AA@
CONST	SEGMENT
??_C@_0BH@GBEPPLEC@SIZE_HIDVOL_HOST_TITLE?$AA@ DB 'SIZE_HIDVOL_HOST_TITLE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_05OINFJHGD@?$CFI64u?$AA@
CONST	SEGMENT
??_C@_05OINFJHGD@?$CFI64u?$AA@ DB '%I64u', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NFANNNEC@UNKNOWN?$AA@
CONST	SEGMENT
??_C@_07NFANNNEC@UNKNOWN?$AA@ DB 'UNKNOWN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_19LJDFFCJJ@?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_19LJDFFCJJ@?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?$AA@ DB '%', 00H, 's', 00H
	DB	'%', 00H, 's', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FGKMPGH@SIZE_PARTITION_HELP?$AA@
CONST	SEGMENT
??_C@_0BE@FGKMPGH@SIZE_PARTITION_HELP?$AA@ DB 'SIZE_PARTITION_HELP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MIIACKDF@SIZE_PARTITION_HIDDEN_SYSENC_HEL@
CONST	SEGMENT
??_C@_0CC@MIIACKDF@SIZE_PARTITION_HIDDEN_SYSENC_HEL@ DB 'SIZE_PARTITION_H'
	DB	'IDDEN_SYSENC_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JPPBFIHO@SIZE_PARTITION_HIDDEN_VOL_HELP?$AA@
CONST	SEGMENT
??_C@_0BP@JPPBFIHO@SIZE_PARTITION_HIDDEN_VOL_HELP?$AA@ DB 'SIZE_PARTITION'
	DB	'_HIDDEN_VOL_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09BEBIICBL@SIZE_HELP?$AA@
CONST	SEGMENT
??_C@_09BEBIICBL@SIZE_HELP?$AA@ DB 'SIZE_HELP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LOOCDJPI@SIZE_HELP_HIDDEN_VOL?$AA@
CONST	SEGMENT
??_C@_0BF@LOOCDJPI@SIZE_HELP_HIDDEN_VOL?$AA@ DB 'SIZE_HELP_HIDDEN_VOL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DEODNGPK@SIZE_HELP_HIDDEN_HOST_VOL?$AA@
CONST	SEGMENT
??_C@_0BK@DEODNGPK@SIZE_HELP_HIDDEN_HOST_VOL?$AA@ DB 'SIZE_HELP_HIDDEN_HO'
	DB	'ST_VOL', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KDMLELH@IDD_VOL_CREATION_WIZARD_DLG_CIPH@
CONST	SEGMENT
??_C@_0CJ@KDMLELH@IDD_VOL_CREATION_WIZARD_DLG_CIPH@ DB 'IDD_VOL_CREATION_'
	DB	'WIZARD_DLG_CIPHER_TITLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IMFDFPGM@CIPHER_TITLE?$AA@
CONST	SEGMENT
??_C@_0N@IMFDFPGM@CIPHER_TITLE?$AA@ DB 'CIPHER_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JFKJAJEK@CIPHER_HIDVOL_TITLE?$AA@
CONST	SEGMENT
??_C@_0BE@JFKJAJEK@CIPHER_HIDVOL_TITLE?$AA@ DB 'CIPHER_HIDVOL_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GGKKJCIG@CIPHER_HIDVOL_HOST_TITLE?$AA@
CONST	SEGMENT
??_C@_0BJ@GGKKJCIG@CIPHER_HIDVOL_HOST_TITLE?$AA@ DB 'CIPHER_HIDVOL_HOST_T'
	DB	'ITLE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GDOHBMLG@HIDVOL_PRE_CIPHER_HELP?$AA@
CONST	SEGMENT
??_C@_0BH@GDOHBMLG@HIDVOL_PRE_CIPHER_HELP?$AA@ DB 'HIDVOL_PRE_CIPHER_HELP'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FGHOHKMP@HIDDEN_OS_PRE_CIPHER_HELP?$AA@
CONST	SEGMENT
??_C@_0BK@FGHOHKMP@HIDDEN_OS_PRE_CIPHER_HELP?$AA@ DB 'HIDDEN_OS_PRE_CIPHE'
	DB	'R_HELP', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04GOLNGIJ@EXIT?$AA@
CONST	SEGMENT
??_C@_04GOLNGIJ@EXIT?$AA@ DB 'EXIT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OIPNIHCG@HIDDEN_VOLUME_TOO_SMALL_FOR_OS_C@
CONST	SEGMENT
??_C@_0CF@OIPNIHCG@HIDDEN_VOLUME_TOO_SMALL_FOR_OS_C@ DB 'HIDDEN_VOLUME_TO'
	DB	'O_SMALL_FOR_OS_CLONE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JOBKEAGA@HIDVOL_PRE_CIPHER_TITLE?$AA@
CONST	SEGMENT
??_C@_0BI@JOBKEAGA@HIDVOL_PRE_CIPHER_TITLE?$AA@ DB 'HIDVOL_PRE_CIPHER_TIT'
	DB	'LE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PJPEEMEG@INVALID_PATH?$AA@
CONST	SEGMENT
??_C@_0N@PJPEEMEG@INVALID_PATH?$AA@ DB 'INVALID_PATH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GCHOHFOK@HIDVOL_HOST_PRE_CIPHER_HELP?$AA@
CONST	SEGMENT
??_C@_0BM@GCHOHFOK@HIDVOL_HOST_PRE_CIPHER_HELP?$AA@ DB 'HIDVOL_HOST_PRE_C'
	DB	'IPHER_HELP', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@OMGBOOGK@HIDVOL_HOST_PRE_CIPHER_HELP_SYSE@
CONST	SEGMENT
??_C@_0CD@OMGBOOGK@HIDVOL_HOST_PRE_CIPHER_HELP_SYSE@ DB 'HIDVOL_HOST_PRE_'
	DB	'CIPHER_HELP_SYSENC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PMMGMENG@HIDVOL_HOST_PRE_CIPHER_TITLE?$AA@
CONST	SEGMENT
??_C@_0BN@PMMGMENG@HIDVOL_HOST_PRE_CIPHER_TITLE?$AA@ DB 'HIDVOL_HOST_PRE_'
	DB	'CIPHER_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FGJIGFAK@DEVICE_TRANSFORM_MODE_PAGE_INPLA@
CONST	SEGMENT
??_C@_0CI@FGJIGFAK@DEVICE_TRANSFORM_MODE_PAGE_INPLA@ DB 'DEVICE_TRANSFORM'
	DB	'_MODE_PAGE_INPLACE_HELP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@CJGGIKCO@DEVICE_TRANSFORM_MODE_PAGE_FORMA@
CONST	SEGMENT
??_C@_0CH@CJGGIKCO@DEVICE_TRANSFORM_MODE_PAGE_FORMA@ DB 'DEVICE_TRANSFORM'
	DB	'_MODE_PAGE_FORMAT_HELP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IJHCDAO@DEVICE_TRANSFORM_MODE_PAGE_TITLE@
CONST	SEGMENT
??_C@_0CB@IJHCDAO@DEVICE_TRANSFORM_MODE_PAGE_TITLE@ DB 'DEVICE_TRANSFORM_'
	DB	'MODE_PAGE_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DGHBDDNJ@FILE_TITLE?$AA@
CONST	SEGMENT
??_C@_0L@DGHBDDNJ@FILE_TITLE?$AA@ DB 'FILE_TITLE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GPELPABL@FILE_HELP?$AA@
CONST	SEGMENT
??_C@_09GPELPABL@FILE_HELP?$AA@ DB 'FILE_HELP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JMGOJAKG@FILE_HELP_HIDDEN_HOST_VOL?$AA@
CONST	SEGMENT
??_C@_0BK@JMGOJAKG@FILE_HELP_HIDDEN_HOST_VOL?$AA@ DB 'FILE_HELP_HIDDEN_HO'
	DB	'ST_VOL', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JNOAPEGE@DEVICE_HELP?$AA@
CONST	SEGMENT
??_C@_0M@JNOAPEGE@DEVICE_HELP?$AA@ DB 'DEVICE_HELP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DMHDGBOJ@DEVICE_HELP_HIDDEN_HOST_VOL?$AA@
CONST	SEGMENT
??_C@_0BM@DMHDGBOJ@DEVICE_HELP_HIDDEN_HOST_VOL?$AA@ DB 'DEVICE_HELP_HIDDE'
	DB	'N_HOST_VOL', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LOIOBDOO@FILE_HELP_HIDDEN_HOST_VOL_DIRECT@
CONST	SEGMENT
??_C@_0CB@LOIOBDOO@FILE_HELP_HIDDEN_HOST_VOL_DIRECT@ DB 'FILE_HELP_HIDDEN'
	DB	'_HOST_VOL_DIRECT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HOMDJPL@IDC_SELECT_FILE?$AA@
CONST	SEGMENT
??_C@_0BA@HOMDJPL@IDC_SELECT_FILE?$AA@ DB 'IDC_SELECT_FILE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NHEENOIC@IDC_SELECT_DEVICE?$AA@
CONST	SEGMENT
??_C@_0BC@NHEENOIC@IDC_SELECT_DEVICE?$AA@ DB 'IDC_SELECT_DEVICE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@BGGCLDPJ@HIDDEN_VOL_WIZARD_MODE_DIRECT_HE@
CONST	SEGMENT
??_C@_0CD@BGGCLDPJ@HIDDEN_VOL_WIZARD_MODE_DIRECT_HE@ DB 'HIDDEN_VOL_WIZAR'
	DB	'D_MODE_DIRECT_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LJCMOGBH@HIDDEN_VOL_WIZARD_MODE_NORMAL_HE@
CONST	SEGMENT
??_C@_0CD@LJCMOGBH@HIDDEN_VOL_WIZARD_MODE_NORMAL_HE@ DB 'HIDDEN_VOL_WIZAR'
	DB	'D_MODE_NORMAL_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CFKNBCJG@HIDDEN_VOL_WIZARD_MODE_TITLE?$AA@
CONST	SEGMENT
??_C@_0BN@CFKNBCJG@HIDDEN_VOL_WIZARD_MODE_TITLE?$AA@ DB 'HIDDEN_VOL_WIZAR'
	DB	'D_MODE_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OKEJAKDK@NORMAL_VOLUME_TYPE_HELP?$AA@
CONST	SEGMENT
??_C@_0BI@OKEJAKDK@NORMAL_VOLUME_TYPE_HELP?$AA@ DB 'NORMAL_VOLUME_TYPE_HE'
	DB	'LP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OMMJFNJB@HIDDEN_VOLUME_TYPE_HELP?$AA@
CONST	SEGMENT
??_C@_0BI@OMMJFNJB@HIDDEN_VOLUME_TYPE_HELP?$AA@ DB 'HIDDEN_VOLUME_TYPE_HE'
	DB	'LP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IMPHNJMH@VOLUME_TYPE_TITLE?$AA@
CONST	SEGMENT
??_C@_0BC@IMPHNJMH@VOLUME_TYPE_TITLE?$AA@ DB 'VOLUME_TYPE_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FOODICMO@SYSENC_MULTI_BOOT_OUTCOME_TITLE?$AA@
CONST	SEGMENT
??_C@_0CA@FOODICMO@SYSENC_MULTI_BOOT_OUTCOME_TITLE?$AA@ DB 'SYSENC_MULTI_'
	DB	'BOOT_OUTCOME_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NGBECAKP@SYSENC_MULTI_BOOT_NONWIN_BOOT_LO@
CONST	SEGMENT
??_C@_0CK@NGBECAKP@SYSENC_MULTI_BOOT_NONWIN_BOOT_LO@ DB 'SYSENC_MULTI_BOO'
	DB	'T_NONWIN_BOOT_LOADER_HELP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@PKMEBLJM@SYSENC_MULTI_BOOT_NONWIN_BOOT_LO@
CONST	SEGMENT
??_C@_0CL@PKMEBLJM@SYSENC_MULTI_BOOT_NONWIN_BOOT_LO@ DB 'SYSENC_MULTI_BOO'
	DB	'T_NONWIN_BOOT_LOADER_TITLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@CGLNKLHK@SYSENC_MULTI_BOOT_ADJACENT_SYS_H@
CONST	SEGMENT
??_C@_0CE@CGLNKLHK@SYSENC_MULTI_BOOT_ADJACENT_SYS_H@ DB 'SYSENC_MULTI_BOO'
	DB	'T_ADJACENT_SYS_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@MINJEEM@SYSENC_MULTI_BOOT_ADJACENT_SYS_T@
CONST	SEGMENT
??_C@_0CF@MINJEEM@SYSENC_MULTI_BOOT_ADJACENT_SYS_T@ DB 'SYSENC_MULTI_BOOT'
	DB	'_ADJACENT_SYS_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@GBIPGAOP@SYSENC_MULTI_BOOT_NBR_SYS_DRIVES@
CONST	SEGMENT
??_C@_0CG@GBIPGAOP@SYSENC_MULTI_BOOT_NBR_SYS_DRIVES@ DB 'SYSENC_MULTI_BOO'
	DB	'T_NBR_SYS_DRIVES_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@IMKPMBEM@SYSENC_MULTI_BOOT_NBR_SYS_DRIVES@
CONST	SEGMENT
??_C@_0CH@IMKPMBEM@SYSENC_MULTI_BOOT_NBR_SYS_DRIVES@ DB 'SYSENC_MULTI_BOO'
	DB	'T_NBR_SYS_DRIVES_TITLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BAIFEFDO@TWO_OR_MORE?$AA@
CONST	SEGMENT
??_C@_0M@BAIFEFDO@TWO_OR_MORE?$AA@ DB 'TWO_OR_MORE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BCPPDPEL@DIGIT_ONE?$AA@
CONST	SEGMENT
??_C@_09BCPPDPEL@DIGIT_ONE?$AA@ DB 'DIGIT_ONE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@ODHMCLM@SYSENC_MULTI_BOOT_SYS_EQ_BOOT_HE@
CONST	SEGMENT
??_C@_0CD@ODHMCLM@SYSENC_MULTI_BOOT_SYS_EQ_BOOT_HE@ DB 'SYSENC_MULTI_BOOT'
	DB	'_SYS_EQ_BOOT_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HOKCHJKA@SYSENC_MULTI_BOOT_SYS_EQ_BOOT_TI@
CONST	SEGMENT
??_C@_0CE@HOKCHJKA@SYSENC_MULTI_BOOT_SYS_EQ_BOOT_TI@ DB 'SYSENC_MULTI_BOO'
	DB	'T_SYS_EQ_BOOT_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@IPJJAEGJ@IDD_VOL_CREATION_WIZARD_DLG_SYS_@
CONST	SEGMENT
??_C@_0DG@IPJJAEGJ@IDD_VOL_CREATION_WIZARD_DLG_SYS_@ DB 'IDD_VOL_CREATION'
	DB	'_WIZARD_DLG_SYS_MULTI_BOOT_MODE_TITLE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NAIABFPC@SYS_MULTI_BOOT_MODE_TITLE?$AA@
CONST	SEGMENT
??_C@_0BK@NAIABFPC@SYS_MULTI_BOOT_MODE_TITLE?$AA@ DB 'SYS_MULTI_BOOT_MODE'
	DB	'_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08HBBNJJLH@IDC_EXIT?$AA@
CONST	SEGMENT
??_C@_08HBBNJJLH@IDC_EXIT?$AA@ DB 'IDC_EXIT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OEFOGNPK@RETRY_HIDDEN_SECTOR_DETECTION?$AA@
CONST	SEGMENT
??_C@_0BO@OEFOGNPK@RETRY_HIDDEN_SECTOR_DETECTION?$AA@ DB 'RETRY_HIDDEN_SE'
	DB	'CTOR_DETECTION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GHOENGPC@SKIP_HIDDEN_SECTOR_DETECTION?$AA@
CONST	SEGMENT
??_C@_0BN@GHOENGPC@SKIP_HIDDEN_SECTOR_DETECTION?$AA@ DB 'SKIP_HIDDEN_SECT'
	DB	'OR_DETECTION', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KEHMFNIA@HIDDEN_SECTOR_DETECTION_FAILED_P@
CONST	SEGMENT
??_C@_0CK@KEHMFNIA@HIDDEN_SECTOR_DETECTION_FAILED_P@ DB 'HIDDEN_SECTOR_DE'
	DB	'TECTION_FAILED_PREVIOUSLY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OAMDPDOH@SYSENC_DRIVE_ANALYSIS_INFO?$AA@
CONST	SEGMENT
??_C@_0BL@OAMDPDOH@SYSENC_DRIVE_ANALYSIS_INFO?$AA@ DB 'SYSENC_DRIVE_ANALY'
	DB	'SIS_INFO', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@LOLLMPEK@IDD_VOL_CREATION_WIZARD_DLG_SYSE@
CONST	SEGMENT
??_C@_0DI@LOLLMPEK@IDD_VOL_CREATION_WIZARD_DLG_SYSE@ DB 'IDD_VOL_CREATION'
	DB	'_WIZARD_DLG_SYSENC_DRIVE_ANALYSIS_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EGLOODHA@SYSENC_DRIVE_ANALYSIS_TITLE?$AA@
CONST	SEGMENT
??_C@_0BM@EGLOODHA@SYSENC_DRIVE_ANALYSIS_TITLE?$AA@ DB 'SYSENC_DRIVE_ANAL'
	DB	'YSIS_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@FCJHFGGJ@SYSENC_PRE_DRIVE_ANALYSIS_HELP?$AA@
CONST	SEGMENT
??_C@_0BP@FCJHFGGJ@SYSENC_PRE_DRIVE_ANALYSIS_HELP?$AA@ DB 'SYSENC_PRE_DRI'
	DB	'VE_ANALYSIS_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@OIJHNGEF@IDD_VOL_CREATION_WIZARD_DLG_SYSE@
CONST	SEGMENT
??_C@_0DM@OIJHNGEF@IDD_VOL_CREATION_WIZARD_DLG_SYSE@ DB 'IDD_VOL_CREATION'
	DB	'_WIZARD_DLG_SYSENC_PRE_DRIVE_ANALYSIS_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IIEHPPGP@SYSENC_PRE_DRIVE_ANALYSIS_TITLE?$AA@
CONST	SEGMENT
??_C@_0CA@IIEHPPGP@SYSENC_PRE_DRIVE_ANALYSIS_TITLE?$AA@ DB 'SYSENC_PRE_DR'
	DB	'IVE_ANALYSIS_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CMOPFEFD@SYS_ENCRYPTION_SPAN_WHOLE_SYS_DR@
CONST	SEGMENT
??_C@_0CJ@CMOPFEFD@SYS_ENCRYPTION_SPAN_WHOLE_SYS_DR@ DB 'SYS_ENCRYPTION_S'
	DB	'PAN_WHOLE_SYS_DRIVE_HELP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@OHMIACK@IDD_VOL_CREATION_WIZARD_DLG_SYS_@
CONST	SEGMENT
??_C@_0DG@OHMIACK@IDD_VOL_CREATION_WIZARD_DLG_SYS_@ DB 'IDD_VOL_CREATION_'
	DB	'WIZARD_DLG_SYS_ENCRYPTION_SPAN_TITLE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FBGFJBLB@SYS_ENCRYPTION_SPAN_TITLE?$AA@
CONST	SEGMENT
??_C@_0BK@FBGFJBLB@SYS_ENCRYPTION_SPAN_TITLE?$AA@ DB 'SYS_ENCRYPTION_SPAN'
	DB	'_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@GBPOCIAL@SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_@
CONST	SEGMENT
??_C@_0CF@GBPOCIAL@SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_@ DB 'SYSENC_HIDDEN_OS'
	DB	'_REQ_CHECK_PAGE_HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CLMIJGGF@SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_@
CONST	SEGMENT
??_C@_0CG@CLMIJGGF@SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_@ DB 'SYSENC_HIDDEN_OS'
	DB	'_REQ_CHECK_PAGE_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EEMGDNEH@SYSENC_NORMAL_TYPE_HELP?$AA@
CONST	SEGMENT
??_C@_0BI@EEMGDNEH@SYSENC_NORMAL_TYPE_HELP?$AA@ DB 'SYSENC_NORMAL_TYPE_HE'
	DB	'LP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FECPKDFP@SYSENC_HIDDEN_TYPE_HELP?$AA@
CONST	SEGMENT
??_C@_0BI@FECPKDFP@SYSENC_HIDDEN_TYPE_HELP?$AA@ DB 'SYSENC_HIDDEN_TYPE_HE'
	DB	'LP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@EIMAJDHB@IDD_VOL_CREATION_WIZARD_DLG_SYSE@
CONST	SEGMENT
??_C@_0DD@EIMAJDHB@IDD_VOL_CREATION_WIZARD_DLG_SYSE@ DB 'IDD_VOL_CREATION'
	DB	'_WIZARD_DLG_SYSENC_TYPE_PAGE_TITLE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LFFPJFCG@SYSENC_TYPE_PAGE_TITLE?$AA@
CONST	SEGMENT
??_C@_0BH@LFFPJFCG@SYSENC_TYPE_PAGE_TITLE?$AA@ DB 'SYSENC_TYPE_PAGE_TITLE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BGLIKHAN@INTRO_TITLE?$AA@
CONST	SEGMENT
??_C@_0M@BGLIKHAN@INTRO_TITLE?$AA@ DB 'INTRO_TITLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KKIBKINN@IDD_VOL_CREATION_WIZARD_DLG_INTR@
CONST	SEGMENT
??_C@_0CI@KKIBKINN@IDD_VOL_CREATION_WIZARD_DLG_INTR@ DB 'IDD_VOL_CREATION'
	DB	'_WIZARD_DLG_INTRO_TITLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IDKFBPLE@FORMAT_PAGE_?$CFd?$AA@
CONST	SEGMENT
??_C@_0P@IDKFBPLE@FORMAT_PAGE_?$CFd?$AA@ DB 'FORMAT_PAGE_%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IHMEHMBJ@IDD_VOL_CREATION_WIZARD_DLG?$AA@
CONST	SEGMENT
??_C@_0BM@IHMEHMBJ@IDD_VOL_CREATION_WIZARD_DLG?$AA@ DB 'IDD_VOL_CREATION_'
	DB	'WIZARD_DLG', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_PageDialogProc@16$14 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffa8H
	DD	FLAT:__catch$_PageDialogProc@16$4
__catchsym$_PageDialogProc@16$13 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffa4H
	DD	FLAT:__catch$_PageDialogProc@16$2
__catchsym$_PageDialogProc@16$12 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffacH
	DD	FLAT:__catch$_PageDialogProc@16$0
__ehfuncinfo$_PageDialogProc@16 DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$_PageDialogProc@16
	DD	03H
	DD	FLAT:__tryblocktable$_PageDialogProc@16
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$_PageDialogProc@16 DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_PageDialogProc@16$12
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$_PageDialogProc@16$13
	DD	07H
	DD	07H
	DD	08H
	DD	01H
	DD	FLAT:__catchsym$_PageDialogProc@16$14
__unwindtable$_PageDialogProc@16 DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_PageDialogProc@16$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_PageDialogProc@16$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_PageDialogProc@16$10
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\format\tcformat.c
xdata$x	ENDS
;	COMDAT _PageDialogProc@16
_TEXT	SEGMENT
$T165802 = -980						; size = 384
$T165853 = -596						; size = 94
$T165804 = -502						; size = 94
_s$133769 = -408					; size = 136
$T165850 = -272						; size = 28
$T165840 = -244						; size = 28
$T165851 = -216						; size = 28
_locBootEncStatus$133928 = -188				; size = 94
_$S1$133542 = -144					; size = 48
_e$133394 = -92						; size = 4
_e$133938 = -88						; size = 4
_e$133384 = -84						; size = 4
_tmpStr$133127 = -80					; size = 24
_tmpbDevice$133952 = -56				; size = 4
_bFATallowed$133588 = -52				; size = 4
_fileSystemFlags$133610 = -48				; size = 4
_savedWipeAlgorithm$133579 = -44			; size = 4
_param$134024 = -40					; size = 8
_maxRecomOuterVolFillSize$133832 = -40			; size = 8
tv6602 = -32						; size = 8
_dataAreaSize$133807 = -32				; size = 8
_hw$ = -24						; size = 2
tv5152 = -24						; size = 4
tv4873 = -24						; size = 4
_bNoFSallowed$133589 = -24				; size = 4
_device$133546 = -24					; size = 4
_hwndDlg$GSCopy$ = -20					; size = 4
_i$133615 = -20						; size = 4
_bNTFSallowed$133587 = -20				; size = 4
tv1922 = -20						; size = 4
_hid$133226 = -20					; size = 4
_ea$133225 = -20					; size = 4
_nID$133184 = -20					; size = 4
__$EHRec$ = -16						; size = 16
_finalMsg$133378 = 0					; size = 16048
_szTmp$133323 = 16048					; size = 16384
_msg$133829 = 32432					; size = 8192
_szTmp$133350 = 40624					; size = 16384
_szTmp$133922 = 57008					; size = 8192
_str$133288 = 65200					; size = 2000
_str$133245 = 67200					; size = 2000
_tmpszRescueDiskISO$134119 = 69200			; size = 261
_root$133609 = 69464					; size = 260
_szMaxRecomOuterVolFillSize$133831 = 69724		; size = 200
_buf$133227 = 69924					; size = 100
_tmpUTF16buf$134038 = 70024				; size = 130
_name$133994 = 70156					; size = 100
_szTmp$133273 = 70256					; size = 32
__$ArrayPad$ = 70288					; size = 4
_hwndDlg$ = 70300					; size = 4
_uMsg$ = 70304						; size = 4
_wParam$ = 70308					; size = 4
_lParam$ = 70312					; size = 4
_PageDialogProc@16 PROC					; COMDAT

; 3302 : {

  00000	55		 push	 ebp
  00001	8d ac 24 6c ed
	fe ff		 lea	 ebp, DWORD PTR [esp-70292]
  00008	b8 94 12 01 00	 mov	 eax, 70292		; 00011294H
  0000d	e8 00 00 00 00	 call	 __chkstk
  00012	6a ff		 push	 -1
  00014	68 00 00 00 00	 push	 __ehhandler$_PageDialogProc@16
  00019	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001f	50		 push	 eax
  00020	81 ec c8 03 00
	00		 sub	 esp, 968		; 000003c8H
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	89 85 90 12 01
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00033	53		 push	 ebx
  00034	56		 push	 esi
  00035	57		 push	 edi
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 3303 : 	static char PageDebugId[128];
; 3304 : 	WORD lw = LOWORD (wParam);
; 3305 : 	WORD hw = HIWORD (wParam);

  00043	8b bd a4 12 01
	00		 mov	 edi, DWORD PTR _wParam$[ebp]
  00049	8b 9d 9c 12 01
	00		 mov	 ebx, DWORD PTR _hwndDlg$[ebp]

; 3306 : 
; 3307 : 	hCurPage = hwndDlg;
; 3308 : 
; 3309 : 	switch (uMsg)

  0004f	8b 85 a0 12 01
	00		 mov	 eax, DWORD PTR _uMsg$[ebp]
  00055	8b b5 a8 12 01
	00		 mov	 esi, DWORD PTR _lParam$[ebp]
  0005b	8b d7		 mov	 edx, edi
  0005d	c1 ea 10	 shr	 edx, 16			; 00000010H
  00060	89 5d ec	 mov	 DWORD PTR _hwndDlg$GSCopy$[ebp], ebx
  00063	89 55 e8	 mov	 DWORD PTR _hw$[ebp], edx
  00066	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
  0006c	3d 11 01 00 00	 cmp	 eax, 273		; 00000111H
  00071	0f 87 d4 52 00
	00		 ja	 $LN437@PageDialog
  00077	0f 84 81 3c 00
	00		 je	 $LN160@PageDialog
  0007d	83 f8 53	 cmp	 eax, 83			; 00000053H
  00080	0f 84 5d 3c 00
	00		 je	 $LN162@PageDialog
  00086	3d 10 01 00 00	 cmp	 eax, 272		; 00000110H
  0008b	0f 85 01 07 00
	00		 jne	 $LN451@PageDialog

; 3310 : 	{
; 3311 : 	case WM_INITDIALOG:
; 3312 : 		LocalizeDialog (hwndDlg, "IDD_VOL_CREATION_WIZARD_DLG");

  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@IHMEHMBJ@IDD_VOL_CREATION_WIZARD_DLG?$AA@
  00096	53		 push	 ebx
  00097	e8 00 00 00 00	 call	 _LocalizeDialog

; 3313 : 
; 3314 : 		sprintf (PageDebugId, "FORMAT_PAGE_%d", nCurPageNo);

  0009c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  000a1	50		 push	 eax
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IDKFBPLE@FORMAT_PAGE_?$CFd?$AA@
  000a7	68 00 00 00 00	 push	 OFFSET ?PageDebugId@?1??PageDialogProc@@9@16@4PADA
  000ac	e8 00 00 00 00	 call	 _sprintf

; 3315 : 		LastDialogId = PageDebugId;
; 3316 : 		SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_INTRO_TITLE"));

  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KKIBKINN@IDD_VOL_CREATION_WIZARD_DLG_INTR@
  000b6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LastDialogId, OFFSET ?PageDebugId@?1??PageDialogProc@@9@16@4PADA
  000c0	e8 00 00 00 00	 call	 _GetString
  000c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  000cb	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextW@8
  000d1	83 c4 18	 add	 esp, 24			; 00000018H
  000d4	50		 push	 eax
  000d5	51		 push	 ecx
  000d6	ff d6		 call	 esi

; 3317 : 
; 3318 : 		switch (nCurPageNo)

  000d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  000dd	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  000e0	0f 87 79 2b 00
	00		 ja	 $LN337@PageDialog
  000e6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN738@PageDialog[eax*4]
$LN336@PageDialog:

; 3319 : 		{
; 3320 : 		case INTRO_PAGE:
; 3321 : 
; 3322 : 			SendMessage (GetDlgItem (hwndDlg, IDC_FILE_CONTAINER), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  000ed	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hUserBoldFont
  000f3	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  000f9	6a 01		 push	 1
  000fb	52		 push	 edx
  000fc	6a 30		 push	 48			; 00000030H
  000fe	68 25 04 00 00	 push	 1061			; 00000425H
  00103	53		 push	 ebx
  00104	ff d6		 call	 esi
  00106	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  0010c	50		 push	 eax
  0010d	ff d7		 call	 edi

; 3323 : 			SendMessage (GetDlgItem (hwndDlg, IDC_NONSYS_DEVICE), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  0010f	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserBoldFont
  00114	6a 01		 push	 1
  00116	50		 push	 eax
  00117	6a 30		 push	 48			; 00000030H
  00119	68 26 04 00 00	 push	 1062			; 00000426H
  0011e	53		 push	 ebx
  0011f	ff d6		 call	 esi
  00121	50		 push	 eax
  00122	ff d7		 call	 edi

; 3324 : 			SendMessage (GetDlgItem (hwndDlg, IDC_SYS_DEVICE), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  00124	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hUserBoldFont
  0012a	6a 01		 push	 1
  0012c	51		 push	 ecx
  0012d	6a 30		 push	 48			; 00000030H
  0012f	68 27 04 00 00	 push	 1063			; 00000427H
  00134	53		 push	 ebx
  00135	ff d6		 call	 esi
  00137	50		 push	 eax
  00138	ff d7		 call	 edi

; 3325 : 
; 3326 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("INTRO_TITLE"));

  0013a	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BGLIKHAN@INTRO_TITLE?$AA@
  0013f	e8 00 00 00 00	 call	 _GetString
  00144	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  0014a	83 c4 04	 add	 esp, 4
  0014d	50		 push	 eax
  0014e	68 e8 03 00 00	 push	 1000			; 000003e8H
  00153	53		 push	 ebx
  00154	ff d7		 call	 edi
  00156	50		 push	 eax
  00157	ff d6		 call	 esi
  00159	50		 push	 eax
  0015a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3327 : 			SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_INTRO_TITLE"));

  00160	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KKIBKINN@IDD_VOL_CREATION_WIZARD_DLG_INTR@
  00165	e8 00 00 00 00	 call	 _GetString
  0016a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00170	83 c4 04	 add	 esp, 4
  00173	50		 push	 eax
  00174	52		 push	 edx
  00175	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3328 : 
; 3329 : 			ToHyperlink (hwndDlg, IDC_MORE_INFO_ON_CONTAINERS);

  0017b	68 33 04 00 00	 push	 1075			; 00000433H
  00180	53		 push	 ebx
  00181	e8 00 00 00 00	 call	 _ToHyperlink

; 3330 : 			ToHyperlink (hwndDlg, IDC_MORE_INFO_ON_SYS_ENCRYPTION);

  00186	68 31 04 00 00	 push	 1073			; 00000431H
  0018b	53		 push	 ebx
  0018c	e8 00 00 00 00	 call	 _ToHyperlink
  00191	83 c4 10	 add	 esp, 16			; 00000010H

; 3331 : 
; 3332 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_STD_VOL), TRUE);

  00194	6a 01		 push	 1
  00196	68 07 04 00 00	 push	 1031			; 00000407H
  0019b	53		 push	 ebx
  0019c	ff d6		 call	 esi
  0019e	50		 push	 eax
  0019f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3333 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_HIDDEN_VOL), TRUE);

  001a5	6a 01		 push	 1
  001a7	68 08 04 00 00	 push	 1032			; 00000408H
  001ac	53		 push	 ebx
  001ad	ff d6		 call	 esi
  001af	50		 push	 eax
  001b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3334 : 
; 3335 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  001b6	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  001bb	e8 00 00 00 00	 call	 _GetString
  001c0	83 c4 04	 add	 esp, 4
  001c3	50		 push	 eax
  001c4	68 10 04 00 00	 push	 1040			; 00000410H
  001c9	53		 push	 ebx
  001ca	ff d7		 call	 edi
  001cc	50		 push	 eax
  001cd	ff d6		 call	 esi
  001cf	50		 push	 eax
  001d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3336 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  001d6	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  001db	e8 00 00 00 00	 call	 _GetString
  001e0	83 c4 04	 add	 esp, 4
  001e3	50		 push	 eax
  001e4	68 11 04 00 00	 push	 1041			; 00000411H
  001e9	53		 push	 ebx
  001ea	ff d7		 call	 edi
  001ec	50		 push	 eax
  001ed	ff d6		 call	 esi
  001ef	50		 push	 eax
  001f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3337 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("CANCEL"));

  001f6	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  001fb	e8 00 00 00 00	 call	 _GetString
  00200	83 c4 04	 add	 esp, 4
  00203	50		 push	 eax
  00204	6a 02		 push	 2
  00206	53		 push	 ebx
  00207	ff d7		 call	 edi
  00209	50		 push	 eax
  0020a	ff d6		 call	 esi
  0020c	50		 push	 eax
  0020d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 3338 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  00213	6a 01		 push	 1
  00215	68 10 04 00 00	 push	 1040			; 00000410H
  0021a	53		 push	 ebx
  0021b	ff d7		 call	 edi
  0021d	50		 push	 eax
  0021e	ff d6		 call	 esi
  00220	50		 push	 eax
  00221	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3339 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  00227	6a 00		 push	 0
  00229	68 11 04 00 00	 push	 1041			; 00000411H
  0022e	53		 push	 ebx
  0022f	ff d7		 call	 edi
  00231	50		 push	 eax
  00232	ff d6		 call	 esi
  00234	50		 push	 eax
  00235	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3340 : 
; 3341 : 			UpdateWizardModeControls (hwndDlg, WizardMode);

  0023b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _WizardMode
  00241	8b fb		 mov	 edi, ebx
  00243	e8 00 00 00 00	 call	 ?UpdateWizardModeControls@@YAXPAUHWND__@@H@Z ; UpdateWizardModeControls

; 4280 : 				return 0;

  00248	33 c0		 xor	 eax, eax
  0024a	e9 15 51 00 00	 jmp	 $LN342@PageDialog
$LN335@PageDialog:

; 3342 : 			break;
; 3343 : 
; 3344 : 		case SYSENC_TYPE_PAGE:
; 3345 : 
; 3346 : 			bHiddenVolHost = bHiddenVol = bHiddenOS;

  0024f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00254	a3 00 00 00 00	 mov	 DWORD PTR ?bHiddenVol@@3HC, eax ; bHiddenVol
  00259	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  0025f	89 0d 00 00 00
	00		 mov	 DWORD PTR _bHiddenVolHost, ecx

; 3347 : 
; 3348 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYSENC_TYPE_PAGE_TITLE"));

  00265	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@LFFPJFCG@SYSENC_TYPE_PAGE_TITLE?$AA@
  0026a	e8 00 00 00 00	 call	 _GetString
  0026f	83 c4 04	 add	 esp, 4
  00272	50		 push	 eax
  00273	68 e8 03 00 00	 push	 1000			; 000003e8H
  00278	53		 push	 ebx
  00279	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0027f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00285	50		 push	 eax
  00286	ff d7		 call	 edi
  00288	50		 push	 eax
  00289	ff d6		 call	 esi

; 3349 : 			SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_SYSENC_TYPE_PAGE_TITLE"));

  0028b	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@EIMAJDHB@IDD_VOL_CREATION_WIZARD_DLG_SYSE@
  00290	e8 00 00 00 00	 call	 _GetString
  00295	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0029b	83 c4 04	 add	 esp, 4
  0029e	50		 push	 eax
  0029f	52		 push	 edx
  002a0	ff d6		 call	 esi

; 3350 : 
; 3351 : 			SendMessage (GetDlgItem (hwndDlg, IDC_SYSENC_HIDDEN), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  002a2	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserBoldFont
  002a7	6a 01		 push	 1
  002a9	50		 push	 eax
  002aa	6a 30		 push	 48			; 00000030H
  002ac	68 49 04 00 00	 push	 1097			; 00000449H
  002b1	53		 push	 ebx
  002b2	ff d7		 call	 edi
  002b4	50		 push	 eax
  002b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3352 : 			SendMessage (GetDlgItem (hwndDlg, IDC_SYSENC_NORMAL), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  002bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hUserBoldFont
  002c1	6a 01		 push	 1
  002c3	51		 push	 ecx
  002c4	6a 30		 push	 48			; 00000030H
  002c6	68 48 04 00 00	 push	 1096			; 00000448H
  002cb	53		 push	 ebx
  002cc	ff d7		 call	 edi
  002ce	50		 push	 eax
  002cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3353 : 
; 3354 : 			CheckButton (GetDlgItem (hwndDlg, bHiddenOS ? IDC_SYSENC_HIDDEN : IDC_SYSENC_NORMAL));

  002d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  002db	f7 da		 neg	 edx
  002dd	1b d2		 sbb	 edx, edx
  002df	f7 da		 neg	 edx
  002e1	81 c2 48 04 00
	00		 add	 edx, 1096		; 00000448H
  002e7	52		 push	 edx
  002e8	53		 push	 ebx
  002e9	ff d7		 call	 edi
  002eb	50		 push	 eax
  002ec	e8 00 00 00 00	 call	 _CheckButton

; 3355 : 
; 3356 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SYSENC_HIDDEN_TYPE_HELP"));

  002f1	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FECPKDFP@SYSENC_HIDDEN_TYPE_HELP?$AA@
  002f6	e8 00 00 00 00	 call	 _GetString
  002fb	83 c4 08	 add	 esp, 8
  002fe	50		 push	 eax
  002ff	68 eb 03 00 00	 push	 1003			; 000003ebH
  00304	53		 push	 ebx
  00305	ff d7		 call	 edi
  00307	50		 push	 eax
  00308	ff d6		 call	 esi

; 3357 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP_SYSENC_NORMAL), GetString ("SYSENC_NORMAL_TYPE_HELP"));

  0030a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@EEMGDNEH@SYSENC_NORMAL_TYPE_HELP?$AA@
  0030f	e8 00 00 00 00	 call	 _GetString
  00314	83 c4 04	 add	 esp, 4
  00317	50		 push	 eax
  00318	68 4a 04 00 00	 push	 1098			; 0000044aH
  0031d	53		 push	 ebx
  0031e	ff d7		 call	 edi
  00320	50		 push	 eax
  00321	ff d6		 call	 esi

; 3358 : 
; 3359 : 			ToHyperlink (hwndDlg, IDC_HIDDEN_SYSENC_INFO_LINK);

  00323	68 4b 04 00 00	 push	 1099			; 0000044bH
  00328	53		 push	 ebx
  00329	e8 00 00 00 00	 call	 _ToHyperlink
  0032e	83 c4 08	 add	 esp, 8

; 3360 : 
; 3361 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  00331	6a 01		 push	 1
  00333	68 10 04 00 00	 push	 1040			; 00000410H
  00338	53		 push	 ebx
  00339	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0033f	50		 push	 eax
  00340	ff d7		 call	 edi
  00342	50		 push	 eax
  00343	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3362 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), !bDirectSysEncMode);

  00349	33 c0		 xor	 eax, eax
  0034b	39 05 00 00 00
	00		 cmp	 DWORD PTR ?bDirectSysEncMode@@3HA, eax ; bDirectSysEncMode
  00351	0f 94 c0	 sete	 al
  00354	50		 push	 eax
  00355	68 11 04 00 00	 push	 1041			; 00000411H
  0035a	53		 push	 ebx
  0035b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00361	50		 push	 eax
  00362	ff d7		 call	 edi
  00364	50		 push	 eax
  00365	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3363 : 
; 3364 : 			SetWindowTextW (GetDlgItem (MainDlg, IDC_NEXT), GetString ("NEXT"));

  0036b	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00370	e8 00 00 00 00	 call	 _GetString
  00375	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0037b	83 c4 04	 add	 esp, 4
  0037e	50		 push	 eax
  0037f	68 10 04 00 00	 push	 1040			; 00000410H
  00384	51		 push	 ecx
  00385	ff d7		 call	 edi
  00387	50		 push	 eax
  00388	ff d6		 call	 esi

; 3365 : 			SetWindowTextW (GetDlgItem (MainDlg, IDC_PREV), GetString ("PREV"));

  0038a	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  0038f	e8 00 00 00 00	 call	 _GetString
  00394	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0039a	83 c4 04	 add	 esp, 4
  0039d	50		 push	 eax
  0039e	68 11 04 00 00	 push	 1041			; 00000411H
  003a3	52		 push	 edx
  003a4	ff d7		 call	 edi
  003a6	50		 push	 eax
  003a7	ff d6		 call	 esi

; 3366 : 			SetWindowTextW (GetDlgItem (MainDlg, IDCANCEL), GetString ("CANCEL"));

  003a9	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  003ae	e8 00 00 00 00	 call	 _GetString
  003b3	83 c4 04	 add	 esp, 4
  003b6	50		 push	 eax
  003b7	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  003bc	6a 02		 push	 2

; 4668 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  003be	50		 push	 eax
  003bf	ff d7		 call	 edi
  003c1	50		 push	 eax
  003c2	ff d6		 call	 esi
  003c4	33 c0		 xor	 eax, eax
  003c6	e9 99 4f 00 00	 jmp	 $LN342@PageDialog
$LN334@PageDialog:

; 3367 : 			break;
; 3368 : 
; 3369 : 		case SYSENC_HIDDEN_OS_REQ_CHECK_PAGE:
; 3370 : 
; 3371 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_TITLE"));

  003cb	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@CLMIJGGF@SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_@
  003d0	e8 00 00 00 00	 call	 _GetString
  003d5	83 c4 04	 add	 esp, 4
  003d8	50		 push	 eax
  003d9	68 e8 03 00 00	 push	 1000			; 000003e8H
  003de	53		 push	 ebx
  003df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  003e5	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  003eb	50		 push	 eax
  003ec	ff d7		 call	 edi
  003ee	50		 push	 eax
  003ef	ff d6		 call	 esi

; 3372 : //			SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_TITLE"));
; 3373 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_HELP"));

  003f1	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@GBPOCIAL@SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_@
  003f6	e8 00 00 00 00	 call	 _GetString
  003fb	83 c4 04	 add	 esp, 4
  003fe	50		 push	 eax
  003ff	68 eb 03 00 00	 push	 1003			; 000003ebH
  00404	53		 push	 ebx
  00405	ff d7		 call	 edi
  00407	50		 push	 eax
  00408	ff d6		 call	 esi

; 3374 : 			SetWindowTextW (GetDlgItem (MainDlg, IDC_NEXT), GetString ("NEXT"));

  0040a	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  0040f	e8 00 00 00 00	 call	 _GetString
  00414	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0041a	83 c4 04	 add	 esp, 4
  0041d	50		 push	 eax
  0041e	68 10 04 00 00	 push	 1040			; 00000410H
  00423	51		 push	 ecx
  00424	ff d7		 call	 edi
  00426	50		 push	 eax
  00427	ff d6		 call	 esi

; 3375 : 			SetWindowTextW (GetDlgItem (MainDlg, IDC_PREV), GetString ("PREV"));

  00429	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  0042e	e8 00 00 00 00	 call	 _GetString
  00433	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00439	83 c4 04	 add	 esp, 4
  0043c	50		 push	 eax
  0043d	68 11 04 00 00	 push	 1041			; 00000411H
  00442	52		 push	 edx
  00443	ff d7		 call	 edi
  00445	50		 push	 eax
  00446	ff d6		 call	 esi

; 3376 : 			SetWindowTextW (GetDlgItem (MainDlg, IDCANCEL), GetString ("CANCEL"));

  00448	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  0044d	e8 00 00 00 00	 call	 _GetString
  00452	83 c4 04	 add	 esp, 4
  00455	50		 push	 eax
  00456	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0045b	6a 02		 push	 2
  0045d	50		 push	 eax
  0045e	ff d7		 call	 edi
  00460	50		 push	 eax
  00461	ff d6		 call	 esi

; 3377 : 
; 3378 : 			EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), TRUE);

  00463	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00469	6a 01		 push	 1
  0046b	68 10 04 00 00	 push	 1040			; 00000410H
  00470	51		 push	 ecx
  00471	ff d7		 call	 edi
  00473	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  00479	50		 push	 eax
  0047a	ff d6		 call	 esi

; 3379 : 			EnableWindow (GetDlgItem (MainDlg, IDC_PREV), bDirectSysEncModeCommand != SYSENC_COMMAND_CREATE_HIDDEN_OS && bDirectSysEncModeCommand != SYSENC_COMMAND_CREATE_HIDDEN_OS_ELEV);

  0047c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bDirectSysEncModeCommand@@3HA ; bDirectSysEncModeCommand
  00481	83 f8 05	 cmp	 eax, 5
  00484	74 0c		 je	 SHORT $LN344@PageDialog
  00486	83 f8 06	 cmp	 eax, 6
  00489	74 07		 je	 SHORT $LN344@PageDialog
  0048b	b8 01 00 00 00	 mov	 eax, 1
  00490	eb 02		 jmp	 SHORT $LN345@PageDialog
$LN344@PageDialog:
  00492	33 c0		 xor	 eax, eax
$LN345@PageDialog:
  00494	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0049a	50		 push	 eax
  0049b	68 11 04 00 00	 push	 1041			; 00000411H
  004a0	52		 push	 edx
  004a1	ff d7		 call	 edi
  004a3	50		 push	 eax
  004a4	ff d6		 call	 esi

; 3380 : 
; 3381 : 			ToHyperlink (hwndDlg, IDC_HIDDEN_SYSENC_INFO_LINK);

  004a6	68 4b 04 00 00	 push	 1099			; 0000044bH
  004ab	53		 push	 ebx
  004ac	e8 00 00 00 00	 call	 _ToHyperlink
  004b1	83 c4 08	 add	 esp, 8

; 4280 : 				return 0;

  004b4	33 c0		 xor	 eax, eax
  004b6	e9 a9 4e 00 00	 jmp	 $LN342@PageDialog
$LN333@PageDialog:

; 3382 : 			break;
; 3383 : 
; 3384 : 		case SYSENC_SPAN_PAGE:
; 3385 : 
; 3386 : 			SendMessage (GetDlgItem (hwndDlg, IDC_WHOLE_SYS_DRIVE), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  004bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserBoldFont
  004c0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  004c6	6a 01		 push	 1
  004c8	50		 push	 eax
  004c9	6a 30		 push	 48			; 00000030H
  004cb	68 2b 04 00 00	 push	 1067			; 0000042bH
  004d0	53		 push	 ebx
  004d1	ff d7		 call	 edi
  004d3	50		 push	 eax
  004d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3387 : 			SendMessage (GetDlgItem (hwndDlg, IDC_SYS_PARTITION), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  004da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hUserBoldFont
  004e0	6a 01		 push	 1
  004e2	51		 push	 ecx
  004e3	6a 30		 push	 48			; 00000030H
  004e5	68 2c 04 00 00	 push	 1068			; 0000042cH
  004ea	53		 push	 ebx
  004eb	ff d7		 call	 edi
  004ed	50		 push	 eax
  004ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3388 : 
; 3389 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYS_ENCRYPTION_SPAN_TITLE"));

  004f4	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@FBGFJBLB@SYS_ENCRYPTION_SPAN_TITLE?$AA@
  004f9	e8 00 00 00 00	 call	 _GetString
  004fe	83 c4 04	 add	 esp, 4
  00501	50		 push	 eax
  00502	68 e8 03 00 00	 push	 1000			; 000003e8H
  00507	53		 push	 ebx
  00508	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0050e	50		 push	 eax
  0050f	ff d7		 call	 edi
  00511	50		 push	 eax
  00512	ff d6		 call	 esi

; 3390 : 			SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_SYS_ENCRYPTION_SPAN_TITLE"));

  00514	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@OHMIACK@IDD_VOL_CREATION_WIZARD_DLG_SYS_@
  00519	e8 00 00 00 00	 call	 _GetString
  0051e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00524	83 c4 04	 add	 esp, 4
  00527	50		 push	 eax
  00528	52		 push	 edx
  00529	ff d6		 call	 esi

; 3391 : 
; 3392 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDT_WHOLE_SYS_DRIVE), GetString ("SYS_ENCRYPTION_SPAN_WHOLE_SYS_DRIVE_HELP"));

  0052b	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@CMOPFEFD@SYS_ENCRYPTION_SPAN_WHOLE_SYS_DR@
  00530	e8 00 00 00 00	 call	 _GetString
  00535	83 c4 04	 add	 esp, 4
  00538	50		 push	 eax
  00539	68 2d 04 00 00	 push	 1069			; 0000042dH
  0053e	53		 push	 ebx
  0053f	ff d7		 call	 edi
  00541	50		 push	 eax
  00542	ff d6		 call	 esi

; 3393 : 
; 3394 : 			CheckButton (GetDlgItem (hwndDlg, bWholeSysDrive ? IDC_WHOLE_SYS_DRIVE : IDC_SYS_PARTITION));

  00544	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bWholeSysDrive@@3HA ; bWholeSysDrive
  00549	f7 d8		 neg	 eax
  0054b	1b c0		 sbb	 eax, eax
  0054d	05 2c 04 00 00	 add	 eax, 1068		; 0000042cH
  00552	50		 push	 eax
  00553	53		 push	 ebx
  00554	ff d7		 call	 edi
  00556	50		 push	 eax
  00557	e8 00 00 00 00	 call	 _CheckButton

; 3395 : 
; 3396 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  0055c	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00561	e8 00 00 00 00	 call	 _GetString
  00566	83 c4 08	 add	 esp, 8
  00569	50		 push	 eax
  0056a	68 10 04 00 00	 push	 1040			; 00000410H
  0056f	53		 push	 ebx
  00570	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00576	50		 push	 eax
  00577	ff d7		 call	 edi
  00579	50		 push	 eax
  0057a	ff d6		 call	 esi

; 3397 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  0057c	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  00581	e8 00 00 00 00	 call	 _GetString
  00586	83 c4 04	 add	 esp, 4
  00589	50		 push	 eax
  0058a	68 11 04 00 00	 push	 1041			; 00000411H
  0058f	53		 push	 ebx
  00590	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00596	50		 push	 eax
  00597	ff d7		 call	 edi
  00599	50		 push	 eax
  0059a	ff d6		 call	 esi

; 3398 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("CANCEL"));

  0059c	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  005a1	e8 00 00 00 00	 call	 _GetString
  005a6	83 c4 04	 add	 esp, 4
  005a9	50		 push	 eax
  005aa	6a 02		 push	 2
  005ac	53		 push	 ebx
  005ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  005b3	50		 push	 eax
  005b4	ff d7		 call	 edi
  005b6	50		 push	 eax
  005b7	ff d6		 call	 esi

; 3399 : 
; 3400 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  005b9	6a 01		 push	 1
  005bb	68 10 04 00 00	 push	 1040			; 00000410H
  005c0	53		 push	 ebx
  005c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  005c7	50		 push	 eax

; 3401 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);
; 3402 : 			break;

  005c8	e9 f0 36 00 00	 jmp	 $LN697@PageDialog
$LN332@PageDialog:

; 3403 : 
; 3404 : 
; 3405 : 		case SYSENC_PRE_DRIVE_ANALYSIS_PAGE:
; 3406 : 
; 3407 : 			Init2RadButtonPageYesNo (SysEncDetectHiddenSectors);

  005cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SysEncDetectHiddenSectors@@3HA ; SysEncDetectHiddenSectors
  005d2	e8 00 00 00 00	 call	 ?Init2RadButtonPageYesNo@@YAXH@Z ; Init2RadButtonPageYesNo

; 3408 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYSENC_PRE_DRIVE_ANALYSIS_TITLE"));

  005d7	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IIEHPPGP@SYSENC_PRE_DRIVE_ANALYSIS_TITLE?$AA@
  005dc	e8 00 00 00 00	 call	 _GetString
  005e1	83 c4 04	 add	 esp, 4
  005e4	50		 push	 eax
  005e5	68 e8 03 00 00	 push	 1000			; 000003e8H
  005ea	53		 push	 ebx
  005eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  005f1	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  005f7	50		 push	 eax
  005f8	ff d7		 call	 edi
  005fa	50		 push	 eax
  005fb	ff d6		 call	 esi

; 3409 : 			SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_SYSENC_PRE_DRIVE_ANALYSIS_TITLE"));

  005fd	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@OIJHNGEF@IDD_VOL_CREATION_WIZARD_DLG_SYSE@
  00602	e8 00 00 00 00	 call	 _GetString
  00607	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0060d	83 c4 04	 add	 esp, 4
  00610	50		 push	 eax
  00611	51		 push	 ecx
  00612	ff d6		 call	 esi

; 3410 : 
; 3411 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SYSENC_PRE_DRIVE_ANALYSIS_HELP"));

  00614	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@FCJHFGGJ@SYSENC_PRE_DRIVE_ANALYSIS_HELP?$AA@
  00619	e8 00 00 00 00	 call	 _GetString
  0061e	83 c4 04	 add	 esp, 4
  00621	50		 push	 eax
  00622	68 eb 03 00 00	 push	 1003			; 000003ebH
  00627	53		 push	 ebx

; 4668 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  00628	ff d7		 call	 edi
  0062a	50		 push	 eax
  0062b	ff d6		 call	 esi
  0062d	33 c0		 xor	 eax, eax
  0062f	e9 30 4d 00 00	 jmp	 $LN342@PageDialog
$LN331@PageDialog:

; 3412 : 			break;
; 3413 : 
; 3414 : 
; 3415 : 		case SYSENC_DRIVE_ANALYSIS_PAGE:
; 3416 : 
; 3417 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYSENC_DRIVE_ANALYSIS_TITLE"));

  00634	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@EGLOODHA@SYSENC_DRIVE_ANALYSIS_TITLE?$AA@
  00639	e8 00 00 00 00	 call	 _GetString
  0063e	83 c4 04	 add	 esp, 4
  00641	50		 push	 eax
  00642	68 e8 03 00 00	 push	 1000			; 000003e8H
  00647	53		 push	 ebx
  00648	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0064e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00654	50		 push	 eax
  00655	ff d7		 call	 edi
  00657	50		 push	 eax
  00658	ff d6		 call	 esi

; 3418 : 			SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_SYSENC_DRIVE_ANALYSIS_TITLE"));

  0065a	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@LOLLMPEK@IDD_VOL_CREATION_WIZARD_DLG_SYSE@
  0065f	e8 00 00 00 00	 call	 _GetString
  00664	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0066a	83 c4 04	 add	 esp, 4
  0066d	50		 push	 eax
  0066e	52		 push	 edx
  0066f	ff d6		 call	 esi

; 3419 : 
; 3420 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDT_SYSENC_DRIVE_ANALYSIS_INFO), GetString ("SYSENC_DRIVE_ANALYSIS_INFO"));

  00671	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@OAMDPDOH@SYSENC_DRIVE_ANALYSIS_INFO?$AA@
  00676	e8 00 00 00 00	 call	 _GetString
  0067b	83 c4 04	 add	 esp, 4
  0067e	50		 push	 eax
  0067f	68 47 04 00 00	 push	 1095			; 00000447H
  00684	53		 push	 ebx
  00685	ff d7		 call	 edi
  00687	50		 push	 eax
  00688	ff d6		 call	 esi

; 3421 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  0068a	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  0068f	e8 00 00 00 00	 call	 _GetString
  00694	83 c4 04	 add	 esp, 4
  00697	50		 push	 eax
  00698	68 10 04 00 00	 push	 1040			; 00000410H
  0069d	53		 push	 ebx
  0069e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  006a4	50		 push	 eax
  006a5	ff d7		 call	 edi
  006a7	50		 push	 eax
  006a8	ff d6		 call	 esi

; 3422 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  006aa	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  006af	e8 00 00 00 00	 call	 _GetString
  006b4	83 c4 04	 add	 esp, 4
  006b7	50		 push	 eax
  006b8	68 11 04 00 00	 push	 1041			; 00000411H
  006bd	53		 push	 ebx
  006be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  006c4	50		 push	 eax
  006c5	ff d7		 call	 edi
  006c7	50		 push	 eax
  006c8	ff d6		 call	 esi

; 3423 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("CANCEL"));

  006ca	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  006cf	e8 00 00 00 00	 call	 _GetString
  006d4	83 c4 04	 add	 esp, 4
  006d7	50		 push	 eax
  006d8	6a 02		 push	 2
  006da	53		 push	 ebx
  006db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  006e1	50		 push	 eax
  006e2	ff d7		 call	 edi
  006e4	50		 push	 eax
  006e5	ff d6		 call	 esi

; 3424 : 			EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), FALSE);

  006e7	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  006ec	6a 00		 push	 0
  006ee	68 10 04 00 00	 push	 1040			; 00000410H
  006f3	50		 push	 eax
  006f4	ff d7		 call	 edi
  006f6	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  006fc	50		 push	 eax
  006fd	ff d6		 call	 esi

; 3425 : 			EnableWindow (GetDlgItem (MainDlg, IDC_PREV), FALSE);

  006ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00705	6a 00		 push	 0
  00707	68 11 04 00 00	 push	 1041			; 00000411H
  0070c	51		 push	 ecx
  0070d	ff d7		 call	 edi
  0070f	50		 push	 eax
  00710	ff d6		 call	 esi

; 3426 : 			EnableWindow (GetDlgItem (MainDlg, IDCANCEL), FALSE);

  00712	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00718	6a 00		 push	 0
  0071a	6a 02		 push	 2
  0071c	52		 push	 edx
  0071d	ff d7		 call	 edi
  0071f	50		 push	 eax
  00720	ff d6		 call	 esi

; 3427 : 
; 3428 : 			LoadSettings (hwndDlg);

  00722	8b f3		 mov	 esi, ebx
  00724	e8 00 00 00 00	 call	 _LoadSettings

; 3429 : 
; 3430 : 			if (HiddenSectorDetectionStatus == 1)

  00729	be 01 00 00 00	 mov	 esi, 1
  0072e	39 35 00 00 00
	00		 cmp	 DWORD PTR _HiddenSectorDetectionStatus, esi
  00734	75 63		 jne	 SHORT $LN328@PageDialog

; 3431 : 			{
; 3432 : 				// Detection of hidden sectors was already in progress but it did not finish successfully.
; 3433 : 				// Ask the user if he wants to try again (to prevent repeated system freezing, etc.)
; 3434 : 
; 3435 : 				char *tmpStr[] = {0, "HIDDEN_SECTOR_DETECTION_FAILED_PREVIOUSLY", "SKIP_HIDDEN_SECTOR_DETECTION", "RETRY_HIDDEN_SECTOR_DETECTION", "IDC_EXIT", 0};

  00736	33 c0		 xor	 eax, eax

; 3436 : 				switch (AskMultiChoice ((void **) tmpStr, FALSE))

  00738	50		 push	 eax
  00739	89 45 b0	 mov	 DWORD PTR _tmpStr$133127[ebp], eax
  0073c	89 45 c4	 mov	 DWORD PTR _tmpStr$133127[ebp+20], eax
  0073f	8d 45 b0	 lea	 eax, DWORD PTR _tmpStr$133127[ebp]
  00742	50		 push	 eax
  00743	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _tmpStr$133127[ebp+4], OFFSET ??_C@_0CK@KEHMFNIA@HIDDEN_SECTOR_DETECTION_FAILED_P@
  0074a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _tmpStr$133127[ebp+8], OFFSET ??_C@_0BN@GHOENGPC@SKIP_HIDDEN_SECTOR_DETECTION?$AA@
  00751	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _tmpStr$133127[ebp+12], OFFSET ??_C@_0BO@OEFOGNPK@RETRY_HIDDEN_SECTOR_DETECTION?$AA@
  00758	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _tmpStr$133127[ebp+16], OFFSET ??_C@_08HBBNJJLH@IDC_EXIT?$AA@
  0075f	e8 00 00 00 00	 call	 _AskMultiChoice
  00764	83 c4 08	 add	 esp, 8
  00767	2b c6		 sub	 eax, esi
  00769	74 16		 je	 SHORT $LN327@PageDialog
  0076b	2b c6		 sub	 eax, esi
  0076d	74 2a		 je	 SHORT $LN328@PageDialog

; 3442 : 
; 3443 : 				case 2:
; 3444 : 					// Try again
; 3445 : 					break;
; 3446 : 
; 3447 : 				default:
; 3448 : 					EndMainDlg (MainDlg);

  0076f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  00775	e8 00 00 00 00	 call	 _EndMainDlg

; 3449 : 					return 0;

  0077a	33 c0		 xor	 eax, eax
  0077c	e9 e3 4b 00 00	 jmp	 $LN342@PageDialog
$LN327@PageDialog:

; 3437 : 				{
; 3438 : 				case 1:
; 3439 : 					// Do not try again
; 3440 : 					LoadPage (MainDlg, SYSENC_DRIVE_ANALYSIS_PAGE + 1);

  00781	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00787	6a 06		 push	 6
  00789	51		 push	 ecx
  0078a	e8 00 00 00 00	 call	 _LoadPage
  0078f	83 c4 08	 add	 esp, 8
$LN451@PageDialog:

; 3441 : 					return 0;

  00792	33 c0		 xor	 eax, eax
  00794	e9 cb 4b 00 00	 jmp	 $LN342@PageDialog
$LN328@PageDialog:

; 3450 : 				}
; 3451 : 			}
; 3452 : 
; 3453 : 			SetTimer (MainDlg, TIMER_ID_SYSENC_DRIVE_ANALYSIS_PROGRESS, TIMER_INTERVAL_SYSENC_DRIVE_ANALYSIS_PROGRESS, NULL);

  00799	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0079f	6a 00		 push	 0
  007a1	6a 64		 push	 100			; 00000064H
  007a3	68 03 01 00 00	 push	 259			; 00000103H
  007a8	52		 push	 edx
  007a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16

; 3454 : 			bSysEncDriveAnalysisInProgress = TRUE;

  007af	89 35 00 00 00
	00		 mov	 DWORD PTR ?bSysEncDriveAnalysisInProgress@@3HC, esi ; bSysEncDriveAnalysisInProgress

; 3455 : 			ArrowWaitCursor ();

  007b5	e8 00 00 00 00	 call	 _ArrowWaitCursor

; 3456 : 			SysEncDriveAnalysisStart = GetTickCount ();

  007ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 3457 : 			InitProgressBar (SYSENC_DRIVE_ANALYSIS_ETA, 0, FALSE, FALSE, FALSE, TRUE);

  007c0	56		 push	 esi
  007c1	6a 00		 push	 0
  007c3	6a 00		 push	 0
  007c5	6a 00		 push	 0
  007c7	6a 00		 push	 0
  007c9	6a 00		 push	 0
  007cb	6a 00		 push	 0
  007cd	68 80 a9 03 00	 push	 240000			; 0003a980H
  007d2	a3 00 00 00 00	 mov	 DWORD PTR ?SysEncDriveAnalysisStart@@3HA, eax ; SysEncDriveAnalysisStart
  007d7	e8 00 00 00 00	 call	 _InitProgressBar

; 3458 : 
; 3459 : 			_beginthread (sysEncDriveAnalysisThread, 0, hwndDlg);

  007dc	53		 push	 ebx
  007dd	6a 00		 push	 0
  007df	68 00 00 00 00	 push	 OFFSET _sysEncDriveAnalysisThread
  007e4	e8 00 00 00 00	 call	 __beginthread
  007e9	83 c4 2c	 add	 esp, 44			; 0000002cH

; 4280 : 				return 0;

  007ec	33 c0		 xor	 eax, eax
  007ee	e9 71 4b 00 00	 jmp	 $LN342@PageDialog
$LN324@PageDialog:

; 3460 : 
; 3461 : 			break;
; 3462 : 
; 3463 : 
; 3464 : 		case SYSENC_MULTI_BOOT_MODE_PAGE:
; 3465 : 
; 3466 : 			SendMessage (GetDlgItem (hwndDlg, IDC_SINGLE_BOOT), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  007f3	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserBoldFont
  007f8	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  007fe	6a 01		 push	 1
  00800	50		 push	 eax
  00801	6a 30		 push	 48			; 00000030H
  00803	68 34 04 00 00	 push	 1076			; 00000434H
  00808	53		 push	 ebx
  00809	ff d7		 call	 edi
  0080b	50		 push	 eax
  0080c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3467 : 			SendMessage (GetDlgItem (hwndDlg, IDC_MULTI_BOOT), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  00812	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hUserBoldFont
  00818	6a 01		 push	 1
  0081a	51		 push	 ecx
  0081b	6a 30		 push	 48			; 00000030H
  0081d	68 35 04 00 00	 push	 1077			; 00000435H
  00822	53		 push	 ebx
  00823	ff d7		 call	 edi
  00825	50		 push	 eax
  00826	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3468 : 
; 3469 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYS_MULTI_BOOT_MODE_TITLE"));

  0082c	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@NAIABFPC@SYS_MULTI_BOOT_MODE_TITLE?$AA@
  00831	e8 00 00 00 00	 call	 _GetString
  00836	83 c4 04	 add	 esp, 4
  00839	50		 push	 eax
  0083a	68 e8 03 00 00	 push	 1000			; 000003e8H
  0083f	53		 push	 ebx
  00840	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00846	50		 push	 eax
  00847	ff d7		 call	 edi
  00849	50		 push	 eax
  0084a	ff d6		 call	 esi

; 3470 : 			SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_SYS_MULTI_BOOT_MODE_TITLE"));

  0084c	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@IPJJAEGJ@IDD_VOL_CREATION_WIZARD_DLG_SYS_@
  00851	e8 00 00 00 00	 call	 _GetString
  00856	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0085c	83 c4 04	 add	 esp, 4
  0085f	50		 push	 eax
  00860	52		 push	 edx
  00861	ff d6		 call	 esi

; 3471 : 
; 3472 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  00863	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00868	e8 00 00 00 00	 call	 _GetString
  0086d	83 c4 04	 add	 esp, 4
  00870	50		 push	 eax
  00871	68 10 04 00 00	 push	 1040			; 00000410H
  00876	53		 push	 ebx
  00877	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0087d	50		 push	 eax
  0087e	ff d7		 call	 edi
  00880	50		 push	 eax
  00881	ff d6		 call	 esi

; 3473 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  00883	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  00888	e8 00 00 00 00	 call	 _GetString
  0088d	83 c4 04	 add	 esp, 4
  00890	50		 push	 eax
  00891	68 11 04 00 00	 push	 1041			; 00000411H
  00896	53		 push	 ebx
  00897	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0089d	50		 push	 eax
  0089e	ff d7		 call	 edi
  008a0	50		 push	 eax
  008a1	ff d6		 call	 esi

; 3474 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("CANCEL"));

  008a3	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  008a8	e8 00 00 00 00	 call	 _GetString
  008ad	83 c4 04	 add	 esp, 4
  008b0	50		 push	 eax
  008b1	6a 02		 push	 2
  008b3	53		 push	 ebx
  008b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  008ba	50		 push	 eax
  008bb	ff d7		 call	 edi
  008bd	50		 push	 eax
  008be	ff d6		 call	 esi

; 3475 : 
; 3476 : 			RefreshMultiBootControls (hwndDlg);

  008c0	8b f3		 mov	 esi, ebx
  008c2	e8 00 00 00 00	 call	 ?RefreshMultiBootControls@@YAXPAUHWND__@@@Z ; RefreshMultiBootControls

; 3477 : 
; 3478 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), nMultiBoot > 0);

  008c7	33 c0		 xor	 eax, eax
  008c9	39 05 00 00 00
	00		 cmp	 DWORD PTR ?nMultiBoot@@3HA, eax ; nMultiBoot
  008cf	0f 9f c0	 setg	 al
  008d2	50		 push	 eax
  008d3	68 10 04 00 00	 push	 1040			; 00000410H
  008d8	53		 push	 ebx
  008d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  008df	50		 push	 eax
  008e0	ff d7		 call	 edi
  008e2	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  008e8	50		 push	 eax
  008e9	ff d6		 call	 esi

; 3479 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  008eb	6a 01		 push	 1
  008ed	68 11 04 00 00	 push	 1041			; 00000411H
  008f2	53		 push	 ebx
  008f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  008f9	50		 push	 eax
  008fa	ff d7		 call	 edi
  008fc	50		 push	 eax
  008fd	ff d6		 call	 esi

; 3480 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), TRUE);

  008ff	6a 01		 push	 1
  00901	6a 02		 push	 2

; 4668 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  00903	53		 push	 ebx
  00904	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0090a	50		 push	 eax
  0090b	ff d7		 call	 edi
  0090d	50		 push	 eax
  0090e	ff d6		 call	 esi
  00910	33 c0		 xor	 eax, eax
  00912	e9 4d 4a 00 00	 jmp	 $LN342@PageDialog
$LN323@PageDialog:

; 3481 : 			break;
; 3482 : 
; 3483 : 
; 3484 : 		case SYSENC_MULTI_BOOT_SYS_EQ_BOOT_PAGE:
; 3485 : 
; 3486 : 			Init2RadButtonPageYesNo (SysEncMultiBootCfg.SystemOnBootDrive);

  00917	a1 10 00 00 00	 mov	 eax, DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A+16
  0091c	e8 00 00 00 00	 call	 ?Init2RadButtonPageYesNo@@YAXH@Z ; Init2RadButtonPageYesNo

; 3487 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYSENC_MULTI_BOOT_SYS_EQ_BOOT_TITLE"));

  00921	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@HOKCHJKA@SYSENC_MULTI_BOOT_SYS_EQ_BOOT_TI@
  00926	e8 00 00 00 00	 call	 _GetString
  0092b	83 c4 04	 add	 esp, 4
  0092e	50		 push	 eax
  0092f	68 e8 03 00 00	 push	 1000			; 000003e8H
  00934	53		 push	 ebx
  00935	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0093b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00941	50		 push	 eax
  00942	ff d7		 call	 edi
  00944	50		 push	 eax
  00945	ff d6		 call	 esi

; 3488 : //			SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_SYSENC_MULTI_BOOT_SYS_EQ_BOOT_TITLE"));
; 3489 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SYSENC_MULTI_BOOT_SYS_EQ_BOOT_HELP"));

  00947	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@ODHMCLM@SYSENC_MULTI_BOOT_SYS_EQ_BOOT_HE@
  0094c	e8 00 00 00 00	 call	 _GetString
  00951	83 c4 04	 add	 esp, 4
  00954	50		 push	 eax
  00955	68 eb 03 00 00	 push	 1003			; 000003ebH
  0095a	53		 push	 ebx

; 4668 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  0095b	ff d7		 call	 edi
  0095d	50		 push	 eax
  0095e	ff d6		 call	 esi
  00960	33 c0		 xor	 eax, eax
  00962	e9 fd 49 00 00	 jmp	 $LN342@PageDialog
$LN322@PageDialog:

; 3490 : 			break;
; 3491 : 
; 3492 : 
; 3493 : 		case SYSENC_MULTI_BOOT_NBR_SYS_DRIVES_PAGE:
; 3494 : 
; 3495 : 			SetWindowTextW (GetDlgItem (hCurPage, IDC_CHOICE1), GetString ("DIGIT_ONE"));

  00967	68 00 00 00 00	 push	 OFFSET ??_C@_09BCPPDPEL@DIGIT_ONE?$AA@
  0096c	e8 00 00 00 00	 call	 _GetString
  00971	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  00977	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  0097d	83 c4 04	 add	 esp, 4
  00980	50		 push	 eax
  00981	68 dd 13 00 00	 push	 5085			; 000013ddH
  00986	51		 push	 ecx
  00987	ff d7		 call	 edi
  00989	50		 push	 eax
  0098a	ff d6		 call	 esi

; 3496 : 			SetWindowTextW (GetDlgItem (hCurPage, IDC_CHOICE2), GetString ("TWO_OR_MORE"));

  0098c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BAIFEFDO@TWO_OR_MORE?$AA@
  00991	e8 00 00 00 00	 call	 _GetString
  00996	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  0099c	83 c4 04	 add	 esp, 4
  0099f	50		 push	 eax
  009a0	68 df 13 00 00	 push	 5087			; 000013dfH
  009a5	52		 push	 edx
  009a6	ff d7		 call	 edi
  009a8	50		 push	 eax
  009a9	ff d6		 call	 esi

; 3497 : 
; 3498 : 			SetWindowTextW (GetDlgItem (MainDlg, IDC_NEXT), GetString ("NEXT"));

  009ab	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  009b0	e8 00 00 00 00	 call	 _GetString
  009b5	83 c4 04	 add	 esp, 4
  009b8	50		 push	 eax
  009b9	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  009be	68 10 04 00 00	 push	 1040			; 00000410H
  009c3	50		 push	 eax
  009c4	ff d7		 call	 edi
  009c6	50		 push	 eax
  009c7	ff d6		 call	 esi

; 3499 : 			SetWindowTextW (GetDlgItem (MainDlg, IDC_PREV), GetString ("PREV"));

  009c9	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  009ce	e8 00 00 00 00	 call	 _GetString
  009d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  009d9	83 c4 04	 add	 esp, 4
  009dc	50		 push	 eax
  009dd	68 11 04 00 00	 push	 1041			; 00000411H
  009e2	51		 push	 ecx
  009e3	ff d7		 call	 edi
  009e5	50		 push	 eax
  009e6	ff d6		 call	 esi

; 3500 : 			SetWindowTextW (GetDlgItem (MainDlg, IDCANCEL), GetString ("CANCEL"));

  009e8	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  009ed	e8 00 00 00 00	 call	 _GetString
  009f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  009f8	83 c4 04	 add	 esp, 4
  009fb	50		 push	 eax
  009fc	6a 02		 push	 2
  009fe	52		 push	 edx
  009ff	ff d7		 call	 edi
  00a01	50		 push	 eax
  00a02	ff d6		 call	 esi

; 3501 : 
; 3502 : 			EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), SysEncMultiBootCfg.NumberOfSysDrives > 0);

  00a04	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00a0a	33 c0		 xor	 eax, eax
  00a0c	39 05 00 00 00
	00		 cmp	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A, eax
  00a12	0f 9f c0	 setg	 al
  00a15	50		 push	 eax
  00a16	68 10 04 00 00	 push	 1040			; 00000410H
  00a1b	51		 push	 ecx
  00a1c	ff d7		 call	 edi
  00a1e	50		 push	 eax
  00a1f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3503 : 			EnableWindow (GetDlgItem (MainDlg, IDC_PREV), TRUE);

  00a25	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00a2b	6a 01		 push	 1
  00a2d	68 11 04 00 00	 push	 1041			; 00000411H
  00a32	52		 push	 edx
  00a33	ff d7		 call	 edi
  00a35	50		 push	 eax
  00a36	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3504 : 
; 3505 : 			if (SysEncMultiBootCfg.NumberOfSysDrives == 2)

  00a3c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A

; 3506 : 				Update2RadButtonPage (0); // 2 or more drives contain an OS

  00a41	6a 00		 push	 0
  00a43	83 f8 02	 cmp	 eax, 2
  00a46	75 32		 jne	 SHORT $LN321@PageDialog
  00a48	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00a4d	6a 00		 push	 0
  00a4f	68 f1 00 00 00	 push	 241			; 000000f1H
  00a54	68 dd 13 00 00	 push	 5085			; 000013ddH
  00a59	50		 push	 eax
  00a5a	ff d7		 call	 edi
  00a5c	50		 push	 eax
  00a5d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00a63	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  00a69	6a 00		 push	 0
  00a6b	6a 01		 push	 1
  00a6d	68 f1 00 00 00	 push	 241			; 000000f1H
  00a72	68 df 13 00 00	 push	 5087			; 000013dfH
  00a77	51		 push	 ecx
  00a78	eb 67		 jmp	 SHORT $LN700@PageDialog
$LN321@PageDialog:

; 3507 : 			else if (SysEncMultiBootCfg.NumberOfSysDrives == 1)

  00a7a	83 f8 01	 cmp	 eax, 1
  00a7d	75 31		 jne	 SHORT $LN319@PageDialog

; 3508 : 				Update2RadButtonPage (1); // Only 1 drive contains an OS

  00a7f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00a85	50		 push	 eax
  00a86	68 f1 00 00 00	 push	 241			; 000000f1H
  00a8b	68 dd 13 00 00	 push	 5085			; 000013ddH
  00a90	52		 push	 edx
  00a91	ff d7		 call	 edi
  00a93	50		 push	 eax
  00a94	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00a9a	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00a9f	6a 00		 push	 0
  00aa1	6a 00		 push	 0
  00aa3	68 f1 00 00 00	 push	 241			; 000000f1H
  00aa8	68 df 13 00 00	 push	 5087			; 000013dfH
  00aad	50		 push	 eax

; 3509 : 			else

  00aae	eb 31		 jmp	 SHORT $LN700@PageDialog
$LN319@PageDialog:

; 3510 : 				Update2RadButtonPage (-1);

  00ab0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  00ab6	6a 00		 push	 0
  00ab8	68 f1 00 00 00	 push	 241			; 000000f1H
  00abd	68 dd 13 00 00	 push	 5085			; 000013ddH
  00ac2	51		 push	 ecx
  00ac3	ff d7		 call	 edi
  00ac5	50		 push	 eax
  00ac6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00acc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00ad2	6a 00		 push	 0
  00ad4	6a 00		 push	 0
  00ad6	68 f1 00 00 00	 push	 241			; 000000f1H
  00adb	68 df 13 00 00	 push	 5087			; 000013dfH
  00ae0	52		 push	 edx
$LN700@PageDialog:
  00ae1	ff d7		 call	 edi
  00ae3	50		 push	 eax
  00ae4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3511 : 
; 3512 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYSENC_MULTI_BOOT_NBR_SYS_DRIVES_TITLE"));

  00aea	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@IMKPMBEM@SYSENC_MULTI_BOOT_NBR_SYS_DRIVES@
  00aef	e8 00 00 00 00	 call	 _GetString
  00af4	83 c4 04	 add	 esp, 4
  00af7	50		 push	 eax
  00af8	68 e8 03 00 00	 push	 1000			; 000003e8H
  00afd	53		 push	 ebx
  00afe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00b04	50		 push	 eax
  00b05	ff d7		 call	 edi
  00b07	50		 push	 eax
  00b08	ff d6		 call	 esi

; 3513 : //			SetWindowTextW (hwndDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_SYSENC_MULTI_BOOT_NBR_SYS_DRIVES_TITLE"));
; 3514 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SYSENC_MULTI_BOOT_NBR_SYS_DRIVES_HELP"));

  00b0a	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@GBIPGAOP@SYSENC_MULTI_BOOT_NBR_SYS_DRIVES@
  00b0f	e8 00 00 00 00	 call	 _GetString
  00b14	83 c4 04	 add	 esp, 4
  00b17	50		 push	 eax
  00b18	68 eb 03 00 00	 push	 1003			; 000003ebH
  00b1d	53		 push	 ebx

; 4668 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  00b1e	ff d7		 call	 edi
  00b20	50		 push	 eax
  00b21	ff d6		 call	 esi
  00b23	33 c0		 xor	 eax, eax
  00b25	e9 3a 48 00 00	 jmp	 $LN342@PageDialog
$LN317@PageDialog:

; 3515 : 			break;
; 3516 : 
; 3517 : 
; 3518 : 		case SYSENC_MULTI_BOOT_ADJACENT_SYS_PAGE:
; 3519 : 
; 3520 : 			Init2RadButtonPageYesNo (SysEncMultiBootCfg.MultipleSystemsOnDrive);

  00b2a	a1 04 00 00 00	 mov	 eax, DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A+4
  00b2f	e8 00 00 00 00	 call	 ?Init2RadButtonPageYesNo@@YAXH@Z ; Init2RadButtonPageYesNo

; 3521 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYSENC_MULTI_BOOT_ADJACENT_SYS_TITLE"));

  00b34	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@MINJEEM@SYSENC_MULTI_BOOT_ADJACENT_SYS_T@
  00b39	e8 00 00 00 00	 call	 _GetString
  00b3e	83 c4 04	 add	 esp, 4
  00b41	50		 push	 eax
  00b42	68 e8 03 00 00	 push	 1000			; 000003e8H
  00b47	53		 push	 ebx
  00b48	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00b4e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00b54	50		 push	 eax
  00b55	ff d7		 call	 edi
  00b57	50		 push	 eax
  00b58	ff d6		 call	 esi

; 3522 : //			SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_SYSENC_MULTI_BOOT_ADJACENT_SYS_TITLE"));
; 3523 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SYSENC_MULTI_BOOT_ADJACENT_SYS_HELP"));

  00b5a	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@CGLNKLHK@SYSENC_MULTI_BOOT_ADJACENT_SYS_H@
  00b5f	e8 00 00 00 00	 call	 _GetString
  00b64	83 c4 04	 add	 esp, 4
  00b67	50		 push	 eax
  00b68	68 eb 03 00 00	 push	 1003			; 000003ebH
  00b6d	53		 push	 ebx

; 4668 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  00b6e	ff d7		 call	 edi
  00b70	50		 push	 eax
  00b71	ff d6		 call	 esi
  00b73	33 c0		 xor	 eax, eax
  00b75	e9 ea 47 00 00	 jmp	 $LN342@PageDialog
$LN316@PageDialog:

; 3524 : 			break;
; 3525 : 
; 3526 : 
; 3527 : 		case SYSENC_MULTI_BOOT_NONWIN_BOOT_LOADER_PAGE:
; 3528 : 
; 3529 : 			Init2RadButtonPageYesNo (SysEncMultiBootCfg.BootLoaderBrand);

  00b7a	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A+12
  00b7f	e8 00 00 00 00	 call	 ?Init2RadButtonPageYesNo@@YAXH@Z ; Init2RadButtonPageYesNo

; 3530 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYSENC_MULTI_BOOT_NONWIN_BOOT_LOADER_TITLE"));

  00b84	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@PKMEBLJM@SYSENC_MULTI_BOOT_NONWIN_BOOT_LO@
  00b89	e8 00 00 00 00	 call	 _GetString
  00b8e	83 c4 04	 add	 esp, 4
  00b91	50		 push	 eax
  00b92	68 e8 03 00 00	 push	 1000			; 000003e8H
  00b97	53		 push	 ebx
  00b98	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00b9e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00ba4	50		 push	 eax
  00ba5	ff d7		 call	 edi
  00ba7	50		 push	 eax
  00ba8	ff d6		 call	 esi

; 3531 : //			SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_SYSENC_MULTI_BOOT_NONWIN_BOOT_LOADER_TITLE"));
; 3532 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SYSENC_MULTI_BOOT_NONWIN_BOOT_LOADER_HELP"));

  00baa	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@NGBECAKP@SYSENC_MULTI_BOOT_NONWIN_BOOT_LO@
  00baf	e8 00 00 00 00	 call	 _GetString
  00bb4	83 c4 04	 add	 esp, 4
  00bb7	50		 push	 eax
  00bb8	68 eb 03 00 00	 push	 1003			; 000003ebH
  00bbd	53		 push	 ebx

; 4668 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  00bbe	ff d7		 call	 edi
  00bc0	50		 push	 eax
  00bc1	ff d6		 call	 esi
  00bc3	33 c0		 xor	 eax, eax
  00bc5	e9 9a 47 00 00	 jmp	 $LN342@PageDialog
$LN315@PageDialog:

; 3533 : 			break;
; 3534 : 
; 3535 : 
; 3536 : 		case SYSENC_MULTI_BOOT_OUTCOME_PAGE:
; 3537 : 
; 3538 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYSENC_MULTI_BOOT_OUTCOME_TITLE"));

  00bca	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@FOODICMO@SYSENC_MULTI_BOOT_OUTCOME_TITLE?$AA@
  00bcf	e8 00 00 00 00	 call	 _GetString
  00bd4	83 c4 04	 add	 esp, 4
  00bd7	50		 push	 eax
  00bd8	68 e8 03 00 00	 push	 1000			; 000003e8H
  00bdd	53		 push	 ebx
  00bde	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00be4	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00bea	50		 push	 eax
  00beb	ff d7		 call	 edi
  00bed	50		 push	 eax
  00bee	ff d6		 call	 esi

; 3539 : //			SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_SYSENC_MULTI_BOOT_OUTCOME_TITLE"));
; 3540 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), SysEncMultiBootCfgOutcome);

  00bf0	68 00 00 00 00	 push	 OFFSET ?SysEncMultiBootCfgOutcome@@3PA_WA ; SysEncMultiBootCfgOutcome
  00bf5	68 eb 03 00 00	 push	 1003			; 000003ebH
  00bfa	53		 push	 ebx
  00bfb	ff d7		 call	 edi
  00bfd	50		 push	 eax
  00bfe	ff d6		 call	 esi

; 3541 : 			SetWindowTextW (GetDlgItem (MainDlg, IDC_NEXT), GetString ("NEXT"));

  00c00	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00c05	e8 00 00 00 00	 call	 _GetString
  00c0a	83 c4 04	 add	 esp, 4
  00c0d	50		 push	 eax
  00c0e	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00c13	68 10 04 00 00	 push	 1040			; 00000410H
  00c18	50		 push	 eax
  00c19	ff d7		 call	 edi
  00c1b	50		 push	 eax
  00c1c	ff d6		 call	 esi

; 3542 : 			SetWindowTextW (GetDlgItem (MainDlg, IDC_PREV), GetString ("PREV"));

  00c1e	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  00c23	e8 00 00 00 00	 call	 _GetString
  00c28	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00c2e	83 c4 04	 add	 esp, 4
  00c31	50		 push	 eax
  00c32	68 11 04 00 00	 push	 1041			; 00000411H
  00c37	51		 push	 ecx
  00c38	ff d7		 call	 edi
  00c3a	50		 push	 eax
  00c3b	ff d6		 call	 esi

; 3543 : 			SetWindowTextW (GetDlgItem (MainDlg, IDCANCEL), GetString ("CANCEL"));

  00c3d	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  00c42	e8 00 00 00 00	 call	 _GetString
  00c47	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00c4d	83 c4 04	 add	 esp, 4
  00c50	50		 push	 eax
  00c51	6a 02		 push	 2
  00c53	52		 push	 edx
  00c54	ff d7		 call	 edi
  00c56	50		 push	 eax
  00c57	ff d6		 call	 esi

; 3544 : 			EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), TRUE);

  00c59	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00c5e	6a 01		 push	 1
  00c60	68 10 04 00 00	 push	 1040			; 00000410H
  00c65	50		 push	 eax
  00c66	ff d7		 call	 edi
  00c68	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  00c6e	50		 push	 eax
  00c6f	ff d6		 call	 esi

; 3545 : 			EnableWindow (GetDlgItem (MainDlg, IDC_PREV), TRUE);

  00c71	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00c77	6a 01		 push	 1
  00c79	68 11 04 00 00	 push	 1041			; 00000411H
  00c7e	51		 push	 ecx

; 4668 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  00c7f	ff d7		 call	 edi
  00c81	50		 push	 eax
  00c82	ff d6		 call	 esi
  00c84	33 c0		 xor	 eax, eax
  00c86	e9 d9 46 00 00	 jmp	 $LN342@PageDialog
$LN314@PageDialog:

; 3546 : 			break;
; 3547 : 
; 3548 : 
; 3549 : 		case VOLUME_TYPE_PAGE:
; 3550 : 
; 3551 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("VOLUME_TYPE_TITLE"));

  00c8b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@IMPHNJMH@VOLUME_TYPE_TITLE?$AA@
  00c90	e8 00 00 00 00	 call	 _GetString
  00c95	83 c4 04	 add	 esp, 4
  00c98	50		 push	 eax
  00c99	68 e8 03 00 00	 push	 1000			; 000003e8H
  00c9e	53		 push	 ebx
  00c9f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00ca5	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00cab	50		 push	 eax
  00cac	ff d7		 call	 edi
  00cae	50		 push	 eax
  00caf	ff d6		 call	 esi

; 3552 : //			SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_VOLUME_TYPE_TITLE"));
; 3553 : 			SendMessage (GetDlgItem (hwndDlg, IDC_HIDDEN_VOL), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  00cb1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hUserBoldFont
  00cb7	6a 01		 push	 1
  00cb9	52		 push	 edx
  00cba	6a 30		 push	 48			; 00000030H
  00cbc	68 08 04 00 00	 push	 1032			; 00000408H
  00cc1	53		 push	 ebx
  00cc2	ff d7		 call	 edi
  00cc4	50		 push	 eax
  00cc5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3554 : 			SendMessage (GetDlgItem (hwndDlg, IDC_STD_VOL), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  00ccb	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserBoldFont
  00cd0	6a 01		 push	 1
  00cd2	50		 push	 eax
  00cd3	6a 30		 push	 48			; 00000030H
  00cd5	68 07 04 00 00	 push	 1031			; 00000407H
  00cda	53		 push	 ebx
  00cdb	ff d7		 call	 edi
  00cdd	50		 push	 eax
  00cde	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3555 : 
; 3556 : 			CheckButton (GetDlgItem (hwndDlg, bHiddenVol ? IDC_HIDDEN_VOL : IDC_STD_VOL));

  00ce4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  00cea	f7 d9		 neg	 ecx
  00cec	1b c9		 sbb	 ecx, ecx
  00cee	f7 d9		 neg	 ecx
  00cf0	81 c1 07 04 00
	00		 add	 ecx, 1031		; 00000407H
  00cf6	51		 push	 ecx
  00cf7	53		 push	 ebx
  00cf8	ff d7		 call	 edi
  00cfa	50		 push	 eax
  00cfb	e8 00 00 00 00	 call	 _CheckButton

; 3557 : 
; 3558 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("HIDDEN_VOLUME_TYPE_HELP"));

  00d00	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@OMMJFNJB@HIDDEN_VOLUME_TYPE_HELP?$AA@
  00d05	e8 00 00 00 00	 call	 _GetString
  00d0a	83 c4 08	 add	 esp, 8
  00d0d	50		 push	 eax
  00d0e	68 eb 03 00 00	 push	 1003			; 000003ebH
  00d13	53		 push	 ebx
  00d14	ff d7		 call	 edi
  00d16	50		 push	 eax
  00d17	ff d6		 call	 esi

; 3559 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP_NORMAL_VOL), GetString ("NORMAL_VOLUME_TYPE_HELP"));

  00d19	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@OKEJAKDK@NORMAL_VOLUME_TYPE_HELP?$AA@
  00d1e	e8 00 00 00 00	 call	 _GetString
  00d23	83 c4 04	 add	 esp, 4
  00d26	50		 push	 eax
  00d27	68 44 04 00 00	 push	 1092			; 00000444H
  00d2c	53		 push	 ebx
  00d2d	ff d7		 call	 edi
  00d2f	50		 push	 eax
  00d30	ff d6		 call	 esi

; 3560 : 
; 3561 : 			ToHyperlink (hwndDlg, IDC_HIDDEN_VOL_HELP);

  00d32	68 09 04 00 00	 push	 1033			; 00000409H
  00d37	53		 push	 ebx
  00d38	e8 00 00 00 00	 call	 _ToHyperlink
  00d3d	83 c4 08	 add	 esp, 8

; 3562 : 
; 3563 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  00d40	6a 01		 push	 1
  00d42	68 10 04 00 00	 push	 1040			; 00000410H
  00d47	53		 push	 ebx
  00d48	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00d4e	50		 push	 eax
  00d4f	ff d7		 call	 edi
  00d51	50		 push	 eax
  00d52	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3564 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  00d58	6a 01		 push	 1
  00d5a	68 11 04 00 00	 push	 1041			; 00000411H
  00d5f	53		 push	 ebx
  00d60	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00d66	50		 push	 eax
  00d67	ff d7		 call	 edi
  00d69	50		 push	 eax
  00d6a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3565 : 
; 3566 : 			SetWindowTextW (GetDlgItem (MainDlg, IDC_NEXT), GetString ("NEXT"));

  00d70	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00d75	e8 00 00 00 00	 call	 _GetString
  00d7a	83 c4 04	 add	 esp, 4
  00d7d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00d83	50		 push	 eax
  00d84	68 10 04 00 00	 push	 1040			; 00000410H
  00d89	52		 push	 edx
  00d8a	ff d7		 call	 edi
  00d8c	50		 push	 eax
  00d8d	ff d6		 call	 esi

; 3567 : 			SetWindowTextW (GetDlgItem (MainDlg, IDC_PREV), GetString ("PREV"));

  00d8f	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  00d94	e8 00 00 00 00	 call	 _GetString
  00d99	83 c4 04	 add	 esp, 4
  00d9c	50		 push	 eax
  00d9d	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00da2	68 11 04 00 00	 push	 1041			; 00000411H
  00da7	50		 push	 eax
  00da8	ff d7		 call	 edi
  00daa	50		 push	 eax
  00dab	ff d6		 call	 esi

; 3568 : 			SetWindowTextW (GetDlgItem (MainDlg, IDCANCEL), GetString ("CANCEL"));

  00dad	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  00db2	e8 00 00 00 00	 call	 _GetString
  00db7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00dbd	83 c4 04	 add	 esp, 4
  00dc0	50		 push	 eax
  00dc1	6a 02		 push	 2
  00dc3	51		 push	 ecx

; 4668 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  00dc4	ff d7		 call	 edi
  00dc6	50		 push	 eax
  00dc7	ff d6		 call	 esi
  00dc9	33 c0		 xor	 eax, eax
  00dcb	e9 94 45 00 00	 jmp	 $LN342@PageDialog
$LN313@PageDialog:

; 3569 : 			break;
; 3570 : 
; 3571 : 		case HIDDEN_VOL_WIZARD_MODE_PAGE:
; 3572 : 
; 3573 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("HIDDEN_VOL_WIZARD_MODE_TITLE"));

  00dd0	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CFKNBCJG@HIDDEN_VOL_WIZARD_MODE_TITLE?$AA@
  00dd5	e8 00 00 00 00	 call	 _GetString
  00dda	83 c4 04	 add	 esp, 4
  00ddd	50		 push	 eax
  00dde	68 e8 03 00 00	 push	 1000			; 000003e8H
  00de3	53		 push	 ebx
  00de4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00dea	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00df0	50		 push	 eax
  00df1	ff d7		 call	 edi
  00df3	50		 push	 eax
  00df4	ff d6		 call	 esi

; 3574 : //			SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_HIDDEN_VOL_WIZARD_MODE_TITLE"));
; 3575 : 			SendMessage (GetDlgItem (hwndDlg, IDC_HIDVOL_WIZ_MODE_DIRECT), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  00df6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hUserBoldFont
  00dfc	6a 01		 push	 1
  00dfe	52		 push	 edx
  00dff	6a 30		 push	 48			; 00000030H
  00e01	68 0c 04 00 00	 push	 1036			; 0000040cH
  00e06	53		 push	 ebx
  00e07	ff d7		 call	 edi
  00e09	50		 push	 eax
  00e0a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3576 : 			SendMessage (GetDlgItem (hwndDlg, IDC_HIDVOL_WIZ_MODE_FULL), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  00e10	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserBoldFont
  00e15	6a 01		 push	 1
  00e17	50		 push	 eax
  00e18	6a 30		 push	 48			; 00000030H
  00e1a	68 0b 04 00 00	 push	 1035			; 0000040bH
  00e1f	53		 push	 ebx
  00e20	ff d7		 call	 edi
  00e22	50		 push	 eax
  00e23	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3577 : 
; 3578 : 			CheckButton (GetDlgItem (hwndDlg, bHiddenVolDirect ? IDC_HIDVOL_WIZ_MODE_DIRECT : IDC_HIDVOL_WIZ_MODE_FULL));

  00e29	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolDirect
  00e2f	f7 d9		 neg	 ecx
  00e31	1b c9		 sbb	 ecx, ecx
  00e33	f7 d9		 neg	 ecx
  00e35	81 c1 0b 04 00
	00		 add	 ecx, 1035		; 0000040bH
  00e3b	51		 push	 ecx
  00e3c	53		 push	 ebx
  00e3d	ff d7		 call	 edi
  00e3f	50		 push	 eax
  00e40	e8 00 00 00 00	 call	 _CheckButton

; 3579 : 
; 3580 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("HIDDEN_VOL_WIZARD_MODE_NORMAL_HELP"));

  00e45	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LJCMOGBH@HIDDEN_VOL_WIZARD_MODE_NORMAL_HE@
  00e4a	e8 00 00 00 00	 call	 _GetString
  00e4f	83 c4 08	 add	 esp, 8
  00e52	50		 push	 eax
  00e53	68 eb 03 00 00	 push	 1003			; 000003ebH
  00e58	53		 push	 ebx
  00e59	ff d7		 call	 edi
  00e5b	50		 push	 eax
  00e5c	ff d6		 call	 esi

; 3581 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP2), GetString ("HIDDEN_VOL_WIZARD_MODE_DIRECT_HELP"));

  00e5e	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@BGGCLDPJ@HIDDEN_VOL_WIZARD_MODE_DIRECT_HE@
  00e63	e8 00 00 00 00	 call	 _GetString
  00e68	83 c4 04	 add	 esp, 4
  00e6b	50		 push	 eax
  00e6c	68 ee 03 00 00	 push	 1006			; 000003eeH
  00e71	53		 push	 ebx
  00e72	ff d7		 call	 edi
  00e74	50		 push	 eax
  00e75	ff d6		 call	 esi

; 3582 : 
; 3583 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_HIDVOL_WIZ_MODE_DIRECT), TRUE);

  00e77	6a 01		 push	 1
  00e79	68 0c 04 00 00	 push	 1036			; 0000040cH
  00e7e	53		 push	 ebx
  00e7f	ff d7		 call	 edi
  00e81	50		 push	 eax
  00e82	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3584 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_HIDVOL_WIZ_MODE_FULL), TRUE);

  00e88	6a 01		 push	 1
  00e8a	68 0b 04 00 00	 push	 1035			; 0000040bH
  00e8f	53		 push	 ebx
  00e90	ff d7		 call	 edi
  00e92	50		 push	 eax
  00e93	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3585 : 
; 3586 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  00e99	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  00e9e	e8 00 00 00 00	 call	 _GetString
  00ea3	83 c4 04	 add	 esp, 4
  00ea6	50		 push	 eax
  00ea7	68 10 04 00 00	 push	 1040			; 00000410H
  00eac	53		 push	 ebx
  00ead	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00eb3	50		 push	 eax
  00eb4	ff d7		 call	 edi
  00eb6	50		 push	 eax
  00eb7	ff d6		 call	 esi

; 3587 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  00eb9	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  00ebe	e8 00 00 00 00	 call	 _GetString
  00ec3	83 c4 04	 add	 esp, 4
  00ec6	50		 push	 eax
  00ec7	68 11 04 00 00	 push	 1041			; 00000411H
  00ecc	53		 push	 ebx
  00ecd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00ed3	50		 push	 eax
  00ed4	ff d7		 call	 edi
  00ed6	50		 push	 eax
  00ed7	ff d6		 call	 esi

; 3588 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("CANCEL"));

  00ed9	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  00ede	e8 00 00 00 00	 call	 _GetString
  00ee3	83 c4 04	 add	 esp, 4
  00ee6	50		 push	 eax
  00ee7	6a 02		 push	 2
  00ee9	53		 push	 ebx
  00eea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00ef0	50		 push	 eax
  00ef1	ff d7		 call	 edi
  00ef3	50		 push	 eax
  00ef4	ff d6		 call	 esi

; 3589 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  00ef6	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetParent@4
  00efc	6a 01		 push	 1
  00efe	68 10 04 00 00	 push	 1040			; 00000410H
  00f03	53		 push	 ebx
  00f04	ff d6		 call	 esi
  00f06	50		 push	 eax
  00f07	ff d7		 call	 edi
  00f09	50		 push	 eax
  00f0a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3590 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  00f10	6a 01		 push	 1
  00f12	68 11 04 00 00	 push	 1041			; 00000411H
  00f17	53		 push	 ebx
  00f18	ff d6		 call	 esi
  00f1a	50		 push	 eax
  00f1b	ff d7		 call	 edi
  00f1d	50		 push	 eax
  00f1e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4280 : 				return 0;

  00f24	33 c0		 xor	 eax, eax
  00f26	e9 39 44 00 00	 jmp	 $LN342@PageDialog
$LN312@PageDialog:

; 3591 : 
; 3592 : 			break;
; 3593 : 
; 3594 : 		case VOLUME_LOCATION_PAGE:
; 3595 : 			{
; 3596 : 				char *nID;
; 3597 : 
; 3598 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_SELECT_VOLUME_LOCATION),
; 3599 : 					GetString (bDevice ? "IDC_SELECT_DEVICE" : "IDC_SELECT_FILE"));

  00f2b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  00f32	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@NHEENOIC@IDC_SELECT_DEVICE?$AA@
  00f37	75 05		 jne	 SHORT $LN347@PageDialog
  00f39	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BA@HOMDJPL@IDC_SELECT_FILE?$AA@
$LN347@PageDialog:
  00f3e	50		 push	 eax
  00f3f	e8 00 00 00 00	 call	 _GetString
  00f44	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00f4a	83 c4 04	 add	 esp, 4
  00f4d	50		 push	 eax
  00f4e	68 0f 04 00 00	 push	 1039			; 0000040fH
  00f53	53		 push	 ebx
  00f54	ff d7		 call	 edi
  00f56	50		 push	 eax
  00f57	ff d6		 call	 esi

; 3600 : 
; 3601 : 				if (bHiddenVolDirect && bHiddenVolHost)

  00f59	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolDirect
  00f5f	85 d2		 test	 edx, edx
  00f61	74 12		 je	 SHORT $LN311@PageDialog
  00f63	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  00f68	85 c0		 test	 eax, eax
  00f6a	74 09		 je	 SHORT $LN311@PageDialog

; 3602 : 				{
; 3603 : 					nID = "FILE_HELP_HIDDEN_HOST_VOL_DIRECT";

  00f6c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nID$133184[ebp], OFFSET ??_C@_0CB@LOIOBDOO@FILE_HELP_HIDDEN_HOST_VOL_DIRECT@

; 3604 : 				}
; 3605 : 				else

  00f73	eb 3d		 jmp	 SHORT $LN351@PageDialog
$LN311@PageDialog:

; 3606 : 				{
; 3607 : 					if (bDevice)

  00f75	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  00f7c	74 1c		 je	 SHORT $LN309@PageDialog

; 3608 : 						nID = bHiddenVolHost ? "DEVICE_HELP_HIDDEN_HOST_VOL" : "DEVICE_HELP";

  00f7e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  00f84	85 c9		 test	 ecx, ecx
  00f86	74 09		 je	 SHORT $LN348@PageDialog
  00f88	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nID$133184[ebp], OFFSET ??_C@_0BM@DMHDGBOJ@DEVICE_HELP_HIDDEN_HOST_VOL?$AA@
  00f8f	eb 21		 jmp	 SHORT $LN351@PageDialog
$LN348@PageDialog:
  00f91	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nID$133184[ebp], OFFSET ??_C@_0M@JNOAPEGE@DEVICE_HELP?$AA@

; 3609 : 					else

  00f98	eb 18		 jmp	 SHORT $LN351@PageDialog
$LN309@PageDialog:

; 3610 : 						nID = bHiddenVolHost ? "FILE_HELP_HIDDEN_HOST_VOL" : "FILE_HELP";

  00f9a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  00fa0	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nID$133184[ebp], OFFSET ??_C@_0BK@JMGOJAKG@FILE_HELP_HIDDEN_HOST_VOL?$AA@
  00fa7	85 d2		 test	 edx, edx
  00fa9	75 07		 jne	 SHORT $LN351@PageDialog
  00fab	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nID$133184[ebp], OFFSET ??_C@_09GPELPABL@FILE_HELP?$AA@
$LN351@PageDialog:

; 3611 : 				}
; 3612 : 
; 3613 : 				SendMessage (GetDlgItem (hwndDlg, IDC_COMBO_BOX), CB_RESETCONTENT, 0, 0);

  00fb2	6a 00		 push	 0
  00fb4	6a 00		 push	 0
  00fb6	68 4b 01 00 00	 push	 331			; 0000014bH
  00fbb	68 ea 03 00 00	 push	 1002			; 000003eaH
  00fc0	53		 push	 ebx
  00fc1	ff d7		 call	 edi
  00fc3	50		 push	 eax
  00fc4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3614 : 
; 3615 : 				SendMessage (GetDlgItem (hwndDlg, IDC_COMBO_BOX), CB_LIMITTEXT, TC_MAX_PATH, 0);

  00fca	6a 00		 push	 0
  00fcc	68 04 01 00 00	 push	 260			; 00000104H
  00fd1	68 41 01 00 00	 push	 321			; 00000141H
  00fd6	68 ea 03 00 00	 push	 1002			; 000003eaH
  00fdb	53		 push	 ebx
  00fdc	ff d7		 call	 edi
  00fde	50		 push	 eax
  00fdf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3616 : 
; 3617 : 				LoadCombo (GetDlgItem (hwndDlg, IDC_COMBO_BOX));

  00fe5	68 ea 03 00 00	 push	 1002			; 000003eaH
  00fea	53		 push	 ebx
  00feb	ff d7		 call	 edi
  00fed	50		 push	 eax
  00fee	e8 00 00 00 00	 call	 _LoadCombo
  00ff3	83 c4 04	 add	 esp, 4

; 3618 : 
; 3619 : 				SendMessage (GetDlgItem (hwndDlg, IDC_NO_HISTORY), BM_SETCHECK, bHistory ? BST_UNCHECKED : BST_CHECKED, 0);

  00ff6	33 c0		 xor	 eax, eax
  00ff8	39 05 00 00 00
	00		 cmp	 DWORD PTR _bHistory, eax
  00ffe	6a 00		 push	 0
  01000	0f 94 c0	 sete	 al
  01003	50		 push	 eax
  01004	68 f1 00 00 00	 push	 241			; 000000f1H
  01009	68 f4 03 00 00	 push	 1012			; 000003f4H
  0100e	53		 push	 ebx
  0100f	ff d7		 call	 edi
  01011	50		 push	 eax
  01012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3620 : 
; 3621 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("FILE_TITLE"));

  01018	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DGHBDDNJ@FILE_TITLE?$AA@
  0101d	e8 00 00 00 00	 call	 _GetString
  01022	83 c4 04	 add	 esp, 4
  01025	50		 push	 eax
  01026	68 e8 03 00 00	 push	 1000			; 000003e8H
  0102b	53		 push	 ebx
  0102c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01032	50		 push	 eax
  01033	ff d7		 call	 edi
  01035	50		 push	 eax
  01036	ff d6		 call	 esi

; 3622 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString (nID));

  01038	8b 4d ec	 mov	 ecx, DWORD PTR _nID$133184[ebp]
  0103b	51		 push	 ecx
  0103c	e8 00 00 00 00	 call	 _GetString
  01041	83 c4 04	 add	 esp, 4
  01044	50		 push	 eax
  01045	68 eb 03 00 00	 push	 1003			; 000003ebH
  0104a	53		 push	 ebx
  0104b	ff d7		 call	 edi
  0104d	50		 push	 eax
  0104e	ff d6		 call	 esi

; 3623 : 
; 3624 : 				SetFocus (GetDlgItem (hwndDlg, IDC_COMBO_BOX));

  01050	68 ea 03 00 00	 push	 1002			; 000003eaH
  01055	53		 push	 ebx
  01056	ff d7		 call	 edi
  01058	50		 push	 eax
  01059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 3625 : 
; 3626 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  0105f	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  01064	e8 00 00 00 00	 call	 _GetString
  01069	83 c4 04	 add	 esp, 4
  0106c	50		 push	 eax
  0106d	68 10 04 00 00	 push	 1040			; 00000410H
  01072	53		 push	 ebx
  01073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01079	50		 push	 eax
  0107a	ff d7		 call	 edi
  0107c	50		 push	 eax
  0107d	ff d6		 call	 esi

; 3627 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  0107f	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  01084	e8 00 00 00 00	 call	 _GetString
  01089	83 c4 04	 add	 esp, 4
  0108c	50		 push	 eax
  0108d	68 11 04 00 00	 push	 1041			; 00000411H
  01092	53		 push	 ebx
  01093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01099	50		 push	 eax
  0109a	ff d7		 call	 edi
  0109c	50		 push	 eax
  0109d	ff d6		 call	 esi

; 3628 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  0109f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetParent@4
  010a5	6a 01		 push	 1
  010a7	68 11 04 00 00	 push	 1041			; 00000411H
  010ac	53		 push	 ebx
  010ad	ff d6		 call	 esi
  010af	50		 push	 eax
  010b0	ff d7		 call	 edi
  010b2	50		 push	 eax
  010b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3629 : 
; 3630 : 				AddComboItem (GetDlgItem (hwndDlg, IDC_COMBO_BOX), szFileName, bHistory);

  010b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHistory
  010bf	52		 push	 edx
  010c0	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  010c5	68 ea 03 00 00	 push	 1002			; 000003eaH
  010ca	53		 push	 ebx
  010cb	ff d7		 call	 edi
  010cd	50		 push	 eax
  010ce	e8 00 00 00 00	 call	 _AddComboItem
  010d3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3631 : 
; 3632 : 				EnableDisableFileNext (GetDlgItem (hwndDlg, IDC_COMBO_BOX),
; 3633 : 				GetDlgItem (GetParent (hwndDlg), IDC_NEXT));

  010d6	68 10 04 00 00	 push	 1040			; 00000410H
  010db	53		 push	 ebx
  010dc	ff d6		 call	 esi
  010de	50		 push	 eax
  010df	ff d7		 call	 edi
  010e1	50		 push	 eax
  010e2	68 ea 03 00 00	 push	 1002			; 000003eaH
  010e7	53		 push	 ebx
  010e8	ff d7		 call	 edi
  010ea	50		 push	 eax
  010eb	e8 00 00 00 00	 call	 _EnableDisableFileNext
  010f0	83 c4 08	 add	 esp, 8

; 4280 : 				return 0;

  010f3	33 c0		 xor	 eax, eax
  010f5	e9 6a 42 00 00	 jmp	 $LN342@PageDialog
$LN307@PageDialog:

; 3634 : 
; 3635 : 			}
; 3636 : 			break;
; 3637 : 
; 3638 : 		case DEVICE_TRANSFORM_MODE_PAGE:
; 3639 : 
; 3640 : 			if (!bDeviceTransformModeChoiceMade && !bInPlaceEncNonSys)

  010fa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDeviceTransformModeChoiceMade@@3HA, 0 ; bDeviceTransformModeChoiceMade
  01101	75 38		 jne	 SHORT $LN305@PageDialog
  01103	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSys
  01108	85 c0		 test	 eax, eax
  0110a	75 2f		 jne	 SHORT $LN305@PageDialog

; 3641 : 			{
; 3642 : 				// The user has not chosen whether to perform in-place encryption or format yet.
; 3643 : 				// We will preselect in-place encryption if the requirements are met and if the
; 3644 : 				// filesystem does not appear empty.
; 3645 : 
; 3646 : 				WaitCursor();

  0110c	e8 00 00 00 00	 call	 _WaitCursor

; 3647 : 
; 3648 : 				if (CheckRequirementsForNonSysInPlaceEnc (szDiskFile, TRUE))

  01111	6a 01		 push	 1
  01113	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  01118	e8 00 00 00 00	 call	 _CheckRequirementsForNonSysInPlaceEnc
  0111d	83 c4 08	 add	 esp, 8
  01120	85 c0		 test	 eax, eax
  01122	74 17		 je	 SHORT $LN305@PageDialog

; 3649 : 				{
; 3650 : 					bInPlaceEncNonSys = (FileSystemAppearsEmpty (szDiskFile) == 0);

  01124	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  01129	e8 00 00 00 00	 call	 _FileSystemAppearsEmpty
  0112e	83 c4 04	 add	 esp, 4
  01131	f7 d8		 neg	 eax
  01133	1b c0		 sbb	 eax, eax
  01135	40		 inc	 eax
  01136	a3 00 00 00 00	 mov	 DWORD PTR _bInPlaceEncNonSys, eax
$LN305@PageDialog:

; 3651 : 				}
; 3652 : 			}
; 3653 : 
; 3654 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("DEVICE_TRANSFORM_MODE_PAGE_TITLE"));

  0113b	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@IJHCDAO@DEVICE_TRANSFORM_MODE_PAGE_TITLE@
  01140	e8 00 00 00 00	 call	 _GetString
  01145	83 c4 04	 add	 esp, 4
  01148	50		 push	 eax
  01149	68 e8 03 00 00	 push	 1000			; 000003e8H
  0114e	53		 push	 ebx
  0114f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01155	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  0115b	50		 push	 eax
  0115c	ff d7		 call	 edi
  0115e	50		 push	 eax
  0115f	ff d6		 call	 esi

; 3655 : 
; 3656 : 			SendMessage (GetDlgItem (hwndDlg, IDC_DEVICE_TRANSFORM_MODE_INPLACE), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  01161	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hUserBoldFont
  01167	6a 01		 push	 1
  01169	51		 push	 ecx
  0116a	6a 30		 push	 48			; 00000030H
  0116c	68 4e 04 00 00	 push	 1102			; 0000044eH
  01171	53		 push	 ebx
  01172	ff d7		 call	 edi
  01174	50		 push	 eax
  01175	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3657 : 			SendMessage (GetDlgItem (hwndDlg, IDC_DEVICE_TRANSFORM_MODE_FORMAT), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  0117b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hUserBoldFont
  01181	6a 01		 push	 1
  01183	52		 push	 edx
  01184	6a 30		 push	 48			; 00000030H
  01186	68 4d 04 00 00	 push	 1101			; 0000044dH
  0118b	53		 push	 ebx
  0118c	ff d7		 call	 edi
  0118e	50		 push	 eax
  0118f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3658 : 
; 3659 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("DEVICE_TRANSFORM_MODE_PAGE_FORMAT_HELP"));

  01195	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@CJGGIKCO@DEVICE_TRANSFORM_MODE_PAGE_FORMA@
  0119a	e8 00 00 00 00	 call	 _GetString
  0119f	83 c4 04	 add	 esp, 4
  011a2	50		 push	 eax
  011a3	68 eb 03 00 00	 push	 1003			; 000003ebH
  011a8	53		 push	 ebx
  011a9	ff d7		 call	 edi
  011ab	50		 push	 eax
  011ac	ff d6		 call	 esi

; 3660 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP2), GetString ("DEVICE_TRANSFORM_MODE_PAGE_INPLACE_HELP"));

  011ae	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FGJIGFAK@DEVICE_TRANSFORM_MODE_PAGE_INPLA@
  011b3	e8 00 00 00 00	 call	 _GetString
  011b8	83 c4 04	 add	 esp, 4
  011bb	50		 push	 eax
  011bc	68 ee 03 00 00	 push	 1006			; 000003eeH
  011c1	53		 push	 ebx
  011c2	ff d7		 call	 edi
  011c4	50		 push	 eax
  011c5	ff d6		 call	 esi

; 3661 : 
; 3662 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  011c7	6a 01		 push	 1
  011c9	68 10 04 00 00	 push	 1040			; 00000410H
  011ce	53		 push	 ebx
  011cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  011d5	50		 push	 eax
  011d6	ff d7		 call	 edi
  011d8	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  011de	50		 push	 eax
  011df	ff d6		 call	 esi

; 3663 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  011e1	6a 01		 push	 1
  011e3	68 11 04 00 00	 push	 1041			; 00000411H
  011e8	53		 push	 ebx
  011e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  011ef	50		 push	 eax
  011f0	ff d7		 call	 edi
  011f2	50		 push	 eax
  011f3	ff d6		 call	 esi

; 3664 : 
; 3665 : 			CheckButton (GetDlgItem (hwndDlg, bInPlaceEncNonSys ? IDC_DEVICE_TRANSFORM_MODE_INPLACE : IDC_DEVICE_TRANSFORM_MODE_FORMAT));

  011f5	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSys
  011fa	f7 d8		 neg	 eax
  011fc	1b c0		 sbb	 eax, eax
  011fe	f7 d8		 neg	 eax
  01200	05 4d 04 00 00	 add	 eax, 1101		; 0000044dH
  01205	50		 push	 eax
  01206	53		 push	 ebx
  01207	ff d7		 call	 edi
  01209	50		 push	 eax
  0120a	e8 00 00 00 00	 call	 _CheckButton
  0120f	83 c4 04	 add	 esp, 4

; 3666 : 
; 3667 : 			NormalCursor();

  01212	e8 00 00 00 00	 call	 _NormalCursor

; 4280 : 				return 0;

  01217	33 c0		 xor	 eax, eax
  01219	e9 46 41 00 00	 jmp	 $LN342@PageDialog
$LN304@PageDialog:

; 3668 : 
; 3669 : 			break;
; 3670 : 
; 3671 : 		case HIDDEN_VOL_HOST_PRE_CIPHER_PAGE:
; 3672 : 			{
; 3673 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("HIDVOL_HOST_PRE_CIPHER_TITLE"));

  0121e	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@PMMGMENG@HIDVOL_HOST_PRE_CIPHER_TITLE?$AA@
  01223	e8 00 00 00 00	 call	 _GetString
  01228	83 c4 04	 add	 esp, 4
  0122b	50		 push	 eax
  0122c	68 e8 03 00 00	 push	 1000			; 000003e8H
  01231	53		 push	 ebx
  01232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01238	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  0123e	50		 push	 eax
  0123f	ff d7		 call	 edi
  01241	50		 push	 eax
  01242	ff d6		 call	 esi

; 3674 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString (bHiddenOS ? "HIDVOL_HOST_PRE_CIPHER_HELP_SYSENC" : "HIDVOL_HOST_PRE_CIPHER_HELP"));

  01244	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  0124a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CD@OMGBOOGK@HIDVOL_HOST_PRE_CIPHER_HELP_SYSE@
  0124f	85 c9		 test	 ecx, ecx
  01251	75 05		 jne	 SHORT $LN353@PageDialog
  01253	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BM@GCHOHFOK@HIDVOL_HOST_PRE_CIPHER_HELP?$AA@
$LN353@PageDialog:
  01258	50		 push	 eax
  01259	e8 00 00 00 00	 call	 _GetString
  0125e	83 c4 04	 add	 esp, 4
  01261	50		 push	 eax
  01262	68 eb 03 00 00	 push	 1003			; 000003ebH
  01267	53		 push	 ebx
  01268	ff d7		 call	 edi
  0126a	50		 push	 eax
  0126b	ff d6		 call	 esi

; 3675 : 
; 3676 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  0126d	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  01272	e8 00 00 00 00	 call	 _GetString
  01277	83 c4 04	 add	 esp, 4
  0127a	50		 push	 eax
  0127b	68 10 04 00 00	 push	 1040			; 00000410H
  01280	53		 push	 ebx
  01281	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01287	50		 push	 eax
  01288	ff d7		 call	 edi
  0128a	50		 push	 eax
  0128b	ff d6		 call	 esi

; 3677 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  0128d	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  01292	e8 00 00 00 00	 call	 _GetString
  01297	83 c4 04	 add	 esp, 4
  0129a	50		 push	 eax
  0129b	68 11 04 00 00	 push	 1041			; 00000411H
  012a0	53		 push	 ebx
  012a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  012a7	50		 push	 eax
  012a8	ff d7		 call	 edi
  012aa	50		 push	 eax
  012ab	ff d6		 call	 esi

; 3678 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  012ad	6a 01		 push	 1
  012af	68 10 04 00 00	 push	 1040			; 00000410H
  012b4	53		 push	 ebx
  012b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  012bb	50		 push	 eax
  012bc	ff d7		 call	 edi
  012be	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  012c4	50		 push	 eax
  012c5	ff d6		 call	 esi

; 3679 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  012c7	6a 01		 push	 1
  012c9	68 11 04 00 00	 push	 1041			; 00000411H
  012ce	53		 push	 ebx
  012cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  012d5	50		 push	 eax
  012d6	ff d7		 call	 edi
  012d8	50		 push	 eax
  012d9	ff d6		 call	 esi

; 3680 : 
; 3681 : 				if (bHiddenOS)

  012db	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  012e1	85 d2		 test	 edx, edx
  012e3	0f 84 76 19 00
	00		 je	 $LN337@PageDialog

; 3682 : 				{
; 3683 : 					if (!GetDevicePathForHiddenOS())

  012e9	e8 00 00 00 00	 call	 ?GetDevicePathForHiddenOS@@YAHXZ ; GetDevicePathForHiddenOS
  012ee	85 c0		 test	 eax, eax
  012f0	0f 85 69 19 00
	00		 jne	 $LN337@PageDialog

; 3684 : 						AbortProcess ("INVALID_PATH");

  012f6	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PJPEEMEG@INVALID_PATH?$AA@
  012fb	e8 00 00 00 00	 call	 _AbortProcess
  01300	83 c4 04	 add	 esp, 4

; 4280 : 				return 0;

  01303	33 c0		 xor	 eax, eax
  01305	e9 5a 40 00 00	 jmp	 $LN342@PageDialog
$LN301@PageDialog:

; 3685 : 				}
; 3686 : 			}
; 3687 : 			break;
; 3688 : 
; 3689 : 		case HIDDEN_VOL_PRE_CIPHER_PAGE:
; 3690 : 			{
; 3691 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  0130a	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  0130f	e8 00 00 00 00	 call	 _GetString
  01314	83 c4 04	 add	 esp, 4
  01317	50		 push	 eax
  01318	68 10 04 00 00	 push	 1040			; 00000410H
  0131d	53		 push	 ebx
  0131e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01324	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  0132a	50		 push	 eax
  0132b	ff d7		 call	 edi
  0132d	50		 push	 eax
  0132e	ff d6		 call	 esi

; 3692 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  01330	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  01335	e8 00 00 00 00	 call	 _GetString
  0133a	83 c4 04	 add	 esp, 4
  0133d	50		 push	 eax
  0133e	68 11 04 00 00	 push	 1041			; 00000411H
  01343	53		 push	 ebx
  01344	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0134a	50		 push	 eax
  0134b	ff d7		 call	 edi
  0134d	50		 push	 eax
  0134e	ff d6		 call	 esi

; 3693 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  01350	6a 01		 push	 1
  01352	68 10 04 00 00	 push	 1040			; 00000410H
  01357	53		 push	 ebx
  01358	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0135e	50		 push	 eax
  0135f	ff d7		 call	 edi
  01361	50		 push	 eax
  01362	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3694 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  01368	6a 00		 push	 0
  0136a	68 11 04 00 00	 push	 1041			; 00000411H
  0136f	53		 push	 ebx
  01370	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01376	50		 push	 eax
  01377	ff d7		 call	 edi
  01379	50		 push	 eax
  0137a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3695 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("HIDVOL_PRE_CIPHER_TITLE"));

  01380	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@JOBKEAGA@HIDVOL_PRE_CIPHER_TITLE?$AA@
  01385	e8 00 00 00 00	 call	 _GetString
  0138a	83 c4 04	 add	 esp, 4
  0138d	50		 push	 eax
  0138e	68 e8 03 00 00	 push	 1000			; 000003e8H
  01393	53		 push	 ebx
  01394	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0139a	50		 push	 eax
  0139b	ff d7		 call	 edi
  0139d	50		 push	 eax
  0139e	ff d6		 call	 esi

; 3696 : 
; 3697 : 				if (bHiddenOS)

  013a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  013a5	85 c0		 test	 eax, eax
  013a7	0f 84 ee 00 00
	00		 je	 $LN300@PageDialog

; 3698 : 				{
; 3699 : 					// Verify whether the clone of the OS fits in the hidden volume (the hidden
; 3700 : 					// volume is to host a hidden OS).
; 3701 : 					if (nMaximumHiddenVolSize - TC_HIDDEN_VOLUME_HOST_FS_RESERVED_END_AREA_SIZE_HIGH < GetSystemPartitionSize())

  013ad	e8 00 00 00 00	 call	 ?GetSystemPartitionSize@@YA_JXZ ; GetSystemPartitionSize
  013b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nMaximumHiddenVolSize@@3_JA
  013b8	81 e9 00 00 02
	00		 sub	 ecx, 131072		; 00020000H
  013be	89 4d e0	 mov	 DWORD PTR tv6602[ebp], ecx
  013c1	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?nMaximumHiddenVolSize@@3_JA+4
  013c7	83 d9 00	 sbb	 ecx, 0
  013ca	3b ca		 cmp	 ecx, edx
  013cc	0f 8f 91 00 00
	00		 jg	 $LN299@PageDialog
  013d2	7c 09		 jl	 SHORT $LN605@PageDialog
  013d4	39 45 e0	 cmp	 DWORD PTR tv6602[ebp], eax
  013d7	0f 83 86 00 00
	00		 jae	 $LN299@PageDialog
$LN605@PageDialog:

; 3702 : 					{
; 3703 : 						SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("HIDDEN_VOLUME_TOO_SMALL_FOR_OS_CLONE"));

  013dd	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@OIPNIHCG@HIDDEN_VOLUME_TOO_SMALL_FOR_OS_C@
  013e2	e8 00 00 00 00	 call	 _GetString
  013e7	83 c4 04	 add	 esp, 4
  013ea	50		 push	 eax
  013eb	68 eb 03 00 00	 push	 1003			; 000003ebH
  013f0	53		 push	 ebx
  013f1	ff d7		 call	 edi
  013f3	50		 push	 eax
  013f4	ff d6		 call	 esi

; 3704 : 
; 3705 : 						SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("EXIT"));

  013f6	68 00 00 00 00	 push	 OFFSET ??_C@_04GOLNGIJ@EXIT?$AA@
  013fb	e8 00 00 00 00	 call	 _GetString
  01400	83 c4 04	 add	 esp, 4
  01403	50		 push	 eax
  01404	6a 02		 push	 2
  01406	53		 push	 ebx
  01407	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0140d	50		 push	 eax
  0140e	ff d7		 call	 edi
  01410	50		 push	 eax
  01411	ff d6		 call	 esi

; 3706 : 						EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), TRUE);

  01413	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetParent@4
  01419	6a 01		 push	 1
  0141b	6a 02		 push	 2
  0141d	53		 push	 ebx
  0141e	ff d6		 call	 esi
  01420	50		 push	 eax
  01421	ff d7		 call	 edi
  01423	50		 push	 eax
  01424	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3707 : 						EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), FALSE);

  0142a	6a 00		 push	 0
  0142c	68 10 04 00 00	 push	 1040			; 00000410H
  01431	53		 push	 ebx
  01432	ff d6		 call	 esi
  01434	50		 push	 eax
  01435	ff d7		 call	 edi
  01437	50		 push	 eax
  01438	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3708 : 						EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  0143e	6a 00		 push	 0
  01440	68 11 04 00 00	 push	 1041			; 00000411H
  01445	53		 push	 ebx
  01446	ff d6		 call	 esi
  01448	50		 push	 eax
  01449	ff d7		 call	 edi
  0144b	50		 push	 eax
  0144c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3709 : 
; 3710 : 						bConfirmQuit = FALSE;

  01452	33 c0		 xor	 eax, eax
  01454	a3 00 00 00 00	 mov	 DWORD PTR ?bConfirmQuit@@3HC, eax ; bConfirmQuit

; 3711 : 						bConfirmQuitSysEncPretest = FALSE;

  01459	a3 00 00 00 00	 mov	 DWORD PTR ?bConfirmQuitSysEncPretest@@3HC, eax ; bConfirmQuitSysEncPretest

; 4280 : 				return 0;

  0145e	e9 01 3f 00 00	 jmp	 $LN342@PageDialog
$LN299@PageDialog:

; 3712 : 					}
; 3713 : 					else
; 3714 : 					{
; 3715 : 						// The hidden volume must be as large as the system partition
; 3716 : 						nVolumeSize = GetSystemPartitionSize() + TC_HIDDEN_VOLUME_HOST_FS_RESERVED_END_AREA_SIZE_HIGH;	

  01463	e8 00 00 00 00	 call	 ?GetSystemPartitionSize@@YA_JXZ ; GetSystemPartitionSize
  01468	05 00 00 02 00	 add	 eax, 131072		; 00020000H
  0146d	83 d2 00	 adc	 edx, 0

; 3717 : 
; 3718 : 						SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("HIDDEN_OS_PRE_CIPHER_HELP"));

  01470	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@FGHOHKMP@HIDDEN_OS_PRE_CIPHER_HELP?$AA@
  01475	a3 00 00 00 00	 mov	 DWORD PTR ?nVolumeSize@@3_KA, eax
  0147a	89 15 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, edx
  01480	e8 00 00 00 00	 call	 _GetString
  01485	83 c4 04	 add	 esp, 4
  01488	50		 push	 eax
  01489	68 eb 03 00 00	 push	 1003			; 000003ebH
  0148e	53		 push	 ebx

; 4668 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  0148f	ff d7		 call	 edi
  01491	50		 push	 eax
  01492	ff d6		 call	 esi
  01494	33 c0		 xor	 eax, eax
  01496	e9 c9 3e 00 00	 jmp	 $LN342@PageDialog
$LN300@PageDialog:

; 3719 : 					}
; 3720 : 				}
; 3721 : 				else
; 3722 : 				{
; 3723 : 					SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("HIDVOL_PRE_CIPHER_HELP"));

  0149b	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GDOHBMLG@HIDVOL_PRE_CIPHER_HELP?$AA@
  014a0	e8 00 00 00 00	 call	 _GetString
  014a5	83 c4 04	 add	 esp, 4
  014a8	50		 push	 eax
  014a9	68 eb 03 00 00	 push	 1003			; 000003ebH
  014ae	53		 push	 ebx

; 4668 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  014af	ff d7		 call	 edi
  014b1	50		 push	 eax
  014b2	ff d6		 call	 esi
  014b4	33 c0		 xor	 eax, eax
  014b6	e9 a9 3e 00 00	 jmp	 $LN342@PageDialog
$LN296@PageDialog:

; 3724 : 				}
; 3725 : 			}
; 3726 : 			break;
; 3727 : 
; 3728 : 		case CIPHER_PAGE:
; 3729 : 			{
; 3730 : 				int ea, hid;
; 3731 : 				char buf[100];
; 3732 : 
; 3733 : 				// Encryption algorithms
; 3734 : 
; 3735 : 				SendMessage (GetDlgItem (hwndDlg, IDC_COMBO_BOX), CB_RESETCONTENT, 0, 0);

  014bb	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  014c1	6a 00		 push	 0
  014c3	6a 00		 push	 0
  014c5	68 4b 01 00 00	 push	 331			; 0000014bH
  014ca	68 ea 03 00 00	 push	 1002			; 000003eaH
  014cf	53		 push	 ebx
  014d0	ff d7		 call	 edi
  014d2	50		 push	 eax
  014d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3736 : 
; 3737 : 				if (bHiddenVol)

  014d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  014df	85 c9		 test	 ecx, ecx
  014e1	74 2f		 je	 SHORT $LN295@PageDialog

; 3738 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString (bHiddenVolHost ? "CIPHER_HIDVOL_HOST_TITLE" : "CIPHER_HIDVOL_TITLE"));

  014e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  014e9	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BJ@GGKKJCIG@CIPHER_HIDVOL_HOST_TITLE?$AA@
  014ee	85 d2		 test	 edx, edx
  014f0	75 05		 jne	 SHORT $LN355@PageDialog
  014f2	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BE@JFKJAJEK@CIPHER_HIDVOL_TITLE?$AA@
$LN355@PageDialog:
  014f7	50		 push	 eax
  014f8	e8 00 00 00 00	 call	 _GetString
  014fd	83 c4 04	 add	 esp, 4
  01500	50		 push	 eax
  01501	68 e8 03 00 00	 push	 1000			; 000003e8H
  01506	53		 push	 ebx
  01507	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0150d	50		 push	 eax
  0150e	ff d7		 call	 edi

; 3739 : 				else

  01510	eb 33		 jmp	 SHORT $LN701@PageDialog
$LN295@PageDialog:

; 3740 : 				{
; 3741 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("CIPHER_TITLE"));

  01512	68 00 00 00 00	 push	 OFFSET ??_C@_0N@IMFDFPGM@CIPHER_TITLE?$AA@
  01517	e8 00 00 00 00	 call	 _GetString
  0151c	83 c4 04	 add	 esp, 4
  0151f	50		 push	 eax
  01520	68 e8 03 00 00	 push	 1000			; 000003e8H
  01525	53		 push	 ebx
  01526	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0152c	50		 push	 eax
  0152d	ff d7		 call	 edi
  0152f	50		 push	 eax
  01530	ff d6		 call	 esi

; 3742 : 					SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_CIPHER_TITLE"));

  01532	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@KDMLELH@IDD_VOL_CREATION_WIZARD_DLG_CIPH@
  01537	e8 00 00 00 00	 call	 _GetString
  0153c	83 c4 04	 add	 esp, 4
  0153f	50		 push	 eax
  01540	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
$LN701@PageDialog:
  01545	50		 push	 eax
  01546	ff d6		 call	 esi

; 3743 : 				}
; 3744 : 				for (ea = EAGetFirst (); ea != 0; ea = EAGetNext (ea))

  01548	e8 00 00 00 00	 call	 _EAGetFirst
  0154d	89 45 ec	 mov	 DWORD PTR _ea$133225[ebp], eax
  01550	85 c0		 test	 eax, eax
  01552	74 49		 je	 SHORT $LN291@PageDialog
$LL293@PageDialog:

; 3745 : 				{
; 3746 : 					if (EAIsFormatEnabled (ea))

  01554	8b 4d ec	 mov	 ecx, DWORD PTR _ea$133225[ebp]
  01557	51		 push	 ecx
  01558	e8 00 00 00 00	 call	 _EAIsFormatEnabled
  0155d	83 c4 04	 add	 esp, 4
  01560	85 c0		 test	 eax, eax
  01562	74 26		 je	 SHORT $LN292@PageDialog

; 3747 : 						AddComboPair (GetDlgItem (hwndDlg, IDC_COMBO_BOX), EAGetName (buf, ea), ea);

  01564	8b 45 ec	 mov	 eax, DWORD PTR _ea$133225[ebp]
  01567	50		 push	 eax
  01568	50		 push	 eax
  01569	8d 95 24 11 01
	00		 lea	 edx, DWORD PTR _buf$133227[ebp]
  0156f	52		 push	 edx
  01570	e8 00 00 00 00	 call	 _EAGetName
  01575	83 c4 08	 add	 esp, 8
  01578	50		 push	 eax
  01579	68 ea 03 00 00	 push	 1002			; 000003eaH
  0157e	53		 push	 ebx
  0157f	ff d7		 call	 edi
  01581	50		 push	 eax
  01582	e8 00 00 00 00	 call	 _AddComboPair
  01587	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN292@PageDialog:
  0158a	8b 45 ec	 mov	 eax, DWORD PTR _ea$133225[ebp]
  0158d	50		 push	 eax
  0158e	e8 00 00 00 00	 call	 _EAGetNext
  01593	83 c4 04	 add	 esp, 4
  01596	89 45 ec	 mov	 DWORD PTR _ea$133225[ebp], eax
  01599	85 c0		 test	 eax, eax
  0159b	75 b7		 jne	 SHORT $LL293@PageDialog
$LN291@PageDialog:

; 3748 : 				}
; 3749 : 
; 3750 : 				SelectAlgo (GetDlgItem (hwndDlg, IDC_COMBO_BOX), &nVolumeEA);

  0159d	68 00 00 00 00	 push	 OFFSET ?nVolumeEA@@3HA	; nVolumeEA
  015a2	68 ea 03 00 00	 push	 1002			; 000003eaH
  015a7	53		 push	 ebx
  015a8	ff d7		 call	 edi
  015aa	50		 push	 eax
  015ab	e8 00 00 00 00	 call	 _SelectAlgo

; 3751 : 				ComboSelChangeEA (hwndDlg);

  015b0	53		 push	 ebx
  015b1	e8 00 00 00 00	 call	 _ComboSelChangeEA
  015b6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3752 : 				SetFocus (GetDlgItem (hwndDlg, IDC_COMBO_BOX));

  015b9	68 ea 03 00 00	 push	 1002			; 000003eaH
  015be	53		 push	 ebx
  015bf	ff d7		 call	 edi
  015c1	50		 push	 eax
  015c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 3753 : 
; 3754 : 				ToHyperlink (hwndDlg, IDC_LINK_MORE_INFO_ABOUT_CIPHER);

  015c8	68 21 04 00 00	 push	 1057			; 00000421H
  015cd	53		 push	 ebx
  015ce	e8 00 00 00 00	 call	 _ToHyperlink
  015d3	83 c4 08	 add	 esp, 8

; 3755 : 
; 3756 : 				// Hash algorithms
; 3757 : 
; 3758 : 				if (SysEncInEffect ())

  015d6	e8 00 00 00 00	 call	 _SysEncInEffect
  015db	85 c0		 test	 eax, eax
  015dd	74 16		 je	 SHORT $LN289@PageDialog

; 3759 : 				{
; 3760 : 					hash_algo = DEFAULT_HASH_ALGORITHM_BOOT;
; 3761 : 					RandSetHashFunction (DEFAULT_HASH_ALGORITHM_BOOT);

  015df	6a 01		 push	 1
  015e1	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?hash_algo@@3HA, 1 ; hash_algo
  015eb	e8 00 00 00 00	 call	 _RandSetHashFunction
  015f0	83 c4 04	 add	 esp, 4

; 3762 : 				}
; 3763 : 				else

  015f3	eb 0a		 jmp	 SHORT $LN288@PageDialog
$LN289@PageDialog:

; 3764 : 					hash_algo = RandGetHashFunction();

  015f5	e8 00 00 00 00	 call	 _RandGetHashFunction
  015fa	a3 00 00 00 00	 mov	 DWORD PTR ?hash_algo@@3HA, eax ; hash_algo
$LN288@PageDialog:

; 3765 : 
; 3766 : 				for (hid = FIRST_PRF_ID; hid <= LAST_PRF_ID; hid++)

  015ff	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _hid$133226[ebp], 1
$LL287@PageDialog:

; 3767 : 				{
; 3768 : 					if (!HashIsDeprecated (hid))

  01606	8b 4d ec	 mov	 ecx, DWORD PTR _hid$133226[ebp]
  01609	51		 push	 ecx
  0160a	e8 00 00 00 00	 call	 _HashIsDeprecated
  0160f	83 c4 04	 add	 esp, 4
  01612	85 c0		 test	 eax, eax
  01614	75 1f		 jne	 SHORT $LN286@PageDialog

; 3769 : 						AddComboPair (GetDlgItem (hwndDlg, IDC_COMBO_BOX_HASH_ALGO), HashGetName(hid), hid);

  01616	8b 45 ec	 mov	 eax, DWORD PTR _hid$133226[ebp]
  01619	50		 push	 eax
  0161a	50		 push	 eax
  0161b	e8 00 00 00 00	 call	 _HashGetName
  01620	83 c4 04	 add	 esp, 4
  01623	50		 push	 eax
  01624	68 f0 03 00 00	 push	 1008			; 000003f0H
  01629	53		 push	 ebx
  0162a	ff d7		 call	 edi
  0162c	50		 push	 eax
  0162d	e8 00 00 00 00	 call	 _AddComboPair
  01632	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN286@PageDialog:
  01635	8b 45 ec	 mov	 eax, DWORD PTR _hid$133226[ebp]
  01638	40		 inc	 eax
  01639	83 f8 04	 cmp	 eax, 4
  0163c	89 45 ec	 mov	 DWORD PTR _hid$133226[ebp], eax
  0163f	7e c5		 jle	 SHORT $LL287@PageDialog

; 3770 : 				}
; 3771 : 				SelectAlgo (GetDlgItem (hwndDlg, IDC_COMBO_BOX_HASH_ALGO), &hash_algo);

  01641	68 00 00 00 00	 push	 OFFSET ?hash_algo@@3HA	; hash_algo
  01646	68 f0 03 00 00	 push	 1008			; 000003f0H
  0164b	53		 push	 ebx
  0164c	ff d7		 call	 edi
  0164e	50		 push	 eax
  0164f	e8 00 00 00 00	 call	 _SelectAlgo

; 3772 : 
; 3773 : 				ToHyperlink (hwndDlg, IDC_LINK_HASH_INFO);

  01654	68 22 04 00 00	 push	 1058			; 00000422H
  01659	53		 push	 ebx
  0165a	e8 00 00 00 00	 call	 _ToHyperlink

; 3774 : 
; 3775 : 				// Wizard buttons
; 3776 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  0165f	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  01664	e8 00 00 00 00	 call	 _GetString
  01669	83 c4 14	 add	 esp, 20			; 00000014H
$LN719@PageDialog:
  0166c	50		 push	 eax
  0166d	68 10 04 00 00	 push	 1040			; 00000410H
  01672	53		 push	 ebx
  01673	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01679	50		 push	 eax
  0167a	ff d7		 call	 edi
  0167c	50		 push	 eax
  0167d	ff d6		 call	 esi

; 3777 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  0167f	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  01684	e8 00 00 00 00	 call	 _GetString
  01689	83 c4 04	 add	 esp, 4
  0168c	50		 push	 eax
  0168d	68 11 04 00 00	 push	 1041			; 00000411H
  01692	53		 push	 ebx
  01693	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01699	50		 push	 eax
  0169a	ff d7		 call	 edi
  0169c	50		 push	 eax
  0169d	ff d6		 call	 esi

; 3778 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  0169f	6a 01		 push	 1
$LN718@PageDialog:
  016a1	68 11 04 00 00	 push	 1041			; 00000411H
  016a6	53		 push	 ebx
  016a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  016ad	50		 push	 eax
  016ae	ff d7		 call	 edi
  016b0	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  016b6	50		 push	 eax
  016b7	ff d6		 call	 esi

; 3779 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  016b9	6a 01		 push	 1
  016bb	68 10 04 00 00	 push	 1040			; 00000410H

; 4668 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  016c0	53		 push	 ebx
  016c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  016c7	50		 push	 eax
  016c8	ff d7		 call	 edi
  016ca	50		 push	 eax
  016cb	ff d6		 call	 esi
  016cd	33 c0		 xor	 eax, eax
  016cf	e9 90 3c 00 00	 jmp	 $LN342@PageDialog
$LN283@PageDialog:

; 3780 : 			}
; 3781 : 			break;
; 3782 : 
; 3783 : 		case SIZE_PAGE:
; 3784 : 			{
; 3785 : 				wchar_t str[1000];
; 3786 : 
; 3787 : 				if (bHiddenVolHost)

  016d4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  016da	85 d2		 test	 edx, edx
  016dc	74 1c		 je	 SHORT $LN282@PageDialog

; 3788 : 				{
; 3789 : 					wcsncpy (str, GetString ("SIZE_HELP_HIDDEN_HOST_VOL"), sizeof (str) / 2);

  016de	68 e8 03 00 00	 push	 1000			; 000003e8H
  016e3	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DEODNGPK@SIZE_HELP_HIDDEN_HOST_VOL?$AA@
  016e8	e8 00 00 00 00	 call	 _GetString
  016ed	83 c4 04	 add	 esp, 4
  016f0	50		 push	 eax
  016f1	8d 85 80 06 01
	00		 lea	 eax, DWORD PTR _str$133245[ebp]
  016f7	50		 push	 eax

; 3790 : 				}
; 3791 : 				else

  016f8	eb 2a		 jmp	 SHORT $LN702@PageDialog
$LN282@PageDialog:

; 3792 : 				{
; 3793 : 					wcsncpy (str, GetString (bHiddenVol ? "SIZE_HELP_HIDDEN_VOL" : "SIZE_HELP"), sizeof (str) / 2);

  016fa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  01700	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@LOOCDJPI@SIZE_HELP_HIDDEN_VOL?$AA@
  01705	85 c9		 test	 ecx, ecx
  01707	75 05		 jne	 SHORT $LN357@PageDialog
  01709	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09BEBIICBL@SIZE_HELP?$AA@
$LN357@PageDialog:
  0170e	68 e8 03 00 00	 push	 1000			; 000003e8H
  01713	50		 push	 eax
  01714	e8 00 00 00 00	 call	 _GetString
  01719	83 c4 04	 add	 esp, 4
  0171c	50		 push	 eax
  0171d	8d 95 80 06 01
	00		 lea	 edx, DWORD PTR _str$133245[ebp]
  01723	52		 push	 edx
$LN702@PageDialog:
  01724	e8 00 00 00 00	 call	 _wcsncpy
  01729	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3794 : 				}
; 3795 : 
; 3796 : 				if (bDevice && !(bHiddenVol && !bHiddenVolHost))	// If raw device but not a hidden volume

  0172c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  01733	0f 84 7c 00 00
	00		 je	 $LN280@PageDialog
  01739	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  0173e	85 c0		 test	 eax, eax
  01740	74 0a		 je	 SHORT $LN279@PageDialog
  01742	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  01748	85 c9		 test	 ecx, ecx
  0174a	74 69		 je	 SHORT $LN280@PageDialog
$LN279@PageDialog:

; 3797 : 				{
; 3798 : 					_snwprintf (str, sizeof str / 2, L"%s%s",
; 3799 : 						GetString ((bHiddenOS && bHiddenVol) ? "SIZE_PARTITION_HIDDEN_SYSENC_HELP" : "SIZE_PARTITION_HELP"),
; 3800 : 						 (bHiddenVolHost && !bHiddenOS) ? GetString ("SIZE_PARTITION_HIDDEN_VOL_HELP") : L"");

  0174c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  01752	85 d2		 test	 edx, edx
  01754	74 18		 je	 SHORT $LN358@PageDialog
  01756	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  0175b	85 c0		 test	 eax, eax
  0175d	75 0f		 jne	 SHORT $LN358@PageDialog
  0175f	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@JPPBFIHO@SIZE_PARTITION_HIDDEN_VOL_HELP?$AA@
  01764	e8 00 00 00 00	 call	 _GetString
  01769	83 c4 04	 add	 esp, 4
  0176c	eb 05		 jmp	 SHORT $LN359@PageDialog
$LN358@PageDialog:
  0176e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
$LN359@PageDialog:
  01773	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  01779	85 c9		 test	 ecx, ecx
  0177b	74 0f		 je	 SHORT $LN360@PageDialog
  0177d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  01783	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0CC@MIIACKDF@SIZE_PARTITION_HIDDEN_SYSENC_HEL@
  01788	85 d2		 test	 edx, edx
  0178a	75 05		 jne	 SHORT $LN361@PageDialog
$LN360@PageDialog:
  0178c	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BE@FGKMPGH@SIZE_PARTITION_HELP?$AA@
$LN361@PageDialog:
  01791	50		 push	 eax
  01792	51		 push	 ecx
  01793	e8 00 00 00 00	 call	 _GetString
  01798	83 c4 04	 add	 esp, 4
  0179b	50		 push	 eax
  0179c	68 00 00 00 00	 push	 OFFSET ??_C@_19LJDFFCJJ@?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?$AA@
  017a1	8d 85 80 06 01
	00		 lea	 eax, DWORD PTR _str$133245[ebp]
  017a7	68 e8 03 00 00	 push	 1000			; 000003e8H
  017ac	50		 push	 eax
  017ad	e8 00 00 00 00	 call	 __snwprintf
  017b2	83 c4 14	 add	 esp, 20			; 00000014H
$LN280@PageDialog:

; 3801 : 				}
; 3802 : 
; 3803 : 				SendMessage (GetDlgItem (hwndDlg, IDC_SPACE_LEFT), WM_SETFONT, (WPARAM) hBoldFont, (LPARAM) TRUE);

  017b5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hBoldFont
  017bb	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  017c1	6a 01		 push	 1
  017c3	51		 push	 ecx
  017c4	6a 30		 push	 48			; 00000030H
  017c6	68 f1 03 00 00	 push	 1009			; 000003f1H
  017cb	53		 push	 ebx
  017cc	ff d7		 call	 edi
  017ce	50		 push	 eax
  017cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3804 : 				SendMessage (GetDlgItem (hwndDlg, IDC_SIZEBOX), EM_LIMITTEXT, 12, 0);

  017d5	6a 00		 push	 0
  017d7	6a 0c		 push	 12			; 0000000cH
  017d9	68 c5 00 00 00	 push	 197			; 000000c5H
  017de	68 0e 04 00 00	 push	 1038			; 0000040eH
  017e3	53		 push	 ebx
  017e4	ff d7		 call	 edi
  017e6	50		 push	 eax
  017e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3805 : 
; 3806 : 				if(!QueryFreeSpace (hwndDlg, GetDlgItem (hwndDlg, IDC_SPACE_LEFT), TRUE))

  017ed	6a 01		 push	 1
  017ef	68 f1 03 00 00	 push	 1009			; 000003f1H
  017f4	53		 push	 ebx
  017f5	ff d7		 call	 edi
  017f7	50		 push	 eax
  017f8	53		 push	 ebx
  017f9	e8 00 00 00 00	 call	 _QueryFreeSpace
  017fe	83 c4 0c	 add	 esp, 12			; 0000000cH
  01801	85 c0		 test	 eax, eax
  01803	75 64		 jne	 SHORT $LN278@PageDialog

; 3807 : 				{
; 3808 : 					nUIVolumeSize=0;
; 3809 : 					nVolumeSize=0;
; 3810 : 					SetWindowTextW (GetDlgItem (hwndDlg, IDC_SIZEBOX), GetString ("UNKNOWN"));

  01805	68 00 00 00 00	 push	 OFFSET ??_C@_07NFANNNEC@UNKNOWN?$AA@
  0180a	a3 00 00 00 00	 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, eax
  0180f	a3 04 00 00 00	 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, eax
  01814	a3 00 00 00 00	 mov	 DWORD PTR ?nVolumeSize@@3_KA, eax
  01819	a3 04 00 00 00	 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, eax
  0181e	e8 00 00 00 00	 call	 _GetString
  01823	83 c4 04	 add	 esp, 4
  01826	50		 push	 eax
  01827	68 0e 04 00 00	 push	 1038			; 0000040eH
  0182c	53		 push	 ebx
  0182d	ff d7		 call	 edi
  0182f	50		 push	 eax
  01830	ff d6		 call	 esi
$LN275@PageDialog:

; 3811 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_SIZEBOX), FALSE);

  01832	6a 00		 push	 0
  01834	68 0e 04 00 00	 push	 1038			; 0000040eH
  01839	53		 push	 ebx
  0183a	ff d7		 call	 edi
  0183c	50		 push	 eax
  0183d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3812 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_KB), FALSE);

  01843	6a 00		 push	 0
  01845	68 f3 03 00 00	 push	 1011			; 000003f3H
  0184a	53		 push	 ebx
  0184b	ff d7		 call	 edi
  0184d	50		 push	 eax
  0184e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3813 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_MB), FALSE);

  01854	6a 00		 push	 0
  01856	68 f5 03 00 00	 push	 1013			; 000003f5H
  0185b	53		 push	 ebx
  0185c	ff d7		 call	 edi
  0185e	50		 push	 eax
  0185f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3814 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_GB), FALSE);

  01865	6a 00		 push	 0
  01867	eb 51		 jmp	 SHORT $LN703@PageDialog
$LN278@PageDialog:

; 3815 : 
; 3816 : 				}
; 3817 : 				else if (bDevice && !(bHiddenVol && !bHiddenVolHost))	// If raw device but not a hidden volume

  01869	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  01870	74 13		 je	 SHORT $LN276@PageDialog
  01872	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  01878	85 d2		 test	 edx, edx
  0187a	74 b6		 je	 SHORT $LN275@PageDialog
  0187c	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  01881	85 c0		 test	 eax, eax

; 3818 : 				{
; 3819 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_SIZEBOX), FALSE);
; 3820 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_KB), FALSE);
; 3821 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_MB), FALSE);
; 3822 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_GB), FALSE);
; 3823 : 				}
; 3824 : 				else

  01883	75 ad		 jne	 SHORT $LN275@PageDialog
$LN276@PageDialog:

; 3825 : 				{
; 3826 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_SIZEBOX), TRUE);

  01885	6a 01		 push	 1
  01887	68 0e 04 00 00	 push	 1038			; 0000040eH
  0188c	53		 push	 ebx
  0188d	ff d7		 call	 edi
  0188f	50		 push	 eax
  01890	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3827 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_KB), TRUE);

  01896	6a 01		 push	 1
  01898	68 f3 03 00 00	 push	 1011			; 000003f3H
  0189d	53		 push	 ebx
  0189e	ff d7		 call	 edi
  018a0	50		 push	 eax
  018a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3828 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_MB), TRUE);

  018a7	6a 01		 push	 1
  018a9	68 f5 03 00 00	 push	 1013			; 000003f5H
  018ae	53		 push	 ebx
  018af	ff d7		 call	 edi
  018b1	50		 push	 eax
  018b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3829 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_GB), TRUE);

  018b8	6a 01		 push	 1
$LN703@PageDialog:
  018ba	68 f7 03 00 00	 push	 1015			; 000003f7H
  018bf	53		 push	 ebx
  018c0	ff d7		 call	 edi
  018c2	50		 push	 eax
  018c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3830 : 				}
; 3831 : 
; 3832 : 				SendMessage (GetDlgItem (hwndDlg, IDC_KB), BM_SETCHECK, BST_UNCHECKED, 0);

  018c9	6a 00		 push	 0
  018cb	6a 00		 push	 0
  018cd	68 f1 00 00 00	 push	 241			; 000000f1H
  018d2	68 f3 03 00 00	 push	 1011			; 000003f3H
  018d7	53		 push	 ebx
  018d8	ff d7		 call	 edi
  018da	50		 push	 eax
  018db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3833 : 				SendMessage (GetDlgItem (hwndDlg, IDC_MB), BM_SETCHECK, BST_UNCHECKED, 0);

  018e1	6a 00		 push	 0
  018e3	6a 00		 push	 0
  018e5	68 f1 00 00 00	 push	 241			; 000000f1H
  018ea	68 f5 03 00 00	 push	 1013			; 000003f5H
  018ef	53		 push	 ebx
  018f0	ff d7		 call	 edi
  018f2	50		 push	 eax
  018f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3834 : 				SendMessage (GetDlgItem (hwndDlg, IDC_GB), BM_SETCHECK, BST_UNCHECKED, 0);

  018f9	6a 00		 push	 0
  018fb	6a 00		 push	 0
  018fd	68 f1 00 00 00	 push	 241			; 000000f1H
  01902	68 f7 03 00 00	 push	 1015			; 000003f7H
  01907	53		 push	 ebx
  01908	ff d7		 call	 edi
  0190a	50		 push	 eax
  0190b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3835 : 
; 3836 : 				switch (nMultiplier)

  01911	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nMultiplier@@3HA ; nMultiplier
  01916	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  0191b	74 2e		 je	 SHORT $LN271@PageDialog
  0191d	3d 00 00 10 00	 cmp	 eax, 1048576		; 00100000H
  01922	74 17		 je	 SHORT $LN270@PageDialog
  01924	3d 00 00 00 40	 cmp	 eax, 1073741824		; 40000000H
  01929	75 38		 jne	 SHORT $LN272@PageDialog

; 3844 : 				case BYTES_PER_GB:
; 3845 : 					SendMessage (GetDlgItem (hwndDlg, IDC_GB), BM_SETCHECK, BST_CHECKED, 0);

  0192b	6a 00		 push	 0
  0192d	6a 01		 push	 1
  0192f	68 f1 00 00 00	 push	 241			; 000000f1H
  01934	68 f7 03 00 00	 push	 1015			; 000003f7H

; 3846 : 					break;

  01939	eb 1e		 jmp	 SHORT $LN704@PageDialog
$LN270@PageDialog:

; 3840 : 					break;
; 3841 : 				case BYTES_PER_MB:
; 3842 : 					SendMessage (GetDlgItem (hwndDlg, IDC_MB), BM_SETCHECK, BST_CHECKED, 0);

  0193b	6a 00		 push	 0
  0193d	6a 01		 push	 1
  0193f	68 f1 00 00 00	 push	 241			; 000000f1H
  01944	68 f5 03 00 00	 push	 1013			; 000003f5H

; 3843 : 					break;

  01949	eb 0e		 jmp	 SHORT $LN704@PageDialog
$LN271@PageDialog:

; 3837 : 				{
; 3838 : 				case BYTES_PER_KB:
; 3839 : 					SendMessage (GetDlgItem (hwndDlg, IDC_KB), BM_SETCHECK, BST_CHECKED, 0);

  0194b	6a 00		 push	 0
  0194d	6a 01		 push	 1
  0194f	68 f1 00 00 00	 push	 241			; 000000f1H
  01954	68 f3 03 00 00	 push	 1011			; 000003f3H
$LN704@PageDialog:
  01959	53		 push	 ebx
  0195a	ff d7		 call	 edi
  0195c	50		 push	 eax
  0195d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$LN272@PageDialog:

; 3847 : 				}
; 3848 : 
; 3849 : 				if (nUIVolumeSize != 0)

  01963	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nUIVolumeSize@@3_KA
  01968	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?nUIVolumeSize@@3_KA+4
  0196e	8b d0		 mov	 edx, eax
  01970	0b d1		 or	 edx, ecx
  01972	74 2c		 je	 SHORT $LN268@PageDialog

; 3850 : 				{
; 3851 : 					char szTmp[32];
; 3852 : 					sprintf (szTmp, "%I64u", nUIVolumeSize);

  01974	51		 push	 ecx
  01975	50		 push	 eax
  01976	8d 85 70 12 01
	00		 lea	 eax, DWORD PTR _szTmp$133273[ebp]
  0197c	68 00 00 00 00	 push	 OFFSET ??_C@_05OINFJHGD@?$CFI64u?$AA@
  01981	50		 push	 eax
  01982	e8 00 00 00 00	 call	 _sprintf
  01987	83 c4 10	 add	 esp, 16			; 00000010H

; 3853 : 					SetWindowTextA(GetDlgItem (hwndDlg, IDC_SIZEBOX), szTmp);

  0198a	8d 8d 70 12 01
	00		 lea	 ecx, DWORD PTR _szTmp$133273[ebp]
  01990	51		 push	 ecx
  01991	68 0e 04 00 00	 push	 1038			; 0000040eH
  01996	53		 push	 ebx
  01997	ff d7		 call	 edi
  01999	50		 push	 eax
  0199a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8
$LN268@PageDialog:

; 3854 : 				}
; 3855 : 
; 3856 : 				SetFocus (GetDlgItem (hwndDlg, IDC_SIZEBOX));

  019a0	68 0e 04 00 00	 push	 1038			; 0000040eH
  019a5	53		 push	 ebx
  019a6	ff d7		 call	 edi
  019a8	50		 push	 eax
  019a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 3857 : 
; 3858 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), str);

  019af	8d 95 80 06 01
	00		 lea	 edx, DWORD PTR _str$133245[ebp]
  019b5	52		 push	 edx
  019b6	68 eb 03 00 00	 push	 1003			; 000003ebH
  019bb	53		 push	 ebx
  019bc	ff d7		 call	 edi
  019be	50		 push	 eax
  019bf	ff d6		 call	 esi

; 3859 : 
; 3860 : 				if (bHiddenVol)

  019c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  019c6	85 c0		 test	 eax, eax
  019c8	74 17		 je	 SHORT $LN267@PageDialog

; 3861 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString (bHiddenVolHost ? "SIZE_HIDVOL_HOST_TITLE" : "SIZE_HIDVOL_TITLE"));

  019ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  019d0	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BH@GBEPPLEC@SIZE_HIDVOL_HOST_TITLE?$AA@
  019d5	85 c9		 test	 ecx, ecx
  019d7	75 05		 jne	 SHORT $LN363@PageDialog
  019d9	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@COPDBOHD@SIZE_HIDVOL_TITLE?$AA@
$LN363@PageDialog:
  019de	50		 push	 eax

; 3862 : 				else

  019df	eb 05		 jmp	 SHORT $LN705@PageDialog
$LN267@PageDialog:

; 3863 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SIZE_TITLE"));

  019e1	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DGAKGAKL@SIZE_TITLE?$AA@
$LN705@PageDialog:
  019e6	e8 00 00 00 00	 call	 _GetString
  019eb	83 c4 04	 add	 esp, 4
  019ee	50		 push	 eax
  019ef	68 e8 03 00 00	 push	 1000			; 000003e8H
  019f4	53		 push	 ebx
  019f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  019fb	50		 push	 eax
  019fc	ff d7		 call	 edi
  019fe	50		 push	 eax
  019ff	ff d6		 call	 esi

; 3864 : 
; 3865 : 
; 3866 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  01a01	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  01a06	e8 00 00 00 00	 call	 _GetString
  01a0b	83 c4 04	 add	 esp, 4
  01a0e	50		 push	 eax
  01a0f	68 10 04 00 00	 push	 1040			; 00000410H
  01a14	53		 push	 ebx
  01a15	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01a1b	50		 push	 eax
  01a1c	ff d7		 call	 edi
  01a1e	50		 push	 eax
  01a1f	ff d6		 call	 esi

; 3867 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  01a21	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  01a26	e8 00 00 00 00	 call	 _GetString
  01a2b	83 c4 04	 add	 esp, 4
  01a2e	50		 push	 eax
  01a2f	68 11 04 00 00	 push	 1041			; 00000411H
  01a34	53		 push	 ebx
  01a35	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01a3b	50		 push	 eax
  01a3c	ff d7		 call	 edi
  01a3e	50		 push	 eax
  01a3f	ff d6		 call	 esi

; 3868 : 
; 3869 : 
; 3870 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  01a41	6a 01		 push	 1
  01a43	68 11 04 00 00	 push	 1041			; 00000411H
  01a48	53		 push	 ebx
  01a49	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01a4f	50		 push	 eax
  01a50	ff d7		 call	 edi
  01a52	50		 push	 eax
  01a53	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3871 : 
; 3872 : 				VerifySizeAndUpdate (hwndDlg, FALSE);

  01a59	6a 00		 push	 0
  01a5b	8b cb		 mov	 ecx, ebx
  01a5d	e8 00 00 00 00	 call	 _VerifySizeAndUpdate
  01a62	83 c4 04	 add	 esp, 4

; 4280 : 				return 0;

  01a65	33 c0		 xor	 eax, eax
  01a67	e9 f8 38 00 00	 jmp	 $LN342@PageDialog
$LN265@PageDialog:

; 3873 : 			}
; 3874 : 			break;
; 3875 : 
; 3876 : 		case HIDDEN_VOL_HOST_PASSWORD_PAGE:
; 3877 : 		case NONSYS_INPLACE_ENC_RESUME_PASSWORD_PAGE:
; 3878 : 
; 3879 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PASSWORD_DIRECT), EM_LIMITTEXT, MAX_PASSWORD, 0);

  01a6c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  01a72	6a 00		 push	 0
  01a74	6a 40		 push	 64			; 00000040H
  01a76	68 c5 00 00 00	 push	 197			; 000000c5H
  01a7b	68 0d 04 00 00	 push	 1037			; 0000040dH
  01a80	53		 push	 ebx
  01a81	ff d7		 call	 edi
  01a83	50		 push	 eax
  01a84	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3880 : 
; 3881 : 			SetWindowTextW(GetDlgItem (hwndDlg, IDC_PASSWORD_DIRECT), szRawPassword);

  01a8a	68 00 00 00 00	 push	 OFFSET ?szRawPassword@@3PA_WA ; szRawPassword
  01a8f	68 0d 04 00 00	 push	 1037			; 0000040dH
  01a94	53		 push	 ebx
  01a95	ff d7		 call	 edi
  01a97	50		 push	 eax
  01a98	ff d6		 call	 esi

; 3882 : 
; 3883 : 			SetFocus (GetDlgItem (hwndDlg, IDC_PASSWORD_DIRECT));

  01a9a	68 0d 04 00 00	 push	 1037			; 0000040dH
  01a9f	53		 push	 ebx
  01aa0	ff d7		 call	 edi
  01aa2	50		 push	 eax
  01aa3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 3884 : 
; 3885 : 			SetCheckBox (hwndDlg, IDC_KEYFILES_ENABLE, KeyFilesEnable);

  01aa9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _KeyFilesEnable
  01aaf	52		 push	 edx
  01ab0	68 c5 13 00 00	 push	 5061			; 000013c5H
  01ab5	53		 push	 ebx
  01ab6	e8 00 00 00 00	 call	 _SetCheckBox

; 3886 : 
; 3887 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString (bInPlaceEncNonSys ? "NONSYS_INPLACE_ENC_RESUME_PASSWORD_PAGE_HELP" : "PASSWORD_HIDDENVOL_HOST_DIRECT_HELP"));

  01abb	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSys
  01ac0	83 c4 0c	 add	 esp, 12			; 0000000cH
  01ac3	85 c0		 test	 eax, eax
  01ac5	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CN@CCCDIOBF@NONSYS_INPLACE_ENC_RESUME_PASSWO@
  01aca	75 05		 jne	 SHORT $LN365@PageDialog
  01acc	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CE@MPBBLHJC@PASSWORD_HIDDENVOL_HOST_DIRECT_H@
$LN365@PageDialog:
  01ad1	50		 push	 eax
  01ad2	e8 00 00 00 00	 call	 _GetString
  01ad7	83 c4 04	 add	 esp, 4
  01ada	50		 push	 eax
  01adb	68 eb 03 00 00	 push	 1003			; 000003ebH
  01ae0	53		 push	 ebx
  01ae1	ff d7		 call	 edi
  01ae3	50		 push	 eax
  01ae4	ff d6		 call	 esi

; 3888 : 
; 3889 : 			if (bInPlaceEncNonSys)

  01ae6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  01aec	85 c9		 test	 ecx, ecx
  01aee	74 07		 je	 SHORT $LN264@PageDialog

; 3890 : 			{
; 3891 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("PASSWORD"));

  01af0	68 00 00 00 00	 push	 OFFSET ??_C@_08KENNMKEI@PASSWORD?$AA@

; 3892 : 			}
; 3893 : 			else

  01af5	eb 05		 jmp	 SHORT $LN706@PageDialog
$LN264@PageDialog:

; 3894 : 			{
; 3895 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("PASSWORD_HIDVOL_HOST_TITLE"));

  01af7	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@DDMDKDAG@PASSWORD_HIDVOL_HOST_TITLE?$AA@
$LN706@PageDialog:
  01afc	e8 00 00 00 00	 call	 _GetString
  01b01	83 c4 04	 add	 esp, 4
  01b04	50		 push	 eax
  01b05	68 e8 03 00 00	 push	 1000			; 000003e8H
  01b0a	53		 push	 ebx
  01b0b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01b11	50		 push	 eax
  01b12	ff d7		 call	 edi
  01b14	50		 push	 eax
  01b15	ff d6		 call	 esi

; 3896 : 			}
; 3897 : 
; 3898 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  01b17	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  01b1c	e8 00 00 00 00	 call	 _GetString
  01b21	83 c4 04	 add	 esp, 4
  01b24	50		 push	 eax
  01b25	68 10 04 00 00	 push	 1040			; 00000410H
  01b2a	53		 push	 ebx
  01b2b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01b31	50		 push	 eax
  01b32	ff d7		 call	 edi
  01b34	50		 push	 eax
  01b35	ff d6		 call	 esi

; 3899 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  01b37	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  01b3c	e8 00 00 00 00	 call	 _GetString
  01b41	83 c4 04	 add	 esp, 4
  01b44	50		 push	 eax
  01b45	68 11 04 00 00	 push	 1041			; 00000411H
  01b4a	53		 push	 ebx
  01b4b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01b51	50		 push	 eax
  01b52	ff d7		 call	 edi
  01b54	50		 push	 eax
  01b55	ff d6		 call	 esi

; 3900 : 
; 3901 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), !bInPlaceEncNonSys);

  01b57	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  01b5d	f7 da		 neg	 edx
  01b5f	1b d2		 sbb	 edx, edx
  01b61	42		 inc	 edx
  01b62	52		 push	 edx

; 3902 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);
; 3903 : 
; 3904 : 			break;

  01b63	e9 39 fb ff ff	 jmp	 $LN718@PageDialog
$LN262@PageDialog:

; 3905 : 
; 3906 : 		case PASSWORD_PAGE:
; 3907 : 			{
; 3908 : 				wchar_t str[1000];
; 3909 : 
; 3910 : 				hPasswordInputField = GetDlgItem (hwndDlg, IDC_PASSWORD);

  01b68	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  01b6e	68 ec 03 00 00	 push	 1004			; 000003ecH
  01b73	53		 push	 ebx
  01b74	ff d7		 call	 edi

; 3911 : 				hVerifyPasswordInputField = GetDlgItem (hwndDlg, IDC_VERIFY);

  01b76	68 f2 03 00 00	 push	 1010			; 000003f2H
  01b7b	a3 00 00 00 00	 mov	 DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A, eax ; hPasswordInputField
  01b80	53		 push	 ebx
  01b81	ff d7		 call	 edi
  01b83	a3 00 00 00 00	 mov	 DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A, eax ; hVerifyPasswordInputField

; 3912 : 
; 3913 : 				if (SysEncInEffect ())

  01b88	e8 00 00 00 00	 call	 _SysEncInEffect
  01b8d	85 c0		 test	 eax, eax
  01b8f	0f 84 ca 00 00
	00		 je	 $LN258@PageDialog

; 3914 : 				{
; 3915 : 					ToBootPwdField (hwndDlg, IDC_PASSWORD);

  01b95	68 ec 03 00 00	 push	 1004			; 000003ecH
  01b9a	53		 push	 ebx
  01b9b	e8 00 00 00 00	 call	 _ToBootPwdField

; 3916 : 					ToBootPwdField (hwndDlg, IDC_VERIFY);

  01ba0	68 f2 03 00 00	 push	 1010			; 000003f2H
  01ba5	53		 push	 ebx
  01ba6	e8 00 00 00 00	 call	 _ToBootPwdField
  01bab	83 c4 10	 add	 esp, 16			; 00000010H

; 3917 : 
; 3918 : 					sprintf (OrigKeyboardLayout, "%08X", (DWORD) GetKeyboardLayout (NULL) & 0xFFFF);

  01bae	6a 00		 push	 0
  01bb0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyboardLayout@4
  01bb6	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  01bbb	50		 push	 eax
  01bbc	68 00 00 00 00	 push	 OFFSET ??_C@_04JIMNDDED@?$CF08X?$AA@
  01bc1	68 00 00 00 00	 push	 OFFSET ?OrigKeyboardLayout@@3PADA ; OrigKeyboardLayout
  01bc6	e8 00 00 00 00	 call	 _sprintf
  01bcb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3919 : 
; 3920 : 					if ((DWORD) GetKeyboardLayout (NULL) != 0x00000409 && (DWORD) GetKeyboardLayout (NULL) != 0x04090409)

  01bce	6a 00		 push	 0
  01bd0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyboardLayout@4
  01bd6	3d 09 04 00 00	 cmp	 eax, 1033		; 00000409H
  01bdb	74 51		 je	 SHORT $LN260@PageDialog
  01bdd	6a 00		 push	 0
  01bdf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyboardLayout@4
  01be5	3d 09 04 09 04	 cmp	 eax, 67699721		; 04090409H
  01bea	74 42		 je	 SHORT $LN260@PageDialog

; 3921 : 					{
; 3922 : 						DWORD keybLayout = (DWORD) LoadKeyboardLayout ("00000409", KLF_ACTIVATE);

  01bec	6a 01		 push	 1
  01bee	68 00 00 00 00	 push	 OFFSET ??_C@_08OKJEGFFL@00000409?$AA@
  01bf3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadKeyboardLayoutA@8

; 3923 : 
; 3924 : 						if (keybLayout != 0x00000409 && keybLayout != 0x04090409)

  01bf9	3d 09 04 00 00	 cmp	 eax, 1033		; 00000409H
  01bfe	74 24		 je	 SHORT $LN259@PageDialog
  01c00	3d 09 04 09 04	 cmp	 eax, 67699721		; 04090409H
  01c05	74 1d		 je	 SHORT $LN259@PageDialog

; 3925 : 						{
; 3926 : 							Error ("CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_ENCRYPTION");

  01c07	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@KAEHBIEI@CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_@
$LN729@PageDialog:
  01c0c	e8 00 00 00 00	 call	 _Error

; 3927 : 							EndMainDlg (MainDlg);

  01c11	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  01c17	83 c4 04	 add	 esp, 4
  01c1a	e8 00 00 00 00	 call	 _EndMainDlg

; 3928 : 							return 1;

  01c1f	e9 3b 37 00 00	 jmp	 $LN707@PageDialog
$LN259@PageDialog:

; 3929 : 						}
; 3930 : 						bKeyboardLayoutChanged = TRUE;

  01c24	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bKeyboardLayoutChanged@@3HA, 1 ; bKeyboardLayoutChanged
$LN260@PageDialog:

; 3931 : 					}
; 3932 : 
; 3933 : 					ShowWindow(GetDlgItem(hwndDlg, IDC_SHOW_PASSWORD), SW_HIDE);

  01c2e	6a 00		 push	 0
  01c30	68 20 04 00 00	 push	 1056			; 00000420H
  01c35	53		 push	 ebx
  01c36	ff d7		 call	 edi
  01c38	50		 push	 eax
  01c39	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 3934 : 
; 3935 : 					if (SetTimer (MainDlg, TIMER_ID_KEYB_LAYOUT_GUARD, TIMER_INTERVAL_KEYB_LAYOUT_GUARD, NULL) == 0)

  01c3f	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  01c44	6a 00		 push	 0
  01c46	6a 0a		 push	 10			; 0000000aH
  01c48	68 04 01 00 00	 push	 260			; 00000104H
  01c4d	50		 push	 eax
  01c4e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16
  01c54	85 c0		 test	 eax, eax
  01c56	75 07		 jne	 SHORT $LN258@PageDialog

; 3936 : 					{
; 3937 : 						Error ("CANNOT_SET_TIMER");

  01c58	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MMDPAFIK@CANNOT_SET_TIMER?$AA@

; 3938 : 						EndMainDlg (MainDlg);
; 3939 : 						return 1;

  01c5d	eb ad		 jmp	 SHORT $LN729@PageDialog
$LN258@PageDialog:

; 3940 : 					}
; 3941 : 				}
; 3942 : 
; 3943 : 				if (bHiddenVolHost)

  01c5f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  01c65	85 c9		 test	 ecx, ecx
  01c67	74 2c		 je	 SHORT $LN257@PageDialog

; 3944 : 				{
; 3945 : 					wcsncpy (str, GetString (bHiddenOS ? "PASSWORD_SYSENC_OUTERVOL_HELP" : "PASSWORD_HIDDENVOL_HOST_HELP"), sizeof (str) / 2);

  01c69	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  01c6f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BO@EJBBHKGE@PASSWORD_SYSENC_OUTERVOL_HELP?$AA@
  01c74	85 d2		 test	 edx, edx
  01c76	75 05		 jne	 SHORT $LN367@PageDialog
  01c78	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BN@OJJOHFMM@PASSWORD_HIDDENVOL_HOST_HELP?$AA@
$LN367@PageDialog:
  01c7d	68 e8 03 00 00	 push	 1000			; 000003e8H
  01c82	50		 push	 eax
  01c83	e8 00 00 00 00	 call	 _GetString
  01c88	83 c4 04	 add	 esp, 4
  01c8b	50		 push	 eax
  01c8c	8d 85 b0 fe 00
	00		 lea	 eax, DWORD PTR _str$133288[ebp]
  01c92	50		 push	 eax
  01c93	eb 72		 jmp	 SHORT $LN708@PageDialog
$LN257@PageDialog:

; 3946 : 				}
; 3947 : 				else if (bHiddenVol)

  01c95	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  01c9b	85 c9		 test	 ecx, ecx
  01c9d	74 4e		 je	 SHORT $LN255@PageDialog

; 3948 : 				{
; 3949 : 					_snwprintf (str, sizeof str / 2, L"%s%s",
; 3950 : 						GetString (bHiddenOS ? "PASSWORD_HIDDEN_OS_HELP" : "PASSWORD_HIDDENVOL_HELP"),
; 3951 : 						GetString ("PASSWORD_HELP"));

  01c9f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  01ca5	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv1922[ebp], OFFSET ??_C@_0BI@PAGBOIIN@PASSWORD_HIDDEN_OS_HELP?$AA@
  01cac	85 d2		 test	 edx, edx
  01cae	75 07		 jne	 SHORT $LN369@PageDialog
  01cb0	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv1922[ebp], OFFSET ??_C@_0BI@MNFELCPB@PASSWORD_HIDDENVOL_HELP?$AA@
$LN369@PageDialog:
  01cb7	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MEODOKDB@PASSWORD_HELP?$AA@
  01cbc	e8 00 00 00 00	 call	 _GetString
  01cc1	83 c4 04	 add	 esp, 4
  01cc4	50		 push	 eax
  01cc5	8b 45 ec	 mov	 eax, DWORD PTR tv1922[ebp]
  01cc8	50		 push	 eax
  01cc9	e8 00 00 00 00	 call	 _GetString
  01cce	83 c4 04	 add	 esp, 4
  01cd1	50		 push	 eax
  01cd2	68 00 00 00 00	 push	 OFFSET ??_C@_19LJDFFCJJ@?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?$AA@
  01cd7	8d 8d b0 fe 00
	00		 lea	 ecx, DWORD PTR _str$133288[ebp]
  01cdd	68 e8 03 00 00	 push	 1000			; 000003e8H
  01ce2	51		 push	 ecx
  01ce3	e8 00 00 00 00	 call	 __snwprintf
  01ce8	83 c4 14	 add	 esp, 20			; 00000014H

; 3952 : 				}
; 3953 : 				else

  01ceb	eb 22		 jmp	 SHORT $LN254@PageDialog
$LN255@PageDialog:

; 3954 : 				{
; 3955 : 					wcsncpy (str, GetString ("PASSWORD_HELP"), sizeof (str) / 2);

  01ced	68 e8 03 00 00	 push	 1000			; 000003e8H
  01cf2	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MEODOKDB@PASSWORD_HELP?$AA@
  01cf7	e8 00 00 00 00	 call	 _GetString
  01cfc	83 c4 04	 add	 esp, 4
  01cff	50		 push	 eax
  01d00	8d 95 b0 fe 00
	00		 lea	 edx, DWORD PTR _str$133288[ebp]
  01d06	52		 push	 edx
$LN708@PageDialog:
  01d07	e8 00 00 00 00	 call	 _wcsncpy
  01d0c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN254@PageDialog:

; 3956 : 				}
; 3957 : 
; 3958 : 				SendMessage (GetDlgItem (hwndDlg, IDC_PASSWORD), EM_LIMITTEXT, MAX_PASSWORD, 0);

  01d0f	6a 00		 push	 0
  01d11	6a 40		 push	 64			; 00000040H
  01d13	68 c5 00 00 00	 push	 197			; 000000c5H
  01d18	68 ec 03 00 00	 push	 1004			; 000003ecH
  01d1d	53		 push	 ebx
  01d1e	ff d7		 call	 edi
  01d20	50		 push	 eax
  01d21	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3959 : 				SendMessage (GetDlgItem (hwndDlg, IDC_VERIFY), EM_LIMITTEXT, MAX_PASSWORD, 0);

  01d27	6a 00		 push	 0
  01d29	6a 40		 push	 64			; 00000040H
  01d2b	68 c5 00 00 00	 push	 197			; 000000c5H
  01d30	68 f2 03 00 00	 push	 1010			; 000003f2H
  01d35	53		 push	 ebx
  01d36	ff d7		 call	 edi
  01d38	50		 push	 eax
  01d39	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3960 : 
; 3961 : 				SetWindowTextW(GetDlgItem (hwndDlg, IDC_PASSWORD), szRawPassword);

  01d3f	68 00 00 00 00	 push	 OFFSET ?szRawPassword@@3PA_WA ; szRawPassword
  01d44	68 ec 03 00 00	 push	 1004			; 000003ecH
  01d49	53		 push	 ebx
  01d4a	ff d7		 call	 edi
  01d4c	50		 push	 eax
  01d4d	ff d6		 call	 esi

; 3962 : 				SetWindowTextW(GetDlgItem (hwndDlg, IDC_VERIFY), szVerify);

  01d4f	68 00 00 00 00	 push	 OFFSET ?szVerify@@3PA_WA ; szVerify
  01d54	68 f2 03 00 00	 push	 1010			; 000003f2H
  01d59	53		 push	 ebx
  01d5a	ff d7		 call	 edi
  01d5c	50		 push	 eax
  01d5d	ff d6		 call	 esi

; 3963 : 
; 3964 : 				SetFocus (GetDlgItem (hwndDlg, IDC_PASSWORD));

  01d5f	68 ec 03 00 00	 push	 1004			; 000003ecH
  01d64	53		 push	 ebx
  01d65	ff d7		 call	 edi
  01d67	50		 push	 eax
  01d68	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 3965 : 
; 3966 : 				SetCheckBox (hwndDlg, IDC_KEYFILES_ENABLE, KeyFilesEnable && !SysEncInEffect());

  01d6e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _KeyFilesEnable, 0
  01d75	74 10		 je	 SHORT $LN370@PageDialog
  01d77	e8 00 00 00 00	 call	 _SysEncInEffect
  01d7c	85 c0		 test	 eax, eax
  01d7e	75 07		 jne	 SHORT $LN370@PageDialog
  01d80	b8 01 00 00 00	 mov	 eax, 1
  01d85	eb 02		 jmp	 SHORT $LN371@PageDialog
$LN370@PageDialog:
  01d87	33 c0		 xor	 eax, eax
$LN371@PageDialog:
  01d89	50		 push	 eax
  01d8a	68 c5 13 00 00	 push	 5061			; 000013c5H
  01d8f	53		 push	 ebx
  01d90	e8 00 00 00 00	 call	 _SetCheckBox

; 3967 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_KEY_FILES), KeyFilesEnable);

  01d95	a1 00 00 00 00	 mov	 eax, DWORD PTR _KeyFilesEnable
  01d9a	83 c4 0c	 add	 esp, 12			; 0000000cH
  01d9d	50		 push	 eax
  01d9e	68 02 04 00 00	 push	 1026			; 00000402H
  01da3	53		 push	 ebx
  01da4	ff d7		 call	 edi
  01da6	50		 push	 eax
  01da7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3968 : 
; 3969 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), str);

  01dad	8d 8d b0 fe 00
	00		 lea	 ecx, DWORD PTR _str$133288[ebp]
  01db3	51		 push	 ecx
  01db4	68 eb 03 00 00	 push	 1003			; 000003ebH
  01db9	53		 push	 ebx
  01dba	ff d7		 call	 edi
  01dbc	50		 push	 eax
  01dbd	ff d6		 call	 esi

; 3970 : 
; 3971 : 				if (CreatingHiddenSysVol())

  01dbf	e8 00 00 00 00	 call	 _CreatingHiddenSysVol
  01dc4	85 c0		 test	 eax, eax
  01dc6	74 07		 je	 SHORT $LN253@PageDialog

; 3972 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("PASSWORD_HIDDEN_OS_TITLE"));

  01dc8	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@CPICCPLA@PASSWORD_HIDDEN_OS_TITLE?$AA@
  01dcd	eb 67		 jmp	 SHORT $LN709@PageDialog
$LN253@PageDialog:

; 3973 : 				else if (bHiddenVol)

  01dcf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  01dd5	85 d2		 test	 edx, edx
  01dd7	74 16		 je	 SHORT $LN251@PageDialog

; 3974 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString (bHiddenVolHost ? "PASSWORD_HIDVOL_HOST_TITLE" : "PASSWORD_HIDVOL_TITLE"));

  01dd9	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  01dde	85 c0		 test	 eax, eax
  01de0	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BL@DDMDKDAG@PASSWORD_HIDVOL_HOST_TITLE?$AA@
  01de5	75 05		 jne	 SHORT $LN373@PageDialog
  01de7	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BG@ILMPEOM@PASSWORD_HIDVOL_TITLE?$AA@
$LN373@PageDialog:
  01dec	50		 push	 eax
  01ded	eb 47		 jmp	 SHORT $LN709@PageDialog
$LN251@PageDialog:

; 3975 : 				else if (WizardMode == WIZARD_MODE_SYS_DEVICE)

  01def	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  01df5	83 f9 02	 cmp	 ecx, 2
  01df8	75 37		 jne	 SHORT $LN249@PageDialog

; 3976 : 				{
; 3977 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("PASSWORD"));

  01dfa	68 00 00 00 00	 push	 OFFSET ??_C@_08KENNMKEI@PASSWORD?$AA@
  01dff	e8 00 00 00 00	 call	 _GetString
  01e04	83 c4 04	 add	 esp, 4
  01e07	50		 push	 eax
  01e08	68 e8 03 00 00	 push	 1000			; 000003e8H
  01e0d	53		 push	 ebx
  01e0e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01e14	50		 push	 eax
  01e15	ff d7		 call	 edi
  01e17	50		 push	 eax
  01e18	ff d6		 call	 esi

; 3978 : 					SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_PASSWORD"));

  01e1a	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DFEPBDNB@IDD_VOL_CREATION_WIZARD_DLG_PASS@
  01e1f	e8 00 00 00 00	 call	 _GetString
  01e24	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  01e2a	83 c4 04	 add	 esp, 4
  01e2d	50		 push	 eax
  01e2e	52		 push	 edx

; 3979 : 				}
; 3980 : 				else

  01e2f	eb 1e		 jmp	 SHORT $LN710@PageDialog
$LN249@PageDialog:

; 3981 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("PASSWORD_TITLE"));

  01e31	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ONGBFCBF@PASSWORD_TITLE?$AA@
$LN709@PageDialog:
  01e36	e8 00 00 00 00	 call	 _GetString
  01e3b	83 c4 04	 add	 esp, 4
  01e3e	50		 push	 eax
  01e3f	68 e8 03 00 00	 push	 1000			; 000003e8H
  01e44	53		 push	 ebx
  01e45	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01e4b	50		 push	 eax
  01e4c	ff d7		 call	 edi
  01e4e	50		 push	 eax
$LN710@PageDialog:
  01e4f	ff d6		 call	 esi

; 3982 : 
; 3983 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  01e51	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  01e56	e8 00 00 00 00	 call	 _GetString
  01e5b	83 c4 04	 add	 esp, 4
  01e5e	50		 push	 eax
  01e5f	68 10 04 00 00	 push	 1040			; 00000410H
  01e64	53		 push	 ebx
  01e65	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01e6b	50		 push	 eax
  01e6c	ff d7		 call	 edi
  01e6e	50		 push	 eax
  01e6f	ff d6		 call	 esi

; 3984 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  01e71	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  01e76	e8 00 00 00 00	 call	 _GetString
  01e7b	83 c4 04	 add	 esp, 4
  01e7e	50		 push	 eax
  01e7f	68 11 04 00 00	 push	 1041			; 00000411H
  01e84	53		 push	 ebx
  01e85	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01e8b	50		 push	 eax
  01e8c	ff d7		 call	 edi
  01e8e	50		 push	 eax
  01e8f	ff d6		 call	 esi

; 3985 : 
; 3986 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  01e91	6a 01		 push	 1
  01e93	68 11 04 00 00	 push	 1041			; 00000411H
  01e98	53		 push	 ebx
  01e99	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01e9f	50		 push	 eax
  01ea0	ff d7		 call	 edi
  01ea2	50		 push	 eax
  01ea3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3987 : 
; 3988 : 				VerifyPasswordAndUpdate2(hwndDlg, GetDlgItem (GetParent (hwndDlg), IDC_NEXT),
; 3989 : 					 GetDlgItem (hwndDlg, IDC_PASSWORD),
; 3990 : 					   GetDlgItem (hwndDlg, IDC_VERIFY),
; 3991 : 						      NULL, 0,
; 3992 : 							  NULL, 0,
; 3993 : 							  KeyFilesEnable && FirstKeyFile!=NULL && !SysEncInEffect());

  01ea9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _KeyFilesEnable, 0
  01eb0	74 19		 je	 SHORT $LN374@PageDialog
  01eb2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _FirstKeyFile, 0
  01eb9	74 10		 je	 SHORT $LN374@PageDialog
  01ebb	e8 00 00 00 00	 call	 _SysEncInEffect
  01ec0	85 c0		 test	 eax, eax
  01ec2	75 07		 jne	 SHORT $LN374@PageDialog
  01ec4	b8 01 00 00 00	 mov	 eax, 1
  01ec9	eb 02		 jmp	 SHORT $LN375@PageDialog
$LN374@PageDialog:
  01ecb	33 c0		 xor	 eax, eax
$LN375@PageDialog:
  01ecd	50		 push	 eax
  01ece	6a 00		 push	 0
  01ed0	6a 00		 push	 0
  01ed2	6a 00		 push	 0
  01ed4	6a 00		 push	 0
  01ed6	68 f2 03 00 00	 push	 1010			; 000003f2H
  01edb	53		 push	 ebx
  01edc	ff d7		 call	 edi
  01ede	50		 push	 eax
  01edf	68 ec 03 00 00	 push	 1004			; 000003ecH
  01ee4	53		 push	 ebx
  01ee5	ff d7		 call	 edi
  01ee7	50		 push	 eax
  01ee8	68 10 04 00 00	 push	 1040			; 00000410H
  01eed	53		 push	 ebx
  01eee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01ef4	50		 push	 eax
  01ef5	ff d7		 call	 edi
  01ef7	50		 push	 eax
  01ef8	53		 push	 ebx
  01ef9	e8 00 00 00 00	 call	 _VerifyPasswordAndUpdate2

; 3994 : 				volumePassword.Length = strlen ((char *) volumePassword.Text);

  01efe	b8 04 00 00 00	 mov	 eax, OFFSET ?volumePassword@@3UPassword@@A+4
  01f03	83 c4 24	 add	 esp, 36			; 00000024H
  01f06	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  01f09	8d a4 24 00 00
	00 00		 npad	 7
$LL606@PageDialog:
  01f10	8a 08		 mov	 cl, BYTE PTR [eax]
  01f12	40		 inc	 eax
  01f13	84 c9		 test	 cl, cl
  01f15	75 f9		 jne	 SHORT $LL606@PageDialog
  01f17	2b c2		 sub	 eax, edx
  01f19	a3 00 00 00 00	 mov	 DWORD PTR ?volumePassword@@3UPassword@@A, eax

; 4280 : 				return 0;

  01f1e	33 c0		 xor	 eax, eax
  01f20	e9 3f 34 00 00	 jmp	 $LN342@PageDialog
$LN247@PageDialog:

; 3995 : 			}
; 3996 : 			break;
; 3997 : 
; 3998 : 		case FILESYS_PAGE:
; 3999 : 			{
; 4000 : 				wchar_t szTmp[8192];
; 4001 : 
; 4002 : 				Init2RadButtonPageYesNo (nNeedToStoreFilesOver4GB);

  01f25	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nNeedToStoreFilesOver4GB@@3HA ; nNeedToStoreFilesOver4GB
  01f2a	e8 00 00 00 00	 call	 ?Init2RadButtonPageYesNo@@YAXH@Z ; Init2RadButtonPageYesNo

; 4003 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("FILESYS_PAGE_TITLE"));

  01f2f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@LCAKBGFA@FILESYS_PAGE_TITLE?$AA@
  01f34	e8 00 00 00 00	 call	 _GetString
  01f39	83 c4 04	 add	 esp, 4
  01f3c	50		 push	 eax
  01f3d	68 e8 03 00 00	 push	 1000			; 000003e8H
  01f42	53		 push	 ebx
  01f43	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  01f49	50		 push	 eax
  01f4a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  01f50	50		 push	 eax
  01f51	ff d6		 call	 esi

; 4004 : 
; 4005 : 				wcscpy (szTmp, GetString ("FILESYS_PAGE_HELP_QUESTION"));

  01f53	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@IEILEGP@FILESYS_PAGE_HELP_QUESTION?$AA@
  01f58	e8 00 00 00 00	 call	 _GetString
  01f5d	83 c4 04	 add	 esp, 4
  01f60	8d 95 b0 3e 00
	00		 lea	 edx, DWORD PTR _szTmp$133323[ebp]
$LL376@PageDialog:
  01f66	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  01f69	66 89 0a	 mov	 WORD PTR [edx], cx
  01f6c	83 c0 02	 add	 eax, 2
  01f6f	83 c2 02	 add	 edx, 2
  01f72	66 85 c9	 test	 cx, cx
  01f75	75 ef		 jne	 SHORT $LL376@PageDialog

; 4006 : 
; 4007 : 				if (bHiddenVolHost)

  01f77	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  01f7c	85 c0		 test	 eax, eax

; 4008 : 					wcscat (szTmp, L"\n\n");

  01f7e	8d 85 b0 3e 00
	00		 lea	 eax, DWORD PTR _szTmp$133323[ebp]
  01f84	74 2b		 je	 SHORT $LN246@PageDialog
  01f86	83 c0 fe	 add	 eax, -2			; fffffffeH
  01f89	8d a4 24 00 00
	00 00		 npad	 7
$LL607@PageDialog:
  01f90	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  01f94	83 c0 02	 add	 eax, 2
  01f97	66 85 c9	 test	 cx, cx
  01f9a	75 f4		 jne	 SHORT $LL607@PageDialog
  01f9c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  01fa2	66 8b 15 04 00
	00 00		 mov	 dx, WORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@+4
  01fa9	89 08		 mov	 DWORD PTR [eax], ecx
  01fab	66 89 50 04	 mov	 WORD PTR [eax+4], dx

; 4009 : 				else

  01faf	eb 61		 jmp	 SHORT $LN245@PageDialog
$LN246@PageDialog:

; 4010 : 				{
; 4011 : 					wcscat (szTmp, L"\n\n\n");

  01fb1	83 c0 fe	 add	 eax, -2			; fffffffeH
$LL608@PageDialog:
  01fb4	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  01fb8	83 c0 02	 add	 eax, 2
  01fbb	66 85 c9	 test	 cx, cx
  01fbe	75 f4		 jne	 SHORT $LL608@PageDialog
  01fc0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_17MFDLPPFM@?$AA?6?$AA?6?$AA?6?$AA?$AA@
  01fc6	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ??_C@_17MFDLPPFM@?$AA?6?$AA?6?$AA?6?$AA?$AA@+4
  01fcc	89 08		 mov	 DWORD PTR [eax], ecx

; 4012 : 					wcscat (szTmp, GetString ("NOTE_BEGINNING"));

  01fce	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JPAMOBPC@NOTE_BEGINNING?$AA@
  01fd3	89 50 04	 mov	 DWORD PTR [eax+4], edx
  01fd6	e8 00 00 00 00	 call	 _GetString
  01fdb	83 c4 04	 add	 esp, 4
  01fde	8b d0		 mov	 edx, eax
$LL609@PageDialog:
  01fe0	66 8b 08	 mov	 cx, WORD PTR [eax]
  01fe3	83 c0 02	 add	 eax, 2
  01fe6	66 85 c9	 test	 cx, cx
  01fe9	75 f5		 jne	 SHORT $LL609@PageDialog
  01feb	8d bd b0 3e 00
	00		 lea	 edi, DWORD PTR _szTmp$133323[ebp]
  01ff1	2b c2		 sub	 eax, edx
  01ff3	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL610@PageDialog:
  01ff6	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  01ffa	83 c7 02	 add	 edi, 2
  01ffd	66 85 c9	 test	 cx, cx
  02000	75 f4		 jne	 SHORT $LL610@PageDialog
  02002	8b c8		 mov	 ecx, eax
  02004	c1 e9 02	 shr	 ecx, 2
  02007	8b f2		 mov	 esi, edx
  02009	f3 a5		 rep movsd
  0200b	8b c8		 mov	 ecx, eax
  0200d	83 e1 03	 and	 ecx, 3
  02010	f3 a4		 rep movsb
$LN245@PageDialog:

; 4013 : 				}
; 4014 : 
; 4015 : 				wcscat (szTmp, GetString ("FILESYS_PAGE_HELP_EXPLANATION"));

  02012	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NPNHCCNA@FILESYS_PAGE_HELP_EXPLANATION?$AA@
  02017	e8 00 00 00 00	 call	 _GetString
  0201c	83 c4 04	 add	 esp, 4
  0201f	8b d0		 mov	 edx, eax
$LL611@PageDialog:
  02021	66 8b 08	 mov	 cx, WORD PTR [eax]
  02024	83 c0 02	 add	 eax, 2
  02027	66 85 c9	 test	 cx, cx
  0202a	75 f5		 jne	 SHORT $LL611@PageDialog
  0202c	8d bd b0 3e 00
	00		 lea	 edi, DWORD PTR _szTmp$133323[ebp]
  02032	2b c2		 sub	 eax, edx
  02034	83 c7 fe	 add	 edi, -2			; fffffffeH
  02037	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL612@PageDialog:
  02040	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  02044	83 c7 02	 add	 edi, 2
  02047	66 85 c9	 test	 cx, cx
  0204a	75 f4		 jne	 SHORT $LL612@PageDialog
  0204c	8b c8		 mov	 ecx, eax
  0204e	c1 e9 02	 shr	 ecx, 2
  02051	8b f2		 mov	 esi, edx
  02053	f3 a5		 rep movsd
  02055	8b c8		 mov	 ecx, eax

; 4016 : 
; 4017 : 				if (bHiddenVolHost)

  02057	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  0205c	83 e1 03	 and	 ecx, 3
  0205f	f3 a4		 rep movsb
  02061	85 c0		 test	 eax, eax
  02063	74 67		 je	 SHORT $LN244@PageDialog

; 4018 : 				{
; 4019 : 					wcscat (szTmp, L" ");

  02065	8d bd b0 3e 00
	00		 lea	 edi, DWORD PTR _szTmp$133323[ebp]
  0206b	83 c7 fe	 add	 edi, -2			; fffffffeH
  0206e	8b ff		 npad	 2
$LL613@PageDialog:
  02070	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  02074	83 c7 02	 add	 edi, 2
  02077	66 85 c0	 test	 ax, ax
  0207a	75 f4		 jne	 SHORT $LL613@PageDialog
  0207c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@

; 4020 : 					wcscat (szTmp, GetString ("FILESYS_PAGE_HELP_EXPLANATION_HIDVOL"));

  02082	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BDOPEICN@FILESYS_PAGE_HELP_EXPLANATION_HI@
  02087	89 0f		 mov	 DWORD PTR [edi], ecx
  02089	e8 00 00 00 00	 call	 _GetString
  0208e	83 c4 04	 add	 esp, 4
  02091	8b d0		 mov	 edx, eax
$LL614@PageDialog:
  02093	66 8b 08	 mov	 cx, WORD PTR [eax]
  02096	83 c0 02	 add	 eax, 2
  02099	66 85 c9	 test	 cx, cx
  0209c	75 f5		 jne	 SHORT $LL614@PageDialog
  0209e	8d bd b0 3e 00
	00		 lea	 edi, DWORD PTR _szTmp$133323[ebp]
  020a4	2b c2		 sub	 eax, edx
  020a6	83 c7 fe	 add	 edi, -2			; fffffffeH
  020a9	8d a4 24 00 00
	00 00		 npad	 7
$LL615@PageDialog:
  020b0	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  020b4	83 c7 02	 add	 edi, 2
  020b7	66 85 c9	 test	 cx, cx
  020ba	75 f4		 jne	 SHORT $LL615@PageDialog
  020bc	8b c8		 mov	 ecx, eax
  020be	c1 e9 02	 shr	 ecx, 2
  020c1	8b f2		 mov	 esi, edx
  020c3	f3 a5		 rep movsd
  020c5	8b c8		 mov	 ecx, eax
  020c7	83 e1 03	 and	 ecx, 3
  020ca	f3 a4		 rep movsb
$LN244@PageDialog:

; 4021 : 				}
; 4022 : 
; 4023 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), szTmp);

  020cc	8d 95 b0 3e 00
	00		 lea	 edx, DWORD PTR _szTmp$133323[ebp]
  020d2	52		 push	 edx
  020d3	68 eb 03 00 00	 push	 1003			; 000003ebH
  020d8	53		 push	 ebx
  020d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  020df	50		 push	 eax
  020e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 4280 : 				return 0;

  020e6	33 c0		 xor	 eax, eax
  020e8	e9 77 32 00 00	 jmp	 $LN342@PageDialog
$LN243@PageDialog:

; 4024 : 			}
; 4025 : 			break;
; 4026 : 
; 4027 : 		case SYSENC_COLLECTING_RANDOM_DATA_PAGE:
; 4028 : 		case NONSYS_INPLACE_ENC_RAND_DATA_PAGE:
; 4029 : 
; 4030 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("COLLECTING_RANDOM_DATA_TITLE"));

  020ed	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DAHBFIJD@COLLECTING_RANDOM_DATA_TITLE?$AA@
  020f2	e8 00 00 00 00	 call	 _GetString
  020f7	83 c4 04	 add	 esp, 4
  020fa	50		 push	 eax
  020fb	68 e8 03 00 00	 push	 1000			; 000003e8H
  02100	53		 push	 ebx
  02101	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02107	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  0210d	50		 push	 eax
  0210e	ff d7		 call	 edi
  02110	50		 push	 eax
  02111	ff d6		 call	 esi

; 4031 : 			SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_COLLECTING_RANDOM_DATA_TITLE"));

  02113	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@PGIFIEAN@IDD_VOL_CREATION_WIZARD_DLG_COLL@
  02118	e8 00 00 00 00	 call	 _GetString
  0211d	83 c4 04	 add	 esp, 4
  02120	50		 push	 eax
  02121	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  02126	50		 push	 eax
  02127	ff d6		 call	 esi

; 4032 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  02129	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  0212e	e8 00 00 00 00	 call	 _GetString
  02133	83 c4 04	 add	 esp, 4
  02136	50		 push	 eax
  02137	68 10 04 00 00	 push	 1040			; 00000410H
  0213c	53		 push	 ebx
  0213d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02143	50		 push	 eax
  02144	ff d7		 call	 edi
  02146	50		 push	 eax
  02147	ff d6		 call	 esi

; 4033 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  02149	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  0214e	e8 00 00 00 00	 call	 _GetString
  02153	83 c4 04	 add	 esp, 4
  02156	50		 push	 eax
  02157	68 11 04 00 00	 push	 1041			; 00000411H
  0215c	53		 push	 ebx
  0215d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02163	50		 push	 eax
  02164	ff d7		 call	 edi
  02166	50		 push	 eax
  02167	ff d6		 call	 esi

; 4034 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  02169	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetParent@4
  0216f	6a 01		 push	 1
  02171	68 10 04 00 00	 push	 1040			; 00000410H
  02176	53		 push	 ebx
  02177	ff d6		 call	 esi
  02179	50		 push	 eax
  0217a	ff d7		 call	 edi
  0217c	50		 push	 eax
  0217d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4035 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  02183	6a 01		 push	 1
  02185	68 11 04 00 00	 push	 1041			; 00000411H
  0218a	53		 push	 ebx
  0218b	ff d6		 call	 esi
  0218d	50		 push	 eax
  0218e	ff d7		 call	 edi
  02190	50		 push	 eax
  02191	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4036 : 
; 4037 : 			SetTimer (GetParent (hwndDlg), TIMER_ID_RANDVIEW, TIMER_INTERVAL_RANDVIEW, NULL);

  02197	6a 00		 push	 0
  02199	6a 1e		 push	 30			; 0000001eH
  0219b	68 ff 00 00 00	 push	 255			; 000000ffH
  021a0	53		 push	 ebx
  021a1	ff d6		 call	 esi
  021a3	50		 push	 eax
  021a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16

; 4038 : 
; 4039 : 			hRandPoolSys = GetDlgItem (hwndDlg, IDC_SYS_POOL_CONTENTS);

  021aa	68 38 04 00 00	 push	 1080			; 00000438H
  021af	53		 push	 ebx
  021b0	ff d7		 call	 edi

; 4040 : 
; 4041 : 			SendMessage (GetDlgItem (hwndDlg, IDC_SYS_POOL_CONTENTS), WM_SETFONT, (WPARAM) hFixedDigitFont, (LPARAM) TRUE);

  021b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hFixedDigitFont
  021b8	6a 01		 push	 1
  021ba	51		 push	 ecx
  021bb	6a 30		 push	 48			; 00000030H
  021bd	68 38 04 00 00	 push	 1080			; 00000438H
  021c2	53		 push	 ebx
  021c3	a3 00 00 00 00	 mov	 DWORD PTR ?hRandPoolSys@@3RAUHWND__@@A, eax ; hRandPoolSys
  021c8	ff d7		 call	 edi
  021ca	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SendMessageA@16
  021d0	50		 push	 eax
  021d1	ff d6		 call	 esi

; 4042 : 
; 4043 : 			SendMessage (GetDlgItem (hwndDlg, IDC_DISPLAY_POOL_CONTENTS), BM_SETCHECK, showKeys ? BST_CHECKED : BST_UNCHECKED, 0);

  021d3	6a 00		 push	 0
  021d5	33 d2		 xor	 edx, edx
  021d7	39 15 00 00 00
	00		 cmp	 DWORD PTR _showKeys, edx
  021dd	0f 95 c2	 setne	 dl
  021e0	52		 push	 edx
  021e1	68 f1 00 00 00	 push	 241			; 000000f1H
  021e6	68 da 13 00 00	 push	 5082			; 000013daH
  021eb	53		 push	 ebx
  021ec	ff d7		 call	 edi
  021ee	50		 push	 eax
  021ef	ff d6		 call	 esi

; 4044 : 
; 4045 : 			DisplayRandPool (hRandPoolSys, showKeys);

  021f1	a1 00 00 00 00	 mov	 eax, DWORD PTR _showKeys
  021f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hRandPoolSys@@3RAUHWND__@@A ; hRandPoolSys
  021fc	50		 push	 eax
  021fd	51		 push	 ecx
  021fe	e8 00 00 00 00	 call	 _DisplayRandPool
  02203	83 c4 08	 add	 esp, 8

; 4280 : 				return 0;

  02206	33 c0		 xor	 eax, eax
  02208	e9 57 31 00 00	 jmp	 $LN342@PageDialog
$LN242@PageDialog:

; 4046 : 
; 4047 : 			break;
; 4048 : 
; 4049 : 		case SYSENC_KEYS_GEN_PAGE:
; 4050 : 
; 4051 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("KEYS_GEN_TITLE"));

  0220d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KEHBBAFI@KEYS_GEN_TITLE?$AA@
  02212	e8 00 00 00 00	 call	 _GetString
  02217	83 c4 04	 add	 esp, 4
  0221a	50		 push	 eax
  0221b	68 e8 03 00 00	 push	 1000			; 000003e8H
  02220	53		 push	 ebx
  02221	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02227	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  0222d	50		 push	 eax
  0222e	ff d7		 call	 edi
  02230	50		 push	 eax
  02231	ff d6		 call	 esi

; 4052 : 			SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_KEYS_GEN_TITLE"));

  02233	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@PBGFLBBD@IDD_VOL_CREATION_WIZARD_DLG_KEYS@
  02238	e8 00 00 00 00	 call	 _GetString
  0223d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  02243	83 c4 04	 add	 esp, 4
  02246	50		 push	 eax
  02247	52		 push	 edx
  02248	ff d6		 call	 esi

; 4053 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  0224a	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  0224f	e8 00 00 00 00	 call	 _GetString
  02254	83 c4 04	 add	 esp, 4
  02257	50		 push	 eax
  02258	68 10 04 00 00	 push	 1040			; 00000410H
  0225d	53		 push	 ebx
  0225e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02264	50		 push	 eax
  02265	ff d7		 call	 edi
  02267	50		 push	 eax
  02268	ff d6		 call	 esi

; 4054 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  0226a	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  0226f	e8 00 00 00 00	 call	 _GetString
  02274	83 c4 04	 add	 esp, 4
  02277	50		 push	 eax
  02278	68 11 04 00 00	 push	 1041			; 00000411H
  0227d	53		 push	 ebx
  0227e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02284	50		 push	 eax
  02285	ff d7		 call	 edi
  02287	50		 push	 eax
  02288	ff d6		 call	 esi

; 4055 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  0228a	6a 01		 push	 1
  0228c	68 10 04 00 00	 push	 1040			; 00000410H
  02291	53		 push	 ebx
  02292	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02298	50		 push	 eax
  02299	ff d7		 call	 edi
  0229b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  022a1	50		 push	 eax
  022a2	ff d6		 call	 esi

; 4056 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  022a4	6a 01		 push	 1
  022a6	68 11 04 00 00	 push	 1041			; 00000411H
  022ab	53		 push	 ebx
  022ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  022b2	50		 push	 eax
  022b3	ff d7		 call	 edi
  022b5	50		 push	 eax
  022b6	ff d6		 call	 esi

; 4057 : 
; 4058 : 			hMasterKey = GetDlgItem (hwndDlg, IDC_DISK_KEY);

  022b8	68 fb 03 00 00	 push	 1019			; 000003fbH
  022bd	53		 push	 ebx
  022be	ff d7		 call	 edi

; 4059 : 			hHeaderKey = GetDlgItem (hwndDlg, IDC_HEADER_KEY);

  022c0	68 f9 03 00 00	 push	 1017			; 000003f9H
  022c5	a3 00 00 00 00	 mov	 DWORD PTR _hMasterKey, eax
  022ca	53		 push	 ebx
  022cb	ff d7		 call	 edi

; 4060 : 
; 4061 : 			SendMessage (GetDlgItem (hwndDlg, IDC_DISK_KEY), WM_SETFONT, (WPARAM) hFixedDigitFont, (LPARAM) TRUE);

  022cd	6a 01		 push	 1
  022cf	a3 00 00 00 00	 mov	 DWORD PTR _hHeaderKey, eax
  022d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _hFixedDigitFont
  022d9	50		 push	 eax
  022da	6a 30		 push	 48			; 00000030H
  022dc	68 fb 03 00 00	 push	 1019			; 000003fbH
  022e1	53		 push	 ebx
  022e2	ff d7		 call	 edi
  022e4	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SendMessageA@16
  022ea	50		 push	 eax
  022eb	ff d6		 call	 esi

; 4062 : 			SendMessage (GetDlgItem (hwndDlg, IDC_HEADER_KEY), WM_SETFONT, (WPARAM) hFixedDigitFont, (LPARAM) TRUE);

  022ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hFixedDigitFont
  022f3	6a 01		 push	 1
  022f5	51		 push	 ecx
  022f6	6a 30		 push	 48			; 00000030H
  022f8	68 f9 03 00 00	 push	 1017			; 000003f9H
  022fd	53		 push	 ebx
  022fe	ff d7		 call	 edi
  02300	50		 push	 eax
  02301	ff d6		 call	 esi

; 4063 : 
; 4064 : 			SendMessage (GetDlgItem (hwndDlg, IDC_DISPLAY_KEYS), BM_SETCHECK, showKeys ? BST_CHECKED : BST_UNCHECKED, 0);

  02303	33 d2		 xor	 edx, edx
  02305	39 15 00 00 00
	00		 cmp	 DWORD PTR _showKeys, edx
  0230b	6a 00		 push	 0
  0230d	0f 95 c2	 setne	 dl
  02310	52		 push	 edx
  02311	68 f1 00 00 00	 push	 241			; 000000f1H
  02316	68 40 04 00 00	 push	 1088			; 00000440H
  0231b	53		 push	 ebx
  0231c	ff d7		 call	 edi
  0231e	50		 push	 eax
  0231f	ff d6		 call	 esi

; 4065 : 
; 4066 : 			DisplayPortionsOfKeys (hHeaderKey, hMasterKey, HeaderKeyGUIView, MasterKeyGUIView, !showKeys);

  02321	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hMasterKey
  02327	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hHeaderKey
  0232d	33 c0		 xor	 eax, eax
  0232f	39 05 00 00 00
	00		 cmp	 DWORD PTR _showKeys, eax
  02335	0f 94 c0	 sete	 al
  02338	50		 push	 eax
  02339	68 00 00 00 00	 push	 OFFSET _MasterKeyGUIView
  0233e	68 00 00 00 00	 push	 OFFSET _HeaderKeyGUIView
  02343	51		 push	 ecx
  02344	52		 push	 edx
  02345	e8 00 00 00 00	 call	 _DisplayPortionsOfKeys
  0234a	83 c4 14	 add	 esp, 20			; 00000014H

; 4280 : 				return 0;

  0234d	33 c0		 xor	 eax, eax
  0234f	e9 10 30 00 00	 jmp	 $LN342@PageDialog
$LN241@PageDialog:

; 4067 : 
; 4068 : 			break;
; 4069 : 
; 4070 : 		case SYSENC_RESCUE_DISK_CREATION_PAGE:
; 4071 : 
; 4072 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("RESCUE_DISK"));

  02354	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IGHMLIGA@RESCUE_DISK?$AA@
  02359	e8 00 00 00 00	 call	 _GetString
  0235e	83 c4 04	 add	 esp, 4
  02361	50		 push	 eax
  02362	68 e8 03 00 00	 push	 1000			; 000003e8H
  02367	53		 push	 ebx
  02368	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0236e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  02374	50		 push	 eax
  02375	ff d7		 call	 edi
  02377	50		 push	 eax
  02378	ff d6		 call	 esi

; 4073 : 			SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_RESCUE_DISK"));

  0237a	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@DKEFLHLA@IDD_VOL_CREATION_WIZARD_DLG_RESC@
  0237f	e8 00 00 00 00	 call	 _GetString
  02384	83 c4 04	 add	 esp, 4
  02387	50		 push	 eax
  02388	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  0238d	50		 push	 eax
  0238e	ff d6		 call	 esi

; 4074 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  02390	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  02395	e8 00 00 00 00	 call	 _GetString
  0239a	83 c4 04	 add	 esp, 4
  0239d	50		 push	 eax
  0239e	68 10 04 00 00	 push	 1040			; 00000410H
  023a3	53		 push	 ebx
  023a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  023aa	50		 push	 eax
  023ab	ff d7		 call	 edi
  023ad	50		 push	 eax
  023ae	ff d6		 call	 esi

; 4075 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  023b0	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  023b5	e8 00 00 00 00	 call	 _GetString
  023ba	83 c4 04	 add	 esp, 4
  023bd	50		 push	 eax
  023be	68 11 04 00 00	 push	 1041			; 00000411H
  023c3	53		 push	 ebx
  023c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  023ca	50		 push	 eax
  023cb	ff d7		 call	 edi
  023cd	50		 push	 eax
  023ce	ff d6		 call	 esi

; 4076 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDT_RESCUE_DISK_INFO), GetString ("RESCUE_DISK_INFO"));

  023d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KBMALCGN@RESCUE_DISK_INFO?$AA@
  023d5	e8 00 00 00 00	 call	 _GetString
  023da	83 c4 04	 add	 esp, 4
  023dd	50		 push	 eax
  023de	68 2f 04 00 00	 push	 1071			; 0000042fH
  023e3	53		 push	 ebx
  023e4	ff d7		 call	 edi
  023e6	50		 push	 eax
  023e7	ff d6		 call	 esi

; 4077 : 			SetDlgItemText (hwndDlg, IDC_RESCUE_DISK_ISO_PATH, szRescueDiskISO);

  023e9	68 00 00 00 00	 push	 OFFSET ?szRescueDiskISO@@3PADA ; szRescueDiskISO
  023ee	68 e9 03 00 00	 push	 1001			; 000003e9H
  023f3	53		 push	 ebx
  023f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12

; 4078 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), (GetWindowTextLengthA(GetDlgItem (hwndDlg, IDC_RESCUE_DISK_ISO_PATH)) > 1));

  023fa	68 e9 03 00 00	 push	 1001			; 000003e9H
  023ff	53		 push	 ebx
  02400	ff d7		 call	 edi
  02402	50		 push	 eax
  02403	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextLengthA@4
  02409	33 c9		 xor	 ecx, ecx
  0240b	83 f8 01	 cmp	 eax, 1
  0240e	0f 9f c1	 setg	 cl
  02411	51		 push	 ecx
  02412	68 10 04 00 00	 push	 1040			; 00000410H
  02417	53		 push	 ebx
  02418	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0241e	50		 push	 eax

; 4079 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);
; 4080 : 
; 4081 : 			break;

  0241f	e9 99 18 00 00	 jmp	 $LN697@PageDialog
$LN240@PageDialog:

; 4082 : 
; 4083 : 		case SYSENC_RESCUE_DISK_BURN_PAGE:
; 4084 : 			{
; 4085 : 				wchar_t szTmp[8192];
; 4086 : 
; 4087 : 				if (bDontVerifyRescueDisk)

  02424	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDontVerifyRescueDisk@@3HA, 0 ; bDontVerifyRescueDisk
  0242b	74 26		 je	 SHORT $LN239@PageDialog

; 4088 : 				{
; 4089 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("RESCUE_DISK_CREATED_TITLE"));

  0242d	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@NAGNMEFO@RESCUE_DISK_CREATED_TITLE?$AA@
  02432	e8 00 00 00 00	 call	 _GetString
  02437	83 c4 04	 add	 esp, 4
  0243a	50		 push	 eax
  0243b	68 e8 03 00 00	 push	 1000			; 000003e8H
  02440	53		 push	 ebx
  02441	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02447	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  0244d	50		 push	 eax
  0244e	ff d7		 call	 edi
  02450	50		 push	 eax

; 4090 : 				}
; 4091 : 				else

  02451	eb 3b		 jmp	 SHORT $LN711@PageDialog
$LN239@PageDialog:

; 4092 : 				{
; 4093 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("RESCUE_DISK_RECORDING_TITLE"));

  02453	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@GPDOJGLC@RESCUE_DISK_RECORDING_TITLE?$AA@
  02458	e8 00 00 00 00	 call	 _GetString
  0245d	83 c4 04	 add	 esp, 4
  02460	50		 push	 eax
  02461	68 e8 03 00 00	 push	 1000			; 000003e8H
  02466	53		 push	 ebx
  02467	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0246d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  02473	50		 push	 eax
  02474	ff d7		 call	 edi
  02476	50		 push	 eax
  02477	ff d6		 call	 esi

; 4094 : 					SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_RESCUE_DISK_RECORDING_TITLE"));

  02479	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@JHDLLKII@IDD_VOL_CREATION_WIZARD_DLG_RESC@
  0247e	e8 00 00 00 00	 call	 _GetString
  02483	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  02489	83 c4 04	 add	 esp, 4
  0248c	50		 push	 eax
  0248d	52		 push	 edx
$LN711@PageDialog:
  0248e	ff d6		 call	 esi

; 4095 : 				}
; 4096 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  02490	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  02495	e8 00 00 00 00	 call	 _GetString
  0249a	83 c4 04	 add	 esp, 4
  0249d	50		 push	 eax
  0249e	68 10 04 00 00	 push	 1040			; 00000410H
  024a3	53		 push	 ebx
  024a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  024aa	50		 push	 eax
  024ab	ff d7		 call	 edi
  024ad	50		 push	 eax
  024ae	ff d6		 call	 esi

; 4097 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  024b0	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  024b5	e8 00 00 00 00	 call	 _GetString
  024ba	83 c4 04	 add	 esp, 4
  024bd	50		 push	 eax
  024be	68 11 04 00 00	 push	 1041			; 00000411H
  024c3	53		 push	 ebx
  024c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  024ca	50		 push	 eax
  024cb	ff d7		 call	 edi
  024cd	50		 push	 eax
  024ce	ff d6		 call	 esi

; 4098 : 
; 4099 : 				_snwprintf (szTmp, sizeof szTmp / 2,
; 4100 : 					GetString (bDontVerifyRescueDisk ? "RESCUE_DISK_BURN_INFO_NO_CHECK" : "RESCUE_DISK_BURN_INFO"),
; 4101 : 					szRescueDiskISO, IsWindowsIsoBurnerAvailable() ? L"" : GetString ("RESCUE_DISK_BURN_INFO_NONWIN_ISO_BURNER"));

  024d0	e8 00 00 00 00	 call	 _IsWindowsIsoBurnerAvailable
  024d5	85 c0		 test	 eax, eax
  024d7	74 07		 je	 SHORT $LN377@PageDialog
  024d9	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  024de	eb 0d		 jmp	 SHORT $LN378@PageDialog
$LN377@PageDialog:
  024e0	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@IHEJGKND@RESCUE_DISK_BURN_INFO_NONWIN_ISO@
  024e5	e8 00 00 00 00	 call	 _GetString
  024ea	83 c4 04	 add	 esp, 4
$LN378@PageDialog:
  024ed	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDontVerifyRescueDisk@@3HA, 0 ; bDontVerifyRescueDisk
  024f4	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BP@JAENMDIB@RESCUE_DISK_BURN_INFO_NO_CHECK?$AA@
  024f9	75 05		 jne	 SHORT $LN380@PageDialog
  024fb	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BG@KIJPDAJH@RESCUE_DISK_BURN_INFO?$AA@
$LN380@PageDialog:
  02500	50		 push	 eax
  02501	68 00 00 00 00	 push	 OFFSET ?szRescueDiskISO@@3PADA ; szRescueDiskISO
  02506	51		 push	 ecx
  02507	e8 00 00 00 00	 call	 _GetString
  0250c	83 c4 04	 add	 esp, 4
  0250f	50		 push	 eax
  02510	8d 85 b0 9e 00
	00		 lea	 eax, DWORD PTR _szTmp$133350[ebp]
  02516	68 00 20 00 00	 push	 8192			; 00002000H
  0251b	50		 push	 eax
  0251c	e8 00 00 00 00	 call	 __snwprintf
  02521	83 c4 14	 add	 esp, 20			; 00000014H

; 4102 : 
; 4103 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDT_RESCUE_DISK_BURN_INFO), szTmp);

  02524	8d 8d b0 9e 00
	00		 lea	 ecx, DWORD PTR _szTmp$133350[ebp]
  0252a	51		 push	 ecx
  0252b	68 3b 04 00 00	 push	 1083			; 0000043bH
  02530	53		 push	 ebx
  02531	ff d7		 call	 edi
  02533	50		 push	 eax
  02534	ff d6		 call	 esi

; 4104 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  02536	6a 01		 push	 1
  02538	68 10 04 00 00	 push	 1040			; 00000410H
  0253d	53		 push	 ebx
  0253e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02544	50		 push	 eax
  02545	ff d7		 call	 edi
  02547	50		 push	 eax
  02548	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4105 : 
; 4106 : 				/* The 'Back' button must be disabled now because the user could burn a Rescue Disk, then go back, and
; 4107 : 				generate a different master key, which would cause the Rescue Disk verification to fail (the result
; 4108 : 				would be confusion and bug reports). */
; 4109 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  0254e	6a 00		 push	 0
  02550	68 11 04 00 00	 push	 1041			; 00000411H
  02555	53		 push	 ebx
  02556	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0255c	50		 push	 eax
  0255d	ff d7		 call	 edi
  0255f	50		 push	 eax
  02560	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4110 : 
; 4111 : 				if (IsWindowsIsoBurnerAvailable())

  02566	e8 00 00 00 00	 call	 _IsWindowsIsoBurnerAvailable
  0256b	85 c0		 test	 eax, eax
  0256d	74 19		 je	 SHORT $LN237@PageDialog

; 4112 : 					SetWindowTextW (GetDlgItem (hwndDlg, IDC_DOWNLOAD_CD_BURN_SOFTWARE), GetString ("LAUNCH_WIN_ISOBURN"));

  0256f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@CHINNFGJ@LAUNCH_WIN_ISOBURN?$AA@
  02574	e8 00 00 00 00	 call	 _GetString
  02579	83 c4 04	 add	 esp, 4
  0257c	50		 push	 eax
  0257d	68 3a 04 00 00	 push	 1082			; 0000043aH
  02582	53		 push	 ebx
  02583	ff d7		 call	 edi
  02585	50		 push	 eax
  02586	ff d6		 call	 esi
$LN237@PageDialog:

; 4113 : 
; 4114 : 				ToHyperlink (hwndDlg, IDC_DOWNLOAD_CD_BURN_SOFTWARE);

  02588	68 3a 04 00 00	 push	 1082			; 0000043aH
  0258d	53		 push	 ebx
  0258e	e8 00 00 00 00	 call	 _ToHyperlink
  02593	83 c4 08	 add	 esp, 8

; 4115 : 
; 4116 : 				if (IsWindowsIsoBurnerAvailable() && !bDontVerifyRescueDisk)

  02596	e8 00 00 00 00	 call	 _IsWindowsIsoBurnerAvailable
  0259b	85 c0		 test	 eax, eax
  0259d	0f 84 bc 06 00
	00		 je	 $LN337@PageDialog
  025a3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDontVerifyRescueDisk@@3HA, 0 ; bDontVerifyRescueDisk
  025aa	0f 85 af 06 00
	00		 jne	 $LN337@PageDialog

; 4117 : 					LaunchWindowsIsoBurner (hwndDlg, szRescueDiskISO);

  025b0	68 00 00 00 00	 push	 OFFSET ?szRescueDiskISO@@3PADA ; szRescueDiskISO
  025b5	53		 push	 ebx
  025b6	e8 00 00 00 00	 call	 _LaunchWindowsIsoBurner
  025bb	83 c4 08	 add	 esp, 8

; 4280 : 				return 0;

  025be	33 c0		 xor	 eax, eax
  025c0	e9 9f 2d 00 00	 jmp	 $LN342@PageDialog
$LN235@PageDialog:

; 4118 : 			}
; 4119 : 			break;
; 4120 : 
; 4121 : 		case SYSENC_RESCUE_DISK_VERIFIED_PAGE:
; 4122 : 
; 4123 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("RESCUE_DISK_DISK_VERIFIED_TITLE"));

  025c5	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@OFKHEBFP@RESCUE_DISK_DISK_VERIFIED_TITLE?$AA@
  025ca	e8 00 00 00 00	 call	 _GetString
  025cf	83 c4 04	 add	 esp, 4
  025d2	50		 push	 eax
  025d3	68 e8 03 00 00	 push	 1000			; 000003e8H
  025d8	53		 push	 ebx
  025d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  025df	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  025e5	50		 push	 eax
  025e6	ff d7		 call	 edi
  025e8	50		 push	 eax
  025e9	ff d6		 call	 esi

; 4124 : 			SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_RESCUE_DISK_DISK_VERIFIED_TITLE"));

  025eb	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@IFHHGIHF@IDD_VOL_CREATION_WIZARD_DLG_RESC@
  025f0	e8 00 00 00 00	 call	 _GetString
  025f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  025fb	83 c4 04	 add	 esp, 4
  025fe	50		 push	 eax
  025ff	52		 push	 edx
  02600	ff d6		 call	 esi

; 4125 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("RESCUE_DISK_VERIFIED_INFO"));

  02602	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@PHEMJDOE@RESCUE_DISK_VERIFIED_INFO?$AA@
  02607	e8 00 00 00 00	 call	 _GetString
  0260c	83 c4 04	 add	 esp, 4
  0260f	50		 push	 eax
  02610	68 eb 03 00 00	 push	 1003			; 000003ebH
  02615	53		 push	 ebx
  02616	ff d7		 call	 edi
  02618	50		 push	 eax
  02619	ff d6		 call	 esi

; 4126 : 
; 4127 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  0261b	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  02620	e8 00 00 00 00	 call	 _GetString
  02625	83 c4 04	 add	 esp, 4
  02628	50		 push	 eax
  02629	68 10 04 00 00	 push	 1040			; 00000410H
  0262e	53		 push	 ebx
  0262f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02635	50		 push	 eax
  02636	ff d7		 call	 edi
  02638	50		 push	 eax
  02639	ff d6		 call	 esi

; 4128 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  0263b	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  02640	e8 00 00 00 00	 call	 _GetString
  02645	83 c4 04	 add	 esp, 4
  02648	50		 push	 eax
  02649	68 11 04 00 00	 push	 1041			; 00000411H
  0264e	53		 push	 ebx
  0264f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02655	50		 push	 eax
  02656	ff d7		 call	 edi
  02658	50		 push	 eax
  02659	ff d6		 call	 esi

; 4129 : 
; 4130 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  0265b	6a 01		 push	 1
  0265d	68 10 04 00 00	 push	 1040			; 00000410H
  02662	53		 push	 ebx
  02663	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02669	50		 push	 eax
  0266a	ff d7		 call	 edi
  0266c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  02672	50		 push	 eax
  02673	ff d6		 call	 esi

; 4131 : 
; 4132 : 			// Rescue Disk has been verified, no need to go back
; 4133 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  02675	6a 00		 push	 0
  02677	68 11 04 00 00	 push	 1041			; 00000411H
  0267c	53		 push	 ebx
  0267d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02683	50		 push	 eax
  02684	ff d7		 call	 edi
  02686	50		 push	 eax
  02687	ff d6		 call	 esi

; 4134 : 
; 4135 : 			// Prevent losing the burned rescue disk by inadvertent exit
; 4136 : 			bConfirmQuit = TRUE;

  02689	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bConfirmQuit@@3HC, 1 ; bConfirmQuit

; 4280 : 				return 0;

  02693	33 c0		 xor	 eax, eax
  02695	e9 ca 2c 00 00	 jmp	 $LN342@PageDialog
$LN234@PageDialog:

; 4137 : 
; 4138 : 			break;
; 4139 : 
; 4140 : 		case SYSENC_WIPE_MODE_PAGE:
; 4141 : 		case NONSYS_INPLACE_ENC_WIPE_MODE_PAGE:
; 4142 : 			{
; 4143 : 				if (nWipeMode == TC_WIPE_1_RAND)

  0269a	83 3d 00 00 00
	00 64		 cmp	 DWORD PTR _nWipeMode, 100 ; 00000064H
  026a1	75 0a		 jne	 SHORT $LN233@PageDialog

; 4144 : 					nWipeMode = TC_WIPE_NONE;

  026a3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _nWipeMode, 0
$LN233@PageDialog:

; 4145 : 
; 4146 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("WIPE_MODE_TITLE"));

  026ad	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GEMFOMCA@WIPE_MODE_TITLE?$AA@
  026b2	e8 00 00 00 00	 call	 _GetString
  026b7	83 c4 04	 add	 esp, 4
  026ba	50		 push	 eax
  026bb	68 e8 03 00 00	 push	 1000			; 000003e8H
  026c0	53		 push	 ebx
  026c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  026c7	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  026cd	50		 push	 eax
  026ce	ff d7		 call	 edi
  026d0	50		 push	 eax
  026d1	ff d6		 call	 esi

; 4147 : 				SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_WIPE_MODE_TITLE"));

  026d3	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@IFJOGAJJ@IDD_VOL_CREATION_WIZARD_DLG_WIPE@
  026d8	e8 00 00 00 00	 call	 _GetString
  026dd	83 c4 04	 add	 esp, 4
  026e0	50		 push	 eax
  026e1	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  026e6	50		 push	 eax
  026e7	ff d6		 call	 esi

; 4148 : 
; 4149 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDT_WIPE_MODE_INFO), GetString ("INPLACE_ENC_WIPE_MODE_INFO"));

  026e9	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@KPLPAAMG@INPLACE_ENC_WIPE_MODE_INFO?$AA@
  026ee	e8 00 00 00 00	 call	 _GetString
  026f3	83 c4 04	 add	 esp, 4
  026f6	50		 push	 eax
  026f7	68 3c 04 00 00	 push	 1084			; 0000043cH
  026fc	53		 push	 ebx
  026fd	ff d7		 call	 edi
  026ff	50		 push	 eax
  02700	ff d6		 call	 esi

; 4150 : 
; 4151 : 				PopulateWipeModeCombo (GetDlgItem (hwndDlg, IDC_WIPE_MODE), 
; 4152 : 					SystemEncryptionStatus == SYSENC_STATUS_DECRYPTING && !bInPlaceEncNonSys,
; 4153 : 					TRUE);

  02702	81 3d 00 00 00
	00 58 02 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 600 ; 00000258H
  0270c	75 0f		 jne	 SHORT $LN381@PageDialog
  0270e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  02714	85 c9		 test	 ecx, ecx
  02716	75 05		 jne	 SHORT $LN381@PageDialog
  02718	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0271b	eb 02		 jmp	 SHORT $LN382@PageDialog
$LN381@PageDialog:
  0271d	33 c0		 xor	 eax, eax
$LN382@PageDialog:
  0271f	6a 01		 push	 1
  02721	50		 push	 eax
  02722	68 3d 04 00 00	 push	 1085			; 0000043dH
  02727	53		 push	 ebx
  02728	ff d7		 call	 edi
  0272a	50		 push	 eax
  0272b	e8 00 00 00 00	 call	 _PopulateWipeModeCombo
  02730	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4154 : 
; 4155 : 				SelectAlgo (GetDlgItem (hwndDlg, IDC_WIPE_MODE), (int *) &nWipeMode);

  02733	68 00 00 00 00	 push	 OFFSET _nWipeMode
  02738	68 3d 04 00 00	 push	 1085			; 0000043dH
  0273d	53		 push	 ebx
  0273e	ff d7		 call	 edi
  02740	50		 push	 eax
  02741	e8 00 00 00 00	 call	 _SelectAlgo

; 4156 : 
; 4157 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  02746	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  0274b	e8 00 00 00 00	 call	 _GetString
  02750	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4158 : 
; 4159 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));
; 4160 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);
; 4161 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);
; 4162 : 			}
; 4163 : 			break;

  02753	e9 14 ef ff ff	 jmp	 $LN719@PageDialog
$LN232@PageDialog:

; 4164 : 
; 4165 : 		case SYSENC_PRETEST_INFO_PAGE:
; 4166 : 
; 4167 : 			if (bHiddenOS)

  02758	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  0275e	85 d2		 test	 edx, edx
  02760	74 66		 je	 SHORT $LN231@PageDialog

; 4168 : 			{
; 4169 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("HIDDEN_OS_CREATION_PREINFO_TITLE"));

  02762	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@PAHHLDJJ@HIDDEN_OS_CREATION_PREINFO_TITLE@
  02767	e8 00 00 00 00	 call	 _GetString
  0276c	83 c4 04	 add	 esp, 4
  0276f	50		 push	 eax
  02770	68 e8 03 00 00	 push	 1000			; 000003e8H
  02775	53		 push	 ebx
  02776	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0277c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  02782	50		 push	 eax
  02783	ff d7		 call	 edi
  02785	50		 push	 eax
  02786	ff d6		 call	 esi

; 4170 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("HIDDEN_OS_CREATION_PREINFO_HELP"));

  02788	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@GFBCACCB@HIDDEN_OS_CREATION_PREINFO_HELP?$AA@
  0278d	e8 00 00 00 00	 call	 _GetString
  02792	83 c4 04	 add	 esp, 4
  02795	50		 push	 eax
  02796	68 eb 03 00 00	 push	 1003			; 000003ebH
  0279b	53		 push	 ebx
  0279c	ff d7		 call	 edi
  0279e	50		 push	 eax
  0279f	ff d6		 call	 esi

; 4171 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("START"));

  027a1	68 00 00 00 00	 push	 OFFSET ??_C@_05JLPDBANI@START?$AA@
  027a6	e8 00 00 00 00	 call	 _GetString
  027ab	83 c4 04	 add	 esp, 4
  027ae	50		 push	 eax
  027af	68 10 04 00 00	 push	 1040			; 00000410H
  027b4	53		 push	 ebx
  027b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  027bb	50		 push	 eax
  027bc	ff d7		 call	 edi
  027be	50		 push	 eax
  027bf	ff d6		 call	 esi

; 4172 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  027c1	6a 00		 push	 0

; 4173 : 			}
; 4174 : 			else

  027c3	e9 c6 00 00 00	 jmp	 $LN712@PageDialog
$LN231@PageDialog:

; 4175 : 			{
; 4176 : 				wchar_t finalMsg[8024] = {0};

  027c8	33 c0		 xor	 eax, eax
  027ca	68 ae 3e 00 00	 push	 16046			; 00003eaeH
  027cf	50		 push	 eax
  027d0	8d 4d 02	 lea	 ecx, DWORD PTR _finalMsg$133378[ebp+2]
  027d3	51		 push	 ecx
  027d4	66 89 45 00	 mov	 WORD PTR _finalMsg$133378[ebp], ax
  027d8	e8 00 00 00 00	 call	 _memset

; 4177 : 
; 4178 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYS_ENCRYPTION_PRETEST_TITLE"));

  027dd	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@OJLMLLFE@SYS_ENCRYPTION_PRETEST_TITLE?$AA@
  027e2	e8 00 00 00 00	 call	 _GetString
  027e7	83 c4 10	 add	 esp, 16			; 00000010H
  027ea	50		 push	 eax
  027eb	68 e8 03 00 00	 push	 1000			; 000003e8H
  027f0	53		 push	 ebx
  027f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  027f7	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  027fd	50		 push	 eax
  027fe	ff d7		 call	 edi
  02800	50		 push	 eax
  02801	ff d6		 call	 esi

; 4179 : 				SetWindowTextW (MainDlg, GetString ("IDD_VOL_CREATION_WIZARD_DLG_SYS_ENCRYPTION_PRETEST_TITLE"));

  02803	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@CPEIGHMK@IDD_VOL_CREATION_WIZARD_DLG_SYS_@
  02808	e8 00 00 00 00	 call	 _GetString
  0280d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  02813	83 c4 04	 add	 esp, 4
  02816	50		 push	 eax
  02817	52		 push	 edx
  02818	ff d6		 call	 esi

; 4180 : 
; 4181 : 				try
; 4182 : 				{
; 4183 : 					wsprintfW (finalMsg, 
; 4184 : 						GetString ("SYS_ENCRYPTION_PRETEST_INFO"), 
; 4185 : 						BootEncObj->GetSystemDriveConfiguration().DriveNumber);

  0281a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  02820	8d 85 2c fc ff
	ff		 lea	 eax, DWORD PTR $T165802[ebp]
  02826	50		 push	 eax
  02827	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0282e	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  02833	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  02836	51		 push	 ecx
  02837	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@OIIAJLEO@SYS_ENCRYPTION_PRETEST_INFO?$AA@
  0283c	e8 00 00 00 00	 call	 _GetString
  02841	83 c4 04	 add	 esp, 4
  02844	50		 push	 eax
  02845	8d 55 00	 lea	 edx, DWORD PTR _finalMsg$133378[ebp]
  02848	52		 push	 edx
  02849	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  0284f	83 c4 0c	 add	 esp, 12			; 0000000cH
  02852	8d 8d 2c fc ff
	ff		 lea	 ecx, DWORD PTR $T165802[ebp]
  02858	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ

; 4192 : 				}
; 4193 : 
; 4194 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), finalMsg);

  0285d	8d 45 00	 lea	 eax, DWORD PTR _finalMsg$133378[ebp]
  02860	50		 push	 eax
  02861	68 eb 03 00 00	 push	 1003			; 000003ebH
  02866	53		 push	 ebx
  02867	ff d7		 call	 edi
  02869	50		 push	 eax
  0286a	ff d6		 call	 esi

; 4195 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("TEST"));

  0286c	68 00 00 00 00	 push	 OFFSET ??_C@_04OIKJMBFP@TEST?$AA@
  02871	e8 00 00 00 00	 call	 _GetString
  02876	83 c4 04	 add	 esp, 4
  02879	50		 push	 eax
  0287a	68 10 04 00 00	 push	 1040			; 00000410H
  0287f	53		 push	 ebx
  02880	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02886	50		 push	 eax
  02887	ff d7		 call	 edi
  02889	50		 push	 eax
  0288a	ff d6		 call	 esi

; 4196 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  0288c	6a 01		 push	 1
$LN712@PageDialog:
  0288e	68 11 04 00 00	 push	 1041			; 00000411H
  02893	53		 push	 ebx
  02894	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0289a	50		 push	 eax
  0289b	ff d7		 call	 edi
  0289d	50		 push	 eax
  0289e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4197 : 			}
; 4198 : 
; 4199 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  028a4	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  028a9	e8 00 00 00 00	 call	 _GetString
  028ae	83 c4 04	 add	 esp, 4
  028b1	50		 push	 eax
  028b2	68 11 04 00 00	 push	 1041			; 00000411H
  028b7	53		 push	 ebx
  028b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  028be	50		 push	 eax
  028bf	ff d7		 call	 edi
  028c1	50		 push	 eax
  028c2	ff d6		 call	 esi

; 4200 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  028c4	6a 01		 push	 1
  028c6	68 10 04 00 00	 push	 1040			; 00000410H
$LN721@PageDialog:
  028cb	53		 push	 ebx
  028cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  028d2	50		 push	 eax
  028d3	ff d7		 call	 edi
  028d5	50		 push	 eax
  028d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4280 : 				return 0;

  028dc	33 c0		 xor	 eax, eax
  028de	e9 81 2a 00 00	 jmp	 $LN342@PageDialog
__catch$_PageDialogProc@16$0:

; 4186 : 				}
; 4187 : 				catch (Exception &e)
; 4188 : 				{
; 4189 : 					e.Show (hwndDlg);

  028e3	8b 4d ac	 mov	 ecx, DWORD PTR _e$133384[ebp]
  028e6	8b 11		 mov	 edx, DWORD PTR [ecx]
  028e8	8b 45 ec	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  028eb	8b 12		 mov	 edx, DWORD PTR [edx]
  028ed	50		 push	 eax
  028ee	ff d2		 call	 edx

; 4190 : 					EndMainDlg (MainDlg);

  028f0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  028f6	e8 00 00 00 00	 call	 _EndMainDlg

; 4191 : 					return 0;

  028fb	b8 00 00 00 00	 mov	 eax, $LN451@PageDialog
  02900	c3		 ret	 0
$LN228@PageDialog:

; 4201 : 
; 4202 : 			break;
; 4203 : 
; 4204 : 		case SYSENC_PRETEST_RESULT_PAGE:
; 4205 : 
; 4206 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYS_ENCRYPTION_PRETEST_RESULT_TITLE"));

  02901	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@FEPHBNLJ@SYS_ENCRYPTION_PRETEST_RESULT_TI@
  02906	e8 00 00 00 00	 call	 _GetString
  0290b	83 c4 04	 add	 esp, 4
  0290e	50		 push	 eax
  0290f	68 e8 03 00 00	 push	 1000			; 000003e8H
  02914	53		 push	 ebx
  02915	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0291b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  02921	50		 push	 eax
  02922	ff d7		 call	 edi
  02924	50		 push	 eax
  02925	ff d6		 call	 esi

; 4207 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SYS_ENCRYPTION_PRETEST_RESULT_INFO"));

  02927	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@BONEGKLO@SYS_ENCRYPTION_PRETEST_RESULT_IN@
  0292c	e8 00 00 00 00	 call	 _GetString
  02931	83 c4 04	 add	 esp, 4
  02934	50		 push	 eax
  02935	68 eb 03 00 00	 push	 1003			; 000003ebH
  0293a	53		 push	 ebx
  0293b	ff d7		 call	 edi
  0293d	50		 push	 eax
  0293e	ff d6		 call	 esi

; 4208 : 
; 4209 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("ENCRYPT"));

  02940	68 00 00 00 00	 push	 OFFSET ??_C@_07CAOFPAJK@ENCRYPT?$AA@
$LN720@PageDialog:
  02945	e8 00 00 00 00	 call	 _GetString
  0294a	83 c4 04	 add	 esp, 4
  0294d	50		 push	 eax
  0294e	68 10 04 00 00	 push	 1040			; 00000410H
  02953	53		 push	 ebx
  02954	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0295a	50		 push	 eax
  0295b	ff d7		 call	 edi
  0295d	50		 push	 eax
  0295e	ff d6		 call	 esi

; 4210 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  02960	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  02965	e8 00 00 00 00	 call	 _GetString
  0296a	83 c4 04	 add	 esp, 4
  0296d	50		 push	 eax
  0296e	68 11 04 00 00	 push	 1041			; 00000411H
  02973	53		 push	 ebx
  02974	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0297a	50		 push	 eax
  0297b	ff d7		 call	 edi
  0297d	50		 push	 eax
  0297e	ff d6		 call	 esi

; 4211 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("DEFER"));

  02980	68 00 00 00 00	 push	 OFFSET ??_C@_05KEELGAD@DEFER?$AA@
  02985	e8 00 00 00 00	 call	 _GetString
  0298a	83 c4 04	 add	 esp, 4
  0298d	50		 push	 eax
  0298e	6a 02		 push	 2
  02990	53		 push	 ebx
  02991	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02997	50		 push	 eax
  02998	ff d7		 call	 edi
  0299a	50		 push	 eax
  0299b	ff d6		 call	 esi

; 4212 : 
; 4213 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  0299d	6a 01		 push	 1
  0299f	68 10 04 00 00	 push	 1040			; 00000410H
  029a4	53		 push	 ebx
  029a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  029ab	50		 push	 eax
  029ac	ff d7		 call	 edi
  029ae	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  029b4	50		 push	 eax
  029b5	ff d6		 call	 esi

; 4214 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  029b7	6a 00		 push	 0
  029b9	68 11 04 00 00	 push	 1041			; 00000411H
  029be	53		 push	 ebx
  029bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  029c5	50		 push	 eax
  029c6	ff d7		 call	 edi
  029c8	50		 push	 eax
  029c9	ff d6		 call	 esi

; 4215 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), TRUE);

  029cb	6a 01		 push	 1
  029cd	6a 02		 push	 2

; 4668 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  029cf	53		 push	 ebx
  029d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  029d6	50		 push	 eax
  029d7	ff d7		 call	 edi
  029d9	50		 push	 eax
  029da	ff d6		 call	 esi
  029dc	33 c0		 xor	 eax, eax
  029de	e9 81 29 00 00	 jmp	 $LN342@PageDialog
$LN227@PageDialog:

; 4216 : 
; 4217 : 			break;
; 4218 : 
; 4219 : 		case SYSENC_ENCRYPTION_PAGE:
; 4220 : 
; 4221 : 			if (CreateSysEncMutex ())

  029e3	e8 00 00 00 00	 call	 _CreateSysEncMutex
  029e8	85 c0		 test	 eax, eax
  029ea	0f 84 57 02 00
	00		 je	 $LN226@PageDialog

; 4222 : 			{
; 4223 : 				try
; 4224 : 				{
; 4225 : 					BootEncStatus = BootEncObj->GetStatus();

  029f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  029f6	8d 85 0a fe ff
	ff		 lea	 eax, DWORD PTR $T165804[ebp]
  029fc	50		 push	 eax
  029fd	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  02a04	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus

; 4234 : 				}
; 4235 : 
; 4236 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE),
; 4237 : 					GetString (SystemEncryptionStatus != SYSENC_STATUS_DECRYPTING ? "ENCRYPTION" : "DECRYPTION"));

  02a09	81 3d 00 00 00
	00 58 02 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 600 ; 00000258H
  02a13	8b f0		 mov	 esi, eax
  02a15	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  02a1a	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  02a1f	f3 a5		 rep movsd
  02a21	66 a5		 movsw
  02a23	8b 0d 3e 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62
  02a29	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bSystemEncryptionInProgress@@3HA, ecx ; bSystemEncryptionInProgress
  02a2f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@MHHIHFIN@ENCRYPTION?$AA@
  02a34	75 05		 jne	 SHORT $LN384@PageDialog
  02a36	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@POBGFBLK@DECRYPTION?$AA@
$LN384@PageDialog:
  02a3b	50		 push	 eax
  02a3c	e8 00 00 00 00	 call	 _GetString
  02a41	83 c4 04	 add	 esp, 4
  02a44	50		 push	 eax
  02a45	68 e8 03 00 00	 push	 1000			; 000003e8H
  02a4a	53		 push	 ebx
  02a4b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02a51	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  02a57	50		 push	 eax
  02a58	ff d6		 call	 esi
  02a5a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  02a60	50		 push	 eax
  02a61	ff d7		 call	 edi

; 4238 : 
; 4239 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SYSENC_ENCRYPTION_PAGE_INFO"));

  02a63	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@LFGBLAAC@SYSENC_ENCRYPTION_PAGE_INFO?$AA@
  02a68	e8 00 00 00 00	 call	 _GetString
  02a6d	83 c4 04	 add	 esp, 4
  02a70	50		 push	 eax
  02a71	68 eb 03 00 00	 push	 1003			; 000003ebH
  02a76	53		 push	 ebx
  02a77	ff d6		 call	 esi
  02a79	50		 push	 eax
  02a7a	ff d7		 call	 edi

; 4240 : 
; 4241 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("DEFER"));

  02a7c	68 00 00 00 00	 push	 OFFSET ??_C@_05KEELGAD@DEFER?$AA@
  02a81	e8 00 00 00 00	 call	 _GetString
  02a86	83 c4 04	 add	 esp, 4
  02a89	50		 push	 eax
  02a8a	6a 02		 push	 2
  02a8c	53		 push	 ebx
  02a8d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02a93	50		 push	 eax
  02a94	ff d6		 call	 esi
  02a96	50		 push	 eax
  02a97	ff d7		 call	 edi

; 4242 : 
; 4243 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  02a99	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  02a9e	e8 00 00 00 00	 call	 _GetString
  02aa3	83 c4 04	 add	 esp, 4
  02aa6	50		 push	 eax
  02aa7	68 11 04 00 00	 push	 1041			; 00000411H
  02aac	53		 push	 ebx
  02aad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02ab3	50		 push	 eax
  02ab4	ff d6		 call	 esi
  02ab6	50		 push	 eax
  02ab7	ff d7		 call	 edi

; 4244 : 
; 4245 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT),
; 4246 : 					GetString (SystemEncryptionStatus != SYSENC_STATUS_DECRYPTING ? "ENCRYPT" : "DECRYPT"));

  02ab9	81 3d 00 00 00
	00 58 02 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 600 ; 00000258H
  02ac3	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07CAOFPAJK@ENCRYPT?$AA@
  02ac8	75 05		 jne	 SHORT $LN386@PageDialog
  02aca	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07OOEIKEPO@DECRYPT?$AA@
$LN386@PageDialog:
  02acf	50		 push	 eax
  02ad0	e8 00 00 00 00	 call	 _GetString
  02ad5	83 c4 04	 add	 esp, 4
  02ad8	50		 push	 eax
  02ad9	68 10 04 00 00	 push	 1040			; 00000410H
  02ade	53		 push	 ebx
  02adf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02ae5	50		 push	 eax
  02ae6	ff d6		 call	 esi
  02ae8	50		 push	 eax
  02ae9	ff d7		 call	 edi

; 4247 : 
; 4248 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_PAUSE),
; 4249 : 					GetString (bSystemEncryptionInProgress ? "IDC_PAUSE" : "RESUME"));

  02aeb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bSystemEncryptionInProgress@@3HA, 0 ; bSystemEncryptionInProgress
  02af2	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09PJBBBIIP@IDC_PAUSE?$AA@
  02af7	75 05		 jne	 SHORT $LN388@PageDialog
  02af9	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06PPGAKMJI@RESUME?$AA@
$LN388@PageDialog:
  02afe	50		 push	 eax
  02aff	e8 00 00 00 00	 call	 _GetString
  02b04	83 c4 04	 add	 esp, 4
  02b07	50		 push	 eax
  02b08	68 41 04 00 00	 push	 1089			; 00000441H
  02b0d	53		 push	 ebx
  02b0e	ff d6		 call	 esi
  02b10	50		 push	 eax
  02b11	ff d7		 call	 edi

; 4250 : 
; 4251 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_PAUSE), BootEncStatus.DriveEncrypted);

  02b13	8b 15 0e 00 00
	00		 mov	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+14
  02b19	52		 push	 edx
  02b1a	68 41 04 00 00	 push	 1089			; 00000441H
  02b1f	53		 push	 ebx
  02b20	ff d6		 call	 esi
  02b22	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  02b28	50		 push	 eax
  02b29	ff d7		 call	 edi

; 4252 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  02b2b	6a 00		 push	 0
  02b2d	68 11 04 00 00	 push	 1041			; 00000411H
  02b32	53		 push	 ebx
  02b33	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02b39	50		 push	 eax
  02b3a	ff d6		 call	 esi
  02b3c	50		 push	 eax
  02b3d	ff d7		 call	 edi

; 4253 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), !BootEncStatus.SetupInProgress);

  02b3f	33 c0		 xor	 eax, eax
  02b41	39 05 3e 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62, eax
  02b47	0f 94 c0	 sete	 al
  02b4a	50		 push	 eax
  02b4b	68 10 04 00 00	 push	 1040			; 00000410H
  02b50	53		 push	 ebx
  02b51	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02b57	50		 push	 eax
  02b58	ff d6		 call	 esi
  02b5a	50		 push	 eax
  02b5b	ff d7		 call	 edi

; 4254 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), TRUE);

  02b5d	6a 01		 push	 1
  02b5f	6a 02		 push	 2
  02b61	53		 push	 ebx
  02b62	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02b68	50		 push	 eax
  02b69	ff d6		 call	 esi
  02b6b	50		 push	 eax
  02b6c	ff d7		 call	 edi

; 4255 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDHELP), TRUE);

  02b6e	6a 01		 push	 1
  02b70	6a 09		 push	 9
  02b72	53		 push	 ebx
  02b73	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02b79	50		 push	 eax
  02b7a	ff d6		 call	 esi
  02b7c	50		 push	 eax
  02b7d	ff d7		 call	 edi

; 4256 : 
; 4257 : 				ToHyperlink (hwndDlg, IDC_MORE_INFO_SYS_ENCRYPTION);

  02b7f	68 43 04 00 00	 push	 1091			; 00000443H
  02b84	53		 push	 ebx
  02b85	e8 00 00 00 00	 call	 _ToHyperlink
  02b8a	83 c4 08	 add	 esp, 8

; 4258 : 
; 4259 : 				if (SystemEncryptionStatus == SYSENC_STATUS_DECRYPTING)

  02b8d	81 3d 00 00 00
	00 58 02 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 600 ; 00000258H
  02b97	75 2a		 jne	 SHORT $LN224@PageDialog

; 4260 : 				{
; 4261 : 					nWipeMode = TC_WIPE_NONE;
; 4262 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_WIPE_MODE), FALSE);

  02b99	6a 00		 push	 0
  02b9b	68 3d 04 00 00	 push	 1085			; 0000043dH
  02ba0	53		 push	 ebx
  02ba1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _nWipeMode, 0
  02bab	ff d6		 call	 esi
  02bad	50		 push	 eax
  02bae	ff d7		 call	 edi

; 4263 : 					EnableWindow (GetDlgItem (hwndDlg, IDT_WIPE_MODE), FALSE);

  02bb0	6a 00		 push	 0
  02bb2	68 42 04 00 00	 push	 1090			; 00000442H
  02bb7	53		 push	 ebx
  02bb8	ff d6		 call	 esi
  02bba	50		 push	 eax
  02bbb	ff d7		 call	 edi

; 4264 : 					PopulateWipeModeCombo (GetDlgItem (hwndDlg, IDC_WIPE_MODE), TRUE, TRUE);

  02bbd	6a 01		 push	 1
  02bbf	6a 01		 push	 1

; 4265 : 					SelectAlgo (GetDlgItem (hwndDlg, IDC_WIPE_MODE), (int *) &nWipeMode);
; 4266 : 				}
; 4267 : 				else

  02bc1	eb 1b		 jmp	 SHORT $LN713@PageDialog
$LN224@PageDialog:

; 4268 : 				{
; 4269 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_WIPE_MODE), !bSystemEncryptionInProgress);

  02bc3	33 c9		 xor	 ecx, ecx
  02bc5	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?bSystemEncryptionInProgress@@3HA, ecx ; bSystemEncryptionInProgress
  02bcb	0f 94 c1	 sete	 cl
  02bce	51		 push	 ecx
  02bcf	68 3d 04 00 00	 push	 1085			; 0000043dH
  02bd4	53		 push	 ebx
  02bd5	ff d6		 call	 esi
  02bd7	50		 push	 eax
  02bd8	ff d7		 call	 edi

; 4270 : 					PopulateWipeModeCombo (GetDlgItem (hwndDlg, IDC_WIPE_MODE), FALSE, TRUE);

  02bda	6a 01		 push	 1
  02bdc	6a 00		 push	 0
$LN713@PageDialog:
  02bde	68 3d 04 00 00	 push	 1085			; 0000043dH
  02be3	53		 push	 ebx
  02be4	ff d6		 call	 esi
  02be6	50		 push	 eax
  02be7	e8 00 00 00 00	 call	 _PopulateWipeModeCombo
  02bec	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4271 : 					SelectAlgo (GetDlgItem (hwndDlg, IDC_WIPE_MODE), (int *) &nWipeMode);

  02bef	68 00 00 00 00	 push	 OFFSET _nWipeMode
  02bf4	68 3d 04 00 00	 push	 1085			; 0000043dH
  02bf9	53		 push	 ebx
  02bfa	ff d6		 call	 esi
  02bfc	50		 push	 eax
  02bfd	e8 00 00 00 00	 call	 _SelectAlgo
  02c02	83 c4 08	 add	 esp, 8

; 4272 : 				}
; 4273 : 
; 4274 : 				PostMessage (hwndDlg, TC_APPMSG_PERFORM_POST_SYSENC_WMINIT_TASKS, 0, 0);

  02c05	6a 00		 push	 0
  02c07	6a 00		 push	 0
  02c09	68 31 81 00 00	 push	 33073			; 00008131H
  02c0e	53		 push	 ebx
  02c0f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 4281 : 			}
; 4282 : 			return 0;

  02c15	33 c0		 xor	 eax, eax
  02c17	e9 48 27 00 00	 jmp	 $LN342@PageDialog
__catch$_PageDialogProc@16$2:

; 4226 : 					bSystemEncryptionInProgress = BootEncStatus.SetupInProgress;
; 4227 : 				}
; 4228 : 				catch (Exception &e)
; 4229 : 				{
; 4230 : 					e.Show (hwndDlg);

  02c1c	8b 4d a4	 mov	 ecx, DWORD PTR _e$133394[ebp]
  02c1f	8b 11		 mov	 edx, DWORD PTR [ecx]
  02c21	8b 45 ec	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  02c24	8b 12		 mov	 edx, DWORD PTR [edx]
  02c26	50		 push	 eax
  02c27	ff d2		 call	 edx

; 4231 : 					Error ("ERR_GETTING_SYSTEM_ENCRYPTION_STATUS");

  02c29	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@
  02c2e	e8 00 00 00 00	 call	 _Error

; 4232 : 					EndMainDlg (MainDlg);

  02c33	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  02c39	83 c4 04	 add	 esp, 4
  02c3c	e8 00 00 00 00	 call	 _EndMainDlg

; 4233 : 					return 0;

  02c41	b8 00 00 00 00	 mov	 eax, $LN451@PageDialog
  02c46	c3		 ret	 0
$LN226@PageDialog:

; 4275 : 			}
; 4276 : 			else
; 4277 : 			{
; 4278 : 				Error ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  02c47	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  02c4c	e8 00 00 00 00	 call	 _Error
$LN737@PageDialog:

; 4279 : 				EndMainDlg (MainDlg);

  02c51	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  02c57	83 c4 04	 add	 esp, 4
  02c5a	e8 00 00 00 00	 call	 _EndMainDlg
$LN337@PageDialog:

; 4280 : 				return 0;

  02c5f	33 c0		 xor	 eax, eax
  02c61	e9 fe 26 00 00	 jmp	 $LN342@PageDialog
$LN221@PageDialog:

; 4283 : 
; 4284 : 		case NONSYS_INPLACE_ENC_RESUME_PARTITION_SEL_PAGE:
; 4285 : 
; 4286 : 			{
; 4287 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("FILE_TITLE"));

  02c66	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DGHBDDNJ@FILE_TITLE?$AA@
  02c6b	e8 00 00 00 00	 call	 _GetString
  02c70	83 c4 04	 add	 esp, 4
  02c73	50		 push	 eax
  02c74	68 e8 03 00 00	 push	 1000			; 000003e8H
  02c79	53		 push	 ebx
  02c7a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02c80	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  02c86	50		 push	 eax
  02c87	ff d7		 call	 edi
  02c89	50		 push	 eax
  02c8a	ff d6		 call	 esi

; 4288 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("NONSYS_INPLACE_ENC_RESUME_VOL_SELECT_HELP"));

  02c8c	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@KEEMKNMD@NONSYS_INPLACE_ENC_RESUME_VOL_SE@
  02c91	e8 00 00 00 00	 call	 _GetString
  02c96	83 c4 04	 add	 esp, 4
  02c99	50		 push	 eax
  02c9a	68 eb 03 00 00	 push	 1003			; 000003ebH
  02c9f	53		 push	 ebx
  02ca0	ff d7		 call	 edi
  02ca2	50		 push	 eax
  02ca3	ff d6		 call	 esi

; 4289 : 
; 4290 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  02ca5	6a 01		 push	 1
  02ca7	68 11 04 00 00	 push	 1041			; 00000411H
  02cac	53		 push	 ebx
  02cad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02cb3	50		 push	 eax
  02cb4	ff d7		 call	 edi
  02cb6	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  02cbc	50		 push	 eax
  02cbd	ff d6		 call	 esi

; 4291 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), FALSE);

  02cbf	6a 00		 push	 0
  02cc1	68 10 04 00 00	 push	 1040			; 00000410H
  02cc6	53		 push	 ebx
  02cc7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02ccd	50		 push	 eax
  02cce	ff d7		 call	 edi
  02cd0	50		 push	 eax
  02cd1	ff d6		 call	 esi

; 4292 : 				
; 4293 : 				foreach (const HostDevice &device, DeferredNonSysInPlaceEncDevices)

  02cd3	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _$S1$133542[ebp]
  02cd9	68 00 00 00 00	 push	 OFFSET ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A ; DeferredNonSysInPlaceEncDevices
  02cde	50		 push	 eax
  02cdf	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
  02ce4	83 c4 08	 add	 esp, 8
  02ce7	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _$S1$133542[ebp]
  02ced	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  02cf0	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _$S1$133542[ebp]
  02cf6	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  02cfd	ff d0		 call	 eax
  02cff	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SendMessageA@16
  02d05	84 c0		 test	 al, al
  02d07	0f 84 8c 00 00
	00		 je	 $LN218@PageDialog
  02d0d	8d 49 00	 npad	 3
$LL220@PageDialog:
  02d10	8d 4d 98	 lea	 ecx, DWORD PTR _$S1$133542[ebp+40]
  02d13	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEABUHostDevice@@XZ ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator*
  02d18	80 bd 75 ff ff
	ff 00		 cmp	 BYTE PTR _$S1$133542[ebp+5], 0
  02d1f	89 45 e8	 mov	 DWORD PTR _device$133546[ebp], eax
  02d22	0f 94 c0	 sete	 al
  02d25	88 85 75 ff ff
	ff		 mov	 BYTE PTR _$S1$133542[ebp+5], al
  02d2b	84 c0		 test	 al, al
  02d2d	74 40		 je	 SHORT $LN219@PageDialog
  02d2f	90		 npad	 1
$LL528@PageDialog:

; 4294 : 				{
; 4295 : 					SendMessage (GetDlgItem (hwndDlg, IDC_LIST_BOX), LB_ADDSTRING, 0, (LPARAM) device.Path.c_str());

  02d30	8b 45 e8	 mov	 eax, DWORD PTR _device$133546[ebp]
  02d33	83 78 58 10	 cmp	 DWORD PTR [eax+88], 16	; 00000010H
  02d37	72 05		 jb	 SHORT $LN536@PageDialog
  02d39	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  02d3c	eb 03		 jmp	 SHORT $LN537@PageDialog
$LN536@PageDialog:
  02d3e	83 c0 44	 add	 eax, 68			; 00000044H
$LN537@PageDialog:
  02d41	50		 push	 eax
  02d42	6a 00		 push	 0
  02d44	68 80 01 00 00	 push	 384			; 00000180H
  02d49	68 fa 03 00 00	 push	 1018			; 000003faH
  02d4e	53		 push	 ebx
  02d4f	ff d7		 call	 edi
  02d51	50		 push	 eax
  02d52	ff d6		 call	 esi
  02d54	80 bd 75 ff ff
	ff 00		 cmp	 BYTE PTR _$S1$133542[ebp+5], 0
  02d5b	c6 85 74 ff ff
	ff 01		 mov	 BYTE PTR _$S1$133542[ebp+4], 1
  02d62	0f 94 c0	 sete	 al
  02d65	88 85 75 ff ff
	ff		 mov	 BYTE PTR _$S1$133542[ebp+5], al
  02d6b	84 c0		 test	 al, al
  02d6d	75 c1		 jne	 SHORT $LL528@PageDialog
$LN219@PageDialog:

; 4292 : 				
; 4293 : 				foreach (const HostDevice &device, DeferredNonSysInPlaceEncDevices)

  02d6f	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _$S1$133542[ebp]
  02d75	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  02d78	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _$S1$133542[ebp]
  02d7e	ff d0		 call	 eax
  02d80	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _$S1$133542[ebp]
  02d86	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  02d89	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _$S1$133542[ebp]
  02d8f	ff d0		 call	 eax
  02d91	84 c0		 test	 al, al
  02d93	0f 85 77 ff ff
	ff		 jne	 $LL220@PageDialog
$LN218@PageDialog:

; 4296 : 				}

  02d99	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _$S1$133542[ebp]
  02d9f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  02da6	e8 00 00 00 00	 call	 ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ

; 4297 : 				 
; 4298 : 				// Deselect all
; 4299 : 				SendMessage (GetDlgItem (hwndDlg, IDC_LIST_BOX), LB_SETCURSEL, (WPARAM) -1, 0);

  02dab	6a 00		 push	 0
  02dad	6a ff		 push	 -1
  02daf	68 86 01 00 00	 push	 390			; 00000186H
  02db4	68 fa 03 00 00	 push	 1018			; 000003faH
  02db9	53		 push	 ebx
  02dba	ff d7		 call	 edi
  02dbc	50		 push	 eax
  02dbd	ff d6		 call	 esi
  02dbf	33 c0		 xor	 eax, eax
  02dc1	e9 9e 25 00 00	 jmp	 $LN342@PageDialog
$LN214@PageDialog:

; 4300 : 			}
; 4301 : 
; 4302 : 			break;
; 4303 : 
; 4304 : 		case NONSYS_INPLACE_ENC_ENCRYPTION_PAGE:
; 4305 : 
; 4306 : 			if (bInPlaceEncNonSysResumed)

  02dc6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSysResumed
  02dcc	85 c9		 test	 ecx, ecx
  02dce	74 1f		 je	 SHORT $LN212@PageDialog

; 4307 : 			{
; 4308 : 				WipeAlgorithmId savedWipeAlgorithm = TC_WIPE_NONE;
; 4309 : 
; 4310 : 				if (LoadNonSysInPlaceEncSettings (&savedWipeAlgorithm) != 0)

  02dd0	8d 55 d4	 lea	 edx, DWORD PTR _savedWipeAlgorithm$133579[ebp]
  02dd3	52		 push	 edx
  02dd4	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _savedWipeAlgorithm$133579[ebp], 0
  02ddb	e8 00 00 00 00	 call	 _LoadNonSysInPlaceEncSettings
  02de0	83 c4 04	 add	 esp, 4
  02de3	85 c0		 test	 eax, eax
  02de5	74 08		 je	 SHORT $LN212@PageDialog

; 4311 : 					nWipeMode = savedWipeAlgorithm;

  02de7	8b 45 d4	 mov	 eax, DWORD PTR _savedWipeAlgorithm$133579[ebp]
  02dea	a3 00 00 00 00	 mov	 DWORD PTR _nWipeMode, eax
$LN212@PageDialog:

; 4312 : 			}
; 4313 : 
; 4314 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("ENCRYPTION"));

  02def	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MHHIHFIN@ENCRYPTION?$AA@
  02df4	e8 00 00 00 00	 call	 _GetString
  02df9	83 c4 04	 add	 esp, 4
  02dfc	50		 push	 eax
  02dfd	68 e8 03 00 00	 push	 1000			; 000003e8H
  02e02	53		 push	 ebx
  02e03	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02e09	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  02e0f	50		 push	 eax
  02e10	ff d7		 call	 edi
  02e12	50		 push	 eax
  02e13	ff d6		 call	 esi

; 4315 : 
; 4316 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("NONSYS_INPLACE_ENC_ENCRYPTION_PAGE_INFO"));

  02e15	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@MDGBIFPN@NONSYS_INPLACE_ENC_ENCRYPTION_PA@
  02e1a	e8 00 00 00 00	 call	 _GetString
  02e1f	83 c4 04	 add	 esp, 4
  02e22	50		 push	 eax
  02e23	68 eb 03 00 00	 push	 1003			; 000003ebH
  02e28	53		 push	 ebx
  02e29	ff d7		 call	 edi
  02e2b	50		 push	 eax
  02e2c	ff d6		 call	 esi

; 4317 : 
; 4318 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString (bInPlaceEncNonSysResumed ? "DEFER" : "CANCEL"));

  02e2e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSysResumed
  02e34	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05KEELGAD@DEFER?$AA@
  02e39	85 c9		 test	 ecx, ecx
  02e3b	75 05		 jne	 SHORT $LN392@PageDialog
  02e3d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
$LN392@PageDialog:
  02e42	50		 push	 eax
  02e43	e8 00 00 00 00	 call	 _GetString
  02e48	83 c4 04	 add	 esp, 4
  02e4b	50		 push	 eax
  02e4c	6a 02		 push	 2
  02e4e	53		 push	 ebx
  02e4f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02e55	50		 push	 eax
  02e56	ff d7		 call	 edi
  02e58	50		 push	 eax
  02e59	ff d6		 call	 esi

; 4319 : 
; 4320 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  02e5b	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  02e60	e8 00 00 00 00	 call	 _GetString
  02e65	83 c4 04	 add	 esp, 4
  02e68	50		 push	 eax
  02e69	68 11 04 00 00	 push	 1041			; 00000411H
  02e6e	53		 push	 ebx
  02e6f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02e75	50		 push	 eax
  02e76	ff d7		 call	 edi
  02e78	50		 push	 eax
  02e79	ff d6		 call	 esi

; 4321 : 
; 4322 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString (bInPlaceEncNonSysResumed ? "RESUME" : "ENCRYPT"));

  02e7b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSysResumed
  02e81	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06PPGAKMJI@RESUME?$AA@
  02e86	85 d2		 test	 edx, edx
  02e88	75 05		 jne	 SHORT $LN394@PageDialog
  02e8a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07CAOFPAJK@ENCRYPT?$AA@
$LN394@PageDialog:
  02e8f	50		 push	 eax
  02e90	e8 00 00 00 00	 call	 _GetString
  02e95	83 c4 04	 add	 esp, 4
  02e98	50		 push	 eax
  02e99	68 10 04 00 00	 push	 1040			; 00000410H
  02e9e	53		 push	 ebx
  02e9f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02ea5	50		 push	 eax
  02ea6	ff d7		 call	 edi
  02ea8	50		 push	 eax
  02ea9	ff d6		 call	 esi

; 4323 : 
; 4324 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_PAUSE), GetString ("IDC_PAUSE"));

  02eab	68 00 00 00 00	 push	 OFFSET ??_C@_09PJBBBIIP@IDC_PAUSE?$AA@
  02eb0	e8 00 00 00 00	 call	 _GetString
  02eb5	83 c4 04	 add	 esp, 4
  02eb8	50		 push	 eax
  02eb9	68 41 04 00 00	 push	 1089			; 00000441H
  02ebe	53		 push	 ebx
  02ebf	ff d7		 call	 edi
  02ec1	50		 push	 eax
  02ec2	ff d6		 call	 esi

; 4325 : 
; 4326 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), !bInPlaceEncNonSysResumed);

  02ec4	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSysResumed
  02ec9	f7 d8		 neg	 eax
  02ecb	1b c0		 sbb	 eax, eax
  02ecd	40		 inc	 eax
  02ece	50		 push	 eax
  02ecf	68 11 04 00 00	 push	 1041			; 00000411H
  02ed4	53		 push	 ebx
  02ed5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02edb	50		 push	 eax
  02edc	ff d7		 call	 edi
  02ede	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  02ee4	50		 push	 eax
  02ee5	ff d6		 call	 esi

; 4327 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  02ee7	6a 01		 push	 1
  02ee9	68 10 04 00 00	 push	 1040			; 00000410H
  02eee	53		 push	 ebx
  02eef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02ef5	50		 push	 eax
  02ef6	ff d7		 call	 edi
  02ef8	50		 push	 eax
  02ef9	ff d6		 call	 esi

; 4328 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), TRUE);

  02efb	6a 01		 push	 1
  02efd	6a 02		 push	 2
  02eff	53		 push	 ebx
  02f00	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02f06	50		 push	 eax
  02f07	ff d7		 call	 edi
  02f09	50		 push	 eax
  02f0a	ff d6		 call	 esi

; 4329 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDHELP), TRUE);

  02f0c	6a 01		 push	 1
  02f0e	6a 09		 push	 9
  02f10	53		 push	 ebx
  02f11	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02f17	50		 push	 eax
  02f18	ff d7		 call	 edi
  02f1a	50		 push	 eax
  02f1b	ff d6		 call	 esi

; 4330 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_PAUSE), FALSE);

  02f1d	6a 00		 push	 0
  02f1f	68 41 04 00 00	 push	 1089			; 00000441H
  02f24	53		 push	 ebx
  02f25	ff d7		 call	 edi
  02f27	50		 push	 eax
  02f28	ff d6		 call	 esi

; 4331 : 
; 4332 : 			ShowWindow (GetDlgItem (hwndDlg, IDC_MORE_INFO_SYS_ENCRYPTION), SW_HIDE);

  02f2a	6a 00		 push	 0
  02f2c	68 43 04 00 00	 push	 1091			; 00000443H
  02f31	53		 push	 ebx
  02f32	ff d7		 call	 edi
  02f34	50		 push	 eax
  02f35	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 4333 : 
; 4334 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_WIPE_MODE), TRUE);

  02f3b	6a 01		 push	 1
  02f3d	68 3d 04 00 00	 push	 1085			; 0000043dH
  02f42	53		 push	 ebx
  02f43	ff d7		 call	 edi
  02f45	50		 push	 eax
  02f46	ff d6		 call	 esi

; 4335 : 			PopulateWipeModeCombo (GetDlgItem (hwndDlg, IDC_WIPE_MODE), FALSE, TRUE);

  02f48	6a 01		 push	 1
  02f4a	6a 00		 push	 0
  02f4c	68 3d 04 00 00	 push	 1085			; 0000043dH
  02f51	53		 push	 ebx
  02f52	ff d7		 call	 edi
  02f54	50		 push	 eax
  02f55	e8 00 00 00 00	 call	 _PopulateWipeModeCombo
  02f5a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4336 : 			SelectAlgo (GetDlgItem (hwndDlg, IDC_WIPE_MODE), (int *) &nWipeMode);

  02f5d	68 00 00 00 00	 push	 OFFSET _nWipeMode
  02f62	68 3d 04 00 00	 push	 1085			; 0000043dH
  02f67	53		 push	 ebx
  02f68	ff d7		 call	 edi
  02f6a	50		 push	 eax
  02f6b	e8 00 00 00 00	 call	 _SelectAlgo
  02f70	83 c4 08	 add	 esp, 8
  02f73	33 c0		 xor	 eax, eax
  02f75	e9 ea 23 00 00	 jmp	 $LN342@PageDialog
$LN211@PageDialog:

; 4337 : 
; 4338 : 			break;
; 4339 : 
; 4340 : 		case NONSYS_INPLACE_ENC_ENCRYPTION_FINISHED_PAGE:
; 4341 : 
; 4342 : 			bConfirmQuit = FALSE;
; 4343 : 
; 4344 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("NONSYS_INPLACE_ENC_FINISHED_TITLE"));

  02f7a	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@LOJCKPNA@NONSYS_INPLACE_ENC_FINISHED_TITL@
  02f7f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bConfirmQuit@@3HC, 0 ; bConfirmQuit
  02f89	e8 00 00 00 00	 call	 _GetString
  02f8e	83 c4 04	 add	 esp, 4
  02f91	50		 push	 eax
  02f92	68 e8 03 00 00	 push	 1000			; 000003e8H
  02f97	53		 push	 ebx
  02f98	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02f9e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  02fa4	50		 push	 eax
  02fa5	ff d7		 call	 edi
  02fa7	50		 push	 eax
  02fa8	ff d6		 call	 esi

; 4345 : 
; 4346 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("NONSYS_INPLACE_ENC_FINISHED_INFO"));

  02faa	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@KOCBDKDK@NONSYS_INPLACE_ENC_FINISHED_INFO@
  02faf	e8 00 00 00 00	 call	 _GetString
  02fb4	83 c4 04	 add	 esp, 4
  02fb7	50		 push	 eax
  02fb8	68 eb 03 00 00	 push	 1003			; 000003ebH
  02fbd	53		 push	 ebx
  02fbe	ff d7		 call	 edi
  02fc0	50		 push	 eax
  02fc1	ff d6		 call	 esi

; 4347 : 
; 4348 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  02fc3	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  02fc8	e8 00 00 00 00	 call	 _GetString
  02fcd	83 c4 04	 add	 esp, 4
  02fd0	50		 push	 eax
  02fd1	68 11 04 00 00	 push	 1041			; 00000411H
  02fd6	53		 push	 ebx
  02fd7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02fdd	50		 push	 eax
  02fde	ff d7		 call	 edi
  02fe0	50		 push	 eax
  02fe1	ff d6		 call	 esi

; 4349 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("FINALIZE"));

  02fe3	68 00 00 00 00	 push	 OFFSET ??_C@_08MFKGCNCO@FINALIZE?$AA@
  02fe8	e8 00 00 00 00	 call	 _GetString
  02fed	83 c4 04	 add	 esp, 4
  02ff0	50		 push	 eax
  02ff1	68 10 04 00 00	 push	 1040			; 00000410H
  02ff6	53		 push	 ebx
  02ff7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  02ffd	50		 push	 eax
  02ffe	ff d7		 call	 edi
  03000	50		 push	 eax
  03001	ff d6		 call	 esi

; 4350 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  03003	6a 00		 push	 0
  03005	68 11 04 00 00	 push	 1041			; 00000411H
  0300a	53		 push	 ebx
  0300b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03011	50		 push	 eax
  03012	ff d7		 call	 edi
  03014	50		 push	 eax
  03015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4351 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  0301b	6a 01		 push	 1
  0301d	68 10 04 00 00	 push	 1040			; 00000410H
  03022	53		 push	 ebx
  03023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03029	50		 push	 eax
  0302a	ff d7		 call	 edi
  0302c	50		 push	 eax
  0302d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4352 : 
; 4353 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("EXIT"));

  03033	68 00 00 00 00	 push	 OFFSET ??_C@_04GOLNGIJ@EXIT?$AA@
  03038	e8 00 00 00 00	 call	 _GetString
  0303d	83 c4 04	 add	 esp, 4
  03040	50		 push	 eax
  03041	6a 02		 push	 2
  03043	53		 push	 ebx
  03044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0304a	50		 push	 eax
  0304b	ff d7		 call	 edi
  0304d	50		 push	 eax
  0304e	ff d6		 call	 esi

; 4354 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), FALSE);

  03050	6a 00		 push	 0
  03052	6a 02		 push	 2

; 4355 : 
; 4356 : 			break;

  03054	e9 72 f8 ff ff	 jmp	 $LN721@PageDialog
$LN210@PageDialog:

; 4357 : 
; 4358 : 		case FORMAT_PAGE:
; 4359 : 			{
; 4360 : 				BOOL bNTFSallowed = FALSE;
; 4361 : 				BOOL bFATallowed = FALSE;
; 4362 : 				BOOL bNoFSallowed = FALSE;
; 4363 : 
; 4364 : 				SetTimer (GetParent (hwndDlg), TIMER_ID_RANDVIEW, TIMER_INTERVAL_RANDVIEW, NULL);

  03059	6a 00		 push	 0
  0305b	6a 1e		 push	 30			; 0000001eH
  0305d	68 ff 00 00 00	 push	 255			; 000000ffH
  03062	53		 push	 ebx
  03063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03069	50		 push	 eax
  0306a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16

; 4365 : 
; 4366 : 				hMasterKey = GetDlgItem (hwndDlg, IDC_DISK_KEY);

  03070	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  03076	68 fb 03 00 00	 push	 1019			; 000003fbH
  0307b	53		 push	 ebx
  0307c	ff d7		 call	 edi

; 4367 : 				hHeaderKey = GetDlgItem (hwndDlg, IDC_HEADER_KEY);

  0307e	68 f9 03 00 00	 push	 1017			; 000003f9H
  03083	a3 00 00 00 00	 mov	 DWORD PTR _hMasterKey, eax
  03088	53		 push	 ebx
  03089	ff d7		 call	 edi

; 4368 : 				hRandPool = GetDlgItem (hwndDlg, IDC_RANDOM_BYTES);

  0308b	68 fc 03 00 00	 push	 1020			; 000003fcH
  03090	a3 00 00 00 00	 mov	 DWORD PTR _hHeaderKey, eax
  03095	53		 push	 ebx
  03096	ff d7		 call	 edi

; 4369 : 
; 4370 : 				SendMessage (GetDlgItem (hwndDlg, IDC_RANDOM_BYTES), WM_SETFONT, (WPARAM) hFixedDigitFont, (LPARAM) TRUE);

  03098	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hFixedDigitFont
  0309e	6a 01		 push	 1
  030a0	51		 push	 ecx
  030a1	6a 30		 push	 48			; 00000030H
  030a3	68 fc 03 00 00	 push	 1020			; 000003fcH
  030a8	a3 00 00 00 00	 mov	 DWORD PTR ?hRandPool@@3RAUHWND__@@A, eax ; hRandPool
  030ad	53		 push	 ebx
  030ae	ff d7		 call	 edi
  030b0	50		 push	 eax
  030b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 4371 : 				SendMessage (GetDlgItem (hwndDlg, IDC_DISK_KEY), WM_SETFONT, (WPARAM) hFixedDigitFont, (LPARAM) TRUE);

  030b7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hFixedDigitFont
  030bd	6a 01		 push	 1
  030bf	52		 push	 edx
  030c0	6a 30		 push	 48			; 00000030H
  030c2	68 fb 03 00 00	 push	 1019			; 000003fbH
  030c7	53		 push	 ebx
  030c8	ff d7		 call	 edi
  030ca	50		 push	 eax
  030cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 4372 : 				SendMessage (GetDlgItem (hwndDlg, IDC_HEADER_KEY), WM_SETFONT, (WPARAM) hFixedDigitFont, (LPARAM) TRUE);

  030d1	a1 00 00 00 00	 mov	 eax, DWORD PTR _hFixedDigitFont
  030d6	6a 01		 push	 1
  030d8	50		 push	 eax
  030d9	6a 30		 push	 48			; 00000030H
  030db	68 f9 03 00 00	 push	 1017			; 000003f9H
  030e0	53		 push	 ebx
  030e1	ff d7		 call	 edi
  030e3	50		 push	 eax
  030e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 4373 : 
; 4374 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP),
; 4375 : 					GetString (bHiddenVolHost ? "FORMAT_HIDVOL_HOST_HELP" : "FORMAT_HELP"));

  030ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  030f0	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BI@MEDALEIG@FORMAT_HIDVOL_HOST_HELP?$AA@
  030f5	85 c9		 test	 ecx, ecx
  030f7	75 05		 jne	 SHORT $LN396@PageDialog
  030f9	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@EEPPFDAO@FORMAT_HELP?$AA@
$LN396@PageDialog:
  030fe	50		 push	 eax
  030ff	e8 00 00 00 00	 call	 _GetString
  03104	83 c4 04	 add	 esp, 4
  03107	50		 push	 eax
  03108	68 eb 03 00 00	 push	 1003			; 000003ebH
  0310d	53		 push	 ebx
  0310e	ff d7		 call	 edi
  03110	50		 push	 eax
  03111	ff d6		 call	 esi

; 4376 : 
; 4377 : 				if (bHiddenVol)

  03113	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  03119	85 d2		 test	 edx, edx
  0311b	74 16		 je	 SHORT $LN209@PageDialog

; 4378 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString (bHiddenVolHost ? "FORMAT_HIDVOL_HOST_TITLE" : "FORMAT_HIDVOL_TITLE"));

  0311d	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  03122	85 c0		 test	 eax, eax
  03124	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BJ@LIGEKHGE@FORMAT_HIDVOL_HOST_TITLE?$AA@
  03129	75 05		 jne	 SHORT $LN398@PageDialog
  0312b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BE@CEEOMNDM@FORMAT_HIDVOL_TITLE?$AA@
$LN398@PageDialog:
  03130	50		 push	 eax

; 4379 : 				else

  03131	eb 05		 jmp	 SHORT $LN714@PageDialog
$LN209@PageDialog:

; 4380 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("FORMAT_TITLE"));

  03133	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FLIHGDJB@FORMAT_TITLE?$AA@
$LN714@PageDialog:
  03138	e8 00 00 00 00	 call	 _GetString
  0313d	83 c4 04	 add	 esp, 4
  03140	50		 push	 eax
  03141	68 e8 03 00 00	 push	 1000			; 000003e8H
  03146	53		 push	 ebx
  03147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0314d	50		 push	 eax
  0314e	ff d7		 call	 edi
  03150	50		 push	 eax
  03151	ff d6		 call	 esi

; 4381 : 
; 4382 : 				/* Quick/Dynamic */
; 4383 : 
; 4384 : 				if (bHiddenVol)

  03153	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  03159	85 c9		 test	 ecx, ecx
  0315b	0f 84 87 00 00
	00		 je	 $LN207@PageDialog

; 4385 : 				{
; 4386 : 					quickFormat = !bHiddenVolHost;

  03161	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  03167	f7 da		 neg	 edx
  03169	1b d2		 sbb	 edx, edx
  0316b	42		 inc	 edx
  0316c	89 15 00 00 00
	00		 mov	 DWORD PTR ?quickFormat@@3HC, edx ; quickFormat

; 4387 : 					bSparseFileSwitch = FALSE;

  03172	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bSparseFileSwitch@@3HC, 0 ; bSparseFileSwitch

; 4388 : 
; 4389 : 					SetCheckBox (hwndDlg, IDC_QUICKFORMAT, quickFormat);

  0317c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?quickFormat@@3HC ; quickFormat
  03181	50		 push	 eax
  03182	68 ff 03 00 00	 push	 1023			; 000003ffH
  03187	53		 push	 ebx
  03188	e8 00 00 00 00	 call	 _SetCheckBox
  0318d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4390 : 					SetWindowTextW (GetDlgItem (hwndDlg, IDC_QUICKFORMAT), GetString ((bDevice || !bHiddenVolHost) ? "IDC_QUICKFORMAT" : "SPARSE_FILE"));

  03190	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  03197	75 0f		 jne	 SHORT $LN399@PageDialog
  03199	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  0319f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@GPMOAIEF@SPARSE_FILE?$AA@
  031a4	85 c9		 test	 ecx, ecx
  031a6	75 05		 jne	 SHORT $LN400@PageDialog
$LN399@PageDialog:
  031a8	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BA@LBGDFDPO@IDC_QUICKFORMAT?$AA@
$LN400@PageDialog:
  031ad	50		 push	 eax
  031ae	e8 00 00 00 00	 call	 _GetString
  031b3	83 c4 04	 add	 esp, 4
  031b6	50		 push	 eax
  031b7	68 ff 03 00 00	 push	 1023			; 000003ffH
  031bc	53		 push	 ebx
  031bd	ff d7		 call	 edi
  031bf	50		 push	 eax
  031c0	ff d6		 call	 esi

; 4391 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_QUICKFORMAT), bDevice && bHiddenVolHost);

  031c2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  031c9	74 15		 je	 SHORT $LN401@PageDialog
  031cb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  031d1	85 d2		 test	 edx, edx
  031d3	74 0b		 je	 SHORT $LN401@PageDialog
  031d5	b8 01 00 00 00	 mov	 eax, 1
  031da	50		 push	 eax

; 4392 : 				}
; 4393 : 				else

  031db	e9 ae 00 00 00	 jmp	 $LN715@PageDialog
$LN401@PageDialog:

; 4391 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_QUICKFORMAT), bDevice && bHiddenVolHost);

  031e0	33 c0		 xor	 eax, eax
  031e2	50		 push	 eax

; 4392 : 				}
; 4393 : 				else

  031e3	e9 a6 00 00 00	 jmp	 $LN715@PageDialog
$LN207@PageDialog:

; 4394 : 				{
; 4395 : 					if (bDevice)

  031e8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  031ef	74 27		 je	 SHORT $LN205@PageDialog

; 4396 : 					{
; 4397 : 						bSparseFileSwitch = FALSE;
; 4398 : 						SetWindowTextW (GetDlgItem (hwndDlg, IDC_QUICKFORMAT), GetString("IDC_QUICKFORMAT"));

  031f1	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LBGDFDPO@IDC_QUICKFORMAT?$AA@
  031f6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bSparseFileSwitch@@3HC, 0 ; bSparseFileSwitch
  03200	e8 00 00 00 00	 call	 _GetString
  03205	83 c4 04	 add	 esp, 4
  03208	50		 push	 eax
  03209	68 ff 03 00 00	 push	 1023			; 000003ffH
  0320e	53		 push	 ebx
  0320f	ff d7		 call	 edi
  03211	50		 push	 eax
  03212	ff d6		 call	 esi

; 4399 : 						EnableWindow (GetDlgItem (hwndDlg, IDC_QUICKFORMAT), TRUE);

  03214	6a 01		 push	 1

; 4400 : 					}
; 4401 : 					else

  03216	eb 76		 jmp	 SHORT $LN715@PageDialog
$LN205@PageDialog:

; 4402 : 					{
; 4403 : 						char root[TC_MAX_PATH];
; 4404 : 						DWORD fileSystemFlags = 0;
; 4405 : 
; 4406 : 						SetWindowTextW (GetDlgItem (hwndDlg, IDC_QUICKFORMAT), GetString("SPARSE_FILE"));

  03218	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GPMOAIEF@SPARSE_FILE?$AA@
  0321d	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _fileSystemFlags$133610[ebp], 0
  03224	e8 00 00 00 00	 call	 _GetString
  03229	83 c4 04	 add	 esp, 4
  0322c	50		 push	 eax
  0322d	68 ff 03 00 00	 push	 1023			; 000003ffH
  03232	53		 push	 ebx
  03233	ff d7		 call	 edi
  03235	50		 push	 eax
  03236	ff d6		 call	 esi

; 4407 : 
; 4408 : 						/* Check if the host file system supports sparse files */
; 4409 : 
; 4410 : 						if (GetVolumePathName (szFileName, root, sizeof (root)))

  03238	68 04 01 00 00	 push	 260			; 00000104H
  0323d	8d 85 58 0f 01
	00		 lea	 eax, DWORD PTR _root$133609[ebp]
  03243	50		 push	 eax
  03244	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  03249	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumePathNameA@12
  0324f	85 c0		 test	 eax, eax
  03251	74 2a		 je	 SHORT $LN203@PageDialog

; 4411 : 						{
; 4412 : 							GetVolumeInformation (root, NULL, 0, NULL, NULL, &fileSystemFlags, NULL, 0);

  03253	6a 00		 push	 0
  03255	6a 00		 push	 0
  03257	8d 4d d0	 lea	 ecx, DWORD PTR _fileSystemFlags$133610[ebp]
  0325a	51		 push	 ecx
  0325b	6a 00		 push	 0
  0325d	6a 00		 push	 0
  0325f	6a 00		 push	 0
  03261	6a 00		 push	 0
  03263	8d 95 58 0f 01
	00		 lea	 edx, DWORD PTR _root$133609[ebp]
  03269	52		 push	 edx
  0326a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumeInformationA@32

; 4413 : 							bSparseFileSwitch = fileSystemFlags & FILE_SUPPORTS_SPARSE_FILES;

  03270	8b 45 d0	 mov	 eax, DWORD PTR _fileSystemFlags$133610[ebp]
  03273	83 e0 40	 and	 eax, 64			; 00000040H
  03276	a3 00 00 00 00	 mov	 DWORD PTR ?bSparseFileSwitch@@3HC, eax ; bSparseFileSwitch

; 4414 : 						}
; 4415 : 						else

  0327b	eb 0a		 jmp	 SHORT $LN202@PageDialog
$LN203@PageDialog:

; 4416 : 							bSparseFileSwitch = FALSE;

  0327d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bSparseFileSwitch@@3HC, 0 ; bSparseFileSwitch
$LN202@PageDialog:

; 4417 : 
; 4418 : 						EnableWindow (GetDlgItem (hwndDlg, IDC_QUICKFORMAT), bSparseFileSwitch);

  03287	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bSparseFileSwitch@@3HC ; bSparseFileSwitch
  0328d	51		 push	 ecx
$LN715@PageDialog:
  0328e	68 ff 03 00 00	 push	 1023			; 000003ffH
  03293	53		 push	 ebx
  03294	ff d7		 call	 edi
  03296	50		 push	 eax
  03297	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4419 : 					}
; 4420 : 				}
; 4421 : 
; 4422 : 				SendMessage (GetDlgItem (hwndDlg, IDC_SHOW_KEYS), BM_SETCHECK, showKeys ? BST_CHECKED : BST_UNCHECKED, 0);

  0329d	33 d2		 xor	 edx, edx
  0329f	39 15 00 00 00
	00		 cmp	 DWORD PTR _showKeys, edx
  032a5	6a 00		 push	 0
  032a7	0f 95 c2	 setne	 dl
  032aa	52		 push	 edx
  032ab	68 f1 00 00 00	 push	 241			; 000000f1H
  032b0	68 06 04 00 00	 push	 1030			; 00000406H
  032b5	53		 push	 ebx
  032b6	ff d7		 call	 edi
  032b8	50		 push	 eax
  032b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 4423 : 				SetWindowTextA(GetDlgItem (hwndDlg, IDC_RANDOM_BYTES), showKeys ? "" : "********************************                                              ");

  032bf	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _showKeys, 0
  032c6	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  032cb	75 05		 jne	 SHORT $LN404@PageDialog
  032cd	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0EP@NPBFJCJA@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
$LN404@PageDialog:
  032d2	50		 push	 eax
  032d3	68 fc 03 00 00	 push	 1020			; 000003fcH
  032d8	53		 push	 ebx
  032d9	ff d7		 call	 edi
  032db	50		 push	 eax
  032dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 4424 : 				SetWindowTextA(GetDlgItem (hwndDlg, IDC_HEADER_KEY), showKeys ? "" : "********************************                                              ");

  032e2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _showKeys, 0
  032e9	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  032ee	75 05		 jne	 SHORT $LN406@PageDialog
  032f0	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0EP@NPBFJCJA@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
$LN406@PageDialog:
  032f5	50		 push	 eax
  032f6	68 f9 03 00 00	 push	 1017			; 000003f9H
  032fb	53		 push	 ebx
  032fc	ff d7		 call	 edi
  032fe	50		 push	 eax
  032ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 4425 : 				SetWindowTextA(GetDlgItem (hwndDlg, IDC_DISK_KEY), showKeys ? "" : "********************************                                              ");

  03305	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _showKeys, 0
  0330c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  03311	75 05		 jne	 SHORT $LN408@PageDialog
  03313	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0EP@NPBFJCJA@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
$LN408@PageDialog:
  03318	50		 push	 eax
  03319	68 fb 03 00 00	 push	 1019			; 000003fbH
  0331e	53		 push	 ebx
  0331f	ff d7		 call	 edi
  03321	50		 push	 eax
  03322	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 4426 : 
; 4427 : 				SendMessage (GetDlgItem (hwndDlg, IDC_CLUSTERSIZE), CB_RESETCONTENT, 0, 0);

  03328	6a 00		 push	 0
  0332a	6a 00		 push	 0
  0332c	68 4b 01 00 00	 push	 331			; 0000014bH
  03331	68 04 04 00 00	 push	 1028			; 00000404H
  03336	53		 push	 ebx
  03337	ff d7		 call	 edi
  03339	50		 push	 eax
  0333a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 4428 : 				AddComboPairW (GetDlgItem (hwndDlg, IDC_CLUSTERSIZE), GetString ("DEFAULT"), 0);

  03340	6a 00		 push	 0
  03342	68 00 00 00 00	 push	 OFFSET ??_C@_07MGCPDNLD@DEFAULT?$AA@
  03347	e8 00 00 00 00	 call	 _GetString
  0334c	83 c4 04	 add	 esp, 4
  0334f	50		 push	 eax
  03350	68 04 04 00 00	 push	 1028			; 00000404H
  03355	53		 push	 ebx
  03356	ff d7		 call	 edi
  03358	50		 push	 eax
  03359	e8 00 00 00 00	 call	 _AddComboPairW
  0335e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4429 : 
; 4430 : 				for (int i = 1; i <= 128; i *= 2)

  03361	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _i$133615[ebp], 1
  03368	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL201@PageDialog:

; 4431 : 				{
; 4432 : 					wstringstream s;

  03370	6a 01		 push	 1
  03372	6a 03		 push	 3
  03374	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _s$133769[ebp]
  0337a	e8 00 00 00 00	 call	 ??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0337f	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 5

; 4433 : 					int size = GetFormatSectorSize() * i;

  03386	e8 00 00 00 00	 call	 _GetFormatSectorSize
  0338b	0f af 45 ec	 imul	 eax, DWORD PTR _i$133615[ebp]

; 4434 : 
; 4435 : 					if (size > TC_MAX_FAT_CLUSTER_SIZE)

  0338f	3d 00 00 04 00	 cmp	 eax, 262144		; 00040000H
  03394	0f 8f cd 00 00
	00		 jg	 $LN587@PageDialog

; 4437 : 
; 4438 : 					if (size == 512)

  0339a	3d 00 02 00 00	 cmp	 eax, 512		; 00000200H
  0339f	75 16		 jne	 SHORT $LN197@PageDialog

; 4439 : 						s << L"0.5";

  033a1	8d 85 70 fe ff
	ff		 lea	 eax, DWORD PTR _s$133769[ebp+8]
  033a7	68 00 00 00 00	 push	 OFFSET ??_C@_17OFEDBPDO@?$AA0?$AA?4?$AA5?$AA?$AA@
  033ac	50		 push	 eax
  033ad	e8 00 00 00 00	 call	 ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
  033b2	83 c4 08	 add	 esp, 8

; 4440 : 					else

  033b5	eb 1c		 jmp	 SHORT $LN196@PageDialog
$LN197@PageDialog:

; 4441 : 						s << size / BYTES_PER_KB;

  033b7	6a 00		 push	 0
  033b9	99		 cdq
  033ba	68 00 04 00 00	 push	 1024			; 00000400H
  033bf	52		 push	 edx
  033c0	50		 push	 eax
  033c1	e8 00 00 00 00	 call	 __alldiv
  033c6	52		 push	 edx
  033c7	50		 push	 eax
  033c8	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _s$133769[ebp+8]
  033ce	e8 00 00 00 00	 call	 ??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@_J@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::operator<<
$LN196@PageDialog:

; 4442 : 
; 4443 : 					s << L" " << GetString ("KB");

  033d3	68 00 00 00 00	 push	 OFFSET ??_C@_02LODOGJEL@KB?$AA@
  033d8	e8 00 00 00 00	 call	 _GetString
  033dd	83 c4 04	 add	 esp, 4
  033e0	50		 push	 eax
  033e1	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _s$133769[ebp+8]
  033e7	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  033ec	51		 push	 ecx
  033ed	e8 00 00 00 00	 call	 ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
  033f2	83 c4 08	 add	 esp, 8
  033f5	50		 push	 eax
  033f6	e8 00 00 00 00	 call	 ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
  033fb	83 c4 08	 add	 esp, 8

; 4444 : 
; 4445 : 					AddComboPairW (GetDlgItem (hwndDlg, IDC_CLUSTERSIZE), s.str().c_str(), i);

  033fe	8d 95 0c ff ff
	ff		 lea	 edx, DWORD PTR $T165840[ebp]
  03404	52		 push	 edx
  03405	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _s$133769[ebp]
  0340b	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
  03410	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  03414	72 05		 jb	 SHORT $LN542@PageDialog
  03416	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  03419	eb 03		 jmp	 SHORT $LN543@PageDialog
$LN542@PageDialog:
  0341b	83 c0 04	 add	 eax, 4
$LN543@PageDialog:
  0341e	8b 4d ec	 mov	 ecx, DWORD PTR _i$133615[ebp]
  03421	51		 push	 ecx
  03422	50		 push	 eax
  03423	68 04 04 00 00	 push	 1028			; 00000404H
  03428	53		 push	 ebx
  03429	ff d7		 call	 edi
  0342b	50		 push	 eax
  0342c	e8 00 00 00 00	 call	 _AddComboPairW
  03431	83 c4 0c	 add	 esp, 12			; 0000000cH
  03434	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR $T165840[ebp]
  0343a	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 4446 : 				}

  0343f	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _s$133769[ebp]
  03445	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0344c	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
  03451	8b 55 ec	 mov	 edx, DWORD PTR _i$133615[ebp]
  03454	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  03457	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0345c	89 45 ec	 mov	 DWORD PTR _i$133615[ebp], eax
  0345f	0f 8e 0b ff ff
	ff		 jle	 $LL201@PageDialog

; 4434 : 
; 4435 : 					if (size > TC_MAX_FAT_CLUSTER_SIZE)

  03465	eb 12		 jmp	 SHORT $LN199@PageDialog
$LN587@PageDialog:

; 4436 : 						break;

  03467	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _s$133769[ebp]
  0346d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  03474	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
$LN199@PageDialog:

; 4447 : 
; 4448 : 				SendMessage (GetDlgItem (hwndDlg, IDC_CLUSTERSIZE), CB_SETCURSEL, 0, 0);

  03479	6a 00		 push	 0
  0347b	6a 00		 push	 0
  0347d	68 4e 01 00 00	 push	 334			; 0000014eH
  03482	68 04 04 00 00	 push	 1028			; 00000404H
  03487	53		 push	 ebx
  03488	ff d7		 call	 edi
  0348a	50		 push	 eax
  0348b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 4449 : 
; 4450 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_CLUSTERSIZE), TRUE);

  03491	6a 01		 push	 1
  03493	68 04 04 00 00	 push	 1028			; 00000404H
  03498	53		 push	 ebx
  03499	ff d7		 call	 edi
  0349b	50		 push	 eax
  0349c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4451 : 
; 4452 : 				/* Filesystems */
; 4453 : 
; 4454 : 				bNTFSallowed = FALSE;

  034a2	33 c0		 xor	 eax, eax

; 4455 : 				bFATallowed = FALSE;
; 4456 : 				bNoFSallowed = FALSE;
; 4457 : 
; 4458 : 				SendMessage (GetDlgItem (hwndDlg, IDC_FILESYS), CB_RESETCONTENT, 0, 0);

  034a4	50		 push	 eax
  034a5	50		 push	 eax
  034a6	68 4b 01 00 00	 push	 331			; 0000014bH
  034ab	68 05 04 00 00	 push	 1029			; 00000405H
  034b0	53		 push	 ebx
  034b1	89 45 ec	 mov	 DWORD PTR _bNTFSallowed$133587[ebp], eax
  034b4	89 45 cc	 mov	 DWORD PTR _bFATallowed$133588[ebp], eax
  034b7	89 45 e8	 mov	 DWORD PTR _bNoFSallowed$133589[ebp], eax
  034ba	ff d7		 call	 edi
  034bc	50		 push	 eax
  034bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 4459 : 
; 4460 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_FILESYS), TRUE);

  034c3	6a 01		 push	 1
  034c5	68 05 04 00 00	 push	 1029			; 00000405H
  034ca	53		 push	 ebx
  034cb	ff d7		 call	 edi
  034cd	50		 push	 eax
  034ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4461 : 
; 4462 : 				uint64 dataAreaSize = GetVolumeDataAreaSize (bHiddenVol && !bHiddenVolHost, nVolumeSize);

  034d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  034d9	85 c0		 test	 eax, eax
  034db	74 0f		 je	 SHORT $LN413@PageDialog
  034dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  034e3	85 c9		 test	 ecx, ecx
  034e5	75 05		 jne	 SHORT $LN413@PageDialog
  034e7	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  034ea	eb 02		 jmp	 SHORT $LN414@PageDialog
$LN413@PageDialog:
  034ec	33 c0		 xor	 eax, eax
$LN414@PageDialog:
  034ee	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeSize@@3_KA+4
  034f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nVolumeSize@@3_KA
  034fa	52		 push	 edx
  034fb	51		 push	 ecx
  034fc	50		 push	 eax
  034fd	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  03502	83 c4 0c	 add	 esp, 12			; 0000000cH
  03505	89 45 e0	 mov	 DWORD PTR _dataAreaSize$133807[ebp], eax
  03508	89 55 e4	 mov	 DWORD PTR _dataAreaSize$133807[ebp+4], edx

; 4463 : 
; 4464 : 				if (!CreatingHiddenSysVol())	

  0350b	e8 00 00 00 00	 call	 _CreatingHiddenSysVol
  03510	85 c0		 test	 eax, eax
  03512	0f 85 8c 00 00
	00		 jne	 $LN195@PageDialog

; 4465 : 				{
; 4466 : 					if (dataAreaSize >= TC_MIN_NTFS_FS_SIZE && dataAreaSize <= TC_MAX_NTFS_FS_SIZE)

  03518	8b 4d e0	 mov	 ecx, DWORD PTR _dataAreaSize$133807[ebp]
  0351b	8b 45 e4	 mov	 eax, DWORD PTR _dataAreaSize$133807[ebp+4]
  0351e	81 c1 00 c0 c8
	ff		 add	 ecx, -3620864		; ffc8c000H
  03524	83 d0 ff	 adc	 eax, -1
  03527	3d ff 7f 00 00	 cmp	 eax, 32767		; 00007fffH
  0352c	77 29		 ja	 SHORT $LN194@PageDialog
  0352e	72 08		 jb	 SHORT $LN616@PageDialog
  03530	81 f9 00 c0 c8
	ff		 cmp	 ecx, -3620864		; ffc8c000H
  03536	77 1f		 ja	 SHORT $LN194@PageDialog
$LN616@PageDialog:

; 4467 : 					{
; 4468 : 						AddComboPair (GetDlgItem (hwndDlg, IDC_FILESYS), "NTFS", FILESYS_NTFS);

  03538	6a 02		 push	 2
  0353a	68 00 00 00 00	 push	 OFFSET ??_C@_04HPPAIJNK@NTFS?$AA@
  0353f	68 05 04 00 00	 push	 1029			; 00000405H
  03544	53		 push	 ebx
  03545	ff d7		 call	 edi
  03547	50		 push	 eax
  03548	e8 00 00 00 00	 call	 _AddComboPair
  0354d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4469 : 						bNTFSallowed = TRUE;

  03550	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _bNTFSallowed$133587[ebp], 1
$LN194@PageDialog:

; 4470 : 					}
; 4471 : 
; 4472 : 					if (dataAreaSize >= TC_MIN_FAT_FS_SIZE && dataAreaSize <= TC_MAX_FAT_SECTOR_COUNT * GetFormatSectorSize())

  03557	83 7d e4 00	 cmp	 DWORD PTR _dataAreaSize$133807[ebp+4], 0
  0355b	77 09		 ja	 SHORT $LN617@PageDialog
  0355d	81 7d e0 00 90
	00 00		 cmp	 DWORD PTR _dataAreaSize$133807[ebp], 36864 ; 00009000H
  03564	72 60		 jb	 SHORT $LN192@PageDialog
$LN617@PageDialog:
  03566	e8 00 00 00 00	 call	 _GetFormatSectorSize
  0356b	6a 01		 push	 1
  0356d	99		 cdq
  0356e	6a 00		 push	 0
  03570	52		 push	 edx
  03571	50		 push	 eax
  03572	e8 00 00 00 00	 call	 __allmul
  03577	39 55 e4	 cmp	 DWORD PTR _dataAreaSize$133807[ebp+4], edx
  0357a	77 4a		 ja	 SHORT $LN192@PageDialog
  0357c	72 05		 jb	 SHORT $LN618@PageDialog
  0357e	39 45 e0	 cmp	 DWORD PTR _dataAreaSize$133807[ebp], eax
  03581	77 43		 ja	 SHORT $LN192@PageDialog
$LN618@PageDialog:

; 4473 : 					{
; 4474 : 						AddComboPair (GetDlgItem (hwndDlg, IDC_FILESYS), "FAT", FILESYS_FAT);

  03583	6a 01		 push	 1
  03585	68 00 00 00 00	 push	 OFFSET ??_C@_03MPELFIKF@FAT?$AA@
  0358a	68 05 04 00 00	 push	 1029			; 00000405H
  0358f	53		 push	 ebx
  03590	ff d7		 call	 edi
  03592	50		 push	 eax
  03593	e8 00 00 00 00	 call	 _AddComboPair
  03598	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4475 : 						bFATallowed = TRUE;

  0359b	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _bFATallowed$133588[ebp], 1

; 4476 : 					}
; 4477 : 				}
; 4478 : 				else

  035a2	eb 22		 jmp	 SHORT $LN192@PageDialog
$LN195@PageDialog:

; 4479 : 				{
; 4480 : 					// We're creating a hidden volume for a hidden OS, so we don't need to format it with
; 4481 : 					// any filesystem (the entire OS will be copied to the hidden volume sector by sector).
; 4482 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_FILESYS), FALSE);

  035a4	6a 00		 push	 0
  035a6	68 05 04 00 00	 push	 1029			; 00000405H
  035ab	53		 push	 ebx
  035ac	ff d7		 call	 edi
  035ae	50		 push	 eax
  035af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4483 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_CLUSTERSIZE), FALSE);

  035b5	6a 00		 push	 0
  035b7	68 04 04 00 00	 push	 1028			; 00000404H
  035bc	53		 push	 ebx
  035bd	ff d7		 call	 edi
  035bf	50		 push	 eax
  035c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
$LN192@PageDialog:

; 4484 : 				}
; 4485 : 
; 4486 : 				if (!bHiddenVolHost)

  035c6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  035cc	85 d2		 test	 edx, edx
  035ce	75 27		 jne	 SHORT $LN191@PageDialog

; 4487 : 				{
; 4488 : 					AddComboPairW (GetDlgItem (hwndDlg, IDC_FILESYS), GetString ("NONE"), FILESYS_NONE);

  035d0	52		 push	 edx
  035d1	68 00 00 00 00	 push	 OFFSET ??_C@_04OKGDLNCL@NONE?$AA@
  035d6	e8 00 00 00 00	 call	 _GetString
  035db	83 c4 04	 add	 esp, 4
  035de	50		 push	 eax
  035df	68 05 04 00 00	 push	 1029			; 00000405H
  035e4	53		 push	 ebx
  035e5	ff d7		 call	 edi
  035e7	50		 push	 eax
  035e8	e8 00 00 00 00	 call	 _AddComboPairW
  035ed	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4489 : 					bNoFSallowed = TRUE;

  035f0	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _bNoFSallowed$133589[ebp], 1
$LN191@PageDialog:

; 4490 : 				}
; 4491 : 
; 4492 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  035f7	6a 01		 push	 1
  035f9	68 10 04 00 00	 push	 1040			; 00000410H
  035fe	53		 push	 ebx
  035ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03605	50		 push	 eax
  03606	ff d7		 call	 edi
  03608	50		 push	 eax
  03609	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4493 : 
; 4494 : 				if (fileSystem == FILESYS_NONE)	// If no file system has been previously selected

  0360f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?fileSystem@@3HC ; fileSystem
  03614	85 c0		 test	 eax, eax
  03616	75 73		 jne	 SHORT $LN183@PageDialog

; 4495 : 				{
; 4496 : 					// Set default file system
; 4497 : 
; 4498 : 					if (bFATallowed && !(nNeedToStoreFilesOver4GB == 1 && bNTFSallowed))

  03618	39 45 cc	 cmp	 DWORD PTR _bFATallowed$133588[ebp], eax
  0361b	74 1a		 je	 SHORT $LN189@PageDialog
  0361d	b8 01 00 00 00	 mov	 eax, 1
  03622	39 05 00 00 00
	00		 cmp	 DWORD PTR ?nNeedToStoreFilesOver4GB@@3HA, eax ; nNeedToStoreFilesOver4GB
  03628	75 06		 jne	 SHORT $LN188@PageDialog
  0362a	83 7d ec 00	 cmp	 DWORD PTR _bNTFSallowed$133587[ebp], 0
  0362e	75 0d		 jne	 SHORT $LN598@PageDialog
$LN188@PageDialog:

; 4499 : 						fileSystem = FILESYS_FAT;

  03630	a3 00 00 00 00	 mov	 DWORD PTR ?fileSystem@@3HC, eax ; fileSystem
  03635	eb 54		 jmp	 SHORT $LN183@PageDialog
$LN189@PageDialog:

; 4500 : 					else if (bNTFSallowed)

  03637	83 7d ec 00	 cmp	 DWORD PTR _bNTFSallowed$133587[ebp], 0
  0363b	74 0c		 je	 SHORT $LN186@PageDialog
$LN598@PageDialog:

; 4501 : 						fileSystem = FILESYS_NTFS;

  0363d	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?fileSystem@@3HC, 2 ; fileSystem
  03647	eb 42		 jmp	 SHORT $LN183@PageDialog
$LN186@PageDialog:

; 4502 : 					else if (bNoFSallowed)

  03649	83 7d e8 00	 cmp	 DWORD PTR _bNoFSallowed$133589[ebp], 0
  0364d	74 0c		 je	 SHORT $LN184@PageDialog

; 4503 : 						fileSystem = FILESYS_NONE;

  0364f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fileSystem@@3HC, 0 ; fileSystem

; 4504 : 					else

  03659	eb 30		 jmp	 SHORT $LN183@PageDialog
$LN184@PageDialog:

; 4505 : 					{
; 4506 : 						AddComboPair (GetDlgItem (hwndDlg, IDC_FILESYS), "---", 0);

  0365b	6a 00		 push	 0
  0365d	68 00 00 00 00	 push	 OFFSET ??_C@_03JMFMNIFM@?9?9?9?$AA@
  03662	68 05 04 00 00	 push	 1029			; 00000405H
  03667	53		 push	 ebx
  03668	ff d7		 call	 edi
  0366a	50		 push	 eax
  0366b	e8 00 00 00 00	 call	 _AddComboPair
  03670	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4507 : 						EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), FALSE);

  03673	6a 00		 push	 0
  03675	68 10 04 00 00	 push	 1040			; 00000410H
  0367a	53		 push	 ebx
  0367b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03681	50		 push	 eax
  03682	ff d7		 call	 edi
  03684	50		 push	 eax
  03685	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
$LN183@PageDialog:

; 4508 : 					}
; 4509 : 				}
; 4510 : 
; 4511 : 				SendMessage (GetDlgItem (hwndDlg, IDC_FILESYS), CB_SETCURSEL, 0, 0);

  0368b	6a 00		 push	 0
  0368d	6a 00		 push	 0
  0368f	68 4e 01 00 00	 push	 334			; 0000014eH
  03694	68 05 04 00 00	 push	 1029			; 00000405H
  03699	53		 push	 ebx
  0369a	ff d7		 call	 edi
  0369c	50		 push	 eax
  0369d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 4512 : 				SelectAlgo (GetDlgItem (hwndDlg, IDC_FILESYS), (int *) &fileSystem);

  036a3	68 00 00 00 00	 push	 OFFSET ?fileSystem@@3HC	; fileSystem
  036a8	68 05 04 00 00	 push	 1029			; 00000405H
  036ad	53		 push	 ebx
  036ae	ff d7		 call	 edi
  036b0	50		 push	 eax
  036b1	e8 00 00 00 00	 call	 _SelectAlgo
  036b6	83 c4 08	 add	 esp, 8

; 4513 : 
; 4514 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_ABORT_BUTTON), FALSE);

  036b9	6a 00		 push	 0
  036bb	68 f8 03 00 00	 push	 1016			; 000003f8H
  036c0	53		 push	 ebx
  036c1	ff d7		 call	 edi
  036c3	50		 push	 eax
  036c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4515 : 
; 4516 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("FORMAT"));

  036ca	68 00 00 00 00	 push	 OFFSET ??_C@_06DPGELLJH@FORMAT?$AA@
  036cf	e8 00 00 00 00	 call	 _GetString
  036d4	83 c4 04	 add	 esp, 4
  036d7	50		 push	 eax
  036d8	68 10 04 00 00	 push	 1040			; 00000410H
  036dd	53		 push	 ebx
  036de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  036e4	50		 push	 eax
  036e5	ff d7		 call	 edi
  036e7	50		 push	 eax
  036e8	ff d6		 call	 esi

; 4517 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  036ea	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  036ef	e8 00 00 00 00	 call	 _GetString
  036f4	83 c4 04	 add	 esp, 4
  036f7	50		 push	 eax
  036f8	68 11 04 00 00	 push	 1041			; 00000411H
  036fd	53		 push	 ebx
  036fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03704	50		 push	 eax
  03705	ff d7		 call	 edi
  03707	50		 push	 eax
  03708	ff d6		 call	 esi

; 4518 : 
; 4519 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  0370a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetParent@4
  03710	6a 01		 push	 1
  03712	68 11 04 00 00	 push	 1041			; 00000411H
  03717	53		 push	 ebx
  03718	ff d6		 call	 esi
  0371a	50		 push	 eax
  0371b	ff d7		 call	 edi
  0371d	50		 push	 eax
  0371e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4520 : 
; 4521 : 				SetFocus (GetDlgItem (GetParent (hwndDlg), IDC_NEXT));

  03724	68 10 04 00 00	 push	 1040			; 00000410H
  03729	53		 push	 ebx
  0372a	ff d6		 call	 esi
  0372c	50		 push	 eax
  0372d	ff d7		 call	 edi
  0372f	50		 push	 eax
  03730	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4
  03736	33 c0		 xor	 eax, eax
  03738	e9 27 1c 00 00	 jmp	 $LN342@PageDialog
$LN182@PageDialog:

; 4522 : 			}
; 4523 : 			break;
; 4524 : 
; 4525 : 		case FORMAT_FINISHED_PAGE:
; 4526 : 			{
; 4527 : 				if (!bHiddenVolHost && bHiddenVol && !bHiddenVolFinished)

  0373d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  03743	85 c9		 test	 ecx, ecx
  03745	0f 85 01 01 00
	00		 jne	 $LN181@PageDialog
  0374b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  03751	85 d2		 test	 edx, edx
  03753	0f 84 f3 00 00
	00		 je	 $LN181@PageDialog
  03759	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVolFinished@@3HC ; bHiddenVolFinished
  0375e	85 c0		 test	 eax, eax
  03760	0f 85 e6 00 00
	00		 jne	 $LN181@PageDialog

; 4528 : 				{
; 4529 : 					wchar_t msg[4096];
; 4530 : 
; 4531 : 					nNeedToStoreFilesOver4GB = -1;
; 4532 : 
; 4533 : 					if (bHiddenOS)

  03766	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  0376c	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nNeedToStoreFilesOver4GB@@3HA, -1 ; nNeedToStoreFilesOver4GB
  03776	85 c9		 test	 ecx, ecx
  03778	0f 84 89 00 00
	00		 je	 $LN180@PageDialog

; 4534 : 					{
; 4535 : 						wchar_t szMaxRecomOuterVolFillSize[100];
; 4536 : 
; 4537 : 						__int64 maxRecomOuterVolFillSize = 0;
; 4538 : 
; 4539 : 						// Determine the maximum recommended total size of files that can be copied to the outer volume
; 4540 : 						// while leaving enough space for the hidden volume, which must contain a clone of the OS
; 4541 : 
; 4542 : 						maxRecomOuterVolFillSize = nVolumeSize - GetSystemPartitionSize(); 

  0377e	e8 00 00 00 00	 call	 ?GetSystemPartitionSize@@YA_JXZ ; GetSystemPartitionSize
  03783	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nVolumeSize@@3_KA
  03789	2b c8		 sub	 ecx, eax
  0378b	a1 04 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA+4

; 4543 : 
; 4544 : 						// -50% reserve for filesystem "peculiarities"
; 4545 : 						maxRecomOuterVolFillSize /= 2;	

  03790	6a 00		 push	 0
  03792	6a 02		 push	 2
  03794	1b c2		 sbb	 eax, edx
  03796	50		 push	 eax
  03797	51		 push	 ecx
  03798	e8 00 00 00 00	 call	 __alldiv

; 4546 : 
; 4547 : 						swprintf (szMaxRecomOuterVolFillSize, L"%I64d %s", maxRecomOuterVolFillSize / BYTES_PER_MB, GetString ("MB"));

  0379d	68 00 00 00 00	 push	 OFFSET ??_C@_02LKLDBFPJ@MB?$AA@
  037a2	8b f8		 mov	 edi, eax
  037a4	89 55 dc	 mov	 DWORD PTR _maxRecomOuterVolFillSize$133832[ebp+4], edx
  037a7	e8 00 00 00 00	 call	 _GetString
  037ac	8b 4d dc	 mov	 ecx, DWORD PTR _maxRecomOuterVolFillSize$133832[ebp+4]
  037af	83 c4 04	 add	 esp, 4
  037b2	50		 push	 eax
  037b3	6a 00		 push	 0
  037b5	68 00 00 10 00	 push	 1048576			; 00100000H
  037ba	51		 push	 ecx
  037bb	57		 push	 edi
  037bc	e8 00 00 00 00	 call	 __alldiv
  037c1	52		 push	 edx
  037c2	50		 push	 eax
  037c3	8d 95 5c 10 01
	00		 lea	 edx, DWORD PTR _szMaxRecomOuterVolFillSize$133831[ebp]
  037c9	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@
  037ce	52		 push	 edx
  037cf	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf

; 4548 : 
; 4549 : 						swprintf (msg, GetString ("HIDVOL_HOST_FILLING_HELP_SYSENC"), hiddenVolHostDriveNo + 'A', szMaxRecomOuterVolFillSize);			

  037d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  037da	83 c4 14	 add	 esp, 20			; 00000014H
  037dd	8d 85 5c 10 01
	00		 lea	 eax, DWORD PTR _szMaxRecomOuterVolFillSize$133831[ebp]
  037e3	50		 push	 eax
  037e4	83 c1 41	 add	 ecx, 65			; 00000041H
  037e7	51		 push	 ecx
  037e8	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NGPBKLAB@HIDVOL_HOST_FILLING_HELP_SYSENC?$AA@
  037ed	e8 00 00 00 00	 call	 _GetString
  037f2	83 c4 04	 add	 esp, 4
  037f5	50		 push	 eax
  037f6	8d 95 b0 7e 00
	00		 lea	 edx, DWORD PTR _msg$133829[ebp]
  037fc	52		 push	 edx
  037fd	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf
  03802	83 c4 10	 add	 esp, 16			; 00000010H

; 4550 : 					}
; 4551 : 					else

  03805	eb 26		 jmp	 SHORT $LN179@PageDialog
$LN180@PageDialog:

; 4552 : 						swprintf (msg, GetString ("HIDVOL_HOST_FILLING_HELP"), hiddenVolHostDriveNo + 'A');

  03807	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  0380c	83 c0 41	 add	 eax, 65			; 00000041H
  0380f	50		 push	 eax
  03810	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@NMHGGMKI@HIDVOL_HOST_FILLING_HELP?$AA@
  03815	e8 00 00 00 00	 call	 _GetString
  0381a	83 c4 04	 add	 esp, 4
  0381d	50		 push	 eax
  0381e	8d 8d b0 7e 00
	00		 lea	 ecx, DWORD PTR _msg$133829[ebp]
  03824	51		 push	 ecx
  03825	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf
  0382a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN179@PageDialog:

; 4553 : 
; 4554 : 					SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), msg);

  0382d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  03833	8d 95 b0 7e 00
	00		 lea	 edx, DWORD PTR _msg$133829[ebp]
  03839	52		 push	 edx
  0383a	68 eb 03 00 00	 push	 1003			; 000003ebH
  0383f	53		 push	 ebx
  03840	ff d7		 call	 edi
  03842	50		 push	 eax
  03843	ff d6		 call	 esi

; 4555 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("HIDVOL_HOST_FILLING_TITLE"));

  03845	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@GEKKOMHD@HIDVOL_HOST_FILLING_TITLE?$AA@

; 4556 : 				}
; 4557 : 				else 

  0384a	eb 78		 jmp	 SHORT $LN716@PageDialog
$LN181@PageDialog:

; 4558 : 				{
; 4559 : 					if (bHiddenOS)

  0384c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  03851	85 c0		 test	 eax, eax
  03853	74 21		 je	 SHORT $LN177@PageDialog

; 4560 : 						SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SYSENC_HIDDEN_VOL_FORMAT_FINISHED_HELP"));

  03855	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DILBCENC@SYSENC_HIDDEN_VOL_FORMAT_FINISHE@
  0385a	e8 00 00 00 00	 call	 _GetString
  0385f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  03865	83 c4 04	 add	 esp, 4
  03868	50		 push	 eax
  03869	68 eb 03 00 00	 push	 1003			; 000003ebH
  0386e	53		 push	 ebx
  0386f	ff d7		 call	 edi
  03871	50		 push	 eax
  03872	ff d6		 call	 esi

; 4561 : 					else

  03874	eb 39		 jmp	 SHORT $LN176@PageDialog
$LN177@PageDialog:

; 4562 : 					{
; 4563 : 						SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString (bInPlaceEncNonSys ? "NONSYS_INPLACE_ENC_FINISHED_INFO" : "FORMAT_FINISHED_HELP"));

  03876	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  0387c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CB@KOCBDKDK@NONSYS_INPLACE_ENC_FINISHED_INFO@
  03881	85 c9		 test	 ecx, ecx
  03883	75 05		 jne	 SHORT $LN416@PageDialog
  03885	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@GBMPIMLF@FORMAT_FINISHED_HELP?$AA@
$LN416@PageDialog:
  0388a	50		 push	 eax
  0388b	e8 00 00 00 00	 call	 _GetString
  03890	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  03896	83 c4 04	 add	 esp, 4
  03899	50		 push	 eax
  0389a	68 eb 03 00 00	 push	 1003			; 000003ebH
  0389f	53		 push	 ebx
  038a0	ff d7		 call	 edi
  038a2	50		 push	 eax
  038a3	ff d6		 call	 esi

; 4564 : 						bConfirmQuit = FALSE;

  038a5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bConfirmQuit@@3HC, 0 ; bConfirmQuit
$LN176@PageDialog:

; 4565 : 					}
; 4566 : 
; 4567 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString (bHiddenVol ? "HIDVOL_FORMAT_FINISHED_TITLE" : "FORMAT_FINISHED_TITLE"));

  038af	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  038b5	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BN@DJMJCNLA@HIDVOL_FORMAT_FINISHED_TITLE?$AA@
  038ba	85 d2		 test	 edx, edx
  038bc	75 05		 jne	 SHORT $LN418@PageDialog
  038be	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BG@HBBDJEK@FORMAT_FINISHED_TITLE?$AA@
$LN418@PageDialog:
  038c3	50		 push	 eax
$LN716@PageDialog:
  038c4	e8 00 00 00 00	 call	 _GetString
  038c9	83 c4 04	 add	 esp, 4
  038cc	50		 push	 eax
  038cd	68 e8 03 00 00	 push	 1000			; 000003e8H
  038d2	53		 push	 ebx
  038d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  038d9	50		 push	 eax
  038da	ff d7		 call	 edi
  038dc	50		 push	 eax
  038dd	ff d6		 call	 esi

; 4568 : 				}
; 4569 : 
; 4570 : 
; 4571 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  038df	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  038e4	e8 00 00 00 00	 call	 _GetString
  038e9	83 c4 04	 add	 esp, 4
  038ec	50		 push	 eax
  038ed	68 10 04 00 00	 push	 1040			; 00000410H
  038f2	53		 push	 ebx
  038f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  038f9	50		 push	 eax
  038fa	ff d7		 call	 edi
  038fc	50		 push	 eax
  038fd	ff d6		 call	 esi

; 4572 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  038ff	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  03904	e8 00 00 00 00	 call	 _GetString
  03909	83 c4 04	 add	 esp, 4
  0390c	50		 push	 eax
  0390d	68 11 04 00 00	 push	 1041			; 00000411H
  03912	53		 push	 ebx
  03913	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03919	50		 push	 eax
  0391a	ff d7		 call	 edi
  0391c	50		 push	 eax
  0391d	ff d6		 call	 esi

; 4573 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  0391f	6a 01		 push	 1
  03921	68 10 04 00 00	 push	 1040			; 00000410H
  03926	53		 push	 ebx
  03927	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0392d	50		 push	 eax
  0392e	ff d7		 call	 edi
  03930	50		 push	 eax
  03931	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4574 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), (!bHiddenVol || bHiddenVolFinished) && !bHiddenOS && !bInPlaceEncNonSys);

  03937	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  0393c	85 c0		 test	 eax, eax
  0393e	74 0a		 je	 SHORT $LN419@PageDialog
  03940	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVolFinished@@3HC ; bHiddenVolFinished
  03946	85 c9		 test	 ecx, ecx
  03948	74 18		 je	 SHORT $LN420@PageDialog
$LN419@PageDialog:
  0394a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  03950	85 d2		 test	 edx, edx
  03952	75 0e		 jne	 SHORT $LN420@PageDialog
  03954	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSys
  03959	85 c0		 test	 eax, eax
  0395b	75 05		 jne	 SHORT $LN420@PageDialog
  0395d	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  03960	eb 02		 jmp	 SHORT $LN421@PageDialog
$LN420@PageDialog:
  03962	33 c0		 xor	 eax, eax
$LN421@PageDialog:
  03964	50		 push	 eax
  03965	68 11 04 00 00	 push	 1041			; 00000411H
  0396a	53		 push	 ebx
  0396b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03971	50		 push	 eax
  03972	ff d7		 call	 edi
  03974	50		 push	 eax
  03975	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4575 : 
; 4576 : 				if ((!bHiddenVol || bHiddenVolFinished) && !bHiddenOS)

  0397b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  03981	85 c9		 test	 ecx, ecx
  03983	74 0e		 je	 SHORT $LN174@PageDialog
  03985	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVolFinished@@3HC ; bHiddenVolFinished
  0398b	85 d2		 test	 edx, edx
  0398d	0f 84 cc f2 ff
	ff		 je	 $LN337@PageDialog
$LN174@PageDialog:
  03993	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  03998	85 c0		 test	 eax, eax
  0399a	0f 85 bf f2 ff
	ff		 jne	 $LN337@PageDialog

; 4577 : 					SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("EXIT"));

  039a0	68 00 00 00 00	 push	 OFFSET ??_C@_04GOLNGIJ@EXIT?$AA@
  039a5	e8 00 00 00 00	 call	 _GetString
  039aa	83 c4 04	 add	 esp, 4
  039ad	50		 push	 eax
  039ae	6a 02		 push	 2

; 4668 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  039b0	53		 push	 ebx
  039b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  039b7	50		 push	 eax
  039b8	ff d7		 call	 edi
  039ba	50		 push	 eax
  039bb	ff d6		 call	 esi
  039bd	33 c0		 xor	 eax, eax
  039bf	e9 a0 19 00 00	 jmp	 $LN342@PageDialog
$LN173@PageDialog:

; 4578 : 			}
; 4579 : 			break;
; 4580 : 
; 4581 : 		case SYSENC_HIDDEN_OS_INITIAL_INFO_PAGE:
; 4582 : 
; 4583 : 			if (!IsHiddenOSRunning() || !bHiddenOS)

  039c4	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  039c9	85 c0		 test	 eax, eax
  039cb	74 53		 je	 SHORT $LN171@PageDialog
  039cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  039d3	85 c9		 test	 ecx, ecx
  039d5	74 49		 je	 SHORT $LN171@PageDialog

; 4588 : 			}
; 4589 : 
; 4590 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYSENC_HIDDEN_OS_INITIAL_INFO_TITLE"));

  039d7	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LLANPMHF@SYSENC_HIDDEN_OS_INITIAL_INFO_TI@
  039dc	e8 00 00 00 00	 call	 _GetString
  039e1	83 c4 04	 add	 esp, 4
  039e4	50		 push	 eax
  039e5	68 e8 03 00 00	 push	 1000			; 000003e8H
  039ea	53		 push	 ebx
  039eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  039f1	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  039f7	50		 push	 eax
  039f8	ff d7		 call	 edi
  039fa	50		 push	 eax
  039fb	ff d6		 call	 esi

; 4591 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("FIRST_HIDDEN_OS_BOOT_INFO"));

  039fd	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@FHELJNGN@FIRST_HIDDEN_OS_BOOT_INFO?$AA@
  03a02	e8 00 00 00 00	 call	 _GetString
  03a07	83 c4 04	 add	 esp, 4
  03a0a	50		 push	 eax
  03a0b	68 eb 03 00 00	 push	 1003			; 000003ebH
  03a10	53		 push	 ebx
  03a11	ff d7		 call	 edi
  03a13	50		 push	 eax
  03a14	ff d6		 call	 esi

; 4592 : 
; 4593 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  03a16	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@

; 4594 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));
; 4595 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("DEFER"));
; 4596 : 
; 4597 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);
; 4598 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);
; 4599 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), TRUE);
; 4600 : 			break;

  03a1b	e9 25 ef ff ff	 jmp	 $LN720@PageDialog
$LN171@PageDialog:

; 4584 : 			{
; 4585 : 				ReportUnexpectedState (SRC_POS);

  03a20	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BKENFEKO@PageDialogProc?34585?$AA@
  03a25	e8 00 00 00 00	 call	 _ReportUnexpectedState

; 4586 : 				EndMainDlg (MainDlg);
; 4587 : 				return 0;

  03a2a	e9 22 f2 ff ff	 jmp	 $LN737@PageDialog
$LN170@PageDialog:

; 4601 : 
; 4602 : 		case SYSENC_HIDDEN_OS_WIPE_INFO_PAGE:
; 4603 : 
; 4604 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("SYSENC_HIDDEN_OS_WIPE_INFO_TITLE"));

  03a2f	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MMHOKPDB@SYSENC_HIDDEN_OS_WIPE_INFO_TITLE@
  03a34	e8 00 00 00 00	 call	 _GetString
  03a39	83 c4 04	 add	 esp, 4
  03a3c	50		 push	 eax
  03a3d	68 e8 03 00 00	 push	 1000			; 000003e8H
  03a42	53		 push	 ebx
  03a43	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03a49	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  03a4f	50		 push	 eax
  03a50	ff d7		 call	 edi
  03a52	50		 push	 eax
  03a53	ff d6		 call	 esi

; 4605 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("SYSENC_HIDDEN_OS_WIPE_INFO"));

  03a55	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@KAEKPGLE@SYSENC_HIDDEN_OS_WIPE_INFO?$AA@
  03a5a	e8 00 00 00 00	 call	 _GetString
  03a5f	83 c4 04	 add	 esp, 4
  03a62	50		 push	 eax
  03a63	68 eb 03 00 00	 push	 1003			; 000003ebH
  03a68	53		 push	 ebx
  03a69	ff d7		 call	 edi
  03a6b	50		 push	 eax
  03a6c	ff d6		 call	 esi

; 4606 : 
; 4607 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  03a6e	6a 01		 push	 1
  03a70	68 11 04 00 00	 push	 1041			; 00000411H

; 4608 : 
; 4609 : 			break;

  03a75	e9 51 ee ff ff	 jmp	 $LN721@PageDialog
$LN169@PageDialog:

; 4610 : 
; 4611 : 		case DEVICE_WIPE_MODE_PAGE:
; 4612 : 
; 4613 : 			if (nWipeMode == TC_WIPE_NONE)

  03a7a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _nWipeMode, 0
  03a81	75 0a		 jne	 SHORT $LN168@PageDialog

; 4614 : 				nWipeMode = TC_WIPE_1_RAND;

  03a83	c7 05 00 00 00
	00 64 00 00 00	 mov	 DWORD PTR _nWipeMode, 100 ; 00000064H
$LN168@PageDialog:

; 4615 : 
; 4616 : 			if (bHiddenOS && IsHiddenOSRunning())

  03a8d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  03a93	85 d2		 test	 edx, edx
  03a95	74 33		 je	 SHORT $LN167@PageDialog
  03a97	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  03a9c	85 c0		 test	 eax, eax
  03a9e	74 2a		 je	 SHORT $LN167@PageDialog

; 4617 : 			{
; 4618 : 				// Decoy system partition wipe
; 4619 : 
; 4620 : 				WipeAbort(); // In case the GUI previously crashed and the driver is still wiping

  03aa0	e8 00 00 00 00	 call	 _WipeAbort

; 4621 : 				SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDCANCEL), GetString ("CANCEL"));

  03aa5	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  03aaa	e8 00 00 00 00	 call	 _GetString
  03aaf	83 c4 04	 add	 esp, 4
  03ab2	50		 push	 eax
  03ab3	6a 02		 push	 2
  03ab5	53		 push	 ebx
  03ab6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03abc	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  03ac2	50		 push	 eax
  03ac3	ff d7		 call	 edi
  03ac5	50		 push	 eax
  03ac6	ff d6		 call	 esi

; 4622 : 			}
; 4623 : 			else

  03ac8	eb 2f		 jmp	 SHORT $LN166@PageDialog
$LN167@PageDialog:

; 4624 : 			{
; 4625 : 				// Regular device wipe (not decoy system partition wipe)
; 4626 : 
; 4627 : 				// Title bar
; 4628 : 				SetWindowTextA(MainDlg, TC_APP_NAME);

  03aca	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  03acf	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FEEFGEIL@CipherShed?$AA@
  03ad4	50		 push	 eax
  03ad5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 4629 : 
; 4630 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), FALSE);

  03adb	6a 00		 push	 0
  03add	68 11 04 00 00	 push	 1041			; 00000411H
  03ae2	53		 push	 ebx
  03ae3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03ae9	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  03aef	50		 push	 eax
  03af0	ff d7		 call	 edi
  03af2	50		 push	 eax
  03af3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
$LN166@PageDialog:

; 4631 : 			}
; 4632 : 
; 4633 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("WIPE_MODE_TITLE"));

  03af9	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GEMFOMCA@WIPE_MODE_TITLE?$AA@
  03afe	e8 00 00 00 00	 call	 _GetString
  03b03	83 c4 04	 add	 esp, 4
  03b06	50		 push	 eax
  03b07	68 e8 03 00 00	 push	 1000			; 000003e8H
  03b0c	53		 push	 ebx
  03b0d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03b13	50		 push	 eax
  03b14	ff d7		 call	 edi
  03b16	50		 push	 eax
  03b17	ff d6		 call	 esi

; 4634 : 			SetWindowTextW (GetDlgItem (hwndDlg, IDT_WIPE_MODE_INFO), GetString ("WIPE_MODE_INFO"));

  03b19	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JJNKBKFB@WIPE_MODE_INFO?$AA@
  03b1e	e8 00 00 00 00	 call	 _GetString
  03b23	83 c4 04	 add	 esp, 4
  03b26	50		 push	 eax
  03b27	68 3c 04 00 00	 push	 1084			; 0000043cH
  03b2c	53		 push	 ebx
  03b2d	ff d7		 call	 edi
  03b2f	50		 push	 eax
  03b30	ff d6		 call	 esi

; 4635 : 
; 4636 : 			PopulateWipeModeCombo (GetDlgItem (hwndDlg, IDC_WIPE_MODE), FALSE, FALSE);

  03b32	6a 00		 push	 0
  03b34	6a 00		 push	 0
  03b36	68 3d 04 00 00	 push	 1085			; 0000043dH
  03b3b	53		 push	 ebx
  03b3c	ff d7		 call	 edi
  03b3e	50		 push	 eax
  03b3f	e8 00 00 00 00	 call	 _PopulateWipeModeCombo
  03b44	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4637 : 
; 4638 : 			SelectAlgo (GetDlgItem (hwndDlg, IDC_WIPE_MODE), (int *) &nWipeMode);

  03b47	68 00 00 00 00	 push	 OFFSET _nWipeMode
  03b4c	68 3d 04 00 00	 push	 1085			; 0000043dH
  03b51	53		 push	 ebx
  03b52	ff d7		 call	 edi
  03b54	50		 push	 eax
  03b55	e8 00 00 00 00	 call	 _SelectAlgo

; 4639 : 
; 4640 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("NEXT"));

  03b5a	68 00 00 00 00	 push	 OFFSET ??_C@_04MOKMKBJN@NEXT?$AA@
  03b5f	e8 00 00 00 00	 call	 _GetString
  03b64	83 c4 0c	 add	 esp, 12			; 0000000cH
  03b67	50		 push	 eax
  03b68	68 10 04 00 00	 push	 1040			; 00000410H
  03b6d	53		 push	 ebx
  03b6e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03b74	50		 push	 eax
  03b75	ff d7		 call	 edi
  03b77	50		 push	 eax
  03b78	ff d6		 call	 esi

; 4641 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_PREV), GetString ("PREV"));

  03b7a	68 00 00 00 00	 push	 OFFSET ??_C@_04PKHKLFPJ@PREV?$AA@
  03b7f	e8 00 00 00 00	 call	 _GetString
  03b84	83 c4 04	 add	 esp, 4
  03b87	50		 push	 eax
  03b88	68 11 04 00 00	 push	 1041			; 00000411H
  03b8d	53		 push	 ebx
  03b8e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03b94	50		 push	 eax
  03b95	ff d7		 call	 edi
  03b97	50		 push	 eax
  03b98	ff d6		 call	 esi

; 4642 : 
; 4643 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  03b9a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetParent@4
  03ba0	6a 01		 push	 1
  03ba2	68 10 04 00 00	 push	 1040			; 00000410H
  03ba7	53		 push	 ebx
  03ba8	ff d6		 call	 esi
  03baa	50		 push	 eax
  03bab	ff d7		 call	 edi
  03bad	50		 push	 eax
  03bae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4644 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDCANCEL), TRUE);

  03bb4	6a 01		 push	 1
  03bb6	6a 02		 push	 2
  03bb8	53		 push	 ebx
  03bb9	ff d6		 call	 esi
  03bbb	50		 push	 eax
  03bbc	ff d7		 call	 edi
  03bbe	50		 push	 eax
  03bbf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  03bc5	33 c0		 xor	 eax, eax
  03bc7	e9 98 17 00 00	 jmp	 $LN342@PageDialog
$LN165@PageDialog:

; 4645 : 
; 4646 : 			break;
; 4647 : 
; 4648 : 		case DEVICE_WIPE_PAGE:
; 4649 : 
; 4650 : 			if (bHiddenOS && IsHiddenOSRunning())

  03bcc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  03bd2	85 c9		 test	 ecx, ecx
  03bd4	74 10		 je	 SHORT $LN164@PageDialog
  03bd6	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  03bdb	85 c0		 test	 eax, eax
  03bdd	74 07		 je	 SHORT $LN164@PageDialog

; 4651 : 			{
; 4652 : 				// Decoy system partition wipe
; 4653 : 
; 4654 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("DEVICE_WIPE_PAGE_INFO_HIDDEN_OS"));

  03bdf	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NHNKCAEG@DEVICE_WIPE_PAGE_INFO_HIDDEN_OS?$AA@

; 4655 : 			}
; 4656 : 			else

  03be4	eb 05		 jmp	 SHORT $LN717@PageDialog
$LN164@PageDialog:

; 4657 : 			{
; 4658 : 				// Regular device wipe (not decoy system partition wipe)
; 4659 : 
; 4660 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_BOX_HELP), GetString ("DEVICE_WIPE_PAGE_INFO"));

  03be6	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@OABGGIFL@DEVICE_WIPE_PAGE_INFO?$AA@
$LN717@PageDialog:
  03beb	e8 00 00 00 00	 call	 _GetString
  03bf0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  03bf6	83 c4 04	 add	 esp, 4
  03bf9	50		 push	 eax
  03bfa	68 eb 03 00 00	 push	 1003			; 000003ebH
  03bff	53		 push	 ebx
  03c00	ff d7		 call	 edi
  03c02	50		 push	 eax
  03c03	ff d6		 call	 esi

; 4661 : 			}
; 4662 : 
; 4663 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_BOX_TITLE), GetString ("DEVICE_WIPE_PAGE_TITLE"));

  03c05	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IEGJMJEM@DEVICE_WIPE_PAGE_TITLE?$AA@
  03c0a	e8 00 00 00 00	 call	 _GetString
  03c0f	83 c4 04	 add	 esp, 4
  03c12	50		 push	 eax
  03c13	68 e8 03 00 00	 push	 1000			; 000003e8H
  03c18	53		 push	 ebx
  03c19	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03c1f	50		 push	 eax
  03c20	ff d7		 call	 edi
  03c22	50		 push	 eax
  03c23	ff d6		 call	 esi

; 4664 : 			SetWindowTextW (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), GetString ("WIPE"));

  03c25	68 00 00 00 00	 push	 OFFSET ??_C@_04LEEAJJHO@WIPE?$AA@
  03c2a	e8 00 00 00 00	 call	 _GetString
  03c2f	83 c4 04	 add	 esp, 4
  03c32	50		 push	 eax
  03c33	68 10 04 00 00	 push	 1040			; 00000410H
  03c38	53		 push	 ebx
  03c39	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03c3f	50		 push	 eax
  03c40	ff d7		 call	 edi
  03c42	50		 push	 eax
  03c43	ff d6		 call	 esi

; 4665 : 			SetWindowTextW (GetDlgItem (hCurPage, IDC_WIPE_MODE), (wstring (L"  ") + GetWipeModeName (nWipeMode)).c_str());

  03c45	68 00 00 00 00	 push	 OFFSET ??_C@_15OJKDPEFE@?$AA?5?$AA?5?$AA?$AA@
  03c4a	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T165850[ebp]
  03c50	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  03c55	89 45 e8	 mov	 DWORD PTR tv5152[ebp], eax
  03c58	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _nWipeMode
  03c5e	52		 push	 edx
  03c5f	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 6
  03c66	e8 00 00 00 00	 call	 _GetWipeModeName
  03c6b	50		 push	 eax
  03c6c	8b 45 e8	 mov	 eax, DWORD PTR tv5152[ebp]
  03c6f	50		 push	 eax
  03c70	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T165851[ebp]
  03c76	51		 push	 ecx
  03c77	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  03c7c	83 c4 10	 add	 esp, 16			; 00000010H
  03c7f	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  03c83	72 05		 jb	 SHORT $LN548@PageDialog
  03c85	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  03c88	eb 03		 jmp	 SHORT $LN549@PageDialog
$LN548@PageDialog:
  03c8a	83 c0 04	 add	 eax, 4
$LN549@PageDialog:
  03c8d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  03c93	50		 push	 eax
  03c94	68 3d 04 00 00	 push	 1085			; 0000043dH
  03c99	52		 push	 edx
  03c9a	ff d7		 call	 edi
  03c9c	50		 push	 eax
  03c9d	ff d6		 call	 esi
  03c9f	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T165851[ebp]
  03ca5	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  03caa	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T165850[ebp]
  03cb0	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 4666 : 
; 4667 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_ABORT_BUTTON), FALSE);

  03cb5	6a 00		 push	 0
  03cb7	68 f8 03 00 00	 push	 1016			; 000003f8H
  03cbc	53		 push	 ebx
$LN697@PageDialog:
  03cbd	ff d7		 call	 edi
  03cbf	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  03cc5	50		 push	 eax
  03cc6	ff d6		 call	 esi

; 4668 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_PREV), TRUE);

  03cc8	6a 01		 push	 1
  03cca	68 11 04 00 00	 push	 1041			; 00000411H
  03ccf	53		 push	 ebx
  03cd0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03cd6	50		 push	 eax
  03cd7	ff d7		 call	 edi
  03cd9	50		 push	 eax
  03cda	ff d6		 call	 esi
  03cdc	33 c0		 xor	 eax, eax
  03cde	e9 81 16 00 00	 jmp	 $LN342@PageDialog
$LN162@PageDialog:

; 4669 : 
; 4670 : 			break;
; 4671 : 		}
; 4672 : 		return 0;
; 4673 : 
; 4674 : 	case WM_HELP:
; 4675 : 		OpenPageHelp (GetParent (hwndDlg), nCurPageNo);

  03ce3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  03ce8	50		 push	 eax
  03ce9	53		 push	 ebx
  03cea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03cf0	50		 push	 eax
  03cf1	e8 00 00 00 00	 call	 _OpenPageHelp
  03cf6	83 c4 08	 add	 esp, 8

; 4676 : 		return 1;

  03cf9	e9 61 16 00 00	 jmp	 $LN707@PageDialog
$LN160@PageDialog:

; 4681 : 
; 4682 : 	case WM_COMMAND:
; 4683 : 
; 4684 : 		if (nCurPageNo == INTRO_PAGE)

  03cfe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  03d04	85 c9		 test	 ecx, ecx
  03d06	0f 85 28 01 00
	00		 jne	 $LN157@PageDialog

; 4685 : 		{
; 4686 : 			switch (lw)

  03d0c	0f b7 c7	 movzx	 eax, di
  03d0f	05 db fb ff ff	 add	 eax, -1061		; fffffbdbH
  03d14	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  03d17	0f 87 1e 02 00
	00		 ja	 $LN137@PageDialog
  03d1d	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN619@PageDialog[eax]
  03d24	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN739@PageDialog[eax*4]
$LN156@PageDialog:

; 4687 : 			{
; 4688 : 			case IDC_FILE_CONTAINER:
; 4689 : 				UpdateWizardModeControls (hwndDlg, WIZARD_MODE_FILE_CONTAINER);

  03d2b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  03d31	6a 00		 push	 0
  03d33	6a 01		 push	 1
  03d35	68 f1 00 00 00	 push	 241			; 000000f1H
  03d3a	68 25 04 00 00	 push	 1061			; 00000425H
  03d3f	53		 push	 ebx
  03d40	ff d6		 call	 esi
  03d42	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  03d48	50		 push	 eax
  03d49	ff d7		 call	 edi
  03d4b	6a 00		 push	 0
  03d4d	6a 00		 push	 0
  03d4f	68 f1 00 00 00	 push	 241			; 000000f1H
  03d54	68 26 04 00 00	 push	 1062			; 00000426H
  03d59	53		 push	 ebx
  03d5a	ff d6		 call	 esi
  03d5c	50		 push	 eax
  03d5d	ff d7		 call	 edi
  03d5f	6a 00		 push	 0
  03d61	6a 00		 push	 0
$LN730@PageDialog:
  03d63	68 f1 00 00 00	 push	 241			; 000000f1H
  03d68	68 27 04 00 00	 push	 1063			; 00000427H
  03d6d	53		 push	 ebx
  03d6e	ff d6		 call	 esi
  03d70	50		 push	 eax
  03d71	ff d7		 call	 edi

; 4690 : 				return 1;

  03d73	e9 e7 15 00 00	 jmp	 $LN707@PageDialog
$LN155@PageDialog:

; 4691 : 
; 4692 : 			case IDC_NONSYS_DEVICE:
; 4693 : 				UpdateWizardModeControls (hwndDlg, WIZARD_MODE_NONSYS_DEVICE);

  03d78	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  03d7e	6a 00		 push	 0
  03d80	6a 00		 push	 0
  03d82	68 f1 00 00 00	 push	 241			; 000000f1H
  03d87	68 25 04 00 00	 push	 1061			; 00000425H
  03d8c	53		 push	 ebx
  03d8d	ff d6		 call	 esi
  03d8f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  03d95	50		 push	 eax
  03d96	ff d7		 call	 edi
  03d98	6a 00		 push	 0
  03d9a	6a 01		 push	 1
  03d9c	68 f1 00 00 00	 push	 241			; 000000f1H
  03da1	68 26 04 00 00	 push	 1062			; 00000426H
  03da6	53		 push	 ebx
  03da7	ff d6		 call	 esi
  03da9	50		 push	 eax
  03daa	ff d7		 call	 edi
  03dac	6a 00		 push	 0
  03dae	6a 00		 push	 0
  03db0	68 f1 00 00 00	 push	 241			; 000000f1H
  03db5	68 27 04 00 00	 push	 1063			; 00000427H
  03dba	53		 push	 ebx
  03dbb	ff d6		 call	 esi
  03dbd	50		 push	 eax
  03dbe	ff d7		 call	 edi

; 4694 : 				return 1;

  03dc0	e9 9a 15 00 00	 jmp	 $LN707@PageDialog
$LN154@PageDialog:

; 4695 : 
; 4696 : 			case IDC_SYS_DEVICE:
; 4697 : 				UpdateWizardModeControls (hwndDlg, WIZARD_MODE_SYS_DEVICE);

  03dc5	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  03dcb	6a 00		 push	 0
  03dcd	6a 00		 push	 0
  03dcf	68 f1 00 00 00	 push	 241			; 000000f1H
  03dd4	68 25 04 00 00	 push	 1061			; 00000425H
  03dd9	53		 push	 ebx
  03dda	ff d6		 call	 esi
  03ddc	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  03de2	50		 push	 eax
  03de3	ff d7		 call	 edi
  03de5	6a 00		 push	 0
  03de7	6a 00		 push	 0
  03de9	68 f1 00 00 00	 push	 241			; 000000f1H
  03dee	68 26 04 00 00	 push	 1062			; 00000426H
  03df3	53		 push	 ebx
  03df4	ff d6		 call	 esi
  03df6	50		 push	 eax
  03df7	ff d7		 call	 edi
  03df9	6a 00		 push	 0
  03dfb	6a 01		 push	 1

; 4698 : 				return 1;

  03dfd	e9 61 ff ff ff	 jmp	 $LN730@PageDialog
$LN153@PageDialog:

; 4699 : 
; 4700 : 			case IDC_MORE_INFO_ON_CONTAINERS:
; 4701 : 				Applink ("introcontainer", TRUE, "");

  03e02	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  03e07	6a 01		 push	 1
  03e09	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JBBMPDEB@introcontainer?$AA@
  03e0e	e8 00 00 00 00	 call	 _Applink
  03e13	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4702 : 				return 1;

  03e16	e9 44 15 00 00	 jmp	 $LN707@PageDialog
$LN152@PageDialog:

; 4703 : 
; 4704 : 			case IDC_MORE_INFO_ON_SYS_ENCRYPTION:
; 4705 : 				Applink ("introsysenc", TRUE, "");

  03e1b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  03e20	6a 01		 push	 1
  03e22	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FEPBHLEO@introsysenc?$AA@
  03e27	e8 00 00 00 00	 call	 _Applink
  03e2c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4706 : 				return 1;

  03e2f	e9 2b 15 00 00	 jmp	 $LN707@PageDialog
$LN157@PageDialog:

; 4707 : 			}
; 4708 : 		}
; 4709 : 
; 4710 : 		if (nCurPageNo == SYSENC_TYPE_PAGE)

  03e34	83 f9 01	 cmp	 ecx, 1
  03e37	75 5e		 jne	 SHORT $LN149@PageDialog

; 4711 : 		{
; 4712 : 			switch (lw)

  03e39	0f b7 c7	 movzx	 eax, di
  03e3c	2d 48 04 00 00	 sub	 eax, 1096		; 00000448H
  03e41	74 3e		 je	 SHORT $LN147@PageDialog
  03e43	2b c1		 sub	 eax, ecx
  03e45	74 21		 je	 SHORT $LN148@PageDialog
  03e47	83 e8 02	 sub	 eax, 2
  03e4a	0f 85 a0 00 00
	00		 jne	 $LN142@PageDialog

; 4725 : 
; 4726 : 			case IDC_HIDDEN_SYSENC_INFO_LINK:
; 4727 : 				Applink ("hiddensysenc", TRUE, "");

  03e50	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  03e55	51		 push	 ecx
  03e56	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LFKKAENK@hiddensysenc?$AA@
  03e5b	e8 00 00 00 00	 call	 _Applink
  03e60	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4728 : 				return 1;

  03e63	e9 f7 14 00 00	 jmp	 $LN707@PageDialog
$LN148@PageDialog:

; 4713 : 			{
; 4714 : 			case IDC_SYSENC_HIDDEN:
; 4715 : 				bHiddenOS = TRUE;

  03e68	b8 01 00 00 00	 mov	 eax, 1
  03e6d	a3 00 00 00 00	 mov	 DWORD PTR ?bHiddenOS@@3HC, eax ; bHiddenOS

; 4716 : 				bHiddenVol = TRUE;

  03e72	a3 00 00 00 00	 mov	 DWORD PTR ?bHiddenVol@@3HC, eax ; bHiddenVol

; 4717 : 				bHiddenVolHost = TRUE;

  03e77	a3 00 00 00 00	 mov	 DWORD PTR _bHiddenVolHost, eax

; 4718 : 				return 1;

  03e7c	e9 e3 14 00 00	 jmp	 $LN342@PageDialog
$LN147@PageDialog:

; 4719 : 
; 4720 : 			case IDC_SYSENC_NORMAL:
; 4721 : 				bHiddenOS = FALSE;

  03e81	33 c0		 xor	 eax, eax
  03e83	a3 00 00 00 00	 mov	 DWORD PTR ?bHiddenOS@@3HC, eax ; bHiddenOS

; 4722 : 				bHiddenVol = FALSE;

  03e88	a3 00 00 00 00	 mov	 DWORD PTR ?bHiddenVol@@3HC, eax ; bHiddenVol

; 4723 : 				bHiddenVolHost = FALSE;

  03e8d	a3 00 00 00 00	 mov	 DWORD PTR _bHiddenVolHost, eax

; 4724 : 				return 1;

  03e92	e9 c8 14 00 00	 jmp	 $LN707@PageDialog
$LN149@PageDialog:

; 4729 : 			}
; 4730 : 		}
; 4731 : 
; 4732 : 		if (nCurPageNo == SYSENC_HIDDEN_OS_REQ_CHECK_PAGE && lw == IDC_HIDDEN_SYSENC_INFO_LINK)

  03e97	83 f9 02	 cmp	 ecx, 2
  03e9a	75 27		 jne	 SHORT $LN145@PageDialog
  03e9c	b8 4b 04 00 00	 mov	 eax, 1099		; 0000044bH
  03ea1	66 3b f8	 cmp	 di, ax
  03ea4	0f 85 91 00 00
	00		 jne	 $LN137@PageDialog

; 4733 : 		{
; 4734 : 			Applink ("hiddensysenc", TRUE, "");

  03eaa	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  03eaf	6a 01		 push	 1
  03eb1	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LFKKAENK@hiddensysenc?$AA@
  03eb6	e8 00 00 00 00	 call	 _Applink
  03ebb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4735 : 			return 1;

  03ebe	e9 9c 14 00 00	 jmp	 $LN707@PageDialog
$LN145@PageDialog:

; 4736 : 		}
; 4737 : 
; 4738 : 		if (nCurPageNo == SYSENC_SPAN_PAGE)

  03ec3	83 f9 03	 cmp	 ecx, 3
  03ec6	75 28		 jne	 SHORT $LN142@PageDialog

; 4739 : 		{
; 4740 : 			switch (lw)

  03ec8	0f b7 c7	 movzx	 eax, di
  03ecb	2d 2b 04 00 00	 sub	 eax, 1067		; 0000042bH
  03ed0	74 0f		 je	 SHORT $LN141@PageDialog
  03ed2	83 e8 01	 sub	 eax, 1
  03ed5	75 64		 jne	 SHORT $LN137@PageDialog

; 4745 : 			case IDC_SYS_PARTITION:
; 4746 : 				bWholeSysDrive = FALSE;

  03ed7	a3 00 00 00 00	 mov	 DWORD PTR ?bWholeSysDrive@@3HA, eax ; bWholeSysDrive

; 4747 : 				return 1;

  03edc	e9 7e 14 00 00	 jmp	 $LN707@PageDialog
$LN141@PageDialog:

; 4741 : 			{
; 4742 : 			case IDC_WHOLE_SYS_DRIVE:
; 4743 : 				bWholeSysDrive = TRUE;

  03ee1	b8 01 00 00 00	 mov	 eax, 1
  03ee6	a3 00 00 00 00	 mov	 DWORD PTR ?bWholeSysDrive@@3HA, eax ; bWholeSysDrive

; 4744 : 				return 1;

  03eeb	e9 74 14 00 00	 jmp	 $LN342@PageDialog
$LN142@PageDialog:

; 4748 : 			}
; 4749 : 
; 4750 : 		}
; 4751 : 
; 4752 : 		if (nCurPageNo == SYSENC_MULTI_BOOT_MODE_PAGE)

  03ef0	83 f9 06	 cmp	 ecx, 6
  03ef3	75 46		 jne	 SHORT $LN137@PageDialog

; 4753 : 		{
; 4754 : 			switch (lw)

  03ef5	0f b7 c7	 movzx	 eax, di
  03ef8	2d 34 04 00 00	 sub	 eax, 1076		; 00000434H
  03efd	74 30		 je	 SHORT $LN136@PageDialog
  03eff	83 e8 01	 sub	 eax, 1
  03f02	75 37		 jne	 SHORT $LN137@PageDialog

; 4760 : 			case IDC_MULTI_BOOT:
; 4761 : 				nMultiBoot = 2;

  03f04	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?nMultiBoot@@3HA, 2 ; nMultiBoot
$LN731@PageDialog:

; 4762 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  03f0e	6a 01		 push	 1
  03f10	68 10 04 00 00	 push	 1040			; 00000410H
  03f15	53		 push	 ebx
  03f16	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  03f1c	50		 push	 eax
  03f1d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  03f23	50		 push	 eax
  03f24	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4763 : 				return 1;

  03f2a	e9 30 14 00 00	 jmp	 $LN707@PageDialog
$LN136@PageDialog:

; 4755 : 			{
; 4756 : 			case IDC_SINGLE_BOOT:
; 4757 : 				nMultiBoot = 1;

  03f2f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?nMultiBoot@@3HA, 1 ; nMultiBoot

; 4758 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);
; 4759 : 				return 1;

  03f39	eb d3		 jmp	 SHORT $LN731@PageDialog
$LN137@PageDialog:

; 4764 : 			}
; 4765 : 		}
; 4766 : 
; 4767 : 		// Dual choice pages
; 4768 : 		switch (nCurPageNo)

  03f3b	83 f9 04	 cmp	 ecx, 4
  03f3e	74 08		 je	 SHORT $LN132@PageDialog
  03f40	8d 41 f9	 lea	 eax, DWORD PTR [ecx-7]
  03f43	83 f8 03	 cmp	 eax, 3
  03f46	77 14		 ja	 SHORT $LN131@PageDialog
$LN132@PageDialog:

; 4769 : 		{
; 4770 : 		case SYSENC_MULTI_BOOT_SYS_EQ_BOOT_PAGE:
; 4771 : 		case SYSENC_MULTI_BOOT_NBR_SYS_DRIVES_PAGE:
; 4772 : 		case SYSENC_MULTI_BOOT_ADJACENT_SYS_PAGE:
; 4773 : 		case SYSENC_MULTI_BOOT_NONWIN_BOOT_LOADER_PAGE:
; 4774 : 		case SYSENC_PRE_DRIVE_ANALYSIS_PAGE:
; 4775 : 
; 4776 : 			if (lw == IDC_CHOICE1 || lw == IDC_CHOICE2)

  03f48	b8 dd 13 00 00	 mov	 eax, 5085		; 000013ddH
  03f4d	66 3b f8	 cmp	 di, ax
  03f50	74 bc		 je	 SHORT $LN731@PageDialog
  03f52	b8 df 13 00 00	 mov	 eax, 5087		; 000013dfH
  03f57	66 3b f8	 cmp	 di, ax
  03f5a	74 b2		 je	 SHORT $LN731@PageDialog
$LN131@PageDialog:

; 4777 : 			{
; 4778 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);
; 4779 : 				return 1;
; 4780 : 			}
; 4781 : 			break;
; 4782 : 		}
; 4783 : 
; 4784 : 		if (nCurPageNo == FILESYS_PAGE && (lw == IDC_CHOICE1 || lw == IDC_CHOICE2))

  03f5c	83 f9 16	 cmp	 ecx, 22			; 00000016H
  03f5f	0f 85 1b 01 00
	00		 jne	 $LN129@PageDialog
  03f65	b8 dd 13 00 00	 mov	 eax, 5085		; 000013ddH
  03f6a	66 3b f8	 cmp	 di, ax
  03f6d	74 0e		 je	 SHORT $LN128@PageDialog
  03f6f	b8 df 13 00 00	 mov	 eax, 5087		; 000013dfH
  03f74	66 3b f8	 cmp	 di, ax
  03f77	0f 85 03 01 00
	00		 jne	 $LN129@PageDialog
$LN128@PageDialog:

; 4785 : 		{
; 4786 : 			if (bWarnOuterVolSuitableFileSys && lw == IDC_CHOICE1 && bHiddenVolHost)

  03f7d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bWarnOuterVolSuitableFileSys@@3HA, 0 ; bWarnOuterVolSuitableFileSys
  03f84	74 88		 je	 SHORT $LN731@PageDialog
  03f86	b9 dd 13 00 00	 mov	 ecx, 5085		; 000013ddH
  03f8b	66 39 8d a4 12
	01 00		 cmp	 WORD PTR _wParam$[ebp], cx
  03f92	0f 85 76 ff ff
	ff		 jne	 $LN731@PageDialog
  03f98	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  03f9e	85 d2		 test	 edx, edx
  03fa0	0f 84 68 ff ff
	ff		 je	 $LN731@PageDialog

; 4787 : 			{
; 4788 : 				wchar_t szTmp [4096];
; 4789 : 
; 4790 : 				bWarnOuterVolSuitableFileSys = FALSE;	// Do not show this warning anymore (this also prevents potential endless repetition due to some race conditions)
; 4791 : 
; 4792 : 				wcscpy (szTmp, GetString ("FILESYS_PAGE_HELP_EXPLANATION_HIDVOL"));

  03fa6	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BDOPEICN@FILESYS_PAGE_HELP_EXPLANATION_HI@
  03fab	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bWarnOuterVolSuitableFileSys@@3HA, 0 ; bWarnOuterVolSuitableFileSys
  03fb5	e8 00 00 00 00	 call	 _GetString
  03fba	83 c4 04	 add	 esp, 4
  03fbd	8d 95 b0 de 00
	00		 lea	 edx, DWORD PTR _szTmp$133922[ebp]
$LL422@PageDialog:
  03fc3	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  03fc6	66 89 0a	 mov	 WORD PTR [edx], cx
  03fc9	83 c0 02	 add	 eax, 2
  03fcc	83 c2 02	 add	 edx, 2
  03fcf	66 85 c9	 test	 cx, cx
  03fd2	75 ef		 jne	 SHORT $LL422@PageDialog

; 4793 : 				wcscat (szTmp, L"\n\n");

  03fd4	8d 85 b0 de 00
	00		 lea	 eax, DWORD PTR _szTmp$133922[ebp]
  03fda	83 c0 fe	 add	 eax, -2			; fffffffeH
  03fdd	8d 49 00	 npad	 3
$LL620@PageDialog:
  03fe0	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  03fe4	83 c0 02	 add	 eax, 2
  03fe7	66 85 c9	 test	 cx, cx
  03fea	75 f4		 jne	 SHORT $LL620@PageDialog
  03fec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  03ff2	66 8b 15 04 00
	00 00		 mov	 dx, WORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@+4
  03ff9	89 08		 mov	 DWORD PTR [eax], ecx

; 4794 : 				wcscat (szTmp, GetString ("FILESYS_PAGE_HELP_EXPLANATION_HIDVOL_CONFIRM"));

  03ffb	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@EDGNFMHB@FILESYS_PAGE_HELP_EXPLANATION_HI@
  04000	66 89 50 04	 mov	 WORD PTR [eax+4], dx
  04004	e8 00 00 00 00	 call	 _GetString
  04009	83 c4 04	 add	 esp, 4
  0400c	8b d0		 mov	 edx, eax
  0400e	8b ff		 npad	 2
$LL621@PageDialog:
  04010	66 8b 08	 mov	 cx, WORD PTR [eax]
  04013	83 c0 02	 add	 eax, 2
  04016	66 85 c9	 test	 cx, cx
  04019	75 f5		 jne	 SHORT $LL621@PageDialog
  0401b	8d bd b0 de 00
	00		 lea	 edi, DWORD PTR _szTmp$133922[ebp]
  04021	2b c2		 sub	 eax, edx
  04023	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL622@PageDialog:
  04026	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  0402a	83 c7 02	 add	 edi, 2
  0402d	66 85 c9	 test	 cx, cx
  04030	75 f4		 jne	 SHORT $LL622@PageDialog
  04032	8b c8		 mov	 ecx, eax
  04034	c1 e9 02	 shr	 ecx, 2
  04037	8b f2		 mov	 esi, edx

; 4795 : 
; 4796 : 				if (MessageBoxW (MainDlg, szTmp, lpszTitle, MB_ICONWARNING | MB_YESNO | MB_DEFBUTTON2) == IDNO)

  04039	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0403f	f3 a5		 rep movsd
  04041	8b c8		 mov	 ecx, eax
  04043	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  04048	83 e1 03	 and	 ecx, 3
  0404b	68 34 01 00 00	 push	 308			; 00000134H
  04050	f3 a4		 rep movsb
  04052	50		 push	 eax
  04053	8d 8d b0 de 00
	00		 lea	 ecx, DWORD PTR _szTmp$133922[ebp]
  04059	51		 push	 ecx
  0405a	52		 push	 edx
  0405b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  04061	83 f8 07	 cmp	 eax, 7
  04064	0f 85 a4 fe ff
	ff		 jne	 $LN731@PageDialog

; 4797 : 				{
; 4798 : 					nNeedToStoreFilesOver4GB = 0;
; 4799 : 					Init2RadButtonPageYesNo (nNeedToStoreFilesOver4GB);

  0406a	33 c0		 xor	 eax, eax
  0406c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nNeedToStoreFilesOver4GB@@3HA, 0 ; nNeedToStoreFilesOver4GB
  04076	e8 00 00 00 00	 call	 ?Init2RadButtonPageYesNo@@YAXH@Z ; Init2RadButtonPageYesNo

; 4800 : 				}
; 4801 : 			}
; 4802 : 
; 4803 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);
; 4804 : 			return 1;

  0407b	e9 8e fe ff ff	 jmp	 $LN731@PageDialog
$LN129@PageDialog:

; 4805 : 		}
; 4806 : 
; 4807 : 		if (lw == IDC_HIDDEN_VOL && nCurPageNo == VOLUME_TYPE_PAGE)

  04080	b8 08 04 00 00	 mov	 eax, 1032		; 00000408H
  04085	66 3b f8	 cmp	 di, ax
  04088	75 23		 jne	 SHORT $LN125@PageDialog
  0408a	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  0408d	75 3e		 jne	 SHORT $LN124@PageDialog

; 4808 : 		{
; 4809 : 			bHiddenVol = TRUE;

  0408f	b8 01 00 00 00	 mov	 eax, 1
  04094	a3 00 00 00 00	 mov	 DWORD PTR ?bHiddenVol@@3HC, eax ; bHiddenVol

; 4810 : 			bHiddenVolHost = TRUE;

  04099	a3 00 00 00 00	 mov	 DWORD PTR _bHiddenVolHost, eax

; 4811 : 			bInPlaceEncNonSys = FALSE;

  0409e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bInPlaceEncNonSys, 0

; 4812 : 			return 1;

  040a8	e9 b7 12 00 00	 jmp	 $LN342@PageDialog
$LN125@PageDialog:

; 4813 : 		}
; 4814 : 
; 4815 : 		if (lw == IDC_STD_VOL && nCurPageNo == VOLUME_TYPE_PAGE)

  040ad	b8 07 04 00 00	 mov	 eax, 1031		; 00000407H
  040b2	66 3b f8	 cmp	 di, ax
  040b5	75 16		 jne	 SHORT $LN124@PageDialog
  040b7	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  040ba	75 11		 jne	 SHORT $LN124@PageDialog

; 4816 : 		{
; 4817 : 			bHiddenVol = FALSE;

  040bc	33 c0		 xor	 eax, eax
  040be	a3 00 00 00 00	 mov	 DWORD PTR ?bHiddenVol@@3HC, eax ; bHiddenVol

; 4818 : 			bHiddenVolHost = FALSE;

  040c3	a3 00 00 00 00	 mov	 DWORD PTR _bHiddenVolHost, eax

; 4819 : 			return 1;

  040c8	e9 92 12 00 00	 jmp	 $LN707@PageDialog
$LN124@PageDialog:

; 4820 : 		}
; 4821 : 
; 4822 : 		if (nCurPageNo == SYSENC_ENCRYPTION_PAGE)

  040cd	83 f9 1f	 cmp	 ecx, 31			; 0000001fH
  040d0	0f 85 d0 00 00
	00		 jne	 $LN115@PageDialog

; 4823 : 		{
; 4824 : 			BootEncryptionStatus locBootEncStatus;
; 4825 : 
; 4826 : 			switch (lw)

  040d6	0f b7 c7	 movzx	 eax, di
  040d9	2d 3d 04 00 00	 sub	 eax, 1085		; 0000043dH
  040de	74 7e		 je	 SHORT $LN116@PageDialog
  040e0	83 e8 04	 sub	 eax, 4
  040e3	74 22		 je	 SHORT $LN120@PageDialog
  040e5	83 e8 02	 sub	 eax, 2
  040e8	0f 85 b8 00 00
	00		 jne	 $LN115@PageDialog

; 4853 : 				}
; 4854 : 				break;
; 4855 : 
; 4856 : 			case IDC_MORE_INFO_SYS_ENCRYPTION:
; 4857 : 				Applink ("sysencprogressinfo", TRUE, "");

  040ee	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  040f3	6a 01		 push	 1
  040f5	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JBNNBEBD@sysencprogressinfo?$AA@
  040fa	e8 00 00 00 00	 call	 _Applink
  040ff	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4858 : 				return 1;

  04102	e9 58 12 00 00	 jmp	 $LN707@PageDialog
$LN120@PageDialog:

; 4827 : 			{
; 4828 : 			case IDC_PAUSE:
; 4829 : 				try
; 4830 : 				{
; 4831 : 					locBootEncStatus = BootEncObj->GetStatus();

  04107	8d 8d ac fd ff
	ff		 lea	 ecx, DWORD PTR $T165853[ebp]
  0410d	51		 push	 ecx
  0410e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  04114	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 7
  0411b	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  04120	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  04125	8b f0		 mov	 esi, eax
  04127	8d bd 44 ff ff
	ff		 lea	 edi, DWORD PTR _locBootEncStatus$133928[ebp]
  0412d	f3 a5		 rep movsd
  0412f	66 a5		 movsw

; 4832 : 
; 4833 : 					if (locBootEncStatus.SetupInProgress)

  04131	83 7d 82 00	 cmp	 DWORD PTR _locBootEncStatus$133928[ebp+62], 0
  04135	74 0a		 je	 SHORT $LN118@PageDialog

; 4834 : 						SysEncPause ();

  04137	e8 00 00 00 00	 call	 ?SysEncPause@@YAXXZ	; SysEncPause

; 4835 : 					else

  0413c	e9 1e 12 00 00	 jmp	 $LN707@PageDialog
$LN118@PageDialog:

; 4836 : 						SysEncResume ();

  04141	e8 00 00 00 00	 call	 ?SysEncResume@@YAXXZ	; SysEncResume
  04146	e9 14 12 00 00	 jmp	 $LN707@PageDialog
__catch$_PageDialogProc@16$4:

; 4837 : 				}
; 4838 : 				catch (Exception &e)
; 4839 : 				{
; 4840 : 					e.Show (hwndDlg);

  0414b	8b 4d a8	 mov	 ecx, DWORD PTR _e$133938[ebp]
  0414e	8b 11		 mov	 edx, DWORD PTR [ecx]
  04150	8b 45 ec	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  04153	8b 12		 mov	 edx, DWORD PTR [edx]
  04155	50		 push	 eax
  04156	ff d2		 call	 edx

; 4841 : 				}

  04158	b8 00 00 00 00	 mov	 eax, $LN707@PageDialog
  0415d	c3		 ret	 0
$LN116@PageDialog:

; 4842 : 				return 1;
; 4843 : 
; 4844 : 			case IDC_WIPE_MODE:
; 4845 : 				if (hw == CBN_SELCHANGE)

  0415e	66 83 fa 01	 cmp	 dx, 1
  04162	75 42		 jne	 SHORT $LN115@PageDialog

; 4846 : 				{
; 4847 : 					nWipeMode = (WipeAlgorithmId) SendMessage (GetDlgItem (hCurPage, IDC_WIPE_MODE),
; 4848 : 						CB_GETITEMDATA, 
; 4849 : 						SendMessage (GetDlgItem (hCurPage, IDC_WIPE_MODE), CB_GETCURSEL, 0, 0),
; 4850 : 						0);

  04164	6a 00		 push	 0
  04166	6a 00		 push	 0
  04168	6a 00		 push	 0
  0416a	68 47 01 00 00	 push	 327			; 00000147H
  0416f	68 3d 04 00 00	 push	 1085			; 0000043dH
  04174	53		 push	 ebx
$LN733@PageDialog:
  04175	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0417b	ff d6		 call	 esi
  0417d	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  04183	50		 push	 eax
  04184	ff d3		 call	 ebx
  04186	50		 push	 eax
  04187	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0418c	68 50 01 00 00	 push	 336			; 00000150H
  04191	68 3d 04 00 00	 push	 1085			; 0000043dH
  04196	50		 push	 eax
  04197	ff d6		 call	 esi
  04199	50		 push	 eax
  0419a	ff d3		 call	 ebx
  0419c	a3 00 00 00 00	 mov	 DWORD PTR _nWipeMode, eax

; 4851 : 
; 4852 : 					return 1;

  041a1	e9 b9 11 00 00	 jmp	 $LN707@PageDialog
$LN115@PageDialog:

; 4859 : 			}
; 4860 : 		}
; 4861 : 
; 4862 : 		if (bInPlaceEncNonSys)

  041a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys

; 4863 : 		{
; 4864 : 			switch (nCurPageNo)

  041ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  041b1	85 c9		 test	 ecx, ecx
  041b3	0f 84 c1 01 00
	00		 je	 $LN109@PageDialog
  041b9	83 f8 21	 cmp	 eax, 33			; 00000021H
  041bc	0f 84 85 00 00
	00		 je	 $LN110@PageDialog
  041c2	83 f8 24	 cmp	 eax, 36			; 00000024H
  041c5	0f 85 af 01 00
	00		 jne	 $LN109@PageDialog

; 4899 : 
; 4900 : 					return 1;
; 4901 : 				}
; 4902 : 				break;
; 4903 : 
; 4904 : 			case  NONSYS_INPLACE_ENC_ENCRYPTION_PAGE:
; 4905 : 				{
; 4906 : 					switch (lw)

  041cb	0f b7 cf	 movzx	 ecx, di
  041ce	81 e9 3d 04 00
	00		 sub	 ecx, 1085		; 0000043dH
  041d4	74 4b		 je	 SHORT $LN98@PageDialog
  041d6	83 e9 04	 sub	 ecx, 4
  041d9	0f 85 9b 01 00
	00		 jne	 $LN109@PageDialog

; 4907 : 					{
; 4908 : 					case IDC_PAUSE:
; 4909 : 
; 4910 : 						// Pause/resume non-system in-place encryption
; 4911 : 
; 4912 : 						if (bVolTransformThreadRunning || bVolTransformThreadToRun)

  041df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  041e5	85 d2		 test	 edx, edx
  041e7	75 13		 jne	 SHORT $LN100@PageDialog
  041e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  041ee	85 c0		 test	 eax, eax
  041f0	75 0a		 jne	 SHORT $LN100@PageDialog

; 4916 : 						}
; 4917 : 						else
; 4918 : 							NonSysInplaceEncResume ();

  041f2	e8 00 00 00 00	 call	 _NonSysInplaceEncResume
  041f7	e9 63 11 00 00	 jmp	 $LN707@PageDialog
$LN100@PageDialog:

; 4913 : 						{
; 4914 : 							EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), FALSE);

  041fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  04202	6a 00		 push	 0
  04204	68 41 04 00 00	 push	 1089			; 00000441H
  04209	51		 push	 ecx
  0420a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  04210	50		 push	 eax
  04211	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4915 : 							NonSysInplaceEncPause ();

  04217	e8 00 00 00 00	 call	 _NonSysInplaceEncPause

; 4919 : 
; 4920 : 						return 1;

  0421c	e9 3e 11 00 00	 jmp	 $LN707@PageDialog
$LN98@PageDialog:

; 4921 : 
; 4922 : 					case IDC_WIPE_MODE:
; 4923 : 						if (hw == CBN_SELCHANGE)

  04221	66 83 fa 01	 cmp	 dx, 1
  04225	0f 85 4f 01 00
	00		 jne	 $LN109@PageDialog

; 4924 : 						{
; 4925 : 							nWipeMode = (WipeAlgorithmId) SendMessage (GetDlgItem (hCurPage, IDC_WIPE_MODE),
; 4926 : 								CB_GETITEMDATA, 
; 4927 : 								SendMessage (GetDlgItem (hCurPage, IDC_WIPE_MODE), CB_GETCURSEL, 0, 0),
; 4928 : 								0);

  0422b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  04231	6a 00		 push	 0
  04233	6a 00		 push	 0
  04235	6a 00		 push	 0
  04237	68 47 01 00 00	 push	 327			; 00000147H
  0423c	68 3d 04 00 00	 push	 1085			; 0000043dH
  04241	52		 push	 edx

; 4929 : 
; 4930 : 							return 1;

  04242	e9 2e ff ff ff	 jmp	 $LN733@PageDialog
$LN110@PageDialog:

; 4865 : 			{
; 4866 : 			case NONSYS_INPLACE_ENC_RESUME_PARTITION_SEL_PAGE:
; 4867 : 
; 4868 : 				if (lw == IDC_LIST_BOX 
; 4869 : 					&& (hw == LBN_SELCHANGE || hw == LBN_DBLCLK))

  04247	b9 fa 03 00 00	 mov	 ecx, 1018		; 000003faH
  0424c	66 3b f9	 cmp	 di, cx
  0424f	0f 85 25 01 00
	00		 jne	 $LN109@PageDialog
  04255	66 83 fa 01	 cmp	 dx, 1
  04259	74 0a		 je	 SHORT $LN108@PageDialog
  0425b	66 83 fa 02	 cmp	 dx, 2
  0425f	0f 85 4f 04 00
	00		 jne	 $LN79@PageDialog
$LN108@PageDialog:

; 4870 : 				{
; 4871 : 					BOOL tmpbDevice = FALSE;
; 4872 : 
; 4873 : 					EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), FALSE);

  04265	6a 00		 push	 0
  04267	68 10 04 00 00	 push	 1040			; 00000410H
  0426c	53		 push	 ebx
  0426d	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _tmpbDevice$133952[ebp], 0
  04274	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0427a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04280	50		 push	 eax
  04281	ff d6		 call	 esi
  04283	50		 push	 eax
  04284	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 4874 : 
; 4875 : 					int selPartitionItemId = (int) SendMessage (GetDlgItem (hwndDlg, IDC_LIST_BOX), LB_GETCURSEL, 0, 0);

  0428a	6a 00		 push	 0
  0428c	6a 00		 push	 0
  0428e	68 88 01 00 00	 push	 392			; 00000188H
  04293	68 fa 03 00 00	 push	 1018			; 000003faH
  04298	53		 push	 ebx
  04299	ff d6		 call	 esi
  0429b	50		 push	 eax
  0429c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  042a2	8b f8		 mov	 edi, eax

; 4876 : 
; 4877 : 					if (selPartitionItemId == LB_ERR)

  042a4	83 ff ff	 cmp	 edi, -1
  042a7	75 31		 jne	 SHORT $LN107@PageDialog

; 4878 : 					{
; 4879 : 						// Deselect all
; 4880 : 						SendMessage (GetDlgItem (hwndDlg, IDC_LIST_BOX), LB_SETCURSEL, (WPARAM) -1, 0);

  042a9	6a 00		 push	 0
  042ab	50		 push	 eax
  042ac	68 86 01 00 00	 push	 390			; 00000186H
  042b1	68 fa 03 00 00	 push	 1018			; 000003faH
  042b6	53		 push	 ebx
  042b7	ff d6		 call	 esi
  042b9	50		 push	 eax
  042ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 4881 : 
; 4882 : 						SetFocus (GetDlgItem (MainDlg, IDC_NEXT));

  042c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  042c6	68 10 04 00 00	 push	 1040			; 00000410H
  042cb	52		 push	 edx
  042cc	ff d6		 call	 esi
  042ce	50		 push	 eax
  042cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 4883 : 						return 1;

  042d5	e9 85 10 00 00	 jmp	 $LN707@PageDialog
$LN107@PageDialog:

; 4884 : 					}
; 4885 : 
; 4886 : 					SetFocus (GetDlgItem (MainDlg, IDC_NEXT));

  042da	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  042df	68 10 04 00 00	 push	 1040			; 00000410H
  042e4	50		 push	 eax
  042e5	ff d6		 call	 esi
  042e7	50		 push	 eax
  042e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 4887 : 
; 4888 : 					strcpy (szFileName, DeferredNonSysInPlaceEncDevices [selPartitionItemId].Path.c_str());

  042ee	57		 push	 edi
  042ef	b9 00 00 00 00	 mov	 ecx, OFFSET ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A ; DeferredNonSysInPlaceEncDevices
  042f4	e8 00 00 00 00	 call	 ??A?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@I@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::operator[]
  042f9	83 c0 40	 add	 eax, 64			; 00000040H
  042fc	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  04300	72 05		 jb	 SHORT $LN560@PageDialog
  04302	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  04305	eb 03		 jmp	 SHORT $LN561@PageDialog
$LN560@PageDialog:
  04307	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
$LN561@PageDialog:
  0430a	ba 00 00 00 00	 mov	 edx, OFFSET ?szFileName@@3PADA ; szFileName
  0430f	90		 npad	 1
$LL423@PageDialog:
  04310	8a 01		 mov	 al, BYTE PTR [ecx]
  04312	88 02		 mov	 BYTE PTR [edx], al
  04314	41		 inc	 ecx
  04315	42		 inc	 edx
  04316	84 c0		 test	 al, al
  04318	75 f6		 jne	 SHORT $LL423@PageDialog

; 4889 : 					CreateFullVolumePath (szDiskFile, szFileName, &tmpbDevice);

  0431a	8d 4d c8	 lea	 ecx, DWORD PTR _tmpbDevice$133952[ebp]
  0431d	51		 push	 ecx
  0431e	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  04323	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  04328	e8 00 00 00 00	 call	 _CreateFullVolumePath

; 4890 : 
; 4891 : 					nVolumeSize = GetDeviceSize (szDiskFile);

  0432d	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  04332	e8 00 00 00 00	 call	 _GetDeviceSize
  04337	a3 00 00 00 00	 mov	 DWORD PTR ?nVolumeSize@@3_KA, eax

; 4892 : 					if (nVolumeSize == -1)

  0433c	23 c2		 and	 eax, edx
  0433e	83 c4 10	 add	 esp, 16			; 00000010H
  04341	89 15 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, edx
  04347	83 f8 ff	 cmp	 eax, -1
  0434a	75 11		 jne	 SHORT $LN106@PageDialog

; 4893 : 					{
; 4894 : 						handleWin32Error (MainDlg);

  0434c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  04352	52		 push	 edx
  04353	e8 00 00 00 00	 call	 _handleWin32Error

; 4895 : 						return 1;

  04358	e9 ff 0f 00 00	 jmp	 $LN723@PageDialog
$LN106@PageDialog:

; 4896 : 					}
; 4897 : 
; 4898 : 					EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  0435d	6a 01		 push	 1
  0435f	68 10 04 00 00	 push	 1040			; 00000410H
  04364	53		 push	 ebx
  04365	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0436b	50		 push	 eax
  0436c	ff d6		 call	 esi
  0436e	50		 push	 eax
  0436f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  04375	e9 e5 0f 00 00	 jmp	 $LN707@PageDialog
$LN109@PageDialog:

; 4931 : 						}
; 4932 : 						break;
; 4933 : 					}
; 4934 : 				}
; 4935 : 				break;
; 4936 : 			}
; 4937 : 		}
; 4938 : 
; 4939 : 
; 4940 : 		if (lw == IDC_OPEN_OUTER_VOLUME && nCurPageNo == FORMAT_FINISHED_PAGE)

  0437a	b9 0a 04 00 00	 mov	 ecx, 1034		; 0000040aH
  0437f	66 3b f9	 cmp	 di, cx
  04382	75 1a		 jne	 SHORT $LN96@PageDialog
  04384	83 f8 27	 cmp	 eax, 39			; 00000027H
  04387	0f 85 27 03 00
	00		 jne	 $LN79@PageDialog

; 4941 : 		{
; 4942 : 			OpenVolumeExplorerWindow (hiddenVolHostDriveNo);

  0438d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  04393	52		 push	 edx
  04394	e8 00 00 00 00	 call	 _OpenVolumeExplorerWindow

; 4943 : 			return 1;

  04399	e9 be 0f 00 00	 jmp	 $LN723@PageDialog
$LN96@PageDialog:

; 4944 : 		}
; 4945 : 
; 4946 : 		if (lw == IDC_HIDDEN_VOL_HELP && nCurPageNo == VOLUME_TYPE_PAGE)

  0439e	b9 09 04 00 00	 mov	 ecx, 1033		; 00000409H
  043a3	66 3b f9	 cmp	 di, cx
  043a6	75 22		 jne	 SHORT $LN95@PageDialog
  043a8	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  043ab	0f 85 03 03 00
	00		 jne	 $LN79@PageDialog

; 4947 : 		{
; 4948 : 			Applink ("hiddenvolume", TRUE, "");

  043b1	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  043b6	6a 01		 push	 1
  043b8	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NEKIIEOI@hiddenvolume?$AA@
  043bd	e8 00 00 00 00	 call	 _Applink
  043c2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4949 : 			return 1;

  043c5	e9 95 0f 00 00	 jmp	 $LN707@PageDialog
$LN95@PageDialog:

; 4950 : 		}
; 4951 : 
; 4952 : 		if (lw == IDC_ABORT_BUTTON && nCurPageNo == FORMAT_PAGE)

  043ca	b9 f8 03 00 00	 mov	 ecx, 1016		; 000003f8H
  043cf	66 3b f9	 cmp	 di, cx
  043d2	75 42		 jne	 SHORT $LN94@PageDialog
  043d4	83 f8 26	 cmp	 eax, 38			; 00000026H
  043d7	0f 85 d7 02 00
	00		 jne	 $LN79@PageDialog

; 4953 : 		{
; 4954 : 			if (MessageBoxW (hwndDlg, GetString ("FORMAT_ABORT"), lpszTitle, MB_YESNO | MB_ICONQUESTION | MB_DEFBUTTON2 ) == IDYES)

  043dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  043e3	68 24 01 00 00	 push	 292			; 00000124H
  043e8	52		 push	 edx
  043e9	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LNDFLMFM@FORMAT_ABORT?$AA@
  043ee	e8 00 00 00 00	 call	 _GetString
  043f3	83 c4 04	 add	 esp, 4
  043f6	50		 push	 eax
  043f7	53		 push	 ebx
  043f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  043fe	83 f8 06	 cmp	 eax, 6
  04401	0f 85 58 0f 00
	00		 jne	 $LN707@PageDialog

; 4955 : 				bVolTransformThreadCancel = TRUE;

  04407	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bVolTransformThreadCancel, 1

; 4956 : 			return 1;

  04411	e9 49 0f 00 00	 jmp	 $LN707@PageDialog
$LN94@PageDialog:

; 4957 : 		}
; 4958 : 
; 4959 : 		if (lw == IDC_CIPHER_TEST && nCurPageNo == CIPHER_PAGE)

  04416	b9 fd 03 00 00	 mov	 ecx, 1021		; 000003fdH
  0441b	66 3b f9	 cmp	 di, cx
  0441e	0f 85 a3 00 00
	00		 jne	 $LN92@PageDialog
  04424	83 f8 12	 cmp	 eax, 18			; 00000012H
  04427	0f 85 87 02 00
	00		 jne	 $LN79@PageDialog

; 4960 : 		{
; 4961 : 			LPARAM nIndex;
; 4962 : 			int c;
; 4963 : 
; 4964 : 			nIndex = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX), CB_GETCURSEL, 0, 0);

  0442d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  04433	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04439	6a 00		 push	 0
  0443b	6a 00		 push	 0
  0443d	68 47 01 00 00	 push	 327			; 00000147H
  04442	68 ea 03 00 00	 push	 1002			; 000003eaH
  04447	52		 push	 edx
  04448	ff d6		 call	 esi
  0444a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  04450	50		 push	 eax
  04451	ff d7		 call	 edi

; 4965 : 			nVolumeEA = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX), CB_GETITEMDATA, nIndex, 0);

  04453	6a 00		 push	 0
  04455	50		 push	 eax
  04456	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0445b	68 50 01 00 00	 push	 336			; 00000150H
  04460	68 ea 03 00 00	 push	 1002			; 000003eaH
  04465	50		 push	 eax
  04466	ff d6		 call	 esi
  04468	50		 push	 eax
  04469	ff d7		 call	 edi

; 4966 : 
; 4967 : 			for (c = EAGetLastCipher (nVolumeEA); c != 0; c = EAGetPreviousCipher (nVolumeEA, c))

  0446b	50		 push	 eax
  0446c	a3 00 00 00 00	 mov	 DWORD PTR ?nVolumeEA@@3HA, eax ; nVolumeEA
  04471	e8 00 00 00 00	 call	 _EAGetLastCipher
  04476	8b f0		 mov	 esi, eax
  04478	83 c4 04	 add	 esp, 4
  0447b	85 f6		 test	 esi, esi
  0447d	0f 84 dc 0e 00
	00		 je	 $LN707@PageDialog
  04483	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  04489	8d a4 24 00 00
	00 00		 npad	 7
$LL91@PageDialog:

; 4968 : 			{
; 4969 : 				DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_CIPHER_TEST_DLG), 
; 4970 : 					GetParent (hwndDlg), (DLGPROC) CipherTestDialogProc, (LPARAM) c);

  04490	56		 push	 esi
  04491	68 00 00 00 00	 push	 OFFSET _CipherTestDialogProc@16
  04496	53		 push	 ebx
  04497	ff d7		 call	 edi
  04499	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  0449f	50		 push	 eax
  044a0	68 02 02 00 00	 push	 514			; 00000202H
  044a5	51		 push	 ecx
  044a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  044ac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeEA@@3HA ; nVolumeEA
  044b2	56		 push	 esi
  044b3	52		 push	 edx
  044b4	e8 00 00 00 00	 call	 _EAGetPreviousCipher
  044b9	8b f0		 mov	 esi, eax
  044bb	83 c4 08	 add	 esp, 8
  044be	85 f6		 test	 esi, esi
  044c0	75 ce		 jne	 SHORT $LL91@PageDialog

; 4971 : 			}
; 4972 : 			return 1;

  044c2	e9 98 0e 00 00	 jmp	 $LN707@PageDialog
$LN92@PageDialog:

; 4973 : 		}
; 4974 : 
; 4975 : 		if (lw == IDC_BENCHMARK && nCurPageNo == CIPHER_PAGE)

  044c7	b9 fe 03 00 00	 mov	 ecx, 1022		; 000003feH
  044cc	66 3b f9	 cmp	 di, cx
  044cf	75 42		 jne	 SHORT $LN88@PageDialog
  044d1	83 f8 12	 cmp	 eax, 18			; 00000012H
  044d4	0f 85 da 01 00
	00		 jne	 $LN79@PageDialog

; 4976 : 		{
; 4977 : 			// Reduce CPU load
; 4978 : 			bFastPollEnabled = FALSE;	
; 4979 : 			bRandmixEnabled = FALSE;
; 4980 : 
; 4981 : 			DialogBoxParamW (hInst,
; 4982 : 				MAKEINTRESOURCEW (IDD_BENCHMARK_DLG), hwndDlg,
; 4983 : 				(DLGPROC) BenchmarkDlgProc, (LPARAM) NULL);

  044da	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  044e0	33 c0		 xor	 eax, eax
  044e2	50		 push	 eax
  044e3	68 00 00 00 00	 push	 OFFSET _BenchmarkDlgProc@16
  044e8	53		 push	 ebx
  044e9	68 f7 01 00 00	 push	 503			; 000001f7H
  044ee	a3 00 00 00 00	 mov	 DWORD PTR _bFastPollEnabled, eax
  044f3	a3 00 00 00 00	 mov	 DWORD PTR _bRandmixEnabled, eax
  044f8	52		 push	 edx
  044f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 4984 : 
; 4985 : 			bFastPollEnabled = TRUE;

  044ff	b8 01 00 00 00	 mov	 eax, 1
  04504	a3 00 00 00 00	 mov	 DWORD PTR _bFastPollEnabled, eax

; 4986 : 			bRandmixEnabled = TRUE;

  04509	a3 00 00 00 00	 mov	 DWORD PTR _bRandmixEnabled, eax

; 4987 : 
; 4988 : 			return 1;

  0450e	e9 51 0e 00 00	 jmp	 $LN342@PageDialog
$LN88@PageDialog:

; 4989 : 		}
; 4990 : 
; 4991 : 		if (lw == IDC_LINK_MORE_INFO_ABOUT_CIPHER && nCurPageNo == CIPHER_PAGE)

  04513	b9 21 04 00 00	 mov	 ecx, 1057		; 00000421H
  04518	66 3b f9	 cmp	 di, cx
  0451b	0f 85 6b 01 00
	00		 jne	 $LN87@PageDialog
  04521	83 f8 12	 cmp	 eax, 18			; 00000012H
  04524	0f 85 8a 01 00
	00		 jne	 $LN79@PageDialog

; 4992 : 		{
; 4993 : 			char name[100];
; 4994 : 
; 4995 : 			int nIndex = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX), CB_GETCURSEL, 0, 0);

  0452a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  04530	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04536	6a 00		 push	 0
  04538	6a 00		 push	 0
  0453a	68 47 01 00 00	 push	 327			; 00000147H
  0453f	68 ea 03 00 00	 push	 1002			; 000003eaH
  04544	52		 push	 edx
  04545	ff d6		 call	 esi
  04547	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  0454d	50		 push	 eax
  0454e	ff d3		 call	 ebx

; 4996 : 			nIndex = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX), CB_GETITEMDATA, nIndex, 0);

  04550	6a 00		 push	 0
  04552	50		 push	 eax
  04553	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  04558	68 50 01 00 00	 push	 336			; 00000150H
  0455d	68 ea 03 00 00	 push	 1002			; 000003eaH
  04562	50		 push	 eax
  04563	ff d6		 call	 esi
  04565	50		 push	 eax
  04566	ff d3		 call	 ebx
  04568	8b f0		 mov	 esi, eax

; 4997 : 			EAGetName (name, nIndex);

  0456a	8d 8d 0c 12 01
	00		 lea	 ecx, DWORD PTR _name$133994[ebp]
  04570	56		 push	 esi
  04571	51		 push	 ecx
  04572	e8 00 00 00 00	 call	 _EAGetName
  04577	83 c4 08	 add	 esp, 8

; 4998 : 
; 4999 : 			if (strcmp (name, "AES") == 0)

  0457a	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_03BKNEFOAH@AES?$AA@
  0457f	8d 85 0c 12 01
	00		 lea	 eax, DWORD PTR _name$133994[ebp]
$LL623@PageDialog:
  04585	8a 10		 mov	 dl, BYTE PTR [eax]
  04587	3a 11		 cmp	 dl, BYTE PTR [ecx]
  04589	75 1a		 jne	 SHORT $LN624@PageDialog
  0458b	84 d2		 test	 dl, dl
  0458d	74 12		 je	 SHORT $LN625@PageDialog
  0458f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  04592	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  04595	75 0e		 jne	 SHORT $LN624@PageDialog
  04597	83 c0 02	 add	 eax, 2
  0459a	83 c1 02	 add	 ecx, 2
  0459d	84 d2		 test	 dl, dl
  0459f	75 e4		 jne	 SHORT $LL623@PageDialog
$LN625@PageDialog:
  045a1	33 c0		 xor	 eax, eax
  045a3	eb 05		 jmp	 SHORT $LN626@PageDialog
$LN624@PageDialog:
  045a5	1b c0		 sbb	 eax, eax
  045a7	83 d8 ff	 sbb	 eax, -1
$LN626@PageDialog:
  045aa	85 c0		 test	 eax, eax
  045ac	75 18		 jne	 SHORT $LN86@PageDialog

; 5000 : 				Applink ("aes", FALSE, "");

  045ae	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  045b3	50		 push	 eax
  045b4	68 00 00 00 00	 push	 OFFSET ??_C@_03BHCPJDHL@aes?$AA@

; 5006 : 				Applink ("cascades", TRUE, "");

  045b9	e8 00 00 00 00	 call	 _Applink
  045be	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5007 : 
; 5008 : 			return 1;

  045c1	e9 99 0d 00 00	 jmp	 $LN707@PageDialog
$LN86@PageDialog:

; 5001 : 			else if (strcmp (name, "Serpent") == 0)

  045c6	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_07CCCAKGBN@Serpent?$AA@
  045cb	8d 85 0c 12 01
	00		 lea	 eax, DWORD PTR _name$133994[ebp]
$LL627@PageDialog:
  045d1	8a 10		 mov	 dl, BYTE PTR [eax]
  045d3	3a 11		 cmp	 dl, BYTE PTR [ecx]
  045d5	75 1a		 jne	 SHORT $LN628@PageDialog
  045d7	84 d2		 test	 dl, dl
  045d9	74 12		 je	 SHORT $LN629@PageDialog
  045db	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  045de	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  045e1	75 0e		 jne	 SHORT $LN628@PageDialog
  045e3	83 c0 02	 add	 eax, 2
  045e6	83 c1 02	 add	 ecx, 2
  045e9	84 d2		 test	 dl, dl
  045eb	75 e4		 jne	 SHORT $LL627@PageDialog
$LN629@PageDialog:
  045ed	33 c0		 xor	 eax, eax
  045ef	eb 05		 jmp	 SHORT $LN630@PageDialog
$LN628@PageDialog:
  045f1	1b c0		 sbb	 eax, eax
  045f3	83 d8 ff	 sbb	 eax, -1
$LN630@PageDialog:
  045f6	85 c0		 test	 eax, eax
  045f8	75 18		 jne	 SHORT $LN84@PageDialog

; 5002 : 				Applink ("serpent", FALSE, "");

  045fa	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  045ff	50		 push	 eax
  04600	68 00 00 00 00	 push	 OFFSET ??_C@_07NLFGMEEL@serpent?$AA@

; 5006 : 				Applink ("cascades", TRUE, "");

  04605	e8 00 00 00 00	 call	 _Applink
  0460a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5007 : 
; 5008 : 			return 1;

  0460d	e9 4d 0d 00 00	 jmp	 $LN707@PageDialog
$LN84@PageDialog:

; 5003 : 			else if (strcmp (name, "Twofish") == 0)

  04612	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_07DABDIDEC@Twofish?$AA@
  04617	8d 85 0c 12 01
	00		 lea	 eax, DWORD PTR _name$133994[ebp]
  0461d	8d 49 00	 npad	 3
$LL631@PageDialog:
  04620	8a 10		 mov	 dl, BYTE PTR [eax]
  04622	3a 11		 cmp	 dl, BYTE PTR [ecx]
  04624	75 1a		 jne	 SHORT $LN632@PageDialog
  04626	84 d2		 test	 dl, dl
  04628	74 12		 je	 SHORT $LN633@PageDialog
  0462a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0462d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  04630	75 0e		 jne	 SHORT $LN632@PageDialog
  04632	83 c0 02	 add	 eax, 2
  04635	83 c1 02	 add	 ecx, 2
  04638	84 d2		 test	 dl, dl
  0463a	75 e4		 jne	 SHORT $LL631@PageDialog
$LN633@PageDialog:
  0463c	33 c0		 xor	 eax, eax
  0463e	eb 05		 jmp	 SHORT $LN634@PageDialog
$LN632@PageDialog:
  04640	1b c0		 sbb	 eax, eax
  04642	83 d8 ff	 sbb	 eax, -1
$LN634@PageDialog:
  04645	85 c0		 test	 eax, eax
  04647	75 18		 jne	 SHORT $LN82@PageDialog

; 5004 : 				Applink ("twofish", FALSE, "");

  04649	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0464e	50		 push	 eax
  0464f	68 00 00 00 00	 push	 OFFSET ??_C@_07MJGFOBBE@twofish?$AA@

; 5006 : 				Applink ("cascades", TRUE, "");

  04654	e8 00 00 00 00	 call	 _Applink
  04659	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5007 : 
; 5008 : 			return 1;

  0465c	e9 fe 0c 00 00	 jmp	 $LN707@PageDialog
$LN82@PageDialog:

; 5005 : 			else if (EAGetCipherCount (nIndex) > 1)

  04661	56		 push	 esi
  04662	e8 00 00 00 00	 call	 _EAGetCipherCount
  04667	83 c4 04	 add	 esp, 4
  0466a	83 f8 01	 cmp	 eax, 1
  0466d	0f 8e ec 0c 00
	00		 jle	 $LN707@PageDialog

; 5006 : 				Applink ("cascades", TRUE, "");

  04673	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  04678	6a 01		 push	 1
  0467a	68 00 00 00 00	 push	 OFFSET ??_C@_08GJKBFMAA@cascades?$AA@
  0467f	e8 00 00 00 00	 call	 _Applink
  04684	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5007 : 
; 5008 : 			return 1;

  04687	e9 d3 0c 00 00	 jmp	 $LN707@PageDialog
$LN87@PageDialog:

; 5009 : 		}
; 5010 : 
; 5011 : 		if (lw == IDC_LINK_HASH_INFO && nCurPageNo == CIPHER_PAGE)

  0468c	b9 22 04 00 00	 mov	 ecx, 1058		; 00000422H
  04691	66 3b f9	 cmp	 di, cx
  04694	75 1e		 jne	 SHORT $LN79@PageDialog
  04696	83 f8 12	 cmp	 eax, 18			; 00000012H
  04699	75 19		 jne	 SHORT $LN79@PageDialog

; 5012 : 		{
; 5013 : 			Applink ("hashalgorithms", TRUE, "");

  0469b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  046a0	6a 01		 push	 1
  046a2	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BELAJGNG@hashalgorithms?$AA@
  046a7	e8 00 00 00 00	 call	 _Applink
  046ac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5014 : 			return 1;

  046af	e9 ab 0c 00 00	 jmp	 $LN707@PageDialog
$LN79@PageDialog:

; 5015 : 		}
; 5016 : 
; 5017 : 		if (hw == CBN_EDITCHANGE && nCurPageNo == VOLUME_LOCATION_PAGE)

  046b4	66 83 fa 05	 cmp	 dx, 5
  046b8	75 53		 jne	 SHORT $LN78@PageDialog
  046ba	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  046bd	0f 85 22 01 00
	00		 jne	 $LN73@PageDialog

; 5018 : 		{
; 5019 : 			EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), 
; 5020 : 				GetWindowTextLengthA(GetDlgItem (hCurPage, IDC_COMBO_BOX)) > 0);

  046c3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  046c9	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  046cf	68 ea 03 00 00	 push	 1002			; 000003eaH
  046d4	52		 push	 edx
  046d5	ff d6		 call	 esi
  046d7	50		 push	 eax
  046d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextLengthA@4
  046de	33 c9		 xor	 ecx, ecx
  046e0	85 c0		 test	 eax, eax
  046e2	0f 9f c1	 setg	 cl
  046e5	51		 push	 ecx
$LN725@PageDialog:
  046e6	68 10 04 00 00	 push	 1040			; 00000410H
  046eb	53		 push	 ebx
  046ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  046f2	50		 push	 eax
  046f3	ff d6		 call	 esi
  046f5	50		 push	 eax
  046f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 5021 : 
; 5022 : 			bDeviceTransformModeChoiceMade = FALSE;

  046fc	33 c0		 xor	 eax, eax
  046fe	a3 00 00 00 00	 mov	 DWORD PTR ?bDeviceTransformModeChoiceMade@@3HA, eax ; bDeviceTransformModeChoiceMade

; 5023 : 			bInPlaceEncNonSys = FALSE;

  04703	a3 00 00 00 00	 mov	 DWORD PTR _bInPlaceEncNonSys, eax

; 5024 : 
; 5025 : 			return 1;

  04708	e9 52 0c 00 00	 jmp	 $LN707@PageDialog
$LN78@PageDialog:

; 5026 : 		}
; 5027 : 		
; 5028 : 		if (hw == CBN_SELCHANGE && nCurPageNo == VOLUME_LOCATION_PAGE)

  0470d	66 83 fa 01	 cmp	 dx, 1
  04711	75 3d		 jne	 SHORT $LN77@PageDialog
  04713	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  04716	0f 85 c9 00 00
	00		 jne	 $LN73@PageDialog

; 5029 : 		{
; 5030 : 			LPARAM nIndex;
; 5031 : 
; 5032 : 			nIndex = MoveEditToCombo ((HWND) lParam, bHistory);

  0471c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHistory
  04722	52		 push	 edx
  04723	56		 push	 esi
  04724	e8 00 00 00 00	 call	 _MoveEditToCombo

; 5033 : 			nIndex = UpdateComboOrder (GetDlgItem (hwndDlg, IDC_COMBO_BOX));

  04729	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0472f	83 c4 08	 add	 esp, 8
  04732	68 ea 03 00 00	 push	 1002			; 000003eaH
  04737	53		 push	 ebx
  04738	ff d6		 call	 esi
  0473a	50		 push	 eax
  0473b	e8 00 00 00 00	 call	 _UpdateComboOrder
  04740	83 c4 04	 add	 esp, 4

; 5034 : 
; 5035 : 			if (nIndex != CB_ERR)

  04743	83 f8 ff	 cmp	 eax, -1
  04746	74 04		 je	 SHORT $LN76@PageDialog

; 5036 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), TRUE);

  04748	6a 01		 push	 1

; 5037 : 			else

  0474a	eb 9a		 jmp	 SHORT $LN725@PageDialog
$LN76@PageDialog:

; 5038 : 				EnableWindow (GetDlgItem (GetParent (hwndDlg), IDC_NEXT), FALSE);

  0474c	6a 00		 push	 0

; 5039 : 
; 5040 : 			bDeviceTransformModeChoiceMade = FALSE;
; 5041 : 			bInPlaceEncNonSys = FALSE;
; 5042 : 
; 5043 : 			return 1;

  0474e	eb 96		 jmp	 SHORT $LN725@PageDialog
$LN77@PageDialog:

; 5044 : 		}
; 5045 : 		
; 5046 : 		if (hw == EN_CHANGE && nCurPageNo == SIZE_PAGE)

  04750	b9 00 03 00 00	 mov	 ecx, 768		; 00000300H
  04755	66 3b d1	 cmp	 dx, cx
  04758	0f 85 87 00 00
	00		 jne	 $LN73@PageDialog
  0475e	83 f8 13	 cmp	 eax, 19			; 00000013H

; 5047 : 		{
; 5048 : 			VerifySizeAndUpdate (hwndDlg, FALSE);
; 5049 : 			return 1;

  04761	0f 84 e2 04 00
	00		 je	 $LN50@PageDialog

; 5050 : 		}
; 5051 : 		
; 5052 : 		if (hw == EN_CHANGE && nCurPageNo == PASSWORD_PAGE)

  04767	83 f8 15	 cmp	 eax, 21			; 00000015H
  0476a	75 79		 jne	 SHORT $LN73@PageDialog

; 5053 : 		{
; 5054 : 			VerifyPasswordAndUpdate2(hwndDlg, GetDlgItem (GetParent (hwndDlg), IDC_NEXT),
; 5055 : 				GetDlgItem (hwndDlg, IDC_PASSWORD),
; 5056 : 				GetDlgItem (hwndDlg, IDC_VERIFY),
; 5057 : 				NULL, 0,
; 5058 : 				NULL, 0,
; 5059 : 				KeyFilesEnable && FirstKeyFile!=NULL && !SysEncInEffect());

  0476c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _KeyFilesEnable, 0
  04773	74 19		 je	 SHORT $LN424@PageDialog
  04775	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _FirstKeyFile, 0
  0477c	74 10		 je	 SHORT $LN424@PageDialog
  0477e	e8 00 00 00 00	 call	 _SysEncInEffect
  04783	85 c0		 test	 eax, eax
  04785	75 07		 jne	 SHORT $LN424@PageDialog
  04787	b8 01 00 00 00	 mov	 eax, 1
  0478c	eb 02		 jmp	 SHORT $LN425@PageDialog
$LN424@PageDialog:
  0478e	33 c0		 xor	 eax, eax
$LN425@PageDialog:
  04790	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04796	50		 push	 eax
  04797	6a 00		 push	 0
  04799	6a 00		 push	 0
  0479b	6a 00		 push	 0
  0479d	6a 00		 push	 0
  0479f	68 f2 03 00 00	 push	 1010			; 000003f2H
  047a4	53		 push	 ebx
  047a5	ff d6		 call	 esi
  047a7	50		 push	 eax
  047a8	68 ec 03 00 00	 push	 1004			; 000003ecH
  047ad	53		 push	 ebx
  047ae	ff d6		 call	 esi
  047b0	50		 push	 eax
  047b1	68 10 04 00 00	 push	 1040			; 00000410H
  047b6	53		 push	 ebx
  047b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  047bd	50		 push	 eax
  047be	ff d6		 call	 esi
  047c0	50		 push	 eax
  047c1	53		 push	 ebx
  047c2	e8 00 00 00 00	 call	 _VerifyPasswordAndUpdate2

; 5060 : 			volumePassword.Length = strlen ((char *) volumePassword.Text);

  047c7	b8 04 00 00 00	 mov	 eax, OFFSET ?volumePassword@@3UPassword@@A+4
  047cc	83 c4 24	 add	 esp, 36			; 00000024H
  047cf	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL635@PageDialog:
  047d2	8a 08		 mov	 cl, BYTE PTR [eax]
  047d4	40		 inc	 eax
  047d5	84 c9		 test	 cl, cl
  047d7	75 f9		 jne	 SHORT $LL635@PageDialog
  047d9	2b c2		 sub	 eax, edx
  047db	a3 00 00 00 00	 mov	 DWORD PTR ?volumePassword@@3UPassword@@A, eax

; 5061 : 
; 5062 : 			return 1;

  047e0	e9 7a 0b 00 00	 jmp	 $LN707@PageDialog
$LN73@PageDialog:

; 5063 : 		}
; 5064 : 
; 5065 : 		if (lw == IDC_SHOW_PASSWORD && nCurPageNo == PASSWORD_PAGE)

  047e5	b9 20 04 00 00	 mov	 ecx, 1056		; 00000420H
  047ea	66 3b f9	 cmp	 di, cx
  047ed	0f 85 90 00 00
	00		 jne	 $LN72@PageDialog
  047f3	83 f8 15	 cmp	 eax, 21			; 00000015H
  047f6	0f 85 8c 00 00
	00		 jne	 $LN597@PageDialog

; 5066 : 		{
; 5067 : 			SendMessage (GetDlgItem (hwndDlg, IDC_PASSWORD),
; 5068 : 						EM_SETPASSWORDCHAR,
; 5069 : 						GetCheckBox (hwndDlg, IDC_SHOW_PASSWORD) ? 0 : '*',
; 5070 : 						0);

  047fc	6a 00		 push	 0
  047fe	51		 push	 ecx
  047ff	53		 push	 ebx
  04800	e8 00 00 00 00	 call	 _GetCheckBox
  04805	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0480b	83 c4 08	 add	 esp, 8
  0480e	f7 d8		 neg	 eax
  04810	1b c0		 sbb	 eax, eax
  04812	83 e0 d6	 and	 eax, -42		; ffffffd6H
  04815	83 c0 2a	 add	 eax, 42			; 0000002aH
  04818	50		 push	 eax
  04819	68 cc 00 00 00	 push	 204			; 000000ccH
  0481e	68 ec 03 00 00	 push	 1004			; 000003ecH
  04823	53		 push	 ebx
  04824	ff d6		 call	 esi
  04826	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  0482c	50		 push	 eax
  0482d	ff d7		 call	 edi

; 5071 : 			SendMessage (GetDlgItem (hwndDlg, IDC_VERIFY),
; 5072 : 						EM_SETPASSWORDCHAR,
; 5073 : 						GetCheckBox (hwndDlg, IDC_SHOW_PASSWORD) ? 0 : '*',
; 5074 : 						0);

  0482f	6a 00		 push	 0
  04831	68 20 04 00 00	 push	 1056			; 00000420H
  04836	53		 push	 ebx
  04837	e8 00 00 00 00	 call	 _GetCheckBox
  0483c	83 c4 08	 add	 esp, 8
  0483f	f7 d8		 neg	 eax
  04841	1b c0		 sbb	 eax, eax
  04843	83 e0 d6	 and	 eax, -42		; ffffffd6H
  04846	83 c0 2a	 add	 eax, 42			; 0000002aH
  04849	50		 push	 eax
  0484a	68 cc 00 00 00	 push	 204			; 000000ccH
  0484f	68 f2 03 00 00	 push	 1010			; 000003f2H
  04854	53		 push	 ebx
  04855	ff d6		 call	 esi
  04857	50		 push	 eax
  04858	ff d7		 call	 edi

; 5075 : 			InvalidateRect (GetDlgItem (hwndDlg, IDC_PASSWORD), NULL, TRUE);

  0485a	6a 01		 push	 1
  0485c	6a 00		 push	 0
  0485e	68 ec 03 00 00	 push	 1004			; 000003ecH
  04863	53		 push	 ebx
  04864	ff d6		 call	 esi
  04866	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__InvalidateRect@12
  0486c	50		 push	 eax
  0486d	ff d7		 call	 edi

; 5076 : 			InvalidateRect (GetDlgItem (hwndDlg, IDC_VERIFY), NULL, TRUE);

  0486f	6a 01		 push	 1
  04871	6a 00		 push	 0
  04873	68 f2 03 00 00	 push	 1010			; 000003f2H
  04878	53		 push	 ebx
  04879	ff d6		 call	 esi
  0487b	50		 push	 eax
  0487c	ff d7		 call	 edi

; 5077 : 			return 1;

  0487e	e9 dc 0a 00 00	 jmp	 $LN707@PageDialog
$LN72@PageDialog:

; 5078 : 		}
; 5079 : 		
; 5080 : 		if (nCurPageNo == PASSWORD_PAGE 
; 5081 : 			|| nCurPageNo == HIDDEN_VOL_HOST_PASSWORD_PAGE 
; 5082 : 			|| nCurPageNo == NONSYS_INPLACE_ENC_RESUME_PASSWORD_PAGE)

  04883	83 f8 15	 cmp	 eax, 21			; 00000015H
  04886	74 0e		 je	 SHORT $LN70@PageDialog
$LN597@PageDialog:
  04888	83 f8 14	 cmp	 eax, 20			; 00000014H
  0488b	74 09		 je	 SHORT $LN70@PageDialog
  0488d	83 f8 20	 cmp	 eax, 32			; 00000020H
  04890	0f 85 d7 01 00
	00		 jne	 $LN64@PageDialog
$LN70@PageDialog:

; 5083 : 		{
; 5084 : 			if (lw == IDC_KEY_FILES)

  04896	b9 02 04 00 00	 mov	 ecx, 1026		; 00000402H
  0489b	66 3b f9	 cmp	 di, cx
  0489e	0f 85 19 01 00
	00		 jne	 $LN69@PageDialog

; 5085 : 			{
; 5086 : 				if (SysEncInEffect())

  048a4	e8 00 00 00 00	 call	 _SysEncInEffect
  048a9	85 c0		 test	 eax, eax
  048ab	74 0f		 je	 SHORT $LN68@PageDialog

; 5087 : 				{
; 5088 : 					Warning ("KEYFILES_NOT_SUPPORTED_FOR_SYS_ENCRYPTION");

  048ad	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@PHDAOPJF@KEYFILES_NOT_SUPPORTED_FOR_SYS_E@
  048b2	e8 00 00 00 00	 call	 _Warning

; 5089 : 					return 1;

  048b7	e9 a0 0a 00 00	 jmp	 $LN723@PageDialog
$LN68@PageDialog:

; 5090 : 				}
; 5091 : 
; 5092 : 				KeyFilesDlgParam param;
; 5093 : 				param.EnableKeyFiles = KeyFilesEnable;

  048bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _KeyFilesEnable

; 5094 : 				param.FirstKeyFile = FirstKeyFile;

  048c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _FirstKeyFile

; 5095 : 
; 5096 : 				if (IDOK == DialogBoxParamW (hInst,
; 5097 : 					MAKEINTRESOURCEW (IDD_KEYFILES), hwndDlg,
; 5098 : 					(DLGPROC) KeyFilesDlgProc, (LPARAM) &param))

  048c7	8d 4d d8	 lea	 ecx, DWORD PTR _param$134024[ebp]
  048ca	51		 push	 ecx
  048cb	68 00 00 00 00	 push	 OFFSET _KeyFilesDlgProc@16
  048d0	53		 push	 ebx
  048d1	89 55 d8	 mov	 DWORD PTR _param$134024[ebp], edx
  048d4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  048da	68 f9 01 00 00	 push	 505			; 000001f9H
  048df	52		 push	 edx
  048e0	89 45 dc	 mov	 DWORD PTR _param$134024[ebp+4], eax
  048e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  048e9	83 f8 01	 cmp	 eax, 1
  048ec	0f 85 6d 0a 00
	00		 jne	 $LN707@PageDialog

; 5099 : 				{
; 5100 : 					KeyFilesEnable = param.EnableKeyFiles;

  048f2	8b 45 d8	 mov	 eax, DWORD PTR _param$134024[ebp]

; 5101 : 					FirstKeyFile = param.FirstKeyFile;

  048f5	8b 4d dc	 mov	 ecx, DWORD PTR _param$134024[ebp+4]

; 5102 : 
; 5103 : 					SetCheckBox (hwndDlg, IDC_KEYFILES_ENABLE, KeyFilesEnable);

  048f8	50		 push	 eax
  048f9	68 c5 13 00 00	 push	 5061			; 000013c5H
  048fe	53		 push	 ebx
  048ff	a3 00 00 00 00	 mov	 DWORD PTR _KeyFilesEnable, eax
  04904	89 0d 00 00 00
	00		 mov	 DWORD PTR _FirstKeyFile, ecx
  0490a	e8 00 00 00 00	 call	 _SetCheckBox

; 5104 : 
; 5105 : 					if (nCurPageNo != HIDDEN_VOL_HOST_PASSWORD_PAGE && nCurPageNo != NONSYS_INPLACE_ENC_RESUME_PASSWORD_PAGE)

  0490f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  04914	83 c4 0c	 add	 esp, 12			; 0000000cH
  04917	83 f8 14	 cmp	 eax, 20			; 00000014H
  0491a	0f 84 3f 0a 00
	00		 je	 $LN707@PageDialog

; 5106 : 						EnableWindow (GetDlgItem (hwndDlg, IDC_KEY_FILES), KeyFilesEnable);

  04920	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04926	83 f8 20	 cmp	 eax, 32			; 00000020H
  04929	74 1b		 je	 SHORT $LN66@PageDialog
  0492b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _KeyFilesEnable
  04931	52		 push	 edx
  04932	68 02 04 00 00	 push	 1026			; 00000402H
  04937	53		 push	 ebx
  04938	ff d6		 call	 esi
  0493a	50		 push	 eax
  0493b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  04941	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
$LN66@PageDialog:

; 5107 : 
; 5108 : 					if (nCurPageNo != HIDDEN_VOL_HOST_PASSWORD_PAGE && nCurPageNo != NONSYS_INPLACE_ENC_RESUME_PASSWORD_PAGE)

  04946	83 f8 14	 cmp	 eax, 20			; 00000014H
  04949	0f 84 10 0a 00
	00		 je	 $LN707@PageDialog
  0494f	83 f8 20	 cmp	 eax, 32			; 00000020H
  04952	0f 84 07 0a 00
	00		 je	 $LN707@PageDialog

; 5109 : 					{
; 5110 : 						VerifyPasswordAndUpdate2(hwndDlg, GetDlgItem (GetParent (hwndDlg), IDC_NEXT),
; 5111 : 							GetDlgItem (hCurPage, IDC_PASSWORD),
; 5112 : 							GetDlgItem (hCurPage, IDC_VERIFY),
; 5113 : 							volumePassword.Text, sizeof(volumePassword.Text), szTmpPas, sizeof(szTmpPas), KeyFilesEnable && FirstKeyFile!=NULL);

  04958	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _KeyFilesEnable, 0
  0495f	74 10		 je	 SHORT $LN426@PageDialog
  04961	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _FirstKeyFile, 0
  04968	74 07		 je	 SHORT $LN426@PageDialog
  0496a	b8 01 00 00 00	 mov	 eax, 1
  0496f	eb 02		 jmp	 SHORT $LN427@PageDialog
$LN426@PageDialog:
  04971	33 c0		 xor	 eax, eax
$LN427@PageDialog:
  04973	50		 push	 eax
  04974	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  04979	6a 41		 push	 65			; 00000041H
  0497b	68 00 00 00 00	 push	 OFFSET ?szTmpPas@@3PADA	; szTmpPas
  04980	6a 41		 push	 65			; 00000041H
  04982	68 04 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A+4
  04987	68 f2 03 00 00	 push	 1010			; 000003f2H
  0498c	50		 push	 eax
  0498d	ff d6		 call	 esi
  0498f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  04995	50		 push	 eax
  04996	68 ec 03 00 00	 push	 1004			; 000003ecH
  0499b	51		 push	 ecx
  0499c	ff d6		 call	 esi
  0499e	50		 push	 eax
  0499f	68 10 04 00 00	 push	 1040			; 00000410H
  049a4	53		 push	 ebx
  049a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  049ab	50		 push	 eax
  049ac	ff d6		 call	 esi
  049ae	50		 push	 eax
  049af	53		 push	 ebx
  049b0	e8 00 00 00 00	 call	 _VerifyPasswordAndUpdate2
  049b5	83 c4 24	 add	 esp, 36			; 00000024H

; 5114 : 					}
; 5115 : 				}
; 5116 : 
; 5117 : 				return 1;

  049b8	e9 a2 09 00 00	 jmp	 $LN707@PageDialog
$LN69@PageDialog:

; 5118 : 			}
; 5119 : 
; 5120 : 			if (lw == IDC_KEYFILES_ENABLE)

  049bd	b9 c5 13 00 00	 mov	 ecx, 5061		; 000013c5H
  049c2	66 3b f9	 cmp	 di, cx
  049c5	0f 85 a2 00 00
	00		 jne	 $LN64@PageDialog

; 5121 : 			{
; 5122 : 				KeyFilesEnable = GetCheckBox (hwndDlg, IDC_KEYFILES_ENABLE);

  049cb	51		 push	 ecx
  049cc	53		 push	 ebx
  049cd	e8 00 00 00 00	 call	 _GetCheckBox

; 5123 : 
; 5124 : 				if (nCurPageNo != HIDDEN_VOL_HOST_PASSWORD_PAGE && nCurPageNo != NONSYS_INPLACE_ENC_RESUME_PASSWORD_PAGE)

  049d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  049d8	83 c4 08	 add	 esp, 8
  049db	a3 00 00 00 00	 mov	 DWORD PTR _KeyFilesEnable, eax
  049e0	83 f9 14	 cmp	 ecx, 20			; 00000014H
  049e3	0f 84 76 09 00
	00		 je	 $LN707@PageDialog
  049e9	83 f9 20	 cmp	 ecx, 32			; 00000020H
  049ec	0f 84 6d 09 00
	00		 je	 $LN707@PageDialog

; 5125 : 				{
; 5126 : 					EnableWindow (GetDlgItem (hwndDlg, IDC_KEY_FILES), KeyFilesEnable);

  049f2	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  049f8	50		 push	 eax
  049f9	68 02 04 00 00	 push	 1026			; 00000402H
  049fe	53		 push	 ebx
  049ff	ff d6		 call	 esi
  04a01	50		 push	 eax
  04a02	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 5127 : 
; 5128 : 					VerifyPasswordAndUpdate2(hwndDlg, GetDlgItem (GetParent (hwndDlg), IDC_NEXT),
; 5129 : 						GetDlgItem (hCurPage, IDC_PASSWORD),
; 5130 : 						GetDlgItem (hCurPage, IDC_VERIFY),
; 5131 : 						volumePassword.Text, sizeof(volumePassword.Text), szTmpPas, sizeof(szTmpPas), KeyFilesEnable && FirstKeyFile!=NULL);

  04a08	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _KeyFilesEnable, 0
  04a0f	74 10		 je	 SHORT $LN428@PageDialog
  04a11	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _FirstKeyFile, 0
  04a18	74 07		 je	 SHORT $LN428@PageDialog
  04a1a	b8 01 00 00 00	 mov	 eax, 1
  04a1f	eb 02		 jmp	 SHORT $LN429@PageDialog
$LN428@PageDialog:
  04a21	33 c0		 xor	 eax, eax
$LN429@PageDialog:
  04a23	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  04a29	50		 push	 eax
  04a2a	6a 41		 push	 65			; 00000041H
  04a2c	68 00 00 00 00	 push	 OFFSET ?szTmpPas@@3PADA	; szTmpPas
  04a31	6a 41		 push	 65			; 00000041H
  04a33	68 04 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A+4
  04a38	68 f2 03 00 00	 push	 1010			; 000003f2H
  04a3d	52		 push	 edx
  04a3e	ff d6		 call	 esi
  04a40	50		 push	 eax
  04a41	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  04a46	68 ec 03 00 00	 push	 1004			; 000003ecH
  04a4b	50		 push	 eax
  04a4c	ff d6		 call	 esi
  04a4e	50		 push	 eax
  04a4f	68 10 04 00 00	 push	 1040			; 00000410H
  04a54	53		 push	 ebx
  04a55	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  04a5b	50		 push	 eax
  04a5c	ff d6		 call	 esi
  04a5e	50		 push	 eax
  04a5f	53		 push	 ebx
  04a60	e8 00 00 00 00	 call	 _VerifyPasswordAndUpdate2
  04a65	83 c4 24	 add	 esp, 36			; 00000024H

; 5132 : 				}
; 5133 : 
; 5134 : 				return 1;

  04a68	e9 f2 08 00 00	 jmp	 $LN707@PageDialog
$LN64@PageDialog:

; 5135 : 			}
; 5136 : 		}
; 5137 : 
; 5138 : 		if (nCurPageNo == HIDDEN_VOL_HOST_PASSWORD_PAGE
; 5139 : 			|| nCurPageNo == NONSYS_INPLACE_ENC_RESUME_PASSWORD_PAGE)

  04a6d	83 f8 14	 cmp	 eax, 20			; 00000014H
  04a70	74 09		 je	 SHORT $LN61@PageDialog
  04a72	83 f8 20	 cmp	 eax, 32			; 00000020H
  04a75	0f 85 ec 00 00
	00		 jne	 $LN54@PageDialog
$LN61@PageDialog:

; 5140 : 		{
; 5141 : 			if (hw == EN_CHANGE)

  04a7b	b9 00 03 00 00	 mov	 ecx, 768		; 00000300H
  04a80	66 3b d1	 cmp	 dx, cx
  04a83	0f 85 8b 00 00
	00		 jne	 $LN60@PageDialog

; 5142 : 			{
; 5143 : 				WCHAR tmpUTF16buf[MAX_PASSWORD+1];
; 5144 : 				VirtualLock(tmpUTF16buf,sizeof(tmpUTF16buf));

  04a89	68 82 00 00 00	 push	 130			; 00000082H
  04a8e	8d 95 88 11 01
	00		 lea	 edx, DWORD PTR _tmpUTF16buf$134038[ebp]
  04a94	52		 push	 edx
  04a95	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualLock@8

; 5145 : 				GetWindowTextW(GetDlgItem (hCurPage, IDC_PASSWORD_DIRECT), tmpUTF16buf, sizeof(tmpUTF16buf)/sizeof(*tmpUTF16buf));

  04a9b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  04aa1	6a 41		 push	 65			; 00000041H
  04aa3	8d 85 88 11 01
	00		 lea	 eax, DWORD PTR _tmpUTF16buf$134038[ebp]
  04aa9	50		 push	 eax
  04aaa	68 0d 04 00 00	 push	 1037			; 0000040dH
  04aaf	51		 push	 ecx
  04ab0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  04ab6	50		 push	 eax
  04ab7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextW@12

; 5146 : 				ConvertUTF16toUTF8s((const UTF16*)tmpUTF16buf,arraysize(tmpUTF16buf),(UTF8*)volumePassword.Text,arraysize(volumePassword.Text),strictConversion);

  04abd	6a 00		 push	 0
  04abf	6a 41		 push	 65			; 00000041H
  04ac1	68 04 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A+4
  04ac6	8d 95 88 11 01
	00		 lea	 edx, DWORD PTR _tmpUTF16buf$134038[ebp]
  04acc	6a 41		 push	 65			; 00000041H
  04ace	52		 push	 edx
  04acf	e8 00 00 00 00	 call	 _ConvertUTF16toUTF8s

; 5147 : 				burn(tmpUTF16buf,sizeof(tmpUTF16buf));

  04ad4	8d 95 88 11 01
	00		 lea	 edx, DWORD PTR _tmpUTF16buf$134038[ebp]
  04ada	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  04adf	83 c4 14	 add	 esp, 20			; 00000014H
  04ae2	8b f1		 mov	 esi, ecx
  04ae4	8b c2		 mov	 eax, edx
$LL567@PageDialog:
  04ae6	c6 00 00	 mov	 BYTE PTR [eax], 0
  04ae9	40		 inc	 eax
  04aea	83 ee 01	 sub	 esi, 1
  04aed	75 f7		 jne	 SHORT $LL567@PageDialog
  04aef	90		 npad	 1
$LL56@PageDialog:
  04af0	49		 dec	 ecx
  04af1	c6 02 00	 mov	 BYTE PTR [edx], 0
  04af4	42		 inc	 edx
  04af5	85 c9		 test	 ecx, ecx
  04af7	75 f7		 jne	 SHORT $LL56@PageDialog

; 5148 : 				volumePassword.Length = strlen ((char *) volumePassword.Text);

  04af9	b8 04 00 00 00	 mov	 eax, OFFSET ?volumePassword@@3UPassword@@A+4
  04afe	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL636@PageDialog:
  04b01	8a 08		 mov	 cl, BYTE PTR [eax]
  04b03	40		 inc	 eax
  04b04	84 c9		 test	 cl, cl
  04b06	75 f9		 jne	 SHORT $LL636@PageDialog
  04b08	2b c2		 sub	 eax, edx
  04b0a	a3 00 00 00 00	 mov	 DWORD PTR ?volumePassword@@3UPassword@@A, eax

; 5149 : 				return 1;

  04b0f	e9 4b 08 00 00	 jmp	 $LN707@PageDialog
$LN60@PageDialog:

; 5150 : 			}
; 5151 : 
; 5152 : 			if (lw == IDC_SHOW_PASSWORD_SINGLE)

  04b14	b9 1f 04 00 00	 mov	 ecx, 1055		; 0000041fH
  04b19	66 3b f9	 cmp	 di, cx
  04b1c	75 49		 jne	 SHORT $LN54@PageDialog

; 5153 : 			{
; 5154 : 				SendMessage (GetDlgItem (hwndDlg, IDC_PASSWORD_DIRECT),
; 5155 : 					EM_SETPASSWORDCHAR,
; 5156 : 					GetCheckBox (hwndDlg, IDC_SHOW_PASSWORD_SINGLE) ? 0 : '*',
; 5157 : 					0);

  04b1e	6a 00		 push	 0
  04b20	51		 push	 ecx
  04b21	53		 push	 ebx
  04b22	e8 00 00 00 00	 call	 _GetCheckBox
  04b27	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04b2d	83 c4 08	 add	 esp, 8
  04b30	f7 d8		 neg	 eax
  04b32	1b c0		 sbb	 eax, eax
  04b34	83 e0 d6	 and	 eax, -42		; ffffffd6H
  04b37	83 c0 2a	 add	 eax, 42			; 0000002aH
  04b3a	50		 push	 eax
  04b3b	68 cc 00 00 00	 push	 204			; 000000ccH
  04b40	68 0d 04 00 00	 push	 1037			; 0000040dH
  04b45	53		 push	 ebx
  04b46	ff d6		 call	 esi
  04b48	50		 push	 eax
  04b49	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 5158 : 				InvalidateRect (GetDlgItem (hwndDlg, IDC_PASSWORD_DIRECT), NULL, TRUE);

  04b4f	6a 01		 push	 1
  04b51	6a 00		 push	 0
  04b53	68 0d 04 00 00	 push	 1037			; 0000040dH
  04b58	53		 push	 ebx
  04b59	ff d6		 call	 esi
  04b5b	50		 push	 eax
  04b5c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12

; 5159 : 				return 1;

  04b62	e9 f8 07 00 00	 jmp	 $LN707@PageDialog
$LN54@PageDialog:

; 5160 : 			}
; 5161 : 		}
; 5162 : 
; 5163 : 		if ((lw == IDC_KB || lw == IDC_MB || lw == IDC_GB) && nCurPageNo == SIZE_PAGE)

  04b67	b9 f3 03 00 00	 mov	 ecx, 1011		; 000003f3H
  04b6c	66 3b f9	 cmp	 di, cx
  04b6f	74 18		 je	 SHORT $LN52@PageDialog
  04b71	b9 f5 03 00 00	 mov	 ecx, 1013		; 000003f5H
  04b76	66 3b f9	 cmp	 di, cx
  04b79	74 0e		 je	 SHORT $LN52@PageDialog
  04b7b	b9 f7 03 00 00	 mov	 ecx, 1015		; 000003f7H
  04b80	66 3b f9	 cmp	 di, cx
  04b83	0f 85 ce 00 00
	00		 jne	 $LN53@PageDialog
$LN52@PageDialog:
  04b89	83 f8 13	 cmp	 eax, 19			; 00000013H
  04b8c	0f 85 c5 00 00
	00		 jne	 $LN53@PageDialog

; 5164 : 		{
; 5165 : 			SendMessage (GetDlgItem (hwndDlg, IDC_KB), BM_SETCHECK, BST_UNCHECKED, 0);

  04b92	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04b98	6a 00		 push	 0
  04b9a	6a 00		 push	 0
  04b9c	68 f1 00 00 00	 push	 241			; 000000f1H
  04ba1	68 f3 03 00 00	 push	 1011			; 000003f3H
  04ba6	53		 push	 ebx
  04ba7	ff d6		 call	 esi
  04ba9	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  04baf	50		 push	 eax
  04bb0	ff d7		 call	 edi

; 5166 : 			SendMessage (GetDlgItem (hwndDlg, IDC_MB), BM_SETCHECK, BST_UNCHECKED, 0);

  04bb2	6a 00		 push	 0
  04bb4	6a 00		 push	 0
  04bb6	68 f1 00 00 00	 push	 241			; 000000f1H
  04bbb	68 f5 03 00 00	 push	 1013			; 000003f5H
  04bc0	53		 push	 ebx
  04bc1	ff d6		 call	 esi
  04bc3	50		 push	 eax
  04bc4	ff d7		 call	 edi

; 5167 : 			SendMessage (GetDlgItem (hwndDlg, IDC_GB), BM_SETCHECK, BST_UNCHECKED, 0);

  04bc6	6a 00		 push	 0
  04bc8	6a 00		 push	 0
  04bca	68 f1 00 00 00	 push	 241			; 000000f1H
  04bcf	68 f7 03 00 00	 push	 1015			; 000003f7H
  04bd4	53		 push	 ebx
  04bd5	ff d6		 call	 esi
  04bd7	50		 push	 eax
  04bd8	ff d7		 call	 edi

; 5168 : 
; 5169 : 			switch (lw)

  04bda	0f b7 85 a4 12
	01 00		 movzx	 eax, WORD PTR _wParam$[ebp]
  04be1	2d f3 03 00 00	 sub	 eax, 1011		; 000003f3H
  04be6	74 4d		 je	 SHORT $LN49@PageDialog
  04be8	83 e8 02	 sub	 eax, 2
  04beb	74 26		 je	 SHORT $LN48@PageDialog
  04bed	83 e8 02	 sub	 eax, 2
  04bf0	75 57		 jne	 SHORT $LN50@PageDialog

; 5176 : 				break;
; 5177 : 			case IDC_GB:
; 5178 : 				SendMessage (GetDlgItem (hwndDlg, IDC_GB), BM_SETCHECK, BST_CHECKED, 0);

  04bf2	50		 push	 eax
  04bf3	6a 01		 push	 1
  04bf5	68 f1 00 00 00	 push	 241			; 000000f1H
  04bfa	68 f7 03 00 00	 push	 1015			; 000003f7H
  04bff	53		 push	 ebx
  04c00	ff d6		 call	 esi
  04c02	50		 push	 eax
  04c03	ff d7		 call	 edi

; 5179 : 				break;
; 5180 : 			}
; 5181 : 
; 5182 : 			VerifySizeAndUpdate (hwndDlg, FALSE);

  04c05	6a 00		 push	 0
  04c07	8b cb		 mov	 ecx, ebx
  04c09	e8 00 00 00 00	 call	 _VerifySizeAndUpdate

; 5183 : 			return 1;

  04c0e	e9 49 07 00 00	 jmp	 $LN723@PageDialog
$LN48@PageDialog:

; 5173 : 				break;
; 5174 : 			case IDC_MB:
; 5175 : 				SendMessage (GetDlgItem (hwndDlg, IDC_MB), BM_SETCHECK, BST_CHECKED, 0);

  04c13	6a 00		 push	 0
  04c15	6a 01		 push	 1
  04c17	68 f1 00 00 00	 push	 241			; 000000f1H
  04c1c	68 f5 03 00 00	 push	 1013			; 000003f5H
  04c21	53		 push	 ebx
  04c22	ff d6		 call	 esi
  04c24	50		 push	 eax
  04c25	ff d7		 call	 edi

; 5179 : 				break;
; 5180 : 			}
; 5181 : 
; 5182 : 			VerifySizeAndUpdate (hwndDlg, FALSE);

  04c27	6a 00		 push	 0
  04c29	8b cb		 mov	 ecx, ebx
  04c2b	e8 00 00 00 00	 call	 _VerifySizeAndUpdate

; 5183 : 			return 1;

  04c30	e9 27 07 00 00	 jmp	 $LN723@PageDialog
$LN49@PageDialog:

; 5170 : 			{
; 5171 : 			case IDC_KB:
; 5172 : 				SendMessage (GetDlgItem (hwndDlg, IDC_KB), BM_SETCHECK, BST_CHECKED, 0);

  04c35	6a 00		 push	 0
  04c37	6a 01		 push	 1
  04c39	68 f1 00 00 00	 push	 241			; 000000f1H
  04c3e	68 f3 03 00 00	 push	 1011			; 000003f3H
  04c43	53		 push	 ebx
  04c44	ff d6		 call	 esi
  04c46	50		 push	 eax
  04c47	ff d7		 call	 edi
$LN50@PageDialog:

; 5179 : 				break;
; 5180 : 			}
; 5181 : 
; 5182 : 			VerifySizeAndUpdate (hwndDlg, FALSE);

  04c49	6a 00		 push	 0
  04c4b	8b cb		 mov	 ecx, ebx
  04c4d	e8 00 00 00 00	 call	 _VerifySizeAndUpdate

; 5183 : 			return 1;

  04c52	e9 05 07 00 00	 jmp	 $LN723@PageDialog
$LN53@PageDialog:

; 5184 : 		}
; 5185 : 
; 5186 : 		if (lw == IDC_HIDVOL_WIZ_MODE_DIRECT && nCurPageNo == HIDDEN_VOL_WIZARD_MODE_PAGE)

  04c57	b9 0c 04 00 00	 mov	 ecx, 1036		; 0000040cH
  04c5c	66 3b f9	 cmp	 di, cx
  04c5f	75 18		 jne	 SHORT $LN46@PageDialog
  04c61	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  04c64	0f 85 a7 01 00
	00		 jne	 $LN41@PageDialog

; 5187 : 		{
; 5188 : 			bHiddenVolDirect = TRUE;

  04c6a	b8 01 00 00 00	 mov	 eax, 1
  04c6f	a3 00 00 00 00	 mov	 DWORD PTR _bHiddenVolDirect, eax

; 5189 : 			return 1;

  04c74	e9 eb 06 00 00	 jmp	 $LN342@PageDialog
$LN46@PageDialog:

; 5190 : 		}
; 5191 : 
; 5192 : 		if (lw == IDC_HIDVOL_WIZ_MODE_FULL && nCurPageNo == HIDDEN_VOL_WIZARD_MODE_PAGE)

  04c79	b9 0b 04 00 00	 mov	 ecx, 1035		; 0000040bH
  04c7e	66 3b f9	 cmp	 di, cx
  04c81	75 18		 jne	 SHORT $LN45@PageDialog
  04c83	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  04c86	0f 85 85 01 00
	00		 jne	 $LN41@PageDialog
$LN736@PageDialog:

; 5193 : 		{
; 5194 : 			bHiddenVolDirect = FALSE;

  04c8c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bHiddenVolDirect, 0

; 5195 : 			return 1;

  04c96	e9 c4 06 00 00	 jmp	 $LN707@PageDialog
$LN45@PageDialog:

; 5196 : 		}
; 5197 : 
; 5198 : 		if (lw == IDC_SELECT_VOLUME_LOCATION && nCurPageNo == VOLUME_LOCATION_PAGE)

  04c9b	b9 0f 04 00 00	 mov	 ecx, 1039		; 0000040fH
  04ca0	66 3b f9	 cmp	 di, cx
  04ca3	0f 85 68 01 00
	00		 jne	 $LN41@PageDialog
  04ca9	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  04cac	0f 85 5f 01 00
	00		 jne	 $LN41@PageDialog

; 5199 : 		{
; 5200 : 			if (!bDevice)

  04cb2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  04cb9	75 78		 jne	 SHORT $LN43@PageDialog

; 5201 : 			{
; 5202 : 				// Select file
; 5203 : 
; 5204 : 				if (BrowseFiles (hwndDlg, "OPEN_TITLE", szFileName, bHistory, !bHiddenVolDirect, NULL) == FALSE)

  04cbb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolDirect
  04cc1	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHistory
  04cc6	f7 da		 neg	 edx
  04cc8	6a 00		 push	 0
  04cca	1b d2		 sbb	 edx, edx
  04ccc	42		 inc	 edx
  04ccd	52		 push	 edx
  04cce	50		 push	 eax
  04ccf	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  04cd4	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GHEOANHD@OPEN_TITLE?$AA@
  04cd9	53		 push	 ebx
  04cda	e8 00 00 00 00	 call	 _BrowseFiles
  04cdf	83 c4 18	 add	 esp, 24			; 00000018H
  04ce2	85 c0		 test	 eax, eax

; 5205 : 					return 1;

  04ce4	0f 84 75 06 00
	00		 je	 $LN707@PageDialog

; 5206 : 
; 5207 : 				AddComboItem (GetDlgItem (hwndDlg, IDC_COMBO_BOX), szFileName, bHistory);

  04cea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHistory
  04cf0	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04cf6	51		 push	 ecx
  04cf7	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  04cfc	68 ea 03 00 00	 push	 1002			; 000003eaH
  04d01	53		 push	 ebx
  04d02	ff d6		 call	 esi
  04d04	50		 push	 eax
  04d05	e8 00 00 00 00	 call	 _AddComboItem
  04d0a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5208 : 
; 5209 : 				EnableDisableFileNext (GetDlgItem (hwndDlg, IDC_COMBO_BOX),
; 5210 : 					GetDlgItem (GetParent (hwndDlg), IDC_NEXT));

  04d0d	68 10 04 00 00	 push	 1040			; 00000410H
  04d12	53		 push	 ebx
  04d13	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  04d19	50		 push	 eax
  04d1a	ff d6		 call	 esi
  04d1c	50		 push	 eax
  04d1d	68 ea 03 00 00	 push	 1002			; 000003eaH
  04d22	53		 push	 ebx
  04d23	ff d6		 call	 esi
  04d25	50		 push	 eax
  04d26	e8 00 00 00 00	 call	 _EnableDisableFileNext
  04d2b	83 c4 08	 add	 esp, 8

; 5211 : 
; 5212 : 				return 1;

  04d2e	e9 2c 06 00 00	 jmp	 $LN707@PageDialog
$LN43@PageDialog:

; 5213 : 			}
; 5214 : 			else
; 5215 : 			{
; 5216 : 				// Select device
; 5217 : 
; 5218 : 				int nResult = DialogBoxParamW (hInst,
; 5219 : 					MAKEINTRESOURCEW (IDD_RAWDEVICES_DLG), GetParent (hwndDlg),
; 5220 : 					(DLGPROC) RawDevicesDlgProc, (LPARAM) & szFileName[0]);

  04d33	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetParent@4
  04d39	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  04d3e	68 00 00 00 00	 push	 OFFSET _RawDevicesDlgProc@16
  04d43	53		 push	 ebx
  04d44	ff d7		 call	 edi
  04d46	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  04d4c	50		 push	 eax
  04d4d	68 fe 01 00 00	 push	 510			; 000001feH
  04d52	52		 push	 edx
  04d53	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 5221 : 
; 5222 : 				// Check administrator privileges
; 5223 : 				if (!strstr (szFileName, "Floppy") && !IsAdmin() && !IsUacSupported ())

  04d59	68 00 00 00 00	 push	 OFFSET ??_C@_06OACPEFAM@Floppy?$AA@
  04d5e	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  04d63	8b f0		 mov	 esi, eax
  04d65	e8 00 00 00 00	 call	 _strstr
  04d6a	83 c4 08	 add	 esp, 8
  04d6d	85 c0		 test	 eax, eax
  04d6f	75 2f		 jne	 SHORT $LN40@PageDialog
  04d71	e8 00 00 00 00	 call	 _IsAdmin
  04d76	85 c0		 test	 eax, eax
  04d78	75 26		 jne	 SHORT $LN40@PageDialog
  04d7a	e8 00 00 00 00	 call	 _IsUacSupported
  04d7f	85 c0		 test	 eax, eax
  04d81	75 1d		 jne	 SHORT $LN40@PageDialog

; 5224 : 					MessageBoxW (hwndDlg, GetString ("ADMIN_PRIVILEGES_WARN_DEVICES"), lpszTitle, MB_OK|MB_ICONWARNING);

  04d83	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  04d88	6a 30		 push	 48			; 00000030H
  04d8a	50		 push	 eax
  04d8b	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NAOLHLLP@ADMIN_PRIVILEGES_WARN_DEVICES?$AA@
  04d90	e8 00 00 00 00	 call	 _GetString
  04d95	83 c4 04	 add	 esp, 4
  04d98	50		 push	 eax
  04d99	53		 push	 ebx
  04d9a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN40@PageDialog:

; 5225 : 
; 5226 : 				if (nResult == IDOK && strlen (szFileName) > 0)

  04da0	83 fe 01	 cmp	 esi, 1
  04da3	0f 85 b6 05 00
	00		 jne	 $LN707@PageDialog
  04da9	b8 00 00 00 00	 mov	 eax, OFFSET ?szFileName@@3PADA ; szFileName
  04dae	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL637@PageDialog:
  04db1	8a 08		 mov	 cl, BYTE PTR [eax]
  04db3	40		 inc	 eax
  04db4	84 c9		 test	 cl, cl
  04db6	75 f9		 jne	 SHORT $LL637@PageDialog
  04db8	2b c2		 sub	 eax, edx
  04dba	0f 84 9f 05 00
	00		 je	 $LN707@PageDialog

; 5227 : 				{
; 5228 : 					AddComboItem (GetDlgItem (hwndDlg, IDC_COMBO_BOX), szFileName, bHistory);

  04dc0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHistory
  04dc6	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04dcc	51		 push	 ecx
  04dcd	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  04dd2	68 ea 03 00 00	 push	 1002			; 000003eaH
  04dd7	53		 push	 ebx
  04dd8	ff d6		 call	 esi
  04dda	50		 push	 eax
  04ddb	e8 00 00 00 00	 call	 _AddComboItem
  04de0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5229 : 
; 5230 : 					EnableDisableFileNext (GetDlgItem (hwndDlg, IDC_COMBO_BOX),
; 5231 : 						GetDlgItem (GetParent (hwndDlg), IDC_NEXT));

  04de3	68 10 04 00 00	 push	 1040			; 00000410H
  04de8	53		 push	 ebx
  04de9	ff d7		 call	 edi
  04deb	50		 push	 eax
  04dec	ff d6		 call	 esi
  04dee	50		 push	 eax
  04def	68 ea 03 00 00	 push	 1002			; 000003eaH
  04df4	53		 push	 ebx
  04df5	ff d6		 call	 esi
  04df7	50		 push	 eax
  04df8	e8 00 00 00 00	 call	 _EnableDisableFileNext
  04dfd	83 c4 08	 add	 esp, 8
  04e00	33 c0		 xor	 eax, eax
  04e02	a3 00 00 00 00	 mov	 DWORD PTR ?bDeviceTransformModeChoiceMade@@3HA, eax ; bDeviceTransformModeChoiceMade
  04e07	a3 00 00 00 00	 mov	 DWORD PTR _bInPlaceEncNonSys, eax
  04e0c	e9 4e 05 00 00	 jmp	 $LN707@PageDialog
$LN41@PageDialog:

; 5232 : 
; 5233 : 					bDeviceTransformModeChoiceMade = FALSE;
; 5234 : 					bInPlaceEncNonSys = FALSE;
; 5235 : 				}
; 5236 : 				return 1;
; 5237 : 			}
; 5238 : 		}
; 5239 : 
; 5240 : 		if (nCurPageNo == DEVICE_TRANSFORM_MODE_PAGE)

  04e11	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  04e14	75 5b		 jne	 SHORT $LN36@PageDialog

; 5241 : 		{
; 5242 : 			switch (lw)

  04e16	0f b7 cf	 movzx	 ecx, di
  04e19	81 e9 4d 04 00
	00		 sub	 ecx, 1101		; 0000044dH
  04e1f	74 37		 je	 SHORT $LN35@PageDialog
  04e21	be 01 00 00 00	 mov	 esi, 1
  04e26	2b ce		 sub	 ecx, esi
  04e28	75 47		 jne	 SHORT $LN36@PageDialog

; 5250 : 
; 5251 : 			case IDC_DEVICE_TRANSFORM_MODE_INPLACE:
; 5252 : 
; 5253 : 				bInPlaceEncNonSys = TRUE;
; 5254 : 				bDeviceTransformModeChoiceMade = TRUE;
; 5255 : 
; 5256 : 				bHiddenVol = FALSE;

  04e2a	33 c0		 xor	 eax, eax
  04e2c	89 35 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, esi
  04e32	89 35 00 00 00
	00		 mov	 DWORD PTR ?bDeviceTransformModeChoiceMade@@3HA, esi ; bDeviceTransformModeChoiceMade
  04e38	a3 00 00 00 00	 mov	 DWORD PTR ?bHiddenVol@@3HC, eax ; bHiddenVol

; 5257 : 				bHiddenVolDirect = FALSE;

  04e3d	a3 00 00 00 00	 mov	 DWORD PTR _bHiddenVolDirect, eax

; 5258 : 				bHiddenVolHost = FALSE;

  04e42	a3 00 00 00 00	 mov	 DWORD PTR _bHiddenVolHost, eax

; 5259 : 				bSparseFileSwitch = FALSE;

  04e47	a3 00 00 00 00	 mov	 DWORD PTR ?bSparseFileSwitch@@3HC, eax ; bSparseFileSwitch

; 5260 : 				quickFormat = FALSE;

  04e4c	a3 00 00 00 00	 mov	 DWORD PTR ?quickFormat@@3HC, eax ; quickFormat

; 5261 : 
; 5262 : 				return 1;

  04e51	8b c6		 mov	 eax, esi
  04e53	e9 0c 05 00 00	 jmp	 $LN342@PageDialog
$LN35@PageDialog:

; 5243 : 			{
; 5244 : 			case IDC_DEVICE_TRANSFORM_MODE_FORMAT:
; 5245 : 
; 5246 : 				bInPlaceEncNonSys = FALSE;
; 5247 : 				bDeviceTransformModeChoiceMade = TRUE;

  04e58	b8 01 00 00 00	 mov	 eax, 1
  04e5d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bInPlaceEncNonSys, 0
  04e67	a3 00 00 00 00	 mov	 DWORD PTR ?bDeviceTransformModeChoiceMade@@3HA, eax ; bDeviceTransformModeChoiceMade

; 5248 : 
; 5249 : 				return 1;

  04e6c	e9 f3 04 00 00	 jmp	 $LN342@PageDialog
$LN36@PageDialog:

; 5263 : 			}
; 5264 : 		}
; 5265 : 
; 5266 : 		if (lw == IDC_HIDVOL_WIZ_MODE_FULL && nCurPageNo == HIDDEN_VOL_WIZARD_MODE_PAGE)

  04e71	b9 0b 04 00 00	 mov	 ecx, 1035		; 0000040bH
  04e76	66 3b f9	 cmp	 di, cx
  04e79	75 09		 jne	 SHORT $LN33@PageDialog
  04e7b	83 f8 0d	 cmp	 eax, 13			; 0000000dH

; 5267 : 		{
; 5268 : 			bHiddenVolDirect = FALSE;
; 5269 : 			return 1;

  04e7e	0f 84 08 fe ff
	ff		 je	 $LN736@PageDialog
$LN33@PageDialog:

; 5270 : 		}
; 5271 : 			
; 5272 : 		if (hw == CBN_SELCHANGE && nCurPageNo == CIPHER_PAGE)

  04e84	66 83 fa 01	 cmp	 dx, 1
  04e88	0f 85 ad 00 00
	00		 jne	 $LN32@PageDialog
  04e8e	83 f8 12	 cmp	 eax, 18			; 00000012H
  04e91	0f 85 a4 00 00
	00		 jne	 $LN32@PageDialog

; 5273 : 		{
; 5274 : 			switch (lw)

  04e97	0f b7 c7	 movzx	 eax, di
  04e9a	2d ea 03 00 00	 sub	 eax, 1002		; 000003eaH
  04e9f	0f 84 8b 00 00
	00		 je	 $LN29@PageDialog
  04ea5	83 e8 06	 sub	 eax, 6
  04ea8	0f 85 b1 04 00
	00		 jne	 $LN707@PageDialog

; 5278 : 				break;
; 5279 : 
; 5280 : 			case IDC_COMBO_BOX_HASH_ALGO:
; 5281 : 				if (SysEncInEffect ()
; 5282 : 					&& SendMessage (GetDlgItem (hwndDlg, IDC_COMBO_BOX_HASH_ALGO), CB_GETITEMDATA, 
; 5283 : 					SendMessage (GetDlgItem (hwndDlg, IDC_COMBO_BOX_HASH_ALGO), CB_GETCURSEL, 0, 0), 0) 
; 5284 : 					!= DEFAULT_HASH_ALGORITHM_BOOT)

  04eae	e8 00 00 00 00	 call	 _SysEncInEffect
  04eb3	85 c0		 test	 eax, eax
  04eb5	0f 84 a4 04 00
	00		 je	 $LN707@PageDialog
  04ebb	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04ec1	6a 00		 push	 0
  04ec3	6a 00		 push	 0
  04ec5	6a 00		 push	 0
  04ec7	68 47 01 00 00	 push	 327			; 00000147H
  04ecc	68 f0 03 00 00	 push	 1008			; 000003f0H
  04ed1	53		 push	 ebx
  04ed2	ff d6		 call	 esi
  04ed4	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  04eda	50		 push	 eax
  04edb	ff d7		 call	 edi
  04edd	50		 push	 eax
  04ede	68 50 01 00 00	 push	 336			; 00000150H
  04ee3	68 f0 03 00 00	 push	 1008			; 000003f0H
  04ee8	53		 push	 ebx
  04ee9	ff d6		 call	 esi
  04eeb	50		 push	 eax
  04eec	ff d7		 call	 edi
  04eee	83 f8 01	 cmp	 eax, 1
  04ef1	0f 84 68 04 00
	00		 je	 $LN707@PageDialog

; 5285 : 				{
; 5286 : 					hash_algo = DEFAULT_HASH_ALGORITHM_BOOT;
; 5287 : 					RandSetHashFunction (DEFAULT_HASH_ALGORITHM_BOOT);

  04ef7	6a 01		 push	 1
  04ef9	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?hash_algo@@3HA, 1 ; hash_algo
  04f03	e8 00 00 00 00	 call	 _RandSetHashFunction

; 5288 : 					Info ("ALGO_NOT_SUPPORTED_FOR_SYS_ENCRYPTION");

  04f08	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@FCGANOF@ALGO_NOT_SUPPORTED_FOR_SYS_ENCRY@
  04f0d	e8 00 00 00 00	 call	 _Info
  04f12	83 c4 08	 add	 esp, 8

; 5289 : 					SelectAlgo (GetDlgItem (hwndDlg, IDC_COMBO_BOX_HASH_ALGO), &hash_algo);

  04f15	68 00 00 00 00	 push	 OFFSET ?hash_algo@@3HA	; hash_algo
  04f1a	68 f0 03 00 00	 push	 1008			; 000003f0H
  04f1f	53		 push	 ebx
  04f20	ff d6		 call	 esi
  04f22	50		 push	 eax
  04f23	e8 00 00 00 00	 call	 _SelectAlgo
  04f28	83 c4 08	 add	 esp, 8

; 5290 : 				}
; 5291 : 				break;

  04f2b	e9 2f 04 00 00	 jmp	 $LN707@PageDialog
$LN29@PageDialog:

; 5275 : 			{
; 5276 : 			case IDC_COMBO_BOX:
; 5277 : 				ComboSelChangeEA (hwndDlg);

  04f30	53		 push	 ebx
  04f31	e8 00 00 00 00	 call	 _ComboSelChangeEA

; 5292 : 			}
; 5293 : 			return 1;

  04f36	e9 21 04 00 00	 jmp	 $LN723@PageDialog
$LN32@PageDialog:

; 5294 : 
; 5295 : 		}
; 5296 : 
; 5297 : 		if (lw == IDC_QUICKFORMAT && IsButtonChecked (GetDlgItem (hCurPage, IDC_QUICKFORMAT)))

  04f3b	b9 ff 03 00 00	 mov	 ecx, 1023		; 000003ffH
  04f40	66 3b f9	 cmp	 di, cx
  04f43	75 5c		 jne	 SHORT $LN26@PageDialog
  04f45	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  04f4b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04f51	51		 push	 ecx
  04f52	52		 push	 edx
  04f53	ff d6		 call	 esi
  04f55	50		 push	 eax
  04f56	e8 00 00 00 00	 call	 _IsButtonChecked
  04f5b	83 c4 04	 add	 esp, 4
  04f5e	85 c0		 test	 eax, eax
  04f60	0f 84 e3 01 00
	00		 je	 $LN676@PageDialog

; 5298 : 		{
; 5299 : 			if (bSparseFileSwitch)

  04f66	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bSparseFileSwitch@@3HC ; bSparseFileSwitch
  04f6b	85 c0		 test	 eax, eax
  04f6d	74 07		 je	 SHORT $LN25@PageDialog

; 5300 : 			{
; 5301 : 				if (AskWarnYesNo("CONFIRM_SPARSE_FILE") == IDNO)

  04f6f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NLHJLKOB@CONFIRM_SPARSE_FILE?$AA@

; 5302 : 					SetCheckBox (hwndDlg, IDC_QUICKFORMAT, FALSE); 
; 5303 : 			}
; 5304 : 			else

  04f74	eb 05		 jmp	 SHORT $LN728@PageDialog
$LN25@PageDialog:

; 5305 : 			{
; 5306 : 				if (AskWarnYesNo("WARN_QUICK_FORMAT") == IDNO)

  04f76	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LJAPGPK@WARN_QUICK_FORMAT?$AA@
$LN728@PageDialog:
  04f7b	e8 00 00 00 00	 call	 _AskWarnYesNo
  04f80	83 c4 04	 add	 esp, 4
  04f83	83 f8 07	 cmp	 eax, 7
  04f86	0f 85 d3 03 00
	00		 jne	 $LN707@PageDialog

; 5307 : 					SetCheckBox (hwndDlg, IDC_QUICKFORMAT, FALSE); 

  04f8c	6a 00		 push	 0
  04f8e	68 ff 03 00 00	 push	 1023			; 000003ffH
  04f93	53		 push	 ebx
  04f94	e8 00 00 00 00	 call	 _SetCheckBox
  04f99	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5308 : 			}
; 5309 : 			return 1;

  04f9c	e9 be 03 00 00	 jmp	 $LN707@PageDialog
$LN26@PageDialog:

; 5310 : 		}
; 5311 : 
; 5312 : 		if (lw == IDC_FILESYS && hw == CBN_SELCHANGE)

  04fa1	b9 05 04 00 00	 mov	 ecx, 1029		; 00000405H
  04fa6	66 3b f9	 cmp	 di, cx
  04fa9	75 4e		 jne	 SHORT $LN21@PageDialog
  04fab	66 83 fa 01	 cmp	 dx, 1
  04faf	0f 85 9b 01 00
	00		 jne	 $LN677@PageDialog

; 5313 : 		{
; 5314 : 			fileSystem = SendMessage (GetDlgItem (hCurPage, IDC_FILESYS), CB_GETITEMDATA,
; 5315 : 				SendMessage (GetDlgItem (hCurPage, IDC_FILESYS), CB_GETCURSEL, 0, 0) , 0);

  04fb5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  04fbb	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04fc1	6a 00		 push	 0
  04fc3	6a 00		 push	 0
  04fc5	6a 00		 push	 0
  04fc7	68 47 01 00 00	 push	 327			; 00000147H
  04fcc	51		 push	 ecx
  04fcd	52		 push	 edx
  04fce	ff d6		 call	 esi
  04fd0	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  04fd6	50		 push	 eax
  04fd7	ff d3		 call	 ebx
  04fd9	50		 push	 eax
  04fda	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  04fdf	68 50 01 00 00	 push	 336			; 00000150H
  04fe4	68 05 04 00 00	 push	 1029			; 00000405H
  04fe9	50		 push	 eax
  04fea	ff d6		 call	 esi
  04fec	50		 push	 eax
  04fed	ff d3		 call	 ebx
  04fef	a3 00 00 00 00	 mov	 DWORD PTR ?fileSystem@@3HC, eax ; fileSystem

; 5316 : 
; 5317 : 			return 1;

  04ff4	e9 66 03 00 00	 jmp	 $LN707@PageDialog
$LN21@PageDialog:

; 5318 : 		}
; 5319 : 
; 5320 : 		if (lw == IDC_SHOW_KEYS && nCurPageNo == FORMAT_PAGE)

  04ff9	b9 06 04 00 00	 mov	 ecx, 1030		; 00000406H
  04ffe	66 3b f9	 cmp	 di, cx
  05001	0f 85 9b 00 00
	00		 jne	 $LN20@PageDialog
  05007	83 f8 26	 cmp	 eax, 38			; 00000026H
  0500a	0f 85 40 01 00
	00		 jne	 $LN677@PageDialog

; 5321 : 		{
; 5322 : 			showKeys = IsButtonChecked (GetDlgItem (hCurPage, IDC_SHOW_KEYS));

  05010	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  05016	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0501c	51		 push	 ecx
  0501d	52		 push	 edx
  0501e	ff d6		 call	 esi
  05020	50		 push	 eax
  05021	e8 00 00 00 00	 call	 _IsButtonChecked
  05026	83 c4 04	 add	 esp, 4
  05029	a3 00 00 00 00	 mov	 DWORD PTR _showKeys, eax

; 5323 : 
; 5324 : 			SetWindowTextA(GetDlgItem (hCurPage, IDC_RANDOM_BYTES), showKeys ? "                                                                              " : "********************************                                              ");

  0502e	85 c0		 test	 eax, eax
  05030	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0EP@HCFFCIHD@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
  05035	75 05		 jne	 SHORT $LN431@PageDialog
  05037	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0EP@NPBFJCJA@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
$LN431@PageDialog:
  0503c	50		 push	 eax
  0503d	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  05042	68 fc 03 00 00	 push	 1020			; 000003fcH
  05047	50		 push	 eax
  05048	ff d6		 call	 esi
  0504a	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetWindowTextA@8
  05050	50		 push	 eax
  05051	ff d3		 call	 ebx

; 5325 : 			SetWindowTextA(GetDlgItem (hCurPage, IDC_HEADER_KEY), showKeys ? "" : "********************************                                              ");

  05053	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _showKeys, 0
  0505a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0505f	75 05		 jne	 SHORT $LN433@PageDialog
  05061	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0EP@NPBFJCJA@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
$LN433@PageDialog:
  05066	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  0506c	50		 push	 eax
  0506d	68 f9 03 00 00	 push	 1017			; 000003f9H
  05072	51		 push	 ecx
  05073	ff d6		 call	 esi
  05075	50		 push	 eax
  05076	ff d3		 call	 ebx

; 5326 : 			SetWindowTextA(GetDlgItem (hCurPage, IDC_DISK_KEY), showKeys ? "" : "********************************                                              ");

  05078	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _showKeys, 0
  0507f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  05084	75 05		 jne	 SHORT $LN435@PageDialog
  05086	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0EP@NPBFJCJA@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
$LN435@PageDialog:
  0508b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  05091	50		 push	 eax
  05092	68 fb 03 00 00	 push	 1019			; 000003fbH
  05097	52		 push	 edx
  05098	ff d6		 call	 esi
  0509a	50		 push	 eax
  0509b	ff d3		 call	 ebx

; 5327 : 			return 1;

  0509d	e9 bd 02 00 00	 jmp	 $LN707@PageDialog
$LN20@PageDialog:

; 5328 : 		}
; 5329 : 		
; 5330 : 		if (lw == IDC_DISPLAY_POOL_CONTENTS 
; 5331 : 			&& (nCurPageNo == SYSENC_COLLECTING_RANDOM_DATA_PAGE || nCurPageNo == NONSYS_INPLACE_ENC_RAND_DATA_PAGE))

  050a2	b9 da 13 00 00	 mov	 ecx, 5082		; 000013daH
  050a7	66 3b f9	 cmp	 di, cx
  050aa	75 3f		 jne	 SHORT $LN19@PageDialog
  050ac	83 f8 17	 cmp	 eax, 23			; 00000017H
  050af	74 09		 je	 SHORT $LN18@PageDialog
  050b1	83 f8 22	 cmp	 eax, 34			; 00000022H
  050b4	0f 85 96 00 00
	00		 jne	 $LN677@PageDialog
$LN18@PageDialog:

; 5332 : 		{
; 5333 : 			showKeys = IsButtonChecked (GetDlgItem (hCurPage, IDC_DISPLAY_POOL_CONTENTS));

  050ba	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  050c0	68 da 13 00 00	 push	 5082			; 000013daH
  050c5	52		 push	 edx
  050c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  050cc	50		 push	 eax
  050cd	e8 00 00 00 00	 call	 _IsButtonChecked

; 5334 : 			DisplayRandPool (hRandPoolSys, showKeys);

  050d2	50		 push	 eax
  050d3	a3 00 00 00 00	 mov	 DWORD PTR _showKeys, eax
  050d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hRandPoolSys@@3RAUHWND__@@A ; hRandPoolSys
  050dd	50		 push	 eax
  050de	e8 00 00 00 00	 call	 _DisplayRandPool
  050e3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5335 : 
; 5336 : 			return 1;

  050e6	e9 74 02 00 00	 jmp	 $LN707@PageDialog
$LN19@PageDialog:

; 5337 : 		}
; 5338 : 
; 5339 : 		if (lw == IDC_DISPLAY_KEYS && nCurPageNo == SYSENC_KEYS_GEN_PAGE)

  050eb	b9 40 04 00 00	 mov	 ecx, 1088		; 00000440H
  050f0	66 3b f9	 cmp	 di, cx
  050f3	75 5b		 jne	 SHORT $LN677@PageDialog
  050f5	83 f8 18	 cmp	 eax, 24			; 00000018H
  050f8	75 56		 jne	 SHORT $LN677@PageDialog

; 5340 : 		{
; 5341 : 			showKeys = IsButtonChecked (GetDlgItem (hCurPage, IDC_DISPLAY_KEYS));

  050fa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  05100	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  05106	51		 push	 ecx
  05107	52		 push	 edx
  05108	ff d6		 call	 esi
  0510a	50		 push	 eax
  0510b	e8 00 00 00 00	 call	 _IsButtonChecked
  05110	83 c4 04	 add	 esp, 4

; 5342 : 
; 5343 : 			DisplayPortionsOfKeys (GetDlgItem (hwndDlg, IDC_HEADER_KEY), GetDlgItem (hwndDlg, IDC_DISK_KEY), HeaderKeyGUIView, MasterKeyGUIView, !showKeys);

  05113	33 c9		 xor	 ecx, ecx
  05115	85 c0		 test	 eax, eax
  05117	0f 94 c1	 sete	 cl
  0511a	a3 00 00 00 00	 mov	 DWORD PTR _showKeys, eax
  0511f	51		 push	 ecx
  05120	68 00 00 00 00	 push	 OFFSET _MasterKeyGUIView
  05125	68 00 00 00 00	 push	 OFFSET _HeaderKeyGUIView
  0512a	68 fb 03 00 00	 push	 1019			; 000003fbH
  0512f	53		 push	 ebx
  05130	ff d6		 call	 esi
  05132	50		 push	 eax
  05133	68 f9 03 00 00	 push	 1017			; 000003f9H
  05138	53		 push	 ebx
  05139	ff d6		 call	 esi
  0513b	50		 push	 eax
  0513c	e8 00 00 00 00	 call	 _DisplayPortionsOfKeys
  05141	83 c4 14	 add	 esp, 20			; 00000014H

; 5344 : 			return 1;

  05144	e9 16 02 00 00	 jmp	 $LN707@PageDialog
$LN676@PageDialog:
  05149	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  0514e	eb 06		 jmp	 SHORT $LN17@PageDialog
$LN677@PageDialog:
  05150	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
$LN17@PageDialog:

; 5345 : 		}
; 5346 : 
; 5347 : 		if (nCurPageNo == SYSENC_RESCUE_DISK_CREATION_PAGE)

  05156	83 f8 19	 cmp	 eax, 25			; 00000019H
  05159	0f 85 df 00 00
	00		 jne	 $LN13@PageDialog

; 5348 : 		{
; 5349 : 			if (lw == IDC_BROWSE)

  0515f	ba ed 03 00 00	 mov	 edx, 1005		; 000003edH
  05164	66 3b fa	 cmp	 di, dx
  05167	0f 85 7a 00 00
	00		 jne	 $LN15@PageDialog

; 5350 : 			{
; 5351 : 				char tmpszRescueDiskISO [TC_MAX_PATH+1];
; 5352 : 
; 5353 : 				if (!BrowseFiles (hwndDlg, "OPEN_TITLE", tmpszRescueDiskISO, FALSE, TRUE, NULL))

  0516d	6a 00		 push	 0
  0516f	6a 01		 push	 1
  05171	6a 00		 push	 0
  05173	8d 85 50 0e 01
	00		 lea	 eax, DWORD PTR _tmpszRescueDiskISO$134119[ebp]
  05179	50		 push	 eax
  0517a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GHEOANHD@OPEN_TITLE?$AA@
  0517f	53		 push	 ebx
  05180	e8 00 00 00 00	 call	 _BrowseFiles
  05185	83 c4 18	 add	 esp, 24			; 00000018H
  05188	85 c0		 test	 eax, eax

; 5354 : 					return 1;

  0518a	0f 84 cf 01 00
	00		 je	 $LN707@PageDialog

; 5355 : 
; 5356 : 				strcpy (szRescueDiskISO, tmpszRescueDiskISO);

  05190	33 c0		 xor	 eax, eax
$LL436@PageDialog:
  05192	8a 8c 05 50 0e
	01 00		 mov	 cl, BYTE PTR _tmpszRescueDiskISO$134119[ebp+eax]
  05199	88 88 00 00 00
	00		 mov	 BYTE PTR ?szRescueDiskISO@@3PADA[eax], cl
  0519f	40		 inc	 eax
  051a0	84 c9		 test	 cl, cl
  051a2	75 ee		 jne	 SHORT $LL436@PageDialog

; 5357 : 
; 5358 : 				SetDlgItemText (hwndDlg, IDC_RESCUE_DISK_ISO_PATH, szRescueDiskISO);

  051a4	68 00 00 00 00	 push	 OFFSET ?szRescueDiskISO@@3PADA ; szRescueDiskISO
  051a9	68 e9 03 00 00	 push	 1001			; 000003e9H
  051ae	53		 push	 ebx
  051af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12

; 5359 : 				EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), (GetWindowTextLengthA(GetDlgItem (hwndDlg, IDC_RESCUE_DISK_ISO_PATH)) > 1));

  051b5	68 e9 03 00 00	 push	 1001			; 000003e9H
  051ba	53		 push	 ebx
  051bb	ff d6		 call	 esi
  051bd	50		 push	 eax
  051be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextLengthA@4
  051c4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  051ca	33 c9		 xor	 ecx, ecx
  051cc	83 f8 01	 cmp	 eax, 1
  051cf	0f 9f c1	 setg	 cl
  051d2	51		 push	 ecx
  051d3	68 10 04 00 00	 push	 1040			; 00000410H
  051d8	52		 push	 edx
  051d9	ff d6		 call	 esi
  051db	50		 push	 eax
  051dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  051e2	e9 78 01 00 00	 jmp	 $LN707@PageDialog
$LN15@PageDialog:

; 5360 : 				return 1;
; 5361 : 			}
; 5362 : 
; 5363 : 			if ( hw == EN_CHANGE )

  051e7	b8 00 03 00 00	 mov	 eax, 768		; 00000300H
  051ec	66 39 45 e8	 cmp	 WORD PTR _hw$[ebp], ax
  051f0	0f 85 11 01 00
	00		 jne	 $LN5@PageDialog

; 5364 : 			{
; 5365 : 				GetDlgItemText (hwndDlg, IDC_RESCUE_DISK_ISO_PATH, szRescueDiskISO, sizeof(szRescueDiskISO));

  051f6	68 05 01 00 00	 push	 261			; 00000105H
  051fb	68 00 00 00 00	 push	 OFFSET ?szRescueDiskISO@@3PADA ; szRescueDiskISO
  05200	68 e9 03 00 00	 push	 1001			; 000003e9H
  05205	53		 push	 ebx
  05206	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItemTextA@16

; 5366 : 				EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), (GetWindowTextLengthA(GetDlgItem (hwndDlg, IDC_RESCUE_DISK_ISO_PATH)) > 1));

  0520c	68 e9 03 00 00	 push	 1001			; 000003e9H
  05211	53		 push	 ebx
  05212	ff d6		 call	 esi
  05214	50		 push	 eax
  05215	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextLengthA@4
  0521b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  05221	33 c9		 xor	 ecx, ecx
  05223	83 f8 01	 cmp	 eax, 1
  05226	0f 9f c1	 setg	 cl
  05229	51		 push	 ecx
  0522a	68 10 04 00 00	 push	 1040			; 00000410H
  0522f	52		 push	 edx
  05230	ff d6		 call	 esi
  05232	50		 push	 eax
  05233	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8
  05239	e9 21 01 00 00	 jmp	 $LN707@PageDialog
$LN13@PageDialog:

; 5367 : 				return 1;
; 5368 : 			}
; 5369 : 		}
; 5370 : 
; 5371 : 		if (nCurPageNo == SYSENC_RESCUE_DISK_BURN_PAGE && lw == IDC_DOWNLOAD_CD_BURN_SOFTWARE)

  0523e	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  05241	75 43		 jne	 SHORT $LN12@PageDialog
  05243	b8 3a 04 00 00	 mov	 eax, 1082		; 0000043aH
  05248	66 3b f8	 cmp	 di, ax
  0524b	0f 85 b6 00 00
	00		 jne	 $LN5@PageDialog

; 5372 : 		{
; 5373 : 			if (IsWindowsIsoBurnerAvailable())

  05251	e8 00 00 00 00	 call	 _IsWindowsIsoBurnerAvailable
  05256	85 c0		 test	 eax, eax
  05258	74 13		 je	 SHORT $LN11@PageDialog

; 5374 : 				LaunchWindowsIsoBurner (hwndDlg, szRescueDiskISO);

  0525a	68 00 00 00 00	 push	 OFFSET ?szRescueDiskISO@@3PADA ; szRescueDiskISO
  0525f	53		 push	 ebx
  05260	e8 00 00 00 00	 call	 _LaunchWindowsIsoBurner
  05265	83 c4 08	 add	 esp, 8

; 5375 : 			else

  05268	e9 f2 00 00 00	 jmp	 $LN707@PageDialog
$LN11@PageDialog:

; 5376 : 				Applink ("isoburning", TRUE, "");

  0526d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  05272	6a 01		 push	 1
  05274	68 00 00 00 00	 push	 OFFSET ??_C@_0L@EDOIAICP@isoburning?$AA@
  05279	e8 00 00 00 00	 call	 _Applink
  0527e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5377 : 
; 5378 : 			return 1;

  05281	e9 d9 00 00 00	 jmp	 $LN707@PageDialog
$LN12@PageDialog:

; 5379 : 		}
; 5380 : 
; 5381 : 		if ((nCurPageNo == SYSENC_WIPE_MODE_PAGE 
; 5382 : 			|| nCurPageNo == NONSYS_INPLACE_ENC_WIPE_MODE_PAGE 
; 5383 : 			|| nCurPageNo == DEVICE_WIPE_MODE_PAGE)
; 5384 : 			&& hw == CBN_SELCHANGE)

  05286	83 f8 1c	 cmp	 eax, 28			; 0000001cH
  05289	74 0a		 je	 SHORT $LN8@PageDialog
  0528b	83 f8 23	 cmp	 eax, 35			; 00000023H
  0528e	74 05		 je	 SHORT $LN8@PageDialog
  05290	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  05293	75 4a		 jne	 SHORT $LN9@PageDialog
$LN8@PageDialog:
  05295	66 83 7d e8 01	 cmp	 WORD PTR _hw$[ebp], 1
  0529a	75 43		 jne	 SHORT $LN9@PageDialog

; 5385 : 		{
; 5386 : 			nWipeMode = (WipeAlgorithmId) SendMessage (GetDlgItem (hCurPage, IDC_WIPE_MODE),
; 5387 : 				CB_GETITEMDATA, 
; 5388 : 				SendMessage (GetDlgItem (hCurPage, IDC_WIPE_MODE), CB_GETCURSEL, 0, 0),
; 5389 : 				0);

  0529c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  052a2	6a 00		 push	 0
  052a4	6a 00		 push	 0
  052a6	6a 00		 push	 0
  052a8	68 47 01 00 00	 push	 327			; 00000147H
  052ad	68 3d 04 00 00	 push	 1085			; 0000043dH
  052b2	51		 push	 ecx
  052b3	ff d6		 call	 esi
  052b5	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  052bb	50		 push	 eax
  052bc	ff d3		 call	 ebx
  052be	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  052c4	50		 push	 eax
  052c5	68 50 01 00 00	 push	 336			; 00000150H
  052ca	68 3d 04 00 00	 push	 1085			; 0000043dH
  052cf	52		 push	 edx
  052d0	ff d6		 call	 esi
  052d2	50		 push	 eax
  052d3	ff d3		 call	 ebx
  052d5	a3 00 00 00 00	 mov	 DWORD PTR _nWipeMode, eax
  052da	e9 80 00 00 00	 jmp	 $LN707@PageDialog
$LN9@PageDialog:

; 5390 : 
; 5391 : 			return 1;
; 5392 : 		}
; 5393 : 
; 5394 : 		if (nCurPageNo == DEVICE_WIPE_PAGE)

  052df	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  052e2	75 23		 jne	 SHORT $LN5@PageDialog

; 5395 : 		{
; 5396 : 			switch (lw)

  052e4	b8 f8 03 00 00	 mov	 eax, 1016		; 000003f8H
  052e9	66 3b f8	 cmp	 di, ax
  052ec	75 19		 jne	 SHORT $LN5@PageDialog

; 5397 : 			{
; 5398 : 			case IDC_ABORT_BUTTON:
; 5399 : 
; 5400 : 				if (AskWarnNoYes ("CONFIRM_WIPE_ABORT") == IDYES)

  052ee	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EJEDNFIG@CONFIRM_WIPE_ABORT?$AA@
  052f3	e8 00 00 00 00	 call	 _AskWarnNoYes
  052f8	83 c4 04	 add	 esp, 4
  052fb	83 f8 06	 cmp	 eax, 6
  052fe	75 5f		 jne	 SHORT $LN707@PageDialog

; 5401 : 					WipeAbort();

  05300	e8 00 00 00 00	 call	 _WipeAbort

; 5402 : 
; 5403 : 				return 1;

  05305	eb 58		 jmp	 SHORT $LN707@PageDialog
$LN5@PageDialog:

; 5404 : 			}
; 5405 : 		}
; 5406 : 
; 5407 : 		if (lw == IDC_NO_HISTORY)

  05307	b9 f4 03 00 00	 mov	 ecx, 1012		; 000003f4H
  0530c	66 3b f9	 cmp	 di, cx
  0530f	0f 85 7d b4 ff
	ff		 jne	 $LN451@PageDialog

; 5408 : 		{
; 5409 : 			if (!(bHistory = !IsButtonChecked (GetDlgItem (hCurPage, IDC_NO_HISTORY))))

  05315	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  0531b	51		 push	 ecx
  0531c	52		 push	 edx
  0531d	ff d6		 call	 esi
  0531f	50		 push	 eax
  05320	e8 00 00 00 00	 call	 _IsButtonChecked
  05325	83 c4 04	 add	 esp, 4
  05328	f7 d8		 neg	 eax
  0532a	1b c0		 sbb	 eax, eax
  0532c	83 c0 01	 add	 eax, 1
  0532f	a3 00 00 00 00	 mov	 DWORD PTR _bHistory, eax
  05334	75 29		 jne	 SHORT $LN707@PageDialog

; 5410 : 				ClearHistory (GetDlgItem (hCurPage, IDC_COMBO_BOX));

  05336	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0533b	68 ea 03 00 00	 push	 1002			; 000003eaH
  05340	50		 push	 eax
  05341	ff d6		 call	 esi
  05343	50		 push	 eax
  05344	e8 00 00 00 00	 call	 _ClearHistory

; 5411 : 
; 5412 : 			return 1;

  05349	eb 11		 jmp	 SHORT $LN723@PageDialog
$LN437@PageDialog:

; 3306 : 
; 3307 : 	hCurPage = hwndDlg;
; 3308 : 
; 3309 : 	switch (uMsg)

  0534b	3d 31 81 00 00	 cmp	 eax, 33073		; 00008131H

; 5413 : 		}
; 5414 : 
; 5415 : 		return 0;
; 5416 : 	}
; 5417 : 
; 5418 : 	return 0;

  05350	0f 85 3c b4 ff
	ff		 jne	 $LN451@PageDialog
  05356	53		 push	 ebx
  05357	e8 00 00 00 00	 call	 _AfterSysEncProgressWMInitTasks
$LN723@PageDialog:

; 4677 : 
; 4678 : 	case TC_APPMSG_PERFORM_POST_SYSENC_WMINIT_TASKS:
; 4679 : 		AfterSysEncProgressWMInitTasks (hwndDlg);

  0535c	83 c4 04	 add	 esp, 4
$LN707@PageDialog:

; 4680 : 		return 1;

  0535f	b8 01 00 00 00	 mov	 eax, 1
$LN342@PageDialog:

; 5419 : }

  05364	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  05367	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0536e	59		 pop	 ecx
  0536f	5f		 pop	 edi
  05370	5e		 pop	 esi
  05371	5b		 pop	 ebx
  05372	8b 8d 90 12 01
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  05378	33 cd		 xor	 ecx, ebp
  0537a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0537f	81 c5 94 12 01
	00		 add	 ebp, 70292		; 00011294H
  05385	8b e5		 mov	 esp, ebp
  05387	5d		 pop	 ebp
  05388	c2 10 00	 ret	 16			; 00000010H
  0538b	90		 npad	 1
$LN738@PageDialog:
  0538c	00 00 00 00	 DD	 $LN336@PageDialog
  05390	00 00 00 00	 DD	 $LN335@PageDialog
  05394	00 00 00 00	 DD	 $LN334@PageDialog
  05398	00 00 00 00	 DD	 $LN333@PageDialog
  0539c	00 00 00 00	 DD	 $LN332@PageDialog
  053a0	00 00 00 00	 DD	 $LN331@PageDialog
  053a4	00 00 00 00	 DD	 $LN324@PageDialog
  053a8	00 00 00 00	 DD	 $LN323@PageDialog
  053ac	00 00 00 00	 DD	 $LN322@PageDialog
  053b0	00 00 00 00	 DD	 $LN317@PageDialog
  053b4	00 00 00 00	 DD	 $LN316@PageDialog
  053b8	00 00 00 00	 DD	 $LN315@PageDialog
  053bc	00 00 00 00	 DD	 $LN314@PageDialog
  053c0	00 00 00 00	 DD	 $LN313@PageDialog
  053c4	00 00 00 00	 DD	 $LN312@PageDialog
  053c8	00 00 00 00	 DD	 $LN307@PageDialog
  053cc	00 00 00 00	 DD	 $LN304@PageDialog
  053d0	00 00 00 00	 DD	 $LN301@PageDialog
  053d4	00 00 00 00	 DD	 $LN296@PageDialog
  053d8	00 00 00 00	 DD	 $LN283@PageDialog
  053dc	00 00 00 00	 DD	 $LN265@PageDialog
  053e0	00 00 00 00	 DD	 $LN262@PageDialog
  053e4	00 00 00 00	 DD	 $LN247@PageDialog
  053e8	00 00 00 00	 DD	 $LN243@PageDialog
  053ec	00 00 00 00	 DD	 $LN242@PageDialog
  053f0	00 00 00 00	 DD	 $LN241@PageDialog
  053f4	00 00 00 00	 DD	 $LN240@PageDialog
  053f8	00 00 00 00	 DD	 $LN235@PageDialog
  053fc	00 00 00 00	 DD	 $LN234@PageDialog
  05400	00 00 00 00	 DD	 $LN232@PageDialog
  05404	00 00 00 00	 DD	 $LN228@PageDialog
  05408	00 00 00 00	 DD	 $LN227@PageDialog
  0540c	00 00 00 00	 DD	 $LN265@PageDialog
  05410	00 00 00 00	 DD	 $LN221@PageDialog
  05414	00 00 00 00	 DD	 $LN243@PageDialog
  05418	00 00 00 00	 DD	 $LN234@PageDialog
  0541c	00 00 00 00	 DD	 $LN214@PageDialog
  05420	00 00 00 00	 DD	 $LN211@PageDialog
  05424	00 00 00 00	 DD	 $LN210@PageDialog
  05428	00 00 00 00	 DD	 $LN182@PageDialog
  0542c	00 00 00 00	 DD	 $LN173@PageDialog
  05430	00 00 00 00	 DD	 $LN170@PageDialog
  05434	00 00 00 00	 DD	 $LN169@PageDialog
  05438	00 00 00 00	 DD	 $LN165@PageDialog
$LN739@PageDialog:
  0543c	00 00 00 00	 DD	 $LN156@PageDialog
  05440	00 00 00 00	 DD	 $LN155@PageDialog
  05444	00 00 00 00	 DD	 $LN154@PageDialog
  05448	00 00 00 00	 DD	 $LN152@PageDialog
  0544c	00 00 00 00	 DD	 $LN153@PageDialog
  05450	00 00 00 00	 DD	 $LN145@PageDialog
$LN619@PageDialog:
  05454	00		 DB	 0
  05455	01		 DB	 1
  05456	02		 DB	 2
  05457	05		 DB	 5
  05458	05		 DB	 5
  05459	05		 DB	 5
  0545a	05		 DB	 5
  0545b	05		 DB	 5
  0545c	05		 DB	 5
  0545d	05		 DB	 5
  0545e	05		 DB	 5
  0545f	05		 DB	 5
  05460	03		 DB	 3
  05461	05		 DB	 5
  05462	04		 DB	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_PageDialogProc@16$7:
  00000	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _$S1$133542[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__unwindfunclet$_PageDialogProc@16$8:
  0000b	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _s$133769[ebp]
  00011	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
__unwindfunclet$_PageDialogProc@16$10:
  00016	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T165850[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$_PageDialogProc@16:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 8a 28 fc ff
	ff		 mov	 ecx, DWORD PTR [edx-984]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	8b 8a 9c 12 01
	00		 mov	 ecx, DWORD PTR [edx+70300]
  0003b	33 c8		 xor	 ecx, eax
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_PageDialogProc@16
  00047	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_PageDialogProc@16 ENDP
PUBLIC	?construct@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU3@@Z ; std::allocator<HostDevice>::construct
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU3@@Z PROC ; std::allocator<HostDevice>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00008	50		 push	 eax
  00009	51		 push	 ecx
  0000a	e8 00 00 00 00	 call	 ??$_Construct@UHostDevice@@U1@@std@@YAXPAUHostDevice@@ABU1@@Z ; std::_Construct<HostDevice,HostDevice>
  0000f	83 c4 08	 add	 esp, 8

; 156  : 		}

  00012	c2 08 00	 ret	 8
?construct@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU3@@Z ENDP ; std::allocator<HostDevice>::construct
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3
__unwindtable$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T166221 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Vptr$166227 = 8					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

  0002b	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 128  : 
; 129  : 	_TRY_BEGIN

  0002e	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00031	33 db		 xor	 ebx, ebx
  00033	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL6@Uninit_cop@2:

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

  00040	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  00043	74 55		 je	 SHORT $LN4@Uninit_cop@2

; 131  : 		_Al.construct(_Dest, *_First);

  00045	89 75 08	 mov	 DWORD PTR __Vptr$166227[ebp], esi
  00048	89 75 e8	 mov	 DWORD PTR $T166221[ebp], esi
  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004f	3b f3		 cmp	 esi, ebx
  00051	74 08		 je	 SHORT $LN18@Uninit_cop@2
  00053	57		 push	 edi
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN18@Uninit_cop@2:
  0005b	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00061	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00064	89 75 10	 mov	 DWORD PTR __Dest$[ebp], esi
  00067	81 c7 88 00 00
	00		 add	 edi, 136		; 00000088H
  0006d	eb d1		 jmp	 SHORT $LL6@Uninit_cop@2
__catch$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

  0006f	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00072	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00075	3b f7		 cmp	 esi, edi
  00077	74 18		 je	 SHORT $LN1@Uninit_cop@2
  00079	8d a4 24 00 00
	00 00		 npad	 7
$LL3@Uninit_cop@2:

; 134  : 		_Al.destroy(_Next);

  00080	8b ce		 mov	 ecx, esi
  00082	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00087	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  0008d	3b f7		 cmp	 esi, edi
  0008f	75 ef		 jne	 SHORT $LL3@Uninit_cop@2
$LN1@Uninit_cop@2:

; 135  : 	_RERAISE;

  00091	33 db		 xor	 ebx, ebx
  00093	53		 push	 ebx
  00094	53		 push	 ebx
  00095	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Uninit_cop@2:

; 136  : 	_CATCH_END
; 137  : 	return (_Dest);

  0009a	8b c6		 mov	 eax, esi

; 138  : 	}

  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
$LN35@Uninit_cop@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Vptr$166227[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T166221[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >
PUBLIC	??_C@_0BN@GMGGDPEP@HIDDEN_OS_PRE_CIPHER_WARNING?$AA@ ; `string'
PUBLIC	??_C@_0BI@DFBMOJJF@PASSWORD_HIDDEN_OS_NOTE?$AA@	; `string'
PUBLIC	__$ArrayPad$
EXTRN	_CheckCapsLock:PROC
EXTRN	__imp__MoveWindow@24:PROC
EXTRN	__imp__MapDialogRect@8:PROC
EXTRN	__imp__CreateDialogParamW@20:PROC
EXTRN	__imp__GetWindowRect@8:PROC
EXTRN	_bHyperLinkBeingTracked:DWORD
EXTRN	__imp__DestroyWindow@4:PROC
;	COMDAT ??_C@_0BN@GMGGDPEP@HIDDEN_OS_PRE_CIPHER_WARNING?$AA@
; File c:\users\public\desktop\projects\ciphershed\src\format\tcformat.c
CONST	SEGMENT
??_C@_0BN@GMGGDPEP@HIDDEN_OS_PRE_CIPHER_WARNING?$AA@ DB 'HIDDEN_OS_PRE_CI'
	DB	'PHER_WARNING', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DFBMOJJF@PASSWORD_HIDDEN_OS_NOTE?$AA@
CONST	SEGMENT
??_C@_0BI@DFBMOJJF@PASSWORD_HIDDEN_OS_NOTE?$AA@ DB 'PASSWORD_HIDDEN_OS_NO'
	DB	'TE', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _LoadPage
_TEXT	SEGMENT
_rD$ = -168						; size = 16
_rW$ = -152						; size = 16
_tmp$132631 = -136					; size = 130
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_nPageNo$ = 12						; size = 4
_LoadPage PROC						; COMDAT

; 2588 : {

  00000	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 a4 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+168], eax

; 2589 : 	RECT rD, rW;
; 2590 : 
; 2591 : 	nLastPageNo = nCurPageNo;

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00019	53		 push	 ebx
  0001a	55		 push	 ebp
  0001b	56		 push	 esi
  0001c	8b b4 24 b8 00
	00 00		 mov	 esi, DWORD PTR _hwndDlg$[esp+176]

; 2592 : 
; 2593 : 	if (hCurPage != NULL)

  00023	33 ed		 xor	 ebp, ebp
  00025	57		 push	 edi
  00026	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  0002b	39 2d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebp
  00031	74 60		 je	 SHORT $LN62@LoadPage

; 2594 : 	{
; 2595 : 		// WARNING: nCurPageNo must be set to a non-existent ID here before wiping the password fields below in
; 2596 : 		// this function, etc. Otherwise, such actions (SetWindowText) would invoke the EN_CHANGE handlers, which 
; 2597 : 		// would, if keyfiles were applied, e.g. use strlen() on a buffer full of random data, in most cases 
; 2598 : 		// not null-terminated.
; 2599 : 		nCurPageNo = -1;

  00033	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo

; 2600 : 
; 2601 : 
; 2602 : 		// Place here any actions that need to be performed at the latest possible time when leaving a wizard page
; 2603 : 		// (i.e. right before "destroying" the page). Also, code that needs to be executed both on IDC_NEXT and
; 2604 : 		// on IDC_PREV can be placed here so as to avoid code doubling. 
; 2605 : 
; 2606 : 		switch (nLastPageNo)

  0003d	83 f8 15	 cmp	 eax, 21			; 00000015H
  00040	75 3f		 jne	 SHORT $LN50@LoadPage

; 2607 : 		{
; 2608 : 		case PASSWORD_PAGE:
; 2609 : 			{
; 2610 : 				WCHAR tmp[MAX_PASSWORD+1];
; 2611 : 
; 2612 : 				// Attempt to wipe passwords stored in the input field buffers. This is performed here (and 
; 2613 : 				// not in the IDC_PREV or IDC_NEXT sections) in order to prevent certain race conditions
; 2614 : 				// when keyfiles are used.
; 2615 : 				memset (tmp, 0x20, sizeof(tmp)); //0x20 = ASCII space or 0x2020 = Unicode DAGGER

  00042	68 82 00 00 00	 push	 130			; 00000082H
  00047	8d 44 24 34	 lea	 eax, DWORD PTR _tmp$132631[esp+188]
  0004b	6a 20		 push	 32			; 00000020H
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _memset

; 2616 : 				tmp [MAX_PASSWORD] = 0;
; 2617 : 				SetWindowTextW(hPasswordInputField, tmp);

  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  00058	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00061	8d 54 24 30	 lea	 edx, DWORD PTR _tmp$132631[esp+184]
  00065	52		 push	 edx
  00066	33 c9		 xor	 ecx, ecx
  00068	50		 push	 eax
  00069	66 89 8c 24 b8
	00 00 00	 mov	 WORD PTR _tmp$132631[esp+320], cx
  00071	ff d7		 call	 edi

; 2618 : 				SetWindowTextW(hVerifyPasswordInputField, tmp);

  00073	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  00079	8d 4c 24 30	 lea	 ecx, DWORD PTR _tmp$132631[esp+184]
  0007d	51		 push	 ecx
  0007e	52		 push	 edx
  0007f	ff d7		 call	 edi
$LN50@LoadPage:

; 2619 : 			}
; 2620 : 			break;
; 2621 : 		}
; 2622 : 
; 2623 : 		DestroyWindow (hCurPage);

  00081	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00086	50		 push	 eax
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4

; 2624 : 		hCurPage = NULL;

  0008d	89 2d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebp
$LN62@LoadPage:

; 2625 : 	}
; 2626 : 
; 2627 : 	// This prevents the mouse pointer from remaining as the "hand" cursor when the user presses Enter
; 2628 : 	// while hovering over a hyperlink.
; 2629 : 	bHyperLinkBeingTracked = FALSE;

  00093	89 2d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebp

; 2630 : 	NormalCursor();

  00099	e8 00 00 00 00	 call	 _NormalCursor

; 2631 : 
; 2632 : 	GetWindowRect (GetDlgItem (hwndDlg, IDC_POS_BOX), &rW);

  0009e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  000a4	8d 4c 24 20	 lea	 ecx, DWORD PTR _rW$[esp+184]
  000a8	51		 push	 ecx
  000a9	68 23 04 00 00	 push	 1059			; 00000423H
  000ae	56		 push	 esi
  000af	ff d7		 call	 edi
  000b1	50		 push	 eax
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 2633 : 
; 2634 : 
; 2635 : 	nCurPageNo = nPageNo;

  000b8	8b 9c 24 c0 00
	00 00		 mov	 ebx, DWORD PTR _nPageNo$[esp+180]
  000bf	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nCurPageNo@@3HA, ebx ; nCurPageNo

; 2636 : 
; 2637 : 
; 2638 : 	switch (nPageNo)

  000c5	83 fb 2b	 cmp	 ebx, 43			; 0000002bH
  000c8	0f 87 93 02 00
	00		 ja	 $LN47@LoadPage
  000ce	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR $LN66@LoadPage[ebx*4]
$LN46@LoadPage:

; 2639 : 	{
; 2640 : 	case INTRO_PAGE:
; 2641 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INTRO_PAGE_DLG), hwndDlg,
; 2642 : 					 (DLGPROC) PageDialogProc);

  000d5	55		 push	 ebp
  000d6	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  000db	56		 push	 esi
  000dc	6a 6b		 push	 107			; 0000006bH

; 2643 : 		break;

  000de	e9 6c 02 00 00	 jmp	 $LN63@LoadPage
$LN45@LoadPage:

; 2644 : 
; 2645 : 	case SYSENC_TYPE_PAGE:
; 2646 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_SYSENC_TYPE_PAGE_DLG), hwndDlg,
; 2647 : 					 (DLGPROC) PageDialogProc);

  000e3	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  000e8	55		 push	 ebp
  000e9	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  000ee	56		 push	 esi
  000ef	6a 7e		 push	 126			; 0000007eH
  000f1	50		 push	 eax

; 2648 : 		break;

  000f2	e9 5f 02 00 00	 jmp	 $LN64@LoadPage
$LN44@LoadPage:

; 2649 : 
; 2650 : 	case SYSENC_HIDDEN_OS_REQ_CHECK_PAGE:
; 2651 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_SYSENC_HIDDEN_OS_REQ_CHECK_PAGE_DLG), hwndDlg,
; 2652 : 					 (DLGPROC) PageDialogProc);

  000f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  000fd	55		 push	 ebp
  000fe	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00103	56		 push	 esi
  00104	6a 7f		 push	 127			; 0000007fH
  00106	51		 push	 ecx

; 2653 : 		break;

  00107	e9 4a 02 00 00	 jmp	 $LN64@LoadPage
$LN43@LoadPage:

; 2654 : 
; 2655 : 	case SYSENC_SPAN_PAGE:
; 2656 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_SYSENC_SPAN_PAGE_DLG), hwndDlg,
; 2657 : 					 (DLGPROC) PageDialogProc);

  0010c	55		 push	 ebp
  0010d	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00112	56		 push	 esi
  00113	6a 73		 push	 115			; 00000073H

; 2658 : 		break;

  00115	e9 35 02 00 00	 jmp	 $LN63@LoadPage
$LN42@LoadPage:

; 2659 : 
; 2660 : 	case SYSENC_PRE_DRIVE_ANALYSIS_PAGE:
; 2661 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_UNIVERSAL_DUAL_CHOICE_PAGE_DLG), hwndDlg,
; 2662 : 					 (DLGPROC) PageDialogProc);

  0011a	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  0011f	55		 push	 ebp
  00120	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00125	56		 push	 esi
  00126	6a 7c		 push	 124			; 0000007cH
  00128	50		 push	 eax

; 2663 : 		break;

  00129	e9 28 02 00 00	 jmp	 $LN64@LoadPage
$LN41@LoadPage:

; 2664 : 
; 2665 : 	case SYSENC_DRIVE_ANALYSIS_PAGE:
; 2666 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_SYSENC_DRIVE_ANALYSIS_PAGE_DLG), hwndDlg,
; 2667 : 					 (DLGPROC) PageDialogProc);

  0012e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00134	55		 push	 ebp
  00135	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0013a	56		 push	 esi
  0013b	6a 7d		 push	 125			; 0000007dH
  0013d	51		 push	 ecx

; 2668 : 		break;

  0013e	e9 13 02 00 00	 jmp	 $LN64@LoadPage
$LN40@LoadPage:

; 2669 : 
; 2670 : 	case SYSENC_MULTI_BOOT_MODE_PAGE:
; 2671 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_SYSENC_MULTI_BOOT_MODE_PAGE_DLG), hwndDlg,
; 2672 : 					 (DLGPROC) PageDialogProc);

  00143	55		 push	 ebp
  00144	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00149	56		 push	 esi
  0014a	6a 77		 push	 119			; 00000077H

; 2673 : 		break;

  0014c	e9 fe 01 00 00	 jmp	 $LN63@LoadPage
$LN38@LoadPage:

; 2674 : 
; 2675 : 	case SYSENC_MULTI_BOOT_SYS_EQ_BOOT_PAGE:
; 2676 : 	case SYSENC_MULTI_BOOT_NBR_SYS_DRIVES_PAGE:
; 2677 : 	case SYSENC_MULTI_BOOT_ADJACENT_SYS_PAGE:
; 2678 : 	case SYSENC_MULTI_BOOT_NONWIN_BOOT_LOADER_PAGE:
; 2679 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_UNIVERSAL_DUAL_CHOICE_PAGE_DLG), hwndDlg,
; 2680 : 					 (DLGPROC) PageDialogProc);
; 2681 : 		break;
; 2682 : 
; 2683 : 	case SYSENC_MULTI_BOOT_OUTCOME_PAGE:
; 2684 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INFO_PAGE_DLG), hwndDlg,
; 2685 : 					 (DLGPROC) PageDialogProc);

  00151	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00157	55		 push	 ebp
  00158	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0015d	56		 push	 esi
  0015e	6a 6c		 push	 108			; 0000006cH
  00160	51		 push	 ecx

; 2686 : 		break;

  00161	e9 f0 01 00 00	 jmp	 $LN64@LoadPage
$LN37@LoadPage:

; 2687 : 
; 2688 : 	case VOLUME_TYPE_PAGE:
; 2689 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_VOLUME_TYPE_PAGE_DLG), hwndDlg,
; 2690 : 					 (DLGPROC) PageDialogProc);

  00166	55		 push	 ebp
  00167	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0016c	56		 push	 esi
  0016d	6a 71		 push	 113			; 00000071H

; 2691 : 		break;

  0016f	e9 db 01 00 00	 jmp	 $LN63@LoadPage
$LN36@LoadPage:

; 2692 : 
; 2693 : 	case HIDDEN_VOL_WIZARD_MODE_PAGE:
; 2694 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_HIDDEN_VOL_WIZARD_MODE_PAGE_DLG), hwndDlg,
; 2695 : 					 (DLGPROC) PageDialogProc);

  00174	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  00179	55		 push	 ebp
  0017a	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0017f	56		 push	 esi
  00180	6a 6e		 push	 110			; 0000006eH
  00182	50		 push	 eax

; 2696 : 		break;

  00183	e9 ce 01 00 00	 jmp	 $LN64@LoadPage
$LN35@LoadPage:

; 2697 : 
; 2698 : 	case VOLUME_LOCATION_PAGE:
; 2699 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_VOLUME_LOCATION_PAGE_DLG), hwndDlg,
; 2700 : 					 (DLGPROC) PageDialogProc);

  00188	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  0018e	55		 push	 ebp
  0018f	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00194	56		 push	 esi
  00195	6a 69		 push	 105			; 00000069H
  00197	51		 push	 ecx
  00198	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20

; 2701 : 
; 2702 : 		EnableWindow (GetDlgItem(hCurPage, IDC_NO_HISTORY), !bHistoryCmdLine);

  0019e	33 d2		 xor	 edx, edx
  001a0	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?bHistoryCmdLine@@3HA, ebp ; bHistoryCmdLine
  001a6	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  001ab	0f 94 c2	 sete	 dl
  001ae	52		 push	 edx
  001af	68 f4 03 00 00	 push	 1012			; 000003f4H
  001b4	50		 push	 eax
  001b5	ff d7		 call	 edi
  001b7	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__EnableWindow@8
  001bd	50		 push	 eax
  001be	ff d3		 call	 ebx

; 2703 : 
; 2704 : 		EnableWindow (GetDlgItem (hwndDlg, IDC_NEXT), 
; 2705 : 			GetWindowTextLengthA(GetDlgItem (hCurPage, IDC_COMBO_BOX)) > 0);

  001c0	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  001c5	68 ea 03 00 00	 push	 1002			; 000003eaH
  001ca	50		 push	 eax
  001cb	ff d7		 call	 edi
  001cd	50		 push	 eax
  001ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextLengthA@4
  001d4	33 c9		 xor	 ecx, ecx
  001d6	85 c0		 test	 eax, eax
  001d8	0f 9f c1	 setg	 cl
  001db	51		 push	 ecx
  001dc	68 10 04 00 00	 push	 1040			; 00000410H
  001e1	56		 push	 esi
  001e2	ff d7		 call	 edi
  001e4	50		 push	 eax
  001e5	ff d3		 call	 ebx

; 2706 : 
; 2707 : 		break;

  001e7	8b 9c 24 c0 00
	00 00		 mov	 ebx, DWORD PTR _nPageNo$[esp+180]
  001ee	e9 6e 01 00 00	 jmp	 $LN47@LoadPage
$LN34@LoadPage:

; 2708 : 
; 2709 : 	case DEVICE_TRANSFORM_MODE_PAGE:
; 2710 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_DEVICE_TRANSFORM_MODE_DLG), hwndDlg,
; 2711 : 					 (DLGPROC) PageDialogProc);

  001f3	55		 push	 ebp
  001f4	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  001f9	56		 push	 esi
  001fa	68 82 00 00 00	 push	 130			; 00000082H

; 2712 : 		break;

  001ff	e9 4b 01 00 00	 jmp	 $LN63@LoadPage
$LN33@LoadPage:

; 2713 : 	case HIDDEN_VOL_HOST_PRE_CIPHER_PAGE:
; 2714 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INFO_PAGE_DLG), hwndDlg,
; 2715 : 					 (DLGPROC) PageDialogProc);

  00204	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  00209	55		 push	 ebp
  0020a	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0020f	56		 push	 esi
  00210	6a 6c		 push	 108			; 0000006cH
  00212	50		 push	 eax

; 2716 : 		break;

  00213	e9 3e 01 00 00	 jmp	 $LN64@LoadPage
$LN31@LoadPage:

; 2717 : 	case HIDDEN_VOL_PRE_CIPHER_PAGE:
; 2718 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INFO_PAGE_DLG), hwndDlg,
; 2719 : 					 (DLGPROC) PageDialogProc);
; 2720 : 		break;
; 2721 : 	case CIPHER_PAGE:
; 2722 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_CIPHER_PAGE_DLG), hwndDlg,
; 2723 : 					 (DLGPROC) PageDialogProc);

  00218	55		 push	 ebp
  00219	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0021e	56		 push	 esi
  0021f	6a 66		 push	 102			; 00000066H

; 2724 : 		break;

  00221	e9 29 01 00 00	 jmp	 $LN63@LoadPage
$LN30@LoadPage:

; 2725 : 	case SIZE_PAGE:
; 2726 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_SIZE_PAGE_DLG), hwndDlg,
; 2727 : 					 (DLGPROC) PageDialogProc);

  00226	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  0022b	55		 push	 ebp
  0022c	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00231	56		 push	 esi
  00232	6a 67		 push	 103			; 00000067H
  00234	50		 push	 eax

; 2728 : 		break;

  00235	e9 1c 01 00 00	 jmp	 $LN64@LoadPage
$LN29@LoadPage:

; 2729 : 	case HIDDEN_VOL_HOST_PASSWORD_PAGE:
; 2730 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_PASSWORD_ENTRY_PAGE_DLG), hwndDlg,
; 2731 : 					 (DLGPROC) PageDialogProc);

  0023a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00240	55		 push	 ebp
  00241	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00246	56		 push	 esi
  00247	6a 6f		 push	 111			; 0000006fH
  00249	51		 push	 ecx

; 2732 : 		break;

  0024a	e9 07 01 00 00	 jmp	 $LN64@LoadPage
$LN28@LoadPage:

; 2733 : 	case PASSWORD_PAGE:
; 2734 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_PASSWORD_PAGE_DLG), hwndDlg,
; 2735 : 					 (DLGPROC) PageDialogProc);

  0024f	55		 push	 ebp
  00250	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00255	56		 push	 esi
  00256	6a 68		 push	 104			; 00000068H

; 2736 : 		break;

  00258	e9 f2 00 00 00	 jmp	 $LN63@LoadPage
$LN26@LoadPage:

; 2737 : 	case FILESYS_PAGE:
; 2738 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_UNIVERSAL_DUAL_CHOICE_PAGE_DLG), hwndDlg,
; 2739 : 					 (DLGPROC) PageDialogProc);
; 2740 : 		break;
; 2741 : 	case SYSENC_COLLECTING_RANDOM_DATA_PAGE:
; 2742 : 	case NONSYS_INPLACE_ENC_RAND_DATA_PAGE:
; 2743 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_SYSENC_COLLECTING_RANDOM_DATA_DLG), hwndDlg,
; 2744 : 					 (DLGPROC) PageDialogProc);

  0025d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00263	55		 push	 ebp
  00264	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00269	56		 push	 esi
  0026a	6a 76		 push	 118			; 00000076H
  0026c	51		 push	 ecx

; 2745 : 		break;

  0026d	e9 e4 00 00 00	 jmp	 $LN64@LoadPage
$LN25@LoadPage:

; 2746 : 	case SYSENC_KEYS_GEN_PAGE:
; 2747 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_SYSENC_KEYS_GEN_PAGE_DLG), hwndDlg,
; 2748 : 					 (DLGPROC) PageDialogProc);

  00272	55		 push	 ebp
  00273	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00278	56		 push	 esi
  00279	6a 7b		 push	 123			; 0000007bH

; 2749 : 		break;

  0027b	e9 cf 00 00 00	 jmp	 $LN63@LoadPage
$LN24@LoadPage:

; 2750 : 	case SYSENC_RESCUE_DISK_CREATION_PAGE:
; 2751 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_SYSENC_RESCUE_DISK_CREATION_DLG), hwndDlg,
; 2752 : 					 (DLGPROC) PageDialogProc);

  00280	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  00285	55		 push	 ebp
  00286	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0028b	56		 push	 esi
  0028c	6a 75		 push	 117			; 00000075H
  0028e	50		 push	 eax

; 2753 : 		break;

  0028f	e9 c2 00 00 00	 jmp	 $LN64@LoadPage
$LN23@LoadPage:

; 2754 : 	case SYSENC_RESCUE_DISK_BURN_PAGE:
; 2755 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_SYSENC_RESCUE_DISK_BURN_PAGE_DLG), hwndDlg,
; 2756 : 			(DLGPROC) PageDialogProc);

  00294	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  0029a	55		 push	 ebp
  0029b	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  002a0	56		 push	 esi
  002a1	6a 78		 push	 120			; 00000078H
  002a3	51		 push	 ecx

; 2757 : 		break;

  002a4	e9 ad 00 00 00	 jmp	 $LN64@LoadPage
$LN22@LoadPage:

; 2758 : 	case SYSENC_RESCUE_DISK_VERIFIED_PAGE:
; 2759 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INFO_PAGE_DLG), hwndDlg,
; 2760 : 					 (DLGPROC) PageDialogProc);

  002a9	55		 push	 ebp
  002aa	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  002af	56		 push	 esi
  002b0	6a 6c		 push	 108			; 0000006cH

; 2761 : 		break;

  002b2	e9 98 00 00 00	 jmp	 $LN63@LoadPage
$LN21@LoadPage:

; 2762 : 	case SYSENC_WIPE_MODE_PAGE:
; 2763 : 	case NONSYS_INPLACE_ENC_WIPE_MODE_PAGE:
; 2764 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_SYSENC_WIPE_MODE_PAGE_DLG), hwndDlg,
; 2765 : 			(DLGPROC) PageDialogProc);

  002b7	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  002bc	55		 push	 ebp
  002bd	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  002c2	56		 push	 esi
  002c3	6a 79		 push	 121			; 00000079H
  002c5	50		 push	 eax

; 2766 : 		break;

  002c6	e9 8b 00 00 00	 jmp	 $LN64@LoadPage
$LN18@LoadPage:

; 2767 : 	case SYSENC_PRETEST_INFO_PAGE:
; 2768 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INFO_PAGE_DLG), hwndDlg,
; 2769 : 					 (DLGPROC) PageDialogProc);
; 2770 : 		break;
; 2771 : 	case SYSENC_PRETEST_RESULT_PAGE:
; 2772 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INFO_PAGE_DLG), hwndDlg,
; 2773 : 					 (DLGPROC) PageDialogProc);
; 2774 : 		break;
; 2775 : 	case SYSENC_ENCRYPTION_PAGE:
; 2776 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INPLACE_ENCRYPTION_PAGE_DLG), hwndDlg,
; 2777 : 			(DLGPROC) PageDialogProc);

  002cb	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  002d0	55		 push	 ebp
  002d1	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  002d6	56		 push	 esi
  002d7	6a 7a		 push	 122			; 0000007aH
  002d9	50		 push	 eax

; 2778 : 		break;

  002da	eb 7a		 jmp	 SHORT $LN64@LoadPage
$LN16@LoadPage:

; 2779 : 
; 2780 : 	case NONSYS_INPLACE_ENC_RESUME_PASSWORD_PAGE:
; 2781 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_PASSWORD_ENTRY_PAGE_DLG), hwndDlg,
; 2782 : 			(DLGPROC) PageDialogProc);
; 2783 : 		break;
; 2784 : 
; 2785 : 	case NONSYS_INPLACE_ENC_RESUME_PARTITION_SEL_PAGE:
; 2786 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_EXPANDED_LIST_SELECT_PAGE_DLG), hwndDlg,
; 2787 : 			(DLGPROC) PageDialogProc);

  002dc	55		 push	 ebp
  002dd	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  002e2	56		 push	 esi
  002e3	68 83 00 00 00	 push	 131			; 00000083H

; 2788 : 		break;

  002e8	eb 65		 jmp	 SHORT $LN63@LoadPage
$LN13@LoadPage:

; 2789 : 
; 2790 : 	case NONSYS_INPLACE_ENC_ENCRYPTION_PAGE:
; 2791 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INPLACE_ENCRYPTION_PAGE_DLG), hwndDlg,
; 2792 : 			(DLGPROC) PageDialogProc);
; 2793 : 		break;
; 2794 : 
; 2795 : 	case NONSYS_INPLACE_ENC_ENCRYPTION_FINISHED_PAGE:
; 2796 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INFO_PAGE_DLG), hwndDlg,
; 2797 : 					 (DLGPROC) PageDialogProc);
; 2798 : 		break;
; 2799 : 
; 2800 : 	case FORMAT_PAGE:
; 2801 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_FORMAT_PAGE_DLG), hwndDlg,
; 2802 : 					 (DLGPROC) PageDialogProc);

  002ea	55		 push	 ebp
  002eb	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  002f0	56		 push	 esi
  002f1	6a 6a		 push	 106			; 0000006aH

; 2803 : 		break;

  002f3	eb 5a		 jmp	 SHORT $LN63@LoadPage
$LN12@LoadPage:

; 2804 : 	case FORMAT_FINISHED_PAGE:
; 2805 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW ((bHiddenVol && !bHiddenVolHost && !bHiddenVolFinished) ? IDD_HIDVOL_HOST_FILL_PAGE_DLG : IDD_INFO_PAGE_DLG), hwndDlg,
; 2806 : 					 (DLGPROC) PageDialogProc);

  002f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  002fa	85 c0		 test	 eax, eax
  002fc	74 17		 je	 SHORT $LN55@LoadPage
  002fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  00304	85 c9		 test	 ecx, ecx
  00306	75 0d		 jne	 SHORT $LN55@LoadPage
  00308	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVolFinished@@3HC ; bHiddenVolFinished
  0030e	8d 41 6d	 lea	 eax, DWORD PTR [ecx+109]
  00311	85 d2		 test	 edx, edx
  00313	74 05		 je	 SHORT $LN56@LoadPage
$LN55@LoadPage:
  00315	b8 6c 00 00 00	 mov	 eax, 108		; 0000006cH
$LN56@LoadPage:
  0031a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00320	55		 push	 ebp
  00321	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00326	0f b7 c0	 movzx	 eax, ax
  00329	56		 push	 esi
  0032a	50		 push	 eax
  0032b	51		 push	 ecx

; 2807 : 		break;

  0032c	eb 28		 jmp	 SHORT $LN64@LoadPage
$LN9@LoadPage:

; 2808 : 
; 2809 : 	case SYSENC_HIDDEN_OS_INITIAL_INFO_PAGE:
; 2810 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INFO_PAGE_DLG), hwndDlg, (DLGPROC) PageDialogProc);
; 2811 : 		break;
; 2812 : 
; 2813 : 	case SYSENC_HIDDEN_OS_WIPE_INFO_PAGE:
; 2814 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_INFO_PAGE_DLG), hwndDlg, (DLGPROC) PageDialogProc);
; 2815 : 		break;
; 2816 : 
; 2817 : 	case DEVICE_WIPE_MODE_PAGE:
; 2818 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_DEVICE_WIPE_MODE_PAGE_DLG), hwndDlg, (DLGPROC) PageDialogProc);

  0032e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00334	55		 push	 ebp
  00335	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0033a	56		 push	 esi
  0033b	68 81 00 00 00	 push	 129			; 00000081H
  00340	51		 push	 ecx

; 2819 : 		break;

  00341	eb 13		 jmp	 SHORT $LN64@LoadPage
$LN8@LoadPage:

; 2820 : 
; 2821 : 	case DEVICE_WIPE_PAGE:
; 2822 : 		hCurPage = CreateDialogW (hInst, MAKEINTRESOURCEW (IDD_DEVICE_WIPE_PAGE_DLG), hwndDlg, (DLGPROC) PageDialogProc);

  00343	55		 push	 ebp
  00344	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00349	56		 push	 esi
  0034a	68 80 00 00 00	 push	 128			; 00000080H
$LN63@LoadPage:
  0034f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  00355	52		 push	 edx
$LN64@LoadPage:
  00356	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  0035c	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
$LN47@LoadPage:

; 2823 : 		break;
; 2824 : 	}
; 2825 : 
; 2826 : 	rD.left = 162;
; 2827 : 	rD.top = 25;
; 2828 : 	rD.right = 0;
; 2829 : 	rD.bottom = 0;
; 2830 : 	MapDialogRect (hwndDlg, &rD);

  00361	8d 44 24 10	 lea	 eax, DWORD PTR _rD$[esp+184]
  00365	50		 push	 eax
  00366	56		 push	 esi
  00367	c7 44 24 18 a2
	00 00 00	 mov	 DWORD PTR _rD$[esp+192], 162 ; 000000a2H
  0036f	c7 44 24 1c 19
	00 00 00	 mov	 DWORD PTR _rD$[esp+196], 25 ; 00000019H
  00377	89 6c 24 20	 mov	 DWORD PTR _rD$[esp+200], ebp
  0037b	89 6c 24 24	 mov	 DWORD PTR _rD$[esp+204], ebp
  0037f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8

; 2831 : 
; 2832 : 	if (hCurPage != NULL)

  00385	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0038a	3b c5		 cmp	 eax, ebp
  0038c	0f 84 81 00 00
	00		 je	 $LN1@LoadPage

; 2833 : 	{
; 2834 : 		MoveWindow (hCurPage, rD.left, rD.top, rW.right - rW.left, rW.bottom - rW.top, TRUE);

  00392	8b 4c 24 2c	 mov	 ecx, DWORD PTR _rW$[esp+196]
  00396	2b 4c 24 24	 sub	 ecx, DWORD PTR _rW$[esp+188]
  0039a	8b 54 24 28	 mov	 edx, DWORD PTR _rW$[esp+192]
  0039e	2b 54 24 20	 sub	 edx, DWORD PTR _rW$[esp+184]
  003a2	6a 01		 push	 1
  003a4	51		 push	 ecx
  003a5	8b 4c 24 1c	 mov	 ecx, DWORD PTR _rD$[esp+196]
  003a9	52		 push	 edx
  003aa	8b 54 24 1c	 mov	 edx, DWORD PTR _rD$[esp+196]
  003ae	51		 push	 ecx
  003af	52		 push	 edx
  003b0	50		 push	 eax
  003b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24

; 2835 : 		ShowWindow (hCurPage, SW_SHOWNORMAL);

  003b7	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  003bc	6a 01		 push	 1
  003be	50		 push	 eax
  003bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 2836 : 
; 2837 : 		// Place here any message boxes that need to be displayed as soon as a new page is displayed. This 
; 2838 : 		// ensures that the page is fully rendered (otherwise it would remain blank, until the message box
; 2839 : 		// is closed).
; 2840 : 		switch (nPageNo)

  003c5	83 fb 12	 cmp	 ebx, 18			; 00000012H
  003c8	74 1f		 je	 SHORT $LN2@LoadPage
  003ca	83 fb 15	 cmp	 ebx, 21			; 00000015H
  003cd	75 44		 jne	 SHORT $LN1@LoadPage

; 2841 : 		{
; 2842 : 		case PASSWORD_PAGE:
; 2843 : 
; 2844 : 			CheckCapsLock (hwndDlg, FALSE);

  003cf	55		 push	 ebp
  003d0	56		 push	 esi
  003d1	e8 00 00 00 00	 call	 _CheckCapsLock
  003d6	83 c4 08	 add	 esp, 8

; 2845 : 
; 2846 : 			if (CreatingHiddenSysVol())

  003d9	e8 00 00 00 00	 call	 _CreatingHiddenSysVol
  003de	85 c0		 test	 eax, eax
  003e0	74 31		 je	 SHORT $LN1@LoadPage

; 2847 : 				Warning ("PASSWORD_HIDDEN_OS_NOTE");

  003e2	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DFBMOJJF@PASSWORD_HIDDEN_OS_NOTE?$AA@

; 2848 : 
; 2849 : 			break;

  003e7	eb 22		 jmp	 SHORT $LN65@LoadPage
$LN2@LoadPage:

; 2850 : 
; 2851 : 		case CIPHER_PAGE:
; 2852 : 
; 2853 : 			if (CreatingHiddenSysVol())

  003e9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  003ef	85 c9		 test	 ecx, ecx
  003f1	74 20		 je	 SHORT $LN1@LoadPage
  003f3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  003f9	85 d2		 test	 edx, edx
  003fb	74 16		 je	 SHORT $LN1@LoadPage
  003fd	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  00402	85 c0		 test	 eax, eax
  00404	75 0d		 jne	 SHORT $LN1@LoadPage

; 2854 : 				Warning ("HIDDEN_OS_PRE_CIPHER_WARNING");

  00406	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GMGGDPEP@HIDDEN_OS_PRE_CIPHER_WARNING?$AA@
$LN65@LoadPage:
  0040b	e8 00 00 00 00	 call	 _Warning
  00410	83 c4 04	 add	 esp, 4
$LN1@LoadPage:

; 2855 : 
; 2856 : 			break;
; 2857 : 		}
; 2858 : 	}
; 2859 : }

  00413	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+184]
  0041a	5f		 pop	 edi
  0041b	5e		 pop	 esi
  0041c	5d		 pop	 ebp
  0041d	5b		 pop	 ebx
  0041e	33 cc		 xor	 ecx, esp
  00420	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00425	81 c4 a8 00 00
	00		 add	 esp, 168		; 000000a8H
  0042b	c3		 ret	 0
$LN66@LoadPage:
  0042c	00 00 00 00	 DD	 $LN46@LoadPage
  00430	00 00 00 00	 DD	 $LN45@LoadPage
  00434	00 00 00 00	 DD	 $LN44@LoadPage
  00438	00 00 00 00	 DD	 $LN43@LoadPage
  0043c	00 00 00 00	 DD	 $LN42@LoadPage
  00440	00 00 00 00	 DD	 $LN41@LoadPage
  00444	00 00 00 00	 DD	 $LN40@LoadPage
  00448	00 00 00 00	 DD	 $LN42@LoadPage
  0044c	00 00 00 00	 DD	 $LN42@LoadPage
  00450	00 00 00 00	 DD	 $LN42@LoadPage
  00454	00 00 00 00	 DD	 $LN42@LoadPage
  00458	00 00 00 00	 DD	 $LN38@LoadPage
  0045c	00 00 00 00	 DD	 $LN37@LoadPage
  00460	00 00 00 00	 DD	 $LN36@LoadPage
  00464	00 00 00 00	 DD	 $LN35@LoadPage
  00468	00 00 00 00	 DD	 $LN34@LoadPage
  0046c	00 00 00 00	 DD	 $LN33@LoadPage
  00470	00 00 00 00	 DD	 $LN38@LoadPage
  00474	00 00 00 00	 DD	 $LN31@LoadPage
  00478	00 00 00 00	 DD	 $LN30@LoadPage
  0047c	00 00 00 00	 DD	 $LN29@LoadPage
  00480	00 00 00 00	 DD	 $LN28@LoadPage
  00484	00 00 00 00	 DD	 $LN42@LoadPage
  00488	00 00 00 00	 DD	 $LN26@LoadPage
  0048c	00 00 00 00	 DD	 $LN25@LoadPage
  00490	00 00 00 00	 DD	 $LN24@LoadPage
  00494	00 00 00 00	 DD	 $LN23@LoadPage
  00498	00 00 00 00	 DD	 $LN22@LoadPage
  0049c	00 00 00 00	 DD	 $LN21@LoadPage
  004a0	00 00 00 00	 DD	 $LN38@LoadPage
  004a4	00 00 00 00	 DD	 $LN22@LoadPage
  004a8	00 00 00 00	 DD	 $LN18@LoadPage
  004ac	00 00 00 00	 DD	 $LN29@LoadPage
  004b0	00 00 00 00	 DD	 $LN16@LoadPage
  004b4	00 00 00 00	 DD	 $LN26@LoadPage
  004b8	00 00 00 00	 DD	 $LN21@LoadPage
  004bc	00 00 00 00	 DD	 $LN18@LoadPage
  004c0	00 00 00 00	 DD	 $LN38@LoadPage
  004c4	00 00 00 00	 DD	 $LN13@LoadPage
  004c8	00 00 00 00	 DD	 $LN12@LoadPage
  004cc	00 00 00 00	 DD	 $LN22@LoadPage
  004d0	00 00 00 00	 DD	 $LN33@LoadPage
  004d4	00 00 00 00	 DD	 $LN9@LoadPage
  004d8	00 00 00 00	 DD	 $LN8@LoadPage
_LoadPage ENDP
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$3
__unwindtable$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T166306 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Vptr$166312 = 12					; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

  0002b	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]

; 401  : 
; 402  : 	_TRY_BEGIN

  0002e	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00031	33 db		 xor	 ebx, ebx
  00033	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00036	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL6@Uninit_fil:

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

  00040	3b fb		 cmp	 edi, ebx
  00042	76 4c		 jbe	 SHORT $LN4@Uninit_fil

; 404  : 		_Al.construct(_First, _Val);

  00044	89 75 0c	 mov	 DWORD PTR __Vptr$166312[ebp], esi
  00047	89 75 e8	 mov	 DWORD PTR $T166306[ebp], esi
  0004a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004e	3b f3		 cmp	 esi, ebx
  00050	74 0b		 je	 SHORT $LN18@Uninit_fil
  00052	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  00055	50		 push	 eax
  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN18@Uninit_fil:
  0005d	4f		 dec	 edi
  0005e	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00064	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00067	89 75 08	 mov	 DWORD PTR __First$[ebp], esi
  0006a	eb d4		 jmp	 SHORT $LL6@Uninit_fil
__catch$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

  0006c	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  0006f	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00072	3b f7		 cmp	 esi, edi
  00074	74 11		 je	 SHORT $LN1@Uninit_fil
$LL3@Uninit_fil:

; 407  : 		_Al.destroy(_Next);

  00076	8b ce		 mov	 ecx, esi
  00078	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  0007d	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00083	3b f7		 cmp	 esi, edi
  00085	75 ef		 jne	 SHORT $LL3@Uninit_fil
$LN1@Uninit_fil:

; 408  : 	_RERAISE;

  00087	33 db		 xor	 ebx, ebx
  00089	53		 push	 ebx
  0008a	53		 push	 ebx
  0008b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Uninit_fil:

; 409  : 	_CATCH_END
; 410  : 	}

  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
$LN35@Uninit_fil:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
  00000	8b 45 0c	 mov	 eax, DWORD PTR __Vptr$166312[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T166306[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >
PUBLIC	??$unchecked_uninitialized_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z ; stdext::unchecked_uninitialized_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
;	COMDAT ??$unchecked_uninitialized_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z
_TEXT	SEGMENT
$T166346 = -4						; size = 1
__First$ = 8						; size = 4
__Cat$166350 = 12					; size = 1
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Cat$166350[esp]
  00005	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T166346[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T166346[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 823  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$unchecked_uninitialized_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??_C@_0CC@MKLHADEI@SETUP_FAILED_BOOT_DRIVE_ENCRYPTE@ ; `string'
PUBLIC	??_C@_0CD@NPEEBJKE@HIDDEN_OS_PRECLUDES_SINGLE_KEY_W@ ; `string'
PUBLIC	??_C@_0BH@HHEGHILA@WHOLE_SYC_DEVICE_RECOM?$AA@	; `string'
PUBLIC	??_C@_0CA@DBKKOPEJ@WDE_EXTENDED_PARTITIONS_WARNING?$AA@ ; `string'
PUBLIC	??_C@_0CI@HLDNCEMH@WDE_UNSUPPORTED_FOR_EXTENDED_PAR@ ; `string'
PUBLIC	??_C@_0CH@KNBCDPOB@ASK_ENCRYPT_PARTITION_INSTEAD_OF@ ; `string'
PUBLIC	??_C@_0CB@CKHHFLEI@SYSDRIVE_NON_STANDARD_PARTITIONS@ ; `string'
PUBLIC	??_C@_0CJ@GFEACENL@SYS_ENCRYPTION_OR_DECRYPTION_IN_@ ; `string'
PUBLIC	??_C@_0CA@HDGOHFPD@SYSTEM_ENCRYPTION_RESUME_PROMPT?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_SwitchWizardToSysEncMode
EXTRN	_AskYesNo:PROC
EXTRN	?SystemDriveContainsExtendedPartition@BootEncryption@CipherShed@@QAE_NXZ:PROC ; CipherShed::BootEncryption::SystemDriveContainsExtendedPartition
EXTRN	_IsOSAtLeast:PROC
EXTRN	_AskWarnYesNoString:PROC
EXTRN	?SystemDriveContainsNonStandardPartitions@BootEncryption@CipherShed@@QAE_NXZ:PROC ; CipherShed::BootEncryption::SystemDriveContainsNonStandardPartitions
EXTRN	_bSysPartitionSelected:DWORD
EXTRN	_bSysDriveSelected:DWORD
EXTRN	?CheckRequirements@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::CheckRequirements
EXTRN	?SystemPartitionCoversWholeDrive@BootEncryption@CipherShed@@QAE_NXZ:PROC ; CipherShed::BootEncryption::SystemPartitionCoversWholeDrive
;	COMDAT ??_C@_0CC@MKLHADEI@SETUP_FAILED_BOOT_DRIVE_ENCRYPTE@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
CONST	SEGMENT
??_C@_0CC@MKLHADEI@SETUP_FAILED_BOOT_DRIVE_ENCRYPTE@ DB 'SETUP_FAILED_BOO'
	DB	'T_DRIVE_ENCRYPTED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@NPEEBJKE@HIDDEN_OS_PRECLUDES_SINGLE_KEY_W@
CONST	SEGMENT
??_C@_0CD@NPEEBJKE@HIDDEN_OS_PRECLUDES_SINGLE_KEY_W@ DB 'HIDDEN_OS_PRECLU'
	DB	'DES_SINGLE_KEY_WDE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HHEGHILA@WHOLE_SYC_DEVICE_RECOM?$AA@
CONST	SEGMENT
??_C@_0BH@HHEGHILA@WHOLE_SYC_DEVICE_RECOM?$AA@ DB 'WHOLE_SYC_DEVICE_RECOM'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DBKKOPEJ@WDE_EXTENDED_PARTITIONS_WARNING?$AA@
CONST	SEGMENT
??_C@_0CA@DBKKOPEJ@WDE_EXTENDED_PARTITIONS_WARNING?$AA@ DB 'WDE_EXTENDED_'
	DB	'PARTITIONS_WARNING', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@HLDNCEMH@WDE_UNSUPPORTED_FOR_EXTENDED_PAR@
CONST	SEGMENT
??_C@_0CI@HLDNCEMH@WDE_UNSUPPORTED_FOR_EXTENDED_PAR@ DB 'WDE_UNSUPPORTED_'
	DB	'FOR_EXTENDED_PARTITIONS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@KNBCDPOB@ASK_ENCRYPT_PARTITION_INSTEAD_OF@
CONST	SEGMENT
??_C@_0CH@KNBCDPOB@ASK_ENCRYPT_PARTITION_INSTEAD_OF@ DB 'ASK_ENCRYPT_PART'
	DB	'ITION_INSTEAD_OF_DRIVE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CKHHFLEI@SYSDRIVE_NON_STANDARD_PARTITIONS@
CONST	SEGMENT
??_C@_0CB@CKHHFLEI@SYSDRIVE_NON_STANDARD_PARTITIONS@ DB 'SYSDRIVE_NON_STA'
	DB	'NDARD_PARTITIONS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@GFEACENL@SYS_ENCRYPTION_OR_DECRYPTION_IN_@
CONST	SEGMENT
??_C@_0CJ@GFEACENL@SYS_ENCRYPTION_OR_DECRYPTION_IN_@ DB 'SYS_ENCRYPTION_O'
	DB	'R_DECRYPTION_IN_PROGRESS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HDGOHFPD@SYSTEM_ENCRYPTION_RESUME_PROMPT?$AA@
CONST	SEGMENT
??_C@_0CA@HDGOHFPD@SYSTEM_ENCRYPTION_RESUME_PROMPT?$AA@ DB 'SYSTEM_ENCRYP'
	DB	'TION_RESUME_PROMPT', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_SwitchWizardToSysEncMode$14 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffa0H
	DD	FLAT:__catch$_SwitchWizardToSysEncMode$4
__catchsym$_SwitchWizardToSysEncMode$13 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffa4H
	DD	FLAT:__catch$_SwitchWizardToSysEncMode$2
__catchsym$_SwitchWizardToSysEncMode$12 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffa8H
	DD	FLAT:__catch$_SwitchWizardToSysEncMode$0
__ehfuncinfo$_SwitchWizardToSysEncMode DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$_SwitchWizardToSysEncMode
	DD	03H
	DD	FLAT:__tryblocktable$_SwitchWizardToSysEncMode
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$_SwitchWizardToSysEncMode DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_SwitchWizardToSysEncMode$12
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$_SwitchWizardToSysEncMode$13
	DD	04H
	DD	06H
	DD	07H
	DD	01H
	DD	FLAT:__catchsym$_SwitchWizardToSysEncMode$14
__unwindtable$_SwitchWizardToSysEncMode DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04H
	DD	FLAT:__unwindfunclet$_SwitchWizardToSysEncMode$6
	DD	05H
	DD	FLAT:__unwindfunclet$_SwitchWizardToSysEncMode$7
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\format\tcformat.c
xdata$x	ENDS
;	COMDAT _SwitchWizardToSysEncMode
_TEXT	SEGMENT
$T166374 = -274						; size = 94
$T166380 = -180						; size = 28
$T166382 = -152						; size = 28
$T166381 = -124						; size = 28
_e$131972 = -96						; size = 4
_e$131933 = -92						; size = 4
_e$131911 = -88						; size = 4
_rW$166518 = -84					; size = 16
_rW$166430 = -68					; size = 16
_rD$166428 = -52					; size = 16
_rD$166517 = -36					; size = 16
$T166379 = -17						; size = 1
__$EHRec$ = -16						; size = 16
_tmp$166439 = 0						; size = 130
_tmp$166523 = 132					; size = 130
__$ArrayPad$ = 264					; size = 4
_SwitchWizardToSysEncMode PROC				; COMDAT

; 758  : {

  00000	55		 push	 ebp
  00001	8d ac 24 f4 fe
	ff ff		 lea	 ebp, DWORD PTR [esp-268]
  00008	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$_SwitchWizardToSysEncMode
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 85 08 01 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 759  : 	WaitCursor ();

  0003f	e8 00 00 00 00	 call	 _WaitCursor

; 760  : 
; 761  : 	try
; 762  : 	{
; 763  : 		BootEncStatus = BootEncObj->GetStatus();

  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0004a	8d 85 ee fe ff
	ff		 lea	 eax, DWORD PTR $T166374[ebp]
  00050	33 db		 xor	 ebx, ebx
  00052	50		 push	 eax
  00053	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00056	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  0005b	8b f0		 mov	 esi, eax
  0005d	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00062	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00067	f3 a5		 rep movsd

; 764  : 		bWholeSysDrive = BootEncObj->SystemPartitionCoversWholeDrive();

  00069	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0006f	66 a5		 movsw
  00071	e8 00 00 00 00	 call	 ?SystemPartitionCoversWholeDrive@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemPartitionCoversWholeDrive
  00076	0f b6 c8	 movzx	 ecx, al
  00079	83 cf ff	 or	 edi, -1
  0007c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bWholeSysDrive@@3HA, ecx ; bWholeSysDrive
  00082	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi

; 772  : 	}
; 773  : 
; 774  : 	// From now on, we should be the only instance of the TC wizard allowed to deal with system encryption
; 775  : 	if (!CreateSysEncMutex ())

  00085	e8 00 00 00 00	 call	 _CreateSysEncMutex
  0008a	85 c0		 test	 eax, eax
  0008c	75 0f		 jne	 SHORT $LN34@SwitchWiza

; 776  : 	{
; 777  : 		Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  00093	e8 00 00 00 00	 call	 _Warning

; 778  : 		NormalCursor ();
; 779  : 		return FALSE;

  00098	e9 ee 01 00 00	 jmp	 $LN229@SwitchWiza
$LN34@SwitchWiza:

; 780  : 	}
; 781  : 
; 782  : 	// User-mode app may have crashed and its mutex may have gotten lost, so we need to check the driver status too
; 783  : 	if (BootEncStatus.SetupInProgress)

  0009d	39 1d 3e 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62, ebx
  000a3	0f 84 11 02 00
	00		 je	 $LN29@SwitchWiza

; 784  : 	{
; 785  : 		if (AskWarnYesNo ("SYSTEM_ENCRYPTION_RESUME_PROMPT") == IDYES)

  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HDGOHFPD@SYSTEM_ENCRYPTION_RESUME_PROMPT?$AA@
  000ae	e8 00 00 00 00	 call	 _AskWarnYesNo
  000b3	83 c4 04	 add	 esp, 4
  000b6	83 f8 06	 cmp	 eax, 6
  000b9	0f 85 bd 01 00
	00		 jne	 $LN32@SwitchWiza

; 786  : 		{
; 787  : 			if (SystemEncryptionStatus != SYSENC_STATUS_ENCRYPTING
; 788  : 				&& SystemEncryptionStatus != SYSENC_STATUS_DECRYPTING)

  000bf	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  000c4	3d 90 01 00 00	 cmp	 eax, 400		; 00000190H
  000c9	74 1a		 je	 SHORT $LN30@SwitchWiza
  000cb	3d 58 02 00 00	 cmp	 eax, 600		; 00000258H
  000d0	74 13		 je	 SHORT $LN30@SwitchWiza

; 789  : 			{
; 790  : 				// The config file with status was lost or not written correctly
; 791  : 				if (!ResolveUnknownSysEncDirection ())

  000d2	e8 00 00 00 00	 call	 _ResolveUnknownSysEncDirection
  000d7	85 c0		 test	 eax, eax
  000d9	75 0a		 jne	 SHORT $LN30@SwitchWiza
$LN228@SwitchWiza:

; 792  : 				{
; 793  : 					CloseSysEncMutex ();	

  000db	e8 00 00 00 00	 call	 _CloseSysEncMutex

; 795  : 					return FALSE;

  000e0	e9 a9 01 00 00	 jmp	 $LN221@SwitchWiza
$LN30@SwitchWiza:

; 796  : 				}
; 797  : 			}
; 798  : 
; 799  : 			bDirectSysEncMode = TRUE;
; 800  : 			ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

  000e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  000eb	be 02 00 00 00	 mov	 esi, 2
  000f0	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bDirectSysEncMode@@3HA, 1 ; bDirectSysEncMode
  000fa	3b d6		 cmp	 edx, esi
  000fc	74 52		 je	 SHORT $LN63@SwitchWiza

; 809  : 			NormalCursor ();
; 810  : 			return FALSE;
; 811  : 		}
; 812  : 	}
; 813  : 
; 814  : 	if (BootEncStatus.DriveMounted
; 815  : 		|| BootEncStatus.DriveEncrypted
; 816  : 		|| SysEncryptionOrDecryptionRequired ())

  000fe	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  00103	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00108	85 c0		 test	 eax, eax
  0010a	75 0f		 jne	 SHORT $LN59@SwitchWiza
  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  00111	e8 00 00 00 00	 call	 _Error
  00116	83 c4 04	 add	 esp, 4
  00119	eb 47		 jmp	 SHORT $LN55@SwitchWiza

; 796  : 				}
; 797  : 			}
; 798  : 
; 799  : 			bDirectSysEncMode = TRUE;
; 800  : 			ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

$LN59@SwitchWiza:
  0011b	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
  00120	89 1d 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, ebx
  00126	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szFileName@@3PADA, bl
  0012c	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szDiskFile@@3PADA, bl
  00132	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, ebx
  00138	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx
  0013e	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, ebx
  00144	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ebx
  0014a	89 35 00 00 00
	00		 mov	 DWORD PTR _WizardMode, esi
$LN63@SwitchWiza:
  00150	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  00156	f7 d9		 neg	 ecx
  00158	1b c9		 sbb	 ecx, ecx
  0015a	f7 d9		 neg	 ecx
  0015c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bDevice@@3HA, ecx ; bDevice
$LN55@SwitchWiza:

; 801  : 			LoadPage (MainDlg, SYSENC_ENCRYPTION_PAGE);

  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00167	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _MainDlg
  0016d	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  00172	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  00178	74 5a		 je	 SHORT $LN118@SwitchWiza
  0017a	89 3d 00 00 00
	00		 mov	 DWORD PTR ?nCurPageNo@@3HA, edi ; nCurPageNo
  00180	83 f8 15	 cmp	 eax, 21			; 00000015H
  00183	75 3c		 jne	 SHORT $LN116@SwitchWiza
  00185	68 82 00 00 00	 push	 130			; 00000082H
  0018a	8d 55 00	 lea	 edx, DWORD PTR _tmp$166439[ebp]
  0018d	6a 20		 push	 32			; 00000020H
  0018f	52		 push	 edx
  00190	e8 00 00 00 00	 call	 _memset
  00195	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  0019b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  001a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a4	8d 4d 00	 lea	 ecx, DWORD PTR _tmp$166439[ebp]
  001a7	51		 push	 ecx
  001a8	33 c0		 xor	 eax, eax
  001aa	52		 push	 edx
  001ab	66 89 85 80 00
	00 00		 mov	 WORD PTR _tmp$166439[ebp+128], ax
  001b2	ff d7		 call	 edi
  001b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  001ba	8d 45 00	 lea	 eax, DWORD PTR _tmp$166439[ebp]
  001bd	50		 push	 eax
  001be	51		 push	 ecx
  001bf	ff d7		 call	 edi
$LN116@SwitchWiza:
  001c1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  001c7	52		 push	 edx
  001c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  001ce	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN118@SwitchWiza:
  001d4	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  001da	e8 00 00 00 00	 call	 _NormalCursor
  001df	8d 45 bc	 lea	 eax, DWORD PTR _rW$166430[ebp]
  001e2	50		 push	 eax
  001e3	68 23 04 00 00	 push	 1059			; 00000423H
  001e8	56		 push	 esi
  001e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  001ef	50		 push	 eax
  001f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  001f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  001fc	53		 push	 ebx
  001fd	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00202	56		 push	 esi
  00203	6a 7a		 push	 122			; 0000007aH
  00205	51		 push	 ecx
  00206	c7 05 00 00 00
	00 1f 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 31 ; nCurPageNo, 0000001fH
  00210	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  00216	8d 55 cc	 lea	 edx, DWORD PTR _rD$166428[ebp]
  00219	52		 push	 edx
  0021a	56		 push	 esi
  0021b	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  00220	c7 45 cc a2 00
	00 00		 mov	 DWORD PTR _rD$166428[ebp], 162 ; 000000a2H
  00227	c7 45 d0 19 00
	00 00		 mov	 DWORD PTR _rD$166428[ebp+4], 25 ; 00000019H
  0022e	89 5d d4	 mov	 DWORD PTR _rD$166428[ebp+8], ebx
  00231	89 5d d8	 mov	 DWORD PTR _rD$166428[ebp+12], ebx
  00234	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  0023a	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0023f	3b c3		 cmp	 eax, ebx
  00241	74 2d		 je	 SHORT $LN67@SwitchWiza
  00243	8b 4d c8	 mov	 ecx, DWORD PTR _rW$166430[ebp+12]
  00246	2b 4d c0	 sub	 ecx, DWORD PTR _rW$166430[ebp+4]
  00249	8b 55 c4	 mov	 edx, DWORD PTR _rW$166430[ebp+8]
  0024c	2b 55 bc	 sub	 edx, DWORD PTR _rW$166430[ebp]
  0024f	6a 01		 push	 1
  00251	51		 push	 ecx
  00252	8b 4d d0	 mov	 ecx, DWORD PTR _rD$166428[ebp+4]
  00255	52		 push	 edx
  00256	8b 55 cc	 mov	 edx, DWORD PTR _rD$166428[ebp]
$LN231@SwitchWiza:
  00259	51		 push	 ecx
  0025a	52		 push	 edx
  0025b	50		 push	 eax
  0025c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  00262	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00267	6a 01		 push	 1
  00269	50		 push	 eax
  0026a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$LN67@SwitchWiza:

; 802  : 			NormalCursor ();

  00270	e8 00 00 00 00	 call	 _NormalCursor

; 803  : 			return TRUE;

  00275	b8 01 00 00 00	 mov	 eax, 1
  0027a	eb 19		 jmp	 SHORT $LN22@SwitchWiza
$LN32@SwitchWiza:

; 804  : 		}
; 805  : 		else
; 806  : 		{
; 807  : 			CloseSysEncMutex ();	

  0027c	e8 00 00 00 00	 call	 _CloseSysEncMutex

; 808  : 			Error ("SYS_ENCRYPTION_OR_DECRYPTION_IN_PROGRESS");

  00281	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@GFEACENL@SYS_ENCRYPTION_OR_DECRYPTION_IN_@
$LN232@SwitchWiza:
  00286	e8 00 00 00 00	 call	 _Error
$LN229@SwitchWiza:

; 776  : 	{
; 777  : 		Warning ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  0028b	83 c4 04	 add	 esp, 4
$LN221@SwitchWiza:

; 794  : 					NormalCursor ();

  0028e	e8 00 00 00 00	 call	 _NormalCursor
$LN50@SwitchWiza:

; 771  : 		return FALSE;

  00293	33 c0		 xor	 eax, eax
$LN22@SwitchWiza:

; 951  : 
; 952  : 		NormalCursor ();
; 953  : 		return TRUE;
; 954  : 	}
; 955  : }

  00295	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00298	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0029f	59		 pop	 ecx
  002a0	5f		 pop	 edi
  002a1	5e		 pop	 esi
  002a2	5b		 pop	 ebx
  002a3	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a9	33 cd		 xor	 ecx, ebp
  002ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b0	81 c5 0c 01 00
	00		 add	 ebp, 268		; 0000010cH
  002b6	8b e5		 mov	 esp, ebp
  002b8	5d		 pop	 ebp
  002b9	c3		 ret	 0
$LN29@SwitchWiza:

; 809  : 			NormalCursor ();
; 810  : 			return FALSE;
; 811  : 		}
; 812  : 	}
; 813  : 
; 814  : 	if (BootEncStatus.DriveMounted
; 815  : 		|| BootEncStatus.DriveEncrypted
; 816  : 		|| SysEncryptionOrDecryptionRequired ())

  002ba	39 1d 06 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, ebx
  002c0	0f 85 0d 03 00
	00		 jne	 $LN27@SwitchWiza
  002c6	39 1d 0e 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+14, ebx
  002cc	0f 85 01 03 00
	00		 jne	 $LN27@SwitchWiza
  002d2	e8 00 00 00 00	 call	 ?SysEncryptionOrDecryptionRequired@@YAHXZ ; SysEncryptionOrDecryptionRequired
  002d7	85 c0		 test	 eax, eax
  002d9	0f 85 f4 02 00
	00		 jne	 $LN27@SwitchWiza

; 848  : 		}
; 849  : 	}
; 850  : 	else
; 851  : 	{
; 852  : 		// Check compliance with requirements for boot encryption
; 853  : 
; 854  : 		if (!IsAdmin())

  002df	e8 00 00 00 00	 call	 _IsAdmin
  002e4	85 c0		 test	 eax, eax
  002e6	75 16		 jne	 SHORT $LN20@SwitchWiza

; 855  : 		{
; 856  : 			if (!IsUacSupported())

  002e8	e8 00 00 00 00	 call	 _IsUacSupported
  002ed	85 c0		 test	 eax, eax
  002ef	75 0d		 jne	 SHORT $LN20@SwitchWiza

; 857  : 			{
; 858  : 				Warning ("ADMIN_PRIVILEGES_WARN_DEVICES");

  002f1	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NAOLHLLP@ADMIN_PRIVILEGES_WARN_DEVICES?$AA@
  002f6	e8 00 00 00 00	 call	 _Warning
  002fb	83 c4 04	 add	 esp, 4
$LN20@SwitchWiza:

; 859  : 			}
; 860  : 		}
; 861  : 
; 862  : 		try
; 863  : 		{
; 864  : 			BootEncObj->CheckRequirements ();

  002fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00304	be 02 00 00 00	 mov	 esi, 2
  00309	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
  0030c	e8 00 00 00 00	 call	 ?CheckRequirements@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::CheckRequirements

; 872  : 		}
; 873  : 
; 874  : 		if (!ChangeWizardMode (WIZARD_MODE_SYS_DEVICE))

  00311	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  00317	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  0031a	3b ce		 cmp	 ecx, esi
  0031c	74 4e		 je	 SHORT $LN207@SwitchWiza
  0031e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  00324	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00329	85 c0		 test	 eax, eax
  0032b	75 0a		 jne	 SHORT $LN203@SwitchWiza
  0032d	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  00332	e9 4f ff ff ff	 jmp	 $LN232@SwitchWiza
$LN203@SwitchWiza:
  00337	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
  0033c	89 1d 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, ebx
  00342	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szFileName@@3PADA, bl
  00348	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szDiskFile@@3PADA, bl
  0034e	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, ebx
  00354	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx
  0035a	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, ebx
  00360	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ebx
  00366	89 35 00 00 00
	00		 mov	 DWORD PTR _WizardMode, esi
$LN207@SwitchWiza:
  0036c	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  00371	f7 d8		 neg	 eax
  00373	1b c0		 sbb	 eax, eax
  00375	f7 d8		 neg	 eax
  00377	a3 00 00 00 00	 mov	 DWORD PTR ?bDevice@@3HA, eax ; bDevice

; 875  : 		{
; 876  : 			NormalCursor ();
; 877  : 			return FALSE;
; 878  : 		}
; 879  : 
; 880  : 		if (bSysDriveSelected || bSysPartitionSelected)

  0037c	39 1d 00 00 00
	00		 cmp	 DWORD PTR _bSysDriveSelected, ebx
  00382	75 0d		 jne	 SHORT $LN220@SwitchWiza
  00384	39 1d 00 00 00
	00		 cmp	 DWORD PTR _bSysPartitionSelected, ebx
  0038a	75 17		 jne	 SHORT $LN38@SwitchWiza

; 947  : 			}
; 948  : 		}
; 949  : 		else
; 950  : 			LoadPage (MainDlg, SYSENC_TYPE_PAGE);

  0038c	e9 03 02 00 00	 jmp	 $LN226@SwitchWiza
$LN220@SwitchWiza:

; 881  : 		{
; 882  : 			// The user selected the non-sys-device wizard mode but then selected a system device
; 883  : 
; 884  : 			bWholeSysDrive = (bSysDriveSelected && !bSysPartitionSelected);

  00391	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bWholeSysDrive@@3HA, 1 ; bWholeSysDrive
  0039b	39 1d 00 00 00
	00		 cmp	 DWORD PTR _bSysPartitionSelected, ebx
  003a1	74 06		 je	 SHORT $LN39@SwitchWiza
$LN38@SwitchWiza:
  003a3	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bWholeSysDrive@@3HA, ebx ; bWholeSysDrive
$LN39@SwitchWiza:

; 885  : 
; 886  : 			bSysDriveSelected = FALSE;
; 887  : 			bSysPartitionSelected = FALSE;
; 888  : 
; 889  : 			try
; 890  : 			{
; 891  : 				if (!bHiddenVol)

  003a9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  003af	89 1d 00 00 00
	00		 mov	 DWORD PTR _bSysDriveSelected, ebx
  003b5	89 1d 00 00 00
	00		 mov	 DWORD PTR _bSysPartitionSelected, ebx
  003bb	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  003c2	85 d2		 test	 edx, edx
  003c4	0f 85 2e 01 00
	00		 jne	 $LN5@SwitchWiza

; 892  : 				{
; 893  : 					if (bWholeSysDrive && !BootEncObj->SystemPartitionCoversWholeDrive())

  003ca	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, ebx ; bWholeSysDrive
  003d0	0f 84 59 01 00
	00		 je	 $LN13@SwitchWiza
  003d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  003dc	e8 00 00 00 00	 call	 ?SystemPartitionCoversWholeDrive@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemPartitionCoversWholeDrive
  003e1	3a c3		 cmp	 al, bl
  003e3	0f 85 46 01 00
	00		 jne	 $LN13@SwitchWiza

; 894  : 					{
; 895  : 						if (BootEncObj->SystemDriveContainsNonStandardPartitions())

  003e9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  003ef	e8 00 00 00 00	 call	 ?SystemDriveContainsNonStandardPartitions@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemDriveContainsNonStandardPartitions
  003f4	3a c3		 cmp	 al, bl
  003f6	0f 84 9b 00 00
	00		 je	 $LN11@SwitchWiza

; 896  : 						{
; 897  : 							if (AskWarnYesNoString ((wstring (GetString ("SYSDRIVE_NON_STANDARD_PARTITIONS")) + L"\n\n" + GetString ("ASK_ENCRYPT_PARTITION_INSTEAD_OF_DRIVE")).c_str()) == IDYES)

  003fc	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@CKHHFLEI@SYSDRIVE_NON_STANDARD_PARTITIONS@
  00401	e8 00 00 00 00	 call	 _GetString
  00406	83 c4 04	 add	 esp, 4
  00409	50		 push	 eax
  0040a	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T166380[ebp]
  00410	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00415	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  0041a	50		 push	 eax
  0041b	8d 45 84	 lea	 eax, DWORD PTR $T166381[ebp]
  0041e	50		 push	 eax
  0041f	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  00423	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00428	83 c4 0c	 add	 esp, 12			; 0000000cH
  0042b	8b f0		 mov	 esi, eax
  0042d	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@KNBCDPOB@ASK_ENCRYPT_PARTITION_INSTEAD_OF@
  00432	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  00436	e8 00 00 00 00	 call	 _GetString
  0043b	50		 push	 eax
  0043c	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T166382[ebp]
  00442	56		 push	 esi
  00443	51		 push	 ecx
  00444	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00449	83 c4 10	 add	 esp, 16			; 00000010H
  0044c	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  00450	72 05		 jb	 SHORT $LN215@SwitchWiza
  00452	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00455	eb 03		 jmp	 SHORT $LN216@SwitchWiza
$LN215@SwitchWiza:
  00457	83 c0 04	 add	 eax, 4
$LN216@SwitchWiza:
  0045a	50		 push	 eax
  0045b	e8 00 00 00 00	 call	 _AskWarnYesNoString
  00460	83 c4 04	 add	 esp, 4
  00463	83 f8 06	 cmp	 eax, 6
  00466	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T166382[ebp]
  0046c	0f 94 45 ef	 sete	 BYTE PTR $T166379[ebp]
  00470	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00475	8d 4d 84	 lea	 ecx, DWORD PTR $T166381[ebp]
  00478	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0047d	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T166380[ebp]
  00483	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  00487	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0048c	38 5d ef	 cmp	 BYTE PTR $T166379[ebp], bl
  0048f	74 06		 je	 SHORT $LN11@SwitchWiza

; 898  : 								bWholeSysDrive = FALSE;

  00491	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bWholeSysDrive@@3HA, ebx ; bWholeSysDrive
$LN11@SwitchWiza:

; 899  : 						}
; 900  : 
; 901  : 						if (!IsOSAtLeast (WIN_VISTA) && bWholeSysDrive)

  00497	6a 0b		 push	 11			; 0000000bH
  00499	e8 00 00 00 00	 call	 _IsOSAtLeast
  0049e	83 c4 04	 add	 esp, 4
  004a1	85 c0		 test	 eax, eax
  004a3	75 53		 jne	 SHORT $LN5@SwitchWiza
  004a5	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, ebx ; bWholeSysDrive
  004ab	74 4b		 je	 SHORT $LN5@SwitchWiza

; 902  : 						{
; 903  : 							if (BootEncObj->SystemDriveContainsExtendedPartition())

  004ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  004b3	e8 00 00 00 00	 call	 ?SystemDriveContainsExtendedPartition@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemDriveContainsExtendedPartition
  004b8	3a c3		 cmp	 al, bl
  004ba	74 2f		 je	 SHORT $LN9@SwitchWiza

; 904  : 							{
; 905  : 								bWholeSysDrive = FALSE;
; 906  : 
; 907  : 								Error ("WDE_UNSUPPORTED_FOR_EXTENDED_PARTITIONS");

  004bc	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HLDNCEMH@WDE_UNSUPPORTED_FOR_EXTENDED_PAR@
  004c1	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bWholeSysDrive@@3HA, ebx ; bWholeSysDrive
  004c7	e8 00 00 00 00	 call	 _Error

; 908  : 
; 909  : 								if (AskYesNo ("ASK_ENCRYPT_PARTITION_INSTEAD_OF_DRIVE") == IDNO)

  004cc	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@KNBCDPOB@ASK_ENCRYPT_PARTITION_INSTEAD_OF@
  004d1	e8 00 00 00 00	 call	 _AskYesNo
  004d6	83 c4 08	 add	 esp, 8
  004d9	83 f8 07	 cmp	 eax, 7
  004dc	75 1a		 jne	 SHORT $LN5@SwitchWiza

; 910  : 								{
; 911  : 									ChangeWizardMode (WIZARD_MODE_NONSYS_DEVICE);

  004de	8d 70 fa	 lea	 esi, DWORD PTR [eax-6]
  004e1	e8 00 00 00 00	 call	 ?ChangeWizardMode@@YAHH@Z ; ChangeWizardMode

; 912  : 									return FALSE;

  004e6	e9 a8 fd ff ff	 jmp	 $LN50@SwitchWiza
$LN9@SwitchWiza:

; 913  : 								}
; 914  : 							}
; 915  : 							else
; 916  : 								Warning ("WDE_EXTENDED_PARTITIONS_WARNING");

  004eb	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@DBKKOPEJ@WDE_EXTENDED_PARTITIONS_WARNING?$AA@
  004f0	e8 00 00 00 00	 call	 _Warning
  004f5	83 c4 04	 add	 esp, 4
$LN5@SwitchWiza:

; 929  : 			}
; 930  : 
; 931  : 			if (!bHiddenVol)

  004f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  004fe	85 c9		 test	 ecx, ecx
  00500	75 77		 jne	 SHORT $LN4@SwitchWiza

; 932  : 			{
; 933  : 				// Skip SYSENC_SPAN_PAGE and SYSENC_TYPE_PAGE as the user already made the choice
; 934  : 				LoadPage (MainDlg, bWholeSysDrive ? SYSENC_PRE_DRIVE_ANALYSIS_PAGE : SYSENC_MULTI_BOOT_MODE_PAGE);	

  00502	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00507	33 d2		 xor	 edx, edx
  00509	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, ebx ; bWholeSysDrive
  0050f	0f 94 c2	 sete	 dl
  00512	8d 54 12 04	 lea	 edx, DWORD PTR [edx+edx+4]
  00516	52		 push	 edx
  00517	50		 push	 eax

; 945  : 
; 946  : 				LoadPage (MainDlg, SYSENC_TYPE_PAGE);

  00518	e8 00 00 00 00	 call	 _LoadPage
  0051d	83 c4 08	 add	 esp, 8
  00520	e8 00 00 00 00	 call	 _NormalCursor
  00525	b8 01 00 00 00	 mov	 eax, 1
  0052a	e9 66 fd ff ff	 jmp	 $LN22@SwitchWiza
$LN13@SwitchWiza:

; 917  : 						}
; 918  : 					}
; 919  : 					else if (BootEncObj->SystemPartitionCoversWholeDrive() 
; 920  : 						&& !bWholeSysDrive)

  0052f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00535	e8 00 00 00 00	 call	 ?SystemPartitionCoversWholeDrive@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemPartitionCoversWholeDrive
  0053a	3a c3		 cmp	 al, bl
  0053c	74 ba		 je	 SHORT $LN5@SwitchWiza
  0053e	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, ebx ; bWholeSysDrive
  00544	75 b2		 jne	 SHORT $LN5@SwitchWiza

; 921  : 						bWholeSysDrive = (AskYesNo ("WHOLE_SYC_DEVICE_RECOM") == IDYES);

  00546	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@HHEGHILA@WHOLE_SYC_DEVICE_RECOM?$AA@
  0054b	e8 00 00 00 00	 call	 _AskYesNo
  00550	33 d2		 xor	 edx, edx
  00552	83 c4 04	 add	 esp, 4
  00555	83 f8 06	 cmp	 eax, 6
  00558	0f 94 c2	 sete	 dl
  0055b	89 15 00 00 00
	00		 mov	 DWORD PTR ?bWholeSysDrive@@3HA, edx ; bWholeSysDrive
  00561	eb 95		 jmp	 SHORT $LN5@SwitchWiza
__catch$_SwitchWizardToSysEncMode$4:

; 922  : 				}
; 923  : 
; 924  : 			}
; 925  : 			catch (Exception &e)
; 926  : 			{
; 927  : 				e.Show (MainDlg);

  00563	8b 4d a0	 mov	 ecx, DWORD PTR _e$131972[ebp]
  00566	8b 01		 mov	 eax, DWORD PTR [ecx]
  00568	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  0056e	8b 00		 mov	 eax, DWORD PTR [eax]
  00570	52		 push	 edx
  00571	ff d0		 call	 eax

; 928  : 				return FALSE;

  00573	b8 00 00 00 00	 mov	 eax, $LN50@SwitchWiza
  00578	c3		 ret	 0
$LN4@SwitchWiza:

; 935  : 			}
; 936  : 			else
; 937  : 			{
; 938  : 				// The user selected the non-sys-device wizard mode but then selected a system device.
; 939  : 				// In addition, he selected the hidden volume mode.
; 940  : 
; 941  : 				if (bWholeSysDrive)

  00579	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, ebx ; bWholeSysDrive
  0057f	74 0d		 je	 SHORT $LN2@SwitchWiza

; 942  : 					Warning ("HIDDEN_OS_PRECLUDES_SINGLE_KEY_WDE");

  00581	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@NPEEBJKE@HIDDEN_OS_PRECLUDES_SINGLE_KEY_W@
  00586	e8 00 00 00 00	 call	 _Warning
  0058b	83 c4 04	 add	 esp, 4
$LN2@SwitchWiza:

; 943  : 
; 944  : 				bWholeSysDrive = FALSE;

  0058e	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bWholeSysDrive@@3HA, ebx ; bWholeSysDrive
$LN226@SwitchWiza:

; 945  : 
; 946  : 				LoadPage (MainDlg, SYSENC_TYPE_PAGE);

  00594	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  0059a	6a 01		 push	 1
  0059c	51		 push	 ecx
  0059d	e8 00 00 00 00	 call	 _LoadPage
  005a2	83 c4 08	 add	 esp, 8
  005a5	e8 00 00 00 00	 call	 _NormalCursor
  005aa	b8 01 00 00 00	 mov	 eax, 1
  005af	e9 e1 fc ff ff	 jmp	 $LN22@SwitchWiza
__catch$_SwitchWizardToSysEncMode$2:

; 865  : 		}
; 866  : 		catch (Exception &e)
; 867  : 		{
; 868  : 			CloseSysEncMutex ();	

  005b4	e8 00 00 00 00	 call	 _CloseSysEncMutex

; 869  : 			e.Show (MainDlg);

  005b9	8b 4d a4	 mov	 ecx, DWORD PTR _e$131933[ebp]
  005bc	8b 11		 mov	 edx, DWORD PTR [ecx]
  005be	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  005c3	8b 12		 mov	 edx, DWORD PTR [edx]
  005c5	50		 push	 eax
  005c6	ff d2		 call	 edx

; 870  : 			NormalCursor ();

  005c8	e8 00 00 00 00	 call	 _NormalCursor

; 871  : 			return FALSE;

  005cd	b8 00 00 00 00	 mov	 eax, $LN50@SwitchWiza
  005d2	c3		 ret	 0
$LN27@SwitchWiza:
  005d3	53		 push	 ebx
  005d4	e8 00 00 00 00	 call	 ?SysDriveOrPartitionFullyEncrypted@@YAHH@Z ; SysDriveOrPartitionFullyEncrypted
  005d9	83 c4 04	 add	 esp, 4
  005dc	85 c0		 test	 eax, eax
  005de	0f 85 af 01 00
	00		 jne	 $LN26@SwitchWiza
  005e4	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HDGOHFPD@SYSTEM_ENCRYPTION_RESUME_PROMPT?$AA@
  005e9	e8 00 00 00 00	 call	 _AskWarnYesNo
  005ee	83 c4 04	 add	 esp, 4
  005f1	83 f8 06	 cmp	 eax, 6
  005f4	0f 85 99 01 00
	00		 jne	 $LN26@SwitchWiza

; 817  : 	{
; 818  : 
; 819  : 		if (!SysDriveOrPartitionFullyEncrypted (FALSE)
; 820  : 			&& AskWarnYesNo ("SYSTEM_ENCRYPTION_RESUME_PROMPT") == IDYES)
; 821  : 		{
; 822  : 			if (SystemEncryptionStatus == SYSENC_STATUS_NONE)

  005fa	39 1d 00 00 00
	00		 cmp	 DWORD PTR _SystemEncryptionStatus, ebx
  00600	75 0d		 jne	 SHORT $LN24@SwitchWiza

; 823  : 			{
; 824  : 				// If the config file with status was lost or not written correctly, we
; 825  : 				// don't know whether to encrypt or decrypt (but we know that encryption or
; 826  : 				// decryption is required). Ask the user to select encryption, decryption, 
; 827  : 				// or cancel
; 828  : 				if (!ResolveUnknownSysEncDirection ())

  00602	e8 00 00 00 00	 call	 _ResolveUnknownSysEncDirection
  00607	85 c0		 test	 eax, eax

; 829  : 				{
; 830  : 					CloseSysEncMutex ();	
; 831  : 					NormalCursor ();
; 832  : 					return FALSE;

  00609	0f 84 cc fa ff
	ff		 je	 $LN228@SwitchWiza
$LN24@SwitchWiza:

; 833  : 				}
; 834  : 			}
; 835  : 
; 836  : 			bDirectSysEncMode = TRUE;
; 837  : 			ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

  0060f	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  00614	be 02 00 00 00	 mov	 esi, 2
  00619	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bDirectSysEncMode@@3HA, 1 ; bDirectSysEncMode
  00623	3b c6		 cmp	 eax, esi
  00625	74 53		 je	 SHORT $LN135@SwitchWiza
  00627	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  0062d	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00632	85 c0		 test	 eax, eax
  00634	75 0f		 jne	 SHORT $LN131@SwitchWiza
  00636	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  0063b	e8 00 00 00 00	 call	 _Error
  00640	83 c4 04	 add	 esp, 4
  00643	eb 47		 jmp	 SHORT $LN127@SwitchWiza
$LN131@SwitchWiza:
  00645	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
  0064a	89 1d 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, ebx
  00650	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szFileName@@3PADA, bl
  00656	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szDiskFile@@3PADA, bl
  0065c	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, ebx
  00662	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx
  00668	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, ebx
  0066e	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ebx
  00674	89 35 00 00 00
	00		 mov	 DWORD PTR _WizardMode, esi
$LN135@SwitchWiza:
  0067a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  00680	f7 da		 neg	 edx
  00682	1b d2		 sbb	 edx, edx
  00684	f7 da		 neg	 edx
  00686	89 15 00 00 00
	00		 mov	 DWORD PTR ?bDevice@@3HA, edx ; bDevice
$LN127@SwitchWiza:

; 838  : 			LoadPage (MainDlg, SYSENC_ENCRYPTION_PAGE);

  0068c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00691	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _MainDlg
  00697	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  0069c	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  006a2	74 61		 je	 SHORT $LN190@SwitchWiza
  006a4	89 3d 00 00 00
	00		 mov	 DWORD PTR ?nCurPageNo@@3HA, edi ; nCurPageNo
  006aa	83 f8 15	 cmp	 eax, 21			; 00000015H
  006ad	75 44		 jne	 SHORT $LN188@SwitchWiza
  006af	68 82 00 00 00	 push	 130			; 00000082H
  006b4	8d 85 84 00 00
	00		 lea	 eax, DWORD PTR _tmp$166523[ebp]
  006ba	6a 20		 push	 32			; 00000020H
  006bc	50		 push	 eax
  006bd	e8 00 00 00 00	 call	 _memset
  006c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  006c7	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  006cd	83 c4 0c	 add	 esp, 12			; 0000000cH
  006d0	8d 95 84 00 00
	00		 lea	 edx, DWORD PTR _tmp$166523[ebp]
  006d6	52		 push	 edx
  006d7	33 c9		 xor	 ecx, ecx
  006d9	50		 push	 eax
  006da	66 89 8d 04 01
	00 00		 mov	 WORD PTR _tmp$166523[ebp+128], cx
  006e1	ff d7		 call	 edi
  006e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  006e9	8d 8d 84 00 00
	00		 lea	 ecx, DWORD PTR _tmp$166523[ebp]
  006ef	51		 push	 ecx
  006f0	52		 push	 edx
  006f1	ff d7		 call	 edi
$LN188@SwitchWiza:
  006f3	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  006f8	50		 push	 eax
  006f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  006ff	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN190@SwitchWiza:
  00705	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  0070b	e8 00 00 00 00	 call	 _NormalCursor
  00710	8d 4d ac	 lea	 ecx, DWORD PTR _rW$166518[ebp]
  00713	51		 push	 ecx
  00714	68 23 04 00 00	 push	 1059			; 00000423H
  00719	56		 push	 esi
  0071a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00720	50		 push	 eax
  00721	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00727	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  0072d	53		 push	 ebx
  0072e	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00733	56		 push	 esi
  00734	6a 7a		 push	 122			; 0000007aH
  00736	52		 push	 edx
  00737	c7 05 00 00 00
	00 1f 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 31 ; nCurPageNo, 0000001fH
  00741	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  00747	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  0074c	8d 45 dc	 lea	 eax, DWORD PTR _rD$166517[ebp]
  0074f	50		 push	 eax
  00750	56		 push	 esi
  00751	c7 45 dc a2 00
	00 00		 mov	 DWORD PTR _rD$166517[ebp], 162 ; 000000a2H
  00758	c7 45 e0 19 00
	00 00		 mov	 DWORD PTR _rD$166517[ebp+4], 25 ; 00000019H
  0075f	89 5d e4	 mov	 DWORD PTR _rD$166517[ebp+8], ebx
  00762	89 5d e8	 mov	 DWORD PTR _rD$166517[ebp+12], ebx
  00765	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  0076b	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00770	3b c3		 cmp	 eax, ebx
  00772	0f 84 f8 fa ff
	ff		 je	 $LN67@SwitchWiza
  00778	8b 4d b8	 mov	 ecx, DWORD PTR _rW$166518[ebp+12]
  0077b	2b 4d b0	 sub	 ecx, DWORD PTR _rW$166518[ebp+4]
  0077e	8b 55 b4	 mov	 edx, DWORD PTR _rW$166518[ebp+8]
  00781	2b 55 ac	 sub	 edx, DWORD PTR _rW$166518[ebp]
  00784	6a 01		 push	 1
  00786	51		 push	 ecx
  00787	8b 4d e0	 mov	 ecx, DWORD PTR _rD$166517[ebp+4]
  0078a	52		 push	 edx
  0078b	8b 55 dc	 mov	 edx, DWORD PTR _rD$166517[ebp]

; 839  : 			NormalCursor ();
; 840  : 			return TRUE;

  0078e	e9 c6 fa ff ff	 jmp	 $LN231@SwitchWiza
$LN26@SwitchWiza:

; 841  : 		}
; 842  : 		else
; 843  : 		{
; 844  : 			CloseSysEncMutex ();	

  00793	e8 00 00 00 00	 call	 _CloseSysEncMutex

; 845  : 			Error ("SETUP_FAILED_BOOT_DRIVE_ENCRYPTED");

  00798	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@MKLHADEI@SETUP_FAILED_BOOT_DRIVE_ENCRYPTE@

; 846  : 			NormalCursor ();
; 847  : 			return FALSE;

  0079d	e9 e4 fa ff ff	 jmp	 $LN232@SwitchWiza
__catch$_SwitchWizardToSysEncMode$0:

; 765  : 	}
; 766  : 	catch (Exception &e)
; 767  : 	{
; 768  : 		e.Show (MainDlg);

  007a2	8b 4d a8	 mov	 ecx, DWORD PTR _e$131911[ebp]
  007a5	8b 11		 mov	 edx, DWORD PTR [ecx]
  007a7	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  007ac	8b 12		 mov	 edx, DWORD PTR [edx]
  007ae	50		 push	 eax
  007af	ff d2		 call	 edx

; 769  : 		Error ("ERR_GETTING_SYSTEM_ENCRYPTION_STATUS");

  007b1	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@
  007b6	e8 00 00 00 00	 call	 _Error
  007bb	83 c4 04	 add	 esp, 4

; 770  : 		NormalCursor ();

  007be	e8 00 00 00 00	 call	 _NormalCursor

; 771  : 		return FALSE;

  007c3	b8 00 00 00 00	 mov	 eax, $LN50@SwitchWiza
  007c8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_SwitchWizardToSysEncMode$6:
  00000	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T166380[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_SwitchWizardToSysEncMode$7:
  0000b	8d 4d 84	 lea	 ecx, DWORD PTR $T166381[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$_SwitchWizardToSysEncMode:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 8a e8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-280]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	8b 8a 14 01 00
	00		 mov	 ecx, DWORD PTR [edx+276]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_SwitchWizardToSysEncMode
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_SwitchWizardToSysEncMode ENDP
PUBLIC	__$ArrayPad$
PUBLIC	_SwitchWizardToFileContainerMode
; Function compile flags: /Ogtpy
;	COMDAT _SwitchWizardToFileContainerMode
_TEXT	SEGMENT
_rD$166665 = -168					; size = 16
_rW$166666 = -152					; size = 16
_tmp$166671 = -136					; size = 130
__$ArrayPad$ = -4					; size = 4
_SwitchWizardToFileContainerMode PROC			; COMDAT

; 958  : {

  00000	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 a4 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+168], eax

; 959  : 	ChangeWizardMode (WIZARD_MODE_FILE_CONTAINER);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  00019	53		 push	 ebx
  0001a	55		 push	 ebp
  0001b	56		 push	 esi
  0001c	33 db		 xor	 ebx, ebx
  0001e	57		 push	 edi
  0001f	85 c0		 test	 eax, eax
  00021	74 40		 je	 SHORT $LN11@SwitchWiza@2
  00023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  00029	83 f9 02	 cmp	 ecx, 2
  0002c	75 05		 jne	 SHORT $LN10@SwitchWiza@2
  0002e	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
$LN10@SwitchWiza@2:
  00033	89 1d 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, ebx
  00039	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szFileName@@3PADA, bl
  0003f	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szDiskFile@@3PADA, bl
  00045	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, ebx
  0004b	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx
  00051	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, ebx
  00057	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ebx
  0005d	89 1d 00 00 00
	00		 mov	 DWORD PTR _WizardMode, ebx
$LN11@SwitchWiza@2:
  00063	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  0006e	f7 da		 neg	 edx
  00070	1b d2		 sbb	 edx, edx
  00072	f7 da		 neg	 edx
  00074	89 15 00 00 00
	00		 mov	 DWORD PTR ?bDevice@@3HA, edx ; bDevice
  0007a	85 c0		 test	 eax, eax
  0007c	75 05		 jne	 SHORT $LN3@SwitchWiza@2
  0007e	e8 00 00 00 00	 call	 _CloseSysEncMutex
$LN3@SwitchWiza@2:

; 960  : 
; 961  : 	LoadPage (MainDlg, VOLUME_LOCATION_PAGE);

  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00088	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _MainDlg
  0008e	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  00093	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  00099	74 61		 je	 SHORT $LN65@SwitchWiza@2
  0009b	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  000a5	83 f8 15	 cmp	 eax, 21			; 00000015H
  000a8	75 3f		 jne	 SHORT $LN63@SwitchWiza@2
  000aa	68 82 00 00 00	 push	 130			; 00000082H
  000af	8d 4c 24 34	 lea	 ecx, DWORD PTR _tmp$166671[esp+188]
  000b3	6a 20		 push	 32			; 00000020H
  000b5	51		 push	 ecx
  000b6	e8 00 00 00 00	 call	 _memset
  000bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  000c1	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ca	8d 44 24 30	 lea	 eax, DWORD PTR _tmp$166671[esp+184]
  000ce	50		 push	 eax
  000cf	33 d2		 xor	 edx, edx
  000d1	51		 push	 ecx
  000d2	66 89 94 24 b8
	00 00 00	 mov	 WORD PTR _tmp$166671[esp+320], dx
  000da	ff d7		 call	 edi
  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  000e1	8d 54 24 30	 lea	 edx, DWORD PTR _tmp$166671[esp+184]
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	ff d7		 call	 edi
$LN63@SwitchWiza@2:
  000e9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  000ef	51		 push	 ecx
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  000f6	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN65@SwitchWiza@2:
  000fc	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  00102	e8 00 00 00 00	 call	 _NormalCursor
  00107	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  0010d	8d 54 24 20	 lea	 edx, DWORD PTR _rW$166666[esp+184]
  00111	52		 push	 edx
  00112	68 23 04 00 00	 push	 1059			; 00000423H
  00117	56		 push	 esi
  00118	ff d7		 call	 edi
  0011a	50		 push	 eax
  0011b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00121	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  00126	53		 push	 ebx
  00127	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0012c	56		 push	 esi
  0012d	6a 69		 push	 105			; 00000069H
  0012f	50		 push	 eax
  00130	c7 05 00 00 00
	00 0e 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 14 ; nCurPageNo, 0000000eH
  0013a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  00140	33 c9		 xor	 ecx, ecx
  00142	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bHistoryCmdLine@@3HA, ebx ; bHistoryCmdLine
  00148	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  0014d	0f 94 c1	 sete	 cl
  00150	51		 push	 ecx
  00151	68 f4 03 00 00	 push	 1012			; 000003f4H
  00156	50		 push	 eax
  00157	ff d7		 call	 edi
  00159	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__EnableWindow@8
  0015f	50		 push	 eax
  00160	ff d5		 call	 ebp
  00162	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00168	68 ea 03 00 00	 push	 1002			; 000003eaH
  0016d	52		 push	 edx
  0016e	ff d7		 call	 edi
  00170	50		 push	 eax
  00171	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextLengthA@4
  00177	33 c9		 xor	 ecx, ecx
  00179	85 c0		 test	 eax, eax
  0017b	0f 9f c1	 setg	 cl
  0017e	51		 push	 ecx
  0017f	68 10 04 00 00	 push	 1040			; 00000410H
  00184	56		 push	 esi
  00185	ff d7		 call	 edi
  00187	50		 push	 eax
  00188	ff d5		 call	 ebp
  0018a	8d 54 24 10	 lea	 edx, DWORD PTR _rD$166665[esp+184]
  0018e	52		 push	 edx
  0018f	56		 push	 esi
  00190	c7 44 24 18 a2
	00 00 00	 mov	 DWORD PTR _rD$166665[esp+192], 162 ; 000000a2H
  00198	c7 44 24 1c 19
	00 00 00	 mov	 DWORD PTR _rD$166665[esp+196], 25 ; 00000019H
  001a0	89 5c 24 20	 mov	 DWORD PTR _rD$166665[esp+200], ebx
  001a4	89 5c 24 24	 mov	 DWORD PTR _rD$166665[esp+204], ebx
  001a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  001ae	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  001b3	5f		 pop	 edi
  001b4	5e		 pop	 esi
  001b5	5d		 pop	 ebp
  001b6	3b c3		 cmp	 eax, ebx
  001b8	5b		 pop	 ebx
  001b9	74 33		 je	 SHORT $LN14@SwitchWiza@2
  001bb	8b 4c 24 1c	 mov	 ecx, DWORD PTR _rW$166666[esp+180]
  001bf	2b 4c 24 14	 sub	 ecx, DWORD PTR _rW$166666[esp+172]
  001c3	8b 54 24 18	 mov	 edx, DWORD PTR _rW$166666[esp+176]
  001c7	2b 54 24 10	 sub	 edx, DWORD PTR _rW$166666[esp+168]
  001cb	6a 01		 push	 1
  001cd	51		 push	 ecx
  001ce	8b 4c 24 0c	 mov	 ecx, DWORD PTR _rD$166665[esp+180]
  001d2	52		 push	 edx
  001d3	8b 54 24 0c	 mov	 edx, DWORD PTR _rD$166665[esp+180]
  001d7	51		 push	 ecx
  001d8	52		 push	 edx
  001d9	50		 push	 eax
  001da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  001e0	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  001e5	6a 01		 push	 1
  001e7	50		 push	 eax
  001e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$LN14@SwitchWiza@2:

; 962  : 
; 963  : 	NormalCursor ();

  001ee	e8 00 00 00 00	 call	 _NormalCursor

; 964  : }

  001f3	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+168]
  001fa	33 cc		 xor	 ecx, esp
  001fc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00201	81 c4 a8 00 00
	00		 add	 esp, 168		; 000000a8H
  00207	c3		 ret	 0
_SwitchWizardToFileContainerMode ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SwitchWizardToNonSysDeviceMode@@YAXXZ		; SwitchWizardToNonSysDeviceMode
; Function compile flags: /Ogtpy
;	COMDAT ?SwitchWizardToNonSysDeviceMode@@YAXXZ
_TEXT	SEGMENT
_rD$166758 = -172					; size = 16
_rW$166759 = -156					; size = 16
$T166745 = -140						; size = 4
_tmp$166764 = -136					; size = 130
__$ArrayPad$ = -4					; size = 4
?SwitchWizardToNonSysDeviceMode@@YAXXZ PROC		; SwitchWizardToNonSysDeviceMode, COMDAT

; 967  : {

  00000	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 a8 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+172], eax

; 968  : 	ChangeWizardMode (WIZARD_MODE_NONSYS_DEVICE);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	33 db		 xor	 ebx, ebx
  0001d	57		 push	 edi
  0001e	83 f8 01	 cmp	 eax, 1
  00021	74 6f		 je	 SHORT $LN11@SwitchWiza@3
  00023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  00029	83 f9 02	 cmp	 ecx, 2
  0002c	75 05		 jne	 SHORT $LN10@SwitchWiza@3
  0002e	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
$LN10@SwitchWiza@3:
  00033	e8 00 00 00 00	 call	 _IsAdmin
  00038	85 c0		 test	 eax, eax
  0003a	75 28		 jne	 SHORT $LN4@SwitchWiza@3
  0003c	e8 00 00 00 00	 call	 _IsUacSupported
  00041	85 c0		 test	 eax, eax
  00043	74 1f		 je	 SHORT $LN4@SwitchWiza@3
  00045	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00048	8b cc		 mov	 ecx, esp
  0004a	89 64 24 48	 mov	 DWORD PTR $T166745[esp+212], esp
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_02CLCFLINC@?1e?$AA@
  00053	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00058	e8 00 00 00 00	 call	 ?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ElevateWholeWizardProcess
  0005d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00060	3b c3		 cmp	 eax, ebx
  00062	74 4e		 je	 SHORT $LN3@SwitchWiza@3
$LN4@SwitchWiza@3:
  00064	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szFileName@@3PADA, bl
  0006a	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szDiskFile@@3PADA, bl
  00070	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, ebx
  00076	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx
  0007c	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, ebx
  00082	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ebx
  00088	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _WizardMode, 1
$LN11@SwitchWiza@3:
  00092	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  00098	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  0009d	f7 da		 neg	 edx
  0009f	1b d2		 sbb	 edx, edx
  000a1	f7 da		 neg	 edx
  000a3	89 15 00 00 00
	00		 mov	 DWORD PTR ?bDevice@@3HA, edx ; bDevice
  000a9	85 c0		 test	 eax, eax
  000ab	75 05		 jne	 SHORT $LN3@SwitchWiza@3
  000ad	e8 00 00 00 00	 call	 _CloseSysEncMutex
$LN3@SwitchWiza@3:

; 969  : 
; 970  : 	LoadPage (MainDlg, VOLUME_TYPE_PAGE);

  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  000b7	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _MainDlg
  000bd	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  000c2	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  000c8	74 61		 je	 SHORT $LN66@SwitchWiza@3
  000ca	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  000d4	83 f8 15	 cmp	 eax, 21			; 00000015H
  000d7	75 3f		 jne	 SHORT $LN64@SwitchWiza@3
  000d9	68 82 00 00 00	 push	 130			; 00000082H
  000de	8d 4c 24 34	 lea	 ecx, DWORD PTR _tmp$166764[esp+188]
  000e2	6a 20		 push	 32			; 00000020H
  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 _memset
  000ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  000f0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  000f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f9	8d 44 24 30	 lea	 eax, DWORD PTR _tmp$166764[esp+184]
  000fd	50		 push	 eax
  000fe	33 d2		 xor	 edx, edx
  00100	51		 push	 ecx
  00101	66 89 94 24 b8
	00 00 00	 mov	 WORD PTR _tmp$166764[esp+320], dx
  00109	ff d7		 call	 edi
  0010b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  00110	8d 54 24 30	 lea	 edx, DWORD PTR _tmp$166764[esp+184]
  00114	52		 push	 edx
  00115	50		 push	 eax
  00116	ff d7		 call	 edi
$LN64@SwitchWiza@3:
  00118	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  0011e	51		 push	 ecx
  0011f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  00125	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN66@SwitchWiza@3:
  0012b	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  00131	e8 00 00 00 00	 call	 _NormalCursor
  00136	8d 54 24 1c	 lea	 edx, DWORD PTR _rW$166759[esp+184]
  0013a	52		 push	 edx
  0013b	68 23 04 00 00	 push	 1059			; 00000423H
  00140	56		 push	 esi
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00147	50		 push	 eax
  00148	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  0014e	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  00153	53		 push	 ebx
  00154	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00159	56		 push	 esi
  0015a	6a 71		 push	 113			; 00000071H
  0015c	50		 push	 eax
  0015d	c7 05 00 00 00
	00 0c 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 12 ; nCurPageNo, 0000000cH
  00167	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  0016d	8d 4c 24 0c	 lea	 ecx, DWORD PTR _rD$166758[esp+184]
  00171	51		 push	 ecx
  00172	56		 push	 esi
  00173	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  00178	c7 44 24 14 a2
	00 00 00	 mov	 DWORD PTR _rD$166758[esp+192], 162 ; 000000a2H
  00180	c7 44 24 18 19
	00 00 00	 mov	 DWORD PTR _rD$166758[esp+196], 25 ; 00000019H
  00188	89 5c 24 1c	 mov	 DWORD PTR _rD$166758[esp+200], ebx
  0018c	89 5c 24 20	 mov	 DWORD PTR _rD$166758[esp+204], ebx
  00190	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  00196	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0019b	3b c3		 cmp	 eax, ebx
  0019d	74 34		 je	 SHORT $LN15@SwitchWiza@3
  0019f	8b 54 24 28	 mov	 edx, DWORD PTR _rW$166759[esp+196]
  001a3	2b 54 24 20	 sub	 edx, DWORD PTR _rW$166759[esp+188]
  001a7	8b 4c 24 24	 mov	 ecx, DWORD PTR _rW$166759[esp+192]
  001ab	2b 4c 24 1c	 sub	 ecx, DWORD PTR _rW$166759[esp+184]
  001af	6a 01		 push	 1
  001b1	52		 push	 edx
  001b2	8b 54 24 18	 mov	 edx, DWORD PTR _rD$166758[esp+196]
  001b6	51		 push	 ecx
  001b7	8b 4c 24 18	 mov	 ecx, DWORD PTR _rD$166758[esp+196]
  001bb	52		 push	 edx
  001bc	51		 push	 ecx
  001bd	50		 push	 eax
  001be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  001c4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  001ca	6a 01		 push	 1
  001cc	52		 push	 edx
  001cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$LN15@SwitchWiza@3:

; 971  : 
; 972  : 	NormalCursor ();

  001d3	e8 00 00 00 00	 call	 _NormalCursor

; 973  : }

  001d8	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+184]
  001df	5f		 pop	 edi
  001e0	5e		 pop	 esi
  001e1	5b		 pop	 ebx
  001e2	33 cc		 xor	 ecx, esp
  001e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e9	81 c4 ac 00 00
	00		 add	 esp, 172		; 000000acH
  001ef	c3		 ret	 0
?SwitchWizardToNonSysDeviceMode@@YAXXZ ENDP		; SwitchWizardToNonSysDeviceMode
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SwitchWizardToHiddenOSMode@@YAHXZ		; SwitchWizardToHiddenOSMode
EXTRN	?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::InitialSecurityChecksForHiddenOS
EXTRN	?CheckRequirementsHiddenOS@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::CheckRequirementsHiddenOS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?SwitchWizardToHiddenOSMode@@YAHXZ$2 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffacH
	DD	FLAT:__catch$?SwitchWizardToHiddenOSMode@@YAHXZ$0
__unwindtable$?SwitchWizardToHiddenOSMode@@YAHXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?SwitchWizardToHiddenOSMode@@YAHXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?SwitchWizardToHiddenOSMode@@YAHXZ$2
__ehfuncinfo$?SwitchWizardToHiddenOSMode@@YAHXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SwitchWizardToHiddenOSMode@@YAHXZ
	DD	01H
	DD	FLAT:__tryblocktable$?SwitchWizardToHiddenOSMode@@YAHXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?SwitchWizardToHiddenOSMode@@YAHXZ
_TEXT	SEGMENT
_e$131992 = -84						; size = 4
_rW$166922 = -80					; size = 16
_rW$166842 = -64					; size = 16
_rD$166921 = -48					; size = 16
_rD$166841 = -32					; size = 16
__$EHRec$ = -16						; size = 16
_tmp$166927 = 0						; size = 130
_tmp$166847 = 132					; size = 130
__$ArrayPad$ = 264					; size = 4
?SwitchWizardToHiddenOSMode@@YAHXZ PROC			; SwitchWizardToHiddenOSMode, COMDAT

; 976  : {

  00000	55		 push	 ebp
  00001	8d ac 24 f4 fe
	ff ff		 lea	 ebp, DWORD PTR [esp-268]
  00008	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?SwitchWizardToHiddenOSMode@@YAHXZ
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	83 ec 48	 sub	 esp, 72			; 00000048H
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 85 08 01 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002c	53		 push	 ebx
  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 977  : 	if (SwitchWizardToSysEncMode())

  0003c	e8 00 00 00 00	 call	 _SwitchWizardToSysEncMode
  00041	85 c0		 test	 eax, eax
  00043	0f 84 96 02 00
	00		 je	 $LN7@SwitchWiza@4

; 978  : 	{
; 979  : 		if (nCurPageNo != SYSENC_ENCRYPTION_PAGE)	// If the user did not manually choose to resume encryption or decryption of the system partition/drive

  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  0004e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00051	0f 84 81 02 00
	00		 je	 $LN6@SwitchWiza@4

; 980  : 		{
; 981  : 			bHiddenOS = TRUE;

  00057	b9 01 00 00 00	 mov	 ecx, 1
  0005c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bHiddenOS@@3HC, ecx ; bHiddenOS

; 982  : 			bHiddenVol = TRUE;
; 983  : 			bHiddenVolHost = TRUE;
; 984  : 			bHiddenVolDirect = FALSE;

  00062	33 f6		 xor	 esi, esi

; 985  : 			bWholeSysDrive = FALSE;
; 986  : 			bInPlaceEncNonSys = FALSE;
; 987  : 
; 988  : 			if (bDirectSysEncModeCommand == SYSENC_COMMAND_CREATE_HIDDEN_OS_ELEV)

  00064	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?bDirectSysEncModeCommand@@3HA, 6 ; bDirectSysEncModeCommand
  0006b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bHiddenVol@@3HC, ecx ; bHiddenVol
  00071	89 0d 00 00 00
	00		 mov	 DWORD PTR _bHiddenVolHost, ecx
  00077	89 35 00 00 00
	00		 mov	 DWORD PTR _bHiddenVolDirect, esi
  0007d	89 35 00 00 00
	00		 mov	 DWORD PTR ?bWholeSysDrive@@3HA, esi ; bWholeSysDrive
  00083	89 35 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, esi
  00089	0f 85 39 01 00
	00		 jne	 $LN5@SwitchWiza@4

; 989  : 			{
; 990  : 				// Some of the requirements for hidden OS should have already been checked by the wizard process
; 991  : 				// that launched us (in order to elevate), but we must recheck them. Otherwise, an advanced user 
; 992  : 				// could bypass the checks by using the undocumented CLI switch. Moreover, some requirements
; 993  : 				// can be checked only at this point (when we are elevated).
; 994  : 				try
; 995  : 				{
; 996  : 					BootEncObj->CheckRequirementsHiddenOS ();

  0008f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00095	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
  00098	e8 00 00 00 00	 call	 ?CheckRequirementsHiddenOS@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::CheckRequirementsHiddenOS

; 997  : 
; 998  : 					BootEncObj->InitialSecurityChecksForHiddenOS ();

  0009d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  000a3	e8 00 00 00 00	 call	 ?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::InitialSecurityChecksForHiddenOS

; 1004 : 				}
; 1005 : 
; 1006 : 				LoadPage (MainDlg, SYSENC_MULTI_BOOT_MODE_PAGE);

  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  000ad	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  000b3	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  000b8	39 35 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, esi
  000be	74 65		 je	 SHORT $LN65@SwitchWiza@4
  000c0	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  000ca	83 f8 15	 cmp	 eax, 21			; 00000015H
  000cd	75 44		 jne	 SHORT $LN63@SwitchWiza@4
  000cf	68 82 00 00 00	 push	 130			; 00000082H
  000d4	8d 85 84 00 00
	00		 lea	 eax, DWORD PTR _tmp$166847[ebp]
  000da	6a 20		 push	 32			; 00000020H
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 _memset
  000e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  000e7	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetWindowTextW@8
  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f0	8d 95 84 00 00
	00		 lea	 edx, DWORD PTR _tmp$166847[ebp]
  000f6	52		 push	 edx
  000f7	33 c9		 xor	 ecx, ecx
  000f9	50		 push	 eax
  000fa	66 89 8d 04 01
	00 00		 mov	 WORD PTR _tmp$166847[ebp+128], cx
  00101	ff d3		 call	 ebx
  00103	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  00109	8d 8d 84 00 00
	00		 lea	 ecx, DWORD PTR _tmp$166847[ebp]
  0010f	51		 push	 ecx
  00110	52		 push	 edx
  00111	ff d3		 call	 ebx
$LN63@SwitchWiza@4:
  00113	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00118	50		 push	 eax
  00119	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  0011f	89 35 00 00 00
	00		 mov	 DWORD PTR _hCurPage, esi
$LN65@SwitchWiza@4:
  00125	89 35 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, esi
  0012b	e8 00 00 00 00	 call	 _NormalCursor
  00130	8d 4d c0	 lea	 ecx, DWORD PTR _rW$166842[ebp]
  00133	51		 push	 ecx
  00134	68 23 04 00 00	 push	 1059			; 00000423H
  00139	57		 push	 edi
  0013a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00140	50		 push	 eax
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00147	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  0014d	56		 push	 esi
  0014e	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00153	57		 push	 edi
  00154	6a 77		 push	 119			; 00000077H
  00156	52		 push	 edx
  00157	c7 05 00 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 6 ; nCurPageNo
  00161	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  00167	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  0016c	8d 45 e0	 lea	 eax, DWORD PTR _rD$166841[ebp]
  0016f	50		 push	 eax
  00170	57		 push	 edi
  00171	c7 45 e0 a2 00
	00 00		 mov	 DWORD PTR _rD$166841[ebp], 162 ; 000000a2H
  00178	c7 45 e4 19 00
	00 00		 mov	 DWORD PTR _rD$166841[ebp+4], 25 ; 00000019H
  0017f	89 75 e8	 mov	 DWORD PTR _rD$166841[ebp+8], esi
  00182	89 75 ec	 mov	 DWORD PTR _rD$166841[ebp+12], esi
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  0018b	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00190	3b c6		 cmp	 eax, esi
  00192	0f 84 3b 01 00
	00		 je	 $LN74@SwitchWiza@4
  00198	8b 4d cc	 mov	 ecx, DWORD PTR _rW$166842[ebp+12]
  0019b	2b 4d c4	 sub	 ecx, DWORD PTR _rW$166842[ebp+4]
  0019e	8b 55 c8	 mov	 edx, DWORD PTR _rW$166842[ebp+8]
  001a1	2b 55 c0	 sub	 edx, DWORD PTR _rW$166842[ebp]
  001a4	6a 01		 push	 1
  001a6	51		 push	 ecx
  001a7	8b 4d e4	 mov	 ecx, DWORD PTR _rD$166841[ebp+4]
  001aa	52		 push	 edx
  001ab	8b 55 e0	 mov	 edx, DWORD PTR _rD$166841[ebp]

; 1007 : 			}
; 1008 : 			else

  001ae	e9 09 01 00 00	 jmp	 $LN137@SwitchWiza@4
__catch$?SwitchWizardToHiddenOSMode@@YAHXZ$0:

; 999  : 				}
; 1000 : 				catch (Exception &e)
; 1001 : 				{
; 1002 : 					e.Show (MainDlg);

  001b3	8b 4d ac	 mov	 ecx, DWORD PTR _e$131992[ebp]
  001b6	8b 11		 mov	 edx, DWORD PTR [ecx]
  001b8	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  001bd	8b 12		 mov	 edx, DWORD PTR [edx]
  001bf	50		 push	 eax
  001c0	ff d2		 call	 edx

; 1003 : 					return FALSE;

  001c2	b8 00 00 00 00	 mov	 eax, $LN7@SwitchWiza@4
  001c7	c3		 ret	 0
$LN5@SwitchWiza@4:

; 1009 : 				LoadPage (MainDlg, SYSENC_HIDDEN_OS_REQ_CHECK_PAGE);

  001c8	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  001ce	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  001d3	39 35 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, esi
  001d9	74 5c		 je	 SHORT $LN125@SwitchWiza@4
  001db	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  001e5	83 f8 15	 cmp	 eax, 21			; 00000015H
  001e8	75 3b		 jne	 SHORT $LN123@SwitchWiza@4
  001ea	68 82 00 00 00	 push	 130			; 00000082H
  001ef	8d 45 00	 lea	 eax, DWORD PTR _tmp$166927[ebp]
  001f2	6a 20		 push	 32			; 00000020H
  001f4	50		 push	 eax
  001f5	e8 00 00 00 00	 call	 _memset
  001fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  001ff	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetWindowTextW@8
  00205	83 c4 0c	 add	 esp, 12			; 0000000cH
  00208	8d 55 00	 lea	 edx, DWORD PTR _tmp$166927[ebp]
  0020b	52		 push	 edx
  0020c	33 c9		 xor	 ecx, ecx
  0020e	50		 push	 eax
  0020f	66 89 8d 80 00
	00 00		 mov	 WORD PTR _tmp$166927[ebp+128], cx
  00216	ff d3		 call	 ebx
  00218	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  0021e	8d 4d 00	 lea	 ecx, DWORD PTR _tmp$166927[ebp]
  00221	51		 push	 ecx
  00222	52		 push	 edx
  00223	ff d3		 call	 ebx
$LN123@SwitchWiza@4:
  00225	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0022a	50		 push	 eax
  0022b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  00231	89 35 00 00 00
	00		 mov	 DWORD PTR _hCurPage, esi
$LN125@SwitchWiza@4:
  00237	89 35 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, esi
  0023d	e8 00 00 00 00	 call	 _NormalCursor
  00242	8d 4d b0	 lea	 ecx, DWORD PTR _rW$166922[ebp]
  00245	51		 push	 ecx
  00246	68 23 04 00 00	 push	 1059			; 00000423H
  0024b	57		 push	 edi
  0024c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00252	50		 push	 eax
  00253	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00259	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  0025f	56		 push	 esi
  00260	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00265	57		 push	 edi
  00266	6a 7f		 push	 127			; 0000007fH
  00268	52		 push	 edx
  00269	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 2 ; nCurPageNo
  00273	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  00279	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  0027e	8d 45 d0	 lea	 eax, DWORD PTR _rD$166921[ebp]
  00281	50		 push	 eax
  00282	57		 push	 edi
  00283	c7 45 d0 a2 00
	00 00		 mov	 DWORD PTR _rD$166921[ebp], 162 ; 000000a2H
  0028a	c7 45 d4 19 00
	00 00		 mov	 DWORD PTR _rD$166921[ebp+4], 25 ; 00000019H
  00291	89 75 d8	 mov	 DWORD PTR _rD$166921[ebp+8], esi
  00294	89 75 dc	 mov	 DWORD PTR _rD$166921[ebp+12], esi
  00297	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  0029d	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  002a2	3b c6		 cmp	 eax, esi
  002a4	74 2d		 je	 SHORT $LN74@SwitchWiza@4
  002a6	8b 4d bc	 mov	 ecx, DWORD PTR _rW$166922[ebp+12]
  002a9	2b 4d b4	 sub	 ecx, DWORD PTR _rW$166922[ebp+4]
  002ac	8b 55 b8	 mov	 edx, DWORD PTR _rW$166922[ebp+8]
  002af	2b 55 b0	 sub	 edx, DWORD PTR _rW$166922[ebp]
  002b2	6a 01		 push	 1
  002b4	51		 push	 ecx
  002b5	8b 4d d4	 mov	 ecx, DWORD PTR _rD$166921[ebp+4]
  002b8	52		 push	 edx
  002b9	8b 55 d0	 mov	 edx, DWORD PTR _rD$166921[ebp]
$LN137@SwitchWiza@4:
  002bc	51		 push	 ecx
  002bd	52		 push	 edx
  002be	50		 push	 eax
  002bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  002c5	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  002ca	6a 01		 push	 1
  002cc	50		 push	 eax
  002cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$LN74@SwitchWiza@4:

; 1010 : 
; 1011 : 			NormalCursor ();

  002d3	e8 00 00 00 00	 call	 _NormalCursor
$LN6@SwitchWiza@4:

; 1018 : 
; 1019 : 	return TRUE;

  002d8	b8 01 00 00 00	 mov	 eax, 1
  002dd	eb 02		 jmp	 SHORT $LN8@SwitchWiza@4
$LN7@SwitchWiza@4:

; 1012 : 		}
; 1013 : 		else
; 1014 : 			return TRUE;
; 1015 : 	}
; 1016 : 	else
; 1017 : 		return FALSE;

  002df	33 c0		 xor	 eax, eax
$LN8@SwitchWiza@4:

; 1020 : }

  002e1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  002e4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002eb	59		 pop	 ecx
  002ec	5f		 pop	 edi
  002ed	5e		 pop	 esi
  002ee	5b		 pop	 ebx
  002ef	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002f5	33 cd		 xor	 ecx, ebp
  002f7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002fc	81 c5 0c 01 00
	00		 add	 ebp, 268		; 0000010cH
  00302	8b e5		 mov	 esp, ebp
  00304	5d		 pop	 ebp
  00305	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?SwitchWizardToHiddenOSMode@@YAHXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	8b 8a 14 01 00
	00		 mov	 ecx, DWORD PTR [edx+276]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SwitchWizardToHiddenOSMode@@YAHXZ
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SwitchWizardToHiddenOSMode@@YAHXZ ENDP			; SwitchWizardToHiddenOSMode
PUBLIC	__$ArrayPad$
PUBLIC	?SwitchWizardToNonSysInplaceEncResumeMode@@YAXXZ ; SwitchWizardToNonSysInplaceEncResumeMode
; Function compile flags: /Ogtpy
;	COMDAT ?SwitchWizardToNonSysInplaceEncResumeMode@@YAXXZ
_TEXT	SEGMENT
$T167144 = -172						; size = 4
$T166994 = -172						; size = 4
_rD$167175 = -168					; size = 16
_rW$167176 = -152					; size = 16
_tmp$167181 = -136					; size = 130
__$ArrayPad$ = -4					; size = 4
?SwitchWizardToNonSysInplaceEncResumeMode@@YAXXZ PROC	; SwitchWizardToNonSysInplaceEncResumeMode, COMDAT

; 1023 : {

  00000	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 a8 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+172], eax
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi

; 1024 : 	if (!IsAdmin() && IsUacSupported())

  00017	e8 00 00 00 00	 call	 _IsAdmin
  0001c	33 db		 xor	 ebx, ebx
  0001e	85 c0		 test	 eax, eax
  00020	75 3c		 jne	 SHORT $LN2@SwitchWiza@5
  00022	e8 00 00 00 00	 call	 _IsUacSupported
  00027	85 c0		 test	 eax, eax
  00029	74 33		 je	 SHORT $LN2@SwitchWiza@5

; 1025 : 	{
; 1026 : 		if (!ElevateWholeWizardProcess ("/zinplace"))

  0002b	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0002e	8b cc		 mov	 ecx, esp
  00030	89 64 24 28	 mov	 DWORD PTR $T166994[esp+212], esp
  00034	6a 09		 push	 9
  00036	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0003d	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_09FFOCOHMH@?1zinplace?$AA@
  00045	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00048	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004d	e8 00 00 00 00	 call	 ?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ElevateWholeWizardProcess
  00052	83 c4 1c	 add	 esp, 28			; 0000001cH
  00055	3b c3		 cmp	 eax, ebx
  00057	75 05		 jne	 SHORT $LN2@SwitchWiza@5

; 1027 : 			AbortProcessSilent ();

  00059	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN2@SwitchWiza@5:

; 1028 : 	}
; 1029 : 
; 1030 : 	if (!IsAdmin())

  0005e	e8 00 00 00 00	 call	 _IsAdmin
  00063	85 c0		 test	 eax, eax
  00065	75 0d		 jne	 SHORT $LN1@SwitchWiza@5

; 1031 : 		AbortProcess("ADMIN_PRIVILEGES_WARN_DEVICES");

  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NAOLHLLP@ADMIN_PRIVILEGES_WARN_DEVICES?$AA@
  0006c	e8 00 00 00 00	 call	 _AbortProcess
  00071	83 c4 04	 add	 esp, 4
$LN1@SwitchWiza@5:

; 1032 : 
; 1033 : 	CreateNonSysInplaceEncMutex ();

  00074	e8 00 00 00 00	 call	 _CreateNonSysInplaceEncMutex

; 1034 : 
; 1035 : 	bInPlaceEncNonSys = TRUE;

  00079	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bInPlaceEncNonSys, 1

; 1036 : 	bInPlaceEncNonSysResumed = TRUE;

  00083	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bInPlaceEncNonSysResumed, 1

; 1037 : 
; 1038 : 	ChangeWizardMode (WIZARD_MODE_NONSYS_DEVICE);

  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  00092	83 f8 01	 cmp	 eax, 1
  00095	74 6f		 je	 SHORT $LN51@SwitchWiza@5
  00097	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  0009d	83 f9 02	 cmp	 ecx, 2
  000a0	75 05		 jne	 SHORT $LN50@SwitchWiza@5
  000a2	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
$LN50@SwitchWiza@5:
  000a7	e8 00 00 00 00	 call	 _IsAdmin
  000ac	85 c0		 test	 eax, eax
  000ae	75 28		 jne	 SHORT $LN44@SwitchWiza@5
  000b0	e8 00 00 00 00	 call	 _IsUacSupported
  000b5	85 c0		 test	 eax, eax
  000b7	74 1f		 je	 SHORT $LN44@SwitchWiza@5
  000b9	83 ec 1c	 sub	 esp, 28			; 0000001cH
  000bc	8b cc		 mov	 ecx, esp
  000be	89 64 24 28	 mov	 DWORD PTR $T167144[esp+212], esp
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_02CLCFLINC@?1e?$AA@
  000c7	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000cc	e8 00 00 00 00	 call	 ?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ElevateWholeWizardProcess
  000d1	83 c4 1c	 add	 esp, 28			; 0000001cH
  000d4	3b c3		 cmp	 eax, ebx
  000d6	74 4e		 je	 SHORT $LN43@SwitchWiza@5
$LN44@SwitchWiza@5:
  000d8	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szFileName@@3PADA, bl
  000de	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szDiskFile@@3PADA, bl
  000e4	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, ebx
  000ea	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx
  000f0	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, ebx
  000f6	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ebx
  000fc	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _WizardMode, 1
$LN51@SwitchWiza@5:
  00106	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  0010c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00111	f7 da		 neg	 edx
  00113	1b d2		 sbb	 edx, edx
  00115	f7 da		 neg	 edx
  00117	89 15 00 00 00
	00		 mov	 DWORD PTR ?bDevice@@3HA, edx ; bDevice
  0011d	85 c0		 test	 eax, eax
  0011f	75 05		 jne	 SHORT $LN43@SwitchWiza@5
  00121	e8 00 00 00 00	 call	 _CloseSysEncMutex
$LN43@SwitchWiza@5:

; 1039 : 
; 1040 : 	LoadPage (MainDlg, NONSYS_INPLACE_ENC_RESUME_PASSWORD_PAGE);

  00126	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  0012b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _MainDlg
  00131	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  00136	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  0013c	74 61		 je	 SHORT $LN106@SwitchWiza@5
  0013e	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  00148	83 f8 15	 cmp	 eax, 21			; 00000015H
  0014b	75 3f		 jne	 SHORT $LN104@SwitchWiza@5
  0014d	68 82 00 00 00	 push	 130			; 00000082H
  00152	8d 4c 24 34	 lea	 ecx, DWORD PTR _tmp$167181[esp+188]
  00156	6a 20		 push	 32			; 00000020H
  00158	51		 push	 ecx
  00159	e8 00 00 00 00	 call	 _memset
  0015e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  00164	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  0016a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0016d	8d 44 24 30	 lea	 eax, DWORD PTR _tmp$167181[esp+184]
  00171	50		 push	 eax
  00172	33 d2		 xor	 edx, edx
  00174	51		 push	 ecx
  00175	66 89 94 24 b8
	00 00 00	 mov	 WORD PTR _tmp$167181[esp+320], dx
  0017d	ff d7		 call	 edi
  0017f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  00184	8d 54 24 30	 lea	 edx, DWORD PTR _tmp$167181[esp+184]
  00188	52		 push	 edx
  00189	50		 push	 eax
  0018a	ff d7		 call	 edi
$LN104@SwitchWiza@5:
  0018c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  00192	51		 push	 ecx
  00193	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  00199	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN106@SwitchWiza@5:
  0019f	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  001a5	e8 00 00 00 00	 call	 _NormalCursor
  001aa	8d 54 24 20	 lea	 edx, DWORD PTR _rW$167176[esp+184]
  001ae	52		 push	 edx
  001af	68 23 04 00 00	 push	 1059			; 00000423H
  001b4	56		 push	 esi
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  001bb	50		 push	 eax
  001bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  001c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  001c7	53		 push	 ebx
  001c8	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  001cd	56		 push	 esi
  001ce	6a 6f		 push	 111			; 0000006fH
  001d0	50		 push	 eax
  001d1	c7 05 00 00 00
	00 20 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 32 ; nCurPageNo, 00000020H
  001db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  001e1	8d 4c 24 10	 lea	 ecx, DWORD PTR _rD$167175[esp+184]
  001e5	51		 push	 ecx
  001e6	56		 push	 esi
  001e7	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  001ec	c7 44 24 18 a2
	00 00 00	 mov	 DWORD PTR _rD$167175[esp+192], 162 ; 000000a2H
  001f4	c7 44 24 1c 19
	00 00 00	 mov	 DWORD PTR _rD$167175[esp+196], 25 ; 00000019H
  001fc	89 5c 24 20	 mov	 DWORD PTR _rD$167175[esp+200], ebx
  00200	89 5c 24 24	 mov	 DWORD PTR _rD$167175[esp+204], ebx
  00204	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  0020a	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0020f	3b c3		 cmp	 eax, ebx
  00211	74 34		 je	 SHORT $LN55@SwitchWiza@5
  00213	8b 54 24 2c	 mov	 edx, DWORD PTR _rW$167176[esp+196]
  00217	2b 54 24 24	 sub	 edx, DWORD PTR _rW$167176[esp+188]
  0021b	8b 4c 24 28	 mov	 ecx, DWORD PTR _rW$167176[esp+192]
  0021f	2b 4c 24 20	 sub	 ecx, DWORD PTR _rW$167176[esp+184]
  00223	6a 01		 push	 1
  00225	52		 push	 edx
  00226	8b 54 24 1c	 mov	 edx, DWORD PTR _rD$167175[esp+196]
  0022a	51		 push	 ecx
  0022b	8b 4c 24 1c	 mov	 ecx, DWORD PTR _rD$167175[esp+196]
  0022f	52		 push	 edx
  00230	51		 push	 ecx
  00231	50		 push	 eax
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  00238	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  0023e	6a 01		 push	 1
  00240	52		 push	 edx
  00241	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$LN55@SwitchWiza@5:

; 1041 : }

  00247	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+184]
  0024e	5f		 pop	 edi
  0024f	5e		 pop	 esi
  00250	5b		 pop	 ebx
  00251	33 cc		 xor	 ecx, esp
  00253	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00258	81 c4 ac 00 00
	00		 add	 esp, 172		; 000000acH
  0025e	c3		 ret	 0
?SwitchWizardToNonSysInplaceEncResumeMode@@YAXXZ ENDP	; SwitchWizardToNonSysInplaceEncResumeMode
_TEXT	ENDS
PUBLIC	??_C@_0BA@ICICKJJH@CONFIRM_RESTART?$AA@		; `string'
PUBLIC	??_C@_0DB@IJPDGLEP@HIDDEN_OS_CREATION_NOT_FINISHED_@ ; `string'
PUBLIC	??_C@_0DB@KJCGFBOB@HIDDEN_OS_CREATION_NOT_FINISHED_@ ; `string'
PUBLIC	??_C@_0CN@NFNCFNOG@HIDDEN_OS_CREATION_NOT_FINISHED_@ ; `string'
PUBLIC	??_C@_0CE@BLKNBIFF@HIDDEN_OS_CREATION_NOT_FINISHED_@ ; `string'
PUBLIC	??_C@_0BL@BAAJMEPI@OS_WIPING_NOT_FINISHED_ASK?$AA@ ; `string'
PUBLIC	??_C@_0BK@DFBAAIPH@BOOT_PRETEST_FAILED_RETRY?$AA@ ; `string'
PUBLIC	??_C@_0BG@MFGBDIJB@AfterWMInitTasks?38781?$AA@	; `string'
PUBLIC	??_C@_0BG@GFCOOCOK@AfterWMInitTasks?38916?$AA@	; `string'
PUBLIC	??_C@_0BG@BIHDPAMH@AfterWMInitTasks?38695?$AA@	; `string'
PUBLIC	??_C@_0CP@MHIMBFBH@SYS_PARTITION_OR_DRIVE_APPEARS_F@ ; `string'
PUBLIC	??_C@_0BC@BOICFCMD@NOTHING_TO_RESUME?$AA@	; `string'
PUBLIC	??_C@_0CL@LHNBFDMB@SYSTEM_ENCRYPTION_SCHEDULED_BUT_@ ; `string'
PUBLIC	??_C@_0BG@EJNCCGAP@AfterWMInitTasks?38522?$AA@	; `string'
PUBLIC	??_C@_0BJ@KGJBOMKO@CANNOT_DECRYPT_HIDDEN_OS?$AA@ ; `string'
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	_AskNonSysInPlaceEncryptionResume:PROC
EXTRN	_NonSysInplaceEncInProgressElsewhere:PROC
EXTRN	_IsNonInstallMode:PROC
EXTRN	?RestartComputer@BootEncryption@CipherShed@@QAE_NXZ:PROC ; CipherShed::BootEncryption::RestartComputer
EXTRN	?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z:PROC ; CipherShed::BootEncryption::RegisterBootDriver
EXTRN	_TextInfoDialogBox:PROC
;	COMDAT ??_C@_0BA@ICICKJJH@CONFIRM_RESTART?$AA@
CONST	SEGMENT
??_C@_0BA@ICICKJJH@CONFIRM_RESTART?$AA@ DB 'CONFIRM_RESTART', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@IJPDGLEP@HIDDEN_OS_CREATION_NOT_FINISHED_@
CONST	SEGMENT
??_C@_0DB@IJPDGLEP@HIDDEN_OS_CREATION_NOT_FINISHED_@ DB 'HIDDEN_OS_CREATI'
	DB	'ON_NOT_FINISHED_CHOICE_ASK_LATER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@KJCGFBOB@HIDDEN_OS_CREATION_NOT_FINISHED_@
CONST	SEGMENT
??_C@_0DB@KJCGFBOB@HIDDEN_OS_CREATION_NOT_FINISHED_@ DB 'HIDDEN_OS_CREATI'
	DB	'ON_NOT_FINISHED_CHOICE_TERMINATE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@NFNCFNOG@HIDDEN_OS_CREATION_NOT_FINISHED_@
CONST	SEGMENT
??_C@_0CN@NFNCFNOG@HIDDEN_OS_CREATION_NOT_FINISHED_@ DB 'HIDDEN_OS_CREATI'
	DB	'ON_NOT_FINISHED_CHOICE_RETRY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BLKNBIFF@HIDDEN_OS_CREATION_NOT_FINISHED_@
CONST	SEGMENT
??_C@_0CE@BLKNBIFF@HIDDEN_OS_CREATION_NOT_FINISHED_@ DB 'HIDDEN_OS_CREATI'
	DB	'ON_NOT_FINISHED_ASK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BAAJMEPI@OS_WIPING_NOT_FINISHED_ASK?$AA@
CONST	SEGMENT
??_C@_0BL@BAAJMEPI@OS_WIPING_NOT_FINISHED_ASK?$AA@ DB 'OS_WIPING_NOT_FINI'
	DB	'SHED_ASK', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DFBAAIPH@BOOT_PRETEST_FAILED_RETRY?$AA@
CONST	SEGMENT
??_C@_0BK@DFBAAIPH@BOOT_PRETEST_FAILED_RETRY?$AA@ DB 'BOOT_PRETEST_FAILED'
	DB	'_RETRY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MFGBDIJB@AfterWMInitTasks?38781?$AA@
CONST	SEGMENT
??_C@_0BG@MFGBDIJB@AfterWMInitTasks?38781?$AA@ DB 'AfterWMInitTasks:8781', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GFCOOCOK@AfterWMInitTasks?38916?$AA@
CONST	SEGMENT
??_C@_0BG@GFCOOCOK@AfterWMInitTasks?38916?$AA@ DB 'AfterWMInitTasks:8916', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BIHDPAMH@AfterWMInitTasks?38695?$AA@
CONST	SEGMENT
??_C@_0BG@BIHDPAMH@AfterWMInitTasks?38695?$AA@ DB 'AfterWMInitTasks:8695', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@MHIMBFBH@SYS_PARTITION_OR_DRIVE_APPEARS_F@
CONST	SEGMENT
??_C@_0CP@MHIMBFBH@SYS_PARTITION_OR_DRIVE_APPEARS_F@ DB 'SYS_PARTITION_OR'
	DB	'_DRIVE_APPEARS_FULLY_ENCRYPTED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BOICFCMD@NOTHING_TO_RESUME?$AA@
CONST	SEGMENT
??_C@_0BC@BOICFCMD@NOTHING_TO_RESUME?$AA@ DB 'NOTHING_TO_RESUME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LHNBFDMB@SYSTEM_ENCRYPTION_SCHEDULED_BUT_@
CONST	SEGMENT
??_C@_0CL@LHNBFDMB@SYSTEM_ENCRYPTION_SCHEDULED_BUT_@ DB 'SYSTEM_ENCRYPTIO'
	DB	'N_SCHEDULED_BUT_PBA_FAILED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EJNCCGAP@AfterWMInitTasks?38522?$AA@
CONST	SEGMENT
??_C@_0BG@EJNCCGAP@AfterWMInitTasks?38522?$AA@ DB 'AfterWMInitTasks:8522', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KGJBOMKO@CANNOT_DECRYPT_HIDDEN_OS?$AA@
CONST	SEGMENT
??_C@_0BJ@KGJBOMKO@CANNOT_DECRYPT_HIDDEN_OS?$AA@ DB 'CANNOT_DECRYPT_HIDDE'
	DB	'N_OS', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_AfterWMInitTasks$16 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffff0cH
	DD	FLAT:__catch$_AfterWMInitTasks$8
__catchsym$_AfterWMInitTasks$15 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffefcH
	DD	FLAT:__catch$_AfterWMInitTasks$6
__catchsym$_AfterWMInitTasks$14 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffff04H
	DD	FLAT:__catch$_AfterWMInitTasks$4
__catchsym$_AfterWMInitTasks$13 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffff00H
	DD	FLAT:__catch$_AfterWMInitTasks$2
__catchsym$_AfterWMInitTasks$12 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffff08H
	DD	FLAT:__catch$_AfterWMInitTasks$0
__ehfuncinfo$_AfterWMInitTasks DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$_AfterWMInitTasks
	DD	05H
	DD	FLAT:__tryblocktable$_AfterWMInitTasks
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$_AfterWMInitTasks DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_AfterWMInitTasks DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_AfterWMInitTasks$12
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$_AfterWMInitTasks$13
	DD	04H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$_AfterWMInitTasks$14
	DD	06H
	DD	06H
	DD	07H
	DD	01H
	DD	FLAT:__catchsym$_AfterWMInitTasks$15
	DD	08H
	DD	08H
	DD	09H
	DD	01H
	DD	FLAT:__catchsym$_AfterWMInitTasks$16
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _AfterWMInitTasks
_TEXT	SEGMENT
$T167233 = -448						; size = 94
$T167234 = -354						; size = 94
_e$135312 = -260					; size = 4
_e$135273 = -256					; size = 4
_e$135309 = -252					; size = 4
_e$135228 = -248					; size = 4
_e$135316 = -244					; size = 4
_rW$167691 = -240					; size = 16
_rW$167369 = -224					; size = 16
_rW$167444 = -208					; size = 16
_rW$167616 = -192					; size = 16
_rW$167526 = -176					; size = 16
_rW$167286 = -160					; size = 16
_tmpStr$135293 = -144					; size = 24
_rD$167368 = -120					; size = 16
_rD$167285 = -104					; size = 16
_rD$167443 = -88					; size = 16
_rD$167690 = -72					; size = 16
_rD$167525 = -56					; size = 16
_rD$167615 = -40					; size = 16
_hiddenOSCreationPhase$135270 = -24			; size = 4
_hwndDlg$GSCopy$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_tmp$167449 = 0						; size = 130
_tmp$167531 = 132					; size = 130
_tmp$167374 = 264					; size = 130
_tmp$167621 = 396					; size = 130
_tmp$167291 = 528					; size = 130
_tmp$167696 = 660					; size = 130
__$ArrayPad$ = 792					; size = 4
_AfterWMInitTasks PROC					; COMDAT
; _hwndDlg$ = ecx

; 8480 : {

  00000	55		 push	 ebp
  00001	8d ac 24 e4 fc
	ff ff		 lea	 ebp, DWORD PTR [esp-796]
  00008	81 ec 1c 03 00
	00		 sub	 esp, 796		; 0000031cH
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$_AfterWMInitTasks
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	81 ec b4 01 00
	00		 sub	 esp, 436		; 000001b4H
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 85 18 03 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 8481 : 	// Note that if bDirectSysEncModeCommand is not SYSENC_COMMAND_NONE, we already have the mutex.
; 8482 : 
; 8483 : 	// SYSENC_COMMAND_DECRYPT has the highest priority because it also performs uninstallation (restores the
; 8484 : 	// original contents of the first drive cylinder, etc.) so it must be attempted regardless of the phase
; 8485 : 	// or content of configuration files.
; 8486 : 	if (bDirectSysEncModeCommand == SYSENC_COMMAND_DECRYPT)

  0003f	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?bDirectSysEncModeCommand@@3HA, 4 ; bDirectSysEncModeCommand
  00046	8b f9		 mov	 edi, ecx
  00048	89 7d ec	 mov	 DWORD PTR _hwndDlg$GSCopy$[ebp], edi
  0004b	0f 85 8c 01 00
	00		 jne	 $LN83@AfterWMIni

; 8487 : 	{
; 8488 : 		if (IsHiddenOSRunning())

  00051	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00056	85 c0		 test	 eax, eax
  00058	74 12		 je	 SHORT $LN82@AfterWMIni

; 8489 : 		{
; 8490 : 			Warning ("CANNOT_DECRYPT_HIDDEN_OS");

  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KGJBOMKO@CANNOT_DECRYPT_HIDDEN_OS?$AA@
  0005f	e8 00 00 00 00	 call	 _Warning
  00064	83 c4 04	 add	 esp, 4

; 8491 : 			AbortProcessSilent();

  00067	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN82@AfterWMIni:

; 8492 : 		}
; 8493 : 
; 8494 : 		// Add the wizard to the system startup sequence
; 8495 : 		ManageStartupSeqWiz (FALSE, "/acsysenc");

  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_09PIOBCILE@?1acsysenc?$AA@
  00071	33 db		 xor	 ebx, ebx
  00073	53		 push	 ebx
  00074	e8 00 00 00 00	 call	 _ManageStartupSeqWiz
  00079	83 c4 08	 add	 esp, 8

; 8496 : 
; 8497 : 		ChangeSystemEncryptionStatus (SYSENC_STATUS_DECRYPTING);

  0007c	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00081	85 c0		 test	 eax, eax
  00083	75 0f		 jne	 SHORT $LN112@AfterWMIni
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  0008a	e8 00 00 00 00	 call	 _Error
  0008f	83 c4 04	 add	 esp, 4
  00092	eb 1e		 jmp	 SHORT $LN108@AfterWMIni
$LN112@AfterWMIni:
  00094	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00099	c7 05 00 00 00
	00 58 02 00 00	 mov	 DWORD PTR _SystemEncryptionStatus, 600 ; 00000258H
  000a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bSystemEncryptionStatusChanged, 1
  000ad	e8 00 00 00 00	 call	 ?SaveSysEncSettings@@YAHPAUHWND__@@@Z ; SaveSysEncSettings
$LN108@AfterWMIni:

; 8498 : 		LoadPage (hwndDlg, SYSENC_ENCRYPTION_PAGE);

  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  000b7	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  000bc	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  000c2	74 65		 je	 SHORT $LN166@AfterWMIni
  000c4	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  000ce	83 f8 15	 cmp	 eax, 21			; 00000015H
  000d1	75 44		 jne	 SHORT $LN164@AfterWMIni
  000d3	68 82 00 00 00	 push	 130			; 00000082H
  000d8	8d 85 10 02 00
	00		 lea	 eax, DWORD PTR _tmp$167291[ebp]
  000de	6a 20		 push	 32			; 00000020H
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 _memset
  000e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  000eb	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextW@8
  000f1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f4	8d 95 10 02 00
	00		 lea	 edx, DWORD PTR _tmp$167291[ebp]
  000fa	52		 push	 edx
  000fb	33 c9		 xor	 ecx, ecx
  000fd	50		 push	 eax
  000fe	66 89 8d 90 02
	00 00		 mov	 WORD PTR _tmp$167291[ebp+128], cx
  00105	ff d6		 call	 esi
  00107	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  0010d	8d 8d 10 02 00
	00		 lea	 ecx, DWORD PTR _tmp$167291[ebp]
  00113	51		 push	 ecx
  00114	52		 push	 edx
  00115	ff d6		 call	 esi
$LN164@AfterWMIni:
  00117	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0011c	50		 push	 eax
  0011d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  00123	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN166@AfterWMIni:
  00129	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  0012f	e8 00 00 00 00	 call	 _NormalCursor
  00134	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _rW$167286[ebp]
  0013a	51		 push	 ecx
  0013b	68 23 04 00 00	 push	 1059			; 00000423H
  00140	57		 push	 edi
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00147	50		 push	 eax
  00148	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  0014e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  00154	53		 push	 ebx
  00155	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0015a	57		 push	 edi
  0015b	6a 7a		 push	 122			; 0000007aH
  0015d	52		 push	 edx
  0015e	c7 05 00 00 00
	00 1f 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 31 ; nCurPageNo, 0000001fH
  00168	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  0016e	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  00173	8d 45 98	 lea	 eax, DWORD PTR _rD$167285[ebp]
  00176	50		 push	 eax
  00177	57		 push	 edi
  00178	c7 45 98 a2 00
	00 00		 mov	 DWORD PTR _rD$167285[ebp], 162 ; 000000a2H
  0017f	c7 45 9c 19 00
	00 00		 mov	 DWORD PTR _rD$167285[ebp+4], 25 ; 00000019H
  00186	89 5d a0	 mov	 DWORD PTR _rD$167285[ebp+8], ebx
  00189	89 5d a4	 mov	 DWORD PTR _rD$167285[ebp+12], ebx
  0018c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  00192	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00197	3b c3		 cmp	 eax, ebx
  00199	0f 84 ea 0c 00
	00		 je	 $LN12@AfterWMIni
  0019f	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _rW$167286[ebp+12]
  001a5	2b 8d 64 ff ff
	ff		 sub	 ecx, DWORD PTR _rW$167286[ebp+4]
  001ab	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _rW$167286[ebp+8]
  001b1	2b 95 60 ff ff
	ff		 sub	 edx, DWORD PTR _rW$167286[ebp]
  001b7	6a 01		 push	 1
  001b9	51		 push	 ecx
  001ba	8b 4d 9c	 mov	 ecx, DWORD PTR _rD$167285[ebp+4]
  001bd	52		 push	 edx
  001be	8b 55 98	 mov	 edx, DWORD PTR _rD$167285[ebp]
$LN535@AfterWMIni:
  001c1	51		 push	 ecx
  001c2	52		 push	 edx
  001c3	50		 push	 eax
  001c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  001ca	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  001cf	6a 01		 push	 1
  001d1	50		 push	 eax
  001d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 8499 : 		return;

  001d8	e9 ac 0c 00 00	 jmp	 $LN12@AfterWMIni
$LN83@AfterWMIni:

; 8500 : 	}
; 8501 : 
; 8502 : 
; 8503 : 	if (SystemEncryptionStatus == SYSENC_STATUS_ENCRYPTING
; 8504 : 		|| SystemEncryptionStatus == SYSENC_STATUS_DECRYPTING)

  001dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  001e2	3d 90 01 00 00	 cmp	 eax, 400		; 00000190H
  001e7	74 0b		 je	 SHORT $LN80@AfterWMIni
  001e9	3d 58 02 00 00	 cmp	 eax, 600		; 00000258H
  001ee	0f 85 1e 01 00
	00		 jne	 $LN518@AfterWMIni
$LN80@AfterWMIni:

; 8505 : 	{
; 8506 : 		try
; 8507 : 		{
; 8508 : 			BootEncStatus = BootEncObj->GetStatus();

  001f4	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR $T167233[ebp]
  001fa	51		 push	 ecx
  001fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00201	33 db		 xor	 ebx, ebx
  00203	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00206	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  0020b	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00210	8b f0		 mov	 esi, eax
  00212	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00217	f3 a5		 rep movsd
  00219	66 a5		 movsw

; 8509 : 
; 8510 : 			if (!BootEncStatus.DriveMounted)

  0021b	39 1d 06 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, ebx
  00221	0f 85 b3 00 00
	00		 jne	 $LN75@AfterWMIni

; 8511 : 			{
; 8512 : 				if (!BootEncStatus.DeviceFilterActive)

  00227	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A, ebx
  0022d	0f 85 82 00 00
	00		 jne	 $LN77@AfterWMIni

; 8513 : 				{
; 8514 : 					// This is an inconsistent state. SystemEncryptionStatus should never be SYSENC_STATUS_ENCRYPTING
; 8515 : 					// or SYSENC_STATUS_DECRYPTING when the drive filter is not active. Possible causes: 1) corrupted
; 8516 : 					// or stale config file, 2) corrupted system
; 8517 : 
; 8518 : 					// Fix the inconsistency
; 8519 : 					ManageStartupSeqWiz (TRUE, "");

  00233	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00238	6a 01		 push	 1
  0023a	e8 00 00 00 00	 call	 _ManageStartupSeqWiz
  0023f	83 c4 08	 add	 esp, 8

; 8520 : 					ChangeSystemEncryptionStatus (SYSENC_STATUS_NONE);

  00242	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00247	85 c0		 test	 eax, eax
  00249	75 0f		 jne	 SHORT $LN179@AfterWMIni
  0024b	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  00250	e8 00 00 00 00	 call	 _Error
  00255	83 c4 04	 add	 esp, 4
  00258	eb 3e		 jmp	 SHORT $LN175@AfterWMIni
$LN179@AfterWMIni:
  0025a	89 1d 00 00 00
	00		 mov	 DWORD PTR _SystemEncryptionStatus, ebx
  00260	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bSystemEncryptionStatusChanged, 1
  0026a	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  0026f	85 c0		 test	 eax, eax
  00271	75 1b		 jne	 SHORT $LN177@AfterWMIni
  00273	e8 00 00 00 00	 call	 ?DetermineHiddenOSCreationPhase@@YAIXZ ; DetermineHiddenOSCreationPhase
  00278	3b c3		 cmp	 eax, ebx
  0027a	74 0d		 je	 SHORT $LN176@AfterWMIni
  0027c	53		 push	 ebx
  0027d	e8 00 00 00 00	 call	 ?ChangeHiddenOSCreationPhase@@YAHH@Z ; ChangeHiddenOSCreationPhase
  00282	83 c4 04	 add	 esp, 4
  00285	3b c3		 cmp	 eax, ebx
  00287	74 0f		 je	 SHORT $LN175@AfterWMIni
$LN176@AfterWMIni:
  00289	e8 00 00 00 00	 call	 _WipeHiddenOSCreationConfig
$LN177@AfterWMIni:
  0028e	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00293	e8 00 00 00 00	 call	 ?SaveSysEncSettings@@YAHPAUHWND__@@@Z ; SaveSysEncSettings
$LN175@AfterWMIni:

; 8521 : 					EndMainDlg (MainDlg);

  00298	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  0029e	e8 00 00 00 00	 call	 _EndMainDlg

; 8522 : 					InconsistencyResolved (SRC_POS);

  002a3	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EJNCCGAP@AfterWMInitTasks?38522?$AA@
  002a8	e8 00 00 00 00	 call	 _InconsistencyResolved
  002ad	83 c4 04	 add	 esp, 4
  002b0	e9 d4 0b 00 00	 jmp	 $LN12@AfterWMIni
$LN77@AfterWMIni:

; 8523 : 					return;
; 8524 : 				}
; 8525 : 				else if (bDirectSysEncMode)

  002b5	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bDirectSysEncMode@@3HA, ebx ; bDirectSysEncMode
  002bb	74 1d		 je	 SHORT $LN75@AfterWMIni

; 8526 : 				{
; 8527 : 					// This is an inconsistent state. We have a direct system encryption command, 
; 8528 : 					// SystemEncryptionStatus is SYSENC_STATUS_ENCRYPTING or SYSENC_STATUS_DECRYPTING, the
; 8529 : 					// system drive is not 'mounted' and drive filter is active.  Possible causes: 1) The drive had
; 8530 : 					// been decrypted in the pre-boot environment. 2) The OS is not located on the lowest partition,
; 8531 : 					// the drive is to be fully encrypted, but the user rebooted before encryption reached the 
; 8532 : 					// system partition and then pressed Esc in the boot loader screen. 3) Corrupted or stale config
; 8533 : 					// file. 4) Damaged system.
; 8534 : 					
; 8535 : 					Warning ("SYSTEM_ENCRYPTION_SCHEDULED_BUT_PBA_FAILED");

  002bd	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@LHNBFDMB@SYSTEM_ENCRYPTION_SCHEDULED_BUT_@
$LN531@AfterWMIni:
  002c2	e8 00 00 00 00	 call	 _Warning
  002c7	83 c4 04	 add	 esp, 4
$LN530@AfterWMIni:

; 8536 : 					EndMainDlg (MainDlg);

  002ca	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
$LN19@AfterWMIni:
  002d0	e8 00 00 00 00	 call	 _EndMainDlg

; 8537 : 					return;

  002d5	e9 af 0b 00 00	 jmp	 $LN12@AfterWMIni
$LN75@AfterWMIni:
  002da	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  002df	8b 7d ec	 mov	 edi, DWORD PTR _hwndDlg$GSCopy$[ebp]
  002e2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  002e9	eb 29		 jmp	 SHORT $LN99@AfterWMIni
__catch$_AfterWMInitTasks$0:

; 8538 : 				}
; 8539 : 			}
; 8540 : 		}
; 8541 : 		catch (Exception &e)
; 8542 : 		{
; 8543 : 			e.Show (MainDlg);

  002eb	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _e$135228[ebp]
  002f1	8b 11		 mov	 edx, DWORD PTR [ecx]
  002f3	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  002f8	8b 12		 mov	 edx, DWORD PTR [edx]
  002fa	50		 push	 eax
  002fb	ff d2		 call	 edx

; 8544 : 		}

  002fd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00304	b8 00 00 00 00	 mov	 eax, $LN517@AfterWMIni
  00309	c3		 ret	 0
$LN517@AfterWMIni:
  0030a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  0030f	8b 7d ec	 mov	 edi, DWORD PTR _hwndDlg$GSCopy$[ebp]
$LN518@AfterWMIni:
  00312	33 db		 xor	 ebx, ebx
$LN99@AfterWMIni:

; 8545 : 	}
; 8546 : 
; 8547 : 
; 8548 : 	if (SystemEncryptionStatus != SYSENC_STATUS_PRETEST)

  00314	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  00319	0f 84 29 03 00
	00		 je	 $LN72@AfterWMIni

; 8549 : 	{
; 8550 : 		// Handle system encryption command line arguments (if we're not in the Pretest phase).
; 8551 : 		// Note that if bDirectSysEncModeCommand is not SYSENC_COMMAND_NONE, we already have the mutex.
; 8552 : 		// Also note that SYSENC_COMMAND_DECRYPT is handled above.
; 8553 : 
; 8554 : 		switch (bDirectSysEncModeCommand)

  0031f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bDirectSysEncModeCommand@@3HA ; bDirectSysEncModeCommand
  00325	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]
  00328	83 f9 05	 cmp	 ecx, 5
  0032b	0f 87 17 03 00
	00		 ja	 $LN72@AfterWMIni
  00331	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN537@AfterWMIni[ecx*4]
$LN71@AfterWMIni:

; 8555 : 		{
; 8556 : 		case SYSENC_COMMAND_RESUME:
; 8557 : 		case SYSENC_COMMAND_STARTUP_SEQ_RESUME:
; 8558 : 
; 8559 : 			if (bDirectSysEncModeCommand == SYSENC_COMMAND_STARTUP_SEQ_RESUME
; 8560 : 				&& AskWarnYesNo ("SYSTEM_ENCRYPTION_RESUME_PROMPT") == IDNO)

  00338	83 fa 02	 cmp	 edx, 2
  0033b	75 16		 jne	 SHORT $LN70@AfterWMIni
  0033d	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HDGOHFPD@SYSTEM_ENCRYPTION_RESUME_PROMPT?$AA@
  00342	e8 00 00 00 00	 call	 _AskWarnYesNo
  00347	83 c4 04	 add	 esp, 4
  0034a	83 f8 07	 cmp	 eax, 7

; 8561 : 			{
; 8562 : 				EndMainDlg (MainDlg);
; 8563 : 				return;

  0034d	0f 84 77 ff ff
	ff		 je	 $LN530@AfterWMIni
$LN70@AfterWMIni:

; 8564 : 			}
; 8565 : 
; 8566 : 			if (SysEncryptionOrDecryptionRequired ())

  00353	e8 00 00 00 00	 call	 ?SysEncryptionOrDecryptionRequired@@YAHXZ ; SysEncryptionOrDecryptionRequired
  00358	85 c0		 test	 eax, eax
  0035a	0f 84 34 01 00
	00		 je	 $LN69@AfterWMIni

; 8567 : 			{
; 8568 : 				if (SystemEncryptionStatus != SYSENC_STATUS_ENCRYPTING
; 8569 : 					&& SystemEncryptionStatus != SYSENC_STATUS_DECRYPTING)

  00360	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  00365	3d 90 01 00 00	 cmp	 eax, 400		; 00000190H
  0036a	74 14		 je	 SHORT $LN67@AfterWMIni
  0036c	3d 58 02 00 00	 cmp	 eax, 600		; 00000258H
  00371	74 0d		 je	 SHORT $LN67@AfterWMIni

; 8570 : 				{
; 8571 : 					// If the config file with status was lost or not written correctly, we
; 8572 : 					// don't know whether to encrypt or decrypt (but we know that encryption or
; 8573 : 					// decryption is required). Ask the user to select encryption, decryption, 
; 8574 : 					// or cancel
; 8575 : 					if (!ResolveUnknownSysEncDirection ())

  00373	e8 00 00 00 00	 call	 _ResolveUnknownSysEncDirection
  00378	85 c0		 test	 eax, eax

; 8576 : 					{
; 8577 : 						EndMainDlg (MainDlg);
; 8578 : 						return;

  0037a	0f 84 4a ff ff
	ff		 je	 $LN530@AfterWMIni
$LN67@AfterWMIni:

; 8579 : 					}
; 8580 : 				}
; 8581 : 
; 8582 : 				LoadPage (hwndDlg, SYSENC_ENCRYPTION_PAGE);

  00380	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00385	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  0038a	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  00390	74 65		 je	 SHORT $LN233@AfterWMIni
  00392	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  0039c	83 f8 15	 cmp	 eax, 21			; 00000015H
  0039f	75 44		 jne	 SHORT $LN231@AfterWMIni
  003a1	68 82 00 00 00	 push	 130			; 00000082H
  003a6	8d 85 08 01 00
	00		 lea	 eax, DWORD PTR _tmp$167374[ebp]
  003ac	6a 20		 push	 32			; 00000020H
  003ae	50		 push	 eax
  003af	e8 00 00 00 00	 call	 _memset
  003b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  003b9	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextW@8
  003bf	83 c4 0c	 add	 esp, 12			; 0000000cH
  003c2	8d 95 08 01 00
	00		 lea	 edx, DWORD PTR _tmp$167374[ebp]
  003c8	52		 push	 edx
  003c9	33 c9		 xor	 ecx, ecx
  003cb	50		 push	 eax
  003cc	66 89 8d 88 01
	00 00		 mov	 WORD PTR _tmp$167374[ebp+128], cx
  003d3	ff d6		 call	 esi
  003d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  003db	8d 8d 08 01 00
	00		 lea	 ecx, DWORD PTR _tmp$167374[ebp]
  003e1	51		 push	 ecx
  003e2	52		 push	 edx
  003e3	ff d6		 call	 esi
$LN231@AfterWMIni:
  003e5	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  003ea	50		 push	 eax
  003eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  003f1	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN233@AfterWMIni:
  003f7	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  003fd	e8 00 00 00 00	 call	 _NormalCursor
  00402	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _rW$167369[ebp]
  00408	51		 push	 ecx
  00409	68 23 04 00 00	 push	 1059			; 00000423H
  0040e	57		 push	 edi
  0040f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00415	50		 push	 eax
  00416	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  0041c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  00422	53		 push	 ebx
  00423	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00428	57		 push	 edi
  00429	6a 7a		 push	 122			; 0000007aH
  0042b	52		 push	 edx
  0042c	c7 05 00 00 00
	00 1f 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 31 ; nCurPageNo, 0000001fH
  00436	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  0043c	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  00441	8d 45 88	 lea	 eax, DWORD PTR _rD$167368[ebp]
  00444	50		 push	 eax
  00445	57		 push	 edi
  00446	c7 45 88 a2 00
	00 00		 mov	 DWORD PTR _rD$167368[ebp], 162 ; 000000a2H
  0044d	c7 45 8c 19 00
	00 00		 mov	 DWORD PTR _rD$167368[ebp+4], 25 ; 00000019H
  00454	89 5d 90	 mov	 DWORD PTR _rD$167368[ebp+8], ebx
  00457	89 5d 94	 mov	 DWORD PTR _rD$167368[ebp+12], ebx
  0045a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  00460	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00465	3b c3		 cmp	 eax, ebx
  00467	0f 84 1c 0a 00
	00		 je	 $LN12@AfterWMIni
  0046d	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR _rW$167369[ebp+12]
  00473	2b 8d 24 ff ff
	ff		 sub	 ecx, DWORD PTR _rW$167369[ebp+4]
  00479	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _rW$167369[ebp+8]
  0047f	2b 95 20 ff ff
	ff		 sub	 edx, DWORD PTR _rW$167369[ebp]
  00485	6a 01		 push	 1
  00487	51		 push	 ecx
  00488	8b 4d 8c	 mov	 ecx, DWORD PTR _rD$167368[ebp+4]
  0048b	52		 push	 edx
  0048c	8b 55 88	 mov	 edx, DWORD PTR _rD$167368[ebp]

; 8583 : 				return;

  0048f	e9 2d fd ff ff	 jmp	 $LN535@AfterWMIni
$LN69@AfterWMIni:

; 8584 : 			}
; 8585 : 			else
; 8586 : 			{
; 8587 : 				// Nothing to resume
; 8588 : 				Warning ("NOTHING_TO_RESUME");

  00494	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@BOICFCMD@NOTHING_TO_RESUME?$AA@

; 8589 : 				EndMainDlg (MainDlg);
; 8590 : 
; 8591 : 				return;

  00499	e9 24 fe ff ff	 jmp	 $LN531@AfterWMIni
$LN65@AfterWMIni:

; 8592 : 			}
; 8593 : 			break;
; 8594 : 
; 8595 : 		case SYSENC_COMMAND_ENCRYPT:
; 8596 : 
; 8597 : 			if (SysDriveOrPartitionFullyEncrypted (FALSE))

  0049e	53		 push	 ebx
  0049f	e8 00 00 00 00	 call	 ?SysDriveOrPartitionFullyEncrypted@@YAHH@Z ; SysDriveOrPartitionFullyEncrypted
  004a4	83 c4 04	 add	 esp, 4
  004a7	85 c0		 test	 eax, eax
  004a9	74 1d		 je	 SHORT $LN64@AfterWMIni

; 8598 : 			{
; 8599 : 				Info ("SYS_PARTITION_OR_DRIVE_APPEARS_FULLY_ENCRYPTED");

  004ab	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@MHIMBFBH@SYS_PARTITION_OR_DRIVE_APPEARS_F@
  004b0	e8 00 00 00 00	 call	 _Info
  004b5	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  004bb	83 c4 04	 add	 esp, 4
  004be	e8 00 00 00 00	 call	 _EndMainDlg
  004c3	e9 c1 09 00 00	 jmp	 $LN12@AfterWMIni
$LN64@AfterWMIni:

; 8600 : 				EndMainDlg (MainDlg);
; 8601 : 				return;
; 8602 : 			}
; 8603 : 
; 8604 : 			if (SysEncryptionOrDecryptionRequired ())

  004c8	e8 00 00 00 00	 call	 ?SysEncryptionOrDecryptionRequired@@YAHXZ ; SysEncryptionOrDecryptionRequired
  004cd	85 c0		 test	 eax, eax
  004cf	0f 84 2d 01 00
	00		 je	 $LN63@AfterWMIni

; 8605 : 			{
; 8606 : 				// System partition/drive encryption process already initiated but is incomplete.
; 8607 : 				// If we were encrypting, resume the process directly. If we were decrypting, reverse 
; 8608 : 				// the process and start encrypting.
; 8609 : 
; 8610 : 				ChangeSystemEncryptionStatus (SYSENC_STATUS_ENCRYPTING);

  004d5	be 90 01 00 00	 mov	 esi, 400		; 00000190H
  004da	e8 00 00 00 00	 call	 ?ChangeSystemEncryptionStatus@@YAHH@Z ; ChangeSystemEncryptionStatus

; 8611 : 				LoadPage (hwndDlg, SYSENC_ENCRYPTION_PAGE);

  004df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  004e4	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  004e9	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  004ef	74 5d		 je	 SHORT $LN293@AfterWMIni
  004f1	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  004fb	83 f8 15	 cmp	 eax, 21			; 00000015H
  004fe	75 3b		 jne	 SHORT $LN291@AfterWMIni
  00500	68 82 00 00 00	 push	 130			; 00000082H
  00505	8d 4d 00	 lea	 ecx, DWORD PTR _tmp$167449[ebp]
  00508	6a 20		 push	 32			; 00000020H
  0050a	51		 push	 ecx
  0050b	e8 00 00 00 00	 call	 _memset
  00510	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  00516	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextW@8
  0051c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0051f	8d 45 00	 lea	 eax, DWORD PTR _tmp$167449[ebp]
  00522	50		 push	 eax
  00523	33 d2		 xor	 edx, edx
  00525	51		 push	 ecx
  00526	66 89 95 80 00
	00 00		 mov	 WORD PTR _tmp$167449[ebp+128], dx
  0052d	ff d6		 call	 esi
  0052f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  00534	8d 55 00	 lea	 edx, DWORD PTR _tmp$167449[ebp]
  00537	52		 push	 edx
  00538	50		 push	 eax
  00539	ff d6		 call	 esi
$LN291@AfterWMIni:
  0053b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  00541	51		 push	 ecx
  00542	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  00548	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN293@AfterWMIni:
  0054e	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  00554	e8 00 00 00 00	 call	 _NormalCursor
  00559	8d 95 30 ff ff
	ff		 lea	 edx, DWORD PTR _rW$167444[ebp]
  0055f	52		 push	 edx
  00560	68 23 04 00 00	 push	 1059			; 00000423H
  00565	57		 push	 edi
  00566	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0056c	50		 push	 eax
  0056d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00573	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  00578	53		 push	 ebx
  00579	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  0057e	57		 push	 edi
  0057f	6a 7a		 push	 122			; 0000007aH
  00581	50		 push	 eax
  00582	c7 05 00 00 00
	00 1f 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 31 ; nCurPageNo, 0000001fH
  0058c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  00592	8d 4d a8	 lea	 ecx, DWORD PTR _rD$167443[ebp]
  00595	51		 push	 ecx
  00596	57		 push	 edi
  00597	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  0059c	c7 45 a8 a2 00
	00 00		 mov	 DWORD PTR _rD$167443[ebp], 162 ; 000000a2H
  005a3	c7 45 ac 19 00
	00 00		 mov	 DWORD PTR _rD$167443[ebp+4], 25 ; 00000019H
  005aa	89 5d b0	 mov	 DWORD PTR _rD$167443[ebp+8], ebx
  005ad	89 5d b4	 mov	 DWORD PTR _rD$167443[ebp+12], ebx
  005b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  005b6	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  005bb	3b c3		 cmp	 eax, ebx
  005bd	0f 84 c6 08 00
	00		 je	 $LN12@AfterWMIni
  005c3	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _rW$167444[ebp+12]
  005c9	2b 95 34 ff ff
	ff		 sub	 edx, DWORD PTR _rW$167444[ebp+4]
  005cf	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _rW$167444[ebp+8]
  005d5	2b 8d 30 ff ff
	ff		 sub	 ecx, DWORD PTR _rW$167444[ebp]
  005db	6a 01		 push	 1
  005dd	52		 push	 edx
  005de	8b 55 ac	 mov	 edx, DWORD PTR _rD$167443[ebp+4]
  005e1	51		 push	 ecx
  005e2	8b 4d a8	 mov	 ecx, DWORD PTR _rD$167443[ebp]
$LN536@AfterWMIni:
  005e5	52		 push	 edx
  005e6	51		 push	 ecx
  005e7	50		 push	 eax
  005e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  005ee	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  005f4	6a 01		 push	 1
  005f6	52		 push	 edx
  005f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
  005fd	e9 87 08 00 00	 jmp	 $LN12@AfterWMIni
$LN63@AfterWMIni:

; 8612 : 				return;
; 8613 : 			}
; 8614 : 			else
; 8615 : 			{
; 8616 : 				// Initiate the Pretest preparation phase
; 8617 : 				if (!SwitchWizardToSysEncMode ())

  00602	e8 00 00 00 00	 call	 _SwitchWizardToSysEncMode
  00607	85 c0		 test	 eax, eax
  00609	0f 85 7a 08 00
	00		 jne	 $LN12@AfterWMIni
  0060f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg

; 8618 : 				{
; 8619 : 					bDirectSysEncMode = FALSE;

  00615	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bDirectSysEncMode@@3HA, ebx ; bDirectSysEncMode
  0061b	e8 00 00 00 00	 call	 _EndMainDlg
  00620	e9 64 08 00 00	 jmp	 $LN12@AfterWMIni
$LN60@AfterWMIni:

; 8620 : 					EndMainDlg (MainDlg);
; 8621 : 				}
; 8622 : 				return;
; 8623 : 			}
; 8624 : 
; 8625 : 			break;
; 8626 : 
; 8627 : 		case SYSENC_COMMAND_CREATE_HIDDEN_OS_ELEV:
; 8628 : 		case SYSENC_COMMAND_CREATE_HIDDEN_OS:
; 8629 : 
; 8630 : 			if (!SwitchWizardToHiddenOSMode ())

  00625	e8 00 00 00 00	 call	 ?SwitchWizardToHiddenOSMode@@YAHXZ ; SwitchWizardToHiddenOSMode
  0062a	85 c0		 test	 eax, eax
  0062c	0f 85 57 08 00
	00		 jne	 $LN12@AfterWMIni
  00632	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg

; 8631 : 			{
; 8632 : 				bDirectSysEncMode = FALSE;

  00638	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bDirectSysEncMode@@3HA, ebx ; bDirectSysEncMode
  0063e	e8 00 00 00 00	 call	 _EndMainDlg
  00643	e9 41 08 00 00	 jmp	 $LN12@AfterWMIni
$LN72@AfterWMIni:

; 8633 : 				EndMainDlg (MainDlg);
; 8634 : 			}
; 8635 : 			return;
; 8636 : 		}
; 8637 : 	}
; 8638 : 
; 8639 : 
; 8640 : 	if (!bDirectSysEncMode
; 8641 : 		|| bDirectSysEncMode && SystemEncryptionStatus == SYSENC_STATUS_NONE)

  00648	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bDirectSysEncMode@@3HA, ebx ; bDirectSysEncMode
  0064e	74 07		 je	 SHORT $LN57@AfterWMIni
  00650	3b c3		 cmp	 eax, ebx

; 8642 : 	{
; 8643 : 		// Handle system encryption cases where the wizard did not start even though it
; 8644 : 		// was added to the startup sequence, as well as other weird cases and "leftovers"
; 8645 : 
; 8646 : 		if (SystemEncryptionStatus != SYSENC_STATUS_NONE
; 8647 : 			&& SystemEncryptionStatus != SYSENC_STATUS_PRETEST
; 8648 : 			&& SysEncryptionOrDecryptionRequired ())

  00652	e9 7b 02 00 00	 jmp	 $LN527@AfterWMIni
$LN57@AfterWMIni:
  00657	3b c3		 cmp	 eax, ebx
  00659	0f 84 d1 01 00
	00		 je	 $LN56@AfterWMIni
  0065f	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  00664	0f 84 d1 01 00
	00		 je	 $LN511@AfterWMIni
  0066a	e8 00 00 00 00	 call	 ?SysEncryptionOrDecryptionRequired@@YAHXZ ; SysEncryptionOrDecryptionRequired
  0066f	85 c0		 test	 eax, eax
  00671	0f 84 b4 01 00
	00		 je	 $LN519@AfterWMIni

; 8649 : 		{
; 8650 : 			// System encryption/decryption had been in progress and did not finish
; 8651 : 
; 8652 : 			if (CreateSysEncMutex ())	// If no other instance is currently taking care of system encryption

  00677	e8 00 00 00 00	 call	 _CreateSysEncMutex
  0067c	85 c0		 test	 eax, eax
  0067e	0f 84 92 02 00
	00		 je	 $LN45@AfterWMIni

; 8653 : 			{
; 8654 : 				if (AskWarnYesNo ("SYSTEM_ENCRYPTION_RESUME_PROMPT") == IDYES)

  00684	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HDGOHFPD@SYSTEM_ENCRYPTION_RESUME_PROMPT?$AA@
  00689	e8 00 00 00 00	 call	 _AskWarnYesNo
  0068e	83 c4 04	 add	 esp, 4
  00691	83 f8 06	 cmp	 eax, 6
  00694	0f 85 77 02 00
	00		 jne	 $LN54@AfterWMIni

; 8655 : 				{
; 8656 : 					bDirectSysEncMode = TRUE;
; 8657 : 					ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

  0069a	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  0069f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bDirectSysEncMode@@3HA, 1 ; bDirectSysEncMode
  006a9	83 f8 02	 cmp	 eax, 2
  006ac	74 57		 je	 SHORT $LN310@AfterWMIni

; 8823 : 						{
; 8824 : 						case 1:
; 8825 : 							// User wants to restart and continue/retry
; 8826 : 							bAnswerTerminate = FALSE;
; 8827 : 							bAnswerRetry = TRUE;
; 8828 : 							break;
; 8829 : 
; 8830 : 						case 2:
; 8831 : 							// User doesn't want to retry but wants to terminate the entire process of hidden OS creation
; 8832 : 							bAnswerTerminate = TRUE;
; 8833 : 							bAnswerRetry = FALSE;
; 8834 : 							break;
; 8835 : 
; 8836 : 						default:
; 8837 : 							// User doesn't want to do anything now
; 8838 : 							bAnswerTerminate = FALSE;
; 8839 : 							bAnswerRetry = FALSE;

  006ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  006b4	e8 00 00 00 00	 call	 _CreateSysEncMutex
  006b9	85 c0		 test	 eax, eax
  006bb	75 0f		 jne	 SHORT $LN306@AfterWMIni
  006bd	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  006c2	e8 00 00 00 00	 call	 _Error
  006c7	83 c4 04	 add	 esp, 4
  006ca	eb 4b		 jmp	 SHORT $LN302@AfterWMIni

; 8655 : 				{
; 8656 : 					bDirectSysEncMode = TRUE;
; 8657 : 					ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

$LN306@AfterWMIni:
  006cc	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
  006d1	89 1d 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, ebx
  006d7	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szFileName@@3PADA, bl
  006dd	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szDiskFile@@3PADA, bl
  006e3	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, ebx
  006e9	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx
  006ef	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, ebx
  006f5	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ebx
  006fb	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR _WizardMode, 2
$LN310@AfterWMIni:
  00705	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  0070b	f7 da		 neg	 edx
  0070d	1b d2		 sbb	 edx, edx
  0070f	f7 da		 neg	 edx
  00711	89 15 00 00 00
	00		 mov	 DWORD PTR ?bDevice@@3HA, edx ; bDevice
$LN302@AfterWMIni:

; 8658 : 					LoadPage (hwndDlg, SYSENC_ENCRYPTION_PAGE);

  00717	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  0071c	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  00721	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  00727	74 65		 je	 SHORT $LN365@AfterWMIni
  00729	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  00733	83 f8 15	 cmp	 eax, 21			; 00000015H
  00736	75 44		 jne	 SHORT $LN363@AfterWMIni
  00738	68 82 00 00 00	 push	 130			; 00000082H
  0073d	8d 85 84 00 00
	00		 lea	 eax, DWORD PTR _tmp$167531[ebp]
  00743	6a 20		 push	 32			; 00000020H
  00745	50		 push	 eax
  00746	e8 00 00 00 00	 call	 _memset
  0074b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  00750	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextW@8
  00756	83 c4 0c	 add	 esp, 12			; 0000000cH
  00759	8d 95 84 00 00
	00		 lea	 edx, DWORD PTR _tmp$167531[ebp]
  0075f	52		 push	 edx
  00760	33 c9		 xor	 ecx, ecx
  00762	50		 push	 eax
  00763	66 89 8d 04 01
	00 00		 mov	 WORD PTR _tmp$167531[ebp+128], cx
  0076a	ff d6		 call	 esi
  0076c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  00772	8d 8d 84 00 00
	00		 lea	 ecx, DWORD PTR _tmp$167531[ebp]
  00778	51		 push	 ecx
  00779	52		 push	 edx
  0077a	ff d6		 call	 esi
$LN363@AfterWMIni:
  0077c	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00781	50		 push	 eax
  00782	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  00788	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN365@AfterWMIni:
  0078e	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  00794	e8 00 00 00 00	 call	 _NormalCursor
  00799	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _rW$167526[ebp]
  0079f	51		 push	 ecx
  007a0	68 23 04 00 00	 push	 1059			; 00000423H
  007a5	57		 push	 edi
  007a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  007ac	50		 push	 eax
  007ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  007b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  007b9	53		 push	 ebx
  007ba	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  007bf	57		 push	 edi
  007c0	6a 7a		 push	 122			; 0000007aH
  007c2	52		 push	 edx
  007c3	c7 05 00 00 00
	00 1f 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 31 ; nCurPageNo, 0000001fH
  007cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  007d3	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  007d8	8d 45 c8	 lea	 eax, DWORD PTR _rD$167525[ebp]
  007db	50		 push	 eax
  007dc	57		 push	 edi
  007dd	c7 45 c8 a2 00
	00 00		 mov	 DWORD PTR _rD$167525[ebp], 162 ; 000000a2H
  007e4	c7 45 cc 19 00
	00 00		 mov	 DWORD PTR _rD$167525[ebp+4], 25 ; 00000019H
  007eb	89 5d d0	 mov	 DWORD PTR _rD$167525[ebp+8], ebx
  007ee	89 5d d4	 mov	 DWORD PTR _rD$167525[ebp+12], ebx
  007f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  007f7	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  007fc	3b c3		 cmp	 eax, ebx
  007fe	0f 84 85 06 00
	00		 je	 $LN12@AfterWMIni
  00804	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _rW$167526[ebp+12]
  0080a	2b 8d 54 ff ff
	ff		 sub	 ecx, DWORD PTR _rW$167526[ebp+4]
  00810	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _rW$167526[ebp+8]
  00816	2b 95 50 ff ff
	ff		 sub	 edx, DWORD PTR _rW$167526[ebp]
  0081c	6a 01		 push	 1
  0081e	51		 push	 ecx
  0081f	8b 4d cc	 mov	 ecx, DWORD PTR _rD$167525[ebp+4]
  00822	52		 push	 edx
  00823	8b 55 c8	 mov	 edx, DWORD PTR _rD$167525[ebp]

; 8659 : 					return;

  00826	e9 96 f9 ff ff	 jmp	 $LN535@AfterWMIni
$LN519@AfterWMIni:

; 8660 : 				}
; 8661 : 				else
; 8662 : 					CloseSysEncMutex ();
; 8663 : 			}
; 8664 : 		}

  0082b	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
$LN56@AfterWMIni:

; 8665 : 
; 8666 : 		else if (SystemEncryptionStatus == SYSENC_STATUS_PRETEST)

  00830	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  00835	0f 85 8e 00 00
	00		 jne	 $LN51@AfterWMIni
$LN511@AfterWMIni:

; 8667 : 		{
; 8668 : 			// System pretest had been in progress but we were not launched during the startup seq
; 8669 : 
; 8670 : 			if (CreateSysEncMutex ())	// If no other instance is currently taking care of system encryption

  0083b	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00840	85 c0		 test	 eax, eax
  00842	0f 84 ce 00 00
	00		 je	 $LN45@AfterWMIni

; 8671 : 			{
; 8672 : 				// The pretest has "priority handling"
; 8673 : 				bDirectSysEncMode = TRUE;
; 8674 : 				ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

  00848	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  0084e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bDirectSysEncMode@@3HA, 1 ; bDirectSysEncMode
  00858	83 f9 02	 cmp	 ecx, 2
  0085b	74 5a		 je	 SHORT $LN382@AfterWMIni

; 8823 : 						{
; 8824 : 						case 1:
; 8825 : 							// User wants to restart and continue/retry
; 8826 : 							bAnswerTerminate = FALSE;
; 8827 : 							bAnswerRetry = TRUE;
; 8828 : 							break;
; 8829 : 
; 8830 : 						case 2:
; 8831 : 							// User doesn't want to retry but wants to terminate the entire process of hidden OS creation
; 8832 : 							bAnswerTerminate = TRUE;
; 8833 : 							bAnswerRetry = FALSE;
; 8834 : 							break;
; 8835 : 
; 8836 : 						default:
; 8837 : 							// User doesn't want to do anything now
; 8838 : 							bAnswerTerminate = FALSE;
; 8839 : 							bAnswerRetry = FALSE;

  0085d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  00863	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00868	85 c0		 test	 eax, eax
  0086a	75 12		 jne	 SHORT $LN378@AfterWMIni
  0086c	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  00871	e8 00 00 00 00	 call	 _Error
  00876	83 c4 04	 add	 esp, 4
  00879	e9 98 00 00 00	 jmp	 $LN45@AfterWMIni

; 8671 : 			{
; 8672 : 				// The pretest has "priority handling"
; 8673 : 				bDirectSysEncMode = TRUE;
; 8674 : 				ChangeWizardMode (WIZARD_MODE_SYS_DEVICE);

$LN378@AfterWMIni:
  0087e	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
  00883	89 1d 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, ebx
  00889	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szFileName@@3PADA, bl
  0088f	88 1d 00 00 00
	00		 mov	 BYTE PTR ?szDiskFile@@3PADA, bl
  00895	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, ebx
  0089b	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, ebx
  008a1	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, ebx
  008a7	89 1d 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, ebx
  008ad	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR _WizardMode, 2
$LN382@AfterWMIni:
  008b7	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  008bc	f7 d8		 neg	 eax
  008be	1b c0		 sbb	 eax, eax
  008c0	f7 d8		 neg	 eax
  008c2	a3 00 00 00 00	 mov	 DWORD PTR ?bDevice@@3HA, eax ; bDevice

; 8675 : 
; 8676 : 				/* Do not return yet -- the principal pretest handler is below. */
; 8677 : 			}
; 8678 : 		}
; 8679 : 
; 8680 : 		else if ((SystemEncryptionStatus == SYSENC_STATUS_NONE || SystemEncryptionStatus == SYSENC_STATUS_DECRYPTING)

  008c7	eb 4d		 jmp	 SHORT $LN45@AfterWMIni
$LN51@AfterWMIni:

; 8681 : 			&& !BootEncStatus.DriveEncrypted 
; 8682 : 			&& (BootEncStatus.DriveMounted || BootEncStatus.VolumeHeaderPresent))

  008c9	3b c3		 cmp	 eax, ebx
  008cb	74 07		 je	 SHORT $LN47@AfterWMIni
  008cd	3d 58 02 00 00	 cmp	 eax, 600		; 00000258H
$LN527@AfterWMIni:
  008d2	75 42		 jne	 SHORT $LN45@AfterWMIni
$LN47@AfterWMIni:
  008d4	39 1d 0e 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+14, ebx
  008da	75 3a		 jne	 SHORT $LN45@AfterWMIni
  008dc	39 1d 06 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, ebx
  008e2	75 08		 jne	 SHORT $LN46@AfterWMIni
  008e4	39 1d 0a 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+10, ebx
  008ea	74 2a		 je	 SHORT $LN45@AfterWMIni
$LN46@AfterWMIni:

; 8683 : 		{
; 8684 : 			// The pretest may have been in progress but we can't be sure (it is not in the config file).
; 8685 : 			// Another possibility is that the user had finished decrypting the drive, but the config file
; 8686 : 			// was not correctly updated. In both cases the best thing we can do is remove the header and 
; 8687 : 			// deinstall. Otherwise, the result might be some kind of deadlock.
; 8688 : 
; 8689 : 			if (CreateSysEncMutex ())	// If no other instance is currently taking care of system encryption

  008ec	e8 00 00 00 00	 call	 _CreateSysEncMutex
  008f1	85 c0		 test	 eax, eax
  008f3	74 21		 je	 SHORT $LN45@AfterWMIni

; 8690 : 			{
; 8691 : 				WaitCursor ();

  008f5	e8 00 00 00 00	 call	 _WaitCursor

; 8692 : 
; 8693 : 				ForceRemoveSysEnc();

  008fa	e8 00 00 00 00	 call	 ?ForceRemoveSysEnc@@YAHXZ ; ForceRemoveSysEnc

; 8694 : 
; 8695 : 				InconsistencyResolved (SRC_POS);

  008ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@BIHDPAMH@AfterWMInitTasks?38695?$AA@
  00904	e8 00 00 00 00	 call	 _InconsistencyResolved
  00909	83 c4 04	 add	 esp, 4

; 8696 : 
; 8697 : 				NormalCursor();

  0090c	e8 00 00 00 00	 call	 _NormalCursor
$LN54@AfterWMIni:

; 8698 : 				CloseSysEncMutex ();

  00911	e8 00 00 00 00	 call	 _CloseSysEncMutex
$LN45@AfterWMIni:

; 8699 : 			}
; 8700 : 		}
; 8701 : 	}
; 8702 : 
; 8703 : 	if (bDirectSysEncMode && CreateSysEncMutex ())

  00916	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bDirectSysEncMode@@3HA, ebx ; bDirectSysEncMode
  0091c	0f 84 c8 04 00
	00		 je	 $LN44@AfterWMIni
  00922	e8 00 00 00 00	 call	 _CreateSysEncMutex
  00927	85 c0		 test	 eax, eax
  00929	0f 84 bb 04 00
	00		 je	 $LN44@AfterWMIni

; 8704 : 	{
; 8705 : 		// We were launched either by Mount or by the system (startup sequence). Most of such cases should have 
; 8706 : 		// been handled above already. Here we handle only the pretest phase (which can also be a hidden OS 
; 8707 : 		// creation phase actually) and possible inconsistencies.
; 8708 : 
; 8709 : 		switch (SystemEncryptionStatus)

  0092f	81 3d 00 00 00
	00 c8 00 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 200 ; 000000c8H
  00939	74 30		 je	 SHORT $LN41@AfterWMIni

; 8904 : 					}
; 8905 : 				}
; 8906 : 			}
; 8907 : 			break;
; 8908 : 
; 8909 : 		default:
; 8910 : 
; 8911 : 			// Unexpected progress status -- fix the inconsistency
; 8912 : 
; 8913 : 			ManageStartupSeqWiz (TRUE, "");

  0093b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00940	6a 01		 push	 1
  00942	e8 00 00 00 00	 call	 _ManageStartupSeqWiz

; 8914 : 			ChangeSystemEncryptionStatus (SYSENC_STATUS_NONE);

  00947	33 f6		 xor	 esi, esi
  00949	e8 00 00 00 00	 call	 ?ChangeSystemEncryptionStatus@@YAHH@Z ; ChangeSystemEncryptionStatus

; 8915 : 			EndMainDlg (MainDlg);

  0094e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  00954	e8 00 00 00 00	 call	 _EndMainDlg

; 8916 : 			InconsistencyResolved (SRC_POS);

  00959	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@GFCOOCOK@AfterWMInitTasks?38916?$AA@
  0095e	e8 00 00 00 00	 call	 _InconsistencyResolved
  00963	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8917 : 			return;

  00966	e9 1e 05 00 00	 jmp	 $LN12@AfterWMIni
$LN41@AfterWMIni:

; 8710 : 		{
; 8711 : 		case SYSENC_STATUS_PRETEST:
; 8712 : 			{
; 8713 : 				unsigned int hiddenOSCreationPhase = DetermineHiddenOSCreationPhase();

  0096b	e8 00 00 00 00	 call	 ?DetermineHiddenOSCreationPhase@@YAIXZ ; DetermineHiddenOSCreationPhase

; 8714 : 
; 8715 : 				bHiddenOS = (hiddenOSCreationPhase != TC_HIDDEN_OS_CREATION_PHASE_NONE);

  00970	33 c9		 xor	 ecx, ecx
  00972	3b c3		 cmp	 eax, ebx
  00974	0f 95 c1	 setne	 cl

; 8716 : 
; 8717 : 				// Evaluate the results of the system encryption pretest (or of the hidden OS creation process)
; 8718 : 
; 8719 : 				try
; 8720 : 				{
; 8721 : 					BootEncStatus = BootEncObj->GetStatus();

  00977	8d 95 9e fe ff
	ff		 lea	 edx, DWORD PTR $T167234[ebp]
  0097d	52		 push	 edx
  0097e	89 45 e8	 mov	 DWORD PTR _hiddenOSCreationPhase$135270[ebp], eax
  00981	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  00988	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bHiddenOS@@3HC, ecx ; bHiddenOS
  0098e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00994	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00999	8b f0		 mov	 esi, eax

; 8732 : 				{
; 8733 : 					/* Pretest successful or hidden OS has been booted during the process of hidden OS creation. */
; 8734 : 
; 8735 : 					switch (hiddenOSCreationPhase)

  0099b	8b 45 e8	 mov	 eax, DWORD PTR _hiddenOSCreationPhase$135270[ebp]
  0099e	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  009a3	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  009a8	f3 a5		 rep movsd
  009aa	66 a5		 movsw
  009ac	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 8729 : 				}
; 8730 : 
; 8731 : 				if (BootEncStatus.DriveMounted)

  009b3	39 1d 06 00 00
	00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, ebx
  009b9	0f 84 a8 02 00
	00		 je	 $LN39@AfterWMIni

; 8732 : 				{
; 8733 : 					/* Pretest successful or hidden OS has been booted during the process of hidden OS creation. */
; 8734 : 
; 8735 : 					switch (hiddenOSCreationPhase)

  009bf	2b c3		 sub	 eax, ebx
  009c1	0f 84 5a 01 00
	00		 je	 $LN36@AfterWMIni
  009c7	2d 80 00 00 00	 sub	 eax, 128		; 00000080H
  009cc	74 3c		 je	 SHORT $LN34@AfterWMIni
  009ce	83 e8 40	 sub	 eax, 64			; 00000040H
  009d1	74 1d		 je	 SHORT $LN33@AfterWMIni

; 8774 : 
; 8775 : 						EndMainDlg (MainDlg);
; 8776 : 						return;
; 8777 : 
; 8778 : 					default:
; 8779 : 
; 8780 : 						// Unexpected/unknown status
; 8781 : 						ReportUnexpectedState (SRC_POS);

  009d3	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@MFGBDIJB@AfterWMInitTasks?38781?$AA@
  009d8	e8 00 00 00 00	 call	 _ReportUnexpectedState
  009dd	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  009e3	83 c4 04	 add	 esp, 4
  009e6	e8 00 00 00 00	 call	 _EndMainDlg
  009eb	e9 99 04 00 00	 jmp	 $LN12@AfterWMIni
$LN33@AfterWMIni:

; 8768 : 
; 8769 : 					case TC_HIDDEN_OS_CREATION_PHASE_WIPED:
; 8770 : 
; 8771 : 						// Hidden OS has been booted and the original OS wiped. Now the user is required to install a new, decoy, OS.
; 8772 : 
; 8773 : 						TextInfoDialogBox (TC_TBXID_DECOY_OS_INSTRUCTIONS);

  009f0	6a 03		 push	 3
  009f2	e8 00 00 00 00	 call	 _TextInfoDialogBox
  009f7	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  009fd	83 c4 04	 add	 esp, 4
  00a00	e8 00 00 00 00	 call	 _EndMainDlg
  00a05	e9 7f 04 00 00	 jmp	 $LN12@AfterWMIni
$LN34@AfterWMIni:

; 8761 : 
; 8762 : 					case TC_HIDDEN_OS_CREATION_PHASE_WIPING:
; 8763 : 
; 8764 : 						// Hidden OS has been booted when we are supposed to wipe the original OS
; 8765 : 
; 8766 : 						LoadPage (hwndDlg, SYSENC_HIDDEN_OS_INITIAL_INFO_PAGE);

  00a0a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00a0f	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  00a14	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  00a1a	74 65		 je	 SHORT $LN497@AfterWMIni
  00a1c	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  00a26	83 f8 15	 cmp	 eax, 21			; 00000015H
  00a29	75 44		 jne	 SHORT $LN495@AfterWMIni
  00a2b	68 82 00 00 00	 push	 130			; 00000082H
  00a30	8d 85 94 02 00
	00		 lea	 eax, DWORD PTR _tmp$167696[ebp]
  00a36	6a 20		 push	 32			; 00000020H
  00a38	50		 push	 eax
  00a39	e8 00 00 00 00	 call	 _memset
  00a3e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  00a43	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextW@8
  00a49	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a4c	8d 95 94 02 00
	00		 lea	 edx, DWORD PTR _tmp$167696[ebp]
  00a52	52		 push	 edx
  00a53	33 c9		 xor	 ecx, ecx
  00a55	50		 push	 eax
  00a56	66 89 8d 14 03
	00 00		 mov	 WORD PTR _tmp$167696[ebp+128], cx
  00a5d	ff d6		 call	 esi
  00a5f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  00a65	8d 8d 94 02 00
	00		 lea	 ecx, DWORD PTR _tmp$167696[ebp]
  00a6b	51		 push	 ecx
  00a6c	52		 push	 edx
  00a6d	ff d6		 call	 esi
$LN495@AfterWMIni:
  00a6f	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00a74	50		 push	 eax
  00a75	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  00a7b	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN497@AfterWMIni:
  00a81	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  00a87	e8 00 00 00 00	 call	 _NormalCursor
  00a8c	8b 75 ec	 mov	 esi, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00a8f	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _rW$167691[ebp]
  00a95	51		 push	 ecx
  00a96	68 23 04 00 00	 push	 1059			; 00000423H
  00a9b	56		 push	 esi
  00a9c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00aa2	50		 push	 eax
  00aa3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00aa9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  00aaf	53		 push	 ebx
  00ab0	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00ab5	56		 push	 esi
  00ab6	6a 6c		 push	 108			; 0000006cH
  00ab8	52		 push	 edx
  00ab9	c7 05 00 00 00
	00 28 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 40 ; nCurPageNo, 00000028H
  00ac3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  00ac9	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  00ace	8d 45 b8	 lea	 eax, DWORD PTR _rD$167690[ebp]
  00ad1	50		 push	 eax
  00ad2	56		 push	 esi
  00ad3	c7 45 b8 a2 00
	00 00		 mov	 DWORD PTR _rD$167690[ebp], 162 ; 000000a2H
  00ada	c7 45 bc 19 00
	00 00		 mov	 DWORD PTR _rD$167690[ebp+4], 25 ; 00000019H
  00ae1	89 5d c0	 mov	 DWORD PTR _rD$167690[ebp+8], ebx
  00ae4	89 5d c4	 mov	 DWORD PTR _rD$167690[ebp+12], ebx
  00ae7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  00aed	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00af2	3b c3		 cmp	 eax, ebx
  00af4	0f 84 8f 03 00
	00		 je	 $LN12@AfterWMIni
  00afa	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _rW$167691[ebp+12]
  00b00	2b 8d 14 ff ff
	ff		 sub	 ecx, DWORD PTR _rW$167691[ebp+4]
  00b06	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR _rW$167691[ebp+8]
  00b0c	2b 95 10 ff ff
	ff		 sub	 edx, DWORD PTR _rW$167691[ebp]
  00b12	6a 01		 push	 1
  00b14	51		 push	 ecx
  00b15	8b 4d bc	 mov	 ecx, DWORD PTR _rD$167690[ebp+4]
  00b18	52		 push	 edx
  00b19	8b 55 b8	 mov	 edx, DWORD PTR _rD$167690[ebp]

; 8767 : 						return;

  00b1c	e9 a0 f6 ff ff	 jmp	 $LN535@AfterWMIni
$LN36@AfterWMIni:

; 8736 : 					{
; 8737 : 					case TC_HIDDEN_OS_CREATION_PHASE_NONE:
; 8738 : 
; 8739 : 						// Pretest successful (or the hidden OS has been booted for the first time since the user started installing a new decoy OS)
; 8740 : 
; 8741 : 						if (IsHiddenOSRunning())

  00b21	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00b26	85 c0		 test	 eax, eax
  00b28	74 26		 je	 SHORT $LN35@AfterWMIni
$LN107@AfterWMIni:

; 8742 : 						{
; 8743 : 							// The hidden OS has been booted for the first time since the user started installing a
; 8744 : 							// new decoy OS (presumably, our MBR config flags have been erased).
; 8745 : 							
; 8746 : 							// As for things we are responsible for, the process of hidden OS creation is completed
; 8747 : 							// (the rest is up to the user).
; 8748 : 
; 8749 : 							ManageStartupSeqWiz (TRUE, "");

  00b2a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00b2f	6a 01		 push	 1
  00b31	e8 00 00 00 00	 call	 _ManageStartupSeqWiz
  00b36	83 c4 08	 add	 esp, 8

; 8750 : 							ChangeSystemEncryptionStatus (SYSENC_STATUS_NONE);

  00b39	33 f6		 xor	 esi, esi
  00b3b	e8 00 00 00 00	 call	 ?ChangeSystemEncryptionStatus@@YAHH@Z ; ChangeSystemEncryptionStatus
  00b40	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  00b46	e8 00 00 00 00	 call	 _EndMainDlg
  00b4b	e9 39 03 00 00	 jmp	 $LN12@AfterWMIni
$LN35@AfterWMIni:

; 8751 : 
; 8752 : 							EndMainDlg (MainDlg);
; 8753 : 							
; 8754 : 							return;
; 8755 : 						}
; 8756 : 
; 8757 : 						// Pretest successful (no hidden operating system involved)
; 8758 : 
; 8759 : 						LoadPage (hwndDlg, SYSENC_PRETEST_RESULT_PAGE);

  00b50	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00b55	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  00b5a	39 1d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, ebx
  00b60	74 66		 je	 SHORT $LN437@AfterWMIni
  00b62	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  00b6c	83 f8 15	 cmp	 eax, 21			; 00000015H
  00b6f	75 44		 jne	 SHORT $LN435@AfterWMIni
  00b71	68 82 00 00 00	 push	 130			; 00000082H
  00b76	8d 8d 8c 01 00
	00		 lea	 ecx, DWORD PTR _tmp$167621[ebp]
  00b7c	6a 20		 push	 32			; 00000020H
  00b7e	51		 push	 ecx
  00b7f	e8 00 00 00 00	 call	 _memset
  00b84	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  00b8a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextW@8
  00b90	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b93	8d 85 8c 01 00
	00		 lea	 eax, DWORD PTR _tmp$167621[ebp]
  00b99	50		 push	 eax
  00b9a	33 d2		 xor	 edx, edx
  00b9c	51		 push	 ecx
  00b9d	66 89 95 0c 02
	00 00		 mov	 WORD PTR _tmp$167621[ebp+128], dx
  00ba4	ff d6		 call	 esi
  00ba6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  00bab	8d 95 8c 01 00
	00		 lea	 edx, DWORD PTR _tmp$167621[ebp]
  00bb1	52		 push	 edx
  00bb2	50		 push	 eax
  00bb3	ff d6		 call	 esi
$LN435@AfterWMIni:
  00bb5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  00bbb	51		 push	 ecx
  00bbc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  00bc2	89 1d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, ebx
$LN437@AfterWMIni:
  00bc8	89 1d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, ebx
  00bce	e8 00 00 00 00	 call	 _NormalCursor
  00bd3	8b 75 ec	 mov	 esi, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00bd6	8d 95 40 ff ff
	ff		 lea	 edx, DWORD PTR _rW$167616[ebp]
  00bdc	52		 push	 edx
  00bdd	68 23 04 00 00	 push	 1059			; 00000423H
  00be2	56		 push	 esi
  00be3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00be9	50		 push	 eax
  00bea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00bf0	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  00bf5	53		 push	 ebx
  00bf6	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00bfb	56		 push	 esi
  00bfc	6a 6c		 push	 108			; 0000006cH
  00bfe	50		 push	 eax
  00bff	c7 05 00 00 00
	00 1e 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 30 ; nCurPageNo, 0000001eH
  00c09	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  00c0f	8d 4d d8	 lea	 ecx, DWORD PTR _rD$167615[ebp]
  00c12	51		 push	 ecx
  00c13	56		 push	 esi
  00c14	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  00c19	c7 45 d8 a2 00
	00 00		 mov	 DWORD PTR _rD$167615[ebp], 162 ; 000000a2H
  00c20	c7 45 dc 19 00
	00 00		 mov	 DWORD PTR _rD$167615[ebp+4], 25 ; 00000019H
  00c27	89 5d e0	 mov	 DWORD PTR _rD$167615[ebp+8], ebx
  00c2a	89 5d e4	 mov	 DWORD PTR _rD$167615[ebp+12], ebx
  00c2d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  00c33	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00c38	3b c3		 cmp	 eax, ebx
  00c3a	0f 84 49 02 00
	00		 je	 $LN12@AfterWMIni
  00c40	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _rW$167616[ebp+12]
  00c46	2b 95 44 ff ff
	ff		 sub	 edx, DWORD PTR _rW$167616[ebp+4]
  00c4c	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _rW$167616[ebp+8]
  00c52	2b 8d 40 ff ff
	ff		 sub	 ecx, DWORD PTR _rW$167616[ebp]
  00c58	6a 01		 push	 1
  00c5a	52		 push	 edx
  00c5b	8b 55 dc	 mov	 edx, DWORD PTR _rD$167615[ebp+4]
  00c5e	51		 push	 ecx
  00c5f	8b 4d d8	 mov	 ecx, DWORD PTR _rD$167615[ebp]

; 8760 : 						return;

  00c62	e9 7e f9 ff ff	 jmp	 $LN536@AfterWMIni
$LN39@AfterWMIni:

; 8782 : 						EndMainDlg (MainDlg);
; 8783 : 						return;
; 8784 : 					}
; 8785 : 				}
; 8786 : 				else
; 8787 : 				{
; 8788 : 					BOOL bAnswerTerminate = FALSE, bAnswerRetry = FALSE;
; 8789 : 
; 8790 : 					/* Pretest failed 
; 8791 : 					or hidden OS cloning has been interrupted (and non-hidden OS is running)
; 8792 : 					or wiping of the original OS has not been started (and non-hidden OS is running) */
; 8793 : 
; 8794 : 					if (hiddenOSCreationPhase == TC_HIDDEN_OS_CREATION_PHASE_NONE)

  00c67	3b c3		 cmp	 eax, ebx
  00c69	75 36		 jne	 SHORT $LN30@AfterWMIni

; 8795 : 					{
; 8796 : 						// Pretest failed (no hidden operating system involved)
; 8797 : 
; 8798 : 						if (AskWarnYesNo ("BOOT_PRETEST_FAILED_RETRY") == IDYES)

  00c6b	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DFBAAIPH@BOOT_PRETEST_FAILED_RETRY?$AA@
  00c70	e8 00 00 00 00	 call	 _AskWarnYesNo
  00c75	83 c4 04	 add	 esp, 4
  00c78	83 f8 06	 cmp	 eax, 6
  00c7b	0f 84 83 00 00
	00		 je	 $LN24@AfterWMIni
$LN514@AfterWMIni:

; 8875 : 						}
; 8876 : 
; 8877 : 						EndMainDlg (MainDlg);
; 8878 : 						return;
; 8879 : 					}
; 8880 : 					else if (bAnswerTerminate)
; 8881 : 					{
; 8882 : 						// User doesn't want to retry pretest (or OS cloning), but to terminate the entire process
; 8883 : 
; 8884 : 						try
; 8885 : 						{
; 8886 : 							BootEncObj->Deinstall (true);

  00c81	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00c87	6a 01		 push	 1
  00c89	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 8
  00c90	e8 00 00 00 00	 call	 ?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z ; CipherShed::BootEncryption::Deinstall
  00c95	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00c9c	e9 89 fe ff ff	 jmp	 $LN107@AfterWMIni
$LN30@AfterWMIni:

; 8799 : 						{
; 8800 : 							// User wants to retry the pretest
; 8801 : 							bAnswerTerminate = FALSE;
; 8802 : 							bAnswerRetry = TRUE;
; 8803 : 						}
; 8804 : 						else
; 8805 : 						{
; 8806 : 							// User doesn't want to retry the pretest
; 8807 : 							bAnswerTerminate = TRUE;
; 8808 : 							bAnswerRetry = FALSE;
; 8809 : 						}
; 8810 : 					}
; 8811 : 					else
; 8812 : 					{
; 8813 : 						// Hidden OS cloning was interrupted or wiping of the original OS has not been started
; 8814 : 						
; 8815 : 						char *tmpStr[] = {0,

  00ca1	89 9d 70 ff ff
	ff		 mov	 DWORD PTR _tmpStr$135293[ebp], ebx

; 8816 : 							hiddenOSCreationPhase == TC_HIDDEN_OS_CREATION_PHASE_WIPING ? "OS_WIPING_NOT_FINISHED_ASK" : "HIDDEN_OS_CREATION_NOT_FINISHED_ASK",

  00ca7	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tmpStr$135293[ebp+4], OFFSET ??_C@_0BL@BAAJMEPI@OS_WIPING_NOT_FINISHED_ASK?$AA@
  00cb1	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00cb6	74 0a		 je	 SHORT $LN87@AfterWMIni
  00cb8	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tmpStr$135293[ebp+4], OFFSET ??_C@_0CE@BLKNBIFF@HIDDEN_OS_CREATION_NOT_FINISHED_@
$LN87@AfterWMIni:

; 8817 : 							"HIDDEN_OS_CREATION_NOT_FINISHED_CHOICE_RETRY",
; 8818 : 							"HIDDEN_OS_CREATION_NOT_FINISHED_CHOICE_TERMINATE",
; 8819 : 							"HIDDEN_OS_CREATION_NOT_FINISHED_CHOICE_ASK_LATER",
; 8820 : 							0};
; 8821 : 
; 8822 : 						switch (AskMultiChoice ((void **) tmpStr, FALSE))

  00cc2	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _tmpStr$135293[ebp]
  00cc8	53		 push	 ebx
  00cc9	50		 push	 eax
  00cca	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tmpStr$135293[ebp+8], OFFSET ??_C@_0CN@NFNCFNOG@HIDDEN_OS_CREATION_NOT_FINISHED_@
  00cd4	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tmpStr$135293[ebp+12], OFFSET ??_C@_0DB@KJCGFBOB@HIDDEN_OS_CREATION_NOT_FINISHED_@
  00cde	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _tmpStr$135293[ebp+16], OFFSET ??_C@_0DB@IJPDGLEP@HIDDEN_OS_CREATION_NOT_FINISHED_@
  00ce5	89 5d 84	 mov	 DWORD PTR _tmpStr$135293[ebp+20], ebx
  00ce8	e8 00 00 00 00	 call	 _AskMultiChoice
  00ced	83 c4 08	 add	 esp, 8
  00cf0	83 e8 01	 sub	 eax, 1
  00cf3	74 0f		 je	 SHORT $LN24@AfterWMIni
  00cf5	83 e8 01	 sub	 eax, 1
  00cf8	74 87		 je	 SHORT $LN514@AfterWMIni
$LN16@AfterWMIni:

; 8893 : 
; 8894 : 						ManageStartupSeqWiz (TRUE, "");
; 8895 : 						ChangeSystemEncryptionStatus (SYSENC_STATUS_NONE);
; 8896 : 						EndMainDlg (MainDlg);
; 8897 : 						return;
; 8898 : 					}
; 8899 : 					else 
; 8900 : 					{
; 8901 : 						// User doesn't want to take any action now
; 8902 : 
; 8903 : 						AbortProcessSilent();

  00cfa	e8 00 00 00 00	 call	 _AbortProcessSilent

; 8918 : 		}
; 8919 : 	}
; 8920 : 	else

  00cff	e9 85 01 00 00	 jmp	 $LN12@AfterWMIni
$LN24@AfterWMIni:

; 8840 : 						}
; 8841 : 					}
; 8842 : 
; 8843 : 
; 8844 : 					if (bAnswerRetry)
; 8845 : 					{
; 8846 : 						// User wants to restart and retry the pretest (or hidden OS creation)
; 8847 : 
; 8848 : 						// We re-register the driver for boot because the user may have selected
; 8849 : 						// "Last Known Good Configuration" from the Windows boot menu.
; 8850 : 						// Note that we need to do this even when creating a hidden OS (because 
; 8851 : 						// the hidden OS needs our boot driver and it will be a clone of this OS).
; 8852 : 						try
; 8853 : 						{
; 8854 : 							BootEncObj->RegisterBootDriver (bHiddenOS ? true : false);

  00d04	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00d0a	85 c9		 test	 ecx, ecx
  00d0c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00d12	0f 95 c2	 setne	 dl
  00d15	0f b6 c2	 movzx	 eax, dl
  00d18	50		 push	 eax
  00d19	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  00d20	e8 00 00 00 00	 call	 ?RegisterBootDriver@BootEncryption@CipherShed@@QAEX_N@Z ; CipherShed::BootEncryption::RegisterBootDriver
  00d25	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN103@AfterWMIni:

; 8860 : 
; 8861 : 						if (AskWarnYesNo ("CONFIRM_RESTART") == IDYES)

  00d2c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ICICKJJH@CONFIRM_RESTART?$AA@
  00d31	e8 00 00 00 00	 call	 _AskWarnYesNo

; 8862 : 						{
; 8863 : 							EndMainDlg (MainDlg);

  00d36	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  00d3c	83 c4 04	 add	 esp, 4
  00d3f	83 f8 06	 cmp	 eax, 6
  00d42	0f 85 88 f5 ff
	ff		 jne	 $LN19@AfterWMIni
  00d48	e8 00 00 00 00	 call	 _EndMainDlg

; 8864 : 
; 8865 : 							try
; 8866 : 							{
; 8867 : 								BootEncObj->RestartComputer ();

  00d4d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00d53	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 6
  00d5a	e8 00 00 00 00	 call	 ?RestartComputer@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::RestartComputer
$LN105@AfterWMIni:

; 8873 : 
; 8874 : 							return;

  00d5f	e9 25 01 00 00	 jmp	 $LN12@AfterWMIni
__catch$_AfterWMInitTasks$4:

; 8855 : 						}
; 8856 : 						catch (Exception &e)
; 8857 : 						{
; 8858 : 							e.Show (NULL);

  00d64	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _e$135309[ebp]
  00d6a	8b 11		 mov	 edx, DWORD PTR [ecx]
  00d6c	8b 02		 mov	 eax, DWORD PTR [edx]
  00d6e	6a 00		 push	 0
  00d70	ff d0		 call	 eax

; 8859 : 						}

  00d72	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00d79	b8 00 00 00 00	 mov	 eax, $LN103@AfterWMIni
  00d7e	c3		 ret	 0
__catch$_AfterWMInitTasks$6:

; 8868 : 							}
; 8869 : 							catch (Exception &e)
; 8870 : 							{
; 8871 : 								e.Show (hwndDlg);

  00d7f	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _e$135312[ebp]
  00d85	8b 11		 mov	 edx, DWORD PTR [ecx]
  00d87	8b 45 ec	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00d8a	8b 12		 mov	 edx, DWORD PTR [edx]
  00d8c	50		 push	 eax
  00d8d	ff d2		 call	 edx

; 8872 : 							}

  00d8f	b8 00 00 00 00	 mov	 eax, $LN105@AfterWMIni
  00d94	c3		 ret	 0
__catch$_AfterWMInitTasks$8:

; 8887 : 						}
; 8888 : 						catch (Exception &e)
; 8889 : 						{
; 8890 : 							e.Show (hwndDlg);

  00d95	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _e$135316[ebp]
  00d9b	8b 01		 mov	 eax, DWORD PTR [ecx]
  00d9d	8b 55 ec	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00da0	8b 00		 mov	 eax, DWORD PTR [eax]
  00da2	52		 push	 edx
  00da3	ff d0		 call	 eax

; 8891 : 							AbortProcessSilent();

  00da5	e8 00 00 00 00	 call	 _AbortProcessSilent

; 8892 : 						}

  00daa	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00db1	b8 00 00 00 00	 mov	 eax, $LN107@AfterWMIni
  00db6	c3		 ret	 0
__catch$_AfterWMInitTasks$2:
  00db7	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _e$135273[ebp]
  00dbd	8b 11		 mov	 edx, DWORD PTR [ecx]
  00dbf	8b 45 ec	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00dc2	8b 12		 mov	 edx, DWORD PTR [edx]
  00dc4	50		 push	 eax
  00dc5	ff d2		 call	 edx
  00dc7	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@
  00dcc	e8 00 00 00 00	 call	 _Error
  00dd1	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  00dd7	83 c4 04	 add	 esp, 4
  00dda	e8 00 00 00 00	 call	 _EndMainDlg
  00ddf	b8 00 00 00 00	 mov	 eax, $LN101@AfterWMIni
  00de4	c3		 ret	 0
$LN101@AfterWMIni:

; 8722 : 				}
; 8723 : 				catch (Exception &e)
; 8724 : 				{
; 8725 : 					e.Show (hwndDlg);
; 8726 : 					Error ("ERR_GETTING_SYSTEM_ENCRYPTION_STATUS");
; 8727 : 					EndMainDlg (MainDlg);
; 8728 : 					return;

  00de5	e9 9f 00 00 00	 jmp	 $LN12@AfterWMIni
$LN44@AfterWMIni:

; 8921 : 	{
; 8922 : 		if (DirectDeviceEncMode)

  00dea	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?DirectDeviceEncMode@@3HA, ebx ; DirectDeviceEncMode
  00df0	74 0a		 je	 SHORT $LN11@AfterWMIni

; 8923 : 		{
; 8924 : 			SwitchWizardToNonSysDeviceMode();

  00df2	e8 00 00 00 00	 call	 ?SwitchWizardToNonSysDeviceMode@@YAXXZ ; SwitchWizardToNonSysDeviceMode

; 8925 : 			return;

  00df7	e9 8d 00 00 00	 jmp	 $LN12@AfterWMIni
$LN11@AfterWMIni:

; 8926 : 		}
; 8927 : 
; 8928 : 		if (DirectPromptNonSysInplaceEncResumeMode
; 8929 : 			&& !bInPlaceEncNonSysPending)

  00dfc	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?DirectPromptNonSysInplaceEncResumeMode@@3HA, ebx ; DirectPromptNonSysInplaceEncResumeMode
  00e02	74 2d		 je	 SHORT $LN10@AfterWMIni
  00e04	39 1d 00 00 00
	00		 cmp	 DWORD PTR _bInPlaceEncNonSysPending, ebx
  00e0a	75 25		 jne	 SHORT $LN10@AfterWMIni

; 8930 : 		{
; 8931 : 			// This instance of the wizard has been launched via the system startup sequence to prompt for resume of
; 8932 : 			// a non-system in-place encryption process. However, no config file indicates that any such process
; 8933 : 			// has been interrupted. This inconsistency may occur, for example, when the process is finished
; 8934 : 			// but the wizard is not removed from the startup sequence because system encryption is in progress.
; 8935 : 			// Therefore, we remove it from the startup sequence now if possible.
; 8936 : 
; 8937 : 			if (!IsNonInstallMode () && SystemEncryptionStatus == SYSENC_STATUS_NONE)

  00e0c	e8 00 00 00 00	 call	 _IsNonInstallMode
  00e11	85 c0		 test	 eax, eax
  00e13	75 17		 jne	 SHORT $LN9@AfterWMIni
  00e15	39 1d 00 00 00
	00		 cmp	 DWORD PTR _SystemEncryptionStatus, ebx
  00e1b	75 0f		 jne	 SHORT $LN9@AfterWMIni

; 8938 : 				ManageStartupSeqWiz (TRUE, "");

  00e1d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00e22	6a 01		 push	 1
  00e24	e8 00 00 00 00	 call	 _ManageStartupSeqWiz
  00e29	83 c4 08	 add	 esp, 8
$LN9@AfterWMIni:

; 8939 : 
; 8940 : 			AbortProcessSilent ();

  00e2c	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN10@AfterWMIni:

; 8941 : 		}
; 8942 : 
; 8943 : 		if (DirectNonSysInplaceEncResumeMode)

  00e31	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?DirectNonSysInplaceEncResumeMode@@3HA, ebx ; DirectNonSysInplaceEncResumeMode

; 8944 : 		{
; 8945 : 			SwitchWizardToNonSysInplaceEncResumeMode();

  00e37	75 24		 jne	 SHORT $LN533@AfterWMIni

; 8946 : 			return;
; 8947 : 		}
; 8948 : 		else if (DirectPromptNonSysInplaceEncResumeMode)

  00e39	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?DirectPromptNonSysInplaceEncResumeMode@@3HA, ebx ; DirectPromptNonSysInplaceEncResumeMode
  00e3f	74 23		 je	 SHORT $LN6@AfterWMIni

; 8949 : 		{
; 8950 : 			if (NonSysInplaceEncInProgressElsewhere ())

  00e41	e8 00 00 00 00	 call	 _NonSysInplaceEncInProgressElsewhere
  00e46	85 c0		 test	 eax, eax
  00e48	74 05		 je	 SHORT $LN5@AfterWMIni

; 8951 : 				AbortProcessSilent ();

  00e4a	e8 00 00 00 00	 call	 _AbortProcessSilent
$LN5@AfterWMIni:

; 8952 : 
; 8953 : 			if (AskNonSysInPlaceEncryptionResume() == IDYES)

  00e4f	e8 00 00 00 00	 call	 _AskNonSysInPlaceEncryptionResume
  00e54	83 f8 06	 cmp	 eax, 6
  00e57	0f 85 9d fe ff
	ff		 jne	 $LN16@AfterWMIni
$LN533@AfterWMIni:

; 8954 : 				SwitchWizardToNonSysInplaceEncResumeMode();

  00e5d	e8 00 00 00 00	 call	 ?SwitchWizardToNonSysInplaceEncResumeMode@@YAXXZ ; SwitchWizardToNonSysInplaceEncResumeMode

; 8955 : 			else

  00e62	eb 25		 jmp	 SHORT $LN12@AfterWMIni
$LN6@AfterWMIni:

; 8956 : 				AbortProcessSilent ();
; 8957 : 
; 8958 : 			return;
; 8959 : 		}
; 8960 : 		else if (bInPlaceEncNonSysPending
; 8961 : 			&& !NonSysInplaceEncInProgressElsewhere ()
; 8962 : 			&& AskNonSysInPlaceEncryptionResume() == IDYES)

  00e64	39 1d 00 00 00
	00		 cmp	 DWORD PTR _bInPlaceEncNonSysPending, ebx
  00e6a	74 13		 je	 SHORT $LN1@AfterWMIni
  00e6c	e8 00 00 00 00	 call	 _NonSysInplaceEncInProgressElsewhere
  00e71	85 c0		 test	 eax, eax
  00e73	75 0a		 jne	 SHORT $LN1@AfterWMIni
  00e75	e8 00 00 00 00	 call	 _AskNonSysInPlaceEncryptionResume
  00e7a	83 f8 06	 cmp	 eax, 6

; 8963 : 		{
; 8964 : 			SwitchWizardToNonSysInplaceEncResumeMode();
; 8965 : 			return;

  00e7d	74 de		 je	 SHORT $LN533@AfterWMIni
$LN1@AfterWMIni:

; 8966 : 		}
; 8967 : 
; 8968 : 		LoadPage (hwndDlg, INTRO_PAGE);

  00e7f	53		 push	 ebx
  00e80	57		 push	 edi
  00e81	e8 00 00 00 00	 call	 _LoadPage
  00e86	83 c4 08	 add	 esp, 8
$LN12@AfterWMIni:

; 8969 : 	}
; 8970 : }

  00e89	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00e8c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00e93	59		 pop	 ecx
  00e94	5f		 pop	 edi
  00e95	5e		 pop	 esi
  00e96	5b		 pop	 ebx
  00e97	8b 8d 18 03 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00e9d	33 cd		 xor	 ecx, ebp
  00e9f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00ea4	81 c5 1c 03 00
	00		 add	 ebp, 796		; 0000031cH
  00eaa	8b e5		 mov	 esp, ebp
  00eac	5d		 pop	 ebp
  00ead	c3		 ret	 0
  00eae	8b ff		 npad	 2
$LN537@AfterWMIni:
  00eb0	00 00 00 00	 DD	 $LN71@AfterWMIni
  00eb4	00 00 00 00	 DD	 $LN71@AfterWMIni
  00eb8	00 00 00 00	 DD	 $LN65@AfterWMIni
  00ebc	00 00 00 00	 DD	 $LN72@AfterWMIni
  00ec0	00 00 00 00	 DD	 $LN60@AfterWMIni
  00ec4	00 00 00 00	 DD	 $LN60@AfterWMIni
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_AfterWMInitTasks:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 3c fe ff
	ff		 mov	 ecx, DWORD PTR [edx-452]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 8a 24 03 00
	00		 mov	 ecx, DWORD PTR [edx+804]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_AfterWMInitTasks
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_AfterWMInitTasks ENDP
PUBLIC	??$unchecked_uninitialized_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@std@@@Z
_TEXT	SEGMENT
$T167799 = -4						; size = 1
__Cat$167803 = -4					; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

  00000	51		 push	 ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

  00001	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T167799[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T167799[esp+4]
  0000c	8b 0c 24	 mov	 ecx, DWORD PTR __Cat$167803[esp+4]
  0000f	50		 push	 eax
  00010	8b 44 24 14	 mov	 eax, DWORD PTR __Val$[esp+4]
  00014	51		 push	 ecx
  00015	8b 4c 24 14	 mov	 ecx, DWORD PTR __Count$[esp+8]
  00019	52		 push	 edx
  0001a	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >

; 943  : 	}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c3		 ret	 0
??$unchecked_uninitialized_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<HostDevice *,HostDevice *,std::allocator<HostDevice>,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Uninit_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T167836 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$167839 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<HostDevice *,HostDevice *,std::allocator<HostDevice>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

  00000	51		 push	 ecx

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$167839[esp]
  00005	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T167836[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T167836[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 208  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$_Uninit_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<HostDevice *,HostDevice *,std::allocator<HostDevice>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z
_TEXT	SEGMENT
$T167885 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$167888 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	51		 push	 ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Cat$167888[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T167885[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T167885[esp+4]
  0000c	50		 push	 eax
  0000d	8b 44 24 14	 mov	 eax, DWORD PTR __Ptr$[esp+4]
  00011	52		 push	 edx
  00012	8b 54 24 10	 mov	 edx, DWORD PTR __First$[esp+8]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4c 24 18	 mov	 ecx, DWORD PTR __Last$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 1142 : 		}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ufill
; Function compile flags: /Ogtpy
;	COMDAT ?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z
_TEXT	SEGMENT
$T167914 = -4						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Cat$167917 = 16					; size = 1
__Val$ = 16						; size = 4
?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

  00000	51		 push	 ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Cat$167917[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __Count$[esp+4]
  0000a	57		 push	 edi
  0000b	8b 7c 24 10	 mov	 edi, DWORD PTR __Ptr$[esp+8]
  0000f	c6 44 24 08 00	 mov	 BYTE PTR $T167914[esp+12], 0
  00014	8b 44 24 08	 mov	 eax, DWORD PTR $T167914[esp+12]
  00018	50		 push	 eax
  00019	8b 44 24 1c	 mov	 eax, DWORD PTR __Val$[esp+12]
  0001d	52		 push	 edx
  0001e	83 c1 08	 add	 ecx, 8
  00021	51		 push	 ecx
  00022	50		 push	 eax
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >

; 1255 : 		return (_Ptr + _Count);

  0002a	8b c6		 mov	 eax, esi
  0002c	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  00032	83 c4 18	 add	 esp, 24			; 00000018H
  00035	03 c7		 add	 eax, edi
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi

; 1256 : 		}

  00039	59		 pop	 ecx
  0003a	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ufill
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<HostDevice *,HostDevice *,std::allocator<HostDevice> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z
_TEXT	SEGMENT
$T167998 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$168002 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<HostDevice *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$168002[esp]
  00005	8b 54 24 14	 mov	 edx, DWORD PTR __Al$[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T167998[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T167998[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 865  : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$_Unchecked_uninitialized_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@stdext@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<HostDevice *,HostDevice *,std::allocator<HostDevice> >
_TEXT	ENDS
PUBLIC	??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
$T168061 = 8						; size = 1
__Cat$168066 = 8					; size = 1
$T168063 = 8						; size = 1
__Right$ = 8						; size = 4
??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

  00000	56		 push	 esi
  00001	57		 push	 edi

; 564  : 		if (this != &_Right)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	3b f7		 cmp	 esi, edi
  0000a	0f 84 53 01 00
	00		 je	 $LN47@operator@19

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

  00010	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c8		 sub	 ecx, eax
  00018	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0001d	f7 e9		 imul	 ecx
  0001f	55		 push	 ebp
  00020	c1 fa 06	 sar	 edx, 6
  00023	8b ea		 mov	 ebp, edx
  00025	c1 ed 1f	 shr	 ebp, 31			; 0000001fH
  00028	03 ea		 add	 ebp, edx
  0002a	75 0f		 jne	 SHORT $LN8@operator@19

; 572  : 				clear();	// new sequence empty, erase existing sequence

  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::clear
  00033	5d		 pop	 ebp
  00034	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  00035	8b c6		 mov	 eax, esi
  00037	5e		 pop	 esi

; 599  : 		}

  00038	c2 04 00	 ret	 4
$LN8@operator@19:

; 573  : 			else if (_Right.size() <= size())

  0003b	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0003e	53		 push	 ebx
  0003f	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00042	2b cb		 sub	 ecx, ebx
  00044	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00049	f7 e9		 imul	 ecx
  0004b	c1 fa 06	 sar	 edx, 6
  0004e	8b ca		 mov	 ecx, edx
  00050	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00053	03 ca		 add	 ecx, edx
  00055	3b e9		 cmp	 ebp, ecx
  00057	77 5d		 ja	 SHORT $LN6@operator@19

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

  00059	c6 44 24 14 00	 mov	 BYTE PTR $T168061[esp+12], 0
  0005e	8b 44 24 14	 mov	 eax, DWORD PTR $T168061[esp+12]
  00062	8b 4c 24 14	 mov	 ecx, DWORD PTR __Cat$168066[esp+12]
  00066	8b 54 24 14	 mov	 edx, DWORD PTR $T168063[esp+12]
  0006a	50		 push	 eax
  0006b	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0006e	51		 push	 ecx
  0006f	52		 push	 edx
  00070	53		 push	 ebx
  00071	50		 push	 eax
  00072	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ??$_Copy_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HostDevice *,HostDevice *>

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

  0007b	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0007e	83 c4 18	 add	 esp, 24			; 00000018H
  00081	51		 push	 ecx
  00082	50		 push	 eax
  00083	8b ce		 mov	 ecx, esi
  00085	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

  0008a	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0008d	2b 4f 0c	 sub	 ecx, DWORD PTR [edi+12]
  00090	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00095	f7 e9		 imul	 ecx
  00097	c1 fa 06	 sar	 edx, 6
  0009a	8b c2		 mov	 eax, edx
  0009c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0009f	03 c2		 add	 eax, edx
  000a1	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  000a7	03 46 0c	 add	 eax, DWORD PTR [esi+12]
  000aa	5b		 pop	 ebx
  000ab	5d		 pop	 ebp

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

  000ac	89 46 10	 mov	 DWORD PTR [esi+16], eax
  000af	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  000b0	8b c6		 mov	 eax, esi
  000b2	5e		 pop	 esi

; 599  : 		}

  000b3	c2 04 00	 ret	 4
$LN6@operator@19:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

  000b6	85 db		 test	 ebx, ebx
  000b8	75 04		 jne	 SHORT $LN38@operator@19
  000ba	33 c0		 xor	 eax, eax
  000bc	eb 16		 jmp	 SHORT $LN39@operator@19
$LN38@operator@19:
  000be	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000c1	2b d3		 sub	 edx, ebx
  000c3	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  000c8	f7 ea		 imul	 edx
  000ca	c1 fa 06	 sar	 edx, 6
  000cd	8b c2		 mov	 eax, edx
  000cf	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000d2	03 c2		 add	 eax, edx
$LN39@operator@19:
  000d4	3b e8		 cmp	 ebp, eax
  000d6	77 34		 ja	 SHORT $LN4@operator@19

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

  000d8	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000db	69 c9 88 00 00
	00		 imul	 ecx, 136		; 00000088H
  000e1	03 c8		 add	 ecx, eax
  000e3	8b e9		 mov	 ebp, ecx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

  000e5	53		 push	 ebx
  000e6	55		 push	 ebp
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 ??$unchecked_copy@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ; stdext::unchecked_copy<HostDevice *,HostDevice *>

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

  000ed	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000f0	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  000f3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f6	51		 push	 ecx
  000f7	52		 push	 edx
  000f8	55		 push	 ebp
  000f9	8b ce		 mov	 ecx, esi
  000fb	e8 00 00 00 00	 call	 ??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>
  00100	5b		 pop	 ebx
  00101	5d		 pop	 ebp
  00102	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00105	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  00106	8b c6		 mov	 eax, esi
  00108	5e		 pop	 esi

; 599  : 		}

  00109	c2 04 00	 ret	 4
$LN4@operator@19:

; 585  : 				}
; 586  : 			else
; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

  0010c	85 db		 test	 ebx, ebx
  0010e	74 18		 je	 SHORT $LN42@operator@19

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

  00110	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00113	50		 push	 eax
  00114	53		 push	 ebx
  00115	8b ce		 mov	 ecx, esi
  00117	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0011c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00125	83 c4 04	 add	 esp, 4
$LN42@operator@19:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

  00128	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0012b	2b 4f 0c	 sub	 ecx, DWORD PTR [edi+12]
  0012e	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00133	f7 e9		 imul	 ecx
  00135	c1 fa 06	 sar	 edx, 6
  00138	8b c2		 mov	 eax, edx
  0013a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0013d	03 c2		 add	 eax, edx
  0013f	50		 push	 eax
  00140	8b ce		 mov	 ecx, esi
  00142	e8 00 00 00 00	 call	 ?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Buy
  00147	84 c0		 test	 al, al
  00149	74 16		 je	 SHORT $LN46@operator@19

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

  0014b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0014e	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  00151	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00154	51		 push	 ecx
  00155	52		 push	 edx
  00156	50		 push	 eax
  00157	8b ce		 mov	 ecx, esi
  00159	e8 00 00 00 00	 call	 ??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>
  0015e	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN46@operator@19:
  00161	5b		 pop	 ebx
  00162	5d		 pop	 ebp
$LN47@operator@19:
  00163	5f		 pop	 edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

  00164	8b c6		 mov	 eax, esi
  00166	5e		 pop	 esi

; 599  : 		}

  00167	c2 04 00	 ret	 4
??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=
_TEXT	ENDS
PUBLIC	??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Umove<HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z
_TEXT	SEGMENT
$T168232 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$168236 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Umove<HostDevice *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	51		 push	 ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

  00001	8b 54 24 10	 mov	 edx, DWORD PTR __Cat$168236[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T168232[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T168232[esp+4]
  0000c	50		 push	 eax
  0000d	8b 44 24 14	 mov	 eax, DWORD PTR __Ptr$[esp+4]
  00011	52		 push	 edx
  00012	8b 54 24 10	 mov	 edx, DWORD PTR __First$[esp+8]
  00016	83 c1 08	 add	 ecx, 8
  00019	51		 push	 ecx
  0001a	8b 4c 24 18	 mov	 ecx, DWORD PTR __Last$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 1149 : 		}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Umove<HostDevice *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4HostDevice@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4HostDevice@@QAEAAU0@ABU0@@Z PROC			; HostDevice::operator=, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
  00004	8b 7c 24 0c	 mov	 edi, DWORD PTR ___that$[esp+4]
  00008	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  0000b	88 06		 mov	 BYTE PTR [esi], al
  0000d	0f b6 4f 01	 movzx	 ecx, BYTE PTR [edi+1]
  00011	88 4e 01	 mov	 BYTE PTR [esi+1], cl
  00014	0f b6 57 02	 movzx	 edx, BYTE PTR [edi+2]
  00018	88 56 02	 mov	 BYTE PTR [esi+2], dl
  0001b	0f b6 47 03	 movzx	 eax, BYTE PTR [edi+3]
  0001f	88 46 03	 mov	 BYTE PTR [esi+3], al
  00022	0f b6 4f 04	 movzx	 ecx, BYTE PTR [edi+4]
  00026	88 4e 04	 mov	 BYTE PTR [esi+4], cl
  00029	0f b6 57 05	 movzx	 edx, BYTE PTR [edi+5]
  0002d	6a ff		 push	 -1
  0002f	88 56 05	 mov	 BYTE PTR [esi+5], dl
  00032	0f b6 47 06	 movzx	 eax, BYTE PTR [edi+6]
  00036	6a 00		 push	 0
  00038	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0003b	51		 push	 ecx
  0003c	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0003f	88 46 06	 mov	 BYTE PTR [esi+6], al
  00042	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00047	6a ff		 push	 -1
  00049	6a 00		 push	 0
  0004b	8d 57 24	 lea	 edx, DWORD PTR [edi+36]
  0004e	52		 push	 edx
  0004f	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00052	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00057	6a ff		 push	 -1
  00059	6a 00		 push	 0
  0005b	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  0005e	50		 push	 eax
  0005f	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00062	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00067	0f b6 4f 5c	 movzx	 ecx, BYTE PTR [edi+92]
  0006b	88 4e 5c	 mov	 BYTE PTR [esi+92], cl
  0006e	8b 57 60	 mov	 edx, DWORD PTR [edi+96]
  00071	89 56 60	 mov	 DWORD PTR [esi+96], edx
  00074	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
  00077	89 46 64	 mov	 DWORD PTR [esi+100], eax
  0007a	8b 4f 68	 mov	 ecx, DWORD PTR [edi+104]
  0007d	89 4e 68	 mov	 DWORD PTR [esi+104], ecx
  00080	83 c7 6c	 add	 edi, 108		; 0000006cH
  00083	57		 push	 edi
  00084	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  00087	e8 00 00 00 00	 call	 ??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=
  0008c	5f		 pop	 edi
  0008d	8b c6		 mov	 eax, esi
  0008f	5e		 pop	 esi
  00090	c2 04 00	 ret	 4
??4HostDevice@@QAEAAU0@ABU0@@Z ENDP			; HostDevice::operator=
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	53		 push	 ebx

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __First$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __Last$[esp+4]
  0000a	3b de		 cmp	 ebx, esi
  0000c	74 23		 je	 SHORT $LN7@Copy_backw
  0000e	57		 push	 edi
  0000f	8b 7c 24 18	 mov	 edi, DWORD PTR __Dest$[esp+8]
$LL2@Copy_backw:

; 2676 : 		*--_Dest = *--_Last;

  00013	81 ee 88 00 00
	00		 sub	 esi, 136		; 00000088H
  00019	81 ef 88 00 00
	00		 sub	 edi, 136		; 00000088H
  0001f	56		 push	 esi
  00020	8b cf		 mov	 ecx, edi
  00022	e8 00 00 00 00	 call	 ??4HostDevice@@QAEAAU0@ABU0@@Z
  00027	3b f3		 cmp	 esi, ebx
  00029	75 e8		 jne	 SHORT $LL2@Copy_backw

; 2677 : 	return (_Dest);

  0002b	8b c7		 mov	 eax, edi
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 2678 : 	}

  00030	c3		 ret	 0
$LN7@Copy_backw:

; 2677 : 	return (_Dest);

  00031	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 2678 : 	}

  00037	c3		 ret	 0
??$_Copy_backward_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ; std::_Fill<HostDevice *,HostDevice>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z PROC ; std::_Fill<HostDevice *,HostDevice>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

  00000	56		 push	 esi

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 18		 je	 SHORT $LN1@Fill
  0000e	53		 push	 ebx
  0000f	8b 5c 24 18	 mov	 ebx, DWORD PTR __Val$[esp+8]
$LL3@Fill:

; 3159 : 		*_First = _Val;

  00013	53		 push	 ebx
  00014	8b ce		 mov	 ecx, esi
  00016	e8 00 00 00 00	 call	 ??4HostDevice@@QAEAAU0@ABU0@@Z
  0001b	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00021	3b f7		 cmp	 esi, edi
  00023	75 ee		 jne	 SHORT $LL3@Fill
  00025	5b		 pop	 ebx
$LN1@Fill:
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 3160 : 	}

  00028	c3		 ret	 0
??$_Fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ENDP ; std::_Fill<HostDevice *,HostDevice>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T168290 = -8						; size = 1
$T168291 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
$T168292 = 16						; size = 1
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<HostDevice *,HostDevice *>, COMDAT

; 2685 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

  00000	83 ec 08	 sub	 esp, 8

; 2686 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2687 : 	_OutIt _Result = _Dest - (_Last - _First);
; 2688 : 	_Copy_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2689 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

  00003	8b 54 24 14	 mov	 edx, DWORD PTR $T168292[esp+4]
  00007	53		 push	 ebx
  00008	8b 5c 24 10	 mov	 ebx, DWORD PTR __First$[esp+8]
  0000c	56		 push	 esi
  0000d	8b 74 24 18	 mov	 esi, DWORD PTR __Last$[esp+12]
  00011	57		 push	 edi
  00012	8b 7c 24 20	 mov	 edi, DWORD PTR __Dest$[esp+16]
  00016	32 c0		 xor	 al, al
  00018	88 44 24 10	 mov	 BYTE PTR $T168291[esp+20], al
  0001c	8b 4c 24 10	 mov	 ecx, DWORD PTR $T168291[esp+20]
  00020	88 44 24 0c	 mov	 BYTE PTR $T168290[esp+20], al
  00024	8b 44 24 0c	 mov	 eax, DWORD PTR $T168290[esp+20]
  00028	50		 push	 eax
  00029	51		 push	 ecx
  0002a	52		 push	 edx
  0002b	57		 push	 edi
  0002c	56		 push	 esi
  0002d	53		 push	 ebx
  0002e	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAUHostDevice@@PAU1@Uforward_iterator_tag@std@@@std@@YAPAUHostDevice@@PAU1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<HostDevice *,HostDevice *,std::forward_iterator_tag>
  00033	2b f3		 sub	 esi, ebx
  00035	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0003a	f7 ee		 imul	 esi
  0003c	c1 fa 06	 sar	 edx, 6
  0003f	8b c2		 mov	 eax, edx
  00041	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00044	03 c2		 add	 eax, edx
  00046	8b c8		 mov	 ecx, eax
  00048	69 c9 88 00 00
	00		 imul	 ecx, 136		; 00000088H
  0004e	83 c4 18	 add	 esp, 24			; 00000018H
  00051	8b c7		 mov	 eax, edi
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	2b c1		 sub	 eax, ecx
  00057	5b		 pop	 ebx

; 2690 : 	return _Result;
; 2691 : 	}

  00058	83 c4 08	 add	 esp, 8
  0005b	c3		 ret	 0
??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ; std::fill<HostDevice *,HostDevice>
; Function compile flags: /Ogtpy
;	COMDAT ??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z PROC ; std::fill<HostDevice *,HostDevice>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

  00000	56		 push	 esi

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 18		 je	 SHORT $LN11@fill
  0000e	53		 push	 ebx
  0000f	8b 5c 24 18	 mov	 ebx, DWORD PTR __Val$[esp+8]
$LL13@fill:
  00013	53		 push	 ebx
  00014	8b ce		 mov	 ecx, esi
  00016	e8 00 00 00 00	 call	 ??4HostDevice@@QAEAAU0@ABU0@@Z
  0001b	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00021	3b f7		 cmp	 esi, edi
  00023	75 ee		 jne	 SHORT $LL13@fill
  00025	5b		 pop	 ebx
$LN11@fill:
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 3188 : 	}

  00028	c3		 ret	 0
??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ENDP ; std::fill<HostDevice *,HostDevice>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAUHostDevice@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<HostDevice *,HostDevice *,std::random_access_iterator_tag,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_backward_opt@PAUHostDevice@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T168334 = -4						; size = 1
__Cat$168338 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAUHostDevice@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<HostDevice *,HostDevice *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

  00000	51		 push	 ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

  00001	8b 54 24 14	 mov	 edx, DWORD PTR __First_dest_cat$[esp]
  00005	c6 04 24 00	 mov	 BYTE PTR $T168334[esp+4], 0
  00009	8b 04 24	 mov	 eax, DWORD PTR $T168334[esp+4]
  0000c	8b 0c 24	 mov	 ecx, DWORD PTR __Cat$168338[esp+4]
  0000f	50		 push	 eax
  00010	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00014	51		 push	 ecx
  00015	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  00019	52		 push	 edx
  0001a	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<HostDevice *,HostDevice *>

; 2755 : 	}

  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	c3		 ret	 0
??$_Move_backward_opt@PAUHostDevice@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<HostDevice *,HostDevice *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ; stdext::_Unchecked_move_backward<HostDevice *,HostDevice *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked_move_backward@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z
_TEXT	SEGMENT
$T168382 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$168385 = 16					; size = 1
$T168344 = 16						; size = 1
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z PROC ; stdext::_Unchecked_move_backward<HostDevice *,HostDevice *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

  00000	51		 push	 ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

  00001	8b 4c 24 10	 mov	 ecx, DWORD PTR __Cat$168385[esp]
  00005	8b 54 24 10	 mov	 edx, DWORD PTR $T168344[esp]
  00009	c6 04 24 00	 mov	 BYTE PTR $T168382[esp+4], 0
  0000d	8b 04 24	 mov	 eax, DWORD PTR $T168382[esp+4]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR __Dest$[esp+4]
  00015	51		 push	 ecx
  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+8]
  0001a	52		 push	 edx
  0001b	8b 54 24 14	 mov	 edx, DWORD PTR __First$[esp+12]
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<HostDevice *,HostDevice *>

; 3697 : 	}

  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	c3		 ret	 0
??$_Unchecked_move_backward@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ENDP ; stdext::_Unchecked_move_backward<HostDevice *,HostDevice *>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__Val$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$2
__catchsym$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$0
__ehfuncinfo$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$6
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$7
__unwindtable$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$4
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z
_TEXT	SEGMENT
__Whereoff$137075 = -36					; size = 4
__Ncopied$137076 = -32					; size = 4
_this$GSCopy$ = -28					; size = 4
__Newvec$137074 = -24					; size = 4
tv592 = -20						; size = 4
$T168793 = -20						; size = 1
__Cat$168796 = -20					; size = 1
$T168617 = -20						; size = 1
__Cat$168620 = -20					; size = 1
__Val$GSCopy$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Tmp$137099 = 0					; size = 136
__Tmp$137089 = 136					; size = 136
__$ArrayPad$ = 272					; size = 4
__Where$ = 284						; size = 8
__Count$ = 292						; size = 4
__Val$ = 296						; size = 4
?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

  00000	55		 push	 ebp
  00001	8d ac 24 ec fe
	ff ff		 lea	 ebp, DWORD PTR [esp-276]
  00008	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	83 ec 18	 sub	 esp, 24			; 00000018H
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 85 10 01 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002c	53		 push	 ebx
  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1249 : 			}

  0003c	8b 85 28 01 00
	00		 mov	 eax, DWORD PTR __Val$[ebp]
  00042	8b f1		 mov	 esi, ecx
  00044	89 45 ec	 mov	 DWORD PTR __Val$GSCopy$[ebp], eax
  00047	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0004a	89 75 e4	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  0004d	85 c0		 test	 eax, eax
  0004f	75 04		 jne	 SHORT $LN31@Insert_n

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

  00051	33 db		 xor	 ebx, ebx
  00053	eb 16		 jmp	 SHORT $LN32@Insert_n
$LN31@Insert_n:
  00055	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00058	2b c8		 sub	 ecx, eax
  0005a	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0005f	f7 e9		 imul	 ecx
  00061	c1 fa 06	 sar	 edx, 6
  00064	8b da		 mov	 ebx, edx
  00066	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00069	03 da		 add	 ebx, edx
$LN32@Insert_n:

; 1162 : 
; 1163 : 		if (_Count == 0)

  0006b	8b bd 24 01 00
	00		 mov	 edi, DWORD PTR __Count$[ebp]
  00071	85 ff		 test	 edi, edi
  00073	0f 84 02 03 00
	00		 je	 $LN1@Insert_n

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

  00079	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0007c	8b d1		 mov	 edx, ecx
  0007e	2b 56 0c	 sub	 edx, DWORD PTR [esi+12]
  00081	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00086	f7 ea		 imul	 edx
  00088	c1 fa 06	 sar	 edx, 6
  0008b	8b c2		 mov	 eax, edx
  0008d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00090	03 c2		 add	 eax, edx
  00092	ba e1 e1 e1 01	 mov	 edx, 31580641		; 01e1e1e1H
  00097	2b d0		 sub	 edx, eax
  00099	3b d7		 cmp	 edx, edi
  0009b	73 05		 jae	 SHORT $LN12@Insert_n

; 1166 : 			_Xlen();	// result too long

  0009d	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@KAXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen
$LN12@Insert_n:

; 1167 : 		else if (_Capacity < size() + _Count)

  000a2	8d 14 38	 lea	 edx, DWORD PTR [eax+edi]
  000a5	3b da		 cmp	 ebx, edx
  000a7	0f 83 86 01 00
	00		 jae	 $LN10@Insert_n

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  000ad	8b c3		 mov	 eax, ebx
  000af	d1 e8		 shr	 eax, 1
  000b1	b9 e1 e1 e1 01	 mov	 ecx, 31580641		; 01e1e1e1H
  000b6	2b c8		 sub	 ecx, eax
  000b8	3b cb		 cmp	 ecx, ebx
  000ba	73 04		 jae	 SHORT $LN17@Insert_n
  000bc	33 db		 xor	 ebx, ebx
  000be	eb 02		 jmp	 SHORT $LN18@Insert_n
$LN17@Insert_n:
  000c0	03 d8		 add	 ebx, eax
$LN18@Insert_n:

; 1171 : 			if (_Capacity < size() + _Count)

  000c2	3b da		 cmp	 ebx, edx
  000c4	73 02		 jae	 SHORT $LN9@Insert_n

; 1172 : 				_Capacity = size() + _Count;

  000c6	8b da		 mov	 ebx, edx
$LN9@Insert_n:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  000c8	6a 00		 push	 0
  000ca	53		 push	 ebx
  000cb	e8 00 00 00 00	 call	 ??$_Allocate@UHostDevice@@@std@@YAPAUHostDevice@@IPAU1@@Z ; std::_Allocate<HostDevice>

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

  000d0	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  000d6	2b 56 0c	 sub	 edx, DWORD PTR [esi+12]
  000d9	8b c8		 mov	 ecx, eax
  000db	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  000e0	f7 ea		 imul	 edx
  000e2	c1 fa 06	 sar	 edx, 6
  000e5	8b c2		 mov	 eax, edx
  000e7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ea	03 c2		 add	 eax, edx
  000ec	89 45 dc	 mov	 DWORD PTR __Whereoff$137075[ebp], eax

; 1175 : 			int _Ncopied = 0;
; 1176 : 
; 1177 : 			_TRY_BEGIN
; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

  000ef	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  000f5	33 d2		 xor	 edx, edx
  000f7	83 c4 08	 add	 esp, 8
  000fa	89 55 e0	 mov	 DWORD PTR __Ncopied$137076[ebp], edx
  000fd	89 55 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edx
  00100	8b 55 ec	 mov	 edx, DWORD PTR __Val$GSCopy$[ebp]
  00103	52		 push	 edx
  00104	03 c1		 add	 eax, ecx
  00106	57		 push	 edi
  00107	89 4d e8	 mov	 DWORD PTR __Newvec$137074[ebp], ecx
  0010a	50		 push	 eax
  0010b	8b ce		 mov	 ecx, esi
  0010d	e8 00 00 00 00	 call	 ?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ufill

; 1179 : 			++_Ncopied;
; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

  00112	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00115	c6 45 ec 00	 mov	 BYTE PTR $T168617[ebp], 0
  00119	8b 55 ec	 mov	 edx, DWORD PTR $T168617[ebp]
  0011c	52		 push	 edx
  0011d	8b 55 ec	 mov	 edx, DWORD PTR __Cat$168620[ebp]
  00120	52		 push	 edx
  00121	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  00127	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0012a	51		 push	 ecx
  0012b	8b 4d e8	 mov	 ecx, DWORD PTR __Newvec$137074[ebp]
  0012e	51		 push	 ecx
  0012f	52		 push	 edx
  00130	50		 push	 eax
  00131	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR __Ncopied$137076[ebp], 1
  00138	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 1182 : 			++_Ncopied;
; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

  0013d	8b 45 dc	 mov	 eax, DWORD PTR __Whereoff$137075[ebp]
  00140	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00143	03 c7		 add	 eax, edi
  00145	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  0014b	03 45 e8	 add	 eax, DWORD PTR __Newvec$137074[ebp]
  0014e	83 c4 18	 add	 esp, 24			; 00000018H
  00151	c6 45 ec 00	 mov	 BYTE PTR $T168793[ebp], 0
  00155	8b 55 ec	 mov	 edx, DWORD PTR $T168793[ebp]
  00158	52		 push	 edx
  00159	8b 55 ec	 mov	 edx, DWORD PTR __Cat$168796[ebp]
  0015c	52		 push	 edx
  0015d	8d 56 08	 lea	 edx, DWORD PTR [esi+8]
  00160	52		 push	 edx
  00161	50		 push	 eax
  00162	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR __Where$[ebp+4]
  00168	51		 push	 ecx
  00169	50		 push	 eax
  0016a	c7 45 e0 02 00
	00 00		 mov	 DWORD PTR __Ncopied$137076[ebp], 2
  00171	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 1192 : 			_CATCH_END
; 1193 : 
; 1194 : 			_Count += size();

  00176	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00179	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0017c	2b d1		 sub	 edx, ecx
  0017e	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00183	f7 ea		 imul	 edx
  00185	c1 fa 06	 sar	 edx, 6
  00188	8b c2		 mov	 eax, edx
  0018a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0018d	03 c2		 add	 eax, edx
  0018f	83 c4 18	 add	 esp, 24			; 00000018H
  00192	03 f8		 add	 edi, eax
  00194	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 1195 : 			if (_Myfirst != 0)

  0019b	85 c9		 test	 ecx, ecx
  0019d	74 18		 je	 SHORT $LN115@Insert_n

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

  0019f	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  001a2	52		 push	 edx
  001a3	51		 push	 ecx
  001a4	8b ce		 mov	 ecx, esi
  001a6	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  001ab	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001ae	50		 push	 eax
  001af	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001b4	83 c4 04	 add	 esp, 4
$LN115@Insert_n:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

  001b7	8b 45 e8	 mov	 eax, DWORD PTR __Newvec$137074[ebp]
  001ba	69 db 88 00 00
	00		 imul	 ebx, 136		; 00000088H

; 1206 : 			_Mylast = _Newvec + _Count;

  001c0	69 ff 88 00 00
	00		 imul	 edi, 136		; 00000088H
  001c6	03 d8		 add	 ebx, eax
  001c8	03 f8		 add	 edi, eax
  001ca	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  001cd	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 1207 : 			_Myfirst = _Newvec;

  001d0	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  001d3	e9 a3 01 00 00	 jmp	 $LN1@Insert_n
__catch$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

  001d8	8b 5d e0	 mov	 ebx, DWORD PTR __Ncopied$137076[ebp]
  001db	83 fb 01	 cmp	 ebx, 1

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

  001de	8b 75 dc	 mov	 esi, DWORD PTR __Whereoff$137075[ebp]
  001e1	8b 7d e8	 mov	 edi, DWORD PTR __Newvec$137074[ebp]
  001e4	7e 14		 jle	 SHORT $LN7@Insert_n
  001e6	8b ce		 mov	 ecx, esi
  001e8	69 c9 88 00 00
	00		 imul	 ecx, 136		; 00000088H
  001ee	03 cf		 add	 ecx, edi
  001f0	51		 push	 ecx
  001f1	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001f4	57		 push	 edi
  001f5	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy
$LN7@Insert_n:

; 1188 : 			if (0 < _Ncopied)

  001fa	85 db		 test	 ebx, ebx
  001fc	7e 23		 jle	 SHORT $LN6@Insert_n

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

  001fe	8b 95 24 01 00
	00		 mov	 edx, DWORD PTR __Count$[ebp]
  00204	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00207	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  0020a	69 f6 88 00 00
	00		 imul	 esi, 136		; 00000088H
  00210	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  00216	03 c7		 add	 eax, edi
  00218	50		 push	 eax
  00219	03 f7		 add	 esi, edi
  0021b	56		 push	 esi
  0021c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy
$LN6@Insert_n:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

  00221	57		 push	 edi
  00222	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00227	83 c4 04	 add	 esp, 4

; 1191 : 			_RERAISE;

  0022a	6a 00		 push	 0
  0022c	6a 00		 push	 0
  0022e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Insert_n:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

  00233	2b 8d 20 01 00
	00		 sub	 ecx, DWORD PTR __Where$[ebp+4]
  00239	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0023e	f7 e9		 imul	 ecx
  00240	c1 fa 06	 sar	 edx, 6
  00243	8b ca		 mov	 ecx, edx
  00245	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00248	03 ca		 add	 ecx, edx
  0024a	3b cf		 cmp	 ecx, edi
  0024c	0f 83 c3 00 00
	00		 jae	 $LN3@Insert_n

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

  00252	8b 55 ec	 mov	 edx, DWORD PTR __Val$GSCopy$[ebp]
  00255	52		 push	 edx
  00256	8d 8d 88 00 00
	00		 lea	 ecx, DWORD PTR __Tmp$137089[ebp]
  0025c	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

  00261	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR __Where$[ebp+4]
  00267	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0026a	8b df		 mov	 ebx, edi
  0026c	69 db 88 00 00
	00		 imul	 ebx, 136		; 00000088H
  00272	8d 0c 03	 lea	 ecx, DWORD PTR [ebx+eax]
  00275	51		 push	 ecx
  00276	52		 push	 edx
  00277	50		 push	 eax
  00278	8b ce		 mov	 ecx, esi
  0027a	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  00281	e8 00 00 00 00	 call	 ??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Umove<HostDevice *>

; 1215 : 
; 1216 : 			_TRY_BEGIN
; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

  00286	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00289	8b d1		 mov	 edx, ecx
  0028b	2b 95 20 01 00
	00		 sub	 edx, DWORD PTR __Where$[ebp+4]
  00291	8d 85 88 00 00
	00		 lea	 eax, DWORD PTR __Tmp$137089[ebp]
  00297	50		 push	 eax
  00298	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0029d	f7 ea		 imul	 edx
  0029f	c1 fa 06	 sar	 edx, 6
  002a2	8b c2		 mov	 eax, edx
  002a4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002a7	03 c2		 add	 eax, edx
  002a9	2b f8		 sub	 edi, eax
  002ab	57		 push	 edi
  002ac	51		 push	 ecx
  002ad	8b ce		 mov	 ecx, esi
  002af	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  002b3	e8 00 00 00 00	 call	 ?_Ufill@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU3@IABU3@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ufill

; 1222 : 			_CATCH_END
; 1223 : 
; 1224 : 			_Mylast += _Count;

  002b8	01 5e 10	 add	 DWORD PTR [esi+16], ebx
  002bb	8b 76 10	 mov	 esi, DWORD PTR [esi+16]

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

  002be	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  002c4	8d 8d 88 00 00
	00		 lea	 ecx, DWORD PTR __Tmp$137089[ebp]
  002ca	51		 push	 ecx
  002cb	2b f3		 sub	 esi, ebx
  002cd	56		 push	 esi
  002ce	52		 push	 edx
  002cf	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  002d6	e8 00 00 00 00	 call	 ??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ; std::fill<HostDevice *,HostDevice>
  002db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1232 : 			}

  002de	8d 8d 88 00 00
	00		 lea	 ecx, DWORD PTR __Tmp$137089[ebp]

; 1233 : 		else

  002e4	e9 86 00 00 00	 jmp	 $LN122@Insert_n
__catch$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

  002e9	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR __Count$[ebp]
  002ef	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  002f2	69 c0 88 00 00
	00		 imul	 eax, 136		; 00000088H
  002f8	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  002fb	03 d0		 add	 edx, eax
  002fd	52		 push	 edx
  002fe	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  00304	03 c2		 add	 eax, edx
  00306	50		 push	 eax
  00307	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy

; 1221 : 			_RERAISE;

  0030c	6a 00		 push	 0
  0030e	6a 00		 push	 0
  00310	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Insert_n:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

  00315	8b 45 ec	 mov	 eax, DWORD PTR __Val$GSCopy$[ebp]
  00318	50		 push	 eax
  00319	8d 4d 00	 lea	 ecx, DWORD PTR __Tmp$137099[ebp]
  0031c	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;
; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

  00321	69 ff 88 00 00
	00		 imul	 edi, 136		; 00000088H
  00327	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0032a	53		 push	 ebx
  0032b	8b c3		 mov	 eax, ebx
  0032d	2b c7		 sub	 eax, edi
  0032f	53		 push	 ebx
  00330	50		 push	 eax
  00331	8b ce		 mov	 ecx, esi
  00333	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 5
  0033a	89 45 ec	 mov	 DWORD PTR tv592[ebp], eax
  0033d	e8 00 00 00 00	 call	 ??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Umove<HostDevice *>

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

  00342	8b 4d ec	 mov	 ecx, DWORD PTR tv592[ebp]
  00345	8b 95 20 01 00
	00		 mov	 edx, DWORD PTR __Where$[ebp+4]
  0034b	53		 push	 ebx
  0034c	51		 push	 ecx
  0034d	52		 push	 edx
  0034e	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00351	e8 00 00 00 00	 call	 ??$_Unchecked_move_backward@PAUHostDevice@@PAU1@@stdext@@YAPAUHostDevice@@PAU1@00@Z ; stdext::_Unchecked_move_backward<HostDevice *,HostDevice *>

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

  00356	8d 45 00	 lea	 eax, DWORD PTR __Tmp$137099[ebp]
  00359	50		 push	 eax
  0035a	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR __Where$[ebp+4]
  00360	03 f8		 add	 edi, eax
  00362	57		 push	 edi
  00363	50		 push	 eax
  00364	e8 00 00 00 00	 call	 ??$fill@PAUHostDevice@@U1@@std@@YAXPAUHostDevice@@0ABU1@@Z ; std::fill<HostDevice *,HostDevice>
  00369	83 c4 18	 add	 esp, 24			; 00000018H

; 1249 : 			}

  0036c	8d 4d 00	 lea	 ecx, DWORD PTR __Tmp$137099[ebp]
$LN122@Insert_n:
  0036f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00376	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
$LN1@Insert_n:

; 1250 : 		}

  0037b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0037e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00385	59		 pop	 ecx
  00386	5f		 pop	 edi
  00387	5e		 pop	 esi
  00388	5b		 pop	 ebx
  00389	8b 8d 10 01 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0038f	33 cd		 xor	 ecx, ebp
  00391	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00396	81 c5 14 01 00
	00		 add	 ebp, 276		; 00000114H
  0039c	8b e5		 mov	 esp, ebp
  0039e	5d		 pop	 ebp
  0039f	c2 10 00	 ret	 16			; 00000010H
$LN121@Insert_n:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$4:
  00000	8d 8d 88 00 00
	00		 lea	 ecx, DWORD PTR __Tmp$137089[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
__unwindfunclet$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z$5:
  0000b	8d 4d 00	 lea	 ecx, DWORD PTR __Tmp$137099[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
__ehhandler$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	8b 8a 1c 01 00
	00		 mov	 ecx, DWORD PTR [edx+284]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Insert_n
PUBLIC	?insert@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@ABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@ABUHostDevice@@@Z
_TEXT	SEGMENT
__Tmp$169117 = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
__Val$ = 20						; size = 4
?insert@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@ABUHostDevice@@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

  00009	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  0000c	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  0000f	8b cb		 mov	 ecx, ebx
  00011	2b ce		 sub	 ecx, esi
  00013	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00018	f7 e9		 imul	 ecx
  0001a	c1 fa 06	 sar	 edx, 6
  0001d	8b c2		 mov	 eax, edx
  0001f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00022	03 c2		 add	 eax, edx
  00024	75 04		 jne	 SHORT $LN3@insert@2
  00026	33 f6		 xor	 esi, esi
  00028	eb 33		 jmp	 SHORT $LN4@insert@2
$LN3@insert@2:
  0002a	3b f3		 cmp	 esi, ebx
  0002c	76 05		 jbe	 SHORT $LN13@insert@2
  0002e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN13@insert@2:
  00033	8b 4c 24 20	 mov	 ecx, DWORD PTR __Where$[esp+20]
  00037	8b 07		 mov	 eax, DWORD PTR [edi]
  00039	85 c9		 test	 ecx, ecx
  0003b	74 04		 je	 SHORT $LN29@insert@2
  0003d	3b c8		 cmp	 ecx, eax
  0003f	74 05		 je	 SHORT $LN28@insert@2
$LN29@insert@2:
  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN28@insert@2:
  00046	8b 4c 24 24	 mov	 ecx, DWORD PTR __Where$[esp+24]
  0004a	2b ce		 sub	 ecx, esi
  0004c	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00051	f7 e9		 imul	 ecx
  00053	c1 fa 06	 sar	 edx, 6
  00056	8b f2		 mov	 esi, edx
  00058	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0005b	03 f2		 add	 esi, edx
$LN4@insert@2:

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

  0005d	8b 4c 24 28	 mov	 ecx, DWORD PTR __Val$[esp+20]
  00061	8b 54 24 24	 mov	 edx, DWORD PTR __Where$[esp+24]
  00065	8b 44 24 20	 mov	 eax, DWORD PTR __Where$[esp+20]
  00069	51		 push	 ecx
  0006a	6a 01		 push	 1
  0006c	52		 push	 edx
  0006d	50		 push	 eax
  0006e	8b cf		 mov	 ecx, edi
  00070	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@IABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Insert_n

; 878  : 		return (begin() + _Off);

  00075	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
  00078	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  0007b	76 05		 jbe	 SHORT $LN43@insert@2
  0007d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN43@insert@2:
  00082	8b 3f		 mov	 edi, DWORD PTR [edi]
  00084	8b ef		 mov	 ebp, edi
  00086	89 5c 24 14	 mov	 DWORD PTR __Tmp$169117[esp+28], ebx
  0008a	85 ff		 test	 edi, edi
  0008c	75 1c		 jne	 SHORT $LN85@insert@2
  0008e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00093	33 c0		 xor	 eax, eax
$LN76@insert@2:
  00095	69 f6 88 00 00
	00		 imul	 esi, 136		; 00000088H
  0009b	03 f3		 add	 esi, ebx
  0009d	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
  000a0	77 13		 ja	 SHORT $LN63@insert@2
  000a2	85 ff		 test	 edi, edi
  000a4	74 08		 je	 SHORT $LN81@insert@2
  000a6	8b 3f		 mov	 edi, DWORD PTR [edi]
  000a8	eb 06		 jmp	 SHORT $LN82@insert@2
$LN85@insert@2:
  000aa	8b 07		 mov	 eax, DWORD PTR [edi]
  000ac	eb e7		 jmp	 SHORT $LN76@insert@2
$LN81@insert@2:
  000ae	33 ff		 xor	 edi, edi
$LN82@insert@2:
  000b0	3b 77 0c	 cmp	 esi, DWORD PTR [edi+12]
  000b3	73 05		 jae	 SHORT $LN62@insert@2
$LN63@insert@2:
  000b5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN62@insert@2:
  000ba	8b 44 24 1c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+20]
  000be	5f		 pop	 edi
  000bf	89 70 04	 mov	 DWORD PTR [eax+4], esi
  000c2	5e		 pop	 esi
  000c3	89 28		 mov	 DWORD PTR [eax], ebp
  000c5	5d		 pop	 ebp
  000c6	5b		 pop	 ebx

; 879  : 		}

  000c7	83 c4 08	 add	 esp, 8
  000ca	c2 10 00	 ret	 16			; 00000010H
?insert@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@ABUHostDevice@@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::insert
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z
_TEXT	SEGMENT
$T169158 = -8						; size = 1
$T169129 = -8						; size = 8
__Cat$169162 = 8					; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 810  : 		if (size() < capacity())

  00007	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  0000a	57		 push	 edi
  0000b	85 db		 test	 ebx, ebx
  0000d	75 04		 jne	 SHORT $LN9@push_back
  0000f	33 c9		 xor	 ecx, ecx
  00011	eb 16		 jmp	 SHORT $LN10@push_back
$LN9@push_back:
  00013	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00016	2b cb		 sub	 ecx, ebx
  00018	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0001d	f7 e9		 imul	 ecx
  0001f	c1 fa 06	 sar	 edx, 6
  00022	8b ca		 mov	 ecx, edx
  00024	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00027	03 ca		 add	 ecx, edx
$LN10@push_back:
  00029	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0002c	8b d7		 mov	 edx, edi
  0002e	2b d3		 sub	 edx, ebx
  00030	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00035	f7 ea		 imul	 edx
  00037	c1 fa 06	 sar	 edx, 6
  0003a	8b c2		 mov	 eax, edx
  0003c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003f	03 c2		 add	 eax, edx
  00041	3b c1		 cmp	 eax, ecx
  00043	73 35		 jae	 SHORT $LN2@push_back

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

  00045	8b 54 24 18	 mov	 edx, DWORD PTR __Cat$169162[esp+16]
  00049	c6 44 24 0c 00	 mov	 BYTE PTR $T169158[esp+20], 0
  0004e	8b 4c 24 0c	 mov	 ecx, DWORD PTR $T169158[esp+20]
  00052	51		 push	 ecx
  00053	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Val$[esp+20]
  00057	52		 push	 edx
  00058	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0005b	50		 push	 eax
  0005c	51		 push	 ecx
  0005d	6a 01		 push	 1
  0005f	57		 push	 edi
  00060	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUHostDevice@@IU1@V?$allocator@UHostDevice@@@std@@@std@@YAXPAUHostDevice@@IABU1@AAV?$allocator@UHostDevice@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HostDevice *,unsigned int,HostDevice,std::allocator<HostDevice> >
  00065	83 c4 18	 add	 esp, 24			; 00000018H
  00068	81 c7 88 00 00
	00		 add	 edi, 136		; 00000088H
  0006e	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx

; 824  : 		}

  00074	83 c4 08	 add	 esp, 8
  00077	c2 04 00	 ret	 4
$LN2@push_back:

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else
; 823  : 			insert(end(), _Val);

  0007a	3b df		 cmp	 ebx, edi
  0007c	76 05		 jbe	 SHORT $LN23@push_back
  0007e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN23@push_back:
  00083	8b 54 24 18	 mov	 edx, DWORD PTR __Val$[esp+16]
  00087	8b 06		 mov	 eax, DWORD PTR [esi]
  00089	52		 push	 edx
  0008a	57		 push	 edi
  0008b	50		 push	 eax
  0008c	8d 44 24 18	 lea	 eax, DWORD PTR $T169129[esp+32]
  00090	50		 push	 eax
  00091	8b ce		 mov	 ecx, esi
  00093	e8 00 00 00 00	 call	 ?insert@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE?AV?$_Vector_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@V?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@2@ABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::insert
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx

; 824  : 		}

  0009b	83 c4 08	 add	 esp, 8
  0009e	c2 04 00	 ret	 4
?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::push_back
_TEXT	ENDS
PUBLIC	??_C@_0BH@KAHGPAJO@CONFIRM_EXIT_UNIVERSAL?$AA@	; `string'
PUBLIC	??_C@_0BP@IFOLEKLB@CONFIRM_CANCEL_SYS_ENC_PRETEST?$AA@ ; `string'
PUBLIC	??_C@_0CC@KDAJHHMG@CONFIRM_CANCEL_HIDDEN_OS_CREATIO@ ; `string'
PUBLIC	??_C@_0CA@OMHIMMHH@SYSTEM_ENCRYPTION_DEFER_CONFIRM?$AA@ ; `string'
PUBLIC	??_C@_0CA@MDOAMJOP@SYSTEM_DECRYPTION_DEFER_CONFIRM?$AA@ ; `string'
PUBLIC	??_C@_0CB@MEPMKNNG@NONSYS_INPLACE_ENC_DEFER_CONFIRM@ ; `string'
PUBLIC	??_C@_0CK@DBNLNPHP@FOUND_NO_PARTITION_W_DEFERRED_IN@ ; `string'
PUBLIC	??_C@_0P@BMFNBJAJ@WIPE_MODE_WARN?$AA@		; `string'
PUBLIC	??_C@_0BD@ICCGDAH@CONFIRM_WIPE_START?$AA@	; `string'
PUBLIC	??_C@_0CH@LLDBJBEP@CONFIRM_WIPE_START_DECOY_SYS_PAR@ ; `string'
PUBLIC	??_C@_0BI@GNHKCMLM@CANT_DISMOUNT_OUTER_VOL?$AA@	; `string'
PUBLIC	??_C@_0BD@NGECJJAH@FORMAT_IN_PROGRESS?$AA@	; `string'
PUBLIC	??_C@_0BC@DADPIOMM@CLUSTER_TOO_SMALL?$AA@	; `string'
PUBLIC	??_C@_0BP@NLBJKNFD@CONFIRM_FAT_FOR_FILES_OVER_4GB?$AA@ ; `string'
PUBLIC	??_C@_0BJ@NALGNOGO@HIDDEN_VOL_HOST_NTFS_ASK?$AA@ ; `string'
PUBLIC	??_C@_0CG@HAPBHPDC@FAT_NOT_AVAILABLE_FOR_SO_LARGE_V@ ; `string'
PUBLIC	??_C@_0CK@PNCJJOHK@OUTER_VOLUME_TOO_SMALL_FOR_HIDDE@ ; `string'
PUBLIC	__real@4000cccccccccccd
PUBLIC	??_C@_0BN@EFIGHBDJ@OFFER_FAT_FORMAT_ALTERNATIVE?$AA@ ; `string'
PUBLIC	??_C@_0CH@MGEMKCIE@CANNOT_INITIATE_SYS_ENCRYPTION_P@ ; `string'
PUBLIC	??_C@_0CD@DFDNFFMK@CANNOT_INITIATE_HIDDEN_OS_CREATI@ ; `string'
PUBLIC	??_C@_0CM@GDNJCFCO@IDD_VOL_CREATION_WIZARD_DLG_CONF@ ; `string'
PUBLIC	??_C@_0BG@DGIFCGMK@PREBOOT_NOT_LOCALIZED?$AA@	; `string'
PUBLIC	??_C@_0BP@HPABPDKI@RESCUE_DISK_CHECK_FAILED_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0BJ@KDGMPLJF@RESCUE_DISK_CHECK_FAILED?$AA@ ; `string'
PUBLIC	??_C@_0CL@LCMPFPDG@RESCUE_DISK_CHECK_FAILED_SENTENC@ ; `string'
PUBLIC	??_C@_0CH@GAGHEKIC@RESCUE_DISK_WIN_ISOBURN_PRELAUNC@ ; `string'
PUBLIC	??_C@_0BP@EJPBDEFG@RESCUE_DISK_BURN_NO_CHECK_WARN?$AA@ ; `string'
PUBLIC	??_C@_0CK@BHLKCEED@CD_BURNER_NOT_PRESENT_WILL_STORE@ ; `string'
PUBLIC	??_C@_0CF@OBJIPJKN@CD_BURNER_NOT_PRESENT_WILL_STORE@ ; `string'
PUBLIC	??_C@_0BG@GLKAIFEA@CD_BURNER_NOT_PRESENT?$AA@	; `string'
PUBLIC	??_C@_0CE@FEAJEJEJ@CD_BURNER_NOT_PRESENT_CONNECTED_@ ; `string'
PUBLIC	??_C@_0CJ@FCOKHALJ@CD_BURNER_NOT_PRESENT_WILL_CONNE@ ; `string'
PUBLIC	??_C@_0DG@KNHACFHE@CANNOT_CREATE_NON_HIDDEN_NTFS_VO@ ; `string'
PUBLIC	??_C@_0CF@HFPIFBIF@CANNOT_SATISFY_OVER_4G_FILE_SIZE@ ; `string'
PUBLIC	??_C@_0BP@BGCHIACG@CANNOT_RESTORE_KEYBOARD_LAYOUT?$AA@ ; `string'
PUBLIC	??_C@_0BO@LHABIPI@PASSWORD_LENGTH_WARNING_TITLE?$AA@ ; `string'
PUBLIC	??_C@_0BJ@CPHEENHA@UNSUPPORTED_CHARS_IN_PWD?$AA@ ; `string'
PUBLIC	??_C@_0CH@NJLIGNCF@FREE_SPACE_FOR_WRITING_TO_OUTER_@ ; `string'
PUBLIC	__real@3feb333333333333
PUBLIC	??_C@_0BL@IAHLEEBN@VOLUME_TOO_LARGE_FOR_WINXP?$AA@ ; `string'
PUBLIC	??_C@_0BL@FEGMEEPN@VOLUME_TOO_LARGE_FOR_FAT32?$AA@ ; `string'
PUBLIC	??_C@_05HNJNFBJJ@FAT32?$AA@			; `string'
PUBLIC	??_C@_0CA@HENDJLLF@NOTE_CASCADE_FOR_SYS_ENCRYPTION?$AA@ ; `string'
PUBLIC	??_C@_0CD@HEIAMGDN@CONFIRM_CASCADE_FOR_SYS_ENCRYPTI@ ; `string'
PUBLIC	??_C@_0CC@NCAFIIDC@NONSYS_INPLACE_ENC_CONFIRM_BACKU@ ; `string'
PUBLIC	??_C@_0BH@BGCKDFKI@HIDDEN_VOL_HOST_SPARSE?$AA@	; `string'
PUBLIC	??_C@_0BL@LHDMMKJO@EXE_FILE_EXTENSION_CONFIRM?$AA@ ; `string'
PUBLIC	??_C@_0BP@NCOMIFAB@CONFIRM_SYSTEM_ENCRYPTION_MODE?$AA@ ; `string'
PUBLIC	??_C@_0BA@ECFGGOBI@ALREADY_MOUNTED?$AA@		; `string'
PUBLIC	??_C@_0CD@DKKKPMLO@DEVICE_SELECTED_IN_NON_DEVICE_MO@ ; `string'
PUBLIC	??_C@_0CK@NNPIGIED@HIDDEN_VOL_CREATION_UNDER_HIDDEN@ ; `string'
PUBLIC	??_C@_0BN@DOPCDKC@ADMIN_PRIVILEGES_WARN_HIDVOL?$AA@ ; `string'
PUBLIC	??_C@_0BK@EHEECKKC@WINDOWS_BOOT_LOADER_HINTS?$AA@ ; `string'
PUBLIC	??_C@_0CI@KANLNDNO@CUSTOM_BOOT_MANAGERS_IN_MBR_UNSU@ ; `string'
PUBLIC	??_C@_0DC@EAFFGLI@WDE_UNSUPPORTED_FOR_MULTIPLE_SYS@ ; `string'
PUBLIC	??_C@_0CE@BLBEBHP@SYS_PARTITION_MUST_BE_ON_BOOT_DR@ ; `string'
PUBLIC	??_C@_0BG@HEENEHGK@DECOY_OS_REQUIREMENTS?$AA@	; `string'
PUBLIC	??_C@_0CH@PDMBGJBN@CONFIRM_HIDDEN_OS_EXTRA_BOOT_PAR@ ; `string'
PUBLIC	??_C@_0CF@PJBIBHBE@UNSUPPORTED_HIDDEN_OS_MULTI_BOOT@ ; `string'
PUBLIC	??_C@_0BF@OEFLIJFC@HIDDEN_OS_MULTI_BOOT?$AA@	; `string'
PUBLIC	??_C@_0BN@EDCHAEND@MULTI_BOOT_FOR_ADVANCED_ONLY?$AA@ ; `string'
PUBLIC	??_C@_0CH@OILEALFF@HIDDEN_OS_WRITE_PROTECTION_EXPLA@ ; `string'
PUBLIC	??_C@_0CG@LFCLDECM@HIDDEN_OS_WRITE_PROTECTION_BRIEF@ ; `string'
PUBLIC	??_C@_0BL@IDNPDOGL@DECOY_OS_REINSTALL_WARNING?$AA@ ; `string'
PUBLIC	??_C@_0CI@HFDNHKMM@GAP_BETWEEN_SYS_AND_HIDDEN_OS_PA@ ; `string'
PUBLIC	??_C@_0BI@BGKLALIE@CONTAINER_ADMIN_WARNING?$AA@	; `string'
PUBLIC	??_C@_0BJ@EAMLJMAO@DECOY_OS_VERSION_WARNING?$AA@ ; `string'
PUBLIC	??_C@_0CF@JGIFKPLM@WIPE_FINISHED_DECOY_SYSTEM_PARTI@ ; `string'
PUBLIC	??_C@_0BN@KCOCCGGE@SYS_DRIVE_SIZE_PROBE_TIMEOUT?$AA@ ; `string'
PUBLIC	??_C@_0CF@OEJEFNLJ@ALT_KEY_CHARS_NOT_FOR_SYS_ENCRYP@ ; `string'
PUBLIC	??_C@_0CA@HGCGAMEK@KEYB_LAYOUT_SYS_ENC_EXPLANATION?$AA@ ; `string'
PUBLIC	??_C@_0BN@MNCKOJDH@KEYB_LAYOUT_CHANGE_PREVENTED?$AA@ ; `string'
PUBLIC	??_C@_0CF@BKMHLPHL@DISCARD_UNREADABLE_ENCRYPTED_SEC@ ; `string'
PUBLIC	??_C@_0BK@ELCHMCAJ@ENABLE_BAD_SECTOR_ZEROING?$AA@ ; `string'
PUBLIC	??_C@_0BL@HGGGHBLG@SYSTEM_DECRYPTION_FINISHED?$AA@ ; `string'
PUBLIC	??_C@_04JFFKLGJF@?$CF02X?$AA@			; `string'
PUBLIC	??_C@_0BM@LNJIBCAI@?2CipherShed?5Rescue?5Disk?4iso?$AA@ ; `string'
PUBLIC	??_C@_0BI@FLNDDLDP@TC_INSTALLER_IS_RUNNING?$AA@	; `string'
PUBLIC	_hwndDlg$GSCopy$
PUBLIC	_lParam$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_MainDialogProc@16
PUBLIC	??_R0?AUSystemException@CipherShed@@@8		; CipherShed::SystemException `RTTI Type Descriptor'
EXTRN	_AskNoYes:PROC
EXTRN	_CloseVolume:PROC
EXTRN	_OpenVolume:PROC
EXTRN	?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z:PROC ; GetAvailableHostDevices
EXTRN	?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CipherShed::BootEncryption::PrepareInstallation
EXTRN	_AskWarnOkCancel:PROC
EXTRN	?PrepareHiddenOSCreation@BootEncryption@CipherShed@@QAEXHHH@Z:PROC ; CipherShed::BootEncryption::PrepareHiddenOSCreation
EXTRN	_UacAnalyzeHiddenVolumeHost:PROC
EXTRN	_ManageStartupSeq:PROC
EXTRN	?Install@BootEncryption@CipherShed@@QAEX_N@Z:PROC ; CipherShed::BootEncryption::Install
EXTRN	_AskWarnYesNoTitle:PROC
EXTRN	_LocalizationActive:DWORD
EXTRN	_ErrorDirectTitle:PROC
EXTRN	?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ:PROC ; CipherShed::BootEncryption::VerifyRescueDisk
EXTRN	?IsCDDrivePresent@BootEncryption@CipherShed@@QAE_NXZ:PROC ; CipherShed::BootEncryption::IsCDDrivePresent
EXTRN	?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CipherShed::BootEncryption::CreateRescueIsoImage
EXTRN	_KeyFilesApply:PROC
EXTRN	_CheckPasswordLengthAlertTitle:PROC
EXTRN	_CheckPasswordCharEncoding:PROC
EXTRN	_CheckFileExtension:PROC
EXTRN	_IsSystemDevicePath:PROC
EXTRN	_IsMountedVolume:PROC
EXTRN	_RelativePath2Absolute:PROC
EXTRN	?InvalidateCachedSysDriveProperties@BootEncryption@CipherShed@@QAEXXZ:PROC ; CipherShed::BootEncryption::InvalidateCachedSysDriveProperties
EXTRN	_WarningDirect:PROC
EXTRN	_IsBuiltInAdmin:PROC
EXTRN	_CurrentOSMajor:DWORD
EXTRN	_AboutDlgProc@16:PROC
EXTRN	__imp__GetAsyncKeyState@4:PROC
EXTRN	_IsDiskReadError:PROC
EXTRN	__imp__KillTimer@8:PROC
EXTRN	__imp__SHGetFolderPathA@20:PROC
EXTRN	_ComServerFormat:PROC
EXTRN	_hTitleFont:DWORD
EXTRN	_LoadDefaultKeyFilesParam:PROC
EXTRN	_RenderBitmap:PROC
EXTRN	_ScreenDPI:DWORD
EXTRN	_IsCipherShedInstallerRunning:PROC
EXTRN	_InitDialog:PROC
;	COMDAT ?warningConfirmed@?NM@??MainDialogProc@@9@16@4_NA
; File c:\program files\microsoft sdks\windows\v7.0\include\winnt.h
_BSS	SEGMENT
?warningConfirmed@?NM@??MainDialogProc@@9@16@4_NA DB 01H DUP (?) ; `MainDialogProc'::`220'::warningConfirmed
_BSS	ENDS
;	COMDAT ??_R0?AUSystemException@CipherShed@@@8
_DATA	SEGMENT
??_R0?AUSystemException@CipherShed@@@8 DD FLAT:??_7type_info@@6B@ ; CipherShed::SystemException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSystemException@CipherShed@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_0BH@KAHGPAJO@CONFIRM_EXIT_UNIVERSAL?$AA@
CONST	SEGMENT
??_C@_0BH@KAHGPAJO@CONFIRM_EXIT_UNIVERSAL?$AA@ DB 'CONFIRM_EXIT_UNIVERSAL'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@IFOLEKLB@CONFIRM_CANCEL_SYS_ENC_PRETEST?$AA@
CONST	SEGMENT
??_C@_0BP@IFOLEKLB@CONFIRM_CANCEL_SYS_ENC_PRETEST?$AA@ DB 'CONFIRM_CANCEL'
	DB	'_SYS_ENC_PRETEST', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KDAJHHMG@CONFIRM_CANCEL_HIDDEN_OS_CREATIO@
CONST	SEGMENT
??_C@_0CC@KDAJHHMG@CONFIRM_CANCEL_HIDDEN_OS_CREATIO@ DB 'CONFIRM_CANCEL_H'
	DB	'IDDEN_OS_CREATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OMHIMMHH@SYSTEM_ENCRYPTION_DEFER_CONFIRM?$AA@
CONST	SEGMENT
??_C@_0CA@OMHIMMHH@SYSTEM_ENCRYPTION_DEFER_CONFIRM?$AA@ DB 'SYSTEM_ENCRYP'
	DB	'TION_DEFER_CONFIRM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MDOAMJOP@SYSTEM_DECRYPTION_DEFER_CONFIRM?$AA@
CONST	SEGMENT
??_C@_0CA@MDOAMJOP@SYSTEM_DECRYPTION_DEFER_CONFIRM?$AA@ DB 'SYSTEM_DECRYP'
	DB	'TION_DEFER_CONFIRM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MEPMKNNG@NONSYS_INPLACE_ENC_DEFER_CONFIRM@
CONST	SEGMENT
??_C@_0CB@MEPMKNNG@NONSYS_INPLACE_ENC_DEFER_CONFIRM@ DB 'NONSYS_INPLACE_E'
	DB	'NC_DEFER_CONFIRM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@DBNLNPHP@FOUND_NO_PARTITION_W_DEFERRED_IN@
CONST	SEGMENT
??_C@_0CK@DBNLNPHP@FOUND_NO_PARTITION_W_DEFERRED_IN@ DB 'FOUND_NO_PARTITI'
	DB	'ON_W_DEFERRED_INPLACE_ENC', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BMFNBJAJ@WIPE_MODE_WARN?$AA@
CONST	SEGMENT
??_C@_0P@BMFNBJAJ@WIPE_MODE_WARN?$AA@ DB 'WIPE_MODE_WARN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@ICCGDAH@CONFIRM_WIPE_START?$AA@
CONST	SEGMENT
??_C@_0BD@ICCGDAH@CONFIRM_WIPE_START?$AA@ DB 'CONFIRM_WIPE_START', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@LLDBJBEP@CONFIRM_WIPE_START_DECOY_SYS_PAR@
CONST	SEGMENT
??_C@_0CH@LLDBJBEP@CONFIRM_WIPE_START_DECOY_SYS_PAR@ DB 'CONFIRM_WIPE_STA'
	DB	'RT_DECOY_SYS_PARTITION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GNHKCMLM@CANT_DISMOUNT_OUTER_VOL?$AA@
CONST	SEGMENT
??_C@_0BI@GNHKCMLM@CANT_DISMOUNT_OUTER_VOL?$AA@ DB 'CANT_DISMOUNT_OUTER_V'
	DB	'OL', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NGECJJAH@FORMAT_IN_PROGRESS?$AA@
CONST	SEGMENT
??_C@_0BD@NGECJJAH@FORMAT_IN_PROGRESS?$AA@ DB 'FORMAT_IN_PROGRESS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DADPIOMM@CLUSTER_TOO_SMALL?$AA@
CONST	SEGMENT
??_C@_0BC@DADPIOMM@CLUSTER_TOO_SMALL?$AA@ DB 'CLUSTER_TOO_SMALL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NLBJKNFD@CONFIRM_FAT_FOR_FILES_OVER_4GB?$AA@
CONST	SEGMENT
??_C@_0BP@NLBJKNFD@CONFIRM_FAT_FOR_FILES_OVER_4GB?$AA@ DB 'CONFIRM_FAT_FO'
	DB	'R_FILES_OVER_4GB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NALGNOGO@HIDDEN_VOL_HOST_NTFS_ASK?$AA@
CONST	SEGMENT
??_C@_0BJ@NALGNOGO@HIDDEN_VOL_HOST_NTFS_ASK?$AA@ DB 'HIDDEN_VOL_HOST_NTFS'
	DB	'_ASK', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HAPBHPDC@FAT_NOT_AVAILABLE_FOR_SO_LARGE_V@
CONST	SEGMENT
??_C@_0CG@HAPBHPDC@FAT_NOT_AVAILABLE_FOR_SO_LARGE_V@ DB 'FAT_NOT_AVAILABL'
	DB	'E_FOR_SO_LARGE_VOLUME', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PNCJJOHK@OUTER_VOLUME_TOO_SMALL_FOR_HIDDE@
CONST	SEGMENT
??_C@_0CK@PNCJJOHK@OUTER_VOLUME_TOO_SMALL_FOR_HIDDE@ DB 'OUTER_VOLUME_TOO'
	DB	'_SMALL_FOR_HIDDEN_OS_NTFS', 00H		; `string'
CONST	ENDS
;	COMDAT __real@4000cccccccccccd
CONST	SEGMENT
__real@4000cccccccccccd DQ 04000cccccccccccdr	; 2.1
CONST	ENDS
;	COMDAT ??_C@_0BN@EFIGHBDJ@OFFER_FAT_FORMAT_ALTERNATIVE?$AA@
CONST	SEGMENT
??_C@_0BN@EFIGHBDJ@OFFER_FAT_FORMAT_ALTERNATIVE?$AA@ DB 'OFFER_FAT_FORMAT'
	DB	'_ALTERNATIVE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@MGEMKCIE@CANNOT_INITIATE_SYS_ENCRYPTION_P@
CONST	SEGMENT
??_C@_0CH@MGEMKCIE@CANNOT_INITIATE_SYS_ENCRYPTION_P@ DB 'CANNOT_INITIATE_'
	DB	'SYS_ENCRYPTION_PRETEST', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@DFDNFFMK@CANNOT_INITIATE_HIDDEN_OS_CREATI@
CONST	SEGMENT
??_C@_0CD@DFDNFFMK@CANNOT_INITIATE_HIDDEN_OS_CREATI@ DB 'CANNOT_INITIATE_'
	DB	'HIDDEN_OS_CREATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@GDNJCFCO@IDD_VOL_CREATION_WIZARD_DLG_CONF@
CONST	SEGMENT
??_C@_0CM@GDNJCFCO@IDD_VOL_CREATION_WIZARD_DLG_CONF@ DB 'IDD_VOL_CREATION'
	DB	'_WIZARD_DLG_CONFIRM_RESTART', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DGIFCGMK@PREBOOT_NOT_LOCALIZED?$AA@
CONST	SEGMENT
??_C@_0BG@DGIFCGMK@PREBOOT_NOT_LOCALIZED?$AA@ DB 'PREBOOT_NOT_LOCALIZED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HPABPDKI@RESCUE_DISK_CHECK_FAILED_TITLE?$AA@
CONST	SEGMENT
??_C@_0BP@HPABPDKI@RESCUE_DISK_CHECK_FAILED_TITLE?$AA@ DB 'RESCUE_DISK_CH'
	DB	'ECK_FAILED_TITLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KDGMPLJF@RESCUE_DISK_CHECK_FAILED?$AA@
CONST	SEGMENT
??_C@_0BJ@KDGMPLJF@RESCUE_DISK_CHECK_FAILED?$AA@ DB 'RESCUE_DISK_CHECK_FA'
	DB	'ILED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LCMPFPDG@RESCUE_DISK_CHECK_FAILED_SENTENC@
CONST	SEGMENT
??_C@_0CL@LCMPFPDG@RESCUE_DISK_CHECK_FAILED_SENTENC@ DB 'RESCUE_DISK_CHEC'
	DB	'K_FAILED_SENTENCE_APPENDIX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GAGHEKIC@RESCUE_DISK_WIN_ISOBURN_PRELAUNC@
CONST	SEGMENT
??_C@_0CH@GAGHEKIC@RESCUE_DISK_WIN_ISOBURN_PRELAUNC@ DB 'RESCUE_DISK_WIN_'
	DB	'ISOBURN_PRELAUNCH_NOTE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EJPBDEFG@RESCUE_DISK_BURN_NO_CHECK_WARN?$AA@
CONST	SEGMENT
??_C@_0BP@EJPBDEFG@RESCUE_DISK_BURN_NO_CHECK_WARN?$AA@ DB 'RESCUE_DISK_BU'
	DB	'RN_NO_CHECK_WARN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@BHLKCEED@CD_BURNER_NOT_PRESENT_WILL_STORE@
CONST	SEGMENT
??_C@_0CK@BHLKCEED@CD_BURNER_NOT_PRESENT_WILL_STORE@ DB 'CD_BURNER_NOT_PR'
	DB	'ESENT_WILL_STORE_ISO_INFO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OBJIPJKN@CD_BURNER_NOT_PRESENT_WILL_STORE@
CONST	SEGMENT
??_C@_0CF@OBJIPJKN@CD_BURNER_NOT_PRESENT_WILL_STORE@ DB 'CD_BURNER_NOT_PR'
	DB	'ESENT_WILL_STORE_ISO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GLKAIFEA@CD_BURNER_NOT_PRESENT?$AA@
CONST	SEGMENT
??_C@_0BG@GLKAIFEA@CD_BURNER_NOT_PRESENT?$AA@ DB 'CD_BURNER_NOT_PRESENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FEAJEJEJ@CD_BURNER_NOT_PRESENT_CONNECTED_@
CONST	SEGMENT
??_C@_0CE@FEAJEJEJ@CD_BURNER_NOT_PRESENT_CONNECTED_@ DB 'CD_BURNER_NOT_PR'
	DB	'ESENT_CONNECTED_NOW', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@FCOKHALJ@CD_BURNER_NOT_PRESENT_WILL_CONNE@
CONST	SEGMENT
??_C@_0CJ@FCOKHALJ@CD_BURNER_NOT_PRESENT_WILL_CONNE@ DB 'CD_BURNER_NOT_PR'
	DB	'ESENT_WILL_CONNECT_LATER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KNHACFHE@CANNOT_CREATE_NON_HIDDEN_NTFS_VO@
CONST	SEGMENT
??_C@_0DG@KNHACFHE@CANNOT_CREATE_NON_HIDDEN_NTFS_VO@ DB 'CANNOT_CREATE_NO'
	DB	'N_HIDDEN_NTFS_VOLUMES_UNDER_HIDDEN_OS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@HFPIFBIF@CANNOT_SATISFY_OVER_4G_FILE_SIZE@
CONST	SEGMENT
??_C@_0CF@HFPIFBIF@CANNOT_SATISFY_OVER_4G_FILE_SIZE@ DB 'CANNOT_SATISFY_O'
	DB	'VER_4G_FILE_SIZE_REQ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BGCHIACG@CANNOT_RESTORE_KEYBOARD_LAYOUT?$AA@
CONST	SEGMENT
??_C@_0BP@BGCHIACG@CANNOT_RESTORE_KEYBOARD_LAYOUT?$AA@ DB 'CANNOT_RESTORE'
	DB	'_KEYBOARD_LAYOUT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LHABIPI@PASSWORD_LENGTH_WARNING_TITLE?$AA@
CONST	SEGMENT
??_C@_0BO@LHABIPI@PASSWORD_LENGTH_WARNING_TITLE?$AA@ DB 'PASSWORD_LENGTH_'
	DB	'WARNING_TITLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CPHEENHA@UNSUPPORTED_CHARS_IN_PWD?$AA@
CONST	SEGMENT
??_C@_0BJ@CPHEENHA@UNSUPPORTED_CHARS_IN_PWD?$AA@ DB 'UNSUPPORTED_CHARS_IN'
	DB	'_PWD', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@NJLIGNCF@FREE_SPACE_FOR_WRITING_TO_OUTER_@
CONST	SEGMENT
??_C@_0CH@NJLIGNCF@FREE_SPACE_FOR_WRITING_TO_OUTER_@ DB 'FREE_SPACE_FOR_W'
	DB	'RITING_TO_OUTER_VOLUME', 00H		; `string'
CONST	ENDS
;	COMDAT __real@3feb333333333333
CONST	SEGMENT
__real@3feb333333333333 DQ 03feb333333333333r	; 0.85
CONST	ENDS
;	COMDAT ??_C@_0BL@IAHLEEBN@VOLUME_TOO_LARGE_FOR_WINXP?$AA@
CONST	SEGMENT
??_C@_0BL@IAHLEEBN@VOLUME_TOO_LARGE_FOR_WINXP?$AA@ DB 'VOLUME_TOO_LARGE_F'
	DB	'OR_WINXP', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FEGMEEPN@VOLUME_TOO_LARGE_FOR_FAT32?$AA@
CONST	SEGMENT
??_C@_0BL@FEGMEEPN@VOLUME_TOO_LARGE_FOR_FAT32?$AA@ DB 'VOLUME_TOO_LARGE_F'
	DB	'OR_FAT32', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05HNJNFBJJ@FAT32?$AA@
CONST	SEGMENT
??_C@_05HNJNFBJJ@FAT32?$AA@ DB 'FAT32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HENDJLLF@NOTE_CASCADE_FOR_SYS_ENCRYPTION?$AA@
CONST	SEGMENT
??_C@_0CA@HENDJLLF@NOTE_CASCADE_FOR_SYS_ENCRYPTION?$AA@ DB 'NOTE_CASCADE_'
	DB	'FOR_SYS_ENCRYPTION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HEIAMGDN@CONFIRM_CASCADE_FOR_SYS_ENCRYPTI@
CONST	SEGMENT
??_C@_0CD@HEIAMGDN@CONFIRM_CASCADE_FOR_SYS_ENCRYPTI@ DB 'CONFIRM_CASCADE_'
	DB	'FOR_SYS_ENCRYPTION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NCAFIIDC@NONSYS_INPLACE_ENC_CONFIRM_BACKU@
CONST	SEGMENT
??_C@_0CC@NCAFIIDC@NONSYS_INPLACE_ENC_CONFIRM_BACKU@ DB 'NONSYS_INPLACE_E'
	DB	'NC_CONFIRM_BACKUP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BGCKDFKI@HIDDEN_VOL_HOST_SPARSE?$AA@
CONST	SEGMENT
??_C@_0BH@BGCKDFKI@HIDDEN_VOL_HOST_SPARSE?$AA@ DB 'HIDDEN_VOL_HOST_SPARSE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LHDMMKJO@EXE_FILE_EXTENSION_CONFIRM?$AA@
CONST	SEGMENT
??_C@_0BL@LHDMMKJO@EXE_FILE_EXTENSION_CONFIRM?$AA@ DB 'EXE_FILE_EXTENSION'
	DB	'_CONFIRM', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NCOMIFAB@CONFIRM_SYSTEM_ENCRYPTION_MODE?$AA@
CONST	SEGMENT
??_C@_0BP@NCOMIFAB@CONFIRM_SYSTEM_ENCRYPTION_MODE?$AA@ DB 'CONFIRM_SYSTEM'
	DB	'_ENCRYPTION_MODE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ECFGGOBI@ALREADY_MOUNTED?$AA@
CONST	SEGMENT
??_C@_0BA@ECFGGOBI@ALREADY_MOUNTED?$AA@ DB 'ALREADY_MOUNTED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@DKKKPMLO@DEVICE_SELECTED_IN_NON_DEVICE_MO@
CONST	SEGMENT
??_C@_0CD@DKKKPMLO@DEVICE_SELECTED_IN_NON_DEVICE_MO@ DB 'DEVICE_SELECTED_'
	DB	'IN_NON_DEVICE_MODE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NNPIGIED@HIDDEN_VOL_CREATION_UNDER_HIDDEN@
CONST	SEGMENT
??_C@_0CK@NNPIGIED@HIDDEN_VOL_CREATION_UNDER_HIDDEN@ DB 'HIDDEN_VOL_CREAT'
	DB	'ION_UNDER_HIDDEN_OS_HOWTO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DOPCDKC@ADMIN_PRIVILEGES_WARN_HIDVOL?$AA@
CONST	SEGMENT
??_C@_0BN@DOPCDKC@ADMIN_PRIVILEGES_WARN_HIDVOL?$AA@ DB 'ADMIN_PRIVILEGES_'
	DB	'WARN_HIDVOL', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EHEECKKC@WINDOWS_BOOT_LOADER_HINTS?$AA@
CONST	SEGMENT
??_C@_0BK@EHEECKKC@WINDOWS_BOOT_LOADER_HINTS?$AA@ DB 'WINDOWS_BOOT_LOADER'
	DB	'_HINTS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KANLNDNO@CUSTOM_BOOT_MANAGERS_IN_MBR_UNSU@
CONST	SEGMENT
??_C@_0CI@KANLNDNO@CUSTOM_BOOT_MANAGERS_IN_MBR_UNSU@ DB 'CUSTOM_BOOT_MANA'
	DB	'GERS_IN_MBR_UNSUPPORTED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@EAFFGLI@WDE_UNSUPPORTED_FOR_MULTIPLE_SYS@
CONST	SEGMENT
??_C@_0DC@EAFFGLI@WDE_UNSUPPORTED_FOR_MULTIPLE_SYS@ DB 'WDE_UNSUPPORTED_F'
	DB	'OR_MULTIPLE_SYSTEMS_ON_ONE_DRIVE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BLBEBHP@SYS_PARTITION_MUST_BE_ON_BOOT_DR@
CONST	SEGMENT
??_C@_0CE@BLBEBHP@SYS_PARTITION_MUST_BE_ON_BOOT_DR@ DB 'SYS_PARTITION_MUS'
	DB	'T_BE_ON_BOOT_DRIVE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HEENEHGK@DECOY_OS_REQUIREMENTS?$AA@
CONST	SEGMENT
??_C@_0BG@HEENEHGK@DECOY_OS_REQUIREMENTS?$AA@ DB 'DECOY_OS_REQUIREMENTS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@PDMBGJBN@CONFIRM_HIDDEN_OS_EXTRA_BOOT_PAR@
CONST	SEGMENT
??_C@_0CH@PDMBGJBN@CONFIRM_HIDDEN_OS_EXTRA_BOOT_PAR@ DB 'CONFIRM_HIDDEN_O'
	DB	'S_EXTRA_BOOT_PARTITION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PJBIBHBE@UNSUPPORTED_HIDDEN_OS_MULTI_BOOT@
CONST	SEGMENT
??_C@_0CF@PJBIBHBE@UNSUPPORTED_HIDDEN_OS_MULTI_BOOT@ DB 'UNSUPPORTED_HIDD'
	DB	'EN_OS_MULTI_BOOT_CFG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OEFLIJFC@HIDDEN_OS_MULTI_BOOT?$AA@
CONST	SEGMENT
??_C@_0BF@OEFLIJFC@HIDDEN_OS_MULTI_BOOT?$AA@ DB 'HIDDEN_OS_MULTI_BOOT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EDCHAEND@MULTI_BOOT_FOR_ADVANCED_ONLY?$AA@
CONST	SEGMENT
??_C@_0BN@EDCHAEND@MULTI_BOOT_FOR_ADVANCED_ONLY?$AA@ DB 'MULTI_BOOT_FOR_A'
	DB	'DVANCED_ONLY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@OILEALFF@HIDDEN_OS_WRITE_PROTECTION_EXPLA@
CONST	SEGMENT
??_C@_0CH@OILEALFF@HIDDEN_OS_WRITE_PROTECTION_EXPLA@ DB 'HIDDEN_OS_WRITE_'
	DB	'PROTECTION_EXPLANATION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@LFCLDECM@HIDDEN_OS_WRITE_PROTECTION_BRIEF@
CONST	SEGMENT
??_C@_0CG@LFCLDECM@HIDDEN_OS_WRITE_PROTECTION_BRIEF@ DB 'HIDDEN_OS_WRITE_'
	DB	'PROTECTION_BRIEF_INFO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IDNPDOGL@DECOY_OS_REINSTALL_WARNING?$AA@
CONST	SEGMENT
??_C@_0BL@IDNPDOGL@DECOY_OS_REINSTALL_WARNING?$AA@ DB 'DECOY_OS_REINSTALL'
	DB	'_WARNING', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@HFDNHKMM@GAP_BETWEEN_SYS_AND_HIDDEN_OS_PA@
CONST	SEGMENT
??_C@_0CI@HFDNHKMM@GAP_BETWEEN_SYS_AND_HIDDEN_OS_PA@ DB 'GAP_BETWEEN_SYS_'
	DB	'AND_HIDDEN_OS_PARTITION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BGKLALIE@CONTAINER_ADMIN_WARNING?$AA@
CONST	SEGMENT
??_C@_0BI@BGKLALIE@CONTAINER_ADMIN_WARNING?$AA@ DB 'CONTAINER_ADMIN_WARNI'
	DB	'NG', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EAMLJMAO@DECOY_OS_VERSION_WARNING?$AA@
CONST	SEGMENT
??_C@_0BJ@EAMLJMAO@DECOY_OS_VERSION_WARNING?$AA@ DB 'DECOY_OS_VERSION_WAR'
	DB	'NING', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JGIFKPLM@WIPE_FINISHED_DECOY_SYSTEM_PARTI@
CONST	SEGMENT
??_C@_0CF@JGIFKPLM@WIPE_FINISHED_DECOY_SYSTEM_PARTI@ DB 'WIPE_FINISHED_DE'
	DB	'COY_SYSTEM_PARTITION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KCOCCGGE@SYS_DRIVE_SIZE_PROBE_TIMEOUT?$AA@
CONST	SEGMENT
??_C@_0BN@KCOCCGGE@SYS_DRIVE_SIZE_PROBE_TIMEOUT?$AA@ DB 'SYS_DRIVE_SIZE_P'
	DB	'ROBE_TIMEOUT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OEJEFNLJ@ALT_KEY_CHARS_NOT_FOR_SYS_ENCRYP@
CONST	SEGMENT
??_C@_0CF@OEJEFNLJ@ALT_KEY_CHARS_NOT_FOR_SYS_ENCRYP@ DB 'ALT_KEY_CHARS_NO'
	DB	'T_FOR_SYS_ENCRYPTION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HGCGAMEK@KEYB_LAYOUT_SYS_ENC_EXPLANATION?$AA@
CONST	SEGMENT
??_C@_0CA@HGCGAMEK@KEYB_LAYOUT_SYS_ENC_EXPLANATION?$AA@ DB 'KEYB_LAYOUT_S'
	DB	'YS_ENC_EXPLANATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MNCKOJDH@KEYB_LAYOUT_CHANGE_PREVENTED?$AA@
CONST	SEGMENT
??_C@_0BN@MNCKOJDH@KEYB_LAYOUT_CHANGE_PREVENTED?$AA@ DB 'KEYB_LAYOUT_CHAN'
	DB	'GE_PREVENTED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BKMHLPHL@DISCARD_UNREADABLE_ENCRYPTED_SEC@
CONST	SEGMENT
??_C@_0CF@BKMHLPHL@DISCARD_UNREADABLE_ENCRYPTED_SEC@ DB 'DISCARD_UNREADAB'
	DB	'LE_ENCRYPTED_SECTORS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@ELCHMCAJ@ENABLE_BAD_SECTOR_ZEROING?$AA@
CONST	SEGMENT
??_C@_0BK@ELCHMCAJ@ENABLE_BAD_SECTOR_ZEROING?$AA@ DB 'ENABLE_BAD_SECTOR_Z'
	DB	'EROING', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HGGGHBLG@SYSTEM_DECRYPTION_FINISHED?$AA@
CONST	SEGMENT
??_C@_0BL@HGGGHBLG@SYSTEM_DECRYPTION_FINISHED?$AA@ DB 'SYSTEM_DECRYPTION_'
	DB	'FINISHED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04JFFKLGJF@?$CF02X?$AA@
CONST	SEGMENT
??_C@_04JFFKLGJF@?$CF02X?$AA@ DB '%02X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LNJIBCAI@?2CipherShed?5Rescue?5Disk?4iso?$AA@
CONST	SEGMENT
??_C@_0BM@LNJIBCAI@?2CipherShed?5Rescue?5Disk?4iso?$AA@ DB '\CipherShed R'
	DB	'escue Disk.iso', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FLNDDLDP@TC_INSTALLER_IS_RUNNING?$AA@
CONST	SEGMENT
??_C@_0BI@FLNDDLDP@TC_INSTALLER_IS_RUNNING?$AA@ DB 'TC_INSTALLER_IS_RUNNI'
	DB	'NG', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_MainDialogProc@16$107 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffec0H
	DD	FLAT:__catch$_MainDialogProc@16$41
__catchsym$_MainDialogProc@16$106 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffec8H
	DD	FLAT:__catch$_MainDialogProc@16$39
__catchsym$_MainDialogProc@16$105 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffed8H
	DD	FLAT:__catch$_MainDialogProc@16$37
__catchsym$_MainDialogProc@16$104 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffed0H
	DD	FLAT:__catch$_MainDialogProc@16$35
__catchsym$_MainDialogProc@16$103 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffee0H
	DD	FLAT:__catch$_MainDialogProc@16$33
__catchsym$_MainDialogProc@16$102 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffee8H
	DD	FLAT:__catch$_MainDialogProc@16$31
__catchsym$_MainDialogProc@16$101 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffeb8H
	DD	FLAT:__catch$_MainDialogProc@16$29
__catchsym$_MainDialogProc@16$100 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffef0H
	DD	FLAT:__catch$_MainDialogProc@16$27
__catchsym$_MainDialogProc@16$99 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffef4H
	DD	FLAT:__catch$_MainDialogProc@16$25
__catchsym$_MainDialogProc@16$98 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffed4H
	DD	FLAT:__catch$_MainDialogProc@16$23
__catchsym$_MainDialogProc@16$97 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffebcH
	DD	FLAT:__catch$_MainDialogProc@16$21
__catchsym$_MainDialogProc@16$96 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffea8H
	DD	FLAT:__catch$_MainDialogProc@16$19
__catchsym$_MainDialogProc@16$95 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffee4H
	DD	FLAT:__catch$_MainDialogProc@16$17
__catchsym$_MainDialogProc@16$94 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffef8H
	DD	FLAT:__catch$_MainDialogProc@16$13
__catchsym$_MainDialogProc@16$93 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffedcH
	DD	FLAT:__catch$_MainDialogProc@16$14
__catchsym$_MainDialogProc@16$92 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffeccH
	DD	FLAT:__catch$_MainDialogProc@16$11
__catchsym$_MainDialogProc@16$91 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffec4H
	DD	FLAT:__catch$_MainDialogProc@16$9
__catchsym$_MainDialogProc@16$89 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffeacH
	DD	FLAT:__catch$_MainDialogProc@16$2
__catchsym$_MainDialogProc@16$88 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffeb4H
	DD	FLAT:__catch$_MainDialogProc@16$3
__catchsym$_MainDialogProc@16$87 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffeb0H
	DD	FLAT:__catch$_MainDialogProc@16$0
__catchsym$_MainDialogProc@16$90 DD 08H
	DD	FLAT:??_R0?AUSystemException@CipherShed@@@8
	DD	0ffffffc8H
	DD	FLAT:__catch$_MainDialogProc@16$6
	DD	08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0fffffeecH
	DD	FLAT:__catch$_MainDialogProc@16$7
__ehfuncinfo$_MainDialogProc@16 DD 019930522H
	DD	047H
	DD	FLAT:__unwindtable$_MainDialogProc@16
	DD	015H
	DD	FLAT:__tryblocktable$_MainDialogProc@16
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$_MainDialogProc@16 DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$87
	DD	06H
	DD	06H
	DD	07H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$88
	DD	04H
	DD	04H
	DD	07H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$89
	DD	08H
	DD	08H
	DD	09H
	DD	02H
	DD	FLAT:__catchsym$_MainDialogProc@16$90
	DD	0aH
	DD	0aH
	DD	0bH
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$91
	DD	0cH
	DD	0cH
	DD	0dH
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$92
	DD	010H
	DD	010H
	DD	011H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$93
	DD	0eH
	DD	0eH
	DD	011H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$94
	DD	012H
	DD	012H
	DD	013H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$95
	DD	014H
	DD	014H
	DD	015H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$96
	DD	016H
	DD	016H
	DD	017H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$97
	DD	01aH
	DD	01aH
	DD	01bH
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$98
	DD	01cH
	DD	01eH
	DD	01fH
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$99
	DD	020H
	DD	020H
	DD	021H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$100
	DD	031H
	DD	032H
	DD	033H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$101
	DD	034H
	DD	035H
	DD	036H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$102
	DD	038H
	DD	038H
	DD	039H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$103
	DD	03aH
	DD	03aH
	DD	03bH
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$104
	DD	03cH
	DD	03cH
	DD	03dH
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$105
	DD	03eH
	DD	03eH
	DD	03fH
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$106
	DD	045H
	DD	045H
	DD	046H
	DD	01H
	DD	FLAT:__catchsym$_MainDialogProc@16$107
__unwindtable$_MainDialogProc@16 DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$45
	DD	02H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$46
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	05H
	DD	00H
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0fH
	DD	00H
	DD	0fH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$49
	DD	018H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$50
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01cH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$53
	DD	01dH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$54
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$57
	DD	022H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$58
	DD	023H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$59
	DD	024H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$60
	DD	025H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$61
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$63
	DD	027H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$64
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$64
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$66
	DD	02aH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$67
	DD	02bH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$68
	DD	02cH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$69
	DD	02dH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$70
	DD	02eH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$71
	DD	02fH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$72
	DD	0ffffffffH
	DD	00H
	DD	031H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$74
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	034H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$75
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$76
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$78
	DD	040H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$79
	DD	041H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$80
	DD	042H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$81
	DD	043H
	DD	FLAT:__unwindfunclet$_MainDialogProc@16$82
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\format\tcformat.c
xdata$x	ENDS
;	COMDAT _MainDialogProc@16
_TEXT	SEGMENT
$T169280 = -2628					; size = 384
$T169257 = -2244					; size = 384
$T169242 = -1858					; size = 94
$T169265 = -1764					; size = 94
$T169254 = -1670					; size = 94
$T169247 = -1576					; size = 94
$T169264 = -1482					; size = 94
$T169296 = -1388					; size = 24
_volume$134647 = -1364					; size = 56
$T169253 = -1308					; size = 16
$T169304 = -1292					; size = 28
$T169246 = -1264					; size = 28
$T169305 = -1236					; size = 28
$T169312 = -1208					; size = 28
$T169306 = -1180					; size = 28
$T169322 = -1152					; size = 28
$T169283 = -1124					; size = 28
$T169271 = -1096					; size = 28
$T169284 = -1068					; size = 28
$T169320 = -1040					; size = 28
$T169285 = -1012					; size = 28
$T169303 = -984						; size = 28
$T169286 = -956						; size = 28
$T169300 = -928						; size = 28
$T169287 = -900						; size = 28
$T169245 = -872						; size = 28
$T169288 = -844						; size = 28
$T169319 = -816						; size = 28
$T169275 = -788						; size = 28
$T169321 = -760						; size = 28
$T169276 = -732						; size = 28
$T169323 = -704						; size = 28
$T169277 = -676						; size = 28
$T169324 = -648						; size = 28
$T169299 = -620						; size = 28
$T169270 = -592						; size = 28
$T169302 = -564						; size = 28
$T169301 = -536						; size = 28
$T169269 = -508						; size = 28
$T169291 = -480						; size = 24
$T169309 = -456						; size = 28
$T169311 = -428						; size = 28
$T169307 = -400						; size = 28
$T169244 = -372						; size = 28
_e$134341 = -344					; size = 4
_e$134225 = -340					; size = 4
_e$134166 = -336					; size = 4
_e$134227 = -332					; size = 4
_e$134676 = -328					; size = 4
_e$134383 = -324					; size = 4
_e$134818 = -320					; size = 4
_e$134257 = -316					; size = 4
_e$134758 = -312					; size = 4
_e$134262 = -308					; size = 4
_e$134740 = -304					; size = 4
_e$134398 = -300					; size = 4
_e$134751 = -296					; size = 4
_e$134294 = -292					; size = 4
_e$134724 = -288					; size = 4
_e$134300 = -284					; size = 4
_e$134685 = -280					; size = 4
_e$134246 = -276					; size = 4
_e$134422 = -272					; size = 4
_e$134415 = -268					; size = 4
_e$134292 = -264					; size = 4
_multiChoiceStr$134689 = -260				; size = 24
_rW$169940 = -236					; size = 16
_rW$169659 = -220					; size = 16
_rW$169584 = -204					; size = 16
_$S2$134632 = -188					; size = 48
_rD$169939 = -140					; size = 16
_rD$169508 = -124					; size = 16
_rD$169658 = -108					; size = 16
_rD$169583 = -92					; size = 16
_rW$169509 = -76					; size = 16
_decoySysPartitionWipeStatus$134288 = -76		; size = 16
_tmpbDevice$134888 = -60				; size = 4
$T169272 = -60						; size = 4
_e$134235 = -56						; size = 4
_lParam$GSCopy$ = -52					; size = 4
_tmpbDevice$134488 = -52				; size = 4
tv6063 = -48						; size = 8
tv6060 = -48						; size = 8
tv6034 = -48						; size = 8
_tmpbDevice$134628 = -44				; size = 4
tv5807 = -40						; size = 8
tv5804 = -40						; size = 8
tv5790 = -40						; size = 8
tv5756 = -40						; size = 8
tv5678 = -40						; size = 8
$T169386 = -36						; size = 4
tv5131 = -32						; size = 8
_hwndDlg$GSCopy$ = -28					; size = 4
$T169279 = -21						; size = 1
$T169274 = -21						; size = 1
_nNewPageNo$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_szTmp$134273 = 0					; size = 8192
_msg$134700 = 8192					; size = 16384
_szTmp$134720 = 24576					; size = 16000
_szTmp$134278 = 40576					; size = 8192
_tmp$134944 = 48768					; size = 641
_tmp$134310 = 49412					; size = 641
_root$134545 = 50056					; size = 260
_szFileSystemNameBuffer$134543 = 50316			; size = 256
_tmp$134672 = 50572					; size = 371
_tmp$134935 = 50944					; size = 371
_tmpUTF16buf$134584 = 51316				; size = 130
_tmp$169589 = 51448					; size = 130
_tmp$169664 = 51580					; size = 130
_tmp$169945 = 51712					; size = 130
_tmp$169514 = 51844					; size = 130
_tmpUTF16buf$134918 = 51976				; size = 130
_tmp$134938 = 52108					; size = 65
_tmp$134680 = 52176					; size = 65
_tmp2$134191 = 52244					; size = 43
_tmp$134190 = 52288					; size = 17
_tmp3$134197 = 52308					; size = 8
__$ArrayPad$ = 52316					; size = 4
_hwndDlg$ = 52328					; size = 4
_uMsg$ = 52332						; size = 4
_wParam$ = 52336					; size = 4
_lParam$ = 52340					; size = 4
_MainDialogProc@16 PROC					; COMDAT

; 5424 : {

  00000	55		 push	 ebp
  00001	8d ac 24 a0 33
	ff ff		 lea	 ebp, DWORD PTR [esp-52320]
  00008	b8 60 cc 00 00	 mov	 eax, 52320		; 0000cc60H
  0000d	e8 00 00 00 00	 call	 __chkstk
  00012	6a ff		 push	 -1
  00014	68 00 00 00 00	 push	 __ehhandler$_MainDialogProc@16
  00019	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001f	50		 push	 eax
  00020	81 ec 38 0a 00
	00		 sub	 esp, 2616		; 00000a38H
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	89 85 5c cc 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00033	53		 push	 ebx
  00034	56		 push	 esi
  00035	57		 push	 edi
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00043	8b 85 74 cc 00
	00		 mov	 eax, DWORD PTR _lParam$[ebp]

; 5425 : 	WORD lw = LOWORD (wParam);
; 5426 : 
; 5427 : 	int nNewPageNo = nCurPageNo;
; 5428 : 
; 5429 : 	switch (uMsg)

  00049	8b 8d 6c cc 00
	00		 mov	 ecx, DWORD PTR _uMsg$[ebp]
  0004f	8b 9d 68 cc 00
	00		 mov	 ebx, DWORD PTR _hwndDlg$[ebp]
  00055	89 45 cc	 mov	 DWORD PTR _lParam$GSCopy$[ebp], eax
  00058	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  0005d	33 ff		 xor	 edi, edi
  0005f	89 5d e4	 mov	 DWORD PTR _hwndDlg$GSCopy$[ebp], ebx
  00062	89 7d dc	 mov	 DWORD PTR $T169386[ebp], edi
  00065	89 45 ec	 mov	 DWORD PTR _nNewPageNo$[ebp], eax
  00068	81 f9 10 01 00
	00		 cmp	 ecx, 272		; 00000110H
  0006e	0f 87 0c 02 00
	00		 ja	 $LN543@MainDialog
  00074	74 6e		 je	 SHORT $LN514@MainDialog
  00076	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00079	74 54		 je	 SHORT $LN1@MainDialog
  0007b	83 f9 16	 cmp	 ecx, 22			; 00000016H
  0007e	74 16		 je	 SHORT $LN2@MainDialog
  00080	83 f9 53	 cmp	 ecx, 83			; 00000053H
  00083	75 21		 jne	 SHORT $LN515@MainDialog
$LN1252@MainDialog:

; 5973 : 		return 1;
; 5974 : 
; 5975 : 	case WM_HELP:
; 5976 : 
; 5977 : 		OpenPageHelp (hwndDlg, nCurPageNo);

  00085	50		 push	 eax
  00086	53		 push	 ebx
  00087	e8 00 00 00 00	 call	 _OpenPageHelp
  0008c	83 c4 08	 add	 esp, 8
  0008f	b8 01 00 00 00	 mov	 eax, 1
  00094	eb 12		 jmp	 SHORT $LN517@MainDialog
$LN2@MainDialog:

; 7809 : 
; 7810 : 			return 1;
; 7811 : 		}
; 7812 : 
; 7813 : 		return 0;
; 7814 : 
; 7815 : 	case WM_ENDSESSION:
; 7816 : 		EndMainDlg (MainDlg);

  00096	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  0009c	e8 00 00 00 00	 call	 _EndMainDlg

; 7817 : 		localcleanup ();

  000a1	e8 00 00 00 00	 call	 _localcleanup
$LN515@MainDialog:

; 7822 : 		return 1;
; 7823 : 	}
; 7824 : 
; 7825 : 	return 0;

  000a6	33 c0		 xor	 eax, eax
$LN517@MainDialog:

; 7826 : }

  000a8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ab	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b2	59		 pop	 ecx
  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
  000b5	5b		 pop	 ebx
  000b6	8b 8d 5c cc 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bc	33 cd		 xor	 ecx, ebp
  000be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c3	81 c5 60 cc 00
	00		 add	 ebp, 52320		; 0000cc60H
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c2 10 00	 ret	 16			; 00000010H
$LN1@MainDialog:

; 7818 : 		return 0;
; 7819 : 
; 7820 : 	case WM_CLOSE:
; 7821 : 		PostMessage (hwndDlg, TC_APPMSG_FORMAT_USER_QUIT, 0, 0);

  000cf	57		 push	 edi
  000d0	57		 push	 edi
  000d1	68 2f 81 00 00	 push	 33071			; 0000812fH
  000d6	53		 push	 ebx
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  000dd	b8 01 00 00 00	 mov	 eax, 1
  000e2	eb c4		 jmp	 SHORT $LN517@MainDialog
$LN514@MainDialog:

; 5430 : 	{
; 5431 : 	case WM_INITDIALOG:
; 5432 : 		{
; 5433 : 			MainDlg = hwndDlg;
; 5434 : 			InitDialog (hwndDlg);

  000e4	53		 push	 ebx
  000e5	89 1d 00 00 00
	00		 mov	 DWORD PTR _MainDlg, ebx
  000eb	e8 00 00 00 00	 call	 _InitDialog

; 5435 : 			LocalizeDialog (hwndDlg, "IDD_VOL_CREATION_WIZARD_DLG");

  000f0	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@IHMEHMBJ@IDD_VOL_CREATION_WIZARD_DLG?$AA@
  000f5	53		 push	 ebx
  000f6	e8 00 00 00 00	 call	 _LocalizeDialog
  000fb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5436 : 
; 5437 : 			if (IsCipherShedInstallerRunning())

  000fe	e8 00 00 00 00	 call	 _IsCipherShedInstallerRunning
  00103	85 c0		 test	 eax, eax
  00105	74 0d		 je	 SHORT $LN513@MainDialog

; 5438 : 				AbortProcess ("TC_INSTALLER_IS_RUNNING");

  00107	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FLNDDLDP@TC_INSTALLER_IS_RUNNING?$AA@
  0010c	e8 00 00 00 00	 call	 _AbortProcess
  00111	83 c4 04	 add	 esp, 4
$LN513@MainDialog:

; 5439 : 
; 5440 : 			// Resize the bitmap if the user has a non-default DPI 
; 5441 : 			if (ScreenDPI != USER_DEFAULT_SCREEN_DPI)

  00114	83 3d 00 00 00
	00 60		 cmp	 DWORD PTR _ScreenDPI, 96 ; 00000060H
  0011b	74 22		 je	 SHORT $LN512@MainDialog

; 5442 : 			{
; 5443 : 				hbmWizardBitmapRescaled = RenderBitmap (MAKEINTRESOURCE (IDB_WIZARD),
; 5444 : 					GetDlgItem (hwndDlg, IDC_BITMAP_WIZARD),
; 5445 : 					0, 0, 0, 0, FALSE, FALSE);

  0011d	57		 push	 edi
  0011e	57		 push	 edi
  0011f	57		 push	 edi
  00120	57		 push	 edi
  00121	57		 push	 edi
  00122	57		 push	 edi
  00123	68 24 04 00 00	 push	 1060			; 00000424H
  00128	53		 push	 ebx
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0012f	50		 push	 eax
  00130	6a 74		 push	 116			; 00000074H
  00132	e8 00 00 00 00	 call	 _RenderBitmap
  00137	83 c4 20	 add	 esp, 32			; 00000020H
  0013a	a3 00 00 00 00	 mov	 DWORD PTR ?hbmWizardBitmapRescaled@@3PAUHBITMAP__@@A, eax ; hbmWizardBitmapRescaled
$LN512@MainDialog:

; 5446 : 			}
; 5447 : 
; 5448 : 			LoadSettings (hwndDlg);

  0013f	8b f3		 mov	 esi, ebx
  00141	e8 00 00 00 00	 call	 _LoadSettings

; 5449 : 
; 5450 : 			LoadDefaultKeyFilesParam ();

  00146	e8 00 00 00 00	 call	 _LoadDefaultKeyFilesParam

; 5451 : 			RestoreDefaultKeyFilesParam ();

  0014b	e8 00 00 00 00	 call	 _RestoreDefaultKeyFilesParam

; 5452 : 
; 5453 : 			SysEncMultiBootCfg.NumberOfSysDrives = -1;

  00150	83 c8 ff	 or	 eax, -1

; 5454 : 			SysEncMultiBootCfg.MultipleSystemsOnDrive = -1;
; 5455 : 			SysEncMultiBootCfg.BootLoaderLocation = -1;
; 5456 : 			SysEncMultiBootCfg.BootLoaderBrand = -1;
; 5457 : 			SysEncMultiBootCfg.SystemOnBootDrive = -1;
; 5458 : 
; 5459 : 			try
; 5460 : 			{
; 5461 : 				BootEncStatus = BootEncObj->GetStatus();

  00153	8d 8d be f8 ff
	ff		 lea	 ecx, DWORD PTR $T169242[ebp]
  00159	51		 push	 ecx
  0015a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00160	a3 00 00 00 00	 mov	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A, eax
  00165	a3 04 00 00 00	 mov	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A+4, eax
  0016a	a3 08 00 00 00	 mov	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A+8, eax
  0016f	a3 0c 00 00 00	 mov	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A+12, eax
  00174	a3 10 00 00 00	 mov	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A+16, eax
  00179	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  0017c	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus

; 5469 : 			}
; 5470 : 
; 5471 : 			SendMessage (GetDlgItem (hwndDlg, IDC_BOX_TITLE), WM_SETFONT, (WPARAM) hTitleFont, (LPARAM) TRUE);

  00181	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hTitleFont
  00187	8b f0		 mov	 esi, eax
  00189	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0018e	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00193	f3 a5		 rep movsd
  00195	6a 01		 push	 1
  00197	52		 push	 edx
  00198	6a 30		 push	 48			; 00000030H
  0019a	68 e8 03 00 00	 push	 1000			; 000003e8H
  0019f	53		 push	 ebx
  001a0	66 a5		 movsw
  001a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  001a8	50		 push	 eax
  001a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 5472 : 			SetWindowTextW (hwndDlg, lpszTitle);

  001af	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  001b4	50		 push	 eax
  001b5	53		 push	 ebx
  001b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 5473 : 
; 5474 : 			ExtractCommandLine (hwndDlg, (char *) lParam);

  001bc	8b 4d cc	 mov	 ecx, DWORD PTR _lParam$GSCopy$[ebp]
  001bf	51		 push	 ecx
  001c0	53		 push	 ebx
  001c1	e8 00 00 00 00	 call	 _ExtractCommandLine
  001c6	83 c4 08	 add	 esp, 8

; 5475 : 
; 5476 : 			if (ComServerMode)

  001c9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ComServerMode@@3HA, 0 ; ComServerMode
  001d0	74 26		 je	 SHORT $LN510@MainDialog

; 5477 : 			{
; 5478 : 				InitDialog (hwndDlg);

  001d2	53		 push	 ebx
  001d3	e8 00 00 00 00	 call	 _InitDialog
  001d8	83 c4 04	 add	 esp, 4

; 5479 : 
; 5480 : 				if (!ComServerFormat ())

  001db	e8 00 00 00 00	 call	 _ComServerFormat
  001e0	85 c0		 test	 eax, eax
  001e2	0f 85 26 13 00
	00		 jne	 $LN509@MainDialog

; 5481 : 				{
; 5482 : 					handleWin32Error (hwndDlg);

  001e8	53		 push	 ebx
  001e9	e8 00 00 00 00	 call	 _handleWin32Error
  001ee	83 c4 04	 add	 esp, 4

; 5483 : 					exit (1);

  001f1	6a 01		 push	 1
  001f3	e8 00 00 00 00	 call	 _exit
$LN510@MainDialog:

; 5484 : 				}
; 5485 : 				exit (0);
; 5486 : 			}
; 5487 : 
; 5488 : 			SHGetFolderPath (NULL, CSIDL_MYDOCUMENTS, NULL, 0, szRescueDiskISO);

  001f8	68 00 00 00 00	 push	 OFFSET ?szRescueDiskISO@@3PADA ; szRescueDiskISO
  001fd	6a 00		 push	 0
  001ff	6a 00		 push	 0
  00201	6a 05		 push	 5
  00203	6a 00		 push	 0
  00205	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetFolderPathA@20

; 5489 : 			strcat (szRescueDiskISO, "\\CipherShed Rescue Disk.iso");

  0020b	bf 00 00 00 00	 mov	 edi, OFFSET ?szRescueDiskISO@@3PADA ; szRescueDiskISO
  00210	4f		 dec	 edi
$LL1145@MainDialog:
  00211	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00214	47		 inc	 edi
  00215	84 c0		 test	 al, al
  00217	75 f8		 jne	 SHORT $LL1145@MainDialog
  00219	b9 07 00 00 00	 mov	 ecx, 7
  0021e	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BM@LNJIBCAI@?2CipherShed?5Rescue?5Disk?4iso?$AA@

; 5490 : 
; 5491 : 			if (IsOSAtLeast (WIN_VISTA))

  00223	6a 0b		 push	 11			; 0000000bH
  00225	f3 a5		 rep movsd
  00227	e8 00 00 00 00	 call	 _IsOSAtLeast
  0022c	83 c4 04	 add	 esp, 4
  0022f	85 c0		 test	 eax, eax
  00231	74 0a		 je	 SHORT $LN508@MainDialog

; 5492 : 			{
; 5493 : 				// Availability of in-place encryption (which is pre-selected by default whenever
; 5494 : 				// possible) makes partition-hosted volume creation safer.
; 5495 : 				bWarnDeviceFormatAdvanced = FALSE;	

  00233	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bWarnDeviceFormatAdvanced, 0
$LN508@MainDialog:

; 5496 : 			}
; 5497 : 
; 5498 : 			PostMessage (hwndDlg, TC_APPMSG_PERFORM_POST_WMINIT_TASKS, 0, 0);

  0023d	6a 00		 push	 0
  0023f	6a 00		 push	 0
  00241	68 30 81 00 00	 push	 33072			; 00008130H
  00246	53		 push	 ebx
  00247	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 5499 : 		}
; 5500 : 		return 0;

  0024d	e9 54 fe ff ff	 jmp	 $LN515@MainDialog
__catch$_MainDialogProc@16$0:

; 5462 : 			}
; 5463 : 			catch (Exception &e)
; 5464 : 			{
; 5465 : 				e.Show (hwndDlg);

  00252	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134166[ebp]
  00258	8b 11		 mov	 edx, DWORD PTR [ecx]
  0025a	8b 45 e4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  0025d	8b 12		 mov	 edx, DWORD PTR [edx]
  0025f	50		 push	 eax
  00260	ff d2		 call	 edx

; 5466 : 				Error ("ERR_GETTING_SYSTEM_ENCRYPTION_STATUS");

  00262	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@
  00267	e8 00 00 00 00	 call	 _Error

; 5467 : 				EndMainDlg (MainDlg);

  0026c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  00272	83 c4 04	 add	 esp, 4
  00275	e8 00 00 00 00	 call	 _EndMainDlg

; 5468 : 				return 0;

  0027a	b8 00 00 00 00	 mov	 eax, $LN515@MainDialog
  0027f	c3		 ret	 0
$LN543@MainDialog:

; 5425 : 	WORD lw = LOWORD (wParam);
; 5426 : 
; 5427 : 	int nNewPageNo = nCurPageNo;
; 5428 : 
; 5429 : 	switch (uMsg)

  00280	81 f9 2d 81 00
	00		 cmp	 ecx, 33069		; 0000812dH
  00286	0f 87 62 42 00
	00		 ja	 $LN544@MainDialog
  0028c	0f 84 45 41 00
	00		 je	 $LN433@MainDialog
  00292	81 e9 11 01 00
	00		 sub	 ecx, 273		; 00000111H
  00298	0f 84 9a 0c 00
	00		 je	 $LN402@MainDialog
  0029e	83 e9 01	 sub	 ecx, 1
  002a1	0f 84 5c 0c 00
	00		 je	 $LN507@MainDialog
  002a7	83 e9 01	 sub	 ecx, 1
  002aa	0f 85 f6 fd ff
	ff		 jne	 $LN515@MainDialog

; 5501 : 
; 5502 : 	case WM_SYSCOMMAND:
; 5503 : 		if (lw == IDC_ABOUT)
; 5504 : 		{
; 5505 : 			DialogBoxW (hInst, MAKEINTRESOURCEW (IDD_ABOUT_DLG), hwndDlg, (DLGPROC) AboutDlgProc);
; 5506 : 			return 1;
; 5507 : 		}
; 5508 : 		return 0;
; 5509 : 
; 5510 : 	case WM_TIMER:
; 5511 : 
; 5512 : 		switch (wParam)

  002b0	8b 85 70 cc 00
	00		 mov	 eax, DWORD PTR _wParam$[ebp]
  002b6	05 01 ff ff ff	 add	 eax, -255		; ffffff01H
  002bb	83 f8 05	 cmp	 eax, 5
  002be	0f 87 e2 fd ff
	ff		 ja	 $LN515@MainDialog
  002c4	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN1257@MainDialog[eax*4]
$LN502@MainDialog:

; 5513 : 		{
; 5514 : 		case TIMER_ID_RANDVIEW:
; 5515 : 
; 5516 : 			if (WizardMode == WIZARD_MODE_SYS_DEVICE
; 5517 : 				|| bInPlaceEncNonSys)

  002cb	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  002d0	83 f8 02	 cmp	 eax, 2
  002d3	0f 84 79 01 00
	00		 je	 $LN500@MainDialog
  002d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  002df	85 c9		 test	 ecx, ecx
  002e1	0f 85 6b 01 00
	00		 jne	 $LN500@MainDialog

; 5520 : 			}
; 5521 : 			else
; 5522 : 			{
; 5523 : 				unsigned char tmp[17];
; 5524 : 				char tmp2[43];
; 5525 : 				int i;
; 5526 : 
; 5527 : 				if (!showKeys) 

  002e7	39 3d 00 00 00
	00		 cmp	 DWORD PTR _showKeys, edi

; 5528 : 					return 1;

  002ed	0f 84 75 01 00
	00		 je	 $LN487@MainDialog

; 5529 : 
; 5530 : 				RandpeekBytes (tmp, sizeof (tmp));

  002f3	8d 95 40 cc 00
	00		 lea	 edx, DWORD PTR _tmp$134190[ebp]
  002f9	6a 11		 push	 17			; 00000011H
  002fb	52		 push	 edx
  002fc	e8 00 00 00 00	 call	 _RandpeekBytes
  00301	83 c4 08	 add	 esp, 8

; 5531 : 
; 5532 : 				tmp2[0] = 0;

  00304	c6 85 14 cc 00
	00 00		 mov	 BYTE PTR _tmp2$134191[ebp], 0

; 5533 : 
; 5534 : 				for (i = 0; i < sizeof (tmp); i++)

  0030b	33 db		 xor	 ebx, ebx
  0030d	8d 49 00	 npad	 3
$LL497@MainDialog:

; 5535 : 				{
; 5536 : 					char tmp3[8];
; 5537 : 					sprintf (tmp3, "%02X", (int) (unsigned char) tmp[i]);

  00310	0f b6 84 1d 40
	cc 00 00	 movzx	 eax, BYTE PTR _tmp$134190[ebp+ebx]
  00318	50		 push	 eax
  00319	8d 8d 54 cc 00
	00		 lea	 ecx, DWORD PTR _tmp3$134197[ebp]
  0031f	68 00 00 00 00	 push	 OFFSET ??_C@_04JFFKLGJF@?$CF02X?$AA@
  00324	51		 push	 ecx
  00325	e8 00 00 00 00	 call	 _sprintf

; 5538 : 					strcat (tmp2, tmp3);

  0032a	8d 85 54 cc 00
	00		 lea	 eax, DWORD PTR _tmp3$134197[ebp]
  00330	83 c4 0c	 add	 esp, 12			; 0000000cH
  00333	8b c8		 mov	 ecx, eax
$LL1146@MainDialog:
  00335	8a 10		 mov	 dl, BYTE PTR [eax]
  00337	40		 inc	 eax
  00338	84 d2		 test	 dl, dl
  0033a	75 f9		 jne	 SHORT $LL1146@MainDialog
  0033c	8d bd 14 cc 00
	00		 lea	 edi, DWORD PTR _tmp2$134191[ebp]
  00342	2b c1		 sub	 eax, ecx
  00344	8b f1		 mov	 esi, ecx
  00346	4f		 dec	 edi
$LL1147@MainDialog:
  00347	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  0034a	47		 inc	 edi
  0034b	84 c9		 test	 cl, cl
  0034d	75 f8		 jne	 SHORT $LL1147@MainDialog
  0034f	8b c8		 mov	 ecx, eax
  00351	c1 e9 02	 shr	 ecx, 2
  00354	f3 a5		 rep movsd
  00356	8b c8		 mov	 ecx, eax
  00358	83 e1 03	 and	 ecx, 3
  0035b	43		 inc	 ebx
  0035c	f3 a4		 rep movsb
  0035e	83 fb 11	 cmp	 ebx, 17			; 00000011H
  00361	72 ad		 jb	 SHORT $LL497@MainDialog

; 5539 : 				}
; 5540 : 
; 5541 : 				tmp2[32] = 0;
; 5542 : 
; 5543 : 				SetWindowTextW (GetDlgItem (hCurPage, IDC_RANDOM_BYTES), (SingleStringToWide (tmp2) + GetString ("TRIPLE_DOT_GLYPH_ELLIPSIS")).c_str());

  00363	8d 95 14 cc 00
	00		 lea	 edx, DWORD PTR _tmp2$134191[ebp]
  00369	52		 push	 edx
  0036a	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T169244[ebp]
  00370	c6 85 34 cc 00
	00 00		 mov	 BYTE PTR _tmp2$134191[ebp+32], 0
  00377	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0037c	8d 85 8c fe ff
	ff		 lea	 eax, DWORD PTR $T169244[ebp]
  00382	50		 push	 eax
  00383	8d 8d 98 fc ff
	ff		 lea	 ecx, DWORD PTR $T169245[ebp]
  00389	51		 push	 ecx
  0038a	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  00391	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  00396	8b f0		 mov	 esi, eax
  00398	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@JMBFHJFE@TRIPLE_DOT_GLYPH_ELLIPSIS?$AA@
  0039d	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  003a1	e8 00 00 00 00	 call	 _GetString
  003a6	50		 push	 eax
  003a7	8d 95 10 fb ff
	ff		 lea	 edx, DWORD PTR $T169246[ebp]
  003ad	56		 push	 esi
  003ae	52		 push	 edx
  003af	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  003b4	83 c4 18	 add	 esp, 24			; 00000018H
  003b7	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  003bb	72 05		 jb	 SHORT $LN683@MainDialog
  003bd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  003c0	eb 03		 jmp	 SHORT $LN684@MainDialog
$LN683@MainDialog:
  003c2	83 c0 04	 add	 eax, 4
$LN684@MainDialog:
  003c5	50		 push	 eax
  003c6	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  003cb	68 fc 03 00 00	 push	 1020			; 000003fcH
  003d0	50		 push	 eax
  003d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  003d7	50		 push	 eax
  003d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
  003de	8d 8d 10 fb ff
	ff		 lea	 ecx, DWORD PTR $T169246[ebp]
  003e4	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  003e9	8d 8d 98 fc ff
	ff		 lea	 ecx, DWORD PTR $T169245[ebp]
  003ef	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  003f4	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T169244[ebp]
  003fa	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5544 : 
; 5545 : 				burn (tmp, sizeof(tmp));

  003ff	8d 95 40 cc 00
	00		 lea	 edx, DWORD PTR _tmp$134190[ebp]
  00405	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  0040a	8b f1		 mov	 esi, ecx
  0040c	8b c2		 mov	 eax, edx
  0040e	8b ff		 npad	 2
$LL686@MainDialog:
  00410	c6 00 00	 mov	 BYTE PTR [eax], 0
  00413	40		 inc	 eax
  00414	83 ee 01	 sub	 esi, 1
  00417	75 f7		 jne	 SHORT $LL686@MainDialog
  00419	8d a4 24 00 00
	00 00		 npad	 7
$LL491@MainDialog:
  00420	49		 dec	 ecx
  00421	c6 02 00	 mov	 BYTE PTR [edx], 0
  00424	42		 inc	 edx
  00425	85 c9		 test	 ecx, ecx
  00427	75 f7		 jne	 SHORT $LL491@MainDialog

; 5546 : 				burn (tmp2, sizeof(tmp2));

  00429	8d 95 14 cc 00
	00		 lea	 edx, DWORD PTR _tmp2$134191[ebp]
  0042f	b9 2b 00 00 00	 mov	 ecx, 43			; 0000002bH
  00434	8b f1		 mov	 esi, ecx
  00436	8b c2		 mov	 eax, edx
$LL690@MainDialog:
  00438	c6 00 00	 mov	 BYTE PTR [eax], 0
  0043b	40		 inc	 eax
  0043c	83 ee 01	 sub	 esi, 1
  0043f	75 f7		 jne	 SHORT $LL690@MainDialog
$LL486@MainDialog:
  00441	49		 dec	 ecx
  00442	c6 02 00	 mov	 BYTE PTR [edx], 0
  00445	42		 inc	 edx
  00446	85 c9		 test	 ecx, ecx
  00448	75 f7		 jne	 SHORT $LL486@MainDialog
$ovf_end$134850:

; 5547 : 			}
; 5548 : 			return 1;

  0044a	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0044d	e9 56 fc ff ff	 jmp	 $LN517@MainDialog
$LN500@MainDialog:

; 5518 : 			{
; 5519 : 				DisplayRandPool (hRandPoolSys, showKeys);

  00452	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _showKeys
  00458	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hRandPoolSys@@3RAUHWND__@@A ; hRandPoolSys
  0045e	51		 push	 ecx
  0045f	52		 push	 edx
  00460	e8 00 00 00 00	 call	 _DisplayRandPool
  00465	83 c4 08	 add	 esp, 8
$LN487@MainDialog:
$ovf_end_1$134850:

; 5547 : 			}
; 5548 : 			return 1;

  00468	b8 01 00 00 00	 mov	 eax, 1
  0046d	e9 36 fc ff ff	 jmp	 $LN517@MainDialog
$LN484@MainDialog:

; 5549 : 
; 5550 : 		case TIMER_ID_SYSENC_PROGRESS:
; 5551 : 			{
; 5552 : 				// Manage system encryption/decryption and update related GUI
; 5553 : 
; 5554 : 				try
; 5555 : 				{
; 5556 : 					BootEncStatus = BootEncObj->GetStatus();

  00472	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00478	8d 85 d8 f9 ff
	ff		 lea	 eax, DWORD PTR $T169247[ebp]
  0047e	50		 push	 eax
  0047f	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  00486	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  0048b	8b f0		 mov	 esi, eax
  0048d	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00492	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00497	f3 a5		 rep movsd
  00499	66 a5		 movsw

; 5575 : 				}
; 5576 : 
; 5577 : 				if (BootEncStatus.SetupInProgress)

  0049b	a1 3e 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62
  004a0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  004a7	85 c0		 test	 eax, eax
  004a9	74 0a		 je	 SHORT $LN481@MainDialog

; 5578 : 					UpdateSysEncProgressBar ();

  004ab	e8 00 00 00 00	 call	 ?UpdateSysEncProgressBar@@YAXXZ ; UpdateSysEncProgressBar
  004b0	a1 3e 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62
$LN481@MainDialog:

; 5579 : 
; 5580 : 				if (bSystemEncryptionInProgress != BootEncStatus.SetupInProgress)

  004b5	39 05 00 00 00
	00		 cmp	 DWORD PTR ?bSystemEncryptionInProgress@@3HA, eax ; bSystemEncryptionInProgress
  004bb	74 ab		 je	 SHORT $LN487@MainDialog

; 5581 : 				{
; 5582 : 					bSystemEncryptionInProgress = BootEncStatus.SetupInProgress;

  004bd	a3 00 00 00 00	 mov	 DWORD PTR ?bSystemEncryptionInProgress@@3HA, eax ; bSystemEncryptionInProgress

; 5583 : 
; 5584 : 					UpdateSysEncProgressBar ();

  004c2	e8 00 00 00 00	 call	 ?UpdateSysEncProgressBar@@YAXXZ ; UpdateSysEncProgressBar

; 5585 : 					UpdateSysEncControls ();

  004c7	e8 00 00 00 00	 call	 ?UpdateSysEncControls@@YAXXZ ; UpdateSysEncControls

; 5586 : 
; 5587 : 					if (!bSystemEncryptionInProgress)

  004cc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bSystemEncryptionInProgress@@3HA, 0 ; bSystemEncryptionInProgress
  004d3	75 93		 jne	 SHORT $LN487@MainDialog

; 5588 : 					{
; 5589 : 						// The driver stopped encrypting/decrypting
; 5590 : 
; 5591 : 						// Allow the OS to enter Sleep mode when idle
; 5592 : 						SetThreadExecutionState (ES_CONTINUOUS);

  004d5	68 00 00 00 80	 push	 -2147483648		; 80000000H
  004da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetThreadExecutionState@4

; 5593 : 
; 5594 : 						KillTimer (hwndDlg, TIMER_ID_SYSENC_PROGRESS);

  004e0	68 00 01 00 00	 push	 256			; 00000100H
  004e5	53		 push	 ebx
  004e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 5595 : 
; 5596 : 						try
; 5597 : 						{
; 5598 : 							if (BootEncStatus.DriveMounted)	// If we had been really encrypting/decrypting (not just proceeding to deinstall)

  004ec	83 3d 06 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+6, 0
  004f3	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 8
  004fa	74 0b		 je	 SHORT $LN477@MainDialog

; 5599 : 								BootEncObj->CheckEncryptionSetupResult();

  004fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00502	e8 00 00 00 00	 call	 ?CheckEncryptionSetupResult@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::CheckEncryptionSetupResult
$LN477@MainDialog:
  00507	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN643@MainDialog:

; 5634 : 
; 5635 : 						switch (SystemEncryptionStatus)

  0050e	a1 00 00 00 00	 mov	 eax, DWORD PTR _SystemEncryptionStatus
  00513	3d 90 01 00 00	 cmp	 eax, 400		; 00000190H
  00518	0f 84 08 02 00
	00		 je	 $LN469@MainDialog
  0051e	3d 58 02 00 00	 cmp	 eax, 600		; 00000258H
  00523	0f 85 3f ff ff
	ff		 jne	 $LN487@MainDialog

; 5636 : 						{
; 5637 : 						case SYSENC_STATUS_ENCRYPTING:
; 5638 : 
; 5639 : 							if (BootEncStatus.ConfiguredEncryptedAreaStart == BootEncStatus.EncryptedAreaStart
; 5640 : 								&& BootEncStatus.ConfiguredEncryptedAreaEnd == BootEncStatus.EncryptedAreaEnd)
; 5641 : 							{
; 5642 : 								// The partition/drive has been fully encrypted
; 5643 : 
; 5644 : 								ManageStartupSeqWiz (TRUE, "");
; 5645 : 
; 5646 : 								SetWindowTextW (GetDlgItem (hwndDlg, IDC_NEXT), GetString ("FINALIZE"));
; 5647 : 								EnableWindow (GetDlgItem (hwndDlg, IDC_NEXT), TRUE);
; 5648 : 								EnableWindow (GetDlgItem (hwndDlg, IDCANCEL), FALSE);
; 5649 : 								EnableWindow (GetDlgItem (hCurPage, IDC_WIPE_MODE), FALSE);
; 5650 : 								EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), FALSE);
; 5651 : 
; 5652 : 								WipeHiddenOSCreationConfig();	// For extra conservative security
; 5653 : 
; 5654 : 								ChangeSystemEncryptionStatus (SYSENC_STATUS_NONE);
; 5655 : 
; 5656 : 								Info ("SYSTEM_ENCRYPTION_FINISHED");
; 5657 : 								return 1;
; 5658 : 							}
; 5659 : 							break;
; 5660 : 
; 5661 : 						case SYSENC_STATUS_DECRYPTING:
; 5662 : 
; 5663 : 							if (!BootEncStatus.DriveEncrypted)

  00529	83 3d 0e 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+14, 0
  00530	0f 85 32 ff ff
	ff		 jne	 $LN487@MainDialog

; 5664 : 							{
; 5665 : 								// The partition/drive has been fully decrypted
; 5666 : 
; 5667 : 								try
; 5668 : 								{
; 5669 : 									// Finalize the process
; 5670 : 									BootEncObj->Deinstall ();

  00536	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0053c	6a 00		 push	 0
  0053e	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 10 ; 0000000aH
  00545	e8 00 00 00 00	 call	 ?Deinstall@BootEncryption@CipherShed@@QAEX_N@Z ; CipherShed::BootEncryption::Deinstall
  0054a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN1196@MainDialog:

; 5675 : 								}

  00551	8b 5d e4	 mov	 ebx, DWORD PTR _hwndDlg$GSCopy$[ebp]

; 5676 : 					
; 5677 : 								ManageStartupSeqWiz (TRUE, "");

  00554	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00559	6a 01		 push	 1
  0055b	e8 00 00 00 00	 call	 _ManageStartupSeqWiz

; 5678 : 								ChangeSystemEncryptionStatus (SYSENC_STATUS_NONE);

  00560	33 f6		 xor	 esi, esi
  00562	e8 00 00 00 00	 call	 ?ChangeSystemEncryptionStatus@@YAHH@Z ; ChangeSystemEncryptionStatus

; 5679 : 
; 5680 : 								SetWindowTextW (GetDlgItem (hwndDlg, IDC_NEXT), GetString ("FINALIZE"));

  00567	68 00 00 00 00	 push	 OFFSET ??_C@_08MFKGCNCO@FINALIZE?$AA@
  0056c	e8 00 00 00 00	 call	 _GetString
  00571	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00577	83 c4 0c	 add	 esp, 12			; 0000000cH
  0057a	50		 push	 eax
  0057b	68 10 04 00 00	 push	 1040			; 00000410H
  00580	53		 push	 ebx
  00581	ff d6		 call	 esi
  00583	50		 push	 eax
  00584	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 5681 : 								EnableWindow (GetDlgItem (hwndDlg, IDC_NEXT), TRUE);

  0058a	6a 01		 push	 1
  0058c	68 10 04 00 00	 push	 1040			; 00000410H
  00591	53		 push	 ebx
  00592	ff d6		 call	 esi
  00594	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  0059a	50		 push	 eax
  0059b	ff d7		 call	 edi

; 5682 : 								EnableWindow (GetDlgItem (hwndDlg, IDCANCEL), FALSE);

  0059d	6a 00		 push	 0
  0059f	6a 02		 push	 2
  005a1	53		 push	 ebx
  005a2	ff d6		 call	 esi
  005a4	50		 push	 eax
  005a5	ff d7		 call	 edi

; 5683 : 								EnableWindow (GetDlgItem (hCurPage, IDC_PAUSE), FALSE);

  005a7	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  005ac	6a 00		 push	 0
  005ae	68 41 04 00 00	 push	 1089			; 00000441H
  005b3	50		 push	 eax
  005b4	ff d6		 call	 esi
  005b6	50		 push	 eax
  005b7	ff d7		 call	 edi

; 5684 : 
; 5685 : 								Info ("SYSTEM_DECRYPTION_FINISHED");

  005b9	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HGGGHBLG@SYSTEM_DECRYPTION_FINISHED?$AA@
  005be	e8 00 00 00 00	 call	 _Info

; 5686 : 
; 5687 : 								// Reboot is required to enable uninstallation and hibernation
; 5688 : 								if (AskWarnYesNo ("CONFIRM_RESTART") == IDYES)

  005c3	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ICICKJJH@CONFIRM_RESTART?$AA@
  005c8	e8 00 00 00 00	 call	 _AskWarnYesNo
  005cd	83 c4 08	 add	 esp, 8
  005d0	83 f8 06	 cmp	 eax, 6
  005d3	0f 85 8f fe ff
	ff		 jne	 $LN487@MainDialog

; 5689 : 								{
; 5690 : 									EndMainDlg (MainDlg);

  005d9	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  005df	e8 00 00 00 00	 call	 _EndMainDlg

; 5691 : 
; 5692 : 									try
; 5693 : 									{
; 5694 : 										BootEncObj->RestartComputer();

  005e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  005ea	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 12 ; 0000000cH
  005f1	e8 00 00 00 00	 call	 ?RestartComputer@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::RestartComputer
$ovf_end_2$134850:
  005f6	b8 01 00 00 00	 mov	 eax, 1
  005fb	e9 a8 fa ff ff	 jmp	 $LN517@MainDialog
__catch$_MainDialogProc@16$6:

; 5600 : 						}
; 5601 : 						catch (SystemException &e)
; 5602 : 						{
; 5603 : 							if (!bTryToCorrectReadErrors
; 5604 : 								&& SystemEncryptionStatus == SYSENC_STATUS_ENCRYPTING
; 5605 : 								&& (IsDiskReadError (e.ErrorCode)))

  00600	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bTryToCorrectReadErrors@@3HC ; bTryToCorrectReadErrors
  00606	85 c9		 test	 ecx, ecx
  00608	75 4f		 jne	 SHORT $LN476@MainDialog
  0060a	81 3d 00 00 00
	00 90 01 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 400 ; 00000190H
  00614	75 43		 jne	 SHORT $LN476@MainDialog
  00616	8b 55 c8	 mov	 edx, DWORD PTR _e$134235[ebp]
  00619	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0061c	50		 push	 eax
  0061d	e8 00 00 00 00	 call	 _IsDiskReadError
  00622	83 c4 04	 add	 esp, 4
  00625	85 c0		 test	 eax, eax
  00627	74 30		 je	 SHORT $LN476@MainDialog

; 5606 : 							{
; 5607 : 								bTryToCorrectReadErrors = (AskWarnYesNo ("ENABLE_BAD_SECTOR_ZEROING") == IDYES);

  00629	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@ELCHMCAJ@ENABLE_BAD_SECTOR_ZEROING?$AA@
  0062e	e8 00 00 00 00	 call	 _AskWarnYesNo
  00633	33 c9		 xor	 ecx, ecx
  00635	83 c4 04	 add	 esp, 4
  00638	83 f8 06	 cmp	 eax, 6
  0063b	0f 94 c1	 sete	 cl
  0063e	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bTryToCorrectReadErrors@@3HC, ecx ; bTryToCorrectReadErrors

; 5608 : 
; 5609 : 								if (bTryToCorrectReadErrors)

  00644	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bTryToCorrectReadErrors@@3HC ; bTryToCorrectReadErrors
  0064a	85 d2		 test	 edx, edx
  0064c	74 62		 je	 SHORT $LN1195@MainDialog

; 5610 : 								{
; 5611 : 									SysEncResume();

  0064e	e8 00 00 00 00	 call	 ?SysEncResume@@YAXXZ	; SysEncResume

; 5612 : 									return 1;

  00653	b8 00 00 00 00	 mov	 eax, $LN487@MainDialog
  00658	c3		 ret	 0
$LN476@MainDialog:

; 5613 : 								}
; 5614 : 							}
; 5615 : 							else if (!DiscardUnreadableEncryptedSectors
; 5616 : 								&& SystemEncryptionStatus == SYSENC_STATUS_DECRYPTING
; 5617 : 								&& (IsDiskReadError (e.ErrorCode)))

  00659	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DiscardUnreadableEncryptedSectors@@3HC ; DiscardUnreadableEncryptedSectors
  0065e	85 c0		 test	 eax, eax
  00660	75 4e		 jne	 SHORT $LN1195@MainDialog
  00662	81 3d 00 00 00
	00 58 02 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 600 ; 00000258H
  0066c	75 42		 jne	 SHORT $LN1195@MainDialog
  0066e	8b 75 c8	 mov	 esi, DWORD PTR _e$134235[ebp]
  00671	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00674	51		 push	 ecx
  00675	e8 00 00 00 00	 call	 _IsDiskReadError
  0067a	83 c4 04	 add	 esp, 4
  0067d	85 c0		 test	 eax, eax
  0067f	74 32		 je	 SHORT $LN472@MainDialog

; 5618 : 							{
; 5619 : 								DiscardUnreadableEncryptedSectors = (AskWarnYesNo ("DISCARD_UNREADABLE_ENCRYPTED_SECTORS") == IDYES);

  00681	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BKMHLPHL@DISCARD_UNREADABLE_ENCRYPTED_SEC@
  00686	e8 00 00 00 00	 call	 _AskWarnYesNo
  0068b	33 d2		 xor	 edx, edx
  0068d	83 c4 04	 add	 esp, 4
  00690	83 f8 06	 cmp	 eax, 6
  00693	0f 94 c2	 sete	 dl
  00696	89 15 00 00 00
	00		 mov	 DWORD PTR ?DiscardUnreadableEncryptedSectors@@3HC, edx ; DiscardUnreadableEncryptedSectors

; 5620 : 
; 5621 : 								if (DiscardUnreadableEncryptedSectors)

  0069c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DiscardUnreadableEncryptedSectors@@3HC ; DiscardUnreadableEncryptedSectors
  006a1	85 c0		 test	 eax, eax
  006a3	74 0b		 je	 SHORT $LN1195@MainDialog

; 5622 : 								{
; 5623 : 									SysEncResume();

  006a5	e8 00 00 00 00	 call	 ?SysEncResume@@YAXXZ	; SysEncResume

; 5624 : 									return 1;

  006aa	b8 00 00 00 00	 mov	 eax, $LN487@MainDialog
  006af	c3		 ret	 0
$LN1195@MainDialog:
  006b0	8b 75 c8	 mov	 esi, DWORD PTR _e$134235[ebp]
$LN472@MainDialog:

; 5625 : 								}
; 5626 : 							}
; 5627 : 
; 5628 : 							e.Show (hwndDlg);

  006b3	8b 16		 mov	 edx, DWORD PTR [esi]
  006b5	8b 45 e4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  006b8	8b 12		 mov	 edx, DWORD PTR [edx]
  006ba	50		 push	 eax
  006bb	8b ce		 mov	 ecx, esi
  006bd	ff d2		 call	 edx

; 5629 : 						}

  006bf	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  006c6	b8 00 00 00 00	 mov	 eax, $LN642@MainDialog
  006cb	c3		 ret	 0
$LN642@MainDialog:
  006cc	e9 3d fe ff ff	 jmp	 $LN643@MainDialog
__catch$_MainDialogProc@16$7:

; 5630 : 						catch (Exception &e)
; 5631 : 						{
; 5632 : 							e.Show (hwndDlg);

  006d1	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _e$134246[ebp]
  006d7	8b 01		 mov	 eax, DWORD PTR [ecx]
  006d9	8b 55 e4	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  006dc	8b 00		 mov	 eax, DWORD PTR [eax]
  006de	52		 push	 edx
  006df	ff d0		 call	 eax

; 5633 : 						}

  006e1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  006e8	b8 00 00 00 00	 mov	 eax, $LN644@MainDialog
  006ed	c3		 ret	 0
$LN644@MainDialog:
  006ee	e9 1b fe ff ff	 jmp	 $LN643@MainDialog
__catch$_MainDialogProc@16$9:

; 5671 : 								}
; 5672 : 								catch (Exception &e)
; 5673 : 								{
; 5674 : 									e.Show (hwndDlg);

  006f3	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134257[ebp]
  006f9	8b 11		 mov	 edx, DWORD PTR [ecx]
  006fb	8b 45 e4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  006fe	8b 12		 mov	 edx, DWORD PTR [edx]
  00700	50		 push	 eax
  00701	ff d2		 call	 edx

; 5675 : 								}

  00703	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0070a	b8 00 00 00 00	 mov	 eax, $LN1196@MainDialog
  0070f	c3		 ret	 0
__catch$_MainDialogProc@16$11:

; 5695 : 									}
; 5696 : 									catch (Exception &e)
; 5697 : 									{
; 5698 : 										e.Show (hwndDlg);

  00710	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _e$134262[ebp]
  00716	8b 11		 mov	 edx, DWORD PTR [ecx]
  00718	8b 45 e4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  0071b	8b 12		 mov	 edx, DWORD PTR [edx]
  0071d	50		 push	 eax
  0071e	ff d2		 call	 edx

; 5699 : 									}

  00720	b8 00 00 00 00	 mov	 eax, $LN487@MainDialog
  00725	c3		 ret	 0
$LN469@MainDialog:
  00726	a1 1a 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+26
  0072b	3b 05 2a 00 00
	00		 cmp	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+42
  00731	0f 85 31 fd ff
	ff		 jne	 $LN487@MainDialog
  00737	8b 0d 1e 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+30
  0073d	3b 0d 2e 00 00
	00		 cmp	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+46
  00743	0f 85 1f fd ff
	ff		 jne	 $LN487@MainDialog
  00749	8b 15 22 00 00
	00		 mov	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+34
  0074f	3b 15 32 00 00
	00		 cmp	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+50
  00755	0f 85 0d fd ff
	ff		 jne	 $LN487@MainDialog
  0075b	a1 26 00 00 00	 mov	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+38
  00760	3b 05 36 00 00
	00		 cmp	 eax, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+54
  00766	0f 85 fc fc ff
	ff		 jne	 $LN487@MainDialog
  0076c	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00771	6a 01		 push	 1
  00773	e8 00 00 00 00	 call	 _ManageStartupSeqWiz
  00778	68 00 00 00 00	 push	 OFFSET ??_C@_08MFKGCNCO@FINALIZE?$AA@
  0077d	e8 00 00 00 00	 call	 _GetString
  00782	8b 5d e4	 mov	 ebx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00785	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0078b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0078e	50		 push	 eax
  0078f	68 10 04 00 00	 push	 1040			; 00000410H
  00794	53		 push	 ebx
  00795	ff d6		 call	 esi
  00797	50		 push	 eax
  00798	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
  0079e	6a 01		 push	 1
  007a0	68 10 04 00 00	 push	 1040			; 00000410H
  007a5	53		 push	 ebx
  007a6	ff d6		 call	 esi
  007a8	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  007ae	50		 push	 eax
  007af	ff d7		 call	 edi
  007b1	6a 00		 push	 0
  007b3	6a 02		 push	 2
  007b5	53		 push	 ebx
  007b6	ff d6		 call	 esi
  007b8	50		 push	 eax
  007b9	ff d7		 call	 edi
  007bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  007c1	6a 00		 push	 0
  007c3	68 3d 04 00 00	 push	 1085			; 0000043dH
  007c8	51		 push	 ecx
  007c9	ff d6		 call	 esi
  007cb	50		 push	 eax
  007cc	ff d7		 call	 edi
  007ce	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  007d4	6a 00		 push	 0
  007d6	68 41 04 00 00	 push	 1089			; 00000441H
  007db	52		 push	 edx
  007dc	ff d6		 call	 esi
  007de	50		 push	 eax
  007df	ff d7		 call	 edi
  007e1	e8 00 00 00 00	 call	 _WipeHiddenOSCreationConfig
  007e6	33 f6		 xor	 esi, esi
  007e8	e8 00 00 00 00	 call	 ?ChangeSystemEncryptionStatus@@YAHH@Z ; ChangeSystemEncryptionStatus
  007ed	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LJPGNBNM@SYSTEM_ENCRYPTION_FINISHED?$AA@
  007f2	e8 00 00 00 00	 call	 _Info
  007f7	83 c4 04	 add	 esp, 4
  007fa	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  007fd	e9 a6 f8 ff ff	 jmp	 $LN517@MainDialog
__catch$_MainDialogProc@16$2:

; 5557 : 				}
; 5558 : 				catch (Exception &e)
; 5559 : 				{
; 5560 : 					KillTimer (MainDlg, TIMER_ID_SYSENC_PROGRESS);

  00802	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00807	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0080a	68 00 01 00 00	 push	 256			; 00000100H
  0080f	50		 push	 eax
  00810	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 5561 : 
; 5562 : 					try
; 5563 : 					{
; 5564 : 						BootEncObj->AbortSetup ();

  00816	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0081c	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  00820	e8 00 00 00 00	 call	 ?AbortSetup@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::AbortSetup
  00825	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 5
$LN634@MainDialog:

; 5565 : 					}
; 5566 : 					catch (Exception &e)
; 5567 : 					{
; 5568 : 						e.Show (hwndDlg);
; 5569 : 					}
; 5570 : 
; 5571 : 					e.Show (hwndDlg);

  0082c	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR _e$134225[ebp]
  00832	8b 01		 mov	 eax, DWORD PTR [ecx]
  00834	8b 55 e4	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00837	8b 00		 mov	 eax, DWORD PTR [eax]
  00839	52		 push	 edx
  0083a	ff d0		 call	 eax

; 5572 : 					Error ("ERR_GETTING_SYSTEM_ENCRYPTION_STATUS");

  0083c	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BOINGOPM@ERR_GETTING_SYSTEM_ENCRYPTION_ST@
  00841	e8 00 00 00 00	 call	 _Error

; 5573 : 					EndMainDlg (MainDlg);

  00846	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  0084c	83 c4 04	 add	 esp, 4
  0084f	e8 00 00 00 00	 call	 _EndMainDlg

; 5574 : 					return 1;

  00854	b8 00 00 00 00	 mov	 eax, $LN487@MainDialog
  00859	c3		 ret	 0
__catch$_MainDialogProc@16$3:
  0085a	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134227[ebp]
  00860	8b 11		 mov	 edx, DWORD PTR [ecx]
  00862	8b 45 e4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00865	8b 12		 mov	 edx, DWORD PTR [edx]
  00867	50		 push	 eax
  00868	ff d2		 call	 edx
  0086a	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 5
  00871	b8 00 00 00 00	 mov	 eax, $LN634@MainDialog
  00876	c3		 ret	 0
$LN462@MainDialog:

; 5700 : 								}
; 5701 : 
; 5702 : 								return 1;
; 5703 : 							}
; 5704 : 							break;
; 5705 : 						}
; 5706 : 					}
; 5707 : 				}
; 5708 : 			}
; 5709 : 			return 1;
; 5710 : 
; 5711 : 		case TIMER_ID_NONSYS_INPLACE_ENC_PROGRESS:
; 5712 : 
; 5713 : 			if (bInPlaceEncNonSys)

  00877	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  0087d	85 c9		 test	 ecx, ecx
  0087f	74 24		 je	 SHORT $LN461@MainDialog

; 5714 : 			{
; 5715 : 				// Non-system in-place encryption
; 5716 : 
; 5717 : 				if (!bVolTransformThreadRunning && !bVolTransformThreadToRun)

  00881	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  00887	85 d2		 test	 edx, edx
  00889	75 15		 jne	 SHORT $LN460@MainDialog
  0088b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  00890	85 c0		 test	 eax, eax
  00892	75 0c		 jne	 SHORT $LN460@MainDialog

; 5718 : 				{
; 5719 : 					KillTimer (hwndDlg, TIMER_ID_NONSYS_INPLACE_ENC_PROGRESS);

  00894	68 01 01 00 00	 push	 257			; 00000101H
  00899	53		 push	 ebx
  0089a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8
$LN460@MainDialog:

; 5720 : 				}
; 5721 : 
; 5722 : 				UpdateNonSysInPlaceEncControls ();

  008a0	e8 00 00 00 00	 call	 _UpdateNonSysInPlaceEncControls
$LN461@MainDialog:

; 5723 : 			}
; 5724 : 			return 1;

  008a5	b8 01 00 00 00	 mov	 eax, 1
  008aa	e9 f9 f7 ff ff	 jmp	 $LN517@MainDialog
$LN459@MainDialog:

; 5725 : 
; 5726 : 		case TIMER_ID_KEYB_LAYOUT_GUARD:
; 5727 : 			if (SysEncInEffect ())

  008af	e8 00 00 00 00	 call	 _SysEncInEffect
  008b4	85 c0		 test	 eax, eax
  008b6	0f 84 45 02 00
	00		 je	 $LN454@MainDialog

; 5728 : 			{
; 5729 : 				DWORD keybLayout = (DWORD) GetKeyboardLayout (NULL);

  008bc	57		 push	 edi
  008bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyboardLayout@4

; 5730 : 
; 5731 : 				/* Watch the keyboard layout */
; 5732 : 
; 5733 : 				if (keybLayout != 0x00000409 && keybLayout != 0x04090409)

  008c3	3d 09 04 00 00	 cmp	 eax, 1033		; 00000409H
  008c8	0f 84 4f 01 00
	00		 je	 $LN457@MainDialog
  008ce	3d 09 04 09 04	 cmp	 eax, 67699721		; 04090409H
  008d3	0f 84 44 01 00
	00		 je	 $LN457@MainDialog

; 5734 : 				{
; 5735 : 					// Keyboard layout is not standard US
; 5736 : 
; 5737 : 					WipePasswordsAndKeyfiles ();

  008d9	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles

; 5738 : 
; 5739 : 					SetWindowTextW(GetDlgItem (hCurPage, IDC_PASSWORD), szRawPassword);

  008de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  008e4	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  008ea	68 00 00 00 00	 push	 OFFSET ?szRawPassword@@3PA_WA ; szRawPassword
  008ef	68 ec 03 00 00	 push	 1004			; 000003ecH
  008f4	51		 push	 ecx
  008f5	ff d6		 call	 esi
  008f7	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  008fd	50		 push	 eax
  008fe	ff d7		 call	 edi

; 5740 : 					SetWindowTextW(GetDlgItem (hCurPage, IDC_VERIFY), szVerify);

  00900	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00906	68 00 00 00 00	 push	 OFFSET ?szVerify@@3PA_WA ; szVerify
  0090b	68 f2 03 00 00	 push	 1010			; 000003f2H
  00910	52		 push	 edx
  00911	ff d6		 call	 esi
  00913	50		 push	 eax
  00914	ff d7		 call	 edi

; 5741 : 
; 5742 : 					keybLayout = (DWORD) LoadKeyboardLayout ("00000409", KLF_ACTIVATE);

  00916	6a 01		 push	 1
  00918	68 00 00 00 00	 push	 OFFSET ??_C@_08OKJEGFFL@00000409?$AA@
  0091d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadKeyboardLayoutA@8

; 5743 : 
; 5744 : 					if (keybLayout != 0x00000409 && keybLayout != 0x04090409)

  00923	3d 09 04 00 00	 cmp	 eax, 1033		; 00000409H
  00928	74 35		 je	 SHORT $LN456@MainDialog
  0092a	3d 09 04 09 04	 cmp	 eax, 67699721		; 04090409H
  0092f	74 2e		 je	 SHORT $LN456@MainDialog

; 5745 : 					{
; 5746 : 						KillTimer (hwndDlg, TIMER_ID_KEYB_LAYOUT_GUARD);

  00931	68 04 01 00 00	 push	 260			; 00000104H
  00936	53		 push	 ebx
  00937	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 5747 : 						Error ("CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_ENCRYPTION");

  0093d	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@KAEHBIEI@CANT_CHANGE_KEYB_LAYOUT_FOR_SYS_@
$LN1243@MainDialog:
  00942	e8 00 00 00 00	 call	 _Error
  00947	83 c4 04	 add	 esp, 4
$LN1115@MainDialog:

; 5748 : 						EndMainDlg (MainDlg);

  0094a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  00950	e8 00 00 00 00	 call	 _EndMainDlg
$LN1244@MainDialog:

; 5749 : 						return 1;

  00955	b8 01 00 00 00	 mov	 eax, 1
  0095a	e9 49 f7 ff ff	 jmp	 $LN517@MainDialog
$LN456@MainDialog:

; 5750 : 					}
; 5751 : 
; 5752 : 					bKeyboardLayoutChanged = TRUE;
; 5753 : 
; 5754 : 					wchar_t szTmp [4096];
; 5755 : 					wcscpy (szTmp, GetString ("KEYB_LAYOUT_CHANGE_PREVENTED"));

  0095f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@MNCKOJDH@KEYB_LAYOUT_CHANGE_PREVENTED?$AA@
  00964	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bKeyboardLayoutChanged@@3HA, 1 ; bKeyboardLayoutChanged
  0096e	e8 00 00 00 00	 call	 _GetString
  00973	83 c4 04	 add	 esp, 4
  00976	8d 55 00	 lea	 edx, DWORD PTR _szTmp$134273[ebp]
  00979	8d a4 24 00 00
	00 00		 npad	 7
$LL519@MainDialog:
  00980	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00983	66 89 0a	 mov	 WORD PTR [edx], cx
  00986	83 c0 02	 add	 eax, 2
  00989	83 c2 02	 add	 edx, 2
  0098c	66 85 c9	 test	 cx, cx
  0098f	75 ef		 jne	 SHORT $LL519@MainDialog

; 5756 : 					wcscat (szTmp, L"\n\n");

  00991	8d 45 00	 lea	 eax, DWORD PTR _szTmp$134273[ebp]
  00994	83 c0 fe	 add	 eax, -2			; fffffffeH
  00997	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL1148@MainDialog:
  009a0	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  009a4	83 c0 02	 add	 eax, 2
  009a7	66 85 c9	 test	 cx, cx
  009aa	75 f4		 jne	 SHORT $LL1148@MainDialog
  009ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  009b2	66 8b 15 04 00
	00 00		 mov	 dx, WORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@+4
  009b9	89 08		 mov	 DWORD PTR [eax], ecx

; 5757 : 					wcscat (szTmp, GetString ("KEYB_LAYOUT_SYS_ENC_EXPLANATION"));

  009bb	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HGCGAMEK@KEYB_LAYOUT_SYS_ENC_EXPLANATION?$AA@
  009c0	66 89 50 04	 mov	 WORD PTR [eax+4], dx
  009c4	e8 00 00 00 00	 call	 _GetString
  009c9	83 c4 04	 add	 esp, 4
  009cc	8b d0		 mov	 edx, eax
  009ce	8b ff		 npad	 2
$LL1149@MainDialog:
  009d0	66 8b 08	 mov	 cx, WORD PTR [eax]
  009d3	83 c0 02	 add	 eax, 2
  009d6	66 85 c9	 test	 cx, cx
  009d9	75 f5		 jne	 SHORT $LL1149@MainDialog
  009db	8d 7d 00	 lea	 edi, DWORD PTR _szTmp$134273[ebp]
  009de	2b c2		 sub	 eax, edx
  009e0	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL1150@MainDialog:
  009e3	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  009e7	83 c7 02	 add	 edi, 2
  009ea	66 85 c9	 test	 cx, cx
  009ed	75 f4		 jne	 SHORT $LL1150@MainDialog
  009ef	8b c8		 mov	 ecx, eax
  009f1	c1 e9 02	 shr	 ecx, 2
  009f4	8b f2		 mov	 esi, edx

; 5758 : 					MessageBoxW (MainDlg, szTmp, lpszTitle, MB_ICONWARNING | MB_SETFOREGROUND | MB_TOPMOST);

  009f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  009fc	f3 a5		 rep movsd
  009fe	8b c8		 mov	 ecx, eax
  00a00	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  00a05	83 e1 03	 and	 ecx, 3
  00a08	68 30 00 05 00	 push	 327728			; 00050030H
  00a0d	f3 a4		 rep movsb
  00a0f	50		 push	 eax
  00a10	8d 4d 00	 lea	 ecx, DWORD PTR _szTmp$134273[ebp]
  00a13	51		 push	 ecx
  00a14	52		 push	 edx
  00a15	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  00a1b	33 ff		 xor	 edi, edi
$LN457@MainDialog:

; 5759 : 				}
; 5760 : 
; 5761 : 				/* Watch the right Alt key (which is used to enter various characters on non-US keyboards) */
; 5762 : 
; 5763 : 				if (bKeyboardLayoutChanged && !bKeybLayoutAltKeyWarningShown)

  00a1d	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?bKeyboardLayoutChanged@@3HA, edi ; bKeyboardLayoutChanged
  00a23	0f 84 d8 00 00
	00		 je	 $LN454@MainDialog
  00a29	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?bKeybLayoutAltKeyWarningShown@@3HA, edi ; bKeybLayoutAltKeyWarningShown
  00a2f	0f 85 cc 00 00
	00		 jne	 $LN454@MainDialog

; 5764 : 				{
; 5765 : 					if (GetAsyncKeyState (VK_RMENU) < 0)

  00a35	68 a5 00 00 00	 push	 165			; 000000a5H
  00a3a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetAsyncKeyState@4
  00a40	66 85 c0	 test	 ax, ax
  00a43	0f 8d b8 00 00
	00		 jge	 $LN454@MainDialog

; 5766 : 					{
; 5767 : 						bKeybLayoutAltKeyWarningShown = TRUE;
; 5768 : 
; 5769 : 						wchar_t szTmp [4096];
; 5770 : 						wcscpy (szTmp, GetString ("ALT_KEY_CHARS_NOT_FOR_SYS_ENCRYPTION"));

  00a49	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@OEJEFNLJ@ALT_KEY_CHARS_NOT_FOR_SYS_ENCRYP@
  00a4e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bKeybLayoutAltKeyWarningShown@@3HA, 1 ; bKeybLayoutAltKeyWarningShown
  00a58	e8 00 00 00 00	 call	 _GetString
  00a5d	83 c4 04	 add	 esp, 4
  00a60	8d 95 80 9e 00
	00		 lea	 edx, DWORD PTR _szTmp$134278[ebp]
$LL520@MainDialog:
  00a66	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00a69	66 89 0a	 mov	 WORD PTR [edx], cx
  00a6c	83 c0 02	 add	 eax, 2
  00a6f	83 c2 02	 add	 edx, 2
  00a72	66 3b cf	 cmp	 cx, di
  00a75	75 ef		 jne	 SHORT $LL520@MainDialog

; 5771 : 						wcscat (szTmp, L"\n\n");

  00a77	8d 85 80 9e 00
	00		 lea	 eax, DWORD PTR _szTmp$134278[ebp]
  00a7d	83 c0 fe	 add	 eax, -2			; fffffffeH
$LL1151@MainDialog:
  00a80	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  00a84	83 c0 02	 add	 eax, 2
  00a87	66 3b cf	 cmp	 cx, di
  00a8a	75 f4		 jne	 SHORT $LL1151@MainDialog
  00a8c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  00a92	66 8b 15 04 00
	00 00		 mov	 dx, WORD PTR ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@+4
  00a99	89 08		 mov	 DWORD PTR [eax], ecx

; 5772 : 						wcscat (szTmp, GetString ("KEYB_LAYOUT_SYS_ENC_EXPLANATION"));

  00a9b	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HGCGAMEK@KEYB_LAYOUT_SYS_ENC_EXPLANATION?$AA@
  00aa0	66 89 50 04	 mov	 WORD PTR [eax+4], dx
  00aa4	e8 00 00 00 00	 call	 _GetString
  00aa9	83 c4 04	 add	 esp, 4
  00aac	8b d0		 mov	 edx, eax
  00aae	8b ff		 npad	 2
$LL1152@MainDialog:
  00ab0	66 8b 08	 mov	 cx, WORD PTR [eax]
  00ab3	83 c0 02	 add	 eax, 2
  00ab6	66 3b cf	 cmp	 cx, di
  00ab9	75 f5		 jne	 SHORT $LL1152@MainDialog
  00abb	8d bd 80 9e 00
	00		 lea	 edi, DWORD PTR _szTmp$134278[ebp]
  00ac1	2b c2		 sub	 eax, edx
  00ac3	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL1153@MainDialog:
  00ac6	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  00aca	83 c7 02	 add	 edi, 2
  00acd	66 85 c9	 test	 cx, cx
  00ad0	75 f4		 jne	 SHORT $LL1153@MainDialog
  00ad2	8b c8		 mov	 ecx, eax
  00ad4	c1 e9 02	 shr	 ecx, 2
  00ad7	8b f2		 mov	 esi, edx

; 5773 : 						MessageBoxW (MainDlg, szTmp, lpszTitle, MB_ICONINFORMATION  | MB_SETFOREGROUND | MB_TOPMOST);

  00ad9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00adf	f3 a5		 rep movsd
  00ae1	8b c8		 mov	 ecx, eax
  00ae3	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  00ae8	83 e1 03	 and	 ecx, 3
  00aeb	68 40 00 05 00	 push	 327744			; 00050040H
  00af0	f3 a4		 rep movsb
  00af2	50		 push	 eax
  00af3	8d 8d 80 9e 00
	00		 lea	 ecx, DWORD PTR _szTmp$134278[ebp]
  00af9	51		 push	 ecx
  00afa	52		 push	 edx
  00afb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN454@MainDialog:

; 5774 : 					}
; 5775 : 				}
; 5776 : 			}
; 5777 : 			return 1;

  00b01	b8 01 00 00 00	 mov	 eax, 1
  00b06	e9 9d f5 ff ff	 jmp	 $LN517@MainDialog
$LN453@MainDialog:

; 5778 : 
; 5779 : 		case TIMER_ID_SYSENC_DRIVE_ANALYSIS_PROGRESS:
; 5780 : 
; 5781 : 			if (bSysEncDriveAnalysisInProgress)

  00b0b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bSysEncDriveAnalysisInProgress@@3HC ; bSysEncDriveAnalysisInProgress
  00b10	85 c0		 test	 eax, eax
  00b12	74 52		 je	 SHORT $LN452@MainDialog

; 5782 : 			{
; 5783 : 				UpdateProgressBarProc (GetTickCount() - SysEncDriveAnalysisStart);

  00b14	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetTickCount@0
  00b1a	ff d6		 call	 esi
  00b1c	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?SysEncDriveAnalysisStart@@3HA ; SysEncDriveAnalysisStart
  00b22	57		 push	 edi
  00b23	50		 push	 eax
  00b24	e8 00 00 00 00	 call	 _UpdateProgressBarProc
  00b29	83 c4 08	 add	 esp, 8

; 5784 : 
; 5785 : 				if (GetTickCount() - SysEncDriveAnalysisStart > SYSENC_DRIVE_ANALYSIS_ETA)

  00b2c	ff d6		 call	 esi
  00b2e	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?SysEncDriveAnalysisStart@@3HA ; SysEncDriveAnalysisStart
  00b34	3d 80 a9 03 00	 cmp	 eax, 240000		; 0003a980H
  00b39	76 1c		 jbe	 SHORT $LN451@MainDialog

; 5786 : 				{
; 5787 : 					// It's taking longer than expected -- reinit the progress bar
; 5788 : 					SysEncDriveAnalysisStart = GetTickCount ();

  00b3b	ff d6		 call	 esi

; 5789 : 					InitProgressBar (SYSENC_DRIVE_ANALYSIS_ETA, 0, FALSE, FALSE, FALSE, TRUE);

  00b3d	6a 01		 push	 1
  00b3f	57		 push	 edi
  00b40	57		 push	 edi
  00b41	57		 push	 edi
  00b42	57		 push	 edi
  00b43	57		 push	 edi
  00b44	57		 push	 edi
  00b45	68 80 a9 03 00	 push	 240000			; 0003a980H
  00b4a	a3 00 00 00 00	 mov	 DWORD PTR ?SysEncDriveAnalysisStart@@3HA, eax ; SysEncDriveAnalysisStart
  00b4f	e8 00 00 00 00	 call	 _InitProgressBar
  00b54	83 c4 20	 add	 esp, 32			; 00000020H
$LN451@MainDialog:

; 5790 : 				}
; 5791 : 
; 5792 : 				ArrowWaitCursor ();

  00b57	e8 00 00 00 00	 call	 _ArrowWaitCursor

; 5804 : 			}
; 5805 : 			return 1;

  00b5c	b8 01 00 00 00	 mov	 eax, 1
  00b61	e9 42 f5 ff ff	 jmp	 $LN517@MainDialog
$LN452@MainDialog:

; 5793 : 			}
; 5794 : 			else
; 5795 : 			{
; 5796 : 				KillTimer (hwndDlg, TIMER_ID_SYSENC_DRIVE_ANALYSIS_PROGRESS);

  00b66	68 03 01 00 00	 push	 259			; 00000103H
  00b6b	53		 push	 ebx
  00b6c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 5797 : 				UpdateProgressBarProc (SYSENC_DRIVE_ANALYSIS_ETA);

  00b72	57		 push	 edi
  00b73	68 80 a9 03 00	 push	 240000			; 0003a980H
  00b78	e8 00 00 00 00	 call	 _UpdateProgressBarProc
  00b7d	83 c4 08	 add	 esp, 8

; 5798 : 				Sleep (1500);	// User-friendly GUI

  00b80	68 dc 05 00 00	 push	 1500			; 000005dcH
  00b85	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 5799 : 
; 5800 : 				if (bSysEncDriveAnalysisTimeOutOccurred)

  00b8b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bSysEncDriveAnalysisTimeOutOccurred@@3HC ; bSysEncDriveAnalysisTimeOutOccurred
  00b91	85 c9		 test	 ecx, ecx
  00b93	74 0d		 je	 SHORT $LN449@MainDialog

; 5801 : 					Warning ("SYS_DRIVE_SIZE_PROBE_TIMEOUT");

  00b95	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@KCOCCGGE@SYS_DRIVE_SIZE_PROBE_TIMEOUT?$AA@
  00b9a	e8 00 00 00 00	 call	 _Warning
  00b9f	83 c4 04	 add	 esp, 4
$LN449@MainDialog:

; 5802 : 
; 5803 : 				LoadPage (hwndDlg, SYSENC_DRIVE_ANALYSIS_PAGE + 1);

  00ba2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  00ba7	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  00bac	39 3d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, edi
  00bb2	74 67		 je	 SHORT $LN744@MainDialog
  00bb4	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  00bbe	83 f8 15	 cmp	 eax, 21			; 00000015H
  00bc1	75 45		 jne	 SHORT $LN742@MainDialog
  00bc3	68 82 00 00 00	 push	 130			; 00000082H
  00bc8	8d 95 84 ca 00
	00		 lea	 edx, DWORD PTR _tmp$169514[ebp]
  00bce	6a 20		 push	 32			; 00000020H
  00bd0	52		 push	 edx
  00bd1	e8 00 00 00 00	 call	 _memset
  00bd6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  00bdc	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextW@8
  00be2	83 c4 0c	 add	 esp, 12			; 0000000cH
  00be5	8d 8d 84 ca 00
	00		 lea	 ecx, DWORD PTR _tmp$169514[ebp]
  00beb	51		 push	 ecx
  00bec	33 c0		 xor	 eax, eax
  00bee	52		 push	 edx
  00bef	66 89 85 04 cb
	00 00		 mov	 WORD PTR _tmp$169514[ebp+128], ax
  00bf6	ff d6		 call	 esi
  00bf8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  00bfe	8d 85 84 ca 00
	00		 lea	 eax, DWORD PTR _tmp$169514[ebp]
  00c04	50		 push	 eax
  00c05	51		 push	 ecx
  00c06	ff d6		 call	 esi
$LN742@MainDialog:
  00c08	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  00c0e	52		 push	 edx
  00c0f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  00c15	89 3d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, edi
$LN744@MainDialog:
  00c1b	89 3d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, edi
  00c21	e8 00 00 00 00	 call	 _NormalCursor
  00c26	8d 45 b4	 lea	 eax, DWORD PTR _rW$169509[ebp]
  00c29	50		 push	 eax
  00c2a	68 23 04 00 00	 push	 1059			; 00000423H
  00c2f	53		 push	 ebx
  00c30	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00c36	50		 push	 eax
  00c37	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  00c3d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  00c43	57		 push	 edi
  00c44	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  00c49	53		 push	 ebx
  00c4a	6a 77		 push	 119			; 00000077H
  00c4c	51		 push	 ecx
  00c4d	c7 05 00 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 6 ; nCurPageNo
  00c57	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  00c5d	8d 55 84	 lea	 edx, DWORD PTR _rD$169508[ebp]
  00c60	52		 push	 edx
  00c61	53		 push	 ebx
  00c62	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  00c67	c7 45 84 a2 00
	00 00		 mov	 DWORD PTR _rD$169508[ebp], 162 ; 000000a2H
  00c6e	c7 45 88 19 00
	00 00		 mov	 DWORD PTR _rD$169508[ebp+4], 25 ; 00000019H
  00c75	89 7d 8c	 mov	 DWORD PTR _rD$169508[ebp+8], edi
  00c78	89 7d 90	 mov	 DWORD PTR _rD$169508[ebp+12], edi
  00c7b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  00c81	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00c86	3b c7		 cmp	 eax, edi
  00c88	74 2d		 je	 SHORT $LN693@MainDialog
  00c8a	8b 4d c0	 mov	 ecx, DWORD PTR _rW$169509[ebp+12]
  00c8d	2b 4d b8	 sub	 ecx, DWORD PTR _rW$169509[ebp+4]
  00c90	8b 55 bc	 mov	 edx, DWORD PTR _rW$169509[ebp+8]
  00c93	2b 55 b4	 sub	 edx, DWORD PTR _rW$169509[ebp]
  00c96	6a 01		 push	 1
  00c98	51		 push	 ecx
  00c99	8b 4d 88	 mov	 ecx, DWORD PTR _rD$169508[ebp+4]
  00c9c	52		 push	 edx
  00c9d	8b 55 84	 mov	 edx, DWORD PTR _rD$169508[ebp]
$LN1256@MainDialog:
  00ca0	51		 push	 ecx
  00ca1	52		 push	 edx
  00ca2	50		 push	 eax
  00ca3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  00ca9	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  00cae	6a 01		 push	 1
  00cb0	50		 push	 eax
  00cb1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
$LN693@MainDialog:

; 5804 : 			}
; 5805 : 			return 1;

  00cb7	b8 01 00 00 00	 mov	 eax, 1
  00cbc	e9 e7 f3 ff ff	 jmp	 $LN517@MainDialog
$LN448@MainDialog:

; 5806 : 
; 5807 : 		case TIMER_ID_WIPE_PROGRESS:
; 5808 : 
; 5809 : 			// Manage device wipe and update related GUI
; 5810 : 
; 5811 : 			if (bHiddenOS && IsHiddenOSRunning())

  00cc1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  00cc7	85 c9		 test	 ecx, ecx
  00cc9	0f 84 99 f7 ff
	ff		 je	 $LN487@MainDialog
  00ccf	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  00cd4	85 c0		 test	 eax, eax
  00cd6	0f 84 8c f7 ff
	ff		 je	 $LN487@MainDialog

; 5812 : 			{
; 5813 : 				// Decoy system partition wipe 
; 5814 : 
; 5815 : 				DecoySystemWipeStatus decoySysPartitionWipeStatus;
; 5816 : 
; 5817 : 				try
; 5818 : 				{
; 5819 : 					decoySysPartitionWipeStatus = BootEncObj->GetDecoyOSWipeStatus();

  00cdc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00ce2	8d 95 e4 fa ff
	ff		 lea	 edx, DWORD PTR $T169253[ebp]
  00ce8	52		 push	 edx
  00ce9	c7 45 fc 0e 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 14 ; 0000000eH
  00cf0	e8 00 00 00 00	 call	 ?GetDecoyOSWipeStatus@BootEncryption@CipherShed@@QAE?AUDecoySystemWipeStatus@@XZ ; CipherShed::BootEncryption::GetDecoyOSWipeStatus
  00cf5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00cf8	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00cfb	8b 18		 mov	 ebx, DWORD PTR [eax]
  00cfd	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00d00	89 4d b8	 mov	 DWORD PTR _decoySysPartitionWipeStatus$134288[ebp+4], ecx

; 5820 : 					BootEncStatus = BootEncObj->GetStatus();

  00d03	8d 8d 7a f9 ff
	ff		 lea	 ecx, DWORD PTR $T169254[ebp]
  00d09	51		 push	 ecx
  00d0a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00d10	89 55 bc	 mov	 DWORD PTR _decoySysPartitionWipeStatus$134288[ebp+8], edx
  00d13	89 45 c0	 mov	 DWORD PTR _decoySysPartitionWipeStatus$134288[ebp+12], eax
  00d16	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  00d1b	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00d20	8b f0		 mov	 esi, eax
  00d22	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  00d27	f3 a5		 rep movsd
  00d29	66 a5		 movsw
  00d2b	83 ce ff	 or	 esi, -1
  00d2e	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi

; 5838 : 				}
; 5839 : 
; 5840 : 				if (decoySysPartitionWipeStatus.WipeInProgress)

  00d31	85 db		 test	 ebx, ebx
  00d33	74 0a		 je	 SHORT $LN444@MainDialog

; 5841 : 				{
; 5842 : 					ArrowWaitCursor ();

  00d35	e8 00 00 00 00	 call	 _ArrowWaitCursor

; 5843 : 
; 5844 : 					UpdateWipeProgressBar ();

  00d3a	e8 00 00 00 00	 call	 _UpdateWipeProgressBar
$LN444@MainDialog:

; 5845 : 				}
; 5846 : 
; 5847 : 				if (bDeviceWipeInProgress != decoySysPartitionWipeStatus.WipeInProgress)

  00d3f	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bDeviceWipeInProgress@@3HA, ebx ; bDeviceWipeInProgress
  00d45	0f 84 1d f7 ff
	ff		 je	 $LN487@MainDialog

; 5848 : 				{
; 5849 : 					bDeviceWipeInProgress = decoySysPartitionWipeStatus.WipeInProgress;

  00d4b	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bDeviceWipeInProgress@@3HA, ebx ; bDeviceWipeInProgress

; 5850 : 
; 5851 : 					UpdateWipeProgressBar ();

  00d51	e8 00 00 00 00	 call	 _UpdateWipeProgressBar

; 5852 : 					UpdateWipeControls ();

  00d56	e8 00 00 00 00	 call	 _UpdateWipeControls

; 5853 : 
; 5854 : 					if (!bDeviceWipeInProgress)

  00d5b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDeviceWipeInProgress@@3HA, 0 ; bDeviceWipeInProgress
  00d62	0f 85 00 f7 ff
	ff		 jne	 $LN487@MainDialog

; 5855 : 					{
; 5856 : 						// The driver stopped wiping
; 5857 : 
; 5858 : 						KillTimer (hwndDlg, TIMER_ID_WIPE_PROGRESS);

  00d68	8b 55 e4	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00d6b	68 02 01 00 00	 push	 258			; 00000102H
  00d70	52		 push	 edx
  00d71	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 5859 : 
; 5860 : 						try
; 5861 : 						{
; 5862 : 							BootEncObj->CheckDecoyOSWipeResult();

  00d77	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00d7d	c7 45 fc 12 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 18 ; 00000012H
  00d84	e8 00 00 00 00	 call	 ?CheckDecoyOSWipeResult@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::CheckDecoyOSWipeResult
  00d89	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], esi
$LN654@MainDialog:

; 5869 : 
; 5870 : 						if (BootEncStatus.ConfiguredEncryptedAreaEnd == decoySysPartitionWipeStatus.WipedAreaEnd)

  00d8c	8b 0d 22 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+34
  00d92	3b 4d bc	 cmp	 ecx, DWORD PTR _decoySysPartitionWipeStatus$134288[ebp+8]
  00d95	0f 85 cd f6 ff
	ff		 jne	 $LN487@MainDialog
  00d9b	8b 15 26 00 00
	00		 mov	 edx, DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+38
  00da1	3b 55 c0	 cmp	 edx, DWORD PTR _decoySysPartitionWipeStatus$134288[ebp+12]
  00da4	0f 85 be f6 ff
	ff		 jne	 $LN487@MainDialog

; 5871 : 						{
; 5872 : 							// Decoy system partition has been fully wiped
; 5873 : 
; 5874 : 							ChangeHiddenOSCreationPhase (TC_HIDDEN_OS_CREATION_PHASE_WIPED);

  00daa	68 c0 00 00 00	 push	 192			; 000000c0H
  00daf	e8 00 00 00 00	 call	 ?ChangeHiddenOSCreationPhase@@YAHH@Z ; ChangeHiddenOSCreationPhase

; 5875 : 
; 5876 : 							SetWindowTextW (GetDlgItem (MainDlg, IDCANCEL), GetString ("EXIT"));

  00db4	68 00 00 00 00	 push	 OFFSET ??_C@_04GOLNGIJ@EXIT?$AA@
  00db9	e8 00 00 00 00	 call	 _GetString
  00dbe	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00dc4	83 c4 08	 add	 esp, 8
  00dc7	50		 push	 eax
  00dc8	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00dcd	6a 02		 push	 2
  00dcf	50		 push	 eax
  00dd0	ff d6		 call	 esi
  00dd2	50		 push	 eax
  00dd3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 5877 : 							EnableWindow (GetDlgItem (MainDlg, IDCANCEL), TRUE);

  00dd9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  00ddf	6a 01		 push	 1
  00de1	6a 02		 push	 2
  00de3	51		 push	 ecx
  00de4	ff d6		 call	 esi
  00de6	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  00dec	50		 push	 eax
  00ded	ff d7		 call	 edi

; 5878 : 							EnableWindow (GetDlgItem (MainDlg, IDC_PREV), FALSE);

  00def	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  00df5	6a 00		 push	 0
  00df7	68 11 04 00 00	 push	 1041			; 00000411H
  00dfc	52		 push	 edx
  00dfd	ff d6		 call	 esi
  00dff	50		 push	 eax
  00e00	ff d7		 call	 edi

; 5879 : 							EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), FALSE);

  00e02	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00e07	6a 00		 push	 0
  00e09	68 10 04 00 00	 push	 1040			; 00000410H
  00e0e	50		 push	 eax
  00e0f	ff d6		 call	 esi
  00e11	50		 push	 eax
  00e12	ff d7		 call	 edi

; 5880 : 							EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), FALSE);

  00e14	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  00e1a	6a 00		 push	 0
  00e1c	68 f8 03 00 00	 push	 1016			; 000003f8H
  00e21	51		 push	 ecx
  00e22	ff d6		 call	 esi
  00e24	50		 push	 eax
  00e25	ff d7		 call	 edi

; 5881 : 
; 5882 : 							Info ("WIPE_FINISHED_DECOY_SYSTEM_PARTITION");

  00e27	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JGIFKPLM@WIPE_FINISHED_DECOY_SYSTEM_PARTI@
  00e2c	e8 00 00 00 00	 call	 _Info

; 5883 : 
; 5884 : 							TextInfoDialogBox (TC_TBXID_DECOY_OS_INSTRUCTIONS);

  00e31	6a 03		 push	 3
  00e33	e8 00 00 00 00	 call	 _TextInfoDialogBox

; 5885 : 
; 5886 : 							if (BootEncObj->GetSystemDriveConfiguration().ExtraBootPartitionPresent)

  00e38	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00e3e	83 c4 08	 add	 esp, 8
  00e41	8d 95 3c f7 ff
	ff		 lea	 edx, DWORD PTR $T169257[ebp]
  00e47	52		 push	 edx
  00e48	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  00e4d	8a 98 c0 00 00
	00		 mov	 bl, BYTE PTR [eax+192]
  00e53	8d 8d 3c f7 ff
	ff		 lea	 ecx, DWORD PTR $T169257[ebp]
  00e59	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
  00e5e	84 db		 test	 bl, bl
  00e60	74 0d		 je	 SHORT $LN439@MainDialog

; 5887 : 								Warning ("DECOY_OS_VERSION_WARNING");

  00e62	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@EAMLJMAO@DECOY_OS_VERSION_WARNING?$AA@
  00e67	e8 00 00 00 00	 call	 _Warning
  00e6c	83 c4 04	 add	 esp, 4
$LN439@MainDialog:

; 5888 : 
; 5889 : 							return 1;

  00e6f	b8 01 00 00 00	 mov	 eax, 1
  00e74	e9 2f f2 ff ff	 jmp	 $LN517@MainDialog
__catch$_MainDialogProc@16$17:

; 5863 : 						}
; 5864 : 						catch (Exception &e)
; 5865 : 						{
; 5866 : 							e.Show (hwndDlg);

  00e79	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134300[ebp]
  00e7f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00e81	8b 55 e4	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00e84	8b 00		 mov	 eax, DWORD PTR [eax]
  00e86	52		 push	 edx
  00e87	ff d0		 call	 eax

; 5867 : 							AbortProcessSilent();

  00e89	e8 00 00 00 00	 call	 _AbortProcessSilent

; 5868 : 						}

  00e8e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00e95	b8 00 00 00 00	 mov	 eax, $LN654@MainDialog
  00e9a	c3		 ret	 0
__catch$_MainDialogProc@16$13:
  00e9b	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  00ea0	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00ea3	68 02 01 00 00	 push	 258			; 00000102H
  00ea8	50		 push	 eax
  00ea9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8
  00eaf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  00eb5	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+12], 16 ; 00000010H
  00eb9	e8 00 00 00 00	 call	 ?AbortDecoyOSWipe@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::AbortDecoyOSWipe
  00ebe	c7 45 fc 0f 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 15 ; 0000000fH
$LN650@MainDialog:

; 5821 : 				}
; 5822 : 				catch (Exception &e)
; 5823 : 				{
; 5824 : 					KillTimer (MainDlg, TIMER_ID_WIPE_PROGRESS);
; 5825 : 
; 5826 : 					try
; 5827 : 					{
; 5828 : 						BootEncObj->AbortDecoyOSWipe ();
; 5829 : 					}
; 5830 : 					catch (Exception &e)
; 5831 : 					{
; 5832 : 						e.Show (hwndDlg);
; 5833 : 					}
; 5834 : 
; 5835 : 					e.Show (hwndDlg);

  00ec5	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134292[ebp]
  00ecb	8b 01		 mov	 eax, DWORD PTR [ecx]
  00ecd	8b 55 e4	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00ed0	8b 00		 mov	 eax, DWORD PTR [eax]
  00ed2	52		 push	 edx
  00ed3	ff d0		 call	 eax

; 5836 : 					EndMainDlg (MainDlg);

  00ed5	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  00edb	e8 00 00 00 00	 call	 _EndMainDlg

; 5837 : 					return 1;

  00ee0	b8 00 00 00 00	 mov	 eax, $LN693@MainDialog
  00ee5	c3		 ret	 0
__catch$_MainDialogProc@16$14:
  00ee6	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _e$134294[ebp]
  00eec	8b 11		 mov	 edx, DWORD PTR [ecx]
  00eee	8b 45 e4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  00ef1	8b 12		 mov	 edx, DWORD PTR [edx]
  00ef3	50		 push	 eax
  00ef4	ff d2		 call	 edx
  00ef6	c7 45 fc 0f 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 15 ; 0000000fH
  00efd	b8 00 00 00 00	 mov	 eax, $LN650@MainDialog
  00f02	c3		 ret	 0
$LN507@MainDialog:
  00f03	b9 ff 7f 00 00	 mov	 ecx, 32767		; 00007fffH
  00f08	66 39 8d 70 cc
	00 00		 cmp	 WORD PTR _wParam$[ebp], cx
  00f0f	0f 85 91 f1 ff
	ff		 jne	 $LN515@MainDialog
  00f15	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hInst
  00f1b	57		 push	 edi
  00f1c	68 00 00 00 00	 push	 OFFSET _AboutDlgProc@16
  00f21	53		 push	 ebx
  00f22	68 fc 01 00 00	 push	 508			; 000001fcH
  00f27	52		 push	 edx
  00f28	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
$ovf_end_3$134850:
  00f2e	b8 01 00 00 00	 mov	 eax, 1
  00f33	e9 70 f1 ff ff	 jmp	 $LN517@MainDialog
$LN402@MainDialog:

; 6070 : 		return 1;
; 6071 : 
; 6072 : 
; 6073 : 	case WM_COMMAND:
; 6074 : 
; 6075 : 		if (lw == IDHELP)

  00f38	8b 8d 70 cc 00
	00		 mov	 ecx, DWORD PTR _wParam$[ebp]
  00f3e	be 09 00 00 00	 mov	 esi, 9
  00f43	66 3b ce	 cmp	 cx, si

; 6076 : 		{
; 6077 : 			OpenPageHelp (hwndDlg, nCurPageNo);
; 6078 : 			return 1;

  00f46	0f 84 39 f1 ff
	ff		 je	 $LN1252@MainDialog

; 6079 : 		}
; 6080 : 		else if (lw == IDCANCEL)

  00f4c	bf 02 00 00 00	 mov	 edi, 2
  00f51	66 3b cf	 cmp	 cx, di
  00f54	75 18		 jne	 SHORT $LN399@MainDialog

; 6081 : 		{
; 6082 : 			PostMessage (hwndDlg, TC_APPMSG_FORMAT_USER_QUIT, 0, 0);

  00f56	6a 00		 push	 0
  00f58	6a 00		 push	 0
  00f5a	68 2f 81 00 00	 push	 33071			; 0000812fH
  00f5f	53		 push	 ebx
  00f60	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  00f66	8d 46 f8	 lea	 eax, DWORD PTR [esi-8]
  00f69	e9 3a f1 ff ff	 jmp	 $LN517@MainDialog
$LN399@MainDialog:

; 6083 : 			return 1;
; 6084 : 		}
; 6085 : 		else if (lw == IDC_NEXT)

  00f6e	ba 10 04 00 00	 mov	 edx, 1040		; 00000410H
  00f73	66 3b ca	 cmp	 cx, dx
  00f76	0f 85 6f 2c 00
	00		 jne	 $LN397@MainDialog

; 6086 : 		{
; 6087 : 			if (nCurPageNo == INTRO_PAGE)

  00f7c	33 c9		 xor	 ecx, ecx
  00f7e	3b c1		 cmp	 eax, ecx
  00f80	0f 85 72 01 00
	00		 jne	 $LN396@MainDialog

; 6088 : 			{
; 6089 : 				switch (GetSelectedWizardMode (hCurPage))

  00f86	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _hCurPage
  00f8c	e8 00 00 00 00	 call	 ?GetSelectedWizardMode@@YAHPAUHWND__@@@Z ; GetSelectedWizardMode
  00f91	33 f6		 xor	 esi, esi
  00f93	2b c6		 sub	 eax, esi
  00f95	74 6e		 je	 SHORT $LN393@MainDialog
  00f97	83 e8 01	 sub	 eax, 1
  00f9a	74 27		 je	 SHORT $LN389@MainDialog
  00f9c	83 e8 01	 sub	 eax, 1
  00f9f	0f 85 2e 2c 00
	00		 jne	 $LN209@MainDialog

; 6126 : 					break;
; 6127 : 
; 6128 : 				case WIZARD_MODE_SYS_DEVICE:
; 6129 : 
; 6130 : 					WaitCursor ();

  00fa5	e8 00 00 00 00	 call	 _WaitCursor

; 6131 : 					bHiddenVol = FALSE;

  00faa	89 35 00 00 00
	00		 mov	 DWORD PTR ?bHiddenVol@@3HC, esi ; bHiddenVol

; 6132 : 					bInPlaceEncNonSys = FALSE;

  00fb0	89 35 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, esi

; 6133 : 					SwitchWizardToSysEncMode ();

  00fb6	e8 00 00 00 00	 call	 _SwitchWizardToSysEncMode
  00fbb	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00fbe	e9 e5 f0 ff ff	 jmp	 $LN517@MainDialog
$LN389@MainDialog:

; 6111 : 					break;
; 6112 : 
; 6113 : 				case WIZARD_MODE_NONSYS_DEVICE:
; 6114 : 
; 6115 : 					WaitCursor ();

  00fc3	e8 00 00 00 00	 call	 _WaitCursor

; 6116 : 					CloseSysEncMutex ();

  00fc8	e8 00 00 00 00	 call	 _CloseSysEncMutex

; 6117 : 
; 6118 : 					if (!ChangeWizardMode (WIZARD_MODE_NONSYS_DEVICE))

  00fcd	be 01 00 00 00	 mov	 esi, 1
  00fd2	e8 00 00 00 00	 call	 ?ChangeWizardMode@@YAHH@Z ; ChangeWizardMode
  00fd7	85 c0		 test	 eax, eax

; 6119 : 					{
; 6120 : 						NormalCursor ();
; 6121 : 						return 1;

  00fd9	0f 84 c4 07 00
	00		 je	 $LN1247@MainDialog

; 6122 : 					}
; 6123 : 
; 6124 : 					bHiddenOS = FALSE;
; 6125 : 					nNewPageNo = VOLUME_TYPE_PAGE - 1;	// Skip irrelevant pages

  00fdf	c7 45 ec 0b 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 11 ; 0000000bH

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  00fe6	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  00fe9	40		 inc	 eax
  00fea	50		 push	 eax
  00feb	53		 push	 ebx
  00fec	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bHiddenOS@@3HC, 0 ; bHiddenOS
  00ff6	e8 00 00 00 00	 call	 _LoadPage
  00ffb	83 c4 08	 add	 esp, 8
  00ffe	8b c6		 mov	 eax, esi
  01000	e9 a3 f0 ff ff	 jmp	 $LN517@MainDialog
$LN393@MainDialog:

; 6090 : 				{
; 6091 : 				case WIZARD_MODE_FILE_CONTAINER:
; 6092 : 
; 6093 : 					if (CurrentOSMajor >= 6 && IsUacSupported() && IsAdmin() && !IsBuiltInAdmin() && !IsNonInstallMode())

  01005	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR _CurrentOSMajor, 6
  0100c	7c 4b		 jl	 SHORT $LN391@MainDialog
  0100e	e8 00 00 00 00	 call	 _IsUacSupported
  01013	85 c0		 test	 eax, eax
  01015	74 42		 je	 SHORT $LN391@MainDialog
  01017	e8 00 00 00 00	 call	 _IsAdmin
  0101c	85 c0		 test	 eax, eax
  0101e	74 39		 je	 SHORT $LN391@MainDialog
  01020	e8 00 00 00 00	 call	 _IsBuiltInAdmin
  01025	85 c0		 test	 eax, eax
  01027	75 30		 jne	 SHORT $LN391@MainDialog
  01029	e8 00 00 00 00	 call	 _IsNonInstallMode
  0102e	85 c0		 test	 eax, eax
  01030	75 27		 jne	 SHORT $LN391@MainDialog

; 6094 : 					{
; 6095 : 						static bool warningConfirmed = false;
; 6096 : 						if (!warningConfirmed)

  01032	38 05 00 00 00
	00		 cmp	 BYTE PTR ?warningConfirmed@?NM@??MainDialogProc@@9@16@4_NA, al
  01038	75 1f		 jne	 SHORT $LN391@MainDialog

; 6097 : 						{
; 6098 : 							if (AskWarnYesNo ("CONTAINER_ADMIN_WARNING") == IDYES)

  0103a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BGKLALIE@CONTAINER_ADMIN_WARNING?$AA@
  0103f	e8 00 00 00 00	 call	 _AskWarnYesNo
  01044	83 c4 04	 add	 esp, 4
  01047	83 f8 06	 cmp	 eax, 6
  0104a	75 06		 jne	 SHORT $LN390@MainDialog

; 6099 : 								exit (0);

  0104c	56		 push	 esi
  0104d	e8 00 00 00 00	 call	 _exit
$LN390@MainDialog:

; 6100 : 
; 6101 : 							warningConfirmed = true;

  01052	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?warningConfirmed@?NM@??MainDialogProc@@9@16@4_NA, 1
$LN391@MainDialog:

; 6102 : 						}
; 6103 : 					}
; 6104 : 
; 6105 : 					WaitCursor ();

  01059	e8 00 00 00 00	 call	 _WaitCursor

; 6106 : 					CloseSysEncMutex ();

  0105e	e8 00 00 00 00	 call	 _CloseSysEncMutex

; 6107 : 					ChangeWizardMode (WIZARD_MODE_FILE_CONTAINER);

  01063	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  01068	85 c0		 test	 eax, eax
  0106a	74 41		 je	 SHORT $LN881@MainDialog
  0106c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  01072	3b cf		 cmp	 ecx, edi
  01074	75 05		 jne	 SHORT $LN880@MainDialog
  01076	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
$LN880@MainDialog:
  0107b	89 35 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, esi
  01081	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?szFileName@@3PADA, 0
  01088	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?szDiskFile@@3PADA, 0
  0108f	89 35 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, esi
  01095	89 35 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, esi
  0109b	89 35 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, esi
  010a1	89 35 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, esi
  010a7	89 35 00 00 00
	00		 mov	 DWORD PTR _WizardMode, esi
$LN881@MainDialog:
  010ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  010b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  010b8	f7 da		 neg	 edx
  010ba	1b d2		 sbb	 edx, edx
  010bc	f7 da		 neg	 edx
  010be	89 15 00 00 00
	00		 mov	 DWORD PTR ?bDevice@@3HA, edx ; bDevice
  010c4	85 c0		 test	 eax, eax
  010c6	75 05		 jne	 SHORT $LN873@MainDialog
  010c8	e8 00 00 00 00	 call	 _CloseSysEncMutex
$LN873@MainDialog:

; 6108 : 					bHiddenOS = FALSE;
; 6109 : 					bInPlaceEncNonSys = FALSE;
; 6110 : 					nNewPageNo = VOLUME_TYPE_PAGE - 1;	// Skip irrelevant pages

  010cd	c7 45 ec 0b 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 11 ; 0000000bH

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  010d4	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  010d7	40		 inc	 eax
  010d8	50		 push	 eax
  010d9	89 35 00 00 00
	00		 mov	 DWORD PTR ?bHiddenOS@@3HC, esi ; bHiddenOS
  010df	53		 push	 ebx
  010e0	89 35 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, esi
  010e6	e8 00 00 00 00	 call	 _LoadPage
  010eb	83 c4 08	 add	 esp, 8
  010ee	b8 01 00 00 00	 mov	 eax, 1
  010f3	e9 b0 ef ff ff	 jmp	 $LN517@MainDialog
$LN396@MainDialog:

; 6134 : 					return 1;
; 6135 : 				}
; 6136 : 			}
; 6137 : 			else if (nCurPageNo == SYSENC_TYPE_PAGE)

  010f8	83 f8 01	 cmp	 eax, 1
  010fb	75 3d		 jne	 SHORT $LN385@MainDialog

; 6138 : 			{
; 6139 : 				if (bHiddenOS)

  010fd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  01103	85 d2		 test	 edx, edx
  01105	74 0c		 je	 SHORT $LN384@MainDialog

; 6140 : 				{
; 6141 : 					bWholeSysDrive = FALSE;

  01107	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bWholeSysDrive@@3HA, ecx ; bWholeSysDrive

; 6142 : 					bHiddenVolDirect = FALSE;

  0110d	89 0d 00 00 00
	00		 mov	 DWORD PTR _bHiddenVolDirect, ecx
$LN384@MainDialog:

; 6143 : 				}
; 6144 : 
; 6145 : 				if (!bHiddenOS)

  01113	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  01118	85 c0		 test	 eax, eax
  0111a	0f 85 b3 2a 00
	00		 jne	 $LN209@MainDialog

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  01120	8b c7		 mov	 eax, edi
  01122	40		 inc	 eax
  01123	50		 push	 eax
  01124	53		 push	 ebx
  01125	89 7d ec	 mov	 DWORD PTR _nNewPageNo$[ebp], edi
  01128	e8 00 00 00 00	 call	 _LoadPage
  0112d	83 c4 08	 add	 esp, 8
  01130	b8 01 00 00 00	 mov	 eax, 1
  01135	e9 6e ef ff ff	 jmp	 $LN517@MainDialog
$LN385@MainDialog:

; 6146 : 					nNewPageNo = SYSENC_SPAN_PAGE - 1;	// Skip irrelevant pages
; 6147 : 			}
; 6148 : 			else if (nCurPageNo == SYSENC_HIDDEN_OS_REQ_CHECK_PAGE)

  0113a	3b c7		 cmp	 eax, edi
  0113c	0f 85 a2 01 00
	00		 jne	 $LN381@MainDialog

; 6149 : 			{
; 6150 : 				WaitCursor ();

  01142	e8 00 00 00 00	 call	 _WaitCursor

; 6151 : 				try
; 6152 : 				{
; 6153 : 					BootEncObj->CheckRequirementsHiddenOS ();

  01147	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0114d	c7 45 fc 16 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 22 ; 00000016H
  01154	e8 00 00 00 00	 call	 ?CheckRequirementsHiddenOS@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::CheckRequirementsHiddenOS

; 6154 : 
; 6155 : 					if (CheckGapBetweenSysAndHiddenOS ())

  01159	e8 00 00 00 00	 call	 ?CheckGapBetweenSysAndHiddenOS@@YAHXZ ; CheckGapBetweenSysAndHiddenOS
  0115e	85 c0		 test	 eax, eax
  01160	74 0d		 je	 SHORT $LN379@MainDialog

; 6156 : 						Warning ("GAP_BETWEEN_SYS_AND_HIDDEN_OS_PARTITION");

  01162	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HFDNHKMM@GAP_BETWEEN_SYS_AND_HIDDEN_OS_PA@
  01167	e8 00 00 00 00	 call	 _Warning
  0116c	83 c4 04	 add	 esp, 4
$LN379@MainDialog:
  0116f	83 cf ff	 or	 edi, -1

; 6157 : 				}
; 6158 : 				catch (Exception &e)
; 6159 : 				{
; 6160 : 					e.Show (hwndDlg);
; 6161 : 					NormalCursor ();
; 6162 : 					return 1;
; 6163 : 				}
; 6164 : 
; 6165 : 				if (AskWarnYesNo ("DECOY_OS_REINSTALL_WARNING") == IDNO)

  01172	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@IDNPDOGL@DECOY_OS_REINSTALL_WARNING?$AA@
  01177	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  0117a	e8 00 00 00 00	 call	 _AskWarnYesNo
  0117f	83 c4 04	 add	 esp, 4
  01182	83 f8 07	 cmp	 eax, 7

; 6166 : 				{
; 6167 : 					NormalCursor ();
; 6168 : 					return 1;

  01185	0f 84 54 33 00
	00		 je	 $LN431@MainDialog

; 6169 : 				}
; 6170 : 
; 6171 : 				WarningDirect ((wstring (GetString ("HIDDEN_OS_WRITE_PROTECTION_BRIEF_INFO"))
; 6172 : 					+ L"\n\n"
; 6173 : 					+ GetString ("HIDDEN_OS_WRITE_PROTECTION_EXPLANATION")).c_str());

  0118b	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@LFCLDECM@HIDDEN_OS_WRITE_PROTECTION_BRIEF@
  01190	e8 00 00 00 00	 call	 _GetString
  01195	83 c4 04	 add	 esp, 4
  01198	50		 push	 eax
  01199	8d 8d 04 fe ff
	ff		 lea	 ecx, DWORD PTR $T169269[ebp]
  0119f	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  011a4	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  011a9	50		 push	 eax
  011aa	8d 8d b0 fd ff
	ff		 lea	 ecx, DWORD PTR $T169270[ebp]
  011b0	51		 push	 ecx
  011b1	c7 45 fc 18 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 24 ; 00000018H
  011b8	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  011bd	8b f0		 mov	 esi, eax
  011bf	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@OILEALFF@HIDDEN_OS_WRITE_PROTECTION_EXPLA@
  011c4	c6 45 fc 19	 mov	 BYTE PTR __$EHRec$[ebp+12], 25 ; 00000019H
  011c8	e8 00 00 00 00	 call	 _GetString
  011cd	50		 push	 eax
  011ce	8d 95 b8 fb ff
	ff		 lea	 edx, DWORD PTR $T169271[ebp]
  011d4	56		 push	 esi
  011d5	52		 push	 edx
  011d6	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  011db	83 c4 1c	 add	 esp, 28			; 0000001cH
  011de	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  011e2	72 05		 jb	 SHORT $LN889@MainDialog
  011e4	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  011e7	eb 03		 jmp	 SHORT $LN890@MainDialog
$LN889@MainDialog:
  011e9	83 c0 04	 add	 eax, 4
$LN890@MainDialog:
  011ec	50		 push	 eax
  011ed	e8 00 00 00 00	 call	 _WarningDirect
  011f2	83 c4 04	 add	 esp, 4
  011f5	8d 8d b8 fb ff
	ff		 lea	 ecx, DWORD PTR $T169271[ebp]
  011fb	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  01200	8d 8d b0 fd ff
	ff		 lea	 ecx, DWORD PTR $T169270[ebp]
  01206	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0120b	8d 8d 04 fe ff
	ff		 lea	 ecx, DWORD PTR $T169269[ebp]
  01211	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  01214	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 6174 : 
; 6175 : 				if (!IsAdmin() && IsUacSupported())

  01219	e8 00 00 00 00	 call	 _IsAdmin
  0121e	85 c0		 test	 eax, eax
  01220	75 55		 jne	 SHORT $LN376@MainDialog
  01222	e8 00 00 00 00	 call	 _IsUacSupported
  01227	85 c0		 test	 eax, eax
  01229	74 4c		 je	 SHORT $LN376@MainDialog

; 6176 : 				{
; 6177 : 					// If UAC elevation is needed, we need to elevate the complete wizard process here, because
; 6178 : 					// we will need to switch to the non-sys-device mode, which requires the whole wizard process
; 6179 : 					// to have admin rights.
; 6180 : 
; 6181 : 					CloseSysEncMutex ();

  0122b	e8 00 00 00 00	 call	 _CloseSysEncMutex

; 6182 : 
; 6183 : 					if (!ElevateWholeWizardProcess ("/r"))

  01230	83 ec 1c	 sub	 esp, 28			; 0000001cH
  01233	8b cc		 mov	 ecx, esp
  01235	89 65 c4	 mov	 DWORD PTR $T169272[ebp], esp
  01238	68 00 00 00 00	 push	 OFFSET ??_C@_02COKGDMEE@?1r?$AA@
  0123d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  01242	e8 00 00 00 00	 call	 ?ElevateWholeWizardProcess@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ElevateWholeWizardProcess
  01247	83 c4 1c	 add	 esp, 28			; 0000001cH
  0124a	85 c0		 test	 eax, eax
  0124c	75 29		 jne	 SHORT $LN376@MainDialog

; 6184 : 					{
; 6185 : 						// Failed to obtain admin rights
; 6186 : 
; 6187 : 						NormalCursor ();

  0124e	e8 00 00 00 00	 call	 _NormalCursor

; 6188 : 
; 6189 : 						if (!CreateSysEncMutex ())

  01253	e8 00 00 00 00	 call	 _CreateSysEncMutex
  01258	85 c0		 test	 eax, eax
  0125a	0f 85 57 fa ff
	ff		 jne	 $LN693@MainDialog

; 6190 : 							AbortProcess ("SYSTEM_ENCRYPTION_IN_PROGRESS_ELSEWHERE");

  01260	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  01265	e8 00 00 00 00	 call	 _AbortProcess
  0126a	83 c4 04	 add	 esp, 4
  0126d	b8 01 00 00 00	 mov	 eax, 1
  01272	e9 31 ee ff ff	 jmp	 $LN517@MainDialog
$LN376@MainDialog:

; 6191 : 
; 6192 : 						return 1;
; 6193 : 					}
; 6194 : 				}
; 6195 : 
; 6196 : 				// This check requires admin rights
; 6197 : 				try
; 6198 : 				{
; 6199 : 					BootEncObj->InitialSecurityChecksForHiddenOS ();

  01277	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0127d	c7 45 fc 1a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 26 ; 0000001aH
  01284	e8 00 00 00 00	 call	 ?InitialSecurityChecksForHiddenOS@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::InitialSecurityChecksForHiddenOS

; 6206 : 				}
; 6207 : 
; 6208 : 				nNewPageNo = SYSENC_MULTI_BOOT_MODE_PAGE - 1;	// Skip irrelevant pages

  01289	c7 45 ec 05 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 5

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  01290	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  01293	40		 inc	 eax
  01294	50		 push	 eax
  01295	53		 push	 ebx
  01296	e8 00 00 00 00	 call	 _LoadPage
  0129b	83 c4 08	 add	 esp, 8
  0129e	b8 01 00 00 00	 mov	 eax, 1
  012a3	e9 00 ee ff ff	 jmp	 $LN517@MainDialog
__catch$_MainDialogProc@16$23:

; 6200 : 				}
; 6201 : 				catch (Exception &e)
; 6202 : 				{
; 6203 : 					e.Show (hwndDlg);

  012a8	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134398[ebp]
  012ae	8b 01		 mov	 eax, DWORD PTR [ecx]
  012b0	8b 55 e4	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  012b3	8b 00		 mov	 eax, DWORD PTR [eax]
  012b5	52		 push	 edx
  012b6	ff d0		 call	 eax

; 6204 : 					EndMainDlg (MainDlg);	// Some of the checks need the wizard to be restarted (results are cached until exit and the checks would fail even if the issues were rectified).

  012b8	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  012be	e8 00 00 00 00	 call	 _EndMainDlg

; 6205 : 					return 1;

  012c3	b8 00 00 00 00	 mov	 eax, $LN487@MainDialog
  012c8	c3		 ret	 0
__catch$_MainDialogProc@16$21:
  012c9	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR _e$134383[ebp]
  012cf	8b 11		 mov	 edx, DWORD PTR [ecx]
  012d1	8b 45 e4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  012d4	8b 12		 mov	 edx, DWORD PTR [edx]
  012d6	50		 push	 eax
  012d7	ff d2		 call	 edx
  012d9	e8 00 00 00 00	 call	 _NormalCursor
  012de	b8 00 00 00 00	 mov	 eax, $LN487@MainDialog
  012e3	c3		 ret	 0
$LN381@MainDialog:

; 6209 : 			}
; 6210 : 			else if (nCurPageNo == SYSENC_SPAN_PAGE)

  012e4	83 f8 03	 cmp	 eax, 3
  012e7	0f 85 bb 01 00
	00		 jne	 $LN372@MainDialog

; 6211 : 			{
; 6212 : 				try
; 6213 : 				{

  012ed	c7 45 fc 1c 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 28 ; 0000001cH

; 6214 : 					if (bWholeSysDrive && !BootEncObj->SystemPartitionCoversWholeDrive())

  012f4	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, ecx ; bWholeSysDrive
  012fa	0f 84 37 01 00
	00		 je	 $LN1120@MainDialog
  01300	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  01306	e8 00 00 00 00	 call	 ?SystemPartitionCoversWholeDrive@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemPartitionCoversWholeDrive
  0130b	84 c0		 test	 al, al
  0130d	0f 85 17 01 00
	00		 jne	 $LN364@MainDialog

; 6215 : 					{
; 6216 : 						if (BootEncObj->SystemDriveContainsNonStandardPartitions())

  01313	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  01319	e8 00 00 00 00	 call	 ?SystemDriveContainsNonStandardPartitions@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemDriveContainsNonStandardPartitions
  0131e	84 c0		 test	 al, al
  01320	0f 84 a6 00 00
	00		 je	 $LN368@MainDialog

; 6217 : 						{
; 6218 : 							if (AskWarnYesNoString ((wstring (GetString ("SYSDRIVE_NON_STANDARD_PARTITIONS")) + L"\n\n" + GetString ("ASK_ENCRYPT_PARTITION_INSTEAD_OF_DRIVE")).c_str()) == IDYES)

  01326	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@CKHHFLEI@SYSDRIVE_NON_STANDARD_PARTITIONS@
  0132b	e8 00 00 00 00	 call	 _GetString
  01330	83 c4 04	 add	 esp, 4
  01333	50		 push	 eax
  01334	8d 8d ec fc ff
	ff		 lea	 ecx, DWORD PTR $T169275[ebp]
  0133a	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0133f	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  01344	50		 push	 eax
  01345	8d 85 24 fd ff
	ff		 lea	 eax, DWORD PTR $T169276[ebp]
  0134b	50		 push	 eax
  0134c	c6 45 fc 1d	 mov	 BYTE PTR __$EHRec$[ebp+12], 29 ; 0000001dH
  01350	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  01355	83 c4 0c	 add	 esp, 12			; 0000000cH
  01358	8b f0		 mov	 esi, eax
  0135a	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@KNBCDPOB@ASK_ENCRYPT_PARTITION_INSTEAD_OF@
  0135f	c6 45 fc 1e	 mov	 BYTE PTR __$EHRec$[ebp+12], 30 ; 0000001eH
  01363	e8 00 00 00 00	 call	 _GetString
  01368	50		 push	 eax
  01369	8d 8d 5c fd ff
	ff		 lea	 ecx, DWORD PTR $T169277[ebp]
  0136f	56		 push	 esi
  01370	51		 push	 ecx
  01371	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  01376	83 c4 10	 add	 esp, 16			; 00000010H
  01379	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  0137d	72 05		 jb	 SHORT $LN895@MainDialog
  0137f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  01382	eb 03		 jmp	 SHORT $LN896@MainDialog
$LN895@MainDialog:
  01384	83 c0 04	 add	 eax, 4
$LN896@MainDialog:
  01387	50		 push	 eax
  01388	e8 00 00 00 00	 call	 _AskWarnYesNoString
  0138d	83 c4 04	 add	 esp, 4
  01390	83 f8 06	 cmp	 eax, 6
  01393	8d 8d 5c fd ff
	ff		 lea	 ecx, DWORD PTR $T169277[ebp]
  01399	0f 94 45 eb	 sete	 BYTE PTR $T169274[ebp]
  0139d	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  013a2	8d 8d 24 fd ff
	ff		 lea	 ecx, DWORD PTR $T169276[ebp]
  013a8	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  013ad	8d 8d ec fc ff
	ff		 lea	 ecx, DWORD PTR $T169275[ebp]
  013b3	c6 45 fc 1c	 mov	 BYTE PTR __$EHRec$[ebp+12], 28 ; 0000001cH
  013b7	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  013bc	80 7d eb 00	 cmp	 BYTE PTR $T169274[ebp], 0
  013c0	74 0a		 je	 SHORT $LN368@MainDialog

; 6219 : 								bWholeSysDrive = FALSE;

  013c2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bWholeSysDrive@@3HA, 0 ; bWholeSysDrive
$LN368@MainDialog:

; 6220 : 						}
; 6221 : 
; 6222 : 						if (!IsOSAtLeast (WIN_VISTA) && bWholeSysDrive)

  013cc	6a 0b		 push	 11			; 0000000bH
  013ce	e8 00 00 00 00	 call	 _IsOSAtLeast
  013d3	83 c4 04	 add	 esp, 4
  013d6	85 c0		 test	 eax, eax
  013d8	75 50		 jne	 SHORT $LN364@MainDialog
  013da	39 05 00 00 00
	00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, eax ; bWholeSysDrive
  013e0	74 55		 je	 SHORT $LN1120@MainDialog

; 6223 : 						{
; 6224 : 							if (BootEncObj->SystemDriveContainsExtendedPartition())

  013e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  013e8	e8 00 00 00 00	 call	 ?SystemDriveContainsExtendedPartition@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemDriveContainsExtendedPartition
  013ed	84 c0		 test	 al, al
  013ef	74 2c		 je	 SHORT $LN366@MainDialog

; 6225 : 							{
; 6226 : 								Error ("WDE_UNSUPPORTED_FOR_EXTENDED_PARTITIONS");

  013f1	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HLDNCEMH@WDE_UNSUPPORTED_FOR_EXTENDED_PAR@
  013f6	e8 00 00 00 00	 call	 _Error

; 6227 : 
; 6228 : 								if (AskYesNo ("ASK_ENCRYPT_PARTITION_INSTEAD_OF_DRIVE") == IDNO)

  013fb	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@KNBCDPOB@ASK_ENCRYPT_PARTITION_INSTEAD_OF@
  01400	e8 00 00 00 00	 call	 _AskYesNo
  01405	83 c4 08	 add	 esp, 8
  01408	83 f8 07	 cmp	 eax, 7

; 6229 : 									return 1;

  0140b	0f 84 57 f0 ff
	ff		 je	 $LN487@MainDialog

; 6230 : 
; 6231 : 								bWholeSysDrive = FALSE;

  01411	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bWholeSysDrive@@3HA, 0 ; bWholeSysDrive

; 6232 : 							}
; 6233 : 							else

  0141b	eb 1a		 jmp	 SHORT $LN1120@MainDialog
$LN366@MainDialog:

; 6234 : 								Warning ("WDE_EXTENDED_PARTITIONS_WARNING");

  0141d	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@DBKKOPEJ@WDE_EXTENDED_PARTITIONS_WARNING?$AA@
  01422	e8 00 00 00 00	 call	 _Warning
  01427	83 c4 04	 add	 esp, 4
$LN364@MainDialog:

; 6235 : 						}
; 6236 : 					}
; 6237 : 
; 6238 : 					if (!bWholeSysDrive && BootEncObj->SystemPartitionCoversWholeDrive())

  0142a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, 0 ; bWholeSysDrive
  01431	0f 85 9c 27 00
	00		 jne	 $LN209@MainDialog
$LN1120@MainDialog:
  01437	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0143d	e8 00 00 00 00	 call	 ?SystemPartitionCoversWholeDrive@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::SystemPartitionCoversWholeDrive
  01442	84 c0		 test	 al, al
  01444	74 1b		 je	 SHORT $LN363@MainDialog

; 6239 : 						bWholeSysDrive = (AskYesNo ("WHOLE_SYC_DEVICE_RECOM") == IDYES);

  01446	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@HHEGHILA@WHOLE_SYC_DEVICE_RECOM?$AA@
  0144b	e8 00 00 00 00	 call	 _AskYesNo
  01450	33 d2		 xor	 edx, edx
  01452	83 c4 04	 add	 esp, 4
  01455	83 f8 06	 cmp	 eax, 6
  01458	0f 94 c2	 sete	 dl
  0145b	89 15 00 00 00
	00		 mov	 DWORD PTR ?bWholeSysDrive@@3HA, edx ; bWholeSysDrive
$LN363@MainDialog:

; 6246 : 				}
; 6247 : 
; 6248 : 				if (!bWholeSysDrive)

  01461	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, 0 ; bWholeSysDrive
  01468	0f 85 65 27 00
	00		 jne	 $LN209@MainDialog

; 6249 : 					nNewPageNo = SYSENC_MULTI_BOOT_MODE_PAGE - 1;	// Skip irrelevant pages

  0146e	c7 45 ec 05 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 5

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  01475	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  01478	40		 inc	 eax
  01479	50		 push	 eax
  0147a	53		 push	 ebx
  0147b	e8 00 00 00 00	 call	 _LoadPage
  01480	83 c4 08	 add	 esp, 8
  01483	b8 01 00 00 00	 mov	 eax, 1
  01488	e9 1b ec ff ff	 jmp	 $LN517@MainDialog
__catch$_MainDialogProc@16$25:

; 6240 : 				}
; 6241 : 				catch (Exception &e)
; 6242 : 				{
; 6243 : 					e.Show (hwndDlg);

  0148d	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134415[ebp]
  01493	8b 01		 mov	 eax, DWORD PTR [ecx]
  01495	8b 55 e4	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  01498	8b 00		 mov	 eax, DWORD PTR [eax]
  0149a	52		 push	 edx
  0149b	ff d0		 call	 eax

; 6244 : 					NormalCursor ();

  0149d	e8 00 00 00 00	 call	 _NormalCursor

; 6245 : 					return 1;

  014a2	b8 00 00 00 00	 mov	 eax, $LN487@MainDialog
  014a7	c3		 ret	 0
$LN372@MainDialog:

; 6250 : 			}
; 6251 : 			else if (nCurPageNo == SYSENC_PRE_DRIVE_ANALYSIS_PAGE)

  014a8	83 f8 04	 cmp	 eax, 4
  014ab	75 68		 jne	 SHORT $LN360@MainDialog

; 6252 : 			{
; 6253 : 				if ((SysEncDetectHiddenSectors = Get2RadButtonPageAnswer()) != 1)

  014ad	e8 00 00 00 00	 call	 ?Get2RadButtonPageAnswer@@YAHXZ ; Get2RadButtonPageAnswer
  014b2	a3 00 00 00 00	 mov	 DWORD PTR ?SysEncDetectHiddenSectors@@3HA, eax ; SysEncDetectHiddenSectors
  014b7	83 f8 01	 cmp	 eax, 1
  014ba	0f 84 13 27 00
	00		 je	 $LN209@MainDialog

; 6254 : 				{
; 6255 : 					// Skip drive analysis
; 6256 : 					nNewPageNo = SYSENC_DRIVE_ANALYSIS_PAGE;
; 6257 : 
; 6258 : 					// If the user had already searched for hidden sectors, we must clear (invalidate) the
; 6259 : 					// result because now he changed his mind and no longer wishes to encrypt the hidden sectors.
; 6260 : 					try
; 6261 : 					{
; 6262 : 						BootEncObj->InvalidateCachedSysDriveProperties ();

  014c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  014c6	c7 45 ec 05 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 5
  014cd	c7 45 fc 20 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 32 ; 00000020H
  014d4	e8 00 00 00 00	 call	 ?InvalidateCachedSysDriveProperties@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::InvalidateCachedSysDriveProperties

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  014d9	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  014dc	40		 inc	 eax
  014dd	50		 push	 eax
  014de	53		 push	 ebx
  014df	e8 00 00 00 00	 call	 _LoadPage
  014e4	83 c4 08	 add	 esp, 8
  014e7	b8 01 00 00 00	 mov	 eax, 1
  014ec	e9 b7 eb ff ff	 jmp	 $LN517@MainDialog
__catch$_MainDialogProc@16$27:

; 6263 : 					}
; 6264 : 					catch (Exception &e)
; 6265 : 					{
; 6266 : 						e.Show (MainDlg);

  014f1	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134422[ebp]
  014f7	8b 11		 mov	 edx, DWORD PTR [ecx]
  014f9	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  014fe	8b 12		 mov	 edx, DWORD PTR [edx]
  01500	50		 push	 eax
  01501	ff d2		 call	 edx

; 6267 : 						EndMainDlg (MainDlg);

  01503	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  01509	e8 00 00 00 00	 call	 _EndMainDlg
$LN509@MainDialog:

; 6268 : 						exit(0);

  0150e	6a 00		 push	 0
  01510	e8 00 00 00 00	 call	 _exit
$LN360@MainDialog:

; 6269 : 					}
; 6270 : 				}
; 6271 : 			}
; 6272 : 			else if (nCurPageNo == SYSENC_MULTI_BOOT_MODE_PAGE)

  01515	83 f8 06	 cmp	 eax, 6
  01518	0f 85 4c 01 00
	00		 jne	 $LN356@MainDialog

; 6273 : 			{
; 6274 : 				if (nMultiBoot > 1)

  0151e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?nMultiBoot@@3HA, 1 ; nMultiBoot
  01525	7e 48		 jle	 SHORT $LN352@MainDialog

; 6275 : 				{
; 6276 : 					// Multi-boot 
; 6277 : 
; 6278 : 					if (AskWarnNoYes ("MULTI_BOOT_FOR_ADVANCED_ONLY") == IDNO)

  01527	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@EDCHAEND@MULTI_BOOT_FOR_ADVANCED_ONLY?$AA@
  0152c	e8 00 00 00 00	 call	 _AskWarnNoYes
  01531	83 c4 04	 add	 esp, 4
  01534	83 f8 07	 cmp	 eax, 7

; 6279 : 						return 1;

  01537	0f 84 2b ef ff
	ff		 je	 $LN487@MainDialog

; 6280 : 
; 6281 : 					if (bHiddenOS)

  0153d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  01542	85 c0		 test	 eax, eax
  01544	74 29		 je	 SHORT $LN352@MainDialog

; 6282 : 					{
; 6283 : 						if (AskWarnNoYes ("HIDDEN_OS_MULTI_BOOT") == IDNO)

  01546	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OEFLIJFC@HIDDEN_OS_MULTI_BOOT?$AA@
  0154b	e8 00 00 00 00	 call	 _AskWarnNoYes
  01550	83 c4 04	 add	 esp, 4
  01553	83 f8 07	 cmp	 eax, 7
  01556	75 17		 jne	 SHORT $LN352@MainDialog

; 6284 : 						{
; 6285 : 							Error ("UNSUPPORTED_HIDDEN_OS_MULTI_BOOT_CFG");

  01558	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@PJBIBHBE@UNSUPPORTED_HIDDEN_OS_MULTI_BOOT@
  0155d	e8 00 00 00 00	 call	 _Error
  01562	83 c4 04	 add	 esp, 4
  01565	b8 01 00 00 00	 mov	 eax, 1
  0156a	e9 39 eb ff ff	 jmp	 $LN517@MainDialog
$LN352@MainDialog:

; 6286 : 							return 1;
; 6287 : 						}
; 6288 : 					}
; 6289 : 				}
; 6290 : 
; 6291 : 				if (bHiddenOS)

  0156f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  01575	85 c9		 test	 ecx, ecx
  01577	0f 84 c1 00 00
	00		 je	 $LN351@MainDialog

; 6292 : 				{
; 6293 : 					if (IsOSAtLeast (WIN_7)
; 6294 : 						&& BootEncObj->GetSystemDriveConfiguration().ExtraBootPartitionPresent
; 6295 : 						&& AskWarnYesNo ("CONFIRM_HIDDEN_OS_EXTRA_BOOT_PARTITION") == IDNO)

  0157d	6a 0d		 push	 13			; 0000000dH
  0157f	e8 00 00 00 00	 call	 _IsOSAtLeast
  01584	83 c4 04	 add	 esp, 4
  01587	85 c0		 test	 eax, eax
  01589	74 38		 je	 SHORT $LN529@MainDialog
  0158b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  01591	8d 95 bc f5 ff
	ff		 lea	 edx, DWORD PTR $T169280[ebp]
  01597	52		 push	 edx
  01598	e8 00 00 00 00	 call	 ?GetSystemDriveConfiguration@BootEncryption@CipherShed@@QAE?AUSystemDriveConfiguration@2@XZ ; CipherShed::BootEncryption::GetSystemDriveConfiguration
  0159d	80 b8 c0 00 00
	00 00		 cmp	 BYTE PTR [eax+192], 0
  015a4	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR $T169386[ebp], 1
  015ab	74 16		 je	 SHORT $LN529@MainDialog
  015ad	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@PDMBGJBN@CONFIRM_HIDDEN_OS_EXTRA_BOOT_PAR@
  015b2	e8 00 00 00 00	 call	 _AskWarnYesNo
  015b7	83 c4 04	 add	 esp, 4
  015ba	c6 45 eb 01	 mov	 BYTE PTR $T169279[ebp], 1
  015be	83 f8 07	 cmp	 eax, 7
  015c1	74 04		 je	 SHORT $LN530@MainDialog
$LN529@MainDialog:
  015c3	c6 45 eb 00	 mov	 BYTE PTR $T169279[ebp], 0
$LN530@MainDialog:
  015c7	f6 45 dc 01	 test	 BYTE PTR $T169386[ebp], 1
  015cb	74 0b		 je	 SHORT $LN601@MainDialog
  015cd	8d 8d bc f5 ff
	ff		 lea	 ecx, DWORD PTR $T169280[ebp]
  015d3	e8 00 00 00 00	 call	 ??1SystemDriveConfiguration@CipherShed@@QAE@XZ
$LN601@MainDialog:
  015d8	80 7d eb 00	 cmp	 BYTE PTR $T169279[ebp], 0
  015dc	74 19		 je	 SHORT $LN350@MainDialog

; 6296 : 					{
; 6297 : 						TextInfoDialogBox (TC_TBXID_EXTRA_BOOT_PARTITION_REMOVAL_INSTRUCTIONS);

  015de	6a 04		 push	 4
  015e0	e8 00 00 00 00	 call	 _TextInfoDialogBox
  015e5	83 c4 04	 add	 esp, 4

; 6298 : 						NormalCursor ();

  015e8	e8 00 00 00 00	 call	 _NormalCursor
  015ed	b8 01 00 00 00	 mov	 eax, 1
  015f2	e9 b1 ea ff ff	 jmp	 $LN517@MainDialog
$LN350@MainDialog:

; 6299 : 						return 1;
; 6300 : 					}
; 6301 : 
; 6302 : 					if (AskWarnYesNo ("DECOY_OS_REQUIREMENTS") == IDNO)

  015f7	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HEENEHGK@DECOY_OS_REQUIREMENTS?$AA@
  015fc	e8 00 00 00 00	 call	 _AskWarnYesNo
  01601	83 c4 04	 add	 esp, 4
  01604	83 f8 07	 cmp	 eax, 7

; 6303 : 					{
; 6304 : 						NormalCursor ();
; 6305 : 						return 1;

  01607	0f 84 d2 2e 00
	00		 je	 $LN431@MainDialog

; 6306 : 					}
; 6307 : 
; 6308 : 					if (!ChangeWizardMode (WIZARD_MODE_NONSYS_DEVICE))

  0160d	be 01 00 00 00	 mov	 esi, 1
  01612	e8 00 00 00 00	 call	 ?ChangeWizardMode@@YAHH@Z ; ChangeWizardMode
  01617	85 c0		 test	 eax, eax

; 6309 : 					{
; 6310 : 						NormalCursor ();
; 6311 : 						return 1;

  01619	0f 84 84 01 00
	00		 je	 $LN1247@MainDialog
$LN348@MainDialog:

; 6312 : 					}
; 6313 : 
; 6314 : 					// Skip irrelevant pages
; 6315 : 					nNewPageNo = HIDDEN_VOL_HOST_PRE_CIPHER_PAGE - 1;

  0161f	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 15 ; 0000000fH

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  01626	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  01629	40		 inc	 eax
  0162a	50		 push	 eax
  0162b	53		 push	 ebx
  0162c	e8 00 00 00 00	 call	 _LoadPage
  01631	83 c4 08	 add	 esp, 8
  01634	b8 01 00 00 00	 mov	 eax, 1
  01639	e9 6a ea ff ff	 jmp	 $LN517@MainDialog
$LN351@MainDialog:

; 6316 : 				}
; 6317 : 				else if (nMultiBoot <= 1)

  0163e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?nMultiBoot@@3HA, 1 ; nMultiBoot
  01645	0f 8f 88 25 00
	00		 jg	 $LN209@MainDialog

; 6318 : 				{
; 6319 : 					// Single-boot (not creating a hidden OS)
; 6320 : 					
; 6321 : 					// Skip irrelevant pages
; 6322 : 					nNewPageNo = CIPHER_PAGE - 1;

  0164b	c7 45 ec 11 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 17 ; 00000011H

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  01652	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  01655	40		 inc	 eax
  01656	50		 push	 eax
  01657	53		 push	 ebx
  01658	e8 00 00 00 00	 call	 _LoadPage
  0165d	83 c4 08	 add	 esp, 8
  01660	b8 01 00 00 00	 mov	 eax, 1
  01665	e9 3e ea ff ff	 jmp	 $LN517@MainDialog
$LN356@MainDialog:

; 6323 : 				}
; 6324 : 			}
; 6325 : 			else if (nCurPageNo == SYSENC_MULTI_BOOT_SYS_EQ_BOOT_PAGE)

  0166a	83 f8 07	 cmp	 eax, 7
  0166d	75 1c		 jne	 SHORT $LN344@MainDialog

; 6326 : 			{
; 6327 : 				SysEncMultiBootCfg.SystemOnBootDrive = Get2RadButtonPageAnswer ();

  0166f	e8 00 00 00 00	 call	 ?Get2RadButtonPageAnswer@@YAHXZ ; Get2RadButtonPageAnswer
  01674	a3 10 00 00 00	 mov	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A+16, eax

; 6328 : 
; 6329 : 				if (!SysEncMultiBootCfg.SystemOnBootDrive)

  01679	85 c0		 test	 eax, eax
  0167b	0f 85 52 25 00
	00		 jne	 $LN209@MainDialog

; 6330 : 				{
; 6331 : 					Error ("SYS_PARTITION_MUST_BE_ON_BOOT_DRIVE");

  01681	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@BLBEBHP@SYS_PARTITION_MUST_BE_ON_BOOT_DR@

; 6332 : 					EndMainDlg (MainDlg);
; 6333 : 					return 1;

  01686	e9 b7 f2 ff ff	 jmp	 $LN1243@MainDialog
$LN344@MainDialog:

; 6334 : 				}
; 6335 : 			}
; 6336 : 			else if (nCurPageNo == SYSENC_MULTI_BOOT_NBR_SYS_DRIVES_PAGE)

  0168b	bf 08 00 00 00	 mov	 edi, 8
  01690	3b c7		 cmp	 eax, edi
  01692	75 5f		 jne	 SHORT $LN341@MainDialog

; 6337 : 			{
; 6338 : 				if (Get2RadButtonPageAnswer () == 0)

  01694	e8 00 00 00 00	 call	 ?Get2RadButtonPageAnswer@@YAHXZ ; Get2RadButtonPageAnswer
  01699	85 c0		 test	 eax, eax
  0169b	75 20		 jne	 SHORT $LN340@MainDialog

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  0169d	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  016a0	40		 inc	 eax
  016a1	50		 push	 eax
  016a2	53		 push	 ebx
  016a3	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A, 2
  016ad	e8 00 00 00 00	 call	 _LoadPage
  016b2	83 c4 08	 add	 esp, 8
  016b5	8d 47 f9	 lea	 eax, DWORD PTR [edi-7]
  016b8	e9 eb e9 ff ff	 jmp	 $LN517@MainDialog
$LN340@MainDialog:

; 6339 : 				{
; 6340 : 					// 2 or more drives contain an OS
; 6341 : 
; 6342 : 					SysEncMultiBootCfg.NumberOfSysDrives = 2;		
; 6343 : 				}
; 6344 : 				else if (Get2RadButtonPageAnswer () == 1)

  016bd	e8 00 00 00 00	 call	 ?Get2RadButtonPageAnswer@@YAHXZ ; Get2RadButtonPageAnswer
  016c2	83 f8 01	 cmp	 eax, 1
  016c5	0f 85 08 25 00
	00		 jne	 $LN209@MainDialog

; 6345 : 				{
; 6346 : 					// Only 1 drive contains an OS
; 6347 : 
; 6348 : 					SysEncMultiBootCfg.NumberOfSysDrives = 1;		
; 6349 : 
; 6350 : 					if (bWholeSysDrive)

  016cb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, 0 ; bWholeSysDrive
  016d2	a3 00 00 00 00	 mov	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A, eax

; 6351 : 					{
; 6352 : 						// Whole-system-drive encryption is currently not supported if the drive contains
; 6353 : 						// more than one system
; 6354 : 						Error ("WDE_UNSUPPORTED_FOR_MULTIPLE_SYSTEMS_ON_ONE_DRIVE");
; 6355 : 						return 1;

  016d7	75 3d		 jne	 SHORT $LN1248@MainDialog

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  016d9	8b c6		 mov	 eax, esi
  016db	40		 inc	 eax
  016dc	50		 push	 eax
  016dd	53		 push	 ebx
  016de	89 75 ec	 mov	 DWORD PTR _nNewPageNo$[ebp], esi
  016e1	e8 00 00 00 00	 call	 _LoadPage
  016e6	83 c4 08	 add	 esp, 8
  016e9	b8 01 00 00 00	 mov	 eax, 1
  016ee	e9 b5 e9 ff ff	 jmp	 $LN517@MainDialog
$LN341@MainDialog:

; 6356 : 					}
; 6357 : 
; 6358 : 					// Ask whether there is a non-Windows boot loader in the MBR
; 6359 : 					nNewPageNo = SYSENC_MULTI_BOOT_NONWIN_BOOT_LOADER_PAGE - 1;
; 6360 : 				}
; 6361 : 			}
; 6362 : 			else if (nCurPageNo == SYSENC_MULTI_BOOT_ADJACENT_SYS_PAGE)

  016f3	3b c6		 cmp	 eax, esi
  016f5	75 36		 jne	 SHORT $LN335@MainDialog

; 6363 : 			{
; 6364 : 				SysEncMultiBootCfg.MultipleSystemsOnDrive = Get2RadButtonPageAnswer ();

  016f7	e8 00 00 00 00	 call	 ?Get2RadButtonPageAnswer@@YAHXZ ; Get2RadButtonPageAnswer
  016fc	a3 04 00 00 00	 mov	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A+4, eax

; 6365 : 
; 6366 : 				if (SysEncMultiBootCfg.MultipleSystemsOnDrive && bWholeSysDrive)

  01701	85 c0		 test	 eax, eax
  01703	0f 84 ca 24 00
	00		 je	 $LN209@MainDialog
  01709	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, 0 ; bWholeSysDrive
  01710	0f 84 bd 24 00
	00		 je	 $LN209@MainDialog
$LN1248@MainDialog:

; 6367 : 				{
; 6368 : 					// Whole-system-drive encryption is currently not supported if the drive contains
; 6369 : 					// more than one system
; 6370 : 					Error ("WDE_UNSUPPORTED_FOR_MULTIPLE_SYSTEMS_ON_ONE_DRIVE");

  01716	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@EAFFGLI@WDE_UNSUPPORTED_FOR_MULTIPLE_SYS@
  0171b	e8 00 00 00 00	 call	 _Error
  01720	83 c4 04	 add	 esp, 4
  01723	b8 01 00 00 00	 mov	 eax, 1
  01728	e9 7b e9 ff ff	 jmp	 $LN517@MainDialog
$LN335@MainDialog:

; 6371 : 					return 1;
; 6372 : 				}
; 6373 : 			}
; 6374 : 
; 6375 : 			else if (nCurPageNo == SYSENC_MULTI_BOOT_NONWIN_BOOT_LOADER_PAGE)

  0172d	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  01730	75 4d		 jne	 SHORT $LN332@MainDialog

; 6376 : 			{
; 6377 : 				SysEncMultiBootCfg.BootLoaderBrand = Get2RadButtonPageAnswer ();

  01732	e8 00 00 00 00	 call	 ?Get2RadButtonPageAnswer@@YAHXZ ; Get2RadButtonPageAnswer
  01737	a3 0c 00 00 00	 mov	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A+12, eax

; 6378 : 
; 6379 : 				if (SysEncMultiBootCfg.BootLoaderBrand)

  0173c	85 c0		 test	 eax, eax
  0173e	74 0a		 je	 SHORT $LN331@MainDialog

; 6380 : 				{
; 6381 : 					// A non-Windows boot manager in the MBR
; 6382 : 					Error ("CUSTOM_BOOT_MANAGERS_IN_MBR_UNSUPPORTED");

  01740	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KANLNDNO@CUSTOM_BOOT_MANAGERS_IN_MBR_UNSU@

; 6383 : 					EndMainDlg (MainDlg);
; 6384 : 					return 1;

  01745	e9 f8 f1 ff ff	 jmp	 $LN1243@MainDialog
$LN331@MainDialog:

; 6385 : 				}
; 6386 : 				else
; 6387 : 				{
; 6388 : 					// Either a standard Windows boot manager or no boot manager
; 6389 : 					wcscpy_s (SysEncMultiBootCfgOutcome, sizeof(SysEncMultiBootCfgOutcome) / 2, GetString ("WINDOWS_BOOT_LOADER_HINTS"));

  0174a	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EHEECKKC@WINDOWS_BOOT_LOADER_HINTS?$AA@
  0174f	e8 00 00 00 00	 call	 _GetString
  01754	50		 push	 eax
  01755	68 00 10 00 00	 push	 4096			; 00001000H
  0175a	68 00 00 00 00	 push	 OFFSET ?SysEncMultiBootCfgOutcome@@3PA_WA ; SysEncMultiBootCfgOutcome
  0175f	e8 00 00 00 00	 call	 _wcscpy_s

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  01764	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  01767	83 c4 10	 add	 esp, 16			; 00000010H
  0176a	40		 inc	 eax
  0176b	50		 push	 eax
  0176c	53		 push	 ebx
  0176d	e8 00 00 00 00	 call	 _LoadPage
  01772	83 c4 08	 add	 esp, 8
  01775	b8 01 00 00 00	 mov	 eax, 1
  0177a	e9 29 e9 ff ff	 jmp	 $LN517@MainDialog
$LN332@MainDialog:

; 6390 : 				}
; 6391 : 			}
; 6392 : 
; 6393 : 			else if (nCurPageNo == SYSENC_MULTI_BOOT_OUTCOME_PAGE)

  0177f	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  01782	75 2b		 jne	 SHORT $LN328@MainDialog

; 6394 : 			{
; 6395 : 				if (bHiddenOS)

  01784	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  01789	85 c0		 test	 eax, eax
  0178b	0f 84 b8 05 00
	00		 je	 $LN281@MainDialog

; 6396 : 				{
; 6397 : 					if (!ChangeWizardMode (WIZARD_MODE_NONSYS_DEVICE))

  01791	be 01 00 00 00	 mov	 esi, 1
  01796	e8 00 00 00 00	 call	 ?ChangeWizardMode@@YAHH@Z ; ChangeWizardMode
  0179b	85 c0		 test	 eax, eax
  0179d	0f 85 7c fe ff
	ff		 jne	 $LN348@MainDialog
$LN1247@MainDialog:

; 6398 : 					{
; 6399 : 						NormalCursor ();

  017a3	e8 00 00 00 00	 call	 _NormalCursor

; 6400 : 						return 1;

  017a8	8b c6		 mov	 eax, esi
  017aa	e9 f9 e8 ff ff	 jmp	 $LN517@MainDialog
$LN328@MainDialog:

; 6401 : 					}
; 6402 : 
; 6403 : 					nNewPageNo = HIDDEN_VOL_HOST_PRE_CIPHER_PAGE - 1;		// Skip irrelevant pages
; 6404 : 				}
; 6405 : 				else
; 6406 : 					nNewPageNo = CIPHER_PAGE - 1;	// Skip irrelevant pages
; 6407 : 			}
; 6408 : 
; 6409 : 			else if (nCurPageNo == VOLUME_TYPE_PAGE)

  017af	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  017b2	0f 85 bc 00 00
	00		 jne	 $LN323@MainDialog

; 6410 : 			{
; 6411 : 				if (IsButtonChecked (GetDlgItem (hCurPage, IDC_HIDDEN_VOL)))

  017b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  017be	68 08 04 00 00	 push	 1032			; 00000408H
  017c3	51		 push	 ecx
  017c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  017ca	50		 push	 eax
  017cb	e8 00 00 00 00	 call	 _IsButtonChecked
  017d0	83 c4 04	 add	 esp, 4
  017d3	85 c0		 test	 eax, eax
  017d5	74 6d		 je	 SHORT $LN322@MainDialog

; 6412 : 				{
; 6413 : 					if (!IsAdmin() && !IsUacSupported ()
; 6414 : 						&& IDNO == MessageBoxW (hwndDlg, GetString ("ADMIN_PRIVILEGES_WARN_HIDVOL"),
; 6415 : 						lpszTitle, MB_ICONWARNING|MB_YESNO|MB_DEFBUTTON2))

  017d7	e8 00 00 00 00	 call	 _IsAdmin
  017dc	85 c0		 test	 eax, eax
  017de	75 33		 jne	 SHORT $LN321@MainDialog
  017e0	e8 00 00 00 00	 call	 _IsUacSupported
  017e5	85 c0		 test	 eax, eax
  017e7	75 2a		 jne	 SHORT $LN321@MainDialog
  017e9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  017ef	68 34 01 00 00	 push	 308			; 00000134H
  017f4	52		 push	 edx
  017f5	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DOPCDKC@ADMIN_PRIVILEGES_WARN_HIDVOL?$AA@
  017fa	e8 00 00 00 00	 call	 _GetString
  017ff	83 c4 04	 add	 esp, 4
  01802	50		 push	 eax
  01803	53		 push	 ebx
  01804	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  0180a	83 f8 07	 cmp	 eax, 7

; 6416 : 					{
; 6417 : 						return 1;

  0180d	0f 84 55 ec ff
	ff		 je	 $LN487@MainDialog
$LN321@MainDialog:

; 6418 : 					}
; 6419 : 					else
; 6420 : 					{
; 6421 : 						bHiddenVol = TRUE;

  01813	b8 01 00 00 00	 mov	 eax, 1
  01818	a3 00 00 00 00	 mov	 DWORD PTR ?bHiddenVol@@3HC, eax ; bHiddenVol

; 6422 : 						bHiddenVolHost = TRUE;

  0181d	a3 00 00 00 00	 mov	 DWORD PTR _bHiddenVolHost, eax

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  01822	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  01825	40		 inc	 eax
  01826	50		 push	 eax
  01827	53		 push	 ebx
  01828	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bInPlaceEncNonSys, 0
  01832	e8 00 00 00 00	 call	 _LoadPage
  01837	83 c4 08	 add	 esp, 8
  0183a	b8 01 00 00 00	 mov	 eax, 1
  0183f	e9 64 e8 ff ff	 jmp	 $LN517@MainDialog
$LN322@MainDialog:

; 6423 : 						bInPlaceEncNonSys = FALSE;
; 6424 : 					}
; 6425 : 				}
; 6426 : 				else
; 6427 : 				{
; 6428 : 					bHiddenVol = FALSE;

  01844	33 c0		 xor	 eax, eax
  01846	a3 00 00 00 00	 mov	 DWORD PTR ?bHiddenVol@@3HC, eax ; bHiddenVol

; 6429 : 					bHiddenVolHost = FALSE;

  0184b	a3 00 00 00 00	 mov	 DWORD PTR _bHiddenVolHost, eax

; 6430 : 					bHiddenVolDirect = FALSE;

  01850	a3 00 00 00 00	 mov	 DWORD PTR _bHiddenVolDirect, eax

; 6431 : 					nNewPageNo = VOLUME_LOCATION_PAGE - 1;		// Skip the hidden volume creation wizard mode selection

  01855	c7 45 ec 0d 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 13 ; 0000000dH

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  0185c	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  0185f	40		 inc	 eax
  01860	50		 push	 eax
  01861	53		 push	 ebx
  01862	e8 00 00 00 00	 call	 _LoadPage
  01867	83 c4 08	 add	 esp, 8
  0186a	b8 01 00 00 00	 mov	 eax, 1
  0186f	e9 34 e8 ff ff	 jmp	 $LN517@MainDialog
$LN323@MainDialog:

; 6432 : 				}
; 6433 : 			}
; 6434 : 
; 6435 : 			else if (nCurPageNo == HIDDEN_VOL_WIZARD_MODE_PAGE)

  01874	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  01877	0f 85 7b 01 00
	00		 jne	 $LN317@MainDialog

; 6436 : 			{
; 6437 : 				if (IsButtonChecked (GetDlgItem (hCurPage, IDC_HIDVOL_WIZ_MODE_DIRECT)))

  0187d	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  01882	68 0c 04 00 00	 push	 1036			; 0000040cH
  01887	50		 push	 eax
  01888	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0188e	50		 push	 eax
  0188f	e8 00 00 00 00	 call	 _IsButtonChecked
  01894	83 c4 04	 add	 esp, 4
  01897	85 c0		 test	 eax, eax
  01899	74 22		 je	 SHORT $LN316@MainDialog

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  0189b	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  0189e	40		 inc	 eax
  0189f	50		 push	 eax
  018a0	53		 push	 ebx
  018a1	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bHiddenVolDirect, 1
  018ab	e8 00 00 00 00	 call	 _LoadPage
  018b0	83 c4 08	 add	 esp, 8
  018b3	b8 01 00 00 00	 mov	 eax, 1
  018b8	e9 eb e7 ff ff	 jmp	 $LN517@MainDialog
$LN316@MainDialog:

; 6438 : 					bHiddenVolDirect = TRUE;
; 6439 : 				else
; 6440 : 				{
; 6441 : 					if (IsHiddenOSRunning())

  018bd	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  018c2	85 c0		 test	 eax, eax
  018c4	0f 84 0c 01 00
	00		 je	 $LN314@MainDialog

; 6442 : 					{
; 6443 : 						WarningDirect ((wstring (GetString ("HIDDEN_VOL_CREATION_UNDER_HIDDEN_OS_HOWTO"))
; 6444 : 							+ L"\n\n"
; 6445 : 							+ GetString ("NOTE_BEGINNING")
; 6446 : 							+ GetString ("HIDDEN_OS_WRITE_PROTECTION_BRIEF_INFO")
; 6447 : 							+ L" "
; 6448 : 							+ GetString ("HIDDEN_OS_WRITE_PROTECTION_EXPLANATION")).c_str());

  018ca	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@NNPIGIED@HIDDEN_VOL_CREATION_UNDER_HIDDEN@
  018cf	e8 00 00 00 00	 call	 _GetString
  018d4	83 c4 04	 add	 esp, 4
  018d7	50		 push	 eax
  018d8	8d 8d 9c fb ff
	ff		 lea	 ecx, DWORD PTR $T169283[ebp]
  018de	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  018e3	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  018e8	50		 push	 eax
  018e9	8d 8d d4 fb ff
	ff		 lea	 ecx, DWORD PTR $T169284[ebp]
  018ef	51		 push	 ecx
  018f0	c7 45 fc 22 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 34 ; 00000022H
  018f7	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  018fc	8b f0		 mov	 esi, eax
  018fe	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JPAMOBPC@NOTE_BEGINNING?$AA@
  01903	c6 45 fc 23	 mov	 BYTE PTR __$EHRec$[ebp+12], 35 ; 00000023H
  01907	e8 00 00 00 00	 call	 _GetString
  0190c	50		 push	 eax
  0190d	8d 95 0c fc ff
	ff		 lea	 edx, DWORD PTR $T169285[ebp]
  01913	56		 push	 esi
  01914	52		 push	 edx
  01915	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0191a	8b f0		 mov	 esi, eax
  0191c	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@LFCLDECM@HIDDEN_OS_WRITE_PROTECTION_BRIEF@
  01921	c6 45 fc 24	 mov	 BYTE PTR __$EHRec$[ebp+12], 36 ; 00000024H
  01925	e8 00 00 00 00	 call	 _GetString
  0192a	50		 push	 eax
  0192b	8d 85 44 fc ff
	ff		 lea	 eax, DWORD PTR $T169286[ebp]
  01931	56		 push	 esi
  01932	50		 push	 eax
  01933	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  01938	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  0193d	50		 push	 eax
  0193e	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR $T169287[ebp]
  01944	51		 push	 ecx
  01945	c6 45 fc 25	 mov	 BYTE PTR __$EHRec$[ebp+12], 37 ; 00000025H
  01949	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0194e	8b f0		 mov	 esi, eax
  01950	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@OILEALFF@HIDDEN_OS_WRITE_PROTECTION_EXPLA@
  01955	c6 45 fc 26	 mov	 BYTE PTR __$EHRec$[ebp+12], 38 ; 00000026H
  01959	e8 00 00 00 00	 call	 _GetString
  0195e	50		 push	 eax
  0195f	8d 95 b4 fc ff
	ff		 lea	 edx, DWORD PTR $T169288[ebp]
  01965	56		 push	 esi
  01966	52		 push	 edx
  01967	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0196c	83 c4 48	 add	 esp, 72			; 00000048H
  0196f	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  01972	72 05		 jb	 SHORT $LN901@MainDialog
  01974	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  01977	eb 03		 jmp	 SHORT $LN902@MainDialog
$LN901@MainDialog:
  01979	83 c0 04	 add	 eax, 4
$LN902@MainDialog:
  0197c	50		 push	 eax
  0197d	e8 00 00 00 00	 call	 _WarningDirect
  01982	83 c4 04	 add	 esp, 4
  01985	8d 8d b4 fc ff
	ff		 lea	 ecx, DWORD PTR $T169288[ebp]
  0198b	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  01990	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR $T169287[ebp]
  01996	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0199b	8d 8d 44 fc ff
	ff		 lea	 ecx, DWORD PTR $T169286[ebp]
  019a1	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  019a6	8d 8d 0c fc ff
	ff		 lea	 ecx, DWORD PTR $T169285[ebp]
  019ac	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  019b1	8d 8d d4 fb ff
	ff		 lea	 ecx, DWORD PTR $T169284[ebp]
  019b7	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  019bc	8d 8d 9c fb ff
	ff		 lea	 ecx, DWORD PTR $T169283[ebp]
  019c2	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN1249@MainDialog:

; 6449 : 						NormalCursor ();

  019c7	e8 00 00 00 00	 call	 _NormalCursor
  019cc	b8 01 00 00 00	 mov	 eax, 1
  019d1	e9 d2 e6 ff ff	 jmp	 $LN517@MainDialog
$LN314@MainDialog:

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  019d6	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  019d9	40		 inc	 eax
  019da	50		 push	 eax
  019db	53		 push	 ebx
  019dc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bHiddenVolDirect, 0
  019e6	e8 00 00 00 00	 call	 _LoadPage
  019eb	83 c4 08	 add	 esp, 8
  019ee	b8 01 00 00 00	 mov	 eax, 1
  019f3	e9 b0 e6 ff ff	 jmp	 $LN517@MainDialog
$LN317@MainDialog:

; 6450 : 						return 1;
; 6451 : 					}
; 6452 : 
; 6453 : 					bHiddenVolDirect = FALSE;
; 6454 : 				}
; 6455 : 			}
; 6456 : 
; 6457 : 			else if (nCurPageNo == VOLUME_LOCATION_PAGE)

  019f8	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  019fb	0f 85 bc 02 00
	00		 jne	 $LN312@MainDialog

; 6458 : 			{
; 6459 : 				BOOL tmpbDevice;
; 6460 : 
; 6461 : 				WaitCursor();

  01a01	e8 00 00 00 00	 call	 _WaitCursor

; 6462 : 
; 6463 : 				GetWindowTextA(GetDlgItem (hCurPage, IDC_COMBO_BOX), szFileName, sizeof (szFileName));

  01a06	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  01a0b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  01a11	68 05 01 00 00	 push	 261			; 00000105H
  01a16	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  01a1b	68 ea 03 00 00	 push	 1002			; 000003eaH
  01a20	50		 push	 eax
  01a21	ff d7		 call	 edi
  01a23	50		 push	 eax
  01a24	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 6464 : 				RelativePath2Absolute (szFileName);

  01a2a	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  01a2f	e8 00 00 00 00	 call	 _RelativePath2Absolute

; 6465 : 				CreateFullVolumePath (szDiskFile, szFileName, &tmpbDevice);

  01a34	8d 4d cc	 lea	 ecx, DWORD PTR _tmpbDevice$134488[ebp]
  01a37	51		 push	 ecx
  01a38	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  01a3d	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  01a42	e8 00 00 00 00	 call	 _CreateFullVolumePath

; 6466 : 
; 6467 : 				if (tmpbDevice != bDevice)

  01a47	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bDevice@@3HA ; bDevice
  01a4c	83 c4 10	 add	 esp, 16			; 00000010H
  01a4f	39 45 cc	 cmp	 DWORD PTR _tmpbDevice$134488[ebp], eax
  01a52	74 4a		 je	 SHORT $LN309@MainDialog

; 6468 : 				{
; 6469 : 					if (bDevice)

  01a54	85 c0		 test	 eax, eax
  01a56	74 1c		 je	 SHORT $LN310@MainDialog

; 6470 : 					{
; 6471 : 						// Not a valid device path
; 6472 : 						Error ("CANNOT_CALC_SPACE");

  01a58	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LBACDGOD@CANNOT_CALC_SPACE?$AA@
  01a5d	e8 00 00 00 00	 call	 _Error
  01a62	83 c4 04	 add	 esp, 4

; 6473 : 						NormalCursor ();

  01a65	e8 00 00 00 00	 call	 _NormalCursor
  01a6a	b8 01 00 00 00	 mov	 eax, 1
  01a6f	e9 34 e6 ff ff	 jmp	 $LN517@MainDialog
$LN310@MainDialog:

; 6474 : 						return 1;
; 6475 : 					}
; 6476 : 					else
; 6477 : 					{
; 6478 : 						if (AskWarnYesNo ("DEVICE_SELECTED_IN_NON_DEVICE_MODE") == IDNO)

  01a74	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@DKKKPMLO@DEVICE_SELECTED_IN_NON_DEVICE_MO@
  01a79	e8 00 00 00 00	 call	 _AskWarnYesNo
  01a7e	83 c4 04	 add	 esp, 4
  01a81	83 f8 07	 cmp	 eax, 7

; 6479 : 						{
; 6480 : 							NormalCursor ();
; 6481 : 							return 1;

  01a84	0f 84 3d ff ff
	ff		 je	 $LN1249@MainDialog

; 6482 : 						}
; 6483 : 
; 6484 : 						SwitchWizardToNonSysDeviceMode ();

  01a8a	e8 00 00 00 00	 call	 ?SwitchWizardToNonSysDeviceMode@@YAXXZ ; SwitchWizardToNonSysDeviceMode

; 6485 : 						NormalCursor ();

  01a8f	e8 00 00 00 00	 call	 _NormalCursor
  01a94	b8 01 00 00 00	 mov	 eax, 1
  01a99	e9 0a e6 ff ff	 jmp	 $LN517@MainDialog
$LN309@MainDialog:

; 6486 : 						return 1;
; 6487 : 					}
; 6488 : 				}
; 6489 : 
; 6490 : 				MoveEditToCombo (GetDlgItem (hCurPage, IDC_COMBO_BOX), bHistory);

  01a9e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHistory
  01aa4	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  01aa9	52		 push	 edx
  01aaa	68 ea 03 00 00	 push	 1002			; 000003eaH
  01aaf	50		 push	 eax
  01ab0	ff d7		 call	 edi
  01ab2	50		 push	 eax
  01ab3	e8 00 00 00 00	 call	 _MoveEditToCombo

; 6491 : 
; 6492 : 				if (IsMountedVolume (szDiskFile))

  01ab8	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  01abd	e8 00 00 00 00	 call	 _IsMountedVolume
  01ac2	83 c4 0c	 add	 esp, 12			; 0000000cH
  01ac5	85 c0		 test	 eax, eax
  01ac7	74 1c		 je	 SHORT $LN307@MainDialog

; 6493 : 				{
; 6494 : 					Error ("ALREADY_MOUNTED");

  01ac9	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ECFGGOBI@ALREADY_MOUNTED?$AA@
  01ace	e8 00 00 00 00	 call	 _Error
  01ad3	83 c4 04	 add	 esp, 4

; 6495 : 					NormalCursor ();

  01ad6	e8 00 00 00 00	 call	 _NormalCursor
  01adb	b8 01 00 00 00	 mov	 eax, 1
  01ae0	e9 c3 e5 ff ff	 jmp	 $LN517@MainDialog
$LN307@MainDialog:

; 6496 : 					return 1;
; 6497 : 				}
; 6498 : 
; 6499 : 				if (bDevice)

  01ae5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  01aec	74 54		 je	 SHORT $LN306@MainDialog

; 6500 : 				{
; 6501 : 					switch (IsSystemDevicePath (szDiskFile, hCurPage, TRUE))

  01aee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  01af4	6a 01		 push	 1
  01af6	51		 push	 ecx
  01af7	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  01afc	e8 00 00 00 00	 call	 _IsSystemDevicePath
  01b01	48		 dec	 eax
  01b02	83 c4 0c	 add	 esp, 12			; 0000000cH
  01b05	83 f8 02	 cmp	 eax, 2
  01b08	77 5f		 ja	 SHORT $LN299@MainDialog

; 6502 : 					{
; 6503 : 					case 1:
; 6504 : 					case 2:
; 6505 : 					case 3:
; 6506 : 						if (AskYesNo ("CONFIRM_SYSTEM_ENCRYPTION_MODE") == IDNO)

  01b0a	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@NCOMIFAB@CONFIRM_SYSTEM_ENCRYPTION_MODE?$AA@
  01b0f	e8 00 00 00 00	 call	 _AskYesNo
  01b14	83 c4 04	 add	 esp, 4
  01b17	83 f8 07	 cmp	 eax, 7

; 6507 : 						{
; 6508 : 							NormalCursor ();
; 6509 : 							return 1;

  01b1a	0f 84 a7 fe ff
	ff		 je	 $LN1249@MainDialog

; 6510 : 						}
; 6511 : 						szFileName[0] = 0;

  01b20	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?szFileName@@3PADA, 0

; 6512 : 						szDiskFile[0] = 0;

  01b27	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?szDiskFile@@3PADA, 0

; 6513 : 						SwitchWizardToSysEncMode ();

  01b2e	e8 00 00 00 00	 call	 _SwitchWizardToSysEncMode

; 6514 : 						NormalCursor ();

  01b33	e8 00 00 00 00	 call	 _NormalCursor
  01b38	b8 01 00 00 00	 mov	 eax, 1
  01b3d	e9 66 e5 ff ff	 jmp	 $LN517@MainDialog
$LN306@MainDialog:

; 6515 : 						return 1;
; 6516 : 
; 6517 : 					case -1:
; 6518 : 						// In some environments (such as PE), the system volume is not located on a hard drive.
; 6519 : 						// Therefore, we must interpret this return code as "Not a system device path" (otherwise,
; 6520 : 						// non-system devices could not be TC-formatted in such environments). Note that this is
; 6521 : 						// rather safe, because bReliableRequired is set to TRUE.
; 6522 : 
; 6523 : 						// NOP
; 6524 : 						break;
; 6525 : 					}
; 6526 : 				}
; 6527 : 				else
; 6528 : 				{
; 6529 : 					if (CheckFileExtension(szFileName) 
; 6530 : 						&& AskWarnNoYes ("EXE_FILE_EXTENSION_CONFIRM") == IDNO)

  01b42	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  01b47	e8 00 00 00 00	 call	 _CheckFileExtension
  01b4c	83 c4 04	 add	 esp, 4
  01b4f	85 c0		 test	 eax, eax
  01b51	74 16		 je	 SHORT $LN299@MainDialog
  01b53	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LHDMMKJO@EXE_FILE_EXTENSION_CONFIRM?$AA@
  01b58	e8 00 00 00 00	 call	 _AskWarnNoYes
  01b5d	83 c4 04	 add	 esp, 4
  01b60	83 f8 07	 cmp	 eax, 7

; 6531 : 					{
; 6532 : 						NormalCursor ();
; 6533 : 						return 1;

  01b63	0f 84 5e fe ff
	ff		 je	 $LN1249@MainDialog
$LN299@MainDialog:

; 6534 : 					}
; 6535 : 				}
; 6536 : 
; 6537 : 				bHistory = !IsButtonChecked (GetDlgItem (hCurPage, IDC_NO_HISTORY));

  01b69	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  01b6f	68 f4 03 00 00	 push	 1012			; 000003f4H
  01b74	52		 push	 edx
  01b75	ff d7		 call	 edi
  01b77	50		 push	 eax
  01b78	e8 00 00 00 00	 call	 _IsButtonChecked

; 6538 : 
; 6539 : 				SaveSettings (hCurPage);

  01b7d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _hCurPage
  01b83	83 c4 04	 add	 esp, 4
  01b86	f7 d8		 neg	 eax
  01b88	1b c0		 sbb	 eax, eax
  01b8a	40		 inc	 eax
  01b8b	a3 00 00 00 00	 mov	 DWORD PTR _bHistory, eax
  01b90	e8 00 00 00 00	 call	 _SaveSettings

; 6540 : 
; 6541 : 				if (bHiddenVolDirect && bHiddenVolHost)

  01b95	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolDirect
  01b9a	85 c0		 test	 eax, eax
  01b9c	0f 84 d4 00 00
	00		 je	 $LN298@MainDialog
  01ba2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  01ba8	85 c9		 test	 ecx, ecx
  01baa	0f 84 c6 00 00
	00		 je	 $LN298@MainDialog

; 6542 : 				{
; 6543 : 					nNewPageNo = HIDDEN_VOL_HOST_PASSWORD_PAGE - 1;
; 6544 : 
; 6545 : 					if (bDevice)

  01bb0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  01bb7	c7 45 ec 13 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 19 ; 00000013H
  01bbe	74 73		 je	 SHORT $LN297@MainDialog

; 6546 : 					{
; 6547 : 						if(!QueryFreeSpace (hwndDlg, GetDlgItem (hwndDlg, IDC_SPACE_LEFT), FALSE))

  01bc0	6a 00		 push	 0
  01bc2	68 f1 03 00 00	 push	 1009			; 000003f1H
  01bc7	53		 push	 ebx
  01bc8	ff d7		 call	 edi
  01bca	50		 push	 eax
  01bcb	53		 push	 ebx
  01bcc	e8 00 00 00 00	 call	 _QueryFreeSpace
  01bd1	83 c4 0c	 add	 esp, 12			; 0000000cH
  01bd4	85 c0		 test	 eax, eax
  01bd6	75 2d		 jne	 SHORT $LN296@MainDialog

; 6548 : 						{
; 6549 : 							MessageBoxW (hwndDlg, GetString ("CANT_GET_VOLSIZE"), lpszTitle, ICON_HAND);

  01bd8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  01bde	6a 10		 push	 16			; 00000010H
  01be0	52		 push	 edx
  01be1	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FNOFFGJI@CANT_GET_VOLSIZE?$AA@
  01be6	e8 00 00 00 00	 call	 _GetString
  01beb	83 c4 04	 add	 esp, 4
  01bee	50		 push	 eax
  01bef	53		 push	 ebx
  01bf0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 6550 : 							NormalCursor ();

  01bf6	e8 00 00 00 00	 call	 _NormalCursor
  01bfb	b8 01 00 00 00	 mov	 eax, 1
  01c00	e9 a3 e4 ff ff	 jmp	 $LN517@MainDialog
$LN296@MainDialog:

; 6551 : 							return 1;
; 6552 : 						}
; 6553 : 						else
; 6554 : 							nHiddenVolHostSize = nVolumeSize;

  01c05	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA
  01c0a	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?nVolumeSize@@3_KA+4
  01c10	a3 00 00 00 00	 mov	 DWORD PTR ?nHiddenVolHostSize@@3_KA, eax

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  01c15	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  01c18	40		 inc	 eax
  01c19	50		 push	 eax
  01c1a	53		 push	 ebx
  01c1b	89 0d 04 00 00
	00		 mov	 DWORD PTR ?nHiddenVolHostSize@@3_KA+4, ecx
  01c21	e8 00 00 00 00	 call	 _LoadPage
  01c26	83 c4 08	 add	 esp, 8
  01c29	b8 01 00 00 00	 mov	 eax, 1
  01c2e	e9 75 e4 ff ff	 jmp	 $LN517@MainDialog
$LN297@MainDialog:

; 6555 : 					}
; 6556 : 					else
; 6557 : 					{
; 6558 : 						if (!GetFileVolSize (hwndDlg, &nHiddenVolHostSize))

  01c33	68 00 00 00 00	 push	 OFFSET ?nHiddenVolHostSize@@3_KA ; nHiddenVolHostSize
  01c38	53		 push	 ebx
  01c39	e8 00 00 00 00	 call	 _GetFileVolSize
  01c3e	83 c4 08	 add	 esp, 8
  01c41	85 c0		 test	 eax, eax

; 6559 : 						{
; 6560 : 							NormalCursor ();
; 6561 : 							return 1;

  01c43	0f 84 7e fd ff
	ff		 je	 $LN1249@MainDialog

; 6562 : 						}
; 6563 : 						else if (IsSparseFile (hwndDlg))

  01c49	53		 push	 ebx
  01c4a	e8 00 00 00 00	 call	 _IsSparseFile
  01c4f	83 c4 04	 add	 esp, 4
  01c52	85 c0		 test	 eax, eax
  01c54	0f 84 79 1f 00
	00		 je	 $LN209@MainDialog

; 6564 : 						{
; 6565 : 							// Hidden volumes must not be created within sparse file containers
; 6566 : 							Warning ("HIDDEN_VOL_HOST_SPARSE");

  01c5a	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BGCKDFKI@HIDDEN_VOL_HOST_SPARSE?$AA@
  01c5f	e8 00 00 00 00	 call	 _Warning
  01c64	83 c4 04	 add	 esp, 4

; 6567 : 							NormalCursor ();

  01c67	e8 00 00 00 00	 call	 _NormalCursor
  01c6c	b8 01 00 00 00	 mov	 eax, 1
  01c71	e9 32 e4 ff ff	 jmp	 $LN517@MainDialog
$LN298@MainDialog:

; 6568 : 							return 1;
; 6569 : 						}
; 6570 : 					}
; 6571 : 				}
; 6572 : 				else
; 6573 : 				{
; 6574 : 					if (!bHiddenVol && !bDevice)

  01c76	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  01c7c	85 d2		 test	 edx, edx
  01c7e	75 0c		 jne	 SHORT $LN289@MainDialog
  01c80	39 15 00 00 00
	00		 cmp	 DWORD PTR ?bDevice@@3HA, edx ; bDevice

; 6575 : 						nNewPageNo = CIPHER_PAGE - 1;

  01c86	0f 84 bd 00 00
	00		 je	 $LN281@MainDialog
$LN289@MainDialog:

; 6576 : 					else if (bHiddenVol)

  01c8c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  01c91	85 c0		 test	 eax, eax
  01c93	0f 84 3a 1f 00
	00		 je	 $LN209@MainDialog

; 6577 : 						nNewPageNo = (bHiddenVolHost ? HIDDEN_VOL_HOST_PRE_CIPHER_PAGE : HIDDEN_VOL_PRE_CIPHER_PAGE) - 1;

  01c99	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  01c9e	f7 d8		 neg	 eax
  01ca0	1b c0		 sbb	 eax, eax
  01ca2	83 c0 10	 add	 eax, 16			; 00000010H
  01ca5	89 45 ec	 mov	 DWORD PTR _nNewPageNo$[ebp], eax

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  01ca8	40		 inc	 eax
  01ca9	50		 push	 eax
  01caa	53		 push	 ebx
  01cab	e8 00 00 00 00	 call	 _LoadPage
  01cb0	83 c4 08	 add	 esp, 8
  01cb3	b8 01 00 00 00	 mov	 eax, 1
  01cb8	e9 eb e3 ff ff	 jmp	 $LN517@MainDialog
$LN312@MainDialog:

; 6578 : 				}
; 6579 : 			}
; 6580 : 
; 6581 : 			else if (nCurPageNo == DEVICE_TRANSFORM_MODE_PAGE)

  01cbd	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  01cc0	75 75		 jne	 SHORT $LN285@MainDialog

; 6582 : 			{
; 6583 : 				if (bInPlaceEncNonSys)

  01cc2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  01cc8	85 c9		 test	 ecx, ecx
  01cca	74 7d		 je	 SHORT $LN281@MainDialog

; 6584 : 				{
; 6585 : 					// Check requirements for non-system in-place encryption
; 6586 : 
; 6587 : 					if (!CheckRequirementsForNonSysInPlaceEnc (szDiskFile, FALSE))

  01ccc	6a 00		 push	 0
  01cce	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  01cd3	e8 00 00 00 00	 call	 _CheckRequirementsForNonSysInPlaceEnc
  01cd8	83 c4 08	 add	 esp, 8
  01cdb	85 c0		 test	 eax, eax

; 6588 : 					{
; 6589 : 						return 1;

  01cdd	0f 84 85 e7 ff
	ff		 je	 $LN487@MainDialog

; 6590 : 					}
; 6591 : 
; 6592 : 					// We are going to skip the Size page so we must get the size here
; 6593 : 					nVolumeSize = GetDeviceSize (szDiskFile);

  01ce3	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  01ce8	e8 00 00 00 00	 call	 _GetDeviceSize
  01ced	a3 00 00 00 00	 mov	 DWORD PTR ?nVolumeSize@@3_KA, eax

; 6594 : 
; 6595 : 					if (nVolumeSize == -1)

  01cf2	23 c2		 and	 eax, edx
  01cf4	83 c4 04	 add	 esp, 4
  01cf7	89 15 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, edx
  01cfd	83 f8 ff	 cmp	 eax, -1
  01d00	75 19		 jne	 SHORT $LN282@MainDialog

; 6596 : 					{
; 6597 : 						handleWin32Error (MainDlg);

  01d02	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  01d08	52		 push	 edx
  01d09	e8 00 00 00 00	 call	 _handleWin32Error
  01d0e	83 c4 04	 add	 esp, 4
  01d11	b8 01 00 00 00	 mov	 eax, 1
  01d16	e9 8d e3 ff ff	 jmp	 $LN517@MainDialog
$LN282@MainDialog:

; 6598 : 						return 1;
; 6599 : 					}
; 6600 : 
; 6601 : 					if (AskWarnYesNo ("NONSYS_INPLACE_ENC_CONFIRM_BACKUP") == IDNO)

  01d1b	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@NCAFIIDC@NONSYS_INPLACE_ENC_CONFIRM_BACKU@
  01d20	e8 00 00 00 00	 call	 _AskWarnYesNo
  01d25	83 c4 04	 add	 esp, 4
  01d28	83 f8 07	 cmp	 eax, 7
  01d2b	75 1c		 jne	 SHORT $LN281@MainDialog

; 5749 : 						return 1;

  01d2d	b8 01 00 00 00	 mov	 eax, 1
  01d32	e9 71 e3 ff ff	 jmp	 $LN517@MainDialog
$LN285@MainDialog:

; 6602 : 						return 1;
; 6603 : 				}
; 6604 : 				nNewPageNo = CIPHER_PAGE - 1;
; 6605 : 			}
; 6606 : 
; 6607 : 			else if (nCurPageNo == HIDDEN_VOL_HOST_PRE_CIPHER_PAGE)

  01d37	83 f8 10	 cmp	 eax, 16			; 00000010H
  01d3a	75 2c		 jne	 SHORT $LN279@MainDialog

; 6608 : 			{
; 6609 : 				if (bHiddenVolHost)

  01d3c	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  01d41	85 c0		 test	 eax, eax
  01d43	0f 84 8a 1e 00
	00		 je	 $LN209@MainDialog
$LN281@MainDialog:

; 6610 : 					nNewPageNo = CIPHER_PAGE - 1;		// Skip the info on the hiddem volume

  01d49	c7 45 ec 11 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 17 ; 00000011H

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  01d50	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  01d53	40		 inc	 eax
  01d54	50		 push	 eax
  01d55	53		 push	 ebx
  01d56	e8 00 00 00 00	 call	 _LoadPage
  01d5b	83 c4 08	 add	 esp, 8
  01d5e	b8 01 00 00 00	 mov	 eax, 1
  01d63	e9 40 e3 ff ff	 jmp	 $LN517@MainDialog
$LN279@MainDialog:

; 6611 : 			}
; 6612 : 
; 6613 : 			else if (nCurPageNo == CIPHER_PAGE)

  01d68	83 f8 12	 cmp	 eax, 18			; 00000012H
  01d6b	0f 85 03 01 00
	00		 jne	 $LN276@MainDialog

; 6614 : 			{
; 6615 : 				LPARAM nIndex;
; 6616 : 				nIndex = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX), CB_GETCURSEL, 0, 0);

  01d71	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  01d77	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  01d7d	6a 00		 push	 0
  01d7f	6a 00		 push	 0
  01d81	68 47 01 00 00	 push	 327			; 00000147H
  01d86	68 ea 03 00 00	 push	 1002			; 000003eaH
  01d8b	51		 push	 ecx
  01d8c	ff d6		 call	 esi
  01d8e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  01d94	50		 push	 eax
  01d95	ff d7		 call	 edi

; 6617 : 				nVolumeEA = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX), CB_GETITEMDATA, nIndex, 0);

  01d97	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  01d9d	6a 00		 push	 0
  01d9f	50		 push	 eax
  01da0	68 50 01 00 00	 push	 336			; 00000150H
  01da5	68 ea 03 00 00	 push	 1002			; 000003eaH
  01daa	52		 push	 edx
  01dab	ff d6		 call	 esi
  01dad	50		 push	 eax
  01dae	ff d7		 call	 edi
  01db0	a3 00 00 00 00	 mov	 DWORD PTR ?nVolumeEA@@3HA, eax ; nVolumeEA

; 6618 : 
; 6619 : 				if (SysEncInEffect ()
; 6620 : 					&& EAGetCipherCount (nVolumeEA) > 1)		// Cascade?

  01db5	e8 00 00 00 00	 call	 _SysEncInEffect
  01dba	85 c0		 test	 eax, eax
  01dbc	74 40		 je	 SHORT $LN273@MainDialog
  01dbe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nVolumeEA@@3HA ; nVolumeEA
  01dc3	50		 push	 eax
  01dc4	e8 00 00 00 00	 call	 _EAGetCipherCount
  01dc9	83 c4 04	 add	 esp, 4
  01dcc	83 f8 01	 cmp	 eax, 1
  01dcf	7e 2d		 jle	 SHORT $LN273@MainDialog

; 6621 : 				{
; 6622 : 					if (AskWarnNoYes ("CONFIRM_CASCADE_FOR_SYS_ENCRYPTION") == IDNO)

  01dd1	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@HEIAMGDN@CONFIRM_CASCADE_FOR_SYS_ENCRYPTI@
  01dd6	e8 00 00 00 00	 call	 _AskWarnNoYes
  01ddb	83 c4 04	 add	 esp, 4
  01dde	83 f8 07	 cmp	 eax, 7

; 6623 : 						return 1;

  01de1	0f 84 81 e6 ff
	ff		 je	 $LN487@MainDialog

; 6624 : 
; 6625 : 					if (!bHiddenOS)

  01de7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  01ded	85 c9		 test	 ecx, ecx
  01def	75 0d		 jne	 SHORT $LN273@MainDialog

; 6626 : 						Info ("NOTE_CASCADE_FOR_SYS_ENCRYPTION");

  01df1	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HENDJLLF@NOTE_CASCADE_FOR_SYS_ENCRYPTION?$AA@
  01df6	e8 00 00 00 00	 call	 _Info
  01dfb	83 c4 04	 add	 esp, 4
$LN273@MainDialog:

; 6627 : 				}
; 6628 : 
; 6629 : 				nIndex = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX_HASH_ALGO), CB_GETCURSEL, 0, 0);

  01dfe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  01e04	6a 00		 push	 0
  01e06	6a 00		 push	 0
  01e08	68 47 01 00 00	 push	 327			; 00000147H
  01e0d	68 f0 03 00 00	 push	 1008			; 000003f0H
  01e12	52		 push	 edx
  01e13	ff d6		 call	 esi
  01e15	50		 push	 eax
  01e16	ff d7		 call	 edi

; 6630 : 				hash_algo = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX_HASH_ALGO), CB_GETITEMDATA, nIndex, 0);

  01e18	6a 00		 push	 0
  01e1a	50		 push	 eax
  01e1b	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  01e20	68 50 01 00 00	 push	 336			; 00000150H
  01e25	68 f0 03 00 00	 push	 1008			; 000003f0H
  01e2a	50		 push	 eax
  01e2b	ff d6		 call	 esi
  01e2d	50		 push	 eax
  01e2e	ff d7		 call	 edi

; 6631 : 
; 6632 : 				RandSetHashFunction (hash_algo);

  01e30	50		 push	 eax
  01e31	a3 00 00 00 00	 mov	 DWORD PTR ?hash_algo@@3HA, eax ; hash_algo
  01e36	e8 00 00 00 00	 call	 _RandSetHashFunction
  01e3b	83 c4 04	 add	 esp, 4

; 6633 : 
; 6634 : 				if (SysEncInEffect () || bInPlaceEncNonSys)

  01e3e	e8 00 00 00 00	 call	 _SysEncInEffect
  01e43	85 c0		 test	 eax, eax
  01e45	75 0e		 jne	 SHORT $LN271@MainDialog
  01e47	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  01e4d	85 c9		 test	 ecx, ecx
  01e4f	0f 84 7e 1d 00
	00		 je	 $LN209@MainDialog
$LN271@MainDialog:

; 6635 : 					nNewPageNo = PASSWORD_PAGE - 1;			// Skip irrelevant pages

  01e55	c7 45 ec 14 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 20 ; 00000014H

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  01e5c	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  01e5f	40		 inc	 eax
  01e60	50		 push	 eax
  01e61	53		 push	 ebx
  01e62	e8 00 00 00 00	 call	 _LoadPage
  01e67	83 c4 08	 add	 esp, 8
  01e6a	b8 01 00 00 00	 mov	 eax, 1
  01e6f	e9 34 e2 ff ff	 jmp	 $LN517@MainDialog
$LN276@MainDialog:

; 6636 : 			}
; 6637 : 
; 6638 : 			else if (nCurPageNo == SIZE_PAGE)

  01e74	83 f8 13	 cmp	 eax, 19			; 00000013H
  01e77	0f 85 ca 01 00
	00		 jne	 $LN269@MainDialog

; 6639 : 			{
; 6640 : 				char szFileSystemNameBuffer[256];
; 6641 : 
; 6642 : 				VerifySizeAndUpdate (hCurPage, TRUE);

  01e7d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  01e83	6a 01		 push	 1
  01e85	e8 00 00 00 00	 call	 _VerifySizeAndUpdate
  01e8a	83 c4 04	 add	 esp, 4

; 6643 : 
; 6644 : 				if (!bDevice)

  01e8d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDevice@@3HA, 0 ; bDevice
  01e94	0f 85 e1 00 00
	00		 jne	 $LN265@MainDialog

; 6645 : 				{
; 6646 : 					/* Verify that the volume would not be too large for the host file system */
; 6647 : 
; 6648 : 					char root[TC_MAX_PATH];
; 6649 : 
; 6650 : 					if (GetVolumePathName (szDiskFile, root, sizeof (root))
; 6651 : 						&& GetVolumeInformation (root, NULL, 0, NULL, NULL, NULL, szFileSystemNameBuffer, sizeof(szFileSystemNameBuffer))
; 6652 : 						&& !strncmp (szFileSystemNameBuffer, "FAT32", 5))

  01e9a	68 04 01 00 00	 push	 260			; 00000104H
  01e9f	8d 95 88 c3 00
	00		 lea	 edx, DWORD PTR _root$134545[ebp]
  01ea5	52		 push	 edx
  01ea6	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  01eab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumePathNameA@12
  01eb1	85 c0		 test	 eax, eax
  01eb3	0f 84 7e 00 00
	00		 je	 $LN266@MainDialog
  01eb9	68 00 01 00 00	 push	 256			; 00000100H
  01ebe	8d 85 8c c4 00
	00		 lea	 eax, DWORD PTR _szFileSystemNameBuffer$134543[ebp]
  01ec4	50		 push	 eax
  01ec5	6a 00		 push	 0
  01ec7	6a 00		 push	 0
  01ec9	6a 00		 push	 0
  01ecb	6a 00		 push	 0
  01ecd	6a 00		 push	 0
  01ecf	8d 8d 88 c3 00
	00		 lea	 ecx, DWORD PTR _root$134545[ebp]
  01ed5	51		 push	 ecx
  01ed6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumeInformationA@32
  01edc	85 c0		 test	 eax, eax
  01ede	74 57		 je	 SHORT $LN266@MainDialog
  01ee0	6a 05		 push	 5
  01ee2	8d 95 8c c4 00
	00		 lea	 edx, DWORD PTR _szFileSystemNameBuffer$134543[ebp]
  01ee8	68 00 00 00 00	 push	 OFFSET ??_C@_05HNJNFBJJ@FAT32?$AA@
  01eed	52		 push	 edx
  01eee	e8 00 00 00 00	 call	 _strncmp
  01ef3	83 c4 0c	 add	 esp, 12			; 0000000cH
  01ef6	85 c0		 test	 eax, eax
  01ef8	75 3d		 jne	 SHORT $LN266@MainDialog

; 6653 : 					{
; 6654 : 						// The host file system is FAT32
; 6655 : 						if (nUIVolumeSize * nMultiplier >= 4 * BYTES_PER_GB)

  01efa	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?nUIVolumeSize@@3_KA+4
  01f00	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nMultiplier@@3HA ; nMultiplier
  01f05	51		 push	 ecx
  01f06	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nUIVolumeSize@@3_KA
  01f0c	99		 cdq
  01f0d	51		 push	 ecx
  01f0e	52		 push	 edx
  01f0f	50		 push	 eax
  01f10	e8 00 00 00 00	 call	 __allmul
  01f15	83 fa 01	 cmp	 edx, 1
  01f18	72 1d		 jb	 SHORT $LN266@MainDialog
  01f1a	77 04		 ja	 SHORT $LN1154@MainDialog
  01f1c	85 c0		 test	 eax, eax
  01f1e	72 17		 jb	 SHORT $LN266@MainDialog
$LN1154@MainDialog:

; 6656 : 						{
; 6657 : 							Error ("VOLUME_TOO_LARGE_FOR_FAT32");

  01f20	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@FEGMEEPN@VOLUME_TOO_LARGE_FOR_FAT32?$AA@
  01f25	e8 00 00 00 00	 call	 _Error
  01f2a	83 c4 04	 add	 esp, 4
  01f2d	b8 01 00 00 00	 mov	 eax, 1
  01f32	e9 71 e1 ff ff	 jmp	 $LN517@MainDialog
$LN266@MainDialog:

; 6658 : 							return 1;
; 6659 : 						}
; 6660 : 					}
; 6661 : 
; 6662 : 					/* Verify that the volume would not be too large for the operating system */
; 6663 : 
; 6664 : 					if (!IsOSAtLeast (WIN_VISTA)
; 6665 : 						&& nUIVolumeSize * nMultiplier > 2 * BYTES_PER_TB)

  01f37	6a 0b		 push	 11			; 0000000bH
  01f39	e8 00 00 00 00	 call	 _IsOSAtLeast
  01f3e	83 c4 04	 add	 esp, 4
  01f41	85 c0		 test	 eax, eax
  01f43	75 36		 jne	 SHORT $LN265@MainDialog
  01f45	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?nUIVolumeSize@@3_KA+4
  01f4b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nMultiplier@@3HA ; nMultiplier
  01f50	51		 push	 ecx
  01f51	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nUIVolumeSize@@3_KA
  01f57	99		 cdq
  01f58	51		 push	 ecx
  01f59	52		 push	 edx
  01f5a	50		 push	 eax
  01f5b	e8 00 00 00 00	 call	 __allmul
  01f60	81 fa 00 02 00
	00		 cmp	 edx, 512		; 00000200H
  01f66	72 13		 jb	 SHORT $LN265@MainDialog
  01f68	77 04		 ja	 SHORT $LN1155@MainDialog
  01f6a	85 c0		 test	 eax, eax
  01f6c	76 0d		 jbe	 SHORT $LN265@MainDialog
$LN1155@MainDialog:

; 6666 : 					{
; 6667 : 						Warning ("VOLUME_TOO_LARGE_FOR_WINXP");

  01f6e	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@IAHLEEBN@VOLUME_TOO_LARGE_FOR_WINXP?$AA@
  01f73	e8 00 00 00 00	 call	 _Warning
  01f78	83 c4 04	 add	 esp, 4
$LN265@MainDialog:

; 6668 : 					}
; 6669 : 				}
; 6670 : 
; 6671 : 				if (bHiddenVol && !bHiddenVolHost)	// If it's a hidden volume

  01f7b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  01f81	85 d2		 test	 edx, edx
  01f83	0f 84 87 00 00
	00		 je	 $LN262@MainDialog
  01f89	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHiddenVolHost
  01f8e	85 c0		 test	 eax, eax
  01f90	0f 85 7a 00 00
	00		 jne	 $LN262@MainDialog

; 6672 : 				{
; 6673 : 					/* Ask for confirmation if the hidden volume is too large for the user to be
; 6674 : 					able to write much more data to the outer volume. */
; 6675 : 
; 6676 : 					if (((double) nUIVolumeSize / (nMaximumHiddenVolSize / nMultiplier)) > 0.85)	// 85%

  01f96	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nUIVolumeSize@@3_KA
  01f9c	a1 04 00 00 00	 mov	 eax, DWORD PTR ?nUIVolumeSize@@3_KA+4
  01fa1	89 4d d0	 mov	 DWORD PTR tv6063[ebp], ecx
  01fa4	8b c8		 mov	 ecx, eax
  01fa6	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  01fab	89 45 d4	 mov	 DWORD PTR tv6063[ebp+4], eax
  01fae	df 6d d0	 fild	 QWORD PTR tv6063[ebp]
  01fb1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nMultiplier@@3HA ; nMultiplier
  01fb6	99		 cdq
  01fb7	52		 push	 edx
  01fb8	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?nMaximumHiddenVolSize@@3_JA+4
  01fbe	81 e1 00 00 00
	80		 and	 ecx, -2147483648	; 80000000H
  01fc4	89 4d d4	 mov	 DWORD PTR tv6060[ebp+4], ecx
  01fc7	50		 push	 eax
  01fc8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nMaximumHiddenVolSize@@3_JA
  01fcd	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv6060[ebp], 0
  01fd4	df 6d d0	 fild	 QWORD PTR tv6060[ebp]
  01fd7	52		 push	 edx
  01fd8	50		 push	 eax
  01fd9	d9 e0		 fchs
  01fdb	de c1		 faddp	 ST(1), ST(0)
  01fdd	e8 00 00 00 00	 call	 __alldiv
  01fe2	89 45 d0	 mov	 DWORD PTR tv6034[ebp], eax
  01fe5	89 55 d4	 mov	 DWORD PTR tv6034[ebp+4], edx
  01fe8	df 6d d0	 fild	 QWORD PTR tv6034[ebp]
  01feb	de f9		 fdivp	 ST(1), ST(0)
  01fed	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3feb333333333333
  01ff3	df e0		 fnstsw	 ax
  01ff5	f6 c4 41	 test	 ah, 65			; 00000041H
  01ff8	75 16		 jne	 SHORT $LN262@MainDialog

; 6677 : 					{
; 6678 : 						if (AskWarnNoYes ("FREE_SPACE_FOR_WRITING_TO_OUTER_VOLUME") == IDNO)

  01ffa	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@NJLIGNCF@FREE_SPACE_FOR_WRITING_TO_OUTER_@
  01fff	e8 00 00 00 00	 call	 _AskWarnNoYes
  02004	83 c4 04	 add	 esp, 4
  02007	83 f8 07	 cmp	 eax, 7

; 6679 : 							return 1;

  0200a	0f 84 58 e4 ff
	ff		 je	 $LN487@MainDialog
$LN262@MainDialog:

; 6680 : 					}
; 6681 : 				}
; 6682 : 
; 6683 : 				if (!(bHiddenVolDirect && bHiddenVolHost))

  02010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolDirect
  02016	85 c9		 test	 ecx, ecx
  02018	74 0e		 je	 SHORT $LN260@MainDialog
  0201a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  02020	85 d2		 test	 edx, edx
  02022	0f 85 ab 1b 00
	00		 jne	 $LN209@MainDialog
$LN260@MainDialog:

; 6684 : 					nNewPageNo = PASSWORD_PAGE - 1;

  02028	c7 45 ec 14 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 20 ; 00000014H

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  0202f	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  02032	40		 inc	 eax
  02033	50		 push	 eax
  02034	53		 push	 ebx
  02035	e8 00 00 00 00	 call	 _LoadPage
  0203a	83 c4 08	 add	 esp, 8
  0203d	b8 01 00 00 00	 mov	 eax, 1
  02042	e9 61 e0 ff ff	 jmp	 $LN517@MainDialog
$LN269@MainDialog:

; 6685 : 			}
; 6686 : 
; 6687 : 			else if (nCurPageNo == PASSWORD_PAGE)

  02047	83 f8 15	 cmp	 eax, 21			; 00000015H
  0204a	0f 85 f1 01 00
	00		 jne	 $LN258@MainDialog

; 6688 : 			{
; 6689 : 				VerifyPasswordAndUpdate2(hwndDlg, GetDlgItem (MainDlg, IDC_NEXT),
; 6690 : 					GetDlgItem (hCurPage, IDC_PASSWORD),
; 6691 : 					GetDlgItem (hCurPage, IDC_VERIFY),
; 6692 : 					volumePassword.Text, sizeof(volumePassword.Text),
; 6693 : 					szTmpPas, sizeof(szTmpPas),
; 6694 : 					KeyFilesEnable && FirstKeyFile!=NULL && !SysEncInEffect());

  02050	39 0d 00 00 00
	00		 cmp	 DWORD PTR _KeyFilesEnable, ecx
  02056	74 18		 je	 SHORT $LN531@MainDialog
  02058	39 0d 00 00 00
	00		 cmp	 DWORD PTR _FirstKeyFile, ecx
  0205e	74 10		 je	 SHORT $LN531@MainDialog
  02060	e8 00 00 00 00	 call	 _SysEncInEffect
  02065	85 c0		 test	 eax, eax
  02067	75 07		 jne	 SHORT $LN531@MainDialog
  02069	b8 01 00 00 00	 mov	 eax, 1
  0206e	eb 02		 jmp	 SHORT $LN532@MainDialog
$LN531@MainDialog:
  02070	33 c0		 xor	 eax, eax
$LN532@MainDialog:
  02072	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  02078	50		 push	 eax
  02079	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0207e	6a 41		 push	 65			; 00000041H
  02080	68 00 00 00 00	 push	 OFFSET ?szTmpPas@@3PADA	; szTmpPas
  02085	6a 41		 push	 65			; 00000041H
  02087	68 04 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A+4
  0208c	68 f2 03 00 00	 push	 1010			; 000003f2H
  02091	50		 push	 eax
  02092	ff d6		 call	 esi
  02094	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  0209a	50		 push	 eax
  0209b	68 ec 03 00 00	 push	 1004			; 000003ecH
  020a0	51		 push	 ecx
  020a1	ff d6		 call	 esi
  020a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  020a9	50		 push	 eax
  020aa	68 10 04 00 00	 push	 1040			; 00000410H
  020af	52		 push	 edx
  020b0	ff d6		 call	 esi
  020b2	50		 push	 eax
  020b3	53		 push	 ebx
  020b4	e8 00 00 00 00	 call	 _VerifyPasswordAndUpdate2

; 6695 : 
; 6696 : 				volumePassword.Length = strlen ((char *) volumePassword.Text);

  020b9	b8 04 00 00 00	 mov	 eax, OFFSET ?volumePassword@@3UPassword@@A+4
  020be	83 c4 24	 add	 esp, 36			; 00000024H
  020c1	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL1156@MainDialog:
  020c4	8a 08		 mov	 cl, BYTE PTR [eax]
  020c6	40		 inc	 eax
  020c7	84 c9		 test	 cl, cl
  020c9	75 f9		 jne	 SHORT $LL1156@MainDialog
  020cb	2b c2		 sub	 eax, edx
  020cd	a3 00 00 00 00	 mov	 DWORD PTR ?volumePassword@@3UPassword@@A, eax

; 6697 : 
; 6698 : 				if (volumePassword.Length > 0)

  020d2	74 6b		 je	 SHORT $LN254@MainDialog

; 6699 : 				{
; 6700 : 					// Password character encoding
; 6701 : 					if (!CheckPasswordCharEncoding (GetDlgItem (hCurPage, IDC_PASSWORD), NULL))

  020d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  020d9	6a 00		 push	 0
  020db	68 ec 03 00 00	 push	 1004			; 000003ecH
  020e0	50		 push	 eax
  020e1	ff d6		 call	 esi
  020e3	50		 push	 eax
  020e4	e8 00 00 00 00	 call	 _CheckPasswordCharEncoding
  020e9	83 c4 08	 add	 esp, 8
  020ec	85 c0		 test	 eax, eax
  020ee	75 17		 jne	 SHORT $LN256@MainDialog

; 6702 : 					{
; 6703 : 						Error ("UNSUPPORTED_CHARS_IN_PWD");

  020f0	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@CPHEENHA@UNSUPPORTED_CHARS_IN_PWD?$AA@
  020f5	e8 00 00 00 00	 call	 _Error
  020fa	83 c4 04	 add	 esp, 4
  020fd	b8 01 00 00 00	 mov	 eax, 1
  02102	e9 a1 df ff ff	 jmp	 $LN517@MainDialog
$LN256@MainDialog:

; 6704 : 						return 1;
; 6705 : 					}
; 6706 : 					// Check password length (do not check if it's for an outer volume).
; 6707 : 					else if (!bHiddenVolHost
; 6708 : 						&& !CheckPasswordLengthAlertTitle (hwndDlg, GetString("PASSWORD_LENGTH_WARNING_TITLE"), GetDlgItem (hCurPage, IDC_PASSWORD)))

  02107	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  0210d	85 c9		 test	 ecx, ecx
  0210f	75 2e		 jne	 SHORT $LN254@MainDialog
  02111	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  02117	68 ec 03 00 00	 push	 1004			; 000003ecH
  0211c	52		 push	 edx
  0211d	ff d6		 call	 esi
  0211f	50		 push	 eax
  02120	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@LHABIPI@PASSWORD_LENGTH_WARNING_TITLE?$AA@
  02125	e8 00 00 00 00	 call	 _GetString
  0212a	83 c4 04	 add	 esp, 4
  0212d	50		 push	 eax
  0212e	53		 push	 ebx
  0212f	e8 00 00 00 00	 call	 _CheckPasswordLengthAlertTitle
  02134	83 c4 0c	 add	 esp, 12			; 0000000cH
  02137	85 c0		 test	 eax, eax

; 6709 : 					{
; 6710 : 						return 1;

  02139	0f 84 29 e3 ff
	ff		 je	 $LN487@MainDialog
$LN254@MainDialog:

; 6711 : 					}
; 6712 : 				}
; 6713 : 
; 6714 : 				// Store the password in case we need to restore it after keyfile is applied to it
; 6715 : 				GetWindowTextW(GetDlgItem (hCurPage, IDC_PASSWORD), szRawPassword, sizeof (szRawPassword)/sizeof(*szRawPassword));

  0213f	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  02144	6a 41		 push	 65			; 00000041H
  02146	68 00 00 00 00	 push	 OFFSET ?szRawPassword@@3PA_WA ; szRawPassword
  0214b	68 ec 03 00 00	 push	 1004			; 000003ecH
  02150	50		 push	 eax
  02151	ff d6		 call	 esi
  02153	50		 push	 eax
  02154	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextW@12

; 6716 : 
; 6717 : 				if (!SysEncInEffect ()) 

  0215a	e8 00 00 00 00	 call	 _SysEncInEffect
  0215f	85 c0		 test	 eax, eax
  02161	75 30		 jne	 SHORT $LN253@MainDialog

; 6718 : 				{
; 6719 : 					if (KeyFilesEnable)

  02163	39 05 00 00 00
	00		 cmp	 DWORD PTR _KeyFilesEnable, eax
  02169	74 6e		 je	 SHORT $LN250@MainDialog

; 6720 : 					{
; 6721 : 						WaitCursor ();

  0216b	e8 00 00 00 00	 call	 _WaitCursor

; 6722 : 
; 6723 : 						if (!KeyFilesApply (&volumePassword, FirstKeyFile))

  02170	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _FirstKeyFile
  02176	51		 push	 ecx
  02177	68 00 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A ; volumePassword
  0217c	e8 00 00 00 00	 call	 _KeyFilesApply
  02181	83 c4 08	 add	 esp, 8
  02184	85 c0		 test	 eax, eax

; 6724 : 						{
; 6725 : 							NormalCursor ();
; 6726 : 							return 1;

  02186	0f 84 3b f8 ff
	ff		 je	 $LN1249@MainDialog

; 6727 : 						}
; 6728 : 
; 6729 : 						NormalCursor ();

  0218c	e8 00 00 00 00	 call	 _NormalCursor

; 6730 : 					}
; 6731 : 
; 6732 : 				}
; 6733 : 				else

  02191	eb 46		 jmp	 SHORT $LN250@MainDialog
$LN253@MainDialog:

; 6734 : 				{
; 6735 : 					KillTimer (hwndDlg, TIMER_ID_KEYB_LAYOUT_GUARD);

  02193	68 04 01 00 00	 push	 260			; 00000104H
  02198	53		 push	 ebx
  02199	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 6736 : 
; 6737 : 					if (bKeyboardLayoutChanged)

  0219f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bKeyboardLayoutChanged@@3HA, 0 ; bKeyboardLayoutChanged
  021a6	74 2a		 je	 SHORT $LN247@MainDialog

; 6738 : 					{
; 6739 : 						// Restore the original keyboard layout
; 6740 : 						if (LoadKeyboardLayout (OrigKeyboardLayout, KLF_ACTIVATE | KLF_SUBSTITUTE_OK) == NULL) 

  021a8	6a 03		 push	 3
  021aa	68 00 00 00 00	 push	 OFFSET ?OrigKeyboardLayout@@3PADA ; OrigKeyboardLayout
  021af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadKeyboardLayoutA@8
  021b5	85 c0		 test	 eax, eax
  021b7	75 0f		 jne	 SHORT $LN248@MainDialog

; 6741 : 							Warning ("CANNOT_RESTORE_KEYBOARD_LAYOUT");

  021b9	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@BGCHIACG@CANNOT_RESTORE_KEYBOARD_LAYOUT?$AA@
  021be	e8 00 00 00 00	 call	 _Warning
  021c3	83 c4 04	 add	 esp, 4

; 6742 : 						else

  021c6	eb 0a		 jmp	 SHORT $LN247@MainDialog
$LN248@MainDialog:

; 6743 : 							bKeyboardLayoutChanged = FALSE;

  021c8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bKeyboardLayoutChanged@@3HA, 0 ; bKeyboardLayoutChanged
$LN247@MainDialog:

; 6744 : 					}
; 6745 : 
; 6746 : 					nNewPageNo = SYSENC_COLLECTING_RANDOM_DATA_PAGE - 1;	// Skip irrelevant pages

  021d2	c7 45 ec 16 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 22 ; 00000016H
$LN250@MainDialog:

; 6747 : 				}
; 6748 : 
; 6749 : 				if (bInPlaceEncNonSys)

  021d9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  021df	85 d2		 test	 edx, edx
  021e1	74 1f		 je	 SHORT $LN246@MainDialog

; 6750 : 				{
; 6751 : 					nNewPageNo = NONSYS_INPLACE_ENC_RAND_DATA_PAGE - 1;		// Skip irrelevant pages

  021e3	c7 45 ec 21 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 33 ; 00000021H

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  021ea	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  021ed	40		 inc	 eax
  021ee	50		 push	 eax
  021ef	53		 push	 ebx
  021f0	e8 00 00 00 00	 call	 _LoadPage
  021f5	83 c4 08	 add	 esp, 8
  021f8	b8 01 00 00 00	 mov	 eax, 1
  021fd	e9 a6 de ff ff	 jmp	 $LN517@MainDialog
$LN246@MainDialog:

; 6752 : 				}
; 6753 : 				else if (WizardMode != WIZARD_MODE_SYS_DEVICE
; 6754 : 					&& !FileSize4GBLimitQuestionNeeded () 
; 6755 : 					|| CreatingHiddenSysVol())		// If we're creating a hidden volume for a hidden OS, we don't need to format it with any filesystem (the entire OS will be copied to the hidden volume sector by sector).

  02202	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  02207	83 f8 02	 cmp	 eax, 2
  0220a	74 09		 je	 SHORT $LN242@MainDialog
  0220c	e8 00 00 00 00	 call	 ?FileSize4GBLimitQuestionNeeded@@YAHXZ ; FileSize4GBLimitQuestionNeeded
  02211	85 c0		 test	 eax, eax
  02213	74 0d		 je	 SHORT $LN243@MainDialog
$LN242@MainDialog:
  02215	e8 00 00 00 00	 call	 _CreatingHiddenSysVol
  0221a	85 c0		 test	 eax, eax
  0221c	0f 84 b1 19 00
	00		 je	 $LN209@MainDialog
$LN243@MainDialog:

; 6756 : 				{
; 6757 : 					nNewPageNo = FORMAT_PAGE - 1;				// Skip irrelevant pages

  02222	c7 45 ec 25 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 37 ; 00000025H

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  02229	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  0222c	40		 inc	 eax
  0222d	50		 push	 eax
  0222e	53		 push	 ebx
  0222f	e8 00 00 00 00	 call	 _LoadPage
  02234	83 c4 08	 add	 esp, 8
  02237	b8 01 00 00 00	 mov	 eax, 1
  0223c	e9 67 de ff ff	 jmp	 $LN517@MainDialog
$LN258@MainDialog:

; 6758 : 				}
; 6759 : 			}
; 6760 : 
; 6761 : 			else if (nCurPageNo == HIDDEN_VOL_HOST_PASSWORD_PAGE
; 6762 : 				|| nCurPageNo == NONSYS_INPLACE_ENC_RESUME_PASSWORD_PAGE)

  02241	83 f8 14	 cmp	 eax, 20			; 00000014H
  02244	0f 84 08 14 00
	00		 je	 $LN239@MainDialog
  0224a	83 f8 20	 cmp	 eax, 32			; 00000020H
  0224d	0f 84 ff 13 00
	00		 je	 $LN239@MainDialog

; 6954 : 				}
; 6955 : 
; 6956 : 			}
; 6957 : 
; 6958 : 			else if (nCurPageNo == FILESYS_PAGE)

  02253	83 f8 16	 cmp	 eax, 22			; 00000016H
  02256	0f 85 bd 01 00
	00		 jne	 $LN193@MainDialog

; 6959 : 			{
; 6960 : 				if (!bHiddenVol && IsHiddenOSRunning() && Get2RadButtonPageAnswer() == 1)

  0225c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  02262	85 c9		 test	 ecx, ecx
  02264	0f 85 6f 01 00
	00		 jne	 $LN192@MainDialog
  0226a	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  0226f	85 c0		 test	 eax, eax
  02271	0f 84 62 01 00
	00		 je	 $LN192@MainDialog
  02277	e8 00 00 00 00	 call	 ?Get2RadButtonPageAnswer@@YAHXZ ; Get2RadButtonPageAnswer
  0227c	83 f8 01	 cmp	 eax, 1
  0227f	0f 85 54 01 00
	00		 jne	 $LN192@MainDialog

; 6961 : 				{
; 6962 : 					// The user wants to store files larger than 4GB on the non-hidden volume about to be created and a hidden OS is running
; 6963 : 
; 6964 : 					WarningDirect ((wstring (GetString ("CANNOT_SATISFY_OVER_4G_FILE_SIZE_REQ"))
; 6965 : 						+ L" "
; 6966 : 						+ GetString ("CANNOT_CREATE_NON_HIDDEN_NTFS_VOLUMES_UNDER_HIDDEN_OS")
; 6967 : 						+ L"\n\n"
; 6968 : 						+ GetString ("NOTE_BEGINNING")
; 6969 : 						+ GetString ("HIDDEN_OS_WRITE_PROTECTION_BRIEF_INFO")
; 6970 : 						+ L" "
; 6971 : 						+ GetString ("HIDDEN_OS_WRITE_PROTECTION_EXPLANATION")).c_str());

  02285	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@HFPIFBIF@CANNOT_SATISFY_OVER_4G_FILE_SIZE@
  0228a	e8 00 00 00 00	 call	 _GetString
  0228f	83 c4 04	 add	 esp, 4
  02292	50		 push	 eax
  02293	8d 8d 94 fd ff
	ff		 lea	 ecx, DWORD PTR $T169299[ebp]
  02299	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0229e	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  022a3	50		 push	 eax
  022a4	8d 95 60 fc ff
	ff		 lea	 edx, DWORD PTR $T169300[ebp]
  022aa	52		 push	 edx
  022ab	c7 45 fc 2a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 42 ; 0000002aH
  022b2	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  022b7	8b f0		 mov	 esi, eax
  022b9	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@KNHACFHE@CANNOT_CREATE_NON_HIDDEN_NTFS_VO@
  022be	c6 45 fc 2b	 mov	 BYTE PTR __$EHRec$[ebp+12], 43 ; 0000002bH
  022c2	e8 00 00 00 00	 call	 _GetString
  022c7	50		 push	 eax
  022c8	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR $T169301[ebp]
  022ce	56		 push	 esi
  022cf	50		 push	 eax
  022d0	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  022d5	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  022da	50		 push	 eax
  022db	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR $T169302[ebp]
  022e1	51		 push	 ecx
  022e2	c6 45 fc 2c	 mov	 BYTE PTR __$EHRec$[ebp+12], 44 ; 0000002cH
  022e6	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  022eb	8b f0		 mov	 esi, eax
  022ed	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JPAMOBPC@NOTE_BEGINNING?$AA@
  022f2	c6 45 fc 2d	 mov	 BYTE PTR __$EHRec$[ebp+12], 45 ; 0000002dH
  022f6	e8 00 00 00 00	 call	 _GetString
  022fb	50		 push	 eax
  022fc	8d 95 28 fc ff
	ff		 lea	 edx, DWORD PTR $T169303[ebp]
  02302	56		 push	 esi
  02303	52		 push	 edx
  02304	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02309	8b f0		 mov	 esi, eax
  0230b	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@LFCLDECM@HIDDEN_OS_WRITE_PROTECTION_BRIEF@
  02310	c6 45 fc 2e	 mov	 BYTE PTR __$EHRec$[ebp+12], 46 ; 0000002eH
  02314	e8 00 00 00 00	 call	 _GetString
  02319	50		 push	 eax
  0231a	8d 85 f4 fa ff
	ff		 lea	 eax, DWORD PTR $T169304[ebp]
  02320	56		 push	 esi
  02321	50		 push	 eax
  02322	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02327	83 c4 48	 add	 esp, 72			; 00000048H
  0232a	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  0232f	50		 push	 eax
  02330	8d 8d 2c fb ff
	ff		 lea	 ecx, DWORD PTR $T169305[ebp]
  02336	51		 push	 ecx
  02337	c6 45 fc 2f	 mov	 BYTE PTR __$EHRec$[ebp+12], 47 ; 0000002fH
  0233b	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02340	8b f0		 mov	 esi, eax
  02342	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@OILEALFF@HIDDEN_OS_WRITE_PROTECTION_EXPLA@
  02347	c6 45 fc 30	 mov	 BYTE PTR __$EHRec$[ebp+12], 48 ; 00000030H
  0234b	e8 00 00 00 00	 call	 _GetString
  02350	50		 push	 eax
  02351	8d 95 64 fb ff
	ff		 lea	 edx, DWORD PTR $T169306[ebp]
  02357	56		 push	 esi
  02358	52		 push	 edx
  02359	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0235e	83 c4 1c	 add	 esp, 28			; 0000001cH
  02361	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  02364	72 05		 jb	 SHORT $LN939@MainDialog
  02366	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  02369	eb 03		 jmp	 SHORT $LN940@MainDialog
$LN939@MainDialog:
  0236b	83 c0 04	 add	 eax, 4
$LN940@MainDialog:
  0236e	50		 push	 eax
  0236f	e8 00 00 00 00	 call	 _WarningDirect
  02374	83 c4 04	 add	 esp, 4
  02377	8d 8d 64 fb ff
	ff		 lea	 ecx, DWORD PTR $T169306[ebp]
  0237d	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02382	8d 8d 2c fb ff
	ff		 lea	 ecx, DWORD PTR $T169305[ebp]
  02388	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0238d	8d 8d f4 fa ff
	ff		 lea	 ecx, DWORD PTR $T169304[ebp]
  02393	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02398	8d 8d 28 fc ff
	ff		 lea	 ecx, DWORD PTR $T169303[ebp]
  0239e	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  023a3	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR $T169302[ebp]
  023a9	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  023ae	8d 8d e8 fd ff
	ff		 lea	 ecx, DWORD PTR $T169301[ebp]
  023b4	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  023b9	8d 8d 60 fc ff
	ff		 lea	 ecx, DWORD PTR $T169300[ebp]
  023bf	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  023c4	8d 8d 94 fd ff
	ff		 lea	 ecx, DWORD PTR $T169299[ebp]
  023ca	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  023cf	b8 01 00 00 00	 mov	 eax, 1
  023d4	e9 cf dc ff ff	 jmp	 $LN517@MainDialog
$LN192@MainDialog:

; 6972 : 
; 6973 : 					return 1;
; 6974 : 				}
; 6975 : 
; 6976 : 				if (nNeedToStoreFilesOver4GB != Get2RadButtonPageAnswer())

  023d9	e8 00 00 00 00	 call	 ?Get2RadButtonPageAnswer@@YAHXZ ; Get2RadButtonPageAnswer
  023de	39 05 00 00 00
	00		 cmp	 DWORD PTR ?nNeedToStoreFilesOver4GB@@3HA, eax ; nNeedToStoreFilesOver4GB
  023e4	74 0a		 je	 SHORT $LN191@MainDialog

; 6977 : 					fileSystem = FILESYS_NONE;	// The user may have gone back and changed the answer, so default file system must be reselected

  023e6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fileSystem@@3HC, 0 ; fileSystem
$LN191@MainDialog:

; 6978 : 	
; 6979 : 				nNeedToStoreFilesOver4GB = Get2RadButtonPageAnswer();

  023f0	e8 00 00 00 00	 call	 ?Get2RadButtonPageAnswer@@YAHXZ ; Get2RadButtonPageAnswer
  023f5	a3 00 00 00 00	 mov	 DWORD PTR ?nNeedToStoreFilesOver4GB@@3HA, eax ; nNeedToStoreFilesOver4GB

; 6980 : 
; 6981 : 				nNewPageNo = FORMAT_PAGE - 1;	// Skip irrelevant pages

  023fa	c7 45 ec 25 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 37 ; 00000025H

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  02401	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  02404	40		 inc	 eax
  02405	50		 push	 eax
  02406	53		 push	 ebx
  02407	e8 00 00 00 00	 call	 _LoadPage
  0240c	83 c4 08	 add	 esp, 8
  0240f	b8 01 00 00 00	 mov	 eax, 1
  02414	e9 8f dc ff ff	 jmp	 $LN517@MainDialog
$LN193@MainDialog:

; 6982 : 			}
; 6983 : 
; 6984 : 			else if (nCurPageNo == SYSENC_COLLECTING_RANDOM_DATA_PAGE
; 6985 : 				|| nCurPageNo == NONSYS_INPLACE_ENC_RAND_DATA_PAGE)

  02419	83 f8 17	 cmp	 eax, 23			; 00000017H
  0241c	0f 84 6c 11 00
	00		 je	 $LN188@MainDialog
  02422	83 f8 22	 cmp	 eax, 34			; 00000022H
  02425	0f 84 63 11 00
	00		 je	 $LN188@MainDialog

; 7014 : 			}
; 7015 : 
; 7016 : 			else if (nCurPageNo == SYSENC_KEYS_GEN_PAGE)

  0242b	83 f8 18	 cmp	 eax, 24			; 00000018H
  0242e	75 58		 jne	 SHORT $LN184@MainDialog

; 7017 : 			{
; 7018 : 				char tmp[KEY_GUI_VIEW_SIZE+1];
; 7019 : 
; 7020 : 				// Attempt to wipe the GUI fields showing portions of the master and header keys
; 7021 : 				memset (tmp, 0x20, sizeof(tmp)); //0x20 = ASCII space or 0x2020 = Unicode DAGGER

  02430	6a 41		 push	 65			; 00000041H
  02432	8d 85 d0 cb 00
	00		 lea	 eax, DWORD PTR _tmp$134680[ebp]
  02438	6a 20		 push	 32			; 00000020H
  0243a	50		 push	 eax
  0243b	e8 00 00 00 00	 call	 _memset

; 7022 : 				tmp [sizeof(tmp)-1] = 0;
; 7023 : 				SetWindowTextA(hMasterKey, tmp);

  02440	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hMasterKey
  02446	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextA@8
  0244c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0244f	8d 8d d0 cb 00
	00		 lea	 ecx, DWORD PTR _tmp$134680[ebp]
  02455	51		 push	 ecx
  02456	52		 push	 edx
  02457	c6 85 10 cc 00
	00 00		 mov	 BYTE PTR _tmp$134680[ebp+64], 0
  0245e	ff d6		 call	 esi

; 7024 : 				SetWindowTextA(hHeaderKey, tmp);

  02460	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hHeaderKey
  02466	8d 85 d0 cb 00
	00		 lea	 eax, DWORD PTR _tmp$134680[ebp]
  0246c	50		 push	 eax
  0246d	51		 push	 ecx
  0246e	ff d6		 call	 esi

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  02470	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  02473	40		 inc	 eax
  02474	50		 push	 eax
  02475	53		 push	 ebx
  02476	e8 00 00 00 00	 call	 _LoadPage
  0247b	83 c4 08	 add	 esp, 8
  0247e	b8 01 00 00 00	 mov	 eax, 1
  02483	e9 20 dc ff ff	 jmp	 $LN517@MainDialog
$LN184@MainDialog:

; 7025 : 			}
; 7026 : 
; 7027 : 			else if (nCurPageNo == SYSENC_RESCUE_DISK_CREATION_PAGE)

  02488	83 f8 19	 cmp	 eax, 25			; 00000019H
  0248b	0f 85 e1 01 00
	00		 jne	 $LN182@MainDialog

; 7028 : 			{
; 7029 : 				/* Generate rescue disk for boot encryption */
; 7030 : 
; 7031 : 				GetWindowTextA(GetDlgItem (hCurPage, IDC_RESCUE_DISK_ISO_PATH), szRescueDiskISO, sizeof (szRescueDiskISO));

  02491	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  02497	68 05 01 00 00	 push	 261			; 00000105H
  0249c	68 00 00 00 00	 push	 OFFSET ?szRescueDiskISO@@3PADA ; szRescueDiskISO
  024a1	68 e9 03 00 00	 push	 1001			; 000003e9H
  024a6	52		 push	 edx
  024a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  024ad	50		 push	 eax
  024ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 7032 : 
; 7033 : 				try
; 7034 : 				{

  024b4	c7 45 fc 34 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 52 ; 00000034H

; 7035 : 					WaitCursor();

  024bb	e8 00 00 00 00	 call	 _WaitCursor

; 7036 : 					BootEncObj->CreateRescueIsoImage (true, szRescueDiskISO);

  024c0	68 00 00 00 00	 push	 OFFSET ?szRescueDiskISO@@3PADA ; szRescueDiskISO
  024c5	8d 8d 38 fe ff
	ff		 lea	 ecx, DWORD PTR $T169309[ebp]
  024cb	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  024d0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  024d6	8d 85 38 fe ff
	ff		 lea	 eax, DWORD PTR $T169309[ebp]
  024dc	50		 push	 eax
  024dd	6a 01		 push	 1
  024df	c6 45 fc 35	 mov	 BYTE PTR __$EHRec$[ebp+12], 53 ; 00000035H
  024e3	e8 00 00 00 00	 call	 ?CreateRescueIsoImage@BootEncryption@CipherShed@@QAEX_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CipherShed::BootEncryption::CreateRescueIsoImage
  024e8	8d 8d 38 fe ff
	ff		 lea	 ecx, DWORD PTR $T169309[ebp]
  024ee	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 7044 : 				}
; 7045 : 
; 7046 : retryCDDriveCheck:
; 7047 : 				if (!bDontVerifyRescueDisk && !BootEncObj->IsCDDrivePresent())

  024f3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDontVerifyRescueDisk@@3HA, 0 ; bDontVerifyRescueDisk
  024fa	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  02501	0f 85 24 01 00
	00		 jne	 $LN178@MainDialog
  02507	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0CJ@FCOKHALJ@CD_BURNER_NOT_PRESENT_WILL_CONNE@
  0250c	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0CE@FEAJEJEJ@CD_BURNER_NOT_PRESENT_CONNECTED_@
$retryCDDriveCheck$134687:
  02511	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  02517	e8 00 00 00 00	 call	 ?IsCDDrivePresent@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::IsCDDrivePresent
  0251c	84 c0		 test	 al, al
  0251e	0f 85 07 01 00
	00		 jne	 $LN178@MainDialog

; 7048 : 				{
; 7049 : 					char *multiChoiceStr[] = { 0, "CD_BURNER_NOT_PRESENT",

  02524	33 c0		 xor	 eax, eax

; 7050 : 						"CD_BURNER_NOT_PRESENT_WILL_STORE_ISO",
; 7051 : 						"CD_BURNER_NOT_PRESENT_WILL_CONNECT_LATER",
; 7052 : 						"CD_BURNER_NOT_PRESENT_CONNECTED_NOW",
; 7053 : 						0 };
; 7054 : 
; 7055 : 					switch (AskMultiChoice ((void **) multiChoiceStr, FALSE))

  02526	50		 push	 eax
  02527	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _multiChoiceStr$134689[ebp]
  0252d	51		 push	 ecx
  0252e	89 85 fc fe ff
	ff		 mov	 DWORD PTR _multiChoiceStr$134689[ebp], eax
  02534	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _multiChoiceStr$134689[ebp+4], OFFSET ??_C@_0BG@GLKAIFEA@CD_BURNER_NOT_PRESENT?$AA@
  0253e	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _multiChoiceStr$134689[ebp+8], OFFSET ??_C@_0CF@OBJIPJKN@CD_BURNER_NOT_PRESENT_WILL_STORE@
  02548	89 bd 08 ff ff
	ff		 mov	 DWORD PTR _multiChoiceStr$134689[ebp+12], edi
  0254e	89 b5 0c ff ff
	ff		 mov	 DWORD PTR _multiChoiceStr$134689[ebp+16], esi
  02554	89 85 10 ff ff
	ff		 mov	 DWORD PTR _multiChoiceStr$134689[ebp+20], eax
  0255a	e8 00 00 00 00	 call	 _AskMultiChoice
  0255f	83 c4 08	 add	 esp, 8
  02562	83 e8 01	 sub	 eax, 1
  02565	74 26		 je	 SHORT $LN177@MainDialog
  02567	83 e8 01	 sub	 eax, 1
  0256a	74 17		 je	 SHORT $LN176@MainDialog
  0256c	83 e8 01	 sub	 eax, 1
  0256f	0f 84 b6 00 00
	00		 je	 $LN178@MainDialog

; 7044 : 				}
; 7045 : 
; 7046 : retryCDDriveCheck:
; 7047 : 				if (!bDontVerifyRescueDisk && !BootEncObj->IsCDDrivePresent())

  02575	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDontVerifyRescueDisk@@3HA, 0 ; bDontVerifyRescueDisk
  0257c	74 93		 je	 SHORT $retryCDDriveCheck$134687

; 6871 : 									{
; 6872 : 										if (MessageBoxW (hwndDlg, GetString ("CANT_DISMOUNT_OUTER_VOL"), lpszTitle, MB_RETRYCANCEL) != IDRETRY)

  0257e	e9 a8 00 00 00	 jmp	 $LN178@MainDialog
$LN176@MainDialog:

; 7065 : 						break;
; 7066 : 
; 7067 : 					case 2:
; 7068 : 						AbortProcessSilent();

  02583	e8 00 00 00 00	 call	 _AbortProcessSilent

; 7069 : 
; 7070 : 					case 3:
; 7071 : 						break;

  02588	e9 9e 00 00 00	 jmp	 $LN178@MainDialog
$LN177@MainDialog:

; 7056 : 					{
; 7057 : 					case 1:
; 7058 : 						wchar_t msg[8192];
; 7059 : 						swprintf_s (msg, array_capacity (msg), GetString ("CD_BURNER_NOT_PRESENT_WILL_STORE_ISO_INFO"), SingleStringToWide (szRescueDiskISO).c_str());

  0258d	68 00 00 00 00	 push	 OFFSET ?szRescueDiskISO@@3PADA ; szRescueDiskISO
  02592	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR $T169311[ebp]
  02598	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0259d	8d 95 54 fe ff
	ff		 lea	 edx, DWORD PTR $T169311[ebp]
  025a3	52		 push	 edx
  025a4	8d 85 48 fb ff
	ff		 lea	 eax, DWORD PTR $T169312[ebp]
  025aa	50		 push	 eax
  025ab	c7 45 fc 37 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 55 ; 00000037H
  025b2	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  025b7	83 c4 08	 add	 esp, 8
  025ba	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  025be	72 05		 jb	 SHORT $LN945@MainDialog
  025c0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  025c3	eb 03		 jmp	 SHORT $LN946@MainDialog
$LN945@MainDialog:
  025c5	83 c0 04	 add	 eax, 4
$LN946@MainDialog:
  025c8	50		 push	 eax
  025c9	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@BHLKCEED@CD_BURNER_NOT_PRESENT_WILL_STORE@
  025ce	e8 00 00 00 00	 call	 _GetString
  025d3	83 c4 04	 add	 esp, 4
  025d6	50		 push	 eax
  025d7	8d 8d 00 20 00
	00		 lea	 ecx, DWORD PTR _msg$134700[ebp]
  025dd	68 00 20 00 00	 push	 8192			; 00002000H
  025e2	51		 push	 ecx
  025e3	e8 00 00 00 00	 call	 _swprintf_s
  025e8	83 c4 10	 add	 esp, 16			; 00000010H
  025eb	8d 8d 48 fb ff
	ff		 lea	 ecx, DWORD PTR $T169312[ebp]
  025f1	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  025f6	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR $T169311[ebp]
  025fc	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 7060 : 						WarningDirect (msg);

  02601	8d 95 00 20 00
	00		 lea	 edx, DWORD PTR _msg$134700[ebp]
  02607	52		 push	 edx
  02608	e8 00 00 00 00	 call	 _WarningDirect

; 7061 : 
; 7062 : 						Warning ("RESCUE_DISK_BURN_NO_CHECK_WARN");

  0260d	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@EJPBDEFG@RESCUE_DISK_BURN_NO_CHECK_WARN?$AA@
  02612	e8 00 00 00 00	 call	 _Warning
  02617	83 c4 08	 add	 esp, 8

; 7063 : 						bDontVerifyRescueDisk = TRUE;

  0261a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bDontVerifyRescueDisk@@3HA, 1 ; bDontVerifyRescueDisk

; 7064 : 						nNewPageNo = SYSENC_RESCUE_DISK_VERIFIED_PAGE;

  02624	c7 45 ec 1b 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 27 ; 0000001bH
$LN178@MainDialog:

; 7072 : 
; 7073 : 					default:
; 7074 : 						goto retryCDDriveCheck;
; 7075 : 					}
; 7076 : 				}
; 7077 : 
; 7078 : 				if (IsWindowsIsoBurnerAvailable() && !bDontVerifyRescueDisk)

  0262b	e8 00 00 00 00	 call	 _IsWindowsIsoBurnerAvailable
  02630	85 c0		 test	 eax, eax
  02632	0f 84 96 15 00
	00		 je	 $LN196@MainDialog
  02638	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDontVerifyRescueDisk@@3HA, 0 ; bDontVerifyRescueDisk
  0263f	0f 85 89 15 00
	00		 jne	 $LN196@MainDialog

; 7079 : 					Info ("RESCUE_DISK_WIN_ISOBURN_PRELAUNCH_NOTE");

  02645	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@GAGHEKIC@RESCUE_DISK_WIN_ISOBURN_PRELAUNC@
  0264a	e8 00 00 00 00	 call	 _Info
  0264f	83 c4 04	 add	 esp, 4

; 7080 : 
; 7081 : 				NormalCursor ();

  02652	e9 77 15 00 00	 jmp	 $LN196@MainDialog
__catch$_MainDialogProc@16$31:

; 7037 : 
; 7038 : 				}
; 7039 : 				catch (Exception &e)
; 7040 : 				{
; 7041 : 					e.Show (hwndDlg);

  02657	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134685[ebp]
  0265d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0265f	8b 55 e4	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  02662	8b 00		 mov	 eax, DWORD PTR [eax]
  02664	52		 push	 edx
  02665	ff d0		 call	 eax

; 7042 : 					NormalCursor ();

  02667	e8 00 00 00 00	 call	 _NormalCursor

; 7043 : 					return 1;

  0266c	b8 00 00 00 00	 mov	 eax, $LN487@MainDialog
  02671	c3		 ret	 0
$LN182@MainDialog:

; 7082 : 			}
; 7083 : 
; 7084 : 			else if (nCurPageNo == SYSENC_RESCUE_DISK_BURN_PAGE)

  02672	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  02675	0f 85 d3 00 00
	00		 jne	 $LN171@MainDialog

; 7085 : 			{
; 7086 : 				if (!bDontVerifyRescueDisk)

  0267b	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?bDontVerifyRescueDisk@@3HA, ecx ; bDontVerifyRescueDisk
  02681	0f 85 9b 00 00
	00		 jne	 $LN170@MainDialog

; 7087 : 				{
; 7088 : 					/* Verify that the rescue disk has been written correctly */
; 7089 : 
; 7090 : 					try
; 7091 : 					{

  02687	c7 45 fc 38 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 56 ; 00000038H

; 7092 : 						WaitCursor();

  0268e	e8 00 00 00 00	 call	 _WaitCursor

; 7093 : 						if (!BootEncObj->VerifyRescueDisk ())

  02693	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  02699	e8 00 00 00 00	 call	 ?VerifyRescueDisk@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::VerifyRescueDisk
  0269e	84 c0		 test	 al, al
  026a0	0f 85 28 15 00
	00		 jne	 $LN196@MainDialog

; 7094 : 						{
; 7095 : 							wchar_t szTmp[8000];
; 7096 : 
; 7097 : 							swprintf (szTmp, GetString ("RESCUE_DISK_CHECK_FAILED"), 
; 7098 : 								IsWindowsIsoBurnerAvailable () ? L"" : GetString ("RESCUE_DISK_CHECK_FAILED_SENTENCE_APPENDIX"));

  026a6	e8 00 00 00 00	 call	 _IsWindowsIsoBurnerAvailable
  026ab	85 c0		 test	 eax, eax
  026ad	74 07		 je	 SHORT $LN535@MainDialog
  026af	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  026b4	eb 0d		 jmp	 SHORT $LN536@MainDialog
$LN535@MainDialog:
  026b6	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@LCMPFPDG@RESCUE_DISK_CHECK_FAILED_SENTENC@
  026bb	e8 00 00 00 00	 call	 _GetString
  026c0	83 c4 04	 add	 esp, 4
$LN536@MainDialog:
  026c3	50		 push	 eax
  026c4	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KDGMPLJF@RESCUE_DISK_CHECK_FAILED?$AA@
  026c9	e8 00 00 00 00	 call	 _GetString
  026ce	83 c4 04	 add	 esp, 4
  026d1	50		 push	 eax
  026d2	8d 8d 00 60 00
	00		 lea	 ecx, DWORD PTR _szTmp$134720[ebp]
  026d8	51		 push	 ecx
  026d9	e8 00 00 00 00	 call	 ?swprintf@@YAHPA_WPB_WZZ ; swprintf

; 7099 : 
; 7100 : 							ErrorDirectTitle(szTmp,GetString ("RESCUE_DISK_CHECK_FAILED_TITLE"));

  026de	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@HPABPDKI@RESCUE_DISK_CHECK_FAILED_TITLE?$AA@
  026e3	e8 00 00 00 00	 call	 _GetString
  026e8	50		 push	 eax
  026e9	8d 95 00 60 00
	00		 lea	 edx, DWORD PTR _szTmp$134720[ebp]
  026ef	52		 push	 edx
  026f0	e8 00 00 00 00	 call	 _ErrorDirectTitle
  026f5	83 c4 18	 add	 esp, 24			; 00000018H

; 7101 : 
; 7102 : 							NormalCursor ();

  026f8	e8 00 00 00 00	 call	 _NormalCursor
  026fd	b8 01 00 00 00	 mov	 eax, 1
  02702	e9 a1 d9 ff ff	 jmp	 $LN517@MainDialog
__catch$_MainDialogProc@16$33:

; 7103 : #ifndef _DEBUG
; 7104 : 							return 1;
; 7105 : #endif
; 7106 : 						}
; 7107 : 					}
; 7108 : 					catch (Exception &e)
; 7109 : 					{
; 7110 : 						e.Show (hwndDlg);

  02707	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134724[ebp]
  0270d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0270f	8b 55 e4	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  02712	8b 00		 mov	 eax, DWORD PTR [eax]
  02714	52		 push	 edx
  02715	ff d0		 call	 eax

; 7111 : 						NormalCursor ();

  02717	e8 00 00 00 00	 call	 _NormalCursor

; 7112 : 						return 1;

  0271c	b8 00 00 00 00	 mov	 eax, $LN487@MainDialog
  02721	c3		 ret	 0
$LN170@MainDialog:

; 7113 : 					}
; 7114 : 					NormalCursor ();
; 7115 : 				}
; 7116 : 				else
; 7117 : 				{
; 7118 : 					Warning ("RESCUE_DISK_BURN_NO_CHECK_WARN");

  02722	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@EJPBDEFG@RESCUE_DISK_BURN_NO_CHECK_WARN?$AA@
  02727	e8 00 00 00 00	 call	 _Warning

; 7119 : 					nNewPageNo = SYSENC_RESCUE_DISK_VERIFIED_PAGE;		// Skip irrelevant pages

  0272c	c7 45 ec 1b 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 27 ; 0000001bH

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  02733	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  02736	83 c4 04	 add	 esp, 4
  02739	40		 inc	 eax
  0273a	50		 push	 eax
  0273b	53		 push	 ebx
  0273c	e8 00 00 00 00	 call	 _LoadPage
  02741	83 c4 08	 add	 esp, 8
  02744	b8 01 00 00 00	 mov	 eax, 1
  02749	e9 5a d9 ff ff	 jmp	 $LN517@MainDialog
$LN171@MainDialog:

; 7120 : 				}
; 7121 : 			}
; 7122 : 
; 7123 : 			else if (nCurPageNo == SYSENC_WIPE_MODE_PAGE
; 7124 : 				|| nCurPageNo == NONSYS_INPLACE_ENC_WIPE_MODE_PAGE)

  0274e	83 f8 1c	 cmp	 eax, 28			; 0000001cH
  02751	0f 84 0b 0e 00
	00		 je	 $LN164@MainDialog
  02757	83 f8 23	 cmp	 eax, 35			; 00000023H
  0275a	0f 84 02 0e 00
	00		 je	 $LN164@MainDialog

; 7128 : 					return 1;
; 7129 : 			}
; 7130 : 
; 7131 : 			else if (nCurPageNo == SYSENC_PRETEST_INFO_PAGE)

  02760	83 f8 1d	 cmp	 eax, 29			; 0000001dH
  02763	0f 85 e1 01 00
	00		 jne	 $LN161@MainDialog

; 7132 : 			{
; 7133 : 				if (LocalizationActive
; 7134 : 					&& AskWarnYesNo ("PREBOOT_NOT_LOCALIZED") == IDNO)

  02769	39 0d 00 00 00
	00		 cmp	 DWORD PTR _LocalizationActive, ecx
  0276f	74 16		 je	 SHORT $LN160@MainDialog
  02771	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DGIFCGMK@PREBOOT_NOT_LOCALIZED?$AA@
  02776	e8 00 00 00 00	 call	 _AskWarnYesNo
  0277b	83 c4 04	 add	 esp, 4
  0277e	83 f8 07	 cmp	 eax, 7

; 7135 : 					return 1;

  02781	0f 84 e1 dc ff
	ff		 je	 $LN487@MainDialog
$LN160@MainDialog:

; 7136 : 
; 7137 : 				bConfirmQuitSysEncPretest = TRUE;

  02787	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bConfirmQuitSysEncPretest@@3HC, 1 ; bConfirmQuitSysEncPretest

; 7138 : 				
; 7139 : 				if (!bHiddenOS)	// This text is not tailored to hidden OS

  02791	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  02797	85 c9		 test	 ecx, ecx
  02799	75 0a		 jne	 SHORT $LN159@MainDialog

; 7140 : 					TextInfoDialogBox (TC_TBXID_SYS_ENCRYPTION_PRETEST);

  0279b	6a 01		 push	 1
  0279d	e8 00 00 00 00	 call	 _TextInfoDialogBox
  027a2	83 c4 04	 add	 esp, 4
$LN159@MainDialog:

; 7141 : 
; 7142 : 				if (AskWarnYesNoTitle("CONFIRM_RESTART",GetString("IDD_VOL_CREATION_WIZARD_DLG_CONFIRM_RESTART")) == IDNO)

  027a5	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@GDNJCFCO@IDD_VOL_CREATION_WIZARD_DLG_CONF@
  027aa	e8 00 00 00 00	 call	 _GetString
  027af	50		 push	 eax
  027b0	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ICICKJJH@CONFIRM_RESTART?$AA@
  027b5	e8 00 00 00 00	 call	 _AskWarnYesNoTitle
  027ba	83 c4 0c	 add	 esp, 12			; 0000000cH
  027bd	83 f8 07	 cmp	 eax, 7

; 7143 : 					return 1;

  027c0	0f 84 a2 dc ff
	ff		 je	 $LN487@MainDialog

; 7144 : 
; 7145 : 				/* Install the pre-boot authentication component and initiate the system encryption pretest.
; 7146 : 				   If we are creating a hidden OS, pretest is omitted and OS cloning will follow. */
; 7147 : 
; 7148 : 				try
; 7149 : 				{

  027c6	c7 45 fc 3a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 58 ; 0000003aH

; 7150 : 					WaitCursor();

  027cd	e8 00 00 00 00	 call	 _WaitCursor

; 7151 : 
; 7152 : #if 0
; 7153 : 					// Make sure the Rescue Disk is not in the drive
; 7154 : 					while (BootEncObj->VerifyRescueDisk ())
; 7155 : 					{
; 7156 : 						Error ("REMOVE_RESCUE_DISK_FROM_DRIVE");
; 7157 : 					}
; 7158 : #endif
; 7159 : 
; 7160 : 					BootEncObj->Install (bHiddenOS ? true : false);

  027d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  027d8	85 d2		 test	 edx, edx
  027da	0f 95 c0	 setne	 al
  027dd	0f b6 c8	 movzx	 ecx, al
  027e0	51		 push	 ecx
  027e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  027e7	e8 00 00 00 00	 call	 ?Install@BootEncryption@CipherShed@@QAEX_N@Z ; CipherShed::BootEncryption::Install

; 7168 : 				}
; 7169 : 
; 7170 : 
; 7171 : 				/* Add the main CipherShed app to the system startup sequence (the CipherShed Background Task), which
; 7172 : 				we need e.g. for notifications about prevented hibernation, about hidden OS leak protection, about 
; 7173 : 				inconsistent hidden OS installs (CipherShed upgraded in the decoy system but not in the hidden one), etc.
; 7174 : 				Note that this must be done before calling ChangeSystemEncryptionStatus(), which broadcasts the change,
; 7175 : 				so that the main app (if it's running with different cached settings) will not overwrite our new
; 7176 : 				settings when it exits. */
; 7177 : 				bStartOnLogon = TRUE;

  027ec	bf 01 00 00 00	 mov	 edi, 1

; 7178 : 				SaveSettings (NULL);

  027f1	33 f6		 xor	 esi, esi
  027f3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 7168 : 				}
; 7169 : 
; 7170 : 
; 7171 : 				/* Add the main CipherShed app to the system startup sequence (the CipherShed Background Task), which
; 7172 : 				we need e.g. for notifications about prevented hibernation, about hidden OS leak protection, about 
; 7173 : 				inconsistent hidden OS installs (CipherShed upgraded in the decoy system but not in the hidden one), etc.
; 7174 : 				Note that this must be done before calling ChangeSystemEncryptionStatus(), which broadcasts the change,
; 7175 : 				so that the main app (if it's running with different cached settings) will not overwrite our new
; 7176 : 				settings when it exits. */
; 7177 : 				bStartOnLogon = TRUE;

  027fa	89 3d 00 00 00
	00		 mov	 DWORD PTR _bStartOnLogon, edi

; 7178 : 				SaveSettings (NULL);

  02800	e8 00 00 00 00	 call	 _SaveSettings

; 7179 : 				ManageStartupSeq ();

  02805	e8 00 00 00 00	 call	 _ManageStartupSeq

; 7180 : 
; 7181 : 
; 7182 : 				if (bHiddenOS)

  0280a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  02810	85 d2		 test	 edx, edx
  02812	74 64		 je	 SHORT $LN156@MainDialog

; 7183 : 				{
; 7184 : 					/* When we are going to create a hidden OS, the system encryption status is set
; 7185 : 					to SYSENC_STATUS_PRETEST (not to any special hidden-OS status), in case the XML 
; 7186 : 					configuration file and its properties somehow leaks somewhere outside the system
; 7187 : 					partition (which will be wiped later on) indicating that a hidden OS has been created
; 7188 : 					on the computer. Instead, we update our raw config flags in the master boot record
; 7189 : 					(which is also altered when our boot loader is installed). */
; 7190 : 
; 7191 : 					if (!ChangeSystemEncryptionStatus (SYSENC_STATUS_PRETEST)
; 7192 : 						|| !ChangeHiddenOSCreationPhase (TC_HIDDEN_OS_CREATION_PHASE_CLONING))

  02814	e8 00 00 00 00	 call	 _CreateSysEncMutex
  02819	85 c0		 test	 eax, eax
  0281b	75 0f		 jne	 SHORT $LN951@MainDialog
  0281d	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  02822	e8 00 00 00 00	 call	 _Error
  02827	83 c4 04	 add	 esp, 4
  0282a	eb 2c		 jmp	 SHORT $LN154@MainDialog
$LN951@MainDialog:
  0282c	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  02831	c7 05 00 00 00
	00 c8 00 00 00	 mov	 DWORD PTR _SystemEncryptionStatus, 200 ; 000000c8H
  0283b	89 3d 00 00 00
	00		 mov	 DWORD PTR _bSystemEncryptionStatusChanged, edi
  02841	e8 00 00 00 00	 call	 ?SaveSysEncSettings@@YAHPAUHWND__@@@Z ; SaveSysEncSettings
  02846	85 c0		 test	 eax, eax
  02848	74 0e		 je	 SHORT $LN154@MainDialog
  0284a	6a 40		 push	 64			; 00000040H
  0284c	e8 00 00 00 00	 call	 ?ChangeHiddenOSCreationPhase@@YAHH@Z ; ChangeHiddenOSCreationPhase
  02851	83 c4 04	 add	 esp, 4
  02854	85 c0		 test	 eax, eax
  02856	75 6f		 jne	 SHORT $LN152@MainDialog
$LN154@MainDialog:

; 7193 : 					{
; 7194 : 						ChangeSystemEncryptionStatus (SYSENC_STATUS_NONE);

  02858	33 f6		 xor	 esi, esi
  0285a	e8 00 00 00 00	 call	 ?ChangeSystemEncryptionStatus@@YAHH@Z ; ChangeSystemEncryptionStatus

; 7195 : 						Error ("CANNOT_INITIATE_HIDDEN_OS_CREATION");

  0285f	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@DFDNFFMK@CANNOT_INITIATE_HIDDEN_OS_CREATI@
  02864	e8 00 00 00 00	 call	 _Error
  02869	83 c4 04	 add	 esp, 4

; 7196 : 						NormalCursor ();

  0286c	e8 00 00 00 00	 call	 _NormalCursor

; 7197 : 						return 1;

  02871	8b c7		 mov	 eax, edi
  02873	e9 30 d8 ff ff	 jmp	 $LN517@MainDialog
$LN156@MainDialog:

; 7198 : 					}
; 7199 : 				}
; 7200 : 				else if (!ChangeSystemEncryptionStatus (SYSENC_STATUS_PRETEST))

  02878	e8 00 00 00 00	 call	 _CreateSysEncMutex
  0287d	85 c0		 test	 eax, eax
  0287f	75 0f		 jne	 SHORT $LN958@MainDialog
  02881	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  02886	e8 00 00 00 00	 call	 _Error
  0288b	83 c4 04	 add	 esp, 4
  0288e	eb 1e		 jmp	 SHORT $LN1124@MainDialog
$LN958@MainDialog:
  02890	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  02895	c7 05 00 00 00
	00 c8 00 00 00	 mov	 DWORD PTR _SystemEncryptionStatus, 200 ; 000000c8H
  0289f	89 3d 00 00 00
	00		 mov	 DWORD PTR _bSystemEncryptionStatusChanged, edi
  028a5	e8 00 00 00 00	 call	 ?SaveSysEncSettings@@YAHPAUHWND__@@@Z ; SaveSysEncSettings
  028aa	85 c0		 test	 eax, eax
  028ac	75 19		 jne	 SHORT $LN152@MainDialog
$LN1124@MainDialog:

; 7201 : 				{
; 7202 : 					Error ("CANNOT_INITIATE_SYS_ENCRYPTION_PRETEST");

  028ae	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MGEMKCIE@CANNOT_INITIATE_SYS_ENCRYPTION_P@
  028b3	e8 00 00 00 00	 call	 _Error
  028b8	83 c4 04	 add	 esp, 4

; 7203 : 					NormalCursor ();

  028bb	e8 00 00 00 00	 call	 _NormalCursor

; 7204 : 					return 1;

  028c0	8b c7		 mov	 eax, edi
  028c2	e9 e1 d7 ff ff	 jmp	 $LN517@MainDialog
$LN152@MainDialog:

; 7205 : 				}
; 7206 : 
; 7207 : 				// Add the wizard to the system startup sequence
; 7208 : 				ManageStartupSeqWiz (FALSE, "/acsysenc");

  028c7	68 00 00 00 00	 push	 OFFSET ??_C@_09PIOBCILE@?1acsysenc?$AA@
  028cc	6a 00		 push	 0
  028ce	e8 00 00 00 00	 call	 _ManageStartupSeqWiz

; 7209 : 
; 7210 : 				EndMainDlg (MainDlg);

  028d3	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _MainDlg
  028d9	83 c4 08	 add	 esp, 8
  028dc	e8 00 00 00 00	 call	 _EndMainDlg

; 7211 : 
; 7212 : 				try
; 7213 : 				{
; 7214 : 					BootEncObj->RestartComputer ();

  028e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  028e7	c7 45 fc 3c 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 60 ; 0000003cH
  028ee	e8 00 00 00 00	 call	 ?RestartComputer@BootEncryption@CipherShed@@QAE_NXZ ; CipherShed::BootEncryption::RestartComputer
$ovf_end_4$134850:
  028f3	b8 01 00 00 00	 mov	 eax, 1
  028f8	e9 ab d7 ff ff	 jmp	 $LN517@MainDialog
__catch$_MainDialogProc@16$37:

; 7215 : 				}
; 7216 : 				catch (Exception &e)
; 7217 : 				{
; 7218 : 					e.Show (hwndDlg);

  028fd	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134751[ebp]
  02903	8b 01		 mov	 eax, DWORD PTR [ecx]
  02905	8b 55 e4	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  02908	8b 00		 mov	 eax, DWORD PTR [eax]
  0290a	52		 push	 edx
  0290b	ff d0		 call	 eax

; 7219 : 				}

  0290d	b8 00 00 00 00	 mov	 eax, $LN487@MainDialog
  02912	c3		 ret	 0
__catch$_MainDialogProc@16$35:
  02913	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134740[ebp]
  02919	8b 11		 mov	 edx, DWORD PTR [ecx]
  0291b	8b 45 e4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  0291e	8b 12		 mov	 edx, DWORD PTR [edx]
  02920	50		 push	 eax
  02921	ff d2		 call	 edx
  02923	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  02928	85 c0		 test	 eax, eax
  0292a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CD@DFDNFFMK@CANNOT_INITIATE_HIDDEN_OS_CREATI@
  0292f	75 05		 jne	 SHORT $LN538@MainDialog

; 7161 : 				}
; 7162 : 				catch (Exception &e)
; 7163 : 				{
; 7164 : 					e.Show (hwndDlg);
; 7165 : 					Error (bHiddenOS ? "CANNOT_INITIATE_HIDDEN_OS_CREATION" : "CANNOT_INITIATE_SYS_ENCRYPTION_PRETEST");

  02931	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CH@MGEMKCIE@CANNOT_INITIATE_SYS_ENCRYPTION_P@
$LN538@MainDialog:
  02936	50		 push	 eax
  02937	e8 00 00 00 00	 call	 _Error
  0293c	83 c4 04	 add	 esp, 4

; 7166 : 					NormalCursor ();

  0293f	e8 00 00 00 00	 call	 _NormalCursor

; 7167 : 					return 1;

  02944	b8 00 00 00 00	 mov	 eax, $LN487@MainDialog
  02949	c3		 ret	 0
$LN161@MainDialog:

; 7220 : 
; 7221 : 				return 1;
; 7222 : 			}
; 7223 : 
; 7224 : 			else if (nCurPageNo == SYSENC_PRETEST_RESULT_PAGE)

  0294a	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  0294d	75 2c		 jne	 SHORT $LN149@MainDialog

; 7225 : 			{
; 7226 : 				TextInfoDialogBox (TC_TBXID_SYS_ENC_RESCUE_DISK);

  0294f	6a 02		 push	 2
  02951	e8 00 00 00 00	 call	 _TextInfoDialogBox
  02956	83 c4 04	 add	 esp, 4

; 7227 : 
; 7228 : 				// Begin the actual encryption process
; 7229 : 
; 7230 : 				ChangeSystemEncryptionStatus (SYSENC_STATUS_ENCRYPTING);

  02959	be 90 01 00 00	 mov	 esi, 400		; 00000190H
  0295e	e8 00 00 00 00	 call	 ?ChangeSystemEncryptionStatus@@YAHH@Z ; ChangeSystemEncryptionStatus

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  02963	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  02966	40		 inc	 eax
  02967	50		 push	 eax
  02968	53		 push	 ebx
  02969	e8 00 00 00 00	 call	 _LoadPage
  0296e	83 c4 08	 add	 esp, 8
  02971	b8 01 00 00 00	 mov	 eax, 1
  02976	e9 2d d7 ff ff	 jmp	 $LN517@MainDialog
$LN149@MainDialog:

; 7231 : 			}
; 7232 : 
; 7233 : 			else if (nCurPageNo == SYSENC_ENCRYPTION_PAGE
; 7234 : 				&& CreateSysEncMutex ())

  0297b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0297e	75 5d		 jne	 SHORT $LN147@MainDialog
  02980	e8 00 00 00 00	 call	 _CreateSysEncMutex
  02985	85 c0		 test	 eax, eax
  02987	74 4f		 je	 SHORT $LN1208@MainDialog

; 7235 : 			{
; 7236 : 				// The 'Next' button functions as Finish or Resume
; 7237 : 
; 7238 : 				if (SystemEncryptionStatus != SYSENC_STATUS_NONE)

  02989	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SystemEncryptionStatus, 0
  02990	74 2c		 je	 SHORT $LN146@MainDialog

; 7239 : 				{
; 7240 : 					try
; 7241 : 					{

  02992	c7 45 fc 3e 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 62 ; 0000003eH

; 7242 : 						// Resume
; 7243 : 						SysEncResume ();

  02999	e8 00 00 00 00	 call	 ?SysEncResume@@YAXXZ	; SysEncResume
$LN676@MainDialog:

; 5749 : 						return 1;

  0299e	b8 01 00 00 00	 mov	 eax, 1
  029a3	e9 00 d7 ff ff	 jmp	 $LN517@MainDialog
__catch$_MainDialogProc@16$39:

; 7244 : 					}
; 7245 : 					catch (Exception &e)
; 7246 : 					{
; 7247 : 						e.Show (hwndDlg);

  029a8	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134758[ebp]
  029ae	8b 11		 mov	 edx, DWORD PTR [ecx]
  029b0	8b 45 e4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  029b3	8b 12		 mov	 edx, DWORD PTR [edx]
  029b5	50		 push	 eax
  029b6	ff d2		 call	 edx

; 7248 : 					}

  029b8	b8 00 00 00 00	 mov	 eax, $LN676@MainDialog
  029bd	c3		 ret	 0
$LN146@MainDialog:

; 7249 : 				}
; 7250 : 				else
; 7251 : 				{
; 7252 : 					// Finish
; 7253 : 					PostMessage (hwndDlg, TC_APPMSG_FORMAT_USER_QUIT, 0, 0);

  029be	6a 00		 push	 0
  029c0	6a 00		 push	 0
  029c2	68 2f 81 00 00	 push	 33071			; 0000812fH
  029c7	53		 push	 ebx
  029c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  029ce	b8 01 00 00 00	 mov	 eax, 1
  029d3	e9 d0 d6 ff ff	 jmp	 $LN517@MainDialog
$LN1208@MainDialog:

; 7254 : 				}
; 7255 : 
; 7256 : 				return 1;

  029d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
$LN147@MainDialog:

; 7257 : 			}
; 7258 : 			else if (nCurPageNo == NONSYS_INPLACE_ENC_RESUME_PARTITION_SEL_PAGE)

  029dd	83 f8 21	 cmp	 eax, 33			; 00000021H
  029e0	75 1f		 jne	 SHORT $LN142@MainDialog

; 7259 : 			{
; 7260 : 				nNewPageNo = NONSYS_INPLACE_ENC_ENCRYPTION_PAGE - 1;	// Skip irrelevant pages

  029e2	c7 45 ec 23 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 35 ; 00000023H

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  029e9	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  029ec	40		 inc	 eax
  029ed	50		 push	 eax
  029ee	53		 push	 ebx
  029ef	e8 00 00 00 00	 call	 _LoadPage
  029f4	83 c4 08	 add	 esp, 8
  029f7	b8 01 00 00 00	 mov	 eax, 1
  029fc	e9 a7 d6 ff ff	 jmp	 $LN517@MainDialog
$LN142@MainDialog:

; 7261 : 			}
; 7262 : 			else if (nCurPageNo == NONSYS_INPLACE_ENC_ENCRYPTION_PAGE)

  02a01	83 f8 24	 cmp	 eax, 36			; 00000024H
  02a04	75 0f		 jne	 SHORT $LN140@MainDialog

; 7263 : 			{
; 7264 : 				/* In-place encryption start  (the 'Next' button has been clicked) */
; 7265 : 
; 7266 : 				NonSysInplaceEncResume ();

  02a06	e8 00 00 00 00	 call	 _NonSysInplaceEncResume
  02a0b	b8 01 00 00 00	 mov	 eax, 1
  02a10	e9 93 d6 ff ff	 jmp	 $LN517@MainDialog
$LN140@MainDialog:

; 7267 : 				return 1;
; 7268 : 			}
; 7269 : 			else if (nCurPageNo == NONSYS_INPLACE_ENC_ENCRYPTION_FINISHED_PAGE)

  02a15	83 f8 25	 cmp	 eax, 37			; 00000025H

; 7270 : 			{
; 7271 : 				PostMessage (hwndDlg, TC_APPMSG_FORMAT_USER_QUIT, 0, 0);
; 7272 : 				return 1;

  02a18	74 a4		 je	 SHORT $LN146@MainDialog

; 7273 : 			}
; 7274 : 			else if (nCurPageNo == FORMAT_PAGE)

  02a1a	83 f8 26	 cmp	 eax, 38			; 00000026H
  02a1d	0f 85 1e 06 00
	00		 jne	 $LN136@MainDialog

; 7275 : 			{
; 7276 : 				/* Format start  (the 'Next' button has been clicked on the Format page) */
; 7277 : 
; 7278 : 				if (bVolTransformThreadRunning || bVolTransformThreadToRun)

  02a23	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  02a28	85 c0		 test	 eax, eax
  02a2a	0f 85 38 da ff
	ff		 jne	 $LN487@MainDialog
  02a30	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  02a36	85 c9		 test	 ecx, ecx
  02a38	0f 85 2a da ff
	ff		 jne	 $LN487@MainDialog

; 7279 : 					return 1;
; 7280 : 				
; 7281 : 				bVolTransformThreadCancel = FALSE;
; 7282 : 
; 7283 : 				bVolTransformThreadToRun = TRUE;
; 7284 : 
; 7285 : 				fileSystem = SendMessage (GetDlgItem (hCurPage, IDC_FILESYS), CB_GETITEMDATA,
; 7286 : 					SendMessage (GetDlgItem (hCurPage, IDC_FILESYS), CB_GETCURSEL, 0, 0) , 0);

  02a3e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  02a44	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  02a4a	51		 push	 ecx
  02a4b	51		 push	 ecx
  02a4c	51		 push	 ecx
  02a4d	68 47 01 00 00	 push	 327			; 00000147H
  02a52	68 05 04 00 00	 push	 1029			; 00000405H
  02a57	89 0d 00 00 00
	00		 mov	 DWORD PTR _bVolTransformThreadCancel, ecx
  02a5d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bVolTransformThreadToRun@@3HC, 1 ; bVolTransformThreadToRun
  02a67	52		 push	 edx
  02a68	ff d6		 call	 esi
  02a6a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  02a70	50		 push	 eax
  02a71	ff d7		 call	 edi
  02a73	50		 push	 eax
  02a74	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  02a79	68 50 01 00 00	 push	 336			; 00000150H
  02a7e	68 05 04 00 00	 push	 1029			; 00000405H
  02a83	50		 push	 eax
  02a84	ff d6		 call	 esi
  02a86	50		 push	 eax
  02a87	ff d7		 call	 edi

; 7287 : 
; 7288 : 				clusterSize = SendMessage (GetDlgItem (hCurPage, IDC_CLUSTERSIZE), CB_GETITEMDATA,
; 7289 : 					SendMessage (GetDlgItem (hCurPage, IDC_CLUSTERSIZE), CB_GETCURSEL, 0, 0) , 0);

  02a89	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  02a8f	6a 00		 push	 0
  02a91	6a 00		 push	 0
  02a93	6a 00		 push	 0
  02a95	68 47 01 00 00	 push	 327			; 00000147H
  02a9a	68 04 04 00 00	 push	 1028			; 00000404H
  02a9f	a3 00 00 00 00	 mov	 DWORD PTR ?fileSystem@@3HC, eax ; fileSystem
  02aa4	51		 push	 ecx
  02aa5	ff d6		 call	 esi
  02aa7	50		 push	 eax
  02aa8	ff d7		 call	 edi
  02aaa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  02ab0	50		 push	 eax
  02ab1	68 50 01 00 00	 push	 336			; 00000150H
  02ab6	68 04 04 00 00	 push	 1028			; 00000404H
  02abb	52		 push	 edx
  02abc	ff d6		 call	 esi
  02abe	50		 push	 eax
  02abf	ff d7		 call	 edi
  02ac1	a3 00 00 00 00	 mov	 DWORD PTR ?clusterSize@@3HC, eax ; clusterSize

; 7290 : 
; 7291 : 				quickFormat = IsButtonChecked (GetDlgItem (hCurPage, IDC_QUICKFORMAT));

  02ac6	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  02acb	68 ff 03 00 00	 push	 1023			; 000003ffH
  02ad0	50		 push	 eax
  02ad1	ff d6		 call	 esi
  02ad3	50		 push	 eax
  02ad4	e8 00 00 00 00	 call	 _IsButtonChecked
  02ad9	a3 00 00 00 00	 mov	 DWORD PTR ?quickFormat@@3HC, eax ; quickFormat

; 7292 : 
; 7293 : 
; 7294 : 				if (!bHiddenVol && IsHiddenOSRunning())

  02ade	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  02ae4	83 c4 04	 add	 esp, 4
  02ae7	85 c9		 test	 ecx, ecx
  02ae9	0f 85 9e 01 00
	00		 jne	 $LN130@MainDialog
  02aef	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  02af4	85 c0		 test	 eax, eax
  02af6	0f 84 91 01 00
	00		 je	 $LN130@MainDialog

; 7295 : 				{
; 7296 : 					// Creating a non-hidden volume under a hidden OS
; 7297 : 
; 7298 : 					if (fileSystem == FILESYS_NTFS)	

  02afc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?fileSystem@@3HC ; fileSystem
  02b02	83 fa 02	 cmp	 edx, 2
  02b05	0f 85 82 01 00
	00		 jne	 $LN130@MainDialog

; 7299 : 					{
; 7300 : 						WarningDirect ((wstring (GetString ("CANNOT_CREATE_NON_HIDDEN_NTFS_VOLUMES_UNDER_HIDDEN_OS"))
; 7301 : 							+ L"\n\n"
; 7302 : 							+ GetString ("NOTE_BEGINNING")
; 7303 : 							+ GetString ("HIDDEN_OS_WRITE_PROTECTION_BRIEF_INFO")
; 7304 : 							+ L" "
; 7305 : 							+ GetString ("HIDDEN_OS_WRITE_PROTECTION_EXPLANATION")).c_str());

  02b0b	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@KNHACFHE@CANNOT_CREATE_NON_HIDDEN_NTFS_VO@
  02b10	e8 00 00 00 00	 call	 _GetString
  02b15	83 c4 04	 add	 esp, 4
  02b18	50		 push	 eax
  02b19	8d 8d d0 fc ff
	ff		 lea	 ecx, DWORD PTR $T169319[ebp]
  02b1f	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02b24	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  02b29	50		 push	 eax
  02b2a	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR $T169320[ebp]
  02b30	50		 push	 eax
  02b31	c7 45 fc 40 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 64 ; 00000040H
  02b38	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02b3d	8b f8		 mov	 edi, eax
  02b3f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JPAMOBPC@NOTE_BEGINNING?$AA@
  02b44	c6 45 fc 41	 mov	 BYTE PTR __$EHRec$[ebp+12], 65 ; 00000041H
  02b48	e8 00 00 00 00	 call	 _GetString
  02b4d	50		 push	 eax
  02b4e	8d 8d 08 fd ff
	ff		 lea	 ecx, DWORD PTR $T169321[ebp]
  02b54	57		 push	 edi
  02b55	51		 push	 ecx
  02b56	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02b5b	8b f8		 mov	 edi, eax
  02b5d	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@LFCLDECM@HIDDEN_OS_WRITE_PROTECTION_BRIEF@
  02b62	c6 45 fc 42	 mov	 BYTE PTR __$EHRec$[ebp+12], 66 ; 00000042H
  02b66	e8 00 00 00 00	 call	 _GetString
  02b6b	50		 push	 eax
  02b6c	8d 95 80 fb ff
	ff		 lea	 edx, DWORD PTR $T169322[ebp]
  02b72	57		 push	 edi
  02b73	52		 push	 edx
  02b74	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02b79	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  02b7e	50		 push	 eax
  02b7f	8d 85 40 fd ff
	ff		 lea	 eax, DWORD PTR $T169323[ebp]
  02b85	50		 push	 eax
  02b86	c6 45 fc 43	 mov	 BYTE PTR __$EHRec$[ebp+12], 67 ; 00000043H
  02b8a	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02b8f	8b f8		 mov	 edi, eax
  02b91	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@OILEALFF@HIDDEN_OS_WRITE_PROTECTION_EXPLA@
  02b96	c6 45 fc 44	 mov	 BYTE PTR __$EHRec$[ebp+12], 68 ; 00000044H
  02b9a	e8 00 00 00 00	 call	 _GetString
  02b9f	50		 push	 eax
  02ba0	8d 8d 78 fd ff
	ff		 lea	 ecx, DWORD PTR $T169324[ebp]
  02ba6	57		 push	 edi
  02ba7	51		 push	 ecx
  02ba8	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02bad	83 c4 48	 add	 esp, 72			; 00000048H
  02bb0	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  02bb4	72 05		 jb	 SHORT $LN965@MainDialog
  02bb6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  02bb9	eb 03		 jmp	 SHORT $LN966@MainDialog
$LN965@MainDialog:
  02bbb	83 c0 04	 add	 eax, 4
$LN966@MainDialog:
  02bbe	50		 push	 eax
  02bbf	e8 00 00 00 00	 call	 _WarningDirect
  02bc4	83 c4 04	 add	 esp, 4
  02bc7	8d 8d 78 fd ff
	ff		 lea	 ecx, DWORD PTR $T169324[ebp]
  02bcd	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02bd2	8d 8d 40 fd ff
	ff		 lea	 ecx, DWORD PTR $T169323[ebp]
  02bd8	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02bdd	8d 8d 80 fb ff
	ff		 lea	 ecx, DWORD PTR $T169322[ebp]
  02be3	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02be8	8d 8d 08 fd ff
	ff		 lea	 ecx, DWORD PTR $T169321[ebp]
  02bee	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02bf3	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR $T169320[ebp]
  02bf9	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  02bfe	8d 8d d0 fc ff
	ff		 lea	 ecx, DWORD PTR $T169319[ebp]
  02c04	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  02c0b	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 7306 : 
; 7307 : 						if (GetVolumeDataAreaSize (FALSE, nVolumeSize) <= TC_MAX_FAT_SECTOR_COUNT * GetFormatSectorSize()
; 7308 : 							&& AskYesNo("OFFER_FAT_FORMAT_ALTERNATIVE") == IDYES)

  02c10	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeSize@@3_KA+4
  02c16	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA
  02c1b	52		 push	 edx
  02c1c	50		 push	 eax
  02c1d	6a 00		 push	 0
  02c1f	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  02c24	83 c4 0c	 add	 esp, 12			; 0000000cH
  02c27	8b d8		 mov	 ebx, eax
  02c29	8b fa		 mov	 edi, edx
  02c2b	e8 00 00 00 00	 call	 _GetFormatSectorSize
  02c30	6a 01		 push	 1
  02c32	99		 cdq
  02c33	6a 00		 push	 0
  02c35	52		 push	 edx
  02c36	50		 push	 eax
  02c37	e8 00 00 00 00	 call	 __allmul
  02c3c	3b fa		 cmp	 edi, edx
  02c3e	0f 87 9b 01 00
	00		 ja	 $LN131@MainDialog
  02c44	72 08		 jb	 SHORT $LN1157@MainDialog
  02c46	3b d8		 cmp	 ebx, eax
  02c48	0f 87 91 01 00
	00		 ja	 $LN131@MainDialog
$LN1157@MainDialog:
  02c4e	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@EFIGHBDJ@OFFER_FAT_FORMAT_ALTERNATIVE?$AA@
  02c53	e8 00 00 00 00	 call	 _AskYesNo
  02c58	83 c4 04	 add	 esp, 4
  02c5b	83 f8 06	 cmp	 eax, 6
  02c5e	0f 85 7b 01 00
	00		 jne	 $LN131@MainDialog

; 7309 : 						{
; 7310 : 							fileSystem = FILESYS_FAT;
; 7311 : 							SelectAlgo (GetDlgItem (hCurPage, IDC_FILESYS), (int *) &fileSystem);

  02c64	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  02c6a	68 00 00 00 00	 push	 OFFSET ?fileSystem@@3HC	; fileSystem
  02c6f	68 05 04 00 00	 push	 1029			; 00000405H
  02c74	51		 push	 ecx
  02c75	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?fileSystem@@3HC, 1 ; fileSystem
  02c7f	ff d6		 call	 esi
  02c81	50		 push	 eax
  02c82	e8 00 00 00 00	 call	 _SelectAlgo

; 7312 : 						}
; 7313 : 						else

  02c87	8b 5d e4	 mov	 ebx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  02c8a	83 c4 08	 add	 esp, 8
$LN130@MainDialog:

; 7319 : 							return 1;
; 7320 : 						}
; 7321 : 					}
; 7322 : 				}
; 7323 : 
; 7324 : 				if (bHiddenVolHost)

  02c8d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  02c93	85 c9		 test	 ecx, ecx
  02c95	0f 84 f9 01 00
	00		 je	 $LN128@MainDialog

; 7325 : 				{
; 7326 : 					hiddenVolHostDriveNo = -1;
; 7327 : 					nMaximumHiddenVolSize = 0;
; 7328 : 
; 7329 : 					if (fileSystem == FILESYS_NTFS)	

  02c9b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?fileSystem@@3HC ; fileSystem
  02ca1	33 c0		 xor	 eax, eax
  02ca3	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?hiddenVolHostDriveNo@@3HA, -1 ; hiddenVolHostDriveNo
  02cad	a3 00 00 00 00	 mov	 DWORD PTR ?nMaximumHiddenVolSize@@3_JA, eax
  02cb2	a3 04 00 00 00	 mov	 DWORD PTR ?nMaximumHiddenVolSize@@3_JA+4, eax
  02cb7	83 fa 02	 cmp	 edx, 2
  02cba	0f 85 ef 01 00
	00		 jne	 $LN117@MainDialog

; 7330 : 					{
; 7331 : 						if (bHiddenOS
; 7332 : 							&& (double) nVolumeSize / GetSystemPartitionSize() < MIN_HIDDENOS_DECOY_PARTITION_SIZE_RATIO_NTFS)

  02cc0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  02cc5	85 c0		 test	 eax, eax
  02cc7	0f 84 d5 00 00
	00		 je	 $LN124@MainDialog
  02ccd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nVolumeSize@@3_KA
  02cd3	a1 04 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA+4
  02cd8	89 4d d8	 mov	 DWORD PTR tv5807[ebp], ecx
  02cdb	8b c8		 mov	 ecx, eax
  02cdd	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  02ce2	89 45 dc	 mov	 DWORD PTR tv5807[ebp+4], eax
  02ce5	df 6d d8	 fild	 QWORD PTR tv5807[ebp]
  02ce8	81 e1 00 00 00
	80		 and	 ecx, -2147483648	; 80000000H
  02cee	89 4d dc	 mov	 DWORD PTR tv5804[ebp+4], ecx
  02cf1	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv5804[ebp], 0
  02cf8	df 6d d8	 fild	 QWORD PTR tv5804[ebp]
  02cfb	d9 e0		 fchs
  02cfd	de c1		 faddp	 ST(1), ST(0)
  02cff	dd 5d e0	 fstp	 QWORD PTR tv5131[ebp]
  02d02	e8 00 00 00 00	 call	 ?GetSystemPartitionSize@@YA_JXZ ; GetSystemPartitionSize
  02d07	89 45 d8	 mov	 DWORD PTR tv5790[ebp], eax
  02d0a	89 55 dc	 mov	 DWORD PTR tv5790[ebp+4], edx
  02d0d	df 6d d8	 fild	 QWORD PTR tv5790[ebp]
  02d10	dc 7d e0	 fdivr	 QWORD PTR tv5131[ebp]
  02d13	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@4000cccccccccccd
  02d19	df e0		 fnstsw	 ax
  02d1b	f6 c4 05	 test	 ah, 5
  02d1e	0f 8a 7e 00 00
	00		 jp	 $LN124@MainDialog

; 7333 : 						{
; 7334 : 							Error("OUTER_VOLUME_TOO_SMALL_FOR_HIDDEN_OS_NTFS");

  02d24	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@PNCJJOHK@OUTER_VOLUME_TOO_SMALL_FOR_HIDDE@
  02d29	e8 00 00 00 00	 call	 _Error

; 7335 : 
; 7336 : 							if (GetVolumeDataAreaSize (FALSE, nVolumeSize) <= TC_MAX_FAT_SECTOR_COUNT * GetFormatSectorSize()
; 7337 : 								&& AskYesNo("OFFER_FAT_FORMAT_ALTERNATIVE") == IDYES)

  02d2e	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeSize@@3_KA+4
  02d34	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA
  02d39	52		 push	 edx
  02d3a	50		 push	 eax
  02d3b	6a 00		 push	 0
  02d3d	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  02d42	83 c4 10	 add	 esp, 16			; 00000010H
  02d45	89 45 d8	 mov	 DWORD PTR tv5756[ebp], eax
  02d48	8b fa		 mov	 edi, edx
  02d4a	e8 00 00 00 00	 call	 _GetFormatSectorSize
  02d4f	6a 01		 push	 1
  02d51	99		 cdq
  02d52	6a 00		 push	 0
  02d54	52		 push	 edx
  02d55	50		 push	 eax
  02d56	e8 00 00 00 00	 call	 __allmul
  02d5b	3b fa		 cmp	 edi, edx
  02d5d	0f 87 7c 00 00
	00		 ja	 $LN131@MainDialog
  02d63	72 05		 jb	 SHORT $LN1159@MainDialog
  02d65	39 45 d8	 cmp	 DWORD PTR tv5756[ebp], eax
  02d68	77 75		 ja	 SHORT $LN131@MainDialog
$LN1159@MainDialog:
  02d6a	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@EFIGHBDJ@OFFER_FAT_FORMAT_ALTERNATIVE?$AA@
  02d6f	e8 00 00 00 00	 call	 _AskYesNo
  02d74	83 c4 04	 add	 esp, 4
  02d77	83 f8 06	 cmp	 eax, 6
  02d7a	75 63		 jne	 SHORT $LN131@MainDialog

; 7338 : 							{
; 7339 : 								fileSystem = FILESYS_FAT;
; 7340 : 								SelectAlgo (GetDlgItem (hCurPage, IDC_FILESYS), (int *) &fileSystem);

  02d7c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  02d82	68 00 00 00 00	 push	 OFFSET ?fileSystem@@3HC	; fileSystem
  02d87	68 05 04 00 00	 push	 1029			; 00000405H
  02d8c	51		 push	 ecx
  02d8d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?fileSystem@@3HC, 1 ; fileSystem
  02d97	ff d6		 call	 esi
  02d99	50		 push	 eax
  02d9a	e8 00 00 00 00	 call	 _SelectAlgo
  02d9f	83 c4 08	 add	 esp, 8
$LN124@MainDialog:

; 7341 : 							}
; 7342 : 							else
; 7343 : 							{
; 7344 : 								if (GetVolumeDataAreaSize (FALSE, nVolumeSize) > TC_MAX_FAT_SECTOR_COUNT * GetFormatSectorSize())
; 7345 : 									Info ("FAT_NOT_AVAILABLE_FOR_SO_LARGE_VOLUME");
; 7346 : 
; 7347 : 								bVolTransformThreadToRun = FALSE;
; 7348 : 								return 1;
; 7349 : 							}
; 7350 : 						}
; 7351 : 
; 7352 : 						if (fileSystem == FILESYS_NTFS)	// The file system may have been changed in the previous block

  02da2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?fileSystem@@3HC ; fileSystem
  02da8	83 f9 02	 cmp	 ecx, 2
  02dab	0f 85 fe 00 00
	00		 jne	 $LN117@MainDialog

; 7353 : 						{
; 7354 : 							if (nCurrentOS == WIN_2000)

  02db1	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _nCurrentOS, 7
  02db8	0f 85 78 00 00
	00		 jne	 $LN121@MainDialog

; 7355 : 							{
; 7356 : 								Error("HIDDEN_VOL_HOST_UNSUPPORTED_FILESYS_WIN2000");

  02dbe	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@PCAIDDLK@HIDDEN_VOL_HOST_UNSUPPORTED_FILE@
  02dc3	e8 00 00 00 00	 call	 _Error
  02dc8	83 c4 04	 add	 esp, 4
  02dcb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bVolTransformThreadToRun@@3HC, 0 ; bVolTransformThreadToRun
  02dd5	b8 01 00 00 00	 mov	 eax, 1
  02dda	e9 c9 d2 ff ff	 jmp	 $LN517@MainDialog
$LN131@MainDialog:

; 7314 : 						{
; 7315 : 							if (GetVolumeDataAreaSize (FALSE, nVolumeSize) > TC_MAX_FAT_SECTOR_COUNT * GetFormatSectorSize())

  02ddf	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeSize@@3_KA+4
  02de5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA
  02dea	52		 push	 edx
  02deb	50		 push	 eax
  02dec	6a 00		 push	 0
  02dee	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  02df3	83 c4 0c	 add	 esp, 12			; 0000000cH
  02df6	8b f2		 mov	 esi, edx
  02df8	8b f8		 mov	 edi, eax
  02dfa	e8 00 00 00 00	 call	 _GetFormatSectorSize
  02dff	6a 01		 push	 1
  02e01	99		 cdq
  02e02	6a 00		 push	 0
  02e04	52		 push	 edx
  02e05	50		 push	 eax
  02e06	e8 00 00 00 00	 call	 __allmul
  02e0b	3b f2		 cmp	 esi, edx
  02e0d	72 13		 jb	 SHORT $LN129@MainDialog
  02e0f	77 04		 ja	 SHORT $LN1158@MainDialog
  02e11	3b f8		 cmp	 edi, eax
  02e13	76 0d		 jbe	 SHORT $LN129@MainDialog
$LN1158@MainDialog:

; 7316 : 								Info ("FAT_NOT_AVAILABLE_FOR_SO_LARGE_VOLUME");

  02e15	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@HAPBHPDC@FAT_NOT_AVAILABLE_FOR_SO_LARGE_V@
  02e1a	e8 00 00 00 00	 call	 _Info
  02e1f	83 c4 04	 add	 esp, 4
$LN129@MainDialog:

; 7317 : 
; 7318 : 							bVolTransformThreadToRun = FALSE;

  02e22	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bVolTransformThreadToRun@@3HC, 0 ; bVolTransformThreadToRun
  02e2c	b8 01 00 00 00	 mov	 eax, 1
  02e31	e9 72 d2 ff ff	 jmp	 $LN517@MainDialog
$LN121@MainDialog:

; 7357 : 								bVolTransformThreadToRun = FALSE;
; 7358 : 								return 1;
; 7359 : 							}
; 7360 : 							else if (GetVolumeDataAreaSize (FALSE, nVolumeSize) <= TC_MAX_FAT_SECTOR_COUNT * GetFormatSectorSize()
; 7361 : 								&& AskYesNo("HIDDEN_VOL_HOST_NTFS_ASK") == IDNO)

  02e36	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeSize@@3_KA+4
  02e3c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA
  02e41	52		 push	 edx
  02e42	50		 push	 eax
  02e43	6a 00		 push	 0
  02e45	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  02e4a	83 c4 0c	 add	 esp, 12			; 0000000cH
  02e4d	89 45 d8	 mov	 DWORD PTR tv5678[ebp], eax
  02e50	8b fa		 mov	 edi, edx
  02e52	e8 00 00 00 00	 call	 _GetFormatSectorSize
  02e57	6a 01		 push	 1
  02e59	99		 cdq
  02e5a	6a 00		 push	 0
  02e5c	52		 push	 edx
  02e5d	50		 push	 eax
  02e5e	e8 00 00 00 00	 call	 __allmul
  02e63	3b fa		 cmp	 edi, edx
  02e65	77 48		 ja	 SHORT $LN117@MainDialog
  02e67	72 05		 jb	 SHORT $LN1161@MainDialog
  02e69	39 45 d8	 cmp	 DWORD PTR tv5678[ebp], eax
  02e6c	77 41		 ja	 SHORT $LN117@MainDialog
$LN1161@MainDialog:
  02e6e	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@NALGNOGO@HIDDEN_VOL_HOST_NTFS_ASK?$AA@
  02e73	e8 00 00 00 00	 call	 _AskYesNo
  02e78	83 c4 04	 add	 esp, 4
  02e7b	83 f8 07	 cmp	 eax, 7
  02e7e	75 2f		 jne	 SHORT $LN117@MainDialog
  02e80	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bVolTransformThreadToRun@@3HC, 0 ; bVolTransformThreadToRun
  02e8a	b8 01 00 00 00	 mov	 eax, 1
  02e8f	e9 14 d2 ff ff	 jmp	 $LN517@MainDialog
$LN128@MainDialog:

; 7362 : 							{
; 7363 : 								bVolTransformThreadToRun = FALSE;
; 7364 : 								return 1;
; 7365 : 							}
; 7366 : 						}
; 7367 : 					}
; 7368 : 				}
; 7369 : 				else if (bHiddenVol)

  02e94	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  02e9a	85 c9		 test	 ecx, ecx
  02e9c	74 11		 je	 SHORT $LN117@MainDialog

; 7370 : 				{
; 7371 : 					// Hidden volume is always quick-formatted (if, however, the meaning of quickFormat is 
; 7372 : 					// whether to create a sparse file, it must be set to FALSE).
; 7373 : 					quickFormat = !bSparseFileSwitch;	

  02e9e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bSparseFileSwitch@@3HC ; bSparseFileSwitch
  02ea4	f7 da		 neg	 edx
  02ea6	1b d2		 sbb	 edx, edx
  02ea8	42		 inc	 edx
  02ea9	89 15 00 00 00
	00		 mov	 DWORD PTR ?quickFormat@@3HC, edx ; quickFormat
$LN117@MainDialog:

; 7374 : 				}
; 7375 : 
; 7376 : 
; 7377 : 				if (fileSystem == FILESYS_FAT
; 7378 : 					&& nNeedToStoreFilesOver4GB == 1
; 7379 : 					&& AskWarnNoYes("CONFIRM_FAT_FOR_FILES_OVER_4GB") == IDNO)

  02eaf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?fileSystem@@3HC ; fileSystem
  02eb4	83 f8 01	 cmp	 eax, 1
  02eb7	75 1e		 jne	 SHORT $LN116@MainDialog
  02eb9	39 05 00 00 00
	00		 cmp	 DWORD PTR ?nNeedToStoreFilesOver4GB@@3HA, eax ; nNeedToStoreFilesOver4GB
  02ebf	75 16		 jne	 SHORT $LN116@MainDialog
  02ec1	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@NLBJKNFD@CONFIRM_FAT_FOR_FILES_OVER_4GB?$AA@
  02ec6	e8 00 00 00 00	 call	 _AskWarnNoYes
  02ecb	83 c4 04	 add	 esp, 4
  02ece	83 f8 07	 cmp	 eax, 7

; 7380 : 				{
; 7381 : 					bVolTransformThreadToRun = FALSE;
; 7382 : 					return 1;

  02ed1	0f 84 4b ff ff
	ff		 je	 $LN129@MainDialog
$LN116@MainDialog:

; 7383 : 				}
; 7384 : 
; 7385 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_PREV), FALSE);

  02ed7	6a 00		 push	 0
  02ed9	68 11 04 00 00	 push	 1041			; 00000411H
  02ede	53		 push	 ebx
  02edf	ff d6		 call	 esi
  02ee1	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  02ee7	50		 push	 eax
  02ee8	ff d7		 call	 edi

; 7386 : 				EnableWindow (GetDlgItem (hwndDlg, IDC_NEXT), FALSE);

  02eea	6a 00		 push	 0
  02eec	68 10 04 00 00	 push	 1040			; 00000410H
  02ef1	53		 push	 ebx
  02ef2	ff d6		 call	 esi
  02ef4	50		 push	 eax
  02ef5	ff d7		 call	 edi

; 7387 : 				EnableWindow (GetDlgItem (hwndDlg, IDHELP), FALSE);

  02ef7	6a 00		 push	 0
  02ef9	6a 09		 push	 9
  02efb	53		 push	 ebx
  02efc	ff d6		 call	 esi
  02efe	50		 push	 eax
  02eff	ff d7		 call	 edi

; 7388 : 				EnableWindow (GetDlgItem (hwndDlg, IDCANCEL), FALSE);

  02f01	6a 00		 push	 0
  02f03	6a 02		 push	 2
  02f05	53		 push	 ebx
  02f06	ff d6		 call	 esi
  02f08	50		 push	 eax
  02f09	ff d7		 call	 edi

; 7389 : 				EnableWindow (GetDlgItem (hCurPage, IDC_QUICKFORMAT), FALSE);

  02f0b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  02f11	6a 00		 push	 0
  02f13	68 ff 03 00 00	 push	 1023			; 000003ffH
  02f18	51		 push	 ecx
  02f19	ff d6		 call	 esi
  02f1b	50		 push	 eax
  02f1c	ff d7		 call	 edi

; 7390 : 				EnableWindow (GetDlgItem (hCurPage, IDC_CLUSTERSIZE), FALSE);

  02f1e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  02f24	6a 00		 push	 0
  02f26	68 04 04 00 00	 push	 1028			; 00000404H
  02f2b	52		 push	 edx
  02f2c	ff d6		 call	 esi
  02f2e	50		 push	 eax
  02f2f	ff d7		 call	 edi

; 7391 : 				EnableWindow (GetDlgItem (hCurPage, IDC_FILESYS), FALSE);

  02f31	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  02f36	6a 00		 push	 0
  02f38	68 05 04 00 00	 push	 1029			; 00000405H
  02f3d	50		 push	 eax
  02f3e	ff d6		 call	 esi
  02f40	50		 push	 eax
  02f41	ff d7		 call	 edi

; 7392 : 				EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), TRUE);

  02f43	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  02f49	6a 01		 push	 1
  02f4b	68 f8 03 00 00	 push	 1016			; 000003f8H
  02f50	51		 push	 ecx
  02f51	ff d6		 call	 esi
  02f53	50		 push	 eax
  02f54	ff d7		 call	 edi

; 7393 : 				SetFocus (GetDlgItem (hCurPage, IDC_ABORT_BUTTON));

  02f56	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  02f5c	68 f8 03 00 00	 push	 1016			; 000003f8H
  02f61	52		 push	 edx
  02f62	ff d6		 call	 esi
  02f64	50		 push	 eax
  02f65	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 7394 : 
; 7395 : 				// Increase cluster size if it's too small for this volume size (causes size of
; 7396 : 				// free space to be 0). Note that the below constant 0x2000000 is based on
; 7397 : 				// results of tests performed under Windows XP.
; 7398 : 				if (fileSystem == FILESYS_FAT && clusterSize > 0)

  02f6b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?fileSystem@@3HC ; fileSystem
  02f70	83 f8 01	 cmp	 eax, 1
  02f73	0f 85 99 00 00
	00		 jne	 $LN112@MainDialog
  02f79	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clusterSize@@3HC ; clusterSize
  02f7f	85 c9		 test	 ecx, ecx
  02f81	0f 8e 8b 00 00
	00		 jle	 $LN112@MainDialog

; 7399 : 				{
; 7400 : 					BOOL fixed = FALSE;
; 7401 : 					while (clusterSize < 128 
; 7402 : 						&& nVolumeSize / (clusterSize * GetFormatSectorSize()) > 0x2000000)

  02f87	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?clusterSize@@3HC ; clusterSize
  02f8d	33 f6		 xor	 esi, esi
  02f8f	81 fa 80 00 00
	00		 cmp	 edx, 128		; 00000080H
  02f95	0f 8d 77 00 00
	00		 jge	 $LN112@MainDialog
  02f9b	eb 03 8d 49 00	 npad	 5
$LL114@MainDialog:
  02fa0	e8 00 00 00 00	 call	 _GetFormatSectorSize
  02fa5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clusterSize@@3HC ; clusterSize
  02fab	0f af c1	 imul	 eax, ecx
  02fae	99		 cdq
  02faf	52		 push	 edx
  02fb0	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?nVolumeSize@@3_KA+4
  02fb6	50		 push	 eax
  02fb7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nVolumeSize@@3_KA
  02fbc	52		 push	 edx
  02fbd	50		 push	 eax
  02fbe	e8 00 00 00 00	 call	 __aulldiv
  02fc3	85 d2		 test	 edx, edx
  02fc5	77 07		 ja	 SHORT $LN1162@MainDialog
  02fc7	3d 00 00 00 02	 cmp	 eax, 33554432		; 02000000H
  02fcc	76 23		 jbe	 SHORT $LN113@MainDialog
$LN1162@MainDialog:

; 7403 : 					{
; 7404 : 						clusterSize *= 2;

  02fce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?clusterSize@@3HC ; clusterSize
  02fd4	03 c9		 add	 ecx, ecx
  02fd6	89 0d 00 00 00
	00		 mov	 DWORD PTR ?clusterSize@@3HC, ecx ; clusterSize
  02fdc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?clusterSize@@3HC ; clusterSize
  02fe2	81 fa 80 00 00
	00		 cmp	 edx, 128		; 00000080H

; 7405 : 						fixed = TRUE;

  02fe8	be 01 00 00 00	 mov	 esi, 1
  02fed	7c b1		 jl	 SHORT $LL114@MainDialog

; 7406 : 					}
; 7407 : 					if (fixed)

  02fef	eb 04		 jmp	 SHORT $LN1125@MainDialog
$LN113@MainDialog:
  02ff1	85 f6		 test	 esi, esi
  02ff3	74 1d		 je	 SHORT $LN112@MainDialog
$LN1125@MainDialog:

; 7408 : 						MessageBoxW (hwndDlg, GetString ("CLUSTER_TOO_SMALL"), lpszTitle, MB_ICONWARNING);

  02ff5	a1 00 00 00 00	 mov	 eax, DWORD PTR _lpszTitle
  02ffa	6a 30		 push	 48			; 00000030H
  02ffc	50		 push	 eax
  02ffd	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@DADPIOMM@CLUSTER_TOO_SMALL?$AA@
  03002	e8 00 00 00 00	 call	 _GetString
  03007	83 c4 04	 add	 esp, 4
  0300a	50		 push	 eax
  0300b	53		 push	 ebx
  0300c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN112@MainDialog:

; 7409 : 				}
; 7410 : 
; 7411 : 				LastDialogId = "FORMAT_IN_PROGRESS";

  03012	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LastDialogId, OFFSET ??_C@_0BD@NGECJJAH@FORMAT_IN_PROGRESS?$AA@

; 7412 : 				ArrowWaitCursor ();

  0301c	e8 00 00 00 00	 call	 _ArrowWaitCursor

; 7413 : 				_beginthread (volTransformThreadFunction, 0, MainDlg);

  03021	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  03027	51		 push	 ecx
  03028	6a 00		 push	 0
  0302a	68 00 00 00 00	 push	 OFFSET _volTransformThreadFunction
  0302f	e8 00 00 00 00	 call	 __beginthread
  03034	83 c4 0c	 add	 esp, 12			; 0000000cH
  03037	b8 01 00 00 00	 mov	 eax, 1
  0303c	e9 67 d0 ff ff	 jmp	 $LN517@MainDialog
$LN136@MainDialog:

; 7414 : 
; 7415 : 				return 1;
; 7416 : 			}
; 7417 : 
; 7418 : 			else if (nCurPageNo == FORMAT_FINISHED_PAGE)

  03041	83 f8 27	 cmp	 eax, 39			; 00000027H
  03044	0f 85 cc 04 00
	00		 jne	 $LN110@MainDialog

; 7419 : 			{
; 7420 : 				if (!bHiddenVol || bHiddenVolFinished)

  0304a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  03050	85 d2		 test	 edx, edx
  03052	0f 84 5f 02 00
	00		 je	 $LN108@MainDialog
  03058	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVolFinished@@3HC ; bHiddenVolFinished
  0305d	85 c0		 test	 eax, eax
  0305f	0f 85 52 02 00
	00		 jne	 $LN108@MainDialog

; 7454 : 
; 7455 : 					return 1;
; 7456 : 				}
; 7457 : 				else
; 7458 : 				{
; 7459 : 					/* We're going to scan the bitmap of the hidden volume host (in the non-Direct hidden volume wizard mode) */
; 7460 : 					int retCode;
; 7461 : 					WaitCursor ();

  03065	e8 00 00 00 00	 call	 _WaitCursor

; 7462 : 
; 7463 : 					if (hiddenVolHostDriveNo != -1)		// If the hidden volume host is mounted

  0306a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  0306f	83 cf ff	 or	 edi, -1
  03072	3b c7		 cmp	 eax, edi
  03074	74 6d		 je	 SHORT $LN1211@MainDialog

; 7464 : 					{
; 7465 : 						BOOL tmp_result;
; 7466 : 
; 7467 : 						// Dismount the hidden volume host (in order to remount it as read-only subsequently)
; 7468 : 						CloseVolumeExplorerWindows (hwndDlg, hiddenVolHostDriveNo);

  03076	50		 push	 eax
  03077	53		 push	 ebx
  03078	e8 00 00 00 00	 call	 _CloseVolumeExplorerWindows

; 7469 : 						while (!(tmp_result = UnmountVolume (hwndDlg, hiddenVolHostDriveNo, TRUE)))

  0307d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  03083	6a 01		 push	 1
  03085	51		 push	 ecx
  03086	53		 push	 ebx
  03087	e8 00 00 00 00	 call	 _UnmountVolume
  0308c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__MessageBoxW@16
  03092	83 c4 14	 add	 esp, 20			; 00000014H
  03095	85 c0		 test	 eax, eax
  03097	75 42		 jne	 SHORT $LN1119@MainDialog
  03099	8d a4 24 00 00
	00 00		 npad	 7
$LL101@MainDialog:

; 7470 : 						{
; 7471 : 							if (MessageBoxW (hwndDlg, GetString ("CANT_DISMOUNT_OUTER_VOL"), lpszTitle, MB_RETRYCANCEL | MB_ICONERROR | MB_SETFOREGROUND) != IDRETRY)

  030a0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  030a6	68 15 00 01 00	 push	 65557			; 00010015H
  030ab	52		 push	 edx
  030ac	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@GNHKCMLM@CANT_DISMOUNT_OUTER_VOL?$AA@
  030b1	e8 00 00 00 00	 call	 _GetString
  030b6	83 c4 04	 add	 esp, 4
  030b9	50		 push	 eax
  030ba	53		 push	 ebx
  030bb	ff d6		 call	 esi
  030bd	83 f8 04	 cmp	 eax, 4
  030c0	0f 85 01 e9 ff
	ff		 jne	 $LN1249@MainDialog
  030c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  030cb	6a 01		 push	 1
  030cd	50		 push	 eax
  030ce	53		 push	 ebx
  030cf	e8 00 00 00 00	 call	 _UnmountVolume
  030d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  030d7	85 c0		 test	 eax, eax
  030d9	74 c5		 je	 SHORT $LL101@MainDialog
$LN1119@MainDialog:

; 7472 : 							{
; 7473 : 								// Cancel
; 7474 : 								NormalCursor();
; 7475 : 								return 1;
; 7476 : 							}
; 7477 : 						}
; 7478 : 						if (tmp_result)		// If dismounted
; 7479 : 							hiddenVolHostDriveNo = -1;

  030db	89 3d 00 00 00
	00		 mov	 DWORD PTR ?hiddenVolHostDriveNo@@3HA, edi ; hiddenVolHostDriveNo
  030e1	eb 06		 jmp	 SHORT $LN98@MainDialog
$LN1211@MainDialog:
  030e3	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__MessageBoxW@16
$LN98@MainDialog:

; 7480 : 					}
; 7481 : 
; 7482 : 					if (hiddenVolHostDriveNo < 0)		// If the hidden volume host is not mounted
; 7483 : 					{
; 7484 : 						// Remount the hidden volume host as read-only (to ensure consistent and secure
; 7485 : 						// results of the volume bitmap scanning)
; 7486 : 						switch (MountHiddenVolHost (hwndDlg, szDiskFile, &hiddenVolHostDriveNo, &volumePassword, TRUE))

  030e9	6a 01		 push	 1
  030eb	68 00 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A ; volumePassword
  030f0	68 00 00 00 00	 push	 OFFSET ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  030f5	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  030fa	53		 push	 ebx
  030fb	e8 00 00 00 00	 call	 _MountHiddenVolHost
  03100	83 c4 14	 add	 esp, 20			; 00000014H
  03103	83 f8 18	 cmp	 eax, 24			; 00000018H
  03106	0f 87 c7 0a 00
	00		 ja	 $LN209@MainDialog
  0310c	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN1163@MainDialog[eax]
  03113	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN1258@MainDialog[ecx*4]
$LN94@MainDialog:

; 7487 : 						{
; 7488 : 						case ERR_NO_FREE_DRIVES:
; 7489 : 							MessageBoxW (hwndDlg, GetString ("NO_FREE_DRIVE_FOR_OUTER_VOL"), lpszTitle, ICON_HAND);

  0311a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  03120	6a 10		 push	 16			; 00000010H
  03122	52		 push	 edx
  03123	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DNIPKEFC@NO_FREE_DRIVE_FOR_OUTER_VOL?$AA@
  03128	e8 00 00 00 00	 call	 _GetString
  0312d	83 c4 04	 add	 esp, 4
  03130	50		 push	 eax
  03131	53		 push	 ebx
  03132	ff d6		 call	 esi

; 7490 : 							NormalCursor ();

  03134	e8 00 00 00 00	 call	 _NormalCursor
  03139	b8 01 00 00 00	 mov	 eax, 1
  0313e	e9 65 cf ff ff	 jmp	 $LN517@MainDialog
$LN92@MainDialog:

; 7491 : 							return 1;
; 7492 : 
; 7493 : 						case ERR_VOL_MOUNT_FAILED:
; 7494 : 						case ERR_PASSWORD_WRONG:
; 7495 : 							NormalCursor ();
; 7496 : 							return 1;
; 7497 : 
; 7498 : 						case 0:
; 7499 : 
; 7500 : 							/* Hidden volume host successfully mounted as read-only */
; 7501 : 
; 7502 : 							// Verify that the outer volume contains a suitable file system, retrieve cluster size, and 
; 7503 : 							// scan the volume bitmap
; 7504 : 							if (!IsAdmin () && IsUacSupported ())

  03143	e8 00 00 00 00	 call	 _IsAdmin
  03148	85 c0		 test	 eax, eax
  0314a	75 39		 jne	 SHORT $LN91@MainDialog
  0314c	e8 00 00 00 00	 call	 _IsUacSupported
  03151	85 c0		 test	 eax, eax
  03153	74 30		 je	 SHORT $LN91@MainDialog

; 7505 : 								retCode = UacAnalyzeHiddenVolumeHost (hwndDlg, &hiddenVolHostDriveNo, GetVolumeDataAreaSize (FALSE, nHiddenVolHostSize), &realClusterSize, &nbrFreeClusters);

  03155	a1 04 00 00 00	 mov	 eax, DWORD PTR ?nHiddenVolHostSize@@3_KA+4
  0315a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nHiddenVolHostSize@@3_KA
  03160	68 00 00 00 00	 push	 OFFSET ?nbrFreeClusters@@3_JA ; nbrFreeClusters
  03165	68 00 00 00 00	 push	 OFFSET ?realClusterSize@@3HA ; realClusterSize
  0316a	50		 push	 eax
  0316b	51		 push	 ecx
  0316c	6a 00		 push	 0
  0316e	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  03173	83 c4 0c	 add	 esp, 12			; 0000000cH
  03176	52		 push	 edx
  03177	50		 push	 eax
  03178	68 00 00 00 00	 push	 OFFSET ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  0317d	53		 push	 ebx
  0317e	e8 00 00 00 00	 call	 _UacAnalyzeHiddenVolumeHost

; 7506 : 							else

  03183	eb 2e		 jmp	 SHORT $LN1241@MainDialog
$LN91@MainDialog:

; 7507 : 								retCode = AnalyzeHiddenVolumeHost (hwndDlg, &hiddenVolHostDriveNo, GetVolumeDataAreaSize (FALSE, nHiddenVolHostSize), &realClusterSize, &nbrFreeClusters);

  03185	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?nHiddenVolHostSize@@3_KA+4
  0318b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nHiddenVolHostSize@@3_KA
  03190	68 00 00 00 00	 push	 OFFSET ?nbrFreeClusters@@3_JA ; nbrFreeClusters
  03195	68 00 00 00 00	 push	 OFFSET ?realClusterSize@@3HA ; realClusterSize
  0319a	52		 push	 edx
  0319b	50		 push	 eax
  0319c	6a 00		 push	 0
  0319e	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  031a3	83 c4 0c	 add	 esp, 12			; 0000000cH
  031a6	52		 push	 edx
  031a7	50		 push	 eax
  031a8	68 00 00 00 00	 push	 OFFSET ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  031ad	53		 push	 ebx
  031ae	e8 00 00 00 00	 call	 _AnalyzeHiddenVolumeHost
$LN1241@MainDialog:
  031b3	83 c4 18	 add	 esp, 24			; 00000018H

; 7508 : 
; 7509 : 							switch (retCode)

  031b6	3b c7		 cmp	 eax, edi
  031b8	0f 84 b4 00 00
	00		 je	 $LN87@MainDialog
  031be	85 c0		 test	 eax, eax
  031c0	0f 84 01 e8 ff
	ff		 je	 $LN1249@MainDialog
  031c6	83 f8 01	 cmp	 eax, 1
  031c9	0f 85 04 0a 00
	00		 jne	 $LN209@MainDialog

; 7518 : 								break;
; 7519 : 
; 7520 : 							case 0:		// Unsupported file system (or other non-fatal error which has already been reported)
; 7521 : 								NormalCursor ();
; 7522 : 								return 1;
; 7523 : 
; 7524 : 							case 1:		// Success
; 7525 : 								{
; 7526 : 									BOOL tmp_result;
; 7527 : 
; 7528 : 									// Determine the maximum possible size of the hidden volume
; 7529 : 									if (DetermineMaxHiddenVolSize (hwndDlg) < 1)

  031cf	53		 push	 ebx
  031d0	e8 00 00 00 00	 call	 _DetermineMaxHiddenVolSize
  031d5	83 c4 04	 add	 esp, 4
  031d8	83 f8 01	 cmp	 eax, 1
  031db	7d 0f		 jge	 SHORT $LN1091@MainDialog
$LN1099@MainDialog:

; 7530 : 									{
; 7531 : 										NormalCursor ();

  031dd	e8 00 00 00 00	 call	 _NormalCursor
$ovf_end_5$134850:
  031e2	b8 01 00 00 00	 mov	 eax, 1
  031e7	e9 bc ce ff ff	 jmp	 $LN517@MainDialog
$LN1091@MainDialog:

; 7532 : 										goto ovf_end;
; 7533 : 									}
; 7534 : 
; 7535 : 									/* Maximum possible size of the hidden volume successfully determined */
; 7536 : 
; 7537 : 									// Dismount the hidden volume host
; 7538 : 									while (!(tmp_result = UnmountVolume (hwndDlg, hiddenVolHostDriveNo, TRUE)))

  031ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  031f2	6a 01		 push	 1
  031f4	51		 push	 ecx
  031f5	53		 push	 ebx
  031f6	e8 00 00 00 00	 call	 _UnmountVolume
  031fb	83 c4 0c	 add	 esp, 12			; 0000000cH
  031fe	85 c0		 test	 eax, eax
  03200	75 34		 jne	 SHORT $LN80@MainDialog
$LL81@MainDialog:

; 7539 : 									{
; 7540 : 										if (MessageBoxW (hwndDlg, GetString ("CANT_DISMOUNT_OUTER_VOL"), lpszTitle, MB_RETRYCANCEL) != IDRETRY)

  03202	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  03208	6a 05		 push	 5
  0320a	52		 push	 edx
  0320b	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@GNHKCMLM@CANT_DISMOUNT_OUTER_VOL?$AA@
  03210	e8 00 00 00 00	 call	 _GetString
  03215	83 c4 04	 add	 esp, 4
  03218	50		 push	 eax
  03219	53		 push	 ebx
  0321a	ff d6		 call	 esi
  0321c	83 f8 04	 cmp	 eax, 4
  0321f	75 bc		 jne	 SHORT $LN1099@MainDialog
  03221	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  03226	6a 01		 push	 1
  03228	50		 push	 eax
  03229	53		 push	 ebx
  0322a	e8 00 00 00 00	 call	 _UnmountVolume
  0322f	83 c4 0c	 add	 esp, 12			; 0000000cH
  03232	85 c0		 test	 eax, eax
  03234	74 cc		 je	 SHORT $LL81@MainDialog
$LN80@MainDialog:

; 7541 : 										{
; 7542 : 											// Cancel
; 7543 : 											NormalCursor ();
; 7544 : 											goto ovf_end;
; 7545 : 										}
; 7546 : 									}
; 7547 : 
; 7548 : 									// Prevent having to recreate the outer volume due to inadvertent exit
; 7549 : 									bConfirmQuit = TRUE;

  03236	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bConfirmQuit@@3HC, 1 ; bConfirmQuit

; 7550 : 
; 7551 : 									hiddenVolHostDriveNo = -1;

  03240	89 3d 00 00 00
	00		 mov	 DWORD PTR ?hiddenVolHostDriveNo@@3HA, edi ; hiddenVolHostDriveNo

; 7552 : 
; 7553 : 									nNewPageNo = HIDDEN_VOL_HOST_PRE_CIPHER_PAGE;

  03246	c7 45 ec 10 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 16 ; 00000010H

; 7554 : 
; 7555 : 									// Clear the outer volume password
; 7556 : 									WipePasswordsAndKeyfiles ();

  0324d	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles

; 7557 : 
; 7558 : 									EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), TRUE);

  03252	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  03258	6a 01		 push	 1
  0325a	68 10 04 00 00	 push	 1040			; 00000410H
  0325f	51		 push	 ecx
  03260	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  03266	50		 push	 eax
  03267	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 7559 : 									NormalCursor ();
; 7560 : 
; 7561 : 								}
; 7562 : 								break;

  0326d	e9 5c 09 00 00	 jmp	 $LN196@MainDialog
$LN87@MainDialog:

; 7510 : 							{
; 7511 : 							case -1:	// Fatal error
; 7512 : 								CloseVolumeExplorerWindows (hwndDlg, hiddenVolHostDriveNo);

  03272	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  03278	52		 push	 edx
  03279	53		 push	 ebx
  0327a	e8 00 00 00 00	 call	 _CloseVolumeExplorerWindows

; 7513 : 
; 7514 : 								if (UnmountVolume (hwndDlg, hiddenVolHostDriveNo, TRUE))

  0327f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  03284	6a 01		 push	 1
  03286	50		 push	 eax
  03287	53		 push	 ebx
  03288	e8 00 00 00 00	 call	 _UnmountVolume
  0328d	83 c4 14	 add	 esp, 20			; 00000014H
  03290	85 c0		 test	 eax, eax
  03292	74 06		 je	 SHORT $LN86@MainDialog

; 7515 : 									hiddenVolHostDriveNo = -1;

  03294	89 3d 00 00 00
	00		 mov	 DWORD PTR ?hiddenVolHostDriveNo@@3HA, edi ; hiddenVolHostDriveNo
$LN86@MainDialog:

; 7516 : 
; 7517 : 								AbortProcessSilent ();

  0329a	e8 00 00 00 00	 call	 _AbortProcessSilent

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  0329f	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  032a2	40		 inc	 eax
  032a3	50		 push	 eax
  032a4	53		 push	 ebx
  032a5	e8 00 00 00 00	 call	 _LoadPage
  032aa	83 c4 08	 add	 esp, 8
  032ad	b8 01 00 00 00	 mov	 eax, 1
  032b2	e9 f1 cd ff ff	 jmp	 $LN517@MainDialog
$LN108@MainDialog:

; 7421 : 				{
; 7422 : 					/* Wizard loop restart */
; 7423 : 
; 7424 : 					if (bHiddenOS)

  032b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  032bd	85 c9		 test	 ecx, ecx
  032bf	0f 84 0c 02 00
	00		 je	 $LN107@MainDialog

; 7425 : 					{
; 7426 : 						if (!ChangeWizardMode (WIZARD_MODE_SYS_DEVICE))

  032c5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  032cb	83 fa 02	 cmp	 edx, 2
  032ce	74 64		 je	 SHORT $LN1230@MainDialog
  032d0	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  032d5	e8 00 00 00 00	 call	 _CreateSysEncMutex
  032da	85 c0		 test	 eax, eax
  032dc	75 17		 jne	 SHORT $LN971@MainDialog
  032de	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  032e3	e8 00 00 00 00	 call	 _Error
  032e8	83 c4 04	 add	 esp, 4
$ovf_end_6$134850:
  032eb	b8 01 00 00 00	 mov	 eax, 1
  032f0	e9 b3 cd ff ff	 jmp	 $LN517@MainDialog
$LN971@MainDialog:
  032f5	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
  032fa	33 f6		 xor	 esi, esi
  032fc	89 35 00 00 00
	00		 mov	 DWORD PTR _bInPlaceEncNonSys, esi
  03302	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?szFileName@@3PADA, 0
  03309	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?szDiskFile@@3PADA, 0
  03310	89 35 00 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, esi
  03316	89 35 04 00 00
	00		 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, esi
  0331c	89 35 00 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA, esi
  03322	89 35 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, esi
  03328	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR _WizardMode, 2
  03332	eb 02		 jmp	 SHORT $LN975@MainDialog
$LN1230@MainDialog:
  03334	33 f6		 xor	 esi, esi
$LN975@MainDialog:
  03336	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  0333c	f7 d9		 neg	 ecx
  0333e	1b c9		 sbb	 ecx, ecx
  03340	f7 d9		 neg	 ecx
  03342	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bDevice@@3HA, ecx ; bDevice

; 7427 : 							return 1;
; 7428 : 
; 7429 : 						// Hidden volume for hidden OS has been created. Now we will prepare our boot loader
; 7430 : 						// that will handle the OS cloning. 
; 7431 : 						try
; 7432 : 						{

  03348	c7 45 fc 45 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 69 ; 00000045H

; 7433 : 							WaitCursor();

  0334f	e8 00 00 00 00	 call	 _WaitCursor

; 7434 : 
; 7435 : 							BootEncObj->PrepareHiddenOSCreation (nVolumeEA, FIRST_MODE_OF_OPERATION_ID, hash_algo);

  03354	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hash_algo@@3HA ; hash_algo
  0335a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nVolumeEA@@3HA ; nVolumeEA
  0335f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  03365	52		 push	 edx
  03366	6a 01		 push	 1
  03368	50		 push	 eax
  03369	e8 00 00 00 00	 call	 ?PrepareHiddenOSCreation@BootEncryption@CipherShed@@QAEXHHH@Z ; CipherShed::BootEncryption::PrepareHiddenOSCreation

; 7442 : 						}
; 7443 : 
; 7444 : 						bHiddenVol = FALSE;
; 7445 : 
; 7446 : 						LoadPage (hwndDlg, SYSENC_PRETEST_INFO_PAGE);

  0336e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  03373	89 35 00 00 00
	00		 mov	 DWORD PTR ?bHiddenVol@@3HC, esi ; bHiddenVol
  03379	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  0337e	39 35 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, esi
  03384	0f 84 66 00 00
	00		 je	 $LN1030@MainDialog
  0338a	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  03394	83 f8 15	 cmp	 eax, 21			; 00000015H
  03397	75 44		 jne	 SHORT $LN1028@MainDialog
  03399	68 82 00 00 00	 push	 130			; 00000082H
  0339e	8d 8d 00 ca 00
	00		 lea	 ecx, DWORD PTR _tmp$169945[ebp]
  033a4	6a 20		 push	 32			; 00000020H
  033a6	51		 push	 ecx
  033a7	e8 00 00 00 00	 call	 _memset
  033ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  033b2	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  033b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  033bb	8d 85 00 ca 00
	00		 lea	 eax, DWORD PTR _tmp$169945[ebp]
  033c1	50		 push	 eax
  033c2	33 d2		 xor	 edx, edx
  033c4	51		 push	 ecx
  033c5	66 89 95 80 ca
	00 00		 mov	 WORD PTR _tmp$169945[ebp+128], dx
  033cc	ff d7		 call	 edi
  033ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  033d3	8d 95 00 ca 00
	00		 lea	 edx, DWORD PTR _tmp$169945[ebp]
  033d9	52		 push	 edx
  033da	50		 push	 eax
  033db	ff d7		 call	 edi
$LN1028@MainDialog:
  033dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  033e3	51		 push	 ecx
  033e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  033ea	89 35 00 00 00
	00		 mov	 DWORD PTR _hCurPage, esi
$LN1030@MainDialog:
  033f0	89 35 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, esi
  033f6	e8 00 00 00 00	 call	 _NormalCursor
  033fb	8d 95 14 ff ff
	ff		 lea	 edx, DWORD PTR _rW$169940[ebp]
  03401	52		 push	 edx
  03402	68 23 04 00 00	 push	 1059			; 00000423H
  03407	53		 push	 ebx
  03408	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0340e	50		 push	 eax
  0340f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  03415	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  0341a	56		 push	 esi
  0341b	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  03420	53		 push	 ebx
  03421	6a 6c		 push	 108			; 0000006cH
  03423	50		 push	 eax
  03424	c7 05 00 00 00
	00 1d 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 29 ; nCurPageNo, 0000001dH
  0342e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  03434	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _rD$169939[ebp]
  0343a	51		 push	 ecx
  0343b	53		 push	 ebx
  0343c	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  03441	c7 85 74 ff ff
	ff a2 00 00 00	 mov	 DWORD PTR _rD$169939[ebp], 162 ; 000000a2H
  0344b	c7 85 78 ff ff
	ff 19 00 00 00	 mov	 DWORD PTR _rD$169939[ebp+4], 25 ; 00000019H
  03455	89 b5 7c ff ff
	ff		 mov	 DWORD PTR _rD$169939[ebp+8], esi
  0345b	89 75 80	 mov	 DWORD PTR _rD$169939[ebp+12], esi
  0345e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  03464	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  03469	3b c6		 cmp	 eax, esi
  0346b	0f 84 6c 00 00
	00		 je	 $LN104@MainDialog
  03471	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _rW$169940[ebp+12]
  03477	2b 95 18 ff ff
	ff		 sub	 edx, DWORD PTR _rW$169940[ebp+4]
  0347d	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _rW$169940[ebp+8]
  03483	2b 8d 14 ff ff
	ff		 sub	 ecx, DWORD PTR _rW$169940[ebp]
  03489	6a 01		 push	 1
  0348b	52		 push	 edx
  0348c	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _rD$169939[ebp+4]
  03492	51		 push	 ecx
  03493	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _rD$169939[ebp]
  03499	52		 push	 edx
  0349a	51		 push	 ecx
  0349b	50		 push	 eax
  0349c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  034a2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  034a8	6a 01		 push	 1
  034aa	52		 push	 edx
  034ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 7447 : 					}
; 7448 : 					else

  034b1	eb 2a		 jmp	 SHORT $LN104@MainDialog
__catch$_MainDialogProc@16$41:

; 7436 : 						}
; 7437 : 						catch (Exception &e)
; 7438 : 						{
; 7439 : 							e.Show (MainDlg);

  034b3	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134818[ebp]
  034b9	8b 01		 mov	 eax, DWORD PTR [ecx]
  034bb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  034c1	8b 00		 mov	 eax, DWORD PTR [eax]
  034c3	52		 push	 edx
  034c4	ff d0		 call	 eax

; 7440 : 							NormalCursor();

  034c6	e8 00 00 00 00	 call	 _NormalCursor

; 7441 : 							return 1;

  034cb	b8 00 00 00 00	 mov	 eax, $LN487@MainDialog
  034d0	c3		 ret	 0
$LN107@MainDialog:

; 7449 : 						LoadPage (hwndDlg, INTRO_PAGE);

  034d1	33 f6		 xor	 esi, esi
  034d3	56		 push	 esi
  034d4	53		 push	 ebx
  034d5	e8 00 00 00 00	 call	 _LoadPage
  034da	83 c4 08	 add	 esp, 8
$LN104@MainDialog:

; 7450 : 
; 7451 : 					SetWindowTextW (GetDlgItem (MainDlg, IDCANCEL), GetString ("CANCEL"));

  034dd	68 00 00 00 00	 push	 OFFSET ??_C@_06JHILMIHF@CANCEL?$AA@
  034e2	e8 00 00 00 00	 call	 _GetString
  034e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  034ed	83 c4 04	 add	 esp, 4
  034f0	50		 push	 eax
  034f1	6a 02		 push	 2
  034f3	51		 push	 ecx
  034f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  034fa	50		 push	 eax
  034fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 7452 : 					bHiddenVolFinished = FALSE;

  03501	89 35 00 00 00
	00		 mov	 DWORD PTR ?bHiddenVolFinished@@3HC, esi ; bHiddenVolFinished

; 7453 : 					WipePasswordsAndKeyfiles ();

  03507	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
  0350c	b8 01 00 00 00	 mov	 eax, 1
  03511	e9 92 cb ff ff	 jmp	 $LN517@MainDialog
$LN110@MainDialog:

; 7563 : 							}
; 7564 : 							break;
; 7565 : 						}
; 7566 : 					}
; 7567 : 				}
; 7568 : 			}
; 7569 : 
; 7570 : 			else if (nCurPageNo == DEVICE_WIPE_PAGE)

  03516	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  03519	0f 85 b4 06 00
	00		 jne	 $LN209@MainDialog

; 7571 : 			{
; 7572 : 				if (AskWarnOkCancel (bHiddenOS && IsHiddenOSRunning() ? "CONFIRM_WIPE_START_DECOY_SYS_PARTITION" : "CONFIRM_WIPE_START") == IDOK)

  0351f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  03525	85 d2		 test	 edx, edx
  03527	74 0e		 je	 SHORT $LN539@MainDialog
  03529	e8 00 00 00 00	 call	 _IsHiddenOSRunning
  0352e	85 c0		 test	 eax, eax
  03530	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CH@LLDBJBEP@CONFIRM_WIPE_START_DECOY_SYS_PAR@
  03535	75 05		 jne	 SHORT $LN540@MainDialog
$LN539@MainDialog:
  03537	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BD@ICCGDAH@CONFIRM_WIPE_START?$AA@
$LN540@MainDialog:
  0353c	50		 push	 eax
  0353d	e8 00 00 00 00	 call	 _AskWarnOkCancel
  03542	83 c4 04	 add	 esp, 4
  03545	83 f8 01	 cmp	 eax, 1
  03548	0f 85 07 d4 ff
	ff		 jne	 $LN1244@MainDialog

; 7573 : 				{
; 7574 : 					WipeStart ();

  0354e	e8 00 00 00 00	 call	 _WipeStart

; 7575 : 					ArrowWaitCursor();

  03553	e8 00 00 00 00	 call	 _ArrowWaitCursor
  03558	b8 01 00 00 00	 mov	 eax, 1
  0355d	e9 46 cb ff ff	 jmp	 $LN517@MainDialog
$LN164@MainDialog:

; 7125 : 			{
; 7126 : 				if (nWipeMode > 0 
; 7127 : 					&& AskWarnYesNo ("WIPE_MODE_WARN") == IDNO)

  03562	39 0d 00 00 00
	00		 cmp	 DWORD PTR _nWipeMode, ecx
  03568	0f 8e 65 06 00
	00		 jle	 $LN209@MainDialog
  0356e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BMFNBJAJ@WIPE_MODE_WARN?$AA@
  03573	e8 00 00 00 00	 call	 _AskWarnYesNo
  03578	83 c4 04	 add	 esp, 4
  0357b	83 f8 07	 cmp	 eax, 7
  0357e	0f 85 4f 06 00
	00		 jne	 $LN209@MainDialog

; 5749 : 						return 1;

  03584	b8 01 00 00 00	 mov	 eax, 1
  03589	e9 1a cb ff ff	 jmp	 $LN517@MainDialog
$LN188@MainDialog:

; 6986 : 			{
; 6987 : 				char tmp[RANDPOOL_DISPLAY_SIZE+1];
; 6988 : 
; 6989 : 				if (!bInPlaceEncNonSys)

  0358e	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSys
  03593	85 c0		 test	 eax, eax
  03595	75 5f		 jne	 SHORT __tryend$_MainDialogProc@16$30

; 6990 : 				{
; 6991 : 					/* Generate master key and other related data (except the rescue disk) for system encryption. */
; 6992 : 
; 6993 : 					try
; 6994 : 					{

  03597	c7 45 fc 31 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 49 ; 00000031H

; 6995 : 						WaitCursor();

  0359e	e8 00 00 00 00	 call	 _WaitCursor

; 6996 : 						BootEncObj->PrepareInstallation (!bWholeSysDrive, volumePassword, nVolumeEA, FIRST_MODE_OF_OPERATION_ID, hash_algo, "");

  035a3	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  035a8	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T169307[ebp]
  035ae	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  035b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hash_algo@@3HA ; hash_algo
  035b9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, 0 ; bWholeSysDrive
  035c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nVolumeEA@@3HA ; nVolumeEA
  035c5	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T169307[ebp]
  035cb	51		 push	 ecx
  035cc	52		 push	 edx
  035cd	6a 01		 push	 1
  035cf	0f 94 c1	 sete	 cl
  035d2	50		 push	 eax
  035d3	0f b6 d1	 movzx	 edx, cl
  035d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  035dc	68 00 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A ; volumePassword
  035e1	52		 push	 edx
  035e2	c6 45 fc 32	 mov	 BYTE PTR __$EHRec$[ebp+12], 50 ; 00000032H
  035e6	e8 00 00 00 00	 call	 ?PrepareInstallation@BootEncryption@CipherShed@@QAEX_NAAUPassword@@HHHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CipherShed::BootEncryption::PrepareInstallation
  035eb	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T169307[ebp]
  035f1	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__tryend$_MainDialogProc@16$30:

; 7003 : 					}
; 7004 : 				}
; 7005 : 
; 7006 : 				KillTimer (hwndDlg, TIMER_ID_RANDVIEW);

  035f6	68 ff 00 00 00	 push	 255			; 000000ffH
  035fb	53		 push	 ebx
  035fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 7007 : 
; 7008 : 				// Attempt to wipe the GUI field showing portions of randpool
; 7009 : 				memset (tmp, 0x20, sizeof(tmp)); //0x20 = ASCII space or 0x2020 = Unicode DAGGER

  03602	68 73 01 00 00	 push	 371			; 00000173H
  03607	8d 8d 8c c5 00
	00		 lea	 ecx, DWORD PTR _tmp$134672[ebp]
  0360d	6a 20		 push	 32			; 00000020H
  0360f	51		 push	 ecx
  03610	e8 00 00 00 00	 call	 _memset

; 7010 : 				tmp [sizeof(tmp)-1] = 0;
; 7011 : 				SetWindowTextA(hRandPoolSys, tmp);

  03615	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hRandPoolSys@@3RAUHWND__@@A ; hRandPoolSys
  0361a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0361d	8d 95 8c c5 00
	00		 lea	 edx, DWORD PTR _tmp$134672[ebp]
  03623	52		 push	 edx
  03624	50		 push	 eax
  03625	c6 85 fe c6 00
	00 00		 mov	 BYTE PTR _tmp$134672[ebp+370], 0
  0362c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 7012 : 
; 7013 : 				NormalCursor ();

  03632	e9 97 05 00 00	 jmp	 $LN196@MainDialog
__catch$_MainDialogProc@16$29:

; 6997 : 					}
; 6998 : 					catch (Exception &e)
; 6999 : 					{
; 7000 : 						e.Show (hwndDlg);

  03637	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134676[ebp]
  0363d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0363f	8b 55 e4	 mov	 edx, DWORD PTR _hwndDlg$GSCopy$[ebp]
  03642	8b 00		 mov	 eax, DWORD PTR [eax]
  03644	52		 push	 edx
  03645	ff d0		 call	 eax

; 7001 : 						NormalCursor ();

  03647	e8 00 00 00 00	 call	 _NormalCursor

; 7002 : 						return 1;

  0364c	b8 00 00 00 00	 mov	 eax, $LN487@MainDialog
  03651	c3		 ret	 0
$LN239@MainDialog:
  03652	68 82 00 00 00	 push	 130			; 00000082H
  03657	8d 8d 74 c8 00
	00		 lea	 ecx, DWORD PTR _tmpUTF16buf$134584[ebp]
  0365d	51		 push	 ecx
  0365e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualLock@8
  03664	e8 00 00 00 00	 call	 _WaitCursor
  03669	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0366e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  03674	6a 41		 push	 65			; 00000041H
  03676	8d 95 74 c8 00
	00		 lea	 edx, DWORD PTR _tmpUTF16buf$134584[ebp]
  0367c	52		 push	 edx
  0367d	68 0d 04 00 00	 push	 1037			; 0000040dH
  03682	50		 push	 eax
  03683	ff d7		 call	 edi
  03685	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetWindowTextW@12
  0368b	50		 push	 eax
  0368c	ff d6		 call	 esi
  0368e	6a 00		 push	 0
  03690	6a 41		 push	 65			; 00000041H
  03692	68 04 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A+4
  03697	8d 8d 74 c8 00
	00		 lea	 ecx, DWORD PTR _tmpUTF16buf$134584[ebp]
  0369d	6a 41		 push	 65			; 00000041H
  0369f	51		 push	 ecx
  036a0	e8 00 00 00 00	 call	 _ConvertUTF16toUTF8s
  036a5	b8 04 00 00 00	 mov	 eax, OFFSET ?volumePassword@@3UPassword@@A+4
  036aa	83 c4 14	 add	 esp, 20			; 00000014H
  036ad	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL1164@MainDialog:
  036b0	8a 08		 mov	 cl, BYTE PTR [eax]
  036b2	40		 inc	 eax
  036b3	84 c9		 test	 cl, cl
  036b5	75 f9		 jne	 SHORT $LL1164@MainDialog
  036b7	6a 41		 push	 65			; 00000041H
  036b9	68 00 00 00 00	 push	 OFFSET ?szRawPassword@@3PA_WA ; szRawPassword
  036be	2b c2		 sub	 eax, edx
  036c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  036c6	68 0d 04 00 00	 push	 1037			; 0000040dH
  036cb	52		 push	 edx
  036cc	a3 00 00 00 00	 mov	 DWORD PTR ?volumePassword@@3UPassword@@A, eax
  036d1	ff d7		 call	 edi
  036d3	50		 push	 eax
  036d4	ff d6		 call	 esi
  036d6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _KeyFilesEnable, 0
  036dd	74 13		 je	 SHORT $LN238@MainDialog
  036df	a1 00 00 00 00	 mov	 eax, DWORD PTR _FirstKeyFile
  036e4	50		 push	 eax
  036e5	68 00 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A ; volumePassword
  036ea	e8 00 00 00 00	 call	 _KeyFilesApply
  036ef	83 c4 08	 add	 esp, 8
$LN238@MainDialog:
  036f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  036f8	85 c9		 test	 ecx, ecx
  036fa	0f 85 9e 02 00
	00		 jne	 $LN237@MainDialog
  03700	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  03705	85 c0		 test	 eax, eax
  03707	7c 5a		 jl	 SHORT $LN1216@MainDialog
  03709	6a 01		 push	 1
  0370b	50		 push	 eax
  0370c	53		 push	 ebx
  0370d	e8 00 00 00 00	 call	 _UnmountVolume
  03712	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__MessageBoxW@16
  03718	83 c4 0c	 add	 esp, 12			; 0000000cH
  0371b	85 c0		 test	 eax, eax
  0371d	75 39		 jne	 SHORT $LN1117@MainDialog
  0371f	90		 npad	 1
$LL235@MainDialog:

; 6763 : 			{
; 6764 : 				WCHAR tmpUTF16buf[MAX_PASSWORD+1];
; 6765 : 				VirtualLock(tmpUTF16buf,sizeof(tmpUTF16buf));
; 6766 : 				WaitCursor ();
; 6767 : 
; 6768 : 				GetWindowTextW(GetDlgItem (hCurPage, IDC_PASSWORD_DIRECT), tmpUTF16buf, sizeof(tmpUTF16buf)/sizeof(*tmpUTF16buf));
; 6769 : 				ConvertUTF16toUTF8s((const UTF16*)tmpUTF16buf,arraysize(tmpUTF16buf),(UTF8*)volumePassword.Text,arraysize(volumePassword.Text),strictConversion);
; 6770 : 				volumePassword.Length = strlen ((char *) volumePassword.Text);
; 6771 : 
; 6772 : 				// Store the password in case we need to restore it after keyfile is applied to it
; 6773 : 				GetWindowTextW(GetDlgItem (hCurPage, IDC_PASSWORD_DIRECT), szRawPassword, sizeof (szRawPassword)/sizeof(*szRawPassword));
; 6774 : 
; 6775 : 				if (KeyFilesEnable)
; 6776 : 				{
; 6777 : 					KeyFilesApply (&volumePassword, FirstKeyFile);
; 6778 : 				}
; 6779 : 			
; 6780 : 				if (!bInPlaceEncNonSys)
; 6781 : 				{
; 6782 : 
; 6783 : 					/* Mount the volume which is to host the new hidden volume as read only */
; 6784 : 
; 6785 : 					if (hiddenVolHostDriveNo >= 0)		// If the hidden volume host is currently mounted (e.g. after previous unsuccessful dismount attempt)
; 6786 : 					{
; 6787 : 						BOOL tmp_result;
; 6788 : 
; 6789 : 						// Dismount the hidden volume host (in order to remount it as read-only subsequently)
; 6790 : 						while (!(tmp_result = UnmountVolume (hwndDlg, hiddenVolHostDriveNo, TRUE)))
; 6791 : 						{
; 6792 : 							if (MessageBoxW (hwndDlg, GetString ("CANT_DISMOUNT_OUTER_VOL"), lpszTitle, MB_RETRYCANCEL) != IDRETRY)

  03720	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  03726	6a 05		 push	 5
  03728	52		 push	 edx
  03729	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@GNHKCMLM@CANT_DISMOUNT_OUTER_VOL?$AA@
  0372e	e8 00 00 00 00	 call	 _GetString
  03733	83 c4 04	 add	 esp, 4
  03736	50		 push	 eax
  03737	53		 push	 ebx
  03738	ff d6		 call	 esi
  0373a	83 f8 04	 cmp	 eax, 4
  0373d	0f 85 84 e2 ff
	ff		 jne	 $LN1249@MainDialog
  03743	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  03748	6a 01		 push	 1
  0374a	50		 push	 eax
  0374b	53		 push	 ebx
  0374c	e8 00 00 00 00	 call	 _UnmountVolume
  03751	83 c4 0c	 add	 esp, 12			; 0000000cH
  03754	85 c0		 test	 eax, eax
  03756	74 c8		 je	 SHORT $LL235@MainDialog
$LN1117@MainDialog:

; 6793 : 							{
; 6794 : 								// Cancel
; 6795 : 								NormalCursor();
; 6796 : 								return 1;
; 6797 : 							}
; 6798 : 						}
; 6799 : 						if (tmp_result)		// If dismounted
; 6800 : 							hiddenVolHostDriveNo = -1;

  03758	83 cf ff	 or	 edi, -1
  0375b	89 3d 00 00 00
	00		 mov	 DWORD PTR ?hiddenVolHostDriveNo@@3HA, edi ; hiddenVolHostDriveNo
  03761	eb 09		 jmp	 SHORT $LN1118@MainDialog
$LN1216@MainDialog:
  03763	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__MessageBoxW@16
  03769	83 cf ff	 or	 edi, -1
$LN1118@MainDialog:

; 6801 : 					}
; 6802 : 
; 6803 : 					if (hiddenVolHostDriveNo < 0)		// If the hidden volume host is not mounted
; 6804 : 					{
; 6805 : 						int retCode;
; 6806 : 
; 6807 : 						// Mount the hidden volume host as read-only (to ensure consistent and secure
; 6808 : 						// results of the volume bitmap scanning)
; 6809 : 						switch (MountHiddenVolHost (hwndDlg, szDiskFile, &hiddenVolHostDriveNo, &volumePassword, TRUE))

  0376c	6a 01		 push	 1
  0376e	68 00 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A ; volumePassword
  03773	68 00 00 00 00	 push	 OFFSET ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  03778	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  0377d	53		 push	 ebx
  0377e	e8 00 00 00 00	 call	 _MountHiddenVolHost
  03783	83 c4 14	 add	 esp, 20			; 00000014H
  03786	83 f8 18	 cmp	 eax, 24			; 00000018H
  03789	0f 87 44 04 00
	00		 ja	 $LN209@MainDialog
  0378f	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN1165@MainDialog[eax]
  03796	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN1259@MainDialog[ecx*4]
$LN228@MainDialog:

; 6810 : 						{
; 6811 : 						case ERR_NO_FREE_DRIVES:
; 6812 : 							NormalCursor ();

  0379d	e8 00 00 00 00	 call	 _NormalCursor

; 6813 : 							MessageBoxW (hwndDlg, GetString ("NO_FREE_DRIVE_FOR_OUTER_VOL"), lpszTitle, ICON_HAND);

  037a2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  037a8	6a 10		 push	 16			; 00000010H
  037aa	52		 push	 edx
  037ab	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DNIPKEFC@NO_FREE_DRIVE_FOR_OUTER_VOL?$AA@
  037b0	e8 00 00 00 00	 call	 _GetString
  037b5	83 c4 04	 add	 esp, 4
  037b8	50		 push	 eax
  037b9	53		 push	 ebx
  037ba	ff d6		 call	 esi
  037bc	b8 01 00 00 00	 mov	 eax, 1
  037c1	e9 e2 c8 ff ff	 jmp	 $LN517@MainDialog
$LN226@MainDialog:

; 6814 : 							return 1;
; 6815 : 						case ERR_VOL_MOUNT_FAILED:
; 6816 : 						case ERR_PASSWORD_WRONG:
; 6817 : 							NormalCursor ();
; 6818 : 							return 1;
; 6819 : 						case 0:
; 6820 : 
; 6821 : 							/* Hidden volume host successfully mounted as read-only */
; 6822 : 
; 6823 : 							WaitCursor ();

  037c6	e8 00 00 00 00	 call	 _WaitCursor

; 6824 : 
; 6825 : 							// Verify that the outer volume contains a suitable file system, retrieve cluster size, and 
; 6826 : 							// scan the volume bitmap
; 6827 : 							if (!IsAdmin () && IsUacSupported ())

  037cb	e8 00 00 00 00	 call	 _IsAdmin
  037d0	85 c0		 test	 eax, eax
  037d2	75 39		 jne	 SHORT $LN225@MainDialog
  037d4	e8 00 00 00 00	 call	 _IsUacSupported
  037d9	85 c0		 test	 eax, eax
  037db	74 30		 je	 SHORT $LN225@MainDialog

; 6828 : 								retCode = UacAnalyzeHiddenVolumeHost (hwndDlg, &hiddenVolHostDriveNo, GetVolumeDataAreaSize (FALSE, nHiddenVolHostSize), &realClusterSize, &nbrFreeClusters);

  037dd	a1 04 00 00 00	 mov	 eax, DWORD PTR ?nHiddenVolHostSize@@3_KA+4
  037e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nHiddenVolHostSize@@3_KA
  037e8	68 00 00 00 00	 push	 OFFSET ?nbrFreeClusters@@3_JA ; nbrFreeClusters
  037ed	68 00 00 00 00	 push	 OFFSET ?realClusterSize@@3HA ; realClusterSize
  037f2	50		 push	 eax
  037f3	51		 push	 ecx
  037f4	6a 00		 push	 0
  037f6	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  037fb	83 c4 0c	 add	 esp, 12			; 0000000cH
  037fe	52		 push	 edx
  037ff	50		 push	 eax
  03800	68 00 00 00 00	 push	 OFFSET ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  03805	53		 push	 ebx
  03806	e8 00 00 00 00	 call	 _UacAnalyzeHiddenVolumeHost

; 6829 : 							else

  0380b	eb 2e		 jmp	 SHORT $LN1242@MainDialog
$LN225@MainDialog:

; 6830 : 								retCode = AnalyzeHiddenVolumeHost (hwndDlg, &hiddenVolHostDriveNo, GetVolumeDataAreaSize (FALSE, nHiddenVolHostSize), &realClusterSize, &nbrFreeClusters);

  0380d	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?nHiddenVolHostSize@@3_KA+4
  03813	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nHiddenVolHostSize@@3_KA
  03818	68 00 00 00 00	 push	 OFFSET ?nbrFreeClusters@@3_JA ; nbrFreeClusters
  0381d	68 00 00 00 00	 push	 OFFSET ?realClusterSize@@3HA ; realClusterSize
  03822	52		 push	 edx
  03823	50		 push	 eax
  03824	6a 00		 push	 0
  03826	e8 00 00 00 00	 call	 _GetVolumeDataAreaSize
  0382b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0382e	52		 push	 edx
  0382f	50		 push	 eax
  03830	68 00 00 00 00	 push	 OFFSET ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  03835	53		 push	 ebx
  03836	e8 00 00 00 00	 call	 _AnalyzeHiddenVolumeHost
$LN1242@MainDialog:
  0383b	83 c4 18	 add	 esp, 24			; 00000018H

; 6831 : 
; 6832 : 							switch (retCode)

  0383e	3b c7		 cmp	 eax, edi
  03840	0f 84 13 01 00
	00		 je	 $LN221@MainDialog
  03846	85 c0		 test	 eax, eax
  03848	0f 84 ca 00 00
	00		 je	 $LN219@MainDialog
  0384e	83 f8 01	 cmp	 eax, 1
  03851	0f 85 7c 03 00
	00		 jne	 $LN209@MainDialog

; 6852 : 								return 1;
; 6853 : 
; 6854 : 							case 1:
; 6855 : 
; 6856 : 								// Determine the maximum possible size of the hidden volume
; 6857 : 								if (DetermineMaxHiddenVolSize (hwndDlg) < 1)

  03857	53		 push	 ebx
  03858	e8 00 00 00 00	 call	 _DetermineMaxHiddenVolSize
  0385d	83 c4 04	 add	 esp, 4
  03860	83 f8 01	 cmp	 eax, 1

; 6858 : 								{
; 6859 : 									// Non-fatal error while determining maximum possible size of the hidden volume
; 6860 : 									NormalCursor();
; 6861 : 									return 1;

  03863	0f 8c 5e e1 ff
	ff		 jl	 $LN1249@MainDialog

; 6862 : 								}
; 6863 : 								else
; 6864 : 								{
; 6865 : 									BOOL tmp_result;
; 6866 : 
; 6867 : 									/* Maximum possible size of the hidden volume successfully determined */
; 6868 : 
; 6869 : 									// Dismount the hidden volume host
; 6870 : 									while (!(tmp_result = UnmountVolume (hwndDlg, hiddenVolHostDriveNo, TRUE)))

  03869	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  0386f	6a 01		 push	 1
  03871	51		 push	 ecx
  03872	53		 push	 ebx
  03873	e8 00 00 00 00	 call	 _UnmountVolume
  03878	33 ff		 xor	 edi, edi
  0387a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0387d	3b c7		 cmp	 eax, edi
  0387f	75 38		 jne	 SHORT $LN1116@MainDialog
$LL213@MainDialog:

; 6871 : 									{
; 6872 : 										if (MessageBoxW (hwndDlg, GetString ("CANT_DISMOUNT_OUTER_VOL"), lpszTitle, MB_RETRYCANCEL) != IDRETRY)

  03881	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _lpszTitle
  03887	6a 05		 push	 5
  03889	52		 push	 edx
  0388a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@GNHKCMLM@CANT_DISMOUNT_OUTER_VOL?$AA@
  0388f	e8 00 00 00 00	 call	 _GetString
  03894	83 c4 04	 add	 esp, 4
  03897	50		 push	 eax
  03898	53		 push	 ebx
  03899	ff d6		 call	 esi
  0389b	83 f8 04	 cmp	 eax, 4
  0389e	0f 85 23 e1 ff
	ff		 jne	 $LN1249@MainDialog
  038a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  038a9	6a 01		 push	 1
  038ab	50		 push	 eax
  038ac	53		 push	 ebx
  038ad	e8 00 00 00 00	 call	 _UnmountVolume
  038b2	83 c4 0c	 add	 esp, 12			; 0000000cH
  038b5	3b c7		 cmp	 eax, edi
  038b7	74 c8		 je	 SHORT $LL213@MainDialog
$LN1116@MainDialog:

; 6873 : 										{
; 6874 : 											// Cancel
; 6875 : 											NormalCursor();
; 6876 : 											return 1;
; 6877 : 										}
; 6878 : 									}
; 6879 : 
; 6880 : 									if (tmp_result)		// If dismounted
; 6881 : 									{
; 6882 : 										hiddenVolHostDriveNo = -1;

  038b9	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?hiddenVolHostDriveNo@@3HA, -1 ; hiddenVolHostDriveNo

; 6883 : 
; 6884 : 										bHiddenVolHost = FALSE; 

  038c3	89 3d 00 00 00
	00		 mov	 DWORD PTR _bHiddenVolHost, edi

; 6885 : 										bHiddenVolFinished = FALSE;

  038c9	89 3d 00 00 00
	00		 mov	 DWORD PTR ?bHiddenVolFinished@@3HC, edi ; bHiddenVolFinished

; 6886 : 
; 6887 : 										// Clear the outer volume password
; 6888 : 										WipePasswordsAndKeyfiles ();

  038cf	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles

; 6889 : 
; 6890 : 										RestoreDefaultKeyFilesParam ();

  038d4	e8 00 00 00 00	 call	 _RestoreDefaultKeyFilesParam

; 6891 : 
; 6892 : 										EnableWindow (GetDlgItem (MainDlg, IDC_NEXT), TRUE);

  038d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _MainDlg
  038df	6a 01		 push	 1
  038e1	68 10 04 00 00	 push	 1040			; 00000410H
  038e6	51		 push	 ecx
  038e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  038ed	50		 push	 eax
  038ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 6893 : 										NormalCursor ();

  038f4	e8 00 00 00 00	 call	 _NormalCursor

; 6894 : 
; 6895 : 										nNewPageNo = HIDDEN_VOL_HOST_PRE_CIPHER_PAGE;

  038f9	c7 45 ec 10 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 16 ; 00000010H

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  03900	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  03903	40		 inc	 eax
  03904	50		 push	 eax
  03905	53		 push	 ebx
  03906	e8 00 00 00 00	 call	 _LoadPage
  0390b	83 c4 08	 add	 esp, 8
  0390e	b8 01 00 00 00	 mov	 eax, 1
  03913	e9 90 c7 ff ff	 jmp	 $LN517@MainDialog
$LN219@MainDialog:

; 6841 : 								break;
; 6842 : 
; 6843 : 							case 0:		// Unsupported file system (or other non-fatal error which has already been reported)
; 6844 : 								if (bHiddenVolDirect)

  03918	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolDirect
  0391e	85 d2		 test	 edx, edx
  03920	74 28		 je	 SHORT $LN217@MainDialog

; 6845 : 								{
; 6846 : 									CloseVolumeExplorerWindows (hwndDlg, hiddenVolHostDriveNo);

  03922	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  03927	50		 push	 eax
  03928	53		 push	 ebx
  03929	e8 00 00 00 00	 call	 _CloseVolumeExplorerWindows

; 6847 : 
; 6848 : 									if (UnmountVolume (hwndDlg, hiddenVolHostDriveNo, TRUE))

  0392e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  03934	6a 01		 push	 1
  03936	51		 push	 ecx
  03937	53		 push	 ebx
  03938	e8 00 00 00 00	 call	 _UnmountVolume
  0393d	83 c4 14	 add	 esp, 20			; 00000014H
  03940	85 c0		 test	 eax, eax
  03942	74 06		 je	 SHORT $LN217@MainDialog

; 6849 : 										hiddenVolHostDriveNo = -1;

  03944	89 3d 00 00 00
	00		 mov	 DWORD PTR ?hiddenVolHostDriveNo@@3HA, edi ; hiddenVolHostDriveNo
$LN217@MainDialog:

; 6850 : 								}
; 6851 : 								NormalCursor ();

  0394a	e8 00 00 00 00	 call	 _NormalCursor
  0394f	b8 01 00 00 00	 mov	 eax, 1
  03954	e9 4f c7 ff ff	 jmp	 $LN517@MainDialog
$LN221@MainDialog:

; 6833 : 							{
; 6834 : 							case -1:	// Fatal error
; 6835 : 								CloseVolumeExplorerWindows (hwndDlg, hiddenVolHostDriveNo);

  03959	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  0395f	52		 push	 edx
  03960	53		 push	 ebx
  03961	e8 00 00 00 00	 call	 _CloseVolumeExplorerWindows

; 6836 : 
; 6837 : 								if (UnmountVolume (hwndDlg, hiddenVolHostDriveNo, TRUE))

  03966	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  0396b	6a 01		 push	 1
  0396d	50		 push	 eax
  0396e	53		 push	 ebx
  0396f	e8 00 00 00 00	 call	 _UnmountVolume
  03974	83 c4 14	 add	 esp, 20			; 00000014H
  03977	85 c0		 test	 eax, eax
  03979	74 06		 je	 SHORT $LN220@MainDialog

; 6838 : 									hiddenVolHostDriveNo = -1;

  0397b	89 3d 00 00 00
	00		 mov	 DWORD PTR ?hiddenVolHostDriveNo@@3HA, edi ; hiddenVolHostDriveNo
$LN220@MainDialog:

; 6839 : 
; 6840 : 								AbortProcessSilent ();

  03981	e8 00 00 00 00	 call	 _AbortProcessSilent

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  03986	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  03989	40		 inc	 eax
  0398a	50		 push	 eax
  0398b	53		 push	 ebx
  0398c	e8 00 00 00 00	 call	 _LoadPage
  03991	83 c4 08	 add	 esp, 8
  03994	b8 01 00 00 00	 mov	 eax, 1
  03999	e9 0a c7 ff ff	 jmp	 $LN517@MainDialog
$LN237@MainDialog:

; 6896 : 									}
; 6897 : 								}
; 6898 : 								break;
; 6899 : 							}
; 6900 : 							break;
; 6901 : 						}
; 6902 : 					}
; 6903 : 				}
; 6904 : 				else
; 6905 : 				{
; 6906 : 					/* Scan all available partitions to discover all partitions where non-system in-place
; 6907 : 					encryption has been interrupted. */
; 6908 : 
; 6909 : 					BOOL tmpbDevice;
; 6910 : 					DeferredNonSysInPlaceEncDevices.clear();

  0399e	b9 00 00 00 00	 mov	 ecx, OFFSET ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A ; DeferredNonSysInPlaceEncDevices
  039a3	e8 00 00 00 00	 call	 ?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::clear

; 6911 : 
; 6912 : 					foreach (const HostDevice &device, GetAvailableHostDevices (true, true))

  039a8	6a 00		 push	 0
  039aa	6a 01		 push	 1
  039ac	6a 01		 push	 1
  039ae	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR $T169291[ebp]
  039b4	6a 01		 push	 1
  039b6	51		 push	 ecx
  039b7	e8 00 00 00 00	 call	 ?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z ; GetAvailableHostDevices
  039bc	50		 push	 eax
  039bd	8d 95 44 ff ff
	ff		 lea	 edx, DWORD PTR _$S2$134632[ebp]
  039c3	52		 push	 edx
  039c4	c7 45 fc 27 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 39 ; 00000027H
  039cb	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; CipherShed::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
  039d0	83 c4 1c	 add	 esp, 28			; 0000001cH
  039d3	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR $T169291[ebp]
  039d9	c6 45 fc 29	 mov	 BYTE PTR __$EHRec$[ebp+12], 41 ; 00000029H
  039dd	e8 00 00 00 00	 call	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
  039e2	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _$S2$134632[ebp]
  039e8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  039eb	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$134632[ebp]
  039f1	ff d2		 call	 edx
  039f3	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  039f8	84 c0		 test	 al, al
  039fa	0f 84 0b 01 00
	00		 je	 $LN206@MainDialog
$LL208@MainDialog:
  03a00	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$134632[ebp+40]
  03a06	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEABUHostDevice@@XZ ; std::_Vector_const_iterator<HostDevice,std::allocator<HostDevice> >::operator*
  03a0b	f6 45 dc 02	 test	 BYTE PTR $T169386[ebp], 2
  03a0f	8b f0		 mov	 esi, eax
  03a11	74 0f		 je	 SHORT $LN612@MainDialog
  03a13	83 65 dc fd	 and	 DWORD PTR $T169386[ebp], -3 ; fffffffdH
  03a17	8d 8d 94 fa ff
	ff		 lea	 ecx, DWORD PTR $T169296[ebp]
  03a1d	e8 00 00 00 00	 call	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
$LN612@MainDialog:
  03a22	80 bd 49 ff ff
	ff 00		 cmp	 BYTE PTR _$S2$134632[ebp+5], 0
  03a29	0f 94 c0	 sete	 al
  03a2c	88 85 49 ff ff
	ff		 mov	 BYTE PTR _$S2$134632[ebp+5], al
  03a32	84 c0		 test	 al, al
  03a34	0f 84 a7 00 00
	00		 je	 $LN207@MainDialog
  03a3a	8d 9b 00 00 00
	00		 npad	 6
$LL913@MainDialog:

; 6913 : 					{
; 6914 : 						if (device.IsPartition || device.DynamicVolume)

  03a40	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  03a44	75 0a		 jne	 SHORT $LN201@MainDialog
  03a46	80 7e 02 00	 cmp	 BYTE PTR [esi+2], 0
  03a4a	0f 84 77 00 00
	00		 je	 $LN204@MainDialog
$LN201@MainDialog:

; 6915 : 						{
; 6916 : 							OpenVolumeContext volume;
; 6917 : 
; 6918 : 							if (OpenVolume (&volume, device.Path.c_str(), &volumePassword, FALSE, FALSE, TRUE) == ERR_SUCCESS)

  03a50	39 7e 58	 cmp	 DWORD PTR [esi+88], edi
  03a53	72 05		 jb	 SHORT $LN921@MainDialog
  03a55	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  03a58	eb 03		 jmp	 SHORT $LN922@MainDialog
$LN921@MainDialog:
  03a5a	8d 46 44	 lea	 eax, DWORD PTR [esi+68]
$LN922@MainDialog:
  03a5d	6a 01		 push	 1
  03a5f	6a 00		 push	 0
  03a61	6a 00		 push	 0
  03a63	68 00 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A ; volumePassword
  03a68	50		 push	 eax
  03a69	8d 85 ac fa ff
	ff		 lea	 eax, DWORD PTR _volume$134647[ebp]
  03a6f	50		 push	 eax
  03a70	e8 00 00 00 00	 call	 _OpenVolume
  03a75	83 c4 18	 add	 esp, 24			; 00000018H
  03a78	85 c0		 test	 eax, eax
  03a7a	75 45		 jne	 SHORT $LN1217@MainDialog

; 6919 : 							{
; 6920 : 								if ((volume.CryptoInfo->HeaderFlags & TC_HEADER_FLAG_NONSYS_INPLACE_ENC) != 0
; 6921 : 									&& volume.CryptoInfo->EncryptedAreaLength.Value != volume.CryptoInfo->VolumeSize.Value)

  03a7c	8b 85 b0 fa ff
	ff		 mov	 eax, DWORD PTR _volume$134647[ebp+4]
  03a82	f6 80 60 44 00
	00 02		 test	 BYTE PTR [eax+17504], 2
  03a89	74 27		 je	 SHORT $LN199@MainDialog
  03a8b	8b 88 58 44 00
	00		 mov	 ecx, DWORD PTR [eax+17496]
  03a91	3b 88 48 44 00
	00		 cmp	 ecx, DWORD PTR [eax+17480]
  03a97	75 0e		 jne	 SHORT $LN1166@MainDialog
  03a99	8b 90 5c 44 00
	00		 mov	 edx, DWORD PTR [eax+17500]
  03a9f	3b 90 4c 44 00
	00		 cmp	 edx, DWORD PTR [eax+17484]
  03aa5	74 0b		 je	 SHORT $LN199@MainDialog
$LN1166@MainDialog:

; 6922 : 								{
; 6923 : 									DeferredNonSysInPlaceEncDevices.push_back (device);

  03aa7	56		 push	 esi
  03aa8	b9 00 00 00 00	 mov	 ecx, OFFSET ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A ; DeferredNonSysInPlaceEncDevices
  03aad	e8 00 00 00 00	 call	 ?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::push_back
$LN199@MainDialog:

; 6924 : 								}
; 6925 : 
; 6926 : 								CloseVolume (&volume);

  03ab2	8d 85 ac fa ff
	ff		 lea	 eax, DWORD PTR _volume$134647[ebp]
  03ab8	50		 push	 eax
  03ab9	e8 00 00 00 00	 call	 _CloseVolume
  03abe	83 c4 04	 add	 esp, 4
$LN1217@MainDialog:
  03ac1	8a 85 49 ff ff
	ff		 mov	 al, BYTE PTR _$S2$134632[ebp+5]
$LN204@MainDialog:

; 6911 : 
; 6912 : 					foreach (const HostDevice &device, GetAvailableHostDevices (true, true))

  03ac7	84 c0		 test	 al, al
  03ac9	0f 94 c0	 sete	 al
  03acc	c6 85 48 ff ff
	ff 01		 mov	 BYTE PTR _$S2$134632[ebp+4], 1
  03ad3	88 85 49 ff ff
	ff		 mov	 BYTE PTR _$S2$134632[ebp+5], al
  03ad9	84 c0		 test	 al, al
  03adb	0f 85 5f ff ff
	ff		 jne	 $LL913@MainDialog
$LN207@MainDialog:
  03ae1	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _$S2$134632[ebp]
  03ae7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  03aea	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$134632[ebp]
  03af0	ff d0		 call	 eax
  03af2	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _$S2$134632[ebp]
  03af8	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  03afb	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$134632[ebp]
  03b01	ff d0		 call	 eax
  03b03	84 c0		 test	 al, al
  03b05	0f 85 f5 fe ff
	ff		 jne	 $LL208@MainDialog
$LN206@MainDialog:

; 6927 : 							}
; 6928 : 						}
; 6929 : 					}

  03b0b	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$134632[ebp]
  03b11	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  03b18	e8 00 00 00 00	 call	 ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ

; 6930 : 
; 6931 : 					if (DeferredNonSysInPlaceEncDevices.empty())

  03b1d	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A+16
  03b23	2b 0d 0c 00 00
	00		 sub	 ecx, DWORD PTR ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A+12
  03b29	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  03b2e	f7 e9		 imul	 ecx
  03b30	c1 fa 06	 sar	 edx, 6
  03b33	8b c2		 mov	 eax, edx
  03b35	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03b38	03 c2		 add	 eax, edx
  03b3a	75 1c		 jne	 SHORT $LN198@MainDialog

; 6932 : 					{
; 6933 : 						Warning ("FOUND_NO_PARTITION_W_DEFERRED_INPLACE_ENC");

  03b3c	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@DBNLNPHP@FOUND_NO_PARTITION_W_DEFERRED_IN@
  03b41	e8 00 00 00 00	 call	 _Warning
  03b46	83 c4 04	 add	 esp, 4

; 6934 : 
; 6935 : 						NormalCursor();

  03b49	e8 00 00 00 00	 call	 _NormalCursor
  03b4e	b8 01 00 00 00	 mov	 eax, 1
  03b53	e9 50 c5 ff ff	 jmp	 $LN517@MainDialog
$LN198@MainDialog:

; 6936 : 						return 1;
; 6937 : 					}
; 6938 : 					else if (DeferredNonSysInPlaceEncDevices.size() == 1)

  03b58	83 f8 01	 cmp	 eax, 1
  03b5b	0f 85 6d 00 00
	00		 jne	 $LN196@MainDialog

; 6939 : 					{
; 6940 : 						CreateFullVolumePath (szDiskFile, DeferredNonSysInPlaceEncDevices.front().Path.c_str(), &tmpbDevice);

  03b61	b9 00 00 00 00	 mov	 ecx, OFFSET ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A ; DeferredNonSysInPlaceEncDevices
  03b66	e8 00 00 00 00	 call	 ?front@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::front
  03b6b	83 c0 40	 add	 eax, 64			; 00000040H
  03b6e	39 78 18	 cmp	 DWORD PTR [eax+24], edi
  03b71	72 05		 jb	 SHORT $LN933@MainDialog
  03b73	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  03b76	eb 03		 jmp	 SHORT $LN934@MainDialog
$LN933@MainDialog:
  03b78	83 c0 04	 add	 eax, 4
$LN934@MainDialog:
  03b7b	8d 4d d4	 lea	 ecx, DWORD PTR _tmpbDevice$134628[ebp]
  03b7e	51		 push	 ecx
  03b7f	50		 push	 eax
  03b80	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  03b85	e8 00 00 00 00	 call	 _CreateFullVolumePath

; 6941 : 
; 6942 : 						nVolumeSize = GetDeviceSize (szDiskFile);

  03b8a	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  03b8f	e8 00 00 00 00	 call	 _GetDeviceSize
  03b94	a3 00 00 00 00	 mov	 DWORD PTR ?nVolumeSize@@3_KA, eax

; 6943 : 						if (nVolumeSize == -1)

  03b99	23 c2		 and	 eax, edx
  03b9b	83 c4 10	 add	 esp, 16			; 00000010H
  03b9e	89 15 04 00 00
	00		 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, edx
  03ba4	83 f8 ff	 cmp	 eax, -1
  03ba7	75 1e		 jne	 SHORT $LN195@MainDialog

; 6944 : 						{
; 6945 : 							handleWin32Error (MainDlg);

  03ba9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _MainDlg
  03baf	52		 push	 edx
  03bb0	e8 00 00 00 00	 call	 _handleWin32Error
  03bb5	83 c4 04	 add	 esp, 4

; 6946 : 							NormalCursor();

  03bb8	e8 00 00 00 00	 call	 _NormalCursor
  03bbd	b8 01 00 00 00	 mov	 eax, 1
  03bc2	e9 e1 c4 ff ff	 jmp	 $LN517@MainDialog
$LN195@MainDialog:

; 6947 : 							return 1;
; 6948 : 						}
; 6949 : 
; 6950 : 						nNewPageNo = NONSYS_INPLACE_ENC_ENCRYPTION_PAGE - 1;	// Skip irrelevant pages

  03bc7	c7 45 ec 23 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 35 ; 00000023H
$LN196@MainDialog:

; 6951 : 					}
; 6952 : 
; 6953 : 					NormalCursor();

  03bce	e8 00 00 00 00	 call	 _NormalCursor
$LN209@MainDialog:

; 7576 : 				}
; 7577 : 				return 1;
; 7578 : 			}
; 7579 : 
; 7580 : 			LoadPage (hwndDlg, nNewPageNo + 1);

  03bd3	8b 45 ec	 mov	 eax, DWORD PTR _nNewPageNo$[ebp]
  03bd6	40		 inc	 eax
  03bd7	50		 push	 eax
  03bd8	53		 push	 ebx
  03bd9	e8 00 00 00 00	 call	 _LoadPage
  03bde	83 c4 08	 add	 esp, 8
  03be1	b8 01 00 00 00	 mov	 eax, 1
  03be6	e9 bd c4 ff ff	 jmp	 $LN517@MainDialog
$LN397@MainDialog:

; 7581 : ovf_end:
; 7582 : 			return 1;
; 7583 : 		}
; 7584 : 		else if (lw == IDC_PREV)

  03beb	ba 11 04 00 00	 mov	 edx, 1041		; 00000411H
  03bf0	66 3b ca	 cmp	 cx, dx
  03bf3	0f 85 ad c4 ff
	ff		 jne	 $LN515@MainDialog

; 7585 : 		{
; 7586 : 			if (nCurPageNo == SYSENC_SPAN_PAGE)

  03bf9	83 f8 03	 cmp	 eax, 3
  03bfc	75 11		 jne	 SHORT $LN71@MainDialog

; 7587 : 			{
; 7588 : 				// Skip irrelevant pages when going back
; 7589 : 				if (!bHiddenOS)

  03bfe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  03c03	85 c0		 test	 eax, eax

; 7590 : 					nNewPageNo = SYSENC_TYPE_PAGE + 1;

  03c05	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  03c0a	75 03		 jne	 SHORT $LN71@MainDialog
  03c0c	89 7d ec	 mov	 DWORD PTR _nNewPageNo$[ebp], edi
$LN71@MainDialog:

; 7591 : 			}
; 7592 : 			if (nCurPageNo == SYSENC_MULTI_BOOT_MODE_PAGE)

  03c0f	83 f8 06	 cmp	 eax, 6
  03c12	75 51		 jne	 SHORT $LN70@MainDialog

; 7593 : 			{
; 7594 : 				// Skip the drive analysis page(s) or other irrelevant pages when going back
; 7595 : 				if (bHiddenOS)

  03c14	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  03c1a	85 c9		 test	 ecx, ecx
  03c1c	74 1f		 je	 SHORT $LN69@MainDialog

; 7596 : 					nNewPageNo = SYSENC_HIDDEN_OS_REQ_CHECK_PAGE + 1;

  03c1e	c7 45 ec 03 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 3

; 7802 : 					}
; 7803 : 					else
; 7804 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7805 : 				}
; 7806 : 			}
; 7807 : 
; 7808 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03c25	8b 4d ec	 mov	 ecx, DWORD PTR _nNewPageNo$[ebp]
  03c28	49		 dec	 ecx
  03c29	51		 push	 ecx
  03c2a	53		 push	 ebx
  03c2b	e8 00 00 00 00	 call	 _LoadPage
  03c30	83 c4 08	 add	 esp, 8
$ovf_end_7$134850:
  03c33	b8 01 00 00 00	 mov	 eax, 1
  03c38	e9 6b c4 ff ff	 jmp	 $LN517@MainDialog
$LN69@MainDialog:

; 7597 : 				else if (bWholeSysDrive)

  03c3d	33 d2		 xor	 edx, edx
  03c3f	39 15 00 00 00
	00		 cmp	 DWORD PTR ?bWholeSysDrive@@3HA, edx ; bWholeSysDrive
  03c45	0f 95 c2	 setne	 dl
  03c48	83 c2 04	 add	 edx, 4

; 7802 : 					}
; 7803 : 					else
; 7804 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7805 : 				}
; 7806 : 			}
; 7807 : 
; 7808 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03c4b	8b ca		 mov	 ecx, edx
  03c4d	49		 dec	 ecx
  03c4e	51		 push	 ecx
  03c4f	53		 push	 ebx
  03c50	89 55 ec	 mov	 DWORD PTR _nNewPageNo$[ebp], edx
  03c53	e8 00 00 00 00	 call	 _LoadPage
  03c58	83 c4 08	 add	 esp, 8
$ovf_end_8$134850:
  03c5b	b8 01 00 00 00	 mov	 eax, 1
  03c60	e9 43 c4 ff ff	 jmp	 $LN517@MainDialog
$LN70@MainDialog:

; 7598 : 					nNewPageNo = SYSENC_PRE_DRIVE_ANALYSIS_PAGE + 1;	
; 7599 : 				else
; 7600 : 					nNewPageNo = SYSENC_SPAN_PAGE + 1;	
; 7601 : 			}
; 7602 : 			else if (nCurPageNo == SYSENC_MULTI_BOOT_NONWIN_BOOT_LOADER_PAGE)

  03c65	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  03c68	75 27		 jne	 SHORT $LN64@MainDialog

; 7603 : 			{
; 7604 : 				if (SysEncMultiBootCfg.NumberOfSysDrives == 1)

  03c6a	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?SysEncMultiBootCfg@@3USYSENC_MULTIBOOT_CFG@@A, 1
  03c71	0f 85 48 07 00
	00		 jne	 $LN16@MainDialog

; 7802 : 					}
; 7803 : 					else
; 7804 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7805 : 				}
; 7806 : 			}
; 7807 : 
; 7808 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03c77	8b ce		 mov	 ecx, esi
  03c79	49		 dec	 ecx
  03c7a	51		 push	 ecx
  03c7b	53		 push	 ebx
  03c7c	89 75 ec	 mov	 DWORD PTR _nNewPageNo$[ebp], esi
  03c7f	e8 00 00 00 00	 call	 _LoadPage
  03c84	83 c4 08	 add	 esp, 8
$ovf_end_9$134850:
  03c87	b8 01 00 00 00	 mov	 eax, 1
  03c8c	e9 17 c4 ff ff	 jmp	 $LN517@MainDialog
$LN64@MainDialog:

; 7605 : 				{
; 7606 : 					// We can skip SYSENC_MULTI_BOOT_ADJACENT_SYS_PAGE (it is implied that there are multiple systems on the drive)
; 7607 : 					nNewPageNo = SYSENC_MULTI_BOOT_NBR_SYS_DRIVES_PAGE + 1;
; 7608 : 				}
; 7609 : 			}
; 7610 : 			else if (nCurPageNo == HIDDEN_VOL_HOST_PRE_CIPHER_PAGE)

  03c91	83 f8 10	 cmp	 eax, 16			; 00000010H
  03c94	0f 85 a1 00 00
	00		 jne	 $LN61@MainDialog

; 7611 : 			{
; 7612 : 				if (bHiddenOS)

  03c9a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  03c9f	85 c0		 test	 eax, eax
  03ca1	0f 84 11 07 00
	00		 je	 $LN60@MainDialog

; 7613 : 				{
; 7614 : 					if (!ChangeWizardMode (WIZARD_MODE_SYS_DEVICE))

  03ca7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  03cad	3b cf		 cmp	 ecx, edi
  03caf	74 5b		 je	 SHORT $LN1047@MainDialog
  03cb1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  03cb7	e8 00 00 00 00	 call	 _CreateSysEncMutex
  03cbc	85 c0		 test	 eax, eax
  03cbe	75 1c		 jne	 SHORT $LN1043@MainDialog
  03cc0	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FPFBOAHN@SYSTEM_ENCRYPTION_IN_PROGRESS_EL@
  03cc5	e8 00 00 00 00	 call	 _Error
  03cca	83 c4 04	 add	 esp, 4
  03ccd	e8 00 00 00 00	 call	 _NormalCursor
  03cd2	b8 01 00 00 00	 mov	 eax, 1
  03cd7	e9 cc c3 ff ff	 jmp	 $LN517@MainDialog
$LN1043@MainDialog:
  03cdc	e8 00 00 00 00	 call	 ?WipePasswordsAndKeyfiles@@YAXXZ ; WipePasswordsAndKeyfiles
  03ce1	33 c0		 xor	 eax, eax
  03ce3	a3 00 00 00 00	 mov	 DWORD PTR _bInPlaceEncNonSys, eax
  03ce8	a2 00 00 00 00	 mov	 BYTE PTR ?szFileName@@3PADA, al
  03ced	a2 00 00 00 00	 mov	 BYTE PTR ?szDiskFile@@3PADA, al
  03cf2	a3 00 00 00 00	 mov	 DWORD PTR ?nUIVolumeSize@@3_KA, eax
  03cf7	a3 04 00 00 00	 mov	 DWORD PTR ?nUIVolumeSize@@3_KA+4, eax
  03cfc	a3 00 00 00 00	 mov	 DWORD PTR ?nVolumeSize@@3_KA, eax
  03d01	a3 04 00 00 00	 mov	 DWORD PTR ?nVolumeSize@@3_KA+4, eax
  03d06	89 3d 00 00 00
	00		 mov	 DWORD PTR _WizardMode, edi
$LN1047@MainDialog:
  03d0c	a1 00 00 00 00	 mov	 eax, DWORD PTR _WizardMode
  03d11	f7 d8		 neg	 eax

; 7615 : 					{
; 7616 : 						NormalCursor ();
; 7617 : 						return 1;
; 7618 : 					}
; 7619 : 
; 7620 : 					// Skip irrelevant pages.
; 7621 : 					// Note that we're ignoring nMultiBoot here, as the multi-boot question pages are skipped
; 7622 : 					// when creating a hidden OS (only a single message box is displayed with requirements).
; 7623 : 					nNewPageNo = SYSENC_MULTI_BOOT_MODE_PAGE + 1;		

  03d13	c7 45 ec 07 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 7

; 7802 : 					}
; 7803 : 					else
; 7804 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7805 : 				}
; 7806 : 			}
; 7807 : 
; 7808 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03d1a	8b 4d ec	 mov	 ecx, DWORD PTR _nNewPageNo$[ebp]
  03d1d	1b c0		 sbb	 eax, eax
  03d1f	49		 dec	 ecx
  03d20	51		 push	 ecx
  03d21	f7 d8		 neg	 eax
  03d23	53		 push	 ebx
  03d24	a3 00 00 00 00	 mov	 DWORD PTR ?bDevice@@3HA, eax ; bDevice
  03d29	e8 00 00 00 00	 call	 _LoadPage
  03d2e	83 c4 08	 add	 esp, 8
$ovf_end_10$134850:
  03d31	b8 01 00 00 00	 mov	 eax, 1
  03d36	e9 6d c3 ff ff	 jmp	 $LN517@MainDialog
$LN61@MainDialog:

; 7624 : 				}
; 7625 : 				else
; 7626 : 				{
; 7627 : 					nNewPageNo = VOLUME_LOCATION_PAGE + 1;
; 7628 : 				}
; 7629 : 			}
; 7630 : 			else if (nCurPageNo == HIDDEN_VOL_WIZARD_MODE_PAGE)

  03d3b	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  03d3e	75 3e		 jne	 SHORT $LN56@MainDialog

; 7631 : 			{
; 7632 : 				if (IsButtonChecked (GetDlgItem (hCurPage, IDC_HIDVOL_WIZ_MODE_DIRECT)))

  03d40	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  03d46	68 0c 04 00 00	 push	 1036			; 0000040cH
  03d4b	51		 push	 ecx
  03d4c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  03d52	50		 push	 eax
  03d53	e8 00 00 00 00	 call	 _IsButtonChecked

; 7802 : 					}
; 7803 : 					else
; 7804 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7805 : 				}
; 7806 : 			}
; 7807 : 
; 7808 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03d58	8b 4d ec	 mov	 ecx, DWORD PTR _nNewPageNo$[ebp]
  03d5b	83 c4 04	 add	 esp, 4
  03d5e	f7 d8		 neg	 eax
  03d60	1b c0		 sbb	 eax, eax
  03d62	49		 dec	 ecx
  03d63	51		 push	 ecx
  03d64	f7 d8		 neg	 eax
  03d66	53		 push	 ebx
  03d67	a3 00 00 00 00	 mov	 DWORD PTR _bHiddenVolDirect, eax
  03d6c	e8 00 00 00 00	 call	 _LoadPage
  03d71	83 c4 08	 add	 esp, 8
$ovf_end_11$134850:
  03d74	b8 01 00 00 00	 mov	 eax, 1
  03d79	e9 2a c3 ff ff	 jmp	 $LN517@MainDialog
$LN56@MainDialog:

; 7633 : 					bHiddenVolDirect = TRUE;
; 7634 : 				else
; 7635 : 					bHiddenVolDirect = FALSE;
; 7636 : 			}
; 7637 : 			else if (nCurPageNo == VOLUME_TYPE_PAGE)

  03d7e	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  03d81	75 2d		 jne	 SHORT $LN52@MainDialog

; 7638 : 			{
; 7639 : 				if (WizardMode != WIZARD_MODE_SYS_DEVICE)

  03d83	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  03d89	3b d7		 cmp	 edx, edi
  03d8b	0f 84 2e 06 00
	00		 je	 $LN16@MainDialog

; 7640 : 					nNewPageNo = INTRO_PAGE + 1;	// Skip irrelevant pages

  03d91	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 1

; 7802 : 					}
; 7803 : 					else
; 7804 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7805 : 				}
; 7806 : 			}
; 7807 : 
; 7808 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03d98	8b 4d ec	 mov	 ecx, DWORD PTR _nNewPageNo$[ebp]
  03d9b	49		 dec	 ecx
  03d9c	51		 push	 ecx
  03d9d	53		 push	 ebx
  03d9e	e8 00 00 00 00	 call	 _LoadPage
  03da3	83 c4 08	 add	 esp, 8
$ovf_end_12$134850:
  03da6	b8 01 00 00 00	 mov	 eax, 1
  03dab	e9 f8 c2 ff ff	 jmp	 $LN517@MainDialog
$LN52@MainDialog:

; 7641 : 			}
; 7642 : 			else if (nCurPageNo == VOLUME_LOCATION_PAGE)

  03db0	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  03db3	0f 85 9a 00 00
	00		 jne	 $LN49@MainDialog

; 7643 : 			{
; 7644 : 				BOOL tmpbDevice;
; 7645 : 
; 7646 : 				GetWindowTextA(GetDlgItem (hCurPage, IDC_COMBO_BOX), szFileName, sizeof (szFileName));

  03db9	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  03dbe	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  03dc4	68 05 01 00 00	 push	 261			; 00000105H
  03dc9	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  03dce	68 ea 03 00 00	 push	 1002			; 000003eaH
  03dd3	50		 push	 eax
  03dd4	ff d6		 call	 esi
  03dd6	50		 push	 eax
  03dd7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 7647 : 				CreateFullVolumePath (szDiskFile, szFileName, &tmpbDevice);

  03ddd	8d 4d c4	 lea	 ecx, DWORD PTR _tmpbDevice$134888[ebp]
  03de0	51		 push	 ecx
  03de1	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  03de6	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  03deb	e8 00 00 00 00	 call	 _CreateFullVolumePath

; 7648 : 
; 7649 : 				if (tmpbDevice == bDevice)

  03df0	8b 55 c4	 mov	 edx, DWORD PTR _tmpbDevice$134888[ebp]
  03df3	83 c4 0c	 add	 esp, 12			; 0000000cH
  03df6	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?bDevice@@3HA ; bDevice
  03dfc	75 28		 jne	 SHORT $LN48@MainDialog

; 7650 : 				{
; 7651 : 					MoveEditToCombo (GetDlgItem (hCurPage, IDC_COMBO_BOX), bHistory);

  03dfe	a1 00 00 00 00	 mov	 eax, DWORD PTR _bHistory
  03e03	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  03e09	50		 push	 eax
  03e0a	68 ea 03 00 00	 push	 1002			; 000003eaH
  03e0f	51		 push	 ecx
  03e10	ff d6		 call	 esi
  03e12	50		 push	 eax
  03e13	e8 00 00 00 00	 call	 _MoveEditToCombo

; 7652 : 					SaveSettings (hCurPage);

  03e18	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _hCurPage
  03e1e	83 c4 08	 add	 esp, 8
  03e21	e8 00 00 00 00	 call	 _SaveSettings
$LN48@MainDialog:

; 7653 : 				}
; 7654 : 
; 7655 : 				if (!bHiddenVol)

  03e26	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  03e2c	85 d2		 test	 edx, edx
  03e2e	0f 85 8b 05 00
	00		 jne	 $LN16@MainDialog

; 7656 : 					nNewPageNo = VOLUME_TYPE_PAGE + 1;		// Skip the hidden volume creation wizard mode selection

  03e34	c7 45 ec 0d 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 13 ; 0000000dH

; 7802 : 					}
; 7803 : 					else
; 7804 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7805 : 				}
; 7806 : 			}
; 7807 : 
; 7808 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03e3b	8b 4d ec	 mov	 ecx, DWORD PTR _nNewPageNo$[ebp]
  03e3e	49		 dec	 ecx
  03e3f	51		 push	 ecx
  03e40	53		 push	 ebx
  03e41	e8 00 00 00 00	 call	 _LoadPage
  03e46	83 c4 08	 add	 esp, 8
$ovf_end_13$134850:
  03e49	b8 01 00 00 00	 mov	 eax, 1
  03e4e	e9 55 c2 ff ff	 jmp	 $LN517@MainDialog
$LN49@MainDialog:

; 7657 : 			}
; 7658 : 
; 7659 : 			else if (nCurPageNo == CIPHER_PAGE)

  03e53	83 f8 12	 cmp	 eax, 18			; 00000012H
  03e56	0f 85 17 01 00
	00		 jne	 $LN45@MainDialog

; 7660 : 			{
; 7661 : 				LPARAM nIndex;
; 7662 : 				nIndex = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX), CB_GETCURSEL, 0, 0);

  03e5c	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  03e61	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  03e67	6a 00		 push	 0
  03e69	6a 00		 push	 0
  03e6b	68 47 01 00 00	 push	 327			; 00000147H
  03e70	68 ea 03 00 00	 push	 1002			; 000003eaH
  03e75	50		 push	 eax
  03e76	ff d6		 call	 esi
  03e78	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  03e7e	50		 push	 eax
  03e7f	ff d7		 call	 edi

; 7663 : 				nVolumeEA = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX), CB_GETITEMDATA, nIndex, 0);

  03e81	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  03e87	6a 00		 push	 0
  03e89	50		 push	 eax
  03e8a	68 50 01 00 00	 push	 336			; 00000150H
  03e8f	68 ea 03 00 00	 push	 1002			; 000003eaH
  03e94	51		 push	 ecx
  03e95	ff d6		 call	 esi
  03e97	50		 push	 eax
  03e98	ff d7		 call	 edi

; 7664 : 
; 7665 : 				nIndex = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX_HASH_ALGO), CB_GETCURSEL, 0, 0);

  03e9a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  03ea0	6a 00		 push	 0
  03ea2	6a 00		 push	 0
  03ea4	68 47 01 00 00	 push	 327			; 00000147H
  03ea9	68 f0 03 00 00	 push	 1008			; 000003f0H
  03eae	52		 push	 edx
  03eaf	a3 00 00 00 00	 mov	 DWORD PTR ?nVolumeEA@@3HA, eax ; nVolumeEA
  03eb4	ff d6		 call	 esi
  03eb6	50		 push	 eax
  03eb7	ff d7		 call	 edi

; 7666 : 				hash_algo = SendMessage (GetDlgItem (hCurPage, IDC_COMBO_BOX_HASH_ALGO), CB_GETITEMDATA, nIndex, 0);

  03eb9	6a 00		 push	 0
  03ebb	50		 push	 eax
  03ebc	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  03ec1	68 50 01 00 00	 push	 336			; 00000150H
  03ec6	68 f0 03 00 00	 push	 1008			; 000003f0H
  03ecb	50		 push	 eax
  03ecc	ff d6		 call	 esi
  03ece	50		 push	 eax
  03ecf	ff d7		 call	 edi

; 7667 : 
; 7668 : 				RandSetHashFunction (hash_algo);

  03ed1	50		 push	 eax
  03ed2	a3 00 00 00 00	 mov	 DWORD PTR ?hash_algo@@3HA, eax ; hash_algo
  03ed7	e8 00 00 00 00	 call	 _RandSetHashFunction

; 7669 : 
; 7670 : 				if (WizardMode == WIZARD_MODE_SYS_DEVICE)

  03edc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WizardMode
  03ee2	83 c4 04	 add	 esp, 4
  03ee5	83 f9 02	 cmp	 ecx, 2
  03ee8	75 2d		 jne	 SHORT $LN44@MainDialog

; 7671 : 				{
; 7672 : 					if (nMultiBoot > 1)

  03eea	33 d2		 xor	 edx, edx
  03eec	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?nMultiBoot@@3HA, 1 ; nMultiBoot
  03ef3	0f 9e c2	 setle	 dl
  03ef6	4a		 dec	 edx
  03ef7	83 e2 05	 and	 edx, 5
  03efa	83 c2 07	 add	 edx, 7

; 7802 : 					}
; 7803 : 					else
; 7804 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7805 : 				}
; 7806 : 			}
; 7807 : 
; 7808 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03efd	8b ca		 mov	 ecx, edx
  03eff	49		 dec	 ecx
  03f00	51		 push	 ecx
  03f01	53		 push	 ebx
  03f02	89 55 ec	 mov	 DWORD PTR _nNewPageNo$[ebp], edx
  03f05	e8 00 00 00 00	 call	 _LoadPage
  03f0a	83 c4 08	 add	 esp, 8
$ovf_end_14$134850:
  03f0d	b8 01 00 00 00	 mov	 eax, 1
  03f12	e9 91 c1 ff ff	 jmp	 $LN517@MainDialog
$LN44@MainDialog:

; 7673 : 						nNewPageNo = SYSENC_MULTI_BOOT_OUTCOME_PAGE + 1;	// Skip irrelevant pages
; 7674 : 					else
; 7675 : 						nNewPageNo = SYSENC_MULTI_BOOT_MODE_PAGE + 1;		// Skip irrelevant pages
; 7676 : 				}
; 7677 : 				else if (!bHiddenVol)

  03f17	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  03f1c	85 c0		 test	 eax, eax
  03f1e	75 26		 jne	 SHORT $LN40@MainDialog

; 7678 : 					nNewPageNo = (bDevice ? DEVICE_TRANSFORM_MODE_PAGE : VOLUME_LOCATION_PAGE) + 1;	

  03f20	33 c9		 xor	 ecx, ecx
  03f22	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?bDevice@@3HA, ecx ; bDevice
  03f28	0f 95 c1	 setne	 cl
  03f2b	83 c1 0f	 add	 ecx, 15			; 0000000fH
  03f2e	89 4d ec	 mov	 DWORD PTR _nNewPageNo$[ebp], ecx

; 7802 : 					}
; 7803 : 					else
; 7804 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7805 : 				}
; 7806 : 			}
; 7807 : 
; 7808 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03f31	49		 dec	 ecx
  03f32	51		 push	 ecx
  03f33	53		 push	 ebx
  03f34	e8 00 00 00 00	 call	 _LoadPage
  03f39	83 c4 08	 add	 esp, 8
$ovf_end_15$134850:
  03f3c	b8 01 00 00 00	 mov	 eax, 1
  03f41	e9 62 c1 ff ff	 jmp	 $LN517@MainDialog
$LN40@MainDialog:

; 7679 : 				else if (bHiddenVolHost)

  03f46	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  03f4c	85 d2		 test	 edx, edx
  03f4e	0f 84 6b 04 00
	00		 je	 $LN16@MainDialog

; 7680 : 					nNewPageNo = HIDDEN_VOL_HOST_PRE_CIPHER_PAGE + 1;		// Skip the info on the hidden volume

  03f54	c7 45 ec 11 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 17 ; 00000011H

; 7802 : 					}
; 7803 : 					else
; 7804 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7805 : 				}
; 7806 : 			}
; 7807 : 
; 7808 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03f5b	8b 4d ec	 mov	 ecx, DWORD PTR _nNewPageNo$[ebp]
  03f5e	49		 dec	 ecx
  03f5f	51		 push	 ecx
  03f60	53		 push	 ebx
  03f61	e8 00 00 00 00	 call	 _LoadPage
  03f66	83 c4 08	 add	 esp, 8
$ovf_end_16$134850:
  03f69	b8 01 00 00 00	 mov	 eax, 1
  03f6e	e9 35 c1 ff ff	 jmp	 $LN517@MainDialog
$LN45@MainDialog:

; 7681 : 			}
; 7682 : 
; 7683 : 			else if (nCurPageNo == SIZE_PAGE)

  03f73	83 f8 13	 cmp	 eax, 19			; 00000013H
  03f76	75 28		 jne	 SHORT $LN36@MainDialog

; 7684 : 			{
; 7685 : 				VerifySizeAndUpdate (hCurPage, TRUE);

  03f78	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  03f7e	6a 01		 push	 1
  03f80	e8 00 00 00 00	 call	 _VerifySizeAndUpdate

; 7802 : 					}
; 7803 : 					else
; 7804 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7805 : 				}
; 7806 : 			}
; 7807 : 
; 7808 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03f85	8b 4d ec	 mov	 ecx, DWORD PTR _nNewPageNo$[ebp]
  03f88	83 c4 04	 add	 esp, 4
  03f8b	49		 dec	 ecx
  03f8c	51		 push	 ecx
  03f8d	53		 push	 ebx
  03f8e	e8 00 00 00 00	 call	 _LoadPage
  03f93	83 c4 08	 add	 esp, 8
$ovf_end_17$134850:
  03f96	b8 01 00 00 00	 mov	 eax, 1
  03f9b	e9 08 c1 ff ff	 jmp	 $LN517@MainDialog
$LN36@MainDialog:

; 7686 : 			}
; 7687 : 
; 7688 : 			else if (nCurPageNo == FILESYS_PAGE)

  03fa0	bf 16 00 00 00	 mov	 edi, 22			; 00000016H
  03fa5	3b c7		 cmp	 eax, edi
  03fa7	75 39		 jne	 SHORT $LN34@MainDialog

; 7689 : 			{
; 7690 : 				if (nNeedToStoreFilesOver4GB != Get2RadButtonPageAnswer())

  03fa9	e8 00 00 00 00	 call	 ?Get2RadButtonPageAnswer@@YAHXZ ; Get2RadButtonPageAnswer
  03fae	39 05 00 00 00
	00		 cmp	 DWORD PTR ?nNeedToStoreFilesOver4GB@@3HA, eax ; nNeedToStoreFilesOver4GB
  03fb4	74 0a		 je	 SHORT $LN33@MainDialog

; 7691 : 					fileSystem = FILESYS_NONE;	// The user may have gone back and changed the answer, so default file system must be reselected

  03fb6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fileSystem@@3HC, 0 ; fileSystem
$LN33@MainDialog:

; 7692 : 	
; 7693 : 				nNeedToStoreFilesOver4GB = Get2RadButtonPageAnswer();

  03fc0	e8 00 00 00 00	 call	 ?Get2RadButtonPageAnswer@@YAHXZ ; Get2RadButtonPageAnswer

; 7802 : 					}
; 7803 : 					else
; 7804 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7805 : 				}
; 7806 : 			}
; 7807 : 
; 7808 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  03fc5	8b 4d ec	 mov	 ecx, DWORD PTR _nNewPageNo$[ebp]
  03fc8	49		 dec	 ecx
  03fc9	51		 push	 ecx
  03fca	53		 push	 ebx
  03fcb	a3 00 00 00 00	 mov	 DWORD PTR ?nNeedToStoreFilesOver4GB@@3HA, eax ; nNeedToStoreFilesOver4GB
  03fd0	e8 00 00 00 00	 call	 _LoadPage
  03fd5	83 c4 08	 add	 esp, 8
$ovf_end_18$134850:
  03fd8	b8 01 00 00 00	 mov	 eax, 1
  03fdd	e9 c6 c0 ff ff	 jmp	 $LN517@MainDialog
$LN34@MainDialog:

; 7694 : 			}
; 7695 : 
; 7696 : 			else if (nCurPageNo == PASSWORD_PAGE)

  03fe2	83 f8 15	 cmp	 eax, 21			; 00000015H
  03fe5	0f 85 5c 01 00
	00		 jne	 $LN31@MainDialog

; 7697 : 			{
; 7698 : 				// Store the password in case we need to restore it after keyfile is applied to it
; 7699 : 				GetWindowTextW(GetDlgItem (hCurPage, IDC_PASSWORD), szRawPassword, sizeof (szRawPassword)/sizeof(*szRawPassword));

  03feb	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  03ff0	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  03ff6	6a 41		 push	 65			; 00000041H
  03ff8	68 00 00 00 00	 push	 OFFSET ?szRawPassword@@3PA_WA ; szRawPassword
  03ffd	68 ec 03 00 00	 push	 1004			; 000003ecH
  04002	50		 push	 eax
  04003	ff d6		 call	 esi
  04005	50		 push	 eax
  04006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextW@12

; 7700 : 
; 7701 : 				VerifyPasswordAndUpdate2(hwndDlg, GetDlgItem (MainDlg, IDC_NEXT),
; 7702 : 					GetDlgItem (hCurPage, IDC_PASSWORD),
; 7703 : 					GetDlgItem (hCurPage, IDC_VERIFY),
; 7704 : 					volumePassword.Text, sizeof(volumePassword.Text),
; 7705 : 					szTmpPas, sizeof(szTmpPas),
; 7706 : 					KeyFilesEnable && FirstKeyFile!=NULL && !SysEncInEffect ());

  0400c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _KeyFilesEnable, 0
  04013	74 19		 je	 SHORT $LN541@MainDialog
  04015	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _FirstKeyFile, 0
  0401c	74 10		 je	 SHORT $LN541@MainDialog
  0401e	e8 00 00 00 00	 call	 _SysEncInEffect
  04023	85 c0		 test	 eax, eax
  04025	75 07		 jne	 SHORT $LN541@MainDialog
  04027	b8 01 00 00 00	 mov	 eax, 1
  0402c	eb 02		 jmp	 SHORT $LN542@MainDialog
$LN541@MainDialog:
  0402e	33 c0		 xor	 eax, eax
$LN542@MainDialog:
  04030	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  04036	50		 push	 eax
  04037	6a 41		 push	 65			; 00000041H
  04039	68 00 00 00 00	 push	 OFFSET ?szTmpPas@@3PADA	; szTmpPas
  0403e	6a 41		 push	 65			; 00000041H
  04040	68 04 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A+4
  04045	68 f2 03 00 00	 push	 1010			; 000003f2H
  0404a	51		 push	 ecx
  0404b	ff d6		 call	 esi
  0404d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  04053	50		 push	 eax
  04054	68 ec 03 00 00	 push	 1004			; 000003ecH
  04059	52		 push	 edx
  0405a	ff d6		 call	 esi
  0405c	50		 push	 eax
  0405d	a1 00 00 00 00	 mov	 eax, DWORD PTR _MainDlg
  04062	68 10 04 00 00	 push	 1040			; 00000410H
  04067	50		 push	 eax
  04068	ff d6		 call	 esi
  0406a	50		 push	 eax
  0406b	53		 push	 ebx
  0406c	e8 00 00 00 00	 call	 _VerifyPasswordAndUpdate2

; 7707 : 
; 7708 : 				volumePassword.Length = strlen ((char *) volumePassword.Text);

  04071	b8 04 00 00 00	 mov	 eax, OFFSET ?volumePassword@@3UPassword@@A+4
  04076	83 c4 24	 add	 esp, 36			; 00000024H
  04079	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0407c	8d 64 24 00	 npad	 4
$LL1167@MainDialog:
  04080	8a 08		 mov	 cl, BYTE PTR [eax]
  04082	40		 inc	 eax
  04083	84 c9		 test	 cl, cl
  04085	75 f9		 jne	 SHORT $LL1167@MainDialog
  04087	2b c2		 sub	 eax, edx
  04089	a3 00 00 00 00	 mov	 DWORD PTR ?volumePassword@@3UPassword@@A, eax

; 7709 : 
; 7710 : 				nNewPageNo = SIZE_PAGE + 1;		// Skip the hidden volume host password page

  0408e	c7 45 ec 14 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 20 ; 00000014H

; 7711 : 
; 7712 : 				if (SysEncInEffect ())

  04095	e8 00 00 00 00	 call	 _SysEncInEffect
  0409a	85 c0		 test	 eax, eax
  0409c	0f 84 78 00 00
	00		 je	 $LN30@MainDialog

; 7713 : 				{
; 7714 : 					nNewPageNo = CIPHER_PAGE + 1;				// Skip irrelevant pages
; 7715 : 
; 7716 : 					KillTimer (hwndDlg, TIMER_ID_KEYB_LAYOUT_GUARD);

  040a2	68 04 01 00 00	 push	 260			; 00000104H
  040a7	53		 push	 ebx
  040a8	c7 45 ec 13 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 19 ; 00000013H
  040af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 7717 : 
; 7718 : 					if (bKeyboardLayoutChanged)

  040b5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bKeyboardLayoutChanged@@3HA, 0 ; bKeyboardLayoutChanged
  040bc	0f 84 fd 02 00
	00		 je	 $LN16@MainDialog

; 7719 : 					{
; 7720 : 						// Restore the original keyboard layout
; 7721 : 						if (LoadKeyboardLayout (OrigKeyboardLayout, KLF_ACTIVATE | KLF_SUBSTITUTE_OK) == NULL) 

  040c2	6a 03		 push	 3
  040c4	68 00 00 00 00	 push	 OFFSET ?OrigKeyboardLayout@@3PADA ; OrigKeyboardLayout
  040c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadKeyboardLayoutA@8
  040cf	85 c0		 test	 eax, eax
  040d1	75 25		 jne	 SHORT $LN28@MainDialog

; 7722 : 							Warning ("CANNOT_RESTORE_KEYBOARD_LAYOUT");

  040d3	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@BGCHIACG@CANNOT_RESTORE_KEYBOARD_LAYOUT?$AA@
  040d8	e8 00 00 00 00	 call	 _Warning

; 7802 : 					}
; 7803 : 					else
; 7804 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7805 : 				}
; 7806 : 			}
; 7807 : 
; 7808 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  040dd	8b 4d ec	 mov	 ecx, DWORD PTR _nNewPageNo$[ebp]
  040e0	83 c4 04	 add	 esp, 4
  040e3	49		 dec	 ecx
  040e4	51		 push	 ecx
  040e5	53		 push	 ebx
  040e6	e8 00 00 00 00	 call	 _LoadPage
  040eb	83 c4 08	 add	 esp, 8
$ovf_end_19$134850:
  040ee	b8 01 00 00 00	 mov	 eax, 1
  040f3	e9 b0 bf ff ff	 jmp	 $LN517@MainDialog
$LN28@MainDialog:
  040f8	8b 4d ec	 mov	 ecx, DWORD PTR _nNewPageNo$[ebp]
  040fb	49		 dec	 ecx
  040fc	51		 push	 ecx
  040fd	53		 push	 ebx
  040fe	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bKeyboardLayoutChanged@@3HA, 0 ; bKeyboardLayoutChanged
  04108	e8 00 00 00 00	 call	 _LoadPage
  0410d	83 c4 08	 add	 esp, 8
$ovf_end_20$134850:
  04110	b8 01 00 00 00	 mov	 eax, 1
  04115	e9 8e bf ff ff	 jmp	 $LN517@MainDialog
$LN30@MainDialog:

; 7723 : 						else
; 7724 : 							bKeyboardLayoutChanged = FALSE;
; 7725 : 					}
; 7726 : 				}
; 7727 : 				else if (bInPlaceEncNonSys)

  0411a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bInPlaceEncNonSys
  04120	85 c9		 test	 ecx, ecx
  04122	0f 84 97 02 00
	00		 je	 $LN16@MainDialog

; 7728 : 					nNewPageNo = CIPHER_PAGE + 1;

  04128	c7 45 ec 13 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 19 ; 00000013H

; 7802 : 					}
; 7803 : 					else
; 7804 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7805 : 				}
; 7806 : 			}
; 7807 : 
; 7808 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  0412f	8b 4d ec	 mov	 ecx, DWORD PTR _nNewPageNo$[ebp]
  04132	49		 dec	 ecx
  04133	51		 push	 ecx
  04134	53		 push	 ebx
  04135	e8 00 00 00 00	 call	 _LoadPage
  0413a	83 c4 08	 add	 esp, 8
$ovf_end_21$134850:
  0413d	b8 01 00 00 00	 mov	 eax, 1
  04142	e9 61 bf ff ff	 jmp	 $LN517@MainDialog
$LN31@MainDialog:

; 7729 : 			}
; 7730 : 
; 7731 : 			else if (nCurPageNo == HIDDEN_VOL_HOST_PASSWORD_PAGE
; 7732 : 				|| nCurPageNo == NONSYS_INPLACE_ENC_RESUME_PASSWORD_PAGE)

  04147	83 f8 14	 cmp	 eax, 20			; 00000014H
  0414a	0f 84 b6 01 00
	00		 je	 $LN22@MainDialog
  04150	83 f8 20	 cmp	 eax, 32			; 00000020H
  04153	0f 84 ad 01 00
	00		 je	 $LN22@MainDialog

; 7746 : 			}
; 7747 : 
; 7748 : 			else if (nCurPageNo == SYSENC_COLLECTING_RANDOM_DATA_PAGE
; 7749 : 				|| nCurPageNo == NONSYS_INPLACE_ENC_RAND_DATA_PAGE)

  04159	83 f8 17	 cmp	 eax, 23			; 00000017H
  0415c	0f 84 4e 01 00
	00		 je	 $LN13@MainDialog
  04162	83 f8 22	 cmp	 eax, 34			; 00000022H
  04165	0f 84 45 01 00
	00		 je	 $LN13@MainDialog

; 7759 : 
; 7760 : 				nNewPageNo = PASSWORD_PAGE + 1;		// Skip irrelevant pages
; 7761 : 			}
; 7762 : 
; 7763 : 			else if (nCurPageNo == SYSENC_KEYS_GEN_PAGE)

  0416b	83 f8 18	 cmp	 eax, 24			; 00000018H
  0416e	75 57		 jne	 SHORT $LN11@MainDialog

; 7764 : 			{
; 7765 : 				char tmp[KEY_GUI_VIEW_SIZE+1];
; 7766 : 
; 7767 : 				// Attempt to wipe the GUI fields showing portions of the master and header keys
; 7768 : 				memset (tmp, 0x20, sizeof(tmp)); //0x20 = ASCII space or 0x2020 = Unicode DAGGER

  04170	6a 41		 push	 65			; 00000041H
  04172	8d 95 8c cb 00
	00		 lea	 edx, DWORD PTR _tmp$134938[ebp]
  04178	6a 20		 push	 32			; 00000020H
  0417a	52		 push	 edx
  0417b	e8 00 00 00 00	 call	 _memset

; 7769 : 				tmp [sizeof(tmp)-1] = 0;
; 7770 : 				SetWindowTextA(hMasterKey, tmp);

  04180	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hMasterKey
  04186	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextA@8
  0418c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0418f	8d 85 8c cb 00
	00		 lea	 eax, DWORD PTR _tmp$134938[ebp]
  04195	50		 push	 eax
  04196	51		 push	 ecx
  04197	c6 85 cc cb 00
	00 00		 mov	 BYTE PTR _tmp$134938[ebp+64], 0
  0419e	ff d6		 call	 esi

; 7771 : 				SetWindowTextA(hHeaderKey, tmp);

  041a0	a1 00 00 00 00	 mov	 eax, DWORD PTR _hHeaderKey
  041a5	8d 95 8c cb 00
	00		 lea	 edx, DWORD PTR _tmp$134938[ebp]
  041ab	52		 push	 edx
  041ac	50		 push	 eax
  041ad	ff d6		 call	 esi

; 7802 : 					}
; 7803 : 					else
; 7804 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7805 : 				}
; 7806 : 			}
; 7807 : 
; 7808 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  041af	8b 4d ec	 mov	 ecx, DWORD PTR _nNewPageNo$[ebp]
  041b2	49		 dec	 ecx
  041b3	51		 push	 ecx
  041b4	53		 push	 ebx
  041b5	e8 00 00 00 00	 call	 _LoadPage
  041ba	83 c4 08	 add	 esp, 8
$ovf_end_22$134850:
  041bd	b8 01 00 00 00	 mov	 eax, 1
  041c2	e9 e1 be ff ff	 jmp	 $LN517@MainDialog
$LN11@MainDialog:

; 7772 : 			}
; 7773 : 
; 7774 : 			else if (nCurPageNo == SYSENC_WIPE_MODE_PAGE)

  041c7	83 f8 1c	 cmp	 eax, 28			; 0000001cH
  041ca	75 2c		 jne	 SHORT $LN9@MainDialog

; 7775 : 			{
; 7776 : 				if (bDontVerifyRescueDisk)

  041cc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bDontVerifyRescueDisk@@3HA, 0 ; bDontVerifyRescueDisk
  041d3	0f 84 e6 01 00
	00		 je	 $LN16@MainDialog

; 7777 : 					nNewPageNo = SYSENC_RESCUE_DISK_VERIFIED_PAGE;	// Skip irrelevant pages

  041d9	c7 45 ec 1b 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 27 ; 0000001bH

; 7802 : 					}
; 7803 : 					else
; 7804 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7805 : 				}
; 7806 : 			}
; 7807 : 
; 7808 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  041e0	8b 4d ec	 mov	 ecx, DWORD PTR _nNewPageNo$[ebp]
  041e3	49		 dec	 ecx
  041e4	51		 push	 ecx
  041e5	53		 push	 ebx
  041e6	e8 00 00 00 00	 call	 _LoadPage
  041eb	83 c4 08	 add	 esp, 8
$ovf_end_23$134850:
  041ee	b8 01 00 00 00	 mov	 eax, 1
  041f3	e9 b0 be ff ff	 jmp	 $LN517@MainDialog
$LN9@MainDialog:

; 7778 : 			}
; 7779 : 
; 7780 : 			else if (nCurPageNo == FORMAT_PAGE)

  041f8	83 f8 26	 cmp	 eax, 38			; 00000026H
  041fb	0f 85 be 01 00
	00		 jne	 $LN16@MainDialog

; 7781 : 			{
; 7782 : 				char tmp[RNG_POOL_SIZE*2+1];
; 7783 : 
; 7784 : 				KillTimer (hwndDlg, TIMER_ID_RANDVIEW);

  04201	68 ff 00 00 00	 push	 255			; 000000ffH
  04206	53		 push	 ebx
  04207	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 7785 : 
; 7786 : 				// Attempt to wipe the GUI fields showing portions of randpool, of the master and header keys
; 7787 : 				memset (tmp, 0x20, sizeof(tmp)); //0x20 = ASCII space or 0x2020 = Unicode DAGGER

  0420d	68 81 02 00 00	 push	 641			; 00000281H
  04212	8d 8d 80 be 00
	00		 lea	 ecx, DWORD PTR _tmp$134944[ebp]
  04218	6a 20		 push	 32			; 00000020H
  0421a	51		 push	 ecx
  0421b	e8 00 00 00 00	 call	 _memset

; 7788 : 				tmp [sizeof(tmp)-1] = 0;
; 7789 : 				SetWindowTextA(hRandPool, tmp);

  04220	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hRandPool@@3RAUHWND__@@A ; hRandPool
  04225	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextA@8
  0422b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0422e	8d 95 80 be 00
	00		 lea	 edx, DWORD PTR _tmp$134944[ebp]
  04234	52		 push	 edx
  04235	50		 push	 eax
  04236	c6 85 00 c1 00
	00 00		 mov	 BYTE PTR _tmp$134944[ebp+640], 0
  0423d	ff d6		 call	 esi

; 7790 : 				SetWindowTextA(hMasterKey, tmp);

  0423f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hMasterKey
  04245	8d 8d 80 be 00
	00		 lea	 ecx, DWORD PTR _tmp$134944[ebp]
  0424b	51		 push	 ecx
  0424c	52		 push	 edx
  0424d	ff d6		 call	 esi

; 7791 : 				SetWindowTextA(hHeaderKey, tmp);

  0424f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hHeaderKey
  04255	8d 85 80 be 00
	00		 lea	 eax, DWORD PTR _tmp$134944[ebp]
  0425b	50		 push	 eax
  0425c	51		 push	 ecx
  0425d	ff d6		 call	 esi

; 7792 : 
; 7793 : 				if (WizardMode != WIZARD_MODE_SYS_DEVICE)

  0425f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WizardMode
  04265	83 fa 02	 cmp	 edx, 2
  04268	0f 84 51 01 00
	00		 je	 $LN16@MainDialog

; 7794 : 				{
; 7795 : 					// Skip irrelevant pages
; 7796 : 
; 7797 : 					if (FileSize4GBLimitQuestionNeeded ()
; 7798 : 						&& !CreatingHiddenSysVol()		// If we're creating a hidden volume for a hidden OS, we don't need to format it with any filesystem (the entire OS will be copied to the hidden volume sector by sector).
; 7799 : 						&& !bInPlaceEncNonSys)

  0426e	e8 00 00 00 00	 call	 ?FileSize4GBLimitQuestionNeeded@@YAHXZ ; FileSize4GBLimitQuestionNeeded
  04273	85 c0		 test	 eax, eax
  04275	0f 84 71 00 00
	00		 je	 $LN4@MainDialog
  0427b	e8 00 00 00 00	 call	 _CreatingHiddenSysVol
  04280	85 c0		 test	 eax, eax
  04282	0f 85 64 00 00
	00		 jne	 $LN4@MainDialog
  04288	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSys
  0428d	85 c0		 test	 eax, eax
  0428f	75 5b		 jne	 SHORT $LN4@MainDialog

; 7800 : 					{
; 7801 : 						nNewPageNo = FILESYS_PAGE + 1;

  04291	c7 45 ec 17 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 23 ; 00000017H

; 7802 : 					}
; 7803 : 					else
; 7804 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7805 : 				}
; 7806 : 			}
; 7807 : 
; 7808 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  04298	8b 4d ec	 mov	 ecx, DWORD PTR _nNewPageNo$[ebp]
  0429b	49		 dec	 ecx
  0429c	51		 push	 ecx
  0429d	53		 push	 ebx
  0429e	e8 00 00 00 00	 call	 _LoadPage
  042a3	83 c4 08	 add	 esp, 8
$ovf_end_24$134850:
  042a6	b8 01 00 00 00	 mov	 eax, 1
  042ab	e9 f8 bd ff ff	 jmp	 $LN517@MainDialog
$LN13@MainDialog:

; 7750 : 			{
; 7751 : 				char tmp[RANDPOOL_DISPLAY_SIZE+1];
; 7752 : 
; 7753 : 				KillTimer (hwndDlg, TIMER_ID_RANDVIEW);

  042b0	68 ff 00 00 00	 push	 255			; 000000ffH
  042b5	53		 push	 ebx
  042b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 7754 : 
; 7755 : 				// Attempt to wipe the GUI field showing portions of randpool
; 7756 : 				memset (tmp, 0x20, sizeof(tmp)); //0x20 = ASCII space or 0x2020 = Unicode DAGGER

  042bc	68 73 01 00 00	 push	 371			; 00000173H
  042c1	8d 8d 00 c7 00
	00		 lea	 ecx, DWORD PTR _tmp$134935[ebp]
  042c7	6a 20		 push	 32			; 00000020H
  042c9	51		 push	 ecx
  042ca	e8 00 00 00 00	 call	 _memset

; 7757 : 				tmp [sizeof(tmp)-1] = 0;
; 7758 : 				SetWindowTextA(hRandPoolSys, tmp);

  042cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hRandPoolSys@@3RAUHWND__@@A ; hRandPoolSys
  042d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  042d7	8d 95 00 c7 00
	00		 lea	 edx, DWORD PTR _tmp$134935[ebp]
  042dd	52		 push	 edx
  042de	50		 push	 eax
  042df	c6 85 72 c8 00
	00 00		 mov	 BYTE PTR _tmp$134935[ebp+370], 0
  042e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8
$LN4@MainDialog:

; 7802 : 					}
; 7803 : 					else
; 7804 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7805 : 				}
; 7806 : 			}
; 7807 : 
; 7808 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  042ec	8b cf		 mov	 ecx, edi
  042ee	49		 dec	 ecx
  042ef	51		 push	 ecx
  042f0	53		 push	 ebx
  042f1	89 7d ec	 mov	 DWORD PTR _nNewPageNo$[ebp], edi
  042f4	e8 00 00 00 00	 call	 _LoadPage
  042f9	83 c4 08	 add	 esp, 8
$ovf_end_25$134850:
  042fc	b8 01 00 00 00	 mov	 eax, 1
  04301	e9 a2 bd ff ff	 jmp	 $LN517@MainDialog
$LN22@MainDialog:

; 7733 : 			{
; 7734 : 				WCHAR tmpUTF16buf[MAX_PASSWORD+1];
; 7735 : 				VirtualLock(tmpUTF16buf,sizeof(tmpUTF16buf));

  04306	68 82 00 00 00	 push	 130			; 00000082H
  0430b	8d 8d 08 cb 00
	00		 lea	 ecx, DWORD PTR _tmpUTF16buf$134918[ebp]
  04311	51		 push	 ecx
  04312	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualLock@8

; 7736 : 				// Store the password in case we need to restore it after keyfile is applied to it
; 7737 : 				GetWindowTextW(GetDlgItem (hCurPage, IDC_PASSWORD_DIRECT), szRawPassword, sizeof (szRawPassword)/sizeof(*szRawPassword));

  04318	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  0431e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04324	6a 41		 push	 65			; 00000041H
  04326	68 00 00 00 00	 push	 OFFSET ?szRawPassword@@3PA_WA ; szRawPassword
  0432b	68 0d 04 00 00	 push	 1037			; 0000040dH
  04330	52		 push	 edx
  04331	ff d6		 call	 esi
  04333	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetWindowTextW@12
  04339	50		 push	 eax
  0433a	ff d7		 call	 edi

; 7738 : 
; 7739 : 				GetWindowTextW(GetDlgItem (hCurPage, IDC_PASSWORD_DIRECT), tmpUTF16buf, sizeof(tmpUTF16buf)/sizeof(*tmpUTF16buf));

  0433c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  04342	6a 41		 push	 65			; 00000041H
  04344	8d 85 08 cb 00
	00		 lea	 eax, DWORD PTR _tmpUTF16buf$134918[ebp]
  0434a	50		 push	 eax
  0434b	68 0d 04 00 00	 push	 1037			; 0000040dH
  04350	51		 push	 ecx
  04351	ff d6		 call	 esi
  04353	50		 push	 eax
  04354	ff d7		 call	 edi

; 7740 : 				ConvertUTF16toUTF8s((const UTF16*)tmpUTF16buf,arraysize(tmpUTF16buf),(UTF8*)volumePassword.Text,arraysize(volumePassword.Text),strictConversion);

  04356	6a 00		 push	 0
  04358	6a 41		 push	 65			; 00000041H
  0435a	68 04 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A+4
  0435f	8d 95 08 cb 00
	00		 lea	 edx, DWORD PTR _tmpUTF16buf$134918[ebp]
  04365	6a 41		 push	 65			; 00000041H
  04367	52		 push	 edx
  04368	e8 00 00 00 00	 call	 _ConvertUTF16toUTF8s

; 7741 : 				burn(tmpUTF16buf,sizeof(tmpUTF16buf));

  0436d	8d 95 08 cb 00
	00		 lea	 edx, DWORD PTR _tmpUTF16buf$134918[ebp]
  04373	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  04378	83 c4 14	 add	 esp, 20			; 00000014H
  0437b	8b f1		 mov	 esi, ecx
  0437d	8b c2		 mov	 eax, edx
  0437f	90		 npad	 1
$LL1056@MainDialog:
  04380	c6 00 00	 mov	 BYTE PTR [eax], 0
  04383	40		 inc	 eax
  04384	83 ee 01	 sub	 esi, 1
  04387	75 f7		 jne	 SHORT $LL1056@MainDialog
  04389	8d a4 24 00 00
	00 00		 npad	 7
$LL18@MainDialog:
  04390	49		 dec	 ecx
  04391	c6 02 00	 mov	 BYTE PTR [edx], 0
  04394	42		 inc	 edx
  04395	85 c9		 test	 ecx, ecx
  04397	75 f7		 jne	 SHORT $LL18@MainDialog

; 7742 : 				volumePassword.Length = strlen ((char *) volumePassword.Text);

  04399	b8 04 00 00 00	 mov	 eax, OFFSET ?volumePassword@@3UPassword@@A+4
  0439e	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL1168@MainDialog:
  043a1	8a 08		 mov	 cl, BYTE PTR [eax]
  043a3	40		 inc	 eax
  043a4	84 c9		 test	 cl, cl
  043a6	75 f9		 jne	 SHORT $LL1168@MainDialog
  043a8	2b c2		 sub	 eax, edx
  043aa	a3 00 00 00 00	 mov	 DWORD PTR ?volumePassword@@3UPassword@@A, eax

; 7743 : 
; 7744 : 				if (!bInPlaceEncNonSys)

  043af	a1 00 00 00 00	 mov	 eax, DWORD PTR _bInPlaceEncNonSys
  043b4	85 c0		 test	 eax, eax
  043b6	75 07		 jne	 SHORT $LN16@MainDialog
$LN60@MainDialog:

; 7745 : 					nNewPageNo = VOLUME_LOCATION_PAGE + 1;

  043b8	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _nNewPageNo$[ebp], 15 ; 0000000fH
$LN16@MainDialog:

; 7802 : 					}
; 7803 : 					else
; 7804 : 						nNewPageNo = PASSWORD_PAGE + 1;		
; 7805 : 				}
; 7806 : 			}
; 7807 : 
; 7808 : 			LoadPage (hwndDlg, nNewPageNo - 1);

  043bf	8b 4d ec	 mov	 ecx, DWORD PTR _nNewPageNo$[ebp]
  043c2	49		 dec	 ecx
  043c3	51		 push	 ecx
  043c4	53		 push	 ebx
  043c5	e8 00 00 00 00	 call	 _LoadPage
  043ca	83 c4 08	 add	 esp, 8
$ovf_end_26$134850:
  043cd	b8 01 00 00 00	 mov	 eax, 1
  043d2	e9 d1 bc ff ff	 jmp	 $LN517@MainDialog
$LN433@MainDialog:

; 5943 : 
; 5944 : 		return 1;
; 5945 : 
; 5946 : 	case TC_APPMSG_VOL_TRANSFORM_THREAD_ENDED:
; 5947 : 
; 5948 : 		if (bInPlaceEncNonSys)

  043d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSys
  043dd	85 d2		 test	 edx, edx
  043df	74 20		 je	 SHORT $LN432@MainDialog

; 5949 : 		{
; 5950 : 			// In-place encryption was interrupted/paused (did not finish)
; 5951 : 
; 5952 : 			KillTimer (hwndDlg, TIMER_ID_NONSYS_INPLACE_ENC_PROGRESS);

  043e1	68 01 01 00 00	 push	 257			; 00000101H
  043e6	53		 push	 ebx
  043e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 5953 : 
; 5954 : 			UpdateNonSysInPlaceEncControls ();

  043ed	e8 00 00 00 00	 call	 _UpdateNonSysInPlaceEncControls

; 5970 : 		}
; 5971 : 
; 5972 : 		NormalCursor ();

  043f2	e8 00 00 00 00	 call	 _NormalCursor
  043f7	b8 01 00 00 00	 mov	 eax, 1
  043fc	e9 a7 bc ff ff	 jmp	 $LN517@MainDialog
$LN432@MainDialog:

; 5955 : 		}
; 5956 : 		else
; 5957 : 		{
; 5958 : 			// Format has been aborted (did not finish)
; 5959 : 
; 5960 : 			EnableWindow (GetDlgItem (hCurPage, IDC_QUICKFORMAT), (bDevice || bSparseFileSwitch) && !(bHiddenVol && !bHiddenVolHost));

  04401	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?bDevice@@3HA, edi ; bDevice
  04407	75 09		 jne	 SHORT $LN521@MainDialog
  04409	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bSparseFileSwitch@@3HC ; bSparseFileSwitch
  0440e	85 c0		 test	 eax, eax
  04410	74 14		 je	 SHORT $LN523@MainDialog
$LN521@MainDialog:
  04412	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  04418	85 c9		 test	 ecx, ecx
  0441a	74 0e		 je	 SHORT $LN522@MainDialog
  0441c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bHiddenVolHost
  04422	85 d2		 test	 edx, edx
  04424	75 04		 jne	 SHORT $LN522@MainDialog
$LN523@MainDialog:
  04426	33 c0		 xor	 eax, eax
  04428	eb 05		 jmp	 SHORT $LN524@MainDialog
$LN522@MainDialog:
  0442a	b8 01 00 00 00	 mov	 eax, 1
$LN524@MainDialog:
  0442f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04435	50		 push	 eax
  04436	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  0443b	68 ff 03 00 00	 push	 1023			; 000003ffH
  04440	50		 push	 eax
  04441	ff d6		 call	 esi
  04443	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  04449	50		 push	 eax
  0444a	ff d7		 call	 edi

; 5961 : 			EnableWindow (GetDlgItem (hCurPage, IDC_FILESYS), TRUE);

  0444c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  04452	6a 01		 push	 1
  04454	68 05 04 00 00	 push	 1029			; 00000405H
  04459	51		 push	 ecx
  0445a	ff d6		 call	 esi
  0445c	50		 push	 eax
  0445d	ff d7		 call	 edi

; 5962 : 			EnableWindow (GetDlgItem (hCurPage, IDC_CLUSTERSIZE), TRUE);

  0445f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  04465	6a 01		 push	 1
  04467	68 04 04 00 00	 push	 1028			; 00000404H
  0446c	52		 push	 edx
  0446d	ff d6		 call	 esi
  0446f	50		 push	 eax
  04470	ff d7		 call	 edi

; 5963 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_PREV), TRUE);

  04472	6a 01		 push	 1
  04474	68 11 04 00 00	 push	 1041			; 00000411H
  04479	53		 push	 ebx
  0447a	ff d6		 call	 esi
  0447c	50		 push	 eax
  0447d	ff d7		 call	 edi

; 5964 : 			EnableWindow (GetDlgItem (hwndDlg, IDHELP), TRUE);

  0447f	6a 01		 push	 1
  04481	6a 09		 push	 9
  04483	53		 push	 ebx
  04484	ff d6		 call	 esi
  04486	50		 push	 eax
  04487	ff d7		 call	 edi

; 5965 : 			EnableWindow (GetDlgItem (hwndDlg, IDCANCEL), TRUE);

  04489	6a 01		 push	 1
  0448b	6a 02		 push	 2
  0448d	53		 push	 ebx
  0448e	ff d6		 call	 esi
  04490	50		 push	 eax
  04491	ff d7		 call	 edi

; 5966 : 			EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), FALSE);

  04493	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  04498	6a 00		 push	 0
  0449a	68 f8 03 00 00	 push	 1016			; 000003f8H
  0449f	50		 push	 eax
  044a0	ff d6		 call	 esi
  044a2	50		 push	 eax
  044a3	ff d7		 call	 edi

; 5967 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_NEXT), TRUE);

  044a5	6a 01		 push	 1
  044a7	68 10 04 00 00	 push	 1040			; 00000410H
  044ac	53		 push	 ebx
  044ad	ff d6		 call	 esi
  044af	50		 push	 eax
  044b0	ff d7		 call	 edi

; 5968 : 			SendMessage (GetDlgItem (hCurPage, IDC_PROGRESS_BAR), PBM_SETPOS, 0, 0L);

  044b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  044b8	6a 00		 push	 0
  044ba	6a 00		 push	 0
  044bc	68 02 04 00 00	 push	 1026			; 00000402H
  044c1	68 f6 03 00 00	 push	 1014			; 000003f6H
  044c6	51		 push	 ecx
  044c7	ff d6		 call	 esi
  044c9	50		 push	 eax
  044ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 5969 : 			SetFocus (GetDlgItem (hwndDlg, IDC_NEXT));

  044d0	68 10 04 00 00	 push	 1040			; 00000410H
  044d5	53		 push	 ebx
  044d6	ff d6		 call	 esi
  044d8	50		 push	 eax
  044d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4
$LN431@MainDialog:

; 5970 : 		}
; 5971 : 
; 5972 : 		NormalCursor ();

  044df	e8 00 00 00 00	 call	 _NormalCursor
  044e4	b8 01 00 00 00	 mov	 eax, 1
  044e9	e9 ba bb ff ff	 jmp	 $LN517@MainDialog
$LN544@MainDialog:

; 5425 : 	WORD lw = LOWORD (wParam);
; 5426 : 
; 5427 : 	int nNewPageNo = nCurPageNo;
; 5428 : 
; 5429 : 	switch (uMsg)

  044ee	81 c1 d2 7e ff
	ff		 add	 ecx, -33070		; ffff7ed2H
  044f4	83 f9 04	 cmp	 ecx, 4
  044f7	0f 87 a9 bb ff
	ff		 ja	 $LN515@MainDialog
  044fd	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN1260@MainDialog[ecx*4]
$LN437@MainDialog:

; 5890 : 						}
; 5891 : 					}
; 5892 : 				}
; 5893 : 			}
; 5894 : 			else
; 5895 : 			{
; 5896 : 				// Regular device wipe (not decoy system partition wipe)
; 5897 : 
; 5898 : 				//Info ("WIPE_FINISHED");
; 5899 : 			}
; 5900 : 			return 1;
; 5901 : 		}
; 5902 : 
; 5903 : 		return 0;
; 5904 : 
; 5905 : 
; 5906 : 	case TC_APPMSG_PERFORM_POST_WMINIT_TASKS:
; 5907 : 
; 5908 : 		AfterWMInitTasks (hwndDlg);

  04504	8b cb		 mov	 ecx, ebx
  04506	e8 00 00 00 00	 call	 _AfterWMInitTasks

; 5909 : 		return 1;

  0450b	b8 01 00 00 00	 mov	 eax, 1
  04510	e9 93 bb ff ff	 jmp	 $LN517@MainDialog
$LN436@MainDialog:

; 5910 : 
; 5911 : 	case TC_APPMSG_FORMAT_FINISHED:
; 5912 : 		{
; 5913 : 			char tmp[RNG_POOL_SIZE*2+1];
; 5914 : 
; 5915 : 			EnableWindow (GetDlgItem (hCurPage, IDC_ABORT_BUTTON), FALSE);

  04515	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  0451b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  04521	6a 00		 push	 0
  04523	68 f8 03 00 00	 push	 1016			; 000003f8H
  04528	52		 push	 edx
  04529	ff d6		 call	 esi
  0452b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  04531	50		 push	 eax
  04532	ff d7		 call	 edi

; 5916 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_PREV), TRUE);

  04534	6a 01		 push	 1
  04536	68 11 04 00 00	 push	 1041			; 00000411H
  0453b	53		 push	 ebx
  0453c	ff d6		 call	 esi
  0453e	50		 push	 eax
  0453f	ff d7		 call	 edi

; 5917 : 			EnableWindow (GetDlgItem (hwndDlg, IDHELP), TRUE);

  04541	6a 01		 push	 1
  04543	6a 09		 push	 9
  04545	53		 push	 ebx
  04546	ff d6		 call	 esi
  04548	50		 push	 eax
  04549	ff d7		 call	 edi

; 5918 : 			EnableWindow (GetDlgItem (hwndDlg, IDCANCEL), TRUE);

  0454b	6a 01		 push	 1
  0454d	6a 02		 push	 2
  0454f	53		 push	 ebx
  04550	ff d6		 call	 esi
  04552	50		 push	 eax
  04553	ff d7		 call	 edi

; 5919 : 			EnableWindow (GetDlgItem (hwndDlg, IDC_NEXT), TRUE);

  04555	6a 01		 push	 1
  04557	68 10 04 00 00	 push	 1040			; 00000410H
  0455c	53		 push	 ebx
  0455d	ff d6		 call	 esi
  0455f	50		 push	 eax
  04560	ff d7		 call	 edi

; 5920 : 			SetFocus (GetDlgItem (hwndDlg, IDC_NEXT));

  04562	68 10 04 00 00	 push	 1040			; 00000410H
  04567	53		 push	 ebx
  04568	ff d6		 call	 esi
  0456a	50		 push	 eax
  0456b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFocus@4

; 5921 : 
; 5922 : 			if (nCurPageNo == FORMAT_PAGE)

  04571	83 3d 00 00 00
	00 26		 cmp	 DWORD PTR ?nCurPageNo@@3HA, 38 ; nCurPageNo, 00000026H
  04578	75 0c		 jne	 SHORT $LN435@MainDialog

; 5923 : 				KillTimer (hwndDlg, TIMER_ID_RANDVIEW);

  0457a	68 ff 00 00 00	 push	 255			; 000000ffH
  0457f	53		 push	 ebx
  04580	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8
$LN435@MainDialog:

; 5924 : 
; 5925 : 			// Attempt to wipe the GUI fields showing portions of randpool, of the master and header keys
; 5926 : 			memset (tmp, 0x20, sizeof(tmp)); //0x20 = ASCII space or 0x2020 = Unicode DAGGER

  04586	68 81 02 00 00	 push	 641			; 00000281H
  0458b	8d 85 04 c1 00
	00		 lea	 eax, DWORD PTR _tmp$134310[ebp]
  04591	6a 20		 push	 32			; 00000020H
  04593	50		 push	 eax
  04594	e8 00 00 00 00	 call	 _memset

; 5927 : 			tmp [sizeof(tmp)-1] = 0;
; 5928 : 			SetWindowTextA(hRandPool, tmp);

  04599	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hRandPool@@3RAUHWND__@@A ; hRandPool
  0459f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextA@8
  045a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  045a8	8d 8d 04 c1 00
	00		 lea	 ecx, DWORD PTR _tmp$134310[ebp]
  045ae	51		 push	 ecx
  045af	52		 push	 edx
  045b0	c6 85 84 c3 00
	00 00		 mov	 BYTE PTR _tmp$134310[ebp+640], 0
  045b7	ff d7		 call	 edi

; 5929 : 			SetWindowTextA(hMasterKey, tmp);

  045b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hMasterKey
  045bf	8d 85 04 c1 00
	00		 lea	 eax, DWORD PTR _tmp$134310[ebp]
  045c5	50		 push	 eax
  045c6	51		 push	 ecx
  045c7	ff d7		 call	 edi

; 5930 : 			SetWindowTextA(hHeaderKey, tmp);

  045c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _hHeaderKey
  045ce	8d 95 04 c1 00
	00		 lea	 edx, DWORD PTR _tmp$134310[ebp]
  045d4	52		 push	 edx
  045d5	50		 push	 eax
  045d6	ff d7		 call	 edi

; 5931 : 
; 5932 : 			LoadPage (hwndDlg, FORMAT_FINISHED_PAGE);

  045d8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _hCurPage, 0
  045df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  045e4	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  045e9	0f 84 6a 00 00
	00		 je	 $LN1227@MainDialog
  045ef	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  045f9	83 f8 15	 cmp	 eax, 21			; 00000015H
  045fc	75 44		 jne	 SHORT $LN802@MainDialog
  045fe	68 82 00 00 00	 push	 130			; 00000082H
  04603	8d 8d f8 c8 00
	00		 lea	 ecx, DWORD PTR _tmp$169589[ebp]
  04609	6a 20		 push	 32			; 00000020H
  0460b	51		 push	 ecx
  0460c	e8 00 00 00 00	 call	 _memset
  04611	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  04617	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowTextW@8
  0461d	83 c4 0c	 add	 esp, 12			; 0000000cH
  04620	8d 85 f8 c8 00
	00		 lea	 eax, DWORD PTR _tmp$169589[ebp]
  04626	50		 push	 eax
  04627	33 d2		 xor	 edx, edx
  04629	51		 push	 ecx
  0462a	66 89 95 78 c9
	00 00		 mov	 WORD PTR _tmp$169589[ebp+128], dx
  04631	ff d7		 call	 edi
  04633	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  04638	8d 95 f8 c8 00
	00		 lea	 edx, DWORD PTR _tmp$169589[ebp]
  0463e	52		 push	 edx
  0463f	50		 push	 eax
  04640	ff d7		 call	 edi
$LN802@MainDialog:
  04642	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  04648	51		 push	 ecx
  04649	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  0464f	33 ff		 xor	 edi, edi
  04651	89 3d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, edi
  04657	eb 02		 jmp	 SHORT $LN804@MainDialog
$LN1227@MainDialog:
  04659	33 ff		 xor	 edi, edi
$LN804@MainDialog:
  0465b	89 3d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, edi
  04661	e8 00 00 00 00	 call	 _NormalCursor
  04666	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _rW$169584[ebp]
  0466c	52		 push	 edx
  0466d	68 23 04 00 00	 push	 1059			; 00000423H
  04672	53		 push	 ebx
  04673	ff d6		 call	 esi
  04675	50		 push	 eax
  04676	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  0467c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bHiddenVol@@3HC ; bHiddenVol
  04681	c7 05 00 00 00
	00 27 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 39 ; nCurPageNo, 00000027H
  0468b	85 c0		 test	 eax, eax
  0468d	74 17		 je	 SHORT $LN807@MainDialog
  0468f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _bHiddenVolHost
  04695	85 c9		 test	 ecx, ecx
  04697	75 0d		 jne	 SHORT $LN807@MainDialog
  04699	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bHiddenVolFinished@@3HC ; bHiddenVolFinished
  0469f	8d 41 6d	 lea	 eax, DWORD PTR [ecx+109]
  046a2	85 d2		 test	 edx, edx
  046a4	74 05		 je	 SHORT $LN808@MainDialog
$LN807@MainDialog:
  046a6	b8 6c 00 00 00	 mov	 eax, 108		; 0000006cH
$LN808@MainDialog:
  046ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hInst
  046b1	57		 push	 edi
  046b2	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  046b7	0f b7 c0	 movzx	 eax, ax
  046ba	53		 push	 ebx
  046bb	50		 push	 eax
  046bc	51		 push	 ecx
  046bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  046c3	8d 55 a4	 lea	 edx, DWORD PTR _rD$169583[ebp]
  046c6	52		 push	 edx
  046c7	53		 push	 ebx
  046c8	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  046cd	c7 45 a4 a2 00
	00 00		 mov	 DWORD PTR _rD$169583[ebp], 162 ; 000000a2H
  046d4	c7 45 a8 19 00
	00 00		 mov	 DWORD PTR _rD$169583[ebp+4], 25 ; 00000019H
  046db	89 7d ac	 mov	 DWORD PTR _rD$169583[ebp+8], edi
  046de	89 7d b0	 mov	 DWORD PTR _rD$169583[ebp+12], edi
  046e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  046e7	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  046ec	3b c7		 cmp	 eax, edi
  046ee	0f 84 c3 c5 ff
	ff		 je	 $LN693@MainDialog
  046f4	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _rW$169584[ebp+12]
  046fa	2b 8d 38 ff ff
	ff		 sub	 ecx, DWORD PTR _rW$169584[ebp+4]
  04700	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _rW$169584[ebp+8]
  04706	2b 95 34 ff ff
	ff		 sub	 edx, DWORD PTR _rW$169584[ebp]
  0470c	6a 01		 push	 1
  0470e	51		 push	 ecx
  0470f	8b 4d a8	 mov	 ecx, DWORD PTR _rD$169583[ebp+4]
  04712	52		 push	 edx
  04713	8b 55 a4	 mov	 edx, DWORD PTR _rD$169583[ebp]

; 5933 : 		}
; 5934 : 		return 1;

  04716	e9 85 c5 ff ff	 jmp	 $LN1256@MainDialog
$LN434@MainDialog:

; 5935 : 
; 5936 : 	case TC_APPMSG_NONSYS_INPLACE_ENC_FINISHED:
; 5937 : 
; 5938 : 		// A partition has just been fully encrypted in place
; 5939 : 
; 5940 : 		KillTimer (hwndDlg, TIMER_ID_NONSYS_INPLACE_ENC_PROGRESS);

  0471b	68 01 01 00 00	 push	 257			; 00000101H
  04720	53		 push	 ebx
  04721	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 5941 : 
; 5942 : 		LoadPage (hwndDlg, NONSYS_INPLACE_ENC_ENCRYPTION_FINISHED_PAGE);

  04727	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  0472c	a3 00 00 00 00	 mov	 DWORD PTR ?nLastPageNo@@3HA, eax ; nLastPageNo
  04731	39 3d 00 00 00
	00		 cmp	 DWORD PTR _hCurPage, edi
  04737	0f 84 66 00 00
	00		 je	 $LN864@MainDialog
  0473d	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nCurPageNo@@3HA, -1 ; nCurPageNo
  04747	83 f8 15	 cmp	 eax, 21			; 00000015H
  0474a	75 44		 jne	 SHORT $LN862@MainDialog
  0474c	68 82 00 00 00	 push	 130			; 00000082H
  04751	8d 8d 7c c9 00
	00		 lea	 ecx, DWORD PTR _tmp$169664[ebp]
  04757	6a 20		 push	 32			; 00000020H
  04759	51		 push	 ecx
  0475a	e8 00 00 00 00	 call	 _memset
  0475f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hPasswordInputField@@3RAUHWND__@@A ; hPasswordInputField
  04765	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextW@8
  0476b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0476e	8d 85 7c c9 00
	00		 lea	 eax, DWORD PTR _tmp$169664[ebp]
  04774	50		 push	 eax
  04775	33 d2		 xor	 edx, edx
  04777	51		 push	 ecx
  04778	66 89 95 fc c9
	00 00		 mov	 WORD PTR _tmp$169664[ebp+128], dx
  0477f	ff d6		 call	 esi
  04781	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hVerifyPasswordInputField@@3RAUHWND__@@A ; hVerifyPasswordInputField
  04786	8d 95 7c c9 00
	00		 lea	 edx, DWORD PTR _tmp$169664[ebp]
  0478c	52		 push	 edx
  0478d	50		 push	 eax
  0478e	ff d6		 call	 esi
$LN862@MainDialog:
  04790	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hCurPage
  04796	51		 push	 ecx
  04797	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
  0479d	89 3d 00 00 00
	00		 mov	 DWORD PTR _hCurPage, edi
$LN864@MainDialog:
  047a3	89 3d 00 00 00
	00		 mov	 DWORD PTR _bHyperLinkBeingTracked, edi
  047a9	e8 00 00 00 00	 call	 _NormalCursor
  047ae	8d 95 24 ff ff
	ff		 lea	 edx, DWORD PTR _rW$169659[ebp]
  047b4	52		 push	 edx
  047b5	68 23 04 00 00	 push	 1059			; 00000423H
  047ba	53		 push	 ebx
  047bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  047c1	50		 push	 eax
  047c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8
  047c8	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  047cd	57		 push	 edi
  047ce	68 00 00 00 00	 push	 OFFSET _PageDialogProc@16
  047d3	53		 push	 ebx
  047d4	6a 6c		 push	 108			; 0000006cH
  047d6	50		 push	 eax
  047d7	c7 05 00 00 00
	00 25 00 00 00	 mov	 DWORD PTR ?nCurPageNo@@3HA, 37 ; nCurPageNo, 00000025H
  047e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20
  047e7	8d 4d 94	 lea	 ecx, DWORD PTR _rD$169658[ebp]
  047ea	51		 push	 ecx
  047eb	53		 push	 ebx
  047ec	a3 00 00 00 00	 mov	 DWORD PTR _hCurPage, eax
  047f1	c7 45 94 a2 00
	00 00		 mov	 DWORD PTR _rD$169658[ebp], 162 ; 000000a2H
  047f8	c7 45 98 19 00
	00 00		 mov	 DWORD PTR _rD$169658[ebp+4], 25 ; 00000019H
  047ff	89 7d 9c	 mov	 DWORD PTR _rD$169658[ebp+8], edi
  04802	89 7d a0	 mov	 DWORD PTR _rD$169658[ebp+12], edi
  04805	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapDialogRect@8
  0480b	a1 00 00 00 00	 mov	 eax, DWORD PTR _hCurPage
  04810	3b c7		 cmp	 eax, edi
  04812	0f 84 9f c4 ff
	ff		 je	 $LN693@MainDialog
  04818	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR _rW$169659[ebp+12]
  0481e	2b 95 28 ff ff
	ff		 sub	 edx, DWORD PTR _rW$169659[ebp+4]
  04824	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR _rW$169659[ebp+8]
  0482a	2b 8d 24 ff ff
	ff		 sub	 ecx, DWORD PTR _rW$169659[ebp]
  04830	6a 01		 push	 1
  04832	52		 push	 edx
  04833	8b 55 98	 mov	 edx, DWORD PTR _rD$169658[ebp+4]
  04836	51		 push	 ecx
  04837	8b 4d 94	 mov	 ecx, DWORD PTR _rD$169658[ebp]
  0483a	52		 push	 edx
  0483b	51		 push	 ecx
  0483c	50		 push	 eax
  0483d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  04843	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hCurPage
  04849	6a 01		 push	 1
  0484b	52		 push	 edx
  0484c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
  04852	b8 01 00 00 00	 mov	 eax, 1
  04857	e9 4c b8 ff ff	 jmp	 $LN517@MainDialog
$LN429@MainDialog:

; 5978 : 		return 1;
; 5979 : 
; 5980 : 	case TC_APPMSG_FORMAT_USER_QUIT:
; 5981 : 
; 5982 : 		if (nCurPageNo == NONSYS_INPLACE_ENC_ENCRYPTION_PAGE
; 5983 : 			&& (bVolTransformThreadRunning || bVolTransformThreadToRun || bInPlaceEncNonSysResumed))

  0485c	83 f8 24	 cmp	 eax, 36			; 00000024H
  0485f	75 49		 jne	 SHORT $LN428@MainDialog
  04861	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  04866	85 c0		 test	 eax, eax
  04868	75 14		 jne	 SHORT $LN427@MainDialog
  0486a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  04870	85 c9		 test	 ecx, ecx
  04872	75 0a		 jne	 SHORT $LN427@MainDialog
  04874	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _bInPlaceEncNonSysResumed
  0487a	85 d2		 test	 edx, edx
  0487c	74 2c		 je	 SHORT $LN428@MainDialog
$LN427@MainDialog:

; 5984 : 		{
; 5985 : 			// Non-system encryption in progress
; 5986 : 			if (AskNoYes ("NONSYS_INPLACE_ENC_DEFER_CONFIRM") == IDYES)

  0487e	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MEPMKNNG@NONSYS_INPLACE_ENC_DEFER_CONFIRM@
  04883	e8 00 00 00 00	 call	 _AskNoYes
  04888	83 c4 04	 add	 esp, 4
  0488b	83 f8 06	 cmp	 eax, 6
  0488e	0f 85 d4 bb ff
	ff		 jne	 $LN487@MainDialog

; 5987 : 			{
; 5988 : 				NonSysInplaceEncPause ();

  04894	e8 00 00 00 00	 call	 _NonSysInplaceEncPause

; 5989 : 
; 5990 : 				EndMainDlg (hwndDlg);

  04899	8b fb		 mov	 edi, ebx
  0489b	e8 00 00 00 00	 call	 _EndMainDlg
  048a0	b8 01 00 00 00	 mov	 eax, 1
  048a5	e9 fe b7 ff ff	 jmp	 $LN517@MainDialog
$LN428@MainDialog:

; 5991 : 				return 1;
; 5992 : 			}
; 5993 : 			else
; 5994 : 				return 1;	// Disallow close
; 5995 : 		}
; 5996 : 		else if (bVolTransformThreadRunning || bVolTransformThreadToRun)

  048aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bVolTransformThreadRunning@@3HC ; bVolTransformThreadRunning
  048af	85 c0		 test	 eax, eax
  048b1	0f 85 a5 01 00
	00		 jne	 $LN422@MainDialog
  048b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bVolTransformThreadToRun@@3HC ; bVolTransformThreadToRun
  048bd	85 c9		 test	 ecx, ecx
  048bf	0f 85 97 01 00
	00		 jne	 $LN422@MainDialog

; 6004 : 				return 1;
; 6005 : 			}
; 6006 : 			else
; 6007 : 				return 1;	// Disallow close
; 6008 : 		}
; 6009 : 		else if ((nCurPageNo == SYSENC_ENCRYPTION_PAGE || nCurPageNo == SYSENC_PRETEST_RESULT_PAGE)
; 6010 : 			&& SystemEncryptionStatus != SYSENC_STATUS_NONE
; 6011 : 			&& InstanceHasSysEncMutex ())

  048c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nCurPageNo@@3HA ; nCurPageNo
  048ca	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  048cd	74 09		 je	 SHORT $LN417@MainDialog
  048cf	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  048d2	0f 85 fc 00 00
	00		 jne	 $LN418@MainDialog
$LN417@MainDialog:
  048d8	39 3d 00 00 00
	00		 cmp	 DWORD PTR _SystemEncryptionStatus, edi
  048de	0f 84 f0 00 00
	00		 je	 $LN418@MainDialog
  048e4	e8 00 00 00 00	 call	 _InstanceHasSysEncMutex
  048e9	85 c0		 test	 eax, eax
  048eb	0f 84 e3 00 00
	00		 je	 $LN418@MainDialog

; 6012 : 		{
; 6013 : 			// System encryption/decryption in progress
; 6014 : 
; 6015 : 			if (AskYesNo (SystemEncryptionStatus == SYSENC_STATUS_DECRYPTING ? 
; 6016 : 				"SYSTEM_DECRYPTION_DEFER_CONFIRM" : "SYSTEM_ENCRYPTION_DEFER_CONFIRM") == IDYES)

  048f1	81 3d 00 00 00
	00 58 02 00 00	 cmp	 DWORD PTR _SystemEncryptionStatus, 600 ; 00000258H
  048fb	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CA@MDOAMJOP@SYSTEM_DECRYPTION_DEFER_CONFIRM?$AA@
  04900	74 05		 je	 SHORT $LN526@MainDialog
  04902	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CA@OMHIMMHH@SYSTEM_ENCRYPTION_DEFER_CONFIRM?$AA@
$LN526@MainDialog:
  04907	50		 push	 eax
  04908	e8 00 00 00 00	 call	 _AskYesNo
  0490d	83 c4 04	 add	 esp, 4
  04910	83 f8 06	 cmp	 eax, 6
  04913	0f 85 4f bb ff
	ff		 jne	 $LN487@MainDialog

; 6017 : 			{
; 6018 : 				if (nCurPageNo == SYSENC_PRETEST_RESULT_PAGE)

  04919	83 3d 00 00 00
	00 1e		 cmp	 DWORD PTR ?nCurPageNo@@3HA, 30 ; nCurPageNo, 0000001eH
  04920	75 0a		 jne	 SHORT $LN415@MainDialog

; 6019 : 					TextInfoDialogBox (TC_TBXID_SYS_ENC_RESCUE_DISK);

  04922	6a 02		 push	 2
  04924	e8 00 00 00 00	 call	 _TextInfoDialogBox
  04929	83 c4 04	 add	 esp, 4
$LN415@MainDialog:

; 6020 : 
; 6021 : 				try
; 6022 : 				{
; 6023 : 					BootEncStatus = BootEncObj->GetStatus();

  0492c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  04932	8d 95 36 fa ff
	ff		 lea	 edx, DWORD PTR $T169264[ebp]
  04938	52		 push	 edx
  04939	c7 45 fc 14 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 20 ; 00000014H
  04940	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  04945	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0494a	8b f0		 mov	 esi, eax
  0494c	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  04951	f3 a5		 rep movsd
  04953	66 a5		 movsw

; 6024 : 
; 6025 : 					if (BootEncStatus.SetupInProgress)

  04955	83 3d 3e 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62, 0
  0495c	0f 84 e8 bf ff
	ff		 je	 $LN1115@MainDialog

; 6026 : 					{
; 6027 : 						BootEncObj->AbortSetupWait ();

  04962	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  04968	e8 00 00 00 00	 call	 ?AbortSetupWait@BootEncryption@CipherShed@@QAEXXZ ; CipherShed::BootEncryption::AbortSetupWait

; 6028 : 						Sleep (200);

  0496d	68 c8 00 00 00	 push	 200			; 000000c8H
  04972	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 6029 : 						BootEncStatus = BootEncObj->GetStatus();

  04978	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A ; BootEncObj
  0497e	8d 85 1c f9 ff
	ff		 lea	 eax, DWORD PTR $T169265[ebp]
  04984	50		 push	 eax
  04985	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@CipherShed@@QAE?AUBootEncryptionStatus@@XZ ; CipherShed::BootEncryption::GetStatus
  0498a	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0498f	8b f0		 mov	 esi, eax
  04991	bf 00 00 00 00	 mov	 edi, OFFSET ?BootEncStatus@@3UBootEncryptionStatus@@A ; BootEncStatus
  04996	f3 a5		 rep movsd
  04998	66 a5		 movsw

; 6030 : 					}
; 6031 : 
; 6032 : 					if (!BootEncStatus.SetupInProgress)

  0499a	83 3d 3e 00 00
	00 00		 cmp	 DWORD PTR ?BootEncStatus@@3UBootEncryptionStatus@@A+62, 0

; 6033 : 					{
; 6034 : 						EndMainDlg (MainDlg);
; 6035 : 						return 1;

  049a1	0f 84 a3 bf ff
	ff		 je	 $LN1115@MainDialog

; 6036 : 					}
; 6037 : 					else
; 6038 : 					{
; 6039 : 						Error ("FAILED_TO_INTERRUPT_SYSTEM_ENCRYPTION");

  049a7	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@OIGJDCBH@FAILED_TO_INTERRUPT_SYSTEM_ENCRY@
  049ac	e8 00 00 00 00	 call	 _Error
  049b1	83 c4 04	 add	 esp, 4
  049b4	b8 01 00 00 00	 mov	 eax, 1
  049b9	e9 ea b6 ff ff	 jmp	 $LN517@MainDialog
__catch$_MainDialogProc@16$19:

; 6040 : 						return 1;	// Disallow close
; 6041 : 					}
; 6042 : 				}
; 6043 : 				catch (Exception &e)
; 6044 : 				{
; 6045 : 					e.Show (hwndDlg);

  049be	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR _e$134341[ebp]
  049c4	8b 11		 mov	 edx, DWORD PTR [ecx]
  049c6	8b 45 e4	 mov	 eax, DWORD PTR _hwndDlg$GSCopy$[ebp]
  049c9	8b 12		 mov	 edx, DWORD PTR [edx]
  049cb	50		 push	 eax
  049cc	ff d2		 call	 edx

; 6046 : 				}

  049ce	b8 00 00 00 00	 mov	 eax, $LN487@MainDialog
  049d3	c3		 ret	 0
$LN418@MainDialog:

; 6047 : 				return 1;	// Disallow close
; 6048 : 			}
; 6049 : 			else
; 6050 : 				return 1;	// Disallow close
; 6051 : 		}
; 6052 : 		else if (bConfirmQuitSysEncPretest)

  049d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bConfirmQuitSysEncPretest@@3HC ; bConfirmQuitSysEncPretest
  049d9	85 c0		 test	 eax, eax
  049db	74 2c		 je	 SHORT $LN408@MainDialog

; 6053 : 		{
; 6054 : 			if (AskWarnNoYes (bHiddenOS ? "CONFIRM_CANCEL_HIDDEN_OS_CREATION" : "CONFIRM_CANCEL_SYS_ENC_PRETEST") == IDNO)

  049dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bHiddenOS@@3HC ; bHiddenOS
  049e3	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CC@KDAJHHMG@CONFIRM_CANCEL_HIDDEN_OS_CREATIO@
  049e8	85 c9		 test	 ecx, ecx
  049ea	75 05		 jne	 SHORT $LN528@MainDialog
  049ec	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BP@IFOLEKLB@CONFIRM_CANCEL_SYS_ENC_PRETEST?$AA@
$LN528@MainDialog:
  049f1	50		 push	 eax
  049f2	e8 00 00 00 00	 call	 _AskWarnNoYes
  049f7	83 c4 04	 add	 esp, 4
  049fa	83 f8 07	 cmp	 eax, 7
  049fd	75 2a		 jne	 SHORT $LN404@MainDialog

; 5804 : 			}
; 5805 : 			return 1;

  049ff	b8 01 00 00 00	 mov	 eax, 1
  04a04	e9 9f b6 ff ff	 jmp	 $LN517@MainDialog
$LN408@MainDialog:

; 6055 : 				return 1;	// Disallow close
; 6056 : 		}
; 6057 : 		else if (bConfirmQuit)

  04a09	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bConfirmQuit@@3HC ; bConfirmQuit
  04a0f	85 d2		 test	 edx, edx
  04a11	74 16		 je	 SHORT $LN404@MainDialog

; 6058 : 		{
; 6059 : 			if (AskWarnNoYes ("CONFIRM_EXIT_UNIVERSAL") == IDNO)

  04a13	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KAHGPAJO@CONFIRM_EXIT_UNIVERSAL?$AA@
  04a18	e8 00 00 00 00	 call	 _AskWarnNoYes
  04a1d	83 c4 04	 add	 esp, 4
  04a20	83 f8 07	 cmp	 eax, 7

; 6060 : 				return 1;	// Disallow close

  04a23	0f 84 3f ba ff
	ff		 je	 $LN487@MainDialog
$LN404@MainDialog:

; 6061 : 		}
; 6062 : 
; 6063 : 		if (hiddenVolHostDriveNo > -1)

  04a29	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  04a2e	83 f8 ff	 cmp	 eax, -1
  04a31	7e 18		 jle	 SHORT $LN403@MainDialog

; 6064 : 		{
; 6065 : 			CloseVolumeExplorerWindows (hwndDlg, hiddenVolHostDriveNo);

  04a33	50		 push	 eax
  04a34	53		 push	 ebx
  04a35	e8 00 00 00 00	 call	 _CloseVolumeExplorerWindows

; 6066 : 			UnmountVolume (hwndDlg, hiddenVolHostDriveNo, TRUE);

  04a3a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenVolHostDriveNo@@3HA ; hiddenVolHostDriveNo
  04a3f	6a 01		 push	 1
  04a41	50		 push	 eax
  04a42	53		 push	 ebx
  04a43	e8 00 00 00 00	 call	 _UnmountVolume
  04a48	83 c4 14	 add	 esp, 20			; 00000014H
$LN403@MainDialog:

; 6067 : 		}
; 6068 : 
; 6069 : 		EndMainDlg (hwndDlg);

  04a4b	8b fb		 mov	 edi, ebx
  04a4d	e8 00 00 00 00	 call	 _EndMainDlg
  04a52	b8 01 00 00 00	 mov	 eax, 1
  04a57	e9 4c b6 ff ff	 jmp	 $LN517@MainDialog
$LN422@MainDialog:

; 5997 : 		{
; 5998 : 			// Format (non-in-place encryption) in progress
; 5999 : 			if (AskNoYes ("FORMAT_ABORT") == IDYES)

  04a5c	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LNDFLMFM@FORMAT_ABORT?$AA@
  04a61	e8 00 00 00 00	 call	 _AskNoYes
  04a66	83 c4 04	 add	 esp, 4
  04a69	83 f8 06	 cmp	 eax, 6
  04a6c	0f 85 f6 b9 ff
	ff		 jne	 $LN487@MainDialog

; 6000 : 			{
; 6001 : 				bVolTransformThreadCancel = TRUE;
; 6002 : 
; 6003 : 				EndMainDlg (hwndDlg);

  04a72	8b fb		 mov	 edi, ebx
  04a74	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bVolTransformThreadCancel, 1
  04a7e	e8 00 00 00 00	 call	 _EndMainDlg
  04a83	b8 01 00 00 00	 mov	 eax, 1
  04a88	e9 1b b6 ff ff	 jmp	 $LN517@MainDialog
$LN1239@MainDialog:
  04a8d	8d 49 00	 npad	 3
$LN1257@MainDialog:

; 7826 : }

  04a90	00 00 00 00	 DD	 $LN502@MainDialog
  04a94	00 00 00 00	 DD	 $LN484@MainDialog
  04a98	00 00 00 00	 DD	 $LN462@MainDialog
  04a9c	00 00 00 00	 DD	 $LN448@MainDialog
  04aa0	00 00 00 00	 DD	 $LN453@MainDialog
  04aa4	00 00 00 00	 DD	 $LN459@MainDialog
$LN1258@MainDialog:
  04aa8	00 00 00 00	 DD	 $LN92@MainDialog
  04aac	00 00 00 00	 DD	 $LN1249@MainDialog
  04ab0	00 00 00 00	 DD	 $LN94@MainDialog
  04ab4	00 00 00 00	 DD	 $LN209@MainDialog
$LN1163@MainDialog:
  04ab8	00		 DB	 0
  04ab9	03		 DB	 3
  04aba	03		 DB	 3
  04abb	01		 DB	 1
  04abc	03		 DB	 3
  04abd	03		 DB	 3
  04abe	03		 DB	 3
  04abf	03		 DB	 3
  04ac0	03		 DB	 3
  04ac1	03		 DB	 3
  04ac2	03		 DB	 3
  04ac3	03		 DB	 3
  04ac4	03		 DB	 3
  04ac5	03		 DB	 3
  04ac6	03		 DB	 3
  04ac7	03		 DB	 3
  04ac8	03		 DB	 3
  04ac9	03		 DB	 3
  04aca	03		 DB	 3
  04acb	03		 DB	 3
  04acc	03		 DB	 3
  04acd	03		 DB	 3
  04ace	02		 DB	 2
  04acf	03		 DB	 3
  04ad0	01		 DB	 1
  04ad1	8d 49 00	 npad	 3
$LN1259@MainDialog:
  04ad4	00 00 00 00	 DD	 $LN226@MainDialog
  04ad8	00 00 00 00	 DD	 $LN1249@MainDialog
  04adc	00 00 00 00	 DD	 $LN228@MainDialog
  04ae0	00 00 00 00	 DD	 $LN209@MainDialog
$LN1165@MainDialog:
  04ae4	00		 DB	 0
  04ae5	03		 DB	 3
  04ae6	03		 DB	 3
  04ae7	01		 DB	 1
  04ae8	03		 DB	 3
  04ae9	03		 DB	 3
  04aea	03		 DB	 3
  04aeb	03		 DB	 3
  04aec	03		 DB	 3
  04aed	03		 DB	 3
  04aee	03		 DB	 3
  04aef	03		 DB	 3
  04af0	03		 DB	 3
  04af1	03		 DB	 3
  04af2	03		 DB	 3
  04af3	03		 DB	 3
  04af4	03		 DB	 3
  04af5	03		 DB	 3
  04af6	03		 DB	 3
  04af7	03		 DB	 3
  04af8	03		 DB	 3
  04af9	03		 DB	 3
  04afa	02		 DB	 2
  04afb	03		 DB	 3
  04afc	01		 DB	 1
  04afd	8d 49 00	 npad	 3
$LN1260@MainDialog:
  04b00	00 00 00 00	 DD	 $LN436@MainDialog
  04b04	00 00 00 00	 DD	 $LN429@MainDialog
  04b08	00 00 00 00	 DD	 $LN437@MainDialog
  04b0c	00 00 00 00	 DD	 $LN515@MainDialog
  04b10	00 00 00 00	 DD	 $LN434@MainDialog
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_MainDialogProc@16$45:
  00000	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T169244[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_MainDialogProc@16$46:
  0000b	8d 8d 98 fc ff
	ff		 lea	 ecx, DWORD PTR $T169245[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$49:
  00016	8d 8d 04 fe ff
	ff		 lea	 ecx, DWORD PTR $T169269[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$50:
  00021	8d 8d b0 fd ff
	ff		 lea	 ecx, DWORD PTR $T169270[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$53:
  0002c	8d 8d ec fc ff
	ff		 lea	 ecx, DWORD PTR $T169275[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$54:
  00037	8d 8d 24 fd ff
	ff		 lea	 ecx, DWORD PTR $T169276[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$57:
  00042	8d 8d 9c fb ff
	ff		 lea	 ecx, DWORD PTR $T169283[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$58:
  0004d	8d 8d d4 fb ff
	ff		 lea	 ecx, DWORD PTR $T169284[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$59:
  00058	8d 8d 0c fc ff
	ff		 lea	 ecx, DWORD PTR $T169285[ebp]
  0005e	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$60:
  00063	8d 8d 44 fc ff
	ff		 lea	 ecx, DWORD PTR $T169286[ebp]
  00069	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$61:
  0006e	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR $T169287[ebp]
  00074	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$66:
  00079	8d 8d 94 fd ff
	ff		 lea	 ecx, DWORD PTR $T169299[ebp]
  0007f	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$67:
  00084	8d 8d 60 fc ff
	ff		 lea	 ecx, DWORD PTR $T169300[ebp]
  0008a	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$68:
  0008f	8d 8d e8 fd ff
	ff		 lea	 ecx, DWORD PTR $T169301[ebp]
  00095	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$69:
  0009a	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR $T169302[ebp]
  000a0	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$70:
  000a5	8d 8d 28 fc ff
	ff		 lea	 ecx, DWORD PTR $T169303[ebp]
  000ab	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$71:
  000b0	8d 8d f4 fa ff
	ff		 lea	 ecx, DWORD PTR $T169304[ebp]
  000b6	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$72:
  000bb	8d 8d 2c fb ff
	ff		 lea	 ecx, DWORD PTR $T169305[ebp]
  000c1	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$75:
  000c6	8d 8d 38 fe ff
	ff		 lea	 ecx, DWORD PTR $T169309[ebp]
  000cc	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_MainDialogProc@16$76:
  000d1	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR $T169311[ebp]
  000d7	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_MainDialogProc@16$78:
  000dc	8d 8d d0 fc ff
	ff		 lea	 ecx, DWORD PTR $T169319[ebp]
  000e2	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$79:
  000e7	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR $T169320[ebp]
  000ed	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$80:
  000f2	8d 8d 08 fd ff
	ff		 lea	 ecx, DWORD PTR $T169321[ebp]
  000f8	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$81:
  000fd	8d 8d 80 fb ff
	ff		 lea	 ecx, DWORD PTR $T169322[ebp]
  00103	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$82:
  00108	8d 8d 40 fd ff
	ff		 lea	 ecx, DWORD PTR $T169323[ebp]
  0010e	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_MainDialogProc@16$74:
  00113	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T169307[ebp]
  00119	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_MainDialogProc@16$63:
  0011e	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR $T169291[ebp]
  00124	e9 00 00 00 00	 jmp	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
__unwindfunclet$_MainDialogProc@16$64:
  00129	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _$S2$134632[ebp]
  0012f	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@CipherShed@@UAE@XZ
__ehhandler$_MainDialogProc@16:
  00134	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00138	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0013b	8b 8a b8 f5 ff
	ff		 mov	 ecx, DWORD PTR [edx-2632]
  00141	33 c8		 xor	 ecx, eax
  00143	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00148	8b 8a 68 cc 00
	00		 mov	 ecx, DWORD PTR [edx+52328]
  0014e	33 c8		 xor	 ecx, eax
  00150	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00155	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_MainDialogProc@16
  0015a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_MainDialogProc@16 ENDP
PUBLIC	??_C@_0BG@DKEEGIEL@ERR_SELF_TESTS_FAILED?$AA@	; `string'
PUBLIC	??_C@_08ELEAABKI@NODRIVER?$AA@			; `string'
PUBLIC	??_C@_09PLHAEEAO@INIT_RAND?$AA@			; `string'
PUBLIC	??_C@_0N@PDPHKHCO@INIT_SYS_ENC?$AA@		; `string'
PUBLIC	_WinMain@16
EXTRN	_AutoTestAlgorithms:PROC
EXTRN	_DriverAttach:PROC
EXTRN	_RegisterRedTick:PROC
EXTRN	_Randinit:PROC
EXTRN	_FormatWriteBufferSize:DWORD
EXTRN	_InitApp:PROC
EXTRN	__imp__InitCommonControls@0:PROC
EXTRN	??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z:PROC ; CipherShed::BootEncryption::BootEncryption
EXTRN	_atexit:PROC
;	COMDAT ??_C@_0BG@DKEEGIEL@ERR_SELF_TESTS_FAILED?$AA@
CONST	SEGMENT
??_C@_0BG@DKEEGIEL@ERR_SELF_TESTS_FAILED?$AA@ DB 'ERR_SELF_TESTS_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08ELEAABKI@NODRIVER?$AA@
CONST	SEGMENT
??_C@_08ELEAABKI@NODRIVER?$AA@ DB 'NODRIVER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PLHAEEAO@INIT_RAND?$AA@
CONST	SEGMENT
??_C@_09PLHAEEAO@INIT_RAND?$AA@ DB 'INIT_RAND', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PDPHKHCO@INIT_SYS_ENC?$AA@
CONST	SEGMENT
??_C@_0N@PDPHKHCO@INIT_SYS_ENC?$AA@ DB 'INIT_SYS_ENC', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_WinMain@16$3 DD 08H
	DD	FLAT:??_R0?AUException@CipherShed@@@8
	DD	0ffffffe8H
	DD	FLAT:__catch$_WinMain@16$0
__tryblocktable$_WinMain@16 DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$_WinMain@16$3
__unwindtable$_WinMain@16 DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$_WinMain@16$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$_WinMain@16 DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$_WinMain@16
	DD	01H
	DD	FLAT:__tryblocktable$_WinMain@16
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT _WinMain@16
_TEXT	SEGMENT
_e$135344 = -24						; size = 4
$T170270 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_hInstance$ = 8						; size = 4
_hPrevInstance$ = 12					; size = 4
_lpszCommandLine$ = 16					; size = 4
_nCmdShow$ = 20						; size = 4
_WinMain@16 PROC					; COMDAT

; 8973 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_WinMain@16
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 8974 : 	int status;
; 8975 : 	atexit (localcleanup);

  0002b	68 00 00 00 00	 push	 OFFSET _localcleanup
  00030	e8 00 00 00 00	 call	 _atexit

; 8976 : 
; 8977 : 	VirtualLock (&volumePassword, sizeof(volumePassword));

  00035	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__VirtualLock@8
  0003b	83 c4 04	 add	 esp, 4
  0003e	6a 48		 push	 72			; 00000048H
  00040	68 00 00 00 00	 push	 OFFSET ?volumePassword@@3UPassword@@A ; volumePassword
  00045	ff d6		 call	 esi

; 8978 : 	VirtualLock (szTmpPas, sizeof(szTmpPas));

  00047	6a 41		 push	 65			; 00000041H
  00049	68 00 00 00 00	 push	 OFFSET ?szTmpPas@@3PADA	; szTmpPas
  0004e	ff d6		 call	 esi

; 8979 : 	VirtualLock (szVerify, sizeof(szVerify));

  00050	68 82 00 00 00	 push	 130			; 00000082H
  00055	68 00 00 00 00	 push	 OFFSET ?szVerify@@3PA_WA ; szVerify
  0005a	ff d6		 call	 esi

; 8980 : 	VirtualLock (szRawPassword, sizeof(szRawPassword));

  0005c	68 82 00 00 00	 push	 130			; 00000082H
  00061	68 00 00 00 00	 push	 OFFSET ?szRawPassword@@3PA_WA ; szRawPassword
  00066	ff d6		 call	 esi

; 8981 : 
; 8982 : 	VirtualLock (MasterKeyGUIView, sizeof(MasterKeyGUIView));

  00068	6a 40		 push	 64			; 00000040H
  0006a	68 00 00 00 00	 push	 OFFSET _MasterKeyGUIView
  0006f	ff d6		 call	 esi

; 8983 : 	VirtualLock (HeaderKeyGUIView, sizeof(HeaderKeyGUIView));

  00071	6a 40		 push	 64			; 00000040H
  00073	68 00 00 00 00	 push	 OFFSET _HeaderKeyGUIView
  00078	ff d6		 call	 esi

; 8984 : 
; 8985 : 	VirtualLock (randPool, sizeof(randPool));

  0007a	6a 78		 push	 120			; 00000078H
  0007c	68 00 00 00 00	 push	 OFFSET ?randPool@@3PAEA	; randPool
  00081	ff d6		 call	 esi

; 8986 : 	VirtualLock (lastRandPool, sizeof(lastRandPool));

  00083	6a 78		 push	 120			; 00000078H
  00085	68 00 00 00 00	 push	 OFFSET ?lastRandPool@@3PAEA ; lastRandPool
  0008a	ff d6		 call	 esi

; 8987 : 	VirtualLock (outRandPoolDispBuffer, sizeof(outRandPoolDispBuffer));

  0008c	68 72 01 00 00	 push	 370			; 00000172H
  00091	68 00 00 00 00	 push	 OFFSET ?outRandPoolDispBuffer@@3PAEA ; outRandPoolDispBuffer
  00096	ff d6		 call	 esi

; 8988 : 
; 8989 : 	VirtualLock (&szFileName, sizeof(szFileName));

  00098	68 05 01 00 00	 push	 261			; 00000105H
  0009d	68 00 00 00 00	 push	 OFFSET ?szFileName@@3PADA ; szFileName
  000a2	ff d6		 call	 esi

; 8990 : 	VirtualLock (&szDiskFile, sizeof(szDiskFile));

  000a4	68 05 01 00 00	 push	 261			; 00000105H
  000a9	68 00 00 00 00	 push	 OFFSET ?szDiskFile@@3PADA ; szDiskFile
  000ae	ff d6		 call	 esi

; 8991 : 
; 8992 : 	try
; 8993 : 	{
; 8994 : 		BootEncObj = new BootEncryption (NULL);

  000b0	68 18 06 00 00	 push	 1560			; 00000618H
  000b5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000bc	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c1	8b c8		 mov	 ecx, eax
  000c3	83 c4 04	 add	 esp, 4
  000c6	89 4d ec	 mov	 DWORD PTR $T170270[ebp], ecx
  000c9	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000cd	85 c9		 test	 ecx, ecx
  000cf	74 09		 je	 SHORT $LN11@WinMain
  000d1	6a 00		 push	 0
  000d3	e8 00 00 00 00	 call	 ??0BootEncryption@CipherShed@@QAE@PAUHWND__@@@Z ; CipherShed::BootEncryption::BootEncryption
  000d8	eb 02		 jmp	 SHORT $LN12@WinMain
$LN11@WinMain:
  000da	33 c0		 xor	 eax, eax
$LN12@WinMain:
  000dc	a3 00 00 00 00	 mov	 DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A, eax ; BootEncObj
$LN17@WinMain:

; 9000 : 
; 9001 : 	if (BootEncObj == NULL)

  000e1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BootEncObj@@3PAVBootEncryption@CipherShed@@A, 0 ; BootEncObj
  000e8	75 0d		 jne	 SHORT $LN7@WinMain

; 9002 : 		AbortProcess ("INIT_SYS_ENC");

  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PDPHKHCO@INIT_SYS_ENC?$AA@
  000ef	e8 00 00 00 00	 call	 _AbortProcess
  000f4	83 c4 04	 add	 esp, 4
$LN7@WinMain:

; 9003 : 
; 9004 : 	InitCommonControls ();

  000f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitCommonControls@0

; 9005 : 	InitApp (hInstance, lpszCommandLine);

  000fd	8b 7d 10	 mov	 edi, DWORD PTR _lpszCommandLine$[ebp]
  00100	8b 75 08	 mov	 esi, DWORD PTR _hInstance$[ebp]
  00103	57		 push	 edi
  00104	56		 push	 esi
  00105	e8 00 00 00 00	 call	 _InitApp

; 9006 : 
; 9007 : 	// Write block size greater than 64 KB causes a performance drop when writing to files on XP/Vista
; 9008 : 	if (!IsOSAtLeast (WIN_7))

  0010a	6a 0d		 push	 13			; 0000000dH
  0010c	e8 00 00 00 00	 call	 _IsOSAtLeast
  00111	83 c4 0c	 add	 esp, 12			; 0000000cH
  00114	85 c0		 test	 eax, eax
  00116	75 0a		 jne	 SHORT $LN6@WinMain

; 9009 : 		FormatWriteBufferSize = 64 * 1024;

  00118	c7 05 00 00 00
	00 00 00 01 00	 mov	 DWORD PTR _FormatWriteBufferSize, 65536 ; 00010000H
$LN6@WinMain:

; 9010 : 
; 9011 : #if TC_MAX_VOLUME_SECTOR_SIZE > 64 * 1024
; 9012 : #error TC_MAX_VOLUME_SECTOR_SIZE > 64 * 1024
; 9013 : #endif
; 9014 : 
; 9015 : 	nPbar = IDC_PROGRESS_BAR;

  00122	c7 05 00 00 00
	00 f6 03 00 00	 mov	 DWORD PTR _nPbar, 1014	; 000003f6H

; 9016 : 
; 9017 : 	if (Randinit ())

  0012c	e8 00 00 00 00	 call	 _Randinit
  00131	85 c0		 test	 eax, eax
  00133	74 0d		 je	 SHORT $LN5@WinMain

; 9018 : 		AbortProcess ("INIT_RAND");

  00135	68 00 00 00 00	 push	 OFFSET ??_C@_09PLHAEEAO@INIT_RAND?$AA@
  0013a	e8 00 00 00 00	 call	 _AbortProcess
  0013f	83 c4 04	 add	 esp, 4
$LN5@WinMain:

; 9019 : 
; 9020 : 	RegisterRedTick(hInstance);

  00142	56		 push	 esi
  00143	e8 00 00 00 00	 call	 _RegisterRedTick

; 9021 : 
; 9022 : 	/* Allocate, dup, then store away the application title */
; 9023 : 	lpszTitle = GetString ("IDD_VOL_CREATION_WIZARD_DLG");

  00148	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@IHMEHMBJ@IDD_VOL_CREATION_WIZARD_DLG?$AA@
  0014d	e8 00 00 00 00	 call	 _GetString
  00152	83 c4 08	 add	 esp, 8
  00155	a3 00 00 00 00	 mov	 DWORD PTR _lpszTitle, eax

; 9024 : 
; 9025 : 	status = DriverAttach ();

  0015a	e8 00 00 00 00	 call	 _DriverAttach

; 9026 : 	if (status != 0)

  0015f	85 c0		 test	 eax, eax
  00161	74 3a		 je	 SHORT $LN4@WinMain

; 9027 : 	{
; 9028 : 		if (status == ERR_OS_ERROR)

  00163	83 f8 01	 cmp	 eax, 1
  00166	75 1d		 jne	 SHORT $LN3@WinMain

; 9029 : 			handleWin32Error (NULL);

  00168	6a 00		 push	 0
  0016a	e8 00 00 00 00	 call	 _handleWin32Error
  0016f	83 c4 04	 add	 esp, 4

; 9030 : 		else

  00172	eb 1c		 jmp	 SHORT $LN2@WinMain
__catch$_WinMain@16$0:

; 8995 : 	}
; 8996 : 	catch (Exception &e)
; 8997 : 	{
; 8998 : 		e.Show (NULL);

  00174	8b 4d e8	 mov	 ecx, DWORD PTR _e$135344[ebp]
  00177	8b 01		 mov	 eax, DWORD PTR [ecx]
  00179	8b 10		 mov	 edx, DWORD PTR [eax]
  0017b	6a 00		 push	 0
  0017d	ff d2		 call	 edx

; 8999 : 	}

  0017f	b8 00 00 00 00	 mov	 eax, $LN17@WinMain
  00184	c3		 ret	 0
$LN3@WinMain:

; 9031 : 			handleError (NULL, status);

  00185	50		 push	 eax
  00186	6a 00		 push	 0
  00188	e8 00 00 00 00	 call	 _handleError
  0018d	83 c4 08	 add	 esp, 8
$LN2@WinMain:

; 9032 : 
; 9033 : 		AbortProcess ("NODRIVER");

  00190	68 00 00 00 00	 push	 OFFSET ??_C@_08ELEAABKI@NODRIVER?$AA@
  00195	e8 00 00 00 00	 call	 _AbortProcess
  0019a	83 c4 04	 add	 esp, 4
$LN4@WinMain:

; 9034 : 	}
; 9035 : 
; 9036 : 	if (!AutoTestAlgorithms())

  0019d	e8 00 00 00 00	 call	 _AutoTestAlgorithms
  001a2	85 c0		 test	 eax, eax
  001a4	75 0d		 jne	 SHORT $LN1@WinMain

; 9037 : 		AbortProcess ("ERR_SELF_TESTS_FAILED");

  001a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DKEEGIEL@ERR_SELF_TESTS_FAILED?$AA@
  001ab	e8 00 00 00 00	 call	 _AbortProcess
  001b0	83 c4 04	 add	 esp, 4
$LN1@WinMain:

; 9038 : 
; 9039 : 	/* Create the main dialog box */
; 9040 : 	DialogBoxParamW (hInstance, MAKEINTRESOURCEW (IDD_VOL_CREATION_WIZARD_DLG), NULL, (DLGPROC) MainDialogProc, 
; 9041 : 		(LPARAM)lpszCommandLine);

  001b3	57		 push	 edi
  001b4	68 00 00 00 00	 push	 OFFSET _MainDialogProc@16
  001b9	6a 00		 push	 0
  001bb	6a 65		 push	 101			; 00000065H
  001bd	56		 push	 esi
  001be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 9042 : 
; 9043 : 	return 0;

  001c4	33 c0		 xor	 eax, eax

; 9044 : }

  001c6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001c9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d0	59		 pop	 ecx
  001d1	5f		 pop	 edi
  001d2	5e		 pop	 esi
  001d3	5b		 pop	 ebx
  001d4	8b e5		 mov	 esp, ebp
  001d6	5d		 pop	 ebp
  001d7	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_WinMain@16$2:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T170270[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$_WinMain@16:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_WinMain@16
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_WinMain@16 ENDP
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??__EDeferredNonSysInPlaceEncDevices@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__EDeferredNonSysInPlaceEncDevices@@YAXXZ$0
__ehfuncinfo$??__EDeferredNonSysInPlaceEncDevices@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__EDeferredNonSysInPlaceEncDevices@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\public\desktop\projects\ciphershed\src\format\tcformat.c
xdata$x	ENDS
;	COMDAT ??__EDeferredNonSysInPlaceEncDevices@@YAXXZ
text$yc	SEGMENT
__$EHRec$ = -12						; size = 12
??__EDeferredNonSysInPlaceEncDevices@@YAXXZ PROC	; `dynamic initializer for 'DeferredNonSysInPlaceEncDevices'', COMDAT

; 256  : vector <HostDevice> DeferredNonSysInPlaceEncDevices;

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??__EDeferredNonSysInPlaceEncDevices@@YAXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00013	33 c4		 xor	 eax, esp
  00015	50		 push	 eax
  00016	8d 44 24 04	 lea	 eax, DWORD PTR __$EHRec$[esp+16]
  0001a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00020	6a 04		 push	 4
  00022	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00027	33 c9		 xor	 ecx, ecx
  00029	83 c4 04	 add	 esp, 4
  0002c	3b c1		 cmp	 eax, ecx
  0002e	74 08		 je	 SHORT $LN15@dynamic
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A ; DeferredNonSysInPlaceEncDevices
  00036	eb 02		 jmp	 SHORT $LN16@dynamic
$LN15@dynamic:
  00038	33 c0		 xor	 eax, eax
$LN16@dynamic:
  0003a	a3 00 00 00 00	 mov	 DWORD PTR ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A, eax
  0003f	68 00 00 00 00	 push	 OFFSET ??__FDeferredNonSysInPlaceEncDevices@@YAXXZ ; `dynamic atexit destructor for 'DeferredNonSysInPlaceEncDevices''
  00044	89 0d 0c 00 00
	00		 mov	 DWORD PTR ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A+12, ecx
  0004a	89 0d 10 00 00
	00		 mov	 DWORD PTR ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A+16, ecx
  00050	89 0d 14 00 00
	00		 mov	 DWORD PTR ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A+20, ecx
  00056	e8 00 00 00 00	 call	 _atexit
  0005b	83 c4 04	 add	 esp, 4
  0005e	8b 4c 24 04	 mov	 ecx, DWORD PTR __$EHRec$[esp+16]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006d	c3		 ret	 0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__EDeferredNonSysInPlaceEncDevices@@YAXXZ$0:
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A ; DeferredNonSysInPlaceEncDevices
  00005	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
__ehhandler$??__EDeferredNonSysInPlaceEncDevices@@YAXXZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 02		 lea	 eax, DWORD PTR [edx]
  00010	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??__EDeferredNonSysInPlaceEncDevices@@YAXXZ
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??__EDeferredNonSysInPlaceEncDevices@@YAXXZ ENDP	; `dynamic initializer for 'DeferredNonSysInPlaceEncDevices''
; Function compile flags: /Ogtpy
;	COMDAT ??__FDeferredNonSysInPlaceEncDevices@@YAXXZ
text$yd	SEGMENT
??__FDeferredNonSysInPlaceEncDevices@@YAXXZ PROC	; `dynamic atexit destructor for 'DeferredNonSysInPlaceEncDevices'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A ; DeferredNonSysInPlaceEncDevices
  00005	e9 00 00 00 00	 jmp	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
??__FDeferredNonSysInPlaceEncDevices@@YAXXZ ENDP	; `dynamic atexit destructor for 'DeferredNonSysInPlaceEncDevices''
text$yd	ENDS
PUBLIC	?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A ; DeferredNonSysInPlaceEncDevices
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
_BSS	SEGMENT
?DeferredNonSysInPlaceEncDevices@@3V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A DB 018H DUP (?) ; DeferredNonSysInPlaceEncDevices
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
_BSS	ENDS
CRT$XCU	SEGMENT
_DeferredNonSysInPlaceEncDevices$initializer$ DD FLAT:??__EDeferredNonSysInPlaceEncDevices@@YAXXZ
CRT$XCU	ENDS
END
