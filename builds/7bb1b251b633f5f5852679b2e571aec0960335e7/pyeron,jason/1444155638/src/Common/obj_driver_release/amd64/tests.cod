; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@ ; `string'
PUBLIC	??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@ ; `string'
PUBLIC	??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@ ; `string'
PUBLIC	??_C@_0BF@PFENIDMG@?$IF?qdp?$DOa?$KG11?$LO?$HOE?$JF?$IO?$AH?$JE?$BC9?$AE?y?$AA@ ; `string'
PUBLIC	??_C@_0BF@HFFLEHPC@?x6b?L?$IN3?$JM?$CC?$HO?$GA?$AP?MclW?RW?$BL?$BM4?$AA@ ; `string'
PUBLIC	??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@ ; `string'
PUBLIC	??_C@_0P@ONGHGJEC@message?5digest?$AA@		; `string'
PUBLIC	??_C@_0BF@JFBGCNOI@?$AB?$CDEg?$IJ?$KL?M?o?$PO?$NM?$LK?$JIvT2?$BA?$AA?$BB?$CC3?$AA@ ; `string'
PUBLIC	??_C@_0BF@EKEAJOKM@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$AA@ ; `string'
PUBLIC	??_C@_0BF@OJOCDNBL@?$BC?$FNsB?$LJ?$KM?$BB?M?$JB?$KD?$JK?t?$IK?$KB?$HLOc?qu?S?$AA@ ; `string'
PUBLIC	??_C@_0BF@NPPNDLAN@?o?$PM?$NPj?e?k?1?$KC?Rt?$BG?U?q?$IE?$NP?$JM?$CF?$JK?$HMy?$AA@ ; `string'
PUBLIC	??_C@_0BF@BDDOKADE@?$LG?$BH1?$IGU?$AFrd?b?$IL?$MA?$LG?$PL7?$IM?$IO?qF?$LO?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BF@KOBLBFLL@?$LM?t?$BO?$KL?$IL?$LC?X?$AC?s?P?2?$KP?$HM?$LA?$JC?l?x?Q?$KD?$KK?$AA@ ; `string'
PUBLIC	??_C@_09OCHOFPMP@Sample?5?$CD3?$AA@		; `string'
PUBLIC	??_C@_0GF@PEHFLIKL@PQRSTUVWXYZ?$FL?2?$FN?$FO_?$GAabcdefghijklmno@ ; `string'
PUBLIC	??_C@_0EB@IAGJFOJI@?c?$HLjw?$FN?H?$HN?$LK?$KE?$NP?$KJ?yn?$FO?$DP?$PN?$NO?$LNq?x?$IGr?$IJ?$IG?$FN?u?$KD?9?5?M?ID@ ; `string'
PUBLIC	??_C@_0EB@HIMJOCNA@?$IA?$LCBc?G?A?$KD?k?$LH?$BE?$JD?A?$NN?$HL?h?$LE?$JLF?Q?t?$BLJ?n?A?$BC?$BL?$AB7?$ID?x?sR@ ; `string'
PUBLIC	??_C@_0EB@LPCMCIMB@?$LA?$LKFV7E?$IMi?$JA?e?$KI?E?v?$BNJ?w?ev?Y?$HP?yK?$IH?9?go?$IAP6?$BO?c?$NL@ ; `string'
PUBLIC	??_C@_0EB@KHIOOKPP@?zs?$LA?$AI?$JNV?$KC?$IE?o?$LA?pul?$IJ?$AL?i?$LB?$LF?$NL?$NN?$IO?h?$BK6U?x?$DO3?$LC?8?$JN9@ ; `string'
PUBLIC	??_C@_0EB@OCCGLAFJ@?$BGKz?$HL?$PM?x?$BJ?b?c?$JF?$PL?g?$DLV?$OA?$KD?$IH?$LNd?$CC?4?$ID?$BP?V?$BA?8?$AM?W?j?$CF?$AFT@ ; `string'
PUBLIC	??_C@_0EB@NPCMCGAL@?$IH?$KK?$HM?$NO?$KF?oa?$JNO?p?$LE$?$BK?$BNl?$LA?$CDy?t?b?NN?Bxz?P?$LD?$AFE?a?$HM?$NO@ ; `string'
PUBLIC	??_C@_0JJ@PIHOAKB@This?5is?5a?5test?5using?5a?5larger?5th@ ; `string'
PUBLIC	??_C@_0DH@HELOGHDO@Test?5Using?5Larger?5Than?5Block?9Siz@ ; `string'
PUBLIC	??_C@_0DD@JCGDPDJ@?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M@ ; `string'
PUBLIC	??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@ ; `string'
PUBLIC	??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@ ; `string'
PUBLIC	??_C@_08BPPJKMC@Hi?5There?$AA@			; `string'
PUBLIC	??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@ ; `string'
PUBLIC	??_C@_0BK@LNLLCJNI@?$AB?$AC?$AD?$AE?$AF?$AG?$AH?$AI?7?6?$AL?$AM?$AN?$AO?$AP?$BA?$BB?$BC?$BD?$BE?$BF?$BG?$BH?$BI?$BJ?$AA@ ; `string'
PUBLIC	??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@ ; `string'
PUBLIC	??_C@_04HDLGGHEL@Jefe?$AA@			; `string'
PUBLIC	??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@ ; `string'
PUBLIC	XTS_vectors
PUBLIC	??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	bf_ecb_vectors
PUBLIC	tripledes_vectors
PUBLIC	cast_ecb_vectors
PUBLIC	aes_ecb_vectors
PUBLIC	serpent_vectors
PUBLIC	twofish_vectors
PUBLIC	hmac_sha512_test_keys
PUBLIC	hmac_sha512_test_data
PUBLIC	hmac_sha512_test_vectors
PUBLIC	hmac_sha1_test_keys
PUBLIC	hmac_sha1_test_data
PUBLIC	hmac_sha1_test_vectors
PUBLIC	hmac_ripemd160_test_keys
PUBLIC	hmac_ripemd160_test_data
PUBLIC	hmac_ripemd160_test_vectors
PUBLIC	hmac_whirlpool_test_key
PUBLIC	hmac_whirlpool_test_data
PUBLIC	hmac_whirlpool_test_vectors
PUBLIC	lrw_vectors
PUBLIC	??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_08NLHBPEGP@password?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04KFFKJODL@?$BDd?$KO?x?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0JB@EEHAMOLN@?$BDd?$KO?x?$AN?uWl0?UqL?$KHu?$DP?$PN?$AA?e?$CF?$IL9?GD?$HP?N?$CD?$DN?$AIu?$OA?1H@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0DB@MAMEFANK@?2u?N?p?$BK?$JG?$AN?wL?$LG?$LE?$JL?$JO8?f?$LF?$DL?$BB?$IA?c?1?w?$OA?$NN?$KK?J?$IP?$IB?8?v?$JPO@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04BHFCCAHB@?2u?N?p?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04PODIBCAH@z?$DN?$HM?$AD?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0DB@KJBGHKFA@z?$DN?$HM?$AD?g?$CGk?x?$DNx?$PL?$CJ?Rd?$BPV?j?p?e?u?L?D?31?$KI?$IEp?$LP?$LNo?$IOx@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
COMM	ks_tmp:BYTE:014ccH
;	COMDAT ??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@
text$s	SEGMENT
??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@ DB 'P'
	DB	'|6o', 0eeH, 010H, '.', 09aH, 0e2H, 08aH, 0d5H, 082H, 'r}''', 0fH
	DB	0e8H, 'M', 07fH, 'hz', 0cfH, 0b5H, 0e7H, 'Cg', 0aaH, 098H, 093H
	DB	'R+', 09H, 'nB', 0dfH, ',YJ', 091H, 'm~', 010H, 0aeH, 0b2H, 01aH
	DB	089H, 08fH, 0b9H, 08fH, 0e6H, '1', 0a9H, 0d8H, 09fH, 098H, '&', 0f4H
	DB	0daH, 0cdH, '}ee', 0deH, 010H, 095H, 091H, 0b4H, 084H, '&', 0aeH
	DB	'C', 0a1H, 00H, '[', 01eH, 0b8H, '8', 097H, 0a4H, 01eH, 'K', 0d2H
	DB	'ed', 0bcH, 0faH, 01fH, '5', 085H, 0dbH, 'O', 097H, 'eo', 0bdH
	DB	'$', 00H					;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@ DB 'P|6o', 00H	;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0DB@KJBGHKFA@z?$DN?$HM?$AD?g?$CGk?x?$DNx?$PL?$CJ?Rd?$BPV?j?p?e?u?L?D?31?$KI?$IEp?$LP?$LNo?$IOx@FNODOBFM@
text$s	SEGMENT
??_C@_0DB@KJBGHKFA@z?$DN?$HM?$AD?g?$CGk?x?$DNx?$PL?$CJ?Rd?$BPV?j?p?e?u?L?D?31?$KI?$IEp?$LP?$LNo?$IOx@FNODOBFM@ DB 'z'
	DB	'=|', 03H, 0e7H, '&k', 0f8H, '=x', 0fbH, ')', 0d2H, 'd', 01fH, 'V'
	DB	0eaH, 0f0H, 0e5H, 0f5H, 0ccH, 0c4H, ':1', 0a8H, 084H, 'p', 0bfH
	DB	0bdH, 'o', 08eH, 'x$Z', 0c0H, 0aH, 0f6H, 0faH, 0f0H, 0f6H, 0e9H
	DB	00H, 'G_s', 0ceH, 0e1H, 'C', 00H		;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04PODIBCAH@z?$DN?$HM?$AD?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04PODIBCAH@z?$DN?$HM?$AD?$AA@FNODOBFM@ DB 'z=|', 03H, 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04BHFCCAHB@?2u?N?p?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04BHFCCAHB@?2u?N?p?$AA@FNODOBFM@ DB '\u', 0ceH, 0f0H, 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0DB@MAMEFANK@?2u?N?p?$BK?$JG?$AN?wL?$LG?$LE?$JL?$JO8?f?$LF?$DL?$BB?$IA?c?1?w?$OA?$NN?$KK?J?$IP?$IB?8?v?$JPO@FNODOBFM@
text$s	SEGMENT
??_C@_0DB@MAMEFANK@?2u?N?p?$BK?$JG?$AN?wL?$LG?$LE?$JL?$JO8?f?$LF?$DL?$BB?$IA?c?1?w?$OA?$NN?$KK?J?$IP?$IB?8?v?$JPO@FNODOBFM@ DB '\'
	DB	'u', 0ceH, 0f0H, 01aH, 096H, 0dH, 0f7H, 'L', 0b6H, 0b4H, 09bH, 09eH
	DB	'8', 0e6H, 0b5H, ';', 011H, 080H, 0e3H, '/', 0f7H, 0e0H, 0ddH, 0aaH
	DB	0caH, 08fH, 081H, '''', 0f6H, 09fH, 'O', 01dH, 0c8H, '/H-', 0dbH
	DB	01aH, 0aH, 0caH, 090H, 0cbH, 080H, 0b9H, '.', 090H, 09eH, 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0JB@EEHAMOLN@?$BDd?$KO?x?$AN?uWl0?UqL?$KHu?$DP?$PN?$AA?e?$CF?$IL9?GD?$HP?N?$CD?$DN?$AIu?$OA?1H@FNODOBFM@
text$s	SEGMENT
??_C@_0JB@EEHAMOLN@?$BDd?$KO?x?$AN?uWl0?UqL?$KHu?$DP?$PN?$AA?e?$CF?$IL9?GD?$HP?N?$CD?$DN?$AIu?$OA?1H@FNODOBFM@ DB 013H
	DB	'd', 0aeH, 0f8H, 0dH, 0f5H, 'Wl0', 0d5H, 'qL', 0a7H, 'u?', 0fdH
	DB	00H, 0e5H, '%', 08bH, '9', 0c7H, 'D', 07fH, 0ceH, '#=', 08H, 'u'
	DB	0e0H, '/H', 0d6H, '0', 0d7H, 00H, 0b6H, '$', 0dbH, 0e0H, 'Z', 0d7H
	DB	'G', 0efH, 'R', 0caH, 0a6H, '4', 083H, 'G', 0e5H, 0cbH, 0e9H, 087H
	DB	0f1H, ' Yj', 0e6H, 0a9H, 0cfH, 'Qx', 0c6H, 0b6H, '#', 0a6H, 't'
	DB	0dH, 0e8H, 091H, 0beH, 01aH, 0d0H, '(', 0ccH, 0ceH, 016H, 098H
	DB	09aH, 0beH, 0fbH, 0dcH, 'x', 0c9H, 0e1H, '}rg', 0ceH, 0e1H, 'a'
	DB	'V_', 096H, 'h', 0e6H, 0e1H, 0ddH, 0f4H, 0bfH, 01bH, 080H, 0e0H
	DB	019H, 01cH, 0f4H, 0c4H, 0d3H, 0ddH, 0d5H, 0d5H, 'W-', 083H, 0c7H
	DB	0a3H, '7', 087H, 0f4H, 'N', 0e0H, 0f6H, 0d8H, 'me', 0dcH, 0a0H
	DB	'R', 0a3H, 013H, 0beH, 081H, 0fcH, '0', 0beH, '}iX4', 0b6H, 0ddH
	DB	'A', 0c6H, 00H				;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04KFFKJODL@?$BDd?$KO?x?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04KFFKJODL@?$BDd?$KO?x?$AA@FNODOBFM@ DB 013H, 'd', 0aeH, 0f8H, 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_08NLHBPEGP@password?$AA@FNODOBFM@ DB 'password', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@ DB 012H, '4Vx', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@FNODOBFM@ DB 'AES-Blowfish-'
	DB	'Serpent', 00H				;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@FNODOBFM@ DB 'AES-Blowfish', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@ DB 'CAST5', 00H	;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@ DB 'Blowfish', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@ DB 'Twofish-Serpent', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@ DB 'Serpent-Twofis'
	DB	'h-AES', 00H					;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@ DB 'Serpent-AES', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@ DB 'AES-Twofish-Se'
	DB	'rpent', 00H					;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@ DB 'AES-Twofish', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@ DB 'Twofish', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@ DB 'Serpent', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@
CONST	SEGMENT
??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@ DB 03H
	DB	091H, 0d2H, 080H, 00H, 0b6H, 'b', 0bbH, 0b8H, 0e6H, '#>', 0e8H
	DB	'l', 0f2H, 0b2H, 084H, 'tLs', 08bH, 'X', 00H, 0baH, '(', 012H, 0edH
	DB	'Ro', 0e3H, 015H, ':', 0b1H, 0baH, 0e7H, 0e2H, '6', 0beH, 096H
	DB	'TI?', 019H, 0faH, 0ceH, 0a6H, 'D', 01fH, '`', 0f5H, 0f0H, 018H
	DB	093H, 09H, 011H, 0a5H, 0e5H, 0ceH, 0d8H, 0f2H, 'j', 0bfH, 0a4H
	DB	02H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
CONST	SEGMENT
??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@ DB 'abcdbcdecdefdefg'
	DB	'efghfghighijhijkijkljklmklmnlmnomnopnopq', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
CONST	SEGMENT
??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@ DB 00H
	DB	011H, '"3DUfw', 088H, 099H, 0aaH, 0bbH, 0ccH, 0ddH, 0eeH, 0ffH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH, 00H, 011H, '"3DUfw', 088H, 099H
	DB	0aaH, 0bbH, 0ccH, 0ddH, 0eeH, 0ffH, 01H, '#Eg', 089H, 0abH, 0cdH
	DB	0efH, 00H, 011H, '"3DUfw', 088H, 099H, 0aaH, 0bbH, 0ccH, 0ddH, 0eeH
	DB	0ffH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PFENIDMG@?$IF?qdp?$DOa?$KG11?$LO?$HOE?$JF?$IO?$AH?$JE?$BC9?$AE?y?$AA@
CONST	SEGMENT
??_C@_0BF@PFENIDMG@?$IF?qdp?$DOa?$KG11?$LO?$HOE?$JF?$IO?$AH?$JE?$BC9?$AE?y?$AA@ DB 085H
	DB	0f1H, 'dp>a', 0a6H, '11', 0beH, '~E', 095H, 08eH, 07H, 094H, 012H
	DB	'9', 04H, 0f9H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HFFLEHPC@?x6b?L?$IN3?$JM?$CC?$HO?$GA?$AP?MclW?RW?$BL?$BM4?$AA@
CONST	SEGMENT
??_C@_0BF@HFFLEHPC@?x6b?L?$IN3?$JM?$CC?$HO?$GA?$AP?MclW?RW?$BL?$BM4?$AA@ DB 0f8H
	DB	'6b', 0ccH, 08dH, '3', 09cH, '"~`', 0fH, 0cdH, 'clW', 0d2H, 'W'
	DB	01bH, 01cH, '4', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@
CONST	SEGMENT
??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@ DB '1234567890123456'
	DB	'7890123456789012345678901234567890123456789012345678901234567'
	DB	'890', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ONGHGJEC@message?5digest?$AA@
CONST	SEGMENT
??_C@_0P@ONGHGJEC@message?5digest?$AA@ DB 'message digest', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JFBGCNOI@?$AB?$CDEg?$IJ?$KL?M?o?$PO?$NM?$LK?$JIvT2?$BA?$AA?$BB?$CC3?$AA@
CONST	SEGMENT
??_C@_0BF@JFBGCNOI@?$AB?$CDEg?$IJ?$KL?M?o?$PO?$NM?$LK?$JIvT2?$BA?$AA?$BB?$CC3?$AA@ DB 01H
	DB	'#Eg', 089H, 0abH, 0cdH, 0efH, 0feH, 0dcH, 0baH, 098H, 'vT2', 010H
	DB	00H, 011H, '"3', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EKEAJOKM@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$AA@
CONST	SEGMENT
??_C@_0BF@EKEAJOKM@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$AA@ DB 00H
	DB	011H, '"3DUfw', 088H, 099H, 0aaH, 0bbH, 0ccH, 0ddH, 0eeH, 0ffH
	DB	01H, '#Eg', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OJOCDNBL@?$BC?$FNsB?$LJ?$KM?$BB?M?$JB?$KD?$JK?t?$IK?$KB?$HLOc?qu?S?$AA@
CONST	SEGMENT
??_C@_0BF@OJOCDNBL@?$BC?$FNsB?$LJ?$KM?$BB?M?$JB?$KD?$JK?t?$IK?$KB?$HLOc?qu?S?$AA@ DB 012H
	DB	']sB', 0b9H, 0acH, 011H, 0cdH, 091H, 0a3H, 09aH, 0f4H, 08aH, 0a1H
	DB	'{Oc', 0f1H, 'u', 0d3H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NPPNDLAN@?o?$PM?$NPj?e?k?1?$KC?Rt?$BG?U?q?$IE?$NP?$JM?$CF?$JK?$HMy?$AA@
CONST	SEGMENT
??_C@_0BF@NPPNDLAN@?o?$PM?$NPj?e?k?1?$KC?Rt?$BG?U?q?$IE?$NP?$JM?$CF?$JK?$HMy?$AA@ DB 0efH
	DB	0fcH, 0dfH, 'j', 0e5H, 0ebH, '/', 0a2H, 0d2H, 't', 016H, 0d5H, 0f1H
	DB	084H, 0dfH, 09cH, '%', 09aH, '|y', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BDDOKADE@?$LG?$BH1?$IGU?$AFrd?b?$IL?$MA?$LG?$PL7?$IM?$IO?qF?$LO?$AA?$AA@
CONST	SEGMENT
??_C@_0BF@BDDOKADE@?$LG?$BH1?$IGU?$AFrd?b?$IL?$MA?$LG?$PL7?$IM?$IO?qF?$LO?$AA?$AA@ DB 0b6H
	DB	017H, '1', 086H, 'U', 05H, 'rd', 0e2H, 08bH, 0c0H, 0b6H, 0fbH, '7'
	DB	08cH, 08eH, 0f1H, 'F', 0beH, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KOBLBFLL@?$LM?t?$BO?$KL?$IL?$LC?X?$AC?s?P?2?$KP?$HM?$LA?$JC?l?x?Q?$KD?$KK?$AA@
CONST	SEGMENT
??_C@_0BF@KOBLBFLL@?$LM?t?$BO?$KL?$IL?$LC?X?$AC?s?P?2?$KP?$HM?$LA?$JC?l?x?Q?$KD?$KK?$AA@ DB 0bcH
	DB	0f4H, 01eH, 0abH, 08bH, 0b2H, 0d8H, 02H, 0f3H, 0d0H, '\', 0afH
	DB	'|', 0b0H, 092H, 0ecH, 0f8H, 0d1H, 0a3H, 0aaH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OCHOFPMP@Sample?5?$CD3?$AA@
CONST	SEGMENT
??_C@_09OCHOFPMP@Sample?5?$CD3?$AA@ DB 'Sample #3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GF@PEHFLIKL@PQRSTUVWXYZ?$FL?2?$FN?$FO_?$GAabcdefghijklmno@
CONST	SEGMENT
??_C@_0GF@PEHFLIKL@PQRSTUVWXYZ?$FL?2?$FN?$FO_?$GAabcdefghijklmno@ DB 'PQR'
	DB	'STUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~', 07fH, 080H, 081H
	DB	082H, 083H, 084H, 085H, 086H, 087H, 088H, 089H, 08aH, 08bH, 08cH
	DB	08dH, 08eH, 08fH, 090H, 091H, 092H, 093H, 094H, 095H, 096H, 097H
	DB	098H, 099H, 09aH, 09bH, 09cH, 09dH, 09eH, 09fH, 0a0H, 0a1H, 0a2H
	DB	0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H, 0aaH, 0abH, 0acH, 0adH
	DB	0aeH, 0afH, 0b0H, 0b1H, 0b2H, 0b3H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@IAGJFOJI@?c?$HLjw?$FN?H?$HN?$LK?$KE?$NP?$KJ?yn?$FO?$DP?$PN?$NO?$LNq?x?$IGr?$IJ?$IG?$FN?u?$KD?9?5?M?ID@
CONST	SEGMENT
??_C@_0EB@IAGJFOJI@?c?$HLjw?$FN?H?$HN?$LK?$KE?$NP?$KJ?yn?$FO?$DP?$PN?$NO?$LNq?x?$IGr?$IJ?$IG?$FN?u?$KD?9?5?M?ID@ DB 0e3H
	DB	'{jw]', 0c8H, '}', 0baH, 0a4H, 0dfH, 0a9H, 0f9H, 'n^?', 0fdH, 0deH
	DB	0bdH, 'q', 0f8H, 086H, 'r', 089H, 086H, ']', 0f5H, 0a3H, '- ', 0cdH
	DB	0c9H, 'D', 0b6H, 02H, ',', 0acH, '<I', 082H, 0b1H, 0dH, '^', 0ebH
	DB	'U', 0c3H, 0e4H, 0deH, 015H, 013H, 'Fv', 0fbH, 'm', 0e0H, 'D`e'
	DB	0c9H, 't@', 0faH, 08cH, 'jX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@HIMJOCNA@?$IA?$LCBc?G?A?$KD?k?$LH?$BE?$JD?A?$NN?$HL?h?$LE?$JLF?Q?t?$BLJ?n?A?$BC?$BL?$AB7?$ID?x?sR@
CONST	SEGMENT
??_C@_0EB@HIMJOCNA@?$IA?$LCBc?G?A?$KD?k?$LH?$BE?$JD?A?$NN?$HL?h?$LE?$JLF?Q?t?$BLJ?n?A?$BC?$BL?$AB7?$ID?x?sR@ DB 080H
	DB	0b2H, 'Bc', 0c7H, 0c1H, 0a3H, 0ebH, 0b7H, 014H, 093H, 0c1H, 0ddH
	DB	'{', 0e8H, 0b4H, 09bH, 'F', 0d1H, 0f4H, 01bH, 'J', 0eeH, 0c1H, 012H
	DB	01bH, 01H, '7', 083H, 0f8H, 0f3H, 'RkV', 0d0H, '7', 0e0H, '_%', 098H
	DB	0bdH, 0fH, 0d2H, '!]j', 01eH, 'R', 095H, 0e6H, 'Os', 0f6H, '?', 0aH
	DB	0ecH, 08bH, 091H, 'Z', 098H, ']xe', 098H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@LPCMCIMB@?$LA?$LKFV7E?$IMi?$JA?e?$KI?E?v?$BNJ?w?ev?Y?$HP?yK?$IH?9?go?$IAP6?$BO?c?$NL@
CONST	SEGMENT
??_C@_0EB@LPCMCIMB@?$LA?$LKFV7E?$IMi?$JA?e?$KI?E?v?$BNJ?w?ev?Y?$HP?yK?$IH?9?go?$IAP6?$BO?c?$NL@ DB 0b0H
	DB	0baH, 'FV7E', 08cH, 'i', 090H, 0e5H, 0a8H, 0c5H, 0f6H, 01dH, 'J'
	DB	0f7H, 0e5H, 'v', 0d9H, 07fH, 0f9H, 'K', 087H, '-', 0e7H, 'o', 080H
	DB	'P6', 01eH, 0e3H, 0dbH, 0a9H, 01cH, 0a5H, 0c1H, 01aH, 0a2H, '^'
	DB	0b4H, 0d6H, 'y''\', 0c5H, 'x', 080H, 'c', 0a5H, 0f1H, 097H, 'A'
	DB	012H, 0cH, 'O-', 0e2H, 0adH, 0ebH, 0ebH, 010H, 0a2H, 098H, 0ddH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@KHIOOKPP@?zs?$LA?$AI?$JNV?$KC?$IE?o?$LA?pul?$IJ?$AL?i?$LB?$LF?$NL?$NN?$IO?h?$BK6U?x?$DO3?$LC?8?$JN9@
CONST	SEGMENT
??_C@_0EB@KHIOOKPP@?zs?$LA?$AI?$JNV?$KC?$IE?o?$LA?pul?$IJ?$AL?i?$LB?$LF?$NL?$NN?$IO?h?$BK6U?x?$DO3?$LC?8?$JN9@ DB 0faH
	DB	's', 0b0H, 08H, 09dH, 'V', 0a2H, 084H, 0efH, 0b0H, 0f0H, 'ul', 089H
	DB	0bH, 0e9H, 0b1H, 0b5H, 0dbH, 0ddH, 08eH, 0e8H, 01aH, '6U', 0f8H
	DB	'>3', 0b2H, '''', 09dH, '9', 0bfH, '>', 084H, 082H, 'y', 0a7H, '"'
	DB	0c8H, 06H, 0b4H, 085H, 0a4H, '~g', 0c8H, 07H, 0b9H, 'F', 0a3H, '7'
	DB	0beH, 0e8H, 094H, '&t''', 088H, 'Y', 0e1H, '2', 092H, 0fbH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@OCCGLAFJ@?$BGKz?$HL?$PM?x?$BJ?b?c?$JF?$PL?g?$DLV?$OA?$KD?$IH?$LNd?$CC?4?$ID?$BP?V?$BA?8?$AM?W?j?$CF?$AFT@
CONST	SEGMENT
??_C@_0EB@OCCGLAFJ@?$BGKz?$HL?$PM?x?$BJ?b?c?$JF?$PL?g?$DLV?$OA?$KD?$IH?$LNd?$CC?4?$ID?$BP?V?$BA?8?$AM?W?j?$CF?$AFT@ DB 016H
	DB	'Kz{', 0fcH, 0f8H, 019H, 0e2H, 0e3H, 095H, 0fbH, 0e7H, ';V', 0e0H
	DB	0a3H, 087H, 0bdH, 'd".', 083H, 01fH, 0d6H, 010H, '''', 0cH, 0d7H
	DB	0eaH, '%', 05H, 'T', 097H, 'X', 0bfH, 'u', 0c0H, 'Z', 099H, 'J'
	DB	'm', 03H, 'Oe', 0f8H, 0f0H, 0e6H, 0fdH, 0caH, 0eaH, 0b1H, 0a3H
	DB	'MJkKcn', 07H, 0aH, '8', 0bcH, 0e7H, '7', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@NPCMCGAL@?$IH?$KK?$HM?$NO?$KF?oa?$JNO?p?$LE$?$BK?$BNl?$LA?$CDy?t?b?NN?Bxz?P?$LD?$AFE?a?$HM?$NO@
CONST	SEGMENT
??_C@_0EB@NPCMCGAL@?$IH?$KK?$HM?$NO?$KF?oa?$JNO?p?$LE$?$BK?$BNl?$LA?$CDy?t?b?NN?Bxz?P?$LD?$AFE?a?$HM?$NO@ DB 087H
	DB	0aaH, '|', 0deH, 0a5H, 0efH, 'a', 09dH, 'O', 0f0H, 0b4H, '$', 01aH
	DB	01dH, 'l', 0b0H, '#y', 0f4H, 0e2H, 0ceH, 'N', 0c2H, 'xz', 0d0H
	DB	0b3H, 05H, 'E', 0e1H, '|', 0deH, 0daH, 0a8H, '3', 0b7H, 0d6H, 0b8H
	DB	0a7H, 02H, 03H, 08bH, '''N', 0aeH, 0a3H, 0f4H, 0e4H, 0beH, 09dH
	DB	091H, 'N', 0ebH, 'a', 0f1H, 'p.il :', 012H, 'hT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0JJ@PIHOAKB@This?5is?5a?5test?5using?5a?5larger?5th@
CONST	SEGMENT
??_C@_0JJ@PIHOAKB@This?5is?5a?5test?5using?5a?5larger?5th@ DB 'This is a '
	DB	'test using a larger than block-size key and a larger than blo'
	DB	'ck-size data. The key needs to be hashed before being used by'
	DB	' the HMAC algorithm.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@HELOGHDO@Test?5Using?5Larger?5Than?5Block?9Siz@
CONST	SEGMENT
??_C@_0DH@HELOGHDO@Test?5Using?5Larger?5Than?5Block?9Siz@ DB 'Test Using '
	DB	'Larger Than Block-Size Key - Hash Key First', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@JCGDPDJ@?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M@
CONST	SEGMENT
??_C@_0DD@JCGDPDJ@?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M@ DB 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 0cdH
	DB	0cdH, 0cdH, 0cdH, 0cdH, 0cdH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@
CONST	SEGMENT
??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@ DB 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 0ddH
	DB	0ddH, 0ddH, 0ddH, 0ddH, 0ddH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@
CONST	SEGMENT
??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@ DB 'what do '
	DB	'ya want for nothing?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08BPPJKMC@Hi?5There?$AA@
CONST	SEGMENT
??_C@_08BPPJKMC@Hi?5There?$AA@ DB 'Hi There', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@
CONST	SEGMENT
??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@ DB 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LNLLCJNI@?$AB?$AC?$AD?$AE?$AF?$AG?$AH?$AI?7?6?$AL?$AM?$AN?$AO?$AP?$BA?$BB?$BC?$BD?$BE?$BF?$BG?$BH?$BI?$BJ?$AA@
CONST	SEGMENT
??_C@_0BK@LNLLCJNI@?$AB?$AC?$AD?$AE?$AF?$AG?$AH?$AI?7?6?$AL?$AM?$AN?$AO?$AP?$BA?$BB?$BC?$BD?$BE?$BF?$BG?$BH?$BI?$BJ?$AA@ DB 01H
	DB	02H, 03H, 04H, 05H, 06H, 07H, 08H, 09H, 0aH, 0bH, 0cH, 0dH, 0eH
	DB	0fH, 010H, 011H, 012H, 013H, 014H, 015H, 016H, 017H, 018H, 019H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@
CONST	SEGMENT
??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@ DB 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH
	DB	0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 0aaH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDLGGHEL@Jefe?$AA@
CONST	SEGMENT
??_C@_04HDLGGHEL@Jefe?$AA@ DB 'Jefe', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@
CONST	SEGMENT
??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@ DB 0bH
	DB	0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 0bH
	DB	0bH, 0bH, 0bH, 0bH, 0bH, 0bH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@ DB 'AES', 00H	;  ?? ::FNODOBFM::`string'
tripledes_vectors DB 01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	0feH
	DB	0dcH
	DB	0baH
	DB	098H
	DB	076H
	DB	054H
	DB	032H
	DB	010H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0e7H
	DB	0deH
	DB	0bH
	DB	07cH
	DB	06H
	DB	0aeH
	DB	05eH
	DB	0eH
	DB	0d5H
XTS_vectors DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	01cH
	DB	03bH
	DB	03aH
	DB	010H
	DB	02fH
	DB	077H
	DB	03H
	DB	086H
	DB	0e4H
	DB	083H
	DB	06cH
	DB	099H
	DB	0e3H
	DB	070H
	DB	0cfH
	DB	09bH
	DB	0eaH
	DB	00H
	DB	080H
	DB	03fH
	DB	05eH
	DB	048H
	DB	023H
	DB	057H
	DB	0a4H
	DB	0aeH
	DB	012H
	DB	0d4H
	DB	014H
	DB	0a3H
	DB	0e6H
	DB	03bH
	DB	05dH
	DB	031H
	DB	0e2H
	DB	076H
	DB	0f8H
	DB	0feH
	DB	04aH
	DB	08dH
	DB	066H
	DB	0b3H
	DB	017H
	DB	0f9H
	DB	0acH
	DB	068H
	DB	03fH
	DB	044H
	DB	068H
	DB	0aH
	DB	086H
	DB	0acH
	DB	035H
	DB	0adH
	DB	0fcH
	DB	033H
	DB	045H
	DB	0beH
	DB	0feH
	DB	0cbH
	DB	04bH
	DB	0b1H
	DB	088H
	DB	0fdH
	DB	057H
	DB	076H
	DB	092H
	DB	06cH
	DB	049H
	DB	0a3H
	DB	09H
	DB	05eH
	DB	0b1H
	DB	08H
	DB	0fdH
	DB	010H
	DB	098H
	DB	0baH
	DB	0ecH
	DB	070H
	DB	0aaH
	DB	0a6H
	DB	069H
	DB	099H
	DB	0a7H
	DB	02aH
	DB	082H
	DB	0f2H
	DB	07dH
	DB	084H
	DB	08bH
	DB	021H
	DB	0d4H
	DB	0a7H
	DB	041H
	DB	0b0H
	DB	0c5H
	DB	0cdH
	DB	04dH
	DB	05fH
	DB	0ffH
	DB	09dH
	DB	0acH
	DB	089H
	DB	0aeH
	DB	0baH
	DB	012H
	DB	029H
	DB	061H
	DB	0d0H
	DB	03aH
	DB	075H
	DB	071H
	DB	023H
	DB	0e9H
	DB	087H
	DB	0fH
	DB	08aH
	DB	0cfH
	DB	010H
	DB	00H
	DB	02H
	DB	08H
	DB	087H
	DB	089H
	DB	014H
	DB	029H
	DB	0caH
	DB	02aH
	DB	03eH
	DB	07aH
	DB	07dH
	DB	07dH
	DB	0f7H
	DB	0b1H
	DB	03H
	DB	055H
	DB	016H
	DB	05cH
	DB	08bH
	DB	09aH
	DB	06dH
	DB	0aH
	DB	07dH
	DB	0e8H
	DB	0b0H
	DB	062H
	DB	0c4H
	DB	050H
	DB	0dH
	DB	0c4H
	DB	0cdH
	DB	012H
	DB	0cH
	DB	0fH
	DB	074H
	DB	018H
	DB	0daH
	DB	0e3H
	DB	0d0H
	DB	0b5H
	DB	078H
	DB	01cH
	DB	034H
	DB	080H
	DB	03fH
	DB	0a7H
	DB	054H
	DB	021H
	DB	0c7H
	DB	090H
	DB	0dfH
	DB	0e1H
	DB	0deH
	DB	018H
	DB	034H
	DB	0f2H
	DB	080H
	DB	0d7H
	DB	066H
	DB	07bH
	DB	032H
	DB	07fH
	DB	06cH
	DB	08cH
	DB	0d7H
	DB	055H
	DB	07eH
	DB	012H
	DB	0acH
	DB	03aH
	DB	0fH
	DB	093H
	DB	0ecH
	DB	05H
	DB	0c5H
	DB	02eH
	DB	04H
	DB	093H
	DB	0efH
	DB	031H
	DB	0a1H
	DB	02dH
	DB	03dH
	DB	092H
	DB	060H
	DB	0f7H
	DB	09aH
	DB	028H
	DB	09dH
	DB	06aH
	DB	037H
	DB	09bH
	DB	0c7H
	DB	0cH
	DB	050H
	DB	084H
	DB	014H
	DB	073H
	DB	0d1H
	DB	0a8H
	DB	0ccH
	DB	081H
	DB	0ecH
	DB	058H
	DB	03eH
	DB	096H
	DB	045H
	DB	0e0H
	DB	07bH
	DB	08dH
	DB	096H
	DB	070H
	DB	065H
	DB	05bH
	DB	0a5H
	DB	0bbH
	DB	0cfH
	DB	0ecH
	DB	0c6H
	DB	0dcH
	DB	039H
	DB	066H
	DB	038H
	DB	0aH
	DB	0d8H
	DB	0feH
	DB	0cbH
	DB	017H
	DB	0b6H
	DB	0baH
	DB	02H
	DB	046H
	DB	09aH
	DB	02H
	DB	0aH
	DB	084H
	DB	0e1H
	DB	08eH
	DB	08fH
	DB	084H
	DB	025H
	DB	020H
	DB	070H
	DB	0c1H
	DB	03eH
	DB	09fH
	DB	01fH
	DB	028H
	DB	09bH
	DB	0e5H
	DB	04fH
	DB	0bcH
	DB	048H
	DB	014H
	DB	057H
	DB	077H
	DB	08fH
	DB	061H
	DB	060H
	DB	015H
	DB	0e1H
	DB	032H
	DB	07aH
	DB	02H
	DB	0b1H
	DB	040H
	DB	0f1H
	DB	050H
	DB	05eH
	DB	0b3H
	DB	09H
	DB	032H
	DB	06dH
	DB	068H
	DB	037H
	DB	08fH
	DB	083H
	DB	074H
	DB	059H
	DB	05cH
	DB	084H
	DB	09dH
	DB	084H
	DB	0f4H
	DB	0c3H
	DB	033H
	DB	0ecH
	DB	044H
	DB	023H
	DB	088H
	DB	051H
	DB	043H
	DB	0cbH
	DB	047H
	DB	0bdH
	DB	071H
	DB	0c5H
	DB	0edH
	DB	0aeH
	DB	09bH
	DB	0e6H
	DB	09aH
	DB	02fH
	DB	0feH
	DB	0ceH
	DB	0b1H
	DB	0beH
	DB	0c9H
	DB	0deH
	DB	024H
	DB	04fH
	DB	0beH
	DB	015H
	DB	099H
	DB	02bH
	DB	011H
	DB	0b7H
	DB	07cH
	DB	04H
	DB	0fH
	DB	012H
	DB	0bdH
	DB	08fH
	DB	06aH
	DB	097H
	DB	05aH
	DB	044H
	DB	0a0H
	DB	0f9H
	DB	0cH
	DB	029H
	DB	0a9H
	DB	0abH
	DB	0c3H
	DB	0d4H
	DB	0d8H
	DB	093H
	DB	092H
	DB	072H
	DB	084H
	DB	0c5H
	DB	087H
	DB	054H
	DB	0ccH
	DB	0e2H
	DB	094H
	DB	052H
	DB	09fH
	DB	086H
	DB	014H
	DB	0dcH
	DB	0d2H
	DB	0abH
	DB	0a9H
	DB	091H
	DB	092H
	DB	05fH
	DB	0edH
	DB	0c4H
	DB	0aeH
	DB	074H
	DB	0ffH
	DB	0acH
	DB	06eH
	DB	033H
	DB	03bH
	DB	093H
	DB	0ebH
	DB	04aH
	DB	0ffH
	DB	04H
	DB	079H
	DB	0daH
	DB	09aH
	DB	041H
	DB	0eH
	DB	044H
	DB	050H
	DB	0e0H
	DB	0ddH
	DB	07aH
	DB	0e4H
	DB	0c6H
	DB	0e2H
	DB	091H
	DB	09H
	DB	00H
	DB	057H
	DB	05dH
	DB	0a4H
	DB	01H
	DB	0fcH
	DB	07H
	DB	05H
	DB	09fH
	DB	064H
	DB	05eH
	DB	08bH
	DB	07eH
	DB	09bH
	DB	0fdH
	DB	0efH
	DB	033H
	DB	094H
	DB	030H
	DB	054H
	DB	0ffH
	DB	084H
	DB	01H
	DB	014H
	DB	093H
	DB	0c2H
	DB	07bH
	DB	034H
	DB	029H
	DB	0eaH
	DB	0edH
	DB	0b4H
	DB	0edH
	DB	053H
	DB	076H
	DB	044H
	DB	01aH
	DB	077H
	DB	0edH
	DB	043H
	DB	085H
	DB	01aH
	DB	0d7H
	DB	07fH
	DB	016H
	DB	0f5H
	DB	041H
	DB	0dfH
	DB	0d2H
	DB	069H
	DB	0d5H
	DB	0dH
	DB	06aH
	DB	05fH
	DB	014H
	DB	0fbH
	DB	0aH
	DB	0abH
	DB	01cH
	DB	0bbH
	DB	04cH
	DB	015H
	DB	050H
	DB	0beH
	DB	097H
	DB	0f7H
	DB	0abH
	DB	040H
	DB	066H
	DB	019H
	DB	03cH
	DB	04cH
	DB	0aaH
	DB	077H
	DB	03dH
	DB	0adH
	DB	038H
	DB	01H
	DB	04bH
	DB	0d2H
	DB	09H
	DB	02fH
	DB	0a7H
	DB	055H
	DB	0c8H
	DB	024H
	DB	0bbH
	DB	05eH
	DB	054H
	DB	0c4H
	DB	0f3H
	DB	06fH
	DB	0fdH
	DB	0a9H
	DB	0fcH
	DB	0eaH
	DB	070H
	DB	0b9H
	DB	0c6H
	DB	0e6H
	DB	093H
	DB	0e1H
	DB	048H
	DB	0c1H
	DB	051H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	077H
	DB	0a3H
	DB	012H
	DB	051H
	DB	061H
	DB	08aH
	DB	015H
	DB	0e6H
	DB	0b9H
	DB	02dH
	DB	01dH
	DB	066H
	DB	0dfH
	DB	0feH
	DB	07bH
	DB	050H
	DB	0b5H
	DB	0bH
	DB	0adH
	DB	055H
	DB	023H
	DB	05H
	DB	0baH
	DB	02H
	DB	017H
	DB	0a6H
	DB	010H
	DB	068H
	DB	08eH
	DB	0ffH
	DB	07eH
	DB	011H
	DB	0e1H
	DB	0d0H
	DB	022H
	DB	054H
	DB	038H
	DB	0e0H
	DB	093H
	DB	024H
	DB	02dH
	DB	06dH
	DB	0b2H
	DB	074H
	DB	0fdH
	DB	0e8H
	DB	01H
	DB	0d4H
	DB	0caH
	DB	0e0H
	DB	06fH
	DB	020H
	DB	092H
	DB	0c7H
	DB	028H
	DB	0b2H
	DB	047H
	DB	085H
	DB	059H
	DB	0dfH
	DB	058H
	DB	0e8H
	DB	037H
	DB	0c2H
	DB	046H
	DB	09eH
	DB	0e4H
	DB	0a4H
	DB	0faH
	DB	079H
	DB	04eH
	DB	04bH
	DB	0bcH
	DB	07fH
	DB	039H
	DB	0bcH
	DB	02H
	DB	06eH
	DB	03cH
	DB	0b7H
	DB	02cH
	DB	033H
	DB	0b0H
	DB	088H
	DB	08fH
	DB	025H
	DB	0b4H
	DB	0acH
	DB	0f5H
	DB	06aH
	DB	02aH
	DB	098H
	DB	04H
	DB	0f1H
	DB	0ceH
	DB	06dH
	DB	03dH
	DB	06eH
	DB	01dH
	DB	0c6H
	DB	0caH
	DB	018H
	DB	01dH
	DB	04bH
	DB	054H
	DB	061H
	DB	079H
	DB	0d5H
	DB	055H
	DB	044H
	DB	0aaH
	DB	077H
	DB	060H
	DB	0c4H
	DB	0dH
	DB	06H
	DB	074H
	DB	015H
	DB	039H
	DB	0c7H
	DB	0e3H
	DB	0cdH
	DB	09dH
	DB	02fH
	DB	066H
	DB	050H
	DB	0b2H
	DB	01H
	DB	03fH
	DB	0d0H
	DB	0eeH
	DB	0b8H
	DB	0c2H
	DB	0b8H
	DB	0e3H
	DB	0d8H
	DB	0d2H
	DB	040H
	DB	0ccH
	DB	0aeH
	DB	02dH
	DB	04cH
	DB	098H
	DB	032H
	DB	0aH
	DB	074H
	DB	042H
	DB	0e1H
	DB	0c8H
	DB	0d7H
	DB	05aH
	DB	042H
	DB	0d6H
	DB	0e6H
	DB	0cfH
	DB	0a4H
	DB	0c2H
	DB	0ecH
	DB	0a1H
	DB	079H
	DB	08dH
	DB	015H
	DB	08cH
	DB	07aH
	DB	0ecH
	DB	0dfH
	DB	082H
	DB	049H
	DB	0fH
	DB	024H
	DB	0bbH
	DB	09bH
	DB	038H
	DB	0e1H
	DB	08H
	DB	0bcH
	DB	0daH
	DB	012H
	DB	0c3H
	DB	0faH
	DB	0f9H
	DB	0a2H
	DB	011H
	DB	041H
	DB	0c3H
	DB	061H
	DB	03bH
	DB	058H
	DB	036H
	DB	07fH
	DB	092H
	DB	02aH
	DB	0aaH
	DB	026H
	DB	0cdH
	DB	022H
	DB	0f2H
	DB	03dH
	DB	070H
	DB	08dH
	DB	0aeH
	DB	069H
	DB	09aH
	DB	0d7H
	DB	0cbH
	DB	040H
	DB	0a8H
	DB	0adH
	DB	0bH
	DB	06eH
	DB	027H
	DB	084H
	DB	097H
	DB	03dH
	DB	0cbH
	DB	060H
	DB	056H
	DB	084H
	DB	0c0H
	DB	08bH
	DB	08dH
	DB	069H
	DB	098H
	DB	0c6H
	DB	09aH
	DB	0acH
	DB	04H
	DB	099H
	DB	021H
	DB	087H
	DB	01eH
	DB	0bbH
	DB	065H
	DB	030H
	DB	01aH
	DB	046H
	DB	019H
	DB	0caH
	DB	080H
	DB	0ecH
	DB	0b4H
	DB	085H
	DB	0a3H
	DB	01dH
	DB	074H
	DB	042H
	DB	023H
	DB	0ceH
	DB	08dH
	DB	0dcH
	DB	023H
	DB	094H
	DB	082H
	DB	08dH
	DB	06aH
	DB	080H
	DB	047H
	DB	0cH
	DB	09H
	DB	02fH
	DB	05bH
	DB	0a4H
	DB	013H
	DB	0c3H
	DB	037H
	DB	08fH
	DB	0a6H
	DB	05H
	DB	042H
	DB	055H
	DB	0c6H
	DB	0f9H
	DB	0dfH
	DB	044H
	DB	095H
	DB	086H
	DB	02bH
	DB	0bbH
	DB	032H
	DB	087H
	DB	068H
	DB	01fH
	DB	093H
	DB	01bH
	DB	068H
	DB	07cH
	DB	088H
	DB	08aH
	DB	0bfH
	DB	084H
	DB	04dH
	DB	0fcH
	DB	08fH
	DB	0c2H
	DB	083H
	DB	031H
	DB	0e5H
	DB	079H
	DB	092H
	DB	08cH
	DB	0d1H
	DB	02bH
	DB	0d2H
	DB	039H
	DB	0aH
	DB	0e1H
	DB	023H
	DB	0cfH
	DB	03H
	DB	081H
	DB	08dH
	DB	014H
	DB	0deH
	DB	0ddH
	DB	0e5H
	DB	0c0H
	DB	0c2H
	DB	04cH
	DB	08aH
	DB	0b0H
	DB	018H
	DB	0bfH
	DB	0caH
	DB	075H
	DB	0caH
	DB	09H
	DB	06fH
	DB	02dH
	DB	053H
	DB	01fH
	DB	03dH
	DB	016H
	DB	019H
	DB	0e7H
	DB	085H
	DB	0f1H
	DB	0adH
	DB	0a4H
	DB	037H
	DB	0caH
	DB	0b9H
	DB	02eH
	DB	098H
	DB	05H
	DB	058H
	DB	0b3H
	DB	0dcH
	DB	0e1H
	DB	047H
	DB	04aH
	DB	0fbH
	DB	075H
	DB	0bfH
	DB	0edH
	DB	0bfH
	DB	08fH
	DB	0f5H
	DB	04cH
	DB	0b2H
	DB	061H
	DB	08eH
	DB	02H
	DB	044H
	DB	0c9H
	DB	0acH
	DB	0dH
	DB	03cH
	DB	066H
	DB	0fbH
	DB	051H
	DB	059H
	DB	08cH
	DB	0d2H
	DB	0dbH
	DB	011H
	DB	0f9H
	DB	0beH
	DB	039H
	DB	079H
	DB	01aH
	DB	0beH
	DB	044H
	DB	07cH
	DB	063H
	DB	09H
	DB	04fH
	DB	07cH
	DB	045H
	DB	03bH
	DB	07fH
	DB	0f8H
	DB	07cH
	DB	0b5H
	DB	0bbH
	DB	036H
	DB	0b7H
	DB	0c7H
	DB	09eH
	DB	0fbH
	DB	08H
	DB	072H
	DB	0d1H
	DB	070H
	DB	058H
	DB	0b8H
	DB	03bH
	DB	015H
	DB	0abH
	DB	08H
	DB	066H
	DB	0adH
	DB	08aH
	DB	058H
	DB	065H
	DB	06cH
	DB	05aH
	DB	07eH
	DB	020H
	DB	0dbH
	DB	0dfH
	DB	030H
	DB	08bH
	DB	024H
	DB	061H
	DB	0d9H
	DB	07cH
	DB	0eH
	DB	0c0H
	DB	02H
	DB	04aH
	DB	027H
	DB	015H
	DB	05H
	DB	052H
	DB	049H
	DB	0cfH
	DB	03bH
	DB	047H
	DB	08dH
	DB	0ddH
	DB	047H
	DB	040H
	DB	0deH
	DB	065H
	DB	04fH
	DB	075H
	DB	0caH
	DB	068H
	DB	06eH
	DB	0dH
	DB	073H
	DB	045H
	DB	0c6H
	DB	09eH
	DB	0d5H
	DB	0cH
	DB	0dcH
	DB	02aH
	DB	08bH
	DB	033H
	DB	02bH
	DB	01fH
	DB	088H
	DB	024H
	DB	010H
	DB	08aH
	DB	0c9H
	DB	037H
	DB	0ebH
	DB	05H
	DB	05H
	DB	085H
	DB	060H
	DB	08eH
	DB	0e7H
	DB	034H
	DB	09H
	DB	07fH
	DB	0c0H
	DB	090H
	DB	054H
	DB	0fbH
	DB	0ffH
	DB	089H
	DB	0eeH
	DB	0aeH
	DB	0eaH
	DB	079H
	DB	01fH
	DB	04aH
	DB	07aH
	DB	0b1H
	DB	0f9H
	DB	086H
	DB	082H
	DB	094H
	DB	0a4H
	DB	0f9H
	DB	0e2H
	DB	07bH
	DB	042H
	DB	0afH
	DB	081H
	DB	00H
	DB	0cbH
	DB	09dH
	DB	059H
	DB	0ceH
	DB	0f9H
	DB	064H
	DB	058H
	DB	03H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	0e3H
	DB	087H
	DB	0aaH
	DB	0a5H
	DB	08bH
	DB	0a4H
	DB	083H
	DB	0afH
	DB	0a7H
	DB	0e8H
	DB	0ebH
	DB	046H
	DB	097H
	DB	078H
	DB	031H
	DB	07eH
	DB	0cfH
	DB	04cH
	DB	0f5H
	DB	073H
	DB	0aaH
	DB	09dH
	DB	04eH
	DB	0acH
	DB	023H
	DB	0f2H
	DB	0cdH
	DB	0f9H
	DB	014H
	DB	0e4H
	DB	0e2H
	DB	00H
	DB	0a8H
	DB	0b4H
	DB	090H
	DB	0e4H
	DB	02eH
	DB	0e6H
	DB	046H
	DB	080H
	DB	02dH
	DB	0c6H
	DB	0eeH
	DB	02bH
	DB	047H
	DB	01bH
	DB	027H
	DB	081H
	DB	095H
	DB	0d6H
	DB	09H
	DB	018H
	DB	0ecH
	DB	0ecH
	DB	0b4H
	DB	04bH
	DB	0f7H
	DB	099H
	DB	066H
	DB	0f8H
	DB	03fH
	DB	0abH
	DB	0a0H
	DB	049H
	DB	092H
	DB	098H
	DB	0ebH
	DB	0c6H
	DB	099H
	DB	0c0H
	DB	0c8H
	DB	063H
	DB	047H
	DB	015H
	DB	0a3H
	DB	020H
	DB	0bbH
	DB	04fH
	DB	07H
	DB	05dH
	DB	062H
	DB	02eH
	DB	074H
	DB	0c8H
	DB	0c9H
	DB	032H
	DB	00H
	DB	04fH
	DB	025H
	DB	0b4H
	DB	01eH
	DB	036H
	DB	010H
	DB	025H
	DB	0b5H
	DB	0a8H
	DB	078H
	DB	015H
	DB	039H
	DB	01fH
	DB	061H
	DB	08H
	DB	0fcH
	DB	04aH
	DB	0faH
	DB	06aH
	DB	05H
	DB	0d9H
	DB	030H
	DB	03cH
	DB	06bH
	DB	0a6H
	DB	08aH
	DB	012H
	DB	08aH
	DB	055H
	DB	070H
	DB	05dH
	DB	041H
	DB	059H
	DB	085H
	DB	083H
	DB	02fH
	DB	0deH
	DB	0aaH
	DB	0e6H
	DB	0c8H
	DB	0e1H
	DB	091H
	DB	010H
	DB	0e8H
	DB	04dH
	DB	01bH
	DB	01fH
	DB	019H
	DB	09aH
	DB	026H
	DB	092H
	DB	011H
	DB	09eH
	DB	0dcH
	DB	096H
	DB	013H
	DB	026H
	DB	058H
	DB	0f0H
	DB	09dH
	DB	0a7H
	DB	0c6H
	DB	023H
	DB	0efH
	DB	0ceH
	DB	0c7H
	DB	012H
	DB	053H
	DB	07aH
	DB	03dH
	DB	094H
	DB	0c0H
	DB	0bfH
	DB	05dH
	DB	07eH
	DB	035H
	DB	02eH
	DB	0c9H
	DB	04aH
	DB	0e5H
	DB	079H
	DB	07fH
	DB	0dbH
	DB	037H
	DB	07dH
	DB	0c1H
	DB	055H
	DB	011H
	DB	050H
	DB	072H
	DB	01aH
	DB	0dfH
	DB	015H
	DB	0bdH
	DB	026H
	DB	0a8H
	DB	0efH
	DB	0c2H
	DB	0fcH
	DB	0aaH
	DB	0d5H
	DB	068H
	DB	081H
	DB	0faH
	DB	09eH
	DB	062H
	DB	046H
	DB	02cH
	DB	028H
	DB	0f3H
	DB	0aH
	DB	0e1H
	DB	0ceH
	DB	0acH
	DB	0a9H
	DB	03cH
	DB	034H
	DB	05cH
	DB	0f2H
	DB	043H
	DB	0b7H
	DB	03fH
	DB	054H
	DB	02eH
	DB	020H
	DB	074H
	DB	0a7H
	DB	05H
	DB	0bdH
	DB	026H
	DB	043H
	DB	0bbH
	DB	09fH
	DB	07cH
	DB	0c7H
	DB	09bH
	DB	0b6H
	DB	0e7H
	DB	09H
	DB	01eH
	DB	0a6H
	DB	0e2H
	DB	032H
	DB	0dfH
	DB	0fH
	DB	09aH
	DB	0d0H
	DB	0d6H
	DB	0cfH
	DB	050H
	DB	023H
	DB	027H
	DB	087H
	DB	06dH
	DB	082H
	DB	020H
	DB	07aH
	DB	0bfH
	DB	021H
	DB	015H
	DB	0cdH
	DB	0acH
	DB	0f6H
	DB	0d5H
	DB	0a4H
	DB	08fH
	DB	06cH
	DB	018H
	DB	079H
	DB	0a6H
	DB	05bH
	DB	011H
	DB	05fH
	DB	0fH
	DB	08bH
	DB	03cH
	DB	0b3H
	DB	0c5H
	DB	09dH
	DB	015H
	DB	0ddH
	DB	08cH
	DB	076H
	DB	09bH
	DB	0c0H
	DB	014H
	DB	079H
	DB	05aH
	DB	018H
	DB	037H
	DB	0f3H
	DB	090H
	DB	01bH
	DB	058H
	DB	045H
	DB	0ebH
	DB	049H
	DB	01aH
	DB	0dfH
	DB	0efH
	DB	0e0H
	DB	097H
	DB	0b1H
	DB	0faH
	DB	030H
	DB	0a1H
	DB	02fH
	DB	0c1H
	DB	0f6H
	DB	05bH
	DB	0a2H
	DB	029H
	DB	05H
	DB	03H
	DB	015H
	DB	039H
	DB	097H
	DB	01aH
	DB	010H
	DB	0f2H
	DB	0f3H
	DB	06cH
	DB	032H
	DB	01bH
	DB	0b5H
	DB	013H
	DB	031H
	DB	0cdH
	DB	0efH
	DB	0b3H
	DB	09eH
	DB	039H
	DB	064H
	DB	0c7H
	DB	0efH
	DB	07H
	DB	099H
	DB	094H
	DB	0f5H
	DB	0b6H
	DB	09bH
	DB	02eH
	DB	0ddH
	DB	083H
	DB	0a7H
	DB	01eH
	DB	0f5H
	DB	049H
	DB	097H
	DB	01eH
	DB	0e9H
	DB	03fH
	DB	044H
	DB	0eaH
	DB	0c3H
	DB	093H
	DB	08fH
	DB	0cdH
	DB	0d6H
	DB	01dH
	DB	01H
	DB	0faH
	DB	071H
	DB	079H
	DB	09dH
	DB	0a3H
	DB	0a8H
	DB	09H
	DB	01cH
	DB	04cH
	DB	048H
	DB	0aaH
	DB	09eH
	DB	0d2H
	DB	063H
	DB	0ffH
	DB	07H
	DB	049H
	DB	0dfH
	DB	095H
	DB	0d4H
	DB	04fH
	DB	0efH
	DB	06aH
	DB	0bH
	DB	0b5H
	DB	078H
	DB	0ecH
	DB	069H
	DB	045H
	DB	06aH
	DB	0a5H
	DB	040H
	DB	08aH
	DB	0e3H
	DB	02cH
	DB	07aH
	DB	0f0H
	DB	08aH
	DB	0d7H
	DB	0baH
	DB	089H
	DB	021H
	DB	028H
	DB	07eH
	DB	03bH
	DB	0beH
	DB	0e3H
	DB	01bH
	DB	076H
	DB	07bH
	DB	0e0H
	DB	06aH
	DB	0eH
	DB	070H
	DB	05cH
	DB	086H
	DB	04aH
	DB	076H
	DB	091H
	DB	037H
	DB	0dfH
	DB	028H
	DB	029H
	DB	022H
	DB	083H
	DB	0eaH
	DB	081H
	DB	0a2H
	DB	048H
	DB	02H
	DB	041H
	DB	0b4H
	DB	04dH
	DB	099H
	DB	021H
	DB	0cdH
	DB	0beH
	DB	0c1H
	DB	0bcH
	DB	028H
	DB	0dcH
	DB	01fH
	DB	0daH
	DB	011H
	DB	04bH
	DB	0d8H
	DB	0e5H
	DB	021H
	DB	07aH
	DB	0c9H
	DB	0d8H
	DB	0ebH
	DB	0afH
	DB	0a7H
	DB	020H
	DB	0e9H
	DB	0daH
	DB	04fH
	DB	09aH
	DB	0ceH
	DB	023H
	DB	01cH
	DB	0c9H
	DB	049H
	DB	0e5H
	DB	0b9H
	DB	06fH
	DB	0e7H
	DB	06fH
	DB	0fcH
	DB	021H
	DB	06H
	DB	03fH
	DB	0ddH
	DB	0c8H
	DB	03aH
	DB	06bH
	DB	086H
	DB	079H
	DB	0c0H
	DB	0dH
	DB	035H
	DB	0e0H
	DB	095H
	DB	076H
	DB	0a8H
	DB	075H
	DB	030H
	DB	05bH
	DB	0edH
	DB	05fH
	DB	036H
	DB	0edH
	DB	024H
	DB	02cH
	DB	089H
	DB	00H
	DB	0ddH
	DB	01fH
	DB	0a9H
	DB	065H
	DB	0bcH
	DB	095H
	DB	0dH
	DB	0fcH
	DB	0e0H
	DB	09bH
	DB	013H
	DB	022H
	DB	063H
	DB	0a1H
	DB	0eeH
	DB	0f5H
	DB	02dH
	DB	0d6H
	DB	088H
	DB	08cH
	DB	030H
	DB	09fH
	DB	05aH
	DB	07dH
	DB	071H
	DB	028H
	DB	026H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	0bfH
	DB	053H
	DB	0d2H
	DB	0daH
	DB	0deH
	DB	078H
	DB	0e8H
	DB	022H
	DB	0a4H
	DB	0d9H
	DB	049H
	DB	0a9H
	DB	0bcH
	DB	067H
	DB	066H
	DB	0b0H
	DB	01bH
	DB	06H
	DB	0a8H
	DB	0efH
	DB	070H
	DB	0d2H
	DB	067H
	DB	048H
	DB	0c6H
	DB	0a7H
	DB	0fcH
	DB	036H
	DB	0d8H
	DB	0aH
	DB	0e4H
	DB	0c5H
	DB	052H
	DB	0fH
	DB	07cH
	DB	04aH
	DB	0b0H
	DB	0acH
	DB	085H
	DB	044H
	DB	042H
	DB	04fH
	DB	0a4H
	DB	05H
	DB	016H
	DB	02fH
	DB	0efH
	DB	05aH
	DB	06bH
	DB	07fH
	DB	022H
	DB	094H
	DB	098H
	DB	06H
	DB	036H
	DB	018H
	DB	0d3H
	DB	09fH
	DB	00H
	DB	03H
	DB	0cbH
	DB	05fH
	DB	0b8H
	DB	0d1H
	DB	0c8H
	DB	06bH
	DB	064H
	DB	034H
	DB	097H
	DB	0daH
	DB	01fH
	DB	0f9H
	DB	045H
	DB	0c8H
	DB	0d3H
	DB	0beH
	DB	0deH
	DB	0caH
	DB	04fH
	DB	047H
	DB	097H
	DB	02H
	DB	0a7H
	DB	0a7H
	DB	035H
	DB	0f0H
	DB	043H
	DB	0ddH
	DB	0b1H
	DB	0d6H
	DB	0aaH
	DB	0adH
	DB	0e3H
	DB	0c4H
	DB	0a0H
	DB	0acH
	DB	07cH
	DB	0a7H
	DB	0f3H
	DB	0faH
	DB	052H
	DB	079H
	DB	0beH
	DB	0f5H
	DB	06fH
	DB	082H
	DB	0cdH
	DB	07aH
	DB	02fH
	DB	038H
	DB	067H
	DB	02eH
	DB	082H
	DB	048H
	DB	014H
	DB	0e1H
	DB	07H
	DB	00H
	DB	030H
	DB	0aH
	DB	05H
	DB	05eH
	DB	016H
	DB	030H
	DB	0b8H
	DB	0f1H
	DB	0cbH
	DB	0eH
	DB	091H
	DB	09fH
	DB	05eH
	DB	094H
	DB	020H
	DB	010H
	DB	0a4H
	DB	016H
	DB	0e2H
	DB	0bfH
	DB	048H
	DB	0cbH
	DB	046H
	DB	099H
	DB	03dH
	DB	03cH
	DB	0b6H
	DB	0a5H
	DB	01cH
	DB	019H
	DB	0baH
	DB	0cfH
	DB	086H
	DB	047H
	DB	085H
	DB	0a0H
	DB	0bH
	DB	0c2H
	DB	0ecH
	DB	0ffH
	DB	015H
	DB	0d3H
	DB	050H
	DB	087H
	DB	05bH
	DB	024H
	DB	06eH
	DB	0d5H
	DB	03eH
	DB	068H
	DB	0beH
	DB	06fH
	DB	055H
	DB	0bdH
	DB	07eH
	DB	05H
	DB	0cfH
	DB	0c2H
	DB	0b2H
	DB	0edH
	DB	064H
	DB	032H
	DB	019H
	DB	08aH
	DB	064H
	DB	044H
	DB	0b6H
	DB	0d8H
	DB	0c2H
	DB	047H
	DB	0faH
	DB	0b9H
	DB	041H
	DB	0f5H
	DB	069H
	DB	076H
	DB	08bH
	DB	05cH
	DB	042H
	DB	093H
	DB	066H
	DB	0f1H
	DB	0d3H
	DB	0f0H
	DB	0fH
	DB	03H
	DB	045H
	DB	0b9H
	DB	061H
	DB	023H
	DB	0d5H
	DB	062H
	DB	04H
	DB	0c0H
	DB	01cH
	DB	063H
	DB	0b2H
	DB	02cH
	DB	0e7H
	DB	08bH
	DB	0afH
	DB	011H
	DB	06eH
	DB	052H
	DB	05eH
	DB	0d9H
	DB	0fH
	DB	0deH
	DB	0a3H
	DB	09fH
	DB	0a4H
	DB	069H
	DB	049H
	DB	04dH
	DB	038H
	DB	066H
	DB	0c3H
	DB	01eH
	DB	05H
	DB	0f2H
	DB	095H
	DB	0ffH
	DB	021H
	DB	0feH
	DB	0a8H
	DB	0d4H
	DB	0e6H
	DB	0e1H
	DB	03dH
	DB	067H
	DB	0e4H
	DB	07cH
	DB	0e7H
	DB	022H
	DB	0e9H
	DB	069H
	DB	08aH
	DB	01cH
	DB	010H
	DB	048H
	DB	0d6H
	DB	08eH
	DB	0bcH
	DB	0deH
	DB	076H
	DB	0b8H
	DB	06fH
	DB	0cfH
	DB	097H
	DB	06eH
	DB	0abH
	DB	08aH
	DB	0a9H
	DB	079H
	DB	02H
	DB	068H
	DB	0b7H
	DB	06H
	DB	08eH
	DB	01H
	DB	07aH
	DB	08bH
	DB	09bH
	DB	074H
	DB	094H
	DB	09H
	DB	051H
	DB	04fH
	DB	010H
	DB	053H
	DB	02H
	DB	07fH
	DB	0d1H
	DB	06cH
	DB	037H
	DB	086H
	DB	0eaH
	DB	01bH
	DB	0acH
	DB	05fH
	DB	015H
	DB	0cbH
	DB	079H
	DB	071H
	DB	01eH
	DB	0e2H
	DB	0abH
	DB	0e8H
	DB	02fH
	DB	05cH
	DB	0f8H
	DB	0b1H
	DB	03aH
	DB	0e7H
	DB	030H
	DB	030H
	DB	0efH
	DB	05bH
	DB	09eH
	DB	044H
	DB	057H
	DB	0e7H
	DB	05dH
	DB	013H
	DB	04H
	DB	0f9H
	DB	088H
	DB	0d6H
	DB	02dH
	DB	0d6H
	DB	0fcH
	DB	04bH
	DB	094H
	DB	0edH
	DB	038H
	DB	0baH
	DB	083H
	DB	01dH
	DB	0a4H
	DB	0b7H
	DB	063H
	DB	049H
	DB	071H
	DB	0b6H
	DB	0cdH
	DB	08eH
	DB	0c3H
	DB	025H
	DB	0d9H
	DB	0c6H
	DB	01cH
	DB	00H
	DB	0f1H
	DB	0dfH
	DB	073H
	DB	062H
	DB	07eH
	DB	0d3H
	DB	074H
	DB	05aH
	DB	05eH
	DB	084H
	DB	089H
	DB	0f3H
	DB	0a9H
	DB	05cH
	DB	069H
	DB	063H
	DB	09cH
	DB	032H
	DB	0cdH
	DB	06eH
	DB	01dH
	DB	053H
	DB	07aH
	DB	085H
	DB	0f7H
	DB	05cH
	DB	0c8H
	DB	044H
	DB	072H
	DB	06eH
	DB	08aH
	DB	072H
	DB	0fcH
	DB	00H
	DB	077H
	DB	0adH
	DB	022H
	DB	00H
	DB	0fH
	DB	01dH
	DB	050H
	DB	078H
	DB	0f6H
	DB	0b8H
	DB	066H
	DB	031H
	DB	08cH
	DB	066H
	DB	08fH
	DB	01aH
	DB	0d0H
	DB	03dH
	DB	05aH
	DB	05fH
	DB	0ceH
	DB	0d5H
	DB	021H
	DB	09fH
	DB	02eH
	DB	0abH
	DB	0bdH
	DB	0aH
	DB	0a5H
	DB	0c0H
	DB	0f4H
	DB	060H
	DB	0d1H
	DB	083H
	DB	0f0H
	DB	044H
	DB	04H
	DB	0a0H
	DB	0d6H
	DB	0f4H
	DB	069H
	DB	055H
	DB	08eH
	DB	081H
	DB	0faH
	DB	0b2H
	DB	04aH
	DB	016H
	DB	079H
	DB	05H
	DB	0abH
	DB	04cH
	DB	078H
	DB	078H
	DB	050H
	DB	02aH
	DB	0d3H
	DB	0e3H
	DB	08fH
	DB	0dbH
	DB	0e6H
	DB	02aH
	DB	041H
	DB	055H
	DB	06cH
	DB	0ecH
	DB	037H
	DB	032H
	DB	057H
	DB	059H
	DB	053H
	DB	03cH
	DB	0e8H
	DB	0f2H
	DB	05fH
	DB	036H
	DB	07cH
	DB	087H
	DB	0bbH
	DB	055H
	DB	078H
	DB	0d6H
	DB	067H
	DB	0aeH
	DB	093H
	DB	0f9H
	DB	0e2H
	DB	0fdH
	DB	099H
	DB	0bcH
	DB	0bcH
	DB	05fH
	DB	02fH
	DB	0bbH
	DB	0a8H
	DB	08cH
	DB	0f6H
	DB	051H
	DB	061H
	DB	039H
	DB	042H
	DB	0fH
	DB	0cfH
	DB	0f3H
	DB	0b7H
	DB	036H
	DB	01dH
	DB	086H
	DB	032H
	DB	02cH
	DB	04bH
	DB	0d8H
	DB	04cH
	DB	082H
	DB	0f3H
	DB	035H
	DB	0abH
	DB	0b1H
	DB	052H
	DB	0c4H
	DB	0a9H
	DB	034H
	DB	011H
	DB	037H
	DB	03aH
	DB	0aaH
	DB	082H
	DB	020H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	064H
	DB	049H
	DB	07eH
	DB	05aH
	DB	083H
	DB	01eH
	DB	04aH
	DB	093H
	DB	02cH
	DB	09H
	DB	0beH
	DB	03eH
	DB	053H
	DB	093H
	DB	037H
	DB	06dH
	DB	0aaH
	DB	059H
	DB	095H
	DB	048H
	DB	0b8H
	DB	016H
	DB	03H
	DB	01dH
	DB	022H
	DB	04bH
	DB	0bfH
	DB	050H
	DB	0a8H
	DB	018H
	DB	0edH
	DB	023H
	DB	050H
	DB	0eaH
	DB	0e7H
	DB	0e9H
	DB	060H
	DB	087H
	DB	0c8H
	DB	0a0H
	DB	0dbH
	DB	051H
	DB	0adH
	DB	029H
	DB	0bH
	DB	0d0H
	DB	0cH
	DB	01aH
	DB	0c1H
	DB	062H
	DB	08H
	DB	057H
	DB	063H
	DB	05bH
	DB	0f2H
	DB	046H
	DB	0c1H
	DB	076H
	DB	0abH
	DB	046H
	DB	03bH
	DB	0e3H
	DB	0bH
	DB	080H
	DB	08dH
	DB	0a5H
	DB	048H
	DB	08H
	DB	01aH
	DB	0c8H
	DB	047H
	DB	0b1H
	DB	058H
	DB	0e1H
	DB	026H
	DB	04bH
	DB	0e2H
	DB	05bH
	DB	0b0H
	DB	091H
	DB	0bH
	DB	0bcH
	DB	092H
	DB	064H
	DB	071H
	DB	08H
	DB	08H
	DB	094H
	DB	015H
	DB	0d4H
	DB	05fH
	DB	0abH
	DB	01bH
	DB	03dH
	DB	026H
	DB	04H
	DB	0e8H
	DB	0a8H
	DB	0efH
	DB	0f1H
	DB	0aeH
	DB	040H
	DB	020H
	DB	0cfH
	DB	0a3H
	DB	099H
	DB	036H
	DB	0b6H
	DB	068H
	DB	027H
	DB	0b2H
	DB	03fH
	DB	037H
	DB	01bH
	DB	092H
	DB	020H
	DB	0bH
	DB	0e9H
	DB	02H
	DB	051H
	DB	0e6H
	DB	0d7H
	DB	03cH
	DB	05fH
	DB	086H
	DB	0deH
	DB	05fH
	DB	0d4H
	DB	0a9H
	DB	050H
	DB	078H
	DB	019H
	DB	033H
	DB	0d7H
	DB	09aH
	DB	028H
	DB	027H
	DB	02bH
	DB	078H
	DB	02aH
	DB	02eH
	DB	0c3H
	DB	013H
	DB	0efH
	DB	0dfH
	DB	0ccH
	DB	06H
	DB	028H
	DB	0f4H
	DB	03dH
	DB	074H
	DB	04cH
	DB	02dH
	DB	0c2H
	DB	0ffH
	DB	03dH
	DB	0cbH
	DB	066H
	DB	099H
	DB	09bH
	DB	050H
	DB	0c7H
	DB	0caH
	DB	089H
	DB	05bH
	DB	0cH
	DB	064H
	DB	079H
	DB	01eH
	DB	0eaH
	DB	0a5H
	DB	0f2H
	DB	094H
	DB	099H
	DB	0fbH
	DB	01cH
	DB	02H
	DB	06fH
	DB	084H
	DB	0ceH
	DB	05bH
	DB	05cH
	DB	072H
	DB	0baH
	DB	010H
	DB	083H
	DB	0cdH
	DB	0dbH
	DB	05cH
	DB	0e4H
	DB	054H
	DB	034H
	DB	063H
	DB	016H
	DB	065H
	DB	0c3H
	DB	033H
	DB	0b6H
	DB	0bH
	DB	011H
	DB	059H
	DB	03fH
	DB	0b2H
	DB	053H
	DB	0c5H
	DB	017H
	DB	09aH
	DB	02cH
	DB	08dH
	DB	0b8H
	DB	013H
	DB	078H
	DB	02aH
	DB	00H
	DB	048H
	DB	056H
	DB	0a1H
	DB	065H
	DB	030H
	DB	011H
	DB	0e9H
	DB	03fH
	DB	0b6H
	DB	0d8H
	DB	076H
	DB	0c1H
	DB	083H
	DB	066H
	DB	0ddH
	DB	086H
	DB	083H
	DB	0f5H
	DB	034H
	DB	012H
	DB	0c0H
	DB	0c1H
	DB	080H
	DB	0f9H
	DB	0c8H
	DB	048H
	DB	059H
	DB	02dH
	DB	059H
	DB	03fH
	DB	086H
	DB	09H
	DB	0caH
	DB	073H
	DB	063H
	DB	017H
	DB	0d3H
	DB	056H
	DB	0e1H
	DB	03eH
	DB	02bH
	DB	0ffH
	DB	03aH
	DB	09fH
	DB	059H
	DB	0cdH
	DB	09aH
	DB	0ebH
	DB	019H
	DB	0cdH
	DB	048H
	DB	025H
	DB	093H
	DB	0d8H
	DB	0c4H
	DB	061H
	DB	028H
	DB	0bbH
	DB	032H
	DB	042H
	DB	03bH
	DB	037H
	DB	0a9H
	DB	0adH
	DB	0fbH
	DB	048H
	DB	02bH
	DB	099H
	DB	045H
	DB	03fH
	DB	0beH
	DB	025H
	DB	0a4H
	DB	01bH
	DB	0f6H
	DB	0feH
	DB	0b4H
	DB	0aaH
	DB	0bH
	DB	0efH
	DB	05eH
	DB	0d2H
	DB	04bH
	DB	0f7H
	DB	03cH
	DB	076H
	DB	029H
	DB	078H
	DB	02H
	DB	054H
	DB	082H
	DB	0c1H
	DB	031H
	DB	015H
	DB	0e4H
	DB	01H
	DB	05aH
	DB	0acH
	DB	099H
	DB	02eH
	DB	056H
	DB	013H
	DB	0a3H
	DB	0b5H
	DB	0c2H
	DB	0f6H
	DB	085H
	DB	0b8H
	DB	047H
	DB	095H
	DB	0cbH
	DB	06eH
	DB	09bH
	DB	026H
	DB	056H
	DB	0d8H
	DB	0c8H
	DB	081H
	DB	057H
	DB	0e5H
	DB	02cH
	DB	042H
	DB	0f9H
	DB	078H
	DB	0d8H
	DB	063H
	DB	04cH
	DB	043H
	DB	0d0H
	DB	06fH
	DB	0eaH
	DB	092H
	DB	08fH
	DB	028H
	DB	022H
	DB	0e4H
	DB	065H
	DB	0aaH
	DB	065H
	DB	076H
	DB	0e9H
	DB	0bfH
	DB	041H
	DB	093H
	DB	084H
	DB	050H
	DB	06cH
	DB	0c3H
	DB	0ceH
	DB	03cH
	DB	054H
	DB	0acH
	DB	01aH
	DB	06fH
	DB	067H
	DB	0dcH
	DB	066H
	DB	0f3H
	DB	0b3H
	DB	01H
	DB	091H
	DB	0e6H
	DB	098H
	DB	038H
	DB	0bH
	DB	0c9H
	DB	099H
	DB	0b0H
	DB	05aH
	DB	0bcH
	DB	0e1H
	DB	09dH
	DB	0c0H
	DB	0c6H
	DB	0dcH
	DB	0c2H
	DB	0ddH
	DB	00H
	DB	01eH
	DB	0c5H
	DB	035H
	DB	0baH
	DB	018H
	DB	0deH
	DB	0b2H
	DB	0dfH
	DB	01aH
	DB	010H
	DB	010H
	DB	023H
	DB	010H
	DB	083H
	DB	018H
	DB	0c7H
	DB	05dH
	DB	0c9H
	DB	086H
	DB	011H
	DB	0a0H
	DB	09dH
	DB	0c4H
	DB	08aH
	DB	0aH
	DB	0cdH
	DB	0ecH
	DB	067H
	DB	06fH
	DB	0abH
	DB	0dfH
	DB	022H
	DB	02fH
	DB	07H
	DB	0e0H
	DB	026H
	DB	0f0H
	DB	059H
	DB	0b6H
	DB	072H
	DB	0b5H
	DB	06eH
	DB	05cH
	DB	0bcH
	DB	08eH
	DB	01dH
	DB	021H
	DB	0bbH
	DB	0d8H
	DB	067H
	DB	0ddH
	DB	092H
	DB	072H
	DB	012H
	DB	05H
	DB	046H
	DB	081H
	DB	0d7H
	DB	0eH
	DB	0a7H
	DB	037H
	DB	013H
	DB	04cH
	DB	0dfH
	DB	0ceH
	DB	093H
	DB	0b6H
	DB	0f8H
	DB	02aH
	DB	0e2H
	DB	024H
	DB	023H
	DB	027H
	DB	04eH
	DB	058H
	DB	0a0H
	DB	082H
	DB	01cH
	DB	0c5H
	DB	050H
	DB	02eH
	DB	02dH
	DB	0aH
	DB	0b4H
	DB	058H
	DB	05eH
	DB	094H
	DB	0deH
	DB	069H
	DB	075H
	DB	0beH
	DB	05eH
	DB	0bH
	DB	04eH
	DB	0fcH
	DB	0e5H
	DB	01cH
	DB	0d3H
	DB	0e7H
	DB	0cH
	DB	025H
	DB	0a1H
	DB	0fbH
	DB	0bbH
	DB	0d6H
	DB	09H
	DB	0d2H
	DB	073H
	DB	0adH
	DB	05bH
	DB	0dH
	DB	059H
	DB	063H
	DB	01cH
	DB	053H
	DB	01fH
	DB	06aH
	DB	0aH
	DB	057H
	DB	0b9H
bf_ecb_vectors DB 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	'N', 0f9H, 097H, 'Ea', 098H, 0ddH, 'x'
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	'Q', 086H, 'o', 0d5H, 0b8H, '^', 0cbH, 08aH
	DB	'0', 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	010H, 00H, 00H, 00H, 00H, 00H, 00H, 01H
	DB	'}', 085H, 'o', 09aH, 'a0c', 0f2H
	DB	011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
	DB	011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
	DB	'$f', 0ddH, 087H, 08bH, 096H, '<', 09dH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
	DB	'a', 0f9H, 0c3H, 080H, '"', 081H, 0b0H, 096H
	DB	011H, 011H, 011H, 011H, 011H, 011H, 011H, 011H
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	'}', 0cH, 0c6H, '0', 0afH, 0daH, 01eH, 0c7H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	'N', 0f9H, 097H, 'Ea', 098H, 0ddH, 'x'
	DB	0feH, 0dcH, 0baH, 098H, 'vT2', 010H
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	0aH, 0ceH, 0abH, 0fH, 0c6H, 0a0H, 0a2H, 08dH
	DB	'|', 0a1H, 010H, 'EJ', 01aH, 'nW'
	DB	01H, 0a1H, 0d6H, 0d0H, '9wgB'
	DB	'Y', 0c6H, 082H, 'E', 0ebH, 05H, '(+'
	DB	01H, '1', 0d9H, 'a', 09dH, 0c1H, '7n'
	DB	'\', 0d5H, 'L', 0a8H, '=', 0efH, 'W', 0daH
	DB	0b1H, 0b8H, 0ccH, 0bH, '%', 0fH, 09H, 0a0H
	DB	07H, 0a1H, 013H, '>J', 0bH, '&', 086H
	DB	02H, 'H', 0d4H, '8', 06H, 0f6H, 'qr'
	DB	017H, '0', 0e5H, 'w', 08bH, 0eaH, 01dH, 0a4H
	DB	'8IgL&', 02H, '1', 09eH
	DB	'QEKX-', 0dfH, 'D', 0aH
	DB	0a2H, '^xV', 0cfH, '&Q', 0ebH
	DB	04H, 0b9H, 015H, 0baH, 'C', 0feH, 0b5H, 0b6H
	DB	'B', 0fdH, 'D0YW', 07fH, 0a2H
	DB	'58', 082H, 0b1H, 09H, 0ceH, 08fH, 01aH
	DB	01H, 013H, 0b9H, 'p', 0fdH, '4', 0f2H, 0ceH
	DB	05H, 09bH, '^', 08H, 'Q', 0cfH, 014H, ':'
	DB	'H', 0f4H, 0d0H, 088H, 'L7', 099H, 018H
	DB	01H, 'p', 0f1H, 'uF', 08fH, 0b5H, 0e6H
	DB	07H, 'V', 0d8H, 0e0H, 'wGa', 0d2H
	DB	'C!', 093H, 0b7H, 089H, 'Q', 0fcH, 098H
	DB	'C)', 07fH, 0adH, '8', 0e3H, 's', 0feH
	DB	'v%', 014H, 0b8H, ')', 0bfH, 'Hj'
	DB	013H, 0f0H, 'AT', 0d6H, 09dH, 01aH, 0e5H
	DB	07H, 0a7H, 013H, 'pE', 0daH, '*', 016H
	DB	';', 0ddH, 011H, 090H, 'I7(', 02H
	DB	'.', 0edH, 0daH, 093H, 0ffH, 0d3H, 09cH, 'y'
	DB	04H, 'h', 091H, 04H, 0c2H, 0fdH, ';/'
	DB	'&', 095H, '_h5', 0afH, '`', 09aH
	DB	0d8H, 087H, 0e0H, '9<-', 0a6H, 0e3H
	DB	'7', 0d0H, 'k', 0b5H, 016H, 0cbH, 'uF'
	DB	016H, 'M^@O''R2'
	DB	'_', 099H, 0d0H, 'O[', 016H, '9i'
	DB	01fH, 08H, '&', 0dH, 01aH, 0c2H, 'F^'
	DB	'k', 05H, 'n', 018H, 'u', 09fH, '\', 0caH
	DB	'J', 05H, 'z;$', 0d3H, 097H, '{'
	DB	'X@#d', 01aH, 0baH, 'av'
	DB	00H, 'K', 0d6H, 0efH, 09H, 017H, '`b'
	DB	'E 1', 0c1H, 0e4H, 0faH, 0daH, 08eH
	DB	02H, 'X', 016H, 016H, 'F)', 0b0H, 07H
	DB	'H', 0dH, '9', 00H, 'n', 0e7H, 'b', 0f2H
	DB	'uU', 0aeH, '9', 0f5H, 09bH, 087H, 0bdH
	DB	'Iy>', 0bcH, 'y', 0b3H, '%', 08fH
	DB	'Cu@', 0c8H, 'i', 08fH, '<', 0faH
	DB	'S', 0c5H, '_', 09cH, 0b4H, 09fH, 0c0H, 019H
	DB	'O', 0b0H, '^', 015H, 015H, 0abH, 's', 0a7H
	DB	07H, '-C', 0a0H, 'w', 07H, 'R', 092H
	DB	'z', 08eH, '{', 0faH, 093H, '~', 089H, 0a3H
	DB	'I', 0e9H, ']mL', 0a2H, ')', 0bfH
	DB	02H, 0feH, 'Uw', 081H, 017H, 0f1H, '*'
	DB	0cfH, 09cH, ']zI', 086H, 0adH, 0b5H
	DB	01H, 083H, 010H, 0dcH, '@', 09bH, '&', 0d6H
	DB	01dH, 09dH, '\P', 018H, 0f7H, '(', 0c2H
	DB	0d1H, 0abH, 0b2H, 090H, 'e', 08bH, 0c7H, 'x'
	DB	01cH, 'X', 07fH, 01cH, 013H, 092H, 'O', 0efH
	DB	'0U2(mo)Z'
	DB	'U', 0cbH, '7t', 0d1H, '>', 0f2H, 01H
	DB	01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	0faH, '4', 0ecH, 'HG', 0b2H, 'h', 0b2H
	DB	01fH, 01fH, 01fH, 01fH, 0eH, 0eH, 0eH, 0eH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	0a7H, 090H, 'yQ', 08H, 0eaH, '<', 0aeH
	DB	0e0H, 0feH, 0e0H, 0feH, 0f1H, 0feH, 0f1H, 0feH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	0c3H, 09eH, 07H, '-', 09fH, 0acH, 'c', 01dH
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	01H, 'I3', 0e0H, 0cdH, 0afH, 0f6H, 0e4H
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	0f2H, 01eH, 09aH, 'w', 0b7H, 01cH, 'I', 0bcH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	'$YF', 088H, 'WT6', 09aH
	DB	0feH, 0dcH, 0baH, 098H, 'vT2', 010H
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	'k\Z', 09cH, ']', 09eH, 0aH, 'Z'
cast_ecb_vectors DB 01H, '#Eg', 012H, '4Vx#Eg', 089H, '4Vx', 09aH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH
	DB	'#', 08bH, 'O', 0e5H, 084H, '~D', 0b2H
aes_ecb_vectors DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	00H
	DB	011H
	DB	022H
	DB	033H
	DB	044H
	DB	055H
	DB	066H
	DB	077H
	DB	088H
	DB	099H
	DB	0aaH
	DB	0bbH
	DB	0ccH
	DB	0ddH
	DB	0eeH
	DB	0ffH
	DB	08eH
	DB	0a2H
	DB	0b7H
	DB	0caH
	DB	051H
	DB	067H
	DB	045H
	DB	0bfH
	DB	0eaH
	DB	0fcH
	DB	049H
	DB	090H
	DB	04bH
	DB	049H
	DB	060H
	DB	089H
serpent_vectors DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	0deH
	DB	026H
	DB	09fH
	DB	0f8H
	DB	033H
	DB	0e4H
	DB	032H
	DB	0b8H
	DB	05bH
	DB	02eH
	DB	088H
	DB	0d2H
	DB	070H
	DB	01cH
	DB	0e7H
	DB	05cH
twofish_vectors DB 0d4H
	DB	03bH
	DB	0b7H
	DB	055H
	DB	06eH
	DB	0a3H
	DB	02eH
	DB	046H
	DB	0f2H
	DB	0a2H
	DB	082H
	DB	0b7H
	DB	0d4H
	DB	05bH
	DB	04eH
	DB	0dH
	DB	057H
	DB	0ffH
	DB	073H
	DB	09dH
	DB	04dH
	DB	0c9H
	DB	02cH
	DB	01bH
	DB	0d7H
	DB	0fcH
	DB	01H
	DB	070H
	DB	0cH
	DB	0c8H
	DB	021H
	DB	06fH
	DB	090H
	DB	0afH
	DB	0e9H
	DB	01bH
	DB	0b2H
	DB	088H
	DB	054H
	DB	04fH
	DB	02cH
	DB	032H
	DB	0dcH
	DB	023H
	DB	09bH
	DB	026H
	DB	035H
	DB	0e6H
	DB	06cH
	DB	0b4H
	DB	056H
	DB	01cH
	DB	040H
	DB	0bfH
	DB	0aH
	DB	097H
	DB	05H
	DB	093H
	DB	01cH
	DB	0b6H
	DB	0d4H
	DB	08H
	DB	0e7H
	DB	0faH
hmac_sha512_test_keys DQ FLAT:??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@
	DQ	FLAT:??_C@_04HDLGGHEL@Jefe?$AA@
	DQ	FLAT:??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@
	DQ	FLAT:??_C@_0BK@LNLLCJNI@?$AB?$AC?$AD?$AE?$AF?$AG?$AH?$AI?7?6?$AL?$AM?$AN?$AO?$AP?$BA?$BB?$BC?$BD?$BE?$BF?$BG?$BH?$BI?$BJ?$AA@
	DQ	FLAT:??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@
	DQ	FLAT:??_C@_0IE@FDPIKKAI@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK@
hmac_sha512_test_data DQ FLAT:??_C@_08BPPJKMC@Hi?5There?$AA@
	DQ	FLAT:??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@
	DQ	FLAT:??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@
	DQ	FLAT:??_C@_0DD@JCGDPDJ@?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M?M@
	DQ	FLAT:??_C@_0DH@HELOGHDO@Test?5Using?5Larger?5Than?5Block?9Siz@
	DQ	FLAT:??_C@_0JJ@PIHOAKB@This?5is?5a?5test?5using?5a?5larger?5th@
hmac_sha512_test_vectors DQ FLAT:??_C@_0EB@NPCMCGAL@?$IH?$KK?$HM?$NO?$KF?oa?$JNO?p?$LE$?$BK?$BNl?$LA?$CDy?t?b?NN?Bxz?P?$LD?$AFE?a?$HM?$NO@
	DQ	FLAT:??_C@_0EB@OCCGLAFJ@?$BGKz?$HL?$PM?x?$BJ?b?c?$JF?$PL?g?$DLV?$OA?$KD?$IH?$LNd?$CC?4?$ID?$BP?V?$BA?8?$AM?W?j?$CF?$AFT@
	DQ	FLAT:??_C@_0EB@KHIOOKPP@?zs?$LA?$AI?$JNV?$KC?$IE?o?$LA?pul?$IJ?$AL?i?$LB?$LF?$NL?$NN?$IO?h?$BK6U?x?$DO3?$LC?8?$JN9@
	DQ	FLAT:??_C@_0EB@LPCMCIMB@?$LA?$LKFV7E?$IMi?$JA?e?$KI?E?v?$BNJ?w?ev?Y?$HP?yK?$IH?9?go?$IAP6?$BO?c?$NL@
	DQ	FLAT:??_C@_0EB@HIMJOCNA@?$IA?$LCBc?G?A?$KD?k?$LH?$BE?$JD?A?$NN?$HL?h?$LE?$JLF?Q?t?$BLJ?n?A?$BC?$BL?$AB7?$ID?x?sR@
	DQ	FLAT:??_C@_0EB@IAGJFOJI@?c?$HLjw?$FN?H?$HN?$LK?$KE?$NP?$KJ?yn?$FO?$DP?$PN?$NO?$LNq?x?$IGr?$IJ?$IG?$FN?u?$KD?9?5?M?ID@
hmac_sha1_test_keys DQ FLAT:??_C@_0GF@PEHFLIKL@PQRSTUVWXYZ?$FL?2?$FN?$FO_?$GAabcdefghijklmno@
	DQ	FLAT:??_C@_0BF@EOMNKBPJ@?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AL?$AA@
	DQ	FLAT:??_C@_04HDLGGHEL@Jefe?$AA@
	DQ	FLAT:??_C@_0BF@GHKGHDBL@?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$KK?$AA@
hmac_sha1_test_data DQ FLAT:??_C@_09OCHOFPMP@Sample?5?$CD3?$AA@
	DQ	FLAT:??_C@_08BPPJKMC@Hi?5There?$AA@
	DQ	FLAT:??_C@_0BN@GJJCPKAL@what?5do?5ya?5want?5for?5nothing?$DP?$AA@
	DQ	FLAT:??_C@_0DD@ODBBAMCC@?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN?$NN@
hmac_sha1_test_vectors DQ FLAT:??_C@_0BF@KOBLBFLL@?$LM?t?$BO?$KL?$IL?$LC?X?$AC?s?P?2?$KP?$HM?$LA?$JC?l?x?Q?$KD?$KK?$AA@
	DQ	FLAT:??_C@_0BF@BDDOKADE@?$LG?$BH1?$IGU?$AFrd?b?$IL?$MA?$LG?$PL7?$IM?$IO?qF?$LO?$AA?$AA@
	DQ	FLAT:??_C@_0BF@NPPNDLAN@?o?$PM?$NPj?e?k?1?$KC?Rt?$BG?U?q?$IE?$NP?$JM?$CF?$JK?$HMy?$AA@
	DQ	FLAT:??_C@_0BF@OJOCDNBL@?$BC?$FNsB?$LJ?$KM?$BB?M?$JB?$KD?$JK?t?$IK?$KB?$HLOc?qu?S?$AA@
hmac_ripemd160_test_keys DQ FLAT:??_C@_0BF@EKEAJOKM@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$AA@
	DQ	FLAT:??_C@_0BF@JFBGCNOI@?$AB?$CDEg?$IJ?$KL?M?o?$PO?$NM?$LK?$JIvT2?$BA?$AA?$BB?$CC3?$AA@
hmac_ripemd160_test_data DQ FLAT:??_C@_0P@ONGHGJEC@message?5digest?$AA@
	DQ	FLAT:??_C@_0FB@JDIKKJCI@12345678901234567890123456789012@
hmac_ripemd160_test_vectors DQ FLAT:??_C@_0BF@HFFLEHPC@?x6b?L?$IN3?$JM?$CC?$HO?$GA?$AP?MclW?RW?$BL?$BM4?$AA@
	DQ	FLAT:??_C@_0BF@PFENIDMG@?$IF?qdp?$DOa?$KG11?$LO?$HOE?$JF?$IO?$AH?$JE?$BC9?$AE?y?$AA@
hmac_whirlpool_test_key DQ FLAT:??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
hmac_whirlpool_test_data DQ FLAT:??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
hmac_whirlpool_test_vectors DQ FLAT:??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@
	ORG $+8
lrw_vectors DB	0f8H
	DB	0d4H
	DB	076H
	DB	0ffH
	DB	0d6H
	DB	046H
	DB	0eeH
	DB	06cH
	DB	023H
	DB	084H
	DB	0cbH
	DB	01cH
	DB	077H
	DB	0d6H
	DB	019H
	DB	05dH
	DB	0feH
	DB	0f1H
	DB	0a9H
	DB	0f3H
	DB	07bH
	DB	0bcH
	DB	08dH
	DB	021H
	DB	0a7H
	DB	09cH
	DB	021H
	DB	0f8H
	DB	0cbH
	DB	090H
	DB	02H
	DB	089H
	DB	0a8H
	DB	045H
	DB	034H
	DB	08eH
	DB	0c8H
	DB	0c5H
	DB	0b5H
	DB	0f1H
	DB	026H
	DB	0f5H
	DB	0eH
	DB	076H
	DB	0feH
	DB	0fdH
	DB	01bH
	DB	01eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	0bdH
	DB	06H
	DB	0b8H
	DB	0e1H
	DB	0dbH
	DB	098H
	DB	089H
	DB	09eH
	DB	0c4H
	DB	098H
	DB	0e4H
	DB	091H
	DB	0cfH
	DB	01cH
	DB	070H
	DB	02bH
	DB	0fbH
	DB	076H
	DB	015H
	DB	0b2H
	DB	03dH
	DB	080H
	DB	089H
	DB	01dH
	DB	0d4H
	DB	070H
	DB	098H
	DB	0bH
	DB	0c7H
	DB	095H
	DB	084H
	DB	0c8H
	DB	0b2H
	DB	0fbH
	DB	064H
	DB	0ceH
	DB	060H
	DB	097H
	DB	087H
	DB	08dH
	DB	017H
	DB	0fcH
	DB	0e4H
	DB	05aH
	DB	049H
	DB	0e8H
	DB	030H
	DB	0b7H
	DB	06eH
	DB	078H
	DB	017H
	DB	0e7H
	DB	02dH
	DB	05eH
	DB	012H
	DB	0d4H
	DB	060H
	DB	064H
	DB	04H
	DB	07aH
	DB	0f1H
	DB	02fH
	DB	09eH
	DB	0cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	05bH
	DB	090H
	DB	08eH
	DB	0c1H
	DB	0abH
	DB	0ddH
	DB	067H
	DB	05fH
	DB	03dH
	DB	069H
	DB	08aH
	DB	095H
	DB	053H
	DB	0c8H
	DB	09cH
	DB	0e5H
?key1@?1??TestSectorBufEncryption@@9@9 DB 027H		; `TestSectorBufEncryption'::`2'::key1
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
PUBLIC	__$ArrayPad$
PUBLIC	test_hmac_whirlpool
;	COMDAT pdata
; File c:\users\public\desktop\projects\ciphershed\src\common\tests.c
pdata	SEGMENT
$pdata$test_hmac_whirlpool DD imagerel $LN4
	DD	imagerel $LN4+122
	DD	imagerel $unwind$test_hmac_whirlpool
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$test_hmac_whirlpool DD 021619H
	DD	0110107H
	DD	imagerel __GSHandlerCheck
	DD	070H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT test_hmac_whirlpool
_TEXT	SEGMENT
digest$ = 48
__$ArrayPad$ = 112
test_hmac_whirlpool PROC				; COMDAT

; 1643 : {

$LN4:
  00000	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
  00007	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000e	48 33 c4	 xor	 rax, rsp
  00011	48 89 44 24 70	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1644 : 	unsigned char digest[WHIRLPOOL_DIGESTSIZE];
; 1645 : 
; 1646 : 	hmac_whirlpool (hmac_whirlpool_test_key, 64, hmac_whirlpool_test_data, (int) strlen (hmac_whirlpool_test_data), digest, WHIRLPOOL_DIGESTSIZE);

  00016	41 b9 38 00 00
	00		 mov	 r9d, 56			; 00000038H
  0001c	48 8d 44 24 30	 lea	 rax, QWORD PTR digest$[rsp]
  00021	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
  0002f	41 8d 51 08	 lea	 edx, QWORD PTR [r9+8]
  00033	c7 44 24 28 40
	00 00 00	 mov	 DWORD PTR [rsp+40], 64	; 00000040H
  0003b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00040	e8 00 00 00 00	 call	 hmac_whirlpool

; 1647 : 	if (memcmp (digest, hmac_whirlpool_test_vectors, WHIRLPOOL_DIGESTSIZE) != 0)

  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@
  0004c	48 8d 4c 24 30	 lea	 rcx, QWORD PTR digest$[rsp]
  00051	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00057	e8 00 00 00 00	 call	 memcmp
  0005c	33 c9		 xor	 ecx, ecx
  0005e	3b c1		 cmp	 eax, ecx
  00060	0f 94 c1	 sete	 cl
  00063	8b c1		 mov	 eax, ecx

; 1648 : 		return FALSE;
; 1649 : 
; 1650 : 	return TRUE;
; 1651 : }

  00065	48 8b 4c 24 70	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0006a	48 33 cc	 xor	 rcx, rsp
  0006d	e8 00 00 00 00	 call	 __security_check_cookie
  00072	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00079	c3		 ret	 0
test_hmac_whirlpool ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	test_hmac_sha1
;	COMDAT pdata
pdata	SEGMENT
$pdata$test_hmac_sha1 DD imagerel $LN13
	DD	imagerel $LN13+250
	DD	imagerel $unwind$test_hmac_sha1
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$test_hmac_sha1 DD 0a2819H
	DD	0f7419H
	DD	0e6419H
	DD	0d5419H
	DD	0c3419H
	DD	0d0159219H
	DD	imagerel __GSHandlerCheck
	DD	048H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT test_hmac_sha1
_TEXT	SEGMENT
digest$29326 = 48
__$ArrayPad$ = 72
test_hmac_sha1 PROC					; COMDAT

; 1605 : {

$LN13:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp
  0000b	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000f	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  00013	41 55		 push	 r13
  00015	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1606 : 	// Deprecated/legacy
; 1607 : 
; 1608 : 	int nTestsPerformed = 0;

  00028	33 db		 xor	 ebx, ebx

; 1609 : 	int i;
; 1610 : 
; 1611 : 	for (i = 0; i < 3; i++)

  0002a	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:__ImageBase
  00031	8b eb		 mov	 ebp, ebx
  00033	48 8b f3	 mov	 rsi, rbx
$LL5@test_hmac_:

; 1612 : 	{
; 1613 : 		char digest[SHA1_DIGESTSIZE];
; 1614 : 		hmac_sha1 (hmac_sha1_test_keys[i], (int) strlen (hmac_sha1_test_keys[i]), hmac_sha1_test_data[i], (int) strlen (hmac_sha1_test_data[i]), digest, SHA1_DIGESTSIZE);

  00036	4e 8b 94 2e 00
	00 00 00	 mov	 r10, QWORD PTR hmac_sha1_test_keys[rsi+r13]
  0003e	4e 8b 84 2e 00
	00 00 00	 mov	 r8, QWORD PTR hmac_sha1_test_data[rsi+r13]
  00046	48 83 c9 ff	 or	 rcx, -1
  0004a	33 c0		 xor	 eax, eax
  0004c	49 8b f8	 mov	 rdi, r8
  0004f	c7 44 24 28 14
	00 00 00	 mov	 DWORD PTR [rsp+40], 20
  00057	f2 ae		 repne scasb
  00059	49 8b fa	 mov	 rdi, r10
  0005c	48 f7 d1	 not	 rcx
  0005f	4c 8d 49 ff	 lea	 r9, QWORD PTR [rcx-1]
  00063	48 83 c9 ff	 or	 rcx, -1
  00067	f2 ae		 repne scasb
  00069	48 8d 44 24 30	 lea	 rax, QWORD PTR digest$29326[rsp]
  0006e	48 f7 d1	 not	 rcx
  00071	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00076	48 8d 51 ff	 lea	 rdx, QWORD PTR [rcx-1]
  0007a	49 8b ca	 mov	 rcx, r10
  0007d	e8 00 00 00 00	 call	 hmac_sha1

; 1615 : 		if (memcmp (digest, hmac_sha1_test_vectors[i], SHA1_DIGESTSIZE) != 0)

  00082	4a 8b 8c 2e 00
	00 00 00	 mov	 rcx, QWORD PTR hmac_sha1_test_vectors[rsi+r13]
  0008a	48 8d 44 24 30	 lea	 rax, QWORD PTR digest$29326[rsp]
  0008f	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00092	48 3b 11	 cmp	 rdx, QWORD PTR [rcx]
  00095	75 16		 jne	 SHORT $LN11@test_hmac_
  00097	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0009b	48 3b 51 08	 cmp	 rdx, QWORD PTR [rcx+8]
  0009f	75 0c		 jne	 SHORT $LN11@test_hmac_
  000a1	8b 50 10	 mov	 edx, DWORD PTR [rax+16]
  000a4	3b 51 10	 cmp	 edx, DWORD PTR [rcx+16]
  000a7	75 04		 jne	 SHORT $LN11@test_hmac_
  000a9	8b c3		 mov	 eax, ebx
  000ab	eb 05		 jmp	 SHORT $LN12@test_hmac_
$LN11@test_hmac_:
  000ad	1b c0		 sbb	 eax, eax
  000af	83 d8 ff	 sbb	 eax, -1
$LN12@test_hmac_:
  000b2	3b c3		 cmp	 eax, ebx
  000b4	75 1a		 jne	 SHORT $LN9@test_hmac_
  000b6	48 83 c6 08	 add	 rsi, 8

; 1617 : 		else
; 1618 : 			nTestsPerformed++;

  000ba	ff c5		 inc	 ebp
  000bc	48 83 fe 18	 cmp	 rsi, 24
  000c0	0f 8c 70 ff ff
	ff		 jl	 $LL5@test_hmac_

; 1619 : 	}
; 1620 : 
; 1621 : 	return (nTestsPerformed == 3);

  000c6	83 fd 03	 cmp	 ebp, 3
  000c9	0f 94 c3	 sete	 bl
  000cc	8b c3		 mov	 eax, ebx
  000ce	eb 02		 jmp	 SHORT $LN6@test_hmac_
$LN9@test_hmac_:

; 1616 : 			return FALSE;

  000d0	33 c0		 xor	 eax, eax
$LN6@test_hmac_:

; 1622 : }

  000d2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000d7	48 33 cc	 xor	 rcx, rsp
  000da	e8 00 00 00 00	 call	 __security_check_cookie
  000df	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  000e4	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  000e9	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  000ee	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]
  000f3	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000f7	41 5d		 pop	 r13
  000f9	c3		 ret	 0
test_hmac_sha1 ENDP
PUBLIC	__$ArrayPad$
PUBLIC	test_hmac_sha512
;	COMDAT pdata
pdata	SEGMENT
$pdata$test_hmac_sha512 DD imagerel $LN11
	DD	imagerel $LN11+229
	DD	imagerel $unwind$test_hmac_sha512
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$test_hmac_sha512 DD 0a2a19H
	DD	016641bH
	DD	015541bH
	DD	014341bH
	DD	0d014f21bH
	DD	07010c012H
	DD	imagerel __GSHandlerCheck
	DD	070H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT test_hmac_sha512
_TEXT	SEGMENT
digest$29315 = 48
__$ArrayPad$ = 112
test_hmac_sha512 PROC					; COMDAT

; 1587 : {

$LN11:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 44 24 70	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1588 : 	unsigned int i;
; 1589 : 	int nTestsPerformed = 0;

  0002a	33 db		 xor	 ebx, ebx

; 1590 : 
; 1591 : 	for (i = 0; i < sizeof (hmac_sha512_test_data) / sizeof(char *); i++)

  0002c	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:__ImageBase
  00033	8b f3		 mov	 esi, ebx
  00035	8b eb		 mov	 ebp, ebx
  00037	4c 8b e3	 mov	 r12, rbx
$LL5@test_hmac_@2:

; 1592 : 	{
; 1593 : 		char digest[SHA512_DIGESTSIZE];
; 1594 : 		hmac_sha512 (hmac_sha512_test_keys[i], (int) strlen (hmac_sha512_test_keys[i]), hmac_sha512_test_data[i], (int) strlen (hmac_sha512_test_data[i]), digest, SHA512_DIGESTSIZE);

  0003a	4f 8b 94 2c 00
	00 00 00	 mov	 r10, QWORD PTR hmac_sha512_test_keys[r12+r13]
  00042	4f 8b 84 2c 00
	00 00 00	 mov	 r8, QWORD PTR hmac_sha512_test_data[r12+r13]
  0004a	48 83 c9 ff	 or	 rcx, -1
  0004e	33 c0		 xor	 eax, eax
  00050	49 8b f8	 mov	 rdi, r8
  00053	c7 44 24 28 40
	00 00 00	 mov	 DWORD PTR [rsp+40], 64	; 00000040H
  0005b	f2 ae		 repne scasb
  0005d	49 8b fa	 mov	 rdi, r10
  00060	48 f7 d1	 not	 rcx
  00063	4c 8d 49 ff	 lea	 r9, QWORD PTR [rcx-1]
  00067	48 83 c9 ff	 or	 rcx, -1
  0006b	f2 ae		 repne scasb
  0006d	48 8d 44 24 30	 lea	 rax, QWORD PTR digest$29315[rsp]
  00072	48 f7 d1	 not	 rcx
  00075	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0007a	48 8d 51 ff	 lea	 rdx, QWORD PTR [rcx-1]
  0007e	49 8b ca	 mov	 rcx, r10
  00081	e8 00 00 00 00	 call	 hmac_sha512

; 1595 : 		if (memcmp (digest, hmac_sha512_test_vectors[i], SHA512_DIGESTSIZE) != 0)

  00086	4b 8b 94 2c 00
	00 00 00	 mov	 rdx, QWORD PTR hmac_sha512_test_vectors[r12+r13]
  0008e	48 8d 4c 24 30	 lea	 rcx, QWORD PTR digest$29315[rsp]
  00093	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00099	e8 00 00 00 00	 call	 memcmp
  0009e	3b c3		 cmp	 eax, ebx
  000a0	75 17		 jne	 SHORT $LN9@test_hmac_@2
  000a2	ff c5		 inc	 ebp

; 1597 : 		else
; 1598 : 			nTestsPerformed++;

  000a4	ff c6		 inc	 esi
  000a6	49 83 c4 08	 add	 r12, 8
  000aa	83 fd 06	 cmp	 ebp, 6
  000ad	72 8b		 jb	 SHORT $LL5@test_hmac_@2

; 1599 : 	}
; 1600 : 
; 1601 : 	return (nTestsPerformed == 6);

  000af	83 fe 06	 cmp	 esi, 6
  000b2	0f 94 c3	 sete	 bl
  000b5	8b c3		 mov	 eax, ebx
  000b7	eb 02		 jmp	 SHORT $LN6@test_hmac_@2
$LN9@test_hmac_@2:

; 1596 : 			return FALSE;

  000b9	33 c0		 xor	 eax, eax
$LN6@test_hmac_@2:

; 1602 : }

  000bb	48 8b 4c 24 70	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000c0	48 33 cc	 xor	 rcx, rsp
  000c3	e8 00 00 00 00	 call	 __security_check_cookie
  000c8	4c 8d 9c 24 80
	00 00 00	 lea	 r11, QWORD PTR [rsp+128]
  000d0	49 8b 5b 20	 mov	 rbx, QWORD PTR [r11+32]
  000d4	49 8b 6b 28	 mov	 rbp, QWORD PTR [r11+40]
  000d8	49 8b 73 30	 mov	 rsi, QWORD PTR [r11+48]
  000dc	49 8b e3	 mov	 rsp, r11
  000df	41 5d		 pop	 r13
  000e1	41 5c		 pop	 r12
  000e3	5f		 pop	 rdi
  000e4	c3		 ret	 0
test_hmac_sha512 ENDP
PUBLIC	__$ArrayPad$
PUBLIC	test_hmac_ripemd160
;	COMDAT pdata
pdata	SEGMENT
$pdata$test_hmac_ripemd160 DD imagerel $LN13
	DD	imagerel $LN13+225
	DD	imagerel $unwind$test_hmac_ripemd160
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$test_hmac_ripemd160 DD 0a2719H
	DD	0106418H
	DD	0f5418H
	DD	0e3418H
	DD	0d0149218H
	DD	07010c012H
	DD	imagerel __GSHandlerCheck
	DD	048H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT test_hmac_ripemd160
_TEXT	SEGMENT
digest$29338 = 48
__$ArrayPad$ = 72
test_hmac_ripemd160 PROC				; COMDAT

; 1625 : {

$LN13:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1626 : 	int nTestsPerformed = 0;

  00027	33 db		 xor	 ebx, ebx

; 1627 : 	unsigned int i;
; 1628 : 
; 1629 : 	for (i = 0; i < sizeof (hmac_ripemd160_test_data) / sizeof(char *); i++)

  00029	4c 8d 2d 00 00
	00 00		 lea	 r13, OFFSET FLAT:__ImageBase
  00030	8b f3		 mov	 esi, ebx
  00032	8b eb		 mov	 ebp, ebx
  00034	4c 8b e3	 mov	 r12, rbx
$LL5@test_hmac_@3:

; 1630 : 	{
; 1631 : 		char digest[RIPEMD160_DIGESTSIZE];
; 1632 : 		hmac_ripemd160 (hmac_ripemd160_test_keys[i], RIPEMD160_DIGESTSIZE, hmac_ripemd160_test_data[i], (int) strlen (hmac_ripemd160_test_data[i]), digest);

  00037	4f 8b 84 2c 00
	00 00 00	 mov	 r8, QWORD PTR hmac_ripemd160_test_data[r12+r13]
  0003f	48 83 c9 ff	 or	 rcx, -1
  00043	33 c0		 xor	 eax, eax
  00045	49 8b f8	 mov	 rdi, r8
  00048	ba 14 00 00 00	 mov	 edx, 20
  0004d	f2 ae		 repne scasb
  0004f	48 8d 44 24 30	 lea	 rax, QWORD PTR digest$29338[rsp]
  00054	48 f7 d1	 not	 rcx
  00057	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005c	4c 8d 49 ff	 lea	 r9, QWORD PTR [rcx-1]
  00060	4b 8b 8c 2c 00
	00 00 00	 mov	 rcx, QWORD PTR hmac_ripemd160_test_keys[r12+r13]
  00068	e8 00 00 00 00	 call	 hmac_ripemd160

; 1633 : 		if (memcmp (digest, hmac_ripemd160_test_vectors[i], RIPEMD160_DIGESTSIZE) != 0)

  0006d	4b 8b 8c 2c 00
	00 00 00	 mov	 rcx, QWORD PTR hmac_ripemd160_test_vectors[r12+r13]
  00075	48 8d 44 24 30	 lea	 rax, QWORD PTR digest$29338[rsp]
  0007a	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0007d	48 3b 11	 cmp	 rdx, QWORD PTR [rcx]
  00080	75 16		 jne	 SHORT $LN11@test_hmac_@3
  00082	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00086	48 3b 51 08	 cmp	 rdx, QWORD PTR [rcx+8]
  0008a	75 0c		 jne	 SHORT $LN11@test_hmac_@3
  0008c	8b 50 10	 mov	 edx, DWORD PTR [rax+16]
  0008f	3b 51 10	 cmp	 edx, DWORD PTR [rcx+16]
  00092	75 04		 jne	 SHORT $LN11@test_hmac_@3
  00094	8b c3		 mov	 eax, ebx
  00096	eb 05		 jmp	 SHORT $LN12@test_hmac_@3
$LN11@test_hmac_@3:
  00098	1b c0		 sbb	 eax, eax
  0009a	83 d8 ff	 sbb	 eax, -1
$LN12@test_hmac_@3:
  0009d	3b c3		 cmp	 eax, ebx
  0009f	75 17		 jne	 SHORT $LN9@test_hmac_@3
  000a1	ff c5		 inc	 ebp

; 1635 : 		else
; 1636 : 			nTestsPerformed++;

  000a3	ff c6		 inc	 esi
  000a5	49 83 c4 08	 add	 r12, 8
  000a9	83 fd 02	 cmp	 ebp, 2
  000ac	72 89		 jb	 SHORT $LL5@test_hmac_@3

; 1637 : 	}
; 1638 : 
; 1639 : 	return (nTestsPerformed == 2);

  000ae	83 fe 02	 cmp	 esi, 2
  000b1	0f 94 c3	 sete	 bl
  000b4	8b c3		 mov	 eax, ebx
  000b6	eb 02		 jmp	 SHORT $LN6@test_hmac_@3
$LN9@test_hmac_@3:

; 1634 : 			return FALSE;

  000b8	33 c0		 xor	 eax, eax
$LN6@test_hmac_@3:

; 1640 : }

  000ba	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000bf	48 33 cc	 xor	 rcx, rsp
  000c2	e8 00 00 00 00	 call	 __security_check_cookie
  000c7	4c 8d 5c 24 50	 lea	 r11, QWORD PTR [rsp+80]
  000cc	49 8b 5b 20	 mov	 rbx, QWORD PTR [r11+32]
  000d0	49 8b 6b 28	 mov	 rbp, QWORD PTR [r11+40]
  000d4	49 8b 73 30	 mov	 rsi, QWORD PTR [r11+48]
  000d8	49 8b e3	 mov	 rsp, r11
  000db	41 5d		 pop	 r13
  000dd	41 5c		 pop	 r12
  000df	5f		 pop	 rdi
  000e0	c3		 ret	 0
test_hmac_ripemd160 ENDP
_TEXT	ENDS
PUBLIC	CipherInit2
;	COMDAT pdata
pdata	SEGMENT
$pdata$CipherInit2 DD imagerel $LN14
	DD	imagerel $LN14+130
	DD	imagerel $unwind$CipherInit2
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CipherInit2 DD 010401H
	DD	06204H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT CipherInit2
_TEXT	SEGMENT
cipher$ = 64
key$ = 72
ks$ = 80
key_len$ = 88
CipherInit2 PROC					; COMDAT

; 534  : {

$LN14:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 535  : 	switch (cipher)

  00004	b8 01 00 00 00	 mov	 eax, 1
  00009	2b c8		 sub	 ecx, eax
  0000b	74 62		 je	 SHORT $LN6@CipherInit@2
  0000d	2b c8		 sub	 ecx, eax
  0000f	74 57		 je	 SHORT $LN4@CipherInit@2
  00011	2b c8		 sub	 ecx, eax
  00013	74 4c		 je	 SHORT $LN2@CipherInit@2
  00015	2b c8		 sub	 ecx, eax
  00017	74 34		 je	 SHORT $LN7@CipherInit@2
  00019	2b c8		 sub	 ecx, eax
  0001b	74 29		 je	 SHORT $LN5@CipherInit@2
  0001d	3b c8		 cmp	 ecx, eax
  0001f	74 1e		 je	 SHORT $LN3@CipherInit@2

; 563  : 
; 564  : 	default:			
; 565  : 		/* Unknown/wrong ID */
; 566  : 		TC_THROW_FATAL_EXCEPTION;

  00021	8d 48 28	 lea	 ecx, QWORD PTR [rax+40]
  00024	45 33 c9	 xor	 r9d, r9d
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	ba 36 02 00 00	 mov	 edx, 566		; 00000236H
  0002f	48 c7 44 24 20
	43 54 00 00	 mov	 QWORD PTR [rsp+32], 21571 ; 00005443H
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx
  0003e	cc		 int	 3
$LN3@CipherInit@2:

; 554  : 
; 555  : 	case TRIPLEDES:
; 556  : 		/* Deprecated/legacy */
; 557  : 		CipherInit(cipher,key,ks);

  0003f	b9 06 00 00 00	 mov	 ecx, 6

; 558  : 		break;

  00044	eb 2b		 jmp	 SHORT $LN13@CipherInit@2
$LN5@CipherInit@2:

; 544  : 		break;
; 545  : 
; 546  : 	case CAST:
; 547  : 		/* Deprecated/legacy */
; 548  : 		CipherInit(cipher,key,ks);

  00046	b9 05 00 00 00	 mov	 ecx, 5

; 549  : 		break;

  0004b	eb 24		 jmp	 SHORT $LN13@CipherInit@2
$LN7@CipherInit@2:

; 536  : 	{
; 537  : 	case BLOWFISH:
; 538  : 		/* Deprecated/legacy */
; 539  : 		BlowfishSetKey (ks, key_len,  key); 

  0004d	4c 8b c2	 mov	 r8, rdx
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:ks_tmp
  00057	41 8b d1	 mov	 edx, r9d
  0005a	e8 00 00 00 00	 call	 BlowfishSetKey

; 540  : 		break;

  0005f	eb 1c		 jmp	 SHORT $LN8@CipherInit@2
$LN2@CipherInit@2:

; 559  : 
; 560  : 	case TWOFISH:
; 561  : 		CipherInit(cipher,key,ks);

  00061	b9 03 00 00 00	 mov	 ecx, 3

; 562  : 		break;

  00066	eb 09		 jmp	 SHORT $LN13@CipherInit@2
$LN4@CipherInit@2:

; 550  : 
; 551  : 	case SERPENT:
; 552  : 		CipherInit(cipher,key,ks);

  00068	b9 02 00 00 00	 mov	 ecx, 2

; 553  : 		break;

  0006d	eb 02		 jmp	 SHORT $LN13@CipherInit@2
$LN6@CipherInit@2:

; 541  : 
; 542  : 	case AES:
; 543  : 		CipherInit(cipher,key,ks);

  0006f	8b c8		 mov	 ecx, eax
$LN13@CipherInit@2:
  00071	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  00078	e8 00 00 00 00	 call	 CipherInit
$LN8@CipherInit@2:

; 567  : 	}
; 568  : }

  0007d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00081	c3		 ret	 0
$LN12@CipherInit@2:
CipherInit2 ENDP
PUBLIC	__$ArrayPad$
PUBLIC	test_pkcs5
;	COMDAT pdata
pdata	SEGMENT
$pdata$test_pkcs5 DD imagerel $LN30
	DD	imagerel $LN30+845
	DD	imagerel $unwind$test_pkcs5
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$test_pkcs5 DD 0d3119H
	DD	02c641fH
	DD	02b541fH
	DD	02a341fH
	DD	024011fH
	DD	0e016f018H
	DD	0c012d014H
	DD	07010H
	DD	imagerel __GSHandlerCheck
	DD	0110H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT test_pkcs5
_TEXT	SEGMENT
dk$ = 64
digest$53111 = 208
digest$53102 = 208
__$ArrayPad$ = 272
test_pkcs5 PROC						; COMDAT

; 1654 : {

$LN30:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 81 ec 20 01
	00 00		 sub	 rsp, 288		; 00000120H
  0001f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00026	48 33 c4	 xor	 rax, rsp
  00029	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1655 : 	char dk[144];
; 1656 : 
; 1657 : 	/* HMAC-SHA-512 tests */
; 1658 : 	if (!test_hmac_sha512())

  00031	33 db		 xor	 ebx, ebx
  00033	4c 8d 3d 00 00
	00 00		 lea	 r15, OFFSET FLAT:__ImageBase
  0003a	44 8d 73 40	 lea	 r14d, QWORD PTR [rbx+64]
  0003e	44 8d 6b 08	 lea	 r13d, QWORD PTR [rbx+8]
  00042	8b f3		 mov	 esi, ebx
  00044	8b eb		 mov	 ebp, ebx
  00046	4c 8b e3	 mov	 r12, rbx
$LL19@test_pkcs5:
  00049	4f 8b 94 3c 00
	00 00 00	 mov	 r10, QWORD PTR hmac_sha512_test_keys[r12+r15]
  00051	4f 8b 84 3c 00
	00 00 00	 mov	 r8, QWORD PTR hmac_sha512_test_data[r12+r15]
  00059	48 83 c9 ff	 or	 rcx, -1
  0005d	33 c0		 xor	 eax, eax
  0005f	49 8b f8	 mov	 rdi, r8
  00062	44 89 74 24 28	 mov	 DWORD PTR [rsp+40], r14d
  00067	f2 ae		 repne scasb
  00069	49 8b fa	 mov	 rdi, r10
  0006c	48 f7 d1	 not	 rcx
  0006f	4c 8d 49 ff	 lea	 r9, QWORD PTR [rcx-1]
  00073	48 83 c9 ff	 or	 rcx, -1
  00077	f2 ae		 repne scasb
  00079	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR digest$53102[rsp]
  00081	48 f7 d1	 not	 rcx
  00084	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00089	48 8d 51 ff	 lea	 rdx, QWORD PTR [rcx-1]
  0008d	49 8b ca	 mov	 rcx, r10
  00090	e8 00 00 00 00	 call	 hmac_sha512
  00095	4b 8b 94 3c 00
	00 00 00	 mov	 rdx, QWORD PTR hmac_sha512_test_vectors[r12+r15]
  0009d	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR digest$53102[rsp]
  000a5	4d 8b c6	 mov	 r8, r14
  000a8	e8 00 00 00 00	 call	 memcmp
  000ad	3b c3		 cmp	 eax, ebx
  000af	0f 85 65 02 00
	00		 jne	 $LN28@test_pkcs5
  000b5	ff c5		 inc	 ebp
  000b7	ff c6		 inc	 esi
  000b9	4d 03 e5	 add	 r12, r13
  000bc	83 fd 06	 cmp	 ebp, 6
  000bf	72 88		 jb	 SHORT $LL19@test_pkcs5
  000c1	83 fe 06	 cmp	 esi, 6
  000c4	8b c3		 mov	 eax, ebx
  000c6	0f 94 c0	 sete	 al
  000c9	3b c3		 cmp	 eax, ebx
  000cb	0f 84 49 02 00
	00		 je	 $LN28@test_pkcs5

; 1660 : 
; 1661 : 	/* HMAC-SHA-1 tests (deprecated/legacy)  */
; 1662 : 	if (test_hmac_sha1() == FALSE)

  000d1	e8 00 00 00 00	 call	 test_hmac_sha1
  000d6	3b c3		 cmp	 eax, ebx

; 1663 : 		return FALSE;

  000d8	0f 84 3c 02 00
	00		 je	 $LN28@test_pkcs5

; 1664 : 
; 1665 : 	/* HMAC-RIPEMD-160 tests */
; 1666 : 	if (test_hmac_ripemd160() == FALSE)

  000de	e8 00 00 00 00	 call	 test_hmac_ripemd160
  000e3	3b c3		 cmp	 eax, ebx

; 1667 : 		return FALSE;

  000e5	0f 84 2f 02 00
	00		 je	 $LN28@test_pkcs5

; 1668 : 
; 1669 : 	/* HMAC-Whirlpool tests */
; 1670 : 	if (test_hmac_whirlpool() == FALSE)

  000eb	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR digest$53111[rsp]
  000f3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
  000fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
  00101	41 b9 38 00 00
	00		 mov	 r9d, 56			; 00000038H
  00107	41 8b d6	 mov	 edx, r14d
  0010a	44 89 74 24 28	 mov	 DWORD PTR [rsp+40], r14d
  0010f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00114	e8 00 00 00 00	 call	 hmac_whirlpool
  00119	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@
  00120	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR digest$53111[rsp]
  00128	4d 8b c6	 mov	 r8, r14
  0012b	e8 00 00 00 00	 call	 memcmp
  00130	3b c3		 cmp	 eax, ebx

; 1671 : 		return FALSE;

  00132	0f 85 e2 01 00
	00		 jne	 $LN28@test_pkcs5

; 1672 : 
; 1673 : 	/* PKCS-5 test 1 with HMAC-SHA-512 used as the PRF */
; 1674 : 	derive_key_sha512 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  00138	be 04 00 00 00	 mov	 esi, 4
  0013d	48 8d 44 24 40	 lea	 rax, QWORD PTR dk$[rsp]
  00142	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  00149	89 74 24 30	 mov	 DWORD PTR [rsp+48], esi
  0014d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00152	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  00159	8d 6e 01	 lea	 ebp, QWORD PTR [rsi+1]
  0015c	44 8b ce	 mov	 r9d, esi
  0015f	4d 8b c4	 mov	 r8, r12
  00162	41 8b d5	 mov	 edx, r13d
  00165	49 8b ce	 mov	 rcx, r14
  00168	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  0016c	e8 00 00 00 00	 call	 derive_key_sha512

; 1675 : 	if (memcmp (dk, "\x13\x64\xae\xf8", 4) != 0)

  00171	8b 54 24 40	 mov	 edx, DWORD PTR dk$[rsp]
  00175	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ??_C@_04KFFKJODL@?$BDd?$KO?x?$AA@FNODOBFM@

; 1676 : 		return FALSE;

  0017b	0f 85 99 01 00
	00		 jne	 $LN28@test_pkcs5

; 1677 : 
; 1678 : 	/* PKCS-5 test 2 with HMAC-SHA-512 used as the PRF (derives a key longer than the underlying
; 1679 : 	hash output size and block size) */
; 1680 : 	derive_key_sha512 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 144);

  00181	48 8d 44 24 40	 lea	 rax, QWORD PTR dk$[rsp]
  00186	bf 90 00 00 00	 mov	 edi, 144		; 00000090H
  0018b	44 8b ce	 mov	 r9d, esi
  0018e	89 7c 24 30	 mov	 DWORD PTR [rsp+48], edi
  00192	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00197	4d 8b c4	 mov	 r8, r12
  0019a	41 8b d5	 mov	 edx, r13d
  0019d	49 8b ce	 mov	 rcx, r14
  001a0	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  001a4	e8 00 00 00 00	 call	 derive_key_sha512

; 1681 : 	if (memcmp (dk, "\x13\x64\xae\xf8\x0d\xf5\x57\x6c\x30\xd5\x71\x4c\xa7\x75\x3f\xfd\x00\xe5\x25\x8b\x39\xc7\x44\x7f\xce\x23\x3d\x08\x75\xe0\x2f\x48\xd6\x30\xd7\x00\xb6\x24\xdb\xe0\x5a\xd7\x47\xef\x52\xca\xa6\x34\x83\x47\xe5\xcb\xe9\x87\xf1\x20\x59\x6a\xe6\xa9\xcf\x51\x78\xc6\xb6\x23\xa6\x74\x0d\xe8\x91\xbe\x1a\xd0\x28\xcc\xce\x16\x98\x9a\xbe\xfb\xdc\x78\xc9\xe1\x7d\x72\x67\xce\xe1\x61\x56\x5f\x96\x68\xe6\xe1\xdd\xf4\xbf\x1b\x80\xe0\x19\x1c\xf4\xc4\xd3\xdd\xd5\xd5\x57\x2d\x83\xc7\xa3\x37\x87\xf4\x4e\xe0\xf6\xd8\x6d\x65\xdc\xa0\x52\xa3\x13\xbe\x81\xfc\x30\xbe\x7d\x69\x58\x34\xb6\xdd\x41\xc6", 144) != 0)

  001a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0JB@EEHAMOLN@?$BDd?$KO?x?$AN?uWl0?UqL?$KHu?$DP?$PN?$AA?e?$CF?$IL9?GD?$HP?N?$CD?$DN?$AIu?$OA?1H@FNODOBFM@
  001b0	48 8d 4c 24 40	 lea	 rcx, QWORD PTR dk$[rsp]
  001b5	4c 8b c7	 mov	 r8, rdi
  001b8	e8 00 00 00 00	 call	 memcmp
  001bd	3b c3		 cmp	 eax, ebx

; 1682 : 		return FALSE;

  001bf	0f 85 55 01 00
	00		 jne	 $LN28@test_pkcs5

; 1683 : 
; 1684 : 	/* PKCS-5 test 1 with HMAC-SHA-1 (deprecated/legacy) used as the PRF (derives a key longer than the underlying hash) */
; 1685 : 	derive_key_sha1 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 48);

  001c5	48 8d 44 24 40	 lea	 rax, QWORD PTR dk$[rsp]
  001ca	8d 7e 2c	 lea	 edi, QWORD PTR [rsi+44]
  001cd	44 8b ce	 mov	 r9d, esi
  001d0	89 7c 24 30	 mov	 DWORD PTR [rsp+48], edi
  001d4	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001d9	4d 8b c4	 mov	 r8, r12
  001dc	41 8b d5	 mov	 edx, r13d
  001df	49 8b ce	 mov	 rcx, r14
  001e2	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  001e6	e8 00 00 00 00	 call	 derive_key_sha1

; 1686 : 	if (memcmp (dk, "\x5c\x75\xce\xf0\x1a\x96\x0d\xf7\x4c\xb6\xb4\x9b\x9e\x38\xe6\xb5\x3b\x11\x80\xe3\x2f\xf7\xe0\xdd\xaa\xca\x8f\x81\x27\xf6\x9f\x4f\x1d\xc8\x2f\x48\x2d\xdb\x1a\x0a\xca\x90\xcb\x80\xb9\x2e\x90\x9e", 48) != 0)

  001eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@MAMEFANK@?2u?N?p?$BK?$JG?$AN?wL?$LG?$LE?$JL?$JO8?f?$LF?$DL?$BB?$IA?c?1?w?$OA?$NN?$KK?J?$IP?$IB?8?v?$JPO@FNODOBFM@
  001f2	48 8d 4c 24 40	 lea	 rcx, QWORD PTR dk$[rsp]
  001f7	4c 8b c7	 mov	 r8, rdi
  001fa	e8 00 00 00 00	 call	 memcmp
  001ff	3b c3		 cmp	 eax, ebx

; 1687 : 		return FALSE;

  00201	0f 85 13 01 00
	00		 jne	 $LN28@test_pkcs5

; 1688 : 
; 1689 : 	/* PKCS-5 test 2 with HMAC-SHA-1 (deprecated/legacy) used as the PRF */
; 1690 : 	derive_key_sha1 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  00207	48 8d 44 24 40	 lea	 rax, QWORD PTR dk$[rsp]
  0020c	89 74 24 30	 mov	 DWORD PTR [rsp+48], esi
  00210	44 8b ce	 mov	 r9d, esi
  00213	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00218	4d 8b c4	 mov	 r8, r12
  0021b	41 8b d5	 mov	 edx, r13d
  0021e	49 8b ce	 mov	 rcx, r14
  00221	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  00225	e8 00 00 00 00	 call	 derive_key_sha1

; 1691 : 	if (memcmp (dk, "\x5c\x75\xce\xf0", 4) != 0)

  0022a	8b 54 24 40	 mov	 edx, DWORD PTR dk$[rsp]
  0022e	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ??_C@_04BHFCCAHB@?2u?N?p?$AA@FNODOBFM@

; 1692 : 		return FALSE;

  00234	0f 85 e0 00 00
	00		 jne	 $LN28@test_pkcs5

; 1693 : 
; 1694 : #if 0	// This test is disabled because it uses 1200 iterations (to prevent startup slowdown)
; 1695 : 	/* PKCS-5 test 3 with HMAC-SHA-1 (deprecated/legacy) used as the PRF */
; 1696 : 	derive_key_sha1 ("password", 8, "ATHENA.MIT.EDUraeburn", 21, 1200, dk, 16);
; 1697 : 	if (memcmp (dk, "\x5c\x08\xeb\x61\xfd\xf7\x1e\x4e\x4e\xc3\xcf\x6b\xa1\xf5\x51\x2b", 16) != 0)
; 1698 : 		return FALSE;
; 1699 : #endif
; 1700 : 
; 1701 : 	/* PKCS-5 test 1 with HMAC-RIPEMD-160 used as the PRF */
; 1702 : 	derive_key_ripemd160 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  0023a	48 8d 44 24 40	 lea	 rax, QWORD PTR dk$[rsp]
  0023f	89 74 24 30	 mov	 DWORD PTR [rsp+48], esi
  00243	44 8b ce	 mov	 r9d, esi
  00246	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0024b	4d 8b c4	 mov	 r8, r12
  0024e	41 8b d5	 mov	 edx, r13d
  00251	49 8b ce	 mov	 rcx, r14
  00254	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  00258	e8 00 00 00 00	 call	 derive_key_ripemd160

; 1703 : 	if (memcmp (dk, "\x7a\x3d\x7c\x03", 4) != 0)

  0025d	8b 54 24 40	 mov	 edx, DWORD PTR dk$[rsp]
  00261	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ??_C@_04PODIBCAH@z?$DN?$HM?$AD?$AA@FNODOBFM@

; 1704 : 		return FALSE;

  00267	0f 85 ad 00 00
	00		 jne	 $LN28@test_pkcs5

; 1705 : 
; 1706 : 	/* PKCS-5 test 2 with HMAC-RIPEMD-160 used as the PRF (derives a key longer than the underlying hash) */
; 1707 : 	derive_key_ripemd160 ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 48);

  0026d	48 8d 44 24 40	 lea	 rax, QWORD PTR dk$[rsp]
  00272	89 7c 24 30	 mov	 DWORD PTR [rsp+48], edi
  00276	44 8b ce	 mov	 r9d, esi
  00279	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0027e	4d 8b c4	 mov	 r8, r12
  00281	41 8b d5	 mov	 edx, r13d
  00284	49 8b ce	 mov	 rcx, r14
  00287	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  0028b	e8 00 00 00 00	 call	 derive_key_ripemd160

; 1708 : 	if (memcmp (dk, "\x7a\x3d\x7c\x03\xe7\x26\x6b\xf8\x3d\x78\xfb\x29\xd2\x64\x1f\x56\xea\xf0\xe5\xf5\xcc\xc4\x3a\x31\xa8\x84\x70\xbf\xbd\x6f\x8e\x78\x24\x5a\xc0\x0a\xf6\xfa\xf0\xf6\xe9\x00\x47\x5f\x73\xce\xe1\x43", 48) != 0)

  00290	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@KJBGHKFA@z?$DN?$HM?$AD?g?$CGk?x?$DNx?$PL?$CJ?Rd?$BPV?j?p?e?u?L?D?31?$KI?$IEp?$LP?$LNo?$IOx@FNODOBFM@
  00297	48 8d 4c 24 40	 lea	 rcx, QWORD PTR dk$[rsp]
  0029c	4c 8b c7	 mov	 r8, rdi
  0029f	e8 00 00 00 00	 call	 memcmp
  002a4	3b c3		 cmp	 eax, ebx

; 1709 : 		return FALSE;

  002a6	75 72		 jne	 SHORT $LN28@test_pkcs5

; 1710 : 
; 1711 : 	/* PKCS-5 test 1 with HMAC-Whirlpool used as the PRF */
; 1712 : 	derive_key_whirlpool ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  002a8	48 8d 44 24 40	 lea	 rax, QWORD PTR dk$[rsp]
  002ad	89 74 24 30	 mov	 DWORD PTR [rsp+48], esi
  002b1	44 8b ce	 mov	 r9d, esi
  002b4	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  002b9	4d 8b c4	 mov	 r8, r12
  002bc	41 8b d5	 mov	 edx, r13d
  002bf	49 8b ce	 mov	 rcx, r14
  002c2	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  002c6	e8 00 00 00 00	 call	 derive_key_whirlpool

; 1713 : 	if (memcmp (dk, "\x50\x7c\x36\x6f", 4) != 0)

  002cb	8b 54 24 40	 mov	 edx, DWORD PTR dk$[rsp]
  002cf	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@

; 1714 : 		return FALSE;

  002d5	75 43		 jne	 SHORT $LN28@test_pkcs5

; 1715 : 
; 1716 : 	/* PKCS-5 test 2 with HMAC-Whirlpool used as the PRF (derives a key longer than the underlying hash) */
; 1717 : 	derive_key_whirlpool ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 96);

  002d7	48 8d 44 24 40	 lea	 rax, QWORD PTR dk$[rsp]
  002dc	8d 7e 5c	 lea	 edi, QWORD PTR [rsi+92]
  002df	44 8b ce	 mov	 r9d, esi
  002e2	89 7c 24 30	 mov	 DWORD PTR [rsp+48], edi
  002e6	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  002eb	4d 8b c4	 mov	 r8, r12
  002ee	41 8b d5	 mov	 edx, r13d
  002f1	49 8b ce	 mov	 rcx, r14
  002f4	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  002f8	e8 00 00 00 00	 call	 derive_key_whirlpool

; 1718 : 	if (memcmp (dk, "\x50\x7c\x36\x6f\xee\x10\x2e\x9a\xe2\x8a\xd5\x82\x72\x7d\x27\x0f\xe8\x4d\x7f\x68\x7a\xcf\xb5\xe7\x43\x67\xaa\x98\x93\x52\x2b\x09\x6e\x42\xdf\x2c\x59\x4a\x91\x6d\x7e\x10\xae\xb2\x1a\x89\x8f\xb9\x8f\xe6\x31\xa9\xd8\x9f\x98\x26\xf4\xda\xcd\x7d\x65\x65\xde\x10\x95\x91\xb4\x84\x26\xae\x43\xa1\x00\x5b\x1e\xb8\x38\x97\xa4\x1e\x4b\xd2\x65\x64\xbc\xfa\x1f\x35\x85\xdb\x4f\x97\x65\x6f\xbd\x24", 96) != 0)

  002fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@
  00304	48 8d 4c 24 40	 lea	 rcx, QWORD PTR dk$[rsp]
  00309	4c 8b c7	 mov	 r8, rdi
  0030c	e8 00 00 00 00	 call	 memcmp
  00311	3b c3		 cmp	 eax, ebx
  00313	0f 94 c3	 sete	 bl
  00316	8b c3		 mov	 eax, ebx
  00318	eb 02		 jmp	 SHORT $LN1@test_pkcs5
$LN28@test_pkcs5:

; 1659 : 		return FALSE;

  0031a	33 c0		 xor	 eax, eax
$LN1@test_pkcs5:

; 1719 : 		return FALSE;
; 1720 : 
; 1721 : 	return TRUE;
; 1722 : }

  0031c	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00324	48 33 cc	 xor	 rcx, rsp
  00327	e8 00 00 00 00	 call	 __security_check_cookie
  0032c	4c 8d 9c 24 20
	01 00 00	 lea	 r11, QWORD PTR [rsp+288]
  00334	49 8b 5b 30	 mov	 rbx, QWORD PTR [r11+48]
  00338	49 8b 6b 38	 mov	 rbp, QWORD PTR [r11+56]
  0033c	49 8b 73 40	 mov	 rsi, QWORD PTR [r11+64]
  00340	49 8b e3	 mov	 rsp, r11
  00343	41 5f		 pop	 r15
  00345	41 5e		 pop	 r14
  00347	41 5d		 pop	 r13
  00349	41 5c		 pop	 r12
  0034b	5f		 pop	 rdi
  0034c	c3		 ret	 0
test_pkcs5 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	LRWAesTest
;	COMDAT pdata
pdata	SEGMENT
$pdata$LRWAesTest DD imagerel $LN19
	DD	imagerel $LN19+277
	DD	imagerel $unwind$LRWAesTest
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$LRWAesTest DD 082119H
	DD	0e5412H
	DD	0d3412H
	DD	0c00e7212H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	030H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT LRWAesTest
_TEXT	SEGMENT
p$ = 32
__$ArrayPad$ = 48
ci$ = 96
LRWAesTest PROC						; COMDAT

; 604  : {

$LN19:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 44 24 30	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00021	48 8b f9	 mov	 rdi, rcx

; 605  : 	/* Deprecated/legacy */
; 606  : 
; 607  : 	unsigned __int8 p[16];
; 608  : 	int i;
; 609  : 
; 610  : 	for (i = 0; i < LRW_TEST_COUNT; i++)

  00024	33 db		 xor	 ebx, ebx
  00026	48 8d 35 40 00
	00 00		 lea	 rsi, OFFSET FLAT:lrw_vectors+64
  0002d	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:lrw_vectors
$LL7@LRWAesTest:

; 611  : 	{
; 612  : 		ci->ea = EAGetByName ("AES");

  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  0003b	e8 00 00 00 00	 call	 EAGetByName
  00040	8b c8		 mov	 ecx, eax
  00042	89 07		 mov	 DWORD PTR [rdi], eax

; 613  : 		if (ci->ea == 0)

  00044	85 c0		 test	 eax, eax
  00046	0f 84 a7 00 00
	00		 je	 $LN11@LRWAesTest

; 615  : 
; 616  : 		ci->mode = LRW;
; 617  : 
; 618  : 		if (EAInit (ci->ea, lrw_vectors[i].key1, ci->ks) != ERR_SUCCESS)

  0004c	48 63 c3	 movsxd	 rax, ebx
  0004f	4c 8d 47 08	 lea	 r8, QWORD PTR [rdi+8]
  00053	c7 47 04 02 00
	00 00		 mov	 DWORD PTR [rdi+4], 2
  0005a	48 8d 2c 40	 lea	 rbp, QWORD PTR [rax+rax*2]
  0005e	48 c1 e5 05	 shl	 rbp, 5
  00062	49 8d 14 2c	 lea	 rdx, QWORD PTR [r12+rbp]
  00066	e8 00 00 00 00	 call	 EAInit
  0006b	85 c0		 test	 eax, eax
  0006d	0f 85 80 00 00
	00		 jne	 $LN11@LRWAesTest

; 619  : 			return FALSE;
; 620  : 
; 621  : 		memcpy (&ci->k2, lrw_vectors[i].key2, sizeof (lrw_vectors[i].key2));

  00073	f3 0f 6f 46 e0	 movdqu	 xmm0, XMMWORD PTR [rsi-32]

; 622  : 		if (!EAInitMode (ci))

  00078	48 8b cf	 mov	 rcx, rdi
  0007b	f3 0f 7f 87 a8
	42 00 00	 movdqu	 XMMWORD PTR [rdi+17064], xmm0
  00083	e8 00 00 00 00	 call	 EAInitMode
  00088	85 c0		 test	 eax, eax
  0008a	74 67		 je	 SHORT $LN11@LRWAesTest

; 623  : 			return FALSE;
; 624  : 
; 625  : 		memcpy (p, lrw_vectors[i].plaintext, sizeof (p));

  0008c	f3 0f 6f 06	 movdqu	 xmm0, XMMWORD PTR [rsi]

; 626  : 
; 627  : 		EncryptBufferLRW128 (p, sizeof (p), BE64(((unsigned __int64 *)(lrw_vectors[i].index))[1]), ci);

  00090	48 8b 4e f8	 mov	 rcx, QWORD PTR [rsi-8]
  00094	f3 0f 7f 44 24
	20		 movdqu	 XMMWORD PTR p$[rsp], xmm0
  0009a	e8 00 00 00 00	 call	 MirrorBytes64
  0009f	48 8d 4c 24 20	 lea	 rcx, QWORD PTR p$[rsp]
  000a4	4c 8b cf	 mov	 r9, rdi
  000a7	4c 8b c0	 mov	 r8, rax
  000aa	ba 10 00 00 00	 mov	 edx, 16
  000af	e8 00 00 00 00	 call	 EncryptBufferLRW128

; 628  : 
; 629  : 		if (memcmp (lrw_vectors[i].ciphertext, p, sizeof (p)) != 0)

  000b4	49 8d 44 2c 50	 lea	 rax, QWORD PTR [r12+rbp+80]
  000b9	48 8d 4c 24 20	 lea	 rcx, QWORD PTR p$[rsp]
  000be	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000c1	48 3b 11	 cmp	 rdx, QWORD PTR [rcx]
  000c4	75 0e		 jne	 SHORT $LN16@LRWAesTest
  000c6	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  000ca	48 3b 51 08	 cmp	 rdx, QWORD PTR [rcx+8]
  000ce	75 04		 jne	 SHORT $LN16@LRWAesTest
  000d0	33 c0		 xor	 eax, eax
  000d2	eb 05		 jmp	 SHORT $LN17@LRWAesTest
$LN16@LRWAesTest:
  000d4	1b c0		 sbb	 eax, eax
  000d6	83 d8 ff	 sbb	 eax, -1
$LN17@LRWAesTest:
  000d9	85 c0		 test	 eax, eax
  000db	75 16		 jne	 SHORT $LN11@LRWAesTest
  000dd	ff c3		 inc	 ebx
  000df	48 83 c6 60	 add	 rsi, 96			; 00000060H
  000e3	83 fb 02	 cmp	 ebx, 2
  000e6	0f 8c 48 ff ff
	ff		 jl	 $LL7@LRWAesTest

; 631  : 	}
; 632  : 
; 633  : 	return TRUE;

  000ec	b8 01 00 00 00	 mov	 eax, 1

; 630  : 			return FALSE;

  000f1	eb 02		 jmp	 SHORT $LN8@LRWAesTest
$LN11@LRWAesTest:

; 614  : 			return FALSE;

  000f3	33 c0		 xor	 eax, eax
$LN8@LRWAesTest:

; 634  : }

  000f5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000fa	48 33 cc	 xor	 rcx, rsp
  000fd	e8 00 00 00 00	 call	 __security_check_cookie
  00102	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  00107	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]
  0010c	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00110	41 5c		 pop	 r12
  00112	5f		 pop	 rdi
  00113	5e		 pop	 rsi
  00114	c3		 ret	 0
LRWAesTest ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	XTSAesTest
;	COMDAT pdata
pdata	SEGMENT
$pdata$XTSAesTest DD imagerel $LN17
	DD	imagerel $LN17+338
	DD	imagerel $unwind$XTSAesTest
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$XTSAesTest DD 0b2b19H
	DD	0545419H
	DD	0533419H
	DD	04c0119H
	DD	0e010f012H
	DD	0700cc00eH
	DD	0600bH
	DD	imagerel __GSHandlerCheck
	DD	0250H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT XTSAesTest
_TEXT	SEGMENT
dataUnitNo$ = 64
p$ = 80
__$ArrayPad$ = 592
ci$ = 656
XTSAesTest PROC						; COMDAT

; 259  : {

$LN17:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	41 56		 push	 r14
  00010	41 57		 push	 r15
  00012	48 81 ec 60 02
	00 00		 sub	 rsp, 608		; 00000260H
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0002b	48 8b f9	 mov	 rdi, rcx

; 260  : 	unsigned __int8 p[ENCRYPTION_DATA_UNIT_SIZE];
; 261  : 	UINT64_STRUCT dataUnitNo;
; 262  : 	int i;
; 263  : 
; 264  : 	for (i = 0; i < XTS_TEST_COUNT; i++)

  0002e	33 db		 xor	 ebx, ebx
  00030	48 8d 35 4c 00
	00 00		 lea	 rsi, OFFSET FLAT:XTS_vectors+76
  00037	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:XTS_vectors
  0003e	41 bf 00 02 00
	00		 mov	 r15d, 512		; 00000200H
$LL7@XTSAesTest:

; 265  : 	{
; 266  : 		ci->ea = EAGetByName ("AES");

  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  0004b	e8 00 00 00 00	 call	 EAGetByName
  00050	89 07		 mov	 DWORD PTR [rdi], eax

; 267  : 		if (ci->ea == 0)

  00052	85 c0		 test	 eax, eax
  00054	0f 84 ca 00 00
	00		 je	 $LN11@XTSAesTest

; 269  : 
; 270  : 		ci->mode = XTS;
; 271  : 
; 272  : 		if (EAInit (ci->ea, XTS_vectors[i].key1, ci->ks) != ERR_SUCCESS)

  0005a	48 63 eb	 movsxd	 rbp, ebx
  0005d	4c 8d 67 08	 lea	 r12, QWORD PTR [rdi+8]
  00061	8b c8		 mov	 ecx, eax
  00063	4d 8b c4	 mov	 r8, r12
  00066	c7 47 04 01 00
	00 00		 mov	 DWORD PTR [rdi+4], 1
  0006d	48 69 ed 4c 04
	00 00		 imul	 rbp, 1100		; 0000044cH
  00074	49 8d 14 2e	 lea	 rdx, QWORD PTR [r14+rbp]
  00078	e8 00 00 00 00	 call	 EAInit
  0007d	85 c0		 test	 eax, eax
  0007f	0f 85 9f 00 00
	00		 jne	 $LN11@XTSAesTest

; 273  : 			return FALSE;
; 274  : 
; 275  : 		memcpy (&ci->k2, XTS_vectors[i].key2, sizeof (XTS_vectors[i].key2));

  00085	48 8d 8f a8 42
	00 00		 lea	 rcx, QWORD PTR [rdi+17064]
  0008c	48 8d 56 d4	 lea	 rdx, QWORD PTR [rsi-44]
  00090	44 8d 40 20	 lea	 r8d, QWORD PTR [rax+32]
  00094	e8 00 00 00 00	 call	 memcpy

; 276  : 
; 277  : 		if (!EAInitMode (ci))

  00099	48 8b cf	 mov	 rcx, rdi
  0009c	e8 00 00 00 00	 call	 EAInitMode
  000a1	85 c0		 test	 eax, eax
  000a3	74 7f		 je	 SHORT $LN11@XTSAesTest

; 278  : 			return FALSE;
; 279  : 
; 280  : 		memcpy (p, XTS_vectors[i].plaintext, sizeof (p));

  000a5	48 8d 4c 24 50	 lea	 rcx, QWORD PTR p$[rsp]
  000aa	48 8b d6	 mov	 rdx, rsi
  000ad	4d 8b c7	 mov	 r8, r15
  000b0	e8 00 00 00 00	 call	 memcpy

; 281  : 
; 282  : 		dataUnitNo.Value = BE64 (*((unsigned __int64 *) XTS_vectors[i].dataUnitNo));

  000b5	48 8b 4e f4	 mov	 rcx, QWORD PTR [rsi-12]
  000b9	e8 00 00 00 00	 call	 MirrorBytes64

; 283  : 
; 284  : 		EncryptBufferXTS (p, sizeof (p), &dataUnitNo, XTS_vectors[i].blockNo, (unsigned char *) (ci->ks), (unsigned char *) ci->ks2, AES);

  000be	44 8b 4e fc	 mov	 r9d, DWORD PTR [rsi-4]
  000c2	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR [rsp+48], 1
  000ca	48 89 44 24 40	 mov	 QWORD PTR dataUnitNo$[rsp], rax
  000cf	48 8d 87 d4 14
	00 00		 lea	 rax, QWORD PTR [rdi+5332]
  000d6	4c 8d 44 24 40	 lea	 r8, QWORD PTR dataUnitNo$[rsp]
  000db	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000e0	48 8d 4c 24 50	 lea	 rcx, QWORD PTR p$[rsp]
  000e5	49 8b d7	 mov	 rdx, r15
  000e8	4c 89 64 24 20	 mov	 QWORD PTR [rsp+32], r12
  000ed	e8 00 00 00 00	 call	 EncryptBufferXTS

; 285  : 
; 286  : 		if (memcmp (XTS_vectors[i].ciphertext, p, sizeof (p)) != 0)

  000f2	49 8d 8c 2e 4c
	02 00 00	 lea	 rcx, QWORD PTR [r14+rbp+588]
  000fa	48 8d 54 24 50	 lea	 rdx, QWORD PTR p$[rsp]
  000ff	4d 8b c7	 mov	 r8, r15
  00102	e8 00 00 00 00	 call	 memcmp
  00107	85 c0		 test	 eax, eax
  00109	75 19		 jne	 SHORT $LN11@XTSAesTest
  0010b	ff c3		 inc	 ebx
  0010d	48 81 c6 4c 04
	00 00		 add	 rsi, 1100		; 0000044cH
  00114	83 fb 05	 cmp	 ebx, 5
  00117	0f 8c 27 ff ff
	ff		 jl	 $LL7@XTSAesTest

; 288  : 	}
; 289  : 
; 290  : 	return TRUE;

  0011d	b8 01 00 00 00	 mov	 eax, 1

; 287  : 			return FALSE;

  00122	eb 02		 jmp	 SHORT $LN8@XTSAesTest
$LN11@XTSAesTest:

; 268  : 			return FALSE;

  00124	33 c0		 xor	 eax, eax
$LN8@XTSAesTest:

; 291  : }

  00126	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0012e	48 33 cc	 xor	 rcx, rsp
  00131	e8 00 00 00 00	 call	 __security_check_cookie
  00136	4c 8d 9c 24 60
	02 00 00	 lea	 r11, QWORD PTR [rsp+608]
  0013e	49 8b 5b 38	 mov	 rbx, QWORD PTR [r11+56]
  00142	49 8b 6b 40	 mov	 rbp, QWORD PTR [r11+64]
  00146	49 8b e3	 mov	 rsp, r11
  00149	41 5f		 pop	 r15
  0014b	41 5e		 pop	 r14
  0014d	41 5c		 pop	 r12
  0014f	5f		 pop	 rdi
  00150	5e		 pop	 rsi
  00151	c3		 ret	 0
XTSAesTest ENDP
PUBLIC	__$ArrayPad$
PUBLIC	TestLegacySectorBufEncryption
;	COMDAT pdata
; File c:\users\public\desktop\projects\ciphershed\src\common\crypto.c
pdata	SEGMENT
$pdata$TestLegacySectorBufEncryption DD imagerel $LN234
	DD	imagerel $LN234+1981
	DD	imagerel $unwind$TestLegacySectorBufEncryption
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TestLegacySectorBufEncryption DD 0d3119H
	DD	09b641fH
	DD	09a541fH
	DD	099341fH
	DD	092011fH
	DD	0e016f018H
	DD	0c012d014H
	DD	07010H
	DD	imagerel __GSHandlerCheck
	DD	0480H
; Function compile flags: /Ogspy
; File c:\users\public\desktop\projects\ciphershed\src\common\tests.c
xdata	ENDS
;	COMDAT TestLegacySectorBufEncryption
_TEXT	SEGMENT
unitNo$ = 48
name$ = 64
buf$ = 128
__$ArrayPad$ = 1152
ci$ = 1216
TestLegacySectorBufEncryption PROC			; COMDAT

; 1034 : {

$LN234:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 5b 10	 mov	 QWORD PTR [r11+16], rbx
  00007	49 89 6b 18	 mov	 QWORD PTR [r11+24], rbp
  0000b	49 89 73 20	 mov	 QWORD PTR [r11+32], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 81 ec 90 04
	00 00		 sub	 rsp, 1168		; 00000490H
  0001f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00026	48 33 c4	 xor	 rax, rsp
  00029	48 89 84 24 80
	04 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1035 : 	unsigned char buf [ENCRYPTION_DATA_UNIT_SIZE * 2];
; 1036 : 	unsigned int i;
; 1037 : 	char name[64];
; 1038 : 	unsigned __int32 crc;
; 1039 : 	UINT64_STRUCT unitNo;
; 1040 : 	uint32 nbrUnits;
; 1041 : 	int blockSize;
; 1042 : 	BOOL lrw64InitDone = FALSE;

  00031	33 ed		 xor	 ebp, ebp

; 1043 : 	BOOL lrw128InitDone = FALSE;
; 1044 : 	int nTestsPerformed = 0;
; 1045 : 
; 1046 : 	unitNo.Value = 0x0234567890ABCDEFull;

  00033	48 b8 ef cd ab
	90 78 56 34 02	 mov	 rax, 158846962688052719	; 0234567890abcdefH
  0003d	4c 8b e1	 mov	 r12, rcx
  00040	48 89 44 24 30	 mov	 QWORD PTR unitNo$[rsp], rax

; 1047 : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;
; 1048 : 
; 1049 : 	for (i = 0; i < sizeof (buf); i++)

  00045	8b c5		 mov	 eax, ebp

; 1050 : 		buf[i] = (unsigned char) i;

  00047	8d 7d 01	 lea	 edi, QWORD PTR [rbp+1]
  0004a	44 8b fd	 mov	 r15d, ebp
  0004d	44 8b f5	 mov	 r14d, ebp
  00050	8b dd		 mov	 ebx, ebp
  00052	49 8d 93 c8 fb
	ff ff		 lea	 rdx, QWORD PTR [r11-1080]
$LL143@TestLegacy:
  00059	88 02		 mov	 BYTE PTR [rdx], al
  0005b	03 c7		 add	 eax, edi
  0005d	48 03 d7	 add	 rdx, rdi
  00060	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  00065	72 f2		 jb	 SHORT $LL143@TestLegacy

; 1051 : 
; 1052 : 	for (i = 0; i < sizeof (ci->k2); i++)

  00067	8b c5		 mov	 eax, ebp
  00069	48 81 c1 a8 42
	00 00		 add	 rcx, 17064		; 000042a8H
$LL140@TestLegacy:

; 1053 : 		ci->k2[i] = (unsigned char) i;

  00070	88 01		 mov	 BYTE PTR [rcx], al
  00072	03 c7		 add	 eax, edi
  00074	48 03 cf	 add	 rcx, rdi
  00077	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0007c	72 f2		 jb	 SHORT $LL140@TestLegacy

; 1054 : 
; 1055 : 	// Test all EAs
; 1056 : 	for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  0007e	41 89 3c 24	 mov	 DWORD PTR [r12], edi
  00082	49 8d 74 24 08	 lea	 rsi, QWORD PTR [r12+8]
$LN229@TestLegacy:

; 1057 : 	{
; 1058 : 		EAGetName (name, ci->ea);

  00087	41 8b 14 24	 mov	 edx, DWORD PTR [r12]
  0008b	48 8d 4c 24 40	 lea	 rcx, QWORD PTR name$[rsp]
  00090	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:EncryptionAlgorithms
  00097	e8 00 00 00 00	 call	 EAGetName

; 1059 : 		blockSize = CipherGetBlockSize (EAGetFirstCipher (ci->ea));

  0009c	49 63 04 24	 movsxd	 rax, DWORD PTR [r12]
  000a0	48 6b c0 2c	 imul	 rax, 44			; 0000002cH
  000a4	8b 0c 38	 mov	 ecx, DWORD PTR [rax+rdi]
  000a7	e8 00 00 00 00	 call	 CipherGet

; 1060 : 
; 1061 : 		if (EAInit (ci->ea, (unsigned char *)buf, ci->ks) == ERR_CIPHER_INIT_FAILURE)

  000ac	41 8b 0c 24	 mov	 ecx, DWORD PTR [r12]
  000b0	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  000b8	48 63 78 10	 movsxd	 rdi, DWORD PTR [rax+16]
  000bc	4c 8b c6	 mov	 r8, rsi
  000bf	e8 00 00 00 00	 call	 EAInit
  000c4	83 f8 11	 cmp	 eax, 17
  000c7	0f 84 bd 06 00
	00		 je	 $LN215@TestLegacy

; 1063 : 
; 1064 : 		// Test all deprecated modes of operation
; 1065 : 		for (ci->mode = EAGetFirstMode (ci->ea);
; 1066 : 			ci->mode != 0;
; 1067 : 			ci->mode = EAGetNextMode (ci->ea, ci->mode))

  000cd	49 63 04 24	 movsxd	 rax, DWORD PTR [r12]
  000d1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:EncryptionAlgorithms

; 1071 : 				continue;
; 1072 : 
; 1073 : 			if (ci->mode == LRW
; 1074 : 				&& (blockSize == 8 && !lrw64InitDone || blockSize == 16 && !lrw128InitDone ))

  000d8	4c 8b ef	 mov	 r13, rdi
  000db	48 6b c0 2c	 imul	 rax, 44			; 0000002cH
  000df	42 8b 4c 00 10	 mov	 ecx, DWORD PTR [rax+r8+16]
  000e4	41 89 4c 24 04	 mov	 DWORD PTR [r12+4], ecx
  000e9	3b cd		 cmp	 ecx, ebp
  000eb	0f 84 60 06 00
	00		 je	 $LN136@TestLegacy
  000f1	be 01 00 00 00	 mov	 esi, 1
$LL133@TestLegacy:

; 1068 : 		{
; 1069 : 			// Skip modes that are not deprecated
; 1070 : 			if (ci->mode == XTS)

  000f6	41 39 74 24 04	 cmp	 DWORD PTR [r12+4], esi
  000fb	0f 84 0a 06 00
	00		 je	 $LN132@TestLegacy

; 1071 : 				continue;
; 1072 : 
; 1073 : 			if (ci->mode == LRW
; 1074 : 				&& (blockSize == 8 && !lrw64InitDone || blockSize == 16 && !lrw128InitDone ))

  00101	bf 02 00 00 00	 mov	 edi, 2
  00106	41 39 7c 24 04	 cmp	 DWORD PTR [r12+4], edi
  0010b	75 39		 jne	 SHORT $LN123@TestLegacy
  0010d	49 83 fd 08	 cmp	 r13, 8
  00111	75 05		 jne	 SHORT $LN127@TestLegacy
  00113	44 3b fd	 cmp	 r15d, ebp
  00116	74 0b		 je	 SHORT $LN128@TestLegacy
$LN127@TestLegacy:
  00118	49 83 fd 10	 cmp	 r13, 16
  0011c	75 28		 jne	 SHORT $LN123@TestLegacy
  0011e	44 3b f5	 cmp	 r14d, ebp
  00121	75 23		 jne	 SHORT $LN123@TestLegacy
$LN128@TestLegacy:

; 1075 : 			{
; 1076 : 				if (!EAInitMode (ci))

  00123	49 8b cc	 mov	 rcx, r12
  00126	e8 00 00 00 00	 call	 EAInitMode
  0012b	3b c5		 cmp	 eax, ebp
  0012d	0f 84 57 06 00
	00		 je	 $LN215@TestLegacy

; 1077 : 					return FALSE;
; 1078 : 
; 1079 : 				if (blockSize == 8)

  00133	49 83 fd 08	 cmp	 r13, 8
  00137	75 05		 jne	 SHORT $LN125@TestLegacy

; 1080 : 					lrw64InitDone = TRUE;

  00139	44 8b fe	 mov	 r15d, esi
  0013c	eb 08		 jmp	 SHORT $LN123@TestLegacy
$LN125@TestLegacy:

; 1081 : 				else if (blockSize == 16)

  0013e	49 83 fd 10	 cmp	 r13, 16
  00142	44 0f 44 f6	 cmove	 r14d, esi
$LN123@TestLegacy:

; 1082 : 					lrw128InitDone = TRUE;
; 1083 : 			}
; 1084 : 
; 1085 : 			EncryptDataUnits (buf, &unitNo, nbrUnits, ci);

  00146	4c 8d 44 24 30	 lea	 r8, QWORD PTR unitNo$[rsp]
  0014b	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  00153	44 8b cf	 mov	 r9d, edi
  00156	33 c9		 xor	 ecx, ecx
  00158	4c 89 64 24 20	 mov	 QWORD PTR [rsp+32], r12
  0015d	e8 00 00 00 00	 call	 EncryptionThreadPoolDoWork

; 1086 : 			crc = GetCrc32 (buf, sizeof (buf));

  00162	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0016a	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  0016f	e8 00 00 00 00	 call	 GetCrc32

; 1087 : 
; 1088 : 			switch (ci->mode)

  00174	41 8b 4c 24 04	 mov	 ecx, DWORD PTR [r12+4]
  00179	3b cf		 cmp	 ecx, edi
  0017b	0f 84 82 01 00
	00		 je	 $LN120@TestLegacy
  00181	83 c1 fd	 add	 ecx, -3			; fffffffdH
  00184	3b cf		 cmp	 ecx, edi
  00186	0f 87 d3 02 00
	00		 ja	 $LN89@TestLegacy

; 1156 : 				}
; 1157 : 				break;
; 1158 : 
; 1159 : 			case CBC:		// Deprecated/legacy
; 1160 : 			case INNER_CBC:	// Deprecated/legacy
; 1161 : 			case OUTER_CBC:	// Deprecated/legacy
; 1162 : 				if (strcmp (name, "AES") == 0)

  0018c	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00191	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  00198	b9 04 00 00 00	 mov	 ecx, 4
  0019d	f3 a6		 repe cmpsb
  0019f	75 12		 jne	 SHORT $LN86@TestLegacy

; 1163 : 				{
; 1164 : 					if (crc != 0x2274f53d)

  001a1	3d 3d f5 74 22	 cmp	 eax, 578090301		; 2274f53dH
$LN230@TestLegacy:
  001a6	0f 85 de 05 00
	00		 jne	 $LN215@TestLegacy

; 1165 : 						return FALSE;
; 1166 : 					nTestsPerformed++;

  001ac	ff c3		 inc	 ebx
  001ae	e9 b7 02 00 00	 jmp	 $LN221@TestLegacy
$LN86@TestLegacy:

; 1167 : 				}
; 1168 : 				else if (strcmp (name, "Blowfish") == 0)	// Deprecated/legacy

  001b3	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  001b8	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@
  001bf	b9 09 00 00 00	 mov	 ecx, 9
  001c4	f3 a6		 repe cmpsb
  001c6	75 07		 jne	 SHORT $LN83@TestLegacy

; 1169 : 				{
; 1170 : 					if (crc != 0x033899a1)

  001c8	3d a1 99 38 03	 cmp	 eax, 54040993		; 033899a1H

; 1171 : 						return FALSE;
; 1172 : 					nTestsPerformed++;

  001cd	eb d7		 jmp	 SHORT $LN230@TestLegacy
$LN83@TestLegacy:

; 1173 : 				}
; 1174 : 				else if (strcmp (name, "CAST5") == 0)		// Deprecated/legacy

  001cf	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  001d4	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@
  001db	b9 06 00 00 00	 mov	 ecx, 6
  001e0	f3 a6		 repe cmpsb
  001e2	75 07		 jne	 SHORT $LN80@TestLegacy

; 1175 : 				{
; 1176 : 					if (crc != 0x331cecc7)	

  001e4	3d c7 ec 1c 33	 cmp	 eax, 857533639		; 331cecc7H

; 1177 : 						return FALSE;
; 1178 : 					nTestsPerformed++;

  001e9	eb bb		 jmp	 SHORT $LN230@TestLegacy
$LN80@TestLegacy:

; 1179 : 				}
; 1180 : 				else if (strcmp (name, "Serpent") == 0)

  001eb	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  001f0	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
  001f7	b9 08 00 00 00	 mov	 ecx, 8
  001fc	f3 a6		 repe cmpsb
  001fe	75 07		 jne	 SHORT $LN77@TestLegacy

; 1181 : 				{
; 1182 : 					if (crc != 0x42dff3d4)

  00200	3d d4 f3 df 42	 cmp	 eax, 1121973204		; 42dff3d4H

; 1183 : 						return FALSE;
; 1184 : 					nTestsPerformed++;

  00205	eb 9f		 jmp	 SHORT $LN230@TestLegacy
$LN77@TestLegacy:

; 1185 : 				}
; 1186 : 				else if (strcmp (name, "Triple DES") == 0)	// Deprecated/legacy

  00207	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  0020c	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0L@NEGMAKNF@Triple?5DES?$AA@FNODOBFM@
  00213	b9 0b 00 00 00	 mov	 ecx, 11
  00218	f3 a6		 repe cmpsb
  0021a	75 07		 jne	 SHORT $LN74@TestLegacy

; 1187 : 				{
; 1188 : 					if (crc != 0xfe497d0c)

  0021c	3d 0c 7d 49 fe	 cmp	 eax, -28738292		; fe497d0cH

; 1189 : 						return FALSE;
; 1190 : 					nTestsPerformed++;

  00221	eb 83		 jmp	 SHORT $LN230@TestLegacy
$LN74@TestLegacy:

; 1191 : 				}
; 1192 : 				else if (strcmp (name, "AES-Blowfish") == 0)	// Deprecated/legacy

  00223	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00228	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@FNODOBFM@
  0022f	b9 0d 00 00 00	 mov	 ecx, 13
  00234	f3 a6		 repe cmpsb
  00236	75 0a		 jne	 SHORT $LN71@TestLegacy

; 1193 : 				{
; 1194 : 					if (crc != 0xa7a80c84)

  00238	3d 84 0c a8 a7	 cmp	 eax, -1482158972	; a7a80c84H

; 1195 : 						return FALSE;
; 1196 : 					nTestsPerformed++;

  0023d	e9 64 ff ff ff	 jmp	 $LN230@TestLegacy
$LN71@TestLegacy:

; 1197 : 				}
; 1198 : 				else if (strcmp (name, "AES-Blowfish-Serpent") == 0)	// Deprecated/legacy

  00242	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00247	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@FNODOBFM@
  0024e	b9 15 00 00 00	 mov	 ecx, 21
  00253	f3 a6		 repe cmpsb
  00255	75 0a		 jne	 SHORT $LN68@TestLegacy

; 1199 : 				{
; 1200 : 					if (crc != 0xa0584562)

  00257	3d 62 45 58 a0	 cmp	 eax, -1604827806	; a0584562H

; 1201 : 						return FALSE;
; 1202 : 					nTestsPerformed++;

  0025c	e9 45 ff ff ff	 jmp	 $LN230@TestLegacy
$LN68@TestLegacy:

; 1203 : 				}
; 1204 : 				else if (strcmp (name, "AES-Twofish") == 0)

  00261	41 b8 0c 00 00
	00		 mov	 r8d, 12
  00267	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  0026c	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
  00273	49 8b c8	 mov	 rcx, r8
  00276	f3 a6		 repe cmpsb
  00278	75 0a		 jne	 SHORT $LN65@TestLegacy

; 1205 : 				{
; 1206 : 					if (crc != 0x3c226444)

  0027a	3d 44 64 22 3c	 cmp	 eax, 1008886852		; 3c226444H

; 1207 : 						return FALSE;
; 1208 : 					nTestsPerformed++;

  0027f	e9 22 ff ff ff	 jmp	 $LN230@TestLegacy
$LN65@TestLegacy:

; 1209 : 				}
; 1210 : 				else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  00284	ba 14 00 00 00	 mov	 edx, 20
  00289	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  0028e	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  00295	48 8b ca	 mov	 rcx, rdx
  00298	f3 a6		 repe cmpsb
  0029a	75 0a		 jne	 SHORT $LN62@TestLegacy

; 1211 : 				{
; 1212 : 					if (crc != 0x5e5e77fd)

  0029c	3d fd 77 5e 5e	 cmp	 eax, 1583249405		; 5e5e77fdH

; 1213 : 						return FALSE;
; 1214 : 					nTestsPerformed++;

  002a1	e9 00 ff ff ff	 jmp	 $LN230@TestLegacy
$LN62@TestLegacy:

; 1215 : 				}
; 1216 : 				else if (strcmp (name, "Serpent-AES") == 0)

  002a6	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  002ab	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
  002b2	49 8b c8	 mov	 rcx, r8
  002b5	f3 a6		 repe cmpsb
  002b7	75 0a		 jne	 SHORT $LN59@TestLegacy

; 1217 : 				{
; 1218 : 					if (crc != 0x57c612d5)

  002b9	3d d5 12 c6 57	 cmp	 eax, 1472598741		; 57c612d5H

; 1219 : 						return FALSE;
; 1220 : 					nTestsPerformed++;

  002be	e9 e3 fe ff ff	 jmp	 $LN230@TestLegacy
$LN59@TestLegacy:

; 1221 : 				}
; 1222 : 				else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  002c3	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  002c8	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
  002cf	48 8b ca	 mov	 rcx, rdx
  002d2	f3 a6		 repe cmpsb
  002d4	75 0a		 jne	 SHORT $LN56@TestLegacy

; 1223 : 				{
; 1224 : 					if (crc != 0x081e045a)

  002d6	3d 5a 04 1e 08	 cmp	 eax, 136184922		; 081e045aH

; 1225 : 						return FALSE;
; 1226 : 					nTestsPerformed++;

  002db	e9 c6 fe ff ff	 jmp	 $LN230@TestLegacy
$LN56@TestLegacy:

; 1227 : 				}
; 1228 : 				else if (strcmp (name, "Twofish-Serpent") == 0)

  002e0	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  002e5	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
  002ec	b9 10 00 00 00	 mov	 ecx, 16
  002f1	f3 a6		 repe cmpsb
  002f3	0f 85 66 01 00
	00		 jne	 $LN89@TestLegacy

; 1229 : 				{
; 1230 : 					if (crc != 0xa7b659f3)

  002f9	3d f3 59 b6 a7	 cmp	 eax, -1481221645	; a7b659f3H

; 1231 : 						return FALSE;
; 1232 : 					nTestsPerformed++;
; 1233 : 				}
; 1234 : 				break;

  002fe	e9 54 01 00 00	 jmp	 $LN231@TestLegacy
$LN120@TestLegacy:

; 1089 : 			{
; 1090 : 			case LRW:		// Deprecated/legacy
; 1091 : 				if (strcmp (name, "AES") == 0)

  00303	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00308	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  0030f	b9 04 00 00 00	 mov	 ecx, 4
  00314	f3 a6		 repe cmpsb
  00316	75 0a		 jne	 SHORT $LN119@TestLegacy

; 1092 : 				{
; 1093 : 					if (crc != 0x5237acf9)

  00318	3d f9 ac 37 52	 cmp	 eax, 1379380473		; 5237acf9H

; 1094 : 						return FALSE;
; 1095 : 					nTestsPerformed++;

  0031d	e9 84 fe ff ff	 jmp	 $LN230@TestLegacy
$LN119@TestLegacy:

; 1096 : 				}
; 1097 : 				else if (strcmp (name, "Blowfish") == 0)	// Deprecated/legacy

  00322	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00327	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@
  0032e	b9 09 00 00 00	 mov	 ecx, 9
  00333	f3 a6		 repe cmpsb
  00335	75 0a		 jne	 SHORT $LN116@TestLegacy

; 1098 : 				{
; 1099 : 					if (crc != 0xf94d5300)

  00337	3d 00 53 4d f9	 cmp	 eax, -112372992		; f94d5300H

; 1100 : 						return FALSE;
; 1101 : 					nTestsPerformed++;

  0033c	e9 65 fe ff ff	 jmp	 $LN230@TestLegacy
$LN116@TestLegacy:

; 1102 : 				}
; 1103 : 				else if (strcmp (name, "CAST5") == 0)		// Deprecated/legacy

  00341	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00346	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@
  0034d	b9 06 00 00 00	 mov	 ecx, 6
  00352	f3 a6		 repe cmpsb
  00354	75 0a		 jne	 SHORT $LN113@TestLegacy

; 1104 : 				{
; 1105 : 					if (crc != 0x33971e82)

  00356	3d 82 1e 97 33	 cmp	 eax, 865541762		; 33971e82H

; 1106 : 						return FALSE;
; 1107 : 					nTestsPerformed++;

  0035b	e9 46 fe ff ff	 jmp	 $LN230@TestLegacy
$LN113@TestLegacy:

; 1108 : 				}
; 1109 : 				else if (strcmp (name, "Serpent") == 0)

  00360	ba 08 00 00 00	 mov	 edx, 8
  00365	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  0036a	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
  00371	48 8b ca	 mov	 rcx, rdx
  00374	f3 a6		 repe cmpsb
  00376	75 0a		 jne	 SHORT $LN110@TestLegacy

; 1110 : 				{
; 1111 : 					if (crc != 0x7fb86805)

  00378	3d 05 68 b8 7f	 cmp	 eax, 2142791685		; 7fb86805H

; 1112 : 						return FALSE;
; 1113 : 					nTestsPerformed++;

  0037d	e9 24 fe ff ff	 jmp	 $LN230@TestLegacy
$LN110@TestLegacy:

; 1114 : 				}
; 1115 : 				else if (strcmp (name, "Triple DES") == 0)	// Deprecated/legacy

  00382	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00387	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0L@NEGMAKNF@Triple?5DES?$AA@FNODOBFM@
  0038e	b9 0b 00 00 00	 mov	 ecx, 11
  00393	f3 a6		 repe cmpsb
  00395	75 0a		 jne	 SHORT $LN107@TestLegacy

; 1116 : 				{
; 1117 : 					if (crc != 0x2b20bb84)

  00397	3d 84 bb 20 2b	 cmp	 eax, 723565444		; 2b20bb84H

; 1118 : 						return FALSE;
; 1119 : 					nTestsPerformed++;

  0039c	e9 05 fe ff ff	 jmp	 $LN230@TestLegacy
$LN107@TestLegacy:

; 1120 : 				}
; 1121 : 				else if (strcmp (name, "Twofish") == 0)

  003a1	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  003a6	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@
  003ad	48 8b ca	 mov	 rcx, rdx
  003b0	f3 a6		 repe cmpsb
  003b2	75 0a		 jne	 SHORT $LN104@TestLegacy

; 1122 : 				{
; 1123 : 					if (crc != 0xa9de0f0b)

  003b4	3d 0b 0f de a9	 cmp	 eax, -1445064949	; a9de0f0bH

; 1124 : 						return FALSE;
; 1125 : 					nTestsPerformed++;

  003b9	e9 e8 fd ff ff	 jmp	 $LN230@TestLegacy
$LN104@TestLegacy:

; 1126 : 				}
; 1127 : 				else if (strcmp (name, "AES-Twofish") == 0)

  003be	41 b8 0c 00 00
	00		 mov	 r8d, 12
  003c4	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  003c9	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
  003d0	49 8b c8	 mov	 rcx, r8
  003d3	f3 a6		 repe cmpsb
  003d5	75 0a		 jne	 SHORT $LN101@TestLegacy

; 1128 : 				{
; 1129 : 					if (crc != 0x4ed0fd80)

  003d7	3d 80 fd d0 4e	 cmp	 eax, 1322319232		; 4ed0fd80H

; 1130 : 						return FALSE;
; 1131 : 					nTestsPerformed++;

  003dc	e9 c5 fd ff ff	 jmp	 $LN230@TestLegacy
$LN101@TestLegacy:

; 1132 : 				}
; 1133 : 				else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  003e1	ba 14 00 00 00	 mov	 edx, 20
  003e6	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  003eb	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  003f2	48 8b ca	 mov	 rcx, rdx
  003f5	f3 a6		 repe cmpsb
  003f7	75 0a		 jne	 SHORT $LN98@TestLegacy

; 1134 : 				{
; 1135 : 					if (crc != 0xea04b3cf)

  003f9	3d cf b3 04 ea	 cmp	 eax, -368790577		; ea04b3cfH

; 1136 : 						return FALSE;
; 1137 : 					nTestsPerformed++;

  003fe	e9 a3 fd ff ff	 jmp	 $LN230@TestLegacy
$LN98@TestLegacy:

; 1138 : 				}
; 1139 : 				else if (strcmp (name, "Serpent-AES") == 0)

  00403	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00408	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
  0040f	49 8b c8	 mov	 rcx, r8
  00412	f3 a6		 repe cmpsb
  00414	75 0a		 jne	 SHORT $LN95@TestLegacy

; 1140 : 				{
; 1141 : 					if (crc != 0x0d33596a)

  00416	3d 6a 59 33 0d	 cmp	 eax, 221469034		; 0d33596aH

; 1142 : 						return FALSE;
; 1143 : 					nTestsPerformed++;

  0041b	e9 86 fd ff ff	 jmp	 $LN230@TestLegacy
$LN95@TestLegacy:

; 1144 : 				}
; 1145 : 				else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  00420	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00425	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
  0042c	48 8b ca	 mov	 rcx, rdx
  0042f	f3 a6		 repe cmpsb
  00431	75 0a		 jne	 SHORT $LN92@TestLegacy

; 1146 : 				{
; 1147 : 					if (crc != 0x2845d0e3)

  00433	3d e3 d0 45 28	 cmp	 eax, 675664099		; 2845d0e3H

; 1148 : 						return FALSE;
; 1149 : 					nTestsPerformed++;

  00438	e9 69 fd ff ff	 jmp	 $LN230@TestLegacy
$LN92@TestLegacy:

; 1150 : 				}
; 1151 : 				else if (strcmp (name, "Twofish-Serpent") == 0)

  0043d	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00442	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
  00449	b9 10 00 00 00	 mov	 ecx, 16
  0044e	f3 a6		 repe cmpsb
  00450	75 0d		 jne	 SHORT $LN89@TestLegacy

; 1152 : 				{
; 1153 : 					if (crc != 0xca65c5cd)

  00452	3d cd c5 65 ca	 cmp	 eax, -899299891		; ca65c5cdH
$LN231@TestLegacy:
  00457	0f 85 2d 03 00
	00		 jne	 $LN215@TestLegacy

; 1154 : 						return FALSE;
; 1155 : 					nTestsPerformed++;

  0045d	ff c3		 inc	 ebx
$LN89@TestLegacy:

; 1235 : 			}
; 1236 : 
; 1237 : 			if (crc == 0xb70b4c26)

  0045f	3d 26 4c 0b b7	 cmp	 eax, -1223996378	; b70b4c26H
  00464	0f 84 20 03 00
	00		 je	 $LN215@TestLegacy
$LN221@TestLegacy:

; 1238 : 				return FALSE;
; 1239 : 
; 1240 : 			DecryptDataUnits (buf, &unitNo, nbrUnits, ci);

  0046a	41 b9 02 00 00
	00		 mov	 r9d, 2
  00470	4c 8d 44 24 30	 lea	 r8, QWORD PTR unitNo$[rsp]
  00475	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  0047d	41 8d 49 ff	 lea	 ecx, QWORD PTR [r9-1]
  00481	4c 89 64 24 20	 mov	 QWORD PTR [rsp+32], r12
  00486	e8 00 00 00 00	 call	 EncryptionThreadPoolDoWork

; 1241 : 
; 1242 : 			if (GetCrc32 (buf, sizeof (buf)) != 0xb70b4c26)

  0048b	bf 00 04 00 00	 mov	 edi, 1024		; 00000400H
  00490	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00498	8b d7		 mov	 edx, edi
  0049a	e8 00 00 00 00	 call	 GetCrc32
  0049f	3d 26 4c 0b b7	 cmp	 eax, -1223996378	; b70b4c26H
  004a4	0f 85 e0 02 00
	00		 jne	 $LN215@TestLegacy

; 1243 : 				return FALSE;
; 1244 : 
; 1245 : 			nTestsPerformed++;
; 1246 : 
; 1247 : 			EncryptBuffer (buf, sizeof (buf), ci);

  004aa	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  004b2	4d 8b c4	 mov	 r8, r12
  004b5	48 8b d7	 mov	 rdx, rdi
  004b8	ff c3		 inc	 ebx
  004ba	e8 00 00 00 00	 call	 EncryptBuffer

; 1248 : 			crc = GetCrc32 (buf, sizeof (buf));

  004bf	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  004c7	8b d7		 mov	 edx, edi
  004c9	e8 00 00 00 00	 call	 GetCrc32

; 1249 : 
; 1250 : 			switch (ci->mode)

  004ce	41 8b 4c 24 04	 mov	 ecx, DWORD PTR [r12+4]
  004d3	83 f9 02	 cmp	 ecx, 2
  004d6	0f 84 84 01 00
	00		 je	 $LN47@TestLegacy
  004dc	83 c1 fd	 add	 ecx, -3			; fffffffdH
  004df	83 f9 02	 cmp	 ecx, 2
  004e2	0f 87 d8 01 00
	00		 ja	 $LN40@TestLegacy

; 1270 : 				}
; 1271 : 				break;
; 1272 : 
; 1273 : 			case CBC:		// Deprecated/legacy
; 1274 : 			case INNER_CBC:	// Deprecated/legacy
; 1275 : 			case OUTER_CBC:	// Deprecated/legacy
; 1276 : 				if (strcmp (name, "AES") == 0)

  004e8	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  004ed	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  004f4	b9 04 00 00 00	 mov	 ecx, 4
  004f9	f3 a6		 repe cmpsb
  004fb	75 17		 jne	 SHORT $LN37@TestLegacy

; 1277 : 				{
; 1278 : 					if (crc != 0x960f740e)

  004fd	3d 0e 74 0f 96	 cmp	 eax, -1777372146	; 960f740eH
$LN232@TestLegacy:
  00502	0f 85 82 02 00
	00		 jne	 $LN215@TestLegacy

; 1279 : 						return FALSE;
; 1280 : 					nTestsPerformed++;

  00508	be 01 00 00 00	 mov	 esi, 1
  0050d	03 de		 add	 ebx, esi
  0050f	e9 bc 01 00 00	 jmp	 $LN222@TestLegacy
$LN37@TestLegacy:

; 1281 : 				}
; 1282 : 				else if (strcmp (name, "Blowfish") == 0)	// Deprecated/legacy

  00514	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00519	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@
  00520	b9 09 00 00 00	 mov	 ecx, 9
  00525	f3 a6		 repe cmpsb
  00527	75 07		 jne	 SHORT $LN34@TestLegacy

; 1283 : 				{
; 1284 : 					if (crc != 0x7e1cfabb)

  00529	3d bb fa 1c 7e	 cmp	 eax, 2115828411		; 7e1cfabbH

; 1285 : 						return FALSE;
; 1286 : 					nTestsPerformed++;

  0052e	eb d2		 jmp	 SHORT $LN232@TestLegacy
$LN34@TestLegacy:

; 1287 : 				}
; 1288 : 				else if (strcmp (name, "CAST5") == 0)	// Deprecated/legacy

  00530	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00535	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_05LCFOLDPB@CAST5?$AA@FNODOBFM@
  0053c	b9 06 00 00 00	 mov	 ecx, 6
  00541	f3 a6		 repe cmpsb
  00543	75 07		 jne	 SHORT $LN31@TestLegacy

; 1289 : 				{
; 1290 : 					if (crc != 0xeaae21c8)

  00545	3d c8 21 ae ea	 cmp	 eax, -357686840		; eaae21c8H

; 1291 : 						return FALSE;
; 1292 : 					nTestsPerformed++;

  0054a	eb b6		 jmp	 SHORT $LN232@TestLegacy
$LN31@TestLegacy:

; 1293 : 				}
; 1294 : 				else if (strcmp (name, "Serpent") == 0)

  0054c	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00551	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
  00558	b9 08 00 00 00	 mov	 ecx, 8
  0055d	f3 a6		 repe cmpsb
  0055f	75 07		 jne	 SHORT $LN28@TestLegacy

; 1295 : 				{
; 1296 : 					if (crc != 0xa8139d62)

  00561	3d 62 9d 13 a8	 cmp	 eax, -1475109534	; a8139d62H

; 1297 : 						return FALSE;
; 1298 : 					nTestsPerformed++;

  00566	eb 9a		 jmp	 SHORT $LN232@TestLegacy
$LN28@TestLegacy:

; 1299 : 				}
; 1300 : 				else if (strcmp (name, "Triple DES") == 0)	// Deprecated/legacy

  00568	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  0056d	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0L@NEGMAKNF@Triple?5DES?$AA@FNODOBFM@
  00574	b9 0b 00 00 00	 mov	 ecx, 11
  00579	f3 a6		 repe cmpsb
  0057b	75 0a		 jne	 SHORT $LN25@TestLegacy

; 1301 : 				{
; 1302 : 					if (crc != 0xecf5d7d0)

  0057d	3d d0 d7 f5 ec	 cmp	 eax, -319432752		; ecf5d7d0H

; 1303 : 						return FALSE;
; 1304 : 					nTestsPerformed++;

  00582	e9 7b ff ff ff	 jmp	 $LN232@TestLegacy
$LN25@TestLegacy:

; 1305 : 				}
; 1306 : 				else if (strcmp (name, "AES-Blowfish") == 0)	// Deprecated/legacy

  00587	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  0058c	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0N@NEJJJADE@AES?9Blowfish?$AA@FNODOBFM@
  00593	b9 0d 00 00 00	 mov	 ecx, 13
  00598	f3 a6		 repe cmpsb
  0059a	75 0a		 jne	 SHORT $LN22@TestLegacy

; 1307 : 				{
; 1308 : 					if (crc != 0xb70171b6)

  0059c	3d b6 71 01 b7	 cmp	 eax, -1224642122	; b70171b6H

; 1309 : 						return FALSE;
; 1310 : 					nTestsPerformed++;

  005a1	e9 5c ff ff ff	 jmp	 $LN232@TestLegacy
$LN22@TestLegacy:

; 1311 : 				}
; 1312 : 				else if (strcmp (name, "AES-Blowfish-Serpent") == 0)	// Deprecated/legacy

  005a6	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  005ab	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0BF@GDBAFGNG@AES?9Blowfish?9Serpent?$AA@FNODOBFM@
  005b2	b9 15 00 00 00	 mov	 ecx, 21
  005b7	f3 a6		 repe cmpsb
  005b9	75 0a		 jne	 SHORT $LN19@TestLegacy

; 1313 : 				{
; 1314 : 					if (crc != 0x1e749a87)

  005bb	3d 87 9a 74 1e	 cmp	 eax, 510958215		; 1e749a87H

; 1315 : 						return FALSE;
; 1316 : 					nTestsPerformed++;

  005c0	e9 3d ff ff ff	 jmp	 $LN232@TestLegacy
$LN19@TestLegacy:

; 1317 : 				}
; 1318 : 				else if (strcmp (name, "AES-Twofish") == 0)

  005c5	41 b8 0c 00 00
	00		 mov	 r8d, 12
  005cb	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  005d0	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
  005d7	49 8b c8	 mov	 rcx, r8
  005da	f3 a6		 repe cmpsb
  005dc	75 0a		 jne	 SHORT $LN16@TestLegacy

; 1319 : 				{
; 1320 : 					if (crc != 0xb4b8bb9b)

  005de	3d 9b bb b8 b4	 cmp	 eax, -1262961765	; b4b8bb9bH

; 1321 : 						return FALSE;
; 1322 : 					nTestsPerformed++;

  005e3	e9 1a ff ff ff	 jmp	 $LN232@TestLegacy
$LN16@TestLegacy:

; 1323 : 				}
; 1324 : 				else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  005e8	ba 14 00 00 00	 mov	 edx, 20
  005ed	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  005f2	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  005f9	48 8b ca	 mov	 rcx, rdx
  005fc	f3 a6		 repe cmpsb
  005fe	75 0a		 jne	 SHORT $LN13@TestLegacy

; 1325 : 				{
; 1326 : 					if (crc != 0x76b6c1cb)

  00600	3d cb c1 b6 76	 cmp	 eax, 1991688651		; 76b6c1cbH

; 1327 : 						return FALSE;
; 1328 : 					nTestsPerformed++;

  00605	e9 f8 fe ff ff	 jmp	 $LN232@TestLegacy
$LN13@TestLegacy:

; 1329 : 				}
; 1330 : 				else if (strcmp (name, "Serpent-AES") == 0)

  0060a	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  0060f	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
  00616	49 8b c8	 mov	 rcx, r8
  00619	f3 a6		 repe cmpsb
  0061b	75 0a		 jne	 SHORT $LN10@TestLegacy

; 1331 : 				{
; 1332 : 					if (crc != 0x634f12ed)

  0061d	3d ed 12 4f 63	 cmp	 eax, 1666126573		; 634f12edH

; 1333 : 						return FALSE;
; 1334 : 					nTestsPerformed++;

  00622	e9 db fe ff ff	 jmp	 $LN232@TestLegacy
$LN10@TestLegacy:

; 1335 : 				}
; 1336 : 				else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  00627	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  0062c	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
  00633	48 8b ca	 mov	 rcx, rdx
  00636	f3 a6		 repe cmpsb
  00638	75 0a		 jne	 SHORT $LN7@TestLegacy

; 1337 : 				{
; 1338 : 					if (crc != 0xe54bc1b9)

  0063a	3d b9 c1 4b e5	 cmp	 eax, -448020039		; e54bc1b9H

; 1339 : 						return FALSE;
; 1340 : 					nTestsPerformed++;

  0063f	e9 be fe ff ff	 jmp	 $LN232@TestLegacy
$LN7@TestLegacy:

; 1341 : 				}
; 1342 : 				else if (strcmp (name, "Twofish-Serpent") == 0)

  00644	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00649	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
  00650	b9 10 00 00 00	 mov	 ecx, 16
  00655	f3 a6		 repe cmpsb
  00657	75 67		 jne	 SHORT $LN40@TestLegacy

; 1343 : 				{
; 1344 : 					if (crc != 0x21cdb382)

  00659	3d 82 b3 cd 21	 cmp	 eax, 567128962		; 21cdb382H

; 1345 : 						return FALSE;
; 1346 : 					nTestsPerformed++;
; 1347 : 				}
; 1348 : 				break;

  0065e	eb 58		 jmp	 SHORT $LN233@TestLegacy
$LN47@TestLegacy:

; 1251 : 			{
; 1252 : 			case LRW:		// Deprecated/legacy
; 1253 : 				if (strcmp (name, "AES") == 0)

  00660	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00665	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  0066c	b9 04 00 00 00	 mov	 ecx, 4
  00671	f3 a6		 repe cmpsb
  00673	75 0a		 jne	 SHORT $LN46@TestLegacy

; 1254 : 				{
; 1255 : 					if (crc != 0x5ae1e3d8)

  00675	3d d8 e3 e1 5a	 cmp	 eax, 1524753368		; 5ae1e3d8H

; 1256 : 						return FALSE;
; 1257 : 					nTestsPerformed++;

  0067a	e9 83 fe ff ff	 jmp	 $LN232@TestLegacy
$LN46@TestLegacy:

; 1258 : 				}
; 1259 : 				else if (strcmp (name, "Blowfish") == 0)	// Deprecated/legacy

  0067f	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00684	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_08KOMAHJJD@Blowfish?$AA@FNODOBFM@
  0068b	b9 09 00 00 00	 mov	 ecx, 9
  00690	f3 a6		 repe cmpsb
  00692	75 0a		 jne	 SHORT $LN43@TestLegacy

; 1260 : 				{
; 1261 : 					if (crc != 0x2738426f)

  00694	3d 6f 42 38 27	 cmp	 eax, 657998447		; 2738426fH

; 1262 : 						return FALSE;
; 1263 : 					nTestsPerformed++;

  00699	e9 64 fe ff ff	 jmp	 $LN232@TestLegacy
$LN43@TestLegacy:

; 1264 : 				}
; 1265 : 				else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  0069e	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  006a3	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  006aa	b9 14 00 00 00	 mov	 ecx, 20
  006af	f3 a6		 repe cmpsb
  006b1	75 0d		 jne	 SHORT $LN40@TestLegacy

; 1266 : 				{
; 1267 : 					if (crc != 0x14f2948a)

  006b3	3d 8a 94 f2 14	 cmp	 eax, 351442058		; 14f2948aH
$LN233@TestLegacy:
  006b8	0f 85 cc 00 00
	00		 jne	 $LN215@TestLegacy

; 1268 : 						return FALSE;
; 1269 : 					nTestsPerformed++;

  006be	ff c3		 inc	 ebx
$LN40@TestLegacy:

; 1349 : 			}
; 1350 : 
; 1351 : 			if (crc == 0xb70b4c26)

  006c0	3d 26 4c 0b b7	 cmp	 eax, -1223996378	; b70b4c26H
  006c5	0f 84 bf 00 00
	00		 je	 $LN215@TestLegacy
  006cb	be 01 00 00 00	 mov	 esi, 1
$LN222@TestLegacy:

; 1352 : 				return FALSE;
; 1353 : 
; 1354 : 			DecryptBuffer (buf, sizeof (buf), ci);

  006d0	bf 00 04 00 00	 mov	 edi, 1024		; 00000400H
  006d5	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  006dd	4d 8b c4	 mov	 r8, r12
  006e0	48 8b d7	 mov	 rdx, rdi
  006e3	e8 00 00 00 00	 call	 DecryptBuffer

; 1355 : 
; 1356 : 			if (GetCrc32 (buf, sizeof (buf)) != 0xb70b4c26)

  006e8	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  006f0	8b d7		 mov	 edx, edi
  006f2	e8 00 00 00 00	 call	 GetCrc32
  006f7	3d 26 4c 0b b7	 cmp	 eax, -1223996378	; b70b4c26H
  006fc	0f 85 88 00 00
	00		 jne	 $LN215@TestLegacy

; 1357 : 				return FALSE;
; 1358 : 
; 1359 : 			nTestsPerformed++;

  00702	03 de		 add	 ebx, esi
  00704	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:EncryptionAlgorithms
$LN132@TestLegacy:
  0070b	49 63 3c 24	 movsxd	 rdi, DWORD PTR [r12]
  0070f	48 8b cd	 mov	 rcx, rbp
  00712	48 8b d7	 mov	 rdx, rdi
  00715	48 6b d2 0b	 imul	 rdx, 11
  00719	41 8b 44 90 10	 mov	 eax, DWORD PTR [r8+rdx*4+16]
  0071e	eb 19		 jmp	 SHORT $LN228@TestLegacy

; 1063 : 
; 1064 : 		// Test all deprecated modes of operation
; 1065 : 		for (ci->mode = EAGetFirstMode (ci->ea);
; 1066 : 			ci->mode != 0;
; 1067 : 			ci->mode = EAGetNextMode (ci->ea, ci->mode))

$LL159@TestLegacy:
  00720	48 03 ce	 add	 rcx, rsi
  00723	41 3b 44 24 04	 cmp	 eax, DWORD PTR [r12+4]
  00728	74 55		 je	 SHORT $LN171@TestLegacy
  0072a	48 8b c7	 mov	 rax, rdi
  0072d	48 6b c0 0b	 imul	 rax, 11
  00731	48 03 c1	 add	 rax, rcx
  00734	41 8b 44 80 10	 mov	 eax, DWORD PTR [r8+rax*4+16]
$LN228@TestLegacy:
  00739	3b c5		 cmp	 eax, ebp
  0073b	75 e3		 jne	 SHORT $LL159@TestLegacy
  0073d	8b cd		 mov	 ecx, ebp
$LN160@TestLegacy:
  0073f	41 89 4c 24 04	 mov	 DWORD PTR [r12+4], ecx
  00744	3b cd		 cmp	 ecx, ebp
  00746	0f 85 aa f9 ff
	ff		 jne	 $LL133@TestLegacy
  0074c	49 8d 74 24 08	 lea	 rsi, QWORD PTR [r12+8]
$LN136@TestLegacy:

; 1054 : 
; 1055 : 	// Test all EAs
; 1056 : 	for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  00751	41 8b 14 24	 mov	 edx, DWORD PTR [r12]
  00755	ff c2		 inc	 edx
  00757	48 63 c2	 movsxd	 rax, edx
  0075a	48 6b c0 2c	 imul	 rax, 44			; 0000002cH
  0075e	42 8b 04 00	 mov	 eax, DWORD PTR [rax+r8]
  00762	f7 d8		 neg	 eax
  00764	1b c9		 sbb	 ecx, ecx
  00766	23 ca		 and	 ecx, edx
  00768	41 89 0c 24	 mov	 DWORD PTR [r12], ecx
  0076c	3b cd		 cmp	 ecx, ebp
  0076e	0f 85 13 f9 ff
	ff		 jne	 $LN229@TestLegacy

; 1360 : 		}
; 1361 : 	}
; 1362 : 	return (nTestsPerformed == 86);

  00774	83 fb 56	 cmp	 ebx, 86			; 00000056H
  00777	40 0f 94 c5	 sete	 bpl
  0077b	8b c5		 mov	 eax, ebp
  0077d	eb 0d		 jmp	 SHORT $LN144@TestLegacy
$LN171@TestLegacy:

; 1063 : 
; 1064 : 		// Test all deprecated modes of operation
; 1065 : 		for (ci->mode = EAGetFirstMode (ci->ea);
; 1066 : 			ci->mode != 0;
; 1067 : 			ci->mode = EAGetNextMode (ci->ea, ci->mode))

  0077f	48 8d 04 0a	 lea	 rax, QWORD PTR [rdx+rcx]
  00783	41 8b 4c 80 10	 mov	 ecx, DWORD PTR [r8+rax*4+16]
  00788	eb b5		 jmp	 SHORT $LN160@TestLegacy
$LN215@TestLegacy:

; 1062 : 			return FALSE;

  0078a	33 c0		 xor	 eax, eax
$LN144@TestLegacy:

; 1363 : }

  0078c	48 8b 8c 24 80
	04 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00794	48 33 cc	 xor	 rcx, rsp
  00797	e8 00 00 00 00	 call	 __security_check_cookie
  0079c	4c 8d 9c 24 90
	04 00 00	 lea	 r11, QWORD PTR [rsp+1168]
  007a4	49 8b 5b 38	 mov	 rbx, QWORD PTR [r11+56]
  007a8	49 8b 6b 40	 mov	 rbp, QWORD PTR [r11+64]
  007ac	49 8b 73 48	 mov	 rsi, QWORD PTR [r11+72]
  007b0	49 8b e3	 mov	 rsp, r11
  007b3	41 5f		 pop	 r15
  007b5	41 5e		 pop	 r14
  007b7	41 5d		 pop	 r13
  007b9	41 5c		 pop	 r12
  007bb	5f		 pop	 rdi
  007bc	c3		 ret	 0
TestLegacySectorBufEncryption ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	TestSectorBufEncryption
;	COMDAT pdata
; File c:\users\public\desktop\projects\ciphershed\src\common\crypto.c
pdata	SEGMENT
$pdata$TestSectorBufEncryption DD imagerel $LN237
	DD	imagerel $LN237+1861
	DD	imagerel $unwind$TestSectorBufEncryption
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TestSectorBufEncryption DD 0d3119H
	DD	011b641fH
	DD	011a541fH
	DD	0119341fH
	DD	0112011fH
	DD	0e016f018H
	DD	0c012d014H
	DD	07010H
	DD	imagerel __GSHandlerCheck
	DD	0880H
; Function compile flags: /Ogspy
; File c:\users\public\desktop\projects\ciphershed\src\common\tests.c
xdata	ENDS
;	COMDAT TestSectorBufEncryption
_TEXT	SEGMENT
unitNo$ = 48
name$ = 64
buf$ = 128
__$ArrayPad$ = 2176
ci$ = 2240
TestSectorBufEncryption PROC				; COMDAT

; 638  : {

$LN237:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 81 ec 90 08
	00 00		 sub	 rsp, 2192		; 00000890H
  0001f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00026	48 33 c4	 xor	 rax, rsp
  00029	48 89 84 24 80
	08 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 639  : 	unsigned char buf [ENCRYPTION_DATA_UNIT_SIZE * 4];
; 640  : 	unsigned int i;
; 641  : 	char name[64];
; 642  : 	unsigned __int32 crc;
; 643  : 	UINT64_STRUCT unitNo;
; 644  : 	uint32 nbrUnits;
; 645  : 	unsigned __int64 writeOffset;
; 646  : 	int testCase = 0;

  00031	45 33 e4	 xor	 r12d, r12d
  00034	4c 8b f1	 mov	 r14, rcx
  00037	45 8b ec	 mov	 r13d, r12d

; 647  : 	int nTestsPerformed = 0;

  0003a	41 8b dc	 mov	 ebx, r12d

; 648  : 
; 649  : 	static unsigned char key1[] =
; 650  : 	{ 
; 651  : 		0x27, 0x18, 0x28, 0x18, 0x28, 0x45, 0x90, 0x45, 0x23, 0x53, 0x60, 0x28, 0x74, 0x71, 0x35, 0x26, 0x62, 0x49, 0x77, 0x57, 0x24, 0x70, 0x93, 0x69, 0x99, 0x59, 0x57, 0x49, 0x66, 0x96, 0x76, 0x27,
; 652  : 		0x31, 0x41, 0x59, 0x26, 0x53, 0x58, 0x97, 0x93, 0x23, 0x84, 0x62, 0x64, 0x33, 0x83, 0x27, 0x95, 0x02, 0x88, 0x41, 0x97, 0x16, 0x93, 0x99, 0x37, 0x51, 0x05, 0x82, 0x09, 0x74, 0x94, 0x45, 0x92,
; 653  : 		0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13
; 654  : 	};
; 655  : 
; 656  : 	if (!TestLegacySectorBufEncryption (ci))

  0003d	e8 00 00 00 00	 call	 TestLegacySectorBufEncryption
  00042	41 3b c4	 cmp	 eax, r12d
  00045	75 07		 jne	 SHORT $LN148@TestSector
$LN171@TestSector:

; 657  : 		return FALSE;

  00047	33 c0		 xor	 eax, eax
  00049	e9 c6 06 00 00	 jmp	 $LN149@TestSector
$LN148@TestSector:

; 658  : 
; 659  : 
; 660  : 	/* Encryption/decryption of data units (typically, volume data sectors) */
; 661  : 
; 662  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;
; 663  : 
; 664  : 	ci->mode = XTS;	// Other modes of operation are tested in TestLegacySectorBufEncryption()

  0004e	41 c7 46 04 01
	00 00 00	 mov	 DWORD PTR [r14+4], 1

; 665  : 
; 666  : 	/* The buffer can accommodate 4 data units and we'll test 4 cases by "scrolling". The data unit 0xFFFFFFFFFF
; 667  : 	will "move" from the start of the buffer to its end. For a 512-byte data unit, the byte offset 562949953420800
; 668  : 	corresponds to the data unit 0xFFFFFFFFFF. */
; 669  : 	for (writeOffset = 562949953420800ULL; 
; 670  : 		writeOffset > 562949953420800ULL - nbrUnits * ENCRYPTION_DATA_UNIT_SIZE; 
; 671  : 		writeOffset -= ENCRYPTION_DATA_UNIT_SIZE)

  00056	bd 58 dd 5e 9f	 mov	 ebp, -1621172904	; 9f5edd58H
  0005b	49 bf 00 fe ff
	ff ff ff 01 00	 mov	 r15, 562949953420800	; 0001fffffffffe00H
$LL147@TestSector:

; 672  : 	{
; 673  : 		unitNo.Value = writeOffset / ENCRYPTION_DATA_UNIT_SIZE;

  00065	49 8b c7	 mov	 rax, r15

; 674  : 
; 675  : 		// Test all EAs that support this mode of operation
; 676  : 		for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  00068	41 c7 06 01 00
	00 00		 mov	 DWORD PTR [r14], 1
  0006f	48 c1 e8 09	 shr	 rax, 9
  00073	48 89 44 24 30	 mov	 QWORD PTR unitNo$[rsp], rax
$LL144@TestSector:

; 677  : 		{
; 678  : 			if (!EAIsModeSupported (ci->ea, ci->mode))

  00078	41 8b 56 04	 mov	 edx, DWORD PTR [r14+4]
  0007c	41 8b 0e	 mov	 ecx, DWORD PTR [r14]
  0007f	e8 00 00 00 00	 call	 EAIsModeSupported
  00084	41 3b c4	 cmp	 eax, r12d
  00087	0f 84 1a 04 00
	00		 je	 $LN143@TestSector

; 679  : 				continue;
; 680  : 
; 681  : 			EAGetName (name, ci->ea);

  0008d	41 8b 16	 mov	 edx, DWORD PTR [r14]
  00090	48 8d 4c 24 40	 lea	 rcx, QWORD PTR name$[rsp]
  00095	e8 00 00 00 00	 call	 EAGetName

; 682  : 
; 683  : 			if (EAInit (ci->ea, key1, ci->ks) != ERR_SUCCESS)

  0009a	41 8b 0e	 mov	 ecx, DWORD PTR [r14]
  0009d	4d 8d 46 08	 lea	 r8, QWORD PTR [r14+8]
  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?key1@?1??TestSectorBufEncryption@@9@9
  000a8	e8 00 00 00 00	 call	 EAInit
  000ad	41 3b c4	 cmp	 eax, r12d
  000b0	75 95		 jne	 SHORT $LN171@TestSector

; 684  : 				return FALSE;
; 685  : 
; 686  : 			for (i = 0; i < sizeof (ci->k2); i++)

  000b2	49 8d 8e a8 42
	00 00		 lea	 rcx, QWORD PTR [r14+17064]
  000b9	41 8b c4	 mov	 eax, r12d
  000bc	48 8b d1	 mov	 rdx, rcx
$LL139@TestSector:

; 687  : 				ci->k2[i] = (unsigned char) i;

  000bf	88 02		 mov	 BYTE PTR [rdx], al
  000c1	ff c0		 inc	 eax
  000c3	48 ff c2	 inc	 rdx
  000c6	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  000cb	72 f2		 jb	 SHORT $LL139@TestSector

; 688  : 
; 689  : 			memcpy (&ci->k2, XTS_vectors[XTS_TEST_COUNT-1].key2, sizeof (XTS_vectors[XTS_TEST_COUNT-1].key2));

  000cd	48 8d 15 50 11
	00 00		 lea	 rdx, OFFSET FLAT:XTS_vectors+4432
  000d4	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  000da	e8 00 00 00 00	 call	 memcpy

; 690  : 
; 691  : 			if (!EAInitMode (ci))

  000df	49 8b ce	 mov	 rcx, r14
  000e2	e8 00 00 00 00	 call	 EAInitMode
  000e7	41 3b c4	 cmp	 eax, r12d
  000ea	0f 84 57 ff ff
	ff		 je	 $LN171@TestSector

; 692  : 				return FALSE;
; 693  : 
; 694  : 			// Each data unit will contain the same plaintext
; 695  : 			for (i = 0; i < nbrUnits; i++)
; 696  : 			{
; 697  : 				memcpy ((unsigned char *) buf + i * ENCRYPTION_DATA_UNIT_SIZE, 
; 698  : 					XTS_vectors[XTS_TEST_COUNT-1].plaintext, 
; 699  : 					ENCRYPTION_DATA_UNIT_SIZE);

  000f0	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  000f8	48 8d 15 7c 11
	00 00		 lea	 rdx, OFFSET FLAT:XTS_vectors+4476
  000ff	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  00105	e8 00 00 00 00	 call	 memcpy
  0010a	48 8d bc 24 80
	02 00 00	 lea	 rdi, QWORD PTR buf$[rsp+512]
  00112	48 8d b4 24 80
	00 00 00	 lea	 rsi, QWORD PTR buf$[rsp]
  0011a	b9 c0 00 00 00	 mov	 ecx, 192		; 000000c0H

; 700  : 			}
; 701  : 
; 702  : 			EncryptDataUnits (buf, &unitNo, nbrUnits, ci);

  0011f	4c 8d 44 24 30	 lea	 r8, QWORD PTR unitNo$[rsp]
  00124	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  0012c	f3 48 a5	 rep movsq
  0012f	41 b9 04 00 00
	00		 mov	 r9d, 4
  00135	33 c9		 xor	 ecx, ecx
  00137	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  0013c	e8 00 00 00 00	 call	 EncryptionThreadPoolDoWork

; 703  : 
; 704  : 			crc = GetCrc32 (buf, sizeof (buf));

  00141	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00149	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  0014e	e8 00 00 00 00	 call	 GetCrc32

; 705  : 
; 706  : 			if (strcmp (name, "AES") == 0)

  00153	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00158	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  0015f	b9 04 00 00 00	 mov	 ecx, 4
  00164	8b e8		 mov	 ebp, eax
  00166	f3 a6		 repe cmpsb
  00168	75 75		 jne	 SHORT $LN132@TestSector

; 707  : 			{
; 708  : 				// Verify the ciphertext of the "moving" data unit using the IEEE test vector #14
; 709  : 				if (memcmp (XTS_vectors[XTS_TEST_COUNT-1].ciphertext,
; 710  : 					(unsigned char *) buf + testCase * ENCRYPTION_DATA_UNIT_SIZE,
; 711  : 					ENCRYPTION_DATA_UNIT_SIZE) != 0)

  0016a	41 8b cd	 mov	 ecx, r13d
  0016d	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  00173	c1 e1 09	 shl	 ecx, 9
  00176	48 63 c9	 movsxd	 rcx, ecx
  00179	48 8d 94 0c 80
	00 00 00	 lea	 rdx, QWORD PTR buf$[rsp+rcx]
  00181	48 8d 0d 7c 13
	00 00		 lea	 rcx, OFFSET FLAT:XTS_vectors+4988
  00188	e8 00 00 00 00	 call	 memcmp
  0018d	41 3b c4	 cmp	 eax, r12d
  00190	0f 85 b1 fe ff
	ff		 jne	 $LN171@TestSector

; 712  : 				{
; 713  : 					return FALSE;
; 714  : 				}
; 715  : 
; 716  : 				// CRC of all data units in the buffer for each test case
; 717  : 				switch (testCase)

  00196	41 8b cd	 mov	 ecx, r13d
  00199	45 3b ec	 cmp	 r13d, r12d
  0019c	74 36		 je	 SHORT $LN128@TestSector
  0019e	83 e9 01	 sub	 ecx, 1
  001a1	74 29		 je	 SHORT $LN126@TestSector
  001a3	83 e9 01	 sub	 ecx, 1
  001a6	74 1c		 je	 SHORT $LN124@TestSector
  001a8	83 f9 01	 cmp	 ecx, 1
  001ab	0f 85 a8 02 00
	00		 jne	 $LN45@TestSector

; 734  : 				case 3:
; 735  : 					if (crc != 0x10473dc9)

  001b1	81 fd c9 3d 47
	10		 cmp	 ebp, 273104329		; 10473dc9H
$LN234@TestSector:
  001b7	0f 85 8a fe ff
	ff		 jne	 $LN171@TestSector

; 736  : 						return FALSE;
; 737  : 					nTestsPerformed++;

  001bd	ff c3		 inc	 ebx

; 738  : 					break;

  001bf	e9 a1 02 00 00	 jmp	 $LN226@TestSector
$LN124@TestSector:

; 729  : 				case 2:
; 730  : 					if (crc != 0xe058f5a2)

  001c4	81 fd a2 f5 58
	e0		 cmp	 ebp, -531040862		; e058f5a2H

; 731  : 						return FALSE;
; 732  : 					nTestsPerformed++;
; 733  : 					break;

  001ca	eb eb		 jmp	 SHORT $LN234@TestSector
$LN126@TestSector:

; 721  : 						return FALSE;
; 722  : 					nTestsPerformed++;
; 723  : 					break;
; 724  : 				case 1:
; 725  : 					if (crc != 0xea28ea34)

  001cc	81 fd 34 ea 28
	ea		 cmp	 ebp, -366417356		; ea28ea34H

; 726  : 						return FALSE;
; 727  : 					nTestsPerformed++;
; 728  : 					break;

  001d2	eb e3		 jmp	 SHORT $LN234@TestSector
$LN128@TestSector:

; 718  : 				{
; 719  : 				case 0: 
; 720  : 					if (crc != 0x888f2990)

  001d4	81 fd 90 29 8f
	88		 cmp	 ebp, -2003883632	; 888f2990H

; 739  : 				}
; 740  : 			}
; 741  : 			else if (strcmp (name, "Serpent") == 0)

  001da	e9 72 02 00 00	 jmp	 $LN235@TestSector
$LN132@TestSector:
  001df	b8 08 00 00 00	 mov	 eax, 8
  001e4	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  001e9	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
  001f0	48 8b c8	 mov	 rcx, rax
  001f3	f3 a6		 repe cmpsb
  001f5	75 3e		 jne	 SHORT $LN119@TestSector

; 742  : 			{
; 743  : 				switch (testCase)

  001f7	41 8b cd	 mov	 ecx, r13d
  001fa	45 3b ec	 cmp	 r13d, r12d
  001fd	74 2b		 je	 SHORT $LN116@TestSector
  001ff	83 e9 01	 sub	 ecx, 1
  00202	74 1e		 je	 SHORT $LN114@TestSector
  00204	83 e9 01	 sub	 ecx, 1
  00207	74 11		 je	 SHORT $LN112@TestSector
  00209	83 f9 01	 cmp	 ecx, 1
  0020c	0f 85 47 02 00
	00		 jne	 $LN45@TestSector

; 760  : 				case 3:
; 761  : 					if (crc != 0xb5263e0c)

  00212	81 fd 0c 3e 26
	b5		 cmp	 ebp, -1255784948	; b5263e0cH

; 762  : 						return FALSE;
; 763  : 					nTestsPerformed++;
; 764  : 					break;

  00218	eb 9d		 jmp	 SHORT $LN234@TestSector
$LN112@TestSector:

; 755  : 				case 2:
; 756  : 					if (crc != 0xc7b9fca5)

  0021a	81 fd a5 fc b9
	c7		 cmp	 ebp, -944112475		; c7b9fca5H

; 757  : 						return FALSE;
; 758  : 					nTestsPerformed++;
; 759  : 					break;

  00220	eb 95		 jmp	 SHORT $LN234@TestSector
$LN114@TestSector:

; 747  : 						return FALSE;
; 748  : 					nTestsPerformed++;
; 749  : 					break;
; 750  : 				case 1:
; 751  : 					if (crc != 0x357baaaa)

  00222	81 fd aa aa 7b
	35		 cmp	 ebp, 897297066		; 357baaaaH

; 752  : 						return FALSE;
; 753  : 					nTestsPerformed++;
; 754  : 					break;

  00228	eb 8d		 jmp	 SHORT $LN234@TestSector
$LN116@TestSector:

; 744  : 				{
; 745  : 				case 0:
; 746  : 					if (crc != 0x7edfecb3)

  0022a	81 fd b3 ec df
	7e		 cmp	 ebp, 2128604339		; 7edfecb3H

; 765  : 				}
; 766  : 			}
; 767  : 			else if (strcmp (name, "Twofish") == 0)

  00230	e9 1c 02 00 00	 jmp	 $LN235@TestSector
$LN119@TestSector:
  00235	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  0023a	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@
  00241	48 8b c8	 mov	 rcx, rax
  00244	f3 a6		 repe cmpsb
  00246	75 47		 jne	 SHORT $LN107@TestSector

; 768  : 			{
; 769  : 				switch (testCase)

  00248	41 8b cd	 mov	 ecx, r13d
  0024b	45 3b ec	 cmp	 r13d, r12d
  0024e	74 34		 je	 SHORT $LN104@TestSector
  00250	83 e9 01	 sub	 ecx, 1
  00253	74 24		 je	 SHORT $LN102@TestSector
  00255	83 e9 01	 sub	 ecx, 1
  00258	74 14		 je	 SHORT $LN100@TestSector
  0025a	83 f9 01	 cmp	 ecx, 1
  0025d	0f 85 f6 01 00
	00		 jne	 $LN45@TestSector

; 786  : 				case 3:
; 787  : 					if (crc != 0xb1c45759)

  00263	81 fd 59 57 c4
	b1		 cmp	 ebp, -1312532647	; b1c45759H

; 788  : 						return FALSE;
; 789  : 					nTestsPerformed++;
; 790  : 					break;

  00269	e9 49 ff ff ff	 jmp	 $LN234@TestSector
$LN100@TestSector:

; 781  : 				case 2:
; 782  : 					if (crc != 0x6bee346d)

  0026e	81 fd 6d 34 ee
	6b		 cmp	 ebp, 1810773101		; 6bee346dH

; 783  : 						return FALSE;
; 784  : 					nTestsPerformed++;
; 785  : 					break;

  00274	e9 3e ff ff ff	 jmp	 $LN234@TestSector
$LN102@TestSector:

; 773  : 						return FALSE;
; 774  : 					nTestsPerformed++;
; 775  : 					break;
; 776  : 				case 1:
; 777  : 					if (crc != 0x2895cc47)

  00279	81 fd 47 cc 95
	28		 cmp	 ebp, 680905799		; 2895cc47H

; 778  : 						return FALSE;
; 779  : 					nTestsPerformed++;
; 780  : 					break;

  0027f	e9 33 ff ff ff	 jmp	 $LN234@TestSector
$LN104@TestSector:

; 770  : 				{
; 771  : 				case 0:
; 772  : 					if (crc != 0x91525124)

  00284	81 fd 24 51 52
	91		 cmp	 ebp, -1856876252	; 91525124H

; 791  : 				}
; 792  : 			}
; 793  : 			else if (strcmp (name, "AES-Twofish") == 0)

  0028a	e9 c2 01 00 00	 jmp	 $LN235@TestSector
$LN107@TestSector:
  0028f	b8 0c 00 00 00	 mov	 eax, 12
  00294	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00299	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
  002a0	48 8b c8	 mov	 rcx, rax
  002a3	f3 a6		 repe cmpsb
  002a5	75 47		 jne	 SHORT $LN95@TestSector

; 794  : 			{
; 795  : 				switch (testCase)

  002a7	41 8b cd	 mov	 ecx, r13d
  002aa	45 3b ec	 cmp	 r13d, r12d
  002ad	74 34		 je	 SHORT $LN92@TestSector
  002af	83 e9 01	 sub	 ecx, 1
  002b2	74 24		 je	 SHORT $LN90@TestSector
  002b4	83 e9 01	 sub	 ecx, 1
  002b7	74 14		 je	 SHORT $LN88@TestSector
  002b9	83 f9 01	 cmp	 ecx, 1
  002bc	0f 85 97 01 00
	00		 jne	 $LN45@TestSector

; 812  : 				case 3:
; 813  : 					if (crc != 0xf16fd8c5)

  002c2	81 fd c5 d8 6f
	f1		 cmp	 ebp, -244328251		; f16fd8c5H

; 814  : 						return FALSE;
; 815  : 					nTestsPerformed++;
; 816  : 					break;

  002c8	e9 ea fe ff ff	 jmp	 $LN234@TestSector
$LN88@TestSector:

; 807  : 				case 2:
; 808  : 					if (crc != 0x88db8de5)

  002cd	81 fd e5 8d db
	88		 cmp	 ebp, -1998877211	; 88db8de5H

; 809  : 						return FALSE;
; 810  : 					nTestsPerformed++;
; 811  : 					break;

  002d3	e9 df fe ff ff	 jmp	 $LN234@TestSector
$LN90@TestSector:

; 799  : 						return FALSE;
; 800  : 					nTestsPerformed++;
; 801  : 					break;
; 802  : 				case 1:
; 803  : 					if (crc != 0x69052c4c)

  002d8	81 fd 4c 2c 05
	69		 cmp	 ebp, 1761946700		; 69052c4cH

; 804  : 						return FALSE;
; 805  : 					nTestsPerformed++;
; 806  : 					break;

  002de	e9 d4 fe ff ff	 jmp	 $LN234@TestSector
$LN92@TestSector:

; 796  : 				{
; 797  : 				case 0:
; 798  : 					if (crc != 0x6cea7fa2)

  002e3	81 fd a2 7f ea
	6c		 cmp	 ebp, 1827307426		; 6cea7fa2H

; 817  : 				}
; 818  : 			}
; 819  : 			else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  002e9	e9 63 01 00 00	 jmp	 $LN235@TestSector
$LN95@TestSector:
  002ee	ba 14 00 00 00	 mov	 edx, 20
  002f3	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  002f8	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  002ff	48 8b ca	 mov	 rcx, rdx
  00302	f3 a6		 repe cmpsb
  00304	75 47		 jne	 SHORT $LN83@TestSector

; 820  : 			{
; 821  : 				switch (testCase)

  00306	41 8b cd	 mov	 ecx, r13d
  00309	45 3b ec	 cmp	 r13d, r12d
  0030c	74 34		 je	 SHORT $LN80@TestSector
  0030e	83 e9 01	 sub	 ecx, 1
  00311	74 24		 je	 SHORT $LN78@TestSector
  00313	83 e9 01	 sub	 ecx, 1
  00316	74 14		 je	 SHORT $LN76@TestSector
  00318	83 f9 01	 cmp	 ecx, 1
  0031b	0f 85 38 01 00
	00		 jne	 $LN45@TestSector

; 838  : 				case 3:
; 839  : 					if (crc != 0xdadedff7)

  00321	81 fd f7 df de
	da		 cmp	 ebp, -622927881		; dadedff7H

; 840  : 						return FALSE;
; 841  : 					nTestsPerformed++;
; 842  : 					break;

  00327	e9 8b fe ff ff	 jmp	 $LN234@TestSector
$LN76@TestSector:

; 833  : 				case 2:
; 834  : 					if (crc != 0xdf0ea03e)

  0032c	81 fd 3e a0 0e
	df		 cmp	 ebp, -552689602		; df0ea03eH

; 835  : 						return FALSE;
; 836  : 					nTestsPerformed++;
; 837  : 					break;

  00332	e9 80 fe ff ff	 jmp	 $LN234@TestSector
$LN78@TestSector:

; 825  : 						return FALSE;
; 826  : 					nTestsPerformed++;
; 827  : 					break;
; 828  : 				case 1:
; 829  : 					if (crc != 0xdbf76412)

  00337	81 fd 12 64 f7
	db		 cmp	 ebp, -604543982		; dbf76412H

; 830  : 						return FALSE;
; 831  : 					nTestsPerformed++;
; 832  : 					break;

  0033d	e9 75 fe ff ff	 jmp	 $LN234@TestSector
$LN80@TestSector:

; 822  : 				{
; 823  : 				case 0:
; 824  : 					if (crc != 0xa2d7d82a)

  00342	81 fd 2a d8 d7
	a2		 cmp	 ebp, -1562912726	; a2d7d82aH

; 843  : 				}
; 844  : 			}
; 845  : 			else if (strcmp (name, "Serpent-AES") == 0)

  00348	e9 04 01 00 00	 jmp	 $LN235@TestSector
$LN83@TestSector:
  0034d	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00352	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
  00359	48 8b c8	 mov	 rcx, rax
  0035c	f3 a6		 repe cmpsb
  0035e	75 47		 jne	 SHORT $LN71@TestSector

; 846  : 			{
; 847  : 				switch (testCase)

  00360	41 8b cd	 mov	 ecx, r13d
  00363	45 3b ec	 cmp	 r13d, r12d
  00366	74 34		 je	 SHORT $LN68@TestSector
  00368	83 e9 01	 sub	 ecx, 1
  0036b	74 24		 je	 SHORT $LN66@TestSector
  0036d	83 e9 01	 sub	 ecx, 1
  00370	74 14		 je	 SHORT $LN64@TestSector
  00372	83 f9 01	 cmp	 ecx, 1
  00375	0f 85 de 00 00
	00		 jne	 $LN45@TestSector

; 864  : 				case 3:
; 865  : 					if (crc != 0x8a79fa2c)

  0037b	81 fd 2c fa 79
	8a		 cmp	 ebp, -1971717588	; 8a79fa2cH

; 866  : 						return FALSE;
; 867  : 					nTestsPerformed++;
; 868  : 					break;

  00381	e9 31 fe ff ff	 jmp	 $LN234@TestSector
$LN64@TestSector:

; 859  : 				case 2:
; 860  : 					if (crc != 0x39f83cd9)

  00386	81 fd d9 3c f8
	39		 cmp	 ebp, 972569817		; 39f83cd9H

; 861  : 						return FALSE;
; 862  : 					nTestsPerformed++;
; 863  : 					break;

  0038c	e9 26 fe ff ff	 jmp	 $LN234@TestSector
$LN66@TestSector:

; 851  : 						return FALSE;
; 852  : 					nTestsPerformed++;
; 853  : 					break;
; 854  : 				case 1:
; 855  : 					if (crc != 0x0e5717d2)

  00391	81 fd d2 17 57
	0e		 cmp	 ebp, 240588754		; 0e5717d2H

; 856  : 						return FALSE;
; 857  : 					nTestsPerformed++;
; 858  : 					break;

  00397	e9 1b fe ff ff	 jmp	 $LN234@TestSector
$LN68@TestSector:

; 848  : 				{
; 849  : 				case 0:
; 850  : 					if (crc != 0x6dd133b3)

  0039c	81 fd b3 33 d1
	6d		 cmp	 ebp, 1842426803		; 6dd133b3H

; 869  : 				}
; 870  : 			}
; 871  : 			else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  003a2	e9 aa 00 00 00	 jmp	 $LN235@TestSector
$LN71@TestSector:
  003a7	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  003ac	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
  003b3	48 8b ca	 mov	 rcx, rdx
  003b6	f3 a6		 repe cmpsb
  003b8	75 44		 jne	 SHORT $LN59@TestSector

; 872  : 			{
; 873  : 				switch (testCase)

  003ba	41 8b cd	 mov	 ecx, r13d
  003bd	45 3b ec	 cmp	 r13d, r12d
  003c0	74 34		 je	 SHORT $LN56@TestSector
  003c2	83 e9 01	 sub	 ecx, 1
  003c5	74 24		 je	 SHORT $LN54@TestSector
  003c7	83 e9 01	 sub	 ecx, 1
  003ca	74 14		 je	 SHORT $LN52@TestSector
  003cc	83 f9 01	 cmp	 ecx, 1
  003cf	0f 85 84 00 00
	00		 jne	 $LN45@TestSector

; 890  : 				case 3:
; 891  : 					if (crc != 0xcac7bdc7)

  003d5	81 fd c7 bd c7
	ca		 cmp	 ebp, -892879417		; cac7bdc7H

; 892  : 						return FALSE;
; 893  : 					nTestsPerformed++;
; 894  : 					break;

  003db	e9 d7 fd ff ff	 jmp	 $LN234@TestSector
$LN52@TestSector:

; 885  : 				case 2:
; 886  : 					if (crc != 0x2cc1301a)

  003e0	81 fd 1a 30 c1
	2c		 cmp	 ebp, 750858266		; 2cc1301aH

; 887  : 						return FALSE;
; 888  : 					nTestsPerformed++;
; 889  : 					break;

  003e6	e9 cc fd ff ff	 jmp	 $LN234@TestSector
$LN54@TestSector:

; 877  : 						return FALSE;
; 878  : 					nTestsPerformed++;
; 879  : 					break;
; 880  : 				case 1:
; 881  : 					if (crc != 0x3ae89e7f)

  003eb	81 fd 7f 9e e8
	3a		 cmp	 ebp, 988323455		; 3ae89e7fH

; 882  : 						return FALSE;
; 883  : 					nTestsPerformed++;
; 884  : 					break;

  003f1	e9 c1 fd ff ff	 jmp	 $LN234@TestSector
$LN56@TestSector:

; 874  : 				{
; 875  : 				case 0:
; 876  : 					if (crc != 0xe536daf8)

  003f6	81 fd f8 da 36
	e5		 cmp	 ebp, -449389832		; e536daf8H

; 895  : 				}
; 896  : 			}
; 897  : 			else if (strcmp (name, "Twofish-Serpent") == 0)

  003fc	eb 53		 jmp	 SHORT $LN235@TestSector
$LN59@TestSector:
  003fe	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00403	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
  0040a	b9 10 00 00 00	 mov	 ecx, 16
  0040f	f3 a6		 repe cmpsb
  00411	75 46		 jne	 SHORT $LN45@TestSector

; 898  : 			{
; 899  : 				switch (testCase)

  00413	41 8b cd	 mov	 ecx, r13d
  00416	45 3b ec	 cmp	 r13d, r12d
  00419	74 30		 je	 SHORT $LN44@TestSector
  0041b	83 e9 01	 sub	 ecx, 1
  0041e	74 20		 je	 SHORT $LN42@TestSector
  00420	83 e9 01	 sub	 ecx, 1
  00423	74 10		 je	 SHORT $LN40@TestSector
  00425	83 f9 01	 cmp	 ecx, 1
  00428	75 2f		 jne	 SHORT $LN45@TestSector

; 916  : 				case 3:
; 917  : 					if (crc != 0xe95196cb)

  0042a	81 fd cb 96 51
	e9		 cmp	 ebp, -380528949		; e95196cbH

; 918  : 						return FALSE;
; 919  : 					nTestsPerformed++;
; 920  : 					break;

  00430	e9 82 fd ff ff	 jmp	 $LN234@TestSector
$LN40@TestSector:

; 911  : 				case 2:
; 912  : 					if (crc != 0x8dd13796)

  00435	81 fd 96 37 d1
	8d		 cmp	 ebp, -1915668586	; 8dd13796H

; 913  : 						return FALSE;
; 914  : 					nTestsPerformed++;
; 915  : 					break;

  0043b	e9 77 fd ff ff	 jmp	 $LN234@TestSector
$LN42@TestSector:

; 905  : 					break;
; 906  : 				case 1:
; 907  : 					if (crc != 0x8a201780)

  00440	81 fd 80 17 20
	8a		 cmp	 ebp, -1977608320	; 8a201780H

; 908  : 						return FALSE;
; 909  : 					nTestsPerformed++;
; 910  : 					break;

  00446	e9 6c fd ff ff	 jmp	 $LN234@TestSector
$LN44@TestSector:

; 900  : 				{
; 901  : 				case 0:
; 902  : 					if (crc != 0x2686c859)

  0044b	81 fd 59 c8 86
	26		 cmp	 ebp, 646367321		; 2686c859H
$LN235@TestSector:
  00451	0f 85 f0 fb ff
	ff		 jne	 $LN171@TestSector

; 903  : 						return FALSE;
; 904  : 					nTestsPerformed++;

  00457	ff c3		 inc	 ebx
$LN45@TestSector:

; 921  : 				}
; 922  : 			}
; 923  : 
; 924  : 			if (crc == 0x9f5edd58)

  00459	81 fd 58 dd 5e
	9f		 cmp	 ebp, -1621172904	; 9f5edd58H
  0045f	0f 84 e2 fb ff
	ff		 je	 $LN171@TestSector
$LN226@TestSector:

; 925  : 				return FALSE;
; 926  : 
; 927  : 			DecryptDataUnits (buf, &unitNo, nbrUnits, ci);

  00465	41 b9 04 00 00
	00		 mov	 r9d, 4
  0046b	4c 8d 44 24 30	 lea	 r8, QWORD PTR unitNo$[rsp]
  00470	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  00478	41 8d 49 fd	 lea	 ecx, QWORD PTR [r9-3]
  0047c	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  00481	e8 00 00 00 00	 call	 EncryptionThreadPoolDoWork

; 928  : 
; 929  : 			if (GetCrc32 (buf, sizeof (buf)) != 0x9f5edd58)

  00486	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0048e	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  00493	e8 00 00 00 00	 call	 GetCrc32
  00498	bd 58 dd 5e 9f	 mov	 ebp, -1621172904	; 9f5edd58H
  0049d	3b c5		 cmp	 eax, ebp
  0049f	0f 85 a2 fb ff
	ff		 jne	 $LN171@TestSector

; 930  : 				return FALSE;
; 931  : 
; 932  : 			nTestsPerformed++;

  004a5	ff c3		 inc	 ebx
$LN143@TestSector:

; 674  : 
; 675  : 		// Test all EAs that support this mode of operation
; 676  : 		for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  004a7	41 8b 16	 mov	 edx, DWORD PTR [r14]
  004aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:EncryptionAlgorithms
  004b1	ff c2		 inc	 edx
  004b3	48 63 c2	 movsxd	 rax, edx
  004b6	48 6b c0 2c	 imul	 rax, 44			; 0000002cH
  004ba	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  004bd	f7 d8		 neg	 eax
  004bf	1b c9		 sbb	 ecx, ecx
  004c1	23 ca		 and	 ecx, edx
  004c3	41 89 0e	 mov	 DWORD PTR [r14], ecx
  004c6	41 3b cc	 cmp	 ecx, r12d
  004c9	0f 85 a9 fb ff
	ff		 jne	 $LL144@TestSector
  004cf	49 81 ef 00 02
	00 00		 sub	 r15, 512		; 00000200H
  004d6	48 b8 00 f6 ff
	ff ff ff 01 00	 mov	 rax, 562949953418752	; 0001fffffffff600H

; 933  : 		}
; 934  : 		testCase++;

  004e0	41 ff c5	 inc	 r13d
  004e3	4c 3b f8	 cmp	 r15, rax
  004e6	0f 87 79 fb ff
	ff		 ja	 $LL147@TestSector

; 935  : 	}
; 936  : 
; 937  : 	/* Encryption/decryption of a buffer (typically, a volume header) */
; 938  : 
; 939  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;
; 940  : 
; 941  : 	// Test all EAs that support this mode of operation
; 942  : 	for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  004ec	41 c7 06 01 00
	00 00		 mov	 DWORD PTR [r14], 1
$LL34@TestSector:

; 943  : 	{
; 944  : 		if (!EAIsModeSupported (ci->ea, ci->mode))

  004f3	41 8b 56 04	 mov	 edx, DWORD PTR [r14+4]
  004f7	41 8b 0e	 mov	 ecx, DWORD PTR [r14]
  004fa	e8 00 00 00 00	 call	 EAIsModeSupported
  004ff	41 3b c4	 cmp	 eax, r12d
  00502	0f 84 da 01 00
	00		 je	 $LN33@TestSector

; 945  : 			continue;
; 946  : 
; 947  : 		EAGetName (name, ci->ea);

  00508	41 8b 16	 mov	 edx, DWORD PTR [r14]
  0050b	48 8d 4c 24 40	 lea	 rcx, QWORD PTR name$[rsp]
  00510	e8 00 00 00 00	 call	 EAGetName

; 948  : 
; 949  : 		if (EAInit (ci->ea, key1, ci->ks) != ERR_SUCCESS)

  00515	41 8b 0e	 mov	 ecx, DWORD PTR [r14]
  00518	4d 8d 46 08	 lea	 r8, QWORD PTR [r14+8]
  0051c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?key1@?1??TestSectorBufEncryption@@9@9
  00523	e8 00 00 00 00	 call	 EAInit
  00528	41 3b c4	 cmp	 eax, r12d
  0052b	0f 85 16 fb ff
	ff		 jne	 $LN171@TestSector

; 950  : 			return FALSE;
; 951  : 
; 952  : 		memcpy (&ci->k2, XTS_vectors[XTS_TEST_COUNT-1].key2, sizeof (XTS_vectors[XTS_TEST_COUNT-1].key2));

  00531	49 8d 8e a8 42
	00 00		 lea	 rcx, QWORD PTR [r14+17064]
  00538	48 8d 15 50 11
	00 00		 lea	 rdx, OFFSET FLAT:XTS_vectors+4432
  0053f	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00545	e8 00 00 00 00	 call	 memcpy

; 953  : 
; 954  : 		if (!EAInitMode (ci))

  0054a	49 8b ce	 mov	 rcx, r14
  0054d	e8 00 00 00 00	 call	 EAInitMode
  00552	41 3b c4	 cmp	 eax, r12d
  00555	0f 84 ec fa ff
	ff		 je	 $LN171@TestSector

; 955  : 			return FALSE;
; 956  : 
; 957  : 		// Each data unit will contain the same plaintext
; 958  : 		for (i = 0; i < nbrUnits; i++)
; 959  : 		{
; 960  : 			memcpy ((unsigned char *) buf + i * ENCRYPTION_DATA_UNIT_SIZE, 
; 961  : 				XTS_vectors[XTS_TEST_COUNT-1].plaintext, 
; 962  : 				ENCRYPTION_DATA_UNIT_SIZE);

  0055b	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00563	48 8d 15 7c 11
	00 00		 lea	 rdx, OFFSET FLAT:XTS_vectors+4476
  0056a	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  00570	e8 00 00 00 00	 call	 memcpy
  00575	48 8d bc 24 80
	02 00 00	 lea	 rdi, QWORD PTR buf$[rsp+512]
  0057d	48 8d b4 24 80
	00 00 00	 lea	 rsi, QWORD PTR buf$[rsp]
  00585	b9 c0 00 00 00	 mov	 ecx, 192		; 000000c0H

; 963  : 		}
; 964  : 
; 965  : 		EncryptBuffer (buf, sizeof (buf), ci);

  0058a	41 bd 00 08 00
	00		 mov	 r13d, 2048		; 00000800H
  00590	4d 8b c6	 mov	 r8, r14
  00593	f3 48 a5	 rep movsq
  00596	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0059e	49 8b d5	 mov	 rdx, r13
  005a1	e8 00 00 00 00	 call	 EncryptBuffer

; 966  : 
; 967  : 		crc = GetCrc32 (buf, sizeof (buf));

  005a6	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  005ae	41 8b d5	 mov	 edx, r13d
  005b1	e8 00 00 00 00	 call	 GetCrc32

; 968  : 
; 969  : 		if (strcmp (name, "AES") == 0)

  005b6	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  005bb	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  005c2	b9 04 00 00 00	 mov	 ecx, 4
  005c7	f3 a6		 repe cmpsb
  005c9	75 12		 jne	 SHORT $LN25@TestSector

; 970  : 		{
; 971  : 			if (crc != 0x33b91fab)

  005cb	3d ab 1f b9 33	 cmp	 eax, 867770283		; 33b91fabH
$LN236@TestSector:
  005d0	0f 85 71 fa ff
	ff		 jne	 $LN171@TestSector

; 972  : 				return FALSE;
; 973  : 			nTestsPerformed++;

  005d6	ff c3		 inc	 ebx
  005d8	e9 d8 00 00 00	 jmp	 $LN227@TestSector
$LN25@TestSector:

; 974  : 		}
; 975  : 		else if (strcmp (name, "Serpent") == 0)

  005dd	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  005e2	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_07CCCAKGBN@Serpent?$AA@FNODOBFM@
  005e9	b9 08 00 00 00	 mov	 ecx, 8
  005ee	f3 a6		 repe cmpsb
  005f0	75 07		 jne	 SHORT $LN22@TestSector

; 976  : 		{
; 977  : 			if (crc != 0x3494d480)

  005f2	3d 80 d4 94 34	 cmp	 eax, 882168960		; 3494d480H

; 978  : 				return FALSE;
; 979  : 			nTestsPerformed++;

  005f7	eb d7		 jmp	 SHORT $LN236@TestSector
$LN22@TestSector:

; 980  : 		}
; 981  : 		else if (strcmp (name, "Twofish") == 0)

  005f9	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  005fe	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_07DABDIDEC@Twofish?$AA@FNODOBFM@
  00605	b9 08 00 00 00	 mov	 ecx, 8
  0060a	f3 a6		 repe cmpsb
  0060c	75 07		 jne	 SHORT $LN19@TestSector

; 982  : 		{
; 983  : 			if (crc != 0xc4d65b46)

  0060e	3d 46 5b d6 c4	 cmp	 eax, -992584890		; c4d65b46H

; 984  : 				return FALSE;
; 985  : 			nTestsPerformed++;

  00613	eb bb		 jmp	 SHORT $LN236@TestSector
$LN19@TestSector:

; 986  : 		}
; 987  : 		else if (strcmp (name, "AES-Twofish") == 0)

  00615	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  0061a	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0M@DKAIMMJ@AES?9Twofish?$AA@FNODOBFM@
  00621	b9 0c 00 00 00	 mov	 ecx, 12
  00626	f3 a6		 repe cmpsb
  00628	75 07		 jne	 SHORT $LN16@TestSector

; 988  : 		{
; 989  : 			if (crc != 0x14ce7385)

  0062a	3d 85 73 ce 14	 cmp	 eax, 349074309		; 14ce7385H

; 990  : 				return FALSE;
; 991  : 			nTestsPerformed++;

  0062f	eb 9f		 jmp	 SHORT $LN236@TestSector
$LN16@TestSector:

; 992  : 		}
; 993  : 		else if (strcmp (name, "AES-Twofish-Serpent") == 0)

  00631	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00636	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0BE@LPKAFENL@AES?9Twofish?9Serpent?$AA@FNODOBFM@
  0063d	b9 14 00 00 00	 mov	 ecx, 20
  00642	f3 a6		 repe cmpsb
  00644	75 07		 jne	 SHORT $LN13@TestSector

; 994  : 		{
; 995  : 			if (crc != 0x0ec81bf7)

  00646	3d f7 1b c8 0e	 cmp	 eax, 247995383		; 0ec81bf7H

; 996  : 				return FALSE;
; 997  : 			nTestsPerformed++;

  0064b	eb 83		 jmp	 SHORT $LN236@TestSector
$LN13@TestSector:

; 998  : 		}
; 999  : 		else if (strcmp (name, "Serpent-AES") == 0)

  0064d	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00652	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0M@MCFMFOIH@Serpent?9AES?$AA@FNODOBFM@
  00659	b9 0c 00 00 00	 mov	 ecx, 12
  0065e	f3 a6		 repe cmpsb
  00660	75 0a		 jne	 SHORT $LN10@TestSector

; 1000 : 		{
; 1001 : 			if (crc != 0x42f919ad)

  00662	3d ad 19 f9 42	 cmp	 eax, 1123621293		; 42f919adH

; 1002 : 				return FALSE;
; 1003 : 			nTestsPerformed++;

  00667	e9 64 ff ff ff	 jmp	 $LN236@TestSector
$LN10@TestSector:

; 1004 : 		}
; 1005 : 		else if (strcmp (name, "Serpent-Twofish-AES") == 0)

  0066c	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00671	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0BE@HADLPGPH@Serpent?9Twofish?9AES?$AA@FNODOBFM@
  00678	b9 14 00 00 00	 mov	 ecx, 20
  0067d	f3 a6		 repe cmpsb
  0067f	75 0a		 jne	 SHORT $LN7@TestSector

; 1006 : 		{
; 1007 : 			if (crc != 0x208d5c58)

  00681	3d 58 5c 8d 20	 cmp	 eax, 546135128		; 208d5c58H

; 1008 : 				return FALSE;
; 1009 : 			nTestsPerformed++;

  00686	e9 45 ff ff ff	 jmp	 $LN236@TestSector
$LN7@TestSector:

; 1010 : 		}
; 1011 : 		else if (strcmp (name, "Twofish-Serpent") == 0)

  0068b	48 8d 74 24 40	 lea	 rsi, QWORD PTR name$[rsp]
  00690	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:??_C@_0BA@DNGGBODD@Twofish?9Serpent?$AA@FNODOBFM@
  00697	b9 10 00 00 00	 mov	 ecx, 16
  0069c	f3 a6		 repe cmpsb
  0069e	75 0d		 jne	 SHORT $LN4@TestSector

; 1012 : 		{
; 1013 : 			if (crc != 0xbe78cec1)

  006a0	3d c1 ce 78 be	 cmp	 eax, -1099379007	; be78cec1H
  006a5	0f 85 9c f9 ff
	ff		 jne	 $LN171@TestSector

; 1014 : 				return FALSE;
; 1015 : 			nTestsPerformed++;

  006ab	ff c3		 inc	 ebx
$LN4@TestSector:

; 1016 : 		}
; 1017 : 
; 1018 : 		if (crc == 0x9f5edd58)

  006ad	3b c5		 cmp	 eax, ebp
  006af	0f 84 92 f9 ff
	ff		 je	 $LN171@TestSector
$LN227@TestSector:

; 1019 : 			return FALSE;
; 1020 : 
; 1021 : 		DecryptBuffer (buf, sizeof (buf), ci);

  006b5	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  006bd	4d 8b c6	 mov	 r8, r14
  006c0	49 8b d5	 mov	 rdx, r13
  006c3	e8 00 00 00 00	 call	 DecryptBuffer

; 1022 : 
; 1023 : 		if (GetCrc32 (buf, sizeof (buf)) != 0x9f5edd58)

  006c8	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  006d0	41 8b d5	 mov	 edx, r13d
  006d3	e8 00 00 00 00	 call	 GetCrc32
  006d8	3b c5		 cmp	 eax, ebp
  006da	0f 85 67 f9 ff
	ff		 jne	 $LN171@TestSector

; 1024 : 			return FALSE;
; 1025 : 
; 1026 : 		nTestsPerformed++;

  006e0	ff c3		 inc	 ebx
$LN33@TestSector:

; 935  : 	}
; 936  : 
; 937  : 	/* Encryption/decryption of a buffer (typically, a volume header) */
; 938  : 
; 939  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;
; 940  : 
; 941  : 	// Test all EAs that support this mode of operation
; 942  : 	for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  006e2	41 8b 16	 mov	 edx, DWORD PTR [r14]
  006e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:EncryptionAlgorithms
  006ec	ff c2		 inc	 edx
  006ee	48 63 c2	 movsxd	 rax, edx
  006f1	48 6b c0 2c	 imul	 rax, 44			; 0000002cH
  006f5	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  006f8	f7 d8		 neg	 eax
  006fa	1b c9		 sbb	 ecx, ecx
  006fc	23 ca		 and	 ecx, edx
  006fe	41 89 0e	 mov	 DWORD PTR [r14], ecx
  00701	41 3b cc	 cmp	 ecx, r12d
  00704	0f 85 e9 fd ff
	ff		 jne	 $LL34@TestSector

; 1027 : 	}
; 1028 : 
; 1029 : 	return (nTestsPerformed == 80);

  0070a	83 fb 50	 cmp	 ebx, 80			; 00000050H
  0070d	41 0f 94 c4	 sete	 r12b
  00711	41 8b c4	 mov	 eax, r12d
$LN149@TestSector:

; 1030 : }

  00714	48 8b 8c 24 80
	08 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0071c	48 33 cc	 xor	 rcx, rsp
  0071f	e8 00 00 00 00	 call	 __security_check_cookie
  00724	4c 8d 9c 24 90
	08 00 00	 lea	 r11, QWORD PTR [rsp+2192]
  0072c	49 8b 5b 38	 mov	 rbx, QWORD PTR [r11+56]
  00730	49 8b 6b 40	 mov	 rbp, QWORD PTR [r11+64]
  00734	49 8b 73 48	 mov	 rsi, QWORD PTR [r11+72]
  00738	49 8b e3	 mov	 rsp, r11
  0073b	41 5f		 pop	 r15
  0073d	41 5e		 pop	 r14
  0073f	41 5d		 pop	 r13
  00741	41 5c		 pop	 r12
  00743	5f		 pop	 rdi
  00744	c3		 ret	 0
TestSectorBufEncryption ENDP
PUBLIC	__$ArrayPad$
;	COMDAT pdata
pdata	SEGMENT
$pdata$DoAutoTestAlgorithms DD imagerel DoAutoTestAlgorithms
	DD	imagerel DoAutoTestAlgorithms+2378
	DD	imagerel $unwind$DoAutoTestAlgorithms
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DoAutoTestAlgorithms DD 0d3119H
	DD	09a641fH
	DD	099541fH
	DD	098341fH
	DD	092011fH
	DD	0e016f018H
	DD	0c012d014H
	DD	07010H
	DD	imagerel __GSHandlerCheck
	DD	0480H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT DoAutoTestAlgorithms
_TEXT	SEGMENT
tmp$ = 64
ci$1$ = 80
p$54651 = 80
dataUnitNo$54636 = 80
key$ = 96
p$54635 = 128
testData$29274 = 128
__$ArrayPad$ = 1152
DoAutoTestAlgorithms PROC				; COMDAT

; 1367 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 81 ec 90 04
	00 00		 sub	 rsp, 1168		; 00000490H
  0001f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00026	48 33 c4	 xor	 rax, rsp
  00029	48 89 84 24 80
	04 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1368 : 	PCRYPTO_INFO ci;
; 1369 : 	char key[32];
; 1370 : 	unsigned char tmp[16];
; 1371 : 	BOOL bFailed = FALSE;

  00031	33 ff		 xor	 edi, edi

; 1372 : 	int i;
; 1373 : 
; 1374 : 	ci = crypto_open ();

  00033	e8 00 00 00 00	 call	 crypto_open
  00038	48 89 44 24 50	 mov	 QWORD PTR ci$1$[rsp], rax

; 1375 : 	if (!ci)

  0003d	48 3b c7	 cmp	 rax, rdi
  00040	75 07		 jne	 SHORT $LN45@DoAutoTest

; 1376 : 		return FALSE;

  00042	33 c0		 xor	 eax, eax
  00044	e9 d0 08 00 00	 jmp	 $LN46@DoAutoTest
$LN45@DoAutoTest:

; 1377 : 
; 1378 : 	memset (ci, 0, sizeof (*ci));

  00049	33 d2		 xor	 edx, edx
  0004b	41 b8 68 44 00
	00		 mov	 r8d, 17512		; 00004468H
  00051	48 8b c8	 mov	 rcx, rax
  00054	e8 00 00 00 00	 call	 memset

; 1379 : 
; 1380 : 	/* Blowfish (deprecated/legacy) */
; 1381 : 
; 1382 : 	for (i=0;i<BF_TEST_COUNT;i++)

  00059	8b df		 mov	 ebx, edi
  0005b	48 8d 35 08 00
	00 00		 lea	 rsi, OFFSET FLAT:bf_ecb_vectors+8
  00062	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:ks_tmp
  00069	41 bf 01 00 00
	00		 mov	 r15d, 1
  0006f	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:__ImageBase
$LL44@DoAutoTest:

; 1383 : 	{		
; 1384 : 		memcpy(key, bf_ecb_vectors[i].key, 8);

  00076	48 8b 46 f8	 mov	 rax, QWORD PTR [rsi-8]

; 1385 : 		memcpy(tmp, bf_ecb_vectors[i].plaintext, 8);
; 1386 : 		CipherInit2(BLOWFISH, key, ks_tmp, 8);

  0007a	4c 8d 44 24 60	 lea	 r8, QWORD PTR key$[rsp]
  0007f	ba 08 00 00 00	 mov	 edx, 8
  00084	48 89 44 24 60	 mov	 QWORD PTR key$[rsp], rax
  00089	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  0008c	49 8b ce	 mov	 rcx, r14
  0008f	48 89 44 24 40	 mov	 QWORD PTR tmp$[rsp], rax
  00094	e8 00 00 00 00	 call	 BlowfishSetKey

; 1387 : 
; 1388 : 		((uint32 *)tmp)[0] = BE32 (((uint32 *)tmp)[0]);
; 1389 : 		((uint32 *)tmp)[1] = BE32 (((uint32 *)tmp)[1]);

  00099	44 8b 44 24 44	 mov	 r8d, DWORD PTR tmp$[rsp+4]
  0009e	44 8b 5c 24 40	 mov	 r11d, DWORD PTR tmp$[rsp]

; 1390 : 
; 1391 : 		BlowfishEncryptLE (tmp,tmp,(BF_KEY *)ks_tmp,1);

  000a3	45 8b cf	 mov	 r9d, r15d
  000a6	41 8b c3	 mov	 eax, r11d
  000a9	c1 e8 08	 shr	 eax, 8
  000ac	0f b6 d0	 movzx	 edx, al
  000af	41 0f b6 c3	 movzx	 eax, r11b
  000b3	c1 e0 08	 shl	 eax, 8
  000b6	0b d0		 or	 edx, eax
  000b8	41 8b c3	 mov	 eax, r11d
  000bb	41 c1 eb 18	 shr	 r11d, 24
  000bf	c1 e2 08	 shl	 edx, 8
  000c2	c1 e8 10	 shr	 eax, 16
  000c5	0f b6 c8	 movzx	 ecx, al
  000c8	41 8b c0	 mov	 eax, r8d
  000cb	0b d1		 or	 edx, ecx
  000cd	c1 e8 08	 shr	 eax, 8
  000d0	c1 e2 08	 shl	 edx, 8
  000d3	41 0b d3	 or	 edx, r11d
  000d6	89 54 24 40	 mov	 DWORD PTR tmp$[rsp], edx
  000da	0f b6 d0	 movzx	 edx, al
  000dd	41 0f b6 c0	 movzx	 eax, r8b
  000e1	c1 e0 08	 shl	 eax, 8
  000e4	0b d0		 or	 edx, eax
  000e6	41 8b c0	 mov	 eax, r8d
  000e9	41 c1 e8 18	 shr	 r8d, 24
  000ed	c1 e2 08	 shl	 edx, 8
  000f0	c1 e8 10	 shr	 eax, 16
  000f3	0f b6 c8	 movzx	 ecx, al
  000f6	0b d1		 or	 edx, ecx
  000f8	48 8d 4c 24 40	 lea	 rcx, QWORD PTR tmp$[rsp]
  000fd	c1 e2 08	 shl	 edx, 8
  00100	41 0b d0	 or	 edx, r8d
  00103	4d 8b c6	 mov	 r8, r14
  00106	89 54 24 44	 mov	 DWORD PTR tmp$[rsp+4], edx
  0010a	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  0010f	e8 00 00 00 00	 call	 BlowfishEncryptLE

; 1392 : 		BlowfishEncryptLE (tmp,tmp,(BF_KEY *)ks_tmp,0);

  00114	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  00119	48 8d 4c 24 40	 lea	 rcx, QWORD PTR tmp$[rsp]
  0011e	45 33 c9	 xor	 r9d, r9d
  00121	4d 8b c6	 mov	 r8, r14
  00124	e8 00 00 00 00	 call	 BlowfishEncryptLE

; 1393 : 		BlowfishEncryptLE (tmp,tmp,(BF_KEY *)ks_tmp,1);

  00129	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  0012e	48 8d 4c 24 40	 lea	 rcx, QWORD PTR tmp$[rsp]
  00133	45 8b cf	 mov	 r9d, r15d
  00136	4d 8b c6	 mov	 r8, r14
  00139	e8 00 00 00 00	 call	 BlowfishEncryptLE

; 1394 : 
; 1395 : 		((uint32 *)tmp)[0] = BE32 (((uint32 *)tmp)[0]);

  0013e	44 8b 5c 24 40	 mov	 r11d, DWORD PTR tmp$[rsp]

; 1396 : 		((uint32 *)tmp)[1] = BE32 (((uint32 *)tmp)[1]);

  00143	44 8b 44 24 44	 mov	 r8d, DWORD PTR tmp$[rsp+4]
  00148	41 8b c3	 mov	 eax, r11d
  0014b	c1 e8 08	 shr	 eax, 8
  0014e	0f b6 d0	 movzx	 edx, al
  00151	41 0f b6 c3	 movzx	 eax, r11b
  00155	c1 e0 08	 shl	 eax, 8
  00158	0b d0		 or	 edx, eax
  0015a	41 8b c3	 mov	 eax, r11d
  0015d	41 c1 eb 18	 shr	 r11d, 24
  00161	c1 e8 10	 shr	 eax, 16
  00164	c1 e2 08	 shl	 edx, 8
  00167	0f b6 c8	 movzx	 ecx, al
  0016a	41 8b c0	 mov	 eax, r8d
  0016d	0b d1		 or	 edx, ecx
  0016f	c1 e8 08	 shr	 eax, 8
  00172	c1 e2 08	 shl	 edx, 8
  00175	41 0b d3	 or	 edx, r11d
  00178	89 54 24 40	 mov	 DWORD PTR tmp$[rsp], edx
  0017c	0f b6 d0	 movzx	 edx, al
  0017f	41 0f b6 c0	 movzx	 eax, r8b
  00183	c1 e0 08	 shl	 eax, 8
  00186	0b d0		 or	 edx, eax
  00188	41 8b c0	 mov	 eax, r8d
  0018b	c1 e2 08	 shl	 edx, 8
  0018e	c1 e8 10	 shr	 eax, 16
  00191	0f b6 c8	 movzx	 ecx, al
  00194	41 c1 e8 18	 shr	 r8d, 24

; 1397 : 
; 1398 : 		if (memcmp(bf_ecb_vectors[i].ciphertext,tmp,8)!=0)

  00198	48 63 c3	 movsxd	 rax, ebx
  0019b	0b d1		 or	 edx, ecx
  0019d	48 8d 04 40	 lea	 rax, QWORD PTR [rax+rax*2]
  001a1	49 8b 84 c4 10
	00 00 00	 mov	 rax, QWORD PTR bf_ecb_vectors[r12+rax*8+16]
  001a9	c1 e2 08	 shl	 edx, 8
  001ac	41 0b d0	 or	 edx, r8d
  001af	89 54 24 44	 mov	 DWORD PTR tmp$[rsp+4], edx
  001b3	48 3b 44 24 40	 cmp	 rax, QWORD PTR tmp$[rsp]
  001b8	75 10		 jne	 SHORT $LN48@DoAutoTest
  001ba	41 03 df	 add	 ebx, r15d
  001bd	48 83 c6 18	 add	 rsi, 24
  001c1	83 fb 22	 cmp	 ebx, 34			; 00000022H
  001c4	0f 8c ac fe ff
	ff		 jl	 $LL44@DoAutoTest

; 1385 : 		memcpy(tmp, bf_ecb_vectors[i].plaintext, 8);
; 1386 : 		CipherInit2(BLOWFISH, key, ks_tmp, 8);

$LN48@DoAutoTest:

; 1399 : 			break;
; 1400 : 	}
; 1401 : 
; 1402 : 	if (i != BF_TEST_COUNT)

  001ca	83 fb 22	 cmp	 ebx, 34			; 00000022H
  001cd	8b f7		 mov	 esi, edi

; 1403 : 		bFailed = TRUE;
; 1404 : 
; 1405 : 	/* CAST5 (deprecated/legacy) */
; 1406 : 
; 1407 : 	for (i=0;i<CAST_TEST_COUNT;i++)

  001cf	4c 8d 25 10 00
	00 00		 lea	 r12, OFFSET FLAT:cast_ecb_vectors+16
  001d6	8b df		 mov	 ebx, edi
  001d8	41 bd 05 00 00
	00		 mov	 r13d, 5
  001de	41 0f 45 f7	 cmovne	 esi, r15d
$LL39@DoAutoTest:

; 1408 : 	{			
; 1409 : 		int cipher = CAST;
; 1410 : 		memcpy(key, cast_ecb_vectors[i].key, 16);

  001e2	f3 41 0f 6f 44
	24 f0		 movdqu	 xmm0, XMMWORD PTR [r12-16]

; 1411 : 		memcpy(tmp, cast_ecb_vectors[i].plaintext, 8);

  001e9	49 8b 04 24	 mov	 rax, QWORD PTR [r12]

; 1412 : 		CipherInit2(cipher, key, ks_tmp, 16);

  001ed	48 8d 54 24 60	 lea	 rdx, QWORD PTR key$[rsp]
  001f2	41 b9 10 00 00
	00		 mov	 r9d, 16
  001f8	4d 8b c6	 mov	 r8, r14
  001fb	41 8b cd	 mov	 ecx, r13d
  001fe	f3 0f 7f 44 24
	60		 movdqu	 XMMWORD PTR key$[rsp], xmm0
  00204	48 89 44 24 40	 mov	 QWORD PTR tmp$[rsp], rax
  00209	e8 00 00 00 00	 call	 CipherInit2

; 1413 : 
; 1414 : 		EncipherBlock(cipher, tmp, ks_tmp);

  0020e	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  00213	4d 8b c6	 mov	 r8, r14
  00216	41 8b cd	 mov	 ecx, r13d
  00219	e8 00 00 00 00	 call	 EncipherBlock

; 1415 : 		DecipherBlock(cipher, tmp, ks_tmp);

  0021e	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  00223	4d 8b c6	 mov	 r8, r14
  00226	41 8b cd	 mov	 ecx, r13d
  00229	e8 00 00 00 00	 call	 DecipherBlock

; 1416 : 		EncipherBlock(cipher, tmp, ks_tmp);

  0022e	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  00233	4d 8b c6	 mov	 r8, r14
  00236	41 8b cd	 mov	 ecx, r13d
  00239	e8 00 00 00 00	 call	 EncipherBlock

; 1417 : 
; 1418 : 		if (memcmp(cast_ecb_vectors[i].ciphertext, tmp,8)!=0)

  0023e	48 63 c3	 movsxd	 rax, ebx
  00241	48 8d 0d 18 00
	00 00		 lea	 rcx, OFFSET FLAT:cast_ecb_vectors+24
  00248	48 c1 e0 05	 shl	 rax, 5
  0024c	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00250	48 3b 44 24 40	 cmp	 rax, QWORD PTR tmp$[rsp]
  00255	75 10		 jne	 SHORT $LN113@DoAutoTest
  00257	41 03 df	 add	 ebx, r15d
  0025a	49 83 c4 20	 add	 r12, 32			; 00000020H
  0025e	41 3b df	 cmp	 ebx, r15d
  00261	0f 8c 7b ff ff
	ff		 jl	 $LL39@DoAutoTest
$LN113@DoAutoTest:

; 1419 : 			break;
; 1420 : 	}
; 1421 : 
; 1422 : 	if (i!=CAST_TEST_COUNT)

  00267	41 3b df	 cmp	 ebx, r15d

; 1423 : 		bFailed = TRUE;
; 1424 : 
; 1425 : 
; 1426 : 	/* Triple DES (TECB, EDE) - deprecated/legacy */
; 1427 : 
; 1428 : 	for (i = 0; i < TRIPLEDES_TEST_COUNT; i++)

  0026a	44 8b e7	 mov	 r12d, edi
  0026d	48 8d 1d 18 00
	00 00		 lea	 rbx, OFFSET FLAT:tripledes_vectors+24
  00274	41 0f 45 f7	 cmovne	 esi, r15d
  00278	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:__ImageBase
$LL34@DoAutoTest:

; 1429 : 	{			
; 1430 : 		int cipher = TRIPLEDES;
; 1431 : 		memcpy(key, tripledes_vectors[i].key, sizeof(tripledes_vectors->key));

  0027f	48 8b 43 e8	 mov	 rax, QWORD PTR [rbx-24]
  00283	48 8d 4c 24 60	 lea	 rcx, QWORD PTR key$[rsp]

; 1432 : 		memcpy(tmp, tripledes_vectors[i].plaintext, sizeof(tripledes_vectors->plaintext));
; 1433 : 
; 1434 : 		CipherInit(cipher, key, ks_tmp);

  00288	48 8d 54 24 60	 lea	 rdx, QWORD PTR key$[rsp]
  0028d	48 89 01	 mov	 QWORD PTR [rcx], rax
  00290	48 8b 43 f0	 mov	 rax, QWORD PTR [rbx-16]
  00294	4d 8b c6	 mov	 r8, r14
  00297	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0029b	48 8b 43 f8	 mov	 rax, QWORD PTR [rbx-8]
  0029f	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
  002a3	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  002a6	b9 06 00 00 00	 mov	 ecx, 6
  002ab	48 89 44 24 40	 mov	 QWORD PTR tmp$[rsp], rax
  002b0	e8 00 00 00 00	 call	 CipherInit

; 1435 : 
; 1436 : 		EncipherBlock(cipher, tmp, ks_tmp);

  002b5	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  002ba	4d 8b c6	 mov	 r8, r14
  002bd	b9 06 00 00 00	 mov	 ecx, 6
  002c2	e8 00 00 00 00	 call	 EncipherBlock

; 1437 : 		if (memcmp(tripledes_vectors[i].ciphertext, tmp, sizeof(tripledes_vectors->ciphertext)) != 0)

  002c7	4d 63 dc	 movsxd	 r11, r12d
  002ca	4f 8d 2c 9b	 lea	 r13, QWORD PTR [r11+r11*4]
  002ce	4a 8b 84 ef 20
	00 00 00	 mov	 rax, QWORD PTR tripledes_vectors[rdi+r13*8+32]
  002d6	48 3b 44 24 40	 cmp	 rax, QWORD PTR tmp$[rsp]
  002db	75 31		 jne	 SHORT $LN114@DoAutoTest

; 1438 : 			break;
; 1439 : 
; 1440 : 		DecipherBlock(cipher, tmp, ks_tmp);

  002dd	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  002e2	4d 8b c6	 mov	 r8, r14
  002e5	b9 06 00 00 00	 mov	 ecx, 6
  002ea	e8 00 00 00 00	 call	 DecipherBlock

; 1441 : 		if (memcmp(tripledes_vectors[i].plaintext, tmp, sizeof(tripledes_vectors->plaintext)) != 0)

  002ef	4a 8b 84 ef 18
	00 00 00	 mov	 rax, QWORD PTR tripledes_vectors[rdi+r13*8+24]
  002f7	48 3b 44 24 40	 cmp	 rax, QWORD PTR tmp$[rsp]
  002fc	75 10		 jne	 SHORT $LN114@DoAutoTest
  002fe	45 03 e7	 add	 r12d, r15d
  00301	48 83 c3 28	 add	 rbx, 40			; 00000028H
  00305	45 3b e7	 cmp	 r12d, r15d
  00308	0f 8c 71 ff ff
	ff		 jl	 $LL34@DoAutoTest
$LN114@DoAutoTest:

; 1442 : 			break;
; 1443 : 	}
; 1444 : 	if (i != TRIPLEDES_TEST_COUNT)

  0030e	45 3b e7	 cmp	 r12d, r15d
  00311	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:__ImageBase

; 1445 : 		bFailed = TRUE;
; 1446 : 
; 1447 : 
; 1448 : 	/* AES */
; 1449 : 
; 1450 : 	for (i = 0; i < AES_TEST_COUNT; i++)

  00318	4c 8d 25 20 00
	00 00		 lea	 r12, OFFSET FLAT:aes_ecb_vectors+32
  0031f	41 0f 45 f7	 cmovne	 esi, r15d
  00323	33 ff		 xor	 edi, edi
  00325	8b df		 mov	 ebx, edi
$LL28@DoAutoTest:

; 1451 : 	{			
; 1452 : 		int cipher = AES;
; 1453 : 		memcpy(key, aes_ecb_vectors[i].key, 32);

  00327	48 8d 4c 24 60	 lea	 rcx, QWORD PTR key$[rsp]
  0032c	49 8d 54 24 e0	 lea	 rdx, QWORD PTR [r12-32]
  00331	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00337	e8 00 00 00 00	 call	 memcpy

; 1454 : 		memcpy(tmp, aes_ecb_vectors[i].plaintext, 16);
; 1455 : 		CipherInit(cipher, key, ks_tmp);

  0033c	48 8d 54 24 60	 lea	 rdx, QWORD PTR key$[rsp]
  00341	4d 8b c6	 mov	 r8, r14
  00344	f3 41 0f 6f 2c
	24		 movdqu	 xmm5, XMMWORD PTR [r12]
  0034a	41 8b cf	 mov	 ecx, r15d
  0034d	f3 0f 7f 6c 24
	40		 movdqu	 XMMWORD PTR tmp$[rsp], xmm5
  00353	e8 00 00 00 00	 call	 CipherInit

; 1456 : 
; 1457 : 		EncipherBlock(cipher, tmp, ks_tmp);

  00358	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  0035d	4d 8b c6	 mov	 r8, r14
  00360	41 8b cf	 mov	 ecx, r15d
  00363	e8 00 00 00 00	 call	 EncipherBlock

; 1458 : 		if (memcmp(aes_ecb_vectors[i].ciphertext, tmp, 16) != 0)

  00368	4c 63 eb	 movsxd	 r13, ebx
  0036b	48 8d 4c 24 40	 lea	 rcx, QWORD PTR tmp$[rsp]
  00370	49 c1 e5 06	 shl	 r13, 6
  00374	49 8d 84 2d 30
	00 00 00	 lea	 rax, QWORD PTR aes_ecb_vectors[r13+rbp+48]
  0037c	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0037f	48 3b 11	 cmp	 rdx, QWORD PTR [rcx]
  00382	75 0e		 jne	 SHORT $LN156@DoAutoTest
  00384	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00388	48 3b 51 08	 cmp	 rdx, QWORD PTR [rcx+8]
  0038c	75 04		 jne	 SHORT $LN156@DoAutoTest
  0038e	8b c7		 mov	 eax, edi
  00390	eb 05		 jmp	 SHORT $LN157@DoAutoTest
$LN156@DoAutoTest:
  00392	1b c0		 sbb	 eax, eax
  00394	83 d8 ff	 sbb	 eax, -1
$LN157@DoAutoTest:
  00397	3b c7		 cmp	 eax, edi
  00399	75 4c		 jne	 SHORT $LN116@DoAutoTest

; 1459 : 			break;
; 1460 : 
; 1461 : 		DecipherBlock(cipher, tmp, ks_tmp);

  0039b	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  003a0	4d 8b c6	 mov	 r8, r14
  003a3	41 8b cf	 mov	 ecx, r15d
  003a6	e8 00 00 00 00	 call	 DecipherBlock

; 1462 : 		if (memcmp(aes_ecb_vectors[i].plaintext, tmp, 16) != 0)

  003ab	49 8d 84 2d 20
	00 00 00	 lea	 rax, QWORD PTR aes_ecb_vectors[r13+rbp+32]
  003b3	48 8d 4c 24 40	 lea	 rcx, QWORD PTR tmp$[rsp]
  003b8	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  003bb	48 3b 11	 cmp	 rdx, QWORD PTR [rcx]
  003be	75 0e		 jne	 SHORT $LN154@DoAutoTest
  003c0	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  003c4	48 3b 51 08	 cmp	 rdx, QWORD PTR [rcx+8]
  003c8	75 04		 jne	 SHORT $LN154@DoAutoTest
  003ca	8b c7		 mov	 eax, edi
  003cc	eb 05		 jmp	 SHORT $LN155@DoAutoTest
$LN154@DoAutoTest:
  003ce	1b c0		 sbb	 eax, eax
  003d0	83 d8 ff	 sbb	 eax, -1
$LN155@DoAutoTest:
  003d3	3b c7		 cmp	 eax, edi
  003d5	75 10		 jne	 SHORT $LN116@DoAutoTest
  003d7	41 03 df	 add	 ebx, r15d
  003da	49 83 c4 40	 add	 r12, 64			; 00000040H
  003de	41 3b df	 cmp	 ebx, r15d
  003e1	0f 8c 40 ff ff
	ff		 jl	 $LL28@DoAutoTest
$LN116@DoAutoTest:
  003e7	48 8b 6c 24 50	 mov	 rbp, QWORD PTR ci$1$[rsp]

; 1463 : 			break;
; 1464 : 	}
; 1465 : 	if (i != AES_TEST_COUNT)

  003ec	41 3b df	 cmp	 ebx, r15d

; 1466 : 		bFailed = TRUE;
; 1467 : 
; 1468 : 	// AES EncipherBlocks()/DecipherBlocks()
; 1469 : 	{
; 1470 : 		byte testData[1024];
; 1471 : 		uint32 origCrc;
; 1472 : 		size_t i;
; 1473 : 
; 1474 : 		for (i = 0; i < sizeof (testData); ++i)

  003ef	48 8b c7	 mov	 rax, rdi
  003f2	41 0f 45 f7	 cmovne	 esi, r15d
  003f6	41 bc 00 04 00
	00		 mov	 r12d, 1024		; 00000400H
$LL22@DoAutoTest:

; 1475 : 		{
; 1476 : 			testData[i] = (byte) i;

  003fc	88 84 04 80 00
	00 00		 mov	 BYTE PTR testData$29274[rsp+rax], al
  00403	49 03 c7	 add	 rax, r15
  00406	49 3b c4	 cmp	 rax, r12
  00409	72 f1		 jb	 SHORT $LL22@DoAutoTest

; 1477 : 		}
; 1478 : 
; 1479 : 		origCrc = GetCrc32 (testData, sizeof (testData));

  0040b	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR testData$29274[rsp]
  00413	41 8b d4	 mov	 edx, r12d
  00416	e8 00 00 00 00	 call	 GetCrc32

; 1480 : 
; 1481 : 		CipherInit (AES, testData, ks_tmp);

  0041b	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR testData$29274[rsp]
  00423	4d 8b c6	 mov	 r8, r14
  00426	41 8b cf	 mov	 ecx, r15d
  00429	8b d8		 mov	 ebx, eax
  0042b	e8 00 00 00 00	 call	 CipherInit

; 1482 : 		EncipherBlocks (AES, testData, ks_tmp, sizeof (testData) / CipherGetBlockSize (AES));

  00430	41 8b cf	 mov	 ecx, r15d
  00433	e8 00 00 00 00	 call	 CipherGet
  00438	33 d2		 xor	 edx, edx
  0043a	4d 8b c6	 mov	 r8, r14
  0043d	48 63 48 10	 movsxd	 rcx, DWORD PTR [rax+16]
  00441	49 8b c4	 mov	 rax, r12
  00444	48 f7 f1	 div	 rcx
  00447	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR testData$29274[rsp]
  0044f	41 8b cf	 mov	 ecx, r15d
  00452	4c 8b c8	 mov	 r9, rax
  00455	e8 00 00 00 00	 call	 EncipherBlocks

; 1483 : 
; 1484 : 		if (GetCrc32 (testData, sizeof (testData)) != 0xb5cd5631)

  0045a	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR testData$29274[rsp]
  00462	41 8b d4	 mov	 edx, r12d
  00465	e8 00 00 00 00	 call	 GetCrc32

; 1485 : 			bFailed = TRUE;
; 1486 : 
; 1487 : 		DecipherBlocks (AES, testData, ks_tmp, sizeof (testData) / CipherGetBlockSize (AES));

  0046a	41 8b cf	 mov	 ecx, r15d
  0046d	3d 31 56 cd b5	 cmp	 eax, -1244834255	; b5cd5631H
  00472	41 0f 45 f7	 cmovne	 esi, r15d
  00476	e8 00 00 00 00	 call	 CipherGet
  0047b	33 d2		 xor	 edx, edx
  0047d	48 63 48 10	 movsxd	 rcx, DWORD PTR [rax+16]
  00481	49 8b c4	 mov	 rax, r12
  00484	4d 8b c6	 mov	 r8, r14
  00487	48 f7 f1	 div	 rcx
  0048a	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR testData$29274[rsp]
  00492	41 8b cf	 mov	 ecx, r15d
  00495	4c 8b c8	 mov	 r9, rax
  00498	e8 00 00 00 00	 call	 DecipherBlocks

; 1488 : 
; 1489 : 		if (origCrc != GetCrc32 (testData, sizeof (testData)))

  0049d	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR testData$29274[rsp]
  004a5	41 8b d4	 mov	 edx, r12d
  004a8	e8 00 00 00 00	 call	 GetCrc32

; 1490 : 			bFailed = TRUE;
; 1491 : 	}
; 1492 : 
; 1493 : 	/* Serpent */
; 1494 : 
; 1495 : 	for (i = 0; i < SERPENT_TEST_COUNT; i++)

  004ad	4c 8d 35 20 00
	00 00		 lea	 r14, OFFSET FLAT:serpent_vectors+32
  004b4	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:__ImageBase
  004bb	3b d8		 cmp	 ebx, eax
  004bd	8b df		 mov	 ebx, edi
  004bf	41 0f 45 f7	 cmovne	 esi, r15d
$LL17@DoAutoTest:

; 1496 : 	{			
; 1497 : 		int cipher = SERPENT;
; 1498 : 		memcpy(key, serpent_vectors[i].key, 32);

  004c3	48 8d 4c 24 60	 lea	 rcx, QWORD PTR key$[rsp]
  004c8	49 8d 56 e0	 lea	 rdx, QWORD PTR [r14-32]
  004cc	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  004d2	e8 00 00 00 00	 call	 memcpy

; 1499 : 		memcpy(tmp, serpent_vectors[i].plaintext, 16);
; 1500 : 		CipherInit(cipher, key, ks_tmp);

  004d7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  004de	48 8d 54 24 60	 lea	 rdx, QWORD PTR key$[rsp]
  004e3	f3 41 0f 6f 2e	 movdqu	 xmm5, XMMWORD PTR [r14]
  004e8	b9 02 00 00 00	 mov	 ecx, 2
  004ed	f3 0f 7f 6c 24
	40		 movdqu	 XMMWORD PTR tmp$[rsp], xmm5
  004f3	e8 00 00 00 00	 call	 CipherInit

; 1501 : 
; 1502 : 		EncipherBlock(cipher, tmp, ks_tmp);

  004f8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  004ff	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  00504	b9 02 00 00 00	 mov	 ecx, 2
  00509	e8 00 00 00 00	 call	 EncipherBlock

; 1503 : 		if (memcmp(serpent_vectors[i].ciphertext, tmp, 16) != 0)

  0050e	4c 63 eb	 movsxd	 r13, ebx
  00511	48 8d 4c 24 40	 lea	 rcx, QWORD PTR tmp$[rsp]
  00516	49 c1 e5 06	 shl	 r13, 6
  0051a	4b 8d 84 25 30
	00 00 00	 lea	 rax, QWORD PTR serpent_vectors[r13+r12+48]
  00522	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00525	48 3b 11	 cmp	 rdx, QWORD PTR [rcx]
  00528	75 0e		 jne	 SHORT $LN152@DoAutoTest
  0052a	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0052e	48 3b 51 08	 cmp	 rdx, QWORD PTR [rcx+8]
  00532	75 04		 jne	 SHORT $LN152@DoAutoTest
  00534	8b c7		 mov	 eax, edi
  00536	eb 05		 jmp	 SHORT $LN153@DoAutoTest
$LN152@DoAutoTest:
  00538	1b c0		 sbb	 eax, eax
  0053a	83 d8 ff	 sbb	 eax, -1
$LN153@DoAutoTest:
  0053d	3b c7		 cmp	 eax, edi
  0053f	75 52		 jne	 SHORT $LN118@DoAutoTest

; 1504 : 			break;
; 1505 : 
; 1506 : 		DecipherBlock(cipher, tmp, ks_tmp);

  00541	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  00548	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  0054d	b9 02 00 00 00	 mov	 ecx, 2
  00552	e8 00 00 00 00	 call	 DecipherBlock

; 1507 : 		if (memcmp(serpent_vectors[i].plaintext, tmp, 16) != 0)

  00557	4b 8d 84 25 20
	00 00 00	 lea	 rax, QWORD PTR serpent_vectors[r13+r12+32]
  0055f	48 8d 4c 24 40	 lea	 rcx, QWORD PTR tmp$[rsp]
  00564	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00567	48 3b 11	 cmp	 rdx, QWORD PTR [rcx]
  0056a	75 0e		 jne	 SHORT $LN150@DoAutoTest
  0056c	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00570	48 3b 51 08	 cmp	 rdx, QWORD PTR [rcx+8]
  00574	75 04		 jne	 SHORT $LN150@DoAutoTest
  00576	8b c7		 mov	 eax, edi
  00578	eb 05		 jmp	 SHORT $LN151@DoAutoTest
$LN150@DoAutoTest:
  0057a	1b c0		 sbb	 eax, eax
  0057c	83 d8 ff	 sbb	 eax, -1
$LN151@DoAutoTest:
  0057f	3b c7		 cmp	 eax, edi
  00581	75 10		 jne	 SHORT $LN118@DoAutoTest
  00583	41 03 df	 add	 ebx, r15d
  00586	49 83 c6 40	 add	 r14, 64			; 00000040H
  0058a	41 3b df	 cmp	 ebx, r15d
  0058d	0f 8c 30 ff ff
	ff		 jl	 $LL17@DoAutoTest
$LN118@DoAutoTest:

; 1508 : 			break;
; 1509 : 	}
; 1510 : 	if (i != SERPENT_TEST_COUNT)

  00593	41 3b df	 cmp	 ebx, r15d

; 1511 : 		bFailed = TRUE;
; 1512 : 
; 1513 : 
; 1514 : 	/* Twofish */
; 1515 : 
; 1516 : 	for (i = 0; i < TWOFISH_TEST_COUNT; i++)

  00596	4c 8d 2d 20 00
	00 00		 lea	 r13, OFFSET FLAT:twofish_vectors+32
  0059d	41 bc 00 04 00
	00		 mov	 r12d, 1024		; 00000400H
  005a3	8b df		 mov	 ebx, edi
  005a5	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:__ImageBase
  005ac	41 0f 45 f7	 cmovne	 esi, r15d
$LL11@DoAutoTest:

; 1517 : 	{			
; 1518 : 		int cipher = TWOFISH;
; 1519 : 		memcpy(key, twofish_vectors[i].key, 32);

  005b0	48 8d 4c 24 60	 lea	 rcx, QWORD PTR key$[rsp]
  005b5	49 8d 55 e0	 lea	 rdx, QWORD PTR [r13-32]
  005b9	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  005bf	e8 00 00 00 00	 call	 memcpy

; 1520 : 		memcpy(tmp, twofish_vectors[i].plaintext, 16);
; 1521 : 		CipherInit(cipher, key, ks_tmp);

  005c4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  005cb	48 8d 54 24 60	 lea	 rdx, QWORD PTR key$[rsp]
  005d0	f3 41 0f 6f 6d
	00		 movdqu	 xmm5, XMMWORD PTR [r13]
  005d6	b9 03 00 00 00	 mov	 ecx, 3
  005db	f3 0f 7f 6c 24
	40		 movdqu	 XMMWORD PTR tmp$[rsp], xmm5
  005e1	e8 00 00 00 00	 call	 CipherInit

; 1522 : 
; 1523 : 		EncipherBlock(cipher, tmp, ks_tmp);

  005e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  005ed	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  005f2	b9 03 00 00 00	 mov	 ecx, 3
  005f7	e8 00 00 00 00	 call	 EncipherBlock

; 1524 : 		if (memcmp(twofish_vectors[i].ciphertext, tmp, 16) != 0)

  005fc	4c 63 f3	 movsxd	 r14, ebx
  005ff	48 8d 4c 24 40	 lea	 rcx, QWORD PTR tmp$[rsp]
  00604	49 c1 e6 06	 shl	 r14, 6
  00608	49 8d 84 2e 30
	00 00 00	 lea	 rax, QWORD PTR twofish_vectors[r14+rbp+48]
  00610	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00613	48 3b 11	 cmp	 rdx, QWORD PTR [rcx]
  00616	75 0e		 jne	 SHORT $LN148@DoAutoTest
  00618	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0061c	48 3b 51 08	 cmp	 rdx, QWORD PTR [rcx+8]
  00620	75 04		 jne	 SHORT $LN148@DoAutoTest
  00622	8b c7		 mov	 eax, edi
  00624	eb 05		 jmp	 SHORT $LN149@DoAutoTest
$LN148@DoAutoTest:
  00626	1b c0		 sbb	 eax, eax
  00628	83 d8 ff	 sbb	 eax, -1
$LN149@DoAutoTest:
  0062b	3b c7		 cmp	 eax, edi
  0062d	75 52		 jne	 SHORT $LN120@DoAutoTest

; 1525 : 			break;
; 1526 : 
; 1527 : 		DecipherBlock(cipher, tmp, ks_tmp);

  0062f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:ks_tmp
  00636	48 8d 54 24 40	 lea	 rdx, QWORD PTR tmp$[rsp]
  0063b	b9 03 00 00 00	 mov	 ecx, 3
  00640	e8 00 00 00 00	 call	 DecipherBlock

; 1528 : 		if (memcmp(twofish_vectors[i].plaintext, tmp, 16) != 0)

  00645	49 8d 84 2e 20
	00 00 00	 lea	 rax, QWORD PTR twofish_vectors[r14+rbp+32]
  0064d	48 8d 4c 24 40	 lea	 rcx, QWORD PTR tmp$[rsp]
  00652	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00655	48 3b 11	 cmp	 rdx, QWORD PTR [rcx]
  00658	75 0e		 jne	 SHORT $LN146@DoAutoTest
  0065a	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0065e	48 3b 51 08	 cmp	 rdx, QWORD PTR [rcx+8]
  00662	75 04		 jne	 SHORT $LN146@DoAutoTest
  00664	8b c7		 mov	 eax, edi
  00666	eb 05		 jmp	 SHORT $LN147@DoAutoTest
$LN146@DoAutoTest:
  00668	1b c0		 sbb	 eax, eax
  0066a	83 d8 ff	 sbb	 eax, -1
$LN147@DoAutoTest:
  0066d	3b c7		 cmp	 eax, edi
  0066f	75 10		 jne	 SHORT $LN120@DoAutoTest
  00671	41 03 df	 add	 ebx, r15d
  00674	49 83 c5 40	 add	 r13, 64			; 00000040H
  00678	41 3b df	 cmp	 ebx, r15d
  0067b	0f 8c 2f ff ff
	ff		 jl	 $LL11@DoAutoTest
$LN120@DoAutoTest:

; 1529 : 			break;
; 1530 : 	}
; 1531 : 	if (i != TWOFISH_TEST_COUNT)

  00681	41 3b df	 cmp	 ebx, r15d
  00684	41 0f 45 f7	 cmovne	 esi, r15d

; 1532 : 		bFailed = TRUE;
; 1533 : 
; 1534 : 	
; 1535 : 	/* PKCS #5 and HMACs */
; 1536 : 	if (!test_pkcs5 ())

  00688	e8 00 00 00 00	 call	 test_pkcs5
  0068d	48 8b 6c 24 50	 mov	 rbp, QWORD PTR ci$1$[rsp]
  00692	3b c7		 cmp	 eax, edi

; 1537 : 		bFailed = TRUE;
; 1538 : 
; 1539 : 	/* CRC-32 */
; 1540 : 	if (!crc32_selftests ())

  00694	4c 8b d7	 mov	 r10, rdi
  00697	4c 8d 1d 00 00
	00 00		 lea	 r11, OFFSET FLAT:crc_32_tab
  0069e	41 0f 44 f7	 cmove	 esi, r15d
  006a2	41 83 c8 ff	 or	 r8d, -1			; ffffffffH
  006a6	45 8b c8	 mov	 r9d, r8d
$LL76@DoAutoTest:
  006a9	43 0f b6 0c 1a	 movzx	 ecx, BYTE PTR [r10+r11]
  006ae	41 8b c1	 mov	 eax, r9d
  006b1	4d 03 d7	 add	 r10, r15
  006b4	48 33 c8	 xor	 rcx, rax
  006b7	c1 e8 08	 shr	 eax, 8
  006ba	0f b6 d1	 movzx	 edx, cl
  006bd	45 8b 0c 93	 mov	 r9d, DWORD PTR [r11+rdx*4]
  006c1	44 33 c8	 xor	 r9d, eax
  006c4	4d 3b d4	 cmp	 r10, r12
  006c7	7c e0		 jl	 SHORT $LL76@DoAutoTest
  006c9	41 f7 d1	 not	 r9d
  006cc	bb 13 9e cf 6f	 mov	 ebx, 1875877395		; 6fcf9e13H
  006d1	44 8b d7	 mov	 r10d, edi
  006d4	44 3b cb	 cmp	 r9d, ebx
  006d7	4d 8b cb	 mov	 r9, r11
  006da	41 0f 94 c2	 sete	 r10b
$LL80@DoAutoTest:
  006de	41 0f b6 01	 movzx	 eax, BYTE PTR [r9]
  006e2	41 8b c8	 mov	 ecx, r8d
  006e5	45 2b e7	 sub	 r12d, r15d
  006e8	48 33 c8	 xor	 rcx, rax
  006eb	41 8b c0	 mov	 eax, r8d
  006ee	4d 03 cf	 add	 r9, r15
  006f1	c1 e8 08	 shr	 eax, 8
  006f4	0f b6 d1	 movzx	 edx, cl
  006f7	45 8b 04 93	 mov	 r8d, DWORD PTR [r11+rdx*4]
  006fb	44 33 c0	 xor	 r8d, eax
  006fe	44 3b e7	 cmp	 r12d, edi
  00701	75 db		 jne	 SHORT $LL80@DoAutoTest
  00703	8b c7		 mov	 eax, edi
  00705	41 f7 d0	 not	 r8d

; 1541 : 		bFailed = TRUE;
; 1542 : 
; 1543 : 	/* GF multiplicator */
; 1544 : #if 0
; 1545 : 	if (!GfMulSelfTest ())
; 1546 : 		bFailed = TRUE;
; 1547 : #endif
; 1548 : 
; 1549 : 	/* XTS-AES */
; 1550 : 	if (!XTSAesTest (ci))

  00708	44 8b e7	 mov	 r12d, edi
  0070b	44 3b c3	 cmp	 r8d, ebx
  0070e	48 8d 1d 4c 00
	00 00		 lea	 rbx, OFFSET FLAT:XTS_vectors+76
  00715	0f 94 c0	 sete	 al
  00718	41 85 c2	 test	 eax, r10d
  0071b	41 0f 44 f7	 cmove	 esi, r15d
$LL89@DoAutoTest:
  0071f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  00726	e8 00 00 00 00	 call	 EAGetByName
  0072b	89 45 00	 mov	 DWORD PTR [rbp], eax
  0072e	3b c7		 cmp	 eax, edi
  00730	0f 84 ea 00 00
	00		 je	 $LN142@DoAutoTest
  00736	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0073d	4d 63 ec	 movsxd	 r13, r12d
  00740	4c 8d 75 08	 lea	 r14, QWORD PTR [rbp+8]
  00744	4d 8b c6	 mov	 r8, r14
  00747	44 89 7d 04	 mov	 DWORD PTR [rbp+4], r15d
  0074b	4d 69 ed 4c 04
	00 00		 imul	 r13, 1100		; 0000044cH
  00752	49 8d 94 0d 00
	00 00 00	 lea	 rdx, QWORD PTR XTS_vectors[r13+rcx]
  0075a	8b c8		 mov	 ecx, eax
  0075c	e8 00 00 00 00	 call	 EAInit
  00761	3b c7		 cmp	 eax, edi
  00763	0f 85 b7 00 00
	00		 jne	 $LN142@DoAutoTest
  00769	48 8d 8d a8 42
	00 00		 lea	 rcx, QWORD PTR [rbp+17064]
  00770	48 8d 53 d4	 lea	 rdx, QWORD PTR [rbx-44]
  00774	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  0077a	e8 00 00 00 00	 call	 memcpy
  0077f	48 8b cd	 mov	 rcx, rbp
  00782	e8 00 00 00 00	 call	 EAInitMode
  00787	3b c7		 cmp	 eax, edi
  00789	0f 84 91 00 00
	00		 je	 $LN142@DoAutoTest
  0078f	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR p$54635[rsp]
  00797	48 8b d3	 mov	 rdx, rbx
  0079a	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  007a0	e8 00 00 00 00	 call	 memcpy
  007a5	48 8b 4b f4	 mov	 rcx, QWORD PTR [rbx-12]
  007a9	e8 00 00 00 00	 call	 MirrorBytes64
  007ae	44 8b 4b fc	 mov	 r9d, DWORD PTR [rbx-4]
  007b2	44 89 7c 24 30	 mov	 DWORD PTR [rsp+48], r15d
  007b7	48 89 44 24 50	 mov	 QWORD PTR dataUnitNo$54636[rsp], rax
  007bc	48 8d 85 d4 14
	00 00		 lea	 rax, QWORD PTR [rbp+5332]
  007c3	4c 8d 44 24 50	 lea	 r8, QWORD PTR dataUnitNo$54636[rsp]
  007c8	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  007cd	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR p$54635[rsp]
  007d5	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  007da	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  007df	e8 00 00 00 00	 call	 EncryptBufferXTS
  007e4	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:__ImageBase
  007eb	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR p$54635[rsp]
  007f3	4b 8d 8c 35 4c
	02 00 00	 lea	 rcx, QWORD PTR XTS_vectors[r13+r14+588]
  007fb	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  00801	e8 00 00 00 00	 call	 memcmp
  00806	3b c7		 cmp	 eax, edi
  00808	75 16		 jne	 SHORT $LN142@DoAutoTest
  0080a	45 03 e7	 add	 r12d, r15d
  0080d	48 81 c3 4c 04
	00 00		 add	 rbx, 1100		; 0000044cH
  00814	41 83 fc 05	 cmp	 r12d, 5
  00818	0f 8c 01 ff ff
	ff		 jl	 $LL89@DoAutoTest

; 1552 : 
; 1553 : 	/* LRW-AES (deprecated/legacy) */
; 1554 : 	if (!LRWAesTest (ci))

  0081e	eb 0a		 jmp	 SHORT $LN3@DoAutoTest
$LN142@DoAutoTest:

; 1551 : 		bFailed = TRUE;

  00820	41 8b f7	 mov	 esi, r15d
  00823	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:__ImageBase
$LN3@DoAutoTest:

; 1552 : 
; 1553 : 	/* LRW-AES (deprecated/legacy) */
; 1554 : 	if (!LRWAesTest (ci))

  0082a	44 8b e7	 mov	 r12d, edi
  0082d	48 8d 1d 40 00
	00 00		 lea	 rbx, OFFSET FLAT:lrw_vectors+64
$LL98@DoAutoTest:
  00834	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03BKNEFOAH@AES?$AA@FNODOBFM@
  0083b	e8 00 00 00 00	 call	 EAGetByName
  00840	8b c8		 mov	 ecx, eax
  00842	89 45 00	 mov	 DWORD PTR [rbp], eax
  00845	3b c7		 cmp	 eax, edi
  00847	0f 84 ab 00 00
	00		 je	 $LN143@DoAutoTest
  0084d	49 63 c4	 movsxd	 rax, r12d
  00850	4c 8d 45 08	 lea	 r8, QWORD PTR [rbp+8]
  00854	c7 45 04 02 00
	00 00		 mov	 DWORD PTR [rbp+4], 2
  0085b	4c 8d 2c 40	 lea	 r13, QWORD PTR [rax+rax*2]
  0085f	49 c1 e5 05	 shl	 r13, 5
  00863	4b 8d 94 35 00
	00 00 00	 lea	 rdx, QWORD PTR lrw_vectors[r13+r14]
  0086b	e8 00 00 00 00	 call	 EAInit
  00870	3b c7		 cmp	 eax, edi
  00872	0f 85 80 00 00
	00		 jne	 $LN143@DoAutoTest
  00878	f3 0f 6f 43 e0	 movdqu	 xmm0, XMMWORD PTR [rbx-32]
  0087d	48 8b cd	 mov	 rcx, rbp
  00880	f3 0f 7f 85 a8
	42 00 00	 movdqu	 XMMWORD PTR [rbp+17064], xmm0
  00888	e8 00 00 00 00	 call	 EAInitMode
  0088d	3b c7		 cmp	 eax, edi
  0088f	74 67		 je	 SHORT $LN143@DoAutoTest
  00891	f3 0f 6f 03	 movdqu	 xmm0, XMMWORD PTR [rbx]
  00895	48 8b 4b f8	 mov	 rcx, QWORD PTR [rbx-8]
  00899	f3 0f 7f 44 24
	50		 movdqu	 XMMWORD PTR p$54651[rsp], xmm0
  0089f	e8 00 00 00 00	 call	 MirrorBytes64
  008a4	48 8d 4c 24 50	 lea	 rcx, QWORD PTR p$54651[rsp]
  008a9	4c 8b cd	 mov	 r9, rbp
  008ac	4c 8b c0	 mov	 r8, rax
  008af	ba 10 00 00 00	 mov	 edx, 16
  008b4	e8 00 00 00 00	 call	 EncryptBufferLRW128
  008b9	4b 8d 84 35 50
	00 00 00	 lea	 rax, QWORD PTR lrw_vectors[r13+r14+80]
  008c1	48 8d 4c 24 50	 lea	 rcx, QWORD PTR p$54651[rsp]
  008c6	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  008c9	48 3b 11	 cmp	 rdx, QWORD PTR [rcx]
  008cc	75 0e		 jne	 SHORT $LN144@DoAutoTest
  008ce	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  008d2	48 3b 51 08	 cmp	 rdx, QWORD PTR [rcx+8]
  008d6	75 04		 jne	 SHORT $LN144@DoAutoTest
  008d8	8b c7		 mov	 eax, edi
  008da	eb 05		 jmp	 SHORT $LN145@DoAutoTest
$LN144@DoAutoTest:
  008dc	1b c0		 sbb	 eax, eax
  008de	83 d8 ff	 sbb	 eax, -1
$LN145@DoAutoTest:
  008e1	3b c7		 cmp	 eax, edi
  008e3	75 13		 jne	 SHORT $LN143@DoAutoTest
  008e5	45 03 e7	 add	 r12d, r15d
  008e8	48 83 c3 60	 add	 rbx, 96			; 00000060H
  008ec	41 83 fc 02	 cmp	 r12d, 2
  008f0	0f 8c 3e ff ff
	ff		 jl	 $LL98@DoAutoTest
  008f6	eb 03		 jmp	 SHORT $LN2@DoAutoTest
$LN143@DoAutoTest:

; 1555 : 		bFailed = TRUE;

  008f8	41 8b f7	 mov	 esi, r15d
$LN2@DoAutoTest:

; 1556 : 
; 1557 : 	/* Sector and buffer related algorithms */
; 1558 : 	if (!TestSectorBufEncryption (ci))

  008fb	48 8b cd	 mov	 rcx, rbp
  008fe	e8 00 00 00 00	 call	 TestSectorBufEncryption

; 1559 : 		bFailed = TRUE;
; 1560 : 	
; 1561 : 	crypto_close (ci);

  00903	48 8b cd	 mov	 rcx, rbp
  00906	3b c7		 cmp	 eax, edi
  00908	41 0f 44 f7	 cmove	 esi, r15d
  0090c	e8 00 00 00 00	 call	 crypto_close

; 1562 : 	return !bFailed;

  00911	3b f7		 cmp	 esi, edi
  00913	40 0f 94 c7	 sete	 dil
  00917	8b c7		 mov	 eax, edi
$LN46@DoAutoTest:

; 1563 : }

  00919	48 8b 8c 24 80
	04 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00921	48 33 cc	 xor	 rcx, rsp
  00924	e8 00 00 00 00	 call	 __security_check_cookie
  00929	4c 8d 9c 24 90
	04 00 00	 lea	 r11, QWORD PTR [rsp+1168]
  00931	49 8b 5b 30	 mov	 rbx, QWORD PTR [r11+48]
  00935	49 8b 6b 38	 mov	 rbp, QWORD PTR [r11+56]
  00939	49 8b 73 40	 mov	 rsi, QWORD PTR [r11+64]
  0093d	49 8b e3	 mov	 rsp, r11
  00940	41 5f		 pop	 r15
  00942	41 5e		 pop	 r14
  00944	41 5d		 pop	 r13
  00946	41 5c		 pop	 r12
  00948	5f		 pop	 rdi
  00949	c3		 ret	 0
DoAutoTestAlgorithms ENDP
PUBLIC	AutoTestAlgorithms
;	COMDAT pdata
; File c:\users\public\desktop\projects\ciphershed\src\common\crypto.c
pdata	SEGMENT
$pdata$AutoTestAlgorithms DD imagerel $LN13
	DD	imagerel $LN13+96
	DD	imagerel $unwind$AutoTestAlgorithms
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AutoTestAlgorithms DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogspy
; File c:\users\public\desktop\projects\ciphershed\src\common\tests.c
xdata	ENDS
;	COMDAT AutoTestAlgorithms
_TEXT	SEGMENT
AutoTestAlgorithms PROC					; COMDAT

; 1567 : {

$LN13:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1568 : 	BOOL result = TRUE;
; 1569 : 	BOOL hwEncryptionEnabled = IsHwEncryptionEnabled();

  0000f	33 f6		 xor	 esi, esi
  00011	39 35 00 00 00
	00		 cmp	 DWORD PTR HwEncryptionDisabled, esi
  00017	8b fe		 mov	 edi, esi

; 1570 : 
; 1571 : 	EnableHwEncryption (FALSE);

  00019	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR HwEncryptionDisabled, 1
  00023	40 0f 94 c7	 sete	 dil

; 1572 : 
; 1573 : 	if (!DoAutoTestAlgorithms())

  00027	e8 00 00 00 00	 call	 DoAutoTestAlgorithms

; 1574 : 		result = FALSE;
; 1575 : 
; 1576 : 	EnableHwEncryption (TRUE);

  0002c	89 35 00 00 00
	00		 mov	 DWORD PTR HwEncryptionDisabled, esi
  00032	f7 d8		 neg	 eax
  00034	1b db		 sbb	 ebx, ebx
  00036	83 e3 01	 and	 ebx, 1

; 1577 : 
; 1578 : 	if (!DoAutoTestAlgorithms())

  00039	e8 00 00 00 00	 call	 DoAutoTestAlgorithms
  0003e	f7 d8		 neg	 eax
  00040	1b c0		 sbb	 eax, eax
  00042	23 c3		 and	 eax, ebx

; 1579 : 		result = FALSE;
; 1580 : 
; 1581 : 	EnableHwEncryption (hwEncryptionEnabled);
; 1582 : 	return result;
; 1583 : }

  00044	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00049	3b fe		 cmp	 edi, esi
  0004b	40 0f 94 c6	 sete	 sil
  0004f	89 35 00 00 00
	00		 mov	 DWORD PTR HwEncryptionDisabled, esi
  00055	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005e	5f		 pop	 rdi
  0005f	c3		 ret	 0
AutoTestAlgorithms ENDP
END
