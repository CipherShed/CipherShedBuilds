;	Static Name Aliases
;
;	$S737_ScreenOutputDisabled	EQU	ScreenOutputDisabled
	TITLE   ..\bootconsoleio.cpp
	.MODEL  SMALL
	.386p
	.387
_TEXT	SEGMENT  WORD USE16 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT  WORD USE16 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT  WORD USE16 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT  WORD USE16 PUBLIC 'BSS'
_BSS	ENDS
DGROUP	GROUP	CONST, _BSS, _DATA
	ASSUME DS: DGROUP, SS: DGROUP
PUBLIC  ??_C@_02PIMC@?$AN?6?$AA@
PUBLIC  ??_C@_07MKMO@Error?3?5?$AA@
EXTRN	__aNulrem:NEAR
EXTRN	__aNuldiv:NEAR
_DATA      SEGMENT
$S737_ScreenOutputDisabled	DW	00H
	ORG	$-2
??_C@_02PIMC@?$AN?6?$AA@	DB	0dH,  0aH,  00H
	ORG	$-3
??_C@_07MKMO@Error?3?5?$AA@	DB	'Error: ',  00H
_DATA      ENDS
_TEXT      SEGMENT
	ASSUME	CS: _TEXT
	PUBLIC	?DisableScreenOutput@@YAXXZ	; DisableScreenOutput
?DisableScreenOutput@@YAXXZ	PROC NEAR	; DisableScreenOutput COMDAT
;|*** /*
;|***  Copyright (c) 2008-2009 TrueCrypt Developers Association. All rights reserved.
;|*** 
;|***  Governed by the TrueCrypt License 3.0 the full text of which is contained in
;|***  the file License.txt included in TrueCrypt binary and source code distribution
;|***  packages.
;|*** */
;|*** 
;|*** #include "Platform.h"
;|*** #include "Bios.h"
;|*** #include "BootConsoleIo.h"
;|*** #include "BootDebug.h"
;|*** #include "BootStrings.h"
;|*** 
;|*** 
;|*** static int ScreenOutputDisabled = 0;
;|*** 
;|*** void DisableScreenOutput ()
;|*** {
;|*** 	++ScreenOutputDisabled;
; Line 20
	*** 000000	ff 06 00 00 		inc	WORD PTR $S737_ScreenOutputDisabled
;|*** }
; Line 21
	*** 000004	c3 			ret	

?DisableScreenOutput@@YAXXZ	ENDP
	PUBLIC	?EnableScreenOutput@@YAXXZ	; EnableScreenOutput
?EnableScreenOutput@@YAXXZ	PROC NEAR	; EnableScreenOutput COMDAT
;|*** 
;|*** 
;|*** void EnableScreenOutput ()
;|*** {
;|*** 	--ScreenOutputDisabled;
; Line 26
	*** 000000	ff 0e 00 00 		dec	WORD PTR $S737_ScreenOutputDisabled
;|*** }
; Line 27
	*** 000004	c3 			ret	

?EnableScreenOutput@@YAXXZ	ENDP
	PUBLIC	?PrintChar@@YAXD@Z	; PrintChar
?PrintChar@@YAXD@Z	PROC NEAR	; PrintChar COMDAT
;|*** 
;|*** 
;|*** void PrintChar (char c)
;|*** {
; Line 31
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
;	c = 4
;|*** #ifdef TC_BOOT_TRACING_ENABLED
;|*** 	WriteDebugPort (c);
;|*** #endif
;|*** 
;|*** 	if (ScreenOutputDisabled)
; Line 36
	*** 000003	83 3e 00 00 00 		cmp	WORD PTR $S737_ScreenOutputDisabled,0
	*** 000008	75 0a 			jne	SHORT $EX743
;|*** 		return;
;|*** 
;|*** 	__asm
;|*** 	{
;|*** 		mov bx, 7
; Line 41
	*** 00000a	bb 07 00 		mov	bx,7
;|*** 		mov al, c
; Line 42
	*** 00000d	8a 46 04 		mov	al,BYTE PTR [bp+4]	;c
;|*** 		mov ah, 0xe
; Line 43
	*** 000010	b4 0e 			mov	ah,14	;000eH
;|*** 		int 0x10
; Line 44
	*** 000012	cd 10 			int	16	;0010H
;|*** 	}
; Line 45
;|*** }
; Line 46
					$EX743:
	*** 000014	c9 			leave	
	*** 000015	c3 			ret	

?PrintChar@@YAXD@Z	ENDP
	PUBLIC	?PrintCharAtCursor@@YAXD@Z	; PrintCharAtCursor
?PrintCharAtCursor@@YAXD@Z	PROC NEAR	; PrintCharAtCursor COMDAT
;|*** 
;|*** 
;|*** void PrintCharAtCursor (char c)
;|*** {
; Line 50
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
;	c = 4
;|*** 	if (ScreenOutputDisabled)
; Line 51
	*** 000003	83 3e 00 00 00 		cmp	WORD PTR $S737_ScreenOutputDisabled,0
	*** 000008	75 0d 			jne	SHORT $EX746
;|*** 		return;
;|*** 
;|*** 	__asm
;|*** 	{
;|*** 		mov bx, 7
; Line 56
	*** 00000a	bb 07 00 		mov	bx,7
;|*** 		mov al, c
; Line 57
	*** 00000d	8a 46 04 		mov	al,BYTE PTR [bp+4]	;c
;|*** 		mov cx, 1
; Line 58
	*** 000010	b9 01 00 		mov	cx,1
;|*** 		mov ah, 0xa
; Line 59
	*** 000013	b4 0a 			mov	ah,10	;000aH
;|*** 		int 0x10
; Line 60
	*** 000015	cd 10 			int	16	;0010H
;|*** 	}
; Line 61
;|*** }
; Line 62
					$EX746:
	*** 000017	c9 			leave	
	*** 000018	c3 			ret	

?PrintCharAtCursor@@YAXD@Z	ENDP
	PUBLIC	?Print@@YAXPBD@Z	; Print
?Print@@YAXPBD@Z	PROC NEAR	; Print COMDAT
;|*** 
;|*** 
;|*** void Print (const char *str)
;|*** {
; Line 66
	*** 000000	c8 02 00 00 		enter	2,0
	*** 000004	56 			push	si
;	str = 4
;	c = -1
	*** 000005	8b 76 04 		mov	si,WORD PTR [bp+4]	;str
;|*** 	char c;
;|*** 	while (c = *str++)
; Line 68
	*** 000008	eb 08 			jmp	SHORT $L863
					$FC752:
;|*** 		PrintChar (c);
; Line 69
	*** 00000a	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;c
	*** 00000d	50 			push	ax
	*** 00000e	e8 00 00 		call	?PrintChar@@YAXD@Z	; PrintChar
	*** 000011	5b 			pop	bx
					$L863:
	*** 000012	ac 			lodsb
	*** 000013	88 46 ff 		mov	BYTE PTR [bp-1],al	;c
	*** 000016	0a c0 			or	al,al
	*** 000018	75 f0 			jne	SHORT $FC752
;|*** }
; Line 70
	*** 00001a	5e 			pop	si
	*** 00001b	c9 			leave	
	*** 00001c	c3 			ret	

?Print@@YAXPBD@Z	ENDP
	PUBLIC	?Print@@YAXK@Z	; Print
?Print@@YAXK@Z	PROC NEAR	; Print COMDAT
;|*** 
;|*** 
;|*** void Print (uint32 number)
;|*** {
; Line 74
	*** 000000	c8 0c 00 00 		enter	12,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	number = 4
;	str = -12
;	register si = pos
;|*** 	char str[12];
;|*** 	int pos = 0;
; Line 76
	*** 000006	33 f6 			xor	si,si
;|*** 	while (number >= 10)
; Line 77
					$FC759:
	*** 000008	66 83 7e 04 0a 		cmp	DWORD PTR [bp+4],10	;0000000aH	;number
	*** 00000d	72 2f 			jb	SHORT $FB760
					$L846:
;|*** 	{
;|*** 		str[pos++] = (char) (number % 10) + '0';
; Line 79
	*** 00000f	66 8b 46 04 		mov	eax,DWORD PTR [bp+4]	;number
	*** 000013	66 b9 0a 00 00 00 	mov	ecx,10	;0000000aH
	*** 000019	66 33 d2 		xor	edx,edx
	*** 00001c	66 f7 f1 		div	ecx
	*** 00001f	66 8b c2 		mov	eax,edx
	*** 000022	04 30 			add	al,48	;0030H
	*** 000024	88 42 f4 		mov	BYTE PTR [bp-12][si],al
	*** 000027	46 			inc	si
;|*** 		number /= 10;
; Line 80
	*** 000028	66 8b 46 04 		mov	eax,DWORD PTR [bp+4]	;number
	*** 00002c	66 b9 0a 00 00 00 	mov	ecx,10	;0000000aH
	*** 000032	66 33 d2 		xor	edx,edx
	*** 000035	66 f7 f1 		div	ecx
	*** 000038	66 89 46 04 		mov	DWORD PTR [bp+4],eax	;number
;|*** 	}
; Line 81
	*** 00003c	eb ca 			jmp	SHORT $FC759
					$FB760:
;|*** 	str[pos] = (char) (number % 10) + '0';
; Line 82
	*** 00003e	6a 00 			push	0
	*** 000040	6a 0a 			push	10	;000aH
	*** 000042	66 ff 76 04 		push	DWORD PTR [bp+4]	;number
	*** 000046	e8 00 00 		call	__aNulrem
	*** 000049	04 30 			add	al,48	;0030H
	*** 00004b	88 42 f4 		mov	BYTE PTR [bp-12][si],al
;|*** 	
;|*** 	while (pos >= 0)
; Line 84
	*** 00004e	eb 0b 			jmp	SHORT $L864
					$FC764:
;|*** 		PrintChar (str[pos--]);
; Line 85
	*** 000050	8b fe 			mov	di,si
	*** 000052	4e 			dec	si
	*** 000053	8a 43 f4 		mov	al,BYTE PTR [bp-12][di]
	*** 000056	50 			push	ax
	*** 000057	e8 00 00 		call	?PrintChar@@YAXD@Z	; PrintChar
	*** 00005a	5b 			pop	bx
					$L864:
	*** 00005b	0b f6 			or	si,si
	*** 00005d	7d f1 			jge	SHORT $FC764
;|*** }
; Line 86
	*** 00005f	5e 			pop	si
	*** 000060	5f 			pop	di
	*** 000061	c9 			leave	
	*** 000062	c3 			ret	

?Print@@YAXK@Z	ENDP
	PUBLIC	?Print@@YAXABTUINT64_STRUCT@@@Z	; Print
?Print@@YAXABTUINT64_STRUCT@@@Z	PROC NEAR	; Print COMDAT
;|*** 
;|*** 
;|*** void Print (const uint64 &number)
;|*** {
; Line 90
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
	*** 000003	56 			push	si
;	number = 4
	*** 000004	8b 76 04 		mov	si,WORD PTR [bp+4]	;number
;|*** 	if (number.HighPart == 0)
; Line 91
	*** 000007	66 83 7c 04 00 		cmp	DWORD PTR [si+4],0
	*** 00000c	75 0c 			jne	SHORT $I768
;|*** 		Print (number.LowPart);
; Line 92
	*** 00000e	66 ff 34 		push	DWORD PTR [si]
	*** 000011	e8 00 00 		call	?Print@@YAXK@Z	; Print
	*** 000014	83 c4 04 		add	sp,4
;|*** 	else
; Line 93
	*** 000017	5e 			pop	si
	*** 000018	c9 			leave	
	*** 000019	c3 			ret	
					$I768:
;|*** 		PrintHex (number);
; Line 94
	*** 00001a	56 			push	si
	*** 00001b	e8 00 00 		call	?PrintHex@@YAXABTUINT64_STRUCT@@@Z	; PrintHex
	*** 00001e	5b 			pop	bx
;|*** }
; Line 95
	*** 00001f	5e 			pop	si
	*** 000020	c9 			leave	
	*** 000021	c3 			ret	

?Print@@YAXABTUINT64_STRUCT@@@Z	ENDP
	PUBLIC	?PrintHex@@YAXE@Z	; PrintHex
?PrintHex@@YAXE@Z	PROC NEAR	; PrintHex COMDAT
;|*** 
;|*** 
;|*** void PrintHex (byte b)
;|*** {
; Line 99
	*** 000000	c8 02 00 00 		enter	2,0
;	b = 4
;|*** 	PrintChar (((b >> 4) >= 0xA ? 'A' - 0xA : '0') + (b >> 4));
; Line 100
	*** 000004	8a 46 04 		mov	al,BYTE PTR [bp+4]	;b
	*** 000007	25 f0 00 		and	ax,240	;00f0H
	*** 00000a	2a e4 			sub	ah,ah
	*** 00000c	3d a0 00 		cmp	ax,160	;00a0H
	*** 00000f	7c 04 			jl	SHORT $L849
	*** 000011	b0 37 			mov	al,55	;0037H
	*** 000013	eb 02 			jmp	SHORT $L850
					$L849:
	*** 000015	b0 30 			mov	al,48	;0030H
					$L850:
	*** 000017	8a 4e 04 		mov	cl,BYTE PTR [bp+4]	;b
	*** 00001a	c0 e9 04 		shr	cl,4
	*** 00001d	02 c1 			add	al,cl
	*** 00001f	50 			push	ax
	*** 000020	e8 00 00 		call	?PrintChar@@YAXD@Z	; PrintChar
	*** 000023	5b 			pop	bx
;|*** 	PrintChar (((b & 0xF) >= 0xA ? 'A' - 0xA : '0') + (b & 0xF));
; Line 101
	*** 000024	8a 46 04 		mov	al,BYTE PTR [bp+4]	;b
	*** 000027	24 0f 			and	al,15	;000fH
	*** 000029	89 46 fe 		mov	WORD PTR [bp-2],ax
	*** 00002c	3c 0a 			cmp	al,10	;000aH
	*** 00002e	72 04 			jb	SHORT $L851
	*** 000030	b0 37 			mov	al,55	;0037H
	*** 000032	eb 02 			jmp	SHORT $L852
					$L851:
	*** 000034	b0 30 			mov	al,48	;0030H
					$L852:
	*** 000036	02 46 fe 		add	al,BYTE PTR [bp-2]
	*** 000039	50 			push	ax
	*** 00003a	e8 00 00 		call	?PrintChar@@YAXD@Z	; PrintChar
	*** 00003d	5b 			pop	bx
;|*** }
; Line 102
	*** 00003e	c9 			leave	
	*** 00003f	c3 			ret	

?PrintHex@@YAXE@Z	ENDP
	PUBLIC	?PrintHex@@YAXI@Z	; PrintHex
?PrintHex@@YAXI@Z	PROC NEAR	; PrintHex COMDAT
;|*** 
;|*** 
;|*** void PrintHex (uint16 data)
;|*** {
; Line 106
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
	*** 000003	56 			push	si
;	data = 4
	*** 000004	8b 76 04 		mov	si,WORD PTR [bp+4]	;data
;|*** 	PrintHex (byte (data >> 8));
; Line 107
	*** 000007	8b c6 			mov	ax,si
	*** 000009	8a c4 			mov	al,ah
	*** 00000b	50 			push	ax
	*** 00000c	e8 00 00 		call	?PrintHex@@YAXE@Z	; PrintHex
	*** 00000f	5b 			pop	bx
;|*** 	PrintHex (byte (data));
; Line 108
	*** 000010	56 			push	si
	*** 000011	e8 00 00 		call	?PrintHex@@YAXE@Z	; PrintHex
	*** 000014	5b 			pop	bx
;|*** }
; Line 109
	*** 000015	5e 			pop	si
	*** 000016	c9 			leave	
	*** 000017	c3 			ret	

?PrintHex@@YAXI@Z	ENDP
	PUBLIC	?PrintHex@@YAXK@Z	; PrintHex
?PrintHex@@YAXK@Z	PROC NEAR	; PrintHex COMDAT
;|*** 
;|*** 
;|*** void PrintHex (uint32 data)
;|*** {
; Line 113
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
;	data = 4
;|*** 	PrintHex (uint16 (data >> 16));
; Line 114
	*** 000003	ff 76 06 		push	WORD PTR [bp+6]
	*** 000006	e8 00 00 		call	?PrintHex@@YAXI@Z	; PrintHex
	*** 000009	5b 			pop	bx
;|*** 	PrintHex (uint16 (data));
; Line 115
	*** 00000a	ff 76 04 		push	WORD PTR [bp+4]	;data
	*** 00000d	e8 00 00 		call	?PrintHex@@YAXI@Z	; PrintHex
	*** 000010	5b 			pop	bx
;|*** }
; Line 116
	*** 000011	c9 			leave	
	*** 000012	c3 			ret	

?PrintHex@@YAXK@Z	ENDP
	PUBLIC	?PrintHex@@YAXABTUINT64_STRUCT@@@Z	; PrintHex
?PrintHex@@YAXABTUINT64_STRUCT@@@Z	PROC NEAR	; PrintHex COMDAT
;|*** 
;|*** 
;|*** void PrintHex (const uint64 &data)
;|*** {
; Line 120
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
	*** 000003	56 			push	si
;	data = 4
	*** 000004	8b 76 04 		mov	si,WORD PTR [bp+4]	;data
;|*** 	PrintHex (data.HighPart);
; Line 121
	*** 000007	66 ff 74 04 		push	DWORD PTR [si+4]
	*** 00000b	e8 00 00 		call	?PrintHex@@YAXK@Z	; PrintHex
	*** 00000e	83 c4 04 		add	sp,4
;|*** 	PrintHex (data.LowPart);
; Line 122
	*** 000011	66 ff 34 		push	DWORD PTR [si]
	*** 000014	e8 00 00 		call	?PrintHex@@YAXK@Z	; PrintHex
	*** 000017	83 c4 04 		add	sp,4
;|*** }
; Line 123
	*** 00001a	5e 			pop	si
	*** 00001b	c9 			leave	
	*** 00001c	c3 			ret	

?PrintHex@@YAXABTUINT64_STRUCT@@@Z	ENDP
	PUBLIC	?PrintRepeatedChar@@YAXDH@Z	; PrintRepeatedChar
?PrintRepeatedChar@@YAXDH@Z	PROC NEAR	; PrintRepeatedChar COMDAT
;|*** 
;|*** void PrintRepeatedChar (char c, int n)
;|*** {
; Line 126
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
	*** 000003	56 			push	si
;	c = 4
;	n = 6
	*** 000004	8b 76 06 		mov	si,WORD PTR [bp+6]	;n
;|*** 	while (n-- > 0)
; Line 127
	*** 000007	eb 08 			jmp	SHORT $L865
					$FC782:
;|*** 		PrintChar (c);
; Line 128
	*** 000009	8a 46 04 		mov	al,BYTE PTR [bp+4]	;c
	*** 00000c	50 			push	ax
	*** 00000d	e8 00 00 		call	?PrintChar@@YAXD@Z	; PrintChar
	*** 000010	5b 			pop	bx
					$L865:
	*** 000011	8b c6 			mov	ax,si
	*** 000013	4e 			dec	si
	*** 000014	0b c0 			or	ax,ax
	*** 000016	7f f1 			jg	SHORT $FC782
;|*** }
; Line 129
	*** 000018	5e 			pop	si
	*** 000019	c9 			leave	
	*** 00001a	c3 			ret	

?PrintRepeatedChar@@YAXDH@Z	ENDP
	PUBLIC	?PrintEndl@@YAXXZ	; PrintEndl
?PrintEndl@@YAXXZ	PROC NEAR	; PrintEndl COMDAT
;|*** 
;|*** 
;|*** void PrintEndl ()
;|*** {
;|*** 	Print ("\r\n");
; Line 134
	*** 000000	68 00 00 		push	OFFSET DGROUP:??_C@_02PIMC@?$AN?6?$AA@
	*** 000003	e8 00 00 		call	?Print@@YAXPBD@Z	; Print
	*** 000006	5b 			pop	bx
;|*** }
; Line 135
	*** 000007	c3 			ret	

?PrintEndl@@YAXXZ	ENDP
	PUBLIC	?PrintEndl@@YAXH@Z	; PrintEndl
?PrintEndl@@YAXH@Z	PROC NEAR	; PrintEndl COMDAT
;|*** 
;|*** 
;|*** void PrintEndl (int cnt)
;|*** {
; Line 139
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
	*** 000003	56 			push	si
;	cnt = 4
	*** 000004	8b 76 04 		mov	si,WORD PTR [bp+4]	;cnt
;|*** 	while (cnt-- > 0)
; Line 140
	*** 000007	eb 03 			jmp	SHORT $L866
					$FC790:
;|*** 		PrintEndl ();
; Line 141
	*** 000009	e8 00 00 		call	?PrintEndl@@YAXXZ	; PrintEndl
					$L866:
	*** 00000c	8b c6 			mov	ax,si
	*** 00000e	4e 			dec	si
	*** 00000f	0b c0 			or	ax,ax
	*** 000011	7f f6 			jg	SHORT $FC790
;|*** }
; Line 142
	*** 000013	5e 			pop	si
	*** 000014	c9 			leave	
	*** 000015	c3 			ret	

?PrintEndl@@YAXH@Z	ENDP
	PUBLIC	?Beep@@YAXXZ	; Beep
?Beep@@YAXXZ	PROC NEAR	; Beep COMDAT
;|*** 
;|*** 
;|*** void Beep ()
;|*** {
;|*** 	PrintChar (7);
; Line 147
	*** 000000	6a 07 			push	7
	*** 000002	e8 00 00 		call	?PrintChar@@YAXD@Z	; PrintChar
	*** 000005	5b 			pop	bx
;|*** }
; Line 148
	*** 000006	c3 			ret	

?Beep@@YAXXZ	ENDP
	PUBLIC	?InitVideoMode@@YAXXZ	; InitVideoMode
?InitVideoMode@@YAXXZ	PROC NEAR	; InitVideoMode COMDAT
;|*** 
;|*** 
;|*** void InitVideoMode ()
;|*** {
; Line 152
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
;|*** 	if (ScreenOutputDisabled)
; Line 153
	*** 000003	83 3e 00 00 00 		cmp	WORD PTR $S737_ScreenOutputDisabled,0
	*** 000008	75 0a 			jne	SHORT $EX795
;|*** 		return;
;|*** 
;|*** 	__asm
;|*** 	{
;|*** 		// Text mode 80x25
;|*** 		mov ax, 3
; Line 159
	*** 00000a	b8 03 00 		mov	ax,3
;|*** 		int 0x10
; Line 160
	*** 00000d	cd 10 			int	16	;0010H
;|*** 
;|*** 		// Page 0
;|*** 		mov ax, 0x500
; Line 163
	*** 00000f	b8 00 05 		mov	ax,1280	;0500H
;|*** 		int 0x10
; Line 164
	*** 000012	cd 10 			int	16	;0010H
;|*** 	}
; Line 165
;|*** }
; Line 166
					$EX795:
	*** 000014	c9 			leave	
	*** 000015	c3 			ret	

?InitVideoMode@@YAXXZ	ENDP
	PUBLIC	?ClearScreen@@YAXXZ	; ClearScreen
?ClearScreen@@YAXXZ	PROC NEAR	; ClearScreen COMDAT
;|*** 
;|*** 
;|*** void ClearScreen ()
;|*** {
; Line 170
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
;|*** 	if (ScreenOutputDisabled)
; Line 171
	*** 000003	83 3e 00 00 00 		cmp	WORD PTR $S737_ScreenOutputDisabled,0
	*** 000008	75 14 			jne	SHORT $EX798
;|*** 		return;
;|*** 
;|*** 	__asm
;|*** 	{
;|*** 		// White text on black
;|*** 		mov bh, 7
; Line 177
	*** 00000a	b7 07 			mov	bh,7
;|*** 		xor cx, cx
; Line 178
	*** 00000c	33 c9 			xor	cx,cx
;|*** 		mov dx, 0x184f
; Line 179
	*** 00000e	ba 4f 18 		mov	dx,6223	;184fH
;|*** 		mov ax, 0x600
; Line 180
	*** 000011	b8 00 06 		mov	ax,1536	;0600H
;|*** 		int 0x10
; Line 181
	*** 000014	cd 10 			int	16	;0010H
;|*** 
;|*** 		// Cursor at 0,0
;|*** 		xor bh, bh
; Line 184
	*** 000016	32 ff 			xor	bh,bh
;|*** 		xor dx, dx
; Line 185
	*** 000018	33 d2 			xor	dx,dx
;|*** 		mov ah, 2
; Line 186
	*** 00001a	b4 02 			mov	ah,2
;|*** 		int 0x10
; Line 187
	*** 00001c	cd 10 			int	16	;0010H
;|*** 	}
; Line 188
;|*** }
; Line 189
					$EX798:
	*** 00001e	c9 			leave	
	*** 00001f	c3 			ret	

?ClearScreen@@YAXXZ	ENDP
	PUBLIC	?PrintBackspace@@YAXXZ	; PrintBackspace
?PrintBackspace@@YAXXZ	PROC NEAR	; PrintBackspace COMDAT
;|*** 
;|*** 
;|*** void PrintBackspace ()
;|*** {
;|*** 	PrintChar (TC_BIOS_CHAR_BACKSPACE);
; Line 194
	*** 000000	6a 08 			push	8
	*** 000002	e8 00 00 		call	?PrintChar@@YAXD@Z	; PrintChar
	*** 000005	5b 			pop	bx
;|*** 	PrintCharAtCursor (' ');
; Line 195
	*** 000006	6a 20 			push	32	;0020H
	*** 000008	e8 00 00 		call	?PrintCharAtCursor@@YAXD@Z	; PrintCharAtCursor
	*** 00000b	5b 			pop	bx
;|*** }
; Line 196
	*** 00000c	c3 			ret	

?PrintBackspace@@YAXXZ	ENDP
	PUBLIC	?PrintError@@YAXPBD@Z	; PrintError
?PrintError@@YAXPBD@Z	PROC NEAR	; PrintError COMDAT
;|*** 
;|*** 
;|*** void PrintError (const char *message)
;|*** {
; Line 200
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
;	message = 4
;|*** 	Print (TC_BOOT_STR_ERROR);
; Line 201
	*** 000003	68 00 00 		push	OFFSET DGROUP:??_C@_07MKMO@Error?3?5?$AA@
	*** 000006	e8 00 00 		call	?Print@@YAXPBD@Z	; Print
	*** 000009	5b 			pop	bx
;|*** 	Print (message);
; Line 202
	*** 00000a	ff 76 04 		push	WORD PTR [bp+4]	;message
	*** 00000d	e8 00 00 		call	?Print@@YAXPBD@Z	; Print
	*** 000010	5b 			pop	bx
;|*** 	PrintEndl();
; Line 203
	*** 000011	e8 00 00 		call	?PrintEndl@@YAXXZ	; PrintEndl
;|*** 	Beep();
; Line 204
	*** 000014	e8 00 00 		call	?Beep@@YAXXZ	; Beep
;|*** }
; Line 205
	*** 000017	c9 			leave	
	*** 000018	c3 			ret	

?PrintError@@YAXPBD@Z	ENDP
	PUBLIC	?PrintErrorNoEndl@@YAXPBD@Z	; PrintErrorNoEndl
?PrintErrorNoEndl@@YAXPBD@Z	PROC NEAR	; PrintErrorNoEndl COMDAT
;|*** 
;|*** 
;|*** void PrintErrorNoEndl (const char *message)
;|*** {
; Line 209
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
;	message = 4
;|*** 	Print (TC_BOOT_STR_ERROR);
; Line 210
	*** 000003	68 00 00 		push	OFFSET DGROUP:??_C@_07MKMO@Error?3?5?$AA@
	*** 000006	e8 00 00 		call	?Print@@YAXPBD@Z	; Print
	*** 000009	5b 			pop	bx
;|*** 	Print (message);
; Line 211
	*** 00000a	ff 76 04 		push	WORD PTR [bp+4]	;message
	*** 00000d	e8 00 00 		call	?Print@@YAXPBD@Z	; Print
	*** 000010	5b 			pop	bx
;|*** 	Beep();
; Line 212
	*** 000011	e8 00 00 		call	?Beep@@YAXXZ	; Beep
;|*** }
; Line 213
	*** 000014	c9 			leave	
	*** 000015	c3 			ret	

?PrintErrorNoEndl@@YAXPBD@Z	ENDP
	PUBLIC	?GetShiftFlags@@YAEXZ	; GetShiftFlags
?GetShiftFlags@@YAEXZ	PROC NEAR	; GetShiftFlags COMDAT
;|*** 
;|*** 
;|*** byte GetShiftFlags ()
;|*** {
; Line 217
	*** 000000	c8 02 00 00 		enter	2,0
;	flags = -2
;|*** 	byte flags;
;|*** 	__asm
;|*** 	{
;|*** 		mov ah, 2
; Line 221
	*** 000004	b4 02 			mov	ah,2
;|*** 		int 0x16
; Line 222
	*** 000006	cd 16 			int	22	;0016H
;|*** 		mov flags, al
; Line 223
	*** 000008	88 46 fe 		mov	BYTE PTR [bp-2],al	;flags
;|*** 	}
; Line 224
;|*** 
;|*** 	return flags;
; Line 226
	*** 00000b	8a 46 fe 		mov	al,BYTE PTR [bp-2]	;flags
;|*** }
; Line 227
	*** 00000e	c9 			leave	
	*** 00000f	c3 			ret	

?GetShiftFlags@@YAEXZ	ENDP
	PUBLIC	?GetKeyboardChar@@YAEXZ	; GetKeyboardChar
?GetKeyboardChar@@YAEXZ	PROC NEAR	; GetKeyboardChar COMDAT
;|*** 
;|*** 
;|*** byte GetKeyboardChar ()
;|*** {
;|*** 	return GetKeyboardChar (nullptr);
; Line 232
	*** 000000	6a 00 			push	0
	*** 000002	e8 00 00 		call	?GetKeyboardChar@@YAEPAE@Z	; GetKeyboardChar
	*** 000005	5b 			pop	bx
;|*** }
; Line 233
	*** 000006	c3 			ret	

?GetKeyboardChar@@YAEXZ	ENDP
	PUBLIC	?GetKeyboardChar@@YAEPAE@Z	; GetKeyboardChar
?GetKeyboardChar@@YAEPAE@Z	PROC NEAR	; GetKeyboardChar COMDAT
;|*** 
;|*** 
;|*** byte GetKeyboardChar (byte *scanCode)
;|*** {
; Line 237
	*** 000000	c8 04 00 00 		enter	4,0
;	asciiCode = -2
;	scan = -4
;	scanCode = 4
;|*** 	// Work around potential BIOS bugs (Windows boot manager polls the keystroke buffer)
;|*** 	while (!IsKeyboardCharAvailable());
; Line 239
					$FC815:
	*** 000004	e8 00 00 		call	?IsKeyboardCharAvailable@@YADXZ	; IsKeyboardCharAvailable
	*** 000007	0a c0 			or	al,al
	*** 000009	74 f9 			je	SHORT $FC815
;|*** 
;|*** 	byte asciiCode;
;|*** 	byte scan;
;|*** 	__asm
;|*** 	{
;|*** 		mov ah, 0
; Line 245
	*** 00000b	b4 00 			mov	ah,0
;|*** 		int 0x16
; Line 246
	*** 00000d	cd 16 			int	22	;0016H
;|*** 		mov asciiCode, al
; Line 247
	*** 00000f	88 46 fe 		mov	BYTE PTR [bp-2],al	;asciiCode
;|*** 		mov scan, ah
; Line 248
	*** 000012	88 66 fc 		mov	BYTE PTR [bp-4],ah	;scan
;|*** 	}
; Line 249
;|*** 	
;|*** 	if (scanCode)
; Line 251
	*** 000015	83 7e 04 00 		cmp	WORD PTR [bp+4],0	;scanCode
	*** 000019	74 08 			je	SHORT $I819
;|*** 		*scanCode = scan;
; Line 252
	*** 00001b	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;scanCode
	*** 00001e	8a 46 fc 		mov	al,BYTE PTR [bp-4]	;scan
	*** 000021	88 07 			mov	BYTE PTR [bx],al
;|*** 
;|*** 	return asciiCode;
; Line 254
					$I819:
	*** 000023	8a 46 fe 		mov	al,BYTE PTR [bp-2]	;asciiCode
;|*** }
; Line 255
	*** 000026	c9 			leave	
	*** 000027	c3 			ret	

?GetKeyboardChar@@YAEPAE@Z	ENDP
	PUBLIC	?IsKeyboardCharAvailable@@YADXZ	; IsKeyboardCharAvailable
?IsKeyboardCharAvailable@@YADXZ	PROC NEAR	; IsKeyboardCharAvailable COMDAT
;|*** 
;|*** 
;|*** bool IsKeyboardCharAvailable ()
;|*** {
; Line 259
	*** 000000	c8 02 00 00 		enter	2,0
;	available = -2
;|*** 	bool available = false;
; Line 260
	*** 000004	c6 46 fe 00 		mov	BYTE PTR [bp-2],0	;available
;|*** 	__asm
;|*** 	{
;|*** 		mov ah, 1
; Line 263
	*** 000008	b4 01 			mov	ah,1
;|*** 		int 0x16
; Line 264
	*** 00000a	cd 16 			int	22	;0016H
;|*** 		jz not_avail
; Line 265
	*** 00000c	74 04 			je	SHORT $not_avail823
;|*** 		mov available, true
; Line 266
	*** 00000e	c6 46 fe 01 		mov	BYTE PTR [bp-2],1	;available
;|*** 	not_avail:
; Line 267
					$not_avail823:
;|*** 	}
; Line 268
;|*** 
;|*** 	return available;
; Line 270
	*** 000012	8a 46 fe 		mov	al,BYTE PTR [bp-2]	;available
;|*** }
; Line 271
	*** 000015	c9 			leave	
	*** 000016	c3 			ret	

?IsKeyboardCharAvailable@@YADXZ	ENDP
	PUBLIC	?EscKeyPressed@@YADXZ	; EscKeyPressed
?EscKeyPressed@@YADXZ	PROC NEAR	; EscKeyPressed COMDAT
;|*** 
;|*** 
;|*** bool EscKeyPressed ()
;|*** {
; Line 275
	*** 000000	c8 02 00 00 		enter	2,0
;	keyScanCode = -1
;|*** 	if (IsKeyboardCharAvailable ())
; Line 276
	*** 000004	e8 00 00 		call	?IsKeyboardCharAvailable@@YADXZ	; IsKeyboardCharAvailable
	*** 000007	0a c0 			or	al,al
	*** 000009	74 12 			je	SHORT $I826
;|*** 	{
;|*** 		byte keyScanCode;
;|*** 		GetKeyboardChar (&keyScanCode);
; Line 279
	*** 00000b	8d 46 ff 		lea	ax,WORD PTR [bp-1]	;keyScanCode
	*** 00000e	50 			push	ax
	*** 00000f	e8 00 00 		call	?GetKeyboardChar@@YAEPAE@Z	; GetKeyboardChar
	*** 000012	5b 			pop	bx
;|*** 		return keyScanCode == TC_BIOS_KEY_ESC;
; Line 280
	*** 000013	80 7e ff 01 		cmp	BYTE PTR [bp-1],1	;keyScanCode
	*** 000017	75 04 			jne	SHORT $I826
	*** 000019	b0 01 			mov	al,1
	*** 00001b	c9 			leave	
	*** 00001c	c3 			ret	
;|*** 	}
;|*** 
;|*** 	return false;
; Line 283
					$I826:
	*** 00001d	32 c0 			xor	al,al
;|*** }
; Line 284
	*** 00001f	c9 			leave	
	*** 000020	c3 			ret	

?EscKeyPressed@@YADXZ	ENDP
	PUBLIC	?ClearBiosKeystrokeBuffer@@YAXXZ	; ClearBiosKeystrokeBuffer
?ClearBiosKeystrokeBuffer@@YAXXZ	PROC NEAR	; ClearBiosKeystrokeBuffer COMDAT
;|*** 
;|*** 
;|*** void ClearBiosKeystrokeBuffer ()
;|*** {
; Line 288
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
	*** 000003	57 			push	di
	*** 000004	56 			push	si
;|*** 	__asm
;|*** 	{
;|*** 		push es
; Line 291
	*** 000005	06 			push	es
;|*** 		xor ax, ax
; Line 292
	*** 000006	33 c0 			xor	ax,ax
;|*** 		mov es, ax
; Line 293
	*** 000008	8e c0 			mov	es,ax
;|*** 		mov di, 0x41e
; Line 294
	*** 00000a	bf 1e 04 		mov	di,1054	;041eH
;|*** 		mov cx, 32
; Line 295
	*** 00000d	b9 20 00 		mov	cx,32	;0020H
;|*** 		cld
; Line 296
	*** 000010	fc 			cld	
;|*** 		rep stosb
; Line 297
	*** 000011	f3 			rep
	*** 000012	aa 			stosb
;|*** 		pop es
; Line 298
	*** 000013	07 			pop	es
;|*** 	}
; Line 299
;|*** }
; Line 300
	*** 000014	5e 			pop	si
	*** 000015	5f 			pop	di
	*** 000016	c9 			leave	
	*** 000017	c3 			ret	

?ClearBiosKeystrokeBuffer@@YAXXZ	ENDP
	PUBLIC	?IsPrintable@@YADD@Z	; IsPrintable
?IsPrintable@@YADD@Z	PROC NEAR	; IsPrintable COMDAT
;|*** 
;|*** 
;|*** bool IsPrintable (char c)
;|*** {
; Line 304
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
;	c = 4
;|*** 	return c >= ' ' && c <= '~';
; Line 305
	*** 000003	80 7e 04 20 		cmp	BYTE PTR [bp+4],32	;0020H	;c
	*** 000007	7c 0a 			jl	SHORT $L857
	*** 000009	80 7e 04 7e 		cmp	BYTE PTR [bp+4],126	;007eH	;c
	*** 00000d	7f 04 			jg	SHORT $L857
	*** 00000f	b0 01 			mov	al,1
	*** 000011	c9 			leave	
	*** 000012	c3 			ret	
					$L857:
	*** 000013	32 c0 			xor	al,al
;|*** }
; Line 306
	*** 000015	c9 			leave	
	*** 000016	c3 			ret	

?IsPrintable@@YADD@Z	ENDP
	PUBLIC	?GetString@@YAHPADI@Z	; GetString
?GetString@@YAHPADI@Z	PROC NEAR	; GetString COMDAT
;|*** 
;|*** 
;|*** int GetString (char *buffer, size_t bufferSize)
;|*** {
; Line 310
	*** 000000	c8 04 00 00 		enter	4,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	buffer = 4
;	bufferSize = 6
;	c = -1
;	scanCode = -2
;	register si = pos
;|*** 	byte c;
;|*** 	byte scanCode;
;|*** 	size_t pos = 0;
; Line 313
	*** 000006	33 f6 			xor	si,si
	*** 000008	8b 7e 06 		mov	di,WORD PTR [bp+6]	;bufferSize
;|*** 
;|*** 	while (pos < bufferSize)
; Line 315
					$FC839:
	*** 00000b	3b f7 			cmp	si,di
	*** 00000d	73 3e 			jae	SHORT $FB840
;|*** 	{
;|*** 		c = GetKeyboardChar (&scanCode);
; Line 317
	*** 00000f	8d 46 fe 		lea	ax,WORD PTR [bp-2]	;scanCode
	*** 000012	50 			push	ax
	*** 000013	e8 00 00 		call	?GetKeyboardChar@@YAEPAE@Z	; GetKeyboardChar
	*** 000016	5b 			pop	bx
	*** 000017	88 46 ff 		mov	BYTE PTR [bp-1],al	;c
;|*** 
;|*** 		if (scanCode == TC_BIOS_KEY_ENTER)
; Line 319
	*** 00001a	80 7e fe 1c 		cmp	BYTE PTR [bp-2],28	;001cH	;scanCode
	*** 00001e	74 2d 			je	SHORT $FB840
;|*** 			break;
;|*** 		
;|*** 		if (scanCode == TC_BIOS_KEY_ESC)
; Line 322
	*** 000020	80 7e fe 01 		cmp	BYTE PTR [bp-2],1	;scanCode
	*** 000024	74 23 			je	SHORT $L862
;|*** 			return 0;
;|*** 
;|*** 		buffer[pos++] = c;
; Line 325
	*** 000026	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;buffer
	*** 000029	88 00 			mov	BYTE PTR [bx][si],al
	*** 00002b	46 			inc	si
;|*** 		PrintChar (IsPrintable (c) ? c : ' ');
; Line 326
	*** 00002c	50 			push	ax
	*** 00002d	e8 00 00 		call	?IsPrintable@@YADD@Z	; IsPrintable
	*** 000030	5b 			pop	bx
	*** 000031	0a c0 			or	al,al
	*** 000033	74 07 			je	SHORT $L859
	*** 000035	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;c
	*** 000038	2a e4 			sub	ah,ah
	*** 00003a	eb 03 			jmp	SHORT $L860
					$L859:
	*** 00003c	b8 20 00 		mov	ax,32	;0020H
					$L860:
	*** 00003f	89 46 fc 		mov	WORD PTR [bp-4],ax
	*** 000042	50 			push	ax
	*** 000043	e8 00 00 		call	?PrintChar@@YAXD@Z	; PrintChar
	*** 000046	5b 			pop	bx
;|*** 	}
; Line 327
	*** 000047	eb c2 			jmp	SHORT $FC839
					$L862:
;|*** 			return 0;
; Line 323
	*** 000049	33 c0 			xor	ax,ax
	*** 00004b	eb 02 			jmp	SHORT $EX834
;|*** 
;|*** 		buffer[pos++] = c;
;|*** 		PrintChar (IsPrintable (c) ? c : ' ');
;|*** 	}
; Line 327
					$FB840:
;|*** 
;|*** 	return pos;
; Line 329
	*** 00004d	8b c6 			mov	ax,si
;|*** }
; Line 330
					$EX834:
	*** 00004f	5e 			pop	si
	*** 000050	5f 			pop	di
	*** 000051	c9 			leave	
	*** 000052	c3 			ret	

?GetString@@YAHPADI@Z	ENDP
_TEXT	ENDS
END
