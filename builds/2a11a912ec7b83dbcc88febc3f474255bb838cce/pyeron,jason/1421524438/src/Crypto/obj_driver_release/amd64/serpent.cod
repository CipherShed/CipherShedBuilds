; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	serpent_decrypt
;	COMDAT pdata
; File c:\home\public\desktop\projects\ciphershed.build\src\crypto\serpent.c
pdata	SEGMENT
$pdata$serpent_decrypt DD imagerel $LN10
	DD	imagerel $LN10+2171
	DD	imagerel $unwind$serpent_decrypt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$serpent_decrypt DD 091501H
	DD	057415H
	DD	046415H
	DD	035415H
	DD	023415H
	DD	0c015H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT serpent_decrypt
_TEXT	SEGMENT
inBlock$ = 16
outBlock$ = 24
ks$ = 32
serpent_decrypt PROC					; COMDAT

; 847  : {

$LN10:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp
  0000b	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000f	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  00013	41 54		 push	 r12

; 848  : 	unsigned __int32 a, b, c, d, e;
; 849  : 	const unsigned __int32 *k = (unsigned __int32 *)ks + 104;

  00015	49 8d a8 a0 01
	00 00		 lea	 rbp, QWORD PTR [r8+416]
  0001c	48 8b fa	 mov	 rdi, rdx

; 850  : 	unsigned int i=4;
; 851  : 	unsigned __int32 *in = (unsigned __int32 *) inBlock;
; 852  : 	unsigned __int32 *out = (unsigned __int32 *) outBlock;
; 853  : 
; 854  :     a = LE32(in[0]);
; 855  : 	b = LE32(in[1]);
; 856  : 	c = LE32(in[2]);
; 857  : 	d = LE32(in[3]);
; 858  : 
; 859  : 	beforeI7(KX);

  0001f	44 8b 8d 88 00
	00 00		 mov	 r9d, DWORD PTR [rbp+136]
  00026	8b 85 80 00 00
	00		 mov	 eax, DWORD PTR [rbp+128]
  0002c	8b 95 8c 00 00
	00		 mov	 edx, DWORD PTR [rbp+140]
  00032	33 01		 xor	 eax, DWORD PTR [rcx]
  00034	44 33 49 08	 xor	 r9d, DWORD PTR [rcx+8]
  00038	33 51 0c	 xor	 edx, DWORD PTR [rcx+12]
  0003b	44 8b 85 84 00
	00 00		 mov	 r8d, DWORD PTR [rbp+132]

; 860  : 	goto start;
; 861  : 
; 862  : 	do
; 863  : 	{
; 864  : 		c = b;
; 865  : 		b = d;
; 866  : 		d = e;
; 867  : 		k -= 32;
; 868  : 		beforeI7(ILT);
; 869  : start:
; 870  : 		beforeI7(I7); afterI7(KX); 

  00042	45 8b d9	 mov	 r11d, r9d
  00045	44 33 c8	 xor	 r9d, eax
  00048	44 33 41 04	 xor	 r8d, DWORD PTR [rcx+4]
  0004c	8b 4d 78	 mov	 ecx, DWORD PTR [rbp+120]
  0004f	23 c2		 and	 eax, edx
  00051	44 0b da	 or	 r11d, edx
  00054	41 33 d0	 xor	 edx, r8d
  00057	44 0b c0	 or	 r8d, eax
  0005a	41 23 d3	 and	 edx, r11d
  0005d	41 f7 d1	 not	 r9d
  00060	41 33 c1	 xor	 eax, r9d
  00063	45 23 cb	 and	 r9d, r11d
  00066	45 33 c1	 xor	 r8d, r9d
  00069	44 33 c8	 xor	 r9d, eax
  0006c	45 33 d8	 xor	 r11d, r8d
  0006f	41 33 c8	 xor	 ecx, r8d

; 871  : 		afterI7(ILT); afterI7(I6); afterI6(KX); 

  00072	44 8b 45 70	 mov	 r8d, DWORD PTR [rbp+112]
  00076	45 8b d1	 mov	 r10d, r9d
  00079	44 0b d0	 or	 r10d, eax
  0007c	44 33 d2	 xor	 r10d, edx
  0007f	41 33 d3	 xor	 edx, r11d
  00082	45 0b da	 or	 r11d, r10d
  00085	44 33 55 74	 xor	 r10d, DWORD PTR [rbp+116]
  00089	44 33 c2	 xor	 r8d, edx
  0008c	45 33 c1	 xor	 r8d, r9d
  0008f	45 33 d9	 xor	 r11d, r9d
  00092	41 8b c2	 mov	 eax, r10d
  00095	44 33 5d 7c	 xor	 r11d, DWORD PTR [rbp+124]
  00099	c1 e0 07	 shl	 eax, 7
  0009c	c1 c9 16	 ror	 ecx, 22
  0009f	33 c8		 xor	 ecx, eax
  000a1	41 33 cb	 xor	 ecx, r11d
  000a4	41 c1 c8 05	 ror	 r8d, 5
  000a8	45 33 c3	 xor	 r8d, r11d
  000ab	45 33 c2	 xor	 r8d, r10d
  000ae	41 c1 cb 07	 ror	 r11d, 7
  000b2	41 8b c0	 mov	 eax, r8d
  000b5	c1 e0 03	 shl	 eax, 3
  000b8	44 33 d8	 xor	 r11d, eax
  000bb	44 33 d9	 xor	 r11d, ecx
  000be	41 d1 ca	 ror	 r10d, 1
  000c1	45 33 d0	 xor	 r10d, r8d
  000c4	41 8b d3	 mov	 edx, r11d
  000c7	44 33 d1	 xor	 r10d, ecx
  000ca	c1 c9 03	 ror	 ecx, 3
  000cd	41 c1 c8 0d	 ror	 r8d, 13
  000d1	44 33 c1	 xor	 r8d, ecx
  000d4	33 d1		 xor	 edx, ecx
  000d6	45 33 da	 xor	 r11d, r10d
  000d9	41 0b d0	 or	 edx, r8d
  000dc	45 8b c8	 mov	 r9d, r8d
  000df	44 23 c9	 and	 r9d, ecx
  000e2	41 f7 d1	 not	 r9d
  000e5	45 33 cb	 xor	 r9d, r11d
  000e8	44 33 da	 xor	 r11d, edx
  000eb	41 33 d2	 xor	 edx, r10d
  000ee	45 33 c1	 xor	 r8d, r9d
  000f1	41 8b cb	 mov	 ecx, r11d
  000f4	41 8b c3	 mov	 eax, r11d
  000f7	41 33 c0	 xor	 eax, r8d
  000fa	41 23 ca	 and	 ecx, r10d
  000fd	44 8b 55 68	 mov	 r10d, DWORD PTR [rbp+104]
  00101	41 33 c8	 xor	 ecx, r8d
  00104	44 8b 45 6c	 mov	 r8d, DWORD PTR [rbp+108]
  00108	41 0b c1	 or	 eax, r9d
  0010b	44 33 4d 64	 xor	 r9d, DWORD PTR [rbp+100]
  0010f	44 33 d0	 xor	 r10d, eax
  00112	45 33 c3	 xor	 r8d, r11d

; 872  : 		afterI6(ILT); afterI6(I5); afterI5(KX); 

  00115	44 33 d2	 xor	 r10d, edx
  00118	44 33 c1	 xor	 r8d, ecx
  0011b	41 8b c1	 mov	 eax, r9d
  0011e	41 c1 ca 16	 ror	 r10d, 22
  00122	8b 55 60	 mov	 edx, DWORD PTR [rbp+96]
  00125	44 8b 5d 58	 mov	 r11d, DWORD PTR [rbp+88]
  00129	c1 e0 07	 shl	 eax, 7
  0012c	44 33 d0	 xor	 r10d, eax
  0012f	33 d1		 xor	 edx, ecx
  00131	45 33 d0	 xor	 r10d, r8d
  00134	c1 ca 05	 ror	 edx, 5
  00137	41 33 d0	 xor	 edx, r8d
  0013a	41 33 d1	 xor	 edx, r9d
  0013d	41 c1 c8 07	 ror	 r8d, 7
  00141	8b c2		 mov	 eax, edx
  00143	c1 e0 03	 shl	 eax, 3
  00146	44 33 c0	 xor	 r8d, eax
  00149	45 33 c2	 xor	 r8d, r10d
  0014c	41 d1 c9	 ror	 r9d, 1
  0014f	45 33 ca	 xor	 r9d, r10d
  00152	41 8b c0	 mov	 eax, r8d
  00155	44 33 ca	 xor	 r9d, edx
  00158	c1 ca 0d	 ror	 edx, 13
  0015b	41 c1 ca 03	 ror	 r10d, 3
  0015f	0b c2		 or	 eax, edx
  00161	41 f7 d1	 not	 r9d
  00164	45 33 d1	 xor	 r10d, r9d
  00167	41 33 c2	 xor	 eax, r10d
  0016a	45 0b d1	 or	 r10d, r9d
  0016d	44 33 c0	 xor	 r8d, eax
  00170	44 23 d2	 and	 r10d, edx
  00173	45 33 d0	 xor	 r10d, r8d
  00176	44 0b c2	 or	 r8d, edx
  00179	45 33 c1	 xor	 r8d, r9d
  0017c	41 8b ca	 mov	 ecx, r10d
  0017f	41 23 c9	 and	 ecx, r9d
  00182	44 8b 4d 50	 mov	 r9d, DWORD PTR [rbp+80]
  00186	45 33 c2	 xor	 r8d, r10d
  00189	44 33 55 5c	 xor	 r10d, DWORD PTR [rbp+92]
  0018d	33 c8		 xor	 ecx, eax
  0018f	41 23 c0	 and	 eax, r8d
  00192	44 33 c9	 xor	 r9d, ecx
  00195	44 33 c1	 xor	 r8d, ecx
  00198	41 33 c0	 xor	 eax, r8d
  0019b	41 f7 d0	 not	 r8d
  0019e	33 c2		 xor	 eax, edx
  001a0	8b 55 54	 mov	 edx, DWORD PTR [rbp+84]
  001a3	44 33 d8	 xor	 r11d, eax
  001a6	41 33 d0	 xor	 edx, r8d

; 873  : 		afterI5(ILT); afterI5(I4); afterI4(KX); 

  001a9	41 c1 cb 16	 ror	 r11d, 22
  001ad	8b c2		 mov	 eax, edx
  001af	c1 e0 07	 shl	 eax, 7
  001b2	44 33 d8	 xor	 r11d, eax
  001b5	45 33 da	 xor	 r11d, r10d
  001b8	41 c1 c9 05	 ror	 r9d, 5
  001bc	44 33 ca	 xor	 r9d, edx
  001bf	45 33 ca	 xor	 r9d, r10d
  001c2	41 c1 ca 07	 ror	 r10d, 7
  001c6	41 8b c1	 mov	 eax, r9d
  001c9	c1 e0 03	 shl	 eax, 3
  001cc	44 33 d0	 xor	 r10d, eax
  001cf	45 33 d3	 xor	 r10d, r11d
  001d2	d1 ca		 ror	 edx, 1
  001d4	41 33 d3	 xor	 edx, r11d
  001d7	41 33 d1	 xor	 edx, r9d
  001da	41 c1 cb 03	 ror	 r11d, 3
  001de	41 c1 c9 0d	 ror	 r9d, 13
  001e2	41 8b cb	 mov	 ecx, r11d
  001e5	41 23 ca	 and	 ecx, r10d
  001e8	33 ca		 xor	 ecx, edx
  001ea	41 0b d2	 or	 edx, r10d
  001ed	41 23 d1	 and	 edx, r9d
  001f0	8b c1		 mov	 eax, ecx
  001f2	41 f7 d1	 not	 r9d
  001f5	33 c2		 xor	 eax, edx
  001f7	44 33 d8	 xor	 r11d, eax
  001fa	8b c1		 mov	 eax, ecx
  001fc	45 33 d3	 xor	 r10d, r11d
  001ff	23 c2		 and	 eax, edx
  00201	41 33 c2	 xor	 eax, r10d
  00204	45 23 d1	 and	 r10d, r9d
  00207	44 33 d1	 xor	 r10d, ecx
  0020a	44 33 c8	 xor	 r9d, eax
  0020d	45 33 d1	 xor	 r10d, r9d
  00210	41 23 c9	 and	 ecx, r9d
  00213	8b 55 44	 mov	 edx, DWORD PTR [rbp+68]
  00216	44 8b 45 48	 mov	 r8d, DWORD PTR [rbp+72]
  0021a	41 33 cb	 xor	 ecx, r11d
  0021d	44 33 5d 4c	 xor	 r11d, DWORD PTR [rbp+76]
  00221	41 0b ca	 or	 ecx, r10d
  00224	41 33 d2	 xor	 edx, r10d
  00227	44 8b 55 40	 mov	 r10d, DWORD PTR [rbp+64]
  0022b	33 c8		 xor	 ecx, eax
  0022d	41 33 d1	 xor	 edx, r9d
  00230	44 33 c1	 xor	 r8d, ecx
  00233	45 33 d1	 xor	 r10d, r9d

; 874  : 		afterI4(ILT); afterI4(I3); afterI3(KX); 

  00236	44 8b 4d 38	 mov	 r9d, DWORD PTR [rbp+56]
  0023a	41 c1 c8 16	 ror	 r8d, 22
  0023e	8b c2		 mov	 eax, edx
  00240	c1 e0 07	 shl	 eax, 7
  00243	44 33 c0	 xor	 r8d, eax
  00246	45 33 c3	 xor	 r8d, r11d
  00249	41 c1 ca 05	 ror	 r10d, 5
  0024d	44 33 d2	 xor	 r10d, edx
  00250	45 33 d3	 xor	 r10d, r11d
  00253	41 c1 cb 07	 ror	 r11d, 7
  00257	41 8b c2	 mov	 eax, r10d
  0025a	c1 e0 03	 shl	 eax, 3
  0025d	44 33 d8	 xor	 r11d, eax
  00260	45 33 d8	 xor	 r11d, r8d
  00263	d1 ca		 ror	 edx, 1
  00265	41 33 d0	 xor	 edx, r8d
  00268	41 33 d2	 xor	 edx, r10d
  0026b	41 c1 c8 03	 ror	 r8d, 3
  0026f	41 c1 ca 0d	 ror	 r10d, 13
  00273	41 8b c0	 mov	 eax, r8d
  00276	44 33 c2	 xor	 r8d, edx
  00279	41 8b d8	 mov	 ebx, r8d
  0027c	23 da		 and	 ebx, edx
  0027e	41 33 da	 xor	 ebx, r10d
  00281	44 23 d0	 and	 r10d, eax
  00284	41 33 c3	 xor	 eax, r11d
  00287	44 33 d0	 xor	 r10d, eax
  0028a	8b cb		 mov	 ecx, ebx
  0028c	41 0b cb	 or	 ecx, r11d
  0028f	41 33 c8	 xor	 ecx, r8d
  00292	45 33 c2	 xor	 r8d, r10d
  00295	41 33 c0	 xor	 eax, r8d
  00298	44 23 c1	 and	 r8d, ecx
  0029b	44 0b d1	 or	 r10d, ecx
  0029e	44 33 d3	 xor	 r10d, ebx
  002a1	0b d9		 or	 ebx, ecx
  002a3	41 33 d8	 xor	 ebx, r8d
  002a6	44 33 c0	 xor	 r8d, eax
  002a9	33 5d 3c	 xor	 ebx, DWORD PTR [rbp+60]
  002ac	45 33 c2	 xor	 r8d, r10d
  002af	44 33 55 34	 xor	 r10d, DWORD PTR [rbp+52]
  002b3	45 33 c8	 xor	 r9d, r8d
  002b6	44 8b 45 30	 mov	 r8d, DWORD PTR [rbp+48]

; 875  : 		afterI3(ILT); afterI3(I2); afterI2(KX); 

  002ba	41 8b c2	 mov	 eax, r10d
  002bd	44 33 c1	 xor	 r8d, ecx
  002c0	c1 e0 07	 shl	 eax, 7
  002c3	41 c1 c9 16	 ror	 r9d, 22
  002c7	44 33 c8	 xor	 r9d, eax
  002ca	44 33 cb	 xor	 r9d, ebx
  002cd	41 c1 c8 05	 ror	 r8d, 5
  002d1	44 33 c3	 xor	 r8d, ebx
  002d4	45 33 c2	 xor	 r8d, r10d
  002d7	c1 cb 07	 ror	 ebx, 7
  002da	41 8b c0	 mov	 eax, r8d
  002dd	c1 e0 03	 shl	 eax, 3
  002e0	33 d8		 xor	 ebx, eax
  002e2	41 33 d9	 xor	 ebx, r9d
  002e5	41 d1 ca	 ror	 r10d, 1
  002e8	45 33 d1	 xor	 r10d, r9d
  002eb	45 33 d0	 xor	 r10d, r8d
  002ee	41 c1 c8 0d	 ror	 r8d, 13
  002f2	41 c1 c9 03	 ror	 r9d, 3
  002f6	44 33 cb	 xor	 r9d, ebx
  002f9	41 33 d8	 xor	 ebx, r8d
  002fc	41 8b c9	 mov	 ecx, r9d
  002ff	41 8b d1	 mov	 edx, r9d
  00302	23 cb		 and	 ecx, ebx
  00304	41 0b d2	 or	 edx, r10d
  00307	41 33 ca	 xor	 ecx, r10d
  0030a	33 d3		 xor	 edx, ebx
  0030c	44 8b 55 28	 mov	 r10d, DWORD PTR [rbp+40]
  00310	23 d9		 and	 ebx, ecx
  00312	44 33 c9	 xor	 r9d, ecx
  00315	41 23 d8	 and	 ebx, r8d
  00318	f7 d1		 not	 ecx
  0031a	41 33 d9	 xor	 ebx, r9d
  0031d	44 23 ca	 and	 r9d, edx
  00320	8b c1		 mov	 eax, ecx
  00322	41 33 c0	 xor	 eax, r8d
  00325	45 0b c8	 or	 r9d, r8d
  00328	44 8b c3	 mov	 r8d, ebx
  0032b	33 5d 24	 xor	 ebx, DWORD PTR [rbp+36]
  0032e	44 33 c1	 xor	 r8d, ecx
  00331	23 c2		 and	 eax, edx
  00333	44 33 c0	 xor	 r8d, eax
  00336	44 33 c9	 xor	 r9d, ecx
  00339	8b 4d 20	 mov	 ecx, DWORD PTR [rbp+32]
  0033c	44 33 45 2c	 xor	 r8d, DWORD PTR [rbp+44]
  00340	33 ca		 xor	 ecx, edx
  00342	45 33 d1	 xor	 r10d, r9d

; 876  : 		afterI2(ILT); afterI2(I1); afterI1(KX); 

  00345	41 c1 ca 16	 ror	 r10d, 22
  00349	8b c3		 mov	 eax, ebx
  0034b	c1 e0 07	 shl	 eax, 7
  0034e	44 33 d0	 xor	 r10d, eax
  00351	45 33 d0	 xor	 r10d, r8d
  00354	c1 c9 05	 ror	 ecx, 5
  00357	33 cb		 xor	 ecx, ebx
  00359	41 33 c8	 xor	 ecx, r8d
  0035c	41 c1 c8 07	 ror	 r8d, 7
  00360	8b c1		 mov	 eax, ecx
  00362	c1 e0 03	 shl	 eax, 3
  00365	44 33 c0	 xor	 r8d, eax
  00368	45 33 c2	 xor	 r8d, r10d
  0036b	d1 cb		 ror	 ebx, 1
  0036d	41 33 da	 xor	 ebx, r10d
  00370	33 d9		 xor	 ebx, ecx
  00372	41 c1 ca 03	 ror	 r10d, 3
  00376	c1 c9 0d	 ror	 ecx, 13
  00379	8b d3		 mov	 edx, ebx
  0037b	41 33 d8	 xor	 ebx, r8d
  0037e	41 33 d2	 xor	 edx, r10d
  00381	8b c3		 mov	 eax, ebx
  00383	8b f3		 mov	 esi, ebx
  00385	41 23 c0	 and	 eax, r8d
  00388	44 8b 45 18	 mov	 r8d, DWORD PTR [rbp+24]
  0038c	0b f1		 or	 esi, ecx
  0038e	33 c1		 xor	 eax, ecx
  00390	8b 4d 10	 mov	 ecx, DWORD PTR [rbp+16]
  00393	33 f2		 xor	 esi, edx
  00395	33 d8		 xor	 ebx, eax
  00397	44 33 d0	 xor	 r10d, eax
  0039a	f7 d2		 not	 edx
  0039c	41 0b f2	 or	 esi, r10d
  0039f	44 33 55 1c	 xor	 r10d, DWORD PTR [rbp+28]
  003a3	33 f3		 xor	 esi, ebx
  003a5	0b d8		 or	 ebx, eax
  003a7	33 de		 xor	 ebx, esi
  003a9	33 d3		 xor	 edx, ebx
  003ab	0b de		 or	 ebx, esi
  003ad	33 de		 xor	 ebx, esi
  003af	33 75 14	 xor	 esi, DWORD PTR [rbp+20]
  003b2	33 ca		 xor	 ecx, edx
  003b4	0b da		 or	 ebx, edx
  003b6	44 33 c3	 xor	 r8d, ebx

; 877  : 		afterI1(ILT); afterI1(I0); afterI0(KX);

  003b9	44 33 c0	 xor	 r8d, eax
  003bc	8b c6		 mov	 eax, esi
  003be	c1 e0 07	 shl	 eax, 7
  003c1	41 c1 c8 16	 ror	 r8d, 22
  003c5	44 33 c0	 xor	 r8d, eax
  003c8	45 33 c2	 xor	 r8d, r10d
  003cb	c1 c9 05	 ror	 ecx, 5
  003ce	41 33 ca	 xor	 ecx, r10d
  003d1	33 ce		 xor	 ecx, esi
  003d3	41 c1 ca 07	 ror	 r10d, 7
  003d7	8b c1		 mov	 eax, ecx
  003d9	c1 e0 03	 shl	 eax, 3
  003dc	44 33 d0	 xor	 r10d, eax
  003df	45 33 d0	 xor	 r10d, r8d
  003e2	d1 ce		 ror	 esi, 1
  003e4	41 33 f0	 xor	 esi, r8d
  003e7	33 f1		 xor	 esi, ecx
  003e9	8b d6		 mov	 edx, esi
  003eb	c1 c9 0d	 ror	 ecx, 13
  003ee	41 c1 c8 03	 ror	 r8d, 3
  003f2	41 f7 d0	 not	 r8d
  003f5	0b f1		 or	 esi, ecx
  003f7	f7 d2		 not	 edx
  003f9	41 33 f0	 xor	 esi, r8d
  003fc	33 ca		 xor	 ecx, edx
  003fe	8b c2		 mov	 eax, edx
  00400	41 0b c0	 or	 eax, r8d
  00403	41 33 f2	 xor	 esi, r10d

; 878  : 	}
; 879  : 	while (--i != 0);

  00406	41 bc 03 00 00
	00		 mov	 r12d, 3
  0040c	33 c1		 xor	 eax, ecx
  0040e	41 23 ca	 and	 ecx, r10d
  00411	44 8b c6	 mov	 r8d, esi
  00414	33 d1		 xor	 edx, ecx
  00416	44 0b c1	 or	 r8d, ecx
  00419	44 33 c0	 xor	 r8d, eax
  0041c	44 33 d2	 xor	 r10d, edx
  0041f	33 c6		 xor	 eax, esi
  00421	44 33 d6	 xor	 r10d, esi
  00424	33 75 08	 xor	 esi, DWORD PTR [rbp+8]
  00427	45 33 d0	 xor	 r10d, r8d
  0042a	44 33 45 00	 xor	 r8d, DWORD PTR [rbp]
  0042e	41 23 c2	 and	 eax, r10d
  00431	33 45 04	 xor	 eax, DWORD PTR [rbp+4]
  00434	33 d0		 xor	 edx, eax
  00436	44 33 55 0c	 xor	 r10d, DWORD PTR [rbp+12]
$start$27710:
  0043a	8b 4d f8	 mov	 ecx, DWORD PTR [rbp-8]
  0043d	48 83 c5 80	 add	 rbp, -128		; ffffffffffffff80H
  00441	c1 ce 16	 ror	 esi, 22
  00444	8b c2		 mov	 eax, edx
  00446	c1 e0 07	 shl	 eax, 7
  00449	33 f0		 xor	 esi, eax
  0044b	41 33 f2	 xor	 esi, r10d
  0044e	41 c1 c8 05	 ror	 r8d, 5
  00452	45 33 c2	 xor	 r8d, r10d
  00455	44 33 c2	 xor	 r8d, edx
  00458	41 c1 ca 07	 ror	 r10d, 7
  0045c	41 8b c0	 mov	 eax, r8d
  0045f	c1 e0 03	 shl	 eax, 3
  00462	44 33 d0	 xor	 r10d, eax
  00465	44 33 d6	 xor	 r10d, esi
  00468	d1 ca		 ror	 edx, 1
  0046a	33 d6		 xor	 edx, esi
  0046c	41 33 d0	 xor	 edx, r8d
  0046f	c1 ce 03	 ror	 esi, 3
  00472	41 c1 c8 0d	 ror	 r8d, 13
  00476	44 8b de	 mov	 r11d, esi
  00479	41 33 f0	 xor	 esi, r8d
  0047c	45 23 c2	 and	 r8d, r10d
  0047f	45 0b da	 or	 r11d, r10d
  00482	44 33 d2	 xor	 r10d, edx
  00485	41 0b d0	 or	 edx, r8d
  00488	45 23 d3	 and	 r10d, r11d
  0048b	f7 d6		 not	 esi
  0048d	44 33 c6	 xor	 r8d, esi
  00490	41 23 f3	 and	 esi, r11d
  00493	33 d6		 xor	 edx, esi
  00495	41 33 f0	 xor	 esi, r8d
  00498	44 33 da	 xor	 r11d, edx
  0049b	33 ca		 xor	 ecx, edx
  0049d	44 8b ce	 mov	 r9d, esi
  004a0	45 0b c8	 or	 r9d, r8d
  004a3	44 8b 45 70	 mov	 r8d, DWORD PTR [rbp+112]
  004a7	45 33 ca	 xor	 r9d, r10d
  004aa	45 33 d3	 xor	 r10d, r11d
  004ad	45 0b d9	 or	 r11d, r9d
  004b0	44 33 4d 74	 xor	 r9d, DWORD PTR [rbp+116]
  004b4	45 33 c2	 xor	 r8d, r10d
  004b7	44 33 de	 xor	 r11d, esi
  004ba	44 33 c6	 xor	 r8d, esi
  004bd	41 8b c1	 mov	 eax, r9d
  004c0	44 33 5d 7c	 xor	 r11d, DWORD PTR [rbp+124]
  004c4	c1 e0 07	 shl	 eax, 7
  004c7	c1 c9 16	 ror	 ecx, 22
  004ca	33 c8		 xor	 ecx, eax
  004cc	41 33 cb	 xor	 ecx, r11d
  004cf	41 c1 c8 05	 ror	 r8d, 5
  004d3	45 33 c3	 xor	 r8d, r11d
  004d6	45 33 c1	 xor	 r8d, r9d
  004d9	41 c1 cb 07	 ror	 r11d, 7
  004dd	41 8b c0	 mov	 eax, r8d
  004e0	c1 e0 03	 shl	 eax, 3
  004e3	44 33 d8	 xor	 r11d, eax
  004e6	44 33 d9	 xor	 r11d, ecx
  004e9	41 d1 c9	 ror	 r9d, 1
  004ec	45 33 c8	 xor	 r9d, r8d
  004ef	41 8b d3	 mov	 edx, r11d
  004f2	44 33 c9	 xor	 r9d, ecx
  004f5	c1 c9 03	 ror	 ecx, 3
  004f8	41 c1 c8 0d	 ror	 r8d, 13
  004fc	44 33 c1	 xor	 r8d, ecx
  004ff	33 d1		 xor	 edx, ecx
  00501	45 33 d9	 xor	 r11d, r9d
  00504	41 0b d0	 or	 edx, r8d
  00507	45 8b d0	 mov	 r10d, r8d
  0050a	44 23 d1	 and	 r10d, ecx
  0050d	41 f7 d2	 not	 r10d
  00510	45 33 d3	 xor	 r10d, r11d
  00513	44 33 da	 xor	 r11d, edx
  00516	41 33 d1	 xor	 edx, r9d
  00519	45 33 c2	 xor	 r8d, r10d
  0051c	41 8b cb	 mov	 ecx, r11d
  0051f	41 8b c3	 mov	 eax, r11d
  00522	41 23 c9	 and	 ecx, r9d
  00525	41 33 c0	 xor	 eax, r8d
  00528	41 33 c8	 xor	 ecx, r8d
  0052b	41 0b c2	 or	 eax, r10d
  0052e	44 33 55 64	 xor	 r10d, DWORD PTR [rbp+100]
  00532	8b 5d 68	 mov	 ebx, DWORD PTR [rbp+104]
  00535	44 8b 45 6c	 mov	 r8d, DWORD PTR [rbp+108]
  00539	33 d8		 xor	 ebx, eax
  0053b	44 8b 4d 50	 mov	 r9d, DWORD PTR [rbp+80]
  0053f	45 33 c3	 xor	 r8d, r11d
  00542	33 da		 xor	 ebx, edx
  00544	8b 55 60	 mov	 edx, DWORD PTR [rbp+96]
  00547	44 8b 5d 58	 mov	 r11d, DWORD PTR [rbp+88]
  0054b	44 33 c1	 xor	 r8d, ecx
  0054e	33 d1		 xor	 edx, ecx
  00550	c1 cb 16	 ror	 ebx, 22
  00553	41 8b c2	 mov	 eax, r10d
  00556	c1 e0 07	 shl	 eax, 7
  00559	33 d8		 xor	 ebx, eax
  0055b	41 33 d8	 xor	 ebx, r8d
  0055e	c1 ca 05	 ror	 edx, 5
  00561	41 33 d0	 xor	 edx, r8d
  00564	41 33 d2	 xor	 edx, r10d
  00567	41 c1 c8 07	 ror	 r8d, 7
  0056b	8b c2		 mov	 eax, edx
  0056d	c1 e0 03	 shl	 eax, 3
  00570	44 33 c0	 xor	 r8d, eax
  00573	44 33 c3	 xor	 r8d, ebx
  00576	41 d1 ca	 ror	 r10d, 1
  00579	44 33 d3	 xor	 r10d, ebx
  0057c	41 8b c0	 mov	 eax, r8d
  0057f	44 33 d2	 xor	 r10d, edx
  00582	c1 ca 0d	 ror	 edx, 13
  00585	c1 cb 03	 ror	 ebx, 3
  00588	0b c2		 or	 eax, edx
  0058a	41 f7 d2	 not	 r10d
  0058d	41 33 da	 xor	 ebx, r10d
  00590	33 c3		 xor	 eax, ebx
  00592	41 0b da	 or	 ebx, r10d
  00595	44 33 c0	 xor	 r8d, eax
  00598	23 da		 and	 ebx, edx
  0059a	41 33 d8	 xor	 ebx, r8d
  0059d	44 0b c2	 or	 r8d, edx
  005a0	45 33 c2	 xor	 r8d, r10d
  005a3	8b cb		 mov	 ecx, ebx
  005a5	44 33 c3	 xor	 r8d, ebx
  005a8	33 5d 5c	 xor	 ebx, DWORD PTR [rbp+92]
  005ab	41 23 ca	 and	 ecx, r10d
  005ae	33 c8		 xor	 ecx, eax
  005b0	41 23 c0	 and	 eax, r8d
  005b3	44 33 c1	 xor	 r8d, ecx
  005b6	44 33 c9	 xor	 r9d, ecx
  005b9	41 33 c0	 xor	 eax, r8d
  005bc	41 f7 d0	 not	 r8d
  005bf	33 c2		 xor	 eax, edx
  005c1	8b 55 54	 mov	 edx, DWORD PTR [rbp+84]
  005c4	44 33 d8	 xor	 r11d, eax
  005c7	41 33 d0	 xor	 edx, r8d
  005ca	41 c1 cb 16	 ror	 r11d, 22
  005ce	8b c2		 mov	 eax, edx
  005d0	c1 e0 07	 shl	 eax, 7
  005d3	44 33 d8	 xor	 r11d, eax
  005d6	44 33 db	 xor	 r11d, ebx
  005d9	41 c1 c9 05	 ror	 r9d, 5
  005dd	44 33 ca	 xor	 r9d, edx
  005e0	44 33 cb	 xor	 r9d, ebx
  005e3	c1 cb 07	 ror	 ebx, 7
  005e6	41 8b c1	 mov	 eax, r9d
  005e9	c1 e0 03	 shl	 eax, 3
  005ec	33 d8		 xor	 ebx, eax
  005ee	41 33 db	 xor	 ebx, r11d
  005f1	d1 ca		 ror	 edx, 1
  005f3	41 33 d3	 xor	 edx, r11d
  005f6	41 33 d1	 xor	 edx, r9d
  005f9	41 c1 cb 03	 ror	 r11d, 3
  005fd	41 c1 c9 0d	 ror	 r9d, 13
  00601	41 8b cb	 mov	 ecx, r11d
  00604	23 cb		 and	 ecx, ebx
  00606	33 ca		 xor	 ecx, edx
  00608	0b d3		 or	 edx, ebx
  0060a	41 23 d1	 and	 edx, r9d
  0060d	8b c1		 mov	 eax, ecx
  0060f	41 f7 d1	 not	 r9d
  00612	33 c2		 xor	 eax, edx
  00614	44 33 d8	 xor	 r11d, eax
  00617	44 8b 45 48	 mov	 r8d, DWORD PTR [rbp+72]
  0061b	44 8b 55 40	 mov	 r10d, DWORD PTR [rbp+64]
  0061f	41 33 db	 xor	 ebx, r11d
  00622	8b c1		 mov	 eax, ecx
  00624	23 c2		 and	 eax, edx
  00626	8b 55 44	 mov	 edx, DWORD PTR [rbp+68]
  00629	33 c3		 xor	 eax, ebx
  0062b	41 23 d9	 and	 ebx, r9d
  0062e	44 33 c8	 xor	 r9d, eax
  00631	33 d9		 xor	 ebx, ecx
  00633	41 33 d9	 xor	 ebx, r9d
  00636	45 33 d1	 xor	 r10d, r9d
  00639	41 23 c9	 and	 ecx, r9d
  0063c	33 d3		 xor	 edx, ebx
  0063e	41 33 cb	 xor	 ecx, r11d
  00641	44 33 5d 4c	 xor	 r11d, DWORD PTR [rbp+76]
  00645	0b cb		 or	 ecx, ebx
  00647	41 33 d1	 xor	 edx, r9d
  0064a	44 8b 4d 38	 mov	 r9d, DWORD PTR [rbp+56]
  0064e	33 c8		 xor	 ecx, eax
  00650	8b c2		 mov	 eax, edx
  00652	44 33 c1	 xor	 r8d, ecx
  00655	c1 e0 07	 shl	 eax, 7
  00658	41 c1 c8 16	 ror	 r8d, 22
  0065c	44 33 c0	 xor	 r8d, eax
  0065f	45 33 c3	 xor	 r8d, r11d
  00662	41 c1 ca 05	 ror	 r10d, 5
  00666	44 33 d2	 xor	 r10d, edx
  00669	45 33 d3	 xor	 r10d, r11d
  0066c	41 c1 cb 07	 ror	 r11d, 7
  00670	41 8b c2	 mov	 eax, r10d
  00673	c1 e0 03	 shl	 eax, 3
  00676	44 33 d8	 xor	 r11d, eax
  00679	45 33 d8	 xor	 r11d, r8d
  0067c	d1 ca		 ror	 edx, 1
  0067e	41 33 d0	 xor	 edx, r8d
  00681	41 33 d2	 xor	 edx, r10d
  00684	41 c1 c8 03	 ror	 r8d, 3
  00688	41 c1 ca 0d	 ror	 r10d, 13
  0068c	41 8b c0	 mov	 eax, r8d
  0068f	44 33 c2	 xor	 r8d, edx
  00692	41 8b d8	 mov	 ebx, r8d
  00695	23 da		 and	 ebx, edx
  00697	41 33 da	 xor	 ebx, r10d
  0069a	44 23 d0	 and	 r10d, eax
  0069d	41 33 c3	 xor	 eax, r11d
  006a0	44 33 d0	 xor	 r10d, eax
  006a3	8b cb		 mov	 ecx, ebx
  006a5	41 0b cb	 or	 ecx, r11d
  006a8	41 33 c8	 xor	 ecx, r8d
  006ab	45 33 c2	 xor	 r8d, r10d
  006ae	41 33 c0	 xor	 eax, r8d
  006b1	44 23 c1	 and	 r8d, ecx
  006b4	44 0b d1	 or	 r10d, ecx
  006b7	44 33 d3	 xor	 r10d, ebx
  006ba	0b d9		 or	 ebx, ecx
  006bc	41 33 d8	 xor	 ebx, r8d
  006bf	44 33 c0	 xor	 r8d, eax
  006c2	33 5d 3c	 xor	 ebx, DWORD PTR [rbp+60]
  006c5	45 33 c2	 xor	 r8d, r10d
  006c8	44 33 55 34	 xor	 r10d, DWORD PTR [rbp+52]
  006cc	45 33 c8	 xor	 r9d, r8d
  006cf	44 8b 45 30	 mov	 r8d, DWORD PTR [rbp+48]
  006d3	41 8b c2	 mov	 eax, r10d
  006d6	c1 e0 07	 shl	 eax, 7
  006d9	41 c1 c9 16	 ror	 r9d, 22
  006dd	44 33 c1	 xor	 r8d, ecx
  006e0	44 33 c8	 xor	 r9d, eax
  006e3	44 33 cb	 xor	 r9d, ebx
  006e6	41 c1 c8 05	 ror	 r8d, 5
  006ea	44 33 c3	 xor	 r8d, ebx
  006ed	45 33 c2	 xor	 r8d, r10d
  006f0	c1 cb 07	 ror	 ebx, 7
  006f3	41 8b c0	 mov	 eax, r8d
  006f6	c1 e0 03	 shl	 eax, 3
  006f9	33 d8		 xor	 ebx, eax
  006fb	41 33 d9	 xor	 ebx, r9d
  006fe	41 d1 ca	 ror	 r10d, 1
  00701	45 33 d1	 xor	 r10d, r9d
  00704	45 33 d0	 xor	 r10d, r8d
  00707	41 c1 c8 0d	 ror	 r8d, 13
  0070b	41 c1 c9 03	 ror	 r9d, 3
  0070f	44 33 cb	 xor	 r9d, ebx
  00712	41 33 d8	 xor	 ebx, r8d
  00715	41 8b c9	 mov	 ecx, r9d
  00718	41 8b d1	 mov	 edx, r9d
  0071b	23 cb		 and	 ecx, ebx
  0071d	41 0b d2	 or	 edx, r10d
  00720	33 d3		 xor	 edx, ebx
  00722	41 33 ca	 xor	 ecx, r10d
  00725	44 8b 55 28	 mov	 r10d, DWORD PTR [rbp+40]
  00729	23 d9		 and	 ebx, ecx
  0072b	44 33 c9	 xor	 r9d, ecx
  0072e	f7 d1		 not	 ecx
  00730	41 23 d8	 and	 ebx, r8d
  00733	8b c1		 mov	 eax, ecx
  00735	41 33 c0	 xor	 eax, r8d
  00738	41 33 d9	 xor	 ebx, r9d
  0073b	44 23 ca	 and	 r9d, edx
  0073e	23 c2		 and	 eax, edx
  00740	45 0b c8	 or	 r9d, r8d
  00743	44 8b c3	 mov	 r8d, ebx
  00746	33 5d 24	 xor	 ebx, DWORD PTR [rbp+36]
  00749	44 33 c1	 xor	 r8d, ecx
  0074c	44 33 c9	 xor	 r9d, ecx
  0074f	8b 4d 20	 mov	 ecx, DWORD PTR [rbp+32]
  00752	44 33 c0	 xor	 r8d, eax
  00755	45 33 d1	 xor	 r10d, r9d
  00758	44 33 45 2c	 xor	 r8d, DWORD PTR [rbp+44]
  0075c	33 ca		 xor	 ecx, edx
  0075e	41 c1 ca 16	 ror	 r10d, 22
  00762	8b c3		 mov	 eax, ebx
  00764	c1 e0 07	 shl	 eax, 7
  00767	44 33 d0	 xor	 r10d, eax
  0076a	45 33 d0	 xor	 r10d, r8d
  0076d	c1 c9 05	 ror	 ecx, 5
  00770	33 cb		 xor	 ecx, ebx
  00772	41 33 c8	 xor	 ecx, r8d
  00775	41 c1 c8 07	 ror	 r8d, 7
  00779	8b c1		 mov	 eax, ecx
  0077b	c1 e0 03	 shl	 eax, 3
  0077e	44 33 c0	 xor	 r8d, eax
  00781	45 33 c2	 xor	 r8d, r10d
  00784	d1 cb		 ror	 ebx, 1
  00786	41 33 da	 xor	 ebx, r10d
  00789	33 d9		 xor	 ebx, ecx
  0078b	41 c1 ca 03	 ror	 r10d, 3
  0078f	c1 c9 0d	 ror	 ecx, 13
  00792	8b d3		 mov	 edx, ebx
  00794	41 33 d8	 xor	 ebx, r8d
  00797	41 33 d2	 xor	 edx, r10d
  0079a	8b c3		 mov	 eax, ebx
  0079c	8b f3		 mov	 esi, ebx
  0079e	41 23 c0	 and	 eax, r8d
  007a1	44 8b 45 18	 mov	 r8d, DWORD PTR [rbp+24]
  007a5	0b f1		 or	 esi, ecx
  007a7	33 c1		 xor	 eax, ecx
  007a9	8b 4d 10	 mov	 ecx, DWORD PTR [rbp+16]
  007ac	33 f2		 xor	 esi, edx
  007ae	33 d8		 xor	 ebx, eax
  007b0	44 33 d0	 xor	 r10d, eax
  007b3	f7 d2		 not	 edx
  007b5	41 0b f2	 or	 esi, r10d
  007b8	44 33 55 1c	 xor	 r10d, DWORD PTR [rbp+28]
  007bc	33 f3		 xor	 esi, ebx
  007be	0b d8		 or	 ebx, eax
  007c0	33 de		 xor	 ebx, esi
  007c2	33 d3		 xor	 edx, ebx
  007c4	0b de		 or	 ebx, esi
  007c6	33 de		 xor	 ebx, esi
  007c8	33 75 14	 xor	 esi, DWORD PTR [rbp+20]
  007cb	33 ca		 xor	 ecx, edx
  007cd	0b da		 or	 ebx, edx
  007cf	44 33 c3	 xor	 r8d, ebx
  007d2	44 33 c0	 xor	 r8d, eax
  007d5	8b c6		 mov	 eax, esi
  007d7	41 c1 c8 16	 ror	 r8d, 22
  007db	c1 e0 07	 shl	 eax, 7
  007de	44 33 c0	 xor	 r8d, eax
  007e1	45 33 c2	 xor	 r8d, r10d
  007e4	c1 c9 05	 ror	 ecx, 5
  007e7	41 33 ca	 xor	 ecx, r10d
  007ea	33 ce		 xor	 ecx, esi
  007ec	41 c1 ca 07	 ror	 r10d, 7
  007f0	8b c1		 mov	 eax, ecx
  007f2	c1 e0 03	 shl	 eax, 3
  007f5	44 33 d0	 xor	 r10d, eax
  007f8	45 33 d0	 xor	 r10d, r8d
  007fb	d1 ce		 ror	 esi, 1
  007fd	41 33 f0	 xor	 esi, r8d
  00800	33 f1		 xor	 esi, ecx
  00802	c1 c9 0d	 ror	 ecx, 13
  00805	41 c1 c8 03	 ror	 r8d, 3
  00809	41 f7 d0	 not	 r8d
  0080c	8b d6		 mov	 edx, esi
  0080e	0b f1		 or	 esi, ecx
  00810	41 33 f0	 xor	 esi, r8d
  00813	f7 d2		 not	 edx
  00815	41 33 f2	 xor	 esi, r10d
  00818	33 ca		 xor	 ecx, edx
  0081a	8b c2		 mov	 eax, edx
  0081c	41 0b c0	 or	 eax, r8d
  0081f	44 8b c6	 mov	 r8d, esi
  00822	33 c1		 xor	 eax, ecx
  00824	41 23 ca	 and	 ecx, r10d
  00827	33 d1		 xor	 edx, ecx
  00829	44 0b c1	 or	 r8d, ecx
  0082c	44 33 c0	 xor	 r8d, eax
  0082f	44 33 d2	 xor	 r10d, edx
  00832	33 c6		 xor	 eax, esi
  00834	44 33 d6	 xor	 r10d, esi
  00837	33 75 08	 xor	 esi, DWORD PTR [rbp+8]
  0083a	45 33 d0	 xor	 r10d, r8d
  0083d	44 33 45 00	 xor	 r8d, DWORD PTR [rbp]
  00841	41 23 c2	 and	 eax, r10d
  00844	44 33 55 0c	 xor	 r10d, DWORD PTR [rbp+12]
  00848	33 45 04	 xor	 eax, DWORD PTR [rbp+4]
  0084b	33 d0		 xor	 edx, eax
  0084d	41 83 c4 ff	 add	 r12d, -1		; ffffffffH
  00851	0f 85 e3 fb ff
	ff		 jne	 $start$27710

; 880  : 	
; 881  :     out[0] = LE32(a);
; 882  : 	out[1] = LE32(d);
; 883  : 	out[2] = LE32(b);
; 884  : 	out[3] = LE32(e);
; 885  : }

  00857	48 8b 5c 24 10	 mov	 rbx, QWORD PTR [rsp+16]
  0085c	48 8b 6c 24 18	 mov	 rbp, QWORD PTR [rsp+24]
  00861	89 77 08	 mov	 DWORD PTR [rdi+8], esi
  00864	48 8b 74 24 20	 mov	 rsi, QWORD PTR [rsp+32]
  00869	44 89 07	 mov	 DWORD PTR [rdi], r8d
  0086c	89 57 04	 mov	 DWORD PTR [rdi+4], edx
  0086f	44 89 57 0c	 mov	 DWORD PTR [rdi+12], r10d
  00873	48 8b 7c 24 28	 mov	 rdi, QWORD PTR [rsp+40]
  00878	41 5c		 pop	 r12
  0087a	c3		 ret	 0
serpent_decrypt ENDP
_TEXT	ENDS
PUBLIC	serpent_encrypt
;	COMDAT pdata
pdata	SEGMENT
$pdata$serpent_encrypt DD imagerel $LN11
	DD	imagerel $LN11+2109
	DD	imagerel $unwind$serpent_encrypt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$serpent_encrypt DD 091501H
	DD	057415H
	DD	046415H
	DD	035415H
	DD	023415H
	DD	0c015H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT serpent_encrypt
_TEXT	SEGMENT
inBlock$ = 16
outBlock$ = 24
ks$ = 32
serpent_encrypt PROC					; COMDAT

; 737  : {

$LN11:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp
  0000b	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0000f	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  00013	41 54		 push	 r12
  00015	48 8b ea	 mov	 rbp, rdx

; 738  : 	unsigned __int32 a, b, c, d, e;
; 739  : 	unsigned int i=1;
; 740  : 	const unsigned __int32 *k = (unsigned __int32 *)ks + 8;

  00018	49 8d 70 20	 lea	 rsi, QWORD PTR [r8+32]

; 741  : 	unsigned __int32 *in = (unsigned __int32 *) inBlock;
; 742  : 	unsigned __int32 *out = (unsigned __int32 *) outBlock;
; 743  : 
; 744  :     a = LE32(in[0]);
; 745  : 	b = LE32(in[1]);
; 746  : 	c = LE32(in[2]);
; 747  : 	d = LE32(in[3]);
; 748  : 
; 749  : 	do
; 750  : 	{
; 751  : 		beforeS0(KX); beforeS0(S0); afterS0(LT);

  0001c	44 8b 06	 mov	 r8d, DWORD PTR [rsi]
  0001f	44 8b 4e 0c	 mov	 r9d, DWORD PTR [rsi+12]
  00023	44 8b 56 08	 mov	 r10d, DWORD PTR [rsi+8]
  00027	44 33 49 0c	 xor	 r9d, DWORD PTR [rcx+12]
  0002b	44 33 01	 xor	 r8d, DWORD PTR [rcx]
  0002e	44 33 51 08	 xor	 r10d, DWORD PTR [rcx+8]
  00032	8b 46 04	 mov	 eax, DWORD PTR [rsi+4]
  00035	45 33 c8	 xor	 r9d, r8d
  00038	41 8b fa	 mov	 edi, r10d
  0003b	33 41 04	 xor	 eax, DWORD PTR [rcx+4]
  0003e	41 8b c9	 mov	 ecx, r9d
  00041	41 8b d1	 mov	 edx, r9d
  00044	33 f8		 xor	 edi, eax
  00046	23 c8		 and	 ecx, eax
  00048	41 0b d0	 or	 edx, r8d
  0004b	33 d7		 xor	 edx, edi
  0004d	41 33 f9	 xor	 edi, r9d
  00050	45 33 ca	 xor	 r9d, r10d
  00053	41 33 c8	 xor	 ecx, r8d
  00056	44 0b d1	 or	 r10d, ecx
  00059	44 33 d7	 xor	 r10d, edi
  0005c	f7 d7		 not	 edi
  0005e	0b f9		 or	 edi, ecx
  00060	8b c7		 mov	 eax, edi
  00062	41 33 c1	 xor	 eax, r9d
  00065	44 0b ca	 or	 r9d, edx
  00068	33 c8		 xor	 ecx, eax
  0006a	41 33 f9	 xor	 edi, r9d
  0006d	45 8b c1	 mov	 r8d, r9d

; 752  : 		afterS0(KX); afterS0(S1); afterS1(LT);

  00070	44 8b 4e 18	 mov	 r9d, DWORD PTR [rsi+24]
  00074	44 33 c1	 xor	 r8d, ecx
  00077	41 c1 c0 0d	 rol	 r8d, 13
  0007b	41 c1 c2 03	 rol	 r10d, 3
  0007f	41 33 fa	 xor	 edi, r10d
  00082	41 8b d8	 mov	 ebx, r8d
  00085	c1 e3 03	 shl	 ebx, 3
  00088	41 33 f8	 xor	 edi, r8d
  0008b	41 33 da	 xor	 ebx, r10d
  0008e	33 da		 xor	 ebx, edx
  00090	c1 c3 07	 rol	 ebx, 7
  00093	d1 c7		 rol	 edi, 1
  00095	8b c7		 mov	 eax, edi
  00097	8b d7		 mov	 edx, edi
  00099	33 7e 14	 xor	 edi, DWORD PTR [rsi+20]
  0009c	41 33 d0	 xor	 edx, r8d
  0009f	c1 e0 07	 shl	 eax, 7
  000a2	33 d3		 xor	 edx, ebx
  000a4	41 33 c2	 xor	 eax, r10d
  000a7	33 c3		 xor	 eax, ebx
  000a9	33 5e 1c	 xor	 ebx, DWORD PTR [rsi+28]
  000ac	c1 c0 16	 rol	 eax, 22
  000af	c1 c2 05	 rol	 edx, 5
  000b2	33 56 10	 xor	 edx, DWORD PTR [rsi+16]
  000b5	44 33 c8	 xor	 r9d, eax
  000b8	f7 d2		 not	 edx
  000ba	41 f7 d1	 not	 r9d
  000bd	8b ca		 mov	 ecx, edx
  000bf	23 d7		 and	 edx, edi
  000c1	44 33 ca	 xor	 r9d, edx
  000c4	0b d3		 or	 edx, ebx
  000c6	33 fa		 xor	 edi, edx
  000c8	33 d1		 xor	 edx, ecx
  000ca	41 33 d9	 xor	 ebx, r9d
  000cd	0b cf		 or	 ecx, edi
  000cf	33 fb		 xor	 edi, ebx
  000d1	44 0b ca	 or	 r9d, edx
  000d4	33 d7		 xor	 edx, edi
  000d6	44 23 c9	 and	 r9d, ecx
  000d9	41 23 f9	 and	 edi, r9d
  000dc	41 8b c1	 mov	 eax, r9d
  000df	23 c2		 and	 eax, edx
  000e1	33 fa		 xor	 edi, edx
  000e3	33 c1		 xor	 eax, ecx
  000e5	41 c1 c1 0d	 rol	 r9d, 13
  000e9	c1 c3 03	 rol	 ebx, 3
  000ec	45 8b d9	 mov	 r11d, r9d
  000ef	41 c1 e3 03	 shl	 r11d, 3
  000f3	44 33 df	 xor	 r11d, edi
  000f6	44 33 db	 xor	 r11d, ebx
  000f9	41 c1 c3 07	 rol	 r11d, 7
  000fd	41 8b d1	 mov	 edx, r9d
  00100	33 d0		 xor	 edx, eax
  00102	45 8b c3	 mov	 r8d, r11d
  00105	33 d3		 xor	 edx, ebx
  00107	45 33 c1	 xor	 r8d, r9d
  0010a	d1 c2		 rol	 edx, 1

; 753  : 		afterS1(KX); afterS1(S2); afterS2(LT);

  0010c	44 33 c2	 xor	 r8d, edx
  0010f	44 8b d2	 mov	 r10d, edx
  00112	33 56 24	 xor	 edx, DWORD PTR [rsi+36]
  00115	41 c1 e2 07	 shl	 r10d, 7
  00119	45 33 d3	 xor	 r10d, r11d
  0011c	44 33 5e 2c	 xor	 r11d, DWORD PTR [rsi+44]
  00120	44 33 d3	 xor	 r10d, ebx
  00123	41 c1 c2 16	 rol	 r10d, 22
  00127	41 c1 c0 05	 rol	 r8d, 5
  0012b	44 33 56 28	 xor	 r10d, DWORD PTR [rsi+40]
  0012f	44 33 46 20	 xor	 r8d, DWORD PTR [rsi+32]
  00133	41 8b c8	 mov	 ecx, r8d
  00136	41 23 ca	 and	 ecx, r10d
  00139	41 33 cb	 xor	 ecx, r11d
  0013c	45 0b d8	 or	 r11d, r8d
  0013f	44 33 da	 xor	 r11d, edx
  00142	8b c1		 mov	 eax, ecx
  00144	33 c2		 xor	 eax, edx
  00146	41 8b fb	 mov	 edi, r11d
  00149	44 33 d0	 xor	 r10d, eax
  0014c	45 33 c2	 xor	 r8d, r10d
  0014f	41 0b f8	 or	 edi, r8d
  00152	33 f9		 xor	 edi, ecx
  00154	41 23 cb	 and	 ecx, r11d
  00157	44 33 c1	 xor	 r8d, ecx
  0015a	8b c7		 mov	 eax, edi
  0015c	41 33 c0	 xor	 eax, r8d
  0015f	41 f7 d0	 not	 r8d
  00162	44 33 d8	 xor	 r11d, eax
  00165	41 c1 c2 0d	 rol	 r10d, 13
  00169	41 c1 c3 03	 rol	 r11d, 3
  0016d	41 8b da	 mov	 ebx, r10d
  00170	c1 e3 03	 shl	 ebx, 3
  00173	41 33 fb	 xor	 edi, r11d
  00176	41 33 fa	 xor	 edi, r10d
  00179	41 33 d8	 xor	 ebx, r8d
  0017c	41 33 db	 xor	 ebx, r11d
  0017f	c1 c3 07	 rol	 ebx, 7
  00182	d1 c7		 rol	 edi, 1
  00184	8b d7		 mov	 edx, edi
  00186	8b cf		 mov	 ecx, edi

; 754  : 		afterS2(KX); afterS2(S3); afterS3(LT);

  00188	33 7e 34	 xor	 edi, DWORD PTR [rsi+52]
  0018b	33 cb		 xor	 ecx, ebx
  0018d	c1 e2 07	 shl	 edx, 7
  00190	33 d3		 xor	 edx, ebx
  00192	33 5e 3c	 xor	 ebx, DWORD PTR [rsi+60]
  00195	41 33 ca	 xor	 ecx, r10d
  00198	41 33 d3	 xor	 edx, r11d
  0019b	c1 c2 16	 rol	 edx, 22
  0019e	c1 c1 05	 rol	 ecx, 5
  001a1	33 4e 30	 xor	 ecx, DWORD PTR [rsi+48]
  001a4	33 56 38	 xor	 edx, DWORD PTR [rsi+56]
  001a7	8b c1		 mov	 eax, ecx
  001a9	0b cb		 or	 ecx, ebx
  001ab	33 df		 xor	 ebx, edi
  001ad	23 f8		 and	 edi, eax
  001af	33 c2		 xor	 eax, edx
  001b1	33 d3		 xor	 edx, ebx
  001b3	0b c7		 or	 eax, edi
  001b5	23 d9		 and	 ebx, ecx
  001b7	33 cf		 xor	 ecx, edi
  001b9	33 d8		 xor	 ebx, eax
  001bb	23 c1		 and	 eax, ecx
  001bd	33 fb		 xor	 edi, ebx
  001bf	33 c2		 xor	 eax, edx
  001c1	0b f9		 or	 edi, ecx
  001c3	33 fa		 xor	 edi, edx
  001c5	44 8b d7	 mov	 r10d, edi
  001c8	44 0b d3	 or	 r10d, ebx
  001cb	44 33 d3	 xor	 r10d, ebx
  001ce	44 33 d1	 xor	 r10d, ecx
  001d1	41 c1 c2 0d	 rol	 r10d, 13
  001d5	c1 c3 03	 rol	 ebx, 3
  001d8	45 8b ca	 mov	 r9d, r10d
  001db	41 c1 e1 03	 shl	 r9d, 3
  001df	41 8b ca	 mov	 ecx, r10d
  001e2	33 cb		 xor	 ecx, ebx
  001e4	44 33 cb	 xor	 r9d, ebx
  001e7	44 33 c8	 xor	 r9d, eax

; 755  : 		afterS3(KX); afterS3(S4); afterS4(LT);

  001ea	8b 46 44	 mov	 eax, DWORD PTR [rsi+68]
  001ed	33 cf		 xor	 ecx, edi
  001ef	41 c1 c1 07	 rol	 r9d, 7
  001f3	d1 c1		 rol	 ecx, 1
  001f5	45 33 d1	 xor	 r10d, r9d
  001f8	44 8b c1	 mov	 r8d, ecx
  001fb	44 33 d1	 xor	 r10d, ecx
  001fe	41 c1 e0 07	 shl	 r8d, 7
  00202	44 33 c3	 xor	 r8d, ebx
  00205	41 c1 c2 05	 rol	 r10d, 5
  00209	44 33 56 40	 xor	 r10d, DWORD PTR [rsi+64]
  0020d	45 33 c1	 xor	 r8d, r9d
  00210	44 33 4e 4c	 xor	 r9d, DWORD PTR [rsi+76]
  00214	41 33 c1	 xor	 eax, r9d
  00217	41 c1 c0 16	 rol	 r8d, 22
  0021b	41 f7 d1	 not	 r9d
  0021e	44 33 46 48	 xor	 r8d, DWORD PTR [rsi+72]
  00222	33 c8		 xor	 ecx, eax
  00224	45 33 c1	 xor	 r8d, r9d
  00227	45 33 ca	 xor	 r9d, r10d
  0022a	41 8b d1	 mov	 edx, r9d
  0022d	23 d1		 and	 edx, ecx
  0022f	41 33 c9	 xor	 ecx, r9d
  00232	44 33 d1	 xor	 r10d, ecx
  00235	41 33 d0	 xor	 edx, r8d
  00238	44 23 c1	 and	 r8d, ecx
  0023b	45 33 c2	 xor	 r8d, r10d
  0023e	44 23 d2	 and	 r10d, edx
  00241	8b c2		 mov	 eax, edx
  00243	0b c1		 or	 eax, ecx
  00245	45 33 ca	 xor	 r9d, r10d
  00248	41 33 c2	 xor	 eax, r10d
  0024b	45 0b d1	 or	 r10d, r9d
  0024e	45 33 d0	 xor	 r10d, r8d
  00251	45 23 c1	 and	 r8d, r9d
  00254	c1 c2 0d	 rol	 edx, 13
  00257	8b da		 mov	 ebx, edx
  00259	41 f7 d2	 not	 r10d
  0025c	41 c1 c2 03	 rol	 r10d, 3
  00260	c1 e3 03	 shl	 ebx, 3
  00263	41 33 da	 xor	 ebx, r10d
  00266	41 8b ca	 mov	 ecx, r10d
  00269	41 33 c8	 xor	 ecx, r8d
  0026c	41 33 d9	 xor	 ebx, r9d
  0026f	33 ca		 xor	 ecx, edx
  00271	c1 c3 07	 rol	 ebx, 7
  00274	33 c8		 xor	 ecx, eax
  00276	44 8b c3	 mov	 r8d, ebx
  00279	44 33 c2	 xor	 r8d, edx

; 756  : 		afterS4(KX); afterS4(S5); afterS5(LT);

  0027c	8b 56 58	 mov	 edx, DWORD PTR [rsi+88]
  0027f	d1 c1		 rol	 ecx, 1
  00281	44 33 c1	 xor	 r8d, ecx
  00284	8b c1		 mov	 eax, ecx
  00286	33 4e 54	 xor	 ecx, DWORD PTR [rsi+84]
  00289	c1 e0 07	 shl	 eax, 7
  0028c	41 33 c2	 xor	 eax, r10d
  0028f	33 c3		 xor	 eax, ebx
  00291	33 5e 5c	 xor	 ebx, DWORD PTR [rsi+92]
  00294	c1 c0 16	 rol	 eax, 22
  00297	41 c1 c0 05	 rol	 r8d, 5
  0029b	44 33 46 50	 xor	 r8d, DWORD PTR [rsi+80]
  0029f	33 d0		 xor	 edx, eax
  002a1	44 33 c1	 xor	 r8d, ecx
  002a4	33 cb		 xor	 ecx, ebx
  002a6	f7 d3		 not	 ebx
  002a8	33 d3		 xor	 edx, ebx
  002aa	45 8b d0	 mov	 r10d, r8d
  002ad	44 23 d1	 and	 r10d, ecx
  002b0	44 33 d2	 xor	 r10d, edx
  002b3	0b d1		 or	 edx, ecx
  002b5	33 cb		 xor	 ecx, ebx
  002b7	41 23 da	 and	 ebx, r10d
  002ba	44 8b da	 mov	 r11d, edx
  002bd	44 33 d9	 xor	 r11d, ecx
  002c0	41 33 d8	 xor	 ebx, r8d
  002c3	45 33 da	 xor	 r11d, r10d
  002c6	41 33 d0	 xor	 edx, r8d
  002c9	8b cb		 mov	 ecx, ebx
  002cb	41 23 c8	 and	 ecx, r8d
  002ce	f7 d2		 not	 edx
  002d0	41 33 cb	 xor	 ecx, r11d
  002d3	44 0b db	 or	 r11d, ebx
  002d6	41 c1 c2 0d	 rol	 r10d, 13
  002da	c1 c1 03	 rol	 ecx, 3
  002dd	41 8b c2	 mov	 eax, r10d
  002e0	c1 e0 03	 shl	 eax, 3
  002e3	33 d9		 xor	 ebx, ecx
  002e5	44 33 d8	 xor	 r11d, eax
  002e8	41 33 da	 xor	 ebx, r10d
  002eb	44 33 da	 xor	 r11d, edx
  002ee	44 33 d9	 xor	 r11d, ecx
  002f1	41 c1 c3 07	 rol	 r11d, 7
  002f5	d1 c3		 rol	 ebx, 1
  002f7	45 8b cb	 mov	 r9d, r11d
  002fa	8b c3		 mov	 eax, ebx
  002fc	c1 e0 07	 shl	 eax, 7
  002ff	44 33 cb	 xor	 r9d, ebx
  00302	41 33 c3	 xor	 eax, r11d

; 757  : 		afterS5(KX); afterS5(S6); afterS6(LT);

  00305	44 33 5e 6c	 xor	 r11d, DWORD PTR [rsi+108]
  00309	45 33 ca	 xor	 r9d, r10d
  0030c	33 c1		 xor	 eax, ecx
  0030e	8b 4e 68	 mov	 ecx, DWORD PTR [rsi+104]
  00311	45 8b c3	 mov	 r8d, r11d
  00314	c1 c0 16	 rol	 eax, 22
  00317	41 c1 c1 05	 rol	 r9d, 5
  0031b	41 8b d0	 mov	 edx, r8d
  0031e	44 33 4e 60	 xor	 r9d, DWORD PTR [rsi+96]
  00322	33 c8		 xor	 ecx, eax
  00324	8b 46 64	 mov	 eax, DWORD PTR [rsi+100]
  00327	45 23 d9	 and	 r11d, r9d
  0032a	45 33 c8	 xor	 r9d, r8d
  0032d	f7 d1		 not	 ecx
  0032f	0b d1		 or	 edx, ecx
  00331	44 33 d9	 xor	 r11d, ecx
  00334	41 33 c3	 xor	 eax, r11d
  00337	41 33 d1	 xor	 edx, r9d
  0033a	45 8b d3	 mov	 r10d, r11d
  0033d	33 d8		 xor	 ebx, eax
  0033f	41 8b cb	 mov	 ecx, r11d
  00342	41 f7 d3	 not	 r11d
  00345	44 0b cb	 or	 r9d, ebx
  00348	33 d3		 xor	 edx, ebx
  0034a	45 33 c1	 xor	 r8d, r9d
  0034d	45 0b d1	 or	 r10d, r9d
  00350	41 33 c8	 xor	 ecx, r8d
  00353	44 33 d2	 xor	 r10d, edx
  00356	41 33 ca	 xor	 ecx, r10d
  00359	8b c1		 mov	 eax, ecx
  0035b	23 c2		 and	 eax, edx
  0035d	41 33 c3	 xor	 eax, r11d
  00360	41 c1 c2 0d	 rol	 r10d, 13
  00364	c1 c1 03	 rol	 ecx, 3
  00367	45 8b ca	 mov	 r9d, r10d
  0036a	8b d1		 mov	 edx, ecx
  0036c	41 c1 e1 03	 shl	 r9d, 3
  00370	33 d3		 xor	 edx, ebx
  00372	44 33 c9	 xor	 r9d, ecx
  00375	41 33 d2	 xor	 edx, r10d
  00378	44 33 c8	 xor	 r9d, eax
  0037b	41 c1 c1 07	 rol	 r9d, 7
  0037f	d1 c2		 rol	 edx, 1
  00381	44 8b c2	 mov	 r8d, edx
  00384	8b c2		 mov	 eax, edx

; 758  : 		afterS6(KX); afterS6(S7);

  00386	33 56 74	 xor	 edx, DWORD PTR [rsi+116]
  00389	41 c1 e0 07	 shl	 r8d, 7
  0038d	41 33 c1	 xor	 eax, r9d
  00390	44 33 c1	 xor	 r8d, ecx
  00393	41 33 c2	 xor	 eax, r10d
  00396	45 33 c1	 xor	 r8d, r9d
  00399	44 33 4e 7c	 xor	 r9d, DWORD PTR [rsi+124]
  0039d	41 c1 c0 16	 rol	 r8d, 22
  003a1	c1 c0 05	 rol	 eax, 5
  003a4	44 33 46 78	 xor	 r8d, DWORD PTR [rsi+120]
  003a8	33 46 70	 xor	 eax, DWORD PTR [rsi+112]
  003ab	45 8b d8	 mov	 r11d, r8d
  003ae	44 23 da	 and	 r11d, edx
  003b1	45 33 d9	 xor	 r11d, r9d
  003b4	45 33 c3	 xor	 r8d, r11d
  003b7	44 33 da	 xor	 r11d, edx
  003ba	44 23 ca	 and	 r9d, edx
  003bd	45 8b d0	 mov	 r10d, r8d
  003c0	33 d0		 xor	 edx, eax
  003c2	41 bc 03 00 00
	00		 mov	 r12d, 3
  003c8	44 33 ca	 xor	 r9d, edx
  003cb	44 0b d0	 or	 r10d, eax
  003ce	45 33 d3	 xor	 r10d, r11d
  003d1	45 33 d9	 xor	 r11d, r9d
  003d4	45 23 ca	 and	 r9d, r10d
  003d7	45 33 c8	 xor	 r9d, r8d
  003da	45 33 c3	 xor	 r8d, r11d
  003dd	45 23 da	 and	 r11d, r10d
  003e0	41 f7 d0	 not	 r8d
  003e3	45 33 d8	 xor	 r11d, r8d
  003e6	45 23 c2	 and	 r8d, r10d
  003e9	44 33 c2	 xor	 r8d, edx
  003ec	45 33 c1	 xor	 r8d, r9d
$LL4@serpent_en:

; 759  : 
; 760  : 		if (i == 4)
; 761  : 			break;
; 762  : 
; 763  : 		++i;
; 764  : 		c = b;
; 765  : 		b = e;
; 766  : 		e = d;
; 767  : 		d = a;
; 768  : 		a = e;
; 769  : 		k += 32;

  003ef	48 83 ee 80	 sub	 rsi, -128		; ffffffffffffff80H

; 770  : 		beforeS0(LT);

  003f3	41 c1 c3 0d	 rol	 r11d, 13
  003f7	41 c1 c1 03	 rol	 r9d, 3
  003fb	41 8b d1	 mov	 edx, r9d
  003fe	41 8b cb	 mov	 ecx, r11d
  00401	41 33 d0	 xor	 edx, r8d
  00404	c1 e1 03	 shl	 ecx, 3
  00407	41 33 ca	 xor	 ecx, r10d
  0040a	41 33 d3	 xor	 edx, r11d
  0040d	41 33 c9	 xor	 ecx, r9d
  00410	c1 c1 07	 rol	 ecx, 7
  00413	d1 c2		 rol	 edx, 1
  00415	44 8b d2	 mov	 r10d, edx
  00418	8b c1		 mov	 eax, ecx
  0041a	33 c2		 xor	 eax, edx
  0041c	33 56 04	 xor	 edx, DWORD PTR [rsi+4]
  0041f	41 c1 e2 07	 shl	 r10d, 7
  00423	44 33 d1	 xor	 r10d, ecx
  00426	41 33 c3	 xor	 eax, r11d
  00429	45 33 d1	 xor	 r10d, r9d
  0042c	44 8b 4e 0c	 mov	 r9d, DWORD PTR [rsi+12]
  00430	44 33 c9	 xor	 r9d, ecx
  00433	41 c1 c2 16	 rol	 r10d, 22
  00437	c1 c0 05	 rol	 eax, 5
  0043a	33 06		 xor	 eax, DWORD PTR [rsi]
  0043c	44 33 56 08	 xor	 r10d, DWORD PTR [rsi+8]
  00440	44 33 c8	 xor	 r9d, eax
  00443	41 8b fa	 mov	 edi, r10d
  00446	33 fa		 xor	 edi, edx
  00448	41 8b c9	 mov	 ecx, r9d
  0044b	23 ca		 and	 ecx, edx
  0044d	41 8b d1	 mov	 edx, r9d
  00450	0b d0		 or	 edx, eax
  00452	33 c8		 xor	 ecx, eax
  00454	33 d7		 xor	 edx, edi
  00456	41 33 f9	 xor	 edi, r9d
  00459	45 33 ca	 xor	 r9d, r10d
  0045c	44 0b d1	 or	 r10d, ecx
  0045f	44 33 d7	 xor	 r10d, edi
  00462	f7 d7		 not	 edi
  00464	0b f9		 or	 edi, ecx
  00466	8b c7		 mov	 eax, edi
  00468	41 33 c1	 xor	 eax, r9d
  0046b	44 0b ca	 or	 r9d, edx
  0046e	33 c8		 xor	 ecx, eax
  00470	41 33 f9	 xor	 edi, r9d
  00473	45 8b c1	 mov	 r8d, r9d
  00476	44 8b 4e 18	 mov	 r9d, DWORD PTR [rsi+24]
  0047a	44 33 c1	 xor	 r8d, ecx
  0047d	41 c1 c0 0d	 rol	 r8d, 13
  00481	41 c1 c2 03	 rol	 r10d, 3
  00485	41 33 fa	 xor	 edi, r10d
  00488	41 8b d8	 mov	 ebx, r8d
  0048b	c1 e3 03	 shl	 ebx, 3
  0048e	41 33 f8	 xor	 edi, r8d
  00491	41 33 da	 xor	 ebx, r10d
  00494	33 da		 xor	 ebx, edx
  00496	c1 c3 07	 rol	 ebx, 7
  00499	d1 c7		 rol	 edi, 1
  0049b	8b c7		 mov	 eax, edi
  0049d	8b d7		 mov	 edx, edi
  0049f	33 7e 14	 xor	 edi, DWORD PTR [rsi+20]
  004a2	41 33 d0	 xor	 edx, r8d
  004a5	c1 e0 07	 shl	 eax, 7
  004a8	33 d3		 xor	 edx, ebx
  004aa	41 33 c2	 xor	 eax, r10d
  004ad	33 c3		 xor	 eax, ebx
  004af	33 5e 1c	 xor	 ebx, DWORD PTR [rsi+28]
  004b2	c1 c0 16	 rol	 eax, 22
  004b5	c1 c2 05	 rol	 edx, 5
  004b8	33 56 10	 xor	 edx, DWORD PTR [rsi+16]
  004bb	44 33 c8	 xor	 r9d, eax
  004be	f7 d2		 not	 edx
  004c0	41 f7 d1	 not	 r9d
  004c3	8b ca		 mov	 ecx, edx
  004c5	23 d7		 and	 edx, edi
  004c7	44 33 ca	 xor	 r9d, edx
  004ca	0b d3		 or	 edx, ebx
  004cc	33 fa		 xor	 edi, edx
  004ce	41 33 d9	 xor	 ebx, r9d
  004d1	33 d1		 xor	 edx, ecx
  004d3	0b cf		 or	 ecx, edi
  004d5	33 fb		 xor	 edi, ebx
  004d7	44 0b ca	 or	 r9d, edx
  004da	33 d7		 xor	 edx, edi
  004dc	44 23 c9	 and	 r9d, ecx
  004df	41 23 f9	 and	 edi, r9d
  004e2	41 8b c1	 mov	 eax, r9d
  004e5	33 fa		 xor	 edi, edx
  004e7	23 c2		 and	 eax, edx
  004e9	33 c1		 xor	 eax, ecx
  004eb	41 c1 c1 0d	 rol	 r9d, 13
  004ef	c1 c3 03	 rol	 ebx, 3
  004f2	45 8b d9	 mov	 r11d, r9d
  004f5	41 8b d1	 mov	 edx, r9d
  004f8	33 d0		 xor	 edx, eax
  004fa	41 c1 e3 03	 shl	 r11d, 3
  004fe	44 33 df	 xor	 r11d, edi
  00501	33 d3		 xor	 edx, ebx
  00503	44 33 db	 xor	 r11d, ebx
  00506	41 c1 c3 07	 rol	 r11d, 7
  0050a	d1 c2		 rol	 edx, 1
  0050c	44 8b d2	 mov	 r10d, edx
  0050f	45 8b c3	 mov	 r8d, r11d
  00512	41 c1 e2 07	 shl	 r10d, 7
  00516	45 33 c1	 xor	 r8d, r9d
  00519	44 33 c2	 xor	 r8d, edx
  0051c	33 56 24	 xor	 edx, DWORD PTR [rsi+36]
  0051f	45 33 d3	 xor	 r10d, r11d
  00522	44 33 5e 2c	 xor	 r11d, DWORD PTR [rsi+44]
  00526	44 33 d3	 xor	 r10d, ebx
  00529	41 c1 c2 16	 rol	 r10d, 22
  0052d	41 c1 c0 05	 rol	 r8d, 5
  00531	44 33 46 20	 xor	 r8d, DWORD PTR [rsi+32]
  00535	44 33 56 28	 xor	 r10d, DWORD PTR [rsi+40]
  00539	41 8b c8	 mov	 ecx, r8d
  0053c	41 23 ca	 and	 ecx, r10d
  0053f	41 33 cb	 xor	 ecx, r11d
  00542	45 0b d8	 or	 r11d, r8d
  00545	44 33 da	 xor	 r11d, edx
  00548	8b c1		 mov	 eax, ecx
  0054a	33 c2		 xor	 eax, edx
  0054c	41 8b fb	 mov	 edi, r11d
  0054f	44 33 d0	 xor	 r10d, eax
  00552	45 33 c2	 xor	 r8d, r10d
  00555	41 0b f8	 or	 edi, r8d
  00558	33 f9		 xor	 edi, ecx
  0055a	41 23 cb	 and	 ecx, r11d
  0055d	44 33 c1	 xor	 r8d, ecx
  00560	8b c7		 mov	 eax, edi
  00562	41 33 c0	 xor	 eax, r8d
  00565	41 f7 d0	 not	 r8d
  00568	44 33 d8	 xor	 r11d, eax
  0056b	41 c1 c2 0d	 rol	 r10d, 13
  0056f	41 c1 c3 03	 rol	 r11d, 3
  00573	41 8b da	 mov	 ebx, r10d
  00576	c1 e3 03	 shl	 ebx, 3
  00579	41 33 fb	 xor	 edi, r11d
  0057c	41 33 d8	 xor	 ebx, r8d
  0057f	41 33 fa	 xor	 edi, r10d
  00582	41 33 db	 xor	 ebx, r11d
  00585	c1 c3 07	 rol	 ebx, 7
  00588	d1 c7		 rol	 edi, 1
  0058a	8b d7		 mov	 edx, edi
  0058c	8b cf		 mov	 ecx, edi
  0058e	33 7e 34	 xor	 edi, DWORD PTR [rsi+52]
  00591	33 cb		 xor	 ecx, ebx
  00593	c1 e2 07	 shl	 edx, 7
  00596	33 d3		 xor	 edx, ebx
  00598	33 5e 3c	 xor	 ebx, DWORD PTR [rsi+60]
  0059b	41 33 ca	 xor	 ecx, r10d
  0059e	41 33 d3	 xor	 edx, r11d
  005a1	c1 c2 16	 rol	 edx, 22
  005a4	c1 c1 05	 rol	 ecx, 5
  005a7	33 4e 30	 xor	 ecx, DWORD PTR [rsi+48]
  005aa	33 56 38	 xor	 edx, DWORD PTR [rsi+56]
  005ad	8b c1		 mov	 eax, ecx
  005af	0b cb		 or	 ecx, ebx
  005b1	33 df		 xor	 ebx, edi
  005b3	23 f8		 and	 edi, eax
  005b5	33 c2		 xor	 eax, edx
  005b7	33 d3		 xor	 edx, ebx
  005b9	23 d9		 and	 ebx, ecx
  005bb	0b c7		 or	 eax, edi
  005bd	33 cf		 xor	 ecx, edi
  005bf	33 d8		 xor	 ebx, eax
  005c1	23 c1		 and	 eax, ecx
  005c3	33 c2		 xor	 eax, edx
  005c5	33 fb		 xor	 edi, ebx
  005c7	0b f9		 or	 edi, ecx
  005c9	33 fa		 xor	 edi, edx
  005cb	44 8b d7	 mov	 r10d, edi
  005ce	44 0b d3	 or	 r10d, ebx
  005d1	44 33 d3	 xor	 r10d, ebx
  005d4	44 33 d1	 xor	 r10d, ecx
  005d7	41 c1 c2 0d	 rol	 r10d, 13
  005db	c1 c3 03	 rol	 ebx, 3
  005de	45 8b ca	 mov	 r9d, r10d
  005e1	41 8b ca	 mov	 ecx, r10d
  005e4	33 cb		 xor	 ecx, ebx
  005e6	41 c1 e1 03	 shl	 r9d, 3
  005ea	44 33 cb	 xor	 r9d, ebx
  005ed	33 cf		 xor	 ecx, edi
  005ef	44 33 c8	 xor	 r9d, eax
  005f2	8b 46 44	 mov	 eax, DWORD PTR [rsi+68]
  005f5	41 c1 c1 07	 rol	 r9d, 7
  005f9	d1 c1		 rol	 ecx, 1
  005fb	45 33 d1	 xor	 r10d, r9d
  005fe	44 8b c1	 mov	 r8d, ecx
  00601	44 33 d1	 xor	 r10d, ecx
  00604	41 c1 e0 07	 shl	 r8d, 7
  00608	44 33 c3	 xor	 r8d, ebx
  0060b	41 c1 c2 05	 rol	 r10d, 5
  0060f	44 33 56 40	 xor	 r10d, DWORD PTR [rsi+64]
  00613	45 33 c1	 xor	 r8d, r9d
  00616	44 33 4e 4c	 xor	 r9d, DWORD PTR [rsi+76]
  0061a	41 33 c1	 xor	 eax, r9d
  0061d	41 c1 c0 16	 rol	 r8d, 22
  00621	41 f7 d1	 not	 r9d
  00624	44 33 46 48	 xor	 r8d, DWORD PTR [rsi+72]
  00628	33 c8		 xor	 ecx, eax
  0062a	45 33 c1	 xor	 r8d, r9d
  0062d	45 33 ca	 xor	 r9d, r10d
  00630	41 8b d1	 mov	 edx, r9d
  00633	23 d1		 and	 edx, ecx
  00635	41 33 c9	 xor	 ecx, r9d
  00638	44 33 d1	 xor	 r10d, ecx
  0063b	41 33 d0	 xor	 edx, r8d
  0063e	44 23 c1	 and	 r8d, ecx
  00641	45 33 c2	 xor	 r8d, r10d
  00644	44 23 d2	 and	 r10d, edx
  00647	8b c2		 mov	 eax, edx
  00649	0b c1		 or	 eax, ecx
  0064b	45 33 ca	 xor	 r9d, r10d
  0064e	41 33 c2	 xor	 eax, r10d
  00651	45 0b d1	 or	 r10d, r9d
  00654	45 33 d0	 xor	 r10d, r8d
  00657	45 23 c1	 and	 r8d, r9d
  0065a	c1 c2 0d	 rol	 edx, 13
  0065d	41 f7 d2	 not	 r10d
  00660	8b da		 mov	 ebx, edx
  00662	41 c1 c2 03	 rol	 r10d, 3
  00666	c1 e3 03	 shl	 ebx, 3
  00669	41 33 da	 xor	 ebx, r10d
  0066c	41 8b ca	 mov	 ecx, r10d
  0066f	41 33 c8	 xor	 ecx, r8d
  00672	41 33 d9	 xor	 ebx, r9d
  00675	33 ca		 xor	 ecx, edx
  00677	c1 c3 07	 rol	 ebx, 7
  0067a	33 c8		 xor	 ecx, eax
  0067c	44 8b c3	 mov	 r8d, ebx
  0067f	d1 c1		 rol	 ecx, 1
  00681	44 33 c2	 xor	 r8d, edx
  00684	44 33 c1	 xor	 r8d, ecx
  00687	8b c1		 mov	 eax, ecx
  00689	33 4e 54	 xor	 ecx, DWORD PTR [rsi+84]
  0068c	c1 e0 07	 shl	 eax, 7
  0068f	41 33 c2	 xor	 eax, r10d
  00692	33 c3		 xor	 eax, ebx
  00694	c1 c0 16	 rol	 eax, 22
  00697	41 c1 c0 05	 rol	 r8d, 5
  0069b	44 33 46 50	 xor	 r8d, DWORD PTR [rsi+80]
  0069f	33 5e 5c	 xor	 ebx, DWORD PTR [rsi+92]
  006a2	8b 56 58	 mov	 edx, DWORD PTR [rsi+88]
  006a5	44 33 c1	 xor	 r8d, ecx
  006a8	33 cb		 xor	 ecx, ebx
  006aa	33 d0		 xor	 edx, eax
  006ac	f7 d3		 not	 ebx
  006ae	45 8b d0	 mov	 r10d, r8d
  006b1	33 d3		 xor	 edx, ebx
  006b3	44 23 d1	 and	 r10d, ecx
  006b6	44 33 d2	 xor	 r10d, edx
  006b9	0b d1		 or	 edx, ecx
  006bb	33 cb		 xor	 ecx, ebx
  006bd	41 23 da	 and	 ebx, r10d
  006c0	44 8b da	 mov	 r11d, edx
  006c3	41 33 d0	 xor	 edx, r8d
  006c6	44 33 d9	 xor	 r11d, ecx
  006c9	41 33 d8	 xor	 ebx, r8d
  006cc	f7 d2		 not	 edx
  006ce	45 33 da	 xor	 r11d, r10d
  006d1	8b cb		 mov	 ecx, ebx
  006d3	41 23 c8	 and	 ecx, r8d
  006d6	41 33 cb	 xor	 ecx, r11d
  006d9	44 0b db	 or	 r11d, ebx
  006dc	41 c1 c2 0d	 rol	 r10d, 13
  006e0	c1 c1 03	 rol	 ecx, 3
  006e3	41 8b c2	 mov	 eax, r10d
  006e6	c1 e0 03	 shl	 eax, 3
  006e9	33 d9		 xor	 ebx, ecx
  006eb	44 33 d8	 xor	 r11d, eax
  006ee	41 33 da	 xor	 ebx, r10d
  006f1	44 33 da	 xor	 r11d, edx
  006f4	44 33 d9	 xor	 r11d, ecx
  006f7	41 c1 c3 07	 rol	 r11d, 7
  006fb	d1 c3		 rol	 ebx, 1
  006fd	45 8b cb	 mov	 r9d, r11d
  00700	8b c3		 mov	 eax, ebx
  00702	44 33 cb	 xor	 r9d, ebx
  00705	c1 e0 07	 shl	 eax, 7
  00708	41 33 c3	 xor	 eax, r11d
  0070b	44 33 5e 6c	 xor	 r11d, DWORD PTR [rsi+108]
  0070f	45 33 ca	 xor	 r9d, r10d
  00712	33 c1		 xor	 eax, ecx
  00714	8b 4e 68	 mov	 ecx, DWORD PTR [rsi+104]
  00717	45 8b c3	 mov	 r8d, r11d
  0071a	c1 c0 16	 rol	 eax, 22
  0071d	41 c1 c1 05	 rol	 r9d, 5
  00721	41 8b d0	 mov	 edx, r8d
  00724	44 33 4e 60	 xor	 r9d, DWORD PTR [rsi+96]
  00728	33 c8		 xor	 ecx, eax
  0072a	8b 46 64	 mov	 eax, DWORD PTR [rsi+100]
  0072d	45 23 d9	 and	 r11d, r9d
  00730	45 33 c8	 xor	 r9d, r8d
  00733	f7 d1		 not	 ecx
  00735	0b d1		 or	 edx, ecx
  00737	44 33 d9	 xor	 r11d, ecx
  0073a	41 33 d1	 xor	 edx, r9d
  0073d	41 33 c3	 xor	 eax, r11d
  00740	45 8b d3	 mov	 r10d, r11d
  00743	33 d8		 xor	 ebx, eax
  00745	41 8b cb	 mov	 ecx, r11d
  00748	41 f7 d3	 not	 r11d
  0074b	44 0b cb	 or	 r9d, ebx
  0074e	33 d3		 xor	 edx, ebx
  00750	45 33 c1	 xor	 r8d, r9d
  00753	45 0b d1	 or	 r10d, r9d
  00756	44 33 d2	 xor	 r10d, edx
  00759	41 33 c8	 xor	 ecx, r8d
  0075c	41 33 ca	 xor	 ecx, r10d
  0075f	8b c1		 mov	 eax, ecx
  00761	23 c2		 and	 eax, edx
  00763	41 33 c3	 xor	 eax, r11d
  00766	41 c1 c2 0d	 rol	 r10d, 13
  0076a	c1 c1 03	 rol	 ecx, 3
  0076d	45 8b ca	 mov	 r9d, r10d
  00770	8b d1		 mov	 edx, ecx
  00772	41 c1 e1 03	 shl	 r9d, 3
  00776	33 d3		 xor	 edx, ebx
  00778	44 33 c9	 xor	 r9d, ecx
  0077b	41 33 d2	 xor	 edx, r10d
  0077e	44 33 c8	 xor	 r9d, eax
  00781	41 c1 c1 07	 rol	 r9d, 7
  00785	d1 c2		 rol	 edx, 1
  00787	44 8b da	 mov	 r11d, edx
  0078a	8b c2		 mov	 eax, edx
  0078c	33 56 74	 xor	 edx, DWORD PTR [rsi+116]
  0078f	41 c1 e3 07	 shl	 r11d, 7
  00793	41 33 c1	 xor	 eax, r9d
  00796	44 33 d9	 xor	 r11d, ecx
  00799	41 33 c2	 xor	 eax, r10d
  0079c	45 33 d9	 xor	 r11d, r9d
  0079f	44 33 4e 7c	 xor	 r9d, DWORD PTR [rsi+124]
  007a3	41 c1 c3 16	 rol	 r11d, 22
  007a7	c1 c0 05	 rol	 eax, 5
  007aa	44 33 5e 78	 xor	 r11d, DWORD PTR [rsi+120]
  007ae	33 46 70	 xor	 eax, DWORD PTR [rsi+112]
  007b1	45 8b c3	 mov	 r8d, r11d
  007b4	44 23 da	 and	 r11d, edx
  007b7	45 33 d9	 xor	 r11d, r9d
  007ba	44 23 ca	 and	 r9d, edx
  007bd	45 33 c3	 xor	 r8d, r11d
  007c0	44 33 da	 xor	 r11d, edx
  007c3	33 d0		 xor	 edx, eax
  007c5	45 8b d0	 mov	 r10d, r8d
  007c8	44 33 ca	 xor	 r9d, edx
  007cb	44 0b d0	 or	 r10d, eax
  007ce	45 33 d3	 xor	 r10d, r11d
  007d1	45 33 d9	 xor	 r11d, r9d
  007d4	45 23 ca	 and	 r9d, r10d
  007d7	45 33 c8	 xor	 r9d, r8d
  007da	45 33 c3	 xor	 r8d, r11d
  007dd	45 23 da	 and	 r11d, r10d
  007e0	41 f7 d0	 not	 r8d
  007e3	45 33 d8	 xor	 r11d, r8d
  007e6	45 23 c2	 and	 r8d, r10d
  007e9	44 33 c2	 xor	 r8d, edx
  007ec	45 33 c1	 xor	 r8d, r9d
  007ef	49 83 ec 01	 sub	 r12, 1
  007f3	0f 85 f6 fb ff
	ff		 jne	 $LL4@serpent_en

; 771  : 	}
; 772  : 	while (1);
; 773  : 
; 774  : 	afterS7(KX);

  007f9	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [rsi+128]
  007ff	44 33 86 84 00
	00 00		 xor	 r8d, DWORD PTR [rsi+132]
  00806	44 33 8e 88 00
	00 00		 xor	 r9d, DWORD PTR [rsi+136]
  0080d	44 33 96 8c 00
	00 00		 xor	 r10d, DWORD PTR [rsi+140]

; 775  : 	
; 776  :     out[0] = LE32(d);
; 777  : 	out[1] = LE32(e);
; 778  : 	out[2] = LE32(b);
; 779  : 	out[3] = LE32(a);
; 780  : }

  00814	48 8b 5c 24 10	 mov	 rbx, QWORD PTR [rsp+16]
  00819	48 8b 7c 24 28	 mov	 rdi, QWORD PTR [rsp+40]
  0081e	48 8b 74 24 20	 mov	 rsi, QWORD PTR [rsp+32]
  00823	41 33 c3	 xor	 eax, r11d
  00826	44 89 45 04	 mov	 DWORD PTR [rbp+4], r8d
  0082a	89 45 00	 mov	 DWORD PTR [rbp], eax
  0082d	44 89 4d 08	 mov	 DWORD PTR [rbp+8], r9d
  00831	44 89 55 0c	 mov	 DWORD PTR [rbp+12], r10d
  00835	48 8b 6c 24 18	 mov	 rbp, QWORD PTR [rsp+24]
  0083a	41 5c		 pop	 r12
  0083c	c3		 ret	 0
serpent_encrypt ENDP
_TEXT	ENDS
PUBLIC	serpent_set_key
;	COMDAT pdata
pdata	SEGMENT
$pdata$serpent_set_key DD imagerel $LN19
	DD	imagerel $LN19+966
	DD	imagerel $unwind$serpent_set_key
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$serpent_set_key DD 060f01H
	DD	03740fH
	DD	02640aH
	DD	013405H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT serpent_set_key
_TEXT	SEGMENT
userKey$ = 8
keylen$ = 16
ks$ = 24
serpent_set_key PROC					; COMDAT

; 634  : {

$LN19:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi

; 635  : 	unsigned __int32 a,b,c,d,e;
; 636  : 	unsigned __int32 *k = (unsigned __int32 *)ks;
; 637  : 	unsigned __int32 t;
; 638  : 	int i;
; 639  : 
; 640  : 	for (i = 0; i < keylen / (int)sizeof(__int32); i++)

  0000f	8b c2		 mov	 eax, edx
  00011	8b da		 mov	 ebx, edx
  00013	45 33 d2	 xor	 r10d, r10d
  00016	99		 cdq
  00017	4c 8b d9	 mov	 r11, rcx
  0001a	be 04 00 00 00	 mov	 esi, 4
  0001f	83 e2 03	 and	 edx, 3
  00022	03 c2		 add	 eax, edx
  00024	44 8b c8	 mov	 r9d, eax
  00027	83 e0 03	 and	 eax, 3
  0002a	2b c2		 sub	 eax, edx
  0002c	41 c1 f9 02	 sar	 r9d, 2
  00030	45 3b ca	 cmp	 r9d, r10d
  00033	8b f8		 mov	 edi, eax
  00035	7e 18		 jle	 SHORT $LN8@serpent_se
  00037	49 8b c8	 mov	 rcx, r8
  0003a	4d 2b d8	 sub	 r11, r8
  0003d	41 8b d1	 mov	 edx, r9d
$LL10@serpent_se:

; 641  : 		k[i] = LE32(((unsigned __int32*)userKey)[i]);

  00040	41 8b 04 0b	 mov	 eax, DWORD PTR [r11+rcx]
  00044	89 01		 mov	 DWORD PTR [rcx], eax
  00046	48 03 ce	 add	 rcx, rsi
  00049	48 83 ea 01	 sub	 rdx, 1
  0004d	75 f1		 jne	 SHORT $LL10@serpent_se
$LN8@serpent_se:

; 642  : 
; 643  : 	if (keylen < 32)

  0004f	83 fb 20	 cmp	 ebx, 32			; 00000020H
  00052	7d 13		 jge	 SHORT $LN7@serpent_se

; 644  : 		k[keylen/4] |= (unsigned __int32)1 << ((keylen%4)*8);

  00054	8b cf		 mov	 ecx, edi
  00056	b8 01 00 00 00	 mov	 eax, 1
  0005b	49 63 d1	 movsxd	 rdx, r9d
  0005e	c1 e1 03	 shl	 ecx, 3
  00061	d3 e0		 shl	 eax, cl
  00063	41 09 04 90	 or	 DWORD PTR [r8+rdx*4], eax
$LN7@serpent_se:

; 645  : 
; 646  : 	k += 8;

  00067	49 8d 78 20	 lea	 rdi, QWORD PTR [r8+32]

; 647  : 	t = k[-1];

  0006b	8b 4f fc	 mov	 ecx, DWORD PTR [rdi-4]
  0006e	48 8d 57 ec	 lea	 rdx, QWORD PTR [rdi-20]
$LL6@serpent_se:

; 648  : 	for (i = 0; i < 132; ++i)
; 649  : 		k[i] = t = rotlFixed(k[i-8] ^ k[i-5] ^ k[i-3] ^ t ^ 0x9e3779b9 ^ i, 11);

  00072	8b 42 f4	 mov	 eax, DWORD PTR [rdx-12]
  00075	33 42 08	 xor	 eax, DWORD PTR [rdx+8]
  00078	33 02		 xor	 eax, DWORD PTR [rdx]
  0007a	33 c8		 xor	 ecx, eax
  0007c	41 33 ca	 xor	 ecx, r10d
  0007f	41 ff c2	 inc	 r10d
  00082	81 f1 b9 79 37
	9e		 xor	 ecx, -1640531527	; 9e3779b9H
  00088	c1 c1 0b	 rol	 ecx, 11
  0008b	89 4a 14	 mov	 DWORD PTR [rdx+20], ecx
  0008e	48 03 d6	 add	 rdx, rsi
  00091	41 81 fa 84 00
	00 00		 cmp	 r10d, 132		; 00000084H
  00098	7c d8		 jl	 SHORT $LL6@serpent_se

; 650  : 	k -= 20;

  0009a	48 83 ef 50	 sub	 rdi, 80			; 00000050H
$LL3@serpent_se:

; 651  : 
; 652  : #define LK(r, a, b, c, d, e)	{\
; 653  : 	a = k[(8-r)*4 + 0];		\
; 654  : 	b = k[(8-r)*4 + 1];		\
; 655  : 	c = k[(8-r)*4 + 2];		\
; 656  : 	d = k[(8-r)*4 + 3];}
; 657  : 
; 658  : #define SK(r, a, b, c, d, e)	{\
; 659  : 	k[(8-r)*4 + 4] = a;		\
; 660  : 	k[(8-r)*4 + 5] = b;		\
; 661  : 	k[(8-r)*4 + 6] = c;		\
; 662  : 	k[(8-r)*4 + 7] = d;}	\
; 663  : 
; 664  : 	for (i=0; i<4; i++)
; 665  : 	{
; 666  : 		afterS2(LK); afterS2(S3); afterS3(SK);

  0009e	44 8b 57 50	 mov	 r10d, DWORD PTR [rdi+80]
  000a2	8b 57 5c	 mov	 edx, DWORD PTR [rdi+92]
  000a5	8b 47 54	 mov	 eax, DWORD PTR [rdi+84]
  000a8	44 8b 4f 58	 mov	 r9d, DWORD PTR [rdi+88]
  000ac	45 8b c2	 mov	 r8d, r10d
  000af	44 0b d2	 or	 r10d, edx
  000b2	33 d0		 xor	 edx, eax
  000b4	41 23 c0	 and	 eax, r8d
  000b7	45 33 c1	 xor	 r8d, r9d
  000ba	44 0b c0	 or	 r8d, eax
  000bd	44 33 ca	 xor	 r9d, edx
  000c0	41 23 d2	 and	 edx, r10d
  000c3	44 33 d0	 xor	 r10d, eax
  000c6	41 33 d0	 xor	 edx, r8d
  000c9	48 8d 9f 80 00
	00 00		 lea	 rbx, QWORD PTR [rdi+128]
  000d0	45 23 c2	 and	 r8d, r10d
  000d3	8b ca		 mov	 ecx, edx
  000d5	89 57 58	 mov	 DWORD PTR [rdi+88], edx
  000d8	33 c8		 xor	 ecx, eax
  000da	45 33 c1	 xor	 r8d, r9d
  000dd	8b c2		 mov	 eax, edx
  000df	41 0b ca	 or	 ecx, r10d
  000e2	44 89 47 5c	 mov	 DWORD PTR [rdi+92], r8d
  000e6	41 33 c9	 xor	 ecx, r9d

; 667  : 		afterS1(LK); afterS1(S2); afterS2(SK);

  000e9	44 8b 4f 68	 mov	 r9d, DWORD PTR [rdi+104]
  000ed	0b c1		 or	 eax, ecx
  000ef	89 4f 54	 mov	 DWORD PTR [rdi+84], ecx
  000f2	33 c2		 xor	 eax, edx
  000f4	41 33 c2	 xor	 eax, r10d
  000f7	44 8b 57 60	 mov	 r10d, DWORD PTR [rdi+96]
  000fb	89 47 50	 mov	 DWORD PTR [rdi+80], eax
  000fe	45 8b c2	 mov	 r8d, r10d
  00101	41 8b d2	 mov	 edx, r10d
  00104	0b 57 6c	 or	 edx, DWORD PTR [rdi+108]
  00107	45 23 c1	 and	 r8d, r9d
  0010a	33 57 64	 xor	 edx, DWORD PTR [rdi+100]
  0010d	44 33 47 6c	 xor	 r8d, DWORD PTR [rdi+108]
  00111	41 8b c0	 mov	 eax, r8d
  00114	33 47 64	 xor	 eax, DWORD PTR [rdi+100]
  00117	44 33 c8	 xor	 r9d, eax
  0011a	45 33 d1	 xor	 r10d, r9d
  0011d	44 89 4f 60	 mov	 DWORD PTR [rdi+96], r9d

; 668  : 		afterS0(LK); afterS0(S1); afterS1(SK);

  00121	44 8b 4f 70	 mov	 r9d, DWORD PTR [rdi+112]
  00125	41 8b ca	 mov	 ecx, r10d
  00128	41 f7 d1	 not	 r9d
  0012b	0b ca		 or	 ecx, edx
  0012d	41 33 c8	 xor	 ecx, r8d
  00130	44 23 c2	 and	 r8d, edx
  00133	45 33 d0	 xor	 r10d, r8d
  00136	89 4f 64	 mov	 DWORD PTR [rdi+100], ecx
  00139	45 8b c1	 mov	 r8d, r9d
  0013c	41 8b c2	 mov	 eax, r10d
  0013f	41 f7 d2	 not	 r10d
  00142	33 c2		 xor	 eax, edx
  00144	8b 57 74	 mov	 edx, DWORD PTR [rdi+116]
  00147	44 89 57 6c	 mov	 DWORD PTR [rdi+108], r10d
  0014b	44 8b 57 7c	 mov	 r10d, DWORD PTR [rdi+124]
  0014f	33 c1		 xor	 eax, ecx
  00151	8b 4f 78	 mov	 ecx, DWORD PTR [rdi+120]
  00154	44 23 ca	 and	 r9d, edx
  00157	f7 d1		 not	 ecx
  00159	89 47 68	 mov	 DWORD PTR [rdi+104], eax
  0015c	41 33 c9	 xor	 ecx, r9d
  0015f	45 0b ca	 or	 r9d, r10d
  00162	44 33 d1	 xor	 r10d, ecx
  00165	41 33 d1	 xor	 edx, r9d
  00168	45 33 c8	 xor	 r9d, r8d
  0016b	41 0b c9	 or	 ecx, r9d
  0016e	44 0b c2	 or	 r8d, edx
  00171	41 33 d2	 xor	 edx, r10d
  00174	41 23 c8	 and	 ecx, r8d
  00177	44 33 ca	 xor	 r9d, edx
  0017a	44 89 57 78	 mov	 DWORD PTR [rdi+120], r10d
  0017e	8b c1		 mov	 eax, ecx
  00180	89 4f 70	 mov	 DWORD PTR [rdi+112], ecx
  00183	41 23 c9	 and	 ecx, r9d
  00186	23 c2		 and	 eax, edx
  00188	41 33 c1	 xor	 eax, r9d
  0018b	41 33 c8	 xor	 ecx, r8d
  0018e	89 4f 74	 mov	 DWORD PTR [rdi+116], ecx
  00191	89 47 7c	 mov	 DWORD PTR [rdi+124], eax

; 669  : 		beforeS0(LK); beforeS0(S0); afterS0(SK);

  00194	8b 87 84 00 00
	00		 mov	 eax, DWORD PTR [rdi+132]
  0019a	44 8b 9f 88 00
	00 00		 mov	 r11d, DWORD PTR [rdi+136]
  001a1	44 8b 13	 mov	 r10d, DWORD PTR [rbx]
  001a4	44 33 97 8c 00
	00 00		 xor	 r10d, DWORD PTR [rdi+140]
  001ab	45 8b cb	 mov	 r9d, r11d
  001ae	44 33 c8	 xor	 r9d, eax
  001b1	41 8b d2	 mov	 edx, r10d
  001b4	45 8b c2	 mov	 r8d, r10d
  001b7	44 0b 03	 or	 r8d, DWORD PTR [rbx]
  001ba	23 d0		 and	 edx, eax
  001bc	33 13		 xor	 edx, DWORD PTR [rbx]
  001be	45 33 c1	 xor	 r8d, r9d
  001c1	45 33 ca	 xor	 r9d, r10d
  001c4	44 89 87 8c 00
	00 00		 mov	 DWORD PTR [rdi+140], r8d
  001cb	45 33 d3	 xor	 r10d, r11d
  001ce	44 0b da	 or	 r11d, edx
  001d1	45 33 d9	 xor	 r11d, r9d
  001d4	41 f7 d1	 not	 r9d
  001d7	41 8b ca	 mov	 ecx, r10d
  001da	44 0b ca	 or	 r9d, edx
  001dd	44 89 9f 88 00
	00 00		 mov	 DWORD PTR [rdi+136], r11d
  001e4	45 0b d0	 or	 r10d, r8d
  001e7	33 ca		 xor	 ecx, edx
  001e9	41 8b c2	 mov	 eax, r10d
  001ec	45 33 d1	 xor	 r10d, r9d
  001ef	44 89 97 84 00
	00 00		 mov	 DWORD PTR [rdi+132], r10d
  001f6	41 33 c9	 xor	 ecx, r9d

; 670  : 		k += 8*4;

  001f9	48 8b fb	 mov	 rdi, rbx
  001fc	33 c1		 xor	 eax, ecx
  001fe	89 03		 mov	 DWORD PTR [rbx], eax

; 671  : 		afterS6(LK); afterS6(S7); afterS7(SK);

  00200	8b 53 14	 mov	 edx, DWORD PTR [rbx+20]
  00203	44 8b 4b 18	 mov	 r9d, DWORD PTR [rbx+24]
  00207	44 8b 43 1c	 mov	 r8d, DWORD PTR [rbx+28]

; 672  : 		afterS5(LK); afterS5(S6); afterS6(SK);

  0020b	44 8b 53 2c	 mov	 r10d, DWORD PTR [rbx+44]
  0020f	8b c2		 mov	 eax, edx
  00211	41 23 c1	 and	 eax, r9d
  00214	41 33 c0	 xor	 eax, r8d
  00217	44 23 c2	 and	 r8d, edx
  0021a	44 33 c8	 xor	 r9d, eax
  0021d	33 c2		 xor	 eax, edx
  0021f	33 53 10	 xor	 edx, DWORD PTR [rbx+16]
  00222	44 33 c2	 xor	 r8d, edx
  00225	41 8b c9	 mov	 ecx, r9d
  00228	0b 4b 10	 or	 ecx, DWORD PTR [rbx+16]
  0022b	33 c8		 xor	 ecx, eax
  0022d	41 33 c0	 xor	 eax, r8d
  00230	44 23 c1	 and	 r8d, ecx
  00233	89 4b 1c	 mov	 DWORD PTR [rbx+28], ecx
  00236	45 33 c1	 xor	 r8d, r9d
  00239	44 33 c8	 xor	 r9d, eax
  0023c	23 c1		 and	 eax, ecx
  0023e	41 f7 d1	 not	 r9d
  00241	44 89 43 18	 mov	 DWORD PTR [rbx+24], r8d
  00245	41 33 c1	 xor	 eax, r9d
  00248	44 23 c9	 and	 r9d, ecx
  0024b	8b 4b 24	 mov	 ecx, DWORD PTR [rbx+36]
  0024e	44 33 ca	 xor	 r9d, edx
  00251	89 43 10	 mov	 DWORD PTR [rbx+16], eax
  00254	8b 43 28	 mov	 eax, DWORD PTR [rbx+40]
  00257	45 33 c8	 xor	 r9d, r8d
  0025a	44 8b 43 20	 mov	 r8d, DWORD PTR [rbx+32]
  0025e	f7 d0		 not	 eax
  00260	44 89 4b 14	 mov	 DWORD PTR [rbx+20], r9d
  00264	45 8b ca	 mov	 r9d, r10d
  00267	45 23 d0	 and	 r10d, r8d
  0026a	44 33 d0	 xor	 r10d, eax
  0026d	45 33 c1	 xor	 r8d, r9d
  00270	41 8b d1	 mov	 edx, r9d
  00273	0b d0		 or	 edx, eax
  00275	41 33 ca	 xor	 ecx, r10d
  00278	41 8b c2	 mov	 eax, r10d
  0027b	41 33 d0	 xor	 edx, r8d
  0027e	44 0b c1	 or	 r8d, ecx
  00281	89 4b 24	 mov	 DWORD PTR [rbx+36], ecx
  00284	45 33 c8	 xor	 r9d, r8d
  00287	41 0b c0	 or	 eax, r8d
  0028a	33 d1		 xor	 edx, ecx
  0028c	33 c2		 xor	 eax, edx
  0028e	45 33 ca	 xor	 r9d, r10d
  00291	44 33 c8	 xor	 r9d, eax
  00294	89 43 20	 mov	 DWORD PTR [rbx+32], eax
  00297	41 f7 d2	 not	 r10d
  0029a	44 89 4b 28	 mov	 DWORD PTR [rbx+40], r9d
  0029e	44 23 ca	 and	 r9d, edx

; 673  : 		afterS4(LK); afterS4(S5); afterS5(SK);

  002a1	8b 53 30	 mov	 edx, DWORD PTR [rbx+48]
  002a4	45 33 ca	 xor	 r9d, r10d
  002a7	44 8b 53 3c	 mov	 r10d, DWORD PTR [rbx+60]
  002ab	44 89 4b 2c	 mov	 DWORD PTR [rbx+44], r9d
  002af	44 8b 4b 34	 mov	 r9d, DWORD PTR [rbx+52]
  002b3	41 33 d1	 xor	 edx, r9d
  002b6	45 33 ca	 xor	 r9d, r10d
  002b9	41 f7 d2	 not	 r10d
  002bc	45 8b c2	 mov	 r8d, r10d
  002bf	8b ca		 mov	 ecx, edx
  002c1	44 33 43 38	 xor	 r8d, DWORD PTR [rbx+56]
  002c5	41 23 c9	 and	 ecx, r9d
  002c8	41 33 c8	 xor	 ecx, r8d
  002cb	45 0b c1	 or	 r8d, r9d
  002ce	45 33 ca	 xor	 r9d, r10d
  002d1	44 23 d1	 and	 r10d, ecx
  002d4	45 33 c8	 xor	 r9d, r8d
  002d7	44 33 c2	 xor	 r8d, edx
  002da	44 33 c9	 xor	 r9d, ecx
  002dd	44 33 d2	 xor	 r10d, edx
  002e0	89 4b 30	 mov	 DWORD PTR [rbx+48], ecx
  002e3	41 8b c2	 mov	 eax, r10d
  002e6	44 89 53 34	 mov	 DWORD PTR [rbx+52], r10d
  002ea	45 0b d1	 or	 r10d, r9d
  002ed	23 c2		 and	 eax, edx
  002ef	41 f7 d0	 not	 r8d
  002f2	41 33 c1	 xor	 eax, r9d

; 674  : 		afterS3(LK); afterS3(S4); afterS4(SK);

  002f5	44 8b 4b 40	 mov	 r9d, DWORD PTR [rbx+64]
  002f9	45 33 d0	 xor	 r10d, r8d
  002fc	89 43 38	 mov	 DWORD PTR [rbx+56], eax
  002ff	44 89 53 3c	 mov	 DWORD PTR [rbx+60], r10d
  00303	44 8b 53 4c	 mov	 r10d, DWORD PTR [rbx+76]
  00307	41 8b ca	 mov	 ecx, r10d
  0030a	41 f7 d2	 not	 r10d
  0030d	33 4b 44	 xor	 ecx, DWORD PTR [rbx+68]
  00310	45 8b c2	 mov	 r8d, r10d
  00313	45 33 d1	 xor	 r10d, r9d
  00316	44 33 43 48	 xor	 r8d, DWORD PTR [rbx+72]
  0031a	41 8b c2	 mov	 eax, r10d
  0031d	23 c1		 and	 eax, ecx
  0031f	41 33 ca	 xor	 ecx, r10d
  00322	41 33 c0	 xor	 eax, r8d
  00325	44 33 c9	 xor	 r9d, ecx
  00328	44 23 c1	 and	 r8d, ecx
  0032b	45 33 c1	 xor	 r8d, r9d
  0032e	44 23 c8	 and	 r9d, eax
  00331	8b d0		 mov	 edx, eax
  00333	0b d1		 or	 edx, ecx
  00335	45 33 d1	 xor	 r10d, r9d
  00338	89 43 40	 mov	 DWORD PTR [rbx+64], eax
  0033b	41 33 d1	 xor	 edx, r9d
  0033e	41 8b ca	 mov	 ecx, r10d
  00341	41 8b c2	 mov	 eax, r10d
  00344	41 0b c9	 or	 ecx, r9d
  00347	41 23 c0	 and	 eax, r8d
  0034a	44 89 53 4c	 mov	 DWORD PTR [rbx+76], r10d
  0034e	41 33 c8	 xor	 ecx, r8d
  00351	33 c2		 xor	 eax, edx
  00353	48 83 ee 01	 sub	 rsi, 1
  00357	f7 d1		 not	 ecx
  00359	89 43 44	 mov	 DWORD PTR [rbx+68], eax
  0035c	89 4b 48	 mov	 DWORD PTR [rbx+72], ecx
  0035f	0f 85 39 fd ff
	ff		 jne	 $LL3@serpent_se

; 675  : 	}
; 676  : 	afterS2(LK); afterS2(S3); afterS3(SK);

  00365	44 8b 53 50	 mov	 r10d, DWORD PTR [rbx+80]
  00369	8b 53 5c	 mov	 edx, DWORD PTR [rbx+92]
  0036c	8b 43 54	 mov	 eax, DWORD PTR [rbx+84]
  0036f	44 8b 4b 58	 mov	 r9d, DWORD PTR [rbx+88]

; 677  : }

  00373	48 8b 74 24 10	 mov	 rsi, QWORD PTR [rsp+16]
  00378	48 8b 7c 24 18	 mov	 rdi, QWORD PTR [rsp+24]
  0037d	45 8b c2	 mov	 r8d, r10d
  00380	44 0b d2	 or	 r10d, edx
  00383	33 d0		 xor	 edx, eax
  00385	41 23 c0	 and	 eax, r8d
  00388	45 33 c1	 xor	 r8d, r9d
  0038b	44 33 ca	 xor	 r9d, edx
  0038e	44 0b c0	 or	 r8d, eax
  00391	41 23 d2	 and	 edx, r10d
  00394	44 33 d0	 xor	 r10d, eax
  00397	41 33 d0	 xor	 edx, r8d
  0039a	45 23 c2	 and	 r8d, r10d
  0039d	8b ca		 mov	 ecx, edx
  0039f	45 33 c1	 xor	 r8d, r9d
  003a2	89 53 58	 mov	 DWORD PTR [rbx+88], edx
  003a5	33 c8		 xor	 ecx, eax
  003a7	8b c2		 mov	 eax, edx
  003a9	44 89 43 5c	 mov	 DWORD PTR [rbx+92], r8d
  003ad	41 0b ca	 or	 ecx, r10d
  003b0	41 33 c9	 xor	 ecx, r9d
  003b3	0b c1		 or	 eax, ecx
  003b5	89 4b 54	 mov	 DWORD PTR [rbx+84], ecx
  003b8	33 c2		 xor	 eax, edx
  003ba	41 33 c2	 xor	 eax, r10d
  003bd	89 43 50	 mov	 DWORD PTR [rbx+80], eax
  003c0	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  003c5	c3		 ret	 0
serpent_set_key ENDP
END
